// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3778 0 0
// CreateNature ;
  12: CALL 3649 0 0
// Action ;
  16: CALL 3922 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6439 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6439 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6439 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6439 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6439 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6439 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6439 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6439 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6439 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6439 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6439 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6439 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6439 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6439 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6439 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6439 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 44595 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11425 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14907 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11425 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 43488 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11425 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 44595 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: IFFALSE 3213
3194: PUSH
3195: LD_INT 13
3197: PPUSH
3198: LD_INT 22
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PPUSH
3208: CALL_OW 70
3212: AND
3213: IFFALSE 3646
3215: GO 3217
3217: DISABLE
3218: LD_INT 0
3220: PPUSH
3221: PPUSH
3222: PPUSH
// begin tmp := [ ] ;
3223: LD_ADDR_VAR 0 3
3227: PUSH
3228: EMPTY
3229: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3230: LD_ADDR_VAR 0 1
3234: PUSH
3235: DOUBLE
3236: LD_INT 1
3238: DEC
3239: ST_TO_ADDR
3240: LD_INT 3
3242: PUSH
3243: LD_INT 4
3245: PUSH
3246: LD_INT 5
3248: PUSH
3249: LD_INT 6
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_OWVAR 67
3262: ARRAY
3263: PUSH
3264: FOR_TO
3265: IFFALSE 3382
// begin uc_side := 3 ;
3267: LD_ADDR_OWVAR 20
3271: PUSH
3272: LD_INT 3
3274: ST_TO_ADDR
// uc_nation := nation_russian ;
3275: LD_ADDR_OWVAR 21
3279: PUSH
3280: LD_INT 3
3282: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3283: LD_INT 0
3285: PPUSH
3286: LD_INT 6
3288: PUSH
3289: LD_INT 7
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: LD_INT 9
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 381
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// if Prob ( 50 ) then
3324: LD_INT 50
3326: PPUSH
3327: CALL_OW 13
3331: IFFALSE 3345
// SetClass ( un , class_bazooker ) ;
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 9
3340: PPUSH
3341: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3345: LD_VAR 0 2
3349: PPUSH
3350: LD_INT 12
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_VAR 0 2
3374: PPUSH
3375: CALL 44595 0 2
3379: ST_TO_ADDR
// end ;
3380: GO 3264
3382: POP
3383: POP
// for i := 1 to 4 do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 4
3396: PUSH
3397: FOR_TO
3398: IFFALSE 3568
// begin uc_side := 3 ;
3400: LD_ADDR_OWVAR 20
3404: PUSH
3405: LD_INT 3
3407: ST_TO_ADDR
// uc_nation := nation_russian ;
3408: LD_ADDR_OWVAR 21
3412: PUSH
3413: LD_INT 3
3415: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3416: LD_INT 0
3418: PPUSH
3419: LD_INT 6
3421: PUSH
3422: LD_INT 7
3424: PUSH
3425: LD_INT 8
3427: PUSH
3428: LD_INT 9
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_OWVAR 67
3441: ARRAY
3442: PPUSH
3443: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3447: LD_INT 22
3449: PPUSH
3450: LD_INT 3
3452: PPUSH
3453: LD_INT 1
3455: PPUSH
3456: LD_INT 43
3458: PUSH
3459: LD_INT 44
3461: PUSH
3462: LD_INT 44
3464: PUSH
3465: LD_INT 45
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PUSH
3474: LD_VAR 0 1
3478: PUSH
3479: LD_INT 4
3481: MOD
3482: PUSH
3483: LD_INT 1
3485: PLUS
3486: ARRAY
3487: PPUSH
3488: LD_INT 100
3490: PPUSH
3491: CALL 11425 0 5
// un := CreateVehicle ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 45
3504: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3505: LD_VAR 0 2
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3517: LD_VAR 0 2
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 0
3527: PPUSH
3528: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3532: CALL_OW 44
3536: PPUSH
3537: LD_VAR 0 2
3541: PPUSH
3542: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_VAR 0 2
3560: PPUSH
3561: CALL 44595 0 2
3565: ST_TO_ADDR
// end ;
3566: GO 3397
3568: POP
3569: POP
// repeat wait ( 0 0$1 ) ;
3570: LD_INT 35
3572: PPUSH
3573: CALL_OW 67
// for i in tmp do
3577: LD_ADDR_VAR 0 1
3581: PUSH
3582: LD_VAR 0 3
3586: PUSH
3587: FOR_IN
3588: IFFALSE 3626
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3590: LD_VAR 0 1
3594: PPUSH
3595: LD_INT 22
3597: PUSH
3598: LD_INT 2
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PPUSH
3605: CALL_OW 69
3609: PPUSH
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 74
3619: PPUSH
3620: CALL_OW 115
3624: GO 3587
3626: POP
3627: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_INT 50
3635: PUSH
3636: EMPTY
3637: LIST
3638: PPUSH
3639: CALL_OW 72
3643: NOT
3644: IFFALSE 3570
// end ; end_of_file
3646: PPOPN 3
3648: END
// export function CreateNature ; var i ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
// PrepareTiger ( 0 ) ;
3653: LD_INT 0
3655: PPUSH
3656: CALL 40873 0 1
// for i := 1 to 2 do
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: DOUBLE
3666: LD_INT 1
3668: DEC
3669: ST_TO_ADDR
3670: LD_INT 2
3672: PUSH
3673: FOR_TO
3674: IFFALSE 3693
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3676: CALL_OW 44
3680: PPUSH
3681: LD_INT 4
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 49
3691: GO 3673
3693: POP
3694: POP
// PrepareBird ;
3695: CALL 41102 0 0
// for i := 1 to 3 do
3699: LD_ADDR_VAR 0 2
3703: PUSH
3704: DOUBLE
3705: LD_INT 1
3707: DEC
3708: ST_TO_ADDR
3709: LD_INT 3
3711: PUSH
3712: FOR_TO
3713: IFFALSE 3732
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3715: CALL_OW 44
3719: PPUSH
3720: LD_INT 4
3722: PPUSH
3723: LD_INT 0
3725: PPUSH
3726: CALL_OW 49
3730: GO 3712
3732: POP
3733: POP
// PrepareFrog ;
3734: CALL 40998 0 0
// for i := 1 to 3 do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: DOUBLE
3744: LD_INT 1
3746: DEC
3747: ST_TO_ADDR
3748: LD_INT 3
3750: PUSH
3751: FOR_TO
3752: IFFALSE 3771
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3754: CALL_OW 44
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 49
3769: GO 3751
3771: POP
3772: POP
// end ;
3773: LD_VAR 0 1
3777: RET
// export function LoadTech ; var i , tmp ; begin
3778: LD_INT 0
3780: PPUSH
3781: PPUSH
3782: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_STRING 09_tech
3790: PPUSH
3791: EMPTY
3792: PPUSH
3793: CALL_OW 30
3797: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_VAR 0 3
3812: PPUSH
3813: CALL 8663 0 1
3817: PUSH
3818: FOR_TO
3819: IFFALSE 3846
// SetTech ( i , 2 , tmp [ i ] ) ;
3821: LD_VAR 0 2
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: LD_VAR 0 3
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: CALL_OW 322
3844: GO 3818
3846: POP
3847: POP
// end ; end_of_file
3848: LD_VAR 0 1
3852: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3853: LD_ADDR_EXP 8
3857: PUSH
3858: LD_INT 1
3860: ST_TO_ADDR
// end ;
3861: PPOPN 1
3863: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3864: LD_VAR 0 1
3868: PUSH
3869: LD_EXP 21
3873: EQUAL
3874: IFFALSE 3883
// YouLost ( Schulz ) ;
3876: LD_STRING Schulz
3878: PPUSH
3879: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3883: LD_VAR 0 1
3887: PUSH
3888: LD_EXP 10
3892: EQUAL
3893: IFFALSE 3910
3895: PUSH
3896: LD_VAR 0 1
3900: PPUSH
3901: CALL_OW 255
3905: PUSH
3906: LD_INT 2
3908: EQUAL
3909: AND
3910: IFFALSE 3919
// YouLost ( Heike ) ;
3912: LD_STRING Heike
3914: PPUSH
3915: CALL_OW 104
// end ; end_of_file
3919: PPOPN 1
3921: END
// export function Action ; var p , i , tmp ; begin
3922: LD_INT 0
3924: PPUSH
3925: PPUSH
3926: PPUSH
3927: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3928: LD_INT 12
3930: PPUSH
3931: LD_INT 12
3933: PPUSH
3934: LD_INT 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3944: LD_INT 12
3946: PPUSH
3947: LD_INT 12
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3957: LD_INT 12
3959: PPUSH
3960: LD_INT 12
3962: PPUSH
3963: CALL_OW 86
// InGameOn ;
3967: CALL_OW 8
// PrepareArabian ;
3971: CALL 133 0 0
// InGameOff ;
3975: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3979: LD_STRING M4
3981: PPUSH
3982: CALL_OW 337
// SaveForQuickRestart ;
3986: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3990: LD_INT 35
3992: PPUSH
3993: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3997: LD_INT 9
3999: PPUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 2
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 70
4014: IFFALSE 3990
// PrepareHeikeCamp ;
4016: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4020: LD_INT 70
4022: PPUSH
4023: CALL_OW 67
// if heikeIsDead then
4027: LD_EXP 7
4031: IFFALSE 4371
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4033: LD_INT 116
4035: PPUSH
4036: LD_INT 58
4038: PPUSH
4039: LD_INT 2
4041: PPUSH
4042: LD_INT 26
4044: NEG
4045: PPUSH
4046: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4050: LD_INT 116
4052: PPUSH
4053: LD_INT 58
4055: PPUSH
4056: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4060: LD_EXP 21
4064: PPUSH
4065: LD_STRING DL-Obj-a-1
4067: PPUSH
4068: CALL_OW 88
// InGameOn ;
4072: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4076: LD_INT 116
4078: PPUSH
4079: LD_INT 58
4081: PPUSH
4082: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: LD_EXP 21
4105: PUSH
4106: LD_EXP 25
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: DIFF
4115: PPUSH
4116: LD_INT 96
4118: PPUSH
4119: LD_INT 65
4121: PPUSH
4122: CALL_OW 111
// if IsInUnit ( Schulz ) then
4126: LD_EXP 21
4130: PPUSH
4131: CALL_OW 310
4135: IFFALSE 4159
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4137: LD_EXP 21
4141: PPUSH
4142: CALL_OW 310
4146: PPUSH
4147: LD_INT 115
4149: PPUSH
4150: LD_INT 61
4152: PPUSH
4153: CALL_OW 111
4157: GO 4174
// ComMoveXY ( Schulz , 115 , 61 ) ;
4159: LD_EXP 21
4163: PPUSH
4164: LD_INT 115
4166: PPUSH
4167: LD_INT 61
4169: PPUSH
4170: CALL_OW 111
// if IsInUnit ( Nia ) then
4174: LD_EXP 25
4178: PPUSH
4179: CALL_OW 310
4183: IFFALSE 4207
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4185: LD_EXP 25
4189: PPUSH
4190: CALL_OW 310
4194: PPUSH
4195: LD_INT 115
4197: PPUSH
4198: LD_INT 61
4200: PPUSH
4201: CALL_OW 111
4205: GO 4222
// ComMoveXY ( Nia , 115 , 61 ) ;
4207: LD_EXP 25
4211: PPUSH
4212: LD_INT 115
4214: PPUSH
4215: LD_INT 61
4217: PPUSH
4218: CALL_OW 111
// p := 0 ;
4222: LD_ADDR_VAR 0 2
4226: PUSH
4227: LD_INT 0
4229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4230: LD_INT 35
4232: PPUSH
4233: CALL_OW 67
// p := Inc ( p ) ;
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: LD_VAR 0 2
4246: PPUSH
4247: CALL 45968 0 1
4251: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4252: LD_INT 115
4254: PPUSH
4255: LD_INT 61
4257: PPUSH
4258: CALL_OW 428
4262: IFTRUE 4274
4264: PUSH
4265: LD_VAR 0 2
4269: PUSH
4270: LD_INT 20
4272: GREATER
4273: OR
4274: IFFALSE 4230
// if Givi and IsOk ( Nia ) then
4276: LD_EXP 11
4280: IFFALSE 4293
4282: PUSH
4283: LD_EXP 25
4287: PPUSH
4288: CALL_OW 302
4292: AND
4293: IFFALSE 4343
// begin Say ( Nia , DN-Obj-a-2 ) ;
4295: LD_EXP 25
4299: PPUSH
4300: LD_STRING DN-Obj-a-2
4302: PPUSH
4303: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4307: LD_EXP 21
4311: PPUSH
4312: LD_STRING DL-Obj-a-3
4314: PPUSH
4315: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4319: LD_EXP 25
4323: PPUSH
4324: LD_STRING DN-Obj-a-4
4326: PPUSH
4327: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4331: LD_EXP 21
4335: PPUSH
4336: LD_STRING DL-Obj-a-5
4338: PPUSH
4339: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4343: LD_INT 35
4345: PPUSH
4346: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4350: LD_EXP 21
4354: PPUSH
4355: LD_STRING DL-Fail-1
4357: PPUSH
4358: CALL_OW 88
// YouLost ( Fail ) ;
4362: LD_STRING Fail
4364: PPUSH
4365: CALL_OW 104
// exit ;
4369: GO 5390
// end ; PrepareRussianBaseAttackers ;
4371: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4375: LD_INT 35
4377: PPUSH
4378: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4382: LD_INT 116
4384: PPUSH
4385: LD_INT 58
4387: PPUSH
4388: LD_INT 2
4390: PPUSH
4391: LD_INT 26
4393: NEG
4394: PPUSH
4395: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4399: LD_INT 116
4401: PPUSH
4402: LD_INT 58
4404: PPUSH
4405: LD_INT 2
4407: PPUSH
4408: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4412: LD_INT 116
4414: PPUSH
4415: LD_INT 58
4417: PPUSH
4418: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4422: LD_INT 5
4424: PPUSH
4425: LD_INT 2
4427: PPUSH
4428: CALL_OW 343
// DialogueOn ;
4432: CALL_OW 6
// Say ( Schulz , DL-Obj-1 ) ;
4436: LD_EXP 21
4440: PPUSH
4441: LD_STRING DL-Obj-1
4443: PPUSH
4444: CALL_OW 88
// DialogueOff ;
4448: CALL_OW 7
// PrepareBasim ;
4452: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4456: LD_INT 10
4458: PPUSH
4459: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4463: LD_INT 8
4465: PPUSH
4466: LD_INT 2
4468: PPUSH
4469: CALL_OW 343
// repeat wait ( 0 0$0.3 ) ;
4473: LD_INT 10
4475: PPUSH
4476: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 12 ] ] ) ;
4480: LD_INT 22
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 92
4492: PUSH
4493: LD_INT 117
4495: PUSH
4496: LD_INT 58
4498: PUSH
4499: LD_INT 12
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 69
4516: IFFALSE 4473
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 5
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: PUSH
4538: FOR_IN
4539: IFFALSE 4555
// SetSide ( i , 2 ) ;
4541: LD_VAR 0 3
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: CALL_OW 235
4553: GO 4538
4555: POP
4556: POP
// repeat wait ( 0 0$1 ) ;
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4564: LD_ADDR_VAR 0 4
4568: PUSH
4569: LD_INT 50
4571: PUSH
4572: EMPTY
4573: LIST
4574: PUSH
4575: LD_INT 25
4577: PUSH
4578: LD_INT 17
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PPUSH
4589: CALL_OW 69
4593: ST_TO_ADDR
// for i in tmp do
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: LD_VAR 0 4
4603: PUSH
4604: FOR_IN
4605: IFFALSE 4643
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 69
4626: PPUSH
4627: LD_VAR 0 3
4631: PPUSH
4632: CALL_OW 74
4636: PPUSH
4637: CALL_OW 115
4641: GO 4604
4643: POP
4644: POP
// until See ( 2 , Basim ) and kamikazed ;
4645: LD_INT 2
4647: PPUSH
4648: LD_EXP 22
4652: PPUSH
4653: CALL_OW 292
4657: IFFALSE 4665
4659: PUSH
4660: LD_EXP 8
4664: AND
4665: IFFALSE 4557
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4667: LD_ADDR_VAR 0 4
4671: PUSH
4672: LD_INT 50
4674: PUSH
4675: EMPTY
4676: LIST
4677: PUSH
4678: LD_INT 25
4680: PUSH
4681: LD_INT 17
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: ST_TO_ADDR
// if tmp then
4697: LD_VAR 0 4
4701: IFFALSE 4729
// for i in tmp do
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: LD_VAR 0 4
4712: PUSH
4713: FOR_IN
4714: IFFALSE 4727
// KillUnit ( i ) ;
4716: LD_VAR 0 3
4720: PPUSH
4721: CALL_OW 66
4725: GO 4713
4727: POP
4728: POP
// Say ( Basim , DBs-Obj-2 ) ;
4729: LD_EXP 22
4733: PPUSH
4734: LD_STRING DBs-Obj-2
4736: PPUSH
4737: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4741: LD_INT 35
4743: PPUSH
4744: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4748: LD_INT 22
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: LD_INT 50
4760: PUSH
4761: EMPTY
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: NOT
4773: IFFALSE 4741
// ComExit ( Heike ) ;
4775: LD_EXP 10
4779: PPUSH
4780: CALL 44993 0 1
// DialogueOn ;
4784: CALL_OW 6
// if IsOk ( Kaia ) then
4788: LD_EXP 15
4792: PPUSH
4793: CALL_OW 302
4797: IFFALSE 4940
// begin CenterNowOnUnits ( Kaia ) ;
4799: LD_EXP 15
4803: PPUSH
4804: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DK-Obj-3
4815: PPUSH
4816: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4820: LD_EXP 11
4824: PPUSH
4825: LD_STRING DG-Obj-4
4827: PPUSH
4828: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4832: LD_EXP 15
4836: PPUSH
4837: LD_STRING DK-Obj-5
4839: PPUSH
4840: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4844: LD_EXP 15
4848: PPUSH
4849: LD_STRING DK-Obj-6
4851: PPUSH
4852: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4856: LD_EXP 15
4860: PPUSH
4861: LD_STRING DK-Obj-7
4863: PPUSH
4864: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4868: LD_EXP 15
4872: PPUSH
4873: LD_STRING DK-Obj-8
4875: PPUSH
4876: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4880: LD_EXP 21
4884: PPUSH
4885: LD_STRING DL-Obj-9
4887: PPUSH
4888: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4892: LD_EXP 21
4896: PPUSH
4897: LD_STRING DL-Obj-10
4899: PPUSH
4900: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4904: LD_EXP 21
4908: PPUSH
4909: LD_STRING DL-Obj-11
4911: PPUSH
4912: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4916: LD_EXP 21
4920: PPUSH
4921: LD_STRING DL-Obj-12
4923: PPUSH
4924: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4928: LD_EXP 21
4932: PPUSH
4933: LD_STRING DL-Obj-13
4935: PPUSH
4936: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4940: LD_EXP 19
4944: PPUSH
4945: CALL_OW 302
4949: IFFALSE 4987
// begin Say ( Kurt , DKs-Obj-14 ) ;
4951: LD_EXP 19
4955: PPUSH
4956: LD_STRING DKs-Obj-14
4958: PPUSH
4959: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4963: LD_EXP 19
4967: PPUSH
4968: LD_STRING DKs-Obj-15
4970: PPUSH
4971: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4975: LD_EXP 11
4979: PPUSH
4980: LD_STRING DG-Obj-16
4982: PPUSH
4983: CALL_OW 88
// end ; DialogueOff ;
4987: CALL_OW 7
// SetSide ( Basim , 2 ) ;
4991: LD_EXP 22
4995: PPUSH
4996: LD_INT 2
4998: PPUSH
4999: CALL_OW 235
// wait ( 0 0$3 ) ;
5003: LD_INT 105
5005: PPUSH
5006: CALL_OW 67
// ComExit ( Givi ) ;
5010: LD_EXP 11
5014: PPUSH
5015: CALL 44993 0 1
// ComExit ( Nia ) ;
5019: LD_EXP 25
5023: PPUSH
5024: CALL 44993 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5028: LD_EXP 25
5032: PPUSH
5033: LD_EXP 11
5037: PPUSH
5038: CALL_OW 172
// wait ( 0 0$1 ) ;
5042: LD_INT 35
5044: PPUSH
5045: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5049: LD_EXP 11
5053: PPUSH
5054: CALL_OW 302
5058: IFFALSE 5071
5060: PUSH
5061: LD_EXP 25
5065: PPUSH
5066: CALL_OW 302
5070: AND
5071: IFFALSE 5345
// begin DialogueOn ;
5073: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5077: LD_EXP 11
5081: PPUSH
5082: LD_STRING DG-Nia-1
5084: PPUSH
5085: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5089: LD_EXP 10
5093: PPUSH
5094: LD_STRING DH-Nia-2
5096: PPUSH
5097: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5101: LD_EXP 11
5105: PPUSH
5106: LD_STRING DG-Nia-3
5108: PPUSH
5109: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5113: LD_EXP 25
5117: PPUSH
5118: LD_STRING DN-Nia-4
5120: PPUSH
5121: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5125: LD_EXP 10
5129: PPUSH
5130: LD_STRING DH-Nia-5
5132: PPUSH
5133: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5137: LD_EXP 11
5141: PPUSH
5142: LD_STRING DG-Nia-6
5144: PPUSH
5145: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5149: LD_EXP 25
5153: PPUSH
5154: LD_STRING DN-Nia-7
5156: PPUSH
5157: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5161: LD_EXP 25
5165: PPUSH
5166: LD_STRING DN-Nia-8
5168: PPUSH
5169: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5173: LD_EXP 25
5177: PPUSH
5178: LD_STRING DN-Nia-9
5180: PPUSH
5181: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5185: LD_EXP 25
5189: PPUSH
5190: LD_STRING DN-Nia-10
5192: PPUSH
5193: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5197: LD_EXP 11
5201: PPUSH
5202: LD_STRING DG-Nia-11
5204: PPUSH
5205: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5209: LD_EXP 25
5213: PPUSH
5214: LD_STRING DN-Nia-12
5216: PPUSH
5217: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5221: LD_EXP 10
5225: PPUSH
5226: LD_STRING DH-Nia-13
5228: PPUSH
5229: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5233: LD_EXP 25
5237: PPUSH
5238: LD_STRING DN-Nia-14
5240: PPUSH
5241: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5245: LD_EXP 10
5249: PPUSH
5250: LD_STRING DH-Nia-15
5252: PPUSH
5253: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5257: LD_EXP 21
5261: PPUSH
5262: LD_STRING DL-Nia-16
5264: PPUSH
5265: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5269: LD_EXP 10
5273: PPUSH
5274: LD_STRING DH-Nia-17
5276: PPUSH
5277: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5281: LD_EXP 10
5285: PPUSH
5286: LD_STRING DH-Nia-18
5288: PPUSH
5289: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5293: LD_EXP 13
5297: PPUSH
5298: LD_STRING DI-Nia-19
5300: PPUSH
5301: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5305: LD_EXP 21
5309: PPUSH
5310: LD_STRING DL-Nia-20
5312: PPUSH
5313: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5317: LD_EXP 21
5321: PPUSH
5322: LD_STRING DL-Nia-21
5324: PPUSH
5325: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5329: LD_EXP 21
5333: PPUSH
5334: LD_STRING DL-Nia-22
5336: PPUSH
5337: CALL_OW 88
// DialogueOff ;
5341: CALL_OW 7
// end ; DialogueOn ;
5345: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5349: LD_EXP 21
5353: PPUSH
5354: LD_STRING DL-Retreat-1
5356: PPUSH
5357: CALL_OW 88
// DialogueOff ;
5361: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5365: LD_STRING M5
5367: PPUSH
5368: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5372: LD_INT 13
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: CALL_OW 424
// startRussianAttacks := true ;
5382: LD_ADDR_EXP 9
5386: PUSH
5387: LD_INT 1
5389: ST_TO_ADDR
// end ;
5390: LD_VAR 0 1
5394: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5395: LD_EXP 9
5399: IFFALSE 5442
5401: PUSH
5402: LD_INT 13
5404: PPUSH
5405: LD_INT 22
5407: PUSH
5408: LD_INT 2
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 50
5417: PUSH
5418: EMPTY
5419: LIST
5420: PUSH
5421: LD_INT 21
5423: PUSH
5424: LD_INT 1
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: PPUSH
5436: CALL_OW 71
5440: NOT
5441: AND
5442: IFFALSE 5451
5444: GO 5446
5446: DISABLE
// EndMission ;
5447: CALL 5452 0 0
5451: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5452: LD_INT 0
5454: PPUSH
5455: PPUSH
5456: PPUSH
5457: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5458: LD_ADDR_VAR 0 3
5462: PUSH
5463: LD_INT 13
5465: PPUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 2
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL_OW 70
5494: ST_TO_ADDR
// saveVehicles := [ ] ;
5495: LD_ADDR_VAR 0 4
5499: PUSH
5500: EMPTY
5501: ST_TO_ADDR
// for i in tmp do
5502: LD_ADDR_VAR 0 2
5506: PUSH
5507: LD_VAR 0 3
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5622
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5515: LD_ADDR_VAR 0 4
5519: PUSH
5520: LD_VAR 0 4
5524: PPUSH
5525: LD_VAR 0 2
5529: PPUSH
5530: CALL_OW 265
5534: PUSH
5535: LD_VAR 0 2
5539: PPUSH
5540: CALL_OW 262
5544: PUSH
5545: LD_VAR 0 2
5549: PPUSH
5550: CALL_OW 263
5554: PUSH
5555: LD_VAR 0 2
5559: PPUSH
5560: CALL_OW 264
5564: PUSH
5565: LD_VAR 0 2
5569: PPUSH
5570: CALL_OW 248
5574: PUSH
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 261
5584: PUSH
5585: LD_VAR 0 2
5589: PPUSH
5590: CALL_OW 271
5594: PUSH
5595: LD_VAR 0 2
5599: PPUSH
5600: CALL_OW 311
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: PPUSH
5615: CALL 44595 0 2
5619: ST_TO_ADDR
5620: GO 5512
5622: POP
5623: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5624: LD_EXP 21
5628: PPUSH
5629: LD_STRING 09c_Schulz
5631: PPUSH
5632: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5636: LD_EXP 21
5640: PPUSH
5641: LD_STRING 09c_Schulz_ID
5643: PPUSH
5644: CALL_OW 39
// if IsOk ( Lemmy ) then
5648: LD_EXP 23
5652: PPUSH
5653: CALL_OW 302
5657: IFFALSE 5683
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5659: LD_EXP 23
5663: PPUSH
5664: LD_STRING 09c_Lemmy
5666: PPUSH
5667: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5671: LD_EXP 23
5675: PPUSH
5676: LD_STRING 09c_Lemmy_ID
5678: PPUSH
5679: CALL_OW 39
// end ; if IsOk ( Nia ) then
5683: LD_EXP 25
5687: PPUSH
5688: CALL_OW 302
5692: IFFALSE 5718
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5694: LD_EXP 25
5698: PPUSH
5699: LD_STRING 09c_Nia
5701: PPUSH
5702: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5706: LD_EXP 25
5710: PPUSH
5711: LD_STRING 09c_Nia_ID
5713: PPUSH
5714: CALL_OW 39
// end ; if IsOk ( Mia ) then
5718: LD_EXP 24
5722: PPUSH
5723: CALL_OW 302
5727: IFFALSE 5753
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5729: LD_EXP 24
5733: PPUSH
5734: LD_STRING 09c_Mia
5736: PPUSH
5737: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5741: LD_EXP 24
5745: PPUSH
5746: LD_STRING 09c_Mia_ID
5748: PPUSH
5749: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5753: LD_EXP 26
5757: PPUSH
5758: CALL_OW 302
5762: IFFALSE 5788
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5764: LD_EXP 26
5768: PPUSH
5769: LD_STRING 09c_Jenna
5771: PPUSH
5772: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5776: LD_EXP 26
5780: PPUSH
5781: LD_STRING 09c_Jenna_ID
5783: PPUSH
5784: CALL_OW 39
// end ; if IsOk ( Basim ) then
5788: LD_EXP 22
5792: PPUSH
5793: CALL_OW 302
5797: IFFALSE 5823
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5799: LD_EXP 22
5803: PPUSH
5804: LD_STRING 09c_Basim
5806: PPUSH
5807: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5811: LD_EXP 22
5815: PPUSH
5816: LD_STRING 09c_Basim_ID
5818: PPUSH
5819: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5823: LD_EXP 10
5827: PPUSH
5828: LD_STRING 09c_Heike
5830: PPUSH
5831: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5835: LD_EXP 10
5839: PPUSH
5840: LD_STRING 09c_Heike_ID
5842: PPUSH
5843: CALL_OW 39
// if IsOk ( Givi ) then
5847: LD_EXP 11
5851: PPUSH
5852: CALL_OW 302
5856: IFFALSE 5882
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5858: LD_EXP 11
5862: PPUSH
5863: LD_STRING 09c_Givi
5865: PPUSH
5866: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5870: LD_EXP 11
5874: PPUSH
5875: LD_STRING 09c_Givi_ID
5877: PPUSH
5878: CALL_OW 39
// end ; if IsOk ( Mike ) then
5882: LD_EXP 12
5886: PPUSH
5887: CALL_OW 302
5891: IFFALSE 5917
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5893: LD_EXP 12
5897: PPUSH
5898: LD_STRING 09c_Mike
5900: PPUSH
5901: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5905: LD_EXP 12
5909: PPUSH
5910: LD_STRING 09c_Mike_ID
5912: PPUSH
5913: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5917: LD_EXP 13
5921: PPUSH
5922: CALL_OW 302
5926: IFFALSE 5952
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5928: LD_EXP 13
5932: PPUSH
5933: LD_STRING 09c_Ibrahim
5935: PPUSH
5936: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5940: LD_EXP 13
5944: PPUSH
5945: LD_STRING 09c_Ibrahim_ID
5947: PPUSH
5948: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5952: LD_EXP 14
5956: PPUSH
5957: CALL_OW 302
5961: IFFALSE 5987
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5963: LD_EXP 14
5967: PPUSH
5968: LD_STRING 09c_Kamil
5970: PPUSH
5971: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5975: LD_EXP 14
5979: PPUSH
5980: LD_STRING 09c_Kamil_ID
5982: PPUSH
5983: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5987: LD_EXP 15
5991: PPUSH
5992: CALL_OW 302
5996: IFFALSE 6022
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5998: LD_EXP 15
6002: PPUSH
6003: LD_STRING 09c_Kaia
6005: PPUSH
6006: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
6010: LD_EXP 15
6014: PPUSH
6015: LD_STRING 09c_Kaia_ID
6017: PPUSH
6018: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6022: LD_EXP 16
6026: PPUSH
6027: CALL_OW 302
6031: IFFALSE 6057
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6033: LD_EXP 16
6037: PPUSH
6038: LD_STRING 09c_Sophia
6040: PPUSH
6041: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6045: LD_EXP 16
6049: PPUSH
6050: LD_STRING 09c_Sophia_ID
6052: PPUSH
6053: CALL_OW 39
// end ; if IsOk ( Markov ) then
6057: LD_EXP 17
6061: PPUSH
6062: CALL_OW 302
6066: IFFALSE 6092
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6068: LD_EXP 17
6072: PPUSH
6073: LD_STRING 09c_Markov
6075: PPUSH
6076: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6080: LD_EXP 17
6084: PPUSH
6085: LD_STRING 09c_Markov_ID
6087: PPUSH
6088: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6092: LD_EXP 18
6096: PPUSH
6097: CALL_OW 302
6101: IFFALSE 6127
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6103: LD_EXP 18
6107: PPUSH
6108: LD_STRING 09c_Olaf
6110: PPUSH
6111: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6115: LD_EXP 18
6119: PPUSH
6120: LD_STRING 09c_Olaf_ID
6122: PPUSH
6123: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6127: LD_EXP 19
6131: PPUSH
6132: CALL_OW 302
6136: IFFALSE 6162
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6138: LD_EXP 19
6142: PPUSH
6143: LD_STRING 09c_Kurt
6145: PPUSH
6146: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_STRING 09c_Kurt_ID
6157: PPUSH
6158: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6162: LD_EXP 20
6166: PPUSH
6167: CALL_OW 302
6171: IFFALSE 6197
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6173: LD_EXP 20
6177: PPUSH
6178: LD_STRING 09c_Aviradze
6180: PPUSH
6181: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6185: LD_EXP 20
6189: PPUSH
6190: LD_STRING 09c_Aviradze_ID
6192: PPUSH
6193: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6197: LD_EXP 28
6201: PPUSH
6202: LD_INT 50
6204: PUSH
6205: EMPTY
6206: LIST
6207: PPUSH
6208: CALL_OW 72
6212: PPUSH
6213: LD_STRING 09c_schulzSecondSquad
6215: PPUSH
6216: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6220: LD_EXP 27
6224: PPUSH
6225: LD_INT 50
6227: PUSH
6228: EMPTY
6229: LIST
6230: PPUSH
6231: CALL_OW 72
6235: PPUSH
6236: LD_STRING 09c_heikeSecondSquad
6238: PPUSH
6239: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: DOUBLE
6249: LD_INT 1
6251: DEC
6252: ST_TO_ADDR
6253: LD_EXP 28
6257: PPUSH
6258: LD_INT 50
6260: PUSH
6261: EMPTY
6262: LIST
6263: PPUSH
6264: CALL_OW 72
6268: PUSH
6269: FOR_TO
6270: IFFALSE 6298
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6272: LD_EXP 28
6276: PUSH
6277: LD_VAR 0 2
6281: ARRAY
6282: PPUSH
6283: LD_STRING 09c_random_ID_
6285: PUSH
6286: LD_VAR 0 2
6290: STR
6291: PPUSH
6292: CALL_OW 39
6296: GO 6269
6298: POP
6299: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6300: LD_ADDR_VAR 0 2
6304: PUSH
6305: DOUBLE
6306: LD_INT 1
6308: DEC
6309: ST_TO_ADDR
6310: LD_EXP 27
6314: PPUSH
6315: LD_INT 50
6317: PUSH
6318: EMPTY
6319: LIST
6320: PPUSH
6321: CALL_OW 72
6325: PUSH
6326: FOR_TO
6327: IFFALSE 6355
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6329: LD_EXP 27
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: PPUSH
6340: LD_STRING 09c_hrandom_ID_
6342: PUSH
6343: LD_VAR 0 2
6347: STR
6348: PPUSH
6349: CALL_OW 39
6353: GO 6326
6355: POP
6356: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6357: LD_VAR 0 4
6361: PPUSH
6362: LD_STRING 09c_vehicles
6364: PPUSH
6365: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6369: LD_OWVAR 1
6373: PPUSH
6374: LD_STRING 09c_tick
6376: PPUSH
6377: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6381: LD_INT 22
6383: PUSH
6384: LD_INT 2
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 23
6393: PUSH
6394: LD_INT 0
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PPUSH
6405: CALL_OW 69
6409: PPUSH
6410: LD_STRING 09c_apes
6412: PPUSH
6413: CALL_OW 38
// wait ( 3 ) ;
6417: LD_INT 3
6419: PPUSH
6420: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6424: LD_INT 1
6426: PPUSH
6427: LD_STRING __x1/09_cont3
6429: PPUSH
6430: CALL_OW 340
// end ; end_of_file
6434: LD_VAR 0 1
6438: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
// if exist_mode then
6443: LD_VAR 0 2
6447: IFFALSE 6493
// begin unit := CreateCharacter ( prefix & ident ) ;
6449: LD_ADDR_VAR 0 5
6453: PUSH
6454: LD_VAR 0 3
6458: PUSH
6459: LD_VAR 0 1
6463: STR
6464: PPUSH
6465: CALL_OW 34
6469: ST_TO_ADDR
// if unit then
6470: LD_VAR 0 5
6474: IFFALSE 6491
// DeleteCharacters ( prefix & ident ) ;
6476: LD_VAR 0 3
6480: PUSH
6481: LD_VAR 0 1
6485: STR
6486: PPUSH
6487: CALL_OW 40
// end else
6491: GO 6508
// unit := NewCharacter ( ident ) ;
6493: LD_ADDR_VAR 0 5
6497: PUSH
6498: LD_VAR 0 1
6502: PPUSH
6503: CALL_OW 25
6507: ST_TO_ADDR
// result := unit ;
6508: LD_ADDR_VAR 0 4
6512: PUSH
6513: LD_VAR 0 5
6517: ST_TO_ADDR
// end ;
6518: LD_VAR 0 4
6522: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
6523: LD_INT 0
6525: PPUSH
6526: PPUSH
// if exist_mode then
6527: LD_VAR 0 2
6531: IFFALSE 6556
// unit := CreateCharacter ( prefix & ident ) else
6533: LD_ADDR_VAR 0 5
6537: PUSH
6538: LD_VAR 0 3
6542: PUSH
6543: LD_VAR 0 1
6547: STR
6548: PPUSH
6549: CALL_OW 34
6553: ST_TO_ADDR
6554: GO 6571
// unit := NewCharacter ( ident ) ;
6556: LD_ADDR_VAR 0 5
6560: PUSH
6561: LD_VAR 0 1
6565: PPUSH
6566: CALL_OW 25
6570: ST_TO_ADDR
// result := unit ;
6571: LD_ADDR_VAR 0 4
6575: PUSH
6576: LD_VAR 0 5
6580: ST_TO_ADDR
// end ;
6581: LD_VAR 0 4
6585: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6586: LD_INT 0
6588: PPUSH
6589: PPUSH
// if not side or not nation then
6590: LD_VAR 0 1
6594: NOT
6595: IFTRUE 6604
6597: PUSH
6598: LD_VAR 0 2
6602: NOT
6603: OR
6604: IFFALSE 6608
// exit ;
6606: GO 7402
// case nation of nation_american :
6608: LD_VAR 0 2
6612: PUSH
6613: LD_INT 1
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6843
6621: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
6622: LD_ADDR_VAR 0 4
6626: PUSH
6627: LD_INT 35
6629: PUSH
6630: LD_INT 45
6632: PUSH
6633: LD_INT 46
6635: PUSH
6636: LD_INT 47
6638: PUSH
6639: LD_INT 82
6641: PUSH
6642: LD_INT 83
6644: PUSH
6645: LD_INT 84
6647: PUSH
6648: LD_INT 85
6650: PUSH
6651: LD_INT 86
6653: PUSH
6654: LD_INT 1
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 6
6662: PUSH
6663: LD_INT 15
6665: PUSH
6666: LD_INT 16
6668: PUSH
6669: LD_INT 7
6671: PUSH
6672: LD_INT 12
6674: PUSH
6675: LD_INT 13
6677: PUSH
6678: LD_INT 10
6680: PUSH
6681: LD_INT 14
6683: PUSH
6684: LD_INT 20
6686: PUSH
6687: LD_INT 21
6689: PUSH
6690: LD_INT 22
6692: PUSH
6693: LD_INT 25
6695: PUSH
6696: LD_INT 32
6698: PUSH
6699: LD_INT 27
6701: PUSH
6702: LD_INT 36
6704: PUSH
6705: LD_INT 69
6707: PUSH
6708: LD_INT 39
6710: PUSH
6711: LD_INT 34
6713: PUSH
6714: LD_INT 40
6716: PUSH
6717: LD_INT 48
6719: PUSH
6720: LD_INT 49
6722: PUSH
6723: LD_INT 50
6725: PUSH
6726: LD_INT 51
6728: PUSH
6729: LD_INT 52
6731: PUSH
6732: LD_INT 53
6734: PUSH
6735: LD_INT 54
6737: PUSH
6738: LD_INT 55
6740: PUSH
6741: LD_INT 56
6743: PUSH
6744: LD_INT 57
6746: PUSH
6747: LD_INT 58
6749: PUSH
6750: LD_INT 59
6752: PUSH
6753: LD_INT 60
6755: PUSH
6756: LD_INT 61
6758: PUSH
6759: LD_INT 62
6761: PUSH
6762: LD_INT 80
6764: PUSH
6765: LD_INT 82
6767: PUSH
6768: LD_INT 83
6770: PUSH
6771: LD_INT 84
6773: PUSH
6774: LD_INT 85
6776: PUSH
6777: LD_INT 86
6779: PUSH
6780: LD_INT 90
6782: PUSH
6783: LD_INT 93
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: ST_TO_ADDR
6841: GO 7324
6843: LD_INT 2
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7085
6851: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
6852: LD_ADDR_VAR 0 4
6856: PUSH
6857: LD_INT 35
6859: PUSH
6860: LD_INT 45
6862: PUSH
6863: LD_INT 46
6865: PUSH
6866: LD_INT 47
6868: PUSH
6869: LD_INT 82
6871: PUSH
6872: LD_INT 83
6874: PUSH
6875: LD_INT 84
6877: PUSH
6878: LD_INT 85
6880: PUSH
6881: LD_INT 87
6883: PUSH
6884: LD_INT 70
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: LD_INT 11
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: LD_INT 5
6901: PUSH
6902: LD_INT 6
6904: PUSH
6905: LD_INT 15
6907: PUSH
6908: LD_INT 18
6910: PUSH
6911: LD_INT 7
6913: PUSH
6914: LD_INT 17
6916: PUSH
6917: LD_INT 8
6919: PUSH
6920: LD_INT 20
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 72
6931: PUSH
6932: LD_INT 26
6934: PUSH
6935: LD_INT 69
6937: PUSH
6938: LD_INT 39
6940: PUSH
6941: LD_INT 40
6943: PUSH
6944: LD_INT 41
6946: PUSH
6947: LD_INT 42
6949: PUSH
6950: LD_INT 43
6952: PUSH
6953: LD_INT 48
6955: PUSH
6956: LD_INT 49
6958: PUSH
6959: LD_INT 50
6961: PUSH
6962: LD_INT 51
6964: PUSH
6965: LD_INT 52
6967: PUSH
6968: LD_INT 53
6970: PUSH
6971: LD_INT 54
6973: PUSH
6974: LD_INT 55
6976: PUSH
6977: LD_INT 56
6979: PUSH
6980: LD_INT 60
6982: PUSH
6983: LD_INT 61
6985: PUSH
6986: LD_INT 62
6988: PUSH
6989: LD_INT 66
6991: PUSH
6992: LD_INT 67
6994: PUSH
6995: LD_INT 68
6997: PUSH
6998: LD_INT 81
7000: PUSH
7001: LD_INT 82
7003: PUSH
7004: LD_INT 83
7006: PUSH
7007: LD_INT 84
7009: PUSH
7010: LD_INT 85
7012: PUSH
7013: LD_INT 87
7015: PUSH
7016: LD_INT 88
7018: PUSH
7019: LD_INT 92
7021: PUSH
7022: LD_INT 94
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: ST_TO_ADDR
7083: GO 7324
7085: LD_INT 3
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7323
7093: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
7094: LD_ADDR_VAR 0 4
7098: PUSH
7099: LD_INT 46
7101: PUSH
7102: LD_INT 47
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: LD_INT 2
7110: PUSH
7111: LD_INT 82
7113: PUSH
7114: LD_INT 83
7116: PUSH
7117: LD_INT 84
7119: PUSH
7120: LD_INT 85
7122: PUSH
7123: LD_INT 86
7125: PUSH
7126: LD_INT 11
7128: PUSH
7129: LD_INT 9
7131: PUSH
7132: LD_INT 20
7134: PUSH
7135: LD_INT 19
7137: PUSH
7138: LD_INT 21
7140: PUSH
7141: LD_INT 24
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_INT 25
7149: PUSH
7150: LD_INT 28
7152: PUSH
7153: LD_INT 29
7155: PUSH
7156: LD_INT 30
7158: PUSH
7159: LD_INT 31
7161: PUSH
7162: LD_INT 37
7164: PUSH
7165: LD_INT 38
7167: PUSH
7168: LD_INT 32
7170: PUSH
7171: LD_INT 27
7173: PUSH
7174: LD_INT 33
7176: PUSH
7177: LD_INT 69
7179: PUSH
7180: LD_INT 39
7182: PUSH
7183: LD_INT 34
7185: PUSH
7186: LD_INT 40
7188: PUSH
7189: LD_INT 71
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 44
7197: PUSH
7198: LD_INT 48
7200: PUSH
7201: LD_INT 49
7203: PUSH
7204: LD_INT 50
7206: PUSH
7207: LD_INT 51
7209: PUSH
7210: LD_INT 52
7212: PUSH
7213: LD_INT 53
7215: PUSH
7216: LD_INT 54
7218: PUSH
7219: LD_INT 55
7221: PUSH
7222: LD_INT 56
7224: PUSH
7225: LD_INT 57
7227: PUSH
7228: LD_INT 58
7230: PUSH
7231: LD_INT 59
7233: PUSH
7234: LD_INT 63
7236: PUSH
7237: LD_INT 64
7239: PUSH
7240: LD_INT 65
7242: PUSH
7243: LD_INT 82
7245: PUSH
7246: LD_INT 83
7248: PUSH
7249: LD_INT 84
7251: PUSH
7252: LD_INT 85
7254: PUSH
7255: LD_INT 86
7257: PUSH
7258: LD_INT 89
7260: PUSH
7261: LD_INT 91
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: ST_TO_ADDR
7321: GO 7324
7323: POP
// if state > - 1 and state < 3 then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 1
7331: NEG
7332: GREATER
7333: IFFALSE 7345
7335: PUSH
7336: LD_VAR 0 3
7340: PUSH
7341: LD_INT 3
7343: LESS
7344: AND
7345: IFFALSE 7402
// for i in result do
7347: LD_ADDR_VAR 0 5
7351: PUSH
7352: LD_VAR 0 4
7356: PUSH
7357: FOR_IN
7358: IFFALSE 7400
// if GetTech ( i , side ) <> state then
7360: LD_VAR 0 5
7364: PPUSH
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL_OW 321
7374: PUSH
7375: LD_VAR 0 3
7379: NONEQUAL
7380: IFFALSE 7398
// result := result diff i ;
7382: LD_ADDR_VAR 0 4
7386: PUSH
7387: LD_VAR 0 4
7391: PUSH
7392: LD_VAR 0 5
7396: DIFF
7397: ST_TO_ADDR
7398: GO 7357
7400: POP
7401: POP
// end ;
7402: LD_VAR 0 4
7406: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7407: LD_INT 0
7409: PPUSH
7410: PPUSH
7411: PPUSH
// result := true ;
7412: LD_ADDR_VAR 0 3
7416: PUSH
7417: LD_INT 1
7419: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7420: LD_ADDR_VAR 0 5
7424: PUSH
7425: LD_VAR 0 2
7429: PPUSH
7430: CALL_OW 480
7434: ST_TO_ADDR
// if not tmp then
7435: LD_VAR 0 5
7439: NOT
7440: IFFALSE 7444
// exit ;
7442: GO 7493
// for i in tmp do
7444: LD_ADDR_VAR 0 4
7448: PUSH
7449: LD_VAR 0 5
7453: PUSH
7454: FOR_IN
7455: IFFALSE 7491
// if GetTech ( i , side ) <> state_researched then
7457: LD_VAR 0 4
7461: PPUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 321
7471: PUSH
7472: LD_INT 2
7474: NONEQUAL
7475: IFFALSE 7489
// begin result := false ;
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 0
7484: ST_TO_ADDR
// exit ;
7485: POP
7486: POP
7487: GO 7493
// end ;
7489: GO 7454
7491: POP
7492: POP
// end ;
7493: LD_VAR 0 3
7497: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7513: LD_VAR 0 1
7517: NOT
7518: IFTRUE 7535
7520: PUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 257
7530: PUSH
7531: LD_INT 9
7533: NONEQUAL
7534: OR
7535: IFFALSE 7539
// exit ;
7537: GO 8118
// side := GetSide ( unit ) ;
7539: LD_ADDR_VAR 0 9
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 255
7553: ST_TO_ADDR
// tech_space := tech_spacanom ;
7554: LD_ADDR_VAR 0 12
7558: PUSH
7559: LD_INT 29
7561: ST_TO_ADDR
// tech_time := tech_taurad ;
7562: LD_ADDR_VAR 0 13
7566: PUSH
7567: LD_INT 28
7569: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7570: LD_ADDR_VAR 0 11
7574: PUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 310
7584: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7585: LD_VAR 0 11
7589: PPUSH
7590: CALL_OW 247
7594: PUSH
7595: LD_INT 2
7597: EQUAL
7598: IFFALSE 7602
// exit ;
7600: GO 8118
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7602: LD_ADDR_VAR 0 8
7606: PUSH
7607: LD_INT 81
7609: PUSH
7610: LD_VAR 0 9
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 69
7644: ST_TO_ADDR
// if not tmp then
7645: LD_VAR 0 8
7649: NOT
7650: IFFALSE 7654
// exit ;
7652: GO 8118
// if in_unit then
7654: LD_VAR 0 11
7658: IFFALSE 7682
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7660: LD_ADDR_VAR 0 10
7664: PUSH
7665: LD_VAR 0 8
7669: PPUSH
7670: LD_VAR 0 11
7674: PPUSH
7675: CALL_OW 74
7679: ST_TO_ADDR
7680: GO 7702
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7682: LD_ADDR_VAR 0 10
7686: PUSH
7687: LD_VAR 0 8
7691: PPUSH
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 74
7701: ST_TO_ADDR
// if not enemy then
7702: LD_VAR 0 10
7706: NOT
7707: IFFALSE 7711
// exit ;
7709: GO 8118
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7711: LD_VAR 0 11
7715: IFFALSE 7737
7717: PUSH
7718: LD_VAR 0 11
7722: PPUSH
7723: LD_VAR 0 10
7727: PPUSH
7728: CALL_OW 296
7732: PUSH
7733: LD_INT 13
7735: GREATER
7736: AND
7737: IFTRUE 7759
7739: PUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 10
7749: PPUSH
7750: CALL_OW 296
7754: PUSH
7755: LD_INT 12
7757: GREATER
7758: OR
7759: IFFALSE 7763
// exit ;
7761: GO 8118
// missile := [ 1 ] ;
7763: LD_ADDR_VAR 0 14
7767: PUSH
7768: LD_INT 1
7770: PUSH
7771: EMPTY
7772: LIST
7773: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7774: LD_VAR 0 9
7778: PPUSH
7779: LD_VAR 0 12
7783: PPUSH
7784: CALL_OW 325
7788: IFFALSE 7817
// missile := Replace ( missile , missile + 1 , 2 ) ;
7790: LD_ADDR_VAR 0 14
7794: PUSH
7795: LD_VAR 0 14
7799: PPUSH
7800: LD_VAR 0 14
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: PPUSH
7809: LD_INT 2
7811: PPUSH
7812: CALL_OW 1
7816: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7817: LD_VAR 0 9
7821: PPUSH
7822: LD_VAR 0 13
7826: PPUSH
7827: CALL_OW 325
7831: IFFALSE 7855
7833: PUSH
7834: LD_VAR 0 10
7838: PPUSH
7839: CALL_OW 255
7843: PPUSH
7844: LD_VAR 0 13
7848: PPUSH
7849: CALL_OW 325
7853: NOT
7854: AND
7855: IFFALSE 7884
// missile := Replace ( missile , missile + 1 , 3 ) ;
7857: LD_ADDR_VAR 0 14
7861: PUSH
7862: LD_VAR 0 14
7866: PPUSH
7867: LD_VAR 0 14
7871: PUSH
7872: LD_INT 1
7874: PLUS
7875: PPUSH
7876: LD_INT 3
7878: PPUSH
7879: CALL_OW 1
7883: ST_TO_ADDR
// if missile < 2 then
7884: LD_VAR 0 14
7888: PUSH
7889: LD_INT 2
7891: LESS
7892: IFFALSE 7896
// exit ;
7894: GO 8118
// x := GetX ( enemy ) ;
7896: LD_ADDR_VAR 0 4
7900: PUSH
7901: LD_VAR 0 10
7905: PPUSH
7906: CALL_OW 250
7910: ST_TO_ADDR
// y := GetY ( enemy ) ;
7911: LD_ADDR_VAR 0 5
7915: PUSH
7916: LD_VAR 0 10
7920: PPUSH
7921: CALL_OW 251
7925: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7926: LD_ADDR_VAR 0 6
7930: PUSH
7931: LD_VAR 0 4
7935: PUSH
7936: LD_INT 1
7938: NEG
7939: PPUSH
7940: LD_INT 1
7942: PPUSH
7943: CALL_OW 12
7947: PLUS
7948: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7949: LD_ADDR_VAR 0 7
7953: PUSH
7954: LD_VAR 0 5
7958: PUSH
7959: LD_INT 1
7961: NEG
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: CALL_OW 12
7970: PLUS
7971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7972: LD_VAR 0 6
7976: PPUSH
7977: LD_VAR 0 7
7981: PPUSH
7982: CALL_OW 488
7986: NOT
7987: IFFALSE 8009
// begin _x := x ;
7989: LD_ADDR_VAR 0 6
7993: PUSH
7994: LD_VAR 0 4
7998: ST_TO_ADDR
// _y := y ;
7999: LD_ADDR_VAR 0 7
8003: PUSH
8004: LD_VAR 0 5
8008: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_INT 1
8016: PPUSH
8017: LD_VAR 0 14
8021: PPUSH
8022: CALL_OW 12
8026: ST_TO_ADDR
// case i of 1 :
8027: LD_VAR 0 3
8031: PUSH
8032: LD_INT 1
8034: DOUBLE
8035: EQUAL
8036: IFTRUE 8040
8038: GO 8057
8040: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
8041: LD_VAR 0 1
8045: PPUSH
8046: LD_VAR 0 10
8050: PPUSH
8051: CALL_OW 115
8055: GO 8118
8057: LD_INT 2
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8087
8065: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
8066: LD_VAR 0 1
8070: PPUSH
8071: LD_VAR 0 6
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 153
8085: GO 8118
8087: LD_INT 3
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8117
8095: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
8096: LD_VAR 0 1
8100: PPUSH
8101: LD_VAR 0 6
8105: PPUSH
8106: LD_VAR 0 7
8110: PPUSH
8111: CALL_OW 154
8115: GO 8118
8117: POP
// end ;
8118: LD_VAR 0 2
8122: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
8123: LD_INT 0
8125: PPUSH
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
8130: PPUSH
// if not unit or not building then
8131: LD_VAR 0 1
8135: NOT
8136: IFTRUE 8145
8138: PUSH
8139: LD_VAR 0 2
8143: NOT
8144: OR
8145: IFFALSE 8149
// exit ;
8147: GO 8307
// x := GetX ( building ) ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 2
8158: PPUSH
8159: CALL_OW 250
8163: ST_TO_ADDR
// y := GetY ( building ) ;
8164: LD_ADDR_VAR 0 6
8168: PUSH
8169: LD_VAR 0 2
8173: PPUSH
8174: CALL_OW 251
8178: ST_TO_ADDR
// for i := 0 to 5 do
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: DOUBLE
8185: LD_INT 0
8187: DEC
8188: ST_TO_ADDR
8189: LD_INT 5
8191: PUSH
8192: FOR_TO
8193: IFFALSE 8305
// begin _x := ShiftX ( x , i , 3 ) ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 5
8204: PPUSH
8205: LD_VAR 0 4
8209: PPUSH
8210: LD_INT 3
8212: PPUSH
8213: CALL_OW 272
8217: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8218: LD_ADDR_VAR 0 8
8222: PUSH
8223: LD_VAR 0 6
8227: PPUSH
8228: LD_VAR 0 4
8232: PPUSH
8233: LD_INT 3
8235: PPUSH
8236: CALL_OW 273
8240: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8241: LD_VAR 0 7
8245: PPUSH
8246: LD_VAR 0 8
8250: PPUSH
8251: CALL_OW 488
8255: NOT
8256: IFFALSE 8260
// continue ;
8258: GO 8192
// if HexInfo ( _x , _y ) = 0 then
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 8
8269: PPUSH
8270: CALL_OW 428
8274: PUSH
8275: LD_INT 0
8277: EQUAL
8278: IFFALSE 8303
// begin ComMoveXY ( unit , _x , _y ) ;
8280: LD_VAR 0 1
8284: PPUSH
8285: LD_VAR 0 7
8289: PPUSH
8290: LD_VAR 0 8
8294: PPUSH
8295: CALL_OW 111
// exit ;
8299: POP
8300: POP
8301: GO 8307
// end ; end ;
8303: GO 8192
8305: POP
8306: POP
// end ;
8307: LD_VAR 0 3
8311: RET
// export function ScanBase ( side , base_area ) ; begin
8312: LD_INT 0
8314: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8315: LD_ADDR_VAR 0 3
8319: PUSH
8320: LD_VAR 0 2
8324: PPUSH
8325: LD_INT 81
8327: PUSH
8328: LD_VAR 0 1
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 70
8341: ST_TO_ADDR
// end ;
8342: LD_VAR 0 3
8346: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8347: LD_INT 0
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// result := false ;
8353: LD_ADDR_VAR 0 2
8357: PUSH
8358: LD_INT 0
8360: ST_TO_ADDR
// side := GetSide ( unit ) ;
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 255
8375: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8376: LD_ADDR_VAR 0 4
8380: PUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 248
8390: ST_TO_ADDR
// case nat of 1 :
8391: LD_VAR 0 4
8395: PUSH
8396: LD_INT 1
8398: DOUBLE
8399: EQUAL
8400: IFTRUE 8404
8402: GO 8415
8404: POP
// tech := tech_lassight ; 2 :
8405: LD_ADDR_VAR 0 5
8409: PUSH
8410: LD_INT 12
8412: ST_TO_ADDR
8413: GO 8454
8415: LD_INT 2
8417: DOUBLE
8418: EQUAL
8419: IFTRUE 8423
8421: GO 8434
8423: POP
// tech := tech_mortar ; 3 :
8424: LD_ADDR_VAR 0 5
8428: PUSH
8429: LD_INT 41
8431: ST_TO_ADDR
8432: GO 8454
8434: LD_INT 3
8436: DOUBLE
8437: EQUAL
8438: IFTRUE 8442
8440: GO 8453
8442: POP
// tech := tech_bazooka ; end ;
8443: LD_ADDR_VAR 0 5
8447: PUSH
8448: LD_INT 44
8450: ST_TO_ADDR
8451: GO 8454
8453: POP
// if Researched ( side , tech ) then
8454: LD_VAR 0 3
8458: PPUSH
8459: LD_VAR 0 5
8463: PPUSH
8464: CALL_OW 325
8468: IFFALSE 8495
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8470: LD_ADDR_VAR 0 2
8474: PUSH
8475: LD_INT 5
8477: PUSH
8478: LD_INT 8
8480: PUSH
8481: LD_INT 9
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: LD_VAR 0 4
8493: ARRAY
8494: ST_TO_ADDR
// end ;
8495: LD_VAR 0 2
8499: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8500: LD_INT 0
8502: PPUSH
8503: PPUSH
8504: PPUSH
// if not mines then
8505: LD_VAR 0 2
8509: NOT
8510: IFFALSE 8514
// exit ;
8512: GO 8658
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8514: LD_ADDR_VAR 0 5
8518: PUSH
8519: LD_INT 81
8521: PUSH
8522: LD_VAR 0 1
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 3
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: ST_TO_ADDR
// for i in mines do
8557: LD_ADDR_VAR 0 4
8561: PUSH
8562: LD_VAR 0 2
8566: PUSH
8567: FOR_IN
8568: IFFALSE 8656
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8570: LD_VAR 0 4
8574: PUSH
8575: LD_INT 1
8577: ARRAY
8578: PPUSH
8579: LD_VAR 0 4
8583: PUSH
8584: LD_INT 2
8586: ARRAY
8587: PPUSH
8588: CALL_OW 458
8592: NOT
8593: IFFALSE 8597
// continue ;
8595: GO 8567
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8597: LD_VAR 0 4
8601: PUSH
8602: LD_INT 1
8604: ARRAY
8605: PPUSH
8606: LD_VAR 0 4
8610: PUSH
8611: LD_INT 2
8613: ARRAY
8614: PPUSH
8615: CALL_OW 428
8619: PUSH
8620: LD_VAR 0 5
8624: IN
8625: IFFALSE 8654
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8627: LD_VAR 0 4
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: PPUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 2
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: CALL_OW 456
// end ;
8654: GO 8567
8656: POP
8657: POP
// end ;
8658: LD_VAR 0 3
8662: RET
// export function Count ( array ) ; begin
8663: LD_INT 0
8665: PPUSH
// result := array + 0 ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 0
8678: PLUS
8679: ST_TO_ADDR
// end ;
8680: LD_VAR 0 2
8684: RET
// export function IsEmpty ( building ) ; begin
8685: LD_INT 0
8687: PPUSH
// if not building then
8688: LD_VAR 0 1
8692: NOT
8693: IFFALSE 8697
// exit ;
8695: GO 8740
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8697: LD_ADDR_VAR 0 2
8701: PUSH
8702: LD_VAR 0 1
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_VAR 0 1
8714: PPUSH
8715: CALL_OW 255
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 58
8726: PUSH
8727: EMPTY
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: IN
8739: ST_TO_ADDR
// end ;
8740: LD_VAR 0 2
8744: RET
// export function IsNotFull ( building ) ; var places ; begin
8745: LD_INT 0
8747: PPUSH
8748: PPUSH
// if not building then
8749: LD_VAR 0 1
8753: NOT
8754: IFFALSE 8758
// exit ;
8756: GO 8786
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 1
8767: PPUSH
8768: LD_INT 3
8770: PUSH
8771: LD_INT 62
8773: PUSH
8774: EMPTY
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: CALL_OW 72
8785: ST_TO_ADDR
// end ;
8786: LD_VAR 0 2
8790: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8791: LD_INT 0
8793: PPUSH
8794: PPUSH
8795: PPUSH
8796: PPUSH
// tmp := [ ] ;
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: EMPTY
8803: ST_TO_ADDR
// list := [ ] ;
8804: LD_ADDR_VAR 0 5
8808: PUSH
8809: EMPTY
8810: ST_TO_ADDR
// for i = 16 to 25 do
8811: LD_ADDR_VAR 0 4
8815: PUSH
8816: DOUBLE
8817: LD_INT 16
8819: DEC
8820: ST_TO_ADDR
8821: LD_INT 25
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8898
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 22
8839: PUSH
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 255
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 91
8856: PUSH
8857: LD_VAR 0 1
8861: PUSH
8862: LD_INT 6
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_VAR 0 4
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: ST_TO_ADDR
8896: GO 8824
8898: POP
8899: POP
// for i = 1 to tmp do
8900: LD_ADDR_VAR 0 4
8904: PUSH
8905: DOUBLE
8906: LD_INT 1
8908: DEC
8909: ST_TO_ADDR
8910: LD_VAR 0 3
8914: PUSH
8915: FOR_TO
8916: IFFALSE 9004
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8918: LD_ADDR_VAR 0 5
8922: PUSH
8923: LD_VAR 0 5
8927: PUSH
8928: LD_VAR 0 3
8932: PUSH
8933: LD_VAR 0 4
8937: ARRAY
8938: PPUSH
8939: CALL_OW 266
8943: PUSH
8944: LD_VAR 0 3
8948: PUSH
8949: LD_VAR 0 4
8953: ARRAY
8954: PPUSH
8955: CALL_OW 250
8959: PUSH
8960: LD_VAR 0 3
8964: PUSH
8965: LD_VAR 0 4
8969: ARRAY
8970: PPUSH
8971: CALL_OW 251
8975: PUSH
8976: LD_VAR 0 3
8980: PUSH
8981: LD_VAR 0 4
8985: ARRAY
8986: PPUSH
8987: CALL_OW 254
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: ADD
9001: ST_TO_ADDR
9002: GO 8915
9004: POP
9005: POP
// result := list ;
9006: LD_ADDR_VAR 0 2
9010: PUSH
9011: LD_VAR 0 5
9015: ST_TO_ADDR
// end ;
9016: LD_VAR 0 2
9020: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
9029: PPUSH
// if not factory then
9030: LD_VAR 0 1
9034: NOT
9035: IFFALSE 9039
// exit ;
9037: GO 9642
// if control = control_apeman then
9039: LD_VAR 0 4
9043: PUSH
9044: LD_INT 5
9046: EQUAL
9047: IFFALSE 9156
// begin tmp := UnitsInside ( factory ) ;
9049: LD_ADDR_VAR 0 8
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 313
9063: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9064: LD_VAR 0 8
9068: PPUSH
9069: LD_INT 25
9071: PUSH
9072: LD_INT 12
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PPUSH
9079: CALL_OW 72
9083: NOT
9084: IFFALSE 9094
// control := control_manual ;
9086: LD_ADDR_VAR 0 4
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9094: LD_ADDR_VAR 0 8
9098: PUSH
9099: LD_VAR 0 1
9103: PPUSH
9104: CALL 8791 0 1
9108: ST_TO_ADDR
// if tmp then
9109: LD_VAR 0 8
9113: IFFALSE 9156
// begin for i in tmp do
9115: LD_ADDR_VAR 0 7
9119: PUSH
9120: LD_VAR 0 8
9124: PUSH
9125: FOR_IN
9126: IFFALSE 9154
// if i [ 1 ] = b_ext_radio then
9128: LD_VAR 0 7
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PUSH
9137: LD_INT 22
9139: EQUAL
9140: IFFALSE 9152
// begin control := control_remote ;
9142: LD_ADDR_VAR 0 4
9146: PUSH
9147: LD_INT 2
9149: ST_TO_ADDR
// break ;
9150: GO 9154
// end ;
9152: GO 9125
9154: POP
9155: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9156: LD_VAR 0 1
9160: PPUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_VAR 0 4
9175: PPUSH
9176: LD_VAR 0 5
9180: PPUSH
9181: CALL_OW 448
9185: IFFALSE 9220
// begin result := [ chassis , engine , control , weapon ] ;
9187: LD_ADDR_VAR 0 6
9191: PUSH
9192: LD_VAR 0 2
9196: PUSH
9197: LD_VAR 0 3
9201: PUSH
9202: LD_VAR 0 4
9206: PUSH
9207: LD_VAR 0 5
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// exit ;
9218: GO 9642
// end ; _chassis := AvailableChassisList ( factory ) ;
9220: LD_ADDR_VAR 0 9
9224: PUSH
9225: LD_VAR 0 1
9229: PPUSH
9230: CALL_OW 475
9234: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9235: LD_ADDR_VAR 0 11
9239: PUSH
9240: LD_VAR 0 1
9244: PPUSH
9245: CALL_OW 476
9249: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9250: LD_ADDR_VAR 0 12
9254: PUSH
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 477
9264: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9265: LD_ADDR_VAR 0 10
9269: PUSH
9270: LD_VAR 0 1
9274: PPUSH
9275: CALL_OW 478
9279: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9280: LD_VAR 0 9
9284: NOT
9285: IFTRUE 9294
9287: PUSH
9288: LD_VAR 0 11
9292: NOT
9293: OR
9294: IFTRUE 9303
9296: PUSH
9297: LD_VAR 0 12
9301: NOT
9302: OR
9303: IFTRUE 9312
9305: PUSH
9306: LD_VAR 0 10
9310: NOT
9311: OR
9312: IFFALSE 9347
// begin result := [ chassis , engine , control , weapon ] ;
9314: LD_ADDR_VAR 0 6
9318: PUSH
9319: LD_VAR 0 2
9323: PUSH
9324: LD_VAR 0 3
9328: PUSH
9329: LD_VAR 0 4
9333: PUSH
9334: LD_VAR 0 5
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: ST_TO_ADDR
// exit ;
9345: GO 9642
// end ; if not chassis in _chassis then
9347: LD_VAR 0 2
9351: PUSH
9352: LD_VAR 0 9
9356: IN
9357: NOT
9358: IFFALSE 9384
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9360: LD_ADDR_VAR 0 2
9364: PUSH
9365: LD_VAR 0 9
9369: PUSH
9370: LD_INT 1
9372: PPUSH
9373: LD_VAR 0 9
9377: PPUSH
9378: CALL_OW 12
9382: ARRAY
9383: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9384: LD_VAR 0 2
9388: PPUSH
9389: LD_VAR 0 3
9393: PPUSH
9394: CALL 9647 0 2
9398: NOT
9399: IFFALSE 9460
// repeat engine := _engine [ 1 ] ;
9401: LD_ADDR_VAR 0 3
9405: PUSH
9406: LD_VAR 0 11
9410: PUSH
9411: LD_INT 1
9413: ARRAY
9414: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9415: LD_ADDR_VAR 0 11
9419: PUSH
9420: LD_VAR 0 11
9424: PPUSH
9425: LD_INT 1
9427: PPUSH
9428: CALL_OW 3
9432: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9433: LD_VAR 0 2
9437: PPUSH
9438: LD_VAR 0 3
9442: PPUSH
9443: CALL 9647 0 2
9447: IFTRUE 9458
9449: PUSH
9450: LD_VAR 0 11
9454: PUSH
9455: EMPTY
9456: EQUAL
9457: OR
9458: IFFALSE 9401
// if not control in _control then
9460: LD_VAR 0 4
9464: PUSH
9465: LD_VAR 0 12
9469: IN
9470: NOT
9471: IFFALSE 9497
// control := _control [ rand ( 1 , _control ) ] ;
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_VAR 0 12
9482: PUSH
9483: LD_INT 1
9485: PPUSH
9486: LD_VAR 0 12
9490: PPUSH
9491: CALL_OW 12
9495: ARRAY
9496: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9497: LD_VAR 0 2
9501: PPUSH
9502: LD_VAR 0 5
9506: PPUSH
9507: CALL 9869 0 2
9511: NOT
9512: IFFALSE 9573
// repeat weapon := _weapon [ 1 ] ;
9514: LD_ADDR_VAR 0 5
9518: PUSH
9519: LD_VAR 0 10
9523: PUSH
9524: LD_INT 1
9526: ARRAY
9527: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9528: LD_ADDR_VAR 0 10
9532: PUSH
9533: LD_VAR 0 10
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 3
9545: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9546: LD_VAR 0 2
9550: PPUSH
9551: LD_VAR 0 5
9555: PPUSH
9556: CALL 9869 0 2
9560: IFTRUE 9571
9562: PUSH
9563: LD_VAR 0 10
9567: PUSH
9568: EMPTY
9569: EQUAL
9570: OR
9571: IFFALSE 9514
// result := [ ] ;
9573: LD_ADDR_VAR 0 6
9577: PUSH
9578: EMPTY
9579: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_VAR 0 4
9599: PPUSH
9600: LD_VAR 0 5
9604: PPUSH
9605: CALL_OW 448
9609: IFFALSE 9642
// result := [ chassis , engine , control , weapon ] ;
9611: LD_ADDR_VAR 0 6
9615: PUSH
9616: LD_VAR 0 2
9620: PUSH
9621: LD_VAR 0 3
9625: PUSH
9626: LD_VAR 0 4
9630: PUSH
9631: LD_VAR 0 5
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// end ;
9642: LD_VAR 0 6
9646: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9647: LD_INT 0
9649: PPUSH
// if not chassis or not engine then
9650: LD_VAR 0 1
9654: NOT
9655: IFTRUE 9664
9657: PUSH
9658: LD_VAR 0 2
9662: NOT
9663: OR
9664: IFFALSE 9668
// exit ;
9666: GO 9864
// case engine of engine_solar :
9668: LD_VAR 0 2
9672: PUSH
9673: LD_INT 2
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9719
9681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9682: LD_ADDR_VAR 0 3
9686: PUSH
9687: LD_INT 11
9689: PUSH
9690: LD_INT 12
9692: PUSH
9693: LD_INT 13
9695: PUSH
9696: LD_INT 14
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: LD_INT 2
9704: PUSH
9705: LD_INT 3
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: ST_TO_ADDR
9717: GO 9848
9719: LD_INT 1
9721: DOUBLE
9722: EQUAL
9723: IFTRUE 9727
9725: GO 9789
9727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9728: LD_ADDR_VAR 0 3
9732: PUSH
9733: LD_INT 11
9735: PUSH
9736: LD_INT 12
9738: PUSH
9739: LD_INT 13
9741: PUSH
9742: LD_INT 14
9744: PUSH
9745: LD_INT 1
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: LD_INT 4
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: LD_INT 21
9762: PUSH
9763: LD_INT 23
9765: PUSH
9766: LD_INT 22
9768: PUSH
9769: LD_INT 24
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: ST_TO_ADDR
9787: GO 9848
9789: LD_INT 3
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9847
9797: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9798: LD_ADDR_VAR 0 3
9802: PUSH
9803: LD_INT 13
9805: PUSH
9806: LD_INT 14
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: ST_TO_ADDR
9845: GO 9848
9847: POP
// result := ( chassis in result ) ;
9848: LD_ADDR_VAR 0 3
9852: PUSH
9853: LD_VAR 0 1
9857: PUSH
9858: LD_VAR 0 3
9862: IN
9863: ST_TO_ADDR
// end ;
9864: LD_VAR 0 3
9868: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9869: LD_INT 0
9871: PPUSH
// if not chassis or not weapon then
9872: LD_VAR 0 1
9876: NOT
9877: IFTRUE 9886
9879: PUSH
9880: LD_VAR 0 2
9884: NOT
9885: OR
9886: IFFALSE 9890
// exit ;
9888: GO 10950
// case weapon of us_machine_gun :
9890: LD_VAR 0 2
9894: PUSH
9895: LD_INT 2
9897: DOUBLE
9898: EQUAL
9899: IFTRUE 9903
9901: GO 9933
9903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9904: LD_ADDR_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: LD_INT 3
9917: PUSH
9918: LD_INT 4
9920: PUSH
9921: LD_INT 5
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: ST_TO_ADDR
9931: GO 10934
9933: LD_INT 3
9935: DOUBLE
9936: EQUAL
9937: IFTRUE 9941
9939: GO 9971
9941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_INT 1
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: LD_INT 4
9958: PUSH
9959: LD_INT 5
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: ST_TO_ADDR
9969: GO 10934
9971: LD_INT 11
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 10009
9979: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9980: LD_ADDR_VAR 0 3
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: LD_INT 4
9996: PUSH
9997: LD_INT 5
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: ST_TO_ADDR
10007: GO 10934
10009: LD_INT 4
10011: DOUBLE
10012: EQUAL
10013: IFTRUE 10017
10015: GO 10043
10017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_INT 2
10025: PUSH
10026: LD_INT 3
10028: PUSH
10029: LD_INT 4
10031: PUSH
10032: LD_INT 5
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
10041: GO 10934
10043: LD_INT 5
10045: DOUBLE
10046: EQUAL
10047: IFTRUE 10051
10049: GO 10077
10051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
10052: LD_ADDR_VAR 0 3
10056: PUSH
10057: LD_INT 2
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 4
10065: PUSH
10066: LD_INT 5
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: ST_TO_ADDR
10075: GO 10934
10077: LD_INT 9
10079: DOUBLE
10080: EQUAL
10081: IFTRUE 10085
10083: GO 10111
10085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10086: LD_ADDR_VAR 0 3
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 3
10096: PUSH
10097: LD_INT 4
10099: PUSH
10100: LD_INT 5
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: ST_TO_ADDR
10109: GO 10934
10111: LD_INT 7
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10145
10119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10120: LD_ADDR_VAR 0 3
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: LD_INT 3
10130: PUSH
10131: LD_INT 4
10133: PUSH
10134: LD_INT 5
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: ST_TO_ADDR
10143: GO 10934
10145: LD_INT 12
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10179
10153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: LD_INT 3
10164: PUSH
10165: LD_INT 4
10167: PUSH
10168: LD_INT 5
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: ST_TO_ADDR
10177: GO 10934
10179: LD_INT 13
10181: DOUBLE
10182: EQUAL
10183: IFTRUE 10187
10185: GO 10213
10187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10188: LD_ADDR_VAR 0 3
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: LD_INT 4
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: ST_TO_ADDR
10211: GO 10934
10213: LD_INT 14
10215: DOUBLE
10216: EQUAL
10217: IFTRUE 10221
10219: GO 10239
10221: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10222: LD_ADDR_VAR 0 3
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 5
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: ST_TO_ADDR
10237: GO 10934
10239: LD_INT 6
10241: DOUBLE
10242: EQUAL
10243: IFTRUE 10247
10245: GO 10265
10247: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10248: LD_ADDR_VAR 0 3
10252: PUSH
10253: LD_INT 4
10255: PUSH
10256: LD_INT 5
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: ST_TO_ADDR
10263: GO 10934
10265: LD_INT 10
10267: DOUBLE
10268: EQUAL
10269: IFTRUE 10273
10271: GO 10291
10273: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10274: LD_ADDR_VAR 0 3
10278: PUSH
10279: LD_INT 4
10281: PUSH
10282: LD_INT 5
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: ST_TO_ADDR
10289: GO 10934
10291: LD_INT 22
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10325
10299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10300: LD_ADDR_VAR 0 3
10304: PUSH
10305: LD_INT 11
10307: PUSH
10308: LD_INT 12
10310: PUSH
10311: LD_INT 13
10313: PUSH
10314: LD_INT 14
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: ST_TO_ADDR
10323: GO 10934
10325: LD_INT 23
10327: DOUBLE
10328: EQUAL
10329: IFTRUE 10333
10331: GO 10359
10333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: LD_INT 11
10341: PUSH
10342: LD_INT 12
10344: PUSH
10345: LD_INT 13
10347: PUSH
10348: LD_INT 14
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: ST_TO_ADDR
10357: GO 10934
10359: LD_INT 24
10361: DOUBLE
10362: EQUAL
10363: IFTRUE 10367
10365: GO 10393
10367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: LD_INT 11
10375: PUSH
10376: LD_INT 12
10378: PUSH
10379: LD_INT 13
10381: PUSH
10382: LD_INT 14
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: ST_TO_ADDR
10391: GO 10934
10393: LD_INT 30
10395: DOUBLE
10396: EQUAL
10397: IFTRUE 10401
10399: GO 10427
10401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10402: LD_ADDR_VAR 0 3
10406: PUSH
10407: LD_INT 11
10409: PUSH
10410: LD_INT 12
10412: PUSH
10413: LD_INT 13
10415: PUSH
10416: LD_INT 14
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
10425: GO 10934
10427: LD_INT 25
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10453
10435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10436: LD_ADDR_VAR 0 3
10440: PUSH
10441: LD_INT 13
10443: PUSH
10444: LD_INT 14
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: ST_TO_ADDR
10451: GO 10934
10453: LD_INT 27
10455: DOUBLE
10456: EQUAL
10457: IFTRUE 10461
10459: GO 10479
10461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10462: LD_ADDR_VAR 0 3
10466: PUSH
10467: LD_INT 13
10469: PUSH
10470: LD_INT 14
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: ST_TO_ADDR
10477: GO 10934
10479: LD_INT 92
10481: DOUBLE
10482: EQUAL
10483: IFTRUE 10487
10485: GO 10513
10487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10488: LD_ADDR_VAR 0 3
10492: PUSH
10493: LD_INT 11
10495: PUSH
10496: LD_INT 12
10498: PUSH
10499: LD_INT 13
10501: PUSH
10502: LD_INT 14
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: ST_TO_ADDR
10511: GO 10934
10513: LD_INT 28
10515: DOUBLE
10516: EQUAL
10517: IFTRUE 10521
10519: GO 10539
10521: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10522: LD_ADDR_VAR 0 3
10526: PUSH
10527: LD_INT 13
10529: PUSH
10530: LD_INT 14
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: ST_TO_ADDR
10537: GO 10934
10539: LD_INT 29
10541: DOUBLE
10542: EQUAL
10543: IFTRUE 10547
10545: GO 10565
10547: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10548: LD_ADDR_VAR 0 3
10552: PUSH
10553: LD_INT 13
10555: PUSH
10556: LD_INT 14
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: ST_TO_ADDR
10563: GO 10934
10565: LD_INT 31
10567: DOUBLE
10568: EQUAL
10569: IFTRUE 10573
10571: GO 10591
10573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10574: LD_ADDR_VAR 0 3
10578: PUSH
10579: LD_INT 13
10581: PUSH
10582: LD_INT 14
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: ST_TO_ADDR
10589: GO 10934
10591: LD_INT 26
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10617
10599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: LD_INT 13
10607: PUSH
10608: LD_INT 14
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: ST_TO_ADDR
10615: GO 10934
10617: LD_INT 42
10619: DOUBLE
10620: EQUAL
10621: IFTRUE 10625
10623: GO 10651
10625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10626: LD_ADDR_VAR 0 3
10630: PUSH
10631: LD_INT 21
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 23
10639: PUSH
10640: LD_INT 24
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: ST_TO_ADDR
10649: GO 10934
10651: LD_INT 43
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10685
10659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10660: LD_ADDR_VAR 0 3
10664: PUSH
10665: LD_INT 21
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 23
10673: PUSH
10674: LD_INT 24
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: ST_TO_ADDR
10683: GO 10934
10685: LD_INT 44
10687: DOUBLE
10688: EQUAL
10689: IFTRUE 10693
10691: GO 10719
10693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10694: LD_ADDR_VAR 0 3
10698: PUSH
10699: LD_INT 21
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_INT 23
10707: PUSH
10708: LD_INT 24
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: ST_TO_ADDR
10717: GO 10934
10719: LD_INT 45
10721: DOUBLE
10722: EQUAL
10723: IFTRUE 10727
10725: GO 10753
10727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10728: LD_ADDR_VAR 0 3
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 22
10738: PUSH
10739: LD_INT 23
10741: PUSH
10742: LD_INT 24
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: ST_TO_ADDR
10751: GO 10934
10753: LD_INT 49
10755: DOUBLE
10756: EQUAL
10757: IFTRUE 10761
10759: GO 10787
10761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10762: LD_ADDR_VAR 0 3
10766: PUSH
10767: LD_INT 21
10769: PUSH
10770: LD_INT 22
10772: PUSH
10773: LD_INT 23
10775: PUSH
10776: LD_INT 24
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: ST_TO_ADDR
10785: GO 10934
10787: LD_INT 51
10789: DOUBLE
10790: EQUAL
10791: IFTRUE 10795
10793: GO 10821
10795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_INT 21
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 24
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
10819: GO 10934
10821: LD_INT 52
10823: DOUBLE
10824: EQUAL
10825: IFTRUE 10829
10827: GO 10855
10829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10830: LD_ADDR_VAR 0 3
10834: PUSH
10835: LD_INT 21
10837: PUSH
10838: LD_INT 22
10840: PUSH
10841: LD_INT 23
10843: PUSH
10844: LD_INT 24
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: ST_TO_ADDR
10853: GO 10934
10855: LD_INT 53
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 10881
10863: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10864: LD_ADDR_VAR 0 3
10868: PUSH
10869: LD_INT 23
10871: PUSH
10872: LD_INT 24
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: ST_TO_ADDR
10879: GO 10934
10881: LD_INT 46
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10907
10889: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10890: LD_ADDR_VAR 0 3
10894: PUSH
10895: LD_INT 23
10897: PUSH
10898: LD_INT 24
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: ST_TO_ADDR
10905: GO 10934
10907: LD_INT 47
10909: DOUBLE
10910: EQUAL
10911: IFTRUE 10915
10913: GO 10933
10915: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10916: LD_ADDR_VAR 0 3
10920: PUSH
10921: LD_INT 23
10923: PUSH
10924: LD_INT 24
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: ST_TO_ADDR
10931: GO 10934
10933: POP
// result := ( chassis in result ) ;
10934: LD_ADDR_VAR 0 3
10938: PUSH
10939: LD_VAR 0 1
10943: PUSH
10944: LD_VAR 0 3
10948: IN
10949: ST_TO_ADDR
// end ;
10950: LD_VAR 0 3
10954: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10955: LD_INT 0
10957: PPUSH
10958: PPUSH
10959: PPUSH
10960: PPUSH
10961: PPUSH
10962: PPUSH
10963: PPUSH
// result := array ;
10964: LD_ADDR_VAR 0 5
10968: PUSH
10969: LD_VAR 0 1
10973: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10974: LD_VAR 0 1
10978: NOT
10979: IFTRUE 10988
10981: PUSH
10982: LD_VAR 0 2
10986: NOT
10987: OR
10988: IFTRUE 10997
10990: PUSH
10991: LD_VAR 0 3
10995: NOT
10996: OR
10997: IFTRUE 11011
10999: PUSH
11000: LD_VAR 0 2
11004: PUSH
11005: LD_VAR 0 1
11009: GREATER
11010: OR
11011: IFTRUE 11025
11013: PUSH
11014: LD_VAR 0 3
11018: PUSH
11019: LD_VAR 0 1
11023: GREATER
11024: OR
11025: IFFALSE 11029
// exit ;
11027: GO 11325
// if direction then
11029: LD_VAR 0 4
11033: IFFALSE 11097
// begin d := 1 ;
11035: LD_ADDR_VAR 0 9
11039: PUSH
11040: LD_INT 1
11042: ST_TO_ADDR
// if i_from > i_to then
11043: LD_VAR 0 2
11047: PUSH
11048: LD_VAR 0 3
11052: GREATER
11053: IFFALSE 11079
// length := ( array - i_from ) + i_to else
11055: LD_ADDR_VAR 0 11
11059: PUSH
11060: LD_VAR 0 1
11064: PUSH
11065: LD_VAR 0 2
11069: MINUS
11070: PUSH
11071: LD_VAR 0 3
11075: PLUS
11076: ST_TO_ADDR
11077: GO 11095
// length := i_to - i_from ;
11079: LD_ADDR_VAR 0 11
11083: PUSH
11084: LD_VAR 0 3
11088: PUSH
11089: LD_VAR 0 2
11093: MINUS
11094: ST_TO_ADDR
// end else
11095: GO 11158
// begin d := - 1 ;
11097: LD_ADDR_VAR 0 9
11101: PUSH
11102: LD_INT 1
11104: NEG
11105: ST_TO_ADDR
// if i_from > i_to then
11106: LD_VAR 0 2
11110: PUSH
11111: LD_VAR 0 3
11115: GREATER
11116: IFFALSE 11136
// length := i_from - i_to else
11118: LD_ADDR_VAR 0 11
11122: PUSH
11123: LD_VAR 0 2
11127: PUSH
11128: LD_VAR 0 3
11132: MINUS
11133: ST_TO_ADDR
11134: GO 11158
// length := ( array - i_to ) + i_from ;
11136: LD_ADDR_VAR 0 11
11140: PUSH
11141: LD_VAR 0 1
11145: PUSH
11146: LD_VAR 0 3
11150: MINUS
11151: PUSH
11152: LD_VAR 0 2
11156: PLUS
11157: ST_TO_ADDR
// end ; if not length then
11158: LD_VAR 0 11
11162: NOT
11163: IFFALSE 11167
// exit ;
11165: GO 11325
// tmp := array ;
11167: LD_ADDR_VAR 0 10
11171: PUSH
11172: LD_VAR 0 1
11176: ST_TO_ADDR
// for i = 1 to length do
11177: LD_ADDR_VAR 0 6
11181: PUSH
11182: DOUBLE
11183: LD_INT 1
11185: DEC
11186: ST_TO_ADDR
11187: LD_VAR 0 11
11191: PUSH
11192: FOR_TO
11193: IFFALSE 11313
// begin for j = 1 to array do
11195: LD_ADDR_VAR 0 7
11199: PUSH
11200: DOUBLE
11201: LD_INT 1
11203: DEC
11204: ST_TO_ADDR
11205: LD_VAR 0 1
11209: PUSH
11210: FOR_TO
11211: IFFALSE 11299
// begin k := j + d ;
11213: LD_ADDR_VAR 0 8
11217: PUSH
11218: LD_VAR 0 7
11222: PUSH
11223: LD_VAR 0 9
11227: PLUS
11228: ST_TO_ADDR
// if k > array then
11229: LD_VAR 0 8
11233: PUSH
11234: LD_VAR 0 1
11238: GREATER
11239: IFFALSE 11249
// k := 1 ;
11241: LD_ADDR_VAR 0 8
11245: PUSH
11246: LD_INT 1
11248: ST_TO_ADDR
// if not k then
11249: LD_VAR 0 8
11253: NOT
11254: IFFALSE 11266
// k := array ;
11256: LD_ADDR_VAR 0 8
11260: PUSH
11261: LD_VAR 0 1
11265: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11266: LD_ADDR_VAR 0 10
11270: PUSH
11271: LD_VAR 0 10
11275: PPUSH
11276: LD_VAR 0 8
11280: PPUSH
11281: LD_VAR 0 1
11285: PUSH
11286: LD_VAR 0 7
11290: ARRAY
11291: PPUSH
11292: CALL_OW 1
11296: ST_TO_ADDR
// end ;
11297: GO 11210
11299: POP
11300: POP
// array := tmp ;
11301: LD_ADDR_VAR 0 1
11305: PUSH
11306: LD_VAR 0 10
11310: ST_TO_ADDR
// end ;
11311: GO 11192
11313: POP
11314: POP
// result := array ;
11315: LD_ADDR_VAR 0 5
11319: PUSH
11320: LD_VAR 0 1
11324: ST_TO_ADDR
// end ;
11325: LD_VAR 0 5
11329: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11330: LD_INT 0
11332: PPUSH
11333: PPUSH
// result := 0 ;
11334: LD_ADDR_VAR 0 3
11338: PUSH
11339: LD_INT 0
11341: ST_TO_ADDR
// if not array or not value in array then
11342: LD_VAR 0 1
11346: NOT
11347: IFTRUE 11362
11349: PUSH
11350: LD_VAR 0 2
11354: PUSH
11355: LD_VAR 0 1
11359: IN
11360: NOT
11361: OR
11362: IFFALSE 11366
// exit ;
11364: GO 11420
// for i = 1 to array do
11366: LD_ADDR_VAR 0 4
11370: PUSH
11371: DOUBLE
11372: LD_INT 1
11374: DEC
11375: ST_TO_ADDR
11376: LD_VAR 0 1
11380: PUSH
11381: FOR_TO
11382: IFFALSE 11418
// if value = array [ i ] then
11384: LD_VAR 0 2
11388: PUSH
11389: LD_VAR 0 1
11393: PUSH
11394: LD_VAR 0 4
11398: ARRAY
11399: EQUAL
11400: IFFALSE 11416
// begin result := i ;
11402: LD_ADDR_VAR 0 3
11406: PUSH
11407: LD_VAR 0 4
11411: ST_TO_ADDR
// exit ;
11412: POP
11413: POP
11414: GO 11420
// end ;
11416: GO 11381
11418: POP
11419: POP
// end ;
11420: LD_VAR 0 3
11424: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11425: LD_INT 0
11427: PPUSH
// vc_chassis := chassis ;
11428: LD_ADDR_OWVAR 37
11432: PUSH
11433: LD_VAR 0 1
11437: ST_TO_ADDR
// vc_engine := engine ;
11438: LD_ADDR_OWVAR 39
11442: PUSH
11443: LD_VAR 0 2
11447: ST_TO_ADDR
// vc_control := control ;
11448: LD_ADDR_OWVAR 38
11452: PUSH
11453: LD_VAR 0 3
11457: ST_TO_ADDR
// vc_weapon := weapon ;
11458: LD_ADDR_OWVAR 40
11462: PUSH
11463: LD_VAR 0 4
11467: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11468: LD_ADDR_OWVAR 41
11472: PUSH
11473: LD_VAR 0 5
11477: ST_TO_ADDR
// end ;
11478: LD_VAR 0 6
11482: RET
// export function WantPlant ( unit ) ; var task ; begin
11483: LD_INT 0
11485: PPUSH
11486: PPUSH
// result := false ;
11487: LD_ADDR_VAR 0 2
11491: PUSH
11492: LD_INT 0
11494: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11495: LD_ADDR_VAR 0 3
11499: PUSH
11500: LD_VAR 0 1
11504: PPUSH
11505: CALL_OW 437
11509: ST_TO_ADDR
// if task then
11510: LD_VAR 0 3
11514: IFFALSE 11542
// if task [ 1 ] [ 1 ] = p then
11516: LD_VAR 0 3
11520: PUSH
11521: LD_INT 1
11523: ARRAY
11524: PUSH
11525: LD_INT 1
11527: ARRAY
11528: PUSH
11529: LD_STRING p
11531: EQUAL
11532: IFFALSE 11542
// result := true ;
11534: LD_ADDR_VAR 0 2
11538: PUSH
11539: LD_INT 1
11541: ST_TO_ADDR
// end ;
11542: LD_VAR 0 2
11546: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11547: LD_INT 0
11549: PPUSH
11550: PPUSH
11551: PPUSH
11552: PPUSH
// if pos < 1 then
11553: LD_VAR 0 2
11557: PUSH
11558: LD_INT 1
11560: LESS
11561: IFFALSE 11565
// exit ;
11563: GO 11868
// if pos = 1 then
11565: LD_VAR 0 2
11569: PUSH
11570: LD_INT 1
11572: EQUAL
11573: IFFALSE 11606
// result := Replace ( arr , pos [ 1 ] , value ) else
11575: LD_ADDR_VAR 0 4
11579: PUSH
11580: LD_VAR 0 1
11584: PPUSH
11585: LD_VAR 0 2
11589: PUSH
11590: LD_INT 1
11592: ARRAY
11593: PPUSH
11594: LD_VAR 0 3
11598: PPUSH
11599: CALL_OW 1
11603: ST_TO_ADDR
11604: GO 11868
// begin tmp := arr ;
11606: LD_ADDR_VAR 0 6
11610: PUSH
11611: LD_VAR 0 1
11615: ST_TO_ADDR
// s_arr := [ tmp ] ;
11616: LD_ADDR_VAR 0 7
11620: PUSH
11621: LD_VAR 0 6
11625: PUSH
11626: EMPTY
11627: LIST
11628: ST_TO_ADDR
// for i = 1 to pos - 1 do
11629: LD_ADDR_VAR 0 5
11633: PUSH
11634: DOUBLE
11635: LD_INT 1
11637: DEC
11638: ST_TO_ADDR
11639: LD_VAR 0 2
11643: PUSH
11644: LD_INT 1
11646: MINUS
11647: PUSH
11648: FOR_TO
11649: IFFALSE 11694
// begin tmp := tmp [ pos [ i ] ] ;
11651: LD_ADDR_VAR 0 6
11655: PUSH
11656: LD_VAR 0 6
11660: PUSH
11661: LD_VAR 0 2
11665: PUSH
11666: LD_VAR 0 5
11670: ARRAY
11671: ARRAY
11672: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11673: LD_ADDR_VAR 0 7
11677: PUSH
11678: LD_VAR 0 7
11682: PUSH
11683: LD_VAR 0 6
11687: PUSH
11688: EMPTY
11689: LIST
11690: ADD
11691: ST_TO_ADDR
// end ;
11692: GO 11648
11694: POP
11695: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11696: LD_ADDR_VAR 0 6
11700: PUSH
11701: LD_VAR 0 6
11705: PPUSH
11706: LD_VAR 0 2
11710: PUSH
11711: LD_VAR 0 2
11715: ARRAY
11716: PPUSH
11717: LD_VAR 0 3
11721: PPUSH
11722: CALL_OW 1
11726: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11727: LD_ADDR_VAR 0 7
11731: PUSH
11732: LD_VAR 0 7
11736: PPUSH
11737: LD_VAR 0 7
11741: PPUSH
11742: LD_VAR 0 6
11746: PPUSH
11747: CALL_OW 1
11751: ST_TO_ADDR
// for i = s_arr downto 2 do
11752: LD_ADDR_VAR 0 5
11756: PUSH
11757: DOUBLE
11758: LD_VAR 0 7
11762: INC
11763: ST_TO_ADDR
11764: LD_INT 2
11766: PUSH
11767: FOR_DOWNTO
11768: IFFALSE 11852
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11770: LD_ADDR_VAR 0 6
11774: PUSH
11775: LD_VAR 0 7
11779: PUSH
11780: LD_VAR 0 5
11784: PUSH
11785: LD_INT 1
11787: MINUS
11788: ARRAY
11789: PPUSH
11790: LD_VAR 0 2
11794: PUSH
11795: LD_VAR 0 5
11799: PUSH
11800: LD_INT 1
11802: MINUS
11803: ARRAY
11804: PPUSH
11805: LD_VAR 0 7
11809: PUSH
11810: LD_VAR 0 5
11814: ARRAY
11815: PPUSH
11816: CALL_OW 1
11820: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11821: LD_ADDR_VAR 0 7
11825: PUSH
11826: LD_VAR 0 7
11830: PPUSH
11831: LD_VAR 0 5
11835: PUSH
11836: LD_INT 1
11838: MINUS
11839: PPUSH
11840: LD_VAR 0 6
11844: PPUSH
11845: CALL_OW 1
11849: ST_TO_ADDR
// end ;
11850: GO 11767
11852: POP
11853: POP
// result := s_arr [ 1 ] ;
11854: LD_ADDR_VAR 0 4
11858: PUSH
11859: LD_VAR 0 7
11863: PUSH
11864: LD_INT 1
11866: ARRAY
11867: ST_TO_ADDR
// end ; end ;
11868: LD_VAR 0 4
11872: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11873: LD_INT 0
11875: PPUSH
11876: PPUSH
// if not list then
11877: LD_VAR 0 1
11881: NOT
11882: IFFALSE 11886
// exit ;
11884: GO 11977
// i := list [ pos1 ] ;
11886: LD_ADDR_VAR 0 5
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: LD_VAR 0 2
11900: ARRAY
11901: ST_TO_ADDR
// if not i then
11902: LD_VAR 0 5
11906: NOT
11907: IFFALSE 11911
// exit ;
11909: GO 11977
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11911: LD_ADDR_VAR 0 1
11915: PUSH
11916: LD_VAR 0 1
11920: PPUSH
11921: LD_VAR 0 2
11925: PPUSH
11926: LD_VAR 0 1
11930: PUSH
11931: LD_VAR 0 3
11935: ARRAY
11936: PPUSH
11937: CALL_OW 1
11941: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11942: LD_ADDR_VAR 0 1
11946: PUSH
11947: LD_VAR 0 1
11951: PPUSH
11952: LD_VAR 0 3
11956: PPUSH
11957: LD_VAR 0 5
11961: PPUSH
11962: CALL_OW 1
11966: ST_TO_ADDR
// result := list ;
11967: LD_ADDR_VAR 0 4
11971: PUSH
11972: LD_VAR 0 1
11976: ST_TO_ADDR
// end ;
11977: LD_VAR 0 4
11981: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11982: LD_INT 0
11984: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11985: LD_ADDR_VAR 0 5
11989: PUSH
11990: LD_VAR 0 1
11994: PPUSH
11995: CALL_OW 250
11999: PPUSH
12000: LD_VAR 0 1
12004: PPUSH
12005: CALL_OW 251
12009: PPUSH
12010: LD_VAR 0 2
12014: PPUSH
12015: LD_VAR 0 3
12019: PPUSH
12020: LD_VAR 0 4
12024: PPUSH
12025: CALL 12407 0 5
12029: ST_TO_ADDR
// end ;
12030: LD_VAR 0 5
12034: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
12035: LD_INT 0
12037: PPUSH
12038: PPUSH
12039: PPUSH
12040: PPUSH
// if not list or not unit then
12041: LD_VAR 0 2
12045: NOT
12046: IFTRUE 12055
12048: PUSH
12049: LD_VAR 0 1
12053: NOT
12054: OR
12055: IFFALSE 12059
// exit ;
12057: GO 12402
// result := [ ] ;
12059: LD_ADDR_VAR 0 5
12063: PUSH
12064: EMPTY
12065: ST_TO_ADDR
// for i in list do
12066: LD_ADDR_VAR 0 6
12070: PUSH
12071: LD_VAR 0 2
12075: PUSH
12076: FOR_IN
12077: IFFALSE 12295
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
12079: LD_ADDR_VAR 0 8
12083: PUSH
12084: LD_VAR 0 1
12088: PPUSH
12089: LD_VAR 0 6
12093: PUSH
12094: LD_INT 1
12096: ARRAY
12097: PPUSH
12098: LD_VAR 0 6
12102: PUSH
12103: LD_INT 2
12105: ARRAY
12106: PPUSH
12107: CALL_OW 297
12111: ST_TO_ADDR
// if not Count ( result ) then
12112: LD_VAR 0 5
12116: PPUSH
12117: CALL 8663 0 1
12121: NOT
12122: IFFALSE 12155
// begin result := Join ( result , [ i , tmp ] ) ;
12124: LD_ADDR_VAR 0 5
12128: PUSH
12129: LD_VAR 0 5
12133: PPUSH
12134: LD_VAR 0 6
12138: PUSH
12139: LD_VAR 0 8
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL 44595 0 2
12152: ST_TO_ADDR
// continue ;
12153: GO 12076
// end ; if result [ result ] [ 2 ] <= tmp then
12155: LD_VAR 0 5
12159: PUSH
12160: LD_VAR 0 5
12164: ARRAY
12165: PUSH
12166: LD_INT 2
12168: ARRAY
12169: PUSH
12170: LD_VAR 0 8
12174: LESSEQUAL
12175: IFFALSE 12208
// result := Join ( result , [ i , tmp ] ) else
12177: LD_ADDR_VAR 0 5
12181: PUSH
12182: LD_VAR 0 5
12186: PPUSH
12187: LD_VAR 0 6
12191: PUSH
12192: LD_VAR 0 8
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL 44595 0 2
12205: ST_TO_ADDR
12206: GO 12293
// begin for j := 1 to Count ( result ) do
12208: LD_ADDR_VAR 0 7
12212: PUSH
12213: DOUBLE
12214: LD_INT 1
12216: DEC
12217: ST_TO_ADDR
12218: LD_VAR 0 5
12222: PPUSH
12223: CALL 8663 0 1
12227: PUSH
12228: FOR_TO
12229: IFFALSE 12291
// begin if tmp < result [ j ] [ 2 ] then
12231: LD_VAR 0 8
12235: PUSH
12236: LD_VAR 0 5
12240: PUSH
12241: LD_VAR 0 7
12245: ARRAY
12246: PUSH
12247: LD_INT 2
12249: ARRAY
12250: LESS
12251: IFFALSE 12289
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12253: LD_ADDR_VAR 0 5
12257: PUSH
12258: LD_VAR 0 5
12262: PPUSH
12263: LD_VAR 0 7
12267: PPUSH
12268: LD_VAR 0 6
12272: PUSH
12273: LD_VAR 0 8
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PPUSH
12282: CALL_OW 2
12286: ST_TO_ADDR
// break ;
12287: GO 12291
// end ; end ;
12289: GO 12228
12291: POP
12292: POP
// end ; end ;
12293: GO 12076
12295: POP
12296: POP
// if result and not asc then
12297: LD_VAR 0 5
12301: IFFALSE 12310
12303: PUSH
12304: LD_VAR 0 3
12308: NOT
12309: AND
12310: IFFALSE 12327
// result := ReverseArray ( result ) ;
12312: LD_ADDR_VAR 0 5
12316: PUSH
12317: LD_VAR 0 5
12321: PPUSH
12322: CALL 39685 0 1
12326: ST_TO_ADDR
// tmp := [ ] ;
12327: LD_ADDR_VAR 0 8
12331: PUSH
12332: EMPTY
12333: ST_TO_ADDR
// if mode then
12334: LD_VAR 0 4
12338: IFFALSE 12402
// begin for i := 1 to result do
12340: LD_ADDR_VAR 0 6
12344: PUSH
12345: DOUBLE
12346: LD_INT 1
12348: DEC
12349: ST_TO_ADDR
12350: LD_VAR 0 5
12354: PUSH
12355: FOR_TO
12356: IFFALSE 12390
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
12358: LD_ADDR_VAR 0 8
12362: PUSH
12363: LD_VAR 0 8
12367: PPUSH
12368: LD_VAR 0 5
12372: PUSH
12373: LD_VAR 0 6
12377: ARRAY
12378: PUSH
12379: LD_INT 1
12381: ARRAY
12382: PPUSH
12383: CALL 44595 0 2
12387: ST_TO_ADDR
12388: GO 12355
12390: POP
12391: POP
// result := tmp ;
12392: LD_ADDR_VAR 0 5
12396: PUSH
12397: LD_VAR 0 8
12401: ST_TO_ADDR
// end ; end ;
12402: LD_VAR 0 5
12406: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12407: LD_INT 0
12409: PPUSH
12410: PPUSH
12411: PPUSH
12412: PPUSH
// if not list then
12413: LD_VAR 0 3
12417: NOT
12418: IFFALSE 12422
// exit ;
12420: GO 12812
// result := [ ] ;
12422: LD_ADDR_VAR 0 6
12426: PUSH
12427: EMPTY
12428: ST_TO_ADDR
// for i in list do
12429: LD_ADDR_VAR 0 7
12433: PUSH
12434: LD_VAR 0 3
12438: PUSH
12439: FOR_IN
12440: IFFALSE 12642
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12442: LD_ADDR_VAR 0 9
12446: PUSH
12447: LD_VAR 0 7
12451: PPUSH
12452: LD_VAR 0 1
12456: PPUSH
12457: LD_VAR 0 2
12461: PPUSH
12462: CALL_OW 297
12466: ST_TO_ADDR
// if not result then
12467: LD_VAR 0 6
12471: NOT
12472: IFFALSE 12498
// result := [ [ i , tmp ] ] else
12474: LD_ADDR_VAR 0 6
12478: PUSH
12479: LD_VAR 0 7
12483: PUSH
12484: LD_VAR 0 9
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: ST_TO_ADDR
12496: GO 12640
// begin if result [ result ] [ 2 ] <= tmp then
12498: LD_VAR 0 6
12502: PUSH
12503: LD_VAR 0 6
12507: ARRAY
12508: PUSH
12509: LD_INT 2
12511: ARRAY
12512: PUSH
12513: LD_VAR 0 9
12517: LESSEQUAL
12518: IFFALSE 12560
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12520: LD_ADDR_VAR 0 6
12524: PUSH
12525: LD_VAR 0 6
12529: PPUSH
12530: LD_VAR 0 6
12534: PUSH
12535: LD_INT 1
12537: PLUS
12538: PPUSH
12539: LD_VAR 0 7
12543: PUSH
12544: LD_VAR 0 9
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: PPUSH
12553: CALL_OW 2
12557: ST_TO_ADDR
12558: GO 12640
// for j := 1 to result do
12560: LD_ADDR_VAR 0 8
12564: PUSH
12565: DOUBLE
12566: LD_INT 1
12568: DEC
12569: ST_TO_ADDR
12570: LD_VAR 0 6
12574: PUSH
12575: FOR_TO
12576: IFFALSE 12638
// begin if tmp < result [ j ] [ 2 ] then
12578: LD_VAR 0 9
12582: PUSH
12583: LD_VAR 0 6
12587: PUSH
12588: LD_VAR 0 8
12592: ARRAY
12593: PUSH
12594: LD_INT 2
12596: ARRAY
12597: LESS
12598: IFFALSE 12636
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12600: LD_ADDR_VAR 0 6
12604: PUSH
12605: LD_VAR 0 6
12609: PPUSH
12610: LD_VAR 0 8
12614: PPUSH
12615: LD_VAR 0 7
12619: PUSH
12620: LD_VAR 0 9
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 2
12633: ST_TO_ADDR
// break ;
12634: GO 12638
// end ; end ;
12636: GO 12575
12638: POP
12639: POP
// end ; end ;
12640: GO 12439
12642: POP
12643: POP
// if result and not asc then
12644: LD_VAR 0 6
12648: IFFALSE 12657
12650: PUSH
12651: LD_VAR 0 4
12655: NOT
12656: AND
12657: IFFALSE 12732
// begin tmp := result ;
12659: LD_ADDR_VAR 0 9
12663: PUSH
12664: LD_VAR 0 6
12668: ST_TO_ADDR
// for i = tmp downto 1 do
12669: LD_ADDR_VAR 0 7
12673: PUSH
12674: DOUBLE
12675: LD_VAR 0 9
12679: INC
12680: ST_TO_ADDR
12681: LD_INT 1
12683: PUSH
12684: FOR_DOWNTO
12685: IFFALSE 12730
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12687: LD_ADDR_VAR 0 6
12691: PUSH
12692: LD_VAR 0 6
12696: PPUSH
12697: LD_VAR 0 9
12701: PUSH
12702: LD_VAR 0 7
12706: MINUS
12707: PUSH
12708: LD_INT 1
12710: PLUS
12711: PPUSH
12712: LD_VAR 0 9
12716: PUSH
12717: LD_VAR 0 7
12721: ARRAY
12722: PPUSH
12723: CALL_OW 1
12727: ST_TO_ADDR
12728: GO 12684
12730: POP
12731: POP
// end ; tmp := [ ] ;
12732: LD_ADDR_VAR 0 9
12736: PUSH
12737: EMPTY
12738: ST_TO_ADDR
// if mode then
12739: LD_VAR 0 5
12743: IFFALSE 12812
// begin for i = 1 to result do
12745: LD_ADDR_VAR 0 7
12749: PUSH
12750: DOUBLE
12751: LD_INT 1
12753: DEC
12754: ST_TO_ADDR
12755: LD_VAR 0 6
12759: PUSH
12760: FOR_TO
12761: IFFALSE 12800
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12763: LD_ADDR_VAR 0 9
12767: PUSH
12768: LD_VAR 0 9
12772: PPUSH
12773: LD_VAR 0 7
12777: PPUSH
12778: LD_VAR 0 6
12782: PUSH
12783: LD_VAR 0 7
12787: ARRAY
12788: PUSH
12789: LD_INT 1
12791: ARRAY
12792: PPUSH
12793: CALL_OW 1
12797: ST_TO_ADDR
12798: GO 12760
12800: POP
12801: POP
// result := tmp ;
12802: LD_ADDR_VAR 0 6
12806: PUSH
12807: LD_VAR 0 9
12811: ST_TO_ADDR
// end ; end ;
12812: LD_VAR 0 6
12816: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12817: LD_INT 0
12819: PPUSH
12820: PPUSH
12821: PPUSH
12822: PPUSH
12823: PPUSH
12824: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12825: LD_ADDR_VAR 0 5
12829: PUSH
12830: LD_INT 0
12832: PUSH
12833: LD_INT 0
12835: PUSH
12836: LD_INT 0
12838: PUSH
12839: EMPTY
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: ST_TO_ADDR
// if not x or not y then
12847: LD_VAR 0 2
12851: NOT
12852: IFTRUE 12861
12854: PUSH
12855: LD_VAR 0 3
12859: NOT
12860: OR
12861: IFFALSE 12865
// exit ;
12863: GO 14521
// if not range then
12865: LD_VAR 0 4
12869: NOT
12870: IFFALSE 12880
// range := 10 ;
12872: LD_ADDR_VAR 0 4
12876: PUSH
12877: LD_INT 10
12879: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12880: LD_ADDR_VAR 0 8
12884: PUSH
12885: LD_INT 81
12887: PUSH
12888: LD_VAR 0 1
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 92
12899: PUSH
12900: LD_VAR 0 2
12904: PUSH
12905: LD_VAR 0 3
12909: PUSH
12910: LD_VAR 0 4
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 3
12923: PUSH
12924: LD_INT 21
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: PPUSH
12943: CALL_OW 69
12947: ST_TO_ADDR
// if not tmp then
12948: LD_VAR 0 8
12952: NOT
12953: IFFALSE 12957
// exit ;
12955: GO 14521
// for i in tmp do
12957: LD_ADDR_VAR 0 6
12961: PUSH
12962: LD_VAR 0 8
12966: PUSH
12967: FOR_IN
12968: IFFALSE 14496
// begin points := [ 0 , 0 , 0 ] ;
12970: LD_ADDR_VAR 0 9
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: LD_INT 0
12980: PUSH
12981: LD_INT 0
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: LIST
12988: ST_TO_ADDR
// bpoints := 1 ;
12989: LD_ADDR_VAR 0 10
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12997: LD_VAR 0 6
13001: PPUSH
13002: CALL_OW 247
13006: PUSH
13007: LD_INT 1
13009: DOUBLE
13010: EQUAL
13011: IFTRUE 13015
13013: GO 13597
13015: POP
// begin if GetClass ( i ) = 1 then
13016: LD_VAR 0 6
13020: PPUSH
13021: CALL_OW 257
13025: PUSH
13026: LD_INT 1
13028: EQUAL
13029: IFFALSE 13050
// points := [ 10 , 5 , 3 ] ;
13031: LD_ADDR_VAR 0 9
13035: PUSH
13036: LD_INT 10
13038: PUSH
13039: LD_INT 5
13041: PUSH
13042: LD_INT 3
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
13050: LD_VAR 0 6
13054: PPUSH
13055: CALL_OW 257
13059: PUSH
13060: LD_INT 2
13062: PUSH
13063: LD_INT 3
13065: PUSH
13066: LD_INT 4
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: LIST
13073: IN
13074: IFFALSE 13095
// points := [ 3 , 2 , 1 ] ;
13076: LD_ADDR_VAR 0 9
13080: PUSH
13081: LD_INT 3
13083: PUSH
13084: LD_INT 2
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: ST_TO_ADDR
// if GetClass ( i ) = 5 then
13095: LD_VAR 0 6
13099: PPUSH
13100: CALL_OW 257
13104: PUSH
13105: LD_INT 5
13107: EQUAL
13108: IFFALSE 13129
// points := [ 130 , 5 , 2 ] ;
13110: LD_ADDR_VAR 0 9
13114: PUSH
13115: LD_INT 130
13117: PUSH
13118: LD_INT 5
13120: PUSH
13121: LD_INT 2
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: ST_TO_ADDR
// if GetClass ( i ) = 8 then
13129: LD_VAR 0 6
13133: PPUSH
13134: CALL_OW 257
13138: PUSH
13139: LD_INT 8
13141: EQUAL
13142: IFFALSE 13163
// points := [ 35 , 35 , 30 ] ;
13144: LD_ADDR_VAR 0 9
13148: PUSH
13149: LD_INT 35
13151: PUSH
13152: LD_INT 35
13154: PUSH
13155: LD_INT 30
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: ST_TO_ADDR
// if GetClass ( i ) = 9 then
13163: LD_VAR 0 6
13167: PPUSH
13168: CALL_OW 257
13172: PUSH
13173: LD_INT 9
13175: EQUAL
13176: IFFALSE 13197
// points := [ 20 , 55 , 40 ] ;
13178: LD_ADDR_VAR 0 9
13182: PUSH
13183: LD_INT 20
13185: PUSH
13186: LD_INT 55
13188: PUSH
13189: LD_INT 40
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
13197: LD_VAR 0 6
13201: PPUSH
13202: CALL_OW 257
13206: PUSH
13207: LD_INT 12
13209: PUSH
13210: LD_INT 16
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: IN
13217: IFFALSE 13238
// points := [ 5 , 3 , 2 ] ;
13219: LD_ADDR_VAR 0 9
13223: PUSH
13224: LD_INT 5
13226: PUSH
13227: LD_INT 3
13229: PUSH
13230: LD_INT 2
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: LIST
13237: ST_TO_ADDR
// if GetClass ( i ) = 17 then
13238: LD_VAR 0 6
13242: PPUSH
13243: CALL_OW 257
13247: PUSH
13248: LD_INT 17
13250: EQUAL
13251: IFFALSE 13272
// points := [ 100 , 50 , 75 ] ;
13253: LD_ADDR_VAR 0 9
13257: PUSH
13258: LD_INT 100
13260: PUSH
13261: LD_INT 50
13263: PUSH
13264: LD_INT 75
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: ST_TO_ADDR
// if GetClass ( i ) = 15 then
13272: LD_VAR 0 6
13276: PPUSH
13277: CALL_OW 257
13281: PUSH
13282: LD_INT 15
13284: EQUAL
13285: IFFALSE 13306
// points := [ 10 , 5 , 3 ] ;
13287: LD_ADDR_VAR 0 9
13291: PUSH
13292: LD_INT 10
13294: PUSH
13295: LD_INT 5
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: ST_TO_ADDR
// if GetClass ( i ) = 14 then
13306: LD_VAR 0 6
13310: PPUSH
13311: CALL_OW 257
13315: PUSH
13316: LD_INT 14
13318: EQUAL
13319: IFFALSE 13340
// points := [ 10 , 0 , 0 ] ;
13321: LD_ADDR_VAR 0 9
13325: PUSH
13326: LD_INT 10
13328: PUSH
13329: LD_INT 0
13331: PUSH
13332: LD_INT 0
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13340: LD_VAR 0 6
13344: PPUSH
13345: CALL_OW 257
13349: PUSH
13350: LD_INT 11
13352: EQUAL
13353: IFFALSE 13374
// points := [ 30 , 10 , 5 ] ;
13355: LD_ADDR_VAR 0 9
13359: PUSH
13360: LD_INT 30
13362: PUSH
13363: LD_INT 10
13365: PUSH
13366: LD_INT 5
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13374: LD_VAR 0 1
13378: PPUSH
13379: LD_INT 5
13381: PPUSH
13382: CALL_OW 321
13386: PUSH
13387: LD_INT 2
13389: EQUAL
13390: IFFALSE 13407
// bpoints := bpoints * 1.8 ;
13392: LD_ADDR_VAR 0 10
13396: PUSH
13397: LD_VAR 0 10
13401: PUSH
13402: LD_REAL  1.80000000000000E+0000
13405: MUL
13406: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13407: LD_VAR 0 6
13411: PPUSH
13412: CALL_OW 257
13416: PUSH
13417: LD_INT 1
13419: PUSH
13420: LD_INT 2
13422: PUSH
13423: LD_INT 3
13425: PUSH
13426: LD_INT 4
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: IN
13435: IFFALSE 13455
13437: PUSH
13438: LD_VAR 0 1
13442: PPUSH
13443: LD_INT 51
13445: PPUSH
13446: CALL_OW 321
13450: PUSH
13451: LD_INT 2
13453: EQUAL
13454: AND
13455: IFFALSE 13472
// bpoints := bpoints * 1.2 ;
13457: LD_ADDR_VAR 0 10
13461: PUSH
13462: LD_VAR 0 10
13466: PUSH
13467: LD_REAL  1.20000000000000E+0000
13470: MUL
13471: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13472: LD_VAR 0 6
13476: PPUSH
13477: CALL_OW 257
13481: PUSH
13482: LD_INT 5
13484: PUSH
13485: LD_INT 7
13487: PUSH
13488: LD_INT 9
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: IN
13496: IFFALSE 13516
13498: PUSH
13499: LD_VAR 0 1
13503: PPUSH
13504: LD_INT 52
13506: PPUSH
13507: CALL_OW 321
13511: PUSH
13512: LD_INT 2
13514: EQUAL
13515: AND
13516: IFFALSE 13533
// bpoints := bpoints * 1.5 ;
13518: LD_ADDR_VAR 0 10
13522: PUSH
13523: LD_VAR 0 10
13527: PUSH
13528: LD_REAL  1.50000000000000E+0000
13531: MUL
13532: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13533: LD_VAR 0 1
13537: PPUSH
13538: LD_INT 66
13540: PPUSH
13541: CALL_OW 321
13545: PUSH
13546: LD_INT 2
13548: EQUAL
13549: IFFALSE 13566
// bpoints := bpoints * 1.1 ;
13551: LD_ADDR_VAR 0 10
13555: PUSH
13556: LD_VAR 0 10
13560: PUSH
13561: LD_REAL  1.10000000000000E+0000
13564: MUL
13565: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13566: LD_ADDR_VAR 0 10
13570: PUSH
13571: LD_VAR 0 10
13575: PUSH
13576: LD_VAR 0 6
13580: PPUSH
13581: LD_INT 1
13583: PPUSH
13584: CALL_OW 259
13588: PUSH
13589: LD_REAL  1.15000000000000E+0000
13592: MUL
13593: MUL
13594: ST_TO_ADDR
// end ; unit_vehicle :
13595: GO 14425
13597: LD_INT 2
13599: DOUBLE
13600: EQUAL
13601: IFTRUE 13605
13603: GO 14413
13605: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13606: LD_VAR 0 6
13610: PPUSH
13611: CALL_OW 264
13615: PUSH
13616: LD_INT 2
13618: PUSH
13619: LD_INT 42
13621: PUSH
13622: LD_INT 24
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: LIST
13629: IN
13630: IFFALSE 13651
// points := [ 25 , 5 , 3 ] ;
13632: LD_ADDR_VAR 0 9
13636: PUSH
13637: LD_INT 25
13639: PUSH
13640: LD_INT 5
13642: PUSH
13643: LD_INT 3
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13651: LD_VAR 0 6
13655: PPUSH
13656: CALL_OW 264
13660: PUSH
13661: LD_INT 4
13663: PUSH
13664: LD_INT 43
13666: PUSH
13667: LD_INT 25
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: IN
13675: IFFALSE 13696
// points := [ 40 , 15 , 5 ] ;
13677: LD_ADDR_VAR 0 9
13681: PUSH
13682: LD_INT 40
13684: PUSH
13685: LD_INT 15
13687: PUSH
13688: LD_INT 5
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13696: LD_VAR 0 6
13700: PPUSH
13701: CALL_OW 264
13705: PUSH
13706: LD_INT 3
13708: PUSH
13709: LD_INT 23
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: IN
13716: IFFALSE 13737
// points := [ 7 , 25 , 8 ] ;
13718: LD_ADDR_VAR 0 9
13722: PUSH
13723: LD_INT 7
13725: PUSH
13726: LD_INT 25
13728: PUSH
13729: LD_INT 8
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13737: LD_VAR 0 6
13741: PPUSH
13742: CALL_OW 264
13746: PUSH
13747: LD_INT 5
13749: PUSH
13750: LD_INT 27
13752: PUSH
13753: LD_INT 44
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: LIST
13760: IN
13761: IFFALSE 13782
// points := [ 14 , 50 , 16 ] ;
13763: LD_ADDR_VAR 0 9
13767: PUSH
13768: LD_INT 14
13770: PUSH
13771: LD_INT 50
13773: PUSH
13774: LD_INT 16
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13782: LD_VAR 0 6
13786: PPUSH
13787: CALL_OW 264
13791: PUSH
13792: LD_INT 6
13794: PUSH
13795: LD_INT 46
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: IN
13802: IFFALSE 13823
// points := [ 32 , 120 , 70 ] ;
13804: LD_ADDR_VAR 0 9
13808: PUSH
13809: LD_INT 32
13811: PUSH
13812: LD_INT 120
13814: PUSH
13815: LD_INT 70
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13823: LD_VAR 0 6
13827: PPUSH
13828: CALL_OW 264
13832: PUSH
13833: LD_INT 7
13835: PUSH
13836: LD_INT 28
13838: PUSH
13839: LD_INT 45
13841: PUSH
13842: LD_INT 92
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: LIST
13849: LIST
13850: IN
13851: IFFALSE 13872
// points := [ 35 , 20 , 45 ] ;
13853: LD_ADDR_VAR 0 9
13857: PUSH
13858: LD_INT 35
13860: PUSH
13861: LD_INT 20
13863: PUSH
13864: LD_INT 45
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13872: LD_VAR 0 6
13876: PPUSH
13877: CALL_OW 264
13881: PUSH
13882: LD_INT 47
13884: PUSH
13885: EMPTY
13886: LIST
13887: IN
13888: IFFALSE 13909
// points := [ 67 , 45 , 75 ] ;
13890: LD_ADDR_VAR 0 9
13894: PUSH
13895: LD_INT 67
13897: PUSH
13898: LD_INT 45
13900: PUSH
13901: LD_INT 75
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: LIST
13908: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13909: LD_VAR 0 6
13913: PPUSH
13914: CALL_OW 264
13918: PUSH
13919: LD_INT 26
13921: PUSH
13922: EMPTY
13923: LIST
13924: IN
13925: IFFALSE 13946
// points := [ 120 , 30 , 80 ] ;
13927: LD_ADDR_VAR 0 9
13931: PUSH
13932: LD_INT 120
13934: PUSH
13935: LD_INT 30
13937: PUSH
13938: LD_INT 80
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13946: LD_VAR 0 6
13950: PPUSH
13951: CALL_OW 264
13955: PUSH
13956: LD_INT 22
13958: PUSH
13959: EMPTY
13960: LIST
13961: IN
13962: IFFALSE 13983
// points := [ 40 , 1 , 1 ] ;
13964: LD_ADDR_VAR 0 9
13968: PUSH
13969: LD_INT 40
13971: PUSH
13972: LD_INT 1
13974: PUSH
13975: LD_INT 1
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13983: LD_VAR 0 6
13987: PPUSH
13988: CALL_OW 264
13992: PUSH
13993: LD_INT 29
13995: PUSH
13996: EMPTY
13997: LIST
13998: IN
13999: IFFALSE 14020
// points := [ 70 , 200 , 400 ] ;
14001: LD_ADDR_VAR 0 9
14005: PUSH
14006: LD_INT 70
14008: PUSH
14009: LD_INT 200
14011: PUSH
14012: LD_INT 400
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: LIST
14019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
14020: LD_VAR 0 6
14024: PPUSH
14025: CALL_OW 264
14029: PUSH
14030: LD_INT 14
14032: PUSH
14033: LD_INT 53
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: IN
14040: IFFALSE 14061
// points := [ 40 , 10 , 20 ] ;
14042: LD_ADDR_VAR 0 9
14046: PUSH
14047: LD_INT 40
14049: PUSH
14050: LD_INT 10
14052: PUSH
14053: LD_INT 20
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
14061: LD_VAR 0 6
14065: PPUSH
14066: CALL_OW 264
14070: PUSH
14071: LD_INT 9
14073: PUSH
14074: EMPTY
14075: LIST
14076: IN
14077: IFFALSE 14098
// points := [ 5 , 70 , 20 ] ;
14079: LD_ADDR_VAR 0 9
14083: PUSH
14084: LD_INT 5
14086: PUSH
14087: LD_INT 70
14089: PUSH
14090: LD_INT 20
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
14098: LD_VAR 0 6
14102: PPUSH
14103: CALL_OW 264
14107: PUSH
14108: LD_INT 10
14110: PUSH
14111: EMPTY
14112: LIST
14113: IN
14114: IFFALSE 14135
// points := [ 35 , 110 , 70 ] ;
14116: LD_ADDR_VAR 0 9
14120: PUSH
14121: LD_INT 35
14123: PUSH
14124: LD_INT 110
14126: PUSH
14127: LD_INT 70
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
14135: LD_VAR 0 6
14139: PPUSH
14140: CALL_OW 265
14144: PUSH
14145: LD_INT 25
14147: EQUAL
14148: IFFALSE 14169
// points := [ 80 , 65 , 100 ] ;
14150: LD_ADDR_VAR 0 9
14154: PUSH
14155: LD_INT 80
14157: PUSH
14158: LD_INT 65
14160: PUSH
14161: LD_INT 100
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
14169: LD_VAR 0 6
14173: PPUSH
14174: CALL_OW 263
14178: PUSH
14179: LD_INT 1
14181: EQUAL
14182: IFFALSE 14217
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14184: LD_ADDR_VAR 0 10
14188: PUSH
14189: LD_VAR 0 10
14193: PUSH
14194: LD_VAR 0 6
14198: PPUSH
14199: CALL_OW 311
14203: PPUSH
14204: LD_INT 3
14206: PPUSH
14207: CALL_OW 259
14211: PUSH
14212: LD_INT 4
14214: MUL
14215: MUL
14216: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
14217: LD_VAR 0 6
14221: PPUSH
14222: CALL_OW 263
14226: PUSH
14227: LD_INT 2
14229: EQUAL
14230: IFFALSE 14281
// begin j := IsControledBy ( i ) ;
14232: LD_ADDR_VAR 0 7
14236: PUSH
14237: LD_VAR 0 6
14241: PPUSH
14242: CALL_OW 312
14246: ST_TO_ADDR
// if j then
14247: LD_VAR 0 7
14251: IFFALSE 14281
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
14253: LD_ADDR_VAR 0 10
14257: PUSH
14258: LD_VAR 0 10
14262: PUSH
14263: LD_VAR 0 7
14267: PPUSH
14268: LD_INT 3
14270: PPUSH
14271: CALL_OW 259
14275: PUSH
14276: LD_INT 3
14278: MUL
14279: MUL
14280: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
14281: LD_VAR 0 6
14285: PPUSH
14286: CALL_OW 264
14290: PUSH
14291: LD_INT 5
14293: PUSH
14294: LD_INT 6
14296: PUSH
14297: LD_INT 46
14299: PUSH
14300: LD_INT 44
14302: PUSH
14303: LD_INT 47
14305: PUSH
14306: LD_INT 45
14308: PUSH
14309: LD_INT 28
14311: PUSH
14312: LD_INT 7
14314: PUSH
14315: LD_INT 27
14317: PUSH
14318: LD_INT 29
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: IN
14333: IFFALSE 14353
14335: PUSH
14336: LD_VAR 0 1
14340: PPUSH
14341: LD_INT 52
14343: PPUSH
14344: CALL_OW 321
14348: PUSH
14349: LD_INT 2
14351: EQUAL
14352: AND
14353: IFFALSE 14370
// bpoints := bpoints * 1.2 ;
14355: LD_ADDR_VAR 0 10
14359: PUSH
14360: LD_VAR 0 10
14364: PUSH
14365: LD_REAL  1.20000000000000E+0000
14368: MUL
14369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14370: LD_VAR 0 6
14374: PPUSH
14375: CALL_OW 264
14379: PUSH
14380: LD_INT 6
14382: PUSH
14383: LD_INT 46
14385: PUSH
14386: LD_INT 47
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: IN
14394: IFFALSE 14411
// bpoints := bpoints * 1.2 ;
14396: LD_ADDR_VAR 0 10
14400: PUSH
14401: LD_VAR 0 10
14405: PUSH
14406: LD_REAL  1.20000000000000E+0000
14409: MUL
14410: ST_TO_ADDR
// end ; unit_building :
14411: GO 14425
14413: LD_INT 3
14415: DOUBLE
14416: EQUAL
14417: IFTRUE 14421
14419: GO 14424
14421: POP
// ; end ;
14422: GO 14425
14424: POP
// for j = 1 to 3 do
14425: LD_ADDR_VAR 0 7
14429: PUSH
14430: DOUBLE
14431: LD_INT 1
14433: DEC
14434: ST_TO_ADDR
14435: LD_INT 3
14437: PUSH
14438: FOR_TO
14439: IFFALSE 14492
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14441: LD_ADDR_VAR 0 5
14445: PUSH
14446: LD_VAR 0 5
14450: PPUSH
14451: LD_VAR 0 7
14455: PPUSH
14456: LD_VAR 0 5
14460: PUSH
14461: LD_VAR 0 7
14465: ARRAY
14466: PUSH
14467: LD_VAR 0 9
14471: PUSH
14472: LD_VAR 0 7
14476: ARRAY
14477: PUSH
14478: LD_VAR 0 10
14482: MUL
14483: PLUS
14484: PPUSH
14485: CALL_OW 1
14489: ST_TO_ADDR
14490: GO 14438
14492: POP
14493: POP
// end ;
14494: GO 12967
14496: POP
14497: POP
// result := Replace ( result , 4 , tmp ) ;
14498: LD_ADDR_VAR 0 5
14502: PUSH
14503: LD_VAR 0 5
14507: PPUSH
14508: LD_INT 4
14510: PPUSH
14511: LD_VAR 0 8
14515: PPUSH
14516: CALL_OW 1
14520: ST_TO_ADDR
// end ;
14521: LD_VAR 0 5
14525: RET
// export function DangerAtRange ( unit , range ) ; begin
14526: LD_INT 0
14528: PPUSH
// if not unit then
14529: LD_VAR 0 1
14533: NOT
14534: IFFALSE 14538
// exit ;
14536: GO 14583
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14538: LD_ADDR_VAR 0 3
14542: PUSH
14543: LD_VAR 0 1
14547: PPUSH
14548: CALL_OW 255
14552: PPUSH
14553: LD_VAR 0 1
14557: PPUSH
14558: CALL_OW 250
14562: PPUSH
14563: LD_VAR 0 1
14567: PPUSH
14568: CALL_OW 251
14572: PPUSH
14573: LD_VAR 0 2
14577: PPUSH
14578: CALL 12817 0 4
14582: ST_TO_ADDR
// end ;
14583: LD_VAR 0 3
14587: RET
// export function DangerInArea ( side , area ) ; begin
14588: LD_INT 0
14590: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14591: LD_ADDR_VAR 0 3
14595: PUSH
14596: LD_VAR 0 2
14600: PPUSH
14601: LD_INT 81
14603: PUSH
14604: LD_VAR 0 1
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PPUSH
14613: CALL_OW 70
14617: ST_TO_ADDR
// end ;
14618: LD_VAR 0 3
14622: RET
// export function IsExtension ( b ) ; begin
14623: LD_INT 0
14625: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14626: LD_ADDR_VAR 0 2
14630: PUSH
14631: LD_VAR 0 1
14635: PUSH
14636: LD_INT 23
14638: PUSH
14639: LD_INT 20
14641: PUSH
14642: LD_INT 22
14644: PUSH
14645: LD_INT 17
14647: PUSH
14648: LD_INT 24
14650: PUSH
14651: LD_INT 21
14653: PUSH
14654: LD_INT 19
14656: PUSH
14657: LD_INT 16
14659: PUSH
14660: LD_INT 25
14662: PUSH
14663: LD_INT 18
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: IN
14678: ST_TO_ADDR
// end ;
14679: LD_VAR 0 2
14683: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14684: LD_INT 0
14686: PPUSH
14687: PPUSH
14688: PPUSH
// result := [ ] ;
14689: LD_ADDR_VAR 0 4
14693: PUSH
14694: EMPTY
14695: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14696: LD_ADDR_VAR 0 5
14700: PUSH
14701: LD_VAR 0 2
14705: PPUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 3
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 70
14720: ST_TO_ADDR
// if not tmp then
14721: LD_VAR 0 5
14725: NOT
14726: IFFALSE 14730
// exit ;
14728: GO 14794
// if checkLink then
14730: LD_VAR 0 3
14734: IFFALSE 14784
// begin for i in tmp do
14736: LD_ADDR_VAR 0 6
14740: PUSH
14741: LD_VAR 0 5
14745: PUSH
14746: FOR_IN
14747: IFFALSE 14782
// if GetBase ( i ) <> base then
14749: LD_VAR 0 6
14753: PPUSH
14754: CALL_OW 274
14758: PUSH
14759: LD_VAR 0 1
14763: NONEQUAL
14764: IFFALSE 14780
// ComLinkToBase ( base , i ) ;
14766: LD_VAR 0 1
14770: PPUSH
14771: LD_VAR 0 6
14775: PPUSH
14776: CALL_OW 169
14780: GO 14746
14782: POP
14783: POP
// end ; result := tmp ;
14784: LD_ADDR_VAR 0 4
14788: PUSH
14789: LD_VAR 0 5
14793: ST_TO_ADDR
// end ;
14794: LD_VAR 0 4
14798: RET
// export function ComComplete ( units , b ) ; var i ; begin
14799: LD_INT 0
14801: PPUSH
14802: PPUSH
// if not units then
14803: LD_VAR 0 1
14807: NOT
14808: IFFALSE 14812
// exit ;
14810: GO 14902
// for i in units do
14812: LD_ADDR_VAR 0 4
14816: PUSH
14817: LD_VAR 0 1
14821: PUSH
14822: FOR_IN
14823: IFFALSE 14900
// if BuildingStatus ( b ) = bs_build then
14825: LD_VAR 0 2
14829: PPUSH
14830: CALL_OW 461
14834: PUSH
14835: LD_INT 1
14837: EQUAL
14838: IFFALSE 14898
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14840: LD_VAR 0 4
14844: PPUSH
14845: LD_STRING h
14847: PUSH
14848: LD_VAR 0 2
14852: PPUSH
14853: CALL_OW 250
14857: PUSH
14858: LD_VAR 0 2
14862: PPUSH
14863: CALL_OW 251
14867: PUSH
14868: LD_VAR 0 2
14872: PUSH
14873: LD_INT 0
14875: PUSH
14876: LD_INT 0
14878: PUSH
14879: LD_INT 0
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: PPUSH
14894: CALL_OW 446
14898: GO 14822
14900: POP
14901: POP
// end ;
14902: LD_VAR 0 3
14906: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14907: LD_INT 0
14909: PPUSH
14910: PPUSH
14911: PPUSH
14912: PPUSH
14913: PPUSH
14914: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14915: LD_VAR 0 1
14919: NOT
14920: IFTRUE 14937
14922: PUSH
14923: LD_VAR 0 1
14927: PPUSH
14928: CALL_OW 263
14932: PUSH
14933: LD_INT 2
14935: NONEQUAL
14936: OR
14937: IFFALSE 14941
// exit ;
14939: GO 15257
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14941: LD_ADDR_VAR 0 6
14945: PUSH
14946: LD_INT 22
14948: PUSH
14949: LD_VAR 0 1
14953: PPUSH
14954: CALL_OW 255
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: LD_INT 30
14968: PUSH
14969: LD_INT 36
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 34
14978: PUSH
14979: LD_INT 31
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PPUSH
14995: CALL_OW 69
14999: ST_TO_ADDR
// if not tmp then
15000: LD_VAR 0 6
15004: NOT
15005: IFFALSE 15009
// exit ;
15007: GO 15257
// result := [ ] ;
15009: LD_ADDR_VAR 0 2
15013: PUSH
15014: EMPTY
15015: ST_TO_ADDR
// for i in tmp do
15016: LD_ADDR_VAR 0 3
15020: PUSH
15021: LD_VAR 0 6
15025: PUSH
15026: FOR_IN
15027: IFFALSE 15098
// begin t := UnitsInside ( i ) ;
15029: LD_ADDR_VAR 0 4
15033: PUSH
15034: LD_VAR 0 3
15038: PPUSH
15039: CALL_OW 313
15043: ST_TO_ADDR
// if t then
15044: LD_VAR 0 4
15048: IFFALSE 15096
// for j in t do
15050: LD_ADDR_VAR 0 7
15054: PUSH
15055: LD_VAR 0 4
15059: PUSH
15060: FOR_IN
15061: IFFALSE 15094
// result := Replace ( result , result + 1 , j ) ;
15063: LD_ADDR_VAR 0 2
15067: PUSH
15068: LD_VAR 0 2
15072: PPUSH
15073: LD_VAR 0 2
15077: PUSH
15078: LD_INT 1
15080: PLUS
15081: PPUSH
15082: LD_VAR 0 7
15086: PPUSH
15087: CALL_OW 1
15091: ST_TO_ADDR
15092: GO 15060
15094: POP
15095: POP
// end ;
15096: GO 15026
15098: POP
15099: POP
// if not result then
15100: LD_VAR 0 2
15104: NOT
15105: IFFALSE 15109
// exit ;
15107: GO 15257
// mech := result [ 1 ] ;
15109: LD_ADDR_VAR 0 5
15113: PUSH
15114: LD_VAR 0 2
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: ST_TO_ADDR
// if result > 1 then
15123: LD_VAR 0 2
15127: PUSH
15128: LD_INT 1
15130: GREATER
15131: IFFALSE 15243
// begin for i = 2 to result do
15133: LD_ADDR_VAR 0 3
15137: PUSH
15138: DOUBLE
15139: LD_INT 2
15141: DEC
15142: ST_TO_ADDR
15143: LD_VAR 0 2
15147: PUSH
15148: FOR_TO
15149: IFFALSE 15241
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
15151: LD_ADDR_VAR 0 4
15155: PUSH
15156: LD_VAR 0 2
15160: PUSH
15161: LD_VAR 0 3
15165: ARRAY
15166: PPUSH
15167: LD_INT 3
15169: PPUSH
15170: CALL_OW 259
15174: PUSH
15175: LD_VAR 0 2
15179: PUSH
15180: LD_VAR 0 3
15184: ARRAY
15185: PPUSH
15186: CALL_OW 432
15190: MINUS
15191: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15192: LD_VAR 0 4
15196: PUSH
15197: LD_VAR 0 5
15201: PPUSH
15202: LD_INT 3
15204: PPUSH
15205: CALL_OW 259
15209: PUSH
15210: LD_VAR 0 5
15214: PPUSH
15215: CALL_OW 432
15219: MINUS
15220: GREATEREQUAL
15221: IFFALSE 15239
// mech := result [ i ] ;
15223: LD_ADDR_VAR 0 5
15227: PUSH
15228: LD_VAR 0 2
15232: PUSH
15233: LD_VAR 0 3
15237: ARRAY
15238: ST_TO_ADDR
// end ;
15239: GO 15148
15241: POP
15242: POP
// end ; ComLinkTo ( vehicle , mech ) ;
15243: LD_VAR 0 1
15247: PPUSH
15248: LD_VAR 0 5
15252: PPUSH
15253: CALL_OW 135
// end ;
15257: LD_VAR 0 2
15261: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
15268: PPUSH
15269: PPUSH
15270: PPUSH
15271: PPUSH
15272: PPUSH
15273: PPUSH
15274: PPUSH
15275: PPUSH
15276: PPUSH
// result := [ ] ;
15277: LD_ADDR_VAR 0 7
15281: PUSH
15282: EMPTY
15283: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
15284: LD_VAR 0 1
15288: PPUSH
15289: CALL_OW 266
15293: PUSH
15294: LD_INT 0
15296: PUSH
15297: LD_INT 1
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: IN
15304: NOT
15305: IFFALSE 15309
// exit ;
15307: GO 16949
// if name then
15309: LD_VAR 0 3
15313: IFFALSE 15329
// SetBName ( base_dep , name ) ;
15315: LD_VAR 0 1
15319: PPUSH
15320: LD_VAR 0 3
15324: PPUSH
15325: CALL_OW 500
// base := GetBase ( base_dep ) ;
15329: LD_ADDR_VAR 0 15
15333: PUSH
15334: LD_VAR 0 1
15338: PPUSH
15339: CALL_OW 274
15343: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
15344: LD_ADDR_VAR 0 16
15348: PUSH
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 255
15358: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15359: LD_ADDR_VAR 0 17
15363: PUSH
15364: LD_VAR 0 1
15368: PPUSH
15369: CALL_OW 248
15373: ST_TO_ADDR
// if sources then
15374: LD_VAR 0 5
15378: IFFALSE 15425
// for i = 1 to 3 do
15380: LD_ADDR_VAR 0 8
15384: PUSH
15385: DOUBLE
15386: LD_INT 1
15388: DEC
15389: ST_TO_ADDR
15390: LD_INT 3
15392: PUSH
15393: FOR_TO
15394: IFFALSE 15423
// AddResourceType ( base , i , sources [ i ] ) ;
15396: LD_VAR 0 15
15400: PPUSH
15401: LD_VAR 0 8
15405: PPUSH
15406: LD_VAR 0 5
15410: PUSH
15411: LD_VAR 0 8
15415: ARRAY
15416: PPUSH
15417: CALL_OW 276
15421: GO 15393
15423: POP
15424: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15425: LD_ADDR_VAR 0 18
15429: PUSH
15430: LD_VAR 0 15
15434: PPUSH
15435: LD_VAR 0 2
15439: PPUSH
15440: LD_INT 1
15442: PPUSH
15443: CALL 14684 0 3
15447: ST_TO_ADDR
// InitHc ;
15448: CALL_OW 19
// InitUc ;
15452: CALL_OW 18
// uc_side := side ;
15456: LD_ADDR_OWVAR 20
15460: PUSH
15461: LD_VAR 0 16
15465: ST_TO_ADDR
// uc_nation := nation ;
15466: LD_ADDR_OWVAR 21
15470: PUSH
15471: LD_VAR 0 17
15475: ST_TO_ADDR
// if buildings then
15476: LD_VAR 0 18
15480: IFFALSE 16808
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15482: LD_ADDR_VAR 0 19
15486: PUSH
15487: LD_VAR 0 18
15491: PPUSH
15492: LD_INT 2
15494: PUSH
15495: LD_INT 30
15497: PUSH
15498: LD_INT 29
15500: PUSH
15501: EMPTY
15502: LIST
15503: LIST
15504: PUSH
15505: LD_INT 30
15507: PUSH
15508: LD_INT 30
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 72
15524: ST_TO_ADDR
// if tmp then
15525: LD_VAR 0 19
15529: IFFALSE 15577
// for i in tmp do
15531: LD_ADDR_VAR 0 8
15535: PUSH
15536: LD_VAR 0 19
15540: PUSH
15541: FOR_IN
15542: IFFALSE 15575
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15544: LD_VAR 0 8
15548: PPUSH
15549: CALL_OW 250
15553: PPUSH
15554: LD_VAR 0 8
15558: PPUSH
15559: CALL_OW 251
15563: PPUSH
15564: LD_VAR 0 16
15568: PPUSH
15569: CALL_OW 441
15573: GO 15541
15575: POP
15576: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15577: LD_VAR 0 18
15581: PPUSH
15582: LD_INT 2
15584: PUSH
15585: LD_INT 30
15587: PUSH
15588: LD_INT 32
15590: PUSH
15591: EMPTY
15592: LIST
15593: LIST
15594: PUSH
15595: LD_INT 30
15597: PUSH
15598: LD_INT 33
15600: PUSH
15601: EMPTY
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: LIST
15609: PPUSH
15610: CALL_OW 72
15614: IFFALSE 15702
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15616: LD_ADDR_VAR 0 8
15620: PUSH
15621: LD_VAR 0 18
15625: PPUSH
15626: LD_INT 2
15628: PUSH
15629: LD_INT 30
15631: PUSH
15632: LD_INT 32
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: LD_INT 30
15641: PUSH
15642: LD_INT 33
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: PPUSH
15654: CALL_OW 72
15658: PUSH
15659: FOR_IN
15660: IFFALSE 15700
// begin if not GetBWeapon ( i ) then
15662: LD_VAR 0 8
15666: PPUSH
15667: CALL_OW 269
15671: NOT
15672: IFFALSE 15698
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15674: LD_VAR 0 8
15678: PPUSH
15679: LD_VAR 0 8
15683: PPUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL 16954 0 2
15693: PPUSH
15694: CALL_OW 431
// end ;
15698: GO 15659
15700: POP
15701: POP
// end ; for i = 1 to personel do
15702: LD_ADDR_VAR 0 8
15706: PUSH
15707: DOUBLE
15708: LD_INT 1
15710: DEC
15711: ST_TO_ADDR
15712: LD_VAR 0 6
15716: PUSH
15717: FOR_TO
15718: IFFALSE 16788
// begin if i > 4 then
15720: LD_VAR 0 8
15724: PUSH
15725: LD_INT 4
15727: GREATER
15728: IFFALSE 15732
// break ;
15730: GO 16788
// case i of 1 :
15732: LD_VAR 0 8
15736: PUSH
15737: LD_INT 1
15739: DOUBLE
15740: EQUAL
15741: IFTRUE 15745
15743: GO 15825
15745: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15746: LD_ADDR_VAR 0 12
15750: PUSH
15751: LD_VAR 0 18
15755: PPUSH
15756: LD_INT 22
15758: PUSH
15759: LD_VAR 0 16
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PUSH
15768: LD_INT 58
15770: PUSH
15771: EMPTY
15772: LIST
15773: PUSH
15774: LD_INT 2
15776: PUSH
15777: LD_INT 30
15779: PUSH
15780: LD_INT 32
15782: PUSH
15783: EMPTY
15784: LIST
15785: LIST
15786: PUSH
15787: LD_INT 30
15789: PUSH
15790: LD_INT 4
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: PUSH
15797: LD_INT 30
15799: PUSH
15800: LD_INT 5
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 72
15822: ST_TO_ADDR
15823: GO 16047
15825: LD_INT 2
15827: DOUBLE
15828: EQUAL
15829: IFTRUE 15833
15831: GO 15895
15833: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15834: LD_ADDR_VAR 0 12
15838: PUSH
15839: LD_VAR 0 18
15843: PPUSH
15844: LD_INT 22
15846: PUSH
15847: LD_VAR 0 16
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 2
15858: PUSH
15859: LD_INT 30
15861: PUSH
15862: LD_INT 0
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 30
15871: PUSH
15872: LD_INT 1
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PPUSH
15888: CALL_OW 72
15892: ST_TO_ADDR
15893: GO 16047
15895: LD_INT 3
15897: DOUBLE
15898: EQUAL
15899: IFTRUE 15903
15901: GO 15965
15903: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15904: LD_ADDR_VAR 0 12
15908: PUSH
15909: LD_VAR 0 18
15913: PPUSH
15914: LD_INT 22
15916: PUSH
15917: LD_VAR 0 16
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 2
15928: PUSH
15929: LD_INT 30
15931: PUSH
15932: LD_INT 2
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 30
15941: PUSH
15942: LD_INT 3
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: LIST
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PPUSH
15958: CALL_OW 72
15962: ST_TO_ADDR
15963: GO 16047
15965: LD_INT 4
15967: DOUBLE
15968: EQUAL
15969: IFTRUE 15973
15971: GO 16046
15973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15974: LD_ADDR_VAR 0 12
15978: PUSH
15979: LD_VAR 0 18
15983: PPUSH
15984: LD_INT 22
15986: PUSH
15987: LD_VAR 0 16
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: LD_INT 2
15998: PUSH
15999: LD_INT 30
16001: PUSH
16002: LD_INT 6
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 30
16011: PUSH
16012: LD_INT 7
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 30
16021: PUSH
16022: LD_INT 8
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: PUSH
16035: EMPTY
16036: LIST
16037: LIST
16038: PPUSH
16039: CALL_OW 72
16043: ST_TO_ADDR
16044: GO 16047
16046: POP
// if i = 1 then
16047: LD_VAR 0 8
16051: PUSH
16052: LD_INT 1
16054: EQUAL
16055: IFFALSE 16166
// begin tmp := [ ] ;
16057: LD_ADDR_VAR 0 19
16061: PUSH
16062: EMPTY
16063: ST_TO_ADDR
// for j in f do
16064: LD_ADDR_VAR 0 9
16068: PUSH
16069: LD_VAR 0 12
16073: PUSH
16074: FOR_IN
16075: IFFALSE 16148
// if GetBType ( j ) = b_bunker then
16077: LD_VAR 0 9
16081: PPUSH
16082: CALL_OW 266
16086: PUSH
16087: LD_INT 32
16089: EQUAL
16090: IFFALSE 16117
// tmp := Insert ( tmp , 1 , j ) else
16092: LD_ADDR_VAR 0 19
16096: PUSH
16097: LD_VAR 0 19
16101: PPUSH
16102: LD_INT 1
16104: PPUSH
16105: LD_VAR 0 9
16109: PPUSH
16110: CALL_OW 2
16114: ST_TO_ADDR
16115: GO 16146
// tmp := Insert ( tmp , tmp + 1 , j ) ;
16117: LD_ADDR_VAR 0 19
16121: PUSH
16122: LD_VAR 0 19
16126: PPUSH
16127: LD_VAR 0 19
16131: PUSH
16132: LD_INT 1
16134: PLUS
16135: PPUSH
16136: LD_VAR 0 9
16140: PPUSH
16141: CALL_OW 2
16145: ST_TO_ADDR
16146: GO 16074
16148: POP
16149: POP
// if tmp then
16150: LD_VAR 0 19
16154: IFFALSE 16166
// f := tmp ;
16156: LD_ADDR_VAR 0 12
16160: PUSH
16161: LD_VAR 0 19
16165: ST_TO_ADDR
// end ; x := personel [ i ] ;
16166: LD_ADDR_VAR 0 13
16170: PUSH
16171: LD_VAR 0 6
16175: PUSH
16176: LD_VAR 0 8
16180: ARRAY
16181: ST_TO_ADDR
// if x = - 1 then
16182: LD_VAR 0 13
16186: PUSH
16187: LD_INT 1
16189: NEG
16190: EQUAL
16191: IFFALSE 16402
// begin for j in f do
16193: LD_ADDR_VAR 0 9
16197: PUSH
16198: LD_VAR 0 12
16202: PUSH
16203: FOR_IN
16204: IFFALSE 16398
// repeat InitHc ;
16206: CALL_OW 19
// if GetBType ( j ) = b_barracks then
16210: LD_VAR 0 9
16214: PPUSH
16215: CALL_OW 266
16219: PUSH
16220: LD_INT 5
16222: EQUAL
16223: IFFALSE 16293
// begin if UnitsInside ( j ) < 3 then
16225: LD_VAR 0 9
16229: PPUSH
16230: CALL_OW 313
16234: PUSH
16235: LD_INT 3
16237: LESS
16238: IFFALSE 16274
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16240: LD_INT 0
16242: PPUSH
16243: LD_INT 5
16245: PUSH
16246: LD_INT 8
16248: PUSH
16249: LD_INT 9
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: LIST
16256: PUSH
16257: LD_VAR 0 17
16261: ARRAY
16262: PPUSH
16263: LD_VAR 0 4
16267: PPUSH
16268: CALL_OW 380
16272: GO 16291
// PrepareHuman ( false , i , skill ) ;
16274: LD_INT 0
16276: PPUSH
16277: LD_VAR 0 8
16281: PPUSH
16282: LD_VAR 0 4
16286: PPUSH
16287: CALL_OW 380
// end else
16291: GO 16310
// PrepareHuman ( false , i , skill ) ;
16293: LD_INT 0
16295: PPUSH
16296: LD_VAR 0 8
16300: PPUSH
16301: LD_VAR 0 4
16305: PPUSH
16306: CALL_OW 380
// un := CreateHuman ;
16310: LD_ADDR_VAR 0 14
16314: PUSH
16315: CALL_OW 44
16319: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16320: LD_ADDR_VAR 0 7
16324: PUSH
16325: LD_VAR 0 7
16329: PPUSH
16330: LD_INT 1
16332: PPUSH
16333: LD_VAR 0 14
16337: PPUSH
16338: CALL_OW 2
16342: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
16343: LD_VAR 0 14
16347: PPUSH
16348: LD_VAR 0 9
16352: PPUSH
16353: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16357: LD_VAR 0 9
16361: PPUSH
16362: CALL_OW 313
16366: PUSH
16367: LD_INT 6
16369: EQUAL
16370: IFTRUE 16394
16372: PUSH
16373: LD_VAR 0 9
16377: PPUSH
16378: CALL_OW 266
16382: PUSH
16383: LD_INT 32
16385: PUSH
16386: LD_INT 31
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: IN
16393: OR
16394: IFFALSE 16206
16396: GO 16203
16398: POP
16399: POP
// end else
16400: GO 16786
// for j = 1 to x do
16402: LD_ADDR_VAR 0 9
16406: PUSH
16407: DOUBLE
16408: LD_INT 1
16410: DEC
16411: ST_TO_ADDR
16412: LD_VAR 0 13
16416: PUSH
16417: FOR_TO
16418: IFFALSE 16784
// begin InitHc ;
16420: CALL_OW 19
// if not f then
16424: LD_VAR 0 12
16428: NOT
16429: IFFALSE 16518
// begin PrepareHuman ( false , i , skill ) ;
16431: LD_INT 0
16433: PPUSH
16434: LD_VAR 0 8
16438: PPUSH
16439: LD_VAR 0 4
16443: PPUSH
16444: CALL_OW 380
// un := CreateHuman ;
16448: LD_ADDR_VAR 0 14
16452: PUSH
16453: CALL_OW 44
16457: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16458: LD_ADDR_VAR 0 7
16462: PUSH
16463: LD_VAR 0 7
16467: PPUSH
16468: LD_INT 1
16470: PPUSH
16471: LD_VAR 0 14
16475: PPUSH
16476: CALL_OW 2
16480: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16481: LD_VAR 0 14
16485: PPUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 250
16495: PPUSH
16496: LD_VAR 0 1
16500: PPUSH
16501: CALL_OW 251
16505: PPUSH
16506: LD_INT 10
16508: PPUSH
16509: LD_INT 0
16511: PPUSH
16512: CALL_OW 50
// continue ;
16516: GO 16417
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16518: LD_VAR 0 12
16522: PUSH
16523: LD_INT 1
16525: ARRAY
16526: PPUSH
16527: CALL_OW 313
16531: IFFALSE 16559
16533: PUSH
16534: LD_VAR 0 12
16538: PUSH
16539: LD_INT 1
16541: ARRAY
16542: PPUSH
16543: CALL_OW 266
16547: PUSH
16548: LD_INT 32
16550: PUSH
16551: LD_INT 31
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: IN
16558: AND
16559: IFTRUE 16580
16561: PUSH
16562: LD_VAR 0 12
16566: PUSH
16567: LD_INT 1
16569: ARRAY
16570: PPUSH
16571: CALL_OW 313
16575: PUSH
16576: LD_INT 6
16578: EQUAL
16579: OR
16580: IFFALSE 16600
// f := Delete ( f , 1 ) ;
16582: LD_ADDR_VAR 0 12
16586: PUSH
16587: LD_VAR 0 12
16591: PPUSH
16592: LD_INT 1
16594: PPUSH
16595: CALL_OW 3
16599: ST_TO_ADDR
// if not f then
16600: LD_VAR 0 12
16604: NOT
16605: IFFALSE 16623
// begin x := x + 2 ;
16607: LD_ADDR_VAR 0 13
16611: PUSH
16612: LD_VAR 0 13
16616: PUSH
16617: LD_INT 2
16619: PLUS
16620: ST_TO_ADDR
// continue ;
16621: GO 16417
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16623: LD_VAR 0 12
16627: PUSH
16628: LD_INT 1
16630: ARRAY
16631: PPUSH
16632: CALL_OW 266
16636: PUSH
16637: LD_INT 5
16639: EQUAL
16640: IFFALSE 16714
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16642: LD_VAR 0 12
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PPUSH
16651: CALL_OW 313
16655: PUSH
16656: LD_INT 3
16658: LESS
16659: IFFALSE 16695
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16661: LD_INT 0
16663: PPUSH
16664: LD_INT 5
16666: PUSH
16667: LD_INT 8
16669: PUSH
16670: LD_INT 9
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: LIST
16677: PUSH
16678: LD_VAR 0 17
16682: ARRAY
16683: PPUSH
16684: LD_VAR 0 4
16688: PPUSH
16689: CALL_OW 380
16693: GO 16712
// PrepareHuman ( false , i , skill ) ;
16695: LD_INT 0
16697: PPUSH
16698: LD_VAR 0 8
16702: PPUSH
16703: LD_VAR 0 4
16707: PPUSH
16708: CALL_OW 380
// end else
16712: GO 16731
// PrepareHuman ( false , i , skill ) ;
16714: LD_INT 0
16716: PPUSH
16717: LD_VAR 0 8
16721: PPUSH
16722: LD_VAR 0 4
16726: PPUSH
16727: CALL_OW 380
// un := CreateHuman ;
16731: LD_ADDR_VAR 0 14
16735: PUSH
16736: CALL_OW 44
16740: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16741: LD_ADDR_VAR 0 7
16745: PUSH
16746: LD_VAR 0 7
16750: PPUSH
16751: LD_INT 1
16753: PPUSH
16754: LD_VAR 0 14
16758: PPUSH
16759: CALL_OW 2
16763: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16764: LD_VAR 0 14
16768: PPUSH
16769: LD_VAR 0 12
16773: PUSH
16774: LD_INT 1
16776: ARRAY
16777: PPUSH
16778: CALL_OW 52
// end ;
16782: GO 16417
16784: POP
16785: POP
// end ;
16786: GO 15717
16788: POP
16789: POP
// result := result ^ buildings ;
16790: LD_ADDR_VAR 0 7
16794: PUSH
16795: LD_VAR 0 7
16799: PUSH
16800: LD_VAR 0 18
16804: ADD
16805: ST_TO_ADDR
// end else
16806: GO 16949
// begin for i = 1 to personel do
16808: LD_ADDR_VAR 0 8
16812: PUSH
16813: DOUBLE
16814: LD_INT 1
16816: DEC
16817: ST_TO_ADDR
16818: LD_VAR 0 6
16822: PUSH
16823: FOR_TO
16824: IFFALSE 16947
// begin if i > 4 then
16826: LD_VAR 0 8
16830: PUSH
16831: LD_INT 4
16833: GREATER
16834: IFFALSE 16838
// break ;
16836: GO 16947
// x := personel [ i ] ;
16838: LD_ADDR_VAR 0 13
16842: PUSH
16843: LD_VAR 0 6
16847: PUSH
16848: LD_VAR 0 8
16852: ARRAY
16853: ST_TO_ADDR
// if x = - 1 then
16854: LD_VAR 0 13
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: EQUAL
16863: IFFALSE 16867
// continue ;
16865: GO 16823
// PrepareHuman ( false , i , skill ) ;
16867: LD_INT 0
16869: PPUSH
16870: LD_VAR 0 8
16874: PPUSH
16875: LD_VAR 0 4
16879: PPUSH
16880: CALL_OW 380
// un := CreateHuman ;
16884: LD_ADDR_VAR 0 14
16888: PUSH
16889: CALL_OW 44
16893: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16894: LD_VAR 0 14
16898: PPUSH
16899: LD_VAR 0 1
16903: PPUSH
16904: CALL_OW 250
16908: PPUSH
16909: LD_VAR 0 1
16913: PPUSH
16914: CALL_OW 251
16918: PPUSH
16919: LD_INT 10
16921: PPUSH
16922: LD_INT 0
16924: PPUSH
16925: CALL_OW 50
// result := result ^ un ;
16929: LD_ADDR_VAR 0 7
16933: PUSH
16934: LD_VAR 0 7
16938: PUSH
16939: LD_VAR 0 14
16943: ADD
16944: ST_TO_ADDR
// end ;
16945: GO 16823
16947: POP
16948: POP
// end ; end ;
16949: LD_VAR 0 7
16953: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16954: LD_INT 0
16956: PPUSH
16957: PPUSH
16958: PPUSH
16959: PPUSH
16960: PPUSH
16961: PPUSH
16962: PPUSH
16963: PPUSH
16964: PPUSH
16965: PPUSH
16966: PPUSH
16967: PPUSH
16968: PPUSH
16969: PPUSH
16970: PPUSH
16971: PPUSH
// result := false ;
16972: LD_ADDR_VAR 0 3
16976: PUSH
16977: LD_INT 0
16979: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16980: LD_VAR 0 1
16984: NOT
16985: IFTRUE 17010
16987: PUSH
16988: LD_VAR 0 1
16992: PPUSH
16993: CALL_OW 266
16997: PUSH
16998: LD_INT 32
17000: PUSH
17001: LD_INT 33
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: IN
17008: NOT
17009: OR
17010: IFFALSE 17014
// exit ;
17012: GO 18149
// nat := GetNation ( tower ) ;
17014: LD_ADDR_VAR 0 12
17018: PUSH
17019: LD_VAR 0 1
17023: PPUSH
17024: CALL_OW 248
17028: ST_TO_ADDR
// side := GetSide ( tower ) ;
17029: LD_ADDR_VAR 0 16
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 255
17043: ST_TO_ADDR
// x := GetX ( tower ) ;
17044: LD_ADDR_VAR 0 10
17048: PUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: CALL_OW 250
17058: ST_TO_ADDR
// y := GetY ( tower ) ;
17059: LD_ADDR_VAR 0 11
17063: PUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: CALL_OW 251
17073: ST_TO_ADDR
// if not x or not y then
17074: LD_VAR 0 10
17078: NOT
17079: IFTRUE 17088
17081: PUSH
17082: LD_VAR 0 11
17086: NOT
17087: OR
17088: IFFALSE 17092
// exit ;
17090: GO 18149
// weapon := 0 ;
17092: LD_ADDR_VAR 0 18
17096: PUSH
17097: LD_INT 0
17099: ST_TO_ADDR
// fac_list := [ ] ;
17100: LD_ADDR_VAR 0 17
17104: PUSH
17105: EMPTY
17106: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
17107: LD_ADDR_VAR 0 6
17111: PUSH
17112: LD_VAR 0 1
17116: PPUSH
17117: CALL_OW 274
17121: PPUSH
17122: LD_VAR 0 2
17126: PPUSH
17127: LD_INT 0
17129: PPUSH
17130: CALL 14684 0 3
17134: PPUSH
17135: LD_INT 30
17137: PUSH
17138: LD_INT 3
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 72
17149: ST_TO_ADDR
// if not factories then
17150: LD_VAR 0 6
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 18149
// for i in factories do
17159: LD_ADDR_VAR 0 8
17163: PUSH
17164: LD_VAR 0 6
17168: PUSH
17169: FOR_IN
17170: IFFALSE 17195
// fac_list := fac_list union AvailableWeaponList ( i ) ;
17172: LD_ADDR_VAR 0 17
17176: PUSH
17177: LD_VAR 0 17
17181: PUSH
17182: LD_VAR 0 8
17186: PPUSH
17187: CALL_OW 478
17191: UNION
17192: ST_TO_ADDR
17193: GO 17169
17195: POP
17196: POP
// if not fac_list then
17197: LD_VAR 0 17
17201: NOT
17202: IFFALSE 17206
// exit ;
17204: GO 18149
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17206: LD_ADDR_VAR 0 5
17210: PUSH
17211: LD_INT 4
17213: PUSH
17214: LD_INT 5
17216: PUSH
17217: LD_INT 9
17219: PUSH
17220: LD_INT 10
17222: PUSH
17223: LD_INT 6
17225: PUSH
17226: LD_INT 7
17228: PUSH
17229: LD_INT 11
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 27
17243: PUSH
17244: LD_INT 28
17246: PUSH
17247: LD_INT 26
17249: PUSH
17250: LD_INT 30
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 43
17261: PUSH
17262: LD_INT 44
17264: PUSH
17265: LD_INT 46
17267: PUSH
17268: LD_INT 45
17270: PUSH
17271: LD_INT 47
17273: PUSH
17274: LD_INT 49
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: LIST
17289: PUSH
17290: LD_VAR 0 12
17294: ARRAY
17295: ST_TO_ADDR
// list := list isect fac_list ;
17296: LD_ADDR_VAR 0 5
17300: PUSH
17301: LD_VAR 0 5
17305: PUSH
17306: LD_VAR 0 17
17310: ISECT
17311: ST_TO_ADDR
// if not list then
17312: LD_VAR 0 5
17316: NOT
17317: IFFALSE 17321
// exit ;
17319: GO 18149
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
17321: LD_VAR 0 12
17325: PUSH
17326: LD_INT 3
17328: EQUAL
17329: IFFALSE 17341
17331: PUSH
17332: LD_INT 49
17334: PUSH
17335: LD_VAR 0 5
17339: IN
17340: AND
17341: IFFALSE 17361
17343: PUSH
17344: LD_INT 31
17346: PPUSH
17347: LD_VAR 0 16
17351: PPUSH
17352: CALL_OW 321
17356: PUSH
17357: LD_INT 2
17359: EQUAL
17360: AND
17361: IFFALSE 17421
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
17363: LD_INT 22
17365: PUSH
17366: LD_VAR 0 16
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: LD_INT 35
17377: PUSH
17378: LD_INT 49
17380: PUSH
17381: EMPTY
17382: LIST
17383: LIST
17384: PUSH
17385: LD_INT 91
17387: PUSH
17388: LD_VAR 0 1
17392: PUSH
17393: LD_INT 10
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 69
17410: NOT
17411: IFFALSE 17421
// weapon := ru_time_lapser ;
17413: LD_ADDR_VAR 0 18
17417: PUSH
17418: LD_INT 49
17420: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17421: LD_VAR 0 12
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: IN
17436: IFFALSE 17460
17438: PUSH
17439: LD_INT 11
17441: PUSH
17442: LD_VAR 0 5
17446: IN
17447: IFTRUE 17459
17449: PUSH
17450: LD_INT 30
17452: PUSH
17453: LD_VAR 0 5
17457: IN
17458: OR
17459: AND
17460: IFFALSE 17480
17462: PUSH
17463: LD_INT 6
17465: PPUSH
17466: LD_VAR 0 16
17470: PPUSH
17471: CALL_OW 321
17475: PUSH
17476: LD_INT 2
17478: EQUAL
17479: AND
17480: IFFALSE 17647
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17482: LD_INT 22
17484: PUSH
17485: LD_VAR 0 16
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 35
17499: PUSH
17500: LD_INT 11
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 35
17509: PUSH
17510: LD_INT 30
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: EMPTY
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 91
17524: PUSH
17525: LD_VAR 0 1
17529: PUSH
17530: LD_INT 18
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: PPUSH
17543: CALL_OW 69
17547: NOT
17548: IFFALSE 17624
17550: PUSH
17551: LD_INT 22
17553: PUSH
17554: LD_VAR 0 16
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 2
17565: PUSH
17566: LD_INT 30
17568: PUSH
17569: LD_INT 32
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 30
17578: PUSH
17579: LD_INT 33
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: PUSH
17591: LD_INT 91
17593: PUSH
17594: LD_VAR 0 1
17598: PUSH
17599: LD_INT 12
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: PUSH
17620: LD_INT 2
17622: GREATER
17623: AND
17624: IFFALSE 17647
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17626: LD_ADDR_VAR 0 18
17630: PUSH
17631: LD_INT 11
17633: PUSH
17634: LD_INT 30
17636: PUSH
17637: EMPTY
17638: LIST
17639: LIST
17640: PUSH
17641: LD_VAR 0 12
17645: ARRAY
17646: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17647: LD_VAR 0 18
17651: NOT
17652: IFFALSE 17672
17654: PUSH
17655: LD_INT 40
17657: PPUSH
17658: LD_VAR 0 16
17662: PPUSH
17663: CALL_OW 321
17667: PUSH
17668: LD_INT 2
17670: EQUAL
17671: AND
17672: IFFALSE 17708
17674: PUSH
17675: LD_INT 7
17677: PUSH
17678: LD_VAR 0 5
17682: IN
17683: IFTRUE 17695
17685: PUSH
17686: LD_INT 28
17688: PUSH
17689: LD_VAR 0 5
17693: IN
17694: OR
17695: IFTRUE 17707
17697: PUSH
17698: LD_INT 45
17700: PUSH
17701: LD_VAR 0 5
17705: IN
17706: OR
17707: AND
17708: IFFALSE 17962
// begin hex := GetHexInfo ( x , y ) ;
17710: LD_ADDR_VAR 0 4
17714: PUSH
17715: LD_VAR 0 10
17719: PPUSH
17720: LD_VAR 0 11
17724: PPUSH
17725: CALL_OW 546
17729: ST_TO_ADDR
// if hex [ 1 ] then
17730: LD_VAR 0 4
17734: PUSH
17735: LD_INT 1
17737: ARRAY
17738: IFFALSE 17742
// exit ;
17740: GO 18149
// height := hex [ 2 ] ;
17742: LD_ADDR_VAR 0 15
17746: PUSH
17747: LD_VAR 0 4
17751: PUSH
17752: LD_INT 2
17754: ARRAY
17755: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17756: LD_ADDR_VAR 0 14
17760: PUSH
17761: LD_INT 0
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: LD_INT 5
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: ST_TO_ADDR
// for i in tmp do
17779: LD_ADDR_VAR 0 8
17783: PUSH
17784: LD_VAR 0 14
17788: PUSH
17789: FOR_IN
17790: IFFALSE 17960
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17792: LD_ADDR_VAR 0 9
17796: PUSH
17797: LD_VAR 0 10
17801: PPUSH
17802: LD_VAR 0 8
17806: PPUSH
17807: LD_INT 5
17809: PPUSH
17810: CALL_OW 272
17814: PUSH
17815: LD_VAR 0 11
17819: PPUSH
17820: LD_VAR 0 8
17824: PPUSH
17825: LD_INT 5
17827: PPUSH
17828: CALL_OW 273
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17837: LD_VAR 0 9
17841: PUSH
17842: LD_INT 1
17844: ARRAY
17845: PPUSH
17846: LD_VAR 0 9
17850: PUSH
17851: LD_INT 2
17853: ARRAY
17854: PPUSH
17855: CALL_OW 488
17859: IFFALSE 17958
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17861: LD_ADDR_VAR 0 4
17865: PUSH
17866: LD_VAR 0 9
17870: PUSH
17871: LD_INT 1
17873: ARRAY
17874: PPUSH
17875: LD_VAR 0 9
17879: PUSH
17880: LD_INT 2
17882: ARRAY
17883: PPUSH
17884: CALL_OW 546
17888: ST_TO_ADDR
// if hex [ 1 ] then
17889: LD_VAR 0 4
17893: PUSH
17894: LD_INT 1
17896: ARRAY
17897: IFFALSE 17901
// continue ;
17899: GO 17789
// h := hex [ 2 ] ;
17901: LD_ADDR_VAR 0 13
17905: PUSH
17906: LD_VAR 0 4
17910: PUSH
17911: LD_INT 2
17913: ARRAY
17914: ST_TO_ADDR
// if h + 7 < height then
17915: LD_VAR 0 13
17919: PUSH
17920: LD_INT 7
17922: PLUS
17923: PUSH
17924: LD_VAR 0 15
17928: LESS
17929: IFFALSE 17958
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17931: LD_ADDR_VAR 0 18
17935: PUSH
17936: LD_INT 7
17938: PUSH
17939: LD_INT 28
17941: PUSH
17942: LD_INT 45
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: LIST
17949: PUSH
17950: LD_VAR 0 12
17954: ARRAY
17955: ST_TO_ADDR
// break ;
17956: GO 17960
// end ; end ; end ;
17958: GO 17789
17960: POP
17961: POP
// end ; if not weapon then
17962: LD_VAR 0 18
17966: NOT
17967: IFFALSE 18027
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17969: LD_ADDR_VAR 0 5
17973: PUSH
17974: LD_VAR 0 5
17978: PUSH
17979: LD_INT 11
17981: PUSH
17982: LD_INT 30
17984: PUSH
17985: LD_INT 49
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: LIST
17992: DIFF
17993: ST_TO_ADDR
// if not list then
17994: LD_VAR 0 5
17998: NOT
17999: IFFALSE 18003
// exit ;
18001: GO 18149
// weapon := list [ rand ( 1 , list ) ] ;
18003: LD_ADDR_VAR 0 18
18007: PUSH
18008: LD_VAR 0 5
18012: PUSH
18013: LD_INT 1
18015: PPUSH
18016: LD_VAR 0 5
18020: PPUSH
18021: CALL_OW 12
18025: ARRAY
18026: ST_TO_ADDR
// end ; if weapon then
18027: LD_VAR 0 18
18031: IFFALSE 18149
// begin tmp := CostOfWeapon ( weapon ) ;
18033: LD_ADDR_VAR 0 14
18037: PUSH
18038: LD_VAR 0 18
18042: PPUSH
18043: CALL_OW 451
18047: ST_TO_ADDR
// j := GetBase ( tower ) ;
18048: LD_ADDR_VAR 0 9
18052: PUSH
18053: LD_VAR 0 1
18057: PPUSH
18058: CALL_OW 274
18062: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
18063: LD_VAR 0 9
18067: PPUSH
18068: LD_INT 1
18070: PPUSH
18071: CALL_OW 275
18075: PUSH
18076: LD_VAR 0 14
18080: PUSH
18081: LD_INT 1
18083: ARRAY
18084: GREATEREQUAL
18085: IFFALSE 18111
18087: PUSH
18088: LD_VAR 0 9
18092: PPUSH
18093: LD_INT 2
18095: PPUSH
18096: CALL_OW 275
18100: PUSH
18101: LD_VAR 0 14
18105: PUSH
18106: LD_INT 2
18108: ARRAY
18109: GREATEREQUAL
18110: AND
18111: IFFALSE 18137
18113: PUSH
18114: LD_VAR 0 9
18118: PPUSH
18119: LD_INT 3
18121: PPUSH
18122: CALL_OW 275
18126: PUSH
18127: LD_VAR 0 14
18131: PUSH
18132: LD_INT 3
18134: ARRAY
18135: GREATEREQUAL
18136: AND
18137: IFFALSE 18149
// result := weapon ;
18139: LD_ADDR_VAR 0 3
18143: PUSH
18144: LD_VAR 0 18
18148: ST_TO_ADDR
// end ; end ;
18149: LD_VAR 0 3
18153: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
18154: LD_INT 0
18156: PPUSH
18157: PPUSH
// result := true ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_INT 1
18165: ST_TO_ADDR
// if array1 = array2 then
18166: LD_VAR 0 1
18170: PUSH
18171: LD_VAR 0 2
18175: EQUAL
18176: IFFALSE 18236
// begin for i = 1 to array1 do
18178: LD_ADDR_VAR 0 4
18182: PUSH
18183: DOUBLE
18184: LD_INT 1
18186: DEC
18187: ST_TO_ADDR
18188: LD_VAR 0 1
18192: PUSH
18193: FOR_TO
18194: IFFALSE 18232
// if array1 [ i ] <> array2 [ i ] then
18196: LD_VAR 0 1
18200: PUSH
18201: LD_VAR 0 4
18205: ARRAY
18206: PUSH
18207: LD_VAR 0 2
18211: PUSH
18212: LD_VAR 0 4
18216: ARRAY
18217: NONEQUAL
18218: IFFALSE 18230
// begin result := false ;
18220: LD_ADDR_VAR 0 3
18224: PUSH
18225: LD_INT 0
18227: ST_TO_ADDR
// break ;
18228: GO 18232
// end ;
18230: GO 18193
18232: POP
18233: POP
// end else
18234: GO 18244
// result := false ;
18236: LD_ADDR_VAR 0 3
18240: PUSH
18241: LD_INT 0
18243: ST_TO_ADDR
// end ;
18244: LD_VAR 0 3
18248: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
18249: LD_INT 0
18251: PPUSH
18252: PPUSH
// if not array1 or not array2 then
18253: LD_VAR 0 1
18257: NOT
18258: IFTRUE 18267
18260: PUSH
18261: LD_VAR 0 2
18265: NOT
18266: OR
18267: IFFALSE 18271
// exit ;
18269: GO 18335
// result := true ;
18271: LD_ADDR_VAR 0 3
18275: PUSH
18276: LD_INT 1
18278: ST_TO_ADDR
// for i = 1 to array1 do
18279: LD_ADDR_VAR 0 4
18283: PUSH
18284: DOUBLE
18285: LD_INT 1
18287: DEC
18288: ST_TO_ADDR
18289: LD_VAR 0 1
18293: PUSH
18294: FOR_TO
18295: IFFALSE 18333
// if array1 [ i ] <> array2 [ i ] then
18297: LD_VAR 0 1
18301: PUSH
18302: LD_VAR 0 4
18306: ARRAY
18307: PUSH
18308: LD_VAR 0 2
18312: PUSH
18313: LD_VAR 0 4
18317: ARRAY
18318: NONEQUAL
18319: IFFALSE 18331
// begin result := false ;
18321: LD_ADDR_VAR 0 3
18325: PUSH
18326: LD_INT 0
18328: ST_TO_ADDR
// break ;
18329: GO 18333
// end ;
18331: GO 18294
18333: POP
18334: POP
// end ;
18335: LD_VAR 0 3
18339: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
18340: LD_INT 0
18342: PPUSH
18343: PPUSH
18344: PPUSH
// pom := GetBase ( fac ) ;
18345: LD_ADDR_VAR 0 5
18349: PUSH
18350: LD_VAR 0 1
18354: PPUSH
18355: CALL_OW 274
18359: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
18360: LD_ADDR_VAR 0 4
18364: PUSH
18365: LD_VAR 0 2
18369: PUSH
18370: LD_INT 1
18372: ARRAY
18373: PPUSH
18374: LD_VAR 0 2
18378: PUSH
18379: LD_INT 2
18381: ARRAY
18382: PPUSH
18383: LD_VAR 0 2
18387: PUSH
18388: LD_INT 3
18390: ARRAY
18391: PPUSH
18392: LD_VAR 0 2
18396: PUSH
18397: LD_INT 4
18399: ARRAY
18400: PPUSH
18401: CALL_OW 449
18405: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18406: LD_ADDR_VAR 0 3
18410: PUSH
18411: LD_VAR 0 5
18415: PPUSH
18416: LD_INT 1
18418: PPUSH
18419: CALL_OW 275
18423: PUSH
18424: LD_VAR 0 4
18428: PUSH
18429: LD_INT 1
18431: ARRAY
18432: GREATEREQUAL
18433: IFFALSE 18459
18435: PUSH
18436: LD_VAR 0 5
18440: PPUSH
18441: LD_INT 2
18443: PPUSH
18444: CALL_OW 275
18448: PUSH
18449: LD_VAR 0 4
18453: PUSH
18454: LD_INT 2
18456: ARRAY
18457: GREATEREQUAL
18458: AND
18459: IFFALSE 18485
18461: PUSH
18462: LD_VAR 0 5
18466: PPUSH
18467: LD_INT 3
18469: PPUSH
18470: CALL_OW 275
18474: PUSH
18475: LD_VAR 0 4
18479: PUSH
18480: LD_INT 3
18482: ARRAY
18483: GREATEREQUAL
18484: AND
18485: ST_TO_ADDR
// end ;
18486: LD_VAR 0 3
18490: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18491: LD_INT 0
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
// pom := GetBase ( building ) ;
18497: LD_ADDR_VAR 0 3
18501: PUSH
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 274
18511: ST_TO_ADDR
// if not pom then
18512: LD_VAR 0 3
18516: NOT
18517: IFFALSE 18521
// exit ;
18519: GO 18695
// btype := GetBType ( building ) ;
18521: LD_ADDR_VAR 0 5
18525: PUSH
18526: LD_VAR 0 1
18530: PPUSH
18531: CALL_OW 266
18535: ST_TO_ADDR
// if btype = b_armoury then
18536: LD_VAR 0 5
18540: PUSH
18541: LD_INT 4
18543: EQUAL
18544: IFFALSE 18554
// btype := b_barracks ;
18546: LD_ADDR_VAR 0 5
18550: PUSH
18551: LD_INT 5
18553: ST_TO_ADDR
// if btype = b_depot then
18554: LD_VAR 0 5
18558: PUSH
18559: LD_INT 0
18561: EQUAL
18562: IFFALSE 18572
// btype := b_warehouse ;
18564: LD_ADDR_VAR 0 5
18568: PUSH
18569: LD_INT 1
18571: ST_TO_ADDR
// if btype = b_workshop then
18572: LD_VAR 0 5
18576: PUSH
18577: LD_INT 2
18579: EQUAL
18580: IFFALSE 18590
// btype := b_factory ;
18582: LD_ADDR_VAR 0 5
18586: PUSH
18587: LD_INT 3
18589: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18590: LD_ADDR_VAR 0 4
18594: PUSH
18595: LD_VAR 0 5
18599: PPUSH
18600: LD_VAR 0 1
18604: PPUSH
18605: CALL_OW 248
18609: PPUSH
18610: CALL_OW 450
18614: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_VAR 0 3
18624: PPUSH
18625: LD_INT 1
18627: PPUSH
18628: CALL_OW 275
18632: PUSH
18633: LD_VAR 0 4
18637: PUSH
18638: LD_INT 1
18640: ARRAY
18641: GREATEREQUAL
18642: IFFALSE 18668
18644: PUSH
18645: LD_VAR 0 3
18649: PPUSH
18650: LD_INT 2
18652: PPUSH
18653: CALL_OW 275
18657: PUSH
18658: LD_VAR 0 4
18662: PUSH
18663: LD_INT 2
18665: ARRAY
18666: GREATEREQUAL
18667: AND
18668: IFFALSE 18694
18670: PUSH
18671: LD_VAR 0 3
18675: PPUSH
18676: LD_INT 3
18678: PPUSH
18679: CALL_OW 275
18683: PUSH
18684: LD_VAR 0 4
18688: PUSH
18689: LD_INT 3
18691: ARRAY
18692: GREATEREQUAL
18693: AND
18694: ST_TO_ADDR
// end ;
18695: LD_VAR 0 2
18699: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18700: LD_INT 0
18702: PPUSH
18703: PPUSH
18704: PPUSH
// pom := GetBase ( building ) ;
18705: LD_ADDR_VAR 0 4
18709: PUSH
18710: LD_VAR 0 1
18714: PPUSH
18715: CALL_OW 274
18719: ST_TO_ADDR
// if not pom then
18720: LD_VAR 0 4
18724: NOT
18725: IFFALSE 18729
// exit ;
18727: GO 18834
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18729: LD_ADDR_VAR 0 5
18733: PUSH
18734: LD_VAR 0 2
18738: PPUSH
18739: LD_VAR 0 1
18743: PPUSH
18744: CALL_OW 248
18748: PPUSH
18749: CALL_OW 450
18753: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18754: LD_ADDR_VAR 0 3
18758: PUSH
18759: LD_VAR 0 4
18763: PPUSH
18764: LD_INT 1
18766: PPUSH
18767: CALL_OW 275
18771: PUSH
18772: LD_VAR 0 5
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: GREATEREQUAL
18781: IFFALSE 18807
18783: PUSH
18784: LD_VAR 0 4
18788: PPUSH
18789: LD_INT 2
18791: PPUSH
18792: CALL_OW 275
18796: PUSH
18797: LD_VAR 0 5
18801: PUSH
18802: LD_INT 2
18804: ARRAY
18805: GREATEREQUAL
18806: AND
18807: IFFALSE 18833
18809: PUSH
18810: LD_VAR 0 4
18814: PPUSH
18815: LD_INT 3
18817: PPUSH
18818: CALL_OW 275
18822: PUSH
18823: LD_VAR 0 5
18827: PUSH
18828: LD_INT 3
18830: ARRAY
18831: GREATEREQUAL
18832: AND
18833: ST_TO_ADDR
// end ;
18834: LD_VAR 0 3
18838: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18839: LD_INT 0
18841: PPUSH
18842: PPUSH
18843: PPUSH
18844: PPUSH
18845: PPUSH
18846: PPUSH
18847: PPUSH
18848: PPUSH
18849: PPUSH
18850: PPUSH
18851: PPUSH
// result := false ;
18852: LD_ADDR_VAR 0 8
18856: PUSH
18857: LD_INT 0
18859: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18860: LD_VAR 0 5
18864: NOT
18865: IFTRUE 18874
18867: PUSH
18868: LD_VAR 0 1
18872: NOT
18873: OR
18874: IFTRUE 18883
18876: PUSH
18877: LD_VAR 0 2
18881: NOT
18882: OR
18883: IFTRUE 18892
18885: PUSH
18886: LD_VAR 0 3
18890: NOT
18891: OR
18892: IFFALSE 18896
// exit ;
18894: GO 19722
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18896: LD_ADDR_VAR 0 14
18900: PUSH
18901: LD_VAR 0 1
18905: PPUSH
18906: LD_VAR 0 2
18910: PPUSH
18911: LD_VAR 0 3
18915: PPUSH
18916: LD_VAR 0 4
18920: PPUSH
18921: LD_VAR 0 5
18925: PUSH
18926: LD_INT 1
18928: ARRAY
18929: PPUSH
18930: CALL_OW 248
18934: PPUSH
18935: LD_INT 0
18937: PPUSH
18938: CALL 21003 0 6
18942: ST_TO_ADDR
// if not hexes then
18943: LD_VAR 0 14
18947: NOT
18948: IFFALSE 18952
// exit ;
18950: GO 19722
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18952: LD_ADDR_VAR 0 17
18956: PUSH
18957: LD_VAR 0 5
18961: PPUSH
18962: LD_INT 22
18964: PUSH
18965: LD_VAR 0 13
18969: PPUSH
18970: CALL_OW 255
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: LD_INT 30
18984: PUSH
18985: LD_INT 0
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 30
18994: PUSH
18995: LD_INT 1
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 72
19015: ST_TO_ADDR
// for i = 1 to hexes do
19016: LD_ADDR_VAR 0 9
19020: PUSH
19021: DOUBLE
19022: LD_INT 1
19024: DEC
19025: ST_TO_ADDR
19026: LD_VAR 0 14
19030: PUSH
19031: FOR_TO
19032: IFFALSE 19720
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19034: LD_ADDR_VAR 0 13
19038: PUSH
19039: LD_VAR 0 14
19043: PUSH
19044: LD_VAR 0 9
19048: ARRAY
19049: PUSH
19050: LD_INT 1
19052: ARRAY
19053: PPUSH
19054: LD_VAR 0 14
19058: PUSH
19059: LD_VAR 0 9
19063: ARRAY
19064: PUSH
19065: LD_INT 2
19067: ARRAY
19068: PPUSH
19069: CALL_OW 428
19073: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
19074: LD_VAR 0 14
19078: PUSH
19079: LD_VAR 0 9
19083: ARRAY
19084: PUSH
19085: LD_INT 1
19087: ARRAY
19088: PPUSH
19089: LD_VAR 0 14
19093: PUSH
19094: LD_VAR 0 9
19098: ARRAY
19099: PUSH
19100: LD_INT 2
19102: ARRAY
19103: PPUSH
19104: CALL_OW 351
19108: IFTRUE 19147
19110: PUSH
19111: LD_VAR 0 14
19115: PUSH
19116: LD_VAR 0 9
19120: ARRAY
19121: PUSH
19122: LD_INT 1
19124: ARRAY
19125: PPUSH
19126: LD_VAR 0 14
19130: PUSH
19131: LD_VAR 0 9
19135: ARRAY
19136: PUSH
19137: LD_INT 2
19139: ARRAY
19140: PPUSH
19141: CALL_OW 488
19145: NOT
19146: OR
19147: IFTRUE 19164
19149: PUSH
19150: LD_VAR 0 13
19154: PPUSH
19155: CALL_OW 247
19159: PUSH
19160: LD_INT 3
19162: EQUAL
19163: OR
19164: IFFALSE 19170
// exit ;
19166: POP
19167: POP
19168: GO 19722
// if not tmp then
19170: LD_VAR 0 13
19174: NOT
19175: IFFALSE 19179
// continue ;
19177: GO 19031
// result := true ;
19179: LD_ADDR_VAR 0 8
19183: PUSH
19184: LD_INT 1
19186: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
19187: LD_VAR 0 6
19191: IFFALSE 19208
19193: PUSH
19194: LD_VAR 0 13
19198: PPUSH
19199: CALL_OW 247
19203: PUSH
19204: LD_INT 2
19206: EQUAL
19207: AND
19208: IFFALSE 19225
19210: PUSH
19211: LD_VAR 0 13
19215: PPUSH
19216: CALL_OW 263
19220: PUSH
19221: LD_INT 1
19223: EQUAL
19224: AND
19225: IFFALSE 19389
// begin if IsDrivenBy ( tmp ) then
19227: LD_VAR 0 13
19231: PPUSH
19232: CALL_OW 311
19236: IFFALSE 19240
// continue ;
19238: GO 19031
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19240: LD_VAR 0 6
19244: PPUSH
19245: LD_INT 3
19247: PUSH
19248: LD_INT 60
19250: PUSH
19251: EMPTY
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 3
19260: PUSH
19261: LD_INT 55
19263: PUSH
19264: EMPTY
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PPUSH
19275: CALL_OW 72
19279: IFFALSE 19387
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
19281: LD_ADDR_VAR 0 18
19285: PUSH
19286: LD_VAR 0 6
19290: PPUSH
19291: LD_INT 3
19293: PUSH
19294: LD_INT 60
19296: PUSH
19297: EMPTY
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 3
19306: PUSH
19307: LD_INT 55
19309: PUSH
19310: EMPTY
19311: LIST
19312: PUSH
19313: EMPTY
19314: LIST
19315: LIST
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PPUSH
19321: CALL_OW 72
19325: PUSH
19326: LD_INT 1
19328: ARRAY
19329: ST_TO_ADDR
// if IsInUnit ( driver ) then
19330: LD_VAR 0 18
19334: PPUSH
19335: CALL_OW 310
19339: IFFALSE 19350
// ComExit ( driver ) ;
19341: LD_VAR 0 18
19345: PPUSH
19346: CALL 44993 0 1
// AddComEnterUnit ( driver , tmp ) ;
19350: LD_VAR 0 18
19354: PPUSH
19355: LD_VAR 0 13
19359: PPUSH
19360: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
19364: LD_VAR 0 18
19368: PPUSH
19369: LD_VAR 0 7
19373: PPUSH
19374: CALL_OW 173
// AddComExitVehicle ( driver ) ;
19378: LD_VAR 0 18
19382: PPUSH
19383: CALL_OW 181
// end ; continue ;
19387: GO 19031
// end ; if not cleaners or not tmp in cleaners then
19389: LD_VAR 0 6
19393: NOT
19394: IFTRUE 19409
19396: PUSH
19397: LD_VAR 0 13
19401: PUSH
19402: LD_VAR 0 6
19406: IN
19407: NOT
19408: OR
19409: IFFALSE 19718
// begin if dep then
19411: LD_VAR 0 17
19415: IFFALSE 19551
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
19417: LD_ADDR_VAR 0 16
19421: PUSH
19422: LD_VAR 0 17
19426: PUSH
19427: LD_INT 1
19429: ARRAY
19430: PPUSH
19431: CALL_OW 250
19435: PPUSH
19436: LD_VAR 0 17
19440: PUSH
19441: LD_INT 1
19443: ARRAY
19444: PPUSH
19445: CALL_OW 254
19449: PPUSH
19450: LD_INT 5
19452: PPUSH
19453: CALL_OW 272
19457: PUSH
19458: LD_VAR 0 17
19462: PUSH
19463: LD_INT 1
19465: ARRAY
19466: PPUSH
19467: CALL_OW 251
19471: PPUSH
19472: LD_VAR 0 17
19476: PUSH
19477: LD_INT 1
19479: ARRAY
19480: PPUSH
19481: CALL_OW 254
19485: PPUSH
19486: LD_INT 5
19488: PPUSH
19489: CALL_OW 273
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19498: LD_VAR 0 16
19502: PUSH
19503: LD_INT 1
19505: ARRAY
19506: PPUSH
19507: LD_VAR 0 16
19511: PUSH
19512: LD_INT 2
19514: ARRAY
19515: PPUSH
19516: CALL_OW 488
19520: IFFALSE 19551
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19522: LD_VAR 0 13
19526: PPUSH
19527: LD_VAR 0 16
19531: PUSH
19532: LD_INT 1
19534: ARRAY
19535: PPUSH
19536: LD_VAR 0 16
19540: PUSH
19541: LD_INT 2
19543: ARRAY
19544: PPUSH
19545: CALL_OW 111
// continue ;
19549: GO 19031
// end ; end ; r := GetDir ( tmp ) ;
19551: LD_ADDR_VAR 0 15
19555: PUSH
19556: LD_VAR 0 13
19560: PPUSH
19561: CALL_OW 254
19565: ST_TO_ADDR
// if r = 5 then
19566: LD_VAR 0 15
19570: PUSH
19571: LD_INT 5
19573: EQUAL
19574: IFFALSE 19584
// r := 0 ;
19576: LD_ADDR_VAR 0 15
19580: PUSH
19581: LD_INT 0
19583: ST_TO_ADDR
// for j = r to 5 do
19584: LD_ADDR_VAR 0 10
19588: PUSH
19589: DOUBLE
19590: LD_VAR 0 15
19594: DEC
19595: ST_TO_ADDR
19596: LD_INT 5
19598: PUSH
19599: FOR_TO
19600: IFFALSE 19716
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19602: LD_ADDR_VAR 0 11
19606: PUSH
19607: LD_VAR 0 13
19611: PPUSH
19612: CALL_OW 250
19616: PPUSH
19617: LD_VAR 0 10
19621: PPUSH
19622: LD_INT 2
19624: PPUSH
19625: CALL_OW 272
19629: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19630: LD_ADDR_VAR 0 12
19634: PUSH
19635: LD_VAR 0 13
19639: PPUSH
19640: CALL_OW 251
19644: PPUSH
19645: LD_VAR 0 10
19649: PPUSH
19650: LD_INT 2
19652: PPUSH
19653: CALL_OW 273
19657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19658: LD_VAR 0 11
19662: PPUSH
19663: LD_VAR 0 12
19667: PPUSH
19668: CALL_OW 488
19672: IFFALSE 19691
19674: PUSH
19675: LD_VAR 0 11
19679: PPUSH
19680: LD_VAR 0 12
19684: PPUSH
19685: CALL_OW 428
19689: NOT
19690: AND
19691: IFFALSE 19714
// begin ComMoveXY ( tmp , _x , _y ) ;
19693: LD_VAR 0 13
19697: PPUSH
19698: LD_VAR 0 11
19702: PPUSH
19703: LD_VAR 0 12
19707: PPUSH
19708: CALL_OW 111
// break ;
19712: GO 19716
// end ; end ;
19714: GO 19599
19716: POP
19717: POP
// end ; end ;
19718: GO 19031
19720: POP
19721: POP
// end ;
19722: LD_VAR 0 8
19726: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19727: LD_INT 0
19729: PPUSH
// result := true ;
19730: LD_ADDR_VAR 0 3
19734: PUSH
19735: LD_INT 1
19737: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19738: LD_VAR 0 2
19742: PUSH
19743: LD_INT 24
19745: DOUBLE
19746: EQUAL
19747: IFTRUE 19757
19749: LD_INT 33
19751: DOUBLE
19752: EQUAL
19753: IFTRUE 19757
19755: GO 19782
19757: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19758: LD_ADDR_VAR 0 3
19762: PUSH
19763: LD_INT 32
19765: PPUSH
19766: LD_VAR 0 1
19770: PPUSH
19771: CALL_OW 321
19775: PUSH
19776: LD_INT 2
19778: EQUAL
19779: ST_TO_ADDR
19780: GO 20098
19782: LD_INT 20
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19815
19790: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19791: LD_ADDR_VAR 0 3
19795: PUSH
19796: LD_INT 6
19798: PPUSH
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 321
19808: PUSH
19809: LD_INT 2
19811: EQUAL
19812: ST_TO_ADDR
19813: GO 20098
19815: LD_INT 22
19817: DOUBLE
19818: EQUAL
19819: IFTRUE 19829
19821: LD_INT 36
19823: DOUBLE
19824: EQUAL
19825: IFTRUE 19829
19827: GO 19854
19829: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19830: LD_ADDR_VAR 0 3
19834: PUSH
19835: LD_INT 15
19837: PPUSH
19838: LD_VAR 0 1
19842: PPUSH
19843: CALL_OW 321
19847: PUSH
19848: LD_INT 2
19850: EQUAL
19851: ST_TO_ADDR
19852: GO 20098
19854: LD_INT 30
19856: DOUBLE
19857: EQUAL
19858: IFTRUE 19862
19860: GO 19887
19862: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19863: LD_ADDR_VAR 0 3
19867: PUSH
19868: LD_INT 20
19870: PPUSH
19871: LD_VAR 0 1
19875: PPUSH
19876: CALL_OW 321
19880: PUSH
19881: LD_INT 2
19883: EQUAL
19884: ST_TO_ADDR
19885: GO 20098
19887: LD_INT 28
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19901
19893: LD_INT 21
19895: DOUBLE
19896: EQUAL
19897: IFTRUE 19901
19899: GO 19926
19901: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19902: LD_ADDR_VAR 0 3
19906: PUSH
19907: LD_INT 21
19909: PPUSH
19910: LD_VAR 0 1
19914: PPUSH
19915: CALL_OW 321
19919: PUSH
19920: LD_INT 2
19922: EQUAL
19923: ST_TO_ADDR
19924: GO 20098
19926: LD_INT 16
19928: DOUBLE
19929: EQUAL
19930: IFTRUE 19934
19932: GO 19959
19934: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19935: LD_ADDR_VAR 0 3
19939: PUSH
19940: LD_INT 84
19942: PPUSH
19943: LD_VAR 0 1
19947: PPUSH
19948: CALL_OW 321
19952: PUSH
19953: LD_INT 2
19955: EQUAL
19956: ST_TO_ADDR
19957: GO 20098
19959: LD_INT 19
19961: DOUBLE
19962: EQUAL
19963: IFTRUE 19973
19965: LD_INT 23
19967: DOUBLE
19968: EQUAL
19969: IFTRUE 19973
19971: GO 19998
19973: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19974: LD_ADDR_VAR 0 3
19978: PUSH
19979: LD_INT 83
19981: PPUSH
19982: LD_VAR 0 1
19986: PPUSH
19987: CALL_OW 321
19991: PUSH
19992: LD_INT 2
19994: EQUAL
19995: ST_TO_ADDR
19996: GO 20098
19998: LD_INT 17
20000: DOUBLE
20001: EQUAL
20002: IFTRUE 20006
20004: GO 20031
20006: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20007: LD_ADDR_VAR 0 3
20011: PUSH
20012: LD_INT 39
20014: PPUSH
20015: LD_VAR 0 1
20019: PPUSH
20020: CALL_OW 321
20024: PUSH
20025: LD_INT 2
20027: EQUAL
20028: ST_TO_ADDR
20029: GO 20098
20031: LD_INT 18
20033: DOUBLE
20034: EQUAL
20035: IFTRUE 20039
20037: GO 20064
20039: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20040: LD_ADDR_VAR 0 3
20044: PUSH
20045: LD_INT 40
20047: PPUSH
20048: LD_VAR 0 1
20052: PPUSH
20053: CALL_OW 321
20057: PUSH
20058: LD_INT 2
20060: EQUAL
20061: ST_TO_ADDR
20062: GO 20098
20064: LD_INT 27
20066: DOUBLE
20067: EQUAL
20068: IFTRUE 20072
20070: GO 20097
20072: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20073: LD_ADDR_VAR 0 3
20077: PUSH
20078: LD_INT 35
20080: PPUSH
20081: LD_VAR 0 1
20085: PPUSH
20086: CALL_OW 321
20090: PUSH
20091: LD_INT 2
20093: EQUAL
20094: ST_TO_ADDR
20095: GO 20098
20097: POP
// end ;
20098: LD_VAR 0 3
20102: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
20103: LD_INT 0
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
20109: PPUSH
20110: PPUSH
20111: PPUSH
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
// result := false ;
20116: LD_ADDR_VAR 0 6
20120: PUSH
20121: LD_INT 0
20123: ST_TO_ADDR
// if btype = b_depot then
20124: LD_VAR 0 2
20128: PUSH
20129: LD_INT 0
20131: EQUAL
20132: IFFALSE 20144
// begin result := true ;
20134: LD_ADDR_VAR 0 6
20138: PUSH
20139: LD_INT 1
20141: ST_TO_ADDR
// exit ;
20142: GO 20998
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20144: LD_VAR 0 1
20148: NOT
20149: IFTRUE 20174
20151: PUSH
20152: LD_VAR 0 1
20156: PPUSH
20157: CALL_OW 266
20161: PUSH
20162: LD_INT 0
20164: PUSH
20165: LD_INT 1
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: IN
20172: NOT
20173: OR
20174: IFTRUE 20183
20176: PUSH
20177: LD_VAR 0 2
20181: NOT
20182: OR
20183: IFTRUE 20219
20185: PUSH
20186: LD_VAR 0 5
20190: PUSH
20191: LD_INT 0
20193: PUSH
20194: LD_INT 1
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 3
20202: PUSH
20203: LD_INT 4
20205: PUSH
20206: LD_INT 5
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: IN
20217: NOT
20218: OR
20219: IFTRUE 20238
20221: PUSH
20222: LD_VAR 0 3
20226: PPUSH
20227: LD_VAR 0 4
20231: PPUSH
20232: CALL_OW 488
20236: NOT
20237: OR
20238: IFFALSE 20242
// exit ;
20240: GO 20998
// side := GetSide ( depot ) ;
20242: LD_ADDR_VAR 0 9
20246: PUSH
20247: LD_VAR 0 1
20251: PPUSH
20252: CALL_OW 255
20256: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20257: LD_VAR 0 9
20261: PPUSH
20262: LD_VAR 0 2
20266: PPUSH
20267: CALL 19727 0 2
20271: NOT
20272: IFFALSE 20276
// exit ;
20274: GO 20998
// pom := GetBase ( depot ) ;
20276: LD_ADDR_VAR 0 10
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 274
20290: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20291: LD_ADDR_VAR 0 11
20295: PUSH
20296: LD_VAR 0 2
20300: PPUSH
20301: LD_VAR 0 1
20305: PPUSH
20306: CALL_OW 248
20310: PPUSH
20311: CALL_OW 450
20315: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20316: LD_VAR 0 10
20320: PPUSH
20321: LD_INT 1
20323: PPUSH
20324: CALL_OW 275
20328: PUSH
20329: LD_VAR 0 11
20333: PUSH
20334: LD_INT 1
20336: ARRAY
20337: GREATEREQUAL
20338: IFFALSE 20364
20340: PUSH
20341: LD_VAR 0 10
20345: PPUSH
20346: LD_INT 2
20348: PPUSH
20349: CALL_OW 275
20353: PUSH
20354: LD_VAR 0 11
20358: PUSH
20359: LD_INT 2
20361: ARRAY
20362: GREATEREQUAL
20363: AND
20364: IFFALSE 20390
20366: PUSH
20367: LD_VAR 0 10
20371: PPUSH
20372: LD_INT 3
20374: PPUSH
20375: CALL_OW 275
20379: PUSH
20380: LD_VAR 0 11
20384: PUSH
20385: LD_INT 3
20387: ARRAY
20388: GREATEREQUAL
20389: AND
20390: NOT
20391: IFFALSE 20395
// exit ;
20393: GO 20998
// if GetBType ( depot ) = b_depot then
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 266
20404: PUSH
20405: LD_INT 0
20407: EQUAL
20408: IFFALSE 20420
// dist := 28 else
20410: LD_ADDR_VAR 0 14
20414: PUSH
20415: LD_INT 28
20417: ST_TO_ADDR
20418: GO 20428
// dist := 36 ;
20420: LD_ADDR_VAR 0 14
20424: PUSH
20425: LD_INT 36
20427: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20428: LD_VAR 0 1
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: LD_VAR 0 4
20442: PPUSH
20443: CALL_OW 297
20447: PUSH
20448: LD_VAR 0 14
20452: GREATER
20453: IFFALSE 20457
// exit ;
20455: GO 20998
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20457: LD_ADDR_VAR 0 12
20461: PUSH
20462: LD_VAR 0 2
20466: PPUSH
20467: LD_VAR 0 3
20471: PPUSH
20472: LD_VAR 0 4
20476: PPUSH
20477: LD_VAR 0 5
20481: PPUSH
20482: LD_VAR 0 1
20486: PPUSH
20487: CALL_OW 248
20491: PPUSH
20492: LD_INT 0
20494: PPUSH
20495: CALL 21003 0 6
20499: ST_TO_ADDR
// if not hexes then
20500: LD_VAR 0 12
20504: NOT
20505: IFFALSE 20509
// exit ;
20507: GO 20998
// hex := GetHexInfo ( x , y ) ;
20509: LD_ADDR_VAR 0 15
20513: PUSH
20514: LD_VAR 0 3
20518: PPUSH
20519: LD_VAR 0 4
20523: PPUSH
20524: CALL_OW 546
20528: ST_TO_ADDR
// if hex [ 1 ] then
20529: LD_VAR 0 15
20533: PUSH
20534: LD_INT 1
20536: ARRAY
20537: IFFALSE 20541
// exit ;
20539: GO 20998
// height := hex [ 2 ] ;
20541: LD_ADDR_VAR 0 13
20545: PUSH
20546: LD_VAR 0 15
20550: PUSH
20551: LD_INT 2
20553: ARRAY
20554: ST_TO_ADDR
// for i = 1 to hexes do
20555: LD_ADDR_VAR 0 7
20559: PUSH
20560: DOUBLE
20561: LD_INT 1
20563: DEC
20564: ST_TO_ADDR
20565: LD_VAR 0 12
20569: PUSH
20570: FOR_TO
20571: IFFALSE 20915
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20573: LD_VAR 0 12
20577: PUSH
20578: LD_VAR 0 7
20582: ARRAY
20583: PUSH
20584: LD_INT 1
20586: ARRAY
20587: PPUSH
20588: LD_VAR 0 12
20592: PUSH
20593: LD_VAR 0 7
20597: ARRAY
20598: PUSH
20599: LD_INT 2
20601: ARRAY
20602: PPUSH
20603: CALL_OW 488
20607: NOT
20608: IFTRUE 20650
20610: PUSH
20611: LD_VAR 0 12
20615: PUSH
20616: LD_VAR 0 7
20620: ARRAY
20621: PUSH
20622: LD_INT 1
20624: ARRAY
20625: PPUSH
20626: LD_VAR 0 12
20630: PUSH
20631: LD_VAR 0 7
20635: ARRAY
20636: PUSH
20637: LD_INT 2
20639: ARRAY
20640: PPUSH
20641: CALL_OW 428
20645: PUSH
20646: LD_INT 0
20648: GREATER
20649: OR
20650: IFTRUE 20688
20652: PUSH
20653: LD_VAR 0 12
20657: PUSH
20658: LD_VAR 0 7
20662: ARRAY
20663: PUSH
20664: LD_INT 1
20666: ARRAY
20667: PPUSH
20668: LD_VAR 0 12
20672: PUSH
20673: LD_VAR 0 7
20677: ARRAY
20678: PUSH
20679: LD_INT 2
20681: ARRAY
20682: PPUSH
20683: CALL_OW 351
20687: OR
20688: IFFALSE 20694
// exit ;
20690: POP
20691: POP
20692: GO 20998
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20694: LD_ADDR_VAR 0 8
20698: PUSH
20699: LD_VAR 0 12
20703: PUSH
20704: LD_VAR 0 7
20708: ARRAY
20709: PUSH
20710: LD_INT 1
20712: ARRAY
20713: PPUSH
20714: LD_VAR 0 12
20718: PUSH
20719: LD_VAR 0 7
20723: ARRAY
20724: PUSH
20725: LD_INT 2
20727: ARRAY
20728: PPUSH
20729: CALL_OW 546
20733: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20734: LD_VAR 0 8
20738: PUSH
20739: LD_INT 1
20741: ARRAY
20742: IFTRUE 20764
20744: PUSH
20745: LD_VAR 0 8
20749: PUSH
20750: LD_INT 2
20752: ARRAY
20753: PUSH
20754: LD_VAR 0 13
20758: PUSH
20759: LD_INT 2
20761: PLUS
20762: GREATER
20763: OR
20764: IFTRUE 20786
20766: PUSH
20767: LD_VAR 0 8
20771: PUSH
20772: LD_INT 2
20774: ARRAY
20775: PUSH
20776: LD_VAR 0 13
20780: PUSH
20781: LD_INT 2
20783: MINUS
20784: LESS
20785: OR
20786: IFTRUE 20854
20788: PUSH
20789: LD_VAR 0 8
20793: PUSH
20794: LD_INT 3
20796: ARRAY
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 8
20803: PUSH
20804: LD_INT 9
20806: PUSH
20807: LD_INT 10
20809: PUSH
20810: LD_INT 11
20812: PUSH
20813: LD_INT 12
20815: PUSH
20816: LD_INT 13
20818: PUSH
20819: LD_INT 16
20821: PUSH
20822: LD_INT 17
20824: PUSH
20825: LD_INT 18
20827: PUSH
20828: LD_INT 19
20830: PUSH
20831: LD_INT 20
20833: PUSH
20834: LD_INT 21
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: LIST
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: IN
20852: NOT
20853: OR
20854: IFTRUE 20867
20856: PUSH
20857: LD_VAR 0 8
20861: PUSH
20862: LD_INT 5
20864: ARRAY
20865: NOT
20866: OR
20867: IFTRUE 20907
20869: PUSH
20870: LD_VAR 0 8
20874: PUSH
20875: LD_INT 6
20877: ARRAY
20878: PUSH
20879: LD_INT 1
20881: PUSH
20882: LD_INT 2
20884: PUSH
20885: LD_INT 7
20887: PUSH
20888: LD_INT 9
20890: PUSH
20891: LD_INT 10
20893: PUSH
20894: LD_INT 11
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: IN
20905: NOT
20906: OR
20907: IFFALSE 20913
// exit ;
20909: POP
20910: POP
20911: GO 20998
// end ;
20913: GO 20570
20915: POP
20916: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20917: LD_VAR 0 9
20921: PPUSH
20922: LD_VAR 0 3
20926: PPUSH
20927: LD_VAR 0 4
20931: PPUSH
20932: LD_INT 20
20934: PPUSH
20935: CALL 12817 0 4
20939: PUSH
20940: LD_INT 4
20942: ARRAY
20943: IFFALSE 20947
// exit ;
20945: GO 20998
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20947: LD_VAR 0 2
20951: PUSH
20952: LD_INT 29
20954: PUSH
20955: LD_INT 30
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: IN
20962: IFFALSE 20986
20964: PUSH
20965: LD_VAR 0 3
20969: PPUSH
20970: LD_VAR 0 4
20974: PPUSH
20975: LD_VAR 0 9
20979: PPUSH
20980: CALL_OW 440
20984: NOT
20985: AND
20986: IFFALSE 20990
// exit ;
20988: GO 20998
// result := true ;
20990: LD_ADDR_VAR 0 6
20994: PUSH
20995: LD_INT 1
20997: ST_TO_ADDR
// end ;
20998: LD_VAR 0 6
21002: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21003: LD_INT 0
21005: PPUSH
21006: PPUSH
21007: PPUSH
21008: PPUSH
21009: PPUSH
21010: PPUSH
21011: PPUSH
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
21019: PPUSH
21020: PPUSH
21021: PPUSH
21022: PPUSH
21023: PPUSH
21024: PPUSH
21025: PPUSH
21026: PPUSH
21027: PPUSH
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
21037: PPUSH
21038: PPUSH
21039: PPUSH
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
21060: PPUSH
21061: PPUSH
21062: PPUSH
// result = [ ] ;
21063: LD_ADDR_VAR 0 7
21067: PUSH
21068: EMPTY
21069: ST_TO_ADDR
// temp_list = [ ] ;
21070: LD_ADDR_VAR 0 9
21074: PUSH
21075: EMPTY
21076: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21077: LD_VAR 0 4
21081: PUSH
21082: LD_INT 0
21084: PUSH
21085: LD_INT 1
21087: PUSH
21088: LD_INT 2
21090: PUSH
21091: LD_INT 3
21093: PUSH
21094: LD_INT 4
21096: PUSH
21097: LD_INT 5
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: IN
21108: NOT
21109: IFTRUE 21152
21111: PUSH
21112: LD_VAR 0 1
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: IN
21127: IFFALSE 21151
21129: PUSH
21130: LD_VAR 0 5
21134: PUSH
21135: LD_INT 1
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 3
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: IN
21149: NOT
21150: AND
21151: OR
21152: IFFALSE 21156
// exit ;
21154: GO 39555
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21156: LD_VAR 0 1
21160: PUSH
21161: LD_INT 6
21163: PUSH
21164: LD_INT 7
21166: PUSH
21167: LD_INT 8
21169: PUSH
21170: LD_INT 13
21172: PUSH
21173: LD_INT 12
21175: PUSH
21176: LD_INT 15
21178: PUSH
21179: LD_INT 11
21181: PUSH
21182: LD_INT 14
21184: PUSH
21185: LD_INT 10
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: IN
21199: IFFALSE 21209
// btype = b_lab ;
21201: LD_ADDR_VAR 0 1
21205: PUSH
21206: LD_INT 6
21208: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21209: LD_VAR 0 6
21213: PUSH
21214: LD_INT 0
21216: PUSH
21217: LD_INT 1
21219: PUSH
21220: LD_INT 2
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: LIST
21227: IN
21228: NOT
21229: IFTRUE 21297
21231: PUSH
21232: LD_VAR 0 1
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: LD_INT 2
21245: PUSH
21246: LD_INT 3
21248: PUSH
21249: LD_INT 6
21251: PUSH
21252: LD_INT 36
21254: PUSH
21255: LD_INT 4
21257: PUSH
21258: LD_INT 5
21260: PUSH
21261: LD_INT 31
21263: PUSH
21264: LD_INT 32
21266: PUSH
21267: LD_INT 33
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: IN
21283: NOT
21284: IFFALSE 21296
21286: PUSH
21287: LD_VAR 0 6
21291: PUSH
21292: LD_INT 1
21294: EQUAL
21295: AND
21296: OR
21297: IFTRUE 21329
21299: PUSH
21300: LD_VAR 0 1
21304: PUSH
21305: LD_INT 2
21307: PUSH
21308: LD_INT 3
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: IN
21315: NOT
21316: IFFALSE 21328
21318: PUSH
21319: LD_VAR 0 6
21323: PUSH
21324: LD_INT 2
21326: EQUAL
21327: AND
21328: OR
21329: IFFALSE 21339
// mode = 0 ;
21331: LD_ADDR_VAR 0 6
21335: PUSH
21336: LD_INT 0
21338: ST_TO_ADDR
// case mode of 0 :
21339: LD_VAR 0 6
21343: PUSH
21344: LD_INT 0
21346: DOUBLE
21347: EQUAL
21348: IFTRUE 21352
21350: GO 32805
21352: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21353: LD_ADDR_VAR 0 11
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: LD_INT 0
21363: PUSH
21364: EMPTY
21365: LIST
21366: LIST
21367: PUSH
21368: LD_INT 0
21370: PUSH
21371: LD_INT 1
21373: NEG
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 1
21381: PUSH
21382: LD_INT 0
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: LD_INT 1
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 0
21401: PUSH
21402: LD_INT 1
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: LD_INT 1
21411: NEG
21412: PUSH
21413: LD_INT 0
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 1
21422: NEG
21423: PUSH
21424: LD_INT 1
21426: NEG
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 1
21434: NEG
21435: PUSH
21436: LD_INT 2
21438: NEG
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: LD_INT 2
21449: NEG
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 1
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: PUSH
21469: LD_INT 2
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: LD_INT 2
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: NEG
21489: PUSH
21490: LD_INT 1
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: PUSH
21497: LD_INT 1
21499: PUSH
21500: LD_INT 3
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 0
21509: PUSH
21510: LD_INT 3
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: NEG
21520: PUSH
21521: LD_INT 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21546: LD_ADDR_VAR 0 12
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 2
21669: NEG
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: NEG
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: NEG
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 3
21703: NEG
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 3
21714: NEG
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21742: LD_ADDR_VAR 0 13
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 0
21759: PUSH
21760: LD_INT 1
21762: NEG
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: LD_INT 1
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: PUSH
21788: LD_INT 0
21790: PUSH
21791: LD_INT 1
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: LD_INT 1
21800: NEG
21801: PUSH
21802: LD_INT 0
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 1
21811: NEG
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: PUSH
21821: LD_INT 1
21823: NEG
21824: PUSH
21825: LD_INT 2
21827: NEG
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 2
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: LD_INT 2
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PUSH
21853: LD_INT 1
21855: PUSH
21856: LD_INT 2
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 2
21865: NEG
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 2
21877: NEG
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: NEG
21890: PUSH
21891: LD_INT 3
21893: NEG
21894: PUSH
21895: EMPTY
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 3
21901: NEG
21902: PUSH
21903: LD_INT 2
21905: NEG
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 3
21913: NEG
21914: PUSH
21915: LD_INT 3
21917: NEG
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21941: LD_ADDR_VAR 0 14
21945: PUSH
21946: LD_INT 0
21948: PUSH
21949: LD_INT 0
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 1
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 0
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: LD_INT 1
21979: PUSH
21980: LD_INT 1
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 0
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 1
21999: NEG
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 1
22022: NEG
22023: PUSH
22024: LD_INT 2
22026: NEG
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PUSH
22032: LD_INT 0
22034: PUSH
22035: LD_INT 2
22037: NEG
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 1
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 0
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: NEG
22077: PUSH
22078: LD_INT 1
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 1
22087: NEG
22088: PUSH
22089: LD_INT 3
22091: NEG
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: LD_INT 3
22102: NEG
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: LD_INT 2
22113: NEG
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: EMPTY
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: LIST
22131: LIST
22132: LIST
22133: LIST
22134: LIST
22135: LIST
22136: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22137: LD_ADDR_VAR 0 15
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: LD_INT 0
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 0
22154: PUSH
22155: LD_INT 1
22157: NEG
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 1
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 0
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: LD_INT 0
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 1
22206: NEG
22207: PUSH
22208: LD_INT 1
22210: NEG
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: LD_INT 1
22221: NEG
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 2
22229: PUSH
22230: LD_INT 0
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 2
22239: PUSH
22240: LD_INT 1
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 1
22249: NEG
22250: PUSH
22251: LD_INT 1
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 2
22260: NEG
22261: PUSH
22262: LD_INT 0
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: NEG
22272: PUSH
22273: LD_INT 1
22275: NEG
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 2
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 3
22294: PUSH
22295: LD_INT 0
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22330: LD_ADDR_VAR 0 16
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: LD_INT 0
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 0
22347: PUSH
22348: LD_INT 1
22350: NEG
22351: PUSH
22352: EMPTY
22353: LIST
22354: LIST
22355: PUSH
22356: LD_INT 1
22358: PUSH
22359: LD_INT 0
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: PUSH
22366: LD_INT 1
22368: PUSH
22369: LD_INT 1
22371: PUSH
22372: EMPTY
22373: LIST
22374: LIST
22375: PUSH
22376: LD_INT 0
22378: PUSH
22379: LD_INT 1
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PUSH
22386: LD_INT 1
22388: NEG
22389: PUSH
22390: LD_INT 0
22392: PUSH
22393: EMPTY
22394: LIST
22395: LIST
22396: PUSH
22397: LD_INT 1
22399: NEG
22400: PUSH
22401: LD_INT 1
22403: NEG
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 1
22411: NEG
22412: PUSH
22413: LD_INT 2
22415: NEG
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: LD_INT 2
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 2
22453: NEG
22454: PUSH
22455: LD_INT 1
22457: NEG
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: PUSH
22463: LD_INT 2
22465: NEG
22466: PUSH
22467: LD_INT 2
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 3
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 3
22487: PUSH
22488: LD_INT 3
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 2
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22523: LD_ADDR_VAR 0 17
22527: PUSH
22528: LD_INT 0
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: LD_INT 1
22543: NEG
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: PUSH
22549: LD_INT 1
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: LD_INT 1
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: NEG
22593: PUSH
22594: LD_INT 1
22596: NEG
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 2
22608: NEG
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: LD_INT 2
22619: NEG
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 1
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 0
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: PUSH
22649: LD_INT 1
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: PUSH
22659: LD_INT 2
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 1
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 0
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 1
22688: NEG
22689: PUSH
22690: LD_INT 1
22692: PUSH
22693: EMPTY
22694: LIST
22695: LIST
22696: PUSH
22697: LD_INT 2
22699: NEG
22700: PUSH
22701: LD_INT 0
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 2
22710: NEG
22711: PUSH
22712: LD_INT 1
22714: NEG
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: LD_INT 2
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22753: LD_ADDR_VAR 0 18
22757: PUSH
22758: LD_INT 0
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 1
22773: NEG
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 1
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: LD_INT 1
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 0
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 1
22811: NEG
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: EMPTY
22817: LIST
22818: LIST
22819: PUSH
22820: LD_INT 1
22822: NEG
22823: PUSH
22824: LD_INT 1
22826: NEG
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 2
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 0
22846: PUSH
22847: LD_INT 2
22849: NEG
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 1
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 2
22868: PUSH
22869: LD_INT 0
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 1
22898: PUSH
22899: LD_INT 2
22901: PUSH
22902: EMPTY
22903: LIST
22904: LIST
22905: PUSH
22906: LD_INT 0
22908: PUSH
22909: LD_INT 2
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: PUSH
22916: LD_INT 1
22918: NEG
22919: PUSH
22920: LD_INT 1
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: LD_INT 2
22929: NEG
22930: PUSH
22931: LD_INT 0
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 2
22940: NEG
22941: PUSH
22942: LD_INT 1
22944: NEG
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 2
22952: NEG
22953: PUSH
22954: LD_INT 2
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22983: LD_ADDR_VAR 0 19
22987: PUSH
22988: LD_INT 0
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 1
23003: NEG
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 1
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: LD_INT 1
23024: PUSH
23025: EMPTY
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 0
23031: PUSH
23032: LD_INT 1
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: LD_INT 1
23041: NEG
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 1
23052: NEG
23053: PUSH
23054: LD_INT 1
23056: NEG
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: LD_INT 2
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: LD_INT 2
23079: NEG
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: LD_INT 0
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: LD_INT 1
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 1
23128: PUSH
23129: LD_INT 2
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: LD_INT 2
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 1
23148: NEG
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 2
23159: NEG
23160: PUSH
23161: LD_INT 0
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 2
23170: NEG
23171: PUSH
23172: LD_INT 1
23174: NEG
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: LD_INT 2
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23213: LD_ADDR_VAR 0 20
23217: PUSH
23218: LD_INT 0
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: NEG
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 1
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: LD_INT 1
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: LD_INT 0
23261: PUSH
23262: LD_INT 1
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: LD_INT 1
23271: NEG
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PUSH
23280: LD_INT 1
23282: NEG
23283: PUSH
23284: LD_INT 1
23286: NEG
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 2
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 0
23306: PUSH
23307: LD_INT 2
23309: NEG
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 2
23328: PUSH
23329: LD_INT 0
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: PUSH
23339: LD_INT 1
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: LD_INT 2
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 1
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: EMPTY
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 0
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 1
23378: NEG
23379: PUSH
23380: LD_INT 1
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 2
23389: NEG
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 2
23400: NEG
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23443: LD_ADDR_VAR 0 21
23447: PUSH
23448: LD_INT 0
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: LD_INT 1
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: LD_INT 1
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: LD_INT 1
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 1
23501: NEG
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: PUSH
23510: LD_INT 1
23512: NEG
23513: PUSH
23514: LD_INT 1
23516: NEG
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 1
23524: NEG
23525: PUSH
23526: LD_INT 2
23528: NEG
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: LD_INT 2
23539: NEG
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 0
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 2
23568: PUSH
23569: LD_INT 1
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: PUSH
23579: LD_INT 2
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 1
23608: NEG
23609: PUSH
23610: LD_INT 1
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PUSH
23617: LD_INT 2
23619: NEG
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 2
23630: NEG
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 2
23642: NEG
23643: PUSH
23644: LD_INT 2
23646: NEG
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23673: LD_ADDR_VAR 0 22
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: NEG
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 1
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 0
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: NEG
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 1
23746: NEG
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 1
23754: NEG
23755: PUSH
23756: LD_INT 2
23758: NEG
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: LD_INT 2
23769: NEG
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 2
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 2
23798: PUSH
23799: LD_INT 1
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: LD_INT 2
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: LD_INT 2
23821: PUSH
23822: EMPTY
23823: LIST
23824: LIST
23825: PUSH
23826: LD_INT 0
23828: PUSH
23829: LD_INT 2
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 2
23849: NEG
23850: PUSH
23851: LD_INT 0
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 2
23860: NEG
23861: PUSH
23862: LD_INT 1
23864: NEG
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 2
23872: NEG
23873: PUSH
23874: LD_INT 2
23876: NEG
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23903: LD_ADDR_VAR 0 23
23907: PUSH
23908: LD_INT 0
23910: PUSH
23911: LD_INT 0
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 0
23920: PUSH
23921: LD_INT 1
23923: NEG
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: LD_INT 1
23931: PUSH
23932: LD_INT 0
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 0
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 1
23961: NEG
23962: PUSH
23963: LD_INT 0
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: LD_INT 1
23976: NEG
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 1
23984: NEG
23985: PUSH
23986: LD_INT 2
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: LD_INT 2
23999: NEG
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 1
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 2
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: EMPTY
24043: LIST
24044: LIST
24045: PUSH
24046: LD_INT 1
24048: PUSH
24049: LD_INT 2
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 0
24058: PUSH
24059: LD_INT 2
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 1
24068: NEG
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 2
24079: NEG
24080: PUSH
24081: LD_INT 0
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 2
24090: NEG
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 2
24102: NEG
24103: PUSH
24104: LD_INT 2
24106: NEG
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 2
24114: NEG
24115: PUSH
24116: LD_INT 3
24118: NEG
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: LD_INT 3
24130: NEG
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 1
24138: PUSH
24139: LD_INT 2
24141: NEG
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: LD_INT 1
24152: NEG
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24183: LD_ADDR_VAR 0 24
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 0
24200: PUSH
24201: LD_INT 1
24203: NEG
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: PUSH
24212: LD_INT 0
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 1
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 0
24231: PUSH
24232: LD_INT 1
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: LD_INT 1
24241: NEG
24242: PUSH
24243: LD_INT 0
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 1
24252: NEG
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: EMPTY
24259: LIST
24260: LIST
24261: PUSH
24262: LD_INT 1
24264: NEG
24265: PUSH
24266: LD_INT 2
24268: NEG
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: LD_INT 2
24279: NEG
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 0
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: LD_INT 2
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 2
24318: PUSH
24319: LD_INT 2
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: LD_INT 1
24328: PUSH
24329: LD_INT 2
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 2
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 1
24348: NEG
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 2
24359: NEG
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 2
24370: NEG
24371: PUSH
24372: LD_INT 1
24374: NEG
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 2
24382: NEG
24383: PUSH
24384: LD_INT 2
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 1
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: EMPTY
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 3
24416: PUSH
24417: LD_INT 1
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PUSH
24424: LD_INT 3
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
24459: LD_ADDR_VAR 0 25
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: LD_INT 1
24479: NEG
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: PUSH
24488: LD_INT 0
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 1
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 0
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 1
24517: NEG
24518: PUSH
24519: LD_INT 0
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 1
24528: NEG
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: EMPTY
24535: LIST
24536: LIST
24537: PUSH
24538: LD_INT 1
24540: NEG
24541: PUSH
24542: LD_INT 2
24544: NEG
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: PUSH
24550: LD_INT 0
24552: PUSH
24553: LD_INT 2
24555: NEG
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 2
24574: PUSH
24575: LD_INT 0
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 2
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 0
24614: PUSH
24615: LD_INT 2
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 1
24624: NEG
24625: PUSH
24626: LD_INT 1
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 2
24635: NEG
24636: PUSH
24637: LD_INT 0
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 2
24646: NEG
24647: PUSH
24648: LD_INT 1
24650: NEG
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 2
24658: NEG
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 3
24670: PUSH
24671: LD_INT 1
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 3
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: EMPTY
24685: LIST
24686: LIST
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: PUSH
24701: LD_INT 3
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24733: LD_ADDR_VAR 0 26
24737: PUSH
24738: LD_INT 0
24740: PUSH
24741: LD_INT 0
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: LD_INT 1
24753: NEG
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: LD_INT 1
24761: PUSH
24762: LD_INT 0
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: EMPTY
24776: LIST
24777: LIST
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 1
24791: NEG
24792: PUSH
24793: LD_INT 0
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 1
24814: NEG
24815: PUSH
24816: LD_INT 2
24818: NEG
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: PUSH
24824: LD_INT 0
24826: PUSH
24827: LD_INT 2
24829: NEG
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 2
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: LD_INT 1
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 1
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PUSH
24886: LD_INT 0
24888: PUSH
24889: LD_INT 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 1
24898: NEG
24899: PUSH
24900: LD_INT 1
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: LD_INT 0
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 2
24920: NEG
24921: PUSH
24922: LD_INT 1
24924: NEG
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 2
24932: NEG
24933: PUSH
24934: LD_INT 2
24936: NEG
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: LD_INT 3
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: LD_INT 3
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: LD_INT 2
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: PUSH
24973: LD_INT 2
24975: NEG
24976: PUSH
24977: LD_INT 1
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25009: LD_ADDR_VAR 0 27
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: LD_INT 0
25026: PUSH
25027: LD_INT 1
25029: NEG
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: LD_INT 0
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: LD_INT 1
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 0
25057: PUSH
25058: LD_INT 1
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 1
25067: NEG
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: EMPTY
25073: LIST
25074: LIST
25075: PUSH
25076: LD_INT 1
25078: NEG
25079: PUSH
25080: LD_INT 1
25082: NEG
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 1
25090: NEG
25091: PUSH
25092: LD_INT 2
25094: NEG
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 0
25102: PUSH
25103: LD_INT 2
25105: NEG
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 1
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: LD_INT 0
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: LD_INT 1
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 2
25147: PUSH
25148: EMPTY
25149: LIST
25150: LIST
25151: PUSH
25152: LD_INT 1
25154: PUSH
25155: LD_INT 2
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 0
25164: PUSH
25165: LD_INT 2
25167: PUSH
25168: EMPTY
25169: LIST
25170: LIST
25171: PUSH
25172: LD_INT 1
25174: NEG
25175: PUSH
25176: LD_INT 1
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 2
25185: NEG
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 2
25196: NEG
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 2
25208: NEG
25209: PUSH
25210: LD_INT 2
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: NEG
25221: PUSH
25222: LD_INT 2
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: PUSH
25229: LD_INT 2
25231: NEG
25232: PUSH
25233: LD_INT 1
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 3
25242: NEG
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 3
25254: NEG
25255: PUSH
25256: LD_INT 2
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25289: LD_ADDR_VAR 0 28
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 1
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 0
25444: PUSH
25445: LD_INT 2
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 1
25454: NEG
25455: PUSH
25456: LD_INT 1
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 2
25465: NEG
25466: PUSH
25467: LD_INT 0
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: NEG
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: NEG
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: LD_INT 3
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: NEG
25513: PUSH
25514: LD_INT 3
25516: NEG
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 3
25524: NEG
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: EMPTY
25531: LIST
25532: LIST
25533: PUSH
25534: LD_INT 3
25536: NEG
25537: PUSH
25538: LD_INT 2
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25571: LD_ADDR_VAR 0 29
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: LD_INT 0
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 0
25588: PUSH
25589: LD_INT 1
25591: NEG
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 1
25599: PUSH
25600: LD_INT 0
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: LD_INT 1
25629: NEG
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: NEG
25641: PUSH
25642: LD_INT 1
25644: NEG
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 2
25656: NEG
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: LD_INT 2
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 1
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 2
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 0
25716: PUSH
25717: LD_INT 2
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 1
25726: NEG
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: NEG
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 2
25749: NEG
25750: PUSH
25751: LD_INT 2
25753: NEG
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: PUSH
25759: LD_INT 2
25761: NEG
25762: PUSH
25763: LD_INT 3
25765: NEG
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 1
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 3
25784: PUSH
25785: LD_INT 1
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: LD_INT 3
25797: PUSH
25798: EMPTY
25799: LIST
25800: LIST
25801: PUSH
25802: LD_INT 1
25804: NEG
25805: PUSH
25806: LD_INT 2
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 3
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25850: LD_ADDR_VAR 0 30
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 0
25860: PUSH
25861: EMPTY
25862: LIST
25863: LIST
25864: PUSH
25865: LD_INT 0
25867: PUSH
25868: LD_INT 1
25870: NEG
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 0
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 1
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 1
25908: NEG
25909: PUSH
25910: LD_INT 0
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: LD_INT 1
25923: NEG
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: LD_INT 1
25931: NEG
25932: PUSH
25933: LD_INT 2
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: LD_INT 2
25946: NEG
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 2
25965: PUSH
25966: LD_INT 0
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 1
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PUSH
25983: LD_INT 2
25985: PUSH
25986: LD_INT 2
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: LD_INT 2
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 1
26005: NEG
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 2
26016: NEG
26017: PUSH
26018: LD_INT 0
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 3
26043: NEG
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: LD_INT 2
26054: NEG
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 3
26062: PUSH
26063: LD_INT 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 2
26082: NEG
26083: PUSH
26084: LD_INT 1
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: PUSH
26091: LD_INT 3
26093: NEG
26094: PUSH
26095: LD_INT 1
26097: NEG
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26128: LD_ADDR_VAR 0 31
26132: PUSH
26133: LD_INT 0
26135: PUSH
26136: LD_INT 0
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: PUSH
26143: LD_INT 0
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: LD_INT 0
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: LD_INT 1
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: NEG
26187: PUSH
26188: LD_INT 0
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: LD_INT 1
26201: NEG
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: LD_INT 1
26209: NEG
26210: PUSH
26211: LD_INT 2
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 1
26221: PUSH
26222: LD_INT 1
26224: NEG
26225: PUSH
26226: EMPTY
26227: LIST
26228: LIST
26229: PUSH
26230: LD_INT 2
26232: PUSH
26233: LD_INT 0
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PUSH
26240: LD_INT 2
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: LD_INT 2
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 1
26262: PUSH
26263: LD_INT 2
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 0
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: LD_INT 1
26282: NEG
26283: PUSH
26284: LD_INT 1
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: LD_INT 1
26297: NEG
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: LD_INT 2
26309: NEG
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: PUSH
26315: LD_INT 2
26317: NEG
26318: PUSH
26319: LD_INT 3
26321: NEG
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PUSH
26327: LD_INT 2
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 3
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 3
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: NEG
26361: PUSH
26362: LD_INT 2
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 3
26371: NEG
26372: PUSH
26373: LD_INT 2
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26406: LD_ADDR_VAR 0 32
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 1
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 2
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: NEG
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 2
26572: NEG
26573: PUSH
26574: LD_INT 0
26576: PUSH
26577: EMPTY
26578: LIST
26579: LIST
26580: PUSH
26581: LD_INT 2
26583: NEG
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: LD_INT 3
26599: NEG
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: LD_INT 2
26610: NEG
26611: PUSH
26612: EMPTY
26613: LIST
26614: LIST
26615: PUSH
26616: LD_INT 3
26618: PUSH
26619: LD_INT 2
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: PUSH
26629: LD_INT 3
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 2
26638: NEG
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 3
26649: NEG
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26684: LD_ADDR_VAR 0 33
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 0
26701: PUSH
26702: LD_INT 1
26704: NEG
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: LD_INT 1
26712: PUSH
26713: LD_INT 0
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 0
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: EMPTY
26737: LIST
26738: LIST
26739: PUSH
26740: LD_INT 1
26742: NEG
26743: PUSH
26744: LD_INT 0
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: PUSH
26751: LD_INT 1
26753: NEG
26754: PUSH
26755: LD_INT 1
26757: NEG
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: LD_INT 2
26769: NEG
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 1
26777: PUSH
26778: LD_INT 1
26780: NEG
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 0
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 2
26874: NEG
26875: PUSH
26876: LD_INT 3
26878: NEG
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 2
26886: PUSH
26887: LD_INT 1
26889: NEG
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 3
26897: PUSH
26898: LD_INT 1
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: LD_INT 1
26907: PUSH
26908: LD_INT 3
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: PUSH
26926: LD_INT 3
26928: NEG
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26963: LD_ADDR_VAR 0 34
26967: PUSH
26968: LD_INT 0
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 1
26983: NEG
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 0
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 1
27001: PUSH
27002: LD_INT 1
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 1
27021: NEG
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: PUSH
27030: LD_INT 1
27032: NEG
27033: PUSH
27034: LD_INT 1
27036: NEG
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 2
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 0
27056: PUSH
27057: LD_INT 2
27059: NEG
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PUSH
27065: LD_INT 1
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 2
27078: PUSH
27079: LD_INT 1
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: PUSH
27096: LD_INT 1
27098: PUSH
27099: LD_INT 2
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PUSH
27106: LD_INT 1
27108: NEG
27109: PUSH
27110: LD_INT 1
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: NEG
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 2
27130: NEG
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 2
27142: NEG
27143: PUSH
27144: LD_INT 2
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 3
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 2
27169: NEG
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 3
27177: PUSH
27178: LD_INT 2
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 2
27187: PUSH
27188: LD_INT 3
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: LD_INT 1
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 3
27208: NEG
27209: PUSH
27210: LD_INT 1
27212: NEG
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: LIST
27241: LIST
27242: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27243: LD_ADDR_VAR 0 35
27247: PUSH
27248: LD_INT 0
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: EMPTY
27266: LIST
27267: LIST
27268: PUSH
27269: LD_INT 1
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: LD_INT 1
27284: PUSH
27285: EMPTY
27286: LIST
27287: LIST
27288: PUSH
27289: LD_INT 0
27291: PUSH
27292: LD_INT 1
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: LD_INT 1
27316: NEG
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 2
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: LD_INT 2
27334: NEG
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27355: LD_ADDR_VAR 0 36
27359: PUSH
27360: LD_INT 0
27362: PUSH
27363: LD_INT 0
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 1
27375: NEG
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 1
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 0
27403: PUSH
27404: LD_INT 1
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: LD_INT 0
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: PUSH
27422: LD_INT 1
27424: NEG
27425: PUSH
27426: LD_INT 1
27428: NEG
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: NEG
27437: PUSH
27438: LD_INT 2
27440: NEG
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 1
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27467: LD_ADDR_VAR 0 37
27471: PUSH
27472: LD_INT 0
27474: PUSH
27475: LD_INT 0
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: PUSH
27482: LD_INT 0
27484: PUSH
27485: LD_INT 1
27487: NEG
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 1
27495: PUSH
27496: LD_INT 0
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: LD_INT 1
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: LD_INT 1
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 1
27536: NEG
27537: PUSH
27538: LD_INT 1
27540: NEG
27541: PUSH
27542: EMPTY
27543: LIST
27544: LIST
27545: PUSH
27546: LD_INT 1
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27579: LD_ADDR_VAR 0 38
27583: PUSH
27584: LD_INT 0
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 0
27596: PUSH
27597: LD_INT 1
27599: NEG
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: LD_INT 0
27610: PUSH
27611: EMPTY
27612: LIST
27613: LIST
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: LD_INT 1
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 0
27627: PUSH
27628: LD_INT 1
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 1
27637: NEG
27638: PUSH
27639: LD_INT 0
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 1
27648: NEG
27649: PUSH
27650: LD_INT 1
27652: NEG
27653: PUSH
27654: EMPTY
27655: LIST
27656: LIST
27657: PUSH
27658: LD_INT 2
27660: PUSH
27661: LD_INT 1
27663: PUSH
27664: EMPTY
27665: LIST
27666: LIST
27667: PUSH
27668: LD_INT 2
27670: NEG
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27691: LD_ADDR_VAR 0 39
27695: PUSH
27696: LD_INT 0
27698: PUSH
27699: LD_INT 0
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 1
27711: NEG
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: LD_INT 1
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: PUSH
27737: LD_INT 0
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: PUSH
27747: LD_INT 1
27749: NEG
27750: PUSH
27751: LD_INT 0
27753: PUSH
27754: EMPTY
27755: LIST
27756: LIST
27757: PUSH
27758: LD_INT 1
27760: NEG
27761: PUSH
27762: LD_INT 1
27764: NEG
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 1
27772: NEG
27773: PUSH
27774: LD_INT 2
27776: NEG
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PUSH
27782: LD_INT 1
27784: PUSH
27785: LD_INT 2
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27803: LD_ADDR_VAR 0 40
27807: PUSH
27808: LD_INT 0
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 1
27823: NEG
27824: PUSH
27825: EMPTY
27826: LIST
27827: LIST
27828: PUSH
27829: LD_INT 1
27831: PUSH
27832: LD_INT 0
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 1
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: LD_INT 0
27851: PUSH
27852: LD_INT 1
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 1
27861: NEG
27862: PUSH
27863: LD_INT 0
27865: PUSH
27866: EMPTY
27867: LIST
27868: LIST
27869: PUSH
27870: LD_INT 1
27872: NEG
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 1
27884: PUSH
27885: LD_INT 1
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27915: LD_ADDR_VAR 0 41
27919: PUSH
27920: LD_INT 0
27922: PUSH
27923: LD_INT 0
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: LD_INT 1
27935: NEG
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 1
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 0
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: PUSH
27971: LD_INT 1
27973: NEG
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 1
27984: NEG
27985: PUSH
27986: LD_INT 1
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 1
27996: NEG
27997: PUSH
27998: LD_INT 2
28000: NEG
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: LD_INT 1
28011: NEG
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_INT 2
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 2
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: LD_INT 2
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PUSH
28047: LD_INT 1
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: LD_INT 1
28059: NEG
28060: PUSH
28061: LD_INT 1
28063: PUSH
28064: EMPTY
28065: LIST
28066: LIST
28067: PUSH
28068: LD_INT 2
28070: NEG
28071: PUSH
28072: LD_INT 0
28074: PUSH
28075: EMPTY
28076: LIST
28077: LIST
28078: PUSH
28079: LD_INT 2
28081: NEG
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 2
28093: NEG
28094: PUSH
28095: LD_INT 2
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 2
28105: NEG
28106: PUSH
28107: LD_INT 3
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 2
28117: PUSH
28118: LD_INT 1
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 3
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 3
28138: PUSH
28139: LD_INT 1
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: PUSH
28146: LD_INT 3
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 3
28158: PUSH
28159: LD_INT 3
28161: PUSH
28162: EMPTY
28163: LIST
28164: LIST
28165: PUSH
28166: LD_INT 2
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: EMPTY
28173: LIST
28174: LIST
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: LD_INT 1
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 3
28200: NEG
28201: PUSH
28202: LD_INT 1
28204: NEG
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 3
28212: NEG
28213: PUSH
28214: LD_INT 2
28216: NEG
28217: PUSH
28218: EMPTY
28219: LIST
28220: LIST
28221: PUSH
28222: LD_INT 3
28224: NEG
28225: PUSH
28226: LD_INT 3
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: LIST
28238: LIST
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: LIST
28245: LIST
28246: LIST
28247: LIST
28248: LIST
28249: LIST
28250: LIST
28251: LIST
28252: LIST
28253: LIST
28254: LIST
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28265: LD_ADDR_VAR 0 42
28269: PUSH
28270: LD_INT 0
28272: PUSH
28273: LD_INT 0
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 1
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: LD_INT 1
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 0
28313: PUSH
28314: LD_INT 1
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: NEG
28324: PUSH
28325: LD_INT 0
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 1
28334: NEG
28335: PUSH
28336: LD_INT 1
28338: NEG
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: LD_INT 2
28350: NEG
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 2
28361: NEG
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 2
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: PUSH
28388: LD_INT 2
28390: PUSH
28391: LD_INT 2
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: LD_INT 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 0
28410: PUSH
28411: LD_INT 2
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: LD_INT 1
28424: PUSH
28425: EMPTY
28426: LIST
28427: LIST
28428: PUSH
28429: LD_INT 2
28431: NEG
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: LD_INT 2
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 2
28455: NEG
28456: PUSH
28457: LD_INT 3
28459: NEG
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: NEG
28468: PUSH
28469: LD_INT 3
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: LD_INT 3
28482: NEG
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: LD_INT 1
28490: PUSH
28491: LD_INT 2
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 3
28501: PUSH
28502: LD_INT 2
28504: PUSH
28505: EMPTY
28506: LIST
28507: LIST
28508: PUSH
28509: LD_INT 3
28511: PUSH
28512: LD_INT 3
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: LD_INT 3
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 3
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: LD_INT 0
28541: PUSH
28542: LD_INT 3
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 1
28551: NEG
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 3
28562: NEG
28563: PUSH
28564: LD_INT 2
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 3
28574: NEG
28575: PUSH
28576: LD_INT 3
28578: NEG
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: LIST
28595: LIST
28596: LIST
28597: LIST
28598: LIST
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: LIST
28604: LIST
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28615: LD_ADDR_VAR 0 43
28619: PUSH
28620: LD_INT 0
28622: PUSH
28623: LD_INT 0
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: PUSH
28630: LD_INT 0
28632: PUSH
28633: LD_INT 1
28635: NEG
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 1
28653: PUSH
28654: LD_INT 1
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: LD_INT 1
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: NEG
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 1
28684: NEG
28685: PUSH
28686: LD_INT 1
28688: NEG
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: LD_INT 2
28700: NEG
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: LD_INT 0
28708: PUSH
28709: LD_INT 2
28711: NEG
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 2
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 0
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: NEG
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: NEG
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: NEG
28793: PUSH
28794: LD_INT 1
28796: NEG
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: NEG
28805: PUSH
28806: LD_INT 3
28808: NEG
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 0
28816: PUSH
28817: LD_INT 3
28819: NEG
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 2
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 2
28838: PUSH
28839: LD_INT 1
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 3
28849: PUSH
28850: LD_INT 0
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 3
28859: PUSH
28860: LD_INT 1
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 1
28869: PUSH
28870: LD_INT 3
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 0
28879: PUSH
28880: LD_INT 3
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: LD_INT 1
28889: NEG
28890: PUSH
28891: LD_INT 2
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: LD_INT 1
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 3
28911: NEG
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 3
28922: NEG
28923: PUSH
28924: LD_INT 1
28926: NEG
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: LIST
28936: LIST
28937: LIST
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: LIST
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28963: LD_ADDR_VAR 0 44
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: LD_INT 0
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: LD_INT 1
28983: NEG
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: LD_INT 0
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 1
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: LD_INT 1
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: LD_INT 0
29025: PUSH
29026: EMPTY
29027: LIST
29028: LIST
29029: PUSH
29030: LD_INT 1
29032: NEG
29033: PUSH
29034: LD_INT 1
29036: NEG
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 1
29044: NEG
29045: PUSH
29046: LD_INT 2
29048: NEG
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: LD_INT 2
29067: PUSH
29068: LD_INT 0
29070: PUSH
29071: EMPTY
29072: LIST
29073: LIST
29074: PUSH
29075: LD_INT 2
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 2
29087: PUSH
29088: LD_INT 2
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 1
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 1
29107: NEG
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: EMPTY
29113: LIST
29114: LIST
29115: PUSH
29116: LD_INT 2
29118: NEG
29119: PUSH
29120: LD_INT 0
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 2
29129: NEG
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 2
29141: NEG
29142: PUSH
29143: LD_INT 2
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 2
29153: NEG
29154: PUSH
29155: LD_INT 3
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 2
29165: PUSH
29166: LD_INT 1
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 3
29176: PUSH
29177: LD_INT 0
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 3
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 3
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 2
29226: NEG
29227: PUSH
29228: LD_INT 1
29230: PUSH
29231: EMPTY
29232: LIST
29233: LIST
29234: PUSH
29235: LD_INT 3
29237: NEG
29238: PUSH
29239: LD_INT 0
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: LD_INT 3
29248: NEG
29249: PUSH
29250: LD_INT 1
29252: NEG
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 3
29260: NEG
29261: PUSH
29262: LD_INT 2
29264: NEG
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 3
29272: NEG
29273: PUSH
29274: LD_INT 3
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: LIST
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29313: LD_ADDR_VAR 0 45
29317: PUSH
29318: LD_INT 0
29320: PUSH
29321: LD_INT 0
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 1
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: LD_INT 1
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 0
29361: PUSH
29362: LD_INT 1
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: NEG
29372: PUSH
29373: LD_INT 0
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: PUSH
29380: LD_INT 1
29382: NEG
29383: PUSH
29384: LD_INT 1
29386: NEG
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: LD_INT 1
29394: NEG
29395: PUSH
29396: LD_INT 2
29398: NEG
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 0
29406: PUSH
29407: LD_INT 2
29409: NEG
29410: PUSH
29411: EMPTY
29412: LIST
29413: LIST
29414: PUSH
29415: LD_INT 1
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 2
29428: PUSH
29429: LD_INT 1
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: LD_INT 2
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 2
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 0
29458: PUSH
29459: LD_INT 2
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 1
29468: NEG
29469: PUSH
29470: LD_INT 1
29472: PUSH
29473: EMPTY
29474: LIST
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: NEG
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 2
29491: NEG
29492: PUSH
29493: LD_INT 2
29495: NEG
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: PUSH
29501: LD_INT 2
29503: NEG
29504: PUSH
29505: LD_INT 3
29507: NEG
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: NEG
29516: PUSH
29517: LD_INT 3
29519: NEG
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 0
29527: PUSH
29528: LD_INT 3
29530: NEG
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 1
29538: PUSH
29539: LD_INT 2
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 3
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 3
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: LD_INT 3
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 1
29579: PUSH
29580: LD_INT 3
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 0
29589: PUSH
29590: LD_INT 3
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PUSH
29608: LD_INT 3
29610: NEG
29611: PUSH
29612: LD_INT 2
29614: NEG
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 3
29622: NEG
29623: PUSH
29624: LD_INT 3
29626: NEG
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: PUSH
29632: EMPTY
29633: LIST
29634: LIST
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: LIST
29651: LIST
29652: LIST
29653: LIST
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29663: LD_ADDR_VAR 0 46
29667: PUSH
29668: LD_INT 0
29670: PUSH
29671: LD_INT 0
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: LD_INT 1
29683: NEG
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: LD_INT 1
29704: PUSH
29705: EMPTY
29706: LIST
29707: LIST
29708: PUSH
29709: LD_INT 0
29711: PUSH
29712: LD_INT 1
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 1
29721: NEG
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: LD_INT 1
29736: NEG
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 1
29744: NEG
29745: PUSH
29746: LD_INT 2
29748: NEG
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 2
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 2
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: PUSH
29799: LD_INT 2
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 0
29808: PUSH
29809: LD_INT 2
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: PUSH
29823: EMPTY
29824: LIST
29825: LIST
29826: PUSH
29827: LD_INT 2
29829: NEG
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 2
29840: NEG
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 3
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: LD_INT 3
29867: NEG
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: LD_INT 2
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 1
29889: NEG
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 3
29897: PUSH
29898: LD_INT 0
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: LD_INT 3
29907: PUSH
29908: LD_INT 1
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 1
29917: PUSH
29918: LD_INT 3
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 0
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 2
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 2
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 3
29959: NEG
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 3
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: EMPTY
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30011: LD_ADDR_VAR 0 47
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: LD_INT 0
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 0
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PUSH
30037: LD_INT 1
30039: PUSH
30040: LD_INT 0
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 1
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 0
30059: PUSH
30060: LD_INT 1
30062: PUSH
30063: EMPTY
30064: LIST
30065: LIST
30066: PUSH
30067: LD_INT 1
30069: NEG
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 1
30080: NEG
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: PUSH
30090: LD_INT 1
30092: NEG
30093: PUSH
30094: LD_INT 2
30096: NEG
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 2
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 2
30126: NEG
30127: PUSH
30128: LD_INT 1
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 2
30138: NEG
30139: PUSH
30140: LD_INT 2
30142: NEG
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30162: LD_ADDR_VAR 0 48
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: LD_INT 0
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: LD_INT 1
30182: NEG
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 1
30190: PUSH
30191: LD_INT 0
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 0
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: NEG
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: LD_INT 1
30235: NEG
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: PUSH
30241: LD_INT 1
30243: NEG
30244: PUSH
30245: LD_INT 2
30247: NEG
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 2
30258: NEG
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: LD_INT 1
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: LD_INT 0
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: PUSH
30285: LD_INT 2
30287: PUSH
30288: LD_INT 1
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30309: LD_ADDR_VAR 0 49
30313: PUSH
30314: LD_INT 0
30316: PUSH
30317: LD_INT 0
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: PUSH
30324: LD_INT 0
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: LD_INT 0
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 1
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 0
30357: PUSH
30358: LD_INT 1
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: PUSH
30402: LD_INT 0
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 2
30411: PUSH
30412: LD_INT 1
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 2
30421: PUSH
30422: LD_INT 2
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 1
30431: PUSH
30432: LD_INT 2
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30453: LD_ADDR_VAR 0 50
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 1
30473: NEG
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: PUSH
30479: LD_INT 1
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 1
30491: PUSH
30492: LD_INT 1
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 1
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: NEG
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 1
30522: NEG
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: EMPTY
30529: LIST
30530: LIST
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: LD_INT 1
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 2
30544: PUSH
30545: LD_INT 2
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PUSH
30552: LD_INT 1
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 0
30564: PUSH
30565: LD_INT 2
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: EMPTY
30580: LIST
30581: LIST
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: LIST
30591: LIST
30592: LIST
30593: LIST
30594: LIST
30595: LIST
30596: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30597: LD_ADDR_VAR 0 51
30601: PUSH
30602: LD_INT 0
30604: PUSH
30605: LD_INT 0
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: LD_INT 1
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: LD_INT 1
30625: PUSH
30626: LD_INT 0
30628: PUSH
30629: EMPTY
30630: LIST
30631: LIST
30632: PUSH
30633: LD_INT 1
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 1
30655: NEG
30656: PUSH
30657: LD_INT 0
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 1
30666: NEG
30667: PUSH
30668: LD_INT 1
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 1
30678: PUSH
30679: LD_INT 2
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: PUSH
30686: LD_INT 0
30688: PUSH
30689: LD_INT 2
30691: PUSH
30692: EMPTY
30693: LIST
30694: LIST
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: LD_INT 1
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: LD_INT 0
30713: PUSH
30714: EMPTY
30715: LIST
30716: LIST
30717: PUSH
30718: LD_INT 2
30720: NEG
30721: PUSH
30722: LD_INT 1
30724: NEG
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30744: LD_ADDR_VAR 0 52
30748: PUSH
30749: LD_INT 0
30751: PUSH
30752: LD_INT 0
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 0
30761: PUSH
30762: LD_INT 1
30764: NEG
30765: PUSH
30766: EMPTY
30767: LIST
30768: LIST
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: LD_INT 0
30775: PUSH
30776: EMPTY
30777: LIST
30778: LIST
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 1
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 0
30792: PUSH
30793: LD_INT 1
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: LD_INT 0
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: PUSH
30811: LD_INT 1
30813: NEG
30814: PUSH
30815: LD_INT 1
30817: NEG
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 1
30825: NEG
30826: PUSH
30827: LD_INT 2
30829: NEG
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: LD_INT 2
30848: NEG
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 2
30859: NEG
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 2
30871: NEG
30872: PUSH
30873: LD_INT 2
30875: NEG
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: PUSH
30881: EMPTY
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30895: LD_ADDR_VAR 0 53
30899: PUSH
30900: LD_INT 0
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: LD_INT 1
30915: NEG
30916: PUSH
30917: EMPTY
30918: LIST
30919: LIST
30920: PUSH
30921: LD_INT 1
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: LD_INT 1
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 0
30943: PUSH
30944: LD_INT 1
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 1
30953: NEG
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: EMPTY
30959: LIST
30960: LIST
30961: PUSH
30962: LD_INT 1
30964: NEG
30965: PUSH
30966: LD_INT 1
30968: NEG
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 2
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 0
30988: PUSH
30989: LD_INT 2
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 1
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 2
31010: PUSH
31011: LD_INT 0
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: PUSH
31021: LD_INT 1
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: PUSH
31031: LD_INT 2
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 1
31040: PUSH
31041: LD_INT 2
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 0
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 1
31060: NEG
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 2
31082: NEG
31083: PUSH
31084: LD_INT 1
31086: NEG
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: LD_INT 2
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: LIST
31108: LIST
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: LIST
31114: LIST
31115: LIST
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31125: LD_ADDR_VAR 0 54
31129: PUSH
31130: LD_INT 0
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 1
31145: NEG
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 1
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: LD_INT 1
31166: PUSH
31167: EMPTY
31168: LIST
31169: LIST
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: LD_INT 1
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: PUSH
31181: LD_INT 1
31183: NEG
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: LD_INT 1
31194: NEG
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 2
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 0
31218: PUSH
31219: LD_INT 2
31221: NEG
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 1
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 2
31240: PUSH
31241: LD_INT 0
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: PUSH
31251: LD_INT 1
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: PUSH
31261: LD_INT 2
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: LD_INT 2
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 0
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 1
31290: NEG
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: LD_INT 0
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 2
31312: NEG
31313: PUSH
31314: LD_INT 1
31316: NEG
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 2
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31355: LD_ADDR_VAR 0 55
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 1
31375: NEG
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: LD_INT 1
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 0
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 1
31413: NEG
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: LD_INT 2
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 0
31448: PUSH
31449: LD_INT 2
31451: NEG
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 1
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 2
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 1
31520: NEG
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: LD_INT 0
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: LD_INT 1
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 2
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31585: LD_ADDR_VAR 0 56
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: EMPTY
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 1
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 1
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: LD_INT 1
31658: NEG
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 2
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 0
31678: PUSH
31679: LD_INT 2
31681: NEG
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 1
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 2
31700: PUSH
31701: LD_INT 0
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 2
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 0
31740: PUSH
31741: LD_INT 2
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 1
31750: NEG
31751: PUSH
31752: LD_INT 1
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 2
31761: NEG
31762: PUSH
31763: LD_INT 0
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 2
31772: NEG
31773: PUSH
31774: LD_INT 1
31776: NEG
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 2
31784: NEG
31785: PUSH
31786: LD_INT 2
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31815: LD_ADDR_VAR 0 57
31819: PUSH
31820: LD_INT 0
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: LD_INT 1
31835: NEG
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 1
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: PUSH
31854: LD_INT 1
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 0
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: EMPTY
31868: LIST
31869: LIST
31870: PUSH
31871: LD_INT 1
31873: NEG
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 1
31884: NEG
31885: PUSH
31886: LD_INT 1
31888: NEG
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 2
31900: NEG
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: LD_INT 2
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 2
31950: PUSH
31951: LD_INT 2
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 1
31960: PUSH
31961: LD_INT 2
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: PUSH
31968: LD_INT 0
31970: PUSH
31971: LD_INT 2
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: LD_INT 1
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 2
31991: NEG
31992: PUSH
31993: LD_INT 0
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 2
32002: NEG
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 2
32014: NEG
32015: PUSH
32016: LD_INT 2
32018: NEG
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32045: LD_ADDR_VAR 0 58
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: LD_INT 1
32065: NEG
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 1
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: PUSH
32084: LD_INT 1
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 0
32093: PUSH
32094: LD_INT 1
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: LD_INT 0
32107: PUSH
32108: EMPTY
32109: LIST
32110: LIST
32111: PUSH
32112: LD_INT 1
32114: NEG
32115: PUSH
32116: LD_INT 1
32118: NEG
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 2
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: LD_INT 0
32138: PUSH
32139: LD_INT 2
32141: NEG
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PUSH
32147: LD_INT 1
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: LD_INT 0
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: PUSH
32171: LD_INT 1
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 1
32190: PUSH
32191: LD_INT 2
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: LD_INT 1
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: LD_INT 0
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: PUSH
32230: LD_INT 2
32232: NEG
32233: PUSH
32234: LD_INT 1
32236: NEG
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 2
32244: NEG
32245: PUSH
32246: LD_INT 2
32248: NEG
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32275: LD_ADDR_VAR 0 59
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 0
32292: PUSH
32293: LD_INT 1
32295: NEG
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 0
32306: PUSH
32307: EMPTY
32308: LIST
32309: LIST
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: PUSH
32331: LD_INT 1
32333: NEG
32334: PUSH
32335: LD_INT 0
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 1
32344: NEG
32345: PUSH
32346: LD_INT 1
32348: NEG
32349: PUSH
32350: EMPTY
32351: LIST
32352: LIST
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32363: LD_ADDR_VAR 0 60
32367: PUSH
32368: LD_INT 0
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: LD_INT 1
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 1
32391: PUSH
32392: LD_INT 0
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: PUSH
32399: LD_INT 1
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 1
32421: NEG
32422: PUSH
32423: LD_INT 0
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 1
32436: NEG
32437: PUSH
32438: EMPTY
32439: LIST
32440: LIST
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32451: LD_ADDR_VAR 0 61
32455: PUSH
32456: LD_INT 0
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: EMPTY
32474: LIST
32475: LIST
32476: PUSH
32477: LD_INT 1
32479: PUSH
32480: LD_INT 0
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: EMPTY
32494: LIST
32495: LIST
32496: PUSH
32497: LD_INT 0
32499: PUSH
32500: LD_INT 1
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: LD_INT 0
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 1
32520: NEG
32521: PUSH
32522: LD_INT 1
32524: NEG
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32539: LD_ADDR_VAR 0 62
32543: PUSH
32544: LD_INT 0
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: LD_INT 1
32559: NEG
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: PUSH
32565: LD_INT 1
32567: PUSH
32568: LD_INT 0
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: LD_INT 1
32577: PUSH
32578: LD_INT 1
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 0
32587: PUSH
32588: LD_INT 1
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 1
32608: NEG
32609: PUSH
32610: LD_INT 1
32612: NEG
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32627: LD_ADDR_VAR 0 63
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: LD_INT 1
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: PUSH
32687: LD_INT 0
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: LD_INT 1
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: EMPTY
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32715: LD_ADDR_VAR 0 64
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 0
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: PUSH
32754: LD_INT 1
32756: PUSH
32757: EMPTY
32758: LIST
32759: LIST
32760: PUSH
32761: LD_INT 0
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 1
32784: NEG
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: ST_TO_ADDR
// end ; 1 :
32803: GO 38700
32805: LD_INT 1
32807: DOUBLE
32808: EQUAL
32809: IFTRUE 32813
32811: GO 35436
32813: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32814: LD_ADDR_VAR 0 11
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 0
32833: PUSH
32834: LD_INT 3
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: PUSH
32845: LD_INT 2
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32858: LD_ADDR_VAR 0 12
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 3
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: EMPTY
32881: LIST
32882: LIST
32883: PUSH
32884: LD_INT 3
32886: PUSH
32887: LD_INT 1
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: LIST
32898: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32899: LD_ADDR_VAR 0 13
32903: PUSH
32904: LD_INT 3
32906: PUSH
32907: LD_INT 2
32909: PUSH
32910: EMPTY
32911: LIST
32912: LIST
32913: PUSH
32914: LD_INT 3
32916: PUSH
32917: LD_INT 3
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: LIST
32938: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32939: LD_ADDR_VAR 0 14
32943: PUSH
32944: LD_INT 1
32946: PUSH
32947: LD_INT 3
32949: PUSH
32950: EMPTY
32951: LIST
32952: LIST
32953: PUSH
32954: LD_INT 0
32956: PUSH
32957: LD_INT 3
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 1
32966: NEG
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32980: LD_ADDR_VAR 0 15
32984: PUSH
32985: LD_INT 2
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 3
32998: NEG
32999: PUSH
33000: LD_INT 0
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: NEG
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: LIST
33023: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33024: LD_ADDR_VAR 0 16
33028: PUSH
33029: LD_INT 2
33031: NEG
33032: PUSH
33033: LD_INT 3
33035: NEG
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 3
33043: NEG
33044: PUSH
33045: LD_INT 2
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 3
33055: NEG
33056: PUSH
33057: LD_INT 3
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: LIST
33069: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33070: LD_ADDR_VAR 0 17
33074: PUSH
33075: LD_INT 1
33077: NEG
33078: PUSH
33079: LD_INT 3
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 0
33089: PUSH
33090: LD_INT 3
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: PUSH
33101: LD_INT 2
33103: NEG
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33114: LD_ADDR_VAR 0 18
33118: PUSH
33119: LD_INT 2
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: EMPTY
33127: LIST
33128: LIST
33129: PUSH
33130: LD_INT 3
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: PUSH
33140: LD_INT 3
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33155: LD_ADDR_VAR 0 19
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: PUSH
33170: LD_INT 3
33172: PUSH
33173: LD_INT 3
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 2
33182: PUSH
33183: LD_INT 3
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: LIST
33194: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33195: LD_ADDR_VAR 0 20
33199: PUSH
33200: LD_INT 1
33202: PUSH
33203: LD_INT 3
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: LD_INT 3
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: NEG
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: LIST
33235: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33236: LD_ADDR_VAR 0 21
33240: PUSH
33241: LD_INT 2
33243: NEG
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 3
33254: NEG
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 3
33265: NEG
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33280: LD_ADDR_VAR 0 22
33284: PUSH
33285: LD_INT 2
33287: NEG
33288: PUSH
33289: LD_INT 3
33291: NEG
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 3
33299: NEG
33300: PUSH
33301: LD_INT 2
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: LD_INT 3
33315: NEG
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33326: LD_ADDR_VAR 0 23
33330: PUSH
33331: LD_INT 0
33333: PUSH
33334: LD_INT 3
33336: NEG
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 4
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: LD_INT 3
33359: NEG
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: LIST
33369: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33370: LD_ADDR_VAR 0 24
33374: PUSH
33375: LD_INT 3
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 3
33387: PUSH
33388: LD_INT 1
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 4
33398: PUSH
33399: LD_INT 1
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33411: LD_ADDR_VAR 0 25
33415: PUSH
33416: LD_INT 3
33418: PUSH
33419: LD_INT 3
33421: PUSH
33422: EMPTY
33423: LIST
33424: LIST
33425: PUSH
33426: LD_INT 4
33428: PUSH
33429: LD_INT 3
33431: PUSH
33432: EMPTY
33433: LIST
33434: LIST
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: LD_INT 4
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: LIST
33450: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
33451: LD_ADDR_VAR 0 26
33455: PUSH
33456: LD_INT 0
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 1
33468: PUSH
33469: LD_INT 4
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: NEG
33479: PUSH
33480: LD_INT 3
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33492: LD_ADDR_VAR 0 27
33496: PUSH
33497: LD_INT 3
33499: NEG
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 3
33510: NEG
33511: PUSH
33512: LD_INT 1
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 4
33521: NEG
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33536: LD_ADDR_VAR 0 28
33540: PUSH
33541: LD_INT 3
33543: NEG
33544: PUSH
33545: LD_INT 3
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 3
33555: NEG
33556: PUSH
33557: LD_INT 4
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 4
33567: NEG
33568: PUSH
33569: LD_INT 3
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33582: LD_ADDR_VAR 0 29
33586: PUSH
33587: LD_INT 1
33589: NEG
33590: PUSH
33591: LD_INT 3
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 0
33601: PUSH
33602: LD_INT 3
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 1
33612: PUSH
33613: LD_INT 2
33615: NEG
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 4
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: LD_INT 4
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 3
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 5
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 5
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 4
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 6
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 6
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 5
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33737: LD_ADDR_VAR 0 30
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 3
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 3
33765: PUSH
33766: LD_INT 1
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 3
33775: PUSH
33776: LD_INT 1
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 4
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 4
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 4
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 5
33817: PUSH
33818: LD_INT 0
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 5
33827: PUSH
33828: LD_INT 1
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 6
33848: PUSH
33849: LD_INT 0
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 6
33858: PUSH
33859: LD_INT 1
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33880: LD_ADDR_VAR 0 31
33884: PUSH
33885: LD_INT 3
33887: PUSH
33888: LD_INT 2
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: PUSH
33895: LD_INT 3
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: LD_INT 3
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: LD_INT 4
33917: PUSH
33918: LD_INT 3
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 4
33927: PUSH
33928: LD_INT 4
33930: PUSH
33931: EMPTY
33932: LIST
33933: LIST
33934: PUSH
33935: LD_INT 3
33937: PUSH
33938: LD_INT 4
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 5
33947: PUSH
33948: LD_INT 4
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PUSH
33955: LD_INT 5
33957: PUSH
33958: LD_INT 5
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 4
33967: PUSH
33968: LD_INT 5
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 6
33977: PUSH
33978: LD_INT 5
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 6
33987: PUSH
33988: LD_INT 6
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 5
33997: PUSH
33998: LD_INT 6
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34019: LD_ADDR_VAR 0 32
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: LD_INT 3
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 3
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 2
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: PUSH
34055: LD_INT 1
34057: PUSH
34058: LD_INT 4
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 4
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 3
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: LD_INT 5
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: LD_INT 5
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: LD_INT 1
34108: NEG
34109: PUSH
34110: LD_INT 4
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 6
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 6
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: LD_INT 5
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34162: LD_ADDR_VAR 0 33
34166: PUSH
34167: LD_INT 2
34169: NEG
34170: PUSH
34171: LD_INT 1
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 3
34180: NEG
34181: PUSH
34182: LD_INT 0
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 3
34191: NEG
34192: PUSH
34193: LD_INT 1
34195: NEG
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 3
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 4
34214: NEG
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 4
34225: NEG
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 4
34237: NEG
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 5
34248: NEG
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 5
34259: NEG
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 5
34271: NEG
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 6
34282: NEG
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 6
34293: NEG
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34317: LD_ADDR_VAR 0 34
34321: PUSH
34322: LD_INT 2
34324: NEG
34325: PUSH
34326: LD_INT 3
34328: NEG
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 3
34336: NEG
34337: PUSH
34338: LD_INT 2
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 3
34348: NEG
34349: PUSH
34350: LD_INT 3
34352: NEG
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 3
34360: NEG
34361: PUSH
34362: LD_INT 4
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 4
34372: NEG
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 4
34384: NEG
34385: PUSH
34386: LD_INT 4
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 4
34396: NEG
34397: PUSH
34398: LD_INT 5
34400: NEG
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: PUSH
34406: LD_INT 5
34408: NEG
34409: PUSH
34410: LD_INT 4
34412: NEG
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: PUSH
34418: LD_INT 5
34420: NEG
34421: PUSH
34422: LD_INT 5
34424: NEG
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 5
34432: NEG
34433: PUSH
34434: LD_INT 6
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 6
34444: NEG
34445: PUSH
34446: LD_INT 5
34448: NEG
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: PUSH
34454: LD_INT 6
34456: NEG
34457: PUSH
34458: LD_INT 6
34460: NEG
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34480: LD_ADDR_VAR 0 41
34484: PUSH
34485: LD_INT 0
34487: PUSH
34488: LD_INT 2
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 3
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 2
34513: NEG
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: EMPTY
34520: LIST
34521: LIST
34522: LIST
34523: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34524: LD_ADDR_VAR 0 42
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 3
34552: PUSH
34553: LD_INT 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: LIST
34564: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34565: LD_ADDR_VAR 0 43
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 3
34582: PUSH
34583: LD_INT 2
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 3
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34605: LD_ADDR_VAR 0 44
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: NEG
34633: PUSH
34634: LD_INT 2
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34646: LD_ADDR_VAR 0 45
34650: PUSH
34651: LD_INT 2
34653: NEG
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: PUSH
34662: LD_INT 2
34664: NEG
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 3
34675: NEG
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34690: LD_ADDR_VAR 0 46
34694: PUSH
34695: LD_INT 2
34697: NEG
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 2
34709: NEG
34710: PUSH
34711: LD_INT 3
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 3
34721: NEG
34722: PUSH
34723: LD_INT 2
34725: NEG
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34736: LD_ADDR_VAR 0 47
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 1
34755: NEG
34756: PUSH
34757: LD_INT 3
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34769: LD_ADDR_VAR 0 48
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: LD_INT 2
34779: NEG
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: PUSH
34785: LD_INT 2
34787: PUSH
34788: LD_INT 1
34790: NEG
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34800: LD_ADDR_VAR 0 49
34804: PUSH
34805: LD_INT 3
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 3
34817: PUSH
34818: LD_INT 2
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34829: LD_ADDR_VAR 0 50
34833: PUSH
34834: LD_INT 2
34836: PUSH
34837: LD_INT 3
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: LD_INT 3
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34858: LD_ADDR_VAR 0 51
34862: PUSH
34863: LD_INT 1
34865: NEG
34866: PUSH
34867: LD_INT 2
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: NEG
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34889: LD_ADDR_VAR 0 52
34893: PUSH
34894: LD_INT 3
34896: NEG
34897: PUSH
34898: LD_INT 1
34900: NEG
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 3
34908: NEG
34909: PUSH
34910: LD_INT 2
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34922: LD_ADDR_VAR 0 53
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: LD_INT 3
34933: NEG
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 3
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 2
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: LIST
34965: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34966: LD_ADDR_VAR 0 54
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 1
34976: NEG
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 3
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 3
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: LIST
35006: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35007: LD_ADDR_VAR 0 55
35011: PUSH
35012: LD_INT 3
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 3
35024: PUSH
35025: LD_INT 3
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 3
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: LIST
35046: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35047: LD_ADDR_VAR 0 56
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 3
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: LD_INT 2
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: LIST
35087: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35088: LD_ADDR_VAR 0 57
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 3
35106: NEG
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 3
35117: NEG
35118: PUSH
35119: LD_INT 1
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35132: LD_ADDR_VAR 0 58
35136: PUSH
35137: LD_INT 2
35139: NEG
35140: PUSH
35141: LD_INT 3
35143: NEG
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: LD_INT 2
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 3
35163: NEG
35164: PUSH
35165: LD_INT 3
35167: NEG
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: LIST
35177: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35178: LD_ADDR_VAR 0 59
35182: PUSH
35183: LD_INT 1
35185: NEG
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: LIST
35221: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35222: LD_ADDR_VAR 0 60
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 1
35232: NEG
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: LD_INT 2
35240: PUSH
35241: LD_INT 0
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 2
35250: PUSH
35251: LD_INT 1
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35263: LD_ADDR_VAR 0 61
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: LD_INT 1
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: LD_INT 1
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35303: LD_ADDR_VAR 0 62
35307: PUSH
35308: LD_INT 1
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 0
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 1
35330: NEG
35331: PUSH
35332: LD_INT 1
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35344: LD_ADDR_VAR 0 63
35348: PUSH
35349: LD_INT 1
35351: NEG
35352: PUSH
35353: LD_INT 1
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 2
35362: NEG
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 2
35373: NEG
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35388: LD_ADDR_VAR 0 64
35392: PUSH
35393: LD_INT 1
35395: NEG
35396: PUSH
35397: LD_INT 2
35399: NEG
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 2
35419: NEG
35420: PUSH
35421: LD_INT 2
35423: NEG
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: ST_TO_ADDR
// end ; 2 :
35434: GO 38700
35436: LD_INT 2
35438: DOUBLE
35439: EQUAL
35440: IFTRUE 35444
35442: GO 38699
35444: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35445: LD_ADDR_VAR 0 29
35449: PUSH
35450: LD_INT 4
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 4
35462: PUSH
35463: LD_INT 1
35465: NEG
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 5
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 5
35483: PUSH
35484: LD_INT 1
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 4
35493: PUSH
35494: LD_INT 1
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 3
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 3
35513: PUSH
35514: LD_INT 1
35516: NEG
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 3
35524: PUSH
35525: LD_INT 2
35527: NEG
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PUSH
35533: LD_INT 5
35535: PUSH
35536: LD_INT 2
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 3
35545: PUSH
35546: LD_INT 3
35548: PUSH
35549: EMPTY
35550: LIST
35551: LIST
35552: PUSH
35553: LD_INT 3
35555: PUSH
35556: LD_INT 2
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 4
35565: PUSH
35566: LD_INT 3
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 4
35575: PUSH
35576: LD_INT 4
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: PUSH
35583: LD_INT 3
35585: PUSH
35586: LD_INT 4
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 2
35595: PUSH
35596: LD_INT 3
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 2
35605: PUSH
35606: LD_INT 2
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 4
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 2
35625: PUSH
35626: LD_INT 4
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 0
35635: PUSH
35636: LD_INT 4
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 0
35645: PUSH
35646: LD_INT 3
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PUSH
35653: LD_INT 1
35655: PUSH
35656: LD_INT 4
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: LD_INT 5
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: LD_INT 5
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: NEG
35686: PUSH
35687: LD_INT 4
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 1
35696: NEG
35697: PUSH
35698: LD_INT 3
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 2
35707: PUSH
35708: LD_INT 5
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 3
35728: NEG
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 3
35739: NEG
35740: PUSH
35741: LD_INT 1
35743: NEG
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: LD_INT 0
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 2
35762: NEG
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 3
35773: NEG
35774: PUSH
35775: LD_INT 1
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 4
35784: NEG
35785: PUSH
35786: LD_INT 0
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 4
35795: NEG
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 4
35807: NEG
35808: PUSH
35809: LD_INT 2
35811: NEG
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 4
35830: NEG
35831: PUSH
35832: LD_INT 4
35834: NEG
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 4
35842: NEG
35843: PUSH
35844: LD_INT 5
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 3
35854: NEG
35855: PUSH
35856: LD_INT 4
35858: NEG
35859: PUSH
35860: EMPTY
35861: LIST
35862: LIST
35863: PUSH
35864: LD_INT 3
35866: NEG
35867: PUSH
35868: LD_INT 3
35870: NEG
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 4
35878: NEG
35879: PUSH
35880: LD_INT 3
35882: NEG
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 5
35890: NEG
35891: PUSH
35892: LD_INT 4
35894: NEG
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 5
35902: NEG
35903: PUSH
35904: LD_INT 5
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 3
35914: NEG
35915: PUSH
35916: LD_INT 5
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 5
35926: NEG
35927: PUSH
35928: LD_INT 3
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35983: LD_ADDR_VAR 0 30
35987: PUSH
35988: LD_INT 4
35990: PUSH
35991: LD_INT 4
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 4
36000: PUSH
36001: LD_INT 3
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: PUSH
36008: LD_INT 5
36010: PUSH
36011: LD_INT 4
36013: PUSH
36014: EMPTY
36015: LIST
36016: LIST
36017: PUSH
36018: LD_INT 5
36020: PUSH
36021: LD_INT 5
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 4
36030: PUSH
36031: LD_INT 5
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 3
36040: PUSH
36041: LD_INT 4
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 3
36050: PUSH
36051: LD_INT 3
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 5
36060: PUSH
36061: LD_INT 3
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 3
36070: PUSH
36071: LD_INT 5
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 3
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 1
36110: PUSH
36111: LD_INT 4
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: LD_INT 4
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 1
36130: NEG
36131: PUSH
36132: LD_INT 3
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: NEG
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 4
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 4
36173: NEG
36174: PUSH
36175: LD_INT 0
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 4
36184: NEG
36185: PUSH
36186: LD_INT 1
36188: NEG
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 3
36196: NEG
36197: PUSH
36198: LD_INT 0
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 3
36207: NEG
36208: PUSH
36209: LD_INT 1
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 4
36218: NEG
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 5
36229: NEG
36230: PUSH
36231: LD_INT 0
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 5
36240: NEG
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 5
36252: NEG
36253: PUSH
36254: LD_INT 2
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 3
36264: NEG
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: LD_INT 3
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 3
36287: NEG
36288: PUSH
36289: LD_INT 4
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: NEG
36300: PUSH
36301: LD_INT 3
36303: NEG
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: NEG
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 3
36323: NEG
36324: PUSH
36325: LD_INT 2
36327: NEG
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 4
36335: NEG
36336: PUSH
36337: LD_INT 3
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 4
36347: NEG
36348: PUSH
36349: LD_INT 4
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: LD_INT 4
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 4
36371: NEG
36372: PUSH
36373: LD_INT 2
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 0
36383: PUSH
36384: LD_INT 4
36386: NEG
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: LD_INT 5
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 4
36408: NEG
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 3
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 3
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: LD_INT 4
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: NEG
36451: PUSH
36452: LD_INT 5
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 3
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 2
36473: NEG
36474: PUSH
36475: LD_INT 5
36477: NEG
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36530: LD_ADDR_VAR 0 31
36534: PUSH
36535: LD_INT 0
36537: PUSH
36538: LD_INT 4
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: LD_INT 3
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 1
36557: PUSH
36558: LD_INT 4
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: LD_INT 5
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: LD_INT 5
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: LD_INT 4
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: PUSH
36600: LD_INT 3
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: LD_INT 5
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 2
36619: NEG
36620: PUSH
36621: LD_INT 3
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 3
36630: NEG
36631: PUSH
36632: LD_INT 0
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 3
36641: NEG
36642: PUSH
36643: LD_INT 1
36645: NEG
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: LD_INT 0
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 2
36664: NEG
36665: PUSH
36666: LD_INT 1
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 4
36686: NEG
36687: PUSH
36688: LD_INT 0
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 4
36697: NEG
36698: PUSH
36699: LD_INT 1
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 4
36709: NEG
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 2
36721: NEG
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 4
36732: NEG
36733: PUSH
36734: LD_INT 4
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 4
36744: NEG
36745: PUSH
36746: LD_INT 5
36748: NEG
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 3
36756: NEG
36757: PUSH
36758: LD_INT 4
36760: NEG
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: PUSH
36766: LD_INT 3
36768: NEG
36769: PUSH
36770: LD_INT 3
36772: NEG
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 4
36780: NEG
36781: PUSH
36782: LD_INT 3
36784: NEG
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 5
36792: NEG
36793: PUSH
36794: LD_INT 4
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 5
36804: NEG
36805: PUSH
36806: LD_INT 5
36808: NEG
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: NEG
36817: PUSH
36818: LD_INT 5
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 5
36828: NEG
36829: PUSH
36830: LD_INT 3
36832: NEG
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 0
36840: PUSH
36841: LD_INT 3
36843: NEG
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 4
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 3
36865: NEG
36866: PUSH
36867: EMPTY
36868: LIST
36869: LIST
36870: PUSH
36871: LD_INT 1
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 0
36884: PUSH
36885: LD_INT 2
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: LD_INT 3
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: LD_INT 4
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: LD_INT 2
36922: NEG
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 4
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 4
36942: PUSH
36943: LD_INT 0
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 4
36952: PUSH
36953: LD_INT 1
36955: NEG
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 5
36963: PUSH
36964: LD_INT 0
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 5
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 4
36983: PUSH
36984: LD_INT 1
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: LD_INT 0
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 3
37003: PUSH
37004: LD_INT 1
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: PUSH
37023: LD_INT 5
37025: PUSH
37026: LD_INT 2
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37080: LD_ADDR_VAR 0 32
37084: PUSH
37085: LD_INT 4
37087: NEG
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 4
37098: NEG
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 3
37121: NEG
37122: PUSH
37123: LD_INT 1
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 4
37132: NEG
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 5
37143: NEG
37144: PUSH
37145: LD_INT 0
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 5
37154: NEG
37155: PUSH
37156: LD_INT 1
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 5
37166: NEG
37167: PUSH
37168: LD_INT 2
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 3
37178: NEG
37179: PUSH
37180: LD_INT 2
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: NEG
37190: PUSH
37191: LD_INT 3
37193: NEG
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 3
37201: NEG
37202: PUSH
37203: LD_INT 4
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: LD_INT 3
37217: NEG
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 2
37225: NEG
37226: PUSH
37227: LD_INT 2
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 3
37237: NEG
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 4
37249: NEG
37250: PUSH
37251: LD_INT 3
37253: NEG
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 4
37261: NEG
37262: PUSH
37263: LD_INT 4
37265: NEG
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 2
37273: NEG
37274: PUSH
37275: LD_INT 4
37277: NEG
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 4
37285: NEG
37286: PUSH
37287: LD_INT 2
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: LD_INT 4
37300: NEG
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 0
37308: PUSH
37309: LD_INT 5
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 1
37319: PUSH
37320: LD_INT 4
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 1
37330: PUSH
37331: LD_INT 3
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 0
37341: PUSH
37342: LD_INT 3
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 4
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: LD_INT 5
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: LD_INT 3
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 2
37387: NEG
37388: PUSH
37389: LD_INT 5
37391: NEG
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 4
37420: PUSH
37421: LD_INT 0
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 4
37430: PUSH
37431: LD_INT 1
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 3
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 2
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 4
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 4
37492: PUSH
37493: LD_INT 4
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 4
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 5
37512: PUSH
37513: LD_INT 4
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 5
37522: PUSH
37523: LD_INT 5
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 4
37532: PUSH
37533: LD_INT 5
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: LD_INT 4
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 3
37552: PUSH
37553: LD_INT 3
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 5
37562: PUSH
37563: LD_INT 3
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 3
37572: PUSH
37573: LD_INT 5
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37627: LD_ADDR_VAR 0 33
37631: PUSH
37632: LD_INT 4
37634: NEG
37635: PUSH
37636: LD_INT 4
37638: NEG
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 4
37646: NEG
37647: PUSH
37648: LD_INT 5
37650: NEG
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 3
37658: NEG
37659: PUSH
37660: LD_INT 4
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 3
37670: NEG
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 4
37682: NEG
37683: PUSH
37684: LD_INT 3
37686: NEG
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 5
37694: NEG
37695: PUSH
37696: LD_INT 4
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 5
37706: NEG
37707: PUSH
37708: LD_INT 5
37710: NEG
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 3
37718: NEG
37719: PUSH
37720: LD_INT 5
37722: NEG
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: LD_INT 5
37730: NEG
37731: PUSH
37732: LD_INT 3
37734: NEG
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: LD_INT 3
37745: NEG
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 4
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 3
37767: NEG
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 2
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 0
37786: PUSH
37787: LD_INT 2
37789: NEG
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 3
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: LD_INT 4
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 2
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: LD_INT 4
37836: NEG
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 4
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 4
37854: PUSH
37855: LD_INT 1
37857: NEG
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 5
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: LD_INT 5
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: EMPTY
37880: LIST
37881: LIST
37882: PUSH
37883: LD_INT 4
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 3
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 3
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 3
37916: PUSH
37917: LD_INT 2
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 5
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 3
37937: PUSH
37938: LD_INT 3
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: PUSH
37945: LD_INT 3
37947: PUSH
37948: LD_INT 2
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 4
37957: PUSH
37958: LD_INT 3
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 4
37967: PUSH
37968: LD_INT 4
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: LD_INT 4
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: LD_INT 3
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 4
38007: PUSH
38008: LD_INT 2
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: LD_INT 4
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 0
38027: PUSH
38028: LD_INT 4
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: LD_INT 4
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 5
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: LD_INT 5
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 4
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 1
38088: NEG
38089: PUSH
38090: LD_INT 3
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: LD_INT 5
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 2
38109: NEG
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38165: LD_ADDR_VAR 0 34
38169: PUSH
38170: LD_INT 0
38172: PUSH
38173: LD_INT 4
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 0
38183: PUSH
38184: LD_INT 5
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: PUSH
38195: LD_INT 4
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 3
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: LD_INT 3
38219: NEG
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: LD_INT 4
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: NEG
38240: PUSH
38241: LD_INT 5
38243: NEG
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: PUSH
38252: LD_INT 3
38254: NEG
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 2
38262: NEG
38263: PUSH
38264: LD_INT 5
38266: NEG
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 3
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: LD_INT 1
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 4
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 4
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 3
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 1
38338: NEG
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: LD_INT 2
38349: NEG
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: LD_INT 4
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 4
38367: PUSH
38368: LD_INT 4
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 4
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 5
38387: PUSH
38388: LD_INT 4
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 5
38397: PUSH
38398: LD_INT 5
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 4
38407: PUSH
38408: LD_INT 5
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 3
38417: PUSH
38418: LD_INT 4
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 5
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: PUSH
38445: LD_INT 3
38447: PUSH
38448: LD_INT 5
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 0
38457: PUSH
38458: LD_INT 3
38460: PUSH
38461: EMPTY
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 0
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: PUSH
38478: LD_INT 3
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 4
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: LD_INT 4
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: NEG
38508: PUSH
38509: LD_INT 3
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: NEG
38519: PUSH
38520: LD_INT 2
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_INT 2
38529: PUSH
38530: LD_INT 4
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 2
38539: NEG
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 4
38550: NEG
38551: PUSH
38552: LD_INT 0
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 4
38561: NEG
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 3
38573: NEG
38574: PUSH
38575: LD_INT 0
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 3
38584: NEG
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 4
38595: NEG
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 5
38606: NEG
38607: PUSH
38608: LD_INT 0
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 5
38617: NEG
38618: PUSH
38619: LD_INT 1
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 5
38629: NEG
38630: PUSH
38631: LD_INT 2
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: ST_TO_ADDR
// end ; end ;
38697: GO 38700
38699: POP
// case btype of b_depot , b_warehouse :
38700: LD_VAR 0 1
38704: PUSH
38705: LD_INT 0
38707: DOUBLE
38708: EQUAL
38709: IFTRUE 38719
38711: LD_INT 1
38713: DOUBLE
38714: EQUAL
38715: IFTRUE 38719
38717: GO 38920
38719: POP
// case nation of nation_american :
38720: LD_VAR 0 5
38724: PUSH
38725: LD_INT 1
38727: DOUBLE
38728: EQUAL
38729: IFTRUE 38733
38731: GO 38789
38733: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38734: LD_ADDR_VAR 0 9
38738: PUSH
38739: LD_VAR 0 11
38743: PUSH
38744: LD_VAR 0 12
38748: PUSH
38749: LD_VAR 0 13
38753: PUSH
38754: LD_VAR 0 14
38758: PUSH
38759: LD_VAR 0 15
38763: PUSH
38764: LD_VAR 0 16
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: PUSH
38777: LD_VAR 0 4
38781: PUSH
38782: LD_INT 1
38784: PLUS
38785: ARRAY
38786: ST_TO_ADDR
38787: GO 38918
38789: LD_INT 2
38791: DOUBLE
38792: EQUAL
38793: IFTRUE 38797
38795: GO 38853
38797: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38798: LD_ADDR_VAR 0 9
38802: PUSH
38803: LD_VAR 0 17
38807: PUSH
38808: LD_VAR 0 18
38812: PUSH
38813: LD_VAR 0 19
38817: PUSH
38818: LD_VAR 0 20
38822: PUSH
38823: LD_VAR 0 21
38827: PUSH
38828: LD_VAR 0 22
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: LD_VAR 0 4
38845: PUSH
38846: LD_INT 1
38848: PLUS
38849: ARRAY
38850: ST_TO_ADDR
38851: GO 38918
38853: LD_INT 3
38855: DOUBLE
38856: EQUAL
38857: IFTRUE 38861
38859: GO 38917
38861: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38862: LD_ADDR_VAR 0 9
38866: PUSH
38867: LD_VAR 0 23
38871: PUSH
38872: LD_VAR 0 24
38876: PUSH
38877: LD_VAR 0 25
38881: PUSH
38882: LD_VAR 0 26
38886: PUSH
38887: LD_VAR 0 27
38891: PUSH
38892: LD_VAR 0 28
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: LD_VAR 0 4
38909: PUSH
38910: LD_INT 1
38912: PLUS
38913: ARRAY
38914: ST_TO_ADDR
38915: GO 38918
38917: POP
38918: GO 39473
38920: LD_INT 2
38922: DOUBLE
38923: EQUAL
38924: IFTRUE 38934
38926: LD_INT 3
38928: DOUBLE
38929: EQUAL
38930: IFTRUE 38934
38932: GO 38990
38934: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38935: LD_ADDR_VAR 0 9
38939: PUSH
38940: LD_VAR 0 29
38944: PUSH
38945: LD_VAR 0 30
38949: PUSH
38950: LD_VAR 0 31
38954: PUSH
38955: LD_VAR 0 32
38959: PUSH
38960: LD_VAR 0 33
38964: PUSH
38965: LD_VAR 0 34
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: PUSH
38978: LD_VAR 0 4
38982: PUSH
38983: LD_INT 1
38985: PLUS
38986: ARRAY
38987: ST_TO_ADDR
38988: GO 39473
38990: LD_INT 16
38992: DOUBLE
38993: EQUAL
38994: IFTRUE 39052
38996: LD_INT 17
38998: DOUBLE
38999: EQUAL
39000: IFTRUE 39052
39002: LD_INT 18
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39052
39008: LD_INT 19
39010: DOUBLE
39011: EQUAL
39012: IFTRUE 39052
39014: LD_INT 22
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39052
39020: LD_INT 20
39022: DOUBLE
39023: EQUAL
39024: IFTRUE 39052
39026: LD_INT 21
39028: DOUBLE
39029: EQUAL
39030: IFTRUE 39052
39032: LD_INT 23
39034: DOUBLE
39035: EQUAL
39036: IFTRUE 39052
39038: LD_INT 24
39040: DOUBLE
39041: EQUAL
39042: IFTRUE 39052
39044: LD_INT 25
39046: DOUBLE
39047: EQUAL
39048: IFTRUE 39052
39050: GO 39108
39052: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39053: LD_ADDR_VAR 0 9
39057: PUSH
39058: LD_VAR 0 35
39062: PUSH
39063: LD_VAR 0 36
39067: PUSH
39068: LD_VAR 0 37
39072: PUSH
39073: LD_VAR 0 38
39077: PUSH
39078: LD_VAR 0 39
39082: PUSH
39083: LD_VAR 0 40
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: PUSH
39096: LD_VAR 0 4
39100: PUSH
39101: LD_INT 1
39103: PLUS
39104: ARRAY
39105: ST_TO_ADDR
39106: GO 39473
39108: LD_INT 6
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39164
39114: LD_INT 7
39116: DOUBLE
39117: EQUAL
39118: IFTRUE 39164
39120: LD_INT 8
39122: DOUBLE
39123: EQUAL
39124: IFTRUE 39164
39126: LD_INT 13
39128: DOUBLE
39129: EQUAL
39130: IFTRUE 39164
39132: LD_INT 12
39134: DOUBLE
39135: EQUAL
39136: IFTRUE 39164
39138: LD_INT 15
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39164
39144: LD_INT 11
39146: DOUBLE
39147: EQUAL
39148: IFTRUE 39164
39150: LD_INT 14
39152: DOUBLE
39153: EQUAL
39154: IFTRUE 39164
39156: LD_INT 10
39158: DOUBLE
39159: EQUAL
39160: IFTRUE 39164
39162: GO 39220
39164: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39165: LD_ADDR_VAR 0 9
39169: PUSH
39170: LD_VAR 0 41
39174: PUSH
39175: LD_VAR 0 42
39179: PUSH
39180: LD_VAR 0 43
39184: PUSH
39185: LD_VAR 0 44
39189: PUSH
39190: LD_VAR 0 45
39194: PUSH
39195: LD_VAR 0 46
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: PUSH
39208: LD_VAR 0 4
39212: PUSH
39213: LD_INT 1
39215: PLUS
39216: ARRAY
39217: ST_TO_ADDR
39218: GO 39473
39220: LD_INT 36
39222: DOUBLE
39223: EQUAL
39224: IFTRUE 39228
39226: GO 39284
39228: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39229: LD_ADDR_VAR 0 9
39233: PUSH
39234: LD_VAR 0 47
39238: PUSH
39239: LD_VAR 0 48
39243: PUSH
39244: LD_VAR 0 49
39248: PUSH
39249: LD_VAR 0 50
39253: PUSH
39254: LD_VAR 0 51
39258: PUSH
39259: LD_VAR 0 52
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: PUSH
39272: LD_VAR 0 4
39276: PUSH
39277: LD_INT 1
39279: PLUS
39280: ARRAY
39281: ST_TO_ADDR
39282: GO 39473
39284: LD_INT 4
39286: DOUBLE
39287: EQUAL
39288: IFTRUE 39310
39290: LD_INT 5
39292: DOUBLE
39293: EQUAL
39294: IFTRUE 39310
39296: LD_INT 34
39298: DOUBLE
39299: EQUAL
39300: IFTRUE 39310
39302: LD_INT 37
39304: DOUBLE
39305: EQUAL
39306: IFTRUE 39310
39308: GO 39366
39310: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39311: LD_ADDR_VAR 0 9
39315: PUSH
39316: LD_VAR 0 53
39320: PUSH
39321: LD_VAR 0 54
39325: PUSH
39326: LD_VAR 0 55
39330: PUSH
39331: LD_VAR 0 56
39335: PUSH
39336: LD_VAR 0 57
39340: PUSH
39341: LD_VAR 0 58
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: PUSH
39354: LD_VAR 0 4
39358: PUSH
39359: LD_INT 1
39361: PLUS
39362: ARRAY
39363: ST_TO_ADDR
39364: GO 39473
39366: LD_INT 31
39368: DOUBLE
39369: EQUAL
39370: IFTRUE 39416
39372: LD_INT 32
39374: DOUBLE
39375: EQUAL
39376: IFTRUE 39416
39378: LD_INT 33
39380: DOUBLE
39381: EQUAL
39382: IFTRUE 39416
39384: LD_INT 27
39386: DOUBLE
39387: EQUAL
39388: IFTRUE 39416
39390: LD_INT 26
39392: DOUBLE
39393: EQUAL
39394: IFTRUE 39416
39396: LD_INT 28
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39416
39402: LD_INT 29
39404: DOUBLE
39405: EQUAL
39406: IFTRUE 39416
39408: LD_INT 30
39410: DOUBLE
39411: EQUAL
39412: IFTRUE 39416
39414: GO 39472
39416: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39417: LD_ADDR_VAR 0 9
39421: PUSH
39422: LD_VAR 0 59
39426: PUSH
39427: LD_VAR 0 60
39431: PUSH
39432: LD_VAR 0 61
39436: PUSH
39437: LD_VAR 0 62
39441: PUSH
39442: LD_VAR 0 63
39446: PUSH
39447: LD_VAR 0 64
39451: PUSH
39452: EMPTY
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: PUSH
39460: LD_VAR 0 4
39464: PUSH
39465: LD_INT 1
39467: PLUS
39468: ARRAY
39469: ST_TO_ADDR
39470: GO 39473
39472: POP
// temp_list2 = [ ] ;
39473: LD_ADDR_VAR 0 10
39477: PUSH
39478: EMPTY
39479: ST_TO_ADDR
// for i in temp_list do
39480: LD_ADDR_VAR 0 8
39484: PUSH
39485: LD_VAR 0 9
39489: PUSH
39490: FOR_IN
39491: IFFALSE 39543
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39493: LD_ADDR_VAR 0 10
39497: PUSH
39498: LD_VAR 0 10
39502: PUSH
39503: LD_VAR 0 8
39507: PUSH
39508: LD_INT 1
39510: ARRAY
39511: PUSH
39512: LD_VAR 0 2
39516: PLUS
39517: PUSH
39518: LD_VAR 0 8
39522: PUSH
39523: LD_INT 2
39525: ARRAY
39526: PUSH
39527: LD_VAR 0 3
39531: PLUS
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: ADD
39540: ST_TO_ADDR
39541: GO 39490
39543: POP
39544: POP
// result = temp_list2 ;
39545: LD_ADDR_VAR 0 7
39549: PUSH
39550: LD_VAR 0 10
39554: ST_TO_ADDR
// end ;
39555: LD_VAR 0 7
39559: RET
// export function EnemyInRange ( unit , dist ) ; begin
39560: LD_INT 0
39562: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_VAR 0 1
39572: PPUSH
39573: CALL_OW 255
39577: PPUSH
39578: LD_VAR 0 1
39582: PPUSH
39583: CALL_OW 250
39587: PPUSH
39588: LD_VAR 0 1
39592: PPUSH
39593: CALL_OW 251
39597: PPUSH
39598: LD_VAR 0 2
39602: PPUSH
39603: CALL 12817 0 4
39607: PUSH
39608: LD_INT 4
39610: ARRAY
39611: ST_TO_ADDR
// end ;
39612: LD_VAR 0 3
39616: RET
// export function PlayerSeeMe ( unit ) ; begin
39617: LD_INT 0
39619: PPUSH
// result := See ( your_side , unit ) ;
39620: LD_ADDR_VAR 0 2
39624: PUSH
39625: LD_OWVAR 2
39629: PPUSH
39630: LD_VAR 0 1
39634: PPUSH
39635: CALL_OW 292
39639: ST_TO_ADDR
// end ;
39640: LD_VAR 0 2
39644: RET
// export function ReverseDir ( unit ) ; begin
39645: LD_INT 0
39647: PPUSH
// if not unit then
39648: LD_VAR 0 1
39652: NOT
39653: IFFALSE 39657
// exit ;
39655: GO 39680
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39657: LD_ADDR_VAR 0 2
39661: PUSH
39662: LD_VAR 0 1
39666: PPUSH
39667: CALL_OW 254
39671: PUSH
39672: LD_INT 3
39674: PLUS
39675: PUSH
39676: LD_INT 6
39678: MOD
39679: ST_TO_ADDR
// end ;
39680: LD_VAR 0 2
39684: RET
// export function ReverseArray ( array ) ; var i ; begin
39685: LD_INT 0
39687: PPUSH
39688: PPUSH
// if not array then
39689: LD_VAR 0 1
39693: NOT
39694: IFFALSE 39698
// exit ;
39696: GO 39753
// result := [ ] ;
39698: LD_ADDR_VAR 0 2
39702: PUSH
39703: EMPTY
39704: ST_TO_ADDR
// for i := array downto 1 do
39705: LD_ADDR_VAR 0 3
39709: PUSH
39710: DOUBLE
39711: LD_VAR 0 1
39715: INC
39716: ST_TO_ADDR
39717: LD_INT 1
39719: PUSH
39720: FOR_DOWNTO
39721: IFFALSE 39751
// result := Join ( result , array [ i ] ) ;
39723: LD_ADDR_VAR 0 2
39727: PUSH
39728: LD_VAR 0 2
39732: PPUSH
39733: LD_VAR 0 1
39737: PUSH
39738: LD_VAR 0 3
39742: ARRAY
39743: PPUSH
39744: CALL 44595 0 2
39748: ST_TO_ADDR
39749: GO 39720
39751: POP
39752: POP
// end ;
39753: LD_VAR 0 2
39757: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39758: LD_INT 0
39760: PPUSH
39761: PPUSH
39762: PPUSH
39763: PPUSH
39764: PPUSH
39765: PPUSH
// if not unit or not hexes then
39766: LD_VAR 0 1
39770: NOT
39771: IFTRUE 39780
39773: PUSH
39774: LD_VAR 0 2
39778: NOT
39779: OR
39780: IFFALSE 39784
// exit ;
39782: GO 39907
// dist := 9999 ;
39784: LD_ADDR_VAR 0 5
39788: PUSH
39789: LD_INT 9999
39791: ST_TO_ADDR
// for i = 1 to hexes do
39792: LD_ADDR_VAR 0 4
39796: PUSH
39797: DOUBLE
39798: LD_INT 1
39800: DEC
39801: ST_TO_ADDR
39802: LD_VAR 0 2
39806: PUSH
39807: FOR_TO
39808: IFFALSE 39895
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39810: LD_ADDR_VAR 0 6
39814: PUSH
39815: LD_VAR 0 1
39819: PPUSH
39820: LD_VAR 0 2
39824: PUSH
39825: LD_VAR 0 4
39829: ARRAY
39830: PUSH
39831: LD_INT 1
39833: ARRAY
39834: PPUSH
39835: LD_VAR 0 2
39839: PUSH
39840: LD_VAR 0 4
39844: ARRAY
39845: PUSH
39846: LD_INT 2
39848: ARRAY
39849: PPUSH
39850: CALL_OW 297
39854: ST_TO_ADDR
// if tdist < dist then
39855: LD_VAR 0 6
39859: PUSH
39860: LD_VAR 0 5
39864: LESS
39865: IFFALSE 39893
// begin hex := hexes [ i ] ;
39867: LD_ADDR_VAR 0 8
39871: PUSH
39872: LD_VAR 0 2
39876: PUSH
39877: LD_VAR 0 4
39881: ARRAY
39882: ST_TO_ADDR
// dist := tdist ;
39883: LD_ADDR_VAR 0 5
39887: PUSH
39888: LD_VAR 0 6
39892: ST_TO_ADDR
// end ; end ;
39893: GO 39807
39895: POP
39896: POP
// result := hex ;
39897: LD_ADDR_VAR 0 3
39901: PUSH
39902: LD_VAR 0 8
39906: ST_TO_ADDR
// end ;
39907: LD_VAR 0 3
39911: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39912: LD_INT 0
39914: PPUSH
39915: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39916: LD_VAR 0 1
39920: NOT
39921: IFTRUE 39960
39923: PUSH
39924: LD_VAR 0 1
39928: PUSH
39929: LD_INT 21
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 23
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PPUSH
39953: CALL_OW 69
39957: IN
39958: NOT
39959: OR
39960: IFFALSE 39964
// exit ;
39962: GO 40011
// for i = 1 to 3 do
39964: LD_ADDR_VAR 0 3
39968: PUSH
39969: DOUBLE
39970: LD_INT 1
39972: DEC
39973: ST_TO_ADDR
39974: LD_INT 3
39976: PUSH
39977: FOR_TO
39978: IFFALSE 40009
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39980: LD_VAR 0 1
39984: PPUSH
39985: CALL_OW 250
39989: PPUSH
39990: LD_VAR 0 1
39994: PPUSH
39995: CALL_OW 251
39999: PPUSH
40000: LD_INT 1
40002: PPUSH
40003: CALL_OW 453
40007: GO 39977
40009: POP
40010: POP
// end ;
40011: LD_VAR 0 2
40015: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40016: LD_INT 0
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
// if not unit or not enemy_unit then
40024: LD_VAR 0 1
40028: NOT
40029: IFTRUE 40038
40031: PUSH
40032: LD_VAR 0 2
40036: NOT
40037: OR
40038: IFFALSE 40042
// exit ;
40040: GO 40513
// if GetLives ( i ) < 250 then
40042: LD_VAR 0 4
40046: PPUSH
40047: CALL_OW 256
40051: PUSH
40052: LD_INT 250
40054: LESS
40055: IFFALSE 40068
// begin ComAutodestruct ( i ) ;
40057: LD_VAR 0 4
40061: PPUSH
40062: CALL 39912 0 1
// exit ;
40066: GO 40513
// end ; x := GetX ( enemy_unit ) ;
40068: LD_ADDR_VAR 0 7
40072: PUSH
40073: LD_VAR 0 2
40077: PPUSH
40078: CALL_OW 250
40082: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40083: LD_ADDR_VAR 0 8
40087: PUSH
40088: LD_VAR 0 2
40092: PPUSH
40093: CALL_OW 251
40097: ST_TO_ADDR
// if not x or not y then
40098: LD_VAR 0 7
40102: NOT
40103: IFTRUE 40112
40105: PUSH
40106: LD_VAR 0 8
40110: NOT
40111: OR
40112: IFFALSE 40116
// exit ;
40114: GO 40513
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40116: LD_ADDR_VAR 0 6
40120: PUSH
40121: LD_VAR 0 7
40125: PPUSH
40126: LD_INT 0
40128: PPUSH
40129: LD_INT 4
40131: PPUSH
40132: CALL_OW 272
40136: PUSH
40137: LD_VAR 0 8
40141: PPUSH
40142: LD_INT 0
40144: PPUSH
40145: LD_INT 4
40147: PPUSH
40148: CALL_OW 273
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_VAR 0 7
40161: PPUSH
40162: LD_INT 1
40164: PPUSH
40165: LD_INT 4
40167: PPUSH
40168: CALL_OW 272
40172: PUSH
40173: LD_VAR 0 8
40177: PPUSH
40178: LD_INT 1
40180: PPUSH
40181: LD_INT 4
40183: PPUSH
40184: CALL_OW 273
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_VAR 0 7
40197: PPUSH
40198: LD_INT 2
40200: PPUSH
40201: LD_INT 4
40203: PPUSH
40204: CALL_OW 272
40208: PUSH
40209: LD_VAR 0 8
40213: PPUSH
40214: LD_INT 2
40216: PPUSH
40217: LD_INT 4
40219: PPUSH
40220: CALL_OW 273
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_VAR 0 7
40233: PPUSH
40234: LD_INT 3
40236: PPUSH
40237: LD_INT 4
40239: PPUSH
40240: CALL_OW 272
40244: PUSH
40245: LD_VAR 0 8
40249: PPUSH
40250: LD_INT 3
40252: PPUSH
40253: LD_INT 4
40255: PPUSH
40256: CALL_OW 273
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_VAR 0 7
40269: PPUSH
40270: LD_INT 4
40272: PPUSH
40273: LD_INT 4
40275: PPUSH
40276: CALL_OW 272
40280: PUSH
40281: LD_VAR 0 8
40285: PPUSH
40286: LD_INT 4
40288: PPUSH
40289: LD_INT 4
40291: PPUSH
40292: CALL_OW 273
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_VAR 0 7
40305: PPUSH
40306: LD_INT 5
40308: PPUSH
40309: LD_INT 4
40311: PPUSH
40312: CALL_OW 272
40316: PUSH
40317: LD_VAR 0 8
40321: PPUSH
40322: LD_INT 5
40324: PPUSH
40325: LD_INT 4
40327: PPUSH
40328: CALL_OW 273
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: LIST
40344: ST_TO_ADDR
// for i = tmp downto 1 do
40345: LD_ADDR_VAR 0 4
40349: PUSH
40350: DOUBLE
40351: LD_VAR 0 6
40355: INC
40356: ST_TO_ADDR
40357: LD_INT 1
40359: PUSH
40360: FOR_DOWNTO
40361: IFFALSE 40464
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40363: LD_VAR 0 6
40367: PUSH
40368: LD_VAR 0 4
40372: ARRAY
40373: PUSH
40374: LD_INT 1
40376: ARRAY
40377: PPUSH
40378: LD_VAR 0 6
40382: PUSH
40383: LD_VAR 0 4
40387: ARRAY
40388: PUSH
40389: LD_INT 2
40391: ARRAY
40392: PPUSH
40393: CALL_OW 488
40397: NOT
40398: IFTRUE 40440
40400: PUSH
40401: LD_VAR 0 6
40405: PUSH
40406: LD_VAR 0 4
40410: ARRAY
40411: PUSH
40412: LD_INT 1
40414: ARRAY
40415: PPUSH
40416: LD_VAR 0 6
40420: PUSH
40421: LD_VAR 0 4
40425: ARRAY
40426: PUSH
40427: LD_INT 2
40429: ARRAY
40430: PPUSH
40431: CALL_OW 428
40435: PUSH
40436: LD_INT 0
40438: NONEQUAL
40439: OR
40440: IFFALSE 40462
// tmp := Delete ( tmp , i ) ;
40442: LD_ADDR_VAR 0 6
40446: PUSH
40447: LD_VAR 0 6
40451: PPUSH
40452: LD_VAR 0 4
40456: PPUSH
40457: CALL_OW 3
40461: ST_TO_ADDR
40462: GO 40360
40464: POP
40465: POP
// j := GetClosestHex ( unit , tmp ) ;
40466: LD_ADDR_VAR 0 5
40470: PUSH
40471: LD_VAR 0 1
40475: PPUSH
40476: LD_VAR 0 6
40480: PPUSH
40481: CALL 39758 0 2
40485: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40486: LD_VAR 0 1
40490: PPUSH
40491: LD_VAR 0 5
40495: PUSH
40496: LD_INT 1
40498: ARRAY
40499: PPUSH
40500: LD_VAR 0 5
40504: PUSH
40505: LD_INT 2
40507: ARRAY
40508: PPUSH
40509: CALL_OW 111
// end ;
40513: LD_VAR 0 3
40517: RET
// export function PrepareApemanSoldier ( ) ; begin
40518: LD_INT 0
40520: PPUSH
// uc_nation := 0 ;
40521: LD_ADDR_OWVAR 21
40525: PUSH
40526: LD_INT 0
40528: ST_TO_ADDR
// hc_sex := sex_male ;
40529: LD_ADDR_OWVAR 27
40533: PUSH
40534: LD_INT 1
40536: ST_TO_ADDR
// hc_name :=  ;
40537: LD_ADDR_OWVAR 26
40541: PUSH
40542: LD_STRING 
40544: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
40545: LD_ADDR_OWVAR 28
40549: PUSH
40550: LD_INT 15
40552: ST_TO_ADDR
// hc_gallery :=  ;
40553: LD_ADDR_OWVAR 33
40557: PUSH
40558: LD_STRING 
40560: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40561: LD_ADDR_OWVAR 31
40565: PUSH
40566: LD_INT 0
40568: PPUSH
40569: LD_INT 3
40571: PPUSH
40572: CALL_OW 12
40576: PUSH
40577: LD_INT 0
40579: PPUSH
40580: LD_INT 3
40582: PPUSH
40583: CALL_OW 12
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 0
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
40600: LD_ADDR_OWVAR 29
40604: PUSH
40605: LD_INT 12
40607: PUSH
40608: LD_INT 12
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// end ;
40615: LD_VAR 0 1
40619: RET
// export function PrepareApemanEngineer ( ) ; begin
40620: LD_INT 0
40622: PPUSH
// uc_nation := 0 ;
40623: LD_ADDR_OWVAR 21
40627: PUSH
40628: LD_INT 0
40630: ST_TO_ADDR
// hc_sex := sex_male ;
40631: LD_ADDR_OWVAR 27
40635: PUSH
40636: LD_INT 1
40638: ST_TO_ADDR
// hc_name :=  ;
40639: LD_ADDR_OWVAR 26
40643: PUSH
40644: LD_STRING 
40646: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40647: LD_ADDR_OWVAR 28
40651: PUSH
40652: LD_INT 16
40654: ST_TO_ADDR
// hc_gallery :=  ;
40655: LD_ADDR_OWVAR 33
40659: PUSH
40660: LD_STRING 
40662: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40663: LD_ADDR_OWVAR 31
40667: PUSH
40668: LD_INT 0
40670: PPUSH
40671: LD_INT 3
40673: PPUSH
40674: CALL_OW 12
40678: PUSH
40679: LD_INT 0
40681: PPUSH
40682: LD_INT 3
40684: PPUSH
40685: CALL_OW 12
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
40702: LD_ADDR_OWVAR 29
40706: PUSH
40707: LD_INT 12
40709: PUSH
40710: LD_INT 12
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: ST_TO_ADDR
// end ;
40717: LD_VAR 0 1
40721: RET
// export function PrepareApeman ( agressivity ) ; begin
40722: LD_INT 0
40724: PPUSH
// uc_side := 0 ;
40725: LD_ADDR_OWVAR 20
40729: PUSH
40730: LD_INT 0
40732: ST_TO_ADDR
// uc_nation := 0 ;
40733: LD_ADDR_OWVAR 21
40737: PUSH
40738: LD_INT 0
40740: ST_TO_ADDR
// hc_sex := sex_male ;
40741: LD_ADDR_OWVAR 27
40745: PUSH
40746: LD_INT 1
40748: ST_TO_ADDR
// hc_class := class_apeman ;
40749: LD_ADDR_OWVAR 28
40753: PUSH
40754: LD_INT 12
40756: ST_TO_ADDR
// hc_gallery :=  ;
40757: LD_ADDR_OWVAR 33
40761: PUSH
40762: LD_STRING 
40764: ST_TO_ADDR
// hc_name :=  ;
40765: LD_ADDR_OWVAR 26
40769: PUSH
40770: LD_STRING 
40772: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
40773: LD_ADDR_OWVAR 29
40777: PUSH
40778: LD_INT 12
40780: PUSH
40781: LD_INT 12
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: ST_TO_ADDR
// if agressivity = 0 then
40788: LD_VAR 0 1
40792: PUSH
40793: LD_INT 0
40795: EQUAL
40796: IFFALSE 40808
// hc_agressivity := 0 else
40798: LD_ADDR_OWVAR 35
40802: PUSH
40803: LD_INT 0
40805: ST_TO_ADDR
40806: GO 40829
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40808: LD_ADDR_OWVAR 35
40812: PUSH
40813: LD_VAR 0 1
40817: NEG
40818: PPUSH
40819: LD_VAR 0 1
40823: PPUSH
40824: CALL_OW 12
40828: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40829: LD_ADDR_OWVAR 31
40833: PUSH
40834: LD_INT 0
40836: PPUSH
40837: LD_INT 3
40839: PPUSH
40840: CALL_OW 12
40844: PUSH
40845: LD_INT 0
40847: PPUSH
40848: LD_INT 3
40850: PPUSH
40851: CALL_OW 12
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: LD_INT 0
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: ST_TO_ADDR
// end ;
40868: LD_VAR 0 2
40872: RET
// export function PrepareTiger ( agressivity ) ; begin
40873: LD_INT 0
40875: PPUSH
// uc_side := 0 ;
40876: LD_ADDR_OWVAR 20
40880: PUSH
40881: LD_INT 0
40883: ST_TO_ADDR
// uc_nation := 0 ;
40884: LD_ADDR_OWVAR 21
40888: PUSH
40889: LD_INT 0
40891: ST_TO_ADDR
// InitHc ;
40892: CALL_OW 19
// hc_class := class_tiger ;
40896: LD_ADDR_OWVAR 28
40900: PUSH
40901: LD_INT 14
40903: ST_TO_ADDR
// hc_gallery :=  ;
40904: LD_ADDR_OWVAR 33
40908: PUSH
40909: LD_STRING 
40911: ST_TO_ADDR
// hc_name :=  ;
40912: LD_ADDR_OWVAR 26
40916: PUSH
40917: LD_STRING 
40919: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40920: LD_ADDR_OWVAR 35
40924: PUSH
40925: LD_VAR 0 1
40929: NEG
40930: PPUSH
40931: LD_VAR 0 1
40935: PPUSH
40936: CALL_OW 12
40940: ST_TO_ADDR
// end ;
40941: LD_VAR 0 2
40945: RET
// export function PrepareEnchidna ( ) ; begin
40946: LD_INT 0
40948: PPUSH
// uc_side := 0 ;
40949: LD_ADDR_OWVAR 20
40953: PUSH
40954: LD_INT 0
40956: ST_TO_ADDR
// uc_nation := 0 ;
40957: LD_ADDR_OWVAR 21
40961: PUSH
40962: LD_INT 0
40964: ST_TO_ADDR
// InitHc ;
40965: CALL_OW 19
// hc_class := class_baggie ;
40969: LD_ADDR_OWVAR 28
40973: PUSH
40974: LD_INT 13
40976: ST_TO_ADDR
// hc_gallery :=  ;
40977: LD_ADDR_OWVAR 33
40981: PUSH
40982: LD_STRING 
40984: ST_TO_ADDR
// hc_name :=  ;
40985: LD_ADDR_OWVAR 26
40989: PUSH
40990: LD_STRING 
40992: ST_TO_ADDR
// end ;
40993: LD_VAR 0 1
40997: RET
// export function PrepareFrog ( ) ; begin
40998: LD_INT 0
41000: PPUSH
// uc_side := 0 ;
41001: LD_ADDR_OWVAR 20
41005: PUSH
41006: LD_INT 0
41008: ST_TO_ADDR
// uc_nation := 0 ;
41009: LD_ADDR_OWVAR 21
41013: PUSH
41014: LD_INT 0
41016: ST_TO_ADDR
// InitHc ;
41017: CALL_OW 19
// hc_class := class_frog ;
41021: LD_ADDR_OWVAR 28
41025: PUSH
41026: LD_INT 19
41028: ST_TO_ADDR
// hc_gallery :=  ;
41029: LD_ADDR_OWVAR 33
41033: PUSH
41034: LD_STRING 
41036: ST_TO_ADDR
// hc_name :=  ;
41037: LD_ADDR_OWVAR 26
41041: PUSH
41042: LD_STRING 
41044: ST_TO_ADDR
// end ;
41045: LD_VAR 0 1
41049: RET
// export function PrepareFish ( ) ; begin
41050: LD_INT 0
41052: PPUSH
// uc_side := 0 ;
41053: LD_ADDR_OWVAR 20
41057: PUSH
41058: LD_INT 0
41060: ST_TO_ADDR
// uc_nation := 0 ;
41061: LD_ADDR_OWVAR 21
41065: PUSH
41066: LD_INT 0
41068: ST_TO_ADDR
// InitHc ;
41069: CALL_OW 19
// hc_class := class_fish ;
41073: LD_ADDR_OWVAR 28
41077: PUSH
41078: LD_INT 20
41080: ST_TO_ADDR
// hc_gallery :=  ;
41081: LD_ADDR_OWVAR 33
41085: PUSH
41086: LD_STRING 
41088: ST_TO_ADDR
// hc_name :=  ;
41089: LD_ADDR_OWVAR 26
41093: PUSH
41094: LD_STRING 
41096: ST_TO_ADDR
// end ;
41097: LD_VAR 0 1
41101: RET
// export function PrepareBird ( ) ; begin
41102: LD_INT 0
41104: PPUSH
// uc_side := 0 ;
41105: LD_ADDR_OWVAR 20
41109: PUSH
41110: LD_INT 0
41112: ST_TO_ADDR
// uc_nation := 0 ;
41113: LD_ADDR_OWVAR 21
41117: PUSH
41118: LD_INT 0
41120: ST_TO_ADDR
// InitHc ;
41121: CALL_OW 19
// hc_class := class_phororhacos ;
41125: LD_ADDR_OWVAR 28
41129: PUSH
41130: LD_INT 18
41132: ST_TO_ADDR
// hc_gallery :=  ;
41133: LD_ADDR_OWVAR 33
41137: PUSH
41138: LD_STRING 
41140: ST_TO_ADDR
// hc_name :=  ;
41141: LD_ADDR_OWVAR 26
41145: PUSH
41146: LD_STRING 
41148: ST_TO_ADDR
// end ;
41149: LD_VAR 0 1
41153: RET
// export function PrepareHorse ( ) ; begin
41154: LD_INT 0
41156: PPUSH
// uc_side := 0 ;
41157: LD_ADDR_OWVAR 20
41161: PUSH
41162: LD_INT 0
41164: ST_TO_ADDR
// uc_nation := 0 ;
41165: LD_ADDR_OWVAR 21
41169: PUSH
41170: LD_INT 0
41172: ST_TO_ADDR
// InitHc ;
41173: CALL_OW 19
// hc_class := class_horse ;
41177: LD_ADDR_OWVAR 28
41181: PUSH
41182: LD_INT 21
41184: ST_TO_ADDR
// hc_gallery :=  ;
41185: LD_ADDR_OWVAR 33
41189: PUSH
41190: LD_STRING 
41192: ST_TO_ADDR
// hc_name :=  ;
41193: LD_ADDR_OWVAR 26
41197: PUSH
41198: LD_STRING 
41200: ST_TO_ADDR
// end ;
41201: LD_VAR 0 1
41205: RET
// export function PrepareMastodont ( ) ; begin
41206: LD_INT 0
41208: PPUSH
// uc_side := 0 ;
41209: LD_ADDR_OWVAR 20
41213: PUSH
41214: LD_INT 0
41216: ST_TO_ADDR
// uc_nation := 0 ;
41217: LD_ADDR_OWVAR 21
41221: PUSH
41222: LD_INT 0
41224: ST_TO_ADDR
// vc_chassis := class_mastodont ;
41225: LD_ADDR_OWVAR 37
41229: PUSH
41230: LD_INT 31
41232: ST_TO_ADDR
// vc_control := control_rider ;
41233: LD_ADDR_OWVAR 38
41237: PUSH
41238: LD_INT 4
41240: ST_TO_ADDR
// end ;
41241: LD_VAR 0 1
41245: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41246: LD_INT 0
41248: PPUSH
41249: PPUSH
41250: PPUSH
// uc_side = 0 ;
41251: LD_ADDR_OWVAR 20
41255: PUSH
41256: LD_INT 0
41258: ST_TO_ADDR
// uc_nation = 0 ;
41259: LD_ADDR_OWVAR 21
41263: PUSH
41264: LD_INT 0
41266: ST_TO_ADDR
// InitHc_All ( ) ;
41267: CALL_OW 584
// InitVc ;
41271: CALL_OW 20
// if mastodonts then
41275: LD_VAR 0 6
41279: IFFALSE 41346
// for i = 1 to mastodonts do
41281: LD_ADDR_VAR 0 11
41285: PUSH
41286: DOUBLE
41287: LD_INT 1
41289: DEC
41290: ST_TO_ADDR
41291: LD_VAR 0 6
41295: PUSH
41296: FOR_TO
41297: IFFALSE 41344
// begin vc_chassis := 31 ;
41299: LD_ADDR_OWVAR 37
41303: PUSH
41304: LD_INT 31
41306: ST_TO_ADDR
// vc_control := control_rider ;
41307: LD_ADDR_OWVAR 38
41311: PUSH
41312: LD_INT 4
41314: ST_TO_ADDR
// animal := CreateVehicle ;
41315: LD_ADDR_VAR 0 12
41319: PUSH
41320: CALL_OW 45
41324: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41325: LD_VAR 0 12
41329: PPUSH
41330: LD_VAR 0 8
41334: PPUSH
41335: LD_INT 0
41337: PPUSH
41338: CALL 43488 0 3
// end ;
41342: GO 41296
41344: POP
41345: POP
// if horses then
41346: LD_VAR 0 5
41350: IFFALSE 41417
// for i = 1 to horses do
41352: LD_ADDR_VAR 0 11
41356: PUSH
41357: DOUBLE
41358: LD_INT 1
41360: DEC
41361: ST_TO_ADDR
41362: LD_VAR 0 5
41366: PUSH
41367: FOR_TO
41368: IFFALSE 41415
// begin hc_class := 21 ;
41370: LD_ADDR_OWVAR 28
41374: PUSH
41375: LD_INT 21
41377: ST_TO_ADDR
// hc_gallery :=  ;
41378: LD_ADDR_OWVAR 33
41382: PUSH
41383: LD_STRING 
41385: ST_TO_ADDR
// animal := CreateHuman ;
41386: LD_ADDR_VAR 0 12
41390: PUSH
41391: CALL_OW 44
41395: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41396: LD_VAR 0 12
41400: PPUSH
41401: LD_VAR 0 8
41405: PPUSH
41406: LD_INT 0
41408: PPUSH
41409: CALL 43488 0 3
// end ;
41413: GO 41367
41415: POP
41416: POP
// if birds then
41417: LD_VAR 0 1
41421: IFFALSE 41488
// for i = 1 to birds do
41423: LD_ADDR_VAR 0 11
41427: PUSH
41428: DOUBLE
41429: LD_INT 1
41431: DEC
41432: ST_TO_ADDR
41433: LD_VAR 0 1
41437: PUSH
41438: FOR_TO
41439: IFFALSE 41486
// begin hc_class := 18 ;
41441: LD_ADDR_OWVAR 28
41445: PUSH
41446: LD_INT 18
41448: ST_TO_ADDR
// hc_gallery =  ;
41449: LD_ADDR_OWVAR 33
41453: PUSH
41454: LD_STRING 
41456: ST_TO_ADDR
// animal := CreateHuman ;
41457: LD_ADDR_VAR 0 12
41461: PUSH
41462: CALL_OW 44
41466: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41467: LD_VAR 0 12
41471: PPUSH
41472: LD_VAR 0 8
41476: PPUSH
41477: LD_INT 0
41479: PPUSH
41480: CALL 43488 0 3
// end ;
41484: GO 41438
41486: POP
41487: POP
// if tigers then
41488: LD_VAR 0 2
41492: IFFALSE 41576
// for i = 1 to tigers do
41494: LD_ADDR_VAR 0 11
41498: PUSH
41499: DOUBLE
41500: LD_INT 1
41502: DEC
41503: ST_TO_ADDR
41504: LD_VAR 0 2
41508: PUSH
41509: FOR_TO
41510: IFFALSE 41574
// begin hc_class = class_tiger ;
41512: LD_ADDR_OWVAR 28
41516: PUSH
41517: LD_INT 14
41519: ST_TO_ADDR
// hc_gallery =  ;
41520: LD_ADDR_OWVAR 33
41524: PUSH
41525: LD_STRING 
41527: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41528: LD_ADDR_OWVAR 35
41532: PUSH
41533: LD_INT 7
41535: NEG
41536: PPUSH
41537: LD_INT 7
41539: PPUSH
41540: CALL_OW 12
41544: ST_TO_ADDR
// animal := CreateHuman ;
41545: LD_ADDR_VAR 0 12
41549: PUSH
41550: CALL_OW 44
41554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41555: LD_VAR 0 12
41559: PPUSH
41560: LD_VAR 0 8
41564: PPUSH
41565: LD_INT 0
41567: PPUSH
41568: CALL 43488 0 3
// end ;
41572: GO 41509
41574: POP
41575: POP
// if apemans then
41576: LD_VAR 0 3
41580: IFFALSE 41703
// for i = 1 to apemans do
41582: LD_ADDR_VAR 0 11
41586: PUSH
41587: DOUBLE
41588: LD_INT 1
41590: DEC
41591: ST_TO_ADDR
41592: LD_VAR 0 3
41596: PUSH
41597: FOR_TO
41598: IFFALSE 41701
// begin hc_class = class_apeman ;
41600: LD_ADDR_OWVAR 28
41604: PUSH
41605: LD_INT 12
41607: ST_TO_ADDR
// hc_gallery =  ;
41608: LD_ADDR_OWVAR 33
41612: PUSH
41613: LD_STRING 
41615: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41616: LD_ADDR_OWVAR 35
41620: PUSH
41621: LD_INT 2
41623: NEG
41624: PPUSH
41625: LD_INT 2
41627: PPUSH
41628: CALL_OW 12
41632: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41633: LD_ADDR_OWVAR 31
41637: PUSH
41638: LD_INT 1
41640: PPUSH
41641: LD_INT 3
41643: PPUSH
41644: CALL_OW 12
41648: PUSH
41649: LD_INT 1
41651: PPUSH
41652: LD_INT 3
41654: PPUSH
41655: CALL_OW 12
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// animal := CreateHuman ;
41672: LD_ADDR_VAR 0 12
41676: PUSH
41677: CALL_OW 44
41681: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41682: LD_VAR 0 12
41686: PPUSH
41687: LD_VAR 0 8
41691: PPUSH
41692: LD_INT 0
41694: PPUSH
41695: CALL 43488 0 3
// end ;
41699: GO 41597
41701: POP
41702: POP
// if enchidnas then
41703: LD_VAR 0 4
41707: IFFALSE 41774
// for i = 1 to enchidnas do
41709: LD_ADDR_VAR 0 11
41713: PUSH
41714: DOUBLE
41715: LD_INT 1
41717: DEC
41718: ST_TO_ADDR
41719: LD_VAR 0 4
41723: PUSH
41724: FOR_TO
41725: IFFALSE 41772
// begin hc_class = 13 ;
41727: LD_ADDR_OWVAR 28
41731: PUSH
41732: LD_INT 13
41734: ST_TO_ADDR
// hc_gallery =  ;
41735: LD_ADDR_OWVAR 33
41739: PUSH
41740: LD_STRING 
41742: ST_TO_ADDR
// animal := CreateHuman ;
41743: LD_ADDR_VAR 0 12
41747: PUSH
41748: CALL_OW 44
41752: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41753: LD_VAR 0 12
41757: PPUSH
41758: LD_VAR 0 8
41762: PPUSH
41763: LD_INT 0
41765: PPUSH
41766: CALL 43488 0 3
// end ;
41770: GO 41724
41772: POP
41773: POP
// if fishes then
41774: LD_VAR 0 7
41778: IFFALSE 41845
// for i = 1 to fishes do
41780: LD_ADDR_VAR 0 11
41784: PUSH
41785: DOUBLE
41786: LD_INT 1
41788: DEC
41789: ST_TO_ADDR
41790: LD_VAR 0 7
41794: PUSH
41795: FOR_TO
41796: IFFALSE 41843
// begin hc_class = 20 ;
41798: LD_ADDR_OWVAR 28
41802: PUSH
41803: LD_INT 20
41805: ST_TO_ADDR
// hc_gallery =  ;
41806: LD_ADDR_OWVAR 33
41810: PUSH
41811: LD_STRING 
41813: ST_TO_ADDR
// animal := CreateHuman ;
41814: LD_ADDR_VAR 0 12
41818: PUSH
41819: CALL_OW 44
41823: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41824: LD_VAR 0 12
41828: PPUSH
41829: LD_VAR 0 9
41833: PPUSH
41834: LD_INT 0
41836: PPUSH
41837: CALL 43488 0 3
// end ;
41841: GO 41795
41843: POP
41844: POP
// end ;
41845: LD_VAR 0 10
41849: RET
// export function WantHeal ( sci , unit ) ; begin
41850: LD_INT 0
41852: PPUSH
// if GetTaskList ( sci ) > 0 then
41853: LD_VAR 0 1
41857: PPUSH
41858: CALL_OW 437
41862: PUSH
41863: LD_INT 0
41865: GREATER
41866: IFFALSE 41938
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41868: LD_VAR 0 1
41872: PPUSH
41873: CALL_OW 437
41877: PUSH
41878: LD_INT 1
41880: ARRAY
41881: PUSH
41882: LD_INT 1
41884: ARRAY
41885: PUSH
41886: LD_STRING l
41888: EQUAL
41889: IFFALSE 41916
41891: PUSH
41892: LD_VAR 0 1
41896: PPUSH
41897: CALL_OW 437
41901: PUSH
41902: LD_INT 1
41904: ARRAY
41905: PUSH
41906: LD_INT 4
41908: ARRAY
41909: PUSH
41910: LD_VAR 0 2
41914: EQUAL
41915: AND
41916: IFFALSE 41928
// result := true else
41918: LD_ADDR_VAR 0 3
41922: PUSH
41923: LD_INT 1
41925: ST_TO_ADDR
41926: GO 41936
// result := false ;
41928: LD_ADDR_VAR 0 3
41932: PUSH
41933: LD_INT 0
41935: ST_TO_ADDR
// end else
41936: GO 41946
// result := false ;
41938: LD_ADDR_VAR 0 3
41942: PUSH
41943: LD_INT 0
41945: ST_TO_ADDR
// end ;
41946: LD_VAR 0 3
41950: RET
// export function HealTarget ( sci ) ; begin
41951: LD_INT 0
41953: PPUSH
// if not sci then
41954: LD_VAR 0 1
41958: NOT
41959: IFFALSE 41963
// exit ;
41961: GO 42028
// result := 0 ;
41963: LD_ADDR_VAR 0 2
41967: PUSH
41968: LD_INT 0
41970: ST_TO_ADDR
// if GetTaskList ( sci ) then
41971: LD_VAR 0 1
41975: PPUSH
41976: CALL_OW 437
41980: IFFALSE 42028
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41982: LD_VAR 0 1
41986: PPUSH
41987: CALL_OW 437
41991: PUSH
41992: LD_INT 1
41994: ARRAY
41995: PUSH
41996: LD_INT 1
41998: ARRAY
41999: PUSH
42000: LD_STRING l
42002: EQUAL
42003: IFFALSE 42028
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42005: LD_ADDR_VAR 0 2
42009: PUSH
42010: LD_VAR 0 1
42014: PPUSH
42015: CALL_OW 437
42019: PUSH
42020: LD_INT 1
42022: ARRAY
42023: PUSH
42024: LD_INT 4
42026: ARRAY
42027: ST_TO_ADDR
// end ;
42028: LD_VAR 0 2
42032: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42033: LD_INT 0
42035: PPUSH
42036: PPUSH
42037: PPUSH
42038: PPUSH
// if not base_units then
42039: LD_VAR 0 1
42043: NOT
42044: IFFALSE 42048
// exit ;
42046: GO 42135
// result := false ;
42048: LD_ADDR_VAR 0 2
42052: PUSH
42053: LD_INT 0
42055: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42056: LD_ADDR_VAR 0 5
42060: PUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: LD_INT 21
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PPUSH
42076: CALL_OW 72
42080: ST_TO_ADDR
// if not tmp then
42081: LD_VAR 0 5
42085: NOT
42086: IFFALSE 42090
// exit ;
42088: GO 42135
// for i in tmp do
42090: LD_ADDR_VAR 0 3
42094: PUSH
42095: LD_VAR 0 5
42099: PUSH
42100: FOR_IN
42101: IFFALSE 42133
// begin result := EnemyInRange ( i , 22 ) ;
42103: LD_ADDR_VAR 0 2
42107: PUSH
42108: LD_VAR 0 3
42112: PPUSH
42113: LD_INT 22
42115: PPUSH
42116: CALL 39560 0 2
42120: ST_TO_ADDR
// if result then
42121: LD_VAR 0 2
42125: IFFALSE 42131
// exit ;
42127: POP
42128: POP
42129: GO 42135
// end ;
42131: GO 42100
42133: POP
42134: POP
// end ;
42135: LD_VAR 0 2
42139: RET
// export function FilterByTag ( units , tag ) ; begin
42140: LD_INT 0
42142: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42143: LD_ADDR_VAR 0 3
42147: PUSH
42148: LD_VAR 0 1
42152: PPUSH
42153: LD_INT 120
42155: PUSH
42156: LD_VAR 0 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PPUSH
42165: CALL_OW 72
42169: ST_TO_ADDR
// end ;
42170: LD_VAR 0 3
42174: RET
// export function IsDriver ( un ) ; begin
42175: LD_INT 0
42177: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42178: LD_ADDR_VAR 0 2
42182: PUSH
42183: LD_VAR 0 1
42187: PUSH
42188: LD_INT 55
42190: PUSH
42191: EMPTY
42192: LIST
42193: PPUSH
42194: CALL_OW 69
42198: IN
42199: ST_TO_ADDR
// end ;
42200: LD_VAR 0 2
42204: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42205: LD_INT 0
42207: PPUSH
42208: PPUSH
// list := [ ] ;
42209: LD_ADDR_VAR 0 5
42213: PUSH
42214: EMPTY
42215: ST_TO_ADDR
// case d of 0 :
42216: LD_VAR 0 3
42220: PUSH
42221: LD_INT 0
42223: DOUBLE
42224: EQUAL
42225: IFTRUE 42229
42227: GO 42362
42229: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42230: LD_ADDR_VAR 0 5
42234: PUSH
42235: LD_VAR 0 1
42239: PUSH
42240: LD_INT 4
42242: MINUS
42243: PUSH
42244: LD_VAR 0 2
42248: PUSH
42249: LD_INT 4
42251: MINUS
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: LIST
42260: PUSH
42261: LD_VAR 0 1
42265: PUSH
42266: LD_INT 3
42268: MINUS
42269: PUSH
42270: LD_VAR 0 2
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: LIST
42282: PUSH
42283: LD_VAR 0 1
42287: PUSH
42288: LD_INT 4
42290: PLUS
42291: PUSH
42292: LD_VAR 0 2
42296: PUSH
42297: LD_INT 4
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: PUSH
42305: LD_VAR 0 1
42309: PUSH
42310: LD_INT 3
42312: PLUS
42313: PUSH
42314: LD_VAR 0 2
42318: PUSH
42319: LD_INT 3
42321: PLUS
42322: PUSH
42323: LD_INT 5
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: LIST
42330: PUSH
42331: LD_VAR 0 1
42335: PUSH
42336: LD_VAR 0 2
42340: PUSH
42341: LD_INT 4
42343: PLUS
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: ST_TO_ADDR
// end ; 1 :
42360: GO 43060
42362: LD_INT 1
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42503
42370: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42371: LD_ADDR_VAR 0 5
42375: PUSH
42376: LD_VAR 0 1
42380: PUSH
42381: LD_VAR 0 2
42385: PUSH
42386: LD_INT 4
42388: MINUS
42389: PUSH
42390: LD_INT 3
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: PUSH
42398: LD_VAR 0 1
42402: PUSH
42403: LD_INT 3
42405: MINUS
42406: PUSH
42407: LD_VAR 0 2
42411: PUSH
42412: LD_INT 3
42414: MINUS
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: LIST
42423: PUSH
42424: LD_VAR 0 1
42428: PUSH
42429: LD_INT 4
42431: MINUS
42432: PUSH
42433: LD_VAR 0 2
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: PUSH
42446: LD_VAR 0 1
42450: PUSH
42451: LD_VAR 0 2
42455: PUSH
42456: LD_INT 3
42458: PLUS
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: PUSH
42468: LD_VAR 0 1
42472: PUSH
42473: LD_INT 4
42475: PLUS
42476: PUSH
42477: LD_VAR 0 2
42481: PUSH
42482: LD_INT 4
42484: PLUS
42485: PUSH
42486: LD_INT 5
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: ST_TO_ADDR
// end ; 2 :
42501: GO 43060
42503: LD_INT 2
42505: DOUBLE
42506: EQUAL
42507: IFTRUE 42511
42509: GO 42640
42511: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42512: LD_ADDR_VAR 0 5
42516: PUSH
42517: LD_VAR 0 1
42521: PUSH
42522: LD_VAR 0 2
42526: PUSH
42527: LD_INT 3
42529: MINUS
42530: PUSH
42531: LD_INT 3
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: LIST
42538: PUSH
42539: LD_VAR 0 1
42543: PUSH
42544: LD_INT 4
42546: PLUS
42547: PUSH
42548: LD_VAR 0 2
42552: PUSH
42553: LD_INT 4
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: PUSH
42561: LD_VAR 0 1
42565: PUSH
42566: LD_VAR 0 2
42570: PUSH
42571: LD_INT 4
42573: PLUS
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: LD_VAR 0 1
42587: PUSH
42588: LD_INT 3
42590: MINUS
42591: PUSH
42592: LD_VAR 0 2
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: PUSH
42605: LD_VAR 0 1
42609: PUSH
42610: LD_INT 4
42612: MINUS
42613: PUSH
42614: LD_VAR 0 2
42618: PUSH
42619: LD_INT 4
42621: MINUS
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: ST_TO_ADDR
// end ; 3 :
42638: GO 43060
42640: LD_INT 3
42642: DOUBLE
42643: EQUAL
42644: IFTRUE 42648
42646: GO 42781
42648: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42649: LD_ADDR_VAR 0 5
42653: PUSH
42654: LD_VAR 0 1
42658: PUSH
42659: LD_INT 3
42661: PLUS
42662: PUSH
42663: LD_VAR 0 2
42667: PUSH
42668: LD_INT 4
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: PUSH
42676: LD_VAR 0 1
42680: PUSH
42681: LD_INT 4
42683: PLUS
42684: PUSH
42685: LD_VAR 0 2
42689: PUSH
42690: LD_INT 4
42692: PLUS
42693: PUSH
42694: LD_INT 5
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: PUSH
42702: LD_VAR 0 1
42706: PUSH
42707: LD_INT 4
42709: MINUS
42710: PUSH
42711: LD_VAR 0 2
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: LIST
42723: PUSH
42724: LD_VAR 0 1
42728: PUSH
42729: LD_VAR 0 2
42733: PUSH
42734: LD_INT 4
42736: MINUS
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: PUSH
42746: LD_VAR 0 1
42750: PUSH
42751: LD_INT 3
42753: MINUS
42754: PUSH
42755: LD_VAR 0 2
42759: PUSH
42760: LD_INT 3
42762: MINUS
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: ST_TO_ADDR
// end ; 4 :
42779: GO 43060
42781: LD_INT 4
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 42922
42789: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42790: LD_ADDR_VAR 0 5
42794: PUSH
42795: LD_VAR 0 1
42799: PUSH
42800: LD_VAR 0 2
42804: PUSH
42805: LD_INT 4
42807: PLUS
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: PUSH
42817: LD_VAR 0 1
42821: PUSH
42822: LD_INT 3
42824: PLUS
42825: PUSH
42826: LD_VAR 0 2
42830: PUSH
42831: LD_INT 3
42833: PLUS
42834: PUSH
42835: LD_INT 5
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: LIST
42842: PUSH
42843: LD_VAR 0 1
42847: PUSH
42848: LD_INT 4
42850: PLUS
42851: PUSH
42852: LD_VAR 0 2
42856: PUSH
42857: LD_INT 4
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: PUSH
42865: LD_VAR 0 1
42869: PUSH
42870: LD_VAR 0 2
42874: PUSH
42875: LD_INT 3
42877: MINUS
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: PUSH
42887: LD_VAR 0 1
42891: PUSH
42892: LD_INT 4
42894: MINUS
42895: PUSH
42896: LD_VAR 0 2
42900: PUSH
42901: LD_INT 4
42903: MINUS
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// end ; 5 :
42920: GO 43060
42922: LD_INT 5
42924: DOUBLE
42925: EQUAL
42926: IFTRUE 42930
42928: GO 43059
42930: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42931: LD_ADDR_VAR 0 5
42935: PUSH
42936: LD_VAR 0 1
42940: PUSH
42941: LD_INT 4
42943: MINUS
42944: PUSH
42945: LD_VAR 0 2
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: LIST
42957: PUSH
42958: LD_VAR 0 1
42962: PUSH
42963: LD_VAR 0 2
42967: PUSH
42968: LD_INT 4
42970: MINUS
42971: PUSH
42972: LD_INT 3
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: LIST
42979: PUSH
42980: LD_VAR 0 1
42984: PUSH
42985: LD_INT 4
42987: PLUS
42988: PUSH
42989: LD_VAR 0 2
42993: PUSH
42994: LD_INT 4
42996: PLUS
42997: PUSH
42998: LD_INT 5
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: LIST
43005: PUSH
43006: LD_VAR 0 1
43010: PUSH
43011: LD_INT 3
43013: PLUS
43014: PUSH
43015: LD_VAR 0 2
43019: PUSH
43020: LD_INT 4
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: LIST
43027: PUSH
43028: LD_VAR 0 1
43032: PUSH
43033: LD_VAR 0 2
43037: PUSH
43038: LD_INT 3
43040: PLUS
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: ST_TO_ADDR
// end ; end ;
43057: GO 43060
43059: POP
// result := list ;
43060: LD_ADDR_VAR 0 4
43064: PUSH
43065: LD_VAR 0 5
43069: ST_TO_ADDR
// end ;
43070: LD_VAR 0 4
43074: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43075: LD_INT 0
43077: PPUSH
43078: PPUSH
43079: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43080: LD_VAR 0 1
43084: NOT
43085: IFTRUE 43113
43087: PUSH
43088: LD_VAR 0 2
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 2
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 4
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: IN
43111: NOT
43112: OR
43113: IFFALSE 43117
// exit ;
43115: GO 43200
// tmp := [ ] ;
43117: LD_ADDR_VAR 0 5
43121: PUSH
43122: EMPTY
43123: ST_TO_ADDR
// for i in units do
43124: LD_ADDR_VAR 0 4
43128: PUSH
43129: LD_VAR 0 1
43133: PUSH
43134: FOR_IN
43135: IFFALSE 43169
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
43137: LD_ADDR_VAR 0 5
43141: PUSH
43142: LD_VAR 0 5
43146: PPUSH
43147: LD_VAR 0 4
43151: PPUSH
43152: LD_VAR 0 2
43156: PPUSH
43157: CALL_OW 259
43161: PPUSH
43162: CALL 44595 0 2
43166: ST_TO_ADDR
43167: GO 43134
43169: POP
43170: POP
// if not tmp then
43171: LD_VAR 0 5
43175: NOT
43176: IFFALSE 43180
// exit ;
43178: GO 43200
// result := SortListByListDesc ( units , tmp ) ;
43180: LD_ADDR_VAR 0 3
43184: PUSH
43185: LD_VAR 0 1
43189: PPUSH
43190: LD_VAR 0 5
43194: PPUSH
43195: CALL_OW 77
43199: ST_TO_ADDR
// end ;
43200: LD_VAR 0 3
43204: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43205: LD_INT 0
43207: PPUSH
43208: PPUSH
43209: PPUSH
// result := false ;
43210: LD_ADDR_VAR 0 3
43214: PUSH
43215: LD_INT 0
43217: ST_TO_ADDR
// if not building then
43218: LD_VAR 0 2
43222: NOT
43223: IFFALSE 43227
// exit ;
43225: GO 43371
// x := GetX ( building ) ;
43227: LD_ADDR_VAR 0 4
43231: PUSH
43232: LD_VAR 0 2
43236: PPUSH
43237: CALL_OW 250
43241: ST_TO_ADDR
// y := GetY ( building ) ;
43242: LD_ADDR_VAR 0 5
43246: PUSH
43247: LD_VAR 0 2
43251: PPUSH
43252: CALL_OW 251
43256: ST_TO_ADDR
// if not x or not y then
43257: LD_VAR 0 4
43261: NOT
43262: IFTRUE 43271
43264: PUSH
43265: LD_VAR 0 5
43269: NOT
43270: OR
43271: IFFALSE 43275
// exit ;
43273: GO 43371
// if GetTaskList ( unit ) then
43275: LD_VAR 0 1
43279: PPUSH
43280: CALL_OW 437
43284: IFFALSE 43371
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43286: LD_STRING e
43288: PUSH
43289: LD_VAR 0 1
43293: PPUSH
43294: CALL_OW 437
43298: PUSH
43299: LD_INT 1
43301: ARRAY
43302: PUSH
43303: LD_INT 1
43305: ARRAY
43306: EQUAL
43307: IFFALSE 43334
43309: PUSH
43310: LD_VAR 0 4
43314: PUSH
43315: LD_VAR 0 1
43319: PPUSH
43320: CALL_OW 437
43324: PUSH
43325: LD_INT 1
43327: ARRAY
43328: PUSH
43329: LD_INT 2
43331: ARRAY
43332: EQUAL
43333: AND
43334: IFFALSE 43361
43336: PUSH
43337: LD_VAR 0 5
43341: PUSH
43342: LD_VAR 0 1
43346: PPUSH
43347: CALL_OW 437
43351: PUSH
43352: LD_INT 1
43354: ARRAY
43355: PUSH
43356: LD_INT 3
43358: ARRAY
43359: EQUAL
43360: AND
43361: IFFALSE 43371
// result := true end ;
43363: LD_ADDR_VAR 0 3
43367: PUSH
43368: LD_INT 1
43370: ST_TO_ADDR
// end ;
43371: LD_VAR 0 3
43375: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43376: LD_INT 0
43378: PPUSH
// result := false ;
43379: LD_ADDR_VAR 0 4
43383: PUSH
43384: LD_INT 0
43386: ST_TO_ADDR
// if GetTaskList ( unit ) then
43387: LD_VAR 0 1
43391: PPUSH
43392: CALL_OW 437
43396: IFFALSE 43483
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43398: LD_STRING M
43400: PUSH
43401: LD_VAR 0 1
43405: PPUSH
43406: CALL_OW 437
43410: PUSH
43411: LD_INT 1
43413: ARRAY
43414: PUSH
43415: LD_INT 1
43417: ARRAY
43418: EQUAL
43419: IFFALSE 43446
43421: PUSH
43422: LD_VAR 0 2
43426: PUSH
43427: LD_VAR 0 1
43431: PPUSH
43432: CALL_OW 437
43436: PUSH
43437: LD_INT 1
43439: ARRAY
43440: PUSH
43441: LD_INT 2
43443: ARRAY
43444: EQUAL
43445: AND
43446: IFFALSE 43473
43448: PUSH
43449: LD_VAR 0 3
43453: PUSH
43454: LD_VAR 0 1
43458: PPUSH
43459: CALL_OW 437
43463: PUSH
43464: LD_INT 1
43466: ARRAY
43467: PUSH
43468: LD_INT 3
43470: ARRAY
43471: EQUAL
43472: AND
43473: IFFALSE 43483
// result := true ;
43475: LD_ADDR_VAR 0 4
43479: PUSH
43480: LD_INT 1
43482: ST_TO_ADDR
// end ; end ;
43483: LD_VAR 0 4
43487: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43488: LD_INT 0
43490: PPUSH
43491: PPUSH
43492: PPUSH
43493: PPUSH
// if not unit or not area then
43494: LD_VAR 0 1
43498: NOT
43499: IFTRUE 43508
43501: PUSH
43502: LD_VAR 0 2
43506: NOT
43507: OR
43508: IFFALSE 43512
// exit ;
43510: GO 43688
// tmp := AreaToList ( area , i ) ;
43512: LD_ADDR_VAR 0 6
43516: PUSH
43517: LD_VAR 0 2
43521: PPUSH
43522: LD_VAR 0 5
43526: PPUSH
43527: CALL_OW 517
43531: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43532: LD_ADDR_VAR 0 5
43536: PUSH
43537: DOUBLE
43538: LD_INT 1
43540: DEC
43541: ST_TO_ADDR
43542: LD_VAR 0 6
43546: PUSH
43547: LD_INT 1
43549: ARRAY
43550: PUSH
43551: FOR_TO
43552: IFFALSE 43686
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43554: LD_ADDR_VAR 0 7
43558: PUSH
43559: LD_VAR 0 6
43563: PUSH
43564: LD_INT 1
43566: ARRAY
43567: PUSH
43568: LD_VAR 0 5
43572: ARRAY
43573: PUSH
43574: LD_VAR 0 6
43578: PUSH
43579: LD_INT 2
43581: ARRAY
43582: PUSH
43583: LD_VAR 0 5
43587: ARRAY
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
43593: LD_INT 92
43595: PUSH
43596: LD_VAR 0 7
43600: PUSH
43601: LD_INT 1
43603: ARRAY
43604: PUSH
43605: LD_VAR 0 7
43609: PUSH
43610: LD_INT 2
43612: ARRAY
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: PPUSH
43623: CALL_OW 69
43627: PUSH
43628: LD_INT 0
43630: EQUAL
43631: IFFALSE 43684
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43633: LD_VAR 0 1
43637: PPUSH
43638: LD_VAR 0 7
43642: PUSH
43643: LD_INT 1
43645: ARRAY
43646: PPUSH
43647: LD_VAR 0 7
43651: PUSH
43652: LD_INT 2
43654: ARRAY
43655: PPUSH
43656: LD_VAR 0 3
43660: PPUSH
43661: CALL_OW 48
// result := IsPlaced ( unit ) ;
43665: LD_ADDR_VAR 0 4
43669: PUSH
43670: LD_VAR 0 1
43674: PPUSH
43675: CALL_OW 305
43679: ST_TO_ADDR
// exit ;
43680: POP
43681: POP
43682: GO 43688
// end ; end ;
43684: GO 43551
43686: POP
43687: POP
// end ;
43688: LD_VAR 0 4
43692: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43693: LD_INT 0
43695: PPUSH
43696: PPUSH
43697: PPUSH
// if not side or side > 8 then
43698: LD_VAR 0 1
43702: NOT
43703: IFTRUE 43715
43705: PUSH
43706: LD_VAR 0 1
43710: PUSH
43711: LD_INT 8
43713: GREATER
43714: OR
43715: IFFALSE 43719
// exit ;
43717: GO 43906
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43719: LD_ADDR_VAR 0 4
43723: PUSH
43724: LD_INT 22
43726: PUSH
43727: LD_VAR 0 1
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 21
43738: PUSH
43739: LD_INT 3
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PPUSH
43750: CALL_OW 69
43754: ST_TO_ADDR
// if not tmp then
43755: LD_VAR 0 4
43759: NOT
43760: IFFALSE 43764
// exit ;
43762: GO 43906
// enable_addtolog := true ;
43764: LD_ADDR_OWVAR 81
43768: PUSH
43769: LD_INT 1
43771: ST_TO_ADDR
// AddToLog ( [ ) ;
43772: LD_STRING [
43774: PPUSH
43775: CALL_OW 561
// for i in tmp do
43779: LD_ADDR_VAR 0 3
43783: PUSH
43784: LD_VAR 0 4
43788: PUSH
43789: FOR_IN
43790: IFFALSE 43897
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43792: LD_STRING [
43794: PUSH
43795: LD_VAR 0 3
43799: PPUSH
43800: CALL_OW 266
43804: STR
43805: PUSH
43806: LD_STRING , 
43808: STR
43809: PUSH
43810: LD_VAR 0 3
43814: PPUSH
43815: CALL_OW 250
43819: STR
43820: PUSH
43821: LD_STRING , 
43823: STR
43824: PUSH
43825: LD_VAR 0 3
43829: PPUSH
43830: CALL_OW 251
43834: STR
43835: PUSH
43836: LD_STRING , 
43838: STR
43839: PUSH
43840: LD_VAR 0 3
43844: PPUSH
43845: CALL_OW 254
43849: STR
43850: PUSH
43851: LD_STRING , 
43853: STR
43854: PUSH
43855: LD_VAR 0 3
43859: PPUSH
43860: LD_INT 1
43862: PPUSH
43863: CALL_OW 268
43867: STR
43868: PUSH
43869: LD_STRING , 
43871: STR
43872: PUSH
43873: LD_VAR 0 3
43877: PPUSH
43878: LD_INT 2
43880: PPUSH
43881: CALL_OW 268
43885: STR
43886: PUSH
43887: LD_STRING ],
43889: STR
43890: PPUSH
43891: CALL_OW 561
// end ;
43895: GO 43789
43897: POP
43898: POP
// AddToLog ( ]; ) ;
43899: LD_STRING ];
43901: PPUSH
43902: CALL_OW 561
// end ;
43906: LD_VAR 0 2
43910: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43911: LD_INT 0
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
// if not area or not rate or not max then
43918: LD_VAR 0 1
43922: NOT
43923: IFTRUE 43932
43925: PUSH
43926: LD_VAR 0 2
43930: NOT
43931: OR
43932: IFTRUE 43941
43934: PUSH
43935: LD_VAR 0 4
43939: NOT
43940: OR
43941: IFFALSE 43945
// exit ;
43943: GO 44134
// while 1 do
43945: LD_INT 1
43947: IFFALSE 44134
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43949: LD_ADDR_VAR 0 9
43953: PUSH
43954: LD_VAR 0 1
43958: PPUSH
43959: LD_INT 1
43961: PPUSH
43962: CALL_OW 287
43966: PUSH
43967: LD_INT 10
43969: MUL
43970: ST_TO_ADDR
// r := rate / 10 ;
43971: LD_ADDR_VAR 0 7
43975: PUSH
43976: LD_VAR 0 2
43980: PUSH
43981: LD_INT 10
43983: DIVREAL
43984: ST_TO_ADDR
// time := 1 1$00 ;
43985: LD_ADDR_VAR 0 8
43989: PUSH
43990: LD_INT 2100
43992: ST_TO_ADDR
// if amount < min then
43993: LD_VAR 0 9
43997: PUSH
43998: LD_VAR 0 3
44002: LESS
44003: IFFALSE 44021
// r := r * 2 else
44005: LD_ADDR_VAR 0 7
44009: PUSH
44010: LD_VAR 0 7
44014: PUSH
44015: LD_INT 2
44017: MUL
44018: ST_TO_ADDR
44019: GO 44047
// if amount > max then
44021: LD_VAR 0 9
44025: PUSH
44026: LD_VAR 0 4
44030: GREATER
44031: IFFALSE 44047
// r := r / 2 ;
44033: LD_ADDR_VAR 0 7
44037: PUSH
44038: LD_VAR 0 7
44042: PUSH
44043: LD_INT 2
44045: DIVREAL
44046: ST_TO_ADDR
// time := time / r ;
44047: LD_ADDR_VAR 0 8
44051: PUSH
44052: LD_VAR 0 8
44056: PUSH
44057: LD_VAR 0 7
44061: DIVREAL
44062: ST_TO_ADDR
// if time < 0 then
44063: LD_VAR 0 8
44067: PUSH
44068: LD_INT 0
44070: LESS
44071: IFFALSE 44088
// time := time * - 1 ;
44073: LD_ADDR_VAR 0 8
44077: PUSH
44078: LD_VAR 0 8
44082: PUSH
44083: LD_INT 1
44085: NEG
44086: MUL
44087: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44088: LD_VAR 0 8
44092: PUSH
44093: LD_INT 35
44095: PPUSH
44096: LD_INT 875
44098: PPUSH
44099: CALL_OW 12
44103: PLUS
44104: PPUSH
44105: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44109: LD_INT 1
44111: PPUSH
44112: LD_INT 5
44114: PPUSH
44115: CALL_OW 12
44119: PPUSH
44120: LD_VAR 0 1
44124: PPUSH
44125: LD_INT 1
44127: PPUSH
44128: CALL_OW 55
// end ;
44132: GO 43945
// end ;
44134: LD_VAR 0 5
44138: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44139: LD_INT 0
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
// if not turrets or not factories then
44149: LD_VAR 0 1
44153: NOT
44154: IFTRUE 44163
44156: PUSH
44157: LD_VAR 0 2
44161: NOT
44162: OR
44163: IFFALSE 44167
// exit ;
44165: GO 44474
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44167: LD_ADDR_VAR 0 10
44171: PUSH
44172: LD_INT 5
44174: PUSH
44175: LD_INT 6
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: PUSH
44185: LD_INT 4
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: LD_INT 5
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 24
44209: PUSH
44210: LD_INT 25
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 23
44219: PUSH
44220: LD_INT 27
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 42
44233: PUSH
44234: LD_INT 43
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 44
44243: PUSH
44244: LD_INT 46
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 45
44253: PUSH
44254: LD_INT 47
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: LIST
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: LIST
44270: ST_TO_ADDR
// result := [ ] ;
44271: LD_ADDR_VAR 0 3
44275: PUSH
44276: EMPTY
44277: ST_TO_ADDR
// for i in turrets do
44278: LD_ADDR_VAR 0 4
44282: PUSH
44283: LD_VAR 0 1
44287: PUSH
44288: FOR_IN
44289: IFFALSE 44472
// begin nat := GetNation ( i ) ;
44291: LD_ADDR_VAR 0 7
44295: PUSH
44296: LD_VAR 0 4
44300: PPUSH
44301: CALL_OW 248
44305: ST_TO_ADDR
// weapon := 0 ;
44306: LD_ADDR_VAR 0 8
44310: PUSH
44311: LD_INT 0
44313: ST_TO_ADDR
// if not nat then
44314: LD_VAR 0 7
44318: NOT
44319: IFFALSE 44323
// continue ;
44321: GO 44288
// for j in list [ nat ] do
44323: LD_ADDR_VAR 0 5
44327: PUSH
44328: LD_VAR 0 10
44332: PUSH
44333: LD_VAR 0 7
44337: ARRAY
44338: PUSH
44339: FOR_IN
44340: IFFALSE 44381
// if GetBWeapon ( i ) = j [ 1 ] then
44342: LD_VAR 0 4
44346: PPUSH
44347: CALL_OW 269
44351: PUSH
44352: LD_VAR 0 5
44356: PUSH
44357: LD_INT 1
44359: ARRAY
44360: EQUAL
44361: IFFALSE 44379
// begin weapon := j [ 2 ] ;
44363: LD_ADDR_VAR 0 8
44367: PUSH
44368: LD_VAR 0 5
44372: PUSH
44373: LD_INT 2
44375: ARRAY
44376: ST_TO_ADDR
// break ;
44377: GO 44381
// end ;
44379: GO 44339
44381: POP
44382: POP
// if not weapon then
44383: LD_VAR 0 8
44387: NOT
44388: IFFALSE 44392
// continue ;
44390: GO 44288
// for k in factories do
44392: LD_ADDR_VAR 0 6
44396: PUSH
44397: LD_VAR 0 2
44401: PUSH
44402: FOR_IN
44403: IFFALSE 44468
// begin weapons := AvailableWeaponList ( k ) ;
44405: LD_ADDR_VAR 0 9
44409: PUSH
44410: LD_VAR 0 6
44414: PPUSH
44415: CALL_OW 478
44419: ST_TO_ADDR
// if not weapons then
44420: LD_VAR 0 9
44424: NOT
44425: IFFALSE 44429
// continue ;
44427: GO 44402
// if weapon in weapons then
44429: LD_VAR 0 8
44433: PUSH
44434: LD_VAR 0 9
44438: IN
44439: IFFALSE 44466
// begin result := [ i , weapon ] ;
44441: LD_ADDR_VAR 0 3
44445: PUSH
44446: LD_VAR 0 4
44450: PUSH
44451: LD_VAR 0 8
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: ST_TO_ADDR
// exit ;
44460: POP
44461: POP
44462: POP
44463: POP
44464: GO 44474
// end ; end ;
44466: GO 44402
44468: POP
44469: POP
// end ;
44470: GO 44288
44472: POP
44473: POP
// end ;
44474: LD_VAR 0 3
44478: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44479: LD_INT 0
44481: PPUSH
// if not side or side > 8 then
44482: LD_VAR 0 3
44486: NOT
44487: IFTRUE 44499
44489: PUSH
44490: LD_VAR 0 3
44494: PUSH
44495: LD_INT 8
44497: GREATER
44498: OR
44499: IFFALSE 44503
// exit ;
44501: GO 44562
// if not range then
44503: LD_VAR 0 4
44507: NOT
44508: IFFALSE 44519
// range := - 12 ;
44510: LD_ADDR_VAR 0 4
44514: PUSH
44515: LD_INT 12
44517: NEG
44518: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44519: LD_VAR 0 1
44523: PPUSH
44524: LD_VAR 0 2
44528: PPUSH
44529: LD_VAR 0 3
44533: PPUSH
44534: LD_VAR 0 4
44538: PPUSH
44539: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44543: LD_VAR 0 1
44547: PPUSH
44548: LD_VAR 0 2
44552: PPUSH
44553: LD_VAR 0 3
44557: PPUSH
44558: CALL_OW 331
// end ;
44562: LD_VAR 0 5
44566: RET
// export function Video ( mode ) ; begin
44567: LD_INT 0
44569: PPUSH
// ingame_video = mode ;
44570: LD_ADDR_OWVAR 52
44574: PUSH
44575: LD_VAR 0 1
44579: ST_TO_ADDR
// interface_hidden = mode ;
44580: LD_ADDR_OWVAR 54
44584: PUSH
44585: LD_VAR 0 1
44589: ST_TO_ADDR
// end ;
44590: LD_VAR 0 2
44594: RET
// export function Join ( array , element ) ; begin
44595: LD_INT 0
44597: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44598: LD_ADDR_VAR 0 3
44602: PUSH
44603: LD_VAR 0 1
44607: PPUSH
44608: LD_VAR 0 1
44612: PUSH
44613: LD_INT 1
44615: PLUS
44616: PPUSH
44617: LD_VAR 0 2
44621: PPUSH
44622: CALL_OW 1
44626: ST_TO_ADDR
// end ;
44627: LD_VAR 0 3
44631: RET
// export function JoinUnion ( array , element ) ; begin
44632: LD_INT 0
44634: PPUSH
// result := array union element ;
44635: LD_ADDR_VAR 0 3
44639: PUSH
44640: LD_VAR 0 1
44644: PUSH
44645: LD_VAR 0 2
44649: UNION
44650: ST_TO_ADDR
// end ;
44651: LD_VAR 0 3
44655: RET
// export function GetBehemoths ( side ) ; begin
44656: LD_INT 0
44658: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
44659: LD_ADDR_VAR 0 2
44663: PUSH
44664: LD_INT 22
44666: PUSH
44667: LD_VAR 0 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 31
44678: PUSH
44679: LD_INT 25
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PPUSH
44690: CALL_OW 69
44694: ST_TO_ADDR
// end ;
44695: LD_VAR 0 2
44699: RET
// export function Shuffle ( array ) ; var i , index ; begin
44700: LD_INT 0
44702: PPUSH
44703: PPUSH
44704: PPUSH
// result := [ ] ;
44705: LD_ADDR_VAR 0 2
44709: PUSH
44710: EMPTY
44711: ST_TO_ADDR
// if not array then
44712: LD_VAR 0 1
44716: NOT
44717: IFFALSE 44721
// exit ;
44719: GO 44820
// Randomize ;
44721: CALL_OW 10
// for i = array downto 1 do
44725: LD_ADDR_VAR 0 3
44729: PUSH
44730: DOUBLE
44731: LD_VAR 0 1
44735: INC
44736: ST_TO_ADDR
44737: LD_INT 1
44739: PUSH
44740: FOR_DOWNTO
44741: IFFALSE 44818
// begin index := rand ( 1 , array ) ;
44743: LD_ADDR_VAR 0 4
44747: PUSH
44748: LD_INT 1
44750: PPUSH
44751: LD_VAR 0 1
44755: PPUSH
44756: CALL_OW 12
44760: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44761: LD_ADDR_VAR 0 2
44765: PUSH
44766: LD_VAR 0 2
44770: PPUSH
44771: LD_VAR 0 2
44775: PUSH
44776: LD_INT 1
44778: PLUS
44779: PPUSH
44780: LD_VAR 0 1
44784: PUSH
44785: LD_VAR 0 4
44789: ARRAY
44790: PPUSH
44791: CALL_OW 2
44795: ST_TO_ADDR
// array := Delete ( array , index ) ;
44796: LD_ADDR_VAR 0 1
44800: PUSH
44801: LD_VAR 0 1
44805: PPUSH
44806: LD_VAR 0 4
44810: PPUSH
44811: CALL_OW 3
44815: ST_TO_ADDR
// end ;
44816: GO 44740
44818: POP
44819: POP
// end ;
44820: LD_VAR 0 2
44824: RET
// export function GetBaseMaterials ( base ) ; begin
44825: LD_INT 0
44827: PPUSH
// result := [ 0 , 0 , 0 ] ;
44828: LD_ADDR_VAR 0 2
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: ST_TO_ADDR
// if not base then
44847: LD_VAR 0 1
44851: NOT
44852: IFFALSE 44856
// exit ;
44854: GO 44905
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44856: LD_ADDR_VAR 0 2
44860: PUSH
44861: LD_VAR 0 1
44865: PPUSH
44866: LD_INT 1
44868: PPUSH
44869: CALL_OW 275
44873: PUSH
44874: LD_VAR 0 1
44878: PPUSH
44879: LD_INT 2
44881: PPUSH
44882: CALL_OW 275
44886: PUSH
44887: LD_VAR 0 1
44891: PPUSH
44892: LD_INT 3
44894: PPUSH
44895: CALL_OW 275
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// end ;
44905: LD_VAR 0 2
44909: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44910: LD_INT 0
44912: PPUSH
44913: PPUSH
// result := array ;
44914: LD_ADDR_VAR 0 3
44918: PUSH
44919: LD_VAR 0 1
44923: ST_TO_ADDR
// if size >= result then
44924: LD_VAR 0 2
44928: PUSH
44929: LD_VAR 0 3
44933: GREATEREQUAL
44934: IFFALSE 44938
// exit ;
44936: GO 44988
// if size then
44938: LD_VAR 0 2
44942: IFFALSE 44988
// for i := array downto size do
44944: LD_ADDR_VAR 0 4
44948: PUSH
44949: DOUBLE
44950: LD_VAR 0 1
44954: INC
44955: ST_TO_ADDR
44956: LD_VAR 0 2
44960: PUSH
44961: FOR_DOWNTO
44962: IFFALSE 44986
// result := Delete ( result , result ) ;
44964: LD_ADDR_VAR 0 3
44968: PUSH
44969: LD_VAR 0 3
44973: PPUSH
44974: LD_VAR 0 3
44978: PPUSH
44979: CALL_OW 3
44983: ST_TO_ADDR
44984: GO 44961
44986: POP
44987: POP
// end ;
44988: LD_VAR 0 3
44992: RET
// export function ComExit ( unit ) ; var tmp ; begin
44993: LD_INT 0
44995: PPUSH
44996: PPUSH
// if not IsInUnit ( unit ) then
44997: LD_VAR 0 1
45001: PPUSH
45002: CALL_OW 310
45006: NOT
45007: IFFALSE 45011
// exit ;
45009: GO 45071
// tmp := IsInUnit ( unit ) ;
45011: LD_ADDR_VAR 0 3
45015: PUSH
45016: LD_VAR 0 1
45020: PPUSH
45021: CALL_OW 310
45025: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45026: LD_VAR 0 3
45030: PPUSH
45031: CALL_OW 247
45035: PUSH
45036: LD_INT 2
45038: EQUAL
45039: IFFALSE 45052
// ComExitVehicle ( unit ) else
45041: LD_VAR 0 1
45045: PPUSH
45046: CALL_OW 121
45050: GO 45061
// ComExitBuilding ( unit ) ;
45052: LD_VAR 0 1
45056: PPUSH
45057: CALL_OW 122
// result := tmp ;
45061: LD_ADDR_VAR 0 2
45065: PUSH
45066: LD_VAR 0 3
45070: ST_TO_ADDR
// end ;
45071: LD_VAR 0 2
45075: RET
// export function ComExitAll ( units ) ; var i ; begin
45076: LD_INT 0
45078: PPUSH
45079: PPUSH
// if not units then
45080: LD_VAR 0 1
45084: NOT
45085: IFFALSE 45089
// exit ;
45087: GO 45115
// for i in units do
45089: LD_ADDR_VAR 0 3
45093: PUSH
45094: LD_VAR 0 1
45098: PUSH
45099: FOR_IN
45100: IFFALSE 45113
// ComExit ( i ) ;
45102: LD_VAR 0 3
45106: PPUSH
45107: CALL 44993 0 1
45111: GO 45099
45113: POP
45114: POP
// end ;
45115: LD_VAR 0 2
45119: RET
// export function ResetHc ; begin
45120: LD_INT 0
45122: PPUSH
// InitHc ;
45123: CALL_OW 19
// hc_importance := 0 ;
45127: LD_ADDR_OWVAR 32
45131: PUSH
45132: LD_INT 0
45134: ST_TO_ADDR
// end ;
45135: LD_VAR 0 1
45139: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45140: LD_INT 0
45142: PPUSH
45143: PPUSH
45144: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45145: LD_ADDR_VAR 0 6
45149: PUSH
45150: LD_VAR 0 1
45154: PUSH
45155: LD_VAR 0 3
45159: PLUS
45160: PUSH
45161: LD_INT 2
45163: DIV
45164: ST_TO_ADDR
// if _x < 0 then
45165: LD_VAR 0 6
45169: PUSH
45170: LD_INT 0
45172: LESS
45173: IFFALSE 45190
// _x := _x * - 1 ;
45175: LD_ADDR_VAR 0 6
45179: PUSH
45180: LD_VAR 0 6
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: MUL
45189: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45190: LD_ADDR_VAR 0 7
45194: PUSH
45195: LD_VAR 0 2
45199: PUSH
45200: LD_VAR 0 4
45204: PLUS
45205: PUSH
45206: LD_INT 2
45208: DIV
45209: ST_TO_ADDR
// if _y < 0 then
45210: LD_VAR 0 7
45214: PUSH
45215: LD_INT 0
45217: LESS
45218: IFFALSE 45235
// _y := _y * - 1 ;
45220: LD_ADDR_VAR 0 7
45224: PUSH
45225: LD_VAR 0 7
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: MUL
45234: ST_TO_ADDR
// result := [ _x , _y ] ;
45235: LD_ADDR_VAR 0 5
45239: PUSH
45240: LD_VAR 0 6
45244: PUSH
45245: LD_VAR 0 7
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: ST_TO_ADDR
// end ;
45254: LD_VAR 0 5
45258: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45259: LD_INT 0
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
// task := GetTaskList ( unit ) ;
45265: LD_ADDR_VAR 0 7
45269: PUSH
45270: LD_VAR 0 1
45274: PPUSH
45275: CALL_OW 437
45279: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45280: LD_VAR 0 7
45284: NOT
45285: IFFALSE 45304
45287: PUSH
45288: LD_VAR 0 1
45292: PPUSH
45293: LD_VAR 0 2
45297: PPUSH
45298: CALL_OW 308
45302: NOT
45303: AND
45304: IFFALSE 45308
// exit ;
45306: GO 45426
// if IsInArea ( unit , area ) then
45308: LD_VAR 0 1
45312: PPUSH
45313: LD_VAR 0 2
45317: PPUSH
45318: CALL_OW 308
45322: IFFALSE 45340
// begin ComMoveToArea ( unit , goAway ) ;
45324: LD_VAR 0 1
45328: PPUSH
45329: LD_VAR 0 3
45333: PPUSH
45334: CALL_OW 113
// exit ;
45338: GO 45426
// end ; if task [ 1 ] [ 1 ] <> M then
45340: LD_VAR 0 7
45344: PUSH
45345: LD_INT 1
45347: ARRAY
45348: PUSH
45349: LD_INT 1
45351: ARRAY
45352: PUSH
45353: LD_STRING M
45355: NONEQUAL
45356: IFFALSE 45360
// exit ;
45358: GO 45426
// x := task [ 1 ] [ 2 ] ;
45360: LD_ADDR_VAR 0 5
45364: PUSH
45365: LD_VAR 0 7
45369: PUSH
45370: LD_INT 1
45372: ARRAY
45373: PUSH
45374: LD_INT 2
45376: ARRAY
45377: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45378: LD_ADDR_VAR 0 6
45382: PUSH
45383: LD_VAR 0 7
45387: PUSH
45388: LD_INT 1
45390: ARRAY
45391: PUSH
45392: LD_INT 3
45394: ARRAY
45395: ST_TO_ADDR
// if InArea ( x , y , area ) then
45396: LD_VAR 0 5
45400: PPUSH
45401: LD_VAR 0 6
45405: PPUSH
45406: LD_VAR 0 2
45410: PPUSH
45411: CALL_OW 309
45415: IFFALSE 45426
// ComStop ( unit ) ;
45417: LD_VAR 0 1
45421: PPUSH
45422: CALL_OW 141
// end ;
45426: LD_VAR 0 4
45430: RET
// export function Abs ( value ) ; begin
45431: LD_INT 0
45433: PPUSH
// result := value ;
45434: LD_ADDR_VAR 0 2
45438: PUSH
45439: LD_VAR 0 1
45443: ST_TO_ADDR
// if value < 0 then
45444: LD_VAR 0 1
45448: PUSH
45449: LD_INT 0
45451: LESS
45452: IFFALSE 45469
// result := value * - 1 ;
45454: LD_ADDR_VAR 0 2
45458: PUSH
45459: LD_VAR 0 1
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: MUL
45468: ST_TO_ADDR
// end ;
45469: LD_VAR 0 2
45473: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45474: LD_INT 0
45476: PPUSH
45477: PPUSH
45478: PPUSH
45479: PPUSH
45480: PPUSH
45481: PPUSH
45482: PPUSH
45483: PPUSH
// if not unit or not building then
45484: LD_VAR 0 1
45488: NOT
45489: IFTRUE 45498
45491: PUSH
45492: LD_VAR 0 2
45496: NOT
45497: OR
45498: IFFALSE 45502
// exit ;
45500: GO 45730
// x := GetX ( building ) ;
45502: LD_ADDR_VAR 0 4
45506: PUSH
45507: LD_VAR 0 2
45511: PPUSH
45512: CALL_OW 250
45516: ST_TO_ADDR
// y := GetY ( building ) ;
45517: LD_ADDR_VAR 0 6
45521: PUSH
45522: LD_VAR 0 2
45526: PPUSH
45527: CALL_OW 251
45531: ST_TO_ADDR
// d := GetDir ( building ) ;
45532: LD_ADDR_VAR 0 8
45536: PUSH
45537: LD_VAR 0 2
45541: PPUSH
45542: CALL_OW 254
45546: ST_TO_ADDR
// r := 4 ;
45547: LD_ADDR_VAR 0 9
45551: PUSH
45552: LD_INT 4
45554: ST_TO_ADDR
// for i := 1 to 5 do
45555: LD_ADDR_VAR 0 10
45559: PUSH
45560: DOUBLE
45561: LD_INT 1
45563: DEC
45564: ST_TO_ADDR
45565: LD_INT 5
45567: PUSH
45568: FOR_TO
45569: IFFALSE 45728
// begin _x := ShiftX ( x , d , r + i ) ;
45571: LD_ADDR_VAR 0 5
45575: PUSH
45576: LD_VAR 0 4
45580: PPUSH
45581: LD_VAR 0 8
45585: PPUSH
45586: LD_VAR 0 9
45590: PUSH
45591: LD_VAR 0 10
45595: PLUS
45596: PPUSH
45597: CALL_OW 272
45601: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45602: LD_ADDR_VAR 0 7
45606: PUSH
45607: LD_VAR 0 6
45611: PPUSH
45612: LD_VAR 0 8
45616: PPUSH
45617: LD_VAR 0 9
45621: PUSH
45622: LD_VAR 0 10
45626: PLUS
45627: PPUSH
45628: CALL_OW 273
45632: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45633: LD_VAR 0 5
45637: PPUSH
45638: LD_VAR 0 7
45642: PPUSH
45643: CALL_OW 488
45647: IFFALSE 45682
45649: PUSH
45650: LD_VAR 0 5
45654: PPUSH
45655: LD_VAR 0 7
45659: PPUSH
45660: CALL_OW 428
45664: PPUSH
45665: CALL_OW 247
45669: PUSH
45670: LD_INT 3
45672: PUSH
45673: LD_INT 2
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: IN
45680: NOT
45681: AND
45682: IFFALSE 45726
// begin ComMoveXY ( unit , _x , _y ) ;
45684: LD_VAR 0 1
45688: PPUSH
45689: LD_VAR 0 5
45693: PPUSH
45694: LD_VAR 0 7
45698: PPUSH
45699: CALL_OW 111
// result := [ _x , _y ] ;
45703: LD_ADDR_VAR 0 3
45707: PUSH
45708: LD_VAR 0 5
45712: PUSH
45713: LD_VAR 0 7
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: ST_TO_ADDR
// exit ;
45722: POP
45723: POP
45724: GO 45730
// end ; end ;
45726: GO 45568
45728: POP
45729: POP
// end ;
45730: LD_VAR 0 3
45734: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45735: LD_INT 0
45737: PPUSH
45738: PPUSH
45739: PPUSH
// result := 0 ;
45740: LD_ADDR_VAR 0 3
45744: PUSH
45745: LD_INT 0
45747: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45748: LD_VAR 0 1
45752: PUSH
45753: LD_INT 0
45755: LESS
45756: IFTRUE 45768
45758: PUSH
45759: LD_VAR 0 1
45763: PUSH
45764: LD_INT 8
45766: GREATER
45767: OR
45768: IFTRUE 45780
45770: PUSH
45771: LD_VAR 0 2
45775: PUSH
45776: LD_INT 0
45778: LESS
45779: OR
45780: IFTRUE 45792
45782: PUSH
45783: LD_VAR 0 2
45787: PUSH
45788: LD_INT 8
45790: GREATER
45791: OR
45792: IFFALSE 45796
// exit ;
45794: GO 45871
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45796: LD_ADDR_VAR 0 4
45800: PUSH
45801: LD_INT 22
45803: PUSH
45804: LD_VAR 0 2
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PPUSH
45813: CALL_OW 69
45817: PUSH
45818: FOR_IN
45819: IFFALSE 45869
// begin un := UnitShoot ( i ) ;
45821: LD_ADDR_VAR 0 5
45825: PUSH
45826: LD_VAR 0 4
45830: PPUSH
45831: CALL_OW 504
45835: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45836: LD_VAR 0 5
45840: PPUSH
45841: CALL_OW 255
45845: PUSH
45846: LD_VAR 0 1
45850: EQUAL
45851: IFFALSE 45867
// begin result := un ;
45853: LD_ADDR_VAR 0 3
45857: PUSH
45858: LD_VAR 0 5
45862: ST_TO_ADDR
// exit ;
45863: POP
45864: POP
45865: GO 45871
// end ; end ;
45867: GO 45818
45869: POP
45870: POP
// end ;
45871: LD_VAR 0 3
45875: RET
// export function GetCargoBay ( units ) ; begin
45876: LD_INT 0
45878: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45879: LD_ADDR_VAR 0 2
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: LD_INT 2
45891: PUSH
45892: LD_INT 34
45894: PUSH
45895: LD_INT 12
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 34
45904: PUSH
45905: LD_INT 51
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 34
45914: PUSH
45915: LD_INT 32
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 34
45924: PUSH
45925: LD_INT 89
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: PPUSH
45939: CALL_OW 72
45943: ST_TO_ADDR
// end ;
45944: LD_VAR 0 2
45948: RET
// export function Negate ( value ) ; begin
45949: LD_INT 0
45951: PPUSH
// result := not value ;
45952: LD_ADDR_VAR 0 2
45956: PUSH
45957: LD_VAR 0 1
45961: NOT
45962: ST_TO_ADDR
// end ;
45963: LD_VAR 0 2
45967: RET
// export function Inc ( value ) ; begin
45968: LD_INT 0
45970: PPUSH
// result := value + 1 ;
45971: LD_ADDR_VAR 0 2
45975: PUSH
45976: LD_VAR 0 1
45980: PUSH
45981: LD_INT 1
45983: PLUS
45984: ST_TO_ADDR
// end ;
45985: LD_VAR 0 2
45989: RET
// export function Dec ( value ) ; begin
45990: LD_INT 0
45992: PPUSH
// result := value - 1 ;
45993: LD_ADDR_VAR 0 2
45997: PUSH
45998: LD_VAR 0 1
46002: PUSH
46003: LD_INT 1
46005: MINUS
46006: ST_TO_ADDR
// end ;
46007: LD_VAR 0 2
46011: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46012: LD_INT 0
46014: PPUSH
46015: PPUSH
46016: PPUSH
46017: PPUSH
46018: PPUSH
46019: PPUSH
46020: PPUSH
46021: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46022: LD_VAR 0 1
46026: PPUSH
46027: LD_VAR 0 2
46031: PPUSH
46032: CALL_OW 488
46036: NOT
46037: IFTRUE 46056
46039: PUSH
46040: LD_VAR 0 3
46044: PPUSH
46045: LD_VAR 0 4
46049: PPUSH
46050: CALL_OW 488
46054: NOT
46055: OR
46056: IFFALSE 46069
// begin result := - 1 ;
46058: LD_ADDR_VAR 0 5
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: ST_TO_ADDR
// exit ;
46067: GO 46304
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46069: LD_ADDR_VAR 0 12
46073: PUSH
46074: LD_VAR 0 1
46078: PPUSH
46079: LD_VAR 0 2
46083: PPUSH
46084: LD_VAR 0 3
46088: PPUSH
46089: LD_VAR 0 4
46093: PPUSH
46094: CALL 45140 0 4
46098: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46099: LD_ADDR_VAR 0 11
46103: PUSH
46104: LD_VAR 0 1
46108: PPUSH
46109: LD_VAR 0 2
46113: PPUSH
46114: LD_VAR 0 12
46118: PUSH
46119: LD_INT 1
46121: ARRAY
46122: PPUSH
46123: LD_VAR 0 12
46127: PUSH
46128: LD_INT 2
46130: ARRAY
46131: PPUSH
46132: CALL_OW 298
46136: ST_TO_ADDR
// distance := 9999 ;
46137: LD_ADDR_VAR 0 10
46141: PUSH
46142: LD_INT 9999
46144: ST_TO_ADDR
// for i := 0 to 5 do
46145: LD_ADDR_VAR 0 6
46149: PUSH
46150: DOUBLE
46151: LD_INT 0
46153: DEC
46154: ST_TO_ADDR
46155: LD_INT 5
46157: PUSH
46158: FOR_TO
46159: IFFALSE 46302
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46161: LD_ADDR_VAR 0 7
46165: PUSH
46166: LD_VAR 0 1
46170: PPUSH
46171: LD_VAR 0 6
46175: PPUSH
46176: LD_VAR 0 11
46180: PPUSH
46181: CALL_OW 272
46185: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46186: LD_ADDR_VAR 0 8
46190: PUSH
46191: LD_VAR 0 2
46195: PPUSH
46196: LD_VAR 0 6
46200: PPUSH
46201: LD_VAR 0 11
46205: PPUSH
46206: CALL_OW 273
46210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46211: LD_VAR 0 7
46215: PPUSH
46216: LD_VAR 0 8
46220: PPUSH
46221: CALL_OW 488
46225: NOT
46226: IFFALSE 46230
// continue ;
46228: GO 46158
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46230: LD_ADDR_VAR 0 9
46234: PUSH
46235: LD_VAR 0 12
46239: PUSH
46240: LD_INT 1
46242: ARRAY
46243: PPUSH
46244: LD_VAR 0 12
46248: PUSH
46249: LD_INT 2
46251: ARRAY
46252: PPUSH
46253: LD_VAR 0 7
46257: PPUSH
46258: LD_VAR 0 8
46262: PPUSH
46263: CALL_OW 298
46267: ST_TO_ADDR
// if tmp < distance then
46268: LD_VAR 0 9
46272: PUSH
46273: LD_VAR 0 10
46277: LESS
46278: IFFALSE 46300
// begin result := i ;
46280: LD_ADDR_VAR 0 5
46284: PUSH
46285: LD_VAR 0 6
46289: ST_TO_ADDR
// distance := tmp ;
46290: LD_ADDR_VAR 0 10
46294: PUSH
46295: LD_VAR 0 9
46299: ST_TO_ADDR
// end ; end ;
46300: GO 46158
46302: POP
46303: POP
// end ;
46304: LD_VAR 0 5
46308: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46309: LD_INT 0
46311: PPUSH
46312: PPUSH
// if not driver or not IsInUnit ( driver ) then
46313: LD_VAR 0 1
46317: NOT
46318: IFTRUE 46332
46320: PUSH
46321: LD_VAR 0 1
46325: PPUSH
46326: CALL_OW 310
46330: NOT
46331: OR
46332: IFFALSE 46336
// exit ;
46334: GO 46426
// vehicle := IsInUnit ( driver ) ;
46336: LD_ADDR_VAR 0 3
46340: PUSH
46341: LD_VAR 0 1
46345: PPUSH
46346: CALL_OW 310
46350: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46351: LD_VAR 0 1
46355: PPUSH
46356: LD_STRING \
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: LD_INT 0
46367: PUSH
46368: LD_INT 0
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: PUSH
46386: LD_STRING E
46388: PUSH
46389: LD_INT 0
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: LD_VAR 0 3
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PPUSH
46422: CALL_OW 446
// end ;
46426: LD_VAR 0 2
46430: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46431: LD_INT 0
46433: PPUSH
46434: PPUSH
// if not driver or not IsInUnit ( driver ) then
46435: LD_VAR 0 1
46439: NOT
46440: IFTRUE 46454
46442: PUSH
46443: LD_VAR 0 1
46447: PPUSH
46448: CALL_OW 310
46452: NOT
46453: OR
46454: IFFALSE 46458
// exit ;
46456: GO 46548
// vehicle := IsInUnit ( driver ) ;
46458: LD_ADDR_VAR 0 3
46462: PUSH
46463: LD_VAR 0 1
46467: PPUSH
46468: CALL_OW 310
46472: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46473: LD_VAR 0 1
46477: PPUSH
46478: LD_STRING \
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: PUSH
46508: LD_STRING E
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: LD_VAR 0 3
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PPUSH
46544: CALL_OW 447
// end ;
46548: LD_VAR 0 2
46552: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46553: LD_INT 0
46555: PPUSH
46556: PPUSH
46557: PPUSH
// tmp := [ ] ;
46558: LD_ADDR_VAR 0 5
46562: PUSH
46563: EMPTY
46564: ST_TO_ADDR
// for i in units do
46565: LD_ADDR_VAR 0 4
46569: PUSH
46570: LD_VAR 0 1
46574: PUSH
46575: FOR_IN
46576: IFFALSE 46614
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46578: LD_ADDR_VAR 0 5
46582: PUSH
46583: LD_VAR 0 5
46587: PPUSH
46588: LD_VAR 0 5
46592: PUSH
46593: LD_INT 1
46595: PLUS
46596: PPUSH
46597: LD_VAR 0 4
46601: PPUSH
46602: CALL_OW 256
46606: PPUSH
46607: CALL_OW 2
46611: ST_TO_ADDR
46612: GO 46575
46614: POP
46615: POP
// if not tmp then
46616: LD_VAR 0 5
46620: NOT
46621: IFFALSE 46625
// exit ;
46623: GO 46673
// if asc then
46625: LD_VAR 0 2
46629: IFFALSE 46653
// result := SortListByListAsc ( units , tmp ) else
46631: LD_ADDR_VAR 0 3
46635: PUSH
46636: LD_VAR 0 1
46640: PPUSH
46641: LD_VAR 0 5
46645: PPUSH
46646: CALL_OW 76
46650: ST_TO_ADDR
46651: GO 46673
// result := SortListByListDesc ( units , tmp ) ;
46653: LD_ADDR_VAR 0 3
46657: PUSH
46658: LD_VAR 0 1
46662: PPUSH
46663: LD_VAR 0 5
46667: PPUSH
46668: CALL_OW 77
46672: ST_TO_ADDR
// end ;
46673: LD_VAR 0 3
46677: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46678: LD_INT 0
46680: PPUSH
46681: PPUSH
// task := GetTaskList ( mech ) ;
46682: LD_ADDR_VAR 0 4
46686: PUSH
46687: LD_VAR 0 1
46691: PPUSH
46692: CALL_OW 437
46696: ST_TO_ADDR
// if not task then
46697: LD_VAR 0 4
46701: NOT
46702: IFFALSE 46706
// exit ;
46704: GO 46750
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46706: LD_ADDR_VAR 0 3
46710: PUSH
46711: LD_VAR 0 4
46715: PUSH
46716: LD_INT 1
46718: ARRAY
46719: PUSH
46720: LD_INT 1
46722: ARRAY
46723: PUSH
46724: LD_STRING r
46726: EQUAL
46727: IFFALSE 46749
46729: PUSH
46730: LD_VAR 0 4
46734: PUSH
46735: LD_INT 1
46737: ARRAY
46738: PUSH
46739: LD_INT 4
46741: ARRAY
46742: PUSH
46743: LD_VAR 0 2
46747: EQUAL
46748: AND
46749: ST_TO_ADDR
// end ;
46750: LD_VAR 0 3
46754: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46755: LD_INT 0
46757: PPUSH
// SetDir ( unit , d ) ;
46758: LD_VAR 0 1
46762: PPUSH
46763: LD_VAR 0 4
46767: PPUSH
46768: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
46772: LD_ADDR_VAR 0 6
46776: PUSH
46777: LD_VAR 0 1
46781: PPUSH
46782: LD_VAR 0 2
46786: PPUSH
46787: LD_VAR 0 3
46791: PPUSH
46792: LD_VAR 0 5
46796: PPUSH
46797: CALL_OW 48
46801: ST_TO_ADDR
// end ;
46802: LD_VAR 0 6
46806: RET
// export function ToNaturalNumber ( number ) ; begin
46807: LD_INT 0
46809: PPUSH
// result := number div 1 ;
46810: LD_ADDR_VAR 0 2
46814: PUSH
46815: LD_VAR 0 1
46819: PUSH
46820: LD_INT 1
46822: DIV
46823: ST_TO_ADDR
// if number < 0 then
46824: LD_VAR 0 1
46828: PUSH
46829: LD_INT 0
46831: LESS
46832: IFFALSE 46842
// result := 0 ;
46834: LD_ADDR_VAR 0 2
46838: PUSH
46839: LD_INT 0
46841: ST_TO_ADDR
// end ;
46842: LD_VAR 0 2
46846: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
46847: LD_INT 0
46849: PPUSH
46850: PPUSH
46851: PPUSH
// if not buildings then
46852: LD_VAR 0 1
46856: NOT
46857: IFFALSE 46861
// exit ;
46859: GO 46976
// tmp := [ ] ;
46861: LD_ADDR_VAR 0 5
46865: PUSH
46866: EMPTY
46867: ST_TO_ADDR
// for b in buildings do
46868: LD_ADDR_VAR 0 4
46872: PUSH
46873: LD_VAR 0 1
46877: PUSH
46878: FOR_IN
46879: IFFALSE 46917
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
46881: LD_ADDR_VAR 0 5
46885: PUSH
46886: LD_VAR 0 5
46890: PPUSH
46891: LD_VAR 0 5
46895: PUSH
46896: LD_INT 1
46898: PLUS
46899: PPUSH
46900: LD_VAR 0 4
46904: PPUSH
46905: CALL_OW 266
46909: PPUSH
46910: CALL_OW 1
46914: ST_TO_ADDR
46915: GO 46878
46917: POP
46918: POP
// if not tmp then
46919: LD_VAR 0 5
46923: NOT
46924: IFFALSE 46928
// exit ;
46926: GO 46976
// if asc then
46928: LD_VAR 0 2
46932: IFFALSE 46956
// result := SortListByListAsc ( buildings , tmp ) else
46934: LD_ADDR_VAR 0 3
46938: PUSH
46939: LD_VAR 0 1
46943: PPUSH
46944: LD_VAR 0 5
46948: PPUSH
46949: CALL_OW 76
46953: ST_TO_ADDR
46954: GO 46976
// result := SortListByListDesc ( buildings , tmp ) ;
46956: LD_ADDR_VAR 0 3
46960: PUSH
46961: LD_VAR 0 1
46965: PPUSH
46966: LD_VAR 0 5
46970: PPUSH
46971: CALL_OW 77
46975: ST_TO_ADDR
// end ;
46976: LD_VAR 0 3
46980: RET
// export function SortByClass ( units , class ) ; var un ; begin
46981: LD_INT 0
46983: PPUSH
46984: PPUSH
// if not units or not class then
46985: LD_VAR 0 1
46989: NOT
46990: IFTRUE 46999
46992: PUSH
46993: LD_VAR 0 2
46997: NOT
46998: OR
46999: IFFALSE 47003
// exit ;
47001: GO 47098
// result := [ ] ;
47003: LD_ADDR_VAR 0 3
47007: PUSH
47008: EMPTY
47009: ST_TO_ADDR
// for un in units do
47010: LD_ADDR_VAR 0 4
47014: PUSH
47015: LD_VAR 0 1
47019: PUSH
47020: FOR_IN
47021: IFFALSE 47096
// if GetClass ( un ) = class then
47023: LD_VAR 0 4
47027: PPUSH
47028: CALL_OW 257
47032: PUSH
47033: LD_VAR 0 2
47037: EQUAL
47038: IFFALSE 47065
// result := Insert ( result , 1 , un ) else
47040: LD_ADDR_VAR 0 3
47044: PUSH
47045: LD_VAR 0 3
47049: PPUSH
47050: LD_INT 1
47052: PPUSH
47053: LD_VAR 0 4
47057: PPUSH
47058: CALL_OW 2
47062: ST_TO_ADDR
47063: GO 47094
// result := Replace ( result , result + 1 , un ) ;
47065: LD_ADDR_VAR 0 3
47069: PUSH
47070: LD_VAR 0 3
47074: PPUSH
47075: LD_VAR 0 3
47079: PUSH
47080: LD_INT 1
47082: PLUS
47083: PPUSH
47084: LD_VAR 0 4
47088: PPUSH
47089: CALL_OW 1
47093: ST_TO_ADDR
47094: GO 47020
47096: POP
47097: POP
// end ;
47098: LD_VAR 0 3
47102: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47103: LD_INT 0
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
47109: PPUSH
47110: PPUSH
47111: PPUSH
// result := [ ] ;
47112: LD_ADDR_VAR 0 4
47116: PUSH
47117: EMPTY
47118: ST_TO_ADDR
// if x - r < 0 then
47119: LD_VAR 0 1
47123: PUSH
47124: LD_VAR 0 3
47128: MINUS
47129: PUSH
47130: LD_INT 0
47132: LESS
47133: IFFALSE 47145
// min_x := 0 else
47135: LD_ADDR_VAR 0 8
47139: PUSH
47140: LD_INT 0
47142: ST_TO_ADDR
47143: GO 47161
// min_x := x - r ;
47145: LD_ADDR_VAR 0 8
47149: PUSH
47150: LD_VAR 0 1
47154: PUSH
47155: LD_VAR 0 3
47159: MINUS
47160: ST_TO_ADDR
// if y - r < 0 then
47161: LD_VAR 0 2
47165: PUSH
47166: LD_VAR 0 3
47170: MINUS
47171: PUSH
47172: LD_INT 0
47174: LESS
47175: IFFALSE 47187
// min_y := 0 else
47177: LD_ADDR_VAR 0 7
47181: PUSH
47182: LD_INT 0
47184: ST_TO_ADDR
47185: GO 47203
// min_y := y - r ;
47187: LD_ADDR_VAR 0 7
47191: PUSH
47192: LD_VAR 0 2
47196: PUSH
47197: LD_VAR 0 3
47201: MINUS
47202: ST_TO_ADDR
// max_x := x + r ;
47203: LD_ADDR_VAR 0 9
47207: PUSH
47208: LD_VAR 0 1
47212: PUSH
47213: LD_VAR 0 3
47217: PLUS
47218: ST_TO_ADDR
// max_y := y + r ;
47219: LD_ADDR_VAR 0 10
47223: PUSH
47224: LD_VAR 0 2
47228: PUSH
47229: LD_VAR 0 3
47233: PLUS
47234: ST_TO_ADDR
// for _x = min_x to max_x do
47235: LD_ADDR_VAR 0 5
47239: PUSH
47240: DOUBLE
47241: LD_VAR 0 8
47245: DEC
47246: ST_TO_ADDR
47247: LD_VAR 0 9
47251: PUSH
47252: FOR_TO
47253: IFFALSE 47354
// for _y = min_y to max_y do
47255: LD_ADDR_VAR 0 6
47259: PUSH
47260: DOUBLE
47261: LD_VAR 0 7
47265: DEC
47266: ST_TO_ADDR
47267: LD_VAR 0 10
47271: PUSH
47272: FOR_TO
47273: IFFALSE 47350
// begin if not ValidHex ( _x , _y ) then
47275: LD_VAR 0 5
47279: PPUSH
47280: LD_VAR 0 6
47284: PPUSH
47285: CALL_OW 488
47289: NOT
47290: IFFALSE 47294
// continue ;
47292: GO 47272
// if GetResourceTypeXY ( _x , _y ) then
47294: LD_VAR 0 5
47298: PPUSH
47299: LD_VAR 0 6
47303: PPUSH
47304: CALL_OW 283
47308: IFFALSE 47348
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47310: LD_ADDR_VAR 0 4
47314: PUSH
47315: LD_VAR 0 4
47319: PPUSH
47320: LD_VAR 0 4
47324: PUSH
47325: LD_INT 1
47327: PLUS
47328: PPUSH
47329: LD_VAR 0 5
47333: PUSH
47334: LD_VAR 0 6
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PPUSH
47343: CALL_OW 1
47347: ST_TO_ADDR
// end ;
47348: GO 47272
47350: POP
47351: POP
47352: GO 47252
47354: POP
47355: POP
// end ;
47356: LD_VAR 0 4
47360: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47361: LD_INT 0
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
// if not units then
47371: LD_VAR 0 1
47375: NOT
47376: IFFALSE 47380
// exit ;
47378: GO 47912
// result := UnitFilter ( units , [ f_ok ] ) ;
47380: LD_ADDR_VAR 0 3
47384: PUSH
47385: LD_VAR 0 1
47389: PPUSH
47390: LD_INT 50
47392: PUSH
47393: EMPTY
47394: LIST
47395: PPUSH
47396: CALL_OW 72
47400: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47401: LD_ADDR_VAR 0 8
47405: PUSH
47406: LD_VAR 0 1
47410: PUSH
47411: LD_INT 1
47413: ARRAY
47414: PPUSH
47415: CALL_OW 255
47419: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
47420: LD_ADDR_VAR 0 10
47424: PUSH
47425: LD_INT 29
47427: PUSH
47428: LD_INT 91
47430: PUSH
47431: LD_INT 49
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: LIST
47438: ST_TO_ADDR
// if not result then
47439: LD_VAR 0 3
47443: NOT
47444: IFFALSE 47448
// exit ;
47446: GO 47912
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47448: LD_ADDR_VAR 0 5
47452: PUSH
47453: LD_INT 81
47455: PUSH
47456: LD_VAR 0 8
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PPUSH
47465: CALL_OW 69
47469: ST_TO_ADDR
// for i in result do
47470: LD_ADDR_VAR 0 4
47474: PUSH
47475: LD_VAR 0 3
47479: PUSH
47480: FOR_IN
47481: IFFALSE 47910
// begin tag := GetTag ( i ) + 1 ;
47483: LD_ADDR_VAR 0 9
47487: PUSH
47488: LD_VAR 0 4
47492: PPUSH
47493: CALL_OW 110
47497: PUSH
47498: LD_INT 1
47500: PLUS
47501: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
47502: LD_ADDR_VAR 0 7
47506: PUSH
47507: LD_VAR 0 4
47511: PPUSH
47512: CALL_OW 250
47516: PPUSH
47517: LD_VAR 0 4
47521: PPUSH
47522: CALL_OW 251
47526: PPUSH
47527: LD_INT 4
47529: PPUSH
47530: CALL 47103 0 3
47534: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
47535: LD_VAR 0 4
47539: PPUSH
47540: CALL_OW 247
47544: PUSH
47545: LD_INT 2
47547: EQUAL
47548: IFFALSE 47560
47550: PUSH
47551: LD_VAR 0 7
47555: PUSH
47556: LD_INT 2
47558: GREATER
47559: AND
47560: IFFALSE 47580
47562: PUSH
47563: LD_VAR 0 4
47567: PPUSH
47568: CALL_OW 264
47572: PUSH
47573: LD_VAR 0 10
47577: IN
47578: NOT
47579: AND
47580: IFFALSE 47619
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47582: LD_VAR 0 4
47586: PPUSH
47587: LD_VAR 0 7
47591: PUSH
47592: LD_INT 1
47594: ARRAY
47595: PUSH
47596: LD_INT 1
47598: ARRAY
47599: PPUSH
47600: LD_VAR 0 7
47604: PUSH
47605: LD_INT 1
47607: ARRAY
47608: PUSH
47609: LD_INT 2
47611: ARRAY
47612: PPUSH
47613: CALL_OW 116
47617: GO 47908
// if path > tag then
47619: LD_VAR 0 2
47623: PUSH
47624: LD_VAR 0 9
47628: GREATER
47629: IFFALSE 47837
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
47631: LD_ADDR_VAR 0 6
47635: PUSH
47636: LD_VAR 0 5
47640: PPUSH
47641: LD_INT 91
47643: PUSH
47644: LD_VAR 0 4
47648: PUSH
47649: LD_INT 8
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: LIST
47656: PPUSH
47657: CALL_OW 72
47661: ST_TO_ADDR
// if nearEnemy then
47662: LD_VAR 0 6
47666: IFFALSE 47735
// begin if GetWeapon ( i ) = ru_time_lapser then
47668: LD_VAR 0 4
47672: PPUSH
47673: CALL_OW 264
47677: PUSH
47678: LD_INT 49
47680: EQUAL
47681: IFFALSE 47709
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47683: LD_VAR 0 4
47687: PPUSH
47688: LD_VAR 0 6
47692: PPUSH
47693: LD_VAR 0 4
47697: PPUSH
47698: CALL_OW 74
47702: PPUSH
47703: CALL_OW 112
47707: GO 47733
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
47709: LD_VAR 0 4
47713: PPUSH
47714: LD_VAR 0 6
47718: PPUSH
47719: LD_VAR 0 4
47723: PPUSH
47724: CALL_OW 74
47728: PPUSH
47729: CALL 48993 0 2
// end else
47733: GO 47835
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47735: LD_VAR 0 4
47739: PPUSH
47740: LD_VAR 0 2
47744: PUSH
47745: LD_VAR 0 9
47749: ARRAY
47750: PUSH
47751: LD_INT 1
47753: ARRAY
47754: PPUSH
47755: LD_VAR 0 2
47759: PUSH
47760: LD_VAR 0 9
47764: ARRAY
47765: PUSH
47766: LD_INT 2
47768: ARRAY
47769: PPUSH
47770: CALL_OW 297
47774: PUSH
47775: LD_INT 6
47777: GREATER
47778: IFFALSE 47821
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47780: LD_VAR 0 4
47784: PPUSH
47785: LD_VAR 0 2
47789: PUSH
47790: LD_VAR 0 9
47794: ARRAY
47795: PUSH
47796: LD_INT 1
47798: ARRAY
47799: PPUSH
47800: LD_VAR 0 2
47804: PUSH
47805: LD_VAR 0 9
47809: ARRAY
47810: PUSH
47811: LD_INT 2
47813: ARRAY
47814: PPUSH
47815: CALL_OW 114
47819: GO 47835
// SetTag ( i , tag ) ;
47821: LD_VAR 0 4
47825: PPUSH
47826: LD_VAR 0 9
47830: PPUSH
47831: CALL_OW 109
// end else
47835: GO 47908
// if enemy then
47837: LD_VAR 0 5
47841: IFFALSE 47908
// begin if GetWeapon ( i ) = ru_time_lapser then
47843: LD_VAR 0 4
47847: PPUSH
47848: CALL_OW 264
47852: PUSH
47853: LD_INT 49
47855: EQUAL
47856: IFFALSE 47884
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47858: LD_VAR 0 4
47862: PPUSH
47863: LD_VAR 0 5
47867: PPUSH
47868: LD_VAR 0 4
47872: PPUSH
47873: CALL_OW 74
47877: PPUSH
47878: CALL_OW 112
47882: GO 47908
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47884: LD_VAR 0 4
47888: PPUSH
47889: LD_VAR 0 5
47893: PPUSH
47894: LD_VAR 0 4
47898: PPUSH
47899: CALL_OW 74
47903: PPUSH
47904: CALL 48993 0 2
// end ; end ;
47908: GO 47480
47910: POP
47911: POP
// end ;
47912: LD_VAR 0 3
47916: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47917: LD_INT 0
47919: PPUSH
47920: PPUSH
47921: PPUSH
// if not unit or IsInUnit ( unit ) then
47922: LD_VAR 0 1
47926: NOT
47927: IFTRUE 47940
47929: PUSH
47930: LD_VAR 0 1
47934: PPUSH
47935: CALL_OW 310
47939: OR
47940: IFFALSE 47944
// exit ;
47942: GO 48035
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47944: LD_ADDR_VAR 0 4
47948: PUSH
47949: LD_VAR 0 1
47953: PPUSH
47954: CALL_OW 250
47958: PPUSH
47959: LD_VAR 0 2
47963: PPUSH
47964: LD_INT 1
47966: PPUSH
47967: CALL_OW 272
47971: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47972: LD_ADDR_VAR 0 5
47976: PUSH
47977: LD_VAR 0 1
47981: PPUSH
47982: CALL_OW 251
47986: PPUSH
47987: LD_VAR 0 2
47991: PPUSH
47992: LD_INT 1
47994: PPUSH
47995: CALL_OW 273
47999: ST_TO_ADDR
// if ValidHex ( x , y ) then
48000: LD_VAR 0 4
48004: PPUSH
48005: LD_VAR 0 5
48009: PPUSH
48010: CALL_OW 488
48014: IFFALSE 48035
// ComTurnXY ( unit , x , y ) ;
48016: LD_VAR 0 1
48020: PPUSH
48021: LD_VAR 0 4
48025: PPUSH
48026: LD_VAR 0 5
48030: PPUSH
48031: CALL_OW 118
// end ;
48035: LD_VAR 0 3
48039: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48040: LD_INT 0
48042: PPUSH
48043: PPUSH
// result := false ;
48044: LD_ADDR_VAR 0 3
48048: PUSH
48049: LD_INT 0
48051: ST_TO_ADDR
// if not units then
48052: LD_VAR 0 2
48056: NOT
48057: IFFALSE 48061
// exit ;
48059: GO 48106
// for i in units do
48061: LD_ADDR_VAR 0 4
48065: PUSH
48066: LD_VAR 0 2
48070: PUSH
48071: FOR_IN
48072: IFFALSE 48104
// if See ( side , i ) then
48074: LD_VAR 0 1
48078: PPUSH
48079: LD_VAR 0 4
48083: PPUSH
48084: CALL_OW 292
48088: IFFALSE 48102
// begin result := true ;
48090: LD_ADDR_VAR 0 3
48094: PUSH
48095: LD_INT 1
48097: ST_TO_ADDR
// exit ;
48098: POP
48099: POP
48100: GO 48106
// end ;
48102: GO 48071
48104: POP
48105: POP
// end ;
48106: LD_VAR 0 3
48110: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48111: LD_INT 0
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
// if not unit or not points then
48117: LD_VAR 0 1
48121: NOT
48122: IFTRUE 48131
48124: PUSH
48125: LD_VAR 0 2
48129: NOT
48130: OR
48131: IFFALSE 48135
// exit ;
48133: GO 48225
// dist := 99999 ;
48135: LD_ADDR_VAR 0 5
48139: PUSH
48140: LD_INT 99999
48142: ST_TO_ADDR
// for i in points do
48143: LD_ADDR_VAR 0 4
48147: PUSH
48148: LD_VAR 0 2
48152: PUSH
48153: FOR_IN
48154: IFFALSE 48223
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48156: LD_ADDR_VAR 0 6
48160: PUSH
48161: LD_VAR 0 1
48165: PPUSH
48166: LD_VAR 0 4
48170: PUSH
48171: LD_INT 1
48173: ARRAY
48174: PPUSH
48175: LD_VAR 0 4
48179: PUSH
48180: LD_INT 2
48182: ARRAY
48183: PPUSH
48184: CALL_OW 297
48188: ST_TO_ADDR
// if tmpDist < dist then
48189: LD_VAR 0 6
48193: PUSH
48194: LD_VAR 0 5
48198: LESS
48199: IFFALSE 48221
// begin result := i ;
48201: LD_ADDR_VAR 0 3
48205: PUSH
48206: LD_VAR 0 4
48210: ST_TO_ADDR
// dist := tmpDist ;
48211: LD_ADDR_VAR 0 5
48215: PUSH
48216: LD_VAR 0 6
48220: ST_TO_ADDR
// end ; end ;
48221: GO 48153
48223: POP
48224: POP
// end ;
48225: LD_VAR 0 3
48229: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48230: LD_INT 0
48232: PPUSH
// uc_side := side ;
48233: LD_ADDR_OWVAR 20
48237: PUSH
48238: LD_VAR 0 1
48242: ST_TO_ADDR
// uc_nation := 3 ;
48243: LD_ADDR_OWVAR 21
48247: PUSH
48248: LD_INT 3
48250: ST_TO_ADDR
// vc_chassis := 25 ;
48251: LD_ADDR_OWVAR 37
48255: PUSH
48256: LD_INT 25
48258: ST_TO_ADDR
// vc_engine := engine_siberite ;
48259: LD_ADDR_OWVAR 39
48263: PUSH
48264: LD_INT 3
48266: ST_TO_ADDR
// vc_control := control_computer ;
48267: LD_ADDR_OWVAR 38
48271: PUSH
48272: LD_INT 3
48274: ST_TO_ADDR
// vc_weapon := 59 ;
48275: LD_ADDR_OWVAR 40
48279: PUSH
48280: LD_INT 59
48282: ST_TO_ADDR
// result := CreateVehicle ;
48283: LD_ADDR_VAR 0 5
48287: PUSH
48288: CALL_OW 45
48292: ST_TO_ADDR
// SetDir ( result , d ) ;
48293: LD_VAR 0 5
48297: PPUSH
48298: LD_VAR 0 4
48302: PPUSH
48303: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48307: LD_VAR 0 5
48311: PPUSH
48312: LD_VAR 0 2
48316: PPUSH
48317: LD_VAR 0 3
48321: PPUSH
48322: LD_INT 0
48324: PPUSH
48325: CALL_OW 48
// end ;
48329: LD_VAR 0 5
48333: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48334: LD_INT 0
48336: PPUSH
48337: PPUSH
48338: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48339: LD_ADDR_VAR 0 2
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48362: LD_VAR 0 1
48366: NOT
48367: IFTRUE 48400
48369: PUSH
48370: LD_VAR 0 1
48374: PPUSH
48375: CALL_OW 264
48379: PUSH
48380: LD_INT 12
48382: PUSH
48383: LD_INT 51
48385: PUSH
48386: LD_INT 32
48388: PUSH
48389: LD_INT 89
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: IN
48398: NOT
48399: OR
48400: IFFALSE 48404
// exit ;
48402: GO 48502
// for i := 1 to 3 do
48404: LD_ADDR_VAR 0 3
48408: PUSH
48409: DOUBLE
48410: LD_INT 1
48412: DEC
48413: ST_TO_ADDR
48414: LD_INT 3
48416: PUSH
48417: FOR_TO
48418: IFFALSE 48500
// begin tmp := GetCargo ( cargo , i ) ;
48420: LD_ADDR_VAR 0 4
48424: PUSH
48425: LD_VAR 0 1
48429: PPUSH
48430: LD_VAR 0 3
48434: PPUSH
48435: CALL_OW 289
48439: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
48440: LD_ADDR_VAR 0 2
48444: PUSH
48445: LD_VAR 0 2
48449: PPUSH
48450: LD_VAR 0 3
48454: PPUSH
48455: LD_VAR 0 4
48459: PPUSH
48460: CALL_OW 1
48464: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
48465: LD_ADDR_VAR 0 2
48469: PUSH
48470: LD_VAR 0 2
48474: PPUSH
48475: LD_INT 4
48477: PPUSH
48478: LD_VAR 0 2
48482: PUSH
48483: LD_INT 4
48485: ARRAY
48486: PUSH
48487: LD_VAR 0 4
48491: PLUS
48492: PPUSH
48493: CALL_OW 1
48497: ST_TO_ADDR
// end ;
48498: GO 48417
48500: POP
48501: POP
// end ;
48502: LD_VAR 0 2
48506: RET
// export function Length ( array ) ; begin
48507: LD_INT 0
48509: PPUSH
// result := array + 0 ;
48510: LD_ADDR_VAR 0 2
48514: PUSH
48515: LD_VAR 0 1
48519: PUSH
48520: LD_INT 0
48522: PLUS
48523: ST_TO_ADDR
// end ;
48524: LD_VAR 0 2
48528: RET
// export function PrepareArray ( array ) ; begin
48529: LD_INT 0
48531: PPUSH
// result := array diff 0 ;
48532: LD_ADDR_VAR 0 2
48536: PUSH
48537: LD_VAR 0 1
48541: PUSH
48542: LD_INT 0
48544: DIFF
48545: ST_TO_ADDR
// if not result [ 1 ] then
48546: LD_VAR 0 2
48550: PUSH
48551: LD_INT 1
48553: ARRAY
48554: NOT
48555: IFFALSE 48575
// result := Delete ( result , 1 ) ;
48557: LD_ADDR_VAR 0 2
48561: PUSH
48562: LD_VAR 0 2
48566: PPUSH
48567: LD_INT 1
48569: PPUSH
48570: CALL_OW 3
48574: ST_TO_ADDR
// end ;
48575: LD_VAR 0 2
48579: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
48580: LD_INT 0
48582: PPUSH
48583: PPUSH
48584: PPUSH
48585: PPUSH
// sibRocketRange := 25 ;
48586: LD_ADDR_VAR 0 6
48590: PUSH
48591: LD_INT 25
48593: ST_TO_ADDR
// result := false ;
48594: LD_ADDR_VAR 0 4
48598: PUSH
48599: LD_INT 0
48601: ST_TO_ADDR
// for i := 0 to 5 do
48602: LD_ADDR_VAR 0 5
48606: PUSH
48607: DOUBLE
48608: LD_INT 0
48610: DEC
48611: ST_TO_ADDR
48612: LD_INT 5
48614: PUSH
48615: FOR_TO
48616: IFFALSE 48683
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
48618: LD_VAR 0 1
48622: PPUSH
48623: LD_VAR 0 5
48627: PPUSH
48628: LD_VAR 0 6
48632: PPUSH
48633: CALL_OW 272
48637: PPUSH
48638: LD_VAR 0 2
48642: PPUSH
48643: LD_VAR 0 5
48647: PPUSH
48648: LD_VAR 0 6
48652: PPUSH
48653: CALL_OW 273
48657: PPUSH
48658: LD_VAR 0 3
48662: PPUSH
48663: CALL_OW 309
48667: IFFALSE 48681
// begin result := true ;
48669: LD_ADDR_VAR 0 4
48673: PUSH
48674: LD_INT 1
48676: ST_TO_ADDR
// exit ;
48677: POP
48678: POP
48679: GO 48685
// end ;
48681: GO 48615
48683: POP
48684: POP
// end ;
48685: LD_VAR 0 4
48689: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
48690: LD_INT 0
48692: PPUSH
48693: PPUSH
48694: PPUSH
// if btype = b_depot then
48695: LD_VAR 0 2
48699: PUSH
48700: LD_INT 0
48702: EQUAL
48703: IFFALSE 48715
// begin result := true ;
48705: LD_ADDR_VAR 0 3
48709: PUSH
48710: LD_INT 1
48712: ST_TO_ADDR
// exit ;
48713: GO 48835
// end ; pom := GetBase ( depot ) ;
48715: LD_ADDR_VAR 0 4
48719: PUSH
48720: LD_VAR 0 1
48724: PPUSH
48725: CALL_OW 274
48729: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48730: LD_ADDR_VAR 0 5
48734: PUSH
48735: LD_VAR 0 2
48739: PPUSH
48740: LD_VAR 0 1
48744: PPUSH
48745: CALL_OW 248
48749: PPUSH
48750: CALL_OW 450
48754: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
48755: LD_ADDR_VAR 0 3
48759: PUSH
48760: LD_VAR 0 4
48764: PPUSH
48765: LD_INT 1
48767: PPUSH
48768: CALL_OW 275
48772: PUSH
48773: LD_VAR 0 5
48777: PUSH
48778: LD_INT 1
48780: ARRAY
48781: GREATEREQUAL
48782: IFFALSE 48808
48784: PUSH
48785: LD_VAR 0 4
48789: PPUSH
48790: LD_INT 2
48792: PPUSH
48793: CALL_OW 275
48797: PUSH
48798: LD_VAR 0 5
48802: PUSH
48803: LD_INT 2
48805: ARRAY
48806: GREATEREQUAL
48807: AND
48808: IFFALSE 48834
48810: PUSH
48811: LD_VAR 0 4
48815: PPUSH
48816: LD_INT 3
48818: PPUSH
48819: CALL_OW 275
48823: PUSH
48824: LD_VAR 0 5
48828: PUSH
48829: LD_INT 3
48831: ARRAY
48832: GREATEREQUAL
48833: AND
48834: ST_TO_ADDR
// end ;
48835: LD_VAR 0 3
48839: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
48840: LD_INT 0
48842: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
48843: LD_VAR 0 1
48847: PPUSH
48848: LD_VAR 0 2
48852: PPUSH
48853: LD_INT 0
48855: PPUSH
48856: LD_INT 0
48858: PPUSH
48859: LD_INT 1
48861: PPUSH
48862: LD_INT 0
48864: PPUSH
48865: CALL_OW 587
// end ;
48869: LD_VAR 0 3
48873: RET
// export function CenterOnNow ( unit ) ; begin
48874: LD_INT 0
48876: PPUSH
// result := IsInUnit ( unit ) ;
48877: LD_ADDR_VAR 0 2
48881: PUSH
48882: LD_VAR 0 1
48886: PPUSH
48887: CALL_OW 310
48891: ST_TO_ADDR
// if not result then
48892: LD_VAR 0 2
48896: NOT
48897: IFFALSE 48909
// result := unit ;
48899: LD_ADDR_VAR 0 2
48903: PUSH
48904: LD_VAR 0 1
48908: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
48909: LD_VAR 0 1
48913: PPUSH
48914: CALL_OW 87
// end ;
48918: LD_VAR 0 2
48922: RET
// export function ComMoveHex ( unit , hex ) ; begin
48923: LD_INT 0
48925: PPUSH
// if not hex then
48926: LD_VAR 0 2
48930: NOT
48931: IFFALSE 48935
// exit ;
48933: GO 48988
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
48935: LD_VAR 0 2
48939: PUSH
48940: LD_INT 1
48942: ARRAY
48943: PPUSH
48944: LD_VAR 0 2
48948: PUSH
48949: LD_INT 2
48951: ARRAY
48952: PPUSH
48953: CALL_OW 428
48957: IFFALSE 48961
// exit ;
48959: GO 48988
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
48961: LD_VAR 0 1
48965: PPUSH
48966: LD_VAR 0 2
48970: PUSH
48971: LD_INT 1
48973: ARRAY
48974: PPUSH
48975: LD_VAR 0 2
48979: PUSH
48980: LD_INT 2
48982: ARRAY
48983: PPUSH
48984: CALL_OW 111
// end ;
48988: LD_VAR 0 3
48992: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
48993: LD_INT 0
48995: PPUSH
48996: PPUSH
48997: PPUSH
// if not unit or not enemy then
48998: LD_VAR 0 1
49002: NOT
49003: IFTRUE 49012
49005: PUSH
49006: LD_VAR 0 2
49010: NOT
49011: OR
49012: IFFALSE 49016
// exit ;
49014: GO 49142
// x := GetX ( enemy ) ;
49016: LD_ADDR_VAR 0 4
49020: PUSH
49021: LD_VAR 0 2
49025: PPUSH
49026: CALL_OW 250
49030: ST_TO_ADDR
// y := GetY ( enemy ) ;
49031: LD_ADDR_VAR 0 5
49035: PUSH
49036: LD_VAR 0 2
49040: PPUSH
49041: CALL_OW 251
49045: ST_TO_ADDR
// if ValidHex ( x , y ) then
49046: LD_VAR 0 4
49050: PPUSH
49051: LD_VAR 0 5
49055: PPUSH
49056: CALL_OW 488
49060: IFFALSE 49142
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
49062: LD_VAR 0 2
49066: PPUSH
49067: CALL_OW 247
49071: PUSH
49072: LD_INT 3
49074: PUSH
49075: LD_INT 2
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: IN
49082: IFTRUE 49105
49084: PUSH
49085: LD_VAR 0 1
49089: PPUSH
49090: CALL_OW 255
49094: PPUSH
49095: LD_VAR 0 2
49099: PPUSH
49100: CALL_OW 292
49104: OR
49105: IFFALSE 49123
// ComAttackUnit ( unit , enemy ) else
49107: LD_VAR 0 1
49111: PPUSH
49112: LD_VAR 0 2
49116: PPUSH
49117: CALL_OW 115
49121: GO 49142
// ComAgressiveMove ( unit , x , y ) ;
49123: LD_VAR 0 1
49127: PPUSH
49128: LD_VAR 0 4
49132: PPUSH
49133: LD_VAR 0 5
49137: PPUSH
49138: CALL_OW 114
// end ;
49142: LD_VAR 0 3
49146: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
49147: LD_INT 0
49149: PPUSH
49150: PPUSH
49151: PPUSH
// list := AreaToList ( area , 0 ) ;
49152: LD_ADDR_VAR 0 5
49156: PUSH
49157: LD_VAR 0 1
49161: PPUSH
49162: LD_INT 0
49164: PPUSH
49165: CALL_OW 517
49169: ST_TO_ADDR
// if not list then
49170: LD_VAR 0 5
49174: NOT
49175: IFFALSE 49179
// exit ;
49177: GO 49309
// if all then
49179: LD_VAR 0 2
49183: IFFALSE 49271
// begin for i := 1 to list [ 1 ] do
49185: LD_ADDR_VAR 0 4
49189: PUSH
49190: DOUBLE
49191: LD_INT 1
49193: DEC
49194: ST_TO_ADDR
49195: LD_VAR 0 5
49199: PUSH
49200: LD_INT 1
49202: ARRAY
49203: PUSH
49204: FOR_TO
49205: IFFALSE 49267
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
49207: LD_ADDR_VAR 0 3
49211: PUSH
49212: LD_VAR 0 3
49216: PPUSH
49217: LD_VAR 0 3
49221: PUSH
49222: LD_INT 1
49224: PLUS
49225: PPUSH
49226: LD_VAR 0 5
49230: PUSH
49231: LD_INT 1
49233: ARRAY
49234: PUSH
49235: LD_VAR 0 4
49239: ARRAY
49240: PUSH
49241: LD_VAR 0 5
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: PUSH
49250: LD_VAR 0 4
49254: ARRAY
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PPUSH
49260: CALL_OW 1
49264: ST_TO_ADDR
49265: GO 49204
49267: POP
49268: POP
// exit ;
49269: GO 49309
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
49271: LD_ADDR_VAR 0 3
49275: PUSH
49276: LD_VAR 0 5
49280: PUSH
49281: LD_INT 1
49283: ARRAY
49284: PUSH
49285: LD_INT 1
49287: ARRAY
49288: PUSH
49289: LD_VAR 0 5
49293: PUSH
49294: LD_INT 2
49296: ARRAY
49297: PUSH
49298: LD_INT 1
49300: ARRAY
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: EMPTY
49307: LIST
49308: ST_TO_ADDR
// end ;
49309: LD_VAR 0 3
49313: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
49314: LD_INT 0
49316: PPUSH
49317: PPUSH
// list := AreaToList ( area , 0 ) ;
49318: LD_ADDR_VAR 0 4
49322: PUSH
49323: LD_VAR 0 1
49327: PPUSH
49328: LD_INT 0
49330: PPUSH
49331: CALL_OW 517
49335: ST_TO_ADDR
// if not list then
49336: LD_VAR 0 4
49340: NOT
49341: IFFALSE 49345
// exit ;
49343: GO 49386
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
49345: LD_ADDR_VAR 0 3
49349: PUSH
49350: LD_VAR 0 4
49354: PUSH
49355: LD_INT 1
49357: ARRAY
49358: PUSH
49359: LD_INT 1
49361: ARRAY
49362: PUSH
49363: LD_VAR 0 4
49367: PUSH
49368: LD_INT 2
49370: ARRAY
49371: PUSH
49372: LD_INT 1
49374: ARRAY
49375: PUSH
49376: LD_VAR 0 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: ST_TO_ADDR
// end ;
49386: LD_VAR 0 3
49390: RET
// export function First ( array ) ; begin
49391: LD_INT 0
49393: PPUSH
// if not array then
49394: LD_VAR 0 1
49398: NOT
49399: IFFALSE 49403
// exit ;
49401: GO 49417
// result := array [ 1 ] ;
49403: LD_ADDR_VAR 0 2
49407: PUSH
49408: LD_VAR 0 1
49412: PUSH
49413: LD_INT 1
49415: ARRAY
49416: ST_TO_ADDR
// end ;
49417: LD_VAR 0 2
49421: RET
// export function Last ( array ) ; begin
49422: LD_INT 0
49424: PPUSH
// if not array then
49425: LD_VAR 0 1
49429: NOT
49430: IFFALSE 49434
// exit ;
49432: GO 49450
// result := array [ array ] ;
49434: LD_ADDR_VAR 0 2
49438: PUSH
49439: LD_VAR 0 1
49443: PUSH
49444: LD_VAR 0 1
49448: ARRAY
49449: ST_TO_ADDR
// end ;
49450: LD_VAR 0 2
49454: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
49455: LD_INT 0
49457: PPUSH
49458: PPUSH
// result := [ ] ;
49459: LD_ADDR_VAR 0 5
49463: PUSH
49464: EMPTY
49465: ST_TO_ADDR
// if not array then
49466: LD_VAR 0 1
49470: NOT
49471: IFFALSE 49475
// exit ;
49473: GO 49587
// for i := 1 to array do
49475: LD_ADDR_VAR 0 6
49479: PUSH
49480: DOUBLE
49481: LD_INT 1
49483: DEC
49484: ST_TO_ADDR
49485: LD_VAR 0 1
49489: PUSH
49490: FOR_TO
49491: IFFALSE 49585
// if array [ i ] [ index ] = value then
49493: LD_VAR 0 1
49497: PUSH
49498: LD_VAR 0 6
49502: ARRAY
49503: PUSH
49504: LD_VAR 0 2
49508: ARRAY
49509: PUSH
49510: LD_VAR 0 3
49514: EQUAL
49515: IFFALSE 49583
// begin if indexColumn then
49517: LD_VAR 0 4
49521: IFFALSE 49557
// result := Join ( result , array [ i ] [ indexColumn ] ) else
49523: LD_ADDR_VAR 0 5
49527: PUSH
49528: LD_VAR 0 5
49532: PPUSH
49533: LD_VAR 0 1
49537: PUSH
49538: LD_VAR 0 6
49542: ARRAY
49543: PUSH
49544: LD_VAR 0 4
49548: ARRAY
49549: PPUSH
49550: CALL 44595 0 2
49554: ST_TO_ADDR
49555: GO 49583
// result := Join ( result , array [ i ] ) ;
49557: LD_ADDR_VAR 0 5
49561: PUSH
49562: LD_VAR 0 5
49566: PPUSH
49567: LD_VAR 0 1
49571: PUSH
49572: LD_VAR 0 6
49576: ARRAY
49577: PPUSH
49578: CALL 44595 0 2
49582: ST_TO_ADDR
// end ;
49583: GO 49490
49585: POP
49586: POP
// end ;
49587: LD_VAR 0 5
49591: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
49592: LD_INT 0
49594: PPUSH
// if not vehicles or not parkingPoint then
49595: LD_VAR 0 1
49599: NOT
49600: IFTRUE 49609
49602: PUSH
49603: LD_VAR 0 2
49607: NOT
49608: OR
49609: IFFALSE 49613
// exit ;
49611: GO 49711
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
49613: LD_ADDR_VAR 0 1
49617: PUSH
49618: LD_VAR 0 1
49622: PPUSH
49623: LD_INT 50
49625: PUSH
49626: EMPTY
49627: LIST
49628: PUSH
49629: LD_INT 3
49631: PUSH
49632: LD_INT 92
49634: PUSH
49635: LD_VAR 0 2
49639: PUSH
49640: LD_INT 1
49642: ARRAY
49643: PUSH
49644: LD_VAR 0 2
49648: PUSH
49649: LD_INT 2
49651: ARRAY
49652: PUSH
49653: LD_INT 8
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PPUSH
49670: CALL_OW 72
49674: ST_TO_ADDR
// if not vehicles then
49675: LD_VAR 0 1
49679: NOT
49680: IFFALSE 49684
// exit ;
49682: GO 49711
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
49684: LD_VAR 0 1
49688: PPUSH
49689: LD_VAR 0 2
49693: PUSH
49694: LD_INT 1
49696: ARRAY
49697: PPUSH
49698: LD_VAR 0 2
49702: PUSH
49703: LD_INT 2
49705: ARRAY
49706: PPUSH
49707: CALL_OW 111
// end ;
49711: LD_VAR 0 3
49715: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
49716: LD_INT 0
49718: PPUSH
49719: PPUSH
49720: PPUSH
// if not side or not area then
49721: LD_VAR 0 1
49725: NOT
49726: IFTRUE 49735
49728: PUSH
49729: LD_VAR 0 2
49733: NOT
49734: OR
49735: IFFALSE 49739
// exit ;
49737: GO 49858
// tmp := AreaToList ( area , 0 ) ;
49739: LD_ADDR_VAR 0 5
49743: PUSH
49744: LD_VAR 0 2
49748: PPUSH
49749: LD_INT 0
49751: PPUSH
49752: CALL_OW 517
49756: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
49757: LD_ADDR_VAR 0 4
49761: PUSH
49762: DOUBLE
49763: LD_INT 1
49765: DEC
49766: ST_TO_ADDR
49767: LD_VAR 0 5
49771: PUSH
49772: LD_INT 1
49774: ARRAY
49775: PUSH
49776: FOR_TO
49777: IFFALSE 49856
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
49779: LD_VAR 0 5
49783: PUSH
49784: LD_INT 1
49786: ARRAY
49787: PUSH
49788: LD_VAR 0 4
49792: ARRAY
49793: PPUSH
49794: LD_VAR 0 5
49798: PUSH
49799: LD_INT 2
49801: ARRAY
49802: PUSH
49803: LD_VAR 0 4
49807: ARRAY
49808: PPUSH
49809: CALL_OW 351
49813: IFFALSE 49854
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
49815: LD_VAR 0 5
49819: PUSH
49820: LD_INT 1
49822: ARRAY
49823: PUSH
49824: LD_VAR 0 4
49828: ARRAY
49829: PPUSH
49830: LD_VAR 0 5
49834: PUSH
49835: LD_INT 2
49837: ARRAY
49838: PUSH
49839: LD_VAR 0 4
49843: ARRAY
49844: PPUSH
49845: LD_VAR 0 1
49849: PPUSH
49850: CALL_OW 244
// end ;
49854: GO 49776
49856: POP
49857: POP
// end ;
49858: LD_VAR 0 3
49862: RET
// export function UniqueArray ( array ) ; var i ; begin
49863: LD_INT 0
49865: PPUSH
49866: PPUSH
// result := [ ] ;
49867: LD_ADDR_VAR 0 2
49871: PUSH
49872: EMPTY
49873: ST_TO_ADDR
// if not array then
49874: LD_VAR 0 1
49878: NOT
49879: IFFALSE 49883
// exit ;
49881: GO 49944
// for i := 1 to array do
49883: LD_ADDR_VAR 0 3
49887: PUSH
49888: DOUBLE
49889: LD_INT 1
49891: DEC
49892: ST_TO_ADDR
49893: LD_VAR 0 1
49897: PUSH
49898: FOR_TO
49899: IFFALSE 49942
// if not array [ i ] in result then
49901: LD_VAR 0 1
49905: PUSH
49906: LD_VAR 0 3
49910: ARRAY
49911: PUSH
49912: LD_VAR 0 2
49916: IN
49917: NOT
49918: IFFALSE 49940
// result := Join ( result , i ) ;
49920: LD_ADDR_VAR 0 2
49924: PUSH
49925: LD_VAR 0 2
49929: PPUSH
49930: LD_VAR 0 3
49934: PPUSH
49935: CALL 44595 0 2
49939: ST_TO_ADDR
49940: GO 49898
49942: POP
49943: POP
// end ; end_of_file end_of_file
49944: LD_VAR 0 2
49948: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
49949: LD_VAR 0 1
49953: PPUSH
49954: LD_VAR 0 2
49958: PPUSH
49959: LD_VAR 0 3
49963: PPUSH
49964: LD_VAR 0 4
49968: PPUSH
49969: LD_VAR 0 5
49973: PPUSH
49974: LD_VAR 0 6
49978: PPUSH
49979: CALL 50214 0 6
// end ;
49983: PPOPN 6
49985: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
49986: LD_INT 0
49988: PPUSH
// begin if not units then
49989: LD_VAR 0 1
49993: NOT
49994: IFFALSE 49998
// exit ;
49996: GO 50032
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
49998: LD_VAR 0 1
50002: PPUSH
50003: LD_VAR 0 2
50007: PPUSH
50008: LD_VAR 0 3
50012: PPUSH
50013: LD_VAR 0 4
50017: PPUSH
50018: LD_VAR 0 5
50022: PPUSH
50023: LD_VAR 0 6
50027: PPUSH
50028: CALL 72460 0 6
// end ;
50032: PPOPN 7
50034: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
50035: CALL 50101 0 0
// end ; end_of_file
50039: PPOPN 1
50041: END
// export globalGameSaveCounter ; every 0 0$1 do
50042: GO 50044
50044: DISABLE
// begin enable ;
50045: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50046: LD_STRING updateTimer(
50048: PUSH
50049: LD_OWVAR 1
50053: STR
50054: PUSH
50055: LD_STRING );
50057: STR
50058: PPUSH
50059: CALL_OW 559
// end ;
50063: END
// every 0 0$1 do
50064: GO 50066
50066: DISABLE
// begin globalGameSaveCounter := 0 ;
50067: LD_ADDR_EXP 29
50071: PUSH
50072: LD_INT 0
50074: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50075: LD_STRING setGameSaveCounter(0)
50077: PPUSH
50078: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50082: LD_STRING initStreamRollete();
50084: PPUSH
50085: CALL_OW 559
// InitStreamMode ;
50089: CALL 51434 0 0
// DefineStreamItems ( false ) ;
50093: LD_INT 0
50095: PPUSH
50096: CALL 51898 0 1
// end ;
50100: END
// export function SOS_MapStart ( ) ; begin
50101: LD_INT 0
50103: PPUSH
// if streamModeActive then
50104: LD_EXP 30
50108: IFFALSE 50117
// DefineStreamItems ( true ) ;
50110: LD_INT 1
50112: PPUSH
50113: CALL 51898 0 1
// UpdateLuaVariables ( ) ;
50117: CALL 50134 0 0
// UpdateFactoryWaypoints ( ) ;
50121: CALL 65020 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50125: CALL 65272 0 0
// end ;
50129: LD_VAR 0 1
50133: RET
// function UpdateLuaVariables ( ) ; begin
50134: LD_INT 0
50136: PPUSH
// if globalGameSaveCounter then
50137: LD_EXP 29
50141: IFFALSE 50175
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50143: LD_ADDR_EXP 29
50147: PUSH
50148: LD_EXP 29
50152: PPUSH
50153: CALL 45968 0 1
50157: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50158: LD_STRING setGameSaveCounter(
50160: PUSH
50161: LD_EXP 29
50165: STR
50166: PUSH
50167: LD_STRING )
50169: STR
50170: PPUSH
50171: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50175: LD_STRING setGameDifficulty(
50177: PUSH
50178: LD_OWVAR 67
50182: STR
50183: PUSH
50184: LD_STRING )
50186: STR
50187: PPUSH
50188: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
50192: LD_STRING displayDifficulty(
50194: PUSH
50195: LD_OWVAR 67
50199: STR
50200: PUSH
50201: LD_STRING )
50203: STR
50204: PPUSH
50205: CALL_OW 559
// end ;
50209: LD_VAR 0 1
50213: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50214: LD_INT 0
50216: PPUSH
// if p2 = stream_mode then
50217: LD_VAR 0 2
50221: PUSH
50222: LD_INT 100
50224: EQUAL
50225: IFFALSE 51228
// begin if not StreamModeActive then
50227: LD_EXP 30
50231: NOT
50232: IFFALSE 50242
// StreamModeActive := true ;
50234: LD_ADDR_EXP 30
50238: PUSH
50239: LD_INT 1
50241: ST_TO_ADDR
// if p3 = 0 then
50242: LD_VAR 0 3
50246: PUSH
50247: LD_INT 0
50249: EQUAL
50250: IFFALSE 50256
// InitStreamMode ;
50252: CALL 51434 0 0
// if p3 = 1 then
50256: LD_VAR 0 3
50260: PUSH
50261: LD_INT 1
50263: EQUAL
50264: IFFALSE 50274
// sRocket := true ;
50266: LD_ADDR_EXP 35
50270: PUSH
50271: LD_INT 1
50273: ST_TO_ADDR
// if p3 = 2 then
50274: LD_VAR 0 3
50278: PUSH
50279: LD_INT 2
50281: EQUAL
50282: IFFALSE 50292
// sSpeed := true ;
50284: LD_ADDR_EXP 34
50288: PUSH
50289: LD_INT 1
50291: ST_TO_ADDR
// if p3 = 3 then
50292: LD_VAR 0 3
50296: PUSH
50297: LD_INT 3
50299: EQUAL
50300: IFFALSE 50310
// sEngine := true ;
50302: LD_ADDR_EXP 36
50306: PUSH
50307: LD_INT 1
50309: ST_TO_ADDR
// if p3 = 4 then
50310: LD_VAR 0 3
50314: PUSH
50315: LD_INT 4
50317: EQUAL
50318: IFFALSE 50328
// sSpec := true ;
50320: LD_ADDR_EXP 33
50324: PUSH
50325: LD_INT 1
50327: ST_TO_ADDR
// if p3 = 5 then
50328: LD_VAR 0 3
50332: PUSH
50333: LD_INT 5
50335: EQUAL
50336: IFFALSE 50346
// sLevel := true ;
50338: LD_ADDR_EXP 37
50342: PUSH
50343: LD_INT 1
50345: ST_TO_ADDR
// if p3 = 6 then
50346: LD_VAR 0 3
50350: PUSH
50351: LD_INT 6
50353: EQUAL
50354: IFFALSE 50364
// sArmoury := true ;
50356: LD_ADDR_EXP 38
50360: PUSH
50361: LD_INT 1
50363: ST_TO_ADDR
// if p3 = 7 then
50364: LD_VAR 0 3
50368: PUSH
50369: LD_INT 7
50371: EQUAL
50372: IFFALSE 50382
// sRadar := true ;
50374: LD_ADDR_EXP 39
50378: PUSH
50379: LD_INT 1
50381: ST_TO_ADDR
// if p3 = 8 then
50382: LD_VAR 0 3
50386: PUSH
50387: LD_INT 8
50389: EQUAL
50390: IFFALSE 50400
// sBunker := true ;
50392: LD_ADDR_EXP 40
50396: PUSH
50397: LD_INT 1
50399: ST_TO_ADDR
// if p3 = 9 then
50400: LD_VAR 0 3
50404: PUSH
50405: LD_INT 9
50407: EQUAL
50408: IFFALSE 50418
// sHack := true ;
50410: LD_ADDR_EXP 41
50414: PUSH
50415: LD_INT 1
50417: ST_TO_ADDR
// if p3 = 10 then
50418: LD_VAR 0 3
50422: PUSH
50423: LD_INT 10
50425: EQUAL
50426: IFFALSE 50436
// sFire := true ;
50428: LD_ADDR_EXP 42
50432: PUSH
50433: LD_INT 1
50435: ST_TO_ADDR
// if p3 = 11 then
50436: LD_VAR 0 3
50440: PUSH
50441: LD_INT 11
50443: EQUAL
50444: IFFALSE 50454
// sRefresh := true ;
50446: LD_ADDR_EXP 43
50450: PUSH
50451: LD_INT 1
50453: ST_TO_ADDR
// if p3 = 12 then
50454: LD_VAR 0 3
50458: PUSH
50459: LD_INT 12
50461: EQUAL
50462: IFFALSE 50472
// sExp := true ;
50464: LD_ADDR_EXP 44
50468: PUSH
50469: LD_INT 1
50471: ST_TO_ADDR
// if p3 = 13 then
50472: LD_VAR 0 3
50476: PUSH
50477: LD_INT 13
50479: EQUAL
50480: IFFALSE 50490
// sDepot := true ;
50482: LD_ADDR_EXP 45
50486: PUSH
50487: LD_INT 1
50489: ST_TO_ADDR
// if p3 = 14 then
50490: LD_VAR 0 3
50494: PUSH
50495: LD_INT 14
50497: EQUAL
50498: IFFALSE 50508
// sFlag := true ;
50500: LD_ADDR_EXP 46
50504: PUSH
50505: LD_INT 1
50507: ST_TO_ADDR
// if p3 = 15 then
50508: LD_VAR 0 3
50512: PUSH
50513: LD_INT 15
50515: EQUAL
50516: IFFALSE 50526
// sKamikadze := true ;
50518: LD_ADDR_EXP 54
50522: PUSH
50523: LD_INT 1
50525: ST_TO_ADDR
// if p3 = 16 then
50526: LD_VAR 0 3
50530: PUSH
50531: LD_INT 16
50533: EQUAL
50534: IFFALSE 50544
// sTroll := true ;
50536: LD_ADDR_EXP 55
50540: PUSH
50541: LD_INT 1
50543: ST_TO_ADDR
// if p3 = 17 then
50544: LD_VAR 0 3
50548: PUSH
50549: LD_INT 17
50551: EQUAL
50552: IFFALSE 50562
// sSlow := true ;
50554: LD_ADDR_EXP 56
50558: PUSH
50559: LD_INT 1
50561: ST_TO_ADDR
// if p3 = 18 then
50562: LD_VAR 0 3
50566: PUSH
50567: LD_INT 18
50569: EQUAL
50570: IFFALSE 50580
// sLack := true ;
50572: LD_ADDR_EXP 57
50576: PUSH
50577: LD_INT 1
50579: ST_TO_ADDR
// if p3 = 19 then
50580: LD_VAR 0 3
50584: PUSH
50585: LD_INT 19
50587: EQUAL
50588: IFFALSE 50598
// sTank := true ;
50590: LD_ADDR_EXP 59
50594: PUSH
50595: LD_INT 1
50597: ST_TO_ADDR
// if p3 = 20 then
50598: LD_VAR 0 3
50602: PUSH
50603: LD_INT 20
50605: EQUAL
50606: IFFALSE 50616
// sRemote := true ;
50608: LD_ADDR_EXP 60
50612: PUSH
50613: LD_INT 1
50615: ST_TO_ADDR
// if p3 = 21 then
50616: LD_VAR 0 3
50620: PUSH
50621: LD_INT 21
50623: EQUAL
50624: IFFALSE 50634
// sPowell := true ;
50626: LD_ADDR_EXP 61
50630: PUSH
50631: LD_INT 1
50633: ST_TO_ADDR
// if p3 = 22 then
50634: LD_VAR 0 3
50638: PUSH
50639: LD_INT 22
50641: EQUAL
50642: IFFALSE 50652
// sTeleport := true ;
50644: LD_ADDR_EXP 64
50648: PUSH
50649: LD_INT 1
50651: ST_TO_ADDR
// if p3 = 23 then
50652: LD_VAR 0 3
50656: PUSH
50657: LD_INT 23
50659: EQUAL
50660: IFFALSE 50670
// sOilTower := true ;
50662: LD_ADDR_EXP 66
50666: PUSH
50667: LD_INT 1
50669: ST_TO_ADDR
// if p3 = 24 then
50670: LD_VAR 0 3
50674: PUSH
50675: LD_INT 24
50677: EQUAL
50678: IFFALSE 50688
// sShovel := true ;
50680: LD_ADDR_EXP 67
50684: PUSH
50685: LD_INT 1
50687: ST_TO_ADDR
// if p3 = 25 then
50688: LD_VAR 0 3
50692: PUSH
50693: LD_INT 25
50695: EQUAL
50696: IFFALSE 50706
// sSheik := true ;
50698: LD_ADDR_EXP 68
50702: PUSH
50703: LD_INT 1
50705: ST_TO_ADDR
// if p3 = 26 then
50706: LD_VAR 0 3
50710: PUSH
50711: LD_INT 26
50713: EQUAL
50714: IFFALSE 50724
// sEarthquake := true ;
50716: LD_ADDR_EXP 70
50720: PUSH
50721: LD_INT 1
50723: ST_TO_ADDR
// if p3 = 27 then
50724: LD_VAR 0 3
50728: PUSH
50729: LD_INT 27
50731: EQUAL
50732: IFFALSE 50742
// sAI := true ;
50734: LD_ADDR_EXP 71
50738: PUSH
50739: LD_INT 1
50741: ST_TO_ADDR
// if p3 = 28 then
50742: LD_VAR 0 3
50746: PUSH
50747: LD_INT 28
50749: EQUAL
50750: IFFALSE 50760
// sCargo := true ;
50752: LD_ADDR_EXP 74
50756: PUSH
50757: LD_INT 1
50759: ST_TO_ADDR
// if p3 = 29 then
50760: LD_VAR 0 3
50764: PUSH
50765: LD_INT 29
50767: EQUAL
50768: IFFALSE 50778
// sDLaser := true ;
50770: LD_ADDR_EXP 75
50774: PUSH
50775: LD_INT 1
50777: ST_TO_ADDR
// if p3 = 30 then
50778: LD_VAR 0 3
50782: PUSH
50783: LD_INT 30
50785: EQUAL
50786: IFFALSE 50796
// sExchange := true ;
50788: LD_ADDR_EXP 76
50792: PUSH
50793: LD_INT 1
50795: ST_TO_ADDR
// if p3 = 31 then
50796: LD_VAR 0 3
50800: PUSH
50801: LD_INT 31
50803: EQUAL
50804: IFFALSE 50814
// sFac := true ;
50806: LD_ADDR_EXP 77
50810: PUSH
50811: LD_INT 1
50813: ST_TO_ADDR
// if p3 = 32 then
50814: LD_VAR 0 3
50818: PUSH
50819: LD_INT 32
50821: EQUAL
50822: IFFALSE 50832
// sPower := true ;
50824: LD_ADDR_EXP 78
50828: PUSH
50829: LD_INT 1
50831: ST_TO_ADDR
// if p3 = 33 then
50832: LD_VAR 0 3
50836: PUSH
50837: LD_INT 33
50839: EQUAL
50840: IFFALSE 50850
// sRandom := true ;
50842: LD_ADDR_EXP 79
50846: PUSH
50847: LD_INT 1
50849: ST_TO_ADDR
// if p3 = 34 then
50850: LD_VAR 0 3
50854: PUSH
50855: LD_INT 34
50857: EQUAL
50858: IFFALSE 50868
// sShield := true ;
50860: LD_ADDR_EXP 80
50864: PUSH
50865: LD_INT 1
50867: ST_TO_ADDR
// if p3 = 35 then
50868: LD_VAR 0 3
50872: PUSH
50873: LD_INT 35
50875: EQUAL
50876: IFFALSE 50886
// sTime := true ;
50878: LD_ADDR_EXP 81
50882: PUSH
50883: LD_INT 1
50885: ST_TO_ADDR
// if p3 = 36 then
50886: LD_VAR 0 3
50890: PUSH
50891: LD_INT 36
50893: EQUAL
50894: IFFALSE 50904
// sTools := true ;
50896: LD_ADDR_EXP 82
50900: PUSH
50901: LD_INT 1
50903: ST_TO_ADDR
// if p3 = 101 then
50904: LD_VAR 0 3
50908: PUSH
50909: LD_INT 101
50911: EQUAL
50912: IFFALSE 50922
// sSold := true ;
50914: LD_ADDR_EXP 47
50918: PUSH
50919: LD_INT 1
50921: ST_TO_ADDR
// if p3 = 102 then
50922: LD_VAR 0 3
50926: PUSH
50927: LD_INT 102
50929: EQUAL
50930: IFFALSE 50940
// sDiff := true ;
50932: LD_ADDR_EXP 48
50936: PUSH
50937: LD_INT 1
50939: ST_TO_ADDR
// if p3 = 103 then
50940: LD_VAR 0 3
50944: PUSH
50945: LD_INT 103
50947: EQUAL
50948: IFFALSE 50958
// sFog := true ;
50950: LD_ADDR_EXP 51
50954: PUSH
50955: LD_INT 1
50957: ST_TO_ADDR
// if p3 = 104 then
50958: LD_VAR 0 3
50962: PUSH
50963: LD_INT 104
50965: EQUAL
50966: IFFALSE 50976
// sReset := true ;
50968: LD_ADDR_EXP 52
50972: PUSH
50973: LD_INT 1
50975: ST_TO_ADDR
// if p3 = 105 then
50976: LD_VAR 0 3
50980: PUSH
50981: LD_INT 105
50983: EQUAL
50984: IFFALSE 50994
// sSun := true ;
50986: LD_ADDR_EXP 53
50990: PUSH
50991: LD_INT 1
50993: ST_TO_ADDR
// if p3 = 106 then
50994: LD_VAR 0 3
50998: PUSH
50999: LD_INT 106
51001: EQUAL
51002: IFFALSE 51012
// sTiger := true ;
51004: LD_ADDR_EXP 49
51008: PUSH
51009: LD_INT 1
51011: ST_TO_ADDR
// if p3 = 107 then
51012: LD_VAR 0 3
51016: PUSH
51017: LD_INT 107
51019: EQUAL
51020: IFFALSE 51030
// sBomb := true ;
51022: LD_ADDR_EXP 50
51026: PUSH
51027: LD_INT 1
51029: ST_TO_ADDR
// if p3 = 108 then
51030: LD_VAR 0 3
51034: PUSH
51035: LD_INT 108
51037: EQUAL
51038: IFFALSE 51048
// sWound := true ;
51040: LD_ADDR_EXP 58
51044: PUSH
51045: LD_INT 1
51047: ST_TO_ADDR
// if p3 = 109 then
51048: LD_VAR 0 3
51052: PUSH
51053: LD_INT 109
51055: EQUAL
51056: IFFALSE 51066
// sBetray := true ;
51058: LD_ADDR_EXP 62
51062: PUSH
51063: LD_INT 1
51065: ST_TO_ADDR
// if p3 = 110 then
51066: LD_VAR 0 3
51070: PUSH
51071: LD_INT 110
51073: EQUAL
51074: IFFALSE 51084
// sContamin := true ;
51076: LD_ADDR_EXP 63
51080: PUSH
51081: LD_INT 1
51083: ST_TO_ADDR
// if p3 = 111 then
51084: LD_VAR 0 3
51088: PUSH
51089: LD_INT 111
51091: EQUAL
51092: IFFALSE 51102
// sOil := true ;
51094: LD_ADDR_EXP 65
51098: PUSH
51099: LD_INT 1
51101: ST_TO_ADDR
// if p3 = 112 then
51102: LD_VAR 0 3
51106: PUSH
51107: LD_INT 112
51109: EQUAL
51110: IFFALSE 51120
// sStu := true ;
51112: LD_ADDR_EXP 69
51116: PUSH
51117: LD_INT 1
51119: ST_TO_ADDR
// if p3 = 113 then
51120: LD_VAR 0 3
51124: PUSH
51125: LD_INT 113
51127: EQUAL
51128: IFFALSE 51138
// sBazooka := true ;
51130: LD_ADDR_EXP 72
51134: PUSH
51135: LD_INT 1
51137: ST_TO_ADDR
// if p3 = 114 then
51138: LD_VAR 0 3
51142: PUSH
51143: LD_INT 114
51145: EQUAL
51146: IFFALSE 51156
// sMortar := true ;
51148: LD_ADDR_EXP 73
51152: PUSH
51153: LD_INT 1
51155: ST_TO_ADDR
// if p3 = 115 then
51156: LD_VAR 0 3
51160: PUSH
51161: LD_INT 115
51163: EQUAL
51164: IFFALSE 51174
// sRanger := true ;
51166: LD_ADDR_EXP 83
51170: PUSH
51171: LD_INT 1
51173: ST_TO_ADDR
// if p3 = 116 then
51174: LD_VAR 0 3
51178: PUSH
51179: LD_INT 116
51181: EQUAL
51182: IFFALSE 51192
// sComputer := true ;
51184: LD_ADDR_EXP 84
51188: PUSH
51189: LD_INT 1
51191: ST_TO_ADDR
// if p3 = 117 then
51192: LD_VAR 0 3
51196: PUSH
51197: LD_INT 117
51199: EQUAL
51200: IFFALSE 51210
// s30 := true ;
51202: LD_ADDR_EXP 85
51206: PUSH
51207: LD_INT 1
51209: ST_TO_ADDR
// if p3 = 118 then
51210: LD_VAR 0 3
51214: PUSH
51215: LD_INT 118
51217: EQUAL
51218: IFFALSE 51228
// s60 := true ;
51220: LD_ADDR_EXP 86
51224: PUSH
51225: LD_INT 1
51227: ST_TO_ADDR
// end ; if p2 = hack_mode then
51228: LD_VAR 0 2
51232: PUSH
51233: LD_INT 101
51235: EQUAL
51236: IFFALSE 51364
// begin case p3 of 1 :
51238: LD_VAR 0 3
51242: PUSH
51243: LD_INT 1
51245: DOUBLE
51246: EQUAL
51247: IFTRUE 51251
51249: GO 51258
51251: POP
// hHackUnlimitedResources ; 2 :
51252: CALL 63627 0 0
51256: GO 51364
51258: LD_INT 2
51260: DOUBLE
51261: EQUAL
51262: IFTRUE 51266
51264: GO 51273
51266: POP
// hHackSetLevel10 ; 3 :
51267: CALL 63760 0 0
51271: GO 51364
51273: LD_INT 3
51275: DOUBLE
51276: EQUAL
51277: IFTRUE 51281
51279: GO 51288
51281: POP
// hHackSetLevel10YourUnits ; 4 :
51282: CALL 63845 0 0
51286: GO 51364
51288: LD_INT 4
51290: DOUBLE
51291: EQUAL
51292: IFTRUE 51296
51294: GO 51303
51296: POP
// hHackInvincible ; 5 :
51297: CALL 64293 0 0
51301: GO 51364
51303: LD_INT 5
51305: DOUBLE
51306: EQUAL
51307: IFTRUE 51311
51309: GO 51318
51311: POP
// hHackInvisible ; 6 :
51312: CALL 64404 0 0
51316: GO 51364
51318: LD_INT 6
51320: DOUBLE
51321: EQUAL
51322: IFTRUE 51326
51324: GO 51333
51326: POP
// hHackChangeYourSide ; 7 :
51327: CALL 64461 0 0
51331: GO 51364
51333: LD_INT 7
51335: DOUBLE
51336: EQUAL
51337: IFTRUE 51341
51339: GO 51348
51341: POP
// hHackChangeUnitSide ; 8 :
51342: CALL 64503 0 0
51346: GO 51364
51348: LD_INT 8
51350: DOUBLE
51351: EQUAL
51352: IFTRUE 51356
51354: GO 51363
51356: POP
// hHackFog ; end ;
51357: CALL 64604 0 0
51361: GO 51364
51363: POP
// end ; if p2 = game_save_mode then
51364: LD_VAR 0 2
51368: PUSH
51369: LD_INT 102
51371: EQUAL
51372: IFFALSE 51429
// begin if p3 = 1 then
51374: LD_VAR 0 3
51378: PUSH
51379: LD_INT 1
51381: EQUAL
51382: IFFALSE 51394
// globalGameSaveCounter := p4 ;
51384: LD_ADDR_EXP 29
51388: PUSH
51389: LD_VAR 0 4
51393: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51394: LD_VAR 0 3
51398: PUSH
51399: LD_INT 2
51401: EQUAL
51402: IFFALSE 51410
51404: PUSH
51405: LD_EXP 29
51409: AND
51410: IFFALSE 51429
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51412: LD_STRING setGameSaveCounter(
51414: PUSH
51415: LD_EXP 29
51419: STR
51420: PUSH
51421: LD_STRING )
51423: STR
51424: PPUSH
51425: CALL_OW 559
// end ; end ;
51429: LD_VAR 0 7
51433: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51434: LD_INT 0
51436: PPUSH
// streamModeActive := false ;
51437: LD_ADDR_EXP 30
51441: PUSH
51442: LD_INT 0
51444: ST_TO_ADDR
// normalCounter := 36 ;
51445: LD_ADDR_EXP 31
51449: PUSH
51450: LD_INT 36
51452: ST_TO_ADDR
// hardcoreCounter := 18 ;
51453: LD_ADDR_EXP 32
51457: PUSH
51458: LD_INT 18
51460: ST_TO_ADDR
// sRocket := false ;
51461: LD_ADDR_EXP 35
51465: PUSH
51466: LD_INT 0
51468: ST_TO_ADDR
// sSpeed := false ;
51469: LD_ADDR_EXP 34
51473: PUSH
51474: LD_INT 0
51476: ST_TO_ADDR
// sEngine := false ;
51477: LD_ADDR_EXP 36
51481: PUSH
51482: LD_INT 0
51484: ST_TO_ADDR
// sSpec := false ;
51485: LD_ADDR_EXP 33
51489: PUSH
51490: LD_INT 0
51492: ST_TO_ADDR
// sLevel := false ;
51493: LD_ADDR_EXP 37
51497: PUSH
51498: LD_INT 0
51500: ST_TO_ADDR
// sArmoury := false ;
51501: LD_ADDR_EXP 38
51505: PUSH
51506: LD_INT 0
51508: ST_TO_ADDR
// sRadar := false ;
51509: LD_ADDR_EXP 39
51513: PUSH
51514: LD_INT 0
51516: ST_TO_ADDR
// sBunker := false ;
51517: LD_ADDR_EXP 40
51521: PUSH
51522: LD_INT 0
51524: ST_TO_ADDR
// sHack := false ;
51525: LD_ADDR_EXP 41
51529: PUSH
51530: LD_INT 0
51532: ST_TO_ADDR
// sFire := false ;
51533: LD_ADDR_EXP 42
51537: PUSH
51538: LD_INT 0
51540: ST_TO_ADDR
// sRefresh := false ;
51541: LD_ADDR_EXP 43
51545: PUSH
51546: LD_INT 0
51548: ST_TO_ADDR
// sExp := false ;
51549: LD_ADDR_EXP 44
51553: PUSH
51554: LD_INT 0
51556: ST_TO_ADDR
// sDepot := false ;
51557: LD_ADDR_EXP 45
51561: PUSH
51562: LD_INT 0
51564: ST_TO_ADDR
// sFlag := false ;
51565: LD_ADDR_EXP 46
51569: PUSH
51570: LD_INT 0
51572: ST_TO_ADDR
// sKamikadze := false ;
51573: LD_ADDR_EXP 54
51577: PUSH
51578: LD_INT 0
51580: ST_TO_ADDR
// sTroll := false ;
51581: LD_ADDR_EXP 55
51585: PUSH
51586: LD_INT 0
51588: ST_TO_ADDR
// sSlow := false ;
51589: LD_ADDR_EXP 56
51593: PUSH
51594: LD_INT 0
51596: ST_TO_ADDR
// sLack := false ;
51597: LD_ADDR_EXP 57
51601: PUSH
51602: LD_INT 0
51604: ST_TO_ADDR
// sTank := false ;
51605: LD_ADDR_EXP 59
51609: PUSH
51610: LD_INT 0
51612: ST_TO_ADDR
// sRemote := false ;
51613: LD_ADDR_EXP 60
51617: PUSH
51618: LD_INT 0
51620: ST_TO_ADDR
// sPowell := false ;
51621: LD_ADDR_EXP 61
51625: PUSH
51626: LD_INT 0
51628: ST_TO_ADDR
// sTeleport := false ;
51629: LD_ADDR_EXP 64
51633: PUSH
51634: LD_INT 0
51636: ST_TO_ADDR
// sOilTower := false ;
51637: LD_ADDR_EXP 66
51641: PUSH
51642: LD_INT 0
51644: ST_TO_ADDR
// sShovel := false ;
51645: LD_ADDR_EXP 67
51649: PUSH
51650: LD_INT 0
51652: ST_TO_ADDR
// sSheik := false ;
51653: LD_ADDR_EXP 68
51657: PUSH
51658: LD_INT 0
51660: ST_TO_ADDR
// sEarthquake := false ;
51661: LD_ADDR_EXP 70
51665: PUSH
51666: LD_INT 0
51668: ST_TO_ADDR
// sAI := false ;
51669: LD_ADDR_EXP 71
51673: PUSH
51674: LD_INT 0
51676: ST_TO_ADDR
// sCargo := false ;
51677: LD_ADDR_EXP 74
51681: PUSH
51682: LD_INT 0
51684: ST_TO_ADDR
// sDLaser := false ;
51685: LD_ADDR_EXP 75
51689: PUSH
51690: LD_INT 0
51692: ST_TO_ADDR
// sExchange := false ;
51693: LD_ADDR_EXP 76
51697: PUSH
51698: LD_INT 0
51700: ST_TO_ADDR
// sFac := false ;
51701: LD_ADDR_EXP 77
51705: PUSH
51706: LD_INT 0
51708: ST_TO_ADDR
// sPower := false ;
51709: LD_ADDR_EXP 78
51713: PUSH
51714: LD_INT 0
51716: ST_TO_ADDR
// sRandom := false ;
51717: LD_ADDR_EXP 79
51721: PUSH
51722: LD_INT 0
51724: ST_TO_ADDR
// sShield := false ;
51725: LD_ADDR_EXP 80
51729: PUSH
51730: LD_INT 0
51732: ST_TO_ADDR
// sTime := false ;
51733: LD_ADDR_EXP 81
51737: PUSH
51738: LD_INT 0
51740: ST_TO_ADDR
// sTools := false ;
51741: LD_ADDR_EXP 82
51745: PUSH
51746: LD_INT 0
51748: ST_TO_ADDR
// sSold := false ;
51749: LD_ADDR_EXP 47
51753: PUSH
51754: LD_INT 0
51756: ST_TO_ADDR
// sDiff := false ;
51757: LD_ADDR_EXP 48
51761: PUSH
51762: LD_INT 0
51764: ST_TO_ADDR
// sFog := false ;
51765: LD_ADDR_EXP 51
51769: PUSH
51770: LD_INT 0
51772: ST_TO_ADDR
// sReset := false ;
51773: LD_ADDR_EXP 52
51777: PUSH
51778: LD_INT 0
51780: ST_TO_ADDR
// sSun := false ;
51781: LD_ADDR_EXP 53
51785: PUSH
51786: LD_INT 0
51788: ST_TO_ADDR
// sTiger := false ;
51789: LD_ADDR_EXP 49
51793: PUSH
51794: LD_INT 0
51796: ST_TO_ADDR
// sBomb := false ;
51797: LD_ADDR_EXP 50
51801: PUSH
51802: LD_INT 0
51804: ST_TO_ADDR
// sWound := false ;
51805: LD_ADDR_EXP 58
51809: PUSH
51810: LD_INT 0
51812: ST_TO_ADDR
// sBetray := false ;
51813: LD_ADDR_EXP 62
51817: PUSH
51818: LD_INT 0
51820: ST_TO_ADDR
// sContamin := false ;
51821: LD_ADDR_EXP 63
51825: PUSH
51826: LD_INT 0
51828: ST_TO_ADDR
// sOil := false ;
51829: LD_ADDR_EXP 65
51833: PUSH
51834: LD_INT 0
51836: ST_TO_ADDR
// sStu := false ;
51837: LD_ADDR_EXP 69
51841: PUSH
51842: LD_INT 0
51844: ST_TO_ADDR
// sBazooka := false ;
51845: LD_ADDR_EXP 72
51849: PUSH
51850: LD_INT 0
51852: ST_TO_ADDR
// sMortar := false ;
51853: LD_ADDR_EXP 73
51857: PUSH
51858: LD_INT 0
51860: ST_TO_ADDR
// sRanger := false ;
51861: LD_ADDR_EXP 83
51865: PUSH
51866: LD_INT 0
51868: ST_TO_ADDR
// sComputer := false ;
51869: LD_ADDR_EXP 84
51873: PUSH
51874: LD_INT 0
51876: ST_TO_ADDR
// s30 := false ;
51877: LD_ADDR_EXP 85
51881: PUSH
51882: LD_INT 0
51884: ST_TO_ADDR
// s60 := false ;
51885: LD_ADDR_EXP 86
51889: PUSH
51890: LD_INT 0
51892: ST_TO_ADDR
// end ;
51893: LD_VAR 0 1
51897: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51898: LD_INT 0
51900: PPUSH
51901: PPUSH
51902: PPUSH
51903: PPUSH
51904: PPUSH
51905: PPUSH
51906: PPUSH
// result := [ ] ;
51907: LD_ADDR_VAR 0 2
51911: PUSH
51912: EMPTY
51913: ST_TO_ADDR
// if campaign_id = 1 then
51914: LD_OWVAR 69
51918: PUSH
51919: LD_INT 1
51921: EQUAL
51922: IFFALSE 55088
// begin case mission_number of 1 :
51924: LD_OWVAR 70
51928: PUSH
51929: LD_INT 1
51931: DOUBLE
51932: EQUAL
51933: IFTRUE 51937
51935: GO 52013
51937: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51938: LD_ADDR_VAR 0 2
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: LD_INT 11
51951: PUSH
51952: LD_INT 12
51954: PUSH
51955: LD_INT 15
51957: PUSH
51958: LD_INT 16
51960: PUSH
51961: LD_INT 22
51963: PUSH
51964: LD_INT 23
51966: PUSH
51967: LD_INT 26
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 101
51983: PUSH
51984: LD_INT 102
51986: PUSH
51987: LD_INT 106
51989: PUSH
51990: LD_INT 116
51992: PUSH
51993: LD_INT 117
51995: PUSH
51996: LD_INT 118
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: ST_TO_ADDR
52011: GO 55086
52013: LD_INT 2
52015: DOUBLE
52016: EQUAL
52017: IFTRUE 52021
52019: GO 52105
52021: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52022: LD_ADDR_VAR 0 2
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: LD_INT 4
52032: PUSH
52033: LD_INT 11
52035: PUSH
52036: LD_INT 12
52038: PUSH
52039: LD_INT 15
52041: PUSH
52042: LD_INT 16
52044: PUSH
52045: LD_INT 22
52047: PUSH
52048: LD_INT 23
52050: PUSH
52051: LD_INT 26
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 101
52067: PUSH
52068: LD_INT 102
52070: PUSH
52071: LD_INT 105
52073: PUSH
52074: LD_INT 106
52076: PUSH
52077: LD_INT 108
52079: PUSH
52080: LD_INT 116
52082: PUSH
52083: LD_INT 117
52085: PUSH
52086: LD_INT 118
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: ST_TO_ADDR
52103: GO 55086
52105: LD_INT 3
52107: DOUBLE
52108: EQUAL
52109: IFTRUE 52113
52111: GO 52201
52113: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52114: LD_ADDR_VAR 0 2
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: LD_INT 5
52127: PUSH
52128: LD_INT 11
52130: PUSH
52131: LD_INT 12
52133: PUSH
52134: LD_INT 15
52136: PUSH
52137: LD_INT 16
52139: PUSH
52140: LD_INT 22
52142: PUSH
52143: LD_INT 26
52145: PUSH
52146: LD_INT 36
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 101
52163: PUSH
52164: LD_INT 102
52166: PUSH
52167: LD_INT 105
52169: PUSH
52170: LD_INT 106
52172: PUSH
52173: LD_INT 108
52175: PUSH
52176: LD_INT 116
52178: PUSH
52179: LD_INT 117
52181: PUSH
52182: LD_INT 118
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: ST_TO_ADDR
52199: GO 55086
52201: LD_INT 4
52203: DOUBLE
52204: EQUAL
52205: IFTRUE 52209
52207: GO 52305
52209: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52210: LD_ADDR_VAR 0 2
52214: PUSH
52215: LD_INT 2
52217: PUSH
52218: LD_INT 4
52220: PUSH
52221: LD_INT 5
52223: PUSH
52224: LD_INT 8
52226: PUSH
52227: LD_INT 11
52229: PUSH
52230: LD_INT 12
52232: PUSH
52233: LD_INT 15
52235: PUSH
52236: LD_INT 16
52238: PUSH
52239: LD_INT 22
52241: PUSH
52242: LD_INT 23
52244: PUSH
52245: LD_INT 26
52247: PUSH
52248: LD_INT 36
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 101
52267: PUSH
52268: LD_INT 102
52270: PUSH
52271: LD_INT 105
52273: PUSH
52274: LD_INT 106
52276: PUSH
52277: LD_INT 108
52279: PUSH
52280: LD_INT 116
52282: PUSH
52283: LD_INT 117
52285: PUSH
52286: LD_INT 118
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: ST_TO_ADDR
52303: GO 55086
52305: LD_INT 5
52307: DOUBLE
52308: EQUAL
52309: IFTRUE 52313
52311: GO 52425
52313: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52314: LD_ADDR_VAR 0 2
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 4
52324: PUSH
52325: LD_INT 5
52327: PUSH
52328: LD_INT 6
52330: PUSH
52331: LD_INT 8
52333: PUSH
52334: LD_INT 11
52336: PUSH
52337: LD_INT 12
52339: PUSH
52340: LD_INT 15
52342: PUSH
52343: LD_INT 16
52345: PUSH
52346: LD_INT 22
52348: PUSH
52349: LD_INT 23
52351: PUSH
52352: LD_INT 25
52354: PUSH
52355: LD_INT 26
52357: PUSH
52358: LD_INT 36
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 101
52379: PUSH
52380: LD_INT 102
52382: PUSH
52383: LD_INT 105
52385: PUSH
52386: LD_INT 106
52388: PUSH
52389: LD_INT 108
52391: PUSH
52392: LD_INT 109
52394: PUSH
52395: LD_INT 112
52397: PUSH
52398: LD_INT 116
52400: PUSH
52401: LD_INT 117
52403: PUSH
52404: LD_INT 118
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: ST_TO_ADDR
52423: GO 55086
52425: LD_INT 6
52427: DOUBLE
52428: EQUAL
52429: IFTRUE 52433
52431: GO 52565
52433: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52434: LD_ADDR_VAR 0 2
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: LD_INT 4
52444: PUSH
52445: LD_INT 5
52447: PUSH
52448: LD_INT 6
52450: PUSH
52451: LD_INT 8
52453: PUSH
52454: LD_INT 11
52456: PUSH
52457: LD_INT 12
52459: PUSH
52460: LD_INT 15
52462: PUSH
52463: LD_INT 16
52465: PUSH
52466: LD_INT 20
52468: PUSH
52469: LD_INT 21
52471: PUSH
52472: LD_INT 22
52474: PUSH
52475: LD_INT 23
52477: PUSH
52478: LD_INT 25
52480: PUSH
52481: LD_INT 26
52483: PUSH
52484: LD_INT 30
52486: PUSH
52487: LD_INT 31
52489: PUSH
52490: LD_INT 32
52492: PUSH
52493: LD_INT 36
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 101
52519: PUSH
52520: LD_INT 102
52522: PUSH
52523: LD_INT 105
52525: PUSH
52526: LD_INT 106
52528: PUSH
52529: LD_INT 108
52531: PUSH
52532: LD_INT 109
52534: PUSH
52535: LD_INT 112
52537: PUSH
52538: LD_INT 116
52540: PUSH
52541: LD_INT 117
52543: PUSH
52544: LD_INT 118
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: ST_TO_ADDR
52563: GO 55086
52565: LD_INT 7
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52573
52571: GO 52685
52573: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52574: LD_ADDR_VAR 0 2
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: LD_INT 4
52584: PUSH
52585: LD_INT 5
52587: PUSH
52588: LD_INT 7
52590: PUSH
52591: LD_INT 11
52593: PUSH
52594: LD_INT 12
52596: PUSH
52597: LD_INT 15
52599: PUSH
52600: LD_INT 16
52602: PUSH
52603: LD_INT 20
52605: PUSH
52606: LD_INT 21
52608: PUSH
52609: LD_INT 22
52611: PUSH
52612: LD_INT 23
52614: PUSH
52615: LD_INT 25
52617: PUSH
52618: LD_INT 26
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 101
52639: PUSH
52640: LD_INT 102
52642: PUSH
52643: LD_INT 103
52645: PUSH
52646: LD_INT 105
52648: PUSH
52649: LD_INT 106
52651: PUSH
52652: LD_INT 108
52654: PUSH
52655: LD_INT 112
52657: PUSH
52658: LD_INT 116
52660: PUSH
52661: LD_INT 117
52663: PUSH
52664: LD_INT 118
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: ST_TO_ADDR
52683: GO 55086
52685: LD_INT 8
52687: DOUBLE
52688: EQUAL
52689: IFTRUE 52693
52691: GO 52833
52693: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52694: LD_ADDR_VAR 0 2
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: LD_INT 4
52704: PUSH
52705: LD_INT 5
52707: PUSH
52708: LD_INT 6
52710: PUSH
52711: LD_INT 7
52713: PUSH
52714: LD_INT 8
52716: PUSH
52717: LD_INT 11
52719: PUSH
52720: LD_INT 12
52722: PUSH
52723: LD_INT 15
52725: PUSH
52726: LD_INT 16
52728: PUSH
52729: LD_INT 20
52731: PUSH
52732: LD_INT 21
52734: PUSH
52735: LD_INT 22
52737: PUSH
52738: LD_INT 23
52740: PUSH
52741: LD_INT 25
52743: PUSH
52744: LD_INT 26
52746: PUSH
52747: LD_INT 30
52749: PUSH
52750: LD_INT 31
52752: PUSH
52753: LD_INT 32
52755: PUSH
52756: LD_INT 36
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 101
52783: PUSH
52784: LD_INT 102
52786: PUSH
52787: LD_INT 103
52789: PUSH
52790: LD_INT 105
52792: PUSH
52793: LD_INT 106
52795: PUSH
52796: LD_INT 108
52798: PUSH
52799: LD_INT 109
52801: PUSH
52802: LD_INT 112
52804: PUSH
52805: LD_INT 116
52807: PUSH
52808: LD_INT 117
52810: PUSH
52811: LD_INT 118
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: ST_TO_ADDR
52831: GO 55086
52833: LD_INT 9
52835: DOUBLE
52836: EQUAL
52837: IFTRUE 52841
52839: GO 52989
52841: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52842: LD_ADDR_VAR 0 2
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: LD_INT 4
52852: PUSH
52853: LD_INT 5
52855: PUSH
52856: LD_INT 6
52858: PUSH
52859: LD_INT 7
52861: PUSH
52862: LD_INT 8
52864: PUSH
52865: LD_INT 11
52867: PUSH
52868: LD_INT 12
52870: PUSH
52871: LD_INT 15
52873: PUSH
52874: LD_INT 16
52876: PUSH
52877: LD_INT 20
52879: PUSH
52880: LD_INT 21
52882: PUSH
52883: LD_INT 22
52885: PUSH
52886: LD_INT 23
52888: PUSH
52889: LD_INT 25
52891: PUSH
52892: LD_INT 26
52894: PUSH
52895: LD_INT 28
52897: PUSH
52898: LD_INT 30
52900: PUSH
52901: LD_INT 31
52903: PUSH
52904: LD_INT 32
52906: PUSH
52907: LD_INT 36
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 101
52935: PUSH
52936: LD_INT 102
52938: PUSH
52939: LD_INT 103
52941: PUSH
52942: LD_INT 105
52944: PUSH
52945: LD_INT 106
52947: PUSH
52948: LD_INT 108
52950: PUSH
52951: LD_INT 109
52953: PUSH
52954: LD_INT 112
52956: PUSH
52957: LD_INT 114
52959: PUSH
52960: LD_INT 116
52962: PUSH
52963: LD_INT 117
52965: PUSH
52966: LD_INT 118
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: ST_TO_ADDR
52987: GO 55086
52989: LD_INT 10
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 52997
52995: GO 53193
52997: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52998: LD_ADDR_VAR 0 2
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 4
53008: PUSH
53009: LD_INT 5
53011: PUSH
53012: LD_INT 6
53014: PUSH
53015: LD_INT 7
53017: PUSH
53018: LD_INT 8
53020: PUSH
53021: LD_INT 9
53023: PUSH
53024: LD_INT 10
53026: PUSH
53027: LD_INT 11
53029: PUSH
53030: LD_INT 12
53032: PUSH
53033: LD_INT 13
53035: PUSH
53036: LD_INT 14
53038: PUSH
53039: LD_INT 15
53041: PUSH
53042: LD_INT 16
53044: PUSH
53045: LD_INT 17
53047: PUSH
53048: LD_INT 18
53050: PUSH
53051: LD_INT 19
53053: PUSH
53054: LD_INT 20
53056: PUSH
53057: LD_INT 21
53059: PUSH
53060: LD_INT 22
53062: PUSH
53063: LD_INT 23
53065: PUSH
53066: LD_INT 24
53068: PUSH
53069: LD_INT 25
53071: PUSH
53072: LD_INT 26
53074: PUSH
53075: LD_INT 28
53077: PUSH
53078: LD_INT 30
53080: PUSH
53081: LD_INT 31
53083: PUSH
53084: LD_INT 32
53086: PUSH
53087: LD_INT 36
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 101
53123: PUSH
53124: LD_INT 102
53126: PUSH
53127: LD_INT 103
53129: PUSH
53130: LD_INT 104
53132: PUSH
53133: LD_INT 105
53135: PUSH
53136: LD_INT 106
53138: PUSH
53139: LD_INT 107
53141: PUSH
53142: LD_INT 108
53144: PUSH
53145: LD_INT 109
53147: PUSH
53148: LD_INT 110
53150: PUSH
53151: LD_INT 111
53153: PUSH
53154: LD_INT 112
53156: PUSH
53157: LD_INT 114
53159: PUSH
53160: LD_INT 116
53162: PUSH
53163: LD_INT 117
53165: PUSH
53166: LD_INT 118
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: ST_TO_ADDR
53191: GO 55086
53193: LD_INT 11
53195: DOUBLE
53196: EQUAL
53197: IFTRUE 53201
53199: GO 53405
53201: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53202: LD_ADDR_VAR 0 2
53206: PUSH
53207: LD_INT 2
53209: PUSH
53210: LD_INT 3
53212: PUSH
53213: LD_INT 4
53215: PUSH
53216: LD_INT 5
53218: PUSH
53219: LD_INT 6
53221: PUSH
53222: LD_INT 7
53224: PUSH
53225: LD_INT 8
53227: PUSH
53228: LD_INT 9
53230: PUSH
53231: LD_INT 10
53233: PUSH
53234: LD_INT 11
53236: PUSH
53237: LD_INT 12
53239: PUSH
53240: LD_INT 13
53242: PUSH
53243: LD_INT 14
53245: PUSH
53246: LD_INT 15
53248: PUSH
53249: LD_INT 16
53251: PUSH
53252: LD_INT 17
53254: PUSH
53255: LD_INT 18
53257: PUSH
53258: LD_INT 19
53260: PUSH
53261: LD_INT 20
53263: PUSH
53264: LD_INT 21
53266: PUSH
53267: LD_INT 22
53269: PUSH
53270: LD_INT 23
53272: PUSH
53273: LD_INT 24
53275: PUSH
53276: LD_INT 25
53278: PUSH
53279: LD_INT 26
53281: PUSH
53282: LD_INT 28
53284: PUSH
53285: LD_INT 30
53287: PUSH
53288: LD_INT 31
53290: PUSH
53291: LD_INT 32
53293: PUSH
53294: LD_INT 34
53296: PUSH
53297: LD_INT 36
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 101
53335: PUSH
53336: LD_INT 102
53338: PUSH
53339: LD_INT 103
53341: PUSH
53342: LD_INT 104
53344: PUSH
53345: LD_INT 105
53347: PUSH
53348: LD_INT 106
53350: PUSH
53351: LD_INT 107
53353: PUSH
53354: LD_INT 108
53356: PUSH
53357: LD_INT 109
53359: PUSH
53360: LD_INT 110
53362: PUSH
53363: LD_INT 111
53365: PUSH
53366: LD_INT 112
53368: PUSH
53369: LD_INT 114
53371: PUSH
53372: LD_INT 116
53374: PUSH
53375: LD_INT 117
53377: PUSH
53378: LD_INT 118
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: ST_TO_ADDR
53403: GO 55086
53405: LD_INT 12
53407: DOUBLE
53408: EQUAL
53409: IFTRUE 53413
53411: GO 53633
53413: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53414: LD_ADDR_VAR 0 2
53418: PUSH
53419: LD_INT 1
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: LD_INT 4
53430: PUSH
53431: LD_INT 5
53433: PUSH
53434: LD_INT 6
53436: PUSH
53437: LD_INT 7
53439: PUSH
53440: LD_INT 8
53442: PUSH
53443: LD_INT 9
53445: PUSH
53446: LD_INT 10
53448: PUSH
53449: LD_INT 11
53451: PUSH
53452: LD_INT 12
53454: PUSH
53455: LD_INT 13
53457: PUSH
53458: LD_INT 14
53460: PUSH
53461: LD_INT 15
53463: PUSH
53464: LD_INT 16
53466: PUSH
53467: LD_INT 17
53469: PUSH
53470: LD_INT 18
53472: PUSH
53473: LD_INT 19
53475: PUSH
53476: LD_INT 20
53478: PUSH
53479: LD_INT 21
53481: PUSH
53482: LD_INT 22
53484: PUSH
53485: LD_INT 23
53487: PUSH
53488: LD_INT 24
53490: PUSH
53491: LD_INT 25
53493: PUSH
53494: LD_INT 26
53496: PUSH
53497: LD_INT 27
53499: PUSH
53500: LD_INT 28
53502: PUSH
53503: LD_INT 30
53505: PUSH
53506: LD_INT 31
53508: PUSH
53509: LD_INT 32
53511: PUSH
53512: LD_INT 33
53514: PUSH
53515: LD_INT 34
53517: PUSH
53518: LD_INT 36
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 101
53559: PUSH
53560: LD_INT 102
53562: PUSH
53563: LD_INT 103
53565: PUSH
53566: LD_INT 104
53568: PUSH
53569: LD_INT 105
53571: PUSH
53572: LD_INT 106
53574: PUSH
53575: LD_INT 107
53577: PUSH
53578: LD_INT 108
53580: PUSH
53581: LD_INT 109
53583: PUSH
53584: LD_INT 110
53586: PUSH
53587: LD_INT 111
53589: PUSH
53590: LD_INT 112
53592: PUSH
53593: LD_INT 113
53595: PUSH
53596: LD_INT 114
53598: PUSH
53599: LD_INT 116
53601: PUSH
53602: LD_INT 117
53604: PUSH
53605: LD_INT 118
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: ST_TO_ADDR
53631: GO 55086
53633: LD_INT 13
53635: DOUBLE
53636: EQUAL
53637: IFTRUE 53641
53639: GO 53849
53641: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53642: LD_ADDR_VAR 0 2
53646: PUSH
53647: LD_INT 1
53649: PUSH
53650: LD_INT 2
53652: PUSH
53653: LD_INT 3
53655: PUSH
53656: LD_INT 4
53658: PUSH
53659: LD_INT 5
53661: PUSH
53662: LD_INT 8
53664: PUSH
53665: LD_INT 9
53667: PUSH
53668: LD_INT 10
53670: PUSH
53671: LD_INT 11
53673: PUSH
53674: LD_INT 12
53676: PUSH
53677: LD_INT 14
53679: PUSH
53680: LD_INT 15
53682: PUSH
53683: LD_INT 16
53685: PUSH
53686: LD_INT 17
53688: PUSH
53689: LD_INT 18
53691: PUSH
53692: LD_INT 19
53694: PUSH
53695: LD_INT 20
53697: PUSH
53698: LD_INT 21
53700: PUSH
53701: LD_INT 22
53703: PUSH
53704: LD_INT 23
53706: PUSH
53707: LD_INT 24
53709: PUSH
53710: LD_INT 25
53712: PUSH
53713: LD_INT 26
53715: PUSH
53716: LD_INT 27
53718: PUSH
53719: LD_INT 28
53721: PUSH
53722: LD_INT 30
53724: PUSH
53725: LD_INT 31
53727: PUSH
53728: LD_INT 32
53730: PUSH
53731: LD_INT 33
53733: PUSH
53734: LD_INT 34
53736: PUSH
53737: LD_INT 36
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: PUSH
53773: LD_INT 101
53775: PUSH
53776: LD_INT 102
53778: PUSH
53779: LD_INT 103
53781: PUSH
53782: LD_INT 104
53784: PUSH
53785: LD_INT 105
53787: PUSH
53788: LD_INT 106
53790: PUSH
53791: LD_INT 107
53793: PUSH
53794: LD_INT 108
53796: PUSH
53797: LD_INT 109
53799: PUSH
53800: LD_INT 110
53802: PUSH
53803: LD_INT 111
53805: PUSH
53806: LD_INT 112
53808: PUSH
53809: LD_INT 113
53811: PUSH
53812: LD_INT 114
53814: PUSH
53815: LD_INT 116
53817: PUSH
53818: LD_INT 117
53820: PUSH
53821: LD_INT 118
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: ST_TO_ADDR
53847: GO 55086
53849: LD_INT 14
53851: DOUBLE
53852: EQUAL
53853: IFTRUE 53857
53855: GO 54081
53857: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53858: LD_ADDR_VAR 0 2
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 3
53871: PUSH
53872: LD_INT 4
53874: PUSH
53875: LD_INT 5
53877: PUSH
53878: LD_INT 6
53880: PUSH
53881: LD_INT 7
53883: PUSH
53884: LD_INT 8
53886: PUSH
53887: LD_INT 9
53889: PUSH
53890: LD_INT 10
53892: PUSH
53893: LD_INT 11
53895: PUSH
53896: LD_INT 12
53898: PUSH
53899: LD_INT 13
53901: PUSH
53902: LD_INT 14
53904: PUSH
53905: LD_INT 15
53907: PUSH
53908: LD_INT 16
53910: PUSH
53911: LD_INT 17
53913: PUSH
53914: LD_INT 18
53916: PUSH
53917: LD_INT 19
53919: PUSH
53920: LD_INT 20
53922: PUSH
53923: LD_INT 21
53925: PUSH
53926: LD_INT 22
53928: PUSH
53929: LD_INT 23
53931: PUSH
53932: LD_INT 24
53934: PUSH
53935: LD_INT 25
53937: PUSH
53938: LD_INT 26
53940: PUSH
53941: LD_INT 27
53943: PUSH
53944: LD_INT 28
53946: PUSH
53947: LD_INT 29
53949: PUSH
53950: LD_INT 30
53952: PUSH
53953: LD_INT 31
53955: PUSH
53956: LD_INT 32
53958: PUSH
53959: LD_INT 33
53961: PUSH
53962: LD_INT 34
53964: PUSH
53965: LD_INT 36
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 101
54007: PUSH
54008: LD_INT 102
54010: PUSH
54011: LD_INT 103
54013: PUSH
54014: LD_INT 104
54016: PUSH
54017: LD_INT 105
54019: PUSH
54020: LD_INT 106
54022: PUSH
54023: LD_INT 107
54025: PUSH
54026: LD_INT 108
54028: PUSH
54029: LD_INT 109
54031: PUSH
54032: LD_INT 110
54034: PUSH
54035: LD_INT 111
54037: PUSH
54038: LD_INT 112
54040: PUSH
54041: LD_INT 113
54043: PUSH
54044: LD_INT 114
54046: PUSH
54047: LD_INT 116
54049: PUSH
54050: LD_INT 117
54052: PUSH
54053: LD_INT 118
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: ST_TO_ADDR
54079: GO 55086
54081: LD_INT 15
54083: DOUBLE
54084: EQUAL
54085: IFTRUE 54089
54087: GO 54313
54089: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54090: LD_ADDR_VAR 0 2
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 2
54100: PUSH
54101: LD_INT 3
54103: PUSH
54104: LD_INT 4
54106: PUSH
54107: LD_INT 5
54109: PUSH
54110: LD_INT 6
54112: PUSH
54113: LD_INT 7
54115: PUSH
54116: LD_INT 8
54118: PUSH
54119: LD_INT 9
54121: PUSH
54122: LD_INT 10
54124: PUSH
54125: LD_INT 11
54127: PUSH
54128: LD_INT 12
54130: PUSH
54131: LD_INT 13
54133: PUSH
54134: LD_INT 14
54136: PUSH
54137: LD_INT 15
54139: PUSH
54140: LD_INT 16
54142: PUSH
54143: LD_INT 17
54145: PUSH
54146: LD_INT 18
54148: PUSH
54149: LD_INT 19
54151: PUSH
54152: LD_INT 20
54154: PUSH
54155: LD_INT 21
54157: PUSH
54158: LD_INT 22
54160: PUSH
54161: LD_INT 23
54163: PUSH
54164: LD_INT 24
54166: PUSH
54167: LD_INT 25
54169: PUSH
54170: LD_INT 26
54172: PUSH
54173: LD_INT 27
54175: PUSH
54176: LD_INT 28
54178: PUSH
54179: LD_INT 29
54181: PUSH
54182: LD_INT 30
54184: PUSH
54185: LD_INT 31
54187: PUSH
54188: LD_INT 32
54190: PUSH
54191: LD_INT 33
54193: PUSH
54194: LD_INT 34
54196: PUSH
54197: LD_INT 36
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 101
54239: PUSH
54240: LD_INT 102
54242: PUSH
54243: LD_INT 103
54245: PUSH
54246: LD_INT 104
54248: PUSH
54249: LD_INT 105
54251: PUSH
54252: LD_INT 106
54254: PUSH
54255: LD_INT 107
54257: PUSH
54258: LD_INT 108
54260: PUSH
54261: LD_INT 109
54263: PUSH
54264: LD_INT 110
54266: PUSH
54267: LD_INT 111
54269: PUSH
54270: LD_INT 112
54272: PUSH
54273: LD_INT 113
54275: PUSH
54276: LD_INT 114
54278: PUSH
54279: LD_INT 116
54281: PUSH
54282: LD_INT 117
54284: PUSH
54285: LD_INT 118
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: ST_TO_ADDR
54311: GO 55086
54313: LD_INT 16
54315: DOUBLE
54316: EQUAL
54317: IFTRUE 54321
54319: GO 54457
54321: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54322: LD_ADDR_VAR 0 2
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: LD_INT 4
54332: PUSH
54333: LD_INT 5
54335: PUSH
54336: LD_INT 7
54338: PUSH
54339: LD_INT 11
54341: PUSH
54342: LD_INT 12
54344: PUSH
54345: LD_INT 15
54347: PUSH
54348: LD_INT 16
54350: PUSH
54351: LD_INT 20
54353: PUSH
54354: LD_INT 21
54356: PUSH
54357: LD_INT 22
54359: PUSH
54360: LD_INT 23
54362: PUSH
54363: LD_INT 25
54365: PUSH
54366: LD_INT 26
54368: PUSH
54369: LD_INT 30
54371: PUSH
54372: LD_INT 31
54374: PUSH
54375: LD_INT 32
54377: PUSH
54378: LD_INT 33
54380: PUSH
54381: LD_INT 34
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 101
54407: PUSH
54408: LD_INT 102
54410: PUSH
54411: LD_INT 103
54413: PUSH
54414: LD_INT 106
54416: PUSH
54417: LD_INT 108
54419: PUSH
54420: LD_INT 112
54422: PUSH
54423: LD_INT 113
54425: PUSH
54426: LD_INT 114
54428: PUSH
54429: LD_INT 116
54431: PUSH
54432: LD_INT 117
54434: PUSH
54435: LD_INT 118
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: ST_TO_ADDR
54455: GO 55086
54457: LD_INT 17
54459: DOUBLE
54460: EQUAL
54461: IFTRUE 54465
54463: GO 54689
54465: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54466: LD_ADDR_VAR 0 2
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: LD_INT 2
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: LD_INT 4
54482: PUSH
54483: LD_INT 5
54485: PUSH
54486: LD_INT 6
54488: PUSH
54489: LD_INT 7
54491: PUSH
54492: LD_INT 8
54494: PUSH
54495: LD_INT 9
54497: PUSH
54498: LD_INT 10
54500: PUSH
54501: LD_INT 11
54503: PUSH
54504: LD_INT 12
54506: PUSH
54507: LD_INT 13
54509: PUSH
54510: LD_INT 14
54512: PUSH
54513: LD_INT 15
54515: PUSH
54516: LD_INT 16
54518: PUSH
54519: LD_INT 17
54521: PUSH
54522: LD_INT 18
54524: PUSH
54525: LD_INT 19
54527: PUSH
54528: LD_INT 20
54530: PUSH
54531: LD_INT 21
54533: PUSH
54534: LD_INT 22
54536: PUSH
54537: LD_INT 23
54539: PUSH
54540: LD_INT 24
54542: PUSH
54543: LD_INT 25
54545: PUSH
54546: LD_INT 26
54548: PUSH
54549: LD_INT 27
54551: PUSH
54552: LD_INT 28
54554: PUSH
54555: LD_INT 29
54557: PUSH
54558: LD_INT 30
54560: PUSH
54561: LD_INT 31
54563: PUSH
54564: LD_INT 32
54566: PUSH
54567: LD_INT 33
54569: PUSH
54570: LD_INT 34
54572: PUSH
54573: LD_INT 36
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 101
54615: PUSH
54616: LD_INT 102
54618: PUSH
54619: LD_INT 103
54621: PUSH
54622: LD_INT 104
54624: PUSH
54625: LD_INT 105
54627: PUSH
54628: LD_INT 106
54630: PUSH
54631: LD_INT 107
54633: PUSH
54634: LD_INT 108
54636: PUSH
54637: LD_INT 109
54639: PUSH
54640: LD_INT 110
54642: PUSH
54643: LD_INT 111
54645: PUSH
54646: LD_INT 112
54648: PUSH
54649: LD_INT 113
54651: PUSH
54652: LD_INT 114
54654: PUSH
54655: LD_INT 116
54657: PUSH
54658: LD_INT 117
54660: PUSH
54661: LD_INT 118
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: ST_TO_ADDR
54687: GO 55086
54689: LD_INT 18
54691: DOUBLE
54692: EQUAL
54693: IFTRUE 54697
54695: GO 54845
54697: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54698: LD_ADDR_VAR 0 2
54702: PUSH
54703: LD_INT 2
54705: PUSH
54706: LD_INT 4
54708: PUSH
54709: LD_INT 5
54711: PUSH
54712: LD_INT 7
54714: PUSH
54715: LD_INT 11
54717: PUSH
54718: LD_INT 12
54720: PUSH
54721: LD_INT 15
54723: PUSH
54724: LD_INT 16
54726: PUSH
54727: LD_INT 20
54729: PUSH
54730: LD_INT 21
54732: PUSH
54733: LD_INT 22
54735: PUSH
54736: LD_INT 23
54738: PUSH
54739: LD_INT 25
54741: PUSH
54742: LD_INT 26
54744: PUSH
54745: LD_INT 30
54747: PUSH
54748: LD_INT 31
54750: PUSH
54751: LD_INT 32
54753: PUSH
54754: LD_INT 33
54756: PUSH
54757: LD_INT 34
54759: PUSH
54760: LD_INT 35
54762: PUSH
54763: LD_INT 36
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 101
54791: PUSH
54792: LD_INT 102
54794: PUSH
54795: LD_INT 103
54797: PUSH
54798: LD_INT 106
54800: PUSH
54801: LD_INT 108
54803: PUSH
54804: LD_INT 112
54806: PUSH
54807: LD_INT 113
54809: PUSH
54810: LD_INT 114
54812: PUSH
54813: LD_INT 115
54815: PUSH
54816: LD_INT 116
54818: PUSH
54819: LD_INT 117
54821: PUSH
54822: LD_INT 118
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: ST_TO_ADDR
54843: GO 55086
54845: LD_INT 19
54847: DOUBLE
54848: EQUAL
54849: IFTRUE 54853
54851: GO 55085
54853: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54854: LD_ADDR_VAR 0 2
54858: PUSH
54859: LD_INT 1
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: LD_INT 3
54867: PUSH
54868: LD_INT 4
54870: PUSH
54871: LD_INT 5
54873: PUSH
54874: LD_INT 6
54876: PUSH
54877: LD_INT 7
54879: PUSH
54880: LD_INT 8
54882: PUSH
54883: LD_INT 9
54885: PUSH
54886: LD_INT 10
54888: PUSH
54889: LD_INT 11
54891: PUSH
54892: LD_INT 12
54894: PUSH
54895: LD_INT 13
54897: PUSH
54898: LD_INT 14
54900: PUSH
54901: LD_INT 15
54903: PUSH
54904: LD_INT 16
54906: PUSH
54907: LD_INT 17
54909: PUSH
54910: LD_INT 18
54912: PUSH
54913: LD_INT 19
54915: PUSH
54916: LD_INT 20
54918: PUSH
54919: LD_INT 21
54921: PUSH
54922: LD_INT 22
54924: PUSH
54925: LD_INT 23
54927: PUSH
54928: LD_INT 24
54930: PUSH
54931: LD_INT 25
54933: PUSH
54934: LD_INT 26
54936: PUSH
54937: LD_INT 27
54939: PUSH
54940: LD_INT 28
54942: PUSH
54943: LD_INT 29
54945: PUSH
54946: LD_INT 30
54948: PUSH
54949: LD_INT 31
54951: PUSH
54952: LD_INT 32
54954: PUSH
54955: LD_INT 33
54957: PUSH
54958: LD_INT 34
54960: PUSH
54961: LD_INT 35
54963: PUSH
54964: LD_INT 36
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 101
55007: PUSH
55008: LD_INT 102
55010: PUSH
55011: LD_INT 103
55013: PUSH
55014: LD_INT 104
55016: PUSH
55017: LD_INT 105
55019: PUSH
55020: LD_INT 106
55022: PUSH
55023: LD_INT 107
55025: PUSH
55026: LD_INT 108
55028: PUSH
55029: LD_INT 109
55031: PUSH
55032: LD_INT 110
55034: PUSH
55035: LD_INT 111
55037: PUSH
55038: LD_INT 112
55040: PUSH
55041: LD_INT 113
55043: PUSH
55044: LD_INT 114
55046: PUSH
55047: LD_INT 115
55049: PUSH
55050: LD_INT 116
55052: PUSH
55053: LD_INT 117
55055: PUSH
55056: LD_INT 118
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: ST_TO_ADDR
55083: GO 55086
55085: POP
// end else
55086: GO 55317
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55088: LD_ADDR_VAR 0 2
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: LD_INT 2
55098: PUSH
55099: LD_INT 3
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 5
55107: PUSH
55108: LD_INT 6
55110: PUSH
55111: LD_INT 7
55113: PUSH
55114: LD_INT 8
55116: PUSH
55117: LD_INT 9
55119: PUSH
55120: LD_INT 10
55122: PUSH
55123: LD_INT 11
55125: PUSH
55126: LD_INT 12
55128: PUSH
55129: LD_INT 13
55131: PUSH
55132: LD_INT 14
55134: PUSH
55135: LD_INT 15
55137: PUSH
55138: LD_INT 16
55140: PUSH
55141: LD_INT 17
55143: PUSH
55144: LD_INT 18
55146: PUSH
55147: LD_INT 19
55149: PUSH
55150: LD_INT 20
55152: PUSH
55153: LD_INT 21
55155: PUSH
55156: LD_INT 22
55158: PUSH
55159: LD_INT 23
55161: PUSH
55162: LD_INT 24
55164: PUSH
55165: LD_INT 25
55167: PUSH
55168: LD_INT 26
55170: PUSH
55171: LD_INT 27
55173: PUSH
55174: LD_INT 28
55176: PUSH
55177: LD_INT 29
55179: PUSH
55180: LD_INT 30
55182: PUSH
55183: LD_INT 31
55185: PUSH
55186: LD_INT 32
55188: PUSH
55189: LD_INT 33
55191: PUSH
55192: LD_INT 34
55194: PUSH
55195: LD_INT 35
55197: PUSH
55198: LD_INT 36
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 101
55241: PUSH
55242: LD_INT 102
55244: PUSH
55245: LD_INT 103
55247: PUSH
55248: LD_INT 104
55250: PUSH
55251: LD_INT 105
55253: PUSH
55254: LD_INT 106
55256: PUSH
55257: LD_INT 107
55259: PUSH
55260: LD_INT 108
55262: PUSH
55263: LD_INT 109
55265: PUSH
55266: LD_INT 110
55268: PUSH
55269: LD_INT 111
55271: PUSH
55272: LD_INT 112
55274: PUSH
55275: LD_INT 113
55277: PUSH
55278: LD_INT 114
55280: PUSH
55281: LD_INT 115
55283: PUSH
55284: LD_INT 116
55286: PUSH
55287: LD_INT 117
55289: PUSH
55290: LD_INT 118
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: ST_TO_ADDR
// if result then
55317: LD_VAR 0 2
55321: IFFALSE 56107
// begin normal :=  ;
55323: LD_ADDR_VAR 0 5
55327: PUSH
55328: LD_STRING 
55330: ST_TO_ADDR
// hardcore :=  ;
55331: LD_ADDR_VAR 0 6
55335: PUSH
55336: LD_STRING 
55338: ST_TO_ADDR
// active :=  ;
55339: LD_ADDR_VAR 0 7
55343: PUSH
55344: LD_STRING 
55346: ST_TO_ADDR
// for i = 1 to normalCounter do
55347: LD_ADDR_VAR 0 8
55351: PUSH
55352: DOUBLE
55353: LD_INT 1
55355: DEC
55356: ST_TO_ADDR
55357: LD_EXP 31
55361: PUSH
55362: FOR_TO
55363: IFFALSE 55464
// begin tmp := 0 ;
55365: LD_ADDR_VAR 0 3
55369: PUSH
55370: LD_STRING 0
55372: ST_TO_ADDR
// if result [ 1 ] then
55373: LD_VAR 0 2
55377: PUSH
55378: LD_INT 1
55380: ARRAY
55381: IFFALSE 55446
// if result [ 1 ] [ 1 ] = i then
55383: LD_VAR 0 2
55387: PUSH
55388: LD_INT 1
55390: ARRAY
55391: PUSH
55392: LD_INT 1
55394: ARRAY
55395: PUSH
55396: LD_VAR 0 8
55400: EQUAL
55401: IFFALSE 55446
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55403: LD_ADDR_VAR 0 2
55407: PUSH
55408: LD_VAR 0 2
55412: PPUSH
55413: LD_INT 1
55415: PPUSH
55416: LD_VAR 0 2
55420: PUSH
55421: LD_INT 1
55423: ARRAY
55424: PPUSH
55425: LD_INT 1
55427: PPUSH
55428: CALL_OW 3
55432: PPUSH
55433: CALL_OW 1
55437: ST_TO_ADDR
// tmp := 1 ;
55438: LD_ADDR_VAR 0 3
55442: PUSH
55443: LD_STRING 1
55445: ST_TO_ADDR
// end ; normal := normal & tmp ;
55446: LD_ADDR_VAR 0 5
55450: PUSH
55451: LD_VAR 0 5
55455: PUSH
55456: LD_VAR 0 3
55460: STR
55461: ST_TO_ADDR
// end ;
55462: GO 55362
55464: POP
55465: POP
// for i = 1 to hardcoreCounter do
55466: LD_ADDR_VAR 0 8
55470: PUSH
55471: DOUBLE
55472: LD_INT 1
55474: DEC
55475: ST_TO_ADDR
55476: LD_EXP 32
55480: PUSH
55481: FOR_TO
55482: IFFALSE 55587
// begin tmp := 0 ;
55484: LD_ADDR_VAR 0 3
55488: PUSH
55489: LD_STRING 0
55491: ST_TO_ADDR
// if result [ 2 ] then
55492: LD_VAR 0 2
55496: PUSH
55497: LD_INT 2
55499: ARRAY
55500: IFFALSE 55569
// if result [ 2 ] [ 1 ] = 100 + i then
55502: LD_VAR 0 2
55506: PUSH
55507: LD_INT 2
55509: ARRAY
55510: PUSH
55511: LD_INT 1
55513: ARRAY
55514: PUSH
55515: LD_INT 100
55517: PUSH
55518: LD_VAR 0 8
55522: PLUS
55523: EQUAL
55524: IFFALSE 55569
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55526: LD_ADDR_VAR 0 2
55530: PUSH
55531: LD_VAR 0 2
55535: PPUSH
55536: LD_INT 2
55538: PPUSH
55539: LD_VAR 0 2
55543: PUSH
55544: LD_INT 2
55546: ARRAY
55547: PPUSH
55548: LD_INT 1
55550: PPUSH
55551: CALL_OW 3
55555: PPUSH
55556: CALL_OW 1
55560: ST_TO_ADDR
// tmp := 1 ;
55561: LD_ADDR_VAR 0 3
55565: PUSH
55566: LD_STRING 1
55568: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55569: LD_ADDR_VAR 0 6
55573: PUSH
55574: LD_VAR 0 6
55578: PUSH
55579: LD_VAR 0 3
55583: STR
55584: ST_TO_ADDR
// end ;
55585: GO 55481
55587: POP
55588: POP
// if isGameLoad then
55589: LD_VAR 0 1
55593: IFFALSE 56068
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55595: LD_ADDR_VAR 0 4
55599: PUSH
55600: LD_EXP 35
55604: PUSH
55605: LD_EXP 34
55609: PUSH
55610: LD_EXP 36
55614: PUSH
55615: LD_EXP 33
55619: PUSH
55620: LD_EXP 37
55624: PUSH
55625: LD_EXP 38
55629: PUSH
55630: LD_EXP 39
55634: PUSH
55635: LD_EXP 40
55639: PUSH
55640: LD_EXP 41
55644: PUSH
55645: LD_EXP 42
55649: PUSH
55650: LD_EXP 43
55654: PUSH
55655: LD_EXP 44
55659: PUSH
55660: LD_EXP 45
55664: PUSH
55665: LD_EXP 46
55669: PUSH
55670: LD_EXP 54
55674: PUSH
55675: LD_EXP 55
55679: PUSH
55680: LD_EXP 56
55684: PUSH
55685: LD_EXP 57
55689: PUSH
55690: LD_EXP 59
55694: PUSH
55695: LD_EXP 60
55699: PUSH
55700: LD_EXP 61
55704: PUSH
55705: LD_EXP 64
55709: PUSH
55710: LD_EXP 66
55714: PUSH
55715: LD_EXP 67
55719: PUSH
55720: LD_EXP 68
55724: PUSH
55725: LD_EXP 70
55729: PUSH
55730: LD_EXP 71
55734: PUSH
55735: LD_EXP 74
55739: PUSH
55740: LD_EXP 75
55744: PUSH
55745: LD_EXP 76
55749: PUSH
55750: LD_EXP 77
55754: PUSH
55755: LD_EXP 78
55759: PUSH
55760: LD_EXP 79
55764: PUSH
55765: LD_EXP 80
55769: PUSH
55770: LD_EXP 81
55774: PUSH
55775: LD_EXP 82
55779: PUSH
55780: LD_EXP 47
55784: PUSH
55785: LD_EXP 48
55789: PUSH
55790: LD_EXP 51
55794: PUSH
55795: LD_EXP 52
55799: PUSH
55800: LD_EXP 53
55804: PUSH
55805: LD_EXP 49
55809: PUSH
55810: LD_EXP 50
55814: PUSH
55815: LD_EXP 58
55819: PUSH
55820: LD_EXP 62
55824: PUSH
55825: LD_EXP 63
55829: PUSH
55830: LD_EXP 65
55834: PUSH
55835: LD_EXP 69
55839: PUSH
55840: LD_EXP 72
55844: PUSH
55845: LD_EXP 73
55849: PUSH
55850: LD_EXP 83
55854: PUSH
55855: LD_EXP 84
55859: PUSH
55860: LD_EXP 85
55864: PUSH
55865: LD_EXP 86
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: ST_TO_ADDR
// tmp :=  ;
55926: LD_ADDR_VAR 0 3
55930: PUSH
55931: LD_STRING 
55933: ST_TO_ADDR
// for i = 1 to normalCounter do
55934: LD_ADDR_VAR 0 8
55938: PUSH
55939: DOUBLE
55940: LD_INT 1
55942: DEC
55943: ST_TO_ADDR
55944: LD_EXP 31
55948: PUSH
55949: FOR_TO
55950: IFFALSE 55986
// begin if flags [ i ] then
55952: LD_VAR 0 4
55956: PUSH
55957: LD_VAR 0 8
55961: ARRAY
55962: IFFALSE 55984
// tmp := tmp & i & ; ;
55964: LD_ADDR_VAR 0 3
55968: PUSH
55969: LD_VAR 0 3
55973: PUSH
55974: LD_VAR 0 8
55978: STR
55979: PUSH
55980: LD_STRING ;
55982: STR
55983: ST_TO_ADDR
// end ;
55984: GO 55949
55986: POP
55987: POP
// for i = 1 to hardcoreCounter do
55988: LD_ADDR_VAR 0 8
55992: PUSH
55993: DOUBLE
55994: LD_INT 1
55996: DEC
55997: ST_TO_ADDR
55998: LD_EXP 32
56002: PUSH
56003: FOR_TO
56004: IFFALSE 56050
// begin if flags [ normalCounter + i ] then
56006: LD_VAR 0 4
56010: PUSH
56011: LD_EXP 31
56015: PUSH
56016: LD_VAR 0 8
56020: PLUS
56021: ARRAY
56022: IFFALSE 56048
// tmp := tmp & ( 100 + i ) & ; ;
56024: LD_ADDR_VAR 0 3
56028: PUSH
56029: LD_VAR 0 3
56033: PUSH
56034: LD_INT 100
56036: PUSH
56037: LD_VAR 0 8
56041: PLUS
56042: STR
56043: PUSH
56044: LD_STRING ;
56046: STR
56047: ST_TO_ADDR
// end ;
56048: GO 56003
56050: POP
56051: POP
// if tmp then
56052: LD_VAR 0 3
56056: IFFALSE 56068
// active := tmp ;
56058: LD_ADDR_VAR 0 7
56062: PUSH
56063: LD_VAR 0 3
56067: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56068: LD_STRING getStreamItemsFromMission("
56070: PUSH
56071: LD_VAR 0 5
56075: STR
56076: PUSH
56077: LD_STRING ","
56079: STR
56080: PUSH
56081: LD_VAR 0 6
56085: STR
56086: PUSH
56087: LD_STRING ","
56089: STR
56090: PUSH
56091: LD_VAR 0 7
56095: STR
56096: PUSH
56097: LD_STRING ")
56099: STR
56100: PPUSH
56101: CALL_OW 559
// end else
56105: GO 56114
// ToLua ( getStreamItemsFromMission("","","") ) ;
56107: LD_STRING getStreamItemsFromMission("","","")
56109: PPUSH
56110: CALL_OW 559
// end ;
56114: LD_VAR 0 2
56118: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56119: LD_EXP 30
56123: IFFALSE 56131
56125: PUSH
56126: LD_EXP 35
56130: AND
56131: IFFALSE 56255
56133: GO 56135
56135: DISABLE
56136: LD_INT 0
56138: PPUSH
56139: PPUSH
// begin enable ;
56140: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56141: LD_ADDR_VAR 0 2
56145: PUSH
56146: LD_INT 22
56148: PUSH
56149: LD_OWVAR 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: LD_INT 34
56163: PUSH
56164: LD_INT 7
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 34
56173: PUSH
56174: LD_INT 45
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 34
56183: PUSH
56184: LD_INT 28
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 34
56193: PUSH
56194: LD_INT 47
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PPUSH
56212: CALL_OW 69
56216: ST_TO_ADDR
// if not tmp then
56217: LD_VAR 0 2
56221: NOT
56222: IFFALSE 56226
// exit ;
56224: GO 56255
// for i in tmp do
56226: LD_ADDR_VAR 0 1
56230: PUSH
56231: LD_VAR 0 2
56235: PUSH
56236: FOR_IN
56237: IFFALSE 56253
// begin SetLives ( i , 0 ) ;
56239: LD_VAR 0 1
56243: PPUSH
56244: LD_INT 0
56246: PPUSH
56247: CALL_OW 234
// end ;
56251: GO 56236
56253: POP
56254: POP
// end ;
56255: PPOPN 2
56257: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56258: LD_EXP 30
56262: IFFALSE 56270
56264: PUSH
56265: LD_EXP 36
56269: AND
56270: IFFALSE 56354
56272: GO 56274
56274: DISABLE
56275: LD_INT 0
56277: PPUSH
56278: PPUSH
// begin enable ;
56279: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56280: LD_ADDR_VAR 0 2
56284: PUSH
56285: LD_INT 22
56287: PUSH
56288: LD_OWVAR 2
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 32
56299: PUSH
56300: LD_INT 3
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PPUSH
56311: CALL_OW 69
56315: ST_TO_ADDR
// if not tmp then
56316: LD_VAR 0 2
56320: NOT
56321: IFFALSE 56325
// exit ;
56323: GO 56354
// for i in tmp do
56325: LD_ADDR_VAR 0 1
56329: PUSH
56330: LD_VAR 0 2
56334: PUSH
56335: FOR_IN
56336: IFFALSE 56352
// begin SetLives ( i , 0 ) ;
56338: LD_VAR 0 1
56342: PPUSH
56343: LD_INT 0
56345: PPUSH
56346: CALL_OW 234
// end ;
56350: GO 56335
56352: POP
56353: POP
// end ;
56354: PPOPN 2
56356: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56357: LD_EXP 30
56361: IFFALSE 56369
56363: PUSH
56364: LD_EXP 33
56368: AND
56369: IFFALSE 56462
56371: GO 56373
56373: DISABLE
56374: LD_INT 0
56376: PPUSH
// begin enable ;
56377: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56378: LD_ADDR_VAR 0 1
56382: PUSH
56383: LD_INT 22
56385: PUSH
56386: LD_OWVAR 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 25
56400: PUSH
56401: LD_INT 5
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 25
56410: PUSH
56411: LD_INT 9
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 25
56420: PUSH
56421: LD_INT 8
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PPUSH
56438: CALL_OW 69
56442: PUSH
56443: FOR_IN
56444: IFFALSE 56460
// begin SetClass ( i , 1 ) ;
56446: LD_VAR 0 1
56450: PPUSH
56451: LD_INT 1
56453: PPUSH
56454: CALL_OW 336
// end ;
56458: GO 56443
56460: POP
56461: POP
// end ;
56462: PPOPN 1
56464: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56465: LD_EXP 30
56469: IFFALSE 56477
56471: PUSH
56472: LD_EXP 34
56476: AND
56477: IFFALSE 56489
56479: PUSH
56480: LD_OWVAR 65
56484: PUSH
56485: LD_INT 7
56487: LESS
56488: AND
56489: IFFALSE 56503
56491: GO 56493
56493: DISABLE
// begin enable ;
56494: ENABLE
// game_speed := 7 ;
56495: LD_ADDR_OWVAR 65
56499: PUSH
56500: LD_INT 7
56502: ST_TO_ADDR
// end ;
56503: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56504: LD_EXP 30
56508: IFFALSE 56516
56510: PUSH
56511: LD_EXP 37
56515: AND
56516: IFFALSE 56718
56518: GO 56520
56520: DISABLE
56521: LD_INT 0
56523: PPUSH
56524: PPUSH
56525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56526: LD_ADDR_VAR 0 3
56530: PUSH
56531: LD_INT 81
56533: PUSH
56534: LD_OWVAR 2
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 21
56545: PUSH
56546: LD_INT 1
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PPUSH
56557: CALL_OW 69
56561: ST_TO_ADDR
// if not tmp then
56562: LD_VAR 0 3
56566: NOT
56567: IFFALSE 56571
// exit ;
56569: GO 56718
// if tmp > 5 then
56571: LD_VAR 0 3
56575: PUSH
56576: LD_INT 5
56578: GREATER
56579: IFFALSE 56591
// k := 5 else
56581: LD_ADDR_VAR 0 2
56585: PUSH
56586: LD_INT 5
56588: ST_TO_ADDR
56589: GO 56601
// k := tmp ;
56591: LD_ADDR_VAR 0 2
56595: PUSH
56596: LD_VAR 0 3
56600: ST_TO_ADDR
// for i := 1 to k do
56601: LD_ADDR_VAR 0 1
56605: PUSH
56606: DOUBLE
56607: LD_INT 1
56609: DEC
56610: ST_TO_ADDR
56611: LD_VAR 0 2
56615: PUSH
56616: FOR_TO
56617: IFFALSE 56716
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56619: LD_VAR 0 3
56623: PUSH
56624: LD_VAR 0 1
56628: ARRAY
56629: PPUSH
56630: LD_VAR 0 1
56634: PUSH
56635: LD_INT 4
56637: MOD
56638: PUSH
56639: LD_INT 1
56641: PLUS
56642: PPUSH
56643: CALL_OW 259
56647: PUSH
56648: LD_INT 10
56650: LESS
56651: IFFALSE 56714
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56653: LD_VAR 0 3
56657: PUSH
56658: LD_VAR 0 1
56662: ARRAY
56663: PPUSH
56664: LD_VAR 0 1
56668: PUSH
56669: LD_INT 4
56671: MOD
56672: PUSH
56673: LD_INT 1
56675: PLUS
56676: PPUSH
56677: LD_VAR 0 3
56681: PUSH
56682: LD_VAR 0 1
56686: ARRAY
56687: PPUSH
56688: LD_VAR 0 1
56692: PUSH
56693: LD_INT 4
56695: MOD
56696: PUSH
56697: LD_INT 1
56699: PLUS
56700: PPUSH
56701: CALL_OW 259
56705: PUSH
56706: LD_INT 1
56708: PLUS
56709: PPUSH
56710: CALL_OW 237
56714: GO 56616
56716: POP
56717: POP
// end ;
56718: PPOPN 3
56720: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56721: LD_EXP 30
56725: IFFALSE 56733
56727: PUSH
56728: LD_EXP 38
56732: AND
56733: IFFALSE 56753
56735: GO 56737
56737: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56738: LD_INT 4
56740: PPUSH
56741: LD_OWVAR 2
56745: PPUSH
56746: LD_INT 0
56748: PPUSH
56749: CALL_OW 324
56753: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56754: LD_EXP 30
56758: IFFALSE 56766
56760: PUSH
56761: LD_EXP 67
56765: AND
56766: IFFALSE 56786
56768: GO 56770
56770: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56771: LD_INT 19
56773: PPUSH
56774: LD_OWVAR 2
56778: PPUSH
56779: LD_INT 0
56781: PPUSH
56782: CALL_OW 324
56786: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56787: LD_EXP 30
56791: IFFALSE 56799
56793: PUSH
56794: LD_EXP 39
56798: AND
56799: IFFALSE 56901
56801: GO 56803
56803: DISABLE
56804: LD_INT 0
56806: PPUSH
56807: PPUSH
// begin enable ;
56808: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56809: LD_ADDR_VAR 0 2
56813: PUSH
56814: LD_INT 22
56816: PUSH
56817: LD_OWVAR 2
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: LD_INT 34
56831: PUSH
56832: LD_INT 11
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 34
56841: PUSH
56842: LD_INT 30
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PPUSH
56858: CALL_OW 69
56862: ST_TO_ADDR
// if not tmp then
56863: LD_VAR 0 2
56867: NOT
56868: IFFALSE 56872
// exit ;
56870: GO 56901
// for i in tmp do
56872: LD_ADDR_VAR 0 1
56876: PUSH
56877: LD_VAR 0 2
56881: PUSH
56882: FOR_IN
56883: IFFALSE 56899
// begin SetLives ( i , 0 ) ;
56885: LD_VAR 0 1
56889: PPUSH
56890: LD_INT 0
56892: PPUSH
56893: CALL_OW 234
// end ;
56897: GO 56882
56899: POP
56900: POP
// end ;
56901: PPOPN 2
56903: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56904: LD_EXP 30
56908: IFFALSE 56916
56910: PUSH
56911: LD_EXP 40
56915: AND
56916: IFFALSE 56936
56918: GO 56920
56920: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56921: LD_INT 32
56923: PPUSH
56924: LD_OWVAR 2
56928: PPUSH
56929: LD_INT 0
56931: PPUSH
56932: CALL_OW 324
56936: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56937: LD_EXP 30
56941: IFFALSE 56949
56943: PUSH
56944: LD_EXP 41
56948: AND
56949: IFFALSE 57132
56951: GO 56953
56953: DISABLE
56954: LD_INT 0
56956: PPUSH
56957: PPUSH
56958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56959: LD_ADDR_VAR 0 2
56963: PUSH
56964: LD_INT 22
56966: PUSH
56967: LD_OWVAR 2
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 33
56978: PUSH
56979: LD_INT 3
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PPUSH
56990: CALL_OW 69
56994: ST_TO_ADDR
// if not tmp then
56995: LD_VAR 0 2
56999: NOT
57000: IFFALSE 57004
// exit ;
57002: GO 57132
// side := 0 ;
57004: LD_ADDR_VAR 0 3
57008: PUSH
57009: LD_INT 0
57011: ST_TO_ADDR
// for i := 1 to 8 do
57012: LD_ADDR_VAR 0 1
57016: PUSH
57017: DOUBLE
57018: LD_INT 1
57020: DEC
57021: ST_TO_ADDR
57022: LD_INT 8
57024: PUSH
57025: FOR_TO
57026: IFFALSE 57076
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57028: LD_OWVAR 2
57032: PUSH
57033: LD_VAR 0 1
57037: NONEQUAL
57038: IFFALSE 57060
57040: PUSH
57041: LD_OWVAR 2
57045: PPUSH
57046: LD_VAR 0 1
57050: PPUSH
57051: CALL_OW 81
57055: PUSH
57056: LD_INT 2
57058: EQUAL
57059: AND
57060: IFFALSE 57074
// begin side := i ;
57062: LD_ADDR_VAR 0 3
57066: PUSH
57067: LD_VAR 0 1
57071: ST_TO_ADDR
// break ;
57072: GO 57076
// end ;
57074: GO 57025
57076: POP
57077: POP
// if not side then
57078: LD_VAR 0 3
57082: NOT
57083: IFFALSE 57087
// exit ;
57085: GO 57132
// for i := 1 to tmp do
57087: LD_ADDR_VAR 0 1
57091: PUSH
57092: DOUBLE
57093: LD_INT 1
57095: DEC
57096: ST_TO_ADDR
57097: LD_VAR 0 2
57101: PUSH
57102: FOR_TO
57103: IFFALSE 57130
// if Prob ( 60 ) then
57105: LD_INT 60
57107: PPUSH
57108: CALL_OW 13
57112: IFFALSE 57128
// SetSide ( i , side ) ;
57114: LD_VAR 0 1
57118: PPUSH
57119: LD_VAR 0 3
57123: PPUSH
57124: CALL_OW 235
57128: GO 57102
57130: POP
57131: POP
// end ;
57132: PPOPN 3
57134: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57135: LD_EXP 30
57139: IFFALSE 57147
57141: PUSH
57142: LD_EXP 43
57146: AND
57147: IFFALSE 57266
57149: GO 57151
57151: DISABLE
57152: LD_INT 0
57154: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57155: LD_ADDR_VAR 0 1
57159: PUSH
57160: LD_INT 22
57162: PUSH
57163: LD_OWVAR 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 21
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: LD_INT 23
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: PPUSH
57204: CALL_OW 69
57208: PUSH
57209: FOR_IN
57210: IFFALSE 57264
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57212: LD_VAR 0 1
57216: PPUSH
57217: CALL_OW 257
57221: PUSH
57222: LD_INT 1
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: LD_INT 4
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: IN
57240: IFFALSE 57262
// SetClass ( un , rand ( 1 , 4 ) ) ;
57242: LD_VAR 0 1
57246: PPUSH
57247: LD_INT 1
57249: PPUSH
57250: LD_INT 4
57252: PPUSH
57253: CALL_OW 12
57257: PPUSH
57258: CALL_OW 336
57262: GO 57209
57264: POP
57265: POP
// end ;
57266: PPOPN 1
57268: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57269: LD_EXP 30
57273: IFFALSE 57281
57275: PUSH
57276: LD_EXP 42
57280: AND
57281: IFFALSE 57360
57283: GO 57285
57285: DISABLE
57286: LD_INT 0
57288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57289: LD_ADDR_VAR 0 1
57293: PUSH
57294: LD_INT 22
57296: PUSH
57297: LD_OWVAR 2
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 21
57308: PUSH
57309: LD_INT 3
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PPUSH
57320: CALL_OW 69
57324: ST_TO_ADDR
// if not tmp then
57325: LD_VAR 0 1
57329: NOT
57330: IFFALSE 57334
// exit ;
57332: GO 57360
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57334: LD_VAR 0 1
57338: PUSH
57339: LD_INT 1
57341: PPUSH
57342: LD_VAR 0 1
57346: PPUSH
57347: CALL_OW 12
57351: ARRAY
57352: PPUSH
57353: LD_INT 100
57355: PPUSH
57356: CALL_OW 234
// end ;
57360: PPOPN 1
57362: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57363: LD_EXP 30
57367: IFFALSE 57375
57369: PUSH
57370: LD_EXP 44
57374: AND
57375: IFFALSE 57473
57377: GO 57379
57379: DISABLE
57380: LD_INT 0
57382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57383: LD_ADDR_VAR 0 1
57387: PUSH
57388: LD_INT 22
57390: PUSH
57391: LD_OWVAR 2
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 21
57402: PUSH
57403: LD_INT 1
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PPUSH
57414: CALL_OW 69
57418: ST_TO_ADDR
// if not tmp then
57419: LD_VAR 0 1
57423: NOT
57424: IFFALSE 57428
// exit ;
57426: GO 57473
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57428: LD_VAR 0 1
57432: PUSH
57433: LD_INT 1
57435: PPUSH
57436: LD_VAR 0 1
57440: PPUSH
57441: CALL_OW 12
57445: ARRAY
57446: PPUSH
57447: LD_INT 1
57449: PPUSH
57450: LD_INT 4
57452: PPUSH
57453: CALL_OW 12
57457: PPUSH
57458: LD_INT 3000
57460: PPUSH
57461: LD_INT 9000
57463: PPUSH
57464: CALL_OW 12
57468: PPUSH
57469: CALL_OW 492
// end ;
57473: PPOPN 1
57475: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57476: LD_EXP 30
57480: IFFALSE 57488
57482: PUSH
57483: LD_EXP 45
57487: AND
57488: IFFALSE 57508
57490: GO 57492
57492: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57493: LD_INT 1
57495: PPUSH
57496: LD_OWVAR 2
57500: PPUSH
57501: LD_INT 0
57503: PPUSH
57504: CALL_OW 324
57508: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57509: LD_EXP 30
57513: IFFALSE 57521
57515: PUSH
57516: LD_EXP 46
57520: AND
57521: IFFALSE 57604
57523: GO 57525
57525: DISABLE
57526: LD_INT 0
57528: PPUSH
57529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57530: LD_ADDR_VAR 0 2
57534: PUSH
57535: LD_INT 22
57537: PUSH
57538: LD_OWVAR 2
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 21
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PPUSH
57561: CALL_OW 69
57565: ST_TO_ADDR
// if not tmp then
57566: LD_VAR 0 2
57570: NOT
57571: IFFALSE 57575
// exit ;
57573: GO 57604
// for i in tmp do
57575: LD_ADDR_VAR 0 1
57579: PUSH
57580: LD_VAR 0 2
57584: PUSH
57585: FOR_IN
57586: IFFALSE 57602
// SetBLevel ( i , 10 ) ;
57588: LD_VAR 0 1
57592: PPUSH
57593: LD_INT 10
57595: PPUSH
57596: CALL_OW 241
57600: GO 57585
57602: POP
57603: POP
// end ;
57604: PPOPN 2
57606: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57607: LD_EXP 30
57611: IFFALSE 57619
57613: PUSH
57614: LD_EXP 47
57618: AND
57619: IFFALSE 57730
57621: GO 57623
57623: DISABLE
57624: LD_INT 0
57626: PPUSH
57627: PPUSH
57628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57629: LD_ADDR_VAR 0 3
57633: PUSH
57634: LD_INT 22
57636: PUSH
57637: LD_OWVAR 2
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 25
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PPUSH
57660: CALL_OW 69
57664: ST_TO_ADDR
// if not tmp then
57665: LD_VAR 0 3
57669: NOT
57670: IFFALSE 57674
// exit ;
57672: GO 57730
// un := tmp [ rand ( 1 , tmp ) ] ;
57674: LD_ADDR_VAR 0 2
57678: PUSH
57679: LD_VAR 0 3
57683: PUSH
57684: LD_INT 1
57686: PPUSH
57687: LD_VAR 0 3
57691: PPUSH
57692: CALL_OW 12
57696: ARRAY
57697: ST_TO_ADDR
// if Crawls ( un ) then
57698: LD_VAR 0 2
57702: PPUSH
57703: CALL_OW 318
57707: IFFALSE 57718
// ComWalk ( un ) ;
57709: LD_VAR 0 2
57713: PPUSH
57714: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57718: LD_VAR 0 2
57722: PPUSH
57723: LD_INT 5
57725: PPUSH
57726: CALL_OW 336
// end ;
57730: PPOPN 3
57732: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57733: LD_EXP 30
57737: IFFALSE 57745
57739: PUSH
57740: LD_EXP 48
57744: AND
57745: IFFALSE 57757
57747: PUSH
57748: LD_OWVAR 67
57752: PUSH
57753: LD_INT 4
57755: LESS
57756: AND
57757: IFFALSE 57776
57759: GO 57761
57761: DISABLE
// begin Difficulty := Difficulty + 1 ;
57762: LD_ADDR_OWVAR 67
57766: PUSH
57767: LD_OWVAR 67
57771: PUSH
57772: LD_INT 1
57774: PLUS
57775: ST_TO_ADDR
// end ;
57776: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57777: LD_EXP 30
57781: IFFALSE 57789
57783: PUSH
57784: LD_EXP 49
57788: AND
57789: IFFALSE 57892
57791: GO 57793
57793: DISABLE
57794: LD_INT 0
57796: PPUSH
// begin for i := 1 to 5 do
57797: LD_ADDR_VAR 0 1
57801: PUSH
57802: DOUBLE
57803: LD_INT 1
57805: DEC
57806: ST_TO_ADDR
57807: LD_INT 5
57809: PUSH
57810: FOR_TO
57811: IFFALSE 57890
// begin uc_nation := nation_nature ;
57813: LD_ADDR_OWVAR 21
57817: PUSH
57818: LD_INT 0
57820: ST_TO_ADDR
// uc_side := 0 ;
57821: LD_ADDR_OWVAR 20
57825: PUSH
57826: LD_INT 0
57828: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57829: LD_ADDR_OWVAR 29
57833: PUSH
57834: LD_INT 12
57836: PUSH
57837: LD_INT 12
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: ST_TO_ADDR
// hc_agressivity := 20 ;
57844: LD_ADDR_OWVAR 35
57848: PUSH
57849: LD_INT 20
57851: ST_TO_ADDR
// hc_class := class_tiger ;
57852: LD_ADDR_OWVAR 28
57856: PUSH
57857: LD_INT 14
57859: ST_TO_ADDR
// hc_gallery :=  ;
57860: LD_ADDR_OWVAR 33
57864: PUSH
57865: LD_STRING 
57867: ST_TO_ADDR
// hc_name :=  ;
57868: LD_ADDR_OWVAR 26
57872: PUSH
57873: LD_STRING 
57875: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57876: CALL_OW 44
57880: PPUSH
57881: LD_INT 0
57883: PPUSH
57884: CALL_OW 51
// end ;
57888: GO 57810
57890: POP
57891: POP
// end ;
57892: PPOPN 1
57894: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57895: LD_EXP 30
57899: IFFALSE 57907
57901: PUSH
57902: LD_EXP 50
57906: AND
57907: IFFALSE 57916
57909: GO 57911
57911: DISABLE
// StreamSibBomb ;
57912: CALL 57917 0 0
57916: END
// export function StreamSibBomb ; var i , x , y ; begin
57917: LD_INT 0
57919: PPUSH
57920: PPUSH
57921: PPUSH
57922: PPUSH
// result := false ;
57923: LD_ADDR_VAR 0 1
57927: PUSH
57928: LD_INT 0
57930: ST_TO_ADDR
// for i := 1 to 16 do
57931: LD_ADDR_VAR 0 2
57935: PUSH
57936: DOUBLE
57937: LD_INT 1
57939: DEC
57940: ST_TO_ADDR
57941: LD_INT 16
57943: PUSH
57944: FOR_TO
57945: IFFALSE 58144
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57947: LD_ADDR_VAR 0 3
57951: PUSH
57952: LD_INT 10
57954: PUSH
57955: LD_INT 20
57957: PUSH
57958: LD_INT 30
57960: PUSH
57961: LD_INT 40
57963: PUSH
57964: LD_INT 50
57966: PUSH
57967: LD_INT 60
57969: PUSH
57970: LD_INT 70
57972: PUSH
57973: LD_INT 80
57975: PUSH
57976: LD_INT 90
57978: PUSH
57979: LD_INT 100
57981: PUSH
57982: LD_INT 110
57984: PUSH
57985: LD_INT 120
57987: PUSH
57988: LD_INT 130
57990: PUSH
57991: LD_INT 140
57993: PUSH
57994: LD_INT 150
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PPUSH
58017: LD_INT 15
58019: PPUSH
58020: CALL_OW 12
58024: ARRAY
58025: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58026: LD_ADDR_VAR 0 4
58030: PUSH
58031: LD_INT 10
58033: PUSH
58034: LD_INT 20
58036: PUSH
58037: LD_INT 30
58039: PUSH
58040: LD_INT 40
58042: PUSH
58043: LD_INT 50
58045: PUSH
58046: LD_INT 60
58048: PUSH
58049: LD_INT 70
58051: PUSH
58052: LD_INT 80
58054: PUSH
58055: LD_INT 90
58057: PUSH
58058: LD_INT 100
58060: PUSH
58061: LD_INT 110
58063: PUSH
58064: LD_INT 120
58066: PUSH
58067: LD_INT 130
58069: PUSH
58070: LD_INT 140
58072: PUSH
58073: LD_INT 150
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 1
58095: PPUSH
58096: LD_INT 15
58098: PPUSH
58099: CALL_OW 12
58103: ARRAY
58104: ST_TO_ADDR
// if ValidHex ( x , y ) then
58105: LD_VAR 0 3
58109: PPUSH
58110: LD_VAR 0 4
58114: PPUSH
58115: CALL_OW 488
58119: IFFALSE 58142
// begin result := [ x , y ] ;
58121: LD_ADDR_VAR 0 1
58125: PUSH
58126: LD_VAR 0 3
58130: PUSH
58131: LD_VAR 0 4
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: ST_TO_ADDR
// break ;
58140: GO 58144
// end ; end ;
58142: GO 57944
58144: POP
58145: POP
// if result then
58146: LD_VAR 0 1
58150: IFFALSE 58210
// begin ToLua ( playSibBomb() ) ;
58152: LD_STRING playSibBomb()
58154: PPUSH
58155: CALL_OW 559
// wait ( 0 0$14 ) ;
58159: LD_INT 490
58161: PPUSH
58162: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58166: LD_VAR 0 1
58170: PUSH
58171: LD_INT 1
58173: ARRAY
58174: PPUSH
58175: LD_VAR 0 1
58179: PUSH
58180: LD_INT 2
58182: ARRAY
58183: PPUSH
58184: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58188: LD_VAR 0 1
58192: PUSH
58193: LD_INT 1
58195: ARRAY
58196: PPUSH
58197: LD_VAR 0 1
58201: PUSH
58202: LD_INT 2
58204: ARRAY
58205: PPUSH
58206: CALL_OW 429
// end ; end ;
58210: LD_VAR 0 1
58214: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58215: LD_EXP 30
58219: IFFALSE 58227
58221: PUSH
58222: LD_EXP 52
58226: AND
58227: IFFALSE 58239
58229: GO 58231
58231: DISABLE
// YouLost (  ) ;
58232: LD_STRING 
58234: PPUSH
58235: CALL_OW 104
58239: END
// every 0 0$1 trigger StreamModeActive and sFog do
58240: LD_EXP 30
58244: IFFALSE 58252
58246: PUSH
58247: LD_EXP 51
58251: AND
58252: IFFALSE 58266
58254: GO 58256
58256: DISABLE
// FogOff ( your_side ) ;
58257: LD_OWVAR 2
58261: PPUSH
58262: CALL_OW 344
58266: END
// every 0 0$1 trigger StreamModeActive and sSun do
58267: LD_EXP 30
58271: IFFALSE 58279
58273: PUSH
58274: LD_EXP 53
58278: AND
58279: IFFALSE 58307
58281: GO 58283
58283: DISABLE
// begin solar_recharge_percent := 0 ;
58284: LD_ADDR_OWVAR 79
58288: PUSH
58289: LD_INT 0
58291: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58292: LD_INT 10500
58294: PPUSH
58295: CALL_OW 67
// solar_recharge_percent := 100 ;
58299: LD_ADDR_OWVAR 79
58303: PUSH
58304: LD_INT 100
58306: ST_TO_ADDR
// end ;
58307: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58308: LD_EXP 30
58312: IFFALSE 58320
58314: PUSH
58315: LD_EXP 54
58319: AND
58320: IFFALSE 58559
58322: GO 58324
58324: DISABLE
58325: LD_INT 0
58327: PPUSH
58328: PPUSH
58329: PPUSH
// begin tmp := [ ] ;
58330: LD_ADDR_VAR 0 3
58334: PUSH
58335: EMPTY
58336: ST_TO_ADDR
// for i := 1 to 6 do
58337: LD_ADDR_VAR 0 1
58341: PUSH
58342: DOUBLE
58343: LD_INT 1
58345: DEC
58346: ST_TO_ADDR
58347: LD_INT 6
58349: PUSH
58350: FOR_TO
58351: IFFALSE 58456
// begin uc_nation := nation_nature ;
58353: LD_ADDR_OWVAR 21
58357: PUSH
58358: LD_INT 0
58360: ST_TO_ADDR
// uc_side := 0 ;
58361: LD_ADDR_OWVAR 20
58365: PUSH
58366: LD_INT 0
58368: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58369: LD_ADDR_OWVAR 29
58373: PUSH
58374: LD_INT 12
58376: PUSH
58377: LD_INT 12
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// hc_agressivity := 20 ;
58384: LD_ADDR_OWVAR 35
58388: PUSH
58389: LD_INT 20
58391: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58392: LD_ADDR_OWVAR 28
58396: PUSH
58397: LD_INT 17
58399: ST_TO_ADDR
// hc_gallery :=  ;
58400: LD_ADDR_OWVAR 33
58404: PUSH
58405: LD_STRING 
58407: ST_TO_ADDR
// hc_name :=  ;
58408: LD_ADDR_OWVAR 26
58412: PUSH
58413: LD_STRING 
58415: ST_TO_ADDR
// un := CreateHuman ;
58416: LD_ADDR_VAR 0 2
58420: PUSH
58421: CALL_OW 44
58425: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58426: LD_VAR 0 2
58430: PPUSH
58431: LD_INT 1
58433: PPUSH
58434: CALL_OW 51
// tmp := tmp ^ un ;
58438: LD_ADDR_VAR 0 3
58442: PUSH
58443: LD_VAR 0 3
58447: PUSH
58448: LD_VAR 0 2
58452: ADD
58453: ST_TO_ADDR
// end ;
58454: GO 58350
58456: POP
58457: POP
// repeat wait ( 0 0$1 ) ;
58458: LD_INT 35
58460: PPUSH
58461: CALL_OW 67
// for un in tmp do
58465: LD_ADDR_VAR 0 2
58469: PUSH
58470: LD_VAR 0 3
58474: PUSH
58475: FOR_IN
58476: IFFALSE 58550
// begin if IsDead ( un ) then
58478: LD_VAR 0 2
58482: PPUSH
58483: CALL_OW 301
58487: IFFALSE 58507
// begin tmp := tmp diff un ;
58489: LD_ADDR_VAR 0 3
58493: PUSH
58494: LD_VAR 0 3
58498: PUSH
58499: LD_VAR 0 2
58503: DIFF
58504: ST_TO_ADDR
// continue ;
58505: GO 58475
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58507: LD_VAR 0 2
58511: PPUSH
58512: LD_INT 3
58514: PUSH
58515: LD_INT 22
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PPUSH
58529: CALL_OW 69
58533: PPUSH
58534: LD_VAR 0 2
58538: PPUSH
58539: CALL_OW 74
58543: PPUSH
58544: CALL_OW 115
// end ;
58548: GO 58475
58550: POP
58551: POP
// until not tmp ;
58552: LD_VAR 0 3
58556: NOT
58557: IFFALSE 58458
// end ;
58559: PPOPN 3
58561: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58562: LD_EXP 30
58566: IFFALSE 58574
58568: PUSH
58569: LD_EXP 55
58573: AND
58574: IFFALSE 58628
58576: GO 58578
58578: DISABLE
// begin ToLua ( displayTroll(); ) ;
58579: LD_STRING displayTroll();
58581: PPUSH
58582: CALL_OW 559
// wait ( 3 3$00 ) ;
58586: LD_INT 6300
58588: PPUSH
58589: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58593: LD_STRING hideTroll();
58595: PPUSH
58596: CALL_OW 559
// wait ( 1 1$00 ) ;
58600: LD_INT 2100
58602: PPUSH
58603: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58607: LD_STRING displayTroll();
58609: PPUSH
58610: CALL_OW 559
// wait ( 1 1$00 ) ;
58614: LD_INT 2100
58616: PPUSH
58617: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58621: LD_STRING hideTroll();
58623: PPUSH
58624: CALL_OW 559
// end ;
58628: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58629: LD_EXP 30
58633: IFFALSE 58641
58635: PUSH
58636: LD_EXP 56
58640: AND
58641: IFFALSE 58704
58643: GO 58645
58645: DISABLE
58646: LD_INT 0
58648: PPUSH
// begin p := 0 ;
58649: LD_ADDR_VAR 0 1
58653: PUSH
58654: LD_INT 0
58656: ST_TO_ADDR
// repeat game_speed := 1 ;
58657: LD_ADDR_OWVAR 65
58661: PUSH
58662: LD_INT 1
58664: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58665: LD_INT 35
58667: PPUSH
58668: CALL_OW 67
// p := p + 1 ;
58672: LD_ADDR_VAR 0 1
58676: PUSH
58677: LD_VAR 0 1
58681: PUSH
58682: LD_INT 1
58684: PLUS
58685: ST_TO_ADDR
// until p >= 60 ;
58686: LD_VAR 0 1
58690: PUSH
58691: LD_INT 60
58693: GREATEREQUAL
58694: IFFALSE 58657
// game_speed := 4 ;
58696: LD_ADDR_OWVAR 65
58700: PUSH
58701: LD_INT 4
58703: ST_TO_ADDR
// end ;
58704: PPOPN 1
58706: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58707: LD_EXP 30
58711: IFFALSE 58719
58713: PUSH
58714: LD_EXP 57
58718: AND
58719: IFFALSE 58865
58721: GO 58723
58723: DISABLE
58724: LD_INT 0
58726: PPUSH
58727: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58728: LD_ADDR_VAR 0 1
58732: PUSH
58733: LD_INT 22
58735: PUSH
58736: LD_OWVAR 2
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: LD_INT 30
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 30
58760: PUSH
58761: LD_INT 1
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PPUSH
58777: CALL_OW 69
58781: ST_TO_ADDR
// if not depot then
58782: LD_VAR 0 1
58786: NOT
58787: IFFALSE 58791
// exit ;
58789: GO 58865
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58791: LD_ADDR_VAR 0 2
58795: PUSH
58796: LD_VAR 0 1
58800: PUSH
58801: LD_INT 1
58803: PPUSH
58804: LD_VAR 0 1
58808: PPUSH
58809: CALL_OW 12
58813: ARRAY
58814: PPUSH
58815: CALL_OW 274
58819: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58820: LD_VAR 0 2
58824: PPUSH
58825: LD_INT 1
58827: PPUSH
58828: LD_INT 0
58830: PPUSH
58831: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58835: LD_VAR 0 2
58839: PPUSH
58840: LD_INT 2
58842: PPUSH
58843: LD_INT 0
58845: PPUSH
58846: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58850: LD_VAR 0 2
58854: PPUSH
58855: LD_INT 3
58857: PPUSH
58858: LD_INT 0
58860: PPUSH
58861: CALL_OW 277
// end ;
58865: PPOPN 2
58867: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58868: LD_EXP 30
58872: IFFALSE 58880
58874: PUSH
58875: LD_EXP 58
58879: AND
58880: IFFALSE 58977
58882: GO 58884
58884: DISABLE
58885: LD_INT 0
58887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58888: LD_ADDR_VAR 0 1
58892: PUSH
58893: LD_INT 22
58895: PUSH
58896: LD_OWVAR 2
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 21
58907: PUSH
58908: LD_INT 1
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: PUSH
58918: LD_INT 23
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: PPUSH
58937: CALL_OW 69
58941: ST_TO_ADDR
// if not tmp then
58942: LD_VAR 0 1
58946: NOT
58947: IFFALSE 58951
// exit ;
58949: GO 58977
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58951: LD_VAR 0 1
58955: PUSH
58956: LD_INT 1
58958: PPUSH
58959: LD_VAR 0 1
58963: PPUSH
58964: CALL_OW 12
58968: ARRAY
58969: PPUSH
58970: LD_INT 200
58972: PPUSH
58973: CALL_OW 234
// end ;
58977: PPOPN 1
58979: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58980: LD_EXP 30
58984: IFFALSE 58992
58986: PUSH
58987: LD_EXP 59
58991: AND
58992: IFFALSE 59071
58994: GO 58996
58996: DISABLE
58997: LD_INT 0
58999: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59000: LD_ADDR_VAR 0 1
59004: PUSH
59005: LD_INT 22
59007: PUSH
59008: LD_OWVAR 2
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 21
59019: PUSH
59020: LD_INT 2
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PPUSH
59031: CALL_OW 69
59035: ST_TO_ADDR
// if not tmp then
59036: LD_VAR 0 1
59040: NOT
59041: IFFALSE 59045
// exit ;
59043: GO 59071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59045: LD_VAR 0 1
59049: PUSH
59050: LD_INT 1
59052: PPUSH
59053: LD_VAR 0 1
59057: PPUSH
59058: CALL_OW 12
59062: ARRAY
59063: PPUSH
59064: LD_INT 60
59066: PPUSH
59067: CALL_OW 234
// end ;
59071: PPOPN 1
59073: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59074: LD_EXP 30
59078: IFFALSE 59086
59080: PUSH
59081: LD_EXP 60
59085: AND
59086: IFFALSE 59185
59088: GO 59090
59090: DISABLE
59091: LD_INT 0
59093: PPUSH
59094: PPUSH
// begin enable ;
59095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59096: LD_ADDR_VAR 0 1
59100: PUSH
59101: LD_INT 22
59103: PUSH
59104: LD_OWVAR 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 61
59115: PUSH
59116: EMPTY
59117: LIST
59118: PUSH
59119: LD_INT 33
59121: PUSH
59122: LD_INT 2
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: PPUSH
59134: CALL_OW 69
59138: ST_TO_ADDR
// if not tmp then
59139: LD_VAR 0 1
59143: NOT
59144: IFFALSE 59148
// exit ;
59146: GO 59185
// for i in tmp do
59148: LD_ADDR_VAR 0 2
59152: PUSH
59153: LD_VAR 0 1
59157: PUSH
59158: FOR_IN
59159: IFFALSE 59183
// if IsControledBy ( i ) then
59161: LD_VAR 0 2
59165: PPUSH
59166: CALL_OW 312
59170: IFFALSE 59181
// ComUnlink ( i ) ;
59172: LD_VAR 0 2
59176: PPUSH
59177: CALL_OW 136
59181: GO 59158
59183: POP
59184: POP
// end ;
59185: PPOPN 2
59187: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59188: LD_EXP 30
59192: IFFALSE 59200
59194: PUSH
59195: LD_EXP 61
59199: AND
59200: IFFALSE 59340
59202: GO 59204
59204: DISABLE
59205: LD_INT 0
59207: PPUSH
59208: PPUSH
// begin ToLua ( displayPowell(); ) ;
59209: LD_STRING displayPowell();
59211: PPUSH
59212: CALL_OW 559
// uc_side := 0 ;
59216: LD_ADDR_OWVAR 20
59220: PUSH
59221: LD_INT 0
59223: ST_TO_ADDR
// uc_nation := 2 ;
59224: LD_ADDR_OWVAR 21
59228: PUSH
59229: LD_INT 2
59231: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59232: LD_ADDR_OWVAR 37
59236: PUSH
59237: LD_INT 14
59239: ST_TO_ADDR
// vc_engine := engine_siberite ;
59240: LD_ADDR_OWVAR 39
59244: PUSH
59245: LD_INT 3
59247: ST_TO_ADDR
// vc_control := control_apeman ;
59248: LD_ADDR_OWVAR 38
59252: PUSH
59253: LD_INT 5
59255: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59256: LD_ADDR_OWVAR 40
59260: PUSH
59261: LD_INT 29
59263: ST_TO_ADDR
// un := CreateVehicle ;
59264: LD_ADDR_VAR 0 2
59268: PUSH
59269: CALL_OW 45
59273: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59274: LD_VAR 0 2
59278: PPUSH
59279: LD_INT 1
59281: PPUSH
59282: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59286: LD_INT 35
59288: PPUSH
59289: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59293: LD_VAR 0 2
59297: PPUSH
59298: LD_INT 22
59300: PUSH
59301: LD_OWVAR 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PPUSH
59310: CALL_OW 69
59314: PPUSH
59315: LD_VAR 0 2
59319: PPUSH
59320: CALL_OW 74
59324: PPUSH
59325: CALL_OW 115
// until IsDead ( un ) ;
59329: LD_VAR 0 2
59333: PPUSH
59334: CALL_OW 301
59338: IFFALSE 59286
// end ;
59340: PPOPN 2
59342: END
// every 0 0$1 trigger StreamModeActive and sStu do
59343: LD_EXP 30
59347: IFFALSE 59355
59349: PUSH
59350: LD_EXP 69
59354: AND
59355: IFFALSE 59371
59357: GO 59359
59359: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59360: LD_STRING displayStucuk();
59362: PPUSH
59363: CALL_OW 559
// ResetFog ;
59367: CALL_OW 335
// end ;
59371: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59372: LD_EXP 30
59376: IFFALSE 59384
59378: PUSH
59379: LD_EXP 62
59383: AND
59384: IFFALSE 59525
59386: GO 59388
59388: DISABLE
59389: LD_INT 0
59391: PPUSH
59392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59393: LD_ADDR_VAR 0 2
59397: PUSH
59398: LD_INT 22
59400: PUSH
59401: LD_OWVAR 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 21
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PPUSH
59424: CALL_OW 69
59428: ST_TO_ADDR
// if not tmp then
59429: LD_VAR 0 2
59433: NOT
59434: IFFALSE 59438
// exit ;
59436: GO 59525
// un := tmp [ rand ( 1 , tmp ) ] ;
59438: LD_ADDR_VAR 0 1
59442: PUSH
59443: LD_VAR 0 2
59447: PUSH
59448: LD_INT 1
59450: PPUSH
59451: LD_VAR 0 2
59455: PPUSH
59456: CALL_OW 12
59460: ARRAY
59461: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59462: LD_VAR 0 1
59466: PPUSH
59467: LD_INT 0
59469: PPUSH
59470: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59474: LD_VAR 0 1
59478: PPUSH
59479: LD_OWVAR 3
59483: PUSH
59484: LD_VAR 0 1
59488: DIFF
59489: PPUSH
59490: LD_VAR 0 1
59494: PPUSH
59495: CALL_OW 74
59499: PPUSH
59500: CALL_OW 115
// wait ( 0 0$20 ) ;
59504: LD_INT 700
59506: PPUSH
59507: CALL_OW 67
// SetSide ( un , your_side ) ;
59511: LD_VAR 0 1
59515: PPUSH
59516: LD_OWVAR 2
59520: PPUSH
59521: CALL_OW 235
// end ;
59525: PPOPN 2
59527: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59528: LD_EXP 30
59532: IFFALSE 59540
59534: PUSH
59535: LD_EXP 63
59539: AND
59540: IFFALSE 59646
59542: GO 59544
59544: DISABLE
59545: LD_INT 0
59547: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59548: LD_ADDR_VAR 0 1
59552: PUSH
59553: LD_INT 22
59555: PUSH
59556: LD_OWVAR 2
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 30
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 30
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: LIST
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PPUSH
59597: CALL_OW 69
59601: ST_TO_ADDR
// if not depot then
59602: LD_VAR 0 1
59606: NOT
59607: IFFALSE 59611
// exit ;
59609: GO 59646
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59611: LD_VAR 0 1
59615: PUSH
59616: LD_INT 1
59618: ARRAY
59619: PPUSH
59620: CALL_OW 250
59624: PPUSH
59625: LD_VAR 0 1
59629: PUSH
59630: LD_INT 1
59632: ARRAY
59633: PPUSH
59634: CALL_OW 251
59638: PPUSH
59639: LD_INT 70
59641: PPUSH
59642: CALL_OW 495
// end ;
59646: PPOPN 1
59648: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59649: LD_EXP 30
59653: IFFALSE 59661
59655: PUSH
59656: LD_EXP 64
59660: AND
59661: IFFALSE 59872
59663: GO 59665
59665: DISABLE
59666: LD_INT 0
59668: PPUSH
59669: PPUSH
59670: PPUSH
59671: PPUSH
59672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59673: LD_ADDR_VAR 0 5
59677: PUSH
59678: LD_INT 22
59680: PUSH
59681: LD_OWVAR 2
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 21
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PPUSH
59704: CALL_OW 69
59708: ST_TO_ADDR
// if not tmp then
59709: LD_VAR 0 5
59713: NOT
59714: IFFALSE 59718
// exit ;
59716: GO 59872
// for i in tmp do
59718: LD_ADDR_VAR 0 1
59722: PUSH
59723: LD_VAR 0 5
59727: PUSH
59728: FOR_IN
59729: IFFALSE 59870
// begin d := rand ( 0 , 5 ) ;
59731: LD_ADDR_VAR 0 4
59735: PUSH
59736: LD_INT 0
59738: PPUSH
59739: LD_INT 5
59741: PPUSH
59742: CALL_OW 12
59746: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59747: LD_ADDR_VAR 0 2
59751: PUSH
59752: LD_VAR 0 1
59756: PPUSH
59757: CALL_OW 250
59761: PPUSH
59762: LD_VAR 0 4
59766: PPUSH
59767: LD_INT 3
59769: PPUSH
59770: LD_INT 12
59772: PPUSH
59773: CALL_OW 12
59777: PPUSH
59778: CALL_OW 272
59782: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59783: LD_ADDR_VAR 0 3
59787: PUSH
59788: LD_VAR 0 1
59792: PPUSH
59793: CALL_OW 251
59797: PPUSH
59798: LD_VAR 0 4
59802: PPUSH
59803: LD_INT 3
59805: PPUSH
59806: LD_INT 12
59808: PPUSH
59809: CALL_OW 12
59813: PPUSH
59814: CALL_OW 273
59818: ST_TO_ADDR
// if ValidHex ( x , y ) then
59819: LD_VAR 0 2
59823: PPUSH
59824: LD_VAR 0 3
59828: PPUSH
59829: CALL_OW 488
59833: IFFALSE 59868
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59835: LD_VAR 0 1
59839: PPUSH
59840: LD_VAR 0 2
59844: PPUSH
59845: LD_VAR 0 3
59849: PPUSH
59850: LD_INT 3
59852: PPUSH
59853: LD_INT 6
59855: PPUSH
59856: CALL_OW 12
59860: PPUSH
59861: LD_INT 1
59863: PPUSH
59864: CALL_OW 483
// end ;
59868: GO 59728
59870: POP
59871: POP
// end ;
59872: PPOPN 5
59874: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59875: LD_EXP 30
59879: IFFALSE 59887
59881: PUSH
59882: LD_EXP 65
59886: AND
59887: IFFALSE 59981
59889: GO 59891
59891: DISABLE
59892: LD_INT 0
59894: PPUSH
59895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59896: LD_ADDR_VAR 0 2
59900: PUSH
59901: LD_INT 22
59903: PUSH
59904: LD_OWVAR 2
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 32
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 21
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: LIST
59937: PPUSH
59938: CALL_OW 69
59942: ST_TO_ADDR
// if not tmp then
59943: LD_VAR 0 2
59947: NOT
59948: IFFALSE 59952
// exit ;
59950: GO 59981
// for i in tmp do
59952: LD_ADDR_VAR 0 1
59956: PUSH
59957: LD_VAR 0 2
59961: PUSH
59962: FOR_IN
59963: IFFALSE 59979
// SetFuel ( i , 0 ) ;
59965: LD_VAR 0 1
59969: PPUSH
59970: LD_INT 0
59972: PPUSH
59973: CALL_OW 240
59977: GO 59962
59979: POP
59980: POP
// end ;
59981: PPOPN 2
59983: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59984: LD_EXP 30
59988: IFFALSE 59996
59990: PUSH
59991: LD_EXP 66
59995: AND
59996: IFFALSE 60062
59998: GO 60000
60000: DISABLE
60001: LD_INT 0
60003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60004: LD_ADDR_VAR 0 1
60008: PUSH
60009: LD_INT 22
60011: PUSH
60012: LD_OWVAR 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 30
60023: PUSH
60024: LD_INT 29
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PPUSH
60035: CALL_OW 69
60039: ST_TO_ADDR
// if not tmp then
60040: LD_VAR 0 1
60044: NOT
60045: IFFALSE 60049
// exit ;
60047: GO 60062
// DestroyUnit ( tmp [ 1 ] ) ;
60049: LD_VAR 0 1
60053: PUSH
60054: LD_INT 1
60056: ARRAY
60057: PPUSH
60058: CALL_OW 65
// end ;
60062: PPOPN 1
60064: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60065: LD_EXP 30
60069: IFFALSE 60077
60071: PUSH
60072: LD_EXP 68
60076: AND
60077: IFFALSE 60206
60079: GO 60081
60081: DISABLE
60082: LD_INT 0
60084: PPUSH
// begin uc_side := 0 ;
60085: LD_ADDR_OWVAR 20
60089: PUSH
60090: LD_INT 0
60092: ST_TO_ADDR
// uc_nation := nation_arabian ;
60093: LD_ADDR_OWVAR 21
60097: PUSH
60098: LD_INT 2
60100: ST_TO_ADDR
// hc_gallery :=  ;
60101: LD_ADDR_OWVAR 33
60105: PUSH
60106: LD_STRING 
60108: ST_TO_ADDR
// hc_name :=  ;
60109: LD_ADDR_OWVAR 26
60113: PUSH
60114: LD_STRING 
60116: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60117: LD_INT 1
60119: PPUSH
60120: LD_INT 11
60122: PPUSH
60123: LD_INT 10
60125: PPUSH
60126: CALL_OW 380
// un := CreateHuman ;
60130: LD_ADDR_VAR 0 1
60134: PUSH
60135: CALL_OW 44
60139: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60140: LD_VAR 0 1
60144: PPUSH
60145: LD_INT 1
60147: PPUSH
60148: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60152: LD_INT 35
60154: PPUSH
60155: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60159: LD_VAR 0 1
60163: PPUSH
60164: LD_INT 22
60166: PUSH
60167: LD_OWVAR 2
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PPUSH
60176: CALL_OW 69
60180: PPUSH
60181: LD_VAR 0 1
60185: PPUSH
60186: CALL_OW 74
60190: PPUSH
60191: CALL_OW 115
// until IsDead ( un ) ;
60195: LD_VAR 0 1
60199: PPUSH
60200: CALL_OW 301
60204: IFFALSE 60152
// end ;
60206: PPOPN 1
60208: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60209: LD_EXP 30
60213: IFFALSE 60221
60215: PUSH
60216: LD_EXP 70
60220: AND
60221: IFFALSE 60233
60223: GO 60225
60225: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60226: LD_STRING earthquake(getX(game), 0, 32)
60228: PPUSH
60229: CALL_OW 559
60233: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60234: LD_EXP 30
60238: IFFALSE 60246
60240: PUSH
60241: LD_EXP 71
60245: AND
60246: IFFALSE 60337
60248: GO 60250
60250: DISABLE
60251: LD_INT 0
60253: PPUSH
// begin enable ;
60254: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60255: LD_ADDR_VAR 0 1
60259: PUSH
60260: LD_INT 22
60262: PUSH
60263: LD_OWVAR 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 21
60274: PUSH
60275: LD_INT 2
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 33
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: PPUSH
60297: CALL_OW 69
60301: ST_TO_ADDR
// if not tmp then
60302: LD_VAR 0 1
60306: NOT
60307: IFFALSE 60311
// exit ;
60309: GO 60337
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60311: LD_VAR 0 1
60315: PUSH
60316: LD_INT 1
60318: PPUSH
60319: LD_VAR 0 1
60323: PPUSH
60324: CALL_OW 12
60328: ARRAY
60329: PPUSH
60330: LD_INT 1
60332: PPUSH
60333: CALL_OW 234
// end ;
60337: PPOPN 1
60339: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60340: LD_EXP 30
60344: IFFALSE 60352
60346: PUSH
60347: LD_EXP 72
60351: AND
60352: IFFALSE 60493
60354: GO 60356
60356: DISABLE
60357: LD_INT 0
60359: PPUSH
60360: PPUSH
60361: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60362: LD_ADDR_VAR 0 3
60366: PUSH
60367: LD_INT 22
60369: PUSH
60370: LD_OWVAR 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 25
60381: PUSH
60382: LD_INT 1
60384: PUSH
60385: EMPTY
60386: LIST
60387: LIST
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PPUSH
60393: CALL_OW 69
60397: ST_TO_ADDR
// if not tmp then
60398: LD_VAR 0 3
60402: NOT
60403: IFFALSE 60407
// exit ;
60405: GO 60493
// un := tmp [ rand ( 1 , tmp ) ] ;
60407: LD_ADDR_VAR 0 2
60411: PUSH
60412: LD_VAR 0 3
60416: PUSH
60417: LD_INT 1
60419: PPUSH
60420: LD_VAR 0 3
60424: PPUSH
60425: CALL_OW 12
60429: ARRAY
60430: ST_TO_ADDR
// if Crawls ( un ) then
60431: LD_VAR 0 2
60435: PPUSH
60436: CALL_OW 318
60440: IFFALSE 60451
// ComWalk ( un ) ;
60442: LD_VAR 0 2
60446: PPUSH
60447: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60451: LD_VAR 0 2
60455: PPUSH
60456: LD_INT 9
60458: PPUSH
60459: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60463: LD_INT 28
60465: PPUSH
60466: LD_OWVAR 2
60470: PPUSH
60471: LD_INT 2
60473: PPUSH
60474: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60478: LD_INT 29
60480: PPUSH
60481: LD_OWVAR 2
60485: PPUSH
60486: LD_INT 2
60488: PPUSH
60489: CALL_OW 322
// end ;
60493: PPOPN 3
60495: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60496: LD_EXP 30
60500: IFFALSE 60508
60502: PUSH
60503: LD_EXP 73
60507: AND
60508: IFFALSE 60619
60510: GO 60512
60512: DISABLE
60513: LD_INT 0
60515: PPUSH
60516: PPUSH
60517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60518: LD_ADDR_VAR 0 3
60522: PUSH
60523: LD_INT 22
60525: PUSH
60526: LD_OWVAR 2
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 25
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PPUSH
60549: CALL_OW 69
60553: ST_TO_ADDR
// if not tmp then
60554: LD_VAR 0 3
60558: NOT
60559: IFFALSE 60563
// exit ;
60561: GO 60619
// un := tmp [ rand ( 1 , tmp ) ] ;
60563: LD_ADDR_VAR 0 2
60567: PUSH
60568: LD_VAR 0 3
60572: PUSH
60573: LD_INT 1
60575: PPUSH
60576: LD_VAR 0 3
60580: PPUSH
60581: CALL_OW 12
60585: ARRAY
60586: ST_TO_ADDR
// if Crawls ( un ) then
60587: LD_VAR 0 2
60591: PPUSH
60592: CALL_OW 318
60596: IFFALSE 60607
// ComWalk ( un ) ;
60598: LD_VAR 0 2
60602: PPUSH
60603: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60607: LD_VAR 0 2
60611: PPUSH
60612: LD_INT 8
60614: PPUSH
60615: CALL_OW 336
// end ;
60619: PPOPN 3
60621: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60622: LD_EXP 30
60626: IFFALSE 60634
60628: PUSH
60629: LD_EXP 74
60633: AND
60634: IFFALSE 60778
60636: GO 60638
60638: DISABLE
60639: LD_INT 0
60641: PPUSH
60642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60643: LD_ADDR_VAR 0 2
60647: PUSH
60648: LD_INT 22
60650: PUSH
60651: LD_OWVAR 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 21
60662: PUSH
60663: LD_INT 2
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 2
60672: PUSH
60673: LD_INT 34
60675: PUSH
60676: LD_INT 12
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 34
60685: PUSH
60686: LD_INT 51
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 34
60695: PUSH
60696: LD_INT 32
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: LIST
60713: PPUSH
60714: CALL_OW 69
60718: ST_TO_ADDR
// if not tmp then
60719: LD_VAR 0 2
60723: NOT
60724: IFFALSE 60728
// exit ;
60726: GO 60778
// for i in tmp do
60728: LD_ADDR_VAR 0 1
60732: PUSH
60733: LD_VAR 0 2
60737: PUSH
60738: FOR_IN
60739: IFFALSE 60776
// if GetCargo ( i , mat_artifact ) = 0 then
60741: LD_VAR 0 1
60745: PPUSH
60746: LD_INT 4
60748: PPUSH
60749: CALL_OW 289
60753: PUSH
60754: LD_INT 0
60756: EQUAL
60757: IFFALSE 60774
// SetCargo ( i , mat_siberit , 100 ) ;
60759: LD_VAR 0 1
60763: PPUSH
60764: LD_INT 3
60766: PPUSH
60767: LD_INT 100
60769: PPUSH
60770: CALL_OW 290
60774: GO 60738
60776: POP
60777: POP
// end ;
60778: PPOPN 2
60780: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60781: LD_EXP 30
60785: IFFALSE 60793
60787: PUSH
60788: LD_EXP 75
60792: AND
60793: IFFALSE 60976
60795: GO 60797
60797: DISABLE
60798: LD_INT 0
60800: PPUSH
60801: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60802: LD_ADDR_VAR 0 2
60806: PUSH
60807: LD_INT 22
60809: PUSH
60810: LD_OWVAR 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PPUSH
60819: CALL_OW 69
60823: ST_TO_ADDR
// if not tmp then
60824: LD_VAR 0 2
60828: NOT
60829: IFFALSE 60833
// exit ;
60831: GO 60976
// for i := 1 to 2 do
60833: LD_ADDR_VAR 0 1
60837: PUSH
60838: DOUBLE
60839: LD_INT 1
60841: DEC
60842: ST_TO_ADDR
60843: LD_INT 2
60845: PUSH
60846: FOR_TO
60847: IFFALSE 60974
// begin uc_side := your_side ;
60849: LD_ADDR_OWVAR 20
60853: PUSH
60854: LD_OWVAR 2
60858: ST_TO_ADDR
// uc_nation := nation_american ;
60859: LD_ADDR_OWVAR 21
60863: PUSH
60864: LD_INT 1
60866: ST_TO_ADDR
// vc_chassis := us_morphling ;
60867: LD_ADDR_OWVAR 37
60871: PUSH
60872: LD_INT 5
60874: ST_TO_ADDR
// vc_engine := engine_siberite ;
60875: LD_ADDR_OWVAR 39
60879: PUSH
60880: LD_INT 3
60882: ST_TO_ADDR
// vc_control := control_computer ;
60883: LD_ADDR_OWVAR 38
60887: PUSH
60888: LD_INT 3
60890: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60891: LD_ADDR_OWVAR 40
60895: PUSH
60896: LD_INT 10
60898: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60899: LD_VAR 0 2
60903: PUSH
60904: LD_INT 1
60906: ARRAY
60907: PPUSH
60908: CALL_OW 310
60912: NOT
60913: IFFALSE 60960
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60915: CALL_OW 45
60919: PPUSH
60920: LD_VAR 0 2
60924: PUSH
60925: LD_INT 1
60927: ARRAY
60928: PPUSH
60929: CALL_OW 250
60933: PPUSH
60934: LD_VAR 0 2
60938: PUSH
60939: LD_INT 1
60941: ARRAY
60942: PPUSH
60943: CALL_OW 251
60947: PPUSH
60948: LD_INT 12
60950: PPUSH
60951: LD_INT 1
60953: PPUSH
60954: CALL_OW 50
60958: GO 60972
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60960: CALL_OW 45
60964: PPUSH
60965: LD_INT 1
60967: PPUSH
60968: CALL_OW 51
// end ;
60972: GO 60846
60974: POP
60975: POP
// end ;
60976: PPOPN 2
60978: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60979: LD_EXP 30
60983: IFFALSE 60991
60985: PUSH
60986: LD_EXP 76
60990: AND
60991: IFFALSE 61213
60993: GO 60995
60995: DISABLE
60996: LD_INT 0
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61004: LD_ADDR_VAR 0 6
61008: PUSH
61009: LD_INT 22
61011: PUSH
61012: LD_OWVAR 2
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 21
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 23
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: LIST
61052: PPUSH
61053: CALL_OW 69
61057: ST_TO_ADDR
// if not tmp then
61058: LD_VAR 0 6
61062: NOT
61063: IFFALSE 61067
// exit ;
61065: GO 61213
// s1 := rand ( 1 , 4 ) ;
61067: LD_ADDR_VAR 0 2
61071: PUSH
61072: LD_INT 1
61074: PPUSH
61075: LD_INT 4
61077: PPUSH
61078: CALL_OW 12
61082: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61083: LD_ADDR_VAR 0 4
61087: PUSH
61088: LD_VAR 0 6
61092: PUSH
61093: LD_INT 1
61095: ARRAY
61096: PPUSH
61097: LD_VAR 0 2
61101: PPUSH
61102: CALL_OW 259
61106: ST_TO_ADDR
// if s1 = 1 then
61107: LD_VAR 0 2
61111: PUSH
61112: LD_INT 1
61114: EQUAL
61115: IFFALSE 61135
// s2 := rand ( 2 , 4 ) else
61117: LD_ADDR_VAR 0 3
61121: PUSH
61122: LD_INT 2
61124: PPUSH
61125: LD_INT 4
61127: PPUSH
61128: CALL_OW 12
61132: ST_TO_ADDR
61133: GO 61143
// s2 := 1 ;
61135: LD_ADDR_VAR 0 3
61139: PUSH
61140: LD_INT 1
61142: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61143: LD_ADDR_VAR 0 5
61147: PUSH
61148: LD_VAR 0 6
61152: PUSH
61153: LD_INT 1
61155: ARRAY
61156: PPUSH
61157: LD_VAR 0 3
61161: PPUSH
61162: CALL_OW 259
61166: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61167: LD_VAR 0 6
61171: PUSH
61172: LD_INT 1
61174: ARRAY
61175: PPUSH
61176: LD_VAR 0 2
61180: PPUSH
61181: LD_VAR 0 5
61185: PPUSH
61186: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61190: LD_VAR 0 6
61194: PUSH
61195: LD_INT 1
61197: ARRAY
61198: PPUSH
61199: LD_VAR 0 3
61203: PPUSH
61204: LD_VAR 0 4
61208: PPUSH
61209: CALL_OW 237
// end ;
61213: PPOPN 6
61215: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61216: LD_EXP 30
61220: IFFALSE 61228
61222: PUSH
61223: LD_EXP 77
61227: AND
61228: IFFALSE 61307
61230: GO 61232
61232: DISABLE
61233: LD_INT 0
61235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61236: LD_ADDR_VAR 0 1
61240: PUSH
61241: LD_INT 22
61243: PUSH
61244: LD_OWVAR 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 30
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PPUSH
61267: CALL_OW 69
61271: ST_TO_ADDR
// if not tmp then
61272: LD_VAR 0 1
61276: NOT
61277: IFFALSE 61281
// exit ;
61279: GO 61307
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61281: LD_VAR 0 1
61285: PUSH
61286: LD_INT 1
61288: PPUSH
61289: LD_VAR 0 1
61293: PPUSH
61294: CALL_OW 12
61298: ARRAY
61299: PPUSH
61300: LD_INT 1
61302: PPUSH
61303: CALL_OW 234
// end ;
61307: PPOPN 1
61309: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61310: LD_EXP 30
61314: IFFALSE 61322
61316: PUSH
61317: LD_EXP 78
61321: AND
61322: IFFALSE 61434
61324: GO 61326
61326: DISABLE
61327: LD_INT 0
61329: PPUSH
61330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61331: LD_ADDR_VAR 0 2
61335: PUSH
61336: LD_INT 22
61338: PUSH
61339: LD_OWVAR 2
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 2
61350: PUSH
61351: LD_INT 30
61353: PUSH
61354: LD_INT 27
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 30
61363: PUSH
61364: LD_INT 26
61366: PUSH
61367: EMPTY
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 30
61373: PUSH
61374: LD_INT 28
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: PUSH
61387: EMPTY
61388: LIST
61389: LIST
61390: PPUSH
61391: CALL_OW 69
61395: ST_TO_ADDR
// if not tmp then
61396: LD_VAR 0 2
61400: NOT
61401: IFFALSE 61405
// exit ;
61403: GO 61434
// for i in tmp do
61405: LD_ADDR_VAR 0 1
61409: PUSH
61410: LD_VAR 0 2
61414: PUSH
61415: FOR_IN
61416: IFFALSE 61432
// SetLives ( i , 1 ) ;
61418: LD_VAR 0 1
61422: PPUSH
61423: LD_INT 1
61425: PPUSH
61426: CALL_OW 234
61430: GO 61415
61432: POP
61433: POP
// end ;
61434: PPOPN 2
61436: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61437: LD_EXP 30
61441: IFFALSE 61449
61443: PUSH
61444: LD_EXP 79
61448: AND
61449: IFFALSE 61736
61451: GO 61453
61453: DISABLE
61454: LD_INT 0
61456: PPUSH
61457: PPUSH
61458: PPUSH
// begin i := rand ( 1 , 7 ) ;
61459: LD_ADDR_VAR 0 1
61463: PUSH
61464: LD_INT 1
61466: PPUSH
61467: LD_INT 7
61469: PPUSH
61470: CALL_OW 12
61474: ST_TO_ADDR
// case i of 1 :
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 1
61482: DOUBLE
61483: EQUAL
61484: IFTRUE 61488
61486: GO 61498
61488: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61489: LD_STRING earthquake(getX(game), 0, 32)
61491: PPUSH
61492: CALL_OW 559
61496: GO 61736
61498: LD_INT 2
61500: DOUBLE
61501: EQUAL
61502: IFTRUE 61506
61504: GO 61520
61506: POP
// begin ToLua ( displayStucuk(); ) ;
61507: LD_STRING displayStucuk();
61509: PPUSH
61510: CALL_OW 559
// ResetFog ;
61514: CALL_OW 335
// end ; 3 :
61518: GO 61736
61520: LD_INT 3
61522: DOUBLE
61523: EQUAL
61524: IFTRUE 61528
61526: GO 61632
61528: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61529: LD_ADDR_VAR 0 2
61533: PUSH
61534: LD_INT 22
61536: PUSH
61537: LD_OWVAR 2
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 25
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PPUSH
61560: CALL_OW 69
61564: ST_TO_ADDR
// if not tmp then
61565: LD_VAR 0 2
61569: NOT
61570: IFFALSE 61574
// exit ;
61572: GO 61736
// un := tmp [ rand ( 1 , tmp ) ] ;
61574: LD_ADDR_VAR 0 3
61578: PUSH
61579: LD_VAR 0 2
61583: PUSH
61584: LD_INT 1
61586: PPUSH
61587: LD_VAR 0 2
61591: PPUSH
61592: CALL_OW 12
61596: ARRAY
61597: ST_TO_ADDR
// if Crawls ( un ) then
61598: LD_VAR 0 3
61602: PPUSH
61603: CALL_OW 318
61607: IFFALSE 61618
// ComWalk ( un ) ;
61609: LD_VAR 0 3
61613: PPUSH
61614: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61618: LD_VAR 0 3
61622: PPUSH
61623: LD_INT 8
61625: PPUSH
61626: CALL_OW 336
// end ; 4 :
61630: GO 61736
61632: LD_INT 4
61634: DOUBLE
61635: EQUAL
61636: IFTRUE 61640
61638: GO 61714
61640: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61641: LD_ADDR_VAR 0 2
61645: PUSH
61646: LD_INT 22
61648: PUSH
61649: LD_OWVAR 2
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 30
61660: PUSH
61661: LD_INT 29
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PPUSH
61672: CALL_OW 69
61676: ST_TO_ADDR
// if not tmp then
61677: LD_VAR 0 2
61681: NOT
61682: IFFALSE 61686
// exit ;
61684: GO 61736
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61686: LD_VAR 0 2
61690: PUSH
61691: LD_INT 1
61693: ARRAY
61694: PPUSH
61695: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61699: LD_VAR 0 2
61703: PUSH
61704: LD_INT 1
61706: ARRAY
61707: PPUSH
61708: CALL_OW 65
// end ; 5 .. 7 :
61712: GO 61736
61714: LD_INT 5
61716: DOUBLE
61717: GREATEREQUAL
61718: IFFALSE 61726
61720: LD_INT 7
61722: DOUBLE
61723: LESSEQUAL
61724: IFTRUE 61728
61726: GO 61735
61728: POP
// StreamSibBomb ; end ;
61729: CALL 57917 0 0
61733: GO 61736
61735: POP
// end ;
61736: PPOPN 3
61738: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61739: LD_EXP 30
61743: IFFALSE 61751
61745: PUSH
61746: LD_EXP 80
61750: AND
61751: IFFALSE 61907
61753: GO 61755
61755: DISABLE
61756: LD_INT 0
61758: PPUSH
61759: PPUSH
61760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61761: LD_ADDR_VAR 0 2
61765: PUSH
61766: LD_INT 81
61768: PUSH
61769: LD_OWVAR 2
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 21
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 21
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PPUSH
61810: CALL_OW 69
61814: ST_TO_ADDR
// if not tmp then
61815: LD_VAR 0 2
61819: NOT
61820: IFFALSE 61824
// exit ;
61822: GO 61907
// p := 0 ;
61824: LD_ADDR_VAR 0 3
61828: PUSH
61829: LD_INT 0
61831: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61832: LD_INT 35
61834: PPUSH
61835: CALL_OW 67
// p := p + 1 ;
61839: LD_ADDR_VAR 0 3
61843: PUSH
61844: LD_VAR 0 3
61848: PUSH
61849: LD_INT 1
61851: PLUS
61852: ST_TO_ADDR
// for i in tmp do
61853: LD_ADDR_VAR 0 1
61857: PUSH
61858: LD_VAR 0 2
61862: PUSH
61863: FOR_IN
61864: IFFALSE 61895
// if GetLives ( i ) < 1000 then
61866: LD_VAR 0 1
61870: PPUSH
61871: CALL_OW 256
61875: PUSH
61876: LD_INT 1000
61878: LESS
61879: IFFALSE 61893
// SetLives ( i , 1000 ) ;
61881: LD_VAR 0 1
61885: PPUSH
61886: LD_INT 1000
61888: PPUSH
61889: CALL_OW 234
61893: GO 61863
61895: POP
61896: POP
// until p > 20 ;
61897: LD_VAR 0 3
61901: PUSH
61902: LD_INT 20
61904: GREATER
61905: IFFALSE 61832
// end ;
61907: PPOPN 3
61909: END
// every 0 0$1 trigger StreamModeActive and sTime do
61910: LD_EXP 30
61914: IFFALSE 61922
61916: PUSH
61917: LD_EXP 81
61921: AND
61922: IFFALSE 61957
61924: GO 61926
61926: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61927: LD_INT 28
61929: PPUSH
61930: LD_OWVAR 2
61934: PPUSH
61935: LD_INT 2
61937: PPUSH
61938: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61942: LD_INT 30
61944: PPUSH
61945: LD_OWVAR 2
61949: PPUSH
61950: LD_INT 2
61952: PPUSH
61953: CALL_OW 322
// end ;
61957: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61958: LD_EXP 30
61962: IFFALSE 61970
61964: PUSH
61965: LD_EXP 82
61969: AND
61970: IFFALSE 62091
61972: GO 61974
61974: DISABLE
61975: LD_INT 0
61977: PPUSH
61978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61979: LD_ADDR_VAR 0 2
61983: PUSH
61984: LD_INT 22
61986: PUSH
61987: LD_OWVAR 2
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 21
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 3
62008: PUSH
62009: LD_INT 23
62011: PUSH
62012: LD_INT 0
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: LIST
62027: PPUSH
62028: CALL_OW 69
62032: ST_TO_ADDR
// if not tmp then
62033: LD_VAR 0 2
62037: NOT
62038: IFFALSE 62042
// exit ;
62040: GO 62091
// for i in tmp do
62042: LD_ADDR_VAR 0 1
62046: PUSH
62047: LD_VAR 0 2
62051: PUSH
62052: FOR_IN
62053: IFFALSE 62089
// begin if Crawls ( i ) then
62055: LD_VAR 0 1
62059: PPUSH
62060: CALL_OW 318
62064: IFFALSE 62075
// ComWalk ( i ) ;
62066: LD_VAR 0 1
62070: PPUSH
62071: CALL_OW 138
// SetClass ( i , 2 ) ;
62075: LD_VAR 0 1
62079: PPUSH
62080: LD_INT 2
62082: PPUSH
62083: CALL_OW 336
// end ;
62087: GO 62052
62089: POP
62090: POP
// end ;
62091: PPOPN 2
62093: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62094: LD_EXP 30
62098: IFFALSE 62106
62100: PUSH
62101: LD_EXP 83
62105: AND
62106: IFFALSE 62396
62108: GO 62110
62110: DISABLE
62111: LD_INT 0
62113: PPUSH
62114: PPUSH
62115: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62116: LD_OWVAR 2
62120: PPUSH
62121: LD_INT 9
62123: PPUSH
62124: LD_INT 1
62126: PPUSH
62127: LD_INT 1
62129: PPUSH
62130: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62134: LD_INT 9
62136: PPUSH
62137: LD_OWVAR 2
62141: PPUSH
62142: CALL_OW 343
// uc_side := 9 ;
62146: LD_ADDR_OWVAR 20
62150: PUSH
62151: LD_INT 9
62153: ST_TO_ADDR
// uc_nation := 2 ;
62154: LD_ADDR_OWVAR 21
62158: PUSH
62159: LD_INT 2
62161: ST_TO_ADDR
// hc_name := Dark Warrior ;
62162: LD_ADDR_OWVAR 26
62166: PUSH
62167: LD_STRING Dark Warrior
62169: ST_TO_ADDR
// hc_gallery :=  ;
62170: LD_ADDR_OWVAR 33
62174: PUSH
62175: LD_STRING 
62177: ST_TO_ADDR
// hc_noskilllimit := true ;
62178: LD_ADDR_OWVAR 76
62182: PUSH
62183: LD_INT 1
62185: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62186: LD_ADDR_OWVAR 31
62190: PUSH
62191: LD_INT 30
62193: PUSH
62194: LD_INT 30
62196: PUSH
62197: LD_INT 30
62199: PUSH
62200: LD_INT 30
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: ST_TO_ADDR
// un := CreateHuman ;
62209: LD_ADDR_VAR 0 3
62213: PUSH
62214: CALL_OW 44
62218: ST_TO_ADDR
// hc_noskilllimit := false ;
62219: LD_ADDR_OWVAR 76
62223: PUSH
62224: LD_INT 0
62226: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62227: LD_VAR 0 3
62231: PPUSH
62232: LD_INT 1
62234: PPUSH
62235: CALL_OW 51
// ToLua ( playRanger() ) ;
62239: LD_STRING playRanger()
62241: PPUSH
62242: CALL_OW 559
// p := 0 ;
62246: LD_ADDR_VAR 0 2
62250: PUSH
62251: LD_INT 0
62253: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62254: LD_INT 35
62256: PPUSH
62257: CALL_OW 67
// p := p + 1 ;
62261: LD_ADDR_VAR 0 2
62265: PUSH
62266: LD_VAR 0 2
62270: PUSH
62271: LD_INT 1
62273: PLUS
62274: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62275: LD_VAR 0 3
62279: PPUSH
62280: CALL_OW 256
62284: PUSH
62285: LD_INT 1000
62287: LESS
62288: IFFALSE 62302
// SetLives ( un , 1000 ) ;
62290: LD_VAR 0 3
62294: PPUSH
62295: LD_INT 1000
62297: PPUSH
62298: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62302: LD_VAR 0 3
62306: PPUSH
62307: LD_INT 81
62309: PUSH
62310: LD_OWVAR 2
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 91
62321: PUSH
62322: LD_VAR 0 3
62326: PUSH
62327: LD_INT 30
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PPUSH
62339: CALL_OW 69
62343: PPUSH
62344: LD_VAR 0 3
62348: PPUSH
62349: CALL_OW 74
62353: PPUSH
62354: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62358: LD_VAR 0 2
62362: PUSH
62363: LD_INT 80
62365: GREATER
62366: IFTRUE 62379
62368: PUSH
62369: LD_VAR 0 3
62373: PPUSH
62374: CALL_OW 301
62378: OR
62379: IFFALSE 62254
// if un then
62381: LD_VAR 0 3
62385: IFFALSE 62396
// RemoveUnit ( un ) ;
62387: LD_VAR 0 3
62391: PPUSH
62392: CALL_OW 64
// end ;
62396: PPOPN 3
62398: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62399: LD_EXP 84
62403: IFFALSE 62519
62405: GO 62407
62407: DISABLE
62408: LD_INT 0
62410: PPUSH
62411: PPUSH
62412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62413: LD_ADDR_VAR 0 2
62417: PUSH
62418: LD_INT 81
62420: PUSH
62421: LD_OWVAR 2
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 21
62432: PUSH
62433: LD_INT 1
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PPUSH
62444: CALL_OW 69
62448: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62449: LD_STRING playComputer()
62451: PPUSH
62452: CALL_OW 559
// if not tmp then
62456: LD_VAR 0 2
62460: NOT
62461: IFFALSE 62465
// exit ;
62463: GO 62519
// for i in tmp do
62465: LD_ADDR_VAR 0 1
62469: PUSH
62470: LD_VAR 0 2
62474: PUSH
62475: FOR_IN
62476: IFFALSE 62517
// for j := 1 to 4 do
62478: LD_ADDR_VAR 0 3
62482: PUSH
62483: DOUBLE
62484: LD_INT 1
62486: DEC
62487: ST_TO_ADDR
62488: LD_INT 4
62490: PUSH
62491: FOR_TO
62492: IFFALSE 62513
// SetSkill ( i , j , 10 ) ;
62494: LD_VAR 0 1
62498: PPUSH
62499: LD_VAR 0 3
62503: PPUSH
62504: LD_INT 10
62506: PPUSH
62507: CALL_OW 237
62511: GO 62491
62513: POP
62514: POP
62515: GO 62475
62517: POP
62518: POP
// end ;
62519: PPOPN 3
62521: END
// every 0 0$1 trigger s30 do var i , tmp ;
62522: LD_EXP 85
62526: IFFALSE 62595
62528: GO 62530
62530: DISABLE
62531: LD_INT 0
62533: PPUSH
62534: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62535: LD_ADDR_VAR 0 2
62539: PUSH
62540: LD_INT 22
62542: PUSH
62543: LD_OWVAR 2
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PPUSH
62552: CALL_OW 69
62556: ST_TO_ADDR
// if not tmp then
62557: LD_VAR 0 2
62561: NOT
62562: IFFALSE 62566
// exit ;
62564: GO 62595
// for i in tmp do
62566: LD_ADDR_VAR 0 1
62570: PUSH
62571: LD_VAR 0 2
62575: PUSH
62576: FOR_IN
62577: IFFALSE 62593
// SetLives ( i , 300 ) ;
62579: LD_VAR 0 1
62583: PPUSH
62584: LD_INT 300
62586: PPUSH
62587: CALL_OW 234
62591: GO 62576
62593: POP
62594: POP
// end ;
62595: PPOPN 2
62597: END
// every 0 0$1 trigger s60 do var i , tmp ;
62598: LD_EXP 86
62602: IFFALSE 62671
62604: GO 62606
62606: DISABLE
62607: LD_INT 0
62609: PPUSH
62610: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62611: LD_ADDR_VAR 0 2
62615: PUSH
62616: LD_INT 22
62618: PUSH
62619: LD_OWVAR 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PPUSH
62628: CALL_OW 69
62632: ST_TO_ADDR
// if not tmp then
62633: LD_VAR 0 2
62637: NOT
62638: IFFALSE 62642
// exit ;
62640: GO 62671
// for i in tmp do
62642: LD_ADDR_VAR 0 1
62646: PUSH
62647: LD_VAR 0 2
62651: PUSH
62652: FOR_IN
62653: IFFALSE 62669
// SetLives ( i , 600 ) ;
62655: LD_VAR 0 1
62659: PPUSH
62660: LD_INT 600
62662: PPUSH
62663: CALL_OW 234
62667: GO 62652
62669: POP
62670: POP
// end ;
62671: PPOPN 2
62673: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62674: LD_INT 0
62676: PPUSH
// case cmd of 301 :
62677: LD_VAR 0 1
62681: PUSH
62682: LD_INT 301
62684: DOUBLE
62685: EQUAL
62686: IFTRUE 62690
62688: GO 62722
62690: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62691: LD_VAR 0 6
62695: PPUSH
62696: LD_VAR 0 7
62700: PPUSH
62701: LD_VAR 0 8
62705: PPUSH
62706: LD_VAR 0 4
62710: PPUSH
62711: LD_VAR 0 5
62715: PPUSH
62716: CALL 63935 0 5
62720: GO 62843
62722: LD_INT 302
62724: DOUBLE
62725: EQUAL
62726: IFTRUE 62730
62728: GO 62767
62730: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62731: LD_VAR 0 6
62735: PPUSH
62736: LD_VAR 0 7
62740: PPUSH
62741: LD_VAR 0 8
62745: PPUSH
62746: LD_VAR 0 9
62750: PPUSH
62751: LD_VAR 0 4
62755: PPUSH
62756: LD_VAR 0 5
62760: PPUSH
62761: CALL 64026 0 6
62765: GO 62843
62767: LD_INT 303
62769: DOUBLE
62770: EQUAL
62771: IFTRUE 62775
62773: GO 62812
62775: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62776: LD_VAR 0 6
62780: PPUSH
62781: LD_VAR 0 7
62785: PPUSH
62786: LD_VAR 0 8
62790: PPUSH
62791: LD_VAR 0 9
62795: PPUSH
62796: LD_VAR 0 4
62800: PPUSH
62801: LD_VAR 0 5
62805: PPUSH
62806: CALL 62848 0 6
62810: GO 62843
62812: LD_INT 304
62814: DOUBLE
62815: EQUAL
62816: IFTRUE 62820
62818: GO 62842
62820: POP
// hHackTeleport ( unit , x , y ) ; end ;
62821: LD_VAR 0 2
62825: PPUSH
62826: LD_VAR 0 4
62830: PPUSH
62831: LD_VAR 0 5
62835: PPUSH
62836: CALL 64619 0 3
62840: GO 62843
62842: POP
// end ;
62843: LD_VAR 0 12
62847: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62848: LD_INT 0
62850: PPUSH
62851: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62852: LD_VAR 0 1
62856: PUSH
62857: LD_INT 1
62859: LESS
62860: IFTRUE 62872
62862: PUSH
62863: LD_VAR 0 1
62867: PUSH
62868: LD_INT 3
62870: GREATER
62871: OR
62872: IFTRUE 62890
62874: PUSH
62875: LD_VAR 0 5
62879: PPUSH
62880: LD_VAR 0 6
62884: PPUSH
62885: CALL_OW 428
62889: OR
62890: IFFALSE 62894
// exit ;
62892: GO 63622
// uc_side := your_side ;
62894: LD_ADDR_OWVAR 20
62898: PUSH
62899: LD_OWVAR 2
62903: ST_TO_ADDR
// uc_nation := nation ;
62904: LD_ADDR_OWVAR 21
62908: PUSH
62909: LD_VAR 0 1
62913: ST_TO_ADDR
// bc_level = 1 ;
62914: LD_ADDR_OWVAR 43
62918: PUSH
62919: LD_INT 1
62921: ST_TO_ADDR
// case btype of 1 :
62922: LD_VAR 0 2
62926: PUSH
62927: LD_INT 1
62929: DOUBLE
62930: EQUAL
62931: IFTRUE 62935
62933: GO 62946
62935: POP
// bc_type := b_depot ; 2 :
62936: LD_ADDR_OWVAR 42
62940: PUSH
62941: LD_INT 0
62943: ST_TO_ADDR
62944: GO 63566
62946: LD_INT 2
62948: DOUBLE
62949: EQUAL
62950: IFTRUE 62954
62952: GO 62965
62954: POP
// bc_type := b_warehouse ; 3 :
62955: LD_ADDR_OWVAR 42
62959: PUSH
62960: LD_INT 1
62962: ST_TO_ADDR
62963: GO 63566
62965: LD_INT 3
62967: DOUBLE
62968: EQUAL
62969: IFTRUE 62973
62971: GO 62984
62973: POP
// bc_type := b_lab ; 4 .. 9 :
62974: LD_ADDR_OWVAR 42
62978: PUSH
62979: LD_INT 6
62981: ST_TO_ADDR
62982: GO 63566
62984: LD_INT 4
62986: DOUBLE
62987: GREATEREQUAL
62988: IFFALSE 62996
62990: LD_INT 9
62992: DOUBLE
62993: LESSEQUAL
62994: IFTRUE 62998
62996: GO 63058
62998: POP
// begin bc_type := b_lab_half ;
62999: LD_ADDR_OWVAR 42
63003: PUSH
63004: LD_INT 7
63006: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63007: LD_ADDR_OWVAR 44
63011: PUSH
63012: LD_INT 10
63014: PUSH
63015: LD_INT 11
63017: PUSH
63018: LD_INT 12
63020: PUSH
63021: LD_INT 15
63023: PUSH
63024: LD_INT 14
63026: PUSH
63027: LD_INT 13
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: PUSH
63038: LD_VAR 0 2
63042: PUSH
63043: LD_INT 3
63045: MINUS
63046: ARRAY
63047: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63048: LD_ADDR_OWVAR 45
63052: PUSH
63053: LD_INT 9
63055: ST_TO_ADDR
// end ; 10 .. 13 :
63056: GO 63566
63058: LD_INT 10
63060: DOUBLE
63061: GREATEREQUAL
63062: IFFALSE 63070
63064: LD_INT 13
63066: DOUBLE
63067: LESSEQUAL
63068: IFTRUE 63072
63070: GO 63149
63072: POP
// begin bc_type := b_lab_full ;
63073: LD_ADDR_OWVAR 42
63077: PUSH
63078: LD_INT 8
63080: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63081: LD_ADDR_OWVAR 44
63085: PUSH
63086: LD_INT 10
63088: PUSH
63089: LD_INT 12
63091: PUSH
63092: LD_INT 14
63094: PUSH
63095: LD_INT 13
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: PUSH
63104: LD_VAR 0 2
63108: PUSH
63109: LD_INT 9
63111: MINUS
63112: ARRAY
63113: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63114: LD_ADDR_OWVAR 45
63118: PUSH
63119: LD_INT 11
63121: PUSH
63122: LD_INT 15
63124: PUSH
63125: LD_INT 12
63127: PUSH
63128: LD_INT 15
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: PUSH
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 9
63144: MINUS
63145: ARRAY
63146: ST_TO_ADDR
// end ; 14 :
63147: GO 63566
63149: LD_INT 14
63151: DOUBLE
63152: EQUAL
63153: IFTRUE 63157
63155: GO 63168
63157: POP
// bc_type := b_workshop ; 15 :
63158: LD_ADDR_OWVAR 42
63162: PUSH
63163: LD_INT 2
63165: ST_TO_ADDR
63166: GO 63566
63168: LD_INT 15
63170: DOUBLE
63171: EQUAL
63172: IFTRUE 63176
63174: GO 63187
63176: POP
// bc_type := b_factory ; 16 :
63177: LD_ADDR_OWVAR 42
63181: PUSH
63182: LD_INT 3
63184: ST_TO_ADDR
63185: GO 63566
63187: LD_INT 16
63189: DOUBLE
63190: EQUAL
63191: IFTRUE 63195
63193: GO 63206
63195: POP
// bc_type := b_ext_gun ; 17 :
63196: LD_ADDR_OWVAR 42
63200: PUSH
63201: LD_INT 17
63203: ST_TO_ADDR
63204: GO 63566
63206: LD_INT 17
63208: DOUBLE
63209: EQUAL
63210: IFTRUE 63214
63212: GO 63242
63214: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63215: LD_ADDR_OWVAR 42
63219: PUSH
63220: LD_INT 19
63222: PUSH
63223: LD_INT 23
63225: PUSH
63226: LD_INT 19
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: PUSH
63234: LD_VAR 0 1
63238: ARRAY
63239: ST_TO_ADDR
63240: GO 63566
63242: LD_INT 18
63244: DOUBLE
63245: EQUAL
63246: IFTRUE 63250
63248: GO 63261
63250: POP
// bc_type := b_ext_radar ; 19 :
63251: LD_ADDR_OWVAR 42
63255: PUSH
63256: LD_INT 20
63258: ST_TO_ADDR
63259: GO 63566
63261: LD_INT 19
63263: DOUBLE
63264: EQUAL
63265: IFTRUE 63269
63267: GO 63280
63269: POP
// bc_type := b_ext_radio ; 20 :
63270: LD_ADDR_OWVAR 42
63274: PUSH
63275: LD_INT 22
63277: ST_TO_ADDR
63278: GO 63566
63280: LD_INT 20
63282: DOUBLE
63283: EQUAL
63284: IFTRUE 63288
63286: GO 63299
63288: POP
// bc_type := b_ext_siberium ; 21 :
63289: LD_ADDR_OWVAR 42
63293: PUSH
63294: LD_INT 21
63296: ST_TO_ADDR
63297: GO 63566
63299: LD_INT 21
63301: DOUBLE
63302: EQUAL
63303: IFTRUE 63307
63305: GO 63318
63307: POP
// bc_type := b_ext_computer ; 22 :
63308: LD_ADDR_OWVAR 42
63312: PUSH
63313: LD_INT 24
63315: ST_TO_ADDR
63316: GO 63566
63318: LD_INT 22
63320: DOUBLE
63321: EQUAL
63322: IFTRUE 63326
63324: GO 63337
63326: POP
// bc_type := b_ext_track ; 23 :
63327: LD_ADDR_OWVAR 42
63331: PUSH
63332: LD_INT 16
63334: ST_TO_ADDR
63335: GO 63566
63337: LD_INT 23
63339: DOUBLE
63340: EQUAL
63341: IFTRUE 63345
63343: GO 63356
63345: POP
// bc_type := b_ext_laser ; 24 :
63346: LD_ADDR_OWVAR 42
63350: PUSH
63351: LD_INT 25
63353: ST_TO_ADDR
63354: GO 63566
63356: LD_INT 24
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63364
63362: GO 63375
63364: POP
// bc_type := b_control_tower ; 25 :
63365: LD_ADDR_OWVAR 42
63369: PUSH
63370: LD_INT 36
63372: ST_TO_ADDR
63373: GO 63566
63375: LD_INT 25
63377: DOUBLE
63378: EQUAL
63379: IFTRUE 63383
63381: GO 63394
63383: POP
// bc_type := b_breastwork ; 26 :
63384: LD_ADDR_OWVAR 42
63388: PUSH
63389: LD_INT 31
63391: ST_TO_ADDR
63392: GO 63566
63394: LD_INT 26
63396: DOUBLE
63397: EQUAL
63398: IFTRUE 63402
63400: GO 63413
63402: POP
// bc_type := b_bunker ; 27 :
63403: LD_ADDR_OWVAR 42
63407: PUSH
63408: LD_INT 32
63410: ST_TO_ADDR
63411: GO 63566
63413: LD_INT 27
63415: DOUBLE
63416: EQUAL
63417: IFTRUE 63421
63419: GO 63432
63421: POP
// bc_type := b_turret ; 28 :
63422: LD_ADDR_OWVAR 42
63426: PUSH
63427: LD_INT 33
63429: ST_TO_ADDR
63430: GO 63566
63432: LD_INT 28
63434: DOUBLE
63435: EQUAL
63436: IFTRUE 63440
63438: GO 63451
63440: POP
// bc_type := b_armoury ; 29 :
63441: LD_ADDR_OWVAR 42
63445: PUSH
63446: LD_INT 4
63448: ST_TO_ADDR
63449: GO 63566
63451: LD_INT 29
63453: DOUBLE
63454: EQUAL
63455: IFTRUE 63459
63457: GO 63470
63459: POP
// bc_type := b_barracks ; 30 :
63460: LD_ADDR_OWVAR 42
63464: PUSH
63465: LD_INT 5
63467: ST_TO_ADDR
63468: GO 63566
63470: LD_INT 30
63472: DOUBLE
63473: EQUAL
63474: IFTRUE 63478
63476: GO 63489
63478: POP
// bc_type := b_solar_power ; 31 :
63479: LD_ADDR_OWVAR 42
63483: PUSH
63484: LD_INT 27
63486: ST_TO_ADDR
63487: GO 63566
63489: LD_INT 31
63491: DOUBLE
63492: EQUAL
63493: IFTRUE 63497
63495: GO 63508
63497: POP
// bc_type := b_oil_power ; 32 :
63498: LD_ADDR_OWVAR 42
63502: PUSH
63503: LD_INT 26
63505: ST_TO_ADDR
63506: GO 63566
63508: LD_INT 32
63510: DOUBLE
63511: EQUAL
63512: IFTRUE 63516
63514: GO 63527
63516: POP
// bc_type := b_siberite_power ; 33 :
63517: LD_ADDR_OWVAR 42
63521: PUSH
63522: LD_INT 28
63524: ST_TO_ADDR
63525: GO 63566
63527: LD_INT 33
63529: DOUBLE
63530: EQUAL
63531: IFTRUE 63535
63533: GO 63546
63535: POP
// bc_type := b_oil_mine ; 34 :
63536: LD_ADDR_OWVAR 42
63540: PUSH
63541: LD_INT 29
63543: ST_TO_ADDR
63544: GO 63566
63546: LD_INT 34
63548: DOUBLE
63549: EQUAL
63550: IFTRUE 63554
63552: GO 63565
63554: POP
// bc_type := b_siberite_mine ; end ;
63555: LD_ADDR_OWVAR 42
63559: PUSH
63560: LD_INT 30
63562: ST_TO_ADDR
63563: GO 63566
63565: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63566: LD_ADDR_VAR 0 8
63570: PUSH
63571: LD_VAR 0 5
63575: PPUSH
63576: LD_VAR 0 6
63580: PPUSH
63581: LD_VAR 0 3
63585: PPUSH
63586: CALL_OW 47
63590: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63591: LD_OWVAR 42
63595: PUSH
63596: LD_INT 32
63598: PUSH
63599: LD_INT 33
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: IN
63606: IFFALSE 63622
// PlaceWeaponTurret ( b , weapon ) ;
63608: LD_VAR 0 8
63612: PPUSH
63613: LD_VAR 0 4
63617: PPUSH
63618: CALL_OW 431
// end ;
63622: LD_VAR 0 7
63626: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63627: LD_INT 0
63629: PPUSH
63630: PPUSH
63631: PPUSH
63632: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63633: LD_ADDR_VAR 0 4
63637: PUSH
63638: LD_INT 22
63640: PUSH
63641: LD_OWVAR 2
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: LD_INT 30
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 30
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PPUSH
63682: CALL_OW 69
63686: ST_TO_ADDR
// if not tmp then
63687: LD_VAR 0 4
63691: NOT
63692: IFFALSE 63696
// exit ;
63694: GO 63755
// for i in tmp do
63696: LD_ADDR_VAR 0 2
63700: PUSH
63701: LD_VAR 0 4
63705: PUSH
63706: FOR_IN
63707: IFFALSE 63753
// for j = 1 to 3 do
63709: LD_ADDR_VAR 0 3
63713: PUSH
63714: DOUBLE
63715: LD_INT 1
63717: DEC
63718: ST_TO_ADDR
63719: LD_INT 3
63721: PUSH
63722: FOR_TO
63723: IFFALSE 63749
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63725: LD_VAR 0 2
63729: PPUSH
63730: CALL_OW 274
63734: PPUSH
63735: LD_VAR 0 3
63739: PPUSH
63740: LD_INT 99999
63742: PPUSH
63743: CALL_OW 277
63747: GO 63722
63749: POP
63750: POP
63751: GO 63706
63753: POP
63754: POP
// end ;
63755: LD_VAR 0 1
63759: RET
// export function hHackSetLevel10 ; var i , j ; begin
63760: LD_INT 0
63762: PPUSH
63763: PPUSH
63764: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63765: LD_ADDR_VAR 0 2
63769: PUSH
63770: LD_INT 21
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PPUSH
63780: CALL_OW 69
63784: PUSH
63785: FOR_IN
63786: IFFALSE 63838
// if IsSelected ( i ) then
63788: LD_VAR 0 2
63792: PPUSH
63793: CALL_OW 306
63797: IFFALSE 63836
// begin for j := 1 to 4 do
63799: LD_ADDR_VAR 0 3
63803: PUSH
63804: DOUBLE
63805: LD_INT 1
63807: DEC
63808: ST_TO_ADDR
63809: LD_INT 4
63811: PUSH
63812: FOR_TO
63813: IFFALSE 63834
// SetSkill ( i , j , 10 ) ;
63815: LD_VAR 0 2
63819: PPUSH
63820: LD_VAR 0 3
63824: PPUSH
63825: LD_INT 10
63827: PPUSH
63828: CALL_OW 237
63832: GO 63812
63834: POP
63835: POP
// end ;
63836: GO 63785
63838: POP
63839: POP
// end ;
63840: LD_VAR 0 1
63844: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63845: LD_INT 0
63847: PPUSH
63848: PPUSH
63849: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63850: LD_ADDR_VAR 0 2
63854: PUSH
63855: LD_INT 22
63857: PUSH
63858: LD_OWVAR 2
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 21
63869: PUSH
63870: LD_INT 1
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PPUSH
63881: CALL_OW 69
63885: PUSH
63886: FOR_IN
63887: IFFALSE 63928
// begin for j := 1 to 4 do
63889: LD_ADDR_VAR 0 3
63893: PUSH
63894: DOUBLE
63895: LD_INT 1
63897: DEC
63898: ST_TO_ADDR
63899: LD_INT 4
63901: PUSH
63902: FOR_TO
63903: IFFALSE 63924
// SetSkill ( i , j , 10 ) ;
63905: LD_VAR 0 2
63909: PPUSH
63910: LD_VAR 0 3
63914: PPUSH
63915: LD_INT 10
63917: PPUSH
63918: CALL_OW 237
63922: GO 63902
63924: POP
63925: POP
// end ;
63926: GO 63886
63928: POP
63929: POP
// end ;
63930: LD_VAR 0 1
63934: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63935: LD_INT 0
63937: PPUSH
// uc_side := your_side ;
63938: LD_ADDR_OWVAR 20
63942: PUSH
63943: LD_OWVAR 2
63947: ST_TO_ADDR
// uc_nation := nation ;
63948: LD_ADDR_OWVAR 21
63952: PUSH
63953: LD_VAR 0 1
63957: ST_TO_ADDR
// InitHc ;
63958: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63962: LD_INT 0
63964: PPUSH
63965: LD_VAR 0 2
63969: PPUSH
63970: LD_VAR 0 3
63974: PPUSH
63975: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63979: LD_VAR 0 4
63983: PPUSH
63984: LD_VAR 0 5
63988: PPUSH
63989: CALL_OW 428
63993: PUSH
63994: LD_INT 0
63996: EQUAL
63997: IFFALSE 64021
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63999: CALL_OW 44
64003: PPUSH
64004: LD_VAR 0 4
64008: PPUSH
64009: LD_VAR 0 5
64013: PPUSH
64014: LD_INT 1
64016: PPUSH
64017: CALL_OW 48
// end ;
64021: LD_VAR 0 6
64025: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64026: LD_INT 0
64028: PPUSH
64029: PPUSH
// uc_side := your_side ;
64030: LD_ADDR_OWVAR 20
64034: PUSH
64035: LD_OWVAR 2
64039: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64040: LD_VAR 0 1
64044: PUSH
64045: LD_INT 1
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 3
64053: PUSH
64054: LD_INT 4
64056: PUSH
64057: LD_INT 5
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: IN
64067: IFFALSE 64079
// uc_nation := nation_american else
64069: LD_ADDR_OWVAR 21
64073: PUSH
64074: LD_INT 1
64076: ST_TO_ADDR
64077: GO 64122
// if chassis in [ 11 , 12 , 13 , 14 ] then
64079: LD_VAR 0 1
64083: PUSH
64084: LD_INT 11
64086: PUSH
64087: LD_INT 12
64089: PUSH
64090: LD_INT 13
64092: PUSH
64093: LD_INT 14
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: IN
64102: IFFALSE 64114
// uc_nation := nation_arabian else
64104: LD_ADDR_OWVAR 21
64108: PUSH
64109: LD_INT 2
64111: ST_TO_ADDR
64112: GO 64122
// uc_nation := nation_russian ;
64114: LD_ADDR_OWVAR 21
64118: PUSH
64119: LD_INT 3
64121: ST_TO_ADDR
// vc_chassis := chassis ;
64122: LD_ADDR_OWVAR 37
64126: PUSH
64127: LD_VAR 0 1
64131: ST_TO_ADDR
// vc_engine := engine ;
64132: LD_ADDR_OWVAR 39
64136: PUSH
64137: LD_VAR 0 2
64141: ST_TO_ADDR
// vc_control := control ;
64142: LD_ADDR_OWVAR 38
64146: PUSH
64147: LD_VAR 0 3
64151: ST_TO_ADDR
// vc_weapon := weapon ;
64152: LD_ADDR_OWVAR 40
64156: PUSH
64157: LD_VAR 0 4
64161: ST_TO_ADDR
// un := CreateVehicle ;
64162: LD_ADDR_VAR 0 8
64166: PUSH
64167: CALL_OW 45
64171: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64172: LD_VAR 0 8
64176: PPUSH
64177: LD_INT 0
64179: PPUSH
64180: LD_INT 5
64182: PPUSH
64183: CALL_OW 12
64187: PPUSH
64188: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64192: LD_VAR 0 8
64196: PPUSH
64197: LD_VAR 0 5
64201: PPUSH
64202: LD_VAR 0 6
64206: PPUSH
64207: LD_INT 1
64209: PPUSH
64210: CALL_OW 48
// end ;
64214: LD_VAR 0 7
64218: RET
// export hInvincible ; every 1 do
64219: GO 64221
64221: DISABLE
// hInvincible := [ ] ;
64222: LD_ADDR_EXP 87
64226: PUSH
64227: EMPTY
64228: ST_TO_ADDR
64229: END
// every 10 do var i ;
64230: GO 64232
64232: DISABLE
64233: LD_INT 0
64235: PPUSH
// begin enable ;
64236: ENABLE
// if not hInvincible then
64237: LD_EXP 87
64241: NOT
64242: IFFALSE 64246
// exit ;
64244: GO 64290
// for i in hInvincible do
64246: LD_ADDR_VAR 0 1
64250: PUSH
64251: LD_EXP 87
64255: PUSH
64256: FOR_IN
64257: IFFALSE 64288
// if GetLives ( i ) < 1000 then
64259: LD_VAR 0 1
64263: PPUSH
64264: CALL_OW 256
64268: PUSH
64269: LD_INT 1000
64271: LESS
64272: IFFALSE 64286
// SetLives ( i , 1000 ) ;
64274: LD_VAR 0 1
64278: PPUSH
64279: LD_INT 1000
64281: PPUSH
64282: CALL_OW 234
64286: GO 64256
64288: POP
64289: POP
// end ;
64290: PPOPN 1
64292: END
// export function hHackInvincible ; var i ; begin
64293: LD_INT 0
64295: PPUSH
64296: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64297: LD_ADDR_VAR 0 2
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: LD_INT 21
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 21
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: LIST
64329: PPUSH
64330: CALL_OW 69
64334: PUSH
64335: FOR_IN
64336: IFFALSE 64397
// if IsSelected ( i ) then
64338: LD_VAR 0 2
64342: PPUSH
64343: CALL_OW 306
64347: IFFALSE 64395
// begin if i in hInvincible then
64349: LD_VAR 0 2
64353: PUSH
64354: LD_EXP 87
64358: IN
64359: IFFALSE 64379
// hInvincible := hInvincible diff i else
64361: LD_ADDR_EXP 87
64365: PUSH
64366: LD_EXP 87
64370: PUSH
64371: LD_VAR 0 2
64375: DIFF
64376: ST_TO_ADDR
64377: GO 64395
// hInvincible := hInvincible union i ;
64379: LD_ADDR_EXP 87
64383: PUSH
64384: LD_EXP 87
64388: PUSH
64389: LD_VAR 0 2
64393: UNION
64394: ST_TO_ADDR
// end ;
64395: GO 64335
64397: POP
64398: POP
// end ;
64399: LD_VAR 0 1
64403: RET
// export function hHackInvisible ; var i , j ; begin
64404: LD_INT 0
64406: PPUSH
64407: PPUSH
64408: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64409: LD_ADDR_VAR 0 2
64413: PUSH
64414: LD_INT 21
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PPUSH
64424: CALL_OW 69
64428: PUSH
64429: FOR_IN
64430: IFFALSE 64454
// if IsSelected ( i ) then
64432: LD_VAR 0 2
64436: PPUSH
64437: CALL_OW 306
64441: IFFALSE 64452
// ComForceInvisible ( i ) ;
64443: LD_VAR 0 2
64447: PPUSH
64448: CALL_OW 496
64452: GO 64429
64454: POP
64455: POP
// end ;
64456: LD_VAR 0 1
64460: RET
// export function hHackChangeYourSide ; begin
64461: LD_INT 0
64463: PPUSH
// if your_side = 8 then
64464: LD_OWVAR 2
64468: PUSH
64469: LD_INT 8
64471: EQUAL
64472: IFFALSE 64484
// your_side := 0 else
64474: LD_ADDR_OWVAR 2
64478: PUSH
64479: LD_INT 0
64481: ST_TO_ADDR
64482: GO 64498
// your_side := your_side + 1 ;
64484: LD_ADDR_OWVAR 2
64488: PUSH
64489: LD_OWVAR 2
64493: PUSH
64494: LD_INT 1
64496: PLUS
64497: ST_TO_ADDR
// end ;
64498: LD_VAR 0 1
64502: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64503: LD_INT 0
64505: PPUSH
64506: PPUSH
64507: PPUSH
// for i in all_units do
64508: LD_ADDR_VAR 0 2
64512: PUSH
64513: LD_OWVAR 3
64517: PUSH
64518: FOR_IN
64519: IFFALSE 64597
// if IsSelected ( i ) then
64521: LD_VAR 0 2
64525: PPUSH
64526: CALL_OW 306
64530: IFFALSE 64595
// begin j := GetSide ( i ) ;
64532: LD_ADDR_VAR 0 3
64536: PUSH
64537: LD_VAR 0 2
64541: PPUSH
64542: CALL_OW 255
64546: ST_TO_ADDR
// if j = 8 then
64547: LD_VAR 0 3
64551: PUSH
64552: LD_INT 8
64554: EQUAL
64555: IFFALSE 64567
// j := 0 else
64557: LD_ADDR_VAR 0 3
64561: PUSH
64562: LD_INT 0
64564: ST_TO_ADDR
64565: GO 64581
// j := j + 1 ;
64567: LD_ADDR_VAR 0 3
64571: PUSH
64572: LD_VAR 0 3
64576: PUSH
64577: LD_INT 1
64579: PLUS
64580: ST_TO_ADDR
// SetSide ( i , j ) ;
64581: LD_VAR 0 2
64585: PPUSH
64586: LD_VAR 0 3
64590: PPUSH
64591: CALL_OW 235
// end ;
64595: GO 64518
64597: POP
64598: POP
// end ;
64599: LD_VAR 0 1
64603: RET
// export function hHackFog ; begin
64604: LD_INT 0
64606: PPUSH
// FogOff ( true ) ;
64607: LD_INT 1
64609: PPUSH
64610: CALL_OW 344
// end ;
64614: LD_VAR 0 1
64618: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64619: LD_INT 0
64621: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64622: LD_VAR 0 1
64626: PPUSH
64627: LD_VAR 0 2
64631: PPUSH
64632: LD_VAR 0 3
64636: PPUSH
64637: LD_INT 1
64639: PPUSH
64640: LD_INT 1
64642: PPUSH
64643: CALL_OW 483
// CenterOnXY ( x , y ) ;
64647: LD_VAR 0 2
64651: PPUSH
64652: LD_VAR 0 3
64656: PPUSH
64657: CALL_OW 84
// end ;
64661: LD_VAR 0 4
64665: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64666: LD_INT 0
64668: PPUSH
64669: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64670: LD_VAR 0 1
64674: NOT
64675: IFTRUE 64694
64677: PUSH
64678: LD_VAR 0 2
64682: PPUSH
64683: LD_VAR 0 3
64687: PPUSH
64688: CALL_OW 488
64692: NOT
64693: OR
64694: IFTRUE 64729
64696: PUSH
64697: LD_VAR 0 1
64701: PPUSH
64702: CALL_OW 266
64706: PUSH
64707: LD_INT 3
64709: NONEQUAL
64710: IFFALSE 64728
64712: PUSH
64713: LD_VAR 0 1
64717: PPUSH
64718: CALL_OW 247
64722: PUSH
64723: LD_INT 1
64725: EQUAL
64726: NOT
64727: AND
64728: OR
64729: IFFALSE 64733
// exit ;
64731: GO 65015
// if GetType ( factory ) = unit_human then
64733: LD_VAR 0 1
64737: PPUSH
64738: CALL_OW 247
64742: PUSH
64743: LD_INT 1
64745: EQUAL
64746: IFFALSE 64763
// factory := IsInUnit ( factory ) ;
64748: LD_ADDR_VAR 0 1
64752: PUSH
64753: LD_VAR 0 1
64757: PPUSH
64758: CALL_OW 310
64762: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64763: LD_VAR 0 1
64767: PPUSH
64768: CALL_OW 266
64772: PUSH
64773: LD_INT 3
64775: NONEQUAL
64776: IFFALSE 64780
// exit ;
64778: GO 65015
// for i := 1 to Count ( factoryWaypoints ) do
64780: LD_ADDR_VAR 0 5
64784: PUSH
64785: DOUBLE
64786: LD_INT 1
64788: DEC
64789: ST_TO_ADDR
64790: LD_EXP 88
64794: PPUSH
64795: CALL 8663 0 1
64799: PUSH
64800: FOR_TO
64801: IFFALSE 64963
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64803: LD_VAR 0 2
64807: PPUSH
64808: LD_VAR 0 3
64812: PPUSH
64813: CALL_OW 428
64817: PUSH
64818: LD_EXP 88
64822: PUSH
64823: LD_VAR 0 5
64827: ARRAY
64828: PUSH
64829: LD_INT 2
64831: ARRAY
64832: EQUAL
64833: IFFALSE 64865
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64835: LD_ADDR_EXP 88
64839: PUSH
64840: LD_EXP 88
64844: PPUSH
64845: LD_VAR 0 5
64849: PPUSH
64850: CALL_OW 3
64854: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64855: CALL 65020 0 0
// exit ;
64859: POP
64860: POP
64861: GO 65015
// end else
64863: GO 64961
// if factory = factoryWaypoints [ i ] [ 2 ] then
64865: LD_VAR 0 1
64869: PUSH
64870: LD_EXP 88
64874: PUSH
64875: LD_VAR 0 5
64879: ARRAY
64880: PUSH
64881: LD_INT 2
64883: ARRAY
64884: EQUAL
64885: IFFALSE 64961
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64887: LD_ADDR_EXP 88
64891: PUSH
64892: LD_EXP 88
64896: PPUSH
64897: LD_VAR 0 5
64901: PPUSH
64902: CALL_OW 3
64906: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64907: LD_ADDR_EXP 88
64911: PUSH
64912: LD_EXP 88
64916: PPUSH
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 255
64926: PUSH
64927: LD_VAR 0 1
64931: PUSH
64932: LD_VAR 0 2
64936: PUSH
64937: LD_VAR 0 3
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: PPUSH
64948: CALL 44595 0 2
64952: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64953: CALL 65020 0 0
// exit ;
64957: POP
64958: POP
64959: GO 65015
// end ; end ;
64961: GO 64800
64963: POP
64964: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64965: LD_ADDR_EXP 88
64969: PUSH
64970: LD_EXP 88
64974: PPUSH
64975: LD_VAR 0 1
64979: PPUSH
64980: CALL_OW 255
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_VAR 0 2
64994: PUSH
64995: LD_VAR 0 3
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: PPUSH
65006: CALL 44595 0 2
65010: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65011: CALL 65020 0 0
// end ;
65015: LD_VAR 0 4
65019: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65020: LD_INT 0
65022: PPUSH
65023: PPUSH
65024: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65025: LD_STRING resetFactoryWaypoint();
65027: PPUSH
65028: CALL_OW 559
// if factoryWaypoints then
65032: LD_EXP 88
65036: IFFALSE 65157
// begin list := factoryWaypoints ;
65038: LD_ADDR_VAR 0 3
65042: PUSH
65043: LD_EXP 88
65047: ST_TO_ADDR
// for i := 1 to list do
65048: LD_ADDR_VAR 0 2
65052: PUSH
65053: DOUBLE
65054: LD_INT 1
65056: DEC
65057: ST_TO_ADDR
65058: LD_VAR 0 3
65062: PUSH
65063: FOR_TO
65064: IFFALSE 65155
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65066: LD_STRING setFactoryWaypointXY(
65068: PUSH
65069: LD_VAR 0 3
65073: PUSH
65074: LD_VAR 0 2
65078: ARRAY
65079: PUSH
65080: LD_INT 1
65082: ARRAY
65083: STR
65084: PUSH
65085: LD_STRING ,
65087: STR
65088: PUSH
65089: LD_VAR 0 3
65093: PUSH
65094: LD_VAR 0 2
65098: ARRAY
65099: PUSH
65100: LD_INT 2
65102: ARRAY
65103: STR
65104: PUSH
65105: LD_STRING ,
65107: STR
65108: PUSH
65109: LD_VAR 0 3
65113: PUSH
65114: LD_VAR 0 2
65118: ARRAY
65119: PUSH
65120: LD_INT 3
65122: ARRAY
65123: STR
65124: PUSH
65125: LD_STRING ,
65127: STR
65128: PUSH
65129: LD_VAR 0 3
65133: PUSH
65134: LD_VAR 0 2
65138: ARRAY
65139: PUSH
65140: LD_INT 4
65142: ARRAY
65143: STR
65144: PUSH
65145: LD_STRING )
65147: STR
65148: PPUSH
65149: CALL_OW 559
65153: GO 65063
65155: POP
65156: POP
// end ; end ;
65157: LD_VAR 0 1
65161: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65162: LD_INT 0
65164: PPUSH
// if HexInfo ( x , y ) = warehouse then
65165: LD_VAR 0 2
65169: PPUSH
65170: LD_VAR 0 3
65174: PPUSH
65175: CALL_OW 428
65179: PUSH
65180: LD_VAR 0 1
65184: EQUAL
65185: IFFALSE 65212
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65187: LD_ADDR_EXP 90
65191: PUSH
65192: LD_EXP 90
65196: PPUSH
65197: LD_VAR 0 1
65201: PPUSH
65202: LD_INT 0
65204: PPUSH
65205: CALL_OW 1
65209: ST_TO_ADDR
65210: GO 65263
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65212: LD_ADDR_EXP 90
65216: PUSH
65217: LD_EXP 90
65221: PPUSH
65222: LD_VAR 0 1
65226: PPUSH
65227: LD_VAR 0 1
65231: PPUSH
65232: CALL_OW 255
65236: PUSH
65237: LD_VAR 0 1
65241: PUSH
65242: LD_VAR 0 2
65246: PUSH
65247: LD_VAR 0 3
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: PPUSH
65258: CALL_OW 1
65262: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65263: CALL 65272 0 0
// end ;
65267: LD_VAR 0 4
65271: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65272: LD_INT 0
65274: PPUSH
65275: PPUSH
65276: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65277: LD_STRING resetWarehouseGatheringPoints();
65279: PPUSH
65280: CALL_OW 559
// if warehouseGatheringPoints then
65284: LD_EXP 90
65288: IFFALSE 65414
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65290: LD_ADDR_VAR 0 3
65294: PUSH
65295: LD_EXP 90
65299: PPUSH
65300: CALL 48529 0 1
65304: ST_TO_ADDR
// for i := 1 to list do
65305: LD_ADDR_VAR 0 2
65309: PUSH
65310: DOUBLE
65311: LD_INT 1
65313: DEC
65314: ST_TO_ADDR
65315: LD_VAR 0 3
65319: PUSH
65320: FOR_TO
65321: IFFALSE 65412
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65323: LD_STRING setWarehouseGatheringPointXY(
65325: PUSH
65326: LD_VAR 0 3
65330: PUSH
65331: LD_VAR 0 2
65335: ARRAY
65336: PUSH
65337: LD_INT 1
65339: ARRAY
65340: STR
65341: PUSH
65342: LD_STRING ,
65344: STR
65345: PUSH
65346: LD_VAR 0 3
65350: PUSH
65351: LD_VAR 0 2
65355: ARRAY
65356: PUSH
65357: LD_INT 2
65359: ARRAY
65360: STR
65361: PUSH
65362: LD_STRING ,
65364: STR
65365: PUSH
65366: LD_VAR 0 3
65370: PUSH
65371: LD_VAR 0 2
65375: ARRAY
65376: PUSH
65377: LD_INT 3
65379: ARRAY
65380: STR
65381: PUSH
65382: LD_STRING ,
65384: STR
65385: PUSH
65386: LD_VAR 0 3
65390: PUSH
65391: LD_VAR 0 2
65395: ARRAY
65396: PUSH
65397: LD_INT 4
65399: ARRAY
65400: STR
65401: PUSH
65402: LD_STRING )
65404: STR
65405: PPUSH
65406: CALL_OW 559
65410: GO 65320
65412: POP
65413: POP
// end ; end ;
65414: LD_VAR 0 1
65418: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65419: LD_EXP 90
65423: IFFALSE 66118
65425: GO 65427
65427: DISABLE
65428: LD_INT 0
65430: PPUSH
65431: PPUSH
65432: PPUSH
65433: PPUSH
65434: PPUSH
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
// begin enable ;
65439: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65440: LD_ADDR_VAR 0 3
65444: PUSH
65445: LD_EXP 90
65449: PPUSH
65450: CALL 48529 0 1
65454: ST_TO_ADDR
// if not list then
65455: LD_VAR 0 3
65459: NOT
65460: IFFALSE 65464
// exit ;
65462: GO 66118
// for i := 1 to list do
65464: LD_ADDR_VAR 0 1
65468: PUSH
65469: DOUBLE
65470: LD_INT 1
65472: DEC
65473: ST_TO_ADDR
65474: LD_VAR 0 3
65478: PUSH
65479: FOR_TO
65480: IFFALSE 66116
// begin depot := list [ i ] [ 2 ] ;
65482: LD_ADDR_VAR 0 8
65486: PUSH
65487: LD_VAR 0 3
65491: PUSH
65492: LD_VAR 0 1
65496: ARRAY
65497: PUSH
65498: LD_INT 2
65500: ARRAY
65501: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65502: LD_ADDR_VAR 0 5
65506: PUSH
65507: LD_VAR 0 3
65511: PUSH
65512: LD_VAR 0 1
65516: ARRAY
65517: PUSH
65518: LD_INT 1
65520: ARRAY
65521: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65522: LD_VAR 0 8
65526: PPUSH
65527: CALL_OW 301
65531: IFTRUE 65550
65533: PUSH
65534: LD_VAR 0 5
65538: PUSH
65539: LD_VAR 0 8
65543: PPUSH
65544: CALL_OW 255
65548: NONEQUAL
65549: OR
65550: IFFALSE 65579
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65552: LD_ADDR_EXP 90
65556: PUSH
65557: LD_EXP 90
65561: PPUSH
65562: LD_VAR 0 8
65566: PPUSH
65567: LD_INT 0
65569: PPUSH
65570: CALL_OW 1
65574: ST_TO_ADDR
// exit ;
65575: POP
65576: POP
65577: GO 66118
// end ; x := list [ i ] [ 3 ] ;
65579: LD_ADDR_VAR 0 6
65583: PUSH
65584: LD_VAR 0 3
65588: PUSH
65589: LD_VAR 0 1
65593: ARRAY
65594: PUSH
65595: LD_INT 3
65597: ARRAY
65598: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65599: LD_ADDR_VAR 0 7
65603: PUSH
65604: LD_VAR 0 3
65608: PUSH
65609: LD_VAR 0 1
65613: ARRAY
65614: PUSH
65615: LD_INT 4
65617: ARRAY
65618: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65619: LD_ADDR_VAR 0 9
65623: PUSH
65624: LD_VAR 0 6
65628: PPUSH
65629: LD_VAR 0 7
65633: PPUSH
65634: LD_INT 16
65636: PPUSH
65637: CALL 47103 0 3
65641: ST_TO_ADDR
// if not cratesNearbyPoint then
65642: LD_VAR 0 9
65646: NOT
65647: IFFALSE 65653
// exit ;
65649: POP
65650: POP
65651: GO 66118
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65653: LD_ADDR_VAR 0 4
65657: PUSH
65658: LD_INT 22
65660: PUSH
65661: LD_VAR 0 5
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 3
65672: PUSH
65673: LD_INT 60
65675: PUSH
65676: EMPTY
65677: LIST
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 91
65685: PUSH
65686: LD_VAR 0 8
65690: PUSH
65691: LD_INT 6
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: LD_INT 25
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 25
65714: PUSH
65715: LD_INT 16
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: LIST
65726: PUSH
65727: EMPTY
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: PPUSH
65733: CALL_OW 69
65737: PUSH
65738: LD_VAR 0 8
65742: PPUSH
65743: CALL_OW 313
65747: PPUSH
65748: LD_INT 3
65750: PUSH
65751: LD_INT 60
65753: PUSH
65754: EMPTY
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: LD_INT 2
65763: PUSH
65764: LD_INT 25
65766: PUSH
65767: LD_INT 2
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 25
65776: PUSH
65777: LD_INT 16
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: LIST
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PPUSH
65793: CALL_OW 72
65797: UNION
65798: ST_TO_ADDR
// if tmp then
65799: LD_VAR 0 4
65803: IFFALSE 65883
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65805: LD_ADDR_VAR 0 4
65809: PUSH
65810: LD_VAR 0 4
65814: PPUSH
65815: LD_INT 3
65817: PPUSH
65818: CALL 44910 0 2
65822: ST_TO_ADDR
// for j in tmp do
65823: LD_ADDR_VAR 0 2
65827: PUSH
65828: LD_VAR 0 4
65832: PUSH
65833: FOR_IN
65834: IFFALSE 65877
// begin if IsInUnit ( j ) then
65836: LD_VAR 0 2
65840: PPUSH
65841: CALL_OW 310
65845: IFFALSE 65856
// ComExit ( j ) ;
65847: LD_VAR 0 2
65851: PPUSH
65852: CALL 44993 0 1
// AddComCollect ( j , x , y ) ;
65856: LD_VAR 0 2
65860: PPUSH
65861: LD_VAR 0 6
65865: PPUSH
65866: LD_VAR 0 7
65870: PPUSH
65871: CALL_OW 177
// end ;
65875: GO 65833
65877: POP
65878: POP
// exit ;
65879: POP
65880: POP
65881: GO 66118
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65883: LD_ADDR_VAR 0 4
65887: PUSH
65888: LD_INT 22
65890: PUSH
65891: LD_VAR 0 5
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 91
65902: PUSH
65903: LD_VAR 0 8
65907: PUSH
65908: LD_INT 8
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 2
65918: PUSH
65919: LD_INT 34
65921: PUSH
65922: LD_INT 12
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 34
65931: PUSH
65932: LD_INT 51
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 34
65941: PUSH
65942: LD_INT 32
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 34
65951: PUSH
65952: LD_INT 89
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: PPUSH
65971: CALL_OW 69
65975: ST_TO_ADDR
// if tmp then
65976: LD_VAR 0 4
65980: IFFALSE 66114
// begin for j in tmp do
65982: LD_ADDR_VAR 0 2
65986: PUSH
65987: LD_VAR 0 4
65991: PUSH
65992: FOR_IN
65993: IFFALSE 66112
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65995: LD_VAR 0 2
65999: PPUSH
66000: CALL_OW 262
66004: PUSH
66005: LD_INT 3
66007: EQUAL
66008: IFTRUE 66025
66010: PUSH
66011: LD_VAR 0 2
66015: PPUSH
66016: CALL_OW 261
66020: PUSH
66021: LD_INT 20
66023: GREATER
66024: OR
66025: IFFALSE 66039
66027: PUSH
66028: LD_VAR 0 2
66032: PPUSH
66033: CALL_OW 314
66037: NOT
66038: AND
66039: IFFALSE 66069
66041: PUSH
66042: LD_VAR 0 2
66046: PPUSH
66047: CALL_OW 263
66051: PUSH
66052: LD_INT 1
66054: NONEQUAL
66055: IFTRUE 66068
66057: PUSH
66058: LD_VAR 0 2
66062: PPUSH
66063: CALL_OW 311
66067: OR
66068: AND
66069: IFFALSE 66110
// begin ComCollect ( j , x , y ) ;
66071: LD_VAR 0 2
66075: PPUSH
66076: LD_VAR 0 6
66080: PPUSH
66081: LD_VAR 0 7
66085: PPUSH
66086: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66090: LD_VAR 0 2
66094: PPUSH
66095: LD_VAR 0 8
66099: PPUSH
66100: CALL_OW 172
// exit ;
66104: POP
66105: POP
66106: POP
66107: POP
66108: GO 66118
// end ;
66110: GO 65992
66112: POP
66113: POP
// end ; end ;
66114: GO 65479
66116: POP
66117: POP
// end ; end_of_file
66118: PPOPN 9
66120: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66121: LD_VAR 0 1
66125: PUSH
66126: LD_INT 200
66128: DOUBLE
66129: GREATEREQUAL
66130: IFFALSE 66138
66132: LD_INT 299
66134: DOUBLE
66135: LESSEQUAL
66136: IFTRUE 66140
66138: GO 66172
66140: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66141: LD_VAR 0 1
66145: PPUSH
66146: LD_VAR 0 2
66150: PPUSH
66151: LD_VAR 0 3
66155: PPUSH
66156: LD_VAR 0 4
66160: PPUSH
66161: LD_VAR 0 5
66165: PPUSH
66166: CALL 66953 0 5
66170: GO 66249
66172: LD_INT 300
66174: DOUBLE
66175: GREATEREQUAL
66176: IFFALSE 66184
66178: LD_INT 399
66180: DOUBLE
66181: LESSEQUAL
66182: IFTRUE 66186
66184: GO 66248
66186: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66187: LD_VAR 0 1
66191: PPUSH
66192: LD_VAR 0 2
66196: PPUSH
66197: LD_VAR 0 3
66201: PPUSH
66202: LD_VAR 0 4
66206: PPUSH
66207: LD_VAR 0 5
66211: PPUSH
66212: LD_VAR 0 6
66216: PPUSH
66217: LD_VAR 0 7
66221: PPUSH
66222: LD_VAR 0 8
66226: PPUSH
66227: LD_VAR 0 9
66231: PPUSH
66232: LD_VAR 0 10
66236: PPUSH
66237: LD_VAR 0 11
66241: PPUSH
66242: CALL 62674 0 11
66246: GO 66249
66248: POP
// end ;
66249: PPOPN 11
66251: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66252: LD_VAR 0 1
66256: PPUSH
66257: LD_VAR 0 2
66261: PPUSH
66262: LD_VAR 0 3
66266: PPUSH
66267: LD_VAR 0 4
66271: PPUSH
66272: LD_VAR 0 5
66276: PPUSH
66277: CALL 66334 0 5
// end ; end_of_file
66281: PPOPN 5
66283: END
// export function SOS_UnitDestroyed ( un ) ; begin
66284: LD_INT 0
66286: PPUSH
// ComRadiation ( un ) ;
66287: LD_VAR 0 1
66291: PPUSH
66292: CALL 67373 0 1
// end ;
66296: LD_VAR 0 2
66300: RET
// export function SOS_UnitKamikazed ( un ) ; begin
66301: LD_INT 0
66303: PPUSH
// ComRadiation ( un ) ;
66304: LD_VAR 0 1
66308: PPUSH
66309: CALL 67373 0 1
// end ;
66313: LD_VAR 0 2
66317: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66318: LD_INT 0
66320: PPUSH
// end ;
66321: LD_VAR 0 4
66325: RET
// export function SOS_Command ( cmd ) ; begin
66326: LD_INT 0
66328: PPUSH
// end ;
66329: LD_VAR 0 2
66333: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66334: LD_INT 0
66336: PPUSH
// end ;
66337: LD_VAR 0 6
66341: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
66342: LD_INT 0
66344: PPUSH
66345: PPUSH
66346: PPUSH
66347: PPUSH
// if not vehicle or not factory then
66348: LD_VAR 0 1
66352: NOT
66353: IFTRUE 66362
66355: PUSH
66356: LD_VAR 0 2
66360: NOT
66361: OR
66362: IFFALSE 66366
// exit ;
66364: GO 66948
// if not factoryWaypoints then
66366: LD_EXP 88
66370: NOT
66371: IFFALSE 66375
// exit ;
66373: GO 66948
// for i := 1 to Count ( factoryWaypoints ) do
66375: LD_ADDR_VAR 0 4
66379: PUSH
66380: DOUBLE
66381: LD_INT 1
66383: DEC
66384: ST_TO_ADDR
66385: LD_EXP 88
66389: PPUSH
66390: CALL 8663 0 1
66394: PUSH
66395: FOR_TO
66396: IFFALSE 66946
// if factoryWaypoints [ i ] [ 2 ] = factory then
66398: LD_EXP 88
66402: PUSH
66403: LD_VAR 0 4
66407: ARRAY
66408: PUSH
66409: LD_INT 2
66411: ARRAY
66412: PUSH
66413: LD_VAR 0 2
66417: EQUAL
66418: IFFALSE 66944
// begin if GetControl ( vehicle ) = control_manual then
66420: LD_VAR 0 1
66424: PPUSH
66425: CALL_OW 263
66429: PUSH
66430: LD_INT 1
66432: EQUAL
66433: IFFALSE 66797
// begin driver := IsDrivenBy ( vehicle ) ;
66435: LD_ADDR_VAR 0 5
66439: PUSH
66440: LD_VAR 0 1
66444: PPUSH
66445: CALL_OW 311
66449: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
66450: LD_VAR 0 5
66454: PUSH
66455: LD_EXP 89
66459: IN
66460: IFTRUE 66474
66462: PUSH
66463: LD_VAR 0 1
66467: PUSH
66468: LD_EXP 89
66472: IN
66473: OR
66474: IFFALSE 66480
// exit ;
66476: POP
66477: POP
66478: GO 66948
// if not HasTask ( driver ) then
66480: LD_VAR 0 5
66484: PPUSH
66485: CALL_OW 314
66489: NOT
66490: IFFALSE 66795
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
66492: LD_ADDR_EXP 89
66496: PUSH
66497: LD_EXP 89
66501: PPUSH
66502: LD_VAR 0 5
66506: PPUSH
66507: CALL 44595 0 2
66511: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
66512: LD_ADDR_EXP 89
66516: PUSH
66517: LD_EXP 89
66521: PPUSH
66522: LD_VAR 0 1
66526: PPUSH
66527: CALL 44595 0 2
66531: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
66532: LD_ADDR_VAR 0 6
66536: PUSH
66537: LD_EXP 88
66541: PUSH
66542: LD_VAR 0 4
66546: ARRAY
66547: PUSH
66548: LD_INT 3
66550: ARRAY
66551: PPUSH
66552: LD_EXP 88
66556: PUSH
66557: LD_VAR 0 4
66561: ARRAY
66562: PUSH
66563: LD_INT 4
66565: ARRAY
66566: PPUSH
66567: CALL_OW 428
66571: ST_TO_ADDR
// if hex then
66572: LD_VAR 0 6
66576: IFFALSE 66594
// ComMoveUnit ( driver , hex ) else
66578: LD_VAR 0 5
66582: PPUSH
66583: LD_VAR 0 6
66587: PPUSH
66588: CALL_OW 112
66592: GO 66678
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
66594: LD_VAR 0 1
66598: PPUSH
66599: LD_EXP 88
66603: PUSH
66604: LD_VAR 0 4
66608: ARRAY
66609: PUSH
66610: LD_INT 3
66612: ARRAY
66613: PPUSH
66614: LD_EXP 88
66618: PUSH
66619: LD_VAR 0 4
66623: ARRAY
66624: PUSH
66625: LD_INT 4
66627: ARRAY
66628: PPUSH
66629: CALL_OW 297
66633: PUSH
66634: LD_INT 0
66636: GREATER
66637: IFFALSE 66678
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
66639: LD_VAR 0 5
66643: PPUSH
66644: LD_EXP 88
66648: PUSH
66649: LD_VAR 0 4
66653: ARRAY
66654: PUSH
66655: LD_INT 3
66657: ARRAY
66658: PPUSH
66659: LD_EXP 88
66663: PUSH
66664: LD_VAR 0 4
66668: ARRAY
66669: PUSH
66670: LD_INT 4
66672: ARRAY
66673: PPUSH
66674: CALL_OW 111
// AddComExitVehicle ( driver ) ;
66678: LD_VAR 0 5
66682: PPUSH
66683: CALL_OW 181
// if Multiplayer then
66687: LD_OWVAR 4
66691: IFFALSE 66740
// begin repeat wait ( 10 ) ;
66693: LD_INT 10
66695: PPUSH
66696: CALL_OW 67
// until not IsInUnit ( driver ) ;
66700: LD_VAR 0 5
66704: PPUSH
66705: CALL_OW 310
66709: NOT
66710: IFFALSE 66693
// if not HasTask ( driver ) then
66712: LD_VAR 0 5
66716: PPUSH
66717: CALL_OW 314
66721: NOT
66722: IFFALSE 66738
// ComEnterUnit ( driver , factory ) ;
66724: LD_VAR 0 5
66728: PPUSH
66729: LD_VAR 0 2
66733: PPUSH
66734: CALL_OW 120
// end else
66738: GO 66754
// AddComEnterUnit ( driver , factory ) ;
66740: LD_VAR 0 5
66744: PPUSH
66745: LD_VAR 0 2
66749: PPUSH
66750: CALL_OW 180
// wait ( 0 0$1 ) ;
66754: LD_INT 35
66756: PPUSH
66757: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
66761: LD_ADDR_EXP 89
66765: PUSH
66766: LD_EXP 89
66770: PUSH
66771: LD_VAR 0 5
66775: DIFF
66776: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
66777: LD_ADDR_EXP 89
66781: PUSH
66782: LD_EXP 89
66786: PUSH
66787: LD_VAR 0 1
66791: DIFF
66792: ST_TO_ADDR
// break ;
66793: GO 66946
// end ; end else
66795: GO 66944
// if GetControl ( vehicle ) = control_remote then
66797: LD_VAR 0 1
66801: PPUSH
66802: CALL_OW 263
66806: PUSH
66807: LD_INT 2
66809: EQUAL
66810: IFFALSE 66896
// begin wait ( 0 0$2 ) ;
66812: LD_INT 70
66814: PPUSH
66815: CALL_OW 67
// repeat wait ( 10 ) ;
66819: LD_INT 10
66821: PPUSH
66822: CALL_OW 67
// Connect ( vehicle ) ;
66826: LD_VAR 0 1
66830: PPUSH
66831: CALL 14907 0 1
// until IsControledBy ( vehicle ) ;
66835: LD_VAR 0 1
66839: PPUSH
66840: CALL_OW 312
66844: IFFALSE 66819
// wait ( 10 ) ;
66846: LD_INT 10
66848: PPUSH
66849: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
66853: LD_VAR 0 1
66857: PPUSH
66858: LD_EXP 88
66862: PUSH
66863: LD_VAR 0 4
66867: ARRAY
66868: PUSH
66869: LD_INT 3
66871: ARRAY
66872: PPUSH
66873: LD_EXP 88
66877: PUSH
66878: LD_VAR 0 4
66882: ARRAY
66883: PUSH
66884: LD_INT 4
66886: ARRAY
66887: PPUSH
66888: CALL_OW 111
// break ;
66892: GO 66946
// end else
66894: GO 66944
// begin wait ( 0 0$3 ) ;
66896: LD_INT 105
66898: PPUSH
66899: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
66903: LD_VAR 0 1
66907: PPUSH
66908: LD_EXP 88
66912: PUSH
66913: LD_VAR 0 4
66917: ARRAY
66918: PUSH
66919: LD_INT 3
66921: ARRAY
66922: PPUSH
66923: LD_EXP 88
66927: PUSH
66928: LD_VAR 0 4
66932: ARRAY
66933: PUSH
66934: LD_INT 4
66936: ARRAY
66937: PPUSH
66938: CALL_OW 111
// break ;
66942: GO 66946
// end ; end ;
66944: GO 66395
66946: POP
66947: POP
// end ;
66948: LD_VAR 0 3
66952: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
66953: LD_INT 0
66955: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
66956: LD_VAR 0 1
66960: PUSH
66961: LD_INT 250
66963: EQUAL
66964: IFFALSE 66981
66966: PUSH
66967: LD_VAR 0 2
66971: PPUSH
66972: CALL_OW 264
66976: PUSH
66977: LD_INT 81
66979: EQUAL
66980: AND
66981: IFFALSE 67002
// MinerPlaceMine ( unit , x , y ) ;
66983: LD_VAR 0 2
66987: PPUSH
66988: LD_VAR 0 4
66992: PPUSH
66993: LD_VAR 0 5
66997: PPUSH
66998: CALL 70134 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
67002: LD_VAR 0 1
67006: PUSH
67007: LD_INT 251
67009: EQUAL
67010: IFFALSE 67027
67012: PUSH
67013: LD_VAR 0 2
67017: PPUSH
67018: CALL_OW 264
67022: PUSH
67023: LD_INT 81
67025: EQUAL
67026: AND
67027: IFFALSE 67048
// MinerDetonateMine ( unit , x , y ) ;
67029: LD_VAR 0 2
67033: PPUSH
67034: LD_VAR 0 4
67038: PPUSH
67039: LD_VAR 0 5
67043: PPUSH
67044: CALL 70413 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
67048: LD_VAR 0 1
67052: PUSH
67053: LD_INT 252
67055: EQUAL
67056: IFFALSE 67073
67058: PUSH
67059: LD_VAR 0 2
67063: PPUSH
67064: CALL_OW 264
67068: PUSH
67069: LD_INT 81
67071: EQUAL
67072: AND
67073: IFFALSE 67094
// MinerCreateMinefield ( unit , x , y ) ;
67075: LD_VAR 0 2
67079: PPUSH
67080: LD_VAR 0 4
67084: PPUSH
67085: LD_VAR 0 5
67089: PPUSH
67090: CALL 70832 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
67094: LD_VAR 0 1
67098: PUSH
67099: LD_INT 253
67101: EQUAL
67102: IFFALSE 67119
67104: PUSH
67105: LD_VAR 0 2
67109: PPUSH
67110: CALL_OW 257
67114: PUSH
67115: LD_INT 5
67117: EQUAL
67118: AND
67119: IFFALSE 67140
// ComBinocular ( unit , x , y ) ;
67121: LD_VAR 0 2
67125: PPUSH
67126: LD_VAR 0 4
67130: PPUSH
67131: LD_VAR 0 5
67135: PPUSH
67136: CALL 71207 0 3
// if selectedUnit then
67140: LD_VAR 0 3
67144: IFFALSE 67204
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67146: LD_VAR 0 1
67150: PUSH
67151: LD_INT 254
67153: EQUAL
67154: IFFALSE 67171
67156: PUSH
67157: LD_VAR 0 2
67161: PPUSH
67162: CALL_OW 264
67166: PUSH
67167: LD_INT 99
67169: EQUAL
67170: AND
67171: IFFALSE 67188
67173: PUSH
67174: LD_VAR 0 3
67178: PPUSH
67179: CALL_OW 263
67183: PUSH
67184: LD_INT 3
67186: EQUAL
67187: AND
67188: IFFALSE 67204
// HackDestroyVehicle ( unit , selectedUnit ) ;
67190: LD_VAR 0 2
67194: PPUSH
67195: LD_VAR 0 3
67199: PPUSH
67200: CALL 69494 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67204: LD_VAR 0 1
67208: PUSH
67209: LD_INT 255
67211: EQUAL
67212: IFFALSE 67236
67214: PUSH
67215: LD_VAR 0 2
67219: PPUSH
67220: CALL_OW 264
67224: PUSH
67225: LD_INT 14
67227: PUSH
67228: LD_INT 53
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: IN
67235: AND
67236: IFFALSE 67254
67238: PUSH
67239: LD_VAR 0 4
67243: PPUSH
67244: LD_VAR 0 5
67248: PPUSH
67249: CALL_OW 488
67253: AND
67254: IFFALSE 67278
// CutTreeXYR ( unit , x , y , 12 ) ;
67256: LD_VAR 0 2
67260: PPUSH
67261: LD_VAR 0 4
67265: PPUSH
67266: LD_VAR 0 5
67270: PPUSH
67271: LD_INT 12
67273: PPUSH
67274: CALL 67469 0 4
// if cmd = 256 then
67278: LD_VAR 0 1
67282: PUSH
67283: LD_INT 256
67285: EQUAL
67286: IFFALSE 67307
// SetFactoryWaypoint ( unit , x , y ) ;
67288: LD_VAR 0 2
67292: PPUSH
67293: LD_VAR 0 4
67297: PPUSH
67298: LD_VAR 0 5
67302: PPUSH
67303: CALL 64666 0 3
// if cmd = 257 then
67307: LD_VAR 0 1
67311: PUSH
67312: LD_INT 257
67314: EQUAL
67315: IFFALSE 67336
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67317: LD_VAR 0 2
67321: PPUSH
67322: LD_VAR 0 4
67326: PPUSH
67327: LD_VAR 0 5
67331: PPUSH
67332: CALL 65162 0 3
// if cmd = 258 then
67336: LD_VAR 0 1
67340: PUSH
67341: LD_INT 258
67343: EQUAL
67344: IFFALSE 67368
// BurnTreeXYR ( unit , x , y , 8 ) ;
67346: LD_VAR 0 2
67350: PPUSH
67351: LD_VAR 0 4
67355: PPUSH
67356: LD_VAR 0 5
67360: PPUSH
67361: LD_INT 8
67363: PPUSH
67364: CALL 67869 0 4
// end ;
67368: LD_VAR 0 6
67372: RET
// export function ComRadiation ( un ) ; var eff ; begin
67373: LD_INT 0
67375: PPUSH
67376: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
67377: LD_VAR 0 1
67381: PPUSH
67382: CALL_OW 264
67386: PUSH
67387: LD_INT 91
67389: NONEQUAL
67390: IFFALSE 67394
// exit ;
67392: GO 67464
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
67394: LD_INT 68
67396: PPUSH
67397: LD_VAR 0 1
67401: PPUSH
67402: CALL_OW 255
67406: PPUSH
67407: CALL_OW 321
67411: PUSH
67412: LD_INT 2
67414: EQUAL
67415: IFFALSE 67427
// eff := 50 else
67417: LD_ADDR_VAR 0 3
67421: PUSH
67422: LD_INT 50
67424: ST_TO_ADDR
67425: GO 67435
// eff := 25 ;
67427: LD_ADDR_VAR 0 3
67431: PUSH
67432: LD_INT 25
67434: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67435: LD_VAR 0 1
67439: PPUSH
67440: CALL_OW 250
67444: PPUSH
67445: LD_VAR 0 1
67449: PPUSH
67450: CALL_OW 251
67454: PPUSH
67455: LD_VAR 0 3
67459: PPUSH
67460: CALL_OW 495
// end ;
67464: LD_VAR 0 2
67468: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67469: LD_INT 0
67471: PPUSH
67472: PPUSH
67473: PPUSH
67474: PPUSH
67475: PPUSH
67476: PPUSH
67477: PPUSH
67478: PPUSH
67479: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67480: LD_VAR 0 1
67484: PPUSH
67485: CALL_OW 302
67489: NOT
67490: IFTRUE 67509
67492: PUSH
67493: LD_VAR 0 2
67497: PPUSH
67498: LD_VAR 0 3
67502: PPUSH
67503: CALL_OW 488
67507: NOT
67508: OR
67509: IFTRUE 67518
67511: PUSH
67512: LD_VAR 0 4
67516: NOT
67517: OR
67518: IFFALSE 67522
// exit ;
67520: GO 67864
// list := [ ] ;
67522: LD_ADDR_VAR 0 13
67526: PUSH
67527: EMPTY
67528: ST_TO_ADDR
// if x - r < 0 then
67529: LD_VAR 0 2
67533: PUSH
67534: LD_VAR 0 4
67538: MINUS
67539: PUSH
67540: LD_INT 0
67542: LESS
67543: IFFALSE 67555
// min_x := 0 else
67545: LD_ADDR_VAR 0 7
67549: PUSH
67550: LD_INT 0
67552: ST_TO_ADDR
67553: GO 67571
// min_x := x - r ;
67555: LD_ADDR_VAR 0 7
67559: PUSH
67560: LD_VAR 0 2
67564: PUSH
67565: LD_VAR 0 4
67569: MINUS
67570: ST_TO_ADDR
// if y - r < 0 then
67571: LD_VAR 0 3
67575: PUSH
67576: LD_VAR 0 4
67580: MINUS
67581: PUSH
67582: LD_INT 0
67584: LESS
67585: IFFALSE 67597
// min_y := 0 else
67587: LD_ADDR_VAR 0 8
67591: PUSH
67592: LD_INT 0
67594: ST_TO_ADDR
67595: GO 67613
// min_y := y - r ;
67597: LD_ADDR_VAR 0 8
67601: PUSH
67602: LD_VAR 0 3
67606: PUSH
67607: LD_VAR 0 4
67611: MINUS
67612: ST_TO_ADDR
// max_x := x + r ;
67613: LD_ADDR_VAR 0 9
67617: PUSH
67618: LD_VAR 0 2
67622: PUSH
67623: LD_VAR 0 4
67627: PLUS
67628: ST_TO_ADDR
// max_y := y + r ;
67629: LD_ADDR_VAR 0 10
67633: PUSH
67634: LD_VAR 0 3
67638: PUSH
67639: LD_VAR 0 4
67643: PLUS
67644: ST_TO_ADDR
// for _x = min_x to max_x do
67645: LD_ADDR_VAR 0 11
67649: PUSH
67650: DOUBLE
67651: LD_VAR 0 7
67655: DEC
67656: ST_TO_ADDR
67657: LD_VAR 0 9
67661: PUSH
67662: FOR_TO
67663: IFFALSE 67782
// for _y = min_y to max_y do
67665: LD_ADDR_VAR 0 12
67669: PUSH
67670: DOUBLE
67671: LD_VAR 0 8
67675: DEC
67676: ST_TO_ADDR
67677: LD_VAR 0 10
67681: PUSH
67682: FOR_TO
67683: IFFALSE 67778
// begin if not ValidHex ( _x , _y ) then
67685: LD_VAR 0 11
67689: PPUSH
67690: LD_VAR 0 12
67694: PPUSH
67695: CALL_OW 488
67699: NOT
67700: IFFALSE 67704
// continue ;
67702: GO 67682
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67704: LD_VAR 0 11
67708: PPUSH
67709: LD_VAR 0 12
67713: PPUSH
67714: CALL_OW 351
67718: IFFALSE 67736
67720: PUSH
67721: LD_VAR 0 11
67725: PPUSH
67726: LD_VAR 0 12
67730: PPUSH
67731: CALL_OW 554
67735: AND
67736: IFFALSE 67776
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67738: LD_ADDR_VAR 0 13
67742: PUSH
67743: LD_VAR 0 13
67747: PPUSH
67748: LD_VAR 0 13
67752: PUSH
67753: LD_INT 1
67755: PLUS
67756: PPUSH
67757: LD_VAR 0 11
67761: PUSH
67762: LD_VAR 0 12
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PPUSH
67771: CALL_OW 2
67775: ST_TO_ADDR
// end ;
67776: GO 67682
67778: POP
67779: POP
67780: GO 67662
67782: POP
67783: POP
// if not list then
67784: LD_VAR 0 13
67788: NOT
67789: IFFALSE 67793
// exit ;
67791: GO 67864
// for i in list do
67793: LD_ADDR_VAR 0 6
67797: PUSH
67798: LD_VAR 0 13
67802: PUSH
67803: FOR_IN
67804: IFFALSE 67862
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67806: LD_VAR 0 1
67810: PPUSH
67811: LD_STRING M
67813: PUSH
67814: LD_VAR 0 6
67818: PUSH
67819: LD_INT 1
67821: ARRAY
67822: PUSH
67823: LD_VAR 0 6
67827: PUSH
67828: LD_INT 2
67830: ARRAY
67831: PUSH
67832: LD_INT 0
67834: PUSH
67835: LD_INT 0
67837: PUSH
67838: LD_INT 0
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: PPUSH
67856: CALL_OW 447
67860: GO 67803
67862: POP
67863: POP
// end ;
67864: LD_VAR 0 5
67868: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
67869: LD_INT 0
67871: PPUSH
67872: PPUSH
67873: PPUSH
67874: PPUSH
67875: PPUSH
67876: PPUSH
67877: PPUSH
67878: PPUSH
67879: PPUSH
67880: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
67881: LD_VAR 0 1
67885: PPUSH
67886: CALL_OW 302
67890: NOT
67891: IFTRUE 67910
67893: PUSH
67894: LD_VAR 0 2
67898: PPUSH
67899: LD_VAR 0 3
67903: PPUSH
67904: CALL_OW 488
67908: NOT
67909: OR
67910: IFTRUE 67919
67912: PUSH
67913: LD_VAR 0 4
67917: NOT
67918: OR
67919: IFFALSE 67923
// exit ;
67921: GO 68440
// list := [ ] ;
67923: LD_ADDR_VAR 0 13
67927: PUSH
67928: EMPTY
67929: ST_TO_ADDR
// if x - r < 0 then
67930: LD_VAR 0 2
67934: PUSH
67935: LD_VAR 0 4
67939: MINUS
67940: PUSH
67941: LD_INT 0
67943: LESS
67944: IFFALSE 67956
// min_x := 0 else
67946: LD_ADDR_VAR 0 7
67950: PUSH
67951: LD_INT 0
67953: ST_TO_ADDR
67954: GO 67972
// min_x := x - r ;
67956: LD_ADDR_VAR 0 7
67960: PUSH
67961: LD_VAR 0 2
67965: PUSH
67966: LD_VAR 0 4
67970: MINUS
67971: ST_TO_ADDR
// if y - r < 0 then
67972: LD_VAR 0 3
67976: PUSH
67977: LD_VAR 0 4
67981: MINUS
67982: PUSH
67983: LD_INT 0
67985: LESS
67986: IFFALSE 67998
// min_y := 0 else
67988: LD_ADDR_VAR 0 8
67992: PUSH
67993: LD_INT 0
67995: ST_TO_ADDR
67996: GO 68014
// min_y := y - r ;
67998: LD_ADDR_VAR 0 8
68002: PUSH
68003: LD_VAR 0 3
68007: PUSH
68008: LD_VAR 0 4
68012: MINUS
68013: ST_TO_ADDR
// max_x := x + r ;
68014: LD_ADDR_VAR 0 9
68018: PUSH
68019: LD_VAR 0 2
68023: PUSH
68024: LD_VAR 0 4
68028: PLUS
68029: ST_TO_ADDR
// max_y := y + r ;
68030: LD_ADDR_VAR 0 10
68034: PUSH
68035: LD_VAR 0 3
68039: PUSH
68040: LD_VAR 0 4
68044: PLUS
68045: ST_TO_ADDR
// for _x = min_x to max_x do
68046: LD_ADDR_VAR 0 11
68050: PUSH
68051: DOUBLE
68052: LD_VAR 0 7
68056: DEC
68057: ST_TO_ADDR
68058: LD_VAR 0 9
68062: PUSH
68063: FOR_TO
68064: IFFALSE 68183
// for _y = min_y to max_y do
68066: LD_ADDR_VAR 0 12
68070: PUSH
68071: DOUBLE
68072: LD_VAR 0 8
68076: DEC
68077: ST_TO_ADDR
68078: LD_VAR 0 10
68082: PUSH
68083: FOR_TO
68084: IFFALSE 68179
// begin if not ValidHex ( _x , _y ) then
68086: LD_VAR 0 11
68090: PPUSH
68091: LD_VAR 0 12
68095: PPUSH
68096: CALL_OW 488
68100: NOT
68101: IFFALSE 68105
// continue ;
68103: GO 68083
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68105: LD_VAR 0 11
68109: PPUSH
68110: LD_VAR 0 12
68114: PPUSH
68115: CALL_OW 351
68119: IFFALSE 68137
68121: PUSH
68122: LD_VAR 0 11
68126: PPUSH
68127: LD_VAR 0 12
68131: PPUSH
68132: CALL_OW 554
68136: AND
68137: IFFALSE 68177
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68139: LD_ADDR_VAR 0 13
68143: PUSH
68144: LD_VAR 0 13
68148: PPUSH
68149: LD_VAR 0 13
68153: PUSH
68154: LD_INT 1
68156: PLUS
68157: PPUSH
68158: LD_VAR 0 11
68162: PUSH
68163: LD_VAR 0 12
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PPUSH
68172: CALL_OW 2
68176: ST_TO_ADDR
// end ;
68177: GO 68083
68179: POP
68180: POP
68181: GO 68063
68183: POP
68184: POP
// if not list then
68185: LD_VAR 0 13
68189: NOT
68190: IFFALSE 68194
// exit ;
68192: GO 68440
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
68194: LD_ADDR_VAR 0 13
68198: PUSH
68199: LD_VAR 0 1
68203: PPUSH
68204: LD_VAR 0 13
68208: PPUSH
68209: LD_INT 1
68211: PPUSH
68212: LD_INT 1
68214: PPUSH
68215: CALL 12035 0 4
68219: ST_TO_ADDR
// ComStop ( flame ) ;
68220: LD_VAR 0 1
68224: PPUSH
68225: CALL_OW 141
// for i in list do
68229: LD_ADDR_VAR 0 6
68233: PUSH
68234: LD_VAR 0 13
68238: PUSH
68239: FOR_IN
68240: IFFALSE 68271
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68242: LD_VAR 0 1
68246: PPUSH
68247: LD_VAR 0 6
68251: PUSH
68252: LD_INT 1
68254: ARRAY
68255: PPUSH
68256: LD_VAR 0 6
68260: PUSH
68261: LD_INT 2
68263: ARRAY
68264: PPUSH
68265: CALL_OW 176
68269: GO 68239
68271: POP
68272: POP
// repeat wait ( 0 0$1 ) ;
68273: LD_INT 35
68275: PPUSH
68276: CALL_OW 67
// task := GetTaskList ( flame ) ;
68280: LD_ADDR_VAR 0 14
68284: PUSH
68285: LD_VAR 0 1
68289: PPUSH
68290: CALL_OW 437
68294: ST_TO_ADDR
// if not task then
68295: LD_VAR 0 14
68299: NOT
68300: IFFALSE 68304
// exit ;
68302: GO 68440
// if task [ 1 ] [ 1 ] <> | then
68304: LD_VAR 0 14
68308: PUSH
68309: LD_INT 1
68311: ARRAY
68312: PUSH
68313: LD_INT 1
68315: ARRAY
68316: PUSH
68317: LD_STRING |
68319: NONEQUAL
68320: IFFALSE 68324
// exit ;
68322: GO 68440
// _x := task [ 1 ] [ 2 ] ;
68324: LD_ADDR_VAR 0 11
68328: PUSH
68329: LD_VAR 0 14
68333: PUSH
68334: LD_INT 1
68336: ARRAY
68337: PUSH
68338: LD_INT 2
68340: ARRAY
68341: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
68342: LD_ADDR_VAR 0 12
68346: PUSH
68347: LD_VAR 0 14
68351: PUSH
68352: LD_INT 1
68354: ARRAY
68355: PUSH
68356: LD_INT 3
68358: ARRAY
68359: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
68360: LD_VAR 0 11
68364: PPUSH
68365: LD_VAR 0 12
68369: PPUSH
68370: CALL_OW 351
68374: NOT
68375: IFTRUE 68394
68377: PUSH
68378: LD_VAR 0 11
68382: PPUSH
68383: LD_VAR 0 12
68387: PPUSH
68388: CALL_OW 554
68392: NOT
68393: OR
68394: IFFALSE 68428
// begin task := Delete ( task , 1 ) ;
68396: LD_ADDR_VAR 0 14
68400: PUSH
68401: LD_VAR 0 14
68405: PPUSH
68406: LD_INT 1
68408: PPUSH
68409: CALL_OW 3
68413: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
68414: LD_VAR 0 1
68418: PPUSH
68419: LD_VAR 0 14
68423: PPUSH
68424: CALL_OW 446
// end ; until not HasTask ( flame ) ;
68428: LD_VAR 0 1
68432: PPUSH
68433: CALL_OW 314
68437: NOT
68438: IFFALSE 68273
// end ;
68440: LD_VAR 0 5
68444: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
68445: LD_EXP 92
68449: NOT
68450: IFFALSE 68500
68452: GO 68454
68454: DISABLE
// begin initHack := true ;
68455: LD_ADDR_EXP 92
68459: PUSH
68460: LD_INT 1
68462: ST_TO_ADDR
// hackTanks := [ ] ;
68463: LD_ADDR_EXP 93
68467: PUSH
68468: EMPTY
68469: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
68470: LD_ADDR_EXP 94
68474: PUSH
68475: EMPTY
68476: ST_TO_ADDR
// hackLimit := 3 ;
68477: LD_ADDR_EXP 95
68481: PUSH
68482: LD_INT 3
68484: ST_TO_ADDR
// hackDist := 12 ;
68485: LD_ADDR_EXP 96
68489: PUSH
68490: LD_INT 12
68492: ST_TO_ADDR
// hackCounter := [ ] ;
68493: LD_ADDR_EXP 97
68497: PUSH
68498: EMPTY
68499: ST_TO_ADDR
// end ;
68500: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
68501: LD_EXP 92
68505: IFFALSE 68523
68507: PUSH
68508: LD_INT 34
68510: PUSH
68511: LD_INT 99
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PPUSH
68518: CALL_OW 69
68522: AND
68523: IFFALSE 68776
68525: GO 68527
68527: DISABLE
68528: LD_INT 0
68530: PPUSH
68531: PPUSH
// begin enable ;
68532: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68533: LD_ADDR_VAR 0 1
68537: PUSH
68538: LD_INT 34
68540: PUSH
68541: LD_INT 99
68543: PUSH
68544: EMPTY
68545: LIST
68546: LIST
68547: PPUSH
68548: CALL_OW 69
68552: PUSH
68553: FOR_IN
68554: IFFALSE 68774
// begin if not i in hackTanks then
68556: LD_VAR 0 1
68560: PUSH
68561: LD_EXP 93
68565: IN
68566: NOT
68567: IFFALSE 68650
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68569: LD_ADDR_EXP 93
68573: PUSH
68574: LD_EXP 93
68578: PPUSH
68579: LD_EXP 93
68583: PUSH
68584: LD_INT 1
68586: PLUS
68587: PPUSH
68588: LD_VAR 0 1
68592: PPUSH
68593: CALL_OW 1
68597: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68598: LD_ADDR_EXP 94
68602: PUSH
68603: LD_EXP 94
68607: PPUSH
68608: LD_EXP 94
68612: PUSH
68613: LD_INT 1
68615: PLUS
68616: PPUSH
68617: EMPTY
68618: PPUSH
68619: CALL_OW 1
68623: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68624: LD_ADDR_EXP 97
68628: PUSH
68629: LD_EXP 97
68633: PPUSH
68634: LD_EXP 97
68638: PUSH
68639: LD_INT 1
68641: PLUS
68642: PPUSH
68643: EMPTY
68644: PPUSH
68645: CALL_OW 1
68649: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68650: LD_VAR 0 1
68654: PPUSH
68655: CALL_OW 302
68659: NOT
68660: IFFALSE 68673
// begin HackUnlinkAll ( i ) ;
68662: LD_VAR 0 1
68666: PPUSH
68667: CALL 68779 0 1
// continue ;
68671: GO 68553
// end ; HackCheckCapturedStatus ( i ) ;
68673: LD_VAR 0 1
68677: PPUSH
68678: CALL 69224 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
68682: LD_ADDR_VAR 0 2
68686: PUSH
68687: LD_INT 81
68689: PUSH
68690: LD_VAR 0 1
68694: PPUSH
68695: CALL_OW 255
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 33
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 91
68716: PUSH
68717: LD_VAR 0 1
68721: PUSH
68722: LD_EXP 96
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 50
68734: PUSH
68735: EMPTY
68736: LIST
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: PPUSH
68744: CALL_OW 69
68748: ST_TO_ADDR
// if not tmp then
68749: LD_VAR 0 2
68753: NOT
68754: IFFALSE 68758
// continue ;
68756: GO 68553
// HackLink ( i , tmp ) ;
68758: LD_VAR 0 1
68762: PPUSH
68763: LD_VAR 0 2
68767: PPUSH
68768: CALL 68915 0 2
// end ;
68772: GO 68553
68774: POP
68775: POP
// end ;
68776: PPOPN 2
68778: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
68779: LD_INT 0
68781: PPUSH
68782: PPUSH
68783: PPUSH
// if not hack in hackTanks then
68784: LD_VAR 0 1
68788: PUSH
68789: LD_EXP 93
68793: IN
68794: NOT
68795: IFFALSE 68799
// exit ;
68797: GO 68910
// index := GetElementIndex ( hackTanks , hack ) ;
68799: LD_ADDR_VAR 0 4
68803: PUSH
68804: LD_EXP 93
68808: PPUSH
68809: LD_VAR 0 1
68813: PPUSH
68814: CALL 11330 0 2
68818: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
68819: LD_EXP 94
68823: PUSH
68824: LD_VAR 0 4
68828: ARRAY
68829: IFFALSE 68910
// begin for i in hackTanksCaptured [ index ] do
68831: LD_ADDR_VAR 0 3
68835: PUSH
68836: LD_EXP 94
68840: PUSH
68841: LD_VAR 0 4
68845: ARRAY
68846: PUSH
68847: FOR_IN
68848: IFFALSE 68874
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
68850: LD_VAR 0 3
68854: PUSH
68855: LD_INT 1
68857: ARRAY
68858: PPUSH
68859: LD_VAR 0 3
68863: PUSH
68864: LD_INT 2
68866: ARRAY
68867: PPUSH
68868: CALL_OW 235
68872: GO 68847
68874: POP
68875: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
68876: LD_ADDR_EXP 94
68880: PUSH
68881: LD_EXP 94
68885: PPUSH
68886: LD_VAR 0 4
68890: PPUSH
68891: EMPTY
68892: PPUSH
68893: CALL_OW 1
68897: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
68898: LD_VAR 0 1
68902: PPUSH
68903: LD_INT 0
68905: PPUSH
68906: CALL_OW 505
// end ; end ;
68910: LD_VAR 0 2
68914: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
68915: LD_INT 0
68917: PPUSH
68918: PPUSH
68919: PPUSH
// if not hack in hackTanks or not vehicles then
68920: LD_VAR 0 1
68924: PUSH
68925: LD_EXP 93
68929: IN
68930: NOT
68931: IFTRUE 68940
68933: PUSH
68934: LD_VAR 0 2
68938: NOT
68939: OR
68940: IFFALSE 68944
// exit ;
68942: GO 69219
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
68944: LD_ADDR_VAR 0 2
68948: PUSH
68949: LD_VAR 0 1
68953: PPUSH
68954: LD_VAR 0 2
68958: PPUSH
68959: LD_INT 1
68961: PPUSH
68962: LD_INT 1
68964: PPUSH
68965: CALL 11982 0 4
68969: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
68970: LD_ADDR_VAR 0 5
68974: PUSH
68975: LD_EXP 93
68979: PPUSH
68980: LD_VAR 0 1
68984: PPUSH
68985: CALL 11330 0 2
68989: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
68990: LD_EXP 94
68994: PUSH
68995: LD_VAR 0 5
68999: ARRAY
69000: PUSH
69001: LD_EXP 95
69005: LESS
69006: IFFALSE 69195
// begin for i := 1 to vehicles do
69008: LD_ADDR_VAR 0 4
69012: PUSH
69013: DOUBLE
69014: LD_INT 1
69016: DEC
69017: ST_TO_ADDR
69018: LD_VAR 0 2
69022: PUSH
69023: FOR_TO
69024: IFFALSE 69193
// begin if hackTanksCaptured [ index ] = hackLimit then
69026: LD_EXP 94
69030: PUSH
69031: LD_VAR 0 5
69035: ARRAY
69036: PUSH
69037: LD_EXP 95
69041: EQUAL
69042: IFFALSE 69046
// break ;
69044: GO 69193
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69046: LD_ADDR_EXP 97
69050: PUSH
69051: LD_EXP 97
69055: PPUSH
69056: LD_VAR 0 5
69060: PPUSH
69061: LD_EXP 97
69065: PUSH
69066: LD_VAR 0 5
69070: ARRAY
69071: PUSH
69072: LD_INT 1
69074: PLUS
69075: PPUSH
69076: CALL_OW 1
69080: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69081: LD_ADDR_EXP 94
69085: PUSH
69086: LD_EXP 94
69090: PPUSH
69091: LD_VAR 0 5
69095: PUSH
69096: LD_EXP 94
69100: PUSH
69101: LD_VAR 0 5
69105: ARRAY
69106: PUSH
69107: LD_INT 1
69109: PLUS
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PPUSH
69115: LD_VAR 0 2
69119: PUSH
69120: LD_VAR 0 4
69124: ARRAY
69125: PUSH
69126: LD_VAR 0 2
69130: PUSH
69131: LD_VAR 0 4
69135: ARRAY
69136: PPUSH
69137: CALL_OW 255
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PPUSH
69146: CALL 11547 0 3
69150: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69151: LD_VAR 0 2
69155: PUSH
69156: LD_VAR 0 4
69160: ARRAY
69161: PPUSH
69162: LD_VAR 0 1
69166: PPUSH
69167: CALL_OW 255
69171: PPUSH
69172: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69176: LD_VAR 0 2
69180: PUSH
69181: LD_VAR 0 4
69185: ARRAY
69186: PPUSH
69187: CALL_OW 141
// end ;
69191: GO 69023
69193: POP
69194: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69195: LD_VAR 0 1
69199: PPUSH
69200: LD_EXP 94
69204: PUSH
69205: LD_VAR 0 5
69209: ARRAY
69210: PUSH
69211: LD_INT 0
69213: PLUS
69214: PPUSH
69215: CALL_OW 505
// end ;
69219: LD_VAR 0 3
69223: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69224: LD_INT 0
69226: PPUSH
69227: PPUSH
69228: PPUSH
69229: PPUSH
// if not hack in hackTanks then
69230: LD_VAR 0 1
69234: PUSH
69235: LD_EXP 93
69239: IN
69240: NOT
69241: IFFALSE 69245
// exit ;
69243: GO 69489
// index := GetElementIndex ( hackTanks , hack ) ;
69245: LD_ADDR_VAR 0 4
69249: PUSH
69250: LD_EXP 93
69254: PPUSH
69255: LD_VAR 0 1
69259: PPUSH
69260: CALL 11330 0 2
69264: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69265: LD_ADDR_VAR 0 3
69269: PUSH
69270: DOUBLE
69271: LD_EXP 94
69275: PUSH
69276: LD_VAR 0 4
69280: ARRAY
69281: INC
69282: ST_TO_ADDR
69283: LD_INT 1
69285: PUSH
69286: FOR_DOWNTO
69287: IFFALSE 69463
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69289: LD_ADDR_VAR 0 5
69293: PUSH
69294: LD_EXP 94
69298: PUSH
69299: LD_VAR 0 4
69303: ARRAY
69304: PUSH
69305: LD_VAR 0 3
69309: ARRAY
69310: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69311: LD_VAR 0 5
69315: PUSH
69316: LD_INT 1
69318: ARRAY
69319: PPUSH
69320: CALL_OW 302
69324: NOT
69325: IFTRUE 69353
69327: PUSH
69328: LD_VAR 0 5
69332: PUSH
69333: LD_INT 1
69335: ARRAY
69336: PPUSH
69337: CALL_OW 255
69341: PUSH
69342: LD_VAR 0 1
69346: PPUSH
69347: CALL_OW 255
69351: NONEQUAL
69352: OR
69353: IFFALSE 69461
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
69355: LD_VAR 0 5
69359: PUSH
69360: LD_INT 1
69362: ARRAY
69363: PPUSH
69364: CALL_OW 305
69368: IFFALSE 69396
69370: PUSH
69371: LD_VAR 0 5
69375: PUSH
69376: LD_INT 1
69378: ARRAY
69379: PPUSH
69380: CALL_OW 255
69384: PUSH
69385: LD_VAR 0 1
69389: PPUSH
69390: CALL_OW 255
69394: EQUAL
69395: AND
69396: IFFALSE 69420
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
69398: LD_VAR 0 5
69402: PUSH
69403: LD_INT 1
69405: ARRAY
69406: PPUSH
69407: LD_VAR 0 5
69411: PUSH
69412: LD_INT 2
69414: ARRAY
69415: PPUSH
69416: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
69420: LD_ADDR_EXP 94
69424: PUSH
69425: LD_EXP 94
69429: PPUSH
69430: LD_VAR 0 4
69434: PPUSH
69435: LD_EXP 94
69439: PUSH
69440: LD_VAR 0 4
69444: ARRAY
69445: PPUSH
69446: LD_VAR 0 3
69450: PPUSH
69451: CALL_OW 3
69455: PPUSH
69456: CALL_OW 1
69460: ST_TO_ADDR
// end ; end ;
69461: GO 69286
69463: POP
69464: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69465: LD_VAR 0 1
69469: PPUSH
69470: LD_EXP 94
69474: PUSH
69475: LD_VAR 0 4
69479: ARRAY
69480: PUSH
69481: LD_INT 0
69483: PLUS
69484: PPUSH
69485: CALL_OW 505
// end ;
69489: LD_VAR 0 2
69493: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
69494: LD_INT 0
69496: PPUSH
69497: PPUSH
69498: PPUSH
69499: PPUSH
// if not hack in hackTanks then
69500: LD_VAR 0 1
69504: PUSH
69505: LD_EXP 93
69509: IN
69510: NOT
69511: IFFALSE 69515
// exit ;
69513: GO 69600
// index := GetElementIndex ( hackTanks , hack ) ;
69515: LD_ADDR_VAR 0 5
69519: PUSH
69520: LD_EXP 93
69524: PPUSH
69525: LD_VAR 0 1
69529: PPUSH
69530: CALL 11330 0 2
69534: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69535: LD_ADDR_VAR 0 4
69539: PUSH
69540: DOUBLE
69541: LD_INT 1
69543: DEC
69544: ST_TO_ADDR
69545: LD_EXP 94
69549: PUSH
69550: LD_VAR 0 5
69554: ARRAY
69555: PUSH
69556: FOR_TO
69557: IFFALSE 69598
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69559: LD_EXP 94
69563: PUSH
69564: LD_VAR 0 5
69568: ARRAY
69569: PUSH
69570: LD_VAR 0 4
69574: ARRAY
69575: PUSH
69576: LD_INT 1
69578: ARRAY
69579: PUSH
69580: LD_VAR 0 2
69584: EQUAL
69585: IFFALSE 69596
// KillUnit ( vehicle ) ;
69587: LD_VAR 0 2
69591: PPUSH
69592: CALL_OW 66
69596: GO 69556
69598: POP
69599: POP
// end ;
69600: LD_VAR 0 3
69604: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
69605: LD_EXP 98
69609: NOT
69610: IFFALSE 69645
69612: GO 69614
69614: DISABLE
// begin initMiner := true ;
69615: LD_ADDR_EXP 98
69619: PUSH
69620: LD_INT 1
69622: ST_TO_ADDR
// minersList := [ ] ;
69623: LD_ADDR_EXP 99
69627: PUSH
69628: EMPTY
69629: ST_TO_ADDR
// minerMinesList := [ ] ;
69630: LD_ADDR_EXP 100
69634: PUSH
69635: EMPTY
69636: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
69637: LD_ADDR_EXP 101
69641: PUSH
69642: LD_INT 5
69644: ST_TO_ADDR
// end ;
69645: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
69646: LD_EXP 98
69650: IFFALSE 69668
69652: PUSH
69653: LD_INT 34
69655: PUSH
69656: LD_INT 81
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PPUSH
69663: CALL_OW 69
69667: AND
69668: IFFALSE 70131
69670: GO 69672
69672: DISABLE
69673: LD_INT 0
69675: PPUSH
69676: PPUSH
69677: PPUSH
69678: PPUSH
// begin enable ;
69679: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
69680: LD_ADDR_VAR 0 1
69684: PUSH
69685: LD_INT 34
69687: PUSH
69688: LD_INT 81
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PPUSH
69695: CALL_OW 69
69699: PUSH
69700: FOR_IN
69701: IFFALSE 69773
// begin if not i in minersList then
69703: LD_VAR 0 1
69707: PUSH
69708: LD_EXP 99
69712: IN
69713: NOT
69714: IFFALSE 69771
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
69716: LD_ADDR_EXP 99
69720: PUSH
69721: LD_EXP 99
69725: PPUSH
69726: LD_EXP 99
69730: PUSH
69731: LD_INT 1
69733: PLUS
69734: PPUSH
69735: LD_VAR 0 1
69739: PPUSH
69740: CALL_OW 1
69744: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
69745: LD_ADDR_EXP 100
69749: PUSH
69750: LD_EXP 100
69754: PPUSH
69755: LD_EXP 100
69759: PUSH
69760: LD_INT 1
69762: PLUS
69763: PPUSH
69764: EMPTY
69765: PPUSH
69766: CALL_OW 1
69770: ST_TO_ADDR
// end end ;
69771: GO 69700
69773: POP
69774: POP
// for i := minerMinesList downto 1 do
69775: LD_ADDR_VAR 0 1
69779: PUSH
69780: DOUBLE
69781: LD_EXP 100
69785: INC
69786: ST_TO_ADDR
69787: LD_INT 1
69789: PUSH
69790: FOR_DOWNTO
69791: IFFALSE 70129
// begin if IsLive ( minersList [ i ] ) then
69793: LD_EXP 99
69797: PUSH
69798: LD_VAR 0 1
69802: ARRAY
69803: PPUSH
69804: CALL_OW 300
69808: IFFALSE 69836
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
69810: LD_EXP 99
69814: PUSH
69815: LD_VAR 0 1
69819: ARRAY
69820: PPUSH
69821: LD_EXP 100
69825: PUSH
69826: LD_VAR 0 1
69830: ARRAY
69831: PPUSH
69832: CALL_OW 505
// if not minerMinesList [ i ] then
69836: LD_EXP 100
69840: PUSH
69841: LD_VAR 0 1
69845: ARRAY
69846: NOT
69847: IFFALSE 69851
// continue ;
69849: GO 69790
// for j := minerMinesList [ i ] downto 1 do
69851: LD_ADDR_VAR 0 2
69855: PUSH
69856: DOUBLE
69857: LD_EXP 100
69861: PUSH
69862: LD_VAR 0 1
69866: ARRAY
69867: INC
69868: ST_TO_ADDR
69869: LD_INT 1
69871: PUSH
69872: FOR_DOWNTO
69873: IFFALSE 70125
// begin side := GetSide ( minersList [ i ] ) ;
69875: LD_ADDR_VAR 0 3
69879: PUSH
69880: LD_EXP 99
69884: PUSH
69885: LD_VAR 0 1
69889: ARRAY
69890: PPUSH
69891: CALL_OW 255
69895: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
69896: LD_ADDR_VAR 0 4
69900: PUSH
69901: LD_EXP 100
69905: PUSH
69906: LD_VAR 0 1
69910: ARRAY
69911: PUSH
69912: LD_VAR 0 2
69916: ARRAY
69917: PUSH
69918: LD_INT 1
69920: ARRAY
69921: PPUSH
69922: LD_EXP 100
69926: PUSH
69927: LD_VAR 0 1
69931: ARRAY
69932: PUSH
69933: LD_VAR 0 2
69937: ARRAY
69938: PUSH
69939: LD_INT 2
69941: ARRAY
69942: PPUSH
69943: CALL_OW 428
69947: ST_TO_ADDR
// if not tmp then
69948: LD_VAR 0 4
69952: NOT
69953: IFFALSE 69957
// continue ;
69955: GO 69872
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
69957: LD_VAR 0 4
69961: PUSH
69962: LD_INT 81
69964: PUSH
69965: LD_VAR 0 3
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PPUSH
69974: CALL_OW 69
69978: IN
69979: IFFALSE 70029
69981: PUSH
69982: LD_EXP 100
69986: PUSH
69987: LD_VAR 0 1
69991: ARRAY
69992: PUSH
69993: LD_VAR 0 2
69997: ARRAY
69998: PUSH
69999: LD_INT 1
70001: ARRAY
70002: PPUSH
70003: LD_EXP 100
70007: PUSH
70008: LD_VAR 0 1
70012: ARRAY
70013: PUSH
70014: LD_VAR 0 2
70018: ARRAY
70019: PUSH
70020: LD_INT 2
70022: ARRAY
70023: PPUSH
70024: CALL_OW 458
70028: AND
70029: IFFALSE 70123
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70031: LD_EXP 100
70035: PUSH
70036: LD_VAR 0 1
70040: ARRAY
70041: PUSH
70042: LD_VAR 0 2
70046: ARRAY
70047: PUSH
70048: LD_INT 1
70050: ARRAY
70051: PPUSH
70052: LD_EXP 100
70056: PUSH
70057: LD_VAR 0 1
70061: ARRAY
70062: PUSH
70063: LD_VAR 0 2
70067: ARRAY
70068: PUSH
70069: LD_INT 2
70071: ARRAY
70072: PPUSH
70073: LD_VAR 0 3
70077: PPUSH
70078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70082: LD_ADDR_EXP 100
70086: PUSH
70087: LD_EXP 100
70091: PPUSH
70092: LD_VAR 0 1
70096: PPUSH
70097: LD_EXP 100
70101: PUSH
70102: LD_VAR 0 1
70106: ARRAY
70107: PPUSH
70108: LD_VAR 0 2
70112: PPUSH
70113: CALL_OW 3
70117: PPUSH
70118: CALL_OW 1
70122: ST_TO_ADDR
// end ; end ;
70123: GO 69872
70125: POP
70126: POP
// end ;
70127: GO 69790
70129: POP
70130: POP
// end ;
70131: PPOPN 4
70133: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
70134: LD_INT 0
70136: PPUSH
70137: PPUSH
// result := false ;
70138: LD_ADDR_VAR 0 4
70142: PUSH
70143: LD_INT 0
70145: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70146: LD_VAR 0 1
70150: PPUSH
70151: CALL_OW 264
70155: PUSH
70156: LD_INT 81
70158: EQUAL
70159: NOT
70160: IFFALSE 70164
// exit ;
70162: GO 70408
// index := GetElementIndex ( minersList , unit ) ;
70164: LD_ADDR_VAR 0 5
70168: PUSH
70169: LD_EXP 99
70173: PPUSH
70174: LD_VAR 0 1
70178: PPUSH
70179: CALL 11330 0 2
70183: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70184: LD_EXP 100
70188: PUSH
70189: LD_VAR 0 5
70193: ARRAY
70194: PUSH
70195: LD_EXP 101
70199: GREATEREQUAL
70200: IFFALSE 70204
// exit ;
70202: GO 70408
// ComMoveXY ( unit , x , y ) ;
70204: LD_VAR 0 1
70208: PPUSH
70209: LD_VAR 0 2
70213: PPUSH
70214: LD_VAR 0 3
70218: PPUSH
70219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70223: LD_INT 35
70225: PPUSH
70226: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70230: LD_VAR 0 1
70234: PPUSH
70235: LD_VAR 0 2
70239: PPUSH
70240: LD_VAR 0 3
70244: PPUSH
70245: CALL 43376 0 3
70249: NOT
70250: IFFALSE 70263
70252: PUSH
70253: LD_VAR 0 1
70257: PPUSH
70258: CALL_OW 314
70262: AND
70263: IFFALSE 70267
// exit ;
70265: GO 70408
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70267: LD_VAR 0 2
70271: PPUSH
70272: LD_VAR 0 3
70276: PPUSH
70277: CALL_OW 428
70281: PUSH
70282: LD_VAR 0 1
70286: EQUAL
70287: IFFALSE 70301
70289: PUSH
70290: LD_VAR 0 1
70294: PPUSH
70295: CALL_OW 314
70299: NOT
70300: AND
70301: IFFALSE 70223
// PlaySoundXY ( x , y , PlantMine ) ;
70303: LD_VAR 0 2
70307: PPUSH
70308: LD_VAR 0 3
70312: PPUSH
70313: LD_STRING PlantMine
70315: PPUSH
70316: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
70320: LD_VAR 0 2
70324: PPUSH
70325: LD_VAR 0 3
70329: PPUSH
70330: LD_VAR 0 1
70334: PPUSH
70335: CALL_OW 255
70339: PPUSH
70340: LD_INT 0
70342: PPUSH
70343: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
70347: LD_ADDR_EXP 100
70351: PUSH
70352: LD_EXP 100
70356: PPUSH
70357: LD_VAR 0 5
70361: PUSH
70362: LD_EXP 100
70366: PUSH
70367: LD_VAR 0 5
70371: ARRAY
70372: PUSH
70373: LD_INT 1
70375: PLUS
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PPUSH
70381: LD_VAR 0 2
70385: PUSH
70386: LD_VAR 0 3
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PPUSH
70395: CALL 11547 0 3
70399: ST_TO_ADDR
// result := true ;
70400: LD_ADDR_VAR 0 4
70404: PUSH
70405: LD_INT 1
70407: ST_TO_ADDR
// end ;
70408: LD_VAR 0 4
70412: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
70413: LD_INT 0
70415: PPUSH
70416: PPUSH
70417: PPUSH
// if not unit in minersList then
70418: LD_VAR 0 1
70422: PUSH
70423: LD_EXP 99
70427: IN
70428: NOT
70429: IFFALSE 70433
// exit ;
70431: GO 70827
// index := GetElementIndex ( minersList , unit ) ;
70433: LD_ADDR_VAR 0 6
70437: PUSH
70438: LD_EXP 99
70442: PPUSH
70443: LD_VAR 0 1
70447: PPUSH
70448: CALL 11330 0 2
70452: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
70453: LD_ADDR_VAR 0 5
70457: PUSH
70458: DOUBLE
70459: LD_EXP 100
70463: PUSH
70464: LD_VAR 0 6
70468: ARRAY
70469: INC
70470: ST_TO_ADDR
70471: LD_INT 1
70473: PUSH
70474: FOR_DOWNTO
70475: IFFALSE 70638
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
70477: LD_EXP 100
70481: PUSH
70482: LD_VAR 0 6
70486: ARRAY
70487: PUSH
70488: LD_VAR 0 5
70492: ARRAY
70493: PUSH
70494: LD_INT 1
70496: ARRAY
70497: PUSH
70498: LD_VAR 0 2
70502: EQUAL
70503: IFFALSE 70533
70505: PUSH
70506: LD_EXP 100
70510: PUSH
70511: LD_VAR 0 6
70515: ARRAY
70516: PUSH
70517: LD_VAR 0 5
70521: ARRAY
70522: PUSH
70523: LD_INT 2
70525: ARRAY
70526: PUSH
70527: LD_VAR 0 3
70531: EQUAL
70532: AND
70533: IFFALSE 70636
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70535: LD_EXP 100
70539: PUSH
70540: LD_VAR 0 6
70544: ARRAY
70545: PUSH
70546: LD_VAR 0 5
70550: ARRAY
70551: PUSH
70552: LD_INT 1
70554: ARRAY
70555: PPUSH
70556: LD_EXP 100
70560: PUSH
70561: LD_VAR 0 6
70565: ARRAY
70566: PUSH
70567: LD_VAR 0 5
70571: ARRAY
70572: PUSH
70573: LD_INT 2
70575: ARRAY
70576: PPUSH
70577: LD_VAR 0 1
70581: PPUSH
70582: CALL_OW 255
70586: PPUSH
70587: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70591: LD_ADDR_EXP 100
70595: PUSH
70596: LD_EXP 100
70600: PPUSH
70601: LD_VAR 0 6
70605: PPUSH
70606: LD_EXP 100
70610: PUSH
70611: LD_VAR 0 6
70615: ARRAY
70616: PPUSH
70617: LD_VAR 0 5
70621: PPUSH
70622: CALL_OW 3
70626: PPUSH
70627: CALL_OW 1
70631: ST_TO_ADDR
// exit ;
70632: POP
70633: POP
70634: GO 70827
// end ; end ;
70636: GO 70474
70638: POP
70639: POP
// for i := minerMinesList [ index ] downto 1 do
70640: LD_ADDR_VAR 0 5
70644: PUSH
70645: DOUBLE
70646: LD_EXP 100
70650: PUSH
70651: LD_VAR 0 6
70655: ARRAY
70656: INC
70657: ST_TO_ADDR
70658: LD_INT 1
70660: PUSH
70661: FOR_DOWNTO
70662: IFFALSE 70825
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70664: LD_EXP 100
70668: PUSH
70669: LD_VAR 0 6
70673: ARRAY
70674: PUSH
70675: LD_VAR 0 5
70679: ARRAY
70680: PUSH
70681: LD_INT 1
70683: ARRAY
70684: PPUSH
70685: LD_EXP 100
70689: PUSH
70690: LD_VAR 0 6
70694: ARRAY
70695: PUSH
70696: LD_VAR 0 5
70700: ARRAY
70701: PUSH
70702: LD_INT 2
70704: ARRAY
70705: PPUSH
70706: LD_VAR 0 2
70710: PPUSH
70711: LD_VAR 0 3
70715: PPUSH
70716: CALL_OW 298
70720: PUSH
70721: LD_INT 6
70723: LESS
70724: IFFALSE 70823
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
70726: LD_EXP 100
70730: PUSH
70731: LD_VAR 0 6
70735: ARRAY
70736: PUSH
70737: LD_VAR 0 5
70741: ARRAY
70742: PUSH
70743: LD_INT 1
70745: ARRAY
70746: PPUSH
70747: LD_EXP 100
70751: PUSH
70752: LD_VAR 0 6
70756: ARRAY
70757: PUSH
70758: LD_VAR 0 5
70762: ARRAY
70763: PUSH
70764: LD_INT 2
70766: ARRAY
70767: PPUSH
70768: LD_VAR 0 1
70772: PPUSH
70773: CALL_OW 255
70777: PPUSH
70778: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
70782: LD_ADDR_EXP 100
70786: PUSH
70787: LD_EXP 100
70791: PPUSH
70792: LD_VAR 0 6
70796: PPUSH
70797: LD_EXP 100
70801: PUSH
70802: LD_VAR 0 6
70806: ARRAY
70807: PPUSH
70808: LD_VAR 0 5
70812: PPUSH
70813: CALL_OW 3
70817: PPUSH
70818: CALL_OW 1
70822: ST_TO_ADDR
// end ; end ;
70823: GO 70661
70825: POP
70826: POP
// end ;
70827: LD_VAR 0 4
70831: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
70832: LD_INT 0
70834: PPUSH
70835: PPUSH
70836: PPUSH
70837: PPUSH
70838: PPUSH
70839: PPUSH
70840: PPUSH
70841: PPUSH
70842: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
70843: LD_VAR 0 1
70847: PPUSH
70848: CALL_OW 264
70852: PUSH
70853: LD_INT 81
70855: EQUAL
70856: NOT
70857: IFTRUE 70872
70859: PUSH
70860: LD_VAR 0 1
70864: PUSH
70865: LD_EXP 99
70869: IN
70870: NOT
70871: OR
70872: IFFALSE 70876
// exit ;
70874: GO 71202
// index := GetElementIndex ( minersList , unit ) ;
70876: LD_ADDR_VAR 0 6
70880: PUSH
70881: LD_EXP 99
70885: PPUSH
70886: LD_VAR 0 1
70890: PPUSH
70891: CALL 11330 0 2
70895: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
70896: LD_ADDR_VAR 0 8
70900: PUSH
70901: LD_EXP 101
70905: PUSH
70906: LD_EXP 100
70910: PUSH
70911: LD_VAR 0 6
70915: ARRAY
70916: MINUS
70917: ST_TO_ADDR
// if not minesFreeAmount then
70918: LD_VAR 0 8
70922: NOT
70923: IFFALSE 70927
// exit ;
70925: GO 71202
// tmp := [ ] ;
70927: LD_ADDR_VAR 0 7
70931: PUSH
70932: EMPTY
70933: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
70934: LD_ADDR_VAR 0 5
70938: PUSH
70939: DOUBLE
70940: LD_INT 1
70942: DEC
70943: ST_TO_ADDR
70944: LD_VAR 0 8
70948: PUSH
70949: FOR_TO
70950: IFFALSE 71149
// begin _d := rand ( 0 , 5 ) ;
70952: LD_ADDR_VAR 0 11
70956: PUSH
70957: LD_INT 0
70959: PPUSH
70960: LD_INT 5
70962: PPUSH
70963: CALL_OW 12
70967: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
70968: LD_ADDR_VAR 0 12
70972: PUSH
70973: LD_INT 2
70975: PPUSH
70976: LD_INT 6
70978: PPUSH
70979: CALL_OW 12
70983: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
70984: LD_ADDR_VAR 0 9
70988: PUSH
70989: LD_VAR 0 2
70993: PPUSH
70994: LD_VAR 0 11
70998: PPUSH
70999: LD_VAR 0 12
71003: PPUSH
71004: CALL_OW 272
71008: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71009: LD_ADDR_VAR 0 10
71013: PUSH
71014: LD_VAR 0 3
71018: PPUSH
71019: LD_VAR 0 11
71023: PPUSH
71024: LD_VAR 0 12
71028: PPUSH
71029: CALL_OW 273
71033: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71034: LD_VAR 0 9
71038: PPUSH
71039: LD_VAR 0 10
71043: PPUSH
71044: CALL_OW 488
71048: IFFALSE 71072
71050: PUSH
71051: LD_VAR 0 9
71055: PUSH
71056: LD_VAR 0 10
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_VAR 0 7
71069: IN
71070: NOT
71071: AND
71072: IFFALSE 71091
71074: PUSH
71075: LD_VAR 0 9
71079: PPUSH
71080: LD_VAR 0 10
71084: PPUSH
71085: CALL_OW 458
71089: NOT
71090: AND
71091: IFFALSE 71133
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71093: LD_ADDR_VAR 0 7
71097: PUSH
71098: LD_VAR 0 7
71102: PPUSH
71103: LD_VAR 0 7
71107: PUSH
71108: LD_INT 1
71110: PLUS
71111: PPUSH
71112: LD_VAR 0 9
71116: PUSH
71117: LD_VAR 0 10
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PPUSH
71126: CALL_OW 1
71130: ST_TO_ADDR
71131: GO 71147
// i := i - 1 ;
71133: LD_ADDR_VAR 0 5
71137: PUSH
71138: LD_VAR 0 5
71142: PUSH
71143: LD_INT 1
71145: MINUS
71146: ST_TO_ADDR
// end ;
71147: GO 70949
71149: POP
71150: POP
// for i in tmp do
71151: LD_ADDR_VAR 0 5
71155: PUSH
71156: LD_VAR 0 7
71160: PUSH
71161: FOR_IN
71162: IFFALSE 71200
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71164: LD_VAR 0 1
71168: PPUSH
71169: LD_VAR 0 5
71173: PUSH
71174: LD_INT 1
71176: ARRAY
71177: PPUSH
71178: LD_VAR 0 5
71182: PUSH
71183: LD_INT 2
71185: ARRAY
71186: PPUSH
71187: CALL 70134 0 3
71191: NOT
71192: IFFALSE 71198
// exit ;
71194: POP
71195: POP
71196: GO 71202
71198: GO 71161
71200: POP
71201: POP
// end ;
71202: LD_VAR 0 4
71206: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
71207: LD_INT 0
71209: PPUSH
71210: PPUSH
71211: PPUSH
71212: PPUSH
71213: PPUSH
71214: PPUSH
71215: PPUSH
71216: PPUSH
71217: PPUSH
// if GetClass ( unit ) <> class_sniper then
71218: LD_VAR 0 1
71222: PPUSH
71223: CALL_OW 257
71227: PUSH
71228: LD_INT 5
71230: NONEQUAL
71231: IFFALSE 71235
// exit ;
71233: GO 71705
// dist := 8 ;
71235: LD_ADDR_VAR 0 5
71239: PUSH
71240: LD_INT 8
71242: ST_TO_ADDR
// viewRange := 12 ;
71243: LD_ADDR_VAR 0 8
71247: PUSH
71248: LD_INT 12
71250: ST_TO_ADDR
// side := GetSide ( unit ) ;
71251: LD_ADDR_VAR 0 6
71255: PUSH
71256: LD_VAR 0 1
71260: PPUSH
71261: CALL_OW 255
71265: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71266: LD_INT 61
71268: PPUSH
71269: LD_VAR 0 6
71273: PPUSH
71274: CALL_OW 321
71278: PUSH
71279: LD_INT 2
71281: EQUAL
71282: IFFALSE 71292
// viewRange := 16 ;
71284: LD_ADDR_VAR 0 8
71288: PUSH
71289: LD_INT 16
71291: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71292: LD_VAR 0 1
71296: PPUSH
71297: LD_VAR 0 2
71301: PPUSH
71302: LD_VAR 0 3
71306: PPUSH
71307: CALL_OW 297
71311: PUSH
71312: LD_VAR 0 5
71316: GREATER
71317: IFFALSE 71396
// begin ComMoveXY ( unit , x , y ) ;
71319: LD_VAR 0 1
71323: PPUSH
71324: LD_VAR 0 2
71328: PPUSH
71329: LD_VAR 0 3
71333: PPUSH
71334: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71338: LD_INT 35
71340: PPUSH
71341: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71345: LD_VAR 0 1
71349: PPUSH
71350: LD_VAR 0 2
71354: PPUSH
71355: LD_VAR 0 3
71359: PPUSH
71360: CALL 43376 0 3
71364: NOT
71365: IFFALSE 71369
// exit ;
71367: GO 71705
// until GetDistUnitXY ( unit , x , y ) < dist ;
71369: LD_VAR 0 1
71373: PPUSH
71374: LD_VAR 0 2
71378: PPUSH
71379: LD_VAR 0 3
71383: PPUSH
71384: CALL_OW 297
71388: PUSH
71389: LD_VAR 0 5
71393: LESS
71394: IFFALSE 71338
// end ; ComTurnXY ( unit , x , y ) ;
71396: LD_VAR 0 1
71400: PPUSH
71401: LD_VAR 0 2
71405: PPUSH
71406: LD_VAR 0 3
71410: PPUSH
71411: CALL_OW 118
// repeat if Multiplayer then
71415: LD_OWVAR 4
71419: IFFALSE 71430
// wait ( 35 ) else
71421: LD_INT 35
71423: PPUSH
71424: CALL_OW 67
71428: GO 71437
// wait ( 5 ) ;
71430: LD_INT 5
71432: PPUSH
71433: CALL_OW 67
// _d := GetDir ( unit ) ;
71437: LD_ADDR_VAR 0 11
71441: PUSH
71442: LD_VAR 0 1
71446: PPUSH
71447: CALL_OW 254
71451: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
71452: LD_ADDR_VAR 0 7
71456: PUSH
71457: LD_VAR 0 1
71461: PPUSH
71462: CALL_OW 250
71466: PPUSH
71467: LD_VAR 0 1
71471: PPUSH
71472: CALL_OW 251
71476: PPUSH
71477: LD_VAR 0 2
71481: PPUSH
71482: LD_VAR 0 3
71486: PPUSH
71487: CALL 46012 0 4
71491: ST_TO_ADDR
// until dir = _d ;
71492: LD_VAR 0 7
71496: PUSH
71497: LD_VAR 0 11
71501: EQUAL
71502: IFFALSE 71415
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
71504: LD_ADDR_VAR 0 9
71508: PUSH
71509: LD_VAR 0 1
71513: PPUSH
71514: CALL_OW 250
71518: PPUSH
71519: LD_VAR 0 7
71523: PPUSH
71524: LD_VAR 0 5
71528: PPUSH
71529: CALL_OW 272
71533: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
71534: LD_ADDR_VAR 0 10
71538: PUSH
71539: LD_VAR 0 1
71543: PPUSH
71544: CALL_OW 251
71548: PPUSH
71549: LD_VAR 0 7
71553: PPUSH
71554: LD_VAR 0 5
71558: PPUSH
71559: CALL_OW 273
71563: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71564: LD_VAR 0 9
71568: PPUSH
71569: LD_VAR 0 10
71573: PPUSH
71574: CALL_OW 488
71578: NOT
71579: IFFALSE 71583
// exit ;
71581: GO 71705
// ComAnimCustom ( unit , 1 ) ;
71583: LD_VAR 0 1
71587: PPUSH
71588: LD_INT 1
71590: PPUSH
71591: CALL_OW 592
// p := 0 ;
71595: LD_ADDR_VAR 0 12
71599: PUSH
71600: LD_INT 0
71602: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
71603: LD_VAR 0 9
71607: PPUSH
71608: LD_VAR 0 10
71612: PPUSH
71613: LD_VAR 0 6
71617: PPUSH
71618: LD_VAR 0 8
71622: PPUSH
71623: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
71627: LD_INT 35
71629: PPUSH
71630: CALL_OW 67
// p := Inc ( p ) ;
71634: LD_ADDR_VAR 0 12
71638: PUSH
71639: LD_VAR 0 12
71643: PPUSH
71644: CALL 45968 0 1
71648: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
71649: LD_VAR 0 12
71653: PUSH
71654: LD_INT 3
71656: EQUAL
71657: IFTRUE 71671
71659: PUSH
71660: LD_VAR 0 1
71664: PPUSH
71665: CALL_OW 302
71669: NOT
71670: OR
71671: IFTRUE 71684
71673: PUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: CALL_OW 301
71683: OR
71684: IFFALSE 71627
// RemoveSeeing ( _x , _y , side ) ;
71686: LD_VAR 0 9
71690: PPUSH
71691: LD_VAR 0 10
71695: PPUSH
71696: LD_VAR 0 6
71700: PPUSH
71701: CALL_OW 331
// end ;
71705: LD_VAR 0 4
71709: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
71710: LD_INT 0
71712: PPUSH
71713: PPUSH
71714: PPUSH
71715: PPUSH
71716: PPUSH
71717: PPUSH
71718: PPUSH
71719: PPUSH
71720: PPUSH
71721: PPUSH
71722: PPUSH
// if not unit then
71723: LD_VAR 0 1
71727: NOT
71728: IFFALSE 71732
// exit ;
71730: GO 72003
// side := GetSide ( unit ) ;
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: LD_VAR 0 1
71741: PPUSH
71742: CALL_OW 255
71746: ST_TO_ADDR
// x := GetX ( unit ) ;
71747: LD_ADDR_VAR 0 5
71751: PUSH
71752: LD_VAR 0 1
71756: PPUSH
71757: CALL_OW 250
71761: ST_TO_ADDR
// y := GetY ( unit ) ;
71762: LD_ADDR_VAR 0 6
71766: PUSH
71767: LD_VAR 0 1
71771: PPUSH
71772: CALL_OW 251
71776: ST_TO_ADDR
// r := 8 ;
71777: LD_ADDR_VAR 0 4
71781: PUSH
71782: LD_INT 8
71784: ST_TO_ADDR
// if x - r < 0 then
71785: LD_VAR 0 5
71789: PUSH
71790: LD_VAR 0 4
71794: MINUS
71795: PUSH
71796: LD_INT 0
71798: LESS
71799: IFFALSE 71811
// min_x := 0 else
71801: LD_ADDR_VAR 0 7
71805: PUSH
71806: LD_INT 0
71808: ST_TO_ADDR
71809: GO 71827
// min_x := x - r ;
71811: LD_ADDR_VAR 0 7
71815: PUSH
71816: LD_VAR 0 5
71820: PUSH
71821: LD_VAR 0 4
71825: MINUS
71826: ST_TO_ADDR
// if y - r < 0 then
71827: LD_VAR 0 6
71831: PUSH
71832: LD_VAR 0 4
71836: MINUS
71837: PUSH
71838: LD_INT 0
71840: LESS
71841: IFFALSE 71853
// min_y := 0 else
71843: LD_ADDR_VAR 0 8
71847: PUSH
71848: LD_INT 0
71850: ST_TO_ADDR
71851: GO 71869
// min_y := y - r ;
71853: LD_ADDR_VAR 0 8
71857: PUSH
71858: LD_VAR 0 6
71862: PUSH
71863: LD_VAR 0 4
71867: MINUS
71868: ST_TO_ADDR
// max_x := x + r ;
71869: LD_ADDR_VAR 0 9
71873: PUSH
71874: LD_VAR 0 5
71878: PUSH
71879: LD_VAR 0 4
71883: PLUS
71884: ST_TO_ADDR
// max_y := y + r ;
71885: LD_ADDR_VAR 0 10
71889: PUSH
71890: LD_VAR 0 6
71894: PUSH
71895: LD_VAR 0 4
71899: PLUS
71900: ST_TO_ADDR
// for _x = min_x to max_x do
71901: LD_ADDR_VAR 0 11
71905: PUSH
71906: DOUBLE
71907: LD_VAR 0 7
71911: DEC
71912: ST_TO_ADDR
71913: LD_VAR 0 9
71917: PUSH
71918: FOR_TO
71919: IFFALSE 72001
// for _y = min_y to max_y do
71921: LD_ADDR_VAR 0 12
71925: PUSH
71926: DOUBLE
71927: LD_VAR 0 8
71931: DEC
71932: ST_TO_ADDR
71933: LD_VAR 0 10
71937: PUSH
71938: FOR_TO
71939: IFFALSE 71997
// begin if not ValidHex ( _x , _y ) then
71941: LD_VAR 0 11
71945: PPUSH
71946: LD_VAR 0 12
71950: PPUSH
71951: CALL_OW 488
71955: NOT
71956: IFFALSE 71960
// continue ;
71958: GO 71938
// if MineAtPos ( _x , _y ) then
71960: LD_VAR 0 11
71964: PPUSH
71965: LD_VAR 0 12
71969: PPUSH
71970: CALL_OW 458
71974: IFFALSE 71995
// ViewMineAtPos ( _x , _y , side ) ;
71976: LD_VAR 0 11
71980: PPUSH
71981: LD_VAR 0 12
71985: PPUSH
71986: LD_VAR 0 3
71990: PPUSH
71991: CALL_OW 457
// end ;
71995: GO 71938
71997: POP
71998: POP
71999: GO 71918
72001: POP
72002: POP
// end ;
72003: LD_VAR 0 2
72007: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
72008: LD_INT 0
72010: PPUSH
72011: PPUSH
72012: PPUSH
72013: PPUSH
72014: PPUSH
72015: PPUSH
// if not units then
72016: LD_VAR 0 1
72020: NOT
72021: IFFALSE 72025
// exit ;
72023: GO 72455
// scaners := [ ] ;
72025: LD_ADDR_VAR 0 6
72029: PUSH
72030: EMPTY
72031: ST_TO_ADDR
// for i in units do
72032: LD_ADDR_VAR 0 3
72036: PUSH
72037: LD_VAR 0 1
72041: PUSH
72042: FOR_IN
72043: IFFALSE 72200
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
72045: LD_VAR 0 3
72049: PPUSH
72050: CALL_OW 264
72054: PUSH
72055: LD_INT 11
72057: NONEQUAL
72058: IFTRUE 72072
72060: PUSH
72061: LD_VAR 0 3
72065: PPUSH
72066: CALL_OW 302
72070: NOT
72071: OR
72072: IFTRUE 72089
72074: PUSH
72075: LD_VAR 0 3
72079: PPUSH
72080: CALL_OW 110
72084: PUSH
72085: LD_INT 502
72087: EQUAL
72088: OR
72089: IFFALSE 72093
// continue ;
72091: GO 72042
// ComStop ( i ) ;
72093: LD_VAR 0 3
72097: PPUSH
72098: CALL_OW 141
// x := GetX ( i ) ;
72102: LD_ADDR_VAR 0 4
72106: PUSH
72107: LD_VAR 0 3
72111: PPUSH
72112: CALL_OW 250
72116: ST_TO_ADDR
// y := GetY ( i ) ;
72117: LD_ADDR_VAR 0 5
72121: PUSH
72122: LD_VAR 0 3
72126: PPUSH
72127: CALL_OW 251
72131: ST_TO_ADDR
// if GetSide ( i ) = your_side then
72132: LD_VAR 0 3
72136: PPUSH
72137: CALL_OW 255
72141: PUSH
72142: LD_OWVAR 2
72146: EQUAL
72147: IFFALSE 72166
// PlaySoundXY ( x , y , mineDetector ) ;
72149: LD_VAR 0 4
72153: PPUSH
72154: LD_VAR 0 5
72158: PPUSH
72159: LD_STRING mineDetector
72161: PPUSH
72162: CALL_OW 366
// scaners := Join ( scaners , i ) ;
72166: LD_ADDR_VAR 0 6
72170: PUSH
72171: LD_VAR 0 6
72175: PPUSH
72176: LD_VAR 0 3
72180: PPUSH
72181: CALL 44595 0 2
72185: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
72186: LD_VAR 0 3
72190: PPUSH
72191: LD_INT 502
72193: PPUSH
72194: CALL_OW 109
// end ;
72198: GO 72042
72200: POP
72201: POP
// if not scaners then
72202: LD_VAR 0 6
72206: NOT
72207: IFFALSE 72211
// exit ;
72209: GO 72455
// wait ( 3 ) ;
72211: LD_INT 3
72213: PPUSH
72214: CALL_OW 67
// timer := 6 ;
72218: LD_ADDR_VAR 0 7
72222: PUSH
72223: LD_INT 6
72225: ST_TO_ADDR
// repeat for i in scaners do
72226: LD_ADDR_VAR 0 3
72230: PUSH
72231: LD_VAR 0 6
72235: PUSH
72236: FOR_IN
72237: IFFALSE 72353
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
72239: LD_VAR 0 3
72243: PPUSH
72244: CALL_OW 302
72248: NOT
72249: IFTRUE 72262
72251: PUSH
72252: LD_VAR 0 3
72256: PPUSH
72257: CALL_OW 314
72261: OR
72262: IFTRUE 72293
72264: PUSH
72265: LD_VAR 0 3
72269: PPUSH
72270: CALL_OW 263
72274: PUSH
72275: LD_INT 1
72277: EQUAL
72278: IFFALSE 72292
72280: PUSH
72281: LD_VAR 0 3
72285: PPUSH
72286: CALL_OW 311
72290: NOT
72291: AND
72292: OR
72293: IFFALSE 72337
// begin SetUnitDisplayNumber ( i , 0 ) ;
72295: LD_VAR 0 3
72299: PPUSH
72300: LD_INT 0
72302: PPUSH
72303: CALL_OW 505
// SetTag ( i , 0 ) ;
72307: LD_VAR 0 3
72311: PPUSH
72312: LD_INT 0
72314: PPUSH
72315: CALL_OW 109
// scaners := scaners diff i ;
72319: LD_ADDR_VAR 0 6
72323: PUSH
72324: LD_VAR 0 6
72328: PUSH
72329: LD_VAR 0 3
72333: DIFF
72334: ST_TO_ADDR
// continue ;
72335: GO 72236
// end ; SetUnitDisplayNumber ( i , timer ) ;
72337: LD_VAR 0 3
72341: PPUSH
72342: LD_VAR 0 7
72346: PPUSH
72347: CALL_OW 505
// end ;
72351: GO 72236
72353: POP
72354: POP
// if not scaners then
72355: LD_VAR 0 6
72359: NOT
72360: IFFALSE 72364
// exit ;
72362: GO 72455
// timer := Dec ( timer ) ;
72364: LD_ADDR_VAR 0 7
72368: PUSH
72369: LD_VAR 0 7
72373: PPUSH
72374: CALL 45990 0 1
72378: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72379: LD_INT 35
72381: PPUSH
72382: CALL_OW 67
// until timer = 0 ;
72386: LD_VAR 0 7
72390: PUSH
72391: LD_INT 0
72393: EQUAL
72394: IFFALSE 72226
// if not scaners then
72396: LD_VAR 0 6
72400: NOT
72401: IFFALSE 72405
// exit ;
72403: GO 72455
// for i in scaners do
72405: LD_ADDR_VAR 0 3
72409: PUSH
72410: LD_VAR 0 6
72414: PUSH
72415: FOR_IN
72416: IFFALSE 72453
// begin SetUnitDisplayNumber ( i , 0 ) ;
72418: LD_VAR 0 3
72422: PPUSH
72423: LD_INT 0
72425: PPUSH
72426: CALL_OW 505
// SetTag ( i , 0 ) ;
72430: LD_VAR 0 3
72434: PPUSH
72435: LD_INT 0
72437: PPUSH
72438: CALL_OW 109
// RevealDetectorMine ( i ) ;
72442: LD_VAR 0 3
72446: PPUSH
72447: CALL 71710 0 1
// end ;
72451: GO 72415
72453: POP
72454: POP
// end ;
72455: LD_VAR 0 2
72459: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
72460: LD_INT 0
72462: PPUSH
// if p1 = mine_detector_mode then
72463: LD_VAR 0 2
72467: PUSH
72468: LD_INT 103
72470: EQUAL
72471: IFFALSE 72482
// DetectMine ( units ) ;
72473: LD_VAR 0 1
72477: PPUSH
72478: CALL 72008 0 1
// end ;
72482: LD_VAR 0 7
72486: RET
