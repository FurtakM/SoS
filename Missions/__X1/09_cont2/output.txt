// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3776 0 0
// CreateNature ;
  12: CALL 3647 0 0
// Action ;
  16: CALL 3918 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6417 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6417 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6417 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6417 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6417 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6417 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6417 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6417 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6417 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6417 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6417 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6417 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6417 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6417 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6417 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6417 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 43738 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11257 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14357 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11257 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 42656 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11257 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 43738 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 13
3195: PPUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 70
3210: AND
3211: IFFALSE 3644
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
// begin tmp := [ ] ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 3
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 5
3246: PUSH
3247: LD_INT 6
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_OWVAR 67
3260: ARRAY
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3380
// begin uc_side := 3 ;
3265: LD_ADDR_OWVAR 20
3269: PUSH
3270: LD_INT 3
3272: ST_TO_ADDR
// uc_nation := nation_russian ;
3273: LD_ADDR_OWVAR 21
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 6
3286: PUSH
3287: LD_INT 7
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: LD_INT 9
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// if Prob ( 50 ) then
3322: LD_INT 50
3324: PPUSH
3325: CALL_OW 13
3329: IFFALSE 3343
// SetClass ( un , class_bazooker ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 9
3338: PPUSH
3339: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3343: LD_VAR 0 2
3347: PPUSH
3348: LD_INT 12
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 43738 0 2
3377: ST_TO_ADDR
// end ;
3378: GO 3262
3380: POP
3381: POP
// for i := 1 to 4 do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 4
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3566
// begin uc_side := 3 ;
3398: LD_ADDR_OWVAR 20
3402: PUSH
3403: LD_INT 3
3405: ST_TO_ADDR
// uc_nation := nation_russian ;
3406: LD_ADDR_OWVAR 21
3410: PUSH
3411: LD_INT 3
3413: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 8
3425: PUSH
3426: LD_INT 9
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_OWVAR 67
3439: ARRAY
3440: PPUSH
3441: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3445: LD_INT 22
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 43
3456: PUSH
3457: LD_INT 44
3459: PUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 45
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_VAR 0 1
3476: PUSH
3477: LD_INT 4
3479: MOD
3480: PUSH
3481: LD_INT 1
3483: PLUS
3484: ARRAY
3485: PPUSH
3486: LD_INT 100
3488: PPUSH
3489: CALL 11257 0 5
// un := CreateVehicle ;
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: CALL_OW 45
3502: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_INT 4
3510: PPUSH
3511: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3530: CALL_OW 44
3534: PPUSH
3535: LD_VAR 0 2
3539: PPUSH
3540: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL 43738 0 2
3563: ST_TO_ADDR
// end ;
3564: GO 3395
3566: POP
3567: POP
// repeat wait ( 0 0$1 ) ;
3568: LD_INT 35
3570: PPUSH
3571: CALL_OW 67
// for i in tmp do
3575: LD_ADDR_VAR 0 1
3579: PUSH
3580: LD_VAR 0 3
3584: PUSH
3585: FOR_IN
3586: IFFALSE 3624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_INT 22
3595: PUSH
3596: LD_INT 2
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PPUSH
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 74
3617: PPUSH
3618: CALL_OW 115
3622: GO 3585
3624: POP
3625: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_INT 50
3633: PUSH
3634: EMPTY
3635: LIST
3636: PPUSH
3637: CALL_OW 72
3641: NOT
3642: IFFALSE 3568
// end ; end_of_file
3644: PPOPN 3
3646: END
// export function CreateNature ; var i ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
// PrepareTiger ( 0 ) ;
3651: LD_INT 0
3653: PPUSH
3654: CALL 40127 0 1
// for i := 1 to 2 do
3658: LD_ADDR_VAR 0 2
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 2
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3691
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3674: CALL_OW 44
3678: PPUSH
3679: LD_INT 4
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
3689: GO 3671
3691: POP
3692: POP
// PrepareBird ;
3693: CALL 40308 0 0
// for i := 1 to 3 do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: DOUBLE
3703: LD_INT 1
3705: DEC
3706: ST_TO_ADDR
3707: LD_INT 3
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3713: CALL_OW 44
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// PrepareFrog ;
3732: CALL 40228 0 0
// for i := 1 to 3 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 3
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3769
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3752: CALL_OW 44
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
3767: GO 3749
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function LoadTech ; var i , tmp ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3781: LD_ADDR_VAR 0 3
3785: PUSH
3786: LD_STRING 09_tech
3788: PPUSH
3789: EMPTY
3790: PPUSH
3791: CALL_OW 30
3795: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL 8519 0 1
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3844
// SetTech ( i , 2 , tmp [ i ] ) ;
3819: LD_VAR 0 2
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 322
3842: GO 3816
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3851: LD_ADDR_EXP 8
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// end ;
3859: PPOPN 1
3861: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3862: LD_VAR 0 1
3866: PUSH
3867: LD_EXP 21
3871: EQUAL
3872: IFFALSE 3881
// YouLost ( Schulz ) ;
3874: LD_STRING Schulz
3876: PPUSH
3877: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3881: LD_VAR 0 1
3885: PUSH
3886: LD_EXP 10
3890: EQUAL
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 255
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: AND
3906: IFFALSE 3915
// YouLost ( Heike ) ;
3908: LD_STRING Heike
3910: PPUSH
3911: CALL_OW 104
// end ; end_of_file
3915: PPOPN 1
3917: END
// export function Action ; var p , i , tmp ; begin
3918: LD_INT 0
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3924: LD_INT 12
3926: PPUSH
3927: LD_INT 12
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 10
3935: PPUSH
3936: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3940: LD_INT 12
3942: PPUSH
3943: LD_INT 12
3945: PPUSH
3946: LD_INT 2
3948: PPUSH
3949: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 12
3958: PPUSH
3959: CALL_OW 86
// InGameOn ;
3963: CALL_OW 8
// PrepareArabian ;
3967: CALL 133 0 0
// InGameOff ;
3971: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3975: LD_STRING M4
3977: PPUSH
3978: CALL_OW 337
// SaveForQuickRestart ;
3982: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3986: LD_INT 35
3988: PPUSH
3989: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3993: LD_INT 9
3995: PPUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 70
4010: IFFALSE 3986
// PrepareHeikeCamp ;
4012: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// if heikeIsDead then
4023: LD_EXP 7
4027: IFFALSE 4363
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4029: LD_INT 116
4031: PPUSH
4032: LD_INT 58
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 26
4040: NEG
4041: PPUSH
4042: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4046: LD_INT 116
4048: PPUSH
4049: LD_INT 58
4051: PPUSH
4052: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4056: LD_EXP 21
4060: PPUSH
4061: LD_STRING DL-Obj-a-1
4063: PPUSH
4064: CALL_OW 88
// InGameOn ;
4068: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4072: LD_INT 116
4074: PPUSH
4075: LD_INT 58
4077: PPUSH
4078: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4082: LD_INT 22
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: LD_EXP 21
4101: PUSH
4102: LD_EXP 25
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: DIFF
4111: PPUSH
4112: LD_INT 96
4114: PPUSH
4115: LD_INT 65
4117: PPUSH
4118: CALL_OW 111
// if IsInUnit ( Schulz ) then
4122: LD_EXP 21
4126: PPUSH
4127: CALL_OW 310
4131: IFFALSE 4155
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4133: LD_EXP 21
4137: PPUSH
4138: CALL_OW 310
4142: PPUSH
4143: LD_INT 115
4145: PPUSH
4146: LD_INT 61
4148: PPUSH
4149: CALL_OW 111
4153: GO 4170
// ComMoveXY ( Schulz , 115 , 61 ) ;
4155: LD_EXP 21
4159: PPUSH
4160: LD_INT 115
4162: PPUSH
4163: LD_INT 61
4165: PPUSH
4166: CALL_OW 111
// if IsInUnit ( Nia ) then
4170: LD_EXP 25
4174: PPUSH
4175: CALL_OW 310
4179: IFFALSE 4203
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4181: LD_EXP 25
4185: PPUSH
4186: CALL_OW 310
4190: PPUSH
4191: LD_INT 115
4193: PPUSH
4194: LD_INT 61
4196: PPUSH
4197: CALL_OW 111
4201: GO 4218
// ComMoveXY ( Nia , 115 , 61 ) ;
4203: LD_EXP 25
4207: PPUSH
4208: LD_INT 115
4210: PPUSH
4211: LD_INT 61
4213: PPUSH
4214: CALL_OW 111
// p := 0 ;
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4226: LD_INT 35
4228: PPUSH
4229: CALL_OW 67
// p := Inc ( p ) ;
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: LD_VAR 0 2
4242: PPUSH
4243: CALL 45099 0 1
4247: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4248: LD_INT 115
4250: PPUSH
4251: LD_INT 61
4253: PPUSH
4254: CALL_OW 428
4258: PUSH
4259: LD_VAR 0 2
4263: PUSH
4264: LD_INT 20
4266: GREATER
4267: OR
4268: IFFALSE 4226
// if Givi and IsOk ( Nia ) then
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 25
4279: PPUSH
4280: CALL_OW 302
4284: AND
4285: IFFALSE 4335
// begin Say ( Nia , DN-Obj-a-2 ) ;
4287: LD_EXP 25
4291: PPUSH
4292: LD_STRING DN-Obj-a-2
4294: PPUSH
4295: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4299: LD_EXP 21
4303: PPUSH
4304: LD_STRING DL-Obj-a-3
4306: PPUSH
4307: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4311: LD_EXP 25
4315: PPUSH
4316: LD_STRING DN-Obj-a-4
4318: PPUSH
4319: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4323: LD_EXP 21
4327: PPUSH
4328: LD_STRING DL-Obj-a-5
4330: PPUSH
4331: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4335: LD_INT 35
4337: PPUSH
4338: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4342: LD_EXP 21
4346: PPUSH
4347: LD_STRING DL-Fail-1
4349: PPUSH
4350: CALL_OW 88
// YouLost ( Fail ) ;
4354: LD_STRING Fail
4356: PPUSH
4357: CALL_OW 104
// exit ;
4361: GO 5370
// end ; PrepareRussianBaseAttackers ;
4363: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4367: LD_INT 35
4369: PPUSH
4370: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4374: LD_INT 116
4376: PPUSH
4377: LD_INT 58
4379: PPUSH
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 26
4385: NEG
4386: PPUSH
4387: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4391: LD_INT 116
4393: PPUSH
4394: LD_INT 58
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4404: LD_INT 116
4406: PPUSH
4407: LD_INT 58
4409: PPUSH
4410: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4414: LD_INT 5
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: CALL_OW 343
// Say ( Schulz , DL-Obj-1 ) ;
4424: LD_EXP 21
4428: PPUSH
4429: LD_STRING DL-Obj-1
4431: PPUSH
4432: CALL_OW 88
// PrepareBasim ;
4436: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4440: LD_INT 10
4442: PPUSH
4443: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4447: LD_INT 8
4449: PPUSH
4450: LD_INT 2
4452: PPUSH
4453: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
4457: LD_INT 35
4459: PPUSH
4460: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 10 ] ] ) ;
4464: LD_INT 22
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 92
4476: PUSH
4477: LD_INT 117
4479: PUSH
4480: LD_INT 58
4482: PUSH
4483: LD_INT 10
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: CALL_OW 69
4500: IFFALSE 4457
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4502: LD_ADDR_VAR 0 3
4506: PUSH
4507: LD_INT 22
4509: PUSH
4510: LD_INT 5
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// SetSide ( i , 2 ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_INT 2
4532: PPUSH
4533: CALL_OW 235
4537: GO 4522
4539: POP
4540: POP
// repeat wait ( 0 0$1 ) ;
4541: LD_INT 35
4543: PPUSH
4544: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_INT 50
4555: PUSH
4556: EMPTY
4557: LIST
4558: PUSH
4559: LD_INT 25
4561: PUSH
4562: LD_INT 17
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 69
4577: ST_TO_ADDR
// for i in tmp do
4578: LD_ADDR_VAR 0 3
4582: PUSH
4583: LD_VAR 0 4
4587: PUSH
4588: FOR_IN
4589: IFFALSE 4627
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_INT 22
4598: PUSH
4599: LD_INT 3
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PPUSH
4611: LD_VAR 0 3
4615: PPUSH
4616: CALL_OW 74
4620: PPUSH
4621: CALL_OW 115
4625: GO 4588
4627: POP
4628: POP
// until See ( 2 , Basim ) and kamikazed ;
4629: LD_INT 2
4631: PPUSH
4632: LD_EXP 22
4636: PPUSH
4637: CALL_OW 292
4641: PUSH
4642: LD_EXP 8
4646: AND
4647: IFFALSE 4541
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4649: LD_ADDR_VAR 0 4
4653: PUSH
4654: LD_INT 50
4656: PUSH
4657: EMPTY
4658: LIST
4659: PUSH
4660: LD_INT 25
4662: PUSH
4663: LD_INT 17
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PPUSH
4674: CALL_OW 69
4678: ST_TO_ADDR
// if tmp then
4679: LD_VAR 0 4
4683: IFFALSE 4711
// for i in tmp do
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_VAR 0 4
4694: PUSH
4695: FOR_IN
4696: IFFALSE 4709
// KillUnit ( i ) ;
4698: LD_VAR 0 3
4702: PPUSH
4703: CALL_OW 66
4707: GO 4695
4709: POP
4710: POP
// Say ( Basim , DBs-Obj-2 ) ;
4711: LD_EXP 22
4715: PPUSH
4716: LD_STRING DBs-Obj-2
4718: PPUSH
4719: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4723: LD_INT 35
4725: PPUSH
4726: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4730: LD_INT 22
4732: PUSH
4733: LD_INT 3
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 50
4742: PUSH
4743: EMPTY
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: NOT
4755: IFFALSE 4723
// ComExit ( Heike ) ;
4757: LD_EXP 10
4761: PPUSH
4762: CALL 44136 0 1
// DialogueOn ;
4766: CALL_OW 6
// if IsOk ( Kaia ) then
4770: LD_EXP 15
4774: PPUSH
4775: CALL_OW 302
4779: IFFALSE 4922
// begin CenterNowOnUnits ( Kaia ) ;
4781: LD_EXP 15
4785: PPUSH
4786: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4790: LD_EXP 15
4794: PPUSH
4795: LD_STRING DK-Obj-3
4797: PPUSH
4798: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4802: LD_EXP 11
4806: PPUSH
4807: LD_STRING DG-Obj-4
4809: PPUSH
4810: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4814: LD_EXP 15
4818: PPUSH
4819: LD_STRING DK-Obj-5
4821: PPUSH
4822: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4826: LD_EXP 15
4830: PPUSH
4831: LD_STRING DK-Obj-6
4833: PPUSH
4834: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4838: LD_EXP 15
4842: PPUSH
4843: LD_STRING DK-Obj-7
4845: PPUSH
4846: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4850: LD_EXP 15
4854: PPUSH
4855: LD_STRING DK-Obj-8
4857: PPUSH
4858: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4862: LD_EXP 21
4866: PPUSH
4867: LD_STRING DL-Obj-9
4869: PPUSH
4870: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4874: LD_EXP 21
4878: PPUSH
4879: LD_STRING DL-Obj-10
4881: PPUSH
4882: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4886: LD_EXP 21
4890: PPUSH
4891: LD_STRING DL-Obj-11
4893: PPUSH
4894: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4898: LD_EXP 21
4902: PPUSH
4903: LD_STRING DL-Obj-12
4905: PPUSH
4906: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4910: LD_EXP 21
4914: PPUSH
4915: LD_STRING DL-Obj-13
4917: PPUSH
4918: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4922: LD_EXP 19
4926: PPUSH
4927: CALL_OW 302
4931: IFFALSE 4969
// begin Say ( Kurt , DKs-Obj-14 ) ;
4933: LD_EXP 19
4937: PPUSH
4938: LD_STRING DKs-Obj-14
4940: PPUSH
4941: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4945: LD_EXP 19
4949: PPUSH
4950: LD_STRING DKs-Obj-15
4952: PPUSH
4953: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4957: LD_EXP 11
4961: PPUSH
4962: LD_STRING DG-Obj-16
4964: PPUSH
4965: CALL_OW 88
// end ; DialogueOff ;
4969: CALL_OW 7
// SetSide ( Basim , 2 ) ;
4973: LD_EXP 22
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: CALL_OW 235
// wait ( 0 0$3 ) ;
4985: LD_INT 105
4987: PPUSH
4988: CALL_OW 67
// ComExit ( Givi ) ;
4992: LD_EXP 11
4996: PPUSH
4997: CALL 44136 0 1
// ComExit ( Nia ) ;
5001: LD_EXP 25
5005: PPUSH
5006: CALL 44136 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5010: LD_EXP 25
5014: PPUSH
5015: LD_EXP 11
5019: PPUSH
5020: CALL_OW 172
// wait ( 0 0$1 ) ;
5024: LD_INT 35
5026: PPUSH
5027: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5031: LD_EXP 11
5035: PPUSH
5036: CALL_OW 302
5040: PUSH
5041: LD_EXP 25
5045: PPUSH
5046: CALL_OW 302
5050: AND
5051: IFFALSE 5325
// begin DialogueOn ;
5053: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5057: LD_EXP 11
5061: PPUSH
5062: LD_STRING DG-Nia-1
5064: PPUSH
5065: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5069: LD_EXP 10
5073: PPUSH
5074: LD_STRING DH-Nia-2
5076: PPUSH
5077: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5081: LD_EXP 11
5085: PPUSH
5086: LD_STRING DG-Nia-3
5088: PPUSH
5089: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5093: LD_EXP 25
5097: PPUSH
5098: LD_STRING DN-Nia-4
5100: PPUSH
5101: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5105: LD_EXP 10
5109: PPUSH
5110: LD_STRING DH-Nia-5
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5117: LD_EXP 11
5121: PPUSH
5122: LD_STRING DG-Nia-6
5124: PPUSH
5125: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5129: LD_EXP 25
5133: PPUSH
5134: LD_STRING DN-Nia-7
5136: PPUSH
5137: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5141: LD_EXP 25
5145: PPUSH
5146: LD_STRING DN-Nia-8
5148: PPUSH
5149: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5153: LD_EXP 25
5157: PPUSH
5158: LD_STRING DN-Nia-9
5160: PPUSH
5161: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5165: LD_EXP 25
5169: PPUSH
5170: LD_STRING DN-Nia-10
5172: PPUSH
5173: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5177: LD_EXP 11
5181: PPUSH
5182: LD_STRING DG-Nia-11
5184: PPUSH
5185: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5189: LD_EXP 25
5193: PPUSH
5194: LD_STRING DN-Nia-12
5196: PPUSH
5197: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5201: LD_EXP 10
5205: PPUSH
5206: LD_STRING DH-Nia-13
5208: PPUSH
5209: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5213: LD_EXP 25
5217: PPUSH
5218: LD_STRING DN-Nia-14
5220: PPUSH
5221: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5225: LD_EXP 10
5229: PPUSH
5230: LD_STRING DH-Nia-15
5232: PPUSH
5233: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5237: LD_EXP 21
5241: PPUSH
5242: LD_STRING DL-Nia-16
5244: PPUSH
5245: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5249: LD_EXP 10
5253: PPUSH
5254: LD_STRING DH-Nia-17
5256: PPUSH
5257: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5261: LD_EXP 10
5265: PPUSH
5266: LD_STRING DH-Nia-18
5268: PPUSH
5269: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5273: LD_EXP 13
5277: PPUSH
5278: LD_STRING DI-Nia-19
5280: PPUSH
5281: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5285: LD_EXP 21
5289: PPUSH
5290: LD_STRING DL-Nia-20
5292: PPUSH
5293: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5297: LD_EXP 21
5301: PPUSH
5302: LD_STRING DL-Nia-21
5304: PPUSH
5305: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5309: LD_EXP 21
5313: PPUSH
5314: LD_STRING DL-Nia-22
5316: PPUSH
5317: CALL_OW 88
// DialogueOff ;
5321: CALL_OW 7
// end ; DialogueOn ;
5325: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5329: LD_EXP 21
5333: PPUSH
5334: LD_STRING DL-Retreat-1
5336: PPUSH
5337: CALL_OW 88
// DialogueOff ;
5341: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5345: LD_STRING M5
5347: PPUSH
5348: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5352: LD_INT 13
5354: PPUSH
5355: LD_INT 1
5357: PPUSH
5358: CALL_OW 424
// startRussianAttacks := true ;
5362: LD_ADDR_EXP 9
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// end ;
5370: LD_VAR 0 1
5374: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5375: LD_EXP 9
5379: PUSH
5380: LD_INT 13
5382: PPUSH
5383: LD_INT 22
5385: PUSH
5386: LD_INT 2
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: LD_INT 50
5395: PUSH
5396: EMPTY
5397: LIST
5398: PUSH
5399: LD_INT 21
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: LIST
5413: PPUSH
5414: CALL_OW 71
5418: NOT
5419: AND
5420: IFFALSE 5429
5422: GO 5424
5424: DISABLE
// EndMission ;
5425: CALL 5430 0 0
5429: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5430: LD_INT 0
5432: PPUSH
5433: PPUSH
5434: PPUSH
5435: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: LD_INT 13
5443: PPUSH
5444: LD_INT 22
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 21
5456: PUSH
5457: LD_INT 2
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 70
5472: ST_TO_ADDR
// saveVehicles := [ ] ;
5473: LD_ADDR_VAR 0 4
5477: PUSH
5478: EMPTY
5479: ST_TO_ADDR
// for i in tmp do
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: LD_VAR 0 3
5489: PUSH
5490: FOR_IN
5491: IFFALSE 5600
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5493: LD_ADDR_VAR 0 4
5497: PUSH
5498: LD_VAR 0 4
5502: PPUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: CALL_OW 265
5512: PUSH
5513: LD_VAR 0 2
5517: PPUSH
5518: CALL_OW 262
5522: PUSH
5523: LD_VAR 0 2
5527: PPUSH
5528: CALL_OW 263
5532: PUSH
5533: LD_VAR 0 2
5537: PPUSH
5538: CALL_OW 264
5542: PUSH
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 248
5552: PUSH
5553: LD_VAR 0 2
5557: PPUSH
5558: CALL_OW 261
5562: PUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: CALL_OW 271
5572: PUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 311
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL 43738 0 2
5597: ST_TO_ADDR
5598: GO 5490
5600: POP
5601: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5602: LD_EXP 21
5606: PPUSH
5607: LD_STRING 09c_Schulz
5609: PPUSH
5610: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5614: LD_EXP 21
5618: PPUSH
5619: LD_STRING 09c_Schulz_ID
5621: PPUSH
5622: CALL_OW 39
// if IsOk ( Lemmy ) then
5626: LD_EXP 23
5630: PPUSH
5631: CALL_OW 302
5635: IFFALSE 5661
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5637: LD_EXP 23
5641: PPUSH
5642: LD_STRING 09c_Lemmy
5644: PPUSH
5645: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5649: LD_EXP 23
5653: PPUSH
5654: LD_STRING 09c_Lemmy_ID
5656: PPUSH
5657: CALL_OW 39
// end ; if IsOk ( Nia ) then
5661: LD_EXP 25
5665: PPUSH
5666: CALL_OW 302
5670: IFFALSE 5696
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5672: LD_EXP 25
5676: PPUSH
5677: LD_STRING 09c_Nia
5679: PPUSH
5680: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5684: LD_EXP 25
5688: PPUSH
5689: LD_STRING 09c_Nia_ID
5691: PPUSH
5692: CALL_OW 39
// end ; if IsOk ( Mia ) then
5696: LD_EXP 24
5700: PPUSH
5701: CALL_OW 302
5705: IFFALSE 5731
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5707: LD_EXP 24
5711: PPUSH
5712: LD_STRING 09c_Mia
5714: PPUSH
5715: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5719: LD_EXP 24
5723: PPUSH
5724: LD_STRING 09c_Mia_ID
5726: PPUSH
5727: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5731: LD_EXP 26
5735: PPUSH
5736: CALL_OW 302
5740: IFFALSE 5766
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5742: LD_EXP 26
5746: PPUSH
5747: LD_STRING 09c_Jenna
5749: PPUSH
5750: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5754: LD_EXP 26
5758: PPUSH
5759: LD_STRING 09c_Jenna_ID
5761: PPUSH
5762: CALL_OW 39
// end ; if IsOk ( Basim ) then
5766: LD_EXP 22
5770: PPUSH
5771: CALL_OW 302
5775: IFFALSE 5801
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5777: LD_EXP 22
5781: PPUSH
5782: LD_STRING 09c_Basim
5784: PPUSH
5785: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5789: LD_EXP 22
5793: PPUSH
5794: LD_STRING 09c_Basim_ID
5796: PPUSH
5797: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5801: LD_EXP 10
5805: PPUSH
5806: LD_STRING 09c_Heike
5808: PPUSH
5809: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5813: LD_EXP 10
5817: PPUSH
5818: LD_STRING 09c_Heike_ID
5820: PPUSH
5821: CALL_OW 39
// if IsOk ( Givi ) then
5825: LD_EXP 11
5829: PPUSH
5830: CALL_OW 302
5834: IFFALSE 5860
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5836: LD_EXP 11
5840: PPUSH
5841: LD_STRING 09c_Givi
5843: PPUSH
5844: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5848: LD_EXP 11
5852: PPUSH
5853: LD_STRING 09c_Givi_ID
5855: PPUSH
5856: CALL_OW 39
// end ; if IsOk ( Mike ) then
5860: LD_EXP 12
5864: PPUSH
5865: CALL_OW 302
5869: IFFALSE 5895
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5871: LD_EXP 12
5875: PPUSH
5876: LD_STRING 09c_Mike
5878: PPUSH
5879: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5883: LD_EXP 12
5887: PPUSH
5888: LD_STRING 09c_Mike_ID
5890: PPUSH
5891: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5895: LD_EXP 13
5899: PPUSH
5900: CALL_OW 302
5904: IFFALSE 5930
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5906: LD_EXP 13
5910: PPUSH
5911: LD_STRING 09c_Ibrahim
5913: PPUSH
5914: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5918: LD_EXP 13
5922: PPUSH
5923: LD_STRING 09c_Ibrahim_ID
5925: PPUSH
5926: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5930: LD_EXP 14
5934: PPUSH
5935: CALL_OW 302
5939: IFFALSE 5965
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5941: LD_EXP 14
5945: PPUSH
5946: LD_STRING 09c_Kamil
5948: PPUSH
5949: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5953: LD_EXP 14
5957: PPUSH
5958: LD_STRING 09c_Kamil_ID
5960: PPUSH
5961: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5965: LD_EXP 15
5969: PPUSH
5970: CALL_OW 302
5974: IFFALSE 6000
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5976: LD_EXP 15
5980: PPUSH
5981: LD_STRING 09c_Kaia
5983: PPUSH
5984: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
5988: LD_EXP 15
5992: PPUSH
5993: LD_STRING 09c_Kaia_ID
5995: PPUSH
5996: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6000: LD_EXP 16
6004: PPUSH
6005: CALL_OW 302
6009: IFFALSE 6035
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6011: LD_EXP 16
6015: PPUSH
6016: LD_STRING 09c_Sophia
6018: PPUSH
6019: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6023: LD_EXP 16
6027: PPUSH
6028: LD_STRING 09c_Sophia_ID
6030: PPUSH
6031: CALL_OW 39
// end ; if IsOk ( Markov ) then
6035: LD_EXP 17
6039: PPUSH
6040: CALL_OW 302
6044: IFFALSE 6070
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6046: LD_EXP 17
6050: PPUSH
6051: LD_STRING 09c_Markov
6053: PPUSH
6054: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6058: LD_EXP 17
6062: PPUSH
6063: LD_STRING 09c_Markov_ID
6065: PPUSH
6066: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6070: LD_EXP 18
6074: PPUSH
6075: CALL_OW 302
6079: IFFALSE 6105
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6081: LD_EXP 18
6085: PPUSH
6086: LD_STRING 09c_Olaf
6088: PPUSH
6089: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6093: LD_EXP 18
6097: PPUSH
6098: LD_STRING 09c_Olaf_ID
6100: PPUSH
6101: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6105: LD_EXP 19
6109: PPUSH
6110: CALL_OW 302
6114: IFFALSE 6140
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6116: LD_EXP 19
6120: PPUSH
6121: LD_STRING 09c_Kurt
6123: PPUSH
6124: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6128: LD_EXP 19
6132: PPUSH
6133: LD_STRING 09c_Kurt_ID
6135: PPUSH
6136: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6140: LD_EXP 20
6144: PPUSH
6145: CALL_OW 302
6149: IFFALSE 6175
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6151: LD_EXP 20
6155: PPUSH
6156: LD_STRING 09c_Aviradze
6158: PPUSH
6159: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6163: LD_EXP 20
6167: PPUSH
6168: LD_STRING 09c_Aviradze_ID
6170: PPUSH
6171: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6175: LD_EXP 28
6179: PPUSH
6180: LD_INT 50
6182: PUSH
6183: EMPTY
6184: LIST
6185: PPUSH
6186: CALL_OW 72
6190: PPUSH
6191: LD_STRING 09c_schulzSecondSquad
6193: PPUSH
6194: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6198: LD_EXP 27
6202: PPUSH
6203: LD_INT 50
6205: PUSH
6206: EMPTY
6207: LIST
6208: PPUSH
6209: CALL_OW 72
6213: PPUSH
6214: LD_STRING 09c_heikeSecondSquad
6216: PPUSH
6217: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6221: LD_ADDR_VAR 0 2
6225: PUSH
6226: DOUBLE
6227: LD_INT 1
6229: DEC
6230: ST_TO_ADDR
6231: LD_EXP 28
6235: PPUSH
6236: LD_INT 50
6238: PUSH
6239: EMPTY
6240: LIST
6241: PPUSH
6242: CALL_OW 72
6246: PUSH
6247: FOR_TO
6248: IFFALSE 6276
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6250: LD_EXP 28
6254: PUSH
6255: LD_VAR 0 2
6259: ARRAY
6260: PPUSH
6261: LD_STRING 09c_random_ID_
6263: PUSH
6264: LD_VAR 0 2
6268: STR
6269: PPUSH
6270: CALL_OW 39
6274: GO 6247
6276: POP
6277: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6278: LD_ADDR_VAR 0 2
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_EXP 27
6292: PPUSH
6293: LD_INT 50
6295: PUSH
6296: EMPTY
6297: LIST
6298: PPUSH
6299: CALL_OW 72
6303: PUSH
6304: FOR_TO
6305: IFFALSE 6333
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6307: LD_EXP 27
6311: PUSH
6312: LD_VAR 0 2
6316: ARRAY
6317: PPUSH
6318: LD_STRING 09c_hrandom_ID_
6320: PUSH
6321: LD_VAR 0 2
6325: STR
6326: PPUSH
6327: CALL_OW 39
6331: GO 6304
6333: POP
6334: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_STRING 09c_vehicles
6342: PPUSH
6343: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6347: LD_OWVAR 1
6351: PPUSH
6352: LD_STRING 09c_tick
6354: PPUSH
6355: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6359: LD_INT 22
6361: PUSH
6362: LD_INT 2
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 23
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PPUSH
6383: CALL_OW 69
6387: PPUSH
6388: LD_STRING 09c_apes
6390: PPUSH
6391: CALL_OW 38
// wait ( 3 ) ;
6395: LD_INT 3
6397: PPUSH
6398: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6402: LD_INT 1
6404: PPUSH
6405: LD_STRING __x1/09_cont3
6407: PPUSH
6408: CALL_OW 340
// end ; end_of_file
6412: LD_VAR 0 1
6416: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6417: LD_INT 0
6419: PPUSH
6420: PPUSH
// if exist_mode then
6421: LD_VAR 0 2
6425: IFFALSE 6450
// unit := CreateCharacter ( prefix & ident ) else
6427: LD_ADDR_VAR 0 5
6431: PUSH
6432: LD_VAR 0 3
6436: PUSH
6437: LD_VAR 0 1
6441: STR
6442: PPUSH
6443: CALL_OW 34
6447: ST_TO_ADDR
6448: GO 6465
// unit := NewCharacter ( ident ) ;
6450: LD_ADDR_VAR 0 5
6454: PUSH
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 25
6464: ST_TO_ADDR
// result := unit ;
6465: LD_ADDR_VAR 0 4
6469: PUSH
6470: LD_VAR 0 5
6474: ST_TO_ADDR
// end ;
6475: LD_VAR 0 4
6479: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6480: LD_INT 0
6482: PPUSH
6483: PPUSH
// if not side or not nation then
6484: LD_VAR 0 1
6488: NOT
6489: PUSH
6490: LD_VAR 0 2
6494: NOT
6495: OR
6496: IFFALSE 6500
// exit ;
6498: GO 7268
// case nation of nation_american :
6500: LD_VAR 0 2
6504: PUSH
6505: LD_INT 1
6507: DOUBLE
6508: EQUAL
6509: IFTRUE 6513
6511: GO 6727
6513: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6514: LD_ADDR_VAR 0 4
6518: PUSH
6519: LD_INT 35
6521: PUSH
6522: LD_INT 45
6524: PUSH
6525: LD_INT 46
6527: PUSH
6528: LD_INT 47
6530: PUSH
6531: LD_INT 82
6533: PUSH
6534: LD_INT 83
6536: PUSH
6537: LD_INT 84
6539: PUSH
6540: LD_INT 85
6542: PUSH
6543: LD_INT 86
6545: PUSH
6546: LD_INT 1
6548: PUSH
6549: LD_INT 2
6551: PUSH
6552: LD_INT 6
6554: PUSH
6555: LD_INT 15
6557: PUSH
6558: LD_INT 16
6560: PUSH
6561: LD_INT 7
6563: PUSH
6564: LD_INT 12
6566: PUSH
6567: LD_INT 13
6569: PUSH
6570: LD_INT 10
6572: PUSH
6573: LD_INT 14
6575: PUSH
6576: LD_INT 20
6578: PUSH
6579: LD_INT 21
6581: PUSH
6582: LD_INT 22
6584: PUSH
6585: LD_INT 25
6587: PUSH
6588: LD_INT 32
6590: PUSH
6591: LD_INT 27
6593: PUSH
6594: LD_INT 36
6596: PUSH
6597: LD_INT 69
6599: PUSH
6600: LD_INT 39
6602: PUSH
6603: LD_INT 34
6605: PUSH
6606: LD_INT 40
6608: PUSH
6609: LD_INT 48
6611: PUSH
6612: LD_INT 49
6614: PUSH
6615: LD_INT 50
6617: PUSH
6618: LD_INT 51
6620: PUSH
6621: LD_INT 52
6623: PUSH
6624: LD_INT 53
6626: PUSH
6627: LD_INT 54
6629: PUSH
6630: LD_INT 55
6632: PUSH
6633: LD_INT 56
6635: PUSH
6636: LD_INT 57
6638: PUSH
6639: LD_INT 58
6641: PUSH
6642: LD_INT 59
6644: PUSH
6645: LD_INT 60
6647: PUSH
6648: LD_INT 61
6650: PUSH
6651: LD_INT 62
6653: PUSH
6654: LD_INT 80
6656: PUSH
6657: LD_INT 82
6659: PUSH
6660: LD_INT 83
6662: PUSH
6663: LD_INT 84
6665: PUSH
6666: LD_INT 85
6668: PUSH
6669: LD_INT 86
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: ST_TO_ADDR
6725: GO 7192
6727: LD_INT 2
6729: DOUBLE
6730: EQUAL
6731: IFTRUE 6735
6733: GO 6961
6735: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6736: LD_ADDR_VAR 0 4
6740: PUSH
6741: LD_INT 35
6743: PUSH
6744: LD_INT 45
6746: PUSH
6747: LD_INT 46
6749: PUSH
6750: LD_INT 47
6752: PUSH
6753: LD_INT 82
6755: PUSH
6756: LD_INT 83
6758: PUSH
6759: LD_INT 84
6761: PUSH
6762: LD_INT 85
6764: PUSH
6765: LD_INT 87
6767: PUSH
6768: LD_INT 70
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: LD_INT 11
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: LD_INT 5
6785: PUSH
6786: LD_INT 6
6788: PUSH
6789: LD_INT 15
6791: PUSH
6792: LD_INT 18
6794: PUSH
6795: LD_INT 7
6797: PUSH
6798: LD_INT 17
6800: PUSH
6801: LD_INT 8
6803: PUSH
6804: LD_INT 20
6806: PUSH
6807: LD_INT 21
6809: PUSH
6810: LD_INT 22
6812: PUSH
6813: LD_INT 72
6815: PUSH
6816: LD_INT 26
6818: PUSH
6819: LD_INT 69
6821: PUSH
6822: LD_INT 39
6824: PUSH
6825: LD_INT 40
6827: PUSH
6828: LD_INT 41
6830: PUSH
6831: LD_INT 42
6833: PUSH
6834: LD_INT 43
6836: PUSH
6837: LD_INT 48
6839: PUSH
6840: LD_INT 49
6842: PUSH
6843: LD_INT 50
6845: PUSH
6846: LD_INT 51
6848: PUSH
6849: LD_INT 52
6851: PUSH
6852: LD_INT 53
6854: PUSH
6855: LD_INT 54
6857: PUSH
6858: LD_INT 55
6860: PUSH
6861: LD_INT 56
6863: PUSH
6864: LD_INT 60
6866: PUSH
6867: LD_INT 61
6869: PUSH
6870: LD_INT 62
6872: PUSH
6873: LD_INT 66
6875: PUSH
6876: LD_INT 67
6878: PUSH
6879: LD_INT 68
6881: PUSH
6882: LD_INT 81
6884: PUSH
6885: LD_INT 82
6887: PUSH
6888: LD_INT 83
6890: PUSH
6891: LD_INT 84
6893: PUSH
6894: LD_INT 85
6896: PUSH
6897: LD_INT 87
6899: PUSH
6900: LD_INT 88
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: ST_TO_ADDR
6959: GO 7192
6961: LD_INT 3
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 7191
6969: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6970: LD_ADDR_VAR 0 4
6974: PUSH
6975: LD_INT 46
6977: PUSH
6978: LD_INT 47
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 82
6989: PUSH
6990: LD_INT 83
6992: PUSH
6993: LD_INT 84
6995: PUSH
6996: LD_INT 85
6998: PUSH
6999: LD_INT 86
7001: PUSH
7002: LD_INT 11
7004: PUSH
7005: LD_INT 9
7007: PUSH
7008: LD_INT 20
7010: PUSH
7011: LD_INT 19
7013: PUSH
7014: LD_INT 21
7016: PUSH
7017: LD_INT 24
7019: PUSH
7020: LD_INT 22
7022: PUSH
7023: LD_INT 25
7025: PUSH
7026: LD_INT 28
7028: PUSH
7029: LD_INT 29
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 31
7037: PUSH
7038: LD_INT 37
7040: PUSH
7041: LD_INT 38
7043: PUSH
7044: LD_INT 32
7046: PUSH
7047: LD_INT 27
7049: PUSH
7050: LD_INT 33
7052: PUSH
7053: LD_INT 69
7055: PUSH
7056: LD_INT 39
7058: PUSH
7059: LD_INT 34
7061: PUSH
7062: LD_INT 40
7064: PUSH
7065: LD_INT 71
7067: PUSH
7068: LD_INT 23
7070: PUSH
7071: LD_INT 44
7073: PUSH
7074: LD_INT 48
7076: PUSH
7077: LD_INT 49
7079: PUSH
7080: LD_INT 50
7082: PUSH
7083: LD_INT 51
7085: PUSH
7086: LD_INT 52
7088: PUSH
7089: LD_INT 53
7091: PUSH
7092: LD_INT 54
7094: PUSH
7095: LD_INT 55
7097: PUSH
7098: LD_INT 56
7100: PUSH
7101: LD_INT 57
7103: PUSH
7104: LD_INT 58
7106: PUSH
7107: LD_INT 59
7109: PUSH
7110: LD_INT 63
7112: PUSH
7113: LD_INT 64
7115: PUSH
7116: LD_INT 65
7118: PUSH
7119: LD_INT 82
7121: PUSH
7122: LD_INT 83
7124: PUSH
7125: LD_INT 84
7127: PUSH
7128: LD_INT 85
7130: PUSH
7131: LD_INT 86
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: ST_TO_ADDR
7189: GO 7192
7191: POP
// if state > - 1 and state < 3 then
7192: LD_VAR 0 3
7196: PUSH
7197: LD_INT 1
7199: NEG
7200: GREATER
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 3
7209: LESS
7210: AND
7211: IFFALSE 7268
// for i in result do
7213: LD_ADDR_VAR 0 5
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: FOR_IN
7224: IFFALSE 7266
// if GetTech ( i , side ) <> state then
7226: LD_VAR 0 5
7230: PPUSH
7231: LD_VAR 0 1
7235: PPUSH
7236: CALL_OW 321
7240: PUSH
7241: LD_VAR 0 3
7245: NONEQUAL
7246: IFFALSE 7264
// result := result diff i ;
7248: LD_ADDR_VAR 0 4
7252: PUSH
7253: LD_VAR 0 4
7257: PUSH
7258: LD_VAR 0 5
7262: DIFF
7263: ST_TO_ADDR
7264: GO 7223
7266: POP
7267: POP
// end ;
7268: LD_VAR 0 4
7272: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
7277: PPUSH
// result := true ;
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7286: LD_ADDR_VAR 0 5
7290: PUSH
7291: LD_VAR 0 2
7295: PPUSH
7296: CALL_OW 480
7300: ST_TO_ADDR
// if not tmp then
7301: LD_VAR 0 5
7305: NOT
7306: IFFALSE 7310
// exit ;
7308: GO 7359
// for i in tmp do
7310: LD_ADDR_VAR 0 4
7314: PUSH
7315: LD_VAR 0 5
7319: PUSH
7320: FOR_IN
7321: IFFALSE 7357
// if GetTech ( i , side ) <> state_researched then
7323: LD_VAR 0 4
7327: PPUSH
7328: LD_VAR 0 1
7332: PPUSH
7333: CALL_OW 321
7337: PUSH
7338: LD_INT 2
7340: NONEQUAL
7341: IFFALSE 7355
// begin result := false ;
7343: LD_ADDR_VAR 0 3
7347: PUSH
7348: LD_INT 0
7350: ST_TO_ADDR
// exit ;
7351: POP
7352: POP
7353: GO 7359
// end ;
7355: GO 7320
7357: POP
7358: POP
// end ;
7359: LD_VAR 0 3
7363: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7364: LD_INT 0
7366: PPUSH
7367: PPUSH
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
7378: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7379: LD_VAR 0 1
7383: NOT
7384: PUSH
7385: LD_VAR 0 1
7389: PPUSH
7390: CALL_OW 257
7394: PUSH
7395: LD_INT 9
7397: NONEQUAL
7398: OR
7399: IFFALSE 7403
// exit ;
7401: GO 7976
// side := GetSide ( unit ) ;
7403: LD_ADDR_VAR 0 9
7407: PUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 255
7417: ST_TO_ADDR
// tech_space := tech_spacanom ;
7418: LD_ADDR_VAR 0 12
7422: PUSH
7423: LD_INT 29
7425: ST_TO_ADDR
// tech_time := tech_taurad ;
7426: LD_ADDR_VAR 0 13
7430: PUSH
7431: LD_INT 28
7433: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7434: LD_ADDR_VAR 0 11
7438: PUSH
7439: LD_VAR 0 1
7443: PPUSH
7444: CALL_OW 310
7448: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7449: LD_VAR 0 11
7453: PPUSH
7454: CALL_OW 247
7458: PUSH
7459: LD_INT 2
7461: EQUAL
7462: IFFALSE 7466
// exit ;
7464: GO 7976
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7466: LD_ADDR_VAR 0 8
7470: PUSH
7471: LD_INT 81
7473: PUSH
7474: LD_VAR 0 9
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 69
7508: ST_TO_ADDR
// if not tmp then
7509: LD_VAR 0 8
7513: NOT
7514: IFFALSE 7518
// exit ;
7516: GO 7976
// if in_unit then
7518: LD_VAR 0 11
7522: IFFALSE 7546
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7524: LD_ADDR_VAR 0 10
7528: PUSH
7529: LD_VAR 0 8
7533: PPUSH
7534: LD_VAR 0 11
7538: PPUSH
7539: CALL_OW 74
7543: ST_TO_ADDR
7544: GO 7566
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7546: LD_ADDR_VAR 0 10
7550: PUSH
7551: LD_VAR 0 8
7555: PPUSH
7556: LD_VAR 0 1
7560: PPUSH
7561: CALL_OW 74
7565: ST_TO_ADDR
// if not enemy then
7566: LD_VAR 0 10
7570: NOT
7571: IFFALSE 7575
// exit ;
7573: GO 7976
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7575: LD_VAR 0 11
7579: PUSH
7580: LD_VAR 0 11
7584: PPUSH
7585: LD_VAR 0 10
7589: PPUSH
7590: CALL_OW 296
7594: PUSH
7595: LD_INT 13
7597: GREATER
7598: AND
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: LD_VAR 0 10
7609: PPUSH
7610: CALL_OW 296
7614: PUSH
7615: LD_INT 12
7617: GREATER
7618: OR
7619: IFFALSE 7623
// exit ;
7621: GO 7976
// missile := [ 1 ] ;
7623: LD_ADDR_VAR 0 14
7627: PUSH
7628: LD_INT 1
7630: PUSH
7631: EMPTY
7632: LIST
7633: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7634: LD_VAR 0 9
7638: PPUSH
7639: LD_VAR 0 12
7643: PPUSH
7644: CALL_OW 325
7648: IFFALSE 7677
// missile := Replace ( missile , missile + 1 , 2 ) ;
7650: LD_ADDR_VAR 0 14
7654: PUSH
7655: LD_VAR 0 14
7659: PPUSH
7660: LD_VAR 0 14
7664: PUSH
7665: LD_INT 1
7667: PLUS
7668: PPUSH
7669: LD_INT 2
7671: PPUSH
7672: CALL_OW 1
7676: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7677: LD_VAR 0 9
7681: PPUSH
7682: LD_VAR 0 13
7686: PPUSH
7687: CALL_OW 325
7691: PUSH
7692: LD_VAR 0 10
7696: PPUSH
7697: CALL_OW 255
7701: PPUSH
7702: LD_VAR 0 13
7706: PPUSH
7707: CALL_OW 325
7711: NOT
7712: AND
7713: IFFALSE 7742
// missile := Replace ( missile , missile + 1 , 3 ) ;
7715: LD_ADDR_VAR 0 14
7719: PUSH
7720: LD_VAR 0 14
7724: PPUSH
7725: LD_VAR 0 14
7729: PUSH
7730: LD_INT 1
7732: PLUS
7733: PPUSH
7734: LD_INT 3
7736: PPUSH
7737: CALL_OW 1
7741: ST_TO_ADDR
// if missile < 2 then
7742: LD_VAR 0 14
7746: PUSH
7747: LD_INT 2
7749: LESS
7750: IFFALSE 7754
// exit ;
7752: GO 7976
// x := GetX ( enemy ) ;
7754: LD_ADDR_VAR 0 4
7758: PUSH
7759: LD_VAR 0 10
7763: PPUSH
7764: CALL_OW 250
7768: ST_TO_ADDR
// y := GetY ( enemy ) ;
7769: LD_ADDR_VAR 0 5
7773: PUSH
7774: LD_VAR 0 10
7778: PPUSH
7779: CALL_OW 251
7783: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7784: LD_ADDR_VAR 0 6
7788: PUSH
7789: LD_VAR 0 4
7793: PUSH
7794: LD_INT 1
7796: NEG
7797: PPUSH
7798: LD_INT 1
7800: PPUSH
7801: CALL_OW 12
7805: PLUS
7806: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7807: LD_ADDR_VAR 0 7
7811: PUSH
7812: LD_VAR 0 5
7816: PUSH
7817: LD_INT 1
7819: NEG
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 12
7828: PLUS
7829: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7830: LD_VAR 0 6
7834: PPUSH
7835: LD_VAR 0 7
7839: PPUSH
7840: CALL_OW 488
7844: NOT
7845: IFFALSE 7867
// begin _x := x ;
7847: LD_ADDR_VAR 0 6
7851: PUSH
7852: LD_VAR 0 4
7856: ST_TO_ADDR
// _y := y ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_VAR 0 5
7866: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7867: LD_ADDR_VAR 0 3
7871: PUSH
7872: LD_INT 1
7874: PPUSH
7875: LD_VAR 0 14
7879: PPUSH
7880: CALL_OW 12
7884: ST_TO_ADDR
// case i of 1 :
7885: LD_VAR 0 3
7889: PUSH
7890: LD_INT 1
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7915
7898: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7899: LD_VAR 0 1
7903: PPUSH
7904: LD_VAR 0 10
7908: PPUSH
7909: CALL_OW 115
7913: GO 7976
7915: LD_INT 2
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7945
7923: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7924: LD_VAR 0 1
7928: PPUSH
7929: LD_VAR 0 6
7933: PPUSH
7934: LD_VAR 0 7
7938: PPUSH
7939: CALL_OW 153
7943: GO 7976
7945: LD_INT 3
7947: DOUBLE
7948: EQUAL
7949: IFTRUE 7953
7951: GO 7975
7953: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7954: LD_VAR 0 1
7958: PPUSH
7959: LD_VAR 0 6
7963: PPUSH
7964: LD_VAR 0 7
7968: PPUSH
7969: CALL_OW 154
7973: GO 7976
7975: POP
// end ;
7976: LD_VAR 0 2
7980: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7981: LD_INT 0
7983: PPUSH
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
7988: PPUSH
// if not unit or not building then
7989: LD_VAR 0 1
7993: NOT
7994: PUSH
7995: LD_VAR 0 2
7999: NOT
8000: OR
8001: IFFALSE 8005
// exit ;
8003: GO 8163
// x := GetX ( building ) ;
8005: LD_ADDR_VAR 0 5
8009: PUSH
8010: LD_VAR 0 2
8014: PPUSH
8015: CALL_OW 250
8019: ST_TO_ADDR
// y := GetY ( building ) ;
8020: LD_ADDR_VAR 0 6
8024: PUSH
8025: LD_VAR 0 2
8029: PPUSH
8030: CALL_OW 251
8034: ST_TO_ADDR
// for i = 0 to 5 do
8035: LD_ADDR_VAR 0 4
8039: PUSH
8040: DOUBLE
8041: LD_INT 0
8043: DEC
8044: ST_TO_ADDR
8045: LD_INT 5
8047: PUSH
8048: FOR_TO
8049: IFFALSE 8161
// begin _x := ShiftX ( x , i , 3 ) ;
8051: LD_ADDR_VAR 0 7
8055: PUSH
8056: LD_VAR 0 5
8060: PPUSH
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_INT 3
8068: PPUSH
8069: CALL_OW 272
8073: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8074: LD_ADDR_VAR 0 8
8078: PUSH
8079: LD_VAR 0 6
8083: PPUSH
8084: LD_VAR 0 4
8088: PPUSH
8089: LD_INT 3
8091: PPUSH
8092: CALL_OW 273
8096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8097: LD_VAR 0 7
8101: PPUSH
8102: LD_VAR 0 8
8106: PPUSH
8107: CALL_OW 488
8111: NOT
8112: IFFALSE 8116
// continue ;
8114: GO 8048
// if HexInfo ( _x , _y ) = 0 then
8116: LD_VAR 0 7
8120: PPUSH
8121: LD_VAR 0 8
8125: PPUSH
8126: CALL_OW 428
8130: PUSH
8131: LD_INT 0
8133: EQUAL
8134: IFFALSE 8159
// begin ComMoveXY ( unit , _x , _y ) ;
8136: LD_VAR 0 1
8140: PPUSH
8141: LD_VAR 0 7
8145: PPUSH
8146: LD_VAR 0 8
8150: PPUSH
8151: CALL_OW 111
// exit ;
8155: POP
8156: POP
8157: GO 8163
// end ; end ;
8159: GO 8048
8161: POP
8162: POP
// end ;
8163: LD_VAR 0 3
8167: RET
// export function ScanBase ( side , base_area ) ; begin
8168: LD_INT 0
8170: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8171: LD_ADDR_VAR 0 3
8175: PUSH
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_INT 81
8183: PUSH
8184: LD_VAR 0 1
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PPUSH
8193: CALL_OW 70
8197: ST_TO_ADDR
// end ;
8198: LD_VAR 0 3
8202: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8203: LD_INT 0
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
// result := false ;
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// side := GetSide ( unit ) ;
8217: LD_ADDR_VAR 0 3
8221: PUSH
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 255
8231: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8232: LD_ADDR_VAR 0 4
8236: PUSH
8237: LD_VAR 0 1
8241: PPUSH
8242: CALL_OW 248
8246: ST_TO_ADDR
// case nat of 1 :
8247: LD_VAR 0 4
8251: PUSH
8252: LD_INT 1
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8271
8260: POP
// tech := tech_lassight ; 2 :
8261: LD_ADDR_VAR 0 5
8265: PUSH
8266: LD_INT 12
8268: ST_TO_ADDR
8269: GO 8310
8271: LD_INT 2
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8290
8279: POP
// tech := tech_mortar ; 3 :
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: LD_INT 41
8287: ST_TO_ADDR
8288: GO 8310
8290: LD_INT 3
8292: DOUBLE
8293: EQUAL
8294: IFTRUE 8298
8296: GO 8309
8298: POP
// tech := tech_bazooka ; end ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 44
8306: ST_TO_ADDR
8307: GO 8310
8309: POP
// if Researched ( side , tech ) then
8310: LD_VAR 0 3
8314: PPUSH
8315: LD_VAR 0 5
8319: PPUSH
8320: CALL_OW 325
8324: IFFALSE 8351
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8326: LD_ADDR_VAR 0 2
8330: PUSH
8331: LD_INT 5
8333: PUSH
8334: LD_INT 8
8336: PUSH
8337: LD_INT 9
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: PUSH
8345: LD_VAR 0 4
8349: ARRAY
8350: ST_TO_ADDR
// end ;
8351: LD_VAR 0 2
8355: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
8360: PPUSH
// if not mines then
8361: LD_VAR 0 2
8365: NOT
8366: IFFALSE 8370
// exit ;
8368: GO 8514
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_INT 81
8377: PUSH
8378: LD_VAR 0 1
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 3
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// for i in mines do
8413: LD_ADDR_VAR 0 4
8417: PUSH
8418: LD_VAR 0 2
8422: PUSH
8423: FOR_IN
8424: IFFALSE 8512
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8426: LD_VAR 0 4
8430: PUSH
8431: LD_INT 1
8433: ARRAY
8434: PPUSH
8435: LD_VAR 0 4
8439: PUSH
8440: LD_INT 2
8442: ARRAY
8443: PPUSH
8444: CALL_OW 458
8448: NOT
8449: IFFALSE 8453
// continue ;
8451: GO 8423
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8453: LD_VAR 0 4
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PPUSH
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: ARRAY
8470: PPUSH
8471: CALL_OW 428
8475: PUSH
8476: LD_VAR 0 5
8480: IN
8481: IFFALSE 8510
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8483: LD_VAR 0 4
8487: PUSH
8488: LD_INT 1
8490: ARRAY
8491: PPUSH
8492: LD_VAR 0 4
8496: PUSH
8497: LD_INT 2
8499: ARRAY
8500: PPUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 456
// end ;
8510: GO 8423
8512: POP
8513: POP
// end ;
8514: LD_VAR 0 3
8518: RET
// export function Count ( array ) ; begin
8519: LD_INT 0
8521: PPUSH
// result := array + 0 ;
8522: LD_ADDR_VAR 0 2
8526: PUSH
8527: LD_VAR 0 1
8531: PUSH
8532: LD_INT 0
8534: PLUS
8535: ST_TO_ADDR
// end ;
8536: LD_VAR 0 2
8540: RET
// export function IsEmpty ( building ) ; begin
8541: LD_INT 0
8543: PPUSH
// if not building then
8544: LD_VAR 0 1
8548: NOT
8549: IFFALSE 8553
// exit ;
8551: GO 8596
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8553: LD_ADDR_VAR 0 2
8557: PUSH
8558: LD_VAR 0 1
8562: PUSH
8563: LD_INT 22
8565: PUSH
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL_OW 255
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 58
8582: PUSH
8583: EMPTY
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: IN
8595: ST_TO_ADDR
// end ;
8596: LD_VAR 0 2
8600: RET
// export function IsNotFull ( building ) ; var places ; begin
8601: LD_INT 0
8603: PPUSH
8604: PPUSH
// if not building then
8605: LD_VAR 0 1
8609: NOT
8610: IFFALSE 8614
// exit ;
8612: GO 8642
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
8614: LD_ADDR_VAR 0 2
8618: PUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 62
8629: PUSH
8630: EMPTY
8631: LIST
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 72
8641: ST_TO_ADDR
// end ;
8642: LD_VAR 0 2
8646: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8647: LD_INT 0
8649: PPUSH
8650: PPUSH
8651: PPUSH
8652: PPUSH
// tmp := [ ] ;
8653: LD_ADDR_VAR 0 3
8657: PUSH
8658: EMPTY
8659: ST_TO_ADDR
// list := [ ] ;
8660: LD_ADDR_VAR 0 5
8664: PUSH
8665: EMPTY
8666: ST_TO_ADDR
// for i = 16 to 25 do
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: DOUBLE
8673: LD_INT 16
8675: DEC
8676: ST_TO_ADDR
8677: LD_INT 25
8679: PUSH
8680: FOR_TO
8681: IFFALSE 8754
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 255
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 91
8712: PUSH
8713: LD_VAR 0 1
8717: PUSH
8718: LD_INT 6
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_VAR 0 4
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: PPUSH
8746: CALL_OW 69
8750: ADD
8751: ST_TO_ADDR
8752: GO 8680
8754: POP
8755: POP
// for i = 1 to tmp do
8756: LD_ADDR_VAR 0 4
8760: PUSH
8761: DOUBLE
8762: LD_INT 1
8764: DEC
8765: ST_TO_ADDR
8766: LD_VAR 0 3
8770: PUSH
8771: FOR_TO
8772: IFFALSE 8860
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8774: LD_ADDR_VAR 0 5
8778: PUSH
8779: LD_VAR 0 5
8783: PUSH
8784: LD_VAR 0 3
8788: PUSH
8789: LD_VAR 0 4
8793: ARRAY
8794: PPUSH
8795: CALL_OW 266
8799: PUSH
8800: LD_VAR 0 3
8804: PUSH
8805: LD_VAR 0 4
8809: ARRAY
8810: PPUSH
8811: CALL_OW 250
8815: PUSH
8816: LD_VAR 0 3
8820: PUSH
8821: LD_VAR 0 4
8825: ARRAY
8826: PPUSH
8827: CALL_OW 251
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_VAR 0 4
8841: ARRAY
8842: PPUSH
8843: CALL_OW 254
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: ADD
8857: ST_TO_ADDR
8858: GO 8771
8860: POP
8861: POP
// result := list ;
8862: LD_ADDR_VAR 0 2
8866: PUSH
8867: LD_VAR 0 5
8871: ST_TO_ADDR
// end ;
8872: LD_VAR 0 2
8876: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8877: LD_INT 0
8879: PPUSH
8880: PPUSH
8881: PPUSH
8882: PPUSH
8883: PPUSH
8884: PPUSH
8885: PPUSH
// if not factory then
8886: LD_VAR 0 1
8890: NOT
8891: IFFALSE 8895
// exit ;
8893: GO 9488
// if control = control_apeman then
8895: LD_VAR 0 4
8899: PUSH
8900: LD_INT 5
8902: EQUAL
8903: IFFALSE 9012
// begin tmp := UnitsInside ( factory ) ;
8905: LD_ADDR_VAR 0 8
8909: PUSH
8910: LD_VAR 0 1
8914: PPUSH
8915: CALL_OW 313
8919: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8920: LD_VAR 0 8
8924: PPUSH
8925: LD_INT 25
8927: PUSH
8928: LD_INT 12
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: NOT
8940: IFFALSE 8950
// control := control_manual ;
8942: LD_ADDR_VAR 0 4
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8950: LD_ADDR_VAR 0 8
8954: PUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL 8647 0 1
8964: ST_TO_ADDR
// if tmp then
8965: LD_VAR 0 8
8969: IFFALSE 9012
// begin for i in tmp do
8971: LD_ADDR_VAR 0 7
8975: PUSH
8976: LD_VAR 0 8
8980: PUSH
8981: FOR_IN
8982: IFFALSE 9010
// if i [ 1 ] = b_ext_radio then
8984: LD_VAR 0 7
8988: PUSH
8989: LD_INT 1
8991: ARRAY
8992: PUSH
8993: LD_INT 22
8995: EQUAL
8996: IFFALSE 9008
// begin control := control_remote ;
8998: LD_ADDR_VAR 0 4
9002: PUSH
9003: LD_INT 2
9005: ST_TO_ADDR
// break ;
9006: GO 9010
// end ;
9008: GO 8981
9010: POP
9011: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_VAR 0 2
9021: PPUSH
9022: LD_VAR 0 3
9026: PPUSH
9027: LD_VAR 0 4
9031: PPUSH
9032: LD_VAR 0 5
9036: PPUSH
9037: CALL_OW 448
9041: IFFALSE 9076
// begin result := [ chassis , engine , control , weapon ] ;
9043: LD_ADDR_VAR 0 6
9047: PUSH
9048: LD_VAR 0 2
9052: PUSH
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 4
9062: PUSH
9063: LD_VAR 0 5
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: ST_TO_ADDR
// exit ;
9074: GO 9488
// end ; _chassis := AvailableChassisList ( factory ) ;
9076: LD_ADDR_VAR 0 9
9080: PUSH
9081: LD_VAR 0 1
9085: PPUSH
9086: CALL_OW 475
9090: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9091: LD_ADDR_VAR 0 11
9095: PUSH
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 476
9105: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9106: LD_ADDR_VAR 0 12
9110: PUSH
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 477
9120: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9121: LD_ADDR_VAR 0 10
9125: PUSH
9126: LD_VAR 0 1
9130: PPUSH
9131: CALL_OW 478
9135: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9136: LD_VAR 0 9
9140: NOT
9141: PUSH
9142: LD_VAR 0 11
9146: NOT
9147: OR
9148: PUSH
9149: LD_VAR 0 12
9153: NOT
9154: OR
9155: PUSH
9156: LD_VAR 0 10
9160: NOT
9161: OR
9162: IFFALSE 9197
// begin result := [ chassis , engine , control , weapon ] ;
9164: LD_ADDR_VAR 0 6
9168: PUSH
9169: LD_VAR 0 2
9173: PUSH
9174: LD_VAR 0 3
9178: PUSH
9179: LD_VAR 0 4
9183: PUSH
9184: LD_VAR 0 5
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: ST_TO_ADDR
// exit ;
9195: GO 9488
// end ; if not chassis in _chassis then
9197: LD_VAR 0 2
9201: PUSH
9202: LD_VAR 0 9
9206: IN
9207: NOT
9208: IFFALSE 9234
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: LD_VAR 0 9
9219: PUSH
9220: LD_INT 1
9222: PPUSH
9223: LD_VAR 0 9
9227: PPUSH
9228: CALL_OW 12
9232: ARRAY
9233: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9234: LD_VAR 0 2
9238: PPUSH
9239: LD_VAR 0 3
9243: PPUSH
9244: CALL 9493 0 2
9248: NOT
9249: IFFALSE 9308
// repeat engine := _engine [ 1 ] ;
9251: LD_ADDR_VAR 0 3
9255: PUSH
9256: LD_VAR 0 11
9260: PUSH
9261: LD_INT 1
9263: ARRAY
9264: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9265: LD_ADDR_VAR 0 11
9269: PUSH
9270: LD_VAR 0 11
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: CALL_OW 3
9282: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9283: LD_VAR 0 2
9287: PPUSH
9288: LD_VAR 0 3
9292: PPUSH
9293: CALL 9493 0 2
9297: PUSH
9298: LD_VAR 0 11
9302: PUSH
9303: EMPTY
9304: EQUAL
9305: OR
9306: IFFALSE 9251
// if not control in _control then
9308: LD_VAR 0 4
9312: PUSH
9313: LD_VAR 0 12
9317: IN
9318: NOT
9319: IFFALSE 9345
// control := _control [ rand ( 1 , _control ) ] ;
9321: LD_ADDR_VAR 0 4
9325: PUSH
9326: LD_VAR 0 12
9330: PUSH
9331: LD_INT 1
9333: PPUSH
9334: LD_VAR 0 12
9338: PPUSH
9339: CALL_OW 12
9343: ARRAY
9344: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_VAR 0 5
9354: PPUSH
9355: CALL 9713 0 2
9359: NOT
9360: IFFALSE 9419
// repeat weapon := _weapon [ 1 ] ;
9362: LD_ADDR_VAR 0 5
9366: PUSH
9367: LD_VAR 0 10
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9376: LD_ADDR_VAR 0 10
9380: PUSH
9381: LD_VAR 0 10
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: CALL_OW 3
9393: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9394: LD_VAR 0 2
9398: PPUSH
9399: LD_VAR 0 5
9403: PPUSH
9404: CALL 9713 0 2
9408: PUSH
9409: LD_VAR 0 10
9413: PUSH
9414: EMPTY
9415: EQUAL
9416: OR
9417: IFFALSE 9362
// result := [ ] ;
9419: LD_ADDR_VAR 0 6
9423: PUSH
9424: EMPTY
9425: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9426: LD_VAR 0 1
9430: PPUSH
9431: LD_VAR 0 2
9435: PPUSH
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_VAR 0 5
9450: PPUSH
9451: CALL_OW 448
9455: IFFALSE 9488
// result := [ chassis , engine , control , weapon ] ;
9457: LD_ADDR_VAR 0 6
9461: PUSH
9462: LD_VAR 0 2
9466: PUSH
9467: LD_VAR 0 3
9471: PUSH
9472: LD_VAR 0 4
9476: PUSH
9477: LD_VAR 0 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: ST_TO_ADDR
// end ;
9488: LD_VAR 0 6
9492: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9493: LD_INT 0
9495: PPUSH
// if not chassis or not engine then
9496: LD_VAR 0 1
9500: NOT
9501: PUSH
9502: LD_VAR 0 2
9506: NOT
9507: OR
9508: IFFALSE 9512
// exit ;
9510: GO 9708
// case engine of engine_solar :
9512: LD_VAR 0 2
9516: PUSH
9517: LD_INT 2
9519: DOUBLE
9520: EQUAL
9521: IFTRUE 9525
9523: GO 9563
9525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9526: LD_ADDR_VAR 0 3
9530: PUSH
9531: LD_INT 11
9533: PUSH
9534: LD_INT 12
9536: PUSH
9537: LD_INT 13
9539: PUSH
9540: LD_INT 14
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: LD_INT 2
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: ST_TO_ADDR
9561: GO 9692
9563: LD_INT 1
9565: DOUBLE
9566: EQUAL
9567: IFTRUE 9571
9569: GO 9633
9571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9572: LD_ADDR_VAR 0 3
9576: PUSH
9577: LD_INT 11
9579: PUSH
9580: LD_INT 12
9582: PUSH
9583: LD_INT 13
9585: PUSH
9586: LD_INT 14
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: LD_INT 2
9594: PUSH
9595: LD_INT 3
9597: PUSH
9598: LD_INT 4
9600: PUSH
9601: LD_INT 5
9603: PUSH
9604: LD_INT 21
9606: PUSH
9607: LD_INT 23
9609: PUSH
9610: LD_INT 22
9612: PUSH
9613: LD_INT 24
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
9631: GO 9692
9633: LD_INT 3
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9691
9641: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9642: LD_ADDR_VAR 0 3
9646: PUSH
9647: LD_INT 13
9649: PUSH
9650: LD_INT 14
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: LD_INT 4
9661: PUSH
9662: LD_INT 5
9664: PUSH
9665: LD_INT 21
9667: PUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 23
9673: PUSH
9674: LD_INT 24
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
9689: GO 9692
9691: POP
// result := ( chassis in result ) ;
9692: LD_ADDR_VAR 0 3
9696: PUSH
9697: LD_VAR 0 1
9701: PUSH
9702: LD_VAR 0 3
9706: IN
9707: ST_TO_ADDR
// end ;
9708: LD_VAR 0 3
9712: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9713: LD_INT 0
9715: PPUSH
// if not chassis or not weapon then
9716: LD_VAR 0 1
9720: NOT
9721: PUSH
9722: LD_VAR 0 2
9726: NOT
9727: OR
9728: IFFALSE 9732
// exit ;
9730: GO 10792
// case weapon of us_machine_gun :
9732: LD_VAR 0 2
9736: PUSH
9737: LD_INT 2
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9775
9745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9746: LD_ADDR_VAR 0 3
9750: PUSH
9751: LD_INT 1
9753: PUSH
9754: LD_INT 2
9756: PUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 4
9762: PUSH
9763: LD_INT 5
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
9773: GO 10776
9775: LD_INT 3
9777: DOUBLE
9778: EQUAL
9779: IFTRUE 9783
9781: GO 9813
9783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_INT 1
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 3
9797: PUSH
9798: LD_INT 4
9800: PUSH
9801: LD_INT 5
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: ST_TO_ADDR
9811: GO 10776
9813: LD_INT 11
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9851
9821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9822: LD_ADDR_VAR 0 3
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: LD_INT 3
9835: PUSH
9836: LD_INT 4
9838: PUSH
9839: LD_INT 5
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: ST_TO_ADDR
9849: GO 10776
9851: LD_INT 4
9853: DOUBLE
9854: EQUAL
9855: IFTRUE 9859
9857: GO 9885
9859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9860: LD_ADDR_VAR 0 3
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: LD_INT 3
9870: PUSH
9871: LD_INT 4
9873: PUSH
9874: LD_INT 5
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: ST_TO_ADDR
9883: GO 10776
9885: LD_INT 5
9887: DOUBLE
9888: EQUAL
9889: IFTRUE 9893
9891: GO 9919
9893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9894: LD_ADDR_VAR 0 3
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 3
9904: PUSH
9905: LD_INT 4
9907: PUSH
9908: LD_INT 5
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: ST_TO_ADDR
9917: GO 10776
9919: LD_INT 9
9921: DOUBLE
9922: EQUAL
9923: IFTRUE 9927
9925: GO 9953
9927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9928: LD_ADDR_VAR 0 3
9932: PUSH
9933: LD_INT 2
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_INT 5
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: ST_TO_ADDR
9951: GO 10776
9953: LD_INT 7
9955: DOUBLE
9956: EQUAL
9957: IFTRUE 9961
9959: GO 9987
9961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9962: LD_ADDR_VAR 0 3
9966: PUSH
9967: LD_INT 2
9969: PUSH
9970: LD_INT 3
9972: PUSH
9973: LD_INT 4
9975: PUSH
9976: LD_INT 5
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: ST_TO_ADDR
9985: GO 10776
9987: LD_INT 12
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10021
9995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
9996: LD_ADDR_VAR 0 3
10000: PUSH
10001: LD_INT 2
10003: PUSH
10004: LD_INT 3
10006: PUSH
10007: LD_INT 4
10009: PUSH
10010: LD_INT 5
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: ST_TO_ADDR
10019: GO 10776
10021: LD_INT 13
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10055
10029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10030: LD_ADDR_VAR 0 3
10034: PUSH
10035: LD_INT 2
10037: PUSH
10038: LD_INT 3
10040: PUSH
10041: LD_INT 4
10043: PUSH
10044: LD_INT 5
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: ST_TO_ADDR
10053: GO 10776
10055: LD_INT 14
10057: DOUBLE
10058: EQUAL
10059: IFTRUE 10063
10061: GO 10081
10063: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10064: LD_ADDR_VAR 0 3
10068: PUSH
10069: LD_INT 4
10071: PUSH
10072: LD_INT 5
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: ST_TO_ADDR
10079: GO 10776
10081: LD_INT 6
10083: DOUBLE
10084: EQUAL
10085: IFTRUE 10089
10087: GO 10107
10089: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_INT 4
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: ST_TO_ADDR
10105: GO 10776
10107: LD_INT 10
10109: DOUBLE
10110: EQUAL
10111: IFTRUE 10115
10113: GO 10133
10115: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10116: LD_ADDR_VAR 0 3
10120: PUSH
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: ST_TO_ADDR
10131: GO 10776
10133: LD_INT 22
10135: DOUBLE
10136: EQUAL
10137: IFTRUE 10141
10139: GO 10167
10141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10142: LD_ADDR_VAR 0 3
10146: PUSH
10147: LD_INT 11
10149: PUSH
10150: LD_INT 12
10152: PUSH
10153: LD_INT 13
10155: PUSH
10156: LD_INT 14
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: ST_TO_ADDR
10165: GO 10776
10167: LD_INT 23
10169: DOUBLE
10170: EQUAL
10171: IFTRUE 10175
10173: GO 10201
10175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10176: LD_ADDR_VAR 0 3
10180: PUSH
10181: LD_INT 11
10183: PUSH
10184: LD_INT 12
10186: PUSH
10187: LD_INT 13
10189: PUSH
10190: LD_INT 14
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: ST_TO_ADDR
10199: GO 10776
10201: LD_INT 24
10203: DOUBLE
10204: EQUAL
10205: IFTRUE 10209
10207: GO 10235
10209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10210: LD_ADDR_VAR 0 3
10214: PUSH
10215: LD_INT 11
10217: PUSH
10218: LD_INT 12
10220: PUSH
10221: LD_INT 13
10223: PUSH
10224: LD_INT 14
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: ST_TO_ADDR
10233: GO 10776
10235: LD_INT 30
10237: DOUBLE
10238: EQUAL
10239: IFTRUE 10243
10241: GO 10269
10243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10244: LD_ADDR_VAR 0 3
10248: PUSH
10249: LD_INT 11
10251: PUSH
10252: LD_INT 12
10254: PUSH
10255: LD_INT 13
10257: PUSH
10258: LD_INT 14
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: ST_TO_ADDR
10267: GO 10776
10269: LD_INT 25
10271: DOUBLE
10272: EQUAL
10273: IFTRUE 10277
10275: GO 10295
10277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10278: LD_ADDR_VAR 0 3
10282: PUSH
10283: LD_INT 13
10285: PUSH
10286: LD_INT 14
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: ST_TO_ADDR
10293: GO 10776
10295: LD_INT 27
10297: DOUBLE
10298: EQUAL
10299: IFTRUE 10303
10301: GO 10321
10303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10304: LD_ADDR_VAR 0 3
10308: PUSH
10309: LD_INT 13
10311: PUSH
10312: LD_INT 14
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: ST_TO_ADDR
10319: GO 10776
10321: LD_INT 92
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 10355
10329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10330: LD_ADDR_VAR 0 3
10334: PUSH
10335: LD_INT 11
10337: PUSH
10338: LD_INT 12
10340: PUSH
10341: LD_INT 13
10343: PUSH
10344: LD_INT 14
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: ST_TO_ADDR
10353: GO 10776
10355: LD_INT 28
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10381
10363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10364: LD_ADDR_VAR 0 3
10368: PUSH
10369: LD_INT 13
10371: PUSH
10372: LD_INT 14
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: ST_TO_ADDR
10379: GO 10776
10381: LD_INT 29
10383: DOUBLE
10384: EQUAL
10385: IFTRUE 10389
10387: GO 10407
10389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10390: LD_ADDR_VAR 0 3
10394: PUSH
10395: LD_INT 13
10397: PUSH
10398: LD_INT 14
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: ST_TO_ADDR
10405: GO 10776
10407: LD_INT 31
10409: DOUBLE
10410: EQUAL
10411: IFTRUE 10415
10413: GO 10433
10415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10416: LD_ADDR_VAR 0 3
10420: PUSH
10421: LD_INT 13
10423: PUSH
10424: LD_INT 14
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: ST_TO_ADDR
10431: GO 10776
10433: LD_INT 26
10435: DOUBLE
10436: EQUAL
10437: IFTRUE 10441
10439: GO 10459
10441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10442: LD_ADDR_VAR 0 3
10446: PUSH
10447: LD_INT 13
10449: PUSH
10450: LD_INT 14
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: ST_TO_ADDR
10457: GO 10776
10459: LD_INT 42
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10493
10467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10468: LD_ADDR_VAR 0 3
10472: PUSH
10473: LD_INT 21
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: LD_INT 24
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: ST_TO_ADDR
10491: GO 10776
10493: LD_INT 43
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10527
10501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10502: LD_ADDR_VAR 0 3
10506: PUSH
10507: LD_INT 21
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_INT 23
10515: PUSH
10516: LD_INT 24
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: ST_TO_ADDR
10525: GO 10776
10527: LD_INT 44
10529: DOUBLE
10530: EQUAL
10531: IFTRUE 10535
10533: GO 10561
10535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10536: LD_ADDR_VAR 0 3
10540: PUSH
10541: LD_INT 21
10543: PUSH
10544: LD_INT 22
10546: PUSH
10547: LD_INT 23
10549: PUSH
10550: LD_INT 24
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: ST_TO_ADDR
10559: GO 10776
10561: LD_INT 45
10563: DOUBLE
10564: EQUAL
10565: IFTRUE 10569
10567: GO 10595
10569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10570: LD_ADDR_VAR 0 3
10574: PUSH
10575: LD_INT 21
10577: PUSH
10578: LD_INT 22
10580: PUSH
10581: LD_INT 23
10583: PUSH
10584: LD_INT 24
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
10593: GO 10776
10595: LD_INT 49
10597: DOUBLE
10598: EQUAL
10599: IFTRUE 10603
10601: GO 10629
10603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10604: LD_ADDR_VAR 0 3
10608: PUSH
10609: LD_INT 21
10611: PUSH
10612: LD_INT 22
10614: PUSH
10615: LD_INT 23
10617: PUSH
10618: LD_INT 24
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: ST_TO_ADDR
10627: GO 10776
10629: LD_INT 51
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 10663
10637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10638: LD_ADDR_VAR 0 3
10642: PUSH
10643: LD_INT 21
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 23
10651: PUSH
10652: LD_INT 24
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: ST_TO_ADDR
10661: GO 10776
10663: LD_INT 52
10665: DOUBLE
10666: EQUAL
10667: IFTRUE 10671
10669: GO 10697
10671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10672: LD_ADDR_VAR 0 3
10676: PUSH
10677: LD_INT 21
10679: PUSH
10680: LD_INT 22
10682: PUSH
10683: LD_INT 23
10685: PUSH
10686: LD_INT 24
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: ST_TO_ADDR
10695: GO 10776
10697: LD_INT 53
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10723
10705: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 23
10713: PUSH
10714: LD_INT 24
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: ST_TO_ADDR
10721: GO 10776
10723: LD_INT 46
10725: DOUBLE
10726: EQUAL
10727: IFTRUE 10731
10729: GO 10749
10731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10732: LD_ADDR_VAR 0 3
10736: PUSH
10737: LD_INT 23
10739: PUSH
10740: LD_INT 24
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: ST_TO_ADDR
10747: GO 10776
10749: LD_INT 47
10751: DOUBLE
10752: EQUAL
10753: IFTRUE 10757
10755: GO 10775
10757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10758: LD_ADDR_VAR 0 3
10762: PUSH
10763: LD_INT 23
10765: PUSH
10766: LD_INT 24
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: ST_TO_ADDR
10773: GO 10776
10775: POP
// result := ( chassis in result ) ;
10776: LD_ADDR_VAR 0 3
10780: PUSH
10781: LD_VAR 0 1
10785: PUSH
10786: LD_VAR 0 3
10790: IN
10791: ST_TO_ADDR
// end ;
10792: LD_VAR 0 3
10796: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10797: LD_INT 0
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
10805: PPUSH
// result := array ;
10806: LD_ADDR_VAR 0 5
10810: PUSH
10811: LD_VAR 0 1
10815: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10816: LD_VAR 0 1
10820: NOT
10821: PUSH
10822: LD_VAR 0 2
10826: NOT
10827: OR
10828: PUSH
10829: LD_VAR 0 3
10833: NOT
10834: OR
10835: PUSH
10836: LD_VAR 0 2
10840: PUSH
10841: LD_VAR 0 1
10845: GREATER
10846: OR
10847: PUSH
10848: LD_VAR 0 3
10852: PUSH
10853: LD_VAR 0 1
10857: GREATER
10858: OR
10859: IFFALSE 10863
// exit ;
10861: GO 11159
// if direction then
10863: LD_VAR 0 4
10867: IFFALSE 10931
// begin d := 1 ;
10869: LD_ADDR_VAR 0 9
10873: PUSH
10874: LD_INT 1
10876: ST_TO_ADDR
// if i_from > i_to then
10877: LD_VAR 0 2
10881: PUSH
10882: LD_VAR 0 3
10886: GREATER
10887: IFFALSE 10913
// length := ( array - i_from ) + i_to else
10889: LD_ADDR_VAR 0 11
10893: PUSH
10894: LD_VAR 0 1
10898: PUSH
10899: LD_VAR 0 2
10903: MINUS
10904: PUSH
10905: LD_VAR 0 3
10909: PLUS
10910: ST_TO_ADDR
10911: GO 10929
// length := i_to - i_from ;
10913: LD_ADDR_VAR 0 11
10917: PUSH
10918: LD_VAR 0 3
10922: PUSH
10923: LD_VAR 0 2
10927: MINUS
10928: ST_TO_ADDR
// end else
10929: GO 10992
// begin d := - 1 ;
10931: LD_ADDR_VAR 0 9
10935: PUSH
10936: LD_INT 1
10938: NEG
10939: ST_TO_ADDR
// if i_from > i_to then
10940: LD_VAR 0 2
10944: PUSH
10945: LD_VAR 0 3
10949: GREATER
10950: IFFALSE 10970
// length := i_from - i_to else
10952: LD_ADDR_VAR 0 11
10956: PUSH
10957: LD_VAR 0 2
10961: PUSH
10962: LD_VAR 0 3
10966: MINUS
10967: ST_TO_ADDR
10968: GO 10992
// length := ( array - i_to ) + i_from ;
10970: LD_ADDR_VAR 0 11
10974: PUSH
10975: LD_VAR 0 1
10979: PUSH
10980: LD_VAR 0 3
10984: MINUS
10985: PUSH
10986: LD_VAR 0 2
10990: PLUS
10991: ST_TO_ADDR
// end ; if not length then
10992: LD_VAR 0 11
10996: NOT
10997: IFFALSE 11001
// exit ;
10999: GO 11159
// tmp := array ;
11001: LD_ADDR_VAR 0 10
11005: PUSH
11006: LD_VAR 0 1
11010: ST_TO_ADDR
// for i = 1 to length do
11011: LD_ADDR_VAR 0 6
11015: PUSH
11016: DOUBLE
11017: LD_INT 1
11019: DEC
11020: ST_TO_ADDR
11021: LD_VAR 0 11
11025: PUSH
11026: FOR_TO
11027: IFFALSE 11147
// begin for j = 1 to array do
11029: LD_ADDR_VAR 0 7
11033: PUSH
11034: DOUBLE
11035: LD_INT 1
11037: DEC
11038: ST_TO_ADDR
11039: LD_VAR 0 1
11043: PUSH
11044: FOR_TO
11045: IFFALSE 11133
// begin k := j + d ;
11047: LD_ADDR_VAR 0 8
11051: PUSH
11052: LD_VAR 0 7
11056: PUSH
11057: LD_VAR 0 9
11061: PLUS
11062: ST_TO_ADDR
// if k > array then
11063: LD_VAR 0 8
11067: PUSH
11068: LD_VAR 0 1
11072: GREATER
11073: IFFALSE 11083
// k := 1 ;
11075: LD_ADDR_VAR 0 8
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// if not k then
11083: LD_VAR 0 8
11087: NOT
11088: IFFALSE 11100
// k := array ;
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: LD_VAR 0 1
11099: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11100: LD_ADDR_VAR 0 10
11104: PUSH
11105: LD_VAR 0 10
11109: PPUSH
11110: LD_VAR 0 8
11114: PPUSH
11115: LD_VAR 0 1
11119: PUSH
11120: LD_VAR 0 7
11124: ARRAY
11125: PPUSH
11126: CALL_OW 1
11130: ST_TO_ADDR
// end ;
11131: GO 11044
11133: POP
11134: POP
// array := tmp ;
11135: LD_ADDR_VAR 0 1
11139: PUSH
11140: LD_VAR 0 10
11144: ST_TO_ADDR
// end ;
11145: GO 11026
11147: POP
11148: POP
// result := array ;
11149: LD_ADDR_VAR 0 5
11153: PUSH
11154: LD_VAR 0 1
11158: ST_TO_ADDR
// end ;
11159: LD_VAR 0 5
11163: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
// result := 0 ;
11168: LD_ADDR_VAR 0 3
11172: PUSH
11173: LD_INT 0
11175: ST_TO_ADDR
// if not array or not value in array then
11176: LD_VAR 0 1
11180: NOT
11181: PUSH
11182: LD_VAR 0 2
11186: PUSH
11187: LD_VAR 0 1
11191: IN
11192: NOT
11193: OR
11194: IFFALSE 11198
// exit ;
11196: GO 11252
// for i = 1 to array do
11198: LD_ADDR_VAR 0 4
11202: PUSH
11203: DOUBLE
11204: LD_INT 1
11206: DEC
11207: ST_TO_ADDR
11208: LD_VAR 0 1
11212: PUSH
11213: FOR_TO
11214: IFFALSE 11250
// if value = array [ i ] then
11216: LD_VAR 0 2
11220: PUSH
11221: LD_VAR 0 1
11225: PUSH
11226: LD_VAR 0 4
11230: ARRAY
11231: EQUAL
11232: IFFALSE 11248
// begin result := i ;
11234: LD_ADDR_VAR 0 3
11238: PUSH
11239: LD_VAR 0 4
11243: ST_TO_ADDR
// exit ;
11244: POP
11245: POP
11246: GO 11252
// end ;
11248: GO 11213
11250: POP
11251: POP
// end ;
11252: LD_VAR 0 3
11256: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11257: LD_INT 0
11259: PPUSH
// vc_chassis := chassis ;
11260: LD_ADDR_OWVAR 37
11264: PUSH
11265: LD_VAR 0 1
11269: ST_TO_ADDR
// vc_engine := engine ;
11270: LD_ADDR_OWVAR 39
11274: PUSH
11275: LD_VAR 0 2
11279: ST_TO_ADDR
// vc_control := control ;
11280: LD_ADDR_OWVAR 38
11284: PUSH
11285: LD_VAR 0 3
11289: ST_TO_ADDR
// vc_weapon := weapon ;
11290: LD_ADDR_OWVAR 40
11294: PUSH
11295: LD_VAR 0 4
11299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11300: LD_ADDR_OWVAR 41
11304: PUSH
11305: LD_VAR 0 5
11309: ST_TO_ADDR
// end ;
11310: LD_VAR 0 6
11314: RET
// export function WantPlant ( unit ) ; var task ; begin
11315: LD_INT 0
11317: PPUSH
11318: PPUSH
// result := false ;
11319: LD_ADDR_VAR 0 2
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11327: LD_ADDR_VAR 0 3
11331: PUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 437
11341: ST_TO_ADDR
// if task then
11342: LD_VAR 0 3
11346: IFFALSE 11374
// if task [ 1 ] [ 1 ] = p then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PUSH
11357: LD_INT 1
11359: ARRAY
11360: PUSH
11361: LD_STRING p
11363: EQUAL
11364: IFFALSE 11374
// result := true ;
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 2
11378: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11379: LD_INT 0
11381: PPUSH
11382: PPUSH
11383: PPUSH
11384: PPUSH
// if pos < 1 then
11385: LD_VAR 0 2
11389: PUSH
11390: LD_INT 1
11392: LESS
11393: IFFALSE 11397
// exit ;
11395: GO 11700
// if pos = 1 then
11397: LD_VAR 0 2
11401: PUSH
11402: LD_INT 1
11404: EQUAL
11405: IFFALSE 11438
// result := Replace ( arr , pos [ 1 ] , value ) else
11407: LD_ADDR_VAR 0 4
11411: PUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_VAR 0 2
11421: PUSH
11422: LD_INT 1
11424: ARRAY
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: CALL_OW 1
11435: ST_TO_ADDR
11436: GO 11700
// begin tmp := arr ;
11438: LD_ADDR_VAR 0 6
11442: PUSH
11443: LD_VAR 0 1
11447: ST_TO_ADDR
// s_arr := [ tmp ] ;
11448: LD_ADDR_VAR 0 7
11452: PUSH
11453: LD_VAR 0 6
11457: PUSH
11458: EMPTY
11459: LIST
11460: ST_TO_ADDR
// for i = 1 to pos - 1 do
11461: LD_ADDR_VAR 0 5
11465: PUSH
11466: DOUBLE
11467: LD_INT 1
11469: DEC
11470: ST_TO_ADDR
11471: LD_VAR 0 2
11475: PUSH
11476: LD_INT 1
11478: MINUS
11479: PUSH
11480: FOR_TO
11481: IFFALSE 11526
// begin tmp := tmp [ pos [ i ] ] ;
11483: LD_ADDR_VAR 0 6
11487: PUSH
11488: LD_VAR 0 6
11492: PUSH
11493: LD_VAR 0 2
11497: PUSH
11498: LD_VAR 0 5
11502: ARRAY
11503: ARRAY
11504: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11505: LD_ADDR_VAR 0 7
11509: PUSH
11510: LD_VAR 0 7
11514: PUSH
11515: LD_VAR 0 6
11519: PUSH
11520: EMPTY
11521: LIST
11522: ADD
11523: ST_TO_ADDR
// end ;
11524: GO 11480
11526: POP
11527: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11528: LD_ADDR_VAR 0 6
11532: PUSH
11533: LD_VAR 0 6
11537: PPUSH
11538: LD_VAR 0 2
11542: PUSH
11543: LD_VAR 0 2
11547: ARRAY
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: CALL_OW 1
11558: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11559: LD_ADDR_VAR 0 7
11563: PUSH
11564: LD_VAR 0 7
11568: PPUSH
11569: LD_VAR 0 7
11573: PPUSH
11574: LD_VAR 0 6
11578: PPUSH
11579: CALL_OW 1
11583: ST_TO_ADDR
// for i = s_arr downto 2 do
11584: LD_ADDR_VAR 0 5
11588: PUSH
11589: DOUBLE
11590: LD_VAR 0 7
11594: INC
11595: ST_TO_ADDR
11596: LD_INT 2
11598: PUSH
11599: FOR_DOWNTO
11600: IFFALSE 11684
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11602: LD_ADDR_VAR 0 6
11606: PUSH
11607: LD_VAR 0 7
11611: PUSH
11612: LD_VAR 0 5
11616: PUSH
11617: LD_INT 1
11619: MINUS
11620: ARRAY
11621: PPUSH
11622: LD_VAR 0 2
11626: PUSH
11627: LD_VAR 0 5
11631: PUSH
11632: LD_INT 1
11634: MINUS
11635: ARRAY
11636: PPUSH
11637: LD_VAR 0 7
11641: PUSH
11642: LD_VAR 0 5
11646: ARRAY
11647: PPUSH
11648: CALL_OW 1
11652: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11653: LD_ADDR_VAR 0 7
11657: PUSH
11658: LD_VAR 0 7
11662: PPUSH
11663: LD_VAR 0 5
11667: PUSH
11668: LD_INT 1
11670: MINUS
11671: PPUSH
11672: LD_VAR 0 6
11676: PPUSH
11677: CALL_OW 1
11681: ST_TO_ADDR
// end ;
11682: GO 11599
11684: POP
11685: POP
// result := s_arr [ 1 ] ;
11686: LD_ADDR_VAR 0 4
11690: PUSH
11691: LD_VAR 0 7
11695: PUSH
11696: LD_INT 1
11698: ARRAY
11699: ST_TO_ADDR
// end ; end ;
11700: LD_VAR 0 4
11704: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11705: LD_INT 0
11707: PPUSH
11708: PPUSH
// if not list then
11709: LD_VAR 0 1
11713: NOT
11714: IFFALSE 11718
// exit ;
11716: GO 11809
// i := list [ pos1 ] ;
11718: LD_ADDR_VAR 0 5
11722: PUSH
11723: LD_VAR 0 1
11727: PUSH
11728: LD_VAR 0 2
11732: ARRAY
11733: ST_TO_ADDR
// if not i then
11734: LD_VAR 0 5
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11809
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11743: LD_ADDR_VAR 0 1
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_VAR 0 1
11762: PUSH
11763: LD_VAR 0 3
11767: ARRAY
11768: PPUSH
11769: CALL_OW 1
11773: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: LD_VAR 0 5
11793: PPUSH
11794: CALL_OW 1
11798: ST_TO_ADDR
// result := list ;
11799: LD_ADDR_VAR 0 4
11803: PUSH
11804: LD_VAR 0 1
11808: ST_TO_ADDR
// end ;
11809: LD_VAR 0 4
11813: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11814: LD_INT 0
11816: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11817: LD_ADDR_VAR 0 5
11821: PUSH
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 250
11831: PPUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 251
11841: PPUSH
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_VAR 0 4
11856: PPUSH
11857: CALL 11867 0 5
11861: ST_TO_ADDR
// end ;
11862: LD_VAR 0 5
11866: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
11867: LD_INT 0
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
// if not list then
11873: LD_VAR 0 3
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 12270
// result := [ ] ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: EMPTY
11888: ST_TO_ADDR
// for i in list do
11889: LD_ADDR_VAR 0 7
11893: PUSH
11894: LD_VAR 0 3
11898: PUSH
11899: FOR_IN
11900: IFFALSE 12102
// begin tmp := GetDistUnitXY ( i , x , y ) ;
11902: LD_ADDR_VAR 0 9
11906: PUSH
11907: LD_VAR 0 7
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: LD_VAR 0 2
11921: PPUSH
11922: CALL_OW 297
11926: ST_TO_ADDR
// if not result then
11927: LD_VAR 0 6
11931: NOT
11932: IFFALSE 11958
// result := [ [ i , tmp ] ] else
11934: LD_ADDR_VAR 0 6
11938: PUSH
11939: LD_VAR 0 7
11943: PUSH
11944: LD_VAR 0 9
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: ST_TO_ADDR
11956: GO 12100
// begin if result [ result ] [ 2 ] < tmp then
11958: LD_VAR 0 6
11962: PUSH
11963: LD_VAR 0 6
11967: ARRAY
11968: PUSH
11969: LD_INT 2
11971: ARRAY
11972: PUSH
11973: LD_VAR 0 9
11977: LESS
11978: IFFALSE 12020
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
11980: LD_ADDR_VAR 0 6
11984: PUSH
11985: LD_VAR 0 6
11989: PPUSH
11990: LD_VAR 0 6
11994: PUSH
11995: LD_INT 1
11997: PLUS
11998: PPUSH
11999: LD_VAR 0 7
12003: PUSH
12004: LD_VAR 0 9
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 2
12017: ST_TO_ADDR
12018: GO 12100
// for j = 1 to result do
12020: LD_ADDR_VAR 0 8
12024: PUSH
12025: DOUBLE
12026: LD_INT 1
12028: DEC
12029: ST_TO_ADDR
12030: LD_VAR 0 6
12034: PUSH
12035: FOR_TO
12036: IFFALSE 12098
// begin if tmp < result [ j ] [ 2 ] then
12038: LD_VAR 0 9
12042: PUSH
12043: LD_VAR 0 6
12047: PUSH
12048: LD_VAR 0 8
12052: ARRAY
12053: PUSH
12054: LD_INT 2
12056: ARRAY
12057: LESS
12058: IFFALSE 12096
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12060: LD_ADDR_VAR 0 6
12064: PUSH
12065: LD_VAR 0 6
12069: PPUSH
12070: LD_VAR 0 8
12074: PPUSH
12075: LD_VAR 0 7
12079: PUSH
12080: LD_VAR 0 9
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 2
12093: ST_TO_ADDR
// break ;
12094: GO 12098
// end ; end ;
12096: GO 12035
12098: POP
12099: POP
// end ; end ;
12100: GO 11899
12102: POP
12103: POP
// if result and not asc then
12104: LD_VAR 0 6
12108: PUSH
12109: LD_VAR 0 4
12113: NOT
12114: AND
12115: IFFALSE 12190
// begin tmp := result ;
12117: LD_ADDR_VAR 0 9
12121: PUSH
12122: LD_VAR 0 6
12126: ST_TO_ADDR
// for i = tmp downto 1 do
12127: LD_ADDR_VAR 0 7
12131: PUSH
12132: DOUBLE
12133: LD_VAR 0 9
12137: INC
12138: ST_TO_ADDR
12139: LD_INT 1
12141: PUSH
12142: FOR_DOWNTO
12143: IFFALSE 12188
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12145: LD_ADDR_VAR 0 6
12149: PUSH
12150: LD_VAR 0 6
12154: PPUSH
12155: LD_VAR 0 9
12159: PUSH
12160: LD_VAR 0 7
12164: MINUS
12165: PUSH
12166: LD_INT 1
12168: PLUS
12169: PPUSH
12170: LD_VAR 0 9
12174: PUSH
12175: LD_VAR 0 7
12179: ARRAY
12180: PPUSH
12181: CALL_OW 1
12185: ST_TO_ADDR
12186: GO 12142
12188: POP
12189: POP
// end ; tmp := [ ] ;
12190: LD_ADDR_VAR 0 9
12194: PUSH
12195: EMPTY
12196: ST_TO_ADDR
// if mode then
12197: LD_VAR 0 5
12201: IFFALSE 12270
// begin for i = 1 to result do
12203: LD_ADDR_VAR 0 7
12207: PUSH
12208: DOUBLE
12209: LD_INT 1
12211: DEC
12212: ST_TO_ADDR
12213: LD_VAR 0 6
12217: PUSH
12218: FOR_TO
12219: IFFALSE 12258
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12221: LD_ADDR_VAR 0 9
12225: PUSH
12226: LD_VAR 0 9
12230: PPUSH
12231: LD_VAR 0 7
12235: PPUSH
12236: LD_VAR 0 6
12240: PUSH
12241: LD_VAR 0 7
12245: ARRAY
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: PPUSH
12251: CALL_OW 1
12255: ST_TO_ADDR
12256: GO 12218
12258: POP
12259: POP
// result := tmp ;
12260: LD_ADDR_VAR 0 6
12264: PUSH
12265: LD_VAR 0 9
12269: ST_TO_ADDR
// end ; end ;
12270: LD_VAR 0 6
12274: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12275: LD_INT 0
12277: PPUSH
12278: PPUSH
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12283: LD_ADDR_VAR 0 5
12287: PUSH
12288: LD_INT 0
12290: PUSH
12291: LD_INT 0
12293: PUSH
12294: LD_INT 0
12296: PUSH
12297: EMPTY
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: ST_TO_ADDR
// if not x or not y then
12305: LD_VAR 0 2
12309: NOT
12310: PUSH
12311: LD_VAR 0 3
12315: NOT
12316: OR
12317: IFFALSE 12321
// exit ;
12319: GO 13971
// if not range then
12321: LD_VAR 0 4
12325: NOT
12326: IFFALSE 12336
// range := 10 ;
12328: LD_ADDR_VAR 0 4
12332: PUSH
12333: LD_INT 10
12335: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12336: LD_ADDR_VAR 0 8
12340: PUSH
12341: LD_INT 81
12343: PUSH
12344: LD_VAR 0 1
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 92
12355: PUSH
12356: LD_VAR 0 2
12360: PUSH
12361: LD_VAR 0 3
12365: PUSH
12366: LD_VAR 0 4
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 21
12382: PUSH
12383: LD_INT 3
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 69
12403: ST_TO_ADDR
// if not tmp then
12404: LD_VAR 0 8
12408: NOT
12409: IFFALSE 12413
// exit ;
12411: GO 13971
// for i in tmp do
12413: LD_ADDR_VAR 0 6
12417: PUSH
12418: LD_VAR 0 8
12422: PUSH
12423: FOR_IN
12424: IFFALSE 13946
// begin points := [ 0 , 0 , 0 ] ;
12426: LD_ADDR_VAR 0 9
12430: PUSH
12431: LD_INT 0
12433: PUSH
12434: LD_INT 0
12436: PUSH
12437: LD_INT 0
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: ST_TO_ADDR
// bpoints := 1 ;
12445: LD_ADDR_VAR 0 10
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12453: LD_VAR 0 6
12457: PPUSH
12458: CALL_OW 247
12462: PUSH
12463: LD_INT 1
12465: DOUBLE
12466: EQUAL
12467: IFTRUE 12471
12469: GO 13049
12471: POP
// begin if GetClass ( i ) = 1 then
12472: LD_VAR 0 6
12476: PPUSH
12477: CALL_OW 257
12481: PUSH
12482: LD_INT 1
12484: EQUAL
12485: IFFALSE 12506
// points := [ 10 , 5 , 3 ] ;
12487: LD_ADDR_VAR 0 9
12491: PUSH
12492: LD_INT 10
12494: PUSH
12495: LD_INT 5
12497: PUSH
12498: LD_INT 3
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12506: LD_VAR 0 6
12510: PPUSH
12511: CALL_OW 257
12515: PUSH
12516: LD_INT 2
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: LD_INT 4
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: IN
12530: IFFALSE 12551
// points := [ 3 , 2 , 1 ] ;
12532: LD_ADDR_VAR 0 9
12536: PUSH
12537: LD_INT 3
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12551: LD_VAR 0 6
12555: PPUSH
12556: CALL_OW 257
12560: PUSH
12561: LD_INT 5
12563: EQUAL
12564: IFFALSE 12585
// points := [ 130 , 5 , 2 ] ;
12566: LD_ADDR_VAR 0 9
12570: PUSH
12571: LD_INT 130
12573: PUSH
12574: LD_INT 5
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12585: LD_VAR 0 6
12589: PPUSH
12590: CALL_OW 257
12594: PUSH
12595: LD_INT 8
12597: EQUAL
12598: IFFALSE 12619
// points := [ 35 , 35 , 30 ] ;
12600: LD_ADDR_VAR 0 9
12604: PUSH
12605: LD_INT 35
12607: PUSH
12608: LD_INT 35
12610: PUSH
12611: LD_INT 30
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12619: LD_VAR 0 6
12623: PPUSH
12624: CALL_OW 257
12628: PUSH
12629: LD_INT 9
12631: EQUAL
12632: IFFALSE 12653
// points := [ 20 , 55 , 40 ] ;
12634: LD_ADDR_VAR 0 9
12638: PUSH
12639: LD_INT 20
12641: PUSH
12642: LD_INT 55
12644: PUSH
12645: LD_INT 40
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12653: LD_VAR 0 6
12657: PPUSH
12658: CALL_OW 257
12662: PUSH
12663: LD_INT 12
12665: PUSH
12666: LD_INT 16
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: IN
12673: IFFALSE 12694
// points := [ 5 , 3 , 2 ] ;
12675: LD_ADDR_VAR 0 9
12679: PUSH
12680: LD_INT 5
12682: PUSH
12683: LD_INT 3
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12694: LD_VAR 0 6
12698: PPUSH
12699: CALL_OW 257
12703: PUSH
12704: LD_INT 17
12706: EQUAL
12707: IFFALSE 12728
// points := [ 100 , 50 , 75 ] ;
12709: LD_ADDR_VAR 0 9
12713: PUSH
12714: LD_INT 100
12716: PUSH
12717: LD_INT 50
12719: PUSH
12720: LD_INT 75
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12728: LD_VAR 0 6
12732: PPUSH
12733: CALL_OW 257
12737: PUSH
12738: LD_INT 15
12740: EQUAL
12741: IFFALSE 12762
// points := [ 10 , 5 , 3 ] ;
12743: LD_ADDR_VAR 0 9
12747: PUSH
12748: LD_INT 10
12750: PUSH
12751: LD_INT 5
12753: PUSH
12754: LD_INT 3
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: LIST
12761: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12762: LD_VAR 0 6
12766: PPUSH
12767: CALL_OW 257
12771: PUSH
12772: LD_INT 14
12774: EQUAL
12775: IFFALSE 12796
// points := [ 10 , 0 , 0 ] ;
12777: LD_ADDR_VAR 0 9
12781: PUSH
12782: LD_INT 10
12784: PUSH
12785: LD_INT 0
12787: PUSH
12788: LD_INT 0
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12796: LD_VAR 0 6
12800: PPUSH
12801: CALL_OW 257
12805: PUSH
12806: LD_INT 11
12808: EQUAL
12809: IFFALSE 12830
// points := [ 30 , 10 , 5 ] ;
12811: LD_ADDR_VAR 0 9
12815: PUSH
12816: LD_INT 30
12818: PUSH
12819: LD_INT 10
12821: PUSH
12822: LD_INT 5
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12830: LD_VAR 0 1
12834: PPUSH
12835: LD_INT 5
12837: PPUSH
12838: CALL_OW 321
12842: PUSH
12843: LD_INT 2
12845: EQUAL
12846: IFFALSE 12863
// bpoints := bpoints * 1.8 ;
12848: LD_ADDR_VAR 0 10
12852: PUSH
12853: LD_VAR 0 10
12857: PUSH
12858: LD_REAL  1.80000000000000E+0000
12861: MUL
12862: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
12863: LD_VAR 0 6
12867: PPUSH
12868: CALL_OW 257
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: LD_INT 2
12878: PUSH
12879: LD_INT 3
12881: PUSH
12882: LD_INT 4
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: IN
12891: PUSH
12892: LD_VAR 0 1
12896: PPUSH
12897: LD_INT 51
12899: PPUSH
12900: CALL_OW 321
12904: PUSH
12905: LD_INT 2
12907: EQUAL
12908: AND
12909: IFFALSE 12926
// bpoints := bpoints * 1.2 ;
12911: LD_ADDR_VAR 0 10
12915: PUSH
12916: LD_VAR 0 10
12920: PUSH
12921: LD_REAL  1.20000000000000E+0000
12924: MUL
12925: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
12926: LD_VAR 0 6
12930: PPUSH
12931: CALL_OW 257
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: LD_INT 7
12941: PUSH
12942: LD_INT 9
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: IN
12950: PUSH
12951: LD_VAR 0 1
12955: PPUSH
12956: LD_INT 52
12958: PPUSH
12959: CALL_OW 321
12963: PUSH
12964: LD_INT 2
12966: EQUAL
12967: AND
12968: IFFALSE 12985
// bpoints := bpoints * 1.5 ;
12970: LD_ADDR_VAR 0 10
12974: PUSH
12975: LD_VAR 0 10
12979: PUSH
12980: LD_REAL  1.50000000000000E+0000
12983: MUL
12984: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
12985: LD_VAR 0 1
12989: PPUSH
12990: LD_INT 66
12992: PPUSH
12993: CALL_OW 321
12997: PUSH
12998: LD_INT 2
13000: EQUAL
13001: IFFALSE 13018
// bpoints := bpoints * 1.1 ;
13003: LD_ADDR_VAR 0 10
13007: PUSH
13008: LD_VAR 0 10
13012: PUSH
13013: LD_REAL  1.10000000000000E+0000
13016: MUL
13017: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13018: LD_ADDR_VAR 0 10
13022: PUSH
13023: LD_VAR 0 10
13027: PUSH
13028: LD_VAR 0 6
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 259
13040: PUSH
13041: LD_REAL  1.15000000000000E+0000
13044: MUL
13045: MUL
13046: ST_TO_ADDR
// end ; unit_vehicle :
13047: GO 13875
13049: LD_INT 2
13051: DOUBLE
13052: EQUAL
13053: IFTRUE 13057
13055: GO 13863
13057: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13058: LD_VAR 0 6
13062: PPUSH
13063: CALL_OW 264
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: LD_INT 42
13073: PUSH
13074: LD_INT 24
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: IN
13082: IFFALSE 13103
// points := [ 25 , 5 , 3 ] ;
13084: LD_ADDR_VAR 0 9
13088: PUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 5
13094: PUSH
13095: LD_INT 3
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13103: LD_VAR 0 6
13107: PPUSH
13108: CALL_OW 264
13112: PUSH
13113: LD_INT 4
13115: PUSH
13116: LD_INT 43
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: IN
13127: IFFALSE 13148
// points := [ 40 , 15 , 5 ] ;
13129: LD_ADDR_VAR 0 9
13133: PUSH
13134: LD_INT 40
13136: PUSH
13137: LD_INT 15
13139: PUSH
13140: LD_INT 5
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13148: LD_VAR 0 6
13152: PPUSH
13153: CALL_OW 264
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: LD_INT 23
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: IN
13168: IFFALSE 13189
// points := [ 7 , 25 , 8 ] ;
13170: LD_ADDR_VAR 0 9
13174: PUSH
13175: LD_INT 7
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 8
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13189: LD_VAR 0 6
13193: PPUSH
13194: CALL_OW 264
13198: PUSH
13199: LD_INT 5
13201: PUSH
13202: LD_INT 27
13204: PUSH
13205: LD_INT 44
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: IN
13213: IFFALSE 13234
// points := [ 14 , 50 , 16 ] ;
13215: LD_ADDR_VAR 0 9
13219: PUSH
13220: LD_INT 14
13222: PUSH
13223: LD_INT 50
13225: PUSH
13226: LD_INT 16
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13234: LD_VAR 0 6
13238: PPUSH
13239: CALL_OW 264
13243: PUSH
13244: LD_INT 6
13246: PUSH
13247: LD_INT 46
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: IN
13254: IFFALSE 13275
// points := [ 32 , 120 , 70 ] ;
13256: LD_ADDR_VAR 0 9
13260: PUSH
13261: LD_INT 32
13263: PUSH
13264: LD_INT 120
13266: PUSH
13267: LD_INT 70
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13275: LD_VAR 0 6
13279: PPUSH
13280: CALL_OW 264
13284: PUSH
13285: LD_INT 7
13287: PUSH
13288: LD_INT 28
13290: PUSH
13291: LD_INT 45
13293: PUSH
13294: LD_INT 92
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: IN
13303: IFFALSE 13324
// points := [ 35 , 20 , 45 ] ;
13305: LD_ADDR_VAR 0 9
13309: PUSH
13310: LD_INT 35
13312: PUSH
13313: LD_INT 20
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13324: LD_VAR 0 6
13328: PPUSH
13329: CALL_OW 264
13333: PUSH
13334: LD_INT 47
13336: PUSH
13337: EMPTY
13338: LIST
13339: IN
13340: IFFALSE 13361
// points := [ 67 , 45 , 75 ] ;
13342: LD_ADDR_VAR 0 9
13346: PUSH
13347: LD_INT 67
13349: PUSH
13350: LD_INT 45
13352: PUSH
13353: LD_INT 75
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13361: LD_VAR 0 6
13365: PPUSH
13366: CALL_OW 264
13370: PUSH
13371: LD_INT 26
13373: PUSH
13374: EMPTY
13375: LIST
13376: IN
13377: IFFALSE 13398
// points := [ 120 , 30 , 80 ] ;
13379: LD_ADDR_VAR 0 9
13383: PUSH
13384: LD_INT 120
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 80
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13398: LD_VAR 0 6
13402: PPUSH
13403: CALL_OW 264
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: EMPTY
13412: LIST
13413: IN
13414: IFFALSE 13435
// points := [ 40 , 1 , 1 ] ;
13416: LD_ADDR_VAR 0 9
13420: PUSH
13421: LD_INT 40
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13435: LD_VAR 0 6
13439: PPUSH
13440: CALL_OW 264
13444: PUSH
13445: LD_INT 29
13447: PUSH
13448: EMPTY
13449: LIST
13450: IN
13451: IFFALSE 13472
// points := [ 70 , 200 , 400 ] ;
13453: LD_ADDR_VAR 0 9
13457: PUSH
13458: LD_INT 70
13460: PUSH
13461: LD_INT 200
13463: PUSH
13464: LD_INT 400
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13472: LD_VAR 0 6
13476: PPUSH
13477: CALL_OW 264
13481: PUSH
13482: LD_INT 14
13484: PUSH
13485: LD_INT 53
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: IN
13492: IFFALSE 13513
// points := [ 40 , 10 , 20 ] ;
13494: LD_ADDR_VAR 0 9
13498: PUSH
13499: LD_INT 40
13501: PUSH
13502: LD_INT 10
13504: PUSH
13505: LD_INT 20
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13513: LD_VAR 0 6
13517: PPUSH
13518: CALL_OW 264
13522: PUSH
13523: LD_INT 9
13525: PUSH
13526: EMPTY
13527: LIST
13528: IN
13529: IFFALSE 13550
// points := [ 5 , 70 , 20 ] ;
13531: LD_ADDR_VAR 0 9
13535: PUSH
13536: LD_INT 5
13538: PUSH
13539: LD_INT 70
13541: PUSH
13542: LD_INT 20
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13550: LD_VAR 0 6
13554: PPUSH
13555: CALL_OW 264
13559: PUSH
13560: LD_INT 10
13562: PUSH
13563: EMPTY
13564: LIST
13565: IN
13566: IFFALSE 13587
// points := [ 35 , 110 , 70 ] ;
13568: LD_ADDR_VAR 0 9
13572: PUSH
13573: LD_INT 35
13575: PUSH
13576: LD_INT 110
13578: PUSH
13579: LD_INT 70
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13587: LD_VAR 0 6
13591: PPUSH
13592: CALL_OW 265
13596: PUSH
13597: LD_INT 25
13599: EQUAL
13600: IFFALSE 13621
// points := [ 80 , 65 , 100 ] ;
13602: LD_ADDR_VAR 0 9
13606: PUSH
13607: LD_INT 80
13609: PUSH
13610: LD_INT 65
13612: PUSH
13613: LD_INT 100
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13621: LD_VAR 0 6
13625: PPUSH
13626: CALL_OW 263
13630: PUSH
13631: LD_INT 1
13633: EQUAL
13634: IFFALSE 13669
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13636: LD_ADDR_VAR 0 10
13640: PUSH
13641: LD_VAR 0 10
13645: PUSH
13646: LD_VAR 0 6
13650: PPUSH
13651: CALL_OW 311
13655: PPUSH
13656: LD_INT 3
13658: PPUSH
13659: CALL_OW 259
13663: PUSH
13664: LD_INT 4
13666: MUL
13667: MUL
13668: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13669: LD_VAR 0 6
13673: PPUSH
13674: CALL_OW 263
13678: PUSH
13679: LD_INT 2
13681: EQUAL
13682: IFFALSE 13733
// begin j := IsControledBy ( i ) ;
13684: LD_ADDR_VAR 0 7
13688: PUSH
13689: LD_VAR 0 6
13693: PPUSH
13694: CALL_OW 312
13698: ST_TO_ADDR
// if j then
13699: LD_VAR 0 7
13703: IFFALSE 13733
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13705: LD_ADDR_VAR 0 10
13709: PUSH
13710: LD_VAR 0 10
13714: PUSH
13715: LD_VAR 0 7
13719: PPUSH
13720: LD_INT 3
13722: PPUSH
13723: CALL_OW 259
13727: PUSH
13728: LD_INT 3
13730: MUL
13731: MUL
13732: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13733: LD_VAR 0 6
13737: PPUSH
13738: CALL_OW 264
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: LD_INT 6
13748: PUSH
13749: LD_INT 46
13751: PUSH
13752: LD_INT 44
13754: PUSH
13755: LD_INT 47
13757: PUSH
13758: LD_INT 45
13760: PUSH
13761: LD_INT 28
13763: PUSH
13764: LD_INT 7
13766: PUSH
13767: LD_INT 27
13769: PUSH
13770: LD_INT 29
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: IN
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: LD_INT 52
13793: PPUSH
13794: CALL_OW 321
13798: PUSH
13799: LD_INT 2
13801: EQUAL
13802: AND
13803: IFFALSE 13820
// bpoints := bpoints * 1.2 ;
13805: LD_ADDR_VAR 0 10
13809: PUSH
13810: LD_VAR 0 10
13814: PUSH
13815: LD_REAL  1.20000000000000E+0000
13818: MUL
13819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13820: LD_VAR 0 6
13824: PPUSH
13825: CALL_OW 264
13829: PUSH
13830: LD_INT 6
13832: PUSH
13833: LD_INT 46
13835: PUSH
13836: LD_INT 47
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: IN
13844: IFFALSE 13861
// bpoints := bpoints * 1.2 ;
13846: LD_ADDR_VAR 0 10
13850: PUSH
13851: LD_VAR 0 10
13855: PUSH
13856: LD_REAL  1.20000000000000E+0000
13859: MUL
13860: ST_TO_ADDR
// end ; unit_building :
13861: GO 13875
13863: LD_INT 3
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13874
13871: POP
// ; end ;
13872: GO 13875
13874: POP
// for j = 1 to 3 do
13875: LD_ADDR_VAR 0 7
13879: PUSH
13880: DOUBLE
13881: LD_INT 1
13883: DEC
13884: ST_TO_ADDR
13885: LD_INT 3
13887: PUSH
13888: FOR_TO
13889: IFFALSE 13942
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
13891: LD_ADDR_VAR 0 5
13895: PUSH
13896: LD_VAR 0 5
13900: PPUSH
13901: LD_VAR 0 7
13905: PPUSH
13906: LD_VAR 0 5
13910: PUSH
13911: LD_VAR 0 7
13915: ARRAY
13916: PUSH
13917: LD_VAR 0 9
13921: PUSH
13922: LD_VAR 0 7
13926: ARRAY
13927: PUSH
13928: LD_VAR 0 10
13932: MUL
13933: PLUS
13934: PPUSH
13935: CALL_OW 1
13939: ST_TO_ADDR
13940: GO 13888
13942: POP
13943: POP
// end ;
13944: GO 12423
13946: POP
13947: POP
// result := Replace ( result , 4 , tmp ) ;
13948: LD_ADDR_VAR 0 5
13952: PUSH
13953: LD_VAR 0 5
13957: PPUSH
13958: LD_INT 4
13960: PPUSH
13961: LD_VAR 0 8
13965: PPUSH
13966: CALL_OW 1
13970: ST_TO_ADDR
// end ;
13971: LD_VAR 0 5
13975: RET
// export function DangerAtRange ( unit , range ) ; begin
13976: LD_INT 0
13978: PPUSH
// if not unit then
13979: LD_VAR 0 1
13983: NOT
13984: IFFALSE 13988
// exit ;
13986: GO 14033
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
13988: LD_ADDR_VAR 0 3
13992: PUSH
13993: LD_VAR 0 1
13997: PPUSH
13998: CALL_OW 255
14002: PPUSH
14003: LD_VAR 0 1
14007: PPUSH
14008: CALL_OW 250
14012: PPUSH
14013: LD_VAR 0 1
14017: PPUSH
14018: CALL_OW 251
14022: PPUSH
14023: LD_VAR 0 2
14027: PPUSH
14028: CALL 12275 0 4
14032: ST_TO_ADDR
// end ;
14033: LD_VAR 0 3
14037: RET
// export function DangerInArea ( side , area ) ; begin
14038: LD_INT 0
14040: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: LD_VAR 0 2
14050: PPUSH
14051: LD_INT 81
14053: PUSH
14054: LD_VAR 0 1
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PPUSH
14063: CALL_OW 70
14067: ST_TO_ADDR
// end ;
14068: LD_VAR 0 3
14072: RET
// export function IsExtension ( b ) ; begin
14073: LD_INT 0
14075: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14076: LD_ADDR_VAR 0 2
14080: PUSH
14081: LD_VAR 0 1
14085: PUSH
14086: LD_INT 23
14088: PUSH
14089: LD_INT 20
14091: PUSH
14092: LD_INT 22
14094: PUSH
14095: LD_INT 17
14097: PUSH
14098: LD_INT 24
14100: PUSH
14101: LD_INT 21
14103: PUSH
14104: LD_INT 19
14106: PUSH
14107: LD_INT 16
14109: PUSH
14110: LD_INT 25
14112: PUSH
14113: LD_INT 18
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: IN
14128: ST_TO_ADDR
// end ;
14129: LD_VAR 0 2
14133: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14134: LD_INT 0
14136: PPUSH
14137: PPUSH
14138: PPUSH
// result := [ ] ;
14139: LD_ADDR_VAR 0 4
14143: PUSH
14144: EMPTY
14145: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14146: LD_ADDR_VAR 0 5
14150: PUSH
14151: LD_VAR 0 2
14155: PPUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 3
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 70
14170: ST_TO_ADDR
// if not tmp then
14171: LD_VAR 0 5
14175: NOT
14176: IFFALSE 14180
// exit ;
14178: GO 14244
// if checkLink then
14180: LD_VAR 0 3
14184: IFFALSE 14234
// begin for i in tmp do
14186: LD_ADDR_VAR 0 6
14190: PUSH
14191: LD_VAR 0 5
14195: PUSH
14196: FOR_IN
14197: IFFALSE 14232
// if GetBase ( i ) <> base then
14199: LD_VAR 0 6
14203: PPUSH
14204: CALL_OW 274
14208: PUSH
14209: LD_VAR 0 1
14213: NONEQUAL
14214: IFFALSE 14230
// ComLinkToBase ( base , i ) ;
14216: LD_VAR 0 1
14220: PPUSH
14221: LD_VAR 0 6
14225: PPUSH
14226: CALL_OW 169
14230: GO 14196
14232: POP
14233: POP
// end ; result := tmp ;
14234: LD_ADDR_VAR 0 4
14238: PUSH
14239: LD_VAR 0 5
14243: ST_TO_ADDR
// end ;
14244: LD_VAR 0 4
14248: RET
// export function ComComplete ( units , b ) ; var i ; begin
14249: LD_INT 0
14251: PPUSH
14252: PPUSH
// if not units then
14253: LD_VAR 0 1
14257: NOT
14258: IFFALSE 14262
// exit ;
14260: GO 14352
// for i in units do
14262: LD_ADDR_VAR 0 4
14266: PUSH
14267: LD_VAR 0 1
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14350
// if BuildingStatus ( b ) = bs_build then
14275: LD_VAR 0 2
14279: PPUSH
14280: CALL_OW 461
14284: PUSH
14285: LD_INT 1
14287: EQUAL
14288: IFFALSE 14348
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14290: LD_VAR 0 4
14294: PPUSH
14295: LD_STRING h
14297: PUSH
14298: LD_VAR 0 2
14302: PPUSH
14303: CALL_OW 250
14307: PUSH
14308: LD_VAR 0 2
14312: PPUSH
14313: CALL_OW 251
14317: PUSH
14318: LD_VAR 0 2
14322: PUSH
14323: LD_INT 0
14325: PUSH
14326: LD_INT 0
14328: PUSH
14329: LD_INT 0
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: PPUSH
14344: CALL_OW 446
14348: GO 14272
14350: POP
14351: POP
// end ;
14352: LD_VAR 0 3
14356: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14357: LD_INT 0
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14365: LD_VAR 0 1
14369: NOT
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 263
14380: PUSH
14381: LD_INT 2
14383: NONEQUAL
14384: OR
14385: IFFALSE 14389
// exit ;
14387: GO 14705
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14389: LD_ADDR_VAR 0 6
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_VAR 0 1
14401: PPUSH
14402: CALL_OW 255
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 30
14416: PUSH
14417: LD_INT 36
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 34
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PPUSH
14443: CALL_OW 69
14447: ST_TO_ADDR
// if not tmp then
14448: LD_VAR 0 6
14452: NOT
14453: IFFALSE 14457
// exit ;
14455: GO 14705
// result := [ ] ;
14457: LD_ADDR_VAR 0 2
14461: PUSH
14462: EMPTY
14463: ST_TO_ADDR
// for i in tmp do
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_VAR 0 6
14473: PUSH
14474: FOR_IN
14475: IFFALSE 14546
// begin t := UnitsInside ( i ) ;
14477: LD_ADDR_VAR 0 4
14481: PUSH
14482: LD_VAR 0 3
14486: PPUSH
14487: CALL_OW 313
14491: ST_TO_ADDR
// if t then
14492: LD_VAR 0 4
14496: IFFALSE 14544
// for j in t do
14498: LD_ADDR_VAR 0 7
14502: PUSH
14503: LD_VAR 0 4
14507: PUSH
14508: FOR_IN
14509: IFFALSE 14542
// result := Replace ( result , result + 1 , j ) ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_VAR 0 2
14520: PPUSH
14521: LD_VAR 0 2
14525: PUSH
14526: LD_INT 1
14528: PLUS
14529: PPUSH
14530: LD_VAR 0 7
14534: PPUSH
14535: CALL_OW 1
14539: ST_TO_ADDR
14540: GO 14508
14542: POP
14543: POP
// end ;
14544: GO 14474
14546: POP
14547: POP
// if not result then
14548: LD_VAR 0 2
14552: NOT
14553: IFFALSE 14557
// exit ;
14555: GO 14705
// mech := result [ 1 ] ;
14557: LD_ADDR_VAR 0 5
14561: PUSH
14562: LD_VAR 0 2
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: ST_TO_ADDR
// if result > 1 then
14571: LD_VAR 0 2
14575: PUSH
14576: LD_INT 1
14578: GREATER
14579: IFFALSE 14691
// begin for i = 2 to result do
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: DOUBLE
14587: LD_INT 2
14589: DEC
14590: ST_TO_ADDR
14591: LD_VAR 0 2
14595: PUSH
14596: FOR_TO
14597: IFFALSE 14689
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14599: LD_ADDR_VAR 0 4
14603: PUSH
14604: LD_VAR 0 2
14608: PUSH
14609: LD_VAR 0 3
14613: ARRAY
14614: PPUSH
14615: LD_INT 3
14617: PPUSH
14618: CALL_OW 259
14622: PUSH
14623: LD_VAR 0 2
14627: PUSH
14628: LD_VAR 0 3
14632: ARRAY
14633: PPUSH
14634: CALL_OW 432
14638: MINUS
14639: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14640: LD_VAR 0 4
14644: PUSH
14645: LD_VAR 0 5
14649: PPUSH
14650: LD_INT 3
14652: PPUSH
14653: CALL_OW 259
14657: PUSH
14658: LD_VAR 0 5
14662: PPUSH
14663: CALL_OW 432
14667: MINUS
14668: GREATEREQUAL
14669: IFFALSE 14687
// mech := result [ i ] ;
14671: LD_ADDR_VAR 0 5
14675: PUSH
14676: LD_VAR 0 2
14680: PUSH
14681: LD_VAR 0 3
14685: ARRAY
14686: ST_TO_ADDR
// end ;
14687: GO 14596
14689: POP
14690: POP
// end ; ComLinkTo ( vehicle , mech ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 5
14700: PPUSH
14701: CALL_OW 135
// end ;
14705: LD_VAR 0 2
14709: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14710: LD_INT 0
14712: PPUSH
14713: PPUSH
14714: PPUSH
14715: PPUSH
14716: PPUSH
14717: PPUSH
14718: PPUSH
14719: PPUSH
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
// result := [ ] ;
14725: LD_ADDR_VAR 0 7
14729: PUSH
14730: EMPTY
14731: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 266
14741: PUSH
14742: LD_INT 0
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: IN
14752: NOT
14753: IFFALSE 14757
// exit ;
14755: GO 16391
// if name then
14757: LD_VAR 0 3
14761: IFFALSE 14777
// SetBName ( base_dep , name ) ;
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_VAR 0 3
14772: PPUSH
14773: CALL_OW 500
// base := GetBase ( base_dep ) ;
14777: LD_ADDR_VAR 0 15
14781: PUSH
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 274
14791: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14792: LD_ADDR_VAR 0 16
14796: PUSH
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL_OW 255
14806: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14807: LD_ADDR_VAR 0 17
14811: PUSH
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 248
14821: ST_TO_ADDR
// if sources then
14822: LD_VAR 0 5
14826: IFFALSE 14873
// for i = 1 to 3 do
14828: LD_ADDR_VAR 0 8
14832: PUSH
14833: DOUBLE
14834: LD_INT 1
14836: DEC
14837: ST_TO_ADDR
14838: LD_INT 3
14840: PUSH
14841: FOR_TO
14842: IFFALSE 14871
// AddResourceType ( base , i , sources [ i ] ) ;
14844: LD_VAR 0 15
14848: PPUSH
14849: LD_VAR 0 8
14853: PPUSH
14854: LD_VAR 0 5
14858: PUSH
14859: LD_VAR 0 8
14863: ARRAY
14864: PPUSH
14865: CALL_OW 276
14869: GO 14841
14871: POP
14872: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
14873: LD_ADDR_VAR 0 18
14877: PUSH
14878: LD_VAR 0 15
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL 14134 0 3
14895: ST_TO_ADDR
// InitHc ;
14896: CALL_OW 19
// InitUc ;
14900: CALL_OW 18
// uc_side := side ;
14904: LD_ADDR_OWVAR 20
14908: PUSH
14909: LD_VAR 0 16
14913: ST_TO_ADDR
// uc_nation := nation ;
14914: LD_ADDR_OWVAR 21
14918: PUSH
14919: LD_VAR 0 17
14923: ST_TO_ADDR
// if buildings then
14924: LD_VAR 0 18
14928: IFFALSE 16250
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
14930: LD_ADDR_VAR 0 19
14934: PUSH
14935: LD_VAR 0 18
14939: PPUSH
14940: LD_INT 2
14942: PUSH
14943: LD_INT 30
14945: PUSH
14946: LD_INT 29
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 30
14955: PUSH
14956: LD_INT 30
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 72
14972: ST_TO_ADDR
// if tmp then
14973: LD_VAR 0 19
14977: IFFALSE 15025
// for i in tmp do
14979: LD_ADDR_VAR 0 8
14983: PUSH
14984: LD_VAR 0 19
14988: PUSH
14989: FOR_IN
14990: IFFALSE 15023
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
14992: LD_VAR 0 8
14996: PPUSH
14997: CALL_OW 250
15001: PPUSH
15002: LD_VAR 0 8
15006: PPUSH
15007: CALL_OW 251
15011: PPUSH
15012: LD_VAR 0 16
15016: PPUSH
15017: CALL_OW 441
15021: GO 14989
15023: POP
15024: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15025: LD_VAR 0 18
15029: PPUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 32
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 33
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 72
15062: IFFALSE 15150
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15064: LD_ADDR_VAR 0 8
15068: PUSH
15069: LD_VAR 0 18
15073: PPUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 30
15079: PUSH
15080: LD_INT 32
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 30
15089: PUSH
15090: LD_INT 33
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 72
15106: PUSH
15107: FOR_IN
15108: IFFALSE 15148
// begin if not GetBWeapon ( i ) then
15110: LD_VAR 0 8
15114: PPUSH
15115: CALL_OW 269
15119: NOT
15120: IFFALSE 15146
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15122: LD_VAR 0 8
15126: PPUSH
15127: LD_VAR 0 8
15131: PPUSH
15132: LD_VAR 0 2
15136: PPUSH
15137: CALL 16396 0 2
15141: PPUSH
15142: CALL_OW 431
// end ;
15146: GO 15107
15148: POP
15149: POP
// end ; for i = 1 to personel do
15150: LD_ADDR_VAR 0 8
15154: PUSH
15155: DOUBLE
15156: LD_INT 1
15158: DEC
15159: ST_TO_ADDR
15160: LD_VAR 0 6
15164: PUSH
15165: FOR_TO
15166: IFFALSE 16230
// begin if i > 4 then
15168: LD_VAR 0 8
15172: PUSH
15173: LD_INT 4
15175: GREATER
15176: IFFALSE 15180
// break ;
15178: GO 16230
// case i of 1 :
15180: LD_VAR 0 8
15184: PUSH
15185: LD_INT 1
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15273
15193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15194: LD_ADDR_VAR 0 12
15198: PUSH
15199: LD_VAR 0 18
15203: PPUSH
15204: LD_INT 22
15206: PUSH
15207: LD_VAR 0 16
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 58
15218: PUSH
15219: EMPTY
15220: LIST
15221: PUSH
15222: LD_INT 2
15224: PUSH
15225: LD_INT 30
15227: PUSH
15228: LD_INT 32
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 30
15237: PUSH
15238: LD_INT 4
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 30
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 72
15270: ST_TO_ADDR
15271: GO 15495
15273: LD_INT 2
15275: DOUBLE
15276: EQUAL
15277: IFTRUE 15281
15279: GO 15343
15281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15282: LD_ADDR_VAR 0 12
15286: PUSH
15287: LD_VAR 0 18
15291: PPUSH
15292: LD_INT 22
15294: PUSH
15295: LD_VAR 0 16
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 2
15306: PUSH
15307: LD_INT 30
15309: PUSH
15310: LD_INT 0
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PPUSH
15336: CALL_OW 72
15340: ST_TO_ADDR
15341: GO 15495
15343: LD_INT 3
15345: DOUBLE
15346: EQUAL
15347: IFTRUE 15351
15349: GO 15413
15351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15352: LD_ADDR_VAR 0 12
15356: PUSH
15357: LD_VAR 0 18
15361: PPUSH
15362: LD_INT 22
15364: PUSH
15365: LD_VAR 0 16
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 2
15376: PUSH
15377: LD_INT 30
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 30
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 72
15410: ST_TO_ADDR
15411: GO 15495
15413: LD_INT 4
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15494
15421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15422: LD_ADDR_VAR 0 12
15426: PUSH
15427: LD_VAR 0 18
15431: PPUSH
15432: LD_INT 22
15434: PUSH
15435: LD_VAR 0 16
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 30
15449: PUSH
15450: LD_INT 6
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 7
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 8
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 72
15491: ST_TO_ADDR
15492: GO 15495
15494: POP
// if i = 1 then
15495: LD_VAR 0 8
15499: PUSH
15500: LD_INT 1
15502: EQUAL
15503: IFFALSE 15614
// begin tmp := [ ] ;
15505: LD_ADDR_VAR 0 19
15509: PUSH
15510: EMPTY
15511: ST_TO_ADDR
// for j in f do
15512: LD_ADDR_VAR 0 9
15516: PUSH
15517: LD_VAR 0 12
15521: PUSH
15522: FOR_IN
15523: IFFALSE 15596
// if GetBType ( j ) = b_bunker then
15525: LD_VAR 0 9
15529: PPUSH
15530: CALL_OW 266
15534: PUSH
15535: LD_INT 32
15537: EQUAL
15538: IFFALSE 15565
// tmp := Insert ( tmp , 1 , j ) else
15540: LD_ADDR_VAR 0 19
15544: PUSH
15545: LD_VAR 0 19
15549: PPUSH
15550: LD_INT 1
15552: PPUSH
15553: LD_VAR 0 9
15557: PPUSH
15558: CALL_OW 2
15562: ST_TO_ADDR
15563: GO 15594
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15565: LD_ADDR_VAR 0 19
15569: PUSH
15570: LD_VAR 0 19
15574: PPUSH
15575: LD_VAR 0 19
15579: PUSH
15580: LD_INT 1
15582: PLUS
15583: PPUSH
15584: LD_VAR 0 9
15588: PPUSH
15589: CALL_OW 2
15593: ST_TO_ADDR
15594: GO 15522
15596: POP
15597: POP
// if tmp then
15598: LD_VAR 0 19
15602: IFFALSE 15614
// f := tmp ;
15604: LD_ADDR_VAR 0 12
15608: PUSH
15609: LD_VAR 0 19
15613: ST_TO_ADDR
// end ; x := personel [ i ] ;
15614: LD_ADDR_VAR 0 13
15618: PUSH
15619: LD_VAR 0 6
15623: PUSH
15624: LD_VAR 0 8
15628: ARRAY
15629: ST_TO_ADDR
// if x = - 1 then
15630: LD_VAR 0 13
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: EQUAL
15639: IFFALSE 15848
// begin for j in f do
15641: LD_ADDR_VAR 0 9
15645: PUSH
15646: LD_VAR 0 12
15650: PUSH
15651: FOR_IN
15652: IFFALSE 15844
// repeat InitHc ;
15654: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15658: LD_VAR 0 9
15662: PPUSH
15663: CALL_OW 266
15667: PUSH
15668: LD_INT 5
15670: EQUAL
15671: IFFALSE 15741
// begin if UnitsInside ( j ) < 3 then
15673: LD_VAR 0 9
15677: PPUSH
15678: CALL_OW 313
15682: PUSH
15683: LD_INT 3
15685: LESS
15686: IFFALSE 15722
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15688: LD_INT 0
15690: PPUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 8
15696: PUSH
15697: LD_INT 9
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: LIST
15704: PUSH
15705: LD_VAR 0 17
15709: ARRAY
15710: PPUSH
15711: LD_VAR 0 4
15715: PPUSH
15716: CALL_OW 380
15720: GO 15739
// PrepareHuman ( false , i , skill ) ;
15722: LD_INT 0
15724: PPUSH
15725: LD_VAR 0 8
15729: PPUSH
15730: LD_VAR 0 4
15734: PPUSH
15735: CALL_OW 380
// end else
15739: GO 15758
// PrepareHuman ( false , i , skill ) ;
15741: LD_INT 0
15743: PPUSH
15744: LD_VAR 0 8
15748: PPUSH
15749: LD_VAR 0 4
15753: PPUSH
15754: CALL_OW 380
// un := CreateHuman ;
15758: LD_ADDR_VAR 0 14
15762: PUSH
15763: CALL_OW 44
15767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15768: LD_ADDR_VAR 0 7
15772: PUSH
15773: LD_VAR 0 7
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: LD_VAR 0 14
15785: PPUSH
15786: CALL_OW 2
15790: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15791: LD_VAR 0 14
15795: PPUSH
15796: LD_VAR 0 9
15800: PPUSH
15801: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15805: LD_VAR 0 9
15809: PPUSH
15810: CALL_OW 313
15814: PUSH
15815: LD_INT 6
15817: EQUAL
15818: PUSH
15819: LD_VAR 0 9
15823: PPUSH
15824: CALL_OW 266
15828: PUSH
15829: LD_INT 32
15831: PUSH
15832: LD_INT 31
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: IN
15839: OR
15840: IFFALSE 15654
15842: GO 15651
15844: POP
15845: POP
// end else
15846: GO 16228
// for j = 1 to x do
15848: LD_ADDR_VAR 0 9
15852: PUSH
15853: DOUBLE
15854: LD_INT 1
15856: DEC
15857: ST_TO_ADDR
15858: LD_VAR 0 13
15862: PUSH
15863: FOR_TO
15864: IFFALSE 16226
// begin InitHc ;
15866: CALL_OW 19
// if not f then
15870: LD_VAR 0 12
15874: NOT
15875: IFFALSE 15964
// begin PrepareHuman ( false , i , skill ) ;
15877: LD_INT 0
15879: PPUSH
15880: LD_VAR 0 8
15884: PPUSH
15885: LD_VAR 0 4
15889: PPUSH
15890: CALL_OW 380
// un := CreateHuman ;
15894: LD_ADDR_VAR 0 14
15898: PUSH
15899: CALL_OW 44
15903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15904: LD_ADDR_VAR 0 7
15908: PUSH
15909: LD_VAR 0 7
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: LD_VAR 0 14
15921: PPUSH
15922: CALL_OW 2
15926: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15927: LD_VAR 0 14
15931: PPUSH
15932: LD_VAR 0 1
15936: PPUSH
15937: CALL_OW 250
15941: PPUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 251
15951: PPUSH
15952: LD_INT 10
15954: PPUSH
15955: LD_INT 0
15957: PPUSH
15958: CALL_OW 50
// continue ;
15962: GO 15863
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
15964: LD_VAR 0 12
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: PPUSH
15973: CALL_OW 313
15977: PUSH
15978: LD_VAR 0 12
15982: PUSH
15983: LD_INT 1
15985: ARRAY
15986: PPUSH
15987: CALL_OW 266
15991: PUSH
15992: LD_INT 32
15994: PUSH
15995: LD_INT 31
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: IN
16002: AND
16003: PUSH
16004: LD_VAR 0 12
16008: PUSH
16009: LD_INT 1
16011: ARRAY
16012: PPUSH
16013: CALL_OW 313
16017: PUSH
16018: LD_INT 6
16020: EQUAL
16021: OR
16022: IFFALSE 16042
// f := Delete ( f , 1 ) ;
16024: LD_ADDR_VAR 0 12
16028: PUSH
16029: LD_VAR 0 12
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 3
16041: ST_TO_ADDR
// if not f then
16042: LD_VAR 0 12
16046: NOT
16047: IFFALSE 16065
// begin x := x + 2 ;
16049: LD_ADDR_VAR 0 13
16053: PUSH
16054: LD_VAR 0 13
16058: PUSH
16059: LD_INT 2
16061: PLUS
16062: ST_TO_ADDR
// continue ;
16063: GO 15863
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16065: LD_VAR 0 12
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PPUSH
16074: CALL_OW 266
16078: PUSH
16079: LD_INT 5
16081: EQUAL
16082: IFFALSE 16156
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16084: LD_VAR 0 12
16088: PUSH
16089: LD_INT 1
16091: ARRAY
16092: PPUSH
16093: CALL_OW 313
16097: PUSH
16098: LD_INT 3
16100: LESS
16101: IFFALSE 16137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16103: LD_INT 0
16105: PPUSH
16106: LD_INT 5
16108: PUSH
16109: LD_INT 8
16111: PUSH
16112: LD_INT 9
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: LD_VAR 0 17
16124: ARRAY
16125: PPUSH
16126: LD_VAR 0 4
16130: PPUSH
16131: CALL_OW 380
16135: GO 16154
// PrepareHuman ( false , i , skill ) ;
16137: LD_INT 0
16139: PPUSH
16140: LD_VAR 0 8
16144: PPUSH
16145: LD_VAR 0 4
16149: PPUSH
16150: CALL_OW 380
// end else
16154: GO 16173
// PrepareHuman ( false , i , skill ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_VAR 0 8
16163: PPUSH
16164: LD_VAR 0 4
16168: PPUSH
16169: CALL_OW 380
// un := CreateHuman ;
16173: LD_ADDR_VAR 0 14
16177: PUSH
16178: CALL_OW 44
16182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16183: LD_ADDR_VAR 0 7
16187: PUSH
16188: LD_VAR 0 7
16192: PPUSH
16193: LD_INT 1
16195: PPUSH
16196: LD_VAR 0 14
16200: PPUSH
16201: CALL_OW 2
16205: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16206: LD_VAR 0 14
16210: PPUSH
16211: LD_VAR 0 12
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 52
// end ;
16224: GO 15863
16226: POP
16227: POP
// end ;
16228: GO 15165
16230: POP
16231: POP
// result := result ^ buildings ;
16232: LD_ADDR_VAR 0 7
16236: PUSH
16237: LD_VAR 0 7
16241: PUSH
16242: LD_VAR 0 18
16246: ADD
16247: ST_TO_ADDR
// end else
16248: GO 16391
// begin for i = 1 to personel do
16250: LD_ADDR_VAR 0 8
16254: PUSH
16255: DOUBLE
16256: LD_INT 1
16258: DEC
16259: ST_TO_ADDR
16260: LD_VAR 0 6
16264: PUSH
16265: FOR_TO
16266: IFFALSE 16389
// begin if i > 4 then
16268: LD_VAR 0 8
16272: PUSH
16273: LD_INT 4
16275: GREATER
16276: IFFALSE 16280
// break ;
16278: GO 16389
// x := personel [ i ] ;
16280: LD_ADDR_VAR 0 13
16284: PUSH
16285: LD_VAR 0 6
16289: PUSH
16290: LD_VAR 0 8
16294: ARRAY
16295: ST_TO_ADDR
// if x = - 1 then
16296: LD_VAR 0 13
16300: PUSH
16301: LD_INT 1
16303: NEG
16304: EQUAL
16305: IFFALSE 16309
// continue ;
16307: GO 16265
// PrepareHuman ( false , i , skill ) ;
16309: LD_INT 0
16311: PPUSH
16312: LD_VAR 0 8
16316: PPUSH
16317: LD_VAR 0 4
16321: PPUSH
16322: CALL_OW 380
// un := CreateHuman ;
16326: LD_ADDR_VAR 0 14
16330: PUSH
16331: CALL_OW 44
16335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16336: LD_VAR 0 14
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 250
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 251
16360: PPUSH
16361: LD_INT 10
16363: PPUSH
16364: LD_INT 0
16366: PPUSH
16367: CALL_OW 50
// result := result ^ un ;
16371: LD_ADDR_VAR 0 7
16375: PUSH
16376: LD_VAR 0 7
16380: PUSH
16381: LD_VAR 0 14
16385: ADD
16386: ST_TO_ADDR
// end ;
16387: GO 16265
16389: POP
16390: POP
// end ; end ;
16391: LD_VAR 0 7
16395: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16396: LD_INT 0
16398: PPUSH
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
// result := false ;
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16422: LD_VAR 0 1
16426: NOT
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 266
16437: PUSH
16438: LD_INT 32
16440: PUSH
16441: LD_INT 33
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: IN
16448: NOT
16449: OR
16450: IFFALSE 16454
// exit ;
16452: GO 17563
// nat := GetNation ( tower ) ;
16454: LD_ADDR_VAR 0 12
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 248
16468: ST_TO_ADDR
// side := GetSide ( tower ) ;
16469: LD_ADDR_VAR 0 16
16473: PUSH
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL_OW 255
16483: ST_TO_ADDR
// x := GetX ( tower ) ;
16484: LD_ADDR_VAR 0 10
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 250
16498: ST_TO_ADDR
// y := GetY ( tower ) ;
16499: LD_ADDR_VAR 0 11
16503: PUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 251
16513: ST_TO_ADDR
// if not x or not y then
16514: LD_VAR 0 10
16518: NOT
16519: PUSH
16520: LD_VAR 0 11
16524: NOT
16525: OR
16526: IFFALSE 16530
// exit ;
16528: GO 17563
// weapon := 0 ;
16530: LD_ADDR_VAR 0 18
16534: PUSH
16535: LD_INT 0
16537: ST_TO_ADDR
// fac_list := [ ] ;
16538: LD_ADDR_VAR 0 17
16542: PUSH
16543: EMPTY
16544: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16545: LD_ADDR_VAR 0 6
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 274
16559: PPUSH
16560: LD_VAR 0 2
16564: PPUSH
16565: LD_INT 0
16567: PPUSH
16568: CALL 14134 0 3
16572: PPUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PPUSH
16583: CALL_OW 72
16587: ST_TO_ADDR
// if not factories then
16588: LD_VAR 0 6
16592: NOT
16593: IFFALSE 16597
// exit ;
16595: GO 17563
// for i in factories do
16597: LD_ADDR_VAR 0 8
16601: PUSH
16602: LD_VAR 0 6
16606: PUSH
16607: FOR_IN
16608: IFFALSE 16633
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16610: LD_ADDR_VAR 0 17
16614: PUSH
16615: LD_VAR 0 17
16619: PUSH
16620: LD_VAR 0 8
16624: PPUSH
16625: CALL_OW 478
16629: UNION
16630: ST_TO_ADDR
16631: GO 16607
16633: POP
16634: POP
// if not fac_list then
16635: LD_VAR 0 17
16639: NOT
16640: IFFALSE 16644
// exit ;
16642: GO 17563
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16644: LD_ADDR_VAR 0 5
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: LD_INT 5
16654: PUSH
16655: LD_INT 9
16657: PUSH
16658: LD_INT 10
16660: PUSH
16661: LD_INT 6
16663: PUSH
16664: LD_INT 7
16666: PUSH
16667: LD_INT 11
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 27
16681: PUSH
16682: LD_INT 28
16684: PUSH
16685: LD_INT 26
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 43
16699: PUSH
16700: LD_INT 44
16702: PUSH
16703: LD_INT 46
16705: PUSH
16706: LD_INT 45
16708: PUSH
16709: LD_INT 47
16711: PUSH
16712: LD_INT 49
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: PUSH
16728: LD_VAR 0 12
16732: ARRAY
16733: ST_TO_ADDR
// list := list isect fac_list ;
16734: LD_ADDR_VAR 0 5
16738: PUSH
16739: LD_VAR 0 5
16743: PUSH
16744: LD_VAR 0 17
16748: ISECT
16749: ST_TO_ADDR
// if not list then
16750: LD_VAR 0 5
16754: NOT
16755: IFFALSE 16759
// exit ;
16757: GO 17563
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16759: LD_VAR 0 12
16763: PUSH
16764: LD_INT 3
16766: EQUAL
16767: PUSH
16768: LD_INT 49
16770: PUSH
16771: LD_VAR 0 5
16775: IN
16776: AND
16777: PUSH
16778: LD_INT 31
16780: PPUSH
16781: LD_VAR 0 16
16785: PPUSH
16786: CALL_OW 321
16790: PUSH
16791: LD_INT 2
16793: EQUAL
16794: AND
16795: IFFALSE 16855
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16797: LD_INT 22
16799: PUSH
16800: LD_VAR 0 16
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 35
16811: PUSH
16812: LD_INT 49
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 91
16821: PUSH
16822: LD_VAR 0 1
16826: PUSH
16827: LD_INT 10
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: LIST
16839: PPUSH
16840: CALL_OW 69
16844: NOT
16845: IFFALSE 16855
// weapon := ru_time_lapser ;
16847: LD_ADDR_VAR 0 18
16851: PUSH
16852: LD_INT 49
16854: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16855: LD_VAR 0 12
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: IN
16870: PUSH
16871: LD_INT 11
16873: PUSH
16874: LD_VAR 0 5
16878: IN
16879: PUSH
16880: LD_INT 30
16882: PUSH
16883: LD_VAR 0 5
16887: IN
16888: OR
16889: AND
16890: PUSH
16891: LD_INT 6
16893: PPUSH
16894: LD_VAR 0 16
16898: PPUSH
16899: CALL_OW 321
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: AND
16908: IFFALSE 17073
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
16910: LD_INT 22
16912: PUSH
16913: LD_VAR 0 16
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 2
16924: PUSH
16925: LD_INT 35
16927: PUSH
16928: LD_INT 11
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 35
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 91
16952: PUSH
16953: LD_VAR 0 1
16957: PUSH
16958: LD_INT 18
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: PPUSH
16971: CALL_OW 69
16975: NOT
16976: PUSH
16977: LD_INT 22
16979: PUSH
16980: LD_VAR 0 16
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 30
16994: PUSH
16995: LD_INT 32
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 30
17004: PUSH
17005: LD_INT 33
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 91
17019: PUSH
17020: LD_VAR 0 1
17024: PUSH
17025: LD_INT 12
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: PPUSH
17041: CALL_OW 69
17045: PUSH
17046: LD_INT 2
17048: GREATER
17049: AND
17050: IFFALSE 17073
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17052: LD_ADDR_VAR 0 18
17056: PUSH
17057: LD_INT 11
17059: PUSH
17060: LD_INT 30
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_VAR 0 12
17071: ARRAY
17072: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17073: LD_VAR 0 18
17077: NOT
17078: PUSH
17079: LD_INT 40
17081: PPUSH
17082: LD_VAR 0 16
17086: PPUSH
17087: CALL_OW 321
17091: PUSH
17092: LD_INT 2
17094: EQUAL
17095: AND
17096: PUSH
17097: LD_INT 7
17099: PUSH
17100: LD_VAR 0 5
17104: IN
17105: PUSH
17106: LD_INT 28
17108: PUSH
17109: LD_VAR 0 5
17113: IN
17114: OR
17115: PUSH
17116: LD_INT 45
17118: PUSH
17119: LD_VAR 0 5
17123: IN
17124: OR
17125: AND
17126: IFFALSE 17380
// begin hex := GetHexInfo ( x , y ) ;
17128: LD_ADDR_VAR 0 4
17132: PUSH
17133: LD_VAR 0 10
17137: PPUSH
17138: LD_VAR 0 11
17142: PPUSH
17143: CALL_OW 546
17147: ST_TO_ADDR
// if hex [ 1 ] then
17148: LD_VAR 0 4
17152: PUSH
17153: LD_INT 1
17155: ARRAY
17156: IFFALSE 17160
// exit ;
17158: GO 17563
// height := hex [ 2 ] ;
17160: LD_ADDR_VAR 0 15
17164: PUSH
17165: LD_VAR 0 4
17169: PUSH
17170: LD_INT 2
17172: ARRAY
17173: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17174: LD_ADDR_VAR 0 14
17178: PUSH
17179: LD_INT 0
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 3
17187: PUSH
17188: LD_INT 5
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: ST_TO_ADDR
// for i in tmp do
17197: LD_ADDR_VAR 0 8
17201: PUSH
17202: LD_VAR 0 14
17206: PUSH
17207: FOR_IN
17208: IFFALSE 17378
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17210: LD_ADDR_VAR 0 9
17214: PUSH
17215: LD_VAR 0 10
17219: PPUSH
17220: LD_VAR 0 8
17224: PPUSH
17225: LD_INT 5
17227: PPUSH
17228: CALL_OW 272
17232: PUSH
17233: LD_VAR 0 11
17237: PPUSH
17238: LD_VAR 0 8
17242: PPUSH
17243: LD_INT 5
17245: PPUSH
17246: CALL_OW 273
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17255: LD_VAR 0 9
17259: PUSH
17260: LD_INT 1
17262: ARRAY
17263: PPUSH
17264: LD_VAR 0 9
17268: PUSH
17269: LD_INT 2
17271: ARRAY
17272: PPUSH
17273: CALL_OW 488
17277: IFFALSE 17376
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17279: LD_ADDR_VAR 0 4
17283: PUSH
17284: LD_VAR 0 9
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PPUSH
17293: LD_VAR 0 9
17297: PUSH
17298: LD_INT 2
17300: ARRAY
17301: PPUSH
17302: CALL_OW 546
17306: ST_TO_ADDR
// if hex [ 1 ] then
17307: LD_VAR 0 4
17311: PUSH
17312: LD_INT 1
17314: ARRAY
17315: IFFALSE 17319
// continue ;
17317: GO 17207
// h := hex [ 2 ] ;
17319: LD_ADDR_VAR 0 13
17323: PUSH
17324: LD_VAR 0 4
17328: PUSH
17329: LD_INT 2
17331: ARRAY
17332: ST_TO_ADDR
// if h + 7 < height then
17333: LD_VAR 0 13
17337: PUSH
17338: LD_INT 7
17340: PLUS
17341: PUSH
17342: LD_VAR 0 15
17346: LESS
17347: IFFALSE 17376
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17349: LD_ADDR_VAR 0 18
17353: PUSH
17354: LD_INT 7
17356: PUSH
17357: LD_INT 28
17359: PUSH
17360: LD_INT 45
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: LD_VAR 0 12
17372: ARRAY
17373: ST_TO_ADDR
// break ;
17374: GO 17378
// end ; end ; end ;
17376: GO 17207
17378: POP
17379: POP
// end ; if not weapon then
17380: LD_VAR 0 18
17384: NOT
17385: IFFALSE 17445
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17387: LD_ADDR_VAR 0 5
17391: PUSH
17392: LD_VAR 0 5
17396: PUSH
17397: LD_INT 11
17399: PUSH
17400: LD_INT 30
17402: PUSH
17403: LD_INT 49
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: DIFF
17411: ST_TO_ADDR
// if not list then
17412: LD_VAR 0 5
17416: NOT
17417: IFFALSE 17421
// exit ;
17419: GO 17563
// weapon := list [ rand ( 1 , list ) ] ;
17421: LD_ADDR_VAR 0 18
17425: PUSH
17426: LD_VAR 0 5
17430: PUSH
17431: LD_INT 1
17433: PPUSH
17434: LD_VAR 0 5
17438: PPUSH
17439: CALL_OW 12
17443: ARRAY
17444: ST_TO_ADDR
// end ; if weapon then
17445: LD_VAR 0 18
17449: IFFALSE 17563
// begin tmp := CostOfWeapon ( weapon ) ;
17451: LD_ADDR_VAR 0 14
17455: PUSH
17456: LD_VAR 0 18
17460: PPUSH
17461: CALL_OW 451
17465: ST_TO_ADDR
// j := GetBase ( tower ) ;
17466: LD_ADDR_VAR 0 9
17470: PUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 274
17480: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17481: LD_VAR 0 9
17485: PPUSH
17486: LD_INT 1
17488: PPUSH
17489: CALL_OW 275
17493: PUSH
17494: LD_VAR 0 14
17498: PUSH
17499: LD_INT 1
17501: ARRAY
17502: GREATEREQUAL
17503: PUSH
17504: LD_VAR 0 9
17508: PPUSH
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 275
17516: PUSH
17517: LD_VAR 0 14
17521: PUSH
17522: LD_INT 2
17524: ARRAY
17525: GREATEREQUAL
17526: AND
17527: PUSH
17528: LD_VAR 0 9
17532: PPUSH
17533: LD_INT 3
17535: PPUSH
17536: CALL_OW 275
17540: PUSH
17541: LD_VAR 0 14
17545: PUSH
17546: LD_INT 3
17548: ARRAY
17549: GREATEREQUAL
17550: AND
17551: IFFALSE 17563
// result := weapon ;
17553: LD_ADDR_VAR 0 3
17557: PUSH
17558: LD_VAR 0 18
17562: ST_TO_ADDR
// end ; end ;
17563: LD_VAR 0 3
17567: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17568: LD_INT 0
17570: PPUSH
17571: PPUSH
// result := true ;
17572: LD_ADDR_VAR 0 3
17576: PUSH
17577: LD_INT 1
17579: ST_TO_ADDR
// if array1 = array2 then
17580: LD_VAR 0 1
17584: PUSH
17585: LD_VAR 0 2
17589: EQUAL
17590: IFFALSE 17650
// begin for i = 1 to array1 do
17592: LD_ADDR_VAR 0 4
17596: PUSH
17597: DOUBLE
17598: LD_INT 1
17600: DEC
17601: ST_TO_ADDR
17602: LD_VAR 0 1
17606: PUSH
17607: FOR_TO
17608: IFFALSE 17646
// if array1 [ i ] <> array2 [ i ] then
17610: LD_VAR 0 1
17614: PUSH
17615: LD_VAR 0 4
17619: ARRAY
17620: PUSH
17621: LD_VAR 0 2
17625: PUSH
17626: LD_VAR 0 4
17630: ARRAY
17631: NONEQUAL
17632: IFFALSE 17644
// begin result := false ;
17634: LD_ADDR_VAR 0 3
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// break ;
17642: GO 17646
// end ;
17644: GO 17607
17646: POP
17647: POP
// end else
17648: GO 17658
// result := false ;
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: LD_INT 0
17657: ST_TO_ADDR
// end ;
17658: LD_VAR 0 3
17662: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17663: LD_INT 0
17665: PPUSH
17666: PPUSH
// if not array1 or not array2 then
17667: LD_VAR 0 1
17671: NOT
17672: PUSH
17673: LD_VAR 0 2
17677: NOT
17678: OR
17679: IFFALSE 17683
// exit ;
17681: GO 17747
// result := true ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// for i = 1 to array1 do
17691: LD_ADDR_VAR 0 4
17695: PUSH
17696: DOUBLE
17697: LD_INT 1
17699: DEC
17700: ST_TO_ADDR
17701: LD_VAR 0 1
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17745
// if array1 [ i ] <> array2 [ i ] then
17709: LD_VAR 0 1
17713: PUSH
17714: LD_VAR 0 4
17718: ARRAY
17719: PUSH
17720: LD_VAR 0 2
17724: PUSH
17725: LD_VAR 0 4
17729: ARRAY
17730: NONEQUAL
17731: IFFALSE 17743
// begin result := false ;
17733: LD_ADDR_VAR 0 3
17737: PUSH
17738: LD_INT 0
17740: ST_TO_ADDR
// break ;
17741: GO 17745
// end ;
17743: GO 17706
17745: POP
17746: POP
// end ;
17747: LD_VAR 0 3
17751: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17752: LD_INT 0
17754: PPUSH
17755: PPUSH
17756: PPUSH
// pom := GetBase ( fac ) ;
17757: LD_ADDR_VAR 0 5
17761: PUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: CALL_OW 274
17771: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17772: LD_ADDR_VAR 0 4
17776: PUSH
17777: LD_VAR 0 2
17781: PUSH
17782: LD_INT 1
17784: ARRAY
17785: PPUSH
17786: LD_VAR 0 2
17790: PUSH
17791: LD_INT 2
17793: ARRAY
17794: PPUSH
17795: LD_VAR 0 2
17799: PUSH
17800: LD_INT 3
17802: ARRAY
17803: PPUSH
17804: LD_VAR 0 2
17808: PUSH
17809: LD_INT 4
17811: ARRAY
17812: PPUSH
17813: CALL_OW 449
17817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17818: LD_ADDR_VAR 0 3
17822: PUSH
17823: LD_VAR 0 5
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 275
17835: PUSH
17836: LD_VAR 0 4
17840: PUSH
17841: LD_INT 1
17843: ARRAY
17844: GREATEREQUAL
17845: PUSH
17846: LD_VAR 0 5
17850: PPUSH
17851: LD_INT 2
17853: PPUSH
17854: CALL_OW 275
17858: PUSH
17859: LD_VAR 0 4
17863: PUSH
17864: LD_INT 2
17866: ARRAY
17867: GREATEREQUAL
17868: AND
17869: PUSH
17870: LD_VAR 0 5
17874: PPUSH
17875: LD_INT 3
17877: PPUSH
17878: CALL_OW 275
17882: PUSH
17883: LD_VAR 0 4
17887: PUSH
17888: LD_INT 3
17890: ARRAY
17891: GREATEREQUAL
17892: AND
17893: ST_TO_ADDR
// end ;
17894: LD_VAR 0 3
17898: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
17899: LD_INT 0
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
// pom := GetBase ( building ) ;
17905: LD_ADDR_VAR 0 3
17909: PUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 274
17919: ST_TO_ADDR
// if not pom then
17920: LD_VAR 0 3
17924: NOT
17925: IFFALSE 17929
// exit ;
17927: GO 18099
// btype := GetBType ( building ) ;
17929: LD_ADDR_VAR 0 5
17933: PUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 266
17943: ST_TO_ADDR
// if btype = b_armoury then
17944: LD_VAR 0 5
17948: PUSH
17949: LD_INT 4
17951: EQUAL
17952: IFFALSE 17962
// btype := b_barracks ;
17954: LD_ADDR_VAR 0 5
17958: PUSH
17959: LD_INT 5
17961: ST_TO_ADDR
// if btype = b_depot then
17962: LD_VAR 0 5
17966: PUSH
17967: LD_INT 0
17969: EQUAL
17970: IFFALSE 17980
// btype := b_warehouse ;
17972: LD_ADDR_VAR 0 5
17976: PUSH
17977: LD_INT 1
17979: ST_TO_ADDR
// if btype = b_workshop then
17980: LD_VAR 0 5
17984: PUSH
17985: LD_INT 2
17987: EQUAL
17988: IFFALSE 17998
// btype := b_factory ;
17990: LD_ADDR_VAR 0 5
17994: PUSH
17995: LD_INT 3
17997: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17998: LD_ADDR_VAR 0 4
18002: PUSH
18003: LD_VAR 0 5
18007: PPUSH
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 248
18017: PPUSH
18018: CALL_OW 450
18022: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18023: LD_ADDR_VAR 0 2
18027: PUSH
18028: LD_VAR 0 3
18032: PPUSH
18033: LD_INT 1
18035: PPUSH
18036: CALL_OW 275
18040: PUSH
18041: LD_VAR 0 4
18045: PUSH
18046: LD_INT 1
18048: ARRAY
18049: GREATEREQUAL
18050: PUSH
18051: LD_VAR 0 3
18055: PPUSH
18056: LD_INT 2
18058: PPUSH
18059: CALL_OW 275
18063: PUSH
18064: LD_VAR 0 4
18068: PUSH
18069: LD_INT 2
18071: ARRAY
18072: GREATEREQUAL
18073: AND
18074: PUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: LD_INT 3
18082: PPUSH
18083: CALL_OW 275
18087: PUSH
18088: LD_VAR 0 4
18092: PUSH
18093: LD_INT 3
18095: ARRAY
18096: GREATEREQUAL
18097: AND
18098: ST_TO_ADDR
// end ;
18099: LD_VAR 0 2
18103: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
18108: PPUSH
// pom := GetBase ( building ) ;
18109: LD_ADDR_VAR 0 4
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 274
18123: ST_TO_ADDR
// if not pom then
18124: LD_VAR 0 4
18128: NOT
18129: IFFALSE 18133
// exit ;
18131: GO 18234
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18133: LD_ADDR_VAR 0 5
18137: PUSH
18138: LD_VAR 0 2
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 248
18152: PPUSH
18153: CALL_OW 450
18157: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_VAR 0 4
18167: PPUSH
18168: LD_INT 1
18170: PPUSH
18171: CALL_OW 275
18175: PUSH
18176: LD_VAR 0 5
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: GREATEREQUAL
18185: PUSH
18186: LD_VAR 0 4
18190: PPUSH
18191: LD_INT 2
18193: PPUSH
18194: CALL_OW 275
18198: PUSH
18199: LD_VAR 0 5
18203: PUSH
18204: LD_INT 2
18206: ARRAY
18207: GREATEREQUAL
18208: AND
18209: PUSH
18210: LD_VAR 0 4
18214: PPUSH
18215: LD_INT 3
18217: PPUSH
18218: CALL_OW 275
18222: PUSH
18223: LD_VAR 0 5
18227: PUSH
18228: LD_INT 3
18230: ARRAY
18231: GREATEREQUAL
18232: AND
18233: ST_TO_ADDR
// end ;
18234: LD_VAR 0 3
18238: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
18243: PPUSH
18244: PPUSH
18245: PPUSH
18246: PPUSH
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
// result := false ;
18252: LD_ADDR_VAR 0 8
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18260: LD_VAR 0 5
18264: NOT
18265: PUSH
18266: LD_VAR 0 1
18270: NOT
18271: OR
18272: PUSH
18273: LD_VAR 0 2
18277: NOT
18278: OR
18279: PUSH
18280: LD_VAR 0 3
18284: NOT
18285: OR
18286: IFFALSE 18290
// exit ;
18288: GO 19104
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18290: LD_ADDR_VAR 0 14
18294: PUSH
18295: LD_VAR 0 1
18299: PPUSH
18300: LD_VAR 0 2
18304: PPUSH
18305: LD_VAR 0 3
18309: PPUSH
18310: LD_VAR 0 4
18314: PPUSH
18315: LD_VAR 0 5
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PPUSH
18324: CALL_OW 248
18328: PPUSH
18329: LD_INT 0
18331: PPUSH
18332: CALL 20357 0 6
18336: ST_TO_ADDR
// if not hexes then
18337: LD_VAR 0 14
18341: NOT
18342: IFFALSE 18346
// exit ;
18344: GO 19104
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18346: LD_ADDR_VAR 0 17
18350: PUSH
18351: LD_VAR 0 5
18355: PPUSH
18356: LD_INT 22
18358: PUSH
18359: LD_VAR 0 13
18363: PPUSH
18364: CALL_OW 255
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: LD_INT 30
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 30
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 72
18409: ST_TO_ADDR
// for i = 1 to hexes do
18410: LD_ADDR_VAR 0 9
18414: PUSH
18415: DOUBLE
18416: LD_INT 1
18418: DEC
18419: ST_TO_ADDR
18420: LD_VAR 0 14
18424: PUSH
18425: FOR_TO
18426: IFFALSE 19102
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18428: LD_ADDR_VAR 0 13
18432: PUSH
18433: LD_VAR 0 14
18437: PUSH
18438: LD_VAR 0 9
18442: ARRAY
18443: PUSH
18444: LD_INT 1
18446: ARRAY
18447: PPUSH
18448: LD_VAR 0 14
18452: PUSH
18453: LD_VAR 0 9
18457: ARRAY
18458: PUSH
18459: LD_INT 2
18461: ARRAY
18462: PPUSH
18463: CALL_OW 428
18467: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18468: LD_VAR 0 14
18472: PUSH
18473: LD_VAR 0 9
18477: ARRAY
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: LD_VAR 0 14
18487: PUSH
18488: LD_VAR 0 9
18492: ARRAY
18493: PUSH
18494: LD_INT 2
18496: ARRAY
18497: PPUSH
18498: CALL_OW 351
18502: PUSH
18503: LD_VAR 0 14
18507: PUSH
18508: LD_VAR 0 9
18512: ARRAY
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: LD_VAR 0 14
18522: PUSH
18523: LD_VAR 0 9
18527: ARRAY
18528: PUSH
18529: LD_INT 2
18531: ARRAY
18532: PPUSH
18533: CALL_OW 488
18537: NOT
18538: OR
18539: PUSH
18540: LD_VAR 0 13
18544: PPUSH
18545: CALL_OW 247
18549: PUSH
18550: LD_INT 3
18552: EQUAL
18553: OR
18554: IFFALSE 18560
// exit ;
18556: POP
18557: POP
18558: GO 19104
// if not tmp then
18560: LD_VAR 0 13
18564: NOT
18565: IFFALSE 18569
// continue ;
18567: GO 18425
// result := true ;
18569: LD_ADDR_VAR 0 8
18573: PUSH
18574: LD_INT 1
18576: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18577: LD_VAR 0 6
18581: PUSH
18582: LD_VAR 0 13
18586: PPUSH
18587: CALL_OW 247
18591: PUSH
18592: LD_INT 2
18594: EQUAL
18595: AND
18596: PUSH
18597: LD_VAR 0 13
18601: PPUSH
18602: CALL_OW 263
18606: PUSH
18607: LD_INT 1
18609: EQUAL
18610: AND
18611: IFFALSE 18775
// begin if IsDrivenBy ( tmp ) then
18613: LD_VAR 0 13
18617: PPUSH
18618: CALL_OW 311
18622: IFFALSE 18626
// continue ;
18624: GO 18425
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18626: LD_VAR 0 6
18630: PPUSH
18631: LD_INT 3
18633: PUSH
18634: LD_INT 60
18636: PUSH
18637: EMPTY
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 3
18646: PUSH
18647: LD_INT 55
18649: PUSH
18650: EMPTY
18651: LIST
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PPUSH
18661: CALL_OW 72
18665: IFFALSE 18773
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18667: LD_ADDR_VAR 0 18
18671: PUSH
18672: LD_VAR 0 6
18676: PPUSH
18677: LD_INT 3
18679: PUSH
18680: LD_INT 60
18682: PUSH
18683: EMPTY
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 3
18692: PUSH
18693: LD_INT 55
18695: PUSH
18696: EMPTY
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 72
18711: PUSH
18712: LD_INT 1
18714: ARRAY
18715: ST_TO_ADDR
// if IsInUnit ( driver ) then
18716: LD_VAR 0 18
18720: PPUSH
18721: CALL_OW 310
18725: IFFALSE 18736
// ComExit ( driver ) ;
18727: LD_VAR 0 18
18731: PPUSH
18732: CALL 44136 0 1
// AddComEnterUnit ( driver , tmp ) ;
18736: LD_VAR 0 18
18740: PPUSH
18741: LD_VAR 0 13
18745: PPUSH
18746: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18750: LD_VAR 0 18
18754: PPUSH
18755: LD_VAR 0 7
18759: PPUSH
18760: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18764: LD_VAR 0 18
18768: PPUSH
18769: CALL_OW 181
// end ; continue ;
18773: GO 18425
// end ; if not cleaners or not tmp in cleaners then
18775: LD_VAR 0 6
18779: NOT
18780: PUSH
18781: LD_VAR 0 13
18785: PUSH
18786: LD_VAR 0 6
18790: IN
18791: NOT
18792: OR
18793: IFFALSE 19100
// begin if dep then
18795: LD_VAR 0 17
18799: IFFALSE 18935
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18801: LD_ADDR_VAR 0 16
18805: PUSH
18806: LD_VAR 0 17
18810: PUSH
18811: LD_INT 1
18813: ARRAY
18814: PPUSH
18815: CALL_OW 250
18819: PPUSH
18820: LD_VAR 0 17
18824: PUSH
18825: LD_INT 1
18827: ARRAY
18828: PPUSH
18829: CALL_OW 254
18833: PPUSH
18834: LD_INT 5
18836: PPUSH
18837: CALL_OW 272
18841: PUSH
18842: LD_VAR 0 17
18846: PUSH
18847: LD_INT 1
18849: ARRAY
18850: PPUSH
18851: CALL_OW 251
18855: PPUSH
18856: LD_VAR 0 17
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PPUSH
18865: CALL_OW 254
18869: PPUSH
18870: LD_INT 5
18872: PPUSH
18873: CALL_OW 273
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
18882: LD_VAR 0 16
18886: PUSH
18887: LD_INT 1
18889: ARRAY
18890: PPUSH
18891: LD_VAR 0 16
18895: PUSH
18896: LD_INT 2
18898: ARRAY
18899: PPUSH
18900: CALL_OW 488
18904: IFFALSE 18935
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
18906: LD_VAR 0 13
18910: PPUSH
18911: LD_VAR 0 16
18915: PUSH
18916: LD_INT 1
18918: ARRAY
18919: PPUSH
18920: LD_VAR 0 16
18924: PUSH
18925: LD_INT 2
18927: ARRAY
18928: PPUSH
18929: CALL_OW 111
// continue ;
18933: GO 18425
// end ; end ; r := GetDir ( tmp ) ;
18935: LD_ADDR_VAR 0 15
18939: PUSH
18940: LD_VAR 0 13
18944: PPUSH
18945: CALL_OW 254
18949: ST_TO_ADDR
// if r = 5 then
18950: LD_VAR 0 15
18954: PUSH
18955: LD_INT 5
18957: EQUAL
18958: IFFALSE 18968
// r := 0 ;
18960: LD_ADDR_VAR 0 15
18964: PUSH
18965: LD_INT 0
18967: ST_TO_ADDR
// for j = r to 5 do
18968: LD_ADDR_VAR 0 10
18972: PUSH
18973: DOUBLE
18974: LD_VAR 0 15
18978: DEC
18979: ST_TO_ADDR
18980: LD_INT 5
18982: PUSH
18983: FOR_TO
18984: IFFALSE 19098
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
18986: LD_ADDR_VAR 0 11
18990: PUSH
18991: LD_VAR 0 13
18995: PPUSH
18996: CALL_OW 250
19000: PPUSH
19001: LD_VAR 0 10
19005: PPUSH
19006: LD_INT 2
19008: PPUSH
19009: CALL_OW 272
19013: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19014: LD_ADDR_VAR 0 12
19018: PUSH
19019: LD_VAR 0 13
19023: PPUSH
19024: CALL_OW 251
19028: PPUSH
19029: LD_VAR 0 10
19033: PPUSH
19034: LD_INT 2
19036: PPUSH
19037: CALL_OW 273
19041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19042: LD_VAR 0 11
19046: PPUSH
19047: LD_VAR 0 12
19051: PPUSH
19052: CALL_OW 488
19056: PUSH
19057: LD_VAR 0 11
19061: PPUSH
19062: LD_VAR 0 12
19066: PPUSH
19067: CALL_OW 428
19071: NOT
19072: AND
19073: IFFALSE 19096
// begin ComMoveXY ( tmp , _x , _y ) ;
19075: LD_VAR 0 13
19079: PPUSH
19080: LD_VAR 0 11
19084: PPUSH
19085: LD_VAR 0 12
19089: PPUSH
19090: CALL_OW 111
// break ;
19094: GO 19098
// end ; end ;
19096: GO 18983
19098: POP
19099: POP
// end ; end ;
19100: GO 18425
19102: POP
19103: POP
// end ;
19104: LD_VAR 0 8
19108: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19109: LD_INT 0
19111: PPUSH
// result := true ;
19112: LD_ADDR_VAR 0 3
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19120: LD_VAR 0 2
19124: PUSH
19125: LD_INT 24
19127: DOUBLE
19128: EQUAL
19129: IFTRUE 19139
19131: LD_INT 33
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19164
19139: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19140: LD_ADDR_VAR 0 3
19144: PUSH
19145: LD_INT 32
19147: PPUSH
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL_OW 321
19157: PUSH
19158: LD_INT 2
19160: EQUAL
19161: ST_TO_ADDR
19162: GO 19480
19164: LD_INT 20
19166: DOUBLE
19167: EQUAL
19168: IFTRUE 19172
19170: GO 19197
19172: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19173: LD_ADDR_VAR 0 3
19177: PUSH
19178: LD_INT 6
19180: PPUSH
19181: LD_VAR 0 1
19185: PPUSH
19186: CALL_OW 321
19190: PUSH
19191: LD_INT 2
19193: EQUAL
19194: ST_TO_ADDR
19195: GO 19480
19197: LD_INT 22
19199: DOUBLE
19200: EQUAL
19201: IFTRUE 19211
19203: LD_INT 36
19205: DOUBLE
19206: EQUAL
19207: IFTRUE 19211
19209: GO 19236
19211: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19212: LD_ADDR_VAR 0 3
19216: PUSH
19217: LD_INT 15
19219: PPUSH
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL_OW 321
19229: PUSH
19230: LD_INT 2
19232: EQUAL
19233: ST_TO_ADDR
19234: GO 19480
19236: LD_INT 30
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19269
19244: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_INT 20
19252: PPUSH
19253: LD_VAR 0 1
19257: PPUSH
19258: CALL_OW 321
19262: PUSH
19263: LD_INT 2
19265: EQUAL
19266: ST_TO_ADDR
19267: GO 19480
19269: LD_INT 28
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19283
19275: LD_INT 21
19277: DOUBLE
19278: EQUAL
19279: IFTRUE 19283
19281: GO 19308
19283: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19284: LD_ADDR_VAR 0 3
19288: PUSH
19289: LD_INT 21
19291: PPUSH
19292: LD_VAR 0 1
19296: PPUSH
19297: CALL_OW 321
19301: PUSH
19302: LD_INT 2
19304: EQUAL
19305: ST_TO_ADDR
19306: GO 19480
19308: LD_INT 16
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19341
19316: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19317: LD_ADDR_VAR 0 3
19321: PUSH
19322: LD_INT 84
19324: PPUSH
19325: LD_VAR 0 1
19329: PPUSH
19330: CALL_OW 321
19334: PUSH
19335: LD_INT 2
19337: EQUAL
19338: ST_TO_ADDR
19339: GO 19480
19341: LD_INT 19
19343: DOUBLE
19344: EQUAL
19345: IFTRUE 19355
19347: LD_INT 23
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19380
19355: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: LD_INT 83
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 321
19373: PUSH
19374: LD_INT 2
19376: EQUAL
19377: ST_TO_ADDR
19378: GO 19480
19380: LD_INT 17
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19413
19388: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_INT 39
19396: PPUSH
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 321
19406: PUSH
19407: LD_INT 2
19409: EQUAL
19410: ST_TO_ADDR
19411: GO 19480
19413: LD_INT 18
19415: DOUBLE
19416: EQUAL
19417: IFTRUE 19421
19419: GO 19446
19421: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19422: LD_ADDR_VAR 0 3
19426: PUSH
19427: LD_INT 40
19429: PPUSH
19430: LD_VAR 0 1
19434: PPUSH
19435: CALL_OW 321
19439: PUSH
19440: LD_INT 2
19442: EQUAL
19443: ST_TO_ADDR
19444: GO 19480
19446: LD_INT 27
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 19479
19454: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19455: LD_ADDR_VAR 0 3
19459: PUSH
19460: LD_INT 35
19462: PPUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 321
19472: PUSH
19473: LD_INT 2
19475: EQUAL
19476: ST_TO_ADDR
19477: GO 19480
19479: POP
// end ;
19480: LD_VAR 0 3
19484: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19485: LD_INT 0
19487: PPUSH
19488: PPUSH
19489: PPUSH
19490: PPUSH
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
// result := false ;
19498: LD_ADDR_VAR 0 6
19502: PUSH
19503: LD_INT 0
19505: ST_TO_ADDR
// if btype = b_depot then
19506: LD_VAR 0 2
19510: PUSH
19511: LD_INT 0
19513: EQUAL
19514: IFFALSE 19526
// begin result := true ;
19516: LD_ADDR_VAR 0 6
19520: PUSH
19521: LD_INT 1
19523: ST_TO_ADDR
// exit ;
19524: GO 20352
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19526: LD_VAR 0 1
19530: NOT
19531: PUSH
19532: LD_VAR 0 1
19536: PPUSH
19537: CALL_OW 266
19541: PUSH
19542: LD_INT 0
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: IN
19552: NOT
19553: OR
19554: PUSH
19555: LD_VAR 0 2
19559: NOT
19560: OR
19561: PUSH
19562: LD_VAR 0 5
19566: PUSH
19567: LD_INT 0
19569: PUSH
19570: LD_INT 1
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: LD_INT 3
19578: PUSH
19579: LD_INT 4
19581: PUSH
19582: LD_INT 5
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: IN
19593: NOT
19594: OR
19595: PUSH
19596: LD_VAR 0 3
19600: PPUSH
19601: LD_VAR 0 4
19605: PPUSH
19606: CALL_OW 488
19610: NOT
19611: OR
19612: IFFALSE 19616
// exit ;
19614: GO 20352
// side := GetSide ( depot ) ;
19616: LD_ADDR_VAR 0 9
19620: PUSH
19621: LD_VAR 0 1
19625: PPUSH
19626: CALL_OW 255
19630: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
19631: LD_VAR 0 9
19635: PPUSH
19636: LD_VAR 0 2
19640: PPUSH
19641: CALL 19109 0 2
19645: NOT
19646: IFFALSE 19650
// exit ;
19648: GO 20352
// pom := GetBase ( depot ) ;
19650: LD_ADDR_VAR 0 10
19654: PUSH
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 274
19664: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
19665: LD_ADDR_VAR 0 11
19669: PUSH
19670: LD_VAR 0 2
19674: PPUSH
19675: LD_VAR 0 1
19679: PPUSH
19680: CALL_OW 248
19684: PPUSH
19685: CALL_OW 450
19689: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
19690: LD_VAR 0 10
19694: PPUSH
19695: LD_INT 1
19697: PPUSH
19698: CALL_OW 275
19702: PUSH
19703: LD_VAR 0 11
19707: PUSH
19708: LD_INT 1
19710: ARRAY
19711: GREATEREQUAL
19712: PUSH
19713: LD_VAR 0 10
19717: PPUSH
19718: LD_INT 2
19720: PPUSH
19721: CALL_OW 275
19725: PUSH
19726: LD_VAR 0 11
19730: PUSH
19731: LD_INT 2
19733: ARRAY
19734: GREATEREQUAL
19735: AND
19736: PUSH
19737: LD_VAR 0 10
19741: PPUSH
19742: LD_INT 3
19744: PPUSH
19745: CALL_OW 275
19749: PUSH
19750: LD_VAR 0 11
19754: PUSH
19755: LD_INT 3
19757: ARRAY
19758: GREATEREQUAL
19759: AND
19760: NOT
19761: IFFALSE 19765
// exit ;
19763: GO 20352
// if GetBType ( depot ) = b_depot then
19765: LD_VAR 0 1
19769: PPUSH
19770: CALL_OW 266
19774: PUSH
19775: LD_INT 0
19777: EQUAL
19778: IFFALSE 19790
// dist := 28 else
19780: LD_ADDR_VAR 0 14
19784: PUSH
19785: LD_INT 28
19787: ST_TO_ADDR
19788: GO 19798
// dist := 36 ;
19790: LD_ADDR_VAR 0 14
19794: PUSH
19795: LD_INT 36
19797: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19798: LD_VAR 0 1
19802: PPUSH
19803: LD_VAR 0 3
19807: PPUSH
19808: LD_VAR 0 4
19812: PPUSH
19813: CALL_OW 297
19817: PUSH
19818: LD_VAR 0 14
19822: GREATER
19823: IFFALSE 19827
// exit ;
19825: GO 20352
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
19827: LD_ADDR_VAR 0 12
19831: PUSH
19832: LD_VAR 0 2
19836: PPUSH
19837: LD_VAR 0 3
19841: PPUSH
19842: LD_VAR 0 4
19846: PPUSH
19847: LD_VAR 0 5
19851: PPUSH
19852: LD_VAR 0 1
19856: PPUSH
19857: CALL_OW 248
19861: PPUSH
19862: LD_INT 0
19864: PPUSH
19865: CALL 20357 0 6
19869: ST_TO_ADDR
// if not hexes then
19870: LD_VAR 0 12
19874: NOT
19875: IFFALSE 19879
// exit ;
19877: GO 20352
// hex := GetHexInfo ( x , y ) ;
19879: LD_ADDR_VAR 0 15
19883: PUSH
19884: LD_VAR 0 3
19888: PPUSH
19889: LD_VAR 0 4
19893: PPUSH
19894: CALL_OW 546
19898: ST_TO_ADDR
// if hex [ 1 ] then
19899: LD_VAR 0 15
19903: PUSH
19904: LD_INT 1
19906: ARRAY
19907: IFFALSE 19911
// exit ;
19909: GO 20352
// height := hex [ 2 ] ;
19911: LD_ADDR_VAR 0 13
19915: PUSH
19916: LD_VAR 0 15
19920: PUSH
19921: LD_INT 2
19923: ARRAY
19924: ST_TO_ADDR
// for i = 1 to hexes do
19925: LD_ADDR_VAR 0 7
19929: PUSH
19930: DOUBLE
19931: LD_INT 1
19933: DEC
19934: ST_TO_ADDR
19935: LD_VAR 0 12
19939: PUSH
19940: FOR_TO
19941: IFFALSE 20271
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
19943: LD_VAR 0 12
19947: PUSH
19948: LD_VAR 0 7
19952: ARRAY
19953: PUSH
19954: LD_INT 1
19956: ARRAY
19957: PPUSH
19958: LD_VAR 0 12
19962: PUSH
19963: LD_VAR 0 7
19967: ARRAY
19968: PUSH
19969: LD_INT 2
19971: ARRAY
19972: PPUSH
19973: CALL_OW 488
19977: NOT
19978: PUSH
19979: LD_VAR 0 12
19983: PUSH
19984: LD_VAR 0 7
19988: ARRAY
19989: PUSH
19990: LD_INT 1
19992: ARRAY
19993: PPUSH
19994: LD_VAR 0 12
19998: PUSH
19999: LD_VAR 0 7
20003: ARRAY
20004: PUSH
20005: LD_INT 2
20007: ARRAY
20008: PPUSH
20009: CALL_OW 428
20013: PUSH
20014: LD_INT 0
20016: GREATER
20017: OR
20018: PUSH
20019: LD_VAR 0 12
20023: PUSH
20024: LD_VAR 0 7
20028: ARRAY
20029: PUSH
20030: LD_INT 1
20032: ARRAY
20033: PPUSH
20034: LD_VAR 0 12
20038: PUSH
20039: LD_VAR 0 7
20043: ARRAY
20044: PUSH
20045: LD_INT 2
20047: ARRAY
20048: PPUSH
20049: CALL_OW 351
20053: OR
20054: IFFALSE 20060
// exit ;
20056: POP
20057: POP
20058: GO 20352
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20060: LD_ADDR_VAR 0 8
20064: PUSH
20065: LD_VAR 0 12
20069: PUSH
20070: LD_VAR 0 7
20074: ARRAY
20075: PUSH
20076: LD_INT 1
20078: ARRAY
20079: PPUSH
20080: LD_VAR 0 12
20084: PUSH
20085: LD_VAR 0 7
20089: ARRAY
20090: PUSH
20091: LD_INT 2
20093: ARRAY
20094: PPUSH
20095: CALL_OW 546
20099: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20100: LD_VAR 0 8
20104: PUSH
20105: LD_INT 1
20107: ARRAY
20108: PUSH
20109: LD_VAR 0 8
20113: PUSH
20114: LD_INT 2
20116: ARRAY
20117: PUSH
20118: LD_VAR 0 13
20122: PUSH
20123: LD_INT 2
20125: PLUS
20126: GREATER
20127: OR
20128: PUSH
20129: LD_VAR 0 8
20133: PUSH
20134: LD_INT 2
20136: ARRAY
20137: PUSH
20138: LD_VAR 0 13
20142: PUSH
20143: LD_INT 2
20145: MINUS
20146: LESS
20147: OR
20148: PUSH
20149: LD_VAR 0 8
20153: PUSH
20154: LD_INT 3
20156: ARRAY
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: LD_INT 8
20163: PUSH
20164: LD_INT 9
20166: PUSH
20167: LD_INT 10
20169: PUSH
20170: LD_INT 11
20172: PUSH
20173: LD_INT 12
20175: PUSH
20176: LD_INT 13
20178: PUSH
20179: LD_INT 16
20181: PUSH
20182: LD_INT 17
20184: PUSH
20185: LD_INT 18
20187: PUSH
20188: LD_INT 19
20190: PUSH
20191: LD_INT 20
20193: PUSH
20194: LD_INT 21
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: IN
20212: NOT
20213: OR
20214: PUSH
20215: LD_VAR 0 8
20219: PUSH
20220: LD_INT 5
20222: ARRAY
20223: NOT
20224: OR
20225: PUSH
20226: LD_VAR 0 8
20230: PUSH
20231: LD_INT 6
20233: ARRAY
20234: PUSH
20235: LD_INT 1
20237: PUSH
20238: LD_INT 2
20240: PUSH
20241: LD_INT 7
20243: PUSH
20244: LD_INT 9
20246: PUSH
20247: LD_INT 10
20249: PUSH
20250: LD_INT 11
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: LIST
20260: IN
20261: NOT
20262: OR
20263: IFFALSE 20269
// exit ;
20265: POP
20266: POP
20267: GO 20352
// end ;
20269: GO 19940
20271: POP
20272: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20273: LD_VAR 0 9
20277: PPUSH
20278: LD_VAR 0 3
20282: PPUSH
20283: LD_VAR 0 4
20287: PPUSH
20288: LD_INT 20
20290: PPUSH
20291: CALL 12275 0 4
20295: PUSH
20296: LD_INT 4
20298: ARRAY
20299: IFFALSE 20303
// exit ;
20301: GO 20352
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20303: LD_VAR 0 2
20307: PUSH
20308: LD_INT 29
20310: PUSH
20311: LD_INT 30
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: IN
20318: PUSH
20319: LD_VAR 0 3
20323: PPUSH
20324: LD_VAR 0 4
20328: PPUSH
20329: LD_VAR 0 9
20333: PPUSH
20334: CALL_OW 440
20338: NOT
20339: AND
20340: IFFALSE 20344
// exit ;
20342: GO 20352
// result := true ;
20344: LD_ADDR_VAR 0 6
20348: PUSH
20349: LD_INT 1
20351: ST_TO_ADDR
// end ;
20352: LD_VAR 0 6
20356: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20357: LD_INT 0
20359: PPUSH
20360: PPUSH
20361: PPUSH
20362: PPUSH
20363: PPUSH
20364: PPUSH
20365: PPUSH
20366: PPUSH
20367: PPUSH
20368: PPUSH
20369: PPUSH
20370: PPUSH
20371: PPUSH
20372: PPUSH
20373: PPUSH
20374: PPUSH
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
20394: PPUSH
20395: PPUSH
20396: PPUSH
20397: PPUSH
20398: PPUSH
20399: PPUSH
20400: PPUSH
20401: PPUSH
20402: PPUSH
20403: PPUSH
20404: PPUSH
20405: PPUSH
20406: PPUSH
20407: PPUSH
20408: PPUSH
20409: PPUSH
20410: PPUSH
20411: PPUSH
20412: PPUSH
20413: PPUSH
20414: PPUSH
20415: PPUSH
20416: PPUSH
// result = [ ] ;
20417: LD_ADDR_VAR 0 7
20421: PUSH
20422: EMPTY
20423: ST_TO_ADDR
// temp_list = [ ] ;
20424: LD_ADDR_VAR 0 9
20428: PUSH
20429: EMPTY
20430: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20431: LD_VAR 0 4
20435: PUSH
20436: LD_INT 0
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: LD_INT 3
20447: PUSH
20448: LD_INT 4
20450: PUSH
20451: LD_INT 5
20453: PUSH
20454: EMPTY
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: IN
20462: NOT
20463: PUSH
20464: LD_VAR 0 1
20468: PUSH
20469: LD_INT 0
20471: PUSH
20472: LD_INT 1
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: IN
20479: PUSH
20480: LD_VAR 0 5
20484: PUSH
20485: LD_INT 1
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 3
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: LIST
20498: IN
20499: NOT
20500: AND
20501: OR
20502: IFFALSE 20506
// exit ;
20504: GO 38897
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20506: LD_VAR 0 1
20510: PUSH
20511: LD_INT 6
20513: PUSH
20514: LD_INT 7
20516: PUSH
20517: LD_INT 8
20519: PUSH
20520: LD_INT 13
20522: PUSH
20523: LD_INT 12
20525: PUSH
20526: LD_INT 15
20528: PUSH
20529: LD_INT 11
20531: PUSH
20532: LD_INT 14
20534: PUSH
20535: LD_INT 10
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: IN
20549: IFFALSE 20559
// btype = b_lab ;
20551: LD_ADDR_VAR 0 1
20555: PUSH
20556: LD_INT 6
20558: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20559: LD_VAR 0 6
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 1
20569: PUSH
20570: LD_INT 2
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: LIST
20577: IN
20578: NOT
20579: PUSH
20580: LD_VAR 0 1
20584: PUSH
20585: LD_INT 0
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: LD_INT 3
20596: PUSH
20597: LD_INT 6
20599: PUSH
20600: LD_INT 36
20602: PUSH
20603: LD_INT 4
20605: PUSH
20606: LD_INT 5
20608: PUSH
20609: LD_INT 31
20611: PUSH
20612: LD_INT 32
20614: PUSH
20615: LD_INT 33
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: IN
20631: NOT
20632: PUSH
20633: LD_VAR 0 6
20637: PUSH
20638: LD_INT 1
20640: EQUAL
20641: AND
20642: OR
20643: PUSH
20644: LD_VAR 0 1
20648: PUSH
20649: LD_INT 2
20651: PUSH
20652: LD_INT 3
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: IN
20659: NOT
20660: PUSH
20661: LD_VAR 0 6
20665: PUSH
20666: LD_INT 2
20668: EQUAL
20669: AND
20670: OR
20671: IFFALSE 20681
// mode = 0 ;
20673: LD_ADDR_VAR 0 6
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// case mode of 0 :
20681: LD_VAR 0 6
20685: PUSH
20686: LD_INT 0
20688: DOUBLE
20689: EQUAL
20690: IFTRUE 20694
20692: GO 32147
20694: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20695: LD_ADDR_VAR 0 11
20699: PUSH
20700: LD_INT 0
20702: PUSH
20703: LD_INT 0
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 0
20712: PUSH
20713: LD_INT 1
20715: NEG
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 1
20723: PUSH
20724: LD_INT 0
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: PUSH
20734: LD_INT 1
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PUSH
20741: LD_INT 0
20743: PUSH
20744: LD_INT 1
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: PUSH
20751: LD_INT 1
20753: NEG
20754: PUSH
20755: LD_INT 0
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: PUSH
20762: LD_INT 1
20764: NEG
20765: PUSH
20766: LD_INT 1
20768: NEG
20769: PUSH
20770: EMPTY
20771: LIST
20772: LIST
20773: PUSH
20774: LD_INT 1
20776: NEG
20777: PUSH
20778: LD_INT 2
20780: NEG
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: LD_INT 0
20788: PUSH
20789: LD_INT 2
20791: NEG
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 1
20799: PUSH
20800: LD_INT 1
20802: NEG
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: PUSH
20811: LD_INT 2
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 0
20820: PUSH
20821: LD_INT 2
20823: PUSH
20824: EMPTY
20825: LIST
20826: LIST
20827: PUSH
20828: LD_INT 1
20830: NEG
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: PUSH
20842: LD_INT 3
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: LD_INT 0
20851: PUSH
20852: LD_INT 3
20854: PUSH
20855: EMPTY
20856: LIST
20857: LIST
20858: PUSH
20859: LD_INT 1
20861: NEG
20862: PUSH
20863: LD_INT 2
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20888: LD_ADDR_VAR 0 12
20892: PUSH
20893: LD_INT 0
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: LD_INT 1
20908: NEG
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 1
20916: PUSH
20917: LD_INT 0
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 0
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 1
20946: NEG
20947: PUSH
20948: LD_INT 0
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PUSH
20955: LD_INT 1
20957: NEG
20958: PUSH
20959: LD_INT 1
20961: NEG
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: LD_INT 1
20972: NEG
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 2
20980: PUSH
20981: LD_INT 0
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 1
21000: NEG
21001: PUSH
21002: LD_INT 1
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: PUSH
21009: LD_INT 2
21011: NEG
21012: PUSH
21013: LD_INT 0
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 2
21022: NEG
21023: PUSH
21024: LD_INT 1
21026: NEG
21027: PUSH
21028: EMPTY
21029: LIST
21030: LIST
21031: PUSH
21032: LD_INT 2
21034: NEG
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 3
21045: NEG
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 3
21056: NEG
21057: PUSH
21058: LD_INT 1
21060: NEG
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: LIST
21082: LIST
21083: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21084: LD_ADDR_VAR 0 13
21088: PUSH
21089: LD_INT 0
21091: PUSH
21092: LD_INT 0
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 0
21101: PUSH
21102: LD_INT 1
21104: NEG
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: LD_INT 0
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: LD_INT 1
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: LD_INT 1
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 1
21142: NEG
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 1
21153: NEG
21154: PUSH
21155: LD_INT 1
21157: NEG
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: LD_INT 2
21169: NEG
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 2
21177: PUSH
21178: LD_INT 1
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: PUSH
21188: LD_INT 2
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: LD_INT 1
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 2
21207: NEG
21208: PUSH
21209: LD_INT 1
21211: NEG
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 2
21219: NEG
21220: PUSH
21221: LD_INT 2
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 2
21231: NEG
21232: PUSH
21233: LD_INT 3
21235: NEG
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: PUSH
21241: LD_INT 3
21243: NEG
21244: PUSH
21245: LD_INT 2
21247: NEG
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 3
21255: NEG
21256: PUSH
21257: LD_INT 3
21259: NEG
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21283: LD_ADDR_VAR 0 14
21287: PUSH
21288: LD_INT 0
21290: PUSH
21291: LD_INT 0
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: LD_INT 1
21303: NEG
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 0
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: PUSH
21322: LD_INT 1
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 0
21331: PUSH
21332: LD_INT 1
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: LD_INT 1
21341: NEG
21342: PUSH
21343: LD_INT 0
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 1
21352: NEG
21353: PUSH
21354: LD_INT 1
21356: NEG
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 1
21364: NEG
21365: PUSH
21366: LD_INT 2
21368: NEG
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 0
21376: PUSH
21377: LD_INT 2
21379: NEG
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: LD_INT 1
21390: NEG
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 1
21398: PUSH
21399: LD_INT 2
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 0
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: LD_INT 1
21418: NEG
21419: PUSH
21420: LD_INT 1
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PUSH
21427: LD_INT 1
21429: NEG
21430: PUSH
21431: LD_INT 3
21433: NEG
21434: PUSH
21435: EMPTY
21436: LIST
21437: LIST
21438: PUSH
21439: LD_INT 0
21441: PUSH
21442: LD_INT 3
21444: NEG
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: LD_INT 2
21455: NEG
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21479: LD_ADDR_VAR 0 15
21483: PUSH
21484: LD_INT 0
21486: PUSH
21487: LD_INT 0
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 0
21496: PUSH
21497: LD_INT 1
21499: NEG
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 1
21507: PUSH
21508: LD_INT 0
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: PUSH
21518: LD_INT 1
21520: PUSH
21521: EMPTY
21522: LIST
21523: LIST
21524: PUSH
21525: LD_INT 0
21527: PUSH
21528: LD_INT 1
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: PUSH
21535: LD_INT 1
21537: NEG
21538: PUSH
21539: LD_INT 0
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 1
21548: NEG
21549: PUSH
21550: LD_INT 1
21552: NEG
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 1
21560: PUSH
21561: LD_INT 1
21563: NEG
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: LD_INT 0
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 2
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: LD_INT 1
21591: NEG
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 2
21602: NEG
21603: PUSH
21604: LD_INT 0
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: NEG
21614: PUSH
21615: LD_INT 1
21617: NEG
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 3
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 3
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21672: LD_ADDR_VAR 0 16
21676: PUSH
21677: LD_INT 0
21679: PUSH
21680: LD_INT 0
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: LD_INT 0
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: LD_INT 0
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 1
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PUSH
21718: LD_INT 0
21720: PUSH
21721: LD_INT 1
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: PUSH
21728: LD_INT 1
21730: NEG
21731: PUSH
21732: LD_INT 0
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: LD_INT 2
21757: NEG
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 2
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: PUSH
21776: LD_INT 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: LD_INT 2
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 2
21795: NEG
21796: PUSH
21797: LD_INT 1
21799: NEG
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: LD_INT 2
21811: NEG
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 3
21819: PUSH
21820: LD_INT 2
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: LD_INT 3
21829: PUSH
21830: LD_INT 3
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: LD_INT 3
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: EMPTY
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21865: LD_ADDR_VAR 0 17
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 0
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 0
21882: PUSH
21883: LD_INT 1
21885: NEG
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: LD_INT 0
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 0
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: LD_INT 0
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 1
21938: NEG
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 1
21946: NEG
21947: PUSH
21948: LD_INT 2
21950: NEG
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: LD_INT 2
21961: NEG
21962: PUSH
21963: EMPTY
21964: LIST
21965: LIST
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: LD_INT 1
21972: NEG
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: PUSH
21981: LD_INT 0
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 2
21990: PUSH
21991: LD_INT 1
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 2
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: PUSH
22032: LD_INT 1
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: PUSH
22039: LD_INT 2
22041: NEG
22042: PUSH
22043: LD_INT 0
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: NEG
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: LD_INT 2
22064: NEG
22065: PUSH
22066: LD_INT 2
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22095: LD_ADDR_VAR 0 18
22099: PUSH
22100: LD_INT 0
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: LD_INT 1
22115: NEG
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 1
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: LD_INT 0
22143: PUSH
22144: LD_INT 1
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: NEG
22154: PUSH
22155: LD_INT 0
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: LD_INT 1
22164: NEG
22165: PUSH
22166: LD_INT 1
22168: NEG
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 1
22176: NEG
22177: PUSH
22178: LD_INT 2
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: LD_INT 2
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 1
22202: NEG
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 0
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: LD_INT 1
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 2
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: PUSH
22241: LD_INT 2
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: LD_INT 2
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 1
22260: NEG
22261: PUSH
22262: LD_INT 1
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 2
22271: NEG
22272: PUSH
22273: LD_INT 0
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: LD_INT 2
22282: NEG
22283: PUSH
22284: LD_INT 1
22286: NEG
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: NEG
22295: PUSH
22296: LD_INT 2
22298: NEG
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22325: LD_ADDR_VAR 0 19
22329: PUSH
22330: LD_INT 0
22332: PUSH
22333: LD_INT 0
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: LD_INT 1
22345: NEG
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: LD_INT 0
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: LD_INT 0
22373: PUSH
22374: LD_INT 1
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 1
22383: NEG
22384: PUSH
22385: LD_INT 0
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 1
22394: NEG
22395: PUSH
22396: LD_INT 1
22398: NEG
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 2
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 0
22418: PUSH
22419: LD_INT 2
22421: NEG
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 0
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 2
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: PUSH
22471: LD_INT 2
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 1
22490: NEG
22491: PUSH
22492: LD_INT 1
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 2
22501: NEG
22502: PUSH
22503: LD_INT 0
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: NEG
22513: PUSH
22514: LD_INT 1
22516: NEG
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PUSH
22522: LD_INT 2
22524: NEG
22525: PUSH
22526: LD_INT 2
22528: NEG
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22555: LD_ADDR_VAR 0 20
22559: PUSH
22560: LD_INT 0
22562: PUSH
22563: LD_INT 0
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: LD_INT 1
22575: NEG
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: LD_INT 0
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 0
22603: PUSH
22604: LD_INT 1
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 1
22613: NEG
22614: PUSH
22615: LD_INT 0
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 1
22624: NEG
22625: PUSH
22626: LD_INT 1
22628: NEG
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 2
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 0
22648: PUSH
22649: LD_INT 2
22651: NEG
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PUSH
22657: LD_INT 1
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 0
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 2
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 2
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 1
22700: PUSH
22701: LD_INT 2
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: LD_INT 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 1
22720: NEG
22721: PUSH
22722: LD_INT 1
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 2
22731: NEG
22732: PUSH
22733: LD_INT 0
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 2
22742: NEG
22743: PUSH
22744: LD_INT 1
22746: NEG
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 2
22754: NEG
22755: PUSH
22756: LD_INT 2
22758: NEG
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22785: LD_ADDR_VAR 0 21
22789: PUSH
22790: LD_INT 0
22792: PUSH
22793: LD_INT 0
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: LD_INT 1
22805: NEG
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 0
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 0
22833: PUSH
22834: LD_INT 1
22836: PUSH
22837: EMPTY
22838: LIST
22839: LIST
22840: PUSH
22841: LD_INT 1
22843: NEG
22844: PUSH
22845: LD_INT 0
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: NEG
22855: PUSH
22856: LD_INT 1
22858: NEG
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: LD_INT 2
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 0
22878: PUSH
22879: LD_INT 2
22881: NEG
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 1
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 2
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 2
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: LD_INT 2
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 1
22950: NEG
22951: PUSH
22952: LD_INT 1
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 2
22961: NEG
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 2
22972: NEG
22973: PUSH
22974: LD_INT 1
22976: NEG
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 2
22984: NEG
22985: PUSH
22986: LD_INT 2
22988: NEG
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23015: LD_ADDR_VAR 0 22
23019: PUSH
23020: LD_INT 0
23022: PUSH
23023: LD_INT 0
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: LD_INT 1
23035: NEG
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 1
23043: PUSH
23044: LD_INT 0
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_INT 1
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 1
23073: NEG
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PUSH
23082: LD_INT 1
23084: NEG
23085: PUSH
23086: LD_INT 1
23088: NEG
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 2
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 0
23108: PUSH
23109: LD_INT 2
23111: NEG
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: PUSH
23117: LD_INT 1
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 0
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: LD_INT 1
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 2
23150: PUSH
23151: LD_INT 2
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PUSH
23161: LD_INT 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 1
23180: NEG
23181: PUSH
23182: LD_INT 1
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 2
23191: NEG
23192: PUSH
23193: LD_INT 0
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 2
23202: NEG
23203: PUSH
23204: LD_INT 1
23206: NEG
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: PUSH
23212: LD_INT 2
23214: NEG
23215: PUSH
23216: LD_INT 2
23218: NEG
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23245: LD_ADDR_VAR 0 23
23249: PUSH
23250: LD_INT 0
23252: PUSH
23253: LD_INT 0
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: LD_INT 1
23265: NEG
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 1
23273: PUSH
23274: LD_INT 0
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 0
23293: PUSH
23294: LD_INT 1
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 1
23303: NEG
23304: PUSH
23305: LD_INT 0
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 1
23314: NEG
23315: PUSH
23316: LD_INT 1
23318: NEG
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: LD_INT 2
23330: NEG
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 0
23338: PUSH
23339: LD_INT 2
23341: NEG
23342: PUSH
23343: EMPTY
23344: LIST
23345: LIST
23346: PUSH
23347: LD_INT 1
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 0
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: LD_INT 1
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 2
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: LD_INT 2
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: LD_INT 2
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 1
23410: NEG
23411: PUSH
23412: LD_INT 1
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: PUSH
23419: LD_INT 2
23421: NEG
23422: PUSH
23423: LD_INT 0
23425: PUSH
23426: EMPTY
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 2
23432: NEG
23433: PUSH
23434: LD_INT 1
23436: NEG
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 2
23444: NEG
23445: PUSH
23446: LD_INT 2
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 2
23456: NEG
23457: PUSH
23458: LD_INT 3
23460: NEG
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 1
23468: NEG
23469: PUSH
23470: LD_INT 3
23472: NEG
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: PUSH
23478: LD_INT 1
23480: PUSH
23481: LD_INT 2
23483: NEG
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: LD_INT 1
23494: NEG
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23525: LD_ADDR_VAR 0 24
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: LD_INT 0
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 0
23542: PUSH
23543: LD_INT 1
23545: NEG
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 1
23553: PUSH
23554: LD_INT 0
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: PUSH
23564: LD_INT 1
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 0
23573: PUSH
23574: LD_INT 1
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 1
23583: NEG
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 1
23594: NEG
23595: PUSH
23596: LD_INT 1
23598: NEG
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: PUSH
23604: LD_INT 1
23606: NEG
23607: PUSH
23608: LD_INT 2
23610: NEG
23611: PUSH
23612: EMPTY
23613: LIST
23614: LIST
23615: PUSH
23616: LD_INT 0
23618: PUSH
23619: LD_INT 2
23621: NEG
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: LD_INT 1
23632: NEG
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 0
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 2
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 2
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 2
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 2
23701: NEG
23702: PUSH
23703: LD_INT 0
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: LD_INT 1
23716: NEG
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 2
23724: NEG
23725: PUSH
23726: LD_INT 2
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 1
23736: PUSH
23737: LD_INT 2
23739: NEG
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 1
23750: NEG
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: LD_INT 3
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 3
23768: PUSH
23769: LD_INT 2
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23801: LD_ADDR_VAR 0 25
23805: PUSH
23806: LD_INT 0
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 0
23818: PUSH
23819: LD_INT 1
23821: NEG
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 1
23829: PUSH
23830: LD_INT 0
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: PUSH
23840: LD_INT 1
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 0
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: LD_INT 1
23859: NEG
23860: PUSH
23861: LD_INT 0
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 1
23882: NEG
23883: PUSH
23884: LD_INT 2
23886: NEG
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 0
23894: PUSH
23895: LD_INT 2
23897: NEG
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 0
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 2
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 1
23946: PUSH
23947: LD_INT 2
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: LD_INT 2
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 1
23966: NEG
23967: PUSH
23968: LD_INT 1
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 2
23977: NEG
23978: PUSH
23979: LD_INT 0
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: LD_INT 2
23988: NEG
23989: PUSH
23990: LD_INT 1
23992: NEG
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: PUSH
23998: LD_INT 2
24000: NEG
24001: PUSH
24002: LD_INT 2
24004: NEG
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 3
24012: PUSH
24013: LD_INT 1
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 3
24022: PUSH
24023: LD_INT 2
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: LD_INT 2
24032: PUSH
24033: LD_INT 3
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 1
24042: PUSH
24043: LD_INT 3
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24075: LD_ADDR_VAR 0 26
24079: PUSH
24080: LD_INT 0
24082: PUSH
24083: LD_INT 0
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 1
24095: NEG
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: LD_INT 0
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: PUSH
24114: LD_INT 1
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 0
24123: PUSH
24124: LD_INT 1
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: NEG
24134: PUSH
24135: LD_INT 0
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 1
24144: NEG
24145: PUSH
24146: LD_INT 1
24148: NEG
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 1
24156: NEG
24157: PUSH
24158: LD_INT 2
24160: NEG
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 2
24171: NEG
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 1
24179: PUSH
24180: LD_INT 1
24182: NEG
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 2
24200: PUSH
24201: LD_INT 1
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 2
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: PUSH
24221: LD_INT 2
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: LD_INT 2
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 1
24240: NEG
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 2
24251: NEG
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 2
24286: PUSH
24287: LD_INT 3
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 1
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: EMPTY
24301: LIST
24302: LIST
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: LD_INT 2
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 2
24317: NEG
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24351: LD_ADDR_VAR 0 27
24355: PUSH
24356: LD_INT 0
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 0
24368: PUSH
24369: LD_INT 1
24371: NEG
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: LD_INT 0
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 1
24389: PUSH
24390: LD_INT 1
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 0
24399: PUSH
24400: LD_INT 1
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 1
24409: NEG
24410: PUSH
24411: LD_INT 0
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: NEG
24421: PUSH
24422: LD_INT 1
24424: NEG
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: LD_INT 1
24432: NEG
24433: PUSH
24434: LD_INT 2
24436: NEG
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 0
24444: PUSH
24445: LD_INT 2
24447: NEG
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 1
24455: PUSH
24456: LD_INT 1
24458: NEG
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 0
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 2
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: PUSH
24497: LD_INT 2
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 1
24516: NEG
24517: PUSH
24518: LD_INT 1
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 2
24527: NEG
24528: PUSH
24529: LD_INT 0
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 2
24538: NEG
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 2
24550: NEG
24551: PUSH
24552: LD_INT 2
24554: NEG
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 2
24573: NEG
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 3
24584: NEG
24585: PUSH
24586: LD_INT 1
24588: NEG
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 3
24596: NEG
24597: PUSH
24598: LD_INT 2
24600: NEG
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24631: LD_ADDR_VAR 0 28
24635: PUSH
24636: LD_INT 0
24638: PUSH
24639: LD_INT 0
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: LD_INT 1
24651: NEG
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 1
24659: PUSH
24660: LD_INT 0
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 1
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 0
24679: PUSH
24680: LD_INT 1
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: PUSH
24687: LD_INT 1
24689: NEG
24690: PUSH
24691: LD_INT 0
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 1
24700: NEG
24701: PUSH
24702: LD_INT 1
24704: NEG
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: LD_INT 1
24712: NEG
24713: PUSH
24714: LD_INT 2
24716: NEG
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 0
24724: PUSH
24725: LD_INT 2
24727: NEG
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: LD_INT 1
24735: PUSH
24736: LD_INT 1
24738: NEG
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: PUSH
24747: LD_INT 0
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 2
24756: PUSH
24757: LD_INT 1
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 2
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 2
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: LD_INT 2
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 2
24807: NEG
24808: PUSH
24809: LD_INT 0
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PUSH
24816: LD_INT 2
24818: NEG
24819: PUSH
24820: LD_INT 1
24822: NEG
24823: PUSH
24824: EMPTY
24825: LIST
24826: LIST
24827: PUSH
24828: LD_INT 2
24830: NEG
24831: PUSH
24832: LD_INT 2
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: LD_INT 3
24846: NEG
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 1
24854: NEG
24855: PUSH
24856: LD_INT 3
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 3
24866: NEG
24867: PUSH
24868: LD_INT 1
24870: NEG
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 3
24878: NEG
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24913: LD_ADDR_VAR 0 29
24917: PUSH
24918: LD_INT 0
24920: PUSH
24921: LD_INT 0
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: LD_INT 0
24930: PUSH
24931: LD_INT 1
24933: NEG
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 1
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: PUSH
24952: LD_INT 1
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 0
24961: PUSH
24962: LD_INT 1
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PUSH
24969: LD_INT 1
24971: NEG
24972: PUSH
24973: LD_INT 0
24975: PUSH
24976: EMPTY
24977: LIST
24978: LIST
24979: PUSH
24980: LD_INT 1
24982: NEG
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: LD_INT 2
24998: NEG
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: LD_INT 2
25009: NEG
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: LD_INT 1
25020: NEG
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 2
25028: PUSH
25029: LD_INT 0
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 2
25038: PUSH
25039: LD_INT 1
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: LD_INT 2
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: LD_INT 2
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: PUSH
25066: LD_INT 1
25068: NEG
25069: PUSH
25070: LD_INT 1
25072: PUSH
25073: EMPTY
25074: LIST
25075: LIST
25076: PUSH
25077: LD_INT 2
25079: NEG
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: NEG
25092: PUSH
25093: LD_INT 2
25095: NEG
25096: PUSH
25097: EMPTY
25098: LIST
25099: LIST
25100: PUSH
25101: LD_INT 2
25103: NEG
25104: PUSH
25105: LD_INT 3
25107: NEG
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 2
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 3
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 3
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 1
25146: NEG
25147: PUSH
25148: LD_INT 2
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 3
25157: NEG
25158: PUSH
25159: LD_INT 2
25161: NEG
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25192: LD_ADDR_VAR 0 30
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 2
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 0
25285: PUSH
25286: LD_INT 2
25288: NEG
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 1
25296: PUSH
25297: LD_INT 1
25299: NEG
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 2
25317: PUSH
25318: LD_INT 1
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: PUSH
25328: LD_INT 2
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 1
25337: PUSH
25338: LD_INT 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 2
25358: NEG
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 2
25369: NEG
25370: PUSH
25371: LD_INT 1
25373: NEG
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 3
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 2
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 3
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 3
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 2
25424: NEG
25425: PUSH
25426: LD_INT 1
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 3
25435: NEG
25436: PUSH
25437: LD_INT 1
25439: NEG
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25470: LD_ADDR_VAR 0 31
25474: PUSH
25475: LD_INT 0
25477: PUSH
25478: LD_INT 0
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 0
25487: PUSH
25488: LD_INT 1
25490: NEG
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 1
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: PUSH
25509: LD_INT 1
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 0
25518: PUSH
25519: LD_INT 1
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 1
25528: NEG
25529: PUSH
25530: LD_INT 0
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: LD_INT 1
25539: NEG
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 1
25551: NEG
25552: PUSH
25553: LD_INT 2
25555: NEG
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 1
25563: PUSH
25564: LD_INT 1
25566: NEG
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 0
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: LD_INT 1
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: PUSH
25605: LD_INT 2
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: LD_INT 2
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: PUSH
25622: LD_INT 1
25624: NEG
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: LD_INT 1
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 2
25647: NEG
25648: PUSH
25649: LD_INT 2
25651: NEG
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 2
25659: NEG
25660: PUSH
25661: LD_INT 3
25663: NEG
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 3
25682: PUSH
25683: LD_INT 1
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: LD_INT 3
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 1
25702: NEG
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 3
25713: NEG
25714: PUSH
25715: LD_INT 2
25717: NEG
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25748: LD_ADDR_VAR 0 32
25752: PUSH
25753: LD_INT 0
25755: PUSH
25756: LD_INT 0
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 1
25776: PUSH
25777: LD_INT 0
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: LD_INT 1
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: LD_INT 1
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 1
25806: NEG
25807: PUSH
25808: LD_INT 0
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: LD_INT 1
25817: NEG
25818: PUSH
25819: LD_INT 1
25821: NEG
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 1
25829: NEG
25830: PUSH
25831: LD_INT 2
25833: NEG
25834: PUSH
25835: EMPTY
25836: LIST
25837: LIST
25838: PUSH
25839: LD_INT 0
25841: PUSH
25842: LD_INT 2
25844: NEG
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: LD_INT 1
25855: NEG
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 2
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 2
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 0
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 1
25903: NEG
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 2
25914: NEG
25915: PUSH
25916: LD_INT 0
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: LD_INT 1
25929: NEG
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 1
25937: NEG
25938: PUSH
25939: LD_INT 3
25941: NEG
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: PUSH
25947: LD_INT 1
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 3
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 3
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 2
25980: NEG
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 3
25991: NEG
25992: PUSH
25993: LD_INT 1
25995: NEG
25996: PUSH
25997: EMPTY
25998: LIST
25999: LIST
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: LIST
26015: LIST
26016: LIST
26017: LIST
26018: LIST
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26026: LD_ADDR_VAR 0 33
26030: PUSH
26031: LD_INT 0
26033: PUSH
26034: LD_INT 0
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: PUSH
26055: LD_INT 0
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 1
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 0
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 1
26084: NEG
26085: PUSH
26086: LD_INT 0
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 1
26095: NEG
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: LD_INT 1
26107: NEG
26108: PUSH
26109: LD_INT 2
26111: NEG
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: LD_INT 1
26122: NEG
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 2
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 2
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: LD_INT 1
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: NEG
26182: PUSH
26183: LD_INT 0
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: NEG
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: LD_INT 2
26204: NEG
26205: PUSH
26206: LD_INT 2
26208: NEG
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 2
26216: NEG
26217: PUSH
26218: LD_INT 3
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 3
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: LD_INT 3
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: NEG
26260: PUSH
26261: LD_INT 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 3
26270: NEG
26271: PUSH
26272: LD_INT 2
26274: NEG
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: LIST
26294: LIST
26295: LIST
26296: LIST
26297: LIST
26298: LIST
26299: LIST
26300: LIST
26301: LIST
26302: LIST
26303: LIST
26304: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26305: LD_ADDR_VAR 0 34
26309: PUSH
26310: LD_INT 0
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 0
26322: PUSH
26323: LD_INT 1
26325: NEG
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: LD_INT 0
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: LD_INT 1
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 1
26363: NEG
26364: PUSH
26365: LD_INT 0
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 1
26374: NEG
26375: PUSH
26376: LD_INT 1
26378: NEG
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 1
26386: NEG
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 0
26398: PUSH
26399: LD_INT 2
26401: NEG
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 1
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 2
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 2
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: NEG
26451: PUSH
26452: LD_INT 1
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: NEG
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PUSH
26482: LD_INT 2
26484: NEG
26485: PUSH
26486: LD_INT 2
26488: NEG
26489: PUSH
26490: EMPTY
26491: LIST
26492: LIST
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: LD_INT 3
26500: NEG
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: PUSH
26506: LD_INT 1
26508: PUSH
26509: LD_INT 2
26511: NEG
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 3
26519: PUSH
26520: LD_INT 2
26522: PUSH
26523: EMPTY
26524: LIST
26525: LIST
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: LD_INT 3
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 3
26550: NEG
26551: PUSH
26552: LD_INT 1
26554: NEG
26555: PUSH
26556: EMPTY
26557: LIST
26558: LIST
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: LIST
26578: LIST
26579: LIST
26580: LIST
26581: LIST
26582: LIST
26583: LIST
26584: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26585: LD_ADDR_VAR 0 35
26589: PUSH
26590: LD_INT 0
26592: PUSH
26593: LD_INT 0
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: LD_INT 1
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: LD_INT 0
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: LD_INT 1
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: LD_INT 1
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 1
26643: NEG
26644: PUSH
26645: LD_INT 0
26647: PUSH
26648: EMPTY
26649: LIST
26650: LIST
26651: PUSH
26652: LD_INT 1
26654: NEG
26655: PUSH
26656: LD_INT 1
26658: NEG
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 2
26666: PUSH
26667: LD_INT 1
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 2
26676: NEG
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: EMPTY
26683: LIST
26684: LIST
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26697: LD_ADDR_VAR 0 36
26701: PUSH
26702: LD_INT 0
26704: PUSH
26705: LD_INT 0
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: LD_INT 1
26717: NEG
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: PUSH
26736: LD_INT 1
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: LD_INT 0
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 1
26766: NEG
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: LD_INT 2
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 1
26790: PUSH
26791: LD_INT 2
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26809: LD_ADDR_VAR 0 37
26813: PUSH
26814: LD_INT 0
26816: PUSH
26817: LD_INT 0
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: LD_INT 1
26829: NEG
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 0
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 0
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 1
26867: NEG
26868: PUSH
26869: LD_INT 0
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 1
26878: NEG
26879: PUSH
26880: LD_INT 1
26882: NEG
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 1
26901: NEG
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26921: LD_ADDR_VAR 0 38
26925: PUSH
26926: LD_INT 0
26928: PUSH
26929: LD_INT 0
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: LD_INT 1
26941: NEG
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: LD_INT 0
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: PUSH
26960: LD_INT 1
26962: PUSH
26963: EMPTY
26964: LIST
26965: LIST
26966: PUSH
26967: LD_INT 0
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 1
26979: NEG
26980: PUSH
26981: LD_INT 0
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 1
26990: NEG
26991: PUSH
26992: LD_INT 1
26994: NEG
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 2
27002: PUSH
27003: LD_INT 1
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: PUSH
27010: LD_INT 2
27012: NEG
27013: PUSH
27014: LD_INT 1
27016: NEG
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27033: LD_ADDR_VAR 0 39
27037: PUSH
27038: LD_INT 0
27040: PUSH
27041: LD_INT 0
27043: PUSH
27044: EMPTY
27045: LIST
27046: LIST
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: LD_INT 1
27053: NEG
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 1
27061: PUSH
27062: LD_INT 0
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: PUSH
27072: LD_INT 1
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 1
27091: NEG
27092: PUSH
27093: LD_INT 0
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: PUSH
27100: LD_INT 1
27102: NEG
27103: PUSH
27104: LD_INT 1
27106: NEG
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: LD_INT 2
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 1
27126: PUSH
27127: LD_INT 2
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27145: LD_ADDR_VAR 0 40
27149: PUSH
27150: LD_INT 0
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: LD_INT 1
27165: NEG
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: LD_INT 0
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: PUSH
27184: LD_INT 1
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 0
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: LD_INT 0
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 1
27214: NEG
27215: PUSH
27216: LD_INT 1
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 1
27237: NEG
27238: PUSH
27239: LD_INT 1
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: LIST
27255: LIST
27256: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27257: LD_ADDR_VAR 0 41
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 1
27285: PUSH
27286: LD_INT 0
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: LD_INT 1
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 0
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: NEG
27316: PUSH
27317: LD_INT 0
27319: PUSH
27320: EMPTY
27321: LIST
27322: LIST
27323: PUSH
27324: LD_INT 1
27326: NEG
27327: PUSH
27328: LD_INT 1
27330: NEG
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: LD_INT 2
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 0
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 2
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: PUSH
27382: LD_INT 2
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: LD_INT 2
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: LD_INT 1
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: PUSH
27410: LD_INT 2
27412: NEG
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 2
27423: NEG
27424: PUSH
27425: LD_INT 1
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: LD_INT 2
27439: NEG
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 2
27447: NEG
27448: PUSH
27449: LD_INT 3
27451: NEG
27452: PUSH
27453: EMPTY
27454: LIST
27455: LIST
27456: PUSH
27457: LD_INT 2
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 3
27470: PUSH
27471: LD_INT 0
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: LD_INT 1
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 3
27490: PUSH
27491: LD_INT 2
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 3
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: PUSH
27518: LD_INT 2
27520: NEG
27521: PUSH
27522: LD_INT 1
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 3
27531: NEG
27532: PUSH
27533: LD_INT 0
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: PUSH
27540: LD_INT 3
27542: NEG
27543: PUSH
27544: LD_INT 1
27546: NEG
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 3
27554: NEG
27555: PUSH
27556: LD_INT 2
27558: NEG
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: LD_INT 3
27566: NEG
27567: PUSH
27568: LD_INT 3
27570: NEG
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27607: LD_ADDR_VAR 0 42
27611: PUSH
27612: LD_INT 0
27614: PUSH
27615: LD_INT 0
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 0
27624: PUSH
27625: LD_INT 1
27627: NEG
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 1
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 0
27655: PUSH
27656: LD_INT 1
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 1
27665: NEG
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: NEG
27677: PUSH
27678: LD_INT 1
27680: NEG
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 1
27688: NEG
27689: PUSH
27690: LD_INT 2
27692: NEG
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: PUSH
27698: LD_INT 0
27700: PUSH
27701: LD_INT 2
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 1
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 2
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 2
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: LD_INT 2
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PUSH
27760: LD_INT 1
27762: NEG
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 2
27773: NEG
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: PUSH
27783: LD_INT 2
27785: NEG
27786: PUSH
27787: LD_INT 2
27789: NEG
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: PUSH
27795: LD_INT 2
27797: NEG
27798: PUSH
27799: LD_INT 3
27801: NEG
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: NEG
27810: PUSH
27811: LD_INT 3
27813: NEG
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: PUSH
27819: LD_INT 0
27821: PUSH
27822: LD_INT 3
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 2
27835: NEG
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 3
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 3
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 0
27883: PUSH
27884: LD_INT 3
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: LD_INT 1
27893: NEG
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: LD_INT 3
27904: NEG
27905: PUSH
27906: LD_INT 2
27908: NEG
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: PUSH
27914: LD_INT 3
27916: NEG
27917: PUSH
27918: LD_INT 3
27920: NEG
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27957: LD_ADDR_VAR 0 43
27961: PUSH
27962: LD_INT 0
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: EMPTY
27969: LIST
27970: LIST
27971: PUSH
27972: LD_INT 0
27974: PUSH
27975: LD_INT 1
27977: NEG
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 1
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 0
28005: PUSH
28006: LD_INT 1
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 1
28015: NEG
28016: PUSH
28017: LD_INT 0
28019: PUSH
28020: EMPTY
28021: LIST
28022: LIST
28023: PUSH
28024: LD_INT 1
28026: NEG
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 1
28038: NEG
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 2
28053: NEG
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: PUSH
28059: LD_INT 1
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: PUSH
28083: LD_INT 1
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: PUSH
28093: LD_INT 2
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: PUSH
28100: LD_INT 0
28102: PUSH
28103: LD_INT 2
28105: PUSH
28106: EMPTY
28107: LIST
28108: LIST
28109: PUSH
28110: LD_INT 1
28112: NEG
28113: PUSH
28114: LD_INT 1
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: PUSH
28121: LD_INT 2
28123: NEG
28124: PUSH
28125: LD_INT 0
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: PUSH
28132: LD_INT 2
28134: NEG
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: EMPTY
28141: LIST
28142: LIST
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: LD_INT 3
28150: NEG
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PUSH
28156: LD_INT 0
28158: PUSH
28159: LD_INT 3
28161: NEG
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 1
28169: PUSH
28170: LD_INT 2
28172: NEG
28173: PUSH
28174: EMPTY
28175: LIST
28176: LIST
28177: PUSH
28178: LD_INT 2
28180: PUSH
28181: LD_INT 1
28183: NEG
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 3
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 3
28201: PUSH
28202: LD_INT 1
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: LD_INT 3
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 0
28221: PUSH
28222: LD_INT 3
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 1
28231: NEG
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: PUSH
28240: LD_INT 2
28242: NEG
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: LIST
28250: PUSH
28251: LD_INT 3
28253: NEG
28254: PUSH
28255: LD_INT 0
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 3
28264: NEG
28265: PUSH
28266: LD_INT 1
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28305: LD_ADDR_VAR 0 44
28309: PUSH
28310: LD_INT 0
28312: PUSH
28313: LD_INT 0
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: PUSH
28320: LD_INT 0
28322: PUSH
28323: LD_INT 1
28325: NEG
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 1
28333: PUSH
28334: LD_INT 0
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 1
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PUSH
28351: LD_INT 0
28353: PUSH
28354: LD_INT 1
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PUSH
28361: LD_INT 1
28363: NEG
28364: PUSH
28365: LD_INT 0
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: NEG
28387: PUSH
28388: LD_INT 2
28390: NEG
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: LD_INT 1
28401: NEG
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 0
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 2
28419: PUSH
28420: LD_INT 1
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 2
28429: PUSH
28430: LD_INT 2
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: LD_INT 1
28453: PUSH
28454: EMPTY
28455: LIST
28456: LIST
28457: PUSH
28458: LD_INT 2
28460: NEG
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: NEG
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: NEG
28484: PUSH
28485: LD_INT 2
28487: NEG
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 2
28495: NEG
28496: PUSH
28497: LD_INT 3
28499: NEG
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 2
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 3
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 3
28538: PUSH
28539: LD_INT 2
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: LD_INT 3
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: PUSH
28556: LD_INT 2
28558: PUSH
28559: LD_INT 3
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: PUSH
28566: LD_INT 2
28568: NEG
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 3
28579: NEG
28580: PUSH
28581: LD_INT 0
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 3
28590: NEG
28591: PUSH
28592: LD_INT 1
28594: NEG
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 3
28602: NEG
28603: PUSH
28604: LD_INT 2
28606: NEG
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 3
28614: NEG
28615: PUSH
28616: LD_INT 3
28618: NEG
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28655: LD_ADDR_VAR 0 45
28659: PUSH
28660: LD_INT 0
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 0
28672: PUSH
28673: LD_INT 1
28675: NEG
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: LD_INT 0
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 0
28703: PUSH
28704: LD_INT 1
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 0
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 1
28724: NEG
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: LD_INT 2
28740: NEG
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: PUSH
28746: LD_INT 0
28748: PUSH
28749: LD_INT 2
28751: NEG
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: LD_INT 2
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: PUSH
28798: LD_INT 0
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: LD_INT 1
28814: PUSH
28815: EMPTY
28816: LIST
28817: LIST
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: LD_INT 2
28837: NEG
28838: PUSH
28839: EMPTY
28840: LIST
28841: LIST
28842: PUSH
28843: LD_INT 2
28845: NEG
28846: PUSH
28847: LD_INT 3
28849: NEG
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: NEG
28858: PUSH
28859: LD_INT 3
28861: NEG
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: LD_INT 0
28869: PUSH
28870: LD_INT 3
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 1
28880: PUSH
28881: LD_INT 2
28883: NEG
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 3
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 3
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 2
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: LD_INT 3
28924: PUSH
28925: EMPTY
28926: LIST
28927: LIST
28928: PUSH
28929: LD_INT 0
28931: PUSH
28932: LD_INT 3
28934: PUSH
28935: EMPTY
28936: LIST
28937: LIST
28938: PUSH
28939: LD_INT 1
28941: NEG
28942: PUSH
28943: LD_INT 2
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: PUSH
28950: LD_INT 3
28952: NEG
28953: PUSH
28954: LD_INT 2
28956: NEG
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 3
28964: NEG
28965: PUSH
28966: LD_INT 3
28968: NEG
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29005: LD_ADDR_VAR 0 46
29009: PUSH
29010: LD_INT 0
29012: PUSH
29013: LD_INT 0
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: LD_INT 0
29022: PUSH
29023: LD_INT 1
29025: NEG
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 1
29033: PUSH
29034: LD_INT 0
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: PUSH
29044: LD_INT 1
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 0
29053: PUSH
29054: LD_INT 1
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 1
29063: NEG
29064: PUSH
29065: LD_INT 0
29067: PUSH
29068: EMPTY
29069: LIST
29070: LIST
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: EMPTY
29081: LIST
29082: LIST
29083: PUSH
29084: LD_INT 1
29086: NEG
29087: PUSH
29088: LD_INT 2
29090: NEG
29091: PUSH
29092: EMPTY
29093: LIST
29094: LIST
29095: PUSH
29096: LD_INT 0
29098: PUSH
29099: LD_INT 2
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 2
29120: PUSH
29121: LD_INT 0
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: PUSH
29131: LD_INT 1
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: PUSH
29141: LD_INT 2
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 2
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: LD_INT 1
29160: NEG
29161: PUSH
29162: LD_INT 1
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: PUSH
29169: LD_INT 2
29171: NEG
29172: PUSH
29173: LD_INT 0
29175: PUSH
29176: EMPTY
29177: LIST
29178: LIST
29179: PUSH
29180: LD_INT 2
29182: NEG
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PUSH
29192: LD_INT 1
29194: NEG
29195: PUSH
29196: LD_INT 3
29198: NEG
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 0
29206: PUSH
29207: LD_INT 3
29209: NEG
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: PUSH
29218: LD_INT 2
29220: NEG
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 1
29231: NEG
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 3
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 3
29249: PUSH
29250: LD_INT 1
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: PUSH
29260: LD_INT 3
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 0
29269: PUSH
29270: LD_INT 3
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 1
29279: NEG
29280: PUSH
29281: LD_INT 2
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 2
29290: NEG
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 3
29301: NEG
29302: PUSH
29303: LD_INT 0
29305: PUSH
29306: EMPTY
29307: LIST
29308: LIST
29309: PUSH
29310: LD_INT 3
29312: NEG
29313: PUSH
29314: LD_INT 1
29316: NEG
29317: PUSH
29318: EMPTY
29319: LIST
29320: LIST
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29353: LD_ADDR_VAR 0 47
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: EMPTY
29365: LIST
29366: LIST
29367: PUSH
29368: LD_INT 0
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: LD_INT 0
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: LD_INT 1
29394: PUSH
29395: EMPTY
29396: LIST
29397: LIST
29398: PUSH
29399: LD_INT 0
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: LD_INT 0
29415: PUSH
29416: EMPTY
29417: LIST
29418: LIST
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: LD_INT 1
29426: NEG
29427: PUSH
29428: EMPTY
29429: LIST
29430: LIST
29431: PUSH
29432: LD_INT 1
29434: NEG
29435: PUSH
29436: LD_INT 2
29438: NEG
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: LD_INT 2
29449: NEG
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 1
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 2
29468: NEG
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: LIST
29500: LIST
29501: LIST
29502: LIST
29503: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29504: LD_ADDR_VAR 0 48
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 0
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 1
29532: PUSH
29533: LD_INT 0
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: PUSH
29543: LD_INT 1
29545: PUSH
29546: EMPTY
29547: LIST
29548: LIST
29549: PUSH
29550: LD_INT 0
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: LD_INT 0
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PUSH
29571: LD_INT 1
29573: NEG
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 1
29585: NEG
29586: PUSH
29587: LD_INT 2
29589: NEG
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 0
29597: PUSH
29598: LD_INT 2
29600: NEG
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 1
29608: PUSH
29609: LD_INT 1
29611: NEG
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: LD_INT 0
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 2
29629: PUSH
29630: LD_INT 1
29632: PUSH
29633: EMPTY
29634: LIST
29635: LIST
29636: PUSH
29637: EMPTY
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: LIST
29650: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29651: LD_ADDR_VAR 0 49
29655: PUSH
29656: LD_INT 0
29658: PUSH
29659: LD_INT 0
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 0
29668: PUSH
29669: LD_INT 1
29671: NEG
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: LD_INT 0
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: PUSH
29690: LD_INT 1
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 0
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 0
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 1
29720: NEG
29721: PUSH
29722: LD_INT 1
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 2
29763: PUSH
29764: LD_INT 2
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 1
29773: PUSH
29774: LD_INT 2
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29795: LD_ADDR_VAR 0 50
29799: PUSH
29800: LD_INT 0
29802: PUSH
29803: LD_INT 0
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: LD_INT 1
29815: NEG
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: LD_INT 0
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: LD_INT 1
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 1
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: NEG
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 1
29868: NEG
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 2
29876: PUSH
29877: LD_INT 1
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: PUSH
29897: LD_INT 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 0
29906: PUSH
29907: LD_INT 2
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 1
29916: NEG
29917: PUSH
29918: LD_INT 1
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29939: LD_ADDR_VAR 0 51
29943: PUSH
29944: LD_INT 0
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: PUSH
29954: LD_INT 0
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 1
29967: PUSH
29968: LD_INT 0
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: PUSH
29978: LD_INT 1
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 0
29987: PUSH
29988: LD_INT 1
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: LD_INT 1
30012: NEG
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: LD_INT 2
30051: NEG
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: NEG
30063: PUSH
30064: LD_INT 1
30066: NEG
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30086: LD_ADDR_VAR 0 52
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 0
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: LD_INT 0
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: LD_INT 1
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: NEG
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 1
30155: NEG
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 1
30167: NEG
30168: PUSH
30169: LD_INT 2
30171: NEG
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 1
30179: NEG
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: NEG
30191: PUSH
30192: LD_INT 0
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 2
30201: NEG
30202: PUSH
30203: LD_INT 1
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 2
30213: NEG
30214: PUSH
30215: LD_INT 2
30217: NEG
30218: PUSH
30219: EMPTY
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30237: LD_ADDR_VAR 0 53
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 0
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: LD_INT 1
30257: NEG
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 0
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: LD_INT 1
30295: NEG
30296: PUSH
30297: LD_INT 0
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: LD_INT 1
30310: NEG
30311: PUSH
30312: EMPTY
30313: LIST
30314: LIST
30315: PUSH
30316: LD_INT 1
30318: NEG
30319: PUSH
30320: LD_INT 2
30322: NEG
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 0
30330: PUSH
30331: LD_INT 2
30333: NEG
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 1
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: LD_INT 0
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 2
30362: PUSH
30363: LD_INT 1
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 2
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: PUSH
30383: LD_INT 2
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: LD_INT 2
30395: PUSH
30396: EMPTY
30397: LIST
30398: LIST
30399: PUSH
30400: LD_INT 1
30402: NEG
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 2
30413: NEG
30414: PUSH
30415: LD_INT 0
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 2
30424: NEG
30425: PUSH
30426: LD_INT 1
30428: NEG
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 2
30436: NEG
30437: PUSH
30438: LD_INT 2
30440: NEG
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30467: LD_ADDR_VAR 0 54
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: LD_INT 0
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: LD_INT 1
30487: NEG
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: PUSH
30506: LD_INT 1
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 0
30515: PUSH
30516: LD_INT 1
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: NEG
30526: PUSH
30527: LD_INT 0
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 1
30536: NEG
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: LD_INT 2
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 0
30560: PUSH
30561: LD_INT 2
30563: NEG
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: LD_INT 1
30574: NEG
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 0
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: PUSH
30593: LD_INT 1
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 2
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: LD_INT 2
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: PUSH
30634: LD_INT 1
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 2
30643: NEG
30644: PUSH
30645: LD_INT 0
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: NEG
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30697: LD_ADDR_VAR 0 55
30701: PUSH
30702: LD_INT 0
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 1
30725: PUSH
30726: LD_INT 0
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 0
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: EMPTY
30750: LIST
30751: LIST
30752: PUSH
30753: LD_INT 1
30755: NEG
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: LD_INT 1
30770: NEG
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: LD_INT 2
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 0
30790: PUSH
30791: LD_INT 2
30793: NEG
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 1
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 2
30822: PUSH
30823: LD_INT 1
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 2
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: PUSH
30843: LD_INT 2
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: LD_INT 1
30862: NEG
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: NEG
30874: PUSH
30875: LD_INT 0
30877: PUSH
30878: EMPTY
30879: LIST
30880: LIST
30881: PUSH
30882: LD_INT 2
30884: NEG
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 2
30896: NEG
30897: PUSH
30898: LD_INT 2
30900: NEG
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30927: LD_ADDR_VAR 0 56
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: LD_INT 0
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: LD_INT 1
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: LD_INT 0
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 0
30975: PUSH
30976: LD_INT 1
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: PUSH
30983: LD_INT 1
30985: NEG
30986: PUSH
30987: LD_INT 0
30989: PUSH
30990: EMPTY
30991: LIST
30992: LIST
30993: PUSH
30994: LD_INT 1
30996: NEG
30997: PUSH
30998: LD_INT 1
31000: NEG
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 2
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 0
31020: PUSH
31021: LD_INT 2
31023: NEG
31024: PUSH
31025: EMPTY
31026: LIST
31027: LIST
31028: PUSH
31029: LD_INT 1
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 0
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 2
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 2
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: PUSH
31073: LD_INT 2
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: LD_INT 2
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: NEG
31093: PUSH
31094: LD_INT 1
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: PUSH
31101: LD_INT 2
31103: NEG
31104: PUSH
31105: LD_INT 0
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: PUSH
31112: LD_INT 2
31114: NEG
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 2
31126: NEG
31127: PUSH
31128: LD_INT 2
31130: NEG
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31157: LD_ADDR_VAR 0 57
31161: PUSH
31162: LD_INT 0
31164: PUSH
31165: LD_INT 0
31167: PUSH
31168: EMPTY
31169: LIST
31170: LIST
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: LD_INT 1
31177: NEG
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 1
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 1
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: LD_INT 2
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 0
31250: PUSH
31251: LD_INT 2
31253: NEG
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: PUSH
31259: LD_INT 1
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 0
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: LD_INT 1
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 2
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: LD_INT 2
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: LD_INT 2
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: NEG
31334: PUSH
31335: LD_INT 0
31337: PUSH
31338: EMPTY
31339: LIST
31340: LIST
31341: PUSH
31342: LD_INT 2
31344: NEG
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 2
31356: NEG
31357: PUSH
31358: LD_INT 2
31360: NEG
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31387: LD_ADDR_VAR 0 58
31391: PUSH
31392: LD_INT 0
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: LD_INT 1
31407: NEG
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 1
31415: PUSH
31416: LD_INT 0
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: LD_INT 0
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 1
31456: NEG
31457: PUSH
31458: LD_INT 1
31460: NEG
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 2
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 0
31480: PUSH
31481: LD_INT 2
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 1
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 0
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: LD_INT 2
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: LD_INT 2
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: LD_INT 1
31556: PUSH
31557: EMPTY
31558: LIST
31559: LIST
31560: PUSH
31561: LD_INT 2
31563: NEG
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 2
31574: NEG
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 2
31586: NEG
31587: PUSH
31588: LD_INT 2
31590: NEG
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31617: LD_ADDR_VAR 0 59
31621: PUSH
31622: LD_INT 0
31624: PUSH
31625: LD_INT 0
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: LD_INT 1
31637: NEG
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 1
31645: PUSH
31646: LD_INT 0
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: LD_INT 0
31665: PUSH
31666: LD_INT 1
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: PUSH
31673: LD_INT 1
31675: NEG
31676: PUSH
31677: LD_INT 0
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: LD_INT 1
31686: NEG
31687: PUSH
31688: LD_INT 1
31690: NEG
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31705: LD_ADDR_VAR 0 60
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 1
31725: NEG
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 1
31733: PUSH
31734: LD_INT 0
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 1
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 0
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 1
31763: NEG
31764: PUSH
31765: LD_INT 0
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 1
31774: NEG
31775: PUSH
31776: LD_INT 1
31778: NEG
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31793: LD_ADDR_VAR 0 61
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 0
31810: PUSH
31811: LD_INT 1
31813: NEG
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: PUSH
31832: LD_INT 1
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 0
31841: PUSH
31842: LD_INT 1
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: PUSH
31849: LD_INT 1
31851: NEG
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 1
31862: NEG
31863: PUSH
31864: LD_INT 1
31866: NEG
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31881: LD_ADDR_VAR 0 62
31885: PUSH
31886: LD_INT 0
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 0
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 0
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 1
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 1
31939: NEG
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31969: LD_ADDR_VAR 0 63
31973: PUSH
31974: LD_INT 0
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 0
31986: PUSH
31987: LD_INT 1
31989: NEG
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 1
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: PUSH
32008: LD_INT 1
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 0
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 1
32027: NEG
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: LD_INT 1
32042: NEG
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32057: LD_ADDR_VAR 0 64
32061: PUSH
32062: LD_INT 0
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 0
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 0
32105: PUSH
32106: LD_INT 1
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: NEG
32127: PUSH
32128: LD_INT 1
32130: NEG
32131: PUSH
32132: EMPTY
32133: LIST
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: ST_TO_ADDR
// end ; 1 :
32145: GO 38042
32147: LD_INT 1
32149: DOUBLE
32150: EQUAL
32151: IFTRUE 32155
32153: GO 34778
32155: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32156: LD_ADDR_VAR 0 11
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: LD_INT 3
32167: NEG
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 0
32175: PUSH
32176: LD_INT 3
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: PUSH
32187: LD_INT 2
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: EMPTY
32196: LIST
32197: LIST
32198: LIST
32199: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32200: LD_ADDR_VAR 0 12
32204: PUSH
32205: LD_INT 2
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 3
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32241: LD_ADDR_VAR 0 13
32245: PUSH
32246: LD_INT 3
32248: PUSH
32249: LD_INT 2
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: LD_INT 3
32258: PUSH
32259: LD_INT 3
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32281: LD_ADDR_VAR 0 14
32285: PUSH
32286: LD_INT 1
32288: PUSH
32289: LD_INT 3
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 0
32298: PUSH
32299: LD_INT 3
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 1
32308: NEG
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32322: LD_ADDR_VAR 0 15
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: LD_INT 1
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 3
32340: NEG
32341: PUSH
32342: LD_INT 0
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 3
32351: NEG
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: LIST
32365: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32366: LD_ADDR_VAR 0 16
32370: PUSH
32371: LD_INT 2
32373: NEG
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: PUSH
32383: LD_INT 3
32385: NEG
32386: PUSH
32387: LD_INT 2
32389: NEG
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 3
32397: NEG
32398: PUSH
32399: LD_INT 3
32401: NEG
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32412: LD_ADDR_VAR 0 17
32416: PUSH
32417: LD_INT 1
32419: NEG
32420: PUSH
32421: LD_INT 3
32423: NEG
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: LD_INT 3
32434: NEG
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 1
32442: PUSH
32443: LD_INT 2
32445: NEG
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32456: LD_ADDR_VAR 0 18
32460: PUSH
32461: LD_INT 2
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: LIST
32496: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32497: LD_ADDR_VAR 0 19
32501: PUSH
32502: LD_INT 3
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: LD_INT 3
32514: PUSH
32515: LD_INT 3
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: LD_INT 3
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: LIST
32536: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32537: LD_ADDR_VAR 0 20
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: LD_INT 3
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: LD_INT 3
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: NEG
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32578: LD_ADDR_VAR 0 21
32582: PUSH
32583: LD_INT 2
32585: NEG
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 3
32596: NEG
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 3
32607: NEG
32608: PUSH
32609: LD_INT 1
32611: NEG
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32622: LD_ADDR_VAR 0 22
32626: PUSH
32627: LD_INT 2
32629: NEG
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: PUSH
32639: LD_INT 3
32641: NEG
32642: PUSH
32643: LD_INT 2
32645: NEG
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 3
32653: NEG
32654: PUSH
32655: LD_INT 3
32657: NEG
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: LIST
32667: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
32668: LD_ADDR_VAR 0 23
32672: PUSH
32673: LD_INT 0
32675: PUSH
32676: LD_INT 3
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: LD_INT 4
32690: NEG
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 1
32698: PUSH
32699: LD_INT 3
32701: NEG
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: EMPTY
32708: LIST
32709: LIST
32710: LIST
32711: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
32712: LD_ADDR_VAR 0 24
32716: PUSH
32717: LD_INT 3
32719: PUSH
32720: LD_INT 0
32722: PUSH
32723: EMPTY
32724: LIST
32725: LIST
32726: PUSH
32727: LD_INT 3
32729: PUSH
32730: LD_INT 1
32732: NEG
32733: PUSH
32734: EMPTY
32735: LIST
32736: LIST
32737: PUSH
32738: LD_INT 4
32740: PUSH
32741: LD_INT 1
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32753: LD_ADDR_VAR 0 25
32757: PUSH
32758: LD_INT 3
32760: PUSH
32761: LD_INT 3
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 4
32770: PUSH
32771: LD_INT 3
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 3
32780: PUSH
32781: LD_INT 4
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: LIST
32792: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32793: LD_ADDR_VAR 0 26
32797: PUSH
32798: LD_INT 0
32800: PUSH
32801: LD_INT 3
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: LD_INT 4
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 3
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: EMPTY
32830: LIST
32831: LIST
32832: LIST
32833: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
32834: LD_ADDR_VAR 0 27
32838: PUSH
32839: LD_INT 3
32841: NEG
32842: PUSH
32843: LD_INT 0
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 3
32852: NEG
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 4
32863: NEG
32864: PUSH
32865: LD_INT 1
32867: NEG
32868: PUSH
32869: EMPTY
32870: LIST
32871: LIST
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: LIST
32877: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
32878: LD_ADDR_VAR 0 28
32882: PUSH
32883: LD_INT 3
32885: NEG
32886: PUSH
32887: LD_INT 3
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 3
32897: NEG
32898: PUSH
32899: LD_INT 4
32901: NEG
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PUSH
32907: LD_INT 4
32909: NEG
32910: PUSH
32911: LD_INT 3
32913: NEG
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
32924: LD_ADDR_VAR 0 29
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 3
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 0
32943: PUSH
32944: LD_INT 3
32946: NEG
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: PUSH
32955: LD_INT 2
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: LD_INT 4
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 4
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 3
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 1
32999: NEG
33000: PUSH
33001: LD_INT 5
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 5
33014: NEG
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 1
33022: PUSH
33023: LD_INT 4
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 1
33033: NEG
33034: PUSH
33035: LD_INT 6
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 0
33045: PUSH
33046: LD_INT 6
33048: NEG
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: PUSH
33054: LD_INT 1
33056: PUSH
33057: LD_INT 5
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33079: LD_ADDR_VAR 0 30
33083: PUSH
33084: LD_INT 2
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: LD_INT 0
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 3
33107: PUSH
33108: LD_INT 1
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: PUSH
33118: LD_INT 1
33120: NEG
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: LD_INT 0
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 4
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: LD_INT 4
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: LD_INT 0
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 5
33169: PUSH
33170: LD_INT 1
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 5
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 6
33190: PUSH
33191: LD_INT 0
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 6
33200: PUSH
33201: LD_INT 1
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: LIST
33214: LIST
33215: LIST
33216: LIST
33217: LIST
33218: LIST
33219: LIST
33220: LIST
33221: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33222: LD_ADDR_VAR 0 31
33226: PUSH
33227: LD_INT 3
33229: PUSH
33230: LD_INT 2
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 3
33239: PUSH
33240: LD_INT 3
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 2
33249: PUSH
33250: LD_INT 3
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 4
33259: PUSH
33260: LD_INT 3
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 4
33269: PUSH
33270: LD_INT 4
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 3
33279: PUSH
33280: LD_INT 4
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 5
33289: PUSH
33290: LD_INT 4
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 5
33299: PUSH
33300: LD_INT 5
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 4
33309: PUSH
33310: LD_INT 5
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 6
33319: PUSH
33320: LD_INT 5
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 6
33329: PUSH
33330: LD_INT 6
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: LD_INT 5
33339: PUSH
33340: LD_INT 6
33342: PUSH
33343: EMPTY
33344: LIST
33345: LIST
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33361: LD_ADDR_VAR 0 32
33365: PUSH
33366: LD_INT 1
33368: PUSH
33369: LD_INT 3
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 0
33378: PUSH
33379: LD_INT 3
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: NEG
33389: PUSH
33390: LD_INT 2
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: LD_INT 4
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 0
33409: PUSH
33410: LD_INT 4
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 1
33419: NEG
33420: PUSH
33421: LD_INT 3
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: PUSH
33431: LD_INT 5
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 0
33440: PUSH
33441: LD_INT 5
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: NEG
33451: PUSH
33452: LD_INT 4
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: LD_INT 6
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: LD_INT 6
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33504: LD_ADDR_VAR 0 33
33508: PUSH
33509: LD_INT 2
33511: NEG
33512: PUSH
33513: LD_INT 1
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 3
33522: NEG
33523: PUSH
33524: LD_INT 0
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: LD_INT 1
33537: NEG
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 3
33545: NEG
33546: PUSH
33547: LD_INT 1
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 4
33556: NEG
33557: PUSH
33558: LD_INT 0
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: LD_INT 4
33567: NEG
33568: PUSH
33569: LD_INT 1
33571: NEG
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 4
33579: NEG
33580: PUSH
33581: LD_INT 1
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 5
33590: NEG
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 5
33601: NEG
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 5
33613: NEG
33614: PUSH
33615: LD_INT 1
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 6
33624: NEG
33625: PUSH
33626: LD_INT 0
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 6
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
33659: LD_ADDR_VAR 0 34
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 3
33678: NEG
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 3
33690: NEG
33691: PUSH
33692: LD_INT 3
33694: NEG
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 3
33702: NEG
33703: PUSH
33704: LD_INT 4
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 4
33714: NEG
33715: PUSH
33716: LD_INT 3
33718: NEG
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 4
33726: NEG
33727: PUSH
33728: LD_INT 4
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 4
33738: NEG
33739: PUSH
33740: LD_INT 5
33742: NEG
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 5
33750: NEG
33751: PUSH
33752: LD_INT 4
33754: NEG
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 5
33762: NEG
33763: PUSH
33764: LD_INT 5
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 5
33774: NEG
33775: PUSH
33776: LD_INT 6
33778: NEG
33779: PUSH
33780: EMPTY
33781: LIST
33782: LIST
33783: PUSH
33784: LD_INT 6
33786: NEG
33787: PUSH
33788: LD_INT 5
33790: NEG
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: PUSH
33796: LD_INT 6
33798: NEG
33799: PUSH
33800: LD_INT 6
33802: NEG
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
33822: LD_ADDR_VAR 0 41
33826: PUSH
33827: LD_INT 0
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: NEG
33841: PUSH
33842: LD_INT 3
33844: NEG
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 1
33852: PUSH
33853: LD_INT 2
33855: NEG
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
33866: LD_ADDR_VAR 0 42
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 3
33894: PUSH
33895: LD_INT 1
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
33907: LD_ADDR_VAR 0 43
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: LD_INT 2
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 3
33924: PUSH
33925: LD_INT 2
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 2
33934: PUSH
33935: LD_INT 3
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
33947: LD_ADDR_VAR 0 44
33951: PUSH
33952: LD_INT 0
33954: PUSH
33955: LD_INT 2
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 3
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: LD_INT 2
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33988: LD_ADDR_VAR 0 45
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: LD_INT 0
33999: PUSH
34000: EMPTY
34001: LIST
34002: LIST
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 3
34017: NEG
34018: PUSH
34019: LD_INT 1
34021: NEG
34022: PUSH
34023: EMPTY
34024: LIST
34025: LIST
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34032: LD_ADDR_VAR 0 46
34036: PUSH
34037: LD_INT 2
34039: NEG
34040: PUSH
34041: LD_INT 2
34043: NEG
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 2
34051: NEG
34052: PUSH
34053: LD_INT 3
34055: NEG
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: LD_INT 3
34063: NEG
34064: PUSH
34065: LD_INT 2
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34078: LD_ADDR_VAR 0 47
34082: PUSH
34083: LD_INT 2
34085: NEG
34086: PUSH
34087: LD_INT 3
34089: NEG
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 1
34097: NEG
34098: PUSH
34099: LD_INT 3
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34111: LD_ADDR_VAR 0 48
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 2
34129: PUSH
34130: LD_INT 1
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34142: LD_ADDR_VAR 0 49
34146: PUSH
34147: LD_INT 3
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 3
34159: PUSH
34160: LD_INT 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34171: LD_ADDR_VAR 0 50
34175: PUSH
34176: LD_INT 2
34178: PUSH
34179: LD_INT 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 1
34188: PUSH
34189: LD_INT 3
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34200: LD_ADDR_VAR 0 51
34204: PUSH
34205: LD_INT 1
34207: NEG
34208: PUSH
34209: LD_INT 2
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: PUSH
34216: LD_INT 2
34218: NEG
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34231: LD_ADDR_VAR 0 52
34235: PUSH
34236: LD_INT 3
34238: NEG
34239: PUSH
34240: LD_INT 1
34242: NEG
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: LD_INT 3
34250: NEG
34251: PUSH
34252: LD_INT 2
34254: NEG
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34264: LD_ADDR_VAR 0 53
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 3
34275: NEG
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: LD_INT 3
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: LD_INT 2
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: LIST
34307: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34308: LD_ADDR_VAR 0 54
34312: PUSH
34313: LD_INT 2
34315: PUSH
34316: LD_INT 1
34318: NEG
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34349: LD_ADDR_VAR 0 55
34353: PUSH
34354: LD_INT 3
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: LD_INT 3
34366: PUSH
34367: LD_INT 3
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 2
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: LIST
34388: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34389: LD_ADDR_VAR 0 56
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: LD_INT 2
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: LIST
34429: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34430: LD_ADDR_VAR 0 57
34434: PUSH
34435: LD_INT 2
34437: NEG
34438: PUSH
34439: LD_INT 1
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: NEG
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 3
34459: NEG
34460: PUSH
34461: LD_INT 1
34463: NEG
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34474: LD_ADDR_VAR 0 58
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: LD_INT 3
34485: NEG
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 3
34493: NEG
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 3
34505: NEG
34506: PUSH
34507: LD_INT 3
34509: NEG
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: LIST
34519: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34520: LD_ADDR_VAR 0 59
34524: PUSH
34525: LD_INT 1
34527: NEG
34528: PUSH
34529: LD_INT 2
34531: NEG
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: PUSH
34537: LD_INT 0
34539: PUSH
34540: LD_INT 2
34542: NEG
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 1
34553: NEG
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: LIST
34563: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34564: LD_ADDR_VAR 0 60
34568: PUSH
34569: LD_INT 1
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: LIST
34604: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34605: LD_ADDR_VAR 0 61
34609: PUSH
34610: LD_INT 2
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: PUSH
34623: LD_INT 2
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: LIST
34644: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34645: LD_ADDR_VAR 0 62
34649: PUSH
34650: LD_INT 1
34652: PUSH
34653: LD_INT 2
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 0
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: PUSH
34670: LD_INT 1
34672: NEG
34673: PUSH
34674: LD_INT 1
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: LIST
34685: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34686: LD_ADDR_VAR 0 63
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: PUSH
34702: LD_INT 2
34704: NEG
34705: PUSH
34706: LD_INT 0
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 2
34715: NEG
34716: PUSH
34717: LD_INT 1
34719: NEG
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: LIST
34729: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34730: LD_ADDR_VAR 0 64
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 1
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 2
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: LIST
34775: ST_TO_ADDR
// end ; 2 :
34776: GO 38042
34778: LD_INT 2
34780: DOUBLE
34781: EQUAL
34782: IFTRUE 34786
34784: GO 38041
34786: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34787: LD_ADDR_VAR 0 29
34791: PUSH
34792: LD_INT 4
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 4
34804: PUSH
34805: LD_INT 1
34807: NEG
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 5
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 5
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 4
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 3
34845: PUSH
34846: LD_INT 0
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 3
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 3
34866: PUSH
34867: LD_INT 2
34869: NEG
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 5
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 3
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 4
34907: PUSH
34908: LD_INT 3
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 4
34917: PUSH
34918: LD_INT 4
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 3
34927: PUSH
34928: LD_INT 4
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 2
34937: PUSH
34938: LD_INT 3
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 2
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 4
34957: PUSH
34958: LD_INT 2
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 0
34977: PUSH
34978: LD_INT 4
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 0
34987: PUSH
34988: LD_INT 3
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: PUSH
34998: LD_INT 4
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 5
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 5
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 4
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: NEG
35039: PUSH
35040: LD_INT 3
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: PUSH
35050: LD_INT 5
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 2
35059: NEG
35060: PUSH
35061: LD_INT 3
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: LD_INT 3
35070: NEG
35071: PUSH
35072: LD_INT 0
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 3
35081: NEG
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 2
35093: NEG
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 2
35104: NEG
35105: PUSH
35106: LD_INT 1
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: PUSH
35113: LD_INT 3
35115: NEG
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 4
35126: NEG
35127: PUSH
35128: LD_INT 0
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 4
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 4
35149: NEG
35150: PUSH
35151: LD_INT 2
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: NEG
35162: PUSH
35163: LD_INT 2
35165: PUSH
35166: EMPTY
35167: LIST
35168: LIST
35169: PUSH
35170: LD_INT 4
35172: NEG
35173: PUSH
35174: LD_INT 4
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 4
35184: NEG
35185: PUSH
35186: LD_INT 5
35188: NEG
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: PUSH
35194: LD_INT 3
35196: NEG
35197: PUSH
35198: LD_INT 4
35200: NEG
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: PUSH
35206: LD_INT 3
35208: NEG
35209: PUSH
35210: LD_INT 3
35212: NEG
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: LD_INT 4
35220: NEG
35221: PUSH
35222: LD_INT 3
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 5
35232: NEG
35233: PUSH
35234: LD_INT 4
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 5
35244: NEG
35245: PUSH
35246: LD_INT 5
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 3
35256: NEG
35257: PUSH
35258: LD_INT 5
35260: NEG
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: PUSH
35266: LD_INT 5
35268: NEG
35269: PUSH
35270: LD_INT 3
35272: NEG
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: LIST
35308: LIST
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35325: LD_ADDR_VAR 0 30
35329: PUSH
35330: LD_INT 4
35332: PUSH
35333: LD_INT 4
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 4
35342: PUSH
35343: LD_INT 3
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 5
35352: PUSH
35353: LD_INT 4
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 5
35362: PUSH
35363: LD_INT 5
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 4
35372: PUSH
35373: LD_INT 5
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 3
35382: PUSH
35383: LD_INT 4
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: LD_INT 3
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 5
35402: PUSH
35403: LD_INT 3
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: LD_INT 5
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 0
35422: PUSH
35423: LD_INT 3
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 0
35432: PUSH
35433: LD_INT 2
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 1
35442: PUSH
35443: LD_INT 3
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 4
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 0
35462: PUSH
35463: LD_INT 4
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: LD_INT 3
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: LD_INT 1
35483: NEG
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: LD_INT 4
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 4
35515: NEG
35516: PUSH
35517: LD_INT 0
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 4
35526: NEG
35527: PUSH
35528: LD_INT 1
35530: NEG
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 3
35538: NEG
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 3
35549: NEG
35550: PUSH
35551: LD_INT 1
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 4
35560: NEG
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 5
35571: NEG
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 5
35582: NEG
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 5
35594: NEG
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 3
35606: NEG
35607: PUSH
35608: LD_INT 2
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 3
35617: NEG
35618: PUSH
35619: LD_INT 3
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 3
35629: NEG
35630: PUSH
35631: LD_INT 4
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 2
35641: NEG
35642: PUSH
35643: LD_INT 3
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: NEG
35654: PUSH
35655: LD_INT 2
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 3
35665: NEG
35666: PUSH
35667: LD_INT 2
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 4
35677: NEG
35678: PUSH
35679: LD_INT 3
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 4
35689: NEG
35690: PUSH
35691: LD_INT 4
35693: NEG
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: NEG
35702: PUSH
35703: LD_INT 4
35705: NEG
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 4
35713: NEG
35714: PUSH
35715: LD_INT 2
35717: NEG
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 0
35725: PUSH
35726: LD_INT 4
35728: NEG
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 5
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 4
35750: NEG
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 3
35761: NEG
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: LD_INT 3
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: LD_INT 4
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 5
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 3
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 2
35815: NEG
35816: PUSH
35817: LD_INT 5
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
35872: LD_ADDR_VAR 0 31
35876: PUSH
35877: LD_INT 0
35879: PUSH
35880: LD_INT 4
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 4
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: LD_INT 5
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: LD_INT 5
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: NEG
35930: PUSH
35931: LD_INT 4
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: NEG
35941: PUSH
35942: LD_INT 3
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: LD_INT 2
35951: PUSH
35952: LD_INT 5
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: LD_INT 3
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 3
35972: NEG
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 3
35983: NEG
35984: PUSH
35985: LD_INT 1
35987: NEG
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 2
35995: NEG
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 1
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 3
36017: NEG
36018: PUSH
36019: LD_INT 1
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 4
36028: NEG
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 4
36039: NEG
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 4
36051: NEG
36052: PUSH
36053: LD_INT 2
36055: NEG
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 2
36063: NEG
36064: PUSH
36065: LD_INT 2
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 4
36074: NEG
36075: PUSH
36076: LD_INT 4
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 4
36086: NEG
36087: PUSH
36088: LD_INT 5
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 3
36098: NEG
36099: PUSH
36100: LD_INT 4
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 3
36110: NEG
36111: PUSH
36112: LD_INT 3
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 4
36122: NEG
36123: PUSH
36124: LD_INT 3
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 5
36134: NEG
36135: PUSH
36136: LD_INT 4
36138: NEG
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 5
36146: NEG
36147: PUSH
36148: LD_INT 5
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 3
36158: NEG
36159: PUSH
36160: LD_INT 5
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 5
36170: NEG
36171: PUSH
36172: LD_INT 3
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 3
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 0
36193: PUSH
36194: LD_INT 4
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 1
36204: PUSH
36205: LD_INT 3
36207: NEG
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: LD_INT 2
36218: NEG
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 2
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: NEG
36238: PUSH
36239: LD_INT 3
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 4
36253: NEG
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 2
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: LD_INT 4
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 4
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 4
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 5
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 5
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 4
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 3
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 3
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 3
36356: PUSH
36357: LD_INT 2
36359: NEG
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 5
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36422: LD_ADDR_VAR 0 32
36426: PUSH
36427: LD_INT 4
36429: NEG
36430: PUSH
36431: LD_INT 0
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: LD_INT 4
36440: NEG
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 3
36452: NEG
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 3
36463: NEG
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 4
36474: NEG
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: PUSH
36483: LD_INT 5
36485: NEG
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 5
36496: NEG
36497: PUSH
36498: LD_INT 1
36500: NEG
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 5
36508: NEG
36509: PUSH
36510: LD_INT 2
36512: NEG
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 3
36520: NEG
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 3
36531: NEG
36532: PUSH
36533: LD_INT 3
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 3
36543: NEG
36544: PUSH
36545: LD_INT 4
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 2
36555: NEG
36556: PUSH
36557: LD_INT 3
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 2
36567: NEG
36568: PUSH
36569: LD_INT 2
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 3
36579: NEG
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 4
36591: NEG
36592: PUSH
36593: LD_INT 3
36595: NEG
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 4
36603: NEG
36604: PUSH
36605: LD_INT 4
36607: NEG
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: LD_INT 4
36619: NEG
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 4
36627: NEG
36628: PUSH
36629: LD_INT 2
36631: NEG
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PUSH
36637: LD_INT 0
36639: PUSH
36640: LD_INT 4
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: LD_INT 5
36653: NEG
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 4
36664: NEG
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 0
36683: PUSH
36684: LD_INT 3
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: LD_INT 4
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: NEG
36707: PUSH
36708: LD_INT 5
36710: NEG
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 2
36718: PUSH
36719: LD_INT 3
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: LD_INT 5
36733: NEG
36734: PUSH
36735: EMPTY
36736: LIST
36737: LIST
36738: PUSH
36739: LD_INT 3
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 3
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 4
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 4
36772: PUSH
36773: LD_INT 1
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 3
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: LD_INT 0
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: LD_INT 2
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 4
36824: PUSH
36825: LD_INT 2
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 4
36834: PUSH
36835: LD_INT 4
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 4
36844: PUSH
36845: LD_INT 3
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 5
36854: PUSH
36855: LD_INT 4
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 5
36864: PUSH
36865: LD_INT 5
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 4
36874: PUSH
36875: LD_INT 5
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: LD_INT 4
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: LD_INT 3
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 5
36904: PUSH
36905: LD_INT 3
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: LD_INT 5
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
36969: LD_ADDR_VAR 0 33
36973: PUSH
36974: LD_INT 4
36976: NEG
36977: PUSH
36978: LD_INT 4
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 4
36988: NEG
36989: PUSH
36990: LD_INT 5
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 3
37000: NEG
37001: PUSH
37002: LD_INT 4
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 3
37012: NEG
37013: PUSH
37014: LD_INT 3
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 4
37024: NEG
37025: PUSH
37026: LD_INT 3
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 5
37036: NEG
37037: PUSH
37038: LD_INT 4
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 5
37048: NEG
37049: PUSH
37050: LD_INT 5
37052: NEG
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 3
37060: NEG
37061: PUSH
37062: LD_INT 5
37064: NEG
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 5
37072: NEG
37073: PUSH
37074: LD_INT 3
37076: NEG
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PUSH
37082: LD_INT 0
37084: PUSH
37085: LD_INT 3
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: LD_INT 4
37098: NEG
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: PUSH
37107: LD_INT 3
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: LD_INT 2
37120: NEG
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: LD_INT 4
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: NEG
37175: PUSH
37176: LD_INT 4
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: LD_INT 4
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 4
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 5
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 5
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 4
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: LD_INT 0
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: LD_INT 2
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 5
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 3
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 4
37299: PUSH
37300: LD_INT 3
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 4
37309: PUSH
37310: LD_INT 4
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 3
37319: PUSH
37320: LD_INT 4
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 2
37329: PUSH
37330: LD_INT 3
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 2
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 4
37349: PUSH
37350: LD_INT 2
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: LD_INT 4
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 0
37369: PUSH
37370: LD_INT 4
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 3
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: PUSH
37390: LD_INT 4
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: LD_INT 5
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: LD_INT 5
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 1
37419: NEG
37420: PUSH
37421: LD_INT 4
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 1
37430: NEG
37431: PUSH
37432: LD_INT 3
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 2
37441: PUSH
37442: LD_INT 5
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: PUSH
37449: LD_INT 2
37451: NEG
37452: PUSH
37453: LD_INT 3
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37507: LD_ADDR_VAR 0 34
37511: PUSH
37512: LD_INT 0
37514: PUSH
37515: LD_INT 4
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 5
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: LD_INT 4
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: LD_INT 3
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: LD_INT 3
37561: NEG
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: NEG
37570: PUSH
37571: LD_INT 4
37573: NEG
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 1
37581: NEG
37582: PUSH
37583: LD_INT 5
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 2
37604: NEG
37605: PUSH
37606: LD_INT 5
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 3
37616: PUSH
37617: LD_INT 0
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 3
37626: PUSH
37627: LD_INT 1
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 4
37637: PUSH
37638: LD_INT 0
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 4
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 3
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 2
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: EMPTY
37672: LIST
37673: LIST
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: PUSH
37686: LD_INT 2
37688: PUSH
37689: LD_INT 2
37691: NEG
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 4
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 4
37709: PUSH
37710: LD_INT 4
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 4
37719: PUSH
37720: LD_INT 3
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 5
37729: PUSH
37730: LD_INT 4
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 5
37739: PUSH
37740: LD_INT 5
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 4
37749: PUSH
37750: LD_INT 5
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: LD_INT 4
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: LD_INT 3
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 5
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 3
37789: PUSH
37790: LD_INT 5
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 0
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 3
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: LD_INT 4
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: LD_INT 4
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 3
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: LD_INT 4
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 2
37881: NEG
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 4
37892: NEG
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 4
37903: NEG
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 3
37915: NEG
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: LD_INT 1
37930: PUSH
37931: EMPTY
37932: LIST
37933: LIST
37934: PUSH
37935: LD_INT 4
37937: NEG
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 5
37948: NEG
37949: PUSH
37950: LD_INT 0
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 5
37959: NEG
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 5
37971: NEG
37972: PUSH
37973: LD_INT 2
37975: NEG
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 3
37983: NEG
37984: PUSH
37985: LD_INT 2
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: LIST
38034: LIST
38035: LIST
38036: LIST
38037: LIST
38038: ST_TO_ADDR
// end ; end ;
38039: GO 38042
38041: POP
// case btype of b_depot , b_warehouse :
38042: LD_VAR 0 1
38046: PUSH
38047: LD_INT 0
38049: DOUBLE
38050: EQUAL
38051: IFTRUE 38061
38053: LD_INT 1
38055: DOUBLE
38056: EQUAL
38057: IFTRUE 38061
38059: GO 38262
38061: POP
// case nation of nation_american :
38062: LD_VAR 0 5
38066: PUSH
38067: LD_INT 1
38069: DOUBLE
38070: EQUAL
38071: IFTRUE 38075
38073: GO 38131
38075: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38076: LD_ADDR_VAR 0 9
38080: PUSH
38081: LD_VAR 0 11
38085: PUSH
38086: LD_VAR 0 12
38090: PUSH
38091: LD_VAR 0 13
38095: PUSH
38096: LD_VAR 0 14
38100: PUSH
38101: LD_VAR 0 15
38105: PUSH
38106: LD_VAR 0 16
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: PUSH
38119: LD_VAR 0 4
38123: PUSH
38124: LD_INT 1
38126: PLUS
38127: ARRAY
38128: ST_TO_ADDR
38129: GO 38260
38131: LD_INT 2
38133: DOUBLE
38134: EQUAL
38135: IFTRUE 38139
38137: GO 38195
38139: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38140: LD_ADDR_VAR 0 9
38144: PUSH
38145: LD_VAR 0 17
38149: PUSH
38150: LD_VAR 0 18
38154: PUSH
38155: LD_VAR 0 19
38159: PUSH
38160: LD_VAR 0 20
38164: PUSH
38165: LD_VAR 0 21
38169: PUSH
38170: LD_VAR 0 22
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: PUSH
38183: LD_VAR 0 4
38187: PUSH
38188: LD_INT 1
38190: PLUS
38191: ARRAY
38192: ST_TO_ADDR
38193: GO 38260
38195: LD_INT 3
38197: DOUBLE
38198: EQUAL
38199: IFTRUE 38203
38201: GO 38259
38203: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38204: LD_ADDR_VAR 0 9
38208: PUSH
38209: LD_VAR 0 23
38213: PUSH
38214: LD_VAR 0 24
38218: PUSH
38219: LD_VAR 0 25
38223: PUSH
38224: LD_VAR 0 26
38228: PUSH
38229: LD_VAR 0 27
38233: PUSH
38234: LD_VAR 0 28
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: PUSH
38247: LD_VAR 0 4
38251: PUSH
38252: LD_INT 1
38254: PLUS
38255: ARRAY
38256: ST_TO_ADDR
38257: GO 38260
38259: POP
38260: GO 38815
38262: LD_INT 2
38264: DOUBLE
38265: EQUAL
38266: IFTRUE 38276
38268: LD_INT 3
38270: DOUBLE
38271: EQUAL
38272: IFTRUE 38276
38274: GO 38332
38276: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38277: LD_ADDR_VAR 0 9
38281: PUSH
38282: LD_VAR 0 29
38286: PUSH
38287: LD_VAR 0 30
38291: PUSH
38292: LD_VAR 0 31
38296: PUSH
38297: LD_VAR 0 32
38301: PUSH
38302: LD_VAR 0 33
38306: PUSH
38307: LD_VAR 0 34
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: PUSH
38320: LD_VAR 0 4
38324: PUSH
38325: LD_INT 1
38327: PLUS
38328: ARRAY
38329: ST_TO_ADDR
38330: GO 38815
38332: LD_INT 16
38334: DOUBLE
38335: EQUAL
38336: IFTRUE 38394
38338: LD_INT 17
38340: DOUBLE
38341: EQUAL
38342: IFTRUE 38394
38344: LD_INT 18
38346: DOUBLE
38347: EQUAL
38348: IFTRUE 38394
38350: LD_INT 19
38352: DOUBLE
38353: EQUAL
38354: IFTRUE 38394
38356: LD_INT 22
38358: DOUBLE
38359: EQUAL
38360: IFTRUE 38394
38362: LD_INT 20
38364: DOUBLE
38365: EQUAL
38366: IFTRUE 38394
38368: LD_INT 21
38370: DOUBLE
38371: EQUAL
38372: IFTRUE 38394
38374: LD_INT 23
38376: DOUBLE
38377: EQUAL
38378: IFTRUE 38394
38380: LD_INT 24
38382: DOUBLE
38383: EQUAL
38384: IFTRUE 38394
38386: LD_INT 25
38388: DOUBLE
38389: EQUAL
38390: IFTRUE 38394
38392: GO 38450
38394: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38395: LD_ADDR_VAR 0 9
38399: PUSH
38400: LD_VAR 0 35
38404: PUSH
38405: LD_VAR 0 36
38409: PUSH
38410: LD_VAR 0 37
38414: PUSH
38415: LD_VAR 0 38
38419: PUSH
38420: LD_VAR 0 39
38424: PUSH
38425: LD_VAR 0 40
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: PUSH
38438: LD_VAR 0 4
38442: PUSH
38443: LD_INT 1
38445: PLUS
38446: ARRAY
38447: ST_TO_ADDR
38448: GO 38815
38450: LD_INT 6
38452: DOUBLE
38453: EQUAL
38454: IFTRUE 38506
38456: LD_INT 7
38458: DOUBLE
38459: EQUAL
38460: IFTRUE 38506
38462: LD_INT 8
38464: DOUBLE
38465: EQUAL
38466: IFTRUE 38506
38468: LD_INT 13
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38506
38474: LD_INT 12
38476: DOUBLE
38477: EQUAL
38478: IFTRUE 38506
38480: LD_INT 15
38482: DOUBLE
38483: EQUAL
38484: IFTRUE 38506
38486: LD_INT 11
38488: DOUBLE
38489: EQUAL
38490: IFTRUE 38506
38492: LD_INT 14
38494: DOUBLE
38495: EQUAL
38496: IFTRUE 38506
38498: LD_INT 10
38500: DOUBLE
38501: EQUAL
38502: IFTRUE 38506
38504: GO 38562
38506: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38507: LD_ADDR_VAR 0 9
38511: PUSH
38512: LD_VAR 0 41
38516: PUSH
38517: LD_VAR 0 42
38521: PUSH
38522: LD_VAR 0 43
38526: PUSH
38527: LD_VAR 0 44
38531: PUSH
38532: LD_VAR 0 45
38536: PUSH
38537: LD_VAR 0 46
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: PUSH
38550: LD_VAR 0 4
38554: PUSH
38555: LD_INT 1
38557: PLUS
38558: ARRAY
38559: ST_TO_ADDR
38560: GO 38815
38562: LD_INT 36
38564: DOUBLE
38565: EQUAL
38566: IFTRUE 38570
38568: GO 38626
38570: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_VAR 0 47
38580: PUSH
38581: LD_VAR 0 48
38585: PUSH
38586: LD_VAR 0 49
38590: PUSH
38591: LD_VAR 0 50
38595: PUSH
38596: LD_VAR 0 51
38600: PUSH
38601: LD_VAR 0 52
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: PUSH
38614: LD_VAR 0 4
38618: PUSH
38619: LD_INT 1
38621: PLUS
38622: ARRAY
38623: ST_TO_ADDR
38624: GO 38815
38626: LD_INT 4
38628: DOUBLE
38629: EQUAL
38630: IFTRUE 38652
38632: LD_INT 5
38634: DOUBLE
38635: EQUAL
38636: IFTRUE 38652
38638: LD_INT 34
38640: DOUBLE
38641: EQUAL
38642: IFTRUE 38652
38644: LD_INT 37
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38708
38652: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
38653: LD_ADDR_VAR 0 9
38657: PUSH
38658: LD_VAR 0 53
38662: PUSH
38663: LD_VAR 0 54
38667: PUSH
38668: LD_VAR 0 55
38672: PUSH
38673: LD_VAR 0 56
38677: PUSH
38678: LD_VAR 0 57
38682: PUSH
38683: LD_VAR 0 58
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: PUSH
38696: LD_VAR 0 4
38700: PUSH
38701: LD_INT 1
38703: PLUS
38704: ARRAY
38705: ST_TO_ADDR
38706: GO 38815
38708: LD_INT 31
38710: DOUBLE
38711: EQUAL
38712: IFTRUE 38758
38714: LD_INT 32
38716: DOUBLE
38717: EQUAL
38718: IFTRUE 38758
38720: LD_INT 33
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38758
38726: LD_INT 27
38728: DOUBLE
38729: EQUAL
38730: IFTRUE 38758
38732: LD_INT 26
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38758
38738: LD_INT 28
38740: DOUBLE
38741: EQUAL
38742: IFTRUE 38758
38744: LD_INT 29
38746: DOUBLE
38747: EQUAL
38748: IFTRUE 38758
38750: LD_INT 30
38752: DOUBLE
38753: EQUAL
38754: IFTRUE 38758
38756: GO 38814
38758: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38759: LD_ADDR_VAR 0 9
38763: PUSH
38764: LD_VAR 0 59
38768: PUSH
38769: LD_VAR 0 60
38773: PUSH
38774: LD_VAR 0 61
38778: PUSH
38779: LD_VAR 0 62
38783: PUSH
38784: LD_VAR 0 63
38788: PUSH
38789: LD_VAR 0 64
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: PUSH
38802: LD_VAR 0 4
38806: PUSH
38807: LD_INT 1
38809: PLUS
38810: ARRAY
38811: ST_TO_ADDR
38812: GO 38815
38814: POP
// temp_list2 = [ ] ;
38815: LD_ADDR_VAR 0 10
38819: PUSH
38820: EMPTY
38821: ST_TO_ADDR
// for i in temp_list do
38822: LD_ADDR_VAR 0 8
38826: PUSH
38827: LD_VAR 0 9
38831: PUSH
38832: FOR_IN
38833: IFFALSE 38885
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
38835: LD_ADDR_VAR 0 10
38839: PUSH
38840: LD_VAR 0 10
38844: PUSH
38845: LD_VAR 0 8
38849: PUSH
38850: LD_INT 1
38852: ARRAY
38853: PUSH
38854: LD_VAR 0 2
38858: PLUS
38859: PUSH
38860: LD_VAR 0 8
38864: PUSH
38865: LD_INT 2
38867: ARRAY
38868: PUSH
38869: LD_VAR 0 3
38873: PLUS
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: EMPTY
38880: LIST
38881: ADD
38882: ST_TO_ADDR
38883: GO 38832
38885: POP
38886: POP
// result = temp_list2 ;
38887: LD_ADDR_VAR 0 7
38891: PUSH
38892: LD_VAR 0 10
38896: ST_TO_ADDR
// end ;
38897: LD_VAR 0 7
38901: RET
// export function EnemyInRange ( unit , dist ) ; begin
38902: LD_INT 0
38904: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
38905: LD_ADDR_VAR 0 3
38909: PUSH
38910: LD_VAR 0 1
38914: PPUSH
38915: CALL_OW 255
38919: PPUSH
38920: LD_VAR 0 1
38924: PPUSH
38925: CALL_OW 250
38929: PPUSH
38930: LD_VAR 0 1
38934: PPUSH
38935: CALL_OW 251
38939: PPUSH
38940: LD_VAR 0 2
38944: PPUSH
38945: CALL 12275 0 4
38949: PUSH
38950: LD_INT 4
38952: ARRAY
38953: ST_TO_ADDR
// end ;
38954: LD_VAR 0 3
38958: RET
// export function PlayerSeeMe ( unit ) ; begin
38959: LD_INT 0
38961: PPUSH
// result := See ( your_side , unit ) ;
38962: LD_ADDR_VAR 0 2
38966: PUSH
38967: LD_OWVAR 2
38971: PPUSH
38972: LD_VAR 0 1
38976: PPUSH
38977: CALL_OW 292
38981: ST_TO_ADDR
// end ;
38982: LD_VAR 0 2
38986: RET
// export function ReverseDir ( unit ) ; begin
38987: LD_INT 0
38989: PPUSH
// if not unit then
38990: LD_VAR 0 1
38994: NOT
38995: IFFALSE 38999
// exit ;
38997: GO 39022
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
38999: LD_ADDR_VAR 0 2
39003: PUSH
39004: LD_VAR 0 1
39008: PPUSH
39009: CALL_OW 254
39013: PUSH
39014: LD_INT 3
39016: PLUS
39017: PUSH
39018: LD_INT 6
39020: MOD
39021: ST_TO_ADDR
// end ;
39022: LD_VAR 0 2
39026: RET
// export function ReverseArray ( array ) ; var i ; begin
39027: LD_INT 0
39029: PPUSH
39030: PPUSH
// if not array then
39031: LD_VAR 0 1
39035: NOT
39036: IFFALSE 39040
// exit ;
39038: GO 39095
// result := [ ] ;
39040: LD_ADDR_VAR 0 2
39044: PUSH
39045: EMPTY
39046: ST_TO_ADDR
// for i := array downto 1 do
39047: LD_ADDR_VAR 0 3
39051: PUSH
39052: DOUBLE
39053: LD_VAR 0 1
39057: INC
39058: ST_TO_ADDR
39059: LD_INT 1
39061: PUSH
39062: FOR_DOWNTO
39063: IFFALSE 39093
// result := Join ( result , array [ i ] ) ;
39065: LD_ADDR_VAR 0 2
39069: PUSH
39070: LD_VAR 0 2
39074: PPUSH
39075: LD_VAR 0 1
39079: PUSH
39080: LD_VAR 0 3
39084: ARRAY
39085: PPUSH
39086: CALL 43738 0 2
39090: ST_TO_ADDR
39091: GO 39062
39093: POP
39094: POP
// end ;
39095: LD_VAR 0 2
39099: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39100: LD_INT 0
39102: PPUSH
39103: PPUSH
39104: PPUSH
39105: PPUSH
39106: PPUSH
39107: PPUSH
// if not unit or not hexes then
39108: LD_VAR 0 1
39112: NOT
39113: PUSH
39114: LD_VAR 0 2
39118: NOT
39119: OR
39120: IFFALSE 39124
// exit ;
39122: GO 39247
// dist := 9999 ;
39124: LD_ADDR_VAR 0 5
39128: PUSH
39129: LD_INT 9999
39131: ST_TO_ADDR
// for i = 1 to hexes do
39132: LD_ADDR_VAR 0 4
39136: PUSH
39137: DOUBLE
39138: LD_INT 1
39140: DEC
39141: ST_TO_ADDR
39142: LD_VAR 0 2
39146: PUSH
39147: FOR_TO
39148: IFFALSE 39235
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39150: LD_ADDR_VAR 0 6
39154: PUSH
39155: LD_VAR 0 1
39159: PPUSH
39160: LD_VAR 0 2
39164: PUSH
39165: LD_VAR 0 4
39169: ARRAY
39170: PUSH
39171: LD_INT 1
39173: ARRAY
39174: PPUSH
39175: LD_VAR 0 2
39179: PUSH
39180: LD_VAR 0 4
39184: ARRAY
39185: PUSH
39186: LD_INT 2
39188: ARRAY
39189: PPUSH
39190: CALL_OW 297
39194: ST_TO_ADDR
// if tdist < dist then
39195: LD_VAR 0 6
39199: PUSH
39200: LD_VAR 0 5
39204: LESS
39205: IFFALSE 39233
// begin hex := hexes [ i ] ;
39207: LD_ADDR_VAR 0 8
39211: PUSH
39212: LD_VAR 0 2
39216: PUSH
39217: LD_VAR 0 4
39221: ARRAY
39222: ST_TO_ADDR
// dist := tdist ;
39223: LD_ADDR_VAR 0 5
39227: PUSH
39228: LD_VAR 0 6
39232: ST_TO_ADDR
// end ; end ;
39233: GO 39147
39235: POP
39236: POP
// result := hex ;
39237: LD_ADDR_VAR 0 3
39241: PUSH
39242: LD_VAR 0 8
39246: ST_TO_ADDR
// end ;
39247: LD_VAR 0 3
39251: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39252: LD_INT 0
39254: PPUSH
39255: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39256: LD_VAR 0 1
39260: NOT
39261: PUSH
39262: LD_VAR 0 1
39266: PUSH
39267: LD_INT 21
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PUSH
39277: LD_INT 23
39279: PUSH
39280: LD_INT 2
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PPUSH
39291: CALL_OW 69
39295: IN
39296: NOT
39297: OR
39298: IFFALSE 39302
// exit ;
39300: GO 39349
// for i = 1 to 3 do
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: DOUBLE
39308: LD_INT 1
39310: DEC
39311: ST_TO_ADDR
39312: LD_INT 3
39314: PUSH
39315: FOR_TO
39316: IFFALSE 39347
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 250
39327: PPUSH
39328: LD_VAR 0 1
39332: PPUSH
39333: CALL_OW 251
39337: PPUSH
39338: LD_INT 1
39340: PPUSH
39341: CALL_OW 453
39345: GO 39315
39347: POP
39348: POP
// end ;
39349: LD_VAR 0 2
39353: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39354: LD_INT 0
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
39360: PPUSH
39361: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39362: LD_VAR 0 1
39366: NOT
39367: PUSH
39368: LD_VAR 0 2
39372: NOT
39373: OR
39374: PUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 314
39384: OR
39385: IFFALSE 39389
// exit ;
39387: GO 39856
// if GetLives ( i ) < 250 then
39389: LD_VAR 0 4
39393: PPUSH
39394: CALL_OW 256
39398: PUSH
39399: LD_INT 250
39401: LESS
39402: IFFALSE 39415
// begin ComAutodestruct ( i ) ;
39404: LD_VAR 0 4
39408: PPUSH
39409: CALL 39252 0 1
// exit ;
39413: GO 39856
// end ; x := GetX ( enemy_unit ) ;
39415: LD_ADDR_VAR 0 7
39419: PUSH
39420: LD_VAR 0 2
39424: PPUSH
39425: CALL_OW 250
39429: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39430: LD_ADDR_VAR 0 8
39434: PUSH
39435: LD_VAR 0 2
39439: PPUSH
39440: CALL_OW 251
39444: ST_TO_ADDR
// if not x or not y then
39445: LD_VAR 0 7
39449: NOT
39450: PUSH
39451: LD_VAR 0 8
39455: NOT
39456: OR
39457: IFFALSE 39461
// exit ;
39459: GO 39856
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39461: LD_ADDR_VAR 0 6
39465: PUSH
39466: LD_VAR 0 7
39470: PPUSH
39471: LD_INT 0
39473: PPUSH
39474: LD_INT 4
39476: PPUSH
39477: CALL_OW 272
39481: PUSH
39482: LD_VAR 0 8
39486: PPUSH
39487: LD_INT 0
39489: PPUSH
39490: LD_INT 4
39492: PPUSH
39493: CALL_OW 273
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_VAR 0 7
39506: PPUSH
39507: LD_INT 1
39509: PPUSH
39510: LD_INT 4
39512: PPUSH
39513: CALL_OW 272
39517: PUSH
39518: LD_VAR 0 8
39522: PPUSH
39523: LD_INT 1
39525: PPUSH
39526: LD_INT 4
39528: PPUSH
39529: CALL_OW 273
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_VAR 0 7
39542: PPUSH
39543: LD_INT 2
39545: PPUSH
39546: LD_INT 4
39548: PPUSH
39549: CALL_OW 272
39553: PUSH
39554: LD_VAR 0 8
39558: PPUSH
39559: LD_INT 2
39561: PPUSH
39562: LD_INT 4
39564: PPUSH
39565: CALL_OW 273
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: LD_VAR 0 7
39578: PPUSH
39579: LD_INT 3
39581: PPUSH
39582: LD_INT 4
39584: PPUSH
39585: CALL_OW 272
39589: PUSH
39590: LD_VAR 0 8
39594: PPUSH
39595: LD_INT 3
39597: PPUSH
39598: LD_INT 4
39600: PPUSH
39601: CALL_OW 273
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_VAR 0 7
39614: PPUSH
39615: LD_INT 4
39617: PPUSH
39618: LD_INT 4
39620: PPUSH
39621: CALL_OW 272
39625: PUSH
39626: LD_VAR 0 8
39630: PPUSH
39631: LD_INT 4
39633: PPUSH
39634: LD_INT 4
39636: PPUSH
39637: CALL_OW 273
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_VAR 0 7
39650: PPUSH
39651: LD_INT 5
39653: PPUSH
39654: LD_INT 4
39656: PPUSH
39657: CALL_OW 272
39661: PUSH
39662: LD_VAR 0 8
39666: PPUSH
39667: LD_INT 5
39669: PPUSH
39670: LD_INT 4
39672: PPUSH
39673: CALL_OW 273
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: ST_TO_ADDR
// for i = tmp downto 1 do
39690: LD_ADDR_VAR 0 4
39694: PUSH
39695: DOUBLE
39696: LD_VAR 0 6
39700: INC
39701: ST_TO_ADDR
39702: LD_INT 1
39704: PUSH
39705: FOR_DOWNTO
39706: IFFALSE 39807
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
39708: LD_VAR 0 6
39712: PUSH
39713: LD_VAR 0 4
39717: ARRAY
39718: PUSH
39719: LD_INT 1
39721: ARRAY
39722: PPUSH
39723: LD_VAR 0 6
39727: PUSH
39728: LD_VAR 0 4
39732: ARRAY
39733: PUSH
39734: LD_INT 2
39736: ARRAY
39737: PPUSH
39738: CALL_OW 488
39742: NOT
39743: PUSH
39744: LD_VAR 0 6
39748: PUSH
39749: LD_VAR 0 4
39753: ARRAY
39754: PUSH
39755: LD_INT 1
39757: ARRAY
39758: PPUSH
39759: LD_VAR 0 6
39763: PUSH
39764: LD_VAR 0 4
39768: ARRAY
39769: PUSH
39770: LD_INT 2
39772: ARRAY
39773: PPUSH
39774: CALL_OW 428
39778: PUSH
39779: LD_INT 0
39781: NONEQUAL
39782: OR
39783: IFFALSE 39805
// tmp := Delete ( tmp , i ) ;
39785: LD_ADDR_VAR 0 6
39789: PUSH
39790: LD_VAR 0 6
39794: PPUSH
39795: LD_VAR 0 4
39799: PPUSH
39800: CALL_OW 3
39804: ST_TO_ADDR
39805: GO 39705
39807: POP
39808: POP
// j := GetClosestHex ( unit , tmp ) ;
39809: LD_ADDR_VAR 0 5
39813: PUSH
39814: LD_VAR 0 1
39818: PPUSH
39819: LD_VAR 0 6
39823: PPUSH
39824: CALL 39100 0 2
39828: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39829: LD_VAR 0 1
39833: PPUSH
39834: LD_VAR 0 5
39838: PUSH
39839: LD_INT 1
39841: ARRAY
39842: PPUSH
39843: LD_VAR 0 5
39847: PUSH
39848: LD_INT 2
39850: ARRAY
39851: PPUSH
39852: CALL_OW 111
// end ;
39856: LD_VAR 0 3
39860: RET
// export function PrepareApemanSoldier ( ) ; begin
39861: LD_INT 0
39863: PPUSH
// uc_nation := 0 ;
39864: LD_ADDR_OWVAR 21
39868: PUSH
39869: LD_INT 0
39871: ST_TO_ADDR
// hc_sex := sex_male ;
39872: LD_ADDR_OWVAR 27
39876: PUSH
39877: LD_INT 1
39879: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
39880: LD_ADDR_OWVAR 28
39884: PUSH
39885: LD_INT 15
39887: ST_TO_ADDR
// hc_gallery :=  ;
39888: LD_ADDR_OWVAR 33
39892: PUSH
39893: LD_STRING 
39895: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39896: LD_ADDR_OWVAR 31
39900: PUSH
39901: LD_INT 0
39903: PPUSH
39904: LD_INT 3
39906: PPUSH
39907: CALL_OW 12
39911: PUSH
39912: LD_INT 0
39914: PPUSH
39915: LD_INT 3
39917: PPUSH
39918: CALL_OW 12
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: ST_TO_ADDR
// end ;
39935: LD_VAR 0 1
39939: RET
// export function PrepareApemanEngineer ( ) ; begin
39940: LD_INT 0
39942: PPUSH
// uc_nation := 0 ;
39943: LD_ADDR_OWVAR 21
39947: PUSH
39948: LD_INT 0
39950: ST_TO_ADDR
// hc_sex := sex_male ;
39951: LD_ADDR_OWVAR 27
39955: PUSH
39956: LD_INT 1
39958: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
39959: LD_ADDR_OWVAR 28
39963: PUSH
39964: LD_INT 16
39966: ST_TO_ADDR
// hc_gallery :=  ;
39967: LD_ADDR_OWVAR 33
39971: PUSH
39972: LD_STRING 
39974: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39975: LD_ADDR_OWVAR 31
39979: PUSH
39980: LD_INT 0
39982: PPUSH
39983: LD_INT 3
39985: PPUSH
39986: CALL_OW 12
39990: PUSH
39991: LD_INT 0
39993: PPUSH
39994: LD_INT 3
39996: PPUSH
39997: CALL_OW 12
40001: PUSH
40002: LD_INT 0
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: ST_TO_ADDR
// end ;
40014: LD_VAR 0 1
40018: RET
// export function PrepareApeman ( agressivity ) ; begin
40019: LD_INT 0
40021: PPUSH
// uc_side := 0 ;
40022: LD_ADDR_OWVAR 20
40026: PUSH
40027: LD_INT 0
40029: ST_TO_ADDR
// uc_nation := 0 ;
40030: LD_ADDR_OWVAR 21
40034: PUSH
40035: LD_INT 0
40037: ST_TO_ADDR
// hc_sex := sex_male ;
40038: LD_ADDR_OWVAR 27
40042: PUSH
40043: LD_INT 1
40045: ST_TO_ADDR
// hc_class := class_apeman ;
40046: LD_ADDR_OWVAR 28
40050: PUSH
40051: LD_INT 12
40053: ST_TO_ADDR
// hc_gallery :=  ;
40054: LD_ADDR_OWVAR 33
40058: PUSH
40059: LD_STRING 
40061: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40062: LD_ADDR_OWVAR 35
40066: PUSH
40067: LD_VAR 0 1
40071: NEG
40072: PPUSH
40073: LD_VAR 0 1
40077: PPUSH
40078: CALL_OW 12
40082: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40083: LD_ADDR_OWVAR 31
40087: PUSH
40088: LD_INT 0
40090: PPUSH
40091: LD_INT 3
40093: PPUSH
40094: CALL_OW 12
40098: PUSH
40099: LD_INT 0
40101: PPUSH
40102: LD_INT 3
40104: PPUSH
40105: CALL_OW 12
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: ST_TO_ADDR
// end ;
40122: LD_VAR 0 2
40126: RET
// export function PrepareTiger ( agressivity ) ; begin
40127: LD_INT 0
40129: PPUSH
// uc_side := 0 ;
40130: LD_ADDR_OWVAR 20
40134: PUSH
40135: LD_INT 0
40137: ST_TO_ADDR
// uc_nation := 0 ;
40138: LD_ADDR_OWVAR 21
40142: PUSH
40143: LD_INT 0
40145: ST_TO_ADDR
// hc_class := class_tiger ;
40146: LD_ADDR_OWVAR 28
40150: PUSH
40151: LD_INT 14
40153: ST_TO_ADDR
// hc_gallery :=  ;
40154: LD_ADDR_OWVAR 33
40158: PUSH
40159: LD_STRING 
40161: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40162: LD_ADDR_OWVAR 35
40166: PUSH
40167: LD_VAR 0 1
40171: NEG
40172: PPUSH
40173: LD_VAR 0 1
40177: PPUSH
40178: CALL_OW 12
40182: ST_TO_ADDR
// end ;
40183: LD_VAR 0 2
40187: RET
// export function PrepareEnchidna ( ) ; begin
40188: LD_INT 0
40190: PPUSH
// uc_side := 0 ;
40191: LD_ADDR_OWVAR 20
40195: PUSH
40196: LD_INT 0
40198: ST_TO_ADDR
// uc_nation := 0 ;
40199: LD_ADDR_OWVAR 21
40203: PUSH
40204: LD_INT 0
40206: ST_TO_ADDR
// hc_class := class_baggie ;
40207: LD_ADDR_OWVAR 28
40211: PUSH
40212: LD_INT 13
40214: ST_TO_ADDR
// hc_gallery :=  ;
40215: LD_ADDR_OWVAR 33
40219: PUSH
40220: LD_STRING 
40222: ST_TO_ADDR
// end ;
40223: LD_VAR 0 1
40227: RET
// export function PrepareFrog ( ) ; begin
40228: LD_INT 0
40230: PPUSH
// uc_side := 0 ;
40231: LD_ADDR_OWVAR 20
40235: PUSH
40236: LD_INT 0
40238: ST_TO_ADDR
// uc_nation := 0 ;
40239: LD_ADDR_OWVAR 21
40243: PUSH
40244: LD_INT 0
40246: ST_TO_ADDR
// hc_class := class_frog ;
40247: LD_ADDR_OWVAR 28
40251: PUSH
40252: LD_INT 19
40254: ST_TO_ADDR
// hc_gallery :=  ;
40255: LD_ADDR_OWVAR 33
40259: PUSH
40260: LD_STRING 
40262: ST_TO_ADDR
// end ;
40263: LD_VAR 0 1
40267: RET
// export function PrepareFish ( ) ; begin
40268: LD_INT 0
40270: PPUSH
// uc_side := 0 ;
40271: LD_ADDR_OWVAR 20
40275: PUSH
40276: LD_INT 0
40278: ST_TO_ADDR
// uc_nation := 0 ;
40279: LD_ADDR_OWVAR 21
40283: PUSH
40284: LD_INT 0
40286: ST_TO_ADDR
// hc_class := class_fish ;
40287: LD_ADDR_OWVAR 28
40291: PUSH
40292: LD_INT 20
40294: ST_TO_ADDR
// hc_gallery :=  ;
40295: LD_ADDR_OWVAR 33
40299: PUSH
40300: LD_STRING 
40302: ST_TO_ADDR
// end ;
40303: LD_VAR 0 1
40307: RET
// export function PrepareBird ( ) ; begin
40308: LD_INT 0
40310: PPUSH
// uc_side := 0 ;
40311: LD_ADDR_OWVAR 20
40315: PUSH
40316: LD_INT 0
40318: ST_TO_ADDR
// uc_nation := 0 ;
40319: LD_ADDR_OWVAR 21
40323: PUSH
40324: LD_INT 0
40326: ST_TO_ADDR
// hc_class := class_phororhacos ;
40327: LD_ADDR_OWVAR 28
40331: PUSH
40332: LD_INT 18
40334: ST_TO_ADDR
// hc_gallery :=  ;
40335: LD_ADDR_OWVAR 33
40339: PUSH
40340: LD_STRING 
40342: ST_TO_ADDR
// end ;
40343: LD_VAR 0 1
40347: RET
// export function PrepareHorse ( ) ; begin
40348: LD_INT 0
40350: PPUSH
// uc_side := 0 ;
40351: LD_ADDR_OWVAR 20
40355: PUSH
40356: LD_INT 0
40358: ST_TO_ADDR
// uc_nation := 0 ;
40359: LD_ADDR_OWVAR 21
40363: PUSH
40364: LD_INT 0
40366: ST_TO_ADDR
// hc_class := class_horse ;
40367: LD_ADDR_OWVAR 28
40371: PUSH
40372: LD_INT 21
40374: ST_TO_ADDR
// hc_gallery :=  ;
40375: LD_ADDR_OWVAR 33
40379: PUSH
40380: LD_STRING 
40382: ST_TO_ADDR
// end ;
40383: LD_VAR 0 1
40387: RET
// export function PrepareMastodont ( ) ; begin
40388: LD_INT 0
40390: PPUSH
// uc_side := 0 ;
40391: LD_ADDR_OWVAR 20
40395: PUSH
40396: LD_INT 0
40398: ST_TO_ADDR
// uc_nation := 0 ;
40399: LD_ADDR_OWVAR 21
40403: PUSH
40404: LD_INT 0
40406: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40407: LD_ADDR_OWVAR 37
40411: PUSH
40412: LD_INT 31
40414: ST_TO_ADDR
// vc_control := control_rider ;
40415: LD_ADDR_OWVAR 38
40419: PUSH
40420: LD_INT 4
40422: ST_TO_ADDR
// end ;
40423: LD_VAR 0 1
40427: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40428: LD_INT 0
40430: PPUSH
40431: PPUSH
40432: PPUSH
// uc_side = 0 ;
40433: LD_ADDR_OWVAR 20
40437: PUSH
40438: LD_INT 0
40440: ST_TO_ADDR
// uc_nation = 0 ;
40441: LD_ADDR_OWVAR 21
40445: PUSH
40446: LD_INT 0
40448: ST_TO_ADDR
// InitHc_All ( ) ;
40449: CALL_OW 584
// InitVc ;
40453: CALL_OW 20
// if mastodonts then
40457: LD_VAR 0 6
40461: IFFALSE 40528
// for i = 1 to mastodonts do
40463: LD_ADDR_VAR 0 11
40467: PUSH
40468: DOUBLE
40469: LD_INT 1
40471: DEC
40472: ST_TO_ADDR
40473: LD_VAR 0 6
40477: PUSH
40478: FOR_TO
40479: IFFALSE 40526
// begin vc_chassis := 31 ;
40481: LD_ADDR_OWVAR 37
40485: PUSH
40486: LD_INT 31
40488: ST_TO_ADDR
// vc_control := control_rider ;
40489: LD_ADDR_OWVAR 38
40493: PUSH
40494: LD_INT 4
40496: ST_TO_ADDR
// animal := CreateVehicle ;
40497: LD_ADDR_VAR 0 12
40501: PUSH
40502: CALL_OW 45
40506: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40507: LD_VAR 0 12
40511: PPUSH
40512: LD_VAR 0 8
40516: PPUSH
40517: LD_INT 0
40519: PPUSH
40520: CALL 42656 0 3
// end ;
40524: GO 40478
40526: POP
40527: POP
// if horses then
40528: LD_VAR 0 5
40532: IFFALSE 40599
// for i = 1 to horses do
40534: LD_ADDR_VAR 0 11
40538: PUSH
40539: DOUBLE
40540: LD_INT 1
40542: DEC
40543: ST_TO_ADDR
40544: LD_VAR 0 5
40548: PUSH
40549: FOR_TO
40550: IFFALSE 40597
// begin hc_class := 21 ;
40552: LD_ADDR_OWVAR 28
40556: PUSH
40557: LD_INT 21
40559: ST_TO_ADDR
// hc_gallery :=  ;
40560: LD_ADDR_OWVAR 33
40564: PUSH
40565: LD_STRING 
40567: ST_TO_ADDR
// animal := CreateHuman ;
40568: LD_ADDR_VAR 0 12
40572: PUSH
40573: CALL_OW 44
40577: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40578: LD_VAR 0 12
40582: PPUSH
40583: LD_VAR 0 8
40587: PPUSH
40588: LD_INT 0
40590: PPUSH
40591: CALL 42656 0 3
// end ;
40595: GO 40549
40597: POP
40598: POP
// if birds then
40599: LD_VAR 0 1
40603: IFFALSE 40670
// for i = 1 to birds do
40605: LD_ADDR_VAR 0 11
40609: PUSH
40610: DOUBLE
40611: LD_INT 1
40613: DEC
40614: ST_TO_ADDR
40615: LD_VAR 0 1
40619: PUSH
40620: FOR_TO
40621: IFFALSE 40668
// begin hc_class := 18 ;
40623: LD_ADDR_OWVAR 28
40627: PUSH
40628: LD_INT 18
40630: ST_TO_ADDR
// hc_gallery =  ;
40631: LD_ADDR_OWVAR 33
40635: PUSH
40636: LD_STRING 
40638: ST_TO_ADDR
// animal := CreateHuman ;
40639: LD_ADDR_VAR 0 12
40643: PUSH
40644: CALL_OW 44
40648: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40649: LD_VAR 0 12
40653: PPUSH
40654: LD_VAR 0 8
40658: PPUSH
40659: LD_INT 0
40661: PPUSH
40662: CALL 42656 0 3
// end ;
40666: GO 40620
40668: POP
40669: POP
// if tigers then
40670: LD_VAR 0 2
40674: IFFALSE 40758
// for i = 1 to tigers do
40676: LD_ADDR_VAR 0 11
40680: PUSH
40681: DOUBLE
40682: LD_INT 1
40684: DEC
40685: ST_TO_ADDR
40686: LD_VAR 0 2
40690: PUSH
40691: FOR_TO
40692: IFFALSE 40756
// begin hc_class = class_tiger ;
40694: LD_ADDR_OWVAR 28
40698: PUSH
40699: LD_INT 14
40701: ST_TO_ADDR
// hc_gallery =  ;
40702: LD_ADDR_OWVAR 33
40706: PUSH
40707: LD_STRING 
40709: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
40710: LD_ADDR_OWVAR 35
40714: PUSH
40715: LD_INT 7
40717: NEG
40718: PPUSH
40719: LD_INT 7
40721: PPUSH
40722: CALL_OW 12
40726: ST_TO_ADDR
// animal := CreateHuman ;
40727: LD_ADDR_VAR 0 12
40731: PUSH
40732: CALL_OW 44
40736: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40737: LD_VAR 0 12
40741: PPUSH
40742: LD_VAR 0 8
40746: PPUSH
40747: LD_INT 0
40749: PPUSH
40750: CALL 42656 0 3
// end ;
40754: GO 40691
40756: POP
40757: POP
// if apemans then
40758: LD_VAR 0 3
40762: IFFALSE 40885
// for i = 1 to apemans do
40764: LD_ADDR_VAR 0 11
40768: PUSH
40769: DOUBLE
40770: LD_INT 1
40772: DEC
40773: ST_TO_ADDR
40774: LD_VAR 0 3
40778: PUSH
40779: FOR_TO
40780: IFFALSE 40883
// begin hc_class = class_apeman ;
40782: LD_ADDR_OWVAR 28
40786: PUSH
40787: LD_INT 12
40789: ST_TO_ADDR
// hc_gallery =  ;
40790: LD_ADDR_OWVAR 33
40794: PUSH
40795: LD_STRING 
40797: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
40798: LD_ADDR_OWVAR 35
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PPUSH
40807: LD_INT 2
40809: PPUSH
40810: CALL_OW 12
40814: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
40815: LD_ADDR_OWVAR 31
40819: PUSH
40820: LD_INT 1
40822: PPUSH
40823: LD_INT 3
40825: PPUSH
40826: CALL_OW 12
40830: PUSH
40831: LD_INT 1
40833: PPUSH
40834: LD_INT 3
40836: PPUSH
40837: CALL_OW 12
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 0
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: ST_TO_ADDR
// animal := CreateHuman ;
40854: LD_ADDR_VAR 0 12
40858: PUSH
40859: CALL_OW 44
40863: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40864: LD_VAR 0 12
40868: PPUSH
40869: LD_VAR 0 8
40873: PPUSH
40874: LD_INT 0
40876: PPUSH
40877: CALL 42656 0 3
// end ;
40881: GO 40779
40883: POP
40884: POP
// if enchidnas then
40885: LD_VAR 0 4
40889: IFFALSE 40956
// for i = 1 to enchidnas do
40891: LD_ADDR_VAR 0 11
40895: PUSH
40896: DOUBLE
40897: LD_INT 1
40899: DEC
40900: ST_TO_ADDR
40901: LD_VAR 0 4
40905: PUSH
40906: FOR_TO
40907: IFFALSE 40954
// begin hc_class = 13 ;
40909: LD_ADDR_OWVAR 28
40913: PUSH
40914: LD_INT 13
40916: ST_TO_ADDR
// hc_gallery =  ;
40917: LD_ADDR_OWVAR 33
40921: PUSH
40922: LD_STRING 
40924: ST_TO_ADDR
// animal := CreateHuman ;
40925: LD_ADDR_VAR 0 12
40929: PUSH
40930: CALL_OW 44
40934: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40935: LD_VAR 0 12
40939: PPUSH
40940: LD_VAR 0 8
40944: PPUSH
40945: LD_INT 0
40947: PPUSH
40948: CALL 42656 0 3
// end ;
40952: GO 40906
40954: POP
40955: POP
// if fishes then
40956: LD_VAR 0 7
40960: IFFALSE 41027
// for i = 1 to fishes do
40962: LD_ADDR_VAR 0 11
40966: PUSH
40967: DOUBLE
40968: LD_INT 1
40970: DEC
40971: ST_TO_ADDR
40972: LD_VAR 0 7
40976: PUSH
40977: FOR_TO
40978: IFFALSE 41025
// begin hc_class = 20 ;
40980: LD_ADDR_OWVAR 28
40984: PUSH
40985: LD_INT 20
40987: ST_TO_ADDR
// hc_gallery =  ;
40988: LD_ADDR_OWVAR 33
40992: PUSH
40993: LD_STRING 
40995: ST_TO_ADDR
// animal := CreateHuman ;
40996: LD_ADDR_VAR 0 12
41000: PUSH
41001: CALL_OW 44
41005: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41006: LD_VAR 0 12
41010: PPUSH
41011: LD_VAR 0 9
41015: PPUSH
41016: LD_INT 0
41018: PPUSH
41019: CALL 42656 0 3
// end ;
41023: GO 40977
41025: POP
41026: POP
// end ;
41027: LD_VAR 0 10
41031: RET
// export function WantHeal ( sci , unit ) ; begin
41032: LD_INT 0
41034: PPUSH
// if GetTaskList ( sci ) > 0 then
41035: LD_VAR 0 1
41039: PPUSH
41040: CALL_OW 437
41044: PUSH
41045: LD_INT 0
41047: GREATER
41048: IFFALSE 41118
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41050: LD_VAR 0 1
41054: PPUSH
41055: CALL_OW 437
41059: PUSH
41060: LD_INT 1
41062: ARRAY
41063: PUSH
41064: LD_INT 1
41066: ARRAY
41067: PUSH
41068: LD_STRING l
41070: EQUAL
41071: PUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 437
41081: PUSH
41082: LD_INT 1
41084: ARRAY
41085: PUSH
41086: LD_INT 4
41088: ARRAY
41089: PUSH
41090: LD_VAR 0 2
41094: EQUAL
41095: AND
41096: IFFALSE 41108
// result := true else
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_INT 1
41105: ST_TO_ADDR
41106: GO 41116
// result := false ;
41108: LD_ADDR_VAR 0 3
41112: PUSH
41113: LD_INT 0
41115: ST_TO_ADDR
// end else
41116: GO 41126
// result := false ;
41118: LD_ADDR_VAR 0 3
41122: PUSH
41123: LD_INT 0
41125: ST_TO_ADDR
// end ;
41126: LD_VAR 0 3
41130: RET
// export function HealTarget ( sci ) ; begin
41131: LD_INT 0
41133: PPUSH
// if not sci then
41134: LD_VAR 0 1
41138: NOT
41139: IFFALSE 41143
// exit ;
41141: GO 41208
// result := 0 ;
41143: LD_ADDR_VAR 0 2
41147: PUSH
41148: LD_INT 0
41150: ST_TO_ADDR
// if GetTaskList ( sci ) then
41151: LD_VAR 0 1
41155: PPUSH
41156: CALL_OW 437
41160: IFFALSE 41208
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 437
41171: PUSH
41172: LD_INT 1
41174: ARRAY
41175: PUSH
41176: LD_INT 1
41178: ARRAY
41179: PUSH
41180: LD_STRING l
41182: EQUAL
41183: IFFALSE 41208
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41185: LD_ADDR_VAR 0 2
41189: PUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: CALL_OW 437
41199: PUSH
41200: LD_INT 1
41202: ARRAY
41203: PUSH
41204: LD_INT 4
41206: ARRAY
41207: ST_TO_ADDR
// end ;
41208: LD_VAR 0 2
41212: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41213: LD_INT 0
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
// if not base_units then
41219: LD_VAR 0 1
41223: NOT
41224: IFFALSE 41228
// exit ;
41226: GO 41315
// result := false ;
41228: LD_ADDR_VAR 0 2
41232: PUSH
41233: LD_INT 0
41235: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41236: LD_ADDR_VAR 0 5
41240: PUSH
41241: LD_VAR 0 1
41245: PPUSH
41246: LD_INT 21
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PPUSH
41256: CALL_OW 72
41260: ST_TO_ADDR
// if not tmp then
41261: LD_VAR 0 5
41265: NOT
41266: IFFALSE 41270
// exit ;
41268: GO 41315
// for i in tmp do
41270: LD_ADDR_VAR 0 3
41274: PUSH
41275: LD_VAR 0 5
41279: PUSH
41280: FOR_IN
41281: IFFALSE 41313
// begin result := EnemyInRange ( i , 22 ) ;
41283: LD_ADDR_VAR 0 2
41287: PUSH
41288: LD_VAR 0 3
41292: PPUSH
41293: LD_INT 22
41295: PPUSH
41296: CALL 38902 0 2
41300: ST_TO_ADDR
// if result then
41301: LD_VAR 0 2
41305: IFFALSE 41311
// exit ;
41307: POP
41308: POP
41309: GO 41315
// end ;
41311: GO 41280
41313: POP
41314: POP
// end ;
41315: LD_VAR 0 2
41319: RET
// export function FilterByTag ( units , tag ) ; begin
41320: LD_INT 0
41322: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41323: LD_ADDR_VAR 0 3
41327: PUSH
41328: LD_VAR 0 1
41332: PPUSH
41333: LD_INT 120
41335: PUSH
41336: LD_VAR 0 2
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PPUSH
41345: CALL_OW 72
41349: ST_TO_ADDR
// end ;
41350: LD_VAR 0 3
41354: RET
// export function IsDriver ( un ) ; begin
41355: LD_INT 0
41357: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41358: LD_ADDR_VAR 0 2
41362: PUSH
41363: LD_VAR 0 1
41367: PUSH
41368: LD_INT 55
41370: PUSH
41371: EMPTY
41372: LIST
41373: PPUSH
41374: CALL_OW 69
41378: IN
41379: ST_TO_ADDR
// end ;
41380: LD_VAR 0 2
41384: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41385: LD_INT 0
41387: PPUSH
41388: PPUSH
// list := [ ] ;
41389: LD_ADDR_VAR 0 5
41393: PUSH
41394: EMPTY
41395: ST_TO_ADDR
// case d of 0 :
41396: LD_VAR 0 3
41400: PUSH
41401: LD_INT 0
41403: DOUBLE
41404: EQUAL
41405: IFTRUE 41409
41407: GO 41542
41409: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41410: LD_ADDR_VAR 0 5
41414: PUSH
41415: LD_VAR 0 1
41419: PUSH
41420: LD_INT 4
41422: MINUS
41423: PUSH
41424: LD_VAR 0 2
41428: PUSH
41429: LD_INT 4
41431: MINUS
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: LIST
41440: PUSH
41441: LD_VAR 0 1
41445: PUSH
41446: LD_INT 3
41448: MINUS
41449: PUSH
41450: LD_VAR 0 2
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: LIST
41462: PUSH
41463: LD_VAR 0 1
41467: PUSH
41468: LD_INT 4
41470: PLUS
41471: PUSH
41472: LD_VAR 0 2
41476: PUSH
41477: LD_INT 4
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: PUSH
41485: LD_VAR 0 1
41489: PUSH
41490: LD_INT 3
41492: PLUS
41493: PUSH
41494: LD_VAR 0 2
41498: PUSH
41499: LD_INT 3
41501: PLUS
41502: PUSH
41503: LD_INT 5
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: LIST
41510: PUSH
41511: LD_VAR 0 1
41515: PUSH
41516: LD_VAR 0 2
41520: PUSH
41521: LD_INT 4
41523: PLUS
41524: PUSH
41525: LD_INT 0
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: LIST
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// end ; 1 :
41540: GO 42240
41542: LD_INT 1
41544: DOUBLE
41545: EQUAL
41546: IFTRUE 41550
41548: GO 41683
41550: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41551: LD_ADDR_VAR 0 5
41555: PUSH
41556: LD_VAR 0 1
41560: PUSH
41561: LD_VAR 0 2
41565: PUSH
41566: LD_INT 4
41568: MINUS
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: PUSH
41578: LD_VAR 0 1
41582: PUSH
41583: LD_INT 3
41585: MINUS
41586: PUSH
41587: LD_VAR 0 2
41591: PUSH
41592: LD_INT 3
41594: MINUS
41595: PUSH
41596: LD_INT 2
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: LIST
41603: PUSH
41604: LD_VAR 0 1
41608: PUSH
41609: LD_INT 4
41611: MINUS
41612: PUSH
41613: LD_VAR 0 2
41617: PUSH
41618: LD_INT 1
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: LIST
41625: PUSH
41626: LD_VAR 0 1
41630: PUSH
41631: LD_VAR 0 2
41635: PUSH
41636: LD_INT 3
41638: PLUS
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: PUSH
41648: LD_VAR 0 1
41652: PUSH
41653: LD_INT 4
41655: PLUS
41656: PUSH
41657: LD_VAR 0 2
41661: PUSH
41662: LD_INT 4
41664: PLUS
41665: PUSH
41666: LD_INT 5
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: LIST
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// end ; 2 :
41681: GO 42240
41683: LD_INT 2
41685: DOUBLE
41686: EQUAL
41687: IFTRUE 41691
41689: GO 41820
41691: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
41692: LD_ADDR_VAR 0 5
41696: PUSH
41697: LD_VAR 0 1
41701: PUSH
41702: LD_VAR 0 2
41706: PUSH
41707: LD_INT 3
41709: MINUS
41710: PUSH
41711: LD_INT 3
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: LIST
41718: PUSH
41719: LD_VAR 0 1
41723: PUSH
41724: LD_INT 4
41726: PLUS
41727: PUSH
41728: LD_VAR 0 2
41732: PUSH
41733: LD_INT 4
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: PUSH
41741: LD_VAR 0 1
41745: PUSH
41746: LD_VAR 0 2
41750: PUSH
41751: LD_INT 4
41753: PLUS
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: LIST
41762: PUSH
41763: LD_VAR 0 1
41767: PUSH
41768: LD_INT 3
41770: MINUS
41771: PUSH
41772: LD_VAR 0 2
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: PUSH
41785: LD_VAR 0 1
41789: PUSH
41790: LD_INT 4
41792: MINUS
41793: PUSH
41794: LD_VAR 0 2
41798: PUSH
41799: LD_INT 4
41801: MINUS
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: LIST
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: ST_TO_ADDR
// end ; 3 :
41818: GO 42240
41820: LD_INT 3
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 41961
41828: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41829: LD_ADDR_VAR 0 5
41833: PUSH
41834: LD_VAR 0 1
41838: PUSH
41839: LD_INT 3
41841: PLUS
41842: PUSH
41843: LD_VAR 0 2
41847: PUSH
41848: LD_INT 4
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: LIST
41855: PUSH
41856: LD_VAR 0 1
41860: PUSH
41861: LD_INT 4
41863: PLUS
41864: PUSH
41865: LD_VAR 0 2
41869: PUSH
41870: LD_INT 4
41872: PLUS
41873: PUSH
41874: LD_INT 5
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: PUSH
41882: LD_VAR 0 1
41886: PUSH
41887: LD_INT 4
41889: MINUS
41890: PUSH
41891: LD_VAR 0 2
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: LIST
41903: PUSH
41904: LD_VAR 0 1
41908: PUSH
41909: LD_VAR 0 2
41913: PUSH
41914: LD_INT 4
41916: MINUS
41917: PUSH
41918: LD_INT 3
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: LIST
41925: PUSH
41926: LD_VAR 0 1
41930: PUSH
41931: LD_INT 3
41933: MINUS
41934: PUSH
41935: LD_VAR 0 2
41939: PUSH
41940: LD_INT 3
41942: MINUS
41943: PUSH
41944: LD_INT 2
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: LIST
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: ST_TO_ADDR
// end ; 4 :
41959: GO 42240
41961: LD_INT 4
41963: DOUBLE
41964: EQUAL
41965: IFTRUE 41969
41967: GO 42102
41969: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
41970: LD_ADDR_VAR 0 5
41974: PUSH
41975: LD_VAR 0 1
41979: PUSH
41980: LD_VAR 0 2
41984: PUSH
41985: LD_INT 4
41987: PLUS
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: LIST
41996: PUSH
41997: LD_VAR 0 1
42001: PUSH
42002: LD_INT 3
42004: PLUS
42005: PUSH
42006: LD_VAR 0 2
42010: PUSH
42011: LD_INT 3
42013: PLUS
42014: PUSH
42015: LD_INT 5
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: PUSH
42023: LD_VAR 0 1
42027: PUSH
42028: LD_INT 4
42030: PLUS
42031: PUSH
42032: LD_VAR 0 2
42036: PUSH
42037: LD_INT 4
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: LIST
42044: PUSH
42045: LD_VAR 0 1
42049: PUSH
42050: LD_VAR 0 2
42054: PUSH
42055: LD_INT 3
42057: MINUS
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: PUSH
42067: LD_VAR 0 1
42071: PUSH
42072: LD_INT 4
42074: MINUS
42075: PUSH
42076: LD_VAR 0 2
42080: PUSH
42081: LD_INT 4
42083: MINUS
42084: PUSH
42085: LD_INT 2
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: ST_TO_ADDR
// end ; 5 :
42100: GO 42240
42102: LD_INT 5
42104: DOUBLE
42105: EQUAL
42106: IFTRUE 42110
42108: GO 42239
42110: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42111: LD_ADDR_VAR 0 5
42115: PUSH
42116: LD_VAR 0 1
42120: PUSH
42121: LD_INT 4
42123: MINUS
42124: PUSH
42125: LD_VAR 0 2
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: LIST
42137: PUSH
42138: LD_VAR 0 1
42142: PUSH
42143: LD_VAR 0 2
42147: PUSH
42148: LD_INT 4
42150: MINUS
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: PUSH
42160: LD_VAR 0 1
42164: PUSH
42165: LD_INT 4
42167: PLUS
42168: PUSH
42169: LD_VAR 0 2
42173: PUSH
42174: LD_INT 4
42176: PLUS
42177: PUSH
42178: LD_INT 5
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: LIST
42185: PUSH
42186: LD_VAR 0 1
42190: PUSH
42191: LD_INT 3
42193: PLUS
42194: PUSH
42195: LD_VAR 0 2
42199: PUSH
42200: LD_INT 4
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: LIST
42207: PUSH
42208: LD_VAR 0 1
42212: PUSH
42213: LD_VAR 0 2
42217: PUSH
42218: LD_INT 3
42220: PLUS
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: ST_TO_ADDR
// end ; end ;
42237: GO 42240
42239: POP
// result := list ;
42240: LD_ADDR_VAR 0 4
42244: PUSH
42245: LD_VAR 0 5
42249: ST_TO_ADDR
// end ;
42250: LD_VAR 0 4
42254: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42255: LD_INT 0
42257: PPUSH
42258: PPUSH
42259: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42260: LD_VAR 0 1
42264: NOT
42265: PUSH
42266: LD_VAR 0 2
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: LD_INT 2
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: LD_INT 4
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: IN
42289: NOT
42290: OR
42291: IFFALSE 42295
// exit ;
42293: GO 42378
// tmp := [ ] ;
42295: LD_ADDR_VAR 0 5
42299: PUSH
42300: EMPTY
42301: ST_TO_ADDR
// for i in units do
42302: LD_ADDR_VAR 0 4
42306: PUSH
42307: LD_VAR 0 1
42311: PUSH
42312: FOR_IN
42313: IFFALSE 42347
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
42315: LD_ADDR_VAR 0 5
42319: PUSH
42320: LD_VAR 0 5
42324: PPUSH
42325: LD_VAR 0 4
42329: PPUSH
42330: LD_VAR 0 2
42334: PPUSH
42335: CALL_OW 259
42339: PPUSH
42340: CALL 43738 0 2
42344: ST_TO_ADDR
42345: GO 42312
42347: POP
42348: POP
// if not tmp then
42349: LD_VAR 0 5
42353: NOT
42354: IFFALSE 42358
// exit ;
42356: GO 42378
// result := SortListByListDesc ( units , tmp ) ;
42358: LD_ADDR_VAR 0 3
42362: PUSH
42363: LD_VAR 0 1
42367: PPUSH
42368: LD_VAR 0 5
42372: PPUSH
42373: CALL_OW 77
42377: ST_TO_ADDR
// end ;
42378: LD_VAR 0 3
42382: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42383: LD_INT 0
42385: PPUSH
42386: PPUSH
42387: PPUSH
// result := false ;
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_INT 0
42395: ST_TO_ADDR
// if not building then
42396: LD_VAR 0 2
42400: NOT
42401: IFFALSE 42405
// exit ;
42403: GO 42543
// x := GetX ( building ) ;
42405: LD_ADDR_VAR 0 4
42409: PUSH
42410: LD_VAR 0 2
42414: PPUSH
42415: CALL_OW 250
42419: ST_TO_ADDR
// y := GetY ( building ) ;
42420: LD_ADDR_VAR 0 5
42424: PUSH
42425: LD_VAR 0 2
42429: PPUSH
42430: CALL_OW 251
42434: ST_TO_ADDR
// if not x or not y then
42435: LD_VAR 0 4
42439: NOT
42440: PUSH
42441: LD_VAR 0 5
42445: NOT
42446: OR
42447: IFFALSE 42451
// exit ;
42449: GO 42543
// if GetTaskList ( unit ) then
42451: LD_VAR 0 1
42455: PPUSH
42456: CALL_OW 437
42460: IFFALSE 42543
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42462: LD_STRING e
42464: PUSH
42465: LD_VAR 0 1
42469: PPUSH
42470: CALL_OW 437
42474: PUSH
42475: LD_INT 1
42477: ARRAY
42478: PUSH
42479: LD_INT 1
42481: ARRAY
42482: EQUAL
42483: PUSH
42484: LD_VAR 0 4
42488: PUSH
42489: LD_VAR 0 1
42493: PPUSH
42494: CALL_OW 437
42498: PUSH
42499: LD_INT 1
42501: ARRAY
42502: PUSH
42503: LD_INT 2
42505: ARRAY
42506: EQUAL
42507: AND
42508: PUSH
42509: LD_VAR 0 5
42513: PUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 437
42523: PUSH
42524: LD_INT 1
42526: ARRAY
42527: PUSH
42528: LD_INT 3
42530: ARRAY
42531: EQUAL
42532: AND
42533: IFFALSE 42543
// result := true end ;
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_INT 1
42542: ST_TO_ADDR
// end ;
42543: LD_VAR 0 3
42547: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42548: LD_INT 0
42550: PPUSH
// result := false ;
42551: LD_ADDR_VAR 0 4
42555: PUSH
42556: LD_INT 0
42558: ST_TO_ADDR
// if GetTaskList ( unit ) then
42559: LD_VAR 0 1
42563: PPUSH
42564: CALL_OW 437
42568: IFFALSE 42651
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42570: LD_STRING M
42572: PUSH
42573: LD_VAR 0 1
42577: PPUSH
42578: CALL_OW 437
42582: PUSH
42583: LD_INT 1
42585: ARRAY
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: EQUAL
42591: PUSH
42592: LD_VAR 0 2
42596: PUSH
42597: LD_VAR 0 1
42601: PPUSH
42602: CALL_OW 437
42606: PUSH
42607: LD_INT 1
42609: ARRAY
42610: PUSH
42611: LD_INT 2
42613: ARRAY
42614: EQUAL
42615: AND
42616: PUSH
42617: LD_VAR 0 3
42621: PUSH
42622: LD_VAR 0 1
42626: PPUSH
42627: CALL_OW 437
42631: PUSH
42632: LD_INT 1
42634: ARRAY
42635: PUSH
42636: LD_INT 3
42638: ARRAY
42639: EQUAL
42640: AND
42641: IFFALSE 42651
// result := true ;
42643: LD_ADDR_VAR 0 4
42647: PUSH
42648: LD_INT 1
42650: ST_TO_ADDR
// end ; end ;
42651: LD_VAR 0 4
42655: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
42656: LD_INT 0
42658: PPUSH
42659: PPUSH
42660: PPUSH
42661: PPUSH
// if not unit or not area then
42662: LD_VAR 0 1
42666: NOT
42667: PUSH
42668: LD_VAR 0 2
42672: NOT
42673: OR
42674: IFFALSE 42678
// exit ;
42676: GO 42841
// tmp := AreaToList ( area , i ) ;
42678: LD_ADDR_VAR 0 6
42682: PUSH
42683: LD_VAR 0 2
42687: PPUSH
42688: LD_VAR 0 5
42692: PPUSH
42693: CALL_OW 517
42697: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
42698: LD_ADDR_VAR 0 5
42702: PUSH
42703: DOUBLE
42704: LD_INT 1
42706: DEC
42707: ST_TO_ADDR
42708: LD_VAR 0 6
42712: PUSH
42713: LD_INT 1
42715: ARRAY
42716: PUSH
42717: FOR_TO
42718: IFFALSE 42839
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
42720: LD_ADDR_VAR 0 7
42724: PUSH
42725: LD_VAR 0 6
42729: PUSH
42730: LD_INT 1
42732: ARRAY
42733: PUSH
42734: LD_VAR 0 5
42738: ARRAY
42739: PUSH
42740: LD_VAR 0 6
42744: PUSH
42745: LD_INT 2
42747: ARRAY
42748: PUSH
42749: LD_VAR 0 5
42753: ARRAY
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
42759: LD_INT 92
42761: PUSH
42762: LD_VAR 0 7
42766: PUSH
42767: LD_INT 1
42769: ARRAY
42770: PUSH
42771: LD_VAR 0 7
42775: PUSH
42776: LD_INT 2
42778: ARRAY
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: PPUSH
42789: CALL_OW 69
42793: PUSH
42794: LD_INT 0
42796: EQUAL
42797: IFFALSE 42837
// begin PlaceUnitArea ( unit , area , mode ) ;
42799: LD_VAR 0 1
42803: PPUSH
42804: LD_VAR 0 2
42808: PPUSH
42809: LD_VAR 0 3
42813: PPUSH
42814: CALL_OW 49
// result := IsPlaced ( unit ) ;
42818: LD_ADDR_VAR 0 4
42822: PUSH
42823: LD_VAR 0 1
42827: PPUSH
42828: CALL_OW 305
42832: ST_TO_ADDR
// exit ;
42833: POP
42834: POP
42835: GO 42841
// end ; end ;
42837: GO 42717
42839: POP
42840: POP
// end ;
42841: LD_VAR 0 4
42845: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42846: LD_INT 0
42848: PPUSH
42849: PPUSH
42850: PPUSH
// if not side or side > 8 then
42851: LD_VAR 0 1
42855: NOT
42856: PUSH
42857: LD_VAR 0 1
42861: PUSH
42862: LD_INT 8
42864: GREATER
42865: OR
42866: IFFALSE 42870
// exit ;
42868: GO 43057
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42870: LD_ADDR_VAR 0 4
42874: PUSH
42875: LD_INT 22
42877: PUSH
42878: LD_VAR 0 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 21
42889: PUSH
42890: LD_INT 3
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PPUSH
42901: CALL_OW 69
42905: ST_TO_ADDR
// if not tmp then
42906: LD_VAR 0 4
42910: NOT
42911: IFFALSE 42915
// exit ;
42913: GO 43057
// enable_addtolog := true ;
42915: LD_ADDR_OWVAR 81
42919: PUSH
42920: LD_INT 1
42922: ST_TO_ADDR
// AddToLog ( [ ) ;
42923: LD_STRING [
42925: PPUSH
42926: CALL_OW 561
// for i in tmp do
42930: LD_ADDR_VAR 0 3
42934: PUSH
42935: LD_VAR 0 4
42939: PUSH
42940: FOR_IN
42941: IFFALSE 43048
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
42943: LD_STRING [
42945: PUSH
42946: LD_VAR 0 3
42950: PPUSH
42951: CALL_OW 266
42955: STR
42956: PUSH
42957: LD_STRING , 
42959: STR
42960: PUSH
42961: LD_VAR 0 3
42965: PPUSH
42966: CALL_OW 250
42970: STR
42971: PUSH
42972: LD_STRING , 
42974: STR
42975: PUSH
42976: LD_VAR 0 3
42980: PPUSH
42981: CALL_OW 251
42985: STR
42986: PUSH
42987: LD_STRING , 
42989: STR
42990: PUSH
42991: LD_VAR 0 3
42995: PPUSH
42996: CALL_OW 254
43000: STR
43001: PUSH
43002: LD_STRING , 
43004: STR
43005: PUSH
43006: LD_VAR 0 3
43010: PPUSH
43011: LD_INT 1
43013: PPUSH
43014: CALL_OW 268
43018: STR
43019: PUSH
43020: LD_STRING , 
43022: STR
43023: PUSH
43024: LD_VAR 0 3
43028: PPUSH
43029: LD_INT 2
43031: PPUSH
43032: CALL_OW 268
43036: STR
43037: PUSH
43038: LD_STRING ],
43040: STR
43041: PPUSH
43042: CALL_OW 561
// end ;
43046: GO 42940
43048: POP
43049: POP
// AddToLog ( ]; ) ;
43050: LD_STRING ];
43052: PPUSH
43053: CALL_OW 561
// end ;
43057: LD_VAR 0 2
43061: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43062: LD_INT 0
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
43068: PPUSH
// if not area or not rate or not max then
43069: LD_VAR 0 1
43073: NOT
43074: PUSH
43075: LD_VAR 0 2
43079: NOT
43080: OR
43081: PUSH
43082: LD_VAR 0 4
43086: NOT
43087: OR
43088: IFFALSE 43092
// exit ;
43090: GO 43281
// while 1 do
43092: LD_INT 1
43094: IFFALSE 43281
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43096: LD_ADDR_VAR 0 9
43100: PUSH
43101: LD_VAR 0 1
43105: PPUSH
43106: LD_INT 1
43108: PPUSH
43109: CALL_OW 287
43113: PUSH
43114: LD_INT 10
43116: MUL
43117: ST_TO_ADDR
// r := rate / 10 ;
43118: LD_ADDR_VAR 0 7
43122: PUSH
43123: LD_VAR 0 2
43127: PUSH
43128: LD_INT 10
43130: DIVREAL
43131: ST_TO_ADDR
// time := 1 1$00 ;
43132: LD_ADDR_VAR 0 8
43136: PUSH
43137: LD_INT 2100
43139: ST_TO_ADDR
// if amount < min then
43140: LD_VAR 0 9
43144: PUSH
43145: LD_VAR 0 3
43149: LESS
43150: IFFALSE 43168
// r := r * 2 else
43152: LD_ADDR_VAR 0 7
43156: PUSH
43157: LD_VAR 0 7
43161: PUSH
43162: LD_INT 2
43164: MUL
43165: ST_TO_ADDR
43166: GO 43194
// if amount > max then
43168: LD_VAR 0 9
43172: PUSH
43173: LD_VAR 0 4
43177: GREATER
43178: IFFALSE 43194
// r := r / 2 ;
43180: LD_ADDR_VAR 0 7
43184: PUSH
43185: LD_VAR 0 7
43189: PUSH
43190: LD_INT 2
43192: DIVREAL
43193: ST_TO_ADDR
// time := time / r ;
43194: LD_ADDR_VAR 0 8
43198: PUSH
43199: LD_VAR 0 8
43203: PUSH
43204: LD_VAR 0 7
43208: DIVREAL
43209: ST_TO_ADDR
// if time < 0 then
43210: LD_VAR 0 8
43214: PUSH
43215: LD_INT 0
43217: LESS
43218: IFFALSE 43235
// time := time * - 1 ;
43220: LD_ADDR_VAR 0 8
43224: PUSH
43225: LD_VAR 0 8
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: MUL
43234: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43235: LD_VAR 0 8
43239: PUSH
43240: LD_INT 35
43242: PPUSH
43243: LD_INT 875
43245: PPUSH
43246: CALL_OW 12
43250: PLUS
43251: PPUSH
43252: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43256: LD_INT 1
43258: PPUSH
43259: LD_INT 5
43261: PPUSH
43262: CALL_OW 12
43266: PPUSH
43267: LD_VAR 0 1
43271: PPUSH
43272: LD_INT 1
43274: PPUSH
43275: CALL_OW 55
// end ;
43279: GO 43092
// end ;
43281: LD_VAR 0 5
43285: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43286: LD_INT 0
43288: PPUSH
43289: PPUSH
43290: PPUSH
43291: PPUSH
43292: PPUSH
43293: PPUSH
43294: PPUSH
43295: PPUSH
// if not turrets or not factories then
43296: LD_VAR 0 1
43300: NOT
43301: PUSH
43302: LD_VAR 0 2
43306: NOT
43307: OR
43308: IFFALSE 43312
// exit ;
43310: GO 43619
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43312: LD_ADDR_VAR 0 10
43316: PUSH
43317: LD_INT 5
43319: PUSH
43320: LD_INT 6
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: LD_INT 4
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 24
43354: PUSH
43355: LD_INT 25
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 23
43364: PUSH
43365: LD_INT 27
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 42
43378: PUSH
43379: LD_INT 43
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 44
43388: PUSH
43389: LD_INT 46
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 45
43398: PUSH
43399: LD_INT 47
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: LIST
43415: ST_TO_ADDR
// result := [ ] ;
43416: LD_ADDR_VAR 0 3
43420: PUSH
43421: EMPTY
43422: ST_TO_ADDR
// for i in turrets do
43423: LD_ADDR_VAR 0 4
43427: PUSH
43428: LD_VAR 0 1
43432: PUSH
43433: FOR_IN
43434: IFFALSE 43617
// begin nat := GetNation ( i ) ;
43436: LD_ADDR_VAR 0 7
43440: PUSH
43441: LD_VAR 0 4
43445: PPUSH
43446: CALL_OW 248
43450: ST_TO_ADDR
// weapon := 0 ;
43451: LD_ADDR_VAR 0 8
43455: PUSH
43456: LD_INT 0
43458: ST_TO_ADDR
// if not nat then
43459: LD_VAR 0 7
43463: NOT
43464: IFFALSE 43468
// continue ;
43466: GO 43433
// for j in list [ nat ] do
43468: LD_ADDR_VAR 0 5
43472: PUSH
43473: LD_VAR 0 10
43477: PUSH
43478: LD_VAR 0 7
43482: ARRAY
43483: PUSH
43484: FOR_IN
43485: IFFALSE 43526
// if GetBWeapon ( i ) = j [ 1 ] then
43487: LD_VAR 0 4
43491: PPUSH
43492: CALL_OW 269
43496: PUSH
43497: LD_VAR 0 5
43501: PUSH
43502: LD_INT 1
43504: ARRAY
43505: EQUAL
43506: IFFALSE 43524
// begin weapon := j [ 2 ] ;
43508: LD_ADDR_VAR 0 8
43512: PUSH
43513: LD_VAR 0 5
43517: PUSH
43518: LD_INT 2
43520: ARRAY
43521: ST_TO_ADDR
// break ;
43522: GO 43526
// end ;
43524: GO 43484
43526: POP
43527: POP
// if not weapon then
43528: LD_VAR 0 8
43532: NOT
43533: IFFALSE 43537
// continue ;
43535: GO 43433
// for k in factories do
43537: LD_ADDR_VAR 0 6
43541: PUSH
43542: LD_VAR 0 2
43546: PUSH
43547: FOR_IN
43548: IFFALSE 43613
// begin weapons := AvailableWeaponList ( k ) ;
43550: LD_ADDR_VAR 0 9
43554: PUSH
43555: LD_VAR 0 6
43559: PPUSH
43560: CALL_OW 478
43564: ST_TO_ADDR
// if not weapons then
43565: LD_VAR 0 9
43569: NOT
43570: IFFALSE 43574
// continue ;
43572: GO 43547
// if weapon in weapons then
43574: LD_VAR 0 8
43578: PUSH
43579: LD_VAR 0 9
43583: IN
43584: IFFALSE 43611
// begin result := [ i , weapon ] ;
43586: LD_ADDR_VAR 0 3
43590: PUSH
43591: LD_VAR 0 4
43595: PUSH
43596: LD_VAR 0 8
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: ST_TO_ADDR
// exit ;
43605: POP
43606: POP
43607: POP
43608: POP
43609: GO 43619
// end ; end ;
43611: GO 43547
43613: POP
43614: POP
// end ;
43615: GO 43433
43617: POP
43618: POP
// end ;
43619: LD_VAR 0 3
43623: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
43624: LD_INT 0
43626: PPUSH
// if not side or side > 8 then
43627: LD_VAR 0 3
43631: NOT
43632: PUSH
43633: LD_VAR 0 3
43637: PUSH
43638: LD_INT 8
43640: GREATER
43641: OR
43642: IFFALSE 43646
// exit ;
43644: GO 43705
// if not range then
43646: LD_VAR 0 4
43650: NOT
43651: IFFALSE 43662
// range := - 12 ;
43653: LD_ADDR_VAR 0 4
43657: PUSH
43658: LD_INT 12
43660: NEG
43661: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
43662: LD_VAR 0 1
43666: PPUSH
43667: LD_VAR 0 2
43671: PPUSH
43672: LD_VAR 0 3
43676: PPUSH
43677: LD_VAR 0 4
43681: PPUSH
43682: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
43686: LD_VAR 0 1
43690: PPUSH
43691: LD_VAR 0 2
43695: PPUSH
43696: LD_VAR 0 3
43700: PPUSH
43701: CALL_OW 331
// end ;
43705: LD_VAR 0 5
43709: RET
// export function Video ( mode ) ; begin
43710: LD_INT 0
43712: PPUSH
// ingame_video = mode ;
43713: LD_ADDR_OWVAR 52
43717: PUSH
43718: LD_VAR 0 1
43722: ST_TO_ADDR
// interface_hidden = mode ;
43723: LD_ADDR_OWVAR 54
43727: PUSH
43728: LD_VAR 0 1
43732: ST_TO_ADDR
// end ;
43733: LD_VAR 0 2
43737: RET
// export function Join ( array , element ) ; begin
43738: LD_INT 0
43740: PPUSH
// result := Replace ( array , array + 1 , element ) ;
43741: LD_ADDR_VAR 0 3
43745: PUSH
43746: LD_VAR 0 1
43750: PPUSH
43751: LD_VAR 0 1
43755: PUSH
43756: LD_INT 1
43758: PLUS
43759: PPUSH
43760: LD_VAR 0 2
43764: PPUSH
43765: CALL_OW 1
43769: ST_TO_ADDR
// end ;
43770: LD_VAR 0 3
43774: RET
// export function JoinUnion ( array , element ) ; begin
43775: LD_INT 0
43777: PPUSH
// result := array union element ;
43778: LD_ADDR_VAR 0 3
43782: PUSH
43783: LD_VAR 0 1
43787: PUSH
43788: LD_VAR 0 2
43792: UNION
43793: ST_TO_ADDR
// end ;
43794: LD_VAR 0 3
43798: RET
// export function GetBehemoths ( side ) ; begin
43799: LD_INT 0
43801: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
43802: LD_ADDR_VAR 0 2
43806: PUSH
43807: LD_INT 22
43809: PUSH
43810: LD_VAR 0 1
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 31
43821: PUSH
43822: LD_INT 25
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PPUSH
43833: CALL_OW 69
43837: ST_TO_ADDR
// end ;
43838: LD_VAR 0 2
43842: RET
// export function Shuffle ( array ) ; var i , index ; begin
43843: LD_INT 0
43845: PPUSH
43846: PPUSH
43847: PPUSH
// result := [ ] ;
43848: LD_ADDR_VAR 0 2
43852: PUSH
43853: EMPTY
43854: ST_TO_ADDR
// if not array then
43855: LD_VAR 0 1
43859: NOT
43860: IFFALSE 43864
// exit ;
43862: GO 43963
// Randomize ;
43864: CALL_OW 10
// for i = array downto 1 do
43868: LD_ADDR_VAR 0 3
43872: PUSH
43873: DOUBLE
43874: LD_VAR 0 1
43878: INC
43879: ST_TO_ADDR
43880: LD_INT 1
43882: PUSH
43883: FOR_DOWNTO
43884: IFFALSE 43961
// begin index := rand ( 1 , array ) ;
43886: LD_ADDR_VAR 0 4
43890: PUSH
43891: LD_INT 1
43893: PPUSH
43894: LD_VAR 0 1
43898: PPUSH
43899: CALL_OW 12
43903: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43904: LD_ADDR_VAR 0 2
43908: PUSH
43909: LD_VAR 0 2
43913: PPUSH
43914: LD_VAR 0 2
43918: PUSH
43919: LD_INT 1
43921: PLUS
43922: PPUSH
43923: LD_VAR 0 1
43927: PUSH
43928: LD_VAR 0 4
43932: ARRAY
43933: PPUSH
43934: CALL_OW 2
43938: ST_TO_ADDR
// array := Delete ( array , index ) ;
43939: LD_ADDR_VAR 0 1
43943: PUSH
43944: LD_VAR 0 1
43948: PPUSH
43949: LD_VAR 0 4
43953: PPUSH
43954: CALL_OW 3
43958: ST_TO_ADDR
// end ;
43959: GO 43883
43961: POP
43962: POP
// end ;
43963: LD_VAR 0 2
43967: RET
// export function GetBaseMaterials ( base ) ; begin
43968: LD_INT 0
43970: PPUSH
// result := [ 0 , 0 , 0 ] ;
43971: LD_ADDR_VAR 0 2
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// if not base then
43990: LD_VAR 0 1
43994: NOT
43995: IFFALSE 43999
// exit ;
43997: GO 44048
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
43999: LD_ADDR_VAR 0 2
44003: PUSH
44004: LD_VAR 0 1
44008: PPUSH
44009: LD_INT 1
44011: PPUSH
44012: CALL_OW 275
44016: PUSH
44017: LD_VAR 0 1
44021: PPUSH
44022: LD_INT 2
44024: PPUSH
44025: CALL_OW 275
44029: PUSH
44030: LD_VAR 0 1
44034: PPUSH
44035: LD_INT 3
44037: PPUSH
44038: CALL_OW 275
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: ST_TO_ADDR
// end ;
44048: LD_VAR 0 2
44052: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44053: LD_INT 0
44055: PPUSH
44056: PPUSH
// result := array ;
44057: LD_ADDR_VAR 0 3
44061: PUSH
44062: LD_VAR 0 1
44066: ST_TO_ADDR
// if size >= result then
44067: LD_VAR 0 2
44071: PUSH
44072: LD_VAR 0 3
44076: GREATEREQUAL
44077: IFFALSE 44081
// exit ;
44079: GO 44131
// if size then
44081: LD_VAR 0 2
44085: IFFALSE 44131
// for i := array downto size do
44087: LD_ADDR_VAR 0 4
44091: PUSH
44092: DOUBLE
44093: LD_VAR 0 1
44097: INC
44098: ST_TO_ADDR
44099: LD_VAR 0 2
44103: PUSH
44104: FOR_DOWNTO
44105: IFFALSE 44129
// result := Delete ( result , result ) ;
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_VAR 0 3
44116: PPUSH
44117: LD_VAR 0 3
44121: PPUSH
44122: CALL_OW 3
44126: ST_TO_ADDR
44127: GO 44104
44129: POP
44130: POP
// end ;
44131: LD_VAR 0 3
44135: RET
// export function ComExit ( unit ) ; var tmp ; begin
44136: LD_INT 0
44138: PPUSH
44139: PPUSH
// if not IsInUnit ( unit ) then
44140: LD_VAR 0 1
44144: PPUSH
44145: CALL_OW 310
44149: NOT
44150: IFFALSE 44154
// exit ;
44152: GO 44214
// tmp := IsInUnit ( unit ) ;
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_VAR 0 1
44163: PPUSH
44164: CALL_OW 310
44168: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44169: LD_VAR 0 3
44173: PPUSH
44174: CALL_OW 247
44178: PUSH
44179: LD_INT 2
44181: EQUAL
44182: IFFALSE 44195
// ComExitVehicle ( unit ) else
44184: LD_VAR 0 1
44188: PPUSH
44189: CALL_OW 121
44193: GO 44204
// ComExitBuilding ( unit ) ;
44195: LD_VAR 0 1
44199: PPUSH
44200: CALL_OW 122
// result := tmp ;
44204: LD_ADDR_VAR 0 2
44208: PUSH
44209: LD_VAR 0 3
44213: ST_TO_ADDR
// end ;
44214: LD_VAR 0 2
44218: RET
// export function ComExitAll ( units ) ; var i ; begin
44219: LD_INT 0
44221: PPUSH
44222: PPUSH
// if not units then
44223: LD_VAR 0 1
44227: NOT
44228: IFFALSE 44232
// exit ;
44230: GO 44258
// for i in units do
44232: LD_ADDR_VAR 0 3
44236: PUSH
44237: LD_VAR 0 1
44241: PUSH
44242: FOR_IN
44243: IFFALSE 44256
// ComExit ( i ) ;
44245: LD_VAR 0 3
44249: PPUSH
44250: CALL 44136 0 1
44254: GO 44242
44256: POP
44257: POP
// end ;
44258: LD_VAR 0 2
44262: RET
// export function ResetHc ; begin
44263: LD_INT 0
44265: PPUSH
// InitHc ;
44266: CALL_OW 19
// hc_importance := 0 ;
44270: LD_ADDR_OWVAR 32
44274: PUSH
44275: LD_INT 0
44277: ST_TO_ADDR
// end ;
44278: LD_VAR 0 1
44282: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44288: LD_ADDR_VAR 0 6
44292: PUSH
44293: LD_VAR 0 1
44297: PUSH
44298: LD_VAR 0 3
44302: PLUS
44303: PUSH
44304: LD_INT 2
44306: DIV
44307: ST_TO_ADDR
// if _x < 0 then
44308: LD_VAR 0 6
44312: PUSH
44313: LD_INT 0
44315: LESS
44316: IFFALSE 44333
// _x := _x * - 1 ;
44318: LD_ADDR_VAR 0 6
44322: PUSH
44323: LD_VAR 0 6
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: MUL
44332: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44333: LD_ADDR_VAR 0 7
44337: PUSH
44338: LD_VAR 0 2
44342: PUSH
44343: LD_VAR 0 4
44347: PLUS
44348: PUSH
44349: LD_INT 2
44351: DIV
44352: ST_TO_ADDR
// if _y < 0 then
44353: LD_VAR 0 7
44357: PUSH
44358: LD_INT 0
44360: LESS
44361: IFFALSE 44378
// _y := _y * - 1 ;
44363: LD_ADDR_VAR 0 7
44367: PUSH
44368: LD_VAR 0 7
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: MUL
44377: ST_TO_ADDR
// result := [ _x , _y ] ;
44378: LD_ADDR_VAR 0 5
44382: PUSH
44383: LD_VAR 0 6
44387: PUSH
44388: LD_VAR 0 7
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// end ;
44397: LD_VAR 0 5
44401: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44402: LD_INT 0
44404: PPUSH
44405: PPUSH
44406: PPUSH
44407: PPUSH
// task := GetTaskList ( unit ) ;
44408: LD_ADDR_VAR 0 7
44412: PUSH
44413: LD_VAR 0 1
44417: PPUSH
44418: CALL_OW 437
44422: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44423: LD_VAR 0 7
44427: NOT
44428: PUSH
44429: LD_VAR 0 1
44433: PPUSH
44434: LD_VAR 0 2
44438: PPUSH
44439: CALL_OW 308
44443: NOT
44444: AND
44445: IFFALSE 44449
// exit ;
44447: GO 44567
// if IsInArea ( unit , area ) then
44449: LD_VAR 0 1
44453: PPUSH
44454: LD_VAR 0 2
44458: PPUSH
44459: CALL_OW 308
44463: IFFALSE 44481
// begin ComMoveToArea ( unit , goAway ) ;
44465: LD_VAR 0 1
44469: PPUSH
44470: LD_VAR 0 3
44474: PPUSH
44475: CALL_OW 113
// exit ;
44479: GO 44567
// end ; if task [ 1 ] [ 1 ] <> M then
44481: LD_VAR 0 7
44485: PUSH
44486: LD_INT 1
44488: ARRAY
44489: PUSH
44490: LD_INT 1
44492: ARRAY
44493: PUSH
44494: LD_STRING M
44496: NONEQUAL
44497: IFFALSE 44501
// exit ;
44499: GO 44567
// x := task [ 1 ] [ 2 ] ;
44501: LD_ADDR_VAR 0 5
44505: PUSH
44506: LD_VAR 0 7
44510: PUSH
44511: LD_INT 1
44513: ARRAY
44514: PUSH
44515: LD_INT 2
44517: ARRAY
44518: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44519: LD_ADDR_VAR 0 6
44523: PUSH
44524: LD_VAR 0 7
44528: PUSH
44529: LD_INT 1
44531: ARRAY
44532: PUSH
44533: LD_INT 3
44535: ARRAY
44536: ST_TO_ADDR
// if InArea ( x , y , area ) then
44537: LD_VAR 0 5
44541: PPUSH
44542: LD_VAR 0 6
44546: PPUSH
44547: LD_VAR 0 2
44551: PPUSH
44552: CALL_OW 309
44556: IFFALSE 44567
// ComStop ( unit ) ;
44558: LD_VAR 0 1
44562: PPUSH
44563: CALL_OW 141
// end ;
44567: LD_VAR 0 4
44571: RET
// export function Abs ( value ) ; begin
44572: LD_INT 0
44574: PPUSH
// result := value ;
44575: LD_ADDR_VAR 0 2
44579: PUSH
44580: LD_VAR 0 1
44584: ST_TO_ADDR
// if value < 0 then
44585: LD_VAR 0 1
44589: PUSH
44590: LD_INT 0
44592: LESS
44593: IFFALSE 44610
// result := value * - 1 ;
44595: LD_ADDR_VAR 0 2
44599: PUSH
44600: LD_VAR 0 1
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: MUL
44609: ST_TO_ADDR
// end ;
44610: LD_VAR 0 2
44614: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44615: LD_INT 0
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
// if not unit or not building then
44625: LD_VAR 0 1
44629: NOT
44630: PUSH
44631: LD_VAR 0 2
44635: NOT
44636: OR
44637: IFFALSE 44641
// exit ;
44639: GO 44867
// x := GetX ( building ) ;
44641: LD_ADDR_VAR 0 4
44645: PUSH
44646: LD_VAR 0 2
44650: PPUSH
44651: CALL_OW 250
44655: ST_TO_ADDR
// y := GetY ( building ) ;
44656: LD_ADDR_VAR 0 6
44660: PUSH
44661: LD_VAR 0 2
44665: PPUSH
44666: CALL_OW 251
44670: ST_TO_ADDR
// d := GetDir ( building ) ;
44671: LD_ADDR_VAR 0 8
44675: PUSH
44676: LD_VAR 0 2
44680: PPUSH
44681: CALL_OW 254
44685: ST_TO_ADDR
// r := 4 ;
44686: LD_ADDR_VAR 0 9
44690: PUSH
44691: LD_INT 4
44693: ST_TO_ADDR
// for i := 1 to 5 do
44694: LD_ADDR_VAR 0 10
44698: PUSH
44699: DOUBLE
44700: LD_INT 1
44702: DEC
44703: ST_TO_ADDR
44704: LD_INT 5
44706: PUSH
44707: FOR_TO
44708: IFFALSE 44865
// begin _x := ShiftX ( x , d , r + i ) ;
44710: LD_ADDR_VAR 0 5
44714: PUSH
44715: LD_VAR 0 4
44719: PPUSH
44720: LD_VAR 0 8
44724: PPUSH
44725: LD_VAR 0 9
44729: PUSH
44730: LD_VAR 0 10
44734: PLUS
44735: PPUSH
44736: CALL_OW 272
44740: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
44741: LD_ADDR_VAR 0 7
44745: PUSH
44746: LD_VAR 0 6
44750: PPUSH
44751: LD_VAR 0 8
44755: PPUSH
44756: LD_VAR 0 9
44760: PUSH
44761: LD_VAR 0 10
44765: PLUS
44766: PPUSH
44767: CALL_OW 273
44771: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
44772: LD_VAR 0 5
44776: PPUSH
44777: LD_VAR 0 7
44781: PPUSH
44782: CALL_OW 488
44786: PUSH
44787: LD_VAR 0 5
44791: PPUSH
44792: LD_VAR 0 7
44796: PPUSH
44797: CALL_OW 428
44801: PPUSH
44802: CALL_OW 247
44806: PUSH
44807: LD_INT 3
44809: PUSH
44810: LD_INT 2
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: IN
44817: NOT
44818: AND
44819: IFFALSE 44863
// begin ComMoveXY ( unit , _x , _y ) ;
44821: LD_VAR 0 1
44825: PPUSH
44826: LD_VAR 0 5
44830: PPUSH
44831: LD_VAR 0 7
44835: PPUSH
44836: CALL_OW 111
// result := [ _x , _y ] ;
44840: LD_ADDR_VAR 0 3
44844: PUSH
44845: LD_VAR 0 5
44849: PUSH
44850: LD_VAR 0 7
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: ST_TO_ADDR
// exit ;
44859: POP
44860: POP
44861: GO 44867
// end ; end ;
44863: GO 44707
44865: POP
44866: POP
// end ;
44867: LD_VAR 0 3
44871: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44872: LD_INT 0
44874: PPUSH
44875: PPUSH
44876: PPUSH
// result := 0 ;
44877: LD_ADDR_VAR 0 3
44881: PUSH
44882: LD_INT 0
44884: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44885: LD_VAR 0 1
44889: PUSH
44890: LD_INT 0
44892: LESS
44893: PUSH
44894: LD_VAR 0 1
44898: PUSH
44899: LD_INT 8
44901: GREATER
44902: OR
44903: PUSH
44904: LD_VAR 0 2
44908: PUSH
44909: LD_INT 0
44911: LESS
44912: OR
44913: PUSH
44914: LD_VAR 0 2
44918: PUSH
44919: LD_INT 8
44921: GREATER
44922: OR
44923: IFFALSE 44927
// exit ;
44925: GO 45002
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
44927: LD_ADDR_VAR 0 4
44931: PUSH
44932: LD_INT 22
44934: PUSH
44935: LD_VAR 0 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PPUSH
44944: CALL_OW 69
44948: PUSH
44949: FOR_IN
44950: IFFALSE 45000
// begin un := UnitShoot ( i ) ;
44952: LD_ADDR_VAR 0 5
44956: PUSH
44957: LD_VAR 0 4
44961: PPUSH
44962: CALL_OW 504
44966: ST_TO_ADDR
// if GetSide ( un ) = side1 then
44967: LD_VAR 0 5
44971: PPUSH
44972: CALL_OW 255
44976: PUSH
44977: LD_VAR 0 1
44981: EQUAL
44982: IFFALSE 44998
// begin result := un ;
44984: LD_ADDR_VAR 0 3
44988: PUSH
44989: LD_VAR 0 5
44993: ST_TO_ADDR
// exit ;
44994: POP
44995: POP
44996: GO 45002
// end ; end ;
44998: GO 44949
45000: POP
45001: POP
// end ;
45002: LD_VAR 0 3
45006: RET
// export function GetCargoBay ( units ) ; begin
45007: LD_INT 0
45009: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45010: LD_ADDR_VAR 0 2
45014: PUSH
45015: LD_VAR 0 1
45019: PPUSH
45020: LD_INT 2
45022: PUSH
45023: LD_INT 34
45025: PUSH
45026: LD_INT 12
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 34
45035: PUSH
45036: LD_INT 51
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 34
45045: PUSH
45046: LD_INT 32
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 34
45055: PUSH
45056: LD_INT 89
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: PPUSH
45070: CALL_OW 72
45074: ST_TO_ADDR
// end ;
45075: LD_VAR 0 2
45079: RET
// export function Negate ( value ) ; begin
45080: LD_INT 0
45082: PPUSH
// result := not value ;
45083: LD_ADDR_VAR 0 2
45087: PUSH
45088: LD_VAR 0 1
45092: NOT
45093: ST_TO_ADDR
// end ;
45094: LD_VAR 0 2
45098: RET
// export function Inc ( value ) ; begin
45099: LD_INT 0
45101: PPUSH
// result := value + 1 ;
45102: LD_ADDR_VAR 0 2
45106: PUSH
45107: LD_VAR 0 1
45111: PUSH
45112: LD_INT 1
45114: PLUS
45115: ST_TO_ADDR
// end ;
45116: LD_VAR 0 2
45120: RET
// export function Dec ( value ) ; begin
45121: LD_INT 0
45123: PPUSH
// result := value - 1 ;
45124: LD_ADDR_VAR 0 2
45128: PUSH
45129: LD_VAR 0 1
45133: PUSH
45134: LD_INT 1
45136: MINUS
45137: ST_TO_ADDR
// end ;
45138: LD_VAR 0 2
45142: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45143: LD_INT 0
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45153: LD_VAR 0 1
45157: PPUSH
45158: LD_VAR 0 2
45162: PPUSH
45163: CALL_OW 488
45167: NOT
45168: PUSH
45169: LD_VAR 0 3
45173: PPUSH
45174: LD_VAR 0 4
45178: PPUSH
45179: CALL_OW 488
45183: NOT
45184: OR
45185: IFFALSE 45198
// begin result := - 1 ;
45187: LD_ADDR_VAR 0 5
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: ST_TO_ADDR
// exit ;
45196: GO 45433
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45198: LD_ADDR_VAR 0 12
45202: PUSH
45203: LD_VAR 0 1
45207: PPUSH
45208: LD_VAR 0 2
45212: PPUSH
45213: LD_VAR 0 3
45217: PPUSH
45218: LD_VAR 0 4
45222: PPUSH
45223: CALL 44283 0 4
45227: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45228: LD_ADDR_VAR 0 11
45232: PUSH
45233: LD_VAR 0 1
45237: PPUSH
45238: LD_VAR 0 2
45242: PPUSH
45243: LD_VAR 0 12
45247: PUSH
45248: LD_INT 1
45250: ARRAY
45251: PPUSH
45252: LD_VAR 0 12
45256: PUSH
45257: LD_INT 2
45259: ARRAY
45260: PPUSH
45261: CALL_OW 298
45265: ST_TO_ADDR
// distance := 9999 ;
45266: LD_ADDR_VAR 0 10
45270: PUSH
45271: LD_INT 9999
45273: ST_TO_ADDR
// for i := 0 to 5 do
45274: LD_ADDR_VAR 0 6
45278: PUSH
45279: DOUBLE
45280: LD_INT 0
45282: DEC
45283: ST_TO_ADDR
45284: LD_INT 5
45286: PUSH
45287: FOR_TO
45288: IFFALSE 45431
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45290: LD_ADDR_VAR 0 7
45294: PUSH
45295: LD_VAR 0 1
45299: PPUSH
45300: LD_VAR 0 6
45304: PPUSH
45305: LD_VAR 0 11
45309: PPUSH
45310: CALL_OW 272
45314: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45315: LD_ADDR_VAR 0 8
45319: PUSH
45320: LD_VAR 0 2
45324: PPUSH
45325: LD_VAR 0 6
45329: PPUSH
45330: LD_VAR 0 11
45334: PPUSH
45335: CALL_OW 273
45339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45340: LD_VAR 0 7
45344: PPUSH
45345: LD_VAR 0 8
45349: PPUSH
45350: CALL_OW 488
45354: NOT
45355: IFFALSE 45359
// continue ;
45357: GO 45287
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45359: LD_ADDR_VAR 0 9
45363: PUSH
45364: LD_VAR 0 12
45368: PUSH
45369: LD_INT 1
45371: ARRAY
45372: PPUSH
45373: LD_VAR 0 12
45377: PUSH
45378: LD_INT 2
45380: ARRAY
45381: PPUSH
45382: LD_VAR 0 7
45386: PPUSH
45387: LD_VAR 0 8
45391: PPUSH
45392: CALL_OW 298
45396: ST_TO_ADDR
// if tmp < distance then
45397: LD_VAR 0 9
45401: PUSH
45402: LD_VAR 0 10
45406: LESS
45407: IFFALSE 45429
// begin result := i ;
45409: LD_ADDR_VAR 0 5
45413: PUSH
45414: LD_VAR 0 6
45418: ST_TO_ADDR
// distance := tmp ;
45419: LD_ADDR_VAR 0 10
45423: PUSH
45424: LD_VAR 0 9
45428: ST_TO_ADDR
// end ; end ;
45429: GO 45287
45431: POP
45432: POP
// end ;
45433: LD_VAR 0 5
45437: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45438: LD_INT 0
45440: PPUSH
45441: PPUSH
// if not driver or not IsInUnit ( driver ) then
45442: LD_VAR 0 1
45446: NOT
45447: PUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: CALL_OW 310
45457: NOT
45458: OR
45459: IFFALSE 45463
// exit ;
45461: GO 45553
// vehicle := IsInUnit ( driver ) ;
45463: LD_ADDR_VAR 0 3
45467: PUSH
45468: LD_VAR 0 1
45472: PPUSH
45473: CALL_OW 310
45477: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45478: LD_VAR 0 1
45482: PPUSH
45483: LD_STRING \
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 0
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 0
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: PUSH
45513: LD_STRING E
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 0
45521: PUSH
45522: LD_VAR 0 3
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PPUSH
45549: CALL_OW 446
// end ;
45553: LD_VAR 0 2
45557: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45558: LD_INT 0
45560: PPUSH
45561: PPUSH
// if not driver or not IsInUnit ( driver ) then
45562: LD_VAR 0 1
45566: NOT
45567: PUSH
45568: LD_VAR 0 1
45572: PPUSH
45573: CALL_OW 310
45577: NOT
45578: OR
45579: IFFALSE 45583
// exit ;
45581: GO 45673
// vehicle := IsInUnit ( driver ) ;
45583: LD_ADDR_VAR 0 3
45587: PUSH
45588: LD_VAR 0 1
45592: PPUSH
45593: CALL_OW 310
45597: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45598: LD_VAR 0 1
45602: PPUSH
45603: LD_STRING \
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: PUSH
45633: LD_STRING E
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: LD_VAR 0 3
45646: PUSH
45647: LD_INT 0
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PPUSH
45669: CALL_OW 447
// end ;
45673: LD_VAR 0 2
45677: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
45678: LD_INT 0
45680: PPUSH
45681: PPUSH
45682: PPUSH
// tmp := [ ] ;
45683: LD_ADDR_VAR 0 5
45687: PUSH
45688: EMPTY
45689: ST_TO_ADDR
// for i in units do
45690: LD_ADDR_VAR 0 4
45694: PUSH
45695: LD_VAR 0 1
45699: PUSH
45700: FOR_IN
45701: IFFALSE 45739
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
45703: LD_ADDR_VAR 0 5
45707: PUSH
45708: LD_VAR 0 5
45712: PPUSH
45713: LD_VAR 0 5
45717: PUSH
45718: LD_INT 1
45720: PLUS
45721: PPUSH
45722: LD_VAR 0 4
45726: PPUSH
45727: CALL_OW 256
45731: PPUSH
45732: CALL_OW 2
45736: ST_TO_ADDR
45737: GO 45700
45739: POP
45740: POP
// if not tmp then
45741: LD_VAR 0 5
45745: NOT
45746: IFFALSE 45750
// exit ;
45748: GO 45798
// if asc then
45750: LD_VAR 0 2
45754: IFFALSE 45778
// result := SortListByListAsc ( units , tmp ) else
45756: LD_ADDR_VAR 0 3
45760: PUSH
45761: LD_VAR 0 1
45765: PPUSH
45766: LD_VAR 0 5
45770: PPUSH
45771: CALL_OW 76
45775: ST_TO_ADDR
45776: GO 45798
// result := SortListByListDesc ( units , tmp ) ;
45778: LD_ADDR_VAR 0 3
45782: PUSH
45783: LD_VAR 0 1
45787: PPUSH
45788: LD_VAR 0 5
45792: PPUSH
45793: CALL_OW 77
45797: ST_TO_ADDR
// end ;
45798: LD_VAR 0 3
45802: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45803: LD_INT 0
45805: PPUSH
45806: PPUSH
// task := GetTaskList ( mech ) ;
45807: LD_ADDR_VAR 0 4
45811: PUSH
45812: LD_VAR 0 1
45816: PPUSH
45817: CALL_OW 437
45821: ST_TO_ADDR
// if not task then
45822: LD_VAR 0 4
45826: NOT
45827: IFFALSE 45831
// exit ;
45829: GO 45873
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45831: LD_ADDR_VAR 0 3
45835: PUSH
45836: LD_VAR 0 4
45840: PUSH
45841: LD_INT 1
45843: ARRAY
45844: PUSH
45845: LD_INT 1
45847: ARRAY
45848: PUSH
45849: LD_STRING r
45851: EQUAL
45852: PUSH
45853: LD_VAR 0 4
45857: PUSH
45858: LD_INT 1
45860: ARRAY
45861: PUSH
45862: LD_INT 4
45864: ARRAY
45865: PUSH
45866: LD_VAR 0 2
45870: EQUAL
45871: AND
45872: ST_TO_ADDR
// end ;
45873: LD_VAR 0 3
45877: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45878: LD_INT 0
45880: PPUSH
// SetDir ( unit , d ) ;
45881: LD_VAR 0 1
45885: PPUSH
45886: LD_VAR 0 4
45890: PPUSH
45891: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
45895: LD_VAR 0 1
45899: PPUSH
45900: LD_VAR 0 2
45904: PPUSH
45905: LD_VAR 0 3
45909: PPUSH
45910: LD_VAR 0 5
45914: PPUSH
45915: CALL_OW 48
// end ;
45919: LD_VAR 0 6
45923: RET
// export function ToNaturalNumber ( number ) ; begin
45924: LD_INT 0
45926: PPUSH
// result := number div 1 ;
45927: LD_ADDR_VAR 0 2
45931: PUSH
45932: LD_VAR 0 1
45936: PUSH
45937: LD_INT 1
45939: DIV
45940: ST_TO_ADDR
// if number < 0 then
45941: LD_VAR 0 1
45945: PUSH
45946: LD_INT 0
45948: LESS
45949: IFFALSE 45959
// result := 0 ;
45951: LD_ADDR_VAR 0 2
45955: PUSH
45956: LD_INT 0
45958: ST_TO_ADDR
// end ;
45959: LD_VAR 0 2
45963: RET
// export function SortByClass ( units , class ) ; var un ; begin
45964: LD_INT 0
45966: PPUSH
45967: PPUSH
// if not units or not class then
45968: LD_VAR 0 1
45972: NOT
45973: PUSH
45974: LD_VAR 0 2
45978: NOT
45979: OR
45980: IFFALSE 45984
// exit ;
45982: GO 46079
// result := [ ] ;
45984: LD_ADDR_VAR 0 3
45988: PUSH
45989: EMPTY
45990: ST_TO_ADDR
// for un in units do
45991: LD_ADDR_VAR 0 4
45995: PUSH
45996: LD_VAR 0 1
46000: PUSH
46001: FOR_IN
46002: IFFALSE 46077
// if GetClass ( un ) = class then
46004: LD_VAR 0 4
46008: PPUSH
46009: CALL_OW 257
46013: PUSH
46014: LD_VAR 0 2
46018: EQUAL
46019: IFFALSE 46046
// result := Insert ( result , 1 , un ) else
46021: LD_ADDR_VAR 0 3
46025: PUSH
46026: LD_VAR 0 3
46030: PPUSH
46031: LD_INT 1
46033: PPUSH
46034: LD_VAR 0 4
46038: PPUSH
46039: CALL_OW 2
46043: ST_TO_ADDR
46044: GO 46075
// result := Replace ( result , result + 1 , un ) ;
46046: LD_ADDR_VAR 0 3
46050: PUSH
46051: LD_VAR 0 3
46055: PPUSH
46056: LD_VAR 0 3
46060: PUSH
46061: LD_INT 1
46063: PLUS
46064: PPUSH
46065: LD_VAR 0 4
46069: PPUSH
46070: CALL_OW 1
46074: ST_TO_ADDR
46075: GO 46001
46077: POP
46078: POP
// end ;
46079: LD_VAR 0 3
46083: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46084: LD_INT 0
46086: PPUSH
46087: PPUSH
46088: PPUSH
46089: PPUSH
46090: PPUSH
46091: PPUSH
46092: PPUSH
// result := [ ] ;
46093: LD_ADDR_VAR 0 4
46097: PUSH
46098: EMPTY
46099: ST_TO_ADDR
// if x - r < 0 then
46100: LD_VAR 0 1
46104: PUSH
46105: LD_VAR 0 3
46109: MINUS
46110: PUSH
46111: LD_INT 0
46113: LESS
46114: IFFALSE 46126
// min_x := 0 else
46116: LD_ADDR_VAR 0 8
46120: PUSH
46121: LD_INT 0
46123: ST_TO_ADDR
46124: GO 46142
// min_x := x - r ;
46126: LD_ADDR_VAR 0 8
46130: PUSH
46131: LD_VAR 0 1
46135: PUSH
46136: LD_VAR 0 3
46140: MINUS
46141: ST_TO_ADDR
// if y - r < 0 then
46142: LD_VAR 0 2
46146: PUSH
46147: LD_VAR 0 3
46151: MINUS
46152: PUSH
46153: LD_INT 0
46155: LESS
46156: IFFALSE 46168
// min_y := 0 else
46158: LD_ADDR_VAR 0 7
46162: PUSH
46163: LD_INT 0
46165: ST_TO_ADDR
46166: GO 46184
// min_y := y - r ;
46168: LD_ADDR_VAR 0 7
46172: PUSH
46173: LD_VAR 0 2
46177: PUSH
46178: LD_VAR 0 3
46182: MINUS
46183: ST_TO_ADDR
// max_x := x + r ;
46184: LD_ADDR_VAR 0 9
46188: PUSH
46189: LD_VAR 0 1
46193: PUSH
46194: LD_VAR 0 3
46198: PLUS
46199: ST_TO_ADDR
// max_y := y + r ;
46200: LD_ADDR_VAR 0 10
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: LD_VAR 0 3
46214: PLUS
46215: ST_TO_ADDR
// for _x = min_x to max_x do
46216: LD_ADDR_VAR 0 5
46220: PUSH
46221: DOUBLE
46222: LD_VAR 0 8
46226: DEC
46227: ST_TO_ADDR
46228: LD_VAR 0 9
46232: PUSH
46233: FOR_TO
46234: IFFALSE 46335
// for _y = min_y to max_y do
46236: LD_ADDR_VAR 0 6
46240: PUSH
46241: DOUBLE
46242: LD_VAR 0 7
46246: DEC
46247: ST_TO_ADDR
46248: LD_VAR 0 10
46252: PUSH
46253: FOR_TO
46254: IFFALSE 46331
// begin if not ValidHex ( _x , _y ) then
46256: LD_VAR 0 5
46260: PPUSH
46261: LD_VAR 0 6
46265: PPUSH
46266: CALL_OW 488
46270: NOT
46271: IFFALSE 46275
// continue ;
46273: GO 46253
// if GetResourceTypeXY ( _x , _y ) then
46275: LD_VAR 0 5
46279: PPUSH
46280: LD_VAR 0 6
46284: PPUSH
46285: CALL_OW 283
46289: IFFALSE 46329
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46291: LD_ADDR_VAR 0 4
46295: PUSH
46296: LD_VAR 0 4
46300: PPUSH
46301: LD_VAR 0 4
46305: PUSH
46306: LD_INT 1
46308: PLUS
46309: PPUSH
46310: LD_VAR 0 5
46314: PUSH
46315: LD_VAR 0 6
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PPUSH
46324: CALL_OW 1
46328: ST_TO_ADDR
// end ;
46329: GO 46253
46331: POP
46332: POP
46333: GO 46233
46335: POP
46336: POP
// end ;
46337: LD_VAR 0 4
46341: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46342: LD_INT 0
46344: PPUSH
46345: PPUSH
46346: PPUSH
46347: PPUSH
46348: PPUSH
46349: PPUSH
46350: PPUSH
46351: PPUSH
// if not units then
46352: LD_VAR 0 1
46356: NOT
46357: IFFALSE 46361
// exit ;
46359: GO 46885
// result := UnitFilter ( units , [ f_ok ] ) ;
46361: LD_ADDR_VAR 0 3
46365: PUSH
46366: LD_VAR 0 1
46370: PPUSH
46371: LD_INT 50
46373: PUSH
46374: EMPTY
46375: LIST
46376: PPUSH
46377: CALL_OW 72
46381: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46382: LD_ADDR_VAR 0 8
46386: PUSH
46387: LD_VAR 0 1
46391: PUSH
46392: LD_INT 1
46394: ARRAY
46395: PPUSH
46396: CALL_OW 255
46400: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46401: LD_ADDR_VAR 0 10
46405: PUSH
46406: LD_INT 29
46408: PUSH
46409: LD_INT 91
46411: PUSH
46412: LD_INT 49
46414: PUSH
46415: EMPTY
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// if not result then
46420: LD_VAR 0 3
46424: NOT
46425: IFFALSE 46429
// exit ;
46427: GO 46885
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46429: LD_ADDR_VAR 0 5
46433: PUSH
46434: LD_INT 81
46436: PUSH
46437: LD_VAR 0 8
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PPUSH
46446: CALL_OW 69
46450: ST_TO_ADDR
// for i in result do
46451: LD_ADDR_VAR 0 4
46455: PUSH
46456: LD_VAR 0 3
46460: PUSH
46461: FOR_IN
46462: IFFALSE 46883
// begin tag := GetTag ( i ) + 1 ;
46464: LD_ADDR_VAR 0 9
46468: PUSH
46469: LD_VAR 0 4
46473: PPUSH
46474: CALL_OW 110
46478: PUSH
46479: LD_INT 1
46481: PLUS
46482: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46483: LD_ADDR_VAR 0 7
46487: PUSH
46488: LD_VAR 0 4
46492: PPUSH
46493: CALL_OW 250
46497: PPUSH
46498: LD_VAR 0 4
46502: PPUSH
46503: CALL_OW 251
46507: PPUSH
46508: LD_INT 6
46510: PPUSH
46511: CALL 46084 0 3
46515: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46516: LD_VAR 0 4
46520: PPUSH
46521: CALL_OW 247
46525: PUSH
46526: LD_INT 2
46528: EQUAL
46529: PUSH
46530: LD_VAR 0 7
46534: AND
46535: PUSH
46536: LD_VAR 0 4
46540: PPUSH
46541: CALL_OW 264
46545: PUSH
46546: LD_VAR 0 10
46550: IN
46551: NOT
46552: AND
46553: IFFALSE 46592
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46555: LD_VAR 0 4
46559: PPUSH
46560: LD_VAR 0 7
46564: PUSH
46565: LD_INT 1
46567: ARRAY
46568: PUSH
46569: LD_INT 1
46571: ARRAY
46572: PPUSH
46573: LD_VAR 0 7
46577: PUSH
46578: LD_INT 1
46580: ARRAY
46581: PUSH
46582: LD_INT 2
46584: ARRAY
46585: PPUSH
46586: CALL_OW 116
46590: GO 46881
// if path > tag then
46592: LD_VAR 0 2
46596: PUSH
46597: LD_VAR 0 9
46601: GREATER
46602: IFFALSE 46810
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46604: LD_ADDR_VAR 0 6
46608: PUSH
46609: LD_VAR 0 5
46613: PPUSH
46614: LD_INT 91
46616: PUSH
46617: LD_VAR 0 4
46621: PUSH
46622: LD_INT 8
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: LIST
46629: PPUSH
46630: CALL_OW 72
46634: ST_TO_ADDR
// if nearEnemy then
46635: LD_VAR 0 6
46639: IFFALSE 46708
// begin if GetWeapon ( i ) = ru_time_lapser then
46641: LD_VAR 0 4
46645: PPUSH
46646: CALL_OW 264
46650: PUSH
46651: LD_INT 49
46653: EQUAL
46654: IFFALSE 46682
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46656: LD_VAR 0 4
46660: PPUSH
46661: LD_VAR 0 6
46665: PPUSH
46666: LD_VAR 0 4
46670: PPUSH
46671: CALL_OW 74
46675: PPUSH
46676: CALL_OW 112
46680: GO 46706
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46682: LD_VAR 0 4
46686: PPUSH
46687: LD_VAR 0 6
46691: PPUSH
46692: LD_VAR 0 4
46696: PPUSH
46697: CALL_OW 74
46701: PPUSH
46702: CALL 47810 0 2
// end else
46706: GO 46808
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46708: LD_VAR 0 4
46712: PPUSH
46713: LD_VAR 0 2
46717: PUSH
46718: LD_VAR 0 9
46722: ARRAY
46723: PUSH
46724: LD_INT 1
46726: ARRAY
46727: PPUSH
46728: LD_VAR 0 2
46732: PUSH
46733: LD_VAR 0 9
46737: ARRAY
46738: PUSH
46739: LD_INT 2
46741: ARRAY
46742: PPUSH
46743: CALL_OW 297
46747: PUSH
46748: LD_INT 6
46750: GREATER
46751: IFFALSE 46794
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46753: LD_VAR 0 4
46757: PPUSH
46758: LD_VAR 0 2
46762: PUSH
46763: LD_VAR 0 9
46767: ARRAY
46768: PUSH
46769: LD_INT 1
46771: ARRAY
46772: PPUSH
46773: LD_VAR 0 2
46777: PUSH
46778: LD_VAR 0 9
46782: ARRAY
46783: PUSH
46784: LD_INT 2
46786: ARRAY
46787: PPUSH
46788: CALL_OW 114
46792: GO 46808
// SetTag ( i , tag ) ;
46794: LD_VAR 0 4
46798: PPUSH
46799: LD_VAR 0 9
46803: PPUSH
46804: CALL_OW 109
// end else
46808: GO 46881
// if enemy then
46810: LD_VAR 0 5
46814: IFFALSE 46881
// begin if GetWeapon ( i ) = ru_time_lapser then
46816: LD_VAR 0 4
46820: PPUSH
46821: CALL_OW 264
46825: PUSH
46826: LD_INT 49
46828: EQUAL
46829: IFFALSE 46857
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46831: LD_VAR 0 4
46835: PPUSH
46836: LD_VAR 0 5
46840: PPUSH
46841: LD_VAR 0 4
46845: PPUSH
46846: CALL_OW 74
46850: PPUSH
46851: CALL_OW 112
46855: GO 46881
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46857: LD_VAR 0 4
46861: PPUSH
46862: LD_VAR 0 5
46866: PPUSH
46867: LD_VAR 0 4
46871: PPUSH
46872: CALL_OW 74
46876: PPUSH
46877: CALL 47810 0 2
// end ; end ;
46881: GO 46461
46883: POP
46884: POP
// end ;
46885: LD_VAR 0 3
46889: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46890: LD_INT 0
46892: PPUSH
46893: PPUSH
46894: PPUSH
// if not unit or IsInUnit ( unit ) then
46895: LD_VAR 0 1
46899: NOT
46900: PUSH
46901: LD_VAR 0 1
46905: PPUSH
46906: CALL_OW 310
46910: OR
46911: IFFALSE 46915
// exit ;
46913: GO 47006
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
46915: LD_ADDR_VAR 0 4
46919: PUSH
46920: LD_VAR 0 1
46924: PPUSH
46925: CALL_OW 250
46929: PPUSH
46930: LD_VAR 0 2
46934: PPUSH
46935: LD_INT 1
46937: PPUSH
46938: CALL_OW 272
46942: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
46943: LD_ADDR_VAR 0 5
46947: PUSH
46948: LD_VAR 0 1
46952: PPUSH
46953: CALL_OW 251
46957: PPUSH
46958: LD_VAR 0 2
46962: PPUSH
46963: LD_INT 1
46965: PPUSH
46966: CALL_OW 273
46970: ST_TO_ADDR
// if ValidHex ( x , y ) then
46971: LD_VAR 0 4
46975: PPUSH
46976: LD_VAR 0 5
46980: PPUSH
46981: CALL_OW 488
46985: IFFALSE 47006
// ComTurnXY ( unit , x , y ) ;
46987: LD_VAR 0 1
46991: PPUSH
46992: LD_VAR 0 4
46996: PPUSH
46997: LD_VAR 0 5
47001: PPUSH
47002: CALL_OW 118
// end ;
47006: LD_VAR 0 3
47010: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47011: LD_INT 0
47013: PPUSH
47014: PPUSH
// result := false ;
47015: LD_ADDR_VAR 0 3
47019: PUSH
47020: LD_INT 0
47022: ST_TO_ADDR
// if not units then
47023: LD_VAR 0 2
47027: NOT
47028: IFFALSE 47032
// exit ;
47030: GO 47077
// for i in units do
47032: LD_ADDR_VAR 0 4
47036: PUSH
47037: LD_VAR 0 2
47041: PUSH
47042: FOR_IN
47043: IFFALSE 47075
// if See ( side , i ) then
47045: LD_VAR 0 1
47049: PPUSH
47050: LD_VAR 0 4
47054: PPUSH
47055: CALL_OW 292
47059: IFFALSE 47073
// begin result := true ;
47061: LD_ADDR_VAR 0 3
47065: PUSH
47066: LD_INT 1
47068: ST_TO_ADDR
// exit ;
47069: POP
47070: POP
47071: GO 47077
// end ;
47073: GO 47042
47075: POP
47076: POP
// end ;
47077: LD_VAR 0 3
47081: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47082: LD_INT 0
47084: PPUSH
47085: PPUSH
47086: PPUSH
47087: PPUSH
// if not unit or not points then
47088: LD_VAR 0 1
47092: NOT
47093: PUSH
47094: LD_VAR 0 2
47098: NOT
47099: OR
47100: IFFALSE 47104
// exit ;
47102: GO 47194
// dist := 99999 ;
47104: LD_ADDR_VAR 0 5
47108: PUSH
47109: LD_INT 99999
47111: ST_TO_ADDR
// for i in points do
47112: LD_ADDR_VAR 0 4
47116: PUSH
47117: LD_VAR 0 2
47121: PUSH
47122: FOR_IN
47123: IFFALSE 47192
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47125: LD_ADDR_VAR 0 6
47129: PUSH
47130: LD_VAR 0 1
47134: PPUSH
47135: LD_VAR 0 4
47139: PUSH
47140: LD_INT 1
47142: ARRAY
47143: PPUSH
47144: LD_VAR 0 4
47148: PUSH
47149: LD_INT 2
47151: ARRAY
47152: PPUSH
47153: CALL_OW 297
47157: ST_TO_ADDR
// if tmpDist < dist then
47158: LD_VAR 0 6
47162: PUSH
47163: LD_VAR 0 5
47167: LESS
47168: IFFALSE 47190
// begin result := i ;
47170: LD_ADDR_VAR 0 3
47174: PUSH
47175: LD_VAR 0 4
47179: ST_TO_ADDR
// dist := tmpDist ;
47180: LD_ADDR_VAR 0 5
47184: PUSH
47185: LD_VAR 0 6
47189: ST_TO_ADDR
// end ; end ;
47190: GO 47122
47192: POP
47193: POP
// end ;
47194: LD_VAR 0 3
47198: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47199: LD_INT 0
47201: PPUSH
// uc_side := side ;
47202: LD_ADDR_OWVAR 20
47206: PUSH
47207: LD_VAR 0 1
47211: ST_TO_ADDR
// uc_nation := 3 ;
47212: LD_ADDR_OWVAR 21
47216: PUSH
47217: LD_INT 3
47219: ST_TO_ADDR
// vc_chassis := 25 ;
47220: LD_ADDR_OWVAR 37
47224: PUSH
47225: LD_INT 25
47227: ST_TO_ADDR
// vc_engine := engine_siberite ;
47228: LD_ADDR_OWVAR 39
47232: PUSH
47233: LD_INT 3
47235: ST_TO_ADDR
// vc_control := control_computer ;
47236: LD_ADDR_OWVAR 38
47240: PUSH
47241: LD_INT 3
47243: ST_TO_ADDR
// vc_weapon := 59 ;
47244: LD_ADDR_OWVAR 40
47248: PUSH
47249: LD_INT 59
47251: ST_TO_ADDR
// result := CreateVehicle ;
47252: LD_ADDR_VAR 0 5
47256: PUSH
47257: CALL_OW 45
47261: ST_TO_ADDR
// SetDir ( result , d ) ;
47262: LD_VAR 0 5
47266: PPUSH
47267: LD_VAR 0 4
47271: PPUSH
47272: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47276: LD_VAR 0 5
47280: PPUSH
47281: LD_VAR 0 2
47285: PPUSH
47286: LD_VAR 0 3
47290: PPUSH
47291: LD_INT 0
47293: PPUSH
47294: CALL_OW 48
// end ;
47298: LD_VAR 0 5
47302: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47303: LD_INT 0
47305: PPUSH
47306: PPUSH
47307: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47308: LD_ADDR_VAR 0 2
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: LD_INT 0
47318: PUSH
47319: LD_INT 0
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47331: LD_VAR 0 1
47335: NOT
47336: PUSH
47337: LD_VAR 0 1
47341: PPUSH
47342: CALL_OW 264
47346: PUSH
47347: LD_INT 12
47349: PUSH
47350: LD_INT 51
47352: PUSH
47353: LD_INT 32
47355: PUSH
47356: LD_INT 89
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: IN
47365: NOT
47366: OR
47367: IFFALSE 47371
// exit ;
47369: GO 47469
// for i := 1 to 3 do
47371: LD_ADDR_VAR 0 3
47375: PUSH
47376: DOUBLE
47377: LD_INT 1
47379: DEC
47380: ST_TO_ADDR
47381: LD_INT 3
47383: PUSH
47384: FOR_TO
47385: IFFALSE 47467
// begin tmp := GetCargo ( cargo , i ) ;
47387: LD_ADDR_VAR 0 4
47391: PUSH
47392: LD_VAR 0 1
47396: PPUSH
47397: LD_VAR 0 3
47401: PPUSH
47402: CALL_OW 289
47406: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47407: LD_ADDR_VAR 0 2
47411: PUSH
47412: LD_VAR 0 2
47416: PPUSH
47417: LD_VAR 0 3
47421: PPUSH
47422: LD_VAR 0 4
47426: PPUSH
47427: CALL_OW 1
47431: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47432: LD_ADDR_VAR 0 2
47436: PUSH
47437: LD_VAR 0 2
47441: PPUSH
47442: LD_INT 4
47444: PPUSH
47445: LD_VAR 0 2
47449: PUSH
47450: LD_INT 4
47452: ARRAY
47453: PUSH
47454: LD_VAR 0 4
47458: PLUS
47459: PPUSH
47460: CALL_OW 1
47464: ST_TO_ADDR
// end ;
47465: GO 47384
47467: POP
47468: POP
// end ;
47469: LD_VAR 0 2
47473: RET
// export function Length ( array ) ; begin
47474: LD_INT 0
47476: PPUSH
// result := array + 0 ;
47477: LD_ADDR_VAR 0 2
47481: PUSH
47482: LD_VAR 0 1
47486: PUSH
47487: LD_INT 0
47489: PLUS
47490: ST_TO_ADDR
// end ;
47491: LD_VAR 0 2
47495: RET
// export function PrepareArray ( array ) ; begin
47496: LD_INT 0
47498: PPUSH
// result := array diff 0 ;
47499: LD_ADDR_VAR 0 2
47503: PUSH
47504: LD_VAR 0 1
47508: PUSH
47509: LD_INT 0
47511: DIFF
47512: ST_TO_ADDR
// if not result [ 1 ] then
47513: LD_VAR 0 2
47517: PUSH
47518: LD_INT 1
47520: ARRAY
47521: NOT
47522: IFFALSE 47542
// result := Delete ( result , 1 ) ;
47524: LD_ADDR_VAR 0 2
47528: PUSH
47529: LD_VAR 0 2
47533: PPUSH
47534: LD_INT 1
47536: PPUSH
47537: CALL_OW 3
47541: ST_TO_ADDR
// end ;
47542: LD_VAR 0 2
47546: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
47547: LD_INT 0
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
// sibRocketRange := 25 ;
47553: LD_ADDR_VAR 0 6
47557: PUSH
47558: LD_INT 25
47560: ST_TO_ADDR
// result := false ;
47561: LD_ADDR_VAR 0 4
47565: PUSH
47566: LD_INT 0
47568: ST_TO_ADDR
// for i := 0 to 5 do
47569: LD_ADDR_VAR 0 5
47573: PUSH
47574: DOUBLE
47575: LD_INT 0
47577: DEC
47578: ST_TO_ADDR
47579: LD_INT 5
47581: PUSH
47582: FOR_TO
47583: IFFALSE 47650
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
47585: LD_VAR 0 1
47589: PPUSH
47590: LD_VAR 0 5
47594: PPUSH
47595: LD_VAR 0 6
47599: PPUSH
47600: CALL_OW 272
47604: PPUSH
47605: LD_VAR 0 2
47609: PPUSH
47610: LD_VAR 0 5
47614: PPUSH
47615: LD_VAR 0 6
47619: PPUSH
47620: CALL_OW 273
47624: PPUSH
47625: LD_VAR 0 3
47629: PPUSH
47630: CALL_OW 309
47634: IFFALSE 47648
// begin result := true ;
47636: LD_ADDR_VAR 0 4
47640: PUSH
47641: LD_INT 1
47643: ST_TO_ADDR
// exit ;
47644: POP
47645: POP
47646: GO 47652
// end ;
47648: GO 47582
47650: POP
47651: POP
// end ;
47652: LD_VAR 0 4
47656: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
47657: LD_INT 0
47659: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
47660: LD_VAR 0 1
47664: PPUSH
47665: LD_VAR 0 2
47669: PPUSH
47670: LD_INT 0
47672: PPUSH
47673: LD_INT 0
47675: PPUSH
47676: LD_INT 1
47678: PPUSH
47679: LD_INT 0
47681: PPUSH
47682: CALL_OW 587
// end ;
47686: LD_VAR 0 3
47690: RET
// export function CenterOnNow ( unit ) ; begin
47691: LD_INT 0
47693: PPUSH
// result := IsInUnit ( unit ) ;
47694: LD_ADDR_VAR 0 2
47698: PUSH
47699: LD_VAR 0 1
47703: PPUSH
47704: CALL_OW 310
47708: ST_TO_ADDR
// if not result then
47709: LD_VAR 0 2
47713: NOT
47714: IFFALSE 47726
// result := unit ;
47716: LD_ADDR_VAR 0 2
47720: PUSH
47721: LD_VAR 0 1
47725: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
47726: LD_VAR 0 1
47730: PPUSH
47731: CALL_OW 87
// end ;
47735: LD_VAR 0 2
47739: RET
// export function ComMoveHex ( unit , hex ) ; begin
47740: LD_INT 0
47742: PPUSH
// if not hex then
47743: LD_VAR 0 2
47747: NOT
47748: IFFALSE 47752
// exit ;
47750: GO 47805
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
47752: LD_VAR 0 2
47756: PUSH
47757: LD_INT 1
47759: ARRAY
47760: PPUSH
47761: LD_VAR 0 2
47765: PUSH
47766: LD_INT 2
47768: ARRAY
47769: PPUSH
47770: CALL_OW 428
47774: IFFALSE 47778
// exit ;
47776: GO 47805
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
47778: LD_VAR 0 1
47782: PPUSH
47783: LD_VAR 0 2
47787: PUSH
47788: LD_INT 1
47790: ARRAY
47791: PPUSH
47792: LD_VAR 0 2
47796: PUSH
47797: LD_INT 2
47799: ARRAY
47800: PPUSH
47801: CALL_OW 111
// end ;
47805: LD_VAR 0 3
47809: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
47810: LD_INT 0
47812: PPUSH
47813: PPUSH
47814: PPUSH
// if not unit or not enemy then
47815: LD_VAR 0 1
47819: NOT
47820: PUSH
47821: LD_VAR 0 2
47825: NOT
47826: OR
47827: IFFALSE 47831
// exit ;
47829: GO 47955
// x := GetX ( enemy ) ;
47831: LD_ADDR_VAR 0 4
47835: PUSH
47836: LD_VAR 0 2
47840: PPUSH
47841: CALL_OW 250
47845: ST_TO_ADDR
// y := GetY ( enemy ) ;
47846: LD_ADDR_VAR 0 5
47850: PUSH
47851: LD_VAR 0 2
47855: PPUSH
47856: CALL_OW 251
47860: ST_TO_ADDR
// if ValidHex ( x , y ) then
47861: LD_VAR 0 4
47865: PPUSH
47866: LD_VAR 0 5
47870: PPUSH
47871: CALL_OW 488
47875: IFFALSE 47955
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
47877: LD_VAR 0 2
47881: PPUSH
47882: CALL_OW 247
47886: PUSH
47887: LD_INT 3
47889: PUSH
47890: LD_INT 2
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: IN
47897: PUSH
47898: LD_VAR 0 1
47902: PPUSH
47903: CALL_OW 255
47907: PPUSH
47908: LD_VAR 0 2
47912: PPUSH
47913: CALL_OW 292
47917: AND
47918: IFFALSE 47936
// ComAttackUnit ( unit , enemy ) else
47920: LD_VAR 0 1
47924: PPUSH
47925: LD_VAR 0 2
47929: PPUSH
47930: CALL_OW 115
47934: GO 47955
// ComAgressiveMove ( unit , x , y ) ;
47936: LD_VAR 0 1
47940: PPUSH
47941: LD_VAR 0 4
47945: PPUSH
47946: LD_VAR 0 5
47950: PPUSH
47951: CALL_OW 114
// end ; end_of_file end_of_file
47955: LD_VAR 0 3
47959: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47960: LD_VAR 0 1
47964: PPUSH
47965: LD_VAR 0 2
47969: PPUSH
47970: LD_VAR 0 3
47974: PPUSH
47975: LD_VAR 0 4
47979: PPUSH
47980: LD_VAR 0 5
47984: PPUSH
47985: LD_VAR 0 6
47989: PPUSH
47990: CALL 48174 0 6
// end ;
47994: PPOPN 6
47996: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
47997: LD_INT 0
47999: PPUSH
// begin if not units then
48000: LD_VAR 0 1
48004: NOT
48005: IFFALSE 48009
// exit ;
48007: GO 48009
// end ;
48009: PPOPN 7
48011: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
48012: CALL 48078 0 0
// end ; end_of_file
48016: PPOPN 1
48018: END
// export globalGameSaveCounter ; every 0 0$1 do
48019: GO 48021
48021: DISABLE
// begin enable ;
48022: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48023: LD_STRING updateTimer(
48025: PUSH
48026: LD_OWVAR 1
48030: STR
48031: PUSH
48032: LD_STRING );
48034: STR
48035: PPUSH
48036: CALL_OW 559
// end ;
48040: END
// every 0 0$1 do
48041: GO 48043
48043: DISABLE
// begin globalGameSaveCounter := 0 ;
48044: LD_ADDR_EXP 29
48048: PUSH
48049: LD_INT 0
48051: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
48052: LD_STRING setGameSaveCounter(0)
48054: PPUSH
48055: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
48059: LD_STRING initStreamRollete();
48061: PPUSH
48062: CALL_OW 559
// InitStreamMode ;
48066: CALL 49392 0 0
// DefineStreamItems ( false ) ;
48070: LD_INT 0
48072: PPUSH
48073: CALL 49856 0 1
// end ;
48077: END
// export function SOS_MapStart ( ) ; begin
48078: LD_INT 0
48080: PPUSH
// if streamModeActive then
48081: LD_EXP 30
48085: IFFALSE 48094
// DefineStreamItems ( true ) ;
48087: LD_INT 1
48089: PPUSH
48090: CALL 49856 0 1
// UpdateLuaVariables ( ) ;
48094: CALL 48111 0 0
// UpdateFactoryWaypoints ( ) ;
48098: CALL 62725 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48102: CALL 62982 0 0
// end ;
48106: LD_VAR 0 1
48110: RET
// function UpdateLuaVariables ( ) ; begin
48111: LD_INT 0
48113: PPUSH
// if globalGameSaveCounter then
48114: LD_EXP 29
48118: IFFALSE 48152
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48120: LD_ADDR_EXP 29
48124: PUSH
48125: LD_EXP 29
48129: PPUSH
48130: CALL 45099 0 1
48134: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48135: LD_STRING setGameSaveCounter(
48137: PUSH
48138: LD_EXP 29
48142: STR
48143: PUSH
48144: LD_STRING )
48146: STR
48147: PPUSH
48148: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48152: LD_STRING setGameDifficulty(
48154: PUSH
48155: LD_OWVAR 67
48159: STR
48160: PUSH
48161: LD_STRING )
48163: STR
48164: PPUSH
48165: CALL_OW 559
// end ;
48169: LD_VAR 0 1
48173: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48174: LD_INT 0
48176: PPUSH
// if p2 = stream_mode then
48177: LD_VAR 0 2
48181: PUSH
48182: LD_INT 100
48184: EQUAL
48185: IFFALSE 49188
// begin if not StreamModeActive then
48187: LD_EXP 30
48191: NOT
48192: IFFALSE 48202
// StreamModeActive := true ;
48194: LD_ADDR_EXP 30
48198: PUSH
48199: LD_INT 1
48201: ST_TO_ADDR
// if p3 = 0 then
48202: LD_VAR 0 3
48206: PUSH
48207: LD_INT 0
48209: EQUAL
48210: IFFALSE 48216
// InitStreamMode ;
48212: CALL 49392 0 0
// if p3 = 1 then
48216: LD_VAR 0 3
48220: PUSH
48221: LD_INT 1
48223: EQUAL
48224: IFFALSE 48234
// sRocket := true ;
48226: LD_ADDR_EXP 35
48230: PUSH
48231: LD_INT 1
48233: ST_TO_ADDR
// if p3 = 2 then
48234: LD_VAR 0 3
48238: PUSH
48239: LD_INT 2
48241: EQUAL
48242: IFFALSE 48252
// sSpeed := true ;
48244: LD_ADDR_EXP 34
48248: PUSH
48249: LD_INT 1
48251: ST_TO_ADDR
// if p3 = 3 then
48252: LD_VAR 0 3
48256: PUSH
48257: LD_INT 3
48259: EQUAL
48260: IFFALSE 48270
// sEngine := true ;
48262: LD_ADDR_EXP 36
48266: PUSH
48267: LD_INT 1
48269: ST_TO_ADDR
// if p3 = 4 then
48270: LD_VAR 0 3
48274: PUSH
48275: LD_INT 4
48277: EQUAL
48278: IFFALSE 48288
// sSpec := true ;
48280: LD_ADDR_EXP 33
48284: PUSH
48285: LD_INT 1
48287: ST_TO_ADDR
// if p3 = 5 then
48288: LD_VAR 0 3
48292: PUSH
48293: LD_INT 5
48295: EQUAL
48296: IFFALSE 48306
// sLevel := true ;
48298: LD_ADDR_EXP 37
48302: PUSH
48303: LD_INT 1
48305: ST_TO_ADDR
// if p3 = 6 then
48306: LD_VAR 0 3
48310: PUSH
48311: LD_INT 6
48313: EQUAL
48314: IFFALSE 48324
// sArmoury := true ;
48316: LD_ADDR_EXP 38
48320: PUSH
48321: LD_INT 1
48323: ST_TO_ADDR
// if p3 = 7 then
48324: LD_VAR 0 3
48328: PUSH
48329: LD_INT 7
48331: EQUAL
48332: IFFALSE 48342
// sRadar := true ;
48334: LD_ADDR_EXP 39
48338: PUSH
48339: LD_INT 1
48341: ST_TO_ADDR
// if p3 = 8 then
48342: LD_VAR 0 3
48346: PUSH
48347: LD_INT 8
48349: EQUAL
48350: IFFALSE 48360
// sBunker := true ;
48352: LD_ADDR_EXP 40
48356: PUSH
48357: LD_INT 1
48359: ST_TO_ADDR
// if p3 = 9 then
48360: LD_VAR 0 3
48364: PUSH
48365: LD_INT 9
48367: EQUAL
48368: IFFALSE 48378
// sHack := true ;
48370: LD_ADDR_EXP 41
48374: PUSH
48375: LD_INT 1
48377: ST_TO_ADDR
// if p3 = 10 then
48378: LD_VAR 0 3
48382: PUSH
48383: LD_INT 10
48385: EQUAL
48386: IFFALSE 48396
// sFire := true ;
48388: LD_ADDR_EXP 42
48392: PUSH
48393: LD_INT 1
48395: ST_TO_ADDR
// if p3 = 11 then
48396: LD_VAR 0 3
48400: PUSH
48401: LD_INT 11
48403: EQUAL
48404: IFFALSE 48414
// sRefresh := true ;
48406: LD_ADDR_EXP 43
48410: PUSH
48411: LD_INT 1
48413: ST_TO_ADDR
// if p3 = 12 then
48414: LD_VAR 0 3
48418: PUSH
48419: LD_INT 12
48421: EQUAL
48422: IFFALSE 48432
// sExp := true ;
48424: LD_ADDR_EXP 44
48428: PUSH
48429: LD_INT 1
48431: ST_TO_ADDR
// if p3 = 13 then
48432: LD_VAR 0 3
48436: PUSH
48437: LD_INT 13
48439: EQUAL
48440: IFFALSE 48450
// sDepot := true ;
48442: LD_ADDR_EXP 45
48446: PUSH
48447: LD_INT 1
48449: ST_TO_ADDR
// if p3 = 14 then
48450: LD_VAR 0 3
48454: PUSH
48455: LD_INT 14
48457: EQUAL
48458: IFFALSE 48468
// sFlag := true ;
48460: LD_ADDR_EXP 46
48464: PUSH
48465: LD_INT 1
48467: ST_TO_ADDR
// if p3 = 15 then
48468: LD_VAR 0 3
48472: PUSH
48473: LD_INT 15
48475: EQUAL
48476: IFFALSE 48486
// sKamikadze := true ;
48478: LD_ADDR_EXP 54
48482: PUSH
48483: LD_INT 1
48485: ST_TO_ADDR
// if p3 = 16 then
48486: LD_VAR 0 3
48490: PUSH
48491: LD_INT 16
48493: EQUAL
48494: IFFALSE 48504
// sTroll := true ;
48496: LD_ADDR_EXP 55
48500: PUSH
48501: LD_INT 1
48503: ST_TO_ADDR
// if p3 = 17 then
48504: LD_VAR 0 3
48508: PUSH
48509: LD_INT 17
48511: EQUAL
48512: IFFALSE 48522
// sSlow := true ;
48514: LD_ADDR_EXP 56
48518: PUSH
48519: LD_INT 1
48521: ST_TO_ADDR
// if p3 = 18 then
48522: LD_VAR 0 3
48526: PUSH
48527: LD_INT 18
48529: EQUAL
48530: IFFALSE 48540
// sLack := true ;
48532: LD_ADDR_EXP 57
48536: PUSH
48537: LD_INT 1
48539: ST_TO_ADDR
// if p3 = 19 then
48540: LD_VAR 0 3
48544: PUSH
48545: LD_INT 19
48547: EQUAL
48548: IFFALSE 48558
// sTank := true ;
48550: LD_ADDR_EXP 59
48554: PUSH
48555: LD_INT 1
48557: ST_TO_ADDR
// if p3 = 20 then
48558: LD_VAR 0 3
48562: PUSH
48563: LD_INT 20
48565: EQUAL
48566: IFFALSE 48576
// sRemote := true ;
48568: LD_ADDR_EXP 60
48572: PUSH
48573: LD_INT 1
48575: ST_TO_ADDR
// if p3 = 21 then
48576: LD_VAR 0 3
48580: PUSH
48581: LD_INT 21
48583: EQUAL
48584: IFFALSE 48594
// sPowell := true ;
48586: LD_ADDR_EXP 61
48590: PUSH
48591: LD_INT 1
48593: ST_TO_ADDR
// if p3 = 22 then
48594: LD_VAR 0 3
48598: PUSH
48599: LD_INT 22
48601: EQUAL
48602: IFFALSE 48612
// sTeleport := true ;
48604: LD_ADDR_EXP 64
48608: PUSH
48609: LD_INT 1
48611: ST_TO_ADDR
// if p3 = 23 then
48612: LD_VAR 0 3
48616: PUSH
48617: LD_INT 23
48619: EQUAL
48620: IFFALSE 48630
// sOilTower := true ;
48622: LD_ADDR_EXP 66
48626: PUSH
48627: LD_INT 1
48629: ST_TO_ADDR
// if p3 = 24 then
48630: LD_VAR 0 3
48634: PUSH
48635: LD_INT 24
48637: EQUAL
48638: IFFALSE 48648
// sShovel := true ;
48640: LD_ADDR_EXP 67
48644: PUSH
48645: LD_INT 1
48647: ST_TO_ADDR
// if p3 = 25 then
48648: LD_VAR 0 3
48652: PUSH
48653: LD_INT 25
48655: EQUAL
48656: IFFALSE 48666
// sSheik := true ;
48658: LD_ADDR_EXP 68
48662: PUSH
48663: LD_INT 1
48665: ST_TO_ADDR
// if p3 = 26 then
48666: LD_VAR 0 3
48670: PUSH
48671: LD_INT 26
48673: EQUAL
48674: IFFALSE 48684
// sEarthquake := true ;
48676: LD_ADDR_EXP 70
48680: PUSH
48681: LD_INT 1
48683: ST_TO_ADDR
// if p3 = 27 then
48684: LD_VAR 0 3
48688: PUSH
48689: LD_INT 27
48691: EQUAL
48692: IFFALSE 48702
// sAI := true ;
48694: LD_ADDR_EXP 71
48698: PUSH
48699: LD_INT 1
48701: ST_TO_ADDR
// if p3 = 28 then
48702: LD_VAR 0 3
48706: PUSH
48707: LD_INT 28
48709: EQUAL
48710: IFFALSE 48720
// sCargo := true ;
48712: LD_ADDR_EXP 74
48716: PUSH
48717: LD_INT 1
48719: ST_TO_ADDR
// if p3 = 29 then
48720: LD_VAR 0 3
48724: PUSH
48725: LD_INT 29
48727: EQUAL
48728: IFFALSE 48738
// sDLaser := true ;
48730: LD_ADDR_EXP 75
48734: PUSH
48735: LD_INT 1
48737: ST_TO_ADDR
// if p3 = 30 then
48738: LD_VAR 0 3
48742: PUSH
48743: LD_INT 30
48745: EQUAL
48746: IFFALSE 48756
// sExchange := true ;
48748: LD_ADDR_EXP 76
48752: PUSH
48753: LD_INT 1
48755: ST_TO_ADDR
// if p3 = 31 then
48756: LD_VAR 0 3
48760: PUSH
48761: LD_INT 31
48763: EQUAL
48764: IFFALSE 48774
// sFac := true ;
48766: LD_ADDR_EXP 77
48770: PUSH
48771: LD_INT 1
48773: ST_TO_ADDR
// if p3 = 32 then
48774: LD_VAR 0 3
48778: PUSH
48779: LD_INT 32
48781: EQUAL
48782: IFFALSE 48792
// sPower := true ;
48784: LD_ADDR_EXP 78
48788: PUSH
48789: LD_INT 1
48791: ST_TO_ADDR
// if p3 = 33 then
48792: LD_VAR 0 3
48796: PUSH
48797: LD_INT 33
48799: EQUAL
48800: IFFALSE 48810
// sRandom := true ;
48802: LD_ADDR_EXP 79
48806: PUSH
48807: LD_INT 1
48809: ST_TO_ADDR
// if p3 = 34 then
48810: LD_VAR 0 3
48814: PUSH
48815: LD_INT 34
48817: EQUAL
48818: IFFALSE 48828
// sShield := true ;
48820: LD_ADDR_EXP 80
48824: PUSH
48825: LD_INT 1
48827: ST_TO_ADDR
// if p3 = 35 then
48828: LD_VAR 0 3
48832: PUSH
48833: LD_INT 35
48835: EQUAL
48836: IFFALSE 48846
// sTime := true ;
48838: LD_ADDR_EXP 81
48842: PUSH
48843: LD_INT 1
48845: ST_TO_ADDR
// if p3 = 36 then
48846: LD_VAR 0 3
48850: PUSH
48851: LD_INT 36
48853: EQUAL
48854: IFFALSE 48864
// sTools := true ;
48856: LD_ADDR_EXP 82
48860: PUSH
48861: LD_INT 1
48863: ST_TO_ADDR
// if p3 = 101 then
48864: LD_VAR 0 3
48868: PUSH
48869: LD_INT 101
48871: EQUAL
48872: IFFALSE 48882
// sSold := true ;
48874: LD_ADDR_EXP 47
48878: PUSH
48879: LD_INT 1
48881: ST_TO_ADDR
// if p3 = 102 then
48882: LD_VAR 0 3
48886: PUSH
48887: LD_INT 102
48889: EQUAL
48890: IFFALSE 48900
// sDiff := true ;
48892: LD_ADDR_EXP 48
48896: PUSH
48897: LD_INT 1
48899: ST_TO_ADDR
// if p3 = 103 then
48900: LD_VAR 0 3
48904: PUSH
48905: LD_INT 103
48907: EQUAL
48908: IFFALSE 48918
// sFog := true ;
48910: LD_ADDR_EXP 51
48914: PUSH
48915: LD_INT 1
48917: ST_TO_ADDR
// if p3 = 104 then
48918: LD_VAR 0 3
48922: PUSH
48923: LD_INT 104
48925: EQUAL
48926: IFFALSE 48936
// sReset := true ;
48928: LD_ADDR_EXP 52
48932: PUSH
48933: LD_INT 1
48935: ST_TO_ADDR
// if p3 = 105 then
48936: LD_VAR 0 3
48940: PUSH
48941: LD_INT 105
48943: EQUAL
48944: IFFALSE 48954
// sSun := true ;
48946: LD_ADDR_EXP 53
48950: PUSH
48951: LD_INT 1
48953: ST_TO_ADDR
// if p3 = 106 then
48954: LD_VAR 0 3
48958: PUSH
48959: LD_INT 106
48961: EQUAL
48962: IFFALSE 48972
// sTiger := true ;
48964: LD_ADDR_EXP 49
48968: PUSH
48969: LD_INT 1
48971: ST_TO_ADDR
// if p3 = 107 then
48972: LD_VAR 0 3
48976: PUSH
48977: LD_INT 107
48979: EQUAL
48980: IFFALSE 48990
// sBomb := true ;
48982: LD_ADDR_EXP 50
48986: PUSH
48987: LD_INT 1
48989: ST_TO_ADDR
// if p3 = 108 then
48990: LD_VAR 0 3
48994: PUSH
48995: LD_INT 108
48997: EQUAL
48998: IFFALSE 49008
// sWound := true ;
49000: LD_ADDR_EXP 58
49004: PUSH
49005: LD_INT 1
49007: ST_TO_ADDR
// if p3 = 109 then
49008: LD_VAR 0 3
49012: PUSH
49013: LD_INT 109
49015: EQUAL
49016: IFFALSE 49026
// sBetray := true ;
49018: LD_ADDR_EXP 62
49022: PUSH
49023: LD_INT 1
49025: ST_TO_ADDR
// if p3 = 110 then
49026: LD_VAR 0 3
49030: PUSH
49031: LD_INT 110
49033: EQUAL
49034: IFFALSE 49044
// sContamin := true ;
49036: LD_ADDR_EXP 63
49040: PUSH
49041: LD_INT 1
49043: ST_TO_ADDR
// if p3 = 111 then
49044: LD_VAR 0 3
49048: PUSH
49049: LD_INT 111
49051: EQUAL
49052: IFFALSE 49062
// sOil := true ;
49054: LD_ADDR_EXP 65
49058: PUSH
49059: LD_INT 1
49061: ST_TO_ADDR
// if p3 = 112 then
49062: LD_VAR 0 3
49066: PUSH
49067: LD_INT 112
49069: EQUAL
49070: IFFALSE 49080
// sStu := true ;
49072: LD_ADDR_EXP 69
49076: PUSH
49077: LD_INT 1
49079: ST_TO_ADDR
// if p3 = 113 then
49080: LD_VAR 0 3
49084: PUSH
49085: LD_INT 113
49087: EQUAL
49088: IFFALSE 49098
// sBazooka := true ;
49090: LD_ADDR_EXP 72
49094: PUSH
49095: LD_INT 1
49097: ST_TO_ADDR
// if p3 = 114 then
49098: LD_VAR 0 3
49102: PUSH
49103: LD_INT 114
49105: EQUAL
49106: IFFALSE 49116
// sMortar := true ;
49108: LD_ADDR_EXP 73
49112: PUSH
49113: LD_INT 1
49115: ST_TO_ADDR
// if p3 = 115 then
49116: LD_VAR 0 3
49120: PUSH
49121: LD_INT 115
49123: EQUAL
49124: IFFALSE 49134
// sRanger := true ;
49126: LD_ADDR_EXP 83
49130: PUSH
49131: LD_INT 1
49133: ST_TO_ADDR
// if p3 = 116 then
49134: LD_VAR 0 3
49138: PUSH
49139: LD_INT 116
49141: EQUAL
49142: IFFALSE 49152
// sComputer := true ;
49144: LD_ADDR_EXP 84
49148: PUSH
49149: LD_INT 1
49151: ST_TO_ADDR
// if p3 = 117 then
49152: LD_VAR 0 3
49156: PUSH
49157: LD_INT 117
49159: EQUAL
49160: IFFALSE 49170
// s30 := true ;
49162: LD_ADDR_EXP 85
49166: PUSH
49167: LD_INT 1
49169: ST_TO_ADDR
// if p3 = 118 then
49170: LD_VAR 0 3
49174: PUSH
49175: LD_INT 118
49177: EQUAL
49178: IFFALSE 49188
// s60 := true ;
49180: LD_ADDR_EXP 86
49184: PUSH
49185: LD_INT 1
49187: ST_TO_ADDR
// end ; if p2 = hack_mode then
49188: LD_VAR 0 2
49192: PUSH
49193: LD_INT 101
49195: EQUAL
49196: IFFALSE 49324
// begin case p3 of 1 :
49198: LD_VAR 0 3
49202: PUSH
49203: LD_INT 1
49205: DOUBLE
49206: EQUAL
49207: IFTRUE 49211
49209: GO 49218
49211: POP
// hHackUnlimitedResources ; 2 :
49212: CALL 61471 0 0
49216: GO 49324
49218: LD_INT 2
49220: DOUBLE
49221: EQUAL
49222: IFTRUE 49226
49224: GO 49233
49226: POP
// hHackSetLevel10 ; 3 :
49227: CALL 61604 0 0
49231: GO 49324
49233: LD_INT 3
49235: DOUBLE
49236: EQUAL
49237: IFTRUE 49241
49239: GO 49248
49241: POP
// hHackSetLevel10YourUnits ; 4 :
49242: CALL 61689 0 0
49246: GO 49324
49248: LD_INT 4
49250: DOUBLE
49251: EQUAL
49252: IFTRUE 49256
49254: GO 49263
49256: POP
// hHackInvincible ; 5 :
49257: CALL 62137 0 0
49261: GO 49324
49263: LD_INT 5
49265: DOUBLE
49266: EQUAL
49267: IFTRUE 49271
49269: GO 49278
49271: POP
// hHackInvisible ; 6 :
49272: CALL 62248 0 0
49276: GO 49324
49278: LD_INT 6
49280: DOUBLE
49281: EQUAL
49282: IFTRUE 49286
49284: GO 49293
49286: POP
// hHackChangeYourSide ; 7 :
49287: CALL 62305 0 0
49291: GO 49324
49293: LD_INT 7
49295: DOUBLE
49296: EQUAL
49297: IFTRUE 49301
49299: GO 49308
49301: POP
// hHackChangeUnitSide ; 8 :
49302: CALL 62347 0 0
49306: GO 49324
49308: LD_INT 8
49310: DOUBLE
49311: EQUAL
49312: IFTRUE 49316
49314: GO 49323
49316: POP
// hHackFog ; end ;
49317: CALL 62448 0 0
49321: GO 49324
49323: POP
// end ; if p2 = game_save_mode then
49324: LD_VAR 0 2
49328: PUSH
49329: LD_INT 102
49331: EQUAL
49332: IFFALSE 49387
// begin if p3 = 1 then
49334: LD_VAR 0 3
49338: PUSH
49339: LD_INT 1
49341: EQUAL
49342: IFFALSE 49354
// globalGameSaveCounter := p4 ;
49344: LD_ADDR_EXP 29
49348: PUSH
49349: LD_VAR 0 4
49353: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49354: LD_VAR 0 3
49358: PUSH
49359: LD_INT 2
49361: EQUAL
49362: PUSH
49363: LD_EXP 29
49367: AND
49368: IFFALSE 49387
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49370: LD_STRING setGameSaveCounter(
49372: PUSH
49373: LD_EXP 29
49377: STR
49378: PUSH
49379: LD_STRING )
49381: STR
49382: PPUSH
49383: CALL_OW 559
// end ; end ;
49387: LD_VAR 0 7
49391: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49392: LD_INT 0
49394: PPUSH
// streamModeActive := false ;
49395: LD_ADDR_EXP 30
49399: PUSH
49400: LD_INT 0
49402: ST_TO_ADDR
// normalCounter := 36 ;
49403: LD_ADDR_EXP 31
49407: PUSH
49408: LD_INT 36
49410: ST_TO_ADDR
// hardcoreCounter := 18 ;
49411: LD_ADDR_EXP 32
49415: PUSH
49416: LD_INT 18
49418: ST_TO_ADDR
// sRocket := false ;
49419: LD_ADDR_EXP 35
49423: PUSH
49424: LD_INT 0
49426: ST_TO_ADDR
// sSpeed := false ;
49427: LD_ADDR_EXP 34
49431: PUSH
49432: LD_INT 0
49434: ST_TO_ADDR
// sEngine := false ;
49435: LD_ADDR_EXP 36
49439: PUSH
49440: LD_INT 0
49442: ST_TO_ADDR
// sSpec := false ;
49443: LD_ADDR_EXP 33
49447: PUSH
49448: LD_INT 0
49450: ST_TO_ADDR
// sLevel := false ;
49451: LD_ADDR_EXP 37
49455: PUSH
49456: LD_INT 0
49458: ST_TO_ADDR
// sArmoury := false ;
49459: LD_ADDR_EXP 38
49463: PUSH
49464: LD_INT 0
49466: ST_TO_ADDR
// sRadar := false ;
49467: LD_ADDR_EXP 39
49471: PUSH
49472: LD_INT 0
49474: ST_TO_ADDR
// sBunker := false ;
49475: LD_ADDR_EXP 40
49479: PUSH
49480: LD_INT 0
49482: ST_TO_ADDR
// sHack := false ;
49483: LD_ADDR_EXP 41
49487: PUSH
49488: LD_INT 0
49490: ST_TO_ADDR
// sFire := false ;
49491: LD_ADDR_EXP 42
49495: PUSH
49496: LD_INT 0
49498: ST_TO_ADDR
// sRefresh := false ;
49499: LD_ADDR_EXP 43
49503: PUSH
49504: LD_INT 0
49506: ST_TO_ADDR
// sExp := false ;
49507: LD_ADDR_EXP 44
49511: PUSH
49512: LD_INT 0
49514: ST_TO_ADDR
// sDepot := false ;
49515: LD_ADDR_EXP 45
49519: PUSH
49520: LD_INT 0
49522: ST_TO_ADDR
// sFlag := false ;
49523: LD_ADDR_EXP 46
49527: PUSH
49528: LD_INT 0
49530: ST_TO_ADDR
// sKamikadze := false ;
49531: LD_ADDR_EXP 54
49535: PUSH
49536: LD_INT 0
49538: ST_TO_ADDR
// sTroll := false ;
49539: LD_ADDR_EXP 55
49543: PUSH
49544: LD_INT 0
49546: ST_TO_ADDR
// sSlow := false ;
49547: LD_ADDR_EXP 56
49551: PUSH
49552: LD_INT 0
49554: ST_TO_ADDR
// sLack := false ;
49555: LD_ADDR_EXP 57
49559: PUSH
49560: LD_INT 0
49562: ST_TO_ADDR
// sTank := false ;
49563: LD_ADDR_EXP 59
49567: PUSH
49568: LD_INT 0
49570: ST_TO_ADDR
// sRemote := false ;
49571: LD_ADDR_EXP 60
49575: PUSH
49576: LD_INT 0
49578: ST_TO_ADDR
// sPowell := false ;
49579: LD_ADDR_EXP 61
49583: PUSH
49584: LD_INT 0
49586: ST_TO_ADDR
// sTeleport := false ;
49587: LD_ADDR_EXP 64
49591: PUSH
49592: LD_INT 0
49594: ST_TO_ADDR
// sOilTower := false ;
49595: LD_ADDR_EXP 66
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// sShovel := false ;
49603: LD_ADDR_EXP 67
49607: PUSH
49608: LD_INT 0
49610: ST_TO_ADDR
// sSheik := false ;
49611: LD_ADDR_EXP 68
49615: PUSH
49616: LD_INT 0
49618: ST_TO_ADDR
// sEarthquake := false ;
49619: LD_ADDR_EXP 70
49623: PUSH
49624: LD_INT 0
49626: ST_TO_ADDR
// sAI := false ;
49627: LD_ADDR_EXP 71
49631: PUSH
49632: LD_INT 0
49634: ST_TO_ADDR
// sCargo := false ;
49635: LD_ADDR_EXP 74
49639: PUSH
49640: LD_INT 0
49642: ST_TO_ADDR
// sDLaser := false ;
49643: LD_ADDR_EXP 75
49647: PUSH
49648: LD_INT 0
49650: ST_TO_ADDR
// sExchange := false ;
49651: LD_ADDR_EXP 76
49655: PUSH
49656: LD_INT 0
49658: ST_TO_ADDR
// sFac := false ;
49659: LD_ADDR_EXP 77
49663: PUSH
49664: LD_INT 0
49666: ST_TO_ADDR
// sPower := false ;
49667: LD_ADDR_EXP 78
49671: PUSH
49672: LD_INT 0
49674: ST_TO_ADDR
// sRandom := false ;
49675: LD_ADDR_EXP 79
49679: PUSH
49680: LD_INT 0
49682: ST_TO_ADDR
// sShield := false ;
49683: LD_ADDR_EXP 80
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// sTime := false ;
49691: LD_ADDR_EXP 81
49695: PUSH
49696: LD_INT 0
49698: ST_TO_ADDR
// sTools := false ;
49699: LD_ADDR_EXP 82
49703: PUSH
49704: LD_INT 0
49706: ST_TO_ADDR
// sSold := false ;
49707: LD_ADDR_EXP 47
49711: PUSH
49712: LD_INT 0
49714: ST_TO_ADDR
// sDiff := false ;
49715: LD_ADDR_EXP 48
49719: PUSH
49720: LD_INT 0
49722: ST_TO_ADDR
// sFog := false ;
49723: LD_ADDR_EXP 51
49727: PUSH
49728: LD_INT 0
49730: ST_TO_ADDR
// sReset := false ;
49731: LD_ADDR_EXP 52
49735: PUSH
49736: LD_INT 0
49738: ST_TO_ADDR
// sSun := false ;
49739: LD_ADDR_EXP 53
49743: PUSH
49744: LD_INT 0
49746: ST_TO_ADDR
// sTiger := false ;
49747: LD_ADDR_EXP 49
49751: PUSH
49752: LD_INT 0
49754: ST_TO_ADDR
// sBomb := false ;
49755: LD_ADDR_EXP 50
49759: PUSH
49760: LD_INT 0
49762: ST_TO_ADDR
// sWound := false ;
49763: LD_ADDR_EXP 58
49767: PUSH
49768: LD_INT 0
49770: ST_TO_ADDR
// sBetray := false ;
49771: LD_ADDR_EXP 62
49775: PUSH
49776: LD_INT 0
49778: ST_TO_ADDR
// sContamin := false ;
49779: LD_ADDR_EXP 63
49783: PUSH
49784: LD_INT 0
49786: ST_TO_ADDR
// sOil := false ;
49787: LD_ADDR_EXP 65
49791: PUSH
49792: LD_INT 0
49794: ST_TO_ADDR
// sStu := false ;
49795: LD_ADDR_EXP 69
49799: PUSH
49800: LD_INT 0
49802: ST_TO_ADDR
// sBazooka := false ;
49803: LD_ADDR_EXP 72
49807: PUSH
49808: LD_INT 0
49810: ST_TO_ADDR
// sMortar := false ;
49811: LD_ADDR_EXP 73
49815: PUSH
49816: LD_INT 0
49818: ST_TO_ADDR
// sRanger := false ;
49819: LD_ADDR_EXP 83
49823: PUSH
49824: LD_INT 0
49826: ST_TO_ADDR
// sComputer := false ;
49827: LD_ADDR_EXP 84
49831: PUSH
49832: LD_INT 0
49834: ST_TO_ADDR
// s30 := false ;
49835: LD_ADDR_EXP 85
49839: PUSH
49840: LD_INT 0
49842: ST_TO_ADDR
// s60 := false ;
49843: LD_ADDR_EXP 86
49847: PUSH
49848: LD_INT 0
49850: ST_TO_ADDR
// end ;
49851: LD_VAR 0 1
49855: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49856: LD_INT 0
49858: PPUSH
49859: PPUSH
49860: PPUSH
49861: PPUSH
49862: PPUSH
49863: PPUSH
49864: PPUSH
// result := [ ] ;
49865: LD_ADDR_VAR 0 2
49869: PUSH
49870: EMPTY
49871: ST_TO_ADDR
// if campaign_id = 1 then
49872: LD_OWVAR 69
49876: PUSH
49877: LD_INT 1
49879: EQUAL
49880: IFFALSE 53046
// begin case mission_number of 1 :
49882: LD_OWVAR 70
49886: PUSH
49887: LD_INT 1
49889: DOUBLE
49890: EQUAL
49891: IFTRUE 49895
49893: GO 49971
49895: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49896: LD_ADDR_VAR 0 2
49900: PUSH
49901: LD_INT 2
49903: PUSH
49904: LD_INT 4
49906: PUSH
49907: LD_INT 11
49909: PUSH
49910: LD_INT 12
49912: PUSH
49913: LD_INT 15
49915: PUSH
49916: LD_INT 16
49918: PUSH
49919: LD_INT 22
49921: PUSH
49922: LD_INT 23
49924: PUSH
49925: LD_INT 26
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 101
49941: PUSH
49942: LD_INT 102
49944: PUSH
49945: LD_INT 106
49947: PUSH
49948: LD_INT 116
49950: PUSH
49951: LD_INT 117
49953: PUSH
49954: LD_INT 118
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: ST_TO_ADDR
49969: GO 53044
49971: LD_INT 2
49973: DOUBLE
49974: EQUAL
49975: IFTRUE 49979
49977: GO 50063
49979: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49980: LD_ADDR_VAR 0 2
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 4
49990: PUSH
49991: LD_INT 11
49993: PUSH
49994: LD_INT 12
49996: PUSH
49997: LD_INT 15
49999: PUSH
50000: LD_INT 16
50002: PUSH
50003: LD_INT 22
50005: PUSH
50006: LD_INT 23
50008: PUSH
50009: LD_INT 26
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 101
50025: PUSH
50026: LD_INT 102
50028: PUSH
50029: LD_INT 105
50031: PUSH
50032: LD_INT 106
50034: PUSH
50035: LD_INT 108
50037: PUSH
50038: LD_INT 116
50040: PUSH
50041: LD_INT 117
50043: PUSH
50044: LD_INT 118
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: ST_TO_ADDR
50061: GO 53044
50063: LD_INT 3
50065: DOUBLE
50066: EQUAL
50067: IFTRUE 50071
50069: GO 50159
50071: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50072: LD_ADDR_VAR 0 2
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 4
50082: PUSH
50083: LD_INT 5
50085: PUSH
50086: LD_INT 11
50088: PUSH
50089: LD_INT 12
50091: PUSH
50092: LD_INT 15
50094: PUSH
50095: LD_INT 16
50097: PUSH
50098: LD_INT 22
50100: PUSH
50101: LD_INT 26
50103: PUSH
50104: LD_INT 36
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 101
50121: PUSH
50122: LD_INT 102
50124: PUSH
50125: LD_INT 105
50127: PUSH
50128: LD_INT 106
50130: PUSH
50131: LD_INT 108
50133: PUSH
50134: LD_INT 116
50136: PUSH
50137: LD_INT 117
50139: PUSH
50140: LD_INT 118
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: ST_TO_ADDR
50157: GO 53044
50159: LD_INT 4
50161: DOUBLE
50162: EQUAL
50163: IFTRUE 50167
50165: GO 50263
50167: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50168: LD_ADDR_VAR 0 2
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 4
50178: PUSH
50179: LD_INT 5
50181: PUSH
50182: LD_INT 8
50184: PUSH
50185: LD_INT 11
50187: PUSH
50188: LD_INT 12
50190: PUSH
50191: LD_INT 15
50193: PUSH
50194: LD_INT 16
50196: PUSH
50197: LD_INT 22
50199: PUSH
50200: LD_INT 23
50202: PUSH
50203: LD_INT 26
50205: PUSH
50206: LD_INT 36
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 101
50225: PUSH
50226: LD_INT 102
50228: PUSH
50229: LD_INT 105
50231: PUSH
50232: LD_INT 106
50234: PUSH
50235: LD_INT 108
50237: PUSH
50238: LD_INT 116
50240: PUSH
50241: LD_INT 117
50243: PUSH
50244: LD_INT 118
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: ST_TO_ADDR
50261: GO 53044
50263: LD_INT 5
50265: DOUBLE
50266: EQUAL
50267: IFTRUE 50271
50269: GO 50383
50271: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50272: LD_ADDR_VAR 0 2
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 4
50282: PUSH
50283: LD_INT 5
50285: PUSH
50286: LD_INT 6
50288: PUSH
50289: LD_INT 8
50291: PUSH
50292: LD_INT 11
50294: PUSH
50295: LD_INT 12
50297: PUSH
50298: LD_INT 15
50300: PUSH
50301: LD_INT 16
50303: PUSH
50304: LD_INT 22
50306: PUSH
50307: LD_INT 23
50309: PUSH
50310: LD_INT 25
50312: PUSH
50313: LD_INT 26
50315: PUSH
50316: LD_INT 36
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 101
50337: PUSH
50338: LD_INT 102
50340: PUSH
50341: LD_INT 105
50343: PUSH
50344: LD_INT 106
50346: PUSH
50347: LD_INT 108
50349: PUSH
50350: LD_INT 109
50352: PUSH
50353: LD_INT 112
50355: PUSH
50356: LD_INT 116
50358: PUSH
50359: LD_INT 117
50361: PUSH
50362: LD_INT 118
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: ST_TO_ADDR
50381: GO 53044
50383: LD_INT 6
50385: DOUBLE
50386: EQUAL
50387: IFTRUE 50391
50389: GO 50523
50391: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50392: LD_ADDR_VAR 0 2
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 4
50402: PUSH
50403: LD_INT 5
50405: PUSH
50406: LD_INT 6
50408: PUSH
50409: LD_INT 8
50411: PUSH
50412: LD_INT 11
50414: PUSH
50415: LD_INT 12
50417: PUSH
50418: LD_INT 15
50420: PUSH
50421: LD_INT 16
50423: PUSH
50424: LD_INT 20
50426: PUSH
50427: LD_INT 21
50429: PUSH
50430: LD_INT 22
50432: PUSH
50433: LD_INT 23
50435: PUSH
50436: LD_INT 25
50438: PUSH
50439: LD_INT 26
50441: PUSH
50442: LD_INT 30
50444: PUSH
50445: LD_INT 31
50447: PUSH
50448: LD_INT 32
50450: PUSH
50451: LD_INT 36
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 101
50477: PUSH
50478: LD_INT 102
50480: PUSH
50481: LD_INT 105
50483: PUSH
50484: LD_INT 106
50486: PUSH
50487: LD_INT 108
50489: PUSH
50490: LD_INT 109
50492: PUSH
50493: LD_INT 112
50495: PUSH
50496: LD_INT 116
50498: PUSH
50499: LD_INT 117
50501: PUSH
50502: LD_INT 118
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: ST_TO_ADDR
50521: GO 53044
50523: LD_INT 7
50525: DOUBLE
50526: EQUAL
50527: IFTRUE 50531
50529: GO 50643
50531: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50532: LD_ADDR_VAR 0 2
50536: PUSH
50537: LD_INT 2
50539: PUSH
50540: LD_INT 4
50542: PUSH
50543: LD_INT 5
50545: PUSH
50546: LD_INT 7
50548: PUSH
50549: LD_INT 11
50551: PUSH
50552: LD_INT 12
50554: PUSH
50555: LD_INT 15
50557: PUSH
50558: LD_INT 16
50560: PUSH
50561: LD_INT 20
50563: PUSH
50564: LD_INT 21
50566: PUSH
50567: LD_INT 22
50569: PUSH
50570: LD_INT 23
50572: PUSH
50573: LD_INT 25
50575: PUSH
50576: LD_INT 26
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 101
50597: PUSH
50598: LD_INT 102
50600: PUSH
50601: LD_INT 103
50603: PUSH
50604: LD_INT 105
50606: PUSH
50607: LD_INT 106
50609: PUSH
50610: LD_INT 108
50612: PUSH
50613: LD_INT 112
50615: PUSH
50616: LD_INT 116
50618: PUSH
50619: LD_INT 117
50621: PUSH
50622: LD_INT 118
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: ST_TO_ADDR
50641: GO 53044
50643: LD_INT 8
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50651
50649: GO 50791
50651: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50652: LD_ADDR_VAR 0 2
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: LD_INT 4
50662: PUSH
50663: LD_INT 5
50665: PUSH
50666: LD_INT 6
50668: PUSH
50669: LD_INT 7
50671: PUSH
50672: LD_INT 8
50674: PUSH
50675: LD_INT 11
50677: PUSH
50678: LD_INT 12
50680: PUSH
50681: LD_INT 15
50683: PUSH
50684: LD_INT 16
50686: PUSH
50687: LD_INT 20
50689: PUSH
50690: LD_INT 21
50692: PUSH
50693: LD_INT 22
50695: PUSH
50696: LD_INT 23
50698: PUSH
50699: LD_INT 25
50701: PUSH
50702: LD_INT 26
50704: PUSH
50705: LD_INT 30
50707: PUSH
50708: LD_INT 31
50710: PUSH
50711: LD_INT 32
50713: PUSH
50714: LD_INT 36
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 101
50741: PUSH
50742: LD_INT 102
50744: PUSH
50745: LD_INT 103
50747: PUSH
50748: LD_INT 105
50750: PUSH
50751: LD_INT 106
50753: PUSH
50754: LD_INT 108
50756: PUSH
50757: LD_INT 109
50759: PUSH
50760: LD_INT 112
50762: PUSH
50763: LD_INT 116
50765: PUSH
50766: LD_INT 117
50768: PUSH
50769: LD_INT 118
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: ST_TO_ADDR
50789: GO 53044
50791: LD_INT 9
50793: DOUBLE
50794: EQUAL
50795: IFTRUE 50799
50797: GO 50947
50799: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50800: LD_ADDR_VAR 0 2
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: LD_INT 4
50810: PUSH
50811: LD_INT 5
50813: PUSH
50814: LD_INT 6
50816: PUSH
50817: LD_INT 7
50819: PUSH
50820: LD_INT 8
50822: PUSH
50823: LD_INT 11
50825: PUSH
50826: LD_INT 12
50828: PUSH
50829: LD_INT 15
50831: PUSH
50832: LD_INT 16
50834: PUSH
50835: LD_INT 20
50837: PUSH
50838: LD_INT 21
50840: PUSH
50841: LD_INT 22
50843: PUSH
50844: LD_INT 23
50846: PUSH
50847: LD_INT 25
50849: PUSH
50850: LD_INT 26
50852: PUSH
50853: LD_INT 28
50855: PUSH
50856: LD_INT 30
50858: PUSH
50859: LD_INT 31
50861: PUSH
50862: LD_INT 32
50864: PUSH
50865: LD_INT 36
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 101
50893: PUSH
50894: LD_INT 102
50896: PUSH
50897: LD_INT 103
50899: PUSH
50900: LD_INT 105
50902: PUSH
50903: LD_INT 106
50905: PUSH
50906: LD_INT 108
50908: PUSH
50909: LD_INT 109
50911: PUSH
50912: LD_INT 112
50914: PUSH
50915: LD_INT 114
50917: PUSH
50918: LD_INT 116
50920: PUSH
50921: LD_INT 117
50923: PUSH
50924: LD_INT 118
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: ST_TO_ADDR
50945: GO 53044
50947: LD_INT 10
50949: DOUBLE
50950: EQUAL
50951: IFTRUE 50955
50953: GO 51151
50955: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50956: LD_ADDR_VAR 0 2
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: LD_INT 4
50966: PUSH
50967: LD_INT 5
50969: PUSH
50970: LD_INT 6
50972: PUSH
50973: LD_INT 7
50975: PUSH
50976: LD_INT 8
50978: PUSH
50979: LD_INT 9
50981: PUSH
50982: LD_INT 10
50984: PUSH
50985: LD_INT 11
50987: PUSH
50988: LD_INT 12
50990: PUSH
50991: LD_INT 13
50993: PUSH
50994: LD_INT 14
50996: PUSH
50997: LD_INT 15
50999: PUSH
51000: LD_INT 16
51002: PUSH
51003: LD_INT 17
51005: PUSH
51006: LD_INT 18
51008: PUSH
51009: LD_INT 19
51011: PUSH
51012: LD_INT 20
51014: PUSH
51015: LD_INT 21
51017: PUSH
51018: LD_INT 22
51020: PUSH
51021: LD_INT 23
51023: PUSH
51024: LD_INT 24
51026: PUSH
51027: LD_INT 25
51029: PUSH
51030: LD_INT 26
51032: PUSH
51033: LD_INT 28
51035: PUSH
51036: LD_INT 30
51038: PUSH
51039: LD_INT 31
51041: PUSH
51042: LD_INT 32
51044: PUSH
51045: LD_INT 36
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 101
51081: PUSH
51082: LD_INT 102
51084: PUSH
51085: LD_INT 103
51087: PUSH
51088: LD_INT 104
51090: PUSH
51091: LD_INT 105
51093: PUSH
51094: LD_INT 106
51096: PUSH
51097: LD_INT 107
51099: PUSH
51100: LD_INT 108
51102: PUSH
51103: LD_INT 109
51105: PUSH
51106: LD_INT 110
51108: PUSH
51109: LD_INT 111
51111: PUSH
51112: LD_INT 112
51114: PUSH
51115: LD_INT 114
51117: PUSH
51118: LD_INT 116
51120: PUSH
51121: LD_INT 117
51123: PUSH
51124: LD_INT 118
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: ST_TO_ADDR
51149: GO 53044
51151: LD_INT 11
51153: DOUBLE
51154: EQUAL
51155: IFTRUE 51159
51157: GO 51363
51159: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51160: LD_ADDR_VAR 0 2
51164: PUSH
51165: LD_INT 2
51167: PUSH
51168: LD_INT 3
51170: PUSH
51171: LD_INT 4
51173: PUSH
51174: LD_INT 5
51176: PUSH
51177: LD_INT 6
51179: PUSH
51180: LD_INT 7
51182: PUSH
51183: LD_INT 8
51185: PUSH
51186: LD_INT 9
51188: PUSH
51189: LD_INT 10
51191: PUSH
51192: LD_INT 11
51194: PUSH
51195: LD_INT 12
51197: PUSH
51198: LD_INT 13
51200: PUSH
51201: LD_INT 14
51203: PUSH
51204: LD_INT 15
51206: PUSH
51207: LD_INT 16
51209: PUSH
51210: LD_INT 17
51212: PUSH
51213: LD_INT 18
51215: PUSH
51216: LD_INT 19
51218: PUSH
51219: LD_INT 20
51221: PUSH
51222: LD_INT 21
51224: PUSH
51225: LD_INT 22
51227: PUSH
51228: LD_INT 23
51230: PUSH
51231: LD_INT 24
51233: PUSH
51234: LD_INT 25
51236: PUSH
51237: LD_INT 26
51239: PUSH
51240: LD_INT 28
51242: PUSH
51243: LD_INT 30
51245: PUSH
51246: LD_INT 31
51248: PUSH
51249: LD_INT 32
51251: PUSH
51252: LD_INT 34
51254: PUSH
51255: LD_INT 36
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 101
51293: PUSH
51294: LD_INT 102
51296: PUSH
51297: LD_INT 103
51299: PUSH
51300: LD_INT 104
51302: PUSH
51303: LD_INT 105
51305: PUSH
51306: LD_INT 106
51308: PUSH
51309: LD_INT 107
51311: PUSH
51312: LD_INT 108
51314: PUSH
51315: LD_INT 109
51317: PUSH
51318: LD_INT 110
51320: PUSH
51321: LD_INT 111
51323: PUSH
51324: LD_INT 112
51326: PUSH
51327: LD_INT 114
51329: PUSH
51330: LD_INT 116
51332: PUSH
51333: LD_INT 117
51335: PUSH
51336: LD_INT 118
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: ST_TO_ADDR
51361: GO 53044
51363: LD_INT 12
51365: DOUBLE
51366: EQUAL
51367: IFTRUE 51371
51369: GO 51591
51371: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51372: LD_ADDR_VAR 0 2
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 3
51385: PUSH
51386: LD_INT 4
51388: PUSH
51389: LD_INT 5
51391: PUSH
51392: LD_INT 6
51394: PUSH
51395: LD_INT 7
51397: PUSH
51398: LD_INT 8
51400: PUSH
51401: LD_INT 9
51403: PUSH
51404: LD_INT 10
51406: PUSH
51407: LD_INT 11
51409: PUSH
51410: LD_INT 12
51412: PUSH
51413: LD_INT 13
51415: PUSH
51416: LD_INT 14
51418: PUSH
51419: LD_INT 15
51421: PUSH
51422: LD_INT 16
51424: PUSH
51425: LD_INT 17
51427: PUSH
51428: LD_INT 18
51430: PUSH
51431: LD_INT 19
51433: PUSH
51434: LD_INT 20
51436: PUSH
51437: LD_INT 21
51439: PUSH
51440: LD_INT 22
51442: PUSH
51443: LD_INT 23
51445: PUSH
51446: LD_INT 24
51448: PUSH
51449: LD_INT 25
51451: PUSH
51452: LD_INT 26
51454: PUSH
51455: LD_INT 27
51457: PUSH
51458: LD_INT 28
51460: PUSH
51461: LD_INT 30
51463: PUSH
51464: LD_INT 31
51466: PUSH
51467: LD_INT 32
51469: PUSH
51470: LD_INT 33
51472: PUSH
51473: LD_INT 34
51475: PUSH
51476: LD_INT 36
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 101
51517: PUSH
51518: LD_INT 102
51520: PUSH
51521: LD_INT 103
51523: PUSH
51524: LD_INT 104
51526: PUSH
51527: LD_INT 105
51529: PUSH
51530: LD_INT 106
51532: PUSH
51533: LD_INT 107
51535: PUSH
51536: LD_INT 108
51538: PUSH
51539: LD_INT 109
51541: PUSH
51542: LD_INT 110
51544: PUSH
51545: LD_INT 111
51547: PUSH
51548: LD_INT 112
51550: PUSH
51551: LD_INT 113
51553: PUSH
51554: LD_INT 114
51556: PUSH
51557: LD_INT 116
51559: PUSH
51560: LD_INT 117
51562: PUSH
51563: LD_INT 118
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: ST_TO_ADDR
51589: GO 53044
51591: LD_INT 13
51593: DOUBLE
51594: EQUAL
51595: IFTRUE 51599
51597: GO 51807
51599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51600: LD_ADDR_VAR 0 2
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 4
51616: PUSH
51617: LD_INT 5
51619: PUSH
51620: LD_INT 8
51622: PUSH
51623: LD_INT 9
51625: PUSH
51626: LD_INT 10
51628: PUSH
51629: LD_INT 11
51631: PUSH
51632: LD_INT 12
51634: PUSH
51635: LD_INT 14
51637: PUSH
51638: LD_INT 15
51640: PUSH
51641: LD_INT 16
51643: PUSH
51644: LD_INT 17
51646: PUSH
51647: LD_INT 18
51649: PUSH
51650: LD_INT 19
51652: PUSH
51653: LD_INT 20
51655: PUSH
51656: LD_INT 21
51658: PUSH
51659: LD_INT 22
51661: PUSH
51662: LD_INT 23
51664: PUSH
51665: LD_INT 24
51667: PUSH
51668: LD_INT 25
51670: PUSH
51671: LD_INT 26
51673: PUSH
51674: LD_INT 27
51676: PUSH
51677: LD_INT 28
51679: PUSH
51680: LD_INT 30
51682: PUSH
51683: LD_INT 31
51685: PUSH
51686: LD_INT 32
51688: PUSH
51689: LD_INT 33
51691: PUSH
51692: LD_INT 34
51694: PUSH
51695: LD_INT 36
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 101
51733: PUSH
51734: LD_INT 102
51736: PUSH
51737: LD_INT 103
51739: PUSH
51740: LD_INT 104
51742: PUSH
51743: LD_INT 105
51745: PUSH
51746: LD_INT 106
51748: PUSH
51749: LD_INT 107
51751: PUSH
51752: LD_INT 108
51754: PUSH
51755: LD_INT 109
51757: PUSH
51758: LD_INT 110
51760: PUSH
51761: LD_INT 111
51763: PUSH
51764: LD_INT 112
51766: PUSH
51767: LD_INT 113
51769: PUSH
51770: LD_INT 114
51772: PUSH
51773: LD_INT 116
51775: PUSH
51776: LD_INT 117
51778: PUSH
51779: LD_INT 118
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: ST_TO_ADDR
51805: GO 53044
51807: LD_INT 14
51809: DOUBLE
51810: EQUAL
51811: IFTRUE 51815
51813: GO 52039
51815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51816: LD_ADDR_VAR 0 2
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 3
51829: PUSH
51830: LD_INT 4
51832: PUSH
51833: LD_INT 5
51835: PUSH
51836: LD_INT 6
51838: PUSH
51839: LD_INT 7
51841: PUSH
51842: LD_INT 8
51844: PUSH
51845: LD_INT 9
51847: PUSH
51848: LD_INT 10
51850: PUSH
51851: LD_INT 11
51853: PUSH
51854: LD_INT 12
51856: PUSH
51857: LD_INT 13
51859: PUSH
51860: LD_INT 14
51862: PUSH
51863: LD_INT 15
51865: PUSH
51866: LD_INT 16
51868: PUSH
51869: LD_INT 17
51871: PUSH
51872: LD_INT 18
51874: PUSH
51875: LD_INT 19
51877: PUSH
51878: LD_INT 20
51880: PUSH
51881: LD_INT 21
51883: PUSH
51884: LD_INT 22
51886: PUSH
51887: LD_INT 23
51889: PUSH
51890: LD_INT 24
51892: PUSH
51893: LD_INT 25
51895: PUSH
51896: LD_INT 26
51898: PUSH
51899: LD_INT 27
51901: PUSH
51902: LD_INT 28
51904: PUSH
51905: LD_INT 29
51907: PUSH
51908: LD_INT 30
51910: PUSH
51911: LD_INT 31
51913: PUSH
51914: LD_INT 32
51916: PUSH
51917: LD_INT 33
51919: PUSH
51920: LD_INT 34
51922: PUSH
51923: LD_INT 36
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 101
51965: PUSH
51966: LD_INT 102
51968: PUSH
51969: LD_INT 103
51971: PUSH
51972: LD_INT 104
51974: PUSH
51975: LD_INT 105
51977: PUSH
51978: LD_INT 106
51980: PUSH
51981: LD_INT 107
51983: PUSH
51984: LD_INT 108
51986: PUSH
51987: LD_INT 109
51989: PUSH
51990: LD_INT 110
51992: PUSH
51993: LD_INT 111
51995: PUSH
51996: LD_INT 112
51998: PUSH
51999: LD_INT 113
52001: PUSH
52002: LD_INT 114
52004: PUSH
52005: LD_INT 116
52007: PUSH
52008: LD_INT 117
52010: PUSH
52011: LD_INT 118
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: ST_TO_ADDR
52037: GO 53044
52039: LD_INT 15
52041: DOUBLE
52042: EQUAL
52043: IFTRUE 52047
52045: GO 52271
52047: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52048: LD_ADDR_VAR 0 2
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 3
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: LD_INT 5
52067: PUSH
52068: LD_INT 6
52070: PUSH
52071: LD_INT 7
52073: PUSH
52074: LD_INT 8
52076: PUSH
52077: LD_INT 9
52079: PUSH
52080: LD_INT 10
52082: PUSH
52083: LD_INT 11
52085: PUSH
52086: LD_INT 12
52088: PUSH
52089: LD_INT 13
52091: PUSH
52092: LD_INT 14
52094: PUSH
52095: LD_INT 15
52097: PUSH
52098: LD_INT 16
52100: PUSH
52101: LD_INT 17
52103: PUSH
52104: LD_INT 18
52106: PUSH
52107: LD_INT 19
52109: PUSH
52110: LD_INT 20
52112: PUSH
52113: LD_INT 21
52115: PUSH
52116: LD_INT 22
52118: PUSH
52119: LD_INT 23
52121: PUSH
52122: LD_INT 24
52124: PUSH
52125: LD_INT 25
52127: PUSH
52128: LD_INT 26
52130: PUSH
52131: LD_INT 27
52133: PUSH
52134: LD_INT 28
52136: PUSH
52137: LD_INT 29
52139: PUSH
52140: LD_INT 30
52142: PUSH
52143: LD_INT 31
52145: PUSH
52146: LD_INT 32
52148: PUSH
52149: LD_INT 33
52151: PUSH
52152: LD_INT 34
52154: PUSH
52155: LD_INT 36
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 101
52197: PUSH
52198: LD_INT 102
52200: PUSH
52201: LD_INT 103
52203: PUSH
52204: LD_INT 104
52206: PUSH
52207: LD_INT 105
52209: PUSH
52210: LD_INT 106
52212: PUSH
52213: LD_INT 107
52215: PUSH
52216: LD_INT 108
52218: PUSH
52219: LD_INT 109
52221: PUSH
52222: LD_INT 110
52224: PUSH
52225: LD_INT 111
52227: PUSH
52228: LD_INT 112
52230: PUSH
52231: LD_INT 113
52233: PUSH
52234: LD_INT 114
52236: PUSH
52237: LD_INT 116
52239: PUSH
52240: LD_INT 117
52242: PUSH
52243: LD_INT 118
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: ST_TO_ADDR
52269: GO 53044
52271: LD_INT 16
52273: DOUBLE
52274: EQUAL
52275: IFTRUE 52279
52277: GO 52415
52279: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52280: LD_ADDR_VAR 0 2
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 4
52290: PUSH
52291: LD_INT 5
52293: PUSH
52294: LD_INT 7
52296: PUSH
52297: LD_INT 11
52299: PUSH
52300: LD_INT 12
52302: PUSH
52303: LD_INT 15
52305: PUSH
52306: LD_INT 16
52308: PUSH
52309: LD_INT 20
52311: PUSH
52312: LD_INT 21
52314: PUSH
52315: LD_INT 22
52317: PUSH
52318: LD_INT 23
52320: PUSH
52321: LD_INT 25
52323: PUSH
52324: LD_INT 26
52326: PUSH
52327: LD_INT 30
52329: PUSH
52330: LD_INT 31
52332: PUSH
52333: LD_INT 32
52335: PUSH
52336: LD_INT 33
52338: PUSH
52339: LD_INT 34
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 101
52365: PUSH
52366: LD_INT 102
52368: PUSH
52369: LD_INT 103
52371: PUSH
52372: LD_INT 106
52374: PUSH
52375: LD_INT 108
52377: PUSH
52378: LD_INT 112
52380: PUSH
52381: LD_INT 113
52383: PUSH
52384: LD_INT 114
52386: PUSH
52387: LD_INT 116
52389: PUSH
52390: LD_INT 117
52392: PUSH
52393: LD_INT 118
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: ST_TO_ADDR
52413: GO 53044
52415: LD_INT 17
52417: DOUBLE
52418: EQUAL
52419: IFTRUE 52423
52421: GO 52647
52423: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52424: LD_ADDR_VAR 0 2
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 2
52434: PUSH
52435: LD_INT 3
52437: PUSH
52438: LD_INT 4
52440: PUSH
52441: LD_INT 5
52443: PUSH
52444: LD_INT 6
52446: PUSH
52447: LD_INT 7
52449: PUSH
52450: LD_INT 8
52452: PUSH
52453: LD_INT 9
52455: PUSH
52456: LD_INT 10
52458: PUSH
52459: LD_INT 11
52461: PUSH
52462: LD_INT 12
52464: PUSH
52465: LD_INT 13
52467: PUSH
52468: LD_INT 14
52470: PUSH
52471: LD_INT 15
52473: PUSH
52474: LD_INT 16
52476: PUSH
52477: LD_INT 17
52479: PUSH
52480: LD_INT 18
52482: PUSH
52483: LD_INT 19
52485: PUSH
52486: LD_INT 20
52488: PUSH
52489: LD_INT 21
52491: PUSH
52492: LD_INT 22
52494: PUSH
52495: LD_INT 23
52497: PUSH
52498: LD_INT 24
52500: PUSH
52501: LD_INT 25
52503: PUSH
52504: LD_INT 26
52506: PUSH
52507: LD_INT 27
52509: PUSH
52510: LD_INT 28
52512: PUSH
52513: LD_INT 29
52515: PUSH
52516: LD_INT 30
52518: PUSH
52519: LD_INT 31
52521: PUSH
52522: LD_INT 32
52524: PUSH
52525: LD_INT 33
52527: PUSH
52528: LD_INT 34
52530: PUSH
52531: LD_INT 36
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 101
52573: PUSH
52574: LD_INT 102
52576: PUSH
52577: LD_INT 103
52579: PUSH
52580: LD_INT 104
52582: PUSH
52583: LD_INT 105
52585: PUSH
52586: LD_INT 106
52588: PUSH
52589: LD_INT 107
52591: PUSH
52592: LD_INT 108
52594: PUSH
52595: LD_INT 109
52597: PUSH
52598: LD_INT 110
52600: PUSH
52601: LD_INT 111
52603: PUSH
52604: LD_INT 112
52606: PUSH
52607: LD_INT 113
52609: PUSH
52610: LD_INT 114
52612: PUSH
52613: LD_INT 116
52615: PUSH
52616: LD_INT 117
52618: PUSH
52619: LD_INT 118
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: ST_TO_ADDR
52645: GO 53044
52647: LD_INT 18
52649: DOUBLE
52650: EQUAL
52651: IFTRUE 52655
52653: GO 52803
52655: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52656: LD_ADDR_VAR 0 2
52660: PUSH
52661: LD_INT 2
52663: PUSH
52664: LD_INT 4
52666: PUSH
52667: LD_INT 5
52669: PUSH
52670: LD_INT 7
52672: PUSH
52673: LD_INT 11
52675: PUSH
52676: LD_INT 12
52678: PUSH
52679: LD_INT 15
52681: PUSH
52682: LD_INT 16
52684: PUSH
52685: LD_INT 20
52687: PUSH
52688: LD_INT 21
52690: PUSH
52691: LD_INT 22
52693: PUSH
52694: LD_INT 23
52696: PUSH
52697: LD_INT 25
52699: PUSH
52700: LD_INT 26
52702: PUSH
52703: LD_INT 30
52705: PUSH
52706: LD_INT 31
52708: PUSH
52709: LD_INT 32
52711: PUSH
52712: LD_INT 33
52714: PUSH
52715: LD_INT 34
52717: PUSH
52718: LD_INT 35
52720: PUSH
52721: LD_INT 36
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 101
52749: PUSH
52750: LD_INT 102
52752: PUSH
52753: LD_INT 103
52755: PUSH
52756: LD_INT 106
52758: PUSH
52759: LD_INT 108
52761: PUSH
52762: LD_INT 112
52764: PUSH
52765: LD_INT 113
52767: PUSH
52768: LD_INT 114
52770: PUSH
52771: LD_INT 115
52773: PUSH
52774: LD_INT 116
52776: PUSH
52777: LD_INT 117
52779: PUSH
52780: LD_INT 118
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: ST_TO_ADDR
52801: GO 53044
52803: LD_INT 19
52805: DOUBLE
52806: EQUAL
52807: IFTRUE 52811
52809: GO 53043
52811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52812: LD_ADDR_VAR 0 2
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 3
52825: PUSH
52826: LD_INT 4
52828: PUSH
52829: LD_INT 5
52831: PUSH
52832: LD_INT 6
52834: PUSH
52835: LD_INT 7
52837: PUSH
52838: LD_INT 8
52840: PUSH
52841: LD_INT 9
52843: PUSH
52844: LD_INT 10
52846: PUSH
52847: LD_INT 11
52849: PUSH
52850: LD_INT 12
52852: PUSH
52853: LD_INT 13
52855: PUSH
52856: LD_INT 14
52858: PUSH
52859: LD_INT 15
52861: PUSH
52862: LD_INT 16
52864: PUSH
52865: LD_INT 17
52867: PUSH
52868: LD_INT 18
52870: PUSH
52871: LD_INT 19
52873: PUSH
52874: LD_INT 20
52876: PUSH
52877: LD_INT 21
52879: PUSH
52880: LD_INT 22
52882: PUSH
52883: LD_INT 23
52885: PUSH
52886: LD_INT 24
52888: PUSH
52889: LD_INT 25
52891: PUSH
52892: LD_INT 26
52894: PUSH
52895: LD_INT 27
52897: PUSH
52898: LD_INT 28
52900: PUSH
52901: LD_INT 29
52903: PUSH
52904: LD_INT 30
52906: PUSH
52907: LD_INT 31
52909: PUSH
52910: LD_INT 32
52912: PUSH
52913: LD_INT 33
52915: PUSH
52916: LD_INT 34
52918: PUSH
52919: LD_INT 35
52921: PUSH
52922: LD_INT 36
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 101
52965: PUSH
52966: LD_INT 102
52968: PUSH
52969: LD_INT 103
52971: PUSH
52972: LD_INT 104
52974: PUSH
52975: LD_INT 105
52977: PUSH
52978: LD_INT 106
52980: PUSH
52981: LD_INT 107
52983: PUSH
52984: LD_INT 108
52986: PUSH
52987: LD_INT 109
52989: PUSH
52990: LD_INT 110
52992: PUSH
52993: LD_INT 111
52995: PUSH
52996: LD_INT 112
52998: PUSH
52999: LD_INT 113
53001: PUSH
53002: LD_INT 114
53004: PUSH
53005: LD_INT 115
53007: PUSH
53008: LD_INT 116
53010: PUSH
53011: LD_INT 117
53013: PUSH
53014: LD_INT 118
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: ST_TO_ADDR
53041: GO 53044
53043: POP
// end else
53044: GO 53275
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53046: LD_ADDR_VAR 0 2
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 3
53059: PUSH
53060: LD_INT 4
53062: PUSH
53063: LD_INT 5
53065: PUSH
53066: LD_INT 6
53068: PUSH
53069: LD_INT 7
53071: PUSH
53072: LD_INT 8
53074: PUSH
53075: LD_INT 9
53077: PUSH
53078: LD_INT 10
53080: PUSH
53081: LD_INT 11
53083: PUSH
53084: LD_INT 12
53086: PUSH
53087: LD_INT 13
53089: PUSH
53090: LD_INT 14
53092: PUSH
53093: LD_INT 15
53095: PUSH
53096: LD_INT 16
53098: PUSH
53099: LD_INT 17
53101: PUSH
53102: LD_INT 18
53104: PUSH
53105: LD_INT 19
53107: PUSH
53108: LD_INT 20
53110: PUSH
53111: LD_INT 21
53113: PUSH
53114: LD_INT 22
53116: PUSH
53117: LD_INT 23
53119: PUSH
53120: LD_INT 24
53122: PUSH
53123: LD_INT 25
53125: PUSH
53126: LD_INT 26
53128: PUSH
53129: LD_INT 27
53131: PUSH
53132: LD_INT 28
53134: PUSH
53135: LD_INT 29
53137: PUSH
53138: LD_INT 30
53140: PUSH
53141: LD_INT 31
53143: PUSH
53144: LD_INT 32
53146: PUSH
53147: LD_INT 33
53149: PUSH
53150: LD_INT 34
53152: PUSH
53153: LD_INT 35
53155: PUSH
53156: LD_INT 36
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 101
53199: PUSH
53200: LD_INT 102
53202: PUSH
53203: LD_INT 103
53205: PUSH
53206: LD_INT 104
53208: PUSH
53209: LD_INT 105
53211: PUSH
53212: LD_INT 106
53214: PUSH
53215: LD_INT 107
53217: PUSH
53218: LD_INT 108
53220: PUSH
53221: LD_INT 109
53223: PUSH
53224: LD_INT 110
53226: PUSH
53227: LD_INT 111
53229: PUSH
53230: LD_INT 112
53232: PUSH
53233: LD_INT 113
53235: PUSH
53236: LD_INT 114
53238: PUSH
53239: LD_INT 115
53241: PUSH
53242: LD_INT 116
53244: PUSH
53245: LD_INT 117
53247: PUSH
53248: LD_INT 118
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: ST_TO_ADDR
// if result then
53275: LD_VAR 0 2
53279: IFFALSE 54065
// begin normal :=  ;
53281: LD_ADDR_VAR 0 5
53285: PUSH
53286: LD_STRING 
53288: ST_TO_ADDR
// hardcore :=  ;
53289: LD_ADDR_VAR 0 6
53293: PUSH
53294: LD_STRING 
53296: ST_TO_ADDR
// active :=  ;
53297: LD_ADDR_VAR 0 7
53301: PUSH
53302: LD_STRING 
53304: ST_TO_ADDR
// for i = 1 to normalCounter do
53305: LD_ADDR_VAR 0 8
53309: PUSH
53310: DOUBLE
53311: LD_INT 1
53313: DEC
53314: ST_TO_ADDR
53315: LD_EXP 31
53319: PUSH
53320: FOR_TO
53321: IFFALSE 53422
// begin tmp := 0 ;
53323: LD_ADDR_VAR 0 3
53327: PUSH
53328: LD_STRING 0
53330: ST_TO_ADDR
// if result [ 1 ] then
53331: LD_VAR 0 2
53335: PUSH
53336: LD_INT 1
53338: ARRAY
53339: IFFALSE 53404
// if result [ 1 ] [ 1 ] = i then
53341: LD_VAR 0 2
53345: PUSH
53346: LD_INT 1
53348: ARRAY
53349: PUSH
53350: LD_INT 1
53352: ARRAY
53353: PUSH
53354: LD_VAR 0 8
53358: EQUAL
53359: IFFALSE 53404
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53361: LD_ADDR_VAR 0 2
53365: PUSH
53366: LD_VAR 0 2
53370: PPUSH
53371: LD_INT 1
53373: PPUSH
53374: LD_VAR 0 2
53378: PUSH
53379: LD_INT 1
53381: ARRAY
53382: PPUSH
53383: LD_INT 1
53385: PPUSH
53386: CALL_OW 3
53390: PPUSH
53391: CALL_OW 1
53395: ST_TO_ADDR
// tmp := 1 ;
53396: LD_ADDR_VAR 0 3
53400: PUSH
53401: LD_STRING 1
53403: ST_TO_ADDR
// end ; normal := normal & tmp ;
53404: LD_ADDR_VAR 0 5
53408: PUSH
53409: LD_VAR 0 5
53413: PUSH
53414: LD_VAR 0 3
53418: STR
53419: ST_TO_ADDR
// end ;
53420: GO 53320
53422: POP
53423: POP
// for i = 1 to hardcoreCounter do
53424: LD_ADDR_VAR 0 8
53428: PUSH
53429: DOUBLE
53430: LD_INT 1
53432: DEC
53433: ST_TO_ADDR
53434: LD_EXP 32
53438: PUSH
53439: FOR_TO
53440: IFFALSE 53545
// begin tmp := 0 ;
53442: LD_ADDR_VAR 0 3
53446: PUSH
53447: LD_STRING 0
53449: ST_TO_ADDR
// if result [ 2 ] then
53450: LD_VAR 0 2
53454: PUSH
53455: LD_INT 2
53457: ARRAY
53458: IFFALSE 53527
// if result [ 2 ] [ 1 ] = 100 + i then
53460: LD_VAR 0 2
53464: PUSH
53465: LD_INT 2
53467: ARRAY
53468: PUSH
53469: LD_INT 1
53471: ARRAY
53472: PUSH
53473: LD_INT 100
53475: PUSH
53476: LD_VAR 0 8
53480: PLUS
53481: EQUAL
53482: IFFALSE 53527
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53484: LD_ADDR_VAR 0 2
53488: PUSH
53489: LD_VAR 0 2
53493: PPUSH
53494: LD_INT 2
53496: PPUSH
53497: LD_VAR 0 2
53501: PUSH
53502: LD_INT 2
53504: ARRAY
53505: PPUSH
53506: LD_INT 1
53508: PPUSH
53509: CALL_OW 3
53513: PPUSH
53514: CALL_OW 1
53518: ST_TO_ADDR
// tmp := 1 ;
53519: LD_ADDR_VAR 0 3
53523: PUSH
53524: LD_STRING 1
53526: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53527: LD_ADDR_VAR 0 6
53531: PUSH
53532: LD_VAR 0 6
53536: PUSH
53537: LD_VAR 0 3
53541: STR
53542: ST_TO_ADDR
// end ;
53543: GO 53439
53545: POP
53546: POP
// if isGameLoad then
53547: LD_VAR 0 1
53551: IFFALSE 54026
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53553: LD_ADDR_VAR 0 4
53557: PUSH
53558: LD_EXP 35
53562: PUSH
53563: LD_EXP 34
53567: PUSH
53568: LD_EXP 36
53572: PUSH
53573: LD_EXP 33
53577: PUSH
53578: LD_EXP 37
53582: PUSH
53583: LD_EXP 38
53587: PUSH
53588: LD_EXP 39
53592: PUSH
53593: LD_EXP 40
53597: PUSH
53598: LD_EXP 41
53602: PUSH
53603: LD_EXP 42
53607: PUSH
53608: LD_EXP 43
53612: PUSH
53613: LD_EXP 44
53617: PUSH
53618: LD_EXP 45
53622: PUSH
53623: LD_EXP 46
53627: PUSH
53628: LD_EXP 54
53632: PUSH
53633: LD_EXP 55
53637: PUSH
53638: LD_EXP 56
53642: PUSH
53643: LD_EXP 57
53647: PUSH
53648: LD_EXP 59
53652: PUSH
53653: LD_EXP 60
53657: PUSH
53658: LD_EXP 61
53662: PUSH
53663: LD_EXP 64
53667: PUSH
53668: LD_EXP 66
53672: PUSH
53673: LD_EXP 67
53677: PUSH
53678: LD_EXP 68
53682: PUSH
53683: LD_EXP 70
53687: PUSH
53688: LD_EXP 71
53692: PUSH
53693: LD_EXP 74
53697: PUSH
53698: LD_EXP 75
53702: PUSH
53703: LD_EXP 76
53707: PUSH
53708: LD_EXP 77
53712: PUSH
53713: LD_EXP 78
53717: PUSH
53718: LD_EXP 79
53722: PUSH
53723: LD_EXP 80
53727: PUSH
53728: LD_EXP 81
53732: PUSH
53733: LD_EXP 82
53737: PUSH
53738: LD_EXP 47
53742: PUSH
53743: LD_EXP 48
53747: PUSH
53748: LD_EXP 51
53752: PUSH
53753: LD_EXP 52
53757: PUSH
53758: LD_EXP 53
53762: PUSH
53763: LD_EXP 49
53767: PUSH
53768: LD_EXP 50
53772: PUSH
53773: LD_EXP 58
53777: PUSH
53778: LD_EXP 62
53782: PUSH
53783: LD_EXP 63
53787: PUSH
53788: LD_EXP 65
53792: PUSH
53793: LD_EXP 69
53797: PUSH
53798: LD_EXP 72
53802: PUSH
53803: LD_EXP 73
53807: PUSH
53808: LD_EXP 83
53812: PUSH
53813: LD_EXP 84
53817: PUSH
53818: LD_EXP 85
53822: PUSH
53823: LD_EXP 86
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// tmp :=  ;
53884: LD_ADDR_VAR 0 3
53888: PUSH
53889: LD_STRING 
53891: ST_TO_ADDR
// for i = 1 to normalCounter do
53892: LD_ADDR_VAR 0 8
53896: PUSH
53897: DOUBLE
53898: LD_INT 1
53900: DEC
53901: ST_TO_ADDR
53902: LD_EXP 31
53906: PUSH
53907: FOR_TO
53908: IFFALSE 53944
// begin if flags [ i ] then
53910: LD_VAR 0 4
53914: PUSH
53915: LD_VAR 0 8
53919: ARRAY
53920: IFFALSE 53942
// tmp := tmp & i & ; ;
53922: LD_ADDR_VAR 0 3
53926: PUSH
53927: LD_VAR 0 3
53931: PUSH
53932: LD_VAR 0 8
53936: STR
53937: PUSH
53938: LD_STRING ;
53940: STR
53941: ST_TO_ADDR
// end ;
53942: GO 53907
53944: POP
53945: POP
// for i = 1 to hardcoreCounter do
53946: LD_ADDR_VAR 0 8
53950: PUSH
53951: DOUBLE
53952: LD_INT 1
53954: DEC
53955: ST_TO_ADDR
53956: LD_EXP 32
53960: PUSH
53961: FOR_TO
53962: IFFALSE 54008
// begin if flags [ normalCounter + i ] then
53964: LD_VAR 0 4
53968: PUSH
53969: LD_EXP 31
53973: PUSH
53974: LD_VAR 0 8
53978: PLUS
53979: ARRAY
53980: IFFALSE 54006
// tmp := tmp & ( 100 + i ) & ; ;
53982: LD_ADDR_VAR 0 3
53986: PUSH
53987: LD_VAR 0 3
53991: PUSH
53992: LD_INT 100
53994: PUSH
53995: LD_VAR 0 8
53999: PLUS
54000: STR
54001: PUSH
54002: LD_STRING ;
54004: STR
54005: ST_TO_ADDR
// end ;
54006: GO 53961
54008: POP
54009: POP
// if tmp then
54010: LD_VAR 0 3
54014: IFFALSE 54026
// active := tmp ;
54016: LD_ADDR_VAR 0 7
54020: PUSH
54021: LD_VAR 0 3
54025: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54026: LD_STRING getStreamItemsFromMission("
54028: PUSH
54029: LD_VAR 0 5
54033: STR
54034: PUSH
54035: LD_STRING ","
54037: STR
54038: PUSH
54039: LD_VAR 0 6
54043: STR
54044: PUSH
54045: LD_STRING ","
54047: STR
54048: PUSH
54049: LD_VAR 0 7
54053: STR
54054: PUSH
54055: LD_STRING ")
54057: STR
54058: PPUSH
54059: CALL_OW 559
// end else
54063: GO 54072
// ToLua ( getStreamItemsFromMission("","","") ) ;
54065: LD_STRING getStreamItemsFromMission("","","")
54067: PPUSH
54068: CALL_OW 559
// end ;
54072: LD_VAR 0 2
54076: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54077: LD_EXP 30
54081: PUSH
54082: LD_EXP 35
54086: AND
54087: IFFALSE 54211
54089: GO 54091
54091: DISABLE
54092: LD_INT 0
54094: PPUSH
54095: PPUSH
// begin enable ;
54096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54097: LD_ADDR_VAR 0 2
54101: PUSH
54102: LD_INT 22
54104: PUSH
54105: LD_OWVAR 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 34
54119: PUSH
54120: LD_INT 7
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 34
54129: PUSH
54130: LD_INT 45
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 34
54139: PUSH
54140: LD_INT 28
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 34
54149: PUSH
54150: LD_INT 47
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PPUSH
54168: CALL_OW 69
54172: ST_TO_ADDR
// if not tmp then
54173: LD_VAR 0 2
54177: NOT
54178: IFFALSE 54182
// exit ;
54180: GO 54211
// for i in tmp do
54182: LD_ADDR_VAR 0 1
54186: PUSH
54187: LD_VAR 0 2
54191: PUSH
54192: FOR_IN
54193: IFFALSE 54209
// begin SetLives ( i , 0 ) ;
54195: LD_VAR 0 1
54199: PPUSH
54200: LD_INT 0
54202: PPUSH
54203: CALL_OW 234
// end ;
54207: GO 54192
54209: POP
54210: POP
// end ;
54211: PPOPN 2
54213: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54214: LD_EXP 30
54218: PUSH
54219: LD_EXP 36
54223: AND
54224: IFFALSE 54308
54226: GO 54228
54228: DISABLE
54229: LD_INT 0
54231: PPUSH
54232: PPUSH
// begin enable ;
54233: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54234: LD_ADDR_VAR 0 2
54238: PUSH
54239: LD_INT 22
54241: PUSH
54242: LD_OWVAR 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 32
54253: PUSH
54254: LD_INT 3
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PPUSH
54265: CALL_OW 69
54269: ST_TO_ADDR
// if not tmp then
54270: LD_VAR 0 2
54274: NOT
54275: IFFALSE 54279
// exit ;
54277: GO 54308
// for i in tmp do
54279: LD_ADDR_VAR 0 1
54283: PUSH
54284: LD_VAR 0 2
54288: PUSH
54289: FOR_IN
54290: IFFALSE 54306
// begin SetLives ( i , 0 ) ;
54292: LD_VAR 0 1
54296: PPUSH
54297: LD_INT 0
54299: PPUSH
54300: CALL_OW 234
// end ;
54304: GO 54289
54306: POP
54307: POP
// end ;
54308: PPOPN 2
54310: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54311: LD_EXP 30
54315: PUSH
54316: LD_EXP 33
54320: AND
54321: IFFALSE 54414
54323: GO 54325
54325: DISABLE
54326: LD_INT 0
54328: PPUSH
// begin enable ;
54329: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54330: LD_ADDR_VAR 0 1
54334: PUSH
54335: LD_INT 22
54337: PUSH
54338: LD_OWVAR 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 25
54352: PUSH
54353: LD_INT 5
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 25
54362: PUSH
54363: LD_INT 9
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 25
54372: PUSH
54373: LD_INT 8
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PPUSH
54390: CALL_OW 69
54394: PUSH
54395: FOR_IN
54396: IFFALSE 54412
// begin SetClass ( i , 1 ) ;
54398: LD_VAR 0 1
54402: PPUSH
54403: LD_INT 1
54405: PPUSH
54406: CALL_OW 336
// end ;
54410: GO 54395
54412: POP
54413: POP
// end ;
54414: PPOPN 1
54416: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54417: LD_EXP 30
54421: PUSH
54422: LD_EXP 34
54426: AND
54427: PUSH
54428: LD_OWVAR 65
54432: PUSH
54433: LD_INT 7
54435: LESS
54436: AND
54437: IFFALSE 54451
54439: GO 54441
54441: DISABLE
// begin enable ;
54442: ENABLE
// game_speed := 7 ;
54443: LD_ADDR_OWVAR 65
54447: PUSH
54448: LD_INT 7
54450: ST_TO_ADDR
// end ;
54451: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54452: LD_EXP 30
54456: PUSH
54457: LD_EXP 37
54461: AND
54462: IFFALSE 54664
54464: GO 54466
54466: DISABLE
54467: LD_INT 0
54469: PPUSH
54470: PPUSH
54471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54472: LD_ADDR_VAR 0 3
54476: PUSH
54477: LD_INT 81
54479: PUSH
54480: LD_OWVAR 2
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 21
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PPUSH
54503: CALL_OW 69
54507: ST_TO_ADDR
// if not tmp then
54508: LD_VAR 0 3
54512: NOT
54513: IFFALSE 54517
// exit ;
54515: GO 54664
// if tmp > 5 then
54517: LD_VAR 0 3
54521: PUSH
54522: LD_INT 5
54524: GREATER
54525: IFFALSE 54537
// k := 5 else
54527: LD_ADDR_VAR 0 2
54531: PUSH
54532: LD_INT 5
54534: ST_TO_ADDR
54535: GO 54547
// k := tmp ;
54537: LD_ADDR_VAR 0 2
54541: PUSH
54542: LD_VAR 0 3
54546: ST_TO_ADDR
// for i := 1 to k do
54547: LD_ADDR_VAR 0 1
54551: PUSH
54552: DOUBLE
54553: LD_INT 1
54555: DEC
54556: ST_TO_ADDR
54557: LD_VAR 0 2
54561: PUSH
54562: FOR_TO
54563: IFFALSE 54662
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54565: LD_VAR 0 3
54569: PUSH
54570: LD_VAR 0 1
54574: ARRAY
54575: PPUSH
54576: LD_VAR 0 1
54580: PUSH
54581: LD_INT 4
54583: MOD
54584: PUSH
54585: LD_INT 1
54587: PLUS
54588: PPUSH
54589: CALL_OW 259
54593: PUSH
54594: LD_INT 10
54596: LESS
54597: IFFALSE 54660
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54599: LD_VAR 0 3
54603: PUSH
54604: LD_VAR 0 1
54608: ARRAY
54609: PPUSH
54610: LD_VAR 0 1
54614: PUSH
54615: LD_INT 4
54617: MOD
54618: PUSH
54619: LD_INT 1
54621: PLUS
54622: PPUSH
54623: LD_VAR 0 3
54627: PUSH
54628: LD_VAR 0 1
54632: ARRAY
54633: PPUSH
54634: LD_VAR 0 1
54638: PUSH
54639: LD_INT 4
54641: MOD
54642: PUSH
54643: LD_INT 1
54645: PLUS
54646: PPUSH
54647: CALL_OW 259
54651: PUSH
54652: LD_INT 1
54654: PLUS
54655: PPUSH
54656: CALL_OW 237
54660: GO 54562
54662: POP
54663: POP
// end ;
54664: PPOPN 3
54666: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54667: LD_EXP 30
54671: PUSH
54672: LD_EXP 38
54676: AND
54677: IFFALSE 54697
54679: GO 54681
54681: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54682: LD_INT 4
54684: PPUSH
54685: LD_OWVAR 2
54689: PPUSH
54690: LD_INT 0
54692: PPUSH
54693: CALL_OW 324
54697: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54698: LD_EXP 30
54702: PUSH
54703: LD_EXP 67
54707: AND
54708: IFFALSE 54728
54710: GO 54712
54712: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54713: LD_INT 19
54715: PPUSH
54716: LD_OWVAR 2
54720: PPUSH
54721: LD_INT 0
54723: PPUSH
54724: CALL_OW 324
54728: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54729: LD_EXP 30
54733: PUSH
54734: LD_EXP 39
54738: AND
54739: IFFALSE 54841
54741: GO 54743
54743: DISABLE
54744: LD_INT 0
54746: PPUSH
54747: PPUSH
// begin enable ;
54748: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54749: LD_ADDR_VAR 0 2
54753: PUSH
54754: LD_INT 22
54756: PUSH
54757: LD_OWVAR 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 34
54771: PUSH
54772: LD_INT 11
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 34
54781: PUSH
54782: LD_INT 30
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: LIST
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PPUSH
54798: CALL_OW 69
54802: ST_TO_ADDR
// if not tmp then
54803: LD_VAR 0 2
54807: NOT
54808: IFFALSE 54812
// exit ;
54810: GO 54841
// for i in tmp do
54812: LD_ADDR_VAR 0 1
54816: PUSH
54817: LD_VAR 0 2
54821: PUSH
54822: FOR_IN
54823: IFFALSE 54839
// begin SetLives ( i , 0 ) ;
54825: LD_VAR 0 1
54829: PPUSH
54830: LD_INT 0
54832: PPUSH
54833: CALL_OW 234
// end ;
54837: GO 54822
54839: POP
54840: POP
// end ;
54841: PPOPN 2
54843: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54844: LD_EXP 30
54848: PUSH
54849: LD_EXP 40
54853: AND
54854: IFFALSE 54874
54856: GO 54858
54858: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54859: LD_INT 32
54861: PPUSH
54862: LD_OWVAR 2
54866: PPUSH
54867: LD_INT 0
54869: PPUSH
54870: CALL_OW 324
54874: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54875: LD_EXP 30
54879: PUSH
54880: LD_EXP 41
54884: AND
54885: IFFALSE 55066
54887: GO 54889
54889: DISABLE
54890: LD_INT 0
54892: PPUSH
54893: PPUSH
54894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54895: LD_ADDR_VAR 0 2
54899: PUSH
54900: LD_INT 22
54902: PUSH
54903: LD_OWVAR 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 33
54914: PUSH
54915: LD_INT 3
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PPUSH
54926: CALL_OW 69
54930: ST_TO_ADDR
// if not tmp then
54931: LD_VAR 0 2
54935: NOT
54936: IFFALSE 54940
// exit ;
54938: GO 55066
// side := 0 ;
54940: LD_ADDR_VAR 0 3
54944: PUSH
54945: LD_INT 0
54947: ST_TO_ADDR
// for i := 1 to 8 do
54948: LD_ADDR_VAR 0 1
54952: PUSH
54953: DOUBLE
54954: LD_INT 1
54956: DEC
54957: ST_TO_ADDR
54958: LD_INT 8
54960: PUSH
54961: FOR_TO
54962: IFFALSE 55010
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54964: LD_OWVAR 2
54968: PUSH
54969: LD_VAR 0 1
54973: NONEQUAL
54974: PUSH
54975: LD_OWVAR 2
54979: PPUSH
54980: LD_VAR 0 1
54984: PPUSH
54985: CALL_OW 81
54989: PUSH
54990: LD_INT 2
54992: EQUAL
54993: AND
54994: IFFALSE 55008
// begin side := i ;
54996: LD_ADDR_VAR 0 3
55000: PUSH
55001: LD_VAR 0 1
55005: ST_TO_ADDR
// break ;
55006: GO 55010
// end ;
55008: GO 54961
55010: POP
55011: POP
// if not side then
55012: LD_VAR 0 3
55016: NOT
55017: IFFALSE 55021
// exit ;
55019: GO 55066
// for i := 1 to tmp do
55021: LD_ADDR_VAR 0 1
55025: PUSH
55026: DOUBLE
55027: LD_INT 1
55029: DEC
55030: ST_TO_ADDR
55031: LD_VAR 0 2
55035: PUSH
55036: FOR_TO
55037: IFFALSE 55064
// if Prob ( 60 ) then
55039: LD_INT 60
55041: PPUSH
55042: CALL_OW 13
55046: IFFALSE 55062
// SetSide ( i , side ) ;
55048: LD_VAR 0 1
55052: PPUSH
55053: LD_VAR 0 3
55057: PPUSH
55058: CALL_OW 235
55062: GO 55036
55064: POP
55065: POP
// end ;
55066: PPOPN 3
55068: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55069: LD_EXP 30
55073: PUSH
55074: LD_EXP 43
55078: AND
55079: IFFALSE 55198
55081: GO 55083
55083: DISABLE
55084: LD_INT 0
55086: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55087: LD_ADDR_VAR 0 1
55091: PUSH
55092: LD_INT 22
55094: PUSH
55095: LD_OWVAR 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 21
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 3
55116: PUSH
55117: LD_INT 23
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: LIST
55135: PPUSH
55136: CALL_OW 69
55140: PUSH
55141: FOR_IN
55142: IFFALSE 55196
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55144: LD_VAR 0 1
55148: PPUSH
55149: CALL_OW 257
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: LD_INT 2
55159: PUSH
55160: LD_INT 3
55162: PUSH
55163: LD_INT 4
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: IN
55172: IFFALSE 55194
// SetClass ( un , rand ( 1 , 4 ) ) ;
55174: LD_VAR 0 1
55178: PPUSH
55179: LD_INT 1
55181: PPUSH
55182: LD_INT 4
55184: PPUSH
55185: CALL_OW 12
55189: PPUSH
55190: CALL_OW 336
55194: GO 55141
55196: POP
55197: POP
// end ;
55198: PPOPN 1
55200: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55201: LD_EXP 30
55205: PUSH
55206: LD_EXP 42
55210: AND
55211: IFFALSE 55290
55213: GO 55215
55215: DISABLE
55216: LD_INT 0
55218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55219: LD_ADDR_VAR 0 1
55223: PUSH
55224: LD_INT 22
55226: PUSH
55227: LD_OWVAR 2
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 21
55238: PUSH
55239: LD_INT 3
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PPUSH
55250: CALL_OW 69
55254: ST_TO_ADDR
// if not tmp then
55255: LD_VAR 0 1
55259: NOT
55260: IFFALSE 55264
// exit ;
55262: GO 55290
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55264: LD_VAR 0 1
55268: PUSH
55269: LD_INT 1
55271: PPUSH
55272: LD_VAR 0 1
55276: PPUSH
55277: CALL_OW 12
55281: ARRAY
55282: PPUSH
55283: LD_INT 100
55285: PPUSH
55286: CALL_OW 234
// end ;
55290: PPOPN 1
55292: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55293: LD_EXP 30
55297: PUSH
55298: LD_EXP 44
55302: AND
55303: IFFALSE 55401
55305: GO 55307
55307: DISABLE
55308: LD_INT 0
55310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55311: LD_ADDR_VAR 0 1
55315: PUSH
55316: LD_INT 22
55318: PUSH
55319: LD_OWVAR 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 21
55330: PUSH
55331: LD_INT 1
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PPUSH
55342: CALL_OW 69
55346: ST_TO_ADDR
// if not tmp then
55347: LD_VAR 0 1
55351: NOT
55352: IFFALSE 55356
// exit ;
55354: GO 55401
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55356: LD_VAR 0 1
55360: PUSH
55361: LD_INT 1
55363: PPUSH
55364: LD_VAR 0 1
55368: PPUSH
55369: CALL_OW 12
55373: ARRAY
55374: PPUSH
55375: LD_INT 1
55377: PPUSH
55378: LD_INT 4
55380: PPUSH
55381: CALL_OW 12
55385: PPUSH
55386: LD_INT 3000
55388: PPUSH
55389: LD_INT 9000
55391: PPUSH
55392: CALL_OW 12
55396: PPUSH
55397: CALL_OW 492
// end ;
55401: PPOPN 1
55403: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55404: LD_EXP 30
55408: PUSH
55409: LD_EXP 45
55413: AND
55414: IFFALSE 55434
55416: GO 55418
55418: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55419: LD_INT 1
55421: PPUSH
55422: LD_OWVAR 2
55426: PPUSH
55427: LD_INT 0
55429: PPUSH
55430: CALL_OW 324
55434: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55435: LD_EXP 30
55439: PUSH
55440: LD_EXP 46
55444: AND
55445: IFFALSE 55528
55447: GO 55449
55449: DISABLE
55450: LD_INT 0
55452: PPUSH
55453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55454: LD_ADDR_VAR 0 2
55458: PUSH
55459: LD_INT 22
55461: PUSH
55462: LD_OWVAR 2
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 21
55473: PUSH
55474: LD_INT 3
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PPUSH
55485: CALL_OW 69
55489: ST_TO_ADDR
// if not tmp then
55490: LD_VAR 0 2
55494: NOT
55495: IFFALSE 55499
// exit ;
55497: GO 55528
// for i in tmp do
55499: LD_ADDR_VAR 0 1
55503: PUSH
55504: LD_VAR 0 2
55508: PUSH
55509: FOR_IN
55510: IFFALSE 55526
// SetBLevel ( i , 10 ) ;
55512: LD_VAR 0 1
55516: PPUSH
55517: LD_INT 10
55519: PPUSH
55520: CALL_OW 241
55524: GO 55509
55526: POP
55527: POP
// end ;
55528: PPOPN 2
55530: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55531: LD_EXP 30
55535: PUSH
55536: LD_EXP 47
55540: AND
55541: IFFALSE 55652
55543: GO 55545
55545: DISABLE
55546: LD_INT 0
55548: PPUSH
55549: PPUSH
55550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55551: LD_ADDR_VAR 0 3
55555: PUSH
55556: LD_INT 22
55558: PUSH
55559: LD_OWVAR 2
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 25
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PPUSH
55582: CALL_OW 69
55586: ST_TO_ADDR
// if not tmp then
55587: LD_VAR 0 3
55591: NOT
55592: IFFALSE 55596
// exit ;
55594: GO 55652
// un := tmp [ rand ( 1 , tmp ) ] ;
55596: LD_ADDR_VAR 0 2
55600: PUSH
55601: LD_VAR 0 3
55605: PUSH
55606: LD_INT 1
55608: PPUSH
55609: LD_VAR 0 3
55613: PPUSH
55614: CALL_OW 12
55618: ARRAY
55619: ST_TO_ADDR
// if Crawls ( un ) then
55620: LD_VAR 0 2
55624: PPUSH
55625: CALL_OW 318
55629: IFFALSE 55640
// ComWalk ( un ) ;
55631: LD_VAR 0 2
55635: PPUSH
55636: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55640: LD_VAR 0 2
55644: PPUSH
55645: LD_INT 5
55647: PPUSH
55648: CALL_OW 336
// end ;
55652: PPOPN 3
55654: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55655: LD_EXP 30
55659: PUSH
55660: LD_EXP 48
55664: AND
55665: PUSH
55666: LD_OWVAR 67
55670: PUSH
55671: LD_INT 4
55673: LESS
55674: AND
55675: IFFALSE 55694
55677: GO 55679
55679: DISABLE
// begin Difficulty := Difficulty + 1 ;
55680: LD_ADDR_OWVAR 67
55684: PUSH
55685: LD_OWVAR 67
55689: PUSH
55690: LD_INT 1
55692: PLUS
55693: ST_TO_ADDR
// end ;
55694: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55695: LD_EXP 30
55699: PUSH
55700: LD_EXP 49
55704: AND
55705: IFFALSE 55808
55707: GO 55709
55709: DISABLE
55710: LD_INT 0
55712: PPUSH
// begin for i := 1 to 5 do
55713: LD_ADDR_VAR 0 1
55717: PUSH
55718: DOUBLE
55719: LD_INT 1
55721: DEC
55722: ST_TO_ADDR
55723: LD_INT 5
55725: PUSH
55726: FOR_TO
55727: IFFALSE 55806
// begin uc_nation := nation_nature ;
55729: LD_ADDR_OWVAR 21
55733: PUSH
55734: LD_INT 0
55736: ST_TO_ADDR
// uc_side := 0 ;
55737: LD_ADDR_OWVAR 20
55741: PUSH
55742: LD_INT 0
55744: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55745: LD_ADDR_OWVAR 29
55749: PUSH
55750: LD_INT 12
55752: PUSH
55753: LD_INT 12
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// hc_agressivity := 20 ;
55760: LD_ADDR_OWVAR 35
55764: PUSH
55765: LD_INT 20
55767: ST_TO_ADDR
// hc_class := class_tiger ;
55768: LD_ADDR_OWVAR 28
55772: PUSH
55773: LD_INT 14
55775: ST_TO_ADDR
// hc_gallery :=  ;
55776: LD_ADDR_OWVAR 33
55780: PUSH
55781: LD_STRING 
55783: ST_TO_ADDR
// hc_name :=  ;
55784: LD_ADDR_OWVAR 26
55788: PUSH
55789: LD_STRING 
55791: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55792: CALL_OW 44
55796: PPUSH
55797: LD_INT 0
55799: PPUSH
55800: CALL_OW 51
// end ;
55804: GO 55726
55806: POP
55807: POP
// end ;
55808: PPOPN 1
55810: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55811: LD_EXP 30
55815: PUSH
55816: LD_EXP 50
55820: AND
55821: IFFALSE 55830
55823: GO 55825
55825: DISABLE
// StreamSibBomb ;
55826: CALL 55831 0 0
55830: END
// export function StreamSibBomb ; var i , x , y ; begin
55831: LD_INT 0
55833: PPUSH
55834: PPUSH
55835: PPUSH
55836: PPUSH
// result := false ;
55837: LD_ADDR_VAR 0 1
55841: PUSH
55842: LD_INT 0
55844: ST_TO_ADDR
// for i := 1 to 16 do
55845: LD_ADDR_VAR 0 2
55849: PUSH
55850: DOUBLE
55851: LD_INT 1
55853: DEC
55854: ST_TO_ADDR
55855: LD_INT 16
55857: PUSH
55858: FOR_TO
55859: IFFALSE 56058
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55861: LD_ADDR_VAR 0 3
55865: PUSH
55866: LD_INT 10
55868: PUSH
55869: LD_INT 20
55871: PUSH
55872: LD_INT 30
55874: PUSH
55875: LD_INT 40
55877: PUSH
55878: LD_INT 50
55880: PUSH
55881: LD_INT 60
55883: PUSH
55884: LD_INT 70
55886: PUSH
55887: LD_INT 80
55889: PUSH
55890: LD_INT 90
55892: PUSH
55893: LD_INT 100
55895: PUSH
55896: LD_INT 110
55898: PUSH
55899: LD_INT 120
55901: PUSH
55902: LD_INT 130
55904: PUSH
55905: LD_INT 140
55907: PUSH
55908: LD_INT 150
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PPUSH
55931: LD_INT 15
55933: PPUSH
55934: CALL_OW 12
55938: ARRAY
55939: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55940: LD_ADDR_VAR 0 4
55944: PUSH
55945: LD_INT 10
55947: PUSH
55948: LD_INT 20
55950: PUSH
55951: LD_INT 30
55953: PUSH
55954: LD_INT 40
55956: PUSH
55957: LD_INT 50
55959: PUSH
55960: LD_INT 60
55962: PUSH
55963: LD_INT 70
55965: PUSH
55966: LD_INT 80
55968: PUSH
55969: LD_INT 90
55971: PUSH
55972: LD_INT 100
55974: PUSH
55975: LD_INT 110
55977: PUSH
55978: LD_INT 120
55980: PUSH
55981: LD_INT 130
55983: PUSH
55984: LD_INT 140
55986: PUSH
55987: LD_INT 150
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: PPUSH
56010: LD_INT 15
56012: PPUSH
56013: CALL_OW 12
56017: ARRAY
56018: ST_TO_ADDR
// if ValidHex ( x , y ) then
56019: LD_VAR 0 3
56023: PPUSH
56024: LD_VAR 0 4
56028: PPUSH
56029: CALL_OW 488
56033: IFFALSE 56056
// begin result := [ x , y ] ;
56035: LD_ADDR_VAR 0 1
56039: PUSH
56040: LD_VAR 0 3
56044: PUSH
56045: LD_VAR 0 4
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: ST_TO_ADDR
// break ;
56054: GO 56058
// end ; end ;
56056: GO 55858
56058: POP
56059: POP
// if result then
56060: LD_VAR 0 1
56064: IFFALSE 56124
// begin ToLua ( playSibBomb() ) ;
56066: LD_STRING playSibBomb()
56068: PPUSH
56069: CALL_OW 559
// wait ( 0 0$14 ) ;
56073: LD_INT 490
56075: PPUSH
56076: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56080: LD_VAR 0 1
56084: PUSH
56085: LD_INT 1
56087: ARRAY
56088: PPUSH
56089: LD_VAR 0 1
56093: PUSH
56094: LD_INT 2
56096: ARRAY
56097: PPUSH
56098: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56102: LD_VAR 0 1
56106: PUSH
56107: LD_INT 1
56109: ARRAY
56110: PPUSH
56111: LD_VAR 0 1
56115: PUSH
56116: LD_INT 2
56118: ARRAY
56119: PPUSH
56120: CALL_OW 429
// end ; end ;
56124: LD_VAR 0 1
56128: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56129: LD_EXP 30
56133: PUSH
56134: LD_EXP 52
56138: AND
56139: IFFALSE 56151
56141: GO 56143
56143: DISABLE
// YouLost (  ) ;
56144: LD_STRING 
56146: PPUSH
56147: CALL_OW 104
56151: END
// every 0 0$1 trigger StreamModeActive and sFog do
56152: LD_EXP 30
56156: PUSH
56157: LD_EXP 51
56161: AND
56162: IFFALSE 56176
56164: GO 56166
56166: DISABLE
// FogOff ( your_side ) ;
56167: LD_OWVAR 2
56171: PPUSH
56172: CALL_OW 344
56176: END
// every 0 0$1 trigger StreamModeActive and sSun do
56177: LD_EXP 30
56181: PUSH
56182: LD_EXP 53
56186: AND
56187: IFFALSE 56215
56189: GO 56191
56191: DISABLE
// begin solar_recharge_percent := 0 ;
56192: LD_ADDR_OWVAR 79
56196: PUSH
56197: LD_INT 0
56199: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56200: LD_INT 10500
56202: PPUSH
56203: CALL_OW 67
// solar_recharge_percent := 100 ;
56207: LD_ADDR_OWVAR 79
56211: PUSH
56212: LD_INT 100
56214: ST_TO_ADDR
// end ;
56215: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56216: LD_EXP 30
56220: PUSH
56221: LD_EXP 54
56225: AND
56226: IFFALSE 56465
56228: GO 56230
56230: DISABLE
56231: LD_INT 0
56233: PPUSH
56234: PPUSH
56235: PPUSH
// begin tmp := [ ] ;
56236: LD_ADDR_VAR 0 3
56240: PUSH
56241: EMPTY
56242: ST_TO_ADDR
// for i := 1 to 6 do
56243: LD_ADDR_VAR 0 1
56247: PUSH
56248: DOUBLE
56249: LD_INT 1
56251: DEC
56252: ST_TO_ADDR
56253: LD_INT 6
56255: PUSH
56256: FOR_TO
56257: IFFALSE 56362
// begin uc_nation := nation_nature ;
56259: LD_ADDR_OWVAR 21
56263: PUSH
56264: LD_INT 0
56266: ST_TO_ADDR
// uc_side := 0 ;
56267: LD_ADDR_OWVAR 20
56271: PUSH
56272: LD_INT 0
56274: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56275: LD_ADDR_OWVAR 29
56279: PUSH
56280: LD_INT 12
56282: PUSH
56283: LD_INT 12
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: ST_TO_ADDR
// hc_agressivity := 20 ;
56290: LD_ADDR_OWVAR 35
56294: PUSH
56295: LD_INT 20
56297: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56298: LD_ADDR_OWVAR 28
56302: PUSH
56303: LD_INT 17
56305: ST_TO_ADDR
// hc_gallery :=  ;
56306: LD_ADDR_OWVAR 33
56310: PUSH
56311: LD_STRING 
56313: ST_TO_ADDR
// hc_name :=  ;
56314: LD_ADDR_OWVAR 26
56318: PUSH
56319: LD_STRING 
56321: ST_TO_ADDR
// un := CreateHuman ;
56322: LD_ADDR_VAR 0 2
56326: PUSH
56327: CALL_OW 44
56331: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56332: LD_VAR 0 2
56336: PPUSH
56337: LD_INT 1
56339: PPUSH
56340: CALL_OW 51
// tmp := tmp ^ un ;
56344: LD_ADDR_VAR 0 3
56348: PUSH
56349: LD_VAR 0 3
56353: PUSH
56354: LD_VAR 0 2
56358: ADD
56359: ST_TO_ADDR
// end ;
56360: GO 56256
56362: POP
56363: POP
// repeat wait ( 0 0$1 ) ;
56364: LD_INT 35
56366: PPUSH
56367: CALL_OW 67
// for un in tmp do
56371: LD_ADDR_VAR 0 2
56375: PUSH
56376: LD_VAR 0 3
56380: PUSH
56381: FOR_IN
56382: IFFALSE 56456
// begin if IsDead ( un ) then
56384: LD_VAR 0 2
56388: PPUSH
56389: CALL_OW 301
56393: IFFALSE 56413
// begin tmp := tmp diff un ;
56395: LD_ADDR_VAR 0 3
56399: PUSH
56400: LD_VAR 0 3
56404: PUSH
56405: LD_VAR 0 2
56409: DIFF
56410: ST_TO_ADDR
// continue ;
56411: GO 56381
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56413: LD_VAR 0 2
56417: PPUSH
56418: LD_INT 3
56420: PUSH
56421: LD_INT 22
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PPUSH
56435: CALL_OW 69
56439: PPUSH
56440: LD_VAR 0 2
56444: PPUSH
56445: CALL_OW 74
56449: PPUSH
56450: CALL_OW 115
// end ;
56454: GO 56381
56456: POP
56457: POP
// until not tmp ;
56458: LD_VAR 0 3
56462: NOT
56463: IFFALSE 56364
// end ;
56465: PPOPN 3
56467: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56468: LD_EXP 30
56472: PUSH
56473: LD_EXP 55
56477: AND
56478: IFFALSE 56532
56480: GO 56482
56482: DISABLE
// begin ToLua ( displayTroll(); ) ;
56483: LD_STRING displayTroll();
56485: PPUSH
56486: CALL_OW 559
// wait ( 3 3$00 ) ;
56490: LD_INT 6300
56492: PPUSH
56493: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56497: LD_STRING hideTroll();
56499: PPUSH
56500: CALL_OW 559
// wait ( 1 1$00 ) ;
56504: LD_INT 2100
56506: PPUSH
56507: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56511: LD_STRING displayTroll();
56513: PPUSH
56514: CALL_OW 559
// wait ( 1 1$00 ) ;
56518: LD_INT 2100
56520: PPUSH
56521: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56525: LD_STRING hideTroll();
56527: PPUSH
56528: CALL_OW 559
// end ;
56532: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56533: LD_EXP 30
56537: PUSH
56538: LD_EXP 56
56542: AND
56543: IFFALSE 56606
56545: GO 56547
56547: DISABLE
56548: LD_INT 0
56550: PPUSH
// begin p := 0 ;
56551: LD_ADDR_VAR 0 1
56555: PUSH
56556: LD_INT 0
56558: ST_TO_ADDR
// repeat game_speed := 1 ;
56559: LD_ADDR_OWVAR 65
56563: PUSH
56564: LD_INT 1
56566: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56567: LD_INT 35
56569: PPUSH
56570: CALL_OW 67
// p := p + 1 ;
56574: LD_ADDR_VAR 0 1
56578: PUSH
56579: LD_VAR 0 1
56583: PUSH
56584: LD_INT 1
56586: PLUS
56587: ST_TO_ADDR
// until p >= 60 ;
56588: LD_VAR 0 1
56592: PUSH
56593: LD_INT 60
56595: GREATEREQUAL
56596: IFFALSE 56559
// game_speed := 4 ;
56598: LD_ADDR_OWVAR 65
56602: PUSH
56603: LD_INT 4
56605: ST_TO_ADDR
// end ;
56606: PPOPN 1
56608: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56609: LD_EXP 30
56613: PUSH
56614: LD_EXP 57
56618: AND
56619: IFFALSE 56765
56621: GO 56623
56623: DISABLE
56624: LD_INT 0
56626: PPUSH
56627: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56628: LD_ADDR_VAR 0 1
56632: PUSH
56633: LD_INT 22
56635: PUSH
56636: LD_OWVAR 2
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 2
56647: PUSH
56648: LD_INT 30
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 30
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PPUSH
56677: CALL_OW 69
56681: ST_TO_ADDR
// if not depot then
56682: LD_VAR 0 1
56686: NOT
56687: IFFALSE 56691
// exit ;
56689: GO 56765
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56691: LD_ADDR_VAR 0 2
56695: PUSH
56696: LD_VAR 0 1
56700: PUSH
56701: LD_INT 1
56703: PPUSH
56704: LD_VAR 0 1
56708: PPUSH
56709: CALL_OW 12
56713: ARRAY
56714: PPUSH
56715: CALL_OW 274
56719: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56720: LD_VAR 0 2
56724: PPUSH
56725: LD_INT 1
56727: PPUSH
56728: LD_INT 0
56730: PPUSH
56731: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56735: LD_VAR 0 2
56739: PPUSH
56740: LD_INT 2
56742: PPUSH
56743: LD_INT 0
56745: PPUSH
56746: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56750: LD_VAR 0 2
56754: PPUSH
56755: LD_INT 3
56757: PPUSH
56758: LD_INT 0
56760: PPUSH
56761: CALL_OW 277
// end ;
56765: PPOPN 2
56767: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56768: LD_EXP 30
56772: PUSH
56773: LD_EXP 58
56777: AND
56778: IFFALSE 56875
56780: GO 56782
56782: DISABLE
56783: LD_INT 0
56785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56786: LD_ADDR_VAR 0 1
56790: PUSH
56791: LD_INT 22
56793: PUSH
56794: LD_OWVAR 2
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 21
56805: PUSH
56806: LD_INT 1
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 3
56815: PUSH
56816: LD_INT 23
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: LIST
56834: PPUSH
56835: CALL_OW 69
56839: ST_TO_ADDR
// if not tmp then
56840: LD_VAR 0 1
56844: NOT
56845: IFFALSE 56849
// exit ;
56847: GO 56875
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56849: LD_VAR 0 1
56853: PUSH
56854: LD_INT 1
56856: PPUSH
56857: LD_VAR 0 1
56861: PPUSH
56862: CALL_OW 12
56866: ARRAY
56867: PPUSH
56868: LD_INT 200
56870: PPUSH
56871: CALL_OW 234
// end ;
56875: PPOPN 1
56877: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56878: LD_EXP 30
56882: PUSH
56883: LD_EXP 59
56887: AND
56888: IFFALSE 56967
56890: GO 56892
56892: DISABLE
56893: LD_INT 0
56895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56896: LD_ADDR_VAR 0 1
56900: PUSH
56901: LD_INT 22
56903: PUSH
56904: LD_OWVAR 2
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 21
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PPUSH
56927: CALL_OW 69
56931: ST_TO_ADDR
// if not tmp then
56932: LD_VAR 0 1
56936: NOT
56937: IFFALSE 56941
// exit ;
56939: GO 56967
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56941: LD_VAR 0 1
56945: PUSH
56946: LD_INT 1
56948: PPUSH
56949: LD_VAR 0 1
56953: PPUSH
56954: CALL_OW 12
56958: ARRAY
56959: PPUSH
56960: LD_INT 60
56962: PPUSH
56963: CALL_OW 234
// end ;
56967: PPOPN 1
56969: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56970: LD_EXP 30
56974: PUSH
56975: LD_EXP 60
56979: AND
56980: IFFALSE 57079
56982: GO 56984
56984: DISABLE
56985: LD_INT 0
56987: PPUSH
56988: PPUSH
// begin enable ;
56989: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56990: LD_ADDR_VAR 0 1
56994: PUSH
56995: LD_INT 22
56997: PUSH
56998: LD_OWVAR 2
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 61
57009: PUSH
57010: EMPTY
57011: LIST
57012: PUSH
57013: LD_INT 33
57015: PUSH
57016: LD_INT 2
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: LIST
57027: PPUSH
57028: CALL_OW 69
57032: ST_TO_ADDR
// if not tmp then
57033: LD_VAR 0 1
57037: NOT
57038: IFFALSE 57042
// exit ;
57040: GO 57079
// for i in tmp do
57042: LD_ADDR_VAR 0 2
57046: PUSH
57047: LD_VAR 0 1
57051: PUSH
57052: FOR_IN
57053: IFFALSE 57077
// if IsControledBy ( i ) then
57055: LD_VAR 0 2
57059: PPUSH
57060: CALL_OW 312
57064: IFFALSE 57075
// ComUnlink ( i ) ;
57066: LD_VAR 0 2
57070: PPUSH
57071: CALL_OW 136
57075: GO 57052
57077: POP
57078: POP
// end ;
57079: PPOPN 2
57081: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57082: LD_EXP 30
57086: PUSH
57087: LD_EXP 61
57091: AND
57092: IFFALSE 57232
57094: GO 57096
57096: DISABLE
57097: LD_INT 0
57099: PPUSH
57100: PPUSH
// begin ToLua ( displayPowell(); ) ;
57101: LD_STRING displayPowell();
57103: PPUSH
57104: CALL_OW 559
// uc_side := 0 ;
57108: LD_ADDR_OWVAR 20
57112: PUSH
57113: LD_INT 0
57115: ST_TO_ADDR
// uc_nation := 2 ;
57116: LD_ADDR_OWVAR 21
57120: PUSH
57121: LD_INT 2
57123: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57124: LD_ADDR_OWVAR 37
57128: PUSH
57129: LD_INT 14
57131: ST_TO_ADDR
// vc_engine := engine_siberite ;
57132: LD_ADDR_OWVAR 39
57136: PUSH
57137: LD_INT 3
57139: ST_TO_ADDR
// vc_control := control_apeman ;
57140: LD_ADDR_OWVAR 38
57144: PUSH
57145: LD_INT 5
57147: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57148: LD_ADDR_OWVAR 40
57152: PUSH
57153: LD_INT 29
57155: ST_TO_ADDR
// un := CreateVehicle ;
57156: LD_ADDR_VAR 0 2
57160: PUSH
57161: CALL_OW 45
57165: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57166: LD_VAR 0 2
57170: PPUSH
57171: LD_INT 1
57173: PPUSH
57174: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57178: LD_INT 35
57180: PPUSH
57181: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57185: LD_VAR 0 2
57189: PPUSH
57190: LD_INT 22
57192: PUSH
57193: LD_OWVAR 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PPUSH
57202: CALL_OW 69
57206: PPUSH
57207: LD_VAR 0 2
57211: PPUSH
57212: CALL_OW 74
57216: PPUSH
57217: CALL_OW 115
// until IsDead ( un ) ;
57221: LD_VAR 0 2
57225: PPUSH
57226: CALL_OW 301
57230: IFFALSE 57178
// end ;
57232: PPOPN 2
57234: END
// every 0 0$1 trigger StreamModeActive and sStu do
57235: LD_EXP 30
57239: PUSH
57240: LD_EXP 69
57244: AND
57245: IFFALSE 57261
57247: GO 57249
57249: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57250: LD_STRING displayStucuk();
57252: PPUSH
57253: CALL_OW 559
// ResetFog ;
57257: CALL_OW 335
// end ;
57261: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57262: LD_EXP 30
57266: PUSH
57267: LD_EXP 62
57271: AND
57272: IFFALSE 57413
57274: GO 57276
57276: DISABLE
57277: LD_INT 0
57279: PPUSH
57280: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57281: LD_ADDR_VAR 0 2
57285: PUSH
57286: LD_INT 22
57288: PUSH
57289: LD_OWVAR 2
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 21
57300: PUSH
57301: LD_INT 1
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PPUSH
57312: CALL_OW 69
57316: ST_TO_ADDR
// if not tmp then
57317: LD_VAR 0 2
57321: NOT
57322: IFFALSE 57326
// exit ;
57324: GO 57413
// un := tmp [ rand ( 1 , tmp ) ] ;
57326: LD_ADDR_VAR 0 1
57330: PUSH
57331: LD_VAR 0 2
57335: PUSH
57336: LD_INT 1
57338: PPUSH
57339: LD_VAR 0 2
57343: PPUSH
57344: CALL_OW 12
57348: ARRAY
57349: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57350: LD_VAR 0 1
57354: PPUSH
57355: LD_INT 0
57357: PPUSH
57358: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57362: LD_VAR 0 1
57366: PPUSH
57367: LD_OWVAR 3
57371: PUSH
57372: LD_VAR 0 1
57376: DIFF
57377: PPUSH
57378: LD_VAR 0 1
57382: PPUSH
57383: CALL_OW 74
57387: PPUSH
57388: CALL_OW 115
// wait ( 0 0$20 ) ;
57392: LD_INT 700
57394: PPUSH
57395: CALL_OW 67
// SetSide ( un , your_side ) ;
57399: LD_VAR 0 1
57403: PPUSH
57404: LD_OWVAR 2
57408: PPUSH
57409: CALL_OW 235
// end ;
57413: PPOPN 2
57415: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57416: LD_EXP 30
57420: PUSH
57421: LD_EXP 63
57425: AND
57426: IFFALSE 57532
57428: GO 57430
57430: DISABLE
57431: LD_INT 0
57433: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57434: LD_ADDR_VAR 0 1
57438: PUSH
57439: LD_INT 22
57441: PUSH
57442: LD_OWVAR 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 30
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 30
57466: PUSH
57467: LD_INT 1
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PPUSH
57483: CALL_OW 69
57487: ST_TO_ADDR
// if not depot then
57488: LD_VAR 0 1
57492: NOT
57493: IFFALSE 57497
// exit ;
57495: GO 57532
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57497: LD_VAR 0 1
57501: PUSH
57502: LD_INT 1
57504: ARRAY
57505: PPUSH
57506: CALL_OW 250
57510: PPUSH
57511: LD_VAR 0 1
57515: PUSH
57516: LD_INT 1
57518: ARRAY
57519: PPUSH
57520: CALL_OW 251
57524: PPUSH
57525: LD_INT 70
57527: PPUSH
57528: CALL_OW 495
// end ;
57532: PPOPN 1
57534: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57535: LD_EXP 30
57539: PUSH
57540: LD_EXP 64
57544: AND
57545: IFFALSE 57756
57547: GO 57549
57549: DISABLE
57550: LD_INT 0
57552: PPUSH
57553: PPUSH
57554: PPUSH
57555: PPUSH
57556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57557: LD_ADDR_VAR 0 5
57561: PUSH
57562: LD_INT 22
57564: PUSH
57565: LD_OWVAR 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 21
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PPUSH
57588: CALL_OW 69
57592: ST_TO_ADDR
// if not tmp then
57593: LD_VAR 0 5
57597: NOT
57598: IFFALSE 57602
// exit ;
57600: GO 57756
// for i in tmp do
57602: LD_ADDR_VAR 0 1
57606: PUSH
57607: LD_VAR 0 5
57611: PUSH
57612: FOR_IN
57613: IFFALSE 57754
// begin d := rand ( 0 , 5 ) ;
57615: LD_ADDR_VAR 0 4
57619: PUSH
57620: LD_INT 0
57622: PPUSH
57623: LD_INT 5
57625: PPUSH
57626: CALL_OW 12
57630: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57631: LD_ADDR_VAR 0 2
57635: PUSH
57636: LD_VAR 0 1
57640: PPUSH
57641: CALL_OW 250
57645: PPUSH
57646: LD_VAR 0 4
57650: PPUSH
57651: LD_INT 3
57653: PPUSH
57654: LD_INT 12
57656: PPUSH
57657: CALL_OW 12
57661: PPUSH
57662: CALL_OW 272
57666: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57667: LD_ADDR_VAR 0 3
57671: PUSH
57672: LD_VAR 0 1
57676: PPUSH
57677: CALL_OW 251
57681: PPUSH
57682: LD_VAR 0 4
57686: PPUSH
57687: LD_INT 3
57689: PPUSH
57690: LD_INT 12
57692: PPUSH
57693: CALL_OW 12
57697: PPUSH
57698: CALL_OW 273
57702: ST_TO_ADDR
// if ValidHex ( x , y ) then
57703: LD_VAR 0 2
57707: PPUSH
57708: LD_VAR 0 3
57712: PPUSH
57713: CALL_OW 488
57717: IFFALSE 57752
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57719: LD_VAR 0 1
57723: PPUSH
57724: LD_VAR 0 2
57728: PPUSH
57729: LD_VAR 0 3
57733: PPUSH
57734: LD_INT 3
57736: PPUSH
57737: LD_INT 6
57739: PPUSH
57740: CALL_OW 12
57744: PPUSH
57745: LD_INT 1
57747: PPUSH
57748: CALL_OW 483
// end ;
57752: GO 57612
57754: POP
57755: POP
// end ;
57756: PPOPN 5
57758: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57759: LD_EXP 30
57763: PUSH
57764: LD_EXP 65
57768: AND
57769: IFFALSE 57863
57771: GO 57773
57773: DISABLE
57774: LD_INT 0
57776: PPUSH
57777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57778: LD_ADDR_VAR 0 2
57782: PUSH
57783: LD_INT 22
57785: PUSH
57786: LD_OWVAR 2
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 32
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 21
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: PPUSH
57820: CALL_OW 69
57824: ST_TO_ADDR
// if not tmp then
57825: LD_VAR 0 2
57829: NOT
57830: IFFALSE 57834
// exit ;
57832: GO 57863
// for i in tmp do
57834: LD_ADDR_VAR 0 1
57838: PUSH
57839: LD_VAR 0 2
57843: PUSH
57844: FOR_IN
57845: IFFALSE 57861
// SetFuel ( i , 0 ) ;
57847: LD_VAR 0 1
57851: PPUSH
57852: LD_INT 0
57854: PPUSH
57855: CALL_OW 240
57859: GO 57844
57861: POP
57862: POP
// end ;
57863: PPOPN 2
57865: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57866: LD_EXP 30
57870: PUSH
57871: LD_EXP 66
57875: AND
57876: IFFALSE 57942
57878: GO 57880
57880: DISABLE
57881: LD_INT 0
57883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57884: LD_ADDR_VAR 0 1
57888: PUSH
57889: LD_INT 22
57891: PUSH
57892: LD_OWVAR 2
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 30
57903: PUSH
57904: LD_INT 29
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PPUSH
57915: CALL_OW 69
57919: ST_TO_ADDR
// if not tmp then
57920: LD_VAR 0 1
57924: NOT
57925: IFFALSE 57929
// exit ;
57927: GO 57942
// DestroyUnit ( tmp [ 1 ] ) ;
57929: LD_VAR 0 1
57933: PUSH
57934: LD_INT 1
57936: ARRAY
57937: PPUSH
57938: CALL_OW 65
// end ;
57942: PPOPN 1
57944: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57945: LD_EXP 30
57949: PUSH
57950: LD_EXP 68
57954: AND
57955: IFFALSE 58084
57957: GO 57959
57959: DISABLE
57960: LD_INT 0
57962: PPUSH
// begin uc_side := 0 ;
57963: LD_ADDR_OWVAR 20
57967: PUSH
57968: LD_INT 0
57970: ST_TO_ADDR
// uc_nation := nation_arabian ;
57971: LD_ADDR_OWVAR 21
57975: PUSH
57976: LD_INT 2
57978: ST_TO_ADDR
// hc_gallery :=  ;
57979: LD_ADDR_OWVAR 33
57983: PUSH
57984: LD_STRING 
57986: ST_TO_ADDR
// hc_name :=  ;
57987: LD_ADDR_OWVAR 26
57991: PUSH
57992: LD_STRING 
57994: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57995: LD_INT 1
57997: PPUSH
57998: LD_INT 11
58000: PPUSH
58001: LD_INT 10
58003: PPUSH
58004: CALL_OW 380
// un := CreateHuman ;
58008: LD_ADDR_VAR 0 1
58012: PUSH
58013: CALL_OW 44
58017: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58018: LD_VAR 0 1
58022: PPUSH
58023: LD_INT 1
58025: PPUSH
58026: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58030: LD_INT 35
58032: PPUSH
58033: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58037: LD_VAR 0 1
58041: PPUSH
58042: LD_INT 22
58044: PUSH
58045: LD_OWVAR 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PPUSH
58054: CALL_OW 69
58058: PPUSH
58059: LD_VAR 0 1
58063: PPUSH
58064: CALL_OW 74
58068: PPUSH
58069: CALL_OW 115
// until IsDead ( un ) ;
58073: LD_VAR 0 1
58077: PPUSH
58078: CALL_OW 301
58082: IFFALSE 58030
// end ;
58084: PPOPN 1
58086: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58087: LD_EXP 30
58091: PUSH
58092: LD_EXP 70
58096: AND
58097: IFFALSE 58109
58099: GO 58101
58101: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58102: LD_STRING earthquake(getX(game), 0, 32)
58104: PPUSH
58105: CALL_OW 559
58109: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58110: LD_EXP 30
58114: PUSH
58115: LD_EXP 71
58119: AND
58120: IFFALSE 58211
58122: GO 58124
58124: DISABLE
58125: LD_INT 0
58127: PPUSH
// begin enable ;
58128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58129: LD_ADDR_VAR 0 1
58133: PUSH
58134: LD_INT 22
58136: PUSH
58137: LD_OWVAR 2
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 21
58148: PUSH
58149: LD_INT 2
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 33
58158: PUSH
58159: LD_INT 3
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: PPUSH
58171: CALL_OW 69
58175: ST_TO_ADDR
// if not tmp then
58176: LD_VAR 0 1
58180: NOT
58181: IFFALSE 58185
// exit ;
58183: GO 58211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58185: LD_VAR 0 1
58189: PUSH
58190: LD_INT 1
58192: PPUSH
58193: LD_VAR 0 1
58197: PPUSH
58198: CALL_OW 12
58202: ARRAY
58203: PPUSH
58204: LD_INT 1
58206: PPUSH
58207: CALL_OW 234
// end ;
58211: PPOPN 1
58213: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58214: LD_EXP 30
58218: PUSH
58219: LD_EXP 72
58223: AND
58224: IFFALSE 58365
58226: GO 58228
58228: DISABLE
58229: LD_INT 0
58231: PPUSH
58232: PPUSH
58233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58234: LD_ADDR_VAR 0 3
58238: PUSH
58239: LD_INT 22
58241: PUSH
58242: LD_OWVAR 2
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 25
58253: PUSH
58254: LD_INT 1
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PPUSH
58265: CALL_OW 69
58269: ST_TO_ADDR
// if not tmp then
58270: LD_VAR 0 3
58274: NOT
58275: IFFALSE 58279
// exit ;
58277: GO 58365
// un := tmp [ rand ( 1 , tmp ) ] ;
58279: LD_ADDR_VAR 0 2
58283: PUSH
58284: LD_VAR 0 3
58288: PUSH
58289: LD_INT 1
58291: PPUSH
58292: LD_VAR 0 3
58296: PPUSH
58297: CALL_OW 12
58301: ARRAY
58302: ST_TO_ADDR
// if Crawls ( un ) then
58303: LD_VAR 0 2
58307: PPUSH
58308: CALL_OW 318
58312: IFFALSE 58323
// ComWalk ( un ) ;
58314: LD_VAR 0 2
58318: PPUSH
58319: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58323: LD_VAR 0 2
58327: PPUSH
58328: LD_INT 9
58330: PPUSH
58331: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58335: LD_INT 28
58337: PPUSH
58338: LD_OWVAR 2
58342: PPUSH
58343: LD_INT 2
58345: PPUSH
58346: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58350: LD_INT 29
58352: PPUSH
58353: LD_OWVAR 2
58357: PPUSH
58358: LD_INT 2
58360: PPUSH
58361: CALL_OW 322
// end ;
58365: PPOPN 3
58367: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58368: LD_EXP 30
58372: PUSH
58373: LD_EXP 73
58377: AND
58378: IFFALSE 58489
58380: GO 58382
58382: DISABLE
58383: LD_INT 0
58385: PPUSH
58386: PPUSH
58387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58388: LD_ADDR_VAR 0 3
58392: PUSH
58393: LD_INT 22
58395: PUSH
58396: LD_OWVAR 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 25
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PPUSH
58419: CALL_OW 69
58423: ST_TO_ADDR
// if not tmp then
58424: LD_VAR 0 3
58428: NOT
58429: IFFALSE 58433
// exit ;
58431: GO 58489
// un := tmp [ rand ( 1 , tmp ) ] ;
58433: LD_ADDR_VAR 0 2
58437: PUSH
58438: LD_VAR 0 3
58442: PUSH
58443: LD_INT 1
58445: PPUSH
58446: LD_VAR 0 3
58450: PPUSH
58451: CALL_OW 12
58455: ARRAY
58456: ST_TO_ADDR
// if Crawls ( un ) then
58457: LD_VAR 0 2
58461: PPUSH
58462: CALL_OW 318
58466: IFFALSE 58477
// ComWalk ( un ) ;
58468: LD_VAR 0 2
58472: PPUSH
58473: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58477: LD_VAR 0 2
58481: PPUSH
58482: LD_INT 8
58484: PPUSH
58485: CALL_OW 336
// end ;
58489: PPOPN 3
58491: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58492: LD_EXP 30
58496: PUSH
58497: LD_EXP 74
58501: AND
58502: IFFALSE 58646
58504: GO 58506
58506: DISABLE
58507: LD_INT 0
58509: PPUSH
58510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58511: LD_ADDR_VAR 0 2
58515: PUSH
58516: LD_INT 22
58518: PUSH
58519: LD_OWVAR 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 21
58530: PUSH
58531: LD_INT 2
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: LD_INT 34
58543: PUSH
58544: LD_INT 12
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 34
58553: PUSH
58554: LD_INT 51
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 34
58563: PUSH
58564: LD_INT 32
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: LIST
58581: PPUSH
58582: CALL_OW 69
58586: ST_TO_ADDR
// if not tmp then
58587: LD_VAR 0 2
58591: NOT
58592: IFFALSE 58596
// exit ;
58594: GO 58646
// for i in tmp do
58596: LD_ADDR_VAR 0 1
58600: PUSH
58601: LD_VAR 0 2
58605: PUSH
58606: FOR_IN
58607: IFFALSE 58644
// if GetCargo ( i , mat_artifact ) = 0 then
58609: LD_VAR 0 1
58613: PPUSH
58614: LD_INT 4
58616: PPUSH
58617: CALL_OW 289
58621: PUSH
58622: LD_INT 0
58624: EQUAL
58625: IFFALSE 58642
// SetCargo ( i , mat_siberit , 100 ) ;
58627: LD_VAR 0 1
58631: PPUSH
58632: LD_INT 3
58634: PPUSH
58635: LD_INT 100
58637: PPUSH
58638: CALL_OW 290
58642: GO 58606
58644: POP
58645: POP
// end ;
58646: PPOPN 2
58648: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58649: LD_EXP 30
58653: PUSH
58654: LD_EXP 75
58658: AND
58659: IFFALSE 58842
58661: GO 58663
58663: DISABLE
58664: LD_INT 0
58666: PPUSH
58667: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58668: LD_ADDR_VAR 0 2
58672: PUSH
58673: LD_INT 22
58675: PUSH
58676: LD_OWVAR 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PPUSH
58685: CALL_OW 69
58689: ST_TO_ADDR
// if not tmp then
58690: LD_VAR 0 2
58694: NOT
58695: IFFALSE 58699
// exit ;
58697: GO 58842
// for i := 1 to 2 do
58699: LD_ADDR_VAR 0 1
58703: PUSH
58704: DOUBLE
58705: LD_INT 1
58707: DEC
58708: ST_TO_ADDR
58709: LD_INT 2
58711: PUSH
58712: FOR_TO
58713: IFFALSE 58840
// begin uc_side := your_side ;
58715: LD_ADDR_OWVAR 20
58719: PUSH
58720: LD_OWVAR 2
58724: ST_TO_ADDR
// uc_nation := nation_american ;
58725: LD_ADDR_OWVAR 21
58729: PUSH
58730: LD_INT 1
58732: ST_TO_ADDR
// vc_chassis := us_morphling ;
58733: LD_ADDR_OWVAR 37
58737: PUSH
58738: LD_INT 5
58740: ST_TO_ADDR
// vc_engine := engine_siberite ;
58741: LD_ADDR_OWVAR 39
58745: PUSH
58746: LD_INT 3
58748: ST_TO_ADDR
// vc_control := control_computer ;
58749: LD_ADDR_OWVAR 38
58753: PUSH
58754: LD_INT 3
58756: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58757: LD_ADDR_OWVAR 40
58761: PUSH
58762: LD_INT 10
58764: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58765: LD_VAR 0 2
58769: PUSH
58770: LD_INT 1
58772: ARRAY
58773: PPUSH
58774: CALL_OW 310
58778: NOT
58779: IFFALSE 58826
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58781: CALL_OW 45
58785: PPUSH
58786: LD_VAR 0 2
58790: PUSH
58791: LD_INT 1
58793: ARRAY
58794: PPUSH
58795: CALL_OW 250
58799: PPUSH
58800: LD_VAR 0 2
58804: PUSH
58805: LD_INT 1
58807: ARRAY
58808: PPUSH
58809: CALL_OW 251
58813: PPUSH
58814: LD_INT 12
58816: PPUSH
58817: LD_INT 1
58819: PPUSH
58820: CALL_OW 50
58824: GO 58838
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58826: CALL_OW 45
58830: PPUSH
58831: LD_INT 1
58833: PPUSH
58834: CALL_OW 51
// end ;
58838: GO 58712
58840: POP
58841: POP
// end ;
58842: PPOPN 2
58844: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58845: LD_EXP 30
58849: PUSH
58850: LD_EXP 76
58854: AND
58855: IFFALSE 59077
58857: GO 58859
58859: DISABLE
58860: LD_INT 0
58862: PPUSH
58863: PPUSH
58864: PPUSH
58865: PPUSH
58866: PPUSH
58867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58868: LD_ADDR_VAR 0 6
58872: PUSH
58873: LD_INT 22
58875: PUSH
58876: LD_OWVAR 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 21
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: LD_INT 23
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: PPUSH
58917: CALL_OW 69
58921: ST_TO_ADDR
// if not tmp then
58922: LD_VAR 0 6
58926: NOT
58927: IFFALSE 58931
// exit ;
58929: GO 59077
// s1 := rand ( 1 , 4 ) ;
58931: LD_ADDR_VAR 0 2
58935: PUSH
58936: LD_INT 1
58938: PPUSH
58939: LD_INT 4
58941: PPUSH
58942: CALL_OW 12
58946: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58947: LD_ADDR_VAR 0 4
58951: PUSH
58952: LD_VAR 0 6
58956: PUSH
58957: LD_INT 1
58959: ARRAY
58960: PPUSH
58961: LD_VAR 0 2
58965: PPUSH
58966: CALL_OW 259
58970: ST_TO_ADDR
// if s1 = 1 then
58971: LD_VAR 0 2
58975: PUSH
58976: LD_INT 1
58978: EQUAL
58979: IFFALSE 58999
// s2 := rand ( 2 , 4 ) else
58981: LD_ADDR_VAR 0 3
58985: PUSH
58986: LD_INT 2
58988: PPUSH
58989: LD_INT 4
58991: PPUSH
58992: CALL_OW 12
58996: ST_TO_ADDR
58997: GO 59007
// s2 := 1 ;
58999: LD_ADDR_VAR 0 3
59003: PUSH
59004: LD_INT 1
59006: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59007: LD_ADDR_VAR 0 5
59011: PUSH
59012: LD_VAR 0 6
59016: PUSH
59017: LD_INT 1
59019: ARRAY
59020: PPUSH
59021: LD_VAR 0 3
59025: PPUSH
59026: CALL_OW 259
59030: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59031: LD_VAR 0 6
59035: PUSH
59036: LD_INT 1
59038: ARRAY
59039: PPUSH
59040: LD_VAR 0 2
59044: PPUSH
59045: LD_VAR 0 5
59049: PPUSH
59050: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59054: LD_VAR 0 6
59058: PUSH
59059: LD_INT 1
59061: ARRAY
59062: PPUSH
59063: LD_VAR 0 3
59067: PPUSH
59068: LD_VAR 0 4
59072: PPUSH
59073: CALL_OW 237
// end ;
59077: PPOPN 6
59079: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59080: LD_EXP 30
59084: PUSH
59085: LD_EXP 77
59089: AND
59090: IFFALSE 59169
59092: GO 59094
59094: DISABLE
59095: LD_INT 0
59097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59098: LD_ADDR_VAR 0 1
59102: PUSH
59103: LD_INT 22
59105: PUSH
59106: LD_OWVAR 2
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 30
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PPUSH
59129: CALL_OW 69
59133: ST_TO_ADDR
// if not tmp then
59134: LD_VAR 0 1
59138: NOT
59139: IFFALSE 59143
// exit ;
59141: GO 59169
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59143: LD_VAR 0 1
59147: PUSH
59148: LD_INT 1
59150: PPUSH
59151: LD_VAR 0 1
59155: PPUSH
59156: CALL_OW 12
59160: ARRAY
59161: PPUSH
59162: LD_INT 1
59164: PPUSH
59165: CALL_OW 234
// end ;
59169: PPOPN 1
59171: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59172: LD_EXP 30
59176: PUSH
59177: LD_EXP 78
59181: AND
59182: IFFALSE 59294
59184: GO 59186
59186: DISABLE
59187: LD_INT 0
59189: PPUSH
59190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59191: LD_ADDR_VAR 0 2
59195: PUSH
59196: LD_INT 22
59198: PUSH
59199: LD_OWVAR 2
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 2
59210: PUSH
59211: LD_INT 30
59213: PUSH
59214: LD_INT 27
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 30
59223: PUSH
59224: LD_INT 26
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 30
59233: PUSH
59234: LD_INT 28
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PPUSH
59251: CALL_OW 69
59255: ST_TO_ADDR
// if not tmp then
59256: LD_VAR 0 2
59260: NOT
59261: IFFALSE 59265
// exit ;
59263: GO 59294
// for i in tmp do
59265: LD_ADDR_VAR 0 1
59269: PUSH
59270: LD_VAR 0 2
59274: PUSH
59275: FOR_IN
59276: IFFALSE 59292
// SetLives ( i , 1 ) ;
59278: LD_VAR 0 1
59282: PPUSH
59283: LD_INT 1
59285: PPUSH
59286: CALL_OW 234
59290: GO 59275
59292: POP
59293: POP
// end ;
59294: PPOPN 2
59296: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59297: LD_EXP 30
59301: PUSH
59302: LD_EXP 79
59306: AND
59307: IFFALSE 59594
59309: GO 59311
59311: DISABLE
59312: LD_INT 0
59314: PPUSH
59315: PPUSH
59316: PPUSH
// begin i := rand ( 1 , 7 ) ;
59317: LD_ADDR_VAR 0 1
59321: PUSH
59322: LD_INT 1
59324: PPUSH
59325: LD_INT 7
59327: PPUSH
59328: CALL_OW 12
59332: ST_TO_ADDR
// case i of 1 :
59333: LD_VAR 0 1
59337: PUSH
59338: LD_INT 1
59340: DOUBLE
59341: EQUAL
59342: IFTRUE 59346
59344: GO 59356
59346: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59347: LD_STRING earthquake(getX(game), 0, 32)
59349: PPUSH
59350: CALL_OW 559
59354: GO 59594
59356: LD_INT 2
59358: DOUBLE
59359: EQUAL
59360: IFTRUE 59364
59362: GO 59378
59364: POP
// begin ToLua ( displayStucuk(); ) ;
59365: LD_STRING displayStucuk();
59367: PPUSH
59368: CALL_OW 559
// ResetFog ;
59372: CALL_OW 335
// end ; 3 :
59376: GO 59594
59378: LD_INT 3
59380: DOUBLE
59381: EQUAL
59382: IFTRUE 59386
59384: GO 59490
59386: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59387: LD_ADDR_VAR 0 2
59391: PUSH
59392: LD_INT 22
59394: PUSH
59395: LD_OWVAR 2
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: LD_INT 25
59406: PUSH
59407: LD_INT 1
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PPUSH
59418: CALL_OW 69
59422: ST_TO_ADDR
// if not tmp then
59423: LD_VAR 0 2
59427: NOT
59428: IFFALSE 59432
// exit ;
59430: GO 59594
// un := tmp [ rand ( 1 , tmp ) ] ;
59432: LD_ADDR_VAR 0 3
59436: PUSH
59437: LD_VAR 0 2
59441: PUSH
59442: LD_INT 1
59444: PPUSH
59445: LD_VAR 0 2
59449: PPUSH
59450: CALL_OW 12
59454: ARRAY
59455: ST_TO_ADDR
// if Crawls ( un ) then
59456: LD_VAR 0 3
59460: PPUSH
59461: CALL_OW 318
59465: IFFALSE 59476
// ComWalk ( un ) ;
59467: LD_VAR 0 3
59471: PPUSH
59472: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59476: LD_VAR 0 3
59480: PPUSH
59481: LD_INT 8
59483: PPUSH
59484: CALL_OW 336
// end ; 4 :
59488: GO 59594
59490: LD_INT 4
59492: DOUBLE
59493: EQUAL
59494: IFTRUE 59498
59496: GO 59572
59498: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59499: LD_ADDR_VAR 0 2
59503: PUSH
59504: LD_INT 22
59506: PUSH
59507: LD_OWVAR 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 30
59518: PUSH
59519: LD_INT 29
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PPUSH
59530: CALL_OW 69
59534: ST_TO_ADDR
// if not tmp then
59535: LD_VAR 0 2
59539: NOT
59540: IFFALSE 59544
// exit ;
59542: GO 59594
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59544: LD_VAR 0 2
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PPUSH
59553: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59557: LD_VAR 0 2
59561: PUSH
59562: LD_INT 1
59564: ARRAY
59565: PPUSH
59566: CALL_OW 65
// end ; 5 .. 7 :
59570: GO 59594
59572: LD_INT 5
59574: DOUBLE
59575: GREATEREQUAL
59576: IFFALSE 59584
59578: LD_INT 7
59580: DOUBLE
59581: LESSEQUAL
59582: IFTRUE 59586
59584: GO 59593
59586: POP
// StreamSibBomb ; end ;
59587: CALL 55831 0 0
59591: GO 59594
59593: POP
// end ;
59594: PPOPN 3
59596: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59597: LD_EXP 30
59601: PUSH
59602: LD_EXP 80
59606: AND
59607: IFFALSE 59763
59609: GO 59611
59611: DISABLE
59612: LD_INT 0
59614: PPUSH
59615: PPUSH
59616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59617: LD_ADDR_VAR 0 2
59621: PUSH
59622: LD_INT 81
59624: PUSH
59625: LD_OWVAR 2
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 2
59636: PUSH
59637: LD_INT 21
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 21
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PPUSH
59666: CALL_OW 69
59670: ST_TO_ADDR
// if not tmp then
59671: LD_VAR 0 2
59675: NOT
59676: IFFALSE 59680
// exit ;
59678: GO 59763
// p := 0 ;
59680: LD_ADDR_VAR 0 3
59684: PUSH
59685: LD_INT 0
59687: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59688: LD_INT 35
59690: PPUSH
59691: CALL_OW 67
// p := p + 1 ;
59695: LD_ADDR_VAR 0 3
59699: PUSH
59700: LD_VAR 0 3
59704: PUSH
59705: LD_INT 1
59707: PLUS
59708: ST_TO_ADDR
// for i in tmp do
59709: LD_ADDR_VAR 0 1
59713: PUSH
59714: LD_VAR 0 2
59718: PUSH
59719: FOR_IN
59720: IFFALSE 59751
// if GetLives ( i ) < 1000 then
59722: LD_VAR 0 1
59726: PPUSH
59727: CALL_OW 256
59731: PUSH
59732: LD_INT 1000
59734: LESS
59735: IFFALSE 59749
// SetLives ( i , 1000 ) ;
59737: LD_VAR 0 1
59741: PPUSH
59742: LD_INT 1000
59744: PPUSH
59745: CALL_OW 234
59749: GO 59719
59751: POP
59752: POP
// until p > 20 ;
59753: LD_VAR 0 3
59757: PUSH
59758: LD_INT 20
59760: GREATER
59761: IFFALSE 59688
// end ;
59763: PPOPN 3
59765: END
// every 0 0$1 trigger StreamModeActive and sTime do
59766: LD_EXP 30
59770: PUSH
59771: LD_EXP 81
59775: AND
59776: IFFALSE 59811
59778: GO 59780
59780: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59781: LD_INT 28
59783: PPUSH
59784: LD_OWVAR 2
59788: PPUSH
59789: LD_INT 2
59791: PPUSH
59792: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59796: LD_INT 30
59798: PPUSH
59799: LD_OWVAR 2
59803: PPUSH
59804: LD_INT 2
59806: PPUSH
59807: CALL_OW 322
// end ;
59811: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59812: LD_EXP 30
59816: PUSH
59817: LD_EXP 82
59821: AND
59822: IFFALSE 59943
59824: GO 59826
59826: DISABLE
59827: LD_INT 0
59829: PPUSH
59830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59831: LD_ADDR_VAR 0 2
59835: PUSH
59836: LD_INT 22
59838: PUSH
59839: LD_OWVAR 2
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 21
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: PUSH
59861: LD_INT 23
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: PPUSH
59880: CALL_OW 69
59884: ST_TO_ADDR
// if not tmp then
59885: LD_VAR 0 2
59889: NOT
59890: IFFALSE 59894
// exit ;
59892: GO 59943
// for i in tmp do
59894: LD_ADDR_VAR 0 1
59898: PUSH
59899: LD_VAR 0 2
59903: PUSH
59904: FOR_IN
59905: IFFALSE 59941
// begin if Crawls ( i ) then
59907: LD_VAR 0 1
59911: PPUSH
59912: CALL_OW 318
59916: IFFALSE 59927
// ComWalk ( i ) ;
59918: LD_VAR 0 1
59922: PPUSH
59923: CALL_OW 138
// SetClass ( i , 2 ) ;
59927: LD_VAR 0 1
59931: PPUSH
59932: LD_INT 2
59934: PPUSH
59935: CALL_OW 336
// end ;
59939: GO 59904
59941: POP
59942: POP
// end ;
59943: PPOPN 2
59945: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59946: LD_EXP 30
59950: PUSH
59951: LD_EXP 83
59955: AND
59956: IFFALSE 60244
59958: GO 59960
59960: DISABLE
59961: LD_INT 0
59963: PPUSH
59964: PPUSH
59965: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59966: LD_OWVAR 2
59970: PPUSH
59971: LD_INT 9
59973: PPUSH
59974: LD_INT 1
59976: PPUSH
59977: LD_INT 1
59979: PPUSH
59980: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59984: LD_INT 9
59986: PPUSH
59987: LD_OWVAR 2
59991: PPUSH
59992: CALL_OW 343
// uc_side := 9 ;
59996: LD_ADDR_OWVAR 20
60000: PUSH
60001: LD_INT 9
60003: ST_TO_ADDR
// uc_nation := 2 ;
60004: LD_ADDR_OWVAR 21
60008: PUSH
60009: LD_INT 2
60011: ST_TO_ADDR
// hc_name := Dark Warrior ;
60012: LD_ADDR_OWVAR 26
60016: PUSH
60017: LD_STRING Dark Warrior
60019: ST_TO_ADDR
// hc_gallery :=  ;
60020: LD_ADDR_OWVAR 33
60024: PUSH
60025: LD_STRING 
60027: ST_TO_ADDR
// hc_noskilllimit := true ;
60028: LD_ADDR_OWVAR 76
60032: PUSH
60033: LD_INT 1
60035: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60036: LD_ADDR_OWVAR 31
60040: PUSH
60041: LD_INT 30
60043: PUSH
60044: LD_INT 30
60046: PUSH
60047: LD_INT 30
60049: PUSH
60050: LD_INT 30
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: ST_TO_ADDR
// un := CreateHuman ;
60059: LD_ADDR_VAR 0 3
60063: PUSH
60064: CALL_OW 44
60068: ST_TO_ADDR
// hc_noskilllimit := false ;
60069: LD_ADDR_OWVAR 76
60073: PUSH
60074: LD_INT 0
60076: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60077: LD_VAR 0 3
60081: PPUSH
60082: LD_INT 1
60084: PPUSH
60085: CALL_OW 51
// ToLua ( playRanger() ) ;
60089: LD_STRING playRanger()
60091: PPUSH
60092: CALL_OW 559
// p := 0 ;
60096: LD_ADDR_VAR 0 2
60100: PUSH
60101: LD_INT 0
60103: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60104: LD_INT 35
60106: PPUSH
60107: CALL_OW 67
// p := p + 1 ;
60111: LD_ADDR_VAR 0 2
60115: PUSH
60116: LD_VAR 0 2
60120: PUSH
60121: LD_INT 1
60123: PLUS
60124: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60125: LD_VAR 0 3
60129: PPUSH
60130: CALL_OW 256
60134: PUSH
60135: LD_INT 1000
60137: LESS
60138: IFFALSE 60152
// SetLives ( un , 1000 ) ;
60140: LD_VAR 0 3
60144: PPUSH
60145: LD_INT 1000
60147: PPUSH
60148: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60152: LD_VAR 0 3
60156: PPUSH
60157: LD_INT 81
60159: PUSH
60160: LD_OWVAR 2
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 91
60171: PUSH
60172: LD_VAR 0 3
60176: PUSH
60177: LD_INT 30
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PPUSH
60189: CALL_OW 69
60193: PPUSH
60194: LD_VAR 0 3
60198: PPUSH
60199: CALL_OW 74
60203: PPUSH
60204: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60208: LD_VAR 0 2
60212: PUSH
60213: LD_INT 80
60215: GREATER
60216: PUSH
60217: LD_VAR 0 3
60221: PPUSH
60222: CALL_OW 301
60226: OR
60227: IFFALSE 60104
// if un then
60229: LD_VAR 0 3
60233: IFFALSE 60244
// RemoveUnit ( un ) ;
60235: LD_VAR 0 3
60239: PPUSH
60240: CALL_OW 64
// end ;
60244: PPOPN 3
60246: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60247: LD_EXP 84
60251: IFFALSE 60367
60253: GO 60255
60255: DISABLE
60256: LD_INT 0
60258: PPUSH
60259: PPUSH
60260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60261: LD_ADDR_VAR 0 2
60265: PUSH
60266: LD_INT 81
60268: PUSH
60269: LD_OWVAR 2
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 21
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PPUSH
60292: CALL_OW 69
60296: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60297: LD_STRING playComputer()
60299: PPUSH
60300: CALL_OW 559
// if not tmp then
60304: LD_VAR 0 2
60308: NOT
60309: IFFALSE 60313
// exit ;
60311: GO 60367
// for i in tmp do
60313: LD_ADDR_VAR 0 1
60317: PUSH
60318: LD_VAR 0 2
60322: PUSH
60323: FOR_IN
60324: IFFALSE 60365
// for j := 1 to 4 do
60326: LD_ADDR_VAR 0 3
60330: PUSH
60331: DOUBLE
60332: LD_INT 1
60334: DEC
60335: ST_TO_ADDR
60336: LD_INT 4
60338: PUSH
60339: FOR_TO
60340: IFFALSE 60361
// SetSkill ( i , j , 10 ) ;
60342: LD_VAR 0 1
60346: PPUSH
60347: LD_VAR 0 3
60351: PPUSH
60352: LD_INT 10
60354: PPUSH
60355: CALL_OW 237
60359: GO 60339
60361: POP
60362: POP
60363: GO 60323
60365: POP
60366: POP
// end ;
60367: PPOPN 3
60369: END
// every 0 0$1 trigger s30 do var i , tmp ;
60370: LD_EXP 85
60374: IFFALSE 60443
60376: GO 60378
60378: DISABLE
60379: LD_INT 0
60381: PPUSH
60382: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60383: LD_ADDR_VAR 0 2
60387: PUSH
60388: LD_INT 22
60390: PUSH
60391: LD_OWVAR 2
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PPUSH
60400: CALL_OW 69
60404: ST_TO_ADDR
// if not tmp then
60405: LD_VAR 0 2
60409: NOT
60410: IFFALSE 60414
// exit ;
60412: GO 60443
// for i in tmp do
60414: LD_ADDR_VAR 0 1
60418: PUSH
60419: LD_VAR 0 2
60423: PUSH
60424: FOR_IN
60425: IFFALSE 60441
// SetLives ( i , 300 ) ;
60427: LD_VAR 0 1
60431: PPUSH
60432: LD_INT 300
60434: PPUSH
60435: CALL_OW 234
60439: GO 60424
60441: POP
60442: POP
// end ;
60443: PPOPN 2
60445: END
// every 0 0$1 trigger s60 do var i , tmp ;
60446: LD_EXP 86
60450: IFFALSE 60519
60452: GO 60454
60454: DISABLE
60455: LD_INT 0
60457: PPUSH
60458: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60459: LD_ADDR_VAR 0 2
60463: PUSH
60464: LD_INT 22
60466: PUSH
60467: LD_OWVAR 2
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PPUSH
60476: CALL_OW 69
60480: ST_TO_ADDR
// if not tmp then
60481: LD_VAR 0 2
60485: NOT
60486: IFFALSE 60490
// exit ;
60488: GO 60519
// for i in tmp do
60490: LD_ADDR_VAR 0 1
60494: PUSH
60495: LD_VAR 0 2
60499: PUSH
60500: FOR_IN
60501: IFFALSE 60517
// SetLives ( i , 600 ) ;
60503: LD_VAR 0 1
60507: PPUSH
60508: LD_INT 600
60510: PPUSH
60511: CALL_OW 234
60515: GO 60500
60517: POP
60518: POP
// end ;
60519: PPOPN 2
60521: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60522: LD_INT 0
60524: PPUSH
// case cmd of 301 :
60525: LD_VAR 0 1
60529: PUSH
60530: LD_INT 301
60532: DOUBLE
60533: EQUAL
60534: IFTRUE 60538
60536: GO 60570
60538: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60539: LD_VAR 0 6
60543: PPUSH
60544: LD_VAR 0 7
60548: PPUSH
60549: LD_VAR 0 8
60553: PPUSH
60554: LD_VAR 0 4
60558: PPUSH
60559: LD_VAR 0 5
60563: PPUSH
60564: CALL 61779 0 5
60568: GO 60691
60570: LD_INT 302
60572: DOUBLE
60573: EQUAL
60574: IFTRUE 60578
60576: GO 60615
60578: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60579: LD_VAR 0 6
60583: PPUSH
60584: LD_VAR 0 7
60588: PPUSH
60589: LD_VAR 0 8
60593: PPUSH
60594: LD_VAR 0 9
60598: PPUSH
60599: LD_VAR 0 4
60603: PPUSH
60604: LD_VAR 0 5
60608: PPUSH
60609: CALL 61870 0 6
60613: GO 60691
60615: LD_INT 303
60617: DOUBLE
60618: EQUAL
60619: IFTRUE 60623
60621: GO 60660
60623: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60624: LD_VAR 0 6
60628: PPUSH
60629: LD_VAR 0 7
60633: PPUSH
60634: LD_VAR 0 8
60638: PPUSH
60639: LD_VAR 0 9
60643: PPUSH
60644: LD_VAR 0 4
60648: PPUSH
60649: LD_VAR 0 5
60653: PPUSH
60654: CALL 60696 0 6
60658: GO 60691
60660: LD_INT 304
60662: DOUBLE
60663: EQUAL
60664: IFTRUE 60668
60666: GO 60690
60668: POP
// hHackTeleport ( unit , x , y ) ; end ;
60669: LD_VAR 0 2
60673: PPUSH
60674: LD_VAR 0 4
60678: PPUSH
60679: LD_VAR 0 5
60683: PPUSH
60684: CALL 62463 0 3
60688: GO 60691
60690: POP
// end ;
60691: LD_VAR 0 12
60695: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60696: LD_INT 0
60698: PPUSH
60699: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60700: LD_VAR 0 1
60704: PUSH
60705: LD_INT 1
60707: LESS
60708: PUSH
60709: LD_VAR 0 1
60713: PUSH
60714: LD_INT 3
60716: GREATER
60717: OR
60718: PUSH
60719: LD_VAR 0 5
60723: PPUSH
60724: LD_VAR 0 6
60728: PPUSH
60729: CALL_OW 428
60733: OR
60734: IFFALSE 60738
// exit ;
60736: GO 61466
// uc_side := your_side ;
60738: LD_ADDR_OWVAR 20
60742: PUSH
60743: LD_OWVAR 2
60747: ST_TO_ADDR
// uc_nation := nation ;
60748: LD_ADDR_OWVAR 21
60752: PUSH
60753: LD_VAR 0 1
60757: ST_TO_ADDR
// bc_level = 1 ;
60758: LD_ADDR_OWVAR 43
60762: PUSH
60763: LD_INT 1
60765: ST_TO_ADDR
// case btype of 1 :
60766: LD_VAR 0 2
60770: PUSH
60771: LD_INT 1
60773: DOUBLE
60774: EQUAL
60775: IFTRUE 60779
60777: GO 60790
60779: POP
// bc_type := b_depot ; 2 :
60780: LD_ADDR_OWVAR 42
60784: PUSH
60785: LD_INT 0
60787: ST_TO_ADDR
60788: GO 61410
60790: LD_INT 2
60792: DOUBLE
60793: EQUAL
60794: IFTRUE 60798
60796: GO 60809
60798: POP
// bc_type := b_warehouse ; 3 :
60799: LD_ADDR_OWVAR 42
60803: PUSH
60804: LD_INT 1
60806: ST_TO_ADDR
60807: GO 61410
60809: LD_INT 3
60811: DOUBLE
60812: EQUAL
60813: IFTRUE 60817
60815: GO 60828
60817: POP
// bc_type := b_lab ; 4 .. 9 :
60818: LD_ADDR_OWVAR 42
60822: PUSH
60823: LD_INT 6
60825: ST_TO_ADDR
60826: GO 61410
60828: LD_INT 4
60830: DOUBLE
60831: GREATEREQUAL
60832: IFFALSE 60840
60834: LD_INT 9
60836: DOUBLE
60837: LESSEQUAL
60838: IFTRUE 60842
60840: GO 60902
60842: POP
// begin bc_type := b_lab_half ;
60843: LD_ADDR_OWVAR 42
60847: PUSH
60848: LD_INT 7
60850: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60851: LD_ADDR_OWVAR 44
60855: PUSH
60856: LD_INT 10
60858: PUSH
60859: LD_INT 11
60861: PUSH
60862: LD_INT 12
60864: PUSH
60865: LD_INT 15
60867: PUSH
60868: LD_INT 14
60870: PUSH
60871: LD_INT 13
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: PUSH
60882: LD_VAR 0 2
60886: PUSH
60887: LD_INT 3
60889: MINUS
60890: ARRAY
60891: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60892: LD_ADDR_OWVAR 45
60896: PUSH
60897: LD_INT 9
60899: ST_TO_ADDR
// end ; 10 .. 13 :
60900: GO 61410
60902: LD_INT 10
60904: DOUBLE
60905: GREATEREQUAL
60906: IFFALSE 60914
60908: LD_INT 13
60910: DOUBLE
60911: LESSEQUAL
60912: IFTRUE 60916
60914: GO 60993
60916: POP
// begin bc_type := b_lab_full ;
60917: LD_ADDR_OWVAR 42
60921: PUSH
60922: LD_INT 8
60924: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60925: LD_ADDR_OWVAR 44
60929: PUSH
60930: LD_INT 10
60932: PUSH
60933: LD_INT 12
60935: PUSH
60936: LD_INT 14
60938: PUSH
60939: LD_INT 13
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: PUSH
60948: LD_VAR 0 2
60952: PUSH
60953: LD_INT 9
60955: MINUS
60956: ARRAY
60957: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60958: LD_ADDR_OWVAR 45
60962: PUSH
60963: LD_INT 11
60965: PUSH
60966: LD_INT 15
60968: PUSH
60969: LD_INT 12
60971: PUSH
60972: LD_INT 15
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: PUSH
60981: LD_VAR 0 2
60985: PUSH
60986: LD_INT 9
60988: MINUS
60989: ARRAY
60990: ST_TO_ADDR
// end ; 14 :
60991: GO 61410
60993: LD_INT 14
60995: DOUBLE
60996: EQUAL
60997: IFTRUE 61001
60999: GO 61012
61001: POP
// bc_type := b_workshop ; 15 :
61002: LD_ADDR_OWVAR 42
61006: PUSH
61007: LD_INT 2
61009: ST_TO_ADDR
61010: GO 61410
61012: LD_INT 15
61014: DOUBLE
61015: EQUAL
61016: IFTRUE 61020
61018: GO 61031
61020: POP
// bc_type := b_factory ; 16 :
61021: LD_ADDR_OWVAR 42
61025: PUSH
61026: LD_INT 3
61028: ST_TO_ADDR
61029: GO 61410
61031: LD_INT 16
61033: DOUBLE
61034: EQUAL
61035: IFTRUE 61039
61037: GO 61050
61039: POP
// bc_type := b_ext_gun ; 17 :
61040: LD_ADDR_OWVAR 42
61044: PUSH
61045: LD_INT 17
61047: ST_TO_ADDR
61048: GO 61410
61050: LD_INT 17
61052: DOUBLE
61053: EQUAL
61054: IFTRUE 61058
61056: GO 61086
61058: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61059: LD_ADDR_OWVAR 42
61063: PUSH
61064: LD_INT 19
61066: PUSH
61067: LD_INT 23
61069: PUSH
61070: LD_INT 19
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: LIST
61077: PUSH
61078: LD_VAR 0 1
61082: ARRAY
61083: ST_TO_ADDR
61084: GO 61410
61086: LD_INT 18
61088: DOUBLE
61089: EQUAL
61090: IFTRUE 61094
61092: GO 61105
61094: POP
// bc_type := b_ext_radar ; 19 :
61095: LD_ADDR_OWVAR 42
61099: PUSH
61100: LD_INT 20
61102: ST_TO_ADDR
61103: GO 61410
61105: LD_INT 19
61107: DOUBLE
61108: EQUAL
61109: IFTRUE 61113
61111: GO 61124
61113: POP
// bc_type := b_ext_radio ; 20 :
61114: LD_ADDR_OWVAR 42
61118: PUSH
61119: LD_INT 22
61121: ST_TO_ADDR
61122: GO 61410
61124: LD_INT 20
61126: DOUBLE
61127: EQUAL
61128: IFTRUE 61132
61130: GO 61143
61132: POP
// bc_type := b_ext_siberium ; 21 :
61133: LD_ADDR_OWVAR 42
61137: PUSH
61138: LD_INT 21
61140: ST_TO_ADDR
61141: GO 61410
61143: LD_INT 21
61145: DOUBLE
61146: EQUAL
61147: IFTRUE 61151
61149: GO 61162
61151: POP
// bc_type := b_ext_computer ; 22 :
61152: LD_ADDR_OWVAR 42
61156: PUSH
61157: LD_INT 24
61159: ST_TO_ADDR
61160: GO 61410
61162: LD_INT 22
61164: DOUBLE
61165: EQUAL
61166: IFTRUE 61170
61168: GO 61181
61170: POP
// bc_type := b_ext_track ; 23 :
61171: LD_ADDR_OWVAR 42
61175: PUSH
61176: LD_INT 16
61178: ST_TO_ADDR
61179: GO 61410
61181: LD_INT 23
61183: DOUBLE
61184: EQUAL
61185: IFTRUE 61189
61187: GO 61200
61189: POP
// bc_type := b_ext_laser ; 24 :
61190: LD_ADDR_OWVAR 42
61194: PUSH
61195: LD_INT 25
61197: ST_TO_ADDR
61198: GO 61410
61200: LD_INT 24
61202: DOUBLE
61203: EQUAL
61204: IFTRUE 61208
61206: GO 61219
61208: POP
// bc_type := b_control_tower ; 25 :
61209: LD_ADDR_OWVAR 42
61213: PUSH
61214: LD_INT 36
61216: ST_TO_ADDR
61217: GO 61410
61219: LD_INT 25
61221: DOUBLE
61222: EQUAL
61223: IFTRUE 61227
61225: GO 61238
61227: POP
// bc_type := b_breastwork ; 26 :
61228: LD_ADDR_OWVAR 42
61232: PUSH
61233: LD_INT 31
61235: ST_TO_ADDR
61236: GO 61410
61238: LD_INT 26
61240: DOUBLE
61241: EQUAL
61242: IFTRUE 61246
61244: GO 61257
61246: POP
// bc_type := b_bunker ; 27 :
61247: LD_ADDR_OWVAR 42
61251: PUSH
61252: LD_INT 32
61254: ST_TO_ADDR
61255: GO 61410
61257: LD_INT 27
61259: DOUBLE
61260: EQUAL
61261: IFTRUE 61265
61263: GO 61276
61265: POP
// bc_type := b_turret ; 28 :
61266: LD_ADDR_OWVAR 42
61270: PUSH
61271: LD_INT 33
61273: ST_TO_ADDR
61274: GO 61410
61276: LD_INT 28
61278: DOUBLE
61279: EQUAL
61280: IFTRUE 61284
61282: GO 61295
61284: POP
// bc_type := b_armoury ; 29 :
61285: LD_ADDR_OWVAR 42
61289: PUSH
61290: LD_INT 4
61292: ST_TO_ADDR
61293: GO 61410
61295: LD_INT 29
61297: DOUBLE
61298: EQUAL
61299: IFTRUE 61303
61301: GO 61314
61303: POP
// bc_type := b_barracks ; 30 :
61304: LD_ADDR_OWVAR 42
61308: PUSH
61309: LD_INT 5
61311: ST_TO_ADDR
61312: GO 61410
61314: LD_INT 30
61316: DOUBLE
61317: EQUAL
61318: IFTRUE 61322
61320: GO 61333
61322: POP
// bc_type := b_solar_power ; 31 :
61323: LD_ADDR_OWVAR 42
61327: PUSH
61328: LD_INT 27
61330: ST_TO_ADDR
61331: GO 61410
61333: LD_INT 31
61335: DOUBLE
61336: EQUAL
61337: IFTRUE 61341
61339: GO 61352
61341: POP
// bc_type := b_oil_power ; 32 :
61342: LD_ADDR_OWVAR 42
61346: PUSH
61347: LD_INT 26
61349: ST_TO_ADDR
61350: GO 61410
61352: LD_INT 32
61354: DOUBLE
61355: EQUAL
61356: IFTRUE 61360
61358: GO 61371
61360: POP
// bc_type := b_siberite_power ; 33 :
61361: LD_ADDR_OWVAR 42
61365: PUSH
61366: LD_INT 28
61368: ST_TO_ADDR
61369: GO 61410
61371: LD_INT 33
61373: DOUBLE
61374: EQUAL
61375: IFTRUE 61379
61377: GO 61390
61379: POP
// bc_type := b_oil_mine ; 34 :
61380: LD_ADDR_OWVAR 42
61384: PUSH
61385: LD_INT 29
61387: ST_TO_ADDR
61388: GO 61410
61390: LD_INT 34
61392: DOUBLE
61393: EQUAL
61394: IFTRUE 61398
61396: GO 61409
61398: POP
// bc_type := b_siberite_mine ; end ;
61399: LD_ADDR_OWVAR 42
61403: PUSH
61404: LD_INT 30
61406: ST_TO_ADDR
61407: GO 61410
61409: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61410: LD_ADDR_VAR 0 8
61414: PUSH
61415: LD_VAR 0 5
61419: PPUSH
61420: LD_VAR 0 6
61424: PPUSH
61425: LD_VAR 0 3
61429: PPUSH
61430: CALL_OW 47
61434: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61435: LD_OWVAR 42
61439: PUSH
61440: LD_INT 32
61442: PUSH
61443: LD_INT 33
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: IN
61450: IFFALSE 61466
// PlaceWeaponTurret ( b , weapon ) ;
61452: LD_VAR 0 8
61456: PPUSH
61457: LD_VAR 0 4
61461: PPUSH
61462: CALL_OW 431
// end ;
61466: LD_VAR 0 7
61470: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61471: LD_INT 0
61473: PPUSH
61474: PPUSH
61475: PPUSH
61476: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61477: LD_ADDR_VAR 0 4
61481: PUSH
61482: LD_INT 22
61484: PUSH
61485: LD_OWVAR 2
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: PUSH
61497: LD_INT 30
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 30
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PPUSH
61526: CALL_OW 69
61530: ST_TO_ADDR
// if not tmp then
61531: LD_VAR 0 4
61535: NOT
61536: IFFALSE 61540
// exit ;
61538: GO 61599
// for i in tmp do
61540: LD_ADDR_VAR 0 2
61544: PUSH
61545: LD_VAR 0 4
61549: PUSH
61550: FOR_IN
61551: IFFALSE 61597
// for j = 1 to 3 do
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: DOUBLE
61559: LD_INT 1
61561: DEC
61562: ST_TO_ADDR
61563: LD_INT 3
61565: PUSH
61566: FOR_TO
61567: IFFALSE 61593
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61569: LD_VAR 0 2
61573: PPUSH
61574: CALL_OW 274
61578: PPUSH
61579: LD_VAR 0 3
61583: PPUSH
61584: LD_INT 99999
61586: PPUSH
61587: CALL_OW 277
61591: GO 61566
61593: POP
61594: POP
61595: GO 61550
61597: POP
61598: POP
// end ;
61599: LD_VAR 0 1
61603: RET
// export function hHackSetLevel10 ; var i , j ; begin
61604: LD_INT 0
61606: PPUSH
61607: PPUSH
61608: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61609: LD_ADDR_VAR 0 2
61613: PUSH
61614: LD_INT 21
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PPUSH
61624: CALL_OW 69
61628: PUSH
61629: FOR_IN
61630: IFFALSE 61682
// if IsSelected ( i ) then
61632: LD_VAR 0 2
61636: PPUSH
61637: CALL_OW 306
61641: IFFALSE 61680
// begin for j := 1 to 4 do
61643: LD_ADDR_VAR 0 3
61647: PUSH
61648: DOUBLE
61649: LD_INT 1
61651: DEC
61652: ST_TO_ADDR
61653: LD_INT 4
61655: PUSH
61656: FOR_TO
61657: IFFALSE 61678
// SetSkill ( i , j , 10 ) ;
61659: LD_VAR 0 2
61663: PPUSH
61664: LD_VAR 0 3
61668: PPUSH
61669: LD_INT 10
61671: PPUSH
61672: CALL_OW 237
61676: GO 61656
61678: POP
61679: POP
// end ;
61680: GO 61629
61682: POP
61683: POP
// end ;
61684: LD_VAR 0 1
61688: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61689: LD_INT 0
61691: PPUSH
61692: PPUSH
61693: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61694: LD_ADDR_VAR 0 2
61698: PUSH
61699: LD_INT 22
61701: PUSH
61702: LD_OWVAR 2
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 21
61713: PUSH
61714: LD_INT 1
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PPUSH
61725: CALL_OW 69
61729: PUSH
61730: FOR_IN
61731: IFFALSE 61772
// begin for j := 1 to 4 do
61733: LD_ADDR_VAR 0 3
61737: PUSH
61738: DOUBLE
61739: LD_INT 1
61741: DEC
61742: ST_TO_ADDR
61743: LD_INT 4
61745: PUSH
61746: FOR_TO
61747: IFFALSE 61768
// SetSkill ( i , j , 10 ) ;
61749: LD_VAR 0 2
61753: PPUSH
61754: LD_VAR 0 3
61758: PPUSH
61759: LD_INT 10
61761: PPUSH
61762: CALL_OW 237
61766: GO 61746
61768: POP
61769: POP
// end ;
61770: GO 61730
61772: POP
61773: POP
// end ;
61774: LD_VAR 0 1
61778: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61779: LD_INT 0
61781: PPUSH
// uc_side := your_side ;
61782: LD_ADDR_OWVAR 20
61786: PUSH
61787: LD_OWVAR 2
61791: ST_TO_ADDR
// uc_nation := nation ;
61792: LD_ADDR_OWVAR 21
61796: PUSH
61797: LD_VAR 0 1
61801: ST_TO_ADDR
// InitHc ;
61802: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61806: LD_INT 0
61808: PPUSH
61809: LD_VAR 0 2
61813: PPUSH
61814: LD_VAR 0 3
61818: PPUSH
61819: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61823: LD_VAR 0 4
61827: PPUSH
61828: LD_VAR 0 5
61832: PPUSH
61833: CALL_OW 428
61837: PUSH
61838: LD_INT 0
61840: EQUAL
61841: IFFALSE 61865
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61843: CALL_OW 44
61847: PPUSH
61848: LD_VAR 0 4
61852: PPUSH
61853: LD_VAR 0 5
61857: PPUSH
61858: LD_INT 1
61860: PPUSH
61861: CALL_OW 48
// end ;
61865: LD_VAR 0 6
61869: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61870: LD_INT 0
61872: PPUSH
61873: PPUSH
// uc_side := your_side ;
61874: LD_ADDR_OWVAR 20
61878: PUSH
61879: LD_OWVAR 2
61883: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61884: LD_VAR 0 1
61888: PUSH
61889: LD_INT 1
61891: PUSH
61892: LD_INT 2
61894: PUSH
61895: LD_INT 3
61897: PUSH
61898: LD_INT 4
61900: PUSH
61901: LD_INT 5
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: IN
61911: IFFALSE 61923
// uc_nation := nation_american else
61913: LD_ADDR_OWVAR 21
61917: PUSH
61918: LD_INT 1
61920: ST_TO_ADDR
61921: GO 61966
// if chassis in [ 11 , 12 , 13 , 14 ] then
61923: LD_VAR 0 1
61927: PUSH
61928: LD_INT 11
61930: PUSH
61931: LD_INT 12
61933: PUSH
61934: LD_INT 13
61936: PUSH
61937: LD_INT 14
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: IN
61946: IFFALSE 61958
// uc_nation := nation_arabian else
61948: LD_ADDR_OWVAR 21
61952: PUSH
61953: LD_INT 2
61955: ST_TO_ADDR
61956: GO 61966
// uc_nation := nation_russian ;
61958: LD_ADDR_OWVAR 21
61962: PUSH
61963: LD_INT 3
61965: ST_TO_ADDR
// vc_chassis := chassis ;
61966: LD_ADDR_OWVAR 37
61970: PUSH
61971: LD_VAR 0 1
61975: ST_TO_ADDR
// vc_engine := engine ;
61976: LD_ADDR_OWVAR 39
61980: PUSH
61981: LD_VAR 0 2
61985: ST_TO_ADDR
// vc_control := control ;
61986: LD_ADDR_OWVAR 38
61990: PUSH
61991: LD_VAR 0 3
61995: ST_TO_ADDR
// vc_weapon := weapon ;
61996: LD_ADDR_OWVAR 40
62000: PUSH
62001: LD_VAR 0 4
62005: ST_TO_ADDR
// un := CreateVehicle ;
62006: LD_ADDR_VAR 0 8
62010: PUSH
62011: CALL_OW 45
62015: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62016: LD_VAR 0 8
62020: PPUSH
62021: LD_INT 0
62023: PPUSH
62024: LD_INT 5
62026: PPUSH
62027: CALL_OW 12
62031: PPUSH
62032: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62036: LD_VAR 0 8
62040: PPUSH
62041: LD_VAR 0 5
62045: PPUSH
62046: LD_VAR 0 6
62050: PPUSH
62051: LD_INT 1
62053: PPUSH
62054: CALL_OW 48
// end ;
62058: LD_VAR 0 7
62062: RET
// export hInvincible ; every 1 do
62063: GO 62065
62065: DISABLE
// hInvincible := [ ] ;
62066: LD_ADDR_EXP 87
62070: PUSH
62071: EMPTY
62072: ST_TO_ADDR
62073: END
// every 10 do var i ;
62074: GO 62076
62076: DISABLE
62077: LD_INT 0
62079: PPUSH
// begin enable ;
62080: ENABLE
// if not hInvincible then
62081: LD_EXP 87
62085: NOT
62086: IFFALSE 62090
// exit ;
62088: GO 62134
// for i in hInvincible do
62090: LD_ADDR_VAR 0 1
62094: PUSH
62095: LD_EXP 87
62099: PUSH
62100: FOR_IN
62101: IFFALSE 62132
// if GetLives ( i ) < 1000 then
62103: LD_VAR 0 1
62107: PPUSH
62108: CALL_OW 256
62112: PUSH
62113: LD_INT 1000
62115: LESS
62116: IFFALSE 62130
// SetLives ( i , 1000 ) ;
62118: LD_VAR 0 1
62122: PPUSH
62123: LD_INT 1000
62125: PPUSH
62126: CALL_OW 234
62130: GO 62100
62132: POP
62133: POP
// end ;
62134: PPOPN 1
62136: END
// export function hHackInvincible ; var i ; begin
62137: LD_INT 0
62139: PPUSH
62140: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62141: LD_ADDR_VAR 0 2
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: LD_INT 21
62151: PUSH
62152: LD_INT 1
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 21
62161: PUSH
62162: LD_INT 2
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: PPUSH
62174: CALL_OW 69
62178: PUSH
62179: FOR_IN
62180: IFFALSE 62241
// if IsSelected ( i ) then
62182: LD_VAR 0 2
62186: PPUSH
62187: CALL_OW 306
62191: IFFALSE 62239
// begin if i in hInvincible then
62193: LD_VAR 0 2
62197: PUSH
62198: LD_EXP 87
62202: IN
62203: IFFALSE 62223
// hInvincible := hInvincible diff i else
62205: LD_ADDR_EXP 87
62209: PUSH
62210: LD_EXP 87
62214: PUSH
62215: LD_VAR 0 2
62219: DIFF
62220: ST_TO_ADDR
62221: GO 62239
// hInvincible := hInvincible union i ;
62223: LD_ADDR_EXP 87
62227: PUSH
62228: LD_EXP 87
62232: PUSH
62233: LD_VAR 0 2
62237: UNION
62238: ST_TO_ADDR
// end ;
62239: GO 62179
62241: POP
62242: POP
// end ;
62243: LD_VAR 0 1
62247: RET
// export function hHackInvisible ; var i , j ; begin
62248: LD_INT 0
62250: PPUSH
62251: PPUSH
62252: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62253: LD_ADDR_VAR 0 2
62257: PUSH
62258: LD_INT 21
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PPUSH
62268: CALL_OW 69
62272: PUSH
62273: FOR_IN
62274: IFFALSE 62298
// if IsSelected ( i ) then
62276: LD_VAR 0 2
62280: PPUSH
62281: CALL_OW 306
62285: IFFALSE 62296
// ComForceInvisible ( i ) ;
62287: LD_VAR 0 2
62291: PPUSH
62292: CALL_OW 496
62296: GO 62273
62298: POP
62299: POP
// end ;
62300: LD_VAR 0 1
62304: RET
// export function hHackChangeYourSide ; begin
62305: LD_INT 0
62307: PPUSH
// if your_side = 8 then
62308: LD_OWVAR 2
62312: PUSH
62313: LD_INT 8
62315: EQUAL
62316: IFFALSE 62328
// your_side := 0 else
62318: LD_ADDR_OWVAR 2
62322: PUSH
62323: LD_INT 0
62325: ST_TO_ADDR
62326: GO 62342
// your_side := your_side + 1 ;
62328: LD_ADDR_OWVAR 2
62332: PUSH
62333: LD_OWVAR 2
62337: PUSH
62338: LD_INT 1
62340: PLUS
62341: ST_TO_ADDR
// end ;
62342: LD_VAR 0 1
62346: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62347: LD_INT 0
62349: PPUSH
62350: PPUSH
62351: PPUSH
// for i in all_units do
62352: LD_ADDR_VAR 0 2
62356: PUSH
62357: LD_OWVAR 3
62361: PUSH
62362: FOR_IN
62363: IFFALSE 62441
// if IsSelected ( i ) then
62365: LD_VAR 0 2
62369: PPUSH
62370: CALL_OW 306
62374: IFFALSE 62439
// begin j := GetSide ( i ) ;
62376: LD_ADDR_VAR 0 3
62380: PUSH
62381: LD_VAR 0 2
62385: PPUSH
62386: CALL_OW 255
62390: ST_TO_ADDR
// if j = 8 then
62391: LD_VAR 0 3
62395: PUSH
62396: LD_INT 8
62398: EQUAL
62399: IFFALSE 62411
// j := 0 else
62401: LD_ADDR_VAR 0 3
62405: PUSH
62406: LD_INT 0
62408: ST_TO_ADDR
62409: GO 62425
// j := j + 1 ;
62411: LD_ADDR_VAR 0 3
62415: PUSH
62416: LD_VAR 0 3
62420: PUSH
62421: LD_INT 1
62423: PLUS
62424: ST_TO_ADDR
// SetSide ( i , j ) ;
62425: LD_VAR 0 2
62429: PPUSH
62430: LD_VAR 0 3
62434: PPUSH
62435: CALL_OW 235
// end ;
62439: GO 62362
62441: POP
62442: POP
// end ;
62443: LD_VAR 0 1
62447: RET
// export function hHackFog ; begin
62448: LD_INT 0
62450: PPUSH
// FogOff ( true ) ;
62451: LD_INT 1
62453: PPUSH
62454: CALL_OW 344
// end ;
62458: LD_VAR 0 1
62462: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62463: LD_INT 0
62465: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62466: LD_VAR 0 1
62470: PPUSH
62471: LD_VAR 0 2
62475: PPUSH
62476: LD_VAR 0 3
62480: PPUSH
62481: LD_INT 1
62483: PPUSH
62484: LD_INT 1
62486: PPUSH
62487: CALL_OW 483
// CenterOnXY ( x , y ) ;
62491: LD_VAR 0 2
62495: PPUSH
62496: LD_VAR 0 3
62500: PPUSH
62501: CALL_OW 84
// end ;
62505: LD_VAR 0 4
62509: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62510: LD_INT 0
62512: PPUSH
62513: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62514: LD_VAR 0 1
62518: NOT
62519: PUSH
62520: LD_VAR 0 2
62524: PPUSH
62525: LD_VAR 0 3
62529: PPUSH
62530: CALL_OW 488
62534: NOT
62535: OR
62536: PUSH
62537: LD_VAR 0 1
62541: PPUSH
62542: CALL_OW 266
62546: PUSH
62547: LD_INT 3
62549: NONEQUAL
62550: PUSH
62551: LD_VAR 0 1
62555: PPUSH
62556: CALL_OW 247
62560: PUSH
62561: LD_INT 1
62563: EQUAL
62564: NOT
62565: AND
62566: OR
62567: IFFALSE 62571
// exit ;
62569: GO 62720
// if GetType ( factory ) = unit_human then
62571: LD_VAR 0 1
62575: PPUSH
62576: CALL_OW 247
62580: PUSH
62581: LD_INT 1
62583: EQUAL
62584: IFFALSE 62601
// factory := IsInUnit ( factory ) ;
62586: LD_ADDR_VAR 0 1
62590: PUSH
62591: LD_VAR 0 1
62595: PPUSH
62596: CALL_OW 310
62600: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62601: LD_VAR 0 1
62605: PPUSH
62606: CALL_OW 266
62610: PUSH
62611: LD_INT 3
62613: NONEQUAL
62614: IFFALSE 62618
// exit ;
62616: GO 62720
// if HexInfo ( x , y ) = factory then
62618: LD_VAR 0 2
62622: PPUSH
62623: LD_VAR 0 3
62627: PPUSH
62628: CALL_OW 428
62632: PUSH
62633: LD_VAR 0 1
62637: EQUAL
62638: IFFALSE 62665
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62640: LD_ADDR_EXP 88
62644: PUSH
62645: LD_EXP 88
62649: PPUSH
62650: LD_VAR 0 1
62654: PPUSH
62655: LD_INT 0
62657: PPUSH
62658: CALL_OW 1
62662: ST_TO_ADDR
62663: GO 62716
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62665: LD_ADDR_EXP 88
62669: PUSH
62670: LD_EXP 88
62674: PPUSH
62675: LD_VAR 0 1
62679: PPUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 255
62689: PUSH
62690: LD_VAR 0 1
62694: PUSH
62695: LD_VAR 0 2
62699: PUSH
62700: LD_VAR 0 3
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: PPUSH
62711: CALL_OW 1
62715: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62716: CALL 62725 0 0
// end ;
62720: LD_VAR 0 4
62724: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62725: LD_INT 0
62727: PPUSH
62728: PPUSH
62729: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62730: LD_STRING resetFactoryWaypoint();
62732: PPUSH
62733: CALL_OW 559
// if factoryWaypoints then
62737: LD_EXP 88
62741: IFFALSE 62867
// begin list := PrepareArray ( factoryWaypoints ) ;
62743: LD_ADDR_VAR 0 3
62747: PUSH
62748: LD_EXP 88
62752: PPUSH
62753: CALL 47496 0 1
62757: ST_TO_ADDR
// for i := 1 to list do
62758: LD_ADDR_VAR 0 2
62762: PUSH
62763: DOUBLE
62764: LD_INT 1
62766: DEC
62767: ST_TO_ADDR
62768: LD_VAR 0 3
62772: PUSH
62773: FOR_TO
62774: IFFALSE 62865
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62776: LD_STRING setFactoryWaypointXY(
62778: PUSH
62779: LD_VAR 0 3
62783: PUSH
62784: LD_VAR 0 2
62788: ARRAY
62789: PUSH
62790: LD_INT 1
62792: ARRAY
62793: STR
62794: PUSH
62795: LD_STRING ,
62797: STR
62798: PUSH
62799: LD_VAR 0 3
62803: PUSH
62804: LD_VAR 0 2
62808: ARRAY
62809: PUSH
62810: LD_INT 2
62812: ARRAY
62813: STR
62814: PUSH
62815: LD_STRING ,
62817: STR
62818: PUSH
62819: LD_VAR 0 3
62823: PUSH
62824: LD_VAR 0 2
62828: ARRAY
62829: PUSH
62830: LD_INT 3
62832: ARRAY
62833: STR
62834: PUSH
62835: LD_STRING ,
62837: STR
62838: PUSH
62839: LD_VAR 0 3
62843: PUSH
62844: LD_VAR 0 2
62848: ARRAY
62849: PUSH
62850: LD_INT 4
62852: ARRAY
62853: STR
62854: PUSH
62855: LD_STRING )
62857: STR
62858: PPUSH
62859: CALL_OW 559
62863: GO 62773
62865: POP
62866: POP
// end ; end ;
62867: LD_VAR 0 1
62871: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62872: LD_INT 0
62874: PPUSH
// if HexInfo ( x , y ) = warehouse then
62875: LD_VAR 0 2
62879: PPUSH
62880: LD_VAR 0 3
62884: PPUSH
62885: CALL_OW 428
62889: PUSH
62890: LD_VAR 0 1
62894: EQUAL
62895: IFFALSE 62922
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62897: LD_ADDR_EXP 89
62901: PUSH
62902: LD_EXP 89
62906: PPUSH
62907: LD_VAR 0 1
62911: PPUSH
62912: LD_INT 0
62914: PPUSH
62915: CALL_OW 1
62919: ST_TO_ADDR
62920: GO 62973
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62922: LD_ADDR_EXP 89
62926: PUSH
62927: LD_EXP 89
62931: PPUSH
62932: LD_VAR 0 1
62936: PPUSH
62937: LD_VAR 0 1
62941: PPUSH
62942: CALL_OW 255
62946: PUSH
62947: LD_VAR 0 1
62951: PUSH
62952: LD_VAR 0 2
62956: PUSH
62957: LD_VAR 0 3
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: PPUSH
62968: CALL_OW 1
62972: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62973: CALL 62982 0 0
// end ;
62977: LD_VAR 0 4
62981: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62982: LD_INT 0
62984: PPUSH
62985: PPUSH
62986: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62987: LD_STRING resetWarehouseGatheringPoints();
62989: PPUSH
62990: CALL_OW 559
// if warehouseGatheringPoints then
62994: LD_EXP 89
62998: IFFALSE 63124
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63000: LD_ADDR_VAR 0 3
63004: PUSH
63005: LD_EXP 89
63009: PPUSH
63010: CALL 47496 0 1
63014: ST_TO_ADDR
// for i := 1 to list do
63015: LD_ADDR_VAR 0 2
63019: PUSH
63020: DOUBLE
63021: LD_INT 1
63023: DEC
63024: ST_TO_ADDR
63025: LD_VAR 0 3
63029: PUSH
63030: FOR_TO
63031: IFFALSE 63122
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63033: LD_STRING setWarehouseGatheringPointXY(
63035: PUSH
63036: LD_VAR 0 3
63040: PUSH
63041: LD_VAR 0 2
63045: ARRAY
63046: PUSH
63047: LD_INT 1
63049: ARRAY
63050: STR
63051: PUSH
63052: LD_STRING ,
63054: STR
63055: PUSH
63056: LD_VAR 0 3
63060: PUSH
63061: LD_VAR 0 2
63065: ARRAY
63066: PUSH
63067: LD_INT 2
63069: ARRAY
63070: STR
63071: PUSH
63072: LD_STRING ,
63074: STR
63075: PUSH
63076: LD_VAR 0 3
63080: PUSH
63081: LD_VAR 0 2
63085: ARRAY
63086: PUSH
63087: LD_INT 3
63089: ARRAY
63090: STR
63091: PUSH
63092: LD_STRING ,
63094: STR
63095: PUSH
63096: LD_VAR 0 3
63100: PUSH
63101: LD_VAR 0 2
63105: ARRAY
63106: PUSH
63107: LD_INT 4
63109: ARRAY
63110: STR
63111: PUSH
63112: LD_STRING )
63114: STR
63115: PPUSH
63116: CALL_OW 559
63120: GO 63030
63122: POP
63123: POP
// end ; end ;
63124: LD_VAR 0 1
63128: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63129: LD_EXP 89
63133: IFFALSE 63818
63135: GO 63137
63137: DISABLE
63138: LD_INT 0
63140: PPUSH
63141: PPUSH
63142: PPUSH
63143: PPUSH
63144: PPUSH
63145: PPUSH
63146: PPUSH
63147: PPUSH
63148: PPUSH
// begin enable ;
63149: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63150: LD_ADDR_VAR 0 3
63154: PUSH
63155: LD_EXP 89
63159: PPUSH
63160: CALL 47496 0 1
63164: ST_TO_ADDR
// if not list then
63165: LD_VAR 0 3
63169: NOT
63170: IFFALSE 63174
// exit ;
63172: GO 63818
// for i := 1 to list do
63174: LD_ADDR_VAR 0 1
63178: PUSH
63179: DOUBLE
63180: LD_INT 1
63182: DEC
63183: ST_TO_ADDR
63184: LD_VAR 0 3
63188: PUSH
63189: FOR_TO
63190: IFFALSE 63816
// begin depot := list [ i ] [ 2 ] ;
63192: LD_ADDR_VAR 0 8
63196: PUSH
63197: LD_VAR 0 3
63201: PUSH
63202: LD_VAR 0 1
63206: ARRAY
63207: PUSH
63208: LD_INT 2
63210: ARRAY
63211: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63212: LD_ADDR_VAR 0 5
63216: PUSH
63217: LD_VAR 0 3
63221: PUSH
63222: LD_VAR 0 1
63226: ARRAY
63227: PUSH
63228: LD_INT 1
63230: ARRAY
63231: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63232: LD_VAR 0 8
63236: PPUSH
63237: CALL_OW 301
63241: PUSH
63242: LD_VAR 0 5
63246: PUSH
63247: LD_VAR 0 8
63251: PPUSH
63252: CALL_OW 255
63256: NONEQUAL
63257: OR
63258: IFFALSE 63287
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63260: LD_ADDR_EXP 89
63264: PUSH
63265: LD_EXP 89
63269: PPUSH
63270: LD_VAR 0 8
63274: PPUSH
63275: LD_INT 0
63277: PPUSH
63278: CALL_OW 1
63282: ST_TO_ADDR
// exit ;
63283: POP
63284: POP
63285: GO 63818
// end ; x := list [ i ] [ 3 ] ;
63287: LD_ADDR_VAR 0 6
63291: PUSH
63292: LD_VAR 0 3
63296: PUSH
63297: LD_VAR 0 1
63301: ARRAY
63302: PUSH
63303: LD_INT 3
63305: ARRAY
63306: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63307: LD_ADDR_VAR 0 7
63311: PUSH
63312: LD_VAR 0 3
63316: PUSH
63317: LD_VAR 0 1
63321: ARRAY
63322: PUSH
63323: LD_INT 4
63325: ARRAY
63326: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63327: LD_ADDR_VAR 0 9
63331: PUSH
63332: LD_VAR 0 6
63336: PPUSH
63337: LD_VAR 0 7
63341: PPUSH
63342: LD_INT 16
63344: PPUSH
63345: CALL 46084 0 3
63349: ST_TO_ADDR
// if not cratesNearbyPoint then
63350: LD_VAR 0 9
63354: NOT
63355: IFFALSE 63361
// exit ;
63357: POP
63358: POP
63359: GO 63818
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63361: LD_ADDR_VAR 0 4
63365: PUSH
63366: LD_INT 22
63368: PUSH
63369: LD_VAR 0 5
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 3
63380: PUSH
63381: LD_INT 60
63383: PUSH
63384: EMPTY
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 91
63393: PUSH
63394: LD_VAR 0 8
63398: PUSH
63399: LD_INT 6
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 2
63409: PUSH
63410: LD_INT 25
63412: PUSH
63413: LD_INT 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 25
63422: PUSH
63423: LD_INT 16
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: LIST
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: PPUSH
63441: CALL_OW 69
63445: PUSH
63446: LD_VAR 0 8
63450: PPUSH
63451: CALL_OW 313
63455: PPUSH
63456: LD_INT 3
63458: PUSH
63459: LD_INT 60
63461: PUSH
63462: EMPTY
63463: LIST
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: LD_INT 25
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 25
63484: PUSH
63485: LD_INT 16
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PPUSH
63501: CALL_OW 72
63505: UNION
63506: ST_TO_ADDR
// if tmp then
63507: LD_VAR 0 4
63511: IFFALSE 63591
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63513: LD_ADDR_VAR 0 4
63517: PUSH
63518: LD_VAR 0 4
63522: PPUSH
63523: LD_INT 3
63525: PPUSH
63526: CALL 44053 0 2
63530: ST_TO_ADDR
// for j in tmp do
63531: LD_ADDR_VAR 0 2
63535: PUSH
63536: LD_VAR 0 4
63540: PUSH
63541: FOR_IN
63542: IFFALSE 63585
// begin if IsInUnit ( j ) then
63544: LD_VAR 0 2
63548: PPUSH
63549: CALL_OW 310
63553: IFFALSE 63564
// ComExit ( j ) ;
63555: LD_VAR 0 2
63559: PPUSH
63560: CALL 44136 0 1
// AddComCollect ( j , x , y ) ;
63564: LD_VAR 0 2
63568: PPUSH
63569: LD_VAR 0 6
63573: PPUSH
63574: LD_VAR 0 7
63578: PPUSH
63579: CALL_OW 177
// end ;
63583: GO 63541
63585: POP
63586: POP
// exit ;
63587: POP
63588: POP
63589: GO 63818
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63591: LD_ADDR_VAR 0 4
63595: PUSH
63596: LD_INT 22
63598: PUSH
63599: LD_VAR 0 5
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 91
63610: PUSH
63611: LD_VAR 0 8
63615: PUSH
63616: LD_INT 8
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: LD_INT 34
63629: PUSH
63630: LD_INT 12
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 34
63639: PUSH
63640: LD_INT 51
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 34
63649: PUSH
63650: LD_INT 32
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 34
63659: PUSH
63660: LD_INT 89
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PPUSH
63679: CALL_OW 69
63683: ST_TO_ADDR
// if tmp then
63684: LD_VAR 0 4
63688: IFFALSE 63814
// begin for j in tmp do
63690: LD_ADDR_VAR 0 2
63694: PUSH
63695: LD_VAR 0 4
63699: PUSH
63700: FOR_IN
63701: IFFALSE 63812
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63703: LD_VAR 0 2
63707: PPUSH
63708: CALL_OW 262
63712: PUSH
63713: LD_INT 3
63715: EQUAL
63716: PUSH
63717: LD_VAR 0 2
63721: PPUSH
63722: CALL_OW 261
63726: PUSH
63727: LD_INT 20
63729: GREATER
63730: OR
63731: PUSH
63732: LD_VAR 0 2
63736: PPUSH
63737: CALL_OW 314
63741: NOT
63742: AND
63743: PUSH
63744: LD_VAR 0 2
63748: PPUSH
63749: CALL_OW 263
63753: PUSH
63754: LD_INT 1
63756: NONEQUAL
63757: PUSH
63758: LD_VAR 0 2
63762: PPUSH
63763: CALL_OW 311
63767: OR
63768: AND
63769: IFFALSE 63810
// begin ComCollect ( j , x , y ) ;
63771: LD_VAR 0 2
63775: PPUSH
63776: LD_VAR 0 6
63780: PPUSH
63781: LD_VAR 0 7
63785: PPUSH
63786: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63790: LD_VAR 0 2
63794: PPUSH
63795: LD_VAR 0 8
63799: PPUSH
63800: CALL_OW 172
// exit ;
63804: POP
63805: POP
63806: POP
63807: POP
63808: GO 63818
// end ;
63810: GO 63700
63812: POP
63813: POP
// end ; end ;
63814: GO 63189
63816: POP
63817: POP
// end ; end_of_file
63818: PPOPN 9
63820: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63821: LD_VAR 0 1
63825: PUSH
63826: LD_INT 200
63828: DOUBLE
63829: GREATEREQUAL
63830: IFFALSE 63838
63832: LD_INT 299
63834: DOUBLE
63835: LESSEQUAL
63836: IFTRUE 63840
63838: GO 63872
63840: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63841: LD_VAR 0 1
63845: PPUSH
63846: LD_VAR 0 2
63850: PPUSH
63851: LD_VAR 0 3
63855: PPUSH
63856: LD_VAR 0 4
63860: PPUSH
63861: LD_VAR 0 5
63865: PPUSH
63866: CALL 64360 0 5
63870: GO 63949
63872: LD_INT 300
63874: DOUBLE
63875: GREATEREQUAL
63876: IFFALSE 63884
63878: LD_INT 399
63880: DOUBLE
63881: LESSEQUAL
63882: IFTRUE 63886
63884: GO 63948
63886: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63887: LD_VAR 0 1
63891: PPUSH
63892: LD_VAR 0 2
63896: PPUSH
63897: LD_VAR 0 3
63901: PPUSH
63902: LD_VAR 0 4
63906: PPUSH
63907: LD_VAR 0 5
63911: PPUSH
63912: LD_VAR 0 6
63916: PPUSH
63917: LD_VAR 0 7
63921: PPUSH
63922: LD_VAR 0 8
63926: PPUSH
63927: LD_VAR 0 9
63931: PPUSH
63932: LD_VAR 0 10
63936: PPUSH
63937: LD_VAR 0 11
63941: PPUSH
63942: CALL 60522 0 11
63946: GO 63949
63948: POP
// end ;
63949: PPOPN 11
63951: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63952: LD_VAR 0 1
63956: PPUSH
63957: LD_VAR 0 2
63961: PPUSH
63962: LD_VAR 0 3
63966: PPUSH
63967: LD_VAR 0 4
63971: PPUSH
63972: LD_VAR 0 5
63976: PPUSH
63977: CALL 64096 0 5
// end ; end_of_file
63981: PPOPN 5
63983: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63984: LD_INT 0
63986: PPUSH
63987: PPUSH
63988: PPUSH
63989: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63990: LD_VAR 0 1
63994: PPUSH
63995: CALL_OW 264
63999: PUSH
64000: LD_INT 91
64002: EQUAL
64003: IFFALSE 64075
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64005: LD_INT 68
64007: PPUSH
64008: LD_VAR 0 1
64012: PPUSH
64013: CALL_OW 255
64017: PPUSH
64018: CALL_OW 321
64022: PUSH
64023: LD_INT 2
64025: EQUAL
64026: IFFALSE 64038
// eff := 70 else
64028: LD_ADDR_VAR 0 4
64032: PUSH
64033: LD_INT 70
64035: ST_TO_ADDR
64036: GO 64046
// eff := 30 ;
64038: LD_ADDR_VAR 0 4
64042: PUSH
64043: LD_INT 30
64045: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64046: LD_VAR 0 1
64050: PPUSH
64051: CALL_OW 250
64055: PPUSH
64056: LD_VAR 0 1
64060: PPUSH
64061: CALL_OW 251
64065: PPUSH
64066: LD_VAR 0 4
64070: PPUSH
64071: CALL_OW 495
// end ; end ;
64075: LD_VAR 0 2
64079: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64080: LD_INT 0
64082: PPUSH
// end ;
64083: LD_VAR 0 4
64087: RET
// export function SOS_Command ( cmd ) ; begin
64088: LD_INT 0
64090: PPUSH
// end ;
64091: LD_VAR 0 2
64095: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
64096: LD_INT 0
64098: PPUSH
// end ;
64099: LD_VAR 0 6
64103: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
64104: LD_INT 0
64106: PPUSH
64107: PPUSH
// if not vehicle or not factory then
64108: LD_VAR 0 1
64112: NOT
64113: PUSH
64114: LD_VAR 0 2
64118: NOT
64119: OR
64120: IFFALSE 64124
// exit ;
64122: GO 64355
// if factoryWaypoints >= factory then
64124: LD_EXP 88
64128: PUSH
64129: LD_VAR 0 2
64133: GREATEREQUAL
64134: IFFALSE 64355
// if factoryWaypoints [ factory ] then
64136: LD_EXP 88
64140: PUSH
64141: LD_VAR 0 2
64145: ARRAY
64146: IFFALSE 64355
// begin if GetControl ( vehicle ) = control_manual then
64148: LD_VAR 0 1
64152: PPUSH
64153: CALL_OW 263
64157: PUSH
64158: LD_INT 1
64160: EQUAL
64161: IFFALSE 64242
// begin driver := IsDrivenBy ( vehicle ) ;
64163: LD_ADDR_VAR 0 4
64167: PUSH
64168: LD_VAR 0 1
64172: PPUSH
64173: CALL_OW 311
64177: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64178: LD_VAR 0 4
64182: PPUSH
64183: LD_EXP 88
64187: PUSH
64188: LD_VAR 0 2
64192: ARRAY
64193: PUSH
64194: LD_INT 3
64196: ARRAY
64197: PPUSH
64198: LD_EXP 88
64202: PUSH
64203: LD_VAR 0 2
64207: ARRAY
64208: PUSH
64209: LD_INT 4
64211: ARRAY
64212: PPUSH
64213: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64217: LD_VAR 0 4
64221: PPUSH
64222: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64226: LD_VAR 0 4
64230: PPUSH
64231: LD_VAR 0 2
64235: PPUSH
64236: CALL_OW 180
// end else
64240: GO 64355
// if GetControl ( vehicle ) = control_remote then
64242: LD_VAR 0 1
64246: PPUSH
64247: CALL_OW 263
64251: PUSH
64252: LD_INT 2
64254: EQUAL
64255: IFFALSE 64316
// begin wait ( 0 0$2 ) ;
64257: LD_INT 70
64259: PPUSH
64260: CALL_OW 67
// if Connect ( vehicle ) then
64264: LD_VAR 0 1
64268: PPUSH
64269: CALL 14357 0 1
64273: IFFALSE 64314
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64275: LD_VAR 0 1
64279: PPUSH
64280: LD_EXP 88
64284: PUSH
64285: LD_VAR 0 2
64289: ARRAY
64290: PUSH
64291: LD_INT 3
64293: ARRAY
64294: PPUSH
64295: LD_EXP 88
64299: PUSH
64300: LD_VAR 0 2
64304: ARRAY
64305: PUSH
64306: LD_INT 4
64308: ARRAY
64309: PPUSH
64310: CALL_OW 171
// end else
64314: GO 64355
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64316: LD_VAR 0 1
64320: PPUSH
64321: LD_EXP 88
64325: PUSH
64326: LD_VAR 0 2
64330: ARRAY
64331: PUSH
64332: LD_INT 3
64334: ARRAY
64335: PPUSH
64336: LD_EXP 88
64340: PUSH
64341: LD_VAR 0 2
64345: ARRAY
64346: PUSH
64347: LD_INT 4
64349: ARRAY
64350: PPUSH
64351: CALL_OW 171
// end ; end ;
64355: LD_VAR 0 3
64359: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64360: LD_INT 0
64362: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64363: LD_VAR 0 1
64367: PUSH
64368: LD_INT 250
64370: EQUAL
64371: PUSH
64372: LD_VAR 0 2
64376: PPUSH
64377: CALL_OW 264
64381: PUSH
64382: LD_INT 81
64384: EQUAL
64385: AND
64386: IFFALSE 64407
// MinerPlaceMine ( unit , x , y ) ;
64388: LD_VAR 0 2
64392: PPUSH
64393: LD_VAR 0 4
64397: PPUSH
64398: LD_VAR 0 5
64402: PPUSH
64403: CALL 66792 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64407: LD_VAR 0 1
64411: PUSH
64412: LD_INT 251
64414: EQUAL
64415: PUSH
64416: LD_VAR 0 2
64420: PPUSH
64421: CALL_OW 264
64425: PUSH
64426: LD_INT 81
64428: EQUAL
64429: AND
64430: IFFALSE 64451
// MinerDetonateMine ( unit , x , y ) ;
64432: LD_VAR 0 2
64436: PPUSH
64437: LD_VAR 0 4
64441: PPUSH
64442: LD_VAR 0 5
64446: PPUSH
64447: CALL 67067 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64451: LD_VAR 0 1
64455: PUSH
64456: LD_INT 252
64458: EQUAL
64459: PUSH
64460: LD_VAR 0 2
64464: PPUSH
64465: CALL_OW 264
64469: PUSH
64470: LD_INT 81
64472: EQUAL
64473: AND
64474: IFFALSE 64495
// MinerCreateMinefield ( unit , x , y ) ;
64476: LD_VAR 0 2
64480: PPUSH
64481: LD_VAR 0 4
64485: PPUSH
64486: LD_VAR 0 5
64490: PPUSH
64491: CALL 67484 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64495: LD_VAR 0 1
64499: PUSH
64500: LD_INT 253
64502: EQUAL
64503: PUSH
64504: LD_VAR 0 2
64508: PPUSH
64509: CALL_OW 257
64513: PUSH
64514: LD_INT 5
64516: EQUAL
64517: AND
64518: IFFALSE 64539
// ComBinocular ( unit , x , y ) ;
64520: LD_VAR 0 2
64524: PPUSH
64525: LD_VAR 0 4
64529: PPUSH
64530: LD_VAR 0 5
64534: PPUSH
64535: CALL 67853 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64539: LD_VAR 0 1
64543: PUSH
64544: LD_INT 254
64546: EQUAL
64547: PUSH
64548: LD_VAR 0 2
64552: PPUSH
64553: CALL_OW 264
64557: PUSH
64558: LD_INT 99
64560: EQUAL
64561: AND
64562: PUSH
64563: LD_VAR 0 3
64567: PPUSH
64568: CALL_OW 263
64572: PUSH
64573: LD_INT 3
64575: EQUAL
64576: AND
64577: IFFALSE 64593
// HackDestroyVehicle ( unit , selectedUnit ) ;
64579: LD_VAR 0 2
64583: PPUSH
64584: LD_VAR 0 3
64588: PPUSH
64589: CALL 66156 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64593: LD_VAR 0 1
64597: PUSH
64598: LD_INT 255
64600: EQUAL
64601: PUSH
64602: LD_VAR 0 2
64606: PPUSH
64607: CALL_OW 264
64611: PUSH
64612: LD_INT 14
64614: PUSH
64615: LD_INT 53
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: IN
64622: AND
64623: PUSH
64624: LD_VAR 0 4
64628: PPUSH
64629: LD_VAR 0 5
64633: PPUSH
64634: CALL_OW 488
64638: AND
64639: IFFALSE 64663
// CutTreeXYR ( unit , x , y , 12 ) ;
64641: LD_VAR 0 2
64645: PPUSH
64646: LD_VAR 0 4
64650: PPUSH
64651: LD_VAR 0 5
64655: PPUSH
64656: LD_INT 12
64658: PPUSH
64659: CALL 64726 0 4
// if cmd = 256 then
64663: LD_VAR 0 1
64667: PUSH
64668: LD_INT 256
64670: EQUAL
64671: IFFALSE 64692
// SetFactoryWaypoint ( unit , x , y ) ;
64673: LD_VAR 0 2
64677: PPUSH
64678: LD_VAR 0 4
64682: PPUSH
64683: LD_VAR 0 5
64687: PPUSH
64688: CALL 62510 0 3
// if cmd = 257 then
64692: LD_VAR 0 1
64696: PUSH
64697: LD_INT 257
64699: EQUAL
64700: IFFALSE 64721
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64702: LD_VAR 0 2
64706: PPUSH
64707: LD_VAR 0 4
64711: PPUSH
64712: LD_VAR 0 5
64716: PPUSH
64717: CALL 62872 0 3
// end ;
64721: LD_VAR 0 6
64725: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64726: LD_INT 0
64728: PPUSH
64729: PPUSH
64730: PPUSH
64731: PPUSH
64732: PPUSH
64733: PPUSH
64734: PPUSH
64735: PPUSH
64736: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64737: LD_VAR 0 1
64741: NOT
64742: PUSH
64743: LD_VAR 0 2
64747: PPUSH
64748: LD_VAR 0 3
64752: PPUSH
64753: CALL_OW 488
64757: NOT
64758: OR
64759: PUSH
64760: LD_VAR 0 4
64764: NOT
64765: OR
64766: IFFALSE 64770
// exit ;
64768: GO 65110
// list := [ ] ;
64770: LD_ADDR_VAR 0 13
64774: PUSH
64775: EMPTY
64776: ST_TO_ADDR
// if x - r < 0 then
64777: LD_VAR 0 2
64781: PUSH
64782: LD_VAR 0 4
64786: MINUS
64787: PUSH
64788: LD_INT 0
64790: LESS
64791: IFFALSE 64803
// min_x := 0 else
64793: LD_ADDR_VAR 0 7
64797: PUSH
64798: LD_INT 0
64800: ST_TO_ADDR
64801: GO 64819
// min_x := x - r ;
64803: LD_ADDR_VAR 0 7
64807: PUSH
64808: LD_VAR 0 2
64812: PUSH
64813: LD_VAR 0 4
64817: MINUS
64818: ST_TO_ADDR
// if y - r < 0 then
64819: LD_VAR 0 3
64823: PUSH
64824: LD_VAR 0 4
64828: MINUS
64829: PUSH
64830: LD_INT 0
64832: LESS
64833: IFFALSE 64845
// min_y := 0 else
64835: LD_ADDR_VAR 0 8
64839: PUSH
64840: LD_INT 0
64842: ST_TO_ADDR
64843: GO 64861
// min_y := y - r ;
64845: LD_ADDR_VAR 0 8
64849: PUSH
64850: LD_VAR 0 3
64854: PUSH
64855: LD_VAR 0 4
64859: MINUS
64860: ST_TO_ADDR
// max_x := x + r ;
64861: LD_ADDR_VAR 0 9
64865: PUSH
64866: LD_VAR 0 2
64870: PUSH
64871: LD_VAR 0 4
64875: PLUS
64876: ST_TO_ADDR
// max_y := y + r ;
64877: LD_ADDR_VAR 0 10
64881: PUSH
64882: LD_VAR 0 3
64886: PUSH
64887: LD_VAR 0 4
64891: PLUS
64892: ST_TO_ADDR
// for _x = min_x to max_x do
64893: LD_ADDR_VAR 0 11
64897: PUSH
64898: DOUBLE
64899: LD_VAR 0 7
64903: DEC
64904: ST_TO_ADDR
64905: LD_VAR 0 9
64909: PUSH
64910: FOR_TO
64911: IFFALSE 65028
// for _y = min_y to max_y do
64913: LD_ADDR_VAR 0 12
64917: PUSH
64918: DOUBLE
64919: LD_VAR 0 8
64923: DEC
64924: ST_TO_ADDR
64925: LD_VAR 0 10
64929: PUSH
64930: FOR_TO
64931: IFFALSE 65024
// begin if not ValidHex ( _x , _y ) then
64933: LD_VAR 0 11
64937: PPUSH
64938: LD_VAR 0 12
64942: PPUSH
64943: CALL_OW 488
64947: NOT
64948: IFFALSE 64952
// continue ;
64950: GO 64930
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64952: LD_VAR 0 11
64956: PPUSH
64957: LD_VAR 0 12
64961: PPUSH
64962: CALL_OW 351
64966: PUSH
64967: LD_VAR 0 11
64971: PPUSH
64972: LD_VAR 0 12
64976: PPUSH
64977: CALL_OW 554
64981: AND
64982: IFFALSE 65022
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64984: LD_ADDR_VAR 0 13
64988: PUSH
64989: LD_VAR 0 13
64993: PPUSH
64994: LD_VAR 0 13
64998: PUSH
64999: LD_INT 1
65001: PLUS
65002: PPUSH
65003: LD_VAR 0 11
65007: PUSH
65008: LD_VAR 0 12
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PPUSH
65017: CALL_OW 2
65021: ST_TO_ADDR
// end ;
65022: GO 64930
65024: POP
65025: POP
65026: GO 64910
65028: POP
65029: POP
// if not list then
65030: LD_VAR 0 13
65034: NOT
65035: IFFALSE 65039
// exit ;
65037: GO 65110
// for i in list do
65039: LD_ADDR_VAR 0 6
65043: PUSH
65044: LD_VAR 0 13
65048: PUSH
65049: FOR_IN
65050: IFFALSE 65108
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65052: LD_VAR 0 1
65056: PPUSH
65057: LD_STRING M
65059: PUSH
65060: LD_VAR 0 6
65064: PUSH
65065: LD_INT 1
65067: ARRAY
65068: PUSH
65069: LD_VAR 0 6
65073: PUSH
65074: LD_INT 2
65076: ARRAY
65077: PUSH
65078: LD_INT 0
65080: PUSH
65081: LD_INT 0
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: PUSH
65099: EMPTY
65100: LIST
65101: PPUSH
65102: CALL_OW 447
65106: GO 65049
65108: POP
65109: POP
// end ;
65110: LD_VAR 0 5
65114: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65115: LD_EXP 91
65119: NOT
65120: IFFALSE 65170
65122: GO 65124
65124: DISABLE
// begin initHack := true ;
65125: LD_ADDR_EXP 91
65129: PUSH
65130: LD_INT 1
65132: ST_TO_ADDR
// hackTanks := [ ] ;
65133: LD_ADDR_EXP 92
65137: PUSH
65138: EMPTY
65139: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65140: LD_ADDR_EXP 93
65144: PUSH
65145: EMPTY
65146: ST_TO_ADDR
// hackLimit := 3 ;
65147: LD_ADDR_EXP 94
65151: PUSH
65152: LD_INT 3
65154: ST_TO_ADDR
// hackDist := 12 ;
65155: LD_ADDR_EXP 95
65159: PUSH
65160: LD_INT 12
65162: ST_TO_ADDR
// hackCounter := [ ] ;
65163: LD_ADDR_EXP 96
65167: PUSH
65168: EMPTY
65169: ST_TO_ADDR
// end ;
65170: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65171: LD_EXP 91
65175: PUSH
65176: LD_INT 34
65178: PUSH
65179: LD_INT 99
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PPUSH
65186: CALL_OW 69
65190: AND
65191: IFFALSE 65444
65193: GO 65195
65195: DISABLE
65196: LD_INT 0
65198: PPUSH
65199: PPUSH
// begin enable ;
65200: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65201: LD_ADDR_VAR 0 1
65205: PUSH
65206: LD_INT 34
65208: PUSH
65209: LD_INT 99
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PPUSH
65216: CALL_OW 69
65220: PUSH
65221: FOR_IN
65222: IFFALSE 65442
// begin if not i in hackTanks then
65224: LD_VAR 0 1
65228: PUSH
65229: LD_EXP 92
65233: IN
65234: NOT
65235: IFFALSE 65318
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65237: LD_ADDR_EXP 92
65241: PUSH
65242: LD_EXP 92
65246: PPUSH
65247: LD_EXP 92
65251: PUSH
65252: LD_INT 1
65254: PLUS
65255: PPUSH
65256: LD_VAR 0 1
65260: PPUSH
65261: CALL_OW 1
65265: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65266: LD_ADDR_EXP 93
65270: PUSH
65271: LD_EXP 93
65275: PPUSH
65276: LD_EXP 93
65280: PUSH
65281: LD_INT 1
65283: PLUS
65284: PPUSH
65285: EMPTY
65286: PPUSH
65287: CALL_OW 1
65291: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65292: LD_ADDR_EXP 96
65296: PUSH
65297: LD_EXP 96
65301: PPUSH
65302: LD_EXP 96
65306: PUSH
65307: LD_INT 1
65309: PLUS
65310: PPUSH
65311: EMPTY
65312: PPUSH
65313: CALL_OW 1
65317: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65318: LD_VAR 0 1
65322: PPUSH
65323: CALL_OW 302
65327: NOT
65328: IFFALSE 65341
// begin HackUnlinkAll ( i ) ;
65330: LD_VAR 0 1
65334: PPUSH
65335: CALL 65447 0 1
// continue ;
65339: GO 65221
// end ; HackCheckCapturedStatus ( i ) ;
65341: LD_VAR 0 1
65345: PPUSH
65346: CALL 65890 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65350: LD_ADDR_VAR 0 2
65354: PUSH
65355: LD_INT 81
65357: PUSH
65358: LD_VAR 0 1
65362: PPUSH
65363: CALL_OW 255
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 33
65374: PUSH
65375: LD_INT 3
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 91
65384: PUSH
65385: LD_VAR 0 1
65389: PUSH
65390: LD_EXP 95
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 50
65402: PUSH
65403: EMPTY
65404: LIST
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: LIST
65410: LIST
65411: PPUSH
65412: CALL_OW 69
65416: ST_TO_ADDR
// if not tmp then
65417: LD_VAR 0 2
65421: NOT
65422: IFFALSE 65426
// continue ;
65424: GO 65221
// HackLink ( i , tmp ) ;
65426: LD_VAR 0 1
65430: PPUSH
65431: LD_VAR 0 2
65435: PPUSH
65436: CALL 65583 0 2
// end ;
65440: GO 65221
65442: POP
65443: POP
// end ;
65444: PPOPN 2
65446: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65447: LD_INT 0
65449: PPUSH
65450: PPUSH
65451: PPUSH
// if not hack in hackTanks then
65452: LD_VAR 0 1
65456: PUSH
65457: LD_EXP 92
65461: IN
65462: NOT
65463: IFFALSE 65467
// exit ;
65465: GO 65578
// index := GetElementIndex ( hackTanks , hack ) ;
65467: LD_ADDR_VAR 0 4
65471: PUSH
65472: LD_EXP 92
65476: PPUSH
65477: LD_VAR 0 1
65481: PPUSH
65482: CALL 11164 0 2
65486: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65487: LD_EXP 93
65491: PUSH
65492: LD_VAR 0 4
65496: ARRAY
65497: IFFALSE 65578
// begin for i in hackTanksCaptured [ index ] do
65499: LD_ADDR_VAR 0 3
65503: PUSH
65504: LD_EXP 93
65508: PUSH
65509: LD_VAR 0 4
65513: ARRAY
65514: PUSH
65515: FOR_IN
65516: IFFALSE 65542
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65518: LD_VAR 0 3
65522: PUSH
65523: LD_INT 1
65525: ARRAY
65526: PPUSH
65527: LD_VAR 0 3
65531: PUSH
65532: LD_INT 2
65534: ARRAY
65535: PPUSH
65536: CALL_OW 235
65540: GO 65515
65542: POP
65543: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65544: LD_ADDR_EXP 93
65548: PUSH
65549: LD_EXP 93
65553: PPUSH
65554: LD_VAR 0 4
65558: PPUSH
65559: EMPTY
65560: PPUSH
65561: CALL_OW 1
65565: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65566: LD_VAR 0 1
65570: PPUSH
65571: LD_INT 0
65573: PPUSH
65574: CALL_OW 505
// end ; end ;
65578: LD_VAR 0 2
65582: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65583: LD_INT 0
65585: PPUSH
65586: PPUSH
65587: PPUSH
// if not hack in hackTanks or not vehicles then
65588: LD_VAR 0 1
65592: PUSH
65593: LD_EXP 92
65597: IN
65598: NOT
65599: PUSH
65600: LD_VAR 0 2
65604: NOT
65605: OR
65606: IFFALSE 65610
// exit ;
65608: GO 65885
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65610: LD_ADDR_VAR 0 2
65614: PUSH
65615: LD_VAR 0 1
65619: PPUSH
65620: LD_VAR 0 2
65624: PPUSH
65625: LD_INT 1
65627: PPUSH
65628: LD_INT 1
65630: PPUSH
65631: CALL 11814 0 4
65635: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65636: LD_ADDR_VAR 0 5
65640: PUSH
65641: LD_EXP 92
65645: PPUSH
65646: LD_VAR 0 1
65650: PPUSH
65651: CALL 11164 0 2
65655: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65656: LD_EXP 93
65660: PUSH
65661: LD_VAR 0 5
65665: ARRAY
65666: PUSH
65667: LD_EXP 94
65671: LESS
65672: IFFALSE 65861
// begin for i := 1 to vehicles do
65674: LD_ADDR_VAR 0 4
65678: PUSH
65679: DOUBLE
65680: LD_INT 1
65682: DEC
65683: ST_TO_ADDR
65684: LD_VAR 0 2
65688: PUSH
65689: FOR_TO
65690: IFFALSE 65859
// begin if hackTanksCaptured [ index ] = hackLimit then
65692: LD_EXP 93
65696: PUSH
65697: LD_VAR 0 5
65701: ARRAY
65702: PUSH
65703: LD_EXP 94
65707: EQUAL
65708: IFFALSE 65712
// break ;
65710: GO 65859
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65712: LD_ADDR_EXP 96
65716: PUSH
65717: LD_EXP 96
65721: PPUSH
65722: LD_VAR 0 5
65726: PPUSH
65727: LD_EXP 96
65731: PUSH
65732: LD_VAR 0 5
65736: ARRAY
65737: PUSH
65738: LD_INT 1
65740: PLUS
65741: PPUSH
65742: CALL_OW 1
65746: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65747: LD_ADDR_EXP 93
65751: PUSH
65752: LD_EXP 93
65756: PPUSH
65757: LD_VAR 0 5
65761: PUSH
65762: LD_EXP 93
65766: PUSH
65767: LD_VAR 0 5
65771: ARRAY
65772: PUSH
65773: LD_INT 1
65775: PLUS
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PPUSH
65781: LD_VAR 0 2
65785: PUSH
65786: LD_VAR 0 4
65790: ARRAY
65791: PUSH
65792: LD_VAR 0 2
65796: PUSH
65797: LD_VAR 0 4
65801: ARRAY
65802: PPUSH
65803: CALL_OW 255
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PPUSH
65812: CALL 11379 0 3
65816: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65817: LD_VAR 0 2
65821: PUSH
65822: LD_VAR 0 4
65826: ARRAY
65827: PPUSH
65828: LD_VAR 0 1
65832: PPUSH
65833: CALL_OW 255
65837: PPUSH
65838: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65842: LD_VAR 0 2
65846: PUSH
65847: LD_VAR 0 4
65851: ARRAY
65852: PPUSH
65853: CALL_OW 141
// end ;
65857: GO 65689
65859: POP
65860: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65861: LD_VAR 0 1
65865: PPUSH
65866: LD_EXP 93
65870: PUSH
65871: LD_VAR 0 5
65875: ARRAY
65876: PUSH
65877: LD_INT 0
65879: PLUS
65880: PPUSH
65881: CALL_OW 505
// end ;
65885: LD_VAR 0 3
65889: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65890: LD_INT 0
65892: PPUSH
65893: PPUSH
65894: PPUSH
65895: PPUSH
// if not hack in hackTanks then
65896: LD_VAR 0 1
65900: PUSH
65901: LD_EXP 92
65905: IN
65906: NOT
65907: IFFALSE 65911
// exit ;
65909: GO 66151
// index := GetElementIndex ( hackTanks , hack ) ;
65911: LD_ADDR_VAR 0 4
65915: PUSH
65916: LD_EXP 92
65920: PPUSH
65921: LD_VAR 0 1
65925: PPUSH
65926: CALL 11164 0 2
65930: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65931: LD_ADDR_VAR 0 3
65935: PUSH
65936: DOUBLE
65937: LD_EXP 93
65941: PUSH
65942: LD_VAR 0 4
65946: ARRAY
65947: INC
65948: ST_TO_ADDR
65949: LD_INT 1
65951: PUSH
65952: FOR_DOWNTO
65953: IFFALSE 66125
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65955: LD_ADDR_VAR 0 5
65959: PUSH
65960: LD_EXP 93
65964: PUSH
65965: LD_VAR 0 4
65969: ARRAY
65970: PUSH
65971: LD_VAR 0 3
65975: ARRAY
65976: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65977: LD_VAR 0 5
65981: PUSH
65982: LD_INT 1
65984: ARRAY
65985: PPUSH
65986: CALL_OW 302
65990: NOT
65991: PUSH
65992: LD_VAR 0 5
65996: PUSH
65997: LD_INT 1
65999: ARRAY
66000: PPUSH
66001: CALL_OW 255
66005: PUSH
66006: LD_VAR 0 1
66010: PPUSH
66011: CALL_OW 255
66015: NONEQUAL
66016: OR
66017: IFFALSE 66123
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66019: LD_VAR 0 5
66023: PUSH
66024: LD_INT 1
66026: ARRAY
66027: PPUSH
66028: CALL_OW 305
66032: PUSH
66033: LD_VAR 0 5
66037: PUSH
66038: LD_INT 1
66040: ARRAY
66041: PPUSH
66042: CALL_OW 255
66046: PUSH
66047: LD_VAR 0 1
66051: PPUSH
66052: CALL_OW 255
66056: EQUAL
66057: AND
66058: IFFALSE 66082
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66060: LD_VAR 0 5
66064: PUSH
66065: LD_INT 1
66067: ARRAY
66068: PPUSH
66069: LD_VAR 0 5
66073: PUSH
66074: LD_INT 2
66076: ARRAY
66077: PPUSH
66078: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66082: LD_ADDR_EXP 93
66086: PUSH
66087: LD_EXP 93
66091: PPUSH
66092: LD_VAR 0 4
66096: PPUSH
66097: LD_EXP 93
66101: PUSH
66102: LD_VAR 0 4
66106: ARRAY
66107: PPUSH
66108: LD_VAR 0 3
66112: PPUSH
66113: CALL_OW 3
66117: PPUSH
66118: CALL_OW 1
66122: ST_TO_ADDR
// end ; end ;
66123: GO 65952
66125: POP
66126: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66127: LD_VAR 0 1
66131: PPUSH
66132: LD_EXP 93
66136: PUSH
66137: LD_VAR 0 4
66141: ARRAY
66142: PUSH
66143: LD_INT 0
66145: PLUS
66146: PPUSH
66147: CALL_OW 505
// end ;
66151: LD_VAR 0 2
66155: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66156: LD_INT 0
66158: PPUSH
66159: PPUSH
66160: PPUSH
66161: PPUSH
// if not hack in hackTanks then
66162: LD_VAR 0 1
66166: PUSH
66167: LD_EXP 92
66171: IN
66172: NOT
66173: IFFALSE 66177
// exit ;
66175: GO 66262
// index := GetElementIndex ( hackTanks , hack ) ;
66177: LD_ADDR_VAR 0 5
66181: PUSH
66182: LD_EXP 92
66186: PPUSH
66187: LD_VAR 0 1
66191: PPUSH
66192: CALL 11164 0 2
66196: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66197: LD_ADDR_VAR 0 4
66201: PUSH
66202: DOUBLE
66203: LD_INT 1
66205: DEC
66206: ST_TO_ADDR
66207: LD_EXP 93
66211: PUSH
66212: LD_VAR 0 5
66216: ARRAY
66217: PUSH
66218: FOR_TO
66219: IFFALSE 66260
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66221: LD_EXP 93
66225: PUSH
66226: LD_VAR 0 5
66230: ARRAY
66231: PUSH
66232: LD_VAR 0 4
66236: ARRAY
66237: PUSH
66238: LD_INT 1
66240: ARRAY
66241: PUSH
66242: LD_VAR 0 2
66246: EQUAL
66247: IFFALSE 66258
// KillUnit ( vehicle ) ;
66249: LD_VAR 0 2
66253: PPUSH
66254: CALL_OW 66
66258: GO 66218
66260: POP
66261: POP
// end ;
66262: LD_VAR 0 3
66266: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66267: LD_EXP 97
66271: NOT
66272: IFFALSE 66307
66274: GO 66276
66276: DISABLE
// begin initMiner := true ;
66277: LD_ADDR_EXP 97
66281: PUSH
66282: LD_INT 1
66284: ST_TO_ADDR
// minersList := [ ] ;
66285: LD_ADDR_EXP 98
66289: PUSH
66290: EMPTY
66291: ST_TO_ADDR
// minerMinesList := [ ] ;
66292: LD_ADDR_EXP 99
66296: PUSH
66297: EMPTY
66298: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66299: LD_ADDR_EXP 100
66303: PUSH
66304: LD_INT 5
66306: ST_TO_ADDR
// end ;
66307: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66308: LD_EXP 97
66312: PUSH
66313: LD_INT 34
66315: PUSH
66316: LD_INT 81
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PPUSH
66323: CALL_OW 69
66327: AND
66328: IFFALSE 66789
66330: GO 66332
66332: DISABLE
66333: LD_INT 0
66335: PPUSH
66336: PPUSH
66337: PPUSH
66338: PPUSH
// begin enable ;
66339: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66340: LD_ADDR_VAR 0 1
66344: PUSH
66345: LD_INT 34
66347: PUSH
66348: LD_INT 81
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PPUSH
66355: CALL_OW 69
66359: PUSH
66360: FOR_IN
66361: IFFALSE 66433
// begin if not i in minersList then
66363: LD_VAR 0 1
66367: PUSH
66368: LD_EXP 98
66372: IN
66373: NOT
66374: IFFALSE 66431
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66376: LD_ADDR_EXP 98
66380: PUSH
66381: LD_EXP 98
66385: PPUSH
66386: LD_EXP 98
66390: PUSH
66391: LD_INT 1
66393: PLUS
66394: PPUSH
66395: LD_VAR 0 1
66399: PPUSH
66400: CALL_OW 1
66404: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66405: LD_ADDR_EXP 99
66409: PUSH
66410: LD_EXP 99
66414: PPUSH
66415: LD_EXP 99
66419: PUSH
66420: LD_INT 1
66422: PLUS
66423: PPUSH
66424: EMPTY
66425: PPUSH
66426: CALL_OW 1
66430: ST_TO_ADDR
// end end ;
66431: GO 66360
66433: POP
66434: POP
// for i := minerMinesList downto 1 do
66435: LD_ADDR_VAR 0 1
66439: PUSH
66440: DOUBLE
66441: LD_EXP 99
66445: INC
66446: ST_TO_ADDR
66447: LD_INT 1
66449: PUSH
66450: FOR_DOWNTO
66451: IFFALSE 66787
// begin if IsLive ( minersList [ i ] ) then
66453: LD_EXP 98
66457: PUSH
66458: LD_VAR 0 1
66462: ARRAY
66463: PPUSH
66464: CALL_OW 300
66468: IFFALSE 66496
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66470: LD_EXP 98
66474: PUSH
66475: LD_VAR 0 1
66479: ARRAY
66480: PPUSH
66481: LD_EXP 99
66485: PUSH
66486: LD_VAR 0 1
66490: ARRAY
66491: PPUSH
66492: CALL_OW 505
// if not minerMinesList [ i ] then
66496: LD_EXP 99
66500: PUSH
66501: LD_VAR 0 1
66505: ARRAY
66506: NOT
66507: IFFALSE 66511
// continue ;
66509: GO 66450
// for j := minerMinesList [ i ] downto 1 do
66511: LD_ADDR_VAR 0 2
66515: PUSH
66516: DOUBLE
66517: LD_EXP 99
66521: PUSH
66522: LD_VAR 0 1
66526: ARRAY
66527: INC
66528: ST_TO_ADDR
66529: LD_INT 1
66531: PUSH
66532: FOR_DOWNTO
66533: IFFALSE 66783
// begin side := GetSide ( minersList [ i ] ) ;
66535: LD_ADDR_VAR 0 3
66539: PUSH
66540: LD_EXP 98
66544: PUSH
66545: LD_VAR 0 1
66549: ARRAY
66550: PPUSH
66551: CALL_OW 255
66555: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66556: LD_ADDR_VAR 0 4
66560: PUSH
66561: LD_EXP 99
66565: PUSH
66566: LD_VAR 0 1
66570: ARRAY
66571: PUSH
66572: LD_VAR 0 2
66576: ARRAY
66577: PUSH
66578: LD_INT 1
66580: ARRAY
66581: PPUSH
66582: LD_EXP 99
66586: PUSH
66587: LD_VAR 0 1
66591: ARRAY
66592: PUSH
66593: LD_VAR 0 2
66597: ARRAY
66598: PUSH
66599: LD_INT 2
66601: ARRAY
66602: PPUSH
66603: CALL_OW 428
66607: ST_TO_ADDR
// if not tmp then
66608: LD_VAR 0 4
66612: NOT
66613: IFFALSE 66617
// continue ;
66615: GO 66532
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66617: LD_VAR 0 4
66621: PUSH
66622: LD_INT 81
66624: PUSH
66625: LD_VAR 0 3
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PPUSH
66634: CALL_OW 69
66638: IN
66639: PUSH
66640: LD_EXP 99
66644: PUSH
66645: LD_VAR 0 1
66649: ARRAY
66650: PUSH
66651: LD_VAR 0 2
66655: ARRAY
66656: PUSH
66657: LD_INT 1
66659: ARRAY
66660: PPUSH
66661: LD_EXP 99
66665: PUSH
66666: LD_VAR 0 1
66670: ARRAY
66671: PUSH
66672: LD_VAR 0 2
66676: ARRAY
66677: PUSH
66678: LD_INT 2
66680: ARRAY
66681: PPUSH
66682: CALL_OW 458
66686: AND
66687: IFFALSE 66781
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66689: LD_EXP 99
66693: PUSH
66694: LD_VAR 0 1
66698: ARRAY
66699: PUSH
66700: LD_VAR 0 2
66704: ARRAY
66705: PUSH
66706: LD_INT 1
66708: ARRAY
66709: PPUSH
66710: LD_EXP 99
66714: PUSH
66715: LD_VAR 0 1
66719: ARRAY
66720: PUSH
66721: LD_VAR 0 2
66725: ARRAY
66726: PUSH
66727: LD_INT 2
66729: ARRAY
66730: PPUSH
66731: LD_VAR 0 3
66735: PPUSH
66736: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66740: LD_ADDR_EXP 99
66744: PUSH
66745: LD_EXP 99
66749: PPUSH
66750: LD_VAR 0 1
66754: PPUSH
66755: LD_EXP 99
66759: PUSH
66760: LD_VAR 0 1
66764: ARRAY
66765: PPUSH
66766: LD_VAR 0 2
66770: PPUSH
66771: CALL_OW 3
66775: PPUSH
66776: CALL_OW 1
66780: ST_TO_ADDR
// end ; end ;
66781: GO 66532
66783: POP
66784: POP
// end ;
66785: GO 66450
66787: POP
66788: POP
// end ;
66789: PPOPN 4
66791: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66792: LD_INT 0
66794: PPUSH
66795: PPUSH
// result := false ;
66796: LD_ADDR_VAR 0 4
66800: PUSH
66801: LD_INT 0
66803: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66804: LD_VAR 0 1
66808: PPUSH
66809: CALL_OW 264
66813: PUSH
66814: LD_INT 81
66816: EQUAL
66817: NOT
66818: IFFALSE 66822
// exit ;
66820: GO 67062
// index := GetElementIndex ( minersList , unit ) ;
66822: LD_ADDR_VAR 0 5
66826: PUSH
66827: LD_EXP 98
66831: PPUSH
66832: LD_VAR 0 1
66836: PPUSH
66837: CALL 11164 0 2
66841: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66842: LD_EXP 99
66846: PUSH
66847: LD_VAR 0 5
66851: ARRAY
66852: PUSH
66853: LD_EXP 100
66857: GREATEREQUAL
66858: IFFALSE 66862
// exit ;
66860: GO 67062
// ComMoveXY ( unit , x , y ) ;
66862: LD_VAR 0 1
66866: PPUSH
66867: LD_VAR 0 2
66871: PPUSH
66872: LD_VAR 0 3
66876: PPUSH
66877: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66881: LD_INT 35
66883: PPUSH
66884: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66888: LD_VAR 0 1
66892: PPUSH
66893: LD_VAR 0 2
66897: PPUSH
66898: LD_VAR 0 3
66902: PPUSH
66903: CALL 42548 0 3
66907: NOT
66908: PUSH
66909: LD_VAR 0 1
66913: PPUSH
66914: CALL_OW 314
66918: AND
66919: IFFALSE 66923
// exit ;
66921: GO 67062
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66923: LD_VAR 0 2
66927: PPUSH
66928: LD_VAR 0 3
66932: PPUSH
66933: CALL_OW 428
66937: PUSH
66938: LD_VAR 0 1
66942: EQUAL
66943: PUSH
66944: LD_VAR 0 1
66948: PPUSH
66949: CALL_OW 314
66953: NOT
66954: AND
66955: IFFALSE 66881
// PlaySoundXY ( x , y , PlantMine ) ;
66957: LD_VAR 0 2
66961: PPUSH
66962: LD_VAR 0 3
66966: PPUSH
66967: LD_STRING PlantMine
66969: PPUSH
66970: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66974: LD_VAR 0 2
66978: PPUSH
66979: LD_VAR 0 3
66983: PPUSH
66984: LD_VAR 0 1
66988: PPUSH
66989: CALL_OW 255
66993: PPUSH
66994: LD_INT 0
66996: PPUSH
66997: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67001: LD_ADDR_EXP 99
67005: PUSH
67006: LD_EXP 99
67010: PPUSH
67011: LD_VAR 0 5
67015: PUSH
67016: LD_EXP 99
67020: PUSH
67021: LD_VAR 0 5
67025: ARRAY
67026: PUSH
67027: LD_INT 1
67029: PLUS
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PPUSH
67035: LD_VAR 0 2
67039: PUSH
67040: LD_VAR 0 3
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PPUSH
67049: CALL 11379 0 3
67053: ST_TO_ADDR
// result := true ;
67054: LD_ADDR_VAR 0 4
67058: PUSH
67059: LD_INT 1
67061: ST_TO_ADDR
// end ;
67062: LD_VAR 0 4
67066: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67067: LD_INT 0
67069: PPUSH
67070: PPUSH
67071: PPUSH
// if not unit in minersList then
67072: LD_VAR 0 1
67076: PUSH
67077: LD_EXP 98
67081: IN
67082: NOT
67083: IFFALSE 67087
// exit ;
67085: GO 67479
// index := GetElementIndex ( minersList , unit ) ;
67087: LD_ADDR_VAR 0 6
67091: PUSH
67092: LD_EXP 98
67096: PPUSH
67097: LD_VAR 0 1
67101: PPUSH
67102: CALL 11164 0 2
67106: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67107: LD_ADDR_VAR 0 5
67111: PUSH
67112: DOUBLE
67113: LD_EXP 99
67117: PUSH
67118: LD_VAR 0 6
67122: ARRAY
67123: INC
67124: ST_TO_ADDR
67125: LD_INT 1
67127: PUSH
67128: FOR_DOWNTO
67129: IFFALSE 67290
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67131: LD_EXP 99
67135: PUSH
67136: LD_VAR 0 6
67140: ARRAY
67141: PUSH
67142: LD_VAR 0 5
67146: ARRAY
67147: PUSH
67148: LD_INT 1
67150: ARRAY
67151: PUSH
67152: LD_VAR 0 2
67156: EQUAL
67157: PUSH
67158: LD_EXP 99
67162: PUSH
67163: LD_VAR 0 6
67167: ARRAY
67168: PUSH
67169: LD_VAR 0 5
67173: ARRAY
67174: PUSH
67175: LD_INT 2
67177: ARRAY
67178: PUSH
67179: LD_VAR 0 3
67183: EQUAL
67184: AND
67185: IFFALSE 67288
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67187: LD_EXP 99
67191: PUSH
67192: LD_VAR 0 6
67196: ARRAY
67197: PUSH
67198: LD_VAR 0 5
67202: ARRAY
67203: PUSH
67204: LD_INT 1
67206: ARRAY
67207: PPUSH
67208: LD_EXP 99
67212: PUSH
67213: LD_VAR 0 6
67217: ARRAY
67218: PUSH
67219: LD_VAR 0 5
67223: ARRAY
67224: PUSH
67225: LD_INT 2
67227: ARRAY
67228: PPUSH
67229: LD_VAR 0 1
67233: PPUSH
67234: CALL_OW 255
67238: PPUSH
67239: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67243: LD_ADDR_EXP 99
67247: PUSH
67248: LD_EXP 99
67252: PPUSH
67253: LD_VAR 0 6
67257: PPUSH
67258: LD_EXP 99
67262: PUSH
67263: LD_VAR 0 6
67267: ARRAY
67268: PPUSH
67269: LD_VAR 0 5
67273: PPUSH
67274: CALL_OW 3
67278: PPUSH
67279: CALL_OW 1
67283: ST_TO_ADDR
// exit ;
67284: POP
67285: POP
67286: GO 67479
// end ; end ;
67288: GO 67128
67290: POP
67291: POP
// for i := minerMinesList [ index ] downto 1 do
67292: LD_ADDR_VAR 0 5
67296: PUSH
67297: DOUBLE
67298: LD_EXP 99
67302: PUSH
67303: LD_VAR 0 6
67307: ARRAY
67308: INC
67309: ST_TO_ADDR
67310: LD_INT 1
67312: PUSH
67313: FOR_DOWNTO
67314: IFFALSE 67477
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67316: LD_EXP 99
67320: PUSH
67321: LD_VAR 0 6
67325: ARRAY
67326: PUSH
67327: LD_VAR 0 5
67331: ARRAY
67332: PUSH
67333: LD_INT 1
67335: ARRAY
67336: PPUSH
67337: LD_EXP 99
67341: PUSH
67342: LD_VAR 0 6
67346: ARRAY
67347: PUSH
67348: LD_VAR 0 5
67352: ARRAY
67353: PUSH
67354: LD_INT 2
67356: ARRAY
67357: PPUSH
67358: LD_VAR 0 2
67362: PPUSH
67363: LD_VAR 0 3
67367: PPUSH
67368: CALL_OW 298
67372: PUSH
67373: LD_INT 6
67375: LESS
67376: IFFALSE 67475
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67378: LD_EXP 99
67382: PUSH
67383: LD_VAR 0 6
67387: ARRAY
67388: PUSH
67389: LD_VAR 0 5
67393: ARRAY
67394: PUSH
67395: LD_INT 1
67397: ARRAY
67398: PPUSH
67399: LD_EXP 99
67403: PUSH
67404: LD_VAR 0 6
67408: ARRAY
67409: PUSH
67410: LD_VAR 0 5
67414: ARRAY
67415: PUSH
67416: LD_INT 2
67418: ARRAY
67419: PPUSH
67420: LD_VAR 0 1
67424: PPUSH
67425: CALL_OW 255
67429: PPUSH
67430: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67434: LD_ADDR_EXP 99
67438: PUSH
67439: LD_EXP 99
67443: PPUSH
67444: LD_VAR 0 6
67448: PPUSH
67449: LD_EXP 99
67453: PUSH
67454: LD_VAR 0 6
67458: ARRAY
67459: PPUSH
67460: LD_VAR 0 5
67464: PPUSH
67465: CALL_OW 3
67469: PPUSH
67470: CALL_OW 1
67474: ST_TO_ADDR
// end ; end ;
67475: GO 67313
67477: POP
67478: POP
// end ;
67479: LD_VAR 0 4
67483: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67484: LD_INT 0
67486: PPUSH
67487: PPUSH
67488: PPUSH
67489: PPUSH
67490: PPUSH
67491: PPUSH
67492: PPUSH
67493: PPUSH
67494: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67495: LD_VAR 0 1
67499: PPUSH
67500: CALL_OW 264
67504: PUSH
67505: LD_INT 81
67507: EQUAL
67508: NOT
67509: PUSH
67510: LD_VAR 0 1
67514: PUSH
67515: LD_EXP 98
67519: IN
67520: NOT
67521: OR
67522: IFFALSE 67526
// exit ;
67524: GO 67848
// index := GetElementIndex ( minersList , unit ) ;
67526: LD_ADDR_VAR 0 6
67530: PUSH
67531: LD_EXP 98
67535: PPUSH
67536: LD_VAR 0 1
67540: PPUSH
67541: CALL 11164 0 2
67545: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67546: LD_ADDR_VAR 0 8
67550: PUSH
67551: LD_EXP 100
67555: PUSH
67556: LD_EXP 99
67560: PUSH
67561: LD_VAR 0 6
67565: ARRAY
67566: MINUS
67567: ST_TO_ADDR
// if not minesFreeAmount then
67568: LD_VAR 0 8
67572: NOT
67573: IFFALSE 67577
// exit ;
67575: GO 67848
// tmp := [ ] ;
67577: LD_ADDR_VAR 0 7
67581: PUSH
67582: EMPTY
67583: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67584: LD_ADDR_VAR 0 5
67588: PUSH
67589: DOUBLE
67590: LD_INT 1
67592: DEC
67593: ST_TO_ADDR
67594: LD_VAR 0 8
67598: PUSH
67599: FOR_TO
67600: IFFALSE 67795
// begin _d := rand ( 0 , 5 ) ;
67602: LD_ADDR_VAR 0 11
67606: PUSH
67607: LD_INT 0
67609: PPUSH
67610: LD_INT 5
67612: PPUSH
67613: CALL_OW 12
67617: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67618: LD_ADDR_VAR 0 12
67622: PUSH
67623: LD_INT 2
67625: PPUSH
67626: LD_INT 6
67628: PPUSH
67629: CALL_OW 12
67633: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67634: LD_ADDR_VAR 0 9
67638: PUSH
67639: LD_VAR 0 2
67643: PPUSH
67644: LD_VAR 0 11
67648: PPUSH
67649: LD_VAR 0 12
67653: PPUSH
67654: CALL_OW 272
67658: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67659: LD_ADDR_VAR 0 10
67663: PUSH
67664: LD_VAR 0 3
67668: PPUSH
67669: LD_VAR 0 11
67673: PPUSH
67674: LD_VAR 0 12
67678: PPUSH
67679: CALL_OW 273
67683: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67684: LD_VAR 0 9
67688: PPUSH
67689: LD_VAR 0 10
67693: PPUSH
67694: CALL_OW 488
67698: PUSH
67699: LD_VAR 0 9
67703: PUSH
67704: LD_VAR 0 10
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_VAR 0 7
67717: IN
67718: NOT
67719: AND
67720: PUSH
67721: LD_VAR 0 9
67725: PPUSH
67726: LD_VAR 0 10
67730: PPUSH
67731: CALL_OW 458
67735: NOT
67736: AND
67737: IFFALSE 67779
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67739: LD_ADDR_VAR 0 7
67743: PUSH
67744: LD_VAR 0 7
67748: PPUSH
67749: LD_VAR 0 7
67753: PUSH
67754: LD_INT 1
67756: PLUS
67757: PPUSH
67758: LD_VAR 0 9
67762: PUSH
67763: LD_VAR 0 10
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PPUSH
67772: CALL_OW 1
67776: ST_TO_ADDR
67777: GO 67793
// i := i - 1 ;
67779: LD_ADDR_VAR 0 5
67783: PUSH
67784: LD_VAR 0 5
67788: PUSH
67789: LD_INT 1
67791: MINUS
67792: ST_TO_ADDR
// end ;
67793: GO 67599
67795: POP
67796: POP
// for i in tmp do
67797: LD_ADDR_VAR 0 5
67801: PUSH
67802: LD_VAR 0 7
67806: PUSH
67807: FOR_IN
67808: IFFALSE 67846
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67810: LD_VAR 0 1
67814: PPUSH
67815: LD_VAR 0 5
67819: PUSH
67820: LD_INT 1
67822: ARRAY
67823: PPUSH
67824: LD_VAR 0 5
67828: PUSH
67829: LD_INT 2
67831: ARRAY
67832: PPUSH
67833: CALL 66792 0 3
67837: NOT
67838: IFFALSE 67844
// exit ;
67840: POP
67841: POP
67842: GO 67848
67844: GO 67807
67846: POP
67847: POP
// end ;
67848: LD_VAR 0 4
67852: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67853: LD_INT 0
67855: PPUSH
67856: PPUSH
67857: PPUSH
67858: PPUSH
67859: PPUSH
67860: PPUSH
67861: PPUSH
// if not GetClass ( unit ) = class_sniper then
67862: LD_VAR 0 1
67866: PPUSH
67867: CALL_OW 257
67871: PUSH
67872: LD_INT 5
67874: EQUAL
67875: NOT
67876: IFFALSE 67880
// exit ;
67878: GO 68268
// dist := 8 ;
67880: LD_ADDR_VAR 0 5
67884: PUSH
67885: LD_INT 8
67887: ST_TO_ADDR
// viewRange := 12 ;
67888: LD_ADDR_VAR 0 7
67892: PUSH
67893: LD_INT 12
67895: ST_TO_ADDR
// side := GetSide ( unit ) ;
67896: LD_ADDR_VAR 0 6
67900: PUSH
67901: LD_VAR 0 1
67905: PPUSH
67906: CALL_OW 255
67910: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67911: LD_INT 61
67913: PPUSH
67914: LD_VAR 0 6
67918: PPUSH
67919: CALL_OW 321
67923: PUSH
67924: LD_INT 2
67926: EQUAL
67927: IFFALSE 67937
// viewRange := 16 ;
67929: LD_ADDR_VAR 0 7
67933: PUSH
67934: LD_INT 16
67936: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67937: LD_VAR 0 1
67941: PPUSH
67942: LD_VAR 0 2
67946: PPUSH
67947: LD_VAR 0 3
67951: PPUSH
67952: CALL_OW 297
67956: PUSH
67957: LD_VAR 0 5
67961: GREATER
67962: IFFALSE 68041
// begin ComMoveXY ( unit , x , y ) ;
67964: LD_VAR 0 1
67968: PPUSH
67969: LD_VAR 0 2
67973: PPUSH
67974: LD_VAR 0 3
67978: PPUSH
67979: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67983: LD_INT 35
67985: PPUSH
67986: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67990: LD_VAR 0 1
67994: PPUSH
67995: LD_VAR 0 2
67999: PPUSH
68000: LD_VAR 0 3
68004: PPUSH
68005: CALL 42548 0 3
68009: NOT
68010: IFFALSE 68014
// exit ;
68012: GO 68268
// until GetDistUnitXY ( unit , x , y ) < dist ;
68014: LD_VAR 0 1
68018: PPUSH
68019: LD_VAR 0 2
68023: PPUSH
68024: LD_VAR 0 3
68028: PPUSH
68029: CALL_OW 297
68033: PUSH
68034: LD_VAR 0 5
68038: LESS
68039: IFFALSE 67983
// end ; ComTurnXY ( unit , x , y ) ;
68041: LD_VAR 0 1
68045: PPUSH
68046: LD_VAR 0 2
68050: PPUSH
68051: LD_VAR 0 3
68055: PPUSH
68056: CALL_OW 118
// wait ( 5 ) ;
68060: LD_INT 5
68062: PPUSH
68063: CALL_OW 67
// _d := GetDir ( unit ) ;
68067: LD_ADDR_VAR 0 10
68071: PUSH
68072: LD_VAR 0 1
68076: PPUSH
68077: CALL_OW 254
68081: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
68082: LD_ADDR_VAR 0 8
68086: PUSH
68087: LD_VAR 0 1
68091: PPUSH
68092: CALL_OW 250
68096: PPUSH
68097: LD_VAR 0 10
68101: PPUSH
68102: LD_VAR 0 5
68106: PPUSH
68107: CALL_OW 272
68111: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
68112: LD_ADDR_VAR 0 9
68116: PUSH
68117: LD_VAR 0 1
68121: PPUSH
68122: CALL_OW 251
68126: PPUSH
68127: LD_VAR 0 10
68131: PPUSH
68132: LD_VAR 0 5
68136: PPUSH
68137: CALL_OW 273
68141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68142: LD_VAR 0 8
68146: PPUSH
68147: LD_VAR 0 9
68151: PPUSH
68152: CALL_OW 488
68156: NOT
68157: IFFALSE 68161
// exit ;
68159: GO 68268
// ComAnimCustom ( unit , 1 ) ;
68161: LD_VAR 0 1
68165: PPUSH
68166: LD_INT 1
68168: PPUSH
68169: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68173: LD_VAR 0 8
68177: PPUSH
68178: LD_VAR 0 9
68182: PPUSH
68183: LD_VAR 0 6
68187: PPUSH
68188: LD_VAR 0 7
68192: PPUSH
68193: CALL_OW 330
// repeat wait ( 1 ) ;
68197: LD_INT 1
68199: PPUSH
68200: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
68204: LD_VAR 0 1
68208: PPUSH
68209: CALL_OW 316
68213: PUSH
68214: LD_VAR 0 1
68218: PPUSH
68219: CALL_OW 314
68223: OR
68224: PUSH
68225: LD_VAR 0 1
68229: PPUSH
68230: CALL_OW 302
68234: NOT
68235: OR
68236: PUSH
68237: LD_VAR 0 1
68241: PPUSH
68242: CALL_OW 301
68246: OR
68247: IFFALSE 68197
// RemoveSeeing ( _x , _y , side ) ;
68249: LD_VAR 0 8
68253: PPUSH
68254: LD_VAR 0 9
68258: PPUSH
68259: LD_VAR 0 6
68263: PPUSH
68264: CALL_OW 331
// end ;
68268: LD_VAR 0 4
68272: RET
