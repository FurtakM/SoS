// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3778 0 0
// CreateNature ;
  12: CALL 3649 0 0
// Action ;
  16: CALL 3922 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6439 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6439 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6439 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6439 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6439 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6439 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6439 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6439 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6439 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6439 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6439 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6439 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6439 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6439 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6439 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6439 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 44639 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11459 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14941 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11459 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 43532 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11459 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 44639 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: IFFALSE 3213
3194: PUSH
3195: LD_INT 13
3197: PPUSH
3198: LD_INT 22
3200: PUSH
3201: LD_INT 2
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PPUSH
3208: CALL_OW 70
3212: AND
3213: IFFALSE 3646
3215: GO 3217
3217: DISABLE
3218: LD_INT 0
3220: PPUSH
3221: PPUSH
3222: PPUSH
// begin tmp := [ ] ;
3223: LD_ADDR_VAR 0 3
3227: PUSH
3228: EMPTY
3229: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3230: LD_ADDR_VAR 0 1
3234: PUSH
3235: DOUBLE
3236: LD_INT 1
3238: DEC
3239: ST_TO_ADDR
3240: LD_INT 3
3242: PUSH
3243: LD_INT 4
3245: PUSH
3246: LD_INT 5
3248: PUSH
3249: LD_INT 6
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_OWVAR 67
3262: ARRAY
3263: PUSH
3264: FOR_TO
3265: IFFALSE 3382
// begin uc_side := 3 ;
3267: LD_ADDR_OWVAR 20
3271: PUSH
3272: LD_INT 3
3274: ST_TO_ADDR
// uc_nation := nation_russian ;
3275: LD_ADDR_OWVAR 21
3279: PUSH
3280: LD_INT 3
3282: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3283: LD_INT 0
3285: PPUSH
3286: LD_INT 6
3288: PUSH
3289: LD_INT 7
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: LD_INT 9
3297: PUSH
3298: EMPTY
3299: LIST
3300: LIST
3301: LIST
3302: LIST
3303: PUSH
3304: LD_OWVAR 67
3308: ARRAY
3309: PPUSH
3310: CALL_OW 381
// un := CreateHuman ;
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: CALL_OW 44
3323: ST_TO_ADDR
// if Prob ( 50 ) then
3324: LD_INT 50
3326: PPUSH
3327: CALL_OW 13
3331: IFFALSE 3345
// SetClass ( un , class_bazooker ) ;
3333: LD_VAR 0 2
3337: PPUSH
3338: LD_INT 9
3340: PPUSH
3341: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3345: LD_VAR 0 2
3349: PPUSH
3350: LD_INT 12
3352: PPUSH
3353: LD_INT 0
3355: PPUSH
3356: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3360: LD_ADDR_VAR 0 3
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_VAR 0 2
3374: PPUSH
3375: CALL 44639 0 2
3379: ST_TO_ADDR
// end ;
3380: GO 3264
3382: POP
3383: POP
// for i := 1 to 4 do
3384: LD_ADDR_VAR 0 1
3388: PUSH
3389: DOUBLE
3390: LD_INT 1
3392: DEC
3393: ST_TO_ADDR
3394: LD_INT 4
3396: PUSH
3397: FOR_TO
3398: IFFALSE 3568
// begin uc_side := 3 ;
3400: LD_ADDR_OWVAR 20
3404: PUSH
3405: LD_INT 3
3407: ST_TO_ADDR
// uc_nation := nation_russian ;
3408: LD_ADDR_OWVAR 21
3412: PUSH
3413: LD_INT 3
3415: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3416: LD_INT 0
3418: PPUSH
3419: LD_INT 6
3421: PUSH
3422: LD_INT 7
3424: PUSH
3425: LD_INT 8
3427: PUSH
3428: LD_INT 9
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_OWVAR 67
3441: ARRAY
3442: PPUSH
3443: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3447: LD_INT 22
3449: PPUSH
3450: LD_INT 3
3452: PPUSH
3453: LD_INT 1
3455: PPUSH
3456: LD_INT 43
3458: PUSH
3459: LD_INT 44
3461: PUSH
3462: LD_INT 44
3464: PUSH
3465: LD_INT 45
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: LIST
3472: LIST
3473: PUSH
3474: LD_VAR 0 1
3478: PUSH
3479: LD_INT 4
3481: MOD
3482: PUSH
3483: LD_INT 1
3485: PLUS
3486: ARRAY
3487: PPUSH
3488: LD_INT 100
3490: PPUSH
3491: CALL 11459 0 5
// un := CreateVehicle ;
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: CALL_OW 45
3504: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3505: LD_VAR 0 2
3509: PPUSH
3510: LD_INT 4
3512: PPUSH
3513: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3517: LD_VAR 0 2
3521: PPUSH
3522: LD_INT 3
3524: PPUSH
3525: LD_INT 0
3527: PPUSH
3528: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3532: CALL_OW 44
3536: PPUSH
3537: LD_VAR 0 2
3541: PPUSH
3542: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3546: LD_ADDR_VAR 0 3
3550: PUSH
3551: LD_VAR 0 3
3555: PPUSH
3556: LD_VAR 0 2
3560: PPUSH
3561: CALL 44639 0 2
3565: ST_TO_ADDR
// end ;
3566: GO 3397
3568: POP
3569: POP
// repeat wait ( 0 0$1 ) ;
3570: LD_INT 35
3572: PPUSH
3573: CALL_OW 67
// for i in tmp do
3577: LD_ADDR_VAR 0 1
3581: PUSH
3582: LD_VAR 0 3
3586: PUSH
3587: FOR_IN
3588: IFFALSE 3626
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3590: LD_VAR 0 1
3594: PPUSH
3595: LD_INT 22
3597: PUSH
3598: LD_INT 2
3600: PUSH
3601: EMPTY
3602: LIST
3603: LIST
3604: PPUSH
3605: CALL_OW 69
3609: PPUSH
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 74
3619: PPUSH
3620: CALL_OW 115
3624: GO 3587
3626: POP
3627: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3628: LD_VAR 0 3
3632: PPUSH
3633: LD_INT 50
3635: PUSH
3636: EMPTY
3637: LIST
3638: PPUSH
3639: CALL_OW 72
3643: NOT
3644: IFFALSE 3570
// end ; end_of_file
3646: PPOPN 3
3648: END
// export function CreateNature ; var i ; begin
3649: LD_INT 0
3651: PPUSH
3652: PPUSH
// PrepareTiger ( 0 ) ;
3653: LD_INT 0
3655: PPUSH
3656: CALL 40917 0 1
// for i := 1 to 2 do
3660: LD_ADDR_VAR 0 2
3664: PUSH
3665: DOUBLE
3666: LD_INT 1
3668: DEC
3669: ST_TO_ADDR
3670: LD_INT 2
3672: PUSH
3673: FOR_TO
3674: IFFALSE 3693
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3676: CALL_OW 44
3680: PPUSH
3681: LD_INT 4
3683: PPUSH
3684: LD_INT 0
3686: PPUSH
3687: CALL_OW 49
3691: GO 3673
3693: POP
3694: POP
// PrepareBird ;
3695: CALL 41146 0 0
// for i := 1 to 3 do
3699: LD_ADDR_VAR 0 2
3703: PUSH
3704: DOUBLE
3705: LD_INT 1
3707: DEC
3708: ST_TO_ADDR
3709: LD_INT 3
3711: PUSH
3712: FOR_TO
3713: IFFALSE 3732
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3715: CALL_OW 44
3719: PPUSH
3720: LD_INT 4
3722: PPUSH
3723: LD_INT 0
3725: PPUSH
3726: CALL_OW 49
3730: GO 3712
3732: POP
3733: POP
// PrepareFrog ;
3734: CALL 41042 0 0
// for i := 1 to 3 do
3738: LD_ADDR_VAR 0 2
3742: PUSH
3743: DOUBLE
3744: LD_INT 1
3746: DEC
3747: ST_TO_ADDR
3748: LD_INT 3
3750: PUSH
3751: FOR_TO
3752: IFFALSE 3771
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3754: CALL_OW 44
3758: PPUSH
3759: LD_INT 5
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 49
3769: GO 3751
3771: POP
3772: POP
// end ;
3773: LD_VAR 0 1
3777: RET
// export function LoadTech ; var i , tmp ; begin
3778: LD_INT 0
3780: PPUSH
3781: PPUSH
3782: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3783: LD_ADDR_VAR 0 3
3787: PUSH
3788: LD_STRING 09_tech
3790: PPUSH
3791: EMPTY
3792: PPUSH
3793: CALL_OW 30
3797: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_VAR 0 3
3812: PPUSH
3813: CALL 8663 0 1
3817: PUSH
3818: FOR_TO
3819: IFFALSE 3846
// SetTech ( i , 2 , tmp [ i ] ) ;
3821: LD_VAR 0 2
3825: PPUSH
3826: LD_INT 2
3828: PPUSH
3829: LD_VAR 0 3
3833: PUSH
3834: LD_VAR 0 2
3838: ARRAY
3839: PPUSH
3840: CALL_OW 322
3844: GO 3818
3846: POP
3847: POP
// end ; end_of_file
3848: LD_VAR 0 1
3852: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3853: LD_ADDR_EXP 8
3857: PUSH
3858: LD_INT 1
3860: ST_TO_ADDR
// end ;
3861: PPOPN 1
3863: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3864: LD_VAR 0 1
3868: PUSH
3869: LD_EXP 21
3873: EQUAL
3874: IFFALSE 3883
// YouLost ( Schulz ) ;
3876: LD_STRING Schulz
3878: PPUSH
3879: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3883: LD_VAR 0 1
3887: PUSH
3888: LD_EXP 10
3892: EQUAL
3893: IFFALSE 3910
3895: PUSH
3896: LD_VAR 0 1
3900: PPUSH
3901: CALL_OW 255
3905: PUSH
3906: LD_INT 2
3908: EQUAL
3909: AND
3910: IFFALSE 3919
// YouLost ( Heike ) ;
3912: LD_STRING Heike
3914: PPUSH
3915: CALL_OW 104
// end ; end_of_file
3919: PPOPN 1
3921: END
// export function Action ; var p , i , tmp ; begin
3922: LD_INT 0
3924: PPUSH
3925: PPUSH
3926: PPUSH
3927: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3928: LD_INT 12
3930: PPUSH
3931: LD_INT 12
3933: PPUSH
3934: LD_INT 2
3936: PPUSH
3937: LD_INT 10
3939: PPUSH
3940: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3944: LD_INT 12
3946: PPUSH
3947: LD_INT 12
3949: PPUSH
3950: LD_INT 2
3952: PPUSH
3953: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3957: LD_INT 12
3959: PPUSH
3960: LD_INT 12
3962: PPUSH
3963: CALL_OW 86
// InGameOn ;
3967: CALL_OW 8
// PrepareArabian ;
3971: CALL 133 0 0
// InGameOff ;
3975: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3979: LD_STRING M4
3981: PPUSH
3982: CALL_OW 337
// SaveForQuickRestart ;
3986: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3990: LD_INT 35
3992: PPUSH
3993: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3997: LD_INT 9
3999: PPUSH
4000: LD_INT 22
4002: PUSH
4003: LD_INT 2
4005: PUSH
4006: EMPTY
4007: LIST
4008: LIST
4009: PPUSH
4010: CALL_OW 70
4014: IFFALSE 3990
// PrepareHeikeCamp ;
4016: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4020: LD_INT 70
4022: PPUSH
4023: CALL_OW 67
// if heikeIsDead then
4027: LD_EXP 7
4031: IFFALSE 4371
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4033: LD_INT 116
4035: PPUSH
4036: LD_INT 58
4038: PPUSH
4039: LD_INT 2
4041: PPUSH
4042: LD_INT 26
4044: NEG
4045: PPUSH
4046: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4050: LD_INT 116
4052: PPUSH
4053: LD_INT 58
4055: PPUSH
4056: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4060: LD_EXP 21
4064: PPUSH
4065: LD_STRING DL-Obj-a-1
4067: PPUSH
4068: CALL_OW 88
// InGameOn ;
4072: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4076: LD_INT 116
4078: PPUSH
4079: LD_INT 58
4081: PPUSH
4082: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PPUSH
4096: CALL_OW 69
4100: PUSH
4101: LD_EXP 21
4105: PUSH
4106: LD_EXP 25
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: DIFF
4115: PPUSH
4116: LD_INT 96
4118: PPUSH
4119: LD_INT 65
4121: PPUSH
4122: CALL_OW 111
// if IsInUnit ( Schulz ) then
4126: LD_EXP 21
4130: PPUSH
4131: CALL_OW 310
4135: IFFALSE 4159
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4137: LD_EXP 21
4141: PPUSH
4142: CALL_OW 310
4146: PPUSH
4147: LD_INT 115
4149: PPUSH
4150: LD_INT 61
4152: PPUSH
4153: CALL_OW 111
4157: GO 4174
// ComMoveXY ( Schulz , 115 , 61 ) ;
4159: LD_EXP 21
4163: PPUSH
4164: LD_INT 115
4166: PPUSH
4167: LD_INT 61
4169: PPUSH
4170: CALL_OW 111
// if IsInUnit ( Nia ) then
4174: LD_EXP 25
4178: PPUSH
4179: CALL_OW 310
4183: IFFALSE 4207
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4185: LD_EXP 25
4189: PPUSH
4190: CALL_OW 310
4194: PPUSH
4195: LD_INT 115
4197: PPUSH
4198: LD_INT 61
4200: PPUSH
4201: CALL_OW 111
4205: GO 4222
// ComMoveXY ( Nia , 115 , 61 ) ;
4207: LD_EXP 25
4211: PPUSH
4212: LD_INT 115
4214: PPUSH
4215: LD_INT 61
4217: PPUSH
4218: CALL_OW 111
// p := 0 ;
4222: LD_ADDR_VAR 0 2
4226: PUSH
4227: LD_INT 0
4229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4230: LD_INT 35
4232: PPUSH
4233: CALL_OW 67
// p := Inc ( p ) ;
4237: LD_ADDR_VAR 0 2
4241: PUSH
4242: LD_VAR 0 2
4246: PPUSH
4247: CALL 46012 0 1
4251: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4252: LD_INT 115
4254: PPUSH
4255: LD_INT 61
4257: PPUSH
4258: CALL_OW 428
4262: IFTRUE 4274
4264: PUSH
4265: LD_VAR 0 2
4269: PUSH
4270: LD_INT 20
4272: GREATER
4273: OR
4274: IFFALSE 4230
// if Givi and IsOk ( Nia ) then
4276: LD_EXP 11
4280: IFFALSE 4293
4282: PUSH
4283: LD_EXP 25
4287: PPUSH
4288: CALL_OW 302
4292: AND
4293: IFFALSE 4343
// begin Say ( Nia , DN-Obj-a-2 ) ;
4295: LD_EXP 25
4299: PPUSH
4300: LD_STRING DN-Obj-a-2
4302: PPUSH
4303: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4307: LD_EXP 21
4311: PPUSH
4312: LD_STRING DL-Obj-a-3
4314: PPUSH
4315: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4319: LD_EXP 25
4323: PPUSH
4324: LD_STRING DN-Obj-a-4
4326: PPUSH
4327: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4331: LD_EXP 21
4335: PPUSH
4336: LD_STRING DL-Obj-a-5
4338: PPUSH
4339: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4343: LD_INT 35
4345: PPUSH
4346: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4350: LD_EXP 21
4354: PPUSH
4355: LD_STRING DL-Fail-1
4357: PPUSH
4358: CALL_OW 88
// YouLost ( Fail ) ;
4362: LD_STRING Fail
4364: PPUSH
4365: CALL_OW 104
// exit ;
4369: GO 5390
// end ; PrepareRussianBaseAttackers ;
4371: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4375: LD_INT 35
4377: PPUSH
4378: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4382: LD_INT 116
4384: PPUSH
4385: LD_INT 58
4387: PPUSH
4388: LD_INT 2
4390: PPUSH
4391: LD_INT 26
4393: NEG
4394: PPUSH
4395: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4399: LD_INT 116
4401: PPUSH
4402: LD_INT 58
4404: PPUSH
4405: LD_INT 2
4407: PPUSH
4408: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4412: LD_INT 116
4414: PPUSH
4415: LD_INT 58
4417: PPUSH
4418: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4422: LD_INT 5
4424: PPUSH
4425: LD_INT 2
4427: PPUSH
4428: CALL_OW 343
// DialogueOn ;
4432: CALL_OW 6
// Say ( Schulz , DL-Obj-1 ) ;
4436: LD_EXP 21
4440: PPUSH
4441: LD_STRING DL-Obj-1
4443: PPUSH
4444: CALL_OW 88
// DialogueOff ;
4448: CALL_OW 7
// PrepareBasim ;
4452: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4456: LD_INT 10
4458: PPUSH
4459: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4463: LD_INT 8
4465: PPUSH
4466: LD_INT 2
4468: PPUSH
4469: CALL_OW 343
// repeat wait ( 0 0$0.3 ) ;
4473: LD_INT 10
4475: PPUSH
4476: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 12 ] ] ) ;
4480: LD_INT 22
4482: PUSH
4483: LD_INT 2
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 92
4492: PUSH
4493: LD_INT 117
4495: PUSH
4496: LD_INT 58
4498: PUSH
4499: LD_INT 12
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 69
4516: IFFALSE 4473
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4518: LD_ADDR_VAR 0 3
4522: PUSH
4523: LD_INT 22
4525: PUSH
4526: LD_INT 5
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PPUSH
4533: CALL_OW 69
4537: PUSH
4538: FOR_IN
4539: IFFALSE 4555
// SetSide ( i , 2 ) ;
4541: LD_VAR 0 3
4545: PPUSH
4546: LD_INT 2
4548: PPUSH
4549: CALL_OW 235
4553: GO 4538
4555: POP
4556: POP
// repeat wait ( 0 0$1 ) ;
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4564: LD_ADDR_VAR 0 4
4568: PUSH
4569: LD_INT 50
4571: PUSH
4572: EMPTY
4573: LIST
4574: PUSH
4575: LD_INT 25
4577: PUSH
4578: LD_INT 17
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PPUSH
4589: CALL_OW 69
4593: ST_TO_ADDR
// for i in tmp do
4594: LD_ADDR_VAR 0 3
4598: PUSH
4599: LD_VAR 0 4
4603: PUSH
4604: FOR_IN
4605: IFFALSE 4643
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 22
4614: PUSH
4615: LD_INT 3
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: PPUSH
4622: CALL_OW 69
4626: PPUSH
4627: LD_VAR 0 3
4631: PPUSH
4632: CALL_OW 74
4636: PPUSH
4637: CALL_OW 115
4641: GO 4604
4643: POP
4644: POP
// until See ( 2 , Basim ) and kamikazed ;
4645: LD_INT 2
4647: PPUSH
4648: LD_EXP 22
4652: PPUSH
4653: CALL_OW 292
4657: IFFALSE 4665
4659: PUSH
4660: LD_EXP 8
4664: AND
4665: IFFALSE 4557
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4667: LD_ADDR_VAR 0 4
4671: PUSH
4672: LD_INT 50
4674: PUSH
4675: EMPTY
4676: LIST
4677: PUSH
4678: LD_INT 25
4680: PUSH
4681: LD_INT 17
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PPUSH
4692: CALL_OW 69
4696: ST_TO_ADDR
// if tmp then
4697: LD_VAR 0 4
4701: IFFALSE 4729
// for i in tmp do
4703: LD_ADDR_VAR 0 3
4707: PUSH
4708: LD_VAR 0 4
4712: PUSH
4713: FOR_IN
4714: IFFALSE 4727
// KillUnit ( i ) ;
4716: LD_VAR 0 3
4720: PPUSH
4721: CALL_OW 66
4725: GO 4713
4727: POP
4728: POP
// Say ( Basim , DBs-Obj-2 ) ;
4729: LD_EXP 22
4733: PPUSH
4734: LD_STRING DBs-Obj-2
4736: PPUSH
4737: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4741: LD_INT 35
4743: PPUSH
4744: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4748: LD_INT 22
4750: PUSH
4751: LD_INT 3
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: LD_INT 50
4760: PUSH
4761: EMPTY
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: PPUSH
4768: CALL_OW 69
4772: NOT
4773: IFFALSE 4741
// ComExit ( Heike ) ;
4775: LD_EXP 10
4779: PPUSH
4780: CALL 45037 0 1
// DialogueOn ;
4784: CALL_OW 6
// if IsOk ( Kaia ) then
4788: LD_EXP 15
4792: PPUSH
4793: CALL_OW 302
4797: IFFALSE 4940
// begin CenterNowOnUnits ( Kaia ) ;
4799: LD_EXP 15
4803: PPUSH
4804: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4808: LD_EXP 15
4812: PPUSH
4813: LD_STRING DK-Obj-3
4815: PPUSH
4816: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4820: LD_EXP 11
4824: PPUSH
4825: LD_STRING DG-Obj-4
4827: PPUSH
4828: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4832: LD_EXP 15
4836: PPUSH
4837: LD_STRING DK-Obj-5
4839: PPUSH
4840: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4844: LD_EXP 15
4848: PPUSH
4849: LD_STRING DK-Obj-6
4851: PPUSH
4852: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4856: LD_EXP 15
4860: PPUSH
4861: LD_STRING DK-Obj-7
4863: PPUSH
4864: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4868: LD_EXP 15
4872: PPUSH
4873: LD_STRING DK-Obj-8
4875: PPUSH
4876: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4880: LD_EXP 21
4884: PPUSH
4885: LD_STRING DL-Obj-9
4887: PPUSH
4888: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4892: LD_EXP 21
4896: PPUSH
4897: LD_STRING DL-Obj-10
4899: PPUSH
4900: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4904: LD_EXP 21
4908: PPUSH
4909: LD_STRING DL-Obj-11
4911: PPUSH
4912: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4916: LD_EXP 21
4920: PPUSH
4921: LD_STRING DL-Obj-12
4923: PPUSH
4924: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4928: LD_EXP 21
4932: PPUSH
4933: LD_STRING DL-Obj-13
4935: PPUSH
4936: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4940: LD_EXP 19
4944: PPUSH
4945: CALL_OW 302
4949: IFFALSE 4987
// begin Say ( Kurt , DKs-Obj-14 ) ;
4951: LD_EXP 19
4955: PPUSH
4956: LD_STRING DKs-Obj-14
4958: PPUSH
4959: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4963: LD_EXP 19
4967: PPUSH
4968: LD_STRING DKs-Obj-15
4970: PPUSH
4971: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4975: LD_EXP 11
4979: PPUSH
4980: LD_STRING DG-Obj-16
4982: PPUSH
4983: CALL_OW 88
// end ; DialogueOff ;
4987: CALL_OW 7
// SetSide ( Basim , 2 ) ;
4991: LD_EXP 22
4995: PPUSH
4996: LD_INT 2
4998: PPUSH
4999: CALL_OW 235
// wait ( 0 0$3 ) ;
5003: LD_INT 105
5005: PPUSH
5006: CALL_OW 67
// ComExit ( Givi ) ;
5010: LD_EXP 11
5014: PPUSH
5015: CALL 45037 0 1
// ComExit ( Nia ) ;
5019: LD_EXP 25
5023: PPUSH
5024: CALL 45037 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5028: LD_EXP 25
5032: PPUSH
5033: LD_EXP 11
5037: PPUSH
5038: CALL_OW 172
// wait ( 0 0$1 ) ;
5042: LD_INT 35
5044: PPUSH
5045: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5049: LD_EXP 11
5053: PPUSH
5054: CALL_OW 302
5058: IFFALSE 5071
5060: PUSH
5061: LD_EXP 25
5065: PPUSH
5066: CALL_OW 302
5070: AND
5071: IFFALSE 5345
// begin DialogueOn ;
5073: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5077: LD_EXP 11
5081: PPUSH
5082: LD_STRING DG-Nia-1
5084: PPUSH
5085: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5089: LD_EXP 10
5093: PPUSH
5094: LD_STRING DH-Nia-2
5096: PPUSH
5097: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5101: LD_EXP 11
5105: PPUSH
5106: LD_STRING DG-Nia-3
5108: PPUSH
5109: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5113: LD_EXP 25
5117: PPUSH
5118: LD_STRING DN-Nia-4
5120: PPUSH
5121: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5125: LD_EXP 10
5129: PPUSH
5130: LD_STRING DH-Nia-5
5132: PPUSH
5133: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5137: LD_EXP 11
5141: PPUSH
5142: LD_STRING DG-Nia-6
5144: PPUSH
5145: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5149: LD_EXP 25
5153: PPUSH
5154: LD_STRING DN-Nia-7
5156: PPUSH
5157: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5161: LD_EXP 25
5165: PPUSH
5166: LD_STRING DN-Nia-8
5168: PPUSH
5169: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5173: LD_EXP 25
5177: PPUSH
5178: LD_STRING DN-Nia-9
5180: PPUSH
5181: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5185: LD_EXP 25
5189: PPUSH
5190: LD_STRING DN-Nia-10
5192: PPUSH
5193: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5197: LD_EXP 11
5201: PPUSH
5202: LD_STRING DG-Nia-11
5204: PPUSH
5205: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5209: LD_EXP 25
5213: PPUSH
5214: LD_STRING DN-Nia-12
5216: PPUSH
5217: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5221: LD_EXP 10
5225: PPUSH
5226: LD_STRING DH-Nia-13
5228: PPUSH
5229: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5233: LD_EXP 25
5237: PPUSH
5238: LD_STRING DN-Nia-14
5240: PPUSH
5241: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5245: LD_EXP 10
5249: PPUSH
5250: LD_STRING DH-Nia-15
5252: PPUSH
5253: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5257: LD_EXP 21
5261: PPUSH
5262: LD_STRING DL-Nia-16
5264: PPUSH
5265: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5269: LD_EXP 10
5273: PPUSH
5274: LD_STRING DH-Nia-17
5276: PPUSH
5277: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5281: LD_EXP 10
5285: PPUSH
5286: LD_STRING DH-Nia-18
5288: PPUSH
5289: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5293: LD_EXP 13
5297: PPUSH
5298: LD_STRING DI-Nia-19
5300: PPUSH
5301: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5305: LD_EXP 21
5309: PPUSH
5310: LD_STRING DL-Nia-20
5312: PPUSH
5313: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5317: LD_EXP 21
5321: PPUSH
5322: LD_STRING DL-Nia-21
5324: PPUSH
5325: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5329: LD_EXP 21
5333: PPUSH
5334: LD_STRING DL-Nia-22
5336: PPUSH
5337: CALL_OW 88
// DialogueOff ;
5341: CALL_OW 7
// end ; DialogueOn ;
5345: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5349: LD_EXP 21
5353: PPUSH
5354: LD_STRING DL-Retreat-1
5356: PPUSH
5357: CALL_OW 88
// DialogueOff ;
5361: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5365: LD_STRING M5
5367: PPUSH
5368: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5372: LD_INT 13
5374: PPUSH
5375: LD_INT 1
5377: PPUSH
5378: CALL_OW 424
// startRussianAttacks := true ;
5382: LD_ADDR_EXP 9
5386: PUSH
5387: LD_INT 1
5389: ST_TO_ADDR
// end ;
5390: LD_VAR 0 1
5394: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5395: LD_EXP 9
5399: IFFALSE 5442
5401: PUSH
5402: LD_INT 13
5404: PPUSH
5405: LD_INT 22
5407: PUSH
5408: LD_INT 2
5410: PUSH
5411: EMPTY
5412: LIST
5413: LIST
5414: PUSH
5415: LD_INT 50
5417: PUSH
5418: EMPTY
5419: LIST
5420: PUSH
5421: LD_INT 21
5423: PUSH
5424: LD_INT 1
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: LIST
5435: PPUSH
5436: CALL_OW 71
5440: NOT
5441: AND
5442: IFFALSE 5451
5444: GO 5446
5446: DISABLE
// EndMission ;
5447: CALL 5452 0 0
5451: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5452: LD_INT 0
5454: PPUSH
5455: PPUSH
5456: PPUSH
5457: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5458: LD_ADDR_VAR 0 3
5462: PUSH
5463: LD_INT 13
5465: PPUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 2
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 21
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: PPUSH
5490: CALL_OW 70
5494: ST_TO_ADDR
// saveVehicles := [ ] ;
5495: LD_ADDR_VAR 0 4
5499: PUSH
5500: EMPTY
5501: ST_TO_ADDR
// for i in tmp do
5502: LD_ADDR_VAR 0 2
5506: PUSH
5507: LD_VAR 0 3
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5622
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5515: LD_ADDR_VAR 0 4
5519: PUSH
5520: LD_VAR 0 4
5524: PPUSH
5525: LD_VAR 0 2
5529: PPUSH
5530: CALL_OW 265
5534: PUSH
5535: LD_VAR 0 2
5539: PPUSH
5540: CALL_OW 262
5544: PUSH
5545: LD_VAR 0 2
5549: PPUSH
5550: CALL_OW 263
5554: PUSH
5555: LD_VAR 0 2
5559: PPUSH
5560: CALL_OW 264
5564: PUSH
5565: LD_VAR 0 2
5569: PPUSH
5570: CALL_OW 248
5574: PUSH
5575: LD_VAR 0 2
5579: PPUSH
5580: CALL_OW 261
5584: PUSH
5585: LD_VAR 0 2
5589: PPUSH
5590: CALL_OW 271
5594: PUSH
5595: LD_VAR 0 2
5599: PPUSH
5600: CALL_OW 311
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: PPUSH
5615: CALL 44639 0 2
5619: ST_TO_ADDR
5620: GO 5512
5622: POP
5623: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5624: LD_EXP 21
5628: PPUSH
5629: LD_STRING 09c_Schulz
5631: PPUSH
5632: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5636: LD_EXP 21
5640: PPUSH
5641: LD_STRING 09c_Schulz_ID
5643: PPUSH
5644: CALL_OW 39
// if IsOk ( Lemmy ) then
5648: LD_EXP 23
5652: PPUSH
5653: CALL_OW 302
5657: IFFALSE 5683
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5659: LD_EXP 23
5663: PPUSH
5664: LD_STRING 09c_Lemmy
5666: PPUSH
5667: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5671: LD_EXP 23
5675: PPUSH
5676: LD_STRING 09c_Lemmy_ID
5678: PPUSH
5679: CALL_OW 39
// end ; if IsOk ( Nia ) then
5683: LD_EXP 25
5687: PPUSH
5688: CALL_OW 302
5692: IFFALSE 5718
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5694: LD_EXP 25
5698: PPUSH
5699: LD_STRING 09c_Nia
5701: PPUSH
5702: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5706: LD_EXP 25
5710: PPUSH
5711: LD_STRING 09c_Nia_ID
5713: PPUSH
5714: CALL_OW 39
// end ; if IsOk ( Mia ) then
5718: LD_EXP 24
5722: PPUSH
5723: CALL_OW 302
5727: IFFALSE 5753
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5729: LD_EXP 24
5733: PPUSH
5734: LD_STRING 09c_Mia
5736: PPUSH
5737: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5741: LD_EXP 24
5745: PPUSH
5746: LD_STRING 09c_Mia_ID
5748: PPUSH
5749: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5753: LD_EXP 26
5757: PPUSH
5758: CALL_OW 302
5762: IFFALSE 5788
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5764: LD_EXP 26
5768: PPUSH
5769: LD_STRING 09c_Jenna
5771: PPUSH
5772: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5776: LD_EXP 26
5780: PPUSH
5781: LD_STRING 09c_Jenna_ID
5783: PPUSH
5784: CALL_OW 39
// end ; if IsOk ( Basim ) then
5788: LD_EXP 22
5792: PPUSH
5793: CALL_OW 302
5797: IFFALSE 5823
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5799: LD_EXP 22
5803: PPUSH
5804: LD_STRING 09c_Basim
5806: PPUSH
5807: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5811: LD_EXP 22
5815: PPUSH
5816: LD_STRING 09c_Basim_ID
5818: PPUSH
5819: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5823: LD_EXP 10
5827: PPUSH
5828: LD_STRING 09c_Heike
5830: PPUSH
5831: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5835: LD_EXP 10
5839: PPUSH
5840: LD_STRING 09c_Heike_ID
5842: PPUSH
5843: CALL_OW 39
// if IsOk ( Givi ) then
5847: LD_EXP 11
5851: PPUSH
5852: CALL_OW 302
5856: IFFALSE 5882
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5858: LD_EXP 11
5862: PPUSH
5863: LD_STRING 09c_Givi
5865: PPUSH
5866: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5870: LD_EXP 11
5874: PPUSH
5875: LD_STRING 09c_Givi_ID
5877: PPUSH
5878: CALL_OW 39
// end ; if IsOk ( Mike ) then
5882: LD_EXP 12
5886: PPUSH
5887: CALL_OW 302
5891: IFFALSE 5917
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5893: LD_EXP 12
5897: PPUSH
5898: LD_STRING 09c_Mike
5900: PPUSH
5901: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5905: LD_EXP 12
5909: PPUSH
5910: LD_STRING 09c_Mike_ID
5912: PPUSH
5913: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5917: LD_EXP 13
5921: PPUSH
5922: CALL_OW 302
5926: IFFALSE 5952
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5928: LD_EXP 13
5932: PPUSH
5933: LD_STRING 09c_Ibrahim
5935: PPUSH
5936: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5940: LD_EXP 13
5944: PPUSH
5945: LD_STRING 09c_Ibrahim_ID
5947: PPUSH
5948: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5952: LD_EXP 14
5956: PPUSH
5957: CALL_OW 302
5961: IFFALSE 5987
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5963: LD_EXP 14
5967: PPUSH
5968: LD_STRING 09c_Kamil
5970: PPUSH
5971: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5975: LD_EXP 14
5979: PPUSH
5980: LD_STRING 09c_Kamil_ID
5982: PPUSH
5983: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5987: LD_EXP 15
5991: PPUSH
5992: CALL_OW 302
5996: IFFALSE 6022
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5998: LD_EXP 15
6002: PPUSH
6003: LD_STRING 09c_Kaia
6005: PPUSH
6006: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
6010: LD_EXP 15
6014: PPUSH
6015: LD_STRING 09c_Kaia_ID
6017: PPUSH
6018: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6022: LD_EXP 16
6026: PPUSH
6027: CALL_OW 302
6031: IFFALSE 6057
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6033: LD_EXP 16
6037: PPUSH
6038: LD_STRING 09c_Sophia
6040: PPUSH
6041: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6045: LD_EXP 16
6049: PPUSH
6050: LD_STRING 09c_Sophia_ID
6052: PPUSH
6053: CALL_OW 39
// end ; if IsOk ( Markov ) then
6057: LD_EXP 17
6061: PPUSH
6062: CALL_OW 302
6066: IFFALSE 6092
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6068: LD_EXP 17
6072: PPUSH
6073: LD_STRING 09c_Markov
6075: PPUSH
6076: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6080: LD_EXP 17
6084: PPUSH
6085: LD_STRING 09c_Markov_ID
6087: PPUSH
6088: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6092: LD_EXP 18
6096: PPUSH
6097: CALL_OW 302
6101: IFFALSE 6127
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6103: LD_EXP 18
6107: PPUSH
6108: LD_STRING 09c_Olaf
6110: PPUSH
6111: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6115: LD_EXP 18
6119: PPUSH
6120: LD_STRING 09c_Olaf_ID
6122: PPUSH
6123: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6127: LD_EXP 19
6131: PPUSH
6132: CALL_OW 302
6136: IFFALSE 6162
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6138: LD_EXP 19
6142: PPUSH
6143: LD_STRING 09c_Kurt
6145: PPUSH
6146: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6150: LD_EXP 19
6154: PPUSH
6155: LD_STRING 09c_Kurt_ID
6157: PPUSH
6158: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6162: LD_EXP 20
6166: PPUSH
6167: CALL_OW 302
6171: IFFALSE 6197
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6173: LD_EXP 20
6177: PPUSH
6178: LD_STRING 09c_Aviradze
6180: PPUSH
6181: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6185: LD_EXP 20
6189: PPUSH
6190: LD_STRING 09c_Aviradze_ID
6192: PPUSH
6193: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6197: LD_EXP 28
6201: PPUSH
6202: LD_INT 50
6204: PUSH
6205: EMPTY
6206: LIST
6207: PPUSH
6208: CALL_OW 72
6212: PPUSH
6213: LD_STRING 09c_schulzSecondSquad
6215: PPUSH
6216: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6220: LD_EXP 27
6224: PPUSH
6225: LD_INT 50
6227: PUSH
6228: EMPTY
6229: LIST
6230: PPUSH
6231: CALL_OW 72
6235: PPUSH
6236: LD_STRING 09c_heikeSecondSquad
6238: PPUSH
6239: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: DOUBLE
6249: LD_INT 1
6251: DEC
6252: ST_TO_ADDR
6253: LD_EXP 28
6257: PPUSH
6258: LD_INT 50
6260: PUSH
6261: EMPTY
6262: LIST
6263: PPUSH
6264: CALL_OW 72
6268: PUSH
6269: FOR_TO
6270: IFFALSE 6298
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6272: LD_EXP 28
6276: PUSH
6277: LD_VAR 0 2
6281: ARRAY
6282: PPUSH
6283: LD_STRING 09c_random_ID_
6285: PUSH
6286: LD_VAR 0 2
6290: STR
6291: PPUSH
6292: CALL_OW 39
6296: GO 6269
6298: POP
6299: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6300: LD_ADDR_VAR 0 2
6304: PUSH
6305: DOUBLE
6306: LD_INT 1
6308: DEC
6309: ST_TO_ADDR
6310: LD_EXP 27
6314: PPUSH
6315: LD_INT 50
6317: PUSH
6318: EMPTY
6319: LIST
6320: PPUSH
6321: CALL_OW 72
6325: PUSH
6326: FOR_TO
6327: IFFALSE 6355
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6329: LD_EXP 27
6333: PUSH
6334: LD_VAR 0 2
6338: ARRAY
6339: PPUSH
6340: LD_STRING 09c_hrandom_ID_
6342: PUSH
6343: LD_VAR 0 2
6347: STR
6348: PPUSH
6349: CALL_OW 39
6353: GO 6326
6355: POP
6356: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6357: LD_VAR 0 4
6361: PPUSH
6362: LD_STRING 09c_vehicles
6364: PPUSH
6365: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6369: LD_OWVAR 1
6373: PPUSH
6374: LD_STRING 09c_tick
6376: PPUSH
6377: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6381: LD_INT 22
6383: PUSH
6384: LD_INT 2
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PUSH
6391: LD_INT 23
6393: PUSH
6394: LD_INT 0
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: EMPTY
6402: LIST
6403: LIST
6404: PPUSH
6405: CALL_OW 69
6409: PPUSH
6410: LD_STRING 09c_apes
6412: PPUSH
6413: CALL_OW 38
// wait ( 3 ) ;
6417: LD_INT 3
6419: PPUSH
6420: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6424: LD_INT 1
6426: PPUSH
6427: LD_STRING __x1/09_cont3
6429: PPUSH
6430: CALL_OW 340
// end ; end_of_file
6434: LD_VAR 0 1
6438: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
// if exist_mode then
6443: LD_VAR 0 2
6447: IFFALSE 6493
// begin unit := CreateCharacter ( prefix & ident ) ;
6449: LD_ADDR_VAR 0 5
6453: PUSH
6454: LD_VAR 0 3
6458: PUSH
6459: LD_VAR 0 1
6463: STR
6464: PPUSH
6465: CALL_OW 34
6469: ST_TO_ADDR
// if unit then
6470: LD_VAR 0 5
6474: IFFALSE 6491
// DeleteCharacters ( prefix & ident ) ;
6476: LD_VAR 0 3
6480: PUSH
6481: LD_VAR 0 1
6485: STR
6486: PPUSH
6487: CALL_OW 40
// end else
6491: GO 6508
// unit := NewCharacter ( ident ) ;
6493: LD_ADDR_VAR 0 5
6497: PUSH
6498: LD_VAR 0 1
6502: PPUSH
6503: CALL_OW 25
6507: ST_TO_ADDR
// result := unit ;
6508: LD_ADDR_VAR 0 4
6512: PUSH
6513: LD_VAR 0 5
6517: ST_TO_ADDR
// end ;
6518: LD_VAR 0 4
6522: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
6523: LD_INT 0
6525: PPUSH
6526: PPUSH
// if exist_mode then
6527: LD_VAR 0 2
6531: IFFALSE 6556
// unit := CreateCharacter ( prefix & ident ) else
6533: LD_ADDR_VAR 0 5
6537: PUSH
6538: LD_VAR 0 3
6542: PUSH
6543: LD_VAR 0 1
6547: STR
6548: PPUSH
6549: CALL_OW 34
6553: ST_TO_ADDR
6554: GO 6571
// unit := NewCharacter ( ident ) ;
6556: LD_ADDR_VAR 0 5
6560: PUSH
6561: LD_VAR 0 1
6565: PPUSH
6566: CALL_OW 25
6570: ST_TO_ADDR
// result := unit ;
6571: LD_ADDR_VAR 0 4
6575: PUSH
6576: LD_VAR 0 5
6580: ST_TO_ADDR
// end ;
6581: LD_VAR 0 4
6585: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6586: LD_INT 0
6588: PPUSH
6589: PPUSH
// if not side or not nation then
6590: LD_VAR 0 1
6594: NOT
6595: IFTRUE 6604
6597: PUSH
6598: LD_VAR 0 2
6602: NOT
6603: OR
6604: IFFALSE 6608
// exit ;
6606: GO 7402
// case nation of nation_american :
6608: LD_VAR 0 2
6612: PUSH
6613: LD_INT 1
6615: DOUBLE
6616: EQUAL
6617: IFTRUE 6621
6619: GO 6843
6621: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
6622: LD_ADDR_VAR 0 4
6626: PUSH
6627: LD_INT 35
6629: PUSH
6630: LD_INT 45
6632: PUSH
6633: LD_INT 46
6635: PUSH
6636: LD_INT 47
6638: PUSH
6639: LD_INT 82
6641: PUSH
6642: LD_INT 83
6644: PUSH
6645: LD_INT 84
6647: PUSH
6648: LD_INT 85
6650: PUSH
6651: LD_INT 86
6653: PUSH
6654: LD_INT 1
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 6
6662: PUSH
6663: LD_INT 15
6665: PUSH
6666: LD_INT 16
6668: PUSH
6669: LD_INT 7
6671: PUSH
6672: LD_INT 12
6674: PUSH
6675: LD_INT 13
6677: PUSH
6678: LD_INT 10
6680: PUSH
6681: LD_INT 14
6683: PUSH
6684: LD_INT 20
6686: PUSH
6687: LD_INT 21
6689: PUSH
6690: LD_INT 22
6692: PUSH
6693: LD_INT 25
6695: PUSH
6696: LD_INT 32
6698: PUSH
6699: LD_INT 27
6701: PUSH
6702: LD_INT 36
6704: PUSH
6705: LD_INT 69
6707: PUSH
6708: LD_INT 39
6710: PUSH
6711: LD_INT 34
6713: PUSH
6714: LD_INT 40
6716: PUSH
6717: LD_INT 48
6719: PUSH
6720: LD_INT 49
6722: PUSH
6723: LD_INT 50
6725: PUSH
6726: LD_INT 51
6728: PUSH
6729: LD_INT 52
6731: PUSH
6732: LD_INT 53
6734: PUSH
6735: LD_INT 54
6737: PUSH
6738: LD_INT 55
6740: PUSH
6741: LD_INT 56
6743: PUSH
6744: LD_INT 57
6746: PUSH
6747: LD_INT 58
6749: PUSH
6750: LD_INT 59
6752: PUSH
6753: LD_INT 60
6755: PUSH
6756: LD_INT 61
6758: PUSH
6759: LD_INT 62
6761: PUSH
6762: LD_INT 80
6764: PUSH
6765: LD_INT 82
6767: PUSH
6768: LD_INT 83
6770: PUSH
6771: LD_INT 84
6773: PUSH
6774: LD_INT 85
6776: PUSH
6777: LD_INT 86
6779: PUSH
6780: LD_INT 90
6782: PUSH
6783: LD_INT 93
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: ST_TO_ADDR
6841: GO 7324
6843: LD_INT 2
6845: DOUBLE
6846: EQUAL
6847: IFTRUE 6851
6849: GO 7085
6851: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
6852: LD_ADDR_VAR 0 4
6856: PUSH
6857: LD_INT 35
6859: PUSH
6860: LD_INT 45
6862: PUSH
6863: LD_INT 46
6865: PUSH
6866: LD_INT 47
6868: PUSH
6869: LD_INT 82
6871: PUSH
6872: LD_INT 83
6874: PUSH
6875: LD_INT 84
6877: PUSH
6878: LD_INT 85
6880: PUSH
6881: LD_INT 87
6883: PUSH
6884: LD_INT 70
6886: PUSH
6887: LD_INT 1
6889: PUSH
6890: LD_INT 11
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: LD_INT 5
6901: PUSH
6902: LD_INT 6
6904: PUSH
6905: LD_INT 15
6907: PUSH
6908: LD_INT 18
6910: PUSH
6911: LD_INT 7
6913: PUSH
6914: LD_INT 17
6916: PUSH
6917: LD_INT 8
6919: PUSH
6920: LD_INT 20
6922: PUSH
6923: LD_INT 21
6925: PUSH
6926: LD_INT 22
6928: PUSH
6929: LD_INT 72
6931: PUSH
6932: LD_INT 26
6934: PUSH
6935: LD_INT 69
6937: PUSH
6938: LD_INT 39
6940: PUSH
6941: LD_INT 40
6943: PUSH
6944: LD_INT 41
6946: PUSH
6947: LD_INT 42
6949: PUSH
6950: LD_INT 43
6952: PUSH
6953: LD_INT 48
6955: PUSH
6956: LD_INT 49
6958: PUSH
6959: LD_INT 50
6961: PUSH
6962: LD_INT 51
6964: PUSH
6965: LD_INT 52
6967: PUSH
6968: LD_INT 53
6970: PUSH
6971: LD_INT 54
6973: PUSH
6974: LD_INT 55
6976: PUSH
6977: LD_INT 56
6979: PUSH
6980: LD_INT 60
6982: PUSH
6983: LD_INT 61
6985: PUSH
6986: LD_INT 62
6988: PUSH
6989: LD_INT 66
6991: PUSH
6992: LD_INT 67
6994: PUSH
6995: LD_INT 68
6997: PUSH
6998: LD_INT 81
7000: PUSH
7001: LD_INT 82
7003: PUSH
7004: LD_INT 83
7006: PUSH
7007: LD_INT 84
7009: PUSH
7010: LD_INT 85
7012: PUSH
7013: LD_INT 87
7015: PUSH
7016: LD_INT 88
7018: PUSH
7019: LD_INT 92
7021: PUSH
7022: LD_INT 94
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: ST_TO_ADDR
7083: GO 7324
7085: LD_INT 3
7087: DOUBLE
7088: EQUAL
7089: IFTRUE 7093
7091: GO 7323
7093: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
7094: LD_ADDR_VAR 0 4
7098: PUSH
7099: LD_INT 46
7101: PUSH
7102: LD_INT 47
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: LD_INT 2
7110: PUSH
7111: LD_INT 82
7113: PUSH
7114: LD_INT 83
7116: PUSH
7117: LD_INT 84
7119: PUSH
7120: LD_INT 85
7122: PUSH
7123: LD_INT 86
7125: PUSH
7126: LD_INT 11
7128: PUSH
7129: LD_INT 9
7131: PUSH
7132: LD_INT 20
7134: PUSH
7135: LD_INT 19
7137: PUSH
7138: LD_INT 21
7140: PUSH
7141: LD_INT 24
7143: PUSH
7144: LD_INT 22
7146: PUSH
7147: LD_INT 25
7149: PUSH
7150: LD_INT 28
7152: PUSH
7153: LD_INT 29
7155: PUSH
7156: LD_INT 30
7158: PUSH
7159: LD_INT 31
7161: PUSH
7162: LD_INT 37
7164: PUSH
7165: LD_INT 38
7167: PUSH
7168: LD_INT 32
7170: PUSH
7171: LD_INT 27
7173: PUSH
7174: LD_INT 33
7176: PUSH
7177: LD_INT 69
7179: PUSH
7180: LD_INT 39
7182: PUSH
7183: LD_INT 34
7185: PUSH
7186: LD_INT 40
7188: PUSH
7189: LD_INT 71
7191: PUSH
7192: LD_INT 23
7194: PUSH
7195: LD_INT 44
7197: PUSH
7198: LD_INT 48
7200: PUSH
7201: LD_INT 49
7203: PUSH
7204: LD_INT 50
7206: PUSH
7207: LD_INT 51
7209: PUSH
7210: LD_INT 52
7212: PUSH
7213: LD_INT 53
7215: PUSH
7216: LD_INT 54
7218: PUSH
7219: LD_INT 55
7221: PUSH
7222: LD_INT 56
7224: PUSH
7225: LD_INT 57
7227: PUSH
7228: LD_INT 58
7230: PUSH
7231: LD_INT 59
7233: PUSH
7234: LD_INT 63
7236: PUSH
7237: LD_INT 64
7239: PUSH
7240: LD_INT 65
7242: PUSH
7243: LD_INT 82
7245: PUSH
7246: LD_INT 83
7248: PUSH
7249: LD_INT 84
7251: PUSH
7252: LD_INT 85
7254: PUSH
7255: LD_INT 86
7257: PUSH
7258: LD_INT 89
7260: PUSH
7261: LD_INT 91
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: LIST
7285: LIST
7286: LIST
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: ST_TO_ADDR
7321: GO 7324
7323: POP
// if state > - 1 and state < 3 then
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 1
7331: NEG
7332: GREATER
7333: IFFALSE 7345
7335: PUSH
7336: LD_VAR 0 3
7340: PUSH
7341: LD_INT 3
7343: LESS
7344: AND
7345: IFFALSE 7402
// for i in result do
7347: LD_ADDR_VAR 0 5
7351: PUSH
7352: LD_VAR 0 4
7356: PUSH
7357: FOR_IN
7358: IFFALSE 7400
// if GetTech ( i , side ) <> state then
7360: LD_VAR 0 5
7364: PPUSH
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL_OW 321
7374: PUSH
7375: LD_VAR 0 3
7379: NONEQUAL
7380: IFFALSE 7398
// result := result diff i ;
7382: LD_ADDR_VAR 0 4
7386: PUSH
7387: LD_VAR 0 4
7391: PUSH
7392: LD_VAR 0 5
7396: DIFF
7397: ST_TO_ADDR
7398: GO 7357
7400: POP
7401: POP
// end ;
7402: LD_VAR 0 4
7406: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7407: LD_INT 0
7409: PPUSH
7410: PPUSH
7411: PPUSH
// result := true ;
7412: LD_ADDR_VAR 0 3
7416: PUSH
7417: LD_INT 1
7419: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7420: LD_ADDR_VAR 0 5
7424: PUSH
7425: LD_VAR 0 2
7429: PPUSH
7430: CALL_OW 480
7434: ST_TO_ADDR
// if not tmp then
7435: LD_VAR 0 5
7439: NOT
7440: IFFALSE 7444
// exit ;
7442: GO 7493
// for i in tmp do
7444: LD_ADDR_VAR 0 4
7448: PUSH
7449: LD_VAR 0 5
7453: PUSH
7454: FOR_IN
7455: IFFALSE 7491
// if GetTech ( i , side ) <> state_researched then
7457: LD_VAR 0 4
7461: PPUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 321
7471: PUSH
7472: LD_INT 2
7474: NONEQUAL
7475: IFFALSE 7489
// begin result := false ;
7477: LD_ADDR_VAR 0 3
7481: PUSH
7482: LD_INT 0
7484: ST_TO_ADDR
// exit ;
7485: POP
7486: POP
7487: GO 7493
// end ;
7489: GO 7454
7491: POP
7492: POP
// end ;
7493: LD_VAR 0 3
7497: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7498: LD_INT 0
7500: PPUSH
7501: PPUSH
7502: PPUSH
7503: PPUSH
7504: PPUSH
7505: PPUSH
7506: PPUSH
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7513: LD_VAR 0 1
7517: NOT
7518: IFTRUE 7535
7520: PUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 257
7530: PUSH
7531: LD_INT 9
7533: NONEQUAL
7534: OR
7535: IFFALSE 7539
// exit ;
7537: GO 8118
// side := GetSide ( unit ) ;
7539: LD_ADDR_VAR 0 9
7543: PUSH
7544: LD_VAR 0 1
7548: PPUSH
7549: CALL_OW 255
7553: ST_TO_ADDR
// tech_space := tech_spacanom ;
7554: LD_ADDR_VAR 0 12
7558: PUSH
7559: LD_INT 29
7561: ST_TO_ADDR
// tech_time := tech_taurad ;
7562: LD_ADDR_VAR 0 13
7566: PUSH
7567: LD_INT 28
7569: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7570: LD_ADDR_VAR 0 11
7574: PUSH
7575: LD_VAR 0 1
7579: PPUSH
7580: CALL_OW 310
7584: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7585: LD_VAR 0 11
7589: PPUSH
7590: CALL_OW 247
7594: PUSH
7595: LD_INT 2
7597: EQUAL
7598: IFFALSE 7602
// exit ;
7600: GO 8118
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7602: LD_ADDR_VAR 0 8
7606: PUSH
7607: LD_INT 81
7609: PUSH
7610: LD_VAR 0 9
7614: PUSH
7615: EMPTY
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 3
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 3
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PPUSH
7640: CALL_OW 69
7644: ST_TO_ADDR
// if not tmp then
7645: LD_VAR 0 8
7649: NOT
7650: IFFALSE 7654
// exit ;
7652: GO 8118
// if in_unit then
7654: LD_VAR 0 11
7658: IFFALSE 7682
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7660: LD_ADDR_VAR 0 10
7664: PUSH
7665: LD_VAR 0 8
7669: PPUSH
7670: LD_VAR 0 11
7674: PPUSH
7675: CALL_OW 74
7679: ST_TO_ADDR
7680: GO 7702
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7682: LD_ADDR_VAR 0 10
7686: PUSH
7687: LD_VAR 0 8
7691: PPUSH
7692: LD_VAR 0 1
7696: PPUSH
7697: CALL_OW 74
7701: ST_TO_ADDR
// if not enemy then
7702: LD_VAR 0 10
7706: NOT
7707: IFFALSE 7711
// exit ;
7709: GO 8118
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7711: LD_VAR 0 11
7715: IFFALSE 7737
7717: PUSH
7718: LD_VAR 0 11
7722: PPUSH
7723: LD_VAR 0 10
7727: PPUSH
7728: CALL_OW 296
7732: PUSH
7733: LD_INT 13
7735: GREATER
7736: AND
7737: IFTRUE 7759
7739: PUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: LD_VAR 0 10
7749: PPUSH
7750: CALL_OW 296
7754: PUSH
7755: LD_INT 12
7757: GREATER
7758: OR
7759: IFFALSE 7763
// exit ;
7761: GO 8118
// missile := [ 1 ] ;
7763: LD_ADDR_VAR 0 14
7767: PUSH
7768: LD_INT 1
7770: PUSH
7771: EMPTY
7772: LIST
7773: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7774: LD_VAR 0 9
7778: PPUSH
7779: LD_VAR 0 12
7783: PPUSH
7784: CALL_OW 325
7788: IFFALSE 7817
// missile := Replace ( missile , missile + 1 , 2 ) ;
7790: LD_ADDR_VAR 0 14
7794: PUSH
7795: LD_VAR 0 14
7799: PPUSH
7800: LD_VAR 0 14
7804: PUSH
7805: LD_INT 1
7807: PLUS
7808: PPUSH
7809: LD_INT 2
7811: PPUSH
7812: CALL_OW 1
7816: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7817: LD_VAR 0 9
7821: PPUSH
7822: LD_VAR 0 13
7826: PPUSH
7827: CALL_OW 325
7831: IFFALSE 7855
7833: PUSH
7834: LD_VAR 0 10
7838: PPUSH
7839: CALL_OW 255
7843: PPUSH
7844: LD_VAR 0 13
7848: PPUSH
7849: CALL_OW 325
7853: NOT
7854: AND
7855: IFFALSE 7884
// missile := Replace ( missile , missile + 1 , 3 ) ;
7857: LD_ADDR_VAR 0 14
7861: PUSH
7862: LD_VAR 0 14
7866: PPUSH
7867: LD_VAR 0 14
7871: PUSH
7872: LD_INT 1
7874: PLUS
7875: PPUSH
7876: LD_INT 3
7878: PPUSH
7879: CALL_OW 1
7883: ST_TO_ADDR
// if missile < 2 then
7884: LD_VAR 0 14
7888: PUSH
7889: LD_INT 2
7891: LESS
7892: IFFALSE 7896
// exit ;
7894: GO 8118
// x := GetX ( enemy ) ;
7896: LD_ADDR_VAR 0 4
7900: PUSH
7901: LD_VAR 0 10
7905: PPUSH
7906: CALL_OW 250
7910: ST_TO_ADDR
// y := GetY ( enemy ) ;
7911: LD_ADDR_VAR 0 5
7915: PUSH
7916: LD_VAR 0 10
7920: PPUSH
7921: CALL_OW 251
7925: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7926: LD_ADDR_VAR 0 6
7930: PUSH
7931: LD_VAR 0 4
7935: PUSH
7936: LD_INT 1
7938: NEG
7939: PPUSH
7940: LD_INT 1
7942: PPUSH
7943: CALL_OW 12
7947: PLUS
7948: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7949: LD_ADDR_VAR 0 7
7953: PUSH
7954: LD_VAR 0 5
7958: PUSH
7959: LD_INT 1
7961: NEG
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: CALL_OW 12
7970: PLUS
7971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7972: LD_VAR 0 6
7976: PPUSH
7977: LD_VAR 0 7
7981: PPUSH
7982: CALL_OW 488
7986: NOT
7987: IFFALSE 8009
// begin _x := x ;
7989: LD_ADDR_VAR 0 6
7993: PUSH
7994: LD_VAR 0 4
7998: ST_TO_ADDR
// _y := y ;
7999: LD_ADDR_VAR 0 7
8003: PUSH
8004: LD_VAR 0 5
8008: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
8009: LD_ADDR_VAR 0 3
8013: PUSH
8014: LD_INT 1
8016: PPUSH
8017: LD_VAR 0 14
8021: PPUSH
8022: CALL_OW 12
8026: ST_TO_ADDR
// case i of 1 :
8027: LD_VAR 0 3
8031: PUSH
8032: LD_INT 1
8034: DOUBLE
8035: EQUAL
8036: IFTRUE 8040
8038: GO 8057
8040: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
8041: LD_VAR 0 1
8045: PPUSH
8046: LD_VAR 0 10
8050: PPUSH
8051: CALL_OW 115
8055: GO 8118
8057: LD_INT 2
8059: DOUBLE
8060: EQUAL
8061: IFTRUE 8065
8063: GO 8087
8065: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
8066: LD_VAR 0 1
8070: PPUSH
8071: LD_VAR 0 6
8075: PPUSH
8076: LD_VAR 0 7
8080: PPUSH
8081: CALL_OW 153
8085: GO 8118
8087: LD_INT 3
8089: DOUBLE
8090: EQUAL
8091: IFTRUE 8095
8093: GO 8117
8095: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
8096: LD_VAR 0 1
8100: PPUSH
8101: LD_VAR 0 6
8105: PPUSH
8106: LD_VAR 0 7
8110: PPUSH
8111: CALL_OW 154
8115: GO 8118
8117: POP
// end ;
8118: LD_VAR 0 2
8122: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
8123: LD_INT 0
8125: PPUSH
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
8130: PPUSH
// if not unit or not building then
8131: LD_VAR 0 1
8135: NOT
8136: IFTRUE 8145
8138: PUSH
8139: LD_VAR 0 2
8143: NOT
8144: OR
8145: IFFALSE 8149
// exit ;
8147: GO 8307
// x := GetX ( building ) ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 2
8158: PPUSH
8159: CALL_OW 250
8163: ST_TO_ADDR
// y := GetY ( building ) ;
8164: LD_ADDR_VAR 0 6
8168: PUSH
8169: LD_VAR 0 2
8173: PPUSH
8174: CALL_OW 251
8178: ST_TO_ADDR
// for i := 0 to 5 do
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: DOUBLE
8185: LD_INT 0
8187: DEC
8188: ST_TO_ADDR
8189: LD_INT 5
8191: PUSH
8192: FOR_TO
8193: IFFALSE 8305
// begin _x := ShiftX ( x , i , 3 ) ;
8195: LD_ADDR_VAR 0 7
8199: PUSH
8200: LD_VAR 0 5
8204: PPUSH
8205: LD_VAR 0 4
8209: PPUSH
8210: LD_INT 3
8212: PPUSH
8213: CALL_OW 272
8217: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8218: LD_ADDR_VAR 0 8
8222: PUSH
8223: LD_VAR 0 6
8227: PPUSH
8228: LD_VAR 0 4
8232: PPUSH
8233: LD_INT 3
8235: PPUSH
8236: CALL_OW 273
8240: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8241: LD_VAR 0 7
8245: PPUSH
8246: LD_VAR 0 8
8250: PPUSH
8251: CALL_OW 488
8255: NOT
8256: IFFALSE 8260
// continue ;
8258: GO 8192
// if HexInfo ( _x , _y ) = 0 then
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 8
8269: PPUSH
8270: CALL_OW 428
8274: PUSH
8275: LD_INT 0
8277: EQUAL
8278: IFFALSE 8303
// begin ComMoveXY ( unit , _x , _y ) ;
8280: LD_VAR 0 1
8284: PPUSH
8285: LD_VAR 0 7
8289: PPUSH
8290: LD_VAR 0 8
8294: PPUSH
8295: CALL_OW 111
// exit ;
8299: POP
8300: POP
8301: GO 8307
// end ; end ;
8303: GO 8192
8305: POP
8306: POP
// end ;
8307: LD_VAR 0 3
8311: RET
// export function ScanBase ( side , base_area ) ; begin
8312: LD_INT 0
8314: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8315: LD_ADDR_VAR 0 3
8319: PUSH
8320: LD_VAR 0 2
8324: PPUSH
8325: LD_INT 81
8327: PUSH
8328: LD_VAR 0 1
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: PPUSH
8337: CALL_OW 70
8341: ST_TO_ADDR
// end ;
8342: LD_VAR 0 3
8346: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8347: LD_INT 0
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// result := false ;
8353: LD_ADDR_VAR 0 2
8357: PUSH
8358: LD_INT 0
8360: ST_TO_ADDR
// side := GetSide ( unit ) ;
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: LD_VAR 0 1
8370: PPUSH
8371: CALL_OW 255
8375: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8376: LD_ADDR_VAR 0 4
8380: PUSH
8381: LD_VAR 0 1
8385: PPUSH
8386: CALL_OW 248
8390: ST_TO_ADDR
// case nat of 1 :
8391: LD_VAR 0 4
8395: PUSH
8396: LD_INT 1
8398: DOUBLE
8399: EQUAL
8400: IFTRUE 8404
8402: GO 8415
8404: POP
// tech := tech_lassight ; 2 :
8405: LD_ADDR_VAR 0 5
8409: PUSH
8410: LD_INT 12
8412: ST_TO_ADDR
8413: GO 8454
8415: LD_INT 2
8417: DOUBLE
8418: EQUAL
8419: IFTRUE 8423
8421: GO 8434
8423: POP
// tech := tech_mortar ; 3 :
8424: LD_ADDR_VAR 0 5
8428: PUSH
8429: LD_INT 41
8431: ST_TO_ADDR
8432: GO 8454
8434: LD_INT 3
8436: DOUBLE
8437: EQUAL
8438: IFTRUE 8442
8440: GO 8453
8442: POP
// tech := tech_bazooka ; end ;
8443: LD_ADDR_VAR 0 5
8447: PUSH
8448: LD_INT 44
8450: ST_TO_ADDR
8451: GO 8454
8453: POP
// if Researched ( side , tech ) then
8454: LD_VAR 0 3
8458: PPUSH
8459: LD_VAR 0 5
8463: PPUSH
8464: CALL_OW 325
8468: IFFALSE 8495
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8470: LD_ADDR_VAR 0 2
8474: PUSH
8475: LD_INT 5
8477: PUSH
8478: LD_INT 8
8480: PUSH
8481: LD_INT 9
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: LD_VAR 0 4
8493: ARRAY
8494: ST_TO_ADDR
// end ;
8495: LD_VAR 0 2
8499: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8500: LD_INT 0
8502: PPUSH
8503: PPUSH
8504: PPUSH
// if not mines then
8505: LD_VAR 0 2
8509: NOT
8510: IFFALSE 8514
// exit ;
8512: GO 8658
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8514: LD_ADDR_VAR 0 5
8518: PUSH
8519: LD_INT 81
8521: PUSH
8522: LD_VAR 0 1
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: LD_INT 21
8536: PUSH
8537: LD_INT 3
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PPUSH
8552: CALL_OW 69
8556: ST_TO_ADDR
// for i in mines do
8557: LD_ADDR_VAR 0 4
8561: PUSH
8562: LD_VAR 0 2
8566: PUSH
8567: FOR_IN
8568: IFFALSE 8656
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8570: LD_VAR 0 4
8574: PUSH
8575: LD_INT 1
8577: ARRAY
8578: PPUSH
8579: LD_VAR 0 4
8583: PUSH
8584: LD_INT 2
8586: ARRAY
8587: PPUSH
8588: CALL_OW 458
8592: NOT
8593: IFFALSE 8597
// continue ;
8595: GO 8567
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8597: LD_VAR 0 4
8601: PUSH
8602: LD_INT 1
8604: ARRAY
8605: PPUSH
8606: LD_VAR 0 4
8610: PUSH
8611: LD_INT 2
8613: ARRAY
8614: PPUSH
8615: CALL_OW 428
8619: PUSH
8620: LD_VAR 0 5
8624: IN
8625: IFFALSE 8654
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8627: LD_VAR 0 4
8631: PUSH
8632: LD_INT 1
8634: ARRAY
8635: PPUSH
8636: LD_VAR 0 4
8640: PUSH
8641: LD_INT 2
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 1
8649: PPUSH
8650: CALL_OW 456
// end ;
8654: GO 8567
8656: POP
8657: POP
// end ;
8658: LD_VAR 0 3
8662: RET
// export function Count ( array ) ; begin
8663: LD_INT 0
8665: PPUSH
// result := array + 0 ;
8666: LD_ADDR_VAR 0 2
8670: PUSH
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 0
8678: PLUS
8679: ST_TO_ADDR
// end ;
8680: LD_VAR 0 2
8684: RET
// export function IsEmpty ( building ) ; begin
8685: LD_INT 0
8687: PPUSH
// if not building then
8688: LD_VAR 0 1
8692: NOT
8693: IFFALSE 8697
// exit ;
8695: GO 8740
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8697: LD_ADDR_VAR 0 2
8701: PUSH
8702: LD_VAR 0 1
8706: PUSH
8707: LD_INT 22
8709: PUSH
8710: LD_VAR 0 1
8714: PPUSH
8715: CALL_OW 255
8719: PUSH
8720: EMPTY
8721: LIST
8722: LIST
8723: PUSH
8724: LD_INT 58
8726: PUSH
8727: EMPTY
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: IN
8739: ST_TO_ADDR
// end ;
8740: LD_VAR 0 2
8744: RET
// export function IsNotFull ( building ) ; var places ; begin
8745: LD_INT 0
8747: PPUSH
8748: PPUSH
// if not building then
8749: LD_VAR 0 1
8753: NOT
8754: IFFALSE 8758
// exit ;
8756: GO 8786
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 1
8767: PPUSH
8768: LD_INT 3
8770: PUSH
8771: LD_INT 62
8773: PUSH
8774: EMPTY
8775: LIST
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: CALL_OW 72
8785: ST_TO_ADDR
// end ;
8786: LD_VAR 0 2
8790: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8791: LD_INT 0
8793: PPUSH
8794: PPUSH
8795: PPUSH
8796: PPUSH
// tmp := [ ] ;
8797: LD_ADDR_VAR 0 3
8801: PUSH
8802: EMPTY
8803: ST_TO_ADDR
// list := [ ] ;
8804: LD_ADDR_VAR 0 5
8808: PUSH
8809: EMPTY
8810: ST_TO_ADDR
// for i = 16 to 25 do
8811: LD_ADDR_VAR 0 4
8815: PUSH
8816: DOUBLE
8817: LD_INT 16
8819: DEC
8820: ST_TO_ADDR
8821: LD_INT 25
8823: PUSH
8824: FOR_TO
8825: IFFALSE 8898
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8827: LD_ADDR_VAR 0 3
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_INT 22
8839: PUSH
8840: LD_VAR 0 1
8844: PPUSH
8845: CALL_OW 255
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_INT 91
8856: PUSH
8857: LD_VAR 0 1
8861: PUSH
8862: LD_INT 6
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 30
8872: PUSH
8873: LD_VAR 0 4
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: PUSH
8887: EMPTY
8888: LIST
8889: PPUSH
8890: CALL_OW 69
8894: ADD
8895: ST_TO_ADDR
8896: GO 8824
8898: POP
8899: POP
// for i = 1 to tmp do
8900: LD_ADDR_VAR 0 4
8904: PUSH
8905: DOUBLE
8906: LD_INT 1
8908: DEC
8909: ST_TO_ADDR
8910: LD_VAR 0 3
8914: PUSH
8915: FOR_TO
8916: IFFALSE 9004
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8918: LD_ADDR_VAR 0 5
8922: PUSH
8923: LD_VAR 0 5
8927: PUSH
8928: LD_VAR 0 3
8932: PUSH
8933: LD_VAR 0 4
8937: ARRAY
8938: PPUSH
8939: CALL_OW 266
8943: PUSH
8944: LD_VAR 0 3
8948: PUSH
8949: LD_VAR 0 4
8953: ARRAY
8954: PPUSH
8955: CALL_OW 250
8959: PUSH
8960: LD_VAR 0 3
8964: PUSH
8965: LD_VAR 0 4
8969: ARRAY
8970: PPUSH
8971: CALL_OW 251
8975: PUSH
8976: LD_VAR 0 3
8980: PUSH
8981: LD_VAR 0 4
8985: ARRAY
8986: PPUSH
8987: CALL_OW 254
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: PUSH
8998: EMPTY
8999: LIST
9000: ADD
9001: ST_TO_ADDR
9002: GO 8915
9004: POP
9005: POP
// result := list ;
9006: LD_ADDR_VAR 0 2
9010: PUSH
9011: LD_VAR 0 5
9015: ST_TO_ADDR
// end ;
9016: LD_VAR 0 2
9020: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
9029: PPUSH
// if not factory then
9030: LD_VAR 0 1
9034: NOT
9035: IFFALSE 9039
// exit ;
9037: GO 9642
// if control = control_apeman then
9039: LD_VAR 0 4
9043: PUSH
9044: LD_INT 5
9046: EQUAL
9047: IFFALSE 9156
// begin tmp := UnitsInside ( factory ) ;
9049: LD_ADDR_VAR 0 8
9053: PUSH
9054: LD_VAR 0 1
9058: PPUSH
9059: CALL_OW 313
9063: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9064: LD_VAR 0 8
9068: PPUSH
9069: LD_INT 25
9071: PUSH
9072: LD_INT 12
9074: PUSH
9075: EMPTY
9076: LIST
9077: LIST
9078: PPUSH
9079: CALL_OW 72
9083: NOT
9084: IFFALSE 9094
// control := control_manual ;
9086: LD_ADDR_VAR 0 4
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9094: LD_ADDR_VAR 0 8
9098: PUSH
9099: LD_VAR 0 1
9103: PPUSH
9104: CALL 8791 0 1
9108: ST_TO_ADDR
// if tmp then
9109: LD_VAR 0 8
9113: IFFALSE 9156
// begin for i in tmp do
9115: LD_ADDR_VAR 0 7
9119: PUSH
9120: LD_VAR 0 8
9124: PUSH
9125: FOR_IN
9126: IFFALSE 9154
// if i [ 1 ] = b_ext_radio then
9128: LD_VAR 0 7
9132: PUSH
9133: LD_INT 1
9135: ARRAY
9136: PUSH
9137: LD_INT 22
9139: EQUAL
9140: IFFALSE 9152
// begin control := control_remote ;
9142: LD_ADDR_VAR 0 4
9146: PUSH
9147: LD_INT 2
9149: ST_TO_ADDR
// break ;
9150: GO 9154
// end ;
9152: GO 9125
9154: POP
9155: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9156: LD_VAR 0 1
9160: PPUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: LD_VAR 0 3
9170: PPUSH
9171: LD_VAR 0 4
9175: PPUSH
9176: LD_VAR 0 5
9180: PPUSH
9181: CALL_OW 448
9185: IFFALSE 9220
// begin result := [ chassis , engine , control , weapon ] ;
9187: LD_ADDR_VAR 0 6
9191: PUSH
9192: LD_VAR 0 2
9196: PUSH
9197: LD_VAR 0 3
9201: PUSH
9202: LD_VAR 0 4
9206: PUSH
9207: LD_VAR 0 5
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// exit ;
9218: GO 9642
// end ; _chassis := AvailableChassisList ( factory ) ;
9220: LD_ADDR_VAR 0 9
9224: PUSH
9225: LD_VAR 0 1
9229: PPUSH
9230: CALL_OW 475
9234: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9235: LD_ADDR_VAR 0 11
9239: PUSH
9240: LD_VAR 0 1
9244: PPUSH
9245: CALL_OW 476
9249: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9250: LD_ADDR_VAR 0 12
9254: PUSH
9255: LD_VAR 0 1
9259: PPUSH
9260: CALL_OW 477
9264: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9265: LD_ADDR_VAR 0 10
9269: PUSH
9270: LD_VAR 0 1
9274: PPUSH
9275: CALL_OW 478
9279: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9280: LD_VAR 0 9
9284: NOT
9285: IFTRUE 9294
9287: PUSH
9288: LD_VAR 0 11
9292: NOT
9293: OR
9294: IFTRUE 9303
9296: PUSH
9297: LD_VAR 0 12
9301: NOT
9302: OR
9303: IFTRUE 9312
9305: PUSH
9306: LD_VAR 0 10
9310: NOT
9311: OR
9312: IFFALSE 9347
// begin result := [ chassis , engine , control , weapon ] ;
9314: LD_ADDR_VAR 0 6
9318: PUSH
9319: LD_VAR 0 2
9323: PUSH
9324: LD_VAR 0 3
9328: PUSH
9329: LD_VAR 0 4
9333: PUSH
9334: LD_VAR 0 5
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: ST_TO_ADDR
// exit ;
9345: GO 9642
// end ; if not chassis in _chassis then
9347: LD_VAR 0 2
9351: PUSH
9352: LD_VAR 0 9
9356: IN
9357: NOT
9358: IFFALSE 9384
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9360: LD_ADDR_VAR 0 2
9364: PUSH
9365: LD_VAR 0 9
9369: PUSH
9370: LD_INT 1
9372: PPUSH
9373: LD_VAR 0 9
9377: PPUSH
9378: CALL_OW 12
9382: ARRAY
9383: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9384: LD_VAR 0 2
9388: PPUSH
9389: LD_VAR 0 3
9393: PPUSH
9394: CALL 9647 0 2
9398: NOT
9399: IFFALSE 9460
// repeat engine := _engine [ 1 ] ;
9401: LD_ADDR_VAR 0 3
9405: PUSH
9406: LD_VAR 0 11
9410: PUSH
9411: LD_INT 1
9413: ARRAY
9414: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9415: LD_ADDR_VAR 0 11
9419: PUSH
9420: LD_VAR 0 11
9424: PPUSH
9425: LD_INT 1
9427: PPUSH
9428: CALL_OW 3
9432: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9433: LD_VAR 0 2
9437: PPUSH
9438: LD_VAR 0 3
9442: PPUSH
9443: CALL 9647 0 2
9447: IFTRUE 9458
9449: PUSH
9450: LD_VAR 0 11
9454: PUSH
9455: EMPTY
9456: EQUAL
9457: OR
9458: IFFALSE 9401
// if not control in _control then
9460: LD_VAR 0 4
9464: PUSH
9465: LD_VAR 0 12
9469: IN
9470: NOT
9471: IFFALSE 9497
// control := _control [ rand ( 1 , _control ) ] ;
9473: LD_ADDR_VAR 0 4
9477: PUSH
9478: LD_VAR 0 12
9482: PUSH
9483: LD_INT 1
9485: PPUSH
9486: LD_VAR 0 12
9490: PPUSH
9491: CALL_OW 12
9495: ARRAY
9496: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9497: LD_VAR 0 2
9501: PPUSH
9502: LD_VAR 0 5
9506: PPUSH
9507: CALL 9869 0 2
9511: NOT
9512: IFFALSE 9573
// repeat weapon := _weapon [ 1 ] ;
9514: LD_ADDR_VAR 0 5
9518: PUSH
9519: LD_VAR 0 10
9523: PUSH
9524: LD_INT 1
9526: ARRAY
9527: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9528: LD_ADDR_VAR 0 10
9532: PUSH
9533: LD_VAR 0 10
9537: PPUSH
9538: LD_INT 1
9540: PPUSH
9541: CALL_OW 3
9545: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9546: LD_VAR 0 2
9550: PPUSH
9551: LD_VAR 0 5
9555: PPUSH
9556: CALL 9869 0 2
9560: IFTRUE 9571
9562: PUSH
9563: LD_VAR 0 10
9567: PUSH
9568: EMPTY
9569: EQUAL
9570: OR
9571: IFFALSE 9514
// result := [ ] ;
9573: LD_ADDR_VAR 0 6
9577: PUSH
9578: EMPTY
9579: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9580: LD_VAR 0 1
9584: PPUSH
9585: LD_VAR 0 2
9589: PPUSH
9590: LD_VAR 0 3
9594: PPUSH
9595: LD_VAR 0 4
9599: PPUSH
9600: LD_VAR 0 5
9604: PPUSH
9605: CALL_OW 448
9609: IFFALSE 9642
// result := [ chassis , engine , control , weapon ] ;
9611: LD_ADDR_VAR 0 6
9615: PUSH
9616: LD_VAR 0 2
9620: PUSH
9621: LD_VAR 0 3
9625: PUSH
9626: LD_VAR 0 4
9630: PUSH
9631: LD_VAR 0 5
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: ST_TO_ADDR
// end ;
9642: LD_VAR 0 6
9646: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9647: LD_INT 0
9649: PPUSH
// if not chassis or not engine then
9650: LD_VAR 0 1
9654: NOT
9655: IFTRUE 9664
9657: PUSH
9658: LD_VAR 0 2
9662: NOT
9663: OR
9664: IFFALSE 9668
// exit ;
9666: GO 9864
// case engine of engine_solar :
9668: LD_VAR 0 2
9672: PUSH
9673: LD_INT 2
9675: DOUBLE
9676: EQUAL
9677: IFTRUE 9681
9679: GO 9719
9681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9682: LD_ADDR_VAR 0 3
9686: PUSH
9687: LD_INT 11
9689: PUSH
9690: LD_INT 12
9692: PUSH
9693: LD_INT 13
9695: PUSH
9696: LD_INT 14
9698: PUSH
9699: LD_INT 1
9701: PUSH
9702: LD_INT 2
9704: PUSH
9705: LD_INT 3
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: ST_TO_ADDR
9717: GO 9848
9719: LD_INT 1
9721: DOUBLE
9722: EQUAL
9723: IFTRUE 9727
9725: GO 9789
9727: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9728: LD_ADDR_VAR 0 3
9732: PUSH
9733: LD_INT 11
9735: PUSH
9736: LD_INT 12
9738: PUSH
9739: LD_INT 13
9741: PUSH
9742: LD_INT 14
9744: PUSH
9745: LD_INT 1
9747: PUSH
9748: LD_INT 2
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: LD_INT 4
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: LD_INT 21
9762: PUSH
9763: LD_INT 23
9765: PUSH
9766: LD_INT 22
9768: PUSH
9769: LD_INT 24
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: ST_TO_ADDR
9787: GO 9848
9789: LD_INT 3
9791: DOUBLE
9792: EQUAL
9793: IFTRUE 9797
9795: GO 9847
9797: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9798: LD_ADDR_VAR 0 3
9802: PUSH
9803: LD_INT 13
9805: PUSH
9806: LD_INT 14
9808: PUSH
9809: LD_INT 2
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 4
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 22
9826: PUSH
9827: LD_INT 23
9829: PUSH
9830: LD_INT 24
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: ST_TO_ADDR
9845: GO 9848
9847: POP
// result := ( chassis in result ) ;
9848: LD_ADDR_VAR 0 3
9852: PUSH
9853: LD_VAR 0 1
9857: PUSH
9858: LD_VAR 0 3
9862: IN
9863: ST_TO_ADDR
// end ;
9864: LD_VAR 0 3
9868: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9869: LD_INT 0
9871: PPUSH
// if not chassis or not weapon then
9872: LD_VAR 0 1
9876: NOT
9877: IFTRUE 9886
9879: PUSH
9880: LD_VAR 0 2
9884: NOT
9885: OR
9886: IFFALSE 9890
// exit ;
9888: GO 10984
// case weapon of us_machine_gun :
9890: LD_VAR 0 2
9894: PUSH
9895: LD_INT 2
9897: DOUBLE
9898: EQUAL
9899: IFTRUE 9903
9901: GO 9933
9903: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9904: LD_ADDR_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: LD_INT 3
9917: PUSH
9918: LD_INT 4
9920: PUSH
9921: LD_INT 5
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: ST_TO_ADDR
9931: GO 10968
9933: LD_INT 3
9935: DOUBLE
9936: EQUAL
9937: IFTRUE 9941
9939: GO 9971
9941: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9942: LD_ADDR_VAR 0 3
9946: PUSH
9947: LD_INT 1
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: LD_INT 4
9958: PUSH
9959: LD_INT 5
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: ST_TO_ADDR
9969: GO 10968
9971: LD_INT 11
9973: DOUBLE
9974: EQUAL
9975: IFTRUE 9979
9977: GO 10009
9979: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9980: LD_ADDR_VAR 0 3
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: LD_INT 3
9993: PUSH
9994: LD_INT 4
9996: PUSH
9997: LD_INT 5
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: ST_TO_ADDR
10007: GO 10968
10009: LD_INT 4
10011: DOUBLE
10012: EQUAL
10013: IFTRUE 10017
10015: GO 10043
10017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
10018: LD_ADDR_VAR 0 3
10022: PUSH
10023: LD_INT 2
10025: PUSH
10026: LD_INT 3
10028: PUSH
10029: LD_INT 4
10031: PUSH
10032: LD_INT 5
10034: PUSH
10035: EMPTY
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: ST_TO_ADDR
10041: GO 10968
10043: LD_INT 5
10045: DOUBLE
10046: EQUAL
10047: IFTRUE 10051
10049: GO 10077
10051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
10052: LD_ADDR_VAR 0 3
10056: PUSH
10057: LD_INT 2
10059: PUSH
10060: LD_INT 3
10062: PUSH
10063: LD_INT 4
10065: PUSH
10066: LD_INT 5
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: ST_TO_ADDR
10075: GO 10968
10077: LD_INT 9
10079: DOUBLE
10080: EQUAL
10081: IFTRUE 10085
10083: GO 10111
10085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10086: LD_ADDR_VAR 0 3
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 3
10096: PUSH
10097: LD_INT 4
10099: PUSH
10100: LD_INT 5
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: ST_TO_ADDR
10109: GO 10968
10111: LD_INT 7
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10145
10119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10120: LD_ADDR_VAR 0 3
10124: PUSH
10125: LD_INT 2
10127: PUSH
10128: LD_INT 3
10130: PUSH
10131: LD_INT 4
10133: PUSH
10134: LD_INT 5
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: ST_TO_ADDR
10143: GO 10968
10145: LD_INT 12
10147: DOUBLE
10148: EQUAL
10149: IFTRUE 10153
10151: GO 10179
10153: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10154: LD_ADDR_VAR 0 3
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: LD_INT 3
10164: PUSH
10165: LD_INT 4
10167: PUSH
10168: LD_INT 5
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: ST_TO_ADDR
10177: GO 10968
10179: LD_INT 13
10181: DOUBLE
10182: EQUAL
10183: IFTRUE 10187
10185: GO 10213
10187: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10188: LD_ADDR_VAR 0 3
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 3
10198: PUSH
10199: LD_INT 4
10201: PUSH
10202: LD_INT 5
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: LIST
10209: LIST
10210: ST_TO_ADDR
10211: GO 10968
10213: LD_INT 14
10215: DOUBLE
10216: EQUAL
10217: IFTRUE 10221
10219: GO 10239
10221: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10222: LD_ADDR_VAR 0 3
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 5
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: ST_TO_ADDR
10237: GO 10968
10239: LD_INT 6
10241: DOUBLE
10242: EQUAL
10243: IFTRUE 10247
10245: GO 10265
10247: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10248: LD_ADDR_VAR 0 3
10252: PUSH
10253: LD_INT 4
10255: PUSH
10256: LD_INT 5
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: ST_TO_ADDR
10263: GO 10968
10265: LD_INT 10
10267: DOUBLE
10268: EQUAL
10269: IFTRUE 10273
10271: GO 10291
10273: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10274: LD_ADDR_VAR 0 3
10278: PUSH
10279: LD_INT 4
10281: PUSH
10282: LD_INT 5
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: ST_TO_ADDR
10289: GO 10968
10291: LD_INT 22
10293: DOUBLE
10294: EQUAL
10295: IFTRUE 10299
10297: GO 10325
10299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10300: LD_ADDR_VAR 0 3
10304: PUSH
10305: LD_INT 11
10307: PUSH
10308: LD_INT 12
10310: PUSH
10311: LD_INT 13
10313: PUSH
10314: LD_INT 14
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: ST_TO_ADDR
10323: GO 10968
10325: LD_INT 23
10327: DOUBLE
10328: EQUAL
10329: IFTRUE 10333
10331: GO 10359
10333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10334: LD_ADDR_VAR 0 3
10338: PUSH
10339: LD_INT 11
10341: PUSH
10342: LD_INT 12
10344: PUSH
10345: LD_INT 13
10347: PUSH
10348: LD_INT 14
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: ST_TO_ADDR
10357: GO 10968
10359: LD_INT 24
10361: DOUBLE
10362: EQUAL
10363: IFTRUE 10367
10365: GO 10393
10367: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10368: LD_ADDR_VAR 0 3
10372: PUSH
10373: LD_INT 11
10375: PUSH
10376: LD_INT 12
10378: PUSH
10379: LD_INT 13
10381: PUSH
10382: LD_INT 14
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: ST_TO_ADDR
10391: GO 10968
10393: LD_INT 30
10395: DOUBLE
10396: EQUAL
10397: IFTRUE 10401
10399: GO 10427
10401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10402: LD_ADDR_VAR 0 3
10406: PUSH
10407: LD_INT 11
10409: PUSH
10410: LD_INT 12
10412: PUSH
10413: LD_INT 13
10415: PUSH
10416: LD_INT 14
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: ST_TO_ADDR
10425: GO 10968
10427: LD_INT 25
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10453
10435: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10436: LD_ADDR_VAR 0 3
10440: PUSH
10441: LD_INT 13
10443: PUSH
10444: LD_INT 14
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: ST_TO_ADDR
10451: GO 10968
10453: LD_INT 27
10455: DOUBLE
10456: EQUAL
10457: IFTRUE 10461
10459: GO 10479
10461: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10462: LD_ADDR_VAR 0 3
10466: PUSH
10467: LD_INT 13
10469: PUSH
10470: LD_INT 14
10472: PUSH
10473: EMPTY
10474: LIST
10475: LIST
10476: ST_TO_ADDR
10477: GO 10968
10479: LD_INT 92
10481: DOUBLE
10482: EQUAL
10483: IFTRUE 10487
10485: GO 10513
10487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10488: LD_ADDR_VAR 0 3
10492: PUSH
10493: LD_INT 11
10495: PUSH
10496: LD_INT 12
10498: PUSH
10499: LD_INT 13
10501: PUSH
10502: LD_INT 14
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: ST_TO_ADDR
10511: GO 10968
10513: LD_INT 28
10515: DOUBLE
10516: EQUAL
10517: IFTRUE 10521
10519: GO 10539
10521: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10522: LD_ADDR_VAR 0 3
10526: PUSH
10527: LD_INT 13
10529: PUSH
10530: LD_INT 14
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: ST_TO_ADDR
10537: GO 10968
10539: LD_INT 29
10541: DOUBLE
10542: EQUAL
10543: IFTRUE 10547
10545: GO 10565
10547: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10548: LD_ADDR_VAR 0 3
10552: PUSH
10553: LD_INT 13
10555: PUSH
10556: LD_INT 14
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: ST_TO_ADDR
10563: GO 10968
10565: LD_INT 31
10567: DOUBLE
10568: EQUAL
10569: IFTRUE 10573
10571: GO 10591
10573: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10574: LD_ADDR_VAR 0 3
10578: PUSH
10579: LD_INT 13
10581: PUSH
10582: LD_INT 14
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: ST_TO_ADDR
10589: GO 10968
10591: LD_INT 26
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10617
10599: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10600: LD_ADDR_VAR 0 3
10604: PUSH
10605: LD_INT 13
10607: PUSH
10608: LD_INT 14
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: ST_TO_ADDR
10615: GO 10968
10617: LD_INT 42
10619: DOUBLE
10620: EQUAL
10621: IFTRUE 10625
10623: GO 10651
10625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10626: LD_ADDR_VAR 0 3
10630: PUSH
10631: LD_INT 21
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_INT 23
10639: PUSH
10640: LD_INT 24
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: ST_TO_ADDR
10649: GO 10968
10651: LD_INT 43
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10685
10659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10660: LD_ADDR_VAR 0 3
10664: PUSH
10665: LD_INT 21
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 23
10673: PUSH
10674: LD_INT 24
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: ST_TO_ADDR
10683: GO 10968
10685: LD_INT 44
10687: DOUBLE
10688: EQUAL
10689: IFTRUE 10693
10691: GO 10719
10693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10694: LD_ADDR_VAR 0 3
10698: PUSH
10699: LD_INT 21
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_INT 23
10707: PUSH
10708: LD_INT 24
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: ST_TO_ADDR
10717: GO 10968
10719: LD_INT 45
10721: DOUBLE
10722: EQUAL
10723: IFTRUE 10727
10725: GO 10753
10727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10728: LD_ADDR_VAR 0 3
10732: PUSH
10733: LD_INT 21
10735: PUSH
10736: LD_INT 22
10738: PUSH
10739: LD_INT 23
10741: PUSH
10742: LD_INT 24
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: ST_TO_ADDR
10751: GO 10968
10753: LD_INT 49
10755: DOUBLE
10756: EQUAL
10757: IFTRUE 10761
10759: GO 10787
10761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10762: LD_ADDR_VAR 0 3
10766: PUSH
10767: LD_INT 21
10769: PUSH
10770: LD_INT 22
10772: PUSH
10773: LD_INT 23
10775: PUSH
10776: LD_INT 24
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: ST_TO_ADDR
10785: GO 10968
10787: LD_INT 51
10789: DOUBLE
10790: EQUAL
10791: IFTRUE 10795
10793: GO 10821
10795: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10796: LD_ADDR_VAR 0 3
10800: PUSH
10801: LD_INT 21
10803: PUSH
10804: LD_INT 22
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 24
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: ST_TO_ADDR
10819: GO 10968
10821: LD_INT 52
10823: DOUBLE
10824: EQUAL
10825: IFTRUE 10829
10827: GO 10855
10829: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10830: LD_ADDR_VAR 0 3
10834: PUSH
10835: LD_INT 21
10837: PUSH
10838: LD_INT 22
10840: PUSH
10841: LD_INT 23
10843: PUSH
10844: LD_INT 24
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: ST_TO_ADDR
10853: GO 10968
10855: LD_INT 53
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 10881
10863: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10864: LD_ADDR_VAR 0 3
10868: PUSH
10869: LD_INT 23
10871: PUSH
10872: LD_INT 24
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: ST_TO_ADDR
10879: GO 10968
10881: LD_INT 46
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10907
10889: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10890: LD_ADDR_VAR 0 3
10894: PUSH
10895: LD_INT 23
10897: PUSH
10898: LD_INT 24
10900: PUSH
10901: EMPTY
10902: LIST
10903: LIST
10904: ST_TO_ADDR
10905: GO 10968
10907: LD_INT 47
10909: DOUBLE
10910: EQUAL
10911: IFTRUE 10915
10913: GO 10933
10915: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
10916: LD_ADDR_VAR 0 3
10920: PUSH
10921: LD_INT 23
10923: PUSH
10924: LD_INT 24
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: ST_TO_ADDR
10931: GO 10968
10933: LD_INT 98
10935: DOUBLE
10936: EQUAL
10937: IFTRUE 10941
10939: GO 10967
10941: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10942: LD_ADDR_VAR 0 3
10946: PUSH
10947: LD_INT 21
10949: PUSH
10950: LD_INT 22
10952: PUSH
10953: LD_INT 23
10955: PUSH
10956: LD_INT 24
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: ST_TO_ADDR
10965: GO 10968
10967: POP
// result := ( chassis in result ) ;
10968: LD_ADDR_VAR 0 3
10972: PUSH
10973: LD_VAR 0 1
10977: PUSH
10978: LD_VAR 0 3
10982: IN
10983: ST_TO_ADDR
// end ;
10984: LD_VAR 0 3
10988: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10989: LD_INT 0
10991: PPUSH
10992: PPUSH
10993: PPUSH
10994: PPUSH
10995: PPUSH
10996: PPUSH
10997: PPUSH
// result := array ;
10998: LD_ADDR_VAR 0 5
11002: PUSH
11003: LD_VAR 0 1
11007: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
11008: LD_VAR 0 1
11012: NOT
11013: IFTRUE 11022
11015: PUSH
11016: LD_VAR 0 2
11020: NOT
11021: OR
11022: IFTRUE 11031
11024: PUSH
11025: LD_VAR 0 3
11029: NOT
11030: OR
11031: IFTRUE 11045
11033: PUSH
11034: LD_VAR 0 2
11038: PUSH
11039: LD_VAR 0 1
11043: GREATER
11044: OR
11045: IFTRUE 11059
11047: PUSH
11048: LD_VAR 0 3
11052: PUSH
11053: LD_VAR 0 1
11057: GREATER
11058: OR
11059: IFFALSE 11063
// exit ;
11061: GO 11359
// if direction then
11063: LD_VAR 0 4
11067: IFFALSE 11131
// begin d := 1 ;
11069: LD_ADDR_VAR 0 9
11073: PUSH
11074: LD_INT 1
11076: ST_TO_ADDR
// if i_from > i_to then
11077: LD_VAR 0 2
11081: PUSH
11082: LD_VAR 0 3
11086: GREATER
11087: IFFALSE 11113
// length := ( array - i_from ) + i_to else
11089: LD_ADDR_VAR 0 11
11093: PUSH
11094: LD_VAR 0 1
11098: PUSH
11099: LD_VAR 0 2
11103: MINUS
11104: PUSH
11105: LD_VAR 0 3
11109: PLUS
11110: ST_TO_ADDR
11111: GO 11129
// length := i_to - i_from ;
11113: LD_ADDR_VAR 0 11
11117: PUSH
11118: LD_VAR 0 3
11122: PUSH
11123: LD_VAR 0 2
11127: MINUS
11128: ST_TO_ADDR
// end else
11129: GO 11192
// begin d := - 1 ;
11131: LD_ADDR_VAR 0 9
11135: PUSH
11136: LD_INT 1
11138: NEG
11139: ST_TO_ADDR
// if i_from > i_to then
11140: LD_VAR 0 2
11144: PUSH
11145: LD_VAR 0 3
11149: GREATER
11150: IFFALSE 11170
// length := i_from - i_to else
11152: LD_ADDR_VAR 0 11
11156: PUSH
11157: LD_VAR 0 2
11161: PUSH
11162: LD_VAR 0 3
11166: MINUS
11167: ST_TO_ADDR
11168: GO 11192
// length := ( array - i_to ) + i_from ;
11170: LD_ADDR_VAR 0 11
11174: PUSH
11175: LD_VAR 0 1
11179: PUSH
11180: LD_VAR 0 3
11184: MINUS
11185: PUSH
11186: LD_VAR 0 2
11190: PLUS
11191: ST_TO_ADDR
// end ; if not length then
11192: LD_VAR 0 11
11196: NOT
11197: IFFALSE 11201
// exit ;
11199: GO 11359
// tmp := array ;
11201: LD_ADDR_VAR 0 10
11205: PUSH
11206: LD_VAR 0 1
11210: ST_TO_ADDR
// for i = 1 to length do
11211: LD_ADDR_VAR 0 6
11215: PUSH
11216: DOUBLE
11217: LD_INT 1
11219: DEC
11220: ST_TO_ADDR
11221: LD_VAR 0 11
11225: PUSH
11226: FOR_TO
11227: IFFALSE 11347
// begin for j = 1 to array do
11229: LD_ADDR_VAR 0 7
11233: PUSH
11234: DOUBLE
11235: LD_INT 1
11237: DEC
11238: ST_TO_ADDR
11239: LD_VAR 0 1
11243: PUSH
11244: FOR_TO
11245: IFFALSE 11333
// begin k := j + d ;
11247: LD_ADDR_VAR 0 8
11251: PUSH
11252: LD_VAR 0 7
11256: PUSH
11257: LD_VAR 0 9
11261: PLUS
11262: ST_TO_ADDR
// if k > array then
11263: LD_VAR 0 8
11267: PUSH
11268: LD_VAR 0 1
11272: GREATER
11273: IFFALSE 11283
// k := 1 ;
11275: LD_ADDR_VAR 0 8
11279: PUSH
11280: LD_INT 1
11282: ST_TO_ADDR
// if not k then
11283: LD_VAR 0 8
11287: NOT
11288: IFFALSE 11300
// k := array ;
11290: LD_ADDR_VAR 0 8
11294: PUSH
11295: LD_VAR 0 1
11299: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11300: LD_ADDR_VAR 0 10
11304: PUSH
11305: LD_VAR 0 10
11309: PPUSH
11310: LD_VAR 0 8
11314: PPUSH
11315: LD_VAR 0 1
11319: PUSH
11320: LD_VAR 0 7
11324: ARRAY
11325: PPUSH
11326: CALL_OW 1
11330: ST_TO_ADDR
// end ;
11331: GO 11244
11333: POP
11334: POP
// array := tmp ;
11335: LD_ADDR_VAR 0 1
11339: PUSH
11340: LD_VAR 0 10
11344: ST_TO_ADDR
// end ;
11345: GO 11226
11347: POP
11348: POP
// result := array ;
11349: LD_ADDR_VAR 0 5
11353: PUSH
11354: LD_VAR 0 1
11358: ST_TO_ADDR
// end ;
11359: LD_VAR 0 5
11363: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11364: LD_INT 0
11366: PPUSH
11367: PPUSH
// result := 0 ;
11368: LD_ADDR_VAR 0 3
11372: PUSH
11373: LD_INT 0
11375: ST_TO_ADDR
// if not array or not value in array then
11376: LD_VAR 0 1
11380: NOT
11381: IFTRUE 11396
11383: PUSH
11384: LD_VAR 0 2
11388: PUSH
11389: LD_VAR 0 1
11393: IN
11394: NOT
11395: OR
11396: IFFALSE 11400
// exit ;
11398: GO 11454
// for i = 1 to array do
11400: LD_ADDR_VAR 0 4
11404: PUSH
11405: DOUBLE
11406: LD_INT 1
11408: DEC
11409: ST_TO_ADDR
11410: LD_VAR 0 1
11414: PUSH
11415: FOR_TO
11416: IFFALSE 11452
// if value = array [ i ] then
11418: LD_VAR 0 2
11422: PUSH
11423: LD_VAR 0 1
11427: PUSH
11428: LD_VAR 0 4
11432: ARRAY
11433: EQUAL
11434: IFFALSE 11450
// begin result := i ;
11436: LD_ADDR_VAR 0 3
11440: PUSH
11441: LD_VAR 0 4
11445: ST_TO_ADDR
// exit ;
11446: POP
11447: POP
11448: GO 11454
// end ;
11450: GO 11415
11452: POP
11453: POP
// end ;
11454: LD_VAR 0 3
11458: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11459: LD_INT 0
11461: PPUSH
// vc_chassis := chassis ;
11462: LD_ADDR_OWVAR 37
11466: PUSH
11467: LD_VAR 0 1
11471: ST_TO_ADDR
// vc_engine := engine ;
11472: LD_ADDR_OWVAR 39
11476: PUSH
11477: LD_VAR 0 2
11481: ST_TO_ADDR
// vc_control := control ;
11482: LD_ADDR_OWVAR 38
11486: PUSH
11487: LD_VAR 0 3
11491: ST_TO_ADDR
// vc_weapon := weapon ;
11492: LD_ADDR_OWVAR 40
11496: PUSH
11497: LD_VAR 0 4
11501: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11502: LD_ADDR_OWVAR 41
11506: PUSH
11507: LD_VAR 0 5
11511: ST_TO_ADDR
// end ;
11512: LD_VAR 0 6
11516: RET
// export function WantPlant ( unit ) ; var task ; begin
11517: LD_INT 0
11519: PPUSH
11520: PPUSH
// result := false ;
11521: LD_ADDR_VAR 0 2
11525: PUSH
11526: LD_INT 0
11528: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11529: LD_ADDR_VAR 0 3
11533: PUSH
11534: LD_VAR 0 1
11538: PPUSH
11539: CALL_OW 437
11543: ST_TO_ADDR
// if task then
11544: LD_VAR 0 3
11548: IFFALSE 11576
// if task [ 1 ] [ 1 ] = p then
11550: LD_VAR 0 3
11554: PUSH
11555: LD_INT 1
11557: ARRAY
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PUSH
11563: LD_STRING p
11565: EQUAL
11566: IFFALSE 11576
// result := true ;
11568: LD_ADDR_VAR 0 2
11572: PUSH
11573: LD_INT 1
11575: ST_TO_ADDR
// end ;
11576: LD_VAR 0 2
11580: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11581: LD_INT 0
11583: PPUSH
11584: PPUSH
11585: PPUSH
11586: PPUSH
// if pos < 1 then
11587: LD_VAR 0 2
11591: PUSH
11592: LD_INT 1
11594: LESS
11595: IFFALSE 11599
// exit ;
11597: GO 11902
// if pos = 1 then
11599: LD_VAR 0 2
11603: PUSH
11604: LD_INT 1
11606: EQUAL
11607: IFFALSE 11640
// result := Replace ( arr , pos [ 1 ] , value ) else
11609: LD_ADDR_VAR 0 4
11613: PUSH
11614: LD_VAR 0 1
11618: PPUSH
11619: LD_VAR 0 2
11623: PUSH
11624: LD_INT 1
11626: ARRAY
11627: PPUSH
11628: LD_VAR 0 3
11632: PPUSH
11633: CALL_OW 1
11637: ST_TO_ADDR
11638: GO 11902
// begin tmp := arr ;
11640: LD_ADDR_VAR 0 6
11644: PUSH
11645: LD_VAR 0 1
11649: ST_TO_ADDR
// s_arr := [ tmp ] ;
11650: LD_ADDR_VAR 0 7
11654: PUSH
11655: LD_VAR 0 6
11659: PUSH
11660: EMPTY
11661: LIST
11662: ST_TO_ADDR
// for i = 1 to pos - 1 do
11663: LD_ADDR_VAR 0 5
11667: PUSH
11668: DOUBLE
11669: LD_INT 1
11671: DEC
11672: ST_TO_ADDR
11673: LD_VAR 0 2
11677: PUSH
11678: LD_INT 1
11680: MINUS
11681: PUSH
11682: FOR_TO
11683: IFFALSE 11728
// begin tmp := tmp [ pos [ i ] ] ;
11685: LD_ADDR_VAR 0 6
11689: PUSH
11690: LD_VAR 0 6
11694: PUSH
11695: LD_VAR 0 2
11699: PUSH
11700: LD_VAR 0 5
11704: ARRAY
11705: ARRAY
11706: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11707: LD_ADDR_VAR 0 7
11711: PUSH
11712: LD_VAR 0 7
11716: PUSH
11717: LD_VAR 0 6
11721: PUSH
11722: EMPTY
11723: LIST
11724: ADD
11725: ST_TO_ADDR
// end ;
11726: GO 11682
11728: POP
11729: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11730: LD_ADDR_VAR 0 6
11734: PUSH
11735: LD_VAR 0 6
11739: PPUSH
11740: LD_VAR 0 2
11744: PUSH
11745: LD_VAR 0 2
11749: ARRAY
11750: PPUSH
11751: LD_VAR 0 3
11755: PPUSH
11756: CALL_OW 1
11760: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11761: LD_ADDR_VAR 0 7
11765: PUSH
11766: LD_VAR 0 7
11770: PPUSH
11771: LD_VAR 0 7
11775: PPUSH
11776: LD_VAR 0 6
11780: PPUSH
11781: CALL_OW 1
11785: ST_TO_ADDR
// for i = s_arr downto 2 do
11786: LD_ADDR_VAR 0 5
11790: PUSH
11791: DOUBLE
11792: LD_VAR 0 7
11796: INC
11797: ST_TO_ADDR
11798: LD_INT 2
11800: PUSH
11801: FOR_DOWNTO
11802: IFFALSE 11886
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11804: LD_ADDR_VAR 0 6
11808: PUSH
11809: LD_VAR 0 7
11813: PUSH
11814: LD_VAR 0 5
11818: PUSH
11819: LD_INT 1
11821: MINUS
11822: ARRAY
11823: PPUSH
11824: LD_VAR 0 2
11828: PUSH
11829: LD_VAR 0 5
11833: PUSH
11834: LD_INT 1
11836: MINUS
11837: ARRAY
11838: PPUSH
11839: LD_VAR 0 7
11843: PUSH
11844: LD_VAR 0 5
11848: ARRAY
11849: PPUSH
11850: CALL_OW 1
11854: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11855: LD_ADDR_VAR 0 7
11859: PUSH
11860: LD_VAR 0 7
11864: PPUSH
11865: LD_VAR 0 5
11869: PUSH
11870: LD_INT 1
11872: MINUS
11873: PPUSH
11874: LD_VAR 0 6
11878: PPUSH
11879: CALL_OW 1
11883: ST_TO_ADDR
// end ;
11884: GO 11801
11886: POP
11887: POP
// result := s_arr [ 1 ] ;
11888: LD_ADDR_VAR 0 4
11892: PUSH
11893: LD_VAR 0 7
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: ST_TO_ADDR
// end ; end ;
11902: LD_VAR 0 4
11906: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11907: LD_INT 0
11909: PPUSH
11910: PPUSH
// if not list then
11911: LD_VAR 0 1
11915: NOT
11916: IFFALSE 11920
// exit ;
11918: GO 12011
// i := list [ pos1 ] ;
11920: LD_ADDR_VAR 0 5
11924: PUSH
11925: LD_VAR 0 1
11929: PUSH
11930: LD_VAR 0 2
11934: ARRAY
11935: ST_TO_ADDR
// if not i then
11936: LD_VAR 0 5
11940: NOT
11941: IFFALSE 11945
// exit ;
11943: GO 12011
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11945: LD_ADDR_VAR 0 1
11949: PUSH
11950: LD_VAR 0 1
11954: PPUSH
11955: LD_VAR 0 2
11959: PPUSH
11960: LD_VAR 0 1
11964: PUSH
11965: LD_VAR 0 3
11969: ARRAY
11970: PPUSH
11971: CALL_OW 1
11975: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11976: LD_ADDR_VAR 0 1
11980: PUSH
11981: LD_VAR 0 1
11985: PPUSH
11986: LD_VAR 0 3
11990: PPUSH
11991: LD_VAR 0 5
11995: PPUSH
11996: CALL_OW 1
12000: ST_TO_ADDR
// result := list ;
12001: LD_ADDR_VAR 0 4
12005: PUSH
12006: LD_VAR 0 1
12010: ST_TO_ADDR
// end ;
12011: LD_VAR 0 4
12015: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
12016: LD_INT 0
12018: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
12019: LD_ADDR_VAR 0 5
12023: PUSH
12024: LD_VAR 0 1
12028: PPUSH
12029: CALL_OW 250
12033: PPUSH
12034: LD_VAR 0 1
12038: PPUSH
12039: CALL_OW 251
12043: PPUSH
12044: LD_VAR 0 2
12048: PPUSH
12049: LD_VAR 0 3
12053: PPUSH
12054: LD_VAR 0 4
12058: PPUSH
12059: CALL 12441 0 5
12063: ST_TO_ADDR
// end ;
12064: LD_VAR 0 5
12068: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
12069: LD_INT 0
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
// if not list or not unit then
12075: LD_VAR 0 2
12079: NOT
12080: IFTRUE 12089
12082: PUSH
12083: LD_VAR 0 1
12087: NOT
12088: OR
12089: IFFALSE 12093
// exit ;
12091: GO 12436
// result := [ ] ;
12093: LD_ADDR_VAR 0 5
12097: PUSH
12098: EMPTY
12099: ST_TO_ADDR
// for i in list do
12100: LD_ADDR_VAR 0 6
12104: PUSH
12105: LD_VAR 0 2
12109: PUSH
12110: FOR_IN
12111: IFFALSE 12329
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
12113: LD_ADDR_VAR 0 8
12117: PUSH
12118: LD_VAR 0 1
12122: PPUSH
12123: LD_VAR 0 6
12127: PUSH
12128: LD_INT 1
12130: ARRAY
12131: PPUSH
12132: LD_VAR 0 6
12136: PUSH
12137: LD_INT 2
12139: ARRAY
12140: PPUSH
12141: CALL_OW 297
12145: ST_TO_ADDR
// if not Count ( result ) then
12146: LD_VAR 0 5
12150: PPUSH
12151: CALL 8663 0 1
12155: NOT
12156: IFFALSE 12189
// begin result := Join ( result , [ i , tmp ] ) ;
12158: LD_ADDR_VAR 0 5
12162: PUSH
12163: LD_VAR 0 5
12167: PPUSH
12168: LD_VAR 0 6
12172: PUSH
12173: LD_VAR 0 8
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL 44639 0 2
12186: ST_TO_ADDR
// continue ;
12187: GO 12110
// end ; if result [ result ] [ 2 ] <= tmp then
12189: LD_VAR 0 5
12193: PUSH
12194: LD_VAR 0 5
12198: ARRAY
12199: PUSH
12200: LD_INT 2
12202: ARRAY
12203: PUSH
12204: LD_VAR 0 8
12208: LESSEQUAL
12209: IFFALSE 12242
// result := Join ( result , [ i , tmp ] ) else
12211: LD_ADDR_VAR 0 5
12215: PUSH
12216: LD_VAR 0 5
12220: PPUSH
12221: LD_VAR 0 6
12225: PUSH
12226: LD_VAR 0 8
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PPUSH
12235: CALL 44639 0 2
12239: ST_TO_ADDR
12240: GO 12327
// begin for j := 1 to Count ( result ) do
12242: LD_ADDR_VAR 0 7
12246: PUSH
12247: DOUBLE
12248: LD_INT 1
12250: DEC
12251: ST_TO_ADDR
12252: LD_VAR 0 5
12256: PPUSH
12257: CALL 8663 0 1
12261: PUSH
12262: FOR_TO
12263: IFFALSE 12325
// begin if tmp < result [ j ] [ 2 ] then
12265: LD_VAR 0 8
12269: PUSH
12270: LD_VAR 0 5
12274: PUSH
12275: LD_VAR 0 7
12279: ARRAY
12280: PUSH
12281: LD_INT 2
12283: ARRAY
12284: LESS
12285: IFFALSE 12323
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12287: LD_ADDR_VAR 0 5
12291: PUSH
12292: LD_VAR 0 5
12296: PPUSH
12297: LD_VAR 0 7
12301: PPUSH
12302: LD_VAR 0 6
12306: PUSH
12307: LD_VAR 0 8
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 2
12320: ST_TO_ADDR
// break ;
12321: GO 12325
// end ; end ;
12323: GO 12262
12325: POP
12326: POP
// end ; end ;
12327: GO 12110
12329: POP
12330: POP
// if result and not asc then
12331: LD_VAR 0 5
12335: IFFALSE 12344
12337: PUSH
12338: LD_VAR 0 3
12342: NOT
12343: AND
12344: IFFALSE 12361
// result := ReverseArray ( result ) ;
12346: LD_ADDR_VAR 0 5
12350: PUSH
12351: LD_VAR 0 5
12355: PPUSH
12356: CALL 39719 0 1
12360: ST_TO_ADDR
// tmp := [ ] ;
12361: LD_ADDR_VAR 0 8
12365: PUSH
12366: EMPTY
12367: ST_TO_ADDR
// if mode then
12368: LD_VAR 0 4
12372: IFFALSE 12436
// begin for i := 1 to result do
12374: LD_ADDR_VAR 0 6
12378: PUSH
12379: DOUBLE
12380: LD_INT 1
12382: DEC
12383: ST_TO_ADDR
12384: LD_VAR 0 5
12388: PUSH
12389: FOR_TO
12390: IFFALSE 12424
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
12392: LD_ADDR_VAR 0 8
12396: PUSH
12397: LD_VAR 0 8
12401: PPUSH
12402: LD_VAR 0 5
12406: PUSH
12407: LD_VAR 0 6
12411: ARRAY
12412: PUSH
12413: LD_INT 1
12415: ARRAY
12416: PPUSH
12417: CALL 44639 0 2
12421: ST_TO_ADDR
12422: GO 12389
12424: POP
12425: POP
// result := tmp ;
12426: LD_ADDR_VAR 0 5
12430: PUSH
12431: LD_VAR 0 8
12435: ST_TO_ADDR
// end ; end ;
12436: LD_VAR 0 5
12440: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
12445: PPUSH
12446: PPUSH
// if not list then
12447: LD_VAR 0 3
12451: NOT
12452: IFFALSE 12456
// exit ;
12454: GO 12846
// result := [ ] ;
12456: LD_ADDR_VAR 0 6
12460: PUSH
12461: EMPTY
12462: ST_TO_ADDR
// for i in list do
12463: LD_ADDR_VAR 0 7
12467: PUSH
12468: LD_VAR 0 3
12472: PUSH
12473: FOR_IN
12474: IFFALSE 12676
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12476: LD_ADDR_VAR 0 9
12480: PUSH
12481: LD_VAR 0 7
12485: PPUSH
12486: LD_VAR 0 1
12490: PPUSH
12491: LD_VAR 0 2
12495: PPUSH
12496: CALL_OW 297
12500: ST_TO_ADDR
// if not result then
12501: LD_VAR 0 6
12505: NOT
12506: IFFALSE 12532
// result := [ [ i , tmp ] ] else
12508: LD_ADDR_VAR 0 6
12512: PUSH
12513: LD_VAR 0 7
12517: PUSH
12518: LD_VAR 0 9
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: PUSH
12527: EMPTY
12528: LIST
12529: ST_TO_ADDR
12530: GO 12674
// begin if result [ result ] [ 2 ] <= tmp then
12532: LD_VAR 0 6
12536: PUSH
12537: LD_VAR 0 6
12541: ARRAY
12542: PUSH
12543: LD_INT 2
12545: ARRAY
12546: PUSH
12547: LD_VAR 0 9
12551: LESSEQUAL
12552: IFFALSE 12594
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12554: LD_ADDR_VAR 0 6
12558: PUSH
12559: LD_VAR 0 6
12563: PPUSH
12564: LD_VAR 0 6
12568: PUSH
12569: LD_INT 1
12571: PLUS
12572: PPUSH
12573: LD_VAR 0 7
12577: PUSH
12578: LD_VAR 0 9
12582: PUSH
12583: EMPTY
12584: LIST
12585: LIST
12586: PPUSH
12587: CALL_OW 2
12591: ST_TO_ADDR
12592: GO 12674
// for j := 1 to result do
12594: LD_ADDR_VAR 0 8
12598: PUSH
12599: DOUBLE
12600: LD_INT 1
12602: DEC
12603: ST_TO_ADDR
12604: LD_VAR 0 6
12608: PUSH
12609: FOR_TO
12610: IFFALSE 12672
// begin if tmp < result [ j ] [ 2 ] then
12612: LD_VAR 0 9
12616: PUSH
12617: LD_VAR 0 6
12621: PUSH
12622: LD_VAR 0 8
12626: ARRAY
12627: PUSH
12628: LD_INT 2
12630: ARRAY
12631: LESS
12632: IFFALSE 12670
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12634: LD_ADDR_VAR 0 6
12638: PUSH
12639: LD_VAR 0 6
12643: PPUSH
12644: LD_VAR 0 8
12648: PPUSH
12649: LD_VAR 0 7
12653: PUSH
12654: LD_VAR 0 9
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 2
12667: ST_TO_ADDR
// break ;
12668: GO 12672
// end ; end ;
12670: GO 12609
12672: POP
12673: POP
// end ; end ;
12674: GO 12473
12676: POP
12677: POP
// if result and not asc then
12678: LD_VAR 0 6
12682: IFFALSE 12691
12684: PUSH
12685: LD_VAR 0 4
12689: NOT
12690: AND
12691: IFFALSE 12766
// begin tmp := result ;
12693: LD_ADDR_VAR 0 9
12697: PUSH
12698: LD_VAR 0 6
12702: ST_TO_ADDR
// for i = tmp downto 1 do
12703: LD_ADDR_VAR 0 7
12707: PUSH
12708: DOUBLE
12709: LD_VAR 0 9
12713: INC
12714: ST_TO_ADDR
12715: LD_INT 1
12717: PUSH
12718: FOR_DOWNTO
12719: IFFALSE 12764
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12721: LD_ADDR_VAR 0 6
12725: PUSH
12726: LD_VAR 0 6
12730: PPUSH
12731: LD_VAR 0 9
12735: PUSH
12736: LD_VAR 0 7
12740: MINUS
12741: PUSH
12742: LD_INT 1
12744: PLUS
12745: PPUSH
12746: LD_VAR 0 9
12750: PUSH
12751: LD_VAR 0 7
12755: ARRAY
12756: PPUSH
12757: CALL_OW 1
12761: ST_TO_ADDR
12762: GO 12718
12764: POP
12765: POP
// end ; tmp := [ ] ;
12766: LD_ADDR_VAR 0 9
12770: PUSH
12771: EMPTY
12772: ST_TO_ADDR
// if mode then
12773: LD_VAR 0 5
12777: IFFALSE 12846
// begin for i = 1 to result do
12779: LD_ADDR_VAR 0 7
12783: PUSH
12784: DOUBLE
12785: LD_INT 1
12787: DEC
12788: ST_TO_ADDR
12789: LD_VAR 0 6
12793: PUSH
12794: FOR_TO
12795: IFFALSE 12834
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12797: LD_ADDR_VAR 0 9
12801: PUSH
12802: LD_VAR 0 9
12806: PPUSH
12807: LD_VAR 0 7
12811: PPUSH
12812: LD_VAR 0 6
12816: PUSH
12817: LD_VAR 0 7
12821: ARRAY
12822: PUSH
12823: LD_INT 1
12825: ARRAY
12826: PPUSH
12827: CALL_OW 1
12831: ST_TO_ADDR
12832: GO 12794
12834: POP
12835: POP
// result := tmp ;
12836: LD_ADDR_VAR 0 6
12840: PUSH
12841: LD_VAR 0 9
12845: ST_TO_ADDR
// end ; end ;
12846: LD_VAR 0 6
12850: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12851: LD_INT 0
12853: PPUSH
12854: PPUSH
12855: PPUSH
12856: PPUSH
12857: PPUSH
12858: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12859: LD_ADDR_VAR 0 5
12863: PUSH
12864: LD_INT 0
12866: PUSH
12867: LD_INT 0
12869: PUSH
12870: LD_INT 0
12872: PUSH
12873: EMPTY
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: ST_TO_ADDR
// if not x or not y then
12881: LD_VAR 0 2
12885: NOT
12886: IFTRUE 12895
12888: PUSH
12889: LD_VAR 0 3
12893: NOT
12894: OR
12895: IFFALSE 12899
// exit ;
12897: GO 14555
// if not range then
12899: LD_VAR 0 4
12903: NOT
12904: IFFALSE 12914
// range := 10 ;
12906: LD_ADDR_VAR 0 4
12910: PUSH
12911: LD_INT 10
12913: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12914: LD_ADDR_VAR 0 8
12918: PUSH
12919: LD_INT 81
12921: PUSH
12922: LD_VAR 0 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 92
12933: PUSH
12934: LD_VAR 0 2
12938: PUSH
12939: LD_VAR 0 3
12943: PUSH
12944: LD_VAR 0 4
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: LD_INT 3
12957: PUSH
12958: LD_INT 21
12960: PUSH
12961: LD_INT 3
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: PPUSH
12977: CALL_OW 69
12981: ST_TO_ADDR
// if not tmp then
12982: LD_VAR 0 8
12986: NOT
12987: IFFALSE 12991
// exit ;
12989: GO 14555
// for i in tmp do
12991: LD_ADDR_VAR 0 6
12995: PUSH
12996: LD_VAR 0 8
13000: PUSH
13001: FOR_IN
13002: IFFALSE 14530
// begin points := [ 0 , 0 , 0 ] ;
13004: LD_ADDR_VAR 0 9
13008: PUSH
13009: LD_INT 0
13011: PUSH
13012: LD_INT 0
13014: PUSH
13015: LD_INT 0
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: ST_TO_ADDR
// bpoints := 1 ;
13023: LD_ADDR_VAR 0 10
13027: PUSH
13028: LD_INT 1
13030: ST_TO_ADDR
// case GetType ( i ) of unit_human :
13031: LD_VAR 0 6
13035: PPUSH
13036: CALL_OW 247
13040: PUSH
13041: LD_INT 1
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13631
13049: POP
// begin if GetClass ( i ) = 1 then
13050: LD_VAR 0 6
13054: PPUSH
13055: CALL_OW 257
13059: PUSH
13060: LD_INT 1
13062: EQUAL
13063: IFFALSE 13084
// points := [ 10 , 5 , 3 ] ;
13065: LD_ADDR_VAR 0 9
13069: PUSH
13070: LD_INT 10
13072: PUSH
13073: LD_INT 5
13075: PUSH
13076: LD_INT 3
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: LIST
13083: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
13084: LD_VAR 0 6
13088: PPUSH
13089: CALL_OW 257
13093: PUSH
13094: LD_INT 2
13096: PUSH
13097: LD_INT 3
13099: PUSH
13100: LD_INT 4
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: IN
13108: IFFALSE 13129
// points := [ 3 , 2 , 1 ] ;
13110: LD_ADDR_VAR 0 9
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: LD_INT 1
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: ST_TO_ADDR
// if GetClass ( i ) = 5 then
13129: LD_VAR 0 6
13133: PPUSH
13134: CALL_OW 257
13138: PUSH
13139: LD_INT 5
13141: EQUAL
13142: IFFALSE 13163
// points := [ 130 , 5 , 2 ] ;
13144: LD_ADDR_VAR 0 9
13148: PUSH
13149: LD_INT 130
13151: PUSH
13152: LD_INT 5
13154: PUSH
13155: LD_INT 2
13157: PUSH
13158: EMPTY
13159: LIST
13160: LIST
13161: LIST
13162: ST_TO_ADDR
// if GetClass ( i ) = 8 then
13163: LD_VAR 0 6
13167: PPUSH
13168: CALL_OW 257
13172: PUSH
13173: LD_INT 8
13175: EQUAL
13176: IFFALSE 13197
// points := [ 35 , 35 , 30 ] ;
13178: LD_ADDR_VAR 0 9
13182: PUSH
13183: LD_INT 35
13185: PUSH
13186: LD_INT 35
13188: PUSH
13189: LD_INT 30
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: LIST
13196: ST_TO_ADDR
// if GetClass ( i ) = 9 then
13197: LD_VAR 0 6
13201: PPUSH
13202: CALL_OW 257
13206: PUSH
13207: LD_INT 9
13209: EQUAL
13210: IFFALSE 13231
// points := [ 20 , 55 , 40 ] ;
13212: LD_ADDR_VAR 0 9
13216: PUSH
13217: LD_INT 20
13219: PUSH
13220: LD_INT 55
13222: PUSH
13223: LD_INT 40
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
13231: LD_VAR 0 6
13235: PPUSH
13236: CALL_OW 257
13240: PUSH
13241: LD_INT 12
13243: PUSH
13244: LD_INT 16
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: IN
13251: IFFALSE 13272
// points := [ 5 , 3 , 2 ] ;
13253: LD_ADDR_VAR 0 9
13257: PUSH
13258: LD_INT 5
13260: PUSH
13261: LD_INT 3
13263: PUSH
13264: LD_INT 2
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: LIST
13271: ST_TO_ADDR
// if GetClass ( i ) = 17 then
13272: LD_VAR 0 6
13276: PPUSH
13277: CALL_OW 257
13281: PUSH
13282: LD_INT 17
13284: EQUAL
13285: IFFALSE 13306
// points := [ 100 , 50 , 75 ] ;
13287: LD_ADDR_VAR 0 9
13291: PUSH
13292: LD_INT 100
13294: PUSH
13295: LD_INT 50
13297: PUSH
13298: LD_INT 75
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: LIST
13305: ST_TO_ADDR
// if GetClass ( i ) = 15 then
13306: LD_VAR 0 6
13310: PPUSH
13311: CALL_OW 257
13315: PUSH
13316: LD_INT 15
13318: EQUAL
13319: IFFALSE 13340
// points := [ 10 , 5 , 3 ] ;
13321: LD_ADDR_VAR 0 9
13325: PUSH
13326: LD_INT 10
13328: PUSH
13329: LD_INT 5
13331: PUSH
13332: LD_INT 3
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: ST_TO_ADDR
// if GetClass ( i ) = 14 then
13340: LD_VAR 0 6
13344: PPUSH
13345: CALL_OW 257
13349: PUSH
13350: LD_INT 14
13352: EQUAL
13353: IFFALSE 13374
// points := [ 10 , 0 , 0 ] ;
13355: LD_ADDR_VAR 0 9
13359: PUSH
13360: LD_INT 10
13362: PUSH
13363: LD_INT 0
13365: PUSH
13366: LD_INT 0
13368: PUSH
13369: EMPTY
13370: LIST
13371: LIST
13372: LIST
13373: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13374: LD_VAR 0 6
13378: PPUSH
13379: CALL_OW 257
13383: PUSH
13384: LD_INT 11
13386: EQUAL
13387: IFFALSE 13408
// points := [ 30 , 10 , 5 ] ;
13389: LD_ADDR_VAR 0 9
13393: PUSH
13394: LD_INT 30
13396: PUSH
13397: LD_INT 10
13399: PUSH
13400: LD_INT 5
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: LIST
13407: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13408: LD_VAR 0 1
13412: PPUSH
13413: LD_INT 5
13415: PPUSH
13416: CALL_OW 321
13420: PUSH
13421: LD_INT 2
13423: EQUAL
13424: IFFALSE 13441
// bpoints := bpoints * 1.8 ;
13426: LD_ADDR_VAR 0 10
13430: PUSH
13431: LD_VAR 0 10
13435: PUSH
13436: LD_REAL  1.80000000000000E+0000
13439: MUL
13440: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13441: LD_VAR 0 6
13445: PPUSH
13446: CALL_OW 257
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: LD_INT 2
13456: PUSH
13457: LD_INT 3
13459: PUSH
13460: LD_INT 4
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: IN
13469: IFFALSE 13489
13471: PUSH
13472: LD_VAR 0 1
13476: PPUSH
13477: LD_INT 51
13479: PPUSH
13480: CALL_OW 321
13484: PUSH
13485: LD_INT 2
13487: EQUAL
13488: AND
13489: IFFALSE 13506
// bpoints := bpoints * 1.2 ;
13491: LD_ADDR_VAR 0 10
13495: PUSH
13496: LD_VAR 0 10
13500: PUSH
13501: LD_REAL  1.20000000000000E+0000
13504: MUL
13505: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13506: LD_VAR 0 6
13510: PPUSH
13511: CALL_OW 257
13515: PUSH
13516: LD_INT 5
13518: PUSH
13519: LD_INT 7
13521: PUSH
13522: LD_INT 9
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: IN
13530: IFFALSE 13550
13532: PUSH
13533: LD_VAR 0 1
13537: PPUSH
13538: LD_INT 52
13540: PPUSH
13541: CALL_OW 321
13545: PUSH
13546: LD_INT 2
13548: EQUAL
13549: AND
13550: IFFALSE 13567
// bpoints := bpoints * 1.5 ;
13552: LD_ADDR_VAR 0 10
13556: PUSH
13557: LD_VAR 0 10
13561: PUSH
13562: LD_REAL  1.50000000000000E+0000
13565: MUL
13566: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13567: LD_VAR 0 1
13571: PPUSH
13572: LD_INT 66
13574: PPUSH
13575: CALL_OW 321
13579: PUSH
13580: LD_INT 2
13582: EQUAL
13583: IFFALSE 13600
// bpoints := bpoints * 1.1 ;
13585: LD_ADDR_VAR 0 10
13589: PUSH
13590: LD_VAR 0 10
13594: PUSH
13595: LD_REAL  1.10000000000000E+0000
13598: MUL
13599: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13600: LD_ADDR_VAR 0 10
13604: PUSH
13605: LD_VAR 0 10
13609: PUSH
13610: LD_VAR 0 6
13614: PPUSH
13615: LD_INT 1
13617: PPUSH
13618: CALL_OW 259
13622: PUSH
13623: LD_REAL  1.15000000000000E+0000
13626: MUL
13627: MUL
13628: ST_TO_ADDR
// end ; unit_vehicle :
13629: GO 14459
13631: LD_INT 2
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 14447
13639: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13640: LD_VAR 0 6
13644: PPUSH
13645: CALL_OW 264
13649: PUSH
13650: LD_INT 2
13652: PUSH
13653: LD_INT 42
13655: PUSH
13656: LD_INT 24
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: IN
13664: IFFALSE 13685
// points := [ 25 , 5 , 3 ] ;
13666: LD_ADDR_VAR 0 9
13670: PUSH
13671: LD_INT 25
13673: PUSH
13674: LD_INT 5
13676: PUSH
13677: LD_INT 3
13679: PUSH
13680: EMPTY
13681: LIST
13682: LIST
13683: LIST
13684: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13685: LD_VAR 0 6
13689: PPUSH
13690: CALL_OW 264
13694: PUSH
13695: LD_INT 4
13697: PUSH
13698: LD_INT 43
13700: PUSH
13701: LD_INT 25
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: LIST
13708: IN
13709: IFFALSE 13730
// points := [ 40 , 15 , 5 ] ;
13711: LD_ADDR_VAR 0 9
13715: PUSH
13716: LD_INT 40
13718: PUSH
13719: LD_INT 15
13721: PUSH
13722: LD_INT 5
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13730: LD_VAR 0 6
13734: PPUSH
13735: CALL_OW 264
13739: PUSH
13740: LD_INT 3
13742: PUSH
13743: LD_INT 23
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: IN
13750: IFFALSE 13771
// points := [ 7 , 25 , 8 ] ;
13752: LD_ADDR_VAR 0 9
13756: PUSH
13757: LD_INT 7
13759: PUSH
13760: LD_INT 25
13762: PUSH
13763: LD_INT 8
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: LIST
13770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13771: LD_VAR 0 6
13775: PPUSH
13776: CALL_OW 264
13780: PUSH
13781: LD_INT 5
13783: PUSH
13784: LD_INT 27
13786: PUSH
13787: LD_INT 44
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: IN
13795: IFFALSE 13816
// points := [ 14 , 50 , 16 ] ;
13797: LD_ADDR_VAR 0 9
13801: PUSH
13802: LD_INT 14
13804: PUSH
13805: LD_INT 50
13807: PUSH
13808: LD_INT 16
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13816: LD_VAR 0 6
13820: PPUSH
13821: CALL_OW 264
13825: PUSH
13826: LD_INT 6
13828: PUSH
13829: LD_INT 46
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: IN
13836: IFFALSE 13857
// points := [ 32 , 120 , 70 ] ;
13838: LD_ADDR_VAR 0 9
13842: PUSH
13843: LD_INT 32
13845: PUSH
13846: LD_INT 120
13848: PUSH
13849: LD_INT 70
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: LIST
13856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13857: LD_VAR 0 6
13861: PPUSH
13862: CALL_OW 264
13866: PUSH
13867: LD_INT 7
13869: PUSH
13870: LD_INT 28
13872: PUSH
13873: LD_INT 45
13875: PUSH
13876: LD_INT 92
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: IN
13885: IFFALSE 13906
// points := [ 35 , 20 , 45 ] ;
13887: LD_ADDR_VAR 0 9
13891: PUSH
13892: LD_INT 35
13894: PUSH
13895: LD_INT 20
13897: PUSH
13898: LD_INT 45
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13906: LD_VAR 0 6
13910: PPUSH
13911: CALL_OW 264
13915: PUSH
13916: LD_INT 47
13918: PUSH
13919: EMPTY
13920: LIST
13921: IN
13922: IFFALSE 13943
// points := [ 67 , 45 , 75 ] ;
13924: LD_ADDR_VAR 0 9
13928: PUSH
13929: LD_INT 67
13931: PUSH
13932: LD_INT 45
13934: PUSH
13935: LD_INT 75
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13943: LD_VAR 0 6
13947: PPUSH
13948: CALL_OW 264
13952: PUSH
13953: LD_INT 26
13955: PUSH
13956: EMPTY
13957: LIST
13958: IN
13959: IFFALSE 13980
// points := [ 120 , 30 , 80 ] ;
13961: LD_ADDR_VAR 0 9
13965: PUSH
13966: LD_INT 120
13968: PUSH
13969: LD_INT 30
13971: PUSH
13972: LD_INT 80
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13980: LD_VAR 0 6
13984: PPUSH
13985: CALL_OW 264
13989: PUSH
13990: LD_INT 22
13992: PUSH
13993: EMPTY
13994: LIST
13995: IN
13996: IFFALSE 14017
// points := [ 40 , 1 , 1 ] ;
13998: LD_ADDR_VAR 0 9
14002: PUSH
14003: LD_INT 40
14005: PUSH
14006: LD_INT 1
14008: PUSH
14009: LD_INT 1
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: LIST
14016: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
14017: LD_VAR 0 6
14021: PPUSH
14022: CALL_OW 264
14026: PUSH
14027: LD_INT 29
14029: PUSH
14030: EMPTY
14031: LIST
14032: IN
14033: IFFALSE 14054
// points := [ 70 , 200 , 400 ] ;
14035: LD_ADDR_VAR 0 9
14039: PUSH
14040: LD_INT 70
14042: PUSH
14043: LD_INT 200
14045: PUSH
14046: LD_INT 400
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
14054: LD_VAR 0 6
14058: PPUSH
14059: CALL_OW 264
14063: PUSH
14064: LD_INT 14
14066: PUSH
14067: LD_INT 53
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: IN
14074: IFFALSE 14095
// points := [ 40 , 10 , 20 ] ;
14076: LD_ADDR_VAR 0 9
14080: PUSH
14081: LD_INT 40
14083: PUSH
14084: LD_INT 10
14086: PUSH
14087: LD_INT 20
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: LIST
14094: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
14095: LD_VAR 0 6
14099: PPUSH
14100: CALL_OW 264
14104: PUSH
14105: LD_INT 9
14107: PUSH
14108: EMPTY
14109: LIST
14110: IN
14111: IFFALSE 14132
// points := [ 5 , 70 , 20 ] ;
14113: LD_ADDR_VAR 0 9
14117: PUSH
14118: LD_INT 5
14120: PUSH
14121: LD_INT 70
14123: PUSH
14124: LD_INT 20
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: LIST
14131: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
14132: LD_VAR 0 6
14136: PPUSH
14137: CALL_OW 264
14141: PUSH
14142: LD_INT 10
14144: PUSH
14145: EMPTY
14146: LIST
14147: IN
14148: IFFALSE 14169
// points := [ 35 , 110 , 70 ] ;
14150: LD_ADDR_VAR 0 9
14154: PUSH
14155: LD_INT 35
14157: PUSH
14158: LD_INT 110
14160: PUSH
14161: LD_INT 70
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: LIST
14168: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
14169: LD_VAR 0 6
14173: PPUSH
14174: CALL_OW 265
14178: PUSH
14179: LD_INT 25
14181: EQUAL
14182: IFFALSE 14203
// points := [ 80 , 65 , 100 ] ;
14184: LD_ADDR_VAR 0 9
14188: PUSH
14189: LD_INT 80
14191: PUSH
14192: LD_INT 65
14194: PUSH
14195: LD_INT 100
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: LIST
14202: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
14203: LD_VAR 0 6
14207: PPUSH
14208: CALL_OW 263
14212: PUSH
14213: LD_INT 1
14215: EQUAL
14216: IFFALSE 14251
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14218: LD_ADDR_VAR 0 10
14222: PUSH
14223: LD_VAR 0 10
14227: PUSH
14228: LD_VAR 0 6
14232: PPUSH
14233: CALL_OW 311
14237: PPUSH
14238: LD_INT 3
14240: PPUSH
14241: CALL_OW 259
14245: PUSH
14246: LD_INT 4
14248: MUL
14249: MUL
14250: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
14251: LD_VAR 0 6
14255: PPUSH
14256: CALL_OW 263
14260: PUSH
14261: LD_INT 2
14263: EQUAL
14264: IFFALSE 14315
// begin j := IsControledBy ( i ) ;
14266: LD_ADDR_VAR 0 7
14270: PUSH
14271: LD_VAR 0 6
14275: PPUSH
14276: CALL_OW 312
14280: ST_TO_ADDR
// if j then
14281: LD_VAR 0 7
14285: IFFALSE 14315
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
14287: LD_ADDR_VAR 0 10
14291: PUSH
14292: LD_VAR 0 10
14296: PUSH
14297: LD_VAR 0 7
14301: PPUSH
14302: LD_INT 3
14304: PPUSH
14305: CALL_OW 259
14309: PUSH
14310: LD_INT 3
14312: MUL
14313: MUL
14314: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
14315: LD_VAR 0 6
14319: PPUSH
14320: CALL_OW 264
14324: PUSH
14325: LD_INT 5
14327: PUSH
14328: LD_INT 6
14330: PUSH
14331: LD_INT 46
14333: PUSH
14334: LD_INT 44
14336: PUSH
14337: LD_INT 47
14339: PUSH
14340: LD_INT 45
14342: PUSH
14343: LD_INT 28
14345: PUSH
14346: LD_INT 7
14348: PUSH
14349: LD_INT 27
14351: PUSH
14352: LD_INT 29
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: IN
14367: IFFALSE 14387
14369: PUSH
14370: LD_VAR 0 1
14374: PPUSH
14375: LD_INT 52
14377: PPUSH
14378: CALL_OW 321
14382: PUSH
14383: LD_INT 2
14385: EQUAL
14386: AND
14387: IFFALSE 14404
// bpoints := bpoints * 1.2 ;
14389: LD_ADDR_VAR 0 10
14393: PUSH
14394: LD_VAR 0 10
14398: PUSH
14399: LD_REAL  1.20000000000000E+0000
14402: MUL
14403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14404: LD_VAR 0 6
14408: PPUSH
14409: CALL_OW 264
14413: PUSH
14414: LD_INT 6
14416: PUSH
14417: LD_INT 46
14419: PUSH
14420: LD_INT 47
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: IN
14428: IFFALSE 14445
// bpoints := bpoints * 1.2 ;
14430: LD_ADDR_VAR 0 10
14434: PUSH
14435: LD_VAR 0 10
14439: PUSH
14440: LD_REAL  1.20000000000000E+0000
14443: MUL
14444: ST_TO_ADDR
// end ; unit_building :
14445: GO 14459
14447: LD_INT 3
14449: DOUBLE
14450: EQUAL
14451: IFTRUE 14455
14453: GO 14458
14455: POP
// ; end ;
14456: GO 14459
14458: POP
// for j = 1 to 3 do
14459: LD_ADDR_VAR 0 7
14463: PUSH
14464: DOUBLE
14465: LD_INT 1
14467: DEC
14468: ST_TO_ADDR
14469: LD_INT 3
14471: PUSH
14472: FOR_TO
14473: IFFALSE 14526
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14475: LD_ADDR_VAR 0 5
14479: PUSH
14480: LD_VAR 0 5
14484: PPUSH
14485: LD_VAR 0 7
14489: PPUSH
14490: LD_VAR 0 5
14494: PUSH
14495: LD_VAR 0 7
14499: ARRAY
14500: PUSH
14501: LD_VAR 0 9
14505: PUSH
14506: LD_VAR 0 7
14510: ARRAY
14511: PUSH
14512: LD_VAR 0 10
14516: MUL
14517: PLUS
14518: PPUSH
14519: CALL_OW 1
14523: ST_TO_ADDR
14524: GO 14472
14526: POP
14527: POP
// end ;
14528: GO 13001
14530: POP
14531: POP
// result := Replace ( result , 4 , tmp ) ;
14532: LD_ADDR_VAR 0 5
14536: PUSH
14537: LD_VAR 0 5
14541: PPUSH
14542: LD_INT 4
14544: PPUSH
14545: LD_VAR 0 8
14549: PPUSH
14550: CALL_OW 1
14554: ST_TO_ADDR
// end ;
14555: LD_VAR 0 5
14559: RET
// export function DangerAtRange ( unit , range ) ; begin
14560: LD_INT 0
14562: PPUSH
// if not unit then
14563: LD_VAR 0 1
14567: NOT
14568: IFFALSE 14572
// exit ;
14570: GO 14617
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14572: LD_ADDR_VAR 0 3
14576: PUSH
14577: LD_VAR 0 1
14581: PPUSH
14582: CALL_OW 255
14586: PPUSH
14587: LD_VAR 0 1
14591: PPUSH
14592: CALL_OW 250
14596: PPUSH
14597: LD_VAR 0 1
14601: PPUSH
14602: CALL_OW 251
14606: PPUSH
14607: LD_VAR 0 2
14611: PPUSH
14612: CALL 12851 0 4
14616: ST_TO_ADDR
// end ;
14617: LD_VAR 0 3
14621: RET
// export function DangerInArea ( side , area ) ; begin
14622: LD_INT 0
14624: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14625: LD_ADDR_VAR 0 3
14629: PUSH
14630: LD_VAR 0 2
14634: PPUSH
14635: LD_INT 81
14637: PUSH
14638: LD_VAR 0 1
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PPUSH
14647: CALL_OW 70
14651: ST_TO_ADDR
// end ;
14652: LD_VAR 0 3
14656: RET
// export function IsExtension ( b ) ; begin
14657: LD_INT 0
14659: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14660: LD_ADDR_VAR 0 2
14664: PUSH
14665: LD_VAR 0 1
14669: PUSH
14670: LD_INT 23
14672: PUSH
14673: LD_INT 20
14675: PUSH
14676: LD_INT 22
14678: PUSH
14679: LD_INT 17
14681: PUSH
14682: LD_INT 24
14684: PUSH
14685: LD_INT 21
14687: PUSH
14688: LD_INT 19
14690: PUSH
14691: LD_INT 16
14693: PUSH
14694: LD_INT 25
14696: PUSH
14697: LD_INT 18
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: IN
14712: ST_TO_ADDR
// end ;
14713: LD_VAR 0 2
14717: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14718: LD_INT 0
14720: PPUSH
14721: PPUSH
14722: PPUSH
// result := [ ] ;
14723: LD_ADDR_VAR 0 4
14727: PUSH
14728: EMPTY
14729: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14730: LD_ADDR_VAR 0 5
14734: PUSH
14735: LD_VAR 0 2
14739: PPUSH
14740: LD_INT 21
14742: PUSH
14743: LD_INT 3
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PPUSH
14750: CALL_OW 70
14754: ST_TO_ADDR
// if not tmp then
14755: LD_VAR 0 5
14759: NOT
14760: IFFALSE 14764
// exit ;
14762: GO 14828
// if checkLink then
14764: LD_VAR 0 3
14768: IFFALSE 14818
// begin for i in tmp do
14770: LD_ADDR_VAR 0 6
14774: PUSH
14775: LD_VAR 0 5
14779: PUSH
14780: FOR_IN
14781: IFFALSE 14816
// if GetBase ( i ) <> base then
14783: LD_VAR 0 6
14787: PPUSH
14788: CALL_OW 274
14792: PUSH
14793: LD_VAR 0 1
14797: NONEQUAL
14798: IFFALSE 14814
// ComLinkToBase ( base , i ) ;
14800: LD_VAR 0 1
14804: PPUSH
14805: LD_VAR 0 6
14809: PPUSH
14810: CALL_OW 169
14814: GO 14780
14816: POP
14817: POP
// end ; result := tmp ;
14818: LD_ADDR_VAR 0 4
14822: PUSH
14823: LD_VAR 0 5
14827: ST_TO_ADDR
// end ;
14828: LD_VAR 0 4
14832: RET
// export function ComComplete ( units , b ) ; var i ; begin
14833: LD_INT 0
14835: PPUSH
14836: PPUSH
// if not units then
14837: LD_VAR 0 1
14841: NOT
14842: IFFALSE 14846
// exit ;
14844: GO 14936
// for i in units do
14846: LD_ADDR_VAR 0 4
14850: PUSH
14851: LD_VAR 0 1
14855: PUSH
14856: FOR_IN
14857: IFFALSE 14934
// if BuildingStatus ( b ) = bs_build then
14859: LD_VAR 0 2
14863: PPUSH
14864: CALL_OW 461
14868: PUSH
14869: LD_INT 1
14871: EQUAL
14872: IFFALSE 14932
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14874: LD_VAR 0 4
14878: PPUSH
14879: LD_STRING h
14881: PUSH
14882: LD_VAR 0 2
14886: PPUSH
14887: CALL_OW 250
14891: PUSH
14892: LD_VAR 0 2
14896: PPUSH
14897: CALL_OW 251
14901: PUSH
14902: LD_VAR 0 2
14906: PUSH
14907: LD_INT 0
14909: PUSH
14910: LD_INT 0
14912: PUSH
14913: LD_INT 0
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: PPUSH
14928: CALL_OW 446
14932: GO 14856
14934: POP
14935: POP
// end ;
14936: LD_VAR 0 3
14940: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14941: LD_INT 0
14943: PPUSH
14944: PPUSH
14945: PPUSH
14946: PPUSH
14947: PPUSH
14948: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14949: LD_VAR 0 1
14953: NOT
14954: IFTRUE 14971
14956: PUSH
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL_OW 263
14966: PUSH
14967: LD_INT 2
14969: NONEQUAL
14970: OR
14971: IFFALSE 14975
// exit ;
14973: GO 15291
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14975: LD_ADDR_VAR 0 6
14979: PUSH
14980: LD_INT 22
14982: PUSH
14983: LD_VAR 0 1
14987: PPUSH
14988: CALL_OW 255
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 2
14999: PUSH
15000: LD_INT 30
15002: PUSH
15003: LD_INT 36
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 34
15012: PUSH
15013: LD_INT 31
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PPUSH
15029: CALL_OW 69
15033: ST_TO_ADDR
// if not tmp then
15034: LD_VAR 0 6
15038: NOT
15039: IFFALSE 15043
// exit ;
15041: GO 15291
// result := [ ] ;
15043: LD_ADDR_VAR 0 2
15047: PUSH
15048: EMPTY
15049: ST_TO_ADDR
// for i in tmp do
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_VAR 0 6
15059: PUSH
15060: FOR_IN
15061: IFFALSE 15132
// begin t := UnitsInside ( i ) ;
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: LD_VAR 0 3
15072: PPUSH
15073: CALL_OW 313
15077: ST_TO_ADDR
// if t then
15078: LD_VAR 0 4
15082: IFFALSE 15130
// for j in t do
15084: LD_ADDR_VAR 0 7
15088: PUSH
15089: LD_VAR 0 4
15093: PUSH
15094: FOR_IN
15095: IFFALSE 15128
// result := Replace ( result , result + 1 , j ) ;
15097: LD_ADDR_VAR 0 2
15101: PUSH
15102: LD_VAR 0 2
15106: PPUSH
15107: LD_VAR 0 2
15111: PUSH
15112: LD_INT 1
15114: PLUS
15115: PPUSH
15116: LD_VAR 0 7
15120: PPUSH
15121: CALL_OW 1
15125: ST_TO_ADDR
15126: GO 15094
15128: POP
15129: POP
// end ;
15130: GO 15060
15132: POP
15133: POP
// if not result then
15134: LD_VAR 0 2
15138: NOT
15139: IFFALSE 15143
// exit ;
15141: GO 15291
// mech := result [ 1 ] ;
15143: LD_ADDR_VAR 0 5
15147: PUSH
15148: LD_VAR 0 2
15152: PUSH
15153: LD_INT 1
15155: ARRAY
15156: ST_TO_ADDR
// if result > 1 then
15157: LD_VAR 0 2
15161: PUSH
15162: LD_INT 1
15164: GREATER
15165: IFFALSE 15277
// begin for i = 2 to result do
15167: LD_ADDR_VAR 0 3
15171: PUSH
15172: DOUBLE
15173: LD_INT 2
15175: DEC
15176: ST_TO_ADDR
15177: LD_VAR 0 2
15181: PUSH
15182: FOR_TO
15183: IFFALSE 15275
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
15185: LD_ADDR_VAR 0 4
15189: PUSH
15190: LD_VAR 0 2
15194: PUSH
15195: LD_VAR 0 3
15199: ARRAY
15200: PPUSH
15201: LD_INT 3
15203: PPUSH
15204: CALL_OW 259
15208: PUSH
15209: LD_VAR 0 2
15213: PUSH
15214: LD_VAR 0 3
15218: ARRAY
15219: PPUSH
15220: CALL_OW 432
15224: MINUS
15225: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15226: LD_VAR 0 4
15230: PUSH
15231: LD_VAR 0 5
15235: PPUSH
15236: LD_INT 3
15238: PPUSH
15239: CALL_OW 259
15243: PUSH
15244: LD_VAR 0 5
15248: PPUSH
15249: CALL_OW 432
15253: MINUS
15254: GREATEREQUAL
15255: IFFALSE 15273
// mech := result [ i ] ;
15257: LD_ADDR_VAR 0 5
15261: PUSH
15262: LD_VAR 0 2
15266: PUSH
15267: LD_VAR 0 3
15271: ARRAY
15272: ST_TO_ADDR
// end ;
15273: GO 15182
15275: POP
15276: POP
// end ; ComLinkTo ( vehicle , mech ) ;
15277: LD_VAR 0 1
15281: PPUSH
15282: LD_VAR 0 5
15286: PPUSH
15287: CALL_OW 135
// end ;
15291: LD_VAR 0 2
15295: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
15296: LD_INT 0
15298: PPUSH
15299: PPUSH
15300: PPUSH
15301: PPUSH
15302: PPUSH
15303: PPUSH
15304: PPUSH
15305: PPUSH
15306: PPUSH
15307: PPUSH
15308: PPUSH
15309: PPUSH
15310: PPUSH
// result := [ ] ;
15311: LD_ADDR_VAR 0 7
15315: PUSH
15316: EMPTY
15317: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
15318: LD_VAR 0 1
15322: PPUSH
15323: CALL_OW 266
15327: PUSH
15328: LD_INT 0
15330: PUSH
15331: LD_INT 1
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: IN
15338: NOT
15339: IFFALSE 15343
// exit ;
15341: GO 16983
// if name then
15343: LD_VAR 0 3
15347: IFFALSE 15363
// SetBName ( base_dep , name ) ;
15349: LD_VAR 0 1
15353: PPUSH
15354: LD_VAR 0 3
15358: PPUSH
15359: CALL_OW 500
// base := GetBase ( base_dep ) ;
15363: LD_ADDR_VAR 0 15
15367: PUSH
15368: LD_VAR 0 1
15372: PPUSH
15373: CALL_OW 274
15377: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
15378: LD_ADDR_VAR 0 16
15382: PUSH
15383: LD_VAR 0 1
15387: PPUSH
15388: CALL_OW 255
15392: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15393: LD_ADDR_VAR 0 17
15397: PUSH
15398: LD_VAR 0 1
15402: PPUSH
15403: CALL_OW 248
15407: ST_TO_ADDR
// if sources then
15408: LD_VAR 0 5
15412: IFFALSE 15459
// for i = 1 to 3 do
15414: LD_ADDR_VAR 0 8
15418: PUSH
15419: DOUBLE
15420: LD_INT 1
15422: DEC
15423: ST_TO_ADDR
15424: LD_INT 3
15426: PUSH
15427: FOR_TO
15428: IFFALSE 15457
// AddResourceType ( base , i , sources [ i ] ) ;
15430: LD_VAR 0 15
15434: PPUSH
15435: LD_VAR 0 8
15439: PPUSH
15440: LD_VAR 0 5
15444: PUSH
15445: LD_VAR 0 8
15449: ARRAY
15450: PPUSH
15451: CALL_OW 276
15455: GO 15427
15457: POP
15458: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15459: LD_ADDR_VAR 0 18
15463: PUSH
15464: LD_VAR 0 15
15468: PPUSH
15469: LD_VAR 0 2
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL 14718 0 3
15481: ST_TO_ADDR
// InitHc ;
15482: CALL_OW 19
// InitUc ;
15486: CALL_OW 18
// uc_side := side ;
15490: LD_ADDR_OWVAR 20
15494: PUSH
15495: LD_VAR 0 16
15499: ST_TO_ADDR
// uc_nation := nation ;
15500: LD_ADDR_OWVAR 21
15504: PUSH
15505: LD_VAR 0 17
15509: ST_TO_ADDR
// if buildings then
15510: LD_VAR 0 18
15514: IFFALSE 16842
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15516: LD_ADDR_VAR 0 19
15520: PUSH
15521: LD_VAR 0 18
15525: PPUSH
15526: LD_INT 2
15528: PUSH
15529: LD_INT 30
15531: PUSH
15532: LD_INT 29
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: LD_INT 30
15541: PUSH
15542: LD_INT 30
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: PPUSH
15554: CALL_OW 72
15558: ST_TO_ADDR
// if tmp then
15559: LD_VAR 0 19
15563: IFFALSE 15611
// for i in tmp do
15565: LD_ADDR_VAR 0 8
15569: PUSH
15570: LD_VAR 0 19
15574: PUSH
15575: FOR_IN
15576: IFFALSE 15609
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15578: LD_VAR 0 8
15582: PPUSH
15583: CALL_OW 250
15587: PPUSH
15588: LD_VAR 0 8
15592: PPUSH
15593: CALL_OW 251
15597: PPUSH
15598: LD_VAR 0 16
15602: PPUSH
15603: CALL_OW 441
15607: GO 15575
15609: POP
15610: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15611: LD_VAR 0 18
15615: PPUSH
15616: LD_INT 2
15618: PUSH
15619: LD_INT 30
15621: PUSH
15622: LD_INT 32
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 30
15631: PUSH
15632: LD_INT 33
15634: PUSH
15635: EMPTY
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 72
15648: IFFALSE 15736
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15650: LD_ADDR_VAR 0 8
15654: PUSH
15655: LD_VAR 0 18
15659: PPUSH
15660: LD_INT 2
15662: PUSH
15663: LD_INT 30
15665: PUSH
15666: LD_INT 32
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 30
15675: PUSH
15676: LD_INT 33
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 72
15692: PUSH
15693: FOR_IN
15694: IFFALSE 15734
// begin if not GetBWeapon ( i ) then
15696: LD_VAR 0 8
15700: PPUSH
15701: CALL_OW 269
15705: NOT
15706: IFFALSE 15732
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15708: LD_VAR 0 8
15712: PPUSH
15713: LD_VAR 0 8
15717: PPUSH
15718: LD_VAR 0 2
15722: PPUSH
15723: CALL 16988 0 2
15727: PPUSH
15728: CALL_OW 431
// end ;
15732: GO 15693
15734: POP
15735: POP
// end ; for i = 1 to personel do
15736: LD_ADDR_VAR 0 8
15740: PUSH
15741: DOUBLE
15742: LD_INT 1
15744: DEC
15745: ST_TO_ADDR
15746: LD_VAR 0 6
15750: PUSH
15751: FOR_TO
15752: IFFALSE 16822
// begin if i > 4 then
15754: LD_VAR 0 8
15758: PUSH
15759: LD_INT 4
15761: GREATER
15762: IFFALSE 15766
// break ;
15764: GO 16822
// case i of 1 :
15766: LD_VAR 0 8
15770: PUSH
15771: LD_INT 1
15773: DOUBLE
15774: EQUAL
15775: IFTRUE 15779
15777: GO 15859
15779: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15780: LD_ADDR_VAR 0 12
15784: PUSH
15785: LD_VAR 0 18
15789: PPUSH
15790: LD_INT 22
15792: PUSH
15793: LD_VAR 0 16
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 58
15804: PUSH
15805: EMPTY
15806: LIST
15807: PUSH
15808: LD_INT 2
15810: PUSH
15811: LD_INT 30
15813: PUSH
15814: LD_INT 32
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 30
15823: PUSH
15824: LD_INT 4
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 30
15833: PUSH
15834: LD_INT 5
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 72
15856: ST_TO_ADDR
15857: GO 16081
15859: LD_INT 2
15861: DOUBLE
15862: EQUAL
15863: IFTRUE 15867
15865: GO 15929
15867: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15868: LD_ADDR_VAR 0 12
15872: PUSH
15873: LD_VAR 0 18
15877: PPUSH
15878: LD_INT 22
15880: PUSH
15881: LD_VAR 0 16
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PUSH
15890: LD_INT 2
15892: PUSH
15893: LD_INT 30
15895: PUSH
15896: LD_INT 0
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PUSH
15903: LD_INT 30
15905: PUSH
15906: LD_INT 1
15908: PUSH
15909: EMPTY
15910: LIST
15911: LIST
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PPUSH
15922: CALL_OW 72
15926: ST_TO_ADDR
15927: GO 16081
15929: LD_INT 3
15931: DOUBLE
15932: EQUAL
15933: IFTRUE 15937
15935: GO 15999
15937: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15938: LD_ADDR_VAR 0 12
15942: PUSH
15943: LD_VAR 0 18
15947: PPUSH
15948: LD_INT 22
15950: PUSH
15951: LD_VAR 0 16
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 2
15962: PUSH
15963: LD_INT 30
15965: PUSH
15966: LD_INT 2
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: LD_INT 30
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: EMPTY
15984: LIST
15985: LIST
15986: LIST
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PPUSH
15992: CALL_OW 72
15996: ST_TO_ADDR
15997: GO 16081
15999: LD_INT 4
16001: DOUBLE
16002: EQUAL
16003: IFTRUE 16007
16005: GO 16080
16007: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
16008: LD_ADDR_VAR 0 12
16012: PUSH
16013: LD_VAR 0 18
16017: PPUSH
16018: LD_INT 22
16020: PUSH
16021: LD_VAR 0 16
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 2
16032: PUSH
16033: LD_INT 30
16035: PUSH
16036: LD_INT 6
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 30
16045: PUSH
16046: LD_INT 7
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 30
16055: PUSH
16056: LD_INT 8
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: LIST
16067: LIST
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 72
16077: ST_TO_ADDR
16078: GO 16081
16080: POP
// if i = 1 then
16081: LD_VAR 0 8
16085: PUSH
16086: LD_INT 1
16088: EQUAL
16089: IFFALSE 16200
// begin tmp := [ ] ;
16091: LD_ADDR_VAR 0 19
16095: PUSH
16096: EMPTY
16097: ST_TO_ADDR
// for j in f do
16098: LD_ADDR_VAR 0 9
16102: PUSH
16103: LD_VAR 0 12
16107: PUSH
16108: FOR_IN
16109: IFFALSE 16182
// if GetBType ( j ) = b_bunker then
16111: LD_VAR 0 9
16115: PPUSH
16116: CALL_OW 266
16120: PUSH
16121: LD_INT 32
16123: EQUAL
16124: IFFALSE 16151
// tmp := Insert ( tmp , 1 , j ) else
16126: LD_ADDR_VAR 0 19
16130: PUSH
16131: LD_VAR 0 19
16135: PPUSH
16136: LD_INT 1
16138: PPUSH
16139: LD_VAR 0 9
16143: PPUSH
16144: CALL_OW 2
16148: ST_TO_ADDR
16149: GO 16180
// tmp := Insert ( tmp , tmp + 1 , j ) ;
16151: LD_ADDR_VAR 0 19
16155: PUSH
16156: LD_VAR 0 19
16160: PPUSH
16161: LD_VAR 0 19
16165: PUSH
16166: LD_INT 1
16168: PLUS
16169: PPUSH
16170: LD_VAR 0 9
16174: PPUSH
16175: CALL_OW 2
16179: ST_TO_ADDR
16180: GO 16108
16182: POP
16183: POP
// if tmp then
16184: LD_VAR 0 19
16188: IFFALSE 16200
// f := tmp ;
16190: LD_ADDR_VAR 0 12
16194: PUSH
16195: LD_VAR 0 19
16199: ST_TO_ADDR
// end ; x := personel [ i ] ;
16200: LD_ADDR_VAR 0 13
16204: PUSH
16205: LD_VAR 0 6
16209: PUSH
16210: LD_VAR 0 8
16214: ARRAY
16215: ST_TO_ADDR
// if x = - 1 then
16216: LD_VAR 0 13
16220: PUSH
16221: LD_INT 1
16223: NEG
16224: EQUAL
16225: IFFALSE 16436
// begin for j in f do
16227: LD_ADDR_VAR 0 9
16231: PUSH
16232: LD_VAR 0 12
16236: PUSH
16237: FOR_IN
16238: IFFALSE 16432
// repeat InitHc ;
16240: CALL_OW 19
// if GetBType ( j ) = b_barracks then
16244: LD_VAR 0 9
16248: PPUSH
16249: CALL_OW 266
16253: PUSH
16254: LD_INT 5
16256: EQUAL
16257: IFFALSE 16327
// begin if UnitsInside ( j ) < 3 then
16259: LD_VAR 0 9
16263: PPUSH
16264: CALL_OW 313
16268: PUSH
16269: LD_INT 3
16271: LESS
16272: IFFALSE 16308
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16274: LD_INT 0
16276: PPUSH
16277: LD_INT 5
16279: PUSH
16280: LD_INT 8
16282: PUSH
16283: LD_INT 9
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: LIST
16290: PUSH
16291: LD_VAR 0 17
16295: ARRAY
16296: PPUSH
16297: LD_VAR 0 4
16301: PPUSH
16302: CALL_OW 380
16306: GO 16325
// PrepareHuman ( false , i , skill ) ;
16308: LD_INT 0
16310: PPUSH
16311: LD_VAR 0 8
16315: PPUSH
16316: LD_VAR 0 4
16320: PPUSH
16321: CALL_OW 380
// end else
16325: GO 16344
// PrepareHuman ( false , i , skill ) ;
16327: LD_INT 0
16329: PPUSH
16330: LD_VAR 0 8
16334: PPUSH
16335: LD_VAR 0 4
16339: PPUSH
16340: CALL_OW 380
// un := CreateHuman ;
16344: LD_ADDR_VAR 0 14
16348: PUSH
16349: CALL_OW 44
16353: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16354: LD_ADDR_VAR 0 7
16358: PUSH
16359: LD_VAR 0 7
16363: PPUSH
16364: LD_INT 1
16366: PPUSH
16367: LD_VAR 0 14
16371: PPUSH
16372: CALL_OW 2
16376: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
16377: LD_VAR 0 14
16381: PPUSH
16382: LD_VAR 0 9
16386: PPUSH
16387: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16391: LD_VAR 0 9
16395: PPUSH
16396: CALL_OW 313
16400: PUSH
16401: LD_INT 6
16403: EQUAL
16404: IFTRUE 16428
16406: PUSH
16407: LD_VAR 0 9
16411: PPUSH
16412: CALL_OW 266
16416: PUSH
16417: LD_INT 32
16419: PUSH
16420: LD_INT 31
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: IN
16427: OR
16428: IFFALSE 16240
16430: GO 16237
16432: POP
16433: POP
// end else
16434: GO 16820
// for j = 1 to x do
16436: LD_ADDR_VAR 0 9
16440: PUSH
16441: DOUBLE
16442: LD_INT 1
16444: DEC
16445: ST_TO_ADDR
16446: LD_VAR 0 13
16450: PUSH
16451: FOR_TO
16452: IFFALSE 16818
// begin InitHc ;
16454: CALL_OW 19
// if not f then
16458: LD_VAR 0 12
16462: NOT
16463: IFFALSE 16552
// begin PrepareHuman ( false , i , skill ) ;
16465: LD_INT 0
16467: PPUSH
16468: LD_VAR 0 8
16472: PPUSH
16473: LD_VAR 0 4
16477: PPUSH
16478: CALL_OW 380
// un := CreateHuman ;
16482: LD_ADDR_VAR 0 14
16486: PUSH
16487: CALL_OW 44
16491: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16492: LD_ADDR_VAR 0 7
16496: PUSH
16497: LD_VAR 0 7
16501: PPUSH
16502: LD_INT 1
16504: PPUSH
16505: LD_VAR 0 14
16509: PPUSH
16510: CALL_OW 2
16514: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16515: LD_VAR 0 14
16519: PPUSH
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 250
16529: PPUSH
16530: LD_VAR 0 1
16534: PPUSH
16535: CALL_OW 251
16539: PPUSH
16540: LD_INT 10
16542: PPUSH
16543: LD_INT 0
16545: PPUSH
16546: CALL_OW 50
// continue ;
16550: GO 16451
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16552: LD_VAR 0 12
16556: PUSH
16557: LD_INT 1
16559: ARRAY
16560: PPUSH
16561: CALL_OW 313
16565: IFFALSE 16593
16567: PUSH
16568: LD_VAR 0 12
16572: PUSH
16573: LD_INT 1
16575: ARRAY
16576: PPUSH
16577: CALL_OW 266
16581: PUSH
16582: LD_INT 32
16584: PUSH
16585: LD_INT 31
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: IN
16592: AND
16593: IFTRUE 16614
16595: PUSH
16596: LD_VAR 0 12
16600: PUSH
16601: LD_INT 1
16603: ARRAY
16604: PPUSH
16605: CALL_OW 313
16609: PUSH
16610: LD_INT 6
16612: EQUAL
16613: OR
16614: IFFALSE 16634
// f := Delete ( f , 1 ) ;
16616: LD_ADDR_VAR 0 12
16620: PUSH
16621: LD_VAR 0 12
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: CALL_OW 3
16633: ST_TO_ADDR
// if not f then
16634: LD_VAR 0 12
16638: NOT
16639: IFFALSE 16657
// begin x := x + 2 ;
16641: LD_ADDR_VAR 0 13
16645: PUSH
16646: LD_VAR 0 13
16650: PUSH
16651: LD_INT 2
16653: PLUS
16654: ST_TO_ADDR
// continue ;
16655: GO 16451
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16657: LD_VAR 0 12
16661: PUSH
16662: LD_INT 1
16664: ARRAY
16665: PPUSH
16666: CALL_OW 266
16670: PUSH
16671: LD_INT 5
16673: EQUAL
16674: IFFALSE 16748
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16676: LD_VAR 0 12
16680: PUSH
16681: LD_INT 1
16683: ARRAY
16684: PPUSH
16685: CALL_OW 313
16689: PUSH
16690: LD_INT 3
16692: LESS
16693: IFFALSE 16729
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16695: LD_INT 0
16697: PPUSH
16698: LD_INT 5
16700: PUSH
16701: LD_INT 8
16703: PUSH
16704: LD_INT 9
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: LIST
16711: PUSH
16712: LD_VAR 0 17
16716: ARRAY
16717: PPUSH
16718: LD_VAR 0 4
16722: PPUSH
16723: CALL_OW 380
16727: GO 16746
// PrepareHuman ( false , i , skill ) ;
16729: LD_INT 0
16731: PPUSH
16732: LD_VAR 0 8
16736: PPUSH
16737: LD_VAR 0 4
16741: PPUSH
16742: CALL_OW 380
// end else
16746: GO 16765
// PrepareHuman ( false , i , skill ) ;
16748: LD_INT 0
16750: PPUSH
16751: LD_VAR 0 8
16755: PPUSH
16756: LD_VAR 0 4
16760: PPUSH
16761: CALL_OW 380
// un := CreateHuman ;
16765: LD_ADDR_VAR 0 14
16769: PUSH
16770: CALL_OW 44
16774: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16775: LD_ADDR_VAR 0 7
16779: PUSH
16780: LD_VAR 0 7
16784: PPUSH
16785: LD_INT 1
16787: PPUSH
16788: LD_VAR 0 14
16792: PPUSH
16793: CALL_OW 2
16797: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16798: LD_VAR 0 14
16802: PPUSH
16803: LD_VAR 0 12
16807: PUSH
16808: LD_INT 1
16810: ARRAY
16811: PPUSH
16812: CALL_OW 52
// end ;
16816: GO 16451
16818: POP
16819: POP
// end ;
16820: GO 15751
16822: POP
16823: POP
// result := result ^ buildings ;
16824: LD_ADDR_VAR 0 7
16828: PUSH
16829: LD_VAR 0 7
16833: PUSH
16834: LD_VAR 0 18
16838: ADD
16839: ST_TO_ADDR
// end else
16840: GO 16983
// begin for i = 1 to personel do
16842: LD_ADDR_VAR 0 8
16846: PUSH
16847: DOUBLE
16848: LD_INT 1
16850: DEC
16851: ST_TO_ADDR
16852: LD_VAR 0 6
16856: PUSH
16857: FOR_TO
16858: IFFALSE 16981
// begin if i > 4 then
16860: LD_VAR 0 8
16864: PUSH
16865: LD_INT 4
16867: GREATER
16868: IFFALSE 16872
// break ;
16870: GO 16981
// x := personel [ i ] ;
16872: LD_ADDR_VAR 0 13
16876: PUSH
16877: LD_VAR 0 6
16881: PUSH
16882: LD_VAR 0 8
16886: ARRAY
16887: ST_TO_ADDR
// if x = - 1 then
16888: LD_VAR 0 13
16892: PUSH
16893: LD_INT 1
16895: NEG
16896: EQUAL
16897: IFFALSE 16901
// continue ;
16899: GO 16857
// PrepareHuman ( false , i , skill ) ;
16901: LD_INT 0
16903: PPUSH
16904: LD_VAR 0 8
16908: PPUSH
16909: LD_VAR 0 4
16913: PPUSH
16914: CALL_OW 380
// un := CreateHuman ;
16918: LD_ADDR_VAR 0 14
16922: PUSH
16923: CALL_OW 44
16927: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16928: LD_VAR 0 14
16932: PPUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 250
16942: PPUSH
16943: LD_VAR 0 1
16947: PPUSH
16948: CALL_OW 251
16952: PPUSH
16953: LD_INT 10
16955: PPUSH
16956: LD_INT 0
16958: PPUSH
16959: CALL_OW 50
// result := result ^ un ;
16963: LD_ADDR_VAR 0 7
16967: PUSH
16968: LD_VAR 0 7
16972: PUSH
16973: LD_VAR 0 14
16977: ADD
16978: ST_TO_ADDR
// end ;
16979: GO 16857
16981: POP
16982: POP
// end ; end ;
16983: LD_VAR 0 7
16987: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16988: LD_INT 0
16990: PPUSH
16991: PPUSH
16992: PPUSH
16993: PPUSH
16994: PPUSH
16995: PPUSH
16996: PPUSH
16997: PPUSH
16998: PPUSH
16999: PPUSH
17000: PPUSH
17001: PPUSH
17002: PPUSH
17003: PPUSH
17004: PPUSH
17005: PPUSH
// result := false ;
17006: LD_ADDR_VAR 0 3
17010: PUSH
17011: LD_INT 0
17013: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
17014: LD_VAR 0 1
17018: NOT
17019: IFTRUE 17044
17021: PUSH
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 266
17031: PUSH
17032: LD_INT 32
17034: PUSH
17035: LD_INT 33
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: IN
17042: NOT
17043: OR
17044: IFFALSE 17048
// exit ;
17046: GO 18183
// nat := GetNation ( tower ) ;
17048: LD_ADDR_VAR 0 12
17052: PUSH
17053: LD_VAR 0 1
17057: PPUSH
17058: CALL_OW 248
17062: ST_TO_ADDR
// side := GetSide ( tower ) ;
17063: LD_ADDR_VAR 0 16
17067: PUSH
17068: LD_VAR 0 1
17072: PPUSH
17073: CALL_OW 255
17077: ST_TO_ADDR
// x := GetX ( tower ) ;
17078: LD_ADDR_VAR 0 10
17082: PUSH
17083: LD_VAR 0 1
17087: PPUSH
17088: CALL_OW 250
17092: ST_TO_ADDR
// y := GetY ( tower ) ;
17093: LD_ADDR_VAR 0 11
17097: PUSH
17098: LD_VAR 0 1
17102: PPUSH
17103: CALL_OW 251
17107: ST_TO_ADDR
// if not x or not y then
17108: LD_VAR 0 10
17112: NOT
17113: IFTRUE 17122
17115: PUSH
17116: LD_VAR 0 11
17120: NOT
17121: OR
17122: IFFALSE 17126
// exit ;
17124: GO 18183
// weapon := 0 ;
17126: LD_ADDR_VAR 0 18
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// fac_list := [ ] ;
17134: LD_ADDR_VAR 0 17
17138: PUSH
17139: EMPTY
17140: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
17141: LD_ADDR_VAR 0 6
17145: PUSH
17146: LD_VAR 0 1
17150: PPUSH
17151: CALL_OW 274
17155: PPUSH
17156: LD_VAR 0 2
17160: PPUSH
17161: LD_INT 0
17163: PPUSH
17164: CALL 14718 0 3
17168: PPUSH
17169: LD_INT 30
17171: PUSH
17172: LD_INT 3
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: PPUSH
17179: CALL_OW 72
17183: ST_TO_ADDR
// if not factories then
17184: LD_VAR 0 6
17188: NOT
17189: IFFALSE 17193
// exit ;
17191: GO 18183
// for i in factories do
17193: LD_ADDR_VAR 0 8
17197: PUSH
17198: LD_VAR 0 6
17202: PUSH
17203: FOR_IN
17204: IFFALSE 17229
// fac_list := fac_list union AvailableWeaponList ( i ) ;
17206: LD_ADDR_VAR 0 17
17210: PUSH
17211: LD_VAR 0 17
17215: PUSH
17216: LD_VAR 0 8
17220: PPUSH
17221: CALL_OW 478
17225: UNION
17226: ST_TO_ADDR
17227: GO 17203
17229: POP
17230: POP
// if not fac_list then
17231: LD_VAR 0 17
17235: NOT
17236: IFFALSE 17240
// exit ;
17238: GO 18183
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17240: LD_ADDR_VAR 0 5
17244: PUSH
17245: LD_INT 4
17247: PUSH
17248: LD_INT 5
17250: PUSH
17251: LD_INT 9
17253: PUSH
17254: LD_INT 10
17256: PUSH
17257: LD_INT 6
17259: PUSH
17260: LD_INT 7
17262: PUSH
17263: LD_INT 11
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PUSH
17275: LD_INT 27
17277: PUSH
17278: LD_INT 28
17280: PUSH
17281: LD_INT 26
17283: PUSH
17284: LD_INT 30
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 43
17295: PUSH
17296: LD_INT 44
17298: PUSH
17299: LD_INT 46
17301: PUSH
17302: LD_INT 45
17304: PUSH
17305: LD_INT 47
17307: PUSH
17308: LD_INT 49
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: LD_VAR 0 12
17328: ARRAY
17329: ST_TO_ADDR
// list := list isect fac_list ;
17330: LD_ADDR_VAR 0 5
17334: PUSH
17335: LD_VAR 0 5
17339: PUSH
17340: LD_VAR 0 17
17344: ISECT
17345: ST_TO_ADDR
// if not list then
17346: LD_VAR 0 5
17350: NOT
17351: IFFALSE 17355
// exit ;
17353: GO 18183
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
17355: LD_VAR 0 12
17359: PUSH
17360: LD_INT 3
17362: EQUAL
17363: IFFALSE 17375
17365: PUSH
17366: LD_INT 49
17368: PUSH
17369: LD_VAR 0 5
17373: IN
17374: AND
17375: IFFALSE 17395
17377: PUSH
17378: LD_INT 31
17380: PPUSH
17381: LD_VAR 0 16
17385: PPUSH
17386: CALL_OW 321
17390: PUSH
17391: LD_INT 2
17393: EQUAL
17394: AND
17395: IFFALSE 17455
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
17397: LD_INT 22
17399: PUSH
17400: LD_VAR 0 16
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: LD_INT 35
17411: PUSH
17412: LD_INT 49
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: PUSH
17419: LD_INT 91
17421: PUSH
17422: LD_VAR 0 1
17426: PUSH
17427: LD_INT 10
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: PPUSH
17440: CALL_OW 69
17444: NOT
17445: IFFALSE 17455
// weapon := ru_time_lapser ;
17447: LD_ADDR_VAR 0 18
17451: PUSH
17452: LD_INT 49
17454: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17455: LD_VAR 0 12
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: LD_INT 2
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: IN
17470: IFFALSE 17494
17472: PUSH
17473: LD_INT 11
17475: PUSH
17476: LD_VAR 0 5
17480: IN
17481: IFTRUE 17493
17483: PUSH
17484: LD_INT 30
17486: PUSH
17487: LD_VAR 0 5
17491: IN
17492: OR
17493: AND
17494: IFFALSE 17514
17496: PUSH
17497: LD_INT 6
17499: PPUSH
17500: LD_VAR 0 16
17504: PPUSH
17505: CALL_OW 321
17509: PUSH
17510: LD_INT 2
17512: EQUAL
17513: AND
17514: IFFALSE 17681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17516: LD_INT 22
17518: PUSH
17519: LD_VAR 0 16
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 35
17533: PUSH
17534: LD_INT 11
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 35
17543: PUSH
17544: LD_INT 30
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 91
17558: PUSH
17559: LD_VAR 0 1
17563: PUSH
17564: LD_INT 18
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL_OW 69
17581: NOT
17582: IFFALSE 17658
17584: PUSH
17585: LD_INT 22
17587: PUSH
17588: LD_VAR 0 16
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: PUSH
17597: LD_INT 2
17599: PUSH
17600: LD_INT 30
17602: PUSH
17603: LD_INT 32
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 30
17612: PUSH
17613: LD_INT 33
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 91
17627: PUSH
17628: LD_VAR 0 1
17632: PUSH
17633: LD_INT 12
17635: PUSH
17636: EMPTY
17637: LIST
17638: LIST
17639: LIST
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: LIST
17645: PUSH
17646: EMPTY
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: PUSH
17654: LD_INT 2
17656: GREATER
17657: AND
17658: IFFALSE 17681
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17660: LD_ADDR_VAR 0 18
17664: PUSH
17665: LD_INT 11
17667: PUSH
17668: LD_INT 30
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PUSH
17675: LD_VAR 0 12
17679: ARRAY
17680: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17681: LD_VAR 0 18
17685: NOT
17686: IFFALSE 17706
17688: PUSH
17689: LD_INT 40
17691: PPUSH
17692: LD_VAR 0 16
17696: PPUSH
17697: CALL_OW 321
17701: PUSH
17702: LD_INT 2
17704: EQUAL
17705: AND
17706: IFFALSE 17742
17708: PUSH
17709: LD_INT 7
17711: PUSH
17712: LD_VAR 0 5
17716: IN
17717: IFTRUE 17729
17719: PUSH
17720: LD_INT 28
17722: PUSH
17723: LD_VAR 0 5
17727: IN
17728: OR
17729: IFTRUE 17741
17731: PUSH
17732: LD_INT 45
17734: PUSH
17735: LD_VAR 0 5
17739: IN
17740: OR
17741: AND
17742: IFFALSE 17996
// begin hex := GetHexInfo ( x , y ) ;
17744: LD_ADDR_VAR 0 4
17748: PUSH
17749: LD_VAR 0 10
17753: PPUSH
17754: LD_VAR 0 11
17758: PPUSH
17759: CALL_OW 546
17763: ST_TO_ADDR
// if hex [ 1 ] then
17764: LD_VAR 0 4
17768: PUSH
17769: LD_INT 1
17771: ARRAY
17772: IFFALSE 17776
// exit ;
17774: GO 18183
// height := hex [ 2 ] ;
17776: LD_ADDR_VAR 0 15
17780: PUSH
17781: LD_VAR 0 4
17785: PUSH
17786: LD_INT 2
17788: ARRAY
17789: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17790: LD_ADDR_VAR 0 14
17794: PUSH
17795: LD_INT 0
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: LD_INT 3
17803: PUSH
17804: LD_INT 5
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: ST_TO_ADDR
// for i in tmp do
17813: LD_ADDR_VAR 0 8
17817: PUSH
17818: LD_VAR 0 14
17822: PUSH
17823: FOR_IN
17824: IFFALSE 17994
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17826: LD_ADDR_VAR 0 9
17830: PUSH
17831: LD_VAR 0 10
17835: PPUSH
17836: LD_VAR 0 8
17840: PPUSH
17841: LD_INT 5
17843: PPUSH
17844: CALL_OW 272
17848: PUSH
17849: LD_VAR 0 11
17853: PPUSH
17854: LD_VAR 0 8
17858: PPUSH
17859: LD_INT 5
17861: PPUSH
17862: CALL_OW 273
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17871: LD_VAR 0 9
17875: PUSH
17876: LD_INT 1
17878: ARRAY
17879: PPUSH
17880: LD_VAR 0 9
17884: PUSH
17885: LD_INT 2
17887: ARRAY
17888: PPUSH
17889: CALL_OW 488
17893: IFFALSE 17992
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17895: LD_ADDR_VAR 0 4
17899: PUSH
17900: LD_VAR 0 9
17904: PUSH
17905: LD_INT 1
17907: ARRAY
17908: PPUSH
17909: LD_VAR 0 9
17913: PUSH
17914: LD_INT 2
17916: ARRAY
17917: PPUSH
17918: CALL_OW 546
17922: ST_TO_ADDR
// if hex [ 1 ] then
17923: LD_VAR 0 4
17927: PUSH
17928: LD_INT 1
17930: ARRAY
17931: IFFALSE 17935
// continue ;
17933: GO 17823
// h := hex [ 2 ] ;
17935: LD_ADDR_VAR 0 13
17939: PUSH
17940: LD_VAR 0 4
17944: PUSH
17945: LD_INT 2
17947: ARRAY
17948: ST_TO_ADDR
// if h + 7 < height then
17949: LD_VAR 0 13
17953: PUSH
17954: LD_INT 7
17956: PLUS
17957: PUSH
17958: LD_VAR 0 15
17962: LESS
17963: IFFALSE 17992
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17965: LD_ADDR_VAR 0 18
17969: PUSH
17970: LD_INT 7
17972: PUSH
17973: LD_INT 28
17975: PUSH
17976: LD_INT 45
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: LIST
17983: PUSH
17984: LD_VAR 0 12
17988: ARRAY
17989: ST_TO_ADDR
// break ;
17990: GO 17994
// end ; end ; end ;
17992: GO 17823
17994: POP
17995: POP
// end ; if not weapon then
17996: LD_VAR 0 18
18000: NOT
18001: IFFALSE 18061
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
18003: LD_ADDR_VAR 0 5
18007: PUSH
18008: LD_VAR 0 5
18012: PUSH
18013: LD_INT 11
18015: PUSH
18016: LD_INT 30
18018: PUSH
18019: LD_INT 49
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: LIST
18026: DIFF
18027: ST_TO_ADDR
// if not list then
18028: LD_VAR 0 5
18032: NOT
18033: IFFALSE 18037
// exit ;
18035: GO 18183
// weapon := list [ rand ( 1 , list ) ] ;
18037: LD_ADDR_VAR 0 18
18041: PUSH
18042: LD_VAR 0 5
18046: PUSH
18047: LD_INT 1
18049: PPUSH
18050: LD_VAR 0 5
18054: PPUSH
18055: CALL_OW 12
18059: ARRAY
18060: ST_TO_ADDR
// end ; if weapon then
18061: LD_VAR 0 18
18065: IFFALSE 18183
// begin tmp := CostOfWeapon ( weapon ) ;
18067: LD_ADDR_VAR 0 14
18071: PUSH
18072: LD_VAR 0 18
18076: PPUSH
18077: CALL_OW 451
18081: ST_TO_ADDR
// j := GetBase ( tower ) ;
18082: LD_ADDR_VAR 0 9
18086: PUSH
18087: LD_VAR 0 1
18091: PPUSH
18092: CALL_OW 274
18096: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
18097: LD_VAR 0 9
18101: PPUSH
18102: LD_INT 1
18104: PPUSH
18105: CALL_OW 275
18109: PUSH
18110: LD_VAR 0 14
18114: PUSH
18115: LD_INT 1
18117: ARRAY
18118: GREATEREQUAL
18119: IFFALSE 18145
18121: PUSH
18122: LD_VAR 0 9
18126: PPUSH
18127: LD_INT 2
18129: PPUSH
18130: CALL_OW 275
18134: PUSH
18135: LD_VAR 0 14
18139: PUSH
18140: LD_INT 2
18142: ARRAY
18143: GREATEREQUAL
18144: AND
18145: IFFALSE 18171
18147: PUSH
18148: LD_VAR 0 9
18152: PPUSH
18153: LD_INT 3
18155: PPUSH
18156: CALL_OW 275
18160: PUSH
18161: LD_VAR 0 14
18165: PUSH
18166: LD_INT 3
18168: ARRAY
18169: GREATEREQUAL
18170: AND
18171: IFFALSE 18183
// result := weapon ;
18173: LD_ADDR_VAR 0 3
18177: PUSH
18178: LD_VAR 0 18
18182: ST_TO_ADDR
// end ; end ;
18183: LD_VAR 0 3
18187: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
18188: LD_INT 0
18190: PPUSH
18191: PPUSH
// result := true ;
18192: LD_ADDR_VAR 0 3
18196: PUSH
18197: LD_INT 1
18199: ST_TO_ADDR
// if array1 = array2 then
18200: LD_VAR 0 1
18204: PUSH
18205: LD_VAR 0 2
18209: EQUAL
18210: IFFALSE 18270
// begin for i = 1 to array1 do
18212: LD_ADDR_VAR 0 4
18216: PUSH
18217: DOUBLE
18218: LD_INT 1
18220: DEC
18221: ST_TO_ADDR
18222: LD_VAR 0 1
18226: PUSH
18227: FOR_TO
18228: IFFALSE 18266
// if array1 [ i ] <> array2 [ i ] then
18230: LD_VAR 0 1
18234: PUSH
18235: LD_VAR 0 4
18239: ARRAY
18240: PUSH
18241: LD_VAR 0 2
18245: PUSH
18246: LD_VAR 0 4
18250: ARRAY
18251: NONEQUAL
18252: IFFALSE 18264
// begin result := false ;
18254: LD_ADDR_VAR 0 3
18258: PUSH
18259: LD_INT 0
18261: ST_TO_ADDR
// break ;
18262: GO 18266
// end ;
18264: GO 18227
18266: POP
18267: POP
// end else
18268: GO 18278
// result := false ;
18270: LD_ADDR_VAR 0 3
18274: PUSH
18275: LD_INT 0
18277: ST_TO_ADDR
// end ;
18278: LD_VAR 0 3
18282: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
18283: LD_INT 0
18285: PPUSH
18286: PPUSH
// if not array1 or not array2 then
18287: LD_VAR 0 1
18291: NOT
18292: IFTRUE 18301
18294: PUSH
18295: LD_VAR 0 2
18299: NOT
18300: OR
18301: IFFALSE 18305
// exit ;
18303: GO 18369
// result := true ;
18305: LD_ADDR_VAR 0 3
18309: PUSH
18310: LD_INT 1
18312: ST_TO_ADDR
// for i = 1 to array1 do
18313: LD_ADDR_VAR 0 4
18317: PUSH
18318: DOUBLE
18319: LD_INT 1
18321: DEC
18322: ST_TO_ADDR
18323: LD_VAR 0 1
18327: PUSH
18328: FOR_TO
18329: IFFALSE 18367
// if array1 [ i ] <> array2 [ i ] then
18331: LD_VAR 0 1
18335: PUSH
18336: LD_VAR 0 4
18340: ARRAY
18341: PUSH
18342: LD_VAR 0 2
18346: PUSH
18347: LD_VAR 0 4
18351: ARRAY
18352: NONEQUAL
18353: IFFALSE 18365
// begin result := false ;
18355: LD_ADDR_VAR 0 3
18359: PUSH
18360: LD_INT 0
18362: ST_TO_ADDR
// break ;
18363: GO 18367
// end ;
18365: GO 18328
18367: POP
18368: POP
// end ;
18369: LD_VAR 0 3
18373: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
18374: LD_INT 0
18376: PPUSH
18377: PPUSH
18378: PPUSH
// pom := GetBase ( fac ) ;
18379: LD_ADDR_VAR 0 5
18383: PUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 274
18393: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
18394: LD_ADDR_VAR 0 4
18398: PUSH
18399: LD_VAR 0 2
18403: PUSH
18404: LD_INT 1
18406: ARRAY
18407: PPUSH
18408: LD_VAR 0 2
18412: PUSH
18413: LD_INT 2
18415: ARRAY
18416: PPUSH
18417: LD_VAR 0 2
18421: PUSH
18422: LD_INT 3
18424: ARRAY
18425: PPUSH
18426: LD_VAR 0 2
18430: PUSH
18431: LD_INT 4
18433: ARRAY
18434: PPUSH
18435: CALL_OW 449
18439: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18440: LD_ADDR_VAR 0 3
18444: PUSH
18445: LD_VAR 0 5
18449: PPUSH
18450: LD_INT 1
18452: PPUSH
18453: CALL_OW 275
18457: PUSH
18458: LD_VAR 0 4
18462: PUSH
18463: LD_INT 1
18465: ARRAY
18466: GREATEREQUAL
18467: IFFALSE 18493
18469: PUSH
18470: LD_VAR 0 5
18474: PPUSH
18475: LD_INT 2
18477: PPUSH
18478: CALL_OW 275
18482: PUSH
18483: LD_VAR 0 4
18487: PUSH
18488: LD_INT 2
18490: ARRAY
18491: GREATEREQUAL
18492: AND
18493: IFFALSE 18519
18495: PUSH
18496: LD_VAR 0 5
18500: PPUSH
18501: LD_INT 3
18503: PPUSH
18504: CALL_OW 275
18508: PUSH
18509: LD_VAR 0 4
18513: PUSH
18514: LD_INT 3
18516: ARRAY
18517: GREATEREQUAL
18518: AND
18519: ST_TO_ADDR
// end ;
18520: LD_VAR 0 3
18524: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18525: LD_INT 0
18527: PPUSH
18528: PPUSH
18529: PPUSH
18530: PPUSH
// pom := GetBase ( building ) ;
18531: LD_ADDR_VAR 0 3
18535: PUSH
18536: LD_VAR 0 1
18540: PPUSH
18541: CALL_OW 274
18545: ST_TO_ADDR
// if not pom then
18546: LD_VAR 0 3
18550: NOT
18551: IFFALSE 18555
// exit ;
18553: GO 18729
// btype := GetBType ( building ) ;
18555: LD_ADDR_VAR 0 5
18559: PUSH
18560: LD_VAR 0 1
18564: PPUSH
18565: CALL_OW 266
18569: ST_TO_ADDR
// if btype = b_armoury then
18570: LD_VAR 0 5
18574: PUSH
18575: LD_INT 4
18577: EQUAL
18578: IFFALSE 18588
// btype := b_barracks ;
18580: LD_ADDR_VAR 0 5
18584: PUSH
18585: LD_INT 5
18587: ST_TO_ADDR
// if btype = b_depot then
18588: LD_VAR 0 5
18592: PUSH
18593: LD_INT 0
18595: EQUAL
18596: IFFALSE 18606
// btype := b_warehouse ;
18598: LD_ADDR_VAR 0 5
18602: PUSH
18603: LD_INT 1
18605: ST_TO_ADDR
// if btype = b_workshop then
18606: LD_VAR 0 5
18610: PUSH
18611: LD_INT 2
18613: EQUAL
18614: IFFALSE 18624
// btype := b_factory ;
18616: LD_ADDR_VAR 0 5
18620: PUSH
18621: LD_INT 3
18623: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18624: LD_ADDR_VAR 0 4
18628: PUSH
18629: LD_VAR 0 5
18633: PPUSH
18634: LD_VAR 0 1
18638: PPUSH
18639: CALL_OW 248
18643: PPUSH
18644: CALL_OW 450
18648: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18649: LD_ADDR_VAR 0 2
18653: PUSH
18654: LD_VAR 0 3
18658: PPUSH
18659: LD_INT 1
18661: PPUSH
18662: CALL_OW 275
18666: PUSH
18667: LD_VAR 0 4
18671: PUSH
18672: LD_INT 1
18674: ARRAY
18675: GREATEREQUAL
18676: IFFALSE 18702
18678: PUSH
18679: LD_VAR 0 3
18683: PPUSH
18684: LD_INT 2
18686: PPUSH
18687: CALL_OW 275
18691: PUSH
18692: LD_VAR 0 4
18696: PUSH
18697: LD_INT 2
18699: ARRAY
18700: GREATEREQUAL
18701: AND
18702: IFFALSE 18728
18704: PUSH
18705: LD_VAR 0 3
18709: PPUSH
18710: LD_INT 3
18712: PPUSH
18713: CALL_OW 275
18717: PUSH
18718: LD_VAR 0 4
18722: PUSH
18723: LD_INT 3
18725: ARRAY
18726: GREATEREQUAL
18727: AND
18728: ST_TO_ADDR
// end ;
18729: LD_VAR 0 2
18733: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18734: LD_INT 0
18736: PPUSH
18737: PPUSH
18738: PPUSH
// pom := GetBase ( building ) ;
18739: LD_ADDR_VAR 0 4
18743: PUSH
18744: LD_VAR 0 1
18748: PPUSH
18749: CALL_OW 274
18753: ST_TO_ADDR
// if not pom then
18754: LD_VAR 0 4
18758: NOT
18759: IFFALSE 18763
// exit ;
18761: GO 18868
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18763: LD_ADDR_VAR 0 5
18767: PUSH
18768: LD_VAR 0 2
18772: PPUSH
18773: LD_VAR 0 1
18777: PPUSH
18778: CALL_OW 248
18782: PPUSH
18783: CALL_OW 450
18787: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18788: LD_ADDR_VAR 0 3
18792: PUSH
18793: LD_VAR 0 4
18797: PPUSH
18798: LD_INT 1
18800: PPUSH
18801: CALL_OW 275
18805: PUSH
18806: LD_VAR 0 5
18810: PUSH
18811: LD_INT 1
18813: ARRAY
18814: GREATEREQUAL
18815: IFFALSE 18841
18817: PUSH
18818: LD_VAR 0 4
18822: PPUSH
18823: LD_INT 2
18825: PPUSH
18826: CALL_OW 275
18830: PUSH
18831: LD_VAR 0 5
18835: PUSH
18836: LD_INT 2
18838: ARRAY
18839: GREATEREQUAL
18840: AND
18841: IFFALSE 18867
18843: PUSH
18844: LD_VAR 0 4
18848: PPUSH
18849: LD_INT 3
18851: PPUSH
18852: CALL_OW 275
18856: PUSH
18857: LD_VAR 0 5
18861: PUSH
18862: LD_INT 3
18864: ARRAY
18865: GREATEREQUAL
18866: AND
18867: ST_TO_ADDR
// end ;
18868: LD_VAR 0 3
18872: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18873: LD_INT 0
18875: PPUSH
18876: PPUSH
18877: PPUSH
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
18882: PPUSH
18883: PPUSH
18884: PPUSH
18885: PPUSH
// result := false ;
18886: LD_ADDR_VAR 0 8
18890: PUSH
18891: LD_INT 0
18893: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18894: LD_VAR 0 5
18898: NOT
18899: IFTRUE 18908
18901: PUSH
18902: LD_VAR 0 1
18906: NOT
18907: OR
18908: IFTRUE 18917
18910: PUSH
18911: LD_VAR 0 2
18915: NOT
18916: OR
18917: IFTRUE 18926
18919: PUSH
18920: LD_VAR 0 3
18924: NOT
18925: OR
18926: IFFALSE 18930
// exit ;
18928: GO 19756
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18930: LD_ADDR_VAR 0 14
18934: PUSH
18935: LD_VAR 0 1
18939: PPUSH
18940: LD_VAR 0 2
18944: PPUSH
18945: LD_VAR 0 3
18949: PPUSH
18950: LD_VAR 0 4
18954: PPUSH
18955: LD_VAR 0 5
18959: PUSH
18960: LD_INT 1
18962: ARRAY
18963: PPUSH
18964: CALL_OW 248
18968: PPUSH
18969: LD_INT 0
18971: PPUSH
18972: CALL 21037 0 6
18976: ST_TO_ADDR
// if not hexes then
18977: LD_VAR 0 14
18981: NOT
18982: IFFALSE 18986
// exit ;
18984: GO 19756
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18986: LD_ADDR_VAR 0 17
18990: PUSH
18991: LD_VAR 0 5
18995: PPUSH
18996: LD_INT 22
18998: PUSH
18999: LD_VAR 0 13
19003: PPUSH
19004: CALL_OW 255
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 2
19015: PUSH
19016: LD_INT 30
19018: PUSH
19019: LD_INT 0
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 30
19028: PUSH
19029: LD_INT 1
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PPUSH
19045: CALL_OW 72
19049: ST_TO_ADDR
// for i = 1 to hexes do
19050: LD_ADDR_VAR 0 9
19054: PUSH
19055: DOUBLE
19056: LD_INT 1
19058: DEC
19059: ST_TO_ADDR
19060: LD_VAR 0 14
19064: PUSH
19065: FOR_TO
19066: IFFALSE 19754
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
19068: LD_ADDR_VAR 0 13
19072: PUSH
19073: LD_VAR 0 14
19077: PUSH
19078: LD_VAR 0 9
19082: ARRAY
19083: PUSH
19084: LD_INT 1
19086: ARRAY
19087: PPUSH
19088: LD_VAR 0 14
19092: PUSH
19093: LD_VAR 0 9
19097: ARRAY
19098: PUSH
19099: LD_INT 2
19101: ARRAY
19102: PPUSH
19103: CALL_OW 428
19107: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
19108: LD_VAR 0 14
19112: PUSH
19113: LD_VAR 0 9
19117: ARRAY
19118: PUSH
19119: LD_INT 1
19121: ARRAY
19122: PPUSH
19123: LD_VAR 0 14
19127: PUSH
19128: LD_VAR 0 9
19132: ARRAY
19133: PUSH
19134: LD_INT 2
19136: ARRAY
19137: PPUSH
19138: CALL_OW 351
19142: IFTRUE 19181
19144: PUSH
19145: LD_VAR 0 14
19149: PUSH
19150: LD_VAR 0 9
19154: ARRAY
19155: PUSH
19156: LD_INT 1
19158: ARRAY
19159: PPUSH
19160: LD_VAR 0 14
19164: PUSH
19165: LD_VAR 0 9
19169: ARRAY
19170: PUSH
19171: LD_INT 2
19173: ARRAY
19174: PPUSH
19175: CALL_OW 488
19179: NOT
19180: OR
19181: IFTRUE 19198
19183: PUSH
19184: LD_VAR 0 13
19188: PPUSH
19189: CALL_OW 247
19193: PUSH
19194: LD_INT 3
19196: EQUAL
19197: OR
19198: IFFALSE 19204
// exit ;
19200: POP
19201: POP
19202: GO 19756
// if not tmp then
19204: LD_VAR 0 13
19208: NOT
19209: IFFALSE 19213
// continue ;
19211: GO 19065
// result := true ;
19213: LD_ADDR_VAR 0 8
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
19221: LD_VAR 0 6
19225: IFFALSE 19242
19227: PUSH
19228: LD_VAR 0 13
19232: PPUSH
19233: CALL_OW 247
19237: PUSH
19238: LD_INT 2
19240: EQUAL
19241: AND
19242: IFFALSE 19259
19244: PUSH
19245: LD_VAR 0 13
19249: PPUSH
19250: CALL_OW 263
19254: PUSH
19255: LD_INT 1
19257: EQUAL
19258: AND
19259: IFFALSE 19423
// begin if IsDrivenBy ( tmp ) then
19261: LD_VAR 0 13
19265: PPUSH
19266: CALL_OW 311
19270: IFFALSE 19274
// continue ;
19272: GO 19065
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19274: LD_VAR 0 6
19278: PPUSH
19279: LD_INT 3
19281: PUSH
19282: LD_INT 60
19284: PUSH
19285: EMPTY
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 3
19294: PUSH
19295: LD_INT 55
19297: PUSH
19298: EMPTY
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PPUSH
19309: CALL_OW 72
19313: IFFALSE 19421
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
19315: LD_ADDR_VAR 0 18
19319: PUSH
19320: LD_VAR 0 6
19324: PPUSH
19325: LD_INT 3
19327: PUSH
19328: LD_INT 60
19330: PUSH
19331: EMPTY
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 3
19340: PUSH
19341: LD_INT 55
19343: PUSH
19344: EMPTY
19345: LIST
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PPUSH
19355: CALL_OW 72
19359: PUSH
19360: LD_INT 1
19362: ARRAY
19363: ST_TO_ADDR
// if IsInUnit ( driver ) then
19364: LD_VAR 0 18
19368: PPUSH
19369: CALL_OW 310
19373: IFFALSE 19384
// ComExit ( driver ) ;
19375: LD_VAR 0 18
19379: PPUSH
19380: CALL 45037 0 1
// AddComEnterUnit ( driver , tmp ) ;
19384: LD_VAR 0 18
19388: PPUSH
19389: LD_VAR 0 13
19393: PPUSH
19394: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
19398: LD_VAR 0 18
19402: PPUSH
19403: LD_VAR 0 7
19407: PPUSH
19408: CALL_OW 173
// AddComExitVehicle ( driver ) ;
19412: LD_VAR 0 18
19416: PPUSH
19417: CALL_OW 181
// end ; continue ;
19421: GO 19065
// end ; if not cleaners or not tmp in cleaners then
19423: LD_VAR 0 6
19427: NOT
19428: IFTRUE 19443
19430: PUSH
19431: LD_VAR 0 13
19435: PUSH
19436: LD_VAR 0 6
19440: IN
19441: NOT
19442: OR
19443: IFFALSE 19752
// begin if dep then
19445: LD_VAR 0 17
19449: IFFALSE 19585
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
19451: LD_ADDR_VAR 0 16
19455: PUSH
19456: LD_VAR 0 17
19460: PUSH
19461: LD_INT 1
19463: ARRAY
19464: PPUSH
19465: CALL_OW 250
19469: PPUSH
19470: LD_VAR 0 17
19474: PUSH
19475: LD_INT 1
19477: ARRAY
19478: PPUSH
19479: CALL_OW 254
19483: PPUSH
19484: LD_INT 5
19486: PPUSH
19487: CALL_OW 272
19491: PUSH
19492: LD_VAR 0 17
19496: PUSH
19497: LD_INT 1
19499: ARRAY
19500: PPUSH
19501: CALL_OW 251
19505: PPUSH
19506: LD_VAR 0 17
19510: PUSH
19511: LD_INT 1
19513: ARRAY
19514: PPUSH
19515: CALL_OW 254
19519: PPUSH
19520: LD_INT 5
19522: PPUSH
19523: CALL_OW 273
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19532: LD_VAR 0 16
19536: PUSH
19537: LD_INT 1
19539: ARRAY
19540: PPUSH
19541: LD_VAR 0 16
19545: PUSH
19546: LD_INT 2
19548: ARRAY
19549: PPUSH
19550: CALL_OW 488
19554: IFFALSE 19585
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19556: LD_VAR 0 13
19560: PPUSH
19561: LD_VAR 0 16
19565: PUSH
19566: LD_INT 1
19568: ARRAY
19569: PPUSH
19570: LD_VAR 0 16
19574: PUSH
19575: LD_INT 2
19577: ARRAY
19578: PPUSH
19579: CALL_OW 111
// continue ;
19583: GO 19065
// end ; end ; r := GetDir ( tmp ) ;
19585: LD_ADDR_VAR 0 15
19589: PUSH
19590: LD_VAR 0 13
19594: PPUSH
19595: CALL_OW 254
19599: ST_TO_ADDR
// if r = 5 then
19600: LD_VAR 0 15
19604: PUSH
19605: LD_INT 5
19607: EQUAL
19608: IFFALSE 19618
// r := 0 ;
19610: LD_ADDR_VAR 0 15
19614: PUSH
19615: LD_INT 0
19617: ST_TO_ADDR
// for j = r to 5 do
19618: LD_ADDR_VAR 0 10
19622: PUSH
19623: DOUBLE
19624: LD_VAR 0 15
19628: DEC
19629: ST_TO_ADDR
19630: LD_INT 5
19632: PUSH
19633: FOR_TO
19634: IFFALSE 19750
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19636: LD_ADDR_VAR 0 11
19640: PUSH
19641: LD_VAR 0 13
19645: PPUSH
19646: CALL_OW 250
19650: PPUSH
19651: LD_VAR 0 10
19655: PPUSH
19656: LD_INT 2
19658: PPUSH
19659: CALL_OW 272
19663: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19664: LD_ADDR_VAR 0 12
19668: PUSH
19669: LD_VAR 0 13
19673: PPUSH
19674: CALL_OW 251
19678: PPUSH
19679: LD_VAR 0 10
19683: PPUSH
19684: LD_INT 2
19686: PPUSH
19687: CALL_OW 273
19691: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19692: LD_VAR 0 11
19696: PPUSH
19697: LD_VAR 0 12
19701: PPUSH
19702: CALL_OW 488
19706: IFFALSE 19725
19708: PUSH
19709: LD_VAR 0 11
19713: PPUSH
19714: LD_VAR 0 12
19718: PPUSH
19719: CALL_OW 428
19723: NOT
19724: AND
19725: IFFALSE 19748
// begin ComMoveXY ( tmp , _x , _y ) ;
19727: LD_VAR 0 13
19731: PPUSH
19732: LD_VAR 0 11
19736: PPUSH
19737: LD_VAR 0 12
19741: PPUSH
19742: CALL_OW 111
// break ;
19746: GO 19750
// end ; end ;
19748: GO 19633
19750: POP
19751: POP
// end ; end ;
19752: GO 19065
19754: POP
19755: POP
// end ;
19756: LD_VAR 0 8
19760: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19761: LD_INT 0
19763: PPUSH
// result := true ;
19764: LD_ADDR_VAR 0 3
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19772: LD_VAR 0 2
19776: PUSH
19777: LD_INT 24
19779: DOUBLE
19780: EQUAL
19781: IFTRUE 19791
19783: LD_INT 33
19785: DOUBLE
19786: EQUAL
19787: IFTRUE 19791
19789: GO 19816
19791: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19792: LD_ADDR_VAR 0 3
19796: PUSH
19797: LD_INT 32
19799: PPUSH
19800: LD_VAR 0 1
19804: PPUSH
19805: CALL_OW 321
19809: PUSH
19810: LD_INT 2
19812: EQUAL
19813: ST_TO_ADDR
19814: GO 20132
19816: LD_INT 20
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19849
19824: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19825: LD_ADDR_VAR 0 3
19829: PUSH
19830: LD_INT 6
19832: PPUSH
19833: LD_VAR 0 1
19837: PPUSH
19838: CALL_OW 321
19842: PUSH
19843: LD_INT 2
19845: EQUAL
19846: ST_TO_ADDR
19847: GO 20132
19849: LD_INT 22
19851: DOUBLE
19852: EQUAL
19853: IFTRUE 19863
19855: LD_INT 36
19857: DOUBLE
19858: EQUAL
19859: IFTRUE 19863
19861: GO 19888
19863: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19864: LD_ADDR_VAR 0 3
19868: PUSH
19869: LD_INT 15
19871: PPUSH
19872: LD_VAR 0 1
19876: PPUSH
19877: CALL_OW 321
19881: PUSH
19882: LD_INT 2
19884: EQUAL
19885: ST_TO_ADDR
19886: GO 20132
19888: LD_INT 30
19890: DOUBLE
19891: EQUAL
19892: IFTRUE 19896
19894: GO 19921
19896: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19897: LD_ADDR_VAR 0 3
19901: PUSH
19902: LD_INT 20
19904: PPUSH
19905: LD_VAR 0 1
19909: PPUSH
19910: CALL_OW 321
19914: PUSH
19915: LD_INT 2
19917: EQUAL
19918: ST_TO_ADDR
19919: GO 20132
19921: LD_INT 28
19923: DOUBLE
19924: EQUAL
19925: IFTRUE 19935
19927: LD_INT 21
19929: DOUBLE
19930: EQUAL
19931: IFTRUE 19935
19933: GO 19960
19935: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19936: LD_ADDR_VAR 0 3
19940: PUSH
19941: LD_INT 21
19943: PPUSH
19944: LD_VAR 0 1
19948: PPUSH
19949: CALL_OW 321
19953: PUSH
19954: LD_INT 2
19956: EQUAL
19957: ST_TO_ADDR
19958: GO 20132
19960: LD_INT 16
19962: DOUBLE
19963: EQUAL
19964: IFTRUE 19968
19966: GO 19993
19968: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19969: LD_ADDR_VAR 0 3
19973: PUSH
19974: LD_INT 84
19976: PPUSH
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 321
19986: PUSH
19987: LD_INT 2
19989: EQUAL
19990: ST_TO_ADDR
19991: GO 20132
19993: LD_INT 19
19995: DOUBLE
19996: EQUAL
19997: IFTRUE 20007
19999: LD_INT 23
20001: DOUBLE
20002: EQUAL
20003: IFTRUE 20007
20005: GO 20032
20007: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
20008: LD_ADDR_VAR 0 3
20012: PUSH
20013: LD_INT 83
20015: PPUSH
20016: LD_VAR 0 1
20020: PPUSH
20021: CALL_OW 321
20025: PUSH
20026: LD_INT 2
20028: EQUAL
20029: ST_TO_ADDR
20030: GO 20132
20032: LD_INT 17
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20065
20040: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
20041: LD_ADDR_VAR 0 3
20045: PUSH
20046: LD_INT 39
20048: PPUSH
20049: LD_VAR 0 1
20053: PPUSH
20054: CALL_OW 321
20058: PUSH
20059: LD_INT 2
20061: EQUAL
20062: ST_TO_ADDR
20063: GO 20132
20065: LD_INT 18
20067: DOUBLE
20068: EQUAL
20069: IFTRUE 20073
20071: GO 20098
20073: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
20074: LD_ADDR_VAR 0 3
20078: PUSH
20079: LD_INT 40
20081: PPUSH
20082: LD_VAR 0 1
20086: PPUSH
20087: CALL_OW 321
20091: PUSH
20092: LD_INT 2
20094: EQUAL
20095: ST_TO_ADDR
20096: GO 20132
20098: LD_INT 27
20100: DOUBLE
20101: EQUAL
20102: IFTRUE 20106
20104: GO 20131
20106: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
20107: LD_ADDR_VAR 0 3
20111: PUSH
20112: LD_INT 35
20114: PPUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 321
20124: PUSH
20125: LD_INT 2
20127: EQUAL
20128: ST_TO_ADDR
20129: GO 20132
20131: POP
// end ;
20132: LD_VAR 0 3
20136: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
20143: PPUSH
20144: PPUSH
20145: PPUSH
20146: PPUSH
20147: PPUSH
20148: PPUSH
20149: PPUSH
// result := false ;
20150: LD_ADDR_VAR 0 6
20154: PUSH
20155: LD_INT 0
20157: ST_TO_ADDR
// if btype = b_depot then
20158: LD_VAR 0 2
20162: PUSH
20163: LD_INT 0
20165: EQUAL
20166: IFFALSE 20178
// begin result := true ;
20168: LD_ADDR_VAR 0 6
20172: PUSH
20173: LD_INT 1
20175: ST_TO_ADDR
// exit ;
20176: GO 21032
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
20178: LD_VAR 0 1
20182: NOT
20183: IFTRUE 20208
20185: PUSH
20186: LD_VAR 0 1
20190: PPUSH
20191: CALL_OW 266
20195: PUSH
20196: LD_INT 0
20198: PUSH
20199: LD_INT 1
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: IN
20206: NOT
20207: OR
20208: IFTRUE 20217
20210: PUSH
20211: LD_VAR 0 2
20215: NOT
20216: OR
20217: IFTRUE 20253
20219: PUSH
20220: LD_VAR 0 5
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: LD_INT 1
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 3
20236: PUSH
20237: LD_INT 4
20239: PUSH
20240: LD_INT 5
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: IN
20251: NOT
20252: OR
20253: IFTRUE 20272
20255: PUSH
20256: LD_VAR 0 3
20260: PPUSH
20261: LD_VAR 0 4
20265: PPUSH
20266: CALL_OW 488
20270: NOT
20271: OR
20272: IFFALSE 20276
// exit ;
20274: GO 21032
// side := GetSide ( depot ) ;
20276: LD_ADDR_VAR 0 9
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL_OW 255
20290: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20291: LD_VAR 0 9
20295: PPUSH
20296: LD_VAR 0 2
20300: PPUSH
20301: CALL 19761 0 2
20305: NOT
20306: IFFALSE 20310
// exit ;
20308: GO 21032
// pom := GetBase ( depot ) ;
20310: LD_ADDR_VAR 0 10
20314: PUSH
20315: LD_VAR 0 1
20319: PPUSH
20320: CALL_OW 274
20324: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20325: LD_ADDR_VAR 0 11
20329: PUSH
20330: LD_VAR 0 2
20334: PPUSH
20335: LD_VAR 0 1
20339: PPUSH
20340: CALL_OW 248
20344: PPUSH
20345: CALL_OW 450
20349: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20350: LD_VAR 0 10
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: CALL_OW 275
20362: PUSH
20363: LD_VAR 0 11
20367: PUSH
20368: LD_INT 1
20370: ARRAY
20371: GREATEREQUAL
20372: IFFALSE 20398
20374: PUSH
20375: LD_VAR 0 10
20379: PPUSH
20380: LD_INT 2
20382: PPUSH
20383: CALL_OW 275
20387: PUSH
20388: LD_VAR 0 11
20392: PUSH
20393: LD_INT 2
20395: ARRAY
20396: GREATEREQUAL
20397: AND
20398: IFFALSE 20424
20400: PUSH
20401: LD_VAR 0 10
20405: PPUSH
20406: LD_INT 3
20408: PPUSH
20409: CALL_OW 275
20413: PUSH
20414: LD_VAR 0 11
20418: PUSH
20419: LD_INT 3
20421: ARRAY
20422: GREATEREQUAL
20423: AND
20424: NOT
20425: IFFALSE 20429
// exit ;
20427: GO 21032
// if GetBType ( depot ) = b_depot then
20429: LD_VAR 0 1
20433: PPUSH
20434: CALL_OW 266
20438: PUSH
20439: LD_INT 0
20441: EQUAL
20442: IFFALSE 20454
// dist := 28 else
20444: LD_ADDR_VAR 0 14
20448: PUSH
20449: LD_INT 28
20451: ST_TO_ADDR
20452: GO 20462
// dist := 36 ;
20454: LD_ADDR_VAR 0 14
20458: PUSH
20459: LD_INT 36
20461: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20462: LD_VAR 0 1
20466: PPUSH
20467: LD_VAR 0 3
20471: PPUSH
20472: LD_VAR 0 4
20476: PPUSH
20477: CALL_OW 297
20481: PUSH
20482: LD_VAR 0 14
20486: GREATER
20487: IFFALSE 20491
// exit ;
20489: GO 21032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20491: LD_ADDR_VAR 0 12
20495: PUSH
20496: LD_VAR 0 2
20500: PPUSH
20501: LD_VAR 0 3
20505: PPUSH
20506: LD_VAR 0 4
20510: PPUSH
20511: LD_VAR 0 5
20515: PPUSH
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 248
20525: PPUSH
20526: LD_INT 0
20528: PPUSH
20529: CALL 21037 0 6
20533: ST_TO_ADDR
// if not hexes then
20534: LD_VAR 0 12
20538: NOT
20539: IFFALSE 20543
// exit ;
20541: GO 21032
// hex := GetHexInfo ( x , y ) ;
20543: LD_ADDR_VAR 0 15
20547: PUSH
20548: LD_VAR 0 3
20552: PPUSH
20553: LD_VAR 0 4
20557: PPUSH
20558: CALL_OW 546
20562: ST_TO_ADDR
// if hex [ 1 ] then
20563: LD_VAR 0 15
20567: PUSH
20568: LD_INT 1
20570: ARRAY
20571: IFFALSE 20575
// exit ;
20573: GO 21032
// height := hex [ 2 ] ;
20575: LD_ADDR_VAR 0 13
20579: PUSH
20580: LD_VAR 0 15
20584: PUSH
20585: LD_INT 2
20587: ARRAY
20588: ST_TO_ADDR
// for i = 1 to hexes do
20589: LD_ADDR_VAR 0 7
20593: PUSH
20594: DOUBLE
20595: LD_INT 1
20597: DEC
20598: ST_TO_ADDR
20599: LD_VAR 0 12
20603: PUSH
20604: FOR_TO
20605: IFFALSE 20949
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20607: LD_VAR 0 12
20611: PUSH
20612: LD_VAR 0 7
20616: ARRAY
20617: PUSH
20618: LD_INT 1
20620: ARRAY
20621: PPUSH
20622: LD_VAR 0 12
20626: PUSH
20627: LD_VAR 0 7
20631: ARRAY
20632: PUSH
20633: LD_INT 2
20635: ARRAY
20636: PPUSH
20637: CALL_OW 488
20641: NOT
20642: IFTRUE 20684
20644: PUSH
20645: LD_VAR 0 12
20649: PUSH
20650: LD_VAR 0 7
20654: ARRAY
20655: PUSH
20656: LD_INT 1
20658: ARRAY
20659: PPUSH
20660: LD_VAR 0 12
20664: PUSH
20665: LD_VAR 0 7
20669: ARRAY
20670: PUSH
20671: LD_INT 2
20673: ARRAY
20674: PPUSH
20675: CALL_OW 428
20679: PUSH
20680: LD_INT 0
20682: GREATER
20683: OR
20684: IFTRUE 20722
20686: PUSH
20687: LD_VAR 0 12
20691: PUSH
20692: LD_VAR 0 7
20696: ARRAY
20697: PUSH
20698: LD_INT 1
20700: ARRAY
20701: PPUSH
20702: LD_VAR 0 12
20706: PUSH
20707: LD_VAR 0 7
20711: ARRAY
20712: PUSH
20713: LD_INT 2
20715: ARRAY
20716: PPUSH
20717: CALL_OW 351
20721: OR
20722: IFFALSE 20728
// exit ;
20724: POP
20725: POP
20726: GO 21032
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20728: LD_ADDR_VAR 0 8
20732: PUSH
20733: LD_VAR 0 12
20737: PUSH
20738: LD_VAR 0 7
20742: ARRAY
20743: PUSH
20744: LD_INT 1
20746: ARRAY
20747: PPUSH
20748: LD_VAR 0 12
20752: PUSH
20753: LD_VAR 0 7
20757: ARRAY
20758: PUSH
20759: LD_INT 2
20761: ARRAY
20762: PPUSH
20763: CALL_OW 546
20767: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20768: LD_VAR 0 8
20772: PUSH
20773: LD_INT 1
20775: ARRAY
20776: IFTRUE 20798
20778: PUSH
20779: LD_VAR 0 8
20783: PUSH
20784: LD_INT 2
20786: ARRAY
20787: PUSH
20788: LD_VAR 0 13
20792: PUSH
20793: LD_INT 2
20795: PLUS
20796: GREATER
20797: OR
20798: IFTRUE 20820
20800: PUSH
20801: LD_VAR 0 8
20805: PUSH
20806: LD_INT 2
20808: ARRAY
20809: PUSH
20810: LD_VAR 0 13
20814: PUSH
20815: LD_INT 2
20817: MINUS
20818: LESS
20819: OR
20820: IFTRUE 20888
20822: PUSH
20823: LD_VAR 0 8
20827: PUSH
20828: LD_INT 3
20830: ARRAY
20831: PUSH
20832: LD_INT 0
20834: PUSH
20835: LD_INT 8
20837: PUSH
20838: LD_INT 9
20840: PUSH
20841: LD_INT 10
20843: PUSH
20844: LD_INT 11
20846: PUSH
20847: LD_INT 12
20849: PUSH
20850: LD_INT 13
20852: PUSH
20853: LD_INT 16
20855: PUSH
20856: LD_INT 17
20858: PUSH
20859: LD_INT 18
20861: PUSH
20862: LD_INT 19
20864: PUSH
20865: LD_INT 20
20867: PUSH
20868: LD_INT 21
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: IN
20886: NOT
20887: OR
20888: IFTRUE 20901
20890: PUSH
20891: LD_VAR 0 8
20895: PUSH
20896: LD_INT 5
20898: ARRAY
20899: NOT
20900: OR
20901: IFTRUE 20941
20903: PUSH
20904: LD_VAR 0 8
20908: PUSH
20909: LD_INT 6
20911: ARRAY
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 7
20921: PUSH
20922: LD_INT 9
20924: PUSH
20925: LD_INT 10
20927: PUSH
20928: LD_INT 11
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: IN
20939: NOT
20940: OR
20941: IFFALSE 20947
// exit ;
20943: POP
20944: POP
20945: GO 21032
// end ;
20947: GO 20604
20949: POP
20950: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20951: LD_VAR 0 9
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: LD_VAR 0 4
20965: PPUSH
20966: LD_INT 20
20968: PPUSH
20969: CALL 12851 0 4
20973: PUSH
20974: LD_INT 4
20976: ARRAY
20977: IFFALSE 20981
// exit ;
20979: GO 21032
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20981: LD_VAR 0 2
20985: PUSH
20986: LD_INT 29
20988: PUSH
20989: LD_INT 30
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: IN
20996: IFFALSE 21020
20998: PUSH
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_VAR 0 4
21008: PPUSH
21009: LD_VAR 0 9
21013: PPUSH
21014: CALL_OW 440
21018: NOT
21019: AND
21020: IFFALSE 21024
// exit ;
21022: GO 21032
// result := true ;
21024: LD_ADDR_VAR 0 6
21028: PUSH
21029: LD_INT 1
21031: ST_TO_ADDR
// end ;
21032: LD_VAR 0 6
21036: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
21037: LD_INT 0
21039: PPUSH
21040: PPUSH
21041: PPUSH
21042: PPUSH
21043: PPUSH
21044: PPUSH
21045: PPUSH
21046: PPUSH
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
21060: PPUSH
21061: PPUSH
21062: PPUSH
21063: PPUSH
21064: PPUSH
21065: PPUSH
21066: PPUSH
21067: PPUSH
21068: PPUSH
21069: PPUSH
21070: PPUSH
21071: PPUSH
21072: PPUSH
21073: PPUSH
21074: PPUSH
21075: PPUSH
21076: PPUSH
21077: PPUSH
21078: PPUSH
21079: PPUSH
21080: PPUSH
21081: PPUSH
21082: PPUSH
21083: PPUSH
21084: PPUSH
21085: PPUSH
21086: PPUSH
21087: PPUSH
21088: PPUSH
21089: PPUSH
21090: PPUSH
21091: PPUSH
21092: PPUSH
21093: PPUSH
21094: PPUSH
21095: PPUSH
21096: PPUSH
// result = [ ] ;
21097: LD_ADDR_VAR 0 7
21101: PUSH
21102: EMPTY
21103: ST_TO_ADDR
// temp_list = [ ] ;
21104: LD_ADDR_VAR 0 9
21108: PUSH
21109: EMPTY
21110: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
21111: LD_VAR 0 4
21115: PUSH
21116: LD_INT 0
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 2
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: LD_INT 4
21130: PUSH
21131: LD_INT 5
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: IN
21142: NOT
21143: IFTRUE 21186
21145: PUSH
21146: LD_VAR 0 1
21150: PUSH
21151: LD_INT 0
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: IN
21161: IFFALSE 21185
21163: PUSH
21164: LD_VAR 0 5
21168: PUSH
21169: LD_INT 1
21171: PUSH
21172: LD_INT 2
21174: PUSH
21175: LD_INT 3
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: LIST
21182: IN
21183: NOT
21184: AND
21185: OR
21186: IFFALSE 21190
// exit ;
21188: GO 39589
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
21190: LD_VAR 0 1
21194: PUSH
21195: LD_INT 6
21197: PUSH
21198: LD_INT 7
21200: PUSH
21201: LD_INT 8
21203: PUSH
21204: LD_INT 13
21206: PUSH
21207: LD_INT 12
21209: PUSH
21210: LD_INT 15
21212: PUSH
21213: LD_INT 11
21215: PUSH
21216: LD_INT 14
21218: PUSH
21219: LD_INT 10
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: IN
21233: IFFALSE 21243
// btype = b_lab ;
21235: LD_ADDR_VAR 0 1
21239: PUSH
21240: LD_INT 6
21242: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
21243: LD_VAR 0 6
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: LD_INT 2
21256: PUSH
21257: EMPTY
21258: LIST
21259: LIST
21260: LIST
21261: IN
21262: NOT
21263: IFTRUE 21331
21265: PUSH
21266: LD_VAR 0 1
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: LD_INT 2
21279: PUSH
21280: LD_INT 3
21282: PUSH
21283: LD_INT 6
21285: PUSH
21286: LD_INT 36
21288: PUSH
21289: LD_INT 4
21291: PUSH
21292: LD_INT 5
21294: PUSH
21295: LD_INT 31
21297: PUSH
21298: LD_INT 32
21300: PUSH
21301: LD_INT 33
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: IN
21317: NOT
21318: IFFALSE 21330
21320: PUSH
21321: LD_VAR 0 6
21325: PUSH
21326: LD_INT 1
21328: EQUAL
21329: AND
21330: OR
21331: IFTRUE 21363
21333: PUSH
21334: LD_VAR 0 1
21338: PUSH
21339: LD_INT 2
21341: PUSH
21342: LD_INT 3
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: IN
21349: NOT
21350: IFFALSE 21362
21352: PUSH
21353: LD_VAR 0 6
21357: PUSH
21358: LD_INT 2
21360: EQUAL
21361: AND
21362: OR
21363: IFFALSE 21373
// mode = 0 ;
21365: LD_ADDR_VAR 0 6
21369: PUSH
21370: LD_INT 0
21372: ST_TO_ADDR
// case mode of 0 :
21373: LD_VAR 0 6
21377: PUSH
21378: LD_INT 0
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 32839
21386: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21387: LD_ADDR_VAR 0 11
21391: PUSH
21392: LD_INT 0
21394: PUSH
21395: LD_INT 0
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: PUSH
21402: LD_INT 0
21404: PUSH
21405: LD_INT 1
21407: NEG
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 1
21415: PUSH
21416: LD_INT 0
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 1
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: LD_INT 1
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: NEG
21446: PUSH
21447: LD_INT 0
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 1
21456: NEG
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: PUSH
21462: EMPTY
21463: LIST
21464: LIST
21465: PUSH
21466: LD_INT 1
21468: NEG
21469: PUSH
21470: LD_INT 2
21472: NEG
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 0
21480: PUSH
21481: LD_INT 2
21483: NEG
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_INT 1
21491: PUSH
21492: LD_INT 1
21494: NEG
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 1
21502: PUSH
21503: LD_INT 2
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: LD_INT 2
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: NEG
21523: PUSH
21524: LD_INT 1
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 1
21533: PUSH
21534: LD_INT 3
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: LD_INT 3
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: NEG
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: EMPTY
21563: LIST
21564: LIST
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21580: LD_ADDR_VAR 0 12
21584: PUSH
21585: LD_INT 0
21587: PUSH
21588: LD_INT 0
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: PUSH
21595: LD_INT 0
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: EMPTY
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 1
21608: PUSH
21609: LD_INT 0
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: PUSH
21616: LD_INT 1
21618: PUSH
21619: LD_INT 1
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 0
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 1
21638: NEG
21639: PUSH
21640: LD_INT 0
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 1
21649: NEG
21650: PUSH
21651: LD_INT 1
21653: NEG
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: PUSH
21662: LD_INT 1
21664: NEG
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 2
21672: PUSH
21673: LD_INT 0
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: LD_INT 2
21682: PUSH
21683: LD_INT 1
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 1
21692: NEG
21693: PUSH
21694: LD_INT 1
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 2
21703: NEG
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 2
21714: NEG
21715: PUSH
21716: LD_INT 1
21718: NEG
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 2
21726: NEG
21727: PUSH
21728: LD_INT 1
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 3
21737: NEG
21738: PUSH
21739: LD_INT 0
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 3
21748: NEG
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21776: LD_ADDR_VAR 0 13
21780: PUSH
21781: LD_INT 0
21783: PUSH
21784: LD_INT 0
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: PUSH
21791: LD_INT 0
21793: PUSH
21794: LD_INT 1
21796: NEG
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 1
21804: PUSH
21805: LD_INT 0
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 1
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 0
21824: PUSH
21825: LD_INT 1
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: NEG
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: LD_INT 1
21845: NEG
21846: PUSH
21847: LD_INT 1
21849: NEG
21850: PUSH
21851: EMPTY
21852: LIST
21853: LIST
21854: PUSH
21855: LD_INT 1
21857: NEG
21858: PUSH
21859: LD_INT 2
21861: NEG
21862: PUSH
21863: EMPTY
21864: LIST
21865: LIST
21866: PUSH
21867: LD_INT 2
21869: PUSH
21870: LD_INT 1
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 2
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 1
21889: PUSH
21890: LD_INT 2
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 2
21899: NEG
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PUSH
21909: LD_INT 2
21911: NEG
21912: PUSH
21913: LD_INT 2
21915: NEG
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 2
21923: NEG
21924: PUSH
21925: LD_INT 3
21927: NEG
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: LD_INT 3
21935: NEG
21936: PUSH
21937: LD_INT 2
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 3
21947: NEG
21948: PUSH
21949: LD_INT 3
21951: NEG
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21975: LD_ADDR_VAR 0 14
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: LD_INT 0
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 0
21992: PUSH
21993: LD_INT 1
21995: NEG
21996: PUSH
21997: EMPTY
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 0
22023: PUSH
22024: LD_INT 1
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 1
22033: NEG
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 1
22044: NEG
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: LD_INT 1
22056: NEG
22057: PUSH
22058: LD_INT 2
22060: NEG
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: PUSH
22066: LD_INT 0
22068: PUSH
22069: LD_INT 2
22071: NEG
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: LD_INT 1
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 1
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 1
22110: NEG
22111: PUSH
22112: LD_INT 1
22114: PUSH
22115: EMPTY
22116: LIST
22117: LIST
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: LD_INT 3
22125: NEG
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 0
22133: PUSH
22134: LD_INT 3
22136: NEG
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: LD_INT 2
22147: NEG
22148: PUSH
22149: EMPTY
22150: LIST
22151: LIST
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
22171: LD_ADDR_VAR 0 15
22175: PUSH
22176: LD_INT 0
22178: PUSH
22179: LD_INT 0
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 0
22188: PUSH
22189: LD_INT 1
22191: NEG
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: LD_INT 0
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: LD_INT 1
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 0
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 1
22229: NEG
22230: PUSH
22231: LD_INT 0
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: LD_INT 1
22244: NEG
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: LD_INT 1
22255: NEG
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: PUSH
22261: LD_INT 2
22263: PUSH
22264: LD_INT 0
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PUSH
22271: LD_INT 2
22273: PUSH
22274: LD_INT 1
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: PUSH
22281: LD_INT 1
22283: NEG
22284: PUSH
22285: LD_INT 1
22287: PUSH
22288: EMPTY
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 2
22294: NEG
22295: PUSH
22296: LD_INT 0
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 2
22305: NEG
22306: PUSH
22307: LD_INT 1
22309: NEG
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 2
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: LD_INT 3
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 3
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22364: LD_ADDR_VAR 0 16
22368: PUSH
22369: LD_INT 0
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 0
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: EMPTY
22387: LIST
22388: LIST
22389: PUSH
22390: LD_INT 1
22392: PUSH
22393: LD_INT 0
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: EMPTY
22407: LIST
22408: LIST
22409: PUSH
22410: LD_INT 0
22412: PUSH
22413: LD_INT 1
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 1
22422: NEG
22423: PUSH
22424: LD_INT 0
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 1
22433: NEG
22434: PUSH
22435: LD_INT 1
22437: NEG
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: LD_INT 1
22445: NEG
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 2
22457: PUSH
22458: LD_INT 1
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: LD_INT 2
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 2
22487: NEG
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 2
22499: NEG
22500: PUSH
22501: LD_INT 2
22503: NEG
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 2
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PUSH
22519: LD_INT 3
22521: PUSH
22522: LD_INT 3
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: PUSH
22529: LD_INT 2
22531: PUSH
22532: LD_INT 3
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22557: LD_ADDR_VAR 0 17
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 0
22574: PUSH
22575: LD_INT 1
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 0
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 1
22595: PUSH
22596: LD_INT 1
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 0
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 1
22615: NEG
22616: PUSH
22617: LD_INT 0
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 1
22626: NEG
22627: PUSH
22628: LD_INT 1
22630: NEG
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 1
22638: NEG
22639: PUSH
22640: LD_INT 2
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 0
22650: PUSH
22651: LD_INT 2
22653: NEG
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: LD_INT 1
22664: NEG
22665: PUSH
22666: EMPTY
22667: LIST
22668: LIST
22669: PUSH
22670: LD_INT 2
22672: PUSH
22673: LD_INT 0
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: LD_INT 2
22682: PUSH
22683: LD_INT 1
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PUSH
22690: LD_INT 2
22692: PUSH
22693: LD_INT 2
22695: PUSH
22696: EMPTY
22697: LIST
22698: LIST
22699: PUSH
22700: LD_INT 1
22702: PUSH
22703: LD_INT 2
22705: PUSH
22706: EMPTY
22707: LIST
22708: LIST
22709: PUSH
22710: LD_INT 0
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 1
22722: NEG
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 2
22733: NEG
22734: PUSH
22735: LD_INT 0
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 2
22744: NEG
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: LD_INT 2
22756: NEG
22757: PUSH
22758: LD_INT 2
22760: NEG
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22787: LD_ADDR_VAR 0 18
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 0
22804: PUSH
22805: LD_INT 1
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 1
22815: PUSH
22816: LD_INT 0
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 1
22825: PUSH
22826: LD_INT 1
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 0
22835: PUSH
22836: LD_INT 1
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 1
22845: NEG
22846: PUSH
22847: LD_INT 0
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 1
22856: NEG
22857: PUSH
22858: LD_INT 1
22860: NEG
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PUSH
22866: LD_INT 1
22868: NEG
22869: PUSH
22870: LD_INT 2
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 0
22880: PUSH
22881: LD_INT 2
22883: NEG
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: LD_INT 1
22894: NEG
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PUSH
22900: LD_INT 2
22902: PUSH
22903: LD_INT 0
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 2
22912: PUSH
22913: LD_INT 1
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 2
22922: PUSH
22923: LD_INT 2
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: LD_INT 1
22932: PUSH
22933: LD_INT 2
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 0
22942: PUSH
22943: LD_INT 2
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 1
22952: NEG
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 2
22963: NEG
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 2
22974: NEG
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 2
22986: NEG
22987: PUSH
22988: LD_INT 2
22990: NEG
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23017: LD_ADDR_VAR 0 19
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 0
23034: PUSH
23035: LD_INT 1
23037: NEG
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 1
23045: PUSH
23046: LD_INT 0
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: PUSH
23053: LD_INT 1
23055: PUSH
23056: LD_INT 1
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 0
23065: PUSH
23066: LD_INT 1
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 1
23075: NEG
23076: PUSH
23077: LD_INT 0
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 1
23086: NEG
23087: PUSH
23088: LD_INT 1
23090: NEG
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 1
23098: NEG
23099: PUSH
23100: LD_INT 2
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 0
23110: PUSH
23111: LD_INT 2
23113: NEG
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: LD_INT 1
23124: NEG
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 0
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 2
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: LD_INT 2
23152: PUSH
23153: LD_INT 2
23155: PUSH
23156: EMPTY
23157: LIST
23158: LIST
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: LD_INT 2
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: LD_INT 0
23172: PUSH
23173: LD_INT 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 1
23182: NEG
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: NEG
23194: PUSH
23195: LD_INT 0
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: LD_INT 2
23204: NEG
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 2
23216: NEG
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23247: LD_ADDR_VAR 0 20
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 0
23264: PUSH
23265: LD_INT 1
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 1
23275: PUSH
23276: LD_INT 0
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 1
23285: PUSH
23286: LD_INT 1
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 0
23295: PUSH
23296: LD_INT 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 1
23305: NEG
23306: PUSH
23307: LD_INT 0
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 1
23316: NEG
23317: PUSH
23318: LD_INT 1
23320: NEG
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 1
23328: NEG
23329: PUSH
23330: LD_INT 2
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 0
23340: PUSH
23341: LD_INT 2
23343: NEG
23344: PUSH
23345: EMPTY
23346: LIST
23347: LIST
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: LD_INT 1
23354: NEG
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 2
23362: PUSH
23363: LD_INT 0
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: LD_INT 2
23372: PUSH
23373: LD_INT 1
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 2
23382: PUSH
23383: LD_INT 2
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: LD_INT 1
23392: PUSH
23393: LD_INT 2
23395: PUSH
23396: EMPTY
23397: LIST
23398: LIST
23399: PUSH
23400: LD_INT 0
23402: PUSH
23403: LD_INT 2
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: NEG
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 2
23423: NEG
23424: PUSH
23425: LD_INT 0
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PUSH
23432: LD_INT 2
23434: NEG
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 2
23446: NEG
23447: PUSH
23448: LD_INT 2
23450: NEG
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23477: LD_ADDR_VAR 0 21
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 0
23494: PUSH
23495: LD_INT 1
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 1
23505: PUSH
23506: LD_INT 0
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 1
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PUSH
23523: LD_INT 0
23525: PUSH
23526: LD_INT 1
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: LD_INT 0
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 1
23546: NEG
23547: PUSH
23548: LD_INT 1
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 1
23558: NEG
23559: PUSH
23560: LD_INT 2
23562: NEG
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: PUSH
23568: LD_INT 0
23570: PUSH
23571: LD_INT 2
23573: NEG
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: LD_INT 1
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 2
23592: PUSH
23593: LD_INT 0
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 2
23602: PUSH
23603: LD_INT 1
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: LD_INT 2
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: LD_INT 2
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: PUSH
23630: LD_INT 0
23632: PUSH
23633: LD_INT 2
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: PUSH
23640: LD_INT 1
23642: NEG
23643: PUSH
23644: LD_INT 1
23646: PUSH
23647: EMPTY
23648: LIST
23649: LIST
23650: PUSH
23651: LD_INT 2
23653: NEG
23654: PUSH
23655: LD_INT 0
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: NEG
23665: PUSH
23666: LD_INT 1
23668: NEG
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: PUSH
23674: LD_INT 2
23676: NEG
23677: PUSH
23678: LD_INT 2
23680: NEG
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: LIST
23701: LIST
23702: LIST
23703: LIST
23704: LIST
23705: LIST
23706: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23707: LD_ADDR_VAR 0 22
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 0
23724: PUSH
23725: LD_INT 1
23727: NEG
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 1
23735: PUSH
23736: LD_INT 0
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PUSH
23743: LD_INT 1
23745: PUSH
23746: LD_INT 1
23748: PUSH
23749: EMPTY
23750: LIST
23751: LIST
23752: PUSH
23753: LD_INT 0
23755: PUSH
23756: LD_INT 1
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: PUSH
23763: LD_INT 1
23765: NEG
23766: PUSH
23767: LD_INT 0
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 1
23776: NEG
23777: PUSH
23778: LD_INT 1
23780: NEG
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PUSH
23786: LD_INT 1
23788: NEG
23789: PUSH
23790: LD_INT 2
23792: NEG
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: LD_INT 2
23803: NEG
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 2
23822: PUSH
23823: LD_INT 0
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: PUSH
23833: LD_INT 1
23835: PUSH
23836: EMPTY
23837: LIST
23838: LIST
23839: PUSH
23840: LD_INT 2
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: PUSH
23850: LD_INT 1
23852: PUSH
23853: LD_INT 2
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 0
23862: PUSH
23863: LD_INT 2
23865: PUSH
23866: EMPTY
23867: LIST
23868: LIST
23869: PUSH
23870: LD_INT 1
23872: NEG
23873: PUSH
23874: LD_INT 1
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: NEG
23884: PUSH
23885: LD_INT 0
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 2
23894: NEG
23895: PUSH
23896: LD_INT 1
23898: NEG
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 2
23906: NEG
23907: PUSH
23908: LD_INT 2
23910: NEG
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: EMPTY
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23937: LD_ADDR_VAR 0 23
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: LD_INT 0
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: LD_INT 0
23954: PUSH
23955: LD_INT 1
23957: NEG
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: LD_INT 0
23968: PUSH
23969: EMPTY
23970: LIST
23971: LIST
23972: PUSH
23973: LD_INT 1
23975: PUSH
23976: LD_INT 1
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 0
23985: PUSH
23986: LD_INT 1
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: LD_INT 1
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 1
24018: NEG
24019: PUSH
24020: LD_INT 2
24022: NEG
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: LD_INT 2
24033: NEG
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: PUSH
24039: LD_INT 1
24041: PUSH
24042: LD_INT 1
24044: NEG
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 2
24052: PUSH
24053: LD_INT 0
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 2
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: LD_INT 2
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 2
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 1
24102: NEG
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 2
24113: NEG
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: NEG
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 2
24136: NEG
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 2
24148: NEG
24149: PUSH
24150: LD_INT 3
24152: NEG
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 1
24160: NEG
24161: PUSH
24162: LD_INT 3
24164: NEG
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: LD_INT 2
24175: NEG
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: LD_INT 2
24183: PUSH
24184: LD_INT 1
24186: NEG
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
24217: LD_ADDR_VAR 0 24
24221: PUSH
24222: LD_INT 0
24224: PUSH
24225: LD_INT 0
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 0
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: LD_INT 0
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: LD_INT 1
24258: PUSH
24259: EMPTY
24260: LIST
24261: LIST
24262: PUSH
24263: LD_INT 0
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: PUSH
24273: LD_INT 1
24275: NEG
24276: PUSH
24277: LD_INT 0
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 1
24290: NEG
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 1
24298: NEG
24299: PUSH
24300: LD_INT 2
24302: NEG
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 0
24310: PUSH
24311: LD_INT 2
24313: NEG
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: LD_INT 1
24321: PUSH
24322: LD_INT 1
24324: NEG
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 2
24332: PUSH
24333: LD_INT 0
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: EMPTY
24347: LIST
24348: LIST
24349: PUSH
24350: LD_INT 2
24352: PUSH
24353: LD_INT 2
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: PUSH
24360: LD_INT 1
24362: PUSH
24363: LD_INT 2
24365: PUSH
24366: EMPTY
24367: LIST
24368: LIST
24369: PUSH
24370: LD_INT 0
24372: PUSH
24373: LD_INT 2
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 1
24382: NEG
24383: PUSH
24384: LD_INT 1
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: LD_INT 2
24393: NEG
24394: PUSH
24395: LD_INT 0
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: PUSH
24402: LD_INT 2
24404: NEG
24405: PUSH
24406: LD_INT 1
24408: NEG
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: PUSH
24414: LD_INT 2
24416: NEG
24417: PUSH
24418: LD_INT 2
24420: NEG
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: LD_INT 1
24428: PUSH
24429: LD_INT 2
24431: NEG
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 2
24439: PUSH
24440: LD_INT 1
24442: NEG
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 3
24450: PUSH
24451: LD_INT 1
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PUSH
24458: LD_INT 3
24460: PUSH
24461: LD_INT 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: EMPTY
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
24493: LD_ADDR_VAR 0 25
24497: PUSH
24498: LD_INT 0
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 0
24510: PUSH
24511: LD_INT 1
24513: NEG
24514: PUSH
24515: EMPTY
24516: LIST
24517: LIST
24518: PUSH
24519: LD_INT 1
24521: PUSH
24522: LD_INT 0
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 1
24531: PUSH
24532: LD_INT 1
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 0
24541: PUSH
24542: LD_INT 1
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 1
24551: NEG
24552: PUSH
24553: LD_INT 0
24555: PUSH
24556: EMPTY
24557: LIST
24558: LIST
24559: PUSH
24560: LD_INT 1
24562: NEG
24563: PUSH
24564: LD_INT 1
24566: NEG
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 1
24574: NEG
24575: PUSH
24576: LD_INT 2
24578: NEG
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 0
24586: PUSH
24587: LD_INT 2
24589: NEG
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 1
24597: PUSH
24598: LD_INT 1
24600: NEG
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: LD_INT 0
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: LD_INT 1
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 2
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: LD_INT 2
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: LD_INT 2
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: LD_INT 1
24658: NEG
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 2
24669: NEG
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 2
24680: NEG
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 2
24692: NEG
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: LD_INT 1
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 3
24714: PUSH
24715: LD_INT 2
24717: PUSH
24718: EMPTY
24719: LIST
24720: LIST
24721: PUSH
24722: LD_INT 2
24724: PUSH
24725: LD_INT 3
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: LD_INT 3
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24767: LD_ADDR_VAR 0 26
24771: PUSH
24772: LD_INT 0
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 0
24784: PUSH
24785: LD_INT 1
24787: NEG
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: PUSH
24793: LD_INT 1
24795: PUSH
24796: LD_INT 0
24798: PUSH
24799: EMPTY
24800: LIST
24801: LIST
24802: PUSH
24803: LD_INT 1
24805: PUSH
24806: LD_INT 1
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 0
24815: PUSH
24816: LD_INT 1
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 1
24825: NEG
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: LD_INT 1
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 1
24848: NEG
24849: PUSH
24850: LD_INT 2
24852: NEG
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: LD_INT 0
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 1
24871: PUSH
24872: LD_INT 1
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 0
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 2
24892: PUSH
24893: LD_INT 1
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PUSH
24900: LD_INT 2
24902: PUSH
24903: LD_INT 2
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PUSH
24910: LD_INT 1
24912: PUSH
24913: LD_INT 2
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: LD_INT 2
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: LD_INT 1
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: PUSH
24941: LD_INT 2
24943: NEG
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 1
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 2
24966: NEG
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 2
24978: PUSH
24979: LD_INT 3
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: PUSH
24986: LD_INT 1
24988: PUSH
24989: LD_INT 3
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: PUSH
24996: LD_INT 1
24998: NEG
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 2
25009: NEG
25010: PUSH
25011: LD_INT 1
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25043: LD_ADDR_VAR 0 27
25047: PUSH
25048: LD_INT 0
25050: PUSH
25051: LD_INT 0
25053: PUSH
25054: EMPTY
25055: LIST
25056: LIST
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: LD_INT 1
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: LD_INT 0
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 1
25112: NEG
25113: PUSH
25114: LD_INT 1
25116: NEG
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 1
25124: NEG
25125: PUSH
25126: LD_INT 2
25128: NEG
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: PUSH
25134: LD_INT 0
25136: PUSH
25137: LD_INT 2
25139: NEG
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PUSH
25145: LD_INT 1
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: LD_INT 1
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: LD_INT 2
25181: PUSH
25182: EMPTY
25183: LIST
25184: LIST
25185: PUSH
25186: LD_INT 1
25188: PUSH
25189: LD_INT 2
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 0
25198: PUSH
25199: LD_INT 2
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 1
25208: NEG
25209: PUSH
25210: LD_INT 1
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 2
25230: NEG
25231: PUSH
25232: LD_INT 1
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: NEG
25243: PUSH
25244: LD_INT 2
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 1
25254: NEG
25255: PUSH
25256: LD_INT 2
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 2
25265: NEG
25266: PUSH
25267: LD_INT 1
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 3
25276: NEG
25277: PUSH
25278: LD_INT 1
25280: NEG
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: PUSH
25286: LD_INT 3
25288: NEG
25289: PUSH
25290: LD_INT 2
25292: NEG
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25323: LD_ADDR_VAR 0 28
25327: PUSH
25328: LD_INT 0
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 0
25340: PUSH
25341: LD_INT 1
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 0
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: LD_INT 1
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 0
25371: PUSH
25372: LD_INT 1
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 1
25381: NEG
25382: PUSH
25383: LD_INT 0
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: NEG
25405: PUSH
25406: LD_INT 2
25408: NEG
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: PUSH
25414: LD_INT 0
25416: PUSH
25417: LD_INT 2
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 2
25438: PUSH
25439: LD_INT 0
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: LD_INT 1
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: LD_INT 2
25461: PUSH
25462: EMPTY
25463: LIST
25464: LIST
25465: PUSH
25466: LD_INT 1
25468: PUSH
25469: LD_INT 2
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 0
25478: PUSH
25479: LD_INT 2
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: NEG
25489: PUSH
25490: LD_INT 1
25492: PUSH
25493: EMPTY
25494: LIST
25495: LIST
25496: PUSH
25497: LD_INT 2
25499: NEG
25500: PUSH
25501: LD_INT 0
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 2
25510: NEG
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 2
25522: NEG
25523: PUSH
25524: LD_INT 2
25526: NEG
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: PUSH
25532: LD_INT 2
25534: NEG
25535: PUSH
25536: LD_INT 3
25538: NEG
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: LD_INT 3
25550: NEG
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: LD_INT 3
25558: NEG
25559: PUSH
25560: LD_INT 1
25562: NEG
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 3
25570: NEG
25571: PUSH
25572: LD_INT 2
25574: NEG
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25605: LD_ADDR_VAR 0 29
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: LD_INT 0
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 0
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 1
25633: PUSH
25634: LD_INT 0
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: LD_INT 1
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 0
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: LD_INT 0
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: PUSH
25672: LD_INT 1
25674: NEG
25675: PUSH
25676: LD_INT 1
25678: NEG
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: LD_INT 2
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 0
25698: PUSH
25699: LD_INT 2
25701: NEG
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 1
25709: PUSH
25710: LD_INT 1
25712: NEG
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: LD_INT 2
25720: PUSH
25721: LD_INT 0
25723: PUSH
25724: EMPTY
25725: LIST
25726: LIST
25727: PUSH
25728: LD_INT 2
25730: PUSH
25731: LD_INT 1
25733: PUSH
25734: EMPTY
25735: LIST
25736: LIST
25737: PUSH
25738: LD_INT 1
25740: PUSH
25741: LD_INT 2
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: PUSH
25748: LD_INT 0
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 1
25760: NEG
25761: PUSH
25762: LD_INT 1
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: LD_INT 1
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: LD_INT 2
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: NEG
25796: PUSH
25797: LD_INT 3
25799: NEG
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 2
25807: PUSH
25808: LD_INT 1
25810: NEG
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 3
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 3
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: NEG
25839: PUSH
25840: LD_INT 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 3
25849: NEG
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25884: LD_ADDR_VAR 0 30
25888: PUSH
25889: LD_INT 0
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 0
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: LD_INT 1
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 1
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: LD_INT 1
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 1
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 2
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 0
25977: PUSH
25978: LD_INT 2
25980: NEG
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PUSH
25986: LD_INT 1
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 2
25999: PUSH
26000: LD_INT 0
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 2
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: PUSH
26020: LD_INT 2
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 1
26029: PUSH
26030: LD_INT 2
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 1
26039: NEG
26040: PUSH
26041: LD_INT 1
26043: PUSH
26044: EMPTY
26045: LIST
26046: LIST
26047: PUSH
26048: LD_INT 2
26050: NEG
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 2
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: NEG
26074: PUSH
26075: LD_INT 3
26077: NEG
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: LD_INT 2
26088: NEG
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 3
26096: PUSH
26097: LD_INT 2
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 2
26106: PUSH
26107: LD_INT 3
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 2
26116: NEG
26117: PUSH
26118: LD_INT 1
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: LD_INT 3
26127: NEG
26128: PUSH
26129: LD_INT 1
26131: NEG
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: LIST
26157: LIST
26158: LIST
26159: LIST
26160: LIST
26161: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26162: LD_ADDR_VAR 0 31
26166: PUSH
26167: LD_INT 0
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 0
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PUSH
26201: LD_INT 1
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 1
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 1
26220: NEG
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 1
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: NEG
26244: PUSH
26245: LD_INT 2
26247: NEG
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: LD_INT 1
26258: NEG
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 2
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 2
26286: PUSH
26287: LD_INT 2
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 1
26296: PUSH
26297: LD_INT 2
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: LD_INT 2
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: EMPTY
26322: LIST
26323: LIST
26324: PUSH
26325: LD_INT 2
26327: NEG
26328: PUSH
26329: LD_INT 1
26331: NEG
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 2
26339: NEG
26340: PUSH
26341: LD_INT 2
26343: NEG
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 2
26351: NEG
26352: PUSH
26353: LD_INT 3
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 2
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 3
26374: PUSH
26375: LD_INT 1
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: LD_INT 1
26384: PUSH
26385: LD_INT 3
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: LD_INT 2
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: PUSH
26403: LD_INT 3
26405: NEG
26406: PUSH
26407: LD_INT 2
26409: NEG
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: LIST
26433: LIST
26434: LIST
26435: LIST
26436: LIST
26437: LIST
26438: LIST
26439: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26440: LD_ADDR_VAR 0 32
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 0
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 1
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 1
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 0
26488: PUSH
26489: LD_INT 1
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: LD_INT 0
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 1
26509: NEG
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 1
26521: NEG
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 0
26533: PUSH
26534: LD_INT 2
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 1
26544: PUSH
26545: LD_INT 1
26547: NEG
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 2
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: LD_INT 2
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 2
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 0
26585: PUSH
26586: LD_INT 2
26588: PUSH
26589: EMPTY
26590: LIST
26591: LIST
26592: PUSH
26593: LD_INT 1
26595: NEG
26596: PUSH
26597: LD_INT 1
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: NEG
26607: PUSH
26608: LD_INT 0
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 2
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 1
26629: NEG
26630: PUSH
26631: LD_INT 3
26633: NEG
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: LD_INT 2
26644: NEG
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: PUSH
26650: LD_INT 3
26652: PUSH
26653: LD_INT 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 2
26662: PUSH
26663: LD_INT 3
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: NEG
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 3
26683: NEG
26684: PUSH
26685: LD_INT 1
26687: NEG
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26718: LD_ADDR_VAR 0 33
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 0
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 0
26735: PUSH
26736: LD_INT 1
26738: NEG
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: PUSH
26747: LD_INT 0
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: LD_INT 1
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 1
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 1
26776: NEG
26777: PUSH
26778: LD_INT 0
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 1
26787: NEG
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 1
26799: NEG
26800: PUSH
26801: LD_INT 2
26803: NEG
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 2
26822: PUSH
26823: LD_INT 0
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 2
26832: PUSH
26833: LD_INT 1
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: PUSH
26840: LD_INT 1
26842: PUSH
26843: LD_INT 2
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: LD_INT 2
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: LD_INT 1
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: PUSH
26871: LD_INT 2
26873: NEG
26874: PUSH
26875: LD_INT 0
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 2
26884: NEG
26885: PUSH
26886: LD_INT 1
26888: NEG
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 2
26896: NEG
26897: PUSH
26898: LD_INT 2
26900: NEG
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: LD_INT 2
26908: NEG
26909: PUSH
26910: LD_INT 3
26912: NEG
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 2
26920: PUSH
26921: LD_INT 1
26923: NEG
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 1
26941: PUSH
26942: LD_INT 3
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 3
26962: NEG
26963: PUSH
26964: LD_INT 2
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: LIST
26993: LIST
26994: LIST
26995: LIST
26996: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26997: LD_ADDR_VAR 0 34
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 0
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 0
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 1
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PUSH
27043: LD_INT 0
27045: PUSH
27046: LD_INT 1
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: LD_INT 0
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: PUSH
27064: LD_INT 1
27066: NEG
27067: PUSH
27068: LD_INT 1
27070: NEG
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: PUSH
27076: LD_INT 1
27078: NEG
27079: PUSH
27080: LD_INT 2
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 2
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 1
27104: NEG
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PUSH
27110: LD_INT 2
27112: PUSH
27113: LD_INT 1
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 2
27122: PUSH
27123: LD_INT 2
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: LD_INT 2
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 2
27153: NEG
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 2
27164: NEG
27165: PUSH
27166: LD_INT 1
27168: NEG
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: LD_INT 2
27176: NEG
27177: PUSH
27178: LD_INT 2
27180: NEG
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 1
27188: NEG
27189: PUSH
27190: LD_INT 3
27192: NEG
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: PUSH
27198: LD_INT 1
27200: PUSH
27201: LD_INT 2
27203: NEG
27204: PUSH
27205: EMPTY
27206: LIST
27207: LIST
27208: PUSH
27209: LD_INT 3
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: EMPTY
27216: LIST
27217: LIST
27218: PUSH
27219: LD_INT 2
27221: PUSH
27222: LD_INT 3
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 2
27231: NEG
27232: PUSH
27233: LD_INT 1
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 3
27242: NEG
27243: PUSH
27244: LD_INT 1
27246: NEG
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27277: LD_ADDR_VAR 0 35
27281: PUSH
27282: LD_INT 0
27284: PUSH
27285: LD_INT 0
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: LD_INT 1
27297: NEG
27298: PUSH
27299: EMPTY
27300: LIST
27301: LIST
27302: PUSH
27303: LD_INT 1
27305: PUSH
27306: LD_INT 0
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: LD_INT 1
27315: PUSH
27316: LD_INT 1
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 1
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: NEG
27336: PUSH
27337: LD_INT 0
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: NEG
27347: PUSH
27348: LD_INT 1
27350: NEG
27351: PUSH
27352: EMPTY
27353: LIST
27354: LIST
27355: PUSH
27356: LD_INT 2
27358: PUSH
27359: LD_INT 1
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: PUSH
27366: LD_INT 2
27368: NEG
27369: PUSH
27370: LD_INT 1
27372: NEG
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27389: LD_ADDR_VAR 0 36
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: LD_INT 0
27399: PUSH
27400: EMPTY
27401: LIST
27402: LIST
27403: PUSH
27404: LD_INT 0
27406: PUSH
27407: LD_INT 1
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: LD_INT 0
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 1
27427: PUSH
27428: LD_INT 1
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 1
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: NEG
27448: PUSH
27449: LD_INT 0
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: NEG
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 1
27470: NEG
27471: PUSH
27472: LD_INT 2
27474: NEG
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PUSH
27480: LD_INT 1
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: PUSH
27490: EMPTY
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27501: LD_ADDR_VAR 0 37
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 0
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 0
27518: PUSH
27519: LD_INT 1
27521: NEG
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: LD_INT 0
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 1
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 1
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: NEG
27560: PUSH
27561: LD_INT 0
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 1
27574: NEG
27575: PUSH
27576: EMPTY
27577: LIST
27578: LIST
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 1
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27613: LD_ADDR_VAR 0 38
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 0
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: LD_INT 1
27633: NEG
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: LD_INT 0
27644: PUSH
27645: EMPTY
27646: LIST
27647: LIST
27648: PUSH
27649: LD_INT 1
27651: PUSH
27652: LD_INT 1
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 1
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: NEG
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: NEG
27683: PUSH
27684: LD_INT 1
27686: NEG
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: PUSH
27692: LD_INT 2
27694: PUSH
27695: LD_INT 1
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 2
27704: NEG
27705: PUSH
27706: LD_INT 1
27708: NEG
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27725: LD_ADDR_VAR 0 39
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: LD_INT 0
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 0
27742: PUSH
27743: LD_INT 1
27745: NEG
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 0
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 1
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: EMPTY
27768: LIST
27769: LIST
27770: PUSH
27771: LD_INT 0
27773: PUSH
27774: LD_INT 1
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 1
27783: NEG
27784: PUSH
27785: LD_INT 0
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: PUSH
27792: LD_INT 1
27794: NEG
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 1
27806: NEG
27807: PUSH
27808: LD_INT 2
27810: NEG
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: PUSH
27816: LD_INT 1
27818: PUSH
27819: LD_INT 2
27821: PUSH
27822: EMPTY
27823: LIST
27824: LIST
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27837: LD_ADDR_VAR 0 40
27841: PUSH
27842: LD_INT 0
27844: PUSH
27845: LD_INT 0
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 0
27854: PUSH
27855: LD_INT 1
27857: NEG
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 1
27865: PUSH
27866: LD_INT 0
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: PUSH
27876: LD_INT 1
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PUSH
27883: LD_INT 0
27885: PUSH
27886: LD_INT 1
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 1
27895: NEG
27896: PUSH
27897: LD_INT 0
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: NEG
27907: PUSH
27908: LD_INT 1
27910: NEG
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: LD_INT 1
27921: NEG
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27949: LD_ADDR_VAR 0 41
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: EMPTY
27961: LIST
27962: LIST
27963: PUSH
27964: LD_INT 0
27966: PUSH
27967: LD_INT 1
27969: NEG
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 1
27977: PUSH
27978: LD_INT 0
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 1
27987: PUSH
27988: LD_INT 1
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 0
27997: PUSH
27998: LD_INT 1
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 1
28007: NEG
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 1
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 1
28030: NEG
28031: PUSH
28032: LD_INT 2
28034: NEG
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 1
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: LD_INT 0
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: PUSH
28061: LD_INT 2
28063: PUSH
28064: LD_INT 1
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 2
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 1
28083: PUSH
28084: LD_INT 2
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 1
28097: PUSH
28098: EMPTY
28099: LIST
28100: LIST
28101: PUSH
28102: LD_INT 2
28104: NEG
28105: PUSH
28106: LD_INT 0
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 2
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: NEG
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 2
28127: NEG
28128: PUSH
28129: LD_INT 2
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: NEG
28140: PUSH
28141: LD_INT 3
28143: NEG
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 2
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 3
28162: PUSH
28163: LD_INT 0
28165: PUSH
28166: EMPTY
28167: LIST
28168: LIST
28169: PUSH
28170: LD_INT 3
28172: PUSH
28173: LD_INT 1
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 3
28182: PUSH
28183: LD_INT 2
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 3
28192: PUSH
28193: LD_INT 3
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: LD_INT 2
28202: PUSH
28203: LD_INT 3
28205: PUSH
28206: EMPTY
28207: LIST
28208: LIST
28209: PUSH
28210: LD_INT 2
28212: NEG
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 3
28223: NEG
28224: PUSH
28225: LD_INT 0
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: PUSH
28232: LD_INT 3
28234: NEG
28235: PUSH
28236: LD_INT 1
28238: NEG
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 3
28246: NEG
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 3
28258: NEG
28259: PUSH
28260: LD_INT 3
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28299: LD_ADDR_VAR 0 42
28303: PUSH
28304: LD_INT 0
28306: PUSH
28307: LD_INT 0
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: LD_INT 1
28319: NEG
28320: PUSH
28321: EMPTY
28322: LIST
28323: LIST
28324: PUSH
28325: LD_INT 1
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: LD_INT 1
28337: PUSH
28338: LD_INT 1
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: LD_INT 1
28357: NEG
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 1
28368: NEG
28369: PUSH
28370: LD_INT 1
28372: NEG
28373: PUSH
28374: EMPTY
28375: LIST
28376: LIST
28377: PUSH
28378: LD_INT 1
28380: NEG
28381: PUSH
28382: LD_INT 2
28384: NEG
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: LD_INT 2
28395: NEG
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 1
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 2
28414: PUSH
28415: LD_INT 1
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PUSH
28422: LD_INT 2
28424: PUSH
28425: LD_INT 2
28427: PUSH
28428: EMPTY
28429: LIST
28430: LIST
28431: PUSH
28432: LD_INT 1
28434: PUSH
28435: LD_INT 2
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: LD_INT 2
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: PUSH
28452: LD_INT 1
28454: NEG
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 2
28465: NEG
28466: PUSH
28467: LD_INT 1
28469: NEG
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 2
28477: NEG
28478: PUSH
28479: LD_INT 2
28481: NEG
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 2
28489: NEG
28490: PUSH
28491: LD_INT 3
28493: NEG
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: LD_INT 1
28501: NEG
28502: PUSH
28503: LD_INT 3
28505: NEG
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 3
28516: NEG
28517: PUSH
28518: EMPTY
28519: LIST
28520: LIST
28521: PUSH
28522: LD_INT 1
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: EMPTY
28530: LIST
28531: LIST
28532: PUSH
28533: LD_INT 3
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 3
28545: PUSH
28546: LD_INT 3
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 2
28555: PUSH
28556: LD_INT 3
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 1
28565: PUSH
28566: LD_INT 3
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 0
28575: PUSH
28576: LD_INT 3
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 1
28585: NEG
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 3
28596: NEG
28597: PUSH
28598: LD_INT 2
28600: NEG
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 3
28608: NEG
28609: PUSH
28610: LD_INT 3
28612: NEG
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28649: LD_ADDR_VAR 0 43
28653: PUSH
28654: LD_INT 0
28656: PUSH
28657: LD_INT 0
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: LD_INT 1
28669: NEG
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 1
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: PUSH
28688: LD_INT 1
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: LD_INT 1
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: PUSH
28705: LD_INT 1
28707: NEG
28708: PUSH
28709: LD_INT 0
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: NEG
28731: PUSH
28732: LD_INT 2
28734: NEG
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 2
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 1
28756: NEG
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 2
28764: PUSH
28765: LD_INT 0
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 2
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 0
28794: PUSH
28795: LD_INT 2
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: LD_INT 1
28804: NEG
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 2
28815: NEG
28816: PUSH
28817: LD_INT 0
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: NEG
28827: PUSH
28828: LD_INT 1
28830: NEG
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: PUSH
28836: LD_INT 1
28838: NEG
28839: PUSH
28840: LD_INT 3
28842: NEG
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 0
28850: PUSH
28851: LD_INT 3
28853: NEG
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 1
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 2
28872: PUSH
28873: LD_INT 1
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 3
28883: PUSH
28884: LD_INT 0
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PUSH
28891: LD_INT 3
28893: PUSH
28894: LD_INT 1
28896: PUSH
28897: EMPTY
28898: LIST
28899: LIST
28900: PUSH
28901: LD_INT 1
28903: PUSH
28904: LD_INT 3
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 0
28913: PUSH
28914: LD_INT 3
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: PUSH
28921: LD_INT 1
28923: NEG
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 3
28945: NEG
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 3
28956: NEG
28957: PUSH
28958: LD_INT 1
28960: NEG
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28997: LD_ADDR_VAR 0 44
29001: PUSH
29002: LD_INT 0
29004: PUSH
29005: LD_INT 0
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: LD_INT 1
29017: NEG
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 1
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 1
29035: PUSH
29036: LD_INT 1
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 0
29045: PUSH
29046: LD_INT 1
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 1
29055: NEG
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 1
29078: NEG
29079: PUSH
29080: LD_INT 2
29082: NEG
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 1
29093: NEG
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 2
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 2
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 2
29121: PUSH
29122: LD_INT 2
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: PUSH
29132: LD_INT 2
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: PUSH
29150: LD_INT 2
29152: NEG
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: LD_INT 2
29163: NEG
29164: PUSH
29165: LD_INT 1
29167: NEG
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: LD_INT 2
29175: NEG
29176: PUSH
29177: LD_INT 2
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: LD_INT 3
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 3
29210: PUSH
29211: LD_INT 0
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: LD_INT 3
29220: PUSH
29221: LD_INT 1
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 3
29230: PUSH
29231: LD_INT 2
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PUSH
29238: LD_INT 3
29240: PUSH
29241: LD_INT 3
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: PUSH
29248: LD_INT 2
29250: PUSH
29251: LD_INT 3
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 2
29260: NEG
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 3
29271: NEG
29272: PUSH
29273: LD_INT 0
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: LD_INT 3
29282: NEG
29283: PUSH
29284: LD_INT 1
29286: NEG
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: LD_INT 3
29294: NEG
29295: PUSH
29296: LD_INT 2
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 3
29306: NEG
29307: PUSH
29308: LD_INT 3
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: EMPTY
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29347: LD_ADDR_VAR 0 45
29351: PUSH
29352: LD_INT 0
29354: PUSH
29355: LD_INT 0
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: LD_INT 1
29367: NEG
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: LD_INT 0
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: LD_INT 1
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: LD_INT 1
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 1
29405: NEG
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 1
29416: NEG
29417: PUSH
29418: LD_INT 1
29420: NEG
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: LD_INT 1
29428: NEG
29429: PUSH
29430: LD_INT 2
29432: NEG
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 0
29440: PUSH
29441: LD_INT 2
29443: NEG
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: PUSH
29449: LD_INT 1
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 2
29462: PUSH
29463: LD_INT 1
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: LD_INT 2
29472: PUSH
29473: LD_INT 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PUSH
29480: LD_INT 1
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 0
29492: PUSH
29493: LD_INT 2
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 1
29502: NEG
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 2
29513: NEG
29514: PUSH
29515: LD_INT 1
29517: NEG
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 2
29525: NEG
29526: PUSH
29527: LD_INT 2
29529: NEG
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 2
29537: NEG
29538: PUSH
29539: LD_INT 3
29541: NEG
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 1
29549: NEG
29550: PUSH
29551: LD_INT 3
29553: NEG
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 0
29561: PUSH
29562: LD_INT 3
29564: NEG
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 2
29575: NEG
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: PUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 3
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 2
29603: PUSH
29604: LD_INT 3
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 1
29613: PUSH
29614: LD_INT 3
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: LD_INT 0
29623: PUSH
29624: LD_INT 3
29626: PUSH
29627: EMPTY
29628: LIST
29629: LIST
29630: PUSH
29631: LD_INT 1
29633: NEG
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 3
29644: NEG
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 3
29656: NEG
29657: PUSH
29658: LD_INT 3
29660: NEG
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29697: LD_ADDR_VAR 0 46
29701: PUSH
29702: LD_INT 0
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 0
29714: PUSH
29715: LD_INT 1
29717: NEG
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: PUSH
29723: LD_INT 1
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: PUSH
29743: LD_INT 0
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 1
29755: NEG
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 1
29766: NEG
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: NEG
29779: PUSH
29780: LD_INT 2
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 0
29790: PUSH
29791: LD_INT 2
29793: NEG
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: LD_INT 1
29804: NEG
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 2
29812: PUSH
29813: LD_INT 0
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 1
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 1
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 2
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: LD_INT 1
29852: NEG
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: EMPTY
29858: LIST
29859: LIST
29860: PUSH
29861: LD_INT 2
29863: NEG
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: NEG
29875: PUSH
29876: LD_INT 1
29878: NEG
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 1
29886: NEG
29887: PUSH
29888: LD_INT 3
29890: NEG
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 3
29901: NEG
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: LD_INT 2
29912: NEG
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: LD_INT 1
29923: NEG
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 3
29931: PUSH
29932: LD_INT 0
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 3
29941: PUSH
29942: LD_INT 1
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: LD_INT 1
29951: PUSH
29952: LD_INT 3
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 0
29961: PUSH
29962: LD_INT 3
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 1
29971: NEG
29972: PUSH
29973: LD_INT 2
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: NEG
29983: PUSH
29984: LD_INT 1
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 3
29993: NEG
29994: PUSH
29995: LD_INT 0
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: LD_INT 3
30004: NEG
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30045: LD_ADDR_VAR 0 47
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 0
30062: PUSH
30063: LD_INT 1
30065: NEG
30066: PUSH
30067: EMPTY
30068: LIST
30069: LIST
30070: PUSH
30071: LD_INT 1
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 0
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: LD_INT 0
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 1
30114: NEG
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PUSH
30124: LD_INT 1
30126: NEG
30127: PUSH
30128: LD_INT 2
30130: NEG
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 0
30138: PUSH
30139: LD_INT 2
30141: NEG
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 1
30152: NEG
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: NEG
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: LD_INT 2
30176: NEG
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
30196: LD_ADDR_VAR 0 48
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: LD_INT 0
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 0
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 1
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: LD_INT 1
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: NEG
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: LD_INT 1
30269: NEG
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 1
30277: NEG
30278: PUSH
30279: LD_INT 2
30281: NEG
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 0
30289: PUSH
30290: LD_INT 2
30292: NEG
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 1
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 2
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: LIST
30340: LIST
30341: LIST
30342: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30343: LD_ADDR_VAR 0 49
30347: PUSH
30348: LD_INT 0
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PUSH
30358: LD_INT 0
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 1
30371: PUSH
30372: LD_INT 0
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 1
30381: PUSH
30382: LD_INT 1
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 0
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 1
30401: NEG
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: PUSH
30422: LD_INT 1
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: LD_INT 0
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: PUSH
30443: LD_INT 2
30445: PUSH
30446: LD_INT 1
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 2
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: LD_INT 2
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30487: LD_ADDR_VAR 0 50
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: LD_INT 0
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: PUSH
30502: LD_INT 0
30504: PUSH
30505: LD_INT 1
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: LD_INT 0
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: LD_INT 1
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 0
30535: PUSH
30536: LD_INT 1
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 1
30545: NEG
30546: PUSH
30547: LD_INT 0
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 1
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 2
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 2
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: EMPTY
30583: LIST
30584: LIST
30585: PUSH
30586: LD_INT 1
30588: PUSH
30589: LD_INT 2
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: LD_INT 2
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 1
30608: NEG
30609: PUSH
30610: LD_INT 1
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30631: LD_ADDR_VAR 0 51
30635: PUSH
30636: LD_INT 0
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: PUSH
30646: LD_INT 0
30648: PUSH
30649: LD_INT 1
30651: NEG
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: LD_INT 0
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 1
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 0
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 1
30689: NEG
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PUSH
30698: LD_INT 1
30700: NEG
30701: PUSH
30702: LD_INT 1
30704: NEG
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: PUSH
30713: LD_INT 2
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PUSH
30720: LD_INT 0
30722: PUSH
30723: LD_INT 2
30725: PUSH
30726: EMPTY
30727: LIST
30728: LIST
30729: PUSH
30730: LD_INT 1
30732: NEG
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: PUSH
30741: LD_INT 2
30743: NEG
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: NEG
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30778: LD_ADDR_VAR 0 52
30782: PUSH
30783: LD_INT 0
30785: PUSH
30786: LD_INT 0
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: LD_INT 1
30798: NEG
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 0
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: PUSH
30817: LD_INT 1
30819: PUSH
30820: EMPTY
30821: LIST
30822: LIST
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: LD_INT 1
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 1
30836: NEG
30837: PUSH
30838: LD_INT 0
30840: PUSH
30841: EMPTY
30842: LIST
30843: LIST
30844: PUSH
30845: LD_INT 1
30847: NEG
30848: PUSH
30849: LD_INT 1
30851: NEG
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: NEG
30860: PUSH
30861: LD_INT 2
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 2
30893: NEG
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: LD_INT 2
30905: NEG
30906: PUSH
30907: LD_INT 2
30909: NEG
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30929: LD_ADDR_VAR 0 53
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 0
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 1
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 1
30967: PUSH
30968: LD_INT 1
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 0
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 1
30987: NEG
30988: PUSH
30989: LD_INT 0
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: NEG
30999: PUSH
31000: LD_INT 1
31002: NEG
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 1
31010: NEG
31011: PUSH
31012: LD_INT 2
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: LD_INT 2
31025: NEG
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 2
31044: PUSH
31045: LD_INT 0
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: LD_INT 2
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 2
31064: PUSH
31065: LD_INT 2
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 2
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 2
31105: NEG
31106: PUSH
31107: LD_INT 0
31109: PUSH
31110: EMPTY
31111: LIST
31112: LIST
31113: PUSH
31114: LD_INT 2
31116: NEG
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 2
31128: NEG
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: LIST
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31159: LD_ADDR_VAR 0 54
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 0
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PUSH
31195: LD_INT 1
31197: PUSH
31198: LD_INT 1
31200: PUSH
31201: EMPTY
31202: LIST
31203: LIST
31204: PUSH
31205: LD_INT 0
31207: PUSH
31208: LD_INT 1
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: PUSH
31215: LD_INT 1
31217: NEG
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 1
31228: NEG
31229: PUSH
31230: LD_INT 1
31232: NEG
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 1
31240: NEG
31241: PUSH
31242: LD_INT 2
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 2
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 1
31266: NEG
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 2
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 2
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: EMPTY
31289: LIST
31290: LIST
31291: PUSH
31292: LD_INT 2
31294: PUSH
31295: LD_INT 2
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: EMPTY
31309: LIST
31310: LIST
31311: PUSH
31312: LD_INT 0
31314: PUSH
31315: LD_INT 2
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 1
31324: NEG
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 2
31335: NEG
31336: PUSH
31337: LD_INT 0
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 2
31346: NEG
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 2
31358: NEG
31359: PUSH
31360: LD_INT 2
31362: NEG
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31389: LD_ADDR_VAR 0 55
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: LD_INT 0
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 1
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 0
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: NEG
31448: PUSH
31449: LD_INT 0
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 1
31462: NEG
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: PUSH
31468: LD_INT 1
31470: NEG
31471: PUSH
31472: LD_INT 2
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 0
31482: PUSH
31483: LD_INT 2
31485: NEG
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: LD_INT 2
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: EMPTY
31519: LIST
31520: LIST
31521: PUSH
31522: LD_INT 2
31524: PUSH
31525: LD_INT 2
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 1
31534: PUSH
31535: LD_INT 2
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: LD_INT 0
31544: PUSH
31545: LD_INT 2
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 1
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 2
31565: NEG
31566: PUSH
31567: LD_INT 0
31569: PUSH
31570: EMPTY
31571: LIST
31572: LIST
31573: PUSH
31574: LD_INT 2
31576: NEG
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: LD_INT 2
31592: NEG
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31619: LD_ADDR_VAR 0 56
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 0
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 1
31647: PUSH
31648: LD_INT 0
31650: PUSH
31651: EMPTY
31652: LIST
31653: LIST
31654: PUSH
31655: LD_INT 1
31657: PUSH
31658: LD_INT 1
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: PUSH
31665: LD_INT 0
31667: PUSH
31668: LD_INT 1
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: PUSH
31675: LD_INT 1
31677: NEG
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 1
31688: NEG
31689: PUSH
31690: LD_INT 1
31692: NEG
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 1
31700: NEG
31701: PUSH
31702: LD_INT 2
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: LD_INT 2
31715: NEG
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 0
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: LD_INT 2
31744: PUSH
31745: LD_INT 1
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: LD_INT 2
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: PUSH
31765: LD_INT 2
31767: PUSH
31768: EMPTY
31769: LIST
31770: LIST
31771: PUSH
31772: LD_INT 0
31774: PUSH
31775: LD_INT 2
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: LD_INT 1
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 2
31795: NEG
31796: PUSH
31797: LD_INT 0
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 2
31806: NEG
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: EMPTY
31813: LIST
31814: LIST
31815: PUSH
31816: LD_INT 2
31818: NEG
31819: PUSH
31820: LD_INT 2
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31849: LD_ADDR_VAR 0 57
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 0
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 0
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: LD_INT 0
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: PUSH
31888: LD_INT 1
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: PUSH
31895: LD_INT 0
31897: PUSH
31898: LD_INT 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 0
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 2
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: LD_INT 0
31942: PUSH
31943: LD_INT 2
31945: NEG
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 2
31964: PUSH
31965: LD_INT 0
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: PUSH
31985: LD_INT 2
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: PUSH
31992: LD_INT 1
31994: PUSH
31995: LD_INT 2
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: LD_INT 2
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: PUSH
32012: LD_INT 1
32014: NEG
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: EMPTY
32020: LIST
32021: LIST
32022: PUSH
32023: LD_INT 2
32025: NEG
32026: PUSH
32027: LD_INT 0
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 2
32036: NEG
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 2
32048: NEG
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: EMPTY
32055: LIST
32056: LIST
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32079: LD_ADDR_VAR 0 58
32083: PUSH
32084: LD_INT 0
32086: PUSH
32087: LD_INT 0
32089: PUSH
32090: EMPTY
32091: LIST
32092: LIST
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: PUSH
32105: LD_INT 1
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: LD_INT 1
32117: PUSH
32118: LD_INT 1
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 1
32137: NEG
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 1
32148: NEG
32149: PUSH
32150: LD_INT 1
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 2
32164: NEG
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: LD_INT 2
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 2
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: PUSH
32212: LD_INT 2
32214: PUSH
32215: LD_INT 2
32217: PUSH
32218: EMPTY
32219: LIST
32220: LIST
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: LD_INT 2
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 0
32234: PUSH
32235: LD_INT 2
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: NEG
32245: PUSH
32246: LD_INT 1
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: PUSH
32253: LD_INT 2
32255: NEG
32256: PUSH
32257: LD_INT 0
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 2
32266: NEG
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 2
32278: NEG
32279: PUSH
32280: LD_INT 2
32282: NEG
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32309: LD_ADDR_VAR 0 59
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 0
32357: PUSH
32358: LD_INT 1
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 1
32367: NEG
32368: PUSH
32369: LD_INT 0
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 1
32378: NEG
32379: PUSH
32380: LD_INT 1
32382: NEG
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32397: LD_ADDR_VAR 0 60
32401: PUSH
32402: LD_INT 0
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 1
32417: NEG
32418: PUSH
32419: EMPTY
32420: LIST
32421: LIST
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 0
32445: PUSH
32446: LD_INT 1
32448: PUSH
32449: EMPTY
32450: LIST
32451: LIST
32452: PUSH
32453: LD_INT 1
32455: NEG
32456: PUSH
32457: LD_INT 0
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 1
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32485: LD_ADDR_VAR 0 61
32489: PUSH
32490: LD_INT 0
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: LD_INT 1
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: LD_INT 1
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: LD_INT 0
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: PUSH
32556: LD_INT 1
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32573: LD_ADDR_VAR 0 62
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 0
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: LD_INT 1
32593: NEG
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: PUSH
32602: LD_INT 0
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 1
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 1
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: LD_INT 0
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32661: LD_ADDR_VAR 0 63
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: LD_INT 0
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 1
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: LD_INT 1
32689: PUSH
32690: LD_INT 0
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 1
32699: PUSH
32700: LD_INT 1
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 0
32709: PUSH
32710: LD_INT 1
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: LD_INT 0
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32749: LD_ADDR_VAR 0 64
32753: PUSH
32754: LD_INT 0
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: EMPTY
32761: LIST
32762: LIST
32763: PUSH
32764: LD_INT 0
32766: PUSH
32767: LD_INT 1
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 1
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 0
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 1
32807: NEG
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: NEG
32819: PUSH
32820: LD_INT 1
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: ST_TO_ADDR
// end ; 1 :
32837: GO 38734
32839: LD_INT 1
32841: DOUBLE
32842: EQUAL
32843: IFTRUE 32847
32845: GO 35470
32847: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32848: LD_ADDR_VAR 0 11
32852: PUSH
32853: LD_INT 1
32855: NEG
32856: PUSH
32857: LD_INT 3
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 3
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: LD_INT 2
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: EMPTY
32888: LIST
32889: LIST
32890: LIST
32891: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32892: LD_ADDR_VAR 0 12
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 3
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 3
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: LIST
32932: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32933: LD_ADDR_VAR 0 13
32937: PUSH
32938: LD_INT 3
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 3
32950: PUSH
32951: LD_INT 3
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 2
32960: PUSH
32961: LD_INT 3
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32973: LD_ADDR_VAR 0 14
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 0
32990: PUSH
32991: LD_INT 3
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: NEG
33001: PUSH
33002: LD_INT 2
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: LIST
33013: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33014: LD_ADDR_VAR 0 15
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: LD_INT 1
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 3
33032: NEG
33033: PUSH
33034: LD_INT 0
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: LD_INT 3
33043: NEG
33044: PUSH
33045: LD_INT 1
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33058: LD_ADDR_VAR 0 16
33062: PUSH
33063: LD_INT 2
33065: NEG
33066: PUSH
33067: LD_INT 3
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 3
33089: NEG
33090: PUSH
33091: LD_INT 3
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: LIST
33103: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33104: LD_ADDR_VAR 0 17
33108: PUSH
33109: LD_INT 1
33111: NEG
33112: PUSH
33113: LD_INT 3
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: LD_INT 3
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 1
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33148: LD_ADDR_VAR 0 18
33152: PUSH
33153: LD_INT 2
33155: PUSH
33156: LD_INT 1
33158: NEG
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 3
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 3
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33189: LD_ADDR_VAR 0 19
33193: PUSH
33194: LD_INT 3
33196: PUSH
33197: LD_INT 2
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 3
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
33229: LD_ADDR_VAR 0 20
33233: PUSH
33234: LD_INT 1
33236: PUSH
33237: LD_INT 3
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: LD_INT 3
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: LD_INT 1
33256: NEG
33257: PUSH
33258: LD_INT 2
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: LIST
33269: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33270: LD_ADDR_VAR 0 21
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: LD_INT 1
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: PUSH
33286: LD_INT 3
33288: NEG
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 3
33299: NEG
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: LIST
33313: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33314: LD_ADDR_VAR 0 22
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: LD_INT 3
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 3
33333: NEG
33334: PUSH
33335: LD_INT 2
33337: NEG
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 3
33345: NEG
33346: PUSH
33347: LD_INT 3
33349: NEG
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: LIST
33359: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33360: LD_ADDR_VAR 0 23
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: LD_INT 3
33370: NEG
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: LD_INT 4
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: LD_INT 3
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: LIST
33403: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33404: LD_ADDR_VAR 0 24
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 3
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 4
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33445: LD_ADDR_VAR 0 25
33449: PUSH
33450: LD_INT 3
33452: PUSH
33453: LD_INT 3
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 4
33462: PUSH
33463: LD_INT 3
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 3
33472: PUSH
33473: LD_INT 4
33475: PUSH
33476: EMPTY
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
33485: LD_ADDR_VAR 0 26
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: LD_INT 4
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 3
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: LIST
33525: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33526: LD_ADDR_VAR 0 27
33530: PUSH
33531: LD_INT 3
33533: NEG
33534: PUSH
33535: LD_INT 0
33537: PUSH
33538: EMPTY
33539: LIST
33540: LIST
33541: PUSH
33542: LD_INT 3
33544: NEG
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 4
33555: NEG
33556: PUSH
33557: LD_INT 1
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33570: LD_ADDR_VAR 0 28
33574: PUSH
33575: LD_INT 3
33577: NEG
33578: PUSH
33579: LD_INT 3
33581: NEG
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 3
33589: NEG
33590: PUSH
33591: LD_INT 4
33593: NEG
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_INT 4
33601: NEG
33602: PUSH
33603: LD_INT 3
33605: NEG
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: LIST
33615: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33616: LD_ADDR_VAR 0 29
33620: PUSH
33621: LD_INT 1
33623: NEG
33624: PUSH
33625: LD_INT 3
33627: NEG
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 0
33635: PUSH
33636: LD_INT 3
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 1
33646: PUSH
33647: LD_INT 2
33649: NEG
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 1
33657: NEG
33658: PUSH
33659: LD_INT 4
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 4
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 1
33680: PUSH
33681: LD_INT 3
33683: NEG
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 5
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 5
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: LD_INT 4
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 1
33725: NEG
33726: PUSH
33727: LD_INT 6
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 0
33737: PUSH
33738: LD_INT 6
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 1
33748: PUSH
33749: LD_INT 5
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33771: LD_ADDR_VAR 0 30
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: LD_INT 1
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: LD_INT 1
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 4
33820: PUSH
33821: LD_INT 0
33823: PUSH
33824: EMPTY
33825: LIST
33826: LIST
33827: PUSH
33828: LD_INT 4
33830: PUSH
33831: LD_INT 1
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 4
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 5
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 5
33871: PUSH
33872: LD_INT 1
33874: NEG
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 6
33882: PUSH
33883: LD_INT 0
33885: PUSH
33886: EMPTY
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 6
33892: PUSH
33893: LD_INT 1
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: PUSH
33900: EMPTY
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33914: LD_ADDR_VAR 0 31
33918: PUSH
33919: LD_INT 3
33921: PUSH
33922: LD_INT 2
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 3
33931: PUSH
33932: LD_INT 3
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 2
33941: PUSH
33942: LD_INT 3
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 4
33951: PUSH
33952: LD_INT 3
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 4
33961: PUSH
33962: LD_INT 4
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: LD_INT 3
33971: PUSH
33972: LD_INT 4
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 5
33981: PUSH
33982: LD_INT 4
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 5
33991: PUSH
33992: LD_INT 5
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 4
34001: PUSH
34002: LD_INT 5
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 6
34011: PUSH
34012: LD_INT 5
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 6
34021: PUSH
34022: LD_INT 6
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 5
34031: PUSH
34032: LD_INT 6
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
34053: LD_ADDR_VAR 0 32
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 3
34063: PUSH
34064: EMPTY
34065: LIST
34066: LIST
34067: PUSH
34068: LD_INT 0
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 1
34080: NEG
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: EMPTY
34086: LIST
34087: LIST
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: LD_INT 4
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 0
34101: PUSH
34102: LD_INT 4
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: LD_INT 3
34115: PUSH
34116: EMPTY
34117: LIST
34118: LIST
34119: PUSH
34120: LD_INT 1
34122: PUSH
34123: LD_INT 5
34125: PUSH
34126: EMPTY
34127: LIST
34128: LIST
34129: PUSH
34130: LD_INT 0
34132: PUSH
34133: LD_INT 5
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: LD_INT 4
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: LD_INT 6
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: LD_INT 6
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 1
34173: NEG
34174: PUSH
34175: LD_INT 5
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
34196: LD_ADDR_VAR 0 33
34200: PUSH
34201: LD_INT 2
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 3
34214: NEG
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 3
34237: NEG
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: EMPTY
34243: LIST
34244: LIST
34245: PUSH
34246: LD_INT 4
34248: NEG
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 4
34259: NEG
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 4
34271: NEG
34272: PUSH
34273: LD_INT 1
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 5
34282: NEG
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: LD_INT 5
34293: NEG
34294: PUSH
34295: LD_INT 1
34297: NEG
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: PUSH
34303: LD_INT 5
34305: NEG
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 6
34316: NEG
34317: PUSH
34318: LD_INT 0
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 6
34327: NEG
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: EMPTY
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34351: LD_ADDR_VAR 0 34
34355: PUSH
34356: LD_INT 2
34358: NEG
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 3
34370: NEG
34371: PUSH
34372: LD_INT 2
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 3
34382: NEG
34383: PUSH
34384: LD_INT 3
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 3
34394: NEG
34395: PUSH
34396: LD_INT 4
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 4
34406: NEG
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 4
34418: NEG
34419: PUSH
34420: LD_INT 4
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 4
34430: NEG
34431: PUSH
34432: LD_INT 5
34434: NEG
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 5
34442: NEG
34443: PUSH
34444: LD_INT 4
34446: NEG
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 5
34454: NEG
34455: PUSH
34456: LD_INT 5
34458: NEG
34459: PUSH
34460: EMPTY
34461: LIST
34462: LIST
34463: PUSH
34464: LD_INT 5
34466: NEG
34467: PUSH
34468: LD_INT 6
34470: NEG
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: LD_INT 6
34478: NEG
34479: PUSH
34480: LD_INT 5
34482: NEG
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 6
34490: NEG
34491: PUSH
34492: LD_INT 6
34494: NEG
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34514: LD_ADDR_VAR 0 41
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 2
34524: NEG
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 1
34532: NEG
34533: PUSH
34534: LD_INT 3
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: LD_INT 2
34547: NEG
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: LIST
34557: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34558: LD_ADDR_VAR 0 42
34562: PUSH
34563: LD_INT 2
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: LD_INT 1
34589: PUSH
34590: EMPTY
34591: LIST
34592: LIST
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34599: LD_ADDR_VAR 0 43
34603: PUSH
34604: LD_INT 2
34606: PUSH
34607: LD_INT 2
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 3
34616: PUSH
34617: LD_INT 2
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 2
34626: PUSH
34627: LD_INT 3
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34639: LD_ADDR_VAR 0 44
34643: PUSH
34644: LD_INT 0
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 3
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34680: LD_ADDR_VAR 0 45
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: EMPTY
34693: LIST
34694: LIST
34695: PUSH
34696: LD_INT 2
34698: NEG
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 3
34709: NEG
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: LIST
34723: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34724: LD_ADDR_VAR 0 46
34728: PUSH
34729: LD_INT 2
34731: NEG
34732: PUSH
34733: LD_INT 2
34735: NEG
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 2
34743: NEG
34744: PUSH
34745: LD_INT 3
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: LD_INT 3
34755: NEG
34756: PUSH
34757: LD_INT 2
34759: NEG
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34770: LD_ADDR_VAR 0 47
34774: PUSH
34775: LD_INT 2
34777: NEG
34778: PUSH
34779: LD_INT 3
34781: NEG
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: NEG
34790: PUSH
34791: LD_INT 3
34793: NEG
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34803: LD_ADDR_VAR 0 48
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34834: LD_ADDR_VAR 0 49
34838: PUSH
34839: LD_INT 3
34841: PUSH
34842: LD_INT 1
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 3
34851: PUSH
34852: LD_INT 2
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34863: LD_ADDR_VAR 0 50
34867: PUSH
34868: LD_INT 2
34870: PUSH
34871: LD_INT 3
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 1
34880: PUSH
34881: LD_INT 3
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34892: LD_ADDR_VAR 0 51
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: LD_INT 2
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 2
34910: NEG
34911: PUSH
34912: LD_INT 1
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34923: LD_ADDR_VAR 0 52
34927: PUSH
34928: LD_INT 3
34930: NEG
34931: PUSH
34932: LD_INT 1
34934: NEG
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: PUSH
34940: LD_INT 3
34942: NEG
34943: PUSH
34944: LD_INT 2
34946: NEG
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34956: LD_ADDR_VAR 0 53
34960: PUSH
34961: LD_INT 1
34963: NEG
34964: PUSH
34965: LD_INT 3
34967: NEG
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PUSH
34973: LD_INT 0
34975: PUSH
34976: LD_INT 3
34978: NEG
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: PUSH
34987: LD_INT 2
34989: NEG
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35000: LD_ADDR_VAR 0 54
35004: PUSH
35005: LD_INT 2
35007: PUSH
35008: LD_INT 1
35010: NEG
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 3
35018: PUSH
35019: LD_INT 0
35021: PUSH
35022: EMPTY
35023: LIST
35024: LIST
35025: PUSH
35026: LD_INT 3
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: LIST
35040: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35041: LD_ADDR_VAR 0 55
35045: PUSH
35046: LD_INT 3
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 3
35058: PUSH
35059: LD_INT 3
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 2
35068: PUSH
35069: LD_INT 3
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35081: LD_ADDR_VAR 0 56
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: LD_INT 3
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 3
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: LD_INT 2
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35122: LD_ADDR_VAR 0 57
35126: PUSH
35127: LD_INT 2
35129: NEG
35130: PUSH
35131: LD_INT 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 3
35140: NEG
35141: PUSH
35142: LD_INT 0
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 3
35151: NEG
35152: PUSH
35153: LD_INT 1
35155: NEG
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: LIST
35165: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35166: LD_ADDR_VAR 0 58
35170: PUSH
35171: LD_INT 2
35173: NEG
35174: PUSH
35175: LD_INT 3
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: LD_INT 3
35185: NEG
35186: PUSH
35187: LD_INT 2
35189: NEG
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 3
35197: NEG
35198: PUSH
35199: LD_INT 3
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
35212: LD_ADDR_VAR 0 59
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 0
35231: PUSH
35232: LD_INT 2
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
35256: LD_ADDR_VAR 0 60
35260: PUSH
35261: LD_INT 1
35263: PUSH
35264: LD_INT 1
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 2
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 2
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: LIST
35296: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35297: LD_ADDR_VAR 0 61
35301: PUSH
35302: LD_INT 2
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 2
35314: PUSH
35315: LD_INT 2
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 1
35324: PUSH
35325: LD_INT 2
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: LIST
35336: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35337: LD_ADDR_VAR 0 62
35341: PUSH
35342: LD_INT 1
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 1
35364: NEG
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35378: LD_ADDR_VAR 0 63
35382: PUSH
35383: LD_INT 1
35385: NEG
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 2
35396: NEG
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: EMPTY
35402: LIST
35403: LIST
35404: PUSH
35405: LD_INT 2
35407: NEG
35408: PUSH
35409: LD_INT 1
35411: NEG
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: LIST
35421: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35422: LD_ADDR_VAR 0 64
35426: PUSH
35427: LD_INT 1
35429: NEG
35430: PUSH
35431: LD_INT 2
35433: NEG
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: ST_TO_ADDR
// end ; 2 :
35468: GO 38734
35470: LD_INT 2
35472: DOUBLE
35473: EQUAL
35474: IFTRUE 35478
35476: GO 38733
35478: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35479: LD_ADDR_VAR 0 29
35483: PUSH
35484: LD_INT 4
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 4
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PUSH
35505: LD_INT 5
35507: PUSH
35508: LD_INT 0
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 5
35517: PUSH
35518: LD_INT 1
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PUSH
35525: LD_INT 4
35527: PUSH
35528: LD_INT 1
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 3
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: PUSH
35545: LD_INT 3
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 3
35558: PUSH
35559: LD_INT 2
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 5
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 3
35579: PUSH
35580: LD_INT 3
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 3
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 4
35599: PUSH
35600: LD_INT 3
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 4
35609: PUSH
35610: LD_INT 4
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 3
35619: PUSH
35620: LD_INT 4
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 2
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 2
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 4
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 4
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 0
35669: PUSH
35670: LD_INT 4
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 0
35679: PUSH
35680: LD_INT 3
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: LD_INT 4
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 1
35699: PUSH
35700: LD_INT 5
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: PUSH
35707: LD_INT 0
35709: PUSH
35710: LD_INT 5
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 1
35719: NEG
35720: PUSH
35721: LD_INT 4
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 3
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: PUSH
35742: LD_INT 5
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 2
35751: NEG
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 3
35762: NEG
35763: PUSH
35764: LD_INT 0
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 3
35773: NEG
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 2
35796: NEG
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 3
35807: NEG
35808: PUSH
35809: LD_INT 1
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 4
35818: NEG
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 4
35829: NEG
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 4
35841: NEG
35842: PUSH
35843: LD_INT 2
35845: NEG
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: LD_INT 2
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 4
35864: NEG
35865: PUSH
35866: LD_INT 4
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 4
35876: NEG
35877: PUSH
35878: LD_INT 5
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 3
35888: NEG
35889: PUSH
35890: LD_INT 4
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 3
35900: NEG
35901: PUSH
35902: LD_INT 3
35904: NEG
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 4
35912: NEG
35913: PUSH
35914: LD_INT 3
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 5
35924: NEG
35925: PUSH
35926: LD_INT 4
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 5
35936: NEG
35937: PUSH
35938: LD_INT 5
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: LD_INT 3
35948: NEG
35949: PUSH
35950: LD_INT 5
35952: NEG
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 5
35960: NEG
35961: PUSH
35962: LD_INT 3
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
36017: LD_ADDR_VAR 0 30
36021: PUSH
36022: LD_INT 4
36024: PUSH
36025: LD_INT 4
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 4
36034: PUSH
36035: LD_INT 3
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PUSH
36042: LD_INT 5
36044: PUSH
36045: LD_INT 4
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 5
36054: PUSH
36055: LD_INT 5
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 4
36064: PUSH
36065: LD_INT 5
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 3
36074: PUSH
36075: LD_INT 4
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 3
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 5
36094: PUSH
36095: LD_INT 3
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 3
36104: PUSH
36105: LD_INT 5
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 0
36114: PUSH
36115: LD_INT 3
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 3
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 4
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 0
36154: PUSH
36155: LD_INT 4
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 1
36164: NEG
36165: PUSH
36166: LD_INT 3
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 2
36186: PUSH
36187: LD_INT 4
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 2
36196: NEG
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 4
36207: NEG
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 4
36218: NEG
36219: PUSH
36220: LD_INT 1
36222: NEG
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 3
36230: NEG
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 3
36241: NEG
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 4
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 5
36263: NEG
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 5
36274: NEG
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 5
36286: NEG
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 3
36298: NEG
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 3
36309: NEG
36310: PUSH
36311: LD_INT 3
36313: NEG
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 3
36321: NEG
36322: PUSH
36323: LD_INT 4
36325: NEG
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 2
36333: NEG
36334: PUSH
36335: LD_INT 3
36337: NEG
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: LD_INT 2
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 3
36357: NEG
36358: PUSH
36359: LD_INT 2
36361: NEG
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 4
36369: NEG
36370: PUSH
36371: LD_INT 3
36373: NEG
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 4
36381: NEG
36382: PUSH
36383: LD_INT 4
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: LD_INT 4
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 4
36405: NEG
36406: PUSH
36407: LD_INT 2
36409: NEG
36410: PUSH
36411: EMPTY
36412: LIST
36413: LIST
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: LD_INT 4
36420: NEG
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 0
36428: PUSH
36429: LD_INT 5
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 1
36439: PUSH
36440: LD_INT 4
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 1
36450: PUSH
36451: LD_INT 3
36453: NEG
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 0
36461: PUSH
36462: LD_INT 3
36464: NEG
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: LD_INT 4
36476: NEG
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 1
36484: NEG
36485: PUSH
36486: LD_INT 5
36488: NEG
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: LD_INT 3
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 2
36507: NEG
36508: PUSH
36509: LD_INT 5
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36564: LD_ADDR_VAR 0 31
36568: PUSH
36569: LD_INT 0
36571: PUSH
36572: LD_INT 4
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 4
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: LD_INT 5
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 5
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 1
36621: NEG
36622: PUSH
36623: LD_INT 4
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: NEG
36633: PUSH
36634: LD_INT 3
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: LD_INT 5
36646: PUSH
36647: EMPTY
36648: LIST
36649: LIST
36650: PUSH
36651: LD_INT 2
36653: NEG
36654: PUSH
36655: LD_INT 3
36657: PUSH
36658: EMPTY
36659: LIST
36660: LIST
36661: PUSH
36662: LD_INT 3
36664: NEG
36665: PUSH
36666: LD_INT 0
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: LD_INT 3
36675: NEG
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 2
36687: NEG
36688: PUSH
36689: LD_INT 0
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 3
36709: NEG
36710: PUSH
36711: LD_INT 1
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 4
36720: NEG
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 4
36731: NEG
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 4
36743: NEG
36744: PUSH
36745: LD_INT 2
36747: NEG
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: LD_INT 2
36759: PUSH
36760: EMPTY
36761: LIST
36762: LIST
36763: PUSH
36764: LD_INT 4
36766: NEG
36767: PUSH
36768: LD_INT 4
36770: NEG
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: PUSH
36776: LD_INT 4
36778: NEG
36779: PUSH
36780: LD_INT 5
36782: NEG
36783: PUSH
36784: EMPTY
36785: LIST
36786: LIST
36787: PUSH
36788: LD_INT 3
36790: NEG
36791: PUSH
36792: LD_INT 4
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 3
36802: NEG
36803: PUSH
36804: LD_INT 3
36806: NEG
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 4
36814: NEG
36815: PUSH
36816: LD_INT 3
36818: NEG
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: PUSH
36824: LD_INT 5
36826: NEG
36827: PUSH
36828: LD_INT 4
36830: NEG
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 5
36838: NEG
36839: PUSH
36840: LD_INT 5
36842: NEG
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 3
36850: NEG
36851: PUSH
36852: LD_INT 5
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 5
36862: NEG
36863: PUSH
36864: LD_INT 3
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 3
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 4
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: LD_INT 3
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 2
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 2
36921: NEG
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: LD_INT 3
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: LD_INT 4
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: PUSH
36954: LD_INT 2
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: LD_INT 4
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 4
36976: PUSH
36977: LD_INT 0
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 4
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 5
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 5
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 4
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 3
37027: PUSH
37028: LD_INT 0
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 3
37037: PUSH
37038: LD_INT 1
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 3
37048: PUSH
37049: LD_INT 2
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 5
37059: PUSH
37060: LD_INT 2
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
37114: LD_ADDR_VAR 0 32
37118: PUSH
37119: LD_INT 4
37121: NEG
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: LD_INT 4
37132: NEG
37133: PUSH
37134: LD_INT 1
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 3
37144: NEG
37145: PUSH
37146: LD_INT 0
37148: PUSH
37149: EMPTY
37150: LIST
37151: LIST
37152: PUSH
37153: LD_INT 3
37155: NEG
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 4
37166: NEG
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 5
37177: NEG
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 5
37188: NEG
37189: PUSH
37190: LD_INT 1
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 5
37200: NEG
37201: PUSH
37202: LD_INT 2
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: LD_INT 3
37212: NEG
37213: PUSH
37214: LD_INT 2
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 3
37223: NEG
37224: PUSH
37225: LD_INT 3
37227: NEG
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 3
37235: NEG
37236: PUSH
37237: LD_INT 4
37239: NEG
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 2
37247: NEG
37248: PUSH
37249: LD_INT 3
37251: NEG
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 2
37259: NEG
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 3
37271: NEG
37272: PUSH
37273: LD_INT 2
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 4
37283: NEG
37284: PUSH
37285: LD_INT 3
37287: NEG
37288: PUSH
37289: EMPTY
37290: LIST
37291: LIST
37292: PUSH
37293: LD_INT 4
37295: NEG
37296: PUSH
37297: LD_INT 4
37299: NEG
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: LD_INT 2
37307: NEG
37308: PUSH
37309: LD_INT 4
37311: NEG
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 4
37319: NEG
37320: PUSH
37321: LD_INT 2
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 0
37331: PUSH
37332: LD_INT 4
37334: NEG
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 5
37345: NEG
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 1
37353: PUSH
37354: LD_INT 4
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 1
37364: PUSH
37365: LD_INT 3
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: LD_INT 3
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 4
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: LD_INT 5
37402: NEG
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 2
37410: PUSH
37411: LD_INT 3
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 2
37421: NEG
37422: PUSH
37423: LD_INT 5
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 4
37454: PUSH
37455: LD_INT 0
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 4
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: LD_INT 1
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 2
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: LD_INT 2
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 2
37505: PUSH
37506: LD_INT 2
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 4
37526: PUSH
37527: LD_INT 4
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 4
37536: PUSH
37537: LD_INT 3
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 5
37546: PUSH
37547: LD_INT 4
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 5
37556: PUSH
37557: LD_INT 5
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 4
37566: PUSH
37567: LD_INT 5
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 3
37576: PUSH
37577: LD_INT 4
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 3
37586: PUSH
37587: LD_INT 3
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 5
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: LD_INT 5
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37661: LD_ADDR_VAR 0 33
37665: PUSH
37666: LD_INT 4
37668: NEG
37669: PUSH
37670: LD_INT 4
37672: NEG
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 4
37680: NEG
37681: PUSH
37682: LD_INT 5
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 3
37692: NEG
37693: PUSH
37694: LD_INT 4
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 3
37704: NEG
37705: PUSH
37706: LD_INT 3
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 4
37716: NEG
37717: PUSH
37718: LD_INT 3
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 5
37728: NEG
37729: PUSH
37730: LD_INT 4
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 5
37740: NEG
37741: PUSH
37742: LD_INT 5
37744: NEG
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: LD_INT 3
37752: NEG
37753: PUSH
37754: LD_INT 5
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 5
37764: NEG
37765: PUSH
37766: LD_INT 3
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 3
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: LD_INT 4
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: LD_INT 3
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: LD_INT 0
37820: PUSH
37821: LD_INT 2
37823: NEG
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 1
37831: NEG
37832: PUSH
37833: LD_INT 3
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: LD_INT 4
37847: NEG
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 2
37855: PUSH
37856: LD_INT 2
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 2
37866: NEG
37867: PUSH
37868: LD_INT 4
37870: NEG
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 4
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 4
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 5
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 5
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 4
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 3
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 3
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 5
37961: PUSH
37962: LD_INT 2
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 4
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 4
38001: PUSH
38002: LD_INT 4
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: LD_INT 4
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 3
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 2
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 4
38041: PUSH
38042: LD_INT 2
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: LD_INT 4
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: LD_INT 4
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: LD_INT 3
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: LD_INT 4
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 1
38091: PUSH
38092: LD_INT 5
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 5
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: NEG
38112: PUSH
38113: LD_INT 4
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 5
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: LD_INT 3
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
38199: LD_ADDR_VAR 0 34
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 4
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: LD_INT 5
38220: NEG
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: LD_INT 4
38231: NEG
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: LD_INT 3
38242: NEG
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: LD_INT 3
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 4
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 5
38277: NEG
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 2
38285: PUSH
38286: LD_INT 3
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 5
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 3
38308: PUSH
38309: LD_INT 0
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 1
38321: NEG
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: LD_INT 4
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 4
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 3
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 2
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 4
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: LD_INT 4
38401: PUSH
38402: LD_INT 4
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 4
38411: PUSH
38412: LD_INT 3
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 5
38421: PUSH
38422: LD_INT 4
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 5
38431: PUSH
38432: LD_INT 5
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 4
38441: PUSH
38442: LD_INT 5
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: LD_INT 4
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 5
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: LD_INT 5
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 3
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: LD_INT 3
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 4
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: LD_INT 4
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: LD_INT 3
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: NEG
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 4
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 4
38584: NEG
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 4
38595: NEG
38596: PUSH
38597: LD_INT 1
38599: NEG
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 3
38607: NEG
38608: PUSH
38609: LD_INT 0
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 3
38618: NEG
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 4
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 5
38640: NEG
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 5
38651: NEG
38652: PUSH
38653: LD_INT 1
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 5
38663: NEG
38664: PUSH
38665: LD_INT 2
38667: NEG
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 3
38675: NEG
38676: PUSH
38677: LD_INT 2
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: ST_TO_ADDR
// end ; end ;
38731: GO 38734
38733: POP
// case btype of b_depot , b_warehouse :
38734: LD_VAR 0 1
38738: PUSH
38739: LD_INT 0
38741: DOUBLE
38742: EQUAL
38743: IFTRUE 38753
38745: LD_INT 1
38747: DOUBLE
38748: EQUAL
38749: IFTRUE 38753
38751: GO 38954
38753: POP
// case nation of nation_american :
38754: LD_VAR 0 5
38758: PUSH
38759: LD_INT 1
38761: DOUBLE
38762: EQUAL
38763: IFTRUE 38767
38765: GO 38823
38767: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38768: LD_ADDR_VAR 0 9
38772: PUSH
38773: LD_VAR 0 11
38777: PUSH
38778: LD_VAR 0 12
38782: PUSH
38783: LD_VAR 0 13
38787: PUSH
38788: LD_VAR 0 14
38792: PUSH
38793: LD_VAR 0 15
38797: PUSH
38798: LD_VAR 0 16
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: PUSH
38811: LD_VAR 0 4
38815: PUSH
38816: LD_INT 1
38818: PLUS
38819: ARRAY
38820: ST_TO_ADDR
38821: GO 38952
38823: LD_INT 2
38825: DOUBLE
38826: EQUAL
38827: IFTRUE 38831
38829: GO 38887
38831: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38832: LD_ADDR_VAR 0 9
38836: PUSH
38837: LD_VAR 0 17
38841: PUSH
38842: LD_VAR 0 18
38846: PUSH
38847: LD_VAR 0 19
38851: PUSH
38852: LD_VAR 0 20
38856: PUSH
38857: LD_VAR 0 21
38861: PUSH
38862: LD_VAR 0 22
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: PUSH
38875: LD_VAR 0 4
38879: PUSH
38880: LD_INT 1
38882: PLUS
38883: ARRAY
38884: ST_TO_ADDR
38885: GO 38952
38887: LD_INT 3
38889: DOUBLE
38890: EQUAL
38891: IFTRUE 38895
38893: GO 38951
38895: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38896: LD_ADDR_VAR 0 9
38900: PUSH
38901: LD_VAR 0 23
38905: PUSH
38906: LD_VAR 0 24
38910: PUSH
38911: LD_VAR 0 25
38915: PUSH
38916: LD_VAR 0 26
38920: PUSH
38921: LD_VAR 0 27
38925: PUSH
38926: LD_VAR 0 28
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: PUSH
38939: LD_VAR 0 4
38943: PUSH
38944: LD_INT 1
38946: PLUS
38947: ARRAY
38948: ST_TO_ADDR
38949: GO 38952
38951: POP
38952: GO 39507
38954: LD_INT 2
38956: DOUBLE
38957: EQUAL
38958: IFTRUE 38968
38960: LD_INT 3
38962: DOUBLE
38963: EQUAL
38964: IFTRUE 38968
38966: GO 39024
38968: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38969: LD_ADDR_VAR 0 9
38973: PUSH
38974: LD_VAR 0 29
38978: PUSH
38979: LD_VAR 0 30
38983: PUSH
38984: LD_VAR 0 31
38988: PUSH
38989: LD_VAR 0 32
38993: PUSH
38994: LD_VAR 0 33
38998: PUSH
38999: LD_VAR 0 34
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: PUSH
39012: LD_VAR 0 4
39016: PUSH
39017: LD_INT 1
39019: PLUS
39020: ARRAY
39021: ST_TO_ADDR
39022: GO 39507
39024: LD_INT 16
39026: DOUBLE
39027: EQUAL
39028: IFTRUE 39086
39030: LD_INT 17
39032: DOUBLE
39033: EQUAL
39034: IFTRUE 39086
39036: LD_INT 18
39038: DOUBLE
39039: EQUAL
39040: IFTRUE 39086
39042: LD_INT 19
39044: DOUBLE
39045: EQUAL
39046: IFTRUE 39086
39048: LD_INT 22
39050: DOUBLE
39051: EQUAL
39052: IFTRUE 39086
39054: LD_INT 20
39056: DOUBLE
39057: EQUAL
39058: IFTRUE 39086
39060: LD_INT 21
39062: DOUBLE
39063: EQUAL
39064: IFTRUE 39086
39066: LD_INT 23
39068: DOUBLE
39069: EQUAL
39070: IFTRUE 39086
39072: LD_INT 24
39074: DOUBLE
39075: EQUAL
39076: IFTRUE 39086
39078: LD_INT 25
39080: DOUBLE
39081: EQUAL
39082: IFTRUE 39086
39084: GO 39142
39086: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
39087: LD_ADDR_VAR 0 9
39091: PUSH
39092: LD_VAR 0 35
39096: PUSH
39097: LD_VAR 0 36
39101: PUSH
39102: LD_VAR 0 37
39106: PUSH
39107: LD_VAR 0 38
39111: PUSH
39112: LD_VAR 0 39
39116: PUSH
39117: LD_VAR 0 40
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: PUSH
39130: LD_VAR 0 4
39134: PUSH
39135: LD_INT 1
39137: PLUS
39138: ARRAY
39139: ST_TO_ADDR
39140: GO 39507
39142: LD_INT 6
39144: DOUBLE
39145: EQUAL
39146: IFTRUE 39198
39148: LD_INT 7
39150: DOUBLE
39151: EQUAL
39152: IFTRUE 39198
39154: LD_INT 8
39156: DOUBLE
39157: EQUAL
39158: IFTRUE 39198
39160: LD_INT 13
39162: DOUBLE
39163: EQUAL
39164: IFTRUE 39198
39166: LD_INT 12
39168: DOUBLE
39169: EQUAL
39170: IFTRUE 39198
39172: LD_INT 15
39174: DOUBLE
39175: EQUAL
39176: IFTRUE 39198
39178: LD_INT 11
39180: DOUBLE
39181: EQUAL
39182: IFTRUE 39198
39184: LD_INT 14
39186: DOUBLE
39187: EQUAL
39188: IFTRUE 39198
39190: LD_INT 10
39192: DOUBLE
39193: EQUAL
39194: IFTRUE 39198
39196: GO 39254
39198: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
39199: LD_ADDR_VAR 0 9
39203: PUSH
39204: LD_VAR 0 41
39208: PUSH
39209: LD_VAR 0 42
39213: PUSH
39214: LD_VAR 0 43
39218: PUSH
39219: LD_VAR 0 44
39223: PUSH
39224: LD_VAR 0 45
39228: PUSH
39229: LD_VAR 0 46
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: PUSH
39242: LD_VAR 0 4
39246: PUSH
39247: LD_INT 1
39249: PLUS
39250: ARRAY
39251: ST_TO_ADDR
39252: GO 39507
39254: LD_INT 36
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39318
39262: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
39263: LD_ADDR_VAR 0 9
39267: PUSH
39268: LD_VAR 0 47
39272: PUSH
39273: LD_VAR 0 48
39277: PUSH
39278: LD_VAR 0 49
39282: PUSH
39283: LD_VAR 0 50
39287: PUSH
39288: LD_VAR 0 51
39292: PUSH
39293: LD_VAR 0 52
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: PUSH
39306: LD_VAR 0 4
39310: PUSH
39311: LD_INT 1
39313: PLUS
39314: ARRAY
39315: ST_TO_ADDR
39316: GO 39507
39318: LD_INT 4
39320: DOUBLE
39321: EQUAL
39322: IFTRUE 39344
39324: LD_INT 5
39326: DOUBLE
39327: EQUAL
39328: IFTRUE 39344
39330: LD_INT 34
39332: DOUBLE
39333: EQUAL
39334: IFTRUE 39344
39336: LD_INT 37
39338: DOUBLE
39339: EQUAL
39340: IFTRUE 39344
39342: GO 39400
39344: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39345: LD_ADDR_VAR 0 9
39349: PUSH
39350: LD_VAR 0 53
39354: PUSH
39355: LD_VAR 0 54
39359: PUSH
39360: LD_VAR 0 55
39364: PUSH
39365: LD_VAR 0 56
39369: PUSH
39370: LD_VAR 0 57
39374: PUSH
39375: LD_VAR 0 58
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: PUSH
39388: LD_VAR 0 4
39392: PUSH
39393: LD_INT 1
39395: PLUS
39396: ARRAY
39397: ST_TO_ADDR
39398: GO 39507
39400: LD_INT 31
39402: DOUBLE
39403: EQUAL
39404: IFTRUE 39450
39406: LD_INT 32
39408: DOUBLE
39409: EQUAL
39410: IFTRUE 39450
39412: LD_INT 33
39414: DOUBLE
39415: EQUAL
39416: IFTRUE 39450
39418: LD_INT 27
39420: DOUBLE
39421: EQUAL
39422: IFTRUE 39450
39424: LD_INT 26
39426: DOUBLE
39427: EQUAL
39428: IFTRUE 39450
39430: LD_INT 28
39432: DOUBLE
39433: EQUAL
39434: IFTRUE 39450
39436: LD_INT 29
39438: DOUBLE
39439: EQUAL
39440: IFTRUE 39450
39442: LD_INT 30
39444: DOUBLE
39445: EQUAL
39446: IFTRUE 39450
39448: GO 39506
39450: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39451: LD_ADDR_VAR 0 9
39455: PUSH
39456: LD_VAR 0 59
39460: PUSH
39461: LD_VAR 0 60
39465: PUSH
39466: LD_VAR 0 61
39470: PUSH
39471: LD_VAR 0 62
39475: PUSH
39476: LD_VAR 0 63
39480: PUSH
39481: LD_VAR 0 64
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: PUSH
39494: LD_VAR 0 4
39498: PUSH
39499: LD_INT 1
39501: PLUS
39502: ARRAY
39503: ST_TO_ADDR
39504: GO 39507
39506: POP
// temp_list2 = [ ] ;
39507: LD_ADDR_VAR 0 10
39511: PUSH
39512: EMPTY
39513: ST_TO_ADDR
// for i in temp_list do
39514: LD_ADDR_VAR 0 8
39518: PUSH
39519: LD_VAR 0 9
39523: PUSH
39524: FOR_IN
39525: IFFALSE 39577
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39527: LD_ADDR_VAR 0 10
39531: PUSH
39532: LD_VAR 0 10
39536: PUSH
39537: LD_VAR 0 8
39541: PUSH
39542: LD_INT 1
39544: ARRAY
39545: PUSH
39546: LD_VAR 0 2
39550: PLUS
39551: PUSH
39552: LD_VAR 0 8
39556: PUSH
39557: LD_INT 2
39559: ARRAY
39560: PUSH
39561: LD_VAR 0 3
39565: PLUS
39566: PUSH
39567: EMPTY
39568: LIST
39569: LIST
39570: PUSH
39571: EMPTY
39572: LIST
39573: ADD
39574: ST_TO_ADDR
39575: GO 39524
39577: POP
39578: POP
// result = temp_list2 ;
39579: LD_ADDR_VAR 0 7
39583: PUSH
39584: LD_VAR 0 10
39588: ST_TO_ADDR
// end ;
39589: LD_VAR 0 7
39593: RET
// export function EnemyInRange ( unit , dist ) ; begin
39594: LD_INT 0
39596: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_VAR 0 1
39606: PPUSH
39607: CALL_OW 255
39611: PPUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 250
39621: PPUSH
39622: LD_VAR 0 1
39626: PPUSH
39627: CALL_OW 251
39631: PPUSH
39632: LD_VAR 0 2
39636: PPUSH
39637: CALL 12851 0 4
39641: PUSH
39642: LD_INT 4
39644: ARRAY
39645: ST_TO_ADDR
// end ;
39646: LD_VAR 0 3
39650: RET
// export function PlayerSeeMe ( unit ) ; begin
39651: LD_INT 0
39653: PPUSH
// result := See ( your_side , unit ) ;
39654: LD_ADDR_VAR 0 2
39658: PUSH
39659: LD_OWVAR 2
39663: PPUSH
39664: LD_VAR 0 1
39668: PPUSH
39669: CALL_OW 292
39673: ST_TO_ADDR
// end ;
39674: LD_VAR 0 2
39678: RET
// export function ReverseDir ( unit ) ; begin
39679: LD_INT 0
39681: PPUSH
// if not unit then
39682: LD_VAR 0 1
39686: NOT
39687: IFFALSE 39691
// exit ;
39689: GO 39714
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39691: LD_ADDR_VAR 0 2
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 254
39705: PUSH
39706: LD_INT 3
39708: PLUS
39709: PUSH
39710: LD_INT 6
39712: MOD
39713: ST_TO_ADDR
// end ;
39714: LD_VAR 0 2
39718: RET
// export function ReverseArray ( array ) ; var i ; begin
39719: LD_INT 0
39721: PPUSH
39722: PPUSH
// if not array then
39723: LD_VAR 0 1
39727: NOT
39728: IFFALSE 39732
// exit ;
39730: GO 39787
// result := [ ] ;
39732: LD_ADDR_VAR 0 2
39736: PUSH
39737: EMPTY
39738: ST_TO_ADDR
// for i := array downto 1 do
39739: LD_ADDR_VAR 0 3
39743: PUSH
39744: DOUBLE
39745: LD_VAR 0 1
39749: INC
39750: ST_TO_ADDR
39751: LD_INT 1
39753: PUSH
39754: FOR_DOWNTO
39755: IFFALSE 39785
// result := Join ( result , array [ i ] ) ;
39757: LD_ADDR_VAR 0 2
39761: PUSH
39762: LD_VAR 0 2
39766: PPUSH
39767: LD_VAR 0 1
39771: PUSH
39772: LD_VAR 0 3
39776: ARRAY
39777: PPUSH
39778: CALL 44639 0 2
39782: ST_TO_ADDR
39783: GO 39754
39785: POP
39786: POP
// end ;
39787: LD_VAR 0 2
39791: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39792: LD_INT 0
39794: PPUSH
39795: PPUSH
39796: PPUSH
39797: PPUSH
39798: PPUSH
39799: PPUSH
// if not unit or not hexes then
39800: LD_VAR 0 1
39804: NOT
39805: IFTRUE 39814
39807: PUSH
39808: LD_VAR 0 2
39812: NOT
39813: OR
39814: IFFALSE 39818
// exit ;
39816: GO 39941
// dist := 9999 ;
39818: LD_ADDR_VAR 0 5
39822: PUSH
39823: LD_INT 9999
39825: ST_TO_ADDR
// for i = 1 to hexes do
39826: LD_ADDR_VAR 0 4
39830: PUSH
39831: DOUBLE
39832: LD_INT 1
39834: DEC
39835: ST_TO_ADDR
39836: LD_VAR 0 2
39840: PUSH
39841: FOR_TO
39842: IFFALSE 39929
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39844: LD_ADDR_VAR 0 6
39848: PUSH
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_VAR 0 2
39858: PUSH
39859: LD_VAR 0 4
39863: ARRAY
39864: PUSH
39865: LD_INT 1
39867: ARRAY
39868: PPUSH
39869: LD_VAR 0 2
39873: PUSH
39874: LD_VAR 0 4
39878: ARRAY
39879: PUSH
39880: LD_INT 2
39882: ARRAY
39883: PPUSH
39884: CALL_OW 297
39888: ST_TO_ADDR
// if tdist < dist then
39889: LD_VAR 0 6
39893: PUSH
39894: LD_VAR 0 5
39898: LESS
39899: IFFALSE 39927
// begin hex := hexes [ i ] ;
39901: LD_ADDR_VAR 0 8
39905: PUSH
39906: LD_VAR 0 2
39910: PUSH
39911: LD_VAR 0 4
39915: ARRAY
39916: ST_TO_ADDR
// dist := tdist ;
39917: LD_ADDR_VAR 0 5
39921: PUSH
39922: LD_VAR 0 6
39926: ST_TO_ADDR
// end ; end ;
39927: GO 39841
39929: POP
39930: POP
// result := hex ;
39931: LD_ADDR_VAR 0 3
39935: PUSH
39936: LD_VAR 0 8
39940: ST_TO_ADDR
// end ;
39941: LD_VAR 0 3
39945: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39946: LD_INT 0
39948: PPUSH
39949: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39950: LD_VAR 0 1
39954: NOT
39955: IFTRUE 39994
39957: PUSH
39958: LD_VAR 0 1
39962: PUSH
39963: LD_INT 21
39965: PUSH
39966: LD_INT 2
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: PUSH
39973: LD_INT 23
39975: PUSH
39976: LD_INT 2
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PPUSH
39987: CALL_OW 69
39991: IN
39992: NOT
39993: OR
39994: IFFALSE 39998
// exit ;
39996: GO 40045
// for i = 1 to 3 do
39998: LD_ADDR_VAR 0 3
40002: PUSH
40003: DOUBLE
40004: LD_INT 1
40006: DEC
40007: ST_TO_ADDR
40008: LD_INT 3
40010: PUSH
40011: FOR_TO
40012: IFFALSE 40043
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 250
40023: PPUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 251
40033: PPUSH
40034: LD_INT 1
40036: PPUSH
40037: CALL_OW 453
40041: GO 40011
40043: POP
40044: POP
// end ;
40045: LD_VAR 0 2
40049: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
40050: LD_INT 0
40052: PPUSH
40053: PPUSH
40054: PPUSH
40055: PPUSH
40056: PPUSH
40057: PPUSH
// if not unit or not enemy_unit then
40058: LD_VAR 0 1
40062: NOT
40063: IFTRUE 40072
40065: PUSH
40066: LD_VAR 0 2
40070: NOT
40071: OR
40072: IFFALSE 40076
// exit ;
40074: GO 40557
// if GetLives ( i ) < 250 then
40076: LD_VAR 0 4
40080: PPUSH
40081: CALL_OW 256
40085: PUSH
40086: LD_INT 250
40088: LESS
40089: IFFALSE 40102
// begin ComAutodestruct ( i ) ;
40091: LD_VAR 0 4
40095: PPUSH
40096: CALL 39946 0 1
// exit ;
40100: GO 40557
// end ; x := GetX ( enemy_unit ) ;
40102: LD_ADDR_VAR 0 7
40106: PUSH
40107: LD_VAR 0 2
40111: PPUSH
40112: CALL_OW 250
40116: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
40117: LD_ADDR_VAR 0 8
40121: PUSH
40122: LD_VAR 0 2
40126: PPUSH
40127: CALL_OW 251
40131: ST_TO_ADDR
// if not x or not y then
40132: LD_VAR 0 7
40136: NOT
40137: IFTRUE 40146
40139: PUSH
40140: LD_VAR 0 8
40144: NOT
40145: OR
40146: IFFALSE 40150
// exit ;
40148: GO 40557
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
40150: LD_ADDR_VAR 0 6
40154: PUSH
40155: LD_VAR 0 7
40159: PPUSH
40160: LD_INT 0
40162: PPUSH
40163: LD_INT 4
40165: PPUSH
40166: CALL_OW 272
40170: PUSH
40171: LD_VAR 0 8
40175: PPUSH
40176: LD_INT 0
40178: PPUSH
40179: LD_INT 4
40181: PPUSH
40182: CALL_OW 273
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_VAR 0 7
40195: PPUSH
40196: LD_INT 1
40198: PPUSH
40199: LD_INT 4
40201: PPUSH
40202: CALL_OW 272
40206: PUSH
40207: LD_VAR 0 8
40211: PPUSH
40212: LD_INT 1
40214: PPUSH
40215: LD_INT 4
40217: PPUSH
40218: CALL_OW 273
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_VAR 0 7
40231: PPUSH
40232: LD_INT 2
40234: PPUSH
40235: LD_INT 4
40237: PPUSH
40238: CALL_OW 272
40242: PUSH
40243: LD_VAR 0 8
40247: PPUSH
40248: LD_INT 2
40250: PPUSH
40251: LD_INT 4
40253: PPUSH
40254: CALL_OW 273
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_VAR 0 7
40267: PPUSH
40268: LD_INT 3
40270: PPUSH
40271: LD_INT 4
40273: PPUSH
40274: CALL_OW 272
40278: PUSH
40279: LD_VAR 0 8
40283: PPUSH
40284: LD_INT 3
40286: PPUSH
40287: LD_INT 4
40289: PPUSH
40290: CALL_OW 273
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_VAR 0 7
40303: PPUSH
40304: LD_INT 4
40306: PPUSH
40307: LD_INT 4
40309: PPUSH
40310: CALL_OW 272
40314: PUSH
40315: LD_VAR 0 8
40319: PPUSH
40320: LD_INT 4
40322: PPUSH
40323: LD_INT 4
40325: PPUSH
40326: CALL_OW 273
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_VAR 0 7
40339: PPUSH
40340: LD_INT 5
40342: PPUSH
40343: LD_INT 4
40345: PPUSH
40346: CALL_OW 272
40350: PUSH
40351: LD_VAR 0 8
40355: PPUSH
40356: LD_INT 5
40358: PPUSH
40359: LD_INT 4
40361: PPUSH
40362: CALL_OW 273
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: ST_TO_ADDR
// for i = tmp downto 1 do
40379: LD_ADDR_VAR 0 4
40383: PUSH
40384: DOUBLE
40385: LD_VAR 0 6
40389: INC
40390: ST_TO_ADDR
40391: LD_INT 1
40393: PUSH
40394: FOR_DOWNTO
40395: IFFALSE 40498
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40397: LD_VAR 0 6
40401: PUSH
40402: LD_VAR 0 4
40406: ARRAY
40407: PUSH
40408: LD_INT 1
40410: ARRAY
40411: PPUSH
40412: LD_VAR 0 6
40416: PUSH
40417: LD_VAR 0 4
40421: ARRAY
40422: PUSH
40423: LD_INT 2
40425: ARRAY
40426: PPUSH
40427: CALL_OW 488
40431: NOT
40432: IFTRUE 40474
40434: PUSH
40435: LD_VAR 0 6
40439: PUSH
40440: LD_VAR 0 4
40444: ARRAY
40445: PUSH
40446: LD_INT 1
40448: ARRAY
40449: PPUSH
40450: LD_VAR 0 6
40454: PUSH
40455: LD_VAR 0 4
40459: ARRAY
40460: PUSH
40461: LD_INT 2
40463: ARRAY
40464: PPUSH
40465: CALL_OW 428
40469: PUSH
40470: LD_INT 0
40472: NONEQUAL
40473: OR
40474: IFFALSE 40496
// tmp := Delete ( tmp , i ) ;
40476: LD_ADDR_VAR 0 6
40480: PUSH
40481: LD_VAR 0 6
40485: PPUSH
40486: LD_VAR 0 4
40490: PPUSH
40491: CALL_OW 3
40495: ST_TO_ADDR
40496: GO 40394
40498: POP
40499: POP
// j := GetClosestHex ( unit , tmp ) ;
40500: LD_ADDR_VAR 0 5
40504: PUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: LD_VAR 0 6
40514: PPUSH
40515: CALL 39792 0 2
40519: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40520: LD_VAR 0 1
40524: PPUSH
40525: LD_VAR 0 5
40529: PUSH
40530: LD_INT 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 5
40538: PUSH
40539: LD_INT 2
40541: ARRAY
40542: PPUSH
40543: CALL_OW 111
// result := j ;
40547: LD_ADDR_VAR 0 3
40551: PUSH
40552: LD_VAR 0 5
40556: ST_TO_ADDR
// end ;
40557: LD_VAR 0 3
40561: RET
// export function PrepareApemanSoldier ( ) ; begin
40562: LD_INT 0
40564: PPUSH
// uc_nation := 0 ;
40565: LD_ADDR_OWVAR 21
40569: PUSH
40570: LD_INT 0
40572: ST_TO_ADDR
// hc_sex := sex_male ;
40573: LD_ADDR_OWVAR 27
40577: PUSH
40578: LD_INT 1
40580: ST_TO_ADDR
// hc_name :=  ;
40581: LD_ADDR_OWVAR 26
40585: PUSH
40586: LD_STRING 
40588: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
40589: LD_ADDR_OWVAR 28
40593: PUSH
40594: LD_INT 15
40596: ST_TO_ADDR
// hc_gallery :=  ;
40597: LD_ADDR_OWVAR 33
40601: PUSH
40602: LD_STRING 
40604: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40605: LD_ADDR_OWVAR 31
40609: PUSH
40610: LD_INT 0
40612: PPUSH
40613: LD_INT 3
40615: PPUSH
40616: CALL_OW 12
40620: PUSH
40621: LD_INT 0
40623: PPUSH
40624: LD_INT 3
40626: PPUSH
40627: CALL_OW 12
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
40644: LD_ADDR_OWVAR 29
40648: PUSH
40649: LD_INT 10
40651: PUSH
40652: LD_INT 12
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: ST_TO_ADDR
// end ;
40659: LD_VAR 0 1
40663: RET
// export function PrepareApemanEngineer ( ) ; begin
40664: LD_INT 0
40666: PPUSH
// uc_nation := 0 ;
40667: LD_ADDR_OWVAR 21
40671: PUSH
40672: LD_INT 0
40674: ST_TO_ADDR
// hc_sex := sex_male ;
40675: LD_ADDR_OWVAR 27
40679: PUSH
40680: LD_INT 1
40682: ST_TO_ADDR
// hc_name :=  ;
40683: LD_ADDR_OWVAR 26
40687: PUSH
40688: LD_STRING 
40690: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40691: LD_ADDR_OWVAR 28
40695: PUSH
40696: LD_INT 16
40698: ST_TO_ADDR
// hc_gallery :=  ;
40699: LD_ADDR_OWVAR 33
40703: PUSH
40704: LD_STRING 
40706: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40707: LD_ADDR_OWVAR 31
40711: PUSH
40712: LD_INT 0
40714: PPUSH
40715: LD_INT 3
40717: PPUSH
40718: CALL_OW 12
40722: PUSH
40723: LD_INT 0
40725: PPUSH
40726: LD_INT 3
40728: PPUSH
40729: CALL_OW 12
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
40746: LD_ADDR_OWVAR 29
40750: PUSH
40751: LD_INT 10
40753: PUSH
40754: LD_INT 12
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: ST_TO_ADDR
// end ;
40761: LD_VAR 0 1
40765: RET
// export function PrepareApeman ( agressivity ) ; begin
40766: LD_INT 0
40768: PPUSH
// uc_side := 0 ;
40769: LD_ADDR_OWVAR 20
40773: PUSH
40774: LD_INT 0
40776: ST_TO_ADDR
// uc_nation := 0 ;
40777: LD_ADDR_OWVAR 21
40781: PUSH
40782: LD_INT 0
40784: ST_TO_ADDR
// hc_sex := sex_male ;
40785: LD_ADDR_OWVAR 27
40789: PUSH
40790: LD_INT 1
40792: ST_TO_ADDR
// hc_class := class_apeman ;
40793: LD_ADDR_OWVAR 28
40797: PUSH
40798: LD_INT 12
40800: ST_TO_ADDR
// hc_gallery :=  ;
40801: LD_ADDR_OWVAR 33
40805: PUSH
40806: LD_STRING 
40808: ST_TO_ADDR
// hc_name :=  ;
40809: LD_ADDR_OWVAR 26
40813: PUSH
40814: LD_STRING 
40816: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
40817: LD_ADDR_OWVAR 29
40821: PUSH
40822: LD_INT 10
40824: PUSH
40825: LD_INT 12
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: ST_TO_ADDR
// if agressivity = 0 then
40832: LD_VAR 0 1
40836: PUSH
40837: LD_INT 0
40839: EQUAL
40840: IFFALSE 40852
// hc_agressivity := 0 else
40842: LD_ADDR_OWVAR 35
40846: PUSH
40847: LD_INT 0
40849: ST_TO_ADDR
40850: GO 40873
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40852: LD_ADDR_OWVAR 35
40856: PUSH
40857: LD_VAR 0 1
40861: NEG
40862: PPUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 12
40872: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40873: LD_ADDR_OWVAR 31
40877: PUSH
40878: LD_INT 0
40880: PPUSH
40881: LD_INT 3
40883: PPUSH
40884: CALL_OW 12
40888: PUSH
40889: LD_INT 0
40891: PPUSH
40892: LD_INT 3
40894: PPUSH
40895: CALL_OW 12
40899: PUSH
40900: LD_INT 0
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: ST_TO_ADDR
// end ;
40912: LD_VAR 0 2
40916: RET
// export function PrepareTiger ( agressivity ) ; begin
40917: LD_INT 0
40919: PPUSH
// uc_side := 0 ;
40920: LD_ADDR_OWVAR 20
40924: PUSH
40925: LD_INT 0
40927: ST_TO_ADDR
// uc_nation := 0 ;
40928: LD_ADDR_OWVAR 21
40932: PUSH
40933: LD_INT 0
40935: ST_TO_ADDR
// InitHc ;
40936: CALL_OW 19
// hc_class := class_tiger ;
40940: LD_ADDR_OWVAR 28
40944: PUSH
40945: LD_INT 14
40947: ST_TO_ADDR
// hc_gallery :=  ;
40948: LD_ADDR_OWVAR 33
40952: PUSH
40953: LD_STRING 
40955: ST_TO_ADDR
// hc_name :=  ;
40956: LD_ADDR_OWVAR 26
40960: PUSH
40961: LD_STRING 
40963: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40964: LD_ADDR_OWVAR 35
40968: PUSH
40969: LD_VAR 0 1
40973: NEG
40974: PPUSH
40975: LD_VAR 0 1
40979: PPUSH
40980: CALL_OW 12
40984: ST_TO_ADDR
// end ;
40985: LD_VAR 0 2
40989: RET
// export function PrepareEnchidna ( ) ; begin
40990: LD_INT 0
40992: PPUSH
// uc_side := 0 ;
40993: LD_ADDR_OWVAR 20
40997: PUSH
40998: LD_INT 0
41000: ST_TO_ADDR
// uc_nation := 0 ;
41001: LD_ADDR_OWVAR 21
41005: PUSH
41006: LD_INT 0
41008: ST_TO_ADDR
// InitHc ;
41009: CALL_OW 19
// hc_class := class_baggie ;
41013: LD_ADDR_OWVAR 28
41017: PUSH
41018: LD_INT 13
41020: ST_TO_ADDR
// hc_gallery :=  ;
41021: LD_ADDR_OWVAR 33
41025: PUSH
41026: LD_STRING 
41028: ST_TO_ADDR
// hc_name :=  ;
41029: LD_ADDR_OWVAR 26
41033: PUSH
41034: LD_STRING 
41036: ST_TO_ADDR
// end ;
41037: LD_VAR 0 1
41041: RET
// export function PrepareFrog ( ) ; begin
41042: LD_INT 0
41044: PPUSH
// uc_side := 0 ;
41045: LD_ADDR_OWVAR 20
41049: PUSH
41050: LD_INT 0
41052: ST_TO_ADDR
// uc_nation := 0 ;
41053: LD_ADDR_OWVAR 21
41057: PUSH
41058: LD_INT 0
41060: ST_TO_ADDR
// InitHc ;
41061: CALL_OW 19
// hc_class := class_frog ;
41065: LD_ADDR_OWVAR 28
41069: PUSH
41070: LD_INT 19
41072: ST_TO_ADDR
// hc_gallery :=  ;
41073: LD_ADDR_OWVAR 33
41077: PUSH
41078: LD_STRING 
41080: ST_TO_ADDR
// hc_name :=  ;
41081: LD_ADDR_OWVAR 26
41085: PUSH
41086: LD_STRING 
41088: ST_TO_ADDR
// end ;
41089: LD_VAR 0 1
41093: RET
// export function PrepareFish ( ) ; begin
41094: LD_INT 0
41096: PPUSH
// uc_side := 0 ;
41097: LD_ADDR_OWVAR 20
41101: PUSH
41102: LD_INT 0
41104: ST_TO_ADDR
// uc_nation := 0 ;
41105: LD_ADDR_OWVAR 21
41109: PUSH
41110: LD_INT 0
41112: ST_TO_ADDR
// InitHc ;
41113: CALL_OW 19
// hc_class := class_fish ;
41117: LD_ADDR_OWVAR 28
41121: PUSH
41122: LD_INT 20
41124: ST_TO_ADDR
// hc_gallery :=  ;
41125: LD_ADDR_OWVAR 33
41129: PUSH
41130: LD_STRING 
41132: ST_TO_ADDR
// hc_name :=  ;
41133: LD_ADDR_OWVAR 26
41137: PUSH
41138: LD_STRING 
41140: ST_TO_ADDR
// end ;
41141: LD_VAR 0 1
41145: RET
// export function PrepareBird ( ) ; begin
41146: LD_INT 0
41148: PPUSH
// uc_side := 0 ;
41149: LD_ADDR_OWVAR 20
41153: PUSH
41154: LD_INT 0
41156: ST_TO_ADDR
// uc_nation := 0 ;
41157: LD_ADDR_OWVAR 21
41161: PUSH
41162: LD_INT 0
41164: ST_TO_ADDR
// InitHc ;
41165: CALL_OW 19
// hc_class := class_phororhacos ;
41169: LD_ADDR_OWVAR 28
41173: PUSH
41174: LD_INT 18
41176: ST_TO_ADDR
// hc_gallery :=  ;
41177: LD_ADDR_OWVAR 33
41181: PUSH
41182: LD_STRING 
41184: ST_TO_ADDR
// hc_name :=  ;
41185: LD_ADDR_OWVAR 26
41189: PUSH
41190: LD_STRING 
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 1
41197: RET
// export function PrepareHorse ( ) ; begin
41198: LD_INT 0
41200: PPUSH
// uc_side := 0 ;
41201: LD_ADDR_OWVAR 20
41205: PUSH
41206: LD_INT 0
41208: ST_TO_ADDR
// uc_nation := 0 ;
41209: LD_ADDR_OWVAR 21
41213: PUSH
41214: LD_INT 0
41216: ST_TO_ADDR
// InitHc ;
41217: CALL_OW 19
// hc_class := class_horse ;
41221: LD_ADDR_OWVAR 28
41225: PUSH
41226: LD_INT 21
41228: ST_TO_ADDR
// hc_gallery :=  ;
41229: LD_ADDR_OWVAR 33
41233: PUSH
41234: LD_STRING 
41236: ST_TO_ADDR
// hc_name :=  ;
41237: LD_ADDR_OWVAR 26
41241: PUSH
41242: LD_STRING 
41244: ST_TO_ADDR
// end ;
41245: LD_VAR 0 1
41249: RET
// export function PrepareMastodont ( ) ; begin
41250: LD_INT 0
41252: PPUSH
// uc_side := 0 ;
41253: LD_ADDR_OWVAR 20
41257: PUSH
41258: LD_INT 0
41260: ST_TO_ADDR
// uc_nation := 0 ;
41261: LD_ADDR_OWVAR 21
41265: PUSH
41266: LD_INT 0
41268: ST_TO_ADDR
// vc_chassis := class_mastodont ;
41269: LD_ADDR_OWVAR 37
41273: PUSH
41274: LD_INT 31
41276: ST_TO_ADDR
// vc_control := control_rider ;
41277: LD_ADDR_OWVAR 38
41281: PUSH
41282: LD_INT 4
41284: ST_TO_ADDR
// end ;
41285: LD_VAR 0 1
41289: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
41290: LD_INT 0
41292: PPUSH
41293: PPUSH
41294: PPUSH
// uc_side = 0 ;
41295: LD_ADDR_OWVAR 20
41299: PUSH
41300: LD_INT 0
41302: ST_TO_ADDR
// uc_nation = 0 ;
41303: LD_ADDR_OWVAR 21
41307: PUSH
41308: LD_INT 0
41310: ST_TO_ADDR
// InitHc_All ( ) ;
41311: CALL_OW 584
// InitVc ;
41315: CALL_OW 20
// if mastodonts then
41319: LD_VAR 0 6
41323: IFFALSE 41390
// for i = 1 to mastodonts do
41325: LD_ADDR_VAR 0 11
41329: PUSH
41330: DOUBLE
41331: LD_INT 1
41333: DEC
41334: ST_TO_ADDR
41335: LD_VAR 0 6
41339: PUSH
41340: FOR_TO
41341: IFFALSE 41388
// begin vc_chassis := 31 ;
41343: LD_ADDR_OWVAR 37
41347: PUSH
41348: LD_INT 31
41350: ST_TO_ADDR
// vc_control := control_rider ;
41351: LD_ADDR_OWVAR 38
41355: PUSH
41356: LD_INT 4
41358: ST_TO_ADDR
// animal := CreateVehicle ;
41359: LD_ADDR_VAR 0 12
41363: PUSH
41364: CALL_OW 45
41368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41369: LD_VAR 0 12
41373: PPUSH
41374: LD_VAR 0 8
41378: PPUSH
41379: LD_INT 0
41381: PPUSH
41382: CALL 43532 0 3
// end ;
41386: GO 41340
41388: POP
41389: POP
// if horses then
41390: LD_VAR 0 5
41394: IFFALSE 41461
// for i = 1 to horses do
41396: LD_ADDR_VAR 0 11
41400: PUSH
41401: DOUBLE
41402: LD_INT 1
41404: DEC
41405: ST_TO_ADDR
41406: LD_VAR 0 5
41410: PUSH
41411: FOR_TO
41412: IFFALSE 41459
// begin hc_class := 21 ;
41414: LD_ADDR_OWVAR 28
41418: PUSH
41419: LD_INT 21
41421: ST_TO_ADDR
// hc_gallery :=  ;
41422: LD_ADDR_OWVAR 33
41426: PUSH
41427: LD_STRING 
41429: ST_TO_ADDR
// animal := CreateHuman ;
41430: LD_ADDR_VAR 0 12
41434: PUSH
41435: CALL_OW 44
41439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41440: LD_VAR 0 12
41444: PPUSH
41445: LD_VAR 0 8
41449: PPUSH
41450: LD_INT 0
41452: PPUSH
41453: CALL 43532 0 3
// end ;
41457: GO 41411
41459: POP
41460: POP
// if birds then
41461: LD_VAR 0 1
41465: IFFALSE 41532
// for i = 1 to birds do
41467: LD_ADDR_VAR 0 11
41471: PUSH
41472: DOUBLE
41473: LD_INT 1
41475: DEC
41476: ST_TO_ADDR
41477: LD_VAR 0 1
41481: PUSH
41482: FOR_TO
41483: IFFALSE 41530
// begin hc_class := 18 ;
41485: LD_ADDR_OWVAR 28
41489: PUSH
41490: LD_INT 18
41492: ST_TO_ADDR
// hc_gallery =  ;
41493: LD_ADDR_OWVAR 33
41497: PUSH
41498: LD_STRING 
41500: ST_TO_ADDR
// animal := CreateHuman ;
41501: LD_ADDR_VAR 0 12
41505: PUSH
41506: CALL_OW 44
41510: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41511: LD_VAR 0 12
41515: PPUSH
41516: LD_VAR 0 8
41520: PPUSH
41521: LD_INT 0
41523: PPUSH
41524: CALL 43532 0 3
// end ;
41528: GO 41482
41530: POP
41531: POP
// if tigers then
41532: LD_VAR 0 2
41536: IFFALSE 41620
// for i = 1 to tigers do
41538: LD_ADDR_VAR 0 11
41542: PUSH
41543: DOUBLE
41544: LD_INT 1
41546: DEC
41547: ST_TO_ADDR
41548: LD_VAR 0 2
41552: PUSH
41553: FOR_TO
41554: IFFALSE 41618
// begin hc_class = class_tiger ;
41556: LD_ADDR_OWVAR 28
41560: PUSH
41561: LD_INT 14
41563: ST_TO_ADDR
// hc_gallery =  ;
41564: LD_ADDR_OWVAR 33
41568: PUSH
41569: LD_STRING 
41571: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41572: LD_ADDR_OWVAR 35
41576: PUSH
41577: LD_INT 7
41579: NEG
41580: PPUSH
41581: LD_INT 7
41583: PPUSH
41584: CALL_OW 12
41588: ST_TO_ADDR
// animal := CreateHuman ;
41589: LD_ADDR_VAR 0 12
41593: PUSH
41594: CALL_OW 44
41598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41599: LD_VAR 0 12
41603: PPUSH
41604: LD_VAR 0 8
41608: PPUSH
41609: LD_INT 0
41611: PPUSH
41612: CALL 43532 0 3
// end ;
41616: GO 41553
41618: POP
41619: POP
// if apemans then
41620: LD_VAR 0 3
41624: IFFALSE 41747
// for i = 1 to apemans do
41626: LD_ADDR_VAR 0 11
41630: PUSH
41631: DOUBLE
41632: LD_INT 1
41634: DEC
41635: ST_TO_ADDR
41636: LD_VAR 0 3
41640: PUSH
41641: FOR_TO
41642: IFFALSE 41745
// begin hc_class = class_apeman ;
41644: LD_ADDR_OWVAR 28
41648: PUSH
41649: LD_INT 12
41651: ST_TO_ADDR
// hc_gallery =  ;
41652: LD_ADDR_OWVAR 33
41656: PUSH
41657: LD_STRING 
41659: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41660: LD_ADDR_OWVAR 35
41664: PUSH
41665: LD_INT 2
41667: NEG
41668: PPUSH
41669: LD_INT 2
41671: PPUSH
41672: CALL_OW 12
41676: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41677: LD_ADDR_OWVAR 31
41681: PUSH
41682: LD_INT 1
41684: PPUSH
41685: LD_INT 3
41687: PPUSH
41688: CALL_OW 12
41692: PUSH
41693: LD_INT 1
41695: PPUSH
41696: LD_INT 3
41698: PPUSH
41699: CALL_OW 12
41703: PUSH
41704: LD_INT 0
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: ST_TO_ADDR
// animal := CreateHuman ;
41716: LD_ADDR_VAR 0 12
41720: PUSH
41721: CALL_OW 44
41725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41726: LD_VAR 0 12
41730: PPUSH
41731: LD_VAR 0 8
41735: PPUSH
41736: LD_INT 0
41738: PPUSH
41739: CALL 43532 0 3
// end ;
41743: GO 41641
41745: POP
41746: POP
// if enchidnas then
41747: LD_VAR 0 4
41751: IFFALSE 41818
// for i = 1 to enchidnas do
41753: LD_ADDR_VAR 0 11
41757: PUSH
41758: DOUBLE
41759: LD_INT 1
41761: DEC
41762: ST_TO_ADDR
41763: LD_VAR 0 4
41767: PUSH
41768: FOR_TO
41769: IFFALSE 41816
// begin hc_class = 13 ;
41771: LD_ADDR_OWVAR 28
41775: PUSH
41776: LD_INT 13
41778: ST_TO_ADDR
// hc_gallery =  ;
41779: LD_ADDR_OWVAR 33
41783: PUSH
41784: LD_STRING 
41786: ST_TO_ADDR
// animal := CreateHuman ;
41787: LD_ADDR_VAR 0 12
41791: PUSH
41792: CALL_OW 44
41796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41797: LD_VAR 0 12
41801: PPUSH
41802: LD_VAR 0 8
41806: PPUSH
41807: LD_INT 0
41809: PPUSH
41810: CALL 43532 0 3
// end ;
41814: GO 41768
41816: POP
41817: POP
// if fishes then
41818: LD_VAR 0 7
41822: IFFALSE 41889
// for i = 1 to fishes do
41824: LD_ADDR_VAR 0 11
41828: PUSH
41829: DOUBLE
41830: LD_INT 1
41832: DEC
41833: ST_TO_ADDR
41834: LD_VAR 0 7
41838: PUSH
41839: FOR_TO
41840: IFFALSE 41887
// begin hc_class = 20 ;
41842: LD_ADDR_OWVAR 28
41846: PUSH
41847: LD_INT 20
41849: ST_TO_ADDR
// hc_gallery =  ;
41850: LD_ADDR_OWVAR 33
41854: PUSH
41855: LD_STRING 
41857: ST_TO_ADDR
// animal := CreateHuman ;
41858: LD_ADDR_VAR 0 12
41862: PUSH
41863: CALL_OW 44
41867: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41868: LD_VAR 0 12
41872: PPUSH
41873: LD_VAR 0 9
41877: PPUSH
41878: LD_INT 0
41880: PPUSH
41881: CALL 43532 0 3
// end ;
41885: GO 41839
41887: POP
41888: POP
// end ;
41889: LD_VAR 0 10
41893: RET
// export function WantHeal ( sci , unit ) ; begin
41894: LD_INT 0
41896: PPUSH
// if GetTaskList ( sci ) > 0 then
41897: LD_VAR 0 1
41901: PPUSH
41902: CALL_OW 437
41906: PUSH
41907: LD_INT 0
41909: GREATER
41910: IFFALSE 41982
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41912: LD_VAR 0 1
41916: PPUSH
41917: CALL_OW 437
41921: PUSH
41922: LD_INT 1
41924: ARRAY
41925: PUSH
41926: LD_INT 1
41928: ARRAY
41929: PUSH
41930: LD_STRING l
41932: EQUAL
41933: IFFALSE 41960
41935: PUSH
41936: LD_VAR 0 1
41940: PPUSH
41941: CALL_OW 437
41945: PUSH
41946: LD_INT 1
41948: ARRAY
41949: PUSH
41950: LD_INT 4
41952: ARRAY
41953: PUSH
41954: LD_VAR 0 2
41958: EQUAL
41959: AND
41960: IFFALSE 41972
// result := true else
41962: LD_ADDR_VAR 0 3
41966: PUSH
41967: LD_INT 1
41969: ST_TO_ADDR
41970: GO 41980
// result := false ;
41972: LD_ADDR_VAR 0 3
41976: PUSH
41977: LD_INT 0
41979: ST_TO_ADDR
// end else
41980: GO 41990
// result := false ;
41982: LD_ADDR_VAR 0 3
41986: PUSH
41987: LD_INT 0
41989: ST_TO_ADDR
// end ;
41990: LD_VAR 0 3
41994: RET
// export function HealTarget ( sci ) ; begin
41995: LD_INT 0
41997: PPUSH
// if not sci then
41998: LD_VAR 0 1
42002: NOT
42003: IFFALSE 42007
// exit ;
42005: GO 42072
// result := 0 ;
42007: LD_ADDR_VAR 0 2
42011: PUSH
42012: LD_INT 0
42014: ST_TO_ADDR
// if GetTaskList ( sci ) then
42015: LD_VAR 0 1
42019: PPUSH
42020: CALL_OW 437
42024: IFFALSE 42072
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
42026: LD_VAR 0 1
42030: PPUSH
42031: CALL_OW 437
42035: PUSH
42036: LD_INT 1
42038: ARRAY
42039: PUSH
42040: LD_INT 1
42042: ARRAY
42043: PUSH
42044: LD_STRING l
42046: EQUAL
42047: IFFALSE 42072
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
42049: LD_ADDR_VAR 0 2
42053: PUSH
42054: LD_VAR 0 1
42058: PPUSH
42059: CALL_OW 437
42063: PUSH
42064: LD_INT 1
42066: ARRAY
42067: PUSH
42068: LD_INT 4
42070: ARRAY
42071: ST_TO_ADDR
// end ;
42072: LD_VAR 0 2
42076: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
42077: LD_INT 0
42079: PPUSH
42080: PPUSH
42081: PPUSH
42082: PPUSH
// if not base_units then
42083: LD_VAR 0 1
42087: NOT
42088: IFFALSE 42092
// exit ;
42090: GO 42179
// result := false ;
42092: LD_ADDR_VAR 0 2
42096: PUSH
42097: LD_INT 0
42099: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
42100: LD_ADDR_VAR 0 5
42104: PUSH
42105: LD_VAR 0 1
42109: PPUSH
42110: LD_INT 21
42112: PUSH
42113: LD_INT 3
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PPUSH
42120: CALL_OW 72
42124: ST_TO_ADDR
// if not tmp then
42125: LD_VAR 0 5
42129: NOT
42130: IFFALSE 42134
// exit ;
42132: GO 42179
// for i in tmp do
42134: LD_ADDR_VAR 0 3
42138: PUSH
42139: LD_VAR 0 5
42143: PUSH
42144: FOR_IN
42145: IFFALSE 42177
// begin result := EnemyInRange ( i , 22 ) ;
42147: LD_ADDR_VAR 0 2
42151: PUSH
42152: LD_VAR 0 3
42156: PPUSH
42157: LD_INT 22
42159: PPUSH
42160: CALL 39594 0 2
42164: ST_TO_ADDR
// if result then
42165: LD_VAR 0 2
42169: IFFALSE 42175
// exit ;
42171: POP
42172: POP
42173: GO 42179
// end ;
42175: GO 42144
42177: POP
42178: POP
// end ;
42179: LD_VAR 0 2
42183: RET
// export function FilterByTag ( units , tag ) ; begin
42184: LD_INT 0
42186: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
42187: LD_ADDR_VAR 0 3
42191: PUSH
42192: LD_VAR 0 1
42196: PPUSH
42197: LD_INT 120
42199: PUSH
42200: LD_VAR 0 2
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PPUSH
42209: CALL_OW 72
42213: ST_TO_ADDR
// end ;
42214: LD_VAR 0 3
42218: RET
// export function IsDriver ( un ) ; begin
42219: LD_INT 0
42221: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
42222: LD_ADDR_VAR 0 2
42226: PUSH
42227: LD_VAR 0 1
42231: PUSH
42232: LD_INT 55
42234: PUSH
42235: EMPTY
42236: LIST
42237: PPUSH
42238: CALL_OW 69
42242: IN
42243: ST_TO_ADDR
// end ;
42244: LD_VAR 0 2
42248: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
42249: LD_INT 0
42251: PPUSH
42252: PPUSH
// list := [ ] ;
42253: LD_ADDR_VAR 0 5
42257: PUSH
42258: EMPTY
42259: ST_TO_ADDR
// case d of 0 :
42260: LD_VAR 0 3
42264: PUSH
42265: LD_INT 0
42267: DOUBLE
42268: EQUAL
42269: IFTRUE 42273
42271: GO 42406
42273: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
42274: LD_ADDR_VAR 0 5
42278: PUSH
42279: LD_VAR 0 1
42283: PUSH
42284: LD_INT 4
42286: MINUS
42287: PUSH
42288: LD_VAR 0 2
42292: PUSH
42293: LD_INT 4
42295: MINUS
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: LIST
42304: PUSH
42305: LD_VAR 0 1
42309: PUSH
42310: LD_INT 3
42312: MINUS
42313: PUSH
42314: LD_VAR 0 2
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: PUSH
42327: LD_VAR 0 1
42331: PUSH
42332: LD_INT 4
42334: PLUS
42335: PUSH
42336: LD_VAR 0 2
42340: PUSH
42341: LD_INT 4
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: LIST
42348: PUSH
42349: LD_VAR 0 1
42353: PUSH
42354: LD_INT 3
42356: PLUS
42357: PUSH
42358: LD_VAR 0 2
42362: PUSH
42363: LD_INT 3
42365: PLUS
42366: PUSH
42367: LD_INT 5
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: LIST
42374: PUSH
42375: LD_VAR 0 1
42379: PUSH
42380: LD_VAR 0 2
42384: PUSH
42385: LD_INT 4
42387: PLUS
42388: PUSH
42389: LD_INT 0
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: LIST
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: ST_TO_ADDR
// end ; 1 :
42404: GO 43104
42406: LD_INT 1
42408: DOUBLE
42409: EQUAL
42410: IFTRUE 42414
42412: GO 42547
42414: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
42415: LD_ADDR_VAR 0 5
42419: PUSH
42420: LD_VAR 0 1
42424: PUSH
42425: LD_VAR 0 2
42429: PUSH
42430: LD_INT 4
42432: MINUS
42433: PUSH
42434: LD_INT 3
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: LIST
42441: PUSH
42442: LD_VAR 0 1
42446: PUSH
42447: LD_INT 3
42449: MINUS
42450: PUSH
42451: LD_VAR 0 2
42455: PUSH
42456: LD_INT 3
42458: MINUS
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: LIST
42467: PUSH
42468: LD_VAR 0 1
42472: PUSH
42473: LD_INT 4
42475: MINUS
42476: PUSH
42477: LD_VAR 0 2
42481: PUSH
42482: LD_INT 1
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: PUSH
42490: LD_VAR 0 1
42494: PUSH
42495: LD_VAR 0 2
42499: PUSH
42500: LD_INT 3
42502: PLUS
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: PUSH
42512: LD_VAR 0 1
42516: PUSH
42517: LD_INT 4
42519: PLUS
42520: PUSH
42521: LD_VAR 0 2
42525: PUSH
42526: LD_INT 4
42528: PLUS
42529: PUSH
42530: LD_INT 5
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: ST_TO_ADDR
// end ; 2 :
42545: GO 43104
42547: LD_INT 2
42549: DOUBLE
42550: EQUAL
42551: IFTRUE 42555
42553: GO 42684
42555: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42556: LD_ADDR_VAR 0 5
42560: PUSH
42561: LD_VAR 0 1
42565: PUSH
42566: LD_VAR 0 2
42570: PUSH
42571: LD_INT 3
42573: MINUS
42574: PUSH
42575: LD_INT 3
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: LIST
42582: PUSH
42583: LD_VAR 0 1
42587: PUSH
42588: LD_INT 4
42590: PLUS
42591: PUSH
42592: LD_VAR 0 2
42596: PUSH
42597: LD_INT 4
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: LIST
42604: PUSH
42605: LD_VAR 0 1
42609: PUSH
42610: LD_VAR 0 2
42614: PUSH
42615: LD_INT 4
42617: PLUS
42618: PUSH
42619: LD_INT 0
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: LIST
42626: PUSH
42627: LD_VAR 0 1
42631: PUSH
42632: LD_INT 3
42634: MINUS
42635: PUSH
42636: LD_VAR 0 2
42640: PUSH
42641: LD_INT 1
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: PUSH
42649: LD_VAR 0 1
42653: PUSH
42654: LD_INT 4
42656: MINUS
42657: PUSH
42658: LD_VAR 0 2
42662: PUSH
42663: LD_INT 4
42665: MINUS
42666: PUSH
42667: LD_INT 2
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: LIST
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: ST_TO_ADDR
// end ; 3 :
42682: GO 43104
42684: LD_INT 3
42686: DOUBLE
42687: EQUAL
42688: IFTRUE 42692
42690: GO 42825
42692: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42693: LD_ADDR_VAR 0 5
42697: PUSH
42698: LD_VAR 0 1
42702: PUSH
42703: LD_INT 3
42705: PLUS
42706: PUSH
42707: LD_VAR 0 2
42711: PUSH
42712: LD_INT 4
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: LIST
42719: PUSH
42720: LD_VAR 0 1
42724: PUSH
42725: LD_INT 4
42727: PLUS
42728: PUSH
42729: LD_VAR 0 2
42733: PUSH
42734: LD_INT 4
42736: PLUS
42737: PUSH
42738: LD_INT 5
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: PUSH
42746: LD_VAR 0 1
42750: PUSH
42751: LD_INT 4
42753: MINUS
42754: PUSH
42755: LD_VAR 0 2
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: PUSH
42768: LD_VAR 0 1
42772: PUSH
42773: LD_VAR 0 2
42777: PUSH
42778: LD_INT 4
42780: MINUS
42781: PUSH
42782: LD_INT 3
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: LIST
42789: PUSH
42790: LD_VAR 0 1
42794: PUSH
42795: LD_INT 3
42797: MINUS
42798: PUSH
42799: LD_VAR 0 2
42803: PUSH
42804: LD_INT 3
42806: MINUS
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
// end ; 4 :
42823: GO 43104
42825: LD_INT 4
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42966
42833: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42834: LD_ADDR_VAR 0 5
42838: PUSH
42839: LD_VAR 0 1
42843: PUSH
42844: LD_VAR 0 2
42848: PUSH
42849: LD_INT 4
42851: PLUS
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: PUSH
42861: LD_VAR 0 1
42865: PUSH
42866: LD_INT 3
42868: PLUS
42869: PUSH
42870: LD_VAR 0 2
42874: PUSH
42875: LD_INT 3
42877: PLUS
42878: PUSH
42879: LD_INT 5
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: PUSH
42887: LD_VAR 0 1
42891: PUSH
42892: LD_INT 4
42894: PLUS
42895: PUSH
42896: LD_VAR 0 2
42900: PUSH
42901: LD_INT 4
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: PUSH
42909: LD_VAR 0 1
42913: PUSH
42914: LD_VAR 0 2
42918: PUSH
42919: LD_INT 3
42921: MINUS
42922: PUSH
42923: LD_INT 3
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: PUSH
42931: LD_VAR 0 1
42935: PUSH
42936: LD_INT 4
42938: MINUS
42939: PUSH
42940: LD_VAR 0 2
42944: PUSH
42945: LD_INT 4
42947: MINUS
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: LIST
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
// end ; 5 :
42964: GO 43104
42966: LD_INT 5
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 43103
42974: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42975: LD_ADDR_VAR 0 5
42979: PUSH
42980: LD_VAR 0 1
42984: PUSH
42985: LD_INT 4
42987: MINUS
42988: PUSH
42989: LD_VAR 0 2
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: LIST
43001: PUSH
43002: LD_VAR 0 1
43006: PUSH
43007: LD_VAR 0 2
43011: PUSH
43012: LD_INT 4
43014: MINUS
43015: PUSH
43016: LD_INT 3
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: LIST
43023: PUSH
43024: LD_VAR 0 1
43028: PUSH
43029: LD_INT 4
43031: PLUS
43032: PUSH
43033: LD_VAR 0 2
43037: PUSH
43038: LD_INT 4
43040: PLUS
43041: PUSH
43042: LD_INT 5
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: PUSH
43050: LD_VAR 0 1
43054: PUSH
43055: LD_INT 3
43057: PLUS
43058: PUSH
43059: LD_VAR 0 2
43063: PUSH
43064: LD_INT 4
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: LIST
43071: PUSH
43072: LD_VAR 0 1
43076: PUSH
43077: LD_VAR 0 2
43081: PUSH
43082: LD_INT 3
43084: PLUS
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: ST_TO_ADDR
// end ; end ;
43101: GO 43104
43103: POP
// result := list ;
43104: LD_ADDR_VAR 0 4
43108: PUSH
43109: LD_VAR 0 5
43113: ST_TO_ADDR
// end ;
43114: LD_VAR 0 4
43118: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
43119: LD_INT 0
43121: PPUSH
43122: PPUSH
43123: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
43124: LD_VAR 0 1
43128: NOT
43129: IFTRUE 43157
43131: PUSH
43132: LD_VAR 0 2
43136: PUSH
43137: LD_INT 1
43139: PUSH
43140: LD_INT 2
43142: PUSH
43143: LD_INT 3
43145: PUSH
43146: LD_INT 4
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: IN
43155: NOT
43156: OR
43157: IFFALSE 43161
// exit ;
43159: GO 43244
// tmp := [ ] ;
43161: LD_ADDR_VAR 0 5
43165: PUSH
43166: EMPTY
43167: ST_TO_ADDR
// for i in units do
43168: LD_ADDR_VAR 0 4
43172: PUSH
43173: LD_VAR 0 1
43177: PUSH
43178: FOR_IN
43179: IFFALSE 43213
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
43181: LD_ADDR_VAR 0 5
43185: PUSH
43186: LD_VAR 0 5
43190: PPUSH
43191: LD_VAR 0 4
43195: PPUSH
43196: LD_VAR 0 2
43200: PPUSH
43201: CALL_OW 259
43205: PPUSH
43206: CALL 44639 0 2
43210: ST_TO_ADDR
43211: GO 43178
43213: POP
43214: POP
// if not tmp then
43215: LD_VAR 0 5
43219: NOT
43220: IFFALSE 43224
// exit ;
43222: GO 43244
// result := SortListByListDesc ( units , tmp ) ;
43224: LD_ADDR_VAR 0 3
43228: PUSH
43229: LD_VAR 0 1
43233: PPUSH
43234: LD_VAR 0 5
43238: PPUSH
43239: CALL_OW 77
43243: ST_TO_ADDR
// end ;
43244: LD_VAR 0 3
43248: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
43249: LD_INT 0
43251: PPUSH
43252: PPUSH
43253: PPUSH
// result := false ;
43254: LD_ADDR_VAR 0 3
43258: PUSH
43259: LD_INT 0
43261: ST_TO_ADDR
// if not building then
43262: LD_VAR 0 2
43266: NOT
43267: IFFALSE 43271
// exit ;
43269: GO 43415
// x := GetX ( building ) ;
43271: LD_ADDR_VAR 0 4
43275: PUSH
43276: LD_VAR 0 2
43280: PPUSH
43281: CALL_OW 250
43285: ST_TO_ADDR
// y := GetY ( building ) ;
43286: LD_ADDR_VAR 0 5
43290: PUSH
43291: LD_VAR 0 2
43295: PPUSH
43296: CALL_OW 251
43300: ST_TO_ADDR
// if not x or not y then
43301: LD_VAR 0 4
43305: NOT
43306: IFTRUE 43315
43308: PUSH
43309: LD_VAR 0 5
43313: NOT
43314: OR
43315: IFFALSE 43319
// exit ;
43317: GO 43415
// if GetTaskList ( unit ) then
43319: LD_VAR 0 1
43323: PPUSH
43324: CALL_OW 437
43328: IFFALSE 43415
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43330: LD_STRING e
43332: PUSH
43333: LD_VAR 0 1
43337: PPUSH
43338: CALL_OW 437
43342: PUSH
43343: LD_INT 1
43345: ARRAY
43346: PUSH
43347: LD_INT 1
43349: ARRAY
43350: EQUAL
43351: IFFALSE 43378
43353: PUSH
43354: LD_VAR 0 4
43358: PUSH
43359: LD_VAR 0 1
43363: PPUSH
43364: CALL_OW 437
43368: PUSH
43369: LD_INT 1
43371: ARRAY
43372: PUSH
43373: LD_INT 2
43375: ARRAY
43376: EQUAL
43377: AND
43378: IFFALSE 43405
43380: PUSH
43381: LD_VAR 0 5
43385: PUSH
43386: LD_VAR 0 1
43390: PPUSH
43391: CALL_OW 437
43395: PUSH
43396: LD_INT 1
43398: ARRAY
43399: PUSH
43400: LD_INT 3
43402: ARRAY
43403: EQUAL
43404: AND
43405: IFFALSE 43415
// result := true end ;
43407: LD_ADDR_VAR 0 3
43411: PUSH
43412: LD_INT 1
43414: ST_TO_ADDR
// end ;
43415: LD_VAR 0 3
43419: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
43420: LD_INT 0
43422: PPUSH
// result := false ;
43423: LD_ADDR_VAR 0 4
43427: PUSH
43428: LD_INT 0
43430: ST_TO_ADDR
// if GetTaskList ( unit ) then
43431: LD_VAR 0 1
43435: PPUSH
43436: CALL_OW 437
43440: IFFALSE 43527
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
43442: LD_STRING M
43444: PUSH
43445: LD_VAR 0 1
43449: PPUSH
43450: CALL_OW 437
43454: PUSH
43455: LD_INT 1
43457: ARRAY
43458: PUSH
43459: LD_INT 1
43461: ARRAY
43462: EQUAL
43463: IFFALSE 43490
43465: PUSH
43466: LD_VAR 0 2
43470: PUSH
43471: LD_VAR 0 1
43475: PPUSH
43476: CALL_OW 437
43480: PUSH
43481: LD_INT 1
43483: ARRAY
43484: PUSH
43485: LD_INT 2
43487: ARRAY
43488: EQUAL
43489: AND
43490: IFFALSE 43517
43492: PUSH
43493: LD_VAR 0 3
43497: PUSH
43498: LD_VAR 0 1
43502: PPUSH
43503: CALL_OW 437
43507: PUSH
43508: LD_INT 1
43510: ARRAY
43511: PUSH
43512: LD_INT 3
43514: ARRAY
43515: EQUAL
43516: AND
43517: IFFALSE 43527
// result := true ;
43519: LD_ADDR_VAR 0 4
43523: PUSH
43524: LD_INT 1
43526: ST_TO_ADDR
// end ; end ;
43527: LD_VAR 0 4
43531: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43532: LD_INT 0
43534: PPUSH
43535: PPUSH
43536: PPUSH
43537: PPUSH
// if not unit or not area then
43538: LD_VAR 0 1
43542: NOT
43543: IFTRUE 43552
43545: PUSH
43546: LD_VAR 0 2
43550: NOT
43551: OR
43552: IFFALSE 43556
// exit ;
43554: GO 43732
// tmp := AreaToList ( area , i ) ;
43556: LD_ADDR_VAR 0 6
43560: PUSH
43561: LD_VAR 0 2
43565: PPUSH
43566: LD_VAR 0 5
43570: PPUSH
43571: CALL_OW 517
43575: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43576: LD_ADDR_VAR 0 5
43580: PUSH
43581: DOUBLE
43582: LD_INT 1
43584: DEC
43585: ST_TO_ADDR
43586: LD_VAR 0 6
43590: PUSH
43591: LD_INT 1
43593: ARRAY
43594: PUSH
43595: FOR_TO
43596: IFFALSE 43730
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43598: LD_ADDR_VAR 0 7
43602: PUSH
43603: LD_VAR 0 6
43607: PUSH
43608: LD_INT 1
43610: ARRAY
43611: PUSH
43612: LD_VAR 0 5
43616: ARRAY
43617: PUSH
43618: LD_VAR 0 6
43622: PUSH
43623: LD_INT 2
43625: ARRAY
43626: PUSH
43627: LD_VAR 0 5
43631: ARRAY
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
43637: LD_INT 92
43639: PUSH
43640: LD_VAR 0 7
43644: PUSH
43645: LD_INT 1
43647: ARRAY
43648: PUSH
43649: LD_VAR 0 7
43653: PUSH
43654: LD_INT 2
43656: ARRAY
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: PPUSH
43667: CALL_OW 69
43671: PUSH
43672: LD_INT 0
43674: EQUAL
43675: IFFALSE 43728
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43677: LD_VAR 0 1
43681: PPUSH
43682: LD_VAR 0 7
43686: PUSH
43687: LD_INT 1
43689: ARRAY
43690: PPUSH
43691: LD_VAR 0 7
43695: PUSH
43696: LD_INT 2
43698: ARRAY
43699: PPUSH
43700: LD_VAR 0 3
43704: PPUSH
43705: CALL_OW 48
// result := IsPlaced ( unit ) ;
43709: LD_ADDR_VAR 0 4
43713: PUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: CALL_OW 305
43723: ST_TO_ADDR
// exit ;
43724: POP
43725: POP
43726: GO 43732
// end ; end ;
43728: GO 43595
43730: POP
43731: POP
// end ;
43732: LD_VAR 0 4
43736: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43737: LD_INT 0
43739: PPUSH
43740: PPUSH
43741: PPUSH
// if not side or side > 8 then
43742: LD_VAR 0 1
43746: NOT
43747: IFTRUE 43759
43749: PUSH
43750: LD_VAR 0 1
43754: PUSH
43755: LD_INT 8
43757: GREATER
43758: OR
43759: IFFALSE 43763
// exit ;
43761: GO 43950
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43763: LD_ADDR_VAR 0 4
43767: PUSH
43768: LD_INT 22
43770: PUSH
43771: LD_VAR 0 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 21
43782: PUSH
43783: LD_INT 3
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PPUSH
43794: CALL_OW 69
43798: ST_TO_ADDR
// if not tmp then
43799: LD_VAR 0 4
43803: NOT
43804: IFFALSE 43808
// exit ;
43806: GO 43950
// enable_addtolog := true ;
43808: LD_ADDR_OWVAR 81
43812: PUSH
43813: LD_INT 1
43815: ST_TO_ADDR
// AddToLog ( [ ) ;
43816: LD_STRING [
43818: PPUSH
43819: CALL_OW 561
// for i in tmp do
43823: LD_ADDR_VAR 0 3
43827: PUSH
43828: LD_VAR 0 4
43832: PUSH
43833: FOR_IN
43834: IFFALSE 43941
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43836: LD_STRING [
43838: PUSH
43839: LD_VAR 0 3
43843: PPUSH
43844: CALL_OW 266
43848: STR
43849: PUSH
43850: LD_STRING , 
43852: STR
43853: PUSH
43854: LD_VAR 0 3
43858: PPUSH
43859: CALL_OW 250
43863: STR
43864: PUSH
43865: LD_STRING , 
43867: STR
43868: PUSH
43869: LD_VAR 0 3
43873: PPUSH
43874: CALL_OW 251
43878: STR
43879: PUSH
43880: LD_STRING , 
43882: STR
43883: PUSH
43884: LD_VAR 0 3
43888: PPUSH
43889: CALL_OW 254
43893: STR
43894: PUSH
43895: LD_STRING , 
43897: STR
43898: PUSH
43899: LD_VAR 0 3
43903: PPUSH
43904: LD_INT 1
43906: PPUSH
43907: CALL_OW 268
43911: STR
43912: PUSH
43913: LD_STRING , 
43915: STR
43916: PUSH
43917: LD_VAR 0 3
43921: PPUSH
43922: LD_INT 2
43924: PPUSH
43925: CALL_OW 268
43929: STR
43930: PUSH
43931: LD_STRING ],
43933: STR
43934: PPUSH
43935: CALL_OW 561
// end ;
43939: GO 43833
43941: POP
43942: POP
// AddToLog ( ]; ) ;
43943: LD_STRING ];
43945: PPUSH
43946: CALL_OW 561
// end ;
43950: LD_VAR 0 2
43954: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43955: LD_INT 0
43957: PPUSH
43958: PPUSH
43959: PPUSH
43960: PPUSH
43961: PPUSH
// if not area or not rate or not max then
43962: LD_VAR 0 1
43966: NOT
43967: IFTRUE 43976
43969: PUSH
43970: LD_VAR 0 2
43974: NOT
43975: OR
43976: IFTRUE 43985
43978: PUSH
43979: LD_VAR 0 4
43983: NOT
43984: OR
43985: IFFALSE 43989
// exit ;
43987: GO 44178
// while 1 do
43989: LD_INT 1
43991: IFFALSE 44178
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43993: LD_ADDR_VAR 0 9
43997: PUSH
43998: LD_VAR 0 1
44002: PPUSH
44003: LD_INT 1
44005: PPUSH
44006: CALL_OW 287
44010: PUSH
44011: LD_INT 10
44013: MUL
44014: ST_TO_ADDR
// r := rate / 10 ;
44015: LD_ADDR_VAR 0 7
44019: PUSH
44020: LD_VAR 0 2
44024: PUSH
44025: LD_INT 10
44027: DIVREAL
44028: ST_TO_ADDR
// time := 1 1$00 ;
44029: LD_ADDR_VAR 0 8
44033: PUSH
44034: LD_INT 2100
44036: ST_TO_ADDR
// if amount < min then
44037: LD_VAR 0 9
44041: PUSH
44042: LD_VAR 0 3
44046: LESS
44047: IFFALSE 44065
// r := r * 2 else
44049: LD_ADDR_VAR 0 7
44053: PUSH
44054: LD_VAR 0 7
44058: PUSH
44059: LD_INT 2
44061: MUL
44062: ST_TO_ADDR
44063: GO 44091
// if amount > max then
44065: LD_VAR 0 9
44069: PUSH
44070: LD_VAR 0 4
44074: GREATER
44075: IFFALSE 44091
// r := r / 2 ;
44077: LD_ADDR_VAR 0 7
44081: PUSH
44082: LD_VAR 0 7
44086: PUSH
44087: LD_INT 2
44089: DIVREAL
44090: ST_TO_ADDR
// time := time / r ;
44091: LD_ADDR_VAR 0 8
44095: PUSH
44096: LD_VAR 0 8
44100: PUSH
44101: LD_VAR 0 7
44105: DIVREAL
44106: ST_TO_ADDR
// if time < 0 then
44107: LD_VAR 0 8
44111: PUSH
44112: LD_INT 0
44114: LESS
44115: IFFALSE 44132
// time := time * - 1 ;
44117: LD_ADDR_VAR 0 8
44121: PUSH
44122: LD_VAR 0 8
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: MUL
44131: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
44132: LD_VAR 0 8
44136: PUSH
44137: LD_INT 35
44139: PPUSH
44140: LD_INT 875
44142: PPUSH
44143: CALL_OW 12
44147: PLUS
44148: PPUSH
44149: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
44153: LD_INT 1
44155: PPUSH
44156: LD_INT 5
44158: PPUSH
44159: CALL_OW 12
44163: PPUSH
44164: LD_VAR 0 1
44168: PPUSH
44169: LD_INT 1
44171: PPUSH
44172: CALL_OW 55
// end ;
44176: GO 43989
// end ;
44178: LD_VAR 0 5
44182: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
44188: PPUSH
44189: PPUSH
44190: PPUSH
44191: PPUSH
44192: PPUSH
// if not turrets or not factories then
44193: LD_VAR 0 1
44197: NOT
44198: IFTRUE 44207
44200: PUSH
44201: LD_VAR 0 2
44205: NOT
44206: OR
44207: IFFALSE 44211
// exit ;
44209: GO 44518
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
44211: LD_ADDR_VAR 0 10
44215: PUSH
44216: LD_INT 5
44218: PUSH
44219: LD_INT 6
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 4
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 3
44238: PUSH
44239: LD_INT 5
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 24
44253: PUSH
44254: LD_INT 25
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 23
44263: PUSH
44264: LD_INT 27
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 42
44277: PUSH
44278: LD_INT 43
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 44
44287: PUSH
44288: LD_INT 46
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 45
44297: PUSH
44298: LD_INT 47
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: LIST
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// result := [ ] ;
44315: LD_ADDR_VAR 0 3
44319: PUSH
44320: EMPTY
44321: ST_TO_ADDR
// for i in turrets do
44322: LD_ADDR_VAR 0 4
44326: PUSH
44327: LD_VAR 0 1
44331: PUSH
44332: FOR_IN
44333: IFFALSE 44516
// begin nat := GetNation ( i ) ;
44335: LD_ADDR_VAR 0 7
44339: PUSH
44340: LD_VAR 0 4
44344: PPUSH
44345: CALL_OW 248
44349: ST_TO_ADDR
// weapon := 0 ;
44350: LD_ADDR_VAR 0 8
44354: PUSH
44355: LD_INT 0
44357: ST_TO_ADDR
// if not nat then
44358: LD_VAR 0 7
44362: NOT
44363: IFFALSE 44367
// continue ;
44365: GO 44332
// for j in list [ nat ] do
44367: LD_ADDR_VAR 0 5
44371: PUSH
44372: LD_VAR 0 10
44376: PUSH
44377: LD_VAR 0 7
44381: ARRAY
44382: PUSH
44383: FOR_IN
44384: IFFALSE 44425
// if GetBWeapon ( i ) = j [ 1 ] then
44386: LD_VAR 0 4
44390: PPUSH
44391: CALL_OW 269
44395: PUSH
44396: LD_VAR 0 5
44400: PUSH
44401: LD_INT 1
44403: ARRAY
44404: EQUAL
44405: IFFALSE 44423
// begin weapon := j [ 2 ] ;
44407: LD_ADDR_VAR 0 8
44411: PUSH
44412: LD_VAR 0 5
44416: PUSH
44417: LD_INT 2
44419: ARRAY
44420: ST_TO_ADDR
// break ;
44421: GO 44425
// end ;
44423: GO 44383
44425: POP
44426: POP
// if not weapon then
44427: LD_VAR 0 8
44431: NOT
44432: IFFALSE 44436
// continue ;
44434: GO 44332
// for k in factories do
44436: LD_ADDR_VAR 0 6
44440: PUSH
44441: LD_VAR 0 2
44445: PUSH
44446: FOR_IN
44447: IFFALSE 44512
// begin weapons := AvailableWeaponList ( k ) ;
44449: LD_ADDR_VAR 0 9
44453: PUSH
44454: LD_VAR 0 6
44458: PPUSH
44459: CALL_OW 478
44463: ST_TO_ADDR
// if not weapons then
44464: LD_VAR 0 9
44468: NOT
44469: IFFALSE 44473
// continue ;
44471: GO 44446
// if weapon in weapons then
44473: LD_VAR 0 8
44477: PUSH
44478: LD_VAR 0 9
44482: IN
44483: IFFALSE 44510
// begin result := [ i , weapon ] ;
44485: LD_ADDR_VAR 0 3
44489: PUSH
44490: LD_VAR 0 4
44494: PUSH
44495: LD_VAR 0 8
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// exit ;
44504: POP
44505: POP
44506: POP
44507: POP
44508: GO 44518
// end ; end ;
44510: GO 44446
44512: POP
44513: POP
// end ;
44514: GO 44332
44516: POP
44517: POP
// end ;
44518: LD_VAR 0 3
44522: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44523: LD_INT 0
44525: PPUSH
// if not side or side > 8 then
44526: LD_VAR 0 3
44530: NOT
44531: IFTRUE 44543
44533: PUSH
44534: LD_VAR 0 3
44538: PUSH
44539: LD_INT 8
44541: GREATER
44542: OR
44543: IFFALSE 44547
// exit ;
44545: GO 44606
// if not range then
44547: LD_VAR 0 4
44551: NOT
44552: IFFALSE 44563
// range := - 12 ;
44554: LD_ADDR_VAR 0 4
44558: PUSH
44559: LD_INT 12
44561: NEG
44562: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 2
44572: PPUSH
44573: LD_VAR 0 3
44577: PPUSH
44578: LD_VAR 0 4
44582: PPUSH
44583: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44587: LD_VAR 0 1
44591: PPUSH
44592: LD_VAR 0 2
44596: PPUSH
44597: LD_VAR 0 3
44601: PPUSH
44602: CALL_OW 331
// end ;
44606: LD_VAR 0 5
44610: RET
// export function Video ( mode ) ; begin
44611: LD_INT 0
44613: PPUSH
// ingame_video = mode ;
44614: LD_ADDR_OWVAR 52
44618: PUSH
44619: LD_VAR 0 1
44623: ST_TO_ADDR
// interface_hidden = mode ;
44624: LD_ADDR_OWVAR 54
44628: PUSH
44629: LD_VAR 0 1
44633: ST_TO_ADDR
// end ;
44634: LD_VAR 0 2
44638: RET
// export function Join ( array , element ) ; begin
44639: LD_INT 0
44641: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44642: LD_ADDR_VAR 0 3
44646: PUSH
44647: LD_VAR 0 1
44651: PPUSH
44652: LD_VAR 0 1
44656: PUSH
44657: LD_INT 1
44659: PLUS
44660: PPUSH
44661: LD_VAR 0 2
44665: PPUSH
44666: CALL_OW 1
44670: ST_TO_ADDR
// end ;
44671: LD_VAR 0 3
44675: RET
// export function JoinUnion ( array , element ) ; begin
44676: LD_INT 0
44678: PPUSH
// result := array union element ;
44679: LD_ADDR_VAR 0 3
44683: PUSH
44684: LD_VAR 0 1
44688: PUSH
44689: LD_VAR 0 2
44693: UNION
44694: ST_TO_ADDR
// end ;
44695: LD_VAR 0 3
44699: RET
// export function GetBehemoths ( side ) ; begin
44700: LD_INT 0
44702: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
44703: LD_ADDR_VAR 0 2
44707: PUSH
44708: LD_INT 22
44710: PUSH
44711: LD_VAR 0 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 31
44722: PUSH
44723: LD_INT 25
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PPUSH
44734: CALL_OW 69
44738: ST_TO_ADDR
// end ;
44739: LD_VAR 0 2
44743: RET
// export function Shuffle ( array ) ; var i , index ; begin
44744: LD_INT 0
44746: PPUSH
44747: PPUSH
44748: PPUSH
// result := [ ] ;
44749: LD_ADDR_VAR 0 2
44753: PUSH
44754: EMPTY
44755: ST_TO_ADDR
// if not array then
44756: LD_VAR 0 1
44760: NOT
44761: IFFALSE 44765
// exit ;
44763: GO 44864
// Randomize ;
44765: CALL_OW 10
// for i = array downto 1 do
44769: LD_ADDR_VAR 0 3
44773: PUSH
44774: DOUBLE
44775: LD_VAR 0 1
44779: INC
44780: ST_TO_ADDR
44781: LD_INT 1
44783: PUSH
44784: FOR_DOWNTO
44785: IFFALSE 44862
// begin index := rand ( 1 , array ) ;
44787: LD_ADDR_VAR 0 4
44791: PUSH
44792: LD_INT 1
44794: PPUSH
44795: LD_VAR 0 1
44799: PPUSH
44800: CALL_OW 12
44804: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44805: LD_ADDR_VAR 0 2
44809: PUSH
44810: LD_VAR 0 2
44814: PPUSH
44815: LD_VAR 0 2
44819: PUSH
44820: LD_INT 1
44822: PLUS
44823: PPUSH
44824: LD_VAR 0 1
44828: PUSH
44829: LD_VAR 0 4
44833: ARRAY
44834: PPUSH
44835: CALL_OW 2
44839: ST_TO_ADDR
// array := Delete ( array , index ) ;
44840: LD_ADDR_VAR 0 1
44844: PUSH
44845: LD_VAR 0 1
44849: PPUSH
44850: LD_VAR 0 4
44854: PPUSH
44855: CALL_OW 3
44859: ST_TO_ADDR
// end ;
44860: GO 44784
44862: POP
44863: POP
// end ;
44864: LD_VAR 0 2
44868: RET
// export function GetBaseMaterials ( base ) ; begin
44869: LD_INT 0
44871: PPUSH
// result := [ 0 , 0 , 0 ] ;
44872: LD_ADDR_VAR 0 2
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: ST_TO_ADDR
// if not base then
44891: LD_VAR 0 1
44895: NOT
44896: IFFALSE 44900
// exit ;
44898: GO 44949
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44900: LD_ADDR_VAR 0 2
44904: PUSH
44905: LD_VAR 0 1
44909: PPUSH
44910: LD_INT 1
44912: PPUSH
44913: CALL_OW 275
44917: PUSH
44918: LD_VAR 0 1
44922: PPUSH
44923: LD_INT 2
44925: PPUSH
44926: CALL_OW 275
44930: PUSH
44931: LD_VAR 0 1
44935: PPUSH
44936: LD_INT 3
44938: PPUSH
44939: CALL_OW 275
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: LIST
44948: ST_TO_ADDR
// end ;
44949: LD_VAR 0 2
44953: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44954: LD_INT 0
44956: PPUSH
44957: PPUSH
// result := array ;
44958: LD_ADDR_VAR 0 3
44962: PUSH
44963: LD_VAR 0 1
44967: ST_TO_ADDR
// if size >= result then
44968: LD_VAR 0 2
44972: PUSH
44973: LD_VAR 0 3
44977: GREATEREQUAL
44978: IFFALSE 44982
// exit ;
44980: GO 45032
// if size then
44982: LD_VAR 0 2
44986: IFFALSE 45032
// for i := array downto size do
44988: LD_ADDR_VAR 0 4
44992: PUSH
44993: DOUBLE
44994: LD_VAR 0 1
44998: INC
44999: ST_TO_ADDR
45000: LD_VAR 0 2
45004: PUSH
45005: FOR_DOWNTO
45006: IFFALSE 45030
// result := Delete ( result , result ) ;
45008: LD_ADDR_VAR 0 3
45012: PUSH
45013: LD_VAR 0 3
45017: PPUSH
45018: LD_VAR 0 3
45022: PPUSH
45023: CALL_OW 3
45027: ST_TO_ADDR
45028: GO 45005
45030: POP
45031: POP
// end ;
45032: LD_VAR 0 3
45036: RET
// export function ComExit ( unit ) ; var tmp ; begin
45037: LD_INT 0
45039: PPUSH
45040: PPUSH
// if not IsInUnit ( unit ) then
45041: LD_VAR 0 1
45045: PPUSH
45046: CALL_OW 310
45050: NOT
45051: IFFALSE 45055
// exit ;
45053: GO 45115
// tmp := IsInUnit ( unit ) ;
45055: LD_ADDR_VAR 0 3
45059: PUSH
45060: LD_VAR 0 1
45064: PPUSH
45065: CALL_OW 310
45069: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
45070: LD_VAR 0 3
45074: PPUSH
45075: CALL_OW 247
45079: PUSH
45080: LD_INT 2
45082: EQUAL
45083: IFFALSE 45096
// ComExitVehicle ( unit ) else
45085: LD_VAR 0 1
45089: PPUSH
45090: CALL_OW 121
45094: GO 45105
// ComExitBuilding ( unit ) ;
45096: LD_VAR 0 1
45100: PPUSH
45101: CALL_OW 122
// result := tmp ;
45105: LD_ADDR_VAR 0 2
45109: PUSH
45110: LD_VAR 0 3
45114: ST_TO_ADDR
// end ;
45115: LD_VAR 0 2
45119: RET
// export function ComExitAll ( units ) ; var i ; begin
45120: LD_INT 0
45122: PPUSH
45123: PPUSH
// if not units then
45124: LD_VAR 0 1
45128: NOT
45129: IFFALSE 45133
// exit ;
45131: GO 45159
// for i in units do
45133: LD_ADDR_VAR 0 3
45137: PUSH
45138: LD_VAR 0 1
45142: PUSH
45143: FOR_IN
45144: IFFALSE 45157
// ComExit ( i ) ;
45146: LD_VAR 0 3
45150: PPUSH
45151: CALL 45037 0 1
45155: GO 45143
45157: POP
45158: POP
// end ;
45159: LD_VAR 0 2
45163: RET
// export function ResetHc ; begin
45164: LD_INT 0
45166: PPUSH
// InitHc ;
45167: CALL_OW 19
// hc_importance := 0 ;
45171: LD_ADDR_OWVAR 32
45175: PUSH
45176: LD_INT 0
45178: ST_TO_ADDR
// end ;
45179: LD_VAR 0 1
45183: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
45184: LD_INT 0
45186: PPUSH
45187: PPUSH
45188: PPUSH
// _x := ( x1 + x2 ) div 2 ;
45189: LD_ADDR_VAR 0 6
45193: PUSH
45194: LD_VAR 0 1
45198: PUSH
45199: LD_VAR 0 3
45203: PLUS
45204: PUSH
45205: LD_INT 2
45207: DIV
45208: ST_TO_ADDR
// if _x < 0 then
45209: LD_VAR 0 6
45213: PUSH
45214: LD_INT 0
45216: LESS
45217: IFFALSE 45234
// _x := _x * - 1 ;
45219: LD_ADDR_VAR 0 6
45223: PUSH
45224: LD_VAR 0 6
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: MUL
45233: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
45234: LD_ADDR_VAR 0 7
45238: PUSH
45239: LD_VAR 0 2
45243: PUSH
45244: LD_VAR 0 4
45248: PLUS
45249: PUSH
45250: LD_INT 2
45252: DIV
45253: ST_TO_ADDR
// if _y < 0 then
45254: LD_VAR 0 7
45258: PUSH
45259: LD_INT 0
45261: LESS
45262: IFFALSE 45279
// _y := _y * - 1 ;
45264: LD_ADDR_VAR 0 7
45268: PUSH
45269: LD_VAR 0 7
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: MUL
45278: ST_TO_ADDR
// result := [ _x , _y ] ;
45279: LD_ADDR_VAR 0 5
45283: PUSH
45284: LD_VAR 0 6
45288: PUSH
45289: LD_VAR 0 7
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// end ;
45298: LD_VAR 0 5
45302: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
45303: LD_INT 0
45305: PPUSH
45306: PPUSH
45307: PPUSH
45308: PPUSH
// task := GetTaskList ( unit ) ;
45309: LD_ADDR_VAR 0 7
45313: PUSH
45314: LD_VAR 0 1
45318: PPUSH
45319: CALL_OW 437
45323: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
45324: LD_VAR 0 7
45328: NOT
45329: IFFALSE 45348
45331: PUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: LD_VAR 0 2
45341: PPUSH
45342: CALL_OW 308
45346: NOT
45347: AND
45348: IFFALSE 45352
// exit ;
45350: GO 45470
// if IsInArea ( unit , area ) then
45352: LD_VAR 0 1
45356: PPUSH
45357: LD_VAR 0 2
45361: PPUSH
45362: CALL_OW 308
45366: IFFALSE 45384
// begin ComMoveToArea ( unit , goAway ) ;
45368: LD_VAR 0 1
45372: PPUSH
45373: LD_VAR 0 3
45377: PPUSH
45378: CALL_OW 113
// exit ;
45382: GO 45470
// end ; if task [ 1 ] [ 1 ] <> M then
45384: LD_VAR 0 7
45388: PUSH
45389: LD_INT 1
45391: ARRAY
45392: PUSH
45393: LD_INT 1
45395: ARRAY
45396: PUSH
45397: LD_STRING M
45399: NONEQUAL
45400: IFFALSE 45404
// exit ;
45402: GO 45470
// x := task [ 1 ] [ 2 ] ;
45404: LD_ADDR_VAR 0 5
45408: PUSH
45409: LD_VAR 0 7
45413: PUSH
45414: LD_INT 1
45416: ARRAY
45417: PUSH
45418: LD_INT 2
45420: ARRAY
45421: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
45422: LD_ADDR_VAR 0 6
45426: PUSH
45427: LD_VAR 0 7
45431: PUSH
45432: LD_INT 1
45434: ARRAY
45435: PUSH
45436: LD_INT 3
45438: ARRAY
45439: ST_TO_ADDR
// if InArea ( x , y , area ) then
45440: LD_VAR 0 5
45444: PPUSH
45445: LD_VAR 0 6
45449: PPUSH
45450: LD_VAR 0 2
45454: PPUSH
45455: CALL_OW 309
45459: IFFALSE 45470
// ComStop ( unit ) ;
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 141
// end ;
45470: LD_VAR 0 4
45474: RET
// export function Abs ( value ) ; begin
45475: LD_INT 0
45477: PPUSH
// result := value ;
45478: LD_ADDR_VAR 0 2
45482: PUSH
45483: LD_VAR 0 1
45487: ST_TO_ADDR
// if value < 0 then
45488: LD_VAR 0 1
45492: PUSH
45493: LD_INT 0
45495: LESS
45496: IFFALSE 45513
// result := value * - 1 ;
45498: LD_ADDR_VAR 0 2
45502: PUSH
45503: LD_VAR 0 1
45507: PUSH
45508: LD_INT 1
45510: NEG
45511: MUL
45512: ST_TO_ADDR
// end ;
45513: LD_VAR 0 2
45517: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45518: LD_INT 0
45520: PPUSH
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
// if not unit or not building then
45528: LD_VAR 0 1
45532: NOT
45533: IFTRUE 45542
45535: PUSH
45536: LD_VAR 0 2
45540: NOT
45541: OR
45542: IFFALSE 45546
// exit ;
45544: GO 45774
// x := GetX ( building ) ;
45546: LD_ADDR_VAR 0 4
45550: PUSH
45551: LD_VAR 0 2
45555: PPUSH
45556: CALL_OW 250
45560: ST_TO_ADDR
// y := GetY ( building ) ;
45561: LD_ADDR_VAR 0 6
45565: PUSH
45566: LD_VAR 0 2
45570: PPUSH
45571: CALL_OW 251
45575: ST_TO_ADDR
// d := GetDir ( building ) ;
45576: LD_ADDR_VAR 0 8
45580: PUSH
45581: LD_VAR 0 2
45585: PPUSH
45586: CALL_OW 254
45590: ST_TO_ADDR
// r := 4 ;
45591: LD_ADDR_VAR 0 9
45595: PUSH
45596: LD_INT 4
45598: ST_TO_ADDR
// for i := 1 to 5 do
45599: LD_ADDR_VAR 0 10
45603: PUSH
45604: DOUBLE
45605: LD_INT 1
45607: DEC
45608: ST_TO_ADDR
45609: LD_INT 5
45611: PUSH
45612: FOR_TO
45613: IFFALSE 45772
// begin _x := ShiftX ( x , d , r + i ) ;
45615: LD_ADDR_VAR 0 5
45619: PUSH
45620: LD_VAR 0 4
45624: PPUSH
45625: LD_VAR 0 8
45629: PPUSH
45630: LD_VAR 0 9
45634: PUSH
45635: LD_VAR 0 10
45639: PLUS
45640: PPUSH
45641: CALL_OW 272
45645: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45646: LD_ADDR_VAR 0 7
45650: PUSH
45651: LD_VAR 0 6
45655: PPUSH
45656: LD_VAR 0 8
45660: PPUSH
45661: LD_VAR 0 9
45665: PUSH
45666: LD_VAR 0 10
45670: PLUS
45671: PPUSH
45672: CALL_OW 273
45676: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45677: LD_VAR 0 5
45681: PPUSH
45682: LD_VAR 0 7
45686: PPUSH
45687: CALL_OW 488
45691: IFFALSE 45726
45693: PUSH
45694: LD_VAR 0 5
45698: PPUSH
45699: LD_VAR 0 7
45703: PPUSH
45704: CALL_OW 428
45708: PPUSH
45709: CALL_OW 247
45713: PUSH
45714: LD_INT 3
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: IN
45724: NOT
45725: AND
45726: IFFALSE 45770
// begin ComMoveXY ( unit , _x , _y ) ;
45728: LD_VAR 0 1
45732: PPUSH
45733: LD_VAR 0 5
45737: PPUSH
45738: LD_VAR 0 7
45742: PPUSH
45743: CALL_OW 111
// result := [ _x , _y ] ;
45747: LD_ADDR_VAR 0 3
45751: PUSH
45752: LD_VAR 0 5
45756: PUSH
45757: LD_VAR 0 7
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: ST_TO_ADDR
// exit ;
45766: POP
45767: POP
45768: GO 45774
// end ; end ;
45770: GO 45612
45772: POP
45773: POP
// end ;
45774: LD_VAR 0 3
45778: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45779: LD_INT 0
45781: PPUSH
45782: PPUSH
45783: PPUSH
// result := 0 ;
45784: LD_ADDR_VAR 0 3
45788: PUSH
45789: LD_INT 0
45791: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45792: LD_VAR 0 1
45796: PUSH
45797: LD_INT 0
45799: LESS
45800: IFTRUE 45812
45802: PUSH
45803: LD_VAR 0 1
45807: PUSH
45808: LD_INT 8
45810: GREATER
45811: OR
45812: IFTRUE 45824
45814: PUSH
45815: LD_VAR 0 2
45819: PUSH
45820: LD_INT 0
45822: LESS
45823: OR
45824: IFTRUE 45836
45826: PUSH
45827: LD_VAR 0 2
45831: PUSH
45832: LD_INT 8
45834: GREATER
45835: OR
45836: IFFALSE 45840
// exit ;
45838: GO 45915
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45840: LD_ADDR_VAR 0 4
45844: PUSH
45845: LD_INT 22
45847: PUSH
45848: LD_VAR 0 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PPUSH
45857: CALL_OW 69
45861: PUSH
45862: FOR_IN
45863: IFFALSE 45913
// begin un := UnitShoot ( i ) ;
45865: LD_ADDR_VAR 0 5
45869: PUSH
45870: LD_VAR 0 4
45874: PPUSH
45875: CALL_OW 504
45879: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45880: LD_VAR 0 5
45884: PPUSH
45885: CALL_OW 255
45889: PUSH
45890: LD_VAR 0 1
45894: EQUAL
45895: IFFALSE 45911
// begin result := un ;
45897: LD_ADDR_VAR 0 3
45901: PUSH
45902: LD_VAR 0 5
45906: ST_TO_ADDR
// exit ;
45907: POP
45908: POP
45909: GO 45915
// end ; end ;
45911: GO 45862
45913: POP
45914: POP
// end ;
45915: LD_VAR 0 3
45919: RET
// export function GetCargoBay ( units ) ; begin
45920: LD_INT 0
45922: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45923: LD_ADDR_VAR 0 2
45927: PUSH
45928: LD_VAR 0 1
45932: PPUSH
45933: LD_INT 2
45935: PUSH
45936: LD_INT 34
45938: PUSH
45939: LD_INT 12
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 34
45948: PUSH
45949: LD_INT 51
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 34
45958: PUSH
45959: LD_INT 32
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 34
45968: PUSH
45969: LD_INT 89
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: PPUSH
45983: CALL_OW 72
45987: ST_TO_ADDR
// end ;
45988: LD_VAR 0 2
45992: RET
// export function Negate ( value ) ; begin
45993: LD_INT 0
45995: PPUSH
// result := not value ;
45996: LD_ADDR_VAR 0 2
46000: PUSH
46001: LD_VAR 0 1
46005: NOT
46006: ST_TO_ADDR
// end ;
46007: LD_VAR 0 2
46011: RET
// export function Inc ( value ) ; begin
46012: LD_INT 0
46014: PPUSH
// result := value + 1 ;
46015: LD_ADDR_VAR 0 2
46019: PUSH
46020: LD_VAR 0 1
46024: PUSH
46025: LD_INT 1
46027: PLUS
46028: ST_TO_ADDR
// end ;
46029: LD_VAR 0 2
46033: RET
// export function Dec ( value ) ; begin
46034: LD_INT 0
46036: PPUSH
// result := value - 1 ;
46037: LD_ADDR_VAR 0 2
46041: PUSH
46042: LD_VAR 0 1
46046: PUSH
46047: LD_INT 1
46049: MINUS
46050: ST_TO_ADDR
// end ;
46051: LD_VAR 0 2
46055: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
46056: LD_INT 0
46058: PPUSH
46059: PPUSH
46060: PPUSH
46061: PPUSH
46062: PPUSH
46063: PPUSH
46064: PPUSH
46065: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
46066: LD_VAR 0 1
46070: PPUSH
46071: LD_VAR 0 2
46075: PPUSH
46076: CALL_OW 488
46080: NOT
46081: IFTRUE 46100
46083: PUSH
46084: LD_VAR 0 3
46088: PPUSH
46089: LD_VAR 0 4
46093: PPUSH
46094: CALL_OW 488
46098: NOT
46099: OR
46100: IFFALSE 46113
// begin result := - 1 ;
46102: LD_ADDR_VAR 0 5
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: ST_TO_ADDR
// exit ;
46111: GO 46348
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
46113: LD_ADDR_VAR 0 12
46117: PUSH
46118: LD_VAR 0 1
46122: PPUSH
46123: LD_VAR 0 2
46127: PPUSH
46128: LD_VAR 0 3
46132: PPUSH
46133: LD_VAR 0 4
46137: PPUSH
46138: CALL 45184 0 4
46142: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
46143: LD_ADDR_VAR 0 11
46147: PUSH
46148: LD_VAR 0 1
46152: PPUSH
46153: LD_VAR 0 2
46157: PPUSH
46158: LD_VAR 0 12
46162: PUSH
46163: LD_INT 1
46165: ARRAY
46166: PPUSH
46167: LD_VAR 0 12
46171: PUSH
46172: LD_INT 2
46174: ARRAY
46175: PPUSH
46176: CALL_OW 298
46180: ST_TO_ADDR
// distance := 9999 ;
46181: LD_ADDR_VAR 0 10
46185: PUSH
46186: LD_INT 9999
46188: ST_TO_ADDR
// for i := 0 to 5 do
46189: LD_ADDR_VAR 0 6
46193: PUSH
46194: DOUBLE
46195: LD_INT 0
46197: DEC
46198: ST_TO_ADDR
46199: LD_INT 5
46201: PUSH
46202: FOR_TO
46203: IFFALSE 46346
// begin _x := ShiftX ( x1 , i , centerDist ) ;
46205: LD_ADDR_VAR 0 7
46209: PUSH
46210: LD_VAR 0 1
46214: PPUSH
46215: LD_VAR 0 6
46219: PPUSH
46220: LD_VAR 0 11
46224: PPUSH
46225: CALL_OW 272
46229: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
46230: LD_ADDR_VAR 0 8
46234: PUSH
46235: LD_VAR 0 2
46239: PPUSH
46240: LD_VAR 0 6
46244: PPUSH
46245: LD_VAR 0 11
46249: PPUSH
46250: CALL_OW 273
46254: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46255: LD_VAR 0 7
46259: PPUSH
46260: LD_VAR 0 8
46264: PPUSH
46265: CALL_OW 488
46269: NOT
46270: IFFALSE 46274
// continue ;
46272: GO 46202
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
46274: LD_ADDR_VAR 0 9
46278: PUSH
46279: LD_VAR 0 12
46283: PUSH
46284: LD_INT 1
46286: ARRAY
46287: PPUSH
46288: LD_VAR 0 12
46292: PUSH
46293: LD_INT 2
46295: ARRAY
46296: PPUSH
46297: LD_VAR 0 7
46301: PPUSH
46302: LD_VAR 0 8
46306: PPUSH
46307: CALL_OW 298
46311: ST_TO_ADDR
// if tmp < distance then
46312: LD_VAR 0 9
46316: PUSH
46317: LD_VAR 0 10
46321: LESS
46322: IFFALSE 46344
// begin result := i ;
46324: LD_ADDR_VAR 0 5
46328: PUSH
46329: LD_VAR 0 6
46333: ST_TO_ADDR
// distance := tmp ;
46334: LD_ADDR_VAR 0 10
46338: PUSH
46339: LD_VAR 0 9
46343: ST_TO_ADDR
// end ; end ;
46344: GO 46202
46346: POP
46347: POP
// end ;
46348: LD_VAR 0 5
46352: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46353: LD_INT 0
46355: PPUSH
46356: PPUSH
// if not driver or not IsInUnit ( driver ) then
46357: LD_VAR 0 1
46361: NOT
46362: IFTRUE 46376
46364: PUSH
46365: LD_VAR 0 1
46369: PPUSH
46370: CALL_OW 310
46374: NOT
46375: OR
46376: IFFALSE 46380
// exit ;
46378: GO 46470
// vehicle := IsInUnit ( driver ) ;
46380: LD_ADDR_VAR 0 3
46384: PUSH
46385: LD_VAR 0 1
46389: PPUSH
46390: CALL_OW 310
46394: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46395: LD_VAR 0 1
46399: PPUSH
46400: LD_STRING \
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 0
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: LD_INT 0
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: PUSH
46430: LD_STRING E
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_VAR 0 3
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PPUSH
46466: CALL_OW 446
// end ;
46470: LD_VAR 0 2
46474: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
46475: LD_INT 0
46477: PPUSH
46478: PPUSH
// if not driver or not IsInUnit ( driver ) then
46479: LD_VAR 0 1
46483: NOT
46484: IFTRUE 46498
46486: PUSH
46487: LD_VAR 0 1
46491: PPUSH
46492: CALL_OW 310
46496: NOT
46497: OR
46498: IFFALSE 46502
// exit ;
46500: GO 46592
// vehicle := IsInUnit ( driver ) ;
46502: LD_ADDR_VAR 0 3
46506: PUSH
46507: LD_VAR 0 1
46511: PPUSH
46512: CALL_OW 310
46516: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46517: LD_VAR 0 1
46521: PPUSH
46522: LD_STRING \
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: PUSH
46552: LD_STRING E
46554: PUSH
46555: LD_INT 0
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_VAR 0 3
46565: PUSH
46566: LD_INT 0
46568: PUSH
46569: LD_INT 0
46571: PUSH
46572: LD_INT 0
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PPUSH
46588: CALL_OW 447
// end ;
46592: LD_VAR 0 2
46596: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46597: LD_INT 0
46599: PPUSH
46600: PPUSH
46601: PPUSH
// tmp := [ ] ;
46602: LD_ADDR_VAR 0 5
46606: PUSH
46607: EMPTY
46608: ST_TO_ADDR
// for i in units do
46609: LD_ADDR_VAR 0 4
46613: PUSH
46614: LD_VAR 0 1
46618: PUSH
46619: FOR_IN
46620: IFFALSE 46658
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46622: LD_ADDR_VAR 0 5
46626: PUSH
46627: LD_VAR 0 5
46631: PPUSH
46632: LD_VAR 0 5
46636: PUSH
46637: LD_INT 1
46639: PLUS
46640: PPUSH
46641: LD_VAR 0 4
46645: PPUSH
46646: CALL_OW 256
46650: PPUSH
46651: CALL_OW 2
46655: ST_TO_ADDR
46656: GO 46619
46658: POP
46659: POP
// if not tmp then
46660: LD_VAR 0 5
46664: NOT
46665: IFFALSE 46669
// exit ;
46667: GO 46717
// if asc then
46669: LD_VAR 0 2
46673: IFFALSE 46697
// result := SortListByListAsc ( units , tmp ) else
46675: LD_ADDR_VAR 0 3
46679: PUSH
46680: LD_VAR 0 1
46684: PPUSH
46685: LD_VAR 0 5
46689: PPUSH
46690: CALL_OW 76
46694: ST_TO_ADDR
46695: GO 46717
// result := SortListByListDesc ( units , tmp ) ;
46697: LD_ADDR_VAR 0 3
46701: PUSH
46702: LD_VAR 0 1
46706: PPUSH
46707: LD_VAR 0 5
46711: PPUSH
46712: CALL_OW 77
46716: ST_TO_ADDR
// end ;
46717: LD_VAR 0 3
46721: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46722: LD_INT 0
46724: PPUSH
46725: PPUSH
// task := GetTaskList ( mech ) ;
46726: LD_ADDR_VAR 0 4
46730: PUSH
46731: LD_VAR 0 1
46735: PPUSH
46736: CALL_OW 437
46740: ST_TO_ADDR
// if not task then
46741: LD_VAR 0 4
46745: NOT
46746: IFFALSE 46750
// exit ;
46748: GO 46794
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46750: LD_ADDR_VAR 0 3
46754: PUSH
46755: LD_VAR 0 4
46759: PUSH
46760: LD_INT 1
46762: ARRAY
46763: PUSH
46764: LD_INT 1
46766: ARRAY
46767: PUSH
46768: LD_STRING r
46770: EQUAL
46771: IFFALSE 46793
46773: PUSH
46774: LD_VAR 0 4
46778: PUSH
46779: LD_INT 1
46781: ARRAY
46782: PUSH
46783: LD_INT 4
46785: ARRAY
46786: PUSH
46787: LD_VAR 0 2
46791: EQUAL
46792: AND
46793: ST_TO_ADDR
// end ;
46794: LD_VAR 0 3
46798: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46799: LD_INT 0
46801: PPUSH
// SetDir ( unit , d ) ;
46802: LD_VAR 0 1
46806: PPUSH
46807: LD_VAR 0 4
46811: PPUSH
46812: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
46816: LD_ADDR_VAR 0 6
46820: PUSH
46821: LD_VAR 0 1
46825: PPUSH
46826: LD_VAR 0 2
46830: PPUSH
46831: LD_VAR 0 3
46835: PPUSH
46836: LD_VAR 0 5
46840: PPUSH
46841: CALL_OW 48
46845: ST_TO_ADDR
// end ;
46846: LD_VAR 0 6
46850: RET
// export function ToNaturalNumber ( number ) ; begin
46851: LD_INT 0
46853: PPUSH
// result := number div 1 ;
46854: LD_ADDR_VAR 0 2
46858: PUSH
46859: LD_VAR 0 1
46863: PUSH
46864: LD_INT 1
46866: DIV
46867: ST_TO_ADDR
// if number < 0 then
46868: LD_VAR 0 1
46872: PUSH
46873: LD_INT 0
46875: LESS
46876: IFFALSE 46886
// result := 0 ;
46878: LD_ADDR_VAR 0 2
46882: PUSH
46883: LD_INT 0
46885: ST_TO_ADDR
// end ;
46886: LD_VAR 0 2
46890: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
46891: LD_INT 0
46893: PPUSH
46894: PPUSH
46895: PPUSH
// if not buildings then
46896: LD_VAR 0 1
46900: NOT
46901: IFFALSE 46905
// exit ;
46903: GO 47020
// tmp := [ ] ;
46905: LD_ADDR_VAR 0 5
46909: PUSH
46910: EMPTY
46911: ST_TO_ADDR
// for b in buildings do
46912: LD_ADDR_VAR 0 4
46916: PUSH
46917: LD_VAR 0 1
46921: PUSH
46922: FOR_IN
46923: IFFALSE 46961
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
46925: LD_ADDR_VAR 0 5
46929: PUSH
46930: LD_VAR 0 5
46934: PPUSH
46935: LD_VAR 0 5
46939: PUSH
46940: LD_INT 1
46942: PLUS
46943: PPUSH
46944: LD_VAR 0 4
46948: PPUSH
46949: CALL_OW 266
46953: PPUSH
46954: CALL_OW 1
46958: ST_TO_ADDR
46959: GO 46922
46961: POP
46962: POP
// if not tmp then
46963: LD_VAR 0 5
46967: NOT
46968: IFFALSE 46972
// exit ;
46970: GO 47020
// if asc then
46972: LD_VAR 0 2
46976: IFFALSE 47000
// result := SortListByListAsc ( buildings , tmp ) else
46978: LD_ADDR_VAR 0 3
46982: PUSH
46983: LD_VAR 0 1
46987: PPUSH
46988: LD_VAR 0 5
46992: PPUSH
46993: CALL_OW 76
46997: ST_TO_ADDR
46998: GO 47020
// result := SortListByListDesc ( buildings , tmp ) ;
47000: LD_ADDR_VAR 0 3
47004: PUSH
47005: LD_VAR 0 1
47009: PPUSH
47010: LD_VAR 0 5
47014: PPUSH
47015: CALL_OW 77
47019: ST_TO_ADDR
// end ;
47020: LD_VAR 0 3
47024: RET
// export function SortByClass ( units , class ) ; var un ; begin
47025: LD_INT 0
47027: PPUSH
47028: PPUSH
// if not units or not class then
47029: LD_VAR 0 1
47033: NOT
47034: IFTRUE 47043
47036: PUSH
47037: LD_VAR 0 2
47041: NOT
47042: OR
47043: IFFALSE 47047
// exit ;
47045: GO 47142
// result := [ ] ;
47047: LD_ADDR_VAR 0 3
47051: PUSH
47052: EMPTY
47053: ST_TO_ADDR
// for un in units do
47054: LD_ADDR_VAR 0 4
47058: PUSH
47059: LD_VAR 0 1
47063: PUSH
47064: FOR_IN
47065: IFFALSE 47140
// if GetClass ( un ) = class then
47067: LD_VAR 0 4
47071: PPUSH
47072: CALL_OW 257
47076: PUSH
47077: LD_VAR 0 2
47081: EQUAL
47082: IFFALSE 47109
// result := Insert ( result , 1 , un ) else
47084: LD_ADDR_VAR 0 3
47088: PUSH
47089: LD_VAR 0 3
47093: PPUSH
47094: LD_INT 1
47096: PPUSH
47097: LD_VAR 0 4
47101: PPUSH
47102: CALL_OW 2
47106: ST_TO_ADDR
47107: GO 47138
// result := Replace ( result , result + 1 , un ) ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_VAR 0 3
47118: PPUSH
47119: LD_VAR 0 3
47123: PUSH
47124: LD_INT 1
47126: PLUS
47127: PPUSH
47128: LD_VAR 0 4
47132: PPUSH
47133: CALL_OW 1
47137: ST_TO_ADDR
47138: GO 47064
47140: POP
47141: POP
// end ;
47142: LD_VAR 0 3
47146: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
47147: LD_INT 0
47149: PPUSH
47150: PPUSH
47151: PPUSH
47152: PPUSH
47153: PPUSH
47154: PPUSH
47155: PPUSH
// result := [ ] ;
47156: LD_ADDR_VAR 0 4
47160: PUSH
47161: EMPTY
47162: ST_TO_ADDR
// if x - r < 0 then
47163: LD_VAR 0 1
47167: PUSH
47168: LD_VAR 0 3
47172: MINUS
47173: PUSH
47174: LD_INT 0
47176: LESS
47177: IFFALSE 47189
// min_x := 0 else
47179: LD_ADDR_VAR 0 8
47183: PUSH
47184: LD_INT 0
47186: ST_TO_ADDR
47187: GO 47205
// min_x := x - r ;
47189: LD_ADDR_VAR 0 8
47193: PUSH
47194: LD_VAR 0 1
47198: PUSH
47199: LD_VAR 0 3
47203: MINUS
47204: ST_TO_ADDR
// if y - r < 0 then
47205: LD_VAR 0 2
47209: PUSH
47210: LD_VAR 0 3
47214: MINUS
47215: PUSH
47216: LD_INT 0
47218: LESS
47219: IFFALSE 47231
// min_y := 0 else
47221: LD_ADDR_VAR 0 7
47225: PUSH
47226: LD_INT 0
47228: ST_TO_ADDR
47229: GO 47247
// min_y := y - r ;
47231: LD_ADDR_VAR 0 7
47235: PUSH
47236: LD_VAR 0 2
47240: PUSH
47241: LD_VAR 0 3
47245: MINUS
47246: ST_TO_ADDR
// max_x := x + r ;
47247: LD_ADDR_VAR 0 9
47251: PUSH
47252: LD_VAR 0 1
47256: PUSH
47257: LD_VAR 0 3
47261: PLUS
47262: ST_TO_ADDR
// max_y := y + r ;
47263: LD_ADDR_VAR 0 10
47267: PUSH
47268: LD_VAR 0 2
47272: PUSH
47273: LD_VAR 0 3
47277: PLUS
47278: ST_TO_ADDR
// for _x = min_x to max_x do
47279: LD_ADDR_VAR 0 5
47283: PUSH
47284: DOUBLE
47285: LD_VAR 0 8
47289: DEC
47290: ST_TO_ADDR
47291: LD_VAR 0 9
47295: PUSH
47296: FOR_TO
47297: IFFALSE 47398
// for _y = min_y to max_y do
47299: LD_ADDR_VAR 0 6
47303: PUSH
47304: DOUBLE
47305: LD_VAR 0 7
47309: DEC
47310: ST_TO_ADDR
47311: LD_VAR 0 10
47315: PUSH
47316: FOR_TO
47317: IFFALSE 47394
// begin if not ValidHex ( _x , _y ) then
47319: LD_VAR 0 5
47323: PPUSH
47324: LD_VAR 0 6
47328: PPUSH
47329: CALL_OW 488
47333: NOT
47334: IFFALSE 47338
// continue ;
47336: GO 47316
// if GetResourceTypeXY ( _x , _y ) then
47338: LD_VAR 0 5
47342: PPUSH
47343: LD_VAR 0 6
47347: PPUSH
47348: CALL_OW 283
47352: IFFALSE 47392
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
47354: LD_ADDR_VAR 0 4
47358: PUSH
47359: LD_VAR 0 4
47363: PPUSH
47364: LD_VAR 0 4
47368: PUSH
47369: LD_INT 1
47371: PLUS
47372: PPUSH
47373: LD_VAR 0 5
47377: PUSH
47378: LD_VAR 0 6
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PPUSH
47387: CALL_OW 1
47391: ST_TO_ADDR
// end ;
47392: GO 47316
47394: POP
47395: POP
47396: GO 47296
47398: POP
47399: POP
// end ;
47400: LD_VAR 0 4
47404: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
47405: LD_INT 0
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
47413: PPUSH
47414: PPUSH
// if not units then
47415: LD_VAR 0 1
47419: NOT
47420: IFFALSE 47424
// exit ;
47422: GO 47956
// result := UnitFilter ( units , [ f_ok ] ) ;
47424: LD_ADDR_VAR 0 3
47428: PUSH
47429: LD_VAR 0 1
47433: PPUSH
47434: LD_INT 50
47436: PUSH
47437: EMPTY
47438: LIST
47439: PPUSH
47440: CALL_OW 72
47444: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
47445: LD_ADDR_VAR 0 8
47449: PUSH
47450: LD_VAR 0 1
47454: PUSH
47455: LD_INT 1
47457: ARRAY
47458: PPUSH
47459: CALL_OW 255
47463: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
47464: LD_ADDR_VAR 0 10
47468: PUSH
47469: LD_INT 29
47471: PUSH
47472: LD_INT 91
47474: PUSH
47475: LD_INT 49
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// if not result then
47483: LD_VAR 0 3
47487: NOT
47488: IFFALSE 47492
// exit ;
47490: GO 47956
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
47492: LD_ADDR_VAR 0 5
47496: PUSH
47497: LD_INT 81
47499: PUSH
47500: LD_VAR 0 8
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PPUSH
47509: CALL_OW 69
47513: ST_TO_ADDR
// for i in result do
47514: LD_ADDR_VAR 0 4
47518: PUSH
47519: LD_VAR 0 3
47523: PUSH
47524: FOR_IN
47525: IFFALSE 47954
// begin tag := GetTag ( i ) + 1 ;
47527: LD_ADDR_VAR 0 9
47531: PUSH
47532: LD_VAR 0 4
47536: PPUSH
47537: CALL_OW 110
47541: PUSH
47542: LD_INT 1
47544: PLUS
47545: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
47546: LD_ADDR_VAR 0 7
47550: PUSH
47551: LD_VAR 0 4
47555: PPUSH
47556: CALL_OW 250
47560: PPUSH
47561: LD_VAR 0 4
47565: PPUSH
47566: CALL_OW 251
47570: PPUSH
47571: LD_INT 4
47573: PPUSH
47574: CALL 47147 0 3
47578: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
47579: LD_VAR 0 4
47583: PPUSH
47584: CALL_OW 247
47588: PUSH
47589: LD_INT 2
47591: EQUAL
47592: IFFALSE 47604
47594: PUSH
47595: LD_VAR 0 7
47599: PUSH
47600: LD_INT 2
47602: GREATER
47603: AND
47604: IFFALSE 47624
47606: PUSH
47607: LD_VAR 0 4
47611: PPUSH
47612: CALL_OW 264
47616: PUSH
47617: LD_VAR 0 10
47621: IN
47622: NOT
47623: AND
47624: IFFALSE 47663
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
47626: LD_VAR 0 4
47630: PPUSH
47631: LD_VAR 0 7
47635: PUSH
47636: LD_INT 1
47638: ARRAY
47639: PUSH
47640: LD_INT 1
47642: ARRAY
47643: PPUSH
47644: LD_VAR 0 7
47648: PUSH
47649: LD_INT 1
47651: ARRAY
47652: PUSH
47653: LD_INT 2
47655: ARRAY
47656: PPUSH
47657: CALL_OW 116
47661: GO 47952
// if path > tag then
47663: LD_VAR 0 2
47667: PUSH
47668: LD_VAR 0 9
47672: GREATER
47673: IFFALSE 47881
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
47675: LD_ADDR_VAR 0 6
47679: PUSH
47680: LD_VAR 0 5
47684: PPUSH
47685: LD_INT 91
47687: PUSH
47688: LD_VAR 0 4
47692: PUSH
47693: LD_INT 8
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: LIST
47700: PPUSH
47701: CALL_OW 72
47705: ST_TO_ADDR
// if nearEnemy then
47706: LD_VAR 0 6
47710: IFFALSE 47779
// begin if GetWeapon ( i ) = ru_time_lapser then
47712: LD_VAR 0 4
47716: PPUSH
47717: CALL_OW 264
47721: PUSH
47722: LD_INT 49
47724: EQUAL
47725: IFFALSE 47753
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47727: LD_VAR 0 4
47731: PPUSH
47732: LD_VAR 0 6
47736: PPUSH
47737: LD_VAR 0 4
47741: PPUSH
47742: CALL_OW 74
47746: PPUSH
47747: CALL_OW 112
47751: GO 47777
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
47753: LD_VAR 0 4
47757: PPUSH
47758: LD_VAR 0 6
47762: PPUSH
47763: LD_VAR 0 4
47767: PPUSH
47768: CALL_OW 74
47772: PPUSH
47773: CALL 49037 0 2
// end else
47777: GO 47879
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47779: LD_VAR 0 4
47783: PPUSH
47784: LD_VAR 0 2
47788: PUSH
47789: LD_VAR 0 9
47793: ARRAY
47794: PUSH
47795: LD_INT 1
47797: ARRAY
47798: PPUSH
47799: LD_VAR 0 2
47803: PUSH
47804: LD_VAR 0 9
47808: ARRAY
47809: PUSH
47810: LD_INT 2
47812: ARRAY
47813: PPUSH
47814: CALL_OW 297
47818: PUSH
47819: LD_INT 6
47821: GREATER
47822: IFFALSE 47865
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47824: LD_VAR 0 4
47828: PPUSH
47829: LD_VAR 0 2
47833: PUSH
47834: LD_VAR 0 9
47838: ARRAY
47839: PUSH
47840: LD_INT 1
47842: ARRAY
47843: PPUSH
47844: LD_VAR 0 2
47848: PUSH
47849: LD_VAR 0 9
47853: ARRAY
47854: PUSH
47855: LD_INT 2
47857: ARRAY
47858: PPUSH
47859: CALL_OW 114
47863: GO 47879
// SetTag ( i , tag ) ;
47865: LD_VAR 0 4
47869: PPUSH
47870: LD_VAR 0 9
47874: PPUSH
47875: CALL_OW 109
// end else
47879: GO 47952
// if enemy then
47881: LD_VAR 0 5
47885: IFFALSE 47952
// begin if GetWeapon ( i ) = ru_time_lapser then
47887: LD_VAR 0 4
47891: PPUSH
47892: CALL_OW 264
47896: PUSH
47897: LD_INT 49
47899: EQUAL
47900: IFFALSE 47928
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47902: LD_VAR 0 4
47906: PPUSH
47907: LD_VAR 0 5
47911: PPUSH
47912: LD_VAR 0 4
47916: PPUSH
47917: CALL_OW 74
47921: PPUSH
47922: CALL_OW 112
47926: GO 47952
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47928: LD_VAR 0 4
47932: PPUSH
47933: LD_VAR 0 5
47937: PPUSH
47938: LD_VAR 0 4
47942: PPUSH
47943: CALL_OW 74
47947: PPUSH
47948: CALL 49037 0 2
// end ; end ;
47952: GO 47524
47954: POP
47955: POP
// end ;
47956: LD_VAR 0 3
47960: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47961: LD_INT 0
47963: PPUSH
47964: PPUSH
47965: PPUSH
// if not unit or IsInUnit ( unit ) then
47966: LD_VAR 0 1
47970: NOT
47971: IFTRUE 47984
47973: PUSH
47974: LD_VAR 0 1
47978: PPUSH
47979: CALL_OW 310
47983: OR
47984: IFFALSE 47988
// exit ;
47986: GO 48079
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47988: LD_ADDR_VAR 0 4
47992: PUSH
47993: LD_VAR 0 1
47997: PPUSH
47998: CALL_OW 250
48002: PPUSH
48003: LD_VAR 0 2
48007: PPUSH
48008: LD_INT 1
48010: PPUSH
48011: CALL_OW 272
48015: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
48016: LD_ADDR_VAR 0 5
48020: PUSH
48021: LD_VAR 0 1
48025: PPUSH
48026: CALL_OW 251
48030: PPUSH
48031: LD_VAR 0 2
48035: PPUSH
48036: LD_INT 1
48038: PPUSH
48039: CALL_OW 273
48043: ST_TO_ADDR
// if ValidHex ( x , y ) then
48044: LD_VAR 0 4
48048: PPUSH
48049: LD_VAR 0 5
48053: PPUSH
48054: CALL_OW 488
48058: IFFALSE 48079
// ComTurnXY ( unit , x , y ) ;
48060: LD_VAR 0 1
48064: PPUSH
48065: LD_VAR 0 4
48069: PPUSH
48070: LD_VAR 0 5
48074: PPUSH
48075: CALL_OW 118
// end ;
48079: LD_VAR 0 3
48083: RET
// export function SeeUnits ( side , units ) ; var i ; begin
48084: LD_INT 0
48086: PPUSH
48087: PPUSH
// result := false ;
48088: LD_ADDR_VAR 0 3
48092: PUSH
48093: LD_INT 0
48095: ST_TO_ADDR
// if not units then
48096: LD_VAR 0 2
48100: NOT
48101: IFFALSE 48105
// exit ;
48103: GO 48150
// for i in units do
48105: LD_ADDR_VAR 0 4
48109: PUSH
48110: LD_VAR 0 2
48114: PUSH
48115: FOR_IN
48116: IFFALSE 48148
// if See ( side , i ) then
48118: LD_VAR 0 1
48122: PPUSH
48123: LD_VAR 0 4
48127: PPUSH
48128: CALL_OW 292
48132: IFFALSE 48146
// begin result := true ;
48134: LD_ADDR_VAR 0 3
48138: PUSH
48139: LD_INT 1
48141: ST_TO_ADDR
// exit ;
48142: POP
48143: POP
48144: GO 48150
// end ;
48146: GO 48115
48148: POP
48149: POP
// end ;
48150: LD_VAR 0 3
48154: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
48155: LD_INT 0
48157: PPUSH
48158: PPUSH
48159: PPUSH
48160: PPUSH
// if not unit or not points then
48161: LD_VAR 0 1
48165: NOT
48166: IFTRUE 48175
48168: PUSH
48169: LD_VAR 0 2
48173: NOT
48174: OR
48175: IFFALSE 48179
// exit ;
48177: GO 48269
// dist := 99999 ;
48179: LD_ADDR_VAR 0 5
48183: PUSH
48184: LD_INT 99999
48186: ST_TO_ADDR
// for i in points do
48187: LD_ADDR_VAR 0 4
48191: PUSH
48192: LD_VAR 0 2
48196: PUSH
48197: FOR_IN
48198: IFFALSE 48267
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
48200: LD_ADDR_VAR 0 6
48204: PUSH
48205: LD_VAR 0 1
48209: PPUSH
48210: LD_VAR 0 4
48214: PUSH
48215: LD_INT 1
48217: ARRAY
48218: PPUSH
48219: LD_VAR 0 4
48223: PUSH
48224: LD_INT 2
48226: ARRAY
48227: PPUSH
48228: CALL_OW 297
48232: ST_TO_ADDR
// if tmpDist < dist then
48233: LD_VAR 0 6
48237: PUSH
48238: LD_VAR 0 5
48242: LESS
48243: IFFALSE 48265
// begin result := i ;
48245: LD_ADDR_VAR 0 3
48249: PUSH
48250: LD_VAR 0 4
48254: ST_TO_ADDR
// dist := tmpDist ;
48255: LD_ADDR_VAR 0 5
48259: PUSH
48260: LD_VAR 0 6
48264: ST_TO_ADDR
// end ; end ;
48265: GO 48197
48267: POP
48268: POP
// end ;
48269: LD_VAR 0 3
48273: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
48274: LD_INT 0
48276: PPUSH
// uc_side := side ;
48277: LD_ADDR_OWVAR 20
48281: PUSH
48282: LD_VAR 0 1
48286: ST_TO_ADDR
// uc_nation := 3 ;
48287: LD_ADDR_OWVAR 21
48291: PUSH
48292: LD_INT 3
48294: ST_TO_ADDR
// vc_chassis := 25 ;
48295: LD_ADDR_OWVAR 37
48299: PUSH
48300: LD_INT 25
48302: ST_TO_ADDR
// vc_engine := engine_siberite ;
48303: LD_ADDR_OWVAR 39
48307: PUSH
48308: LD_INT 3
48310: ST_TO_ADDR
// vc_control := control_computer ;
48311: LD_ADDR_OWVAR 38
48315: PUSH
48316: LD_INT 3
48318: ST_TO_ADDR
// vc_weapon := 59 ;
48319: LD_ADDR_OWVAR 40
48323: PUSH
48324: LD_INT 59
48326: ST_TO_ADDR
// result := CreateVehicle ;
48327: LD_ADDR_VAR 0 5
48331: PUSH
48332: CALL_OW 45
48336: ST_TO_ADDR
// SetDir ( result , d ) ;
48337: LD_VAR 0 5
48341: PPUSH
48342: LD_VAR 0 4
48346: PPUSH
48347: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
48351: LD_VAR 0 5
48355: PPUSH
48356: LD_VAR 0 2
48360: PPUSH
48361: LD_VAR 0 3
48365: PPUSH
48366: LD_INT 0
48368: PPUSH
48369: CALL_OW 48
// end ;
48373: LD_VAR 0 5
48377: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
48378: LD_INT 0
48380: PPUSH
48381: PPUSH
48382: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
48383: LD_ADDR_VAR 0 2
48387: PUSH
48388: LD_INT 0
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 0
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
48406: LD_VAR 0 1
48410: NOT
48411: IFTRUE 48444
48413: PUSH
48414: LD_VAR 0 1
48418: PPUSH
48419: CALL_OW 264
48423: PUSH
48424: LD_INT 12
48426: PUSH
48427: LD_INT 51
48429: PUSH
48430: LD_INT 32
48432: PUSH
48433: LD_INT 89
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: IN
48442: NOT
48443: OR
48444: IFFALSE 48448
// exit ;
48446: GO 48546
// for i := 1 to 3 do
48448: LD_ADDR_VAR 0 3
48452: PUSH
48453: DOUBLE
48454: LD_INT 1
48456: DEC
48457: ST_TO_ADDR
48458: LD_INT 3
48460: PUSH
48461: FOR_TO
48462: IFFALSE 48544
// begin tmp := GetCargo ( cargo , i ) ;
48464: LD_ADDR_VAR 0 4
48468: PUSH
48469: LD_VAR 0 1
48473: PPUSH
48474: LD_VAR 0 3
48478: PPUSH
48479: CALL_OW 289
48483: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
48484: LD_ADDR_VAR 0 2
48488: PUSH
48489: LD_VAR 0 2
48493: PPUSH
48494: LD_VAR 0 3
48498: PPUSH
48499: LD_VAR 0 4
48503: PPUSH
48504: CALL_OW 1
48508: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
48509: LD_ADDR_VAR 0 2
48513: PUSH
48514: LD_VAR 0 2
48518: PPUSH
48519: LD_INT 4
48521: PPUSH
48522: LD_VAR 0 2
48526: PUSH
48527: LD_INT 4
48529: ARRAY
48530: PUSH
48531: LD_VAR 0 4
48535: PLUS
48536: PPUSH
48537: CALL_OW 1
48541: ST_TO_ADDR
// end ;
48542: GO 48461
48544: POP
48545: POP
// end ;
48546: LD_VAR 0 2
48550: RET
// export function Length ( array ) ; begin
48551: LD_INT 0
48553: PPUSH
// result := array + 0 ;
48554: LD_ADDR_VAR 0 2
48558: PUSH
48559: LD_VAR 0 1
48563: PUSH
48564: LD_INT 0
48566: PLUS
48567: ST_TO_ADDR
// end ;
48568: LD_VAR 0 2
48572: RET
// export function PrepareArray ( array ) ; begin
48573: LD_INT 0
48575: PPUSH
// result := array diff 0 ;
48576: LD_ADDR_VAR 0 2
48580: PUSH
48581: LD_VAR 0 1
48585: PUSH
48586: LD_INT 0
48588: DIFF
48589: ST_TO_ADDR
// if not result [ 1 ] then
48590: LD_VAR 0 2
48594: PUSH
48595: LD_INT 1
48597: ARRAY
48598: NOT
48599: IFFALSE 48619
// result := Delete ( result , 1 ) ;
48601: LD_ADDR_VAR 0 2
48605: PUSH
48606: LD_VAR 0 2
48610: PPUSH
48611: LD_INT 1
48613: PPUSH
48614: CALL_OW 3
48618: ST_TO_ADDR
// end ;
48619: LD_VAR 0 2
48623: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
48624: LD_INT 0
48626: PPUSH
48627: PPUSH
48628: PPUSH
48629: PPUSH
// sibRocketRange := 25 ;
48630: LD_ADDR_VAR 0 6
48634: PUSH
48635: LD_INT 25
48637: ST_TO_ADDR
// result := false ;
48638: LD_ADDR_VAR 0 4
48642: PUSH
48643: LD_INT 0
48645: ST_TO_ADDR
// for i := 0 to 5 do
48646: LD_ADDR_VAR 0 5
48650: PUSH
48651: DOUBLE
48652: LD_INT 0
48654: DEC
48655: ST_TO_ADDR
48656: LD_INT 5
48658: PUSH
48659: FOR_TO
48660: IFFALSE 48727
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
48662: LD_VAR 0 1
48666: PPUSH
48667: LD_VAR 0 5
48671: PPUSH
48672: LD_VAR 0 6
48676: PPUSH
48677: CALL_OW 272
48681: PPUSH
48682: LD_VAR 0 2
48686: PPUSH
48687: LD_VAR 0 5
48691: PPUSH
48692: LD_VAR 0 6
48696: PPUSH
48697: CALL_OW 273
48701: PPUSH
48702: LD_VAR 0 3
48706: PPUSH
48707: CALL_OW 309
48711: IFFALSE 48725
// begin result := true ;
48713: LD_ADDR_VAR 0 4
48717: PUSH
48718: LD_INT 1
48720: ST_TO_ADDR
// exit ;
48721: POP
48722: POP
48723: GO 48729
// end ;
48725: GO 48659
48727: POP
48728: POP
// end ;
48729: LD_VAR 0 4
48733: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
48734: LD_INT 0
48736: PPUSH
48737: PPUSH
48738: PPUSH
// if btype = b_depot then
48739: LD_VAR 0 2
48743: PUSH
48744: LD_INT 0
48746: EQUAL
48747: IFFALSE 48759
// begin result := true ;
48749: LD_ADDR_VAR 0 3
48753: PUSH
48754: LD_INT 1
48756: ST_TO_ADDR
// exit ;
48757: GO 48879
// end ; pom := GetBase ( depot ) ;
48759: LD_ADDR_VAR 0 4
48763: PUSH
48764: LD_VAR 0 1
48768: PPUSH
48769: CALL_OW 274
48773: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48774: LD_ADDR_VAR 0 5
48778: PUSH
48779: LD_VAR 0 2
48783: PPUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 248
48793: PPUSH
48794: CALL_OW 450
48798: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
48799: LD_ADDR_VAR 0 3
48803: PUSH
48804: LD_VAR 0 4
48808: PPUSH
48809: LD_INT 1
48811: PPUSH
48812: CALL_OW 275
48816: PUSH
48817: LD_VAR 0 5
48821: PUSH
48822: LD_INT 1
48824: ARRAY
48825: GREATEREQUAL
48826: IFFALSE 48852
48828: PUSH
48829: LD_VAR 0 4
48833: PPUSH
48834: LD_INT 2
48836: PPUSH
48837: CALL_OW 275
48841: PUSH
48842: LD_VAR 0 5
48846: PUSH
48847: LD_INT 2
48849: ARRAY
48850: GREATEREQUAL
48851: AND
48852: IFFALSE 48878
48854: PUSH
48855: LD_VAR 0 4
48859: PPUSH
48860: LD_INT 3
48862: PPUSH
48863: CALL_OW 275
48867: PUSH
48868: LD_VAR 0 5
48872: PUSH
48873: LD_INT 3
48875: ARRAY
48876: GREATEREQUAL
48877: AND
48878: ST_TO_ADDR
// end ;
48879: LD_VAR 0 3
48883: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
48884: LD_INT 0
48886: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
48887: LD_VAR 0 1
48891: PPUSH
48892: LD_VAR 0 2
48896: PPUSH
48897: LD_INT 0
48899: PPUSH
48900: LD_INT 0
48902: PPUSH
48903: LD_INT 1
48905: PPUSH
48906: LD_INT 0
48908: PPUSH
48909: CALL_OW 587
// end ;
48913: LD_VAR 0 3
48917: RET
// export function CenterOnNow ( unit ) ; begin
48918: LD_INT 0
48920: PPUSH
// result := IsInUnit ( unit ) ;
48921: LD_ADDR_VAR 0 2
48925: PUSH
48926: LD_VAR 0 1
48930: PPUSH
48931: CALL_OW 310
48935: ST_TO_ADDR
// if not result then
48936: LD_VAR 0 2
48940: NOT
48941: IFFALSE 48953
// result := unit ;
48943: LD_ADDR_VAR 0 2
48947: PUSH
48948: LD_VAR 0 1
48952: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
48953: LD_VAR 0 1
48957: PPUSH
48958: CALL_OW 87
// end ;
48962: LD_VAR 0 2
48966: RET
// export function ComMoveHex ( unit , hex ) ; begin
48967: LD_INT 0
48969: PPUSH
// if not hex then
48970: LD_VAR 0 2
48974: NOT
48975: IFFALSE 48979
// exit ;
48977: GO 49032
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
48979: LD_VAR 0 2
48983: PUSH
48984: LD_INT 1
48986: ARRAY
48987: PPUSH
48988: LD_VAR 0 2
48992: PUSH
48993: LD_INT 2
48995: ARRAY
48996: PPUSH
48997: CALL_OW 428
49001: IFFALSE 49005
// exit ;
49003: GO 49032
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
49005: LD_VAR 0 1
49009: PPUSH
49010: LD_VAR 0 2
49014: PUSH
49015: LD_INT 1
49017: ARRAY
49018: PPUSH
49019: LD_VAR 0 2
49023: PUSH
49024: LD_INT 2
49026: ARRAY
49027: PPUSH
49028: CALL_OW 111
// end ;
49032: LD_VAR 0 3
49036: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
49037: LD_INT 0
49039: PPUSH
49040: PPUSH
49041: PPUSH
// if not unit or not enemy then
49042: LD_VAR 0 1
49046: NOT
49047: IFTRUE 49056
49049: PUSH
49050: LD_VAR 0 2
49054: NOT
49055: OR
49056: IFFALSE 49060
// exit ;
49058: GO 49186
// x := GetX ( enemy ) ;
49060: LD_ADDR_VAR 0 4
49064: PUSH
49065: LD_VAR 0 2
49069: PPUSH
49070: CALL_OW 250
49074: ST_TO_ADDR
// y := GetY ( enemy ) ;
49075: LD_ADDR_VAR 0 5
49079: PUSH
49080: LD_VAR 0 2
49084: PPUSH
49085: CALL_OW 251
49089: ST_TO_ADDR
// if ValidHex ( x , y ) then
49090: LD_VAR 0 4
49094: PPUSH
49095: LD_VAR 0 5
49099: PPUSH
49100: CALL_OW 488
49104: IFFALSE 49186
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
49106: LD_VAR 0 2
49110: PPUSH
49111: CALL_OW 247
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: IN
49126: IFTRUE 49149
49128: PUSH
49129: LD_VAR 0 1
49133: PPUSH
49134: CALL_OW 255
49138: PPUSH
49139: LD_VAR 0 2
49143: PPUSH
49144: CALL_OW 292
49148: OR
49149: IFFALSE 49167
// ComAttackUnit ( unit , enemy ) else
49151: LD_VAR 0 1
49155: PPUSH
49156: LD_VAR 0 2
49160: PPUSH
49161: CALL_OW 115
49165: GO 49186
// ComAgressiveMove ( unit , x , y ) ;
49167: LD_VAR 0 1
49171: PPUSH
49172: LD_VAR 0 4
49176: PPUSH
49177: LD_VAR 0 5
49181: PPUSH
49182: CALL_OW 114
// end ;
49186: LD_VAR 0 3
49190: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
49191: LD_INT 0
49193: PPUSH
49194: PPUSH
49195: PPUSH
// list := AreaToList ( area , 0 ) ;
49196: LD_ADDR_VAR 0 5
49200: PUSH
49201: LD_VAR 0 1
49205: PPUSH
49206: LD_INT 0
49208: PPUSH
49209: CALL_OW 517
49213: ST_TO_ADDR
// if not list then
49214: LD_VAR 0 5
49218: NOT
49219: IFFALSE 49223
// exit ;
49221: GO 49353
// if all then
49223: LD_VAR 0 2
49227: IFFALSE 49315
// begin for i := 1 to list [ 1 ] do
49229: LD_ADDR_VAR 0 4
49233: PUSH
49234: DOUBLE
49235: LD_INT 1
49237: DEC
49238: ST_TO_ADDR
49239: LD_VAR 0 5
49243: PUSH
49244: LD_INT 1
49246: ARRAY
49247: PUSH
49248: FOR_TO
49249: IFFALSE 49311
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
49251: LD_ADDR_VAR 0 3
49255: PUSH
49256: LD_VAR 0 3
49260: PPUSH
49261: LD_VAR 0 3
49265: PUSH
49266: LD_INT 1
49268: PLUS
49269: PPUSH
49270: LD_VAR 0 5
49274: PUSH
49275: LD_INT 1
49277: ARRAY
49278: PUSH
49279: LD_VAR 0 4
49283: ARRAY
49284: PUSH
49285: LD_VAR 0 5
49289: PUSH
49290: LD_INT 2
49292: ARRAY
49293: PUSH
49294: LD_VAR 0 4
49298: ARRAY
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PPUSH
49304: CALL_OW 1
49308: ST_TO_ADDR
49309: GO 49248
49311: POP
49312: POP
// exit ;
49313: GO 49353
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
49315: LD_ADDR_VAR 0 3
49319: PUSH
49320: LD_VAR 0 5
49324: PUSH
49325: LD_INT 1
49327: ARRAY
49328: PUSH
49329: LD_INT 1
49331: ARRAY
49332: PUSH
49333: LD_VAR 0 5
49337: PUSH
49338: LD_INT 2
49340: ARRAY
49341: PUSH
49342: LD_INT 1
49344: ARRAY
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: EMPTY
49351: LIST
49352: ST_TO_ADDR
// end ;
49353: LD_VAR 0 3
49357: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
49358: LD_INT 0
49360: PPUSH
49361: PPUSH
// list := AreaToList ( area , 0 ) ;
49362: LD_ADDR_VAR 0 4
49366: PUSH
49367: LD_VAR 0 1
49371: PPUSH
49372: LD_INT 0
49374: PPUSH
49375: CALL_OW 517
49379: ST_TO_ADDR
// if not list then
49380: LD_VAR 0 4
49384: NOT
49385: IFFALSE 49389
// exit ;
49387: GO 49430
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
49389: LD_ADDR_VAR 0 3
49393: PUSH
49394: LD_VAR 0 4
49398: PUSH
49399: LD_INT 1
49401: ARRAY
49402: PUSH
49403: LD_INT 1
49405: ARRAY
49406: PUSH
49407: LD_VAR 0 4
49411: PUSH
49412: LD_INT 2
49414: ARRAY
49415: PUSH
49416: LD_INT 1
49418: ARRAY
49419: PUSH
49420: LD_VAR 0 2
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: LIST
49429: ST_TO_ADDR
// end ;
49430: LD_VAR 0 3
49434: RET
// export function First ( array ) ; begin
49435: LD_INT 0
49437: PPUSH
// if not array then
49438: LD_VAR 0 1
49442: NOT
49443: IFFALSE 49447
// exit ;
49445: GO 49461
// result := array [ 1 ] ;
49447: LD_ADDR_VAR 0 2
49451: PUSH
49452: LD_VAR 0 1
49456: PUSH
49457: LD_INT 1
49459: ARRAY
49460: ST_TO_ADDR
// end ;
49461: LD_VAR 0 2
49465: RET
// export function Last ( array ) ; begin
49466: LD_INT 0
49468: PPUSH
// if not array then
49469: LD_VAR 0 1
49473: NOT
49474: IFFALSE 49478
// exit ;
49476: GO 49494
// result := array [ array ] ;
49478: LD_ADDR_VAR 0 2
49482: PUSH
49483: LD_VAR 0 1
49487: PUSH
49488: LD_VAR 0 1
49492: ARRAY
49493: ST_TO_ADDR
// end ;
49494: LD_VAR 0 2
49498: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
49499: LD_INT 0
49501: PPUSH
49502: PPUSH
// result := [ ] ;
49503: LD_ADDR_VAR 0 5
49507: PUSH
49508: EMPTY
49509: ST_TO_ADDR
// if not array then
49510: LD_VAR 0 1
49514: NOT
49515: IFFALSE 49519
// exit ;
49517: GO 49631
// for i := 1 to array do
49519: LD_ADDR_VAR 0 6
49523: PUSH
49524: DOUBLE
49525: LD_INT 1
49527: DEC
49528: ST_TO_ADDR
49529: LD_VAR 0 1
49533: PUSH
49534: FOR_TO
49535: IFFALSE 49629
// if array [ i ] [ index ] = value then
49537: LD_VAR 0 1
49541: PUSH
49542: LD_VAR 0 6
49546: ARRAY
49547: PUSH
49548: LD_VAR 0 2
49552: ARRAY
49553: PUSH
49554: LD_VAR 0 3
49558: EQUAL
49559: IFFALSE 49627
// begin if indexColumn then
49561: LD_VAR 0 4
49565: IFFALSE 49601
// result := Join ( result , array [ i ] [ indexColumn ] ) else
49567: LD_ADDR_VAR 0 5
49571: PUSH
49572: LD_VAR 0 5
49576: PPUSH
49577: LD_VAR 0 1
49581: PUSH
49582: LD_VAR 0 6
49586: ARRAY
49587: PUSH
49588: LD_VAR 0 4
49592: ARRAY
49593: PPUSH
49594: CALL 44639 0 2
49598: ST_TO_ADDR
49599: GO 49627
// result := Join ( result , array [ i ] ) ;
49601: LD_ADDR_VAR 0 5
49605: PUSH
49606: LD_VAR 0 5
49610: PPUSH
49611: LD_VAR 0 1
49615: PUSH
49616: LD_VAR 0 6
49620: ARRAY
49621: PPUSH
49622: CALL 44639 0 2
49626: ST_TO_ADDR
// end ;
49627: GO 49534
49629: POP
49630: POP
// end ;
49631: LD_VAR 0 5
49635: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
49636: LD_INT 0
49638: PPUSH
// if not vehicles or not parkingPoint then
49639: LD_VAR 0 1
49643: NOT
49644: IFTRUE 49653
49646: PUSH
49647: LD_VAR 0 2
49651: NOT
49652: OR
49653: IFFALSE 49657
// exit ;
49655: GO 49755
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
49657: LD_ADDR_VAR 0 1
49661: PUSH
49662: LD_VAR 0 1
49666: PPUSH
49667: LD_INT 50
49669: PUSH
49670: EMPTY
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: LD_INT 92
49678: PUSH
49679: LD_VAR 0 2
49683: PUSH
49684: LD_INT 1
49686: ARRAY
49687: PUSH
49688: LD_VAR 0 2
49692: PUSH
49693: LD_INT 2
49695: ARRAY
49696: PUSH
49697: LD_INT 8
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PPUSH
49714: CALL_OW 72
49718: ST_TO_ADDR
// if not vehicles then
49719: LD_VAR 0 1
49723: NOT
49724: IFFALSE 49728
// exit ;
49726: GO 49755
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
49728: LD_VAR 0 1
49732: PPUSH
49733: LD_VAR 0 2
49737: PUSH
49738: LD_INT 1
49740: ARRAY
49741: PPUSH
49742: LD_VAR 0 2
49746: PUSH
49747: LD_INT 2
49749: ARRAY
49750: PPUSH
49751: CALL_OW 111
// end ;
49755: LD_VAR 0 3
49759: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
49760: LD_INT 0
49762: PPUSH
49763: PPUSH
49764: PPUSH
// if not side or not area then
49765: LD_VAR 0 1
49769: NOT
49770: IFTRUE 49779
49772: PUSH
49773: LD_VAR 0 2
49777: NOT
49778: OR
49779: IFFALSE 49783
// exit ;
49781: GO 49902
// tmp := AreaToList ( area , 0 ) ;
49783: LD_ADDR_VAR 0 5
49787: PUSH
49788: LD_VAR 0 2
49792: PPUSH
49793: LD_INT 0
49795: PPUSH
49796: CALL_OW 517
49800: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
49801: LD_ADDR_VAR 0 4
49805: PUSH
49806: DOUBLE
49807: LD_INT 1
49809: DEC
49810: ST_TO_ADDR
49811: LD_VAR 0 5
49815: PUSH
49816: LD_INT 1
49818: ARRAY
49819: PUSH
49820: FOR_TO
49821: IFFALSE 49900
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
49823: LD_VAR 0 5
49827: PUSH
49828: LD_INT 1
49830: ARRAY
49831: PUSH
49832: LD_VAR 0 4
49836: ARRAY
49837: PPUSH
49838: LD_VAR 0 5
49842: PUSH
49843: LD_INT 2
49845: ARRAY
49846: PUSH
49847: LD_VAR 0 4
49851: ARRAY
49852: PPUSH
49853: CALL_OW 351
49857: IFFALSE 49898
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
49859: LD_VAR 0 5
49863: PUSH
49864: LD_INT 1
49866: ARRAY
49867: PUSH
49868: LD_VAR 0 4
49872: ARRAY
49873: PPUSH
49874: LD_VAR 0 5
49878: PUSH
49879: LD_INT 2
49881: ARRAY
49882: PUSH
49883: LD_VAR 0 4
49887: ARRAY
49888: PPUSH
49889: LD_VAR 0 1
49893: PPUSH
49894: CALL_OW 244
// end ;
49898: GO 49820
49900: POP
49901: POP
// end ;
49902: LD_VAR 0 3
49906: RET
// export function UniqueArray ( array ) ; var i ; begin
49907: LD_INT 0
49909: PPUSH
49910: PPUSH
// result := [ ] ;
49911: LD_ADDR_VAR 0 2
49915: PUSH
49916: EMPTY
49917: ST_TO_ADDR
// if not array then
49918: LD_VAR 0 1
49922: NOT
49923: IFFALSE 49927
// exit ;
49925: GO 49988
// for i := 1 to array do
49927: LD_ADDR_VAR 0 3
49931: PUSH
49932: DOUBLE
49933: LD_INT 1
49935: DEC
49936: ST_TO_ADDR
49937: LD_VAR 0 1
49941: PUSH
49942: FOR_TO
49943: IFFALSE 49986
// if not array [ i ] in result then
49945: LD_VAR 0 1
49949: PUSH
49950: LD_VAR 0 3
49954: ARRAY
49955: PUSH
49956: LD_VAR 0 2
49960: IN
49961: NOT
49962: IFFALSE 49984
// result := Join ( result , i ) ;
49964: LD_ADDR_VAR 0 2
49968: PUSH
49969: LD_VAR 0 2
49973: PPUSH
49974: LD_VAR 0 3
49978: PPUSH
49979: CALL 44639 0 2
49983: ST_TO_ADDR
49984: GO 49942
49986: POP
49987: POP
// end ; end_of_file end_of_file
49988: LD_VAR 0 2
49992: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
49993: LD_VAR 0 1
49997: PPUSH
49998: LD_VAR 0 2
50002: PPUSH
50003: LD_VAR 0 3
50007: PPUSH
50008: LD_VAR 0 4
50012: PPUSH
50013: LD_VAR 0 5
50017: PPUSH
50018: LD_VAR 0 6
50022: PPUSH
50023: CALL 50265 0 6
// end ;
50027: PPOPN 6
50029: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
50030: LD_INT 0
50032: PPUSH
// begin if not units then
50033: LD_VAR 0 1
50037: NOT
50038: IFFALSE 50042
// exit ;
50040: GO 50076
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
50042: LD_VAR 0 1
50046: PPUSH
50047: LD_VAR 0 2
50051: PPUSH
50052: LD_VAR 0 3
50056: PPUSH
50057: LD_VAR 0 4
50061: PPUSH
50062: LD_VAR 0 5
50066: PPUSH
50067: LD_VAR 0 6
50071: PPUSH
50072: CALL 72782 0 6
// end ;
50076: PPOPN 7
50078: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
50079: CALL 50145 0 0
// end ; end_of_file
50083: PPOPN 1
50085: END
// export globalGameSaveCounter ; every 0 0$1 do
50086: GO 50088
50088: DISABLE
// begin enable ;
50089: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50090: LD_STRING updateTimer(
50092: PUSH
50093: LD_OWVAR 1
50097: STR
50098: PUSH
50099: LD_STRING );
50101: STR
50102: PPUSH
50103: CALL_OW 559
// end ;
50107: END
// every 0 0$1 do
50108: GO 50110
50110: DISABLE
// begin globalGameSaveCounter := 0 ;
50111: LD_ADDR_EXP 29
50115: PUSH
50116: LD_INT 0
50118: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
50119: LD_STRING setGameSaveCounter(0)
50121: PPUSH
50122: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
50126: LD_STRING initStreamRollete();
50128: PPUSH
50129: CALL_OW 559
// InitStreamMode ;
50133: CALL 51485 0 0
// DefineStreamItems ( false ) ;
50137: LD_INT 0
50139: PPUSH
50140: CALL 51949 0 1
// end ;
50144: END
// export function SOS_MapStart ( ) ; begin
50145: LD_INT 0
50147: PPUSH
// if streamModeActive then
50148: LD_EXP 30
50152: IFFALSE 50161
// DefineStreamItems ( true ) ;
50154: LD_INT 1
50156: PPUSH
50157: CALL 51949 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
50161: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
50163: PPUSH
50164: CALL_OW 559
// UpdateLuaVariables ( ) ;
50168: CALL 50185 0 0
// UpdateFactoryWaypoints ( ) ;
50172: CALL 65071 0 0
// UpdateWarehouseGatheringPoints ( ) ;
50176: CALL 65323 0 0
// end ;
50180: LD_VAR 0 1
50184: RET
// function UpdateLuaVariables ( ) ; begin
50185: LD_INT 0
50187: PPUSH
// if globalGameSaveCounter then
50188: LD_EXP 29
50192: IFFALSE 50226
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
50194: LD_ADDR_EXP 29
50198: PUSH
50199: LD_EXP 29
50203: PPUSH
50204: CALL 46012 0 1
50208: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50209: LD_STRING setGameSaveCounter(
50211: PUSH
50212: LD_EXP 29
50216: STR
50217: PUSH
50218: LD_STRING )
50220: STR
50221: PPUSH
50222: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
50226: LD_STRING setGameDifficulty(
50228: PUSH
50229: LD_OWVAR 67
50233: STR
50234: PUSH
50235: LD_STRING )
50237: STR
50238: PPUSH
50239: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
50243: LD_STRING displayDifficulty(
50245: PUSH
50246: LD_OWVAR 67
50250: STR
50251: PUSH
50252: LD_STRING )
50254: STR
50255: PPUSH
50256: CALL_OW 559
// end ;
50260: LD_VAR 0 1
50264: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50265: LD_INT 0
50267: PPUSH
// if p2 = stream_mode then
50268: LD_VAR 0 2
50272: PUSH
50273: LD_INT 100
50275: EQUAL
50276: IFFALSE 51279
// begin if not StreamModeActive then
50278: LD_EXP 30
50282: NOT
50283: IFFALSE 50293
// StreamModeActive := true ;
50285: LD_ADDR_EXP 30
50289: PUSH
50290: LD_INT 1
50292: ST_TO_ADDR
// if p3 = 0 then
50293: LD_VAR 0 3
50297: PUSH
50298: LD_INT 0
50300: EQUAL
50301: IFFALSE 50307
// InitStreamMode ;
50303: CALL 51485 0 0
// if p3 = 1 then
50307: LD_VAR 0 3
50311: PUSH
50312: LD_INT 1
50314: EQUAL
50315: IFFALSE 50325
// sRocket := true ;
50317: LD_ADDR_EXP 35
50321: PUSH
50322: LD_INT 1
50324: ST_TO_ADDR
// if p3 = 2 then
50325: LD_VAR 0 3
50329: PUSH
50330: LD_INT 2
50332: EQUAL
50333: IFFALSE 50343
// sSpeed := true ;
50335: LD_ADDR_EXP 34
50339: PUSH
50340: LD_INT 1
50342: ST_TO_ADDR
// if p3 = 3 then
50343: LD_VAR 0 3
50347: PUSH
50348: LD_INT 3
50350: EQUAL
50351: IFFALSE 50361
// sEngine := true ;
50353: LD_ADDR_EXP 36
50357: PUSH
50358: LD_INT 1
50360: ST_TO_ADDR
// if p3 = 4 then
50361: LD_VAR 0 3
50365: PUSH
50366: LD_INT 4
50368: EQUAL
50369: IFFALSE 50379
// sSpec := true ;
50371: LD_ADDR_EXP 33
50375: PUSH
50376: LD_INT 1
50378: ST_TO_ADDR
// if p3 = 5 then
50379: LD_VAR 0 3
50383: PUSH
50384: LD_INT 5
50386: EQUAL
50387: IFFALSE 50397
// sLevel := true ;
50389: LD_ADDR_EXP 37
50393: PUSH
50394: LD_INT 1
50396: ST_TO_ADDR
// if p3 = 6 then
50397: LD_VAR 0 3
50401: PUSH
50402: LD_INT 6
50404: EQUAL
50405: IFFALSE 50415
// sArmoury := true ;
50407: LD_ADDR_EXP 38
50411: PUSH
50412: LD_INT 1
50414: ST_TO_ADDR
// if p3 = 7 then
50415: LD_VAR 0 3
50419: PUSH
50420: LD_INT 7
50422: EQUAL
50423: IFFALSE 50433
// sRadar := true ;
50425: LD_ADDR_EXP 39
50429: PUSH
50430: LD_INT 1
50432: ST_TO_ADDR
// if p3 = 8 then
50433: LD_VAR 0 3
50437: PUSH
50438: LD_INT 8
50440: EQUAL
50441: IFFALSE 50451
// sBunker := true ;
50443: LD_ADDR_EXP 40
50447: PUSH
50448: LD_INT 1
50450: ST_TO_ADDR
// if p3 = 9 then
50451: LD_VAR 0 3
50455: PUSH
50456: LD_INT 9
50458: EQUAL
50459: IFFALSE 50469
// sHack := true ;
50461: LD_ADDR_EXP 41
50465: PUSH
50466: LD_INT 1
50468: ST_TO_ADDR
// if p3 = 10 then
50469: LD_VAR 0 3
50473: PUSH
50474: LD_INT 10
50476: EQUAL
50477: IFFALSE 50487
// sFire := true ;
50479: LD_ADDR_EXP 42
50483: PUSH
50484: LD_INT 1
50486: ST_TO_ADDR
// if p3 = 11 then
50487: LD_VAR 0 3
50491: PUSH
50492: LD_INT 11
50494: EQUAL
50495: IFFALSE 50505
// sRefresh := true ;
50497: LD_ADDR_EXP 43
50501: PUSH
50502: LD_INT 1
50504: ST_TO_ADDR
// if p3 = 12 then
50505: LD_VAR 0 3
50509: PUSH
50510: LD_INT 12
50512: EQUAL
50513: IFFALSE 50523
// sExp := true ;
50515: LD_ADDR_EXP 44
50519: PUSH
50520: LD_INT 1
50522: ST_TO_ADDR
// if p3 = 13 then
50523: LD_VAR 0 3
50527: PUSH
50528: LD_INT 13
50530: EQUAL
50531: IFFALSE 50541
// sDepot := true ;
50533: LD_ADDR_EXP 45
50537: PUSH
50538: LD_INT 1
50540: ST_TO_ADDR
// if p3 = 14 then
50541: LD_VAR 0 3
50545: PUSH
50546: LD_INT 14
50548: EQUAL
50549: IFFALSE 50559
// sFlag := true ;
50551: LD_ADDR_EXP 46
50555: PUSH
50556: LD_INT 1
50558: ST_TO_ADDR
// if p3 = 15 then
50559: LD_VAR 0 3
50563: PUSH
50564: LD_INT 15
50566: EQUAL
50567: IFFALSE 50577
// sKamikadze := true ;
50569: LD_ADDR_EXP 54
50573: PUSH
50574: LD_INT 1
50576: ST_TO_ADDR
// if p3 = 16 then
50577: LD_VAR 0 3
50581: PUSH
50582: LD_INT 16
50584: EQUAL
50585: IFFALSE 50595
// sTroll := true ;
50587: LD_ADDR_EXP 55
50591: PUSH
50592: LD_INT 1
50594: ST_TO_ADDR
// if p3 = 17 then
50595: LD_VAR 0 3
50599: PUSH
50600: LD_INT 17
50602: EQUAL
50603: IFFALSE 50613
// sSlow := true ;
50605: LD_ADDR_EXP 56
50609: PUSH
50610: LD_INT 1
50612: ST_TO_ADDR
// if p3 = 18 then
50613: LD_VAR 0 3
50617: PUSH
50618: LD_INT 18
50620: EQUAL
50621: IFFALSE 50631
// sLack := true ;
50623: LD_ADDR_EXP 57
50627: PUSH
50628: LD_INT 1
50630: ST_TO_ADDR
// if p3 = 19 then
50631: LD_VAR 0 3
50635: PUSH
50636: LD_INT 19
50638: EQUAL
50639: IFFALSE 50649
// sTank := true ;
50641: LD_ADDR_EXP 59
50645: PUSH
50646: LD_INT 1
50648: ST_TO_ADDR
// if p3 = 20 then
50649: LD_VAR 0 3
50653: PUSH
50654: LD_INT 20
50656: EQUAL
50657: IFFALSE 50667
// sRemote := true ;
50659: LD_ADDR_EXP 60
50663: PUSH
50664: LD_INT 1
50666: ST_TO_ADDR
// if p3 = 21 then
50667: LD_VAR 0 3
50671: PUSH
50672: LD_INT 21
50674: EQUAL
50675: IFFALSE 50685
// sPowell := true ;
50677: LD_ADDR_EXP 61
50681: PUSH
50682: LD_INT 1
50684: ST_TO_ADDR
// if p3 = 22 then
50685: LD_VAR 0 3
50689: PUSH
50690: LD_INT 22
50692: EQUAL
50693: IFFALSE 50703
// sTeleport := true ;
50695: LD_ADDR_EXP 64
50699: PUSH
50700: LD_INT 1
50702: ST_TO_ADDR
// if p3 = 23 then
50703: LD_VAR 0 3
50707: PUSH
50708: LD_INT 23
50710: EQUAL
50711: IFFALSE 50721
// sOilTower := true ;
50713: LD_ADDR_EXP 66
50717: PUSH
50718: LD_INT 1
50720: ST_TO_ADDR
// if p3 = 24 then
50721: LD_VAR 0 3
50725: PUSH
50726: LD_INT 24
50728: EQUAL
50729: IFFALSE 50739
// sShovel := true ;
50731: LD_ADDR_EXP 67
50735: PUSH
50736: LD_INT 1
50738: ST_TO_ADDR
// if p3 = 25 then
50739: LD_VAR 0 3
50743: PUSH
50744: LD_INT 25
50746: EQUAL
50747: IFFALSE 50757
// sSheik := true ;
50749: LD_ADDR_EXP 68
50753: PUSH
50754: LD_INT 1
50756: ST_TO_ADDR
// if p3 = 26 then
50757: LD_VAR 0 3
50761: PUSH
50762: LD_INT 26
50764: EQUAL
50765: IFFALSE 50775
// sEarthquake := true ;
50767: LD_ADDR_EXP 70
50771: PUSH
50772: LD_INT 1
50774: ST_TO_ADDR
// if p3 = 27 then
50775: LD_VAR 0 3
50779: PUSH
50780: LD_INT 27
50782: EQUAL
50783: IFFALSE 50793
// sAI := true ;
50785: LD_ADDR_EXP 71
50789: PUSH
50790: LD_INT 1
50792: ST_TO_ADDR
// if p3 = 28 then
50793: LD_VAR 0 3
50797: PUSH
50798: LD_INT 28
50800: EQUAL
50801: IFFALSE 50811
// sCargo := true ;
50803: LD_ADDR_EXP 74
50807: PUSH
50808: LD_INT 1
50810: ST_TO_ADDR
// if p3 = 29 then
50811: LD_VAR 0 3
50815: PUSH
50816: LD_INT 29
50818: EQUAL
50819: IFFALSE 50829
// sDLaser := true ;
50821: LD_ADDR_EXP 75
50825: PUSH
50826: LD_INT 1
50828: ST_TO_ADDR
// if p3 = 30 then
50829: LD_VAR 0 3
50833: PUSH
50834: LD_INT 30
50836: EQUAL
50837: IFFALSE 50847
// sExchange := true ;
50839: LD_ADDR_EXP 76
50843: PUSH
50844: LD_INT 1
50846: ST_TO_ADDR
// if p3 = 31 then
50847: LD_VAR 0 3
50851: PUSH
50852: LD_INT 31
50854: EQUAL
50855: IFFALSE 50865
// sFac := true ;
50857: LD_ADDR_EXP 77
50861: PUSH
50862: LD_INT 1
50864: ST_TO_ADDR
// if p3 = 32 then
50865: LD_VAR 0 3
50869: PUSH
50870: LD_INT 32
50872: EQUAL
50873: IFFALSE 50883
// sPower := true ;
50875: LD_ADDR_EXP 78
50879: PUSH
50880: LD_INT 1
50882: ST_TO_ADDR
// if p3 = 33 then
50883: LD_VAR 0 3
50887: PUSH
50888: LD_INT 33
50890: EQUAL
50891: IFFALSE 50901
// sRandom := true ;
50893: LD_ADDR_EXP 79
50897: PUSH
50898: LD_INT 1
50900: ST_TO_ADDR
// if p3 = 34 then
50901: LD_VAR 0 3
50905: PUSH
50906: LD_INT 34
50908: EQUAL
50909: IFFALSE 50919
// sShield := true ;
50911: LD_ADDR_EXP 80
50915: PUSH
50916: LD_INT 1
50918: ST_TO_ADDR
// if p3 = 35 then
50919: LD_VAR 0 3
50923: PUSH
50924: LD_INT 35
50926: EQUAL
50927: IFFALSE 50937
// sTime := true ;
50929: LD_ADDR_EXP 81
50933: PUSH
50934: LD_INT 1
50936: ST_TO_ADDR
// if p3 = 36 then
50937: LD_VAR 0 3
50941: PUSH
50942: LD_INT 36
50944: EQUAL
50945: IFFALSE 50955
// sTools := true ;
50947: LD_ADDR_EXP 82
50951: PUSH
50952: LD_INT 1
50954: ST_TO_ADDR
// if p3 = 101 then
50955: LD_VAR 0 3
50959: PUSH
50960: LD_INT 101
50962: EQUAL
50963: IFFALSE 50973
// sSold := true ;
50965: LD_ADDR_EXP 47
50969: PUSH
50970: LD_INT 1
50972: ST_TO_ADDR
// if p3 = 102 then
50973: LD_VAR 0 3
50977: PUSH
50978: LD_INT 102
50980: EQUAL
50981: IFFALSE 50991
// sDiff := true ;
50983: LD_ADDR_EXP 48
50987: PUSH
50988: LD_INT 1
50990: ST_TO_ADDR
// if p3 = 103 then
50991: LD_VAR 0 3
50995: PUSH
50996: LD_INT 103
50998: EQUAL
50999: IFFALSE 51009
// sFog := true ;
51001: LD_ADDR_EXP 51
51005: PUSH
51006: LD_INT 1
51008: ST_TO_ADDR
// if p3 = 104 then
51009: LD_VAR 0 3
51013: PUSH
51014: LD_INT 104
51016: EQUAL
51017: IFFALSE 51027
// sReset := true ;
51019: LD_ADDR_EXP 52
51023: PUSH
51024: LD_INT 1
51026: ST_TO_ADDR
// if p3 = 105 then
51027: LD_VAR 0 3
51031: PUSH
51032: LD_INT 105
51034: EQUAL
51035: IFFALSE 51045
// sSun := true ;
51037: LD_ADDR_EXP 53
51041: PUSH
51042: LD_INT 1
51044: ST_TO_ADDR
// if p3 = 106 then
51045: LD_VAR 0 3
51049: PUSH
51050: LD_INT 106
51052: EQUAL
51053: IFFALSE 51063
// sTiger := true ;
51055: LD_ADDR_EXP 49
51059: PUSH
51060: LD_INT 1
51062: ST_TO_ADDR
// if p3 = 107 then
51063: LD_VAR 0 3
51067: PUSH
51068: LD_INT 107
51070: EQUAL
51071: IFFALSE 51081
// sBomb := true ;
51073: LD_ADDR_EXP 50
51077: PUSH
51078: LD_INT 1
51080: ST_TO_ADDR
// if p3 = 108 then
51081: LD_VAR 0 3
51085: PUSH
51086: LD_INT 108
51088: EQUAL
51089: IFFALSE 51099
// sWound := true ;
51091: LD_ADDR_EXP 58
51095: PUSH
51096: LD_INT 1
51098: ST_TO_ADDR
// if p3 = 109 then
51099: LD_VAR 0 3
51103: PUSH
51104: LD_INT 109
51106: EQUAL
51107: IFFALSE 51117
// sBetray := true ;
51109: LD_ADDR_EXP 62
51113: PUSH
51114: LD_INT 1
51116: ST_TO_ADDR
// if p3 = 110 then
51117: LD_VAR 0 3
51121: PUSH
51122: LD_INT 110
51124: EQUAL
51125: IFFALSE 51135
// sContamin := true ;
51127: LD_ADDR_EXP 63
51131: PUSH
51132: LD_INT 1
51134: ST_TO_ADDR
// if p3 = 111 then
51135: LD_VAR 0 3
51139: PUSH
51140: LD_INT 111
51142: EQUAL
51143: IFFALSE 51153
// sOil := true ;
51145: LD_ADDR_EXP 65
51149: PUSH
51150: LD_INT 1
51152: ST_TO_ADDR
// if p3 = 112 then
51153: LD_VAR 0 3
51157: PUSH
51158: LD_INT 112
51160: EQUAL
51161: IFFALSE 51171
// sStu := true ;
51163: LD_ADDR_EXP 69
51167: PUSH
51168: LD_INT 1
51170: ST_TO_ADDR
// if p3 = 113 then
51171: LD_VAR 0 3
51175: PUSH
51176: LD_INT 113
51178: EQUAL
51179: IFFALSE 51189
// sBazooka := true ;
51181: LD_ADDR_EXP 72
51185: PUSH
51186: LD_INT 1
51188: ST_TO_ADDR
// if p3 = 114 then
51189: LD_VAR 0 3
51193: PUSH
51194: LD_INT 114
51196: EQUAL
51197: IFFALSE 51207
// sMortar := true ;
51199: LD_ADDR_EXP 73
51203: PUSH
51204: LD_INT 1
51206: ST_TO_ADDR
// if p3 = 115 then
51207: LD_VAR 0 3
51211: PUSH
51212: LD_INT 115
51214: EQUAL
51215: IFFALSE 51225
// sRanger := true ;
51217: LD_ADDR_EXP 83
51221: PUSH
51222: LD_INT 1
51224: ST_TO_ADDR
// if p3 = 116 then
51225: LD_VAR 0 3
51229: PUSH
51230: LD_INT 116
51232: EQUAL
51233: IFFALSE 51243
// sComputer := true ;
51235: LD_ADDR_EXP 84
51239: PUSH
51240: LD_INT 1
51242: ST_TO_ADDR
// if p3 = 117 then
51243: LD_VAR 0 3
51247: PUSH
51248: LD_INT 117
51250: EQUAL
51251: IFFALSE 51261
// s30 := true ;
51253: LD_ADDR_EXP 85
51257: PUSH
51258: LD_INT 1
51260: ST_TO_ADDR
// if p3 = 118 then
51261: LD_VAR 0 3
51265: PUSH
51266: LD_INT 118
51268: EQUAL
51269: IFFALSE 51279
// s60 := true ;
51271: LD_ADDR_EXP 86
51275: PUSH
51276: LD_INT 1
51278: ST_TO_ADDR
// end ; if p2 = hack_mode then
51279: LD_VAR 0 2
51283: PUSH
51284: LD_INT 101
51286: EQUAL
51287: IFFALSE 51415
// begin case p3 of 1 :
51289: LD_VAR 0 3
51293: PUSH
51294: LD_INT 1
51296: DOUBLE
51297: EQUAL
51298: IFTRUE 51302
51300: GO 51309
51302: POP
// hHackUnlimitedResources ; 2 :
51303: CALL 63678 0 0
51307: GO 51415
51309: LD_INT 2
51311: DOUBLE
51312: EQUAL
51313: IFTRUE 51317
51315: GO 51324
51317: POP
// hHackSetLevel10 ; 3 :
51318: CALL 63811 0 0
51322: GO 51415
51324: LD_INT 3
51326: DOUBLE
51327: EQUAL
51328: IFTRUE 51332
51330: GO 51339
51332: POP
// hHackSetLevel10YourUnits ; 4 :
51333: CALL 63896 0 0
51337: GO 51415
51339: LD_INT 4
51341: DOUBLE
51342: EQUAL
51343: IFTRUE 51347
51345: GO 51354
51347: POP
// hHackInvincible ; 5 :
51348: CALL 64344 0 0
51352: GO 51415
51354: LD_INT 5
51356: DOUBLE
51357: EQUAL
51358: IFTRUE 51362
51360: GO 51369
51362: POP
// hHackInvisible ; 6 :
51363: CALL 64455 0 0
51367: GO 51415
51369: LD_INT 6
51371: DOUBLE
51372: EQUAL
51373: IFTRUE 51377
51375: GO 51384
51377: POP
// hHackChangeYourSide ; 7 :
51378: CALL 64512 0 0
51382: GO 51415
51384: LD_INT 7
51386: DOUBLE
51387: EQUAL
51388: IFTRUE 51392
51390: GO 51399
51392: POP
// hHackChangeUnitSide ; 8 :
51393: CALL 64554 0 0
51397: GO 51415
51399: LD_INT 8
51401: DOUBLE
51402: EQUAL
51403: IFTRUE 51407
51405: GO 51414
51407: POP
// hHackFog ; end ;
51408: CALL 64655 0 0
51412: GO 51415
51414: POP
// end ; if p2 = game_save_mode then
51415: LD_VAR 0 2
51419: PUSH
51420: LD_INT 102
51422: EQUAL
51423: IFFALSE 51480
// begin if p3 = 1 then
51425: LD_VAR 0 3
51429: PUSH
51430: LD_INT 1
51432: EQUAL
51433: IFFALSE 51445
// globalGameSaveCounter := p4 ;
51435: LD_ADDR_EXP 29
51439: PUSH
51440: LD_VAR 0 4
51444: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
51445: LD_VAR 0 3
51449: PUSH
51450: LD_INT 2
51452: EQUAL
51453: IFFALSE 51461
51455: PUSH
51456: LD_EXP 29
51460: AND
51461: IFFALSE 51480
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
51463: LD_STRING setGameSaveCounter(
51465: PUSH
51466: LD_EXP 29
51470: STR
51471: PUSH
51472: LD_STRING )
51474: STR
51475: PPUSH
51476: CALL_OW 559
// end ; end ;
51480: LD_VAR 0 7
51484: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
51485: LD_INT 0
51487: PPUSH
// streamModeActive := false ;
51488: LD_ADDR_EXP 30
51492: PUSH
51493: LD_INT 0
51495: ST_TO_ADDR
// normalCounter := 36 ;
51496: LD_ADDR_EXP 31
51500: PUSH
51501: LD_INT 36
51503: ST_TO_ADDR
// hardcoreCounter := 18 ;
51504: LD_ADDR_EXP 32
51508: PUSH
51509: LD_INT 18
51511: ST_TO_ADDR
// sRocket := false ;
51512: LD_ADDR_EXP 35
51516: PUSH
51517: LD_INT 0
51519: ST_TO_ADDR
// sSpeed := false ;
51520: LD_ADDR_EXP 34
51524: PUSH
51525: LD_INT 0
51527: ST_TO_ADDR
// sEngine := false ;
51528: LD_ADDR_EXP 36
51532: PUSH
51533: LD_INT 0
51535: ST_TO_ADDR
// sSpec := false ;
51536: LD_ADDR_EXP 33
51540: PUSH
51541: LD_INT 0
51543: ST_TO_ADDR
// sLevel := false ;
51544: LD_ADDR_EXP 37
51548: PUSH
51549: LD_INT 0
51551: ST_TO_ADDR
// sArmoury := false ;
51552: LD_ADDR_EXP 38
51556: PUSH
51557: LD_INT 0
51559: ST_TO_ADDR
// sRadar := false ;
51560: LD_ADDR_EXP 39
51564: PUSH
51565: LD_INT 0
51567: ST_TO_ADDR
// sBunker := false ;
51568: LD_ADDR_EXP 40
51572: PUSH
51573: LD_INT 0
51575: ST_TO_ADDR
// sHack := false ;
51576: LD_ADDR_EXP 41
51580: PUSH
51581: LD_INT 0
51583: ST_TO_ADDR
// sFire := false ;
51584: LD_ADDR_EXP 42
51588: PUSH
51589: LD_INT 0
51591: ST_TO_ADDR
// sRefresh := false ;
51592: LD_ADDR_EXP 43
51596: PUSH
51597: LD_INT 0
51599: ST_TO_ADDR
// sExp := false ;
51600: LD_ADDR_EXP 44
51604: PUSH
51605: LD_INT 0
51607: ST_TO_ADDR
// sDepot := false ;
51608: LD_ADDR_EXP 45
51612: PUSH
51613: LD_INT 0
51615: ST_TO_ADDR
// sFlag := false ;
51616: LD_ADDR_EXP 46
51620: PUSH
51621: LD_INT 0
51623: ST_TO_ADDR
// sKamikadze := false ;
51624: LD_ADDR_EXP 54
51628: PUSH
51629: LD_INT 0
51631: ST_TO_ADDR
// sTroll := false ;
51632: LD_ADDR_EXP 55
51636: PUSH
51637: LD_INT 0
51639: ST_TO_ADDR
// sSlow := false ;
51640: LD_ADDR_EXP 56
51644: PUSH
51645: LD_INT 0
51647: ST_TO_ADDR
// sLack := false ;
51648: LD_ADDR_EXP 57
51652: PUSH
51653: LD_INT 0
51655: ST_TO_ADDR
// sTank := false ;
51656: LD_ADDR_EXP 59
51660: PUSH
51661: LD_INT 0
51663: ST_TO_ADDR
// sRemote := false ;
51664: LD_ADDR_EXP 60
51668: PUSH
51669: LD_INT 0
51671: ST_TO_ADDR
// sPowell := false ;
51672: LD_ADDR_EXP 61
51676: PUSH
51677: LD_INT 0
51679: ST_TO_ADDR
// sTeleport := false ;
51680: LD_ADDR_EXP 64
51684: PUSH
51685: LD_INT 0
51687: ST_TO_ADDR
// sOilTower := false ;
51688: LD_ADDR_EXP 66
51692: PUSH
51693: LD_INT 0
51695: ST_TO_ADDR
// sShovel := false ;
51696: LD_ADDR_EXP 67
51700: PUSH
51701: LD_INT 0
51703: ST_TO_ADDR
// sSheik := false ;
51704: LD_ADDR_EXP 68
51708: PUSH
51709: LD_INT 0
51711: ST_TO_ADDR
// sEarthquake := false ;
51712: LD_ADDR_EXP 70
51716: PUSH
51717: LD_INT 0
51719: ST_TO_ADDR
// sAI := false ;
51720: LD_ADDR_EXP 71
51724: PUSH
51725: LD_INT 0
51727: ST_TO_ADDR
// sCargo := false ;
51728: LD_ADDR_EXP 74
51732: PUSH
51733: LD_INT 0
51735: ST_TO_ADDR
// sDLaser := false ;
51736: LD_ADDR_EXP 75
51740: PUSH
51741: LD_INT 0
51743: ST_TO_ADDR
// sExchange := false ;
51744: LD_ADDR_EXP 76
51748: PUSH
51749: LD_INT 0
51751: ST_TO_ADDR
// sFac := false ;
51752: LD_ADDR_EXP 77
51756: PUSH
51757: LD_INT 0
51759: ST_TO_ADDR
// sPower := false ;
51760: LD_ADDR_EXP 78
51764: PUSH
51765: LD_INT 0
51767: ST_TO_ADDR
// sRandom := false ;
51768: LD_ADDR_EXP 79
51772: PUSH
51773: LD_INT 0
51775: ST_TO_ADDR
// sShield := false ;
51776: LD_ADDR_EXP 80
51780: PUSH
51781: LD_INT 0
51783: ST_TO_ADDR
// sTime := false ;
51784: LD_ADDR_EXP 81
51788: PUSH
51789: LD_INT 0
51791: ST_TO_ADDR
// sTools := false ;
51792: LD_ADDR_EXP 82
51796: PUSH
51797: LD_INT 0
51799: ST_TO_ADDR
// sSold := false ;
51800: LD_ADDR_EXP 47
51804: PUSH
51805: LD_INT 0
51807: ST_TO_ADDR
// sDiff := false ;
51808: LD_ADDR_EXP 48
51812: PUSH
51813: LD_INT 0
51815: ST_TO_ADDR
// sFog := false ;
51816: LD_ADDR_EXP 51
51820: PUSH
51821: LD_INT 0
51823: ST_TO_ADDR
// sReset := false ;
51824: LD_ADDR_EXP 52
51828: PUSH
51829: LD_INT 0
51831: ST_TO_ADDR
// sSun := false ;
51832: LD_ADDR_EXP 53
51836: PUSH
51837: LD_INT 0
51839: ST_TO_ADDR
// sTiger := false ;
51840: LD_ADDR_EXP 49
51844: PUSH
51845: LD_INT 0
51847: ST_TO_ADDR
// sBomb := false ;
51848: LD_ADDR_EXP 50
51852: PUSH
51853: LD_INT 0
51855: ST_TO_ADDR
// sWound := false ;
51856: LD_ADDR_EXP 58
51860: PUSH
51861: LD_INT 0
51863: ST_TO_ADDR
// sBetray := false ;
51864: LD_ADDR_EXP 62
51868: PUSH
51869: LD_INT 0
51871: ST_TO_ADDR
// sContamin := false ;
51872: LD_ADDR_EXP 63
51876: PUSH
51877: LD_INT 0
51879: ST_TO_ADDR
// sOil := false ;
51880: LD_ADDR_EXP 65
51884: PUSH
51885: LD_INT 0
51887: ST_TO_ADDR
// sStu := false ;
51888: LD_ADDR_EXP 69
51892: PUSH
51893: LD_INT 0
51895: ST_TO_ADDR
// sBazooka := false ;
51896: LD_ADDR_EXP 72
51900: PUSH
51901: LD_INT 0
51903: ST_TO_ADDR
// sMortar := false ;
51904: LD_ADDR_EXP 73
51908: PUSH
51909: LD_INT 0
51911: ST_TO_ADDR
// sRanger := false ;
51912: LD_ADDR_EXP 83
51916: PUSH
51917: LD_INT 0
51919: ST_TO_ADDR
// sComputer := false ;
51920: LD_ADDR_EXP 84
51924: PUSH
51925: LD_INT 0
51927: ST_TO_ADDR
// s30 := false ;
51928: LD_ADDR_EXP 85
51932: PUSH
51933: LD_INT 0
51935: ST_TO_ADDR
// s60 := false ;
51936: LD_ADDR_EXP 86
51940: PUSH
51941: LD_INT 0
51943: ST_TO_ADDR
// end ;
51944: LD_VAR 0 1
51948: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51949: LD_INT 0
51951: PPUSH
51952: PPUSH
51953: PPUSH
51954: PPUSH
51955: PPUSH
51956: PPUSH
51957: PPUSH
// result := [ ] ;
51958: LD_ADDR_VAR 0 2
51962: PUSH
51963: EMPTY
51964: ST_TO_ADDR
// if campaign_id = 1 then
51965: LD_OWVAR 69
51969: PUSH
51970: LD_INT 1
51972: EQUAL
51973: IFFALSE 55139
// begin case mission_number of 1 :
51975: LD_OWVAR 70
51979: PUSH
51980: LD_INT 1
51982: DOUBLE
51983: EQUAL
51984: IFTRUE 51988
51986: GO 52064
51988: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51989: LD_ADDR_VAR 0 2
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: LD_INT 4
51999: PUSH
52000: LD_INT 11
52002: PUSH
52003: LD_INT 12
52005: PUSH
52006: LD_INT 15
52008: PUSH
52009: LD_INT 16
52011: PUSH
52012: LD_INT 22
52014: PUSH
52015: LD_INT 23
52017: PUSH
52018: LD_INT 26
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 101
52034: PUSH
52035: LD_INT 102
52037: PUSH
52038: LD_INT 106
52040: PUSH
52041: LD_INT 116
52043: PUSH
52044: LD_INT 117
52046: PUSH
52047: LD_INT 118
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: ST_TO_ADDR
52062: GO 55137
52064: LD_INT 2
52066: DOUBLE
52067: EQUAL
52068: IFTRUE 52072
52070: GO 52156
52072: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52073: LD_ADDR_VAR 0 2
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 4
52083: PUSH
52084: LD_INT 11
52086: PUSH
52087: LD_INT 12
52089: PUSH
52090: LD_INT 15
52092: PUSH
52093: LD_INT 16
52095: PUSH
52096: LD_INT 22
52098: PUSH
52099: LD_INT 23
52101: PUSH
52102: LD_INT 26
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 101
52118: PUSH
52119: LD_INT 102
52121: PUSH
52122: LD_INT 105
52124: PUSH
52125: LD_INT 106
52127: PUSH
52128: LD_INT 108
52130: PUSH
52131: LD_INT 116
52133: PUSH
52134: LD_INT 117
52136: PUSH
52137: LD_INT 118
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: ST_TO_ADDR
52154: GO 55137
52156: LD_INT 3
52158: DOUBLE
52159: EQUAL
52160: IFTRUE 52164
52162: GO 52252
52164: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52165: LD_ADDR_VAR 0 2
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 4
52175: PUSH
52176: LD_INT 5
52178: PUSH
52179: LD_INT 11
52181: PUSH
52182: LD_INT 12
52184: PUSH
52185: LD_INT 15
52187: PUSH
52188: LD_INT 16
52190: PUSH
52191: LD_INT 22
52193: PUSH
52194: LD_INT 26
52196: PUSH
52197: LD_INT 36
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 101
52214: PUSH
52215: LD_INT 102
52217: PUSH
52218: LD_INT 105
52220: PUSH
52221: LD_INT 106
52223: PUSH
52224: LD_INT 108
52226: PUSH
52227: LD_INT 116
52229: PUSH
52230: LD_INT 117
52232: PUSH
52233: LD_INT 118
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: ST_TO_ADDR
52250: GO 55137
52252: LD_INT 4
52254: DOUBLE
52255: EQUAL
52256: IFTRUE 52260
52258: GO 52356
52260: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52261: LD_ADDR_VAR 0 2
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: LD_INT 4
52271: PUSH
52272: LD_INT 5
52274: PUSH
52275: LD_INT 8
52277: PUSH
52278: LD_INT 11
52280: PUSH
52281: LD_INT 12
52283: PUSH
52284: LD_INT 15
52286: PUSH
52287: LD_INT 16
52289: PUSH
52290: LD_INT 22
52292: PUSH
52293: LD_INT 23
52295: PUSH
52296: LD_INT 26
52298: PUSH
52299: LD_INT 36
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 101
52318: PUSH
52319: LD_INT 102
52321: PUSH
52322: LD_INT 105
52324: PUSH
52325: LD_INT 106
52327: PUSH
52328: LD_INT 108
52330: PUSH
52331: LD_INT 116
52333: PUSH
52334: LD_INT 117
52336: PUSH
52337: LD_INT 118
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: ST_TO_ADDR
52354: GO 55137
52356: LD_INT 5
52358: DOUBLE
52359: EQUAL
52360: IFTRUE 52364
52362: GO 52476
52364: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52365: LD_ADDR_VAR 0 2
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 4
52375: PUSH
52376: LD_INT 5
52378: PUSH
52379: LD_INT 6
52381: PUSH
52382: LD_INT 8
52384: PUSH
52385: LD_INT 11
52387: PUSH
52388: LD_INT 12
52390: PUSH
52391: LD_INT 15
52393: PUSH
52394: LD_INT 16
52396: PUSH
52397: LD_INT 22
52399: PUSH
52400: LD_INT 23
52402: PUSH
52403: LD_INT 25
52405: PUSH
52406: LD_INT 26
52408: PUSH
52409: LD_INT 36
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 101
52430: PUSH
52431: LD_INT 102
52433: PUSH
52434: LD_INT 105
52436: PUSH
52437: LD_INT 106
52439: PUSH
52440: LD_INT 108
52442: PUSH
52443: LD_INT 109
52445: PUSH
52446: LD_INT 112
52448: PUSH
52449: LD_INT 116
52451: PUSH
52452: LD_INT 117
52454: PUSH
52455: LD_INT 118
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: ST_TO_ADDR
52474: GO 55137
52476: LD_INT 6
52478: DOUBLE
52479: EQUAL
52480: IFTRUE 52484
52482: GO 52616
52484: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52485: LD_ADDR_VAR 0 2
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 4
52495: PUSH
52496: LD_INT 5
52498: PUSH
52499: LD_INT 6
52501: PUSH
52502: LD_INT 8
52504: PUSH
52505: LD_INT 11
52507: PUSH
52508: LD_INT 12
52510: PUSH
52511: LD_INT 15
52513: PUSH
52514: LD_INT 16
52516: PUSH
52517: LD_INT 20
52519: PUSH
52520: LD_INT 21
52522: PUSH
52523: LD_INT 22
52525: PUSH
52526: LD_INT 23
52528: PUSH
52529: LD_INT 25
52531: PUSH
52532: LD_INT 26
52534: PUSH
52535: LD_INT 30
52537: PUSH
52538: LD_INT 31
52540: PUSH
52541: LD_INT 32
52543: PUSH
52544: LD_INT 36
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 101
52570: PUSH
52571: LD_INT 102
52573: PUSH
52574: LD_INT 105
52576: PUSH
52577: LD_INT 106
52579: PUSH
52580: LD_INT 108
52582: PUSH
52583: LD_INT 109
52585: PUSH
52586: LD_INT 112
52588: PUSH
52589: LD_INT 116
52591: PUSH
52592: LD_INT 117
52594: PUSH
52595: LD_INT 118
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: ST_TO_ADDR
52614: GO 55137
52616: LD_INT 7
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52624
52622: GO 52736
52624: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52625: LD_ADDR_VAR 0 2
52629: PUSH
52630: LD_INT 2
52632: PUSH
52633: LD_INT 4
52635: PUSH
52636: LD_INT 5
52638: PUSH
52639: LD_INT 7
52641: PUSH
52642: LD_INT 11
52644: PUSH
52645: LD_INT 12
52647: PUSH
52648: LD_INT 15
52650: PUSH
52651: LD_INT 16
52653: PUSH
52654: LD_INT 20
52656: PUSH
52657: LD_INT 21
52659: PUSH
52660: LD_INT 22
52662: PUSH
52663: LD_INT 23
52665: PUSH
52666: LD_INT 25
52668: PUSH
52669: LD_INT 26
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 101
52690: PUSH
52691: LD_INT 102
52693: PUSH
52694: LD_INT 103
52696: PUSH
52697: LD_INT 105
52699: PUSH
52700: LD_INT 106
52702: PUSH
52703: LD_INT 108
52705: PUSH
52706: LD_INT 112
52708: PUSH
52709: LD_INT 116
52711: PUSH
52712: LD_INT 117
52714: PUSH
52715: LD_INT 118
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: ST_TO_ADDR
52734: GO 55137
52736: LD_INT 8
52738: DOUBLE
52739: EQUAL
52740: IFTRUE 52744
52742: GO 52884
52744: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52745: LD_ADDR_VAR 0 2
52749: PUSH
52750: LD_INT 2
52752: PUSH
52753: LD_INT 4
52755: PUSH
52756: LD_INT 5
52758: PUSH
52759: LD_INT 6
52761: PUSH
52762: LD_INT 7
52764: PUSH
52765: LD_INT 8
52767: PUSH
52768: LD_INT 11
52770: PUSH
52771: LD_INT 12
52773: PUSH
52774: LD_INT 15
52776: PUSH
52777: LD_INT 16
52779: PUSH
52780: LD_INT 20
52782: PUSH
52783: LD_INT 21
52785: PUSH
52786: LD_INT 22
52788: PUSH
52789: LD_INT 23
52791: PUSH
52792: LD_INT 25
52794: PUSH
52795: LD_INT 26
52797: PUSH
52798: LD_INT 30
52800: PUSH
52801: LD_INT 31
52803: PUSH
52804: LD_INT 32
52806: PUSH
52807: LD_INT 36
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 101
52834: PUSH
52835: LD_INT 102
52837: PUSH
52838: LD_INT 103
52840: PUSH
52841: LD_INT 105
52843: PUSH
52844: LD_INT 106
52846: PUSH
52847: LD_INT 108
52849: PUSH
52850: LD_INT 109
52852: PUSH
52853: LD_INT 112
52855: PUSH
52856: LD_INT 116
52858: PUSH
52859: LD_INT 117
52861: PUSH
52862: LD_INT 118
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: ST_TO_ADDR
52882: GO 55137
52884: LD_INT 9
52886: DOUBLE
52887: EQUAL
52888: IFTRUE 52892
52890: GO 53040
52892: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52893: LD_ADDR_VAR 0 2
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 4
52903: PUSH
52904: LD_INT 5
52906: PUSH
52907: LD_INT 6
52909: PUSH
52910: LD_INT 7
52912: PUSH
52913: LD_INT 8
52915: PUSH
52916: LD_INT 11
52918: PUSH
52919: LD_INT 12
52921: PUSH
52922: LD_INT 15
52924: PUSH
52925: LD_INT 16
52927: PUSH
52928: LD_INT 20
52930: PUSH
52931: LD_INT 21
52933: PUSH
52934: LD_INT 22
52936: PUSH
52937: LD_INT 23
52939: PUSH
52940: LD_INT 25
52942: PUSH
52943: LD_INT 26
52945: PUSH
52946: LD_INT 28
52948: PUSH
52949: LD_INT 30
52951: PUSH
52952: LD_INT 31
52954: PUSH
52955: LD_INT 32
52957: PUSH
52958: LD_INT 36
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 101
52986: PUSH
52987: LD_INT 102
52989: PUSH
52990: LD_INT 103
52992: PUSH
52993: LD_INT 105
52995: PUSH
52996: LD_INT 106
52998: PUSH
52999: LD_INT 108
53001: PUSH
53002: LD_INT 109
53004: PUSH
53005: LD_INT 112
53007: PUSH
53008: LD_INT 114
53010: PUSH
53011: LD_INT 116
53013: PUSH
53014: LD_INT 117
53016: PUSH
53017: LD_INT 118
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: ST_TO_ADDR
53038: GO 55137
53040: LD_INT 10
53042: DOUBLE
53043: EQUAL
53044: IFTRUE 53048
53046: GO 53244
53048: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53049: LD_ADDR_VAR 0 2
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 4
53059: PUSH
53060: LD_INT 5
53062: PUSH
53063: LD_INT 6
53065: PUSH
53066: LD_INT 7
53068: PUSH
53069: LD_INT 8
53071: PUSH
53072: LD_INT 9
53074: PUSH
53075: LD_INT 10
53077: PUSH
53078: LD_INT 11
53080: PUSH
53081: LD_INT 12
53083: PUSH
53084: LD_INT 13
53086: PUSH
53087: LD_INT 14
53089: PUSH
53090: LD_INT 15
53092: PUSH
53093: LD_INT 16
53095: PUSH
53096: LD_INT 17
53098: PUSH
53099: LD_INT 18
53101: PUSH
53102: LD_INT 19
53104: PUSH
53105: LD_INT 20
53107: PUSH
53108: LD_INT 21
53110: PUSH
53111: LD_INT 22
53113: PUSH
53114: LD_INT 23
53116: PUSH
53117: LD_INT 24
53119: PUSH
53120: LD_INT 25
53122: PUSH
53123: LD_INT 26
53125: PUSH
53126: LD_INT 28
53128: PUSH
53129: LD_INT 30
53131: PUSH
53132: LD_INT 31
53134: PUSH
53135: LD_INT 32
53137: PUSH
53138: LD_INT 36
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 101
53174: PUSH
53175: LD_INT 102
53177: PUSH
53178: LD_INT 103
53180: PUSH
53181: LD_INT 104
53183: PUSH
53184: LD_INT 105
53186: PUSH
53187: LD_INT 106
53189: PUSH
53190: LD_INT 107
53192: PUSH
53193: LD_INT 108
53195: PUSH
53196: LD_INT 109
53198: PUSH
53199: LD_INT 110
53201: PUSH
53202: LD_INT 111
53204: PUSH
53205: LD_INT 112
53207: PUSH
53208: LD_INT 114
53210: PUSH
53211: LD_INT 116
53213: PUSH
53214: LD_INT 117
53216: PUSH
53217: LD_INT 118
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: ST_TO_ADDR
53242: GO 55137
53244: LD_INT 11
53246: DOUBLE
53247: EQUAL
53248: IFTRUE 53252
53250: GO 53456
53252: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53253: LD_ADDR_VAR 0 2
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: LD_INT 4
53266: PUSH
53267: LD_INT 5
53269: PUSH
53270: LD_INT 6
53272: PUSH
53273: LD_INT 7
53275: PUSH
53276: LD_INT 8
53278: PUSH
53279: LD_INT 9
53281: PUSH
53282: LD_INT 10
53284: PUSH
53285: LD_INT 11
53287: PUSH
53288: LD_INT 12
53290: PUSH
53291: LD_INT 13
53293: PUSH
53294: LD_INT 14
53296: PUSH
53297: LD_INT 15
53299: PUSH
53300: LD_INT 16
53302: PUSH
53303: LD_INT 17
53305: PUSH
53306: LD_INT 18
53308: PUSH
53309: LD_INT 19
53311: PUSH
53312: LD_INT 20
53314: PUSH
53315: LD_INT 21
53317: PUSH
53318: LD_INT 22
53320: PUSH
53321: LD_INT 23
53323: PUSH
53324: LD_INT 24
53326: PUSH
53327: LD_INT 25
53329: PUSH
53330: LD_INT 26
53332: PUSH
53333: LD_INT 28
53335: PUSH
53336: LD_INT 30
53338: PUSH
53339: LD_INT 31
53341: PUSH
53342: LD_INT 32
53344: PUSH
53345: LD_INT 34
53347: PUSH
53348: LD_INT 36
53350: PUSH
53351: EMPTY
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 101
53386: PUSH
53387: LD_INT 102
53389: PUSH
53390: LD_INT 103
53392: PUSH
53393: LD_INT 104
53395: PUSH
53396: LD_INT 105
53398: PUSH
53399: LD_INT 106
53401: PUSH
53402: LD_INT 107
53404: PUSH
53405: LD_INT 108
53407: PUSH
53408: LD_INT 109
53410: PUSH
53411: LD_INT 110
53413: PUSH
53414: LD_INT 111
53416: PUSH
53417: LD_INT 112
53419: PUSH
53420: LD_INT 114
53422: PUSH
53423: LD_INT 116
53425: PUSH
53426: LD_INT 117
53428: PUSH
53429: LD_INT 118
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: ST_TO_ADDR
53454: GO 55137
53456: LD_INT 12
53458: DOUBLE
53459: EQUAL
53460: IFTRUE 53464
53462: GO 53684
53464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53465: LD_ADDR_VAR 0 2
53469: PUSH
53470: LD_INT 1
53472: PUSH
53473: LD_INT 2
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: LD_INT 4
53481: PUSH
53482: LD_INT 5
53484: PUSH
53485: LD_INT 6
53487: PUSH
53488: LD_INT 7
53490: PUSH
53491: LD_INT 8
53493: PUSH
53494: LD_INT 9
53496: PUSH
53497: LD_INT 10
53499: PUSH
53500: LD_INT 11
53502: PUSH
53503: LD_INT 12
53505: PUSH
53506: LD_INT 13
53508: PUSH
53509: LD_INT 14
53511: PUSH
53512: LD_INT 15
53514: PUSH
53515: LD_INT 16
53517: PUSH
53518: LD_INT 17
53520: PUSH
53521: LD_INT 18
53523: PUSH
53524: LD_INT 19
53526: PUSH
53527: LD_INT 20
53529: PUSH
53530: LD_INT 21
53532: PUSH
53533: LD_INT 22
53535: PUSH
53536: LD_INT 23
53538: PUSH
53539: LD_INT 24
53541: PUSH
53542: LD_INT 25
53544: PUSH
53545: LD_INT 26
53547: PUSH
53548: LD_INT 27
53550: PUSH
53551: LD_INT 28
53553: PUSH
53554: LD_INT 30
53556: PUSH
53557: LD_INT 31
53559: PUSH
53560: LD_INT 32
53562: PUSH
53563: LD_INT 33
53565: PUSH
53566: LD_INT 34
53568: PUSH
53569: LD_INT 36
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 101
53610: PUSH
53611: LD_INT 102
53613: PUSH
53614: LD_INT 103
53616: PUSH
53617: LD_INT 104
53619: PUSH
53620: LD_INT 105
53622: PUSH
53623: LD_INT 106
53625: PUSH
53626: LD_INT 107
53628: PUSH
53629: LD_INT 108
53631: PUSH
53632: LD_INT 109
53634: PUSH
53635: LD_INT 110
53637: PUSH
53638: LD_INT 111
53640: PUSH
53641: LD_INT 112
53643: PUSH
53644: LD_INT 113
53646: PUSH
53647: LD_INT 114
53649: PUSH
53650: LD_INT 116
53652: PUSH
53653: LD_INT 117
53655: PUSH
53656: LD_INT 118
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: ST_TO_ADDR
53682: GO 55137
53684: LD_INT 13
53686: DOUBLE
53687: EQUAL
53688: IFTRUE 53692
53690: GO 53900
53692: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53693: LD_ADDR_VAR 0 2
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 4
53709: PUSH
53710: LD_INT 5
53712: PUSH
53713: LD_INT 8
53715: PUSH
53716: LD_INT 9
53718: PUSH
53719: LD_INT 10
53721: PUSH
53722: LD_INT 11
53724: PUSH
53725: LD_INT 12
53727: PUSH
53728: LD_INT 14
53730: PUSH
53731: LD_INT 15
53733: PUSH
53734: LD_INT 16
53736: PUSH
53737: LD_INT 17
53739: PUSH
53740: LD_INT 18
53742: PUSH
53743: LD_INT 19
53745: PUSH
53746: LD_INT 20
53748: PUSH
53749: LD_INT 21
53751: PUSH
53752: LD_INT 22
53754: PUSH
53755: LD_INT 23
53757: PUSH
53758: LD_INT 24
53760: PUSH
53761: LD_INT 25
53763: PUSH
53764: LD_INT 26
53766: PUSH
53767: LD_INT 27
53769: PUSH
53770: LD_INT 28
53772: PUSH
53773: LD_INT 30
53775: PUSH
53776: LD_INT 31
53778: PUSH
53779: LD_INT 32
53781: PUSH
53782: LD_INT 33
53784: PUSH
53785: LD_INT 34
53787: PUSH
53788: LD_INT 36
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 101
53826: PUSH
53827: LD_INT 102
53829: PUSH
53830: LD_INT 103
53832: PUSH
53833: LD_INT 104
53835: PUSH
53836: LD_INT 105
53838: PUSH
53839: LD_INT 106
53841: PUSH
53842: LD_INT 107
53844: PUSH
53845: LD_INT 108
53847: PUSH
53848: LD_INT 109
53850: PUSH
53851: LD_INT 110
53853: PUSH
53854: LD_INT 111
53856: PUSH
53857: LD_INT 112
53859: PUSH
53860: LD_INT 113
53862: PUSH
53863: LD_INT 114
53865: PUSH
53866: LD_INT 116
53868: PUSH
53869: LD_INT 117
53871: PUSH
53872: LD_INT 118
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: ST_TO_ADDR
53898: GO 55137
53900: LD_INT 14
53902: DOUBLE
53903: EQUAL
53904: IFTRUE 53908
53906: GO 54132
53908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53909: LD_ADDR_VAR 0 2
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 2
53919: PUSH
53920: LD_INT 3
53922: PUSH
53923: LD_INT 4
53925: PUSH
53926: LD_INT 5
53928: PUSH
53929: LD_INT 6
53931: PUSH
53932: LD_INT 7
53934: PUSH
53935: LD_INT 8
53937: PUSH
53938: LD_INT 9
53940: PUSH
53941: LD_INT 10
53943: PUSH
53944: LD_INT 11
53946: PUSH
53947: LD_INT 12
53949: PUSH
53950: LD_INT 13
53952: PUSH
53953: LD_INT 14
53955: PUSH
53956: LD_INT 15
53958: PUSH
53959: LD_INT 16
53961: PUSH
53962: LD_INT 17
53964: PUSH
53965: LD_INT 18
53967: PUSH
53968: LD_INT 19
53970: PUSH
53971: LD_INT 20
53973: PUSH
53974: LD_INT 21
53976: PUSH
53977: LD_INT 22
53979: PUSH
53980: LD_INT 23
53982: PUSH
53983: LD_INT 24
53985: PUSH
53986: LD_INT 25
53988: PUSH
53989: LD_INT 26
53991: PUSH
53992: LD_INT 27
53994: PUSH
53995: LD_INT 28
53997: PUSH
53998: LD_INT 29
54000: PUSH
54001: LD_INT 30
54003: PUSH
54004: LD_INT 31
54006: PUSH
54007: LD_INT 32
54009: PUSH
54010: LD_INT 33
54012: PUSH
54013: LD_INT 34
54015: PUSH
54016: LD_INT 36
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 101
54058: PUSH
54059: LD_INT 102
54061: PUSH
54062: LD_INT 103
54064: PUSH
54065: LD_INT 104
54067: PUSH
54068: LD_INT 105
54070: PUSH
54071: LD_INT 106
54073: PUSH
54074: LD_INT 107
54076: PUSH
54077: LD_INT 108
54079: PUSH
54080: LD_INT 109
54082: PUSH
54083: LD_INT 110
54085: PUSH
54086: LD_INT 111
54088: PUSH
54089: LD_INT 112
54091: PUSH
54092: LD_INT 113
54094: PUSH
54095: LD_INT 114
54097: PUSH
54098: LD_INT 116
54100: PUSH
54101: LD_INT 117
54103: PUSH
54104: LD_INT 118
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: ST_TO_ADDR
54130: GO 55137
54132: LD_INT 15
54134: DOUBLE
54135: EQUAL
54136: IFTRUE 54140
54138: GO 54364
54140: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54141: LD_ADDR_VAR 0 2
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 2
54151: PUSH
54152: LD_INT 3
54154: PUSH
54155: LD_INT 4
54157: PUSH
54158: LD_INT 5
54160: PUSH
54161: LD_INT 6
54163: PUSH
54164: LD_INT 7
54166: PUSH
54167: LD_INT 8
54169: PUSH
54170: LD_INT 9
54172: PUSH
54173: LD_INT 10
54175: PUSH
54176: LD_INT 11
54178: PUSH
54179: LD_INT 12
54181: PUSH
54182: LD_INT 13
54184: PUSH
54185: LD_INT 14
54187: PUSH
54188: LD_INT 15
54190: PUSH
54191: LD_INT 16
54193: PUSH
54194: LD_INT 17
54196: PUSH
54197: LD_INT 18
54199: PUSH
54200: LD_INT 19
54202: PUSH
54203: LD_INT 20
54205: PUSH
54206: LD_INT 21
54208: PUSH
54209: LD_INT 22
54211: PUSH
54212: LD_INT 23
54214: PUSH
54215: LD_INT 24
54217: PUSH
54218: LD_INT 25
54220: PUSH
54221: LD_INT 26
54223: PUSH
54224: LD_INT 27
54226: PUSH
54227: LD_INT 28
54229: PUSH
54230: LD_INT 29
54232: PUSH
54233: LD_INT 30
54235: PUSH
54236: LD_INT 31
54238: PUSH
54239: LD_INT 32
54241: PUSH
54242: LD_INT 33
54244: PUSH
54245: LD_INT 34
54247: PUSH
54248: LD_INT 36
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 101
54290: PUSH
54291: LD_INT 102
54293: PUSH
54294: LD_INT 103
54296: PUSH
54297: LD_INT 104
54299: PUSH
54300: LD_INT 105
54302: PUSH
54303: LD_INT 106
54305: PUSH
54306: LD_INT 107
54308: PUSH
54309: LD_INT 108
54311: PUSH
54312: LD_INT 109
54314: PUSH
54315: LD_INT 110
54317: PUSH
54318: LD_INT 111
54320: PUSH
54321: LD_INT 112
54323: PUSH
54324: LD_INT 113
54326: PUSH
54327: LD_INT 114
54329: PUSH
54330: LD_INT 116
54332: PUSH
54333: LD_INT 117
54335: PUSH
54336: LD_INT 118
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: ST_TO_ADDR
54362: GO 55137
54364: LD_INT 16
54366: DOUBLE
54367: EQUAL
54368: IFTRUE 54372
54370: GO 54508
54372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54373: LD_ADDR_VAR 0 2
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 4
54383: PUSH
54384: LD_INT 5
54386: PUSH
54387: LD_INT 7
54389: PUSH
54390: LD_INT 11
54392: PUSH
54393: LD_INT 12
54395: PUSH
54396: LD_INT 15
54398: PUSH
54399: LD_INT 16
54401: PUSH
54402: LD_INT 20
54404: PUSH
54405: LD_INT 21
54407: PUSH
54408: LD_INT 22
54410: PUSH
54411: LD_INT 23
54413: PUSH
54414: LD_INT 25
54416: PUSH
54417: LD_INT 26
54419: PUSH
54420: LD_INT 30
54422: PUSH
54423: LD_INT 31
54425: PUSH
54426: LD_INT 32
54428: PUSH
54429: LD_INT 33
54431: PUSH
54432: LD_INT 34
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 101
54458: PUSH
54459: LD_INT 102
54461: PUSH
54462: LD_INT 103
54464: PUSH
54465: LD_INT 106
54467: PUSH
54468: LD_INT 108
54470: PUSH
54471: LD_INT 112
54473: PUSH
54474: LD_INT 113
54476: PUSH
54477: LD_INT 114
54479: PUSH
54480: LD_INT 116
54482: PUSH
54483: LD_INT 117
54485: PUSH
54486: LD_INT 118
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: ST_TO_ADDR
54506: GO 55137
54508: LD_INT 17
54510: DOUBLE
54511: EQUAL
54512: IFTRUE 54516
54514: GO 54740
54516: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54517: LD_ADDR_VAR 0 2
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: LD_INT 3
54530: PUSH
54531: LD_INT 4
54533: PUSH
54534: LD_INT 5
54536: PUSH
54537: LD_INT 6
54539: PUSH
54540: LD_INT 7
54542: PUSH
54543: LD_INT 8
54545: PUSH
54546: LD_INT 9
54548: PUSH
54549: LD_INT 10
54551: PUSH
54552: LD_INT 11
54554: PUSH
54555: LD_INT 12
54557: PUSH
54558: LD_INT 13
54560: PUSH
54561: LD_INT 14
54563: PUSH
54564: LD_INT 15
54566: PUSH
54567: LD_INT 16
54569: PUSH
54570: LD_INT 17
54572: PUSH
54573: LD_INT 18
54575: PUSH
54576: LD_INT 19
54578: PUSH
54579: LD_INT 20
54581: PUSH
54582: LD_INT 21
54584: PUSH
54585: LD_INT 22
54587: PUSH
54588: LD_INT 23
54590: PUSH
54591: LD_INT 24
54593: PUSH
54594: LD_INT 25
54596: PUSH
54597: LD_INT 26
54599: PUSH
54600: LD_INT 27
54602: PUSH
54603: LD_INT 28
54605: PUSH
54606: LD_INT 29
54608: PUSH
54609: LD_INT 30
54611: PUSH
54612: LD_INT 31
54614: PUSH
54615: LD_INT 32
54617: PUSH
54618: LD_INT 33
54620: PUSH
54621: LD_INT 34
54623: PUSH
54624: LD_INT 36
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 101
54666: PUSH
54667: LD_INT 102
54669: PUSH
54670: LD_INT 103
54672: PUSH
54673: LD_INT 104
54675: PUSH
54676: LD_INT 105
54678: PUSH
54679: LD_INT 106
54681: PUSH
54682: LD_INT 107
54684: PUSH
54685: LD_INT 108
54687: PUSH
54688: LD_INT 109
54690: PUSH
54691: LD_INT 110
54693: PUSH
54694: LD_INT 111
54696: PUSH
54697: LD_INT 112
54699: PUSH
54700: LD_INT 113
54702: PUSH
54703: LD_INT 114
54705: PUSH
54706: LD_INT 116
54708: PUSH
54709: LD_INT 117
54711: PUSH
54712: LD_INT 118
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: ST_TO_ADDR
54738: GO 55137
54740: LD_INT 18
54742: DOUBLE
54743: EQUAL
54744: IFTRUE 54748
54746: GO 54896
54748: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54749: LD_ADDR_VAR 0 2
54753: PUSH
54754: LD_INT 2
54756: PUSH
54757: LD_INT 4
54759: PUSH
54760: LD_INT 5
54762: PUSH
54763: LD_INT 7
54765: PUSH
54766: LD_INT 11
54768: PUSH
54769: LD_INT 12
54771: PUSH
54772: LD_INT 15
54774: PUSH
54775: LD_INT 16
54777: PUSH
54778: LD_INT 20
54780: PUSH
54781: LD_INT 21
54783: PUSH
54784: LD_INT 22
54786: PUSH
54787: LD_INT 23
54789: PUSH
54790: LD_INT 25
54792: PUSH
54793: LD_INT 26
54795: PUSH
54796: LD_INT 30
54798: PUSH
54799: LD_INT 31
54801: PUSH
54802: LD_INT 32
54804: PUSH
54805: LD_INT 33
54807: PUSH
54808: LD_INT 34
54810: PUSH
54811: LD_INT 35
54813: PUSH
54814: LD_INT 36
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 101
54842: PUSH
54843: LD_INT 102
54845: PUSH
54846: LD_INT 103
54848: PUSH
54849: LD_INT 106
54851: PUSH
54852: LD_INT 108
54854: PUSH
54855: LD_INT 112
54857: PUSH
54858: LD_INT 113
54860: PUSH
54861: LD_INT 114
54863: PUSH
54864: LD_INT 115
54866: PUSH
54867: LD_INT 116
54869: PUSH
54870: LD_INT 117
54872: PUSH
54873: LD_INT 118
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: ST_TO_ADDR
54894: GO 55137
54896: LD_INT 19
54898: DOUBLE
54899: EQUAL
54900: IFTRUE 54904
54902: GO 55136
54904: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54905: LD_ADDR_VAR 0 2
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 3
54918: PUSH
54919: LD_INT 4
54921: PUSH
54922: LD_INT 5
54924: PUSH
54925: LD_INT 6
54927: PUSH
54928: LD_INT 7
54930: PUSH
54931: LD_INT 8
54933: PUSH
54934: LD_INT 9
54936: PUSH
54937: LD_INT 10
54939: PUSH
54940: LD_INT 11
54942: PUSH
54943: LD_INT 12
54945: PUSH
54946: LD_INT 13
54948: PUSH
54949: LD_INT 14
54951: PUSH
54952: LD_INT 15
54954: PUSH
54955: LD_INT 16
54957: PUSH
54958: LD_INT 17
54960: PUSH
54961: LD_INT 18
54963: PUSH
54964: LD_INT 19
54966: PUSH
54967: LD_INT 20
54969: PUSH
54970: LD_INT 21
54972: PUSH
54973: LD_INT 22
54975: PUSH
54976: LD_INT 23
54978: PUSH
54979: LD_INT 24
54981: PUSH
54982: LD_INT 25
54984: PUSH
54985: LD_INT 26
54987: PUSH
54988: LD_INT 27
54990: PUSH
54991: LD_INT 28
54993: PUSH
54994: LD_INT 29
54996: PUSH
54997: LD_INT 30
54999: PUSH
55000: LD_INT 31
55002: PUSH
55003: LD_INT 32
55005: PUSH
55006: LD_INT 33
55008: PUSH
55009: LD_INT 34
55011: PUSH
55012: LD_INT 35
55014: PUSH
55015: LD_INT 36
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 101
55058: PUSH
55059: LD_INT 102
55061: PUSH
55062: LD_INT 103
55064: PUSH
55065: LD_INT 104
55067: PUSH
55068: LD_INT 105
55070: PUSH
55071: LD_INT 106
55073: PUSH
55074: LD_INT 107
55076: PUSH
55077: LD_INT 108
55079: PUSH
55080: LD_INT 109
55082: PUSH
55083: LD_INT 110
55085: PUSH
55086: LD_INT 111
55088: PUSH
55089: LD_INT 112
55091: PUSH
55092: LD_INT 113
55094: PUSH
55095: LD_INT 114
55097: PUSH
55098: LD_INT 115
55100: PUSH
55101: LD_INT 116
55103: PUSH
55104: LD_INT 117
55106: PUSH
55107: LD_INT 118
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: ST_TO_ADDR
55134: GO 55137
55136: POP
// end else
55137: GO 55368
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55139: LD_ADDR_VAR 0 2
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 3
55152: PUSH
55153: LD_INT 4
55155: PUSH
55156: LD_INT 5
55158: PUSH
55159: LD_INT 6
55161: PUSH
55162: LD_INT 7
55164: PUSH
55165: LD_INT 8
55167: PUSH
55168: LD_INT 9
55170: PUSH
55171: LD_INT 10
55173: PUSH
55174: LD_INT 11
55176: PUSH
55177: LD_INT 12
55179: PUSH
55180: LD_INT 13
55182: PUSH
55183: LD_INT 14
55185: PUSH
55186: LD_INT 15
55188: PUSH
55189: LD_INT 16
55191: PUSH
55192: LD_INT 17
55194: PUSH
55195: LD_INT 18
55197: PUSH
55198: LD_INT 19
55200: PUSH
55201: LD_INT 20
55203: PUSH
55204: LD_INT 21
55206: PUSH
55207: LD_INT 22
55209: PUSH
55210: LD_INT 23
55212: PUSH
55213: LD_INT 24
55215: PUSH
55216: LD_INT 25
55218: PUSH
55219: LD_INT 26
55221: PUSH
55222: LD_INT 27
55224: PUSH
55225: LD_INT 28
55227: PUSH
55228: LD_INT 29
55230: PUSH
55231: LD_INT 30
55233: PUSH
55234: LD_INT 31
55236: PUSH
55237: LD_INT 32
55239: PUSH
55240: LD_INT 33
55242: PUSH
55243: LD_INT 34
55245: PUSH
55246: LD_INT 35
55248: PUSH
55249: LD_INT 36
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 101
55292: PUSH
55293: LD_INT 102
55295: PUSH
55296: LD_INT 103
55298: PUSH
55299: LD_INT 104
55301: PUSH
55302: LD_INT 105
55304: PUSH
55305: LD_INT 106
55307: PUSH
55308: LD_INT 107
55310: PUSH
55311: LD_INT 108
55313: PUSH
55314: LD_INT 109
55316: PUSH
55317: LD_INT 110
55319: PUSH
55320: LD_INT 111
55322: PUSH
55323: LD_INT 112
55325: PUSH
55326: LD_INT 113
55328: PUSH
55329: LD_INT 114
55331: PUSH
55332: LD_INT 115
55334: PUSH
55335: LD_INT 116
55337: PUSH
55338: LD_INT 117
55340: PUSH
55341: LD_INT 118
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// if result then
55368: LD_VAR 0 2
55372: IFFALSE 56158
// begin normal :=  ;
55374: LD_ADDR_VAR 0 5
55378: PUSH
55379: LD_STRING 
55381: ST_TO_ADDR
// hardcore :=  ;
55382: LD_ADDR_VAR 0 6
55386: PUSH
55387: LD_STRING 
55389: ST_TO_ADDR
// active :=  ;
55390: LD_ADDR_VAR 0 7
55394: PUSH
55395: LD_STRING 
55397: ST_TO_ADDR
// for i = 1 to normalCounter do
55398: LD_ADDR_VAR 0 8
55402: PUSH
55403: DOUBLE
55404: LD_INT 1
55406: DEC
55407: ST_TO_ADDR
55408: LD_EXP 31
55412: PUSH
55413: FOR_TO
55414: IFFALSE 55515
// begin tmp := 0 ;
55416: LD_ADDR_VAR 0 3
55420: PUSH
55421: LD_STRING 0
55423: ST_TO_ADDR
// if result [ 1 ] then
55424: LD_VAR 0 2
55428: PUSH
55429: LD_INT 1
55431: ARRAY
55432: IFFALSE 55497
// if result [ 1 ] [ 1 ] = i then
55434: LD_VAR 0 2
55438: PUSH
55439: LD_INT 1
55441: ARRAY
55442: PUSH
55443: LD_INT 1
55445: ARRAY
55446: PUSH
55447: LD_VAR 0 8
55451: EQUAL
55452: IFFALSE 55497
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55454: LD_ADDR_VAR 0 2
55458: PUSH
55459: LD_VAR 0 2
55463: PPUSH
55464: LD_INT 1
55466: PPUSH
55467: LD_VAR 0 2
55471: PUSH
55472: LD_INT 1
55474: ARRAY
55475: PPUSH
55476: LD_INT 1
55478: PPUSH
55479: CALL_OW 3
55483: PPUSH
55484: CALL_OW 1
55488: ST_TO_ADDR
// tmp := 1 ;
55489: LD_ADDR_VAR 0 3
55493: PUSH
55494: LD_STRING 1
55496: ST_TO_ADDR
// end ; normal := normal & tmp ;
55497: LD_ADDR_VAR 0 5
55501: PUSH
55502: LD_VAR 0 5
55506: PUSH
55507: LD_VAR 0 3
55511: STR
55512: ST_TO_ADDR
// end ;
55513: GO 55413
55515: POP
55516: POP
// for i = 1 to hardcoreCounter do
55517: LD_ADDR_VAR 0 8
55521: PUSH
55522: DOUBLE
55523: LD_INT 1
55525: DEC
55526: ST_TO_ADDR
55527: LD_EXP 32
55531: PUSH
55532: FOR_TO
55533: IFFALSE 55638
// begin tmp := 0 ;
55535: LD_ADDR_VAR 0 3
55539: PUSH
55540: LD_STRING 0
55542: ST_TO_ADDR
// if result [ 2 ] then
55543: LD_VAR 0 2
55547: PUSH
55548: LD_INT 2
55550: ARRAY
55551: IFFALSE 55620
// if result [ 2 ] [ 1 ] = 100 + i then
55553: LD_VAR 0 2
55557: PUSH
55558: LD_INT 2
55560: ARRAY
55561: PUSH
55562: LD_INT 1
55564: ARRAY
55565: PUSH
55566: LD_INT 100
55568: PUSH
55569: LD_VAR 0 8
55573: PLUS
55574: EQUAL
55575: IFFALSE 55620
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55577: LD_ADDR_VAR 0 2
55581: PUSH
55582: LD_VAR 0 2
55586: PPUSH
55587: LD_INT 2
55589: PPUSH
55590: LD_VAR 0 2
55594: PUSH
55595: LD_INT 2
55597: ARRAY
55598: PPUSH
55599: LD_INT 1
55601: PPUSH
55602: CALL_OW 3
55606: PPUSH
55607: CALL_OW 1
55611: ST_TO_ADDR
// tmp := 1 ;
55612: LD_ADDR_VAR 0 3
55616: PUSH
55617: LD_STRING 1
55619: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55620: LD_ADDR_VAR 0 6
55624: PUSH
55625: LD_VAR 0 6
55629: PUSH
55630: LD_VAR 0 3
55634: STR
55635: ST_TO_ADDR
// end ;
55636: GO 55532
55638: POP
55639: POP
// if isGameLoad then
55640: LD_VAR 0 1
55644: IFFALSE 56119
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55646: LD_ADDR_VAR 0 4
55650: PUSH
55651: LD_EXP 35
55655: PUSH
55656: LD_EXP 34
55660: PUSH
55661: LD_EXP 36
55665: PUSH
55666: LD_EXP 33
55670: PUSH
55671: LD_EXP 37
55675: PUSH
55676: LD_EXP 38
55680: PUSH
55681: LD_EXP 39
55685: PUSH
55686: LD_EXP 40
55690: PUSH
55691: LD_EXP 41
55695: PUSH
55696: LD_EXP 42
55700: PUSH
55701: LD_EXP 43
55705: PUSH
55706: LD_EXP 44
55710: PUSH
55711: LD_EXP 45
55715: PUSH
55716: LD_EXP 46
55720: PUSH
55721: LD_EXP 54
55725: PUSH
55726: LD_EXP 55
55730: PUSH
55731: LD_EXP 56
55735: PUSH
55736: LD_EXP 57
55740: PUSH
55741: LD_EXP 59
55745: PUSH
55746: LD_EXP 60
55750: PUSH
55751: LD_EXP 61
55755: PUSH
55756: LD_EXP 64
55760: PUSH
55761: LD_EXP 66
55765: PUSH
55766: LD_EXP 67
55770: PUSH
55771: LD_EXP 68
55775: PUSH
55776: LD_EXP 70
55780: PUSH
55781: LD_EXP 71
55785: PUSH
55786: LD_EXP 74
55790: PUSH
55791: LD_EXP 75
55795: PUSH
55796: LD_EXP 76
55800: PUSH
55801: LD_EXP 77
55805: PUSH
55806: LD_EXP 78
55810: PUSH
55811: LD_EXP 79
55815: PUSH
55816: LD_EXP 80
55820: PUSH
55821: LD_EXP 81
55825: PUSH
55826: LD_EXP 82
55830: PUSH
55831: LD_EXP 47
55835: PUSH
55836: LD_EXP 48
55840: PUSH
55841: LD_EXP 51
55845: PUSH
55846: LD_EXP 52
55850: PUSH
55851: LD_EXP 53
55855: PUSH
55856: LD_EXP 49
55860: PUSH
55861: LD_EXP 50
55865: PUSH
55866: LD_EXP 58
55870: PUSH
55871: LD_EXP 62
55875: PUSH
55876: LD_EXP 63
55880: PUSH
55881: LD_EXP 65
55885: PUSH
55886: LD_EXP 69
55890: PUSH
55891: LD_EXP 72
55895: PUSH
55896: LD_EXP 73
55900: PUSH
55901: LD_EXP 83
55905: PUSH
55906: LD_EXP 84
55910: PUSH
55911: LD_EXP 85
55915: PUSH
55916: LD_EXP 86
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// tmp :=  ;
55977: LD_ADDR_VAR 0 3
55981: PUSH
55982: LD_STRING 
55984: ST_TO_ADDR
// for i = 1 to normalCounter do
55985: LD_ADDR_VAR 0 8
55989: PUSH
55990: DOUBLE
55991: LD_INT 1
55993: DEC
55994: ST_TO_ADDR
55995: LD_EXP 31
55999: PUSH
56000: FOR_TO
56001: IFFALSE 56037
// begin if flags [ i ] then
56003: LD_VAR 0 4
56007: PUSH
56008: LD_VAR 0 8
56012: ARRAY
56013: IFFALSE 56035
// tmp := tmp & i & ; ;
56015: LD_ADDR_VAR 0 3
56019: PUSH
56020: LD_VAR 0 3
56024: PUSH
56025: LD_VAR 0 8
56029: STR
56030: PUSH
56031: LD_STRING ;
56033: STR
56034: ST_TO_ADDR
// end ;
56035: GO 56000
56037: POP
56038: POP
// for i = 1 to hardcoreCounter do
56039: LD_ADDR_VAR 0 8
56043: PUSH
56044: DOUBLE
56045: LD_INT 1
56047: DEC
56048: ST_TO_ADDR
56049: LD_EXP 32
56053: PUSH
56054: FOR_TO
56055: IFFALSE 56101
// begin if flags [ normalCounter + i ] then
56057: LD_VAR 0 4
56061: PUSH
56062: LD_EXP 31
56066: PUSH
56067: LD_VAR 0 8
56071: PLUS
56072: ARRAY
56073: IFFALSE 56099
// tmp := tmp & ( 100 + i ) & ; ;
56075: LD_ADDR_VAR 0 3
56079: PUSH
56080: LD_VAR 0 3
56084: PUSH
56085: LD_INT 100
56087: PUSH
56088: LD_VAR 0 8
56092: PLUS
56093: STR
56094: PUSH
56095: LD_STRING ;
56097: STR
56098: ST_TO_ADDR
// end ;
56099: GO 56054
56101: POP
56102: POP
// if tmp then
56103: LD_VAR 0 3
56107: IFFALSE 56119
// active := tmp ;
56109: LD_ADDR_VAR 0 7
56113: PUSH
56114: LD_VAR 0 3
56118: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56119: LD_STRING getStreamItemsFromMission("
56121: PUSH
56122: LD_VAR 0 5
56126: STR
56127: PUSH
56128: LD_STRING ","
56130: STR
56131: PUSH
56132: LD_VAR 0 6
56136: STR
56137: PUSH
56138: LD_STRING ","
56140: STR
56141: PUSH
56142: LD_VAR 0 7
56146: STR
56147: PUSH
56148: LD_STRING ")
56150: STR
56151: PPUSH
56152: CALL_OW 559
// end else
56156: GO 56165
// ToLua ( getStreamItemsFromMission("","","") ) ;
56158: LD_STRING getStreamItemsFromMission("","","")
56160: PPUSH
56161: CALL_OW 559
// end ;
56165: LD_VAR 0 2
56169: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56170: LD_EXP 30
56174: IFFALSE 56182
56176: PUSH
56177: LD_EXP 35
56181: AND
56182: IFFALSE 56306
56184: GO 56186
56186: DISABLE
56187: LD_INT 0
56189: PPUSH
56190: PPUSH
// begin enable ;
56191: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56192: LD_ADDR_VAR 0 2
56196: PUSH
56197: LD_INT 22
56199: PUSH
56200: LD_OWVAR 2
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: LD_INT 34
56214: PUSH
56215: LD_INT 7
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 34
56224: PUSH
56225: LD_INT 45
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 34
56234: PUSH
56235: LD_INT 28
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 34
56244: PUSH
56245: LD_INT 47
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PPUSH
56263: CALL_OW 69
56267: ST_TO_ADDR
// if not tmp then
56268: LD_VAR 0 2
56272: NOT
56273: IFFALSE 56277
// exit ;
56275: GO 56306
// for i in tmp do
56277: LD_ADDR_VAR 0 1
56281: PUSH
56282: LD_VAR 0 2
56286: PUSH
56287: FOR_IN
56288: IFFALSE 56304
// begin SetLives ( i , 0 ) ;
56290: LD_VAR 0 1
56294: PPUSH
56295: LD_INT 0
56297: PPUSH
56298: CALL_OW 234
// end ;
56302: GO 56287
56304: POP
56305: POP
// end ;
56306: PPOPN 2
56308: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56309: LD_EXP 30
56313: IFFALSE 56321
56315: PUSH
56316: LD_EXP 36
56320: AND
56321: IFFALSE 56405
56323: GO 56325
56325: DISABLE
56326: LD_INT 0
56328: PPUSH
56329: PPUSH
// begin enable ;
56330: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56331: LD_ADDR_VAR 0 2
56335: PUSH
56336: LD_INT 22
56338: PUSH
56339: LD_OWVAR 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 32
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PPUSH
56362: CALL_OW 69
56366: ST_TO_ADDR
// if not tmp then
56367: LD_VAR 0 2
56371: NOT
56372: IFFALSE 56376
// exit ;
56374: GO 56405
// for i in tmp do
56376: LD_ADDR_VAR 0 1
56380: PUSH
56381: LD_VAR 0 2
56385: PUSH
56386: FOR_IN
56387: IFFALSE 56403
// begin SetLives ( i , 0 ) ;
56389: LD_VAR 0 1
56393: PPUSH
56394: LD_INT 0
56396: PPUSH
56397: CALL_OW 234
// end ;
56401: GO 56386
56403: POP
56404: POP
// end ;
56405: PPOPN 2
56407: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56408: LD_EXP 30
56412: IFFALSE 56420
56414: PUSH
56415: LD_EXP 33
56419: AND
56420: IFFALSE 56513
56422: GO 56424
56424: DISABLE
56425: LD_INT 0
56427: PPUSH
// begin enable ;
56428: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56429: LD_ADDR_VAR 0 1
56433: PUSH
56434: LD_INT 22
56436: PUSH
56437: LD_OWVAR 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: PUSH
56449: LD_INT 25
56451: PUSH
56452: LD_INT 5
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 25
56461: PUSH
56462: LD_INT 9
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 25
56471: PUSH
56472: LD_INT 8
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: LIST
56483: LIST
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PPUSH
56489: CALL_OW 69
56493: PUSH
56494: FOR_IN
56495: IFFALSE 56511
// begin SetClass ( i , 1 ) ;
56497: LD_VAR 0 1
56501: PPUSH
56502: LD_INT 1
56504: PPUSH
56505: CALL_OW 336
// end ;
56509: GO 56494
56511: POP
56512: POP
// end ;
56513: PPOPN 1
56515: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56516: LD_EXP 30
56520: IFFALSE 56528
56522: PUSH
56523: LD_EXP 34
56527: AND
56528: IFFALSE 56540
56530: PUSH
56531: LD_OWVAR 65
56535: PUSH
56536: LD_INT 7
56538: LESS
56539: AND
56540: IFFALSE 56554
56542: GO 56544
56544: DISABLE
// begin enable ;
56545: ENABLE
// game_speed := 7 ;
56546: LD_ADDR_OWVAR 65
56550: PUSH
56551: LD_INT 7
56553: ST_TO_ADDR
// end ;
56554: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56555: LD_EXP 30
56559: IFFALSE 56567
56561: PUSH
56562: LD_EXP 37
56566: AND
56567: IFFALSE 56769
56569: GO 56571
56571: DISABLE
56572: LD_INT 0
56574: PPUSH
56575: PPUSH
56576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56577: LD_ADDR_VAR 0 3
56581: PUSH
56582: LD_INT 81
56584: PUSH
56585: LD_OWVAR 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 21
56596: PUSH
56597: LD_INT 1
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PPUSH
56608: CALL_OW 69
56612: ST_TO_ADDR
// if not tmp then
56613: LD_VAR 0 3
56617: NOT
56618: IFFALSE 56622
// exit ;
56620: GO 56769
// if tmp > 5 then
56622: LD_VAR 0 3
56626: PUSH
56627: LD_INT 5
56629: GREATER
56630: IFFALSE 56642
// k := 5 else
56632: LD_ADDR_VAR 0 2
56636: PUSH
56637: LD_INT 5
56639: ST_TO_ADDR
56640: GO 56652
// k := tmp ;
56642: LD_ADDR_VAR 0 2
56646: PUSH
56647: LD_VAR 0 3
56651: ST_TO_ADDR
// for i := 1 to k do
56652: LD_ADDR_VAR 0 1
56656: PUSH
56657: DOUBLE
56658: LD_INT 1
56660: DEC
56661: ST_TO_ADDR
56662: LD_VAR 0 2
56666: PUSH
56667: FOR_TO
56668: IFFALSE 56767
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56670: LD_VAR 0 3
56674: PUSH
56675: LD_VAR 0 1
56679: ARRAY
56680: PPUSH
56681: LD_VAR 0 1
56685: PUSH
56686: LD_INT 4
56688: MOD
56689: PUSH
56690: LD_INT 1
56692: PLUS
56693: PPUSH
56694: CALL_OW 259
56698: PUSH
56699: LD_INT 10
56701: LESS
56702: IFFALSE 56765
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56704: LD_VAR 0 3
56708: PUSH
56709: LD_VAR 0 1
56713: ARRAY
56714: PPUSH
56715: LD_VAR 0 1
56719: PUSH
56720: LD_INT 4
56722: MOD
56723: PUSH
56724: LD_INT 1
56726: PLUS
56727: PPUSH
56728: LD_VAR 0 3
56732: PUSH
56733: LD_VAR 0 1
56737: ARRAY
56738: PPUSH
56739: LD_VAR 0 1
56743: PUSH
56744: LD_INT 4
56746: MOD
56747: PUSH
56748: LD_INT 1
56750: PLUS
56751: PPUSH
56752: CALL_OW 259
56756: PUSH
56757: LD_INT 1
56759: PLUS
56760: PPUSH
56761: CALL_OW 237
56765: GO 56667
56767: POP
56768: POP
// end ;
56769: PPOPN 3
56771: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56772: LD_EXP 30
56776: IFFALSE 56784
56778: PUSH
56779: LD_EXP 38
56783: AND
56784: IFFALSE 56804
56786: GO 56788
56788: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56789: LD_INT 4
56791: PPUSH
56792: LD_OWVAR 2
56796: PPUSH
56797: LD_INT 0
56799: PPUSH
56800: CALL_OW 324
56804: END
// every 0 0$1 trigger StreamModeActive and sShovel do
56805: LD_EXP 30
56809: IFFALSE 56817
56811: PUSH
56812: LD_EXP 67
56816: AND
56817: IFFALSE 56837
56819: GO 56821
56821: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56822: LD_INT 19
56824: PPUSH
56825: LD_OWVAR 2
56829: PPUSH
56830: LD_INT 0
56832: PPUSH
56833: CALL_OW 324
56837: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56838: LD_EXP 30
56842: IFFALSE 56850
56844: PUSH
56845: LD_EXP 39
56849: AND
56850: IFFALSE 56952
56852: GO 56854
56854: DISABLE
56855: LD_INT 0
56857: PPUSH
56858: PPUSH
// begin enable ;
56859: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56860: LD_ADDR_VAR 0 2
56864: PUSH
56865: LD_INT 22
56867: PUSH
56868: LD_OWVAR 2
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: LD_INT 34
56882: PUSH
56883: LD_INT 11
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 34
56892: PUSH
56893: LD_INT 30
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: LIST
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PPUSH
56909: CALL_OW 69
56913: ST_TO_ADDR
// if not tmp then
56914: LD_VAR 0 2
56918: NOT
56919: IFFALSE 56923
// exit ;
56921: GO 56952
// for i in tmp do
56923: LD_ADDR_VAR 0 1
56927: PUSH
56928: LD_VAR 0 2
56932: PUSH
56933: FOR_IN
56934: IFFALSE 56950
// begin SetLives ( i , 0 ) ;
56936: LD_VAR 0 1
56940: PPUSH
56941: LD_INT 0
56943: PPUSH
56944: CALL_OW 234
// end ;
56948: GO 56933
56950: POP
56951: POP
// end ;
56952: PPOPN 2
56954: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56955: LD_EXP 30
56959: IFFALSE 56967
56961: PUSH
56962: LD_EXP 40
56966: AND
56967: IFFALSE 56987
56969: GO 56971
56971: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56972: LD_INT 32
56974: PPUSH
56975: LD_OWVAR 2
56979: PPUSH
56980: LD_INT 0
56982: PPUSH
56983: CALL_OW 324
56987: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56988: LD_EXP 30
56992: IFFALSE 57000
56994: PUSH
56995: LD_EXP 41
56999: AND
57000: IFFALSE 57183
57002: GO 57004
57004: DISABLE
57005: LD_INT 0
57007: PPUSH
57008: PPUSH
57009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57010: LD_ADDR_VAR 0 2
57014: PUSH
57015: LD_INT 22
57017: PUSH
57018: LD_OWVAR 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 33
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PPUSH
57041: CALL_OW 69
57045: ST_TO_ADDR
// if not tmp then
57046: LD_VAR 0 2
57050: NOT
57051: IFFALSE 57055
// exit ;
57053: GO 57183
// side := 0 ;
57055: LD_ADDR_VAR 0 3
57059: PUSH
57060: LD_INT 0
57062: ST_TO_ADDR
// for i := 1 to 8 do
57063: LD_ADDR_VAR 0 1
57067: PUSH
57068: DOUBLE
57069: LD_INT 1
57071: DEC
57072: ST_TO_ADDR
57073: LD_INT 8
57075: PUSH
57076: FOR_TO
57077: IFFALSE 57127
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57079: LD_OWVAR 2
57083: PUSH
57084: LD_VAR 0 1
57088: NONEQUAL
57089: IFFALSE 57111
57091: PUSH
57092: LD_OWVAR 2
57096: PPUSH
57097: LD_VAR 0 1
57101: PPUSH
57102: CALL_OW 81
57106: PUSH
57107: LD_INT 2
57109: EQUAL
57110: AND
57111: IFFALSE 57125
// begin side := i ;
57113: LD_ADDR_VAR 0 3
57117: PUSH
57118: LD_VAR 0 1
57122: ST_TO_ADDR
// break ;
57123: GO 57127
// end ;
57125: GO 57076
57127: POP
57128: POP
// if not side then
57129: LD_VAR 0 3
57133: NOT
57134: IFFALSE 57138
// exit ;
57136: GO 57183
// for i := 1 to tmp do
57138: LD_ADDR_VAR 0 1
57142: PUSH
57143: DOUBLE
57144: LD_INT 1
57146: DEC
57147: ST_TO_ADDR
57148: LD_VAR 0 2
57152: PUSH
57153: FOR_TO
57154: IFFALSE 57181
// if Prob ( 60 ) then
57156: LD_INT 60
57158: PPUSH
57159: CALL_OW 13
57163: IFFALSE 57179
// SetSide ( i , side ) ;
57165: LD_VAR 0 1
57169: PPUSH
57170: LD_VAR 0 3
57174: PPUSH
57175: CALL_OW 235
57179: GO 57153
57181: POP
57182: POP
// end ;
57183: PPOPN 3
57185: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57186: LD_EXP 30
57190: IFFALSE 57198
57192: PUSH
57193: LD_EXP 43
57197: AND
57198: IFFALSE 57317
57200: GO 57202
57202: DISABLE
57203: LD_INT 0
57205: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57206: LD_ADDR_VAR 0 1
57210: PUSH
57211: LD_INT 22
57213: PUSH
57214: LD_OWVAR 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 21
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: PUSH
57236: LD_INT 23
57238: PUSH
57239: LD_INT 0
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: LIST
57254: PPUSH
57255: CALL_OW 69
57259: PUSH
57260: FOR_IN
57261: IFFALSE 57315
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57263: LD_VAR 0 1
57267: PPUSH
57268: CALL_OW 257
57272: PUSH
57273: LD_INT 1
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: LD_INT 3
57281: PUSH
57282: LD_INT 4
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: IN
57291: IFFALSE 57313
// SetClass ( un , rand ( 1 , 4 ) ) ;
57293: LD_VAR 0 1
57297: PPUSH
57298: LD_INT 1
57300: PPUSH
57301: LD_INT 4
57303: PPUSH
57304: CALL_OW 12
57308: PPUSH
57309: CALL_OW 336
57313: GO 57260
57315: POP
57316: POP
// end ;
57317: PPOPN 1
57319: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57320: LD_EXP 30
57324: IFFALSE 57332
57326: PUSH
57327: LD_EXP 42
57331: AND
57332: IFFALSE 57411
57334: GO 57336
57336: DISABLE
57337: LD_INT 0
57339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57340: LD_ADDR_VAR 0 1
57344: PUSH
57345: LD_INT 22
57347: PUSH
57348: LD_OWVAR 2
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 21
57359: PUSH
57360: LD_INT 3
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PPUSH
57371: CALL_OW 69
57375: ST_TO_ADDR
// if not tmp then
57376: LD_VAR 0 1
57380: NOT
57381: IFFALSE 57385
// exit ;
57383: GO 57411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57385: LD_VAR 0 1
57389: PUSH
57390: LD_INT 1
57392: PPUSH
57393: LD_VAR 0 1
57397: PPUSH
57398: CALL_OW 12
57402: ARRAY
57403: PPUSH
57404: LD_INT 100
57406: PPUSH
57407: CALL_OW 234
// end ;
57411: PPOPN 1
57413: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57414: LD_EXP 30
57418: IFFALSE 57426
57420: PUSH
57421: LD_EXP 44
57425: AND
57426: IFFALSE 57524
57428: GO 57430
57430: DISABLE
57431: LD_INT 0
57433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57434: LD_ADDR_VAR 0 1
57438: PUSH
57439: LD_INT 22
57441: PUSH
57442: LD_OWVAR 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 21
57453: PUSH
57454: LD_INT 1
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PPUSH
57465: CALL_OW 69
57469: ST_TO_ADDR
// if not tmp then
57470: LD_VAR 0 1
57474: NOT
57475: IFFALSE 57479
// exit ;
57477: GO 57524
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57479: LD_VAR 0 1
57483: PUSH
57484: LD_INT 1
57486: PPUSH
57487: LD_VAR 0 1
57491: PPUSH
57492: CALL_OW 12
57496: ARRAY
57497: PPUSH
57498: LD_INT 1
57500: PPUSH
57501: LD_INT 4
57503: PPUSH
57504: CALL_OW 12
57508: PPUSH
57509: LD_INT 3000
57511: PPUSH
57512: LD_INT 9000
57514: PPUSH
57515: CALL_OW 12
57519: PPUSH
57520: CALL_OW 492
// end ;
57524: PPOPN 1
57526: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57527: LD_EXP 30
57531: IFFALSE 57539
57533: PUSH
57534: LD_EXP 45
57538: AND
57539: IFFALSE 57559
57541: GO 57543
57543: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57544: LD_INT 1
57546: PPUSH
57547: LD_OWVAR 2
57551: PPUSH
57552: LD_INT 0
57554: PPUSH
57555: CALL_OW 324
57559: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57560: LD_EXP 30
57564: IFFALSE 57572
57566: PUSH
57567: LD_EXP 46
57571: AND
57572: IFFALSE 57655
57574: GO 57576
57576: DISABLE
57577: LD_INT 0
57579: PPUSH
57580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57581: LD_ADDR_VAR 0 2
57585: PUSH
57586: LD_INT 22
57588: PUSH
57589: LD_OWVAR 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 21
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PPUSH
57612: CALL_OW 69
57616: ST_TO_ADDR
// if not tmp then
57617: LD_VAR 0 2
57621: NOT
57622: IFFALSE 57626
// exit ;
57624: GO 57655
// for i in tmp do
57626: LD_ADDR_VAR 0 1
57630: PUSH
57631: LD_VAR 0 2
57635: PUSH
57636: FOR_IN
57637: IFFALSE 57653
// SetBLevel ( i , 10 ) ;
57639: LD_VAR 0 1
57643: PPUSH
57644: LD_INT 10
57646: PPUSH
57647: CALL_OW 241
57651: GO 57636
57653: POP
57654: POP
// end ;
57655: PPOPN 2
57657: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57658: LD_EXP 30
57662: IFFALSE 57670
57664: PUSH
57665: LD_EXP 47
57669: AND
57670: IFFALSE 57781
57672: GO 57674
57674: DISABLE
57675: LD_INT 0
57677: PPUSH
57678: PPUSH
57679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57680: LD_ADDR_VAR 0 3
57684: PUSH
57685: LD_INT 22
57687: PUSH
57688: LD_OWVAR 2
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 25
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PPUSH
57711: CALL_OW 69
57715: ST_TO_ADDR
// if not tmp then
57716: LD_VAR 0 3
57720: NOT
57721: IFFALSE 57725
// exit ;
57723: GO 57781
// un := tmp [ rand ( 1 , tmp ) ] ;
57725: LD_ADDR_VAR 0 2
57729: PUSH
57730: LD_VAR 0 3
57734: PUSH
57735: LD_INT 1
57737: PPUSH
57738: LD_VAR 0 3
57742: PPUSH
57743: CALL_OW 12
57747: ARRAY
57748: ST_TO_ADDR
// if Crawls ( un ) then
57749: LD_VAR 0 2
57753: PPUSH
57754: CALL_OW 318
57758: IFFALSE 57769
// ComWalk ( un ) ;
57760: LD_VAR 0 2
57764: PPUSH
57765: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57769: LD_VAR 0 2
57773: PPUSH
57774: LD_INT 5
57776: PPUSH
57777: CALL_OW 336
// end ;
57781: PPOPN 3
57783: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57784: LD_EXP 30
57788: IFFALSE 57796
57790: PUSH
57791: LD_EXP 48
57795: AND
57796: IFFALSE 57808
57798: PUSH
57799: LD_OWVAR 67
57803: PUSH
57804: LD_INT 4
57806: LESS
57807: AND
57808: IFFALSE 57827
57810: GO 57812
57812: DISABLE
// begin Difficulty := Difficulty + 1 ;
57813: LD_ADDR_OWVAR 67
57817: PUSH
57818: LD_OWVAR 67
57822: PUSH
57823: LD_INT 1
57825: PLUS
57826: ST_TO_ADDR
// end ;
57827: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
57828: LD_EXP 30
57832: IFFALSE 57840
57834: PUSH
57835: LD_EXP 49
57839: AND
57840: IFFALSE 57943
57842: GO 57844
57844: DISABLE
57845: LD_INT 0
57847: PPUSH
// begin for i := 1 to 5 do
57848: LD_ADDR_VAR 0 1
57852: PUSH
57853: DOUBLE
57854: LD_INT 1
57856: DEC
57857: ST_TO_ADDR
57858: LD_INT 5
57860: PUSH
57861: FOR_TO
57862: IFFALSE 57941
// begin uc_nation := nation_nature ;
57864: LD_ADDR_OWVAR 21
57868: PUSH
57869: LD_INT 0
57871: ST_TO_ADDR
// uc_side := 0 ;
57872: LD_ADDR_OWVAR 20
57876: PUSH
57877: LD_INT 0
57879: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57880: LD_ADDR_OWVAR 29
57884: PUSH
57885: LD_INT 12
57887: PUSH
57888: LD_INT 12
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// hc_agressivity := 20 ;
57895: LD_ADDR_OWVAR 35
57899: PUSH
57900: LD_INT 20
57902: ST_TO_ADDR
// hc_class := class_tiger ;
57903: LD_ADDR_OWVAR 28
57907: PUSH
57908: LD_INT 14
57910: ST_TO_ADDR
// hc_gallery :=  ;
57911: LD_ADDR_OWVAR 33
57915: PUSH
57916: LD_STRING 
57918: ST_TO_ADDR
// hc_name :=  ;
57919: LD_ADDR_OWVAR 26
57923: PUSH
57924: LD_STRING 
57926: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57927: CALL_OW 44
57931: PPUSH
57932: LD_INT 0
57934: PPUSH
57935: CALL_OW 51
// end ;
57939: GO 57861
57941: POP
57942: POP
// end ;
57943: PPOPN 1
57945: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57946: LD_EXP 30
57950: IFFALSE 57958
57952: PUSH
57953: LD_EXP 50
57957: AND
57958: IFFALSE 57967
57960: GO 57962
57962: DISABLE
// StreamSibBomb ;
57963: CALL 57968 0 0
57967: END
// export function StreamSibBomb ; var i , x , y ; begin
57968: LD_INT 0
57970: PPUSH
57971: PPUSH
57972: PPUSH
57973: PPUSH
// result := false ;
57974: LD_ADDR_VAR 0 1
57978: PUSH
57979: LD_INT 0
57981: ST_TO_ADDR
// for i := 1 to 16 do
57982: LD_ADDR_VAR 0 2
57986: PUSH
57987: DOUBLE
57988: LD_INT 1
57990: DEC
57991: ST_TO_ADDR
57992: LD_INT 16
57994: PUSH
57995: FOR_TO
57996: IFFALSE 58195
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57998: LD_ADDR_VAR 0 3
58002: PUSH
58003: LD_INT 10
58005: PUSH
58006: LD_INT 20
58008: PUSH
58009: LD_INT 30
58011: PUSH
58012: LD_INT 40
58014: PUSH
58015: LD_INT 50
58017: PUSH
58018: LD_INT 60
58020: PUSH
58021: LD_INT 70
58023: PUSH
58024: LD_INT 80
58026: PUSH
58027: LD_INT 90
58029: PUSH
58030: LD_INT 100
58032: PUSH
58033: LD_INT 110
58035: PUSH
58036: LD_INT 120
58038: PUSH
58039: LD_INT 130
58041: PUSH
58042: LD_INT 140
58044: PUSH
58045: LD_INT 150
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PPUSH
58068: LD_INT 15
58070: PPUSH
58071: CALL_OW 12
58075: ARRAY
58076: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58077: LD_ADDR_VAR 0 4
58081: PUSH
58082: LD_INT 10
58084: PUSH
58085: LD_INT 20
58087: PUSH
58088: LD_INT 30
58090: PUSH
58091: LD_INT 40
58093: PUSH
58094: LD_INT 50
58096: PUSH
58097: LD_INT 60
58099: PUSH
58100: LD_INT 70
58102: PUSH
58103: LD_INT 80
58105: PUSH
58106: LD_INT 90
58108: PUSH
58109: LD_INT 100
58111: PUSH
58112: LD_INT 110
58114: PUSH
58115: LD_INT 120
58117: PUSH
58118: LD_INT 130
58120: PUSH
58121: LD_INT 140
58123: PUSH
58124: LD_INT 150
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 1
58146: PPUSH
58147: LD_INT 15
58149: PPUSH
58150: CALL_OW 12
58154: ARRAY
58155: ST_TO_ADDR
// if ValidHex ( x , y ) then
58156: LD_VAR 0 3
58160: PPUSH
58161: LD_VAR 0 4
58165: PPUSH
58166: CALL_OW 488
58170: IFFALSE 58193
// begin result := [ x , y ] ;
58172: LD_ADDR_VAR 0 1
58176: PUSH
58177: LD_VAR 0 3
58181: PUSH
58182: LD_VAR 0 4
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: ST_TO_ADDR
// break ;
58191: GO 58195
// end ; end ;
58193: GO 57995
58195: POP
58196: POP
// if result then
58197: LD_VAR 0 1
58201: IFFALSE 58261
// begin ToLua ( playSibBomb() ) ;
58203: LD_STRING playSibBomb()
58205: PPUSH
58206: CALL_OW 559
// wait ( 0 0$14 ) ;
58210: LD_INT 490
58212: PPUSH
58213: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58217: LD_VAR 0 1
58221: PUSH
58222: LD_INT 1
58224: ARRAY
58225: PPUSH
58226: LD_VAR 0 1
58230: PUSH
58231: LD_INT 2
58233: ARRAY
58234: PPUSH
58235: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58239: LD_VAR 0 1
58243: PUSH
58244: LD_INT 1
58246: ARRAY
58247: PPUSH
58248: LD_VAR 0 1
58252: PUSH
58253: LD_INT 2
58255: ARRAY
58256: PPUSH
58257: CALL_OW 429
// end ; end ;
58261: LD_VAR 0 1
58265: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58266: LD_EXP 30
58270: IFFALSE 58278
58272: PUSH
58273: LD_EXP 52
58277: AND
58278: IFFALSE 58290
58280: GO 58282
58282: DISABLE
// YouLost (  ) ;
58283: LD_STRING 
58285: PPUSH
58286: CALL_OW 104
58290: END
// every 0 0$1 trigger StreamModeActive and sFog do
58291: LD_EXP 30
58295: IFFALSE 58303
58297: PUSH
58298: LD_EXP 51
58302: AND
58303: IFFALSE 58317
58305: GO 58307
58307: DISABLE
// FogOff ( your_side ) ;
58308: LD_OWVAR 2
58312: PPUSH
58313: CALL_OW 344
58317: END
// every 0 0$1 trigger StreamModeActive and sSun do
58318: LD_EXP 30
58322: IFFALSE 58330
58324: PUSH
58325: LD_EXP 53
58329: AND
58330: IFFALSE 58358
58332: GO 58334
58334: DISABLE
// begin solar_recharge_percent := 0 ;
58335: LD_ADDR_OWVAR 79
58339: PUSH
58340: LD_INT 0
58342: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58343: LD_INT 10500
58345: PPUSH
58346: CALL_OW 67
// solar_recharge_percent := 100 ;
58350: LD_ADDR_OWVAR 79
58354: PUSH
58355: LD_INT 100
58357: ST_TO_ADDR
// end ;
58358: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58359: LD_EXP 30
58363: IFFALSE 58371
58365: PUSH
58366: LD_EXP 54
58370: AND
58371: IFFALSE 58610
58373: GO 58375
58375: DISABLE
58376: LD_INT 0
58378: PPUSH
58379: PPUSH
58380: PPUSH
// begin tmp := [ ] ;
58381: LD_ADDR_VAR 0 3
58385: PUSH
58386: EMPTY
58387: ST_TO_ADDR
// for i := 1 to 6 do
58388: LD_ADDR_VAR 0 1
58392: PUSH
58393: DOUBLE
58394: LD_INT 1
58396: DEC
58397: ST_TO_ADDR
58398: LD_INT 6
58400: PUSH
58401: FOR_TO
58402: IFFALSE 58507
// begin uc_nation := nation_nature ;
58404: LD_ADDR_OWVAR 21
58408: PUSH
58409: LD_INT 0
58411: ST_TO_ADDR
// uc_side := 0 ;
58412: LD_ADDR_OWVAR 20
58416: PUSH
58417: LD_INT 0
58419: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58420: LD_ADDR_OWVAR 29
58424: PUSH
58425: LD_INT 12
58427: PUSH
58428: LD_INT 12
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: ST_TO_ADDR
// hc_agressivity := 20 ;
58435: LD_ADDR_OWVAR 35
58439: PUSH
58440: LD_INT 20
58442: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58443: LD_ADDR_OWVAR 28
58447: PUSH
58448: LD_INT 17
58450: ST_TO_ADDR
// hc_gallery :=  ;
58451: LD_ADDR_OWVAR 33
58455: PUSH
58456: LD_STRING 
58458: ST_TO_ADDR
// hc_name :=  ;
58459: LD_ADDR_OWVAR 26
58463: PUSH
58464: LD_STRING 
58466: ST_TO_ADDR
// un := CreateHuman ;
58467: LD_ADDR_VAR 0 2
58471: PUSH
58472: CALL_OW 44
58476: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58477: LD_VAR 0 2
58481: PPUSH
58482: LD_INT 1
58484: PPUSH
58485: CALL_OW 51
// tmp := tmp ^ un ;
58489: LD_ADDR_VAR 0 3
58493: PUSH
58494: LD_VAR 0 3
58498: PUSH
58499: LD_VAR 0 2
58503: ADD
58504: ST_TO_ADDR
// end ;
58505: GO 58401
58507: POP
58508: POP
// repeat wait ( 0 0$1 ) ;
58509: LD_INT 35
58511: PPUSH
58512: CALL_OW 67
// for un in tmp do
58516: LD_ADDR_VAR 0 2
58520: PUSH
58521: LD_VAR 0 3
58525: PUSH
58526: FOR_IN
58527: IFFALSE 58601
// begin if IsDead ( un ) then
58529: LD_VAR 0 2
58533: PPUSH
58534: CALL_OW 301
58538: IFFALSE 58558
// begin tmp := tmp diff un ;
58540: LD_ADDR_VAR 0 3
58544: PUSH
58545: LD_VAR 0 3
58549: PUSH
58550: LD_VAR 0 2
58554: DIFF
58555: ST_TO_ADDR
// continue ;
58556: GO 58526
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58558: LD_VAR 0 2
58562: PPUSH
58563: LD_INT 3
58565: PUSH
58566: LD_INT 22
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PPUSH
58580: CALL_OW 69
58584: PPUSH
58585: LD_VAR 0 2
58589: PPUSH
58590: CALL_OW 74
58594: PPUSH
58595: CALL_OW 115
// end ;
58599: GO 58526
58601: POP
58602: POP
// until not tmp ;
58603: LD_VAR 0 3
58607: NOT
58608: IFFALSE 58509
// end ;
58610: PPOPN 3
58612: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58613: LD_EXP 30
58617: IFFALSE 58625
58619: PUSH
58620: LD_EXP 55
58624: AND
58625: IFFALSE 58679
58627: GO 58629
58629: DISABLE
// begin ToLua ( displayTroll(); ) ;
58630: LD_STRING displayTroll();
58632: PPUSH
58633: CALL_OW 559
// wait ( 3 3$00 ) ;
58637: LD_INT 6300
58639: PPUSH
58640: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58644: LD_STRING hideTroll();
58646: PPUSH
58647: CALL_OW 559
// wait ( 1 1$00 ) ;
58651: LD_INT 2100
58653: PPUSH
58654: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58658: LD_STRING displayTroll();
58660: PPUSH
58661: CALL_OW 559
// wait ( 1 1$00 ) ;
58665: LD_INT 2100
58667: PPUSH
58668: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58672: LD_STRING hideTroll();
58674: PPUSH
58675: CALL_OW 559
// end ;
58679: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58680: LD_EXP 30
58684: IFFALSE 58692
58686: PUSH
58687: LD_EXP 56
58691: AND
58692: IFFALSE 58755
58694: GO 58696
58696: DISABLE
58697: LD_INT 0
58699: PPUSH
// begin p := 0 ;
58700: LD_ADDR_VAR 0 1
58704: PUSH
58705: LD_INT 0
58707: ST_TO_ADDR
// repeat game_speed := 1 ;
58708: LD_ADDR_OWVAR 65
58712: PUSH
58713: LD_INT 1
58715: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58716: LD_INT 35
58718: PPUSH
58719: CALL_OW 67
// p := p + 1 ;
58723: LD_ADDR_VAR 0 1
58727: PUSH
58728: LD_VAR 0 1
58732: PUSH
58733: LD_INT 1
58735: PLUS
58736: ST_TO_ADDR
// until p >= 60 ;
58737: LD_VAR 0 1
58741: PUSH
58742: LD_INT 60
58744: GREATEREQUAL
58745: IFFALSE 58708
// game_speed := 4 ;
58747: LD_ADDR_OWVAR 65
58751: PUSH
58752: LD_INT 4
58754: ST_TO_ADDR
// end ;
58755: PPOPN 1
58757: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58758: LD_EXP 30
58762: IFFALSE 58770
58764: PUSH
58765: LD_EXP 57
58769: AND
58770: IFFALSE 58916
58772: GO 58774
58774: DISABLE
58775: LD_INT 0
58777: PPUSH
58778: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58779: LD_ADDR_VAR 0 1
58783: PUSH
58784: LD_INT 22
58786: PUSH
58787: LD_OWVAR 2
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 30
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 30
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PPUSH
58828: CALL_OW 69
58832: ST_TO_ADDR
// if not depot then
58833: LD_VAR 0 1
58837: NOT
58838: IFFALSE 58842
// exit ;
58840: GO 58916
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
58842: LD_ADDR_VAR 0 2
58846: PUSH
58847: LD_VAR 0 1
58851: PUSH
58852: LD_INT 1
58854: PPUSH
58855: LD_VAR 0 1
58859: PPUSH
58860: CALL_OW 12
58864: ARRAY
58865: PPUSH
58866: CALL_OW 274
58870: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58871: LD_VAR 0 2
58875: PPUSH
58876: LD_INT 1
58878: PPUSH
58879: LD_INT 0
58881: PPUSH
58882: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58886: LD_VAR 0 2
58890: PPUSH
58891: LD_INT 2
58893: PPUSH
58894: LD_INT 0
58896: PPUSH
58897: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58901: LD_VAR 0 2
58905: PPUSH
58906: LD_INT 3
58908: PPUSH
58909: LD_INT 0
58911: PPUSH
58912: CALL_OW 277
// end ;
58916: PPOPN 2
58918: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58919: LD_EXP 30
58923: IFFALSE 58931
58925: PUSH
58926: LD_EXP 58
58930: AND
58931: IFFALSE 59028
58933: GO 58935
58935: DISABLE
58936: LD_INT 0
58938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58939: LD_ADDR_VAR 0 1
58943: PUSH
58944: LD_INT 22
58946: PUSH
58947: LD_OWVAR 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 21
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: LD_INT 23
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: LIST
58987: PPUSH
58988: CALL_OW 69
58992: ST_TO_ADDR
// if not tmp then
58993: LD_VAR 0 1
58997: NOT
58998: IFFALSE 59002
// exit ;
59000: GO 59028
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59002: LD_VAR 0 1
59006: PUSH
59007: LD_INT 1
59009: PPUSH
59010: LD_VAR 0 1
59014: PPUSH
59015: CALL_OW 12
59019: ARRAY
59020: PPUSH
59021: LD_INT 200
59023: PPUSH
59024: CALL_OW 234
// end ;
59028: PPOPN 1
59030: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59031: LD_EXP 30
59035: IFFALSE 59043
59037: PUSH
59038: LD_EXP 59
59042: AND
59043: IFFALSE 59122
59045: GO 59047
59047: DISABLE
59048: LD_INT 0
59050: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59051: LD_ADDR_VAR 0 1
59055: PUSH
59056: LD_INT 22
59058: PUSH
59059: LD_OWVAR 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 21
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PPUSH
59082: CALL_OW 69
59086: ST_TO_ADDR
// if not tmp then
59087: LD_VAR 0 1
59091: NOT
59092: IFFALSE 59096
// exit ;
59094: GO 59122
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59096: LD_VAR 0 1
59100: PUSH
59101: LD_INT 1
59103: PPUSH
59104: LD_VAR 0 1
59108: PPUSH
59109: CALL_OW 12
59113: ARRAY
59114: PPUSH
59115: LD_INT 60
59117: PPUSH
59118: CALL_OW 234
// end ;
59122: PPOPN 1
59124: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59125: LD_EXP 30
59129: IFFALSE 59137
59131: PUSH
59132: LD_EXP 60
59136: AND
59137: IFFALSE 59236
59139: GO 59141
59141: DISABLE
59142: LD_INT 0
59144: PPUSH
59145: PPUSH
// begin enable ;
59146: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59147: LD_ADDR_VAR 0 1
59151: PUSH
59152: LD_INT 22
59154: PUSH
59155: LD_OWVAR 2
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 61
59166: PUSH
59167: EMPTY
59168: LIST
59169: PUSH
59170: LD_INT 33
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: PPUSH
59185: CALL_OW 69
59189: ST_TO_ADDR
// if not tmp then
59190: LD_VAR 0 1
59194: NOT
59195: IFFALSE 59199
// exit ;
59197: GO 59236
// for i in tmp do
59199: LD_ADDR_VAR 0 2
59203: PUSH
59204: LD_VAR 0 1
59208: PUSH
59209: FOR_IN
59210: IFFALSE 59234
// if IsControledBy ( i ) then
59212: LD_VAR 0 2
59216: PPUSH
59217: CALL_OW 312
59221: IFFALSE 59232
// ComUnlink ( i ) ;
59223: LD_VAR 0 2
59227: PPUSH
59228: CALL_OW 136
59232: GO 59209
59234: POP
59235: POP
// end ;
59236: PPOPN 2
59238: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59239: LD_EXP 30
59243: IFFALSE 59251
59245: PUSH
59246: LD_EXP 61
59250: AND
59251: IFFALSE 59391
59253: GO 59255
59255: DISABLE
59256: LD_INT 0
59258: PPUSH
59259: PPUSH
// begin ToLua ( displayPowell(); ) ;
59260: LD_STRING displayPowell();
59262: PPUSH
59263: CALL_OW 559
// uc_side := 0 ;
59267: LD_ADDR_OWVAR 20
59271: PUSH
59272: LD_INT 0
59274: ST_TO_ADDR
// uc_nation := 2 ;
59275: LD_ADDR_OWVAR 21
59279: PUSH
59280: LD_INT 2
59282: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59283: LD_ADDR_OWVAR 37
59287: PUSH
59288: LD_INT 14
59290: ST_TO_ADDR
// vc_engine := engine_siberite ;
59291: LD_ADDR_OWVAR 39
59295: PUSH
59296: LD_INT 3
59298: ST_TO_ADDR
// vc_control := control_apeman ;
59299: LD_ADDR_OWVAR 38
59303: PUSH
59304: LD_INT 5
59306: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59307: LD_ADDR_OWVAR 40
59311: PUSH
59312: LD_INT 29
59314: ST_TO_ADDR
// un := CreateVehicle ;
59315: LD_ADDR_VAR 0 2
59319: PUSH
59320: CALL_OW 45
59324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59325: LD_VAR 0 2
59329: PPUSH
59330: LD_INT 1
59332: PPUSH
59333: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59337: LD_INT 35
59339: PPUSH
59340: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59344: LD_VAR 0 2
59348: PPUSH
59349: LD_INT 22
59351: PUSH
59352: LD_OWVAR 2
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PPUSH
59361: CALL_OW 69
59365: PPUSH
59366: LD_VAR 0 2
59370: PPUSH
59371: CALL_OW 74
59375: PPUSH
59376: CALL_OW 115
// until IsDead ( un ) ;
59380: LD_VAR 0 2
59384: PPUSH
59385: CALL_OW 301
59389: IFFALSE 59337
// end ;
59391: PPOPN 2
59393: END
// every 0 0$1 trigger StreamModeActive and sStu do
59394: LD_EXP 30
59398: IFFALSE 59406
59400: PUSH
59401: LD_EXP 69
59405: AND
59406: IFFALSE 59422
59408: GO 59410
59410: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59411: LD_STRING displayStucuk();
59413: PPUSH
59414: CALL_OW 559
// ResetFog ;
59418: CALL_OW 335
// end ;
59422: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59423: LD_EXP 30
59427: IFFALSE 59435
59429: PUSH
59430: LD_EXP 62
59434: AND
59435: IFFALSE 59576
59437: GO 59439
59439: DISABLE
59440: LD_INT 0
59442: PPUSH
59443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59444: LD_ADDR_VAR 0 2
59448: PUSH
59449: LD_INT 22
59451: PUSH
59452: LD_OWVAR 2
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 21
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PPUSH
59475: CALL_OW 69
59479: ST_TO_ADDR
// if not tmp then
59480: LD_VAR 0 2
59484: NOT
59485: IFFALSE 59489
// exit ;
59487: GO 59576
// un := tmp [ rand ( 1 , tmp ) ] ;
59489: LD_ADDR_VAR 0 1
59493: PUSH
59494: LD_VAR 0 2
59498: PUSH
59499: LD_INT 1
59501: PPUSH
59502: LD_VAR 0 2
59506: PPUSH
59507: CALL_OW 12
59511: ARRAY
59512: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59513: LD_VAR 0 1
59517: PPUSH
59518: LD_INT 0
59520: PPUSH
59521: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59525: LD_VAR 0 1
59529: PPUSH
59530: LD_OWVAR 3
59534: PUSH
59535: LD_VAR 0 1
59539: DIFF
59540: PPUSH
59541: LD_VAR 0 1
59545: PPUSH
59546: CALL_OW 74
59550: PPUSH
59551: CALL_OW 115
// wait ( 0 0$20 ) ;
59555: LD_INT 700
59557: PPUSH
59558: CALL_OW 67
// SetSide ( un , your_side ) ;
59562: LD_VAR 0 1
59566: PPUSH
59567: LD_OWVAR 2
59571: PPUSH
59572: CALL_OW 235
// end ;
59576: PPOPN 2
59578: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59579: LD_EXP 30
59583: IFFALSE 59591
59585: PUSH
59586: LD_EXP 63
59590: AND
59591: IFFALSE 59697
59593: GO 59595
59595: DISABLE
59596: LD_INT 0
59598: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59599: LD_ADDR_VAR 0 1
59603: PUSH
59604: LD_INT 22
59606: PUSH
59607: LD_OWVAR 2
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: LD_INT 30
59621: PUSH
59622: LD_INT 0
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 30
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: LIST
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PPUSH
59648: CALL_OW 69
59652: ST_TO_ADDR
// if not depot then
59653: LD_VAR 0 1
59657: NOT
59658: IFFALSE 59662
// exit ;
59660: GO 59697
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59662: LD_VAR 0 1
59666: PUSH
59667: LD_INT 1
59669: ARRAY
59670: PPUSH
59671: CALL_OW 250
59675: PPUSH
59676: LD_VAR 0 1
59680: PUSH
59681: LD_INT 1
59683: ARRAY
59684: PPUSH
59685: CALL_OW 251
59689: PPUSH
59690: LD_INT 70
59692: PPUSH
59693: CALL_OW 495
// end ;
59697: PPOPN 1
59699: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59700: LD_EXP 30
59704: IFFALSE 59712
59706: PUSH
59707: LD_EXP 64
59711: AND
59712: IFFALSE 59923
59714: GO 59716
59716: DISABLE
59717: LD_INT 0
59719: PPUSH
59720: PPUSH
59721: PPUSH
59722: PPUSH
59723: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59724: LD_ADDR_VAR 0 5
59728: PUSH
59729: LD_INT 22
59731: PUSH
59732: LD_OWVAR 2
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 21
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PPUSH
59755: CALL_OW 69
59759: ST_TO_ADDR
// if not tmp then
59760: LD_VAR 0 5
59764: NOT
59765: IFFALSE 59769
// exit ;
59767: GO 59923
// for i in tmp do
59769: LD_ADDR_VAR 0 1
59773: PUSH
59774: LD_VAR 0 5
59778: PUSH
59779: FOR_IN
59780: IFFALSE 59921
// begin d := rand ( 0 , 5 ) ;
59782: LD_ADDR_VAR 0 4
59786: PUSH
59787: LD_INT 0
59789: PPUSH
59790: LD_INT 5
59792: PPUSH
59793: CALL_OW 12
59797: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59798: LD_ADDR_VAR 0 2
59802: PUSH
59803: LD_VAR 0 1
59807: PPUSH
59808: CALL_OW 250
59812: PPUSH
59813: LD_VAR 0 4
59817: PPUSH
59818: LD_INT 3
59820: PPUSH
59821: LD_INT 12
59823: PPUSH
59824: CALL_OW 12
59828: PPUSH
59829: CALL_OW 272
59833: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59834: LD_ADDR_VAR 0 3
59838: PUSH
59839: LD_VAR 0 1
59843: PPUSH
59844: CALL_OW 251
59848: PPUSH
59849: LD_VAR 0 4
59853: PPUSH
59854: LD_INT 3
59856: PPUSH
59857: LD_INT 12
59859: PPUSH
59860: CALL_OW 12
59864: PPUSH
59865: CALL_OW 273
59869: ST_TO_ADDR
// if ValidHex ( x , y ) then
59870: LD_VAR 0 2
59874: PPUSH
59875: LD_VAR 0 3
59879: PPUSH
59880: CALL_OW 488
59884: IFFALSE 59919
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59886: LD_VAR 0 1
59890: PPUSH
59891: LD_VAR 0 2
59895: PPUSH
59896: LD_VAR 0 3
59900: PPUSH
59901: LD_INT 3
59903: PPUSH
59904: LD_INT 6
59906: PPUSH
59907: CALL_OW 12
59911: PPUSH
59912: LD_INT 1
59914: PPUSH
59915: CALL_OW 483
// end ;
59919: GO 59779
59921: POP
59922: POP
// end ;
59923: PPOPN 5
59925: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59926: LD_EXP 30
59930: IFFALSE 59938
59932: PUSH
59933: LD_EXP 65
59937: AND
59938: IFFALSE 60032
59940: GO 59942
59942: DISABLE
59943: LD_INT 0
59945: PPUSH
59946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59947: LD_ADDR_VAR 0 2
59951: PUSH
59952: LD_INT 22
59954: PUSH
59955: LD_OWVAR 2
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 32
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 21
59976: PUSH
59977: LD_INT 2
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: LIST
59988: PPUSH
59989: CALL_OW 69
59993: ST_TO_ADDR
// if not tmp then
59994: LD_VAR 0 2
59998: NOT
59999: IFFALSE 60003
// exit ;
60001: GO 60032
// for i in tmp do
60003: LD_ADDR_VAR 0 1
60007: PUSH
60008: LD_VAR 0 2
60012: PUSH
60013: FOR_IN
60014: IFFALSE 60030
// SetFuel ( i , 0 ) ;
60016: LD_VAR 0 1
60020: PPUSH
60021: LD_INT 0
60023: PPUSH
60024: CALL_OW 240
60028: GO 60013
60030: POP
60031: POP
// end ;
60032: PPOPN 2
60034: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60035: LD_EXP 30
60039: IFFALSE 60047
60041: PUSH
60042: LD_EXP 66
60046: AND
60047: IFFALSE 60113
60049: GO 60051
60051: DISABLE
60052: LD_INT 0
60054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60055: LD_ADDR_VAR 0 1
60059: PUSH
60060: LD_INT 22
60062: PUSH
60063: LD_OWVAR 2
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 30
60074: PUSH
60075: LD_INT 29
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PPUSH
60086: CALL_OW 69
60090: ST_TO_ADDR
// if not tmp then
60091: LD_VAR 0 1
60095: NOT
60096: IFFALSE 60100
// exit ;
60098: GO 60113
// DestroyUnit ( tmp [ 1 ] ) ;
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 1
60107: ARRAY
60108: PPUSH
60109: CALL_OW 65
// end ;
60113: PPOPN 1
60115: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60116: LD_EXP 30
60120: IFFALSE 60128
60122: PUSH
60123: LD_EXP 68
60127: AND
60128: IFFALSE 60257
60130: GO 60132
60132: DISABLE
60133: LD_INT 0
60135: PPUSH
// begin uc_side := 0 ;
60136: LD_ADDR_OWVAR 20
60140: PUSH
60141: LD_INT 0
60143: ST_TO_ADDR
// uc_nation := nation_arabian ;
60144: LD_ADDR_OWVAR 21
60148: PUSH
60149: LD_INT 2
60151: ST_TO_ADDR
// hc_gallery :=  ;
60152: LD_ADDR_OWVAR 33
60156: PUSH
60157: LD_STRING 
60159: ST_TO_ADDR
// hc_name :=  ;
60160: LD_ADDR_OWVAR 26
60164: PUSH
60165: LD_STRING 
60167: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60168: LD_INT 1
60170: PPUSH
60171: LD_INT 11
60173: PPUSH
60174: LD_INT 10
60176: PPUSH
60177: CALL_OW 380
// un := CreateHuman ;
60181: LD_ADDR_VAR 0 1
60185: PUSH
60186: CALL_OW 44
60190: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60191: LD_VAR 0 1
60195: PPUSH
60196: LD_INT 1
60198: PPUSH
60199: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60203: LD_INT 35
60205: PPUSH
60206: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60210: LD_VAR 0 1
60214: PPUSH
60215: LD_INT 22
60217: PUSH
60218: LD_OWVAR 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PPUSH
60227: CALL_OW 69
60231: PPUSH
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL_OW 74
60241: PPUSH
60242: CALL_OW 115
// until IsDead ( un ) ;
60246: LD_VAR 0 1
60250: PPUSH
60251: CALL_OW 301
60255: IFFALSE 60203
// end ;
60257: PPOPN 1
60259: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60260: LD_EXP 30
60264: IFFALSE 60272
60266: PUSH
60267: LD_EXP 70
60271: AND
60272: IFFALSE 60284
60274: GO 60276
60276: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60277: LD_STRING earthquake(getX(game), 0, 32)
60279: PPUSH
60280: CALL_OW 559
60284: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60285: LD_EXP 30
60289: IFFALSE 60297
60291: PUSH
60292: LD_EXP 71
60296: AND
60297: IFFALSE 60388
60299: GO 60301
60301: DISABLE
60302: LD_INT 0
60304: PPUSH
// begin enable ;
60305: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60306: LD_ADDR_VAR 0 1
60310: PUSH
60311: LD_INT 22
60313: PUSH
60314: LD_OWVAR 2
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 21
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 33
60335: PUSH
60336: LD_INT 3
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: LIST
60347: PPUSH
60348: CALL_OW 69
60352: ST_TO_ADDR
// if not tmp then
60353: LD_VAR 0 1
60357: NOT
60358: IFFALSE 60362
// exit ;
60360: GO 60388
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60362: LD_VAR 0 1
60366: PUSH
60367: LD_INT 1
60369: PPUSH
60370: LD_VAR 0 1
60374: PPUSH
60375: CALL_OW 12
60379: ARRAY
60380: PPUSH
60381: LD_INT 1
60383: PPUSH
60384: CALL_OW 234
// end ;
60388: PPOPN 1
60390: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60391: LD_EXP 30
60395: IFFALSE 60403
60397: PUSH
60398: LD_EXP 72
60402: AND
60403: IFFALSE 60544
60405: GO 60407
60407: DISABLE
60408: LD_INT 0
60410: PPUSH
60411: PPUSH
60412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60413: LD_ADDR_VAR 0 3
60417: PUSH
60418: LD_INT 22
60420: PUSH
60421: LD_OWVAR 2
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 25
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PPUSH
60444: CALL_OW 69
60448: ST_TO_ADDR
// if not tmp then
60449: LD_VAR 0 3
60453: NOT
60454: IFFALSE 60458
// exit ;
60456: GO 60544
// un := tmp [ rand ( 1 , tmp ) ] ;
60458: LD_ADDR_VAR 0 2
60462: PUSH
60463: LD_VAR 0 3
60467: PUSH
60468: LD_INT 1
60470: PPUSH
60471: LD_VAR 0 3
60475: PPUSH
60476: CALL_OW 12
60480: ARRAY
60481: ST_TO_ADDR
// if Crawls ( un ) then
60482: LD_VAR 0 2
60486: PPUSH
60487: CALL_OW 318
60491: IFFALSE 60502
// ComWalk ( un ) ;
60493: LD_VAR 0 2
60497: PPUSH
60498: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60502: LD_VAR 0 2
60506: PPUSH
60507: LD_INT 9
60509: PPUSH
60510: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60514: LD_INT 28
60516: PPUSH
60517: LD_OWVAR 2
60521: PPUSH
60522: LD_INT 2
60524: PPUSH
60525: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60529: LD_INT 29
60531: PPUSH
60532: LD_OWVAR 2
60536: PPUSH
60537: LD_INT 2
60539: PPUSH
60540: CALL_OW 322
// end ;
60544: PPOPN 3
60546: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60547: LD_EXP 30
60551: IFFALSE 60559
60553: PUSH
60554: LD_EXP 73
60558: AND
60559: IFFALSE 60670
60561: GO 60563
60563: DISABLE
60564: LD_INT 0
60566: PPUSH
60567: PPUSH
60568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60569: LD_ADDR_VAR 0 3
60573: PUSH
60574: LD_INT 22
60576: PUSH
60577: LD_OWVAR 2
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 25
60588: PUSH
60589: LD_INT 1
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PPUSH
60600: CALL_OW 69
60604: ST_TO_ADDR
// if not tmp then
60605: LD_VAR 0 3
60609: NOT
60610: IFFALSE 60614
// exit ;
60612: GO 60670
// un := tmp [ rand ( 1 , tmp ) ] ;
60614: LD_ADDR_VAR 0 2
60618: PUSH
60619: LD_VAR 0 3
60623: PUSH
60624: LD_INT 1
60626: PPUSH
60627: LD_VAR 0 3
60631: PPUSH
60632: CALL_OW 12
60636: ARRAY
60637: ST_TO_ADDR
// if Crawls ( un ) then
60638: LD_VAR 0 2
60642: PPUSH
60643: CALL_OW 318
60647: IFFALSE 60658
// ComWalk ( un ) ;
60649: LD_VAR 0 2
60653: PPUSH
60654: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60658: LD_VAR 0 2
60662: PPUSH
60663: LD_INT 8
60665: PPUSH
60666: CALL_OW 336
// end ;
60670: PPOPN 3
60672: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60673: LD_EXP 30
60677: IFFALSE 60685
60679: PUSH
60680: LD_EXP 74
60684: AND
60685: IFFALSE 60829
60687: GO 60689
60689: DISABLE
60690: LD_INT 0
60692: PPUSH
60693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60694: LD_ADDR_VAR 0 2
60698: PUSH
60699: LD_INT 22
60701: PUSH
60702: LD_OWVAR 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 21
60713: PUSH
60714: LD_INT 2
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: LD_INT 34
60726: PUSH
60727: LD_INT 12
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 34
60736: PUSH
60737: LD_INT 51
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 34
60746: PUSH
60747: LD_INT 32
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: PPUSH
60765: CALL_OW 69
60769: ST_TO_ADDR
// if not tmp then
60770: LD_VAR 0 2
60774: NOT
60775: IFFALSE 60779
// exit ;
60777: GO 60829
// for i in tmp do
60779: LD_ADDR_VAR 0 1
60783: PUSH
60784: LD_VAR 0 2
60788: PUSH
60789: FOR_IN
60790: IFFALSE 60827
// if GetCargo ( i , mat_artifact ) = 0 then
60792: LD_VAR 0 1
60796: PPUSH
60797: LD_INT 4
60799: PPUSH
60800: CALL_OW 289
60804: PUSH
60805: LD_INT 0
60807: EQUAL
60808: IFFALSE 60825
// SetCargo ( i , mat_siberit , 100 ) ;
60810: LD_VAR 0 1
60814: PPUSH
60815: LD_INT 3
60817: PPUSH
60818: LD_INT 100
60820: PPUSH
60821: CALL_OW 290
60825: GO 60789
60827: POP
60828: POP
// end ;
60829: PPOPN 2
60831: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60832: LD_EXP 30
60836: IFFALSE 60844
60838: PUSH
60839: LD_EXP 75
60843: AND
60844: IFFALSE 61027
60846: GO 60848
60848: DISABLE
60849: LD_INT 0
60851: PPUSH
60852: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60853: LD_ADDR_VAR 0 2
60857: PUSH
60858: LD_INT 22
60860: PUSH
60861: LD_OWVAR 2
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: PPUSH
60870: CALL_OW 69
60874: ST_TO_ADDR
// if not tmp then
60875: LD_VAR 0 2
60879: NOT
60880: IFFALSE 60884
// exit ;
60882: GO 61027
// for i := 1 to 2 do
60884: LD_ADDR_VAR 0 1
60888: PUSH
60889: DOUBLE
60890: LD_INT 1
60892: DEC
60893: ST_TO_ADDR
60894: LD_INT 2
60896: PUSH
60897: FOR_TO
60898: IFFALSE 61025
// begin uc_side := your_side ;
60900: LD_ADDR_OWVAR 20
60904: PUSH
60905: LD_OWVAR 2
60909: ST_TO_ADDR
// uc_nation := nation_american ;
60910: LD_ADDR_OWVAR 21
60914: PUSH
60915: LD_INT 1
60917: ST_TO_ADDR
// vc_chassis := us_morphling ;
60918: LD_ADDR_OWVAR 37
60922: PUSH
60923: LD_INT 5
60925: ST_TO_ADDR
// vc_engine := engine_siberite ;
60926: LD_ADDR_OWVAR 39
60930: PUSH
60931: LD_INT 3
60933: ST_TO_ADDR
// vc_control := control_computer ;
60934: LD_ADDR_OWVAR 38
60938: PUSH
60939: LD_INT 3
60941: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60942: LD_ADDR_OWVAR 40
60946: PUSH
60947: LD_INT 10
60949: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60950: LD_VAR 0 2
60954: PUSH
60955: LD_INT 1
60957: ARRAY
60958: PPUSH
60959: CALL_OW 310
60963: NOT
60964: IFFALSE 61011
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60966: CALL_OW 45
60970: PPUSH
60971: LD_VAR 0 2
60975: PUSH
60976: LD_INT 1
60978: ARRAY
60979: PPUSH
60980: CALL_OW 250
60984: PPUSH
60985: LD_VAR 0 2
60989: PUSH
60990: LD_INT 1
60992: ARRAY
60993: PPUSH
60994: CALL_OW 251
60998: PPUSH
60999: LD_INT 12
61001: PPUSH
61002: LD_INT 1
61004: PPUSH
61005: CALL_OW 50
61009: GO 61023
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61011: CALL_OW 45
61015: PPUSH
61016: LD_INT 1
61018: PPUSH
61019: CALL_OW 51
// end ;
61023: GO 60897
61025: POP
61026: POP
// end ;
61027: PPOPN 2
61029: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61030: LD_EXP 30
61034: IFFALSE 61042
61036: PUSH
61037: LD_EXP 76
61041: AND
61042: IFFALSE 61264
61044: GO 61046
61046: DISABLE
61047: LD_INT 0
61049: PPUSH
61050: PPUSH
61051: PPUSH
61052: PPUSH
61053: PPUSH
61054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61055: LD_ADDR_VAR 0 6
61059: PUSH
61060: LD_INT 22
61062: PUSH
61063: LD_OWVAR 2
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: LD_INT 21
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 3
61084: PUSH
61085: LD_INT 23
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: LIST
61103: PPUSH
61104: CALL_OW 69
61108: ST_TO_ADDR
// if not tmp then
61109: LD_VAR 0 6
61113: NOT
61114: IFFALSE 61118
// exit ;
61116: GO 61264
// s1 := rand ( 1 , 4 ) ;
61118: LD_ADDR_VAR 0 2
61122: PUSH
61123: LD_INT 1
61125: PPUSH
61126: LD_INT 4
61128: PPUSH
61129: CALL_OW 12
61133: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61134: LD_ADDR_VAR 0 4
61138: PUSH
61139: LD_VAR 0 6
61143: PUSH
61144: LD_INT 1
61146: ARRAY
61147: PPUSH
61148: LD_VAR 0 2
61152: PPUSH
61153: CALL_OW 259
61157: ST_TO_ADDR
// if s1 = 1 then
61158: LD_VAR 0 2
61162: PUSH
61163: LD_INT 1
61165: EQUAL
61166: IFFALSE 61186
// s2 := rand ( 2 , 4 ) else
61168: LD_ADDR_VAR 0 3
61172: PUSH
61173: LD_INT 2
61175: PPUSH
61176: LD_INT 4
61178: PPUSH
61179: CALL_OW 12
61183: ST_TO_ADDR
61184: GO 61194
// s2 := 1 ;
61186: LD_ADDR_VAR 0 3
61190: PUSH
61191: LD_INT 1
61193: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61194: LD_ADDR_VAR 0 5
61198: PUSH
61199: LD_VAR 0 6
61203: PUSH
61204: LD_INT 1
61206: ARRAY
61207: PPUSH
61208: LD_VAR 0 3
61212: PPUSH
61213: CALL_OW 259
61217: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61218: LD_VAR 0 6
61222: PUSH
61223: LD_INT 1
61225: ARRAY
61226: PPUSH
61227: LD_VAR 0 2
61231: PPUSH
61232: LD_VAR 0 5
61236: PPUSH
61237: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61241: LD_VAR 0 6
61245: PUSH
61246: LD_INT 1
61248: ARRAY
61249: PPUSH
61250: LD_VAR 0 3
61254: PPUSH
61255: LD_VAR 0 4
61259: PPUSH
61260: CALL_OW 237
// end ;
61264: PPOPN 6
61266: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61267: LD_EXP 30
61271: IFFALSE 61279
61273: PUSH
61274: LD_EXP 77
61278: AND
61279: IFFALSE 61358
61281: GO 61283
61283: DISABLE
61284: LD_INT 0
61286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61287: LD_ADDR_VAR 0 1
61291: PUSH
61292: LD_INT 22
61294: PUSH
61295: LD_OWVAR 2
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 30
61306: PUSH
61307: LD_INT 3
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PPUSH
61318: CALL_OW 69
61322: ST_TO_ADDR
// if not tmp then
61323: LD_VAR 0 1
61327: NOT
61328: IFFALSE 61332
// exit ;
61330: GO 61358
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61332: LD_VAR 0 1
61336: PUSH
61337: LD_INT 1
61339: PPUSH
61340: LD_VAR 0 1
61344: PPUSH
61345: CALL_OW 12
61349: ARRAY
61350: PPUSH
61351: LD_INT 1
61353: PPUSH
61354: CALL_OW 234
// end ;
61358: PPOPN 1
61360: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61361: LD_EXP 30
61365: IFFALSE 61373
61367: PUSH
61368: LD_EXP 78
61372: AND
61373: IFFALSE 61485
61375: GO 61377
61377: DISABLE
61378: LD_INT 0
61380: PPUSH
61381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61382: LD_ADDR_VAR 0 2
61386: PUSH
61387: LD_INT 22
61389: PUSH
61390: LD_OWVAR 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 2
61401: PUSH
61402: LD_INT 30
61404: PUSH
61405: LD_INT 27
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 30
61414: PUSH
61415: LD_INT 26
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 30
61424: PUSH
61425: LD_INT 28
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PPUSH
61442: CALL_OW 69
61446: ST_TO_ADDR
// if not tmp then
61447: LD_VAR 0 2
61451: NOT
61452: IFFALSE 61456
// exit ;
61454: GO 61485
// for i in tmp do
61456: LD_ADDR_VAR 0 1
61460: PUSH
61461: LD_VAR 0 2
61465: PUSH
61466: FOR_IN
61467: IFFALSE 61483
// SetLives ( i , 1 ) ;
61469: LD_VAR 0 1
61473: PPUSH
61474: LD_INT 1
61476: PPUSH
61477: CALL_OW 234
61481: GO 61466
61483: POP
61484: POP
// end ;
61485: PPOPN 2
61487: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61488: LD_EXP 30
61492: IFFALSE 61500
61494: PUSH
61495: LD_EXP 79
61499: AND
61500: IFFALSE 61787
61502: GO 61504
61504: DISABLE
61505: LD_INT 0
61507: PPUSH
61508: PPUSH
61509: PPUSH
// begin i := rand ( 1 , 7 ) ;
61510: LD_ADDR_VAR 0 1
61514: PUSH
61515: LD_INT 1
61517: PPUSH
61518: LD_INT 7
61520: PPUSH
61521: CALL_OW 12
61525: ST_TO_ADDR
// case i of 1 :
61526: LD_VAR 0 1
61530: PUSH
61531: LD_INT 1
61533: DOUBLE
61534: EQUAL
61535: IFTRUE 61539
61537: GO 61549
61539: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61540: LD_STRING earthquake(getX(game), 0, 32)
61542: PPUSH
61543: CALL_OW 559
61547: GO 61787
61549: LD_INT 2
61551: DOUBLE
61552: EQUAL
61553: IFTRUE 61557
61555: GO 61571
61557: POP
// begin ToLua ( displayStucuk(); ) ;
61558: LD_STRING displayStucuk();
61560: PPUSH
61561: CALL_OW 559
// ResetFog ;
61565: CALL_OW 335
// end ; 3 :
61569: GO 61787
61571: LD_INT 3
61573: DOUBLE
61574: EQUAL
61575: IFTRUE 61579
61577: GO 61683
61579: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61580: LD_ADDR_VAR 0 2
61584: PUSH
61585: LD_INT 22
61587: PUSH
61588: LD_OWVAR 2
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 25
61599: PUSH
61600: LD_INT 1
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PPUSH
61611: CALL_OW 69
61615: ST_TO_ADDR
// if not tmp then
61616: LD_VAR 0 2
61620: NOT
61621: IFFALSE 61625
// exit ;
61623: GO 61787
// un := tmp [ rand ( 1 , tmp ) ] ;
61625: LD_ADDR_VAR 0 3
61629: PUSH
61630: LD_VAR 0 2
61634: PUSH
61635: LD_INT 1
61637: PPUSH
61638: LD_VAR 0 2
61642: PPUSH
61643: CALL_OW 12
61647: ARRAY
61648: ST_TO_ADDR
// if Crawls ( un ) then
61649: LD_VAR 0 3
61653: PPUSH
61654: CALL_OW 318
61658: IFFALSE 61669
// ComWalk ( un ) ;
61660: LD_VAR 0 3
61664: PPUSH
61665: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61669: LD_VAR 0 3
61673: PPUSH
61674: LD_INT 8
61676: PPUSH
61677: CALL_OW 336
// end ; 4 :
61681: GO 61787
61683: LD_INT 4
61685: DOUBLE
61686: EQUAL
61687: IFTRUE 61691
61689: GO 61765
61691: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61692: LD_ADDR_VAR 0 2
61696: PUSH
61697: LD_INT 22
61699: PUSH
61700: LD_OWVAR 2
61704: PUSH
61705: EMPTY
61706: LIST
61707: LIST
61708: PUSH
61709: LD_INT 30
61711: PUSH
61712: LD_INT 29
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PPUSH
61723: CALL_OW 69
61727: ST_TO_ADDR
// if not tmp then
61728: LD_VAR 0 2
61732: NOT
61733: IFFALSE 61737
// exit ;
61735: GO 61787
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61737: LD_VAR 0 2
61741: PUSH
61742: LD_INT 1
61744: ARRAY
61745: PPUSH
61746: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61750: LD_VAR 0 2
61754: PUSH
61755: LD_INT 1
61757: ARRAY
61758: PPUSH
61759: CALL_OW 65
// end ; 5 .. 7 :
61763: GO 61787
61765: LD_INT 5
61767: DOUBLE
61768: GREATEREQUAL
61769: IFFALSE 61777
61771: LD_INT 7
61773: DOUBLE
61774: LESSEQUAL
61775: IFTRUE 61779
61777: GO 61786
61779: POP
// StreamSibBomb ; end ;
61780: CALL 57968 0 0
61784: GO 61787
61786: POP
// end ;
61787: PPOPN 3
61789: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61790: LD_EXP 30
61794: IFFALSE 61802
61796: PUSH
61797: LD_EXP 80
61801: AND
61802: IFFALSE 61958
61804: GO 61806
61806: DISABLE
61807: LD_INT 0
61809: PPUSH
61810: PPUSH
61811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61812: LD_ADDR_VAR 0 2
61816: PUSH
61817: LD_INT 81
61819: PUSH
61820: LD_OWVAR 2
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: LD_INT 21
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 21
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PPUSH
61861: CALL_OW 69
61865: ST_TO_ADDR
// if not tmp then
61866: LD_VAR 0 2
61870: NOT
61871: IFFALSE 61875
// exit ;
61873: GO 61958
// p := 0 ;
61875: LD_ADDR_VAR 0 3
61879: PUSH
61880: LD_INT 0
61882: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61883: LD_INT 35
61885: PPUSH
61886: CALL_OW 67
// p := p + 1 ;
61890: LD_ADDR_VAR 0 3
61894: PUSH
61895: LD_VAR 0 3
61899: PUSH
61900: LD_INT 1
61902: PLUS
61903: ST_TO_ADDR
// for i in tmp do
61904: LD_ADDR_VAR 0 1
61908: PUSH
61909: LD_VAR 0 2
61913: PUSH
61914: FOR_IN
61915: IFFALSE 61946
// if GetLives ( i ) < 1000 then
61917: LD_VAR 0 1
61921: PPUSH
61922: CALL_OW 256
61926: PUSH
61927: LD_INT 1000
61929: LESS
61930: IFFALSE 61944
// SetLives ( i , 1000 ) ;
61932: LD_VAR 0 1
61936: PPUSH
61937: LD_INT 1000
61939: PPUSH
61940: CALL_OW 234
61944: GO 61914
61946: POP
61947: POP
// until p > 20 ;
61948: LD_VAR 0 3
61952: PUSH
61953: LD_INT 20
61955: GREATER
61956: IFFALSE 61883
// end ;
61958: PPOPN 3
61960: END
// every 0 0$1 trigger StreamModeActive and sTime do
61961: LD_EXP 30
61965: IFFALSE 61973
61967: PUSH
61968: LD_EXP 81
61972: AND
61973: IFFALSE 62008
61975: GO 61977
61977: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61978: LD_INT 28
61980: PPUSH
61981: LD_OWVAR 2
61985: PPUSH
61986: LD_INT 2
61988: PPUSH
61989: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61993: LD_INT 30
61995: PPUSH
61996: LD_OWVAR 2
62000: PPUSH
62001: LD_INT 2
62003: PPUSH
62004: CALL_OW 322
// end ;
62008: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62009: LD_EXP 30
62013: IFFALSE 62021
62015: PUSH
62016: LD_EXP 82
62020: AND
62021: IFFALSE 62142
62023: GO 62025
62025: DISABLE
62026: LD_INT 0
62028: PPUSH
62029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62030: LD_ADDR_VAR 0 2
62034: PUSH
62035: LD_INT 22
62037: PUSH
62038: LD_OWVAR 2
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 21
62049: PUSH
62050: LD_INT 1
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 23
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: PPUSH
62079: CALL_OW 69
62083: ST_TO_ADDR
// if not tmp then
62084: LD_VAR 0 2
62088: NOT
62089: IFFALSE 62093
// exit ;
62091: GO 62142
// for i in tmp do
62093: LD_ADDR_VAR 0 1
62097: PUSH
62098: LD_VAR 0 2
62102: PUSH
62103: FOR_IN
62104: IFFALSE 62140
// begin if Crawls ( i ) then
62106: LD_VAR 0 1
62110: PPUSH
62111: CALL_OW 318
62115: IFFALSE 62126
// ComWalk ( i ) ;
62117: LD_VAR 0 1
62121: PPUSH
62122: CALL_OW 138
// SetClass ( i , 2 ) ;
62126: LD_VAR 0 1
62130: PPUSH
62131: LD_INT 2
62133: PPUSH
62134: CALL_OW 336
// end ;
62138: GO 62103
62140: POP
62141: POP
// end ;
62142: PPOPN 2
62144: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62145: LD_EXP 30
62149: IFFALSE 62157
62151: PUSH
62152: LD_EXP 83
62156: AND
62157: IFFALSE 62447
62159: GO 62161
62161: DISABLE
62162: LD_INT 0
62164: PPUSH
62165: PPUSH
62166: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62167: LD_OWVAR 2
62171: PPUSH
62172: LD_INT 9
62174: PPUSH
62175: LD_INT 1
62177: PPUSH
62178: LD_INT 1
62180: PPUSH
62181: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62185: LD_INT 9
62187: PPUSH
62188: LD_OWVAR 2
62192: PPUSH
62193: CALL_OW 343
// uc_side := 9 ;
62197: LD_ADDR_OWVAR 20
62201: PUSH
62202: LD_INT 9
62204: ST_TO_ADDR
// uc_nation := 2 ;
62205: LD_ADDR_OWVAR 21
62209: PUSH
62210: LD_INT 2
62212: ST_TO_ADDR
// hc_name := Dark Warrior ;
62213: LD_ADDR_OWVAR 26
62217: PUSH
62218: LD_STRING Dark Warrior
62220: ST_TO_ADDR
// hc_gallery :=  ;
62221: LD_ADDR_OWVAR 33
62225: PUSH
62226: LD_STRING 
62228: ST_TO_ADDR
// hc_noskilllimit := true ;
62229: LD_ADDR_OWVAR 76
62233: PUSH
62234: LD_INT 1
62236: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62237: LD_ADDR_OWVAR 31
62241: PUSH
62242: LD_INT 30
62244: PUSH
62245: LD_INT 30
62247: PUSH
62248: LD_INT 30
62250: PUSH
62251: LD_INT 30
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: ST_TO_ADDR
// un := CreateHuman ;
62260: LD_ADDR_VAR 0 3
62264: PUSH
62265: CALL_OW 44
62269: ST_TO_ADDR
// hc_noskilllimit := false ;
62270: LD_ADDR_OWVAR 76
62274: PUSH
62275: LD_INT 0
62277: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62278: LD_VAR 0 3
62282: PPUSH
62283: LD_INT 1
62285: PPUSH
62286: CALL_OW 51
// ToLua ( playRanger() ) ;
62290: LD_STRING playRanger()
62292: PPUSH
62293: CALL_OW 559
// p := 0 ;
62297: LD_ADDR_VAR 0 2
62301: PUSH
62302: LD_INT 0
62304: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62305: LD_INT 35
62307: PPUSH
62308: CALL_OW 67
// p := p + 1 ;
62312: LD_ADDR_VAR 0 2
62316: PUSH
62317: LD_VAR 0 2
62321: PUSH
62322: LD_INT 1
62324: PLUS
62325: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62326: LD_VAR 0 3
62330: PPUSH
62331: CALL_OW 256
62335: PUSH
62336: LD_INT 1000
62338: LESS
62339: IFFALSE 62353
// SetLives ( un , 1000 ) ;
62341: LD_VAR 0 3
62345: PPUSH
62346: LD_INT 1000
62348: PPUSH
62349: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62353: LD_VAR 0 3
62357: PPUSH
62358: LD_INT 81
62360: PUSH
62361: LD_OWVAR 2
62365: PUSH
62366: EMPTY
62367: LIST
62368: LIST
62369: PUSH
62370: LD_INT 91
62372: PUSH
62373: LD_VAR 0 3
62377: PUSH
62378: LD_INT 30
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PPUSH
62390: CALL_OW 69
62394: PPUSH
62395: LD_VAR 0 3
62399: PPUSH
62400: CALL_OW 74
62404: PPUSH
62405: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62409: LD_VAR 0 2
62413: PUSH
62414: LD_INT 80
62416: GREATER
62417: IFTRUE 62430
62419: PUSH
62420: LD_VAR 0 3
62424: PPUSH
62425: CALL_OW 301
62429: OR
62430: IFFALSE 62305
// if un then
62432: LD_VAR 0 3
62436: IFFALSE 62447
// RemoveUnit ( un ) ;
62438: LD_VAR 0 3
62442: PPUSH
62443: CALL_OW 64
// end ;
62447: PPOPN 3
62449: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62450: LD_EXP 84
62454: IFFALSE 62570
62456: GO 62458
62458: DISABLE
62459: LD_INT 0
62461: PPUSH
62462: PPUSH
62463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62464: LD_ADDR_VAR 0 2
62468: PUSH
62469: LD_INT 81
62471: PUSH
62472: LD_OWVAR 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 21
62483: PUSH
62484: LD_INT 1
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PPUSH
62495: CALL_OW 69
62499: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62500: LD_STRING playComputer()
62502: PPUSH
62503: CALL_OW 559
// if not tmp then
62507: LD_VAR 0 2
62511: NOT
62512: IFFALSE 62516
// exit ;
62514: GO 62570
// for i in tmp do
62516: LD_ADDR_VAR 0 1
62520: PUSH
62521: LD_VAR 0 2
62525: PUSH
62526: FOR_IN
62527: IFFALSE 62568
// for j := 1 to 4 do
62529: LD_ADDR_VAR 0 3
62533: PUSH
62534: DOUBLE
62535: LD_INT 1
62537: DEC
62538: ST_TO_ADDR
62539: LD_INT 4
62541: PUSH
62542: FOR_TO
62543: IFFALSE 62564
// SetSkill ( i , j , 10 ) ;
62545: LD_VAR 0 1
62549: PPUSH
62550: LD_VAR 0 3
62554: PPUSH
62555: LD_INT 10
62557: PPUSH
62558: CALL_OW 237
62562: GO 62542
62564: POP
62565: POP
62566: GO 62526
62568: POP
62569: POP
// end ;
62570: PPOPN 3
62572: END
// every 0 0$1 trigger s30 do var i , tmp ;
62573: LD_EXP 85
62577: IFFALSE 62646
62579: GO 62581
62581: DISABLE
62582: LD_INT 0
62584: PPUSH
62585: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62586: LD_ADDR_VAR 0 2
62590: PUSH
62591: LD_INT 22
62593: PUSH
62594: LD_OWVAR 2
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PPUSH
62603: CALL_OW 69
62607: ST_TO_ADDR
// if not tmp then
62608: LD_VAR 0 2
62612: NOT
62613: IFFALSE 62617
// exit ;
62615: GO 62646
// for i in tmp do
62617: LD_ADDR_VAR 0 1
62621: PUSH
62622: LD_VAR 0 2
62626: PUSH
62627: FOR_IN
62628: IFFALSE 62644
// SetLives ( i , 300 ) ;
62630: LD_VAR 0 1
62634: PPUSH
62635: LD_INT 300
62637: PPUSH
62638: CALL_OW 234
62642: GO 62627
62644: POP
62645: POP
// end ;
62646: PPOPN 2
62648: END
// every 0 0$1 trigger s60 do var i , tmp ;
62649: LD_EXP 86
62653: IFFALSE 62722
62655: GO 62657
62657: DISABLE
62658: LD_INT 0
62660: PPUSH
62661: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62662: LD_ADDR_VAR 0 2
62666: PUSH
62667: LD_INT 22
62669: PUSH
62670: LD_OWVAR 2
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PPUSH
62679: CALL_OW 69
62683: ST_TO_ADDR
// if not tmp then
62684: LD_VAR 0 2
62688: NOT
62689: IFFALSE 62693
// exit ;
62691: GO 62722
// for i in tmp do
62693: LD_ADDR_VAR 0 1
62697: PUSH
62698: LD_VAR 0 2
62702: PUSH
62703: FOR_IN
62704: IFFALSE 62720
// SetLives ( i , 600 ) ;
62706: LD_VAR 0 1
62710: PPUSH
62711: LD_INT 600
62713: PPUSH
62714: CALL_OW 234
62718: GO 62703
62720: POP
62721: POP
// end ;
62722: PPOPN 2
62724: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62725: LD_INT 0
62727: PPUSH
// case cmd of 301 :
62728: LD_VAR 0 1
62732: PUSH
62733: LD_INT 301
62735: DOUBLE
62736: EQUAL
62737: IFTRUE 62741
62739: GO 62773
62741: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62742: LD_VAR 0 6
62746: PPUSH
62747: LD_VAR 0 7
62751: PPUSH
62752: LD_VAR 0 8
62756: PPUSH
62757: LD_VAR 0 4
62761: PPUSH
62762: LD_VAR 0 5
62766: PPUSH
62767: CALL 63986 0 5
62771: GO 62894
62773: LD_INT 302
62775: DOUBLE
62776: EQUAL
62777: IFTRUE 62781
62779: GO 62818
62781: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62782: LD_VAR 0 6
62786: PPUSH
62787: LD_VAR 0 7
62791: PPUSH
62792: LD_VAR 0 8
62796: PPUSH
62797: LD_VAR 0 9
62801: PPUSH
62802: LD_VAR 0 4
62806: PPUSH
62807: LD_VAR 0 5
62811: PPUSH
62812: CALL 64077 0 6
62816: GO 62894
62818: LD_INT 303
62820: DOUBLE
62821: EQUAL
62822: IFTRUE 62826
62824: GO 62863
62826: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62827: LD_VAR 0 6
62831: PPUSH
62832: LD_VAR 0 7
62836: PPUSH
62837: LD_VAR 0 8
62841: PPUSH
62842: LD_VAR 0 9
62846: PPUSH
62847: LD_VAR 0 4
62851: PPUSH
62852: LD_VAR 0 5
62856: PPUSH
62857: CALL 62899 0 6
62861: GO 62894
62863: LD_INT 304
62865: DOUBLE
62866: EQUAL
62867: IFTRUE 62871
62869: GO 62893
62871: POP
// hHackTeleport ( unit , x , y ) ; end ;
62872: LD_VAR 0 2
62876: PPUSH
62877: LD_VAR 0 4
62881: PPUSH
62882: LD_VAR 0 5
62886: PPUSH
62887: CALL 64670 0 3
62891: GO 62894
62893: POP
// end ;
62894: LD_VAR 0 12
62898: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
62899: LD_INT 0
62901: PPUSH
62902: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
62903: LD_VAR 0 1
62907: PUSH
62908: LD_INT 1
62910: LESS
62911: IFTRUE 62923
62913: PUSH
62914: LD_VAR 0 1
62918: PUSH
62919: LD_INT 3
62921: GREATER
62922: OR
62923: IFTRUE 62941
62925: PUSH
62926: LD_VAR 0 5
62930: PPUSH
62931: LD_VAR 0 6
62935: PPUSH
62936: CALL_OW 428
62940: OR
62941: IFFALSE 62945
// exit ;
62943: GO 63673
// uc_side := your_side ;
62945: LD_ADDR_OWVAR 20
62949: PUSH
62950: LD_OWVAR 2
62954: ST_TO_ADDR
// uc_nation := nation ;
62955: LD_ADDR_OWVAR 21
62959: PUSH
62960: LD_VAR 0 1
62964: ST_TO_ADDR
// bc_level = 1 ;
62965: LD_ADDR_OWVAR 43
62969: PUSH
62970: LD_INT 1
62972: ST_TO_ADDR
// case btype of 1 :
62973: LD_VAR 0 2
62977: PUSH
62978: LD_INT 1
62980: DOUBLE
62981: EQUAL
62982: IFTRUE 62986
62984: GO 62997
62986: POP
// bc_type := b_depot ; 2 :
62987: LD_ADDR_OWVAR 42
62991: PUSH
62992: LD_INT 0
62994: ST_TO_ADDR
62995: GO 63617
62997: LD_INT 2
62999: DOUBLE
63000: EQUAL
63001: IFTRUE 63005
63003: GO 63016
63005: POP
// bc_type := b_warehouse ; 3 :
63006: LD_ADDR_OWVAR 42
63010: PUSH
63011: LD_INT 1
63013: ST_TO_ADDR
63014: GO 63617
63016: LD_INT 3
63018: DOUBLE
63019: EQUAL
63020: IFTRUE 63024
63022: GO 63035
63024: POP
// bc_type := b_lab ; 4 .. 9 :
63025: LD_ADDR_OWVAR 42
63029: PUSH
63030: LD_INT 6
63032: ST_TO_ADDR
63033: GO 63617
63035: LD_INT 4
63037: DOUBLE
63038: GREATEREQUAL
63039: IFFALSE 63047
63041: LD_INT 9
63043: DOUBLE
63044: LESSEQUAL
63045: IFTRUE 63049
63047: GO 63109
63049: POP
// begin bc_type := b_lab_half ;
63050: LD_ADDR_OWVAR 42
63054: PUSH
63055: LD_INT 7
63057: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63058: LD_ADDR_OWVAR 44
63062: PUSH
63063: LD_INT 10
63065: PUSH
63066: LD_INT 11
63068: PUSH
63069: LD_INT 12
63071: PUSH
63072: LD_INT 15
63074: PUSH
63075: LD_INT 14
63077: PUSH
63078: LD_INT 13
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: PUSH
63089: LD_VAR 0 2
63093: PUSH
63094: LD_INT 3
63096: MINUS
63097: ARRAY
63098: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
63099: LD_ADDR_OWVAR 45
63103: PUSH
63104: LD_INT 9
63106: ST_TO_ADDR
// end ; 10 .. 13 :
63107: GO 63617
63109: LD_INT 10
63111: DOUBLE
63112: GREATEREQUAL
63113: IFFALSE 63121
63115: LD_INT 13
63117: DOUBLE
63118: LESSEQUAL
63119: IFTRUE 63123
63121: GO 63200
63123: POP
// begin bc_type := b_lab_full ;
63124: LD_ADDR_OWVAR 42
63128: PUSH
63129: LD_INT 8
63131: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63132: LD_ADDR_OWVAR 44
63136: PUSH
63137: LD_INT 10
63139: PUSH
63140: LD_INT 12
63142: PUSH
63143: LD_INT 14
63145: PUSH
63146: LD_INT 13
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: PUSH
63155: LD_VAR 0 2
63159: PUSH
63160: LD_INT 9
63162: MINUS
63163: ARRAY
63164: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63165: LD_ADDR_OWVAR 45
63169: PUSH
63170: LD_INT 11
63172: PUSH
63173: LD_INT 15
63175: PUSH
63176: LD_INT 12
63178: PUSH
63179: LD_INT 15
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: PUSH
63188: LD_VAR 0 2
63192: PUSH
63193: LD_INT 9
63195: MINUS
63196: ARRAY
63197: ST_TO_ADDR
// end ; 14 :
63198: GO 63617
63200: LD_INT 14
63202: DOUBLE
63203: EQUAL
63204: IFTRUE 63208
63206: GO 63219
63208: POP
// bc_type := b_workshop ; 15 :
63209: LD_ADDR_OWVAR 42
63213: PUSH
63214: LD_INT 2
63216: ST_TO_ADDR
63217: GO 63617
63219: LD_INT 15
63221: DOUBLE
63222: EQUAL
63223: IFTRUE 63227
63225: GO 63238
63227: POP
// bc_type := b_factory ; 16 :
63228: LD_ADDR_OWVAR 42
63232: PUSH
63233: LD_INT 3
63235: ST_TO_ADDR
63236: GO 63617
63238: LD_INT 16
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63246
63244: GO 63257
63246: POP
// bc_type := b_ext_gun ; 17 :
63247: LD_ADDR_OWVAR 42
63251: PUSH
63252: LD_INT 17
63254: ST_TO_ADDR
63255: GO 63617
63257: LD_INT 17
63259: DOUBLE
63260: EQUAL
63261: IFTRUE 63265
63263: GO 63293
63265: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63266: LD_ADDR_OWVAR 42
63270: PUSH
63271: LD_INT 19
63273: PUSH
63274: LD_INT 23
63276: PUSH
63277: LD_INT 19
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: PUSH
63285: LD_VAR 0 1
63289: ARRAY
63290: ST_TO_ADDR
63291: GO 63617
63293: LD_INT 18
63295: DOUBLE
63296: EQUAL
63297: IFTRUE 63301
63299: GO 63312
63301: POP
// bc_type := b_ext_radar ; 19 :
63302: LD_ADDR_OWVAR 42
63306: PUSH
63307: LD_INT 20
63309: ST_TO_ADDR
63310: GO 63617
63312: LD_INT 19
63314: DOUBLE
63315: EQUAL
63316: IFTRUE 63320
63318: GO 63331
63320: POP
// bc_type := b_ext_radio ; 20 :
63321: LD_ADDR_OWVAR 42
63325: PUSH
63326: LD_INT 22
63328: ST_TO_ADDR
63329: GO 63617
63331: LD_INT 20
63333: DOUBLE
63334: EQUAL
63335: IFTRUE 63339
63337: GO 63350
63339: POP
// bc_type := b_ext_siberium ; 21 :
63340: LD_ADDR_OWVAR 42
63344: PUSH
63345: LD_INT 21
63347: ST_TO_ADDR
63348: GO 63617
63350: LD_INT 21
63352: DOUBLE
63353: EQUAL
63354: IFTRUE 63358
63356: GO 63369
63358: POP
// bc_type := b_ext_computer ; 22 :
63359: LD_ADDR_OWVAR 42
63363: PUSH
63364: LD_INT 24
63366: ST_TO_ADDR
63367: GO 63617
63369: LD_INT 22
63371: DOUBLE
63372: EQUAL
63373: IFTRUE 63377
63375: GO 63388
63377: POP
// bc_type := b_ext_track ; 23 :
63378: LD_ADDR_OWVAR 42
63382: PUSH
63383: LD_INT 16
63385: ST_TO_ADDR
63386: GO 63617
63388: LD_INT 23
63390: DOUBLE
63391: EQUAL
63392: IFTRUE 63396
63394: GO 63407
63396: POP
// bc_type := b_ext_laser ; 24 :
63397: LD_ADDR_OWVAR 42
63401: PUSH
63402: LD_INT 25
63404: ST_TO_ADDR
63405: GO 63617
63407: LD_INT 24
63409: DOUBLE
63410: EQUAL
63411: IFTRUE 63415
63413: GO 63426
63415: POP
// bc_type := b_control_tower ; 25 :
63416: LD_ADDR_OWVAR 42
63420: PUSH
63421: LD_INT 36
63423: ST_TO_ADDR
63424: GO 63617
63426: LD_INT 25
63428: DOUBLE
63429: EQUAL
63430: IFTRUE 63434
63432: GO 63445
63434: POP
// bc_type := b_breastwork ; 26 :
63435: LD_ADDR_OWVAR 42
63439: PUSH
63440: LD_INT 31
63442: ST_TO_ADDR
63443: GO 63617
63445: LD_INT 26
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63453
63451: GO 63464
63453: POP
// bc_type := b_bunker ; 27 :
63454: LD_ADDR_OWVAR 42
63458: PUSH
63459: LD_INT 32
63461: ST_TO_ADDR
63462: GO 63617
63464: LD_INT 27
63466: DOUBLE
63467: EQUAL
63468: IFTRUE 63472
63470: GO 63483
63472: POP
// bc_type := b_turret ; 28 :
63473: LD_ADDR_OWVAR 42
63477: PUSH
63478: LD_INT 33
63480: ST_TO_ADDR
63481: GO 63617
63483: LD_INT 28
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63491
63489: GO 63502
63491: POP
// bc_type := b_armoury ; 29 :
63492: LD_ADDR_OWVAR 42
63496: PUSH
63497: LD_INT 4
63499: ST_TO_ADDR
63500: GO 63617
63502: LD_INT 29
63504: DOUBLE
63505: EQUAL
63506: IFTRUE 63510
63508: GO 63521
63510: POP
// bc_type := b_barracks ; 30 :
63511: LD_ADDR_OWVAR 42
63515: PUSH
63516: LD_INT 5
63518: ST_TO_ADDR
63519: GO 63617
63521: LD_INT 30
63523: DOUBLE
63524: EQUAL
63525: IFTRUE 63529
63527: GO 63540
63529: POP
// bc_type := b_solar_power ; 31 :
63530: LD_ADDR_OWVAR 42
63534: PUSH
63535: LD_INT 27
63537: ST_TO_ADDR
63538: GO 63617
63540: LD_INT 31
63542: DOUBLE
63543: EQUAL
63544: IFTRUE 63548
63546: GO 63559
63548: POP
// bc_type := b_oil_power ; 32 :
63549: LD_ADDR_OWVAR 42
63553: PUSH
63554: LD_INT 26
63556: ST_TO_ADDR
63557: GO 63617
63559: LD_INT 32
63561: DOUBLE
63562: EQUAL
63563: IFTRUE 63567
63565: GO 63578
63567: POP
// bc_type := b_siberite_power ; 33 :
63568: LD_ADDR_OWVAR 42
63572: PUSH
63573: LD_INT 28
63575: ST_TO_ADDR
63576: GO 63617
63578: LD_INT 33
63580: DOUBLE
63581: EQUAL
63582: IFTRUE 63586
63584: GO 63597
63586: POP
// bc_type := b_oil_mine ; 34 :
63587: LD_ADDR_OWVAR 42
63591: PUSH
63592: LD_INT 29
63594: ST_TO_ADDR
63595: GO 63617
63597: LD_INT 34
63599: DOUBLE
63600: EQUAL
63601: IFTRUE 63605
63603: GO 63616
63605: POP
// bc_type := b_siberite_mine ; end ;
63606: LD_ADDR_OWVAR 42
63610: PUSH
63611: LD_INT 30
63613: ST_TO_ADDR
63614: GO 63617
63616: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63617: LD_ADDR_VAR 0 8
63621: PUSH
63622: LD_VAR 0 5
63626: PPUSH
63627: LD_VAR 0 6
63631: PPUSH
63632: LD_VAR 0 3
63636: PPUSH
63637: CALL_OW 47
63641: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63642: LD_OWVAR 42
63646: PUSH
63647: LD_INT 32
63649: PUSH
63650: LD_INT 33
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: IN
63657: IFFALSE 63673
// PlaceWeaponTurret ( b , weapon ) ;
63659: LD_VAR 0 8
63663: PPUSH
63664: LD_VAR 0 4
63668: PPUSH
63669: CALL_OW 431
// end ;
63673: LD_VAR 0 7
63677: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63678: LD_INT 0
63680: PPUSH
63681: PPUSH
63682: PPUSH
63683: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63684: LD_ADDR_VAR 0 4
63688: PUSH
63689: LD_INT 22
63691: PUSH
63692: LD_OWVAR 2
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: LD_INT 30
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 30
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: LIST
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PPUSH
63733: CALL_OW 69
63737: ST_TO_ADDR
// if not tmp then
63738: LD_VAR 0 4
63742: NOT
63743: IFFALSE 63747
// exit ;
63745: GO 63806
// for i in tmp do
63747: LD_ADDR_VAR 0 2
63751: PUSH
63752: LD_VAR 0 4
63756: PUSH
63757: FOR_IN
63758: IFFALSE 63804
// for j = 1 to 3 do
63760: LD_ADDR_VAR 0 3
63764: PUSH
63765: DOUBLE
63766: LD_INT 1
63768: DEC
63769: ST_TO_ADDR
63770: LD_INT 3
63772: PUSH
63773: FOR_TO
63774: IFFALSE 63800
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63776: LD_VAR 0 2
63780: PPUSH
63781: CALL_OW 274
63785: PPUSH
63786: LD_VAR 0 3
63790: PPUSH
63791: LD_INT 99999
63793: PPUSH
63794: CALL_OW 277
63798: GO 63773
63800: POP
63801: POP
63802: GO 63757
63804: POP
63805: POP
// end ;
63806: LD_VAR 0 1
63810: RET
// export function hHackSetLevel10 ; var i , j ; begin
63811: LD_INT 0
63813: PPUSH
63814: PPUSH
63815: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63816: LD_ADDR_VAR 0 2
63820: PUSH
63821: LD_INT 21
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PPUSH
63831: CALL_OW 69
63835: PUSH
63836: FOR_IN
63837: IFFALSE 63889
// if IsSelected ( i ) then
63839: LD_VAR 0 2
63843: PPUSH
63844: CALL_OW 306
63848: IFFALSE 63887
// begin for j := 1 to 4 do
63850: LD_ADDR_VAR 0 3
63854: PUSH
63855: DOUBLE
63856: LD_INT 1
63858: DEC
63859: ST_TO_ADDR
63860: LD_INT 4
63862: PUSH
63863: FOR_TO
63864: IFFALSE 63885
// SetSkill ( i , j , 10 ) ;
63866: LD_VAR 0 2
63870: PPUSH
63871: LD_VAR 0 3
63875: PPUSH
63876: LD_INT 10
63878: PPUSH
63879: CALL_OW 237
63883: GO 63863
63885: POP
63886: POP
// end ;
63887: GO 63836
63889: POP
63890: POP
// end ;
63891: LD_VAR 0 1
63895: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63896: LD_INT 0
63898: PPUSH
63899: PPUSH
63900: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63901: LD_ADDR_VAR 0 2
63905: PUSH
63906: LD_INT 22
63908: PUSH
63909: LD_OWVAR 2
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 21
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PPUSH
63932: CALL_OW 69
63936: PUSH
63937: FOR_IN
63938: IFFALSE 63979
// begin for j := 1 to 4 do
63940: LD_ADDR_VAR 0 3
63944: PUSH
63945: DOUBLE
63946: LD_INT 1
63948: DEC
63949: ST_TO_ADDR
63950: LD_INT 4
63952: PUSH
63953: FOR_TO
63954: IFFALSE 63975
// SetSkill ( i , j , 10 ) ;
63956: LD_VAR 0 2
63960: PPUSH
63961: LD_VAR 0 3
63965: PPUSH
63966: LD_INT 10
63968: PPUSH
63969: CALL_OW 237
63973: GO 63953
63975: POP
63976: POP
// end ;
63977: GO 63937
63979: POP
63980: POP
// end ;
63981: LD_VAR 0 1
63985: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63986: LD_INT 0
63988: PPUSH
// uc_side := your_side ;
63989: LD_ADDR_OWVAR 20
63993: PUSH
63994: LD_OWVAR 2
63998: ST_TO_ADDR
// uc_nation := nation ;
63999: LD_ADDR_OWVAR 21
64003: PUSH
64004: LD_VAR 0 1
64008: ST_TO_ADDR
// InitHc ;
64009: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64013: LD_INT 0
64015: PPUSH
64016: LD_VAR 0 2
64020: PPUSH
64021: LD_VAR 0 3
64025: PPUSH
64026: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64030: LD_VAR 0 4
64034: PPUSH
64035: LD_VAR 0 5
64039: PPUSH
64040: CALL_OW 428
64044: PUSH
64045: LD_INT 0
64047: EQUAL
64048: IFFALSE 64072
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64050: CALL_OW 44
64054: PPUSH
64055: LD_VAR 0 4
64059: PPUSH
64060: LD_VAR 0 5
64064: PPUSH
64065: LD_INT 1
64067: PPUSH
64068: CALL_OW 48
// end ;
64072: LD_VAR 0 6
64076: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64077: LD_INT 0
64079: PPUSH
64080: PPUSH
// uc_side := your_side ;
64081: LD_ADDR_OWVAR 20
64085: PUSH
64086: LD_OWVAR 2
64090: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64091: LD_VAR 0 1
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: LD_INT 3
64104: PUSH
64105: LD_INT 4
64107: PUSH
64108: LD_INT 5
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: IN
64118: IFFALSE 64130
// uc_nation := nation_american else
64120: LD_ADDR_OWVAR 21
64124: PUSH
64125: LD_INT 1
64127: ST_TO_ADDR
64128: GO 64173
// if chassis in [ 11 , 12 , 13 , 14 ] then
64130: LD_VAR 0 1
64134: PUSH
64135: LD_INT 11
64137: PUSH
64138: LD_INT 12
64140: PUSH
64141: LD_INT 13
64143: PUSH
64144: LD_INT 14
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: IN
64153: IFFALSE 64165
// uc_nation := nation_arabian else
64155: LD_ADDR_OWVAR 21
64159: PUSH
64160: LD_INT 2
64162: ST_TO_ADDR
64163: GO 64173
// uc_nation := nation_russian ;
64165: LD_ADDR_OWVAR 21
64169: PUSH
64170: LD_INT 3
64172: ST_TO_ADDR
// vc_chassis := chassis ;
64173: LD_ADDR_OWVAR 37
64177: PUSH
64178: LD_VAR 0 1
64182: ST_TO_ADDR
// vc_engine := engine ;
64183: LD_ADDR_OWVAR 39
64187: PUSH
64188: LD_VAR 0 2
64192: ST_TO_ADDR
// vc_control := control ;
64193: LD_ADDR_OWVAR 38
64197: PUSH
64198: LD_VAR 0 3
64202: ST_TO_ADDR
// vc_weapon := weapon ;
64203: LD_ADDR_OWVAR 40
64207: PUSH
64208: LD_VAR 0 4
64212: ST_TO_ADDR
// un := CreateVehicle ;
64213: LD_ADDR_VAR 0 8
64217: PUSH
64218: CALL_OW 45
64222: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64223: LD_VAR 0 8
64227: PPUSH
64228: LD_INT 0
64230: PPUSH
64231: LD_INT 5
64233: PPUSH
64234: CALL_OW 12
64238: PPUSH
64239: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64243: LD_VAR 0 8
64247: PPUSH
64248: LD_VAR 0 5
64252: PPUSH
64253: LD_VAR 0 6
64257: PPUSH
64258: LD_INT 1
64260: PPUSH
64261: CALL_OW 48
// end ;
64265: LD_VAR 0 7
64269: RET
// export hInvincible ; every 1 do
64270: GO 64272
64272: DISABLE
// hInvincible := [ ] ;
64273: LD_ADDR_EXP 87
64277: PUSH
64278: EMPTY
64279: ST_TO_ADDR
64280: END
// every 10 do var i ;
64281: GO 64283
64283: DISABLE
64284: LD_INT 0
64286: PPUSH
// begin enable ;
64287: ENABLE
// if not hInvincible then
64288: LD_EXP 87
64292: NOT
64293: IFFALSE 64297
// exit ;
64295: GO 64341
// for i in hInvincible do
64297: LD_ADDR_VAR 0 1
64301: PUSH
64302: LD_EXP 87
64306: PUSH
64307: FOR_IN
64308: IFFALSE 64339
// if GetLives ( i ) < 1000 then
64310: LD_VAR 0 1
64314: PPUSH
64315: CALL_OW 256
64319: PUSH
64320: LD_INT 1000
64322: LESS
64323: IFFALSE 64337
// SetLives ( i , 1000 ) ;
64325: LD_VAR 0 1
64329: PPUSH
64330: LD_INT 1000
64332: PPUSH
64333: CALL_OW 234
64337: GO 64307
64339: POP
64340: POP
// end ;
64341: PPOPN 1
64343: END
// export function hHackInvincible ; var i ; begin
64344: LD_INT 0
64346: PPUSH
64347: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64348: LD_ADDR_VAR 0 2
64352: PUSH
64353: LD_INT 2
64355: PUSH
64356: LD_INT 21
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 21
64368: PUSH
64369: LD_INT 2
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: LIST
64380: PPUSH
64381: CALL_OW 69
64385: PUSH
64386: FOR_IN
64387: IFFALSE 64448
// if IsSelected ( i ) then
64389: LD_VAR 0 2
64393: PPUSH
64394: CALL_OW 306
64398: IFFALSE 64446
// begin if i in hInvincible then
64400: LD_VAR 0 2
64404: PUSH
64405: LD_EXP 87
64409: IN
64410: IFFALSE 64430
// hInvincible := hInvincible diff i else
64412: LD_ADDR_EXP 87
64416: PUSH
64417: LD_EXP 87
64421: PUSH
64422: LD_VAR 0 2
64426: DIFF
64427: ST_TO_ADDR
64428: GO 64446
// hInvincible := hInvincible union i ;
64430: LD_ADDR_EXP 87
64434: PUSH
64435: LD_EXP 87
64439: PUSH
64440: LD_VAR 0 2
64444: UNION
64445: ST_TO_ADDR
// end ;
64446: GO 64386
64448: POP
64449: POP
// end ;
64450: LD_VAR 0 1
64454: RET
// export function hHackInvisible ; var i , j ; begin
64455: LD_INT 0
64457: PPUSH
64458: PPUSH
64459: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64460: LD_ADDR_VAR 0 2
64464: PUSH
64465: LD_INT 21
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PPUSH
64475: CALL_OW 69
64479: PUSH
64480: FOR_IN
64481: IFFALSE 64505
// if IsSelected ( i ) then
64483: LD_VAR 0 2
64487: PPUSH
64488: CALL_OW 306
64492: IFFALSE 64503
// ComForceInvisible ( i ) ;
64494: LD_VAR 0 2
64498: PPUSH
64499: CALL_OW 496
64503: GO 64480
64505: POP
64506: POP
// end ;
64507: LD_VAR 0 1
64511: RET
// export function hHackChangeYourSide ; begin
64512: LD_INT 0
64514: PPUSH
// if your_side = 8 then
64515: LD_OWVAR 2
64519: PUSH
64520: LD_INT 8
64522: EQUAL
64523: IFFALSE 64535
// your_side := 0 else
64525: LD_ADDR_OWVAR 2
64529: PUSH
64530: LD_INT 0
64532: ST_TO_ADDR
64533: GO 64549
// your_side := your_side + 1 ;
64535: LD_ADDR_OWVAR 2
64539: PUSH
64540: LD_OWVAR 2
64544: PUSH
64545: LD_INT 1
64547: PLUS
64548: ST_TO_ADDR
// end ;
64549: LD_VAR 0 1
64553: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64554: LD_INT 0
64556: PPUSH
64557: PPUSH
64558: PPUSH
// for i in all_units do
64559: LD_ADDR_VAR 0 2
64563: PUSH
64564: LD_OWVAR 3
64568: PUSH
64569: FOR_IN
64570: IFFALSE 64648
// if IsSelected ( i ) then
64572: LD_VAR 0 2
64576: PPUSH
64577: CALL_OW 306
64581: IFFALSE 64646
// begin j := GetSide ( i ) ;
64583: LD_ADDR_VAR 0 3
64587: PUSH
64588: LD_VAR 0 2
64592: PPUSH
64593: CALL_OW 255
64597: ST_TO_ADDR
// if j = 8 then
64598: LD_VAR 0 3
64602: PUSH
64603: LD_INT 8
64605: EQUAL
64606: IFFALSE 64618
// j := 0 else
64608: LD_ADDR_VAR 0 3
64612: PUSH
64613: LD_INT 0
64615: ST_TO_ADDR
64616: GO 64632
// j := j + 1 ;
64618: LD_ADDR_VAR 0 3
64622: PUSH
64623: LD_VAR 0 3
64627: PUSH
64628: LD_INT 1
64630: PLUS
64631: ST_TO_ADDR
// SetSide ( i , j ) ;
64632: LD_VAR 0 2
64636: PPUSH
64637: LD_VAR 0 3
64641: PPUSH
64642: CALL_OW 235
// end ;
64646: GO 64569
64648: POP
64649: POP
// end ;
64650: LD_VAR 0 1
64654: RET
// export function hHackFog ; begin
64655: LD_INT 0
64657: PPUSH
// FogOff ( true ) ;
64658: LD_INT 1
64660: PPUSH
64661: CALL_OW 344
// end ;
64665: LD_VAR 0 1
64669: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64670: LD_INT 0
64672: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64673: LD_VAR 0 1
64677: PPUSH
64678: LD_VAR 0 2
64682: PPUSH
64683: LD_VAR 0 3
64687: PPUSH
64688: LD_INT 1
64690: PPUSH
64691: LD_INT 1
64693: PPUSH
64694: CALL_OW 483
// CenterOnXY ( x , y ) ;
64698: LD_VAR 0 2
64702: PPUSH
64703: LD_VAR 0 3
64707: PPUSH
64708: CALL_OW 84
// end ;
64712: LD_VAR 0 4
64716: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64717: LD_INT 0
64719: PPUSH
64720: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64721: LD_VAR 0 1
64725: NOT
64726: IFTRUE 64745
64728: PUSH
64729: LD_VAR 0 2
64733: PPUSH
64734: LD_VAR 0 3
64738: PPUSH
64739: CALL_OW 488
64743: NOT
64744: OR
64745: IFTRUE 64780
64747: PUSH
64748: LD_VAR 0 1
64752: PPUSH
64753: CALL_OW 266
64757: PUSH
64758: LD_INT 3
64760: NONEQUAL
64761: IFFALSE 64779
64763: PUSH
64764: LD_VAR 0 1
64768: PPUSH
64769: CALL_OW 247
64773: PUSH
64774: LD_INT 1
64776: EQUAL
64777: NOT
64778: AND
64779: OR
64780: IFFALSE 64784
// exit ;
64782: GO 65066
// if GetType ( factory ) = unit_human then
64784: LD_VAR 0 1
64788: PPUSH
64789: CALL_OW 247
64793: PUSH
64794: LD_INT 1
64796: EQUAL
64797: IFFALSE 64814
// factory := IsInUnit ( factory ) ;
64799: LD_ADDR_VAR 0 1
64803: PUSH
64804: LD_VAR 0 1
64808: PPUSH
64809: CALL_OW 310
64813: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64814: LD_VAR 0 1
64818: PPUSH
64819: CALL_OW 266
64823: PUSH
64824: LD_INT 3
64826: NONEQUAL
64827: IFFALSE 64831
// exit ;
64829: GO 65066
// for i := 1 to Count ( factoryWaypoints ) do
64831: LD_ADDR_VAR 0 5
64835: PUSH
64836: DOUBLE
64837: LD_INT 1
64839: DEC
64840: ST_TO_ADDR
64841: LD_EXP 88
64845: PPUSH
64846: CALL 8663 0 1
64850: PUSH
64851: FOR_TO
64852: IFFALSE 65014
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
64854: LD_VAR 0 2
64858: PPUSH
64859: LD_VAR 0 3
64863: PPUSH
64864: CALL_OW 428
64868: PUSH
64869: LD_EXP 88
64873: PUSH
64874: LD_VAR 0 5
64878: ARRAY
64879: PUSH
64880: LD_INT 2
64882: ARRAY
64883: EQUAL
64884: IFFALSE 64916
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64886: LD_ADDR_EXP 88
64890: PUSH
64891: LD_EXP 88
64895: PPUSH
64896: LD_VAR 0 5
64900: PPUSH
64901: CALL_OW 3
64905: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64906: CALL 65071 0 0
// exit ;
64910: POP
64911: POP
64912: GO 65066
// end else
64914: GO 65012
// if factory = factoryWaypoints [ i ] [ 2 ] then
64916: LD_VAR 0 1
64920: PUSH
64921: LD_EXP 88
64925: PUSH
64926: LD_VAR 0 5
64930: ARRAY
64931: PUSH
64932: LD_INT 2
64934: ARRAY
64935: EQUAL
64936: IFFALSE 65012
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64938: LD_ADDR_EXP 88
64942: PUSH
64943: LD_EXP 88
64947: PPUSH
64948: LD_VAR 0 5
64952: PPUSH
64953: CALL_OW 3
64957: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64958: LD_ADDR_EXP 88
64962: PUSH
64963: LD_EXP 88
64967: PPUSH
64968: LD_VAR 0 1
64972: PPUSH
64973: CALL_OW 255
64977: PUSH
64978: LD_VAR 0 1
64982: PUSH
64983: LD_VAR 0 2
64987: PUSH
64988: LD_VAR 0 3
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: PPUSH
64999: CALL 44639 0 2
65003: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65004: CALL 65071 0 0
// exit ;
65008: POP
65009: POP
65010: GO 65066
// end ; end ;
65012: GO 64851
65014: POP
65015: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
65016: LD_ADDR_EXP 88
65020: PUSH
65021: LD_EXP 88
65025: PPUSH
65026: LD_VAR 0 1
65030: PPUSH
65031: CALL_OW 255
65035: PUSH
65036: LD_VAR 0 1
65040: PUSH
65041: LD_VAR 0 2
65045: PUSH
65046: LD_VAR 0 3
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: PPUSH
65057: CALL 44639 0 2
65061: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65062: CALL 65071 0 0
// end ;
65066: LD_VAR 0 4
65070: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
65071: LD_INT 0
65073: PPUSH
65074: PPUSH
65075: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65076: LD_STRING resetFactoryWaypoint();
65078: PPUSH
65079: CALL_OW 559
// if factoryWaypoints then
65083: LD_EXP 88
65087: IFFALSE 65208
// begin list := factoryWaypoints ;
65089: LD_ADDR_VAR 0 3
65093: PUSH
65094: LD_EXP 88
65098: ST_TO_ADDR
// for i := 1 to list do
65099: LD_ADDR_VAR 0 2
65103: PUSH
65104: DOUBLE
65105: LD_INT 1
65107: DEC
65108: ST_TO_ADDR
65109: LD_VAR 0 3
65113: PUSH
65114: FOR_TO
65115: IFFALSE 65206
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65117: LD_STRING setFactoryWaypointXY(
65119: PUSH
65120: LD_VAR 0 3
65124: PUSH
65125: LD_VAR 0 2
65129: ARRAY
65130: PUSH
65131: LD_INT 1
65133: ARRAY
65134: STR
65135: PUSH
65136: LD_STRING ,
65138: STR
65139: PUSH
65140: LD_VAR 0 3
65144: PUSH
65145: LD_VAR 0 2
65149: ARRAY
65150: PUSH
65151: LD_INT 2
65153: ARRAY
65154: STR
65155: PUSH
65156: LD_STRING ,
65158: STR
65159: PUSH
65160: LD_VAR 0 3
65164: PUSH
65165: LD_VAR 0 2
65169: ARRAY
65170: PUSH
65171: LD_INT 3
65173: ARRAY
65174: STR
65175: PUSH
65176: LD_STRING ,
65178: STR
65179: PUSH
65180: LD_VAR 0 3
65184: PUSH
65185: LD_VAR 0 2
65189: ARRAY
65190: PUSH
65191: LD_INT 4
65193: ARRAY
65194: STR
65195: PUSH
65196: LD_STRING )
65198: STR
65199: PPUSH
65200: CALL_OW 559
65204: GO 65114
65206: POP
65207: POP
// end ; end ;
65208: LD_VAR 0 1
65212: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
65213: LD_INT 0
65215: PPUSH
// if HexInfo ( x , y ) = warehouse then
65216: LD_VAR 0 2
65220: PPUSH
65221: LD_VAR 0 3
65225: PPUSH
65226: CALL_OW 428
65230: PUSH
65231: LD_VAR 0 1
65235: EQUAL
65236: IFFALSE 65263
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65238: LD_ADDR_EXP 90
65242: PUSH
65243: LD_EXP 90
65247: PPUSH
65248: LD_VAR 0 1
65252: PPUSH
65253: LD_INT 0
65255: PPUSH
65256: CALL_OW 1
65260: ST_TO_ADDR
65261: GO 65314
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65263: LD_ADDR_EXP 90
65267: PUSH
65268: LD_EXP 90
65272: PPUSH
65273: LD_VAR 0 1
65277: PPUSH
65278: LD_VAR 0 1
65282: PPUSH
65283: CALL_OW 255
65287: PUSH
65288: LD_VAR 0 1
65292: PUSH
65293: LD_VAR 0 2
65297: PUSH
65298: LD_VAR 0 3
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: PPUSH
65309: CALL_OW 1
65313: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
65314: CALL 65323 0 0
// end ;
65318: LD_VAR 0 4
65322: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
65323: LD_INT 0
65325: PPUSH
65326: PPUSH
65327: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65328: LD_STRING resetWarehouseGatheringPoints();
65330: PPUSH
65331: CALL_OW 559
// if warehouseGatheringPoints then
65335: LD_EXP 90
65339: IFFALSE 65465
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
65341: LD_ADDR_VAR 0 3
65345: PUSH
65346: LD_EXP 90
65350: PPUSH
65351: CALL 48573 0 1
65355: ST_TO_ADDR
// for i := 1 to list do
65356: LD_ADDR_VAR 0 2
65360: PUSH
65361: DOUBLE
65362: LD_INT 1
65364: DEC
65365: ST_TO_ADDR
65366: LD_VAR 0 3
65370: PUSH
65371: FOR_TO
65372: IFFALSE 65463
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
65374: LD_STRING setWarehouseGatheringPointXY(
65376: PUSH
65377: LD_VAR 0 3
65381: PUSH
65382: LD_VAR 0 2
65386: ARRAY
65387: PUSH
65388: LD_INT 1
65390: ARRAY
65391: STR
65392: PUSH
65393: LD_STRING ,
65395: STR
65396: PUSH
65397: LD_VAR 0 3
65401: PUSH
65402: LD_VAR 0 2
65406: ARRAY
65407: PUSH
65408: LD_INT 2
65410: ARRAY
65411: STR
65412: PUSH
65413: LD_STRING ,
65415: STR
65416: PUSH
65417: LD_VAR 0 3
65421: PUSH
65422: LD_VAR 0 2
65426: ARRAY
65427: PUSH
65428: LD_INT 3
65430: ARRAY
65431: STR
65432: PUSH
65433: LD_STRING ,
65435: STR
65436: PUSH
65437: LD_VAR 0 3
65441: PUSH
65442: LD_VAR 0 2
65446: ARRAY
65447: PUSH
65448: LD_INT 4
65450: ARRAY
65451: STR
65452: PUSH
65453: LD_STRING )
65455: STR
65456: PPUSH
65457: CALL_OW 559
65461: GO 65371
65463: POP
65464: POP
// end ; end ;
65465: LD_VAR 0 1
65469: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65470: LD_EXP 90
65474: IFFALSE 66169
65476: GO 65478
65478: DISABLE
65479: LD_INT 0
65481: PPUSH
65482: PPUSH
65483: PPUSH
65484: PPUSH
65485: PPUSH
65486: PPUSH
65487: PPUSH
65488: PPUSH
65489: PPUSH
// begin enable ;
65490: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
65491: LD_ADDR_VAR 0 3
65495: PUSH
65496: LD_EXP 90
65500: PPUSH
65501: CALL 48573 0 1
65505: ST_TO_ADDR
// if not list then
65506: LD_VAR 0 3
65510: NOT
65511: IFFALSE 65515
// exit ;
65513: GO 66169
// for i := 1 to list do
65515: LD_ADDR_VAR 0 1
65519: PUSH
65520: DOUBLE
65521: LD_INT 1
65523: DEC
65524: ST_TO_ADDR
65525: LD_VAR 0 3
65529: PUSH
65530: FOR_TO
65531: IFFALSE 66167
// begin depot := list [ i ] [ 2 ] ;
65533: LD_ADDR_VAR 0 8
65537: PUSH
65538: LD_VAR 0 3
65542: PUSH
65543: LD_VAR 0 1
65547: ARRAY
65548: PUSH
65549: LD_INT 2
65551: ARRAY
65552: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65553: LD_ADDR_VAR 0 5
65557: PUSH
65558: LD_VAR 0 3
65562: PUSH
65563: LD_VAR 0 1
65567: ARRAY
65568: PUSH
65569: LD_INT 1
65571: ARRAY
65572: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65573: LD_VAR 0 8
65577: PPUSH
65578: CALL_OW 301
65582: IFTRUE 65601
65584: PUSH
65585: LD_VAR 0 5
65589: PUSH
65590: LD_VAR 0 8
65594: PPUSH
65595: CALL_OW 255
65599: NONEQUAL
65600: OR
65601: IFFALSE 65630
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65603: LD_ADDR_EXP 90
65607: PUSH
65608: LD_EXP 90
65612: PPUSH
65613: LD_VAR 0 8
65617: PPUSH
65618: LD_INT 0
65620: PPUSH
65621: CALL_OW 1
65625: ST_TO_ADDR
// exit ;
65626: POP
65627: POP
65628: GO 66169
// end ; x := list [ i ] [ 3 ] ;
65630: LD_ADDR_VAR 0 6
65634: PUSH
65635: LD_VAR 0 3
65639: PUSH
65640: LD_VAR 0 1
65644: ARRAY
65645: PUSH
65646: LD_INT 3
65648: ARRAY
65649: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65650: LD_ADDR_VAR 0 7
65654: PUSH
65655: LD_VAR 0 3
65659: PUSH
65660: LD_VAR 0 1
65664: ARRAY
65665: PUSH
65666: LD_INT 4
65668: ARRAY
65669: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
65670: LD_ADDR_VAR 0 9
65674: PUSH
65675: LD_VAR 0 6
65679: PPUSH
65680: LD_VAR 0 7
65684: PPUSH
65685: LD_INT 16
65687: PPUSH
65688: CALL 47147 0 3
65692: ST_TO_ADDR
// if not cratesNearbyPoint then
65693: LD_VAR 0 9
65697: NOT
65698: IFFALSE 65704
// exit ;
65700: POP
65701: POP
65702: GO 66169
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65704: LD_ADDR_VAR 0 4
65708: PUSH
65709: LD_INT 22
65711: PUSH
65712: LD_VAR 0 5
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 3
65723: PUSH
65724: LD_INT 60
65726: PUSH
65727: EMPTY
65728: LIST
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 91
65736: PUSH
65737: LD_VAR 0 8
65741: PUSH
65742: LD_INT 6
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: LD_INT 25
65755: PUSH
65756: LD_INT 2
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 25
65765: PUSH
65766: LD_INT 16
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: LIST
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: PPUSH
65784: CALL_OW 69
65788: PUSH
65789: LD_VAR 0 8
65793: PPUSH
65794: CALL_OW 313
65798: PPUSH
65799: LD_INT 3
65801: PUSH
65802: LD_INT 60
65804: PUSH
65805: EMPTY
65806: LIST
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: LD_INT 25
65817: PUSH
65818: LD_INT 2
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 25
65827: PUSH
65828: LD_INT 16
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: LIST
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PPUSH
65844: CALL_OW 72
65848: UNION
65849: ST_TO_ADDR
// if tmp then
65850: LD_VAR 0 4
65854: IFFALSE 65934
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65856: LD_ADDR_VAR 0 4
65860: PUSH
65861: LD_VAR 0 4
65865: PPUSH
65866: LD_INT 3
65868: PPUSH
65869: CALL 44954 0 2
65873: ST_TO_ADDR
// for j in tmp do
65874: LD_ADDR_VAR 0 2
65878: PUSH
65879: LD_VAR 0 4
65883: PUSH
65884: FOR_IN
65885: IFFALSE 65928
// begin if IsInUnit ( j ) then
65887: LD_VAR 0 2
65891: PPUSH
65892: CALL_OW 310
65896: IFFALSE 65907
// ComExit ( j ) ;
65898: LD_VAR 0 2
65902: PPUSH
65903: CALL 45037 0 1
// AddComCollect ( j , x , y ) ;
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 6
65916: PPUSH
65917: LD_VAR 0 7
65921: PPUSH
65922: CALL_OW 177
// end ;
65926: GO 65884
65928: POP
65929: POP
// exit ;
65930: POP
65931: POP
65932: GO 66169
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65934: LD_ADDR_VAR 0 4
65938: PUSH
65939: LD_INT 22
65941: PUSH
65942: LD_VAR 0 5
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: PUSH
65951: LD_INT 91
65953: PUSH
65954: LD_VAR 0 8
65958: PUSH
65959: LD_INT 8
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: PUSH
65967: LD_INT 2
65969: PUSH
65970: LD_INT 34
65972: PUSH
65973: LD_INT 12
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 34
65982: PUSH
65983: LD_INT 51
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 34
65992: PUSH
65993: LD_INT 32
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 34
66002: PUSH
66003: LD_INT 89
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: LIST
66014: LIST
66015: LIST
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: PPUSH
66022: CALL_OW 69
66026: ST_TO_ADDR
// if tmp then
66027: LD_VAR 0 4
66031: IFFALSE 66165
// begin for j in tmp do
66033: LD_ADDR_VAR 0 2
66037: PUSH
66038: LD_VAR 0 4
66042: PUSH
66043: FOR_IN
66044: IFFALSE 66163
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
66046: LD_VAR 0 2
66050: PPUSH
66051: CALL_OW 262
66055: PUSH
66056: LD_INT 3
66058: EQUAL
66059: IFTRUE 66076
66061: PUSH
66062: LD_VAR 0 2
66066: PPUSH
66067: CALL_OW 261
66071: PUSH
66072: LD_INT 20
66074: GREATER
66075: OR
66076: IFFALSE 66090
66078: PUSH
66079: LD_VAR 0 2
66083: PPUSH
66084: CALL_OW 314
66088: NOT
66089: AND
66090: IFFALSE 66120
66092: PUSH
66093: LD_VAR 0 2
66097: PPUSH
66098: CALL_OW 263
66102: PUSH
66103: LD_INT 1
66105: NONEQUAL
66106: IFTRUE 66119
66108: PUSH
66109: LD_VAR 0 2
66113: PPUSH
66114: CALL_OW 311
66118: OR
66119: AND
66120: IFFALSE 66161
// begin ComCollect ( j , x , y ) ;
66122: LD_VAR 0 2
66126: PPUSH
66127: LD_VAR 0 6
66131: PPUSH
66132: LD_VAR 0 7
66136: PPUSH
66137: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
66141: LD_VAR 0 2
66145: PPUSH
66146: LD_VAR 0 8
66150: PPUSH
66151: CALL_OW 172
// exit ;
66155: POP
66156: POP
66157: POP
66158: POP
66159: GO 66169
// end ;
66161: GO 66043
66163: POP
66164: POP
// end ; end ;
66165: GO 65530
66167: POP
66168: POP
// end ; end_of_file
66169: PPOPN 9
66171: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66172: LD_VAR 0 1
66176: PUSH
66177: LD_INT 200
66179: DOUBLE
66180: GREATEREQUAL
66181: IFFALSE 66189
66183: LD_INT 299
66185: DOUBLE
66186: LESSEQUAL
66187: IFTRUE 66191
66189: GO 66223
66191: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66192: LD_VAR 0 1
66196: PPUSH
66197: LD_VAR 0 2
66201: PPUSH
66202: LD_VAR 0 3
66206: PPUSH
66207: LD_VAR 0 4
66211: PPUSH
66212: LD_VAR 0 5
66216: PPUSH
66217: CALL 67085 0 5
66221: GO 66300
66223: LD_INT 300
66225: DOUBLE
66226: GREATEREQUAL
66227: IFFALSE 66235
66229: LD_INT 399
66231: DOUBLE
66232: LESSEQUAL
66233: IFTRUE 66237
66235: GO 66299
66237: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66238: LD_VAR 0 1
66242: PPUSH
66243: LD_VAR 0 2
66247: PPUSH
66248: LD_VAR 0 3
66252: PPUSH
66253: LD_VAR 0 4
66257: PPUSH
66258: LD_VAR 0 5
66262: PPUSH
66263: LD_VAR 0 6
66267: PPUSH
66268: LD_VAR 0 7
66272: PPUSH
66273: LD_VAR 0 8
66277: PPUSH
66278: LD_VAR 0 9
66282: PPUSH
66283: LD_VAR 0 10
66287: PPUSH
66288: LD_VAR 0 11
66292: PPUSH
66293: CALL 62725 0 11
66297: GO 66300
66299: POP
// end ;
66300: PPOPN 11
66302: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66303: LD_VAR 0 1
66307: PPUSH
66308: LD_VAR 0 2
66312: PPUSH
66313: LD_VAR 0 3
66317: PPUSH
66318: LD_VAR 0 4
66322: PPUSH
66323: LD_VAR 0 5
66327: PPUSH
66328: CALL 66385 0 5
// end ; end_of_file
66332: PPOPN 5
66334: END
// export function SOS_UnitDestroyed ( un ) ; begin
66335: LD_INT 0
66337: PPUSH
// ComRadiation ( un ) ;
66338: LD_VAR 0 1
66342: PPUSH
66343: CALL 67505 0 1
// end ;
66347: LD_VAR 0 2
66351: RET
// export function SOS_UnitKamikazed ( un ) ; begin
66352: LD_INT 0
66354: PPUSH
// ComRadiation ( un ) ;
66355: LD_VAR 0 1
66359: PPUSH
66360: CALL 67505 0 1
// end ;
66364: LD_VAR 0 2
66368: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
66369: LD_INT 0
66371: PPUSH
// end ;
66372: LD_VAR 0 4
66376: RET
// export function SOS_Command ( cmd ) ; begin
66377: LD_INT 0
66379: PPUSH
// end ;
66380: LD_VAR 0 2
66384: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
66385: LD_INT 0
66387: PPUSH
// end ;
66388: LD_VAR 0 6
66392: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
66393: LD_INT 0
66395: PPUSH
66396: PPUSH
66397: PPUSH
66398: PPUSH
66399: PPUSH
// if not vehicle or not factory then
66400: LD_VAR 0 1
66404: NOT
66405: IFTRUE 66414
66407: PUSH
66408: LD_VAR 0 2
66412: NOT
66413: OR
66414: IFFALSE 66418
// exit ;
66416: GO 67080
// weapon := GetWeapon ( vehicle ) ;
66418: LD_ADDR_VAR 0 7
66422: PUSH
66423: LD_VAR 0 1
66427: PPUSH
66428: CALL_OW 264
66432: ST_TO_ADDR
// if weapon = ar_miner then
66433: LD_VAR 0 7
66437: PUSH
66438: LD_INT 81
66440: EQUAL
66441: IFFALSE 66498
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
66443: LD_ADDR_EXP 99
66447: PUSH
66448: LD_EXP 99
66452: PPUSH
66453: LD_EXP 99
66457: PUSH
66458: LD_INT 1
66460: PLUS
66461: PPUSH
66462: LD_VAR 0 1
66466: PPUSH
66467: CALL_OW 1
66471: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66472: LD_ADDR_EXP 100
66476: PUSH
66477: LD_EXP 100
66481: PPUSH
66482: LD_EXP 100
66486: PUSH
66487: LD_INT 1
66489: PLUS
66490: PPUSH
66491: EMPTY
66492: PPUSH
66493: CALL_OW 1
66497: ST_TO_ADDR
// end ; if not factoryWaypoints then
66498: LD_EXP 88
66502: NOT
66503: IFFALSE 66507
// exit ;
66505: GO 67080
// for i := 1 to Count ( factoryWaypoints ) do
66507: LD_ADDR_VAR 0 4
66511: PUSH
66512: DOUBLE
66513: LD_INT 1
66515: DEC
66516: ST_TO_ADDR
66517: LD_EXP 88
66521: PPUSH
66522: CALL 8663 0 1
66526: PUSH
66527: FOR_TO
66528: IFFALSE 67078
// if factoryWaypoints [ i ] [ 2 ] = factory then
66530: LD_EXP 88
66534: PUSH
66535: LD_VAR 0 4
66539: ARRAY
66540: PUSH
66541: LD_INT 2
66543: ARRAY
66544: PUSH
66545: LD_VAR 0 2
66549: EQUAL
66550: IFFALSE 67076
// begin if GetControl ( vehicle ) = control_manual then
66552: LD_VAR 0 1
66556: PPUSH
66557: CALL_OW 263
66561: PUSH
66562: LD_INT 1
66564: EQUAL
66565: IFFALSE 66929
// begin driver := IsDrivenBy ( vehicle ) ;
66567: LD_ADDR_VAR 0 5
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: CALL_OW 311
66581: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
66582: LD_VAR 0 5
66586: PUSH
66587: LD_EXP 89
66591: IN
66592: IFTRUE 66606
66594: PUSH
66595: LD_VAR 0 1
66599: PUSH
66600: LD_EXP 89
66604: IN
66605: OR
66606: IFFALSE 66612
// exit ;
66608: POP
66609: POP
66610: GO 67080
// if not HasTask ( driver ) then
66612: LD_VAR 0 5
66616: PPUSH
66617: CALL_OW 314
66621: NOT
66622: IFFALSE 66927
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
66624: LD_ADDR_EXP 89
66628: PUSH
66629: LD_EXP 89
66633: PPUSH
66634: LD_VAR 0 5
66638: PPUSH
66639: CALL 44639 0 2
66643: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
66644: LD_ADDR_EXP 89
66648: PUSH
66649: LD_EXP 89
66653: PPUSH
66654: LD_VAR 0 1
66658: PPUSH
66659: CALL 44639 0 2
66663: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
66664: LD_ADDR_VAR 0 6
66668: PUSH
66669: LD_EXP 88
66673: PUSH
66674: LD_VAR 0 4
66678: ARRAY
66679: PUSH
66680: LD_INT 3
66682: ARRAY
66683: PPUSH
66684: LD_EXP 88
66688: PUSH
66689: LD_VAR 0 4
66693: ARRAY
66694: PUSH
66695: LD_INT 4
66697: ARRAY
66698: PPUSH
66699: CALL_OW 428
66703: ST_TO_ADDR
// if hex then
66704: LD_VAR 0 6
66708: IFFALSE 66726
// ComMoveUnit ( driver , hex ) else
66710: LD_VAR 0 5
66714: PPUSH
66715: LD_VAR 0 6
66719: PPUSH
66720: CALL_OW 112
66724: GO 66810
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
66726: LD_VAR 0 1
66730: PPUSH
66731: LD_EXP 88
66735: PUSH
66736: LD_VAR 0 4
66740: ARRAY
66741: PUSH
66742: LD_INT 3
66744: ARRAY
66745: PPUSH
66746: LD_EXP 88
66750: PUSH
66751: LD_VAR 0 4
66755: ARRAY
66756: PUSH
66757: LD_INT 4
66759: ARRAY
66760: PPUSH
66761: CALL_OW 297
66765: PUSH
66766: LD_INT 0
66768: GREATER
66769: IFFALSE 66810
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
66771: LD_VAR 0 5
66775: PPUSH
66776: LD_EXP 88
66780: PUSH
66781: LD_VAR 0 4
66785: ARRAY
66786: PUSH
66787: LD_INT 3
66789: ARRAY
66790: PPUSH
66791: LD_EXP 88
66795: PUSH
66796: LD_VAR 0 4
66800: ARRAY
66801: PUSH
66802: LD_INT 4
66804: ARRAY
66805: PPUSH
66806: CALL_OW 111
// AddComExitVehicle ( driver ) ;
66810: LD_VAR 0 5
66814: PPUSH
66815: CALL_OW 181
// if Multiplayer then
66819: LD_OWVAR 4
66823: IFFALSE 66872
// begin repeat wait ( 10 ) ;
66825: LD_INT 10
66827: PPUSH
66828: CALL_OW 67
// until not IsInUnit ( driver ) ;
66832: LD_VAR 0 5
66836: PPUSH
66837: CALL_OW 310
66841: NOT
66842: IFFALSE 66825
// if not HasTask ( driver ) then
66844: LD_VAR 0 5
66848: PPUSH
66849: CALL_OW 314
66853: NOT
66854: IFFALSE 66870
// ComEnterUnit ( driver , factory ) ;
66856: LD_VAR 0 5
66860: PPUSH
66861: LD_VAR 0 2
66865: PPUSH
66866: CALL_OW 120
// end else
66870: GO 66886
// AddComEnterUnit ( driver , factory ) ;
66872: LD_VAR 0 5
66876: PPUSH
66877: LD_VAR 0 2
66881: PPUSH
66882: CALL_OW 180
// wait ( 0 0$1 ) ;
66886: LD_INT 35
66888: PPUSH
66889: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
66893: LD_ADDR_EXP 89
66897: PUSH
66898: LD_EXP 89
66902: PUSH
66903: LD_VAR 0 5
66907: DIFF
66908: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
66909: LD_ADDR_EXP 89
66913: PUSH
66914: LD_EXP 89
66918: PUSH
66919: LD_VAR 0 1
66923: DIFF
66924: ST_TO_ADDR
// break ;
66925: GO 67078
// end ; end else
66927: GO 67076
// if GetControl ( vehicle ) = control_remote then
66929: LD_VAR 0 1
66933: PPUSH
66934: CALL_OW 263
66938: PUSH
66939: LD_INT 2
66941: EQUAL
66942: IFFALSE 67028
// begin wait ( 0 0$2 ) ;
66944: LD_INT 70
66946: PPUSH
66947: CALL_OW 67
// repeat wait ( 10 ) ;
66951: LD_INT 10
66953: PPUSH
66954: CALL_OW 67
// Connect ( vehicle ) ;
66958: LD_VAR 0 1
66962: PPUSH
66963: CALL 14941 0 1
// until IsControledBy ( vehicle ) ;
66967: LD_VAR 0 1
66971: PPUSH
66972: CALL_OW 312
66976: IFFALSE 66951
// wait ( 10 ) ;
66978: LD_INT 10
66980: PPUSH
66981: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
66985: LD_VAR 0 1
66989: PPUSH
66990: LD_EXP 88
66994: PUSH
66995: LD_VAR 0 4
66999: ARRAY
67000: PUSH
67001: LD_INT 3
67003: ARRAY
67004: PPUSH
67005: LD_EXP 88
67009: PUSH
67010: LD_VAR 0 4
67014: ARRAY
67015: PUSH
67016: LD_INT 4
67018: ARRAY
67019: PPUSH
67020: CALL_OW 111
// break ;
67024: GO 67078
// end else
67026: GO 67076
// begin wait ( 0 0$3 ) ;
67028: LD_INT 105
67030: PPUSH
67031: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
67035: LD_VAR 0 1
67039: PPUSH
67040: LD_EXP 88
67044: PUSH
67045: LD_VAR 0 4
67049: ARRAY
67050: PUSH
67051: LD_INT 3
67053: ARRAY
67054: PPUSH
67055: LD_EXP 88
67059: PUSH
67060: LD_VAR 0 4
67064: ARRAY
67065: PUSH
67066: LD_INT 4
67068: ARRAY
67069: PPUSH
67070: CALL_OW 111
// break ;
67074: GO 67078
// end ; end ;
67076: GO 66527
67078: POP
67079: POP
// end ;
67080: LD_VAR 0 3
67084: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
67085: LD_INT 0
67087: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
67088: LD_VAR 0 1
67092: PUSH
67093: LD_INT 250
67095: EQUAL
67096: IFFALSE 67113
67098: PUSH
67099: LD_VAR 0 2
67103: PPUSH
67104: CALL_OW 264
67108: PUSH
67109: LD_INT 81
67111: EQUAL
67112: AND
67113: IFFALSE 67134
// MinerPlaceMine ( unit , x , y ) ;
67115: LD_VAR 0 2
67119: PPUSH
67120: LD_VAR 0 4
67124: PPUSH
67125: LD_VAR 0 5
67129: PPUSH
67130: CALL 70480 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
67134: LD_VAR 0 1
67138: PUSH
67139: LD_INT 251
67141: EQUAL
67142: IFFALSE 67159
67144: PUSH
67145: LD_VAR 0 2
67149: PPUSH
67150: CALL_OW 264
67154: PUSH
67155: LD_INT 81
67157: EQUAL
67158: AND
67159: IFFALSE 67180
// MinerDetonateMine ( unit , x , y ) ;
67161: LD_VAR 0 2
67165: PPUSH
67166: LD_VAR 0 4
67170: PPUSH
67171: LD_VAR 0 5
67175: PPUSH
67176: CALL 70887 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
67180: LD_VAR 0 1
67184: PUSH
67185: LD_INT 252
67187: EQUAL
67188: IFFALSE 67205
67190: PUSH
67191: LD_VAR 0 2
67195: PPUSH
67196: CALL_OW 264
67200: PUSH
67201: LD_INT 81
67203: EQUAL
67204: AND
67205: IFFALSE 67226
// MinerCreateMinefield ( unit , x , y ) ;
67207: LD_VAR 0 2
67211: PPUSH
67212: LD_VAR 0 4
67216: PPUSH
67217: LD_VAR 0 5
67221: PPUSH
67222: CALL 71119 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
67226: LD_VAR 0 1
67230: PUSH
67231: LD_INT 253
67233: EQUAL
67234: IFFALSE 67251
67236: PUSH
67237: LD_VAR 0 2
67241: PPUSH
67242: CALL_OW 257
67246: PUSH
67247: LD_INT 5
67249: EQUAL
67250: AND
67251: IFFALSE 67272
// ComBinocular ( unit , x , y ) ;
67253: LD_VAR 0 2
67257: PPUSH
67258: LD_VAR 0 4
67262: PPUSH
67263: LD_VAR 0 5
67267: PPUSH
67268: CALL 71494 0 3
// if selectedUnit then
67272: LD_VAR 0 3
67276: IFFALSE 67336
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
67278: LD_VAR 0 1
67282: PUSH
67283: LD_INT 254
67285: EQUAL
67286: IFFALSE 67303
67288: PUSH
67289: LD_VAR 0 2
67293: PPUSH
67294: CALL_OW 264
67298: PUSH
67299: LD_INT 99
67301: EQUAL
67302: AND
67303: IFFALSE 67320
67305: PUSH
67306: LD_VAR 0 3
67310: PPUSH
67311: CALL_OW 263
67315: PUSH
67316: LD_INT 3
67318: EQUAL
67319: AND
67320: IFFALSE 67336
// HackDestroyVehicle ( unit , selectedUnit ) ;
67322: LD_VAR 0 2
67326: PPUSH
67327: LD_VAR 0 3
67331: PPUSH
67332: CALL 69670 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
67336: LD_VAR 0 1
67340: PUSH
67341: LD_INT 255
67343: EQUAL
67344: IFFALSE 67368
67346: PUSH
67347: LD_VAR 0 2
67351: PPUSH
67352: CALL_OW 264
67356: PUSH
67357: LD_INT 14
67359: PUSH
67360: LD_INT 53
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: IN
67367: AND
67368: IFFALSE 67386
67370: PUSH
67371: LD_VAR 0 4
67375: PPUSH
67376: LD_VAR 0 5
67380: PPUSH
67381: CALL_OW 488
67385: AND
67386: IFFALSE 67410
// CutTreeXYR ( unit , x , y , 12 ) ;
67388: LD_VAR 0 2
67392: PPUSH
67393: LD_VAR 0 4
67397: PPUSH
67398: LD_VAR 0 5
67402: PPUSH
67403: LD_INT 12
67405: PPUSH
67406: CALL 67601 0 4
// if cmd = 256 then
67410: LD_VAR 0 1
67414: PUSH
67415: LD_INT 256
67417: EQUAL
67418: IFFALSE 67439
// SetFactoryWaypoint ( unit , x , y ) ;
67420: LD_VAR 0 2
67424: PPUSH
67425: LD_VAR 0 4
67429: PPUSH
67430: LD_VAR 0 5
67434: PPUSH
67435: CALL 64717 0 3
// if cmd = 257 then
67439: LD_VAR 0 1
67443: PUSH
67444: LD_INT 257
67446: EQUAL
67447: IFFALSE 67468
// SetWarehouseGatheringPoint ( unit , x , y ) ;
67449: LD_VAR 0 2
67453: PPUSH
67454: LD_VAR 0 4
67458: PPUSH
67459: LD_VAR 0 5
67463: PPUSH
67464: CALL 65213 0 3
// if cmd = 258 then
67468: LD_VAR 0 1
67472: PUSH
67473: LD_INT 258
67475: EQUAL
67476: IFFALSE 67500
// BurnTreeXYR ( unit , x , y , 8 ) ;
67478: LD_VAR 0 2
67482: PPUSH
67483: LD_VAR 0 4
67487: PPUSH
67488: LD_VAR 0 5
67492: PPUSH
67493: LD_INT 8
67495: PPUSH
67496: CALL 68023 0 4
// end ;
67500: LD_VAR 0 6
67504: RET
// export function ComRadiation ( un ) ; var eff ; begin
67505: LD_INT 0
67507: PPUSH
67508: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
67509: LD_VAR 0 1
67513: PPUSH
67514: CALL_OW 264
67518: PUSH
67519: LD_INT 91
67521: NONEQUAL
67522: IFFALSE 67526
// exit ;
67524: GO 67596
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
67526: LD_INT 68
67528: PPUSH
67529: LD_VAR 0 1
67533: PPUSH
67534: CALL_OW 255
67538: PPUSH
67539: CALL_OW 321
67543: PUSH
67544: LD_INT 2
67546: EQUAL
67547: IFFALSE 67559
// eff := 50 else
67549: LD_ADDR_VAR 0 3
67553: PUSH
67554: LD_INT 50
67556: ST_TO_ADDR
67557: GO 67567
// eff := 25 ;
67559: LD_ADDR_VAR 0 3
67563: PUSH
67564: LD_INT 25
67566: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
67567: LD_VAR 0 1
67571: PPUSH
67572: CALL_OW 250
67576: PPUSH
67577: LD_VAR 0 1
67581: PPUSH
67582: CALL_OW 251
67586: PPUSH
67587: LD_VAR 0 3
67591: PPUSH
67592: CALL_OW 495
// end ;
67596: LD_VAR 0 2
67600: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
67601: LD_INT 0
67603: PPUSH
67604: PPUSH
67605: PPUSH
67606: PPUSH
67607: PPUSH
67608: PPUSH
67609: PPUSH
67610: PPUSH
67611: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
67612: LD_VAR 0 1
67616: PPUSH
67617: CALL_OW 302
67621: NOT
67622: IFTRUE 67641
67624: PUSH
67625: LD_VAR 0 2
67629: PPUSH
67630: LD_VAR 0 3
67634: PPUSH
67635: CALL_OW 488
67639: NOT
67640: OR
67641: IFTRUE 67650
67643: PUSH
67644: LD_VAR 0 4
67648: NOT
67649: OR
67650: IFFALSE 67654
// exit ;
67652: GO 68018
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
67654: LD_VAR 0 1
67658: PPUSH
67659: CALL_OW 437
67663: PPUSH
67664: CALL 8663 0 1
67668: PUSH
67669: LD_INT 10
67671: GREATER
67672: IFFALSE 67676
// exit ;
67674: GO 68018
// list := [ ] ;
67676: LD_ADDR_VAR 0 13
67680: PUSH
67681: EMPTY
67682: ST_TO_ADDR
// if x - r < 0 then
67683: LD_VAR 0 2
67687: PUSH
67688: LD_VAR 0 4
67692: MINUS
67693: PUSH
67694: LD_INT 0
67696: LESS
67697: IFFALSE 67709
// min_x := 0 else
67699: LD_ADDR_VAR 0 7
67703: PUSH
67704: LD_INT 0
67706: ST_TO_ADDR
67707: GO 67725
// min_x := x - r ;
67709: LD_ADDR_VAR 0 7
67713: PUSH
67714: LD_VAR 0 2
67718: PUSH
67719: LD_VAR 0 4
67723: MINUS
67724: ST_TO_ADDR
// if y - r < 0 then
67725: LD_VAR 0 3
67729: PUSH
67730: LD_VAR 0 4
67734: MINUS
67735: PUSH
67736: LD_INT 0
67738: LESS
67739: IFFALSE 67751
// min_y := 0 else
67741: LD_ADDR_VAR 0 8
67745: PUSH
67746: LD_INT 0
67748: ST_TO_ADDR
67749: GO 67767
// min_y := y - r ;
67751: LD_ADDR_VAR 0 8
67755: PUSH
67756: LD_VAR 0 3
67760: PUSH
67761: LD_VAR 0 4
67765: MINUS
67766: ST_TO_ADDR
// max_x := x + r ;
67767: LD_ADDR_VAR 0 9
67771: PUSH
67772: LD_VAR 0 2
67776: PUSH
67777: LD_VAR 0 4
67781: PLUS
67782: ST_TO_ADDR
// max_y := y + r ;
67783: LD_ADDR_VAR 0 10
67787: PUSH
67788: LD_VAR 0 3
67792: PUSH
67793: LD_VAR 0 4
67797: PLUS
67798: ST_TO_ADDR
// for _x = min_x to max_x do
67799: LD_ADDR_VAR 0 11
67803: PUSH
67804: DOUBLE
67805: LD_VAR 0 7
67809: DEC
67810: ST_TO_ADDR
67811: LD_VAR 0 9
67815: PUSH
67816: FOR_TO
67817: IFFALSE 67936
// for _y = min_y to max_y do
67819: LD_ADDR_VAR 0 12
67823: PUSH
67824: DOUBLE
67825: LD_VAR 0 8
67829: DEC
67830: ST_TO_ADDR
67831: LD_VAR 0 10
67835: PUSH
67836: FOR_TO
67837: IFFALSE 67932
// begin if not ValidHex ( _x , _y ) then
67839: LD_VAR 0 11
67843: PPUSH
67844: LD_VAR 0 12
67848: PPUSH
67849: CALL_OW 488
67853: NOT
67854: IFFALSE 67858
// continue ;
67856: GO 67836
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67858: LD_VAR 0 11
67862: PPUSH
67863: LD_VAR 0 12
67867: PPUSH
67868: CALL_OW 351
67872: IFFALSE 67890
67874: PUSH
67875: LD_VAR 0 11
67879: PPUSH
67880: LD_VAR 0 12
67884: PPUSH
67885: CALL_OW 554
67889: AND
67890: IFFALSE 67930
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67892: LD_ADDR_VAR 0 13
67896: PUSH
67897: LD_VAR 0 13
67901: PPUSH
67902: LD_VAR 0 13
67906: PUSH
67907: LD_INT 1
67909: PLUS
67910: PPUSH
67911: LD_VAR 0 11
67915: PUSH
67916: LD_VAR 0 12
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PPUSH
67925: CALL_OW 2
67929: ST_TO_ADDR
// end ;
67930: GO 67836
67932: POP
67933: POP
67934: GO 67816
67936: POP
67937: POP
// if not list then
67938: LD_VAR 0 13
67942: NOT
67943: IFFALSE 67947
// exit ;
67945: GO 68018
// for i in list do
67947: LD_ADDR_VAR 0 6
67951: PUSH
67952: LD_VAR 0 13
67956: PUSH
67957: FOR_IN
67958: IFFALSE 68016
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
67960: LD_VAR 0 1
67964: PPUSH
67965: LD_STRING M
67967: PUSH
67968: LD_VAR 0 6
67972: PUSH
67973: LD_INT 1
67975: ARRAY
67976: PUSH
67977: LD_VAR 0 6
67981: PUSH
67982: LD_INT 2
67984: ARRAY
67985: PUSH
67986: LD_INT 0
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 0
67994: PUSH
67995: LD_INT 0
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: PUSH
68007: EMPTY
68008: LIST
68009: PPUSH
68010: CALL_OW 447
68014: GO 67957
68016: POP
68017: POP
// end ;
68018: LD_VAR 0 5
68022: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
68023: LD_INT 0
68025: PPUSH
68026: PPUSH
68027: PPUSH
68028: PPUSH
68029: PPUSH
68030: PPUSH
68031: PPUSH
68032: PPUSH
68033: PPUSH
68034: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
68035: LD_VAR 0 1
68039: PPUSH
68040: CALL_OW 302
68044: NOT
68045: IFTRUE 68064
68047: PUSH
68048: LD_VAR 0 2
68052: PPUSH
68053: LD_VAR 0 3
68057: PPUSH
68058: CALL_OW 488
68062: NOT
68063: OR
68064: IFTRUE 68073
68066: PUSH
68067: LD_VAR 0 4
68071: NOT
68072: OR
68073: IFFALSE 68077
// exit ;
68075: GO 68616
// if Count ( GetTaskList ( flame ) ) > 10 then
68077: LD_VAR 0 1
68081: PPUSH
68082: CALL_OW 437
68086: PPUSH
68087: CALL 8663 0 1
68091: PUSH
68092: LD_INT 10
68094: GREATER
68095: IFFALSE 68099
// exit ;
68097: GO 68616
// list := [ ] ;
68099: LD_ADDR_VAR 0 13
68103: PUSH
68104: EMPTY
68105: ST_TO_ADDR
// if x - r < 0 then
68106: LD_VAR 0 2
68110: PUSH
68111: LD_VAR 0 4
68115: MINUS
68116: PUSH
68117: LD_INT 0
68119: LESS
68120: IFFALSE 68132
// min_x := 0 else
68122: LD_ADDR_VAR 0 7
68126: PUSH
68127: LD_INT 0
68129: ST_TO_ADDR
68130: GO 68148
// min_x := x - r ;
68132: LD_ADDR_VAR 0 7
68136: PUSH
68137: LD_VAR 0 2
68141: PUSH
68142: LD_VAR 0 4
68146: MINUS
68147: ST_TO_ADDR
// if y - r < 0 then
68148: LD_VAR 0 3
68152: PUSH
68153: LD_VAR 0 4
68157: MINUS
68158: PUSH
68159: LD_INT 0
68161: LESS
68162: IFFALSE 68174
// min_y := 0 else
68164: LD_ADDR_VAR 0 8
68168: PUSH
68169: LD_INT 0
68171: ST_TO_ADDR
68172: GO 68190
// min_y := y - r ;
68174: LD_ADDR_VAR 0 8
68178: PUSH
68179: LD_VAR 0 3
68183: PUSH
68184: LD_VAR 0 4
68188: MINUS
68189: ST_TO_ADDR
// max_x := x + r ;
68190: LD_ADDR_VAR 0 9
68194: PUSH
68195: LD_VAR 0 2
68199: PUSH
68200: LD_VAR 0 4
68204: PLUS
68205: ST_TO_ADDR
// max_y := y + r ;
68206: LD_ADDR_VAR 0 10
68210: PUSH
68211: LD_VAR 0 3
68215: PUSH
68216: LD_VAR 0 4
68220: PLUS
68221: ST_TO_ADDR
// for _x = min_x to max_x do
68222: LD_ADDR_VAR 0 11
68226: PUSH
68227: DOUBLE
68228: LD_VAR 0 7
68232: DEC
68233: ST_TO_ADDR
68234: LD_VAR 0 9
68238: PUSH
68239: FOR_TO
68240: IFFALSE 68359
// for _y = min_y to max_y do
68242: LD_ADDR_VAR 0 12
68246: PUSH
68247: DOUBLE
68248: LD_VAR 0 8
68252: DEC
68253: ST_TO_ADDR
68254: LD_VAR 0 10
68258: PUSH
68259: FOR_TO
68260: IFFALSE 68355
// begin if not ValidHex ( _x , _y ) then
68262: LD_VAR 0 11
68266: PPUSH
68267: LD_VAR 0 12
68271: PPUSH
68272: CALL_OW 488
68276: NOT
68277: IFFALSE 68281
// continue ;
68279: GO 68259
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
68281: LD_VAR 0 11
68285: PPUSH
68286: LD_VAR 0 12
68290: PPUSH
68291: CALL_OW 351
68295: IFFALSE 68313
68297: PUSH
68298: LD_VAR 0 11
68302: PPUSH
68303: LD_VAR 0 12
68307: PPUSH
68308: CALL_OW 554
68312: AND
68313: IFFALSE 68353
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
68315: LD_ADDR_VAR 0 13
68319: PUSH
68320: LD_VAR 0 13
68324: PPUSH
68325: LD_VAR 0 13
68329: PUSH
68330: LD_INT 1
68332: PLUS
68333: PPUSH
68334: LD_VAR 0 11
68338: PUSH
68339: LD_VAR 0 12
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PPUSH
68348: CALL_OW 2
68352: ST_TO_ADDR
// end ;
68353: GO 68259
68355: POP
68356: POP
68357: GO 68239
68359: POP
68360: POP
// if not list then
68361: LD_VAR 0 13
68365: NOT
68366: IFFALSE 68370
// exit ;
68368: GO 68616
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
68370: LD_ADDR_VAR 0 13
68374: PUSH
68375: LD_VAR 0 1
68379: PPUSH
68380: LD_VAR 0 13
68384: PPUSH
68385: LD_INT 1
68387: PPUSH
68388: LD_INT 1
68390: PPUSH
68391: CALL 12069 0 4
68395: ST_TO_ADDR
// ComStop ( flame ) ;
68396: LD_VAR 0 1
68400: PPUSH
68401: CALL_OW 141
// for i in list do
68405: LD_ADDR_VAR 0 6
68409: PUSH
68410: LD_VAR 0 13
68414: PUSH
68415: FOR_IN
68416: IFFALSE 68447
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
68418: LD_VAR 0 1
68422: PPUSH
68423: LD_VAR 0 6
68427: PUSH
68428: LD_INT 1
68430: ARRAY
68431: PPUSH
68432: LD_VAR 0 6
68436: PUSH
68437: LD_INT 2
68439: ARRAY
68440: PPUSH
68441: CALL_OW 176
68445: GO 68415
68447: POP
68448: POP
// repeat wait ( 0 0$1 ) ;
68449: LD_INT 35
68451: PPUSH
68452: CALL_OW 67
// task := GetTaskList ( flame ) ;
68456: LD_ADDR_VAR 0 14
68460: PUSH
68461: LD_VAR 0 1
68465: PPUSH
68466: CALL_OW 437
68470: ST_TO_ADDR
// if not task then
68471: LD_VAR 0 14
68475: NOT
68476: IFFALSE 68480
// exit ;
68478: GO 68616
// if task [ 1 ] [ 1 ] <> | then
68480: LD_VAR 0 14
68484: PUSH
68485: LD_INT 1
68487: ARRAY
68488: PUSH
68489: LD_INT 1
68491: ARRAY
68492: PUSH
68493: LD_STRING |
68495: NONEQUAL
68496: IFFALSE 68500
// exit ;
68498: GO 68616
// _x := task [ 1 ] [ 2 ] ;
68500: LD_ADDR_VAR 0 11
68504: PUSH
68505: LD_VAR 0 14
68509: PUSH
68510: LD_INT 1
68512: ARRAY
68513: PUSH
68514: LD_INT 2
68516: ARRAY
68517: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
68518: LD_ADDR_VAR 0 12
68522: PUSH
68523: LD_VAR 0 14
68527: PUSH
68528: LD_INT 1
68530: ARRAY
68531: PUSH
68532: LD_INT 3
68534: ARRAY
68535: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
68536: LD_VAR 0 11
68540: PPUSH
68541: LD_VAR 0 12
68545: PPUSH
68546: CALL_OW 351
68550: NOT
68551: IFTRUE 68570
68553: PUSH
68554: LD_VAR 0 11
68558: PPUSH
68559: LD_VAR 0 12
68563: PPUSH
68564: CALL_OW 554
68568: NOT
68569: OR
68570: IFFALSE 68604
// begin task := Delete ( task , 1 ) ;
68572: LD_ADDR_VAR 0 14
68576: PUSH
68577: LD_VAR 0 14
68581: PPUSH
68582: LD_INT 1
68584: PPUSH
68585: CALL_OW 3
68589: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
68590: LD_VAR 0 1
68594: PPUSH
68595: LD_VAR 0 14
68599: PPUSH
68600: CALL_OW 446
// end ; until not HasTask ( flame ) ;
68604: LD_VAR 0 1
68608: PPUSH
68609: CALL_OW 314
68613: NOT
68614: IFFALSE 68449
// end ;
68616: LD_VAR 0 5
68620: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
68621: LD_EXP 92
68625: NOT
68626: IFFALSE 68676
68628: GO 68630
68630: DISABLE
// begin initHack := true ;
68631: LD_ADDR_EXP 92
68635: PUSH
68636: LD_INT 1
68638: ST_TO_ADDR
// hackTanks := [ ] ;
68639: LD_ADDR_EXP 93
68643: PUSH
68644: EMPTY
68645: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
68646: LD_ADDR_EXP 94
68650: PUSH
68651: EMPTY
68652: ST_TO_ADDR
// hackLimit := 3 ;
68653: LD_ADDR_EXP 95
68657: PUSH
68658: LD_INT 3
68660: ST_TO_ADDR
// hackDist := 12 ;
68661: LD_ADDR_EXP 96
68665: PUSH
68666: LD_INT 12
68668: ST_TO_ADDR
// hackCounter := [ ] ;
68669: LD_ADDR_EXP 97
68673: PUSH
68674: EMPTY
68675: ST_TO_ADDR
// end ;
68676: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
68677: LD_EXP 92
68681: IFFALSE 68699
68683: PUSH
68684: LD_INT 34
68686: PUSH
68687: LD_INT 99
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PPUSH
68694: CALL_OW 69
68698: AND
68699: IFFALSE 68952
68701: GO 68703
68703: DISABLE
68704: LD_INT 0
68706: PPUSH
68707: PPUSH
// begin enable ;
68708: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
68709: LD_ADDR_VAR 0 1
68713: PUSH
68714: LD_INT 34
68716: PUSH
68717: LD_INT 99
68719: PUSH
68720: EMPTY
68721: LIST
68722: LIST
68723: PPUSH
68724: CALL_OW 69
68728: PUSH
68729: FOR_IN
68730: IFFALSE 68950
// begin if not i in hackTanks then
68732: LD_VAR 0 1
68736: PUSH
68737: LD_EXP 93
68741: IN
68742: NOT
68743: IFFALSE 68826
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
68745: LD_ADDR_EXP 93
68749: PUSH
68750: LD_EXP 93
68754: PPUSH
68755: LD_EXP 93
68759: PUSH
68760: LD_INT 1
68762: PLUS
68763: PPUSH
68764: LD_VAR 0 1
68768: PPUSH
68769: CALL_OW 1
68773: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
68774: LD_ADDR_EXP 94
68778: PUSH
68779: LD_EXP 94
68783: PPUSH
68784: LD_EXP 94
68788: PUSH
68789: LD_INT 1
68791: PLUS
68792: PPUSH
68793: EMPTY
68794: PPUSH
68795: CALL_OW 1
68799: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
68800: LD_ADDR_EXP 97
68804: PUSH
68805: LD_EXP 97
68809: PPUSH
68810: LD_EXP 97
68814: PUSH
68815: LD_INT 1
68817: PLUS
68818: PPUSH
68819: EMPTY
68820: PPUSH
68821: CALL_OW 1
68825: ST_TO_ADDR
// end ; if not IsOk ( i ) then
68826: LD_VAR 0 1
68830: PPUSH
68831: CALL_OW 302
68835: NOT
68836: IFFALSE 68849
// begin HackUnlinkAll ( i ) ;
68838: LD_VAR 0 1
68842: PPUSH
68843: CALL 68955 0 1
// continue ;
68847: GO 68729
// end ; HackCheckCapturedStatus ( i ) ;
68849: LD_VAR 0 1
68853: PPUSH
68854: CALL 69400 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
68858: LD_ADDR_VAR 0 2
68862: PUSH
68863: LD_INT 81
68865: PUSH
68866: LD_VAR 0 1
68870: PPUSH
68871: CALL_OW 255
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 33
68882: PUSH
68883: LD_INT 3
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 91
68892: PUSH
68893: LD_VAR 0 1
68897: PUSH
68898: LD_EXP 96
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 50
68910: PUSH
68911: EMPTY
68912: LIST
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: PPUSH
68920: CALL_OW 69
68924: ST_TO_ADDR
// if not tmp then
68925: LD_VAR 0 2
68929: NOT
68930: IFFALSE 68934
// continue ;
68932: GO 68729
// HackLink ( i , tmp ) ;
68934: LD_VAR 0 1
68938: PPUSH
68939: LD_VAR 0 2
68943: PPUSH
68944: CALL 69091 0 2
// end ;
68948: GO 68729
68950: POP
68951: POP
// end ;
68952: PPOPN 2
68954: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
68955: LD_INT 0
68957: PPUSH
68958: PPUSH
68959: PPUSH
// if not hack in hackTanks then
68960: LD_VAR 0 1
68964: PUSH
68965: LD_EXP 93
68969: IN
68970: NOT
68971: IFFALSE 68975
// exit ;
68973: GO 69086
// index := GetElementIndex ( hackTanks , hack ) ;
68975: LD_ADDR_VAR 0 4
68979: PUSH
68980: LD_EXP 93
68984: PPUSH
68985: LD_VAR 0 1
68989: PPUSH
68990: CALL 11364 0 2
68994: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
68995: LD_EXP 94
68999: PUSH
69000: LD_VAR 0 4
69004: ARRAY
69005: IFFALSE 69086
// begin for i in hackTanksCaptured [ index ] do
69007: LD_ADDR_VAR 0 3
69011: PUSH
69012: LD_EXP 94
69016: PUSH
69017: LD_VAR 0 4
69021: ARRAY
69022: PUSH
69023: FOR_IN
69024: IFFALSE 69050
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
69026: LD_VAR 0 3
69030: PUSH
69031: LD_INT 1
69033: ARRAY
69034: PPUSH
69035: LD_VAR 0 3
69039: PUSH
69040: LD_INT 2
69042: ARRAY
69043: PPUSH
69044: CALL_OW 235
69048: GO 69023
69050: POP
69051: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
69052: LD_ADDR_EXP 94
69056: PUSH
69057: LD_EXP 94
69061: PPUSH
69062: LD_VAR 0 4
69066: PPUSH
69067: EMPTY
69068: PPUSH
69069: CALL_OW 1
69073: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
69074: LD_VAR 0 1
69078: PPUSH
69079: LD_INT 0
69081: PPUSH
69082: CALL_OW 505
// end ; end ;
69086: LD_VAR 0 2
69090: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
69091: LD_INT 0
69093: PPUSH
69094: PPUSH
69095: PPUSH
// if not hack in hackTanks or not vehicles then
69096: LD_VAR 0 1
69100: PUSH
69101: LD_EXP 93
69105: IN
69106: NOT
69107: IFTRUE 69116
69109: PUSH
69110: LD_VAR 0 2
69114: NOT
69115: OR
69116: IFFALSE 69120
// exit ;
69118: GO 69395
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
69120: LD_ADDR_VAR 0 2
69124: PUSH
69125: LD_VAR 0 1
69129: PPUSH
69130: LD_VAR 0 2
69134: PPUSH
69135: LD_INT 1
69137: PPUSH
69138: LD_INT 1
69140: PPUSH
69141: CALL 12016 0 4
69145: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
69146: LD_ADDR_VAR 0 5
69150: PUSH
69151: LD_EXP 93
69155: PPUSH
69156: LD_VAR 0 1
69160: PPUSH
69161: CALL 11364 0 2
69165: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
69166: LD_EXP 94
69170: PUSH
69171: LD_VAR 0 5
69175: ARRAY
69176: PUSH
69177: LD_EXP 95
69181: LESS
69182: IFFALSE 69371
// begin for i := 1 to vehicles do
69184: LD_ADDR_VAR 0 4
69188: PUSH
69189: DOUBLE
69190: LD_INT 1
69192: DEC
69193: ST_TO_ADDR
69194: LD_VAR 0 2
69198: PUSH
69199: FOR_TO
69200: IFFALSE 69369
// begin if hackTanksCaptured [ index ] = hackLimit then
69202: LD_EXP 94
69206: PUSH
69207: LD_VAR 0 5
69211: ARRAY
69212: PUSH
69213: LD_EXP 95
69217: EQUAL
69218: IFFALSE 69222
// break ;
69220: GO 69369
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
69222: LD_ADDR_EXP 97
69226: PUSH
69227: LD_EXP 97
69231: PPUSH
69232: LD_VAR 0 5
69236: PPUSH
69237: LD_EXP 97
69241: PUSH
69242: LD_VAR 0 5
69246: ARRAY
69247: PUSH
69248: LD_INT 1
69250: PLUS
69251: PPUSH
69252: CALL_OW 1
69256: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
69257: LD_ADDR_EXP 94
69261: PUSH
69262: LD_EXP 94
69266: PPUSH
69267: LD_VAR 0 5
69271: PUSH
69272: LD_EXP 94
69276: PUSH
69277: LD_VAR 0 5
69281: ARRAY
69282: PUSH
69283: LD_INT 1
69285: PLUS
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PPUSH
69291: LD_VAR 0 2
69295: PUSH
69296: LD_VAR 0 4
69300: ARRAY
69301: PUSH
69302: LD_VAR 0 2
69306: PUSH
69307: LD_VAR 0 4
69311: ARRAY
69312: PPUSH
69313: CALL_OW 255
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PPUSH
69322: CALL 11581 0 3
69326: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
69327: LD_VAR 0 2
69331: PUSH
69332: LD_VAR 0 4
69336: ARRAY
69337: PPUSH
69338: LD_VAR 0 1
69342: PPUSH
69343: CALL_OW 255
69347: PPUSH
69348: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
69352: LD_VAR 0 2
69356: PUSH
69357: LD_VAR 0 4
69361: ARRAY
69362: PPUSH
69363: CALL_OW 141
// end ;
69367: GO 69199
69369: POP
69370: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69371: LD_VAR 0 1
69375: PPUSH
69376: LD_EXP 94
69380: PUSH
69381: LD_VAR 0 5
69385: ARRAY
69386: PUSH
69387: LD_INT 0
69389: PLUS
69390: PPUSH
69391: CALL_OW 505
// end ;
69395: LD_VAR 0 3
69399: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
69400: LD_INT 0
69402: PPUSH
69403: PPUSH
69404: PPUSH
69405: PPUSH
// if not hack in hackTanks then
69406: LD_VAR 0 1
69410: PUSH
69411: LD_EXP 93
69415: IN
69416: NOT
69417: IFFALSE 69421
// exit ;
69419: GO 69665
// index := GetElementIndex ( hackTanks , hack ) ;
69421: LD_ADDR_VAR 0 4
69425: PUSH
69426: LD_EXP 93
69430: PPUSH
69431: LD_VAR 0 1
69435: PPUSH
69436: CALL 11364 0 2
69440: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
69441: LD_ADDR_VAR 0 3
69445: PUSH
69446: DOUBLE
69447: LD_EXP 94
69451: PUSH
69452: LD_VAR 0 4
69456: ARRAY
69457: INC
69458: ST_TO_ADDR
69459: LD_INT 1
69461: PUSH
69462: FOR_DOWNTO
69463: IFFALSE 69639
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
69465: LD_ADDR_VAR 0 5
69469: PUSH
69470: LD_EXP 94
69474: PUSH
69475: LD_VAR 0 4
69479: ARRAY
69480: PUSH
69481: LD_VAR 0 3
69485: ARRAY
69486: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
69487: LD_VAR 0 5
69491: PUSH
69492: LD_INT 1
69494: ARRAY
69495: PPUSH
69496: CALL_OW 302
69500: NOT
69501: IFTRUE 69529
69503: PUSH
69504: LD_VAR 0 5
69508: PUSH
69509: LD_INT 1
69511: ARRAY
69512: PPUSH
69513: CALL_OW 255
69517: PUSH
69518: LD_VAR 0 1
69522: PPUSH
69523: CALL_OW 255
69527: NONEQUAL
69528: OR
69529: IFFALSE 69637
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
69531: LD_VAR 0 5
69535: PUSH
69536: LD_INT 1
69538: ARRAY
69539: PPUSH
69540: CALL_OW 305
69544: IFFALSE 69572
69546: PUSH
69547: LD_VAR 0 5
69551: PUSH
69552: LD_INT 1
69554: ARRAY
69555: PPUSH
69556: CALL_OW 255
69560: PUSH
69561: LD_VAR 0 1
69565: PPUSH
69566: CALL_OW 255
69570: EQUAL
69571: AND
69572: IFFALSE 69596
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
69574: LD_VAR 0 5
69578: PUSH
69579: LD_INT 1
69581: ARRAY
69582: PPUSH
69583: LD_VAR 0 5
69587: PUSH
69588: LD_INT 2
69590: ARRAY
69591: PPUSH
69592: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
69596: LD_ADDR_EXP 94
69600: PUSH
69601: LD_EXP 94
69605: PPUSH
69606: LD_VAR 0 4
69610: PPUSH
69611: LD_EXP 94
69615: PUSH
69616: LD_VAR 0 4
69620: ARRAY
69621: PPUSH
69622: LD_VAR 0 3
69626: PPUSH
69627: CALL_OW 3
69631: PPUSH
69632: CALL_OW 1
69636: ST_TO_ADDR
// end ; end ;
69637: GO 69462
69639: POP
69640: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
69641: LD_VAR 0 1
69645: PPUSH
69646: LD_EXP 94
69650: PUSH
69651: LD_VAR 0 4
69655: ARRAY
69656: PUSH
69657: LD_INT 0
69659: PLUS
69660: PPUSH
69661: CALL_OW 505
// end ;
69665: LD_VAR 0 2
69669: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
69670: LD_INT 0
69672: PPUSH
69673: PPUSH
69674: PPUSH
69675: PPUSH
// if not hack in hackTanks then
69676: LD_VAR 0 1
69680: PUSH
69681: LD_EXP 93
69685: IN
69686: NOT
69687: IFFALSE 69691
// exit ;
69689: GO 69776
// index := GetElementIndex ( hackTanks , hack ) ;
69691: LD_ADDR_VAR 0 5
69695: PUSH
69696: LD_EXP 93
69700: PPUSH
69701: LD_VAR 0 1
69705: PPUSH
69706: CALL 11364 0 2
69710: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
69711: LD_ADDR_VAR 0 4
69715: PUSH
69716: DOUBLE
69717: LD_INT 1
69719: DEC
69720: ST_TO_ADDR
69721: LD_EXP 94
69725: PUSH
69726: LD_VAR 0 5
69730: ARRAY
69731: PUSH
69732: FOR_TO
69733: IFFALSE 69774
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
69735: LD_EXP 94
69739: PUSH
69740: LD_VAR 0 5
69744: ARRAY
69745: PUSH
69746: LD_VAR 0 4
69750: ARRAY
69751: PUSH
69752: LD_INT 1
69754: ARRAY
69755: PUSH
69756: LD_VAR 0 2
69760: EQUAL
69761: IFFALSE 69772
// KillUnit ( vehicle ) ;
69763: LD_VAR 0 2
69767: PPUSH
69768: CALL_OW 66
69772: GO 69732
69774: POP
69775: POP
// end ;
69776: LD_VAR 0 3
69780: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
69781: LD_EXP 98
69785: NOT
69786: IFFALSE 69919
69788: GO 69790
69790: DISABLE
69791: LD_INT 0
69793: PPUSH
// begin initMiner := true ;
69794: LD_ADDR_EXP 98
69798: PUSH
69799: LD_INT 1
69801: ST_TO_ADDR
// minersList := [ ] ;
69802: LD_ADDR_EXP 99
69806: PUSH
69807: EMPTY
69808: ST_TO_ADDR
// minerMinesList := [ ] ;
69809: LD_ADDR_EXP 100
69813: PUSH
69814: EMPTY
69815: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
69816: LD_ADDR_EXP 101
69820: PUSH
69821: LD_INT 10
69823: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
69824: LD_ADDR_VAR 0 1
69828: PUSH
69829: LD_INT 34
69831: PUSH
69832: LD_INT 81
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PPUSH
69839: CALL_OW 69
69843: PUSH
69844: FOR_IN
69845: IFFALSE 69917
// begin if not i in minersList then
69847: LD_VAR 0 1
69851: PUSH
69852: LD_EXP 99
69856: IN
69857: NOT
69858: IFFALSE 69915
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
69860: LD_ADDR_EXP 99
69864: PUSH
69865: LD_EXP 99
69869: PPUSH
69870: LD_EXP 99
69874: PUSH
69875: LD_INT 1
69877: PLUS
69878: PPUSH
69879: LD_VAR 0 1
69883: PPUSH
69884: CALL_OW 1
69888: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
69889: LD_ADDR_EXP 100
69893: PUSH
69894: LD_EXP 100
69898: PPUSH
69899: LD_EXP 100
69903: PUSH
69904: LD_INT 1
69906: PLUS
69907: PPUSH
69908: EMPTY
69909: PPUSH
69910: CALL_OW 1
69914: ST_TO_ADDR
// end end ;
69915: GO 69844
69917: POP
69918: POP
// end ;
69919: PPOPN 1
69921: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
69922: LD_EXP 98
69926: IFFALSE 69957
69928: PUSH
69929: LD_EXP 100
69933: PPUSH
69934: CALL 8663 0 1
69938: IFTRUE 69956
69940: PUSH
69941: LD_INT 34
69943: PUSH
69944: LD_INT 81
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PPUSH
69951: CALL_OW 69
69955: OR
69956: AND
69957: IFFALSE 70477
69959: GO 69961
69961: DISABLE
69962: LD_INT 0
69964: PPUSH
69965: PPUSH
69966: PPUSH
69967: PPUSH
// begin enable ;
69968: ENABLE
// for i := minerMinesList downto 1 do
69969: LD_ADDR_VAR 0 1
69973: PUSH
69974: DOUBLE
69975: LD_EXP 100
69979: INC
69980: ST_TO_ADDR
69981: LD_INT 1
69983: PUSH
69984: FOR_DOWNTO
69985: IFFALSE 70475
// begin side := GetSide ( minersList [ i ] ) ;
69987: LD_ADDR_VAR 0 3
69991: PUSH
69992: LD_EXP 99
69996: PUSH
69997: LD_VAR 0 1
70001: ARRAY
70002: PPUSH
70003: CALL_OW 255
70007: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
70008: LD_EXP 99
70012: PUSH
70013: LD_VAR 0 1
70017: ARRAY
70018: PPUSH
70019: CALL_OW 300
70023: IFFALSE 70044
70025: PUSH
70026: LD_VAR 0 3
70030: PUSH
70031: LD_OWVAR 2
70035: PUSH
70036: LD_INT 9
70038: PUSH
70039: EMPTY
70040: LIST
70041: LIST
70042: IN
70043: AND
70044: IFFALSE 70077
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
70046: LD_EXP 99
70050: PUSH
70051: LD_VAR 0 1
70055: ARRAY
70056: PPUSH
70057: LD_EXP 100
70061: PUSH
70062: LD_VAR 0 1
70066: ARRAY
70067: PPUSH
70068: CALL 8663 0 1
70072: PPUSH
70073: CALL_OW 505
// if not minerMinesList [ i ] then
70077: LD_EXP 100
70081: PUSH
70082: LD_VAR 0 1
70086: ARRAY
70087: NOT
70088: IFFALSE 70092
// continue ;
70090: GO 69984
// for j := minerMinesList [ i ] downto 1 do
70092: LD_ADDR_VAR 0 2
70096: PUSH
70097: DOUBLE
70098: LD_EXP 100
70102: PUSH
70103: LD_VAR 0 1
70107: ARRAY
70108: INC
70109: ST_TO_ADDR
70110: LD_INT 1
70112: PUSH
70113: FOR_DOWNTO
70114: IFFALSE 70471
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
70116: LD_EXP 99
70120: PUSH
70121: LD_VAR 0 1
70125: ARRAY
70126: PPUSH
70127: CALL_OW 301
70131: IFTRUE 70151
70133: PUSH
70134: LD_EXP 99
70138: PUSH
70139: LD_VAR 0 1
70143: ARRAY
70144: PPUSH
70145: CALL_OW 305
70149: NOT
70150: OR
70151: IFFALSE 70242
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70153: LD_EXP 100
70157: PUSH
70158: LD_VAR 0 1
70162: ARRAY
70163: PUSH
70164: LD_VAR 0 2
70168: ARRAY
70169: PUSH
70170: LD_INT 1
70172: ARRAY
70173: PPUSH
70174: LD_EXP 100
70178: PUSH
70179: LD_VAR 0 1
70183: ARRAY
70184: PUSH
70185: LD_VAR 0 2
70189: ARRAY
70190: PUSH
70191: LD_INT 2
70193: ARRAY
70194: PPUSH
70195: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70199: LD_ADDR_EXP 100
70203: PUSH
70204: LD_EXP 100
70208: PPUSH
70209: LD_VAR 0 1
70213: PPUSH
70214: LD_EXP 100
70218: PUSH
70219: LD_VAR 0 1
70223: ARRAY
70224: PPUSH
70225: LD_VAR 0 2
70229: PPUSH
70230: CALL_OW 3
70234: PPUSH
70235: CALL_OW 1
70239: ST_TO_ADDR
// continue ;
70240: GO 70113
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
70242: LD_ADDR_VAR 0 4
70246: PUSH
70247: LD_EXP 100
70251: PUSH
70252: LD_VAR 0 1
70256: ARRAY
70257: PUSH
70258: LD_VAR 0 2
70262: ARRAY
70263: PUSH
70264: LD_INT 1
70266: ARRAY
70267: PPUSH
70268: LD_EXP 100
70272: PUSH
70273: LD_VAR 0 1
70277: ARRAY
70278: PUSH
70279: LD_VAR 0 2
70283: ARRAY
70284: PUSH
70285: LD_INT 2
70287: ARRAY
70288: PPUSH
70289: CALL_OW 428
70293: ST_TO_ADDR
// if not tmp then
70294: LD_VAR 0 4
70298: NOT
70299: IFFALSE 70303
// continue ;
70301: GO 70113
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
70303: LD_VAR 0 4
70307: PUSH
70308: LD_INT 81
70310: PUSH
70311: LD_VAR 0 3
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PPUSH
70320: CALL_OW 69
70324: IN
70325: IFFALSE 70375
70327: PUSH
70328: LD_EXP 100
70332: PUSH
70333: LD_VAR 0 1
70337: ARRAY
70338: PUSH
70339: LD_VAR 0 2
70343: ARRAY
70344: PUSH
70345: LD_INT 1
70347: ARRAY
70348: PPUSH
70349: LD_EXP 100
70353: PUSH
70354: LD_VAR 0 1
70358: ARRAY
70359: PUSH
70360: LD_VAR 0 2
70364: ARRAY
70365: PUSH
70366: LD_INT 2
70368: ARRAY
70369: PPUSH
70370: CALL_OW 458
70374: AND
70375: IFFALSE 70469
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
70377: LD_EXP 100
70381: PUSH
70382: LD_VAR 0 1
70386: ARRAY
70387: PUSH
70388: LD_VAR 0 2
70392: ARRAY
70393: PUSH
70394: LD_INT 1
70396: ARRAY
70397: PPUSH
70398: LD_EXP 100
70402: PUSH
70403: LD_VAR 0 1
70407: ARRAY
70408: PUSH
70409: LD_VAR 0 2
70413: ARRAY
70414: PUSH
70415: LD_INT 2
70417: ARRAY
70418: PPUSH
70419: LD_VAR 0 3
70423: PPUSH
70424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
70428: LD_ADDR_EXP 100
70432: PUSH
70433: LD_EXP 100
70437: PPUSH
70438: LD_VAR 0 1
70442: PPUSH
70443: LD_EXP 100
70447: PUSH
70448: LD_VAR 0 1
70452: ARRAY
70453: PPUSH
70454: LD_VAR 0 2
70458: PPUSH
70459: CALL_OW 3
70463: PPUSH
70464: CALL_OW 1
70468: ST_TO_ADDR
// end ; end ;
70469: GO 70113
70471: POP
70472: POP
// end ;
70473: GO 69984
70475: POP
70476: POP
// end ;
70477: PPOPN 4
70479: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
70480: LD_INT 0
70482: PPUSH
70483: PPUSH
70484: PPUSH
70485: PPUSH
// result := false ;
70486: LD_ADDR_VAR 0 4
70490: PUSH
70491: LD_INT 0
70493: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
70494: LD_VAR 0 1
70498: PPUSH
70499: CALL_OW 264
70503: PUSH
70504: LD_INT 81
70506: EQUAL
70507: NOT
70508: IFFALSE 70512
// exit ;
70510: GO 70882
// side := GetSide ( unit ) ;
70512: LD_ADDR_VAR 0 6
70516: PUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: CALL_OW 255
70526: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
70527: LD_ADDR_VAR 0 5
70531: PUSH
70532: LD_EXP 99
70536: PPUSH
70537: LD_VAR 0 1
70541: PPUSH
70542: CALL 11364 0 2
70546: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
70547: LD_EXP 100
70551: PUSH
70552: LD_VAR 0 5
70556: ARRAY
70557: PUSH
70558: LD_EXP 101
70562: GREATEREQUAL
70563: IFFALSE 70567
// exit ;
70565: GO 70882
// ComMoveXY ( unit , x , y ) ;
70567: LD_VAR 0 1
70571: PPUSH
70572: LD_VAR 0 2
70576: PPUSH
70577: LD_VAR 0 3
70581: PPUSH
70582: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70586: LD_INT 35
70588: PPUSH
70589: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
70593: LD_VAR 0 1
70597: PPUSH
70598: LD_VAR 0 2
70602: PPUSH
70603: LD_VAR 0 3
70607: PPUSH
70608: CALL 43420 0 3
70612: NOT
70613: IFFALSE 70626
70615: PUSH
70616: LD_VAR 0 1
70620: PPUSH
70621: CALL_OW 314
70625: AND
70626: IFFALSE 70630
// exit ;
70628: GO 70882
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
70630: LD_VAR 0 2
70634: PPUSH
70635: LD_VAR 0 3
70639: PPUSH
70640: CALL_OW 428
70644: PUSH
70645: LD_VAR 0 1
70649: EQUAL
70650: IFFALSE 70664
70652: PUSH
70653: LD_VAR 0 1
70657: PPUSH
70658: CALL_OW 314
70662: NOT
70663: AND
70664: IFFALSE 70586
// if MineAtPos ( x , y ) then
70666: LD_VAR 0 2
70670: PPUSH
70671: LD_VAR 0 3
70675: PPUSH
70676: CALL_OW 458
70680: IFFALSE 70684
// exit ;
70682: GO 70882
// if your_side = side then
70684: LD_OWVAR 2
70688: PUSH
70689: LD_VAR 0 6
70693: EQUAL
70694: IFFALSE 70713
// PlaySoundXY ( x , y , PlantMine ) ;
70696: LD_VAR 0 2
70700: PPUSH
70701: LD_VAR 0 3
70705: PPUSH
70706: LD_STRING PlantMine
70708: PPUSH
70709: CALL_OW 366
// repeat wait ( 1 ) ;
70713: LD_INT 1
70715: PPUSH
70716: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
70720: LD_VAR 0 2
70724: PPUSH
70725: LD_VAR 0 3
70729: PPUSH
70730: LD_VAR 0 6
70734: PPUSH
70735: LD_INT 0
70737: PPUSH
70738: CALL_OW 454
70742: IFFALSE 70713
// if MineAtPos ( x , y ) then
70744: LD_VAR 0 2
70748: PPUSH
70749: LD_VAR 0 3
70753: PPUSH
70754: CALL_OW 458
70758: IFFALSE 70874
// begin for i in minerMinesList [ index ] do
70760: LD_ADDR_VAR 0 7
70764: PUSH
70765: LD_EXP 100
70769: PUSH
70770: LD_VAR 0 5
70774: ARRAY
70775: PUSH
70776: FOR_IN
70777: IFFALSE 70819
// if i [ 1 ] = x and i [ 2 ] = y then
70779: LD_VAR 0 7
70783: PUSH
70784: LD_INT 1
70786: ARRAY
70787: PUSH
70788: LD_VAR 0 2
70792: EQUAL
70793: IFFALSE 70811
70795: PUSH
70796: LD_VAR 0 7
70800: PUSH
70801: LD_INT 2
70803: ARRAY
70804: PUSH
70805: LD_VAR 0 3
70809: EQUAL
70810: AND
70811: IFFALSE 70817
// exit ;
70813: POP
70814: POP
70815: GO 70882
70817: GO 70776
70819: POP
70820: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
70821: LD_ADDR_EXP 100
70825: PUSH
70826: LD_EXP 100
70830: PPUSH
70831: LD_VAR 0 5
70835: PUSH
70836: LD_EXP 100
70840: PUSH
70841: LD_VAR 0 5
70845: ARRAY
70846: PUSH
70847: LD_INT 1
70849: PLUS
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PPUSH
70855: LD_VAR 0 2
70859: PUSH
70860: LD_VAR 0 3
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PPUSH
70869: CALL 11581 0 3
70873: ST_TO_ADDR
// end ; result := true ;
70874: LD_ADDR_VAR 0 4
70878: PUSH
70879: LD_INT 1
70881: ST_TO_ADDR
// end ;
70882: LD_VAR 0 4
70886: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
70887: LD_INT 0
70889: PPUSH
70890: PPUSH
70891: PPUSH
// if not unit in minersList then
70892: LD_VAR 0 1
70896: PUSH
70897: LD_EXP 99
70901: IN
70902: NOT
70903: IFFALSE 70907
// exit ;
70905: GO 71114
// index := GetElementIndex ( minersList , unit ) ;
70907: LD_ADDR_VAR 0 6
70911: PUSH
70912: LD_EXP 99
70916: PPUSH
70917: LD_VAR 0 1
70921: PPUSH
70922: CALL 11364 0 2
70926: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
70927: LD_ADDR_VAR 0 5
70931: PUSH
70932: DOUBLE
70933: LD_EXP 100
70937: PUSH
70938: LD_VAR 0 6
70942: ARRAY
70943: INC
70944: ST_TO_ADDR
70945: LD_INT 1
70947: PUSH
70948: FOR_DOWNTO
70949: IFFALSE 71112
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
70951: LD_EXP 100
70955: PUSH
70956: LD_VAR 0 6
70960: ARRAY
70961: PUSH
70962: LD_VAR 0 5
70966: ARRAY
70967: PUSH
70968: LD_INT 1
70970: ARRAY
70971: PPUSH
70972: LD_EXP 100
70976: PUSH
70977: LD_VAR 0 6
70981: ARRAY
70982: PUSH
70983: LD_VAR 0 5
70987: ARRAY
70988: PUSH
70989: LD_INT 2
70991: ARRAY
70992: PPUSH
70993: LD_VAR 0 2
70997: PPUSH
70998: LD_VAR 0 3
71002: PPUSH
71003: CALL_OW 298
71007: PUSH
71008: LD_INT 6
71010: LESS
71011: IFFALSE 71110
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
71013: LD_EXP 100
71017: PUSH
71018: LD_VAR 0 6
71022: ARRAY
71023: PUSH
71024: LD_VAR 0 5
71028: ARRAY
71029: PUSH
71030: LD_INT 1
71032: ARRAY
71033: PPUSH
71034: LD_EXP 100
71038: PUSH
71039: LD_VAR 0 6
71043: ARRAY
71044: PUSH
71045: LD_VAR 0 5
71049: ARRAY
71050: PUSH
71051: LD_INT 2
71053: ARRAY
71054: PPUSH
71055: LD_VAR 0 1
71059: PPUSH
71060: CALL_OW 255
71064: PPUSH
71065: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
71069: LD_ADDR_EXP 100
71073: PUSH
71074: LD_EXP 100
71078: PPUSH
71079: LD_VAR 0 6
71083: PPUSH
71084: LD_EXP 100
71088: PUSH
71089: LD_VAR 0 6
71093: ARRAY
71094: PPUSH
71095: LD_VAR 0 5
71099: PPUSH
71100: CALL_OW 3
71104: PPUSH
71105: CALL_OW 1
71109: ST_TO_ADDR
// end ; end ;
71110: GO 70948
71112: POP
71113: POP
// end ;
71114: LD_VAR 0 4
71118: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
71119: LD_INT 0
71121: PPUSH
71122: PPUSH
71123: PPUSH
71124: PPUSH
71125: PPUSH
71126: PPUSH
71127: PPUSH
71128: PPUSH
71129: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
71130: LD_VAR 0 1
71134: PPUSH
71135: CALL_OW 264
71139: PUSH
71140: LD_INT 81
71142: EQUAL
71143: NOT
71144: IFTRUE 71159
71146: PUSH
71147: LD_VAR 0 1
71151: PUSH
71152: LD_EXP 99
71156: IN
71157: NOT
71158: OR
71159: IFFALSE 71163
// exit ;
71161: GO 71489
// index := GetElementIndex ( minersList , unit ) ;
71163: LD_ADDR_VAR 0 6
71167: PUSH
71168: LD_EXP 99
71172: PPUSH
71173: LD_VAR 0 1
71177: PPUSH
71178: CALL 11364 0 2
71182: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
71183: LD_ADDR_VAR 0 8
71187: PUSH
71188: LD_EXP 101
71192: PUSH
71193: LD_EXP 100
71197: PUSH
71198: LD_VAR 0 6
71202: ARRAY
71203: MINUS
71204: ST_TO_ADDR
// if not minesFreeAmount then
71205: LD_VAR 0 8
71209: NOT
71210: IFFALSE 71214
// exit ;
71212: GO 71489
// tmp := [ ] ;
71214: LD_ADDR_VAR 0 7
71218: PUSH
71219: EMPTY
71220: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
71221: LD_ADDR_VAR 0 5
71225: PUSH
71226: DOUBLE
71227: LD_INT 1
71229: DEC
71230: ST_TO_ADDR
71231: LD_VAR 0 8
71235: PUSH
71236: FOR_TO
71237: IFFALSE 71436
// begin _d := rand ( 0 , 5 ) ;
71239: LD_ADDR_VAR 0 11
71243: PUSH
71244: LD_INT 0
71246: PPUSH
71247: LD_INT 5
71249: PPUSH
71250: CALL_OW 12
71254: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
71255: LD_ADDR_VAR 0 12
71259: PUSH
71260: LD_INT 2
71262: PPUSH
71263: LD_INT 6
71265: PPUSH
71266: CALL_OW 12
71270: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
71271: LD_ADDR_VAR 0 9
71275: PUSH
71276: LD_VAR 0 2
71280: PPUSH
71281: LD_VAR 0 11
71285: PPUSH
71286: LD_VAR 0 12
71290: PPUSH
71291: CALL_OW 272
71295: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
71296: LD_ADDR_VAR 0 10
71300: PUSH
71301: LD_VAR 0 3
71305: PPUSH
71306: LD_VAR 0 11
71310: PPUSH
71311: LD_VAR 0 12
71315: PPUSH
71316: CALL_OW 273
71320: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
71321: LD_VAR 0 9
71325: PPUSH
71326: LD_VAR 0 10
71330: PPUSH
71331: CALL_OW 488
71335: IFFALSE 71359
71337: PUSH
71338: LD_VAR 0 9
71342: PUSH
71343: LD_VAR 0 10
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_VAR 0 7
71356: IN
71357: NOT
71358: AND
71359: IFFALSE 71378
71361: PUSH
71362: LD_VAR 0 9
71366: PPUSH
71367: LD_VAR 0 10
71371: PPUSH
71372: CALL_OW 458
71376: NOT
71377: AND
71378: IFFALSE 71420
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
71380: LD_ADDR_VAR 0 7
71384: PUSH
71385: LD_VAR 0 7
71389: PPUSH
71390: LD_VAR 0 7
71394: PUSH
71395: LD_INT 1
71397: PLUS
71398: PPUSH
71399: LD_VAR 0 9
71403: PUSH
71404: LD_VAR 0 10
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PPUSH
71413: CALL_OW 1
71417: ST_TO_ADDR
71418: GO 71434
// i := i - 1 ;
71420: LD_ADDR_VAR 0 5
71424: PUSH
71425: LD_VAR 0 5
71429: PUSH
71430: LD_INT 1
71432: MINUS
71433: ST_TO_ADDR
// end ;
71434: GO 71236
71436: POP
71437: POP
// for i in tmp do
71438: LD_ADDR_VAR 0 5
71442: PUSH
71443: LD_VAR 0 7
71447: PUSH
71448: FOR_IN
71449: IFFALSE 71487
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
71451: LD_VAR 0 1
71455: PPUSH
71456: LD_VAR 0 5
71460: PUSH
71461: LD_INT 1
71463: ARRAY
71464: PPUSH
71465: LD_VAR 0 5
71469: PUSH
71470: LD_INT 2
71472: ARRAY
71473: PPUSH
71474: CALL 70480 0 3
71478: NOT
71479: IFFALSE 71485
// exit ;
71481: POP
71482: POP
71483: GO 71489
71485: GO 71448
71487: POP
71488: POP
// end ;
71489: LD_VAR 0 4
71493: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
71494: LD_INT 0
71496: PPUSH
71497: PPUSH
71498: PPUSH
71499: PPUSH
71500: PPUSH
71501: PPUSH
71502: PPUSH
71503: PPUSH
71504: PPUSH
// if GetClass ( unit ) <> class_sniper then
71505: LD_VAR 0 1
71509: PPUSH
71510: CALL_OW 257
71514: PUSH
71515: LD_INT 5
71517: NONEQUAL
71518: IFFALSE 71522
// exit ;
71520: GO 71992
// dist := 8 ;
71522: LD_ADDR_VAR 0 5
71526: PUSH
71527: LD_INT 8
71529: ST_TO_ADDR
// viewRange := 12 ;
71530: LD_ADDR_VAR 0 8
71534: PUSH
71535: LD_INT 12
71537: ST_TO_ADDR
// side := GetSide ( unit ) ;
71538: LD_ADDR_VAR 0 6
71542: PUSH
71543: LD_VAR 0 1
71547: PPUSH
71548: CALL_OW 255
71552: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
71553: LD_INT 61
71555: PPUSH
71556: LD_VAR 0 6
71560: PPUSH
71561: CALL_OW 321
71565: PUSH
71566: LD_INT 2
71568: EQUAL
71569: IFFALSE 71579
// viewRange := 16 ;
71571: LD_ADDR_VAR 0 8
71575: PUSH
71576: LD_INT 16
71578: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
71579: LD_VAR 0 1
71583: PPUSH
71584: LD_VAR 0 2
71588: PPUSH
71589: LD_VAR 0 3
71593: PPUSH
71594: CALL_OW 297
71598: PUSH
71599: LD_VAR 0 5
71603: GREATER
71604: IFFALSE 71683
// begin ComMoveXY ( unit , x , y ) ;
71606: LD_VAR 0 1
71610: PPUSH
71611: LD_VAR 0 2
71615: PPUSH
71616: LD_VAR 0 3
71620: PPUSH
71621: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
71625: LD_INT 35
71627: PPUSH
71628: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
71632: LD_VAR 0 1
71636: PPUSH
71637: LD_VAR 0 2
71641: PPUSH
71642: LD_VAR 0 3
71646: PPUSH
71647: CALL 43420 0 3
71651: NOT
71652: IFFALSE 71656
// exit ;
71654: GO 71992
// until GetDistUnitXY ( unit , x , y ) < dist ;
71656: LD_VAR 0 1
71660: PPUSH
71661: LD_VAR 0 2
71665: PPUSH
71666: LD_VAR 0 3
71670: PPUSH
71671: CALL_OW 297
71675: PUSH
71676: LD_VAR 0 5
71680: LESS
71681: IFFALSE 71625
// end ; ComTurnXY ( unit , x , y ) ;
71683: LD_VAR 0 1
71687: PPUSH
71688: LD_VAR 0 2
71692: PPUSH
71693: LD_VAR 0 3
71697: PPUSH
71698: CALL_OW 118
// repeat if Multiplayer then
71702: LD_OWVAR 4
71706: IFFALSE 71717
// wait ( 35 ) else
71708: LD_INT 35
71710: PPUSH
71711: CALL_OW 67
71715: GO 71724
// wait ( 5 ) ;
71717: LD_INT 5
71719: PPUSH
71720: CALL_OW 67
// _d := GetDir ( unit ) ;
71724: LD_ADDR_VAR 0 11
71728: PUSH
71729: LD_VAR 0 1
71733: PPUSH
71734: CALL_OW 254
71738: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
71739: LD_ADDR_VAR 0 7
71743: PUSH
71744: LD_VAR 0 1
71748: PPUSH
71749: CALL_OW 250
71753: PPUSH
71754: LD_VAR 0 1
71758: PPUSH
71759: CALL_OW 251
71763: PPUSH
71764: LD_VAR 0 2
71768: PPUSH
71769: LD_VAR 0 3
71773: PPUSH
71774: CALL 46056 0 4
71778: ST_TO_ADDR
// until dir = _d ;
71779: LD_VAR 0 7
71783: PUSH
71784: LD_VAR 0 11
71788: EQUAL
71789: IFFALSE 71702
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
71791: LD_ADDR_VAR 0 9
71795: PUSH
71796: LD_VAR 0 1
71800: PPUSH
71801: CALL_OW 250
71805: PPUSH
71806: LD_VAR 0 7
71810: PPUSH
71811: LD_VAR 0 5
71815: PPUSH
71816: CALL_OW 272
71820: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
71821: LD_ADDR_VAR 0 10
71825: PUSH
71826: LD_VAR 0 1
71830: PPUSH
71831: CALL_OW 251
71835: PPUSH
71836: LD_VAR 0 7
71840: PPUSH
71841: LD_VAR 0 5
71845: PPUSH
71846: CALL_OW 273
71850: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71851: LD_VAR 0 9
71855: PPUSH
71856: LD_VAR 0 10
71860: PPUSH
71861: CALL_OW 488
71865: NOT
71866: IFFALSE 71870
// exit ;
71868: GO 71992
// ComAnimCustom ( unit , 1 ) ;
71870: LD_VAR 0 1
71874: PPUSH
71875: LD_INT 1
71877: PPUSH
71878: CALL_OW 592
// p := 0 ;
71882: LD_ADDR_VAR 0 12
71886: PUSH
71887: LD_INT 0
71889: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
71890: LD_VAR 0 9
71894: PPUSH
71895: LD_VAR 0 10
71899: PPUSH
71900: LD_VAR 0 6
71904: PPUSH
71905: LD_VAR 0 8
71909: PPUSH
71910: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
71914: LD_INT 35
71916: PPUSH
71917: CALL_OW 67
// p := Inc ( p ) ;
71921: LD_ADDR_VAR 0 12
71925: PUSH
71926: LD_VAR 0 12
71930: PPUSH
71931: CALL 46012 0 1
71935: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
71936: LD_VAR 0 12
71940: PUSH
71941: LD_INT 3
71943: EQUAL
71944: IFTRUE 71958
71946: PUSH
71947: LD_VAR 0 1
71951: PPUSH
71952: CALL_OW 302
71956: NOT
71957: OR
71958: IFTRUE 71971
71960: PUSH
71961: LD_VAR 0 1
71965: PPUSH
71966: CALL_OW 301
71970: OR
71971: IFFALSE 71914
// RemoveSeeing ( _x , _y , side ) ;
71973: LD_VAR 0 9
71977: PPUSH
71978: LD_VAR 0 10
71982: PPUSH
71983: LD_VAR 0 6
71987: PPUSH
71988: CALL_OW 331
// end ;
71992: LD_VAR 0 4
71996: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
71997: LD_INT 0
71999: PPUSH
72000: PPUSH
72001: PPUSH
72002: PPUSH
72003: PPUSH
72004: PPUSH
72005: PPUSH
72006: PPUSH
72007: PPUSH
72008: PPUSH
72009: PPUSH
// if not unit then
72010: LD_VAR 0 1
72014: NOT
72015: IFFALSE 72019
// exit ;
72017: GO 72290
// side := GetSide ( unit ) ;
72019: LD_ADDR_VAR 0 3
72023: PUSH
72024: LD_VAR 0 1
72028: PPUSH
72029: CALL_OW 255
72033: ST_TO_ADDR
// x := GetX ( unit ) ;
72034: LD_ADDR_VAR 0 5
72038: PUSH
72039: LD_VAR 0 1
72043: PPUSH
72044: CALL_OW 250
72048: ST_TO_ADDR
// y := GetY ( unit ) ;
72049: LD_ADDR_VAR 0 6
72053: PUSH
72054: LD_VAR 0 1
72058: PPUSH
72059: CALL_OW 251
72063: ST_TO_ADDR
// r := 8 ;
72064: LD_ADDR_VAR 0 4
72068: PUSH
72069: LD_INT 8
72071: ST_TO_ADDR
// if x - r < 0 then
72072: LD_VAR 0 5
72076: PUSH
72077: LD_VAR 0 4
72081: MINUS
72082: PUSH
72083: LD_INT 0
72085: LESS
72086: IFFALSE 72098
// min_x := 0 else
72088: LD_ADDR_VAR 0 7
72092: PUSH
72093: LD_INT 0
72095: ST_TO_ADDR
72096: GO 72114
// min_x := x - r ;
72098: LD_ADDR_VAR 0 7
72102: PUSH
72103: LD_VAR 0 5
72107: PUSH
72108: LD_VAR 0 4
72112: MINUS
72113: ST_TO_ADDR
// if y - r < 0 then
72114: LD_VAR 0 6
72118: PUSH
72119: LD_VAR 0 4
72123: MINUS
72124: PUSH
72125: LD_INT 0
72127: LESS
72128: IFFALSE 72140
// min_y := 0 else
72130: LD_ADDR_VAR 0 8
72134: PUSH
72135: LD_INT 0
72137: ST_TO_ADDR
72138: GO 72156
// min_y := y - r ;
72140: LD_ADDR_VAR 0 8
72144: PUSH
72145: LD_VAR 0 6
72149: PUSH
72150: LD_VAR 0 4
72154: MINUS
72155: ST_TO_ADDR
// max_x := x + r ;
72156: LD_ADDR_VAR 0 9
72160: PUSH
72161: LD_VAR 0 5
72165: PUSH
72166: LD_VAR 0 4
72170: PLUS
72171: ST_TO_ADDR
// max_y := y + r ;
72172: LD_ADDR_VAR 0 10
72176: PUSH
72177: LD_VAR 0 6
72181: PUSH
72182: LD_VAR 0 4
72186: PLUS
72187: ST_TO_ADDR
// for _x = min_x to max_x do
72188: LD_ADDR_VAR 0 11
72192: PUSH
72193: DOUBLE
72194: LD_VAR 0 7
72198: DEC
72199: ST_TO_ADDR
72200: LD_VAR 0 9
72204: PUSH
72205: FOR_TO
72206: IFFALSE 72288
// for _y = min_y to max_y do
72208: LD_ADDR_VAR 0 12
72212: PUSH
72213: DOUBLE
72214: LD_VAR 0 8
72218: DEC
72219: ST_TO_ADDR
72220: LD_VAR 0 10
72224: PUSH
72225: FOR_TO
72226: IFFALSE 72284
// begin if not ValidHex ( _x , _y ) then
72228: LD_VAR 0 11
72232: PPUSH
72233: LD_VAR 0 12
72237: PPUSH
72238: CALL_OW 488
72242: NOT
72243: IFFALSE 72247
// continue ;
72245: GO 72225
// if MineAtPos ( _x , _y ) then
72247: LD_VAR 0 11
72251: PPUSH
72252: LD_VAR 0 12
72256: PPUSH
72257: CALL_OW 458
72261: IFFALSE 72282
// ViewMineAtPos ( _x , _y , side ) ;
72263: LD_VAR 0 11
72267: PPUSH
72268: LD_VAR 0 12
72272: PPUSH
72273: LD_VAR 0 3
72277: PPUSH
72278: CALL_OW 457
// end ;
72282: GO 72225
72284: POP
72285: POP
72286: GO 72205
72288: POP
72289: POP
// end ;
72290: LD_VAR 0 2
72294: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
72295: LD_INT 0
72297: PPUSH
72298: PPUSH
72299: PPUSH
72300: PPUSH
72301: PPUSH
72302: PPUSH
72303: PPUSH
// if not units then
72304: LD_VAR 0 1
72308: NOT
72309: IFFALSE 72313
// exit ;
72311: GO 72777
// scaners := [ ] ;
72313: LD_ADDR_VAR 0 6
72317: PUSH
72318: EMPTY
72319: ST_TO_ADDR
// for i in units do
72320: LD_ADDR_VAR 0 3
72324: PUSH
72325: LD_VAR 0 1
72329: PUSH
72330: FOR_IN
72331: IFFALSE 72488
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
72333: LD_VAR 0 3
72337: PPUSH
72338: CALL_OW 264
72342: PUSH
72343: LD_INT 11
72345: NONEQUAL
72346: IFTRUE 72360
72348: PUSH
72349: LD_VAR 0 3
72353: PPUSH
72354: CALL_OW 302
72358: NOT
72359: OR
72360: IFTRUE 72377
72362: PUSH
72363: LD_VAR 0 3
72367: PPUSH
72368: CALL_OW 110
72372: PUSH
72373: LD_INT 502
72375: EQUAL
72376: OR
72377: IFFALSE 72381
// continue ;
72379: GO 72330
// ComStop ( i ) ;
72381: LD_VAR 0 3
72385: PPUSH
72386: CALL_OW 141
// x := GetX ( i ) ;
72390: LD_ADDR_VAR 0 4
72394: PUSH
72395: LD_VAR 0 3
72399: PPUSH
72400: CALL_OW 250
72404: ST_TO_ADDR
// y := GetY ( i ) ;
72405: LD_ADDR_VAR 0 5
72409: PUSH
72410: LD_VAR 0 3
72414: PPUSH
72415: CALL_OW 251
72419: ST_TO_ADDR
// if GetSide ( i ) = your_side then
72420: LD_VAR 0 3
72424: PPUSH
72425: CALL_OW 255
72429: PUSH
72430: LD_OWVAR 2
72434: EQUAL
72435: IFFALSE 72454
// PlaySoundXY ( x , y , mineDetector ) ;
72437: LD_VAR 0 4
72441: PPUSH
72442: LD_VAR 0 5
72446: PPUSH
72447: LD_STRING mineDetector
72449: PPUSH
72450: CALL_OW 366
// scaners := Join ( scaners , i ) ;
72454: LD_ADDR_VAR 0 6
72458: PUSH
72459: LD_VAR 0 6
72463: PPUSH
72464: LD_VAR 0 3
72468: PPUSH
72469: CALL 44639 0 2
72473: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
72474: LD_VAR 0 3
72478: PPUSH
72479: LD_INT 502
72481: PPUSH
72482: CALL_OW 109
// end ;
72486: GO 72330
72488: POP
72489: POP
// if not scaners then
72490: LD_VAR 0 6
72494: NOT
72495: IFFALSE 72499
// exit ;
72497: GO 72777
// wait ( 3 ) ;
72499: LD_INT 3
72501: PPUSH
72502: CALL_OW 67
// timer := 6 ;
72506: LD_ADDR_VAR 0 7
72510: PUSH
72511: LD_INT 6
72513: ST_TO_ADDR
// repeat for i in scaners do
72514: LD_ADDR_VAR 0 3
72518: PUSH
72519: LD_VAR 0 6
72523: PUSH
72524: FOR_IN
72525: IFFALSE 72675
// begin side := GetSide ( i ) ;
72527: LD_ADDR_VAR 0 8
72531: PUSH
72532: LD_VAR 0 3
72536: PPUSH
72537: CALL_OW 255
72541: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
72542: LD_VAR 0 3
72546: PPUSH
72547: CALL_OW 302
72551: NOT
72552: IFTRUE 72565
72554: PUSH
72555: LD_VAR 0 3
72559: PPUSH
72560: CALL_OW 314
72564: OR
72565: IFTRUE 72596
72567: PUSH
72568: LD_VAR 0 3
72572: PPUSH
72573: CALL_OW 263
72577: PUSH
72578: LD_INT 1
72580: EQUAL
72581: IFFALSE 72595
72583: PUSH
72584: LD_VAR 0 3
72588: PPUSH
72589: CALL_OW 311
72593: NOT
72594: AND
72595: OR
72596: IFFALSE 72640
// begin SetUnitDisplayNumber ( i , 0 ) ;
72598: LD_VAR 0 3
72602: PPUSH
72603: LD_INT 0
72605: PPUSH
72606: CALL_OW 505
// SetTag ( i , 0 ) ;
72610: LD_VAR 0 3
72614: PPUSH
72615: LD_INT 0
72617: PPUSH
72618: CALL_OW 109
// scaners := scaners diff i ;
72622: LD_ADDR_VAR 0 6
72626: PUSH
72627: LD_VAR 0 6
72631: PUSH
72632: LD_VAR 0 3
72636: DIFF
72637: ST_TO_ADDR
// continue ;
72638: GO 72524
// end ; if side in [ your_side , 9 ] then
72640: LD_VAR 0 8
72644: PUSH
72645: LD_OWVAR 2
72649: PUSH
72650: LD_INT 9
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: IN
72657: IFFALSE 72673
// SetUnitDisplayNumber ( i , timer ) ;
72659: LD_VAR 0 3
72663: PPUSH
72664: LD_VAR 0 7
72668: PPUSH
72669: CALL_OW 505
// end ;
72673: GO 72524
72675: POP
72676: POP
// if not scaners then
72677: LD_VAR 0 6
72681: NOT
72682: IFFALSE 72686
// exit ;
72684: GO 72777
// timer := Dec ( timer ) ;
72686: LD_ADDR_VAR 0 7
72690: PUSH
72691: LD_VAR 0 7
72695: PPUSH
72696: CALL 46034 0 1
72700: ST_TO_ADDR
// wait ( 0 0$1 ) ;
72701: LD_INT 35
72703: PPUSH
72704: CALL_OW 67
// until timer = 0 ;
72708: LD_VAR 0 7
72712: PUSH
72713: LD_INT 0
72715: EQUAL
72716: IFFALSE 72514
// if not scaners then
72718: LD_VAR 0 6
72722: NOT
72723: IFFALSE 72727
// exit ;
72725: GO 72777
// for i in scaners do
72727: LD_ADDR_VAR 0 3
72731: PUSH
72732: LD_VAR 0 6
72736: PUSH
72737: FOR_IN
72738: IFFALSE 72775
// begin SetUnitDisplayNumber ( i , 0 ) ;
72740: LD_VAR 0 3
72744: PPUSH
72745: LD_INT 0
72747: PPUSH
72748: CALL_OW 505
// SetTag ( i , 0 ) ;
72752: LD_VAR 0 3
72756: PPUSH
72757: LD_INT 0
72759: PPUSH
72760: CALL_OW 109
// RevealDetectorMine ( i ) ;
72764: LD_VAR 0 3
72768: PPUSH
72769: CALL 71997 0 1
// end ;
72773: GO 72737
72775: POP
72776: POP
// end ;
72777: LD_VAR 0 2
72781: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
72782: LD_INT 0
72784: PPUSH
// if p1 = mine_detector_mode then
72785: LD_VAR 0 2
72789: PUSH
72790: LD_INT 103
72792: EQUAL
72793: IFFALSE 72804
// DetectMine ( units ) ;
72795: LD_VAR 0 1
72799: PPUSH
72800: CALL 72295 0 1
// end ;
72804: LD_VAR 0 7
72808: RET
