// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3776 0 0
// CreateNature ;
  12: CALL 3647 0 0
// Action ;
  16: CALL 3918 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6417 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6417 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6417 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6417 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6417 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6417 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6417 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6417 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6417 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6417 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6417 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6417 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6417 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6417 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6417 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6417 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 43718 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11257 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14357 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11257 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 42636 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11257 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 43718 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 13
3195: PPUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 70
3210: AND
3211: IFFALSE 3644
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
// begin tmp := [ ] ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 3
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 5
3246: PUSH
3247: LD_INT 6
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_OWVAR 67
3260: ARRAY
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3380
// begin uc_side := 3 ;
3265: LD_ADDR_OWVAR 20
3269: PUSH
3270: LD_INT 3
3272: ST_TO_ADDR
// uc_nation := nation_russian ;
3273: LD_ADDR_OWVAR 21
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 6
3286: PUSH
3287: LD_INT 7
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: LD_INT 9
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// if Prob ( 50 ) then
3322: LD_INT 50
3324: PPUSH
3325: CALL_OW 13
3329: IFFALSE 3343
// SetClass ( un , class_bazooker ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 9
3338: PPUSH
3339: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3343: LD_VAR 0 2
3347: PPUSH
3348: LD_INT 12
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 43718 0 2
3377: ST_TO_ADDR
// end ;
3378: GO 3262
3380: POP
3381: POP
// for i := 1 to 4 do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 4
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3566
// begin uc_side := 3 ;
3398: LD_ADDR_OWVAR 20
3402: PUSH
3403: LD_INT 3
3405: ST_TO_ADDR
// uc_nation := nation_russian ;
3406: LD_ADDR_OWVAR 21
3410: PUSH
3411: LD_INT 3
3413: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 8
3425: PUSH
3426: LD_INT 9
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_OWVAR 67
3439: ARRAY
3440: PPUSH
3441: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3445: LD_INT 22
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 43
3456: PUSH
3457: LD_INT 44
3459: PUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 45
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_VAR 0 1
3476: PUSH
3477: LD_INT 4
3479: MOD
3480: PUSH
3481: LD_INT 1
3483: PLUS
3484: ARRAY
3485: PPUSH
3486: LD_INT 100
3488: PPUSH
3489: CALL 11257 0 5
// un := CreateVehicle ;
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: CALL_OW 45
3502: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_INT 4
3510: PPUSH
3511: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3530: CALL_OW 44
3534: PPUSH
3535: LD_VAR 0 2
3539: PPUSH
3540: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL 43718 0 2
3563: ST_TO_ADDR
// end ;
3564: GO 3395
3566: POP
3567: POP
// repeat wait ( 0 0$1 ) ;
3568: LD_INT 35
3570: PPUSH
3571: CALL_OW 67
// for i in tmp do
3575: LD_ADDR_VAR 0 1
3579: PUSH
3580: LD_VAR 0 3
3584: PUSH
3585: FOR_IN
3586: IFFALSE 3624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_INT 22
3595: PUSH
3596: LD_INT 2
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PPUSH
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 74
3617: PPUSH
3618: CALL_OW 115
3622: GO 3585
3624: POP
3625: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_INT 50
3633: PUSH
3634: EMPTY
3635: LIST
3636: PPUSH
3637: CALL_OW 72
3641: NOT
3642: IFFALSE 3568
// end ; end_of_file
3644: PPOPN 3
3646: END
// export function CreateNature ; var i ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
// PrepareTiger ( 0 ) ;
3651: LD_INT 0
3653: PPUSH
3654: CALL 40107 0 1
// for i := 1 to 2 do
3658: LD_ADDR_VAR 0 2
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 2
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3691
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3674: CALL_OW 44
3678: PPUSH
3679: LD_INT 4
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
3689: GO 3671
3691: POP
3692: POP
// PrepareBird ;
3693: CALL 40288 0 0
// for i := 1 to 3 do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: DOUBLE
3703: LD_INT 1
3705: DEC
3706: ST_TO_ADDR
3707: LD_INT 3
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3713: CALL_OW 44
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// PrepareFrog ;
3732: CALL 40208 0 0
// for i := 1 to 3 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 3
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3769
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3752: CALL_OW 44
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
3767: GO 3749
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function LoadTech ; var i , tmp ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3781: LD_ADDR_VAR 0 3
3785: PUSH
3786: LD_STRING 09_tech
3788: PPUSH
3789: EMPTY
3790: PPUSH
3791: CALL_OW 30
3795: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL 8519 0 1
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3844
// SetTech ( i , 2 , tmp [ i ] ) ;
3819: LD_VAR 0 2
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 322
3842: GO 3816
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3851: LD_ADDR_EXP 8
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// end ;
3859: PPOPN 1
3861: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3862: LD_VAR 0 1
3866: PUSH
3867: LD_EXP 21
3871: EQUAL
3872: IFFALSE 3881
// YouLost ( Schulz ) ;
3874: LD_STRING Schulz
3876: PPUSH
3877: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3881: LD_VAR 0 1
3885: PUSH
3886: LD_EXP 10
3890: EQUAL
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 255
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: AND
3906: IFFALSE 3915
// YouLost ( Heike ) ;
3908: LD_STRING Heike
3910: PPUSH
3911: CALL_OW 104
// end ; end_of_file
3915: PPOPN 1
3917: END
// export function Action ; var p , i , tmp ; begin
3918: LD_INT 0
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3924: LD_INT 12
3926: PPUSH
3927: LD_INT 12
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 10
3935: PPUSH
3936: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3940: LD_INT 12
3942: PPUSH
3943: LD_INT 12
3945: PPUSH
3946: LD_INT 2
3948: PPUSH
3949: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 12
3958: PPUSH
3959: CALL_OW 86
// InGameOn ;
3963: CALL_OW 8
// PrepareArabian ;
3967: CALL 133 0 0
// InGameOff ;
3971: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3975: LD_STRING M4
3977: PPUSH
3978: CALL_OW 337
// SaveForQuickRestart ;
3982: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3986: LD_INT 35
3988: PPUSH
3989: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3993: LD_INT 9
3995: PPUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 70
4010: IFFALSE 3986
// PrepareHeikeCamp ;
4012: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// if heikeIsDead then
4023: LD_EXP 7
4027: IFFALSE 4363
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4029: LD_INT 116
4031: PPUSH
4032: LD_INT 58
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 26
4040: NEG
4041: PPUSH
4042: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4046: LD_INT 116
4048: PPUSH
4049: LD_INT 58
4051: PPUSH
4052: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4056: LD_EXP 21
4060: PPUSH
4061: LD_STRING DL-Obj-a-1
4063: PPUSH
4064: CALL_OW 88
// InGameOn ;
4068: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4072: LD_INT 116
4074: PPUSH
4075: LD_INT 58
4077: PPUSH
4078: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4082: LD_INT 22
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: LD_EXP 21
4101: PUSH
4102: LD_EXP 25
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: DIFF
4111: PPUSH
4112: LD_INT 96
4114: PPUSH
4115: LD_INT 65
4117: PPUSH
4118: CALL_OW 111
// if IsInUnit ( Schulz ) then
4122: LD_EXP 21
4126: PPUSH
4127: CALL_OW 310
4131: IFFALSE 4155
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4133: LD_EXP 21
4137: PPUSH
4138: CALL_OW 310
4142: PPUSH
4143: LD_INT 115
4145: PPUSH
4146: LD_INT 61
4148: PPUSH
4149: CALL_OW 111
4153: GO 4170
// ComMoveXY ( Schulz , 115 , 61 ) ;
4155: LD_EXP 21
4159: PPUSH
4160: LD_INT 115
4162: PPUSH
4163: LD_INT 61
4165: PPUSH
4166: CALL_OW 111
// if IsInUnit ( Nia ) then
4170: LD_EXP 25
4174: PPUSH
4175: CALL_OW 310
4179: IFFALSE 4203
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4181: LD_EXP 25
4185: PPUSH
4186: CALL_OW 310
4190: PPUSH
4191: LD_INT 115
4193: PPUSH
4194: LD_INT 61
4196: PPUSH
4197: CALL_OW 111
4201: GO 4218
// ComMoveXY ( Nia , 115 , 61 ) ;
4203: LD_EXP 25
4207: PPUSH
4208: LD_INT 115
4210: PPUSH
4211: LD_INT 61
4213: PPUSH
4214: CALL_OW 111
// p := 0 ;
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4226: LD_INT 35
4228: PPUSH
4229: CALL_OW 67
// p := Inc ( p ) ;
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: LD_VAR 0 2
4242: PPUSH
4243: CALL 45079 0 1
4247: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4248: LD_INT 115
4250: PPUSH
4251: LD_INT 61
4253: PPUSH
4254: CALL_OW 428
4258: PUSH
4259: LD_VAR 0 2
4263: PUSH
4264: LD_INT 20
4266: GREATER
4267: OR
4268: IFFALSE 4226
// if Givi and IsOk ( Nia ) then
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 25
4279: PPUSH
4280: CALL_OW 302
4284: AND
4285: IFFALSE 4335
// begin Say ( Nia , DN-Obj-a-2 ) ;
4287: LD_EXP 25
4291: PPUSH
4292: LD_STRING DN-Obj-a-2
4294: PPUSH
4295: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4299: LD_EXP 21
4303: PPUSH
4304: LD_STRING DL-Obj-a-3
4306: PPUSH
4307: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4311: LD_EXP 25
4315: PPUSH
4316: LD_STRING DN-Obj-a-4
4318: PPUSH
4319: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4323: LD_EXP 21
4327: PPUSH
4328: LD_STRING DL-Obj-a-5
4330: PPUSH
4331: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4335: LD_INT 35
4337: PPUSH
4338: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4342: LD_EXP 21
4346: PPUSH
4347: LD_STRING DL-Fail-1
4349: PPUSH
4350: CALL_OW 88
// YouLost ( Fail ) ;
4354: LD_STRING Fail
4356: PPUSH
4357: CALL_OW 104
// exit ;
4361: GO 5370
// end ; PrepareRussianBaseAttackers ;
4363: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4367: LD_INT 35
4369: PPUSH
4370: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4374: LD_INT 116
4376: PPUSH
4377: LD_INT 58
4379: PPUSH
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 26
4385: NEG
4386: PPUSH
4387: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4391: LD_INT 116
4393: PPUSH
4394: LD_INT 58
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4404: LD_INT 116
4406: PPUSH
4407: LD_INT 58
4409: PPUSH
4410: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4414: LD_INT 5
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: CALL_OW 343
// Say ( Schulz , DL-Obj-1 ) ;
4424: LD_EXP 21
4428: PPUSH
4429: LD_STRING DL-Obj-1
4431: PPUSH
4432: CALL_OW 88
// PrepareBasim ;
4436: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4440: LD_INT 10
4442: PPUSH
4443: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4447: LD_INT 8
4449: PPUSH
4450: LD_INT 2
4452: PPUSH
4453: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
4457: LD_INT 35
4459: PPUSH
4460: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 10 ] ] ) ;
4464: LD_INT 22
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 92
4476: PUSH
4477: LD_INT 117
4479: PUSH
4480: LD_INT 58
4482: PUSH
4483: LD_INT 10
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: CALL_OW 69
4500: IFFALSE 4457
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4502: LD_ADDR_VAR 0 3
4506: PUSH
4507: LD_INT 22
4509: PUSH
4510: LD_INT 5
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// SetSide ( i , 2 ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_INT 2
4532: PPUSH
4533: CALL_OW 235
4537: GO 4522
4539: POP
4540: POP
// repeat wait ( 0 0$1 ) ;
4541: LD_INT 35
4543: PPUSH
4544: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_INT 50
4555: PUSH
4556: EMPTY
4557: LIST
4558: PUSH
4559: LD_INT 25
4561: PUSH
4562: LD_INT 17
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 69
4577: ST_TO_ADDR
// for i in tmp do
4578: LD_ADDR_VAR 0 3
4582: PUSH
4583: LD_VAR 0 4
4587: PUSH
4588: FOR_IN
4589: IFFALSE 4627
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_INT 22
4598: PUSH
4599: LD_INT 3
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PPUSH
4611: LD_VAR 0 3
4615: PPUSH
4616: CALL_OW 74
4620: PPUSH
4621: CALL_OW 115
4625: GO 4588
4627: POP
4628: POP
// until See ( 2 , Basim ) and kamikazed ;
4629: LD_INT 2
4631: PPUSH
4632: LD_EXP 22
4636: PPUSH
4637: CALL_OW 292
4641: PUSH
4642: LD_EXP 8
4646: AND
4647: IFFALSE 4541
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4649: LD_ADDR_VAR 0 4
4653: PUSH
4654: LD_INT 50
4656: PUSH
4657: EMPTY
4658: LIST
4659: PUSH
4660: LD_INT 25
4662: PUSH
4663: LD_INT 17
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: EMPTY
4671: LIST
4672: LIST
4673: PPUSH
4674: CALL_OW 69
4678: ST_TO_ADDR
// if tmp then
4679: LD_VAR 0 4
4683: IFFALSE 4711
// for i in tmp do
4685: LD_ADDR_VAR 0 3
4689: PUSH
4690: LD_VAR 0 4
4694: PUSH
4695: FOR_IN
4696: IFFALSE 4709
// KillUnit ( i ) ;
4698: LD_VAR 0 3
4702: PPUSH
4703: CALL_OW 66
4707: GO 4695
4709: POP
4710: POP
// Say ( Basim , DBs-Obj-2 ) ;
4711: LD_EXP 22
4715: PPUSH
4716: LD_STRING DBs-Obj-2
4718: PPUSH
4719: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4723: LD_INT 35
4725: PPUSH
4726: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4730: LD_INT 22
4732: PUSH
4733: LD_INT 3
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: PUSH
4740: LD_INT 50
4742: PUSH
4743: EMPTY
4744: LIST
4745: PUSH
4746: EMPTY
4747: LIST
4748: LIST
4749: PPUSH
4750: CALL_OW 69
4754: NOT
4755: IFFALSE 4723
// ComExit ( Heike ) ;
4757: LD_EXP 10
4761: PPUSH
4762: CALL 44116 0 1
// DialogueOn ;
4766: CALL_OW 6
// if IsOk ( Kaia ) then
4770: LD_EXP 15
4774: PPUSH
4775: CALL_OW 302
4779: IFFALSE 4922
// begin CenterNowOnUnits ( Kaia ) ;
4781: LD_EXP 15
4785: PPUSH
4786: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4790: LD_EXP 15
4794: PPUSH
4795: LD_STRING DK-Obj-3
4797: PPUSH
4798: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4802: LD_EXP 11
4806: PPUSH
4807: LD_STRING DG-Obj-4
4809: PPUSH
4810: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4814: LD_EXP 15
4818: PPUSH
4819: LD_STRING DK-Obj-5
4821: PPUSH
4822: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4826: LD_EXP 15
4830: PPUSH
4831: LD_STRING DK-Obj-6
4833: PPUSH
4834: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4838: LD_EXP 15
4842: PPUSH
4843: LD_STRING DK-Obj-7
4845: PPUSH
4846: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4850: LD_EXP 15
4854: PPUSH
4855: LD_STRING DK-Obj-8
4857: PPUSH
4858: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4862: LD_EXP 21
4866: PPUSH
4867: LD_STRING DL-Obj-9
4869: PPUSH
4870: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4874: LD_EXP 21
4878: PPUSH
4879: LD_STRING DL-Obj-10
4881: PPUSH
4882: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4886: LD_EXP 21
4890: PPUSH
4891: LD_STRING DL-Obj-11
4893: PPUSH
4894: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4898: LD_EXP 21
4902: PPUSH
4903: LD_STRING DL-Obj-12
4905: PPUSH
4906: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4910: LD_EXP 21
4914: PPUSH
4915: LD_STRING DL-Obj-13
4917: PPUSH
4918: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4922: LD_EXP 19
4926: PPUSH
4927: CALL_OW 302
4931: IFFALSE 4969
// begin Say ( Kurt , DKs-Obj-14 ) ;
4933: LD_EXP 19
4937: PPUSH
4938: LD_STRING DKs-Obj-14
4940: PPUSH
4941: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4945: LD_EXP 19
4949: PPUSH
4950: LD_STRING DKs-Obj-15
4952: PPUSH
4953: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4957: LD_EXP 11
4961: PPUSH
4962: LD_STRING DG-Obj-16
4964: PPUSH
4965: CALL_OW 88
// end ; DialogueOff ;
4969: CALL_OW 7
// SetSide ( Basim , 2 ) ;
4973: LD_EXP 22
4977: PPUSH
4978: LD_INT 2
4980: PPUSH
4981: CALL_OW 235
// wait ( 0 0$3 ) ;
4985: LD_INT 105
4987: PPUSH
4988: CALL_OW 67
// ComExit ( Givi ) ;
4992: LD_EXP 11
4996: PPUSH
4997: CALL 44116 0 1
// ComExit ( Nia ) ;
5001: LD_EXP 25
5005: PPUSH
5006: CALL 44116 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5010: LD_EXP 25
5014: PPUSH
5015: LD_EXP 11
5019: PPUSH
5020: CALL_OW 172
// wait ( 0 0$1 ) ;
5024: LD_INT 35
5026: PPUSH
5027: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5031: LD_EXP 11
5035: PPUSH
5036: CALL_OW 302
5040: PUSH
5041: LD_EXP 25
5045: PPUSH
5046: CALL_OW 302
5050: AND
5051: IFFALSE 5325
// begin DialogueOn ;
5053: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5057: LD_EXP 11
5061: PPUSH
5062: LD_STRING DG-Nia-1
5064: PPUSH
5065: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5069: LD_EXP 10
5073: PPUSH
5074: LD_STRING DH-Nia-2
5076: PPUSH
5077: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5081: LD_EXP 11
5085: PPUSH
5086: LD_STRING DG-Nia-3
5088: PPUSH
5089: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5093: LD_EXP 25
5097: PPUSH
5098: LD_STRING DN-Nia-4
5100: PPUSH
5101: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5105: LD_EXP 10
5109: PPUSH
5110: LD_STRING DH-Nia-5
5112: PPUSH
5113: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5117: LD_EXP 11
5121: PPUSH
5122: LD_STRING DG-Nia-6
5124: PPUSH
5125: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5129: LD_EXP 25
5133: PPUSH
5134: LD_STRING DN-Nia-7
5136: PPUSH
5137: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5141: LD_EXP 25
5145: PPUSH
5146: LD_STRING DN-Nia-8
5148: PPUSH
5149: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5153: LD_EXP 25
5157: PPUSH
5158: LD_STRING DN-Nia-9
5160: PPUSH
5161: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5165: LD_EXP 25
5169: PPUSH
5170: LD_STRING DN-Nia-10
5172: PPUSH
5173: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5177: LD_EXP 11
5181: PPUSH
5182: LD_STRING DG-Nia-11
5184: PPUSH
5185: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5189: LD_EXP 25
5193: PPUSH
5194: LD_STRING DN-Nia-12
5196: PPUSH
5197: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5201: LD_EXP 10
5205: PPUSH
5206: LD_STRING DH-Nia-13
5208: PPUSH
5209: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5213: LD_EXP 25
5217: PPUSH
5218: LD_STRING DN-Nia-14
5220: PPUSH
5221: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5225: LD_EXP 10
5229: PPUSH
5230: LD_STRING DH-Nia-15
5232: PPUSH
5233: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5237: LD_EXP 21
5241: PPUSH
5242: LD_STRING DL-Nia-16
5244: PPUSH
5245: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5249: LD_EXP 10
5253: PPUSH
5254: LD_STRING DH-Nia-17
5256: PPUSH
5257: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5261: LD_EXP 10
5265: PPUSH
5266: LD_STRING DH-Nia-18
5268: PPUSH
5269: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5273: LD_EXP 13
5277: PPUSH
5278: LD_STRING DI-Nia-19
5280: PPUSH
5281: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5285: LD_EXP 21
5289: PPUSH
5290: LD_STRING DL-Nia-20
5292: PPUSH
5293: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5297: LD_EXP 21
5301: PPUSH
5302: LD_STRING DL-Nia-21
5304: PPUSH
5305: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5309: LD_EXP 21
5313: PPUSH
5314: LD_STRING DL-Nia-22
5316: PPUSH
5317: CALL_OW 88
// DialogueOff ;
5321: CALL_OW 7
// end ; DialogueOn ;
5325: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5329: LD_EXP 21
5333: PPUSH
5334: LD_STRING DL-Retreat-1
5336: PPUSH
5337: CALL_OW 88
// DialogueOff ;
5341: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5345: LD_STRING M5
5347: PPUSH
5348: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5352: LD_INT 13
5354: PPUSH
5355: LD_INT 1
5357: PPUSH
5358: CALL_OW 424
// startRussianAttacks := true ;
5362: LD_ADDR_EXP 9
5366: PUSH
5367: LD_INT 1
5369: ST_TO_ADDR
// end ;
5370: LD_VAR 0 1
5374: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5375: LD_EXP 9
5379: PUSH
5380: LD_INT 13
5382: PPUSH
5383: LD_INT 22
5385: PUSH
5386: LD_INT 2
5388: PUSH
5389: EMPTY
5390: LIST
5391: LIST
5392: PUSH
5393: LD_INT 50
5395: PUSH
5396: EMPTY
5397: LIST
5398: PUSH
5399: LD_INT 21
5401: PUSH
5402: LD_INT 1
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: EMPTY
5410: LIST
5411: LIST
5412: LIST
5413: PPUSH
5414: CALL_OW 71
5418: NOT
5419: AND
5420: IFFALSE 5429
5422: GO 5424
5424: DISABLE
// EndMission ;
5425: CALL 5430 0 0
5429: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5430: LD_INT 0
5432: PPUSH
5433: PPUSH
5434: PPUSH
5435: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5436: LD_ADDR_VAR 0 3
5440: PUSH
5441: LD_INT 13
5443: PPUSH
5444: LD_INT 22
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: LD_INT 21
5456: PUSH
5457: LD_INT 2
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 70
5472: ST_TO_ADDR
// saveVehicles := [ ] ;
5473: LD_ADDR_VAR 0 4
5477: PUSH
5478: EMPTY
5479: ST_TO_ADDR
// for i in tmp do
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: LD_VAR 0 3
5489: PUSH
5490: FOR_IN
5491: IFFALSE 5600
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5493: LD_ADDR_VAR 0 4
5497: PUSH
5498: LD_VAR 0 4
5502: PPUSH
5503: LD_VAR 0 2
5507: PPUSH
5508: CALL_OW 265
5512: PUSH
5513: LD_VAR 0 2
5517: PPUSH
5518: CALL_OW 262
5522: PUSH
5523: LD_VAR 0 2
5527: PPUSH
5528: CALL_OW 263
5532: PUSH
5533: LD_VAR 0 2
5537: PPUSH
5538: CALL_OW 264
5542: PUSH
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 248
5552: PUSH
5553: LD_VAR 0 2
5557: PPUSH
5558: CALL_OW 261
5562: PUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: CALL_OW 271
5572: PUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 311
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: PPUSH
5593: CALL 43718 0 2
5597: ST_TO_ADDR
5598: GO 5490
5600: POP
5601: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5602: LD_EXP 21
5606: PPUSH
5607: LD_STRING 09c_Schulz
5609: PPUSH
5610: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5614: LD_EXP 21
5618: PPUSH
5619: LD_STRING 09c_Schulz_ID
5621: PPUSH
5622: CALL_OW 39
// if IsOk ( Lemmy ) then
5626: LD_EXP 23
5630: PPUSH
5631: CALL_OW 302
5635: IFFALSE 5661
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5637: LD_EXP 23
5641: PPUSH
5642: LD_STRING 09c_Lemmy
5644: PPUSH
5645: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5649: LD_EXP 23
5653: PPUSH
5654: LD_STRING 09c_Lemmy_ID
5656: PPUSH
5657: CALL_OW 39
// end ; if IsOk ( Nia ) then
5661: LD_EXP 25
5665: PPUSH
5666: CALL_OW 302
5670: IFFALSE 5696
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5672: LD_EXP 25
5676: PPUSH
5677: LD_STRING 09c_Nia
5679: PPUSH
5680: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5684: LD_EXP 25
5688: PPUSH
5689: LD_STRING 09c_Nia_ID
5691: PPUSH
5692: CALL_OW 39
// end ; if IsOk ( Mia ) then
5696: LD_EXP 24
5700: PPUSH
5701: CALL_OW 302
5705: IFFALSE 5731
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5707: LD_EXP 24
5711: PPUSH
5712: LD_STRING 09c_Mia
5714: PPUSH
5715: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5719: LD_EXP 24
5723: PPUSH
5724: LD_STRING 09c_Mia_ID
5726: PPUSH
5727: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5731: LD_EXP 26
5735: PPUSH
5736: CALL_OW 302
5740: IFFALSE 5766
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5742: LD_EXP 26
5746: PPUSH
5747: LD_STRING 09c_Jenna
5749: PPUSH
5750: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5754: LD_EXP 26
5758: PPUSH
5759: LD_STRING 09c_Jenna_ID
5761: PPUSH
5762: CALL_OW 39
// end ; if IsOk ( Basim ) then
5766: LD_EXP 22
5770: PPUSH
5771: CALL_OW 302
5775: IFFALSE 5801
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5777: LD_EXP 22
5781: PPUSH
5782: LD_STRING 09c_Basim
5784: PPUSH
5785: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5789: LD_EXP 22
5793: PPUSH
5794: LD_STRING 09c_Basim_ID
5796: PPUSH
5797: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5801: LD_EXP 10
5805: PPUSH
5806: LD_STRING 09c_Heike
5808: PPUSH
5809: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5813: LD_EXP 10
5817: PPUSH
5818: LD_STRING 09c_Heike_ID
5820: PPUSH
5821: CALL_OW 39
// if IsOk ( Givi ) then
5825: LD_EXP 11
5829: PPUSH
5830: CALL_OW 302
5834: IFFALSE 5860
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5836: LD_EXP 11
5840: PPUSH
5841: LD_STRING 09c_Givi
5843: PPUSH
5844: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5848: LD_EXP 11
5852: PPUSH
5853: LD_STRING 09c_Givi_ID
5855: PPUSH
5856: CALL_OW 39
// end ; if IsOk ( Mike ) then
5860: LD_EXP 12
5864: PPUSH
5865: CALL_OW 302
5869: IFFALSE 5895
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5871: LD_EXP 12
5875: PPUSH
5876: LD_STRING 09c_Mike
5878: PPUSH
5879: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5883: LD_EXP 12
5887: PPUSH
5888: LD_STRING 09c_Mike_ID
5890: PPUSH
5891: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5895: LD_EXP 13
5899: PPUSH
5900: CALL_OW 302
5904: IFFALSE 5930
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5906: LD_EXP 13
5910: PPUSH
5911: LD_STRING 09c_Ibrahim
5913: PPUSH
5914: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5918: LD_EXP 13
5922: PPUSH
5923: LD_STRING 09c_Ibrahim_ID
5925: PPUSH
5926: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5930: LD_EXP 14
5934: PPUSH
5935: CALL_OW 302
5939: IFFALSE 5965
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5941: LD_EXP 14
5945: PPUSH
5946: LD_STRING 09c_Kamil
5948: PPUSH
5949: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5953: LD_EXP 14
5957: PPUSH
5958: LD_STRING 09c_Kamil_ID
5960: PPUSH
5961: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5965: LD_EXP 15
5969: PPUSH
5970: CALL_OW 302
5974: IFFALSE 6000
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5976: LD_EXP 15
5980: PPUSH
5981: LD_STRING 09c_Kaia
5983: PPUSH
5984: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
5988: LD_EXP 15
5992: PPUSH
5993: LD_STRING 09c_Kaia_ID
5995: PPUSH
5996: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6000: LD_EXP 16
6004: PPUSH
6005: CALL_OW 302
6009: IFFALSE 6035
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6011: LD_EXP 16
6015: PPUSH
6016: LD_STRING 09c_Sophia
6018: PPUSH
6019: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6023: LD_EXP 16
6027: PPUSH
6028: LD_STRING 09c_Sophia_ID
6030: PPUSH
6031: CALL_OW 39
// end ; if IsOk ( Markov ) then
6035: LD_EXP 17
6039: PPUSH
6040: CALL_OW 302
6044: IFFALSE 6070
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6046: LD_EXP 17
6050: PPUSH
6051: LD_STRING 09c_Markov
6053: PPUSH
6054: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6058: LD_EXP 17
6062: PPUSH
6063: LD_STRING 09c_Markov_ID
6065: PPUSH
6066: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6070: LD_EXP 18
6074: PPUSH
6075: CALL_OW 302
6079: IFFALSE 6105
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6081: LD_EXP 18
6085: PPUSH
6086: LD_STRING 09c_Olaf
6088: PPUSH
6089: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6093: LD_EXP 18
6097: PPUSH
6098: LD_STRING 09c_Olaf_ID
6100: PPUSH
6101: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6105: LD_EXP 19
6109: PPUSH
6110: CALL_OW 302
6114: IFFALSE 6140
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6116: LD_EXP 19
6120: PPUSH
6121: LD_STRING 09c_Kurt
6123: PPUSH
6124: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6128: LD_EXP 19
6132: PPUSH
6133: LD_STRING 09c_Kurt_ID
6135: PPUSH
6136: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6140: LD_EXP 20
6144: PPUSH
6145: CALL_OW 302
6149: IFFALSE 6175
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6151: LD_EXP 20
6155: PPUSH
6156: LD_STRING 09c_Aviradze
6158: PPUSH
6159: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6163: LD_EXP 20
6167: PPUSH
6168: LD_STRING 09c_Aviradze_ID
6170: PPUSH
6171: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6175: LD_EXP 28
6179: PPUSH
6180: LD_INT 50
6182: PUSH
6183: EMPTY
6184: LIST
6185: PPUSH
6186: CALL_OW 72
6190: PPUSH
6191: LD_STRING 09c_schulzSecondSquad
6193: PPUSH
6194: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6198: LD_EXP 27
6202: PPUSH
6203: LD_INT 50
6205: PUSH
6206: EMPTY
6207: LIST
6208: PPUSH
6209: CALL_OW 72
6213: PPUSH
6214: LD_STRING 09c_heikeSecondSquad
6216: PPUSH
6217: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6221: LD_ADDR_VAR 0 2
6225: PUSH
6226: DOUBLE
6227: LD_INT 1
6229: DEC
6230: ST_TO_ADDR
6231: LD_EXP 28
6235: PPUSH
6236: LD_INT 50
6238: PUSH
6239: EMPTY
6240: LIST
6241: PPUSH
6242: CALL_OW 72
6246: PUSH
6247: FOR_TO
6248: IFFALSE 6276
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6250: LD_EXP 28
6254: PUSH
6255: LD_VAR 0 2
6259: ARRAY
6260: PPUSH
6261: LD_STRING 09c_random_ID_
6263: PUSH
6264: LD_VAR 0 2
6268: STR
6269: PPUSH
6270: CALL_OW 39
6274: GO 6247
6276: POP
6277: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6278: LD_ADDR_VAR 0 2
6282: PUSH
6283: DOUBLE
6284: LD_INT 1
6286: DEC
6287: ST_TO_ADDR
6288: LD_EXP 27
6292: PPUSH
6293: LD_INT 50
6295: PUSH
6296: EMPTY
6297: LIST
6298: PPUSH
6299: CALL_OW 72
6303: PUSH
6304: FOR_TO
6305: IFFALSE 6333
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6307: LD_EXP 27
6311: PUSH
6312: LD_VAR 0 2
6316: ARRAY
6317: PPUSH
6318: LD_STRING 09c_hrandom_ID_
6320: PUSH
6321: LD_VAR 0 2
6325: STR
6326: PPUSH
6327: CALL_OW 39
6331: GO 6304
6333: POP
6334: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_STRING 09c_vehicles
6342: PPUSH
6343: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6347: LD_OWVAR 1
6351: PPUSH
6352: LD_STRING 09c_tick
6354: PPUSH
6355: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6359: LD_INT 22
6361: PUSH
6362: LD_INT 2
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: LD_INT 23
6371: PUSH
6372: LD_INT 0
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: PPUSH
6383: CALL_OW 69
6387: PPUSH
6388: LD_STRING 09c_apes
6390: PPUSH
6391: CALL_OW 38
// wait ( 3 ) ;
6395: LD_INT 3
6397: PPUSH
6398: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6402: LD_INT 1
6404: PPUSH
6405: LD_STRING __x1/09_cont3
6407: PPUSH
6408: CALL_OW 340
// end ; end_of_file
6412: LD_VAR 0 1
6416: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6417: LD_INT 0
6419: PPUSH
6420: PPUSH
// if exist_mode then
6421: LD_VAR 0 2
6425: IFFALSE 6450
// unit := CreateCharacter ( prefix & ident ) else
6427: LD_ADDR_VAR 0 5
6431: PUSH
6432: LD_VAR 0 3
6436: PUSH
6437: LD_VAR 0 1
6441: STR
6442: PPUSH
6443: CALL_OW 34
6447: ST_TO_ADDR
6448: GO 6465
// unit := NewCharacter ( ident ) ;
6450: LD_ADDR_VAR 0 5
6454: PUSH
6455: LD_VAR 0 1
6459: PPUSH
6460: CALL_OW 25
6464: ST_TO_ADDR
// result := unit ;
6465: LD_ADDR_VAR 0 4
6469: PUSH
6470: LD_VAR 0 5
6474: ST_TO_ADDR
// end ;
6475: LD_VAR 0 4
6479: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6480: LD_INT 0
6482: PPUSH
6483: PPUSH
// if not side or not nation then
6484: LD_VAR 0 1
6488: NOT
6489: PUSH
6490: LD_VAR 0 2
6494: NOT
6495: OR
6496: IFFALSE 6500
// exit ;
6498: GO 7268
// case nation of nation_american :
6500: LD_VAR 0 2
6504: PUSH
6505: LD_INT 1
6507: DOUBLE
6508: EQUAL
6509: IFTRUE 6513
6511: GO 6727
6513: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6514: LD_ADDR_VAR 0 4
6518: PUSH
6519: LD_INT 35
6521: PUSH
6522: LD_INT 45
6524: PUSH
6525: LD_INT 46
6527: PUSH
6528: LD_INT 47
6530: PUSH
6531: LD_INT 82
6533: PUSH
6534: LD_INT 83
6536: PUSH
6537: LD_INT 84
6539: PUSH
6540: LD_INT 85
6542: PUSH
6543: LD_INT 86
6545: PUSH
6546: LD_INT 1
6548: PUSH
6549: LD_INT 2
6551: PUSH
6552: LD_INT 6
6554: PUSH
6555: LD_INT 15
6557: PUSH
6558: LD_INT 16
6560: PUSH
6561: LD_INT 7
6563: PUSH
6564: LD_INT 12
6566: PUSH
6567: LD_INT 13
6569: PUSH
6570: LD_INT 10
6572: PUSH
6573: LD_INT 14
6575: PUSH
6576: LD_INT 20
6578: PUSH
6579: LD_INT 21
6581: PUSH
6582: LD_INT 22
6584: PUSH
6585: LD_INT 25
6587: PUSH
6588: LD_INT 32
6590: PUSH
6591: LD_INT 27
6593: PUSH
6594: LD_INT 36
6596: PUSH
6597: LD_INT 69
6599: PUSH
6600: LD_INT 39
6602: PUSH
6603: LD_INT 34
6605: PUSH
6606: LD_INT 40
6608: PUSH
6609: LD_INT 48
6611: PUSH
6612: LD_INT 49
6614: PUSH
6615: LD_INT 50
6617: PUSH
6618: LD_INT 51
6620: PUSH
6621: LD_INT 52
6623: PUSH
6624: LD_INT 53
6626: PUSH
6627: LD_INT 54
6629: PUSH
6630: LD_INT 55
6632: PUSH
6633: LD_INT 56
6635: PUSH
6636: LD_INT 57
6638: PUSH
6639: LD_INT 58
6641: PUSH
6642: LD_INT 59
6644: PUSH
6645: LD_INT 60
6647: PUSH
6648: LD_INT 61
6650: PUSH
6651: LD_INT 62
6653: PUSH
6654: LD_INT 80
6656: PUSH
6657: LD_INT 82
6659: PUSH
6660: LD_INT 83
6662: PUSH
6663: LD_INT 84
6665: PUSH
6666: LD_INT 85
6668: PUSH
6669: LD_INT 86
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: ST_TO_ADDR
6725: GO 7192
6727: LD_INT 2
6729: DOUBLE
6730: EQUAL
6731: IFTRUE 6735
6733: GO 6961
6735: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6736: LD_ADDR_VAR 0 4
6740: PUSH
6741: LD_INT 35
6743: PUSH
6744: LD_INT 45
6746: PUSH
6747: LD_INT 46
6749: PUSH
6750: LD_INT 47
6752: PUSH
6753: LD_INT 82
6755: PUSH
6756: LD_INT 83
6758: PUSH
6759: LD_INT 84
6761: PUSH
6762: LD_INT 85
6764: PUSH
6765: LD_INT 87
6767: PUSH
6768: LD_INT 70
6770: PUSH
6771: LD_INT 1
6773: PUSH
6774: LD_INT 11
6776: PUSH
6777: LD_INT 3
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: LD_INT 5
6785: PUSH
6786: LD_INT 6
6788: PUSH
6789: LD_INT 15
6791: PUSH
6792: LD_INT 18
6794: PUSH
6795: LD_INT 7
6797: PUSH
6798: LD_INT 17
6800: PUSH
6801: LD_INT 8
6803: PUSH
6804: LD_INT 20
6806: PUSH
6807: LD_INT 21
6809: PUSH
6810: LD_INT 22
6812: PUSH
6813: LD_INT 72
6815: PUSH
6816: LD_INT 26
6818: PUSH
6819: LD_INT 69
6821: PUSH
6822: LD_INT 39
6824: PUSH
6825: LD_INT 40
6827: PUSH
6828: LD_INT 41
6830: PUSH
6831: LD_INT 42
6833: PUSH
6834: LD_INT 43
6836: PUSH
6837: LD_INT 48
6839: PUSH
6840: LD_INT 49
6842: PUSH
6843: LD_INT 50
6845: PUSH
6846: LD_INT 51
6848: PUSH
6849: LD_INT 52
6851: PUSH
6852: LD_INT 53
6854: PUSH
6855: LD_INT 54
6857: PUSH
6858: LD_INT 55
6860: PUSH
6861: LD_INT 56
6863: PUSH
6864: LD_INT 60
6866: PUSH
6867: LD_INT 61
6869: PUSH
6870: LD_INT 62
6872: PUSH
6873: LD_INT 66
6875: PUSH
6876: LD_INT 67
6878: PUSH
6879: LD_INT 68
6881: PUSH
6882: LD_INT 81
6884: PUSH
6885: LD_INT 82
6887: PUSH
6888: LD_INT 83
6890: PUSH
6891: LD_INT 84
6893: PUSH
6894: LD_INT 85
6896: PUSH
6897: LD_INT 87
6899: PUSH
6900: LD_INT 88
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: ST_TO_ADDR
6959: GO 7192
6961: LD_INT 3
6963: DOUBLE
6964: EQUAL
6965: IFTRUE 6969
6967: GO 7191
6969: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6970: LD_ADDR_VAR 0 4
6974: PUSH
6975: LD_INT 46
6977: PUSH
6978: LD_INT 47
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: LD_INT 2
6986: PUSH
6987: LD_INT 82
6989: PUSH
6990: LD_INT 83
6992: PUSH
6993: LD_INT 84
6995: PUSH
6996: LD_INT 85
6998: PUSH
6999: LD_INT 86
7001: PUSH
7002: LD_INT 11
7004: PUSH
7005: LD_INT 9
7007: PUSH
7008: LD_INT 20
7010: PUSH
7011: LD_INT 19
7013: PUSH
7014: LD_INT 21
7016: PUSH
7017: LD_INT 24
7019: PUSH
7020: LD_INT 22
7022: PUSH
7023: LD_INT 25
7025: PUSH
7026: LD_INT 28
7028: PUSH
7029: LD_INT 29
7031: PUSH
7032: LD_INT 30
7034: PUSH
7035: LD_INT 31
7037: PUSH
7038: LD_INT 37
7040: PUSH
7041: LD_INT 38
7043: PUSH
7044: LD_INT 32
7046: PUSH
7047: LD_INT 27
7049: PUSH
7050: LD_INT 33
7052: PUSH
7053: LD_INT 69
7055: PUSH
7056: LD_INT 39
7058: PUSH
7059: LD_INT 34
7061: PUSH
7062: LD_INT 40
7064: PUSH
7065: LD_INT 71
7067: PUSH
7068: LD_INT 23
7070: PUSH
7071: LD_INT 44
7073: PUSH
7074: LD_INT 48
7076: PUSH
7077: LD_INT 49
7079: PUSH
7080: LD_INT 50
7082: PUSH
7083: LD_INT 51
7085: PUSH
7086: LD_INT 52
7088: PUSH
7089: LD_INT 53
7091: PUSH
7092: LD_INT 54
7094: PUSH
7095: LD_INT 55
7097: PUSH
7098: LD_INT 56
7100: PUSH
7101: LD_INT 57
7103: PUSH
7104: LD_INT 58
7106: PUSH
7107: LD_INT 59
7109: PUSH
7110: LD_INT 63
7112: PUSH
7113: LD_INT 64
7115: PUSH
7116: LD_INT 65
7118: PUSH
7119: LD_INT 82
7121: PUSH
7122: LD_INT 83
7124: PUSH
7125: LD_INT 84
7127: PUSH
7128: LD_INT 85
7130: PUSH
7131: LD_INT 86
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: ST_TO_ADDR
7189: GO 7192
7191: POP
// if state > - 1 and state < 3 then
7192: LD_VAR 0 3
7196: PUSH
7197: LD_INT 1
7199: NEG
7200: GREATER
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 3
7209: LESS
7210: AND
7211: IFFALSE 7268
// for i in result do
7213: LD_ADDR_VAR 0 5
7217: PUSH
7218: LD_VAR 0 4
7222: PUSH
7223: FOR_IN
7224: IFFALSE 7266
// if GetTech ( i , side ) <> state then
7226: LD_VAR 0 5
7230: PPUSH
7231: LD_VAR 0 1
7235: PPUSH
7236: CALL_OW 321
7240: PUSH
7241: LD_VAR 0 3
7245: NONEQUAL
7246: IFFALSE 7264
// result := result diff i ;
7248: LD_ADDR_VAR 0 4
7252: PUSH
7253: LD_VAR 0 4
7257: PUSH
7258: LD_VAR 0 5
7262: DIFF
7263: ST_TO_ADDR
7264: GO 7223
7266: POP
7267: POP
// end ;
7268: LD_VAR 0 4
7272: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7273: LD_INT 0
7275: PPUSH
7276: PPUSH
7277: PPUSH
// result := true ;
7278: LD_ADDR_VAR 0 3
7282: PUSH
7283: LD_INT 1
7285: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7286: LD_ADDR_VAR 0 5
7290: PUSH
7291: LD_VAR 0 2
7295: PPUSH
7296: CALL_OW 480
7300: ST_TO_ADDR
// if not tmp then
7301: LD_VAR 0 5
7305: NOT
7306: IFFALSE 7310
// exit ;
7308: GO 7359
// for i in tmp do
7310: LD_ADDR_VAR 0 4
7314: PUSH
7315: LD_VAR 0 5
7319: PUSH
7320: FOR_IN
7321: IFFALSE 7357
// if GetTech ( i , side ) <> state_researched then
7323: LD_VAR 0 4
7327: PPUSH
7328: LD_VAR 0 1
7332: PPUSH
7333: CALL_OW 321
7337: PUSH
7338: LD_INT 2
7340: NONEQUAL
7341: IFFALSE 7355
// begin result := false ;
7343: LD_ADDR_VAR 0 3
7347: PUSH
7348: LD_INT 0
7350: ST_TO_ADDR
// exit ;
7351: POP
7352: POP
7353: GO 7359
// end ;
7355: GO 7320
7357: POP
7358: POP
// end ;
7359: LD_VAR 0 3
7363: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7364: LD_INT 0
7366: PPUSH
7367: PPUSH
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
7378: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7379: LD_VAR 0 1
7383: NOT
7384: PUSH
7385: LD_VAR 0 1
7389: PPUSH
7390: CALL_OW 257
7394: PUSH
7395: LD_INT 9
7397: NONEQUAL
7398: OR
7399: IFFALSE 7403
// exit ;
7401: GO 7976
// side := GetSide ( unit ) ;
7403: LD_ADDR_VAR 0 9
7407: PUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 255
7417: ST_TO_ADDR
// tech_space := tech_spacanom ;
7418: LD_ADDR_VAR 0 12
7422: PUSH
7423: LD_INT 29
7425: ST_TO_ADDR
// tech_time := tech_taurad ;
7426: LD_ADDR_VAR 0 13
7430: PUSH
7431: LD_INT 28
7433: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7434: LD_ADDR_VAR 0 11
7438: PUSH
7439: LD_VAR 0 1
7443: PPUSH
7444: CALL_OW 310
7448: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7449: LD_VAR 0 11
7453: PPUSH
7454: CALL_OW 247
7458: PUSH
7459: LD_INT 2
7461: EQUAL
7462: IFFALSE 7466
// exit ;
7464: GO 7976
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7466: LD_ADDR_VAR 0 8
7470: PUSH
7471: LD_INT 81
7473: PUSH
7474: LD_VAR 0 9
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: LD_INT 21
7488: PUSH
7489: LD_INT 3
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 69
7508: ST_TO_ADDR
// if not tmp then
7509: LD_VAR 0 8
7513: NOT
7514: IFFALSE 7518
// exit ;
7516: GO 7976
// if in_unit then
7518: LD_VAR 0 11
7522: IFFALSE 7546
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7524: LD_ADDR_VAR 0 10
7528: PUSH
7529: LD_VAR 0 8
7533: PPUSH
7534: LD_VAR 0 11
7538: PPUSH
7539: CALL_OW 74
7543: ST_TO_ADDR
7544: GO 7566
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7546: LD_ADDR_VAR 0 10
7550: PUSH
7551: LD_VAR 0 8
7555: PPUSH
7556: LD_VAR 0 1
7560: PPUSH
7561: CALL_OW 74
7565: ST_TO_ADDR
// if not enemy then
7566: LD_VAR 0 10
7570: NOT
7571: IFFALSE 7575
// exit ;
7573: GO 7976
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7575: LD_VAR 0 11
7579: PUSH
7580: LD_VAR 0 11
7584: PPUSH
7585: LD_VAR 0 10
7589: PPUSH
7590: CALL_OW 296
7594: PUSH
7595: LD_INT 13
7597: GREATER
7598: AND
7599: PUSH
7600: LD_VAR 0 1
7604: PPUSH
7605: LD_VAR 0 10
7609: PPUSH
7610: CALL_OW 296
7614: PUSH
7615: LD_INT 12
7617: GREATER
7618: OR
7619: IFFALSE 7623
// exit ;
7621: GO 7976
// missile := [ 1 ] ;
7623: LD_ADDR_VAR 0 14
7627: PUSH
7628: LD_INT 1
7630: PUSH
7631: EMPTY
7632: LIST
7633: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7634: LD_VAR 0 9
7638: PPUSH
7639: LD_VAR 0 12
7643: PPUSH
7644: CALL_OW 325
7648: IFFALSE 7677
// missile := Replace ( missile , missile + 1 , 2 ) ;
7650: LD_ADDR_VAR 0 14
7654: PUSH
7655: LD_VAR 0 14
7659: PPUSH
7660: LD_VAR 0 14
7664: PUSH
7665: LD_INT 1
7667: PLUS
7668: PPUSH
7669: LD_INT 2
7671: PPUSH
7672: CALL_OW 1
7676: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7677: LD_VAR 0 9
7681: PPUSH
7682: LD_VAR 0 13
7686: PPUSH
7687: CALL_OW 325
7691: PUSH
7692: LD_VAR 0 10
7696: PPUSH
7697: CALL_OW 255
7701: PPUSH
7702: LD_VAR 0 13
7706: PPUSH
7707: CALL_OW 325
7711: NOT
7712: AND
7713: IFFALSE 7742
// missile := Replace ( missile , missile + 1 , 3 ) ;
7715: LD_ADDR_VAR 0 14
7719: PUSH
7720: LD_VAR 0 14
7724: PPUSH
7725: LD_VAR 0 14
7729: PUSH
7730: LD_INT 1
7732: PLUS
7733: PPUSH
7734: LD_INT 3
7736: PPUSH
7737: CALL_OW 1
7741: ST_TO_ADDR
// if missile < 2 then
7742: LD_VAR 0 14
7746: PUSH
7747: LD_INT 2
7749: LESS
7750: IFFALSE 7754
// exit ;
7752: GO 7976
// x := GetX ( enemy ) ;
7754: LD_ADDR_VAR 0 4
7758: PUSH
7759: LD_VAR 0 10
7763: PPUSH
7764: CALL_OW 250
7768: ST_TO_ADDR
// y := GetY ( enemy ) ;
7769: LD_ADDR_VAR 0 5
7773: PUSH
7774: LD_VAR 0 10
7778: PPUSH
7779: CALL_OW 251
7783: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7784: LD_ADDR_VAR 0 6
7788: PUSH
7789: LD_VAR 0 4
7793: PUSH
7794: LD_INT 1
7796: NEG
7797: PPUSH
7798: LD_INT 1
7800: PPUSH
7801: CALL_OW 12
7805: PLUS
7806: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7807: LD_ADDR_VAR 0 7
7811: PUSH
7812: LD_VAR 0 5
7816: PUSH
7817: LD_INT 1
7819: NEG
7820: PPUSH
7821: LD_INT 1
7823: PPUSH
7824: CALL_OW 12
7828: PLUS
7829: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7830: LD_VAR 0 6
7834: PPUSH
7835: LD_VAR 0 7
7839: PPUSH
7840: CALL_OW 488
7844: NOT
7845: IFFALSE 7867
// begin _x := x ;
7847: LD_ADDR_VAR 0 6
7851: PUSH
7852: LD_VAR 0 4
7856: ST_TO_ADDR
// _y := y ;
7857: LD_ADDR_VAR 0 7
7861: PUSH
7862: LD_VAR 0 5
7866: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7867: LD_ADDR_VAR 0 3
7871: PUSH
7872: LD_INT 1
7874: PPUSH
7875: LD_VAR 0 14
7879: PPUSH
7880: CALL_OW 12
7884: ST_TO_ADDR
// case i of 1 :
7885: LD_VAR 0 3
7889: PUSH
7890: LD_INT 1
7892: DOUBLE
7893: EQUAL
7894: IFTRUE 7898
7896: GO 7915
7898: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7899: LD_VAR 0 1
7903: PPUSH
7904: LD_VAR 0 10
7908: PPUSH
7909: CALL_OW 115
7913: GO 7976
7915: LD_INT 2
7917: DOUBLE
7918: EQUAL
7919: IFTRUE 7923
7921: GO 7945
7923: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7924: LD_VAR 0 1
7928: PPUSH
7929: LD_VAR 0 6
7933: PPUSH
7934: LD_VAR 0 7
7938: PPUSH
7939: CALL_OW 153
7943: GO 7976
7945: LD_INT 3
7947: DOUBLE
7948: EQUAL
7949: IFTRUE 7953
7951: GO 7975
7953: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7954: LD_VAR 0 1
7958: PPUSH
7959: LD_VAR 0 6
7963: PPUSH
7964: LD_VAR 0 7
7968: PPUSH
7969: CALL_OW 154
7973: GO 7976
7975: POP
// end ;
7976: LD_VAR 0 2
7980: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7981: LD_INT 0
7983: PPUSH
7984: PPUSH
7985: PPUSH
7986: PPUSH
7987: PPUSH
7988: PPUSH
// if not unit or not building then
7989: LD_VAR 0 1
7993: NOT
7994: PUSH
7995: LD_VAR 0 2
7999: NOT
8000: OR
8001: IFFALSE 8005
// exit ;
8003: GO 8163
// x := GetX ( building ) ;
8005: LD_ADDR_VAR 0 5
8009: PUSH
8010: LD_VAR 0 2
8014: PPUSH
8015: CALL_OW 250
8019: ST_TO_ADDR
// y := GetY ( building ) ;
8020: LD_ADDR_VAR 0 6
8024: PUSH
8025: LD_VAR 0 2
8029: PPUSH
8030: CALL_OW 251
8034: ST_TO_ADDR
// for i = 0 to 5 do
8035: LD_ADDR_VAR 0 4
8039: PUSH
8040: DOUBLE
8041: LD_INT 0
8043: DEC
8044: ST_TO_ADDR
8045: LD_INT 5
8047: PUSH
8048: FOR_TO
8049: IFFALSE 8161
// begin _x := ShiftX ( x , i , 3 ) ;
8051: LD_ADDR_VAR 0 7
8055: PUSH
8056: LD_VAR 0 5
8060: PPUSH
8061: LD_VAR 0 4
8065: PPUSH
8066: LD_INT 3
8068: PPUSH
8069: CALL_OW 272
8073: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8074: LD_ADDR_VAR 0 8
8078: PUSH
8079: LD_VAR 0 6
8083: PPUSH
8084: LD_VAR 0 4
8088: PPUSH
8089: LD_INT 3
8091: PPUSH
8092: CALL_OW 273
8096: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8097: LD_VAR 0 7
8101: PPUSH
8102: LD_VAR 0 8
8106: PPUSH
8107: CALL_OW 488
8111: NOT
8112: IFFALSE 8116
// continue ;
8114: GO 8048
// if HexInfo ( _x , _y ) = 0 then
8116: LD_VAR 0 7
8120: PPUSH
8121: LD_VAR 0 8
8125: PPUSH
8126: CALL_OW 428
8130: PUSH
8131: LD_INT 0
8133: EQUAL
8134: IFFALSE 8159
// begin ComMoveXY ( unit , _x , _y ) ;
8136: LD_VAR 0 1
8140: PPUSH
8141: LD_VAR 0 7
8145: PPUSH
8146: LD_VAR 0 8
8150: PPUSH
8151: CALL_OW 111
// exit ;
8155: POP
8156: POP
8157: GO 8163
// end ; end ;
8159: GO 8048
8161: POP
8162: POP
// end ;
8163: LD_VAR 0 3
8167: RET
// export function ScanBase ( side , base_area ) ; begin
8168: LD_INT 0
8170: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8171: LD_ADDR_VAR 0 3
8175: PUSH
8176: LD_VAR 0 2
8180: PPUSH
8181: LD_INT 81
8183: PUSH
8184: LD_VAR 0 1
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: PPUSH
8193: CALL_OW 70
8197: ST_TO_ADDR
// end ;
8198: LD_VAR 0 3
8202: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8203: LD_INT 0
8205: PPUSH
8206: PPUSH
8207: PPUSH
8208: PPUSH
// result := false ;
8209: LD_ADDR_VAR 0 2
8213: PUSH
8214: LD_INT 0
8216: ST_TO_ADDR
// side := GetSide ( unit ) ;
8217: LD_ADDR_VAR 0 3
8221: PUSH
8222: LD_VAR 0 1
8226: PPUSH
8227: CALL_OW 255
8231: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8232: LD_ADDR_VAR 0 4
8236: PUSH
8237: LD_VAR 0 1
8241: PPUSH
8242: CALL_OW 248
8246: ST_TO_ADDR
// case nat of 1 :
8247: LD_VAR 0 4
8251: PUSH
8252: LD_INT 1
8254: DOUBLE
8255: EQUAL
8256: IFTRUE 8260
8258: GO 8271
8260: POP
// tech := tech_lassight ; 2 :
8261: LD_ADDR_VAR 0 5
8265: PUSH
8266: LD_INT 12
8268: ST_TO_ADDR
8269: GO 8310
8271: LD_INT 2
8273: DOUBLE
8274: EQUAL
8275: IFTRUE 8279
8277: GO 8290
8279: POP
// tech := tech_mortar ; 3 :
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: LD_INT 41
8287: ST_TO_ADDR
8288: GO 8310
8290: LD_INT 3
8292: DOUBLE
8293: EQUAL
8294: IFTRUE 8298
8296: GO 8309
8298: POP
// tech := tech_bazooka ; end ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 44
8306: ST_TO_ADDR
8307: GO 8310
8309: POP
// if Researched ( side , tech ) then
8310: LD_VAR 0 3
8314: PPUSH
8315: LD_VAR 0 5
8319: PPUSH
8320: CALL_OW 325
8324: IFFALSE 8351
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8326: LD_ADDR_VAR 0 2
8330: PUSH
8331: LD_INT 5
8333: PUSH
8334: LD_INT 8
8336: PUSH
8337: LD_INT 9
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: PUSH
8345: LD_VAR 0 4
8349: ARRAY
8350: ST_TO_ADDR
// end ;
8351: LD_VAR 0 2
8355: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8356: LD_INT 0
8358: PPUSH
8359: PPUSH
8360: PPUSH
// if not mines then
8361: LD_VAR 0 2
8365: NOT
8366: IFFALSE 8370
// exit ;
8368: GO 8514
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8370: LD_ADDR_VAR 0 5
8374: PUSH
8375: LD_INT 81
8377: PUSH
8378: LD_VAR 0 1
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PUSH
8387: LD_INT 3
8389: PUSH
8390: LD_INT 21
8392: PUSH
8393: LD_INT 3
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// for i in mines do
8413: LD_ADDR_VAR 0 4
8417: PUSH
8418: LD_VAR 0 2
8422: PUSH
8423: FOR_IN
8424: IFFALSE 8512
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8426: LD_VAR 0 4
8430: PUSH
8431: LD_INT 1
8433: ARRAY
8434: PPUSH
8435: LD_VAR 0 4
8439: PUSH
8440: LD_INT 2
8442: ARRAY
8443: PPUSH
8444: CALL_OW 458
8448: NOT
8449: IFFALSE 8453
// continue ;
8451: GO 8423
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8453: LD_VAR 0 4
8457: PUSH
8458: LD_INT 1
8460: ARRAY
8461: PPUSH
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: ARRAY
8470: PPUSH
8471: CALL_OW 428
8475: PUSH
8476: LD_VAR 0 5
8480: IN
8481: IFFALSE 8510
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8483: LD_VAR 0 4
8487: PUSH
8488: LD_INT 1
8490: ARRAY
8491: PPUSH
8492: LD_VAR 0 4
8496: PUSH
8497: LD_INT 2
8499: ARRAY
8500: PPUSH
8501: LD_VAR 0 1
8505: PPUSH
8506: CALL_OW 456
// end ;
8510: GO 8423
8512: POP
8513: POP
// end ;
8514: LD_VAR 0 3
8518: RET
// export function Count ( array ) ; begin
8519: LD_INT 0
8521: PPUSH
// result := array + 0 ;
8522: LD_ADDR_VAR 0 2
8526: PUSH
8527: LD_VAR 0 1
8531: PUSH
8532: LD_INT 0
8534: PLUS
8535: ST_TO_ADDR
// end ;
8536: LD_VAR 0 2
8540: RET
// export function IsEmpty ( building ) ; begin
8541: LD_INT 0
8543: PPUSH
// if not building then
8544: LD_VAR 0 1
8548: NOT
8549: IFFALSE 8553
// exit ;
8551: GO 8596
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8553: LD_ADDR_VAR 0 2
8557: PUSH
8558: LD_VAR 0 1
8562: PUSH
8563: LD_INT 22
8565: PUSH
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL_OW 255
8575: PUSH
8576: EMPTY
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 58
8582: PUSH
8583: EMPTY
8584: LIST
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PPUSH
8590: CALL_OW 69
8594: IN
8595: ST_TO_ADDR
// end ;
8596: LD_VAR 0 2
8600: RET
// export function IsNotFull ( building ) ; var places ; begin
8601: LD_INT 0
8603: PPUSH
8604: PPUSH
// if not building then
8605: LD_VAR 0 1
8609: NOT
8610: IFFALSE 8614
// exit ;
8612: GO 8642
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
8614: LD_ADDR_VAR 0 2
8618: PUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: LD_INT 3
8626: PUSH
8627: LD_INT 62
8629: PUSH
8630: EMPTY
8631: LIST
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PPUSH
8637: CALL_OW 72
8641: ST_TO_ADDR
// end ;
8642: LD_VAR 0 2
8646: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8647: LD_INT 0
8649: PPUSH
8650: PPUSH
8651: PPUSH
8652: PPUSH
// tmp := [ ] ;
8653: LD_ADDR_VAR 0 3
8657: PUSH
8658: EMPTY
8659: ST_TO_ADDR
// list := [ ] ;
8660: LD_ADDR_VAR 0 5
8664: PUSH
8665: EMPTY
8666: ST_TO_ADDR
// for i = 16 to 25 do
8667: LD_ADDR_VAR 0 4
8671: PUSH
8672: DOUBLE
8673: LD_INT 16
8675: DEC
8676: ST_TO_ADDR
8677: LD_INT 25
8679: PUSH
8680: FOR_TO
8681: IFFALSE 8754
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8683: LD_ADDR_VAR 0 3
8687: PUSH
8688: LD_VAR 0 3
8692: PUSH
8693: LD_INT 22
8695: PUSH
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 255
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: LD_INT 91
8712: PUSH
8713: LD_VAR 0 1
8717: PUSH
8718: LD_INT 6
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 30
8728: PUSH
8729: LD_VAR 0 4
8733: PUSH
8734: EMPTY
8735: LIST
8736: LIST
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: PPUSH
8746: CALL_OW 69
8750: ADD
8751: ST_TO_ADDR
8752: GO 8680
8754: POP
8755: POP
// for i = 1 to tmp do
8756: LD_ADDR_VAR 0 4
8760: PUSH
8761: DOUBLE
8762: LD_INT 1
8764: DEC
8765: ST_TO_ADDR
8766: LD_VAR 0 3
8770: PUSH
8771: FOR_TO
8772: IFFALSE 8860
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8774: LD_ADDR_VAR 0 5
8778: PUSH
8779: LD_VAR 0 5
8783: PUSH
8784: LD_VAR 0 3
8788: PUSH
8789: LD_VAR 0 4
8793: ARRAY
8794: PPUSH
8795: CALL_OW 266
8799: PUSH
8800: LD_VAR 0 3
8804: PUSH
8805: LD_VAR 0 4
8809: ARRAY
8810: PPUSH
8811: CALL_OW 250
8815: PUSH
8816: LD_VAR 0 3
8820: PUSH
8821: LD_VAR 0 4
8825: ARRAY
8826: PPUSH
8827: CALL_OW 251
8831: PUSH
8832: LD_VAR 0 3
8836: PUSH
8837: LD_VAR 0 4
8841: ARRAY
8842: PPUSH
8843: CALL_OW 254
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: PUSH
8854: EMPTY
8855: LIST
8856: ADD
8857: ST_TO_ADDR
8858: GO 8771
8860: POP
8861: POP
// result := list ;
8862: LD_ADDR_VAR 0 2
8866: PUSH
8867: LD_VAR 0 5
8871: ST_TO_ADDR
// end ;
8872: LD_VAR 0 2
8876: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8877: LD_INT 0
8879: PPUSH
8880: PPUSH
8881: PPUSH
8882: PPUSH
8883: PPUSH
8884: PPUSH
8885: PPUSH
// if not factory then
8886: LD_VAR 0 1
8890: NOT
8891: IFFALSE 8895
// exit ;
8893: GO 9488
// if control = control_apeman then
8895: LD_VAR 0 4
8899: PUSH
8900: LD_INT 5
8902: EQUAL
8903: IFFALSE 9012
// begin tmp := UnitsInside ( factory ) ;
8905: LD_ADDR_VAR 0 8
8909: PUSH
8910: LD_VAR 0 1
8914: PPUSH
8915: CALL_OW 313
8919: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8920: LD_VAR 0 8
8924: PPUSH
8925: LD_INT 25
8927: PUSH
8928: LD_INT 12
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: NOT
8940: IFFALSE 8950
// control := control_manual ;
8942: LD_ADDR_VAR 0 4
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8950: LD_ADDR_VAR 0 8
8954: PUSH
8955: LD_VAR 0 1
8959: PPUSH
8960: CALL 8647 0 1
8964: ST_TO_ADDR
// if tmp then
8965: LD_VAR 0 8
8969: IFFALSE 9012
// begin for i in tmp do
8971: LD_ADDR_VAR 0 7
8975: PUSH
8976: LD_VAR 0 8
8980: PUSH
8981: FOR_IN
8982: IFFALSE 9010
// if i [ 1 ] = b_ext_radio then
8984: LD_VAR 0 7
8988: PUSH
8989: LD_INT 1
8991: ARRAY
8992: PUSH
8993: LD_INT 22
8995: EQUAL
8996: IFFALSE 9008
// begin control := control_remote ;
8998: LD_ADDR_VAR 0 4
9002: PUSH
9003: LD_INT 2
9005: ST_TO_ADDR
// break ;
9006: GO 9010
// end ;
9008: GO 8981
9010: POP
9011: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9012: LD_VAR 0 1
9016: PPUSH
9017: LD_VAR 0 2
9021: PPUSH
9022: LD_VAR 0 3
9026: PPUSH
9027: LD_VAR 0 4
9031: PPUSH
9032: LD_VAR 0 5
9036: PPUSH
9037: CALL_OW 448
9041: IFFALSE 9076
// begin result := [ chassis , engine , control , weapon ] ;
9043: LD_ADDR_VAR 0 6
9047: PUSH
9048: LD_VAR 0 2
9052: PUSH
9053: LD_VAR 0 3
9057: PUSH
9058: LD_VAR 0 4
9062: PUSH
9063: LD_VAR 0 5
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: ST_TO_ADDR
// exit ;
9074: GO 9488
// end ; _chassis := AvailableChassisList ( factory ) ;
9076: LD_ADDR_VAR 0 9
9080: PUSH
9081: LD_VAR 0 1
9085: PPUSH
9086: CALL_OW 475
9090: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9091: LD_ADDR_VAR 0 11
9095: PUSH
9096: LD_VAR 0 1
9100: PPUSH
9101: CALL_OW 476
9105: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9106: LD_ADDR_VAR 0 12
9110: PUSH
9111: LD_VAR 0 1
9115: PPUSH
9116: CALL_OW 477
9120: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9121: LD_ADDR_VAR 0 10
9125: PUSH
9126: LD_VAR 0 1
9130: PPUSH
9131: CALL_OW 478
9135: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9136: LD_VAR 0 9
9140: NOT
9141: PUSH
9142: LD_VAR 0 11
9146: NOT
9147: OR
9148: PUSH
9149: LD_VAR 0 12
9153: NOT
9154: OR
9155: PUSH
9156: LD_VAR 0 10
9160: NOT
9161: OR
9162: IFFALSE 9197
// begin result := [ chassis , engine , control , weapon ] ;
9164: LD_ADDR_VAR 0 6
9168: PUSH
9169: LD_VAR 0 2
9173: PUSH
9174: LD_VAR 0 3
9178: PUSH
9179: LD_VAR 0 4
9183: PUSH
9184: LD_VAR 0 5
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: ST_TO_ADDR
// exit ;
9195: GO 9488
// end ; if not chassis in _chassis then
9197: LD_VAR 0 2
9201: PUSH
9202: LD_VAR 0 9
9206: IN
9207: NOT
9208: IFFALSE 9234
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9210: LD_ADDR_VAR 0 2
9214: PUSH
9215: LD_VAR 0 9
9219: PUSH
9220: LD_INT 1
9222: PPUSH
9223: LD_VAR 0 9
9227: PPUSH
9228: CALL_OW 12
9232: ARRAY
9233: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9234: LD_VAR 0 2
9238: PPUSH
9239: LD_VAR 0 3
9243: PPUSH
9244: CALL 9493 0 2
9248: NOT
9249: IFFALSE 9308
// repeat engine := _engine [ 1 ] ;
9251: LD_ADDR_VAR 0 3
9255: PUSH
9256: LD_VAR 0 11
9260: PUSH
9261: LD_INT 1
9263: ARRAY
9264: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9265: LD_ADDR_VAR 0 11
9269: PUSH
9270: LD_VAR 0 11
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: CALL_OW 3
9282: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9283: LD_VAR 0 2
9287: PPUSH
9288: LD_VAR 0 3
9292: PPUSH
9293: CALL 9493 0 2
9297: PUSH
9298: LD_VAR 0 11
9302: PUSH
9303: EMPTY
9304: EQUAL
9305: OR
9306: IFFALSE 9251
// if not control in _control then
9308: LD_VAR 0 4
9312: PUSH
9313: LD_VAR 0 12
9317: IN
9318: NOT
9319: IFFALSE 9345
// control := _control [ rand ( 1 , _control ) ] ;
9321: LD_ADDR_VAR 0 4
9325: PUSH
9326: LD_VAR 0 12
9330: PUSH
9331: LD_INT 1
9333: PPUSH
9334: LD_VAR 0 12
9338: PPUSH
9339: CALL_OW 12
9343: ARRAY
9344: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9345: LD_VAR 0 2
9349: PPUSH
9350: LD_VAR 0 5
9354: PPUSH
9355: CALL 9713 0 2
9359: NOT
9360: IFFALSE 9419
// repeat weapon := _weapon [ 1 ] ;
9362: LD_ADDR_VAR 0 5
9366: PUSH
9367: LD_VAR 0 10
9371: PUSH
9372: LD_INT 1
9374: ARRAY
9375: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9376: LD_ADDR_VAR 0 10
9380: PUSH
9381: LD_VAR 0 10
9385: PPUSH
9386: LD_INT 1
9388: PPUSH
9389: CALL_OW 3
9393: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9394: LD_VAR 0 2
9398: PPUSH
9399: LD_VAR 0 5
9403: PPUSH
9404: CALL 9713 0 2
9408: PUSH
9409: LD_VAR 0 10
9413: PUSH
9414: EMPTY
9415: EQUAL
9416: OR
9417: IFFALSE 9362
// result := [ ] ;
9419: LD_ADDR_VAR 0 6
9423: PUSH
9424: EMPTY
9425: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9426: LD_VAR 0 1
9430: PPUSH
9431: LD_VAR 0 2
9435: PPUSH
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_VAR 0 5
9450: PPUSH
9451: CALL_OW 448
9455: IFFALSE 9488
// result := [ chassis , engine , control , weapon ] ;
9457: LD_ADDR_VAR 0 6
9461: PUSH
9462: LD_VAR 0 2
9466: PUSH
9467: LD_VAR 0 3
9471: PUSH
9472: LD_VAR 0 4
9476: PUSH
9477: LD_VAR 0 5
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: ST_TO_ADDR
// end ;
9488: LD_VAR 0 6
9492: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9493: LD_INT 0
9495: PPUSH
// if not chassis or not engine then
9496: LD_VAR 0 1
9500: NOT
9501: PUSH
9502: LD_VAR 0 2
9506: NOT
9507: OR
9508: IFFALSE 9512
// exit ;
9510: GO 9708
// case engine of engine_solar :
9512: LD_VAR 0 2
9516: PUSH
9517: LD_INT 2
9519: DOUBLE
9520: EQUAL
9521: IFTRUE 9525
9523: GO 9563
9525: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9526: LD_ADDR_VAR 0 3
9530: PUSH
9531: LD_INT 11
9533: PUSH
9534: LD_INT 12
9536: PUSH
9537: LD_INT 13
9539: PUSH
9540: LD_INT 14
9542: PUSH
9543: LD_INT 1
9545: PUSH
9546: LD_INT 2
9548: PUSH
9549: LD_INT 3
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: ST_TO_ADDR
9561: GO 9692
9563: LD_INT 1
9565: DOUBLE
9566: EQUAL
9567: IFTRUE 9571
9569: GO 9633
9571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9572: LD_ADDR_VAR 0 3
9576: PUSH
9577: LD_INT 11
9579: PUSH
9580: LD_INT 12
9582: PUSH
9583: LD_INT 13
9585: PUSH
9586: LD_INT 14
9588: PUSH
9589: LD_INT 1
9591: PUSH
9592: LD_INT 2
9594: PUSH
9595: LD_INT 3
9597: PUSH
9598: LD_INT 4
9600: PUSH
9601: LD_INT 5
9603: PUSH
9604: LD_INT 21
9606: PUSH
9607: LD_INT 23
9609: PUSH
9610: LD_INT 22
9612: PUSH
9613: LD_INT 24
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: ST_TO_ADDR
9631: GO 9692
9633: LD_INT 3
9635: DOUBLE
9636: EQUAL
9637: IFTRUE 9641
9639: GO 9691
9641: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9642: LD_ADDR_VAR 0 3
9646: PUSH
9647: LD_INT 13
9649: PUSH
9650: LD_INT 14
9652: PUSH
9653: LD_INT 2
9655: PUSH
9656: LD_INT 3
9658: PUSH
9659: LD_INT 4
9661: PUSH
9662: LD_INT 5
9664: PUSH
9665: LD_INT 21
9667: PUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 23
9673: PUSH
9674: LD_INT 24
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: ST_TO_ADDR
9689: GO 9692
9691: POP
// result := ( chassis in result ) ;
9692: LD_ADDR_VAR 0 3
9696: PUSH
9697: LD_VAR 0 1
9701: PUSH
9702: LD_VAR 0 3
9706: IN
9707: ST_TO_ADDR
// end ;
9708: LD_VAR 0 3
9712: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9713: LD_INT 0
9715: PPUSH
// if not chassis or not weapon then
9716: LD_VAR 0 1
9720: NOT
9721: PUSH
9722: LD_VAR 0 2
9726: NOT
9727: OR
9728: IFFALSE 9732
// exit ;
9730: GO 10792
// case weapon of us_machine_gun :
9732: LD_VAR 0 2
9736: PUSH
9737: LD_INT 2
9739: DOUBLE
9740: EQUAL
9741: IFTRUE 9745
9743: GO 9775
9745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9746: LD_ADDR_VAR 0 3
9750: PUSH
9751: LD_INT 1
9753: PUSH
9754: LD_INT 2
9756: PUSH
9757: LD_INT 3
9759: PUSH
9760: LD_INT 4
9762: PUSH
9763: LD_INT 5
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: ST_TO_ADDR
9773: GO 10776
9775: LD_INT 3
9777: DOUBLE
9778: EQUAL
9779: IFTRUE 9783
9781: GO 9813
9783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: LD_INT 1
9791: PUSH
9792: LD_INT 2
9794: PUSH
9795: LD_INT 3
9797: PUSH
9798: LD_INT 4
9800: PUSH
9801: LD_INT 5
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: ST_TO_ADDR
9811: GO 10776
9813: LD_INT 11
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9851
9821: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9822: LD_ADDR_VAR 0 3
9826: PUSH
9827: LD_INT 1
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: LD_INT 3
9835: PUSH
9836: LD_INT 4
9838: PUSH
9839: LD_INT 5
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: ST_TO_ADDR
9849: GO 10776
9851: LD_INT 4
9853: DOUBLE
9854: EQUAL
9855: IFTRUE 9859
9857: GO 9885
9859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9860: LD_ADDR_VAR 0 3
9864: PUSH
9865: LD_INT 2
9867: PUSH
9868: LD_INT 3
9870: PUSH
9871: LD_INT 4
9873: PUSH
9874: LD_INT 5
9876: PUSH
9877: EMPTY
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: ST_TO_ADDR
9883: GO 10776
9885: LD_INT 5
9887: DOUBLE
9888: EQUAL
9889: IFTRUE 9893
9891: GO 9919
9893: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9894: LD_ADDR_VAR 0 3
9898: PUSH
9899: LD_INT 2
9901: PUSH
9902: LD_INT 3
9904: PUSH
9905: LD_INT 4
9907: PUSH
9908: LD_INT 5
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: ST_TO_ADDR
9917: GO 10776
9919: LD_INT 9
9921: DOUBLE
9922: EQUAL
9923: IFTRUE 9927
9925: GO 9953
9927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9928: LD_ADDR_VAR 0 3
9932: PUSH
9933: LD_INT 2
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_INT 5
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: ST_TO_ADDR
9951: GO 10776
9953: LD_INT 7
9955: DOUBLE
9956: EQUAL
9957: IFTRUE 9961
9959: GO 9987
9961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9962: LD_ADDR_VAR 0 3
9966: PUSH
9967: LD_INT 2
9969: PUSH
9970: LD_INT 3
9972: PUSH
9973: LD_INT 4
9975: PUSH
9976: LD_INT 5
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: ST_TO_ADDR
9985: GO 10776
9987: LD_INT 12
9989: DOUBLE
9990: EQUAL
9991: IFTRUE 9995
9993: GO 10021
9995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
9996: LD_ADDR_VAR 0 3
10000: PUSH
10001: LD_INT 2
10003: PUSH
10004: LD_INT 3
10006: PUSH
10007: LD_INT 4
10009: PUSH
10010: LD_INT 5
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: ST_TO_ADDR
10019: GO 10776
10021: LD_INT 13
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10055
10029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10030: LD_ADDR_VAR 0 3
10034: PUSH
10035: LD_INT 2
10037: PUSH
10038: LD_INT 3
10040: PUSH
10041: LD_INT 4
10043: PUSH
10044: LD_INT 5
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: ST_TO_ADDR
10053: GO 10776
10055: LD_INT 14
10057: DOUBLE
10058: EQUAL
10059: IFTRUE 10063
10061: GO 10081
10063: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10064: LD_ADDR_VAR 0 3
10068: PUSH
10069: LD_INT 4
10071: PUSH
10072: LD_INT 5
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: ST_TO_ADDR
10079: GO 10776
10081: LD_INT 6
10083: DOUBLE
10084: EQUAL
10085: IFTRUE 10089
10087: GO 10107
10089: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: LD_INT 4
10097: PUSH
10098: LD_INT 5
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: ST_TO_ADDR
10105: GO 10776
10107: LD_INT 10
10109: DOUBLE
10110: EQUAL
10111: IFTRUE 10115
10113: GO 10133
10115: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10116: LD_ADDR_VAR 0 3
10120: PUSH
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: EMPTY
10128: LIST
10129: LIST
10130: ST_TO_ADDR
10131: GO 10776
10133: LD_INT 22
10135: DOUBLE
10136: EQUAL
10137: IFTRUE 10141
10139: GO 10167
10141: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10142: LD_ADDR_VAR 0 3
10146: PUSH
10147: LD_INT 11
10149: PUSH
10150: LD_INT 12
10152: PUSH
10153: LD_INT 13
10155: PUSH
10156: LD_INT 14
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: ST_TO_ADDR
10165: GO 10776
10167: LD_INT 23
10169: DOUBLE
10170: EQUAL
10171: IFTRUE 10175
10173: GO 10201
10175: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10176: LD_ADDR_VAR 0 3
10180: PUSH
10181: LD_INT 11
10183: PUSH
10184: LD_INT 12
10186: PUSH
10187: LD_INT 13
10189: PUSH
10190: LD_INT 14
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: ST_TO_ADDR
10199: GO 10776
10201: LD_INT 24
10203: DOUBLE
10204: EQUAL
10205: IFTRUE 10209
10207: GO 10235
10209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10210: LD_ADDR_VAR 0 3
10214: PUSH
10215: LD_INT 11
10217: PUSH
10218: LD_INT 12
10220: PUSH
10221: LD_INT 13
10223: PUSH
10224: LD_INT 14
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: ST_TO_ADDR
10233: GO 10776
10235: LD_INT 30
10237: DOUBLE
10238: EQUAL
10239: IFTRUE 10243
10241: GO 10269
10243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10244: LD_ADDR_VAR 0 3
10248: PUSH
10249: LD_INT 11
10251: PUSH
10252: LD_INT 12
10254: PUSH
10255: LD_INT 13
10257: PUSH
10258: LD_INT 14
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: ST_TO_ADDR
10267: GO 10776
10269: LD_INT 25
10271: DOUBLE
10272: EQUAL
10273: IFTRUE 10277
10275: GO 10295
10277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10278: LD_ADDR_VAR 0 3
10282: PUSH
10283: LD_INT 13
10285: PUSH
10286: LD_INT 14
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: ST_TO_ADDR
10293: GO 10776
10295: LD_INT 27
10297: DOUBLE
10298: EQUAL
10299: IFTRUE 10303
10301: GO 10321
10303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10304: LD_ADDR_VAR 0 3
10308: PUSH
10309: LD_INT 13
10311: PUSH
10312: LD_INT 14
10314: PUSH
10315: EMPTY
10316: LIST
10317: LIST
10318: ST_TO_ADDR
10319: GO 10776
10321: LD_INT 92
10323: DOUBLE
10324: EQUAL
10325: IFTRUE 10329
10327: GO 10355
10329: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10330: LD_ADDR_VAR 0 3
10334: PUSH
10335: LD_INT 11
10337: PUSH
10338: LD_INT 12
10340: PUSH
10341: LD_INT 13
10343: PUSH
10344: LD_INT 14
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: ST_TO_ADDR
10353: GO 10776
10355: LD_INT 28
10357: DOUBLE
10358: EQUAL
10359: IFTRUE 10363
10361: GO 10381
10363: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10364: LD_ADDR_VAR 0 3
10368: PUSH
10369: LD_INT 13
10371: PUSH
10372: LD_INT 14
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: ST_TO_ADDR
10379: GO 10776
10381: LD_INT 29
10383: DOUBLE
10384: EQUAL
10385: IFTRUE 10389
10387: GO 10407
10389: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10390: LD_ADDR_VAR 0 3
10394: PUSH
10395: LD_INT 13
10397: PUSH
10398: LD_INT 14
10400: PUSH
10401: EMPTY
10402: LIST
10403: LIST
10404: ST_TO_ADDR
10405: GO 10776
10407: LD_INT 31
10409: DOUBLE
10410: EQUAL
10411: IFTRUE 10415
10413: GO 10433
10415: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10416: LD_ADDR_VAR 0 3
10420: PUSH
10421: LD_INT 13
10423: PUSH
10424: LD_INT 14
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: ST_TO_ADDR
10431: GO 10776
10433: LD_INT 26
10435: DOUBLE
10436: EQUAL
10437: IFTRUE 10441
10439: GO 10459
10441: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10442: LD_ADDR_VAR 0 3
10446: PUSH
10447: LD_INT 13
10449: PUSH
10450: LD_INT 14
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: ST_TO_ADDR
10457: GO 10776
10459: LD_INT 42
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10493
10467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10468: LD_ADDR_VAR 0 3
10472: PUSH
10473: LD_INT 21
10475: PUSH
10476: LD_INT 22
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: LD_INT 24
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: ST_TO_ADDR
10491: GO 10776
10493: LD_INT 43
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10527
10501: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10502: LD_ADDR_VAR 0 3
10506: PUSH
10507: LD_INT 21
10509: PUSH
10510: LD_INT 22
10512: PUSH
10513: LD_INT 23
10515: PUSH
10516: LD_INT 24
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: ST_TO_ADDR
10525: GO 10776
10527: LD_INT 44
10529: DOUBLE
10530: EQUAL
10531: IFTRUE 10535
10533: GO 10561
10535: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10536: LD_ADDR_VAR 0 3
10540: PUSH
10541: LD_INT 21
10543: PUSH
10544: LD_INT 22
10546: PUSH
10547: LD_INT 23
10549: PUSH
10550: LD_INT 24
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: ST_TO_ADDR
10559: GO 10776
10561: LD_INT 45
10563: DOUBLE
10564: EQUAL
10565: IFTRUE 10569
10567: GO 10595
10569: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10570: LD_ADDR_VAR 0 3
10574: PUSH
10575: LD_INT 21
10577: PUSH
10578: LD_INT 22
10580: PUSH
10581: LD_INT 23
10583: PUSH
10584: LD_INT 24
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
10593: GO 10776
10595: LD_INT 49
10597: DOUBLE
10598: EQUAL
10599: IFTRUE 10603
10601: GO 10629
10603: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10604: LD_ADDR_VAR 0 3
10608: PUSH
10609: LD_INT 21
10611: PUSH
10612: LD_INT 22
10614: PUSH
10615: LD_INT 23
10617: PUSH
10618: LD_INT 24
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: ST_TO_ADDR
10627: GO 10776
10629: LD_INT 51
10631: DOUBLE
10632: EQUAL
10633: IFTRUE 10637
10635: GO 10663
10637: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10638: LD_ADDR_VAR 0 3
10642: PUSH
10643: LD_INT 21
10645: PUSH
10646: LD_INT 22
10648: PUSH
10649: LD_INT 23
10651: PUSH
10652: LD_INT 24
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: ST_TO_ADDR
10661: GO 10776
10663: LD_INT 52
10665: DOUBLE
10666: EQUAL
10667: IFTRUE 10671
10669: GO 10697
10671: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10672: LD_ADDR_VAR 0 3
10676: PUSH
10677: LD_INT 21
10679: PUSH
10680: LD_INT 22
10682: PUSH
10683: LD_INT 23
10685: PUSH
10686: LD_INT 24
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: ST_TO_ADDR
10695: GO 10776
10697: LD_INT 53
10699: DOUBLE
10700: EQUAL
10701: IFTRUE 10705
10703: GO 10723
10705: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 23
10713: PUSH
10714: LD_INT 24
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: ST_TO_ADDR
10721: GO 10776
10723: LD_INT 46
10725: DOUBLE
10726: EQUAL
10727: IFTRUE 10731
10729: GO 10749
10731: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10732: LD_ADDR_VAR 0 3
10736: PUSH
10737: LD_INT 23
10739: PUSH
10740: LD_INT 24
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: ST_TO_ADDR
10747: GO 10776
10749: LD_INT 47
10751: DOUBLE
10752: EQUAL
10753: IFTRUE 10757
10755: GO 10775
10757: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10758: LD_ADDR_VAR 0 3
10762: PUSH
10763: LD_INT 23
10765: PUSH
10766: LD_INT 24
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: ST_TO_ADDR
10773: GO 10776
10775: POP
// result := ( chassis in result ) ;
10776: LD_ADDR_VAR 0 3
10780: PUSH
10781: LD_VAR 0 1
10785: PUSH
10786: LD_VAR 0 3
10790: IN
10791: ST_TO_ADDR
// end ;
10792: LD_VAR 0 3
10796: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10797: LD_INT 0
10799: PPUSH
10800: PPUSH
10801: PPUSH
10802: PPUSH
10803: PPUSH
10804: PPUSH
10805: PPUSH
// result := array ;
10806: LD_ADDR_VAR 0 5
10810: PUSH
10811: LD_VAR 0 1
10815: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10816: LD_VAR 0 1
10820: NOT
10821: PUSH
10822: LD_VAR 0 2
10826: NOT
10827: OR
10828: PUSH
10829: LD_VAR 0 3
10833: NOT
10834: OR
10835: PUSH
10836: LD_VAR 0 2
10840: PUSH
10841: LD_VAR 0 1
10845: GREATER
10846: OR
10847: PUSH
10848: LD_VAR 0 3
10852: PUSH
10853: LD_VAR 0 1
10857: GREATER
10858: OR
10859: IFFALSE 10863
// exit ;
10861: GO 11159
// if direction then
10863: LD_VAR 0 4
10867: IFFALSE 10931
// begin d := 1 ;
10869: LD_ADDR_VAR 0 9
10873: PUSH
10874: LD_INT 1
10876: ST_TO_ADDR
// if i_from > i_to then
10877: LD_VAR 0 2
10881: PUSH
10882: LD_VAR 0 3
10886: GREATER
10887: IFFALSE 10913
// length := ( array - i_from ) + i_to else
10889: LD_ADDR_VAR 0 11
10893: PUSH
10894: LD_VAR 0 1
10898: PUSH
10899: LD_VAR 0 2
10903: MINUS
10904: PUSH
10905: LD_VAR 0 3
10909: PLUS
10910: ST_TO_ADDR
10911: GO 10929
// length := i_to - i_from ;
10913: LD_ADDR_VAR 0 11
10917: PUSH
10918: LD_VAR 0 3
10922: PUSH
10923: LD_VAR 0 2
10927: MINUS
10928: ST_TO_ADDR
// end else
10929: GO 10992
// begin d := - 1 ;
10931: LD_ADDR_VAR 0 9
10935: PUSH
10936: LD_INT 1
10938: NEG
10939: ST_TO_ADDR
// if i_from > i_to then
10940: LD_VAR 0 2
10944: PUSH
10945: LD_VAR 0 3
10949: GREATER
10950: IFFALSE 10970
// length := i_from - i_to else
10952: LD_ADDR_VAR 0 11
10956: PUSH
10957: LD_VAR 0 2
10961: PUSH
10962: LD_VAR 0 3
10966: MINUS
10967: ST_TO_ADDR
10968: GO 10992
// length := ( array - i_to ) + i_from ;
10970: LD_ADDR_VAR 0 11
10974: PUSH
10975: LD_VAR 0 1
10979: PUSH
10980: LD_VAR 0 3
10984: MINUS
10985: PUSH
10986: LD_VAR 0 2
10990: PLUS
10991: ST_TO_ADDR
// end ; if not length then
10992: LD_VAR 0 11
10996: NOT
10997: IFFALSE 11001
// exit ;
10999: GO 11159
// tmp := array ;
11001: LD_ADDR_VAR 0 10
11005: PUSH
11006: LD_VAR 0 1
11010: ST_TO_ADDR
// for i = 1 to length do
11011: LD_ADDR_VAR 0 6
11015: PUSH
11016: DOUBLE
11017: LD_INT 1
11019: DEC
11020: ST_TO_ADDR
11021: LD_VAR 0 11
11025: PUSH
11026: FOR_TO
11027: IFFALSE 11147
// begin for j = 1 to array do
11029: LD_ADDR_VAR 0 7
11033: PUSH
11034: DOUBLE
11035: LD_INT 1
11037: DEC
11038: ST_TO_ADDR
11039: LD_VAR 0 1
11043: PUSH
11044: FOR_TO
11045: IFFALSE 11133
// begin k := j + d ;
11047: LD_ADDR_VAR 0 8
11051: PUSH
11052: LD_VAR 0 7
11056: PUSH
11057: LD_VAR 0 9
11061: PLUS
11062: ST_TO_ADDR
// if k > array then
11063: LD_VAR 0 8
11067: PUSH
11068: LD_VAR 0 1
11072: GREATER
11073: IFFALSE 11083
// k := 1 ;
11075: LD_ADDR_VAR 0 8
11079: PUSH
11080: LD_INT 1
11082: ST_TO_ADDR
// if not k then
11083: LD_VAR 0 8
11087: NOT
11088: IFFALSE 11100
// k := array ;
11090: LD_ADDR_VAR 0 8
11094: PUSH
11095: LD_VAR 0 1
11099: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11100: LD_ADDR_VAR 0 10
11104: PUSH
11105: LD_VAR 0 10
11109: PPUSH
11110: LD_VAR 0 8
11114: PPUSH
11115: LD_VAR 0 1
11119: PUSH
11120: LD_VAR 0 7
11124: ARRAY
11125: PPUSH
11126: CALL_OW 1
11130: ST_TO_ADDR
// end ;
11131: GO 11044
11133: POP
11134: POP
// array := tmp ;
11135: LD_ADDR_VAR 0 1
11139: PUSH
11140: LD_VAR 0 10
11144: ST_TO_ADDR
// end ;
11145: GO 11026
11147: POP
11148: POP
// result := array ;
11149: LD_ADDR_VAR 0 5
11153: PUSH
11154: LD_VAR 0 1
11158: ST_TO_ADDR
// end ;
11159: LD_VAR 0 5
11163: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11164: LD_INT 0
11166: PPUSH
11167: PPUSH
// result := 0 ;
11168: LD_ADDR_VAR 0 3
11172: PUSH
11173: LD_INT 0
11175: ST_TO_ADDR
// if not array or not value in array then
11176: LD_VAR 0 1
11180: NOT
11181: PUSH
11182: LD_VAR 0 2
11186: PUSH
11187: LD_VAR 0 1
11191: IN
11192: NOT
11193: OR
11194: IFFALSE 11198
// exit ;
11196: GO 11252
// for i = 1 to array do
11198: LD_ADDR_VAR 0 4
11202: PUSH
11203: DOUBLE
11204: LD_INT 1
11206: DEC
11207: ST_TO_ADDR
11208: LD_VAR 0 1
11212: PUSH
11213: FOR_TO
11214: IFFALSE 11250
// if value = array [ i ] then
11216: LD_VAR 0 2
11220: PUSH
11221: LD_VAR 0 1
11225: PUSH
11226: LD_VAR 0 4
11230: ARRAY
11231: EQUAL
11232: IFFALSE 11248
// begin result := i ;
11234: LD_ADDR_VAR 0 3
11238: PUSH
11239: LD_VAR 0 4
11243: ST_TO_ADDR
// exit ;
11244: POP
11245: POP
11246: GO 11252
// end ;
11248: GO 11213
11250: POP
11251: POP
// end ;
11252: LD_VAR 0 3
11256: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11257: LD_INT 0
11259: PPUSH
// vc_chassis := chassis ;
11260: LD_ADDR_OWVAR 37
11264: PUSH
11265: LD_VAR 0 1
11269: ST_TO_ADDR
// vc_engine := engine ;
11270: LD_ADDR_OWVAR 39
11274: PUSH
11275: LD_VAR 0 2
11279: ST_TO_ADDR
// vc_control := control ;
11280: LD_ADDR_OWVAR 38
11284: PUSH
11285: LD_VAR 0 3
11289: ST_TO_ADDR
// vc_weapon := weapon ;
11290: LD_ADDR_OWVAR 40
11294: PUSH
11295: LD_VAR 0 4
11299: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11300: LD_ADDR_OWVAR 41
11304: PUSH
11305: LD_VAR 0 5
11309: ST_TO_ADDR
// end ;
11310: LD_VAR 0 6
11314: RET
// export function WantPlant ( unit ) ; var task ; begin
11315: LD_INT 0
11317: PPUSH
11318: PPUSH
// result := false ;
11319: LD_ADDR_VAR 0 2
11323: PUSH
11324: LD_INT 0
11326: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11327: LD_ADDR_VAR 0 3
11331: PUSH
11332: LD_VAR 0 1
11336: PPUSH
11337: CALL_OW 437
11341: ST_TO_ADDR
// if task then
11342: LD_VAR 0 3
11346: IFFALSE 11374
// if task [ 1 ] [ 1 ] = p then
11348: LD_VAR 0 3
11352: PUSH
11353: LD_INT 1
11355: ARRAY
11356: PUSH
11357: LD_INT 1
11359: ARRAY
11360: PUSH
11361: LD_STRING p
11363: EQUAL
11364: IFFALSE 11374
// result := true ;
11366: LD_ADDR_VAR 0 2
11370: PUSH
11371: LD_INT 1
11373: ST_TO_ADDR
// end ;
11374: LD_VAR 0 2
11378: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11379: LD_INT 0
11381: PPUSH
11382: PPUSH
11383: PPUSH
11384: PPUSH
// if pos < 1 then
11385: LD_VAR 0 2
11389: PUSH
11390: LD_INT 1
11392: LESS
11393: IFFALSE 11397
// exit ;
11395: GO 11700
// if pos = 1 then
11397: LD_VAR 0 2
11401: PUSH
11402: LD_INT 1
11404: EQUAL
11405: IFFALSE 11438
// result := Replace ( arr , pos [ 1 ] , value ) else
11407: LD_ADDR_VAR 0 4
11411: PUSH
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_VAR 0 2
11421: PUSH
11422: LD_INT 1
11424: ARRAY
11425: PPUSH
11426: LD_VAR 0 3
11430: PPUSH
11431: CALL_OW 1
11435: ST_TO_ADDR
11436: GO 11700
// begin tmp := arr ;
11438: LD_ADDR_VAR 0 6
11442: PUSH
11443: LD_VAR 0 1
11447: ST_TO_ADDR
// s_arr := [ tmp ] ;
11448: LD_ADDR_VAR 0 7
11452: PUSH
11453: LD_VAR 0 6
11457: PUSH
11458: EMPTY
11459: LIST
11460: ST_TO_ADDR
// for i = 1 to pos - 1 do
11461: LD_ADDR_VAR 0 5
11465: PUSH
11466: DOUBLE
11467: LD_INT 1
11469: DEC
11470: ST_TO_ADDR
11471: LD_VAR 0 2
11475: PUSH
11476: LD_INT 1
11478: MINUS
11479: PUSH
11480: FOR_TO
11481: IFFALSE 11526
// begin tmp := tmp [ pos [ i ] ] ;
11483: LD_ADDR_VAR 0 6
11487: PUSH
11488: LD_VAR 0 6
11492: PUSH
11493: LD_VAR 0 2
11497: PUSH
11498: LD_VAR 0 5
11502: ARRAY
11503: ARRAY
11504: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11505: LD_ADDR_VAR 0 7
11509: PUSH
11510: LD_VAR 0 7
11514: PUSH
11515: LD_VAR 0 6
11519: PUSH
11520: EMPTY
11521: LIST
11522: ADD
11523: ST_TO_ADDR
// end ;
11524: GO 11480
11526: POP
11527: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11528: LD_ADDR_VAR 0 6
11532: PUSH
11533: LD_VAR 0 6
11537: PPUSH
11538: LD_VAR 0 2
11542: PUSH
11543: LD_VAR 0 2
11547: ARRAY
11548: PPUSH
11549: LD_VAR 0 3
11553: PPUSH
11554: CALL_OW 1
11558: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11559: LD_ADDR_VAR 0 7
11563: PUSH
11564: LD_VAR 0 7
11568: PPUSH
11569: LD_VAR 0 7
11573: PPUSH
11574: LD_VAR 0 6
11578: PPUSH
11579: CALL_OW 1
11583: ST_TO_ADDR
// for i = s_arr downto 2 do
11584: LD_ADDR_VAR 0 5
11588: PUSH
11589: DOUBLE
11590: LD_VAR 0 7
11594: INC
11595: ST_TO_ADDR
11596: LD_INT 2
11598: PUSH
11599: FOR_DOWNTO
11600: IFFALSE 11684
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11602: LD_ADDR_VAR 0 6
11606: PUSH
11607: LD_VAR 0 7
11611: PUSH
11612: LD_VAR 0 5
11616: PUSH
11617: LD_INT 1
11619: MINUS
11620: ARRAY
11621: PPUSH
11622: LD_VAR 0 2
11626: PUSH
11627: LD_VAR 0 5
11631: PUSH
11632: LD_INT 1
11634: MINUS
11635: ARRAY
11636: PPUSH
11637: LD_VAR 0 7
11641: PUSH
11642: LD_VAR 0 5
11646: ARRAY
11647: PPUSH
11648: CALL_OW 1
11652: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11653: LD_ADDR_VAR 0 7
11657: PUSH
11658: LD_VAR 0 7
11662: PPUSH
11663: LD_VAR 0 5
11667: PUSH
11668: LD_INT 1
11670: MINUS
11671: PPUSH
11672: LD_VAR 0 6
11676: PPUSH
11677: CALL_OW 1
11681: ST_TO_ADDR
// end ;
11682: GO 11599
11684: POP
11685: POP
// result := s_arr [ 1 ] ;
11686: LD_ADDR_VAR 0 4
11690: PUSH
11691: LD_VAR 0 7
11695: PUSH
11696: LD_INT 1
11698: ARRAY
11699: ST_TO_ADDR
// end ; end ;
11700: LD_VAR 0 4
11704: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11705: LD_INT 0
11707: PPUSH
11708: PPUSH
// if not list then
11709: LD_VAR 0 1
11713: NOT
11714: IFFALSE 11718
// exit ;
11716: GO 11809
// i := list [ pos1 ] ;
11718: LD_ADDR_VAR 0 5
11722: PUSH
11723: LD_VAR 0 1
11727: PUSH
11728: LD_VAR 0 2
11732: ARRAY
11733: ST_TO_ADDR
// if not i then
11734: LD_VAR 0 5
11738: NOT
11739: IFFALSE 11743
// exit ;
11741: GO 11809
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11743: LD_ADDR_VAR 0 1
11747: PUSH
11748: LD_VAR 0 1
11752: PPUSH
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_VAR 0 1
11762: PUSH
11763: LD_VAR 0 3
11767: ARRAY
11768: PPUSH
11769: CALL_OW 1
11773: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11774: LD_ADDR_VAR 0 1
11778: PUSH
11779: LD_VAR 0 1
11783: PPUSH
11784: LD_VAR 0 3
11788: PPUSH
11789: LD_VAR 0 5
11793: PPUSH
11794: CALL_OW 1
11798: ST_TO_ADDR
// result := list ;
11799: LD_ADDR_VAR 0 4
11803: PUSH
11804: LD_VAR 0 1
11808: ST_TO_ADDR
// end ;
11809: LD_VAR 0 4
11813: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11814: LD_INT 0
11816: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11817: LD_ADDR_VAR 0 5
11821: PUSH
11822: LD_VAR 0 1
11826: PPUSH
11827: CALL_OW 250
11831: PPUSH
11832: LD_VAR 0 1
11836: PPUSH
11837: CALL_OW 251
11841: PPUSH
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_VAR 0 3
11851: PPUSH
11852: LD_VAR 0 4
11856: PPUSH
11857: CALL 11867 0 5
11861: ST_TO_ADDR
// end ;
11862: LD_VAR 0 5
11866: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
11867: LD_INT 0
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
// if not list then
11873: LD_VAR 0 3
11877: NOT
11878: IFFALSE 11882
// exit ;
11880: GO 12270
// result := [ ] ;
11882: LD_ADDR_VAR 0 6
11886: PUSH
11887: EMPTY
11888: ST_TO_ADDR
// for i in list do
11889: LD_ADDR_VAR 0 7
11893: PUSH
11894: LD_VAR 0 3
11898: PUSH
11899: FOR_IN
11900: IFFALSE 12102
// begin tmp := GetDistUnitXY ( i , x , y ) ;
11902: LD_ADDR_VAR 0 9
11906: PUSH
11907: LD_VAR 0 7
11911: PPUSH
11912: LD_VAR 0 1
11916: PPUSH
11917: LD_VAR 0 2
11921: PPUSH
11922: CALL_OW 297
11926: ST_TO_ADDR
// if not result then
11927: LD_VAR 0 6
11931: NOT
11932: IFFALSE 11958
// result := [ [ i , tmp ] ] else
11934: LD_ADDR_VAR 0 6
11938: PUSH
11939: LD_VAR 0 7
11943: PUSH
11944: LD_VAR 0 9
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: PUSH
11953: EMPTY
11954: LIST
11955: ST_TO_ADDR
11956: GO 12100
// begin if result [ result ] [ 2 ] < tmp then
11958: LD_VAR 0 6
11962: PUSH
11963: LD_VAR 0 6
11967: ARRAY
11968: PUSH
11969: LD_INT 2
11971: ARRAY
11972: PUSH
11973: LD_VAR 0 9
11977: LESS
11978: IFFALSE 12020
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
11980: LD_ADDR_VAR 0 6
11984: PUSH
11985: LD_VAR 0 6
11989: PPUSH
11990: LD_VAR 0 6
11994: PUSH
11995: LD_INT 1
11997: PLUS
11998: PPUSH
11999: LD_VAR 0 7
12003: PUSH
12004: LD_VAR 0 9
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: PPUSH
12013: CALL_OW 2
12017: ST_TO_ADDR
12018: GO 12100
// for j = 1 to result do
12020: LD_ADDR_VAR 0 8
12024: PUSH
12025: DOUBLE
12026: LD_INT 1
12028: DEC
12029: ST_TO_ADDR
12030: LD_VAR 0 6
12034: PUSH
12035: FOR_TO
12036: IFFALSE 12098
// begin if tmp < result [ j ] [ 2 ] then
12038: LD_VAR 0 9
12042: PUSH
12043: LD_VAR 0 6
12047: PUSH
12048: LD_VAR 0 8
12052: ARRAY
12053: PUSH
12054: LD_INT 2
12056: ARRAY
12057: LESS
12058: IFFALSE 12096
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12060: LD_ADDR_VAR 0 6
12064: PUSH
12065: LD_VAR 0 6
12069: PPUSH
12070: LD_VAR 0 8
12074: PPUSH
12075: LD_VAR 0 7
12079: PUSH
12080: LD_VAR 0 9
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PPUSH
12089: CALL_OW 2
12093: ST_TO_ADDR
// break ;
12094: GO 12098
// end ; end ;
12096: GO 12035
12098: POP
12099: POP
// end ; end ;
12100: GO 11899
12102: POP
12103: POP
// if result and not asc then
12104: LD_VAR 0 6
12108: PUSH
12109: LD_VAR 0 4
12113: NOT
12114: AND
12115: IFFALSE 12190
// begin tmp := result ;
12117: LD_ADDR_VAR 0 9
12121: PUSH
12122: LD_VAR 0 6
12126: ST_TO_ADDR
// for i = tmp downto 1 do
12127: LD_ADDR_VAR 0 7
12131: PUSH
12132: DOUBLE
12133: LD_VAR 0 9
12137: INC
12138: ST_TO_ADDR
12139: LD_INT 1
12141: PUSH
12142: FOR_DOWNTO
12143: IFFALSE 12188
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12145: LD_ADDR_VAR 0 6
12149: PUSH
12150: LD_VAR 0 6
12154: PPUSH
12155: LD_VAR 0 9
12159: PUSH
12160: LD_VAR 0 7
12164: MINUS
12165: PUSH
12166: LD_INT 1
12168: PLUS
12169: PPUSH
12170: LD_VAR 0 9
12174: PUSH
12175: LD_VAR 0 7
12179: ARRAY
12180: PPUSH
12181: CALL_OW 1
12185: ST_TO_ADDR
12186: GO 12142
12188: POP
12189: POP
// end ; tmp := [ ] ;
12190: LD_ADDR_VAR 0 9
12194: PUSH
12195: EMPTY
12196: ST_TO_ADDR
// if mode then
12197: LD_VAR 0 5
12201: IFFALSE 12270
// begin for i = 1 to result do
12203: LD_ADDR_VAR 0 7
12207: PUSH
12208: DOUBLE
12209: LD_INT 1
12211: DEC
12212: ST_TO_ADDR
12213: LD_VAR 0 6
12217: PUSH
12218: FOR_TO
12219: IFFALSE 12258
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12221: LD_ADDR_VAR 0 9
12225: PUSH
12226: LD_VAR 0 9
12230: PPUSH
12231: LD_VAR 0 7
12235: PPUSH
12236: LD_VAR 0 6
12240: PUSH
12241: LD_VAR 0 7
12245: ARRAY
12246: PUSH
12247: LD_INT 1
12249: ARRAY
12250: PPUSH
12251: CALL_OW 1
12255: ST_TO_ADDR
12256: GO 12218
12258: POP
12259: POP
// result := tmp ;
12260: LD_ADDR_VAR 0 6
12264: PUSH
12265: LD_VAR 0 9
12269: ST_TO_ADDR
// end ; end ;
12270: LD_VAR 0 6
12274: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12275: LD_INT 0
12277: PPUSH
12278: PPUSH
12279: PPUSH
12280: PPUSH
12281: PPUSH
12282: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12283: LD_ADDR_VAR 0 5
12287: PUSH
12288: LD_INT 0
12290: PUSH
12291: LD_INT 0
12293: PUSH
12294: LD_INT 0
12296: PUSH
12297: EMPTY
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: ST_TO_ADDR
// if not x or not y then
12305: LD_VAR 0 2
12309: NOT
12310: PUSH
12311: LD_VAR 0 3
12315: NOT
12316: OR
12317: IFFALSE 12321
// exit ;
12319: GO 13971
// if not range then
12321: LD_VAR 0 4
12325: NOT
12326: IFFALSE 12336
// range := 10 ;
12328: LD_ADDR_VAR 0 4
12332: PUSH
12333: LD_INT 10
12335: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12336: LD_ADDR_VAR 0 8
12340: PUSH
12341: LD_INT 81
12343: PUSH
12344: LD_VAR 0 1
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 92
12355: PUSH
12356: LD_VAR 0 2
12360: PUSH
12361: LD_VAR 0 3
12365: PUSH
12366: LD_VAR 0 4
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: LD_INT 21
12382: PUSH
12383: LD_INT 3
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: PPUSH
12399: CALL_OW 69
12403: ST_TO_ADDR
// if not tmp then
12404: LD_VAR 0 8
12408: NOT
12409: IFFALSE 12413
// exit ;
12411: GO 13971
// for i in tmp do
12413: LD_ADDR_VAR 0 6
12417: PUSH
12418: LD_VAR 0 8
12422: PUSH
12423: FOR_IN
12424: IFFALSE 13946
// begin points := [ 0 , 0 , 0 ] ;
12426: LD_ADDR_VAR 0 9
12430: PUSH
12431: LD_INT 0
12433: PUSH
12434: LD_INT 0
12436: PUSH
12437: LD_INT 0
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: LIST
12444: ST_TO_ADDR
// bpoints := 1 ;
12445: LD_ADDR_VAR 0 10
12449: PUSH
12450: LD_INT 1
12452: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12453: LD_VAR 0 6
12457: PPUSH
12458: CALL_OW 247
12462: PUSH
12463: LD_INT 1
12465: DOUBLE
12466: EQUAL
12467: IFTRUE 12471
12469: GO 13049
12471: POP
// begin if GetClass ( i ) = 1 then
12472: LD_VAR 0 6
12476: PPUSH
12477: CALL_OW 257
12481: PUSH
12482: LD_INT 1
12484: EQUAL
12485: IFFALSE 12506
// points := [ 10 , 5 , 3 ] ;
12487: LD_ADDR_VAR 0 9
12491: PUSH
12492: LD_INT 10
12494: PUSH
12495: LD_INT 5
12497: PUSH
12498: LD_INT 3
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12506: LD_VAR 0 6
12510: PPUSH
12511: CALL_OW 257
12515: PUSH
12516: LD_INT 2
12518: PUSH
12519: LD_INT 3
12521: PUSH
12522: LD_INT 4
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: LIST
12529: IN
12530: IFFALSE 12551
// points := [ 3 , 2 , 1 ] ;
12532: LD_ADDR_VAR 0 9
12536: PUSH
12537: LD_INT 3
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12551: LD_VAR 0 6
12555: PPUSH
12556: CALL_OW 257
12560: PUSH
12561: LD_INT 5
12563: EQUAL
12564: IFFALSE 12585
// points := [ 130 , 5 , 2 ] ;
12566: LD_ADDR_VAR 0 9
12570: PUSH
12571: LD_INT 130
12573: PUSH
12574: LD_INT 5
12576: PUSH
12577: LD_INT 2
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12585: LD_VAR 0 6
12589: PPUSH
12590: CALL_OW 257
12594: PUSH
12595: LD_INT 8
12597: EQUAL
12598: IFFALSE 12619
// points := [ 35 , 35 , 30 ] ;
12600: LD_ADDR_VAR 0 9
12604: PUSH
12605: LD_INT 35
12607: PUSH
12608: LD_INT 35
12610: PUSH
12611: LD_INT 30
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12619: LD_VAR 0 6
12623: PPUSH
12624: CALL_OW 257
12628: PUSH
12629: LD_INT 9
12631: EQUAL
12632: IFFALSE 12653
// points := [ 20 , 55 , 40 ] ;
12634: LD_ADDR_VAR 0 9
12638: PUSH
12639: LD_INT 20
12641: PUSH
12642: LD_INT 55
12644: PUSH
12645: LD_INT 40
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12653: LD_VAR 0 6
12657: PPUSH
12658: CALL_OW 257
12662: PUSH
12663: LD_INT 12
12665: PUSH
12666: LD_INT 16
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: IN
12673: IFFALSE 12694
// points := [ 5 , 3 , 2 ] ;
12675: LD_ADDR_VAR 0 9
12679: PUSH
12680: LD_INT 5
12682: PUSH
12683: LD_INT 3
12685: PUSH
12686: LD_INT 2
12688: PUSH
12689: EMPTY
12690: LIST
12691: LIST
12692: LIST
12693: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12694: LD_VAR 0 6
12698: PPUSH
12699: CALL_OW 257
12703: PUSH
12704: LD_INT 17
12706: EQUAL
12707: IFFALSE 12728
// points := [ 100 , 50 , 75 ] ;
12709: LD_ADDR_VAR 0 9
12713: PUSH
12714: LD_INT 100
12716: PUSH
12717: LD_INT 50
12719: PUSH
12720: LD_INT 75
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12728: LD_VAR 0 6
12732: PPUSH
12733: CALL_OW 257
12737: PUSH
12738: LD_INT 15
12740: EQUAL
12741: IFFALSE 12762
// points := [ 10 , 5 , 3 ] ;
12743: LD_ADDR_VAR 0 9
12747: PUSH
12748: LD_INT 10
12750: PUSH
12751: LD_INT 5
12753: PUSH
12754: LD_INT 3
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: LIST
12761: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12762: LD_VAR 0 6
12766: PPUSH
12767: CALL_OW 257
12771: PUSH
12772: LD_INT 14
12774: EQUAL
12775: IFFALSE 12796
// points := [ 10 , 0 , 0 ] ;
12777: LD_ADDR_VAR 0 9
12781: PUSH
12782: LD_INT 10
12784: PUSH
12785: LD_INT 0
12787: PUSH
12788: LD_INT 0
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12796: LD_VAR 0 6
12800: PPUSH
12801: CALL_OW 257
12805: PUSH
12806: LD_INT 11
12808: EQUAL
12809: IFFALSE 12830
// points := [ 30 , 10 , 5 ] ;
12811: LD_ADDR_VAR 0 9
12815: PUSH
12816: LD_INT 30
12818: PUSH
12819: LD_INT 10
12821: PUSH
12822: LD_INT 5
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: LIST
12829: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12830: LD_VAR 0 1
12834: PPUSH
12835: LD_INT 5
12837: PPUSH
12838: CALL_OW 321
12842: PUSH
12843: LD_INT 2
12845: EQUAL
12846: IFFALSE 12863
// bpoints := bpoints * 1.8 ;
12848: LD_ADDR_VAR 0 10
12852: PUSH
12853: LD_VAR 0 10
12857: PUSH
12858: LD_REAL  1.80000000000000E+0000
12861: MUL
12862: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
12863: LD_VAR 0 6
12867: PPUSH
12868: CALL_OW 257
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: LD_INT 2
12878: PUSH
12879: LD_INT 3
12881: PUSH
12882: LD_INT 4
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: IN
12891: PUSH
12892: LD_VAR 0 1
12896: PPUSH
12897: LD_INT 51
12899: PPUSH
12900: CALL_OW 321
12904: PUSH
12905: LD_INT 2
12907: EQUAL
12908: AND
12909: IFFALSE 12926
// bpoints := bpoints * 1.2 ;
12911: LD_ADDR_VAR 0 10
12915: PUSH
12916: LD_VAR 0 10
12920: PUSH
12921: LD_REAL  1.20000000000000E+0000
12924: MUL
12925: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
12926: LD_VAR 0 6
12930: PPUSH
12931: CALL_OW 257
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: LD_INT 7
12941: PUSH
12942: LD_INT 9
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: IN
12950: PUSH
12951: LD_VAR 0 1
12955: PPUSH
12956: LD_INT 52
12958: PPUSH
12959: CALL_OW 321
12963: PUSH
12964: LD_INT 2
12966: EQUAL
12967: AND
12968: IFFALSE 12985
// bpoints := bpoints * 1.5 ;
12970: LD_ADDR_VAR 0 10
12974: PUSH
12975: LD_VAR 0 10
12979: PUSH
12980: LD_REAL  1.50000000000000E+0000
12983: MUL
12984: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
12985: LD_VAR 0 1
12989: PPUSH
12990: LD_INT 66
12992: PPUSH
12993: CALL_OW 321
12997: PUSH
12998: LD_INT 2
13000: EQUAL
13001: IFFALSE 13018
// bpoints := bpoints * 1.1 ;
13003: LD_ADDR_VAR 0 10
13007: PUSH
13008: LD_VAR 0 10
13012: PUSH
13013: LD_REAL  1.10000000000000E+0000
13016: MUL
13017: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13018: LD_ADDR_VAR 0 10
13022: PUSH
13023: LD_VAR 0 10
13027: PUSH
13028: LD_VAR 0 6
13032: PPUSH
13033: LD_INT 1
13035: PPUSH
13036: CALL_OW 259
13040: PUSH
13041: LD_REAL  1.15000000000000E+0000
13044: MUL
13045: MUL
13046: ST_TO_ADDR
// end ; unit_vehicle :
13047: GO 13875
13049: LD_INT 2
13051: DOUBLE
13052: EQUAL
13053: IFTRUE 13057
13055: GO 13863
13057: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13058: LD_VAR 0 6
13062: PPUSH
13063: CALL_OW 264
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: LD_INT 42
13073: PUSH
13074: LD_INT 24
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: IN
13082: IFFALSE 13103
// points := [ 25 , 5 , 3 ] ;
13084: LD_ADDR_VAR 0 9
13088: PUSH
13089: LD_INT 25
13091: PUSH
13092: LD_INT 5
13094: PUSH
13095: LD_INT 3
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13103: LD_VAR 0 6
13107: PPUSH
13108: CALL_OW 264
13112: PUSH
13113: LD_INT 4
13115: PUSH
13116: LD_INT 43
13118: PUSH
13119: LD_INT 25
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: LIST
13126: IN
13127: IFFALSE 13148
// points := [ 40 , 15 , 5 ] ;
13129: LD_ADDR_VAR 0 9
13133: PUSH
13134: LD_INT 40
13136: PUSH
13137: LD_INT 15
13139: PUSH
13140: LD_INT 5
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13148: LD_VAR 0 6
13152: PPUSH
13153: CALL_OW 264
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: LD_INT 23
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: IN
13168: IFFALSE 13189
// points := [ 7 , 25 , 8 ] ;
13170: LD_ADDR_VAR 0 9
13174: PUSH
13175: LD_INT 7
13177: PUSH
13178: LD_INT 25
13180: PUSH
13181: LD_INT 8
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: LIST
13188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13189: LD_VAR 0 6
13193: PPUSH
13194: CALL_OW 264
13198: PUSH
13199: LD_INT 5
13201: PUSH
13202: LD_INT 27
13204: PUSH
13205: LD_INT 44
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: IN
13213: IFFALSE 13234
// points := [ 14 , 50 , 16 ] ;
13215: LD_ADDR_VAR 0 9
13219: PUSH
13220: LD_INT 14
13222: PUSH
13223: LD_INT 50
13225: PUSH
13226: LD_INT 16
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: LIST
13233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13234: LD_VAR 0 6
13238: PPUSH
13239: CALL_OW 264
13243: PUSH
13244: LD_INT 6
13246: PUSH
13247: LD_INT 46
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: IN
13254: IFFALSE 13275
// points := [ 32 , 120 , 70 ] ;
13256: LD_ADDR_VAR 0 9
13260: PUSH
13261: LD_INT 32
13263: PUSH
13264: LD_INT 120
13266: PUSH
13267: LD_INT 70
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13275: LD_VAR 0 6
13279: PPUSH
13280: CALL_OW 264
13284: PUSH
13285: LD_INT 7
13287: PUSH
13288: LD_INT 28
13290: PUSH
13291: LD_INT 45
13293: PUSH
13294: LD_INT 92
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: IN
13303: IFFALSE 13324
// points := [ 35 , 20 , 45 ] ;
13305: LD_ADDR_VAR 0 9
13309: PUSH
13310: LD_INT 35
13312: PUSH
13313: LD_INT 20
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: LIST
13323: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13324: LD_VAR 0 6
13328: PPUSH
13329: CALL_OW 264
13333: PUSH
13334: LD_INT 47
13336: PUSH
13337: EMPTY
13338: LIST
13339: IN
13340: IFFALSE 13361
// points := [ 67 , 45 , 75 ] ;
13342: LD_ADDR_VAR 0 9
13346: PUSH
13347: LD_INT 67
13349: PUSH
13350: LD_INT 45
13352: PUSH
13353: LD_INT 75
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13361: LD_VAR 0 6
13365: PPUSH
13366: CALL_OW 264
13370: PUSH
13371: LD_INT 26
13373: PUSH
13374: EMPTY
13375: LIST
13376: IN
13377: IFFALSE 13398
// points := [ 120 , 30 , 80 ] ;
13379: LD_ADDR_VAR 0 9
13383: PUSH
13384: LD_INT 120
13386: PUSH
13387: LD_INT 30
13389: PUSH
13390: LD_INT 80
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13398: LD_VAR 0 6
13402: PPUSH
13403: CALL_OW 264
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: EMPTY
13412: LIST
13413: IN
13414: IFFALSE 13435
// points := [ 40 , 1 , 1 ] ;
13416: LD_ADDR_VAR 0 9
13420: PUSH
13421: LD_INT 40
13423: PUSH
13424: LD_INT 1
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: LIST
13434: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13435: LD_VAR 0 6
13439: PPUSH
13440: CALL_OW 264
13444: PUSH
13445: LD_INT 29
13447: PUSH
13448: EMPTY
13449: LIST
13450: IN
13451: IFFALSE 13472
// points := [ 70 , 200 , 400 ] ;
13453: LD_ADDR_VAR 0 9
13457: PUSH
13458: LD_INT 70
13460: PUSH
13461: LD_INT 200
13463: PUSH
13464: LD_INT 400
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13472: LD_VAR 0 6
13476: PPUSH
13477: CALL_OW 264
13481: PUSH
13482: LD_INT 14
13484: PUSH
13485: LD_INT 53
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: IN
13492: IFFALSE 13513
// points := [ 40 , 10 , 20 ] ;
13494: LD_ADDR_VAR 0 9
13498: PUSH
13499: LD_INT 40
13501: PUSH
13502: LD_INT 10
13504: PUSH
13505: LD_INT 20
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: LIST
13512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13513: LD_VAR 0 6
13517: PPUSH
13518: CALL_OW 264
13522: PUSH
13523: LD_INT 9
13525: PUSH
13526: EMPTY
13527: LIST
13528: IN
13529: IFFALSE 13550
// points := [ 5 , 70 , 20 ] ;
13531: LD_ADDR_VAR 0 9
13535: PUSH
13536: LD_INT 5
13538: PUSH
13539: LD_INT 70
13541: PUSH
13542: LD_INT 20
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13550: LD_VAR 0 6
13554: PPUSH
13555: CALL_OW 264
13559: PUSH
13560: LD_INT 10
13562: PUSH
13563: EMPTY
13564: LIST
13565: IN
13566: IFFALSE 13587
// points := [ 35 , 110 , 70 ] ;
13568: LD_ADDR_VAR 0 9
13572: PUSH
13573: LD_INT 35
13575: PUSH
13576: LD_INT 110
13578: PUSH
13579: LD_INT 70
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13587: LD_VAR 0 6
13591: PPUSH
13592: CALL_OW 265
13596: PUSH
13597: LD_INT 25
13599: EQUAL
13600: IFFALSE 13621
// points := [ 80 , 65 , 100 ] ;
13602: LD_ADDR_VAR 0 9
13606: PUSH
13607: LD_INT 80
13609: PUSH
13610: LD_INT 65
13612: PUSH
13613: LD_INT 100
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: LIST
13620: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13621: LD_VAR 0 6
13625: PPUSH
13626: CALL_OW 263
13630: PUSH
13631: LD_INT 1
13633: EQUAL
13634: IFFALSE 13669
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13636: LD_ADDR_VAR 0 10
13640: PUSH
13641: LD_VAR 0 10
13645: PUSH
13646: LD_VAR 0 6
13650: PPUSH
13651: CALL_OW 311
13655: PPUSH
13656: LD_INT 3
13658: PPUSH
13659: CALL_OW 259
13663: PUSH
13664: LD_INT 4
13666: MUL
13667: MUL
13668: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13669: LD_VAR 0 6
13673: PPUSH
13674: CALL_OW 263
13678: PUSH
13679: LD_INT 2
13681: EQUAL
13682: IFFALSE 13733
// begin j := IsControledBy ( i ) ;
13684: LD_ADDR_VAR 0 7
13688: PUSH
13689: LD_VAR 0 6
13693: PPUSH
13694: CALL_OW 312
13698: ST_TO_ADDR
// if j then
13699: LD_VAR 0 7
13703: IFFALSE 13733
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13705: LD_ADDR_VAR 0 10
13709: PUSH
13710: LD_VAR 0 10
13714: PUSH
13715: LD_VAR 0 7
13719: PPUSH
13720: LD_INT 3
13722: PPUSH
13723: CALL_OW 259
13727: PUSH
13728: LD_INT 3
13730: MUL
13731: MUL
13732: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13733: LD_VAR 0 6
13737: PPUSH
13738: CALL_OW 264
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: LD_INT 6
13748: PUSH
13749: LD_INT 46
13751: PUSH
13752: LD_INT 44
13754: PUSH
13755: LD_INT 47
13757: PUSH
13758: LD_INT 45
13760: PUSH
13761: LD_INT 28
13763: PUSH
13764: LD_INT 7
13766: PUSH
13767: LD_INT 27
13769: PUSH
13770: LD_INT 29
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: IN
13785: PUSH
13786: LD_VAR 0 1
13790: PPUSH
13791: LD_INT 52
13793: PPUSH
13794: CALL_OW 321
13798: PUSH
13799: LD_INT 2
13801: EQUAL
13802: AND
13803: IFFALSE 13820
// bpoints := bpoints * 1.2 ;
13805: LD_ADDR_VAR 0 10
13809: PUSH
13810: LD_VAR 0 10
13814: PUSH
13815: LD_REAL  1.20000000000000E+0000
13818: MUL
13819: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13820: LD_VAR 0 6
13824: PPUSH
13825: CALL_OW 264
13829: PUSH
13830: LD_INT 6
13832: PUSH
13833: LD_INT 46
13835: PUSH
13836: LD_INT 47
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: IN
13844: IFFALSE 13861
// bpoints := bpoints * 1.2 ;
13846: LD_ADDR_VAR 0 10
13850: PUSH
13851: LD_VAR 0 10
13855: PUSH
13856: LD_REAL  1.20000000000000E+0000
13859: MUL
13860: ST_TO_ADDR
// end ; unit_building :
13861: GO 13875
13863: LD_INT 3
13865: DOUBLE
13866: EQUAL
13867: IFTRUE 13871
13869: GO 13874
13871: POP
// ; end ;
13872: GO 13875
13874: POP
// for j = 1 to 3 do
13875: LD_ADDR_VAR 0 7
13879: PUSH
13880: DOUBLE
13881: LD_INT 1
13883: DEC
13884: ST_TO_ADDR
13885: LD_INT 3
13887: PUSH
13888: FOR_TO
13889: IFFALSE 13942
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
13891: LD_ADDR_VAR 0 5
13895: PUSH
13896: LD_VAR 0 5
13900: PPUSH
13901: LD_VAR 0 7
13905: PPUSH
13906: LD_VAR 0 5
13910: PUSH
13911: LD_VAR 0 7
13915: ARRAY
13916: PUSH
13917: LD_VAR 0 9
13921: PUSH
13922: LD_VAR 0 7
13926: ARRAY
13927: PUSH
13928: LD_VAR 0 10
13932: MUL
13933: PLUS
13934: PPUSH
13935: CALL_OW 1
13939: ST_TO_ADDR
13940: GO 13888
13942: POP
13943: POP
// end ;
13944: GO 12423
13946: POP
13947: POP
// result := Replace ( result , 4 , tmp ) ;
13948: LD_ADDR_VAR 0 5
13952: PUSH
13953: LD_VAR 0 5
13957: PPUSH
13958: LD_INT 4
13960: PPUSH
13961: LD_VAR 0 8
13965: PPUSH
13966: CALL_OW 1
13970: ST_TO_ADDR
// end ;
13971: LD_VAR 0 5
13975: RET
// export function DangerAtRange ( unit , range ) ; begin
13976: LD_INT 0
13978: PPUSH
// if not unit then
13979: LD_VAR 0 1
13983: NOT
13984: IFFALSE 13988
// exit ;
13986: GO 14033
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
13988: LD_ADDR_VAR 0 3
13992: PUSH
13993: LD_VAR 0 1
13997: PPUSH
13998: CALL_OW 255
14002: PPUSH
14003: LD_VAR 0 1
14007: PPUSH
14008: CALL_OW 250
14012: PPUSH
14013: LD_VAR 0 1
14017: PPUSH
14018: CALL_OW 251
14022: PPUSH
14023: LD_VAR 0 2
14027: PPUSH
14028: CALL 12275 0 4
14032: ST_TO_ADDR
// end ;
14033: LD_VAR 0 3
14037: RET
// export function DangerInArea ( side , area ) ; begin
14038: LD_INT 0
14040: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14041: LD_ADDR_VAR 0 3
14045: PUSH
14046: LD_VAR 0 2
14050: PPUSH
14051: LD_INT 81
14053: PUSH
14054: LD_VAR 0 1
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PPUSH
14063: CALL_OW 70
14067: ST_TO_ADDR
// end ;
14068: LD_VAR 0 3
14072: RET
// export function IsExtension ( b ) ; begin
14073: LD_INT 0
14075: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14076: LD_ADDR_VAR 0 2
14080: PUSH
14081: LD_VAR 0 1
14085: PUSH
14086: LD_INT 23
14088: PUSH
14089: LD_INT 20
14091: PUSH
14092: LD_INT 22
14094: PUSH
14095: LD_INT 17
14097: PUSH
14098: LD_INT 24
14100: PUSH
14101: LD_INT 21
14103: PUSH
14104: LD_INT 19
14106: PUSH
14107: LD_INT 16
14109: PUSH
14110: LD_INT 25
14112: PUSH
14113: LD_INT 18
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: IN
14128: ST_TO_ADDR
// end ;
14129: LD_VAR 0 2
14133: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14134: LD_INT 0
14136: PPUSH
14137: PPUSH
14138: PPUSH
// result := [ ] ;
14139: LD_ADDR_VAR 0 4
14143: PUSH
14144: EMPTY
14145: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14146: LD_ADDR_VAR 0 5
14150: PUSH
14151: LD_VAR 0 2
14155: PPUSH
14156: LD_INT 21
14158: PUSH
14159: LD_INT 3
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 70
14170: ST_TO_ADDR
// if not tmp then
14171: LD_VAR 0 5
14175: NOT
14176: IFFALSE 14180
// exit ;
14178: GO 14244
// if checkLink then
14180: LD_VAR 0 3
14184: IFFALSE 14234
// begin for i in tmp do
14186: LD_ADDR_VAR 0 6
14190: PUSH
14191: LD_VAR 0 5
14195: PUSH
14196: FOR_IN
14197: IFFALSE 14232
// if GetBase ( i ) <> base then
14199: LD_VAR 0 6
14203: PPUSH
14204: CALL_OW 274
14208: PUSH
14209: LD_VAR 0 1
14213: NONEQUAL
14214: IFFALSE 14230
// ComLinkToBase ( base , i ) ;
14216: LD_VAR 0 1
14220: PPUSH
14221: LD_VAR 0 6
14225: PPUSH
14226: CALL_OW 169
14230: GO 14196
14232: POP
14233: POP
// end ; result := tmp ;
14234: LD_ADDR_VAR 0 4
14238: PUSH
14239: LD_VAR 0 5
14243: ST_TO_ADDR
// end ;
14244: LD_VAR 0 4
14248: RET
// export function ComComplete ( units , b ) ; var i ; begin
14249: LD_INT 0
14251: PPUSH
14252: PPUSH
// if not units then
14253: LD_VAR 0 1
14257: NOT
14258: IFFALSE 14262
// exit ;
14260: GO 14352
// for i in units do
14262: LD_ADDR_VAR 0 4
14266: PUSH
14267: LD_VAR 0 1
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14350
// if BuildingStatus ( b ) = bs_build then
14275: LD_VAR 0 2
14279: PPUSH
14280: CALL_OW 461
14284: PUSH
14285: LD_INT 1
14287: EQUAL
14288: IFFALSE 14348
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14290: LD_VAR 0 4
14294: PPUSH
14295: LD_STRING h
14297: PUSH
14298: LD_VAR 0 2
14302: PPUSH
14303: CALL_OW 250
14307: PUSH
14308: LD_VAR 0 2
14312: PPUSH
14313: CALL_OW 251
14317: PUSH
14318: LD_VAR 0 2
14322: PUSH
14323: LD_INT 0
14325: PUSH
14326: LD_INT 0
14328: PUSH
14329: LD_INT 0
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: PPUSH
14344: CALL_OW 446
14348: GO 14272
14350: POP
14351: POP
// end ;
14352: LD_VAR 0 3
14356: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14357: LD_INT 0
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14365: LD_VAR 0 1
14369: NOT
14370: PUSH
14371: LD_VAR 0 1
14375: PPUSH
14376: CALL_OW 263
14380: PUSH
14381: LD_INT 2
14383: NONEQUAL
14384: OR
14385: IFFALSE 14389
// exit ;
14387: GO 14705
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14389: LD_ADDR_VAR 0 6
14393: PUSH
14394: LD_INT 22
14396: PUSH
14397: LD_VAR 0 1
14401: PPUSH
14402: CALL_OW 255
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 2
14413: PUSH
14414: LD_INT 30
14416: PUSH
14417: LD_INT 36
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PUSH
14424: LD_INT 34
14426: PUSH
14427: LD_INT 31
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: LIST
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PPUSH
14443: CALL_OW 69
14447: ST_TO_ADDR
// if not tmp then
14448: LD_VAR 0 6
14452: NOT
14453: IFFALSE 14457
// exit ;
14455: GO 14705
// result := [ ] ;
14457: LD_ADDR_VAR 0 2
14461: PUSH
14462: EMPTY
14463: ST_TO_ADDR
// for i in tmp do
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_VAR 0 6
14473: PUSH
14474: FOR_IN
14475: IFFALSE 14546
// begin t := UnitsInside ( i ) ;
14477: LD_ADDR_VAR 0 4
14481: PUSH
14482: LD_VAR 0 3
14486: PPUSH
14487: CALL_OW 313
14491: ST_TO_ADDR
// if t then
14492: LD_VAR 0 4
14496: IFFALSE 14544
// for j in t do
14498: LD_ADDR_VAR 0 7
14502: PUSH
14503: LD_VAR 0 4
14507: PUSH
14508: FOR_IN
14509: IFFALSE 14542
// result := Replace ( result , result + 1 , j ) ;
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: LD_VAR 0 2
14520: PPUSH
14521: LD_VAR 0 2
14525: PUSH
14526: LD_INT 1
14528: PLUS
14529: PPUSH
14530: LD_VAR 0 7
14534: PPUSH
14535: CALL_OW 1
14539: ST_TO_ADDR
14540: GO 14508
14542: POP
14543: POP
// end ;
14544: GO 14474
14546: POP
14547: POP
// if not result then
14548: LD_VAR 0 2
14552: NOT
14553: IFFALSE 14557
// exit ;
14555: GO 14705
// mech := result [ 1 ] ;
14557: LD_ADDR_VAR 0 5
14561: PUSH
14562: LD_VAR 0 2
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: ST_TO_ADDR
// if result > 1 then
14571: LD_VAR 0 2
14575: PUSH
14576: LD_INT 1
14578: GREATER
14579: IFFALSE 14691
// begin for i = 2 to result do
14581: LD_ADDR_VAR 0 3
14585: PUSH
14586: DOUBLE
14587: LD_INT 2
14589: DEC
14590: ST_TO_ADDR
14591: LD_VAR 0 2
14595: PUSH
14596: FOR_TO
14597: IFFALSE 14689
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14599: LD_ADDR_VAR 0 4
14603: PUSH
14604: LD_VAR 0 2
14608: PUSH
14609: LD_VAR 0 3
14613: ARRAY
14614: PPUSH
14615: LD_INT 3
14617: PPUSH
14618: CALL_OW 259
14622: PUSH
14623: LD_VAR 0 2
14627: PUSH
14628: LD_VAR 0 3
14632: ARRAY
14633: PPUSH
14634: CALL_OW 432
14638: MINUS
14639: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14640: LD_VAR 0 4
14644: PUSH
14645: LD_VAR 0 5
14649: PPUSH
14650: LD_INT 3
14652: PPUSH
14653: CALL_OW 259
14657: PUSH
14658: LD_VAR 0 5
14662: PPUSH
14663: CALL_OW 432
14667: MINUS
14668: GREATEREQUAL
14669: IFFALSE 14687
// mech := result [ i ] ;
14671: LD_ADDR_VAR 0 5
14675: PUSH
14676: LD_VAR 0 2
14680: PUSH
14681: LD_VAR 0 3
14685: ARRAY
14686: ST_TO_ADDR
// end ;
14687: GO 14596
14689: POP
14690: POP
// end ; ComLinkTo ( vehicle , mech ) ;
14691: LD_VAR 0 1
14695: PPUSH
14696: LD_VAR 0 5
14700: PPUSH
14701: CALL_OW 135
// end ;
14705: LD_VAR 0 2
14709: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14710: LD_INT 0
14712: PPUSH
14713: PPUSH
14714: PPUSH
14715: PPUSH
14716: PPUSH
14717: PPUSH
14718: PPUSH
14719: PPUSH
14720: PPUSH
14721: PPUSH
14722: PPUSH
14723: PPUSH
14724: PPUSH
// result := [ ] ;
14725: LD_ADDR_VAR 0 7
14729: PUSH
14730: EMPTY
14731: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14732: LD_VAR 0 1
14736: PPUSH
14737: CALL_OW 266
14741: PUSH
14742: LD_INT 0
14744: PUSH
14745: LD_INT 1
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: IN
14752: NOT
14753: IFFALSE 14757
// exit ;
14755: GO 16391
// if name then
14757: LD_VAR 0 3
14761: IFFALSE 14777
// SetBName ( base_dep , name ) ;
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_VAR 0 3
14772: PPUSH
14773: CALL_OW 500
// base := GetBase ( base_dep ) ;
14777: LD_ADDR_VAR 0 15
14781: PUSH
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 274
14791: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14792: LD_ADDR_VAR 0 16
14796: PUSH
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL_OW 255
14806: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14807: LD_ADDR_VAR 0 17
14811: PUSH
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 248
14821: ST_TO_ADDR
// if sources then
14822: LD_VAR 0 5
14826: IFFALSE 14873
// for i = 1 to 3 do
14828: LD_ADDR_VAR 0 8
14832: PUSH
14833: DOUBLE
14834: LD_INT 1
14836: DEC
14837: ST_TO_ADDR
14838: LD_INT 3
14840: PUSH
14841: FOR_TO
14842: IFFALSE 14871
// AddResourceType ( base , i , sources [ i ] ) ;
14844: LD_VAR 0 15
14848: PPUSH
14849: LD_VAR 0 8
14853: PPUSH
14854: LD_VAR 0 5
14858: PUSH
14859: LD_VAR 0 8
14863: ARRAY
14864: PPUSH
14865: CALL_OW 276
14869: GO 14841
14871: POP
14872: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
14873: LD_ADDR_VAR 0 18
14877: PUSH
14878: LD_VAR 0 15
14882: PPUSH
14883: LD_VAR 0 2
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL 14134 0 3
14895: ST_TO_ADDR
// InitHc ;
14896: CALL_OW 19
// InitUc ;
14900: CALL_OW 18
// uc_side := side ;
14904: LD_ADDR_OWVAR 20
14908: PUSH
14909: LD_VAR 0 16
14913: ST_TO_ADDR
// uc_nation := nation ;
14914: LD_ADDR_OWVAR 21
14918: PUSH
14919: LD_VAR 0 17
14923: ST_TO_ADDR
// if buildings then
14924: LD_VAR 0 18
14928: IFFALSE 16250
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
14930: LD_ADDR_VAR 0 19
14934: PUSH
14935: LD_VAR 0 18
14939: PPUSH
14940: LD_INT 2
14942: PUSH
14943: LD_INT 30
14945: PUSH
14946: LD_INT 29
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 30
14955: PUSH
14956: LD_INT 30
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 72
14972: ST_TO_ADDR
// if tmp then
14973: LD_VAR 0 19
14977: IFFALSE 15025
// for i in tmp do
14979: LD_ADDR_VAR 0 8
14983: PUSH
14984: LD_VAR 0 19
14988: PUSH
14989: FOR_IN
14990: IFFALSE 15023
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
14992: LD_VAR 0 8
14996: PPUSH
14997: CALL_OW 250
15001: PPUSH
15002: LD_VAR 0 8
15006: PPUSH
15007: CALL_OW 251
15011: PPUSH
15012: LD_VAR 0 16
15016: PPUSH
15017: CALL_OW 441
15021: GO 14989
15023: POP
15024: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15025: LD_VAR 0 18
15029: PPUSH
15030: LD_INT 2
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 32
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 33
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 72
15062: IFFALSE 15150
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15064: LD_ADDR_VAR 0 8
15068: PUSH
15069: LD_VAR 0 18
15073: PPUSH
15074: LD_INT 2
15076: PUSH
15077: LD_INT 30
15079: PUSH
15080: LD_INT 32
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 30
15089: PUSH
15090: LD_INT 33
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: LIST
15101: PPUSH
15102: CALL_OW 72
15106: PUSH
15107: FOR_IN
15108: IFFALSE 15148
// begin if not GetBWeapon ( i ) then
15110: LD_VAR 0 8
15114: PPUSH
15115: CALL_OW 269
15119: NOT
15120: IFFALSE 15146
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15122: LD_VAR 0 8
15126: PPUSH
15127: LD_VAR 0 8
15131: PPUSH
15132: LD_VAR 0 2
15136: PPUSH
15137: CALL 16396 0 2
15141: PPUSH
15142: CALL_OW 431
// end ;
15146: GO 15107
15148: POP
15149: POP
// end ; for i = 1 to personel do
15150: LD_ADDR_VAR 0 8
15154: PUSH
15155: DOUBLE
15156: LD_INT 1
15158: DEC
15159: ST_TO_ADDR
15160: LD_VAR 0 6
15164: PUSH
15165: FOR_TO
15166: IFFALSE 16230
// begin if i > 4 then
15168: LD_VAR 0 8
15172: PUSH
15173: LD_INT 4
15175: GREATER
15176: IFFALSE 15180
// break ;
15178: GO 16230
// case i of 1 :
15180: LD_VAR 0 8
15184: PUSH
15185: LD_INT 1
15187: DOUBLE
15188: EQUAL
15189: IFTRUE 15193
15191: GO 15273
15193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15194: LD_ADDR_VAR 0 12
15198: PUSH
15199: LD_VAR 0 18
15203: PPUSH
15204: LD_INT 22
15206: PUSH
15207: LD_VAR 0 16
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 58
15218: PUSH
15219: EMPTY
15220: LIST
15221: PUSH
15222: LD_INT 2
15224: PUSH
15225: LD_INT 30
15227: PUSH
15228: LD_INT 32
15230: PUSH
15231: EMPTY
15232: LIST
15233: LIST
15234: PUSH
15235: LD_INT 30
15237: PUSH
15238: LD_INT 4
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 30
15247: PUSH
15248: LD_INT 5
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: LIST
15265: PPUSH
15266: CALL_OW 72
15270: ST_TO_ADDR
15271: GO 15495
15273: LD_INT 2
15275: DOUBLE
15276: EQUAL
15277: IFTRUE 15281
15279: GO 15343
15281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15282: LD_ADDR_VAR 0 12
15286: PUSH
15287: LD_VAR 0 18
15291: PPUSH
15292: LD_INT 22
15294: PUSH
15295: LD_VAR 0 16
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 2
15306: PUSH
15307: LD_INT 30
15309: PUSH
15310: LD_INT 0
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 30
15319: PUSH
15320: LD_INT 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PPUSH
15336: CALL_OW 72
15340: ST_TO_ADDR
15341: GO 15495
15343: LD_INT 3
15345: DOUBLE
15346: EQUAL
15347: IFTRUE 15351
15349: GO 15413
15351: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15352: LD_ADDR_VAR 0 12
15356: PUSH
15357: LD_VAR 0 18
15361: PPUSH
15362: LD_INT 22
15364: PUSH
15365: LD_VAR 0 16
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 2
15376: PUSH
15377: LD_INT 30
15379: PUSH
15380: LD_INT 2
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 30
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PPUSH
15406: CALL_OW 72
15410: ST_TO_ADDR
15411: GO 15495
15413: LD_INT 4
15415: DOUBLE
15416: EQUAL
15417: IFTRUE 15421
15419: GO 15494
15421: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15422: LD_ADDR_VAR 0 12
15426: PUSH
15427: LD_VAR 0 18
15431: PPUSH
15432: LD_INT 22
15434: PUSH
15435: LD_VAR 0 16
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 30
15449: PUSH
15450: LD_INT 6
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 7
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 30
15469: PUSH
15470: LD_INT 8
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 72
15491: ST_TO_ADDR
15492: GO 15495
15494: POP
// if i = 1 then
15495: LD_VAR 0 8
15499: PUSH
15500: LD_INT 1
15502: EQUAL
15503: IFFALSE 15614
// begin tmp := [ ] ;
15505: LD_ADDR_VAR 0 19
15509: PUSH
15510: EMPTY
15511: ST_TO_ADDR
// for j in f do
15512: LD_ADDR_VAR 0 9
15516: PUSH
15517: LD_VAR 0 12
15521: PUSH
15522: FOR_IN
15523: IFFALSE 15596
// if GetBType ( j ) = b_bunker then
15525: LD_VAR 0 9
15529: PPUSH
15530: CALL_OW 266
15534: PUSH
15535: LD_INT 32
15537: EQUAL
15538: IFFALSE 15565
// tmp := Insert ( tmp , 1 , j ) else
15540: LD_ADDR_VAR 0 19
15544: PUSH
15545: LD_VAR 0 19
15549: PPUSH
15550: LD_INT 1
15552: PPUSH
15553: LD_VAR 0 9
15557: PPUSH
15558: CALL_OW 2
15562: ST_TO_ADDR
15563: GO 15594
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15565: LD_ADDR_VAR 0 19
15569: PUSH
15570: LD_VAR 0 19
15574: PPUSH
15575: LD_VAR 0 19
15579: PUSH
15580: LD_INT 1
15582: PLUS
15583: PPUSH
15584: LD_VAR 0 9
15588: PPUSH
15589: CALL_OW 2
15593: ST_TO_ADDR
15594: GO 15522
15596: POP
15597: POP
// if tmp then
15598: LD_VAR 0 19
15602: IFFALSE 15614
// f := tmp ;
15604: LD_ADDR_VAR 0 12
15608: PUSH
15609: LD_VAR 0 19
15613: ST_TO_ADDR
// end ; x := personel [ i ] ;
15614: LD_ADDR_VAR 0 13
15618: PUSH
15619: LD_VAR 0 6
15623: PUSH
15624: LD_VAR 0 8
15628: ARRAY
15629: ST_TO_ADDR
// if x = - 1 then
15630: LD_VAR 0 13
15634: PUSH
15635: LD_INT 1
15637: NEG
15638: EQUAL
15639: IFFALSE 15848
// begin for j in f do
15641: LD_ADDR_VAR 0 9
15645: PUSH
15646: LD_VAR 0 12
15650: PUSH
15651: FOR_IN
15652: IFFALSE 15844
// repeat InitHc ;
15654: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15658: LD_VAR 0 9
15662: PPUSH
15663: CALL_OW 266
15667: PUSH
15668: LD_INT 5
15670: EQUAL
15671: IFFALSE 15741
// begin if UnitsInside ( j ) < 3 then
15673: LD_VAR 0 9
15677: PPUSH
15678: CALL_OW 313
15682: PUSH
15683: LD_INT 3
15685: LESS
15686: IFFALSE 15722
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15688: LD_INT 0
15690: PPUSH
15691: LD_INT 5
15693: PUSH
15694: LD_INT 8
15696: PUSH
15697: LD_INT 9
15699: PUSH
15700: EMPTY
15701: LIST
15702: LIST
15703: LIST
15704: PUSH
15705: LD_VAR 0 17
15709: ARRAY
15710: PPUSH
15711: LD_VAR 0 4
15715: PPUSH
15716: CALL_OW 380
15720: GO 15739
// PrepareHuman ( false , i , skill ) ;
15722: LD_INT 0
15724: PPUSH
15725: LD_VAR 0 8
15729: PPUSH
15730: LD_VAR 0 4
15734: PPUSH
15735: CALL_OW 380
// end else
15739: GO 15758
// PrepareHuman ( false , i , skill ) ;
15741: LD_INT 0
15743: PPUSH
15744: LD_VAR 0 8
15748: PPUSH
15749: LD_VAR 0 4
15753: PPUSH
15754: CALL_OW 380
// un := CreateHuman ;
15758: LD_ADDR_VAR 0 14
15762: PUSH
15763: CALL_OW 44
15767: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15768: LD_ADDR_VAR 0 7
15772: PUSH
15773: LD_VAR 0 7
15777: PPUSH
15778: LD_INT 1
15780: PPUSH
15781: LD_VAR 0 14
15785: PPUSH
15786: CALL_OW 2
15790: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15791: LD_VAR 0 14
15795: PPUSH
15796: LD_VAR 0 9
15800: PPUSH
15801: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15805: LD_VAR 0 9
15809: PPUSH
15810: CALL_OW 313
15814: PUSH
15815: LD_INT 6
15817: EQUAL
15818: PUSH
15819: LD_VAR 0 9
15823: PPUSH
15824: CALL_OW 266
15828: PUSH
15829: LD_INT 32
15831: PUSH
15832: LD_INT 31
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: IN
15839: OR
15840: IFFALSE 15654
15842: GO 15651
15844: POP
15845: POP
// end else
15846: GO 16228
// for j = 1 to x do
15848: LD_ADDR_VAR 0 9
15852: PUSH
15853: DOUBLE
15854: LD_INT 1
15856: DEC
15857: ST_TO_ADDR
15858: LD_VAR 0 13
15862: PUSH
15863: FOR_TO
15864: IFFALSE 16226
// begin InitHc ;
15866: CALL_OW 19
// if not f then
15870: LD_VAR 0 12
15874: NOT
15875: IFFALSE 15964
// begin PrepareHuman ( false , i , skill ) ;
15877: LD_INT 0
15879: PPUSH
15880: LD_VAR 0 8
15884: PPUSH
15885: LD_VAR 0 4
15889: PPUSH
15890: CALL_OW 380
// un := CreateHuman ;
15894: LD_ADDR_VAR 0 14
15898: PUSH
15899: CALL_OW 44
15903: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15904: LD_ADDR_VAR 0 7
15908: PUSH
15909: LD_VAR 0 7
15913: PPUSH
15914: LD_INT 1
15916: PPUSH
15917: LD_VAR 0 14
15921: PPUSH
15922: CALL_OW 2
15926: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
15927: LD_VAR 0 14
15931: PPUSH
15932: LD_VAR 0 1
15936: PPUSH
15937: CALL_OW 250
15941: PPUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 251
15951: PPUSH
15952: LD_INT 10
15954: PPUSH
15955: LD_INT 0
15957: PPUSH
15958: CALL_OW 50
// continue ;
15962: GO 15863
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
15964: LD_VAR 0 12
15968: PUSH
15969: LD_INT 1
15971: ARRAY
15972: PPUSH
15973: CALL_OW 313
15977: PUSH
15978: LD_VAR 0 12
15982: PUSH
15983: LD_INT 1
15985: ARRAY
15986: PPUSH
15987: CALL_OW 266
15991: PUSH
15992: LD_INT 32
15994: PUSH
15995: LD_INT 31
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: IN
16002: AND
16003: PUSH
16004: LD_VAR 0 12
16008: PUSH
16009: LD_INT 1
16011: ARRAY
16012: PPUSH
16013: CALL_OW 313
16017: PUSH
16018: LD_INT 6
16020: EQUAL
16021: OR
16022: IFFALSE 16042
// f := Delete ( f , 1 ) ;
16024: LD_ADDR_VAR 0 12
16028: PUSH
16029: LD_VAR 0 12
16033: PPUSH
16034: LD_INT 1
16036: PPUSH
16037: CALL_OW 3
16041: ST_TO_ADDR
// if not f then
16042: LD_VAR 0 12
16046: NOT
16047: IFFALSE 16065
// begin x := x + 2 ;
16049: LD_ADDR_VAR 0 13
16053: PUSH
16054: LD_VAR 0 13
16058: PUSH
16059: LD_INT 2
16061: PLUS
16062: ST_TO_ADDR
// continue ;
16063: GO 15863
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16065: LD_VAR 0 12
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PPUSH
16074: CALL_OW 266
16078: PUSH
16079: LD_INT 5
16081: EQUAL
16082: IFFALSE 16156
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16084: LD_VAR 0 12
16088: PUSH
16089: LD_INT 1
16091: ARRAY
16092: PPUSH
16093: CALL_OW 313
16097: PUSH
16098: LD_INT 3
16100: LESS
16101: IFFALSE 16137
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16103: LD_INT 0
16105: PPUSH
16106: LD_INT 5
16108: PUSH
16109: LD_INT 8
16111: PUSH
16112: LD_INT 9
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: LD_VAR 0 17
16124: ARRAY
16125: PPUSH
16126: LD_VAR 0 4
16130: PPUSH
16131: CALL_OW 380
16135: GO 16154
// PrepareHuman ( false , i , skill ) ;
16137: LD_INT 0
16139: PPUSH
16140: LD_VAR 0 8
16144: PPUSH
16145: LD_VAR 0 4
16149: PPUSH
16150: CALL_OW 380
// end else
16154: GO 16173
// PrepareHuman ( false , i , skill ) ;
16156: LD_INT 0
16158: PPUSH
16159: LD_VAR 0 8
16163: PPUSH
16164: LD_VAR 0 4
16168: PPUSH
16169: CALL_OW 380
// un := CreateHuman ;
16173: LD_ADDR_VAR 0 14
16177: PUSH
16178: CALL_OW 44
16182: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16183: LD_ADDR_VAR 0 7
16187: PUSH
16188: LD_VAR 0 7
16192: PPUSH
16193: LD_INT 1
16195: PPUSH
16196: LD_VAR 0 14
16200: PPUSH
16201: CALL_OW 2
16205: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16206: LD_VAR 0 14
16210: PPUSH
16211: LD_VAR 0 12
16215: PUSH
16216: LD_INT 1
16218: ARRAY
16219: PPUSH
16220: CALL_OW 52
// end ;
16224: GO 15863
16226: POP
16227: POP
// end ;
16228: GO 15165
16230: POP
16231: POP
// result := result ^ buildings ;
16232: LD_ADDR_VAR 0 7
16236: PUSH
16237: LD_VAR 0 7
16241: PUSH
16242: LD_VAR 0 18
16246: ADD
16247: ST_TO_ADDR
// end else
16248: GO 16391
// begin for i = 1 to personel do
16250: LD_ADDR_VAR 0 8
16254: PUSH
16255: DOUBLE
16256: LD_INT 1
16258: DEC
16259: ST_TO_ADDR
16260: LD_VAR 0 6
16264: PUSH
16265: FOR_TO
16266: IFFALSE 16389
// begin if i > 4 then
16268: LD_VAR 0 8
16272: PUSH
16273: LD_INT 4
16275: GREATER
16276: IFFALSE 16280
// break ;
16278: GO 16389
// x := personel [ i ] ;
16280: LD_ADDR_VAR 0 13
16284: PUSH
16285: LD_VAR 0 6
16289: PUSH
16290: LD_VAR 0 8
16294: ARRAY
16295: ST_TO_ADDR
// if x = - 1 then
16296: LD_VAR 0 13
16300: PUSH
16301: LD_INT 1
16303: NEG
16304: EQUAL
16305: IFFALSE 16309
// continue ;
16307: GO 16265
// PrepareHuman ( false , i , skill ) ;
16309: LD_INT 0
16311: PPUSH
16312: LD_VAR 0 8
16316: PPUSH
16317: LD_VAR 0 4
16321: PPUSH
16322: CALL_OW 380
// un := CreateHuman ;
16326: LD_ADDR_VAR 0 14
16330: PUSH
16331: CALL_OW 44
16335: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16336: LD_VAR 0 14
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 250
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: CALL_OW 251
16360: PPUSH
16361: LD_INT 10
16363: PPUSH
16364: LD_INT 0
16366: PPUSH
16367: CALL_OW 50
// result := result ^ un ;
16371: LD_ADDR_VAR 0 7
16375: PUSH
16376: LD_VAR 0 7
16380: PUSH
16381: LD_VAR 0 14
16385: ADD
16386: ST_TO_ADDR
// end ;
16387: GO 16265
16389: POP
16390: POP
// end ; end ;
16391: LD_VAR 0 7
16395: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16396: LD_INT 0
16398: PPUSH
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
// result := false ;
16414: LD_ADDR_VAR 0 3
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16422: LD_VAR 0 1
16426: NOT
16427: PUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 266
16437: PUSH
16438: LD_INT 32
16440: PUSH
16441: LD_INT 33
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: IN
16448: NOT
16449: OR
16450: IFFALSE 16454
// exit ;
16452: GO 17563
// nat := GetNation ( tower ) ;
16454: LD_ADDR_VAR 0 12
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 248
16468: ST_TO_ADDR
// side := GetSide ( tower ) ;
16469: LD_ADDR_VAR 0 16
16473: PUSH
16474: LD_VAR 0 1
16478: PPUSH
16479: CALL_OW 255
16483: ST_TO_ADDR
// x := GetX ( tower ) ;
16484: LD_ADDR_VAR 0 10
16488: PUSH
16489: LD_VAR 0 1
16493: PPUSH
16494: CALL_OW 250
16498: ST_TO_ADDR
// y := GetY ( tower ) ;
16499: LD_ADDR_VAR 0 11
16503: PUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 251
16513: ST_TO_ADDR
// if not x or not y then
16514: LD_VAR 0 10
16518: NOT
16519: PUSH
16520: LD_VAR 0 11
16524: NOT
16525: OR
16526: IFFALSE 16530
// exit ;
16528: GO 17563
// weapon := 0 ;
16530: LD_ADDR_VAR 0 18
16534: PUSH
16535: LD_INT 0
16537: ST_TO_ADDR
// fac_list := [ ] ;
16538: LD_ADDR_VAR 0 17
16542: PUSH
16543: EMPTY
16544: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16545: LD_ADDR_VAR 0 6
16549: PUSH
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 274
16559: PPUSH
16560: LD_VAR 0 2
16564: PPUSH
16565: LD_INT 0
16567: PPUSH
16568: CALL 14134 0 3
16572: PPUSH
16573: LD_INT 30
16575: PUSH
16576: LD_INT 3
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PPUSH
16583: CALL_OW 72
16587: ST_TO_ADDR
// if not factories then
16588: LD_VAR 0 6
16592: NOT
16593: IFFALSE 16597
// exit ;
16595: GO 17563
// for i in factories do
16597: LD_ADDR_VAR 0 8
16601: PUSH
16602: LD_VAR 0 6
16606: PUSH
16607: FOR_IN
16608: IFFALSE 16633
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16610: LD_ADDR_VAR 0 17
16614: PUSH
16615: LD_VAR 0 17
16619: PUSH
16620: LD_VAR 0 8
16624: PPUSH
16625: CALL_OW 478
16629: UNION
16630: ST_TO_ADDR
16631: GO 16607
16633: POP
16634: POP
// if not fac_list then
16635: LD_VAR 0 17
16639: NOT
16640: IFFALSE 16644
// exit ;
16642: GO 17563
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16644: LD_ADDR_VAR 0 5
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: LD_INT 5
16654: PUSH
16655: LD_INT 9
16657: PUSH
16658: LD_INT 10
16660: PUSH
16661: LD_INT 6
16663: PUSH
16664: LD_INT 7
16666: PUSH
16667: LD_INT 11
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 27
16681: PUSH
16682: LD_INT 28
16684: PUSH
16685: LD_INT 26
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: EMPTY
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 43
16699: PUSH
16700: LD_INT 44
16702: PUSH
16703: LD_INT 46
16705: PUSH
16706: LD_INT 45
16708: PUSH
16709: LD_INT 47
16711: PUSH
16712: LD_INT 49
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: LIST
16727: PUSH
16728: LD_VAR 0 12
16732: ARRAY
16733: ST_TO_ADDR
// list := list isect fac_list ;
16734: LD_ADDR_VAR 0 5
16738: PUSH
16739: LD_VAR 0 5
16743: PUSH
16744: LD_VAR 0 17
16748: ISECT
16749: ST_TO_ADDR
// if not list then
16750: LD_VAR 0 5
16754: NOT
16755: IFFALSE 16759
// exit ;
16757: GO 17563
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16759: LD_VAR 0 12
16763: PUSH
16764: LD_INT 3
16766: EQUAL
16767: PUSH
16768: LD_INT 49
16770: PUSH
16771: LD_VAR 0 5
16775: IN
16776: AND
16777: PUSH
16778: LD_INT 31
16780: PPUSH
16781: LD_VAR 0 16
16785: PPUSH
16786: CALL_OW 321
16790: PUSH
16791: LD_INT 2
16793: EQUAL
16794: AND
16795: IFFALSE 16855
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16797: LD_INT 22
16799: PUSH
16800: LD_VAR 0 16
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: PUSH
16809: LD_INT 35
16811: PUSH
16812: LD_INT 49
16814: PUSH
16815: EMPTY
16816: LIST
16817: LIST
16818: PUSH
16819: LD_INT 91
16821: PUSH
16822: LD_VAR 0 1
16826: PUSH
16827: LD_INT 10
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: LIST
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: LIST
16839: PPUSH
16840: CALL_OW 69
16844: NOT
16845: IFFALSE 16855
// weapon := ru_time_lapser ;
16847: LD_ADDR_VAR 0 18
16851: PUSH
16852: LD_INT 49
16854: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16855: LD_VAR 0 12
16859: PUSH
16860: LD_INT 1
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: IN
16870: PUSH
16871: LD_INT 11
16873: PUSH
16874: LD_VAR 0 5
16878: IN
16879: PUSH
16880: LD_INT 30
16882: PUSH
16883: LD_VAR 0 5
16887: IN
16888: OR
16889: AND
16890: PUSH
16891: LD_INT 6
16893: PPUSH
16894: LD_VAR 0 16
16898: PPUSH
16899: CALL_OW 321
16903: PUSH
16904: LD_INT 2
16906: EQUAL
16907: AND
16908: IFFALSE 17073
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
16910: LD_INT 22
16912: PUSH
16913: LD_VAR 0 16
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 2
16924: PUSH
16925: LD_INT 35
16927: PUSH
16928: LD_INT 11
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 35
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 91
16952: PUSH
16953: LD_VAR 0 1
16957: PUSH
16958: LD_INT 18
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: LIST
16970: PPUSH
16971: CALL_OW 69
16975: NOT
16976: PUSH
16977: LD_INT 22
16979: PUSH
16980: LD_VAR 0 16
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 2
16991: PUSH
16992: LD_INT 30
16994: PUSH
16995: LD_INT 32
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PUSH
17002: LD_INT 30
17004: PUSH
17005: LD_INT 33
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 91
17019: PUSH
17020: LD_VAR 0 1
17024: PUSH
17025: LD_INT 12
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: PPUSH
17041: CALL_OW 69
17045: PUSH
17046: LD_INT 2
17048: GREATER
17049: AND
17050: IFFALSE 17073
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17052: LD_ADDR_VAR 0 18
17056: PUSH
17057: LD_INT 11
17059: PUSH
17060: LD_INT 30
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_VAR 0 12
17071: ARRAY
17072: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17073: LD_VAR 0 18
17077: NOT
17078: PUSH
17079: LD_INT 40
17081: PPUSH
17082: LD_VAR 0 16
17086: PPUSH
17087: CALL_OW 321
17091: PUSH
17092: LD_INT 2
17094: EQUAL
17095: AND
17096: PUSH
17097: LD_INT 7
17099: PUSH
17100: LD_VAR 0 5
17104: IN
17105: PUSH
17106: LD_INT 28
17108: PUSH
17109: LD_VAR 0 5
17113: IN
17114: OR
17115: PUSH
17116: LD_INT 45
17118: PUSH
17119: LD_VAR 0 5
17123: IN
17124: OR
17125: AND
17126: IFFALSE 17380
// begin hex := GetHexInfo ( x , y ) ;
17128: LD_ADDR_VAR 0 4
17132: PUSH
17133: LD_VAR 0 10
17137: PPUSH
17138: LD_VAR 0 11
17142: PPUSH
17143: CALL_OW 546
17147: ST_TO_ADDR
// if hex [ 1 ] then
17148: LD_VAR 0 4
17152: PUSH
17153: LD_INT 1
17155: ARRAY
17156: IFFALSE 17160
// exit ;
17158: GO 17563
// height := hex [ 2 ] ;
17160: LD_ADDR_VAR 0 15
17164: PUSH
17165: LD_VAR 0 4
17169: PUSH
17170: LD_INT 2
17172: ARRAY
17173: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17174: LD_ADDR_VAR 0 14
17178: PUSH
17179: LD_INT 0
17181: PUSH
17182: LD_INT 2
17184: PUSH
17185: LD_INT 3
17187: PUSH
17188: LD_INT 5
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: ST_TO_ADDR
// for i in tmp do
17197: LD_ADDR_VAR 0 8
17201: PUSH
17202: LD_VAR 0 14
17206: PUSH
17207: FOR_IN
17208: IFFALSE 17378
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17210: LD_ADDR_VAR 0 9
17214: PUSH
17215: LD_VAR 0 10
17219: PPUSH
17220: LD_VAR 0 8
17224: PPUSH
17225: LD_INT 5
17227: PPUSH
17228: CALL_OW 272
17232: PUSH
17233: LD_VAR 0 11
17237: PPUSH
17238: LD_VAR 0 8
17242: PPUSH
17243: LD_INT 5
17245: PPUSH
17246: CALL_OW 273
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17255: LD_VAR 0 9
17259: PUSH
17260: LD_INT 1
17262: ARRAY
17263: PPUSH
17264: LD_VAR 0 9
17268: PUSH
17269: LD_INT 2
17271: ARRAY
17272: PPUSH
17273: CALL_OW 488
17277: IFFALSE 17376
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17279: LD_ADDR_VAR 0 4
17283: PUSH
17284: LD_VAR 0 9
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PPUSH
17293: LD_VAR 0 9
17297: PUSH
17298: LD_INT 2
17300: ARRAY
17301: PPUSH
17302: CALL_OW 546
17306: ST_TO_ADDR
// if hex [ 1 ] then
17307: LD_VAR 0 4
17311: PUSH
17312: LD_INT 1
17314: ARRAY
17315: IFFALSE 17319
// continue ;
17317: GO 17207
// h := hex [ 2 ] ;
17319: LD_ADDR_VAR 0 13
17323: PUSH
17324: LD_VAR 0 4
17328: PUSH
17329: LD_INT 2
17331: ARRAY
17332: ST_TO_ADDR
// if h + 7 < height then
17333: LD_VAR 0 13
17337: PUSH
17338: LD_INT 7
17340: PLUS
17341: PUSH
17342: LD_VAR 0 15
17346: LESS
17347: IFFALSE 17376
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17349: LD_ADDR_VAR 0 18
17353: PUSH
17354: LD_INT 7
17356: PUSH
17357: LD_INT 28
17359: PUSH
17360: LD_INT 45
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PUSH
17368: LD_VAR 0 12
17372: ARRAY
17373: ST_TO_ADDR
// break ;
17374: GO 17378
// end ; end ; end ;
17376: GO 17207
17378: POP
17379: POP
// end ; if not weapon then
17380: LD_VAR 0 18
17384: NOT
17385: IFFALSE 17445
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17387: LD_ADDR_VAR 0 5
17391: PUSH
17392: LD_VAR 0 5
17396: PUSH
17397: LD_INT 11
17399: PUSH
17400: LD_INT 30
17402: PUSH
17403: LD_INT 49
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: LIST
17410: DIFF
17411: ST_TO_ADDR
// if not list then
17412: LD_VAR 0 5
17416: NOT
17417: IFFALSE 17421
// exit ;
17419: GO 17563
// weapon := list [ rand ( 1 , list ) ] ;
17421: LD_ADDR_VAR 0 18
17425: PUSH
17426: LD_VAR 0 5
17430: PUSH
17431: LD_INT 1
17433: PPUSH
17434: LD_VAR 0 5
17438: PPUSH
17439: CALL_OW 12
17443: ARRAY
17444: ST_TO_ADDR
// end ; if weapon then
17445: LD_VAR 0 18
17449: IFFALSE 17563
// begin tmp := CostOfWeapon ( weapon ) ;
17451: LD_ADDR_VAR 0 14
17455: PUSH
17456: LD_VAR 0 18
17460: PPUSH
17461: CALL_OW 451
17465: ST_TO_ADDR
// j := GetBase ( tower ) ;
17466: LD_ADDR_VAR 0 9
17470: PUSH
17471: LD_VAR 0 1
17475: PPUSH
17476: CALL_OW 274
17480: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17481: LD_VAR 0 9
17485: PPUSH
17486: LD_INT 1
17488: PPUSH
17489: CALL_OW 275
17493: PUSH
17494: LD_VAR 0 14
17498: PUSH
17499: LD_INT 1
17501: ARRAY
17502: GREATEREQUAL
17503: PUSH
17504: LD_VAR 0 9
17508: PPUSH
17509: LD_INT 2
17511: PPUSH
17512: CALL_OW 275
17516: PUSH
17517: LD_VAR 0 14
17521: PUSH
17522: LD_INT 2
17524: ARRAY
17525: GREATEREQUAL
17526: AND
17527: PUSH
17528: LD_VAR 0 9
17532: PPUSH
17533: LD_INT 3
17535: PPUSH
17536: CALL_OW 275
17540: PUSH
17541: LD_VAR 0 14
17545: PUSH
17546: LD_INT 3
17548: ARRAY
17549: GREATEREQUAL
17550: AND
17551: IFFALSE 17563
// result := weapon ;
17553: LD_ADDR_VAR 0 3
17557: PUSH
17558: LD_VAR 0 18
17562: ST_TO_ADDR
// end ; end ;
17563: LD_VAR 0 3
17567: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17568: LD_INT 0
17570: PPUSH
17571: PPUSH
// result := true ;
17572: LD_ADDR_VAR 0 3
17576: PUSH
17577: LD_INT 1
17579: ST_TO_ADDR
// if array1 = array2 then
17580: LD_VAR 0 1
17584: PUSH
17585: LD_VAR 0 2
17589: EQUAL
17590: IFFALSE 17650
// begin for i = 1 to array1 do
17592: LD_ADDR_VAR 0 4
17596: PUSH
17597: DOUBLE
17598: LD_INT 1
17600: DEC
17601: ST_TO_ADDR
17602: LD_VAR 0 1
17606: PUSH
17607: FOR_TO
17608: IFFALSE 17646
// if array1 [ i ] <> array2 [ i ] then
17610: LD_VAR 0 1
17614: PUSH
17615: LD_VAR 0 4
17619: ARRAY
17620: PUSH
17621: LD_VAR 0 2
17625: PUSH
17626: LD_VAR 0 4
17630: ARRAY
17631: NONEQUAL
17632: IFFALSE 17644
// begin result := false ;
17634: LD_ADDR_VAR 0 3
17638: PUSH
17639: LD_INT 0
17641: ST_TO_ADDR
// break ;
17642: GO 17646
// end ;
17644: GO 17607
17646: POP
17647: POP
// end else
17648: GO 17658
// result := false ;
17650: LD_ADDR_VAR 0 3
17654: PUSH
17655: LD_INT 0
17657: ST_TO_ADDR
// end ;
17658: LD_VAR 0 3
17662: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17663: LD_INT 0
17665: PPUSH
17666: PPUSH
// if not array1 or not array2 then
17667: LD_VAR 0 1
17671: NOT
17672: PUSH
17673: LD_VAR 0 2
17677: NOT
17678: OR
17679: IFFALSE 17683
// exit ;
17681: GO 17747
// result := true ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// for i = 1 to array1 do
17691: LD_ADDR_VAR 0 4
17695: PUSH
17696: DOUBLE
17697: LD_INT 1
17699: DEC
17700: ST_TO_ADDR
17701: LD_VAR 0 1
17705: PUSH
17706: FOR_TO
17707: IFFALSE 17745
// if array1 [ i ] <> array2 [ i ] then
17709: LD_VAR 0 1
17713: PUSH
17714: LD_VAR 0 4
17718: ARRAY
17719: PUSH
17720: LD_VAR 0 2
17724: PUSH
17725: LD_VAR 0 4
17729: ARRAY
17730: NONEQUAL
17731: IFFALSE 17743
// begin result := false ;
17733: LD_ADDR_VAR 0 3
17737: PUSH
17738: LD_INT 0
17740: ST_TO_ADDR
// break ;
17741: GO 17745
// end ;
17743: GO 17706
17745: POP
17746: POP
// end ;
17747: LD_VAR 0 3
17751: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17752: LD_INT 0
17754: PPUSH
17755: PPUSH
17756: PPUSH
// pom := GetBase ( fac ) ;
17757: LD_ADDR_VAR 0 5
17761: PUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: CALL_OW 274
17771: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17772: LD_ADDR_VAR 0 4
17776: PUSH
17777: LD_VAR 0 2
17781: PUSH
17782: LD_INT 1
17784: ARRAY
17785: PPUSH
17786: LD_VAR 0 2
17790: PUSH
17791: LD_INT 2
17793: ARRAY
17794: PPUSH
17795: LD_VAR 0 2
17799: PUSH
17800: LD_INT 3
17802: ARRAY
17803: PPUSH
17804: LD_VAR 0 2
17808: PUSH
17809: LD_INT 4
17811: ARRAY
17812: PPUSH
17813: CALL_OW 449
17817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17818: LD_ADDR_VAR 0 3
17822: PUSH
17823: LD_VAR 0 5
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 275
17835: PUSH
17836: LD_VAR 0 4
17840: PUSH
17841: LD_INT 1
17843: ARRAY
17844: GREATEREQUAL
17845: PUSH
17846: LD_VAR 0 5
17850: PPUSH
17851: LD_INT 2
17853: PPUSH
17854: CALL_OW 275
17858: PUSH
17859: LD_VAR 0 4
17863: PUSH
17864: LD_INT 2
17866: ARRAY
17867: GREATEREQUAL
17868: AND
17869: PUSH
17870: LD_VAR 0 5
17874: PPUSH
17875: LD_INT 3
17877: PPUSH
17878: CALL_OW 275
17882: PUSH
17883: LD_VAR 0 4
17887: PUSH
17888: LD_INT 3
17890: ARRAY
17891: GREATEREQUAL
17892: AND
17893: ST_TO_ADDR
// end ;
17894: LD_VAR 0 3
17898: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
17899: LD_INT 0
17901: PPUSH
17902: PPUSH
17903: PPUSH
17904: PPUSH
// pom := GetBase ( building ) ;
17905: LD_ADDR_VAR 0 3
17909: PUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 274
17919: ST_TO_ADDR
// if not pom then
17920: LD_VAR 0 3
17924: NOT
17925: IFFALSE 17929
// exit ;
17927: GO 18099
// btype := GetBType ( building ) ;
17929: LD_ADDR_VAR 0 5
17933: PUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 266
17943: ST_TO_ADDR
// if btype = b_armoury then
17944: LD_VAR 0 5
17948: PUSH
17949: LD_INT 4
17951: EQUAL
17952: IFFALSE 17962
// btype := b_barracks ;
17954: LD_ADDR_VAR 0 5
17958: PUSH
17959: LD_INT 5
17961: ST_TO_ADDR
// if btype = b_depot then
17962: LD_VAR 0 5
17966: PUSH
17967: LD_INT 0
17969: EQUAL
17970: IFFALSE 17980
// btype := b_warehouse ;
17972: LD_ADDR_VAR 0 5
17976: PUSH
17977: LD_INT 1
17979: ST_TO_ADDR
// if btype = b_workshop then
17980: LD_VAR 0 5
17984: PUSH
17985: LD_INT 2
17987: EQUAL
17988: IFFALSE 17998
// btype := b_factory ;
17990: LD_ADDR_VAR 0 5
17994: PUSH
17995: LD_INT 3
17997: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
17998: LD_ADDR_VAR 0 4
18002: PUSH
18003: LD_VAR 0 5
18007: PPUSH
18008: LD_VAR 0 1
18012: PPUSH
18013: CALL_OW 248
18017: PPUSH
18018: CALL_OW 450
18022: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18023: LD_ADDR_VAR 0 2
18027: PUSH
18028: LD_VAR 0 3
18032: PPUSH
18033: LD_INT 1
18035: PPUSH
18036: CALL_OW 275
18040: PUSH
18041: LD_VAR 0 4
18045: PUSH
18046: LD_INT 1
18048: ARRAY
18049: GREATEREQUAL
18050: PUSH
18051: LD_VAR 0 3
18055: PPUSH
18056: LD_INT 2
18058: PPUSH
18059: CALL_OW 275
18063: PUSH
18064: LD_VAR 0 4
18068: PUSH
18069: LD_INT 2
18071: ARRAY
18072: GREATEREQUAL
18073: AND
18074: PUSH
18075: LD_VAR 0 3
18079: PPUSH
18080: LD_INT 3
18082: PPUSH
18083: CALL_OW 275
18087: PUSH
18088: LD_VAR 0 4
18092: PUSH
18093: LD_INT 3
18095: ARRAY
18096: GREATEREQUAL
18097: AND
18098: ST_TO_ADDR
// end ;
18099: LD_VAR 0 2
18103: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18104: LD_INT 0
18106: PPUSH
18107: PPUSH
18108: PPUSH
// pom := GetBase ( building ) ;
18109: LD_ADDR_VAR 0 4
18113: PUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 274
18123: ST_TO_ADDR
// if not pom then
18124: LD_VAR 0 4
18128: NOT
18129: IFFALSE 18133
// exit ;
18131: GO 18234
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18133: LD_ADDR_VAR 0 5
18137: PUSH
18138: LD_VAR 0 2
18142: PPUSH
18143: LD_VAR 0 1
18147: PPUSH
18148: CALL_OW 248
18152: PPUSH
18153: CALL_OW 450
18157: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18158: LD_ADDR_VAR 0 3
18162: PUSH
18163: LD_VAR 0 4
18167: PPUSH
18168: LD_INT 1
18170: PPUSH
18171: CALL_OW 275
18175: PUSH
18176: LD_VAR 0 5
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: GREATEREQUAL
18185: PUSH
18186: LD_VAR 0 4
18190: PPUSH
18191: LD_INT 2
18193: PPUSH
18194: CALL_OW 275
18198: PUSH
18199: LD_VAR 0 5
18203: PUSH
18204: LD_INT 2
18206: ARRAY
18207: GREATEREQUAL
18208: AND
18209: PUSH
18210: LD_VAR 0 4
18214: PPUSH
18215: LD_INT 3
18217: PPUSH
18218: CALL_OW 275
18222: PUSH
18223: LD_VAR 0 5
18227: PUSH
18228: LD_INT 3
18230: ARRAY
18231: GREATEREQUAL
18232: AND
18233: ST_TO_ADDR
// end ;
18234: LD_VAR 0 3
18238: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18239: LD_INT 0
18241: PPUSH
18242: PPUSH
18243: PPUSH
18244: PPUSH
18245: PPUSH
18246: PPUSH
18247: PPUSH
18248: PPUSH
18249: PPUSH
18250: PPUSH
18251: PPUSH
// result := false ;
18252: LD_ADDR_VAR 0 8
18256: PUSH
18257: LD_INT 0
18259: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18260: LD_VAR 0 5
18264: NOT
18265: PUSH
18266: LD_VAR 0 1
18270: NOT
18271: OR
18272: PUSH
18273: LD_VAR 0 2
18277: NOT
18278: OR
18279: PUSH
18280: LD_VAR 0 3
18284: NOT
18285: OR
18286: IFFALSE 18290
// exit ;
18288: GO 19104
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18290: LD_ADDR_VAR 0 14
18294: PUSH
18295: LD_VAR 0 1
18299: PPUSH
18300: LD_VAR 0 2
18304: PPUSH
18305: LD_VAR 0 3
18309: PPUSH
18310: LD_VAR 0 4
18314: PPUSH
18315: LD_VAR 0 5
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PPUSH
18324: CALL_OW 248
18328: PPUSH
18329: LD_INT 0
18331: PPUSH
18332: CALL 20337 0 6
18336: ST_TO_ADDR
// if not hexes then
18337: LD_VAR 0 14
18341: NOT
18342: IFFALSE 18346
// exit ;
18344: GO 19104
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18346: LD_ADDR_VAR 0 17
18350: PUSH
18351: LD_VAR 0 5
18355: PPUSH
18356: LD_INT 22
18358: PUSH
18359: LD_VAR 0 13
18363: PPUSH
18364: CALL_OW 255
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 2
18375: PUSH
18376: LD_INT 30
18378: PUSH
18379: LD_INT 0
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 30
18388: PUSH
18389: LD_INT 1
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: LIST
18400: PUSH
18401: EMPTY
18402: LIST
18403: LIST
18404: PPUSH
18405: CALL_OW 72
18409: ST_TO_ADDR
// for i = 1 to hexes do
18410: LD_ADDR_VAR 0 9
18414: PUSH
18415: DOUBLE
18416: LD_INT 1
18418: DEC
18419: ST_TO_ADDR
18420: LD_VAR 0 14
18424: PUSH
18425: FOR_TO
18426: IFFALSE 19102
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18428: LD_ADDR_VAR 0 13
18432: PUSH
18433: LD_VAR 0 14
18437: PUSH
18438: LD_VAR 0 9
18442: ARRAY
18443: PUSH
18444: LD_INT 1
18446: ARRAY
18447: PPUSH
18448: LD_VAR 0 14
18452: PUSH
18453: LD_VAR 0 9
18457: ARRAY
18458: PUSH
18459: LD_INT 2
18461: ARRAY
18462: PPUSH
18463: CALL_OW 428
18467: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18468: LD_VAR 0 14
18472: PUSH
18473: LD_VAR 0 9
18477: ARRAY
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: LD_VAR 0 14
18487: PUSH
18488: LD_VAR 0 9
18492: ARRAY
18493: PUSH
18494: LD_INT 2
18496: ARRAY
18497: PPUSH
18498: CALL_OW 351
18502: PUSH
18503: LD_VAR 0 14
18507: PUSH
18508: LD_VAR 0 9
18512: ARRAY
18513: PUSH
18514: LD_INT 1
18516: ARRAY
18517: PPUSH
18518: LD_VAR 0 14
18522: PUSH
18523: LD_VAR 0 9
18527: ARRAY
18528: PUSH
18529: LD_INT 2
18531: ARRAY
18532: PPUSH
18533: CALL_OW 488
18537: NOT
18538: OR
18539: PUSH
18540: LD_VAR 0 13
18544: PPUSH
18545: CALL_OW 247
18549: PUSH
18550: LD_INT 3
18552: EQUAL
18553: OR
18554: IFFALSE 18560
// exit ;
18556: POP
18557: POP
18558: GO 19104
// if not tmp then
18560: LD_VAR 0 13
18564: NOT
18565: IFFALSE 18569
// continue ;
18567: GO 18425
// result := true ;
18569: LD_ADDR_VAR 0 8
18573: PUSH
18574: LD_INT 1
18576: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18577: LD_VAR 0 6
18581: PUSH
18582: LD_VAR 0 13
18586: PPUSH
18587: CALL_OW 247
18591: PUSH
18592: LD_INT 2
18594: EQUAL
18595: AND
18596: PUSH
18597: LD_VAR 0 13
18601: PPUSH
18602: CALL_OW 263
18606: PUSH
18607: LD_INT 1
18609: EQUAL
18610: AND
18611: IFFALSE 18775
// begin if IsDrivenBy ( tmp ) then
18613: LD_VAR 0 13
18617: PPUSH
18618: CALL_OW 311
18622: IFFALSE 18626
// continue ;
18624: GO 18425
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18626: LD_VAR 0 6
18630: PPUSH
18631: LD_INT 3
18633: PUSH
18634: LD_INT 60
18636: PUSH
18637: EMPTY
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 3
18646: PUSH
18647: LD_INT 55
18649: PUSH
18650: EMPTY
18651: LIST
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PPUSH
18661: CALL_OW 72
18665: IFFALSE 18773
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18667: LD_ADDR_VAR 0 18
18671: PUSH
18672: LD_VAR 0 6
18676: PPUSH
18677: LD_INT 3
18679: PUSH
18680: LD_INT 60
18682: PUSH
18683: EMPTY
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 3
18692: PUSH
18693: LD_INT 55
18695: PUSH
18696: EMPTY
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 72
18711: PUSH
18712: LD_INT 1
18714: ARRAY
18715: ST_TO_ADDR
// if IsInUnit ( driver ) then
18716: LD_VAR 0 18
18720: PPUSH
18721: CALL_OW 310
18725: IFFALSE 18736
// ComExit ( driver ) ;
18727: LD_VAR 0 18
18731: PPUSH
18732: CALL 44116 0 1
// AddComEnterUnit ( driver , tmp ) ;
18736: LD_VAR 0 18
18740: PPUSH
18741: LD_VAR 0 13
18745: PPUSH
18746: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18750: LD_VAR 0 18
18754: PPUSH
18755: LD_VAR 0 7
18759: PPUSH
18760: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18764: LD_VAR 0 18
18768: PPUSH
18769: CALL_OW 181
// end ; continue ;
18773: GO 18425
// end ; if not cleaners or not tmp in cleaners then
18775: LD_VAR 0 6
18779: NOT
18780: PUSH
18781: LD_VAR 0 13
18785: PUSH
18786: LD_VAR 0 6
18790: IN
18791: NOT
18792: OR
18793: IFFALSE 19100
// begin if dep then
18795: LD_VAR 0 17
18799: IFFALSE 18935
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18801: LD_ADDR_VAR 0 16
18805: PUSH
18806: LD_VAR 0 17
18810: PUSH
18811: LD_INT 1
18813: ARRAY
18814: PPUSH
18815: CALL_OW 250
18819: PPUSH
18820: LD_VAR 0 17
18824: PUSH
18825: LD_INT 1
18827: ARRAY
18828: PPUSH
18829: CALL_OW 254
18833: PPUSH
18834: LD_INT 5
18836: PPUSH
18837: CALL_OW 272
18841: PUSH
18842: LD_VAR 0 17
18846: PUSH
18847: LD_INT 1
18849: ARRAY
18850: PPUSH
18851: CALL_OW 251
18855: PPUSH
18856: LD_VAR 0 17
18860: PUSH
18861: LD_INT 1
18863: ARRAY
18864: PPUSH
18865: CALL_OW 254
18869: PPUSH
18870: LD_INT 5
18872: PPUSH
18873: CALL_OW 273
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
18882: LD_VAR 0 16
18886: PUSH
18887: LD_INT 1
18889: ARRAY
18890: PPUSH
18891: LD_VAR 0 16
18895: PUSH
18896: LD_INT 2
18898: ARRAY
18899: PPUSH
18900: CALL_OW 488
18904: IFFALSE 18935
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
18906: LD_VAR 0 13
18910: PPUSH
18911: LD_VAR 0 16
18915: PUSH
18916: LD_INT 1
18918: ARRAY
18919: PPUSH
18920: LD_VAR 0 16
18924: PUSH
18925: LD_INT 2
18927: ARRAY
18928: PPUSH
18929: CALL_OW 111
// continue ;
18933: GO 18425
// end ; end ; r := GetDir ( tmp ) ;
18935: LD_ADDR_VAR 0 15
18939: PUSH
18940: LD_VAR 0 13
18944: PPUSH
18945: CALL_OW 254
18949: ST_TO_ADDR
// if r = 5 then
18950: LD_VAR 0 15
18954: PUSH
18955: LD_INT 5
18957: EQUAL
18958: IFFALSE 18968
// r := 0 ;
18960: LD_ADDR_VAR 0 15
18964: PUSH
18965: LD_INT 0
18967: ST_TO_ADDR
// for j = r to 5 do
18968: LD_ADDR_VAR 0 10
18972: PUSH
18973: DOUBLE
18974: LD_VAR 0 15
18978: DEC
18979: ST_TO_ADDR
18980: LD_INT 5
18982: PUSH
18983: FOR_TO
18984: IFFALSE 19098
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
18986: LD_ADDR_VAR 0 11
18990: PUSH
18991: LD_VAR 0 13
18995: PPUSH
18996: CALL_OW 250
19000: PPUSH
19001: LD_VAR 0 10
19005: PPUSH
19006: LD_INT 2
19008: PPUSH
19009: CALL_OW 272
19013: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19014: LD_ADDR_VAR 0 12
19018: PUSH
19019: LD_VAR 0 13
19023: PPUSH
19024: CALL_OW 251
19028: PPUSH
19029: LD_VAR 0 10
19033: PPUSH
19034: LD_INT 2
19036: PPUSH
19037: CALL_OW 273
19041: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19042: LD_VAR 0 11
19046: PPUSH
19047: LD_VAR 0 12
19051: PPUSH
19052: CALL_OW 488
19056: PUSH
19057: LD_VAR 0 11
19061: PPUSH
19062: LD_VAR 0 12
19066: PPUSH
19067: CALL_OW 428
19071: NOT
19072: AND
19073: IFFALSE 19096
// begin ComMoveXY ( tmp , _x , _y ) ;
19075: LD_VAR 0 13
19079: PPUSH
19080: LD_VAR 0 11
19084: PPUSH
19085: LD_VAR 0 12
19089: PPUSH
19090: CALL_OW 111
// break ;
19094: GO 19098
// end ; end ;
19096: GO 18983
19098: POP
19099: POP
// end ; end ;
19100: GO 18425
19102: POP
19103: POP
// end ;
19104: LD_VAR 0 8
19108: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19109: LD_INT 0
19111: PPUSH
// result := true ;
19112: LD_ADDR_VAR 0 3
19116: PUSH
19117: LD_INT 1
19119: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19120: LD_VAR 0 2
19124: PUSH
19125: LD_INT 24
19127: DOUBLE
19128: EQUAL
19129: IFTRUE 19139
19131: LD_INT 33
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19164
19139: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19140: LD_ADDR_VAR 0 3
19144: PUSH
19145: LD_INT 32
19147: PPUSH
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL_OW 321
19157: PUSH
19158: LD_INT 2
19160: EQUAL
19161: ST_TO_ADDR
19162: GO 19480
19164: LD_INT 20
19166: DOUBLE
19167: EQUAL
19168: IFTRUE 19172
19170: GO 19197
19172: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19173: LD_ADDR_VAR 0 3
19177: PUSH
19178: LD_INT 6
19180: PPUSH
19181: LD_VAR 0 1
19185: PPUSH
19186: CALL_OW 321
19190: PUSH
19191: LD_INT 2
19193: EQUAL
19194: ST_TO_ADDR
19195: GO 19480
19197: LD_INT 22
19199: DOUBLE
19200: EQUAL
19201: IFTRUE 19211
19203: LD_INT 36
19205: DOUBLE
19206: EQUAL
19207: IFTRUE 19211
19209: GO 19236
19211: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19212: LD_ADDR_VAR 0 3
19216: PUSH
19217: LD_INT 15
19219: PPUSH
19220: LD_VAR 0 1
19224: PPUSH
19225: CALL_OW 321
19229: PUSH
19230: LD_INT 2
19232: EQUAL
19233: ST_TO_ADDR
19234: GO 19480
19236: LD_INT 30
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19269
19244: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19245: LD_ADDR_VAR 0 3
19249: PUSH
19250: LD_INT 20
19252: PPUSH
19253: LD_VAR 0 1
19257: PPUSH
19258: CALL_OW 321
19262: PUSH
19263: LD_INT 2
19265: EQUAL
19266: ST_TO_ADDR
19267: GO 19480
19269: LD_INT 28
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19283
19275: LD_INT 21
19277: DOUBLE
19278: EQUAL
19279: IFTRUE 19283
19281: GO 19308
19283: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19284: LD_ADDR_VAR 0 3
19288: PUSH
19289: LD_INT 21
19291: PPUSH
19292: LD_VAR 0 1
19296: PPUSH
19297: CALL_OW 321
19301: PUSH
19302: LD_INT 2
19304: EQUAL
19305: ST_TO_ADDR
19306: GO 19480
19308: LD_INT 16
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19341
19316: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19317: LD_ADDR_VAR 0 3
19321: PUSH
19322: LD_INT 84
19324: PPUSH
19325: LD_VAR 0 1
19329: PPUSH
19330: CALL_OW 321
19334: PUSH
19335: LD_INT 2
19337: EQUAL
19338: ST_TO_ADDR
19339: GO 19480
19341: LD_INT 19
19343: DOUBLE
19344: EQUAL
19345: IFTRUE 19355
19347: LD_INT 23
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19380
19355: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: LD_INT 83
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 321
19373: PUSH
19374: LD_INT 2
19376: EQUAL
19377: ST_TO_ADDR
19378: GO 19480
19380: LD_INT 17
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19413
19388: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_INT 39
19396: PPUSH
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 321
19406: PUSH
19407: LD_INT 2
19409: EQUAL
19410: ST_TO_ADDR
19411: GO 19480
19413: LD_INT 18
19415: DOUBLE
19416: EQUAL
19417: IFTRUE 19421
19419: GO 19446
19421: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19422: LD_ADDR_VAR 0 3
19426: PUSH
19427: LD_INT 40
19429: PPUSH
19430: LD_VAR 0 1
19434: PPUSH
19435: CALL_OW 321
19439: PUSH
19440: LD_INT 2
19442: EQUAL
19443: ST_TO_ADDR
19444: GO 19480
19446: LD_INT 27
19448: DOUBLE
19449: EQUAL
19450: IFTRUE 19454
19452: GO 19479
19454: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19455: LD_ADDR_VAR 0 3
19459: PUSH
19460: LD_INT 35
19462: PPUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL_OW 321
19472: PUSH
19473: LD_INT 2
19475: EQUAL
19476: ST_TO_ADDR
19477: GO 19480
19479: POP
// end ;
19480: LD_VAR 0 3
19484: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19485: LD_INT 0
19487: PPUSH
19488: PPUSH
19489: PPUSH
19490: PPUSH
19491: PPUSH
19492: PPUSH
19493: PPUSH
19494: PPUSH
19495: PPUSH
19496: PPUSH
19497: PPUSH
// result := false ;
19498: LD_ADDR_VAR 0 6
19502: PUSH
19503: LD_INT 0
19505: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19506: LD_VAR 0 1
19510: NOT
19511: PUSH
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 266
19521: PUSH
19522: LD_INT 0
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: IN
19532: NOT
19533: OR
19534: PUSH
19535: LD_VAR 0 2
19539: NOT
19540: OR
19541: PUSH
19542: LD_VAR 0 5
19546: PUSH
19547: LD_INT 0
19549: PUSH
19550: LD_INT 1
19552: PUSH
19553: LD_INT 2
19555: PUSH
19556: LD_INT 3
19558: PUSH
19559: LD_INT 4
19561: PUSH
19562: LD_INT 5
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: IN
19573: NOT
19574: OR
19575: PUSH
19576: LD_VAR 0 3
19580: PPUSH
19581: LD_VAR 0 4
19585: PPUSH
19586: CALL_OW 488
19590: NOT
19591: OR
19592: IFFALSE 19596
// exit ;
19594: GO 20332
// side := GetSide ( depot ) ;
19596: LD_ADDR_VAR 0 9
19600: PUSH
19601: LD_VAR 0 1
19605: PPUSH
19606: CALL_OW 255
19610: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
19611: LD_VAR 0 9
19615: PPUSH
19616: LD_VAR 0 2
19620: PPUSH
19621: CALL 19109 0 2
19625: NOT
19626: IFFALSE 19630
// exit ;
19628: GO 20332
// pom := GetBase ( depot ) ;
19630: LD_ADDR_VAR 0 10
19634: PUSH
19635: LD_VAR 0 1
19639: PPUSH
19640: CALL_OW 274
19644: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
19645: LD_ADDR_VAR 0 11
19649: PUSH
19650: LD_VAR 0 2
19654: PPUSH
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 248
19664: PPUSH
19665: CALL_OW 450
19669: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
19670: LD_VAR 0 10
19674: PPUSH
19675: LD_INT 1
19677: PPUSH
19678: CALL_OW 275
19682: PUSH
19683: LD_VAR 0 11
19687: PUSH
19688: LD_INT 1
19690: ARRAY
19691: GREATEREQUAL
19692: PUSH
19693: LD_VAR 0 10
19697: PPUSH
19698: LD_INT 2
19700: PPUSH
19701: CALL_OW 275
19705: PUSH
19706: LD_VAR 0 11
19710: PUSH
19711: LD_INT 2
19713: ARRAY
19714: GREATEREQUAL
19715: AND
19716: PUSH
19717: LD_VAR 0 10
19721: PPUSH
19722: LD_INT 3
19724: PPUSH
19725: CALL_OW 275
19729: PUSH
19730: LD_VAR 0 11
19734: PUSH
19735: LD_INT 3
19737: ARRAY
19738: GREATEREQUAL
19739: AND
19740: NOT
19741: IFFALSE 19745
// exit ;
19743: GO 20332
// if GetBType ( depot ) = b_depot then
19745: LD_VAR 0 1
19749: PPUSH
19750: CALL_OW 266
19754: PUSH
19755: LD_INT 0
19757: EQUAL
19758: IFFALSE 19770
// dist := 28 else
19760: LD_ADDR_VAR 0 14
19764: PUSH
19765: LD_INT 28
19767: ST_TO_ADDR
19768: GO 19778
// dist := 36 ;
19770: LD_ADDR_VAR 0 14
19774: PUSH
19775: LD_INT 36
19777: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19778: LD_VAR 0 1
19782: PPUSH
19783: LD_VAR 0 3
19787: PPUSH
19788: LD_VAR 0 4
19792: PPUSH
19793: CALL_OW 297
19797: PUSH
19798: LD_VAR 0 14
19802: GREATER
19803: IFFALSE 19807
// exit ;
19805: GO 20332
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
19807: LD_ADDR_VAR 0 12
19811: PUSH
19812: LD_VAR 0 2
19816: PPUSH
19817: LD_VAR 0 3
19821: PPUSH
19822: LD_VAR 0 4
19826: PPUSH
19827: LD_VAR 0 5
19831: PPUSH
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 248
19841: PPUSH
19842: LD_INT 0
19844: PPUSH
19845: CALL 20337 0 6
19849: ST_TO_ADDR
// if not hexes then
19850: LD_VAR 0 12
19854: NOT
19855: IFFALSE 19859
// exit ;
19857: GO 20332
// hex := GetHexInfo ( x , y ) ;
19859: LD_ADDR_VAR 0 15
19863: PUSH
19864: LD_VAR 0 3
19868: PPUSH
19869: LD_VAR 0 4
19873: PPUSH
19874: CALL_OW 546
19878: ST_TO_ADDR
// if hex [ 1 ] then
19879: LD_VAR 0 15
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: IFFALSE 19891
// exit ;
19889: GO 20332
// height := hex [ 2 ] ;
19891: LD_ADDR_VAR 0 13
19895: PUSH
19896: LD_VAR 0 15
19900: PUSH
19901: LD_INT 2
19903: ARRAY
19904: ST_TO_ADDR
// for i = 1 to hexes do
19905: LD_ADDR_VAR 0 7
19909: PUSH
19910: DOUBLE
19911: LD_INT 1
19913: DEC
19914: ST_TO_ADDR
19915: LD_VAR 0 12
19919: PUSH
19920: FOR_TO
19921: IFFALSE 20251
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
19923: LD_VAR 0 12
19927: PUSH
19928: LD_VAR 0 7
19932: ARRAY
19933: PUSH
19934: LD_INT 1
19936: ARRAY
19937: PPUSH
19938: LD_VAR 0 12
19942: PUSH
19943: LD_VAR 0 7
19947: ARRAY
19948: PUSH
19949: LD_INT 2
19951: ARRAY
19952: PPUSH
19953: CALL_OW 488
19957: NOT
19958: PUSH
19959: LD_VAR 0 12
19963: PUSH
19964: LD_VAR 0 7
19968: ARRAY
19969: PUSH
19970: LD_INT 1
19972: ARRAY
19973: PPUSH
19974: LD_VAR 0 12
19978: PUSH
19979: LD_VAR 0 7
19983: ARRAY
19984: PUSH
19985: LD_INT 2
19987: ARRAY
19988: PPUSH
19989: CALL_OW 428
19993: PUSH
19994: LD_INT 0
19996: GREATER
19997: OR
19998: PUSH
19999: LD_VAR 0 12
20003: PUSH
20004: LD_VAR 0 7
20008: ARRAY
20009: PUSH
20010: LD_INT 1
20012: ARRAY
20013: PPUSH
20014: LD_VAR 0 12
20018: PUSH
20019: LD_VAR 0 7
20023: ARRAY
20024: PUSH
20025: LD_INT 2
20027: ARRAY
20028: PPUSH
20029: CALL_OW 351
20033: OR
20034: IFFALSE 20040
// exit ;
20036: POP
20037: POP
20038: GO 20332
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20040: LD_ADDR_VAR 0 8
20044: PUSH
20045: LD_VAR 0 12
20049: PUSH
20050: LD_VAR 0 7
20054: ARRAY
20055: PUSH
20056: LD_INT 1
20058: ARRAY
20059: PPUSH
20060: LD_VAR 0 12
20064: PUSH
20065: LD_VAR 0 7
20069: ARRAY
20070: PUSH
20071: LD_INT 2
20073: ARRAY
20074: PPUSH
20075: CALL_OW 546
20079: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20080: LD_VAR 0 8
20084: PUSH
20085: LD_INT 1
20087: ARRAY
20088: PUSH
20089: LD_VAR 0 8
20093: PUSH
20094: LD_INT 2
20096: ARRAY
20097: PUSH
20098: LD_VAR 0 13
20102: PUSH
20103: LD_INT 2
20105: PLUS
20106: GREATER
20107: OR
20108: PUSH
20109: LD_VAR 0 8
20113: PUSH
20114: LD_INT 2
20116: ARRAY
20117: PUSH
20118: LD_VAR 0 13
20122: PUSH
20123: LD_INT 2
20125: MINUS
20126: LESS
20127: OR
20128: PUSH
20129: LD_VAR 0 8
20133: PUSH
20134: LD_INT 3
20136: ARRAY
20137: PUSH
20138: LD_INT 0
20140: PUSH
20141: LD_INT 8
20143: PUSH
20144: LD_INT 9
20146: PUSH
20147: LD_INT 10
20149: PUSH
20150: LD_INT 11
20152: PUSH
20153: LD_INT 12
20155: PUSH
20156: LD_INT 13
20158: PUSH
20159: LD_INT 16
20161: PUSH
20162: LD_INT 17
20164: PUSH
20165: LD_INT 18
20167: PUSH
20168: LD_INT 19
20170: PUSH
20171: LD_INT 20
20173: PUSH
20174: LD_INT 21
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: IN
20192: NOT
20193: OR
20194: PUSH
20195: LD_VAR 0 8
20199: PUSH
20200: LD_INT 5
20202: ARRAY
20203: NOT
20204: OR
20205: PUSH
20206: LD_VAR 0 8
20210: PUSH
20211: LD_INT 6
20213: ARRAY
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: LD_INT 2
20220: PUSH
20221: LD_INT 7
20223: PUSH
20224: LD_INT 9
20226: PUSH
20227: LD_INT 10
20229: PUSH
20230: LD_INT 11
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: IN
20241: NOT
20242: OR
20243: IFFALSE 20249
// exit ;
20245: POP
20246: POP
20247: GO 20332
// end ;
20249: GO 19920
20251: POP
20252: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20253: LD_VAR 0 9
20257: PPUSH
20258: LD_VAR 0 3
20262: PPUSH
20263: LD_VAR 0 4
20267: PPUSH
20268: LD_INT 20
20270: PPUSH
20271: CALL 12275 0 4
20275: PUSH
20276: LD_INT 4
20278: ARRAY
20279: IFFALSE 20283
// exit ;
20281: GO 20332
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20283: LD_VAR 0 2
20287: PUSH
20288: LD_INT 29
20290: PUSH
20291: LD_INT 30
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: IN
20298: PUSH
20299: LD_VAR 0 3
20303: PPUSH
20304: LD_VAR 0 4
20308: PPUSH
20309: LD_VAR 0 9
20313: PPUSH
20314: CALL_OW 440
20318: NOT
20319: AND
20320: IFFALSE 20324
// exit ;
20322: GO 20332
// result := true ;
20324: LD_ADDR_VAR 0 6
20328: PUSH
20329: LD_INT 1
20331: ST_TO_ADDR
// end ;
20332: LD_VAR 0 6
20336: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20337: LD_INT 0
20339: PPUSH
20340: PPUSH
20341: PPUSH
20342: PPUSH
20343: PPUSH
20344: PPUSH
20345: PPUSH
20346: PPUSH
20347: PPUSH
20348: PPUSH
20349: PPUSH
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
20360: PPUSH
20361: PPUSH
20362: PPUSH
20363: PPUSH
20364: PPUSH
20365: PPUSH
20366: PPUSH
20367: PPUSH
20368: PPUSH
20369: PPUSH
20370: PPUSH
20371: PPUSH
20372: PPUSH
20373: PPUSH
20374: PPUSH
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
20385: PPUSH
20386: PPUSH
20387: PPUSH
20388: PPUSH
20389: PPUSH
20390: PPUSH
20391: PPUSH
20392: PPUSH
20393: PPUSH
20394: PPUSH
20395: PPUSH
20396: PPUSH
// result = [ ] ;
20397: LD_ADDR_VAR 0 7
20401: PUSH
20402: EMPTY
20403: ST_TO_ADDR
// temp_list = [ ] ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: EMPTY
20410: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20411: LD_VAR 0 4
20415: PUSH
20416: LD_INT 0
20418: PUSH
20419: LD_INT 1
20421: PUSH
20422: LD_INT 2
20424: PUSH
20425: LD_INT 3
20427: PUSH
20428: LD_INT 4
20430: PUSH
20431: LD_INT 5
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: LIST
20439: LIST
20440: LIST
20441: IN
20442: NOT
20443: PUSH
20444: LD_VAR 0 1
20448: PUSH
20449: LD_INT 0
20451: PUSH
20452: LD_INT 1
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: IN
20459: PUSH
20460: LD_VAR 0 5
20464: PUSH
20465: LD_INT 1
20467: PUSH
20468: LD_INT 2
20470: PUSH
20471: LD_INT 3
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: IN
20479: NOT
20480: AND
20481: OR
20482: IFFALSE 20486
// exit ;
20484: GO 38877
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20486: LD_VAR 0 1
20490: PUSH
20491: LD_INT 6
20493: PUSH
20494: LD_INT 7
20496: PUSH
20497: LD_INT 8
20499: PUSH
20500: LD_INT 13
20502: PUSH
20503: LD_INT 12
20505: PUSH
20506: LD_INT 15
20508: PUSH
20509: LD_INT 11
20511: PUSH
20512: LD_INT 14
20514: PUSH
20515: LD_INT 10
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: IN
20529: IFFALSE 20539
// btype = b_lab ;
20531: LD_ADDR_VAR 0 1
20535: PUSH
20536: LD_INT 6
20538: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20539: LD_VAR 0 6
20543: PUSH
20544: LD_INT 0
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: EMPTY
20554: LIST
20555: LIST
20556: LIST
20557: IN
20558: NOT
20559: PUSH
20560: LD_VAR 0 1
20564: PUSH
20565: LD_INT 0
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: LD_INT 2
20573: PUSH
20574: LD_INT 3
20576: PUSH
20577: LD_INT 6
20579: PUSH
20580: LD_INT 36
20582: PUSH
20583: LD_INT 4
20585: PUSH
20586: LD_INT 5
20588: PUSH
20589: LD_INT 31
20591: PUSH
20592: LD_INT 32
20594: PUSH
20595: LD_INT 33
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: IN
20611: NOT
20612: PUSH
20613: LD_VAR 0 6
20617: PUSH
20618: LD_INT 1
20620: EQUAL
20621: AND
20622: OR
20623: PUSH
20624: LD_VAR 0 1
20628: PUSH
20629: LD_INT 2
20631: PUSH
20632: LD_INT 3
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: IN
20639: NOT
20640: PUSH
20641: LD_VAR 0 6
20645: PUSH
20646: LD_INT 2
20648: EQUAL
20649: AND
20650: OR
20651: IFFALSE 20661
// mode = 0 ;
20653: LD_ADDR_VAR 0 6
20657: PUSH
20658: LD_INT 0
20660: ST_TO_ADDR
// case mode of 0 :
20661: LD_VAR 0 6
20665: PUSH
20666: LD_INT 0
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 32127
20674: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20675: LD_ADDR_VAR 0 11
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: LD_INT 0
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: LD_INT 0
20692: PUSH
20693: LD_INT 1
20695: NEG
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 1
20703: PUSH
20704: LD_INT 0
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 1
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: LD_INT 0
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 1
20744: NEG
20745: PUSH
20746: LD_INT 1
20748: NEG
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 1
20756: NEG
20757: PUSH
20758: LD_INT 2
20760: NEG
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 0
20768: PUSH
20769: LD_INT 2
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 2
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 0
20800: PUSH
20801: LD_INT 2
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 1
20810: NEG
20811: PUSH
20812: LD_INT 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 0
20831: PUSH
20832: LD_INT 3
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 1
20841: NEG
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: EMPTY
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20868: LD_ADDR_VAR 0 12
20872: PUSH
20873: LD_INT 0
20875: PUSH
20876: LD_INT 0
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 0
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: PUSH
20894: LD_INT 1
20896: PUSH
20897: LD_INT 0
20899: PUSH
20900: EMPTY
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: LD_INT 1
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 0
20916: PUSH
20917: LD_INT 1
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: LD_INT 0
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 1
20937: NEG
20938: PUSH
20939: LD_INT 1
20941: NEG
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: LD_INT 1
20949: PUSH
20950: LD_INT 1
20952: NEG
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: EMPTY
20965: LIST
20966: LIST
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 1
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 1
20980: NEG
20981: PUSH
20982: LD_INT 1
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 2
20991: NEG
20992: PUSH
20993: LD_INT 0
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 2
21002: NEG
21003: PUSH
21004: LD_INT 1
21006: NEG
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 2
21014: NEG
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 3
21025: NEG
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 3
21036: NEG
21037: PUSH
21038: LD_INT 1
21040: NEG
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21064: LD_ADDR_VAR 0 13
21068: PUSH
21069: LD_INT 0
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: LD_INT 1
21084: NEG
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 1
21092: PUSH
21093: LD_INT 0
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: LD_INT 1
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 0
21112: PUSH
21113: LD_INT 1
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: LD_INT 1
21122: NEG
21123: PUSH
21124: LD_INT 0
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 1
21133: NEG
21134: PUSH
21135: LD_INT 1
21137: NEG
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 1
21145: NEG
21146: PUSH
21147: LD_INT 2
21149: NEG
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 2
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 2
21167: PUSH
21168: LD_INT 2
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 1
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 2
21187: NEG
21188: PUSH
21189: LD_INT 1
21191: NEG
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 2
21199: NEG
21200: PUSH
21201: LD_INT 2
21203: NEG
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 2
21211: NEG
21212: PUSH
21213: LD_INT 3
21215: NEG
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 3
21223: NEG
21224: PUSH
21225: LD_INT 2
21227: NEG
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 3
21235: NEG
21236: PUSH
21237: LD_INT 3
21239: NEG
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21263: LD_ADDR_VAR 0 14
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: LD_INT 0
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 0
21280: PUSH
21281: LD_INT 1
21283: NEG
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: LD_INT 1
21291: PUSH
21292: LD_INT 0
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 1
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 0
21311: PUSH
21312: LD_INT 1
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: NEG
21322: PUSH
21323: LD_INT 0
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 1
21332: NEG
21333: PUSH
21334: LD_INT 1
21336: NEG
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: LD_INT 2
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: LD_INT 2
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: LD_INT 1
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 0
21388: PUSH
21389: LD_INT 2
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 1
21398: NEG
21399: PUSH
21400: LD_INT 1
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 1
21409: NEG
21410: PUSH
21411: LD_INT 3
21413: NEG
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 0
21421: PUSH
21422: LD_INT 3
21424: NEG
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 1
21432: PUSH
21433: LD_INT 2
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21459: LD_ADDR_VAR 0 15
21463: PUSH
21464: LD_INT 0
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 0
21476: PUSH
21477: LD_INT 1
21479: NEG
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 1
21487: PUSH
21488: LD_INT 0
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 1
21497: PUSH
21498: LD_INT 1
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: LD_INT 0
21507: PUSH
21508: LD_INT 1
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: LD_INT 0
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 1
21528: NEG
21529: PUSH
21530: LD_INT 1
21532: NEG
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PUSH
21538: LD_INT 1
21540: PUSH
21541: LD_INT 1
21543: NEG
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 0
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 2
21561: PUSH
21562: LD_INT 1
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 1
21571: NEG
21572: PUSH
21573: LD_INT 1
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 2
21582: NEG
21583: PUSH
21584: LD_INT 0
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 2
21593: NEG
21594: PUSH
21595: LD_INT 1
21597: NEG
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 3
21616: PUSH
21617: LD_INT 0
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 3
21626: PUSH
21627: LD_INT 1
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21652: LD_ADDR_VAR 0 16
21656: PUSH
21657: LD_INT 0
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: LD_INT 1
21672: NEG
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 1
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PUSH
21688: LD_INT 1
21690: PUSH
21691: LD_INT 1
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 0
21700: PUSH
21701: LD_INT 1
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: LD_INT 1
21710: NEG
21711: PUSH
21712: LD_INT 0
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: LD_INT 1
21721: NEG
21722: PUSH
21723: LD_INT 1
21725: NEG
21726: PUSH
21727: EMPTY
21728: LIST
21729: LIST
21730: PUSH
21731: LD_INT 1
21733: NEG
21734: PUSH
21735: LD_INT 2
21737: NEG
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 1
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 2
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 1
21765: PUSH
21766: LD_INT 2
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: LD_INT 2
21775: NEG
21776: PUSH
21777: LD_INT 1
21779: NEG
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 2
21787: NEG
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: LD_INT 3
21799: PUSH
21800: LD_INT 2
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 3
21809: PUSH
21810: LD_INT 3
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: PUSH
21817: LD_INT 2
21819: PUSH
21820: LD_INT 3
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21845: LD_ADDR_VAR 0 17
21849: PUSH
21850: LD_INT 0
21852: PUSH
21853: LD_INT 0
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: EMPTY
21868: LIST
21869: LIST
21870: PUSH
21871: LD_INT 1
21873: PUSH
21874: LD_INT 0
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: LD_INT 1
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 1
21903: NEG
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 1
21914: NEG
21915: PUSH
21916: LD_INT 1
21918: NEG
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 1
21926: NEG
21927: PUSH
21928: LD_INT 2
21930: NEG
21931: PUSH
21932: EMPTY
21933: LIST
21934: LIST
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: LD_INT 2
21941: NEG
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 2
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 2
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 2
21980: PUSH
21981: LD_INT 2
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: PUSH
21991: LD_INT 2
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 0
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 1
22010: NEG
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 2
22021: NEG
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 2
22032: NEG
22033: PUSH
22034: LD_INT 1
22036: NEG
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 2
22044: NEG
22045: PUSH
22046: LD_INT 2
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22075: LD_ADDR_VAR 0 18
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 0
22085: PUSH
22086: EMPTY
22087: LIST
22088: LIST
22089: PUSH
22090: LD_INT 0
22092: PUSH
22093: LD_INT 1
22095: NEG
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 0
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 0
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 1
22133: NEG
22134: PUSH
22135: LD_INT 0
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 1
22144: NEG
22145: PUSH
22146: LD_INT 1
22148: NEG
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: PUSH
22154: LD_INT 1
22156: NEG
22157: PUSH
22158: LD_INT 2
22160: NEG
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PUSH
22166: LD_INT 0
22168: PUSH
22169: LD_INT 2
22171: NEG
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 2
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 2
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 2
22210: PUSH
22211: LD_INT 2
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: LD_INT 0
22230: PUSH
22231: LD_INT 2
22233: PUSH
22234: EMPTY
22235: LIST
22236: LIST
22237: PUSH
22238: LD_INT 1
22240: NEG
22241: PUSH
22242: LD_INT 1
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: PUSH
22249: LD_INT 2
22251: NEG
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: LD_INT 2
22262: NEG
22263: PUSH
22264: LD_INT 1
22266: NEG
22267: PUSH
22268: EMPTY
22269: LIST
22270: LIST
22271: PUSH
22272: LD_INT 2
22274: NEG
22275: PUSH
22276: LD_INT 2
22278: NEG
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22305: LD_ADDR_VAR 0 19
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 0
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 0
22322: PUSH
22323: LD_INT 1
22325: NEG
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: LD_INT 0
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 0
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: LD_INT 0
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 1
22374: NEG
22375: PUSH
22376: LD_INT 1
22378: NEG
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: NEG
22387: PUSH
22388: LD_INT 2
22390: NEG
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: LD_INT 0
22398: PUSH
22399: LD_INT 2
22401: NEG
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 1
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 2
22440: PUSH
22441: LD_INT 2
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: PUSH
22451: LD_INT 2
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 0
22460: PUSH
22461: LD_INT 2
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 1
22470: NEG
22471: PUSH
22472: LD_INT 1
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 2
22481: NEG
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: EMPTY
22487: LIST
22488: LIST
22489: PUSH
22490: LD_INT 2
22492: NEG
22493: PUSH
22494: LD_INT 1
22496: NEG
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PUSH
22502: LD_INT 2
22504: NEG
22505: PUSH
22506: LD_INT 2
22508: NEG
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22535: LD_ADDR_VAR 0 20
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 0
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 0
22552: PUSH
22553: LD_INT 1
22555: NEG
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 1
22563: PUSH
22564: LD_INT 0
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: PUSH
22574: LD_INT 1
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: PUSH
22581: LD_INT 0
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 1
22593: NEG
22594: PUSH
22595: LD_INT 0
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 1
22604: NEG
22605: PUSH
22606: LD_INT 1
22608: NEG
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: NEG
22617: PUSH
22618: LD_INT 2
22620: NEG
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 0
22628: PUSH
22629: LD_INT 2
22631: NEG
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: LD_INT 2
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: LD_INT 2
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 0
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 1
22700: NEG
22701: PUSH
22702: LD_INT 1
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PUSH
22709: LD_INT 2
22711: NEG
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PUSH
22720: LD_INT 2
22722: NEG
22723: PUSH
22724: LD_INT 1
22726: NEG
22727: PUSH
22728: EMPTY
22729: LIST
22730: LIST
22731: PUSH
22732: LD_INT 2
22734: NEG
22735: PUSH
22736: LD_INT 2
22738: NEG
22739: PUSH
22740: EMPTY
22741: LIST
22742: LIST
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22765: LD_ADDR_VAR 0 21
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 0
22782: PUSH
22783: LD_INT 1
22785: NEG
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: PUSH
22791: LD_INT 1
22793: PUSH
22794: LD_INT 0
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 0
22813: PUSH
22814: LD_INT 1
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: LD_INT 1
22823: NEG
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 1
22834: NEG
22835: PUSH
22836: LD_INT 1
22838: NEG
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: NEG
22847: PUSH
22848: LD_INT 2
22850: NEG
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PUSH
22856: LD_INT 0
22858: PUSH
22859: LD_INT 2
22861: NEG
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 1
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: LD_INT 2
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: PUSH
22911: LD_INT 2
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_INT 2
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: LD_INT 1
22930: NEG
22931: PUSH
22932: LD_INT 1
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 2
22941: NEG
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 2
22952: NEG
22953: PUSH
22954: LD_INT 1
22956: NEG
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 2
22964: NEG
22965: PUSH
22966: LD_INT 2
22968: NEG
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22995: LD_ADDR_VAR 0 22
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: LD_INT 0
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 0
23012: PUSH
23013: LD_INT 1
23015: NEG
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: LD_INT 0
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 0
23043: PUSH
23044: LD_INT 1
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 1
23053: NEG
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 1
23064: NEG
23065: PUSH
23066: LD_INT 1
23068: NEG
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: NEG
23077: PUSH
23078: LD_INT 2
23080: NEG
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 0
23088: PUSH
23089: LD_INT 2
23091: NEG
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 1
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 2
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: PUSH
23131: LD_INT 2
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: PUSH
23141: LD_INT 2
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 0
23150: PUSH
23151: LD_INT 2
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: NEG
23161: PUSH
23162: LD_INT 1
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 2
23171: NEG
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: NEG
23183: PUSH
23184: LD_INT 1
23186: NEG
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 2
23194: NEG
23195: PUSH
23196: LD_INT 2
23198: NEG
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23225: LD_ADDR_VAR 0 23
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 0
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 0
23242: PUSH
23243: LD_INT 1
23245: NEG
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: LD_INT 0
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: PUSH
23264: LD_INT 1
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 0
23273: PUSH
23274: LD_INT 1
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 1
23283: NEG
23284: PUSH
23285: LD_INT 0
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: LD_INT 1
23298: NEG
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: NEG
23307: PUSH
23308: LD_INT 2
23310: NEG
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 0
23318: PUSH
23319: LD_INT 2
23321: NEG
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 2
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: PUSH
23361: LD_INT 2
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 0
23380: PUSH
23381: LD_INT 2
23383: PUSH
23384: EMPTY
23385: LIST
23386: LIST
23387: PUSH
23388: LD_INT 1
23390: NEG
23391: PUSH
23392: LD_INT 1
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 2
23401: NEG
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 2
23412: NEG
23413: PUSH
23414: LD_INT 1
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: LD_INT 2
23424: NEG
23425: PUSH
23426: LD_INT 2
23428: NEG
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PUSH
23434: LD_INT 2
23436: NEG
23437: PUSH
23438: LD_INT 3
23440: NEG
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: PUSH
23446: LD_INT 1
23448: NEG
23449: PUSH
23450: LD_INT 3
23452: NEG
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: PUSH
23461: LD_INT 2
23463: NEG
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 2
23471: PUSH
23472: LD_INT 1
23474: NEG
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23505: LD_ADDR_VAR 0 24
23509: PUSH
23510: LD_INT 0
23512: PUSH
23513: LD_INT 0
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 0
23522: PUSH
23523: LD_INT 1
23525: NEG
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: LD_INT 0
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 1
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 0
23553: PUSH
23554: LD_INT 1
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 1
23563: NEG
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: EMPTY
23569: LIST
23570: LIST
23571: PUSH
23572: LD_INT 1
23574: NEG
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PUSH
23584: LD_INT 1
23586: NEG
23587: PUSH
23588: LD_INT 2
23590: NEG
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: PUSH
23596: LD_INT 0
23598: PUSH
23599: LD_INT 2
23601: NEG
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 1
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 2
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: PUSH
23651: LD_INT 2
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 0
23660: PUSH
23661: LD_INT 2
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: NEG
23671: PUSH
23672: LD_INT 1
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 2
23681: NEG
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 2
23692: NEG
23693: PUSH
23694: LD_INT 1
23696: NEG
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: PUSH
23702: LD_INT 2
23704: NEG
23705: PUSH
23706: LD_INT 2
23708: NEG
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 1
23716: PUSH
23717: LD_INT 2
23719: NEG
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PUSH
23736: LD_INT 3
23738: PUSH
23739: LD_INT 1
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PUSH
23746: LD_INT 3
23748: PUSH
23749: LD_INT 2
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23781: LD_ADDR_VAR 0 25
23785: PUSH
23786: LD_INT 0
23788: PUSH
23789: LD_INT 0
23791: PUSH
23792: EMPTY
23793: LIST
23794: LIST
23795: PUSH
23796: LD_INT 0
23798: PUSH
23799: LD_INT 1
23801: NEG
23802: PUSH
23803: EMPTY
23804: LIST
23805: LIST
23806: PUSH
23807: LD_INT 1
23809: PUSH
23810: LD_INT 0
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 1
23819: PUSH
23820: LD_INT 1
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: LD_INT 1
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: LD_INT 1
23839: NEG
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: NEG
23851: PUSH
23852: LD_INT 1
23854: NEG
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: PUSH
23860: LD_INT 1
23862: NEG
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 0
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 2
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 2
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 2
23916: PUSH
23917: LD_INT 2
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: PUSH
23927: LD_INT 2
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 0
23936: PUSH
23937: LD_INT 2
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 1
23946: NEG
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PUSH
23955: LD_INT 2
23957: NEG
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: EMPTY
23963: LIST
23964: LIST
23965: PUSH
23966: LD_INT 2
23968: NEG
23969: PUSH
23970: LD_INT 1
23972: NEG
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 2
23980: NEG
23981: PUSH
23982: LD_INT 2
23984: NEG
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 1
23995: PUSH
23996: EMPTY
23997: LIST
23998: LIST
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: LD_INT 2
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_INT 2
24012: PUSH
24013: LD_INT 3
24015: PUSH
24016: EMPTY
24017: LIST
24018: LIST
24019: PUSH
24020: LD_INT 1
24022: PUSH
24023: LD_INT 3
24025: PUSH
24026: EMPTY
24027: LIST
24028: LIST
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24055: LD_ADDR_VAR 0 26
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: LD_INT 0
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 0
24072: PUSH
24073: LD_INT 1
24075: NEG
24076: PUSH
24077: EMPTY
24078: LIST
24079: LIST
24080: PUSH
24081: LD_INT 1
24083: PUSH
24084: LD_INT 0
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: PUSH
24091: LD_INT 1
24093: PUSH
24094: LD_INT 1
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 0
24103: PUSH
24104: LD_INT 1
24106: PUSH
24107: EMPTY
24108: LIST
24109: LIST
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: LD_INT 0
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 1
24124: NEG
24125: PUSH
24126: LD_INT 1
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 1
24136: NEG
24137: PUSH
24138: LD_INT 2
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 2
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 1
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 2
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 2
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 2
24190: PUSH
24191: LD_INT 2
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: PUSH
24201: LD_INT 2
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PUSH
24208: LD_INT 0
24210: PUSH
24211: LD_INT 2
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PUSH
24218: LD_INT 1
24220: NEG
24221: PUSH
24222: LD_INT 1
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 2
24231: NEG
24232: PUSH
24233: LD_INT 0
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 2
24242: NEG
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: NEG
24255: PUSH
24256: LD_INT 2
24258: NEG
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 1
24276: PUSH
24277: LD_INT 3
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: PUSH
24284: LD_INT 1
24286: NEG
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 2
24297: NEG
24298: PUSH
24299: LD_INT 1
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24331: LD_ADDR_VAR 0 27
24335: PUSH
24336: LD_INT 0
24338: PUSH
24339: LD_INT 0
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 0
24348: PUSH
24349: LD_INT 1
24351: NEG
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 1
24359: PUSH
24360: LD_INT 0
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: LD_INT 1
24369: PUSH
24370: LD_INT 1
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 0
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 1
24389: NEG
24390: PUSH
24391: LD_INT 0
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: PUSH
24398: LD_INT 1
24400: NEG
24401: PUSH
24402: LD_INT 1
24404: NEG
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 1
24412: NEG
24413: PUSH
24414: LD_INT 2
24416: NEG
24417: PUSH
24418: EMPTY
24419: LIST
24420: LIST
24421: PUSH
24422: LD_INT 0
24424: PUSH
24425: LD_INT 2
24427: NEG
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 1
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 2
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 2
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 2
24466: PUSH
24467: LD_INT 2
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: LD_INT 2
24479: PUSH
24480: EMPTY
24481: LIST
24482: LIST
24483: PUSH
24484: LD_INT 0
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 1
24496: NEG
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: LD_INT 2
24507: NEG
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: LD_INT 2
24518: NEG
24519: PUSH
24520: LD_INT 1
24522: NEG
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 2
24530: NEG
24531: PUSH
24532: LD_INT 2
24534: NEG
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: LD_INT 1
24542: NEG
24543: PUSH
24544: LD_INT 2
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: NEG
24554: PUSH
24555: LD_INT 1
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 3
24564: NEG
24565: PUSH
24566: LD_INT 1
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 3
24576: NEG
24577: PUSH
24578: LD_INT 2
24580: NEG
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24611: LD_ADDR_VAR 0 28
24615: PUSH
24616: LD_INT 0
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 0
24628: PUSH
24629: LD_INT 1
24631: NEG
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 1
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: LD_INT 1
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 0
24659: PUSH
24660: LD_INT 1
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 1
24669: NEG
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: LD_INT 1
24684: NEG
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: LD_INT 2
24696: NEG
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: LD_INT 2
24707: NEG
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 2
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 2
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 2
24746: PUSH
24747: LD_INT 2
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: LD_INT 0
24766: PUSH
24767: LD_INT 2
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: NEG
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 2
24787: NEG
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 2
24798: NEG
24799: PUSH
24800: LD_INT 1
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 2
24810: NEG
24811: PUSH
24812: LD_INT 2
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: LD_INT 3
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: LD_INT 3
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 3
24846: NEG
24847: PUSH
24848: LD_INT 1
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 3
24858: NEG
24859: PUSH
24860: LD_INT 2
24862: NEG
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24893: LD_ADDR_VAR 0 29
24897: PUSH
24898: LD_INT 0
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: PUSH
24922: LD_INT 0
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 1
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 0
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 1
24951: NEG
24952: PUSH
24953: LD_INT 0
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 1
24962: NEG
24963: PUSH
24964: LD_INT 1
24966: NEG
24967: PUSH
24968: EMPTY
24969: LIST
24970: LIST
24971: PUSH
24972: LD_INT 1
24974: NEG
24975: PUSH
24976: LD_INT 2
24978: NEG
24979: PUSH
24980: EMPTY
24981: LIST
24982: LIST
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: LD_INT 2
24989: NEG
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 2
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 2
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 1
25028: PUSH
25029: LD_INT 2
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: LD_INT 2
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: LD_INT 1
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: PUSH
25057: LD_INT 2
25059: NEG
25060: PUSH
25061: LD_INT 1
25063: NEG
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 2
25071: NEG
25072: PUSH
25073: LD_INT 2
25075: NEG
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: LD_INT 2
25083: NEG
25084: PUSH
25085: LD_INT 3
25087: NEG
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 1
25098: NEG
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 3
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: EMPTY
25111: LIST
25112: LIST
25113: PUSH
25114: LD_INT 1
25116: PUSH
25117: LD_INT 3
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 1
25126: NEG
25127: PUSH
25128: LD_INT 2
25130: PUSH
25131: EMPTY
25132: LIST
25133: LIST
25134: PUSH
25135: LD_INT 3
25137: NEG
25138: PUSH
25139: LD_INT 2
25141: NEG
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25172: LD_ADDR_VAR 0 30
25176: PUSH
25177: LD_INT 0
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PUSH
25187: LD_INT 0
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: PUSH
25201: LD_INT 0
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 1
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 0
25220: PUSH
25221: LD_INT 1
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: LD_INT 0
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: PUSH
25239: LD_INT 1
25241: NEG
25242: PUSH
25243: LD_INT 1
25245: NEG
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 1
25253: NEG
25254: PUSH
25255: LD_INT 2
25257: NEG
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 0
25265: PUSH
25266: LD_INT 2
25268: NEG
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 1
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 2
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 2
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 2
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: NEG
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 2
25338: NEG
25339: PUSH
25340: LD_INT 0
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: LD_INT 2
25349: NEG
25350: PUSH
25351: LD_INT 1
25353: NEG
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 1
25361: NEG
25362: PUSH
25363: LD_INT 3
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 2
25376: NEG
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 3
25384: PUSH
25385: LD_INT 2
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: LD_INT 3
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: NEG
25405: PUSH
25406: LD_INT 1
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 3
25415: NEG
25416: PUSH
25417: LD_INT 1
25419: NEG
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25450: LD_ADDR_VAR 0 31
25454: PUSH
25455: LD_INT 0
25457: PUSH
25458: LD_INT 0
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: LD_INT 1
25470: NEG
25471: PUSH
25472: EMPTY
25473: LIST
25474: LIST
25475: PUSH
25476: LD_INT 1
25478: PUSH
25479: LD_INT 0
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 1
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: LD_INT 1
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 1
25508: NEG
25509: PUSH
25510: LD_INT 0
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PUSH
25517: LD_INT 1
25519: NEG
25520: PUSH
25521: LD_INT 1
25523: NEG
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 1
25531: NEG
25532: PUSH
25533: LD_INT 2
25535: NEG
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: PUSH
25544: LD_INT 1
25546: NEG
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 2
25554: PUSH
25555: LD_INT 0
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PUSH
25562: LD_INT 2
25564: PUSH
25565: LD_INT 1
25567: PUSH
25568: EMPTY
25569: LIST
25570: LIST
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: LD_INT 2
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PUSH
25582: LD_INT 1
25584: PUSH
25585: LD_INT 2
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 2
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 1
25604: NEG
25605: PUSH
25606: LD_INT 1
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 2
25615: NEG
25616: PUSH
25617: LD_INT 1
25619: NEG
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 2
25627: NEG
25628: PUSH
25629: LD_INT 2
25631: NEG
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 2
25639: NEG
25640: PUSH
25641: LD_INT 3
25643: NEG
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 1
25654: NEG
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 3
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: LD_INT 3
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 1
25682: NEG
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 3
25693: NEG
25694: PUSH
25695: LD_INT 2
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25728: LD_ADDR_VAR 0 32
25732: PUSH
25733: LD_INT 0
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 0
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 0
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 1
25786: NEG
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 1
25797: NEG
25798: PUSH
25799: LD_INT 1
25801: NEG
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 1
25809: NEG
25810: PUSH
25811: LD_INT 2
25813: NEG
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: LD_INT 2
25824: NEG
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 2
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: PUSH
25854: LD_INT 2
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 1
25863: PUSH
25864: LD_INT 2
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 0
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 1
25883: NEG
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 2
25894: NEG
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 2
25905: NEG
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 1
25917: NEG
25918: PUSH
25919: LD_INT 3
25921: NEG
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PUSH
25927: LD_INT 1
25929: PUSH
25930: LD_INT 2
25932: NEG
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: LD_INT 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 3
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: NEG
25961: PUSH
25962: LD_INT 1
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 3
25971: NEG
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: LIST
25985: LIST
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: LIST
25999: LIST
26000: LIST
26001: LIST
26002: LIST
26003: LIST
26004: LIST
26005: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26006: LD_ADDR_VAR 0 33
26010: PUSH
26011: LD_INT 0
26013: PUSH
26014: LD_INT 0
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 0
26023: PUSH
26024: LD_INT 1
26026: NEG
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 1
26034: PUSH
26035: LD_INT 0
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 1
26044: PUSH
26045: LD_INT 1
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 0
26054: PUSH
26055: LD_INT 1
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: NEG
26065: PUSH
26066: LD_INT 0
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 1
26075: NEG
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: LD_INT 2
26091: NEG
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: PUSH
26100: LD_INT 1
26102: NEG
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 2
26110: PUSH
26111: LD_INT 0
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 2
26120: PUSH
26121: LD_INT 1
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 1
26130: PUSH
26131: LD_INT 2
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 0
26140: PUSH
26141: LD_INT 2
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 1
26150: NEG
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: LD_INT 2
26161: NEG
26162: PUSH
26163: LD_INT 0
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: LD_INT 1
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 2
26184: NEG
26185: PUSH
26186: LD_INT 2
26188: NEG
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 2
26196: NEG
26197: PUSH
26198: LD_INT 3
26200: NEG
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 2
26208: PUSH
26209: LD_INT 1
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 3
26219: PUSH
26220: LD_INT 1
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 1
26229: PUSH
26230: LD_INT 3
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 1
26239: NEG
26240: PUSH
26241: LD_INT 2
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 3
26250: NEG
26251: PUSH
26252: LD_INT 2
26254: NEG
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: LIST
26264: LIST
26265: LIST
26266: LIST
26267: LIST
26268: LIST
26269: LIST
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26285: LD_ADDR_VAR 0 34
26289: PUSH
26290: LD_INT 0
26292: PUSH
26293: LD_INT 0
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: PUSH
26314: LD_INT 0
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: LD_INT 1
26326: PUSH
26327: EMPTY
26328: LIST
26329: LIST
26330: PUSH
26331: LD_INT 0
26333: PUSH
26334: LD_INT 1
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: PUSH
26341: LD_INT 1
26343: NEG
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: EMPTY
26349: LIST
26350: LIST
26351: PUSH
26352: LD_INT 1
26354: NEG
26355: PUSH
26356: LD_INT 1
26358: NEG
26359: PUSH
26360: EMPTY
26361: LIST
26362: LIST
26363: PUSH
26364: LD_INT 1
26366: NEG
26367: PUSH
26368: LD_INT 2
26370: NEG
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PUSH
26376: LD_INT 0
26378: PUSH
26379: LD_INT 2
26381: NEG
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 2
26400: PUSH
26401: LD_INT 1
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 2
26410: PUSH
26411: LD_INT 2
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: LD_INT 2
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 2
26441: NEG
26442: PUSH
26443: LD_INT 0
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: NEG
26453: PUSH
26454: LD_INT 1
26456: NEG
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 2
26464: NEG
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: NEG
26477: PUSH
26478: LD_INT 3
26480: NEG
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 3
26499: PUSH
26500: LD_INT 2
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: PUSH
26507: LD_INT 2
26509: PUSH
26510: LD_INT 3
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PUSH
26517: LD_INT 2
26519: NEG
26520: PUSH
26521: LD_INT 1
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 3
26530: NEG
26531: PUSH
26532: LD_INT 1
26534: NEG
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: LIST
26547: LIST
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26565: LD_ADDR_VAR 0 35
26569: PUSH
26570: LD_INT 0
26572: PUSH
26573: LD_INT 0
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: LD_INT 1
26585: NEG
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 0
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 1
26603: PUSH
26604: LD_INT 1
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: EMPTY
26618: LIST
26619: LIST
26620: PUSH
26621: LD_INT 1
26623: NEG
26624: PUSH
26625: LD_INT 0
26627: PUSH
26628: EMPTY
26629: LIST
26630: LIST
26631: PUSH
26632: LD_INT 1
26634: NEG
26635: PUSH
26636: LD_INT 1
26638: NEG
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 2
26656: NEG
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26677: LD_ADDR_VAR 0 36
26681: PUSH
26682: LD_INT 0
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: EMPTY
26689: LIST
26690: LIST
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: LD_INT 1
26697: NEG
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 1
26705: PUSH
26706: LD_INT 0
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 1
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: PUSH
26733: LD_INT 1
26735: NEG
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: PUSH
26744: LD_INT 1
26746: NEG
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: LD_INT 1
26758: NEG
26759: PUSH
26760: LD_INT 2
26762: NEG
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: PUSH
26768: LD_INT 1
26770: PUSH
26771: LD_INT 2
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26789: LD_ADDR_VAR 0 37
26793: PUSH
26794: LD_INT 0
26796: PUSH
26797: LD_INT 0
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: PUSH
26818: LD_INT 0
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 1
26858: NEG
26859: PUSH
26860: LD_INT 1
26862: NEG
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 1
26881: NEG
26882: PUSH
26883: LD_INT 1
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26901: LD_ADDR_VAR 0 38
26905: PUSH
26906: LD_INT 0
26908: PUSH
26909: LD_INT 0
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: PUSH
26916: LD_INT 0
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: LD_INT 0
26932: PUSH
26933: EMPTY
26934: LIST
26935: LIST
26936: PUSH
26937: LD_INT 1
26939: PUSH
26940: LD_INT 1
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 0
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: LD_INT 1
26959: NEG
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 1
26970: NEG
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: EMPTY
26977: LIST
26978: LIST
26979: PUSH
26980: LD_INT 2
26982: PUSH
26983: LD_INT 1
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 2
26992: NEG
26993: PUSH
26994: LD_INT 1
26996: NEG
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27013: LD_ADDR_VAR 0 39
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: LD_INT 1
27054: PUSH
27055: EMPTY
27056: LIST
27057: LIST
27058: PUSH
27059: LD_INT 0
27061: PUSH
27062: LD_INT 1
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 1
27071: NEG
27072: PUSH
27073: LD_INT 0
27075: PUSH
27076: EMPTY
27077: LIST
27078: LIST
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: LD_INT 1
27086: NEG
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 1
27094: NEG
27095: PUSH
27096: LD_INT 2
27098: NEG
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PUSH
27104: LD_INT 1
27106: PUSH
27107: LD_INT 2
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27125: LD_ADDR_VAR 0 40
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 1
27145: NEG
27146: PUSH
27147: EMPTY
27148: LIST
27149: LIST
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: LD_INT 0
27173: PUSH
27174: LD_INT 1
27176: PUSH
27177: EMPTY
27178: LIST
27179: LIST
27180: PUSH
27181: LD_INT 1
27183: NEG
27184: PUSH
27185: LD_INT 0
27187: PUSH
27188: EMPTY
27189: LIST
27190: LIST
27191: PUSH
27192: LD_INT 1
27194: NEG
27195: PUSH
27196: LD_INT 1
27198: NEG
27199: PUSH
27200: EMPTY
27201: LIST
27202: LIST
27203: PUSH
27204: LD_INT 1
27206: PUSH
27207: LD_INT 1
27209: NEG
27210: PUSH
27211: EMPTY
27212: LIST
27213: LIST
27214: PUSH
27215: LD_INT 1
27217: NEG
27218: PUSH
27219: LD_INT 1
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: LIST
27235: LIST
27236: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27237: LD_ADDR_VAR 0 41
27241: PUSH
27242: LD_INT 0
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 1
27257: NEG
27258: PUSH
27259: EMPTY
27260: LIST
27261: LIST
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: EMPTY
27280: LIST
27281: LIST
27282: PUSH
27283: LD_INT 0
27285: PUSH
27286: LD_INT 1
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: PUSH
27293: LD_INT 1
27295: NEG
27296: PUSH
27297: LD_INT 0
27299: PUSH
27300: EMPTY
27301: LIST
27302: LIST
27303: PUSH
27304: LD_INT 1
27306: NEG
27307: PUSH
27308: LD_INT 1
27310: NEG
27311: PUSH
27312: EMPTY
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 1
27318: NEG
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 1
27330: PUSH
27331: LD_INT 1
27333: NEG
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 2
27341: PUSH
27342: LD_INT 0
27344: PUSH
27345: EMPTY
27346: LIST
27347: LIST
27348: PUSH
27349: LD_INT 2
27351: PUSH
27352: LD_INT 1
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 2
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: LD_INT 1
27371: PUSH
27372: LD_INT 2
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: NEG
27382: PUSH
27383: LD_INT 1
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: LD_INT 0
27396: PUSH
27397: EMPTY
27398: LIST
27399: LIST
27400: PUSH
27401: LD_INT 2
27403: NEG
27404: PUSH
27405: LD_INT 1
27407: NEG
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 2
27415: NEG
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: LD_INT 3
27431: NEG
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 2
27439: PUSH
27440: LD_INT 1
27442: NEG
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 3
27450: PUSH
27451: LD_INT 0
27453: PUSH
27454: EMPTY
27455: LIST
27456: LIST
27457: PUSH
27458: LD_INT 3
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: PUSH
27468: LD_INT 3
27470: PUSH
27471: LD_INT 2
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: PUSH
27478: LD_INT 3
27480: PUSH
27481: LD_INT 3
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: EMPTY
27495: LIST
27496: LIST
27497: PUSH
27498: LD_INT 2
27500: NEG
27501: PUSH
27502: LD_INT 1
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 3
27511: NEG
27512: PUSH
27513: LD_INT 0
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 3
27522: NEG
27523: PUSH
27524: LD_INT 1
27526: NEG
27527: PUSH
27528: EMPTY
27529: LIST
27530: LIST
27531: PUSH
27532: LD_INT 3
27534: NEG
27535: PUSH
27536: LD_INT 2
27538: NEG
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 3
27546: NEG
27547: PUSH
27548: LD_INT 3
27550: NEG
27551: PUSH
27552: EMPTY
27553: LIST
27554: LIST
27555: PUSH
27556: EMPTY
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27587: LD_ADDR_VAR 0 42
27591: PUSH
27592: LD_INT 0
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: LD_INT 1
27607: NEG
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: PUSH
27623: LD_INT 1
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 0
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: LD_INT 0
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: PUSH
27654: LD_INT 1
27656: NEG
27657: PUSH
27658: LD_INT 1
27660: NEG
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: PUSH
27666: LD_INT 1
27668: NEG
27669: PUSH
27670: LD_INT 2
27672: NEG
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: PUSH
27678: LD_INT 0
27680: PUSH
27681: LD_INT 2
27683: NEG
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 2
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: LD_INT 2
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: LD_INT 2
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 0
27732: PUSH
27733: LD_INT 2
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: PUSH
27740: LD_INT 1
27742: NEG
27743: PUSH
27744: LD_INT 1
27746: PUSH
27747: EMPTY
27748: LIST
27749: LIST
27750: PUSH
27751: LD_INT 2
27753: NEG
27754: PUSH
27755: LD_INT 1
27757: NEG
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: PUSH
27763: LD_INT 2
27765: NEG
27766: PUSH
27767: LD_INT 2
27769: NEG
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 2
27777: NEG
27778: PUSH
27779: LD_INT 3
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 3
27793: NEG
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 3
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 3
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 3
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 0
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: EMPTY
27868: LIST
27869: LIST
27870: PUSH
27871: LD_INT 1
27873: NEG
27874: PUSH
27875: LD_INT 2
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 3
27884: NEG
27885: PUSH
27886: LD_INT 2
27888: NEG
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 3
27896: NEG
27897: PUSH
27898: LD_INT 3
27900: NEG
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
27937: LD_ADDR_VAR 0 43
27941: PUSH
27942: LD_INT 0
27944: PUSH
27945: LD_INT 0
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 0
27954: PUSH
27955: LD_INT 1
27957: NEG
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: LD_INT 0
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 1
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 0
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 1
27995: NEG
27996: PUSH
27997: LD_INT 0
27999: PUSH
28000: EMPTY
28001: LIST
28002: LIST
28003: PUSH
28004: LD_INT 1
28006: NEG
28007: PUSH
28008: LD_INT 1
28010: NEG
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 2
28022: NEG
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 0
28030: PUSH
28031: LD_INT 2
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 2
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 2
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 1
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 0
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: PUSH
28090: LD_INT 1
28092: NEG
28093: PUSH
28094: LD_INT 1
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: LD_INT 2
28103: NEG
28104: PUSH
28105: LD_INT 0
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: LD_INT 2
28114: NEG
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 1
28126: NEG
28127: PUSH
28128: LD_INT 3
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 0
28138: PUSH
28139: LD_INT 3
28141: NEG
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 1
28149: PUSH
28150: LD_INT 2
28152: NEG
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: LD_INT 2
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 3
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: LD_INT 1
28184: PUSH
28185: EMPTY
28186: LIST
28187: LIST
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: LD_INT 3
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 0
28201: PUSH
28202: LD_INT 3
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: NEG
28212: PUSH
28213: LD_INT 2
28215: PUSH
28216: EMPTY
28217: LIST
28218: LIST
28219: PUSH
28220: LD_INT 2
28222: NEG
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 3
28233: NEG
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 3
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: LIST
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: LIST
28268: LIST
28269: LIST
28270: LIST
28271: LIST
28272: LIST
28273: LIST
28274: LIST
28275: LIST
28276: LIST
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28285: LD_ADDR_VAR 0 44
28289: PUSH
28290: LD_INT 0
28292: PUSH
28293: LD_INT 0
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: LD_INT 1
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: LD_INT 0
28316: PUSH
28317: EMPTY
28318: LIST
28319: LIST
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 1
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 0
28333: PUSH
28334: LD_INT 1
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: NEG
28344: PUSH
28345: LD_INT 0
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 1
28354: NEG
28355: PUSH
28356: LD_INT 1
28358: NEG
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: LD_INT 1
28381: NEG
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: LD_INT 0
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 2
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 2
28409: PUSH
28410: LD_INT 2
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: PUSH
28417: LD_INT 1
28419: PUSH
28420: LD_INT 2
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 1
28429: NEG
28430: PUSH
28431: LD_INT 1
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 2
28440: NEG
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 2
28451: NEG
28452: PUSH
28453: LD_INT 1
28455: NEG
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PUSH
28461: LD_INT 2
28463: NEG
28464: PUSH
28465: LD_INT 2
28467: NEG
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: NEG
28476: PUSH
28477: LD_INT 3
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 2
28487: PUSH
28488: LD_INT 1
28490: NEG
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 3
28498: PUSH
28499: LD_INT 0
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: LD_INT 3
28508: PUSH
28509: LD_INT 1
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 3
28518: PUSH
28519: LD_INT 2
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 3
28528: PUSH
28529: LD_INT 3
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: LD_INT 3
28541: PUSH
28542: EMPTY
28543: LIST
28544: LIST
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: LD_INT 1
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 3
28559: NEG
28560: PUSH
28561: LD_INT 0
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 3
28570: NEG
28571: PUSH
28572: LD_INT 1
28574: NEG
28575: PUSH
28576: EMPTY
28577: LIST
28578: LIST
28579: PUSH
28580: LD_INT 3
28582: NEG
28583: PUSH
28584: LD_INT 2
28586: NEG
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 3
28594: NEG
28595: PUSH
28596: LD_INT 3
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28635: LD_ADDR_VAR 0 45
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 0
28652: PUSH
28653: LD_INT 1
28655: NEG
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: LD_INT 0
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 0
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 1
28693: NEG
28694: PUSH
28695: LD_INT 0
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 1
28704: NEG
28705: PUSH
28706: LD_INT 1
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: LD_INT 1
28716: NEG
28717: PUSH
28718: LD_INT 2
28720: NEG
28721: PUSH
28722: EMPTY
28723: LIST
28724: LIST
28725: PUSH
28726: LD_INT 0
28728: PUSH
28729: LD_INT 2
28731: NEG
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 2
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 2
28760: PUSH
28761: LD_INT 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 1
28770: PUSH
28771: LD_INT 2
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 0
28780: PUSH
28781: LD_INT 2
28783: PUSH
28784: EMPTY
28785: LIST
28786: LIST
28787: PUSH
28788: LD_INT 1
28790: NEG
28791: PUSH
28792: LD_INT 1
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: PUSH
28799: LD_INT 2
28801: NEG
28802: PUSH
28803: LD_INT 1
28805: NEG
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: PUSH
28811: LD_INT 2
28813: NEG
28814: PUSH
28815: LD_INT 2
28817: NEG
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 2
28825: NEG
28826: PUSH
28827: LD_INT 3
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 3
28841: NEG
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: LD_INT 0
28849: PUSH
28850: LD_INT 3
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 3
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: PUSH
28879: LD_INT 3
28881: PUSH
28882: LD_INT 3
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 1
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: PUSH
28909: LD_INT 0
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: EMPTY
28916: LIST
28917: LIST
28918: PUSH
28919: LD_INT 1
28921: NEG
28922: PUSH
28923: LD_INT 2
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 3
28932: NEG
28933: PUSH
28934: LD_INT 2
28936: NEG
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 3
28944: NEG
28945: PUSH
28946: LD_INT 3
28948: NEG
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: EMPTY
28955: LIST
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: LIST
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: LIST
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28985: LD_ADDR_VAR 0 46
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 0
29002: PUSH
29003: LD_INT 1
29005: NEG
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 1
29013: PUSH
29014: LD_INT 0
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 1
29023: PUSH
29024: LD_INT 1
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 0
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: PUSH
29045: LD_INT 0
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: LD_INT 1
29054: NEG
29055: PUSH
29056: LD_INT 1
29058: NEG
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: LD_INT 1
29066: NEG
29067: PUSH
29068: LD_INT 2
29070: NEG
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: PUSH
29076: LD_INT 0
29078: PUSH
29079: LD_INT 2
29081: NEG
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 2
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 2
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 1
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 0
29130: PUSH
29131: LD_INT 2
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 1
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 2
29151: NEG
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: EMPTY
29157: LIST
29158: LIST
29159: PUSH
29160: LD_INT 2
29162: NEG
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: EMPTY
29169: LIST
29170: LIST
29171: PUSH
29172: LD_INT 1
29174: NEG
29175: PUSH
29176: LD_INT 3
29178: NEG
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 0
29186: PUSH
29187: LD_INT 3
29189: NEG
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 2
29208: PUSH
29209: LD_INT 1
29211: NEG
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: PUSH
29227: LD_INT 3
29229: PUSH
29230: LD_INT 1
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: LD_INT 3
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 0
29249: PUSH
29250: LD_INT 3
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: LD_INT 2
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: LD_INT 2
29270: NEG
29271: PUSH
29272: LD_INT 1
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 3
29281: NEG
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 3
29292: NEG
29293: PUSH
29294: LD_INT 1
29296: NEG
29297: PUSH
29298: EMPTY
29299: LIST
29300: LIST
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29333: LD_ADDR_VAR 0 47
29337: PUSH
29338: LD_INT 0
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 0
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: LD_INT 0
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: PUSH
29369: LD_INT 1
29371: PUSH
29372: LD_INT 1
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 0
29381: PUSH
29382: LD_INT 1
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: LD_INT 1
29391: NEG
29392: PUSH
29393: LD_INT 0
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: LD_INT 1
29402: NEG
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 1
29414: NEG
29415: PUSH
29416: LD_INT 2
29418: NEG
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 0
29426: PUSH
29427: LD_INT 2
29429: NEG
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 2
29448: NEG
29449: PUSH
29450: LD_INT 1
29452: NEG
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 2
29460: NEG
29461: PUSH
29462: LD_INT 2
29464: NEG
29465: PUSH
29466: EMPTY
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: LIST
29477: LIST
29478: LIST
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29484: LD_ADDR_VAR 0 48
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 1
29512: PUSH
29513: LD_INT 0
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 1
29522: PUSH
29523: LD_INT 1
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: LD_INT 1
29535: PUSH
29536: EMPTY
29537: LIST
29538: LIST
29539: PUSH
29540: LD_INT 1
29542: NEG
29543: PUSH
29544: LD_INT 0
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PUSH
29551: LD_INT 1
29553: NEG
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: EMPTY
29560: LIST
29561: LIST
29562: PUSH
29563: LD_INT 1
29565: NEG
29566: PUSH
29567: LD_INT 2
29569: NEG
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: PUSH
29575: LD_INT 0
29577: PUSH
29578: LD_INT 2
29580: NEG
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 1
29588: PUSH
29589: LD_INT 1
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 2
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 2
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29631: LD_ADDR_VAR 0 49
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 0
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: LD_INT 1
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 0
29679: PUSH
29680: LD_INT 1
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: LD_INT 1
29689: NEG
29690: PUSH
29691: LD_INT 0
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 1
29700: NEG
29701: PUSH
29702: LD_INT 1
29704: NEG
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 1
29715: NEG
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: PUSH
29724: LD_INT 0
29726: PUSH
29727: EMPTY
29728: LIST
29729: LIST
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 1
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29775: LD_ADDR_VAR 0 50
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 1
29859: PUSH
29860: EMPTY
29861: LIST
29862: LIST
29863: PUSH
29864: LD_INT 2
29866: PUSH
29867: LD_INT 2
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 1
29876: PUSH
29877: LD_INT 2
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: LD_INT 0
29886: PUSH
29887: LD_INT 2
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PUSH
29894: LD_INT 1
29896: NEG
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
29919: LD_ADDR_VAR 0 51
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 1
30000: PUSH
30001: LD_INT 2
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: NEG
30021: PUSH
30022: LD_INT 1
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 2
30031: NEG
30032: PUSH
30033: LD_INT 0
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: PUSH
30040: LD_INT 2
30042: NEG
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: EMPTY
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30066: LD_ADDR_VAR 0 52
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: LD_INT 0
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: PUSH
30081: LD_INT 0
30083: PUSH
30084: LD_INT 1
30086: NEG
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 0
30114: PUSH
30115: LD_INT 1
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: LD_INT 1
30124: NEG
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 1
30135: NEG
30136: PUSH
30137: LD_INT 1
30139: NEG
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 1
30147: NEG
30148: PUSH
30149: LD_INT 2
30151: NEG
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: LD_INT 1
30159: NEG
30160: PUSH
30161: LD_INT 1
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 2
30170: NEG
30171: PUSH
30172: LD_INT 0
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 2
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: NEG
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: PUSH
30191: LD_INT 2
30193: NEG
30194: PUSH
30195: LD_INT 2
30197: NEG
30198: PUSH
30199: EMPTY
30200: LIST
30201: LIST
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30217: LD_ADDR_VAR 0 53
30221: PUSH
30222: LD_INT 0
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 0
30234: PUSH
30235: LD_INT 1
30237: NEG
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: PUSH
30243: LD_INT 1
30245: PUSH
30246: LD_INT 0
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 0
30265: PUSH
30266: LD_INT 1
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: LD_INT 1
30275: NEG
30276: PUSH
30277: LD_INT 0
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PUSH
30284: LD_INT 1
30286: NEG
30287: PUSH
30288: LD_INT 1
30290: NEG
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: PUSH
30296: LD_INT 1
30298: NEG
30299: PUSH
30300: LD_INT 2
30302: NEG
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: LD_INT 0
30310: PUSH
30311: LD_INT 2
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 2
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 2
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: LD_INT 2
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: PUSH
30363: LD_INT 2
30365: PUSH
30366: EMPTY
30367: LIST
30368: LIST
30369: PUSH
30370: LD_INT 0
30372: PUSH
30373: LD_INT 2
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PUSH
30380: LD_INT 1
30382: NEG
30383: PUSH
30384: LD_INT 1
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 2
30393: NEG
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 2
30404: NEG
30405: PUSH
30406: LD_INT 1
30408: NEG
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 2
30416: NEG
30417: PUSH
30418: LD_INT 2
30420: NEG
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30447: LD_ADDR_VAR 0 54
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: LD_INT 0
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 0
30464: PUSH
30465: LD_INT 1
30467: NEG
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: PUSH
30473: LD_INT 1
30475: PUSH
30476: LD_INT 0
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 1
30485: PUSH
30486: LD_INT 1
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: LD_INT 1
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: LD_INT 0
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: NEG
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 1
30528: NEG
30529: PUSH
30530: LD_INT 2
30532: NEG
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 0
30540: PUSH
30541: LD_INT 2
30543: NEG
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 2
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 2
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: LD_INT 2
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: PUSH
30600: LD_INT 0
30602: PUSH
30603: LD_INT 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 1
30612: NEG
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 2
30623: NEG
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: NEG
30635: PUSH
30636: LD_INT 1
30638: NEG
30639: PUSH
30640: EMPTY
30641: LIST
30642: LIST
30643: PUSH
30644: LD_INT 2
30646: NEG
30647: PUSH
30648: LD_INT 2
30650: NEG
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30677: LD_ADDR_VAR 0 55
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: LD_INT 0
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 0
30694: PUSH
30695: LD_INT 1
30697: NEG
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: LD_INT 0
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: PUSH
30716: LD_INT 1
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: PUSH
30723: LD_INT 0
30725: PUSH
30726: LD_INT 1
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 0
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 1
30746: NEG
30747: PUSH
30748: LD_INT 1
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: NEG
30759: PUSH
30760: LD_INT 2
30762: NEG
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 0
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 1
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: PUSH
30813: LD_INT 2
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 0
30832: PUSH
30833: LD_INT 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 1
30842: NEG
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 2
30853: NEG
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: EMPTY
30859: LIST
30860: LIST
30861: PUSH
30862: LD_INT 2
30864: NEG
30865: PUSH
30866: LD_INT 1
30868: NEG
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 2
30876: NEG
30877: PUSH
30878: LD_INT 2
30880: NEG
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: LIST
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: LIST
30905: LIST
30906: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30907: LD_ADDR_VAR 0 56
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 0
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 1
30927: NEG
30928: PUSH
30929: EMPTY
30930: LIST
30931: LIST
30932: PUSH
30933: LD_INT 1
30935: PUSH
30936: LD_INT 0
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: LD_INT 1
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 1
30965: NEG
30966: PUSH
30967: LD_INT 0
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 1
30976: NEG
30977: PUSH
30978: LD_INT 1
30980: NEG
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: NEG
30989: PUSH
30990: LD_INT 2
30992: NEG
30993: PUSH
30994: EMPTY
30995: LIST
30996: LIST
30997: PUSH
30998: LD_INT 0
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: PUSH
31043: LD_INT 2
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 0
31062: PUSH
31063: LD_INT 2
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 1
31072: NEG
31073: PUSH
31074: LD_INT 1
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: LD_INT 2
31083: NEG
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 2
31094: NEG
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 2
31106: NEG
31107: PUSH
31108: LD_INT 2
31110: NEG
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31137: LD_ADDR_VAR 0 57
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 0
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 0
31154: PUSH
31155: LD_INT 1
31157: NEG
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: PUSH
31163: LD_INT 1
31165: PUSH
31166: LD_INT 0
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: LD_INT 0
31185: PUSH
31186: LD_INT 1
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PUSH
31193: LD_INT 1
31195: NEG
31196: PUSH
31197: LD_INT 0
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: NEG
31219: PUSH
31220: LD_INT 2
31222: NEG
31223: PUSH
31224: EMPTY
31225: LIST
31226: LIST
31227: PUSH
31228: LD_INT 0
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 1
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 2
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: PUSH
31273: LD_INT 2
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 2
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 0
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: LD_INT 1
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PUSH
31311: LD_INT 2
31313: NEG
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: PUSH
31322: LD_INT 2
31324: NEG
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: PUSH
31334: LD_INT 2
31336: NEG
31337: PUSH
31338: LD_INT 2
31340: NEG
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: LIST
31352: LIST
31353: LIST
31354: LIST
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31367: LD_ADDR_VAR 0 58
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: LD_INT 0
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 0
31384: PUSH
31385: LD_INT 1
31387: NEG
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 1
31395: PUSH
31396: LD_INT 0
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: PUSH
31406: LD_INT 1
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: LD_INT 0
31415: PUSH
31416: LD_INT 1
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: LD_INT 0
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 1
31436: NEG
31437: PUSH
31438: LD_INT 1
31440: NEG
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: LD_INT 2
31452: NEG
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 0
31460: PUSH
31461: LD_INT 2
31463: NEG
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 2
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: LD_INT 2
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: PUSH
31513: LD_INT 2
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 0
31522: PUSH
31523: LD_INT 2
31525: PUSH
31526: EMPTY
31527: LIST
31528: LIST
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: LD_INT 1
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 2
31543: NEG
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: NEG
31555: PUSH
31556: LD_INT 1
31558: NEG
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 2
31566: NEG
31567: PUSH
31568: LD_INT 2
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31597: LD_ADDR_VAR 0 59
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 0
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: EMPTY
31620: LIST
31621: LIST
31622: PUSH
31623: LD_INT 1
31625: PUSH
31626: LD_INT 0
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: PUSH
31636: LD_INT 1
31638: PUSH
31639: EMPTY
31640: LIST
31641: LIST
31642: PUSH
31643: LD_INT 0
31645: PUSH
31646: LD_INT 1
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 1
31655: NEG
31656: PUSH
31657: LD_INT 0
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: LD_INT 1
31670: NEG
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31685: LD_ADDR_VAR 0 60
31689: PUSH
31690: LD_INT 0
31692: PUSH
31693: LD_INT 0
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 0
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 1
31713: PUSH
31714: LD_INT 0
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: LD_INT 1
31726: PUSH
31727: EMPTY
31728: LIST
31729: LIST
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: LD_INT 1
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: NEG
31744: PUSH
31745: LD_INT 0
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 1
31754: NEG
31755: PUSH
31756: LD_INT 1
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31773: LD_ADDR_VAR 0 61
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: LD_INT 0
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 0
31790: PUSH
31791: LD_INT 1
31793: NEG
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: LD_INT 1
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 1
31831: NEG
31832: PUSH
31833: LD_INT 0
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31861: LD_ADDR_VAR 0 62
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: LD_INT 0
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 0
31878: PUSH
31879: LD_INT 1
31881: NEG
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 1
31899: PUSH
31900: LD_INT 1
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 0
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: NEG
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 1
31930: NEG
31931: PUSH
31932: LD_INT 1
31934: NEG
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31949: LD_ADDR_VAR 0 63
31953: PUSH
31954: LD_INT 0
31956: PUSH
31957: LD_INT 0
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 0
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 1
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 1
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 1
32007: NEG
32008: PUSH
32009: LD_INT 0
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: NEG
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32037: LD_ADDR_VAR 0 64
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: LD_INT 0
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: PUSH
32052: LD_INT 0
32054: PUSH
32055: LD_INT 1
32057: NEG
32058: PUSH
32059: EMPTY
32060: LIST
32061: LIST
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: LD_INT 0
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: LD_INT 1
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: LD_INT 1
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: LD_INT 1
32095: NEG
32096: PUSH
32097: LD_INT 0
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 1
32106: NEG
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: EMPTY
32113: LIST
32114: LIST
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: ST_TO_ADDR
// end ; 1 :
32125: GO 38022
32127: LD_INT 1
32129: DOUBLE
32130: EQUAL
32131: IFTRUE 32135
32133: GO 34758
32135: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32136: LD_ADDR_VAR 0 11
32140: PUSH
32141: LD_INT 1
32143: NEG
32144: PUSH
32145: LD_INT 3
32147: NEG
32148: PUSH
32149: EMPTY
32150: LIST
32151: LIST
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: LD_INT 3
32158: NEG
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 1
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32180: LD_ADDR_VAR 0 12
32184: PUSH
32185: LD_INT 2
32187: PUSH
32188: LD_INT 1
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 3
32198: PUSH
32199: LD_INT 0
32201: PUSH
32202: EMPTY
32203: LIST
32204: LIST
32205: PUSH
32206: LD_INT 3
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: LIST
32220: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32221: LD_ADDR_VAR 0 13
32225: PUSH
32226: LD_INT 3
32228: PUSH
32229: LD_INT 2
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 3
32238: PUSH
32239: LD_INT 3
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 2
32248: PUSH
32249: LD_INT 3
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: LIST
32260: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32261: LD_ADDR_VAR 0 14
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 3
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 3
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 1
32288: NEG
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: LIST
32301: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32302: LD_ADDR_VAR 0 15
32306: PUSH
32307: LD_INT 2
32309: NEG
32310: PUSH
32311: LD_INT 1
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: PUSH
32318: LD_INT 3
32320: NEG
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 3
32331: NEG
32332: PUSH
32333: LD_INT 1
32335: NEG
32336: PUSH
32337: EMPTY
32338: LIST
32339: LIST
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: LIST
32345: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32346: LD_ADDR_VAR 0 16
32350: PUSH
32351: LD_INT 2
32353: NEG
32354: PUSH
32355: LD_INT 3
32357: NEG
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 3
32365: NEG
32366: PUSH
32367: LD_INT 2
32369: NEG
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 3
32377: NEG
32378: PUSH
32379: LD_INT 3
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32392: LD_ADDR_VAR 0 17
32396: PUSH
32397: LD_INT 1
32399: NEG
32400: PUSH
32401: LD_INT 3
32403: NEG
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: LD_INT 3
32414: NEG
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 1
32422: PUSH
32423: LD_INT 2
32425: NEG
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32436: LD_ADDR_VAR 0 18
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: LD_INT 1
32446: NEG
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 3
32454: PUSH
32455: LD_INT 0
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32477: LD_ADDR_VAR 0 19
32481: PUSH
32482: LD_INT 3
32484: PUSH
32485: LD_INT 2
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 3
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 2
32504: PUSH
32505: LD_INT 3
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32517: LD_ADDR_VAR 0 20
32521: PUSH
32522: LD_INT 1
32524: PUSH
32525: LD_INT 3
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: LD_INT 3
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PUSH
32542: LD_INT 1
32544: NEG
32545: PUSH
32546: LD_INT 2
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: LIST
32557: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32558: LD_ADDR_VAR 0 21
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 3
32576: NEG
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 3
32587: NEG
32588: PUSH
32589: LD_INT 1
32591: NEG
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: LIST
32601: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32602: LD_ADDR_VAR 0 22
32606: PUSH
32607: LD_INT 2
32609: NEG
32610: PUSH
32611: LD_INT 3
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 3
32621: NEG
32622: PUSH
32623: LD_INT 2
32625: NEG
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: PUSH
32631: LD_INT 3
32633: NEG
32634: PUSH
32635: LD_INT 3
32637: NEG
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
32648: LD_ADDR_VAR 0 23
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 3
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 1
32666: NEG
32667: PUSH
32668: LD_INT 4
32670: NEG
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 3
32681: NEG
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: LIST
32691: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
32692: LD_ADDR_VAR 0 24
32696: PUSH
32697: LD_INT 3
32699: PUSH
32700: LD_INT 0
32702: PUSH
32703: EMPTY
32704: LIST
32705: LIST
32706: PUSH
32707: LD_INT 3
32709: PUSH
32710: LD_INT 1
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 4
32720: PUSH
32721: LD_INT 1
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32733: LD_ADDR_VAR 0 25
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: LD_INT 3
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 4
32750: PUSH
32751: LD_INT 3
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: LD_INT 3
32760: PUSH
32761: LD_INT 4
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: EMPTY
32769: LIST
32770: LIST
32771: LIST
32772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32773: LD_ADDR_VAR 0 26
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 3
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: LD_INT 4
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: NEG
32801: PUSH
32802: LD_INT 3
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: EMPTY
32810: LIST
32811: LIST
32812: LIST
32813: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
32814: LD_ADDR_VAR 0 27
32818: PUSH
32819: LD_INT 3
32821: NEG
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 3
32832: NEG
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 4
32843: NEG
32844: PUSH
32845: LD_INT 1
32847: NEG
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
32858: LD_ADDR_VAR 0 28
32862: PUSH
32863: LD_INT 3
32865: NEG
32866: PUSH
32867: LD_INT 3
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 3
32877: NEG
32878: PUSH
32879: LD_INT 4
32881: NEG
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 4
32889: NEG
32890: PUSH
32891: LD_INT 3
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: LIST
32903: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
32904: LD_ADDR_VAR 0 29
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 3
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: LD_INT 3
32926: NEG
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 2
32937: NEG
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: LD_INT 1
32945: NEG
32946: PUSH
32947: LD_INT 4
32949: NEG
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: PUSH
32955: LD_INT 0
32957: PUSH
32958: LD_INT 4
32960: NEG
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: PUSH
32966: LD_INT 1
32968: PUSH
32969: LD_INT 3
32971: NEG
32972: PUSH
32973: EMPTY
32974: LIST
32975: LIST
32976: PUSH
32977: LD_INT 1
32979: NEG
32980: PUSH
32981: LD_INT 5
32983: NEG
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 5
32994: NEG
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 1
33002: PUSH
33003: LD_INT 4
33005: NEG
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 6
33017: NEG
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 0
33025: PUSH
33026: LD_INT 6
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: PUSH
33037: LD_INT 5
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33059: LD_ADDR_VAR 0 30
33063: PUSH
33064: LD_INT 2
33066: PUSH
33067: LD_INT 1
33069: NEG
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 3
33077: PUSH
33078: LD_INT 0
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 3
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 3
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PUSH
33106: LD_INT 4
33108: PUSH
33109: LD_INT 0
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 1
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: LD_INT 1
33131: NEG
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: PUSH
33137: LD_INT 5
33139: PUSH
33140: LD_INT 0
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 5
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 5
33159: PUSH
33160: LD_INT 1
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 6
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 6
33180: PUSH
33181: LD_INT 1
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33202: LD_ADDR_VAR 0 31
33206: PUSH
33207: LD_INT 3
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 3
33219: PUSH
33220: LD_INT 3
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 2
33229: PUSH
33230: LD_INT 3
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: PUSH
33240: LD_INT 3
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 4
33249: PUSH
33250: LD_INT 4
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 3
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: LD_INT 5
33269: PUSH
33270: LD_INT 4
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 5
33279: PUSH
33280: LD_INT 5
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 4
33289: PUSH
33290: LD_INT 5
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 6
33299: PUSH
33300: LD_INT 5
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 6
33309: PUSH
33310: LD_INT 6
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 5
33319: PUSH
33320: LD_INT 6
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33341: LD_ADDR_VAR 0 32
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: LD_INT 3
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 4
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 4
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 1
33399: NEG
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 1
33410: PUSH
33411: LD_INT 5
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 0
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: NEG
33431: PUSH
33432: LD_INT 4
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 6
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 6
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 5
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33484: LD_ADDR_VAR 0 33
33488: PUSH
33489: LD_INT 2
33491: NEG
33492: PUSH
33493: LD_INT 1
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 3
33502: NEG
33503: PUSH
33504: LD_INT 0
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 3
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 3
33525: NEG
33526: PUSH
33527: LD_INT 1
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: LD_INT 4
33536: NEG
33537: PUSH
33538: LD_INT 0
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 4
33547: NEG
33548: PUSH
33549: LD_INT 1
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 4
33559: NEG
33560: PUSH
33561: LD_INT 1
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: PUSH
33568: LD_INT 5
33570: NEG
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 5
33581: NEG
33582: PUSH
33583: LD_INT 1
33585: NEG
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: PUSH
33591: LD_INT 5
33593: NEG
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 6
33604: NEG
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 6
33615: NEG
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
33639: LD_ADDR_VAR 0 34
33643: PUSH
33644: LD_INT 2
33646: NEG
33647: PUSH
33648: LD_INT 3
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 3
33658: NEG
33659: PUSH
33660: LD_INT 2
33662: NEG
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 3
33670: NEG
33671: PUSH
33672: LD_INT 3
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 3
33682: NEG
33683: PUSH
33684: LD_INT 4
33686: NEG
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PUSH
33692: LD_INT 4
33694: NEG
33695: PUSH
33696: LD_INT 3
33698: NEG
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 4
33706: NEG
33707: PUSH
33708: LD_INT 4
33710: NEG
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: PUSH
33716: LD_INT 4
33718: NEG
33719: PUSH
33720: LD_INT 5
33722: NEG
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: PUSH
33728: LD_INT 5
33730: NEG
33731: PUSH
33732: LD_INT 4
33734: NEG
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 5
33742: NEG
33743: PUSH
33744: LD_INT 5
33746: NEG
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 5
33754: NEG
33755: PUSH
33756: LD_INT 6
33758: NEG
33759: PUSH
33760: EMPTY
33761: LIST
33762: LIST
33763: PUSH
33764: LD_INT 6
33766: NEG
33767: PUSH
33768: LD_INT 5
33770: NEG
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: LD_INT 6
33778: NEG
33779: PUSH
33780: LD_INT 6
33782: NEG
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
33802: LD_ADDR_VAR 0 41
33806: PUSH
33807: LD_INT 0
33809: PUSH
33810: LD_INT 2
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 3
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 1
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
33846: LD_ADDR_VAR 0 42
33850: PUSH
33851: LD_INT 2
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: EMPTY
33858: LIST
33859: LIST
33860: PUSH
33861: LD_INT 2
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 3
33874: PUSH
33875: LD_INT 1
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: LIST
33886: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
33887: LD_ADDR_VAR 0 43
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 3
33904: PUSH
33905: LD_INT 2
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: LD_INT 3
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
33927: LD_ADDR_VAR 0 44
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: LD_INT 2
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: NEG
33955: PUSH
33956: LD_INT 2
33958: PUSH
33959: EMPTY
33960: LIST
33961: LIST
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: LIST
33967: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
33968: LD_ADDR_VAR 0 45
33972: PUSH
33973: LD_INT 2
33975: NEG
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 2
33986: NEG
33987: PUSH
33988: LD_INT 1
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 3
33997: NEG
33998: PUSH
33999: LD_INT 1
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34012: LD_ADDR_VAR 0 46
34016: PUSH
34017: LD_INT 2
34019: NEG
34020: PUSH
34021: LD_INT 2
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 2
34031: NEG
34032: PUSH
34033: LD_INT 3
34035: NEG
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 3
34043: NEG
34044: PUSH
34045: LD_INT 2
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: LIST
34057: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34058: LD_ADDR_VAR 0 47
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 3
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: NEG
34078: PUSH
34079: LD_INT 3
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: EMPTY
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34091: LD_ADDR_VAR 0 48
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: LD_INT 2
34101: NEG
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 1
34112: NEG
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34122: LD_ADDR_VAR 0 49
34126: PUSH
34127: LD_INT 3
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 3
34139: PUSH
34140: LD_INT 2
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34151: LD_ADDR_VAR 0 50
34155: PUSH
34156: LD_INT 2
34158: PUSH
34159: LD_INT 3
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 1
34168: PUSH
34169: LD_INT 3
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34180: LD_ADDR_VAR 0 51
34184: PUSH
34185: LD_INT 1
34187: NEG
34188: PUSH
34189: LD_INT 2
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PUSH
34196: LD_INT 2
34198: NEG
34199: PUSH
34200: LD_INT 1
34202: PUSH
34203: EMPTY
34204: LIST
34205: LIST
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34211: LD_ADDR_VAR 0 52
34215: PUSH
34216: LD_INT 3
34218: NEG
34219: PUSH
34220: LD_INT 1
34222: NEG
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 3
34230: NEG
34231: PUSH
34232: LD_INT 2
34234: NEG
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34244: LD_ADDR_VAR 0 53
34248: PUSH
34249: LD_INT 1
34251: NEG
34252: PUSH
34253: LD_INT 3
34255: NEG
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 0
34263: PUSH
34264: LD_INT 3
34266: NEG
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: LD_INT 1
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: LIST
34287: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34288: LD_ADDR_VAR 0 54
34292: PUSH
34293: LD_INT 2
34295: PUSH
34296: LD_INT 1
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 3
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: LIST
34328: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34329: LD_ADDR_VAR 0 55
34333: PUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 3
34346: PUSH
34347: LD_INT 3
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 2
34356: PUSH
34357: LD_INT 3
34359: PUSH
34360: EMPTY
34361: LIST
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: LIST
34368: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34369: LD_ADDR_VAR 0 56
34373: PUSH
34374: LD_INT 1
34376: PUSH
34377: LD_INT 3
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: LD_INT 3
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: NEG
34397: PUSH
34398: LD_INT 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: LIST
34409: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34410: LD_ADDR_VAR 0 57
34414: PUSH
34415: LD_INT 2
34417: NEG
34418: PUSH
34419: LD_INT 1
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 3
34428: NEG
34429: PUSH
34430: LD_INT 0
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: LD_INT 1
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34454: LD_ADDR_VAR 0 58
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 3
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 3
34473: NEG
34474: PUSH
34475: LD_INT 2
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 3
34485: NEG
34486: PUSH
34487: LD_INT 3
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34500: LD_ADDR_VAR 0 59
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 2
34522: NEG
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 1
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: LIST
34543: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34544: LD_ADDR_VAR 0 60
34548: PUSH
34549: LD_INT 1
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PUSH
34560: LD_INT 2
34562: PUSH
34563: LD_INT 0
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: LD_INT 1
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: LIST
34584: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34585: LD_ADDR_VAR 0 61
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 2
34602: PUSH
34603: LD_INT 2
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: PUSH
34613: LD_INT 2
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: LIST
34624: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34625: LD_ADDR_VAR 0 62
34629: PUSH
34630: LD_INT 1
34632: PUSH
34633: LD_INT 2
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 0
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: EMPTY
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 1
34652: NEG
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: LIST
34665: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34666: LD_ADDR_VAR 0 63
34670: PUSH
34671: LD_INT 1
34673: NEG
34674: PUSH
34675: LD_INT 1
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: NEG
34685: PUSH
34686: LD_INT 0
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: NEG
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34710: LD_ADDR_VAR 0 64
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 2
34721: NEG
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 2
34729: NEG
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: LD_INT 2
34745: NEG
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: LIST
34755: ST_TO_ADDR
// end ; 2 :
34756: GO 38022
34758: LD_INT 2
34760: DOUBLE
34761: EQUAL
34762: IFTRUE 34766
34764: GO 38021
34766: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34767: LD_ADDR_VAR 0 29
34771: PUSH
34772: LD_INT 4
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 4
34784: PUSH
34785: LD_INT 1
34787: NEG
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 5
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 5
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 4
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 3
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 3
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 5
34857: PUSH
34858: LD_INT 2
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 3
34867: PUSH
34868: LD_INT 3
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 3
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 4
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: LD_INT 4
34897: PUSH
34898: LD_INT 4
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 3
34907: PUSH
34908: LD_INT 4
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: PUSH
34918: LD_INT 3
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 4
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 4
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 0
34957: PUSH
34958: LD_INT 4
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 0
34967: PUSH
34968: LD_INT 3
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: LD_INT 4
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: LD_INT 5
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 5
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 4
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 3
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 5
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: LD_INT 2
35039: NEG
35040: PUSH
35041: LD_INT 3
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 3
35050: NEG
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 3
35061: NEG
35062: PUSH
35063: LD_INT 1
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 2
35073: NEG
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 4
35106: NEG
35107: PUSH
35108: LD_INT 0
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 4
35117: NEG
35118: PUSH
35119: LD_INT 1
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 4
35129: NEG
35130: PUSH
35131: LD_INT 2
35133: NEG
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 4
35152: NEG
35153: PUSH
35154: LD_INT 4
35156: NEG
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 4
35164: NEG
35165: PUSH
35166: LD_INT 5
35168: NEG
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PUSH
35174: LD_INT 3
35176: NEG
35177: PUSH
35178: LD_INT 4
35180: NEG
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 3
35188: NEG
35189: PUSH
35190: LD_INT 3
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 4
35200: NEG
35201: PUSH
35202: LD_INT 3
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 5
35212: NEG
35213: PUSH
35214: LD_INT 4
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 5
35224: NEG
35225: PUSH
35226: LD_INT 5
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 3
35236: NEG
35237: PUSH
35238: LD_INT 5
35240: NEG
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 5
35248: NEG
35249: PUSH
35250: LD_INT 3
35252: NEG
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35305: LD_ADDR_VAR 0 30
35309: PUSH
35310: LD_INT 4
35312: PUSH
35313: LD_INT 4
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: PUSH
35320: LD_INT 4
35322: PUSH
35323: LD_INT 3
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 5
35332: PUSH
35333: LD_INT 4
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 5
35342: PUSH
35343: LD_INT 5
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 4
35352: PUSH
35353: LD_INT 5
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: PUSH
35360: LD_INT 3
35362: PUSH
35363: LD_INT 4
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 3
35372: PUSH
35373: LD_INT 3
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 5
35382: PUSH
35383: LD_INT 3
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: LD_INT 5
35395: PUSH
35396: EMPTY
35397: LIST
35398: LIST
35399: PUSH
35400: LD_INT 0
35402: PUSH
35403: LD_INT 3
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 0
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 1
35422: PUSH
35423: LD_INT 3
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 1
35432: PUSH
35433: LD_INT 4
35435: PUSH
35436: EMPTY
35437: LIST
35438: LIST
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: LD_INT 4
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: LD_INT 3
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: PUSH
35461: LD_INT 1
35463: NEG
35464: PUSH
35465: LD_INT 2
35467: PUSH
35468: EMPTY
35469: LIST
35470: LIST
35471: PUSH
35472: LD_INT 2
35474: PUSH
35475: LD_INT 4
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 4
35495: NEG
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 4
35506: NEG
35507: PUSH
35508: LD_INT 1
35510: NEG
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 3
35518: NEG
35519: PUSH
35520: LD_INT 0
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 3
35529: NEG
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: PUSH
35538: LD_INT 4
35540: NEG
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: EMPTY
35546: LIST
35547: LIST
35548: PUSH
35549: LD_INT 5
35551: NEG
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PUSH
35560: LD_INT 5
35562: NEG
35563: PUSH
35564: LD_INT 1
35566: NEG
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 5
35574: NEG
35575: PUSH
35576: LD_INT 2
35578: NEG
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 3
35586: NEG
35587: PUSH
35588: LD_INT 2
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 3
35597: NEG
35598: PUSH
35599: LD_INT 3
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 3
35609: NEG
35610: PUSH
35611: LD_INT 4
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: NEG
35622: PUSH
35623: LD_INT 3
35625: NEG
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: LD_INT 2
35633: NEG
35634: PUSH
35635: LD_INT 2
35637: NEG
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: PUSH
35643: LD_INT 3
35645: NEG
35646: PUSH
35647: LD_INT 2
35649: NEG
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 4
35657: NEG
35658: PUSH
35659: LD_INT 3
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 4
35669: NEG
35670: PUSH
35671: LD_INT 4
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 2
35681: NEG
35682: PUSH
35683: LD_INT 4
35685: NEG
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: LD_INT 4
35693: NEG
35694: PUSH
35695: LD_INT 2
35697: NEG
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 0
35705: PUSH
35706: LD_INT 4
35708: NEG
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 0
35716: PUSH
35717: LD_INT 5
35719: NEG
35720: PUSH
35721: EMPTY
35722: LIST
35723: LIST
35724: PUSH
35725: LD_INT 1
35727: PUSH
35728: LD_INT 4
35730: NEG
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: LD_INT 3
35741: NEG
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 0
35749: PUSH
35750: LD_INT 3
35752: NEG
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 1
35760: NEG
35761: PUSH
35762: LD_INT 4
35764: NEG
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 5
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 2
35784: PUSH
35785: LD_INT 3
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 2
35795: NEG
35796: PUSH
35797: LD_INT 5
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
35852: LD_ADDR_VAR 0 31
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 4
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 3
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 4
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: LD_INT 5
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: LD_INT 5
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 4
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 1
35920: NEG
35921: PUSH
35922: LD_INT 3
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 5
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 2
35941: NEG
35942: PUSH
35943: LD_INT 3
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 3
35952: NEG
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 3
35963: NEG
35964: PUSH
35965: LD_INT 1
35967: NEG
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: NEG
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 2
35986: NEG
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 3
35997: NEG
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 4
36008: NEG
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 4
36019: NEG
36020: PUSH
36021: LD_INT 1
36023: NEG
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: PUSH
36029: LD_INT 4
36031: NEG
36032: PUSH
36033: LD_INT 2
36035: NEG
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 2
36043: NEG
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 4
36054: NEG
36055: PUSH
36056: LD_INT 4
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 4
36066: NEG
36067: PUSH
36068: LD_INT 5
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 3
36078: NEG
36079: PUSH
36080: LD_INT 4
36082: NEG
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 3
36090: NEG
36091: PUSH
36092: LD_INT 3
36094: NEG
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 4
36102: NEG
36103: PUSH
36104: LD_INT 3
36106: NEG
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 5
36114: NEG
36115: PUSH
36116: LD_INT 4
36118: NEG
36119: PUSH
36120: EMPTY
36121: LIST
36122: LIST
36123: PUSH
36124: LD_INT 5
36126: NEG
36127: PUSH
36128: LD_INT 5
36130: NEG
36131: PUSH
36132: EMPTY
36133: LIST
36134: LIST
36135: PUSH
36136: LD_INT 3
36138: NEG
36139: PUSH
36140: LD_INT 5
36142: NEG
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 5
36150: NEG
36151: PUSH
36152: LD_INT 3
36154: NEG
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 3
36165: NEG
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: LD_INT 4
36176: NEG
36177: PUSH
36178: EMPTY
36179: LIST
36180: LIST
36181: PUSH
36182: LD_INT 1
36184: PUSH
36185: LD_INT 3
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: LD_INT 2
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 2
36209: NEG
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 3
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: NEG
36230: PUSH
36231: LD_INT 4
36233: NEG
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: LD_INT 2
36244: NEG
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 4
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 4
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 4
36274: PUSH
36275: LD_INT 1
36277: NEG
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 5
36285: PUSH
36286: LD_INT 0
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 5
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 4
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 3
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 3
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 3
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: PUSH
36345: LD_INT 5
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36402: LD_ADDR_VAR 0 32
36406: PUSH
36407: LD_INT 4
36409: NEG
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 4
36420: NEG
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 3
36432: NEG
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 3
36443: NEG
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 4
36454: NEG
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 5
36465: NEG
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 5
36476: NEG
36477: PUSH
36478: LD_INT 1
36480: NEG
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: PUSH
36486: LD_INT 5
36488: NEG
36489: PUSH
36490: LD_INT 2
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 3
36500: NEG
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 3
36511: NEG
36512: PUSH
36513: LD_INT 3
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 3
36523: NEG
36524: PUSH
36525: LD_INT 4
36527: NEG
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 2
36535: NEG
36536: PUSH
36537: LD_INT 3
36539: NEG
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: LD_INT 2
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 3
36559: NEG
36560: PUSH
36561: LD_INT 2
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 4
36571: NEG
36572: PUSH
36573: LD_INT 3
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 4
36583: NEG
36584: PUSH
36585: LD_INT 4
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: LD_INT 4
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 4
36607: NEG
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: LD_INT 4
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 0
36630: PUSH
36631: LD_INT 5
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 1
36641: PUSH
36642: LD_INT 4
36644: NEG
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 3
36655: NEG
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 3
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: LD_INT 4
36678: NEG
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: LD_INT 5
36690: NEG
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 2
36698: PUSH
36699: LD_INT 3
36701: NEG
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: LD_INT 5
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 3
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 1
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 4
36742: PUSH
36743: LD_INT 0
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 4
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: PUSH
36760: LD_INT 3
36762: PUSH
36763: LD_INT 1
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 2
36772: PUSH
36773: LD_INT 0
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 4
36804: PUSH
36805: LD_INT 2
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 4
36814: PUSH
36815: LD_INT 4
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 4
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: PUSH
36832: LD_INT 5
36834: PUSH
36835: LD_INT 4
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 5
36844: PUSH
36845: LD_INT 5
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 4
36854: PUSH
36855: LD_INT 5
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 3
36864: PUSH
36865: LD_INT 4
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 3
36874: PUSH
36875: LD_INT 3
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 5
36884: PUSH
36885: LD_INT 3
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 3
36894: PUSH
36895: LD_INT 5
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
36949: LD_ADDR_VAR 0 33
36953: PUSH
36954: LD_INT 4
36956: NEG
36957: PUSH
36958: LD_INT 4
36960: NEG
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 4
36968: NEG
36969: PUSH
36970: LD_INT 5
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 3
36980: NEG
36981: PUSH
36982: LD_INT 4
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 3
36992: NEG
36993: PUSH
36994: LD_INT 3
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 4
37004: NEG
37005: PUSH
37006: LD_INT 3
37008: NEG
37009: PUSH
37010: EMPTY
37011: LIST
37012: LIST
37013: PUSH
37014: LD_INT 5
37016: NEG
37017: PUSH
37018: LD_INT 4
37020: NEG
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 5
37028: NEG
37029: PUSH
37030: LD_INT 5
37032: NEG
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 3
37040: NEG
37041: PUSH
37042: LD_INT 5
37044: NEG
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 5
37052: NEG
37053: PUSH
37054: LD_INT 3
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: LD_INT 3
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: LD_INT 4
37078: NEG
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 1
37086: PUSH
37087: LD_INT 3
37089: NEG
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 1
37097: PUSH
37098: LD_INT 2
37100: NEG
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: LD_INT 2
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: LD_INT 3
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: NEG
37132: PUSH
37133: LD_INT 4
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: LD_INT 2
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: LD_INT 4
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: LD_INT 0
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 4
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 5
37187: PUSH
37188: LD_INT 0
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 5
37197: PUSH
37198: LD_INT 1
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 4
37207: PUSH
37208: LD_INT 1
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: LD_INT 0
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: LD_INT 1
37230: NEG
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 3
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 5
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 3
37259: PUSH
37260: LD_INT 3
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 3
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 4
37279: PUSH
37280: LD_INT 3
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 4
37289: PUSH
37290: LD_INT 4
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 3
37299: PUSH
37300: LD_INT 4
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 2
37309: PUSH
37310: LD_INT 3
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 2
37319: PUSH
37320: LD_INT 2
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 4
37329: PUSH
37330: LD_INT 2
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 4
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 0
37349: PUSH
37350: LD_INT 4
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: LD_INT 3
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 4
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: LD_INT 5
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: LD_INT 5
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 1
37399: NEG
37400: PUSH
37401: LD_INT 4
37403: PUSH
37404: EMPTY
37405: LIST
37406: LIST
37407: PUSH
37408: LD_INT 1
37410: NEG
37411: PUSH
37412: LD_INT 3
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: LD_INT 5
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 2
37431: NEG
37432: PUSH
37433: LD_INT 3
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37487: LD_ADDR_VAR 0 34
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: LD_INT 4
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 5
37508: NEG
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: LD_INT 4
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: LD_INT 3
37530: NEG
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 0
37538: PUSH
37539: LD_INT 3
37541: NEG
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 1
37549: NEG
37550: PUSH
37551: LD_INT 4
37553: NEG
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 1
37561: NEG
37562: PUSH
37563: LD_INT 5
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: PUSH
37574: LD_INT 3
37576: NEG
37577: PUSH
37578: EMPTY
37579: LIST
37580: LIST
37581: PUSH
37582: LD_INT 2
37584: NEG
37585: PUSH
37586: LD_INT 5
37588: NEG
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 3
37596: PUSH
37597: LD_INT 0
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 3
37606: PUSH
37607: LD_INT 1
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 4
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 4
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: PUSH
37648: LD_INT 0
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: PUSH
37655: LD_INT 2
37657: PUSH
37658: LD_INT 1
37660: NEG
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 4
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 4
37689: PUSH
37690: LD_INT 4
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 4
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 5
37709: PUSH
37710: LD_INT 4
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 5
37719: PUSH
37720: LD_INT 5
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 4
37729: PUSH
37730: LD_INT 5
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 3
37739: PUSH
37740: LD_INT 4
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 3
37749: PUSH
37750: LD_INT 3
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 5
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: LD_INT 5
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: PUSH
37787: LD_INT 0
37789: PUSH
37790: LD_INT 2
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 1
37799: PUSH
37800: LD_INT 3
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: LD_INT 4
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: LD_INT 4
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: NEG
37830: PUSH
37831: LD_INT 3
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 4
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: NEG
37862: PUSH
37863: LD_INT 2
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 4
37872: NEG
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 4
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 3
37895: NEG
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 3
37906: NEG
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 4
37917: NEG
37918: PUSH
37919: LD_INT 1
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 5
37928: NEG
37929: PUSH
37930: LD_INT 0
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 5
37939: NEG
37940: PUSH
37941: LD_INT 1
37943: NEG
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 5
37951: NEG
37952: PUSH
37953: LD_INT 2
37955: NEG
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 3
37963: NEG
37964: PUSH
37965: LD_INT 2
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: ST_TO_ADDR
// end ; end ;
38019: GO 38022
38021: POP
// case btype of b_depot , b_warehouse :
38022: LD_VAR 0 1
38026: PUSH
38027: LD_INT 0
38029: DOUBLE
38030: EQUAL
38031: IFTRUE 38041
38033: LD_INT 1
38035: DOUBLE
38036: EQUAL
38037: IFTRUE 38041
38039: GO 38242
38041: POP
// case nation of nation_american :
38042: LD_VAR 0 5
38046: PUSH
38047: LD_INT 1
38049: DOUBLE
38050: EQUAL
38051: IFTRUE 38055
38053: GO 38111
38055: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38056: LD_ADDR_VAR 0 9
38060: PUSH
38061: LD_VAR 0 11
38065: PUSH
38066: LD_VAR 0 12
38070: PUSH
38071: LD_VAR 0 13
38075: PUSH
38076: LD_VAR 0 14
38080: PUSH
38081: LD_VAR 0 15
38085: PUSH
38086: LD_VAR 0 16
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: PUSH
38099: LD_VAR 0 4
38103: PUSH
38104: LD_INT 1
38106: PLUS
38107: ARRAY
38108: ST_TO_ADDR
38109: GO 38240
38111: LD_INT 2
38113: DOUBLE
38114: EQUAL
38115: IFTRUE 38119
38117: GO 38175
38119: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_VAR 0 17
38129: PUSH
38130: LD_VAR 0 18
38134: PUSH
38135: LD_VAR 0 19
38139: PUSH
38140: LD_VAR 0 20
38144: PUSH
38145: LD_VAR 0 21
38149: PUSH
38150: LD_VAR 0 22
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: LD_VAR 0 4
38167: PUSH
38168: LD_INT 1
38170: PLUS
38171: ARRAY
38172: ST_TO_ADDR
38173: GO 38240
38175: LD_INT 3
38177: DOUBLE
38178: EQUAL
38179: IFTRUE 38183
38181: GO 38239
38183: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38184: LD_ADDR_VAR 0 9
38188: PUSH
38189: LD_VAR 0 23
38193: PUSH
38194: LD_VAR 0 24
38198: PUSH
38199: LD_VAR 0 25
38203: PUSH
38204: LD_VAR 0 26
38208: PUSH
38209: LD_VAR 0 27
38213: PUSH
38214: LD_VAR 0 28
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: PUSH
38227: LD_VAR 0 4
38231: PUSH
38232: LD_INT 1
38234: PLUS
38235: ARRAY
38236: ST_TO_ADDR
38237: GO 38240
38239: POP
38240: GO 38795
38242: LD_INT 2
38244: DOUBLE
38245: EQUAL
38246: IFTRUE 38256
38248: LD_INT 3
38250: DOUBLE
38251: EQUAL
38252: IFTRUE 38256
38254: GO 38312
38256: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38257: LD_ADDR_VAR 0 9
38261: PUSH
38262: LD_VAR 0 29
38266: PUSH
38267: LD_VAR 0 30
38271: PUSH
38272: LD_VAR 0 31
38276: PUSH
38277: LD_VAR 0 32
38281: PUSH
38282: LD_VAR 0 33
38286: PUSH
38287: LD_VAR 0 34
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: PUSH
38300: LD_VAR 0 4
38304: PUSH
38305: LD_INT 1
38307: PLUS
38308: ARRAY
38309: ST_TO_ADDR
38310: GO 38795
38312: LD_INT 16
38314: DOUBLE
38315: EQUAL
38316: IFTRUE 38374
38318: LD_INT 17
38320: DOUBLE
38321: EQUAL
38322: IFTRUE 38374
38324: LD_INT 18
38326: DOUBLE
38327: EQUAL
38328: IFTRUE 38374
38330: LD_INT 19
38332: DOUBLE
38333: EQUAL
38334: IFTRUE 38374
38336: LD_INT 22
38338: DOUBLE
38339: EQUAL
38340: IFTRUE 38374
38342: LD_INT 20
38344: DOUBLE
38345: EQUAL
38346: IFTRUE 38374
38348: LD_INT 21
38350: DOUBLE
38351: EQUAL
38352: IFTRUE 38374
38354: LD_INT 23
38356: DOUBLE
38357: EQUAL
38358: IFTRUE 38374
38360: LD_INT 24
38362: DOUBLE
38363: EQUAL
38364: IFTRUE 38374
38366: LD_INT 25
38368: DOUBLE
38369: EQUAL
38370: IFTRUE 38374
38372: GO 38430
38374: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38375: LD_ADDR_VAR 0 9
38379: PUSH
38380: LD_VAR 0 35
38384: PUSH
38385: LD_VAR 0 36
38389: PUSH
38390: LD_VAR 0 37
38394: PUSH
38395: LD_VAR 0 38
38399: PUSH
38400: LD_VAR 0 39
38404: PUSH
38405: LD_VAR 0 40
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: PUSH
38418: LD_VAR 0 4
38422: PUSH
38423: LD_INT 1
38425: PLUS
38426: ARRAY
38427: ST_TO_ADDR
38428: GO 38795
38430: LD_INT 6
38432: DOUBLE
38433: EQUAL
38434: IFTRUE 38486
38436: LD_INT 7
38438: DOUBLE
38439: EQUAL
38440: IFTRUE 38486
38442: LD_INT 8
38444: DOUBLE
38445: EQUAL
38446: IFTRUE 38486
38448: LD_INT 13
38450: DOUBLE
38451: EQUAL
38452: IFTRUE 38486
38454: LD_INT 12
38456: DOUBLE
38457: EQUAL
38458: IFTRUE 38486
38460: LD_INT 15
38462: DOUBLE
38463: EQUAL
38464: IFTRUE 38486
38466: LD_INT 11
38468: DOUBLE
38469: EQUAL
38470: IFTRUE 38486
38472: LD_INT 14
38474: DOUBLE
38475: EQUAL
38476: IFTRUE 38486
38478: LD_INT 10
38480: DOUBLE
38481: EQUAL
38482: IFTRUE 38486
38484: GO 38542
38486: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38487: LD_ADDR_VAR 0 9
38491: PUSH
38492: LD_VAR 0 41
38496: PUSH
38497: LD_VAR 0 42
38501: PUSH
38502: LD_VAR 0 43
38506: PUSH
38507: LD_VAR 0 44
38511: PUSH
38512: LD_VAR 0 45
38516: PUSH
38517: LD_VAR 0 46
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: PUSH
38530: LD_VAR 0 4
38534: PUSH
38535: LD_INT 1
38537: PLUS
38538: ARRAY
38539: ST_TO_ADDR
38540: GO 38795
38542: LD_INT 36
38544: DOUBLE
38545: EQUAL
38546: IFTRUE 38550
38548: GO 38606
38550: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38551: LD_ADDR_VAR 0 9
38555: PUSH
38556: LD_VAR 0 47
38560: PUSH
38561: LD_VAR 0 48
38565: PUSH
38566: LD_VAR 0 49
38570: PUSH
38571: LD_VAR 0 50
38575: PUSH
38576: LD_VAR 0 51
38580: PUSH
38581: LD_VAR 0 52
38585: PUSH
38586: EMPTY
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: PUSH
38594: LD_VAR 0 4
38598: PUSH
38599: LD_INT 1
38601: PLUS
38602: ARRAY
38603: ST_TO_ADDR
38604: GO 38795
38606: LD_INT 4
38608: DOUBLE
38609: EQUAL
38610: IFTRUE 38632
38612: LD_INT 5
38614: DOUBLE
38615: EQUAL
38616: IFTRUE 38632
38618: LD_INT 34
38620: DOUBLE
38621: EQUAL
38622: IFTRUE 38632
38624: LD_INT 37
38626: DOUBLE
38627: EQUAL
38628: IFTRUE 38632
38630: GO 38688
38632: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
38633: LD_ADDR_VAR 0 9
38637: PUSH
38638: LD_VAR 0 53
38642: PUSH
38643: LD_VAR 0 54
38647: PUSH
38648: LD_VAR 0 55
38652: PUSH
38653: LD_VAR 0 56
38657: PUSH
38658: LD_VAR 0 57
38662: PUSH
38663: LD_VAR 0 58
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: LD_VAR 0 4
38680: PUSH
38681: LD_INT 1
38683: PLUS
38684: ARRAY
38685: ST_TO_ADDR
38686: GO 38795
38688: LD_INT 31
38690: DOUBLE
38691: EQUAL
38692: IFTRUE 38738
38694: LD_INT 32
38696: DOUBLE
38697: EQUAL
38698: IFTRUE 38738
38700: LD_INT 33
38702: DOUBLE
38703: EQUAL
38704: IFTRUE 38738
38706: LD_INT 27
38708: DOUBLE
38709: EQUAL
38710: IFTRUE 38738
38712: LD_INT 26
38714: DOUBLE
38715: EQUAL
38716: IFTRUE 38738
38718: LD_INT 28
38720: DOUBLE
38721: EQUAL
38722: IFTRUE 38738
38724: LD_INT 29
38726: DOUBLE
38727: EQUAL
38728: IFTRUE 38738
38730: LD_INT 30
38732: DOUBLE
38733: EQUAL
38734: IFTRUE 38738
38736: GO 38794
38738: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38739: LD_ADDR_VAR 0 9
38743: PUSH
38744: LD_VAR 0 59
38748: PUSH
38749: LD_VAR 0 60
38753: PUSH
38754: LD_VAR 0 61
38758: PUSH
38759: LD_VAR 0 62
38763: PUSH
38764: LD_VAR 0 63
38768: PUSH
38769: LD_VAR 0 64
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: PUSH
38782: LD_VAR 0 4
38786: PUSH
38787: LD_INT 1
38789: PLUS
38790: ARRAY
38791: ST_TO_ADDR
38792: GO 38795
38794: POP
// temp_list2 = [ ] ;
38795: LD_ADDR_VAR 0 10
38799: PUSH
38800: EMPTY
38801: ST_TO_ADDR
// for i in temp_list do
38802: LD_ADDR_VAR 0 8
38806: PUSH
38807: LD_VAR 0 9
38811: PUSH
38812: FOR_IN
38813: IFFALSE 38865
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
38815: LD_ADDR_VAR 0 10
38819: PUSH
38820: LD_VAR 0 10
38824: PUSH
38825: LD_VAR 0 8
38829: PUSH
38830: LD_INT 1
38832: ARRAY
38833: PUSH
38834: LD_VAR 0 2
38838: PLUS
38839: PUSH
38840: LD_VAR 0 8
38844: PUSH
38845: LD_INT 2
38847: ARRAY
38848: PUSH
38849: LD_VAR 0 3
38853: PLUS
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: ADD
38862: ST_TO_ADDR
38863: GO 38812
38865: POP
38866: POP
// result = temp_list2 ;
38867: LD_ADDR_VAR 0 7
38871: PUSH
38872: LD_VAR 0 10
38876: ST_TO_ADDR
// end ;
38877: LD_VAR 0 7
38881: RET
// export function EnemyInRange ( unit , dist ) ; begin
38882: LD_INT 0
38884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
38885: LD_ADDR_VAR 0 3
38889: PUSH
38890: LD_VAR 0 1
38894: PPUSH
38895: CALL_OW 255
38899: PPUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 250
38909: PPUSH
38910: LD_VAR 0 1
38914: PPUSH
38915: CALL_OW 251
38919: PPUSH
38920: LD_VAR 0 2
38924: PPUSH
38925: CALL 12275 0 4
38929: PUSH
38930: LD_INT 4
38932: ARRAY
38933: ST_TO_ADDR
// end ;
38934: LD_VAR 0 3
38938: RET
// export function PlayerSeeMe ( unit ) ; begin
38939: LD_INT 0
38941: PPUSH
// result := See ( your_side , unit ) ;
38942: LD_ADDR_VAR 0 2
38946: PUSH
38947: LD_OWVAR 2
38951: PPUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 292
38961: ST_TO_ADDR
// end ;
38962: LD_VAR 0 2
38966: RET
// export function ReverseDir ( unit ) ; begin
38967: LD_INT 0
38969: PPUSH
// if not unit then
38970: LD_VAR 0 1
38974: NOT
38975: IFFALSE 38979
// exit ;
38977: GO 39002
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
38979: LD_ADDR_VAR 0 2
38983: PUSH
38984: LD_VAR 0 1
38988: PPUSH
38989: CALL_OW 254
38993: PUSH
38994: LD_INT 3
38996: PLUS
38997: PUSH
38998: LD_INT 6
39000: MOD
39001: ST_TO_ADDR
// end ;
39002: LD_VAR 0 2
39006: RET
// export function ReverseArray ( array ) ; var i ; begin
39007: LD_INT 0
39009: PPUSH
39010: PPUSH
// if not array then
39011: LD_VAR 0 1
39015: NOT
39016: IFFALSE 39020
// exit ;
39018: GO 39075
// result := [ ] ;
39020: LD_ADDR_VAR 0 2
39024: PUSH
39025: EMPTY
39026: ST_TO_ADDR
// for i := array downto 1 do
39027: LD_ADDR_VAR 0 3
39031: PUSH
39032: DOUBLE
39033: LD_VAR 0 1
39037: INC
39038: ST_TO_ADDR
39039: LD_INT 1
39041: PUSH
39042: FOR_DOWNTO
39043: IFFALSE 39073
// result := Join ( result , array [ i ] ) ;
39045: LD_ADDR_VAR 0 2
39049: PUSH
39050: LD_VAR 0 2
39054: PPUSH
39055: LD_VAR 0 1
39059: PUSH
39060: LD_VAR 0 3
39064: ARRAY
39065: PPUSH
39066: CALL 43718 0 2
39070: ST_TO_ADDR
39071: GO 39042
39073: POP
39074: POP
// end ;
39075: LD_VAR 0 2
39079: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39080: LD_INT 0
39082: PPUSH
39083: PPUSH
39084: PPUSH
39085: PPUSH
39086: PPUSH
39087: PPUSH
// if not unit or not hexes then
39088: LD_VAR 0 1
39092: NOT
39093: PUSH
39094: LD_VAR 0 2
39098: NOT
39099: OR
39100: IFFALSE 39104
// exit ;
39102: GO 39227
// dist := 9999 ;
39104: LD_ADDR_VAR 0 5
39108: PUSH
39109: LD_INT 9999
39111: ST_TO_ADDR
// for i = 1 to hexes do
39112: LD_ADDR_VAR 0 4
39116: PUSH
39117: DOUBLE
39118: LD_INT 1
39120: DEC
39121: ST_TO_ADDR
39122: LD_VAR 0 2
39126: PUSH
39127: FOR_TO
39128: IFFALSE 39215
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39130: LD_ADDR_VAR 0 6
39134: PUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: LD_VAR 0 2
39144: PUSH
39145: LD_VAR 0 4
39149: ARRAY
39150: PUSH
39151: LD_INT 1
39153: ARRAY
39154: PPUSH
39155: LD_VAR 0 2
39159: PUSH
39160: LD_VAR 0 4
39164: ARRAY
39165: PUSH
39166: LD_INT 2
39168: ARRAY
39169: PPUSH
39170: CALL_OW 297
39174: ST_TO_ADDR
// if tdist < dist then
39175: LD_VAR 0 6
39179: PUSH
39180: LD_VAR 0 5
39184: LESS
39185: IFFALSE 39213
// begin hex := hexes [ i ] ;
39187: LD_ADDR_VAR 0 8
39191: PUSH
39192: LD_VAR 0 2
39196: PUSH
39197: LD_VAR 0 4
39201: ARRAY
39202: ST_TO_ADDR
// dist := tdist ;
39203: LD_ADDR_VAR 0 5
39207: PUSH
39208: LD_VAR 0 6
39212: ST_TO_ADDR
// end ; end ;
39213: GO 39127
39215: POP
39216: POP
// result := hex ;
39217: LD_ADDR_VAR 0 3
39221: PUSH
39222: LD_VAR 0 8
39226: ST_TO_ADDR
// end ;
39227: LD_VAR 0 3
39231: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39232: LD_INT 0
39234: PPUSH
39235: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39236: LD_VAR 0 1
39240: NOT
39241: PUSH
39242: LD_VAR 0 1
39246: PUSH
39247: LD_INT 21
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 23
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PPUSH
39271: CALL_OW 69
39275: IN
39276: NOT
39277: OR
39278: IFFALSE 39282
// exit ;
39280: GO 39329
// for i = 1 to 3 do
39282: LD_ADDR_VAR 0 3
39286: PUSH
39287: DOUBLE
39288: LD_INT 1
39290: DEC
39291: ST_TO_ADDR
39292: LD_INT 3
39294: PUSH
39295: FOR_TO
39296: IFFALSE 39327
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39298: LD_VAR 0 1
39302: PPUSH
39303: CALL_OW 250
39307: PPUSH
39308: LD_VAR 0 1
39312: PPUSH
39313: CALL_OW 251
39317: PPUSH
39318: LD_INT 1
39320: PPUSH
39321: CALL_OW 453
39325: GO 39295
39327: POP
39328: POP
// end ;
39329: LD_VAR 0 2
39333: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39334: LD_INT 0
39336: PPUSH
39337: PPUSH
39338: PPUSH
39339: PPUSH
39340: PPUSH
39341: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39342: LD_VAR 0 1
39346: NOT
39347: PUSH
39348: LD_VAR 0 2
39352: NOT
39353: OR
39354: PUSH
39355: LD_VAR 0 1
39359: PPUSH
39360: CALL_OW 314
39364: OR
39365: IFFALSE 39369
// exit ;
39367: GO 39836
// if GetLives ( i ) < 250 then
39369: LD_VAR 0 4
39373: PPUSH
39374: CALL_OW 256
39378: PUSH
39379: LD_INT 250
39381: LESS
39382: IFFALSE 39395
// begin ComAutodestruct ( i ) ;
39384: LD_VAR 0 4
39388: PPUSH
39389: CALL 39232 0 1
// exit ;
39393: GO 39836
// end ; x := GetX ( enemy_unit ) ;
39395: LD_ADDR_VAR 0 7
39399: PUSH
39400: LD_VAR 0 2
39404: PPUSH
39405: CALL_OW 250
39409: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39410: LD_ADDR_VAR 0 8
39414: PUSH
39415: LD_VAR 0 2
39419: PPUSH
39420: CALL_OW 251
39424: ST_TO_ADDR
// if not x or not y then
39425: LD_VAR 0 7
39429: NOT
39430: PUSH
39431: LD_VAR 0 8
39435: NOT
39436: OR
39437: IFFALSE 39441
// exit ;
39439: GO 39836
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39441: LD_ADDR_VAR 0 6
39445: PUSH
39446: LD_VAR 0 7
39450: PPUSH
39451: LD_INT 0
39453: PPUSH
39454: LD_INT 4
39456: PPUSH
39457: CALL_OW 272
39461: PUSH
39462: LD_VAR 0 8
39466: PPUSH
39467: LD_INT 0
39469: PPUSH
39470: LD_INT 4
39472: PPUSH
39473: CALL_OW 273
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_VAR 0 7
39486: PPUSH
39487: LD_INT 1
39489: PPUSH
39490: LD_INT 4
39492: PPUSH
39493: CALL_OW 272
39497: PUSH
39498: LD_VAR 0 8
39502: PPUSH
39503: LD_INT 1
39505: PPUSH
39506: LD_INT 4
39508: PPUSH
39509: CALL_OW 273
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_VAR 0 7
39522: PPUSH
39523: LD_INT 2
39525: PPUSH
39526: LD_INT 4
39528: PPUSH
39529: CALL_OW 272
39533: PUSH
39534: LD_VAR 0 8
39538: PPUSH
39539: LD_INT 2
39541: PPUSH
39542: LD_INT 4
39544: PPUSH
39545: CALL_OW 273
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_VAR 0 7
39558: PPUSH
39559: LD_INT 3
39561: PPUSH
39562: LD_INT 4
39564: PPUSH
39565: CALL_OW 272
39569: PUSH
39570: LD_VAR 0 8
39574: PPUSH
39575: LD_INT 3
39577: PPUSH
39578: LD_INT 4
39580: PPUSH
39581: CALL_OW 273
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_VAR 0 7
39594: PPUSH
39595: LD_INT 4
39597: PPUSH
39598: LD_INT 4
39600: PPUSH
39601: CALL_OW 272
39605: PUSH
39606: LD_VAR 0 8
39610: PPUSH
39611: LD_INT 4
39613: PPUSH
39614: LD_INT 4
39616: PPUSH
39617: CALL_OW 273
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_VAR 0 7
39630: PPUSH
39631: LD_INT 5
39633: PPUSH
39634: LD_INT 4
39636: PPUSH
39637: CALL_OW 272
39641: PUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: LD_INT 5
39649: PPUSH
39650: LD_INT 4
39652: PPUSH
39653: CALL_OW 273
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: ST_TO_ADDR
// for i = tmp downto 1 do
39670: LD_ADDR_VAR 0 4
39674: PUSH
39675: DOUBLE
39676: LD_VAR 0 6
39680: INC
39681: ST_TO_ADDR
39682: LD_INT 1
39684: PUSH
39685: FOR_DOWNTO
39686: IFFALSE 39787
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
39688: LD_VAR 0 6
39692: PUSH
39693: LD_VAR 0 4
39697: ARRAY
39698: PUSH
39699: LD_INT 1
39701: ARRAY
39702: PPUSH
39703: LD_VAR 0 6
39707: PUSH
39708: LD_VAR 0 4
39712: ARRAY
39713: PUSH
39714: LD_INT 2
39716: ARRAY
39717: PPUSH
39718: CALL_OW 488
39722: NOT
39723: PUSH
39724: LD_VAR 0 6
39728: PUSH
39729: LD_VAR 0 4
39733: ARRAY
39734: PUSH
39735: LD_INT 1
39737: ARRAY
39738: PPUSH
39739: LD_VAR 0 6
39743: PUSH
39744: LD_VAR 0 4
39748: ARRAY
39749: PUSH
39750: LD_INT 2
39752: ARRAY
39753: PPUSH
39754: CALL_OW 428
39758: PUSH
39759: LD_INT 0
39761: NONEQUAL
39762: OR
39763: IFFALSE 39785
// tmp := Delete ( tmp , i ) ;
39765: LD_ADDR_VAR 0 6
39769: PUSH
39770: LD_VAR 0 6
39774: PPUSH
39775: LD_VAR 0 4
39779: PPUSH
39780: CALL_OW 3
39784: ST_TO_ADDR
39785: GO 39685
39787: POP
39788: POP
// j := GetClosestHex ( unit , tmp ) ;
39789: LD_ADDR_VAR 0 5
39793: PUSH
39794: LD_VAR 0 1
39798: PPUSH
39799: LD_VAR 0 6
39803: PPUSH
39804: CALL 39080 0 2
39808: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39809: LD_VAR 0 1
39813: PPUSH
39814: LD_VAR 0 5
39818: PUSH
39819: LD_INT 1
39821: ARRAY
39822: PPUSH
39823: LD_VAR 0 5
39827: PUSH
39828: LD_INT 2
39830: ARRAY
39831: PPUSH
39832: CALL_OW 111
// end ;
39836: LD_VAR 0 3
39840: RET
// export function PrepareApemanSoldier ( ) ; begin
39841: LD_INT 0
39843: PPUSH
// uc_nation := 0 ;
39844: LD_ADDR_OWVAR 21
39848: PUSH
39849: LD_INT 0
39851: ST_TO_ADDR
// hc_sex := sex_male ;
39852: LD_ADDR_OWVAR 27
39856: PUSH
39857: LD_INT 1
39859: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
39860: LD_ADDR_OWVAR 28
39864: PUSH
39865: LD_INT 15
39867: ST_TO_ADDR
// hc_gallery :=  ;
39868: LD_ADDR_OWVAR 33
39872: PUSH
39873: LD_STRING 
39875: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39876: LD_ADDR_OWVAR 31
39880: PUSH
39881: LD_INT 0
39883: PPUSH
39884: LD_INT 3
39886: PPUSH
39887: CALL_OW 12
39891: PUSH
39892: LD_INT 0
39894: PPUSH
39895: LD_INT 3
39897: PPUSH
39898: CALL_OW 12
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: ST_TO_ADDR
// end ;
39915: LD_VAR 0 1
39919: RET
// export function PrepareApemanEngineer ( ) ; begin
39920: LD_INT 0
39922: PPUSH
// uc_nation := 0 ;
39923: LD_ADDR_OWVAR 21
39927: PUSH
39928: LD_INT 0
39930: ST_TO_ADDR
// hc_sex := sex_male ;
39931: LD_ADDR_OWVAR 27
39935: PUSH
39936: LD_INT 1
39938: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
39939: LD_ADDR_OWVAR 28
39943: PUSH
39944: LD_INT 16
39946: ST_TO_ADDR
// hc_gallery :=  ;
39947: LD_ADDR_OWVAR 33
39951: PUSH
39952: LD_STRING 
39954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39955: LD_ADDR_OWVAR 31
39959: PUSH
39960: LD_INT 0
39962: PPUSH
39963: LD_INT 3
39965: PPUSH
39966: CALL_OW 12
39970: PUSH
39971: LD_INT 0
39973: PPUSH
39974: LD_INT 3
39976: PPUSH
39977: CALL_OW 12
39981: PUSH
39982: LD_INT 0
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: ST_TO_ADDR
// end ;
39994: LD_VAR 0 1
39998: RET
// export function PrepareApeman ( agressivity ) ; begin
39999: LD_INT 0
40001: PPUSH
// uc_side := 0 ;
40002: LD_ADDR_OWVAR 20
40006: PUSH
40007: LD_INT 0
40009: ST_TO_ADDR
// uc_nation := 0 ;
40010: LD_ADDR_OWVAR 21
40014: PUSH
40015: LD_INT 0
40017: ST_TO_ADDR
// hc_sex := sex_male ;
40018: LD_ADDR_OWVAR 27
40022: PUSH
40023: LD_INT 1
40025: ST_TO_ADDR
// hc_class := class_apeman ;
40026: LD_ADDR_OWVAR 28
40030: PUSH
40031: LD_INT 12
40033: ST_TO_ADDR
// hc_gallery :=  ;
40034: LD_ADDR_OWVAR 33
40038: PUSH
40039: LD_STRING 
40041: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40042: LD_ADDR_OWVAR 35
40046: PUSH
40047: LD_VAR 0 1
40051: NEG
40052: PPUSH
40053: LD_VAR 0 1
40057: PPUSH
40058: CALL_OW 12
40062: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40063: LD_ADDR_OWVAR 31
40067: PUSH
40068: LD_INT 0
40070: PPUSH
40071: LD_INT 3
40073: PPUSH
40074: CALL_OW 12
40078: PUSH
40079: LD_INT 0
40081: PPUSH
40082: LD_INT 3
40084: PPUSH
40085: CALL_OW 12
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: ST_TO_ADDR
// end ;
40102: LD_VAR 0 2
40106: RET
// export function PrepareTiger ( agressivity ) ; begin
40107: LD_INT 0
40109: PPUSH
// uc_side := 0 ;
40110: LD_ADDR_OWVAR 20
40114: PUSH
40115: LD_INT 0
40117: ST_TO_ADDR
// uc_nation := 0 ;
40118: LD_ADDR_OWVAR 21
40122: PUSH
40123: LD_INT 0
40125: ST_TO_ADDR
// hc_class := class_tiger ;
40126: LD_ADDR_OWVAR 28
40130: PUSH
40131: LD_INT 14
40133: ST_TO_ADDR
// hc_gallery :=  ;
40134: LD_ADDR_OWVAR 33
40138: PUSH
40139: LD_STRING 
40141: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40142: LD_ADDR_OWVAR 35
40146: PUSH
40147: LD_VAR 0 1
40151: NEG
40152: PPUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: CALL_OW 12
40162: ST_TO_ADDR
// end ;
40163: LD_VAR 0 2
40167: RET
// export function PrepareEnchidna ( ) ; begin
40168: LD_INT 0
40170: PPUSH
// uc_side := 0 ;
40171: LD_ADDR_OWVAR 20
40175: PUSH
40176: LD_INT 0
40178: ST_TO_ADDR
// uc_nation := 0 ;
40179: LD_ADDR_OWVAR 21
40183: PUSH
40184: LD_INT 0
40186: ST_TO_ADDR
// hc_class := class_baggie ;
40187: LD_ADDR_OWVAR 28
40191: PUSH
40192: LD_INT 13
40194: ST_TO_ADDR
// hc_gallery :=  ;
40195: LD_ADDR_OWVAR 33
40199: PUSH
40200: LD_STRING 
40202: ST_TO_ADDR
// end ;
40203: LD_VAR 0 1
40207: RET
// export function PrepareFrog ( ) ; begin
40208: LD_INT 0
40210: PPUSH
// uc_side := 0 ;
40211: LD_ADDR_OWVAR 20
40215: PUSH
40216: LD_INT 0
40218: ST_TO_ADDR
// uc_nation := 0 ;
40219: LD_ADDR_OWVAR 21
40223: PUSH
40224: LD_INT 0
40226: ST_TO_ADDR
// hc_class := class_frog ;
40227: LD_ADDR_OWVAR 28
40231: PUSH
40232: LD_INT 19
40234: ST_TO_ADDR
// hc_gallery :=  ;
40235: LD_ADDR_OWVAR 33
40239: PUSH
40240: LD_STRING 
40242: ST_TO_ADDR
// end ;
40243: LD_VAR 0 1
40247: RET
// export function PrepareFish ( ) ; begin
40248: LD_INT 0
40250: PPUSH
// uc_side := 0 ;
40251: LD_ADDR_OWVAR 20
40255: PUSH
40256: LD_INT 0
40258: ST_TO_ADDR
// uc_nation := 0 ;
40259: LD_ADDR_OWVAR 21
40263: PUSH
40264: LD_INT 0
40266: ST_TO_ADDR
// hc_class := class_fish ;
40267: LD_ADDR_OWVAR 28
40271: PUSH
40272: LD_INT 20
40274: ST_TO_ADDR
// hc_gallery :=  ;
40275: LD_ADDR_OWVAR 33
40279: PUSH
40280: LD_STRING 
40282: ST_TO_ADDR
// end ;
40283: LD_VAR 0 1
40287: RET
// export function PrepareBird ( ) ; begin
40288: LD_INT 0
40290: PPUSH
// uc_side := 0 ;
40291: LD_ADDR_OWVAR 20
40295: PUSH
40296: LD_INT 0
40298: ST_TO_ADDR
// uc_nation := 0 ;
40299: LD_ADDR_OWVAR 21
40303: PUSH
40304: LD_INT 0
40306: ST_TO_ADDR
// hc_class := class_phororhacos ;
40307: LD_ADDR_OWVAR 28
40311: PUSH
40312: LD_INT 18
40314: ST_TO_ADDR
// hc_gallery :=  ;
40315: LD_ADDR_OWVAR 33
40319: PUSH
40320: LD_STRING 
40322: ST_TO_ADDR
// end ;
40323: LD_VAR 0 1
40327: RET
// export function PrepareHorse ( ) ; begin
40328: LD_INT 0
40330: PPUSH
// uc_side := 0 ;
40331: LD_ADDR_OWVAR 20
40335: PUSH
40336: LD_INT 0
40338: ST_TO_ADDR
// uc_nation := 0 ;
40339: LD_ADDR_OWVAR 21
40343: PUSH
40344: LD_INT 0
40346: ST_TO_ADDR
// hc_class := class_horse ;
40347: LD_ADDR_OWVAR 28
40351: PUSH
40352: LD_INT 21
40354: ST_TO_ADDR
// hc_gallery :=  ;
40355: LD_ADDR_OWVAR 33
40359: PUSH
40360: LD_STRING 
40362: ST_TO_ADDR
// end ;
40363: LD_VAR 0 1
40367: RET
// export function PrepareMastodont ( ) ; begin
40368: LD_INT 0
40370: PPUSH
// uc_side := 0 ;
40371: LD_ADDR_OWVAR 20
40375: PUSH
40376: LD_INT 0
40378: ST_TO_ADDR
// uc_nation := 0 ;
40379: LD_ADDR_OWVAR 21
40383: PUSH
40384: LD_INT 0
40386: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40387: LD_ADDR_OWVAR 37
40391: PUSH
40392: LD_INT 31
40394: ST_TO_ADDR
// vc_control := control_rider ;
40395: LD_ADDR_OWVAR 38
40399: PUSH
40400: LD_INT 4
40402: ST_TO_ADDR
// end ;
40403: LD_VAR 0 1
40407: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40408: LD_INT 0
40410: PPUSH
40411: PPUSH
40412: PPUSH
// uc_side = 0 ;
40413: LD_ADDR_OWVAR 20
40417: PUSH
40418: LD_INT 0
40420: ST_TO_ADDR
// uc_nation = 0 ;
40421: LD_ADDR_OWVAR 21
40425: PUSH
40426: LD_INT 0
40428: ST_TO_ADDR
// InitHc_All ( ) ;
40429: CALL_OW 584
// InitVc ;
40433: CALL_OW 20
// if mastodonts then
40437: LD_VAR 0 6
40441: IFFALSE 40508
// for i = 1 to mastodonts do
40443: LD_ADDR_VAR 0 11
40447: PUSH
40448: DOUBLE
40449: LD_INT 1
40451: DEC
40452: ST_TO_ADDR
40453: LD_VAR 0 6
40457: PUSH
40458: FOR_TO
40459: IFFALSE 40506
// begin vc_chassis := 31 ;
40461: LD_ADDR_OWVAR 37
40465: PUSH
40466: LD_INT 31
40468: ST_TO_ADDR
// vc_control := control_rider ;
40469: LD_ADDR_OWVAR 38
40473: PUSH
40474: LD_INT 4
40476: ST_TO_ADDR
// animal := CreateVehicle ;
40477: LD_ADDR_VAR 0 12
40481: PUSH
40482: CALL_OW 45
40486: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40487: LD_VAR 0 12
40491: PPUSH
40492: LD_VAR 0 8
40496: PPUSH
40497: LD_INT 0
40499: PPUSH
40500: CALL 42636 0 3
// end ;
40504: GO 40458
40506: POP
40507: POP
// if horses then
40508: LD_VAR 0 5
40512: IFFALSE 40579
// for i = 1 to horses do
40514: LD_ADDR_VAR 0 11
40518: PUSH
40519: DOUBLE
40520: LD_INT 1
40522: DEC
40523: ST_TO_ADDR
40524: LD_VAR 0 5
40528: PUSH
40529: FOR_TO
40530: IFFALSE 40577
// begin hc_class := 21 ;
40532: LD_ADDR_OWVAR 28
40536: PUSH
40537: LD_INT 21
40539: ST_TO_ADDR
// hc_gallery :=  ;
40540: LD_ADDR_OWVAR 33
40544: PUSH
40545: LD_STRING 
40547: ST_TO_ADDR
// animal := CreateHuman ;
40548: LD_ADDR_VAR 0 12
40552: PUSH
40553: CALL_OW 44
40557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40558: LD_VAR 0 12
40562: PPUSH
40563: LD_VAR 0 8
40567: PPUSH
40568: LD_INT 0
40570: PPUSH
40571: CALL 42636 0 3
// end ;
40575: GO 40529
40577: POP
40578: POP
// if birds then
40579: LD_VAR 0 1
40583: IFFALSE 40650
// for i = 1 to birds do
40585: LD_ADDR_VAR 0 11
40589: PUSH
40590: DOUBLE
40591: LD_INT 1
40593: DEC
40594: ST_TO_ADDR
40595: LD_VAR 0 1
40599: PUSH
40600: FOR_TO
40601: IFFALSE 40648
// begin hc_class = 18 ;
40603: LD_ADDR_OWVAR 28
40607: PUSH
40608: LD_INT 18
40610: ST_TO_ADDR
// hc_gallery =  ;
40611: LD_ADDR_OWVAR 33
40615: PUSH
40616: LD_STRING 
40618: ST_TO_ADDR
// animal := CreateHuman ;
40619: LD_ADDR_VAR 0 12
40623: PUSH
40624: CALL_OW 44
40628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40629: LD_VAR 0 12
40633: PPUSH
40634: LD_VAR 0 8
40638: PPUSH
40639: LD_INT 0
40641: PPUSH
40642: CALL 42636 0 3
// end ;
40646: GO 40600
40648: POP
40649: POP
// if tigers then
40650: LD_VAR 0 2
40654: IFFALSE 40738
// for i = 1 to tigers do
40656: LD_ADDR_VAR 0 11
40660: PUSH
40661: DOUBLE
40662: LD_INT 1
40664: DEC
40665: ST_TO_ADDR
40666: LD_VAR 0 2
40670: PUSH
40671: FOR_TO
40672: IFFALSE 40736
// begin hc_class = class_tiger ;
40674: LD_ADDR_OWVAR 28
40678: PUSH
40679: LD_INT 14
40681: ST_TO_ADDR
// hc_gallery =  ;
40682: LD_ADDR_OWVAR 33
40686: PUSH
40687: LD_STRING 
40689: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
40690: LD_ADDR_OWVAR 35
40694: PUSH
40695: LD_INT 7
40697: NEG
40698: PPUSH
40699: LD_INT 7
40701: PPUSH
40702: CALL_OW 12
40706: ST_TO_ADDR
// animal := CreateHuman ;
40707: LD_ADDR_VAR 0 12
40711: PUSH
40712: CALL_OW 44
40716: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40717: LD_VAR 0 12
40721: PPUSH
40722: LD_VAR 0 8
40726: PPUSH
40727: LD_INT 0
40729: PPUSH
40730: CALL 42636 0 3
// end ;
40734: GO 40671
40736: POP
40737: POP
// if apemans then
40738: LD_VAR 0 3
40742: IFFALSE 40865
// for i = 1 to apemans do
40744: LD_ADDR_VAR 0 11
40748: PUSH
40749: DOUBLE
40750: LD_INT 1
40752: DEC
40753: ST_TO_ADDR
40754: LD_VAR 0 3
40758: PUSH
40759: FOR_TO
40760: IFFALSE 40863
// begin hc_class = class_apeman ;
40762: LD_ADDR_OWVAR 28
40766: PUSH
40767: LD_INT 12
40769: ST_TO_ADDR
// hc_gallery =  ;
40770: LD_ADDR_OWVAR 33
40774: PUSH
40775: LD_STRING 
40777: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
40778: LD_ADDR_OWVAR 35
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PPUSH
40787: LD_INT 2
40789: PPUSH
40790: CALL_OW 12
40794: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
40795: LD_ADDR_OWVAR 31
40799: PUSH
40800: LD_INT 1
40802: PPUSH
40803: LD_INT 3
40805: PPUSH
40806: CALL_OW 12
40810: PUSH
40811: LD_INT 1
40813: PPUSH
40814: LD_INT 3
40816: PPUSH
40817: CALL_OW 12
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: ST_TO_ADDR
// animal := CreateHuman ;
40834: LD_ADDR_VAR 0 12
40838: PUSH
40839: CALL_OW 44
40843: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40844: LD_VAR 0 12
40848: PPUSH
40849: LD_VAR 0 8
40853: PPUSH
40854: LD_INT 0
40856: PPUSH
40857: CALL 42636 0 3
// end ;
40861: GO 40759
40863: POP
40864: POP
// if enchidnas then
40865: LD_VAR 0 4
40869: IFFALSE 40936
// for i = 1 to enchidnas do
40871: LD_ADDR_VAR 0 11
40875: PUSH
40876: DOUBLE
40877: LD_INT 1
40879: DEC
40880: ST_TO_ADDR
40881: LD_VAR 0 4
40885: PUSH
40886: FOR_TO
40887: IFFALSE 40934
// begin hc_class = 13 ;
40889: LD_ADDR_OWVAR 28
40893: PUSH
40894: LD_INT 13
40896: ST_TO_ADDR
// hc_gallery =  ;
40897: LD_ADDR_OWVAR 33
40901: PUSH
40902: LD_STRING 
40904: ST_TO_ADDR
// animal := CreateHuman ;
40905: LD_ADDR_VAR 0 12
40909: PUSH
40910: CALL_OW 44
40914: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40915: LD_VAR 0 12
40919: PPUSH
40920: LD_VAR 0 8
40924: PPUSH
40925: LD_INT 0
40927: PPUSH
40928: CALL 42636 0 3
// end ;
40932: GO 40886
40934: POP
40935: POP
// if fishes then
40936: LD_VAR 0 7
40940: IFFALSE 41007
// for i = 1 to fishes do
40942: LD_ADDR_VAR 0 11
40946: PUSH
40947: DOUBLE
40948: LD_INT 1
40950: DEC
40951: ST_TO_ADDR
40952: LD_VAR 0 7
40956: PUSH
40957: FOR_TO
40958: IFFALSE 41005
// begin hc_class = 20 ;
40960: LD_ADDR_OWVAR 28
40964: PUSH
40965: LD_INT 20
40967: ST_TO_ADDR
// hc_gallery =  ;
40968: LD_ADDR_OWVAR 33
40972: PUSH
40973: LD_STRING 
40975: ST_TO_ADDR
// animal := CreateHuman ;
40976: LD_ADDR_VAR 0 12
40980: PUSH
40981: CALL_OW 44
40985: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
40986: LD_VAR 0 12
40990: PPUSH
40991: LD_VAR 0 9
40995: PPUSH
40996: LD_INT 0
40998: PPUSH
40999: CALL 42636 0 3
// end ;
41003: GO 40957
41005: POP
41006: POP
// end ;
41007: LD_VAR 0 10
41011: RET
// export function WantHeal ( sci , unit ) ; begin
41012: LD_INT 0
41014: PPUSH
// if GetTaskList ( sci ) > 0 then
41015: LD_VAR 0 1
41019: PPUSH
41020: CALL_OW 437
41024: PUSH
41025: LD_INT 0
41027: GREATER
41028: IFFALSE 41098
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 437
41039: PUSH
41040: LD_INT 1
41042: ARRAY
41043: PUSH
41044: LD_INT 1
41046: ARRAY
41047: PUSH
41048: LD_STRING l
41050: EQUAL
41051: PUSH
41052: LD_VAR 0 1
41056: PPUSH
41057: CALL_OW 437
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: PUSH
41066: LD_INT 4
41068: ARRAY
41069: PUSH
41070: LD_VAR 0 2
41074: EQUAL
41075: AND
41076: IFFALSE 41088
// result := true else
41078: LD_ADDR_VAR 0 3
41082: PUSH
41083: LD_INT 1
41085: ST_TO_ADDR
41086: GO 41096
// result := false ;
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_INT 0
41095: ST_TO_ADDR
// end else
41096: GO 41106
// result := false ;
41098: LD_ADDR_VAR 0 3
41102: PUSH
41103: LD_INT 0
41105: ST_TO_ADDR
// end ;
41106: LD_VAR 0 3
41110: RET
// export function HealTarget ( sci ) ; begin
41111: LD_INT 0
41113: PPUSH
// if not sci then
41114: LD_VAR 0 1
41118: NOT
41119: IFFALSE 41123
// exit ;
41121: GO 41188
// result := 0 ;
41123: LD_ADDR_VAR 0 2
41127: PUSH
41128: LD_INT 0
41130: ST_TO_ADDR
// if GetTaskList ( sci ) then
41131: LD_VAR 0 1
41135: PPUSH
41136: CALL_OW 437
41140: IFFALSE 41188
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 437
41151: PUSH
41152: LD_INT 1
41154: ARRAY
41155: PUSH
41156: LD_INT 1
41158: ARRAY
41159: PUSH
41160: LD_STRING l
41162: EQUAL
41163: IFFALSE 41188
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41165: LD_ADDR_VAR 0 2
41169: PUSH
41170: LD_VAR 0 1
41174: PPUSH
41175: CALL_OW 437
41179: PUSH
41180: LD_INT 1
41182: ARRAY
41183: PUSH
41184: LD_INT 4
41186: ARRAY
41187: ST_TO_ADDR
// end ;
41188: LD_VAR 0 2
41192: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41193: LD_INT 0
41195: PPUSH
41196: PPUSH
41197: PPUSH
41198: PPUSH
// if not base_units then
41199: LD_VAR 0 1
41203: NOT
41204: IFFALSE 41208
// exit ;
41206: GO 41295
// result := false ;
41208: LD_ADDR_VAR 0 2
41212: PUSH
41213: LD_INT 0
41215: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41216: LD_ADDR_VAR 0 5
41220: PUSH
41221: LD_VAR 0 1
41225: PPUSH
41226: LD_INT 21
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PPUSH
41236: CALL_OW 72
41240: ST_TO_ADDR
// if not tmp then
41241: LD_VAR 0 5
41245: NOT
41246: IFFALSE 41250
// exit ;
41248: GO 41295
// for i in tmp do
41250: LD_ADDR_VAR 0 3
41254: PUSH
41255: LD_VAR 0 5
41259: PUSH
41260: FOR_IN
41261: IFFALSE 41293
// begin result := EnemyInRange ( i , 22 ) ;
41263: LD_ADDR_VAR 0 2
41267: PUSH
41268: LD_VAR 0 3
41272: PPUSH
41273: LD_INT 22
41275: PPUSH
41276: CALL 38882 0 2
41280: ST_TO_ADDR
// if result then
41281: LD_VAR 0 2
41285: IFFALSE 41291
// exit ;
41287: POP
41288: POP
41289: GO 41295
// end ;
41291: GO 41260
41293: POP
41294: POP
// end ;
41295: LD_VAR 0 2
41299: RET
// export function FilterByTag ( units , tag ) ; begin
41300: LD_INT 0
41302: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41303: LD_ADDR_VAR 0 3
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: LD_INT 120
41315: PUSH
41316: LD_VAR 0 2
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PPUSH
41325: CALL_OW 72
41329: ST_TO_ADDR
// end ;
41330: LD_VAR 0 3
41334: RET
// export function IsDriver ( un ) ; begin
41335: LD_INT 0
41337: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41338: LD_ADDR_VAR 0 2
41342: PUSH
41343: LD_VAR 0 1
41347: PUSH
41348: LD_INT 55
41350: PUSH
41351: EMPTY
41352: LIST
41353: PPUSH
41354: CALL_OW 69
41358: IN
41359: ST_TO_ADDR
// end ;
41360: LD_VAR 0 2
41364: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41365: LD_INT 0
41367: PPUSH
41368: PPUSH
// list := [ ] ;
41369: LD_ADDR_VAR 0 5
41373: PUSH
41374: EMPTY
41375: ST_TO_ADDR
// case d of 0 :
41376: LD_VAR 0 3
41380: PUSH
41381: LD_INT 0
41383: DOUBLE
41384: EQUAL
41385: IFTRUE 41389
41387: GO 41522
41389: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41390: LD_ADDR_VAR 0 5
41394: PUSH
41395: LD_VAR 0 1
41399: PUSH
41400: LD_INT 4
41402: MINUS
41403: PUSH
41404: LD_VAR 0 2
41408: PUSH
41409: LD_INT 4
41411: MINUS
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: LIST
41420: PUSH
41421: LD_VAR 0 1
41425: PUSH
41426: LD_INT 3
41428: MINUS
41429: PUSH
41430: LD_VAR 0 2
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: LIST
41442: PUSH
41443: LD_VAR 0 1
41447: PUSH
41448: LD_INT 4
41450: PLUS
41451: PUSH
41452: LD_VAR 0 2
41456: PUSH
41457: LD_INT 4
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: LIST
41464: PUSH
41465: LD_VAR 0 1
41469: PUSH
41470: LD_INT 3
41472: PLUS
41473: PUSH
41474: LD_VAR 0 2
41478: PUSH
41479: LD_INT 3
41481: PLUS
41482: PUSH
41483: LD_INT 5
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: LIST
41490: PUSH
41491: LD_VAR 0 1
41495: PUSH
41496: LD_VAR 0 2
41500: PUSH
41501: LD_INT 4
41503: PLUS
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: LIST
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: ST_TO_ADDR
// end ; 1 :
41520: GO 42220
41522: LD_INT 1
41524: DOUBLE
41525: EQUAL
41526: IFTRUE 41530
41528: GO 41663
41530: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41531: LD_ADDR_VAR 0 5
41535: PUSH
41536: LD_VAR 0 1
41540: PUSH
41541: LD_VAR 0 2
41545: PUSH
41546: LD_INT 4
41548: MINUS
41549: PUSH
41550: LD_INT 3
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: LIST
41557: PUSH
41558: LD_VAR 0 1
41562: PUSH
41563: LD_INT 3
41565: MINUS
41566: PUSH
41567: LD_VAR 0 2
41571: PUSH
41572: LD_INT 3
41574: MINUS
41575: PUSH
41576: LD_INT 2
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: PUSH
41584: LD_VAR 0 1
41588: PUSH
41589: LD_INT 4
41591: MINUS
41592: PUSH
41593: LD_VAR 0 2
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: EMPTY
41602: LIST
41603: LIST
41604: LIST
41605: PUSH
41606: LD_VAR 0 1
41610: PUSH
41611: LD_VAR 0 2
41615: PUSH
41616: LD_INT 3
41618: PLUS
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: LIST
41627: PUSH
41628: LD_VAR 0 1
41632: PUSH
41633: LD_INT 4
41635: PLUS
41636: PUSH
41637: LD_VAR 0 2
41641: PUSH
41642: LD_INT 4
41644: PLUS
41645: PUSH
41646: LD_INT 5
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: ST_TO_ADDR
// end ; 2 :
41661: GO 42220
41663: LD_INT 2
41665: DOUBLE
41666: EQUAL
41667: IFTRUE 41671
41669: GO 41800
41671: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
41672: LD_ADDR_VAR 0 5
41676: PUSH
41677: LD_VAR 0 1
41681: PUSH
41682: LD_VAR 0 2
41686: PUSH
41687: LD_INT 3
41689: MINUS
41690: PUSH
41691: LD_INT 3
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: LIST
41698: PUSH
41699: LD_VAR 0 1
41703: PUSH
41704: LD_INT 4
41706: PLUS
41707: PUSH
41708: LD_VAR 0 2
41712: PUSH
41713: LD_INT 4
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: LIST
41720: PUSH
41721: LD_VAR 0 1
41725: PUSH
41726: LD_VAR 0 2
41730: PUSH
41731: LD_INT 4
41733: PLUS
41734: PUSH
41735: LD_INT 0
41737: PUSH
41738: EMPTY
41739: LIST
41740: LIST
41741: LIST
41742: PUSH
41743: LD_VAR 0 1
41747: PUSH
41748: LD_INT 3
41750: MINUS
41751: PUSH
41752: LD_VAR 0 2
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: PUSH
41765: LD_VAR 0 1
41769: PUSH
41770: LD_INT 4
41772: MINUS
41773: PUSH
41774: LD_VAR 0 2
41778: PUSH
41779: LD_INT 4
41781: MINUS
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: ST_TO_ADDR
// end ; 3 :
41798: GO 42220
41800: LD_INT 3
41802: DOUBLE
41803: EQUAL
41804: IFTRUE 41808
41806: GO 41941
41808: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41809: LD_ADDR_VAR 0 5
41813: PUSH
41814: LD_VAR 0 1
41818: PUSH
41819: LD_INT 3
41821: PLUS
41822: PUSH
41823: LD_VAR 0 2
41827: PUSH
41828: LD_INT 4
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: LIST
41835: PUSH
41836: LD_VAR 0 1
41840: PUSH
41841: LD_INT 4
41843: PLUS
41844: PUSH
41845: LD_VAR 0 2
41849: PUSH
41850: LD_INT 4
41852: PLUS
41853: PUSH
41854: LD_INT 5
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: LIST
41861: PUSH
41862: LD_VAR 0 1
41866: PUSH
41867: LD_INT 4
41869: MINUS
41870: PUSH
41871: LD_VAR 0 2
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: LIST
41883: PUSH
41884: LD_VAR 0 1
41888: PUSH
41889: LD_VAR 0 2
41893: PUSH
41894: LD_INT 4
41896: MINUS
41897: PUSH
41898: LD_INT 3
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: PUSH
41906: LD_VAR 0 1
41910: PUSH
41911: LD_INT 3
41913: MINUS
41914: PUSH
41915: LD_VAR 0 2
41919: PUSH
41920: LD_INT 3
41922: MINUS
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: LIST
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: ST_TO_ADDR
// end ; 4 :
41939: GO 42220
41941: LD_INT 4
41943: DOUBLE
41944: EQUAL
41945: IFTRUE 41949
41947: GO 42082
41949: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
41950: LD_ADDR_VAR 0 5
41954: PUSH
41955: LD_VAR 0 1
41959: PUSH
41960: LD_VAR 0 2
41964: PUSH
41965: LD_INT 4
41967: PLUS
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: PUSH
41977: LD_VAR 0 1
41981: PUSH
41982: LD_INT 3
41984: PLUS
41985: PUSH
41986: LD_VAR 0 2
41990: PUSH
41991: LD_INT 3
41993: PLUS
41994: PUSH
41995: LD_INT 5
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: PUSH
42003: LD_VAR 0 1
42007: PUSH
42008: LD_INT 4
42010: PLUS
42011: PUSH
42012: LD_VAR 0 2
42016: PUSH
42017: LD_INT 4
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: LIST
42024: PUSH
42025: LD_VAR 0 1
42029: PUSH
42030: LD_VAR 0 2
42034: PUSH
42035: LD_INT 3
42037: MINUS
42038: PUSH
42039: LD_INT 3
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: LIST
42046: PUSH
42047: LD_VAR 0 1
42051: PUSH
42052: LD_INT 4
42054: MINUS
42055: PUSH
42056: LD_VAR 0 2
42060: PUSH
42061: LD_INT 4
42063: MINUS
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: LIST
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: ST_TO_ADDR
// end ; 5 :
42080: GO 42220
42082: LD_INT 5
42084: DOUBLE
42085: EQUAL
42086: IFTRUE 42090
42088: GO 42219
42090: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42091: LD_ADDR_VAR 0 5
42095: PUSH
42096: LD_VAR 0 1
42100: PUSH
42101: LD_INT 4
42103: MINUS
42104: PUSH
42105: LD_VAR 0 2
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: LIST
42117: PUSH
42118: LD_VAR 0 1
42122: PUSH
42123: LD_VAR 0 2
42127: PUSH
42128: LD_INT 4
42130: MINUS
42131: PUSH
42132: LD_INT 3
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: PUSH
42140: LD_VAR 0 1
42144: PUSH
42145: LD_INT 4
42147: PLUS
42148: PUSH
42149: LD_VAR 0 2
42153: PUSH
42154: LD_INT 4
42156: PLUS
42157: PUSH
42158: LD_INT 5
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: PUSH
42166: LD_VAR 0 1
42170: PUSH
42171: LD_INT 3
42173: PLUS
42174: PUSH
42175: LD_VAR 0 2
42179: PUSH
42180: LD_INT 4
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: LIST
42187: PUSH
42188: LD_VAR 0 1
42192: PUSH
42193: LD_VAR 0 2
42197: PUSH
42198: LD_INT 3
42200: PLUS
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: LIST
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
// end ; end ;
42217: GO 42220
42219: POP
// result := list ;
42220: LD_ADDR_VAR 0 4
42224: PUSH
42225: LD_VAR 0 5
42229: ST_TO_ADDR
// end ;
42230: LD_VAR 0 4
42234: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42235: LD_INT 0
42237: PPUSH
42238: PPUSH
42239: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42240: LD_VAR 0 1
42244: NOT
42245: PUSH
42246: LD_VAR 0 2
42250: PUSH
42251: LD_INT 1
42253: PUSH
42254: LD_INT 2
42256: PUSH
42257: LD_INT 3
42259: PUSH
42260: LD_INT 4
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: IN
42269: NOT
42270: OR
42271: IFFALSE 42275
// exit ;
42273: GO 42358
// tmp := [ ] ;
42275: LD_ADDR_VAR 0 5
42279: PUSH
42280: EMPTY
42281: ST_TO_ADDR
// for i in units do
42282: LD_ADDR_VAR 0 4
42286: PUSH
42287: LD_VAR 0 1
42291: PUSH
42292: FOR_IN
42293: IFFALSE 42327
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
42295: LD_ADDR_VAR 0 5
42299: PUSH
42300: LD_VAR 0 5
42304: PPUSH
42305: LD_VAR 0 4
42309: PPUSH
42310: LD_VAR 0 2
42314: PPUSH
42315: CALL_OW 259
42319: PPUSH
42320: CALL 43718 0 2
42324: ST_TO_ADDR
42325: GO 42292
42327: POP
42328: POP
// if not tmp then
42329: LD_VAR 0 5
42333: NOT
42334: IFFALSE 42338
// exit ;
42336: GO 42358
// result := SortListByListDesc ( units , tmp ) ;
42338: LD_ADDR_VAR 0 3
42342: PUSH
42343: LD_VAR 0 1
42347: PPUSH
42348: LD_VAR 0 5
42352: PPUSH
42353: CALL_OW 77
42357: ST_TO_ADDR
// end ;
42358: LD_VAR 0 3
42362: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42363: LD_INT 0
42365: PPUSH
42366: PPUSH
42367: PPUSH
// result := false ;
42368: LD_ADDR_VAR 0 3
42372: PUSH
42373: LD_INT 0
42375: ST_TO_ADDR
// if not building then
42376: LD_VAR 0 2
42380: NOT
42381: IFFALSE 42385
// exit ;
42383: GO 42523
// x := GetX ( building ) ;
42385: LD_ADDR_VAR 0 4
42389: PUSH
42390: LD_VAR 0 2
42394: PPUSH
42395: CALL_OW 250
42399: ST_TO_ADDR
// y := GetY ( building ) ;
42400: LD_ADDR_VAR 0 5
42404: PUSH
42405: LD_VAR 0 2
42409: PPUSH
42410: CALL_OW 251
42414: ST_TO_ADDR
// if not x or not y then
42415: LD_VAR 0 4
42419: NOT
42420: PUSH
42421: LD_VAR 0 5
42425: NOT
42426: OR
42427: IFFALSE 42431
// exit ;
42429: GO 42523
// if GetTaskList ( unit ) then
42431: LD_VAR 0 1
42435: PPUSH
42436: CALL_OW 437
42440: IFFALSE 42523
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42442: LD_STRING e
42444: PUSH
42445: LD_VAR 0 1
42449: PPUSH
42450: CALL_OW 437
42454: PUSH
42455: LD_INT 1
42457: ARRAY
42458: PUSH
42459: LD_INT 1
42461: ARRAY
42462: EQUAL
42463: PUSH
42464: LD_VAR 0 4
42468: PUSH
42469: LD_VAR 0 1
42473: PPUSH
42474: CALL_OW 437
42478: PUSH
42479: LD_INT 1
42481: ARRAY
42482: PUSH
42483: LD_INT 2
42485: ARRAY
42486: EQUAL
42487: AND
42488: PUSH
42489: LD_VAR 0 5
42493: PUSH
42494: LD_VAR 0 1
42498: PPUSH
42499: CALL_OW 437
42503: PUSH
42504: LD_INT 1
42506: ARRAY
42507: PUSH
42508: LD_INT 3
42510: ARRAY
42511: EQUAL
42512: AND
42513: IFFALSE 42523
// result := true end ;
42515: LD_ADDR_VAR 0 3
42519: PUSH
42520: LD_INT 1
42522: ST_TO_ADDR
// end ;
42523: LD_VAR 0 3
42527: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42528: LD_INT 0
42530: PPUSH
// result := false ;
42531: LD_ADDR_VAR 0 4
42535: PUSH
42536: LD_INT 0
42538: ST_TO_ADDR
// if GetTaskList ( unit ) then
42539: LD_VAR 0 1
42543: PPUSH
42544: CALL_OW 437
42548: IFFALSE 42631
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42550: LD_STRING M
42552: PUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 437
42562: PUSH
42563: LD_INT 1
42565: ARRAY
42566: PUSH
42567: LD_INT 1
42569: ARRAY
42570: EQUAL
42571: PUSH
42572: LD_VAR 0 2
42576: PUSH
42577: LD_VAR 0 1
42581: PPUSH
42582: CALL_OW 437
42586: PUSH
42587: LD_INT 1
42589: ARRAY
42590: PUSH
42591: LD_INT 2
42593: ARRAY
42594: EQUAL
42595: AND
42596: PUSH
42597: LD_VAR 0 3
42601: PUSH
42602: LD_VAR 0 1
42606: PPUSH
42607: CALL_OW 437
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: PUSH
42616: LD_INT 3
42618: ARRAY
42619: EQUAL
42620: AND
42621: IFFALSE 42631
// result := true ;
42623: LD_ADDR_VAR 0 4
42627: PUSH
42628: LD_INT 1
42630: ST_TO_ADDR
// end ; end ;
42631: LD_VAR 0 4
42635: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
42636: LD_INT 0
42638: PPUSH
42639: PPUSH
42640: PPUSH
42641: PPUSH
// if not unit or not area then
42642: LD_VAR 0 1
42646: NOT
42647: PUSH
42648: LD_VAR 0 2
42652: NOT
42653: OR
42654: IFFALSE 42658
// exit ;
42656: GO 42821
// tmp := AreaToList ( area , i ) ;
42658: LD_ADDR_VAR 0 6
42662: PUSH
42663: LD_VAR 0 2
42667: PPUSH
42668: LD_VAR 0 5
42672: PPUSH
42673: CALL_OW 517
42677: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
42678: LD_ADDR_VAR 0 5
42682: PUSH
42683: DOUBLE
42684: LD_INT 1
42686: DEC
42687: ST_TO_ADDR
42688: LD_VAR 0 6
42692: PUSH
42693: LD_INT 1
42695: ARRAY
42696: PUSH
42697: FOR_TO
42698: IFFALSE 42819
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
42700: LD_ADDR_VAR 0 7
42704: PUSH
42705: LD_VAR 0 6
42709: PUSH
42710: LD_INT 1
42712: ARRAY
42713: PUSH
42714: LD_VAR 0 5
42718: ARRAY
42719: PUSH
42720: LD_VAR 0 6
42724: PUSH
42725: LD_INT 2
42727: ARRAY
42728: PUSH
42729: LD_VAR 0 5
42733: ARRAY
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
42739: LD_INT 92
42741: PUSH
42742: LD_VAR 0 7
42746: PUSH
42747: LD_INT 1
42749: ARRAY
42750: PUSH
42751: LD_VAR 0 7
42755: PUSH
42756: LD_INT 2
42758: ARRAY
42759: PUSH
42760: LD_INT 3
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: PPUSH
42769: CALL_OW 69
42773: PUSH
42774: LD_INT 0
42776: EQUAL
42777: IFFALSE 42817
// begin PlaceUnitArea ( unit , area , mode ) ;
42779: LD_VAR 0 1
42783: PPUSH
42784: LD_VAR 0 2
42788: PPUSH
42789: LD_VAR 0 3
42793: PPUSH
42794: CALL_OW 49
// result := IsPlaced ( unit ) ;
42798: LD_ADDR_VAR 0 4
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 305
42812: ST_TO_ADDR
// exit ;
42813: POP
42814: POP
42815: GO 42821
// end ; end ;
42817: GO 42697
42819: POP
42820: POP
// end ;
42821: LD_VAR 0 4
42825: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42826: LD_INT 0
42828: PPUSH
42829: PPUSH
42830: PPUSH
// if not side or side > 8 then
42831: LD_VAR 0 1
42835: NOT
42836: PUSH
42837: LD_VAR 0 1
42841: PUSH
42842: LD_INT 8
42844: GREATER
42845: OR
42846: IFFALSE 42850
// exit ;
42848: GO 43037
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42850: LD_ADDR_VAR 0 4
42854: PUSH
42855: LD_INT 22
42857: PUSH
42858: LD_VAR 0 1
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 21
42869: PUSH
42870: LD_INT 3
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PPUSH
42881: CALL_OW 69
42885: ST_TO_ADDR
// if not tmp then
42886: LD_VAR 0 4
42890: NOT
42891: IFFALSE 42895
// exit ;
42893: GO 43037
// enable_addtolog := true ;
42895: LD_ADDR_OWVAR 81
42899: PUSH
42900: LD_INT 1
42902: ST_TO_ADDR
// AddToLog ( [ ) ;
42903: LD_STRING [
42905: PPUSH
42906: CALL_OW 561
// for i in tmp do
42910: LD_ADDR_VAR 0 3
42914: PUSH
42915: LD_VAR 0 4
42919: PUSH
42920: FOR_IN
42921: IFFALSE 43028
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
42923: LD_STRING [
42925: PUSH
42926: LD_VAR 0 3
42930: PPUSH
42931: CALL_OW 266
42935: STR
42936: PUSH
42937: LD_STRING , 
42939: STR
42940: PUSH
42941: LD_VAR 0 3
42945: PPUSH
42946: CALL_OW 250
42950: STR
42951: PUSH
42952: LD_STRING , 
42954: STR
42955: PUSH
42956: LD_VAR 0 3
42960: PPUSH
42961: CALL_OW 251
42965: STR
42966: PUSH
42967: LD_STRING , 
42969: STR
42970: PUSH
42971: LD_VAR 0 3
42975: PPUSH
42976: CALL_OW 254
42980: STR
42981: PUSH
42982: LD_STRING , 
42984: STR
42985: PUSH
42986: LD_VAR 0 3
42990: PPUSH
42991: LD_INT 1
42993: PPUSH
42994: CALL_OW 268
42998: STR
42999: PUSH
43000: LD_STRING , 
43002: STR
43003: PUSH
43004: LD_VAR 0 3
43008: PPUSH
43009: LD_INT 2
43011: PPUSH
43012: CALL_OW 268
43016: STR
43017: PUSH
43018: LD_STRING ],
43020: STR
43021: PPUSH
43022: CALL_OW 561
// end ;
43026: GO 42920
43028: POP
43029: POP
// AddToLog ( ]; ) ;
43030: LD_STRING ];
43032: PPUSH
43033: CALL_OW 561
// end ;
43037: LD_VAR 0 2
43041: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43042: LD_INT 0
43044: PPUSH
43045: PPUSH
43046: PPUSH
43047: PPUSH
43048: PPUSH
// if not area or not rate or not max then
43049: LD_VAR 0 1
43053: NOT
43054: PUSH
43055: LD_VAR 0 2
43059: NOT
43060: OR
43061: PUSH
43062: LD_VAR 0 4
43066: NOT
43067: OR
43068: IFFALSE 43072
// exit ;
43070: GO 43261
// while 1 do
43072: LD_INT 1
43074: IFFALSE 43261
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43076: LD_ADDR_VAR 0 9
43080: PUSH
43081: LD_VAR 0 1
43085: PPUSH
43086: LD_INT 1
43088: PPUSH
43089: CALL_OW 287
43093: PUSH
43094: LD_INT 10
43096: MUL
43097: ST_TO_ADDR
// r := rate / 10 ;
43098: LD_ADDR_VAR 0 7
43102: PUSH
43103: LD_VAR 0 2
43107: PUSH
43108: LD_INT 10
43110: DIVREAL
43111: ST_TO_ADDR
// time := 1 1$00 ;
43112: LD_ADDR_VAR 0 8
43116: PUSH
43117: LD_INT 2100
43119: ST_TO_ADDR
// if amount < min then
43120: LD_VAR 0 9
43124: PUSH
43125: LD_VAR 0 3
43129: LESS
43130: IFFALSE 43148
// r := r * 2 else
43132: LD_ADDR_VAR 0 7
43136: PUSH
43137: LD_VAR 0 7
43141: PUSH
43142: LD_INT 2
43144: MUL
43145: ST_TO_ADDR
43146: GO 43174
// if amount > max then
43148: LD_VAR 0 9
43152: PUSH
43153: LD_VAR 0 4
43157: GREATER
43158: IFFALSE 43174
// r := r / 2 ;
43160: LD_ADDR_VAR 0 7
43164: PUSH
43165: LD_VAR 0 7
43169: PUSH
43170: LD_INT 2
43172: DIVREAL
43173: ST_TO_ADDR
// time := time / r ;
43174: LD_ADDR_VAR 0 8
43178: PUSH
43179: LD_VAR 0 8
43183: PUSH
43184: LD_VAR 0 7
43188: DIVREAL
43189: ST_TO_ADDR
// if time < 0 then
43190: LD_VAR 0 8
43194: PUSH
43195: LD_INT 0
43197: LESS
43198: IFFALSE 43215
// time := time * - 1 ;
43200: LD_ADDR_VAR 0 8
43204: PUSH
43205: LD_VAR 0 8
43209: PUSH
43210: LD_INT 1
43212: NEG
43213: MUL
43214: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43215: LD_VAR 0 8
43219: PUSH
43220: LD_INT 35
43222: PPUSH
43223: LD_INT 875
43225: PPUSH
43226: CALL_OW 12
43230: PLUS
43231: PPUSH
43232: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43236: LD_INT 1
43238: PPUSH
43239: LD_INT 5
43241: PPUSH
43242: CALL_OW 12
43246: PPUSH
43247: LD_VAR 0 1
43251: PPUSH
43252: LD_INT 1
43254: PPUSH
43255: CALL_OW 55
// end ;
43259: GO 43072
// end ;
43261: LD_VAR 0 5
43265: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43266: LD_INT 0
43268: PPUSH
43269: PPUSH
43270: PPUSH
43271: PPUSH
43272: PPUSH
43273: PPUSH
43274: PPUSH
43275: PPUSH
// if not turrets or not factories then
43276: LD_VAR 0 1
43280: NOT
43281: PUSH
43282: LD_VAR 0 2
43286: NOT
43287: OR
43288: IFFALSE 43292
// exit ;
43290: GO 43599
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43292: LD_ADDR_VAR 0 10
43296: PUSH
43297: LD_INT 5
43299: PUSH
43300: LD_INT 6
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 2
43309: PUSH
43310: LD_INT 4
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 5
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 24
43334: PUSH
43335: LD_INT 25
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 23
43344: PUSH
43345: LD_INT 27
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 42
43358: PUSH
43359: LD_INT 43
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 44
43368: PUSH
43369: LD_INT 46
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 45
43378: PUSH
43379: LD_INT 47
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: LIST
43395: ST_TO_ADDR
// result := [ ] ;
43396: LD_ADDR_VAR 0 3
43400: PUSH
43401: EMPTY
43402: ST_TO_ADDR
// for i in turrets do
43403: LD_ADDR_VAR 0 4
43407: PUSH
43408: LD_VAR 0 1
43412: PUSH
43413: FOR_IN
43414: IFFALSE 43597
// begin nat := GetNation ( i ) ;
43416: LD_ADDR_VAR 0 7
43420: PUSH
43421: LD_VAR 0 4
43425: PPUSH
43426: CALL_OW 248
43430: ST_TO_ADDR
// weapon := 0 ;
43431: LD_ADDR_VAR 0 8
43435: PUSH
43436: LD_INT 0
43438: ST_TO_ADDR
// if not nat then
43439: LD_VAR 0 7
43443: NOT
43444: IFFALSE 43448
// continue ;
43446: GO 43413
// for j in list [ nat ] do
43448: LD_ADDR_VAR 0 5
43452: PUSH
43453: LD_VAR 0 10
43457: PUSH
43458: LD_VAR 0 7
43462: ARRAY
43463: PUSH
43464: FOR_IN
43465: IFFALSE 43506
// if GetBWeapon ( i ) = j [ 1 ] then
43467: LD_VAR 0 4
43471: PPUSH
43472: CALL_OW 269
43476: PUSH
43477: LD_VAR 0 5
43481: PUSH
43482: LD_INT 1
43484: ARRAY
43485: EQUAL
43486: IFFALSE 43504
// begin weapon := j [ 2 ] ;
43488: LD_ADDR_VAR 0 8
43492: PUSH
43493: LD_VAR 0 5
43497: PUSH
43498: LD_INT 2
43500: ARRAY
43501: ST_TO_ADDR
// break ;
43502: GO 43506
// end ;
43504: GO 43464
43506: POP
43507: POP
// if not weapon then
43508: LD_VAR 0 8
43512: NOT
43513: IFFALSE 43517
// continue ;
43515: GO 43413
// for k in factories do
43517: LD_ADDR_VAR 0 6
43521: PUSH
43522: LD_VAR 0 2
43526: PUSH
43527: FOR_IN
43528: IFFALSE 43593
// begin weapons := AvailableWeaponList ( k ) ;
43530: LD_ADDR_VAR 0 9
43534: PUSH
43535: LD_VAR 0 6
43539: PPUSH
43540: CALL_OW 478
43544: ST_TO_ADDR
// if not weapons then
43545: LD_VAR 0 9
43549: NOT
43550: IFFALSE 43554
// continue ;
43552: GO 43527
// if weapon in weapons then
43554: LD_VAR 0 8
43558: PUSH
43559: LD_VAR 0 9
43563: IN
43564: IFFALSE 43591
// begin result := [ i , weapon ] ;
43566: LD_ADDR_VAR 0 3
43570: PUSH
43571: LD_VAR 0 4
43575: PUSH
43576: LD_VAR 0 8
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: ST_TO_ADDR
// exit ;
43585: POP
43586: POP
43587: POP
43588: POP
43589: GO 43599
// end ; end ;
43591: GO 43527
43593: POP
43594: POP
// end ;
43595: GO 43413
43597: POP
43598: POP
// end ;
43599: LD_VAR 0 3
43603: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
43604: LD_INT 0
43606: PPUSH
// if not side or side > 8 then
43607: LD_VAR 0 3
43611: NOT
43612: PUSH
43613: LD_VAR 0 3
43617: PUSH
43618: LD_INT 8
43620: GREATER
43621: OR
43622: IFFALSE 43626
// exit ;
43624: GO 43685
// if not range then
43626: LD_VAR 0 4
43630: NOT
43631: IFFALSE 43642
// range := - 12 ;
43633: LD_ADDR_VAR 0 4
43637: PUSH
43638: LD_INT 12
43640: NEG
43641: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
43642: LD_VAR 0 1
43646: PPUSH
43647: LD_VAR 0 2
43651: PPUSH
43652: LD_VAR 0 3
43656: PPUSH
43657: LD_VAR 0 4
43661: PPUSH
43662: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
43666: LD_VAR 0 1
43670: PPUSH
43671: LD_VAR 0 2
43675: PPUSH
43676: LD_VAR 0 3
43680: PPUSH
43681: CALL_OW 331
// end ;
43685: LD_VAR 0 5
43689: RET
// export function Video ( mode ) ; begin
43690: LD_INT 0
43692: PPUSH
// ingame_video = mode ;
43693: LD_ADDR_OWVAR 52
43697: PUSH
43698: LD_VAR 0 1
43702: ST_TO_ADDR
// interface_hidden = mode ;
43703: LD_ADDR_OWVAR 54
43707: PUSH
43708: LD_VAR 0 1
43712: ST_TO_ADDR
// end ;
43713: LD_VAR 0 2
43717: RET
// export function Join ( array , element ) ; begin
43718: LD_INT 0
43720: PPUSH
// result := Replace ( array , array + 1 , element ) ;
43721: LD_ADDR_VAR 0 3
43725: PUSH
43726: LD_VAR 0 1
43730: PPUSH
43731: LD_VAR 0 1
43735: PUSH
43736: LD_INT 1
43738: PLUS
43739: PPUSH
43740: LD_VAR 0 2
43744: PPUSH
43745: CALL_OW 1
43749: ST_TO_ADDR
// end ;
43750: LD_VAR 0 3
43754: RET
// export function JoinUnion ( array , element ) ; begin
43755: LD_INT 0
43757: PPUSH
// result := array union element ;
43758: LD_ADDR_VAR 0 3
43762: PUSH
43763: LD_VAR 0 1
43767: PUSH
43768: LD_VAR 0 2
43772: UNION
43773: ST_TO_ADDR
// end ;
43774: LD_VAR 0 3
43778: RET
// export function GetBehemoths ( side ) ; begin
43779: LD_INT 0
43781: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
43782: LD_ADDR_VAR 0 2
43786: PUSH
43787: LD_INT 22
43789: PUSH
43790: LD_VAR 0 1
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 31
43801: PUSH
43802: LD_INT 25
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PPUSH
43813: CALL_OW 69
43817: ST_TO_ADDR
// end ;
43818: LD_VAR 0 2
43822: RET
// export function Shuffle ( array ) ; var i , index ; begin
43823: LD_INT 0
43825: PPUSH
43826: PPUSH
43827: PPUSH
// result := [ ] ;
43828: LD_ADDR_VAR 0 2
43832: PUSH
43833: EMPTY
43834: ST_TO_ADDR
// if not array then
43835: LD_VAR 0 1
43839: NOT
43840: IFFALSE 43844
// exit ;
43842: GO 43943
// Randomize ;
43844: CALL_OW 10
// for i = array downto 1 do
43848: LD_ADDR_VAR 0 3
43852: PUSH
43853: DOUBLE
43854: LD_VAR 0 1
43858: INC
43859: ST_TO_ADDR
43860: LD_INT 1
43862: PUSH
43863: FOR_DOWNTO
43864: IFFALSE 43941
// begin index := rand ( 1 , array ) ;
43866: LD_ADDR_VAR 0 4
43870: PUSH
43871: LD_INT 1
43873: PPUSH
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 12
43883: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43884: LD_ADDR_VAR 0 2
43888: PUSH
43889: LD_VAR 0 2
43893: PPUSH
43894: LD_VAR 0 2
43898: PUSH
43899: LD_INT 1
43901: PLUS
43902: PPUSH
43903: LD_VAR 0 1
43907: PUSH
43908: LD_VAR 0 4
43912: ARRAY
43913: PPUSH
43914: CALL_OW 2
43918: ST_TO_ADDR
// array := Delete ( array , index ) ;
43919: LD_ADDR_VAR 0 1
43923: PUSH
43924: LD_VAR 0 1
43928: PPUSH
43929: LD_VAR 0 4
43933: PPUSH
43934: CALL_OW 3
43938: ST_TO_ADDR
// end ;
43939: GO 43863
43941: POP
43942: POP
// end ;
43943: LD_VAR 0 2
43947: RET
// export function GetBaseMaterials ( base ) ; begin
43948: LD_INT 0
43950: PPUSH
// result := [ 0 , 0 , 0 ] ;
43951: LD_ADDR_VAR 0 2
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: LIST
43969: ST_TO_ADDR
// if not base then
43970: LD_VAR 0 1
43974: NOT
43975: IFFALSE 43979
// exit ;
43977: GO 44028
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
43979: LD_ADDR_VAR 0 2
43983: PUSH
43984: LD_VAR 0 1
43988: PPUSH
43989: LD_INT 1
43991: PPUSH
43992: CALL_OW 275
43996: PUSH
43997: LD_VAR 0 1
44001: PPUSH
44002: LD_INT 2
44004: PPUSH
44005: CALL_OW 275
44009: PUSH
44010: LD_VAR 0 1
44014: PPUSH
44015: LD_INT 3
44017: PPUSH
44018: CALL_OW 275
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: ST_TO_ADDR
// end ;
44028: LD_VAR 0 2
44032: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44033: LD_INT 0
44035: PPUSH
44036: PPUSH
// result := array ;
44037: LD_ADDR_VAR 0 3
44041: PUSH
44042: LD_VAR 0 1
44046: ST_TO_ADDR
// if size >= result then
44047: LD_VAR 0 2
44051: PUSH
44052: LD_VAR 0 3
44056: GREATEREQUAL
44057: IFFALSE 44061
// exit ;
44059: GO 44111
// if size then
44061: LD_VAR 0 2
44065: IFFALSE 44111
// for i := array downto size do
44067: LD_ADDR_VAR 0 4
44071: PUSH
44072: DOUBLE
44073: LD_VAR 0 1
44077: INC
44078: ST_TO_ADDR
44079: LD_VAR 0 2
44083: PUSH
44084: FOR_DOWNTO
44085: IFFALSE 44109
// result := Delete ( result , result ) ;
44087: LD_ADDR_VAR 0 3
44091: PUSH
44092: LD_VAR 0 3
44096: PPUSH
44097: LD_VAR 0 3
44101: PPUSH
44102: CALL_OW 3
44106: ST_TO_ADDR
44107: GO 44084
44109: POP
44110: POP
// end ;
44111: LD_VAR 0 3
44115: RET
// export function ComExit ( unit ) ; var tmp ; begin
44116: LD_INT 0
44118: PPUSH
44119: PPUSH
// if not IsInUnit ( unit ) then
44120: LD_VAR 0 1
44124: PPUSH
44125: CALL_OW 310
44129: NOT
44130: IFFALSE 44134
// exit ;
44132: GO 44194
// tmp := IsInUnit ( unit ) ;
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_VAR 0 1
44143: PPUSH
44144: CALL_OW 310
44148: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44149: LD_VAR 0 3
44153: PPUSH
44154: CALL_OW 247
44158: PUSH
44159: LD_INT 2
44161: EQUAL
44162: IFFALSE 44175
// ComExitVehicle ( unit ) else
44164: LD_VAR 0 1
44168: PPUSH
44169: CALL_OW 121
44173: GO 44184
// ComExitBuilding ( unit ) ;
44175: LD_VAR 0 1
44179: PPUSH
44180: CALL_OW 122
// result := tmp ;
44184: LD_ADDR_VAR 0 2
44188: PUSH
44189: LD_VAR 0 3
44193: ST_TO_ADDR
// end ;
44194: LD_VAR 0 2
44198: RET
// export function ComExitAll ( units ) ; var i ; begin
44199: LD_INT 0
44201: PPUSH
44202: PPUSH
// if not units then
44203: LD_VAR 0 1
44207: NOT
44208: IFFALSE 44212
// exit ;
44210: GO 44238
// for i in units do
44212: LD_ADDR_VAR 0 3
44216: PUSH
44217: LD_VAR 0 1
44221: PUSH
44222: FOR_IN
44223: IFFALSE 44236
// ComExit ( i ) ;
44225: LD_VAR 0 3
44229: PPUSH
44230: CALL 44116 0 1
44234: GO 44222
44236: POP
44237: POP
// end ;
44238: LD_VAR 0 2
44242: RET
// export function ResetHc ; begin
44243: LD_INT 0
44245: PPUSH
// InitHc ;
44246: CALL_OW 19
// hc_importance := 0 ;
44250: LD_ADDR_OWVAR 32
44254: PUSH
44255: LD_INT 0
44257: ST_TO_ADDR
// end ;
44258: LD_VAR 0 1
44262: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44263: LD_INT 0
44265: PPUSH
44266: PPUSH
44267: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44268: LD_ADDR_VAR 0 6
44272: PUSH
44273: LD_VAR 0 1
44277: PUSH
44278: LD_VAR 0 3
44282: PLUS
44283: PUSH
44284: LD_INT 2
44286: DIV
44287: ST_TO_ADDR
// if _x < 0 then
44288: LD_VAR 0 6
44292: PUSH
44293: LD_INT 0
44295: LESS
44296: IFFALSE 44313
// _x := _x * - 1 ;
44298: LD_ADDR_VAR 0 6
44302: PUSH
44303: LD_VAR 0 6
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: MUL
44312: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44313: LD_ADDR_VAR 0 7
44317: PUSH
44318: LD_VAR 0 2
44322: PUSH
44323: LD_VAR 0 4
44327: PLUS
44328: PUSH
44329: LD_INT 2
44331: DIV
44332: ST_TO_ADDR
// if _y < 0 then
44333: LD_VAR 0 7
44337: PUSH
44338: LD_INT 0
44340: LESS
44341: IFFALSE 44358
// _y := _y * - 1 ;
44343: LD_ADDR_VAR 0 7
44347: PUSH
44348: LD_VAR 0 7
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: MUL
44357: ST_TO_ADDR
// result := [ _x , _y ] ;
44358: LD_ADDR_VAR 0 5
44362: PUSH
44363: LD_VAR 0 6
44367: PUSH
44368: LD_VAR 0 7
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: ST_TO_ADDR
// end ;
44377: LD_VAR 0 5
44381: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44382: LD_INT 0
44384: PPUSH
44385: PPUSH
44386: PPUSH
44387: PPUSH
// task := GetTaskList ( unit ) ;
44388: LD_ADDR_VAR 0 7
44392: PUSH
44393: LD_VAR 0 1
44397: PPUSH
44398: CALL_OW 437
44402: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44403: LD_VAR 0 7
44407: NOT
44408: PUSH
44409: LD_VAR 0 1
44413: PPUSH
44414: LD_VAR 0 2
44418: PPUSH
44419: CALL_OW 308
44423: NOT
44424: AND
44425: IFFALSE 44429
// exit ;
44427: GO 44547
// if IsInArea ( unit , area ) then
44429: LD_VAR 0 1
44433: PPUSH
44434: LD_VAR 0 2
44438: PPUSH
44439: CALL_OW 308
44443: IFFALSE 44461
// begin ComMoveToArea ( unit , goAway ) ;
44445: LD_VAR 0 1
44449: PPUSH
44450: LD_VAR 0 3
44454: PPUSH
44455: CALL_OW 113
// exit ;
44459: GO 44547
// end ; if task [ 1 ] [ 1 ] <> M then
44461: LD_VAR 0 7
44465: PUSH
44466: LD_INT 1
44468: ARRAY
44469: PUSH
44470: LD_INT 1
44472: ARRAY
44473: PUSH
44474: LD_STRING M
44476: NONEQUAL
44477: IFFALSE 44481
// exit ;
44479: GO 44547
// x := task [ 1 ] [ 2 ] ;
44481: LD_ADDR_VAR 0 5
44485: PUSH
44486: LD_VAR 0 7
44490: PUSH
44491: LD_INT 1
44493: ARRAY
44494: PUSH
44495: LD_INT 2
44497: ARRAY
44498: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44499: LD_ADDR_VAR 0 6
44503: PUSH
44504: LD_VAR 0 7
44508: PUSH
44509: LD_INT 1
44511: ARRAY
44512: PUSH
44513: LD_INT 3
44515: ARRAY
44516: ST_TO_ADDR
// if InArea ( x , y , area ) then
44517: LD_VAR 0 5
44521: PPUSH
44522: LD_VAR 0 6
44526: PPUSH
44527: LD_VAR 0 2
44531: PPUSH
44532: CALL_OW 309
44536: IFFALSE 44547
// ComStop ( unit ) ;
44538: LD_VAR 0 1
44542: PPUSH
44543: CALL_OW 141
// end ;
44547: LD_VAR 0 4
44551: RET
// export function Abs ( value ) ; begin
44552: LD_INT 0
44554: PPUSH
// result := value ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: LD_VAR 0 1
44564: ST_TO_ADDR
// if value < 0 then
44565: LD_VAR 0 1
44569: PUSH
44570: LD_INT 0
44572: LESS
44573: IFFALSE 44590
// result := value * - 1 ;
44575: LD_ADDR_VAR 0 2
44579: PUSH
44580: LD_VAR 0 1
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: MUL
44589: ST_TO_ADDR
// end ;
44590: LD_VAR 0 2
44594: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44595: LD_INT 0
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
// if not unit or not building then
44605: LD_VAR 0 1
44609: NOT
44610: PUSH
44611: LD_VAR 0 2
44615: NOT
44616: OR
44617: IFFALSE 44621
// exit ;
44619: GO 44847
// x := GetX ( building ) ;
44621: LD_ADDR_VAR 0 4
44625: PUSH
44626: LD_VAR 0 2
44630: PPUSH
44631: CALL_OW 250
44635: ST_TO_ADDR
// y := GetY ( building ) ;
44636: LD_ADDR_VAR 0 6
44640: PUSH
44641: LD_VAR 0 2
44645: PPUSH
44646: CALL_OW 251
44650: ST_TO_ADDR
// d := GetDir ( building ) ;
44651: LD_ADDR_VAR 0 8
44655: PUSH
44656: LD_VAR 0 2
44660: PPUSH
44661: CALL_OW 254
44665: ST_TO_ADDR
// r := 4 ;
44666: LD_ADDR_VAR 0 9
44670: PUSH
44671: LD_INT 4
44673: ST_TO_ADDR
// for i := 1 to 5 do
44674: LD_ADDR_VAR 0 10
44678: PUSH
44679: DOUBLE
44680: LD_INT 1
44682: DEC
44683: ST_TO_ADDR
44684: LD_INT 5
44686: PUSH
44687: FOR_TO
44688: IFFALSE 44845
// begin _x := ShiftX ( x , d , r + i ) ;
44690: LD_ADDR_VAR 0 5
44694: PUSH
44695: LD_VAR 0 4
44699: PPUSH
44700: LD_VAR 0 8
44704: PPUSH
44705: LD_VAR 0 9
44709: PUSH
44710: LD_VAR 0 10
44714: PLUS
44715: PPUSH
44716: CALL_OW 272
44720: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
44721: LD_ADDR_VAR 0 7
44725: PUSH
44726: LD_VAR 0 6
44730: PPUSH
44731: LD_VAR 0 8
44735: PPUSH
44736: LD_VAR 0 9
44740: PUSH
44741: LD_VAR 0 10
44745: PLUS
44746: PPUSH
44747: CALL_OW 273
44751: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
44752: LD_VAR 0 5
44756: PPUSH
44757: LD_VAR 0 7
44761: PPUSH
44762: CALL_OW 488
44766: PUSH
44767: LD_VAR 0 5
44771: PPUSH
44772: LD_VAR 0 7
44776: PPUSH
44777: CALL_OW 428
44781: PPUSH
44782: CALL_OW 247
44786: PUSH
44787: LD_INT 3
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: IN
44797: NOT
44798: AND
44799: IFFALSE 44843
// begin ComMoveXY ( unit , _x , _y ) ;
44801: LD_VAR 0 1
44805: PPUSH
44806: LD_VAR 0 5
44810: PPUSH
44811: LD_VAR 0 7
44815: PPUSH
44816: CALL_OW 111
// result := [ _x , _y ] ;
44820: LD_ADDR_VAR 0 3
44824: PUSH
44825: LD_VAR 0 5
44829: PUSH
44830: LD_VAR 0 7
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: ST_TO_ADDR
// exit ;
44839: POP
44840: POP
44841: GO 44847
// end ; end ;
44843: GO 44687
44845: POP
44846: POP
// end ;
44847: LD_VAR 0 3
44851: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44852: LD_INT 0
44854: PPUSH
44855: PPUSH
44856: PPUSH
// result := 0 ;
44857: LD_ADDR_VAR 0 3
44861: PUSH
44862: LD_INT 0
44864: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44865: LD_VAR 0 1
44869: PUSH
44870: LD_INT 0
44872: LESS
44873: PUSH
44874: LD_VAR 0 1
44878: PUSH
44879: LD_INT 8
44881: GREATER
44882: OR
44883: PUSH
44884: LD_VAR 0 2
44888: PUSH
44889: LD_INT 0
44891: LESS
44892: OR
44893: PUSH
44894: LD_VAR 0 2
44898: PUSH
44899: LD_INT 8
44901: GREATER
44902: OR
44903: IFFALSE 44907
// exit ;
44905: GO 44982
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
44907: LD_ADDR_VAR 0 4
44911: PUSH
44912: LD_INT 22
44914: PUSH
44915: LD_VAR 0 2
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PPUSH
44924: CALL_OW 69
44928: PUSH
44929: FOR_IN
44930: IFFALSE 44980
// begin un := UnitShoot ( i ) ;
44932: LD_ADDR_VAR 0 5
44936: PUSH
44937: LD_VAR 0 4
44941: PPUSH
44942: CALL_OW 504
44946: ST_TO_ADDR
// if GetSide ( un ) = side1 then
44947: LD_VAR 0 5
44951: PPUSH
44952: CALL_OW 255
44956: PUSH
44957: LD_VAR 0 1
44961: EQUAL
44962: IFFALSE 44978
// begin result := un ;
44964: LD_ADDR_VAR 0 3
44968: PUSH
44969: LD_VAR 0 5
44973: ST_TO_ADDR
// exit ;
44974: POP
44975: POP
44976: GO 44982
// end ; end ;
44978: GO 44929
44980: POP
44981: POP
// end ;
44982: LD_VAR 0 3
44986: RET
// export function GetCargoBay ( units ) ; begin
44987: LD_INT 0
44989: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
44990: LD_ADDR_VAR 0 2
44994: PUSH
44995: LD_VAR 0 1
44999: PPUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 34
45005: PUSH
45006: LD_INT 12
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 34
45015: PUSH
45016: LD_INT 51
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: LD_INT 34
45025: PUSH
45026: LD_INT 32
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 34
45035: PUSH
45036: LD_INT 89
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: PPUSH
45050: CALL_OW 72
45054: ST_TO_ADDR
// end ;
45055: LD_VAR 0 2
45059: RET
// export function Negate ( value ) ; begin
45060: LD_INT 0
45062: PPUSH
// result := not value ;
45063: LD_ADDR_VAR 0 2
45067: PUSH
45068: LD_VAR 0 1
45072: NOT
45073: ST_TO_ADDR
// end ;
45074: LD_VAR 0 2
45078: RET
// export function Inc ( value ) ; begin
45079: LD_INT 0
45081: PPUSH
// result := value + 1 ;
45082: LD_ADDR_VAR 0 2
45086: PUSH
45087: LD_VAR 0 1
45091: PUSH
45092: LD_INT 1
45094: PLUS
45095: ST_TO_ADDR
// end ;
45096: LD_VAR 0 2
45100: RET
// export function Dec ( value ) ; begin
45101: LD_INT 0
45103: PPUSH
// result := value - 1 ;
45104: LD_ADDR_VAR 0 2
45108: PUSH
45109: LD_VAR 0 1
45113: PUSH
45114: LD_INT 1
45116: MINUS
45117: ST_TO_ADDR
// end ;
45118: LD_VAR 0 2
45122: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45123: LD_INT 0
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
45132: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45133: LD_VAR 0 1
45137: PPUSH
45138: LD_VAR 0 2
45142: PPUSH
45143: CALL_OW 488
45147: NOT
45148: PUSH
45149: LD_VAR 0 3
45153: PPUSH
45154: LD_VAR 0 4
45158: PPUSH
45159: CALL_OW 488
45163: NOT
45164: OR
45165: IFFALSE 45178
// begin result := - 1 ;
45167: LD_ADDR_VAR 0 5
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: ST_TO_ADDR
// exit ;
45176: GO 45413
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45178: LD_ADDR_VAR 0 12
45182: PUSH
45183: LD_VAR 0 1
45187: PPUSH
45188: LD_VAR 0 2
45192: PPUSH
45193: LD_VAR 0 3
45197: PPUSH
45198: LD_VAR 0 4
45202: PPUSH
45203: CALL 44263 0 4
45207: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45208: LD_ADDR_VAR 0 11
45212: PUSH
45213: LD_VAR 0 1
45217: PPUSH
45218: LD_VAR 0 2
45222: PPUSH
45223: LD_VAR 0 12
45227: PUSH
45228: LD_INT 1
45230: ARRAY
45231: PPUSH
45232: LD_VAR 0 12
45236: PUSH
45237: LD_INT 2
45239: ARRAY
45240: PPUSH
45241: CALL_OW 298
45245: ST_TO_ADDR
// distance := 9999 ;
45246: LD_ADDR_VAR 0 10
45250: PUSH
45251: LD_INT 9999
45253: ST_TO_ADDR
// for i := 0 to 5 do
45254: LD_ADDR_VAR 0 6
45258: PUSH
45259: DOUBLE
45260: LD_INT 0
45262: DEC
45263: ST_TO_ADDR
45264: LD_INT 5
45266: PUSH
45267: FOR_TO
45268: IFFALSE 45411
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45270: LD_ADDR_VAR 0 7
45274: PUSH
45275: LD_VAR 0 1
45279: PPUSH
45280: LD_VAR 0 6
45284: PPUSH
45285: LD_VAR 0 11
45289: PPUSH
45290: CALL_OW 272
45294: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45295: LD_ADDR_VAR 0 8
45299: PUSH
45300: LD_VAR 0 2
45304: PPUSH
45305: LD_VAR 0 6
45309: PPUSH
45310: LD_VAR 0 11
45314: PPUSH
45315: CALL_OW 273
45319: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45320: LD_VAR 0 7
45324: PPUSH
45325: LD_VAR 0 8
45329: PPUSH
45330: CALL_OW 488
45334: NOT
45335: IFFALSE 45339
// continue ;
45337: GO 45267
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45339: LD_ADDR_VAR 0 9
45343: PUSH
45344: LD_VAR 0 12
45348: PUSH
45349: LD_INT 1
45351: ARRAY
45352: PPUSH
45353: LD_VAR 0 12
45357: PUSH
45358: LD_INT 2
45360: ARRAY
45361: PPUSH
45362: LD_VAR 0 7
45366: PPUSH
45367: LD_VAR 0 8
45371: PPUSH
45372: CALL_OW 298
45376: ST_TO_ADDR
// if tmp < distance then
45377: LD_VAR 0 9
45381: PUSH
45382: LD_VAR 0 10
45386: LESS
45387: IFFALSE 45409
// begin result := i ;
45389: LD_ADDR_VAR 0 5
45393: PUSH
45394: LD_VAR 0 6
45398: ST_TO_ADDR
// distance := tmp ;
45399: LD_ADDR_VAR 0 10
45403: PUSH
45404: LD_VAR 0 9
45408: ST_TO_ADDR
// end ; end ;
45409: GO 45267
45411: POP
45412: POP
// end ;
45413: LD_VAR 0 5
45417: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45418: LD_INT 0
45420: PPUSH
45421: PPUSH
// if not driver or not IsInUnit ( driver ) then
45422: LD_VAR 0 1
45426: NOT
45427: PUSH
45428: LD_VAR 0 1
45432: PPUSH
45433: CALL_OW 310
45437: NOT
45438: OR
45439: IFFALSE 45443
// exit ;
45441: GO 45533
// vehicle := IsInUnit ( driver ) ;
45443: LD_ADDR_VAR 0 3
45447: PUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: CALL_OW 310
45457: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45458: LD_VAR 0 1
45462: PPUSH
45463: LD_STRING \
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 0
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: PUSH
45493: LD_STRING E
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: LD_VAR 0 3
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: LD_INT 0
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PPUSH
45529: CALL_OW 446
// end ;
45533: LD_VAR 0 2
45537: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45538: LD_INT 0
45540: PPUSH
45541: PPUSH
// if not driver or not IsInUnit ( driver ) then
45542: LD_VAR 0 1
45546: NOT
45547: PUSH
45548: LD_VAR 0 1
45552: PPUSH
45553: CALL_OW 310
45557: NOT
45558: OR
45559: IFFALSE 45563
// exit ;
45561: GO 45653
// vehicle := IsInUnit ( driver ) ;
45563: LD_ADDR_VAR 0 3
45567: PUSH
45568: LD_VAR 0 1
45572: PPUSH
45573: CALL_OW 310
45577: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45578: LD_VAR 0 1
45582: PPUSH
45583: LD_STRING \
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: PUSH
45613: LD_STRING E
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_VAR 0 3
45626: PUSH
45627: LD_INT 0
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PPUSH
45649: CALL_OW 447
// end ;
45653: LD_VAR 0 2
45657: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
45658: LD_INT 0
45660: PPUSH
45661: PPUSH
45662: PPUSH
// tmp := [ ] ;
45663: LD_ADDR_VAR 0 5
45667: PUSH
45668: EMPTY
45669: ST_TO_ADDR
// for i in units do
45670: LD_ADDR_VAR 0 4
45674: PUSH
45675: LD_VAR 0 1
45679: PUSH
45680: FOR_IN
45681: IFFALSE 45719
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
45683: LD_ADDR_VAR 0 5
45687: PUSH
45688: LD_VAR 0 5
45692: PPUSH
45693: LD_VAR 0 5
45697: PUSH
45698: LD_INT 1
45700: PLUS
45701: PPUSH
45702: LD_VAR 0 4
45706: PPUSH
45707: CALL_OW 256
45711: PPUSH
45712: CALL_OW 2
45716: ST_TO_ADDR
45717: GO 45680
45719: POP
45720: POP
// if not tmp then
45721: LD_VAR 0 5
45725: NOT
45726: IFFALSE 45730
// exit ;
45728: GO 45778
// if asc then
45730: LD_VAR 0 2
45734: IFFALSE 45758
// result := SortListByListAsc ( units , tmp ) else
45736: LD_ADDR_VAR 0 3
45740: PUSH
45741: LD_VAR 0 1
45745: PPUSH
45746: LD_VAR 0 5
45750: PPUSH
45751: CALL_OW 76
45755: ST_TO_ADDR
45756: GO 45778
// result := SortListByListDesc ( units , tmp ) ;
45758: LD_ADDR_VAR 0 3
45762: PUSH
45763: LD_VAR 0 1
45767: PPUSH
45768: LD_VAR 0 5
45772: PPUSH
45773: CALL_OW 77
45777: ST_TO_ADDR
// end ;
45778: LD_VAR 0 3
45782: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45783: LD_INT 0
45785: PPUSH
45786: PPUSH
// task := GetTaskList ( mech ) ;
45787: LD_ADDR_VAR 0 4
45791: PUSH
45792: LD_VAR 0 1
45796: PPUSH
45797: CALL_OW 437
45801: ST_TO_ADDR
// if not task then
45802: LD_VAR 0 4
45806: NOT
45807: IFFALSE 45811
// exit ;
45809: GO 45853
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45811: LD_ADDR_VAR 0 3
45815: PUSH
45816: LD_VAR 0 4
45820: PUSH
45821: LD_INT 1
45823: ARRAY
45824: PUSH
45825: LD_INT 1
45827: ARRAY
45828: PUSH
45829: LD_STRING r
45831: EQUAL
45832: PUSH
45833: LD_VAR 0 4
45837: PUSH
45838: LD_INT 1
45840: ARRAY
45841: PUSH
45842: LD_INT 4
45844: ARRAY
45845: PUSH
45846: LD_VAR 0 2
45850: EQUAL
45851: AND
45852: ST_TO_ADDR
// end ;
45853: LD_VAR 0 3
45857: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45858: LD_INT 0
45860: PPUSH
// SetDir ( unit , d ) ;
45861: LD_VAR 0 1
45865: PPUSH
45866: LD_VAR 0 4
45870: PPUSH
45871: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
45875: LD_VAR 0 1
45879: PPUSH
45880: LD_VAR 0 2
45884: PPUSH
45885: LD_VAR 0 3
45889: PPUSH
45890: LD_VAR 0 5
45894: PPUSH
45895: CALL_OW 48
// end ;
45899: LD_VAR 0 6
45903: RET
// export function ToNaturalNumber ( number ) ; begin
45904: LD_INT 0
45906: PPUSH
// result := number div 1 ;
45907: LD_ADDR_VAR 0 2
45911: PUSH
45912: LD_VAR 0 1
45916: PUSH
45917: LD_INT 1
45919: DIV
45920: ST_TO_ADDR
// if number < 0 then
45921: LD_VAR 0 1
45925: PUSH
45926: LD_INT 0
45928: LESS
45929: IFFALSE 45939
// result := 0 ;
45931: LD_ADDR_VAR 0 2
45935: PUSH
45936: LD_INT 0
45938: ST_TO_ADDR
// end ;
45939: LD_VAR 0 2
45943: RET
// export function SortByClass ( units , class ) ; var un ; begin
45944: LD_INT 0
45946: PPUSH
45947: PPUSH
// if not units or not class then
45948: LD_VAR 0 1
45952: NOT
45953: PUSH
45954: LD_VAR 0 2
45958: NOT
45959: OR
45960: IFFALSE 45964
// exit ;
45962: GO 46059
// result := [ ] ;
45964: LD_ADDR_VAR 0 3
45968: PUSH
45969: EMPTY
45970: ST_TO_ADDR
// for un in units do
45971: LD_ADDR_VAR 0 4
45975: PUSH
45976: LD_VAR 0 1
45980: PUSH
45981: FOR_IN
45982: IFFALSE 46057
// if GetClass ( un ) = class then
45984: LD_VAR 0 4
45988: PPUSH
45989: CALL_OW 257
45993: PUSH
45994: LD_VAR 0 2
45998: EQUAL
45999: IFFALSE 46026
// result := Insert ( result , 1 , un ) else
46001: LD_ADDR_VAR 0 3
46005: PUSH
46006: LD_VAR 0 3
46010: PPUSH
46011: LD_INT 1
46013: PPUSH
46014: LD_VAR 0 4
46018: PPUSH
46019: CALL_OW 2
46023: ST_TO_ADDR
46024: GO 46055
// result := Replace ( result , result + 1 , un ) ;
46026: LD_ADDR_VAR 0 3
46030: PUSH
46031: LD_VAR 0 3
46035: PPUSH
46036: LD_VAR 0 3
46040: PUSH
46041: LD_INT 1
46043: PLUS
46044: PPUSH
46045: LD_VAR 0 4
46049: PPUSH
46050: CALL_OW 1
46054: ST_TO_ADDR
46055: GO 45981
46057: POP
46058: POP
// end ;
46059: LD_VAR 0 3
46063: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46064: LD_INT 0
46066: PPUSH
46067: PPUSH
46068: PPUSH
46069: PPUSH
46070: PPUSH
46071: PPUSH
46072: PPUSH
// result := [ ] ;
46073: LD_ADDR_VAR 0 4
46077: PUSH
46078: EMPTY
46079: ST_TO_ADDR
// if x - r < 0 then
46080: LD_VAR 0 1
46084: PUSH
46085: LD_VAR 0 3
46089: MINUS
46090: PUSH
46091: LD_INT 0
46093: LESS
46094: IFFALSE 46106
// min_x := 0 else
46096: LD_ADDR_VAR 0 8
46100: PUSH
46101: LD_INT 0
46103: ST_TO_ADDR
46104: GO 46122
// min_x := x - r ;
46106: LD_ADDR_VAR 0 8
46110: PUSH
46111: LD_VAR 0 1
46115: PUSH
46116: LD_VAR 0 3
46120: MINUS
46121: ST_TO_ADDR
// if y - r < 0 then
46122: LD_VAR 0 2
46126: PUSH
46127: LD_VAR 0 3
46131: MINUS
46132: PUSH
46133: LD_INT 0
46135: LESS
46136: IFFALSE 46148
// min_y := 0 else
46138: LD_ADDR_VAR 0 7
46142: PUSH
46143: LD_INT 0
46145: ST_TO_ADDR
46146: GO 46164
// min_y := y - r ;
46148: LD_ADDR_VAR 0 7
46152: PUSH
46153: LD_VAR 0 2
46157: PUSH
46158: LD_VAR 0 3
46162: MINUS
46163: ST_TO_ADDR
// max_x := x + r ;
46164: LD_ADDR_VAR 0 9
46168: PUSH
46169: LD_VAR 0 1
46173: PUSH
46174: LD_VAR 0 3
46178: PLUS
46179: ST_TO_ADDR
// max_y := y + r ;
46180: LD_ADDR_VAR 0 10
46184: PUSH
46185: LD_VAR 0 2
46189: PUSH
46190: LD_VAR 0 3
46194: PLUS
46195: ST_TO_ADDR
// for _x = min_x to max_x do
46196: LD_ADDR_VAR 0 5
46200: PUSH
46201: DOUBLE
46202: LD_VAR 0 8
46206: DEC
46207: ST_TO_ADDR
46208: LD_VAR 0 9
46212: PUSH
46213: FOR_TO
46214: IFFALSE 46315
// for _y = min_y to max_y do
46216: LD_ADDR_VAR 0 6
46220: PUSH
46221: DOUBLE
46222: LD_VAR 0 7
46226: DEC
46227: ST_TO_ADDR
46228: LD_VAR 0 10
46232: PUSH
46233: FOR_TO
46234: IFFALSE 46311
// begin if not ValidHex ( _x , _y ) then
46236: LD_VAR 0 5
46240: PPUSH
46241: LD_VAR 0 6
46245: PPUSH
46246: CALL_OW 488
46250: NOT
46251: IFFALSE 46255
// continue ;
46253: GO 46233
// if GetResourceTypeXY ( _x , _y ) then
46255: LD_VAR 0 5
46259: PPUSH
46260: LD_VAR 0 6
46264: PPUSH
46265: CALL_OW 283
46269: IFFALSE 46309
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46271: LD_ADDR_VAR 0 4
46275: PUSH
46276: LD_VAR 0 4
46280: PPUSH
46281: LD_VAR 0 4
46285: PUSH
46286: LD_INT 1
46288: PLUS
46289: PPUSH
46290: LD_VAR 0 5
46294: PUSH
46295: LD_VAR 0 6
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PPUSH
46304: CALL_OW 1
46308: ST_TO_ADDR
// end ;
46309: GO 46233
46311: POP
46312: POP
46313: GO 46213
46315: POP
46316: POP
// end ;
46317: LD_VAR 0 4
46321: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46322: LD_INT 0
46324: PPUSH
46325: PPUSH
46326: PPUSH
46327: PPUSH
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
// if not units then
46332: LD_VAR 0 1
46336: NOT
46337: IFFALSE 46341
// exit ;
46339: GO 46865
// result := UnitFilter ( units , [ f_ok ] ) ;
46341: LD_ADDR_VAR 0 3
46345: PUSH
46346: LD_VAR 0 1
46350: PPUSH
46351: LD_INT 50
46353: PUSH
46354: EMPTY
46355: LIST
46356: PPUSH
46357: CALL_OW 72
46361: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46362: LD_ADDR_VAR 0 8
46366: PUSH
46367: LD_VAR 0 1
46371: PUSH
46372: LD_INT 1
46374: ARRAY
46375: PPUSH
46376: CALL_OW 255
46380: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46381: LD_ADDR_VAR 0 10
46385: PUSH
46386: LD_INT 29
46388: PUSH
46389: LD_INT 91
46391: PUSH
46392: LD_INT 49
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: ST_TO_ADDR
// if not result then
46400: LD_VAR 0 3
46404: NOT
46405: IFFALSE 46409
// exit ;
46407: GO 46865
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46409: LD_ADDR_VAR 0 5
46413: PUSH
46414: LD_INT 81
46416: PUSH
46417: LD_VAR 0 8
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PPUSH
46426: CALL_OW 69
46430: ST_TO_ADDR
// for i in result do
46431: LD_ADDR_VAR 0 4
46435: PUSH
46436: LD_VAR 0 3
46440: PUSH
46441: FOR_IN
46442: IFFALSE 46863
// begin tag := GetTag ( i ) + 1 ;
46444: LD_ADDR_VAR 0 9
46448: PUSH
46449: LD_VAR 0 4
46453: PPUSH
46454: CALL_OW 110
46458: PUSH
46459: LD_INT 1
46461: PLUS
46462: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46463: LD_ADDR_VAR 0 7
46467: PUSH
46468: LD_VAR 0 4
46472: PPUSH
46473: CALL_OW 250
46477: PPUSH
46478: LD_VAR 0 4
46482: PPUSH
46483: CALL_OW 251
46487: PPUSH
46488: LD_INT 6
46490: PPUSH
46491: CALL 46064 0 3
46495: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46496: LD_VAR 0 4
46500: PPUSH
46501: CALL_OW 247
46505: PUSH
46506: LD_INT 2
46508: EQUAL
46509: PUSH
46510: LD_VAR 0 7
46514: AND
46515: PUSH
46516: LD_VAR 0 4
46520: PPUSH
46521: CALL_OW 264
46525: PUSH
46526: LD_VAR 0 10
46530: IN
46531: NOT
46532: AND
46533: IFFALSE 46572
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46535: LD_VAR 0 4
46539: PPUSH
46540: LD_VAR 0 7
46544: PUSH
46545: LD_INT 1
46547: ARRAY
46548: PUSH
46549: LD_INT 1
46551: ARRAY
46552: PPUSH
46553: LD_VAR 0 7
46557: PUSH
46558: LD_INT 1
46560: ARRAY
46561: PUSH
46562: LD_INT 2
46564: ARRAY
46565: PPUSH
46566: CALL_OW 116
46570: GO 46861
// if path > tag then
46572: LD_VAR 0 2
46576: PUSH
46577: LD_VAR 0 9
46581: GREATER
46582: IFFALSE 46790
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46584: LD_ADDR_VAR 0 6
46588: PUSH
46589: LD_VAR 0 5
46593: PPUSH
46594: LD_INT 91
46596: PUSH
46597: LD_VAR 0 4
46601: PUSH
46602: LD_INT 8
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: LIST
46609: PPUSH
46610: CALL_OW 72
46614: ST_TO_ADDR
// if nearEnemy then
46615: LD_VAR 0 6
46619: IFFALSE 46688
// begin if GetWeapon ( i ) = ru_time_lapser then
46621: LD_VAR 0 4
46625: PPUSH
46626: CALL_OW 264
46630: PUSH
46631: LD_INT 49
46633: EQUAL
46634: IFFALSE 46662
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46636: LD_VAR 0 4
46640: PPUSH
46641: LD_VAR 0 6
46645: PPUSH
46646: LD_VAR 0 4
46650: PPUSH
46651: CALL_OW 74
46655: PPUSH
46656: CALL_OW 112
46660: GO 46686
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46662: LD_VAR 0 4
46666: PPUSH
46667: LD_VAR 0 6
46671: PPUSH
46672: LD_VAR 0 4
46676: PPUSH
46677: CALL_OW 74
46681: PPUSH
46682: CALL_OW 115
// end else
46686: GO 46788
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46688: LD_VAR 0 4
46692: PPUSH
46693: LD_VAR 0 2
46697: PUSH
46698: LD_VAR 0 9
46702: ARRAY
46703: PUSH
46704: LD_INT 1
46706: ARRAY
46707: PPUSH
46708: LD_VAR 0 2
46712: PUSH
46713: LD_VAR 0 9
46717: ARRAY
46718: PUSH
46719: LD_INT 2
46721: ARRAY
46722: PPUSH
46723: CALL_OW 297
46727: PUSH
46728: LD_INT 6
46730: GREATER
46731: IFFALSE 46774
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46733: LD_VAR 0 4
46737: PPUSH
46738: LD_VAR 0 2
46742: PUSH
46743: LD_VAR 0 9
46747: ARRAY
46748: PUSH
46749: LD_INT 1
46751: ARRAY
46752: PPUSH
46753: LD_VAR 0 2
46757: PUSH
46758: LD_VAR 0 9
46762: ARRAY
46763: PUSH
46764: LD_INT 2
46766: ARRAY
46767: PPUSH
46768: CALL_OW 114
46772: GO 46788
// SetTag ( i , tag ) ;
46774: LD_VAR 0 4
46778: PPUSH
46779: LD_VAR 0 9
46783: PPUSH
46784: CALL_OW 109
// end else
46788: GO 46861
// if enemy then
46790: LD_VAR 0 5
46794: IFFALSE 46861
// begin if GetWeapon ( i ) = ru_time_lapser then
46796: LD_VAR 0 4
46800: PPUSH
46801: CALL_OW 264
46805: PUSH
46806: LD_INT 49
46808: EQUAL
46809: IFFALSE 46837
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46811: LD_VAR 0 4
46815: PPUSH
46816: LD_VAR 0 5
46820: PPUSH
46821: LD_VAR 0 4
46825: PPUSH
46826: CALL_OW 74
46830: PPUSH
46831: CALL_OW 112
46835: GO 46861
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46837: LD_VAR 0 4
46841: PPUSH
46842: LD_VAR 0 5
46846: PPUSH
46847: LD_VAR 0 4
46851: PPUSH
46852: CALL_OW 74
46856: PPUSH
46857: CALL_OW 115
// end ; end ;
46861: GO 46441
46863: POP
46864: POP
// end ;
46865: LD_VAR 0 3
46869: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46870: LD_INT 0
46872: PPUSH
46873: PPUSH
46874: PPUSH
// if not unit or IsInUnit ( unit ) then
46875: LD_VAR 0 1
46879: NOT
46880: PUSH
46881: LD_VAR 0 1
46885: PPUSH
46886: CALL_OW 310
46890: OR
46891: IFFALSE 46895
// exit ;
46893: GO 46986
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
46895: LD_ADDR_VAR 0 4
46899: PUSH
46900: LD_VAR 0 1
46904: PPUSH
46905: CALL_OW 250
46909: PPUSH
46910: LD_VAR 0 2
46914: PPUSH
46915: LD_INT 1
46917: PPUSH
46918: CALL_OW 272
46922: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
46923: LD_ADDR_VAR 0 5
46927: PUSH
46928: LD_VAR 0 1
46932: PPUSH
46933: CALL_OW 251
46937: PPUSH
46938: LD_VAR 0 2
46942: PPUSH
46943: LD_INT 1
46945: PPUSH
46946: CALL_OW 273
46950: ST_TO_ADDR
// if ValidHex ( x , y ) then
46951: LD_VAR 0 4
46955: PPUSH
46956: LD_VAR 0 5
46960: PPUSH
46961: CALL_OW 488
46965: IFFALSE 46986
// ComTurnXY ( unit , x , y ) ;
46967: LD_VAR 0 1
46971: PPUSH
46972: LD_VAR 0 4
46976: PPUSH
46977: LD_VAR 0 5
46981: PPUSH
46982: CALL_OW 118
// end ;
46986: LD_VAR 0 3
46990: RET
// export function SeeUnits ( side , units ) ; var i ; begin
46991: LD_INT 0
46993: PPUSH
46994: PPUSH
// result := false ;
46995: LD_ADDR_VAR 0 3
46999: PUSH
47000: LD_INT 0
47002: ST_TO_ADDR
// if not units then
47003: LD_VAR 0 2
47007: NOT
47008: IFFALSE 47012
// exit ;
47010: GO 47057
// for i in units do
47012: LD_ADDR_VAR 0 4
47016: PUSH
47017: LD_VAR 0 2
47021: PUSH
47022: FOR_IN
47023: IFFALSE 47055
// if See ( side , i ) then
47025: LD_VAR 0 1
47029: PPUSH
47030: LD_VAR 0 4
47034: PPUSH
47035: CALL_OW 292
47039: IFFALSE 47053
// begin result := true ;
47041: LD_ADDR_VAR 0 3
47045: PUSH
47046: LD_INT 1
47048: ST_TO_ADDR
// exit ;
47049: POP
47050: POP
47051: GO 47057
// end ;
47053: GO 47022
47055: POP
47056: POP
// end ;
47057: LD_VAR 0 3
47061: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47062: LD_INT 0
47064: PPUSH
47065: PPUSH
47066: PPUSH
47067: PPUSH
// if not unit or not points then
47068: LD_VAR 0 1
47072: NOT
47073: PUSH
47074: LD_VAR 0 2
47078: NOT
47079: OR
47080: IFFALSE 47084
// exit ;
47082: GO 47174
// dist := 99999 ;
47084: LD_ADDR_VAR 0 5
47088: PUSH
47089: LD_INT 99999
47091: ST_TO_ADDR
// for i in points do
47092: LD_ADDR_VAR 0 4
47096: PUSH
47097: LD_VAR 0 2
47101: PUSH
47102: FOR_IN
47103: IFFALSE 47172
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47105: LD_ADDR_VAR 0 6
47109: PUSH
47110: LD_VAR 0 1
47114: PPUSH
47115: LD_VAR 0 4
47119: PUSH
47120: LD_INT 1
47122: ARRAY
47123: PPUSH
47124: LD_VAR 0 4
47128: PUSH
47129: LD_INT 2
47131: ARRAY
47132: PPUSH
47133: CALL_OW 297
47137: ST_TO_ADDR
// if tmpDist < dist then
47138: LD_VAR 0 6
47142: PUSH
47143: LD_VAR 0 5
47147: LESS
47148: IFFALSE 47170
// begin result := i ;
47150: LD_ADDR_VAR 0 3
47154: PUSH
47155: LD_VAR 0 4
47159: ST_TO_ADDR
// dist := tmpDist ;
47160: LD_ADDR_VAR 0 5
47164: PUSH
47165: LD_VAR 0 6
47169: ST_TO_ADDR
// end ; end ;
47170: GO 47102
47172: POP
47173: POP
// end ;
47174: LD_VAR 0 3
47178: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47179: LD_INT 0
47181: PPUSH
// uc_side := side ;
47182: LD_ADDR_OWVAR 20
47186: PUSH
47187: LD_VAR 0 1
47191: ST_TO_ADDR
// uc_nation := 3 ;
47192: LD_ADDR_OWVAR 21
47196: PUSH
47197: LD_INT 3
47199: ST_TO_ADDR
// vc_chassis := 25 ;
47200: LD_ADDR_OWVAR 37
47204: PUSH
47205: LD_INT 25
47207: ST_TO_ADDR
// vc_engine := engine_siberite ;
47208: LD_ADDR_OWVAR 39
47212: PUSH
47213: LD_INT 3
47215: ST_TO_ADDR
// vc_control := control_computer ;
47216: LD_ADDR_OWVAR 38
47220: PUSH
47221: LD_INT 3
47223: ST_TO_ADDR
// vc_weapon := 59 ;
47224: LD_ADDR_OWVAR 40
47228: PUSH
47229: LD_INT 59
47231: ST_TO_ADDR
// result := CreateVehicle ;
47232: LD_ADDR_VAR 0 5
47236: PUSH
47237: CALL_OW 45
47241: ST_TO_ADDR
// SetDir ( result , d ) ;
47242: LD_VAR 0 5
47246: PPUSH
47247: LD_VAR 0 4
47251: PPUSH
47252: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47256: LD_VAR 0 5
47260: PPUSH
47261: LD_VAR 0 2
47265: PPUSH
47266: LD_VAR 0 3
47270: PPUSH
47271: LD_INT 0
47273: PPUSH
47274: CALL_OW 48
// end ;
47278: LD_VAR 0 5
47282: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47283: LD_INT 0
47285: PPUSH
47286: PPUSH
47287: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47288: LD_ADDR_VAR 0 2
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47311: LD_VAR 0 1
47315: NOT
47316: PUSH
47317: LD_VAR 0 1
47321: PPUSH
47322: CALL_OW 264
47326: PUSH
47327: LD_INT 12
47329: PUSH
47330: LD_INT 51
47332: PUSH
47333: LD_INT 32
47335: PUSH
47336: LD_INT 89
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: IN
47345: NOT
47346: OR
47347: IFFALSE 47351
// exit ;
47349: GO 47449
// for i := 1 to 3 do
47351: LD_ADDR_VAR 0 3
47355: PUSH
47356: DOUBLE
47357: LD_INT 1
47359: DEC
47360: ST_TO_ADDR
47361: LD_INT 3
47363: PUSH
47364: FOR_TO
47365: IFFALSE 47447
// begin tmp := GetCargo ( cargo , i ) ;
47367: LD_ADDR_VAR 0 4
47371: PUSH
47372: LD_VAR 0 1
47376: PPUSH
47377: LD_VAR 0 3
47381: PPUSH
47382: CALL_OW 289
47386: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47387: LD_ADDR_VAR 0 2
47391: PUSH
47392: LD_VAR 0 2
47396: PPUSH
47397: LD_VAR 0 3
47401: PPUSH
47402: LD_VAR 0 4
47406: PPUSH
47407: CALL_OW 1
47411: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47412: LD_ADDR_VAR 0 2
47416: PUSH
47417: LD_VAR 0 2
47421: PPUSH
47422: LD_INT 4
47424: PPUSH
47425: LD_VAR 0 2
47429: PUSH
47430: LD_INT 4
47432: ARRAY
47433: PUSH
47434: LD_VAR 0 4
47438: PLUS
47439: PPUSH
47440: CALL_OW 1
47444: ST_TO_ADDR
// end ;
47445: GO 47364
47447: POP
47448: POP
// end ;
47449: LD_VAR 0 2
47453: RET
// export function Length ( array ) ; begin
47454: LD_INT 0
47456: PPUSH
// result := array + 0 ;
47457: LD_ADDR_VAR 0 2
47461: PUSH
47462: LD_VAR 0 1
47466: PUSH
47467: LD_INT 0
47469: PLUS
47470: ST_TO_ADDR
// end ;
47471: LD_VAR 0 2
47475: RET
// export function PrepareArray ( array ) ; begin
47476: LD_INT 0
47478: PPUSH
// result := array diff 0 ;
47479: LD_ADDR_VAR 0 2
47483: PUSH
47484: LD_VAR 0 1
47488: PUSH
47489: LD_INT 0
47491: DIFF
47492: ST_TO_ADDR
// if not result [ 1 ] then
47493: LD_VAR 0 2
47497: PUSH
47498: LD_INT 1
47500: ARRAY
47501: NOT
47502: IFFALSE 47522
// result := Delete ( result , 1 ) ;
47504: LD_ADDR_VAR 0 2
47508: PUSH
47509: LD_VAR 0 2
47513: PPUSH
47514: LD_INT 1
47516: PPUSH
47517: CALL_OW 3
47521: ST_TO_ADDR
// end ;
47522: LD_VAR 0 2
47526: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
47527: LD_INT 0
47529: PPUSH
47530: PPUSH
47531: PPUSH
47532: PPUSH
// sibRocketRange := 25 ;
47533: LD_ADDR_VAR 0 6
47537: PUSH
47538: LD_INT 25
47540: ST_TO_ADDR
// result := false ;
47541: LD_ADDR_VAR 0 4
47545: PUSH
47546: LD_INT 0
47548: ST_TO_ADDR
// for i := 0 to 5 do
47549: LD_ADDR_VAR 0 5
47553: PUSH
47554: DOUBLE
47555: LD_INT 0
47557: DEC
47558: ST_TO_ADDR
47559: LD_INT 5
47561: PUSH
47562: FOR_TO
47563: IFFALSE 47630
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
47565: LD_VAR 0 1
47569: PPUSH
47570: LD_VAR 0 5
47574: PPUSH
47575: LD_VAR 0 6
47579: PPUSH
47580: CALL_OW 272
47584: PPUSH
47585: LD_VAR 0 2
47589: PPUSH
47590: LD_VAR 0 5
47594: PPUSH
47595: LD_VAR 0 6
47599: PPUSH
47600: CALL_OW 273
47604: PPUSH
47605: LD_VAR 0 3
47609: PPUSH
47610: CALL_OW 309
47614: IFFALSE 47628
// begin result := true ;
47616: LD_ADDR_VAR 0 4
47620: PUSH
47621: LD_INT 1
47623: ST_TO_ADDR
// exit ;
47624: POP
47625: POP
47626: GO 47632
// end ;
47628: GO 47562
47630: POP
47631: POP
// end ;
47632: LD_VAR 0 4
47636: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
47637: LD_INT 0
47639: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
47640: LD_VAR 0 1
47644: PPUSH
47645: LD_VAR 0 2
47649: PPUSH
47650: LD_INT 0
47652: PPUSH
47653: LD_INT 0
47655: PPUSH
47656: LD_INT 1
47658: PPUSH
47659: LD_INT 0
47661: PPUSH
47662: CALL_OW 587
// end ;
47666: LD_VAR 0 3
47670: RET
// export function CenterOnNow ( unit ) ; begin
47671: LD_INT 0
47673: PPUSH
// result := IsInUnit ( unit ) ;
47674: LD_ADDR_VAR 0 2
47678: PUSH
47679: LD_VAR 0 1
47683: PPUSH
47684: CALL_OW 310
47688: ST_TO_ADDR
// if not result then
47689: LD_VAR 0 2
47693: NOT
47694: IFFALSE 47706
// result := unit ;
47696: LD_ADDR_VAR 0 2
47700: PUSH
47701: LD_VAR 0 1
47705: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
47706: LD_VAR 0 1
47710: PPUSH
47711: CALL_OW 87
// end ;
47715: LD_VAR 0 2
47719: RET
// export function ComMoveHex ( unit , hex ) ; begin
47720: LD_INT 0
47722: PPUSH
// if not hex then
47723: LD_VAR 0 2
47727: NOT
47728: IFFALSE 47732
// exit ;
47730: GO 47785
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
47732: LD_VAR 0 2
47736: PUSH
47737: LD_INT 1
47739: ARRAY
47740: PPUSH
47741: LD_VAR 0 2
47745: PUSH
47746: LD_INT 2
47748: ARRAY
47749: PPUSH
47750: CALL_OW 428
47754: IFFALSE 47758
// exit ;
47756: GO 47785
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
47758: LD_VAR 0 1
47762: PPUSH
47763: LD_VAR 0 2
47767: PUSH
47768: LD_INT 1
47770: ARRAY
47771: PPUSH
47772: LD_VAR 0 2
47776: PUSH
47777: LD_INT 2
47779: ARRAY
47780: PPUSH
47781: CALL_OW 111
// end ; end_of_file end_of_file
47785: LD_VAR 0 3
47789: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47790: LD_VAR 0 1
47794: PPUSH
47795: LD_VAR 0 2
47799: PPUSH
47800: LD_VAR 0 3
47804: PPUSH
47805: LD_VAR 0 4
47809: PPUSH
47810: LD_VAR 0 5
47814: PPUSH
47815: LD_VAR 0 6
47819: PPUSH
47820: CALL 48004 0 6
// end ;
47824: PPOPN 6
47826: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
47827: LD_INT 0
47829: PPUSH
// begin if not units then
47830: LD_VAR 0 1
47834: NOT
47835: IFFALSE 47839
// exit ;
47837: GO 47839
// end ;
47839: PPOPN 7
47841: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
47842: CALL 47908 0 0
// end ; end_of_file
47846: PPOPN 1
47848: END
// export globalGameSaveCounter ; every 0 0$1 do
47849: GO 47851
47851: DISABLE
// begin enable ;
47852: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47853: LD_STRING updateTimer(
47855: PUSH
47856: LD_OWVAR 1
47860: STR
47861: PUSH
47862: LD_STRING );
47864: STR
47865: PPUSH
47866: CALL_OW 559
// end ;
47870: END
// every 0 0$1 do
47871: GO 47873
47873: DISABLE
// begin globalGameSaveCounter := 0 ;
47874: LD_ADDR_EXP 29
47878: PUSH
47879: LD_INT 0
47881: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47882: LD_STRING setGameSaveCounter(0)
47884: PPUSH
47885: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47889: LD_STRING initStreamRollete();
47891: PPUSH
47892: CALL_OW 559
// InitStreamMode ;
47896: CALL 49222 0 0
// DefineStreamItems ( false ) ;
47900: LD_INT 0
47902: PPUSH
47903: CALL 49686 0 1
// end ;
47907: END
// export function SOS_MapStart ( ) ; begin
47908: LD_INT 0
47910: PPUSH
// if streamModeActive then
47911: LD_EXP 30
47915: IFFALSE 47924
// DefineStreamItems ( true ) ;
47917: LD_INT 1
47919: PPUSH
47920: CALL 49686 0 1
// UpdateLuaVariables ( ) ;
47924: CALL 47941 0 0
// UpdateFactoryWaypoints ( ) ;
47928: CALL 62555 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47932: CALL 62812 0 0
// end ;
47936: LD_VAR 0 1
47940: RET
// function UpdateLuaVariables ( ) ; begin
47941: LD_INT 0
47943: PPUSH
// if globalGameSaveCounter then
47944: LD_EXP 29
47948: IFFALSE 47982
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47950: LD_ADDR_EXP 29
47954: PUSH
47955: LD_EXP 29
47959: PPUSH
47960: CALL 45079 0 1
47964: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47965: LD_STRING setGameSaveCounter(
47967: PUSH
47968: LD_EXP 29
47972: STR
47973: PUSH
47974: LD_STRING )
47976: STR
47977: PPUSH
47978: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
47982: LD_STRING setGameDifficulty(
47984: PUSH
47985: LD_OWVAR 67
47989: STR
47990: PUSH
47991: LD_STRING )
47993: STR
47994: PPUSH
47995: CALL_OW 559
// end ;
47999: LD_VAR 0 1
48003: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48004: LD_INT 0
48006: PPUSH
// if p2 = stream_mode then
48007: LD_VAR 0 2
48011: PUSH
48012: LD_INT 100
48014: EQUAL
48015: IFFALSE 49018
// begin if not StreamModeActive then
48017: LD_EXP 30
48021: NOT
48022: IFFALSE 48032
// StreamModeActive := true ;
48024: LD_ADDR_EXP 30
48028: PUSH
48029: LD_INT 1
48031: ST_TO_ADDR
// if p3 = 0 then
48032: LD_VAR 0 3
48036: PUSH
48037: LD_INT 0
48039: EQUAL
48040: IFFALSE 48046
// InitStreamMode ;
48042: CALL 49222 0 0
// if p3 = 1 then
48046: LD_VAR 0 3
48050: PUSH
48051: LD_INT 1
48053: EQUAL
48054: IFFALSE 48064
// sRocket := true ;
48056: LD_ADDR_EXP 35
48060: PUSH
48061: LD_INT 1
48063: ST_TO_ADDR
// if p3 = 2 then
48064: LD_VAR 0 3
48068: PUSH
48069: LD_INT 2
48071: EQUAL
48072: IFFALSE 48082
// sSpeed := true ;
48074: LD_ADDR_EXP 34
48078: PUSH
48079: LD_INT 1
48081: ST_TO_ADDR
// if p3 = 3 then
48082: LD_VAR 0 3
48086: PUSH
48087: LD_INT 3
48089: EQUAL
48090: IFFALSE 48100
// sEngine := true ;
48092: LD_ADDR_EXP 36
48096: PUSH
48097: LD_INT 1
48099: ST_TO_ADDR
// if p3 = 4 then
48100: LD_VAR 0 3
48104: PUSH
48105: LD_INT 4
48107: EQUAL
48108: IFFALSE 48118
// sSpec := true ;
48110: LD_ADDR_EXP 33
48114: PUSH
48115: LD_INT 1
48117: ST_TO_ADDR
// if p3 = 5 then
48118: LD_VAR 0 3
48122: PUSH
48123: LD_INT 5
48125: EQUAL
48126: IFFALSE 48136
// sLevel := true ;
48128: LD_ADDR_EXP 37
48132: PUSH
48133: LD_INT 1
48135: ST_TO_ADDR
// if p3 = 6 then
48136: LD_VAR 0 3
48140: PUSH
48141: LD_INT 6
48143: EQUAL
48144: IFFALSE 48154
// sArmoury := true ;
48146: LD_ADDR_EXP 38
48150: PUSH
48151: LD_INT 1
48153: ST_TO_ADDR
// if p3 = 7 then
48154: LD_VAR 0 3
48158: PUSH
48159: LD_INT 7
48161: EQUAL
48162: IFFALSE 48172
// sRadar := true ;
48164: LD_ADDR_EXP 39
48168: PUSH
48169: LD_INT 1
48171: ST_TO_ADDR
// if p3 = 8 then
48172: LD_VAR 0 3
48176: PUSH
48177: LD_INT 8
48179: EQUAL
48180: IFFALSE 48190
// sBunker := true ;
48182: LD_ADDR_EXP 40
48186: PUSH
48187: LD_INT 1
48189: ST_TO_ADDR
// if p3 = 9 then
48190: LD_VAR 0 3
48194: PUSH
48195: LD_INT 9
48197: EQUAL
48198: IFFALSE 48208
// sHack := true ;
48200: LD_ADDR_EXP 41
48204: PUSH
48205: LD_INT 1
48207: ST_TO_ADDR
// if p3 = 10 then
48208: LD_VAR 0 3
48212: PUSH
48213: LD_INT 10
48215: EQUAL
48216: IFFALSE 48226
// sFire := true ;
48218: LD_ADDR_EXP 42
48222: PUSH
48223: LD_INT 1
48225: ST_TO_ADDR
// if p3 = 11 then
48226: LD_VAR 0 3
48230: PUSH
48231: LD_INT 11
48233: EQUAL
48234: IFFALSE 48244
// sRefresh := true ;
48236: LD_ADDR_EXP 43
48240: PUSH
48241: LD_INT 1
48243: ST_TO_ADDR
// if p3 = 12 then
48244: LD_VAR 0 3
48248: PUSH
48249: LD_INT 12
48251: EQUAL
48252: IFFALSE 48262
// sExp := true ;
48254: LD_ADDR_EXP 44
48258: PUSH
48259: LD_INT 1
48261: ST_TO_ADDR
// if p3 = 13 then
48262: LD_VAR 0 3
48266: PUSH
48267: LD_INT 13
48269: EQUAL
48270: IFFALSE 48280
// sDepot := true ;
48272: LD_ADDR_EXP 45
48276: PUSH
48277: LD_INT 1
48279: ST_TO_ADDR
// if p3 = 14 then
48280: LD_VAR 0 3
48284: PUSH
48285: LD_INT 14
48287: EQUAL
48288: IFFALSE 48298
// sFlag := true ;
48290: LD_ADDR_EXP 46
48294: PUSH
48295: LD_INT 1
48297: ST_TO_ADDR
// if p3 = 15 then
48298: LD_VAR 0 3
48302: PUSH
48303: LD_INT 15
48305: EQUAL
48306: IFFALSE 48316
// sKamikadze := true ;
48308: LD_ADDR_EXP 54
48312: PUSH
48313: LD_INT 1
48315: ST_TO_ADDR
// if p3 = 16 then
48316: LD_VAR 0 3
48320: PUSH
48321: LD_INT 16
48323: EQUAL
48324: IFFALSE 48334
// sTroll := true ;
48326: LD_ADDR_EXP 55
48330: PUSH
48331: LD_INT 1
48333: ST_TO_ADDR
// if p3 = 17 then
48334: LD_VAR 0 3
48338: PUSH
48339: LD_INT 17
48341: EQUAL
48342: IFFALSE 48352
// sSlow := true ;
48344: LD_ADDR_EXP 56
48348: PUSH
48349: LD_INT 1
48351: ST_TO_ADDR
// if p3 = 18 then
48352: LD_VAR 0 3
48356: PUSH
48357: LD_INT 18
48359: EQUAL
48360: IFFALSE 48370
// sLack := true ;
48362: LD_ADDR_EXP 57
48366: PUSH
48367: LD_INT 1
48369: ST_TO_ADDR
// if p3 = 19 then
48370: LD_VAR 0 3
48374: PUSH
48375: LD_INT 19
48377: EQUAL
48378: IFFALSE 48388
// sTank := true ;
48380: LD_ADDR_EXP 59
48384: PUSH
48385: LD_INT 1
48387: ST_TO_ADDR
// if p3 = 20 then
48388: LD_VAR 0 3
48392: PUSH
48393: LD_INT 20
48395: EQUAL
48396: IFFALSE 48406
// sRemote := true ;
48398: LD_ADDR_EXP 60
48402: PUSH
48403: LD_INT 1
48405: ST_TO_ADDR
// if p3 = 21 then
48406: LD_VAR 0 3
48410: PUSH
48411: LD_INT 21
48413: EQUAL
48414: IFFALSE 48424
// sPowell := true ;
48416: LD_ADDR_EXP 61
48420: PUSH
48421: LD_INT 1
48423: ST_TO_ADDR
// if p3 = 22 then
48424: LD_VAR 0 3
48428: PUSH
48429: LD_INT 22
48431: EQUAL
48432: IFFALSE 48442
// sTeleport := true ;
48434: LD_ADDR_EXP 64
48438: PUSH
48439: LD_INT 1
48441: ST_TO_ADDR
// if p3 = 23 then
48442: LD_VAR 0 3
48446: PUSH
48447: LD_INT 23
48449: EQUAL
48450: IFFALSE 48460
// sOilTower := true ;
48452: LD_ADDR_EXP 66
48456: PUSH
48457: LD_INT 1
48459: ST_TO_ADDR
// if p3 = 24 then
48460: LD_VAR 0 3
48464: PUSH
48465: LD_INT 24
48467: EQUAL
48468: IFFALSE 48478
// sShovel := true ;
48470: LD_ADDR_EXP 67
48474: PUSH
48475: LD_INT 1
48477: ST_TO_ADDR
// if p3 = 25 then
48478: LD_VAR 0 3
48482: PUSH
48483: LD_INT 25
48485: EQUAL
48486: IFFALSE 48496
// sSheik := true ;
48488: LD_ADDR_EXP 68
48492: PUSH
48493: LD_INT 1
48495: ST_TO_ADDR
// if p3 = 26 then
48496: LD_VAR 0 3
48500: PUSH
48501: LD_INT 26
48503: EQUAL
48504: IFFALSE 48514
// sEarthquake := true ;
48506: LD_ADDR_EXP 70
48510: PUSH
48511: LD_INT 1
48513: ST_TO_ADDR
// if p3 = 27 then
48514: LD_VAR 0 3
48518: PUSH
48519: LD_INT 27
48521: EQUAL
48522: IFFALSE 48532
// sAI := true ;
48524: LD_ADDR_EXP 71
48528: PUSH
48529: LD_INT 1
48531: ST_TO_ADDR
// if p3 = 28 then
48532: LD_VAR 0 3
48536: PUSH
48537: LD_INT 28
48539: EQUAL
48540: IFFALSE 48550
// sCargo := true ;
48542: LD_ADDR_EXP 74
48546: PUSH
48547: LD_INT 1
48549: ST_TO_ADDR
// if p3 = 29 then
48550: LD_VAR 0 3
48554: PUSH
48555: LD_INT 29
48557: EQUAL
48558: IFFALSE 48568
// sDLaser := true ;
48560: LD_ADDR_EXP 75
48564: PUSH
48565: LD_INT 1
48567: ST_TO_ADDR
// if p3 = 30 then
48568: LD_VAR 0 3
48572: PUSH
48573: LD_INT 30
48575: EQUAL
48576: IFFALSE 48586
// sExchange := true ;
48578: LD_ADDR_EXP 76
48582: PUSH
48583: LD_INT 1
48585: ST_TO_ADDR
// if p3 = 31 then
48586: LD_VAR 0 3
48590: PUSH
48591: LD_INT 31
48593: EQUAL
48594: IFFALSE 48604
// sFac := true ;
48596: LD_ADDR_EXP 77
48600: PUSH
48601: LD_INT 1
48603: ST_TO_ADDR
// if p3 = 32 then
48604: LD_VAR 0 3
48608: PUSH
48609: LD_INT 32
48611: EQUAL
48612: IFFALSE 48622
// sPower := true ;
48614: LD_ADDR_EXP 78
48618: PUSH
48619: LD_INT 1
48621: ST_TO_ADDR
// if p3 = 33 then
48622: LD_VAR 0 3
48626: PUSH
48627: LD_INT 33
48629: EQUAL
48630: IFFALSE 48640
// sRandom := true ;
48632: LD_ADDR_EXP 79
48636: PUSH
48637: LD_INT 1
48639: ST_TO_ADDR
// if p3 = 34 then
48640: LD_VAR 0 3
48644: PUSH
48645: LD_INT 34
48647: EQUAL
48648: IFFALSE 48658
// sShield := true ;
48650: LD_ADDR_EXP 80
48654: PUSH
48655: LD_INT 1
48657: ST_TO_ADDR
// if p3 = 35 then
48658: LD_VAR 0 3
48662: PUSH
48663: LD_INT 35
48665: EQUAL
48666: IFFALSE 48676
// sTime := true ;
48668: LD_ADDR_EXP 81
48672: PUSH
48673: LD_INT 1
48675: ST_TO_ADDR
// if p3 = 36 then
48676: LD_VAR 0 3
48680: PUSH
48681: LD_INT 36
48683: EQUAL
48684: IFFALSE 48694
// sTools := true ;
48686: LD_ADDR_EXP 82
48690: PUSH
48691: LD_INT 1
48693: ST_TO_ADDR
// if p3 = 101 then
48694: LD_VAR 0 3
48698: PUSH
48699: LD_INT 101
48701: EQUAL
48702: IFFALSE 48712
// sSold := true ;
48704: LD_ADDR_EXP 47
48708: PUSH
48709: LD_INT 1
48711: ST_TO_ADDR
// if p3 = 102 then
48712: LD_VAR 0 3
48716: PUSH
48717: LD_INT 102
48719: EQUAL
48720: IFFALSE 48730
// sDiff := true ;
48722: LD_ADDR_EXP 48
48726: PUSH
48727: LD_INT 1
48729: ST_TO_ADDR
// if p3 = 103 then
48730: LD_VAR 0 3
48734: PUSH
48735: LD_INT 103
48737: EQUAL
48738: IFFALSE 48748
// sFog := true ;
48740: LD_ADDR_EXP 51
48744: PUSH
48745: LD_INT 1
48747: ST_TO_ADDR
// if p3 = 104 then
48748: LD_VAR 0 3
48752: PUSH
48753: LD_INT 104
48755: EQUAL
48756: IFFALSE 48766
// sReset := true ;
48758: LD_ADDR_EXP 52
48762: PUSH
48763: LD_INT 1
48765: ST_TO_ADDR
// if p3 = 105 then
48766: LD_VAR 0 3
48770: PUSH
48771: LD_INT 105
48773: EQUAL
48774: IFFALSE 48784
// sSun := true ;
48776: LD_ADDR_EXP 53
48780: PUSH
48781: LD_INT 1
48783: ST_TO_ADDR
// if p3 = 106 then
48784: LD_VAR 0 3
48788: PUSH
48789: LD_INT 106
48791: EQUAL
48792: IFFALSE 48802
// sTiger := true ;
48794: LD_ADDR_EXP 49
48798: PUSH
48799: LD_INT 1
48801: ST_TO_ADDR
// if p3 = 107 then
48802: LD_VAR 0 3
48806: PUSH
48807: LD_INT 107
48809: EQUAL
48810: IFFALSE 48820
// sBomb := true ;
48812: LD_ADDR_EXP 50
48816: PUSH
48817: LD_INT 1
48819: ST_TO_ADDR
// if p3 = 108 then
48820: LD_VAR 0 3
48824: PUSH
48825: LD_INT 108
48827: EQUAL
48828: IFFALSE 48838
// sWound := true ;
48830: LD_ADDR_EXP 58
48834: PUSH
48835: LD_INT 1
48837: ST_TO_ADDR
// if p3 = 109 then
48838: LD_VAR 0 3
48842: PUSH
48843: LD_INT 109
48845: EQUAL
48846: IFFALSE 48856
// sBetray := true ;
48848: LD_ADDR_EXP 62
48852: PUSH
48853: LD_INT 1
48855: ST_TO_ADDR
// if p3 = 110 then
48856: LD_VAR 0 3
48860: PUSH
48861: LD_INT 110
48863: EQUAL
48864: IFFALSE 48874
// sContamin := true ;
48866: LD_ADDR_EXP 63
48870: PUSH
48871: LD_INT 1
48873: ST_TO_ADDR
// if p3 = 111 then
48874: LD_VAR 0 3
48878: PUSH
48879: LD_INT 111
48881: EQUAL
48882: IFFALSE 48892
// sOil := true ;
48884: LD_ADDR_EXP 65
48888: PUSH
48889: LD_INT 1
48891: ST_TO_ADDR
// if p3 = 112 then
48892: LD_VAR 0 3
48896: PUSH
48897: LD_INT 112
48899: EQUAL
48900: IFFALSE 48910
// sStu := true ;
48902: LD_ADDR_EXP 69
48906: PUSH
48907: LD_INT 1
48909: ST_TO_ADDR
// if p3 = 113 then
48910: LD_VAR 0 3
48914: PUSH
48915: LD_INT 113
48917: EQUAL
48918: IFFALSE 48928
// sBazooka := true ;
48920: LD_ADDR_EXP 72
48924: PUSH
48925: LD_INT 1
48927: ST_TO_ADDR
// if p3 = 114 then
48928: LD_VAR 0 3
48932: PUSH
48933: LD_INT 114
48935: EQUAL
48936: IFFALSE 48946
// sMortar := true ;
48938: LD_ADDR_EXP 73
48942: PUSH
48943: LD_INT 1
48945: ST_TO_ADDR
// if p3 = 115 then
48946: LD_VAR 0 3
48950: PUSH
48951: LD_INT 115
48953: EQUAL
48954: IFFALSE 48964
// sRanger := true ;
48956: LD_ADDR_EXP 83
48960: PUSH
48961: LD_INT 1
48963: ST_TO_ADDR
// if p3 = 116 then
48964: LD_VAR 0 3
48968: PUSH
48969: LD_INT 116
48971: EQUAL
48972: IFFALSE 48982
// sComputer := true ;
48974: LD_ADDR_EXP 84
48978: PUSH
48979: LD_INT 1
48981: ST_TO_ADDR
// if p3 = 117 then
48982: LD_VAR 0 3
48986: PUSH
48987: LD_INT 117
48989: EQUAL
48990: IFFALSE 49000
// s30 := true ;
48992: LD_ADDR_EXP 85
48996: PUSH
48997: LD_INT 1
48999: ST_TO_ADDR
// if p3 = 118 then
49000: LD_VAR 0 3
49004: PUSH
49005: LD_INT 118
49007: EQUAL
49008: IFFALSE 49018
// s60 := true ;
49010: LD_ADDR_EXP 86
49014: PUSH
49015: LD_INT 1
49017: ST_TO_ADDR
// end ; if p2 = hack_mode then
49018: LD_VAR 0 2
49022: PUSH
49023: LD_INT 101
49025: EQUAL
49026: IFFALSE 49154
// begin case p3 of 1 :
49028: LD_VAR 0 3
49032: PUSH
49033: LD_INT 1
49035: DOUBLE
49036: EQUAL
49037: IFTRUE 49041
49039: GO 49048
49041: POP
// hHackUnlimitedResources ; 2 :
49042: CALL 61301 0 0
49046: GO 49154
49048: LD_INT 2
49050: DOUBLE
49051: EQUAL
49052: IFTRUE 49056
49054: GO 49063
49056: POP
// hHackSetLevel10 ; 3 :
49057: CALL 61434 0 0
49061: GO 49154
49063: LD_INT 3
49065: DOUBLE
49066: EQUAL
49067: IFTRUE 49071
49069: GO 49078
49071: POP
// hHackSetLevel10YourUnits ; 4 :
49072: CALL 61519 0 0
49076: GO 49154
49078: LD_INT 4
49080: DOUBLE
49081: EQUAL
49082: IFTRUE 49086
49084: GO 49093
49086: POP
// hHackInvincible ; 5 :
49087: CALL 61967 0 0
49091: GO 49154
49093: LD_INT 5
49095: DOUBLE
49096: EQUAL
49097: IFTRUE 49101
49099: GO 49108
49101: POP
// hHackInvisible ; 6 :
49102: CALL 62078 0 0
49106: GO 49154
49108: LD_INT 6
49110: DOUBLE
49111: EQUAL
49112: IFTRUE 49116
49114: GO 49123
49116: POP
// hHackChangeYourSide ; 7 :
49117: CALL 62135 0 0
49121: GO 49154
49123: LD_INT 7
49125: DOUBLE
49126: EQUAL
49127: IFTRUE 49131
49129: GO 49138
49131: POP
// hHackChangeUnitSide ; 8 :
49132: CALL 62177 0 0
49136: GO 49154
49138: LD_INT 8
49140: DOUBLE
49141: EQUAL
49142: IFTRUE 49146
49144: GO 49153
49146: POP
// hHackFog ; end ;
49147: CALL 62278 0 0
49151: GO 49154
49153: POP
// end ; if p2 = game_save_mode then
49154: LD_VAR 0 2
49158: PUSH
49159: LD_INT 102
49161: EQUAL
49162: IFFALSE 49217
// begin if p3 = 1 then
49164: LD_VAR 0 3
49168: PUSH
49169: LD_INT 1
49171: EQUAL
49172: IFFALSE 49184
// globalGameSaveCounter := p4 ;
49174: LD_ADDR_EXP 29
49178: PUSH
49179: LD_VAR 0 4
49183: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49184: LD_VAR 0 3
49188: PUSH
49189: LD_INT 2
49191: EQUAL
49192: PUSH
49193: LD_EXP 29
49197: AND
49198: IFFALSE 49217
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49200: LD_STRING setGameSaveCounter(
49202: PUSH
49203: LD_EXP 29
49207: STR
49208: PUSH
49209: LD_STRING )
49211: STR
49212: PPUSH
49213: CALL_OW 559
// end ; end ;
49217: LD_VAR 0 7
49221: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49222: LD_INT 0
49224: PPUSH
// streamModeActive := false ;
49225: LD_ADDR_EXP 30
49229: PUSH
49230: LD_INT 0
49232: ST_TO_ADDR
// normalCounter := 36 ;
49233: LD_ADDR_EXP 31
49237: PUSH
49238: LD_INT 36
49240: ST_TO_ADDR
// hardcoreCounter := 18 ;
49241: LD_ADDR_EXP 32
49245: PUSH
49246: LD_INT 18
49248: ST_TO_ADDR
// sRocket := false ;
49249: LD_ADDR_EXP 35
49253: PUSH
49254: LD_INT 0
49256: ST_TO_ADDR
// sSpeed := false ;
49257: LD_ADDR_EXP 34
49261: PUSH
49262: LD_INT 0
49264: ST_TO_ADDR
// sEngine := false ;
49265: LD_ADDR_EXP 36
49269: PUSH
49270: LD_INT 0
49272: ST_TO_ADDR
// sSpec := false ;
49273: LD_ADDR_EXP 33
49277: PUSH
49278: LD_INT 0
49280: ST_TO_ADDR
// sLevel := false ;
49281: LD_ADDR_EXP 37
49285: PUSH
49286: LD_INT 0
49288: ST_TO_ADDR
// sArmoury := false ;
49289: LD_ADDR_EXP 38
49293: PUSH
49294: LD_INT 0
49296: ST_TO_ADDR
// sRadar := false ;
49297: LD_ADDR_EXP 39
49301: PUSH
49302: LD_INT 0
49304: ST_TO_ADDR
// sBunker := false ;
49305: LD_ADDR_EXP 40
49309: PUSH
49310: LD_INT 0
49312: ST_TO_ADDR
// sHack := false ;
49313: LD_ADDR_EXP 41
49317: PUSH
49318: LD_INT 0
49320: ST_TO_ADDR
// sFire := false ;
49321: LD_ADDR_EXP 42
49325: PUSH
49326: LD_INT 0
49328: ST_TO_ADDR
// sRefresh := false ;
49329: LD_ADDR_EXP 43
49333: PUSH
49334: LD_INT 0
49336: ST_TO_ADDR
// sExp := false ;
49337: LD_ADDR_EXP 44
49341: PUSH
49342: LD_INT 0
49344: ST_TO_ADDR
// sDepot := false ;
49345: LD_ADDR_EXP 45
49349: PUSH
49350: LD_INT 0
49352: ST_TO_ADDR
// sFlag := false ;
49353: LD_ADDR_EXP 46
49357: PUSH
49358: LD_INT 0
49360: ST_TO_ADDR
// sKamikadze := false ;
49361: LD_ADDR_EXP 54
49365: PUSH
49366: LD_INT 0
49368: ST_TO_ADDR
// sTroll := false ;
49369: LD_ADDR_EXP 55
49373: PUSH
49374: LD_INT 0
49376: ST_TO_ADDR
// sSlow := false ;
49377: LD_ADDR_EXP 56
49381: PUSH
49382: LD_INT 0
49384: ST_TO_ADDR
// sLack := false ;
49385: LD_ADDR_EXP 57
49389: PUSH
49390: LD_INT 0
49392: ST_TO_ADDR
// sTank := false ;
49393: LD_ADDR_EXP 59
49397: PUSH
49398: LD_INT 0
49400: ST_TO_ADDR
// sRemote := false ;
49401: LD_ADDR_EXP 60
49405: PUSH
49406: LD_INT 0
49408: ST_TO_ADDR
// sPowell := false ;
49409: LD_ADDR_EXP 61
49413: PUSH
49414: LD_INT 0
49416: ST_TO_ADDR
// sTeleport := false ;
49417: LD_ADDR_EXP 64
49421: PUSH
49422: LD_INT 0
49424: ST_TO_ADDR
// sOilTower := false ;
49425: LD_ADDR_EXP 66
49429: PUSH
49430: LD_INT 0
49432: ST_TO_ADDR
// sShovel := false ;
49433: LD_ADDR_EXP 67
49437: PUSH
49438: LD_INT 0
49440: ST_TO_ADDR
// sSheik := false ;
49441: LD_ADDR_EXP 68
49445: PUSH
49446: LD_INT 0
49448: ST_TO_ADDR
// sEarthquake := false ;
49449: LD_ADDR_EXP 70
49453: PUSH
49454: LD_INT 0
49456: ST_TO_ADDR
// sAI := false ;
49457: LD_ADDR_EXP 71
49461: PUSH
49462: LD_INT 0
49464: ST_TO_ADDR
// sCargo := false ;
49465: LD_ADDR_EXP 74
49469: PUSH
49470: LD_INT 0
49472: ST_TO_ADDR
// sDLaser := false ;
49473: LD_ADDR_EXP 75
49477: PUSH
49478: LD_INT 0
49480: ST_TO_ADDR
// sExchange := false ;
49481: LD_ADDR_EXP 76
49485: PUSH
49486: LD_INT 0
49488: ST_TO_ADDR
// sFac := false ;
49489: LD_ADDR_EXP 77
49493: PUSH
49494: LD_INT 0
49496: ST_TO_ADDR
// sPower := false ;
49497: LD_ADDR_EXP 78
49501: PUSH
49502: LD_INT 0
49504: ST_TO_ADDR
// sRandom := false ;
49505: LD_ADDR_EXP 79
49509: PUSH
49510: LD_INT 0
49512: ST_TO_ADDR
// sShield := false ;
49513: LD_ADDR_EXP 80
49517: PUSH
49518: LD_INT 0
49520: ST_TO_ADDR
// sTime := false ;
49521: LD_ADDR_EXP 81
49525: PUSH
49526: LD_INT 0
49528: ST_TO_ADDR
// sTools := false ;
49529: LD_ADDR_EXP 82
49533: PUSH
49534: LD_INT 0
49536: ST_TO_ADDR
// sSold := false ;
49537: LD_ADDR_EXP 47
49541: PUSH
49542: LD_INT 0
49544: ST_TO_ADDR
// sDiff := false ;
49545: LD_ADDR_EXP 48
49549: PUSH
49550: LD_INT 0
49552: ST_TO_ADDR
// sFog := false ;
49553: LD_ADDR_EXP 51
49557: PUSH
49558: LD_INT 0
49560: ST_TO_ADDR
// sReset := false ;
49561: LD_ADDR_EXP 52
49565: PUSH
49566: LD_INT 0
49568: ST_TO_ADDR
// sSun := false ;
49569: LD_ADDR_EXP 53
49573: PUSH
49574: LD_INT 0
49576: ST_TO_ADDR
// sTiger := false ;
49577: LD_ADDR_EXP 49
49581: PUSH
49582: LD_INT 0
49584: ST_TO_ADDR
// sBomb := false ;
49585: LD_ADDR_EXP 50
49589: PUSH
49590: LD_INT 0
49592: ST_TO_ADDR
// sWound := false ;
49593: LD_ADDR_EXP 58
49597: PUSH
49598: LD_INT 0
49600: ST_TO_ADDR
// sBetray := false ;
49601: LD_ADDR_EXP 62
49605: PUSH
49606: LD_INT 0
49608: ST_TO_ADDR
// sContamin := false ;
49609: LD_ADDR_EXP 63
49613: PUSH
49614: LD_INT 0
49616: ST_TO_ADDR
// sOil := false ;
49617: LD_ADDR_EXP 65
49621: PUSH
49622: LD_INT 0
49624: ST_TO_ADDR
// sStu := false ;
49625: LD_ADDR_EXP 69
49629: PUSH
49630: LD_INT 0
49632: ST_TO_ADDR
// sBazooka := false ;
49633: LD_ADDR_EXP 72
49637: PUSH
49638: LD_INT 0
49640: ST_TO_ADDR
// sMortar := false ;
49641: LD_ADDR_EXP 73
49645: PUSH
49646: LD_INT 0
49648: ST_TO_ADDR
// sRanger := false ;
49649: LD_ADDR_EXP 83
49653: PUSH
49654: LD_INT 0
49656: ST_TO_ADDR
// sComputer := false ;
49657: LD_ADDR_EXP 84
49661: PUSH
49662: LD_INT 0
49664: ST_TO_ADDR
// s30 := false ;
49665: LD_ADDR_EXP 85
49669: PUSH
49670: LD_INT 0
49672: ST_TO_ADDR
// s60 := false ;
49673: LD_ADDR_EXP 86
49677: PUSH
49678: LD_INT 0
49680: ST_TO_ADDR
// end ;
49681: LD_VAR 0 1
49685: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49686: LD_INT 0
49688: PPUSH
49689: PPUSH
49690: PPUSH
49691: PPUSH
49692: PPUSH
49693: PPUSH
49694: PPUSH
// result := [ ] ;
49695: LD_ADDR_VAR 0 2
49699: PUSH
49700: EMPTY
49701: ST_TO_ADDR
// if campaign_id = 1 then
49702: LD_OWVAR 69
49706: PUSH
49707: LD_INT 1
49709: EQUAL
49710: IFFALSE 52876
// begin case mission_number of 1 :
49712: LD_OWVAR 70
49716: PUSH
49717: LD_INT 1
49719: DOUBLE
49720: EQUAL
49721: IFTRUE 49725
49723: GO 49801
49725: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49726: LD_ADDR_VAR 0 2
49730: PUSH
49731: LD_INT 2
49733: PUSH
49734: LD_INT 4
49736: PUSH
49737: LD_INT 11
49739: PUSH
49740: LD_INT 12
49742: PUSH
49743: LD_INT 15
49745: PUSH
49746: LD_INT 16
49748: PUSH
49749: LD_INT 22
49751: PUSH
49752: LD_INT 23
49754: PUSH
49755: LD_INT 26
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 101
49771: PUSH
49772: LD_INT 102
49774: PUSH
49775: LD_INT 106
49777: PUSH
49778: LD_INT 116
49780: PUSH
49781: LD_INT 117
49783: PUSH
49784: LD_INT 118
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: ST_TO_ADDR
49799: GO 52874
49801: LD_INT 2
49803: DOUBLE
49804: EQUAL
49805: IFTRUE 49809
49807: GO 49893
49809: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49810: LD_ADDR_VAR 0 2
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 4
49820: PUSH
49821: LD_INT 11
49823: PUSH
49824: LD_INT 12
49826: PUSH
49827: LD_INT 15
49829: PUSH
49830: LD_INT 16
49832: PUSH
49833: LD_INT 22
49835: PUSH
49836: LD_INT 23
49838: PUSH
49839: LD_INT 26
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 101
49855: PUSH
49856: LD_INT 102
49858: PUSH
49859: LD_INT 105
49861: PUSH
49862: LD_INT 106
49864: PUSH
49865: LD_INT 108
49867: PUSH
49868: LD_INT 116
49870: PUSH
49871: LD_INT 117
49873: PUSH
49874: LD_INT 118
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: ST_TO_ADDR
49891: GO 52874
49893: LD_INT 3
49895: DOUBLE
49896: EQUAL
49897: IFTRUE 49901
49899: GO 49989
49901: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49902: LD_ADDR_VAR 0 2
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: LD_INT 4
49912: PUSH
49913: LD_INT 5
49915: PUSH
49916: LD_INT 11
49918: PUSH
49919: LD_INT 12
49921: PUSH
49922: LD_INT 15
49924: PUSH
49925: LD_INT 16
49927: PUSH
49928: LD_INT 22
49930: PUSH
49931: LD_INT 26
49933: PUSH
49934: LD_INT 36
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 101
49951: PUSH
49952: LD_INT 102
49954: PUSH
49955: LD_INT 105
49957: PUSH
49958: LD_INT 106
49960: PUSH
49961: LD_INT 108
49963: PUSH
49964: LD_INT 116
49966: PUSH
49967: LD_INT 117
49969: PUSH
49970: LD_INT 118
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: ST_TO_ADDR
49987: GO 52874
49989: LD_INT 4
49991: DOUBLE
49992: EQUAL
49993: IFTRUE 49997
49995: GO 50093
49997: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
49998: LD_ADDR_VAR 0 2
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 4
50008: PUSH
50009: LD_INT 5
50011: PUSH
50012: LD_INT 8
50014: PUSH
50015: LD_INT 11
50017: PUSH
50018: LD_INT 12
50020: PUSH
50021: LD_INT 15
50023: PUSH
50024: LD_INT 16
50026: PUSH
50027: LD_INT 22
50029: PUSH
50030: LD_INT 23
50032: PUSH
50033: LD_INT 26
50035: PUSH
50036: LD_INT 36
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: PUSH
50053: LD_INT 101
50055: PUSH
50056: LD_INT 102
50058: PUSH
50059: LD_INT 105
50061: PUSH
50062: LD_INT 106
50064: PUSH
50065: LD_INT 108
50067: PUSH
50068: LD_INT 116
50070: PUSH
50071: LD_INT 117
50073: PUSH
50074: LD_INT 118
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: ST_TO_ADDR
50091: GO 52874
50093: LD_INT 5
50095: DOUBLE
50096: EQUAL
50097: IFTRUE 50101
50099: GO 50213
50101: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50102: LD_ADDR_VAR 0 2
50106: PUSH
50107: LD_INT 2
50109: PUSH
50110: LD_INT 4
50112: PUSH
50113: LD_INT 5
50115: PUSH
50116: LD_INT 6
50118: PUSH
50119: LD_INT 8
50121: PUSH
50122: LD_INT 11
50124: PUSH
50125: LD_INT 12
50127: PUSH
50128: LD_INT 15
50130: PUSH
50131: LD_INT 16
50133: PUSH
50134: LD_INT 22
50136: PUSH
50137: LD_INT 23
50139: PUSH
50140: LD_INT 25
50142: PUSH
50143: LD_INT 26
50145: PUSH
50146: LD_INT 36
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 101
50167: PUSH
50168: LD_INT 102
50170: PUSH
50171: LD_INT 105
50173: PUSH
50174: LD_INT 106
50176: PUSH
50177: LD_INT 108
50179: PUSH
50180: LD_INT 109
50182: PUSH
50183: LD_INT 112
50185: PUSH
50186: LD_INT 116
50188: PUSH
50189: LD_INT 117
50191: PUSH
50192: LD_INT 118
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: ST_TO_ADDR
50211: GO 52874
50213: LD_INT 6
50215: DOUBLE
50216: EQUAL
50217: IFTRUE 50221
50219: GO 50353
50221: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50222: LD_ADDR_VAR 0 2
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: LD_INT 5
50235: PUSH
50236: LD_INT 6
50238: PUSH
50239: LD_INT 8
50241: PUSH
50242: LD_INT 11
50244: PUSH
50245: LD_INT 12
50247: PUSH
50248: LD_INT 15
50250: PUSH
50251: LD_INT 16
50253: PUSH
50254: LD_INT 20
50256: PUSH
50257: LD_INT 21
50259: PUSH
50260: LD_INT 22
50262: PUSH
50263: LD_INT 23
50265: PUSH
50266: LD_INT 25
50268: PUSH
50269: LD_INT 26
50271: PUSH
50272: LD_INT 30
50274: PUSH
50275: LD_INT 31
50277: PUSH
50278: LD_INT 32
50280: PUSH
50281: LD_INT 36
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 101
50307: PUSH
50308: LD_INT 102
50310: PUSH
50311: LD_INT 105
50313: PUSH
50314: LD_INT 106
50316: PUSH
50317: LD_INT 108
50319: PUSH
50320: LD_INT 109
50322: PUSH
50323: LD_INT 112
50325: PUSH
50326: LD_INT 116
50328: PUSH
50329: LD_INT 117
50331: PUSH
50332: LD_INT 118
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: ST_TO_ADDR
50351: GO 52874
50353: LD_INT 7
50355: DOUBLE
50356: EQUAL
50357: IFTRUE 50361
50359: GO 50473
50361: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50362: LD_ADDR_VAR 0 2
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 4
50372: PUSH
50373: LD_INT 5
50375: PUSH
50376: LD_INT 7
50378: PUSH
50379: LD_INT 11
50381: PUSH
50382: LD_INT 12
50384: PUSH
50385: LD_INT 15
50387: PUSH
50388: LD_INT 16
50390: PUSH
50391: LD_INT 20
50393: PUSH
50394: LD_INT 21
50396: PUSH
50397: LD_INT 22
50399: PUSH
50400: LD_INT 23
50402: PUSH
50403: LD_INT 25
50405: PUSH
50406: LD_INT 26
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 101
50427: PUSH
50428: LD_INT 102
50430: PUSH
50431: LD_INT 103
50433: PUSH
50434: LD_INT 105
50436: PUSH
50437: LD_INT 106
50439: PUSH
50440: LD_INT 108
50442: PUSH
50443: LD_INT 112
50445: PUSH
50446: LD_INT 116
50448: PUSH
50449: LD_INT 117
50451: PUSH
50452: LD_INT 118
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: ST_TO_ADDR
50471: GO 52874
50473: LD_INT 8
50475: DOUBLE
50476: EQUAL
50477: IFTRUE 50481
50479: GO 50621
50481: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50482: LD_ADDR_VAR 0 2
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: LD_INT 4
50492: PUSH
50493: LD_INT 5
50495: PUSH
50496: LD_INT 6
50498: PUSH
50499: LD_INT 7
50501: PUSH
50502: LD_INT 8
50504: PUSH
50505: LD_INT 11
50507: PUSH
50508: LD_INT 12
50510: PUSH
50511: LD_INT 15
50513: PUSH
50514: LD_INT 16
50516: PUSH
50517: LD_INT 20
50519: PUSH
50520: LD_INT 21
50522: PUSH
50523: LD_INT 22
50525: PUSH
50526: LD_INT 23
50528: PUSH
50529: LD_INT 25
50531: PUSH
50532: LD_INT 26
50534: PUSH
50535: LD_INT 30
50537: PUSH
50538: LD_INT 31
50540: PUSH
50541: LD_INT 32
50543: PUSH
50544: LD_INT 36
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 101
50571: PUSH
50572: LD_INT 102
50574: PUSH
50575: LD_INT 103
50577: PUSH
50578: LD_INT 105
50580: PUSH
50581: LD_INT 106
50583: PUSH
50584: LD_INT 108
50586: PUSH
50587: LD_INT 109
50589: PUSH
50590: LD_INT 112
50592: PUSH
50593: LD_INT 116
50595: PUSH
50596: LD_INT 117
50598: PUSH
50599: LD_INT 118
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: ST_TO_ADDR
50619: GO 52874
50621: LD_INT 9
50623: DOUBLE
50624: EQUAL
50625: IFTRUE 50629
50627: GO 50777
50629: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50630: LD_ADDR_VAR 0 2
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 4
50640: PUSH
50641: LD_INT 5
50643: PUSH
50644: LD_INT 6
50646: PUSH
50647: LD_INT 7
50649: PUSH
50650: LD_INT 8
50652: PUSH
50653: LD_INT 11
50655: PUSH
50656: LD_INT 12
50658: PUSH
50659: LD_INT 15
50661: PUSH
50662: LD_INT 16
50664: PUSH
50665: LD_INT 20
50667: PUSH
50668: LD_INT 21
50670: PUSH
50671: LD_INT 22
50673: PUSH
50674: LD_INT 23
50676: PUSH
50677: LD_INT 25
50679: PUSH
50680: LD_INT 26
50682: PUSH
50683: LD_INT 28
50685: PUSH
50686: LD_INT 30
50688: PUSH
50689: LD_INT 31
50691: PUSH
50692: LD_INT 32
50694: PUSH
50695: LD_INT 36
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 101
50723: PUSH
50724: LD_INT 102
50726: PUSH
50727: LD_INT 103
50729: PUSH
50730: LD_INT 105
50732: PUSH
50733: LD_INT 106
50735: PUSH
50736: LD_INT 108
50738: PUSH
50739: LD_INT 109
50741: PUSH
50742: LD_INT 112
50744: PUSH
50745: LD_INT 114
50747: PUSH
50748: LD_INT 116
50750: PUSH
50751: LD_INT 117
50753: PUSH
50754: LD_INT 118
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: ST_TO_ADDR
50775: GO 52874
50777: LD_INT 10
50779: DOUBLE
50780: EQUAL
50781: IFTRUE 50785
50783: GO 50981
50785: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50786: LD_ADDR_VAR 0 2
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: LD_INT 4
50796: PUSH
50797: LD_INT 5
50799: PUSH
50800: LD_INT 6
50802: PUSH
50803: LD_INT 7
50805: PUSH
50806: LD_INT 8
50808: PUSH
50809: LD_INT 9
50811: PUSH
50812: LD_INT 10
50814: PUSH
50815: LD_INT 11
50817: PUSH
50818: LD_INT 12
50820: PUSH
50821: LD_INT 13
50823: PUSH
50824: LD_INT 14
50826: PUSH
50827: LD_INT 15
50829: PUSH
50830: LD_INT 16
50832: PUSH
50833: LD_INT 17
50835: PUSH
50836: LD_INT 18
50838: PUSH
50839: LD_INT 19
50841: PUSH
50842: LD_INT 20
50844: PUSH
50845: LD_INT 21
50847: PUSH
50848: LD_INT 22
50850: PUSH
50851: LD_INT 23
50853: PUSH
50854: LD_INT 24
50856: PUSH
50857: LD_INT 25
50859: PUSH
50860: LD_INT 26
50862: PUSH
50863: LD_INT 28
50865: PUSH
50866: LD_INT 30
50868: PUSH
50869: LD_INT 31
50871: PUSH
50872: LD_INT 32
50874: PUSH
50875: LD_INT 36
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 101
50911: PUSH
50912: LD_INT 102
50914: PUSH
50915: LD_INT 103
50917: PUSH
50918: LD_INT 104
50920: PUSH
50921: LD_INT 105
50923: PUSH
50924: LD_INT 106
50926: PUSH
50927: LD_INT 107
50929: PUSH
50930: LD_INT 108
50932: PUSH
50933: LD_INT 109
50935: PUSH
50936: LD_INT 110
50938: PUSH
50939: LD_INT 111
50941: PUSH
50942: LD_INT 112
50944: PUSH
50945: LD_INT 114
50947: PUSH
50948: LD_INT 116
50950: PUSH
50951: LD_INT 117
50953: PUSH
50954: LD_INT 118
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: ST_TO_ADDR
50979: GO 52874
50981: LD_INT 11
50983: DOUBLE
50984: EQUAL
50985: IFTRUE 50989
50987: GO 51193
50989: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
50990: LD_ADDR_VAR 0 2
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: LD_INT 4
51003: PUSH
51004: LD_INT 5
51006: PUSH
51007: LD_INT 6
51009: PUSH
51010: LD_INT 7
51012: PUSH
51013: LD_INT 8
51015: PUSH
51016: LD_INT 9
51018: PUSH
51019: LD_INT 10
51021: PUSH
51022: LD_INT 11
51024: PUSH
51025: LD_INT 12
51027: PUSH
51028: LD_INT 13
51030: PUSH
51031: LD_INT 14
51033: PUSH
51034: LD_INT 15
51036: PUSH
51037: LD_INT 16
51039: PUSH
51040: LD_INT 17
51042: PUSH
51043: LD_INT 18
51045: PUSH
51046: LD_INT 19
51048: PUSH
51049: LD_INT 20
51051: PUSH
51052: LD_INT 21
51054: PUSH
51055: LD_INT 22
51057: PUSH
51058: LD_INT 23
51060: PUSH
51061: LD_INT 24
51063: PUSH
51064: LD_INT 25
51066: PUSH
51067: LD_INT 26
51069: PUSH
51070: LD_INT 28
51072: PUSH
51073: LD_INT 30
51075: PUSH
51076: LD_INT 31
51078: PUSH
51079: LD_INT 32
51081: PUSH
51082: LD_INT 34
51084: PUSH
51085: LD_INT 36
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 101
51123: PUSH
51124: LD_INT 102
51126: PUSH
51127: LD_INT 103
51129: PUSH
51130: LD_INT 104
51132: PUSH
51133: LD_INT 105
51135: PUSH
51136: LD_INT 106
51138: PUSH
51139: LD_INT 107
51141: PUSH
51142: LD_INT 108
51144: PUSH
51145: LD_INT 109
51147: PUSH
51148: LD_INT 110
51150: PUSH
51151: LD_INT 111
51153: PUSH
51154: LD_INT 112
51156: PUSH
51157: LD_INT 114
51159: PUSH
51160: LD_INT 116
51162: PUSH
51163: LD_INT 117
51165: PUSH
51166: LD_INT 118
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: ST_TO_ADDR
51191: GO 52874
51193: LD_INT 12
51195: DOUBLE
51196: EQUAL
51197: IFTRUE 51201
51199: GO 51421
51201: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51202: LD_ADDR_VAR 0 2
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: LD_INT 3
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: LD_INT 5
51221: PUSH
51222: LD_INT 6
51224: PUSH
51225: LD_INT 7
51227: PUSH
51228: LD_INT 8
51230: PUSH
51231: LD_INT 9
51233: PUSH
51234: LD_INT 10
51236: PUSH
51237: LD_INT 11
51239: PUSH
51240: LD_INT 12
51242: PUSH
51243: LD_INT 13
51245: PUSH
51246: LD_INT 14
51248: PUSH
51249: LD_INT 15
51251: PUSH
51252: LD_INT 16
51254: PUSH
51255: LD_INT 17
51257: PUSH
51258: LD_INT 18
51260: PUSH
51261: LD_INT 19
51263: PUSH
51264: LD_INT 20
51266: PUSH
51267: LD_INT 21
51269: PUSH
51270: LD_INT 22
51272: PUSH
51273: LD_INT 23
51275: PUSH
51276: LD_INT 24
51278: PUSH
51279: LD_INT 25
51281: PUSH
51282: LD_INT 26
51284: PUSH
51285: LD_INT 27
51287: PUSH
51288: LD_INT 28
51290: PUSH
51291: LD_INT 30
51293: PUSH
51294: LD_INT 31
51296: PUSH
51297: LD_INT 32
51299: PUSH
51300: LD_INT 33
51302: PUSH
51303: LD_INT 34
51305: PUSH
51306: LD_INT 36
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 101
51347: PUSH
51348: LD_INT 102
51350: PUSH
51351: LD_INT 103
51353: PUSH
51354: LD_INT 104
51356: PUSH
51357: LD_INT 105
51359: PUSH
51360: LD_INT 106
51362: PUSH
51363: LD_INT 107
51365: PUSH
51366: LD_INT 108
51368: PUSH
51369: LD_INT 109
51371: PUSH
51372: LD_INT 110
51374: PUSH
51375: LD_INT 111
51377: PUSH
51378: LD_INT 112
51380: PUSH
51381: LD_INT 113
51383: PUSH
51384: LD_INT 114
51386: PUSH
51387: LD_INT 116
51389: PUSH
51390: LD_INT 117
51392: PUSH
51393: LD_INT 118
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: ST_TO_ADDR
51419: GO 52874
51421: LD_INT 13
51423: DOUBLE
51424: EQUAL
51425: IFTRUE 51429
51427: GO 51637
51429: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51430: LD_ADDR_VAR 0 2
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: LD_INT 3
51443: PUSH
51444: LD_INT 4
51446: PUSH
51447: LD_INT 5
51449: PUSH
51450: LD_INT 8
51452: PUSH
51453: LD_INT 9
51455: PUSH
51456: LD_INT 10
51458: PUSH
51459: LD_INT 11
51461: PUSH
51462: LD_INT 12
51464: PUSH
51465: LD_INT 14
51467: PUSH
51468: LD_INT 15
51470: PUSH
51471: LD_INT 16
51473: PUSH
51474: LD_INT 17
51476: PUSH
51477: LD_INT 18
51479: PUSH
51480: LD_INT 19
51482: PUSH
51483: LD_INT 20
51485: PUSH
51486: LD_INT 21
51488: PUSH
51489: LD_INT 22
51491: PUSH
51492: LD_INT 23
51494: PUSH
51495: LD_INT 24
51497: PUSH
51498: LD_INT 25
51500: PUSH
51501: LD_INT 26
51503: PUSH
51504: LD_INT 27
51506: PUSH
51507: LD_INT 28
51509: PUSH
51510: LD_INT 30
51512: PUSH
51513: LD_INT 31
51515: PUSH
51516: LD_INT 32
51518: PUSH
51519: LD_INT 33
51521: PUSH
51522: LD_INT 34
51524: PUSH
51525: LD_INT 36
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 101
51563: PUSH
51564: LD_INT 102
51566: PUSH
51567: LD_INT 103
51569: PUSH
51570: LD_INT 104
51572: PUSH
51573: LD_INT 105
51575: PUSH
51576: LD_INT 106
51578: PUSH
51579: LD_INT 107
51581: PUSH
51582: LD_INT 108
51584: PUSH
51585: LD_INT 109
51587: PUSH
51588: LD_INT 110
51590: PUSH
51591: LD_INT 111
51593: PUSH
51594: LD_INT 112
51596: PUSH
51597: LD_INT 113
51599: PUSH
51600: LD_INT 114
51602: PUSH
51603: LD_INT 116
51605: PUSH
51606: LD_INT 117
51608: PUSH
51609: LD_INT 118
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: ST_TO_ADDR
51635: GO 52874
51637: LD_INT 14
51639: DOUBLE
51640: EQUAL
51641: IFTRUE 51645
51643: GO 51869
51645: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51646: LD_ADDR_VAR 0 2
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 3
51659: PUSH
51660: LD_INT 4
51662: PUSH
51663: LD_INT 5
51665: PUSH
51666: LD_INT 6
51668: PUSH
51669: LD_INT 7
51671: PUSH
51672: LD_INT 8
51674: PUSH
51675: LD_INT 9
51677: PUSH
51678: LD_INT 10
51680: PUSH
51681: LD_INT 11
51683: PUSH
51684: LD_INT 12
51686: PUSH
51687: LD_INT 13
51689: PUSH
51690: LD_INT 14
51692: PUSH
51693: LD_INT 15
51695: PUSH
51696: LD_INT 16
51698: PUSH
51699: LD_INT 17
51701: PUSH
51702: LD_INT 18
51704: PUSH
51705: LD_INT 19
51707: PUSH
51708: LD_INT 20
51710: PUSH
51711: LD_INT 21
51713: PUSH
51714: LD_INT 22
51716: PUSH
51717: LD_INT 23
51719: PUSH
51720: LD_INT 24
51722: PUSH
51723: LD_INT 25
51725: PUSH
51726: LD_INT 26
51728: PUSH
51729: LD_INT 27
51731: PUSH
51732: LD_INT 28
51734: PUSH
51735: LD_INT 29
51737: PUSH
51738: LD_INT 30
51740: PUSH
51741: LD_INT 31
51743: PUSH
51744: LD_INT 32
51746: PUSH
51747: LD_INT 33
51749: PUSH
51750: LD_INT 34
51752: PUSH
51753: LD_INT 36
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 101
51795: PUSH
51796: LD_INT 102
51798: PUSH
51799: LD_INT 103
51801: PUSH
51802: LD_INT 104
51804: PUSH
51805: LD_INT 105
51807: PUSH
51808: LD_INT 106
51810: PUSH
51811: LD_INT 107
51813: PUSH
51814: LD_INT 108
51816: PUSH
51817: LD_INT 109
51819: PUSH
51820: LD_INT 110
51822: PUSH
51823: LD_INT 111
51825: PUSH
51826: LD_INT 112
51828: PUSH
51829: LD_INT 113
51831: PUSH
51832: LD_INT 114
51834: PUSH
51835: LD_INT 116
51837: PUSH
51838: LD_INT 117
51840: PUSH
51841: LD_INT 118
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: ST_TO_ADDR
51867: GO 52874
51869: LD_INT 15
51871: DOUBLE
51872: EQUAL
51873: IFTRUE 51877
51875: GO 52101
51877: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51878: LD_ADDR_VAR 0 2
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: LD_INT 4
51894: PUSH
51895: LD_INT 5
51897: PUSH
51898: LD_INT 6
51900: PUSH
51901: LD_INT 7
51903: PUSH
51904: LD_INT 8
51906: PUSH
51907: LD_INT 9
51909: PUSH
51910: LD_INT 10
51912: PUSH
51913: LD_INT 11
51915: PUSH
51916: LD_INT 12
51918: PUSH
51919: LD_INT 13
51921: PUSH
51922: LD_INT 14
51924: PUSH
51925: LD_INT 15
51927: PUSH
51928: LD_INT 16
51930: PUSH
51931: LD_INT 17
51933: PUSH
51934: LD_INT 18
51936: PUSH
51937: LD_INT 19
51939: PUSH
51940: LD_INT 20
51942: PUSH
51943: LD_INT 21
51945: PUSH
51946: LD_INT 22
51948: PUSH
51949: LD_INT 23
51951: PUSH
51952: LD_INT 24
51954: PUSH
51955: LD_INT 25
51957: PUSH
51958: LD_INT 26
51960: PUSH
51961: LD_INT 27
51963: PUSH
51964: LD_INT 28
51966: PUSH
51967: LD_INT 29
51969: PUSH
51970: LD_INT 30
51972: PUSH
51973: LD_INT 31
51975: PUSH
51976: LD_INT 32
51978: PUSH
51979: LD_INT 33
51981: PUSH
51982: LD_INT 34
51984: PUSH
51985: LD_INT 36
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 101
52027: PUSH
52028: LD_INT 102
52030: PUSH
52031: LD_INT 103
52033: PUSH
52034: LD_INT 104
52036: PUSH
52037: LD_INT 105
52039: PUSH
52040: LD_INT 106
52042: PUSH
52043: LD_INT 107
52045: PUSH
52046: LD_INT 108
52048: PUSH
52049: LD_INT 109
52051: PUSH
52052: LD_INT 110
52054: PUSH
52055: LD_INT 111
52057: PUSH
52058: LD_INT 112
52060: PUSH
52061: LD_INT 113
52063: PUSH
52064: LD_INT 114
52066: PUSH
52067: LD_INT 116
52069: PUSH
52070: LD_INT 117
52072: PUSH
52073: LD_INT 118
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: ST_TO_ADDR
52099: GO 52874
52101: LD_INT 16
52103: DOUBLE
52104: EQUAL
52105: IFTRUE 52109
52107: GO 52245
52109: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52110: LD_ADDR_VAR 0 2
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 4
52120: PUSH
52121: LD_INT 5
52123: PUSH
52124: LD_INT 7
52126: PUSH
52127: LD_INT 11
52129: PUSH
52130: LD_INT 12
52132: PUSH
52133: LD_INT 15
52135: PUSH
52136: LD_INT 16
52138: PUSH
52139: LD_INT 20
52141: PUSH
52142: LD_INT 21
52144: PUSH
52145: LD_INT 22
52147: PUSH
52148: LD_INT 23
52150: PUSH
52151: LD_INT 25
52153: PUSH
52154: LD_INT 26
52156: PUSH
52157: LD_INT 30
52159: PUSH
52160: LD_INT 31
52162: PUSH
52163: LD_INT 32
52165: PUSH
52166: LD_INT 33
52168: PUSH
52169: LD_INT 34
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 101
52195: PUSH
52196: LD_INT 102
52198: PUSH
52199: LD_INT 103
52201: PUSH
52202: LD_INT 106
52204: PUSH
52205: LD_INT 108
52207: PUSH
52208: LD_INT 112
52210: PUSH
52211: LD_INT 113
52213: PUSH
52214: LD_INT 114
52216: PUSH
52217: LD_INT 116
52219: PUSH
52220: LD_INT 117
52222: PUSH
52223: LD_INT 118
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: ST_TO_ADDR
52243: GO 52874
52245: LD_INT 17
52247: DOUBLE
52248: EQUAL
52249: IFTRUE 52253
52251: GO 52477
52253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52254: LD_ADDR_VAR 0 2
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: LD_INT 3
52267: PUSH
52268: LD_INT 4
52270: PUSH
52271: LD_INT 5
52273: PUSH
52274: LD_INT 6
52276: PUSH
52277: LD_INT 7
52279: PUSH
52280: LD_INT 8
52282: PUSH
52283: LD_INT 9
52285: PUSH
52286: LD_INT 10
52288: PUSH
52289: LD_INT 11
52291: PUSH
52292: LD_INT 12
52294: PUSH
52295: LD_INT 13
52297: PUSH
52298: LD_INT 14
52300: PUSH
52301: LD_INT 15
52303: PUSH
52304: LD_INT 16
52306: PUSH
52307: LD_INT 17
52309: PUSH
52310: LD_INT 18
52312: PUSH
52313: LD_INT 19
52315: PUSH
52316: LD_INT 20
52318: PUSH
52319: LD_INT 21
52321: PUSH
52322: LD_INT 22
52324: PUSH
52325: LD_INT 23
52327: PUSH
52328: LD_INT 24
52330: PUSH
52331: LD_INT 25
52333: PUSH
52334: LD_INT 26
52336: PUSH
52337: LD_INT 27
52339: PUSH
52340: LD_INT 28
52342: PUSH
52343: LD_INT 29
52345: PUSH
52346: LD_INT 30
52348: PUSH
52349: LD_INT 31
52351: PUSH
52352: LD_INT 32
52354: PUSH
52355: LD_INT 33
52357: PUSH
52358: LD_INT 34
52360: PUSH
52361: LD_INT 36
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: LIST
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 101
52403: PUSH
52404: LD_INT 102
52406: PUSH
52407: LD_INT 103
52409: PUSH
52410: LD_INT 104
52412: PUSH
52413: LD_INT 105
52415: PUSH
52416: LD_INT 106
52418: PUSH
52419: LD_INT 107
52421: PUSH
52422: LD_INT 108
52424: PUSH
52425: LD_INT 109
52427: PUSH
52428: LD_INT 110
52430: PUSH
52431: LD_INT 111
52433: PUSH
52434: LD_INT 112
52436: PUSH
52437: LD_INT 113
52439: PUSH
52440: LD_INT 114
52442: PUSH
52443: LD_INT 116
52445: PUSH
52446: LD_INT 117
52448: PUSH
52449: LD_INT 118
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: ST_TO_ADDR
52475: GO 52874
52477: LD_INT 18
52479: DOUBLE
52480: EQUAL
52481: IFTRUE 52485
52483: GO 52633
52485: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52486: LD_ADDR_VAR 0 2
52490: PUSH
52491: LD_INT 2
52493: PUSH
52494: LD_INT 4
52496: PUSH
52497: LD_INT 5
52499: PUSH
52500: LD_INT 7
52502: PUSH
52503: LD_INT 11
52505: PUSH
52506: LD_INT 12
52508: PUSH
52509: LD_INT 15
52511: PUSH
52512: LD_INT 16
52514: PUSH
52515: LD_INT 20
52517: PUSH
52518: LD_INT 21
52520: PUSH
52521: LD_INT 22
52523: PUSH
52524: LD_INT 23
52526: PUSH
52527: LD_INT 25
52529: PUSH
52530: LD_INT 26
52532: PUSH
52533: LD_INT 30
52535: PUSH
52536: LD_INT 31
52538: PUSH
52539: LD_INT 32
52541: PUSH
52542: LD_INT 33
52544: PUSH
52545: LD_INT 34
52547: PUSH
52548: LD_INT 35
52550: PUSH
52551: LD_INT 36
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 101
52579: PUSH
52580: LD_INT 102
52582: PUSH
52583: LD_INT 103
52585: PUSH
52586: LD_INT 106
52588: PUSH
52589: LD_INT 108
52591: PUSH
52592: LD_INT 112
52594: PUSH
52595: LD_INT 113
52597: PUSH
52598: LD_INT 114
52600: PUSH
52601: LD_INT 115
52603: PUSH
52604: LD_INT 116
52606: PUSH
52607: LD_INT 117
52609: PUSH
52610: LD_INT 118
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: ST_TO_ADDR
52631: GO 52874
52633: LD_INT 19
52635: DOUBLE
52636: EQUAL
52637: IFTRUE 52641
52639: GO 52873
52641: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52642: LD_ADDR_VAR 0 2
52646: PUSH
52647: LD_INT 1
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: LD_INT 4
52658: PUSH
52659: LD_INT 5
52661: PUSH
52662: LD_INT 6
52664: PUSH
52665: LD_INT 7
52667: PUSH
52668: LD_INT 8
52670: PUSH
52671: LD_INT 9
52673: PUSH
52674: LD_INT 10
52676: PUSH
52677: LD_INT 11
52679: PUSH
52680: LD_INT 12
52682: PUSH
52683: LD_INT 13
52685: PUSH
52686: LD_INT 14
52688: PUSH
52689: LD_INT 15
52691: PUSH
52692: LD_INT 16
52694: PUSH
52695: LD_INT 17
52697: PUSH
52698: LD_INT 18
52700: PUSH
52701: LD_INT 19
52703: PUSH
52704: LD_INT 20
52706: PUSH
52707: LD_INT 21
52709: PUSH
52710: LD_INT 22
52712: PUSH
52713: LD_INT 23
52715: PUSH
52716: LD_INT 24
52718: PUSH
52719: LD_INT 25
52721: PUSH
52722: LD_INT 26
52724: PUSH
52725: LD_INT 27
52727: PUSH
52728: LD_INT 28
52730: PUSH
52731: LD_INT 29
52733: PUSH
52734: LD_INT 30
52736: PUSH
52737: LD_INT 31
52739: PUSH
52740: LD_INT 32
52742: PUSH
52743: LD_INT 33
52745: PUSH
52746: LD_INT 34
52748: PUSH
52749: LD_INT 35
52751: PUSH
52752: LD_INT 36
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 101
52795: PUSH
52796: LD_INT 102
52798: PUSH
52799: LD_INT 103
52801: PUSH
52802: LD_INT 104
52804: PUSH
52805: LD_INT 105
52807: PUSH
52808: LD_INT 106
52810: PUSH
52811: LD_INT 107
52813: PUSH
52814: LD_INT 108
52816: PUSH
52817: LD_INT 109
52819: PUSH
52820: LD_INT 110
52822: PUSH
52823: LD_INT 111
52825: PUSH
52826: LD_INT 112
52828: PUSH
52829: LD_INT 113
52831: PUSH
52832: LD_INT 114
52834: PUSH
52835: LD_INT 115
52837: PUSH
52838: LD_INT 116
52840: PUSH
52841: LD_INT 117
52843: PUSH
52844: LD_INT 118
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: ST_TO_ADDR
52871: GO 52874
52873: POP
// end else
52874: GO 53105
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52876: LD_ADDR_VAR 0 2
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 4
52892: PUSH
52893: LD_INT 5
52895: PUSH
52896: LD_INT 6
52898: PUSH
52899: LD_INT 7
52901: PUSH
52902: LD_INT 8
52904: PUSH
52905: LD_INT 9
52907: PUSH
52908: LD_INT 10
52910: PUSH
52911: LD_INT 11
52913: PUSH
52914: LD_INT 12
52916: PUSH
52917: LD_INT 13
52919: PUSH
52920: LD_INT 14
52922: PUSH
52923: LD_INT 15
52925: PUSH
52926: LD_INT 16
52928: PUSH
52929: LD_INT 17
52931: PUSH
52932: LD_INT 18
52934: PUSH
52935: LD_INT 19
52937: PUSH
52938: LD_INT 20
52940: PUSH
52941: LD_INT 21
52943: PUSH
52944: LD_INT 22
52946: PUSH
52947: LD_INT 23
52949: PUSH
52950: LD_INT 24
52952: PUSH
52953: LD_INT 25
52955: PUSH
52956: LD_INT 26
52958: PUSH
52959: LD_INT 27
52961: PUSH
52962: LD_INT 28
52964: PUSH
52965: LD_INT 29
52967: PUSH
52968: LD_INT 30
52970: PUSH
52971: LD_INT 31
52973: PUSH
52974: LD_INT 32
52976: PUSH
52977: LD_INT 33
52979: PUSH
52980: LD_INT 34
52982: PUSH
52983: LD_INT 35
52985: PUSH
52986: LD_INT 36
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 101
53029: PUSH
53030: LD_INT 102
53032: PUSH
53033: LD_INT 103
53035: PUSH
53036: LD_INT 104
53038: PUSH
53039: LD_INT 105
53041: PUSH
53042: LD_INT 106
53044: PUSH
53045: LD_INT 107
53047: PUSH
53048: LD_INT 108
53050: PUSH
53051: LD_INT 109
53053: PUSH
53054: LD_INT 110
53056: PUSH
53057: LD_INT 111
53059: PUSH
53060: LD_INT 112
53062: PUSH
53063: LD_INT 113
53065: PUSH
53066: LD_INT 114
53068: PUSH
53069: LD_INT 115
53071: PUSH
53072: LD_INT 116
53074: PUSH
53075: LD_INT 117
53077: PUSH
53078: LD_INT 118
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: ST_TO_ADDR
// if result then
53105: LD_VAR 0 2
53109: IFFALSE 53895
// begin normal :=  ;
53111: LD_ADDR_VAR 0 5
53115: PUSH
53116: LD_STRING 
53118: ST_TO_ADDR
// hardcore :=  ;
53119: LD_ADDR_VAR 0 6
53123: PUSH
53124: LD_STRING 
53126: ST_TO_ADDR
// active :=  ;
53127: LD_ADDR_VAR 0 7
53131: PUSH
53132: LD_STRING 
53134: ST_TO_ADDR
// for i = 1 to normalCounter do
53135: LD_ADDR_VAR 0 8
53139: PUSH
53140: DOUBLE
53141: LD_INT 1
53143: DEC
53144: ST_TO_ADDR
53145: LD_EXP 31
53149: PUSH
53150: FOR_TO
53151: IFFALSE 53252
// begin tmp := 0 ;
53153: LD_ADDR_VAR 0 3
53157: PUSH
53158: LD_STRING 0
53160: ST_TO_ADDR
// if result [ 1 ] then
53161: LD_VAR 0 2
53165: PUSH
53166: LD_INT 1
53168: ARRAY
53169: IFFALSE 53234
// if result [ 1 ] [ 1 ] = i then
53171: LD_VAR 0 2
53175: PUSH
53176: LD_INT 1
53178: ARRAY
53179: PUSH
53180: LD_INT 1
53182: ARRAY
53183: PUSH
53184: LD_VAR 0 8
53188: EQUAL
53189: IFFALSE 53234
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53191: LD_ADDR_VAR 0 2
53195: PUSH
53196: LD_VAR 0 2
53200: PPUSH
53201: LD_INT 1
53203: PPUSH
53204: LD_VAR 0 2
53208: PUSH
53209: LD_INT 1
53211: ARRAY
53212: PPUSH
53213: LD_INT 1
53215: PPUSH
53216: CALL_OW 3
53220: PPUSH
53221: CALL_OW 1
53225: ST_TO_ADDR
// tmp := 1 ;
53226: LD_ADDR_VAR 0 3
53230: PUSH
53231: LD_STRING 1
53233: ST_TO_ADDR
// end ; normal := normal & tmp ;
53234: LD_ADDR_VAR 0 5
53238: PUSH
53239: LD_VAR 0 5
53243: PUSH
53244: LD_VAR 0 3
53248: STR
53249: ST_TO_ADDR
// end ;
53250: GO 53150
53252: POP
53253: POP
// for i = 1 to hardcoreCounter do
53254: LD_ADDR_VAR 0 8
53258: PUSH
53259: DOUBLE
53260: LD_INT 1
53262: DEC
53263: ST_TO_ADDR
53264: LD_EXP 32
53268: PUSH
53269: FOR_TO
53270: IFFALSE 53375
// begin tmp := 0 ;
53272: LD_ADDR_VAR 0 3
53276: PUSH
53277: LD_STRING 0
53279: ST_TO_ADDR
// if result [ 2 ] then
53280: LD_VAR 0 2
53284: PUSH
53285: LD_INT 2
53287: ARRAY
53288: IFFALSE 53357
// if result [ 2 ] [ 1 ] = 100 + i then
53290: LD_VAR 0 2
53294: PUSH
53295: LD_INT 2
53297: ARRAY
53298: PUSH
53299: LD_INT 1
53301: ARRAY
53302: PUSH
53303: LD_INT 100
53305: PUSH
53306: LD_VAR 0 8
53310: PLUS
53311: EQUAL
53312: IFFALSE 53357
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53314: LD_ADDR_VAR 0 2
53318: PUSH
53319: LD_VAR 0 2
53323: PPUSH
53324: LD_INT 2
53326: PPUSH
53327: LD_VAR 0 2
53331: PUSH
53332: LD_INT 2
53334: ARRAY
53335: PPUSH
53336: LD_INT 1
53338: PPUSH
53339: CALL_OW 3
53343: PPUSH
53344: CALL_OW 1
53348: ST_TO_ADDR
// tmp := 1 ;
53349: LD_ADDR_VAR 0 3
53353: PUSH
53354: LD_STRING 1
53356: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53357: LD_ADDR_VAR 0 6
53361: PUSH
53362: LD_VAR 0 6
53366: PUSH
53367: LD_VAR 0 3
53371: STR
53372: ST_TO_ADDR
// end ;
53373: GO 53269
53375: POP
53376: POP
// if isGameLoad then
53377: LD_VAR 0 1
53381: IFFALSE 53856
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53383: LD_ADDR_VAR 0 4
53387: PUSH
53388: LD_EXP 35
53392: PUSH
53393: LD_EXP 34
53397: PUSH
53398: LD_EXP 36
53402: PUSH
53403: LD_EXP 33
53407: PUSH
53408: LD_EXP 37
53412: PUSH
53413: LD_EXP 38
53417: PUSH
53418: LD_EXP 39
53422: PUSH
53423: LD_EXP 40
53427: PUSH
53428: LD_EXP 41
53432: PUSH
53433: LD_EXP 42
53437: PUSH
53438: LD_EXP 43
53442: PUSH
53443: LD_EXP 44
53447: PUSH
53448: LD_EXP 45
53452: PUSH
53453: LD_EXP 46
53457: PUSH
53458: LD_EXP 54
53462: PUSH
53463: LD_EXP 55
53467: PUSH
53468: LD_EXP 56
53472: PUSH
53473: LD_EXP 57
53477: PUSH
53478: LD_EXP 59
53482: PUSH
53483: LD_EXP 60
53487: PUSH
53488: LD_EXP 61
53492: PUSH
53493: LD_EXP 64
53497: PUSH
53498: LD_EXP 66
53502: PUSH
53503: LD_EXP 67
53507: PUSH
53508: LD_EXP 68
53512: PUSH
53513: LD_EXP 70
53517: PUSH
53518: LD_EXP 71
53522: PUSH
53523: LD_EXP 74
53527: PUSH
53528: LD_EXP 75
53532: PUSH
53533: LD_EXP 76
53537: PUSH
53538: LD_EXP 77
53542: PUSH
53543: LD_EXP 78
53547: PUSH
53548: LD_EXP 79
53552: PUSH
53553: LD_EXP 80
53557: PUSH
53558: LD_EXP 81
53562: PUSH
53563: LD_EXP 82
53567: PUSH
53568: LD_EXP 47
53572: PUSH
53573: LD_EXP 48
53577: PUSH
53578: LD_EXP 51
53582: PUSH
53583: LD_EXP 52
53587: PUSH
53588: LD_EXP 53
53592: PUSH
53593: LD_EXP 49
53597: PUSH
53598: LD_EXP 50
53602: PUSH
53603: LD_EXP 58
53607: PUSH
53608: LD_EXP 62
53612: PUSH
53613: LD_EXP 63
53617: PUSH
53618: LD_EXP 65
53622: PUSH
53623: LD_EXP 69
53627: PUSH
53628: LD_EXP 72
53632: PUSH
53633: LD_EXP 73
53637: PUSH
53638: LD_EXP 83
53642: PUSH
53643: LD_EXP 84
53647: PUSH
53648: LD_EXP 85
53652: PUSH
53653: LD_EXP 86
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: ST_TO_ADDR
// tmp :=  ;
53714: LD_ADDR_VAR 0 3
53718: PUSH
53719: LD_STRING 
53721: ST_TO_ADDR
// for i = 1 to normalCounter do
53722: LD_ADDR_VAR 0 8
53726: PUSH
53727: DOUBLE
53728: LD_INT 1
53730: DEC
53731: ST_TO_ADDR
53732: LD_EXP 31
53736: PUSH
53737: FOR_TO
53738: IFFALSE 53774
// begin if flags [ i ] then
53740: LD_VAR 0 4
53744: PUSH
53745: LD_VAR 0 8
53749: ARRAY
53750: IFFALSE 53772
// tmp := tmp & i & ; ;
53752: LD_ADDR_VAR 0 3
53756: PUSH
53757: LD_VAR 0 3
53761: PUSH
53762: LD_VAR 0 8
53766: STR
53767: PUSH
53768: LD_STRING ;
53770: STR
53771: ST_TO_ADDR
// end ;
53772: GO 53737
53774: POP
53775: POP
// for i = 1 to hardcoreCounter do
53776: LD_ADDR_VAR 0 8
53780: PUSH
53781: DOUBLE
53782: LD_INT 1
53784: DEC
53785: ST_TO_ADDR
53786: LD_EXP 32
53790: PUSH
53791: FOR_TO
53792: IFFALSE 53838
// begin if flags [ normalCounter + i ] then
53794: LD_VAR 0 4
53798: PUSH
53799: LD_EXP 31
53803: PUSH
53804: LD_VAR 0 8
53808: PLUS
53809: ARRAY
53810: IFFALSE 53836
// tmp := tmp & ( 100 + i ) & ; ;
53812: LD_ADDR_VAR 0 3
53816: PUSH
53817: LD_VAR 0 3
53821: PUSH
53822: LD_INT 100
53824: PUSH
53825: LD_VAR 0 8
53829: PLUS
53830: STR
53831: PUSH
53832: LD_STRING ;
53834: STR
53835: ST_TO_ADDR
// end ;
53836: GO 53791
53838: POP
53839: POP
// if tmp then
53840: LD_VAR 0 3
53844: IFFALSE 53856
// active := tmp ;
53846: LD_ADDR_VAR 0 7
53850: PUSH
53851: LD_VAR 0 3
53855: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53856: LD_STRING getStreamItemsFromMission("
53858: PUSH
53859: LD_VAR 0 5
53863: STR
53864: PUSH
53865: LD_STRING ","
53867: STR
53868: PUSH
53869: LD_VAR 0 6
53873: STR
53874: PUSH
53875: LD_STRING ","
53877: STR
53878: PUSH
53879: LD_VAR 0 7
53883: STR
53884: PUSH
53885: LD_STRING ")
53887: STR
53888: PPUSH
53889: CALL_OW 559
// end else
53893: GO 53902
// ToLua ( getStreamItemsFromMission("","","") ) ;
53895: LD_STRING getStreamItemsFromMission("","","")
53897: PPUSH
53898: CALL_OW 559
// end ;
53902: LD_VAR 0 2
53906: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53907: LD_EXP 30
53911: PUSH
53912: LD_EXP 35
53916: AND
53917: IFFALSE 54041
53919: GO 53921
53921: DISABLE
53922: LD_INT 0
53924: PPUSH
53925: PPUSH
// begin enable ;
53926: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53927: LD_ADDR_VAR 0 2
53931: PUSH
53932: LD_INT 22
53934: PUSH
53935: LD_OWVAR 2
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 2
53946: PUSH
53947: LD_INT 34
53949: PUSH
53950: LD_INT 7
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 34
53959: PUSH
53960: LD_INT 45
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 34
53969: PUSH
53970: LD_INT 28
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 34
53979: PUSH
53980: LD_INT 47
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PPUSH
53998: CALL_OW 69
54002: ST_TO_ADDR
// if not tmp then
54003: LD_VAR 0 2
54007: NOT
54008: IFFALSE 54012
// exit ;
54010: GO 54041
// for i in tmp do
54012: LD_ADDR_VAR 0 1
54016: PUSH
54017: LD_VAR 0 2
54021: PUSH
54022: FOR_IN
54023: IFFALSE 54039
// begin SetLives ( i , 0 ) ;
54025: LD_VAR 0 1
54029: PPUSH
54030: LD_INT 0
54032: PPUSH
54033: CALL_OW 234
// end ;
54037: GO 54022
54039: POP
54040: POP
// end ;
54041: PPOPN 2
54043: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54044: LD_EXP 30
54048: PUSH
54049: LD_EXP 36
54053: AND
54054: IFFALSE 54138
54056: GO 54058
54058: DISABLE
54059: LD_INT 0
54061: PPUSH
54062: PPUSH
// begin enable ;
54063: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54064: LD_ADDR_VAR 0 2
54068: PUSH
54069: LD_INT 22
54071: PUSH
54072: LD_OWVAR 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 32
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PPUSH
54095: CALL_OW 69
54099: ST_TO_ADDR
// if not tmp then
54100: LD_VAR 0 2
54104: NOT
54105: IFFALSE 54109
// exit ;
54107: GO 54138
// for i in tmp do
54109: LD_ADDR_VAR 0 1
54113: PUSH
54114: LD_VAR 0 2
54118: PUSH
54119: FOR_IN
54120: IFFALSE 54136
// begin SetLives ( i , 0 ) ;
54122: LD_VAR 0 1
54126: PPUSH
54127: LD_INT 0
54129: PPUSH
54130: CALL_OW 234
// end ;
54134: GO 54119
54136: POP
54137: POP
// end ;
54138: PPOPN 2
54140: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54141: LD_EXP 30
54145: PUSH
54146: LD_EXP 33
54150: AND
54151: IFFALSE 54244
54153: GO 54155
54155: DISABLE
54156: LD_INT 0
54158: PPUSH
// begin enable ;
54159: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54160: LD_ADDR_VAR 0 1
54164: PUSH
54165: LD_INT 22
54167: PUSH
54168: LD_OWVAR 2
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 2
54179: PUSH
54180: LD_INT 25
54182: PUSH
54183: LD_INT 5
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 25
54192: PUSH
54193: LD_INT 9
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 25
54202: PUSH
54203: LD_INT 8
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PPUSH
54220: CALL_OW 69
54224: PUSH
54225: FOR_IN
54226: IFFALSE 54242
// begin SetClass ( i , 1 ) ;
54228: LD_VAR 0 1
54232: PPUSH
54233: LD_INT 1
54235: PPUSH
54236: CALL_OW 336
// end ;
54240: GO 54225
54242: POP
54243: POP
// end ;
54244: PPOPN 1
54246: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54247: LD_EXP 30
54251: PUSH
54252: LD_EXP 34
54256: AND
54257: PUSH
54258: LD_OWVAR 65
54262: PUSH
54263: LD_INT 7
54265: LESS
54266: AND
54267: IFFALSE 54281
54269: GO 54271
54271: DISABLE
// begin enable ;
54272: ENABLE
// game_speed := 7 ;
54273: LD_ADDR_OWVAR 65
54277: PUSH
54278: LD_INT 7
54280: ST_TO_ADDR
// end ;
54281: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54282: LD_EXP 30
54286: PUSH
54287: LD_EXP 37
54291: AND
54292: IFFALSE 54494
54294: GO 54296
54296: DISABLE
54297: LD_INT 0
54299: PPUSH
54300: PPUSH
54301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54302: LD_ADDR_VAR 0 3
54306: PUSH
54307: LD_INT 81
54309: PUSH
54310: LD_OWVAR 2
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 21
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PPUSH
54333: CALL_OW 69
54337: ST_TO_ADDR
// if not tmp then
54338: LD_VAR 0 3
54342: NOT
54343: IFFALSE 54347
// exit ;
54345: GO 54494
// if tmp > 5 then
54347: LD_VAR 0 3
54351: PUSH
54352: LD_INT 5
54354: GREATER
54355: IFFALSE 54367
// k := 5 else
54357: LD_ADDR_VAR 0 2
54361: PUSH
54362: LD_INT 5
54364: ST_TO_ADDR
54365: GO 54377
// k := tmp ;
54367: LD_ADDR_VAR 0 2
54371: PUSH
54372: LD_VAR 0 3
54376: ST_TO_ADDR
// for i := 1 to k do
54377: LD_ADDR_VAR 0 1
54381: PUSH
54382: DOUBLE
54383: LD_INT 1
54385: DEC
54386: ST_TO_ADDR
54387: LD_VAR 0 2
54391: PUSH
54392: FOR_TO
54393: IFFALSE 54492
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54395: LD_VAR 0 3
54399: PUSH
54400: LD_VAR 0 1
54404: ARRAY
54405: PPUSH
54406: LD_VAR 0 1
54410: PUSH
54411: LD_INT 4
54413: MOD
54414: PUSH
54415: LD_INT 1
54417: PLUS
54418: PPUSH
54419: CALL_OW 259
54423: PUSH
54424: LD_INT 10
54426: LESS
54427: IFFALSE 54490
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54429: LD_VAR 0 3
54433: PUSH
54434: LD_VAR 0 1
54438: ARRAY
54439: PPUSH
54440: LD_VAR 0 1
54444: PUSH
54445: LD_INT 4
54447: MOD
54448: PUSH
54449: LD_INT 1
54451: PLUS
54452: PPUSH
54453: LD_VAR 0 3
54457: PUSH
54458: LD_VAR 0 1
54462: ARRAY
54463: PPUSH
54464: LD_VAR 0 1
54468: PUSH
54469: LD_INT 4
54471: MOD
54472: PUSH
54473: LD_INT 1
54475: PLUS
54476: PPUSH
54477: CALL_OW 259
54481: PUSH
54482: LD_INT 1
54484: PLUS
54485: PPUSH
54486: CALL_OW 237
54490: GO 54392
54492: POP
54493: POP
// end ;
54494: PPOPN 3
54496: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54497: LD_EXP 30
54501: PUSH
54502: LD_EXP 38
54506: AND
54507: IFFALSE 54527
54509: GO 54511
54511: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54512: LD_INT 4
54514: PPUSH
54515: LD_OWVAR 2
54519: PPUSH
54520: LD_INT 0
54522: PPUSH
54523: CALL_OW 324
54527: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54528: LD_EXP 30
54532: PUSH
54533: LD_EXP 67
54537: AND
54538: IFFALSE 54558
54540: GO 54542
54542: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54543: LD_INT 19
54545: PPUSH
54546: LD_OWVAR 2
54550: PPUSH
54551: LD_INT 0
54553: PPUSH
54554: CALL_OW 324
54558: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54559: LD_EXP 30
54563: PUSH
54564: LD_EXP 39
54568: AND
54569: IFFALSE 54671
54571: GO 54573
54573: DISABLE
54574: LD_INT 0
54576: PPUSH
54577: PPUSH
// begin enable ;
54578: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54579: LD_ADDR_VAR 0 2
54583: PUSH
54584: LD_INT 22
54586: PUSH
54587: LD_OWVAR 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 34
54601: PUSH
54602: LD_INT 11
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 34
54611: PUSH
54612: LD_INT 30
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: LIST
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PPUSH
54628: CALL_OW 69
54632: ST_TO_ADDR
// if not tmp then
54633: LD_VAR 0 2
54637: NOT
54638: IFFALSE 54642
// exit ;
54640: GO 54671
// for i in tmp do
54642: LD_ADDR_VAR 0 1
54646: PUSH
54647: LD_VAR 0 2
54651: PUSH
54652: FOR_IN
54653: IFFALSE 54669
// begin SetLives ( i , 0 ) ;
54655: LD_VAR 0 1
54659: PPUSH
54660: LD_INT 0
54662: PPUSH
54663: CALL_OW 234
// end ;
54667: GO 54652
54669: POP
54670: POP
// end ;
54671: PPOPN 2
54673: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54674: LD_EXP 30
54678: PUSH
54679: LD_EXP 40
54683: AND
54684: IFFALSE 54704
54686: GO 54688
54688: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54689: LD_INT 32
54691: PPUSH
54692: LD_OWVAR 2
54696: PPUSH
54697: LD_INT 0
54699: PPUSH
54700: CALL_OW 324
54704: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54705: LD_EXP 30
54709: PUSH
54710: LD_EXP 41
54714: AND
54715: IFFALSE 54896
54717: GO 54719
54719: DISABLE
54720: LD_INT 0
54722: PPUSH
54723: PPUSH
54724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54725: LD_ADDR_VAR 0 2
54729: PUSH
54730: LD_INT 22
54732: PUSH
54733: LD_OWVAR 2
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 33
54744: PUSH
54745: LD_INT 3
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PPUSH
54756: CALL_OW 69
54760: ST_TO_ADDR
// if not tmp then
54761: LD_VAR 0 2
54765: NOT
54766: IFFALSE 54770
// exit ;
54768: GO 54896
// side := 0 ;
54770: LD_ADDR_VAR 0 3
54774: PUSH
54775: LD_INT 0
54777: ST_TO_ADDR
// for i := 1 to 8 do
54778: LD_ADDR_VAR 0 1
54782: PUSH
54783: DOUBLE
54784: LD_INT 1
54786: DEC
54787: ST_TO_ADDR
54788: LD_INT 8
54790: PUSH
54791: FOR_TO
54792: IFFALSE 54840
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54794: LD_OWVAR 2
54798: PUSH
54799: LD_VAR 0 1
54803: NONEQUAL
54804: PUSH
54805: LD_OWVAR 2
54809: PPUSH
54810: LD_VAR 0 1
54814: PPUSH
54815: CALL_OW 81
54819: PUSH
54820: LD_INT 2
54822: EQUAL
54823: AND
54824: IFFALSE 54838
// begin side := i ;
54826: LD_ADDR_VAR 0 3
54830: PUSH
54831: LD_VAR 0 1
54835: ST_TO_ADDR
// break ;
54836: GO 54840
// end ;
54838: GO 54791
54840: POP
54841: POP
// if not side then
54842: LD_VAR 0 3
54846: NOT
54847: IFFALSE 54851
// exit ;
54849: GO 54896
// for i := 1 to tmp do
54851: LD_ADDR_VAR 0 1
54855: PUSH
54856: DOUBLE
54857: LD_INT 1
54859: DEC
54860: ST_TO_ADDR
54861: LD_VAR 0 2
54865: PUSH
54866: FOR_TO
54867: IFFALSE 54894
// if Prob ( 60 ) then
54869: LD_INT 60
54871: PPUSH
54872: CALL_OW 13
54876: IFFALSE 54892
// SetSide ( i , side ) ;
54878: LD_VAR 0 1
54882: PPUSH
54883: LD_VAR 0 3
54887: PPUSH
54888: CALL_OW 235
54892: GO 54866
54894: POP
54895: POP
// end ;
54896: PPOPN 3
54898: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54899: LD_EXP 30
54903: PUSH
54904: LD_EXP 43
54908: AND
54909: IFFALSE 55028
54911: GO 54913
54913: DISABLE
54914: LD_INT 0
54916: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54917: LD_ADDR_VAR 0 1
54921: PUSH
54922: LD_INT 22
54924: PUSH
54925: LD_OWVAR 2
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 21
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: PUSH
54947: LD_INT 23
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: LIST
54965: PPUSH
54966: CALL_OW 69
54970: PUSH
54971: FOR_IN
54972: IFFALSE 55026
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54974: LD_VAR 0 1
54978: PPUSH
54979: CALL_OW 257
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: LD_INT 4
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: IN
55002: IFFALSE 55024
// SetClass ( un , rand ( 1 , 4 ) ) ;
55004: LD_VAR 0 1
55008: PPUSH
55009: LD_INT 1
55011: PPUSH
55012: LD_INT 4
55014: PPUSH
55015: CALL_OW 12
55019: PPUSH
55020: CALL_OW 336
55024: GO 54971
55026: POP
55027: POP
// end ;
55028: PPOPN 1
55030: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55031: LD_EXP 30
55035: PUSH
55036: LD_EXP 42
55040: AND
55041: IFFALSE 55120
55043: GO 55045
55045: DISABLE
55046: LD_INT 0
55048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55049: LD_ADDR_VAR 0 1
55053: PUSH
55054: LD_INT 22
55056: PUSH
55057: LD_OWVAR 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 21
55068: PUSH
55069: LD_INT 3
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PPUSH
55080: CALL_OW 69
55084: ST_TO_ADDR
// if not tmp then
55085: LD_VAR 0 1
55089: NOT
55090: IFFALSE 55094
// exit ;
55092: GO 55120
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55094: LD_VAR 0 1
55098: PUSH
55099: LD_INT 1
55101: PPUSH
55102: LD_VAR 0 1
55106: PPUSH
55107: CALL_OW 12
55111: ARRAY
55112: PPUSH
55113: LD_INT 100
55115: PPUSH
55116: CALL_OW 234
// end ;
55120: PPOPN 1
55122: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55123: LD_EXP 30
55127: PUSH
55128: LD_EXP 44
55132: AND
55133: IFFALSE 55231
55135: GO 55137
55137: DISABLE
55138: LD_INT 0
55140: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55141: LD_ADDR_VAR 0 1
55145: PUSH
55146: LD_INT 22
55148: PUSH
55149: LD_OWVAR 2
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 21
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PPUSH
55172: CALL_OW 69
55176: ST_TO_ADDR
// if not tmp then
55177: LD_VAR 0 1
55181: NOT
55182: IFFALSE 55186
// exit ;
55184: GO 55231
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55186: LD_VAR 0 1
55190: PUSH
55191: LD_INT 1
55193: PPUSH
55194: LD_VAR 0 1
55198: PPUSH
55199: CALL_OW 12
55203: ARRAY
55204: PPUSH
55205: LD_INT 1
55207: PPUSH
55208: LD_INT 4
55210: PPUSH
55211: CALL_OW 12
55215: PPUSH
55216: LD_INT 3000
55218: PPUSH
55219: LD_INT 9000
55221: PPUSH
55222: CALL_OW 12
55226: PPUSH
55227: CALL_OW 492
// end ;
55231: PPOPN 1
55233: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55234: LD_EXP 30
55238: PUSH
55239: LD_EXP 45
55243: AND
55244: IFFALSE 55264
55246: GO 55248
55248: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55249: LD_INT 1
55251: PPUSH
55252: LD_OWVAR 2
55256: PPUSH
55257: LD_INT 0
55259: PPUSH
55260: CALL_OW 324
55264: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55265: LD_EXP 30
55269: PUSH
55270: LD_EXP 46
55274: AND
55275: IFFALSE 55358
55277: GO 55279
55279: DISABLE
55280: LD_INT 0
55282: PPUSH
55283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55284: LD_ADDR_VAR 0 2
55288: PUSH
55289: LD_INT 22
55291: PUSH
55292: LD_OWVAR 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 21
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PPUSH
55315: CALL_OW 69
55319: ST_TO_ADDR
// if not tmp then
55320: LD_VAR 0 2
55324: NOT
55325: IFFALSE 55329
// exit ;
55327: GO 55358
// for i in tmp do
55329: LD_ADDR_VAR 0 1
55333: PUSH
55334: LD_VAR 0 2
55338: PUSH
55339: FOR_IN
55340: IFFALSE 55356
// SetBLevel ( i , 10 ) ;
55342: LD_VAR 0 1
55346: PPUSH
55347: LD_INT 10
55349: PPUSH
55350: CALL_OW 241
55354: GO 55339
55356: POP
55357: POP
// end ;
55358: PPOPN 2
55360: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55361: LD_EXP 30
55365: PUSH
55366: LD_EXP 47
55370: AND
55371: IFFALSE 55482
55373: GO 55375
55375: DISABLE
55376: LD_INT 0
55378: PPUSH
55379: PPUSH
55380: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55381: LD_ADDR_VAR 0 3
55385: PUSH
55386: LD_INT 22
55388: PUSH
55389: LD_OWVAR 2
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 25
55400: PUSH
55401: LD_INT 1
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PPUSH
55412: CALL_OW 69
55416: ST_TO_ADDR
// if not tmp then
55417: LD_VAR 0 3
55421: NOT
55422: IFFALSE 55426
// exit ;
55424: GO 55482
// un := tmp [ rand ( 1 , tmp ) ] ;
55426: LD_ADDR_VAR 0 2
55430: PUSH
55431: LD_VAR 0 3
55435: PUSH
55436: LD_INT 1
55438: PPUSH
55439: LD_VAR 0 3
55443: PPUSH
55444: CALL_OW 12
55448: ARRAY
55449: ST_TO_ADDR
// if Crawls ( un ) then
55450: LD_VAR 0 2
55454: PPUSH
55455: CALL_OW 318
55459: IFFALSE 55470
// ComWalk ( un ) ;
55461: LD_VAR 0 2
55465: PPUSH
55466: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55470: LD_VAR 0 2
55474: PPUSH
55475: LD_INT 5
55477: PPUSH
55478: CALL_OW 336
// end ;
55482: PPOPN 3
55484: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55485: LD_EXP 30
55489: PUSH
55490: LD_EXP 48
55494: AND
55495: PUSH
55496: LD_OWVAR 67
55500: PUSH
55501: LD_INT 4
55503: LESS
55504: AND
55505: IFFALSE 55524
55507: GO 55509
55509: DISABLE
// begin Difficulty := Difficulty + 1 ;
55510: LD_ADDR_OWVAR 67
55514: PUSH
55515: LD_OWVAR 67
55519: PUSH
55520: LD_INT 1
55522: PLUS
55523: ST_TO_ADDR
// end ;
55524: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55525: LD_EXP 30
55529: PUSH
55530: LD_EXP 49
55534: AND
55535: IFFALSE 55638
55537: GO 55539
55539: DISABLE
55540: LD_INT 0
55542: PPUSH
// begin for i := 1 to 5 do
55543: LD_ADDR_VAR 0 1
55547: PUSH
55548: DOUBLE
55549: LD_INT 1
55551: DEC
55552: ST_TO_ADDR
55553: LD_INT 5
55555: PUSH
55556: FOR_TO
55557: IFFALSE 55636
// begin uc_nation := nation_nature ;
55559: LD_ADDR_OWVAR 21
55563: PUSH
55564: LD_INT 0
55566: ST_TO_ADDR
// uc_side := 0 ;
55567: LD_ADDR_OWVAR 20
55571: PUSH
55572: LD_INT 0
55574: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55575: LD_ADDR_OWVAR 29
55579: PUSH
55580: LD_INT 12
55582: PUSH
55583: LD_INT 12
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// hc_agressivity := 20 ;
55590: LD_ADDR_OWVAR 35
55594: PUSH
55595: LD_INT 20
55597: ST_TO_ADDR
// hc_class := class_tiger ;
55598: LD_ADDR_OWVAR 28
55602: PUSH
55603: LD_INT 14
55605: ST_TO_ADDR
// hc_gallery :=  ;
55606: LD_ADDR_OWVAR 33
55610: PUSH
55611: LD_STRING 
55613: ST_TO_ADDR
// hc_name :=  ;
55614: LD_ADDR_OWVAR 26
55618: PUSH
55619: LD_STRING 
55621: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55622: CALL_OW 44
55626: PPUSH
55627: LD_INT 0
55629: PPUSH
55630: CALL_OW 51
// end ;
55634: GO 55556
55636: POP
55637: POP
// end ;
55638: PPOPN 1
55640: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55641: LD_EXP 30
55645: PUSH
55646: LD_EXP 50
55650: AND
55651: IFFALSE 55660
55653: GO 55655
55655: DISABLE
// StreamSibBomb ;
55656: CALL 55661 0 0
55660: END
// export function StreamSibBomb ; var i , x , y ; begin
55661: LD_INT 0
55663: PPUSH
55664: PPUSH
55665: PPUSH
55666: PPUSH
// result := false ;
55667: LD_ADDR_VAR 0 1
55671: PUSH
55672: LD_INT 0
55674: ST_TO_ADDR
// for i := 1 to 16 do
55675: LD_ADDR_VAR 0 2
55679: PUSH
55680: DOUBLE
55681: LD_INT 1
55683: DEC
55684: ST_TO_ADDR
55685: LD_INT 16
55687: PUSH
55688: FOR_TO
55689: IFFALSE 55888
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55691: LD_ADDR_VAR 0 3
55695: PUSH
55696: LD_INT 10
55698: PUSH
55699: LD_INT 20
55701: PUSH
55702: LD_INT 30
55704: PUSH
55705: LD_INT 40
55707: PUSH
55708: LD_INT 50
55710: PUSH
55711: LD_INT 60
55713: PUSH
55714: LD_INT 70
55716: PUSH
55717: LD_INT 80
55719: PUSH
55720: LD_INT 90
55722: PUSH
55723: LD_INT 100
55725: PUSH
55726: LD_INT 110
55728: PUSH
55729: LD_INT 120
55731: PUSH
55732: LD_INT 130
55734: PUSH
55735: LD_INT 140
55737: PUSH
55738: LD_INT 150
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PPUSH
55761: LD_INT 15
55763: PPUSH
55764: CALL_OW 12
55768: ARRAY
55769: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55770: LD_ADDR_VAR 0 4
55774: PUSH
55775: LD_INT 10
55777: PUSH
55778: LD_INT 20
55780: PUSH
55781: LD_INT 30
55783: PUSH
55784: LD_INT 40
55786: PUSH
55787: LD_INT 50
55789: PUSH
55790: LD_INT 60
55792: PUSH
55793: LD_INT 70
55795: PUSH
55796: LD_INT 80
55798: PUSH
55799: LD_INT 90
55801: PUSH
55802: LD_INT 100
55804: PUSH
55805: LD_INT 110
55807: PUSH
55808: LD_INT 120
55810: PUSH
55811: LD_INT 130
55813: PUSH
55814: LD_INT 140
55816: PUSH
55817: LD_INT 150
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PPUSH
55840: LD_INT 15
55842: PPUSH
55843: CALL_OW 12
55847: ARRAY
55848: ST_TO_ADDR
// if ValidHex ( x , y ) then
55849: LD_VAR 0 3
55853: PPUSH
55854: LD_VAR 0 4
55858: PPUSH
55859: CALL_OW 488
55863: IFFALSE 55886
// begin result := [ x , y ] ;
55865: LD_ADDR_VAR 0 1
55869: PUSH
55870: LD_VAR 0 3
55874: PUSH
55875: LD_VAR 0 4
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: ST_TO_ADDR
// break ;
55884: GO 55888
// end ; end ;
55886: GO 55688
55888: POP
55889: POP
// if result then
55890: LD_VAR 0 1
55894: IFFALSE 55954
// begin ToLua ( playSibBomb() ) ;
55896: LD_STRING playSibBomb()
55898: PPUSH
55899: CALL_OW 559
// wait ( 0 0$14 ) ;
55903: LD_INT 490
55905: PPUSH
55906: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55910: LD_VAR 0 1
55914: PUSH
55915: LD_INT 1
55917: ARRAY
55918: PPUSH
55919: LD_VAR 0 1
55923: PUSH
55924: LD_INT 2
55926: ARRAY
55927: PPUSH
55928: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55932: LD_VAR 0 1
55936: PUSH
55937: LD_INT 1
55939: ARRAY
55940: PPUSH
55941: LD_VAR 0 1
55945: PUSH
55946: LD_INT 2
55948: ARRAY
55949: PPUSH
55950: CALL_OW 429
// end ; end ;
55954: LD_VAR 0 1
55958: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55959: LD_EXP 30
55963: PUSH
55964: LD_EXP 52
55968: AND
55969: IFFALSE 55981
55971: GO 55973
55973: DISABLE
// YouLost (  ) ;
55974: LD_STRING 
55976: PPUSH
55977: CALL_OW 104
55981: END
// every 0 0$1 trigger StreamModeActive and sFog do
55982: LD_EXP 30
55986: PUSH
55987: LD_EXP 51
55991: AND
55992: IFFALSE 56006
55994: GO 55996
55996: DISABLE
// FogOff ( your_side ) ;
55997: LD_OWVAR 2
56001: PPUSH
56002: CALL_OW 344
56006: END
// every 0 0$1 trigger StreamModeActive and sSun do
56007: LD_EXP 30
56011: PUSH
56012: LD_EXP 53
56016: AND
56017: IFFALSE 56045
56019: GO 56021
56021: DISABLE
// begin solar_recharge_percent := 0 ;
56022: LD_ADDR_OWVAR 79
56026: PUSH
56027: LD_INT 0
56029: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56030: LD_INT 10500
56032: PPUSH
56033: CALL_OW 67
// solar_recharge_percent := 100 ;
56037: LD_ADDR_OWVAR 79
56041: PUSH
56042: LD_INT 100
56044: ST_TO_ADDR
// end ;
56045: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56046: LD_EXP 30
56050: PUSH
56051: LD_EXP 54
56055: AND
56056: IFFALSE 56295
56058: GO 56060
56060: DISABLE
56061: LD_INT 0
56063: PPUSH
56064: PPUSH
56065: PPUSH
// begin tmp := [ ] ;
56066: LD_ADDR_VAR 0 3
56070: PUSH
56071: EMPTY
56072: ST_TO_ADDR
// for i := 1 to 6 do
56073: LD_ADDR_VAR 0 1
56077: PUSH
56078: DOUBLE
56079: LD_INT 1
56081: DEC
56082: ST_TO_ADDR
56083: LD_INT 6
56085: PUSH
56086: FOR_TO
56087: IFFALSE 56192
// begin uc_nation := nation_nature ;
56089: LD_ADDR_OWVAR 21
56093: PUSH
56094: LD_INT 0
56096: ST_TO_ADDR
// uc_side := 0 ;
56097: LD_ADDR_OWVAR 20
56101: PUSH
56102: LD_INT 0
56104: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56105: LD_ADDR_OWVAR 29
56109: PUSH
56110: LD_INT 12
56112: PUSH
56113: LD_INT 12
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: ST_TO_ADDR
// hc_agressivity := 20 ;
56120: LD_ADDR_OWVAR 35
56124: PUSH
56125: LD_INT 20
56127: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56128: LD_ADDR_OWVAR 28
56132: PUSH
56133: LD_INT 17
56135: ST_TO_ADDR
// hc_gallery :=  ;
56136: LD_ADDR_OWVAR 33
56140: PUSH
56141: LD_STRING 
56143: ST_TO_ADDR
// hc_name :=  ;
56144: LD_ADDR_OWVAR 26
56148: PUSH
56149: LD_STRING 
56151: ST_TO_ADDR
// un := CreateHuman ;
56152: LD_ADDR_VAR 0 2
56156: PUSH
56157: CALL_OW 44
56161: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56162: LD_VAR 0 2
56166: PPUSH
56167: LD_INT 1
56169: PPUSH
56170: CALL_OW 51
// tmp := tmp ^ un ;
56174: LD_ADDR_VAR 0 3
56178: PUSH
56179: LD_VAR 0 3
56183: PUSH
56184: LD_VAR 0 2
56188: ADD
56189: ST_TO_ADDR
// end ;
56190: GO 56086
56192: POP
56193: POP
// repeat wait ( 0 0$1 ) ;
56194: LD_INT 35
56196: PPUSH
56197: CALL_OW 67
// for un in tmp do
56201: LD_ADDR_VAR 0 2
56205: PUSH
56206: LD_VAR 0 3
56210: PUSH
56211: FOR_IN
56212: IFFALSE 56286
// begin if IsDead ( un ) then
56214: LD_VAR 0 2
56218: PPUSH
56219: CALL_OW 301
56223: IFFALSE 56243
// begin tmp := tmp diff un ;
56225: LD_ADDR_VAR 0 3
56229: PUSH
56230: LD_VAR 0 3
56234: PUSH
56235: LD_VAR 0 2
56239: DIFF
56240: ST_TO_ADDR
// continue ;
56241: GO 56211
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56243: LD_VAR 0 2
56247: PPUSH
56248: LD_INT 3
56250: PUSH
56251: LD_INT 22
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PPUSH
56265: CALL_OW 69
56269: PPUSH
56270: LD_VAR 0 2
56274: PPUSH
56275: CALL_OW 74
56279: PPUSH
56280: CALL_OW 115
// end ;
56284: GO 56211
56286: POP
56287: POP
// until not tmp ;
56288: LD_VAR 0 3
56292: NOT
56293: IFFALSE 56194
// end ;
56295: PPOPN 3
56297: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56298: LD_EXP 30
56302: PUSH
56303: LD_EXP 55
56307: AND
56308: IFFALSE 56362
56310: GO 56312
56312: DISABLE
// begin ToLua ( displayTroll(); ) ;
56313: LD_STRING displayTroll();
56315: PPUSH
56316: CALL_OW 559
// wait ( 3 3$00 ) ;
56320: LD_INT 6300
56322: PPUSH
56323: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56327: LD_STRING hideTroll();
56329: PPUSH
56330: CALL_OW 559
// wait ( 1 1$00 ) ;
56334: LD_INT 2100
56336: PPUSH
56337: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56341: LD_STRING displayTroll();
56343: PPUSH
56344: CALL_OW 559
// wait ( 1 1$00 ) ;
56348: LD_INT 2100
56350: PPUSH
56351: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56355: LD_STRING hideTroll();
56357: PPUSH
56358: CALL_OW 559
// end ;
56362: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56363: LD_EXP 30
56367: PUSH
56368: LD_EXP 56
56372: AND
56373: IFFALSE 56436
56375: GO 56377
56377: DISABLE
56378: LD_INT 0
56380: PPUSH
// begin p := 0 ;
56381: LD_ADDR_VAR 0 1
56385: PUSH
56386: LD_INT 0
56388: ST_TO_ADDR
// repeat game_speed := 1 ;
56389: LD_ADDR_OWVAR 65
56393: PUSH
56394: LD_INT 1
56396: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56397: LD_INT 35
56399: PPUSH
56400: CALL_OW 67
// p := p + 1 ;
56404: LD_ADDR_VAR 0 1
56408: PUSH
56409: LD_VAR 0 1
56413: PUSH
56414: LD_INT 1
56416: PLUS
56417: ST_TO_ADDR
// until p >= 60 ;
56418: LD_VAR 0 1
56422: PUSH
56423: LD_INT 60
56425: GREATEREQUAL
56426: IFFALSE 56389
// game_speed := 4 ;
56428: LD_ADDR_OWVAR 65
56432: PUSH
56433: LD_INT 4
56435: ST_TO_ADDR
// end ;
56436: PPOPN 1
56438: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56439: LD_EXP 30
56443: PUSH
56444: LD_EXP 57
56448: AND
56449: IFFALSE 56595
56451: GO 56453
56453: DISABLE
56454: LD_INT 0
56456: PPUSH
56457: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56458: LD_ADDR_VAR 0 1
56462: PUSH
56463: LD_INT 22
56465: PUSH
56466: LD_OWVAR 2
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 2
56477: PUSH
56478: LD_INT 30
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 30
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: EMPTY
56499: LIST
56500: LIST
56501: LIST
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PPUSH
56507: CALL_OW 69
56511: ST_TO_ADDR
// if not depot then
56512: LD_VAR 0 1
56516: NOT
56517: IFFALSE 56521
// exit ;
56519: GO 56595
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56521: LD_ADDR_VAR 0 2
56525: PUSH
56526: LD_VAR 0 1
56530: PUSH
56531: LD_INT 1
56533: PPUSH
56534: LD_VAR 0 1
56538: PPUSH
56539: CALL_OW 12
56543: ARRAY
56544: PPUSH
56545: CALL_OW 274
56549: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56550: LD_VAR 0 2
56554: PPUSH
56555: LD_INT 1
56557: PPUSH
56558: LD_INT 0
56560: PPUSH
56561: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56565: LD_VAR 0 2
56569: PPUSH
56570: LD_INT 2
56572: PPUSH
56573: LD_INT 0
56575: PPUSH
56576: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56580: LD_VAR 0 2
56584: PPUSH
56585: LD_INT 3
56587: PPUSH
56588: LD_INT 0
56590: PPUSH
56591: CALL_OW 277
// end ;
56595: PPOPN 2
56597: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56598: LD_EXP 30
56602: PUSH
56603: LD_EXP 58
56607: AND
56608: IFFALSE 56705
56610: GO 56612
56612: DISABLE
56613: LD_INT 0
56615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56616: LD_ADDR_VAR 0 1
56620: PUSH
56621: LD_INT 22
56623: PUSH
56624: LD_OWVAR 2
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 21
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: LD_INT 23
56648: PUSH
56649: LD_INT 0
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: PPUSH
56665: CALL_OW 69
56669: ST_TO_ADDR
// if not tmp then
56670: LD_VAR 0 1
56674: NOT
56675: IFFALSE 56679
// exit ;
56677: GO 56705
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56679: LD_VAR 0 1
56683: PUSH
56684: LD_INT 1
56686: PPUSH
56687: LD_VAR 0 1
56691: PPUSH
56692: CALL_OW 12
56696: ARRAY
56697: PPUSH
56698: LD_INT 200
56700: PPUSH
56701: CALL_OW 234
// end ;
56705: PPOPN 1
56707: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56708: LD_EXP 30
56712: PUSH
56713: LD_EXP 59
56717: AND
56718: IFFALSE 56797
56720: GO 56722
56722: DISABLE
56723: LD_INT 0
56725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56726: LD_ADDR_VAR 0 1
56730: PUSH
56731: LD_INT 22
56733: PUSH
56734: LD_OWVAR 2
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 21
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PPUSH
56757: CALL_OW 69
56761: ST_TO_ADDR
// if not tmp then
56762: LD_VAR 0 1
56766: NOT
56767: IFFALSE 56771
// exit ;
56769: GO 56797
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56771: LD_VAR 0 1
56775: PUSH
56776: LD_INT 1
56778: PPUSH
56779: LD_VAR 0 1
56783: PPUSH
56784: CALL_OW 12
56788: ARRAY
56789: PPUSH
56790: LD_INT 60
56792: PPUSH
56793: CALL_OW 234
// end ;
56797: PPOPN 1
56799: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56800: LD_EXP 30
56804: PUSH
56805: LD_EXP 60
56809: AND
56810: IFFALSE 56909
56812: GO 56814
56814: DISABLE
56815: LD_INT 0
56817: PPUSH
56818: PPUSH
// begin enable ;
56819: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56820: LD_ADDR_VAR 0 1
56824: PUSH
56825: LD_INT 22
56827: PUSH
56828: LD_OWVAR 2
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 61
56839: PUSH
56840: EMPTY
56841: LIST
56842: PUSH
56843: LD_INT 33
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: LIST
56857: PPUSH
56858: CALL_OW 69
56862: ST_TO_ADDR
// if not tmp then
56863: LD_VAR 0 1
56867: NOT
56868: IFFALSE 56872
// exit ;
56870: GO 56909
// for i in tmp do
56872: LD_ADDR_VAR 0 2
56876: PUSH
56877: LD_VAR 0 1
56881: PUSH
56882: FOR_IN
56883: IFFALSE 56907
// if IsControledBy ( i ) then
56885: LD_VAR 0 2
56889: PPUSH
56890: CALL_OW 312
56894: IFFALSE 56905
// ComUnlink ( i ) ;
56896: LD_VAR 0 2
56900: PPUSH
56901: CALL_OW 136
56905: GO 56882
56907: POP
56908: POP
// end ;
56909: PPOPN 2
56911: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56912: LD_EXP 30
56916: PUSH
56917: LD_EXP 61
56921: AND
56922: IFFALSE 57062
56924: GO 56926
56926: DISABLE
56927: LD_INT 0
56929: PPUSH
56930: PPUSH
// begin ToLua ( displayPowell(); ) ;
56931: LD_STRING displayPowell();
56933: PPUSH
56934: CALL_OW 559
// uc_side := 0 ;
56938: LD_ADDR_OWVAR 20
56942: PUSH
56943: LD_INT 0
56945: ST_TO_ADDR
// uc_nation := 2 ;
56946: LD_ADDR_OWVAR 21
56950: PUSH
56951: LD_INT 2
56953: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56954: LD_ADDR_OWVAR 37
56958: PUSH
56959: LD_INT 14
56961: ST_TO_ADDR
// vc_engine := engine_siberite ;
56962: LD_ADDR_OWVAR 39
56966: PUSH
56967: LD_INT 3
56969: ST_TO_ADDR
// vc_control := control_apeman ;
56970: LD_ADDR_OWVAR 38
56974: PUSH
56975: LD_INT 5
56977: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56978: LD_ADDR_OWVAR 40
56982: PUSH
56983: LD_INT 29
56985: ST_TO_ADDR
// un := CreateVehicle ;
56986: LD_ADDR_VAR 0 2
56990: PUSH
56991: CALL_OW 45
56995: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
56996: LD_VAR 0 2
57000: PPUSH
57001: LD_INT 1
57003: PPUSH
57004: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57008: LD_INT 35
57010: PPUSH
57011: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57015: LD_VAR 0 2
57019: PPUSH
57020: LD_INT 22
57022: PUSH
57023: LD_OWVAR 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PPUSH
57032: CALL_OW 69
57036: PPUSH
57037: LD_VAR 0 2
57041: PPUSH
57042: CALL_OW 74
57046: PPUSH
57047: CALL_OW 115
// until IsDead ( un ) ;
57051: LD_VAR 0 2
57055: PPUSH
57056: CALL_OW 301
57060: IFFALSE 57008
// end ;
57062: PPOPN 2
57064: END
// every 0 0$1 trigger StreamModeActive and sStu do
57065: LD_EXP 30
57069: PUSH
57070: LD_EXP 69
57074: AND
57075: IFFALSE 57091
57077: GO 57079
57079: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57080: LD_STRING displayStucuk();
57082: PPUSH
57083: CALL_OW 559
// ResetFog ;
57087: CALL_OW 335
// end ;
57091: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57092: LD_EXP 30
57096: PUSH
57097: LD_EXP 62
57101: AND
57102: IFFALSE 57243
57104: GO 57106
57106: DISABLE
57107: LD_INT 0
57109: PPUSH
57110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57111: LD_ADDR_VAR 0 2
57115: PUSH
57116: LD_INT 22
57118: PUSH
57119: LD_OWVAR 2
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 21
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PPUSH
57142: CALL_OW 69
57146: ST_TO_ADDR
// if not tmp then
57147: LD_VAR 0 2
57151: NOT
57152: IFFALSE 57156
// exit ;
57154: GO 57243
// un := tmp [ rand ( 1 , tmp ) ] ;
57156: LD_ADDR_VAR 0 1
57160: PUSH
57161: LD_VAR 0 2
57165: PUSH
57166: LD_INT 1
57168: PPUSH
57169: LD_VAR 0 2
57173: PPUSH
57174: CALL_OW 12
57178: ARRAY
57179: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57180: LD_VAR 0 1
57184: PPUSH
57185: LD_INT 0
57187: PPUSH
57188: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57192: LD_VAR 0 1
57196: PPUSH
57197: LD_OWVAR 3
57201: PUSH
57202: LD_VAR 0 1
57206: DIFF
57207: PPUSH
57208: LD_VAR 0 1
57212: PPUSH
57213: CALL_OW 74
57217: PPUSH
57218: CALL_OW 115
// wait ( 0 0$20 ) ;
57222: LD_INT 700
57224: PPUSH
57225: CALL_OW 67
// SetSide ( un , your_side ) ;
57229: LD_VAR 0 1
57233: PPUSH
57234: LD_OWVAR 2
57238: PPUSH
57239: CALL_OW 235
// end ;
57243: PPOPN 2
57245: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57246: LD_EXP 30
57250: PUSH
57251: LD_EXP 63
57255: AND
57256: IFFALSE 57362
57258: GO 57260
57260: DISABLE
57261: LD_INT 0
57263: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57264: LD_ADDR_VAR 0 1
57268: PUSH
57269: LD_INT 22
57271: PUSH
57272: LD_OWVAR 2
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 30
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 30
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: LIST
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PPUSH
57313: CALL_OW 69
57317: ST_TO_ADDR
// if not depot then
57318: LD_VAR 0 1
57322: NOT
57323: IFFALSE 57327
// exit ;
57325: GO 57362
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57327: LD_VAR 0 1
57331: PUSH
57332: LD_INT 1
57334: ARRAY
57335: PPUSH
57336: CALL_OW 250
57340: PPUSH
57341: LD_VAR 0 1
57345: PUSH
57346: LD_INT 1
57348: ARRAY
57349: PPUSH
57350: CALL_OW 251
57354: PPUSH
57355: LD_INT 70
57357: PPUSH
57358: CALL_OW 495
// end ;
57362: PPOPN 1
57364: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57365: LD_EXP 30
57369: PUSH
57370: LD_EXP 64
57374: AND
57375: IFFALSE 57586
57377: GO 57379
57379: DISABLE
57380: LD_INT 0
57382: PPUSH
57383: PPUSH
57384: PPUSH
57385: PPUSH
57386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57387: LD_ADDR_VAR 0 5
57391: PUSH
57392: LD_INT 22
57394: PUSH
57395: LD_OWVAR 2
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 21
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PPUSH
57418: CALL_OW 69
57422: ST_TO_ADDR
// if not tmp then
57423: LD_VAR 0 5
57427: NOT
57428: IFFALSE 57432
// exit ;
57430: GO 57586
// for i in tmp do
57432: LD_ADDR_VAR 0 1
57436: PUSH
57437: LD_VAR 0 5
57441: PUSH
57442: FOR_IN
57443: IFFALSE 57584
// begin d := rand ( 0 , 5 ) ;
57445: LD_ADDR_VAR 0 4
57449: PUSH
57450: LD_INT 0
57452: PPUSH
57453: LD_INT 5
57455: PPUSH
57456: CALL_OW 12
57460: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57461: LD_ADDR_VAR 0 2
57465: PUSH
57466: LD_VAR 0 1
57470: PPUSH
57471: CALL_OW 250
57475: PPUSH
57476: LD_VAR 0 4
57480: PPUSH
57481: LD_INT 3
57483: PPUSH
57484: LD_INT 12
57486: PPUSH
57487: CALL_OW 12
57491: PPUSH
57492: CALL_OW 272
57496: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57497: LD_ADDR_VAR 0 3
57501: PUSH
57502: LD_VAR 0 1
57506: PPUSH
57507: CALL_OW 251
57511: PPUSH
57512: LD_VAR 0 4
57516: PPUSH
57517: LD_INT 3
57519: PPUSH
57520: LD_INT 12
57522: PPUSH
57523: CALL_OW 12
57527: PPUSH
57528: CALL_OW 273
57532: ST_TO_ADDR
// if ValidHex ( x , y ) then
57533: LD_VAR 0 2
57537: PPUSH
57538: LD_VAR 0 3
57542: PPUSH
57543: CALL_OW 488
57547: IFFALSE 57582
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57549: LD_VAR 0 1
57553: PPUSH
57554: LD_VAR 0 2
57558: PPUSH
57559: LD_VAR 0 3
57563: PPUSH
57564: LD_INT 3
57566: PPUSH
57567: LD_INT 6
57569: PPUSH
57570: CALL_OW 12
57574: PPUSH
57575: LD_INT 1
57577: PPUSH
57578: CALL_OW 483
// end ;
57582: GO 57442
57584: POP
57585: POP
// end ;
57586: PPOPN 5
57588: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57589: LD_EXP 30
57593: PUSH
57594: LD_EXP 65
57598: AND
57599: IFFALSE 57693
57601: GO 57603
57603: DISABLE
57604: LD_INT 0
57606: PPUSH
57607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57608: LD_ADDR_VAR 0 2
57612: PUSH
57613: LD_INT 22
57615: PUSH
57616: LD_OWVAR 2
57620: PUSH
57621: EMPTY
57622: LIST
57623: LIST
57624: PUSH
57625: LD_INT 32
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: PUSH
57635: LD_INT 21
57637: PUSH
57638: LD_INT 2
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: LIST
57649: PPUSH
57650: CALL_OW 69
57654: ST_TO_ADDR
// if not tmp then
57655: LD_VAR 0 2
57659: NOT
57660: IFFALSE 57664
// exit ;
57662: GO 57693
// for i in tmp do
57664: LD_ADDR_VAR 0 1
57668: PUSH
57669: LD_VAR 0 2
57673: PUSH
57674: FOR_IN
57675: IFFALSE 57691
// SetFuel ( i , 0 ) ;
57677: LD_VAR 0 1
57681: PPUSH
57682: LD_INT 0
57684: PPUSH
57685: CALL_OW 240
57689: GO 57674
57691: POP
57692: POP
// end ;
57693: PPOPN 2
57695: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57696: LD_EXP 30
57700: PUSH
57701: LD_EXP 66
57705: AND
57706: IFFALSE 57772
57708: GO 57710
57710: DISABLE
57711: LD_INT 0
57713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57714: LD_ADDR_VAR 0 1
57718: PUSH
57719: LD_INT 22
57721: PUSH
57722: LD_OWVAR 2
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 30
57733: PUSH
57734: LD_INT 29
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PPUSH
57745: CALL_OW 69
57749: ST_TO_ADDR
// if not tmp then
57750: LD_VAR 0 1
57754: NOT
57755: IFFALSE 57759
// exit ;
57757: GO 57772
// DestroyUnit ( tmp [ 1 ] ) ;
57759: LD_VAR 0 1
57763: PUSH
57764: LD_INT 1
57766: ARRAY
57767: PPUSH
57768: CALL_OW 65
// end ;
57772: PPOPN 1
57774: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57775: LD_EXP 30
57779: PUSH
57780: LD_EXP 68
57784: AND
57785: IFFALSE 57914
57787: GO 57789
57789: DISABLE
57790: LD_INT 0
57792: PPUSH
// begin uc_side := 0 ;
57793: LD_ADDR_OWVAR 20
57797: PUSH
57798: LD_INT 0
57800: ST_TO_ADDR
// uc_nation := nation_arabian ;
57801: LD_ADDR_OWVAR 21
57805: PUSH
57806: LD_INT 2
57808: ST_TO_ADDR
// hc_gallery :=  ;
57809: LD_ADDR_OWVAR 33
57813: PUSH
57814: LD_STRING 
57816: ST_TO_ADDR
// hc_name :=  ;
57817: LD_ADDR_OWVAR 26
57821: PUSH
57822: LD_STRING 
57824: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57825: LD_INT 1
57827: PPUSH
57828: LD_INT 11
57830: PPUSH
57831: LD_INT 10
57833: PPUSH
57834: CALL_OW 380
// un := CreateHuman ;
57838: LD_ADDR_VAR 0 1
57842: PUSH
57843: CALL_OW 44
57847: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57848: LD_VAR 0 1
57852: PPUSH
57853: LD_INT 1
57855: PPUSH
57856: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57860: LD_INT 35
57862: PPUSH
57863: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57867: LD_VAR 0 1
57871: PPUSH
57872: LD_INT 22
57874: PUSH
57875: LD_OWVAR 2
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PPUSH
57884: CALL_OW 69
57888: PPUSH
57889: LD_VAR 0 1
57893: PPUSH
57894: CALL_OW 74
57898: PPUSH
57899: CALL_OW 115
// until IsDead ( un ) ;
57903: LD_VAR 0 1
57907: PPUSH
57908: CALL_OW 301
57912: IFFALSE 57860
// end ;
57914: PPOPN 1
57916: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57917: LD_EXP 30
57921: PUSH
57922: LD_EXP 70
57926: AND
57927: IFFALSE 57939
57929: GO 57931
57931: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57932: LD_STRING earthquake(getX(game), 0, 32)
57934: PPUSH
57935: CALL_OW 559
57939: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57940: LD_EXP 30
57944: PUSH
57945: LD_EXP 71
57949: AND
57950: IFFALSE 58041
57952: GO 57954
57954: DISABLE
57955: LD_INT 0
57957: PPUSH
// begin enable ;
57958: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57959: LD_ADDR_VAR 0 1
57963: PUSH
57964: LD_INT 22
57966: PUSH
57967: LD_OWVAR 2
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 21
57978: PUSH
57979: LD_INT 2
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 33
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: LIST
58000: PPUSH
58001: CALL_OW 69
58005: ST_TO_ADDR
// if not tmp then
58006: LD_VAR 0 1
58010: NOT
58011: IFFALSE 58015
// exit ;
58013: GO 58041
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58015: LD_VAR 0 1
58019: PUSH
58020: LD_INT 1
58022: PPUSH
58023: LD_VAR 0 1
58027: PPUSH
58028: CALL_OW 12
58032: ARRAY
58033: PPUSH
58034: LD_INT 1
58036: PPUSH
58037: CALL_OW 234
// end ;
58041: PPOPN 1
58043: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58044: LD_EXP 30
58048: PUSH
58049: LD_EXP 72
58053: AND
58054: IFFALSE 58195
58056: GO 58058
58058: DISABLE
58059: LD_INT 0
58061: PPUSH
58062: PPUSH
58063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58064: LD_ADDR_VAR 0 3
58068: PUSH
58069: LD_INT 22
58071: PUSH
58072: LD_OWVAR 2
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 25
58083: PUSH
58084: LD_INT 1
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PPUSH
58095: CALL_OW 69
58099: ST_TO_ADDR
// if not tmp then
58100: LD_VAR 0 3
58104: NOT
58105: IFFALSE 58109
// exit ;
58107: GO 58195
// un := tmp [ rand ( 1 , tmp ) ] ;
58109: LD_ADDR_VAR 0 2
58113: PUSH
58114: LD_VAR 0 3
58118: PUSH
58119: LD_INT 1
58121: PPUSH
58122: LD_VAR 0 3
58126: PPUSH
58127: CALL_OW 12
58131: ARRAY
58132: ST_TO_ADDR
// if Crawls ( un ) then
58133: LD_VAR 0 2
58137: PPUSH
58138: CALL_OW 318
58142: IFFALSE 58153
// ComWalk ( un ) ;
58144: LD_VAR 0 2
58148: PPUSH
58149: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58153: LD_VAR 0 2
58157: PPUSH
58158: LD_INT 9
58160: PPUSH
58161: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58165: LD_INT 28
58167: PPUSH
58168: LD_OWVAR 2
58172: PPUSH
58173: LD_INT 2
58175: PPUSH
58176: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58180: LD_INT 29
58182: PPUSH
58183: LD_OWVAR 2
58187: PPUSH
58188: LD_INT 2
58190: PPUSH
58191: CALL_OW 322
// end ;
58195: PPOPN 3
58197: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58198: LD_EXP 30
58202: PUSH
58203: LD_EXP 73
58207: AND
58208: IFFALSE 58319
58210: GO 58212
58212: DISABLE
58213: LD_INT 0
58215: PPUSH
58216: PPUSH
58217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58218: LD_ADDR_VAR 0 3
58222: PUSH
58223: LD_INT 22
58225: PUSH
58226: LD_OWVAR 2
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 25
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PPUSH
58249: CALL_OW 69
58253: ST_TO_ADDR
// if not tmp then
58254: LD_VAR 0 3
58258: NOT
58259: IFFALSE 58263
// exit ;
58261: GO 58319
// un := tmp [ rand ( 1 , tmp ) ] ;
58263: LD_ADDR_VAR 0 2
58267: PUSH
58268: LD_VAR 0 3
58272: PUSH
58273: LD_INT 1
58275: PPUSH
58276: LD_VAR 0 3
58280: PPUSH
58281: CALL_OW 12
58285: ARRAY
58286: ST_TO_ADDR
// if Crawls ( un ) then
58287: LD_VAR 0 2
58291: PPUSH
58292: CALL_OW 318
58296: IFFALSE 58307
// ComWalk ( un ) ;
58298: LD_VAR 0 2
58302: PPUSH
58303: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58307: LD_VAR 0 2
58311: PPUSH
58312: LD_INT 8
58314: PPUSH
58315: CALL_OW 336
// end ;
58319: PPOPN 3
58321: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58322: LD_EXP 30
58326: PUSH
58327: LD_EXP 74
58331: AND
58332: IFFALSE 58476
58334: GO 58336
58336: DISABLE
58337: LD_INT 0
58339: PPUSH
58340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58341: LD_ADDR_VAR 0 2
58345: PUSH
58346: LD_INT 22
58348: PUSH
58349: LD_OWVAR 2
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 21
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 34
58373: PUSH
58374: LD_INT 12
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 34
58383: PUSH
58384: LD_INT 51
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 34
58393: PUSH
58394: LD_INT 32
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: PPUSH
58412: CALL_OW 69
58416: ST_TO_ADDR
// if not tmp then
58417: LD_VAR 0 2
58421: NOT
58422: IFFALSE 58426
// exit ;
58424: GO 58476
// for i in tmp do
58426: LD_ADDR_VAR 0 1
58430: PUSH
58431: LD_VAR 0 2
58435: PUSH
58436: FOR_IN
58437: IFFALSE 58474
// if GetCargo ( i , mat_artifact ) = 0 then
58439: LD_VAR 0 1
58443: PPUSH
58444: LD_INT 4
58446: PPUSH
58447: CALL_OW 289
58451: PUSH
58452: LD_INT 0
58454: EQUAL
58455: IFFALSE 58472
// SetCargo ( i , mat_siberit , 100 ) ;
58457: LD_VAR 0 1
58461: PPUSH
58462: LD_INT 3
58464: PPUSH
58465: LD_INT 100
58467: PPUSH
58468: CALL_OW 290
58472: GO 58436
58474: POP
58475: POP
// end ;
58476: PPOPN 2
58478: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58479: LD_EXP 30
58483: PUSH
58484: LD_EXP 75
58488: AND
58489: IFFALSE 58672
58491: GO 58493
58493: DISABLE
58494: LD_INT 0
58496: PPUSH
58497: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58498: LD_ADDR_VAR 0 2
58502: PUSH
58503: LD_INT 22
58505: PUSH
58506: LD_OWVAR 2
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PPUSH
58515: CALL_OW 69
58519: ST_TO_ADDR
// if not tmp then
58520: LD_VAR 0 2
58524: NOT
58525: IFFALSE 58529
// exit ;
58527: GO 58672
// for i := 1 to 2 do
58529: LD_ADDR_VAR 0 1
58533: PUSH
58534: DOUBLE
58535: LD_INT 1
58537: DEC
58538: ST_TO_ADDR
58539: LD_INT 2
58541: PUSH
58542: FOR_TO
58543: IFFALSE 58670
// begin uc_side := your_side ;
58545: LD_ADDR_OWVAR 20
58549: PUSH
58550: LD_OWVAR 2
58554: ST_TO_ADDR
// uc_nation := nation_american ;
58555: LD_ADDR_OWVAR 21
58559: PUSH
58560: LD_INT 1
58562: ST_TO_ADDR
// vc_chassis := us_morphling ;
58563: LD_ADDR_OWVAR 37
58567: PUSH
58568: LD_INT 5
58570: ST_TO_ADDR
// vc_engine := engine_siberite ;
58571: LD_ADDR_OWVAR 39
58575: PUSH
58576: LD_INT 3
58578: ST_TO_ADDR
// vc_control := control_computer ;
58579: LD_ADDR_OWVAR 38
58583: PUSH
58584: LD_INT 3
58586: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58587: LD_ADDR_OWVAR 40
58591: PUSH
58592: LD_INT 10
58594: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58595: LD_VAR 0 2
58599: PUSH
58600: LD_INT 1
58602: ARRAY
58603: PPUSH
58604: CALL_OW 310
58608: NOT
58609: IFFALSE 58656
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58611: CALL_OW 45
58615: PPUSH
58616: LD_VAR 0 2
58620: PUSH
58621: LD_INT 1
58623: ARRAY
58624: PPUSH
58625: CALL_OW 250
58629: PPUSH
58630: LD_VAR 0 2
58634: PUSH
58635: LD_INT 1
58637: ARRAY
58638: PPUSH
58639: CALL_OW 251
58643: PPUSH
58644: LD_INT 12
58646: PPUSH
58647: LD_INT 1
58649: PPUSH
58650: CALL_OW 50
58654: GO 58668
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58656: CALL_OW 45
58660: PPUSH
58661: LD_INT 1
58663: PPUSH
58664: CALL_OW 51
// end ;
58668: GO 58542
58670: POP
58671: POP
// end ;
58672: PPOPN 2
58674: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58675: LD_EXP 30
58679: PUSH
58680: LD_EXP 76
58684: AND
58685: IFFALSE 58907
58687: GO 58689
58689: DISABLE
58690: LD_INT 0
58692: PPUSH
58693: PPUSH
58694: PPUSH
58695: PPUSH
58696: PPUSH
58697: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58698: LD_ADDR_VAR 0 6
58702: PUSH
58703: LD_INT 22
58705: PUSH
58706: LD_OWVAR 2
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: PUSH
58715: LD_INT 21
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 3
58727: PUSH
58728: LD_INT 23
58730: PUSH
58731: LD_INT 0
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: LIST
58746: PPUSH
58747: CALL_OW 69
58751: ST_TO_ADDR
// if not tmp then
58752: LD_VAR 0 6
58756: NOT
58757: IFFALSE 58761
// exit ;
58759: GO 58907
// s1 := rand ( 1 , 4 ) ;
58761: LD_ADDR_VAR 0 2
58765: PUSH
58766: LD_INT 1
58768: PPUSH
58769: LD_INT 4
58771: PPUSH
58772: CALL_OW 12
58776: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58777: LD_ADDR_VAR 0 4
58781: PUSH
58782: LD_VAR 0 6
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: PPUSH
58791: LD_VAR 0 2
58795: PPUSH
58796: CALL_OW 259
58800: ST_TO_ADDR
// if s1 = 1 then
58801: LD_VAR 0 2
58805: PUSH
58806: LD_INT 1
58808: EQUAL
58809: IFFALSE 58829
// s2 := rand ( 2 , 4 ) else
58811: LD_ADDR_VAR 0 3
58815: PUSH
58816: LD_INT 2
58818: PPUSH
58819: LD_INT 4
58821: PPUSH
58822: CALL_OW 12
58826: ST_TO_ADDR
58827: GO 58837
// s2 := 1 ;
58829: LD_ADDR_VAR 0 3
58833: PUSH
58834: LD_INT 1
58836: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58837: LD_ADDR_VAR 0 5
58841: PUSH
58842: LD_VAR 0 6
58846: PUSH
58847: LD_INT 1
58849: ARRAY
58850: PPUSH
58851: LD_VAR 0 3
58855: PPUSH
58856: CALL_OW 259
58860: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58861: LD_VAR 0 6
58865: PUSH
58866: LD_INT 1
58868: ARRAY
58869: PPUSH
58870: LD_VAR 0 2
58874: PPUSH
58875: LD_VAR 0 5
58879: PPUSH
58880: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58884: LD_VAR 0 6
58888: PUSH
58889: LD_INT 1
58891: ARRAY
58892: PPUSH
58893: LD_VAR 0 3
58897: PPUSH
58898: LD_VAR 0 4
58902: PPUSH
58903: CALL_OW 237
// end ;
58907: PPOPN 6
58909: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58910: LD_EXP 30
58914: PUSH
58915: LD_EXP 77
58919: AND
58920: IFFALSE 58999
58922: GO 58924
58924: DISABLE
58925: LD_INT 0
58927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58928: LD_ADDR_VAR 0 1
58932: PUSH
58933: LD_INT 22
58935: PUSH
58936: LD_OWVAR 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 30
58947: PUSH
58948: LD_INT 3
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PPUSH
58959: CALL_OW 69
58963: ST_TO_ADDR
// if not tmp then
58964: LD_VAR 0 1
58968: NOT
58969: IFFALSE 58973
// exit ;
58971: GO 58999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58973: LD_VAR 0 1
58977: PUSH
58978: LD_INT 1
58980: PPUSH
58981: LD_VAR 0 1
58985: PPUSH
58986: CALL_OW 12
58990: ARRAY
58991: PPUSH
58992: LD_INT 1
58994: PPUSH
58995: CALL_OW 234
// end ;
58999: PPOPN 1
59001: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59002: LD_EXP 30
59006: PUSH
59007: LD_EXP 78
59011: AND
59012: IFFALSE 59124
59014: GO 59016
59016: DISABLE
59017: LD_INT 0
59019: PPUSH
59020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59021: LD_ADDR_VAR 0 2
59025: PUSH
59026: LD_INT 22
59028: PUSH
59029: LD_OWVAR 2
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: PUSH
59041: LD_INT 30
59043: PUSH
59044: LD_INT 27
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 30
59053: PUSH
59054: LD_INT 26
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 30
59063: PUSH
59064: LD_INT 28
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PPUSH
59081: CALL_OW 69
59085: ST_TO_ADDR
// if not tmp then
59086: LD_VAR 0 2
59090: NOT
59091: IFFALSE 59095
// exit ;
59093: GO 59124
// for i in tmp do
59095: LD_ADDR_VAR 0 1
59099: PUSH
59100: LD_VAR 0 2
59104: PUSH
59105: FOR_IN
59106: IFFALSE 59122
// SetLives ( i , 1 ) ;
59108: LD_VAR 0 1
59112: PPUSH
59113: LD_INT 1
59115: PPUSH
59116: CALL_OW 234
59120: GO 59105
59122: POP
59123: POP
// end ;
59124: PPOPN 2
59126: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59127: LD_EXP 30
59131: PUSH
59132: LD_EXP 79
59136: AND
59137: IFFALSE 59424
59139: GO 59141
59141: DISABLE
59142: LD_INT 0
59144: PPUSH
59145: PPUSH
59146: PPUSH
// begin i := rand ( 1 , 7 ) ;
59147: LD_ADDR_VAR 0 1
59151: PUSH
59152: LD_INT 1
59154: PPUSH
59155: LD_INT 7
59157: PPUSH
59158: CALL_OW 12
59162: ST_TO_ADDR
// case i of 1 :
59163: LD_VAR 0 1
59167: PUSH
59168: LD_INT 1
59170: DOUBLE
59171: EQUAL
59172: IFTRUE 59176
59174: GO 59186
59176: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59177: LD_STRING earthquake(getX(game), 0, 32)
59179: PPUSH
59180: CALL_OW 559
59184: GO 59424
59186: LD_INT 2
59188: DOUBLE
59189: EQUAL
59190: IFTRUE 59194
59192: GO 59208
59194: POP
// begin ToLua ( displayStucuk(); ) ;
59195: LD_STRING displayStucuk();
59197: PPUSH
59198: CALL_OW 559
// ResetFog ;
59202: CALL_OW 335
// end ; 3 :
59206: GO 59424
59208: LD_INT 3
59210: DOUBLE
59211: EQUAL
59212: IFTRUE 59216
59214: GO 59320
59216: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59217: LD_ADDR_VAR 0 2
59221: PUSH
59222: LD_INT 22
59224: PUSH
59225: LD_OWVAR 2
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 25
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PPUSH
59248: CALL_OW 69
59252: ST_TO_ADDR
// if not tmp then
59253: LD_VAR 0 2
59257: NOT
59258: IFFALSE 59262
// exit ;
59260: GO 59424
// un := tmp [ rand ( 1 , tmp ) ] ;
59262: LD_ADDR_VAR 0 3
59266: PUSH
59267: LD_VAR 0 2
59271: PUSH
59272: LD_INT 1
59274: PPUSH
59275: LD_VAR 0 2
59279: PPUSH
59280: CALL_OW 12
59284: ARRAY
59285: ST_TO_ADDR
// if Crawls ( un ) then
59286: LD_VAR 0 3
59290: PPUSH
59291: CALL_OW 318
59295: IFFALSE 59306
// ComWalk ( un ) ;
59297: LD_VAR 0 3
59301: PPUSH
59302: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59306: LD_VAR 0 3
59310: PPUSH
59311: LD_INT 8
59313: PPUSH
59314: CALL_OW 336
// end ; 4 :
59318: GO 59424
59320: LD_INT 4
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59328
59326: GO 59402
59328: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59329: LD_ADDR_VAR 0 2
59333: PUSH
59334: LD_INT 22
59336: PUSH
59337: LD_OWVAR 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 30
59348: PUSH
59349: LD_INT 29
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PPUSH
59360: CALL_OW 69
59364: ST_TO_ADDR
// if not tmp then
59365: LD_VAR 0 2
59369: NOT
59370: IFFALSE 59374
// exit ;
59372: GO 59424
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59374: LD_VAR 0 2
59378: PUSH
59379: LD_INT 1
59381: ARRAY
59382: PPUSH
59383: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59387: LD_VAR 0 2
59391: PUSH
59392: LD_INT 1
59394: ARRAY
59395: PPUSH
59396: CALL_OW 65
// end ; 5 .. 7 :
59400: GO 59424
59402: LD_INT 5
59404: DOUBLE
59405: GREATEREQUAL
59406: IFFALSE 59414
59408: LD_INT 7
59410: DOUBLE
59411: LESSEQUAL
59412: IFTRUE 59416
59414: GO 59423
59416: POP
// StreamSibBomb ; end ;
59417: CALL 55661 0 0
59421: GO 59424
59423: POP
// end ;
59424: PPOPN 3
59426: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59427: LD_EXP 30
59431: PUSH
59432: LD_EXP 80
59436: AND
59437: IFFALSE 59593
59439: GO 59441
59441: DISABLE
59442: LD_INT 0
59444: PPUSH
59445: PPUSH
59446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59447: LD_ADDR_VAR 0 2
59451: PUSH
59452: LD_INT 81
59454: PUSH
59455: LD_OWVAR 2
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: LD_INT 21
59469: PUSH
59470: LD_INT 1
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 21
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: LIST
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PPUSH
59496: CALL_OW 69
59500: ST_TO_ADDR
// if not tmp then
59501: LD_VAR 0 2
59505: NOT
59506: IFFALSE 59510
// exit ;
59508: GO 59593
// p := 0 ;
59510: LD_ADDR_VAR 0 3
59514: PUSH
59515: LD_INT 0
59517: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59518: LD_INT 35
59520: PPUSH
59521: CALL_OW 67
// p := p + 1 ;
59525: LD_ADDR_VAR 0 3
59529: PUSH
59530: LD_VAR 0 3
59534: PUSH
59535: LD_INT 1
59537: PLUS
59538: ST_TO_ADDR
// for i in tmp do
59539: LD_ADDR_VAR 0 1
59543: PUSH
59544: LD_VAR 0 2
59548: PUSH
59549: FOR_IN
59550: IFFALSE 59581
// if GetLives ( i ) < 1000 then
59552: LD_VAR 0 1
59556: PPUSH
59557: CALL_OW 256
59561: PUSH
59562: LD_INT 1000
59564: LESS
59565: IFFALSE 59579
// SetLives ( i , 1000 ) ;
59567: LD_VAR 0 1
59571: PPUSH
59572: LD_INT 1000
59574: PPUSH
59575: CALL_OW 234
59579: GO 59549
59581: POP
59582: POP
// until p > 20 ;
59583: LD_VAR 0 3
59587: PUSH
59588: LD_INT 20
59590: GREATER
59591: IFFALSE 59518
// end ;
59593: PPOPN 3
59595: END
// every 0 0$1 trigger StreamModeActive and sTime do
59596: LD_EXP 30
59600: PUSH
59601: LD_EXP 81
59605: AND
59606: IFFALSE 59641
59608: GO 59610
59610: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59611: LD_INT 28
59613: PPUSH
59614: LD_OWVAR 2
59618: PPUSH
59619: LD_INT 2
59621: PPUSH
59622: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59626: LD_INT 30
59628: PPUSH
59629: LD_OWVAR 2
59633: PPUSH
59634: LD_INT 2
59636: PPUSH
59637: CALL_OW 322
// end ;
59641: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59642: LD_EXP 30
59646: PUSH
59647: LD_EXP 82
59651: AND
59652: IFFALSE 59773
59654: GO 59656
59656: DISABLE
59657: LD_INT 0
59659: PPUSH
59660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59661: LD_ADDR_VAR 0 2
59665: PUSH
59666: LD_INT 22
59668: PUSH
59669: LD_OWVAR 2
59673: PUSH
59674: EMPTY
59675: LIST
59676: LIST
59677: PUSH
59678: LD_INT 21
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: PUSH
59691: LD_INT 23
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: LIST
59709: PPUSH
59710: CALL_OW 69
59714: ST_TO_ADDR
// if not tmp then
59715: LD_VAR 0 2
59719: NOT
59720: IFFALSE 59724
// exit ;
59722: GO 59773
// for i in tmp do
59724: LD_ADDR_VAR 0 1
59728: PUSH
59729: LD_VAR 0 2
59733: PUSH
59734: FOR_IN
59735: IFFALSE 59771
// begin if Crawls ( i ) then
59737: LD_VAR 0 1
59741: PPUSH
59742: CALL_OW 318
59746: IFFALSE 59757
// ComWalk ( i ) ;
59748: LD_VAR 0 1
59752: PPUSH
59753: CALL_OW 138
// SetClass ( i , 2 ) ;
59757: LD_VAR 0 1
59761: PPUSH
59762: LD_INT 2
59764: PPUSH
59765: CALL_OW 336
// end ;
59769: GO 59734
59771: POP
59772: POP
// end ;
59773: PPOPN 2
59775: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59776: LD_EXP 30
59780: PUSH
59781: LD_EXP 83
59785: AND
59786: IFFALSE 60074
59788: GO 59790
59790: DISABLE
59791: LD_INT 0
59793: PPUSH
59794: PPUSH
59795: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59796: LD_OWVAR 2
59800: PPUSH
59801: LD_INT 9
59803: PPUSH
59804: LD_INT 1
59806: PPUSH
59807: LD_INT 1
59809: PPUSH
59810: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59814: LD_INT 9
59816: PPUSH
59817: LD_OWVAR 2
59821: PPUSH
59822: CALL_OW 343
// uc_side := 9 ;
59826: LD_ADDR_OWVAR 20
59830: PUSH
59831: LD_INT 9
59833: ST_TO_ADDR
// uc_nation := 2 ;
59834: LD_ADDR_OWVAR 21
59838: PUSH
59839: LD_INT 2
59841: ST_TO_ADDR
// hc_name := Dark Warrior ;
59842: LD_ADDR_OWVAR 26
59846: PUSH
59847: LD_STRING Dark Warrior
59849: ST_TO_ADDR
// hc_gallery :=  ;
59850: LD_ADDR_OWVAR 33
59854: PUSH
59855: LD_STRING 
59857: ST_TO_ADDR
// hc_noskilllimit := true ;
59858: LD_ADDR_OWVAR 76
59862: PUSH
59863: LD_INT 1
59865: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59866: LD_ADDR_OWVAR 31
59870: PUSH
59871: LD_INT 30
59873: PUSH
59874: LD_INT 30
59876: PUSH
59877: LD_INT 30
59879: PUSH
59880: LD_INT 30
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: ST_TO_ADDR
// un := CreateHuman ;
59889: LD_ADDR_VAR 0 3
59893: PUSH
59894: CALL_OW 44
59898: ST_TO_ADDR
// hc_noskilllimit := false ;
59899: LD_ADDR_OWVAR 76
59903: PUSH
59904: LD_INT 0
59906: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59907: LD_VAR 0 3
59911: PPUSH
59912: LD_INT 1
59914: PPUSH
59915: CALL_OW 51
// ToLua ( playRanger() ) ;
59919: LD_STRING playRanger()
59921: PPUSH
59922: CALL_OW 559
// p := 0 ;
59926: LD_ADDR_VAR 0 2
59930: PUSH
59931: LD_INT 0
59933: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59934: LD_INT 35
59936: PPUSH
59937: CALL_OW 67
// p := p + 1 ;
59941: LD_ADDR_VAR 0 2
59945: PUSH
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 1
59953: PLUS
59954: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59955: LD_VAR 0 3
59959: PPUSH
59960: CALL_OW 256
59964: PUSH
59965: LD_INT 1000
59967: LESS
59968: IFFALSE 59982
// SetLives ( un , 1000 ) ;
59970: LD_VAR 0 3
59974: PPUSH
59975: LD_INT 1000
59977: PPUSH
59978: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
59982: LD_VAR 0 3
59986: PPUSH
59987: LD_INT 81
59989: PUSH
59990: LD_OWVAR 2
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 91
60001: PUSH
60002: LD_VAR 0 3
60006: PUSH
60007: LD_INT 30
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PPUSH
60019: CALL_OW 69
60023: PPUSH
60024: LD_VAR 0 3
60028: PPUSH
60029: CALL_OW 74
60033: PPUSH
60034: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60038: LD_VAR 0 2
60042: PUSH
60043: LD_INT 80
60045: GREATER
60046: PUSH
60047: LD_VAR 0 3
60051: PPUSH
60052: CALL_OW 301
60056: OR
60057: IFFALSE 59934
// if un then
60059: LD_VAR 0 3
60063: IFFALSE 60074
// RemoveUnit ( un ) ;
60065: LD_VAR 0 3
60069: PPUSH
60070: CALL_OW 64
// end ;
60074: PPOPN 3
60076: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60077: LD_EXP 84
60081: IFFALSE 60197
60083: GO 60085
60085: DISABLE
60086: LD_INT 0
60088: PPUSH
60089: PPUSH
60090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60091: LD_ADDR_VAR 0 2
60095: PUSH
60096: LD_INT 81
60098: PUSH
60099: LD_OWVAR 2
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 21
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PPUSH
60122: CALL_OW 69
60126: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60127: LD_STRING playComputer()
60129: PPUSH
60130: CALL_OW 559
// if not tmp then
60134: LD_VAR 0 2
60138: NOT
60139: IFFALSE 60143
// exit ;
60141: GO 60197
// for i in tmp do
60143: LD_ADDR_VAR 0 1
60147: PUSH
60148: LD_VAR 0 2
60152: PUSH
60153: FOR_IN
60154: IFFALSE 60195
// for j := 1 to 4 do
60156: LD_ADDR_VAR 0 3
60160: PUSH
60161: DOUBLE
60162: LD_INT 1
60164: DEC
60165: ST_TO_ADDR
60166: LD_INT 4
60168: PUSH
60169: FOR_TO
60170: IFFALSE 60191
// SetSkill ( i , j , 10 ) ;
60172: LD_VAR 0 1
60176: PPUSH
60177: LD_VAR 0 3
60181: PPUSH
60182: LD_INT 10
60184: PPUSH
60185: CALL_OW 237
60189: GO 60169
60191: POP
60192: POP
60193: GO 60153
60195: POP
60196: POP
// end ;
60197: PPOPN 3
60199: END
// every 0 0$1 trigger s30 do var i , tmp ;
60200: LD_EXP 85
60204: IFFALSE 60273
60206: GO 60208
60208: DISABLE
60209: LD_INT 0
60211: PPUSH
60212: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60213: LD_ADDR_VAR 0 2
60217: PUSH
60218: LD_INT 22
60220: PUSH
60221: LD_OWVAR 2
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PPUSH
60230: CALL_OW 69
60234: ST_TO_ADDR
// if not tmp then
60235: LD_VAR 0 2
60239: NOT
60240: IFFALSE 60244
// exit ;
60242: GO 60273
// for i in tmp do
60244: LD_ADDR_VAR 0 1
60248: PUSH
60249: LD_VAR 0 2
60253: PUSH
60254: FOR_IN
60255: IFFALSE 60271
// SetLives ( i , 300 ) ;
60257: LD_VAR 0 1
60261: PPUSH
60262: LD_INT 300
60264: PPUSH
60265: CALL_OW 234
60269: GO 60254
60271: POP
60272: POP
// end ;
60273: PPOPN 2
60275: END
// every 0 0$1 trigger s60 do var i , tmp ;
60276: LD_EXP 86
60280: IFFALSE 60349
60282: GO 60284
60284: DISABLE
60285: LD_INT 0
60287: PPUSH
60288: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60289: LD_ADDR_VAR 0 2
60293: PUSH
60294: LD_INT 22
60296: PUSH
60297: LD_OWVAR 2
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PPUSH
60306: CALL_OW 69
60310: ST_TO_ADDR
// if not tmp then
60311: LD_VAR 0 2
60315: NOT
60316: IFFALSE 60320
// exit ;
60318: GO 60349
// for i in tmp do
60320: LD_ADDR_VAR 0 1
60324: PUSH
60325: LD_VAR 0 2
60329: PUSH
60330: FOR_IN
60331: IFFALSE 60347
// SetLives ( i , 600 ) ;
60333: LD_VAR 0 1
60337: PPUSH
60338: LD_INT 600
60340: PPUSH
60341: CALL_OW 234
60345: GO 60330
60347: POP
60348: POP
// end ;
60349: PPOPN 2
60351: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60352: LD_INT 0
60354: PPUSH
// case cmd of 301 :
60355: LD_VAR 0 1
60359: PUSH
60360: LD_INT 301
60362: DOUBLE
60363: EQUAL
60364: IFTRUE 60368
60366: GO 60400
60368: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60369: LD_VAR 0 6
60373: PPUSH
60374: LD_VAR 0 7
60378: PPUSH
60379: LD_VAR 0 8
60383: PPUSH
60384: LD_VAR 0 4
60388: PPUSH
60389: LD_VAR 0 5
60393: PPUSH
60394: CALL 61609 0 5
60398: GO 60521
60400: LD_INT 302
60402: DOUBLE
60403: EQUAL
60404: IFTRUE 60408
60406: GO 60445
60408: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60409: LD_VAR 0 6
60413: PPUSH
60414: LD_VAR 0 7
60418: PPUSH
60419: LD_VAR 0 8
60423: PPUSH
60424: LD_VAR 0 9
60428: PPUSH
60429: LD_VAR 0 4
60433: PPUSH
60434: LD_VAR 0 5
60438: PPUSH
60439: CALL 61700 0 6
60443: GO 60521
60445: LD_INT 303
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60490
60453: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60454: LD_VAR 0 6
60458: PPUSH
60459: LD_VAR 0 7
60463: PPUSH
60464: LD_VAR 0 8
60468: PPUSH
60469: LD_VAR 0 9
60473: PPUSH
60474: LD_VAR 0 4
60478: PPUSH
60479: LD_VAR 0 5
60483: PPUSH
60484: CALL 60526 0 6
60488: GO 60521
60490: LD_INT 304
60492: DOUBLE
60493: EQUAL
60494: IFTRUE 60498
60496: GO 60520
60498: POP
// hHackTeleport ( unit , x , y ) ; end ;
60499: LD_VAR 0 2
60503: PPUSH
60504: LD_VAR 0 4
60508: PPUSH
60509: LD_VAR 0 5
60513: PPUSH
60514: CALL 62293 0 3
60518: GO 60521
60520: POP
// end ;
60521: LD_VAR 0 12
60525: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60526: LD_INT 0
60528: PPUSH
60529: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60530: LD_VAR 0 1
60534: PUSH
60535: LD_INT 1
60537: LESS
60538: PUSH
60539: LD_VAR 0 1
60543: PUSH
60544: LD_INT 3
60546: GREATER
60547: OR
60548: PUSH
60549: LD_VAR 0 5
60553: PPUSH
60554: LD_VAR 0 6
60558: PPUSH
60559: CALL_OW 428
60563: OR
60564: IFFALSE 60568
// exit ;
60566: GO 61296
// uc_side := your_side ;
60568: LD_ADDR_OWVAR 20
60572: PUSH
60573: LD_OWVAR 2
60577: ST_TO_ADDR
// uc_nation := nation ;
60578: LD_ADDR_OWVAR 21
60582: PUSH
60583: LD_VAR 0 1
60587: ST_TO_ADDR
// bc_level = 1 ;
60588: LD_ADDR_OWVAR 43
60592: PUSH
60593: LD_INT 1
60595: ST_TO_ADDR
// case btype of 1 :
60596: LD_VAR 0 2
60600: PUSH
60601: LD_INT 1
60603: DOUBLE
60604: EQUAL
60605: IFTRUE 60609
60607: GO 60620
60609: POP
// bc_type := b_depot ; 2 :
60610: LD_ADDR_OWVAR 42
60614: PUSH
60615: LD_INT 0
60617: ST_TO_ADDR
60618: GO 61240
60620: LD_INT 2
60622: DOUBLE
60623: EQUAL
60624: IFTRUE 60628
60626: GO 60639
60628: POP
// bc_type := b_warehouse ; 3 :
60629: LD_ADDR_OWVAR 42
60633: PUSH
60634: LD_INT 1
60636: ST_TO_ADDR
60637: GO 61240
60639: LD_INT 3
60641: DOUBLE
60642: EQUAL
60643: IFTRUE 60647
60645: GO 60658
60647: POP
// bc_type := b_lab ; 4 .. 9 :
60648: LD_ADDR_OWVAR 42
60652: PUSH
60653: LD_INT 6
60655: ST_TO_ADDR
60656: GO 61240
60658: LD_INT 4
60660: DOUBLE
60661: GREATEREQUAL
60662: IFFALSE 60670
60664: LD_INT 9
60666: DOUBLE
60667: LESSEQUAL
60668: IFTRUE 60672
60670: GO 60732
60672: POP
// begin bc_type := b_lab_half ;
60673: LD_ADDR_OWVAR 42
60677: PUSH
60678: LD_INT 7
60680: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60681: LD_ADDR_OWVAR 44
60685: PUSH
60686: LD_INT 10
60688: PUSH
60689: LD_INT 11
60691: PUSH
60692: LD_INT 12
60694: PUSH
60695: LD_INT 15
60697: PUSH
60698: LD_INT 14
60700: PUSH
60701: LD_INT 13
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: PUSH
60712: LD_VAR 0 2
60716: PUSH
60717: LD_INT 3
60719: MINUS
60720: ARRAY
60721: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
60722: LD_ADDR_OWVAR 45
60726: PUSH
60727: LD_INT 9
60729: ST_TO_ADDR
// end ; 10 .. 13 :
60730: GO 61240
60732: LD_INT 10
60734: DOUBLE
60735: GREATEREQUAL
60736: IFFALSE 60744
60738: LD_INT 13
60740: DOUBLE
60741: LESSEQUAL
60742: IFTRUE 60746
60744: GO 60823
60746: POP
// begin bc_type := b_lab_full ;
60747: LD_ADDR_OWVAR 42
60751: PUSH
60752: LD_INT 8
60754: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60755: LD_ADDR_OWVAR 44
60759: PUSH
60760: LD_INT 10
60762: PUSH
60763: LD_INT 12
60765: PUSH
60766: LD_INT 14
60768: PUSH
60769: LD_INT 13
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: PUSH
60778: LD_VAR 0 2
60782: PUSH
60783: LD_INT 9
60785: MINUS
60786: ARRAY
60787: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60788: LD_ADDR_OWVAR 45
60792: PUSH
60793: LD_INT 11
60795: PUSH
60796: LD_INT 15
60798: PUSH
60799: LD_INT 12
60801: PUSH
60802: LD_INT 15
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: PUSH
60811: LD_VAR 0 2
60815: PUSH
60816: LD_INT 9
60818: MINUS
60819: ARRAY
60820: ST_TO_ADDR
// end ; 14 :
60821: GO 61240
60823: LD_INT 14
60825: DOUBLE
60826: EQUAL
60827: IFTRUE 60831
60829: GO 60842
60831: POP
// bc_type := b_workshop ; 15 :
60832: LD_ADDR_OWVAR 42
60836: PUSH
60837: LD_INT 2
60839: ST_TO_ADDR
60840: GO 61240
60842: LD_INT 15
60844: DOUBLE
60845: EQUAL
60846: IFTRUE 60850
60848: GO 60861
60850: POP
// bc_type := b_factory ; 16 :
60851: LD_ADDR_OWVAR 42
60855: PUSH
60856: LD_INT 3
60858: ST_TO_ADDR
60859: GO 61240
60861: LD_INT 16
60863: DOUBLE
60864: EQUAL
60865: IFTRUE 60869
60867: GO 60880
60869: POP
// bc_type := b_ext_gun ; 17 :
60870: LD_ADDR_OWVAR 42
60874: PUSH
60875: LD_INT 17
60877: ST_TO_ADDR
60878: GO 61240
60880: LD_INT 17
60882: DOUBLE
60883: EQUAL
60884: IFTRUE 60888
60886: GO 60916
60888: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60889: LD_ADDR_OWVAR 42
60893: PUSH
60894: LD_INT 19
60896: PUSH
60897: LD_INT 23
60899: PUSH
60900: LD_INT 19
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: LIST
60907: PUSH
60908: LD_VAR 0 1
60912: ARRAY
60913: ST_TO_ADDR
60914: GO 61240
60916: LD_INT 18
60918: DOUBLE
60919: EQUAL
60920: IFTRUE 60924
60922: GO 60935
60924: POP
// bc_type := b_ext_radar ; 19 :
60925: LD_ADDR_OWVAR 42
60929: PUSH
60930: LD_INT 20
60932: ST_TO_ADDR
60933: GO 61240
60935: LD_INT 19
60937: DOUBLE
60938: EQUAL
60939: IFTRUE 60943
60941: GO 60954
60943: POP
// bc_type := b_ext_radio ; 20 :
60944: LD_ADDR_OWVAR 42
60948: PUSH
60949: LD_INT 22
60951: ST_TO_ADDR
60952: GO 61240
60954: LD_INT 20
60956: DOUBLE
60957: EQUAL
60958: IFTRUE 60962
60960: GO 60973
60962: POP
// bc_type := b_ext_siberium ; 21 :
60963: LD_ADDR_OWVAR 42
60967: PUSH
60968: LD_INT 21
60970: ST_TO_ADDR
60971: GO 61240
60973: LD_INT 21
60975: DOUBLE
60976: EQUAL
60977: IFTRUE 60981
60979: GO 60992
60981: POP
// bc_type := b_ext_computer ; 22 :
60982: LD_ADDR_OWVAR 42
60986: PUSH
60987: LD_INT 24
60989: ST_TO_ADDR
60990: GO 61240
60992: LD_INT 22
60994: DOUBLE
60995: EQUAL
60996: IFTRUE 61000
60998: GO 61011
61000: POP
// bc_type := b_ext_track ; 23 :
61001: LD_ADDR_OWVAR 42
61005: PUSH
61006: LD_INT 16
61008: ST_TO_ADDR
61009: GO 61240
61011: LD_INT 23
61013: DOUBLE
61014: EQUAL
61015: IFTRUE 61019
61017: GO 61030
61019: POP
// bc_type := b_ext_laser ; 24 :
61020: LD_ADDR_OWVAR 42
61024: PUSH
61025: LD_INT 25
61027: ST_TO_ADDR
61028: GO 61240
61030: LD_INT 24
61032: DOUBLE
61033: EQUAL
61034: IFTRUE 61038
61036: GO 61049
61038: POP
// bc_type := b_control_tower ; 25 :
61039: LD_ADDR_OWVAR 42
61043: PUSH
61044: LD_INT 36
61046: ST_TO_ADDR
61047: GO 61240
61049: LD_INT 25
61051: DOUBLE
61052: EQUAL
61053: IFTRUE 61057
61055: GO 61068
61057: POP
// bc_type := b_breastwork ; 26 :
61058: LD_ADDR_OWVAR 42
61062: PUSH
61063: LD_INT 31
61065: ST_TO_ADDR
61066: GO 61240
61068: LD_INT 26
61070: DOUBLE
61071: EQUAL
61072: IFTRUE 61076
61074: GO 61087
61076: POP
// bc_type := b_bunker ; 27 :
61077: LD_ADDR_OWVAR 42
61081: PUSH
61082: LD_INT 32
61084: ST_TO_ADDR
61085: GO 61240
61087: LD_INT 27
61089: DOUBLE
61090: EQUAL
61091: IFTRUE 61095
61093: GO 61106
61095: POP
// bc_type := b_turret ; 28 :
61096: LD_ADDR_OWVAR 42
61100: PUSH
61101: LD_INT 33
61103: ST_TO_ADDR
61104: GO 61240
61106: LD_INT 28
61108: DOUBLE
61109: EQUAL
61110: IFTRUE 61114
61112: GO 61125
61114: POP
// bc_type := b_armoury ; 29 :
61115: LD_ADDR_OWVAR 42
61119: PUSH
61120: LD_INT 4
61122: ST_TO_ADDR
61123: GO 61240
61125: LD_INT 29
61127: DOUBLE
61128: EQUAL
61129: IFTRUE 61133
61131: GO 61144
61133: POP
// bc_type := b_barracks ; 30 :
61134: LD_ADDR_OWVAR 42
61138: PUSH
61139: LD_INT 5
61141: ST_TO_ADDR
61142: GO 61240
61144: LD_INT 30
61146: DOUBLE
61147: EQUAL
61148: IFTRUE 61152
61150: GO 61163
61152: POP
// bc_type := b_solar_power ; 31 :
61153: LD_ADDR_OWVAR 42
61157: PUSH
61158: LD_INT 27
61160: ST_TO_ADDR
61161: GO 61240
61163: LD_INT 31
61165: DOUBLE
61166: EQUAL
61167: IFTRUE 61171
61169: GO 61182
61171: POP
// bc_type := b_oil_power ; 32 :
61172: LD_ADDR_OWVAR 42
61176: PUSH
61177: LD_INT 26
61179: ST_TO_ADDR
61180: GO 61240
61182: LD_INT 32
61184: DOUBLE
61185: EQUAL
61186: IFTRUE 61190
61188: GO 61201
61190: POP
// bc_type := b_siberite_power ; 33 :
61191: LD_ADDR_OWVAR 42
61195: PUSH
61196: LD_INT 28
61198: ST_TO_ADDR
61199: GO 61240
61201: LD_INT 33
61203: DOUBLE
61204: EQUAL
61205: IFTRUE 61209
61207: GO 61220
61209: POP
// bc_type := b_oil_mine ; 34 :
61210: LD_ADDR_OWVAR 42
61214: PUSH
61215: LD_INT 29
61217: ST_TO_ADDR
61218: GO 61240
61220: LD_INT 34
61222: DOUBLE
61223: EQUAL
61224: IFTRUE 61228
61226: GO 61239
61228: POP
// bc_type := b_siberite_mine ; end ;
61229: LD_ADDR_OWVAR 42
61233: PUSH
61234: LD_INT 30
61236: ST_TO_ADDR
61237: GO 61240
61239: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61240: LD_ADDR_VAR 0 8
61244: PUSH
61245: LD_VAR 0 5
61249: PPUSH
61250: LD_VAR 0 6
61254: PPUSH
61255: LD_VAR 0 3
61259: PPUSH
61260: CALL_OW 47
61264: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61265: LD_OWVAR 42
61269: PUSH
61270: LD_INT 32
61272: PUSH
61273: LD_INT 33
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: IN
61280: IFFALSE 61296
// PlaceWeaponTurret ( b , weapon ) ;
61282: LD_VAR 0 8
61286: PPUSH
61287: LD_VAR 0 4
61291: PPUSH
61292: CALL_OW 431
// end ;
61296: LD_VAR 0 7
61300: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61301: LD_INT 0
61303: PPUSH
61304: PPUSH
61305: PPUSH
61306: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61307: LD_ADDR_VAR 0 4
61311: PUSH
61312: LD_INT 22
61314: PUSH
61315: LD_OWVAR 2
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: LD_INT 30
61329: PUSH
61330: LD_INT 0
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: LD_INT 30
61339: PUSH
61340: LD_INT 1
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: LIST
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PPUSH
61356: CALL_OW 69
61360: ST_TO_ADDR
// if not tmp then
61361: LD_VAR 0 4
61365: NOT
61366: IFFALSE 61370
// exit ;
61368: GO 61429
// for i in tmp do
61370: LD_ADDR_VAR 0 2
61374: PUSH
61375: LD_VAR 0 4
61379: PUSH
61380: FOR_IN
61381: IFFALSE 61427
// for j = 1 to 3 do
61383: LD_ADDR_VAR 0 3
61387: PUSH
61388: DOUBLE
61389: LD_INT 1
61391: DEC
61392: ST_TO_ADDR
61393: LD_INT 3
61395: PUSH
61396: FOR_TO
61397: IFFALSE 61423
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61399: LD_VAR 0 2
61403: PPUSH
61404: CALL_OW 274
61408: PPUSH
61409: LD_VAR 0 3
61413: PPUSH
61414: LD_INT 99999
61416: PPUSH
61417: CALL_OW 277
61421: GO 61396
61423: POP
61424: POP
61425: GO 61380
61427: POP
61428: POP
// end ;
61429: LD_VAR 0 1
61433: RET
// export function hHackSetLevel10 ; var i , j ; begin
61434: LD_INT 0
61436: PPUSH
61437: PPUSH
61438: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61439: LD_ADDR_VAR 0 2
61443: PUSH
61444: LD_INT 21
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PPUSH
61454: CALL_OW 69
61458: PUSH
61459: FOR_IN
61460: IFFALSE 61512
// if IsSelected ( i ) then
61462: LD_VAR 0 2
61466: PPUSH
61467: CALL_OW 306
61471: IFFALSE 61510
// begin for j := 1 to 4 do
61473: LD_ADDR_VAR 0 3
61477: PUSH
61478: DOUBLE
61479: LD_INT 1
61481: DEC
61482: ST_TO_ADDR
61483: LD_INT 4
61485: PUSH
61486: FOR_TO
61487: IFFALSE 61508
// SetSkill ( i , j , 10 ) ;
61489: LD_VAR 0 2
61493: PPUSH
61494: LD_VAR 0 3
61498: PPUSH
61499: LD_INT 10
61501: PPUSH
61502: CALL_OW 237
61506: GO 61486
61508: POP
61509: POP
// end ;
61510: GO 61459
61512: POP
61513: POP
// end ;
61514: LD_VAR 0 1
61518: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61519: LD_INT 0
61521: PPUSH
61522: PPUSH
61523: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61524: LD_ADDR_VAR 0 2
61528: PUSH
61529: LD_INT 22
61531: PUSH
61532: LD_OWVAR 2
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 21
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PPUSH
61555: CALL_OW 69
61559: PUSH
61560: FOR_IN
61561: IFFALSE 61602
// begin for j := 1 to 4 do
61563: LD_ADDR_VAR 0 3
61567: PUSH
61568: DOUBLE
61569: LD_INT 1
61571: DEC
61572: ST_TO_ADDR
61573: LD_INT 4
61575: PUSH
61576: FOR_TO
61577: IFFALSE 61598
// SetSkill ( i , j , 10 ) ;
61579: LD_VAR 0 2
61583: PPUSH
61584: LD_VAR 0 3
61588: PPUSH
61589: LD_INT 10
61591: PPUSH
61592: CALL_OW 237
61596: GO 61576
61598: POP
61599: POP
// end ;
61600: GO 61560
61602: POP
61603: POP
// end ;
61604: LD_VAR 0 1
61608: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61609: LD_INT 0
61611: PPUSH
// uc_side := your_side ;
61612: LD_ADDR_OWVAR 20
61616: PUSH
61617: LD_OWVAR 2
61621: ST_TO_ADDR
// uc_nation := nation ;
61622: LD_ADDR_OWVAR 21
61626: PUSH
61627: LD_VAR 0 1
61631: ST_TO_ADDR
// InitHc ;
61632: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61636: LD_INT 0
61638: PPUSH
61639: LD_VAR 0 2
61643: PPUSH
61644: LD_VAR 0 3
61648: PPUSH
61649: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61653: LD_VAR 0 4
61657: PPUSH
61658: LD_VAR 0 5
61662: PPUSH
61663: CALL_OW 428
61667: PUSH
61668: LD_INT 0
61670: EQUAL
61671: IFFALSE 61695
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61673: CALL_OW 44
61677: PPUSH
61678: LD_VAR 0 4
61682: PPUSH
61683: LD_VAR 0 5
61687: PPUSH
61688: LD_INT 1
61690: PPUSH
61691: CALL_OW 48
// end ;
61695: LD_VAR 0 6
61699: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61700: LD_INT 0
61702: PPUSH
61703: PPUSH
// uc_side := your_side ;
61704: LD_ADDR_OWVAR 20
61708: PUSH
61709: LD_OWVAR 2
61713: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61714: LD_VAR 0 1
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: LD_INT 2
61724: PUSH
61725: LD_INT 3
61727: PUSH
61728: LD_INT 4
61730: PUSH
61731: LD_INT 5
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: IN
61741: IFFALSE 61753
// uc_nation := nation_american else
61743: LD_ADDR_OWVAR 21
61747: PUSH
61748: LD_INT 1
61750: ST_TO_ADDR
61751: GO 61796
// if chassis in [ 11 , 12 , 13 , 14 ] then
61753: LD_VAR 0 1
61757: PUSH
61758: LD_INT 11
61760: PUSH
61761: LD_INT 12
61763: PUSH
61764: LD_INT 13
61766: PUSH
61767: LD_INT 14
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: IN
61776: IFFALSE 61788
// uc_nation := nation_arabian else
61778: LD_ADDR_OWVAR 21
61782: PUSH
61783: LD_INT 2
61785: ST_TO_ADDR
61786: GO 61796
// uc_nation := nation_russian ;
61788: LD_ADDR_OWVAR 21
61792: PUSH
61793: LD_INT 3
61795: ST_TO_ADDR
// vc_chassis := chassis ;
61796: LD_ADDR_OWVAR 37
61800: PUSH
61801: LD_VAR 0 1
61805: ST_TO_ADDR
// vc_engine := engine ;
61806: LD_ADDR_OWVAR 39
61810: PUSH
61811: LD_VAR 0 2
61815: ST_TO_ADDR
// vc_control := control ;
61816: LD_ADDR_OWVAR 38
61820: PUSH
61821: LD_VAR 0 3
61825: ST_TO_ADDR
// vc_weapon := weapon ;
61826: LD_ADDR_OWVAR 40
61830: PUSH
61831: LD_VAR 0 4
61835: ST_TO_ADDR
// un := CreateVehicle ;
61836: LD_ADDR_VAR 0 8
61840: PUSH
61841: CALL_OW 45
61845: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61846: LD_VAR 0 8
61850: PPUSH
61851: LD_INT 0
61853: PPUSH
61854: LD_INT 5
61856: PPUSH
61857: CALL_OW 12
61861: PPUSH
61862: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61866: LD_VAR 0 8
61870: PPUSH
61871: LD_VAR 0 5
61875: PPUSH
61876: LD_VAR 0 6
61880: PPUSH
61881: LD_INT 1
61883: PPUSH
61884: CALL_OW 48
// end ;
61888: LD_VAR 0 7
61892: RET
// export hInvincible ; every 1 do
61893: GO 61895
61895: DISABLE
// hInvincible := [ ] ;
61896: LD_ADDR_EXP 87
61900: PUSH
61901: EMPTY
61902: ST_TO_ADDR
61903: END
// every 10 do var i ;
61904: GO 61906
61906: DISABLE
61907: LD_INT 0
61909: PPUSH
// begin enable ;
61910: ENABLE
// if not hInvincible then
61911: LD_EXP 87
61915: NOT
61916: IFFALSE 61920
// exit ;
61918: GO 61964
// for i in hInvincible do
61920: LD_ADDR_VAR 0 1
61924: PUSH
61925: LD_EXP 87
61929: PUSH
61930: FOR_IN
61931: IFFALSE 61962
// if GetLives ( i ) < 1000 then
61933: LD_VAR 0 1
61937: PPUSH
61938: CALL_OW 256
61942: PUSH
61943: LD_INT 1000
61945: LESS
61946: IFFALSE 61960
// SetLives ( i , 1000 ) ;
61948: LD_VAR 0 1
61952: PPUSH
61953: LD_INT 1000
61955: PPUSH
61956: CALL_OW 234
61960: GO 61930
61962: POP
61963: POP
// end ;
61964: PPOPN 1
61966: END
// export function hHackInvincible ; var i ; begin
61967: LD_INT 0
61969: PPUSH
61970: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61971: LD_ADDR_VAR 0 2
61975: PUSH
61976: LD_INT 2
61978: PUSH
61979: LD_INT 21
61981: PUSH
61982: LD_INT 1
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 21
61991: PUSH
61992: LD_INT 2
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: LIST
62003: PPUSH
62004: CALL_OW 69
62008: PUSH
62009: FOR_IN
62010: IFFALSE 62071
// if IsSelected ( i ) then
62012: LD_VAR 0 2
62016: PPUSH
62017: CALL_OW 306
62021: IFFALSE 62069
// begin if i in hInvincible then
62023: LD_VAR 0 2
62027: PUSH
62028: LD_EXP 87
62032: IN
62033: IFFALSE 62053
// hInvincible := hInvincible diff i else
62035: LD_ADDR_EXP 87
62039: PUSH
62040: LD_EXP 87
62044: PUSH
62045: LD_VAR 0 2
62049: DIFF
62050: ST_TO_ADDR
62051: GO 62069
// hInvincible := hInvincible union i ;
62053: LD_ADDR_EXP 87
62057: PUSH
62058: LD_EXP 87
62062: PUSH
62063: LD_VAR 0 2
62067: UNION
62068: ST_TO_ADDR
// end ;
62069: GO 62009
62071: POP
62072: POP
// end ;
62073: LD_VAR 0 1
62077: RET
// export function hHackInvisible ; var i , j ; begin
62078: LD_INT 0
62080: PPUSH
62081: PPUSH
62082: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62083: LD_ADDR_VAR 0 2
62087: PUSH
62088: LD_INT 21
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: EMPTY
62095: LIST
62096: LIST
62097: PPUSH
62098: CALL_OW 69
62102: PUSH
62103: FOR_IN
62104: IFFALSE 62128
// if IsSelected ( i ) then
62106: LD_VAR 0 2
62110: PPUSH
62111: CALL_OW 306
62115: IFFALSE 62126
// ComForceInvisible ( i ) ;
62117: LD_VAR 0 2
62121: PPUSH
62122: CALL_OW 496
62126: GO 62103
62128: POP
62129: POP
// end ;
62130: LD_VAR 0 1
62134: RET
// export function hHackChangeYourSide ; begin
62135: LD_INT 0
62137: PPUSH
// if your_side = 8 then
62138: LD_OWVAR 2
62142: PUSH
62143: LD_INT 8
62145: EQUAL
62146: IFFALSE 62158
// your_side := 0 else
62148: LD_ADDR_OWVAR 2
62152: PUSH
62153: LD_INT 0
62155: ST_TO_ADDR
62156: GO 62172
// your_side := your_side + 1 ;
62158: LD_ADDR_OWVAR 2
62162: PUSH
62163: LD_OWVAR 2
62167: PUSH
62168: LD_INT 1
62170: PLUS
62171: ST_TO_ADDR
// end ;
62172: LD_VAR 0 1
62176: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62177: LD_INT 0
62179: PPUSH
62180: PPUSH
62181: PPUSH
// for i in all_units do
62182: LD_ADDR_VAR 0 2
62186: PUSH
62187: LD_OWVAR 3
62191: PUSH
62192: FOR_IN
62193: IFFALSE 62271
// if IsSelected ( i ) then
62195: LD_VAR 0 2
62199: PPUSH
62200: CALL_OW 306
62204: IFFALSE 62269
// begin j := GetSide ( i ) ;
62206: LD_ADDR_VAR 0 3
62210: PUSH
62211: LD_VAR 0 2
62215: PPUSH
62216: CALL_OW 255
62220: ST_TO_ADDR
// if j = 8 then
62221: LD_VAR 0 3
62225: PUSH
62226: LD_INT 8
62228: EQUAL
62229: IFFALSE 62241
// j := 0 else
62231: LD_ADDR_VAR 0 3
62235: PUSH
62236: LD_INT 0
62238: ST_TO_ADDR
62239: GO 62255
// j := j + 1 ;
62241: LD_ADDR_VAR 0 3
62245: PUSH
62246: LD_VAR 0 3
62250: PUSH
62251: LD_INT 1
62253: PLUS
62254: ST_TO_ADDR
// SetSide ( i , j ) ;
62255: LD_VAR 0 2
62259: PPUSH
62260: LD_VAR 0 3
62264: PPUSH
62265: CALL_OW 235
// end ;
62269: GO 62192
62271: POP
62272: POP
// end ;
62273: LD_VAR 0 1
62277: RET
// export function hHackFog ; begin
62278: LD_INT 0
62280: PPUSH
// FogOff ( true ) ;
62281: LD_INT 1
62283: PPUSH
62284: CALL_OW 344
// end ;
62288: LD_VAR 0 1
62292: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62293: LD_INT 0
62295: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62296: LD_VAR 0 1
62300: PPUSH
62301: LD_VAR 0 2
62305: PPUSH
62306: LD_VAR 0 3
62310: PPUSH
62311: LD_INT 1
62313: PPUSH
62314: LD_INT 1
62316: PPUSH
62317: CALL_OW 483
// CenterOnXY ( x , y ) ;
62321: LD_VAR 0 2
62325: PPUSH
62326: LD_VAR 0 3
62330: PPUSH
62331: CALL_OW 84
// end ;
62335: LD_VAR 0 4
62339: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62340: LD_INT 0
62342: PPUSH
62343: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62344: LD_VAR 0 1
62348: NOT
62349: PUSH
62350: LD_VAR 0 2
62354: PPUSH
62355: LD_VAR 0 3
62359: PPUSH
62360: CALL_OW 488
62364: NOT
62365: OR
62366: PUSH
62367: LD_VAR 0 1
62371: PPUSH
62372: CALL_OW 266
62376: PUSH
62377: LD_INT 3
62379: NONEQUAL
62380: PUSH
62381: LD_VAR 0 1
62385: PPUSH
62386: CALL_OW 247
62390: PUSH
62391: LD_INT 1
62393: EQUAL
62394: NOT
62395: AND
62396: OR
62397: IFFALSE 62401
// exit ;
62399: GO 62550
// if GetType ( factory ) = unit_human then
62401: LD_VAR 0 1
62405: PPUSH
62406: CALL_OW 247
62410: PUSH
62411: LD_INT 1
62413: EQUAL
62414: IFFALSE 62431
// factory := IsInUnit ( factory ) ;
62416: LD_ADDR_VAR 0 1
62420: PUSH
62421: LD_VAR 0 1
62425: PPUSH
62426: CALL_OW 310
62430: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62431: LD_VAR 0 1
62435: PPUSH
62436: CALL_OW 266
62440: PUSH
62441: LD_INT 3
62443: NONEQUAL
62444: IFFALSE 62448
// exit ;
62446: GO 62550
// if HexInfo ( x , y ) = factory then
62448: LD_VAR 0 2
62452: PPUSH
62453: LD_VAR 0 3
62457: PPUSH
62458: CALL_OW 428
62462: PUSH
62463: LD_VAR 0 1
62467: EQUAL
62468: IFFALSE 62495
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62470: LD_ADDR_EXP 88
62474: PUSH
62475: LD_EXP 88
62479: PPUSH
62480: LD_VAR 0 1
62484: PPUSH
62485: LD_INT 0
62487: PPUSH
62488: CALL_OW 1
62492: ST_TO_ADDR
62493: GO 62546
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62495: LD_ADDR_EXP 88
62499: PUSH
62500: LD_EXP 88
62504: PPUSH
62505: LD_VAR 0 1
62509: PPUSH
62510: LD_VAR 0 1
62514: PPUSH
62515: CALL_OW 255
62519: PUSH
62520: LD_VAR 0 1
62524: PUSH
62525: LD_VAR 0 2
62529: PUSH
62530: LD_VAR 0 3
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: PPUSH
62541: CALL_OW 1
62545: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62546: CALL 62555 0 0
// end ;
62550: LD_VAR 0 4
62554: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62555: LD_INT 0
62557: PPUSH
62558: PPUSH
62559: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62560: LD_STRING resetFactoryWaypoint();
62562: PPUSH
62563: CALL_OW 559
// if factoryWaypoints then
62567: LD_EXP 88
62571: IFFALSE 62697
// begin list := PrepareArray ( factoryWaypoints ) ;
62573: LD_ADDR_VAR 0 3
62577: PUSH
62578: LD_EXP 88
62582: PPUSH
62583: CALL 47476 0 1
62587: ST_TO_ADDR
// for i := 1 to list do
62588: LD_ADDR_VAR 0 2
62592: PUSH
62593: DOUBLE
62594: LD_INT 1
62596: DEC
62597: ST_TO_ADDR
62598: LD_VAR 0 3
62602: PUSH
62603: FOR_TO
62604: IFFALSE 62695
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62606: LD_STRING setFactoryWaypointXY(
62608: PUSH
62609: LD_VAR 0 3
62613: PUSH
62614: LD_VAR 0 2
62618: ARRAY
62619: PUSH
62620: LD_INT 1
62622: ARRAY
62623: STR
62624: PUSH
62625: LD_STRING ,
62627: STR
62628: PUSH
62629: LD_VAR 0 3
62633: PUSH
62634: LD_VAR 0 2
62638: ARRAY
62639: PUSH
62640: LD_INT 2
62642: ARRAY
62643: STR
62644: PUSH
62645: LD_STRING ,
62647: STR
62648: PUSH
62649: LD_VAR 0 3
62653: PUSH
62654: LD_VAR 0 2
62658: ARRAY
62659: PUSH
62660: LD_INT 3
62662: ARRAY
62663: STR
62664: PUSH
62665: LD_STRING ,
62667: STR
62668: PUSH
62669: LD_VAR 0 3
62673: PUSH
62674: LD_VAR 0 2
62678: ARRAY
62679: PUSH
62680: LD_INT 4
62682: ARRAY
62683: STR
62684: PUSH
62685: LD_STRING )
62687: STR
62688: PPUSH
62689: CALL_OW 559
62693: GO 62603
62695: POP
62696: POP
// end ; end ;
62697: LD_VAR 0 1
62701: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62702: LD_INT 0
62704: PPUSH
// if HexInfo ( x , y ) = warehouse then
62705: LD_VAR 0 2
62709: PPUSH
62710: LD_VAR 0 3
62714: PPUSH
62715: CALL_OW 428
62719: PUSH
62720: LD_VAR 0 1
62724: EQUAL
62725: IFFALSE 62752
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62727: LD_ADDR_EXP 89
62731: PUSH
62732: LD_EXP 89
62736: PPUSH
62737: LD_VAR 0 1
62741: PPUSH
62742: LD_INT 0
62744: PPUSH
62745: CALL_OW 1
62749: ST_TO_ADDR
62750: GO 62803
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62752: LD_ADDR_EXP 89
62756: PUSH
62757: LD_EXP 89
62761: PPUSH
62762: LD_VAR 0 1
62766: PPUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: CALL_OW 255
62776: PUSH
62777: LD_VAR 0 1
62781: PUSH
62782: LD_VAR 0 2
62786: PUSH
62787: LD_VAR 0 3
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: PPUSH
62798: CALL_OW 1
62802: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62803: CALL 62812 0 0
// end ;
62807: LD_VAR 0 4
62811: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62812: LD_INT 0
62814: PPUSH
62815: PPUSH
62816: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62817: LD_STRING resetWarehouseGatheringPoints();
62819: PPUSH
62820: CALL_OW 559
// if warehouseGatheringPoints then
62824: LD_EXP 89
62828: IFFALSE 62954
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62830: LD_ADDR_VAR 0 3
62834: PUSH
62835: LD_EXP 89
62839: PPUSH
62840: CALL 47476 0 1
62844: ST_TO_ADDR
// for i := 1 to list do
62845: LD_ADDR_VAR 0 2
62849: PUSH
62850: DOUBLE
62851: LD_INT 1
62853: DEC
62854: ST_TO_ADDR
62855: LD_VAR 0 3
62859: PUSH
62860: FOR_TO
62861: IFFALSE 62952
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62863: LD_STRING setWarehouseGatheringPointXY(
62865: PUSH
62866: LD_VAR 0 3
62870: PUSH
62871: LD_VAR 0 2
62875: ARRAY
62876: PUSH
62877: LD_INT 1
62879: ARRAY
62880: STR
62881: PUSH
62882: LD_STRING ,
62884: STR
62885: PUSH
62886: LD_VAR 0 3
62890: PUSH
62891: LD_VAR 0 2
62895: ARRAY
62896: PUSH
62897: LD_INT 2
62899: ARRAY
62900: STR
62901: PUSH
62902: LD_STRING ,
62904: STR
62905: PUSH
62906: LD_VAR 0 3
62910: PUSH
62911: LD_VAR 0 2
62915: ARRAY
62916: PUSH
62917: LD_INT 3
62919: ARRAY
62920: STR
62921: PUSH
62922: LD_STRING ,
62924: STR
62925: PUSH
62926: LD_VAR 0 3
62930: PUSH
62931: LD_VAR 0 2
62935: ARRAY
62936: PUSH
62937: LD_INT 4
62939: ARRAY
62940: STR
62941: PUSH
62942: LD_STRING )
62944: STR
62945: PPUSH
62946: CALL_OW 559
62950: GO 62860
62952: POP
62953: POP
// end ; end ;
62954: LD_VAR 0 1
62958: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62959: LD_EXP 89
62963: IFFALSE 63648
62965: GO 62967
62967: DISABLE
62968: LD_INT 0
62970: PPUSH
62971: PPUSH
62972: PPUSH
62973: PPUSH
62974: PPUSH
62975: PPUSH
62976: PPUSH
62977: PPUSH
62978: PPUSH
// begin enable ;
62979: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62980: LD_ADDR_VAR 0 3
62984: PUSH
62985: LD_EXP 89
62989: PPUSH
62990: CALL 47476 0 1
62994: ST_TO_ADDR
// if not list then
62995: LD_VAR 0 3
62999: NOT
63000: IFFALSE 63004
// exit ;
63002: GO 63648
// for i := 1 to list do
63004: LD_ADDR_VAR 0 1
63008: PUSH
63009: DOUBLE
63010: LD_INT 1
63012: DEC
63013: ST_TO_ADDR
63014: LD_VAR 0 3
63018: PUSH
63019: FOR_TO
63020: IFFALSE 63646
// begin depot := list [ i ] [ 2 ] ;
63022: LD_ADDR_VAR 0 8
63026: PUSH
63027: LD_VAR 0 3
63031: PUSH
63032: LD_VAR 0 1
63036: ARRAY
63037: PUSH
63038: LD_INT 2
63040: ARRAY
63041: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63042: LD_ADDR_VAR 0 5
63046: PUSH
63047: LD_VAR 0 3
63051: PUSH
63052: LD_VAR 0 1
63056: ARRAY
63057: PUSH
63058: LD_INT 1
63060: ARRAY
63061: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63062: LD_VAR 0 8
63066: PPUSH
63067: CALL_OW 301
63071: PUSH
63072: LD_VAR 0 5
63076: PUSH
63077: LD_VAR 0 8
63081: PPUSH
63082: CALL_OW 255
63086: NONEQUAL
63087: OR
63088: IFFALSE 63117
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63090: LD_ADDR_EXP 89
63094: PUSH
63095: LD_EXP 89
63099: PPUSH
63100: LD_VAR 0 8
63104: PPUSH
63105: LD_INT 0
63107: PPUSH
63108: CALL_OW 1
63112: ST_TO_ADDR
// exit ;
63113: POP
63114: POP
63115: GO 63648
// end ; x := list [ i ] [ 3 ] ;
63117: LD_ADDR_VAR 0 6
63121: PUSH
63122: LD_VAR 0 3
63126: PUSH
63127: LD_VAR 0 1
63131: ARRAY
63132: PUSH
63133: LD_INT 3
63135: ARRAY
63136: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63137: LD_ADDR_VAR 0 7
63141: PUSH
63142: LD_VAR 0 3
63146: PUSH
63147: LD_VAR 0 1
63151: ARRAY
63152: PUSH
63153: LD_INT 4
63155: ARRAY
63156: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63157: LD_ADDR_VAR 0 9
63161: PUSH
63162: LD_VAR 0 6
63166: PPUSH
63167: LD_VAR 0 7
63171: PPUSH
63172: LD_INT 16
63174: PPUSH
63175: CALL 46064 0 3
63179: ST_TO_ADDR
// if not cratesNearbyPoint then
63180: LD_VAR 0 9
63184: NOT
63185: IFFALSE 63191
// exit ;
63187: POP
63188: POP
63189: GO 63648
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63191: LD_ADDR_VAR 0 4
63195: PUSH
63196: LD_INT 22
63198: PUSH
63199: LD_VAR 0 5
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: LD_INT 60
63213: PUSH
63214: EMPTY
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 91
63223: PUSH
63224: LD_VAR 0 8
63228: PUSH
63229: LD_INT 6
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 2
63239: PUSH
63240: LD_INT 25
63242: PUSH
63243: LD_INT 2
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 25
63252: PUSH
63253: LD_INT 16
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: LIST
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: PPUSH
63271: CALL_OW 69
63275: PUSH
63276: LD_VAR 0 8
63280: PPUSH
63281: CALL_OW 313
63285: PPUSH
63286: LD_INT 3
63288: PUSH
63289: LD_INT 60
63291: PUSH
63292: EMPTY
63293: LIST
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: LD_INT 25
63304: PUSH
63305: LD_INT 2
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 25
63314: PUSH
63315: LD_INT 16
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PPUSH
63331: CALL_OW 72
63335: UNION
63336: ST_TO_ADDR
// if tmp then
63337: LD_VAR 0 4
63341: IFFALSE 63421
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63343: LD_ADDR_VAR 0 4
63347: PUSH
63348: LD_VAR 0 4
63352: PPUSH
63353: LD_INT 3
63355: PPUSH
63356: CALL 44033 0 2
63360: ST_TO_ADDR
// for j in tmp do
63361: LD_ADDR_VAR 0 2
63365: PUSH
63366: LD_VAR 0 4
63370: PUSH
63371: FOR_IN
63372: IFFALSE 63415
// begin if IsInUnit ( j ) then
63374: LD_VAR 0 2
63378: PPUSH
63379: CALL_OW 310
63383: IFFALSE 63394
// ComExit ( j ) ;
63385: LD_VAR 0 2
63389: PPUSH
63390: CALL 44116 0 1
// AddComCollect ( j , x , y ) ;
63394: LD_VAR 0 2
63398: PPUSH
63399: LD_VAR 0 6
63403: PPUSH
63404: LD_VAR 0 7
63408: PPUSH
63409: CALL_OW 177
// end ;
63413: GO 63371
63415: POP
63416: POP
// exit ;
63417: POP
63418: POP
63419: GO 63648
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63421: LD_ADDR_VAR 0 4
63425: PUSH
63426: LD_INT 22
63428: PUSH
63429: LD_VAR 0 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 91
63440: PUSH
63441: LD_VAR 0 8
63445: PUSH
63446: LD_INT 8
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: LD_INT 34
63459: PUSH
63460: LD_INT 12
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 34
63469: PUSH
63470: LD_INT 51
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 34
63479: PUSH
63480: LD_INT 32
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 34
63489: PUSH
63490: LD_INT 89
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: PPUSH
63509: CALL_OW 69
63513: ST_TO_ADDR
// if tmp then
63514: LD_VAR 0 4
63518: IFFALSE 63644
// begin for j in tmp do
63520: LD_ADDR_VAR 0 2
63524: PUSH
63525: LD_VAR 0 4
63529: PUSH
63530: FOR_IN
63531: IFFALSE 63642
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63533: LD_VAR 0 2
63537: PPUSH
63538: CALL_OW 262
63542: PUSH
63543: LD_INT 3
63545: EQUAL
63546: PUSH
63547: LD_VAR 0 2
63551: PPUSH
63552: CALL_OW 261
63556: PUSH
63557: LD_INT 20
63559: GREATER
63560: OR
63561: PUSH
63562: LD_VAR 0 2
63566: PPUSH
63567: CALL_OW 314
63571: NOT
63572: AND
63573: PUSH
63574: LD_VAR 0 2
63578: PPUSH
63579: CALL_OW 263
63583: PUSH
63584: LD_INT 1
63586: NONEQUAL
63587: PUSH
63588: LD_VAR 0 2
63592: PPUSH
63593: CALL_OW 311
63597: OR
63598: AND
63599: IFFALSE 63640
// begin ComCollect ( j , x , y ) ;
63601: LD_VAR 0 2
63605: PPUSH
63606: LD_VAR 0 6
63610: PPUSH
63611: LD_VAR 0 7
63615: PPUSH
63616: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63620: LD_VAR 0 2
63624: PPUSH
63625: LD_VAR 0 8
63629: PPUSH
63630: CALL_OW 172
// exit ;
63634: POP
63635: POP
63636: POP
63637: POP
63638: GO 63648
// end ;
63640: GO 63530
63642: POP
63643: POP
// end ; end ;
63644: GO 63019
63646: POP
63647: POP
// end ; end_of_file
63648: PPOPN 9
63650: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63651: LD_VAR 0 1
63655: PUSH
63656: LD_INT 200
63658: DOUBLE
63659: GREATEREQUAL
63660: IFFALSE 63668
63662: LD_INT 299
63664: DOUBLE
63665: LESSEQUAL
63666: IFTRUE 63670
63668: GO 63702
63670: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63671: LD_VAR 0 1
63675: PPUSH
63676: LD_VAR 0 2
63680: PPUSH
63681: LD_VAR 0 3
63685: PPUSH
63686: LD_VAR 0 4
63690: PPUSH
63691: LD_VAR 0 5
63695: PPUSH
63696: CALL 64190 0 5
63700: GO 63779
63702: LD_INT 300
63704: DOUBLE
63705: GREATEREQUAL
63706: IFFALSE 63714
63708: LD_INT 399
63710: DOUBLE
63711: LESSEQUAL
63712: IFTRUE 63716
63714: GO 63778
63716: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63717: LD_VAR 0 1
63721: PPUSH
63722: LD_VAR 0 2
63726: PPUSH
63727: LD_VAR 0 3
63731: PPUSH
63732: LD_VAR 0 4
63736: PPUSH
63737: LD_VAR 0 5
63741: PPUSH
63742: LD_VAR 0 6
63746: PPUSH
63747: LD_VAR 0 7
63751: PPUSH
63752: LD_VAR 0 8
63756: PPUSH
63757: LD_VAR 0 9
63761: PPUSH
63762: LD_VAR 0 10
63766: PPUSH
63767: LD_VAR 0 11
63771: PPUSH
63772: CALL 60352 0 11
63776: GO 63779
63778: POP
// end ;
63779: PPOPN 11
63781: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63782: LD_VAR 0 1
63786: PPUSH
63787: LD_VAR 0 2
63791: PPUSH
63792: LD_VAR 0 3
63796: PPUSH
63797: LD_VAR 0 4
63801: PPUSH
63802: LD_VAR 0 5
63806: PPUSH
63807: CALL 63926 0 5
// end ; end_of_file
63811: PPOPN 5
63813: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63814: LD_INT 0
63816: PPUSH
63817: PPUSH
63818: PPUSH
63819: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63820: LD_VAR 0 1
63824: PPUSH
63825: CALL_OW 264
63829: PUSH
63830: LD_INT 91
63832: EQUAL
63833: IFFALSE 63905
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63835: LD_INT 68
63837: PPUSH
63838: LD_VAR 0 1
63842: PPUSH
63843: CALL_OW 255
63847: PPUSH
63848: CALL_OW 321
63852: PUSH
63853: LD_INT 2
63855: EQUAL
63856: IFFALSE 63868
// eff := 70 else
63858: LD_ADDR_VAR 0 4
63862: PUSH
63863: LD_INT 70
63865: ST_TO_ADDR
63866: GO 63876
// eff := 30 ;
63868: LD_ADDR_VAR 0 4
63872: PUSH
63873: LD_INT 30
63875: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63876: LD_VAR 0 1
63880: PPUSH
63881: CALL_OW 250
63885: PPUSH
63886: LD_VAR 0 1
63890: PPUSH
63891: CALL_OW 251
63895: PPUSH
63896: LD_VAR 0 4
63900: PPUSH
63901: CALL_OW 495
// end ; end ;
63905: LD_VAR 0 2
63909: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63910: LD_INT 0
63912: PPUSH
// end ;
63913: LD_VAR 0 4
63917: RET
// export function SOS_Command ( cmd ) ; begin
63918: LD_INT 0
63920: PPUSH
// end ;
63921: LD_VAR 0 2
63925: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63926: LD_INT 0
63928: PPUSH
// end ;
63929: LD_VAR 0 6
63933: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
63934: LD_INT 0
63936: PPUSH
63937: PPUSH
// if not vehicle or not factory then
63938: LD_VAR 0 1
63942: NOT
63943: PUSH
63944: LD_VAR 0 2
63948: NOT
63949: OR
63950: IFFALSE 63954
// exit ;
63952: GO 64185
// if factoryWaypoints >= factory then
63954: LD_EXP 88
63958: PUSH
63959: LD_VAR 0 2
63963: GREATEREQUAL
63964: IFFALSE 64185
// if factoryWaypoints [ factory ] then
63966: LD_EXP 88
63970: PUSH
63971: LD_VAR 0 2
63975: ARRAY
63976: IFFALSE 64185
// begin if GetControl ( vehicle ) = control_manual then
63978: LD_VAR 0 1
63982: PPUSH
63983: CALL_OW 263
63987: PUSH
63988: LD_INT 1
63990: EQUAL
63991: IFFALSE 64072
// begin driver := IsDrivenBy ( vehicle ) ;
63993: LD_ADDR_VAR 0 4
63997: PUSH
63998: LD_VAR 0 1
64002: PPUSH
64003: CALL_OW 311
64007: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64008: LD_VAR 0 4
64012: PPUSH
64013: LD_EXP 88
64017: PUSH
64018: LD_VAR 0 2
64022: ARRAY
64023: PUSH
64024: LD_INT 3
64026: ARRAY
64027: PPUSH
64028: LD_EXP 88
64032: PUSH
64033: LD_VAR 0 2
64037: ARRAY
64038: PUSH
64039: LD_INT 4
64041: ARRAY
64042: PPUSH
64043: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64047: LD_VAR 0 4
64051: PPUSH
64052: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64056: LD_VAR 0 4
64060: PPUSH
64061: LD_VAR 0 2
64065: PPUSH
64066: CALL_OW 180
// end else
64070: GO 64185
// if GetControl ( vehicle ) = control_remote then
64072: LD_VAR 0 1
64076: PPUSH
64077: CALL_OW 263
64081: PUSH
64082: LD_INT 2
64084: EQUAL
64085: IFFALSE 64146
// begin wait ( 0 0$2 ) ;
64087: LD_INT 70
64089: PPUSH
64090: CALL_OW 67
// if Connect ( vehicle ) then
64094: LD_VAR 0 1
64098: PPUSH
64099: CALL 14357 0 1
64103: IFFALSE 64144
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64105: LD_VAR 0 1
64109: PPUSH
64110: LD_EXP 88
64114: PUSH
64115: LD_VAR 0 2
64119: ARRAY
64120: PUSH
64121: LD_INT 3
64123: ARRAY
64124: PPUSH
64125: LD_EXP 88
64129: PUSH
64130: LD_VAR 0 2
64134: ARRAY
64135: PUSH
64136: LD_INT 4
64138: ARRAY
64139: PPUSH
64140: CALL_OW 171
// end else
64144: GO 64185
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64146: LD_VAR 0 1
64150: PPUSH
64151: LD_EXP 88
64155: PUSH
64156: LD_VAR 0 2
64160: ARRAY
64161: PUSH
64162: LD_INT 3
64164: ARRAY
64165: PPUSH
64166: LD_EXP 88
64170: PUSH
64171: LD_VAR 0 2
64175: ARRAY
64176: PUSH
64177: LD_INT 4
64179: ARRAY
64180: PPUSH
64181: CALL_OW 171
// end ; end ;
64185: LD_VAR 0 3
64189: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64190: LD_INT 0
64192: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64193: LD_VAR 0 1
64197: PUSH
64198: LD_INT 250
64200: EQUAL
64201: PUSH
64202: LD_VAR 0 2
64206: PPUSH
64207: CALL_OW 264
64211: PUSH
64212: LD_INT 81
64214: EQUAL
64215: AND
64216: IFFALSE 64237
// MinerPlaceMine ( unit , x , y ) ;
64218: LD_VAR 0 2
64222: PPUSH
64223: LD_VAR 0 4
64227: PPUSH
64228: LD_VAR 0 5
64232: PPUSH
64233: CALL 66622 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64237: LD_VAR 0 1
64241: PUSH
64242: LD_INT 251
64244: EQUAL
64245: PUSH
64246: LD_VAR 0 2
64250: PPUSH
64251: CALL_OW 264
64255: PUSH
64256: LD_INT 81
64258: EQUAL
64259: AND
64260: IFFALSE 64281
// MinerDetonateMine ( unit , x , y ) ;
64262: LD_VAR 0 2
64266: PPUSH
64267: LD_VAR 0 4
64271: PPUSH
64272: LD_VAR 0 5
64276: PPUSH
64277: CALL 66897 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64281: LD_VAR 0 1
64285: PUSH
64286: LD_INT 252
64288: EQUAL
64289: PUSH
64290: LD_VAR 0 2
64294: PPUSH
64295: CALL_OW 264
64299: PUSH
64300: LD_INT 81
64302: EQUAL
64303: AND
64304: IFFALSE 64325
// MinerCreateMinefield ( unit , x , y ) ;
64306: LD_VAR 0 2
64310: PPUSH
64311: LD_VAR 0 4
64315: PPUSH
64316: LD_VAR 0 5
64320: PPUSH
64321: CALL 67314 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64325: LD_VAR 0 1
64329: PUSH
64330: LD_INT 253
64332: EQUAL
64333: PUSH
64334: LD_VAR 0 2
64338: PPUSH
64339: CALL_OW 257
64343: PUSH
64344: LD_INT 5
64346: EQUAL
64347: AND
64348: IFFALSE 64369
// ComBinocular ( unit , x , y ) ;
64350: LD_VAR 0 2
64354: PPUSH
64355: LD_VAR 0 4
64359: PPUSH
64360: LD_VAR 0 5
64364: PPUSH
64365: CALL 67683 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64369: LD_VAR 0 1
64373: PUSH
64374: LD_INT 254
64376: EQUAL
64377: PUSH
64378: LD_VAR 0 2
64382: PPUSH
64383: CALL_OW 264
64387: PUSH
64388: LD_INT 99
64390: EQUAL
64391: AND
64392: PUSH
64393: LD_VAR 0 3
64397: PPUSH
64398: CALL_OW 263
64402: PUSH
64403: LD_INT 3
64405: EQUAL
64406: AND
64407: IFFALSE 64423
// HackDestroyVehicle ( unit , selectedUnit ) ;
64409: LD_VAR 0 2
64413: PPUSH
64414: LD_VAR 0 3
64418: PPUSH
64419: CALL 65986 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64423: LD_VAR 0 1
64427: PUSH
64428: LD_INT 255
64430: EQUAL
64431: PUSH
64432: LD_VAR 0 2
64436: PPUSH
64437: CALL_OW 264
64441: PUSH
64442: LD_INT 14
64444: PUSH
64445: LD_INT 53
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: IN
64452: AND
64453: PUSH
64454: LD_VAR 0 4
64458: PPUSH
64459: LD_VAR 0 5
64463: PPUSH
64464: CALL_OW 488
64468: AND
64469: IFFALSE 64493
// CutTreeXYR ( unit , x , y , 12 ) ;
64471: LD_VAR 0 2
64475: PPUSH
64476: LD_VAR 0 4
64480: PPUSH
64481: LD_VAR 0 5
64485: PPUSH
64486: LD_INT 12
64488: PPUSH
64489: CALL 64556 0 4
// if cmd = 256 then
64493: LD_VAR 0 1
64497: PUSH
64498: LD_INT 256
64500: EQUAL
64501: IFFALSE 64522
// SetFactoryWaypoint ( unit , x , y ) ;
64503: LD_VAR 0 2
64507: PPUSH
64508: LD_VAR 0 4
64512: PPUSH
64513: LD_VAR 0 5
64517: PPUSH
64518: CALL 62340 0 3
// if cmd = 257 then
64522: LD_VAR 0 1
64526: PUSH
64527: LD_INT 257
64529: EQUAL
64530: IFFALSE 64551
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64532: LD_VAR 0 2
64536: PPUSH
64537: LD_VAR 0 4
64541: PPUSH
64542: LD_VAR 0 5
64546: PPUSH
64547: CALL 62702 0 3
// end ;
64551: LD_VAR 0 6
64555: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64556: LD_INT 0
64558: PPUSH
64559: PPUSH
64560: PPUSH
64561: PPUSH
64562: PPUSH
64563: PPUSH
64564: PPUSH
64565: PPUSH
64566: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64567: LD_VAR 0 1
64571: NOT
64572: PUSH
64573: LD_VAR 0 2
64577: PPUSH
64578: LD_VAR 0 3
64582: PPUSH
64583: CALL_OW 488
64587: NOT
64588: OR
64589: PUSH
64590: LD_VAR 0 4
64594: NOT
64595: OR
64596: IFFALSE 64600
// exit ;
64598: GO 64940
// list := [ ] ;
64600: LD_ADDR_VAR 0 13
64604: PUSH
64605: EMPTY
64606: ST_TO_ADDR
// if x - r < 0 then
64607: LD_VAR 0 2
64611: PUSH
64612: LD_VAR 0 4
64616: MINUS
64617: PUSH
64618: LD_INT 0
64620: LESS
64621: IFFALSE 64633
// min_x := 0 else
64623: LD_ADDR_VAR 0 7
64627: PUSH
64628: LD_INT 0
64630: ST_TO_ADDR
64631: GO 64649
// min_x := x - r ;
64633: LD_ADDR_VAR 0 7
64637: PUSH
64638: LD_VAR 0 2
64642: PUSH
64643: LD_VAR 0 4
64647: MINUS
64648: ST_TO_ADDR
// if y - r < 0 then
64649: LD_VAR 0 3
64653: PUSH
64654: LD_VAR 0 4
64658: MINUS
64659: PUSH
64660: LD_INT 0
64662: LESS
64663: IFFALSE 64675
// min_y := 0 else
64665: LD_ADDR_VAR 0 8
64669: PUSH
64670: LD_INT 0
64672: ST_TO_ADDR
64673: GO 64691
// min_y := y - r ;
64675: LD_ADDR_VAR 0 8
64679: PUSH
64680: LD_VAR 0 3
64684: PUSH
64685: LD_VAR 0 4
64689: MINUS
64690: ST_TO_ADDR
// max_x := x + r ;
64691: LD_ADDR_VAR 0 9
64695: PUSH
64696: LD_VAR 0 2
64700: PUSH
64701: LD_VAR 0 4
64705: PLUS
64706: ST_TO_ADDR
// max_y := y + r ;
64707: LD_ADDR_VAR 0 10
64711: PUSH
64712: LD_VAR 0 3
64716: PUSH
64717: LD_VAR 0 4
64721: PLUS
64722: ST_TO_ADDR
// for _x = min_x to max_x do
64723: LD_ADDR_VAR 0 11
64727: PUSH
64728: DOUBLE
64729: LD_VAR 0 7
64733: DEC
64734: ST_TO_ADDR
64735: LD_VAR 0 9
64739: PUSH
64740: FOR_TO
64741: IFFALSE 64858
// for _y = min_y to max_y do
64743: LD_ADDR_VAR 0 12
64747: PUSH
64748: DOUBLE
64749: LD_VAR 0 8
64753: DEC
64754: ST_TO_ADDR
64755: LD_VAR 0 10
64759: PUSH
64760: FOR_TO
64761: IFFALSE 64854
// begin if not ValidHex ( _x , _y ) then
64763: LD_VAR 0 11
64767: PPUSH
64768: LD_VAR 0 12
64772: PPUSH
64773: CALL_OW 488
64777: NOT
64778: IFFALSE 64782
// continue ;
64780: GO 64760
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64782: LD_VAR 0 11
64786: PPUSH
64787: LD_VAR 0 12
64791: PPUSH
64792: CALL_OW 351
64796: PUSH
64797: LD_VAR 0 11
64801: PPUSH
64802: LD_VAR 0 12
64806: PPUSH
64807: CALL_OW 554
64811: AND
64812: IFFALSE 64852
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64814: LD_ADDR_VAR 0 13
64818: PUSH
64819: LD_VAR 0 13
64823: PPUSH
64824: LD_VAR 0 13
64828: PUSH
64829: LD_INT 1
64831: PLUS
64832: PPUSH
64833: LD_VAR 0 11
64837: PUSH
64838: LD_VAR 0 12
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PPUSH
64847: CALL_OW 2
64851: ST_TO_ADDR
// end ;
64852: GO 64760
64854: POP
64855: POP
64856: GO 64740
64858: POP
64859: POP
// if not list then
64860: LD_VAR 0 13
64864: NOT
64865: IFFALSE 64869
// exit ;
64867: GO 64940
// for i in list do
64869: LD_ADDR_VAR 0 6
64873: PUSH
64874: LD_VAR 0 13
64878: PUSH
64879: FOR_IN
64880: IFFALSE 64938
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64882: LD_VAR 0 1
64886: PPUSH
64887: LD_STRING M
64889: PUSH
64890: LD_VAR 0 6
64894: PUSH
64895: LD_INT 1
64897: ARRAY
64898: PUSH
64899: LD_VAR 0 6
64903: PUSH
64904: LD_INT 2
64906: ARRAY
64907: PUSH
64908: LD_INT 0
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: LD_INT 0
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: PUSH
64929: EMPTY
64930: LIST
64931: PPUSH
64932: CALL_OW 447
64936: GO 64879
64938: POP
64939: POP
// end ;
64940: LD_VAR 0 5
64944: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64945: LD_EXP 91
64949: NOT
64950: IFFALSE 65000
64952: GO 64954
64954: DISABLE
// begin initHack := true ;
64955: LD_ADDR_EXP 91
64959: PUSH
64960: LD_INT 1
64962: ST_TO_ADDR
// hackTanks := [ ] ;
64963: LD_ADDR_EXP 92
64967: PUSH
64968: EMPTY
64969: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64970: LD_ADDR_EXP 93
64974: PUSH
64975: EMPTY
64976: ST_TO_ADDR
// hackLimit := 3 ;
64977: LD_ADDR_EXP 94
64981: PUSH
64982: LD_INT 3
64984: ST_TO_ADDR
// hackDist := 12 ;
64985: LD_ADDR_EXP 95
64989: PUSH
64990: LD_INT 12
64992: ST_TO_ADDR
// hackCounter := [ ] ;
64993: LD_ADDR_EXP 96
64997: PUSH
64998: EMPTY
64999: ST_TO_ADDR
// end ;
65000: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65001: LD_EXP 91
65005: PUSH
65006: LD_INT 34
65008: PUSH
65009: LD_INT 99
65011: PUSH
65012: EMPTY
65013: LIST
65014: LIST
65015: PPUSH
65016: CALL_OW 69
65020: AND
65021: IFFALSE 65274
65023: GO 65025
65025: DISABLE
65026: LD_INT 0
65028: PPUSH
65029: PPUSH
// begin enable ;
65030: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65031: LD_ADDR_VAR 0 1
65035: PUSH
65036: LD_INT 34
65038: PUSH
65039: LD_INT 99
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PPUSH
65046: CALL_OW 69
65050: PUSH
65051: FOR_IN
65052: IFFALSE 65272
// begin if not i in hackTanks then
65054: LD_VAR 0 1
65058: PUSH
65059: LD_EXP 92
65063: IN
65064: NOT
65065: IFFALSE 65148
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65067: LD_ADDR_EXP 92
65071: PUSH
65072: LD_EXP 92
65076: PPUSH
65077: LD_EXP 92
65081: PUSH
65082: LD_INT 1
65084: PLUS
65085: PPUSH
65086: LD_VAR 0 1
65090: PPUSH
65091: CALL_OW 1
65095: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65096: LD_ADDR_EXP 93
65100: PUSH
65101: LD_EXP 93
65105: PPUSH
65106: LD_EXP 93
65110: PUSH
65111: LD_INT 1
65113: PLUS
65114: PPUSH
65115: EMPTY
65116: PPUSH
65117: CALL_OW 1
65121: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65122: LD_ADDR_EXP 96
65126: PUSH
65127: LD_EXP 96
65131: PPUSH
65132: LD_EXP 96
65136: PUSH
65137: LD_INT 1
65139: PLUS
65140: PPUSH
65141: EMPTY
65142: PPUSH
65143: CALL_OW 1
65147: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65148: LD_VAR 0 1
65152: PPUSH
65153: CALL_OW 302
65157: NOT
65158: IFFALSE 65171
// begin HackUnlinkAll ( i ) ;
65160: LD_VAR 0 1
65164: PPUSH
65165: CALL 65277 0 1
// continue ;
65169: GO 65051
// end ; HackCheckCapturedStatus ( i ) ;
65171: LD_VAR 0 1
65175: PPUSH
65176: CALL 65720 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65180: LD_ADDR_VAR 0 2
65184: PUSH
65185: LD_INT 81
65187: PUSH
65188: LD_VAR 0 1
65192: PPUSH
65193: CALL_OW 255
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 33
65204: PUSH
65205: LD_INT 3
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 91
65214: PUSH
65215: LD_VAR 0 1
65219: PUSH
65220: LD_EXP 95
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 50
65232: PUSH
65233: EMPTY
65234: LIST
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: PPUSH
65242: CALL_OW 69
65246: ST_TO_ADDR
// if not tmp then
65247: LD_VAR 0 2
65251: NOT
65252: IFFALSE 65256
// continue ;
65254: GO 65051
// HackLink ( i , tmp ) ;
65256: LD_VAR 0 1
65260: PPUSH
65261: LD_VAR 0 2
65265: PPUSH
65266: CALL 65413 0 2
// end ;
65270: GO 65051
65272: POP
65273: POP
// end ;
65274: PPOPN 2
65276: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65277: LD_INT 0
65279: PPUSH
65280: PPUSH
65281: PPUSH
// if not hack in hackTanks then
65282: LD_VAR 0 1
65286: PUSH
65287: LD_EXP 92
65291: IN
65292: NOT
65293: IFFALSE 65297
// exit ;
65295: GO 65408
// index := GetElementIndex ( hackTanks , hack ) ;
65297: LD_ADDR_VAR 0 4
65301: PUSH
65302: LD_EXP 92
65306: PPUSH
65307: LD_VAR 0 1
65311: PPUSH
65312: CALL 11164 0 2
65316: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65317: LD_EXP 93
65321: PUSH
65322: LD_VAR 0 4
65326: ARRAY
65327: IFFALSE 65408
// begin for i in hackTanksCaptured [ index ] do
65329: LD_ADDR_VAR 0 3
65333: PUSH
65334: LD_EXP 93
65338: PUSH
65339: LD_VAR 0 4
65343: ARRAY
65344: PUSH
65345: FOR_IN
65346: IFFALSE 65372
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65348: LD_VAR 0 3
65352: PUSH
65353: LD_INT 1
65355: ARRAY
65356: PPUSH
65357: LD_VAR 0 3
65361: PUSH
65362: LD_INT 2
65364: ARRAY
65365: PPUSH
65366: CALL_OW 235
65370: GO 65345
65372: POP
65373: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65374: LD_ADDR_EXP 93
65378: PUSH
65379: LD_EXP 93
65383: PPUSH
65384: LD_VAR 0 4
65388: PPUSH
65389: EMPTY
65390: PPUSH
65391: CALL_OW 1
65395: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65396: LD_VAR 0 1
65400: PPUSH
65401: LD_INT 0
65403: PPUSH
65404: CALL_OW 505
// end ; end ;
65408: LD_VAR 0 2
65412: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65413: LD_INT 0
65415: PPUSH
65416: PPUSH
65417: PPUSH
// if not hack in hackTanks or not vehicles then
65418: LD_VAR 0 1
65422: PUSH
65423: LD_EXP 92
65427: IN
65428: NOT
65429: PUSH
65430: LD_VAR 0 2
65434: NOT
65435: OR
65436: IFFALSE 65440
// exit ;
65438: GO 65715
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65440: LD_ADDR_VAR 0 2
65444: PUSH
65445: LD_VAR 0 1
65449: PPUSH
65450: LD_VAR 0 2
65454: PPUSH
65455: LD_INT 1
65457: PPUSH
65458: LD_INT 1
65460: PPUSH
65461: CALL 11814 0 4
65465: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65466: LD_ADDR_VAR 0 5
65470: PUSH
65471: LD_EXP 92
65475: PPUSH
65476: LD_VAR 0 1
65480: PPUSH
65481: CALL 11164 0 2
65485: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65486: LD_EXP 93
65490: PUSH
65491: LD_VAR 0 5
65495: ARRAY
65496: PUSH
65497: LD_EXP 94
65501: LESS
65502: IFFALSE 65691
// begin for i := 1 to vehicles do
65504: LD_ADDR_VAR 0 4
65508: PUSH
65509: DOUBLE
65510: LD_INT 1
65512: DEC
65513: ST_TO_ADDR
65514: LD_VAR 0 2
65518: PUSH
65519: FOR_TO
65520: IFFALSE 65689
// begin if hackTanksCaptured [ index ] = hackLimit then
65522: LD_EXP 93
65526: PUSH
65527: LD_VAR 0 5
65531: ARRAY
65532: PUSH
65533: LD_EXP 94
65537: EQUAL
65538: IFFALSE 65542
// break ;
65540: GO 65689
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65542: LD_ADDR_EXP 96
65546: PUSH
65547: LD_EXP 96
65551: PPUSH
65552: LD_VAR 0 5
65556: PPUSH
65557: LD_EXP 96
65561: PUSH
65562: LD_VAR 0 5
65566: ARRAY
65567: PUSH
65568: LD_INT 1
65570: PLUS
65571: PPUSH
65572: CALL_OW 1
65576: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65577: LD_ADDR_EXP 93
65581: PUSH
65582: LD_EXP 93
65586: PPUSH
65587: LD_VAR 0 5
65591: PUSH
65592: LD_EXP 93
65596: PUSH
65597: LD_VAR 0 5
65601: ARRAY
65602: PUSH
65603: LD_INT 1
65605: PLUS
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PPUSH
65611: LD_VAR 0 2
65615: PUSH
65616: LD_VAR 0 4
65620: ARRAY
65621: PUSH
65622: LD_VAR 0 2
65626: PUSH
65627: LD_VAR 0 4
65631: ARRAY
65632: PPUSH
65633: CALL_OW 255
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PPUSH
65642: CALL 11379 0 3
65646: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65647: LD_VAR 0 2
65651: PUSH
65652: LD_VAR 0 4
65656: ARRAY
65657: PPUSH
65658: LD_VAR 0 1
65662: PPUSH
65663: CALL_OW 255
65667: PPUSH
65668: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65672: LD_VAR 0 2
65676: PUSH
65677: LD_VAR 0 4
65681: ARRAY
65682: PPUSH
65683: CALL_OW 141
// end ;
65687: GO 65519
65689: POP
65690: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65691: LD_VAR 0 1
65695: PPUSH
65696: LD_EXP 93
65700: PUSH
65701: LD_VAR 0 5
65705: ARRAY
65706: PUSH
65707: LD_INT 0
65709: PLUS
65710: PPUSH
65711: CALL_OW 505
// end ;
65715: LD_VAR 0 3
65719: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65720: LD_INT 0
65722: PPUSH
65723: PPUSH
65724: PPUSH
65725: PPUSH
// if not hack in hackTanks then
65726: LD_VAR 0 1
65730: PUSH
65731: LD_EXP 92
65735: IN
65736: NOT
65737: IFFALSE 65741
// exit ;
65739: GO 65981
// index := GetElementIndex ( hackTanks , hack ) ;
65741: LD_ADDR_VAR 0 4
65745: PUSH
65746: LD_EXP 92
65750: PPUSH
65751: LD_VAR 0 1
65755: PPUSH
65756: CALL 11164 0 2
65760: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65761: LD_ADDR_VAR 0 3
65765: PUSH
65766: DOUBLE
65767: LD_EXP 93
65771: PUSH
65772: LD_VAR 0 4
65776: ARRAY
65777: INC
65778: ST_TO_ADDR
65779: LD_INT 1
65781: PUSH
65782: FOR_DOWNTO
65783: IFFALSE 65955
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65785: LD_ADDR_VAR 0 5
65789: PUSH
65790: LD_EXP 93
65794: PUSH
65795: LD_VAR 0 4
65799: ARRAY
65800: PUSH
65801: LD_VAR 0 3
65805: ARRAY
65806: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65807: LD_VAR 0 5
65811: PUSH
65812: LD_INT 1
65814: ARRAY
65815: PPUSH
65816: CALL_OW 302
65820: NOT
65821: PUSH
65822: LD_VAR 0 5
65826: PUSH
65827: LD_INT 1
65829: ARRAY
65830: PPUSH
65831: CALL_OW 255
65835: PUSH
65836: LD_VAR 0 1
65840: PPUSH
65841: CALL_OW 255
65845: NONEQUAL
65846: OR
65847: IFFALSE 65953
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65849: LD_VAR 0 5
65853: PUSH
65854: LD_INT 1
65856: ARRAY
65857: PPUSH
65858: CALL_OW 305
65862: PUSH
65863: LD_VAR 0 5
65867: PUSH
65868: LD_INT 1
65870: ARRAY
65871: PPUSH
65872: CALL_OW 255
65876: PUSH
65877: LD_VAR 0 1
65881: PPUSH
65882: CALL_OW 255
65886: EQUAL
65887: AND
65888: IFFALSE 65912
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65890: LD_VAR 0 5
65894: PUSH
65895: LD_INT 1
65897: ARRAY
65898: PPUSH
65899: LD_VAR 0 5
65903: PUSH
65904: LD_INT 2
65906: ARRAY
65907: PPUSH
65908: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65912: LD_ADDR_EXP 93
65916: PUSH
65917: LD_EXP 93
65921: PPUSH
65922: LD_VAR 0 4
65926: PPUSH
65927: LD_EXP 93
65931: PUSH
65932: LD_VAR 0 4
65936: ARRAY
65937: PPUSH
65938: LD_VAR 0 3
65942: PPUSH
65943: CALL_OW 3
65947: PPUSH
65948: CALL_OW 1
65952: ST_TO_ADDR
// end ; end ;
65953: GO 65782
65955: POP
65956: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65957: LD_VAR 0 1
65961: PPUSH
65962: LD_EXP 93
65966: PUSH
65967: LD_VAR 0 4
65971: ARRAY
65972: PUSH
65973: LD_INT 0
65975: PLUS
65976: PPUSH
65977: CALL_OW 505
// end ;
65981: LD_VAR 0 2
65985: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65986: LD_INT 0
65988: PPUSH
65989: PPUSH
65990: PPUSH
65991: PPUSH
// if not hack in hackTanks then
65992: LD_VAR 0 1
65996: PUSH
65997: LD_EXP 92
66001: IN
66002: NOT
66003: IFFALSE 66007
// exit ;
66005: GO 66092
// index := GetElementIndex ( hackTanks , hack ) ;
66007: LD_ADDR_VAR 0 5
66011: PUSH
66012: LD_EXP 92
66016: PPUSH
66017: LD_VAR 0 1
66021: PPUSH
66022: CALL 11164 0 2
66026: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66027: LD_ADDR_VAR 0 4
66031: PUSH
66032: DOUBLE
66033: LD_INT 1
66035: DEC
66036: ST_TO_ADDR
66037: LD_EXP 93
66041: PUSH
66042: LD_VAR 0 5
66046: ARRAY
66047: PUSH
66048: FOR_TO
66049: IFFALSE 66090
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66051: LD_EXP 93
66055: PUSH
66056: LD_VAR 0 5
66060: ARRAY
66061: PUSH
66062: LD_VAR 0 4
66066: ARRAY
66067: PUSH
66068: LD_INT 1
66070: ARRAY
66071: PUSH
66072: LD_VAR 0 2
66076: EQUAL
66077: IFFALSE 66088
// KillUnit ( vehicle ) ;
66079: LD_VAR 0 2
66083: PPUSH
66084: CALL_OW 66
66088: GO 66048
66090: POP
66091: POP
// end ;
66092: LD_VAR 0 3
66096: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66097: LD_EXP 97
66101: NOT
66102: IFFALSE 66137
66104: GO 66106
66106: DISABLE
// begin initMiner := true ;
66107: LD_ADDR_EXP 97
66111: PUSH
66112: LD_INT 1
66114: ST_TO_ADDR
// minersList := [ ] ;
66115: LD_ADDR_EXP 98
66119: PUSH
66120: EMPTY
66121: ST_TO_ADDR
// minerMinesList := [ ] ;
66122: LD_ADDR_EXP 99
66126: PUSH
66127: EMPTY
66128: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66129: LD_ADDR_EXP 100
66133: PUSH
66134: LD_INT 5
66136: ST_TO_ADDR
// end ;
66137: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66138: LD_EXP 97
66142: PUSH
66143: LD_INT 34
66145: PUSH
66146: LD_INT 81
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PPUSH
66153: CALL_OW 69
66157: AND
66158: IFFALSE 66619
66160: GO 66162
66162: DISABLE
66163: LD_INT 0
66165: PPUSH
66166: PPUSH
66167: PPUSH
66168: PPUSH
// begin enable ;
66169: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66170: LD_ADDR_VAR 0 1
66174: PUSH
66175: LD_INT 34
66177: PUSH
66178: LD_INT 81
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PPUSH
66185: CALL_OW 69
66189: PUSH
66190: FOR_IN
66191: IFFALSE 66263
// begin if not i in minersList then
66193: LD_VAR 0 1
66197: PUSH
66198: LD_EXP 98
66202: IN
66203: NOT
66204: IFFALSE 66261
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66206: LD_ADDR_EXP 98
66210: PUSH
66211: LD_EXP 98
66215: PPUSH
66216: LD_EXP 98
66220: PUSH
66221: LD_INT 1
66223: PLUS
66224: PPUSH
66225: LD_VAR 0 1
66229: PPUSH
66230: CALL_OW 1
66234: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66235: LD_ADDR_EXP 99
66239: PUSH
66240: LD_EXP 99
66244: PPUSH
66245: LD_EXP 99
66249: PUSH
66250: LD_INT 1
66252: PLUS
66253: PPUSH
66254: EMPTY
66255: PPUSH
66256: CALL_OW 1
66260: ST_TO_ADDR
// end end ;
66261: GO 66190
66263: POP
66264: POP
// for i := minerMinesList downto 1 do
66265: LD_ADDR_VAR 0 1
66269: PUSH
66270: DOUBLE
66271: LD_EXP 99
66275: INC
66276: ST_TO_ADDR
66277: LD_INT 1
66279: PUSH
66280: FOR_DOWNTO
66281: IFFALSE 66617
// begin if IsLive ( minersList [ i ] ) then
66283: LD_EXP 98
66287: PUSH
66288: LD_VAR 0 1
66292: ARRAY
66293: PPUSH
66294: CALL_OW 300
66298: IFFALSE 66326
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66300: LD_EXP 98
66304: PUSH
66305: LD_VAR 0 1
66309: ARRAY
66310: PPUSH
66311: LD_EXP 99
66315: PUSH
66316: LD_VAR 0 1
66320: ARRAY
66321: PPUSH
66322: CALL_OW 505
// if not minerMinesList [ i ] then
66326: LD_EXP 99
66330: PUSH
66331: LD_VAR 0 1
66335: ARRAY
66336: NOT
66337: IFFALSE 66341
// continue ;
66339: GO 66280
// for j := minerMinesList [ i ] downto 1 do
66341: LD_ADDR_VAR 0 2
66345: PUSH
66346: DOUBLE
66347: LD_EXP 99
66351: PUSH
66352: LD_VAR 0 1
66356: ARRAY
66357: INC
66358: ST_TO_ADDR
66359: LD_INT 1
66361: PUSH
66362: FOR_DOWNTO
66363: IFFALSE 66613
// begin side := GetSide ( minersList [ i ] ) ;
66365: LD_ADDR_VAR 0 3
66369: PUSH
66370: LD_EXP 98
66374: PUSH
66375: LD_VAR 0 1
66379: ARRAY
66380: PPUSH
66381: CALL_OW 255
66385: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66386: LD_ADDR_VAR 0 4
66390: PUSH
66391: LD_EXP 99
66395: PUSH
66396: LD_VAR 0 1
66400: ARRAY
66401: PUSH
66402: LD_VAR 0 2
66406: ARRAY
66407: PUSH
66408: LD_INT 1
66410: ARRAY
66411: PPUSH
66412: LD_EXP 99
66416: PUSH
66417: LD_VAR 0 1
66421: ARRAY
66422: PUSH
66423: LD_VAR 0 2
66427: ARRAY
66428: PUSH
66429: LD_INT 2
66431: ARRAY
66432: PPUSH
66433: CALL_OW 428
66437: ST_TO_ADDR
// if not tmp then
66438: LD_VAR 0 4
66442: NOT
66443: IFFALSE 66447
// continue ;
66445: GO 66362
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66447: LD_VAR 0 4
66451: PUSH
66452: LD_INT 81
66454: PUSH
66455: LD_VAR 0 3
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PPUSH
66464: CALL_OW 69
66468: IN
66469: PUSH
66470: LD_EXP 99
66474: PUSH
66475: LD_VAR 0 1
66479: ARRAY
66480: PUSH
66481: LD_VAR 0 2
66485: ARRAY
66486: PUSH
66487: LD_INT 1
66489: ARRAY
66490: PPUSH
66491: LD_EXP 99
66495: PUSH
66496: LD_VAR 0 1
66500: ARRAY
66501: PUSH
66502: LD_VAR 0 2
66506: ARRAY
66507: PUSH
66508: LD_INT 2
66510: ARRAY
66511: PPUSH
66512: CALL_OW 458
66516: AND
66517: IFFALSE 66611
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66519: LD_EXP 99
66523: PUSH
66524: LD_VAR 0 1
66528: ARRAY
66529: PUSH
66530: LD_VAR 0 2
66534: ARRAY
66535: PUSH
66536: LD_INT 1
66538: ARRAY
66539: PPUSH
66540: LD_EXP 99
66544: PUSH
66545: LD_VAR 0 1
66549: ARRAY
66550: PUSH
66551: LD_VAR 0 2
66555: ARRAY
66556: PUSH
66557: LD_INT 2
66559: ARRAY
66560: PPUSH
66561: LD_VAR 0 3
66565: PPUSH
66566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66570: LD_ADDR_EXP 99
66574: PUSH
66575: LD_EXP 99
66579: PPUSH
66580: LD_VAR 0 1
66584: PPUSH
66585: LD_EXP 99
66589: PUSH
66590: LD_VAR 0 1
66594: ARRAY
66595: PPUSH
66596: LD_VAR 0 2
66600: PPUSH
66601: CALL_OW 3
66605: PPUSH
66606: CALL_OW 1
66610: ST_TO_ADDR
// end ; end ;
66611: GO 66362
66613: POP
66614: POP
// end ;
66615: GO 66280
66617: POP
66618: POP
// end ;
66619: PPOPN 4
66621: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66622: LD_INT 0
66624: PPUSH
66625: PPUSH
// result := false ;
66626: LD_ADDR_VAR 0 4
66630: PUSH
66631: LD_INT 0
66633: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66634: LD_VAR 0 1
66638: PPUSH
66639: CALL_OW 264
66643: PUSH
66644: LD_INT 81
66646: EQUAL
66647: NOT
66648: IFFALSE 66652
// exit ;
66650: GO 66892
// index := GetElementIndex ( minersList , unit ) ;
66652: LD_ADDR_VAR 0 5
66656: PUSH
66657: LD_EXP 98
66661: PPUSH
66662: LD_VAR 0 1
66666: PPUSH
66667: CALL 11164 0 2
66671: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66672: LD_EXP 99
66676: PUSH
66677: LD_VAR 0 5
66681: ARRAY
66682: PUSH
66683: LD_EXP 100
66687: GREATEREQUAL
66688: IFFALSE 66692
// exit ;
66690: GO 66892
// ComMoveXY ( unit , x , y ) ;
66692: LD_VAR 0 1
66696: PPUSH
66697: LD_VAR 0 2
66701: PPUSH
66702: LD_VAR 0 3
66706: PPUSH
66707: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66711: LD_INT 35
66713: PPUSH
66714: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66718: LD_VAR 0 1
66722: PPUSH
66723: LD_VAR 0 2
66727: PPUSH
66728: LD_VAR 0 3
66732: PPUSH
66733: CALL 42528 0 3
66737: NOT
66738: PUSH
66739: LD_VAR 0 1
66743: PPUSH
66744: CALL_OW 314
66748: AND
66749: IFFALSE 66753
// exit ;
66751: GO 66892
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66753: LD_VAR 0 2
66757: PPUSH
66758: LD_VAR 0 3
66762: PPUSH
66763: CALL_OW 428
66767: PUSH
66768: LD_VAR 0 1
66772: EQUAL
66773: PUSH
66774: LD_VAR 0 1
66778: PPUSH
66779: CALL_OW 314
66783: NOT
66784: AND
66785: IFFALSE 66711
// PlaySoundXY ( x , y , PlantMine ) ;
66787: LD_VAR 0 2
66791: PPUSH
66792: LD_VAR 0 3
66796: PPUSH
66797: LD_STRING PlantMine
66799: PPUSH
66800: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66804: LD_VAR 0 2
66808: PPUSH
66809: LD_VAR 0 3
66813: PPUSH
66814: LD_VAR 0 1
66818: PPUSH
66819: CALL_OW 255
66823: PPUSH
66824: LD_INT 0
66826: PPUSH
66827: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66831: LD_ADDR_EXP 99
66835: PUSH
66836: LD_EXP 99
66840: PPUSH
66841: LD_VAR 0 5
66845: PUSH
66846: LD_EXP 99
66850: PUSH
66851: LD_VAR 0 5
66855: ARRAY
66856: PUSH
66857: LD_INT 1
66859: PLUS
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PPUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_VAR 0 3
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PPUSH
66879: CALL 11379 0 3
66883: ST_TO_ADDR
// result := true ;
66884: LD_ADDR_VAR 0 4
66888: PUSH
66889: LD_INT 1
66891: ST_TO_ADDR
// end ;
66892: LD_VAR 0 4
66896: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66897: LD_INT 0
66899: PPUSH
66900: PPUSH
66901: PPUSH
// if not unit in minersList then
66902: LD_VAR 0 1
66906: PUSH
66907: LD_EXP 98
66911: IN
66912: NOT
66913: IFFALSE 66917
// exit ;
66915: GO 67309
// index := GetElementIndex ( minersList , unit ) ;
66917: LD_ADDR_VAR 0 6
66921: PUSH
66922: LD_EXP 98
66926: PPUSH
66927: LD_VAR 0 1
66931: PPUSH
66932: CALL 11164 0 2
66936: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66937: LD_ADDR_VAR 0 5
66941: PUSH
66942: DOUBLE
66943: LD_EXP 99
66947: PUSH
66948: LD_VAR 0 6
66952: ARRAY
66953: INC
66954: ST_TO_ADDR
66955: LD_INT 1
66957: PUSH
66958: FOR_DOWNTO
66959: IFFALSE 67120
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66961: LD_EXP 99
66965: PUSH
66966: LD_VAR 0 6
66970: ARRAY
66971: PUSH
66972: LD_VAR 0 5
66976: ARRAY
66977: PUSH
66978: LD_INT 1
66980: ARRAY
66981: PUSH
66982: LD_VAR 0 2
66986: EQUAL
66987: PUSH
66988: LD_EXP 99
66992: PUSH
66993: LD_VAR 0 6
66997: ARRAY
66998: PUSH
66999: LD_VAR 0 5
67003: ARRAY
67004: PUSH
67005: LD_INT 2
67007: ARRAY
67008: PUSH
67009: LD_VAR 0 3
67013: EQUAL
67014: AND
67015: IFFALSE 67118
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67017: LD_EXP 99
67021: PUSH
67022: LD_VAR 0 6
67026: ARRAY
67027: PUSH
67028: LD_VAR 0 5
67032: ARRAY
67033: PUSH
67034: LD_INT 1
67036: ARRAY
67037: PPUSH
67038: LD_EXP 99
67042: PUSH
67043: LD_VAR 0 6
67047: ARRAY
67048: PUSH
67049: LD_VAR 0 5
67053: ARRAY
67054: PUSH
67055: LD_INT 2
67057: ARRAY
67058: PPUSH
67059: LD_VAR 0 1
67063: PPUSH
67064: CALL_OW 255
67068: PPUSH
67069: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67073: LD_ADDR_EXP 99
67077: PUSH
67078: LD_EXP 99
67082: PPUSH
67083: LD_VAR 0 6
67087: PPUSH
67088: LD_EXP 99
67092: PUSH
67093: LD_VAR 0 6
67097: ARRAY
67098: PPUSH
67099: LD_VAR 0 5
67103: PPUSH
67104: CALL_OW 3
67108: PPUSH
67109: CALL_OW 1
67113: ST_TO_ADDR
// exit ;
67114: POP
67115: POP
67116: GO 67309
// end ; end ;
67118: GO 66958
67120: POP
67121: POP
// for i := minerMinesList [ index ] downto 1 do
67122: LD_ADDR_VAR 0 5
67126: PUSH
67127: DOUBLE
67128: LD_EXP 99
67132: PUSH
67133: LD_VAR 0 6
67137: ARRAY
67138: INC
67139: ST_TO_ADDR
67140: LD_INT 1
67142: PUSH
67143: FOR_DOWNTO
67144: IFFALSE 67307
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67146: LD_EXP 99
67150: PUSH
67151: LD_VAR 0 6
67155: ARRAY
67156: PUSH
67157: LD_VAR 0 5
67161: ARRAY
67162: PUSH
67163: LD_INT 1
67165: ARRAY
67166: PPUSH
67167: LD_EXP 99
67171: PUSH
67172: LD_VAR 0 6
67176: ARRAY
67177: PUSH
67178: LD_VAR 0 5
67182: ARRAY
67183: PUSH
67184: LD_INT 2
67186: ARRAY
67187: PPUSH
67188: LD_VAR 0 2
67192: PPUSH
67193: LD_VAR 0 3
67197: PPUSH
67198: CALL_OW 298
67202: PUSH
67203: LD_INT 6
67205: LESS
67206: IFFALSE 67305
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67208: LD_EXP 99
67212: PUSH
67213: LD_VAR 0 6
67217: ARRAY
67218: PUSH
67219: LD_VAR 0 5
67223: ARRAY
67224: PUSH
67225: LD_INT 1
67227: ARRAY
67228: PPUSH
67229: LD_EXP 99
67233: PUSH
67234: LD_VAR 0 6
67238: ARRAY
67239: PUSH
67240: LD_VAR 0 5
67244: ARRAY
67245: PUSH
67246: LD_INT 2
67248: ARRAY
67249: PPUSH
67250: LD_VAR 0 1
67254: PPUSH
67255: CALL_OW 255
67259: PPUSH
67260: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67264: LD_ADDR_EXP 99
67268: PUSH
67269: LD_EXP 99
67273: PPUSH
67274: LD_VAR 0 6
67278: PPUSH
67279: LD_EXP 99
67283: PUSH
67284: LD_VAR 0 6
67288: ARRAY
67289: PPUSH
67290: LD_VAR 0 5
67294: PPUSH
67295: CALL_OW 3
67299: PPUSH
67300: CALL_OW 1
67304: ST_TO_ADDR
// end ; end ;
67305: GO 67143
67307: POP
67308: POP
// end ;
67309: LD_VAR 0 4
67313: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67314: LD_INT 0
67316: PPUSH
67317: PPUSH
67318: PPUSH
67319: PPUSH
67320: PPUSH
67321: PPUSH
67322: PPUSH
67323: PPUSH
67324: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67325: LD_VAR 0 1
67329: PPUSH
67330: CALL_OW 264
67334: PUSH
67335: LD_INT 81
67337: EQUAL
67338: NOT
67339: PUSH
67340: LD_VAR 0 1
67344: PUSH
67345: LD_EXP 98
67349: IN
67350: NOT
67351: OR
67352: IFFALSE 67356
// exit ;
67354: GO 67678
// index := GetElementIndex ( minersList , unit ) ;
67356: LD_ADDR_VAR 0 6
67360: PUSH
67361: LD_EXP 98
67365: PPUSH
67366: LD_VAR 0 1
67370: PPUSH
67371: CALL 11164 0 2
67375: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67376: LD_ADDR_VAR 0 8
67380: PUSH
67381: LD_EXP 100
67385: PUSH
67386: LD_EXP 99
67390: PUSH
67391: LD_VAR 0 6
67395: ARRAY
67396: MINUS
67397: ST_TO_ADDR
// if not minesFreeAmount then
67398: LD_VAR 0 8
67402: NOT
67403: IFFALSE 67407
// exit ;
67405: GO 67678
// tmp := [ ] ;
67407: LD_ADDR_VAR 0 7
67411: PUSH
67412: EMPTY
67413: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67414: LD_ADDR_VAR 0 5
67418: PUSH
67419: DOUBLE
67420: LD_INT 1
67422: DEC
67423: ST_TO_ADDR
67424: LD_VAR 0 8
67428: PUSH
67429: FOR_TO
67430: IFFALSE 67625
// begin _d := rand ( 0 , 5 ) ;
67432: LD_ADDR_VAR 0 11
67436: PUSH
67437: LD_INT 0
67439: PPUSH
67440: LD_INT 5
67442: PPUSH
67443: CALL_OW 12
67447: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67448: LD_ADDR_VAR 0 12
67452: PUSH
67453: LD_INT 2
67455: PPUSH
67456: LD_INT 6
67458: PPUSH
67459: CALL_OW 12
67463: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67464: LD_ADDR_VAR 0 9
67468: PUSH
67469: LD_VAR 0 2
67473: PPUSH
67474: LD_VAR 0 11
67478: PPUSH
67479: LD_VAR 0 12
67483: PPUSH
67484: CALL_OW 272
67488: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67489: LD_ADDR_VAR 0 10
67493: PUSH
67494: LD_VAR 0 3
67498: PPUSH
67499: LD_VAR 0 11
67503: PPUSH
67504: LD_VAR 0 12
67508: PPUSH
67509: CALL_OW 273
67513: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67514: LD_VAR 0 9
67518: PPUSH
67519: LD_VAR 0 10
67523: PPUSH
67524: CALL_OW 488
67528: PUSH
67529: LD_VAR 0 9
67533: PUSH
67534: LD_VAR 0 10
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: LD_VAR 0 7
67547: IN
67548: NOT
67549: AND
67550: PUSH
67551: LD_VAR 0 9
67555: PPUSH
67556: LD_VAR 0 10
67560: PPUSH
67561: CALL_OW 458
67565: NOT
67566: AND
67567: IFFALSE 67609
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67569: LD_ADDR_VAR 0 7
67573: PUSH
67574: LD_VAR 0 7
67578: PPUSH
67579: LD_VAR 0 7
67583: PUSH
67584: LD_INT 1
67586: PLUS
67587: PPUSH
67588: LD_VAR 0 9
67592: PUSH
67593: LD_VAR 0 10
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PPUSH
67602: CALL_OW 1
67606: ST_TO_ADDR
67607: GO 67623
// i := i - 1 ;
67609: LD_ADDR_VAR 0 5
67613: PUSH
67614: LD_VAR 0 5
67618: PUSH
67619: LD_INT 1
67621: MINUS
67622: ST_TO_ADDR
// end ;
67623: GO 67429
67625: POP
67626: POP
// for i in tmp do
67627: LD_ADDR_VAR 0 5
67631: PUSH
67632: LD_VAR 0 7
67636: PUSH
67637: FOR_IN
67638: IFFALSE 67676
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67640: LD_VAR 0 1
67644: PPUSH
67645: LD_VAR 0 5
67649: PUSH
67650: LD_INT 1
67652: ARRAY
67653: PPUSH
67654: LD_VAR 0 5
67658: PUSH
67659: LD_INT 2
67661: ARRAY
67662: PPUSH
67663: CALL 66622 0 3
67667: NOT
67668: IFFALSE 67674
// exit ;
67670: POP
67671: POP
67672: GO 67678
67674: GO 67637
67676: POP
67677: POP
// end ;
67678: LD_VAR 0 4
67682: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67683: LD_INT 0
67685: PPUSH
67686: PPUSH
67687: PPUSH
67688: PPUSH
67689: PPUSH
67690: PPUSH
67691: PPUSH
// if not GetClass ( unit ) = class_sniper then
67692: LD_VAR 0 1
67696: PPUSH
67697: CALL_OW 257
67701: PUSH
67702: LD_INT 5
67704: EQUAL
67705: NOT
67706: IFFALSE 67710
// exit ;
67708: GO 68098
// dist := 8 ;
67710: LD_ADDR_VAR 0 5
67714: PUSH
67715: LD_INT 8
67717: ST_TO_ADDR
// viewRange := 12 ;
67718: LD_ADDR_VAR 0 7
67722: PUSH
67723: LD_INT 12
67725: ST_TO_ADDR
// side := GetSide ( unit ) ;
67726: LD_ADDR_VAR 0 6
67730: PUSH
67731: LD_VAR 0 1
67735: PPUSH
67736: CALL_OW 255
67740: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67741: LD_INT 61
67743: PPUSH
67744: LD_VAR 0 6
67748: PPUSH
67749: CALL_OW 321
67753: PUSH
67754: LD_INT 2
67756: EQUAL
67757: IFFALSE 67767
// viewRange := 16 ;
67759: LD_ADDR_VAR 0 7
67763: PUSH
67764: LD_INT 16
67766: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67767: LD_VAR 0 1
67771: PPUSH
67772: LD_VAR 0 2
67776: PPUSH
67777: LD_VAR 0 3
67781: PPUSH
67782: CALL_OW 297
67786: PUSH
67787: LD_VAR 0 5
67791: GREATER
67792: IFFALSE 67871
// begin ComMoveXY ( unit , x , y ) ;
67794: LD_VAR 0 1
67798: PPUSH
67799: LD_VAR 0 2
67803: PPUSH
67804: LD_VAR 0 3
67808: PPUSH
67809: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67813: LD_INT 35
67815: PPUSH
67816: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67820: LD_VAR 0 1
67824: PPUSH
67825: LD_VAR 0 2
67829: PPUSH
67830: LD_VAR 0 3
67834: PPUSH
67835: CALL 42528 0 3
67839: NOT
67840: IFFALSE 67844
// exit ;
67842: GO 68098
// until GetDistUnitXY ( unit , x , y ) < dist ;
67844: LD_VAR 0 1
67848: PPUSH
67849: LD_VAR 0 2
67853: PPUSH
67854: LD_VAR 0 3
67858: PPUSH
67859: CALL_OW 297
67863: PUSH
67864: LD_VAR 0 5
67868: LESS
67869: IFFALSE 67813
// end ; ComTurnXY ( unit , x , y ) ;
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_VAR 0 2
67880: PPUSH
67881: LD_VAR 0 3
67885: PPUSH
67886: CALL_OW 118
// wait ( 5 ) ;
67890: LD_INT 5
67892: PPUSH
67893: CALL_OW 67
// _d := GetDir ( unit ) ;
67897: LD_ADDR_VAR 0 10
67901: PUSH
67902: LD_VAR 0 1
67906: PPUSH
67907: CALL_OW 254
67911: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67912: LD_ADDR_VAR 0 8
67916: PUSH
67917: LD_VAR 0 1
67921: PPUSH
67922: CALL_OW 250
67926: PPUSH
67927: LD_VAR 0 10
67931: PPUSH
67932: LD_VAR 0 5
67936: PPUSH
67937: CALL_OW 272
67941: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67942: LD_ADDR_VAR 0 9
67946: PUSH
67947: LD_VAR 0 1
67951: PPUSH
67952: CALL_OW 251
67956: PPUSH
67957: LD_VAR 0 10
67961: PPUSH
67962: LD_VAR 0 5
67966: PPUSH
67967: CALL_OW 273
67971: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67972: LD_VAR 0 8
67976: PPUSH
67977: LD_VAR 0 9
67981: PPUSH
67982: CALL_OW 488
67986: NOT
67987: IFFALSE 67991
// exit ;
67989: GO 68098
// ComAnimCustom ( unit , 1 ) ;
67991: LD_VAR 0 1
67995: PPUSH
67996: LD_INT 1
67998: PPUSH
67999: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68003: LD_VAR 0 8
68007: PPUSH
68008: LD_VAR 0 9
68012: PPUSH
68013: LD_VAR 0 6
68017: PPUSH
68018: LD_VAR 0 7
68022: PPUSH
68023: CALL_OW 330
// repeat wait ( 1 ) ;
68027: LD_INT 1
68029: PPUSH
68030: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
68034: LD_VAR 0 1
68038: PPUSH
68039: CALL_OW 316
68043: PUSH
68044: LD_VAR 0 1
68048: PPUSH
68049: CALL_OW 314
68053: OR
68054: PUSH
68055: LD_VAR 0 1
68059: PPUSH
68060: CALL_OW 302
68064: NOT
68065: OR
68066: PUSH
68067: LD_VAR 0 1
68071: PPUSH
68072: CALL_OW 301
68076: OR
68077: IFFALSE 68027
// RemoveSeeing ( _x , _y , side ) ;
68079: LD_VAR 0 8
68083: PPUSH
68084: LD_VAR 0 9
68088: PPUSH
68089: LD_VAR 0 6
68093: PPUSH
68094: CALL_OW 331
// end ;
68098: LD_VAR 0 4
68102: RET
