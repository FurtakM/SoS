// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3776 0 0
// CreateNature ;
  12: CALL 3647 0 0
// Action ;
  16: CALL 3918 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6425 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6425 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6425 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6425 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6425 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6425 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6425 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6425 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6425 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6425 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6425 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6425 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6425 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6425 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6425 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6425 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 44157 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11286 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14754 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11286 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 43062 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11286 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 44157 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 13
3195: PPUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 70
3210: AND
3211: IFFALSE 3644
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
// begin tmp := [ ] ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 3
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 5
3246: PUSH
3247: LD_INT 6
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_OWVAR 67
3260: ARRAY
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3380
// begin uc_side := 3 ;
3265: LD_ADDR_OWVAR 20
3269: PUSH
3270: LD_INT 3
3272: ST_TO_ADDR
// uc_nation := nation_russian ;
3273: LD_ADDR_OWVAR 21
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 6
3286: PUSH
3287: LD_INT 7
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: LD_INT 9
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// if Prob ( 50 ) then
3322: LD_INT 50
3324: PPUSH
3325: CALL_OW 13
3329: IFFALSE 3343
// SetClass ( un , class_bazooker ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 9
3338: PPUSH
3339: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3343: LD_VAR 0 2
3347: PPUSH
3348: LD_INT 12
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 44157 0 2
3377: ST_TO_ADDR
// end ;
3378: GO 3262
3380: POP
3381: POP
// for i := 1 to 4 do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 4
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3566
// begin uc_side := 3 ;
3398: LD_ADDR_OWVAR 20
3402: PUSH
3403: LD_INT 3
3405: ST_TO_ADDR
// uc_nation := nation_russian ;
3406: LD_ADDR_OWVAR 21
3410: PUSH
3411: LD_INT 3
3413: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 8
3425: PUSH
3426: LD_INT 9
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_OWVAR 67
3439: ARRAY
3440: PPUSH
3441: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3445: LD_INT 22
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 43
3456: PUSH
3457: LD_INT 44
3459: PUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 45
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_VAR 0 1
3476: PUSH
3477: LD_INT 4
3479: MOD
3480: PUSH
3481: LD_INT 1
3483: PLUS
3484: ARRAY
3485: PPUSH
3486: LD_INT 100
3488: PPUSH
3489: CALL 11286 0 5
// un := CreateVehicle ;
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: CALL_OW 45
3502: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_INT 4
3510: PPUSH
3511: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3530: CALL_OW 44
3534: PPUSH
3535: LD_VAR 0 2
3539: PPUSH
3540: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL 44157 0 2
3563: ST_TO_ADDR
// end ;
3564: GO 3395
3566: POP
3567: POP
// repeat wait ( 0 0$1 ) ;
3568: LD_INT 35
3570: PPUSH
3571: CALL_OW 67
// for i in tmp do
3575: LD_ADDR_VAR 0 1
3579: PUSH
3580: LD_VAR 0 3
3584: PUSH
3585: FOR_IN
3586: IFFALSE 3624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_INT 22
3595: PUSH
3596: LD_INT 2
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PPUSH
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 74
3617: PPUSH
3618: CALL_OW 115
3622: GO 3585
3624: POP
3625: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_INT 50
3633: PUSH
3634: EMPTY
3635: LIST
3636: PPUSH
3637: CALL_OW 72
3641: NOT
3642: IFFALSE 3568
// end ; end_of_file
3644: PPOPN 3
3646: END
// export function CreateNature ; var i ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
// PrepareTiger ( 0 ) ;
3651: LD_INT 0
3653: PPUSH
3654: CALL 40533 0 1
// for i := 1 to 2 do
3658: LD_ADDR_VAR 0 2
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 2
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3691
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3674: CALL_OW 44
3678: PPUSH
3679: LD_INT 4
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
3689: GO 3671
3691: POP
3692: POP
// PrepareBird ;
3693: CALL 40714 0 0
// for i := 1 to 3 do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: DOUBLE
3703: LD_INT 1
3705: DEC
3706: ST_TO_ADDR
3707: LD_INT 3
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3713: CALL_OW 44
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// PrepareFrog ;
3732: CALL 40634 0 0
// for i := 1 to 3 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 3
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3769
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3752: CALL_OW 44
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
3767: GO 3749
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function LoadTech ; var i , tmp ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3781: LD_ADDR_VAR 0 3
3785: PUSH
3786: LD_STRING 09_tech
3788: PPUSH
3789: EMPTY
3790: PPUSH
3791: CALL_OW 30
3795: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL 8548 0 1
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3844
// SetTech ( i , 2 , tmp [ i ] ) ;
3819: LD_VAR 0 2
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 322
3842: GO 3816
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3851: LD_ADDR_EXP 8
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// end ;
3859: PPOPN 1
3861: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3862: LD_VAR 0 1
3866: PUSH
3867: LD_EXP 21
3871: EQUAL
3872: IFFALSE 3881
// YouLost ( Schulz ) ;
3874: LD_STRING Schulz
3876: PPUSH
3877: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3881: LD_VAR 0 1
3885: PUSH
3886: LD_EXP 10
3890: EQUAL
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 255
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: AND
3906: IFFALSE 3915
// YouLost ( Heike ) ;
3908: LD_STRING Heike
3910: PPUSH
3911: CALL_OW 104
// end ; end_of_file
3915: PPOPN 1
3917: END
// export function Action ; var p , i , tmp ; begin
3918: LD_INT 0
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3924: LD_INT 12
3926: PPUSH
3927: LD_INT 12
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 10
3935: PPUSH
3936: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3940: LD_INT 12
3942: PPUSH
3943: LD_INT 12
3945: PPUSH
3946: LD_INT 2
3948: PPUSH
3949: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 12
3958: PPUSH
3959: CALL_OW 86
// InGameOn ;
3963: CALL_OW 8
// PrepareArabian ;
3967: CALL 133 0 0
// InGameOff ;
3971: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3975: LD_STRING M4
3977: PPUSH
3978: CALL_OW 337
// SaveForQuickRestart ;
3982: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3986: LD_INT 35
3988: PPUSH
3989: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3993: LD_INT 9
3995: PPUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 70
4010: IFFALSE 3986
// PrepareHeikeCamp ;
4012: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// if heikeIsDead then
4023: LD_EXP 7
4027: IFFALSE 4363
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4029: LD_INT 116
4031: PPUSH
4032: LD_INT 58
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 26
4040: NEG
4041: PPUSH
4042: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4046: LD_INT 116
4048: PPUSH
4049: LD_INT 58
4051: PPUSH
4052: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4056: LD_EXP 21
4060: PPUSH
4061: LD_STRING DL-Obj-a-1
4063: PPUSH
4064: CALL_OW 88
// InGameOn ;
4068: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4072: LD_INT 116
4074: PPUSH
4075: LD_INT 58
4077: PPUSH
4078: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4082: LD_INT 22
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: LD_EXP 21
4101: PUSH
4102: LD_EXP 25
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: DIFF
4111: PPUSH
4112: LD_INT 96
4114: PPUSH
4115: LD_INT 65
4117: PPUSH
4118: CALL_OW 111
// if IsInUnit ( Schulz ) then
4122: LD_EXP 21
4126: PPUSH
4127: CALL_OW 310
4131: IFFALSE 4155
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4133: LD_EXP 21
4137: PPUSH
4138: CALL_OW 310
4142: PPUSH
4143: LD_INT 115
4145: PPUSH
4146: LD_INT 61
4148: PPUSH
4149: CALL_OW 111
4153: GO 4170
// ComMoveXY ( Schulz , 115 , 61 ) ;
4155: LD_EXP 21
4159: PPUSH
4160: LD_INT 115
4162: PPUSH
4163: LD_INT 61
4165: PPUSH
4166: CALL_OW 111
// if IsInUnit ( Nia ) then
4170: LD_EXP 25
4174: PPUSH
4175: CALL_OW 310
4179: IFFALSE 4203
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4181: LD_EXP 25
4185: PPUSH
4186: CALL_OW 310
4190: PPUSH
4191: LD_INT 115
4193: PPUSH
4194: LD_INT 61
4196: PPUSH
4197: CALL_OW 111
4201: GO 4218
// ComMoveXY ( Nia , 115 , 61 ) ;
4203: LD_EXP 25
4207: PPUSH
4208: LD_INT 115
4210: PPUSH
4211: LD_INT 61
4213: PPUSH
4214: CALL_OW 111
// p := 0 ;
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4226: LD_INT 35
4228: PPUSH
4229: CALL_OW 67
// p := Inc ( p ) ;
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: LD_VAR 0 2
4242: PPUSH
4243: CALL 45518 0 1
4247: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4248: LD_INT 115
4250: PPUSH
4251: LD_INT 61
4253: PPUSH
4254: CALL_OW 428
4258: PUSH
4259: LD_VAR 0 2
4263: PUSH
4264: LD_INT 20
4266: GREATER
4267: OR
4268: IFFALSE 4226
// if Givi and IsOk ( Nia ) then
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 25
4279: PPUSH
4280: CALL_OW 302
4284: AND
4285: IFFALSE 4335
// begin Say ( Nia , DN-Obj-a-2 ) ;
4287: LD_EXP 25
4291: PPUSH
4292: LD_STRING DN-Obj-a-2
4294: PPUSH
4295: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4299: LD_EXP 21
4303: PPUSH
4304: LD_STRING DL-Obj-a-3
4306: PPUSH
4307: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4311: LD_EXP 25
4315: PPUSH
4316: LD_STRING DN-Obj-a-4
4318: PPUSH
4319: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4323: LD_EXP 21
4327: PPUSH
4328: LD_STRING DL-Obj-a-5
4330: PPUSH
4331: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4335: LD_INT 35
4337: PPUSH
4338: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4342: LD_EXP 21
4346: PPUSH
4347: LD_STRING DL-Fail-1
4349: PPUSH
4350: CALL_OW 88
// YouLost ( Fail ) ;
4354: LD_STRING Fail
4356: PPUSH
4357: CALL_OW 104
// exit ;
4361: GO 5378
// end ; PrepareRussianBaseAttackers ;
4363: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4367: LD_INT 35
4369: PPUSH
4370: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4374: LD_INT 116
4376: PPUSH
4377: LD_INT 58
4379: PPUSH
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 26
4385: NEG
4386: PPUSH
4387: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4391: LD_INT 116
4393: PPUSH
4394: LD_INT 58
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4404: LD_INT 116
4406: PPUSH
4407: LD_INT 58
4409: PPUSH
4410: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4414: LD_INT 5
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: CALL_OW 343
// DialogueOn ;
4424: CALL_OW 6
// Say ( Schulz , DL-Obj-1 ) ;
4428: LD_EXP 21
4432: PPUSH
4433: LD_STRING DL-Obj-1
4435: PPUSH
4436: CALL_OW 88
// DialogueOff ;
4440: CALL_OW 7
// PrepareBasim ;
4444: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4448: LD_INT 10
4450: PPUSH
4451: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4455: LD_INT 8
4457: PPUSH
4458: LD_INT 2
4460: PPUSH
4461: CALL_OW 343
// repeat wait ( 0 0$0.3 ) ;
4465: LD_INT 10
4467: PPUSH
4468: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 12 ] ] ) ;
4472: LD_INT 22
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 92
4484: PUSH
4485: LD_INT 117
4487: PUSH
4488: LD_INT 58
4490: PUSH
4491: LD_INT 12
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 69
4508: IFFALSE 4465
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4510: LD_ADDR_VAR 0 3
4514: PUSH
4515: LD_INT 22
4517: PUSH
4518: LD_INT 5
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: FOR_IN
4531: IFFALSE 4547
// SetSide ( i , 2 ) ;
4533: LD_VAR 0 3
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 235
4545: GO 4530
4547: POP
4548: POP
// repeat wait ( 0 0$1 ) ;
4549: LD_INT 35
4551: PPUSH
4552: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_INT 50
4563: PUSH
4564: EMPTY
4565: LIST
4566: PUSH
4567: LD_INT 25
4569: PUSH
4570: LD_INT 17
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 69
4585: ST_TO_ADDR
// for i in tmp do
4586: LD_ADDR_VAR 0 3
4590: PUSH
4591: LD_VAR 0 4
4595: PUSH
4596: FOR_IN
4597: IFFALSE 4635
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4599: LD_VAR 0 3
4603: PPUSH
4604: LD_INT 22
4606: PUSH
4607: LD_INT 3
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_VAR 0 3
4623: PPUSH
4624: CALL_OW 74
4628: PPUSH
4629: CALL_OW 115
4633: GO 4596
4635: POP
4636: POP
// until See ( 2 , Basim ) and kamikazed ;
4637: LD_INT 2
4639: PPUSH
4640: LD_EXP 22
4644: PPUSH
4645: CALL_OW 292
4649: PUSH
4650: LD_EXP 8
4654: AND
4655: IFFALSE 4549
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_INT 50
4664: PUSH
4665: EMPTY
4666: LIST
4667: PUSH
4668: LD_INT 25
4670: PUSH
4671: LD_INT 17
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 69
4686: ST_TO_ADDR
// if tmp then
4687: LD_VAR 0 4
4691: IFFALSE 4719
// for i in tmp do
4693: LD_ADDR_VAR 0 3
4697: PUSH
4698: LD_VAR 0 4
4702: PUSH
4703: FOR_IN
4704: IFFALSE 4717
// KillUnit ( i ) ;
4706: LD_VAR 0 3
4710: PPUSH
4711: CALL_OW 66
4715: GO 4703
4717: POP
4718: POP
// Say ( Basim , DBs-Obj-2 ) ;
4719: LD_EXP 22
4723: PPUSH
4724: LD_STRING DBs-Obj-2
4726: PPUSH
4727: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4731: LD_INT 35
4733: PPUSH
4734: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 3
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 50
4750: PUSH
4751: EMPTY
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: NOT
4763: IFFALSE 4731
// ComExit ( Heike ) ;
4765: LD_EXP 10
4769: PPUSH
4770: CALL 44555 0 1
// DialogueOn ;
4774: CALL_OW 6
// if IsOk ( Kaia ) then
4778: LD_EXP 15
4782: PPUSH
4783: CALL_OW 302
4787: IFFALSE 4930
// begin CenterNowOnUnits ( Kaia ) ;
4789: LD_EXP 15
4793: PPUSH
4794: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4798: LD_EXP 15
4802: PPUSH
4803: LD_STRING DK-Obj-3
4805: PPUSH
4806: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4810: LD_EXP 11
4814: PPUSH
4815: LD_STRING DG-Obj-4
4817: PPUSH
4818: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4822: LD_EXP 15
4826: PPUSH
4827: LD_STRING DK-Obj-5
4829: PPUSH
4830: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4834: LD_EXP 15
4838: PPUSH
4839: LD_STRING DK-Obj-6
4841: PPUSH
4842: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4846: LD_EXP 15
4850: PPUSH
4851: LD_STRING DK-Obj-7
4853: PPUSH
4854: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4858: LD_EXP 15
4862: PPUSH
4863: LD_STRING DK-Obj-8
4865: PPUSH
4866: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4870: LD_EXP 21
4874: PPUSH
4875: LD_STRING DL-Obj-9
4877: PPUSH
4878: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4882: LD_EXP 21
4886: PPUSH
4887: LD_STRING DL-Obj-10
4889: PPUSH
4890: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4894: LD_EXP 21
4898: PPUSH
4899: LD_STRING DL-Obj-11
4901: PPUSH
4902: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4906: LD_EXP 21
4910: PPUSH
4911: LD_STRING DL-Obj-12
4913: PPUSH
4914: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4918: LD_EXP 21
4922: PPUSH
4923: LD_STRING DL-Obj-13
4925: PPUSH
4926: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4930: LD_EXP 19
4934: PPUSH
4935: CALL_OW 302
4939: IFFALSE 4977
// begin Say ( Kurt , DKs-Obj-14 ) ;
4941: LD_EXP 19
4945: PPUSH
4946: LD_STRING DKs-Obj-14
4948: PPUSH
4949: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4953: LD_EXP 19
4957: PPUSH
4958: LD_STRING DKs-Obj-15
4960: PPUSH
4961: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4965: LD_EXP 11
4969: PPUSH
4970: LD_STRING DG-Obj-16
4972: PPUSH
4973: CALL_OW 88
// end ; DialogueOff ;
4977: CALL_OW 7
// SetSide ( Basim , 2 ) ;
4981: LD_EXP 22
4985: PPUSH
4986: LD_INT 2
4988: PPUSH
4989: CALL_OW 235
// wait ( 0 0$3 ) ;
4993: LD_INT 105
4995: PPUSH
4996: CALL_OW 67
// ComExit ( Givi ) ;
5000: LD_EXP 11
5004: PPUSH
5005: CALL 44555 0 1
// ComExit ( Nia ) ;
5009: LD_EXP 25
5013: PPUSH
5014: CALL 44555 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5018: LD_EXP 25
5022: PPUSH
5023: LD_EXP 11
5027: PPUSH
5028: CALL_OW 172
// wait ( 0 0$1 ) ;
5032: LD_INT 35
5034: PPUSH
5035: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5039: LD_EXP 11
5043: PPUSH
5044: CALL_OW 302
5048: PUSH
5049: LD_EXP 25
5053: PPUSH
5054: CALL_OW 302
5058: AND
5059: IFFALSE 5333
// begin DialogueOn ;
5061: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5065: LD_EXP 11
5069: PPUSH
5070: LD_STRING DG-Nia-1
5072: PPUSH
5073: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5077: LD_EXP 10
5081: PPUSH
5082: LD_STRING DH-Nia-2
5084: PPUSH
5085: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5089: LD_EXP 11
5093: PPUSH
5094: LD_STRING DG-Nia-3
5096: PPUSH
5097: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5101: LD_EXP 25
5105: PPUSH
5106: LD_STRING DN-Nia-4
5108: PPUSH
5109: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5113: LD_EXP 10
5117: PPUSH
5118: LD_STRING DH-Nia-5
5120: PPUSH
5121: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5125: LD_EXP 11
5129: PPUSH
5130: LD_STRING DG-Nia-6
5132: PPUSH
5133: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5137: LD_EXP 25
5141: PPUSH
5142: LD_STRING DN-Nia-7
5144: PPUSH
5145: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5149: LD_EXP 25
5153: PPUSH
5154: LD_STRING DN-Nia-8
5156: PPUSH
5157: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5161: LD_EXP 25
5165: PPUSH
5166: LD_STRING DN-Nia-9
5168: PPUSH
5169: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5173: LD_EXP 25
5177: PPUSH
5178: LD_STRING DN-Nia-10
5180: PPUSH
5181: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5185: LD_EXP 11
5189: PPUSH
5190: LD_STRING DG-Nia-11
5192: PPUSH
5193: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5197: LD_EXP 25
5201: PPUSH
5202: LD_STRING DN-Nia-12
5204: PPUSH
5205: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5209: LD_EXP 10
5213: PPUSH
5214: LD_STRING DH-Nia-13
5216: PPUSH
5217: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DN-Nia-14
5228: PPUSH
5229: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5233: LD_EXP 10
5237: PPUSH
5238: LD_STRING DH-Nia-15
5240: PPUSH
5241: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5245: LD_EXP 21
5249: PPUSH
5250: LD_STRING DL-Nia-16
5252: PPUSH
5253: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5257: LD_EXP 10
5261: PPUSH
5262: LD_STRING DH-Nia-17
5264: PPUSH
5265: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5269: LD_EXP 10
5273: PPUSH
5274: LD_STRING DH-Nia-18
5276: PPUSH
5277: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5281: LD_EXP 13
5285: PPUSH
5286: LD_STRING DI-Nia-19
5288: PPUSH
5289: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5293: LD_EXP 21
5297: PPUSH
5298: LD_STRING DL-Nia-20
5300: PPUSH
5301: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5305: LD_EXP 21
5309: PPUSH
5310: LD_STRING DL-Nia-21
5312: PPUSH
5313: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5317: LD_EXP 21
5321: PPUSH
5322: LD_STRING DL-Nia-22
5324: PPUSH
5325: CALL_OW 88
// DialogueOff ;
5329: CALL_OW 7
// end ; DialogueOn ;
5333: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5337: LD_EXP 21
5341: PPUSH
5342: LD_STRING DL-Retreat-1
5344: PPUSH
5345: CALL_OW 88
// DialogueOff ;
5349: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5353: LD_STRING M5
5355: PPUSH
5356: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5360: LD_INT 13
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 424
// startRussianAttacks := true ;
5370: LD_ADDR_EXP 9
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// end ;
5378: LD_VAR 0 1
5382: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5383: LD_EXP 9
5387: PUSH
5388: LD_INT 13
5390: PPUSH
5391: LD_INT 22
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: LD_INT 50
5403: PUSH
5404: EMPTY
5405: LIST
5406: PUSH
5407: LD_INT 21
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 71
5426: NOT
5427: AND
5428: IFFALSE 5437
5430: GO 5432
5432: DISABLE
// EndMission ;
5433: CALL 5438 0 0
5437: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5438: LD_INT 0
5440: PPUSH
5441: PPUSH
5442: PPUSH
5443: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_INT 13
5451: PPUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 2
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 21
5464: PUSH
5465: LD_INT 2
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 70
5480: ST_TO_ADDR
// saveVehicles := [ ] ;
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: EMPTY
5487: ST_TO_ADDR
// for i in tmp do
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_VAR 0 3
5497: PUSH
5498: FOR_IN
5499: IFFALSE 5608
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5501: LD_ADDR_VAR 0 4
5505: PUSH
5506: LD_VAR 0 4
5510: PPUSH
5511: LD_VAR 0 2
5515: PPUSH
5516: CALL_OW 265
5520: PUSH
5521: LD_VAR 0 2
5525: PPUSH
5526: CALL_OW 262
5530: PUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 263
5540: PUSH
5541: LD_VAR 0 2
5545: PPUSH
5546: CALL_OW 264
5550: PUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 248
5560: PUSH
5561: LD_VAR 0 2
5565: PPUSH
5566: CALL_OW 261
5570: PUSH
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 271
5580: PUSH
5581: LD_VAR 0 2
5585: PPUSH
5586: CALL_OW 311
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL 44157 0 2
5605: ST_TO_ADDR
5606: GO 5498
5608: POP
5609: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5610: LD_EXP 21
5614: PPUSH
5615: LD_STRING 09c_Schulz
5617: PPUSH
5618: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5622: LD_EXP 21
5626: PPUSH
5627: LD_STRING 09c_Schulz_ID
5629: PPUSH
5630: CALL_OW 39
// if IsOk ( Lemmy ) then
5634: LD_EXP 23
5638: PPUSH
5639: CALL_OW 302
5643: IFFALSE 5669
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5645: LD_EXP 23
5649: PPUSH
5650: LD_STRING 09c_Lemmy
5652: PPUSH
5653: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5657: LD_EXP 23
5661: PPUSH
5662: LD_STRING 09c_Lemmy_ID
5664: PPUSH
5665: CALL_OW 39
// end ; if IsOk ( Nia ) then
5669: LD_EXP 25
5673: PPUSH
5674: CALL_OW 302
5678: IFFALSE 5704
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5680: LD_EXP 25
5684: PPUSH
5685: LD_STRING 09c_Nia
5687: PPUSH
5688: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5692: LD_EXP 25
5696: PPUSH
5697: LD_STRING 09c_Nia_ID
5699: PPUSH
5700: CALL_OW 39
// end ; if IsOk ( Mia ) then
5704: LD_EXP 24
5708: PPUSH
5709: CALL_OW 302
5713: IFFALSE 5739
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5715: LD_EXP 24
5719: PPUSH
5720: LD_STRING 09c_Mia
5722: PPUSH
5723: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5727: LD_EXP 24
5731: PPUSH
5732: LD_STRING 09c_Mia_ID
5734: PPUSH
5735: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5739: LD_EXP 26
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5774
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5750: LD_EXP 26
5754: PPUSH
5755: LD_STRING 09c_Jenna
5757: PPUSH
5758: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5762: LD_EXP 26
5766: PPUSH
5767: LD_STRING 09c_Jenna_ID
5769: PPUSH
5770: CALL_OW 39
// end ; if IsOk ( Basim ) then
5774: LD_EXP 22
5778: PPUSH
5779: CALL_OW 302
5783: IFFALSE 5809
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5785: LD_EXP 22
5789: PPUSH
5790: LD_STRING 09c_Basim
5792: PPUSH
5793: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5797: LD_EXP 22
5801: PPUSH
5802: LD_STRING 09c_Basim_ID
5804: PPUSH
5805: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5809: LD_EXP 10
5813: PPUSH
5814: LD_STRING 09c_Heike
5816: PPUSH
5817: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5821: LD_EXP 10
5825: PPUSH
5826: LD_STRING 09c_Heike_ID
5828: PPUSH
5829: CALL_OW 39
// if IsOk ( Givi ) then
5833: LD_EXP 11
5837: PPUSH
5838: CALL_OW 302
5842: IFFALSE 5868
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5844: LD_EXP 11
5848: PPUSH
5849: LD_STRING 09c_Givi
5851: PPUSH
5852: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5856: LD_EXP 11
5860: PPUSH
5861: LD_STRING 09c_Givi_ID
5863: PPUSH
5864: CALL_OW 39
// end ; if IsOk ( Mike ) then
5868: LD_EXP 12
5872: PPUSH
5873: CALL_OW 302
5877: IFFALSE 5903
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5879: LD_EXP 12
5883: PPUSH
5884: LD_STRING 09c_Mike
5886: PPUSH
5887: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5891: LD_EXP 12
5895: PPUSH
5896: LD_STRING 09c_Mike_ID
5898: PPUSH
5899: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5903: LD_EXP 13
5907: PPUSH
5908: CALL_OW 302
5912: IFFALSE 5938
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5914: LD_EXP 13
5918: PPUSH
5919: LD_STRING 09c_Ibrahim
5921: PPUSH
5922: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5926: LD_EXP 13
5930: PPUSH
5931: LD_STRING 09c_Ibrahim_ID
5933: PPUSH
5934: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5938: LD_EXP 14
5942: PPUSH
5943: CALL_OW 302
5947: IFFALSE 5973
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5949: LD_EXP 14
5953: PPUSH
5954: LD_STRING 09c_Kamil
5956: PPUSH
5957: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5961: LD_EXP 14
5965: PPUSH
5966: LD_STRING 09c_Kamil_ID
5968: PPUSH
5969: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5973: LD_EXP 15
5977: PPUSH
5978: CALL_OW 302
5982: IFFALSE 6008
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5984: LD_EXP 15
5988: PPUSH
5989: LD_STRING 09c_Kaia
5991: PPUSH
5992: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
5996: LD_EXP 15
6000: PPUSH
6001: LD_STRING 09c_Kaia_ID
6003: PPUSH
6004: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6008: LD_EXP 16
6012: PPUSH
6013: CALL_OW 302
6017: IFFALSE 6043
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6019: LD_EXP 16
6023: PPUSH
6024: LD_STRING 09c_Sophia
6026: PPUSH
6027: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6031: LD_EXP 16
6035: PPUSH
6036: LD_STRING 09c_Sophia_ID
6038: PPUSH
6039: CALL_OW 39
// end ; if IsOk ( Markov ) then
6043: LD_EXP 17
6047: PPUSH
6048: CALL_OW 302
6052: IFFALSE 6078
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6054: LD_EXP 17
6058: PPUSH
6059: LD_STRING 09c_Markov
6061: PPUSH
6062: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6066: LD_EXP 17
6070: PPUSH
6071: LD_STRING 09c_Markov_ID
6073: PPUSH
6074: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6078: LD_EXP 18
6082: PPUSH
6083: CALL_OW 302
6087: IFFALSE 6113
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6089: LD_EXP 18
6093: PPUSH
6094: LD_STRING 09c_Olaf
6096: PPUSH
6097: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6101: LD_EXP 18
6105: PPUSH
6106: LD_STRING 09c_Olaf_ID
6108: PPUSH
6109: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6113: LD_EXP 19
6117: PPUSH
6118: CALL_OW 302
6122: IFFALSE 6148
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6124: LD_EXP 19
6128: PPUSH
6129: LD_STRING 09c_Kurt
6131: PPUSH
6132: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6136: LD_EXP 19
6140: PPUSH
6141: LD_STRING 09c_Kurt_ID
6143: PPUSH
6144: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6148: LD_EXP 20
6152: PPUSH
6153: CALL_OW 302
6157: IFFALSE 6183
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6159: LD_EXP 20
6163: PPUSH
6164: LD_STRING 09c_Aviradze
6166: PPUSH
6167: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6171: LD_EXP 20
6175: PPUSH
6176: LD_STRING 09c_Aviradze_ID
6178: PPUSH
6179: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6183: LD_EXP 28
6187: PPUSH
6188: LD_INT 50
6190: PUSH
6191: EMPTY
6192: LIST
6193: PPUSH
6194: CALL_OW 72
6198: PPUSH
6199: LD_STRING 09c_schulzSecondSquad
6201: PPUSH
6202: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6206: LD_EXP 27
6210: PPUSH
6211: LD_INT 50
6213: PUSH
6214: EMPTY
6215: LIST
6216: PPUSH
6217: CALL_OW 72
6221: PPUSH
6222: LD_STRING 09c_heikeSecondSquad
6224: PPUSH
6225: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6229: LD_ADDR_VAR 0 2
6233: PUSH
6234: DOUBLE
6235: LD_INT 1
6237: DEC
6238: ST_TO_ADDR
6239: LD_EXP 28
6243: PPUSH
6244: LD_INT 50
6246: PUSH
6247: EMPTY
6248: LIST
6249: PPUSH
6250: CALL_OW 72
6254: PUSH
6255: FOR_TO
6256: IFFALSE 6284
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6258: LD_EXP 28
6262: PUSH
6263: LD_VAR 0 2
6267: ARRAY
6268: PPUSH
6269: LD_STRING 09c_random_ID_
6271: PUSH
6272: LD_VAR 0 2
6276: STR
6277: PPUSH
6278: CALL_OW 39
6282: GO 6255
6284: POP
6285: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6286: LD_ADDR_VAR 0 2
6290: PUSH
6291: DOUBLE
6292: LD_INT 1
6294: DEC
6295: ST_TO_ADDR
6296: LD_EXP 27
6300: PPUSH
6301: LD_INT 50
6303: PUSH
6304: EMPTY
6305: LIST
6306: PPUSH
6307: CALL_OW 72
6311: PUSH
6312: FOR_TO
6313: IFFALSE 6341
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6315: LD_EXP 27
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_STRING 09c_hrandom_ID_
6328: PUSH
6329: LD_VAR 0 2
6333: STR
6334: PPUSH
6335: CALL_OW 39
6339: GO 6312
6341: POP
6342: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6343: LD_VAR 0 4
6347: PPUSH
6348: LD_STRING 09c_vehicles
6350: PPUSH
6351: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6355: LD_OWVAR 1
6359: PPUSH
6360: LD_STRING 09c_tick
6362: PPUSH
6363: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6367: LD_INT 22
6369: PUSH
6370: LD_INT 2
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 23
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PPUSH
6391: CALL_OW 69
6395: PPUSH
6396: LD_STRING 09c_apes
6398: PPUSH
6399: CALL_OW 38
// wait ( 3 ) ;
6403: LD_INT 3
6405: PPUSH
6406: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6410: LD_INT 1
6412: PPUSH
6413: LD_STRING __x1/09_cont3
6415: PPUSH
6416: CALL_OW 340
// end ; end_of_file
6420: LD_VAR 0 1
6424: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6425: LD_INT 0
6427: PPUSH
6428: PPUSH
// if exist_mode then
6429: LD_VAR 0 2
6433: IFFALSE 6479
// begin unit := CreateCharacter ( prefix & ident ) ;
6435: LD_ADDR_VAR 0 5
6439: PUSH
6440: LD_VAR 0 3
6444: PUSH
6445: LD_VAR 0 1
6449: STR
6450: PPUSH
6451: CALL_OW 34
6455: ST_TO_ADDR
// if unit then
6456: LD_VAR 0 5
6460: IFFALSE 6477
// DeleteCharacters ( prefix & ident ) ;
6462: LD_VAR 0 3
6466: PUSH
6467: LD_VAR 0 1
6471: STR
6472: PPUSH
6473: CALL_OW 40
// end else
6477: GO 6494
// unit := NewCharacter ( ident ) ;
6479: LD_ADDR_VAR 0 5
6483: PUSH
6484: LD_VAR 0 1
6488: PPUSH
6489: CALL_OW 25
6493: ST_TO_ADDR
// result := unit ;
6494: LD_ADDR_VAR 0 4
6498: PUSH
6499: LD_VAR 0 5
6503: ST_TO_ADDR
// end ;
6504: LD_VAR 0 4
6508: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6509: LD_INT 0
6511: PPUSH
6512: PPUSH
// if not side or not nation then
6513: LD_VAR 0 1
6517: NOT
6518: PUSH
6519: LD_VAR 0 2
6523: NOT
6524: OR
6525: IFFALSE 6529
// exit ;
6527: GO 7297
// case nation of nation_american :
6529: LD_VAR 0 2
6533: PUSH
6534: LD_INT 1
6536: DOUBLE
6537: EQUAL
6538: IFTRUE 6542
6540: GO 6756
6542: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6543: LD_ADDR_VAR 0 4
6547: PUSH
6548: LD_INT 35
6550: PUSH
6551: LD_INT 45
6553: PUSH
6554: LD_INT 46
6556: PUSH
6557: LD_INT 47
6559: PUSH
6560: LD_INT 82
6562: PUSH
6563: LD_INT 83
6565: PUSH
6566: LD_INT 84
6568: PUSH
6569: LD_INT 85
6571: PUSH
6572: LD_INT 86
6574: PUSH
6575: LD_INT 1
6577: PUSH
6578: LD_INT 2
6580: PUSH
6581: LD_INT 6
6583: PUSH
6584: LD_INT 15
6586: PUSH
6587: LD_INT 16
6589: PUSH
6590: LD_INT 7
6592: PUSH
6593: LD_INT 12
6595: PUSH
6596: LD_INT 13
6598: PUSH
6599: LD_INT 10
6601: PUSH
6602: LD_INT 14
6604: PUSH
6605: LD_INT 20
6607: PUSH
6608: LD_INT 21
6610: PUSH
6611: LD_INT 22
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 32
6619: PUSH
6620: LD_INT 27
6622: PUSH
6623: LD_INT 36
6625: PUSH
6626: LD_INT 69
6628: PUSH
6629: LD_INT 39
6631: PUSH
6632: LD_INT 34
6634: PUSH
6635: LD_INT 40
6637: PUSH
6638: LD_INT 48
6640: PUSH
6641: LD_INT 49
6643: PUSH
6644: LD_INT 50
6646: PUSH
6647: LD_INT 51
6649: PUSH
6650: LD_INT 52
6652: PUSH
6653: LD_INT 53
6655: PUSH
6656: LD_INT 54
6658: PUSH
6659: LD_INT 55
6661: PUSH
6662: LD_INT 56
6664: PUSH
6665: LD_INT 57
6667: PUSH
6668: LD_INT 58
6670: PUSH
6671: LD_INT 59
6673: PUSH
6674: LD_INT 60
6676: PUSH
6677: LD_INT 61
6679: PUSH
6680: LD_INT 62
6682: PUSH
6683: LD_INT 80
6685: PUSH
6686: LD_INT 82
6688: PUSH
6689: LD_INT 83
6691: PUSH
6692: LD_INT 84
6694: PUSH
6695: LD_INT 85
6697: PUSH
6698: LD_INT 86
6700: PUSH
6701: EMPTY
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: ST_TO_ADDR
6754: GO 7221
6756: LD_INT 2
6758: DOUBLE
6759: EQUAL
6760: IFTRUE 6764
6762: GO 6990
6764: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6765: LD_ADDR_VAR 0 4
6769: PUSH
6770: LD_INT 35
6772: PUSH
6773: LD_INT 45
6775: PUSH
6776: LD_INT 46
6778: PUSH
6779: LD_INT 47
6781: PUSH
6782: LD_INT 82
6784: PUSH
6785: LD_INT 83
6787: PUSH
6788: LD_INT 84
6790: PUSH
6791: LD_INT 85
6793: PUSH
6794: LD_INT 87
6796: PUSH
6797: LD_INT 70
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: LD_INT 11
6805: PUSH
6806: LD_INT 3
6808: PUSH
6809: LD_INT 4
6811: PUSH
6812: LD_INT 5
6814: PUSH
6815: LD_INT 6
6817: PUSH
6818: LD_INT 15
6820: PUSH
6821: LD_INT 18
6823: PUSH
6824: LD_INT 7
6826: PUSH
6827: LD_INT 17
6829: PUSH
6830: LD_INT 8
6832: PUSH
6833: LD_INT 20
6835: PUSH
6836: LD_INT 21
6838: PUSH
6839: LD_INT 22
6841: PUSH
6842: LD_INT 72
6844: PUSH
6845: LD_INT 26
6847: PUSH
6848: LD_INT 69
6850: PUSH
6851: LD_INT 39
6853: PUSH
6854: LD_INT 40
6856: PUSH
6857: LD_INT 41
6859: PUSH
6860: LD_INT 42
6862: PUSH
6863: LD_INT 43
6865: PUSH
6866: LD_INT 48
6868: PUSH
6869: LD_INT 49
6871: PUSH
6872: LD_INT 50
6874: PUSH
6875: LD_INT 51
6877: PUSH
6878: LD_INT 52
6880: PUSH
6881: LD_INT 53
6883: PUSH
6884: LD_INT 54
6886: PUSH
6887: LD_INT 55
6889: PUSH
6890: LD_INT 56
6892: PUSH
6893: LD_INT 60
6895: PUSH
6896: LD_INT 61
6898: PUSH
6899: LD_INT 62
6901: PUSH
6902: LD_INT 66
6904: PUSH
6905: LD_INT 67
6907: PUSH
6908: LD_INT 68
6910: PUSH
6911: LD_INT 81
6913: PUSH
6914: LD_INT 82
6916: PUSH
6917: LD_INT 83
6919: PUSH
6920: LD_INT 84
6922: PUSH
6923: LD_INT 85
6925: PUSH
6926: LD_INT 87
6928: PUSH
6929: LD_INT 88
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: ST_TO_ADDR
6988: GO 7221
6990: LD_INT 3
6992: DOUBLE
6993: EQUAL
6994: IFTRUE 6998
6996: GO 7220
6998: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6999: LD_ADDR_VAR 0 4
7003: PUSH
7004: LD_INT 46
7006: PUSH
7007: LD_INT 47
7009: PUSH
7010: LD_INT 1
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: LD_INT 82
7018: PUSH
7019: LD_INT 83
7021: PUSH
7022: LD_INT 84
7024: PUSH
7025: LD_INT 85
7027: PUSH
7028: LD_INT 86
7030: PUSH
7031: LD_INT 11
7033: PUSH
7034: LD_INT 9
7036: PUSH
7037: LD_INT 20
7039: PUSH
7040: LD_INT 19
7042: PUSH
7043: LD_INT 21
7045: PUSH
7046: LD_INT 24
7048: PUSH
7049: LD_INT 22
7051: PUSH
7052: LD_INT 25
7054: PUSH
7055: LD_INT 28
7057: PUSH
7058: LD_INT 29
7060: PUSH
7061: LD_INT 30
7063: PUSH
7064: LD_INT 31
7066: PUSH
7067: LD_INT 37
7069: PUSH
7070: LD_INT 38
7072: PUSH
7073: LD_INT 32
7075: PUSH
7076: LD_INT 27
7078: PUSH
7079: LD_INT 33
7081: PUSH
7082: LD_INT 69
7084: PUSH
7085: LD_INT 39
7087: PUSH
7088: LD_INT 34
7090: PUSH
7091: LD_INT 40
7093: PUSH
7094: LD_INT 71
7096: PUSH
7097: LD_INT 23
7099: PUSH
7100: LD_INT 44
7102: PUSH
7103: LD_INT 48
7105: PUSH
7106: LD_INT 49
7108: PUSH
7109: LD_INT 50
7111: PUSH
7112: LD_INT 51
7114: PUSH
7115: LD_INT 52
7117: PUSH
7118: LD_INT 53
7120: PUSH
7121: LD_INT 54
7123: PUSH
7124: LD_INT 55
7126: PUSH
7127: LD_INT 56
7129: PUSH
7130: LD_INT 57
7132: PUSH
7133: LD_INT 58
7135: PUSH
7136: LD_INT 59
7138: PUSH
7139: LD_INT 63
7141: PUSH
7142: LD_INT 64
7144: PUSH
7145: LD_INT 65
7147: PUSH
7148: LD_INT 82
7150: PUSH
7151: LD_INT 83
7153: PUSH
7154: LD_INT 84
7156: PUSH
7157: LD_INT 85
7159: PUSH
7160: LD_INT 86
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: ST_TO_ADDR
7218: GO 7221
7220: POP
// if state > - 1 and state < 3 then
7221: LD_VAR 0 3
7225: PUSH
7226: LD_INT 1
7228: NEG
7229: GREATER
7230: PUSH
7231: LD_VAR 0 3
7235: PUSH
7236: LD_INT 3
7238: LESS
7239: AND
7240: IFFALSE 7297
// for i in result do
7242: LD_ADDR_VAR 0 5
7246: PUSH
7247: LD_VAR 0 4
7251: PUSH
7252: FOR_IN
7253: IFFALSE 7295
// if GetTech ( i , side ) <> state then
7255: LD_VAR 0 5
7259: PPUSH
7260: LD_VAR 0 1
7264: PPUSH
7265: CALL_OW 321
7269: PUSH
7270: LD_VAR 0 3
7274: NONEQUAL
7275: IFFALSE 7293
// result := result diff i ;
7277: LD_ADDR_VAR 0 4
7281: PUSH
7282: LD_VAR 0 4
7286: PUSH
7287: LD_VAR 0 5
7291: DIFF
7292: ST_TO_ADDR
7293: GO 7252
7295: POP
7296: POP
// end ;
7297: LD_VAR 0 4
7301: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7302: LD_INT 0
7304: PPUSH
7305: PPUSH
7306: PPUSH
// result := true ;
7307: LD_ADDR_VAR 0 3
7311: PUSH
7312: LD_INT 1
7314: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7315: LD_ADDR_VAR 0 5
7319: PUSH
7320: LD_VAR 0 2
7324: PPUSH
7325: CALL_OW 480
7329: ST_TO_ADDR
// if not tmp then
7330: LD_VAR 0 5
7334: NOT
7335: IFFALSE 7339
// exit ;
7337: GO 7388
// for i in tmp do
7339: LD_ADDR_VAR 0 4
7343: PUSH
7344: LD_VAR 0 5
7348: PUSH
7349: FOR_IN
7350: IFFALSE 7386
// if GetTech ( i , side ) <> state_researched then
7352: LD_VAR 0 4
7356: PPUSH
7357: LD_VAR 0 1
7361: PPUSH
7362: CALL_OW 321
7366: PUSH
7367: LD_INT 2
7369: NONEQUAL
7370: IFFALSE 7384
// begin result := false ;
7372: LD_ADDR_VAR 0 3
7376: PUSH
7377: LD_INT 0
7379: ST_TO_ADDR
// exit ;
7380: POP
7381: POP
7382: GO 7388
// end ;
7384: GO 7349
7386: POP
7387: POP
// end ;
7388: LD_VAR 0 3
7392: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7393: LD_INT 0
7395: PPUSH
7396: PPUSH
7397: PPUSH
7398: PPUSH
7399: PPUSH
7400: PPUSH
7401: PPUSH
7402: PPUSH
7403: PPUSH
7404: PPUSH
7405: PPUSH
7406: PPUSH
7407: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7408: LD_VAR 0 1
7412: NOT
7413: PUSH
7414: LD_VAR 0 1
7418: PPUSH
7419: CALL_OW 257
7423: PUSH
7424: LD_INT 9
7426: NONEQUAL
7427: OR
7428: IFFALSE 7432
// exit ;
7430: GO 8005
// side := GetSide ( unit ) ;
7432: LD_ADDR_VAR 0 9
7436: PUSH
7437: LD_VAR 0 1
7441: PPUSH
7442: CALL_OW 255
7446: ST_TO_ADDR
// tech_space := tech_spacanom ;
7447: LD_ADDR_VAR 0 12
7451: PUSH
7452: LD_INT 29
7454: ST_TO_ADDR
// tech_time := tech_taurad ;
7455: LD_ADDR_VAR 0 13
7459: PUSH
7460: LD_INT 28
7462: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7463: LD_ADDR_VAR 0 11
7467: PUSH
7468: LD_VAR 0 1
7472: PPUSH
7473: CALL_OW 310
7477: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7478: LD_VAR 0 11
7482: PPUSH
7483: CALL_OW 247
7487: PUSH
7488: LD_INT 2
7490: EQUAL
7491: IFFALSE 7495
// exit ;
7493: GO 8005
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7495: LD_ADDR_VAR 0 8
7499: PUSH
7500: LD_INT 81
7502: PUSH
7503: LD_VAR 0 9
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 3
7514: PUSH
7515: LD_INT 21
7517: PUSH
7518: LD_INT 3
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PPUSH
7533: CALL_OW 69
7537: ST_TO_ADDR
// if not tmp then
7538: LD_VAR 0 8
7542: NOT
7543: IFFALSE 7547
// exit ;
7545: GO 8005
// if in_unit then
7547: LD_VAR 0 11
7551: IFFALSE 7575
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7553: LD_ADDR_VAR 0 10
7557: PUSH
7558: LD_VAR 0 8
7562: PPUSH
7563: LD_VAR 0 11
7567: PPUSH
7568: CALL_OW 74
7572: ST_TO_ADDR
7573: GO 7595
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7575: LD_ADDR_VAR 0 10
7579: PUSH
7580: LD_VAR 0 8
7584: PPUSH
7585: LD_VAR 0 1
7589: PPUSH
7590: CALL_OW 74
7594: ST_TO_ADDR
// if not enemy then
7595: LD_VAR 0 10
7599: NOT
7600: IFFALSE 7604
// exit ;
7602: GO 8005
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7604: LD_VAR 0 11
7608: PUSH
7609: LD_VAR 0 11
7613: PPUSH
7614: LD_VAR 0 10
7618: PPUSH
7619: CALL_OW 296
7623: PUSH
7624: LD_INT 13
7626: GREATER
7627: AND
7628: PUSH
7629: LD_VAR 0 1
7633: PPUSH
7634: LD_VAR 0 10
7638: PPUSH
7639: CALL_OW 296
7643: PUSH
7644: LD_INT 12
7646: GREATER
7647: OR
7648: IFFALSE 7652
// exit ;
7650: GO 8005
// missile := [ 1 ] ;
7652: LD_ADDR_VAR 0 14
7656: PUSH
7657: LD_INT 1
7659: PUSH
7660: EMPTY
7661: LIST
7662: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7663: LD_VAR 0 9
7667: PPUSH
7668: LD_VAR 0 12
7672: PPUSH
7673: CALL_OW 325
7677: IFFALSE 7706
// missile := Replace ( missile , missile + 1 , 2 ) ;
7679: LD_ADDR_VAR 0 14
7683: PUSH
7684: LD_VAR 0 14
7688: PPUSH
7689: LD_VAR 0 14
7693: PUSH
7694: LD_INT 1
7696: PLUS
7697: PPUSH
7698: LD_INT 2
7700: PPUSH
7701: CALL_OW 1
7705: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7706: LD_VAR 0 9
7710: PPUSH
7711: LD_VAR 0 13
7715: PPUSH
7716: CALL_OW 325
7720: PUSH
7721: LD_VAR 0 10
7725: PPUSH
7726: CALL_OW 255
7730: PPUSH
7731: LD_VAR 0 13
7735: PPUSH
7736: CALL_OW 325
7740: NOT
7741: AND
7742: IFFALSE 7771
// missile := Replace ( missile , missile + 1 , 3 ) ;
7744: LD_ADDR_VAR 0 14
7748: PUSH
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 14
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: PPUSH
7763: LD_INT 3
7765: PPUSH
7766: CALL_OW 1
7770: ST_TO_ADDR
// if missile < 2 then
7771: LD_VAR 0 14
7775: PUSH
7776: LD_INT 2
7778: LESS
7779: IFFALSE 7783
// exit ;
7781: GO 8005
// x := GetX ( enemy ) ;
7783: LD_ADDR_VAR 0 4
7787: PUSH
7788: LD_VAR 0 10
7792: PPUSH
7793: CALL_OW 250
7797: ST_TO_ADDR
// y := GetY ( enemy ) ;
7798: LD_ADDR_VAR 0 5
7802: PUSH
7803: LD_VAR 0 10
7807: PPUSH
7808: CALL_OW 251
7812: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7813: LD_ADDR_VAR 0 6
7817: PUSH
7818: LD_VAR 0 4
7822: PUSH
7823: LD_INT 1
7825: NEG
7826: PPUSH
7827: LD_INT 1
7829: PPUSH
7830: CALL_OW 12
7834: PLUS
7835: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7836: LD_ADDR_VAR 0 7
7840: PUSH
7841: LD_VAR 0 5
7845: PUSH
7846: LD_INT 1
7848: NEG
7849: PPUSH
7850: LD_INT 1
7852: PPUSH
7853: CALL_OW 12
7857: PLUS
7858: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7859: LD_VAR 0 6
7863: PPUSH
7864: LD_VAR 0 7
7868: PPUSH
7869: CALL_OW 488
7873: NOT
7874: IFFALSE 7896
// begin _x := x ;
7876: LD_ADDR_VAR 0 6
7880: PUSH
7881: LD_VAR 0 4
7885: ST_TO_ADDR
// _y := y ;
7886: LD_ADDR_VAR 0 7
7890: PUSH
7891: LD_VAR 0 5
7895: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7896: LD_ADDR_VAR 0 3
7900: PUSH
7901: LD_INT 1
7903: PPUSH
7904: LD_VAR 0 14
7908: PPUSH
7909: CALL_OW 12
7913: ST_TO_ADDR
// case i of 1 :
7914: LD_VAR 0 3
7918: PUSH
7919: LD_INT 1
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7944
7927: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7928: LD_VAR 0 1
7932: PPUSH
7933: LD_VAR 0 10
7937: PPUSH
7938: CALL_OW 115
7942: GO 8005
7944: LD_INT 2
7946: DOUBLE
7947: EQUAL
7948: IFTRUE 7952
7950: GO 7974
7952: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_VAR 0 6
7962: PPUSH
7963: LD_VAR 0 7
7967: PPUSH
7968: CALL_OW 153
7972: GO 8005
7974: LD_INT 3
7976: DOUBLE
7977: EQUAL
7978: IFTRUE 7982
7980: GO 8004
7982: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7983: LD_VAR 0 1
7987: PPUSH
7988: LD_VAR 0 6
7992: PPUSH
7993: LD_VAR 0 7
7997: PPUSH
7998: CALL_OW 154
8002: GO 8005
8004: POP
// end ;
8005: LD_VAR 0 2
8009: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
8010: LD_INT 0
8012: PPUSH
8013: PPUSH
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
// if not unit or not building then
8018: LD_VAR 0 1
8022: NOT
8023: PUSH
8024: LD_VAR 0 2
8028: NOT
8029: OR
8030: IFFALSE 8034
// exit ;
8032: GO 8192
// x := GetX ( building ) ;
8034: LD_ADDR_VAR 0 5
8038: PUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 250
8048: ST_TO_ADDR
// y := GetY ( building ) ;
8049: LD_ADDR_VAR 0 6
8053: PUSH
8054: LD_VAR 0 2
8058: PPUSH
8059: CALL_OW 251
8063: ST_TO_ADDR
// for i = 0 to 5 do
8064: LD_ADDR_VAR 0 4
8068: PUSH
8069: DOUBLE
8070: LD_INT 0
8072: DEC
8073: ST_TO_ADDR
8074: LD_INT 5
8076: PUSH
8077: FOR_TO
8078: IFFALSE 8190
// begin _x := ShiftX ( x , i , 3 ) ;
8080: LD_ADDR_VAR 0 7
8084: PUSH
8085: LD_VAR 0 5
8089: PPUSH
8090: LD_VAR 0 4
8094: PPUSH
8095: LD_INT 3
8097: PPUSH
8098: CALL_OW 272
8102: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8103: LD_ADDR_VAR 0 8
8107: PUSH
8108: LD_VAR 0 6
8112: PPUSH
8113: LD_VAR 0 4
8117: PPUSH
8118: LD_INT 3
8120: PPUSH
8121: CALL_OW 273
8125: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8126: LD_VAR 0 7
8130: PPUSH
8131: LD_VAR 0 8
8135: PPUSH
8136: CALL_OW 488
8140: NOT
8141: IFFALSE 8145
// continue ;
8143: GO 8077
// if HexInfo ( _x , _y ) = 0 then
8145: LD_VAR 0 7
8149: PPUSH
8150: LD_VAR 0 8
8154: PPUSH
8155: CALL_OW 428
8159: PUSH
8160: LD_INT 0
8162: EQUAL
8163: IFFALSE 8188
// begin ComMoveXY ( unit , _x , _y ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_VAR 0 7
8174: PPUSH
8175: LD_VAR 0 8
8179: PPUSH
8180: CALL_OW 111
// exit ;
8184: POP
8185: POP
8186: GO 8192
// end ; end ;
8188: GO 8077
8190: POP
8191: POP
// end ;
8192: LD_VAR 0 3
8196: RET
// export function ScanBase ( side , base_area ) ; begin
8197: LD_INT 0
8199: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8200: LD_ADDR_VAR 0 3
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_INT 81
8212: PUSH
8213: LD_VAR 0 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PPUSH
8222: CALL_OW 70
8226: ST_TO_ADDR
// end ;
8227: LD_VAR 0 3
8231: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8232: LD_INT 0
8234: PPUSH
8235: PPUSH
8236: PPUSH
8237: PPUSH
// result := false ;
8238: LD_ADDR_VAR 0 2
8242: PUSH
8243: LD_INT 0
8245: ST_TO_ADDR
// side := GetSide ( unit ) ;
8246: LD_ADDR_VAR 0 3
8250: PUSH
8251: LD_VAR 0 1
8255: PPUSH
8256: CALL_OW 255
8260: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8261: LD_ADDR_VAR 0 4
8265: PUSH
8266: LD_VAR 0 1
8270: PPUSH
8271: CALL_OW 248
8275: ST_TO_ADDR
// case nat of 1 :
8276: LD_VAR 0 4
8280: PUSH
8281: LD_INT 1
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8300
8289: POP
// tech := tech_lassight ; 2 :
8290: LD_ADDR_VAR 0 5
8294: PUSH
8295: LD_INT 12
8297: ST_TO_ADDR
8298: GO 8339
8300: LD_INT 2
8302: DOUBLE
8303: EQUAL
8304: IFTRUE 8308
8306: GO 8319
8308: POP
// tech := tech_mortar ; 3 :
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 41
8316: ST_TO_ADDR
8317: GO 8339
8319: LD_INT 3
8321: DOUBLE
8322: EQUAL
8323: IFTRUE 8327
8325: GO 8338
8327: POP
// tech := tech_bazooka ; end ;
8328: LD_ADDR_VAR 0 5
8332: PUSH
8333: LD_INT 44
8335: ST_TO_ADDR
8336: GO 8339
8338: POP
// if Researched ( side , tech ) then
8339: LD_VAR 0 3
8343: PPUSH
8344: LD_VAR 0 5
8348: PPUSH
8349: CALL_OW 325
8353: IFFALSE 8380
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8355: LD_ADDR_VAR 0 2
8359: PUSH
8360: LD_INT 5
8362: PUSH
8363: LD_INT 8
8365: PUSH
8366: LD_INT 9
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: LD_VAR 0 4
8378: ARRAY
8379: ST_TO_ADDR
// end ;
8380: LD_VAR 0 2
8384: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8385: LD_INT 0
8387: PPUSH
8388: PPUSH
8389: PPUSH
// if not mines then
8390: LD_VAR 0 2
8394: NOT
8395: IFFALSE 8399
// exit ;
8397: GO 8543
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8399: LD_ADDR_VAR 0 5
8403: PUSH
8404: LD_INT 81
8406: PUSH
8407: LD_VAR 0 1
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_INT 3
8418: PUSH
8419: LD_INT 21
8421: PUSH
8422: LD_INT 3
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PPUSH
8437: CALL_OW 69
8441: ST_TO_ADDR
// for i in mines do
8442: LD_ADDR_VAR 0 4
8446: PUSH
8447: LD_VAR 0 2
8451: PUSH
8452: FOR_IN
8453: IFFALSE 8541
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8455: LD_VAR 0 4
8459: PUSH
8460: LD_INT 1
8462: ARRAY
8463: PPUSH
8464: LD_VAR 0 4
8468: PUSH
8469: LD_INT 2
8471: ARRAY
8472: PPUSH
8473: CALL_OW 458
8477: NOT
8478: IFFALSE 8482
// continue ;
8480: GO 8452
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8482: LD_VAR 0 4
8486: PUSH
8487: LD_INT 1
8489: ARRAY
8490: PPUSH
8491: LD_VAR 0 4
8495: PUSH
8496: LD_INT 2
8498: ARRAY
8499: PPUSH
8500: CALL_OW 428
8504: PUSH
8505: LD_VAR 0 5
8509: IN
8510: IFFALSE 8539
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8512: LD_VAR 0 4
8516: PUSH
8517: LD_INT 1
8519: ARRAY
8520: PPUSH
8521: LD_VAR 0 4
8525: PUSH
8526: LD_INT 2
8528: ARRAY
8529: PPUSH
8530: LD_VAR 0 1
8534: PPUSH
8535: CALL_OW 456
// end ;
8539: GO 8452
8541: POP
8542: POP
// end ;
8543: LD_VAR 0 3
8547: RET
// export function Count ( array ) ; begin
8548: LD_INT 0
8550: PPUSH
// result := array + 0 ;
8551: LD_ADDR_VAR 0 2
8555: PUSH
8556: LD_VAR 0 1
8560: PUSH
8561: LD_INT 0
8563: PLUS
8564: ST_TO_ADDR
// end ;
8565: LD_VAR 0 2
8569: RET
// export function IsEmpty ( building ) ; begin
8570: LD_INT 0
8572: PPUSH
// if not building then
8573: LD_VAR 0 1
8577: NOT
8578: IFFALSE 8582
// exit ;
8580: GO 8625
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8582: LD_ADDR_VAR 0 2
8586: PUSH
8587: LD_VAR 0 1
8591: PUSH
8592: LD_INT 22
8594: PUSH
8595: LD_VAR 0 1
8599: PPUSH
8600: CALL_OW 255
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 58
8611: PUSH
8612: EMPTY
8613: LIST
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PPUSH
8619: CALL_OW 69
8623: IN
8624: ST_TO_ADDR
// end ;
8625: LD_VAR 0 2
8629: RET
// export function IsNotFull ( building ) ; var places ; begin
8630: LD_INT 0
8632: PPUSH
8633: PPUSH
// if not building then
8634: LD_VAR 0 1
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8671
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: LD_VAR 0 1
8652: PPUSH
8653: LD_INT 3
8655: PUSH
8656: LD_INT 62
8658: PUSH
8659: EMPTY
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// end ;
8671: LD_VAR 0 2
8675: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8676: LD_INT 0
8678: PPUSH
8679: PPUSH
8680: PPUSH
8681: PPUSH
// tmp := [ ] ;
8682: LD_ADDR_VAR 0 3
8686: PUSH
8687: EMPTY
8688: ST_TO_ADDR
// list := [ ] ;
8689: LD_ADDR_VAR 0 5
8693: PUSH
8694: EMPTY
8695: ST_TO_ADDR
// for i = 16 to 25 do
8696: LD_ADDR_VAR 0 4
8700: PUSH
8701: DOUBLE
8702: LD_INT 16
8704: DEC
8705: ST_TO_ADDR
8706: LD_INT 25
8708: PUSH
8709: FOR_TO
8710: IFFALSE 8783
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8712: LD_ADDR_VAR 0 3
8716: PUSH
8717: LD_VAR 0 3
8721: PUSH
8722: LD_INT 22
8724: PUSH
8725: LD_VAR 0 1
8729: PPUSH
8730: CALL_OW 255
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 91
8741: PUSH
8742: LD_VAR 0 1
8746: PUSH
8747: LD_INT 6
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 30
8757: PUSH
8758: LD_VAR 0 4
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: LIST
8771: PUSH
8772: EMPTY
8773: LIST
8774: PPUSH
8775: CALL_OW 69
8779: ADD
8780: ST_TO_ADDR
8781: GO 8709
8783: POP
8784: POP
// for i = 1 to tmp do
8785: LD_ADDR_VAR 0 4
8789: PUSH
8790: DOUBLE
8791: LD_INT 1
8793: DEC
8794: ST_TO_ADDR
8795: LD_VAR 0 3
8799: PUSH
8800: FOR_TO
8801: IFFALSE 8889
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8803: LD_ADDR_VAR 0 5
8807: PUSH
8808: LD_VAR 0 5
8812: PUSH
8813: LD_VAR 0 3
8817: PUSH
8818: LD_VAR 0 4
8822: ARRAY
8823: PPUSH
8824: CALL_OW 266
8828: PUSH
8829: LD_VAR 0 3
8833: PUSH
8834: LD_VAR 0 4
8838: ARRAY
8839: PPUSH
8840: CALL_OW 250
8844: PUSH
8845: LD_VAR 0 3
8849: PUSH
8850: LD_VAR 0 4
8854: ARRAY
8855: PPUSH
8856: CALL_OW 251
8860: PUSH
8861: LD_VAR 0 3
8865: PUSH
8866: LD_VAR 0 4
8870: ARRAY
8871: PPUSH
8872: CALL_OW 254
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: ADD
8886: ST_TO_ADDR
8887: GO 8800
8889: POP
8890: POP
// result := list ;
8891: LD_ADDR_VAR 0 2
8895: PUSH
8896: LD_VAR 0 5
8900: ST_TO_ADDR
// end ;
8901: LD_VAR 0 2
8905: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8906: LD_INT 0
8908: PPUSH
8909: PPUSH
8910: PPUSH
8911: PPUSH
8912: PPUSH
8913: PPUSH
8914: PPUSH
// if not factory then
8915: LD_VAR 0 1
8919: NOT
8920: IFFALSE 8924
// exit ;
8922: GO 9517
// if control = control_apeman then
8924: LD_VAR 0 4
8928: PUSH
8929: LD_INT 5
8931: EQUAL
8932: IFFALSE 9041
// begin tmp := UnitsInside ( factory ) ;
8934: LD_ADDR_VAR 0 8
8938: PUSH
8939: LD_VAR 0 1
8943: PPUSH
8944: CALL_OW 313
8948: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8949: LD_VAR 0 8
8953: PPUSH
8954: LD_INT 25
8956: PUSH
8957: LD_INT 12
8959: PUSH
8960: EMPTY
8961: LIST
8962: LIST
8963: PPUSH
8964: CALL_OW 72
8968: NOT
8969: IFFALSE 8979
// control := control_manual ;
8971: LD_ADDR_VAR 0 4
8975: PUSH
8976: LD_INT 1
8978: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8979: LD_ADDR_VAR 0 8
8983: PUSH
8984: LD_VAR 0 1
8988: PPUSH
8989: CALL 8676 0 1
8993: ST_TO_ADDR
// if tmp then
8994: LD_VAR 0 8
8998: IFFALSE 9041
// begin for i in tmp do
9000: LD_ADDR_VAR 0 7
9004: PUSH
9005: LD_VAR 0 8
9009: PUSH
9010: FOR_IN
9011: IFFALSE 9039
// if i [ 1 ] = b_ext_radio then
9013: LD_VAR 0 7
9017: PUSH
9018: LD_INT 1
9020: ARRAY
9021: PUSH
9022: LD_INT 22
9024: EQUAL
9025: IFFALSE 9037
// begin control := control_remote ;
9027: LD_ADDR_VAR 0 4
9031: PUSH
9032: LD_INT 2
9034: ST_TO_ADDR
// break ;
9035: GO 9039
// end ;
9037: GO 9010
9039: POP
9040: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9041: LD_VAR 0 1
9045: PPUSH
9046: LD_VAR 0 2
9050: PPUSH
9051: LD_VAR 0 3
9055: PPUSH
9056: LD_VAR 0 4
9060: PPUSH
9061: LD_VAR 0 5
9065: PPUSH
9066: CALL_OW 448
9070: IFFALSE 9105
// begin result := [ chassis , engine , control , weapon ] ;
9072: LD_ADDR_VAR 0 6
9076: PUSH
9077: LD_VAR 0 2
9081: PUSH
9082: LD_VAR 0 3
9086: PUSH
9087: LD_VAR 0 4
9091: PUSH
9092: LD_VAR 0 5
9096: PUSH
9097: EMPTY
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: ST_TO_ADDR
// exit ;
9103: GO 9517
// end ; _chassis := AvailableChassisList ( factory ) ;
9105: LD_ADDR_VAR 0 9
9109: PUSH
9110: LD_VAR 0 1
9114: PPUSH
9115: CALL_OW 475
9119: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9120: LD_ADDR_VAR 0 11
9124: PUSH
9125: LD_VAR 0 1
9129: PPUSH
9130: CALL_OW 476
9134: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9135: LD_ADDR_VAR 0 12
9139: PUSH
9140: LD_VAR 0 1
9144: PPUSH
9145: CALL_OW 477
9149: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9150: LD_ADDR_VAR 0 10
9154: PUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 478
9164: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9165: LD_VAR 0 9
9169: NOT
9170: PUSH
9171: LD_VAR 0 11
9175: NOT
9176: OR
9177: PUSH
9178: LD_VAR 0 12
9182: NOT
9183: OR
9184: PUSH
9185: LD_VAR 0 10
9189: NOT
9190: OR
9191: IFFALSE 9226
// begin result := [ chassis , engine , control , weapon ] ;
9193: LD_ADDR_VAR 0 6
9197: PUSH
9198: LD_VAR 0 2
9202: PUSH
9203: LD_VAR 0 3
9207: PUSH
9208: LD_VAR 0 4
9212: PUSH
9213: LD_VAR 0 5
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: ST_TO_ADDR
// exit ;
9224: GO 9517
// end ; if not chassis in _chassis then
9226: LD_VAR 0 2
9230: PUSH
9231: LD_VAR 0 9
9235: IN
9236: NOT
9237: IFFALSE 9263
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9239: LD_ADDR_VAR 0 2
9243: PUSH
9244: LD_VAR 0 9
9248: PUSH
9249: LD_INT 1
9251: PPUSH
9252: LD_VAR 0 9
9256: PPUSH
9257: CALL_OW 12
9261: ARRAY
9262: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9263: LD_VAR 0 2
9267: PPUSH
9268: LD_VAR 0 3
9272: PPUSH
9273: CALL 9522 0 2
9277: NOT
9278: IFFALSE 9337
// repeat engine := _engine [ 1 ] ;
9280: LD_ADDR_VAR 0 3
9284: PUSH
9285: LD_VAR 0 11
9289: PUSH
9290: LD_INT 1
9292: ARRAY
9293: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9294: LD_ADDR_VAR 0 11
9298: PUSH
9299: LD_VAR 0 11
9303: PPUSH
9304: LD_INT 1
9306: PPUSH
9307: CALL_OW 3
9311: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9312: LD_VAR 0 2
9316: PPUSH
9317: LD_VAR 0 3
9321: PPUSH
9322: CALL 9522 0 2
9326: PUSH
9327: LD_VAR 0 11
9331: PUSH
9332: EMPTY
9333: EQUAL
9334: OR
9335: IFFALSE 9280
// if not control in _control then
9337: LD_VAR 0 4
9341: PUSH
9342: LD_VAR 0 12
9346: IN
9347: NOT
9348: IFFALSE 9374
// control := _control [ rand ( 1 , _control ) ] ;
9350: LD_ADDR_VAR 0 4
9354: PUSH
9355: LD_VAR 0 12
9359: PUSH
9360: LD_INT 1
9362: PPUSH
9363: LD_VAR 0 12
9367: PPUSH
9368: CALL_OW 12
9372: ARRAY
9373: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9374: LD_VAR 0 2
9378: PPUSH
9379: LD_VAR 0 5
9383: PPUSH
9384: CALL 9742 0 2
9388: NOT
9389: IFFALSE 9448
// repeat weapon := _weapon [ 1 ] ;
9391: LD_ADDR_VAR 0 5
9395: PUSH
9396: LD_VAR 0 10
9400: PUSH
9401: LD_INT 1
9403: ARRAY
9404: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9405: LD_ADDR_VAR 0 10
9409: PUSH
9410: LD_VAR 0 10
9414: PPUSH
9415: LD_INT 1
9417: PPUSH
9418: CALL_OW 3
9422: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9423: LD_VAR 0 2
9427: PPUSH
9428: LD_VAR 0 5
9432: PPUSH
9433: CALL 9742 0 2
9437: PUSH
9438: LD_VAR 0 10
9442: PUSH
9443: EMPTY
9444: EQUAL
9445: OR
9446: IFFALSE 9391
// result := [ ] ;
9448: LD_ADDR_VAR 0 6
9452: PUSH
9453: EMPTY
9454: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9455: LD_VAR 0 1
9459: PPUSH
9460: LD_VAR 0 2
9464: PPUSH
9465: LD_VAR 0 3
9469: PPUSH
9470: LD_VAR 0 4
9474: PPUSH
9475: LD_VAR 0 5
9479: PPUSH
9480: CALL_OW 448
9484: IFFALSE 9517
// result := [ chassis , engine , control , weapon ] ;
9486: LD_ADDR_VAR 0 6
9490: PUSH
9491: LD_VAR 0 2
9495: PUSH
9496: LD_VAR 0 3
9500: PUSH
9501: LD_VAR 0 4
9505: PUSH
9506: LD_VAR 0 5
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: ST_TO_ADDR
// end ;
9517: LD_VAR 0 6
9521: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9522: LD_INT 0
9524: PPUSH
// if not chassis or not engine then
9525: LD_VAR 0 1
9529: NOT
9530: PUSH
9531: LD_VAR 0 2
9535: NOT
9536: OR
9537: IFFALSE 9541
// exit ;
9539: GO 9737
// case engine of engine_solar :
9541: LD_VAR 0 2
9545: PUSH
9546: LD_INT 2
9548: DOUBLE
9549: EQUAL
9550: IFTRUE 9554
9552: GO 9592
9554: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9555: LD_ADDR_VAR 0 3
9559: PUSH
9560: LD_INT 11
9562: PUSH
9563: LD_INT 12
9565: PUSH
9566: LD_INT 13
9568: PUSH
9569: LD_INT 14
9571: PUSH
9572: LD_INT 1
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 3
9580: PUSH
9581: EMPTY
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: ST_TO_ADDR
9590: GO 9721
9592: LD_INT 1
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9662
9600: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: LD_INT 11
9608: PUSH
9609: LD_INT 12
9611: PUSH
9612: LD_INT 13
9614: PUSH
9615: LD_INT 14
9617: PUSH
9618: LD_INT 1
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: LD_INT 3
9626: PUSH
9627: LD_INT 4
9629: PUSH
9630: LD_INT 5
9632: PUSH
9633: LD_INT 21
9635: PUSH
9636: LD_INT 23
9638: PUSH
9639: LD_INT 22
9641: PUSH
9642: LD_INT 24
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: ST_TO_ADDR
9660: GO 9721
9662: LD_INT 3
9664: DOUBLE
9665: EQUAL
9666: IFTRUE 9670
9668: GO 9720
9670: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9671: LD_ADDR_VAR 0 3
9675: PUSH
9676: LD_INT 13
9678: PUSH
9679: LD_INT 14
9681: PUSH
9682: LD_INT 2
9684: PUSH
9685: LD_INT 3
9687: PUSH
9688: LD_INT 4
9690: PUSH
9691: LD_INT 5
9693: PUSH
9694: LD_INT 21
9696: PUSH
9697: LD_INT 22
9699: PUSH
9700: LD_INT 23
9702: PUSH
9703: LD_INT 24
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: ST_TO_ADDR
9718: GO 9721
9720: POP
// result := ( chassis in result ) ;
9721: LD_ADDR_VAR 0 3
9725: PUSH
9726: LD_VAR 0 1
9730: PUSH
9731: LD_VAR 0 3
9735: IN
9736: ST_TO_ADDR
// end ;
9737: LD_VAR 0 3
9741: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9742: LD_INT 0
9744: PPUSH
// if not chassis or not weapon then
9745: LD_VAR 0 1
9749: NOT
9750: PUSH
9751: LD_VAR 0 2
9755: NOT
9756: OR
9757: IFFALSE 9761
// exit ;
9759: GO 10821
// case weapon of us_machine_gun :
9761: LD_VAR 0 2
9765: PUSH
9766: LD_INT 2
9768: DOUBLE
9769: EQUAL
9770: IFTRUE 9774
9772: GO 9804
9774: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9775: LD_ADDR_VAR 0 3
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: LD_INT 2
9785: PUSH
9786: LD_INT 3
9788: PUSH
9789: LD_INT 4
9791: PUSH
9792: LD_INT 5
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: ST_TO_ADDR
9802: GO 10805
9804: LD_INT 3
9806: DOUBLE
9807: EQUAL
9808: IFTRUE 9812
9810: GO 9842
9812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9813: LD_ADDR_VAR 0 3
9817: PUSH
9818: LD_INT 1
9820: PUSH
9821: LD_INT 2
9823: PUSH
9824: LD_INT 3
9826: PUSH
9827: LD_INT 4
9829: PUSH
9830: LD_INT 5
9832: PUSH
9833: EMPTY
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: ST_TO_ADDR
9840: GO 10805
9842: LD_INT 11
9844: DOUBLE
9845: EQUAL
9846: IFTRUE 9850
9848: GO 9880
9850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9851: LD_ADDR_VAR 0 3
9855: PUSH
9856: LD_INT 1
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 3
9864: PUSH
9865: LD_INT 4
9867: PUSH
9868: LD_INT 5
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: ST_TO_ADDR
9878: GO 10805
9880: LD_INT 4
9882: DOUBLE
9883: EQUAL
9884: IFTRUE 9888
9886: GO 9914
9888: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9889: LD_ADDR_VAR 0 3
9893: PUSH
9894: LD_INT 2
9896: PUSH
9897: LD_INT 3
9899: PUSH
9900: LD_INT 4
9902: PUSH
9903: LD_INT 5
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: ST_TO_ADDR
9912: GO 10805
9914: LD_INT 5
9916: DOUBLE
9917: EQUAL
9918: IFTRUE 9922
9920: GO 9948
9922: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9923: LD_ADDR_VAR 0 3
9927: PUSH
9928: LD_INT 2
9930: PUSH
9931: LD_INT 3
9933: PUSH
9934: LD_INT 4
9936: PUSH
9937: LD_INT 5
9939: PUSH
9940: EMPTY
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: ST_TO_ADDR
9946: GO 10805
9948: LD_INT 9
9950: DOUBLE
9951: EQUAL
9952: IFTRUE 9956
9954: GO 9982
9956: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9957: LD_ADDR_VAR 0 3
9961: PUSH
9962: LD_INT 2
9964: PUSH
9965: LD_INT 3
9967: PUSH
9968: LD_INT 4
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: ST_TO_ADDR
9980: GO 10805
9982: LD_INT 7
9984: DOUBLE
9985: EQUAL
9986: IFTRUE 9990
9988: GO 10016
9990: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9991: LD_ADDR_VAR 0 3
9995: PUSH
9996: LD_INT 2
9998: PUSH
9999: LD_INT 3
10001: PUSH
10002: LD_INT 4
10004: PUSH
10005: LD_INT 5
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: ST_TO_ADDR
10014: GO 10805
10016: LD_INT 12
10018: DOUBLE
10019: EQUAL
10020: IFTRUE 10024
10022: GO 10050
10024: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10025: LD_ADDR_VAR 0 3
10029: PUSH
10030: LD_INT 2
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 4
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: ST_TO_ADDR
10048: GO 10805
10050: LD_INT 13
10052: DOUBLE
10053: EQUAL
10054: IFTRUE 10058
10056: GO 10084
10058: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10059: LD_ADDR_VAR 0 3
10063: PUSH
10064: LD_INT 2
10066: PUSH
10067: LD_INT 3
10069: PUSH
10070: LD_INT 4
10072: PUSH
10073: LD_INT 5
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
10082: GO 10805
10084: LD_INT 14
10086: DOUBLE
10087: EQUAL
10088: IFTRUE 10092
10090: GO 10110
10092: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10093: LD_ADDR_VAR 0 3
10097: PUSH
10098: LD_INT 4
10100: PUSH
10101: LD_INT 5
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: ST_TO_ADDR
10108: GO 10805
10110: LD_INT 6
10112: DOUBLE
10113: EQUAL
10114: IFTRUE 10118
10116: GO 10136
10118: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10119: LD_ADDR_VAR 0 3
10123: PUSH
10124: LD_INT 4
10126: PUSH
10127: LD_INT 5
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: ST_TO_ADDR
10134: GO 10805
10136: LD_INT 10
10138: DOUBLE
10139: EQUAL
10140: IFTRUE 10144
10142: GO 10162
10144: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10145: LD_ADDR_VAR 0 3
10149: PUSH
10150: LD_INT 4
10152: PUSH
10153: LD_INT 5
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: ST_TO_ADDR
10160: GO 10805
10162: LD_INT 22
10164: DOUBLE
10165: EQUAL
10166: IFTRUE 10170
10168: GO 10196
10170: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: LD_INT 11
10178: PUSH
10179: LD_INT 12
10181: PUSH
10182: LD_INT 13
10184: PUSH
10185: LD_INT 14
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: ST_TO_ADDR
10194: GO 10805
10196: LD_INT 23
10198: DOUBLE
10199: EQUAL
10200: IFTRUE 10204
10202: GO 10230
10204: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10205: LD_ADDR_VAR 0 3
10209: PUSH
10210: LD_INT 11
10212: PUSH
10213: LD_INT 12
10215: PUSH
10216: LD_INT 13
10218: PUSH
10219: LD_INT 14
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: ST_TO_ADDR
10228: GO 10805
10230: LD_INT 24
10232: DOUBLE
10233: EQUAL
10234: IFTRUE 10238
10236: GO 10264
10238: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10239: LD_ADDR_VAR 0 3
10243: PUSH
10244: LD_INT 11
10246: PUSH
10247: LD_INT 12
10249: PUSH
10250: LD_INT 13
10252: PUSH
10253: LD_INT 14
10255: PUSH
10256: EMPTY
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: ST_TO_ADDR
10262: GO 10805
10264: LD_INT 30
10266: DOUBLE
10267: EQUAL
10268: IFTRUE 10272
10270: GO 10298
10272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10273: LD_ADDR_VAR 0 3
10277: PUSH
10278: LD_INT 11
10280: PUSH
10281: LD_INT 12
10283: PUSH
10284: LD_INT 13
10286: PUSH
10287: LD_INT 14
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: ST_TO_ADDR
10296: GO 10805
10298: LD_INT 25
10300: DOUBLE
10301: EQUAL
10302: IFTRUE 10306
10304: GO 10324
10306: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10307: LD_ADDR_VAR 0 3
10311: PUSH
10312: LD_INT 13
10314: PUSH
10315: LD_INT 14
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: ST_TO_ADDR
10322: GO 10805
10324: LD_INT 27
10326: DOUBLE
10327: EQUAL
10328: IFTRUE 10332
10330: GO 10350
10332: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10333: LD_ADDR_VAR 0 3
10337: PUSH
10338: LD_INT 13
10340: PUSH
10341: LD_INT 14
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: ST_TO_ADDR
10348: GO 10805
10350: LD_INT 92
10352: DOUBLE
10353: EQUAL
10354: IFTRUE 10358
10356: GO 10384
10358: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10359: LD_ADDR_VAR 0 3
10363: PUSH
10364: LD_INT 11
10366: PUSH
10367: LD_INT 12
10369: PUSH
10370: LD_INT 13
10372: PUSH
10373: LD_INT 14
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: ST_TO_ADDR
10382: GO 10805
10384: LD_INT 28
10386: DOUBLE
10387: EQUAL
10388: IFTRUE 10392
10390: GO 10410
10392: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10393: LD_ADDR_VAR 0 3
10397: PUSH
10398: LD_INT 13
10400: PUSH
10401: LD_INT 14
10403: PUSH
10404: EMPTY
10405: LIST
10406: LIST
10407: ST_TO_ADDR
10408: GO 10805
10410: LD_INT 29
10412: DOUBLE
10413: EQUAL
10414: IFTRUE 10418
10416: GO 10436
10418: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10419: LD_ADDR_VAR 0 3
10423: PUSH
10424: LD_INT 13
10426: PUSH
10427: LD_INT 14
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: ST_TO_ADDR
10434: GO 10805
10436: LD_INT 31
10438: DOUBLE
10439: EQUAL
10440: IFTRUE 10444
10442: GO 10462
10444: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10445: LD_ADDR_VAR 0 3
10449: PUSH
10450: LD_INT 13
10452: PUSH
10453: LD_INT 14
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: ST_TO_ADDR
10460: GO 10805
10462: LD_INT 26
10464: DOUBLE
10465: EQUAL
10466: IFTRUE 10470
10468: GO 10488
10470: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10471: LD_ADDR_VAR 0 3
10475: PUSH
10476: LD_INT 13
10478: PUSH
10479: LD_INT 14
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: ST_TO_ADDR
10486: GO 10805
10488: LD_INT 42
10490: DOUBLE
10491: EQUAL
10492: IFTRUE 10496
10494: GO 10522
10496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10497: LD_ADDR_VAR 0 3
10501: PUSH
10502: LD_INT 21
10504: PUSH
10505: LD_INT 22
10507: PUSH
10508: LD_INT 23
10510: PUSH
10511: LD_INT 24
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: ST_TO_ADDR
10520: GO 10805
10522: LD_INT 43
10524: DOUBLE
10525: EQUAL
10526: IFTRUE 10530
10528: GO 10556
10530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10531: LD_ADDR_VAR 0 3
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 23
10544: PUSH
10545: LD_INT 24
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: ST_TO_ADDR
10554: GO 10805
10556: LD_INT 44
10558: DOUBLE
10559: EQUAL
10560: IFTRUE 10564
10562: GO 10590
10564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10565: LD_ADDR_VAR 0 3
10569: PUSH
10570: LD_INT 21
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_INT 23
10578: PUSH
10579: LD_INT 24
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: ST_TO_ADDR
10588: GO 10805
10590: LD_INT 45
10592: DOUBLE
10593: EQUAL
10594: IFTRUE 10598
10596: GO 10624
10598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10599: LD_ADDR_VAR 0 3
10603: PUSH
10604: LD_INT 21
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_INT 23
10612: PUSH
10613: LD_INT 24
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: ST_TO_ADDR
10622: GO 10805
10624: LD_INT 49
10626: DOUBLE
10627: EQUAL
10628: IFTRUE 10632
10630: GO 10658
10632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10633: LD_ADDR_VAR 0 3
10637: PUSH
10638: LD_INT 21
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: LD_INT 23
10646: PUSH
10647: LD_INT 24
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: ST_TO_ADDR
10656: GO 10805
10658: LD_INT 51
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10692
10666: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10667: LD_ADDR_VAR 0 3
10671: PUSH
10672: LD_INT 21
10674: PUSH
10675: LD_INT 22
10677: PUSH
10678: LD_INT 23
10680: PUSH
10681: LD_INT 24
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: ST_TO_ADDR
10690: GO 10805
10692: LD_INT 52
10694: DOUBLE
10695: EQUAL
10696: IFTRUE 10700
10698: GO 10726
10700: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10701: LD_ADDR_VAR 0 3
10705: PUSH
10706: LD_INT 21
10708: PUSH
10709: LD_INT 22
10711: PUSH
10712: LD_INT 23
10714: PUSH
10715: LD_INT 24
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: ST_TO_ADDR
10724: GO 10805
10726: LD_INT 53
10728: DOUBLE
10729: EQUAL
10730: IFTRUE 10734
10732: GO 10752
10734: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10735: LD_ADDR_VAR 0 3
10739: PUSH
10740: LD_INT 23
10742: PUSH
10743: LD_INT 24
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: ST_TO_ADDR
10750: GO 10805
10752: LD_INT 46
10754: DOUBLE
10755: EQUAL
10756: IFTRUE 10760
10758: GO 10778
10760: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10761: LD_ADDR_VAR 0 3
10765: PUSH
10766: LD_INT 23
10768: PUSH
10769: LD_INT 24
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: ST_TO_ADDR
10776: GO 10805
10778: LD_INT 47
10780: DOUBLE
10781: EQUAL
10782: IFTRUE 10786
10784: GO 10804
10786: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10787: LD_ADDR_VAR 0 3
10791: PUSH
10792: LD_INT 23
10794: PUSH
10795: LD_INT 24
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: ST_TO_ADDR
10802: GO 10805
10804: POP
// result := ( chassis in result ) ;
10805: LD_ADDR_VAR 0 3
10809: PUSH
10810: LD_VAR 0 1
10814: PUSH
10815: LD_VAR 0 3
10819: IN
10820: ST_TO_ADDR
// end ;
10821: LD_VAR 0 3
10825: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10826: LD_INT 0
10828: PPUSH
10829: PPUSH
10830: PPUSH
10831: PPUSH
10832: PPUSH
10833: PPUSH
10834: PPUSH
// result := array ;
10835: LD_ADDR_VAR 0 5
10839: PUSH
10840: LD_VAR 0 1
10844: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10845: LD_VAR 0 1
10849: NOT
10850: PUSH
10851: LD_VAR 0 2
10855: NOT
10856: OR
10857: PUSH
10858: LD_VAR 0 3
10862: NOT
10863: OR
10864: PUSH
10865: LD_VAR 0 2
10869: PUSH
10870: LD_VAR 0 1
10874: GREATER
10875: OR
10876: PUSH
10877: LD_VAR 0 3
10881: PUSH
10882: LD_VAR 0 1
10886: GREATER
10887: OR
10888: IFFALSE 10892
// exit ;
10890: GO 11188
// if direction then
10892: LD_VAR 0 4
10896: IFFALSE 10960
// begin d := 1 ;
10898: LD_ADDR_VAR 0 9
10902: PUSH
10903: LD_INT 1
10905: ST_TO_ADDR
// if i_from > i_to then
10906: LD_VAR 0 2
10910: PUSH
10911: LD_VAR 0 3
10915: GREATER
10916: IFFALSE 10942
// length := ( array - i_from ) + i_to else
10918: LD_ADDR_VAR 0 11
10922: PUSH
10923: LD_VAR 0 1
10927: PUSH
10928: LD_VAR 0 2
10932: MINUS
10933: PUSH
10934: LD_VAR 0 3
10938: PLUS
10939: ST_TO_ADDR
10940: GO 10958
// length := i_to - i_from ;
10942: LD_ADDR_VAR 0 11
10946: PUSH
10947: LD_VAR 0 3
10951: PUSH
10952: LD_VAR 0 2
10956: MINUS
10957: ST_TO_ADDR
// end else
10958: GO 11021
// begin d := - 1 ;
10960: LD_ADDR_VAR 0 9
10964: PUSH
10965: LD_INT 1
10967: NEG
10968: ST_TO_ADDR
// if i_from > i_to then
10969: LD_VAR 0 2
10973: PUSH
10974: LD_VAR 0 3
10978: GREATER
10979: IFFALSE 10999
// length := i_from - i_to else
10981: LD_ADDR_VAR 0 11
10985: PUSH
10986: LD_VAR 0 2
10990: PUSH
10991: LD_VAR 0 3
10995: MINUS
10996: ST_TO_ADDR
10997: GO 11021
// length := ( array - i_to ) + i_from ;
10999: LD_ADDR_VAR 0 11
11003: PUSH
11004: LD_VAR 0 1
11008: PUSH
11009: LD_VAR 0 3
11013: MINUS
11014: PUSH
11015: LD_VAR 0 2
11019: PLUS
11020: ST_TO_ADDR
// end ; if not length then
11021: LD_VAR 0 11
11025: NOT
11026: IFFALSE 11030
// exit ;
11028: GO 11188
// tmp := array ;
11030: LD_ADDR_VAR 0 10
11034: PUSH
11035: LD_VAR 0 1
11039: ST_TO_ADDR
// for i = 1 to length do
11040: LD_ADDR_VAR 0 6
11044: PUSH
11045: DOUBLE
11046: LD_INT 1
11048: DEC
11049: ST_TO_ADDR
11050: LD_VAR 0 11
11054: PUSH
11055: FOR_TO
11056: IFFALSE 11176
// begin for j = 1 to array do
11058: LD_ADDR_VAR 0 7
11062: PUSH
11063: DOUBLE
11064: LD_INT 1
11066: DEC
11067: ST_TO_ADDR
11068: LD_VAR 0 1
11072: PUSH
11073: FOR_TO
11074: IFFALSE 11162
// begin k := j + d ;
11076: LD_ADDR_VAR 0 8
11080: PUSH
11081: LD_VAR 0 7
11085: PUSH
11086: LD_VAR 0 9
11090: PLUS
11091: ST_TO_ADDR
// if k > array then
11092: LD_VAR 0 8
11096: PUSH
11097: LD_VAR 0 1
11101: GREATER
11102: IFFALSE 11112
// k := 1 ;
11104: LD_ADDR_VAR 0 8
11108: PUSH
11109: LD_INT 1
11111: ST_TO_ADDR
// if not k then
11112: LD_VAR 0 8
11116: NOT
11117: IFFALSE 11129
// k := array ;
11119: LD_ADDR_VAR 0 8
11123: PUSH
11124: LD_VAR 0 1
11128: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11129: LD_ADDR_VAR 0 10
11133: PUSH
11134: LD_VAR 0 10
11138: PPUSH
11139: LD_VAR 0 8
11143: PPUSH
11144: LD_VAR 0 1
11148: PUSH
11149: LD_VAR 0 7
11153: ARRAY
11154: PPUSH
11155: CALL_OW 1
11159: ST_TO_ADDR
// end ;
11160: GO 11073
11162: POP
11163: POP
// array := tmp ;
11164: LD_ADDR_VAR 0 1
11168: PUSH
11169: LD_VAR 0 10
11173: ST_TO_ADDR
// end ;
11174: GO 11055
11176: POP
11177: POP
// result := array ;
11178: LD_ADDR_VAR 0 5
11182: PUSH
11183: LD_VAR 0 1
11187: ST_TO_ADDR
// end ;
11188: LD_VAR 0 5
11192: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11193: LD_INT 0
11195: PPUSH
11196: PPUSH
// result := 0 ;
11197: LD_ADDR_VAR 0 3
11201: PUSH
11202: LD_INT 0
11204: ST_TO_ADDR
// if not array or not value in array then
11205: LD_VAR 0 1
11209: NOT
11210: PUSH
11211: LD_VAR 0 2
11215: PUSH
11216: LD_VAR 0 1
11220: IN
11221: NOT
11222: OR
11223: IFFALSE 11227
// exit ;
11225: GO 11281
// for i = 1 to array do
11227: LD_ADDR_VAR 0 4
11231: PUSH
11232: DOUBLE
11233: LD_INT 1
11235: DEC
11236: ST_TO_ADDR
11237: LD_VAR 0 1
11241: PUSH
11242: FOR_TO
11243: IFFALSE 11279
// if value = array [ i ] then
11245: LD_VAR 0 2
11249: PUSH
11250: LD_VAR 0 1
11254: PUSH
11255: LD_VAR 0 4
11259: ARRAY
11260: EQUAL
11261: IFFALSE 11277
// begin result := i ;
11263: LD_ADDR_VAR 0 3
11267: PUSH
11268: LD_VAR 0 4
11272: ST_TO_ADDR
// exit ;
11273: POP
11274: POP
11275: GO 11281
// end ;
11277: GO 11242
11279: POP
11280: POP
// end ;
11281: LD_VAR 0 3
11285: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11286: LD_INT 0
11288: PPUSH
// vc_chassis := chassis ;
11289: LD_ADDR_OWVAR 37
11293: PUSH
11294: LD_VAR 0 1
11298: ST_TO_ADDR
// vc_engine := engine ;
11299: LD_ADDR_OWVAR 39
11303: PUSH
11304: LD_VAR 0 2
11308: ST_TO_ADDR
// vc_control := control ;
11309: LD_ADDR_OWVAR 38
11313: PUSH
11314: LD_VAR 0 3
11318: ST_TO_ADDR
// vc_weapon := weapon ;
11319: LD_ADDR_OWVAR 40
11323: PUSH
11324: LD_VAR 0 4
11328: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11329: LD_ADDR_OWVAR 41
11333: PUSH
11334: LD_VAR 0 5
11338: ST_TO_ADDR
// end ;
11339: LD_VAR 0 6
11343: RET
// export function WantPlant ( unit ) ; var task ; begin
11344: LD_INT 0
11346: PPUSH
11347: PPUSH
// result := false ;
11348: LD_ADDR_VAR 0 2
11352: PUSH
11353: LD_INT 0
11355: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11356: LD_ADDR_VAR 0 3
11360: PUSH
11361: LD_VAR 0 1
11365: PPUSH
11366: CALL_OW 437
11370: ST_TO_ADDR
// if task then
11371: LD_VAR 0 3
11375: IFFALSE 11403
// if task [ 1 ] [ 1 ] = p then
11377: LD_VAR 0 3
11381: PUSH
11382: LD_INT 1
11384: ARRAY
11385: PUSH
11386: LD_INT 1
11388: ARRAY
11389: PUSH
11390: LD_STRING p
11392: EQUAL
11393: IFFALSE 11403
// result := true ;
11395: LD_ADDR_VAR 0 2
11399: PUSH
11400: LD_INT 1
11402: ST_TO_ADDR
// end ;
11403: LD_VAR 0 2
11407: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
11412: PPUSH
11413: PPUSH
// if pos < 1 then
11414: LD_VAR 0 2
11418: PUSH
11419: LD_INT 1
11421: LESS
11422: IFFALSE 11426
// exit ;
11424: GO 11729
// if pos = 1 then
11426: LD_VAR 0 2
11430: PUSH
11431: LD_INT 1
11433: EQUAL
11434: IFFALSE 11467
// result := Replace ( arr , pos [ 1 ] , value ) else
11436: LD_ADDR_VAR 0 4
11440: PUSH
11441: LD_VAR 0 1
11445: PPUSH
11446: LD_VAR 0 2
11450: PUSH
11451: LD_INT 1
11453: ARRAY
11454: PPUSH
11455: LD_VAR 0 3
11459: PPUSH
11460: CALL_OW 1
11464: ST_TO_ADDR
11465: GO 11729
// begin tmp := arr ;
11467: LD_ADDR_VAR 0 6
11471: PUSH
11472: LD_VAR 0 1
11476: ST_TO_ADDR
// s_arr := [ tmp ] ;
11477: LD_ADDR_VAR 0 7
11481: PUSH
11482: LD_VAR 0 6
11486: PUSH
11487: EMPTY
11488: LIST
11489: ST_TO_ADDR
// for i = 1 to pos - 1 do
11490: LD_ADDR_VAR 0 5
11494: PUSH
11495: DOUBLE
11496: LD_INT 1
11498: DEC
11499: ST_TO_ADDR
11500: LD_VAR 0 2
11504: PUSH
11505: LD_INT 1
11507: MINUS
11508: PUSH
11509: FOR_TO
11510: IFFALSE 11555
// begin tmp := tmp [ pos [ i ] ] ;
11512: LD_ADDR_VAR 0 6
11516: PUSH
11517: LD_VAR 0 6
11521: PUSH
11522: LD_VAR 0 2
11526: PUSH
11527: LD_VAR 0 5
11531: ARRAY
11532: ARRAY
11533: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11534: LD_ADDR_VAR 0 7
11538: PUSH
11539: LD_VAR 0 7
11543: PUSH
11544: LD_VAR 0 6
11548: PUSH
11549: EMPTY
11550: LIST
11551: ADD
11552: ST_TO_ADDR
// end ;
11553: GO 11509
11555: POP
11556: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11557: LD_ADDR_VAR 0 6
11561: PUSH
11562: LD_VAR 0 6
11566: PPUSH
11567: LD_VAR 0 2
11571: PUSH
11572: LD_VAR 0 2
11576: ARRAY
11577: PPUSH
11578: LD_VAR 0 3
11582: PPUSH
11583: CALL_OW 1
11587: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11588: LD_ADDR_VAR 0 7
11592: PUSH
11593: LD_VAR 0 7
11597: PPUSH
11598: LD_VAR 0 7
11602: PPUSH
11603: LD_VAR 0 6
11607: PPUSH
11608: CALL_OW 1
11612: ST_TO_ADDR
// for i = s_arr downto 2 do
11613: LD_ADDR_VAR 0 5
11617: PUSH
11618: DOUBLE
11619: LD_VAR 0 7
11623: INC
11624: ST_TO_ADDR
11625: LD_INT 2
11627: PUSH
11628: FOR_DOWNTO
11629: IFFALSE 11713
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: LD_VAR 0 7
11640: PUSH
11641: LD_VAR 0 5
11645: PUSH
11646: LD_INT 1
11648: MINUS
11649: ARRAY
11650: PPUSH
11651: LD_VAR 0 2
11655: PUSH
11656: LD_VAR 0 5
11660: PUSH
11661: LD_INT 1
11663: MINUS
11664: ARRAY
11665: PPUSH
11666: LD_VAR 0 7
11670: PUSH
11671: LD_VAR 0 5
11675: ARRAY
11676: PPUSH
11677: CALL_OW 1
11681: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11682: LD_ADDR_VAR 0 7
11686: PUSH
11687: LD_VAR 0 7
11691: PPUSH
11692: LD_VAR 0 5
11696: PUSH
11697: LD_INT 1
11699: MINUS
11700: PPUSH
11701: LD_VAR 0 6
11705: PPUSH
11706: CALL_OW 1
11710: ST_TO_ADDR
// end ;
11711: GO 11628
11713: POP
11714: POP
// result := s_arr [ 1 ] ;
11715: LD_ADDR_VAR 0 4
11719: PUSH
11720: LD_VAR 0 7
11724: PUSH
11725: LD_INT 1
11727: ARRAY
11728: ST_TO_ADDR
// end ; end ;
11729: LD_VAR 0 4
11733: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11734: LD_INT 0
11736: PPUSH
11737: PPUSH
// if not list then
11738: LD_VAR 0 1
11742: NOT
11743: IFFALSE 11747
// exit ;
11745: GO 11838
// i := list [ pos1 ] ;
11747: LD_ADDR_VAR 0 5
11751: PUSH
11752: LD_VAR 0 1
11756: PUSH
11757: LD_VAR 0 2
11761: ARRAY
11762: ST_TO_ADDR
// if not i then
11763: LD_VAR 0 5
11767: NOT
11768: IFFALSE 11772
// exit ;
11770: GO 11838
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11772: LD_ADDR_VAR 0 1
11776: PUSH
11777: LD_VAR 0 1
11781: PPUSH
11782: LD_VAR 0 2
11786: PPUSH
11787: LD_VAR 0 1
11791: PUSH
11792: LD_VAR 0 3
11796: ARRAY
11797: PPUSH
11798: CALL_OW 1
11802: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11803: LD_ADDR_VAR 0 1
11807: PUSH
11808: LD_VAR 0 1
11812: PPUSH
11813: LD_VAR 0 3
11817: PPUSH
11818: LD_VAR 0 5
11822: PPUSH
11823: CALL_OW 1
11827: ST_TO_ADDR
// result := list ;
11828: LD_ADDR_VAR 0 4
11832: PUSH
11833: LD_VAR 0 1
11837: ST_TO_ADDR
// end ;
11838: LD_VAR 0 4
11842: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11843: LD_INT 0
11845: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11846: LD_ADDR_VAR 0 5
11850: PUSH
11851: LD_VAR 0 1
11855: PPUSH
11856: CALL_OW 250
11860: PPUSH
11861: LD_VAR 0 1
11865: PPUSH
11866: CALL_OW 251
11870: PPUSH
11871: LD_VAR 0 2
11875: PPUSH
11876: LD_VAR 0 3
11880: PPUSH
11881: LD_VAR 0 4
11885: PPUSH
11886: CALL 12264 0 5
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 5
11895: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
11896: LD_INT 0
11898: PPUSH
11899: PPUSH
11900: PPUSH
11901: PPUSH
// if not list or not unit then
11902: LD_VAR 0 2
11906: NOT
11907: PUSH
11908: LD_VAR 0 1
11912: NOT
11913: OR
11914: IFFALSE 11918
// exit ;
11916: GO 12259
// result := [ ] ;
11918: LD_ADDR_VAR 0 5
11922: PUSH
11923: EMPTY
11924: ST_TO_ADDR
// for i in list do
11925: LD_ADDR_VAR 0 6
11929: PUSH
11930: LD_VAR 0 2
11934: PUSH
11935: FOR_IN
11936: IFFALSE 12154
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
11938: LD_ADDR_VAR 0 8
11942: PUSH
11943: LD_VAR 0 1
11947: PPUSH
11948: LD_VAR 0 6
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: LD_VAR 0 6
11961: PUSH
11962: LD_INT 2
11964: ARRAY
11965: PPUSH
11966: CALL_OW 297
11970: ST_TO_ADDR
// if not Count ( result ) then
11971: LD_VAR 0 5
11975: PPUSH
11976: CALL 8548 0 1
11980: NOT
11981: IFFALSE 12014
// begin result := Join ( result , [ i , tmp ] ) ;
11983: LD_ADDR_VAR 0 5
11987: PUSH
11988: LD_VAR 0 5
11992: PPUSH
11993: LD_VAR 0 6
11997: PUSH
11998: LD_VAR 0 8
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL 44157 0 2
12011: ST_TO_ADDR
// continue ;
12012: GO 11935
// end ; if result [ result ] [ 2 ] <= tmp then
12014: LD_VAR 0 5
12018: PUSH
12019: LD_VAR 0 5
12023: ARRAY
12024: PUSH
12025: LD_INT 2
12027: ARRAY
12028: PUSH
12029: LD_VAR 0 8
12033: LESSEQUAL
12034: IFFALSE 12067
// result := Join ( result , [ i , tmp ] ) else
12036: LD_ADDR_VAR 0 5
12040: PUSH
12041: LD_VAR 0 5
12045: PPUSH
12046: LD_VAR 0 6
12050: PUSH
12051: LD_VAR 0 8
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PPUSH
12060: CALL 44157 0 2
12064: ST_TO_ADDR
12065: GO 12152
// begin for j := 1 to Count ( result ) do
12067: LD_ADDR_VAR 0 7
12071: PUSH
12072: DOUBLE
12073: LD_INT 1
12075: DEC
12076: ST_TO_ADDR
12077: LD_VAR 0 5
12081: PPUSH
12082: CALL 8548 0 1
12086: PUSH
12087: FOR_TO
12088: IFFALSE 12150
// begin if tmp < result [ j ] [ 2 ] then
12090: LD_VAR 0 8
12094: PUSH
12095: LD_VAR 0 5
12099: PUSH
12100: LD_VAR 0 7
12104: ARRAY
12105: PUSH
12106: LD_INT 2
12108: ARRAY
12109: LESS
12110: IFFALSE 12148
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12112: LD_ADDR_VAR 0 5
12116: PUSH
12117: LD_VAR 0 5
12121: PPUSH
12122: LD_VAR 0 7
12126: PPUSH
12127: LD_VAR 0 6
12131: PUSH
12132: LD_VAR 0 8
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 2
12145: ST_TO_ADDR
// break ;
12146: GO 12150
// end ; end ;
12148: GO 12087
12150: POP
12151: POP
// end ; end ;
12152: GO 11935
12154: POP
12155: POP
// if result and not asc then
12156: LD_VAR 0 5
12160: PUSH
12161: LD_VAR 0 3
12165: NOT
12166: AND
12167: IFFALSE 12184
// result := ReverseArray ( result ) ;
12169: LD_ADDR_VAR 0 5
12173: PUSH
12174: LD_VAR 0 5
12178: PPUSH
12179: CALL 39424 0 1
12183: ST_TO_ADDR
// tmp := [ ] ;
12184: LD_ADDR_VAR 0 8
12188: PUSH
12189: EMPTY
12190: ST_TO_ADDR
// if mode then
12191: LD_VAR 0 4
12195: IFFALSE 12259
// begin for i := 1 to result do
12197: LD_ADDR_VAR 0 6
12201: PUSH
12202: DOUBLE
12203: LD_INT 1
12205: DEC
12206: ST_TO_ADDR
12207: LD_VAR 0 5
12211: PUSH
12212: FOR_TO
12213: IFFALSE 12247
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
12215: LD_ADDR_VAR 0 8
12219: PUSH
12220: LD_VAR 0 8
12224: PPUSH
12225: LD_VAR 0 5
12229: PUSH
12230: LD_VAR 0 6
12234: ARRAY
12235: PUSH
12236: LD_INT 1
12238: ARRAY
12239: PPUSH
12240: CALL 44157 0 2
12244: ST_TO_ADDR
12245: GO 12212
12247: POP
12248: POP
// result := tmp ;
12249: LD_ADDR_VAR 0 5
12253: PUSH
12254: LD_VAR 0 8
12258: ST_TO_ADDR
// end ; end ;
12259: LD_VAR 0 5
12263: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12264: LD_INT 0
12266: PPUSH
12267: PPUSH
12268: PPUSH
12269: PPUSH
// if not list then
12270: LD_VAR 0 3
12274: NOT
12275: IFFALSE 12279
// exit ;
12277: GO 12667
// result := [ ] ;
12279: LD_ADDR_VAR 0 6
12283: PUSH
12284: EMPTY
12285: ST_TO_ADDR
// for i in list do
12286: LD_ADDR_VAR 0 7
12290: PUSH
12291: LD_VAR 0 3
12295: PUSH
12296: FOR_IN
12297: IFFALSE 12499
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12299: LD_ADDR_VAR 0 9
12303: PUSH
12304: LD_VAR 0 7
12308: PPUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: LD_VAR 0 2
12318: PPUSH
12319: CALL_OW 297
12323: ST_TO_ADDR
// if not result then
12324: LD_VAR 0 6
12328: NOT
12329: IFFALSE 12355
// result := [ [ i , tmp ] ] else
12331: LD_ADDR_VAR 0 6
12335: PUSH
12336: LD_VAR 0 7
12340: PUSH
12341: LD_VAR 0 9
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PUSH
12350: EMPTY
12351: LIST
12352: ST_TO_ADDR
12353: GO 12497
// begin if result [ result ] [ 2 ] <= tmp then
12355: LD_VAR 0 6
12359: PUSH
12360: LD_VAR 0 6
12364: ARRAY
12365: PUSH
12366: LD_INT 2
12368: ARRAY
12369: PUSH
12370: LD_VAR 0 9
12374: LESSEQUAL
12375: IFFALSE 12417
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12377: LD_ADDR_VAR 0 6
12381: PUSH
12382: LD_VAR 0 6
12386: PPUSH
12387: LD_VAR 0 6
12391: PUSH
12392: LD_INT 1
12394: PLUS
12395: PPUSH
12396: LD_VAR 0 7
12400: PUSH
12401: LD_VAR 0 9
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PPUSH
12410: CALL_OW 2
12414: ST_TO_ADDR
12415: GO 12497
// for j := 1 to result do
12417: LD_ADDR_VAR 0 8
12421: PUSH
12422: DOUBLE
12423: LD_INT 1
12425: DEC
12426: ST_TO_ADDR
12427: LD_VAR 0 6
12431: PUSH
12432: FOR_TO
12433: IFFALSE 12495
// begin if tmp < result [ j ] [ 2 ] then
12435: LD_VAR 0 9
12439: PUSH
12440: LD_VAR 0 6
12444: PUSH
12445: LD_VAR 0 8
12449: ARRAY
12450: PUSH
12451: LD_INT 2
12453: ARRAY
12454: LESS
12455: IFFALSE 12493
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12457: LD_ADDR_VAR 0 6
12461: PUSH
12462: LD_VAR 0 6
12466: PPUSH
12467: LD_VAR 0 8
12471: PPUSH
12472: LD_VAR 0 7
12476: PUSH
12477: LD_VAR 0 9
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 2
12490: ST_TO_ADDR
// break ;
12491: GO 12495
// end ; end ;
12493: GO 12432
12495: POP
12496: POP
// end ; end ;
12497: GO 12296
12499: POP
12500: POP
// if result and not asc then
12501: LD_VAR 0 6
12505: PUSH
12506: LD_VAR 0 4
12510: NOT
12511: AND
12512: IFFALSE 12587
// begin tmp := result ;
12514: LD_ADDR_VAR 0 9
12518: PUSH
12519: LD_VAR 0 6
12523: ST_TO_ADDR
// for i = tmp downto 1 do
12524: LD_ADDR_VAR 0 7
12528: PUSH
12529: DOUBLE
12530: LD_VAR 0 9
12534: INC
12535: ST_TO_ADDR
12536: LD_INT 1
12538: PUSH
12539: FOR_DOWNTO
12540: IFFALSE 12585
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12542: LD_ADDR_VAR 0 6
12546: PUSH
12547: LD_VAR 0 6
12551: PPUSH
12552: LD_VAR 0 9
12556: PUSH
12557: LD_VAR 0 7
12561: MINUS
12562: PUSH
12563: LD_INT 1
12565: PLUS
12566: PPUSH
12567: LD_VAR 0 9
12571: PUSH
12572: LD_VAR 0 7
12576: ARRAY
12577: PPUSH
12578: CALL_OW 1
12582: ST_TO_ADDR
12583: GO 12539
12585: POP
12586: POP
// end ; tmp := [ ] ;
12587: LD_ADDR_VAR 0 9
12591: PUSH
12592: EMPTY
12593: ST_TO_ADDR
// if mode then
12594: LD_VAR 0 5
12598: IFFALSE 12667
// begin for i = 1 to result do
12600: LD_ADDR_VAR 0 7
12604: PUSH
12605: DOUBLE
12606: LD_INT 1
12608: DEC
12609: ST_TO_ADDR
12610: LD_VAR 0 6
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12655
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12618: LD_ADDR_VAR 0 9
12622: PUSH
12623: LD_VAR 0 9
12627: PPUSH
12628: LD_VAR 0 7
12632: PPUSH
12633: LD_VAR 0 6
12637: PUSH
12638: LD_VAR 0 7
12642: ARRAY
12643: PUSH
12644: LD_INT 1
12646: ARRAY
12647: PPUSH
12648: CALL_OW 1
12652: ST_TO_ADDR
12653: GO 12615
12655: POP
12656: POP
// result := tmp ;
12657: LD_ADDR_VAR 0 6
12661: PUSH
12662: LD_VAR 0 9
12666: ST_TO_ADDR
// end ; end ;
12667: LD_VAR 0 6
12671: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12672: LD_INT 0
12674: PPUSH
12675: PPUSH
12676: PPUSH
12677: PPUSH
12678: PPUSH
12679: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12680: LD_ADDR_VAR 0 5
12684: PUSH
12685: LD_INT 0
12687: PUSH
12688: LD_INT 0
12690: PUSH
12691: LD_INT 0
12693: PUSH
12694: EMPTY
12695: PUSH
12696: EMPTY
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: ST_TO_ADDR
// if not x or not y then
12702: LD_VAR 0 2
12706: NOT
12707: PUSH
12708: LD_VAR 0 3
12712: NOT
12713: OR
12714: IFFALSE 12718
// exit ;
12716: GO 14368
// if not range then
12718: LD_VAR 0 4
12722: NOT
12723: IFFALSE 12733
// range := 10 ;
12725: LD_ADDR_VAR 0 4
12729: PUSH
12730: LD_INT 10
12732: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12733: LD_ADDR_VAR 0 8
12737: PUSH
12738: LD_INT 81
12740: PUSH
12741: LD_VAR 0 1
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 92
12752: PUSH
12753: LD_VAR 0 2
12757: PUSH
12758: LD_VAR 0 3
12762: PUSH
12763: LD_VAR 0 4
12767: PUSH
12768: EMPTY
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: PUSH
12774: LD_INT 3
12776: PUSH
12777: LD_INT 21
12779: PUSH
12780: LD_INT 3
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: PPUSH
12796: CALL_OW 69
12800: ST_TO_ADDR
// if not tmp then
12801: LD_VAR 0 8
12805: NOT
12806: IFFALSE 12810
// exit ;
12808: GO 14368
// for i in tmp do
12810: LD_ADDR_VAR 0 6
12814: PUSH
12815: LD_VAR 0 8
12819: PUSH
12820: FOR_IN
12821: IFFALSE 14343
// begin points := [ 0 , 0 , 0 ] ;
12823: LD_ADDR_VAR 0 9
12827: PUSH
12828: LD_INT 0
12830: PUSH
12831: LD_INT 0
12833: PUSH
12834: LD_INT 0
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: LIST
12841: ST_TO_ADDR
// bpoints := 1 ;
12842: LD_ADDR_VAR 0 10
12846: PUSH
12847: LD_INT 1
12849: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12850: LD_VAR 0 6
12854: PPUSH
12855: CALL_OW 247
12859: PUSH
12860: LD_INT 1
12862: DOUBLE
12863: EQUAL
12864: IFTRUE 12868
12866: GO 13446
12868: POP
// begin if GetClass ( i ) = 1 then
12869: LD_VAR 0 6
12873: PPUSH
12874: CALL_OW 257
12878: PUSH
12879: LD_INT 1
12881: EQUAL
12882: IFFALSE 12903
// points := [ 10 , 5 , 3 ] ;
12884: LD_ADDR_VAR 0 9
12888: PUSH
12889: LD_INT 10
12891: PUSH
12892: LD_INT 5
12894: PUSH
12895: LD_INT 3
12897: PUSH
12898: EMPTY
12899: LIST
12900: LIST
12901: LIST
12902: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12903: LD_VAR 0 6
12907: PPUSH
12908: CALL_OW 257
12912: PUSH
12913: LD_INT 2
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: LD_INT 4
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: IN
12927: IFFALSE 12948
// points := [ 3 , 2 , 1 ] ;
12929: LD_ADDR_VAR 0 9
12933: PUSH
12934: LD_INT 3
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12948: LD_VAR 0 6
12952: PPUSH
12953: CALL_OW 257
12957: PUSH
12958: LD_INT 5
12960: EQUAL
12961: IFFALSE 12982
// points := [ 130 , 5 , 2 ] ;
12963: LD_ADDR_VAR 0 9
12967: PUSH
12968: LD_INT 130
12970: PUSH
12971: LD_INT 5
12973: PUSH
12974: LD_INT 2
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12982: LD_VAR 0 6
12986: PPUSH
12987: CALL_OW 257
12991: PUSH
12992: LD_INT 8
12994: EQUAL
12995: IFFALSE 13016
// points := [ 35 , 35 , 30 ] ;
12997: LD_ADDR_VAR 0 9
13001: PUSH
13002: LD_INT 35
13004: PUSH
13005: LD_INT 35
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: ST_TO_ADDR
// if GetClass ( i ) = 9 then
13016: LD_VAR 0 6
13020: PPUSH
13021: CALL_OW 257
13025: PUSH
13026: LD_INT 9
13028: EQUAL
13029: IFFALSE 13050
// points := [ 20 , 55 , 40 ] ;
13031: LD_ADDR_VAR 0 9
13035: PUSH
13036: LD_INT 20
13038: PUSH
13039: LD_INT 55
13041: PUSH
13042: LD_INT 40
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
13050: LD_VAR 0 6
13054: PPUSH
13055: CALL_OW 257
13059: PUSH
13060: LD_INT 12
13062: PUSH
13063: LD_INT 16
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: IN
13070: IFFALSE 13091
// points := [ 5 , 3 , 2 ] ;
13072: LD_ADDR_VAR 0 9
13076: PUSH
13077: LD_INT 5
13079: PUSH
13080: LD_INT 3
13082: PUSH
13083: LD_INT 2
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: LIST
13090: ST_TO_ADDR
// if GetClass ( i ) = 17 then
13091: LD_VAR 0 6
13095: PPUSH
13096: CALL_OW 257
13100: PUSH
13101: LD_INT 17
13103: EQUAL
13104: IFFALSE 13125
// points := [ 100 , 50 , 75 ] ;
13106: LD_ADDR_VAR 0 9
13110: PUSH
13111: LD_INT 100
13113: PUSH
13114: LD_INT 50
13116: PUSH
13117: LD_INT 75
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: LIST
13124: ST_TO_ADDR
// if GetClass ( i ) = 15 then
13125: LD_VAR 0 6
13129: PPUSH
13130: CALL_OW 257
13134: PUSH
13135: LD_INT 15
13137: EQUAL
13138: IFFALSE 13159
// points := [ 10 , 5 , 3 ] ;
13140: LD_ADDR_VAR 0 9
13144: PUSH
13145: LD_INT 10
13147: PUSH
13148: LD_INT 5
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: ST_TO_ADDR
// if GetClass ( i ) = 14 then
13159: LD_VAR 0 6
13163: PPUSH
13164: CALL_OW 257
13168: PUSH
13169: LD_INT 14
13171: EQUAL
13172: IFFALSE 13193
// points := [ 10 , 0 , 0 ] ;
13174: LD_ADDR_VAR 0 9
13178: PUSH
13179: LD_INT 10
13181: PUSH
13182: LD_INT 0
13184: PUSH
13185: LD_INT 0
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13193: LD_VAR 0 6
13197: PPUSH
13198: CALL_OW 257
13202: PUSH
13203: LD_INT 11
13205: EQUAL
13206: IFFALSE 13227
// points := [ 30 , 10 , 5 ] ;
13208: LD_ADDR_VAR 0 9
13212: PUSH
13213: LD_INT 30
13215: PUSH
13216: LD_INT 10
13218: PUSH
13219: LD_INT 5
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13227: LD_VAR 0 1
13231: PPUSH
13232: LD_INT 5
13234: PPUSH
13235: CALL_OW 321
13239: PUSH
13240: LD_INT 2
13242: EQUAL
13243: IFFALSE 13260
// bpoints := bpoints * 1.8 ;
13245: LD_ADDR_VAR 0 10
13249: PUSH
13250: LD_VAR 0 10
13254: PUSH
13255: LD_REAL  1.80000000000000E+0000
13258: MUL
13259: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13260: LD_VAR 0 6
13264: PPUSH
13265: CALL_OW 257
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: LD_INT 2
13275: PUSH
13276: LD_INT 3
13278: PUSH
13279: LD_INT 4
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: IN
13288: PUSH
13289: LD_VAR 0 1
13293: PPUSH
13294: LD_INT 51
13296: PPUSH
13297: CALL_OW 321
13301: PUSH
13302: LD_INT 2
13304: EQUAL
13305: AND
13306: IFFALSE 13323
// bpoints := bpoints * 1.2 ;
13308: LD_ADDR_VAR 0 10
13312: PUSH
13313: LD_VAR 0 10
13317: PUSH
13318: LD_REAL  1.20000000000000E+0000
13321: MUL
13322: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13323: LD_VAR 0 6
13327: PPUSH
13328: CALL_OW 257
13332: PUSH
13333: LD_INT 5
13335: PUSH
13336: LD_INT 7
13338: PUSH
13339: LD_INT 9
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: IN
13347: PUSH
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_INT 52
13355: PPUSH
13356: CALL_OW 321
13360: PUSH
13361: LD_INT 2
13363: EQUAL
13364: AND
13365: IFFALSE 13382
// bpoints := bpoints * 1.5 ;
13367: LD_ADDR_VAR 0 10
13371: PUSH
13372: LD_VAR 0 10
13376: PUSH
13377: LD_REAL  1.50000000000000E+0000
13380: MUL
13381: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13382: LD_VAR 0 1
13386: PPUSH
13387: LD_INT 66
13389: PPUSH
13390: CALL_OW 321
13394: PUSH
13395: LD_INT 2
13397: EQUAL
13398: IFFALSE 13415
// bpoints := bpoints * 1.1 ;
13400: LD_ADDR_VAR 0 10
13404: PUSH
13405: LD_VAR 0 10
13409: PUSH
13410: LD_REAL  1.10000000000000E+0000
13413: MUL
13414: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13415: LD_ADDR_VAR 0 10
13419: PUSH
13420: LD_VAR 0 10
13424: PUSH
13425: LD_VAR 0 6
13429: PPUSH
13430: LD_INT 1
13432: PPUSH
13433: CALL_OW 259
13437: PUSH
13438: LD_REAL  1.15000000000000E+0000
13441: MUL
13442: MUL
13443: ST_TO_ADDR
// end ; unit_vehicle :
13444: GO 14272
13446: LD_INT 2
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 14260
13454: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13455: LD_VAR 0 6
13459: PPUSH
13460: CALL_OW 264
13464: PUSH
13465: LD_INT 2
13467: PUSH
13468: LD_INT 42
13470: PUSH
13471: LD_INT 24
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: IN
13479: IFFALSE 13500
// points := [ 25 , 5 , 3 ] ;
13481: LD_ADDR_VAR 0 9
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 5
13491: PUSH
13492: LD_INT 3
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13500: LD_VAR 0 6
13504: PPUSH
13505: CALL_OW 264
13509: PUSH
13510: LD_INT 4
13512: PUSH
13513: LD_INT 43
13515: PUSH
13516: LD_INT 25
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: IN
13524: IFFALSE 13545
// points := [ 40 , 15 , 5 ] ;
13526: LD_ADDR_VAR 0 9
13530: PUSH
13531: LD_INT 40
13533: PUSH
13534: LD_INT 15
13536: PUSH
13537: LD_INT 5
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: LIST
13544: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13545: LD_VAR 0 6
13549: PPUSH
13550: CALL_OW 264
13554: PUSH
13555: LD_INT 3
13557: PUSH
13558: LD_INT 23
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: IN
13565: IFFALSE 13586
// points := [ 7 , 25 , 8 ] ;
13567: LD_ADDR_VAR 0 9
13571: PUSH
13572: LD_INT 7
13574: PUSH
13575: LD_INT 25
13577: PUSH
13578: LD_INT 8
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13586: LD_VAR 0 6
13590: PPUSH
13591: CALL_OW 264
13595: PUSH
13596: LD_INT 5
13598: PUSH
13599: LD_INT 27
13601: PUSH
13602: LD_INT 44
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: IN
13610: IFFALSE 13631
// points := [ 14 , 50 , 16 ] ;
13612: LD_ADDR_VAR 0 9
13616: PUSH
13617: LD_INT 14
13619: PUSH
13620: LD_INT 50
13622: PUSH
13623: LD_INT 16
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: LIST
13630: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13631: LD_VAR 0 6
13635: PPUSH
13636: CALL_OW 264
13640: PUSH
13641: LD_INT 6
13643: PUSH
13644: LD_INT 46
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: IN
13651: IFFALSE 13672
// points := [ 32 , 120 , 70 ] ;
13653: LD_ADDR_VAR 0 9
13657: PUSH
13658: LD_INT 32
13660: PUSH
13661: LD_INT 120
13663: PUSH
13664: LD_INT 70
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13672: LD_VAR 0 6
13676: PPUSH
13677: CALL_OW 264
13681: PUSH
13682: LD_INT 7
13684: PUSH
13685: LD_INT 28
13687: PUSH
13688: LD_INT 45
13690: PUSH
13691: LD_INT 92
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: IN
13700: IFFALSE 13721
// points := [ 35 , 20 , 45 ] ;
13702: LD_ADDR_VAR 0 9
13706: PUSH
13707: LD_INT 35
13709: PUSH
13710: LD_INT 20
13712: PUSH
13713: LD_INT 45
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13721: LD_VAR 0 6
13725: PPUSH
13726: CALL_OW 264
13730: PUSH
13731: LD_INT 47
13733: PUSH
13734: EMPTY
13735: LIST
13736: IN
13737: IFFALSE 13758
// points := [ 67 , 45 , 75 ] ;
13739: LD_ADDR_VAR 0 9
13743: PUSH
13744: LD_INT 67
13746: PUSH
13747: LD_INT 45
13749: PUSH
13750: LD_INT 75
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13758: LD_VAR 0 6
13762: PPUSH
13763: CALL_OW 264
13767: PUSH
13768: LD_INT 26
13770: PUSH
13771: EMPTY
13772: LIST
13773: IN
13774: IFFALSE 13795
// points := [ 120 , 30 , 80 ] ;
13776: LD_ADDR_VAR 0 9
13780: PUSH
13781: LD_INT 120
13783: PUSH
13784: LD_INT 30
13786: PUSH
13787: LD_INT 80
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13795: LD_VAR 0 6
13799: PPUSH
13800: CALL_OW 264
13804: PUSH
13805: LD_INT 22
13807: PUSH
13808: EMPTY
13809: LIST
13810: IN
13811: IFFALSE 13832
// points := [ 40 , 1 , 1 ] ;
13813: LD_ADDR_VAR 0 9
13817: PUSH
13818: LD_INT 40
13820: PUSH
13821: LD_INT 1
13823: PUSH
13824: LD_INT 1
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13832: LD_VAR 0 6
13836: PPUSH
13837: CALL_OW 264
13841: PUSH
13842: LD_INT 29
13844: PUSH
13845: EMPTY
13846: LIST
13847: IN
13848: IFFALSE 13869
// points := [ 70 , 200 , 400 ] ;
13850: LD_ADDR_VAR 0 9
13854: PUSH
13855: LD_INT 70
13857: PUSH
13858: LD_INT 200
13860: PUSH
13861: LD_INT 400
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13869: LD_VAR 0 6
13873: PPUSH
13874: CALL_OW 264
13878: PUSH
13879: LD_INT 14
13881: PUSH
13882: LD_INT 53
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: IN
13889: IFFALSE 13910
// points := [ 40 , 10 , 20 ] ;
13891: LD_ADDR_VAR 0 9
13895: PUSH
13896: LD_INT 40
13898: PUSH
13899: LD_INT 10
13901: PUSH
13902: LD_INT 20
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13910: LD_VAR 0 6
13914: PPUSH
13915: CALL_OW 264
13919: PUSH
13920: LD_INT 9
13922: PUSH
13923: EMPTY
13924: LIST
13925: IN
13926: IFFALSE 13947
// points := [ 5 , 70 , 20 ] ;
13928: LD_ADDR_VAR 0 9
13932: PUSH
13933: LD_INT 5
13935: PUSH
13936: LD_INT 70
13938: PUSH
13939: LD_INT 20
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13947: LD_VAR 0 6
13951: PPUSH
13952: CALL_OW 264
13956: PUSH
13957: LD_INT 10
13959: PUSH
13960: EMPTY
13961: LIST
13962: IN
13963: IFFALSE 13984
// points := [ 35 , 110 , 70 ] ;
13965: LD_ADDR_VAR 0 9
13969: PUSH
13970: LD_INT 35
13972: PUSH
13973: LD_INT 110
13975: PUSH
13976: LD_INT 70
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13984: LD_VAR 0 6
13988: PPUSH
13989: CALL_OW 265
13993: PUSH
13994: LD_INT 25
13996: EQUAL
13997: IFFALSE 14018
// points := [ 80 , 65 , 100 ] ;
13999: LD_ADDR_VAR 0 9
14003: PUSH
14004: LD_INT 80
14006: PUSH
14007: LD_INT 65
14009: PUSH
14010: LD_INT 100
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
14018: LD_VAR 0 6
14022: PPUSH
14023: CALL_OW 263
14027: PUSH
14028: LD_INT 1
14030: EQUAL
14031: IFFALSE 14066
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14033: LD_ADDR_VAR 0 10
14037: PUSH
14038: LD_VAR 0 10
14042: PUSH
14043: LD_VAR 0 6
14047: PPUSH
14048: CALL_OW 311
14052: PPUSH
14053: LD_INT 3
14055: PPUSH
14056: CALL_OW 259
14060: PUSH
14061: LD_INT 4
14063: MUL
14064: MUL
14065: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
14066: LD_VAR 0 6
14070: PPUSH
14071: CALL_OW 263
14075: PUSH
14076: LD_INT 2
14078: EQUAL
14079: IFFALSE 14130
// begin j := IsControledBy ( i ) ;
14081: LD_ADDR_VAR 0 7
14085: PUSH
14086: LD_VAR 0 6
14090: PPUSH
14091: CALL_OW 312
14095: ST_TO_ADDR
// if j then
14096: LD_VAR 0 7
14100: IFFALSE 14130
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
14102: LD_ADDR_VAR 0 10
14106: PUSH
14107: LD_VAR 0 10
14111: PUSH
14112: LD_VAR 0 7
14116: PPUSH
14117: LD_INT 3
14119: PPUSH
14120: CALL_OW 259
14124: PUSH
14125: LD_INT 3
14127: MUL
14128: MUL
14129: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
14130: LD_VAR 0 6
14134: PPUSH
14135: CALL_OW 264
14139: PUSH
14140: LD_INT 5
14142: PUSH
14143: LD_INT 6
14145: PUSH
14146: LD_INT 46
14148: PUSH
14149: LD_INT 44
14151: PUSH
14152: LD_INT 47
14154: PUSH
14155: LD_INT 45
14157: PUSH
14158: LD_INT 28
14160: PUSH
14161: LD_INT 7
14163: PUSH
14164: LD_INT 27
14166: PUSH
14167: LD_INT 29
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: IN
14182: PUSH
14183: LD_VAR 0 1
14187: PPUSH
14188: LD_INT 52
14190: PPUSH
14191: CALL_OW 321
14195: PUSH
14196: LD_INT 2
14198: EQUAL
14199: AND
14200: IFFALSE 14217
// bpoints := bpoints * 1.2 ;
14202: LD_ADDR_VAR 0 10
14206: PUSH
14207: LD_VAR 0 10
14211: PUSH
14212: LD_REAL  1.20000000000000E+0000
14215: MUL
14216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14217: LD_VAR 0 6
14221: PPUSH
14222: CALL_OW 264
14226: PUSH
14227: LD_INT 6
14229: PUSH
14230: LD_INT 46
14232: PUSH
14233: LD_INT 47
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: LIST
14240: IN
14241: IFFALSE 14258
// bpoints := bpoints * 1.2 ;
14243: LD_ADDR_VAR 0 10
14247: PUSH
14248: LD_VAR 0 10
14252: PUSH
14253: LD_REAL  1.20000000000000E+0000
14256: MUL
14257: ST_TO_ADDR
// end ; unit_building :
14258: GO 14272
14260: LD_INT 3
14262: DOUBLE
14263: EQUAL
14264: IFTRUE 14268
14266: GO 14271
14268: POP
// ; end ;
14269: GO 14272
14271: POP
// for j = 1 to 3 do
14272: LD_ADDR_VAR 0 7
14276: PUSH
14277: DOUBLE
14278: LD_INT 1
14280: DEC
14281: ST_TO_ADDR
14282: LD_INT 3
14284: PUSH
14285: FOR_TO
14286: IFFALSE 14339
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14288: LD_ADDR_VAR 0 5
14292: PUSH
14293: LD_VAR 0 5
14297: PPUSH
14298: LD_VAR 0 7
14302: PPUSH
14303: LD_VAR 0 5
14307: PUSH
14308: LD_VAR 0 7
14312: ARRAY
14313: PUSH
14314: LD_VAR 0 9
14318: PUSH
14319: LD_VAR 0 7
14323: ARRAY
14324: PUSH
14325: LD_VAR 0 10
14329: MUL
14330: PLUS
14331: PPUSH
14332: CALL_OW 1
14336: ST_TO_ADDR
14337: GO 14285
14339: POP
14340: POP
// end ;
14341: GO 12820
14343: POP
14344: POP
// result := Replace ( result , 4 , tmp ) ;
14345: LD_ADDR_VAR 0 5
14349: PUSH
14350: LD_VAR 0 5
14354: PPUSH
14355: LD_INT 4
14357: PPUSH
14358: LD_VAR 0 8
14362: PPUSH
14363: CALL_OW 1
14367: ST_TO_ADDR
// end ;
14368: LD_VAR 0 5
14372: RET
// export function DangerAtRange ( unit , range ) ; begin
14373: LD_INT 0
14375: PPUSH
// if not unit then
14376: LD_VAR 0 1
14380: NOT
14381: IFFALSE 14385
// exit ;
14383: GO 14430
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14385: LD_ADDR_VAR 0 3
14389: PUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 255
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 250
14409: PPUSH
14410: LD_VAR 0 1
14414: PPUSH
14415: CALL_OW 251
14419: PPUSH
14420: LD_VAR 0 2
14424: PPUSH
14425: CALL 12672 0 4
14429: ST_TO_ADDR
// end ;
14430: LD_VAR 0 3
14434: RET
// export function DangerInArea ( side , area ) ; begin
14435: LD_INT 0
14437: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14438: LD_ADDR_VAR 0 3
14442: PUSH
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_INT 81
14450: PUSH
14451: LD_VAR 0 1
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 70
14464: ST_TO_ADDR
// end ;
14465: LD_VAR 0 3
14469: RET
// export function IsExtension ( b ) ; begin
14470: LD_INT 0
14472: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_VAR 0 1
14482: PUSH
14483: LD_INT 23
14485: PUSH
14486: LD_INT 20
14488: PUSH
14489: LD_INT 22
14491: PUSH
14492: LD_INT 17
14494: PUSH
14495: LD_INT 24
14497: PUSH
14498: LD_INT 21
14500: PUSH
14501: LD_INT 19
14503: PUSH
14504: LD_INT 16
14506: PUSH
14507: LD_INT 25
14509: PUSH
14510: LD_INT 18
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: IN
14525: ST_TO_ADDR
// end ;
14526: LD_VAR 0 2
14530: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14531: LD_INT 0
14533: PPUSH
14534: PPUSH
14535: PPUSH
// result := [ ] ;
14536: LD_ADDR_VAR 0 4
14540: PUSH
14541: EMPTY
14542: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14543: LD_ADDR_VAR 0 5
14547: PUSH
14548: LD_VAR 0 2
14552: PPUSH
14553: LD_INT 21
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: PPUSH
14563: CALL_OW 70
14567: ST_TO_ADDR
// if not tmp then
14568: LD_VAR 0 5
14572: NOT
14573: IFFALSE 14577
// exit ;
14575: GO 14641
// if checkLink then
14577: LD_VAR 0 3
14581: IFFALSE 14631
// begin for i in tmp do
14583: LD_ADDR_VAR 0 6
14587: PUSH
14588: LD_VAR 0 5
14592: PUSH
14593: FOR_IN
14594: IFFALSE 14629
// if GetBase ( i ) <> base then
14596: LD_VAR 0 6
14600: PPUSH
14601: CALL_OW 274
14605: PUSH
14606: LD_VAR 0 1
14610: NONEQUAL
14611: IFFALSE 14627
// ComLinkToBase ( base , i ) ;
14613: LD_VAR 0 1
14617: PPUSH
14618: LD_VAR 0 6
14622: PPUSH
14623: CALL_OW 169
14627: GO 14593
14629: POP
14630: POP
// end ; result := tmp ;
14631: LD_ADDR_VAR 0 4
14635: PUSH
14636: LD_VAR 0 5
14640: ST_TO_ADDR
// end ;
14641: LD_VAR 0 4
14645: RET
// export function ComComplete ( units , b ) ; var i ; begin
14646: LD_INT 0
14648: PPUSH
14649: PPUSH
// if not units then
14650: LD_VAR 0 1
14654: NOT
14655: IFFALSE 14659
// exit ;
14657: GO 14749
// for i in units do
14659: LD_ADDR_VAR 0 4
14663: PUSH
14664: LD_VAR 0 1
14668: PUSH
14669: FOR_IN
14670: IFFALSE 14747
// if BuildingStatus ( b ) = bs_build then
14672: LD_VAR 0 2
14676: PPUSH
14677: CALL_OW 461
14681: PUSH
14682: LD_INT 1
14684: EQUAL
14685: IFFALSE 14745
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14687: LD_VAR 0 4
14691: PPUSH
14692: LD_STRING h
14694: PUSH
14695: LD_VAR 0 2
14699: PPUSH
14700: CALL_OW 250
14704: PUSH
14705: LD_VAR 0 2
14709: PPUSH
14710: CALL_OW 251
14714: PUSH
14715: LD_VAR 0 2
14719: PUSH
14720: LD_INT 0
14722: PUSH
14723: LD_INT 0
14725: PUSH
14726: LD_INT 0
14728: PUSH
14729: EMPTY
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PUSH
14738: EMPTY
14739: LIST
14740: PPUSH
14741: CALL_OW 446
14745: GO 14669
14747: POP
14748: POP
// end ;
14749: LD_VAR 0 3
14753: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14754: LD_INT 0
14756: PPUSH
14757: PPUSH
14758: PPUSH
14759: PPUSH
14760: PPUSH
14761: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14762: LD_VAR 0 1
14766: NOT
14767: PUSH
14768: LD_VAR 0 1
14772: PPUSH
14773: CALL_OW 263
14777: PUSH
14778: LD_INT 2
14780: NONEQUAL
14781: OR
14782: IFFALSE 14786
// exit ;
14784: GO 15102
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14786: LD_ADDR_VAR 0 6
14790: PUSH
14791: LD_INT 22
14793: PUSH
14794: LD_VAR 0 1
14798: PPUSH
14799: CALL_OW 255
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: LD_INT 30
14813: PUSH
14814: LD_INT 36
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 34
14823: PUSH
14824: LD_INT 31
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: ST_TO_ADDR
// if not tmp then
14845: LD_VAR 0 6
14849: NOT
14850: IFFALSE 14854
// exit ;
14852: GO 15102
// result := [ ] ;
14854: LD_ADDR_VAR 0 2
14858: PUSH
14859: EMPTY
14860: ST_TO_ADDR
// for i in tmp do
14861: LD_ADDR_VAR 0 3
14865: PUSH
14866: LD_VAR 0 6
14870: PUSH
14871: FOR_IN
14872: IFFALSE 14943
// begin t := UnitsInside ( i ) ;
14874: LD_ADDR_VAR 0 4
14878: PUSH
14879: LD_VAR 0 3
14883: PPUSH
14884: CALL_OW 313
14888: ST_TO_ADDR
// if t then
14889: LD_VAR 0 4
14893: IFFALSE 14941
// for j in t do
14895: LD_ADDR_VAR 0 7
14899: PUSH
14900: LD_VAR 0 4
14904: PUSH
14905: FOR_IN
14906: IFFALSE 14939
// result := Replace ( result , result + 1 , j ) ;
14908: LD_ADDR_VAR 0 2
14912: PUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: LD_VAR 0 2
14922: PUSH
14923: LD_INT 1
14925: PLUS
14926: PPUSH
14927: LD_VAR 0 7
14931: PPUSH
14932: CALL_OW 1
14936: ST_TO_ADDR
14937: GO 14905
14939: POP
14940: POP
// end ;
14941: GO 14871
14943: POP
14944: POP
// if not result then
14945: LD_VAR 0 2
14949: NOT
14950: IFFALSE 14954
// exit ;
14952: GO 15102
// mech := result [ 1 ] ;
14954: LD_ADDR_VAR 0 5
14958: PUSH
14959: LD_VAR 0 2
14963: PUSH
14964: LD_INT 1
14966: ARRAY
14967: ST_TO_ADDR
// if result > 1 then
14968: LD_VAR 0 2
14972: PUSH
14973: LD_INT 1
14975: GREATER
14976: IFFALSE 15088
// begin for i = 2 to result do
14978: LD_ADDR_VAR 0 3
14982: PUSH
14983: DOUBLE
14984: LD_INT 2
14986: DEC
14987: ST_TO_ADDR
14988: LD_VAR 0 2
14992: PUSH
14993: FOR_TO
14994: IFFALSE 15086
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14996: LD_ADDR_VAR 0 4
15000: PUSH
15001: LD_VAR 0 2
15005: PUSH
15006: LD_VAR 0 3
15010: ARRAY
15011: PPUSH
15012: LD_INT 3
15014: PPUSH
15015: CALL_OW 259
15019: PUSH
15020: LD_VAR 0 2
15024: PUSH
15025: LD_VAR 0 3
15029: ARRAY
15030: PPUSH
15031: CALL_OW 432
15035: MINUS
15036: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15037: LD_VAR 0 4
15041: PUSH
15042: LD_VAR 0 5
15046: PPUSH
15047: LD_INT 3
15049: PPUSH
15050: CALL_OW 259
15054: PUSH
15055: LD_VAR 0 5
15059: PPUSH
15060: CALL_OW 432
15064: MINUS
15065: GREATEREQUAL
15066: IFFALSE 15084
// mech := result [ i ] ;
15068: LD_ADDR_VAR 0 5
15072: PUSH
15073: LD_VAR 0 2
15077: PUSH
15078: LD_VAR 0 3
15082: ARRAY
15083: ST_TO_ADDR
// end ;
15084: GO 14993
15086: POP
15087: POP
// end ; ComLinkTo ( vehicle , mech ) ;
15088: LD_VAR 0 1
15092: PPUSH
15093: LD_VAR 0 5
15097: PPUSH
15098: CALL_OW 135
// end ;
15102: LD_VAR 0 2
15106: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
15107: LD_INT 0
15109: PPUSH
15110: PPUSH
15111: PPUSH
15112: PPUSH
15113: PPUSH
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
15121: PPUSH
// result := [ ] ;
15122: LD_ADDR_VAR 0 7
15126: PUSH
15127: EMPTY
15128: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 266
15138: PUSH
15139: LD_INT 0
15141: PUSH
15142: LD_INT 1
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: IN
15149: NOT
15150: IFFALSE 15154
// exit ;
15152: GO 16788
// if name then
15154: LD_VAR 0 3
15158: IFFALSE 15174
// SetBName ( base_dep , name ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_VAR 0 3
15169: PPUSH
15170: CALL_OW 500
// base := GetBase ( base_dep ) ;
15174: LD_ADDR_VAR 0 15
15178: PUSH
15179: LD_VAR 0 1
15183: PPUSH
15184: CALL_OW 274
15188: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
15189: LD_ADDR_VAR 0 16
15193: PUSH
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 255
15203: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15204: LD_ADDR_VAR 0 17
15208: PUSH
15209: LD_VAR 0 1
15213: PPUSH
15214: CALL_OW 248
15218: ST_TO_ADDR
// if sources then
15219: LD_VAR 0 5
15223: IFFALSE 15270
// for i = 1 to 3 do
15225: LD_ADDR_VAR 0 8
15229: PUSH
15230: DOUBLE
15231: LD_INT 1
15233: DEC
15234: ST_TO_ADDR
15235: LD_INT 3
15237: PUSH
15238: FOR_TO
15239: IFFALSE 15268
// AddResourceType ( base , i , sources [ i ] ) ;
15241: LD_VAR 0 15
15245: PPUSH
15246: LD_VAR 0 8
15250: PPUSH
15251: LD_VAR 0 5
15255: PUSH
15256: LD_VAR 0 8
15260: ARRAY
15261: PPUSH
15262: CALL_OW 276
15266: GO 15238
15268: POP
15269: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15270: LD_ADDR_VAR 0 18
15274: PUSH
15275: LD_VAR 0 15
15279: PPUSH
15280: LD_VAR 0 2
15284: PPUSH
15285: LD_INT 1
15287: PPUSH
15288: CALL 14531 0 3
15292: ST_TO_ADDR
// InitHc ;
15293: CALL_OW 19
// InitUc ;
15297: CALL_OW 18
// uc_side := side ;
15301: LD_ADDR_OWVAR 20
15305: PUSH
15306: LD_VAR 0 16
15310: ST_TO_ADDR
// uc_nation := nation ;
15311: LD_ADDR_OWVAR 21
15315: PUSH
15316: LD_VAR 0 17
15320: ST_TO_ADDR
// if buildings then
15321: LD_VAR 0 18
15325: IFFALSE 16647
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15327: LD_ADDR_VAR 0 19
15331: PUSH
15332: LD_VAR 0 18
15336: PPUSH
15337: LD_INT 2
15339: PUSH
15340: LD_INT 30
15342: PUSH
15343: LD_INT 29
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 30
15352: PUSH
15353: LD_INT 30
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: PPUSH
15365: CALL_OW 72
15369: ST_TO_ADDR
// if tmp then
15370: LD_VAR 0 19
15374: IFFALSE 15422
// for i in tmp do
15376: LD_ADDR_VAR 0 8
15380: PUSH
15381: LD_VAR 0 19
15385: PUSH
15386: FOR_IN
15387: IFFALSE 15420
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15389: LD_VAR 0 8
15393: PPUSH
15394: CALL_OW 250
15398: PPUSH
15399: LD_VAR 0 8
15403: PPUSH
15404: CALL_OW 251
15408: PPUSH
15409: LD_VAR 0 16
15413: PPUSH
15414: CALL_OW 441
15418: GO 15386
15420: POP
15421: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15422: LD_VAR 0 18
15426: PPUSH
15427: LD_INT 2
15429: PUSH
15430: LD_INT 30
15432: PUSH
15433: LD_INT 32
15435: PUSH
15436: EMPTY
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 30
15442: PUSH
15443: LD_INT 33
15445: PUSH
15446: EMPTY
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: PPUSH
15455: CALL_OW 72
15459: IFFALSE 15547
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15461: LD_ADDR_VAR 0 8
15465: PUSH
15466: LD_VAR 0 18
15470: PPUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 30
15476: PUSH
15477: LD_INT 32
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 30
15486: PUSH
15487: LD_INT 33
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 72
15503: PUSH
15504: FOR_IN
15505: IFFALSE 15545
// begin if not GetBWeapon ( i ) then
15507: LD_VAR 0 8
15511: PPUSH
15512: CALL_OW 269
15516: NOT
15517: IFFALSE 15543
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15519: LD_VAR 0 8
15523: PPUSH
15524: LD_VAR 0 8
15528: PPUSH
15529: LD_VAR 0 2
15533: PPUSH
15534: CALL 16793 0 2
15538: PPUSH
15539: CALL_OW 431
// end ;
15543: GO 15504
15545: POP
15546: POP
// end ; for i = 1 to personel do
15547: LD_ADDR_VAR 0 8
15551: PUSH
15552: DOUBLE
15553: LD_INT 1
15555: DEC
15556: ST_TO_ADDR
15557: LD_VAR 0 6
15561: PUSH
15562: FOR_TO
15563: IFFALSE 16627
// begin if i > 4 then
15565: LD_VAR 0 8
15569: PUSH
15570: LD_INT 4
15572: GREATER
15573: IFFALSE 15577
// break ;
15575: GO 16627
// case i of 1 :
15577: LD_VAR 0 8
15581: PUSH
15582: LD_INT 1
15584: DOUBLE
15585: EQUAL
15586: IFTRUE 15590
15588: GO 15670
15590: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15591: LD_ADDR_VAR 0 12
15595: PUSH
15596: LD_VAR 0 18
15600: PPUSH
15601: LD_INT 22
15603: PUSH
15604: LD_VAR 0 16
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: LD_INT 58
15615: PUSH
15616: EMPTY
15617: LIST
15618: PUSH
15619: LD_INT 2
15621: PUSH
15622: LD_INT 30
15624: PUSH
15625: LD_INT 32
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 30
15634: PUSH
15635: LD_INT 4
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 30
15644: PUSH
15645: LD_INT 5
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: LIST
15662: PPUSH
15663: CALL_OW 72
15667: ST_TO_ADDR
15668: GO 15892
15670: LD_INT 2
15672: DOUBLE
15673: EQUAL
15674: IFTRUE 15678
15676: GO 15740
15678: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15679: LD_ADDR_VAR 0 12
15683: PUSH
15684: LD_VAR 0 18
15688: PPUSH
15689: LD_INT 22
15691: PUSH
15692: LD_VAR 0 16
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: LD_INT 30
15706: PUSH
15707: LD_INT 0
15709: PUSH
15710: EMPTY
15711: LIST
15712: LIST
15713: PUSH
15714: LD_INT 30
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PPUSH
15733: CALL_OW 72
15737: ST_TO_ADDR
15738: GO 15892
15740: LD_INT 3
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15810
15748: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15749: LD_ADDR_VAR 0 12
15753: PUSH
15754: LD_VAR 0 18
15758: PPUSH
15759: LD_INT 22
15761: PUSH
15762: LD_VAR 0 16
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PUSH
15771: LD_INT 2
15773: PUSH
15774: LD_INT 30
15776: PUSH
15777: LD_INT 2
15779: PUSH
15780: EMPTY
15781: LIST
15782: LIST
15783: PUSH
15784: LD_INT 30
15786: PUSH
15787: LD_INT 3
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PPUSH
15803: CALL_OW 72
15807: ST_TO_ADDR
15808: GO 15892
15810: LD_INT 4
15812: DOUBLE
15813: EQUAL
15814: IFTRUE 15818
15816: GO 15891
15818: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15819: LD_ADDR_VAR 0 12
15823: PUSH
15824: LD_VAR 0 18
15828: PPUSH
15829: LD_INT 22
15831: PUSH
15832: LD_VAR 0 16
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: LD_INT 2
15843: PUSH
15844: LD_INT 30
15846: PUSH
15847: LD_INT 6
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: LD_INT 30
15856: PUSH
15857: LD_INT 7
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 30
15866: PUSH
15867: LD_INT 8
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: PUSH
15880: EMPTY
15881: LIST
15882: LIST
15883: PPUSH
15884: CALL_OW 72
15888: ST_TO_ADDR
15889: GO 15892
15891: POP
// if i = 1 then
15892: LD_VAR 0 8
15896: PUSH
15897: LD_INT 1
15899: EQUAL
15900: IFFALSE 16011
// begin tmp := [ ] ;
15902: LD_ADDR_VAR 0 19
15906: PUSH
15907: EMPTY
15908: ST_TO_ADDR
// for j in f do
15909: LD_ADDR_VAR 0 9
15913: PUSH
15914: LD_VAR 0 12
15918: PUSH
15919: FOR_IN
15920: IFFALSE 15993
// if GetBType ( j ) = b_bunker then
15922: LD_VAR 0 9
15926: PPUSH
15927: CALL_OW 266
15931: PUSH
15932: LD_INT 32
15934: EQUAL
15935: IFFALSE 15962
// tmp := Insert ( tmp , 1 , j ) else
15937: LD_ADDR_VAR 0 19
15941: PUSH
15942: LD_VAR 0 19
15946: PPUSH
15947: LD_INT 1
15949: PPUSH
15950: LD_VAR 0 9
15954: PPUSH
15955: CALL_OW 2
15959: ST_TO_ADDR
15960: GO 15991
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15962: LD_ADDR_VAR 0 19
15966: PUSH
15967: LD_VAR 0 19
15971: PPUSH
15972: LD_VAR 0 19
15976: PUSH
15977: LD_INT 1
15979: PLUS
15980: PPUSH
15981: LD_VAR 0 9
15985: PPUSH
15986: CALL_OW 2
15990: ST_TO_ADDR
15991: GO 15919
15993: POP
15994: POP
// if tmp then
15995: LD_VAR 0 19
15999: IFFALSE 16011
// f := tmp ;
16001: LD_ADDR_VAR 0 12
16005: PUSH
16006: LD_VAR 0 19
16010: ST_TO_ADDR
// end ; x := personel [ i ] ;
16011: LD_ADDR_VAR 0 13
16015: PUSH
16016: LD_VAR 0 6
16020: PUSH
16021: LD_VAR 0 8
16025: ARRAY
16026: ST_TO_ADDR
// if x = - 1 then
16027: LD_VAR 0 13
16031: PUSH
16032: LD_INT 1
16034: NEG
16035: EQUAL
16036: IFFALSE 16245
// begin for j in f do
16038: LD_ADDR_VAR 0 9
16042: PUSH
16043: LD_VAR 0 12
16047: PUSH
16048: FOR_IN
16049: IFFALSE 16241
// repeat InitHc ;
16051: CALL_OW 19
// if GetBType ( j ) = b_barracks then
16055: LD_VAR 0 9
16059: PPUSH
16060: CALL_OW 266
16064: PUSH
16065: LD_INT 5
16067: EQUAL
16068: IFFALSE 16138
// begin if UnitsInside ( j ) < 3 then
16070: LD_VAR 0 9
16074: PPUSH
16075: CALL_OW 313
16079: PUSH
16080: LD_INT 3
16082: LESS
16083: IFFALSE 16119
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16085: LD_INT 0
16087: PPUSH
16088: LD_INT 5
16090: PUSH
16091: LD_INT 8
16093: PUSH
16094: LD_INT 9
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: LIST
16101: PUSH
16102: LD_VAR 0 17
16106: ARRAY
16107: PPUSH
16108: LD_VAR 0 4
16112: PPUSH
16113: CALL_OW 380
16117: GO 16136
// PrepareHuman ( false , i , skill ) ;
16119: LD_INT 0
16121: PPUSH
16122: LD_VAR 0 8
16126: PPUSH
16127: LD_VAR 0 4
16131: PPUSH
16132: CALL_OW 380
// end else
16136: GO 16155
// PrepareHuman ( false , i , skill ) ;
16138: LD_INT 0
16140: PPUSH
16141: LD_VAR 0 8
16145: PPUSH
16146: LD_VAR 0 4
16150: PPUSH
16151: CALL_OW 380
// un := CreateHuman ;
16155: LD_ADDR_VAR 0 14
16159: PUSH
16160: CALL_OW 44
16164: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16165: LD_ADDR_VAR 0 7
16169: PUSH
16170: LD_VAR 0 7
16174: PPUSH
16175: LD_INT 1
16177: PPUSH
16178: LD_VAR 0 14
16182: PPUSH
16183: CALL_OW 2
16187: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
16188: LD_VAR 0 14
16192: PPUSH
16193: LD_VAR 0 9
16197: PPUSH
16198: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16202: LD_VAR 0 9
16206: PPUSH
16207: CALL_OW 313
16211: PUSH
16212: LD_INT 6
16214: EQUAL
16215: PUSH
16216: LD_VAR 0 9
16220: PPUSH
16221: CALL_OW 266
16225: PUSH
16226: LD_INT 32
16228: PUSH
16229: LD_INT 31
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: IN
16236: OR
16237: IFFALSE 16051
16239: GO 16048
16241: POP
16242: POP
// end else
16243: GO 16625
// for j = 1 to x do
16245: LD_ADDR_VAR 0 9
16249: PUSH
16250: DOUBLE
16251: LD_INT 1
16253: DEC
16254: ST_TO_ADDR
16255: LD_VAR 0 13
16259: PUSH
16260: FOR_TO
16261: IFFALSE 16623
// begin InitHc ;
16263: CALL_OW 19
// if not f then
16267: LD_VAR 0 12
16271: NOT
16272: IFFALSE 16361
// begin PrepareHuman ( false , i , skill ) ;
16274: LD_INT 0
16276: PPUSH
16277: LD_VAR 0 8
16281: PPUSH
16282: LD_VAR 0 4
16286: PPUSH
16287: CALL_OW 380
// un := CreateHuman ;
16291: LD_ADDR_VAR 0 14
16295: PUSH
16296: CALL_OW 44
16300: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16301: LD_ADDR_VAR 0 7
16305: PUSH
16306: LD_VAR 0 7
16310: PPUSH
16311: LD_INT 1
16313: PPUSH
16314: LD_VAR 0 14
16318: PPUSH
16319: CALL_OW 2
16323: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16324: LD_VAR 0 14
16328: PPUSH
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 250
16338: PPUSH
16339: LD_VAR 0 1
16343: PPUSH
16344: CALL_OW 251
16348: PPUSH
16349: LD_INT 10
16351: PPUSH
16352: LD_INT 0
16354: PPUSH
16355: CALL_OW 50
// continue ;
16359: GO 16260
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16361: LD_VAR 0 12
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PPUSH
16370: CALL_OW 313
16374: PUSH
16375: LD_VAR 0 12
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: CALL_OW 266
16388: PUSH
16389: LD_INT 32
16391: PUSH
16392: LD_INT 31
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: IN
16399: AND
16400: PUSH
16401: LD_VAR 0 12
16405: PUSH
16406: LD_INT 1
16408: ARRAY
16409: PPUSH
16410: CALL_OW 313
16414: PUSH
16415: LD_INT 6
16417: EQUAL
16418: OR
16419: IFFALSE 16439
// f := Delete ( f , 1 ) ;
16421: LD_ADDR_VAR 0 12
16425: PUSH
16426: LD_VAR 0 12
16430: PPUSH
16431: LD_INT 1
16433: PPUSH
16434: CALL_OW 3
16438: ST_TO_ADDR
// if not f then
16439: LD_VAR 0 12
16443: NOT
16444: IFFALSE 16462
// begin x := x + 2 ;
16446: LD_ADDR_VAR 0 13
16450: PUSH
16451: LD_VAR 0 13
16455: PUSH
16456: LD_INT 2
16458: PLUS
16459: ST_TO_ADDR
// continue ;
16460: GO 16260
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16462: LD_VAR 0 12
16466: PUSH
16467: LD_INT 1
16469: ARRAY
16470: PPUSH
16471: CALL_OW 266
16475: PUSH
16476: LD_INT 5
16478: EQUAL
16479: IFFALSE 16553
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16481: LD_VAR 0 12
16485: PUSH
16486: LD_INT 1
16488: ARRAY
16489: PPUSH
16490: CALL_OW 313
16494: PUSH
16495: LD_INT 3
16497: LESS
16498: IFFALSE 16534
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16500: LD_INT 0
16502: PPUSH
16503: LD_INT 5
16505: PUSH
16506: LD_INT 8
16508: PUSH
16509: LD_INT 9
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: PUSH
16517: LD_VAR 0 17
16521: ARRAY
16522: PPUSH
16523: LD_VAR 0 4
16527: PPUSH
16528: CALL_OW 380
16532: GO 16551
// PrepareHuman ( false , i , skill ) ;
16534: LD_INT 0
16536: PPUSH
16537: LD_VAR 0 8
16541: PPUSH
16542: LD_VAR 0 4
16546: PPUSH
16547: CALL_OW 380
// end else
16551: GO 16570
// PrepareHuman ( false , i , skill ) ;
16553: LD_INT 0
16555: PPUSH
16556: LD_VAR 0 8
16560: PPUSH
16561: LD_VAR 0 4
16565: PPUSH
16566: CALL_OW 380
// un := CreateHuman ;
16570: LD_ADDR_VAR 0 14
16574: PUSH
16575: CALL_OW 44
16579: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16580: LD_ADDR_VAR 0 7
16584: PUSH
16585: LD_VAR 0 7
16589: PPUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 14
16597: PPUSH
16598: CALL_OW 2
16602: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16603: LD_VAR 0 14
16607: PPUSH
16608: LD_VAR 0 12
16612: PUSH
16613: LD_INT 1
16615: ARRAY
16616: PPUSH
16617: CALL_OW 52
// end ;
16621: GO 16260
16623: POP
16624: POP
// end ;
16625: GO 15562
16627: POP
16628: POP
// result := result ^ buildings ;
16629: LD_ADDR_VAR 0 7
16633: PUSH
16634: LD_VAR 0 7
16638: PUSH
16639: LD_VAR 0 18
16643: ADD
16644: ST_TO_ADDR
// end else
16645: GO 16788
// begin for i = 1 to personel do
16647: LD_ADDR_VAR 0 8
16651: PUSH
16652: DOUBLE
16653: LD_INT 1
16655: DEC
16656: ST_TO_ADDR
16657: LD_VAR 0 6
16661: PUSH
16662: FOR_TO
16663: IFFALSE 16786
// begin if i > 4 then
16665: LD_VAR 0 8
16669: PUSH
16670: LD_INT 4
16672: GREATER
16673: IFFALSE 16677
// break ;
16675: GO 16786
// x := personel [ i ] ;
16677: LD_ADDR_VAR 0 13
16681: PUSH
16682: LD_VAR 0 6
16686: PUSH
16687: LD_VAR 0 8
16691: ARRAY
16692: ST_TO_ADDR
// if x = - 1 then
16693: LD_VAR 0 13
16697: PUSH
16698: LD_INT 1
16700: NEG
16701: EQUAL
16702: IFFALSE 16706
// continue ;
16704: GO 16662
// PrepareHuman ( false , i , skill ) ;
16706: LD_INT 0
16708: PPUSH
16709: LD_VAR 0 8
16713: PPUSH
16714: LD_VAR 0 4
16718: PPUSH
16719: CALL_OW 380
// un := CreateHuman ;
16723: LD_ADDR_VAR 0 14
16727: PUSH
16728: CALL_OW 44
16732: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16733: LD_VAR 0 14
16737: PPUSH
16738: LD_VAR 0 1
16742: PPUSH
16743: CALL_OW 250
16747: PPUSH
16748: LD_VAR 0 1
16752: PPUSH
16753: CALL_OW 251
16757: PPUSH
16758: LD_INT 10
16760: PPUSH
16761: LD_INT 0
16763: PPUSH
16764: CALL_OW 50
// result := result ^ un ;
16768: LD_ADDR_VAR 0 7
16772: PUSH
16773: LD_VAR 0 7
16777: PUSH
16778: LD_VAR 0 14
16782: ADD
16783: ST_TO_ADDR
// end ;
16784: GO 16662
16786: POP
16787: POP
// end ; end ;
16788: LD_VAR 0 7
16792: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16793: LD_INT 0
16795: PPUSH
16796: PPUSH
16797: PPUSH
16798: PPUSH
16799: PPUSH
16800: PPUSH
16801: PPUSH
16802: PPUSH
16803: PPUSH
16804: PPUSH
16805: PPUSH
16806: PPUSH
16807: PPUSH
16808: PPUSH
16809: PPUSH
16810: PPUSH
// result := false ;
16811: LD_ADDR_VAR 0 3
16815: PUSH
16816: LD_INT 0
16818: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16819: LD_VAR 0 1
16823: NOT
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 266
16834: PUSH
16835: LD_INT 32
16837: PUSH
16838: LD_INT 33
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: IN
16845: NOT
16846: OR
16847: IFFALSE 16851
// exit ;
16849: GO 17960
// nat := GetNation ( tower ) ;
16851: LD_ADDR_VAR 0 12
16855: PUSH
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 248
16865: ST_TO_ADDR
// side := GetSide ( tower ) ;
16866: LD_ADDR_VAR 0 16
16870: PUSH
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 255
16880: ST_TO_ADDR
// x := GetX ( tower ) ;
16881: LD_ADDR_VAR 0 10
16885: PUSH
16886: LD_VAR 0 1
16890: PPUSH
16891: CALL_OW 250
16895: ST_TO_ADDR
// y := GetY ( tower ) ;
16896: LD_ADDR_VAR 0 11
16900: PUSH
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 251
16910: ST_TO_ADDR
// if not x or not y then
16911: LD_VAR 0 10
16915: NOT
16916: PUSH
16917: LD_VAR 0 11
16921: NOT
16922: OR
16923: IFFALSE 16927
// exit ;
16925: GO 17960
// weapon := 0 ;
16927: LD_ADDR_VAR 0 18
16931: PUSH
16932: LD_INT 0
16934: ST_TO_ADDR
// fac_list := [ ] ;
16935: LD_ADDR_VAR 0 17
16939: PUSH
16940: EMPTY
16941: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16942: LD_ADDR_VAR 0 6
16946: PUSH
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 274
16956: PPUSH
16957: LD_VAR 0 2
16961: PPUSH
16962: LD_INT 0
16964: PPUSH
16965: CALL 14531 0 3
16969: PPUSH
16970: LD_INT 30
16972: PUSH
16973: LD_INT 3
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 72
16984: ST_TO_ADDR
// if not factories then
16985: LD_VAR 0 6
16989: NOT
16990: IFFALSE 16994
// exit ;
16992: GO 17960
// for i in factories do
16994: LD_ADDR_VAR 0 8
16998: PUSH
16999: LD_VAR 0 6
17003: PUSH
17004: FOR_IN
17005: IFFALSE 17030
// fac_list := fac_list union AvailableWeaponList ( i ) ;
17007: LD_ADDR_VAR 0 17
17011: PUSH
17012: LD_VAR 0 17
17016: PUSH
17017: LD_VAR 0 8
17021: PPUSH
17022: CALL_OW 478
17026: UNION
17027: ST_TO_ADDR
17028: GO 17004
17030: POP
17031: POP
// if not fac_list then
17032: LD_VAR 0 17
17036: NOT
17037: IFFALSE 17041
// exit ;
17039: GO 17960
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17041: LD_ADDR_VAR 0 5
17045: PUSH
17046: LD_INT 4
17048: PUSH
17049: LD_INT 5
17051: PUSH
17052: LD_INT 9
17054: PUSH
17055: LD_INT 10
17057: PUSH
17058: LD_INT 6
17060: PUSH
17061: LD_INT 7
17063: PUSH
17064: LD_INT 11
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 27
17078: PUSH
17079: LD_INT 28
17081: PUSH
17082: LD_INT 26
17084: PUSH
17085: LD_INT 30
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 43
17096: PUSH
17097: LD_INT 44
17099: PUSH
17100: LD_INT 46
17102: PUSH
17103: LD_INT 45
17105: PUSH
17106: LD_INT 47
17108: PUSH
17109: LD_INT 49
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: PUSH
17125: LD_VAR 0 12
17129: ARRAY
17130: ST_TO_ADDR
// list := list isect fac_list ;
17131: LD_ADDR_VAR 0 5
17135: PUSH
17136: LD_VAR 0 5
17140: PUSH
17141: LD_VAR 0 17
17145: ISECT
17146: ST_TO_ADDR
// if not list then
17147: LD_VAR 0 5
17151: NOT
17152: IFFALSE 17156
// exit ;
17154: GO 17960
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
17156: LD_VAR 0 12
17160: PUSH
17161: LD_INT 3
17163: EQUAL
17164: PUSH
17165: LD_INT 49
17167: PUSH
17168: LD_VAR 0 5
17172: IN
17173: AND
17174: PUSH
17175: LD_INT 31
17177: PPUSH
17178: LD_VAR 0 16
17182: PPUSH
17183: CALL_OW 321
17187: PUSH
17188: LD_INT 2
17190: EQUAL
17191: AND
17192: IFFALSE 17252
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
17194: LD_INT 22
17196: PUSH
17197: LD_VAR 0 16
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 35
17208: PUSH
17209: LD_INT 49
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 91
17218: PUSH
17219: LD_VAR 0 1
17223: PUSH
17224: LD_INT 10
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: LIST
17236: PPUSH
17237: CALL_OW 69
17241: NOT
17242: IFFALSE 17252
// weapon := ru_time_lapser ;
17244: LD_ADDR_VAR 0 18
17248: PUSH
17249: LD_INT 49
17251: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17252: LD_VAR 0 12
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: LD_INT 2
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: IN
17267: PUSH
17268: LD_INT 11
17270: PUSH
17271: LD_VAR 0 5
17275: IN
17276: PUSH
17277: LD_INT 30
17279: PUSH
17280: LD_VAR 0 5
17284: IN
17285: OR
17286: AND
17287: PUSH
17288: LD_INT 6
17290: PPUSH
17291: LD_VAR 0 16
17295: PPUSH
17296: CALL_OW 321
17300: PUSH
17301: LD_INT 2
17303: EQUAL
17304: AND
17305: IFFALSE 17470
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17307: LD_INT 22
17309: PUSH
17310: LD_VAR 0 16
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 35
17324: PUSH
17325: LD_INT 11
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: PUSH
17332: LD_INT 35
17334: PUSH
17335: LD_INT 30
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: PUSH
17347: LD_INT 91
17349: PUSH
17350: LD_VAR 0 1
17354: PUSH
17355: LD_INT 18
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: LIST
17367: PPUSH
17368: CALL_OW 69
17372: NOT
17373: PUSH
17374: LD_INT 22
17376: PUSH
17377: LD_VAR 0 16
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 2
17388: PUSH
17389: LD_INT 30
17391: PUSH
17392: LD_INT 32
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: LD_INT 30
17401: PUSH
17402: LD_INT 33
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: PUSH
17414: LD_INT 91
17416: PUSH
17417: LD_VAR 0 1
17421: PUSH
17422: LD_INT 12
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: PUSH
17430: EMPTY
17431: LIST
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: PPUSH
17438: CALL_OW 69
17442: PUSH
17443: LD_INT 2
17445: GREATER
17446: AND
17447: IFFALSE 17470
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17449: LD_ADDR_VAR 0 18
17453: PUSH
17454: LD_INT 11
17456: PUSH
17457: LD_INT 30
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_VAR 0 12
17468: ARRAY
17469: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17470: LD_VAR 0 18
17474: NOT
17475: PUSH
17476: LD_INT 40
17478: PPUSH
17479: LD_VAR 0 16
17483: PPUSH
17484: CALL_OW 321
17488: PUSH
17489: LD_INT 2
17491: EQUAL
17492: AND
17493: PUSH
17494: LD_INT 7
17496: PUSH
17497: LD_VAR 0 5
17501: IN
17502: PUSH
17503: LD_INT 28
17505: PUSH
17506: LD_VAR 0 5
17510: IN
17511: OR
17512: PUSH
17513: LD_INT 45
17515: PUSH
17516: LD_VAR 0 5
17520: IN
17521: OR
17522: AND
17523: IFFALSE 17777
// begin hex := GetHexInfo ( x , y ) ;
17525: LD_ADDR_VAR 0 4
17529: PUSH
17530: LD_VAR 0 10
17534: PPUSH
17535: LD_VAR 0 11
17539: PPUSH
17540: CALL_OW 546
17544: ST_TO_ADDR
// if hex [ 1 ] then
17545: LD_VAR 0 4
17549: PUSH
17550: LD_INT 1
17552: ARRAY
17553: IFFALSE 17557
// exit ;
17555: GO 17960
// height := hex [ 2 ] ;
17557: LD_ADDR_VAR 0 15
17561: PUSH
17562: LD_VAR 0 4
17566: PUSH
17567: LD_INT 2
17569: ARRAY
17570: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17571: LD_ADDR_VAR 0 14
17575: PUSH
17576: LD_INT 0
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: LD_INT 3
17584: PUSH
17585: LD_INT 5
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: ST_TO_ADDR
// for i in tmp do
17594: LD_ADDR_VAR 0 8
17598: PUSH
17599: LD_VAR 0 14
17603: PUSH
17604: FOR_IN
17605: IFFALSE 17775
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17607: LD_ADDR_VAR 0 9
17611: PUSH
17612: LD_VAR 0 10
17616: PPUSH
17617: LD_VAR 0 8
17621: PPUSH
17622: LD_INT 5
17624: PPUSH
17625: CALL_OW 272
17629: PUSH
17630: LD_VAR 0 11
17634: PPUSH
17635: LD_VAR 0 8
17639: PPUSH
17640: LD_INT 5
17642: PPUSH
17643: CALL_OW 273
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17652: LD_VAR 0 9
17656: PUSH
17657: LD_INT 1
17659: ARRAY
17660: PPUSH
17661: LD_VAR 0 9
17665: PUSH
17666: LD_INT 2
17668: ARRAY
17669: PPUSH
17670: CALL_OW 488
17674: IFFALSE 17773
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17676: LD_ADDR_VAR 0 4
17680: PUSH
17681: LD_VAR 0 9
17685: PUSH
17686: LD_INT 1
17688: ARRAY
17689: PPUSH
17690: LD_VAR 0 9
17694: PUSH
17695: LD_INT 2
17697: ARRAY
17698: PPUSH
17699: CALL_OW 546
17703: ST_TO_ADDR
// if hex [ 1 ] then
17704: LD_VAR 0 4
17708: PUSH
17709: LD_INT 1
17711: ARRAY
17712: IFFALSE 17716
// continue ;
17714: GO 17604
// h := hex [ 2 ] ;
17716: LD_ADDR_VAR 0 13
17720: PUSH
17721: LD_VAR 0 4
17725: PUSH
17726: LD_INT 2
17728: ARRAY
17729: ST_TO_ADDR
// if h + 7 < height then
17730: LD_VAR 0 13
17734: PUSH
17735: LD_INT 7
17737: PLUS
17738: PUSH
17739: LD_VAR 0 15
17743: LESS
17744: IFFALSE 17773
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17746: LD_ADDR_VAR 0 18
17750: PUSH
17751: LD_INT 7
17753: PUSH
17754: LD_INT 28
17756: PUSH
17757: LD_INT 45
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: LIST
17764: PUSH
17765: LD_VAR 0 12
17769: ARRAY
17770: ST_TO_ADDR
// break ;
17771: GO 17775
// end ; end ; end ;
17773: GO 17604
17775: POP
17776: POP
// end ; if not weapon then
17777: LD_VAR 0 18
17781: NOT
17782: IFFALSE 17842
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17784: LD_ADDR_VAR 0 5
17788: PUSH
17789: LD_VAR 0 5
17793: PUSH
17794: LD_INT 11
17796: PUSH
17797: LD_INT 30
17799: PUSH
17800: LD_INT 49
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: DIFF
17808: ST_TO_ADDR
// if not list then
17809: LD_VAR 0 5
17813: NOT
17814: IFFALSE 17818
// exit ;
17816: GO 17960
// weapon := list [ rand ( 1 , list ) ] ;
17818: LD_ADDR_VAR 0 18
17822: PUSH
17823: LD_VAR 0 5
17827: PUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_VAR 0 5
17835: PPUSH
17836: CALL_OW 12
17840: ARRAY
17841: ST_TO_ADDR
// end ; if weapon then
17842: LD_VAR 0 18
17846: IFFALSE 17960
// begin tmp := CostOfWeapon ( weapon ) ;
17848: LD_ADDR_VAR 0 14
17852: PUSH
17853: LD_VAR 0 18
17857: PPUSH
17858: CALL_OW 451
17862: ST_TO_ADDR
// j := GetBase ( tower ) ;
17863: LD_ADDR_VAR 0 9
17867: PUSH
17868: LD_VAR 0 1
17872: PPUSH
17873: CALL_OW 274
17877: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17878: LD_VAR 0 9
17882: PPUSH
17883: LD_INT 1
17885: PPUSH
17886: CALL_OW 275
17890: PUSH
17891: LD_VAR 0 14
17895: PUSH
17896: LD_INT 1
17898: ARRAY
17899: GREATEREQUAL
17900: PUSH
17901: LD_VAR 0 9
17905: PPUSH
17906: LD_INT 2
17908: PPUSH
17909: CALL_OW 275
17913: PUSH
17914: LD_VAR 0 14
17918: PUSH
17919: LD_INT 2
17921: ARRAY
17922: GREATEREQUAL
17923: AND
17924: PUSH
17925: LD_VAR 0 9
17929: PPUSH
17930: LD_INT 3
17932: PPUSH
17933: CALL_OW 275
17937: PUSH
17938: LD_VAR 0 14
17942: PUSH
17943: LD_INT 3
17945: ARRAY
17946: GREATEREQUAL
17947: AND
17948: IFFALSE 17960
// result := weapon ;
17950: LD_ADDR_VAR 0 3
17954: PUSH
17955: LD_VAR 0 18
17959: ST_TO_ADDR
// end ; end ;
17960: LD_VAR 0 3
17964: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17965: LD_INT 0
17967: PPUSH
17968: PPUSH
// result := true ;
17969: LD_ADDR_VAR 0 3
17973: PUSH
17974: LD_INT 1
17976: ST_TO_ADDR
// if array1 = array2 then
17977: LD_VAR 0 1
17981: PUSH
17982: LD_VAR 0 2
17986: EQUAL
17987: IFFALSE 18047
// begin for i = 1 to array1 do
17989: LD_ADDR_VAR 0 4
17993: PUSH
17994: DOUBLE
17995: LD_INT 1
17997: DEC
17998: ST_TO_ADDR
17999: LD_VAR 0 1
18003: PUSH
18004: FOR_TO
18005: IFFALSE 18043
// if array1 [ i ] <> array2 [ i ] then
18007: LD_VAR 0 1
18011: PUSH
18012: LD_VAR 0 4
18016: ARRAY
18017: PUSH
18018: LD_VAR 0 2
18022: PUSH
18023: LD_VAR 0 4
18027: ARRAY
18028: NONEQUAL
18029: IFFALSE 18041
// begin result := false ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_INT 0
18038: ST_TO_ADDR
// break ;
18039: GO 18043
// end ;
18041: GO 18004
18043: POP
18044: POP
// end else
18045: GO 18055
// result := false ;
18047: LD_ADDR_VAR 0 3
18051: PUSH
18052: LD_INT 0
18054: ST_TO_ADDR
// end ;
18055: LD_VAR 0 3
18059: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
18060: LD_INT 0
18062: PPUSH
18063: PPUSH
// if not array1 or not array2 then
18064: LD_VAR 0 1
18068: NOT
18069: PUSH
18070: LD_VAR 0 2
18074: NOT
18075: OR
18076: IFFALSE 18080
// exit ;
18078: GO 18144
// result := true ;
18080: LD_ADDR_VAR 0 3
18084: PUSH
18085: LD_INT 1
18087: ST_TO_ADDR
// for i = 1 to array1 do
18088: LD_ADDR_VAR 0 4
18092: PUSH
18093: DOUBLE
18094: LD_INT 1
18096: DEC
18097: ST_TO_ADDR
18098: LD_VAR 0 1
18102: PUSH
18103: FOR_TO
18104: IFFALSE 18142
// if array1 [ i ] <> array2 [ i ] then
18106: LD_VAR 0 1
18110: PUSH
18111: LD_VAR 0 4
18115: ARRAY
18116: PUSH
18117: LD_VAR 0 2
18121: PUSH
18122: LD_VAR 0 4
18126: ARRAY
18127: NONEQUAL
18128: IFFALSE 18140
// begin result := false ;
18130: LD_ADDR_VAR 0 3
18134: PUSH
18135: LD_INT 0
18137: ST_TO_ADDR
// break ;
18138: GO 18142
// end ;
18140: GO 18103
18142: POP
18143: POP
// end ;
18144: LD_VAR 0 3
18148: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
18149: LD_INT 0
18151: PPUSH
18152: PPUSH
18153: PPUSH
// pom := GetBase ( fac ) ;
18154: LD_ADDR_VAR 0 5
18158: PUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 274
18168: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
18169: LD_ADDR_VAR 0 4
18173: PUSH
18174: LD_VAR 0 2
18178: PUSH
18179: LD_INT 1
18181: ARRAY
18182: PPUSH
18183: LD_VAR 0 2
18187: PUSH
18188: LD_INT 2
18190: ARRAY
18191: PPUSH
18192: LD_VAR 0 2
18196: PUSH
18197: LD_INT 3
18199: ARRAY
18200: PPUSH
18201: LD_VAR 0 2
18205: PUSH
18206: LD_INT 4
18208: ARRAY
18209: PPUSH
18210: CALL_OW 449
18214: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18215: LD_ADDR_VAR 0 3
18219: PUSH
18220: LD_VAR 0 5
18224: PPUSH
18225: LD_INT 1
18227: PPUSH
18228: CALL_OW 275
18232: PUSH
18233: LD_VAR 0 4
18237: PUSH
18238: LD_INT 1
18240: ARRAY
18241: GREATEREQUAL
18242: PUSH
18243: LD_VAR 0 5
18247: PPUSH
18248: LD_INT 2
18250: PPUSH
18251: CALL_OW 275
18255: PUSH
18256: LD_VAR 0 4
18260: PUSH
18261: LD_INT 2
18263: ARRAY
18264: GREATEREQUAL
18265: AND
18266: PUSH
18267: LD_VAR 0 5
18271: PPUSH
18272: LD_INT 3
18274: PPUSH
18275: CALL_OW 275
18279: PUSH
18280: LD_VAR 0 4
18284: PUSH
18285: LD_INT 3
18287: ARRAY
18288: GREATEREQUAL
18289: AND
18290: ST_TO_ADDR
// end ;
18291: LD_VAR 0 3
18295: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18296: LD_INT 0
18298: PPUSH
18299: PPUSH
18300: PPUSH
18301: PPUSH
// pom := GetBase ( building ) ;
18302: LD_ADDR_VAR 0 3
18306: PUSH
18307: LD_VAR 0 1
18311: PPUSH
18312: CALL_OW 274
18316: ST_TO_ADDR
// if not pom then
18317: LD_VAR 0 3
18321: NOT
18322: IFFALSE 18326
// exit ;
18324: GO 18496
// btype := GetBType ( building ) ;
18326: LD_ADDR_VAR 0 5
18330: PUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 266
18340: ST_TO_ADDR
// if btype = b_armoury then
18341: LD_VAR 0 5
18345: PUSH
18346: LD_INT 4
18348: EQUAL
18349: IFFALSE 18359
// btype := b_barracks ;
18351: LD_ADDR_VAR 0 5
18355: PUSH
18356: LD_INT 5
18358: ST_TO_ADDR
// if btype = b_depot then
18359: LD_VAR 0 5
18363: PUSH
18364: LD_INT 0
18366: EQUAL
18367: IFFALSE 18377
// btype := b_warehouse ;
18369: LD_ADDR_VAR 0 5
18373: PUSH
18374: LD_INT 1
18376: ST_TO_ADDR
// if btype = b_workshop then
18377: LD_VAR 0 5
18381: PUSH
18382: LD_INT 2
18384: EQUAL
18385: IFFALSE 18395
// btype := b_factory ;
18387: LD_ADDR_VAR 0 5
18391: PUSH
18392: LD_INT 3
18394: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18395: LD_ADDR_VAR 0 4
18399: PUSH
18400: LD_VAR 0 5
18404: PPUSH
18405: LD_VAR 0 1
18409: PPUSH
18410: CALL_OW 248
18414: PPUSH
18415: CALL_OW 450
18419: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18420: LD_ADDR_VAR 0 2
18424: PUSH
18425: LD_VAR 0 3
18429: PPUSH
18430: LD_INT 1
18432: PPUSH
18433: CALL_OW 275
18437: PUSH
18438: LD_VAR 0 4
18442: PUSH
18443: LD_INT 1
18445: ARRAY
18446: GREATEREQUAL
18447: PUSH
18448: LD_VAR 0 3
18452: PPUSH
18453: LD_INT 2
18455: PPUSH
18456: CALL_OW 275
18460: PUSH
18461: LD_VAR 0 4
18465: PUSH
18466: LD_INT 2
18468: ARRAY
18469: GREATEREQUAL
18470: AND
18471: PUSH
18472: LD_VAR 0 3
18476: PPUSH
18477: LD_INT 3
18479: PPUSH
18480: CALL_OW 275
18484: PUSH
18485: LD_VAR 0 4
18489: PUSH
18490: LD_INT 3
18492: ARRAY
18493: GREATEREQUAL
18494: AND
18495: ST_TO_ADDR
// end ;
18496: LD_VAR 0 2
18500: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18501: LD_INT 0
18503: PPUSH
18504: PPUSH
18505: PPUSH
// pom := GetBase ( building ) ;
18506: LD_ADDR_VAR 0 4
18510: PUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: CALL_OW 274
18520: ST_TO_ADDR
// if not pom then
18521: LD_VAR 0 4
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18631
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18530: LD_ADDR_VAR 0 5
18534: PUSH
18535: LD_VAR 0 2
18539: PPUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 248
18549: PPUSH
18550: CALL_OW 450
18554: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18555: LD_ADDR_VAR 0 3
18559: PUSH
18560: LD_VAR 0 4
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 275
18572: PUSH
18573: LD_VAR 0 5
18577: PUSH
18578: LD_INT 1
18580: ARRAY
18581: GREATEREQUAL
18582: PUSH
18583: LD_VAR 0 4
18587: PPUSH
18588: LD_INT 2
18590: PPUSH
18591: CALL_OW 275
18595: PUSH
18596: LD_VAR 0 5
18600: PUSH
18601: LD_INT 2
18603: ARRAY
18604: GREATEREQUAL
18605: AND
18606: PUSH
18607: LD_VAR 0 4
18611: PPUSH
18612: LD_INT 3
18614: PPUSH
18615: CALL_OW 275
18619: PUSH
18620: LD_VAR 0 5
18624: PUSH
18625: LD_INT 3
18627: ARRAY
18628: GREATEREQUAL
18629: AND
18630: ST_TO_ADDR
// end ;
18631: LD_VAR 0 3
18635: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18636: LD_INT 0
18638: PPUSH
18639: PPUSH
18640: PPUSH
18641: PPUSH
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
18646: PPUSH
18647: PPUSH
18648: PPUSH
// result := false ;
18649: LD_ADDR_VAR 0 8
18653: PUSH
18654: LD_INT 0
18656: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18657: LD_VAR 0 5
18661: NOT
18662: PUSH
18663: LD_VAR 0 1
18667: NOT
18668: OR
18669: PUSH
18670: LD_VAR 0 2
18674: NOT
18675: OR
18676: PUSH
18677: LD_VAR 0 3
18681: NOT
18682: OR
18683: IFFALSE 18687
// exit ;
18685: GO 19501
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18687: LD_ADDR_VAR 0 14
18691: PUSH
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_VAR 0 2
18701: PPUSH
18702: LD_VAR 0 3
18706: PPUSH
18707: LD_VAR 0 4
18711: PPUSH
18712: LD_VAR 0 5
18716: PUSH
18717: LD_INT 1
18719: ARRAY
18720: PPUSH
18721: CALL_OW 248
18725: PPUSH
18726: LD_INT 0
18728: PPUSH
18729: CALL 20754 0 6
18733: ST_TO_ADDR
// if not hexes then
18734: LD_VAR 0 14
18738: NOT
18739: IFFALSE 18743
// exit ;
18741: GO 19501
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18743: LD_ADDR_VAR 0 17
18747: PUSH
18748: LD_VAR 0 5
18752: PPUSH
18753: LD_INT 22
18755: PUSH
18756: LD_VAR 0 13
18760: PPUSH
18761: CALL_OW 255
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 2
18772: PUSH
18773: LD_INT 30
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 30
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 72
18806: ST_TO_ADDR
// for i = 1 to hexes do
18807: LD_ADDR_VAR 0 9
18811: PUSH
18812: DOUBLE
18813: LD_INT 1
18815: DEC
18816: ST_TO_ADDR
18817: LD_VAR 0 14
18821: PUSH
18822: FOR_TO
18823: IFFALSE 19499
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18825: LD_ADDR_VAR 0 13
18829: PUSH
18830: LD_VAR 0 14
18834: PUSH
18835: LD_VAR 0 9
18839: ARRAY
18840: PUSH
18841: LD_INT 1
18843: ARRAY
18844: PPUSH
18845: LD_VAR 0 14
18849: PUSH
18850: LD_VAR 0 9
18854: ARRAY
18855: PUSH
18856: LD_INT 2
18858: ARRAY
18859: PPUSH
18860: CALL_OW 428
18864: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18865: LD_VAR 0 14
18869: PUSH
18870: LD_VAR 0 9
18874: ARRAY
18875: PUSH
18876: LD_INT 1
18878: ARRAY
18879: PPUSH
18880: LD_VAR 0 14
18884: PUSH
18885: LD_VAR 0 9
18889: ARRAY
18890: PUSH
18891: LD_INT 2
18893: ARRAY
18894: PPUSH
18895: CALL_OW 351
18899: PUSH
18900: LD_VAR 0 14
18904: PUSH
18905: LD_VAR 0 9
18909: ARRAY
18910: PUSH
18911: LD_INT 1
18913: ARRAY
18914: PPUSH
18915: LD_VAR 0 14
18919: PUSH
18920: LD_VAR 0 9
18924: ARRAY
18925: PUSH
18926: LD_INT 2
18928: ARRAY
18929: PPUSH
18930: CALL_OW 488
18934: NOT
18935: OR
18936: PUSH
18937: LD_VAR 0 13
18941: PPUSH
18942: CALL_OW 247
18946: PUSH
18947: LD_INT 3
18949: EQUAL
18950: OR
18951: IFFALSE 18957
// exit ;
18953: POP
18954: POP
18955: GO 19501
// if not tmp then
18957: LD_VAR 0 13
18961: NOT
18962: IFFALSE 18966
// continue ;
18964: GO 18822
// result := true ;
18966: LD_ADDR_VAR 0 8
18970: PUSH
18971: LD_INT 1
18973: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18974: LD_VAR 0 6
18978: PUSH
18979: LD_VAR 0 13
18983: PPUSH
18984: CALL_OW 247
18988: PUSH
18989: LD_INT 2
18991: EQUAL
18992: AND
18993: PUSH
18994: LD_VAR 0 13
18998: PPUSH
18999: CALL_OW 263
19003: PUSH
19004: LD_INT 1
19006: EQUAL
19007: AND
19008: IFFALSE 19172
// begin if IsDrivenBy ( tmp ) then
19010: LD_VAR 0 13
19014: PPUSH
19015: CALL_OW 311
19019: IFFALSE 19023
// continue ;
19021: GO 18822
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19023: LD_VAR 0 6
19027: PPUSH
19028: LD_INT 3
19030: PUSH
19031: LD_INT 60
19033: PUSH
19034: EMPTY
19035: LIST
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: LD_INT 55
19046: PUSH
19047: EMPTY
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PPUSH
19058: CALL_OW 72
19062: IFFALSE 19170
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
19064: LD_ADDR_VAR 0 18
19068: PUSH
19069: LD_VAR 0 6
19073: PPUSH
19074: LD_INT 3
19076: PUSH
19077: LD_INT 60
19079: PUSH
19080: EMPTY
19081: LIST
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 3
19089: PUSH
19090: LD_INT 55
19092: PUSH
19093: EMPTY
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 72
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: ST_TO_ADDR
// if IsInUnit ( driver ) then
19113: LD_VAR 0 18
19117: PPUSH
19118: CALL_OW 310
19122: IFFALSE 19133
// ComExit ( driver ) ;
19124: LD_VAR 0 18
19128: PPUSH
19129: CALL 44555 0 1
// AddComEnterUnit ( driver , tmp ) ;
19133: LD_VAR 0 18
19137: PPUSH
19138: LD_VAR 0 13
19142: PPUSH
19143: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
19147: LD_VAR 0 18
19151: PPUSH
19152: LD_VAR 0 7
19156: PPUSH
19157: CALL_OW 173
// AddComExitVehicle ( driver ) ;
19161: LD_VAR 0 18
19165: PPUSH
19166: CALL_OW 181
// end ; continue ;
19170: GO 18822
// end ; if not cleaners or not tmp in cleaners then
19172: LD_VAR 0 6
19176: NOT
19177: PUSH
19178: LD_VAR 0 13
19182: PUSH
19183: LD_VAR 0 6
19187: IN
19188: NOT
19189: OR
19190: IFFALSE 19497
// begin if dep then
19192: LD_VAR 0 17
19196: IFFALSE 19332
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
19198: LD_ADDR_VAR 0 16
19202: PUSH
19203: LD_VAR 0 17
19207: PUSH
19208: LD_INT 1
19210: ARRAY
19211: PPUSH
19212: CALL_OW 250
19216: PPUSH
19217: LD_VAR 0 17
19221: PUSH
19222: LD_INT 1
19224: ARRAY
19225: PPUSH
19226: CALL_OW 254
19230: PPUSH
19231: LD_INT 5
19233: PPUSH
19234: CALL_OW 272
19238: PUSH
19239: LD_VAR 0 17
19243: PUSH
19244: LD_INT 1
19246: ARRAY
19247: PPUSH
19248: CALL_OW 251
19252: PPUSH
19253: LD_VAR 0 17
19257: PUSH
19258: LD_INT 1
19260: ARRAY
19261: PPUSH
19262: CALL_OW 254
19266: PPUSH
19267: LD_INT 5
19269: PPUSH
19270: CALL_OW 273
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19279: LD_VAR 0 16
19283: PUSH
19284: LD_INT 1
19286: ARRAY
19287: PPUSH
19288: LD_VAR 0 16
19292: PUSH
19293: LD_INT 2
19295: ARRAY
19296: PPUSH
19297: CALL_OW 488
19301: IFFALSE 19332
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19303: LD_VAR 0 13
19307: PPUSH
19308: LD_VAR 0 16
19312: PUSH
19313: LD_INT 1
19315: ARRAY
19316: PPUSH
19317: LD_VAR 0 16
19321: PUSH
19322: LD_INT 2
19324: ARRAY
19325: PPUSH
19326: CALL_OW 111
// continue ;
19330: GO 18822
// end ; end ; r := GetDir ( tmp ) ;
19332: LD_ADDR_VAR 0 15
19336: PUSH
19337: LD_VAR 0 13
19341: PPUSH
19342: CALL_OW 254
19346: ST_TO_ADDR
// if r = 5 then
19347: LD_VAR 0 15
19351: PUSH
19352: LD_INT 5
19354: EQUAL
19355: IFFALSE 19365
// r := 0 ;
19357: LD_ADDR_VAR 0 15
19361: PUSH
19362: LD_INT 0
19364: ST_TO_ADDR
// for j = r to 5 do
19365: LD_ADDR_VAR 0 10
19369: PUSH
19370: DOUBLE
19371: LD_VAR 0 15
19375: DEC
19376: ST_TO_ADDR
19377: LD_INT 5
19379: PUSH
19380: FOR_TO
19381: IFFALSE 19495
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19383: LD_ADDR_VAR 0 11
19387: PUSH
19388: LD_VAR 0 13
19392: PPUSH
19393: CALL_OW 250
19397: PPUSH
19398: LD_VAR 0 10
19402: PPUSH
19403: LD_INT 2
19405: PPUSH
19406: CALL_OW 272
19410: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19411: LD_ADDR_VAR 0 12
19415: PUSH
19416: LD_VAR 0 13
19420: PPUSH
19421: CALL_OW 251
19425: PPUSH
19426: LD_VAR 0 10
19430: PPUSH
19431: LD_INT 2
19433: PPUSH
19434: CALL_OW 273
19438: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19439: LD_VAR 0 11
19443: PPUSH
19444: LD_VAR 0 12
19448: PPUSH
19449: CALL_OW 488
19453: PUSH
19454: LD_VAR 0 11
19458: PPUSH
19459: LD_VAR 0 12
19463: PPUSH
19464: CALL_OW 428
19468: NOT
19469: AND
19470: IFFALSE 19493
// begin ComMoveXY ( tmp , _x , _y ) ;
19472: LD_VAR 0 13
19476: PPUSH
19477: LD_VAR 0 11
19481: PPUSH
19482: LD_VAR 0 12
19486: PPUSH
19487: CALL_OW 111
// break ;
19491: GO 19495
// end ; end ;
19493: GO 19380
19495: POP
19496: POP
// end ; end ;
19497: GO 18822
19499: POP
19500: POP
// end ;
19501: LD_VAR 0 8
19505: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19506: LD_INT 0
19508: PPUSH
// result := true ;
19509: LD_ADDR_VAR 0 3
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19517: LD_VAR 0 2
19521: PUSH
19522: LD_INT 24
19524: DOUBLE
19525: EQUAL
19526: IFTRUE 19536
19528: LD_INT 33
19530: DOUBLE
19531: EQUAL
19532: IFTRUE 19536
19534: GO 19561
19536: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19537: LD_ADDR_VAR 0 3
19541: PUSH
19542: LD_INT 32
19544: PPUSH
19545: LD_VAR 0 1
19549: PPUSH
19550: CALL_OW 321
19554: PUSH
19555: LD_INT 2
19557: EQUAL
19558: ST_TO_ADDR
19559: GO 19877
19561: LD_INT 20
19563: DOUBLE
19564: EQUAL
19565: IFTRUE 19569
19567: GO 19594
19569: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19570: LD_ADDR_VAR 0 3
19574: PUSH
19575: LD_INT 6
19577: PPUSH
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 321
19587: PUSH
19588: LD_INT 2
19590: EQUAL
19591: ST_TO_ADDR
19592: GO 19877
19594: LD_INT 22
19596: DOUBLE
19597: EQUAL
19598: IFTRUE 19608
19600: LD_INT 36
19602: DOUBLE
19603: EQUAL
19604: IFTRUE 19608
19606: GO 19633
19608: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19609: LD_ADDR_VAR 0 3
19613: PUSH
19614: LD_INT 15
19616: PPUSH
19617: LD_VAR 0 1
19621: PPUSH
19622: CALL_OW 321
19626: PUSH
19627: LD_INT 2
19629: EQUAL
19630: ST_TO_ADDR
19631: GO 19877
19633: LD_INT 30
19635: DOUBLE
19636: EQUAL
19637: IFTRUE 19641
19639: GO 19666
19641: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19642: LD_ADDR_VAR 0 3
19646: PUSH
19647: LD_INT 20
19649: PPUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL_OW 321
19659: PUSH
19660: LD_INT 2
19662: EQUAL
19663: ST_TO_ADDR
19664: GO 19877
19666: LD_INT 28
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19680
19672: LD_INT 21
19674: DOUBLE
19675: EQUAL
19676: IFTRUE 19680
19678: GO 19705
19680: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19681: LD_ADDR_VAR 0 3
19685: PUSH
19686: LD_INT 21
19688: PPUSH
19689: LD_VAR 0 1
19693: PPUSH
19694: CALL_OW 321
19698: PUSH
19699: LD_INT 2
19701: EQUAL
19702: ST_TO_ADDR
19703: GO 19877
19705: LD_INT 16
19707: DOUBLE
19708: EQUAL
19709: IFTRUE 19713
19711: GO 19738
19713: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19714: LD_ADDR_VAR 0 3
19718: PUSH
19719: LD_INT 84
19721: PPUSH
19722: LD_VAR 0 1
19726: PPUSH
19727: CALL_OW 321
19731: PUSH
19732: LD_INT 2
19734: EQUAL
19735: ST_TO_ADDR
19736: GO 19877
19738: LD_INT 19
19740: DOUBLE
19741: EQUAL
19742: IFTRUE 19752
19744: LD_INT 23
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19777
19752: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19753: LD_ADDR_VAR 0 3
19757: PUSH
19758: LD_INT 83
19760: PPUSH
19761: LD_VAR 0 1
19765: PPUSH
19766: CALL_OW 321
19770: PUSH
19771: LD_INT 2
19773: EQUAL
19774: ST_TO_ADDR
19775: GO 19877
19777: LD_INT 17
19779: DOUBLE
19780: EQUAL
19781: IFTRUE 19785
19783: GO 19810
19785: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_INT 39
19793: PPUSH
19794: LD_VAR 0 1
19798: PPUSH
19799: CALL_OW 321
19803: PUSH
19804: LD_INT 2
19806: EQUAL
19807: ST_TO_ADDR
19808: GO 19877
19810: LD_INT 18
19812: DOUBLE
19813: EQUAL
19814: IFTRUE 19818
19816: GO 19843
19818: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19819: LD_ADDR_VAR 0 3
19823: PUSH
19824: LD_INT 40
19826: PPUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 321
19836: PUSH
19837: LD_INT 2
19839: EQUAL
19840: ST_TO_ADDR
19841: GO 19877
19843: LD_INT 27
19845: DOUBLE
19846: EQUAL
19847: IFTRUE 19851
19849: GO 19876
19851: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19852: LD_ADDR_VAR 0 3
19856: PUSH
19857: LD_INT 35
19859: PPUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 321
19869: PUSH
19870: LD_INT 2
19872: EQUAL
19873: ST_TO_ADDR
19874: GO 19877
19876: POP
// end ;
19877: LD_VAR 0 3
19881: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19882: LD_INT 0
19884: PPUSH
19885: PPUSH
19886: PPUSH
19887: PPUSH
19888: PPUSH
19889: PPUSH
19890: PPUSH
19891: PPUSH
19892: PPUSH
19893: PPUSH
19894: PPUSH
// result := false ;
19895: LD_ADDR_VAR 0 6
19899: PUSH
19900: LD_INT 0
19902: ST_TO_ADDR
// if btype = b_depot then
19903: LD_VAR 0 2
19907: PUSH
19908: LD_INT 0
19910: EQUAL
19911: IFFALSE 19923
// begin result := true ;
19913: LD_ADDR_VAR 0 6
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// exit ;
19921: GO 20749
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19923: LD_VAR 0 1
19927: NOT
19928: PUSH
19929: LD_VAR 0 1
19933: PPUSH
19934: CALL_OW 266
19938: PUSH
19939: LD_INT 0
19941: PUSH
19942: LD_INT 1
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: IN
19949: NOT
19950: OR
19951: PUSH
19952: LD_VAR 0 2
19956: NOT
19957: OR
19958: PUSH
19959: LD_VAR 0 5
19963: PUSH
19964: LD_INT 0
19966: PUSH
19967: LD_INT 1
19969: PUSH
19970: LD_INT 2
19972: PUSH
19973: LD_INT 3
19975: PUSH
19976: LD_INT 4
19978: PUSH
19979: LD_INT 5
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: IN
19990: NOT
19991: OR
19992: PUSH
19993: LD_VAR 0 3
19997: PPUSH
19998: LD_VAR 0 4
20002: PPUSH
20003: CALL_OW 488
20007: NOT
20008: OR
20009: IFFALSE 20013
// exit ;
20011: GO 20749
// side := GetSide ( depot ) ;
20013: LD_ADDR_VAR 0 9
20017: PUSH
20018: LD_VAR 0 1
20022: PPUSH
20023: CALL_OW 255
20027: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20028: LD_VAR 0 9
20032: PPUSH
20033: LD_VAR 0 2
20037: PPUSH
20038: CALL 19506 0 2
20042: NOT
20043: IFFALSE 20047
// exit ;
20045: GO 20749
// pom := GetBase ( depot ) ;
20047: LD_ADDR_VAR 0 10
20051: PUSH
20052: LD_VAR 0 1
20056: PPUSH
20057: CALL_OW 274
20061: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20062: LD_ADDR_VAR 0 11
20066: PUSH
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL_OW 248
20081: PPUSH
20082: CALL_OW 450
20086: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20087: LD_VAR 0 10
20091: PPUSH
20092: LD_INT 1
20094: PPUSH
20095: CALL_OW 275
20099: PUSH
20100: LD_VAR 0 11
20104: PUSH
20105: LD_INT 1
20107: ARRAY
20108: GREATEREQUAL
20109: PUSH
20110: LD_VAR 0 10
20114: PPUSH
20115: LD_INT 2
20117: PPUSH
20118: CALL_OW 275
20122: PUSH
20123: LD_VAR 0 11
20127: PUSH
20128: LD_INT 2
20130: ARRAY
20131: GREATEREQUAL
20132: AND
20133: PUSH
20134: LD_VAR 0 10
20138: PPUSH
20139: LD_INT 3
20141: PPUSH
20142: CALL_OW 275
20146: PUSH
20147: LD_VAR 0 11
20151: PUSH
20152: LD_INT 3
20154: ARRAY
20155: GREATEREQUAL
20156: AND
20157: NOT
20158: IFFALSE 20162
// exit ;
20160: GO 20749
// if GetBType ( depot ) = b_depot then
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 266
20171: PUSH
20172: LD_INT 0
20174: EQUAL
20175: IFFALSE 20187
// dist := 28 else
20177: LD_ADDR_VAR 0 14
20181: PUSH
20182: LD_INT 28
20184: ST_TO_ADDR
20185: GO 20195
// dist := 36 ;
20187: LD_ADDR_VAR 0 14
20191: PUSH
20192: LD_INT 36
20194: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20195: LD_VAR 0 1
20199: PPUSH
20200: LD_VAR 0 3
20204: PPUSH
20205: LD_VAR 0 4
20209: PPUSH
20210: CALL_OW 297
20214: PUSH
20215: LD_VAR 0 14
20219: GREATER
20220: IFFALSE 20224
// exit ;
20222: GO 20749
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20224: LD_ADDR_VAR 0 12
20228: PUSH
20229: LD_VAR 0 2
20233: PPUSH
20234: LD_VAR 0 3
20238: PPUSH
20239: LD_VAR 0 4
20243: PPUSH
20244: LD_VAR 0 5
20248: PPUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 248
20258: PPUSH
20259: LD_INT 0
20261: PPUSH
20262: CALL 20754 0 6
20266: ST_TO_ADDR
// if not hexes then
20267: LD_VAR 0 12
20271: NOT
20272: IFFALSE 20276
// exit ;
20274: GO 20749
// hex := GetHexInfo ( x , y ) ;
20276: LD_ADDR_VAR 0 15
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_VAR 0 4
20290: PPUSH
20291: CALL_OW 546
20295: ST_TO_ADDR
// if hex [ 1 ] then
20296: LD_VAR 0 15
20300: PUSH
20301: LD_INT 1
20303: ARRAY
20304: IFFALSE 20308
// exit ;
20306: GO 20749
// height := hex [ 2 ] ;
20308: LD_ADDR_VAR 0 13
20312: PUSH
20313: LD_VAR 0 15
20317: PUSH
20318: LD_INT 2
20320: ARRAY
20321: ST_TO_ADDR
// for i = 1 to hexes do
20322: LD_ADDR_VAR 0 7
20326: PUSH
20327: DOUBLE
20328: LD_INT 1
20330: DEC
20331: ST_TO_ADDR
20332: LD_VAR 0 12
20336: PUSH
20337: FOR_TO
20338: IFFALSE 20668
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20340: LD_VAR 0 12
20344: PUSH
20345: LD_VAR 0 7
20349: ARRAY
20350: PUSH
20351: LD_INT 1
20353: ARRAY
20354: PPUSH
20355: LD_VAR 0 12
20359: PUSH
20360: LD_VAR 0 7
20364: ARRAY
20365: PUSH
20366: LD_INT 2
20368: ARRAY
20369: PPUSH
20370: CALL_OW 488
20374: NOT
20375: PUSH
20376: LD_VAR 0 12
20380: PUSH
20381: LD_VAR 0 7
20385: ARRAY
20386: PUSH
20387: LD_INT 1
20389: ARRAY
20390: PPUSH
20391: LD_VAR 0 12
20395: PUSH
20396: LD_VAR 0 7
20400: ARRAY
20401: PUSH
20402: LD_INT 2
20404: ARRAY
20405: PPUSH
20406: CALL_OW 428
20410: PUSH
20411: LD_INT 0
20413: GREATER
20414: OR
20415: PUSH
20416: LD_VAR 0 12
20420: PUSH
20421: LD_VAR 0 7
20425: ARRAY
20426: PUSH
20427: LD_INT 1
20429: ARRAY
20430: PPUSH
20431: LD_VAR 0 12
20435: PUSH
20436: LD_VAR 0 7
20440: ARRAY
20441: PUSH
20442: LD_INT 2
20444: ARRAY
20445: PPUSH
20446: CALL_OW 351
20450: OR
20451: IFFALSE 20457
// exit ;
20453: POP
20454: POP
20455: GO 20749
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20457: LD_ADDR_VAR 0 8
20461: PUSH
20462: LD_VAR 0 12
20466: PUSH
20467: LD_VAR 0 7
20471: ARRAY
20472: PUSH
20473: LD_INT 1
20475: ARRAY
20476: PPUSH
20477: LD_VAR 0 12
20481: PUSH
20482: LD_VAR 0 7
20486: ARRAY
20487: PUSH
20488: LD_INT 2
20490: ARRAY
20491: PPUSH
20492: CALL_OW 546
20496: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20497: LD_VAR 0 8
20501: PUSH
20502: LD_INT 1
20504: ARRAY
20505: PUSH
20506: LD_VAR 0 8
20510: PUSH
20511: LD_INT 2
20513: ARRAY
20514: PUSH
20515: LD_VAR 0 13
20519: PUSH
20520: LD_INT 2
20522: PLUS
20523: GREATER
20524: OR
20525: PUSH
20526: LD_VAR 0 8
20530: PUSH
20531: LD_INT 2
20533: ARRAY
20534: PUSH
20535: LD_VAR 0 13
20539: PUSH
20540: LD_INT 2
20542: MINUS
20543: LESS
20544: OR
20545: PUSH
20546: LD_VAR 0 8
20550: PUSH
20551: LD_INT 3
20553: ARRAY
20554: PUSH
20555: LD_INT 0
20557: PUSH
20558: LD_INT 8
20560: PUSH
20561: LD_INT 9
20563: PUSH
20564: LD_INT 10
20566: PUSH
20567: LD_INT 11
20569: PUSH
20570: LD_INT 12
20572: PUSH
20573: LD_INT 13
20575: PUSH
20576: LD_INT 16
20578: PUSH
20579: LD_INT 17
20581: PUSH
20582: LD_INT 18
20584: PUSH
20585: LD_INT 19
20587: PUSH
20588: LD_INT 20
20590: PUSH
20591: LD_INT 21
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: IN
20609: NOT
20610: OR
20611: PUSH
20612: LD_VAR 0 8
20616: PUSH
20617: LD_INT 5
20619: ARRAY
20620: NOT
20621: OR
20622: PUSH
20623: LD_VAR 0 8
20627: PUSH
20628: LD_INT 6
20630: ARRAY
20631: PUSH
20632: LD_INT 1
20634: PUSH
20635: LD_INT 2
20637: PUSH
20638: LD_INT 7
20640: PUSH
20641: LD_INT 9
20643: PUSH
20644: LD_INT 10
20646: PUSH
20647: LD_INT 11
20649: PUSH
20650: EMPTY
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: IN
20658: NOT
20659: OR
20660: IFFALSE 20666
// exit ;
20662: POP
20663: POP
20664: GO 20749
// end ;
20666: GO 20337
20668: POP
20669: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20670: LD_VAR 0 9
20674: PPUSH
20675: LD_VAR 0 3
20679: PPUSH
20680: LD_VAR 0 4
20684: PPUSH
20685: LD_INT 20
20687: PPUSH
20688: CALL 12672 0 4
20692: PUSH
20693: LD_INT 4
20695: ARRAY
20696: IFFALSE 20700
// exit ;
20698: GO 20749
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20700: LD_VAR 0 2
20704: PUSH
20705: LD_INT 29
20707: PUSH
20708: LD_INT 30
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: IN
20715: PUSH
20716: LD_VAR 0 3
20720: PPUSH
20721: LD_VAR 0 4
20725: PPUSH
20726: LD_VAR 0 9
20730: PPUSH
20731: CALL_OW 440
20735: NOT
20736: AND
20737: IFFALSE 20741
// exit ;
20739: GO 20749
// result := true ;
20741: LD_ADDR_VAR 0 6
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// end ;
20749: LD_VAR 0 6
20753: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20754: LD_INT 0
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
20760: PPUSH
20761: PPUSH
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
20778: PPUSH
20779: PPUSH
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
20792: PPUSH
20793: PPUSH
20794: PPUSH
20795: PPUSH
20796: PPUSH
20797: PPUSH
20798: PPUSH
20799: PPUSH
20800: PPUSH
20801: PPUSH
20802: PPUSH
20803: PPUSH
20804: PPUSH
20805: PPUSH
20806: PPUSH
20807: PPUSH
20808: PPUSH
20809: PPUSH
20810: PPUSH
20811: PPUSH
20812: PPUSH
20813: PPUSH
// result = [ ] ;
20814: LD_ADDR_VAR 0 7
20818: PUSH
20819: EMPTY
20820: ST_TO_ADDR
// temp_list = [ ] ;
20821: LD_ADDR_VAR 0 9
20825: PUSH
20826: EMPTY
20827: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20828: LD_VAR 0 4
20832: PUSH
20833: LD_INT 0
20835: PUSH
20836: LD_INT 1
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 3
20844: PUSH
20845: LD_INT 4
20847: PUSH
20848: LD_INT 5
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: IN
20859: NOT
20860: PUSH
20861: LD_VAR 0 1
20865: PUSH
20866: LD_INT 0
20868: PUSH
20869: LD_INT 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: IN
20876: PUSH
20877: LD_VAR 0 5
20881: PUSH
20882: LD_INT 1
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: LD_INT 3
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: LIST
20895: IN
20896: NOT
20897: AND
20898: OR
20899: IFFALSE 20903
// exit ;
20901: GO 39294
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20903: LD_VAR 0 1
20907: PUSH
20908: LD_INT 6
20910: PUSH
20911: LD_INT 7
20913: PUSH
20914: LD_INT 8
20916: PUSH
20917: LD_INT 13
20919: PUSH
20920: LD_INT 12
20922: PUSH
20923: LD_INT 15
20925: PUSH
20926: LD_INT 11
20928: PUSH
20929: LD_INT 14
20931: PUSH
20932: LD_INT 10
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: IN
20946: IFFALSE 20956
// btype = b_lab ;
20948: LD_ADDR_VAR 0 1
20952: PUSH
20953: LD_INT 6
20955: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20956: LD_VAR 0 6
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: LIST
20974: IN
20975: NOT
20976: PUSH
20977: LD_VAR 0 1
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: LD_INT 1
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: LD_INT 3
20993: PUSH
20994: LD_INT 6
20996: PUSH
20997: LD_INT 36
20999: PUSH
21000: LD_INT 4
21002: PUSH
21003: LD_INT 5
21005: PUSH
21006: LD_INT 31
21008: PUSH
21009: LD_INT 32
21011: PUSH
21012: LD_INT 33
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: IN
21028: NOT
21029: PUSH
21030: LD_VAR 0 6
21034: PUSH
21035: LD_INT 1
21037: EQUAL
21038: AND
21039: OR
21040: PUSH
21041: LD_VAR 0 1
21045: PUSH
21046: LD_INT 2
21048: PUSH
21049: LD_INT 3
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: IN
21056: NOT
21057: PUSH
21058: LD_VAR 0 6
21062: PUSH
21063: LD_INT 2
21065: EQUAL
21066: AND
21067: OR
21068: IFFALSE 21078
// mode = 0 ;
21070: LD_ADDR_VAR 0 6
21074: PUSH
21075: LD_INT 0
21077: ST_TO_ADDR
// case mode of 0 :
21078: LD_VAR 0 6
21082: PUSH
21083: LD_INT 0
21085: DOUBLE
21086: EQUAL
21087: IFTRUE 21091
21089: GO 32544
21091: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21092: LD_ADDR_VAR 0 11
21096: PUSH
21097: LD_INT 0
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 0
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 1
21120: PUSH
21121: LD_INT 0
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PUSH
21128: LD_INT 1
21130: PUSH
21131: LD_INT 1
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 0
21140: PUSH
21141: LD_INT 1
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: PUSH
21152: LD_INT 0
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: PUSH
21159: LD_INT 1
21161: NEG
21162: PUSH
21163: LD_INT 1
21165: NEG
21166: PUSH
21167: EMPTY
21168: LIST
21169: LIST
21170: PUSH
21171: LD_INT 1
21173: NEG
21174: PUSH
21175: LD_INT 2
21177: NEG
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 0
21185: PUSH
21186: LD_INT 2
21188: NEG
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 1
21196: PUSH
21197: LD_INT 1
21199: NEG
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: LD_INT 2
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 0
21217: PUSH
21218: LD_INT 2
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 1
21227: NEG
21228: PUSH
21229: LD_INT 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 1
21238: PUSH
21239: LD_INT 3
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: LD_INT 3
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: LD_INT 2
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21285: LD_ADDR_VAR 0 12
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: LD_INT 1
21305: NEG
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: PUSH
21311: LD_INT 1
21313: PUSH
21314: LD_INT 0
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: PUSH
21321: LD_INT 1
21323: PUSH
21324: LD_INT 1
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 0
21333: PUSH
21334: LD_INT 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 1
21343: NEG
21344: PUSH
21345: LD_INT 0
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 1
21354: NEG
21355: PUSH
21356: LD_INT 1
21358: NEG
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 1
21366: PUSH
21367: LD_INT 1
21369: NEG
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 0
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: PUSH
21388: LD_INT 1
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PUSH
21395: LD_INT 1
21397: NEG
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 2
21408: NEG
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 2
21419: NEG
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 2
21431: NEG
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: PUSH
21440: LD_INT 3
21442: NEG
21443: PUSH
21444: LD_INT 0
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 3
21453: NEG
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21481: LD_ADDR_VAR 0 13
21485: PUSH
21486: LD_INT 0
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 0
21498: PUSH
21499: LD_INT 1
21501: NEG
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 1
21509: PUSH
21510: LD_INT 0
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 0
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: PUSH
21537: LD_INT 1
21539: NEG
21540: PUSH
21541: LD_INT 0
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 1
21550: NEG
21551: PUSH
21552: LD_INT 1
21554: NEG
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PUSH
21560: LD_INT 1
21562: NEG
21563: PUSH
21564: LD_INT 2
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 2
21574: PUSH
21575: LD_INT 1
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: LD_INT 2
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: PUSH
21595: LD_INT 2
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 2
21604: NEG
21605: PUSH
21606: LD_INT 1
21608: NEG
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 2
21616: NEG
21617: PUSH
21618: LD_INT 2
21620: NEG
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 2
21628: NEG
21629: PUSH
21630: LD_INT 3
21632: NEG
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 3
21640: NEG
21641: PUSH
21642: LD_INT 2
21644: NEG
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 3
21652: NEG
21653: PUSH
21654: LD_INT 3
21656: NEG
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: EMPTY
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21680: LD_ADDR_VAR 0 14
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 0
21697: PUSH
21698: LD_INT 1
21700: NEG
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: LD_INT 0
21711: PUSH
21712: EMPTY
21713: LIST
21714: LIST
21715: PUSH
21716: LD_INT 1
21718: PUSH
21719: LD_INT 1
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 0
21728: PUSH
21729: LD_INT 1
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 1
21738: NEG
21739: PUSH
21740: LD_INT 0
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 1
21749: NEG
21750: PUSH
21751: LD_INT 1
21753: NEG
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 1
21761: NEG
21762: PUSH
21763: LD_INT 2
21765: NEG
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 0
21773: PUSH
21774: LD_INT 2
21776: NEG
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 1
21787: NEG
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: LD_INT 2
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 0
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 1
21815: NEG
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 1
21826: NEG
21827: PUSH
21828: LD_INT 3
21830: NEG
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 3
21841: NEG
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PUSH
21847: LD_INT 1
21849: PUSH
21850: LD_INT 2
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21876: LD_ADDR_VAR 0 15
21880: PUSH
21881: LD_INT 0
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 0
21893: PUSH
21894: LD_INT 1
21896: NEG
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: LD_INT 0
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: LD_INT 1
21914: PUSH
21915: LD_INT 1
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 0
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 1
21934: NEG
21935: PUSH
21936: LD_INT 0
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PUSH
21943: LD_INT 1
21945: NEG
21946: PUSH
21947: LD_INT 1
21949: NEG
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 1
21957: PUSH
21958: LD_INT 1
21960: NEG
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: PUSH
21979: LD_INT 1
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PUSH
21986: LD_INT 1
21988: NEG
21989: PUSH
21990: LD_INT 1
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PUSH
21997: LD_INT 2
21999: NEG
22000: PUSH
22001: LD_INT 0
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 2
22010: NEG
22011: PUSH
22012: LD_INT 1
22014: NEG
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 2
22022: PUSH
22023: LD_INT 1
22025: NEG
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 3
22033: PUSH
22034: LD_INT 0
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: LD_INT 3
22043: PUSH
22044: LD_INT 1
22046: PUSH
22047: EMPTY
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22069: LD_ADDR_VAR 0 16
22073: PUSH
22074: LD_INT 0
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 0
22086: PUSH
22087: LD_INT 1
22089: NEG
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: PUSH
22098: LD_INT 0
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: LD_INT 1
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 0
22117: PUSH
22118: LD_INT 1
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 0
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 1
22138: NEG
22139: PUSH
22140: LD_INT 1
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: NEG
22151: PUSH
22152: LD_INT 2
22154: NEG
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: LD_INT 2
22162: PUSH
22163: LD_INT 1
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: LD_INT 2
22175: PUSH
22176: EMPTY
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: LD_INT 2
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: LD_INT 1
22196: NEG
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PUSH
22202: LD_INT 2
22204: NEG
22205: PUSH
22206: LD_INT 2
22208: NEG
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 3
22216: PUSH
22217: LD_INT 2
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 3
22226: PUSH
22227: LD_INT 3
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 2
22236: PUSH
22237: LD_INT 3
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22262: LD_ADDR_VAR 0 17
22266: PUSH
22267: LD_INT 0
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 0
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 1
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 0
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 1
22331: NEG
22332: PUSH
22333: LD_INT 1
22335: NEG
22336: PUSH
22337: EMPTY
22338: LIST
22339: LIST
22340: PUSH
22341: LD_INT 1
22343: NEG
22344: PUSH
22345: LD_INT 2
22347: NEG
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: LD_INT 2
22358: NEG
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 1
22366: PUSH
22367: LD_INT 1
22369: NEG
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: LD_INT 0
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 1
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: LD_INT 2
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 1
22407: PUSH
22408: LD_INT 2
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 0
22417: PUSH
22418: LD_INT 2
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: PUSH
22425: LD_INT 1
22427: NEG
22428: PUSH
22429: LD_INT 1
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: PUSH
22436: LD_INT 2
22438: NEG
22439: PUSH
22440: LD_INT 0
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PUSH
22447: LD_INT 2
22449: NEG
22450: PUSH
22451: LD_INT 1
22453: NEG
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 2
22461: NEG
22462: PUSH
22463: LD_INT 2
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22492: LD_ADDR_VAR 0 18
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 0
22509: PUSH
22510: LD_INT 1
22512: NEG
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: LD_INT 0
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 1
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: LD_INT 1
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 0
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: NEG
22562: PUSH
22563: LD_INT 1
22565: NEG
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PUSH
22571: LD_INT 1
22573: NEG
22574: PUSH
22575: LD_INT 2
22577: NEG
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: LD_INT 0
22585: PUSH
22586: LD_INT 2
22588: NEG
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: LD_INT 1
22599: NEG
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 0
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: LD_INT 1
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 2
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: LD_INT 2
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 0
22647: PUSH
22648: LD_INT 2
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: PUSH
22655: LD_INT 1
22657: NEG
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: NEG
22669: PUSH
22670: LD_INT 0
22672: PUSH
22673: EMPTY
22674: LIST
22675: LIST
22676: PUSH
22677: LD_INT 2
22679: NEG
22680: PUSH
22681: LD_INT 1
22683: NEG
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 2
22691: NEG
22692: PUSH
22693: LD_INT 2
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: LIST
22721: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22722: LD_ADDR_VAR 0 19
22726: PUSH
22727: LD_INT 0
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 0
22739: PUSH
22740: LD_INT 1
22742: NEG
22743: PUSH
22744: EMPTY
22745: LIST
22746: LIST
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: LD_INT 0
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: PUSH
22761: LD_INT 1
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 0
22770: PUSH
22771: LD_INT 1
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: PUSH
22778: LD_INT 1
22780: NEG
22781: PUSH
22782: LD_INT 0
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 1
22791: NEG
22792: PUSH
22793: LD_INT 1
22795: NEG
22796: PUSH
22797: EMPTY
22798: LIST
22799: LIST
22800: PUSH
22801: LD_INT 1
22803: NEG
22804: PUSH
22805: LD_INT 2
22807: NEG
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PUSH
22813: LD_INT 0
22815: PUSH
22816: LD_INT 2
22818: NEG
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: LD_INT 1
22829: NEG
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: LD_INT 0
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: PUSH
22845: LD_INT 2
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: EMPTY
22852: LIST
22853: LIST
22854: PUSH
22855: LD_INT 2
22857: PUSH
22858: LD_INT 2
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 0
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 1
22887: NEG
22888: PUSH
22889: LD_INT 1
22891: PUSH
22892: EMPTY
22893: LIST
22894: LIST
22895: PUSH
22896: LD_INT 2
22898: NEG
22899: PUSH
22900: LD_INT 0
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PUSH
22907: LD_INT 2
22909: NEG
22910: PUSH
22911: LD_INT 1
22913: NEG
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: NEG
22922: PUSH
22923: LD_INT 2
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22952: LD_ADDR_VAR 0 20
22956: PUSH
22957: LD_INT 0
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 0
22969: PUSH
22970: LD_INT 1
22972: NEG
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: LD_INT 0
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: PUSH
22991: LD_INT 1
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 0
23000: PUSH
23001: LD_INT 1
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 1
23010: NEG
23011: PUSH
23012: LD_INT 0
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 1
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: NEG
23034: PUSH
23035: LD_INT 2
23037: NEG
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 0
23045: PUSH
23046: LD_INT 2
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 1
23056: PUSH
23057: LD_INT 1
23059: NEG
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: LD_INT 0
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 1
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: LD_INT 2
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: EMPTY
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 1
23097: PUSH
23098: LD_INT 2
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 0
23107: PUSH
23108: LD_INT 2
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 1
23117: NEG
23118: PUSH
23119: LD_INT 1
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 2
23128: NEG
23129: PUSH
23130: LD_INT 0
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PUSH
23137: LD_INT 2
23139: NEG
23140: PUSH
23141: LD_INT 1
23143: NEG
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 2
23151: NEG
23152: PUSH
23153: LD_INT 2
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23182: LD_ADDR_VAR 0 21
23186: PUSH
23187: LD_INT 0
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 0
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: LD_INT 0
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: PUSH
23221: LD_INT 1
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 0
23230: PUSH
23231: LD_INT 1
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: LD_INT 1
23240: NEG
23241: PUSH
23242: LD_INT 0
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 1
23251: NEG
23252: PUSH
23253: LD_INT 1
23255: NEG
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 1
23263: NEG
23264: PUSH
23265: LD_INT 2
23267: NEG
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 0
23275: PUSH
23276: LD_INT 2
23278: NEG
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 1
23286: PUSH
23287: LD_INT 1
23289: NEG
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: LD_INT 0
23300: PUSH
23301: EMPTY
23302: LIST
23303: LIST
23304: PUSH
23305: LD_INT 2
23307: PUSH
23308: LD_INT 1
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 2
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: LD_INT 2
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 0
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 1
23347: NEG
23348: PUSH
23349: LD_INT 1
23351: PUSH
23352: EMPTY
23353: LIST
23354: LIST
23355: PUSH
23356: LD_INT 2
23358: NEG
23359: PUSH
23360: LD_INT 0
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 2
23369: NEG
23370: PUSH
23371: LD_INT 1
23373: NEG
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 2
23381: NEG
23382: PUSH
23383: LD_INT 2
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23412: LD_ADDR_VAR 0 22
23416: PUSH
23417: LD_INT 0
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 0
23429: PUSH
23430: LD_INT 1
23432: NEG
23433: PUSH
23434: EMPTY
23435: LIST
23436: LIST
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: LD_INT 1
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 0
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PUSH
23468: LD_INT 1
23470: NEG
23471: PUSH
23472: LD_INT 0
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 1
23481: NEG
23482: PUSH
23483: LD_INT 1
23485: NEG
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 1
23493: NEG
23494: PUSH
23495: LD_INT 2
23497: NEG
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 0
23505: PUSH
23506: LD_INT 2
23508: NEG
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 1
23516: PUSH
23517: LD_INT 1
23519: NEG
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: LD_INT 0
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: LD_INT 1
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 2
23547: PUSH
23548: LD_INT 2
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 1
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 2
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: LD_INT 1
23577: NEG
23578: PUSH
23579: LD_INT 1
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: PUSH
23586: LD_INT 2
23588: NEG
23589: PUSH
23590: LD_INT 0
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: NEG
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PUSH
23609: LD_INT 2
23611: NEG
23612: PUSH
23613: LD_INT 2
23615: NEG
23616: PUSH
23617: EMPTY
23618: LIST
23619: LIST
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23642: LD_ADDR_VAR 0 23
23646: PUSH
23647: LD_INT 0
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: LD_INT 1
23662: NEG
23663: PUSH
23664: EMPTY
23665: LIST
23666: LIST
23667: PUSH
23668: LD_INT 1
23670: PUSH
23671: LD_INT 0
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 1
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 0
23690: PUSH
23691: LD_INT 1
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: PUSH
23698: LD_INT 1
23700: NEG
23701: PUSH
23702: LD_INT 0
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: LD_INT 1
23723: NEG
23724: PUSH
23725: LD_INT 2
23727: NEG
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PUSH
23733: LD_INT 0
23735: PUSH
23736: LD_INT 2
23738: NEG
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: LD_INT 1
23749: NEG
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 2
23757: PUSH
23758: LD_INT 0
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: LD_INT 2
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: EMPTY
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 1
23787: PUSH
23788: LD_INT 2
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 0
23797: PUSH
23798: LD_INT 2
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: NEG
23808: PUSH
23809: LD_INT 1
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: PUSH
23816: LD_INT 2
23818: NEG
23819: PUSH
23820: LD_INT 0
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 2
23829: NEG
23830: PUSH
23831: LD_INT 1
23833: NEG
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: PUSH
23839: LD_INT 2
23841: NEG
23842: PUSH
23843: LD_INT 2
23845: NEG
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 2
23853: NEG
23854: PUSH
23855: LD_INT 3
23857: NEG
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PUSH
23863: LD_INT 1
23865: NEG
23866: PUSH
23867: LD_INT 3
23869: NEG
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: LD_INT 2
23880: NEG
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 2
23888: PUSH
23889: LD_INT 1
23891: NEG
23892: PUSH
23893: EMPTY
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23922: LD_ADDR_VAR 0 24
23926: PUSH
23927: LD_INT 0
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 1
23942: NEG
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 1
23950: PUSH
23951: LD_INT 0
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PUSH
23958: LD_INT 1
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 0
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PUSH
23978: LD_INT 1
23980: NEG
23981: PUSH
23982: LD_INT 0
23984: PUSH
23985: EMPTY
23986: LIST
23987: LIST
23988: PUSH
23989: LD_INT 1
23991: NEG
23992: PUSH
23993: LD_INT 1
23995: NEG
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: NEG
24004: PUSH
24005: LD_INT 2
24007: NEG
24008: PUSH
24009: EMPTY
24010: LIST
24011: LIST
24012: PUSH
24013: LD_INT 0
24015: PUSH
24016: LD_INT 2
24018: NEG
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 1
24026: PUSH
24027: LD_INT 1
24029: NEG
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 0
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 2
24047: PUSH
24048: LD_INT 1
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 1
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 0
24077: PUSH
24078: LD_INT 2
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: LD_INT 1
24087: NEG
24088: PUSH
24089: LD_INT 1
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 2
24098: NEG
24099: PUSH
24100: LD_INT 0
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 2
24109: NEG
24110: PUSH
24111: LD_INT 1
24113: NEG
24114: PUSH
24115: EMPTY
24116: LIST
24117: LIST
24118: PUSH
24119: LD_INT 2
24121: NEG
24122: PUSH
24123: LD_INT 2
24125: NEG
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PUSH
24131: LD_INT 1
24133: PUSH
24134: LD_INT 2
24136: NEG
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 2
24144: PUSH
24145: LD_INT 1
24147: NEG
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 3
24155: PUSH
24156: LD_INT 1
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: PUSH
24163: LD_INT 3
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: EMPTY
24170: LIST
24171: LIST
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
24198: LD_ADDR_VAR 0 25
24202: PUSH
24203: LD_INT 0
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: LD_INT 1
24218: NEG
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: PUSH
24224: LD_INT 1
24226: PUSH
24227: LD_INT 0
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: PUSH
24234: LD_INT 1
24236: PUSH
24237: LD_INT 1
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 0
24246: PUSH
24247: LD_INT 1
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PUSH
24254: LD_INT 1
24256: NEG
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 1
24267: NEG
24268: PUSH
24269: LD_INT 1
24271: NEG
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 1
24279: NEG
24280: PUSH
24281: LD_INT 2
24283: NEG
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: PUSH
24289: LD_INT 0
24291: PUSH
24292: LD_INT 2
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: LD_INT 1
24305: NEG
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PUSH
24311: LD_INT 2
24313: PUSH
24314: LD_INT 0
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: PUSH
24324: LD_INT 1
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 2
24333: PUSH
24334: LD_INT 2
24336: PUSH
24337: EMPTY
24338: LIST
24339: LIST
24340: PUSH
24341: LD_INT 1
24343: PUSH
24344: LD_INT 2
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 0
24353: PUSH
24354: LD_INT 2
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: NEG
24364: PUSH
24365: LD_INT 1
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PUSH
24372: LD_INT 2
24374: NEG
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: EMPTY
24380: LIST
24381: LIST
24382: PUSH
24383: LD_INT 2
24385: NEG
24386: PUSH
24387: LD_INT 1
24389: NEG
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 2
24397: NEG
24398: PUSH
24399: LD_INT 2
24401: NEG
24402: PUSH
24403: EMPTY
24404: LIST
24405: LIST
24406: PUSH
24407: LD_INT 3
24409: PUSH
24410: LD_INT 1
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PUSH
24417: LD_INT 3
24419: PUSH
24420: LD_INT 2
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 2
24429: PUSH
24430: LD_INT 3
24432: PUSH
24433: EMPTY
24434: LIST
24435: LIST
24436: PUSH
24437: LD_INT 1
24439: PUSH
24440: LD_INT 3
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24472: LD_ADDR_VAR 0 26
24476: PUSH
24477: LD_INT 0
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 0
24489: PUSH
24490: LD_INT 1
24492: NEG
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 1
24500: PUSH
24501: LD_INT 0
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: LD_INT 1
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: LD_INT 1
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 1
24530: NEG
24531: PUSH
24532: LD_INT 0
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: LD_INT 1
24541: NEG
24542: PUSH
24543: LD_INT 1
24545: NEG
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 1
24553: NEG
24554: PUSH
24555: LD_INT 2
24557: NEG
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: LD_INT 0
24565: PUSH
24566: LD_INT 2
24568: NEG
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 1
24576: PUSH
24577: LD_INT 1
24579: NEG
24580: PUSH
24581: EMPTY
24582: LIST
24583: LIST
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 0
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: LD_INT 1
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 2
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 1
24617: PUSH
24618: LD_INT 2
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 0
24627: PUSH
24628: LD_INT 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_INT 1
24637: NEG
24638: PUSH
24639: LD_INT 1
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: PUSH
24646: LD_INT 2
24648: NEG
24649: PUSH
24650: LD_INT 0
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 2
24659: NEG
24660: PUSH
24661: LD_INT 1
24663: NEG
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: PUSH
24669: LD_INT 2
24671: NEG
24672: PUSH
24673: LD_INT 2
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 2
24683: PUSH
24684: LD_INT 3
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 1
24693: PUSH
24694: LD_INT 3
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: LD_INT 1
24703: NEG
24704: PUSH
24705: LD_INT 2
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: PUSH
24712: LD_INT 2
24714: NEG
24715: PUSH
24716: LD_INT 1
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24748: LD_ADDR_VAR 0 27
24752: PUSH
24753: LD_INT 0
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: LD_INT 1
24768: NEG
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 1
24776: PUSH
24777: LD_INT 0
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 1
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 0
24796: PUSH
24797: LD_INT 1
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: PUSH
24804: LD_INT 1
24806: NEG
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 1
24817: NEG
24818: PUSH
24819: LD_INT 1
24821: NEG
24822: PUSH
24823: EMPTY
24824: LIST
24825: LIST
24826: PUSH
24827: LD_INT 1
24829: NEG
24830: PUSH
24831: LD_INT 2
24833: NEG
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 0
24841: PUSH
24842: LD_INT 2
24844: NEG
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 1
24852: PUSH
24853: LD_INT 1
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: PUSH
24864: LD_INT 0
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: PUSH
24871: LD_INT 2
24873: PUSH
24874: LD_INT 1
24876: PUSH
24877: EMPTY
24878: LIST
24879: LIST
24880: PUSH
24881: LD_INT 2
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: PUSH
24891: LD_INT 1
24893: PUSH
24894: LD_INT 2
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 0
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: PUSH
24911: LD_INT 1
24913: NEG
24914: PUSH
24915: LD_INT 1
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 2
24924: NEG
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: EMPTY
24930: LIST
24931: LIST
24932: PUSH
24933: LD_INT 2
24935: NEG
24936: PUSH
24937: LD_INT 1
24939: NEG
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: PUSH
24945: LD_INT 2
24947: NEG
24948: PUSH
24949: LD_INT 2
24951: NEG
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 1
24959: NEG
24960: PUSH
24961: LD_INT 2
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 2
24970: NEG
24971: PUSH
24972: LD_INT 1
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 3
24981: NEG
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 3
24993: NEG
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25028: LD_ADDR_VAR 0 28
25032: PUSH
25033: LD_INT 0
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 0
25045: PUSH
25046: LD_INT 1
25048: NEG
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 1
25056: PUSH
25057: LD_INT 0
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 1
25066: PUSH
25067: LD_INT 1
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 1
25086: NEG
25087: PUSH
25088: LD_INT 0
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 1
25097: NEG
25098: PUSH
25099: LD_INT 1
25101: NEG
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: LD_INT 1
25109: NEG
25110: PUSH
25111: LD_INT 2
25113: NEG
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 2
25124: NEG
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 1
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: LD_INT 2
25143: PUSH
25144: LD_INT 0
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 2
25153: PUSH
25154: LD_INT 1
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: LD_INT 2
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 1
25173: PUSH
25174: LD_INT 2
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: LD_INT 2
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 1
25193: NEG
25194: PUSH
25195: LD_INT 1
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: LD_INT 2
25204: NEG
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: NEG
25216: PUSH
25217: LD_INT 1
25219: NEG
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: LD_INT 2
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 2
25239: NEG
25240: PUSH
25241: LD_INT 3
25243: NEG
25244: PUSH
25245: EMPTY
25246: LIST
25247: LIST
25248: PUSH
25249: LD_INT 1
25251: NEG
25252: PUSH
25253: LD_INT 3
25255: NEG
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 3
25263: NEG
25264: PUSH
25265: LD_INT 1
25267: NEG
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 3
25275: NEG
25276: PUSH
25277: LD_INT 2
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25310: LD_ADDR_VAR 0 29
25314: PUSH
25315: LD_INT 0
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 0
25327: PUSH
25328: LD_INT 1
25330: NEG
25331: PUSH
25332: EMPTY
25333: LIST
25334: LIST
25335: PUSH
25336: LD_INT 1
25338: PUSH
25339: LD_INT 0
25341: PUSH
25342: EMPTY
25343: LIST
25344: LIST
25345: PUSH
25346: LD_INT 1
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 0
25358: PUSH
25359: LD_INT 1
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 1
25368: NEG
25369: PUSH
25370: LD_INT 0
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: PUSH
25377: LD_INT 1
25379: NEG
25380: PUSH
25381: LD_INT 1
25383: NEG
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 1
25391: NEG
25392: PUSH
25393: LD_INT 2
25395: NEG
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: LD_INT 2
25406: NEG
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 1
25417: NEG
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 2
25425: PUSH
25426: LD_INT 0
25428: PUSH
25429: EMPTY
25430: LIST
25431: LIST
25432: PUSH
25433: LD_INT 2
25435: PUSH
25436: LD_INT 1
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: LD_INT 2
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: LD_INT 1
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 2
25476: NEG
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PUSH
25486: LD_INT 2
25488: NEG
25489: PUSH
25490: LD_INT 2
25492: NEG
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PUSH
25498: LD_INT 2
25500: NEG
25501: PUSH
25502: LD_INT 3
25504: NEG
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 2
25512: PUSH
25513: LD_INT 1
25515: NEG
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 3
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 1
25533: PUSH
25534: LD_INT 3
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 3
25554: NEG
25555: PUSH
25556: LD_INT 2
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25589: LD_ADDR_VAR 0 30
25593: PUSH
25594: LD_INT 0
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: LD_INT 1
25609: NEG
25610: PUSH
25611: EMPTY
25612: LIST
25613: LIST
25614: PUSH
25615: LD_INT 1
25617: PUSH
25618: LD_INT 0
25620: PUSH
25621: EMPTY
25622: LIST
25623: LIST
25624: PUSH
25625: LD_INT 1
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 1
25647: NEG
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 1
25658: NEG
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 1
25670: NEG
25671: PUSH
25672: LD_INT 2
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: LD_INT 2
25685: NEG
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 1
25693: PUSH
25694: LD_INT 1
25696: NEG
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 2
25704: PUSH
25705: LD_INT 0
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 1
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 1
25744: NEG
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 2
25755: NEG
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 2
25766: NEG
25767: PUSH
25768: LD_INT 1
25770: NEG
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 1
25778: NEG
25779: PUSH
25780: LD_INT 3
25782: NEG
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 1
25790: PUSH
25791: LD_INT 2
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 3
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 2
25811: PUSH
25812: LD_INT 3
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 2
25821: NEG
25822: PUSH
25823: LD_INT 1
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 3
25832: NEG
25833: PUSH
25834: LD_INT 1
25836: NEG
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25867: LD_ADDR_VAR 0 31
25871: PUSH
25872: LD_INT 0
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 0
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: EMPTY
25890: LIST
25891: LIST
25892: PUSH
25893: LD_INT 1
25895: PUSH
25896: LD_INT 0
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 1
25905: PUSH
25906: LD_INT 1
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 0
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 1
25925: NEG
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: NEG
25937: PUSH
25938: LD_INT 1
25940: NEG
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 1
25948: NEG
25949: PUSH
25950: LD_INT 2
25952: NEG
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 1
25963: NEG
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 2
25971: PUSH
25972: LD_INT 0
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 2
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 2
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 0
26011: PUSH
26012: LD_INT 2
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 1
26021: NEG
26022: PUSH
26023: LD_INT 1
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: LD_INT 2
26032: NEG
26033: PUSH
26034: LD_INT 1
26036: NEG
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: NEG
26045: PUSH
26046: LD_INT 2
26048: NEG
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: NEG
26057: PUSH
26058: LD_INT 3
26060: NEG
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 2
26068: PUSH
26069: LD_INT 1
26071: NEG
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 3
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 1
26089: PUSH
26090: LD_INT 3
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 3
26110: NEG
26111: PUSH
26112: LD_INT 2
26114: NEG
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26145: LD_ADDR_VAR 0 32
26149: PUSH
26150: LD_INT 0
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 0
26162: PUSH
26163: LD_INT 1
26165: NEG
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 1
26173: PUSH
26174: LD_INT 0
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 1
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 0
26193: PUSH
26194: LD_INT 1
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 1
26203: NEG
26204: PUSH
26205: LD_INT 0
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: PUSH
26212: LD_INT 1
26214: NEG
26215: PUSH
26216: LD_INT 1
26218: NEG
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: LD_INT 1
26226: NEG
26227: PUSH
26228: LD_INT 2
26230: NEG
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 0
26238: PUSH
26239: LD_INT 2
26241: NEG
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 1
26249: PUSH
26250: LD_INT 1
26252: NEG
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 2
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 2
26270: PUSH
26271: LD_INT 2
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: LD_INT 2
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: LD_INT 2
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: LD_INT 1
26300: NEG
26301: PUSH
26302: LD_INT 1
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: LD_INT 2
26311: NEG
26312: PUSH
26313: LD_INT 0
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: NEG
26323: PUSH
26324: LD_INT 1
26326: NEG
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PUSH
26332: LD_INT 1
26334: NEG
26335: PUSH
26336: LD_INT 3
26338: NEG
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: LD_INT 2
26349: NEG
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: PUSH
26355: LD_INT 3
26357: PUSH
26358: LD_INT 2
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 2
26367: PUSH
26368: LD_INT 3
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 3
26388: NEG
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: EMPTY
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26423: LD_ADDR_VAR 0 33
26427: PUSH
26428: LD_INT 0
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: LD_INT 1
26443: NEG
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 1
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: LD_INT 1
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 0
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: NEG
26482: PUSH
26483: LD_INT 0
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 1
26492: NEG
26493: PUSH
26494: LD_INT 1
26496: NEG
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 1
26504: NEG
26505: PUSH
26506: LD_INT 2
26508: NEG
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 1
26516: PUSH
26517: LD_INT 1
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 2
26527: PUSH
26528: LD_INT 0
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 1
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: LD_INT 2
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: NEG
26568: PUSH
26569: LD_INT 1
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 2
26589: NEG
26590: PUSH
26591: LD_INT 1
26593: NEG
26594: PUSH
26595: EMPTY
26596: LIST
26597: LIST
26598: PUSH
26599: LD_INT 2
26601: NEG
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: LD_INT 3
26617: NEG
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 2
26625: PUSH
26626: LD_INT 1
26628: NEG
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: LD_INT 3
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 1
26646: PUSH
26647: LD_INT 3
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: LD_INT 1
26656: NEG
26657: PUSH
26658: LD_INT 2
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: PUSH
26665: LD_INT 3
26667: NEG
26668: PUSH
26669: LD_INT 2
26671: NEG
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26702: LD_ADDR_VAR 0 34
26706: PUSH
26707: LD_INT 0
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: LD_INT 1
26722: NEG
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 1
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: PUSH
26741: LD_INT 1
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 0
26750: PUSH
26751: LD_INT 1
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: PUSH
26758: LD_INT 1
26760: NEG
26761: PUSH
26762: LD_INT 0
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 1
26771: NEG
26772: PUSH
26773: LD_INT 1
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: NEG
26784: PUSH
26785: LD_INT 2
26787: NEG
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: LD_INT 2
26798: NEG
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: LD_INT 1
26809: NEG
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 2
26817: PUSH
26818: LD_INT 1
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 2
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 1
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 2
26869: NEG
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: NEG
26882: PUSH
26883: LD_INT 2
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 1
26893: NEG
26894: PUSH
26895: LD_INT 3
26897: NEG
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 1
26905: PUSH
26906: LD_INT 2
26908: NEG
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: LD_INT 2
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 2
26926: PUSH
26927: LD_INT 3
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 2
26936: NEG
26937: PUSH
26938: LD_INT 1
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PUSH
26945: LD_INT 3
26947: NEG
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26982: LD_ADDR_VAR 0 35
26986: PUSH
26987: LD_INT 0
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 0
26999: PUSH
27000: LD_INT 1
27002: NEG
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 0
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 1
27020: PUSH
27021: LD_INT 1
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 0
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: LD_INT 1
27040: NEG
27041: PUSH
27042: LD_INT 0
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PUSH
27049: LD_INT 1
27051: NEG
27052: PUSH
27053: LD_INT 1
27055: NEG
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 2
27063: PUSH
27064: LD_INT 1
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 2
27073: NEG
27074: PUSH
27075: LD_INT 1
27077: NEG
27078: PUSH
27079: EMPTY
27080: LIST
27081: LIST
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27094: LD_ADDR_VAR 0 36
27098: PUSH
27099: LD_INT 0
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: EMPTY
27117: LIST
27118: LIST
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 1
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 0
27142: PUSH
27143: LD_INT 1
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 1
27152: NEG
27153: PUSH
27154: LD_INT 0
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 1
27163: NEG
27164: PUSH
27165: LD_INT 1
27167: NEG
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: LD_INT 1
27175: NEG
27176: PUSH
27177: LD_INT 2
27179: NEG
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: PUSH
27188: LD_INT 2
27190: PUSH
27191: EMPTY
27192: LIST
27193: LIST
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27206: LD_ADDR_VAR 0 37
27210: PUSH
27211: LD_INT 0
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 0
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: PUSH
27232: LD_INT 1
27234: PUSH
27235: LD_INT 0
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: PUSH
27242: LD_INT 1
27244: PUSH
27245: LD_INT 1
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: LD_INT 1
27264: NEG
27265: PUSH
27266: LD_INT 0
27268: PUSH
27269: EMPTY
27270: LIST
27271: LIST
27272: PUSH
27273: LD_INT 1
27275: NEG
27276: PUSH
27277: LD_INT 1
27279: NEG
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 1
27298: NEG
27299: PUSH
27300: LD_INT 1
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27318: LD_ADDR_VAR 0 38
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 0
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: PUSH
27344: LD_INT 1
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: EMPTY
27351: LIST
27352: LIST
27353: PUSH
27354: LD_INT 1
27356: PUSH
27357: LD_INT 1
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 0
27366: PUSH
27367: LD_INT 1
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 1
27376: NEG
27377: PUSH
27378: LD_INT 0
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 1
27387: NEG
27388: PUSH
27389: LD_INT 1
27391: NEG
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: PUSH
27397: LD_INT 2
27399: PUSH
27400: LD_INT 1
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: LD_INT 1
27413: NEG
27414: PUSH
27415: EMPTY
27416: LIST
27417: LIST
27418: PUSH
27419: EMPTY
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27430: LD_ADDR_VAR 0 39
27434: PUSH
27435: LD_INT 0
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 0
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: LD_INT 0
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: PUSH
27469: LD_INT 1
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 0
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 1
27488: NEG
27489: PUSH
27490: LD_INT 0
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 1
27499: NEG
27500: PUSH
27501: LD_INT 1
27503: NEG
27504: PUSH
27505: EMPTY
27506: LIST
27507: LIST
27508: PUSH
27509: LD_INT 1
27511: NEG
27512: PUSH
27513: LD_INT 2
27515: NEG
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 1
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27542: LD_ADDR_VAR 0 40
27546: PUSH
27547: LD_INT 0
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 0
27559: PUSH
27560: LD_INT 1
27562: NEG
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: PUSH
27571: LD_INT 0
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 1
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: LD_INT 0
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 1
27611: NEG
27612: PUSH
27613: LD_INT 1
27615: NEG
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: LD_INT 1
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 1
27634: NEG
27635: PUSH
27636: LD_INT 1
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27654: LD_ADDR_VAR 0 41
27658: PUSH
27659: LD_INT 0
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 0
27671: PUSH
27672: LD_INT 1
27674: NEG
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 0
27702: PUSH
27703: LD_INT 1
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: NEG
27713: PUSH
27714: LD_INT 0
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 1
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: LD_INT 2
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: PUSH
27748: LD_INT 1
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 0
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: LD_INT 1
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 2
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 1
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: NEG
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 2
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 2
27844: NEG
27845: PUSH
27846: LD_INT 3
27848: NEG
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: LD_INT 1
27859: NEG
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: LD_INT 3
27867: PUSH
27868: LD_INT 0
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 3
27877: PUSH
27878: LD_INT 1
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 3
27887: PUSH
27888: LD_INT 2
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 3
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 2
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: NEG
27918: PUSH
27919: LD_INT 1
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: LD_INT 3
27928: NEG
27929: PUSH
27930: LD_INT 0
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 3
27939: NEG
27940: PUSH
27941: LD_INT 1
27943: NEG
27944: PUSH
27945: EMPTY
27946: LIST
27947: LIST
27948: PUSH
27949: LD_INT 3
27951: NEG
27952: PUSH
27953: LD_INT 2
27955: NEG
27956: PUSH
27957: EMPTY
27958: LIST
27959: LIST
27960: PUSH
27961: LD_INT 3
27963: NEG
27964: PUSH
27965: LD_INT 3
27967: NEG
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: LIST
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28004: LD_ADDR_VAR 0 42
28008: PUSH
28009: LD_INT 0
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 0
28021: PUSH
28022: LD_INT 1
28024: NEG
28025: PUSH
28026: EMPTY
28027: LIST
28028: LIST
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: LD_INT 0
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: PUSH
28040: LD_INT 1
28042: PUSH
28043: LD_INT 1
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 0
28052: PUSH
28053: LD_INT 1
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: NEG
28063: PUSH
28064: LD_INT 0
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 1
28073: NEG
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 1
28085: NEG
28086: PUSH
28087: LD_INT 2
28089: NEG
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: LD_INT 0
28097: PUSH
28098: LD_INT 2
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 1
28108: PUSH
28109: LD_INT 1
28111: NEG
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 2
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 2
28129: PUSH
28130: LD_INT 2
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: PUSH
28140: LD_INT 2
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 0
28149: PUSH
28150: LD_INT 2
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: NEG
28160: PUSH
28161: LD_INT 1
28163: PUSH
28164: EMPTY
28165: LIST
28166: LIST
28167: PUSH
28168: LD_INT 2
28170: NEG
28171: PUSH
28172: LD_INT 1
28174: NEG
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: PUSH
28180: LD_INT 2
28182: NEG
28183: PUSH
28184: LD_INT 2
28186: NEG
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: LD_INT 2
28194: NEG
28195: PUSH
28196: LD_INT 3
28198: NEG
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 1
28206: NEG
28207: PUSH
28208: LD_INT 3
28210: NEG
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 0
28218: PUSH
28219: LD_INT 3
28221: NEG
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: LD_INT 2
28232: NEG
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: PUSH
28238: LD_INT 3
28240: PUSH
28241: LD_INT 2
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 3
28250: PUSH
28251: LD_INT 3
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: PUSH
28258: LD_INT 2
28260: PUSH
28261: LD_INT 3
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: PUSH
28271: LD_INT 3
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 0
28280: PUSH
28281: LD_INT 3
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: LD_INT 2
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 3
28301: NEG
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: PUSH
28311: LD_INT 3
28313: NEG
28314: PUSH
28315: LD_INT 3
28317: NEG
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28354: LD_ADDR_VAR 0 43
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 0
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 1
28382: PUSH
28383: LD_INT 0
28385: PUSH
28386: EMPTY
28387: LIST
28388: LIST
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 1
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 0
28402: PUSH
28403: LD_INT 1
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PUSH
28414: LD_INT 0
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: PUSH
28421: LD_INT 1
28423: NEG
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PUSH
28437: LD_INT 2
28439: NEG
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: PUSH
28445: LD_INT 0
28447: PUSH
28448: LD_INT 2
28450: NEG
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 1
28458: PUSH
28459: LD_INT 1
28461: NEG
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 2
28469: PUSH
28470: LD_INT 0
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 2
28479: PUSH
28480: LD_INT 1
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: LD_INT 2
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: LD_INT 2
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: LD_INT 1
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 2
28520: NEG
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 2
28531: NEG
28532: PUSH
28533: LD_INT 1
28535: NEG
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 1
28543: NEG
28544: PUSH
28545: LD_INT 3
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 0
28555: PUSH
28556: LD_INT 3
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: LD_INT 2
28569: NEG
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 2
28577: PUSH
28578: LD_INT 1
28580: NEG
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 3
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 3
28598: PUSH
28599: LD_INT 1
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 1
28608: PUSH
28609: LD_INT 3
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 0
28618: PUSH
28619: LD_INT 3
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PUSH
28626: LD_INT 1
28628: NEG
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: EMPTY
28634: LIST
28635: LIST
28636: PUSH
28637: LD_INT 2
28639: NEG
28640: PUSH
28641: LD_INT 1
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 3
28650: NEG
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 3
28661: NEG
28662: PUSH
28663: LD_INT 1
28665: NEG
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: LIST
28683: LIST
28684: LIST
28685: LIST
28686: LIST
28687: LIST
28688: LIST
28689: LIST
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28702: LD_ADDR_VAR 0 44
28706: PUSH
28707: LD_INT 0
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 0
28719: PUSH
28720: LD_INT 1
28722: NEG
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: PUSH
28728: LD_INT 1
28730: PUSH
28731: LD_INT 0
28733: PUSH
28734: EMPTY
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 1
28740: PUSH
28741: LD_INT 1
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: NEG
28761: PUSH
28762: LD_INT 0
28764: PUSH
28765: EMPTY
28766: LIST
28767: LIST
28768: PUSH
28769: LD_INT 1
28771: NEG
28772: PUSH
28773: LD_INT 1
28775: NEG
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: LD_INT 2
28787: NEG
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 2
28806: PUSH
28807: LD_INT 0
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 2
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 2
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: LD_INT 2
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: LD_INT 1
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 2
28857: NEG
28858: PUSH
28859: LD_INT 0
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 2
28868: NEG
28869: PUSH
28870: LD_INT 1
28872: NEG
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 2
28880: NEG
28881: PUSH
28882: LD_INT 2
28884: NEG
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PUSH
28890: LD_INT 2
28892: NEG
28893: PUSH
28894: LD_INT 3
28896: NEG
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: LD_INT 1
28907: NEG
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 3
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 3
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 3
28935: PUSH
28936: LD_INT 2
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 3
28945: PUSH
28946: LD_INT 3
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 2
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 2
28965: NEG
28966: PUSH
28967: LD_INT 1
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 3
28976: NEG
28977: PUSH
28978: LD_INT 0
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 3
28987: NEG
28988: PUSH
28989: LD_INT 1
28991: NEG
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 3
28999: NEG
29000: PUSH
29001: LD_INT 2
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 3
29011: NEG
29012: PUSH
29013: LD_INT 3
29015: NEG
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: LIST
29039: LIST
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29052: LD_ADDR_VAR 0 45
29056: PUSH
29057: LD_INT 0
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 1
29072: NEG
29073: PUSH
29074: EMPTY
29075: LIST
29076: LIST
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: PUSH
29091: LD_INT 1
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 0
29100: PUSH
29101: LD_INT 1
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: NEG
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 1
29121: NEG
29122: PUSH
29123: LD_INT 1
29125: NEG
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 1
29133: NEG
29134: PUSH
29135: LD_INT 2
29137: NEG
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 0
29145: PUSH
29146: LD_INT 2
29148: NEG
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: LD_INT 1
29159: NEG
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 2
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: LD_INT 2
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: PUSH
29188: LD_INT 2
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 0
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: NEG
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: NEG
29219: PUSH
29220: LD_INT 1
29222: NEG
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 2
29230: NEG
29231: PUSH
29232: LD_INT 2
29234: NEG
29235: PUSH
29236: EMPTY
29237: LIST
29238: LIST
29239: PUSH
29240: LD_INT 2
29242: NEG
29243: PUSH
29244: LD_INT 3
29246: NEG
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 3
29258: NEG
29259: PUSH
29260: EMPTY
29261: LIST
29262: LIST
29263: PUSH
29264: LD_INT 0
29266: PUSH
29267: LD_INT 3
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 1
29277: PUSH
29278: LD_INT 2
29280: NEG
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: PUSH
29286: LD_INT 3
29288: PUSH
29289: LD_INT 2
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 3
29298: PUSH
29299: LD_INT 3
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 2
29308: PUSH
29309: LD_INT 3
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: PUSH
29319: LD_INT 3
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 0
29328: PUSH
29329: LD_INT 3
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: NEG
29339: PUSH
29340: LD_INT 2
29342: PUSH
29343: EMPTY
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 3
29349: NEG
29350: PUSH
29351: LD_INT 2
29353: NEG
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: LD_INT 3
29361: NEG
29362: PUSH
29363: LD_INT 3
29365: NEG
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29402: LD_ADDR_VAR 0 46
29406: PUSH
29407: LD_INT 0
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 0
29419: PUSH
29420: LD_INT 1
29422: NEG
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: PUSH
29428: LD_INT 1
29430: PUSH
29431: LD_INT 0
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: LD_INT 1
29440: PUSH
29441: LD_INT 1
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 0
29450: PUSH
29451: LD_INT 1
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: PUSH
29458: LD_INT 1
29460: NEG
29461: PUSH
29462: LD_INT 0
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 1
29471: NEG
29472: PUSH
29473: LD_INT 1
29475: NEG
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 1
29483: NEG
29484: PUSH
29485: LD_INT 2
29487: NEG
29488: PUSH
29489: EMPTY
29490: LIST
29491: LIST
29492: PUSH
29493: LD_INT 0
29495: PUSH
29496: LD_INT 2
29498: NEG
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 1
29506: PUSH
29507: LD_INT 1
29509: NEG
29510: PUSH
29511: EMPTY
29512: LIST
29513: LIST
29514: PUSH
29515: LD_INT 2
29517: PUSH
29518: LD_INT 0
29520: PUSH
29521: EMPTY
29522: LIST
29523: LIST
29524: PUSH
29525: LD_INT 2
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: EMPTY
29532: LIST
29533: LIST
29534: PUSH
29535: LD_INT 1
29537: PUSH
29538: LD_INT 2
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 0
29547: PUSH
29548: LD_INT 2
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 1
29557: NEG
29558: PUSH
29559: LD_INT 1
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: PUSH
29566: LD_INT 2
29568: NEG
29569: PUSH
29570: LD_INT 0
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: PUSH
29577: LD_INT 2
29579: NEG
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: NEG
29592: PUSH
29593: LD_INT 3
29595: NEG
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PUSH
29601: LD_INT 0
29603: PUSH
29604: LD_INT 3
29606: NEG
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: LD_INT 2
29617: NEG
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 2
29625: PUSH
29626: LD_INT 1
29628: NEG
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 3
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: LD_INT 1
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 3
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 0
29666: PUSH
29667: LD_INT 3
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 1
29676: NEG
29677: PUSH
29678: LD_INT 2
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: LD_INT 2
29687: NEG
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 3
29698: NEG
29699: PUSH
29700: LD_INT 0
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 3
29709: NEG
29710: PUSH
29711: LD_INT 1
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: EMPTY
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29750: LD_ADDR_VAR 0 47
29754: PUSH
29755: LD_INT 0
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 0
29767: PUSH
29768: LD_INT 1
29770: NEG
29771: PUSH
29772: EMPTY
29773: LIST
29774: LIST
29775: PUSH
29776: LD_INT 1
29778: PUSH
29779: LD_INT 0
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 1
29788: PUSH
29789: LD_INT 1
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 0
29798: PUSH
29799: LD_INT 1
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: LD_INT 1
29808: NEG
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 1
29819: NEG
29820: PUSH
29821: LD_INT 1
29823: NEG
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 1
29831: NEG
29832: PUSH
29833: LD_INT 2
29835: NEG
29836: PUSH
29837: EMPTY
29838: LIST
29839: LIST
29840: PUSH
29841: LD_INT 0
29843: PUSH
29844: LD_INT 2
29846: NEG
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 1
29854: PUSH
29855: LD_INT 1
29857: NEG
29858: PUSH
29859: EMPTY
29860: LIST
29861: LIST
29862: PUSH
29863: LD_INT 2
29865: NEG
29866: PUSH
29867: LD_INT 1
29869: NEG
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: NEG
29878: PUSH
29879: LD_INT 2
29881: NEG
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: LIST
29891: LIST
29892: LIST
29893: LIST
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29901: LD_ADDR_VAR 0 48
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: LD_INT 1
29921: NEG
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 0
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 1
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: LD_INT 1
29959: NEG
29960: PUSH
29961: LD_INT 0
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: LD_INT 1
29970: NEG
29971: PUSH
29972: LD_INT 1
29974: NEG
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 1
29982: NEG
29983: PUSH
29984: LD_INT 2
29986: NEG
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: LD_INT 0
29994: PUSH
29995: LD_INT 2
29997: NEG
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 1
30005: PUSH
30006: LD_INT 1
30008: NEG
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 2
30016: PUSH
30017: LD_INT 0
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 2
30026: PUSH
30027: LD_INT 1
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: LIST
30047: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30048: LD_ADDR_VAR 0 49
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 0
30065: PUSH
30066: LD_INT 1
30068: NEG
30069: PUSH
30070: EMPTY
30071: LIST
30072: LIST
30073: PUSH
30074: LD_INT 1
30076: PUSH
30077: LD_INT 0
30079: PUSH
30080: EMPTY
30081: LIST
30082: LIST
30083: PUSH
30084: LD_INT 1
30086: PUSH
30087: LD_INT 1
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 0
30096: PUSH
30097: LD_INT 1
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: PUSH
30104: LD_INT 1
30106: NEG
30107: PUSH
30108: LD_INT 0
30110: PUSH
30111: EMPTY
30112: LIST
30113: LIST
30114: PUSH
30115: LD_INT 1
30117: NEG
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: EMPTY
30135: LIST
30136: LIST
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 2
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: LD_INT 2
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 1
30170: PUSH
30171: LD_INT 2
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30192: LD_ADDR_VAR 0 50
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 2
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 2
30283: PUSH
30284: LD_INT 2
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 1
30293: PUSH
30294: LD_INT 2
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: LD_INT 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 1
30313: NEG
30314: PUSH
30315: LD_INT 1
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: LIST
30329: LIST
30330: LIST
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30336: LD_ADDR_VAR 0 51
30340: PUSH
30341: LD_INT 0
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 1
30356: NEG
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 1
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 0
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 1
30394: NEG
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PUSH
30403: LD_INT 1
30405: NEG
30406: PUSH
30407: LD_INT 1
30409: NEG
30410: PUSH
30411: EMPTY
30412: LIST
30413: LIST
30414: PUSH
30415: LD_INT 1
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 0
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: PUSH
30435: LD_INT 1
30437: NEG
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 2
30448: NEG
30449: PUSH
30450: LD_INT 0
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: LD_INT 1
30463: NEG
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30483: LD_ADDR_VAR 0 52
30487: PUSH
30488: LD_INT 0
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 0
30500: PUSH
30501: LD_INT 1
30503: NEG
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: PUSH
30509: LD_INT 1
30511: PUSH
30512: LD_INT 0
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: PUSH
30519: LD_INT 1
30521: PUSH
30522: LD_INT 1
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 0
30531: PUSH
30532: LD_INT 1
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 1
30541: NEG
30542: PUSH
30543: LD_INT 0
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 1
30564: NEG
30565: PUSH
30566: LD_INT 2
30568: NEG
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: PUSH
30574: LD_INT 1
30576: NEG
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: NEG
30588: PUSH
30589: LD_INT 0
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: LD_INT 2
30598: NEG
30599: PUSH
30600: LD_INT 1
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 2
30610: NEG
30611: PUSH
30612: LD_INT 2
30614: NEG
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30634: LD_ADDR_VAR 0 53
30638: PUSH
30639: LD_INT 0
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 0
30651: PUSH
30652: LD_INT 1
30654: NEG
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: LD_INT 0
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 1
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: NEG
30693: PUSH
30694: LD_INT 0
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: NEG
30704: PUSH
30705: LD_INT 1
30707: NEG
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: LD_INT 1
30715: NEG
30716: PUSH
30717: LD_INT 2
30719: NEG
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 0
30727: PUSH
30728: LD_INT 2
30730: NEG
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 1
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: LD_INT 2
30759: PUSH
30760: LD_INT 1
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: LD_INT 2
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 0
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 1
30799: NEG
30800: PUSH
30801: LD_INT 1
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: LD_INT 0
30814: PUSH
30815: EMPTY
30816: LIST
30817: LIST
30818: PUSH
30819: LD_INT 2
30821: NEG
30822: PUSH
30823: LD_INT 1
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 2
30833: NEG
30834: PUSH
30835: LD_INT 2
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30864: LD_ADDR_VAR 0 54
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 2
30960: NEG
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: LD_INT 1
30971: NEG
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: EMPTY
30984: LIST
30985: LIST
30986: PUSH
30987: LD_INT 2
30989: PUSH
30990: LD_INT 1
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 2
30999: PUSH
31000: LD_INT 2
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: PUSH
31010: LD_INT 2
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 0
31019: PUSH
31020: LD_INT 2
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 1
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: LD_INT 0
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: LD_INT 1
31055: NEG
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 2
31063: NEG
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31094: LD_ADDR_VAR 0 55
31098: PUSH
31099: LD_INT 0
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: NEG
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: LD_INT 1
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 0
31142: PUSH
31143: LD_INT 1
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: PUSH
31150: LD_INT 1
31152: NEG
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: PUSH
31161: LD_INT 1
31163: NEG
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 1
31175: NEG
31176: PUSH
31177: LD_INT 2
31179: NEG
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: PUSH
31185: LD_INT 0
31187: PUSH
31188: LD_INT 2
31190: NEG
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: PUSH
31199: LD_INT 1
31201: NEG
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 0
31212: PUSH
31213: EMPTY
31214: LIST
31215: LIST
31216: PUSH
31217: LD_INT 2
31219: PUSH
31220: LD_INT 1
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PUSH
31227: LD_INT 2
31229: PUSH
31230: LD_INT 2
31232: PUSH
31233: EMPTY
31234: LIST
31235: LIST
31236: PUSH
31237: LD_INT 1
31239: PUSH
31240: LD_INT 2
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 0
31249: PUSH
31250: LD_INT 2
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 2
31270: NEG
31271: PUSH
31272: LD_INT 0
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 2
31281: NEG
31282: PUSH
31283: LD_INT 1
31285: NEG
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 2
31293: NEG
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31324: LD_ADDR_VAR 0 56
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 0
31341: PUSH
31342: LD_INT 1
31344: NEG
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 0
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: PUSH
31363: LD_INT 1
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 1
31382: NEG
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 2
31409: NEG
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 0
31417: PUSH
31418: LD_INT 2
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: PUSH
31429: LD_INT 1
31431: NEG
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: PUSH
31450: LD_INT 1
31452: PUSH
31453: EMPTY
31454: LIST
31455: LIST
31456: PUSH
31457: LD_INT 2
31459: PUSH
31460: LD_INT 2
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: LD_INT 2
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 0
31479: PUSH
31480: LD_INT 2
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 1
31489: NEG
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 2
31500: NEG
31501: PUSH
31502: LD_INT 0
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 2
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: NEG
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 2
31523: NEG
31524: PUSH
31525: LD_INT 2
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31554: LD_ADDR_VAR 0 57
31558: PUSH
31559: LD_INT 0
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 0
31571: PUSH
31572: LD_INT 1
31574: NEG
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: LD_INT 0
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: PUSH
31593: LD_INT 1
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 1
31612: NEG
31613: PUSH
31614: LD_INT 0
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: NEG
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 1
31635: NEG
31636: PUSH
31637: LD_INT 2
31639: NEG
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: LD_INT 0
31647: PUSH
31648: LD_INT 2
31650: NEG
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 1
31658: PUSH
31659: LD_INT 1
31661: NEG
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: PUSH
31677: LD_INT 2
31679: PUSH
31680: LD_INT 1
31682: PUSH
31683: EMPTY
31684: LIST
31685: LIST
31686: PUSH
31687: LD_INT 2
31689: PUSH
31690: LD_INT 2
31692: PUSH
31693: EMPTY
31694: LIST
31695: LIST
31696: PUSH
31697: LD_INT 1
31699: PUSH
31700: LD_INT 2
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 2
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 1
31719: NEG
31720: PUSH
31721: LD_INT 1
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: LD_INT 0
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: LD_INT 1
31745: NEG
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 2
31753: NEG
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31784: LD_ADDR_VAR 0 58
31788: PUSH
31789: LD_INT 0
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 1
31804: NEG
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 1
31812: PUSH
31813: LD_INT 0
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: LD_INT 1
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 0
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: NEG
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: PUSH
31863: LD_INT 1
31865: NEG
31866: PUSH
31867: LD_INT 2
31869: NEG
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 2
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: LD_INT 1
31891: NEG
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: PUSH
31897: LD_INT 2
31899: PUSH
31900: LD_INT 0
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 2
31909: PUSH
31910: LD_INT 1
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 2
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: PUSH
31930: LD_INT 2
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 0
31939: PUSH
31940: LD_INT 2
31942: PUSH
31943: EMPTY
31944: LIST
31945: LIST
31946: PUSH
31947: LD_INT 1
31949: NEG
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: LD_INT 0
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 2
31983: NEG
31984: PUSH
31985: LD_INT 2
31987: NEG
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32014: LD_ADDR_VAR 0 59
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 1
32034: NEG
32035: PUSH
32036: EMPTY
32037: LIST
32038: LIST
32039: PUSH
32040: LD_INT 1
32042: PUSH
32043: LD_INT 0
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 1
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: LD_INT 1
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: LD_INT 0
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: PUSH
32081: LD_INT 1
32083: NEG
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32102: LD_ADDR_VAR 0 60
32106: PUSH
32107: LD_INT 0
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 0
32119: PUSH
32120: LD_INT 1
32122: NEG
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: LD_INT 0
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 0
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 1
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: NEG
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32190: LD_ADDR_VAR 0 61
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 0
32207: PUSH
32208: LD_INT 1
32210: NEG
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 1
32218: PUSH
32219: LD_INT 0
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 1
32228: PUSH
32229: LD_INT 1
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 0
32238: PUSH
32239: LD_INT 1
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: PUSH
32246: LD_INT 1
32248: NEG
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: PUSH
32257: LD_INT 1
32259: NEG
32260: PUSH
32261: LD_INT 1
32263: NEG
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32278: LD_ADDR_VAR 0 62
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: LD_INT 1
32298: NEG
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 1
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: PUSH
32334: LD_INT 1
32336: NEG
32337: PUSH
32338: LD_INT 0
32340: PUSH
32341: EMPTY
32342: LIST
32343: LIST
32344: PUSH
32345: LD_INT 1
32347: NEG
32348: PUSH
32349: LD_INT 1
32351: NEG
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32366: LD_ADDR_VAR 0 63
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 1
32386: NEG
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 1
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 1
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 0
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 1
32424: NEG
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 1
32435: NEG
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32454: LD_ADDR_VAR 0 64
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 1
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 0
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: PUSH
32490: LD_INT 1
32492: PUSH
32493: LD_INT 1
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 0
32502: PUSH
32503: LD_INT 1
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 1
32512: NEG
32513: PUSH
32514: LD_INT 0
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: NEG
32524: PUSH
32525: LD_INT 1
32527: NEG
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: ST_TO_ADDR
// end ; 1 :
32542: GO 38439
32544: LD_INT 1
32546: DOUBLE
32547: EQUAL
32548: IFTRUE 32552
32550: GO 35175
32552: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32553: LD_ADDR_VAR 0 11
32557: PUSH
32558: LD_INT 1
32560: NEG
32561: PUSH
32562: LD_INT 3
32564: NEG
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 3
32575: NEG
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: LD_INT 2
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: LIST
32596: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32597: LD_ADDR_VAR 0 12
32601: PUSH
32602: LD_INT 2
32604: PUSH
32605: LD_INT 1
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 3
32615: PUSH
32616: LD_INT 0
32618: PUSH
32619: EMPTY
32620: LIST
32621: LIST
32622: PUSH
32623: LD_INT 3
32625: PUSH
32626: LD_INT 1
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: LIST
32637: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32638: LD_ADDR_VAR 0 13
32642: PUSH
32643: LD_INT 3
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 3
32655: PUSH
32656: LD_INT 3
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 2
32665: PUSH
32666: LD_INT 3
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: EMPTY
32674: LIST
32675: LIST
32676: LIST
32677: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32678: LD_ADDR_VAR 0 14
32682: PUSH
32683: LD_INT 1
32685: PUSH
32686: LD_INT 3
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: LD_INT 0
32695: PUSH
32696: LD_INT 3
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: PUSH
32703: LD_INT 1
32705: NEG
32706: PUSH
32707: LD_INT 2
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: LIST
32718: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32719: LD_ADDR_VAR 0 15
32723: PUSH
32724: LD_INT 2
32726: NEG
32727: PUSH
32728: LD_INT 1
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 3
32737: NEG
32738: PUSH
32739: LD_INT 0
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 3
32748: NEG
32749: PUSH
32750: LD_INT 1
32752: NEG
32753: PUSH
32754: EMPTY
32755: LIST
32756: LIST
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32763: LD_ADDR_VAR 0 16
32767: PUSH
32768: LD_INT 2
32770: NEG
32771: PUSH
32772: LD_INT 3
32774: NEG
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 3
32782: NEG
32783: PUSH
32784: LD_INT 2
32786: NEG
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: PUSH
32792: LD_INT 3
32794: NEG
32795: PUSH
32796: LD_INT 3
32798: NEG
32799: PUSH
32800: EMPTY
32801: LIST
32802: LIST
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: LIST
32808: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32809: LD_ADDR_VAR 0 17
32813: PUSH
32814: LD_INT 1
32816: NEG
32817: PUSH
32818: LD_INT 3
32820: NEG
32821: PUSH
32822: EMPTY
32823: LIST
32824: LIST
32825: PUSH
32826: LD_INT 0
32828: PUSH
32829: LD_INT 3
32831: NEG
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: PUSH
32837: LD_INT 1
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: LIST
32852: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32853: LD_ADDR_VAR 0 18
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 1
32863: NEG
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 3
32871: PUSH
32872: LD_INT 0
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 3
32881: PUSH
32882: LD_INT 1
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32894: LD_ADDR_VAR 0 19
32898: PUSH
32899: LD_INT 3
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 3
32911: PUSH
32912: LD_INT 3
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 2
32921: PUSH
32922: LD_INT 3
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: LIST
32933: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32934: LD_ADDR_VAR 0 20
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: LD_INT 3
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 0
32951: PUSH
32952: LD_INT 3
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: LIST
32974: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32975: LD_ADDR_VAR 0 21
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 3
32993: NEG
32994: PUSH
32995: LD_INT 0
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: PUSH
33002: LD_INT 3
33004: NEG
33005: PUSH
33006: LD_INT 1
33008: NEG
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33019: LD_ADDR_VAR 0 22
33023: PUSH
33024: LD_INT 2
33026: NEG
33027: PUSH
33028: LD_INT 3
33030: NEG
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PUSH
33036: LD_INT 3
33038: NEG
33039: PUSH
33040: LD_INT 2
33042: NEG
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: LD_INT 3
33050: NEG
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: LIST
33064: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33065: LD_ADDR_VAR 0 23
33069: PUSH
33070: LD_INT 0
33072: PUSH
33073: LD_INT 3
33075: NEG
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 4
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 1
33095: PUSH
33096: LD_INT 3
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33109: LD_ADDR_VAR 0 24
33113: PUSH
33114: LD_INT 3
33116: PUSH
33117: LD_INT 0
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 3
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: LIST
33149: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33150: LD_ADDR_VAR 0 25
33154: PUSH
33155: LD_INT 3
33157: PUSH
33158: LD_INT 3
33160: PUSH
33161: EMPTY
33162: LIST
33163: LIST
33164: PUSH
33165: LD_INT 4
33167: PUSH
33168: LD_INT 3
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: PUSH
33175: LD_INT 3
33177: PUSH
33178: LD_INT 4
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: LIST
33189: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
33190: LD_ADDR_VAR 0 26
33194: PUSH
33195: LD_INT 0
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: PUSH
33208: LD_INT 4
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: NEG
33218: PUSH
33219: LD_INT 3
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33231: LD_ADDR_VAR 0 27
33235: PUSH
33236: LD_INT 3
33238: NEG
33239: PUSH
33240: LD_INT 0
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: PUSH
33247: LD_INT 3
33249: NEG
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 4
33260: NEG
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33275: LD_ADDR_VAR 0 28
33279: PUSH
33280: LD_INT 3
33282: NEG
33283: PUSH
33284: LD_INT 3
33286: NEG
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 3
33294: NEG
33295: PUSH
33296: LD_INT 4
33298: NEG
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 4
33306: NEG
33307: PUSH
33308: LD_INT 3
33310: NEG
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: LIST
33320: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33321: LD_ADDR_VAR 0 29
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: LD_INT 3
33332: NEG
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: PUSH
33338: LD_INT 0
33340: PUSH
33341: LD_INT 3
33343: NEG
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: LD_INT 2
33354: NEG
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: PUSH
33360: LD_INT 1
33362: NEG
33363: PUSH
33364: LD_INT 4
33366: NEG
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 4
33377: NEG
33378: PUSH
33379: EMPTY
33380: LIST
33381: LIST
33382: PUSH
33383: LD_INT 1
33385: PUSH
33386: LD_INT 3
33388: NEG
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 1
33396: NEG
33397: PUSH
33398: LD_INT 5
33400: NEG
33401: PUSH
33402: EMPTY
33403: LIST
33404: LIST
33405: PUSH
33406: LD_INT 0
33408: PUSH
33409: LD_INT 5
33411: NEG
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 1
33419: PUSH
33420: LD_INT 4
33422: NEG
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 1
33430: NEG
33431: PUSH
33432: LD_INT 6
33434: NEG
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PUSH
33440: LD_INT 0
33442: PUSH
33443: LD_INT 6
33445: NEG
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: LD_INT 5
33456: NEG
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33476: LD_ADDR_VAR 0 30
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 3
33494: PUSH
33495: LD_INT 0
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 1
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 3
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: PUSH
33523: LD_INT 4
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 4
33535: PUSH
33536: LD_INT 1
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 4
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: PUSH
33554: LD_INT 5
33556: PUSH
33557: LD_INT 0
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 5
33566: PUSH
33567: LD_INT 1
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 5
33576: PUSH
33577: LD_INT 1
33579: NEG
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 6
33587: PUSH
33588: LD_INT 0
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PUSH
33595: LD_INT 6
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33619: LD_ADDR_VAR 0 31
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 3
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 2
33646: PUSH
33647: LD_INT 3
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PUSH
33654: LD_INT 4
33656: PUSH
33657: LD_INT 3
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 4
33666: PUSH
33667: LD_INT 4
33669: PUSH
33670: EMPTY
33671: LIST
33672: LIST
33673: PUSH
33674: LD_INT 3
33676: PUSH
33677: LD_INT 4
33679: PUSH
33680: EMPTY
33681: LIST
33682: LIST
33683: PUSH
33684: LD_INT 5
33686: PUSH
33687: LD_INT 4
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 5
33696: PUSH
33697: LD_INT 5
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 4
33706: PUSH
33707: LD_INT 5
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 6
33716: PUSH
33717: LD_INT 5
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 6
33726: PUSH
33727: LD_INT 6
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 5
33736: PUSH
33737: LD_INT 6
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33758: LD_ADDR_VAR 0 32
33762: PUSH
33763: LD_INT 1
33765: PUSH
33766: LD_INT 3
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: LD_INT 3
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 1
33785: NEG
33786: PUSH
33787: LD_INT 2
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 1
33796: PUSH
33797: LD_INT 4
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: LD_INT 4
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: EMPTY
33822: LIST
33823: LIST
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: LD_INT 5
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 5
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 1
33847: NEG
33848: PUSH
33849: LD_INT 4
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 1
33858: PUSH
33859: LD_INT 6
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: LD_INT 0
33868: PUSH
33869: LD_INT 6
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 1
33878: NEG
33879: PUSH
33880: LD_INT 5
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33901: LD_ADDR_VAR 0 33
33905: PUSH
33906: LD_INT 2
33908: NEG
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 3
33919: NEG
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: LD_INT 3
33930: NEG
33931: PUSH
33932: LD_INT 1
33934: NEG
33935: PUSH
33936: EMPTY
33937: LIST
33938: LIST
33939: PUSH
33940: LD_INT 3
33942: NEG
33943: PUSH
33944: LD_INT 1
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 4
33953: NEG
33954: PUSH
33955: LD_INT 0
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 4
33964: NEG
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 4
33976: NEG
33977: PUSH
33978: LD_INT 1
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: LD_INT 5
33987: NEG
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 5
33998: NEG
33999: PUSH
34000: LD_INT 1
34002: NEG
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 5
34010: NEG
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 6
34021: NEG
34022: PUSH
34023: LD_INT 0
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 6
34032: NEG
34033: PUSH
34034: LD_INT 1
34036: NEG
34037: PUSH
34038: EMPTY
34039: LIST
34040: LIST
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34056: LD_ADDR_VAR 0 34
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: LD_INT 3
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 3
34075: NEG
34076: PUSH
34077: LD_INT 2
34079: NEG
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: PUSH
34085: LD_INT 3
34087: NEG
34088: PUSH
34089: LD_INT 3
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 3
34099: NEG
34100: PUSH
34101: LD_INT 4
34103: NEG
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PUSH
34109: LD_INT 4
34111: NEG
34112: PUSH
34113: LD_INT 3
34115: NEG
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PUSH
34121: LD_INT 4
34123: NEG
34124: PUSH
34125: LD_INT 4
34127: NEG
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 4
34135: NEG
34136: PUSH
34137: LD_INT 5
34139: NEG
34140: PUSH
34141: EMPTY
34142: LIST
34143: LIST
34144: PUSH
34145: LD_INT 5
34147: NEG
34148: PUSH
34149: LD_INT 4
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 5
34159: NEG
34160: PUSH
34161: LD_INT 5
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 5
34171: NEG
34172: PUSH
34173: LD_INT 6
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 6
34183: NEG
34184: PUSH
34185: LD_INT 5
34187: NEG
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: PUSH
34193: LD_INT 6
34195: NEG
34196: PUSH
34197: LD_INT 6
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34219: LD_ADDR_VAR 0 41
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: LD_INT 2
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: NEG
34238: PUSH
34239: LD_INT 3
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: LD_INT 2
34252: NEG
34253: PUSH
34254: EMPTY
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34263: LD_ADDR_VAR 0 42
34267: PUSH
34268: LD_INT 2
34270: PUSH
34271: LD_INT 0
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: LD_INT 1
34283: NEG
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: PUSH
34289: LD_INT 3
34291: PUSH
34292: LD_INT 1
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34304: LD_ADDR_VAR 0 43
34308: PUSH
34309: LD_INT 2
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 3
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: LD_INT 3
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: LIST
34343: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34344: LD_ADDR_VAR 0 44
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 3
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 1
34371: NEG
34372: PUSH
34373: LD_INT 2
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: LIST
34384: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34385: LD_ADDR_VAR 0 45
34389: PUSH
34390: LD_INT 2
34392: NEG
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 1
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 3
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34429: LD_ADDR_VAR 0 46
34433: PUSH
34434: LD_INT 2
34436: NEG
34437: PUSH
34438: LD_INT 2
34440: NEG
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: NEG
34449: PUSH
34450: LD_INT 3
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 3
34460: NEG
34461: PUSH
34462: LD_INT 2
34464: NEG
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: LIST
34474: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34475: LD_ADDR_VAR 0 47
34479: PUSH
34480: LD_INT 2
34482: NEG
34483: PUSH
34484: LD_INT 3
34486: NEG
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: LD_INT 1
34494: NEG
34495: PUSH
34496: LD_INT 3
34498: NEG
34499: PUSH
34500: EMPTY
34501: LIST
34502: LIST
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34508: LD_ADDR_VAR 0 48
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: LD_INT 2
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 1
34529: NEG
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34539: LD_ADDR_VAR 0 49
34543: PUSH
34544: LD_INT 3
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 3
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34568: LD_ADDR_VAR 0 50
34572: PUSH
34573: LD_INT 2
34575: PUSH
34576: LD_INT 3
34578: PUSH
34579: EMPTY
34580: LIST
34581: LIST
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: LD_INT 3
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34597: LD_ADDR_VAR 0 51
34601: PUSH
34602: LD_INT 1
34604: NEG
34605: PUSH
34606: LD_INT 2
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: NEG
34616: PUSH
34617: LD_INT 1
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34628: LD_ADDR_VAR 0 52
34632: PUSH
34633: LD_INT 3
34635: NEG
34636: PUSH
34637: LD_INT 1
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 3
34647: NEG
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34661: LD_ADDR_VAR 0 53
34665: PUSH
34666: LD_INT 1
34668: NEG
34669: PUSH
34670: LD_INT 3
34672: NEG
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 3
34683: NEG
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 1
34691: PUSH
34692: LD_INT 2
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34705: LD_ADDR_VAR 0 54
34709: PUSH
34710: LD_INT 2
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 3
34733: PUSH
34734: LD_INT 1
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: LIST
34745: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34746: LD_ADDR_VAR 0 55
34750: PUSH
34751: LD_INT 3
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 3
34763: PUSH
34764: LD_INT 3
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: PUSH
34774: LD_INT 3
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PUSH
34781: EMPTY
34782: LIST
34783: LIST
34784: LIST
34785: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34786: LD_ADDR_VAR 0 56
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: LD_INT 3
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 0
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: PUSH
34811: LD_INT 1
34813: NEG
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: LIST
34826: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34827: LD_ADDR_VAR 0 57
34831: PUSH
34832: LD_INT 2
34834: NEG
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: PUSH
34843: LD_INT 3
34845: NEG
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 3
34856: NEG
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: EMPTY
34867: LIST
34868: LIST
34869: LIST
34870: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34871: LD_ADDR_VAR 0 58
34875: PUSH
34876: LD_INT 2
34878: NEG
34879: PUSH
34880: LD_INT 3
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 3
34890: NEG
34891: PUSH
34892: LD_INT 2
34894: NEG
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 3
34902: NEG
34903: PUSH
34904: LD_INT 3
34906: NEG
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34917: LD_ADDR_VAR 0 59
34921: PUSH
34922: LD_INT 1
34924: NEG
34925: PUSH
34926: LD_INT 2
34928: NEG
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 0
34936: PUSH
34937: LD_INT 2
34939: NEG
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: LIST
34960: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34961: LD_ADDR_VAR 0 60
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 2
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
35002: LD_ADDR_VAR 0 61
35006: PUSH
35007: LD_INT 2
35009: PUSH
35010: LD_INT 1
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 2
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 1
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: LIST
35041: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35042: LD_ADDR_VAR 0 62
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: LD_INT 2
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: LD_INT 2
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: LIST
35082: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35083: LD_ADDR_VAR 0 63
35087: PUSH
35088: LD_INT 1
35090: NEG
35091: PUSH
35092: LD_INT 1
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 2
35101: NEG
35102: PUSH
35103: LD_INT 0
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 2
35112: NEG
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: LIST
35126: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35127: LD_ADDR_VAR 0 64
35131: PUSH
35132: LD_INT 1
35134: NEG
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 2
35146: NEG
35147: PUSH
35148: LD_INT 1
35150: NEG
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: LD_INT 2
35158: NEG
35159: PUSH
35160: LD_INT 2
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: LIST
35172: ST_TO_ADDR
// end ; 2 :
35173: GO 38439
35175: LD_INT 2
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35183
35181: GO 38438
35183: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35184: LD_ADDR_VAR 0 29
35188: PUSH
35189: LD_INT 4
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 4
35201: PUSH
35202: LD_INT 1
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 5
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 5
35222: PUSH
35223: LD_INT 1
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 4
35232: PUSH
35233: LD_INT 1
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 3
35252: PUSH
35253: LD_INT 1
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: LD_INT 2
35266: NEG
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 5
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 3
35284: PUSH
35285: LD_INT 3
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: PUSH
35292: LD_INT 3
35294: PUSH
35295: LD_INT 2
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 4
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: PUSH
35312: LD_INT 4
35314: PUSH
35315: LD_INT 4
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: LD_INT 4
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 4
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 4
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 0
35374: PUSH
35375: LD_INT 4
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 0
35384: PUSH
35385: LD_INT 3
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 4
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: PUSH
35405: LD_INT 5
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 5
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: LD_INT 4
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: NEG
35436: PUSH
35437: LD_INT 3
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: LD_INT 5
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: NEG
35457: PUSH
35458: LD_INT 3
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 3
35467: NEG
35468: PUSH
35469: LD_INT 0
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 3
35478: NEG
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: NEG
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: NEG
35502: PUSH
35503: LD_INT 1
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 3
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 4
35523: NEG
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 4
35534: NEG
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 4
35546: NEG
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 2
35558: NEG
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 4
35569: NEG
35570: PUSH
35571: LD_INT 4
35573: NEG
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 4
35581: NEG
35582: PUSH
35583: LD_INT 5
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 3
35593: NEG
35594: PUSH
35595: LD_INT 4
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 3
35605: NEG
35606: PUSH
35607: LD_INT 3
35609: NEG
35610: PUSH
35611: EMPTY
35612: LIST
35613: LIST
35614: PUSH
35615: LD_INT 4
35617: NEG
35618: PUSH
35619: LD_INT 3
35621: NEG
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 5
35629: NEG
35630: PUSH
35631: LD_INT 4
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 5
35641: NEG
35642: PUSH
35643: LD_INT 5
35645: NEG
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 3
35653: NEG
35654: PUSH
35655: LD_INT 5
35657: NEG
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 5
35665: NEG
35666: PUSH
35667: LD_INT 3
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35722: LD_ADDR_VAR 0 30
35726: PUSH
35727: LD_INT 4
35729: PUSH
35730: LD_INT 4
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: PUSH
35737: LD_INT 4
35739: PUSH
35740: LD_INT 3
35742: PUSH
35743: EMPTY
35744: LIST
35745: LIST
35746: PUSH
35747: LD_INT 5
35749: PUSH
35750: LD_INT 4
35752: PUSH
35753: EMPTY
35754: LIST
35755: LIST
35756: PUSH
35757: LD_INT 5
35759: PUSH
35760: LD_INT 5
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 4
35769: PUSH
35770: LD_INT 5
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 3
35779: PUSH
35780: LD_INT 4
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 3
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 5
35799: PUSH
35800: LD_INT 3
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 3
35809: PUSH
35810: LD_INT 5
35812: PUSH
35813: EMPTY
35814: LIST
35815: LIST
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 3
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 2
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 3
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 4
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 4
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 3
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 2
35891: PUSH
35892: LD_INT 4
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: LD_INT 2
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 4
35912: NEG
35913: PUSH
35914: LD_INT 0
35916: PUSH
35917: EMPTY
35918: LIST
35919: LIST
35920: PUSH
35921: LD_INT 4
35923: NEG
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 3
35935: NEG
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 3
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: PUSH
35951: EMPTY
35952: LIST
35953: LIST
35954: PUSH
35955: LD_INT 4
35957: NEG
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 5
35968: NEG
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PUSH
35977: LD_INT 5
35979: NEG
35980: PUSH
35981: LD_INT 1
35983: NEG
35984: PUSH
35985: EMPTY
35986: LIST
35987: LIST
35988: PUSH
35989: LD_INT 5
35991: NEG
35992: PUSH
35993: LD_INT 2
35995: NEG
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 3
36003: NEG
36004: PUSH
36005: LD_INT 2
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 3
36014: NEG
36015: PUSH
36016: LD_INT 3
36018: NEG
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 3
36026: NEG
36027: PUSH
36028: LD_INT 4
36030: NEG
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: LD_INT 3
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 3
36062: NEG
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 4
36074: NEG
36075: PUSH
36076: LD_INT 3
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 4
36086: NEG
36087: PUSH
36088: LD_INT 4
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 2
36098: NEG
36099: PUSH
36100: LD_INT 4
36102: NEG
36103: PUSH
36104: EMPTY
36105: LIST
36106: LIST
36107: PUSH
36108: LD_INT 4
36110: NEG
36111: PUSH
36112: LD_INT 2
36114: NEG
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 0
36122: PUSH
36123: LD_INT 4
36125: NEG
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 5
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 4
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: LD_INT 3
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 3
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: NEG
36178: PUSH
36179: LD_INT 4
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: LD_INT 5
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: PUSH
36202: LD_INT 3
36204: NEG
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: LD_INT 5
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36269: LD_ADDR_VAR 0 31
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 4
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: LD_INT 3
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: LD_INT 4
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: LD_INT 5
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 0
36316: PUSH
36317: LD_INT 5
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PUSH
36328: LD_INT 4
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: NEG
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: LD_INT 5
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 2
36358: NEG
36359: PUSH
36360: LD_INT 3
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: PUSH
36367: LD_INT 3
36369: NEG
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 3
36380: NEG
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 2
36403: NEG
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 4
36425: NEG
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 4
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 4
36448: NEG
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 2
36460: NEG
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 4
36471: NEG
36472: PUSH
36473: LD_INT 4
36475: NEG
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 4
36483: NEG
36484: PUSH
36485: LD_INT 5
36487: NEG
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 3
36495: NEG
36496: PUSH
36497: LD_INT 4
36499: NEG
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 3
36507: NEG
36508: PUSH
36509: LD_INT 3
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 4
36519: NEG
36520: PUSH
36521: LD_INT 3
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 5
36531: NEG
36532: PUSH
36533: LD_INT 4
36535: NEG
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 5
36543: NEG
36544: PUSH
36545: LD_INT 5
36547: NEG
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 3
36555: NEG
36556: PUSH
36557: LD_INT 5
36559: NEG
36560: PUSH
36561: EMPTY
36562: LIST
36563: LIST
36564: PUSH
36565: LD_INT 5
36567: NEG
36568: PUSH
36569: LD_INT 3
36571: NEG
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 3
36582: NEG
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 0
36590: PUSH
36591: LD_INT 4
36593: NEG
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: PUSH
36599: LD_INT 1
36601: PUSH
36602: LD_INT 3
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 1
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: LD_INT 3
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 4
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 2
36669: NEG
36670: PUSH
36671: LD_INT 4
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 4
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 4
36691: PUSH
36692: LD_INT 1
36694: NEG
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 5
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 5
36712: PUSH
36713: LD_INT 1
36715: PUSH
36716: EMPTY
36717: LIST
36718: LIST
36719: PUSH
36720: LD_INT 4
36722: PUSH
36723: LD_INT 1
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 3
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 3
36753: PUSH
36754: LD_INT 2
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 5
36764: PUSH
36765: LD_INT 2
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: EMPTY
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36819: LD_ADDR_VAR 0 32
36823: PUSH
36824: LD_INT 4
36826: NEG
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 4
36837: NEG
36838: PUSH
36839: LD_INT 1
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 3
36849: NEG
36850: PUSH
36851: LD_INT 0
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 3
36860: NEG
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 4
36871: NEG
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 5
36882: NEG
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_INT 5
36893: NEG
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 5
36905: NEG
36906: PUSH
36907: LD_INT 2
36909: NEG
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 3
36917: NEG
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 3
36928: NEG
36929: PUSH
36930: LD_INT 3
36932: NEG
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PUSH
36938: LD_INT 3
36940: NEG
36941: PUSH
36942: LD_INT 4
36944: NEG
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: PUSH
36950: LD_INT 2
36952: NEG
36953: PUSH
36954: LD_INT 3
36956: NEG
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: PUSH
36974: LD_INT 3
36976: NEG
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 4
36988: NEG
36989: PUSH
36990: LD_INT 3
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 4
37000: NEG
37001: PUSH
37002: LD_INT 4
37004: NEG
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: LD_INT 4
37016: NEG
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 4
37024: NEG
37025: PUSH
37026: LD_INT 2
37028: NEG
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: PUSH
37034: LD_INT 0
37036: PUSH
37037: LD_INT 4
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: LD_INT 5
37050: NEG
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: PUSH
37056: LD_INT 1
37058: PUSH
37059: LD_INT 4
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: LD_INT 3
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 0
37080: PUSH
37081: LD_INT 3
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: LD_INT 4
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 1
37103: NEG
37104: PUSH
37105: LD_INT 5
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 2
37115: PUSH
37116: LD_INT 3
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: LD_INT 5
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 3
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 3
37148: PUSH
37149: LD_INT 1
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 4
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 4
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 3
37179: PUSH
37180: LD_INT 1
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 0
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: PUSH
37211: LD_INT 2
37213: NEG
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 4
37221: PUSH
37222: LD_INT 2
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 4
37231: PUSH
37232: LD_INT 4
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 4
37241: PUSH
37242: LD_INT 3
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 5
37251: PUSH
37252: LD_INT 4
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 5
37261: PUSH
37262: LD_INT 5
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 4
37271: PUSH
37272: LD_INT 5
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 3
37281: PUSH
37282: LD_INT 4
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: LD_INT 3
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 5
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 3
37311: PUSH
37312: LD_INT 5
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: LIST
37352: LIST
37353: LIST
37354: LIST
37355: LIST
37356: LIST
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37366: LD_ADDR_VAR 0 33
37370: PUSH
37371: LD_INT 4
37373: NEG
37374: PUSH
37375: LD_INT 4
37377: NEG
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: PUSH
37383: LD_INT 4
37385: NEG
37386: PUSH
37387: LD_INT 5
37389: NEG
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 3
37397: NEG
37398: PUSH
37399: LD_INT 4
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: NEG
37410: PUSH
37411: LD_INT 3
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 4
37421: NEG
37422: PUSH
37423: LD_INT 3
37425: NEG
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 5
37433: NEG
37434: PUSH
37435: LD_INT 4
37437: NEG
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 5
37445: NEG
37446: PUSH
37447: LD_INT 5
37449: NEG
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 3
37457: NEG
37458: PUSH
37459: LD_INT 5
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 5
37469: NEG
37470: PUSH
37471: LD_INT 3
37473: NEG
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: LD_INT 3
37484: NEG
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 0
37492: PUSH
37493: LD_INT 4
37495: NEG
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 1
37503: PUSH
37504: LD_INT 3
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 2
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: LD_INT 0
37525: PUSH
37526: LD_INT 2
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: NEG
37537: PUSH
37538: LD_INT 3
37540: NEG
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: LD_INT 4
37552: NEG
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 2
37560: PUSH
37561: LD_INT 2
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: LD_INT 4
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 4
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 4
37593: PUSH
37594: LD_INT 1
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 5
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 5
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: LD_INT 4
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 0
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 5
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 3
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 4
37696: PUSH
37697: LD_INT 3
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 4
37706: PUSH
37707: LD_INT 4
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 4
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 2
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: PUSH
37744: LD_INT 4
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 4
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 4
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 3
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: PUSH
37787: LD_INT 4
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 0
37806: PUSH
37807: LD_INT 5
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: LD_INT 4
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: LD_INT 5
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: NEG
37849: PUSH
37850: LD_INT 3
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37904: LD_ADDR_VAR 0 34
37908: PUSH
37909: LD_INT 0
37911: PUSH
37912: LD_INT 4
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 0
37922: PUSH
37923: LD_INT 5
37925: NEG
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PUSH
37934: LD_INT 4
37936: NEG
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: PUSH
37945: LD_INT 3
37947: NEG
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 3
37958: NEG
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: LD_INT 4
37970: NEG
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: LD_INT 5
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 2
37990: PUSH
37991: LD_INT 3
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 2
38001: NEG
38002: PUSH
38003: LD_INT 5
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 3
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 3
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 4
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 4
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 3
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 0
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 2
38088: NEG
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 4
38096: PUSH
38097: LD_INT 2
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 4
38106: PUSH
38107: LD_INT 4
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: LD_INT 4
38116: PUSH
38117: LD_INT 3
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 5
38126: PUSH
38127: LD_INT 4
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 5
38136: PUSH
38137: LD_INT 5
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 4
38146: PUSH
38147: LD_INT 5
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 3
38156: PUSH
38157: LD_INT 4
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 3
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 5
38176: PUSH
38177: LD_INT 3
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 3
38186: PUSH
38187: LD_INT 5
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 3
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 3
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 4
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 4
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 3
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 2
38268: PUSH
38269: LD_INT 4
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 2
38278: NEG
38279: PUSH
38280: LD_INT 2
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 4
38289: NEG
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 4
38300: NEG
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 3
38312: NEG
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 3
38323: NEG
38324: PUSH
38325: LD_INT 1
38327: PUSH
38328: EMPTY
38329: LIST
38330: LIST
38331: PUSH
38332: LD_INT 4
38334: NEG
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 5
38345: NEG
38346: PUSH
38347: LD_INT 0
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 5
38356: NEG
38357: PUSH
38358: LD_INT 1
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 5
38368: NEG
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: EMPTY
38375: LIST
38376: LIST
38377: PUSH
38378: LD_INT 3
38380: NEG
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: EMPTY
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: ST_TO_ADDR
// end ; end ;
38436: GO 38439
38438: POP
// case btype of b_depot , b_warehouse :
38439: LD_VAR 0 1
38443: PUSH
38444: LD_INT 0
38446: DOUBLE
38447: EQUAL
38448: IFTRUE 38458
38450: LD_INT 1
38452: DOUBLE
38453: EQUAL
38454: IFTRUE 38458
38456: GO 38659
38458: POP
// case nation of nation_american :
38459: LD_VAR 0 5
38463: PUSH
38464: LD_INT 1
38466: DOUBLE
38467: EQUAL
38468: IFTRUE 38472
38470: GO 38528
38472: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38473: LD_ADDR_VAR 0 9
38477: PUSH
38478: LD_VAR 0 11
38482: PUSH
38483: LD_VAR 0 12
38487: PUSH
38488: LD_VAR 0 13
38492: PUSH
38493: LD_VAR 0 14
38497: PUSH
38498: LD_VAR 0 15
38502: PUSH
38503: LD_VAR 0 16
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: PUSH
38516: LD_VAR 0 4
38520: PUSH
38521: LD_INT 1
38523: PLUS
38524: ARRAY
38525: ST_TO_ADDR
38526: GO 38657
38528: LD_INT 2
38530: DOUBLE
38531: EQUAL
38532: IFTRUE 38536
38534: GO 38592
38536: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38537: LD_ADDR_VAR 0 9
38541: PUSH
38542: LD_VAR 0 17
38546: PUSH
38547: LD_VAR 0 18
38551: PUSH
38552: LD_VAR 0 19
38556: PUSH
38557: LD_VAR 0 20
38561: PUSH
38562: LD_VAR 0 21
38566: PUSH
38567: LD_VAR 0 22
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: PUSH
38580: LD_VAR 0 4
38584: PUSH
38585: LD_INT 1
38587: PLUS
38588: ARRAY
38589: ST_TO_ADDR
38590: GO 38657
38592: LD_INT 3
38594: DOUBLE
38595: EQUAL
38596: IFTRUE 38600
38598: GO 38656
38600: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38601: LD_ADDR_VAR 0 9
38605: PUSH
38606: LD_VAR 0 23
38610: PUSH
38611: LD_VAR 0 24
38615: PUSH
38616: LD_VAR 0 25
38620: PUSH
38621: LD_VAR 0 26
38625: PUSH
38626: LD_VAR 0 27
38630: PUSH
38631: LD_VAR 0 28
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: PUSH
38644: LD_VAR 0 4
38648: PUSH
38649: LD_INT 1
38651: PLUS
38652: ARRAY
38653: ST_TO_ADDR
38654: GO 38657
38656: POP
38657: GO 39212
38659: LD_INT 2
38661: DOUBLE
38662: EQUAL
38663: IFTRUE 38673
38665: LD_INT 3
38667: DOUBLE
38668: EQUAL
38669: IFTRUE 38673
38671: GO 38729
38673: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38674: LD_ADDR_VAR 0 9
38678: PUSH
38679: LD_VAR 0 29
38683: PUSH
38684: LD_VAR 0 30
38688: PUSH
38689: LD_VAR 0 31
38693: PUSH
38694: LD_VAR 0 32
38698: PUSH
38699: LD_VAR 0 33
38703: PUSH
38704: LD_VAR 0 34
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: PUSH
38717: LD_VAR 0 4
38721: PUSH
38722: LD_INT 1
38724: PLUS
38725: ARRAY
38726: ST_TO_ADDR
38727: GO 39212
38729: LD_INT 16
38731: DOUBLE
38732: EQUAL
38733: IFTRUE 38791
38735: LD_INT 17
38737: DOUBLE
38738: EQUAL
38739: IFTRUE 38791
38741: LD_INT 18
38743: DOUBLE
38744: EQUAL
38745: IFTRUE 38791
38747: LD_INT 19
38749: DOUBLE
38750: EQUAL
38751: IFTRUE 38791
38753: LD_INT 22
38755: DOUBLE
38756: EQUAL
38757: IFTRUE 38791
38759: LD_INT 20
38761: DOUBLE
38762: EQUAL
38763: IFTRUE 38791
38765: LD_INT 21
38767: DOUBLE
38768: EQUAL
38769: IFTRUE 38791
38771: LD_INT 23
38773: DOUBLE
38774: EQUAL
38775: IFTRUE 38791
38777: LD_INT 24
38779: DOUBLE
38780: EQUAL
38781: IFTRUE 38791
38783: LD_INT 25
38785: DOUBLE
38786: EQUAL
38787: IFTRUE 38791
38789: GO 38847
38791: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38792: LD_ADDR_VAR 0 9
38796: PUSH
38797: LD_VAR 0 35
38801: PUSH
38802: LD_VAR 0 36
38806: PUSH
38807: LD_VAR 0 37
38811: PUSH
38812: LD_VAR 0 38
38816: PUSH
38817: LD_VAR 0 39
38821: PUSH
38822: LD_VAR 0 40
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: PUSH
38835: LD_VAR 0 4
38839: PUSH
38840: LD_INT 1
38842: PLUS
38843: ARRAY
38844: ST_TO_ADDR
38845: GO 39212
38847: LD_INT 6
38849: DOUBLE
38850: EQUAL
38851: IFTRUE 38903
38853: LD_INT 7
38855: DOUBLE
38856: EQUAL
38857: IFTRUE 38903
38859: LD_INT 8
38861: DOUBLE
38862: EQUAL
38863: IFTRUE 38903
38865: LD_INT 13
38867: DOUBLE
38868: EQUAL
38869: IFTRUE 38903
38871: LD_INT 12
38873: DOUBLE
38874: EQUAL
38875: IFTRUE 38903
38877: LD_INT 15
38879: DOUBLE
38880: EQUAL
38881: IFTRUE 38903
38883: LD_INT 11
38885: DOUBLE
38886: EQUAL
38887: IFTRUE 38903
38889: LD_INT 14
38891: DOUBLE
38892: EQUAL
38893: IFTRUE 38903
38895: LD_INT 10
38897: DOUBLE
38898: EQUAL
38899: IFTRUE 38903
38901: GO 38959
38903: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38904: LD_ADDR_VAR 0 9
38908: PUSH
38909: LD_VAR 0 41
38913: PUSH
38914: LD_VAR 0 42
38918: PUSH
38919: LD_VAR 0 43
38923: PUSH
38924: LD_VAR 0 44
38928: PUSH
38929: LD_VAR 0 45
38933: PUSH
38934: LD_VAR 0 46
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: LD_VAR 0 4
38951: PUSH
38952: LD_INT 1
38954: PLUS
38955: ARRAY
38956: ST_TO_ADDR
38957: GO 39212
38959: LD_INT 36
38961: DOUBLE
38962: EQUAL
38963: IFTRUE 38967
38965: GO 39023
38967: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38968: LD_ADDR_VAR 0 9
38972: PUSH
38973: LD_VAR 0 47
38977: PUSH
38978: LD_VAR 0 48
38982: PUSH
38983: LD_VAR 0 49
38987: PUSH
38988: LD_VAR 0 50
38992: PUSH
38993: LD_VAR 0 51
38997: PUSH
38998: LD_VAR 0 52
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: PUSH
39011: LD_VAR 0 4
39015: PUSH
39016: LD_INT 1
39018: PLUS
39019: ARRAY
39020: ST_TO_ADDR
39021: GO 39212
39023: LD_INT 4
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39049
39029: LD_INT 5
39031: DOUBLE
39032: EQUAL
39033: IFTRUE 39049
39035: LD_INT 34
39037: DOUBLE
39038: EQUAL
39039: IFTRUE 39049
39041: LD_INT 37
39043: DOUBLE
39044: EQUAL
39045: IFTRUE 39049
39047: GO 39105
39049: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39050: LD_ADDR_VAR 0 9
39054: PUSH
39055: LD_VAR 0 53
39059: PUSH
39060: LD_VAR 0 54
39064: PUSH
39065: LD_VAR 0 55
39069: PUSH
39070: LD_VAR 0 56
39074: PUSH
39075: LD_VAR 0 57
39079: PUSH
39080: LD_VAR 0 58
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: PUSH
39093: LD_VAR 0 4
39097: PUSH
39098: LD_INT 1
39100: PLUS
39101: ARRAY
39102: ST_TO_ADDR
39103: GO 39212
39105: LD_INT 31
39107: DOUBLE
39108: EQUAL
39109: IFTRUE 39155
39111: LD_INT 32
39113: DOUBLE
39114: EQUAL
39115: IFTRUE 39155
39117: LD_INT 33
39119: DOUBLE
39120: EQUAL
39121: IFTRUE 39155
39123: LD_INT 27
39125: DOUBLE
39126: EQUAL
39127: IFTRUE 39155
39129: LD_INT 26
39131: DOUBLE
39132: EQUAL
39133: IFTRUE 39155
39135: LD_INT 28
39137: DOUBLE
39138: EQUAL
39139: IFTRUE 39155
39141: LD_INT 29
39143: DOUBLE
39144: EQUAL
39145: IFTRUE 39155
39147: LD_INT 30
39149: DOUBLE
39150: EQUAL
39151: IFTRUE 39155
39153: GO 39211
39155: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39156: LD_ADDR_VAR 0 9
39160: PUSH
39161: LD_VAR 0 59
39165: PUSH
39166: LD_VAR 0 60
39170: PUSH
39171: LD_VAR 0 61
39175: PUSH
39176: LD_VAR 0 62
39180: PUSH
39181: LD_VAR 0 63
39185: PUSH
39186: LD_VAR 0 64
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: PUSH
39199: LD_VAR 0 4
39203: PUSH
39204: LD_INT 1
39206: PLUS
39207: ARRAY
39208: ST_TO_ADDR
39209: GO 39212
39211: POP
// temp_list2 = [ ] ;
39212: LD_ADDR_VAR 0 10
39216: PUSH
39217: EMPTY
39218: ST_TO_ADDR
// for i in temp_list do
39219: LD_ADDR_VAR 0 8
39223: PUSH
39224: LD_VAR 0 9
39228: PUSH
39229: FOR_IN
39230: IFFALSE 39282
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39232: LD_ADDR_VAR 0 10
39236: PUSH
39237: LD_VAR 0 10
39241: PUSH
39242: LD_VAR 0 8
39246: PUSH
39247: LD_INT 1
39249: ARRAY
39250: PUSH
39251: LD_VAR 0 2
39255: PLUS
39256: PUSH
39257: LD_VAR 0 8
39261: PUSH
39262: LD_INT 2
39264: ARRAY
39265: PUSH
39266: LD_VAR 0 3
39270: PLUS
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: EMPTY
39277: LIST
39278: ADD
39279: ST_TO_ADDR
39280: GO 39229
39282: POP
39283: POP
// result = temp_list2 ;
39284: LD_ADDR_VAR 0 7
39288: PUSH
39289: LD_VAR 0 10
39293: ST_TO_ADDR
// end ;
39294: LD_VAR 0 7
39298: RET
// export function EnemyInRange ( unit , dist ) ; begin
39299: LD_INT 0
39301: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39302: LD_ADDR_VAR 0 3
39306: PUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 255
39316: PPUSH
39317: LD_VAR 0 1
39321: PPUSH
39322: CALL_OW 250
39326: PPUSH
39327: LD_VAR 0 1
39331: PPUSH
39332: CALL_OW 251
39336: PPUSH
39337: LD_VAR 0 2
39341: PPUSH
39342: CALL 12672 0 4
39346: PUSH
39347: LD_INT 4
39349: ARRAY
39350: ST_TO_ADDR
// end ;
39351: LD_VAR 0 3
39355: RET
// export function PlayerSeeMe ( unit ) ; begin
39356: LD_INT 0
39358: PPUSH
// result := See ( your_side , unit ) ;
39359: LD_ADDR_VAR 0 2
39363: PUSH
39364: LD_OWVAR 2
39368: PPUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: CALL_OW 292
39378: ST_TO_ADDR
// end ;
39379: LD_VAR 0 2
39383: RET
// export function ReverseDir ( unit ) ; begin
39384: LD_INT 0
39386: PPUSH
// if not unit then
39387: LD_VAR 0 1
39391: NOT
39392: IFFALSE 39396
// exit ;
39394: GO 39419
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39396: LD_ADDR_VAR 0 2
39400: PUSH
39401: LD_VAR 0 1
39405: PPUSH
39406: CALL_OW 254
39410: PUSH
39411: LD_INT 3
39413: PLUS
39414: PUSH
39415: LD_INT 6
39417: MOD
39418: ST_TO_ADDR
// end ;
39419: LD_VAR 0 2
39423: RET
// export function ReverseArray ( array ) ; var i ; begin
39424: LD_INT 0
39426: PPUSH
39427: PPUSH
// if not array then
39428: LD_VAR 0 1
39432: NOT
39433: IFFALSE 39437
// exit ;
39435: GO 39492
// result := [ ] ;
39437: LD_ADDR_VAR 0 2
39441: PUSH
39442: EMPTY
39443: ST_TO_ADDR
// for i := array downto 1 do
39444: LD_ADDR_VAR 0 3
39448: PUSH
39449: DOUBLE
39450: LD_VAR 0 1
39454: INC
39455: ST_TO_ADDR
39456: LD_INT 1
39458: PUSH
39459: FOR_DOWNTO
39460: IFFALSE 39490
// result := Join ( result , array [ i ] ) ;
39462: LD_ADDR_VAR 0 2
39466: PUSH
39467: LD_VAR 0 2
39471: PPUSH
39472: LD_VAR 0 1
39476: PUSH
39477: LD_VAR 0 3
39481: ARRAY
39482: PPUSH
39483: CALL 44157 0 2
39487: ST_TO_ADDR
39488: GO 39459
39490: POP
39491: POP
// end ;
39492: LD_VAR 0 2
39496: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39497: LD_INT 0
39499: PPUSH
39500: PPUSH
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
// if not unit or not hexes then
39505: LD_VAR 0 1
39509: NOT
39510: PUSH
39511: LD_VAR 0 2
39515: NOT
39516: OR
39517: IFFALSE 39521
// exit ;
39519: GO 39644
// dist := 9999 ;
39521: LD_ADDR_VAR 0 5
39525: PUSH
39526: LD_INT 9999
39528: ST_TO_ADDR
// for i = 1 to hexes do
39529: LD_ADDR_VAR 0 4
39533: PUSH
39534: DOUBLE
39535: LD_INT 1
39537: DEC
39538: ST_TO_ADDR
39539: LD_VAR 0 2
39543: PUSH
39544: FOR_TO
39545: IFFALSE 39632
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39547: LD_ADDR_VAR 0 6
39551: PUSH
39552: LD_VAR 0 1
39556: PPUSH
39557: LD_VAR 0 2
39561: PUSH
39562: LD_VAR 0 4
39566: ARRAY
39567: PUSH
39568: LD_INT 1
39570: ARRAY
39571: PPUSH
39572: LD_VAR 0 2
39576: PUSH
39577: LD_VAR 0 4
39581: ARRAY
39582: PUSH
39583: LD_INT 2
39585: ARRAY
39586: PPUSH
39587: CALL_OW 297
39591: ST_TO_ADDR
// if tdist < dist then
39592: LD_VAR 0 6
39596: PUSH
39597: LD_VAR 0 5
39601: LESS
39602: IFFALSE 39630
// begin hex := hexes [ i ] ;
39604: LD_ADDR_VAR 0 8
39608: PUSH
39609: LD_VAR 0 2
39613: PUSH
39614: LD_VAR 0 4
39618: ARRAY
39619: ST_TO_ADDR
// dist := tdist ;
39620: LD_ADDR_VAR 0 5
39624: PUSH
39625: LD_VAR 0 6
39629: ST_TO_ADDR
// end ; end ;
39630: GO 39544
39632: POP
39633: POP
// result := hex ;
39634: LD_ADDR_VAR 0 3
39638: PUSH
39639: LD_VAR 0 8
39643: ST_TO_ADDR
// end ;
39644: LD_VAR 0 3
39648: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39649: LD_INT 0
39651: PPUSH
39652: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39653: LD_VAR 0 1
39657: NOT
39658: PUSH
39659: LD_VAR 0 1
39663: PUSH
39664: LD_INT 21
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 23
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PPUSH
39688: CALL_OW 69
39692: IN
39693: NOT
39694: OR
39695: IFFALSE 39699
// exit ;
39697: GO 39746
// for i = 1 to 3 do
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: DOUBLE
39705: LD_INT 1
39707: DEC
39708: ST_TO_ADDR
39709: LD_INT 3
39711: PUSH
39712: FOR_TO
39713: IFFALSE 39744
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39715: LD_VAR 0 1
39719: PPUSH
39720: CALL_OW 250
39724: PPUSH
39725: LD_VAR 0 1
39729: PPUSH
39730: CALL_OW 251
39734: PPUSH
39735: LD_INT 1
39737: PPUSH
39738: CALL_OW 453
39742: GO 39712
39744: POP
39745: POP
// end ;
39746: LD_VAR 0 2
39750: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39751: LD_INT 0
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
// if not unit or not enemy_unit then
39759: LD_VAR 0 1
39763: NOT
39764: PUSH
39765: LD_VAR 0 2
39769: NOT
39770: OR
39771: IFFALSE 39775
// exit ;
39773: GO 40242
// if GetLives ( i ) < 250 then
39775: LD_VAR 0 4
39779: PPUSH
39780: CALL_OW 256
39784: PUSH
39785: LD_INT 250
39787: LESS
39788: IFFALSE 39801
// begin ComAutodestruct ( i ) ;
39790: LD_VAR 0 4
39794: PPUSH
39795: CALL 39649 0 1
// exit ;
39799: GO 40242
// end ; x := GetX ( enemy_unit ) ;
39801: LD_ADDR_VAR 0 7
39805: PUSH
39806: LD_VAR 0 2
39810: PPUSH
39811: CALL_OW 250
39815: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39816: LD_ADDR_VAR 0 8
39820: PUSH
39821: LD_VAR 0 2
39825: PPUSH
39826: CALL_OW 251
39830: ST_TO_ADDR
// if not x or not y then
39831: LD_VAR 0 7
39835: NOT
39836: PUSH
39837: LD_VAR 0 8
39841: NOT
39842: OR
39843: IFFALSE 39847
// exit ;
39845: GO 40242
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39847: LD_ADDR_VAR 0 6
39851: PUSH
39852: LD_VAR 0 7
39856: PPUSH
39857: LD_INT 0
39859: PPUSH
39860: LD_INT 4
39862: PPUSH
39863: CALL_OW 272
39867: PUSH
39868: LD_VAR 0 8
39872: PPUSH
39873: LD_INT 0
39875: PPUSH
39876: LD_INT 4
39878: PPUSH
39879: CALL_OW 273
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_VAR 0 7
39892: PPUSH
39893: LD_INT 1
39895: PPUSH
39896: LD_INT 4
39898: PPUSH
39899: CALL_OW 272
39903: PUSH
39904: LD_VAR 0 8
39908: PPUSH
39909: LD_INT 1
39911: PPUSH
39912: LD_INT 4
39914: PPUSH
39915: CALL_OW 273
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_VAR 0 7
39928: PPUSH
39929: LD_INT 2
39931: PPUSH
39932: LD_INT 4
39934: PPUSH
39935: CALL_OW 272
39939: PUSH
39940: LD_VAR 0 8
39944: PPUSH
39945: LD_INT 2
39947: PPUSH
39948: LD_INT 4
39950: PPUSH
39951: CALL_OW 273
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: PUSH
39960: LD_VAR 0 7
39964: PPUSH
39965: LD_INT 3
39967: PPUSH
39968: LD_INT 4
39970: PPUSH
39971: CALL_OW 272
39975: PUSH
39976: LD_VAR 0 8
39980: PPUSH
39981: LD_INT 3
39983: PPUSH
39984: LD_INT 4
39986: PPUSH
39987: CALL_OW 273
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_VAR 0 7
40000: PPUSH
40001: LD_INT 4
40003: PPUSH
40004: LD_INT 4
40006: PPUSH
40007: CALL_OW 272
40011: PUSH
40012: LD_VAR 0 8
40016: PPUSH
40017: LD_INT 4
40019: PPUSH
40020: LD_INT 4
40022: PPUSH
40023: CALL_OW 273
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_VAR 0 7
40036: PPUSH
40037: LD_INT 5
40039: PPUSH
40040: LD_INT 4
40042: PPUSH
40043: CALL_OW 272
40047: PUSH
40048: LD_VAR 0 8
40052: PPUSH
40053: LD_INT 5
40055: PPUSH
40056: LD_INT 4
40058: PPUSH
40059: CALL_OW 273
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: ST_TO_ADDR
// for i = tmp downto 1 do
40076: LD_ADDR_VAR 0 4
40080: PUSH
40081: DOUBLE
40082: LD_VAR 0 6
40086: INC
40087: ST_TO_ADDR
40088: LD_INT 1
40090: PUSH
40091: FOR_DOWNTO
40092: IFFALSE 40193
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40094: LD_VAR 0 6
40098: PUSH
40099: LD_VAR 0 4
40103: ARRAY
40104: PUSH
40105: LD_INT 1
40107: ARRAY
40108: PPUSH
40109: LD_VAR 0 6
40113: PUSH
40114: LD_VAR 0 4
40118: ARRAY
40119: PUSH
40120: LD_INT 2
40122: ARRAY
40123: PPUSH
40124: CALL_OW 488
40128: NOT
40129: PUSH
40130: LD_VAR 0 6
40134: PUSH
40135: LD_VAR 0 4
40139: ARRAY
40140: PUSH
40141: LD_INT 1
40143: ARRAY
40144: PPUSH
40145: LD_VAR 0 6
40149: PUSH
40150: LD_VAR 0 4
40154: ARRAY
40155: PUSH
40156: LD_INT 2
40158: ARRAY
40159: PPUSH
40160: CALL_OW 428
40164: PUSH
40165: LD_INT 0
40167: NONEQUAL
40168: OR
40169: IFFALSE 40191
// tmp := Delete ( tmp , i ) ;
40171: LD_ADDR_VAR 0 6
40175: PUSH
40176: LD_VAR 0 6
40180: PPUSH
40181: LD_VAR 0 4
40185: PPUSH
40186: CALL_OW 3
40190: ST_TO_ADDR
40191: GO 40091
40193: POP
40194: POP
// j := GetClosestHex ( unit , tmp ) ;
40195: LD_ADDR_VAR 0 5
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: LD_VAR 0 6
40209: PPUSH
40210: CALL 39497 0 2
40214: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40215: LD_VAR 0 1
40219: PPUSH
40220: LD_VAR 0 5
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: PPUSH
40229: LD_VAR 0 5
40233: PUSH
40234: LD_INT 2
40236: ARRAY
40237: PPUSH
40238: CALL_OW 111
// end ;
40242: LD_VAR 0 3
40246: RET
// export function PrepareApemanSoldier ( ) ; begin
40247: LD_INT 0
40249: PPUSH
// uc_nation := 0 ;
40250: LD_ADDR_OWVAR 21
40254: PUSH
40255: LD_INT 0
40257: ST_TO_ADDR
// hc_sex := sex_male ;
40258: LD_ADDR_OWVAR 27
40262: PUSH
40263: LD_INT 1
40265: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
40266: LD_ADDR_OWVAR 28
40270: PUSH
40271: LD_INT 15
40273: ST_TO_ADDR
// hc_gallery :=  ;
40274: LD_ADDR_OWVAR 33
40278: PUSH
40279: LD_STRING 
40281: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40282: LD_ADDR_OWVAR 31
40286: PUSH
40287: LD_INT 0
40289: PPUSH
40290: LD_INT 3
40292: PPUSH
40293: CALL_OW 12
40297: PUSH
40298: LD_INT 0
40300: PPUSH
40301: LD_INT 3
40303: PPUSH
40304: CALL_OW 12
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 0
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: ST_TO_ADDR
// end ;
40321: LD_VAR 0 1
40325: RET
// export function PrepareApemanEngineer ( ) ; begin
40326: LD_INT 0
40328: PPUSH
// uc_nation := 0 ;
40329: LD_ADDR_OWVAR 21
40333: PUSH
40334: LD_INT 0
40336: ST_TO_ADDR
// hc_sex := sex_male ;
40337: LD_ADDR_OWVAR 27
40341: PUSH
40342: LD_INT 1
40344: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40345: LD_ADDR_OWVAR 28
40349: PUSH
40350: LD_INT 16
40352: ST_TO_ADDR
// hc_gallery :=  ;
40353: LD_ADDR_OWVAR 33
40357: PUSH
40358: LD_STRING 
40360: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40361: LD_ADDR_OWVAR 31
40365: PUSH
40366: LD_INT 0
40368: PPUSH
40369: LD_INT 3
40371: PPUSH
40372: CALL_OW 12
40376: PUSH
40377: LD_INT 0
40379: PPUSH
40380: LD_INT 3
40382: PPUSH
40383: CALL_OW 12
40387: PUSH
40388: LD_INT 0
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// end ;
40400: LD_VAR 0 1
40404: RET
// export function PrepareApeman ( agressivity ) ; begin
40405: LD_INT 0
40407: PPUSH
// uc_side := 0 ;
40408: LD_ADDR_OWVAR 20
40412: PUSH
40413: LD_INT 0
40415: ST_TO_ADDR
// uc_nation := 0 ;
40416: LD_ADDR_OWVAR 21
40420: PUSH
40421: LD_INT 0
40423: ST_TO_ADDR
// hc_sex := sex_male ;
40424: LD_ADDR_OWVAR 27
40428: PUSH
40429: LD_INT 1
40431: ST_TO_ADDR
// hc_class := class_apeman ;
40432: LD_ADDR_OWVAR 28
40436: PUSH
40437: LD_INT 12
40439: ST_TO_ADDR
// hc_gallery :=  ;
40440: LD_ADDR_OWVAR 33
40444: PUSH
40445: LD_STRING 
40447: ST_TO_ADDR
// if agressivity = 0 then
40448: LD_VAR 0 1
40452: PUSH
40453: LD_INT 0
40455: EQUAL
40456: IFFALSE 40468
// hc_agressivity := 0 else
40458: LD_ADDR_OWVAR 35
40462: PUSH
40463: LD_INT 0
40465: ST_TO_ADDR
40466: GO 40489
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40468: LD_ADDR_OWVAR 35
40472: PUSH
40473: LD_VAR 0 1
40477: NEG
40478: PPUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 12
40488: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40489: LD_ADDR_OWVAR 31
40493: PUSH
40494: LD_INT 0
40496: PPUSH
40497: LD_INT 3
40499: PPUSH
40500: CALL_OW 12
40504: PUSH
40505: LD_INT 0
40507: PPUSH
40508: LD_INT 3
40510: PPUSH
40511: CALL_OW 12
40515: PUSH
40516: LD_INT 0
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: ST_TO_ADDR
// end ;
40528: LD_VAR 0 2
40532: RET
// export function PrepareTiger ( agressivity ) ; begin
40533: LD_INT 0
40535: PPUSH
// uc_side := 0 ;
40536: LD_ADDR_OWVAR 20
40540: PUSH
40541: LD_INT 0
40543: ST_TO_ADDR
// uc_nation := 0 ;
40544: LD_ADDR_OWVAR 21
40548: PUSH
40549: LD_INT 0
40551: ST_TO_ADDR
// hc_class := class_tiger ;
40552: LD_ADDR_OWVAR 28
40556: PUSH
40557: LD_INT 14
40559: ST_TO_ADDR
// hc_gallery :=  ;
40560: LD_ADDR_OWVAR 33
40564: PUSH
40565: LD_STRING 
40567: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40568: LD_ADDR_OWVAR 35
40572: PUSH
40573: LD_VAR 0 1
40577: NEG
40578: PPUSH
40579: LD_VAR 0 1
40583: PPUSH
40584: CALL_OW 12
40588: ST_TO_ADDR
// end ;
40589: LD_VAR 0 2
40593: RET
// export function PrepareEnchidna ( ) ; begin
40594: LD_INT 0
40596: PPUSH
// uc_side := 0 ;
40597: LD_ADDR_OWVAR 20
40601: PUSH
40602: LD_INT 0
40604: ST_TO_ADDR
// uc_nation := 0 ;
40605: LD_ADDR_OWVAR 21
40609: PUSH
40610: LD_INT 0
40612: ST_TO_ADDR
// hc_class := class_baggie ;
40613: LD_ADDR_OWVAR 28
40617: PUSH
40618: LD_INT 13
40620: ST_TO_ADDR
// hc_gallery :=  ;
40621: LD_ADDR_OWVAR 33
40625: PUSH
40626: LD_STRING 
40628: ST_TO_ADDR
// end ;
40629: LD_VAR 0 1
40633: RET
// export function PrepareFrog ( ) ; begin
40634: LD_INT 0
40636: PPUSH
// uc_side := 0 ;
40637: LD_ADDR_OWVAR 20
40641: PUSH
40642: LD_INT 0
40644: ST_TO_ADDR
// uc_nation := 0 ;
40645: LD_ADDR_OWVAR 21
40649: PUSH
40650: LD_INT 0
40652: ST_TO_ADDR
// hc_class := class_frog ;
40653: LD_ADDR_OWVAR 28
40657: PUSH
40658: LD_INT 19
40660: ST_TO_ADDR
// hc_gallery :=  ;
40661: LD_ADDR_OWVAR 33
40665: PUSH
40666: LD_STRING 
40668: ST_TO_ADDR
// end ;
40669: LD_VAR 0 1
40673: RET
// export function PrepareFish ( ) ; begin
40674: LD_INT 0
40676: PPUSH
// uc_side := 0 ;
40677: LD_ADDR_OWVAR 20
40681: PUSH
40682: LD_INT 0
40684: ST_TO_ADDR
// uc_nation := 0 ;
40685: LD_ADDR_OWVAR 21
40689: PUSH
40690: LD_INT 0
40692: ST_TO_ADDR
// hc_class := class_fish ;
40693: LD_ADDR_OWVAR 28
40697: PUSH
40698: LD_INT 20
40700: ST_TO_ADDR
// hc_gallery :=  ;
40701: LD_ADDR_OWVAR 33
40705: PUSH
40706: LD_STRING 
40708: ST_TO_ADDR
// end ;
40709: LD_VAR 0 1
40713: RET
// export function PrepareBird ( ) ; begin
40714: LD_INT 0
40716: PPUSH
// uc_side := 0 ;
40717: LD_ADDR_OWVAR 20
40721: PUSH
40722: LD_INT 0
40724: ST_TO_ADDR
// uc_nation := 0 ;
40725: LD_ADDR_OWVAR 21
40729: PUSH
40730: LD_INT 0
40732: ST_TO_ADDR
// hc_class := class_phororhacos ;
40733: LD_ADDR_OWVAR 28
40737: PUSH
40738: LD_INT 18
40740: ST_TO_ADDR
// hc_gallery :=  ;
40741: LD_ADDR_OWVAR 33
40745: PUSH
40746: LD_STRING 
40748: ST_TO_ADDR
// end ;
40749: LD_VAR 0 1
40753: RET
// export function PrepareHorse ( ) ; begin
40754: LD_INT 0
40756: PPUSH
// uc_side := 0 ;
40757: LD_ADDR_OWVAR 20
40761: PUSH
40762: LD_INT 0
40764: ST_TO_ADDR
// uc_nation := 0 ;
40765: LD_ADDR_OWVAR 21
40769: PUSH
40770: LD_INT 0
40772: ST_TO_ADDR
// hc_class := class_horse ;
40773: LD_ADDR_OWVAR 28
40777: PUSH
40778: LD_INT 21
40780: ST_TO_ADDR
// hc_gallery :=  ;
40781: LD_ADDR_OWVAR 33
40785: PUSH
40786: LD_STRING 
40788: ST_TO_ADDR
// end ;
40789: LD_VAR 0 1
40793: RET
// export function PrepareMastodont ( ) ; begin
40794: LD_INT 0
40796: PPUSH
// uc_side := 0 ;
40797: LD_ADDR_OWVAR 20
40801: PUSH
40802: LD_INT 0
40804: ST_TO_ADDR
// uc_nation := 0 ;
40805: LD_ADDR_OWVAR 21
40809: PUSH
40810: LD_INT 0
40812: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40813: LD_ADDR_OWVAR 37
40817: PUSH
40818: LD_INT 31
40820: ST_TO_ADDR
// vc_control := control_rider ;
40821: LD_ADDR_OWVAR 38
40825: PUSH
40826: LD_INT 4
40828: ST_TO_ADDR
// end ;
40829: LD_VAR 0 1
40833: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40834: LD_INT 0
40836: PPUSH
40837: PPUSH
40838: PPUSH
// uc_side = 0 ;
40839: LD_ADDR_OWVAR 20
40843: PUSH
40844: LD_INT 0
40846: ST_TO_ADDR
// uc_nation = 0 ;
40847: LD_ADDR_OWVAR 21
40851: PUSH
40852: LD_INT 0
40854: ST_TO_ADDR
// InitHc_All ( ) ;
40855: CALL_OW 584
// InitVc ;
40859: CALL_OW 20
// if mastodonts then
40863: LD_VAR 0 6
40867: IFFALSE 40934
// for i = 1 to mastodonts do
40869: LD_ADDR_VAR 0 11
40873: PUSH
40874: DOUBLE
40875: LD_INT 1
40877: DEC
40878: ST_TO_ADDR
40879: LD_VAR 0 6
40883: PUSH
40884: FOR_TO
40885: IFFALSE 40932
// begin vc_chassis := 31 ;
40887: LD_ADDR_OWVAR 37
40891: PUSH
40892: LD_INT 31
40894: ST_TO_ADDR
// vc_control := control_rider ;
40895: LD_ADDR_OWVAR 38
40899: PUSH
40900: LD_INT 4
40902: ST_TO_ADDR
// animal := CreateVehicle ;
40903: LD_ADDR_VAR 0 12
40907: PUSH
40908: CALL_OW 45
40912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40913: LD_VAR 0 12
40917: PPUSH
40918: LD_VAR 0 8
40922: PPUSH
40923: LD_INT 0
40925: PPUSH
40926: CALL 43062 0 3
// end ;
40930: GO 40884
40932: POP
40933: POP
// if horses then
40934: LD_VAR 0 5
40938: IFFALSE 41005
// for i = 1 to horses do
40940: LD_ADDR_VAR 0 11
40944: PUSH
40945: DOUBLE
40946: LD_INT 1
40948: DEC
40949: ST_TO_ADDR
40950: LD_VAR 0 5
40954: PUSH
40955: FOR_TO
40956: IFFALSE 41003
// begin hc_class := 21 ;
40958: LD_ADDR_OWVAR 28
40962: PUSH
40963: LD_INT 21
40965: ST_TO_ADDR
// hc_gallery :=  ;
40966: LD_ADDR_OWVAR 33
40970: PUSH
40971: LD_STRING 
40973: ST_TO_ADDR
// animal := CreateHuman ;
40974: LD_ADDR_VAR 0 12
40978: PUSH
40979: CALL_OW 44
40983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40984: LD_VAR 0 12
40988: PPUSH
40989: LD_VAR 0 8
40993: PPUSH
40994: LD_INT 0
40996: PPUSH
40997: CALL 43062 0 3
// end ;
41001: GO 40955
41003: POP
41004: POP
// if birds then
41005: LD_VAR 0 1
41009: IFFALSE 41076
// for i = 1 to birds do
41011: LD_ADDR_VAR 0 11
41015: PUSH
41016: DOUBLE
41017: LD_INT 1
41019: DEC
41020: ST_TO_ADDR
41021: LD_VAR 0 1
41025: PUSH
41026: FOR_TO
41027: IFFALSE 41074
// begin hc_class := 18 ;
41029: LD_ADDR_OWVAR 28
41033: PUSH
41034: LD_INT 18
41036: ST_TO_ADDR
// hc_gallery =  ;
41037: LD_ADDR_OWVAR 33
41041: PUSH
41042: LD_STRING 
41044: ST_TO_ADDR
// animal := CreateHuman ;
41045: LD_ADDR_VAR 0 12
41049: PUSH
41050: CALL_OW 44
41054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41055: LD_VAR 0 12
41059: PPUSH
41060: LD_VAR 0 8
41064: PPUSH
41065: LD_INT 0
41067: PPUSH
41068: CALL 43062 0 3
// end ;
41072: GO 41026
41074: POP
41075: POP
// if tigers then
41076: LD_VAR 0 2
41080: IFFALSE 41164
// for i = 1 to tigers do
41082: LD_ADDR_VAR 0 11
41086: PUSH
41087: DOUBLE
41088: LD_INT 1
41090: DEC
41091: ST_TO_ADDR
41092: LD_VAR 0 2
41096: PUSH
41097: FOR_TO
41098: IFFALSE 41162
// begin hc_class = class_tiger ;
41100: LD_ADDR_OWVAR 28
41104: PUSH
41105: LD_INT 14
41107: ST_TO_ADDR
// hc_gallery =  ;
41108: LD_ADDR_OWVAR 33
41112: PUSH
41113: LD_STRING 
41115: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41116: LD_ADDR_OWVAR 35
41120: PUSH
41121: LD_INT 7
41123: NEG
41124: PPUSH
41125: LD_INT 7
41127: PPUSH
41128: CALL_OW 12
41132: ST_TO_ADDR
// animal := CreateHuman ;
41133: LD_ADDR_VAR 0 12
41137: PUSH
41138: CALL_OW 44
41142: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41143: LD_VAR 0 12
41147: PPUSH
41148: LD_VAR 0 8
41152: PPUSH
41153: LD_INT 0
41155: PPUSH
41156: CALL 43062 0 3
// end ;
41160: GO 41097
41162: POP
41163: POP
// if apemans then
41164: LD_VAR 0 3
41168: IFFALSE 41291
// for i = 1 to apemans do
41170: LD_ADDR_VAR 0 11
41174: PUSH
41175: DOUBLE
41176: LD_INT 1
41178: DEC
41179: ST_TO_ADDR
41180: LD_VAR 0 3
41184: PUSH
41185: FOR_TO
41186: IFFALSE 41289
// begin hc_class = class_apeman ;
41188: LD_ADDR_OWVAR 28
41192: PUSH
41193: LD_INT 12
41195: ST_TO_ADDR
// hc_gallery =  ;
41196: LD_ADDR_OWVAR 33
41200: PUSH
41201: LD_STRING 
41203: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41204: LD_ADDR_OWVAR 35
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PPUSH
41213: LD_INT 2
41215: PPUSH
41216: CALL_OW 12
41220: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41221: LD_ADDR_OWVAR 31
41225: PUSH
41226: LD_INT 1
41228: PPUSH
41229: LD_INT 3
41231: PPUSH
41232: CALL_OW 12
41236: PUSH
41237: LD_INT 1
41239: PPUSH
41240: LD_INT 3
41242: PPUSH
41243: CALL_OW 12
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: ST_TO_ADDR
// animal := CreateHuman ;
41260: LD_ADDR_VAR 0 12
41264: PUSH
41265: CALL_OW 44
41269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41270: LD_VAR 0 12
41274: PPUSH
41275: LD_VAR 0 8
41279: PPUSH
41280: LD_INT 0
41282: PPUSH
41283: CALL 43062 0 3
// end ;
41287: GO 41185
41289: POP
41290: POP
// if enchidnas then
41291: LD_VAR 0 4
41295: IFFALSE 41362
// for i = 1 to enchidnas do
41297: LD_ADDR_VAR 0 11
41301: PUSH
41302: DOUBLE
41303: LD_INT 1
41305: DEC
41306: ST_TO_ADDR
41307: LD_VAR 0 4
41311: PUSH
41312: FOR_TO
41313: IFFALSE 41360
// begin hc_class = 13 ;
41315: LD_ADDR_OWVAR 28
41319: PUSH
41320: LD_INT 13
41322: ST_TO_ADDR
// hc_gallery =  ;
41323: LD_ADDR_OWVAR 33
41327: PUSH
41328: LD_STRING 
41330: ST_TO_ADDR
// animal := CreateHuman ;
41331: LD_ADDR_VAR 0 12
41335: PUSH
41336: CALL_OW 44
41340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41341: LD_VAR 0 12
41345: PPUSH
41346: LD_VAR 0 8
41350: PPUSH
41351: LD_INT 0
41353: PPUSH
41354: CALL 43062 0 3
// end ;
41358: GO 41312
41360: POP
41361: POP
// if fishes then
41362: LD_VAR 0 7
41366: IFFALSE 41433
// for i = 1 to fishes do
41368: LD_ADDR_VAR 0 11
41372: PUSH
41373: DOUBLE
41374: LD_INT 1
41376: DEC
41377: ST_TO_ADDR
41378: LD_VAR 0 7
41382: PUSH
41383: FOR_TO
41384: IFFALSE 41431
// begin hc_class = 20 ;
41386: LD_ADDR_OWVAR 28
41390: PUSH
41391: LD_INT 20
41393: ST_TO_ADDR
// hc_gallery =  ;
41394: LD_ADDR_OWVAR 33
41398: PUSH
41399: LD_STRING 
41401: ST_TO_ADDR
// animal := CreateHuman ;
41402: LD_ADDR_VAR 0 12
41406: PUSH
41407: CALL_OW 44
41411: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41412: LD_VAR 0 12
41416: PPUSH
41417: LD_VAR 0 9
41421: PPUSH
41422: LD_INT 0
41424: PPUSH
41425: CALL 43062 0 3
// end ;
41429: GO 41383
41431: POP
41432: POP
// end ;
41433: LD_VAR 0 10
41437: RET
// export function WantHeal ( sci , unit ) ; begin
41438: LD_INT 0
41440: PPUSH
// if GetTaskList ( sci ) > 0 then
41441: LD_VAR 0 1
41445: PPUSH
41446: CALL_OW 437
41450: PUSH
41451: LD_INT 0
41453: GREATER
41454: IFFALSE 41524
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41456: LD_VAR 0 1
41460: PPUSH
41461: CALL_OW 437
41465: PUSH
41466: LD_INT 1
41468: ARRAY
41469: PUSH
41470: LD_INT 1
41472: ARRAY
41473: PUSH
41474: LD_STRING l
41476: EQUAL
41477: PUSH
41478: LD_VAR 0 1
41482: PPUSH
41483: CALL_OW 437
41487: PUSH
41488: LD_INT 1
41490: ARRAY
41491: PUSH
41492: LD_INT 4
41494: ARRAY
41495: PUSH
41496: LD_VAR 0 2
41500: EQUAL
41501: AND
41502: IFFALSE 41514
// result := true else
41504: LD_ADDR_VAR 0 3
41508: PUSH
41509: LD_INT 1
41511: ST_TO_ADDR
41512: GO 41522
// result := false ;
41514: LD_ADDR_VAR 0 3
41518: PUSH
41519: LD_INT 0
41521: ST_TO_ADDR
// end else
41522: GO 41532
// result := false ;
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_INT 0
41531: ST_TO_ADDR
// end ;
41532: LD_VAR 0 3
41536: RET
// export function HealTarget ( sci ) ; begin
41537: LD_INT 0
41539: PPUSH
// if not sci then
41540: LD_VAR 0 1
41544: NOT
41545: IFFALSE 41549
// exit ;
41547: GO 41614
// result := 0 ;
41549: LD_ADDR_VAR 0 2
41553: PUSH
41554: LD_INT 0
41556: ST_TO_ADDR
// if GetTaskList ( sci ) then
41557: LD_VAR 0 1
41561: PPUSH
41562: CALL_OW 437
41566: IFFALSE 41614
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41568: LD_VAR 0 1
41572: PPUSH
41573: CALL_OW 437
41577: PUSH
41578: LD_INT 1
41580: ARRAY
41581: PUSH
41582: LD_INT 1
41584: ARRAY
41585: PUSH
41586: LD_STRING l
41588: EQUAL
41589: IFFALSE 41614
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41591: LD_ADDR_VAR 0 2
41595: PUSH
41596: LD_VAR 0 1
41600: PPUSH
41601: CALL_OW 437
41605: PUSH
41606: LD_INT 1
41608: ARRAY
41609: PUSH
41610: LD_INT 4
41612: ARRAY
41613: ST_TO_ADDR
// end ;
41614: LD_VAR 0 2
41618: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41619: LD_INT 0
41621: PPUSH
41622: PPUSH
41623: PPUSH
41624: PPUSH
// if not base_units then
41625: LD_VAR 0 1
41629: NOT
41630: IFFALSE 41634
// exit ;
41632: GO 41721
// result := false ;
41634: LD_ADDR_VAR 0 2
41638: PUSH
41639: LD_INT 0
41641: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41642: LD_ADDR_VAR 0 5
41646: PUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: LD_INT 21
41654: PUSH
41655: LD_INT 3
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PPUSH
41662: CALL_OW 72
41666: ST_TO_ADDR
// if not tmp then
41667: LD_VAR 0 5
41671: NOT
41672: IFFALSE 41676
// exit ;
41674: GO 41721
// for i in tmp do
41676: LD_ADDR_VAR 0 3
41680: PUSH
41681: LD_VAR 0 5
41685: PUSH
41686: FOR_IN
41687: IFFALSE 41719
// begin result := EnemyInRange ( i , 22 ) ;
41689: LD_ADDR_VAR 0 2
41693: PUSH
41694: LD_VAR 0 3
41698: PPUSH
41699: LD_INT 22
41701: PPUSH
41702: CALL 39299 0 2
41706: ST_TO_ADDR
// if result then
41707: LD_VAR 0 2
41711: IFFALSE 41717
// exit ;
41713: POP
41714: POP
41715: GO 41721
// end ;
41717: GO 41686
41719: POP
41720: POP
// end ;
41721: LD_VAR 0 2
41725: RET
// export function FilterByTag ( units , tag ) ; begin
41726: LD_INT 0
41728: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41729: LD_ADDR_VAR 0 3
41733: PUSH
41734: LD_VAR 0 1
41738: PPUSH
41739: LD_INT 120
41741: PUSH
41742: LD_VAR 0 2
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PPUSH
41751: CALL_OW 72
41755: ST_TO_ADDR
// end ;
41756: LD_VAR 0 3
41760: RET
// export function IsDriver ( un ) ; begin
41761: LD_INT 0
41763: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41764: LD_ADDR_VAR 0 2
41768: PUSH
41769: LD_VAR 0 1
41773: PUSH
41774: LD_INT 55
41776: PUSH
41777: EMPTY
41778: LIST
41779: PPUSH
41780: CALL_OW 69
41784: IN
41785: ST_TO_ADDR
// end ;
41786: LD_VAR 0 2
41790: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41791: LD_INT 0
41793: PPUSH
41794: PPUSH
// list := [ ] ;
41795: LD_ADDR_VAR 0 5
41799: PUSH
41800: EMPTY
41801: ST_TO_ADDR
// case d of 0 :
41802: LD_VAR 0 3
41806: PUSH
41807: LD_INT 0
41809: DOUBLE
41810: EQUAL
41811: IFTRUE 41815
41813: GO 41948
41815: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41816: LD_ADDR_VAR 0 5
41820: PUSH
41821: LD_VAR 0 1
41825: PUSH
41826: LD_INT 4
41828: MINUS
41829: PUSH
41830: LD_VAR 0 2
41834: PUSH
41835: LD_INT 4
41837: MINUS
41838: PUSH
41839: LD_INT 2
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: LIST
41846: PUSH
41847: LD_VAR 0 1
41851: PUSH
41852: LD_INT 3
41854: MINUS
41855: PUSH
41856: LD_VAR 0 2
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: PUSH
41869: LD_VAR 0 1
41873: PUSH
41874: LD_INT 4
41876: PLUS
41877: PUSH
41878: LD_VAR 0 2
41882: PUSH
41883: LD_INT 4
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: PUSH
41891: LD_VAR 0 1
41895: PUSH
41896: LD_INT 3
41898: PLUS
41899: PUSH
41900: LD_VAR 0 2
41904: PUSH
41905: LD_INT 3
41907: PLUS
41908: PUSH
41909: LD_INT 5
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: PUSH
41917: LD_VAR 0 1
41921: PUSH
41922: LD_VAR 0 2
41926: PUSH
41927: LD_INT 4
41929: PLUS
41930: PUSH
41931: LD_INT 0
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: ST_TO_ADDR
// end ; 1 :
41946: GO 42646
41948: LD_INT 1
41950: DOUBLE
41951: EQUAL
41952: IFTRUE 41956
41954: GO 42089
41956: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41957: LD_ADDR_VAR 0 5
41961: PUSH
41962: LD_VAR 0 1
41966: PUSH
41967: LD_VAR 0 2
41971: PUSH
41972: LD_INT 4
41974: MINUS
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: PUSH
41984: LD_VAR 0 1
41988: PUSH
41989: LD_INT 3
41991: MINUS
41992: PUSH
41993: LD_VAR 0 2
41997: PUSH
41998: LD_INT 3
42000: MINUS
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: LIST
42009: PUSH
42010: LD_VAR 0 1
42014: PUSH
42015: LD_INT 4
42017: MINUS
42018: PUSH
42019: LD_VAR 0 2
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: LIST
42031: PUSH
42032: LD_VAR 0 1
42036: PUSH
42037: LD_VAR 0 2
42041: PUSH
42042: LD_INT 3
42044: PLUS
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: PUSH
42054: LD_VAR 0 1
42058: PUSH
42059: LD_INT 4
42061: PLUS
42062: PUSH
42063: LD_VAR 0 2
42067: PUSH
42068: LD_INT 4
42070: PLUS
42071: PUSH
42072: LD_INT 5
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: ST_TO_ADDR
// end ; 2 :
42087: GO 42646
42089: LD_INT 2
42091: DOUBLE
42092: EQUAL
42093: IFTRUE 42097
42095: GO 42226
42097: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42098: LD_ADDR_VAR 0 5
42102: PUSH
42103: LD_VAR 0 1
42107: PUSH
42108: LD_VAR 0 2
42112: PUSH
42113: LD_INT 3
42115: MINUS
42116: PUSH
42117: LD_INT 3
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: PUSH
42125: LD_VAR 0 1
42129: PUSH
42130: LD_INT 4
42132: PLUS
42133: PUSH
42134: LD_VAR 0 2
42138: PUSH
42139: LD_INT 4
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: PUSH
42147: LD_VAR 0 1
42151: PUSH
42152: LD_VAR 0 2
42156: PUSH
42157: LD_INT 4
42159: PLUS
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: PUSH
42169: LD_VAR 0 1
42173: PUSH
42174: LD_INT 3
42176: MINUS
42177: PUSH
42178: LD_VAR 0 2
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: PUSH
42191: LD_VAR 0 1
42195: PUSH
42196: LD_INT 4
42198: MINUS
42199: PUSH
42200: LD_VAR 0 2
42204: PUSH
42205: LD_INT 4
42207: MINUS
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: ST_TO_ADDR
// end ; 3 :
42224: GO 42646
42226: LD_INT 3
42228: DOUBLE
42229: EQUAL
42230: IFTRUE 42234
42232: GO 42367
42234: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42235: LD_ADDR_VAR 0 5
42239: PUSH
42240: LD_VAR 0 1
42244: PUSH
42245: LD_INT 3
42247: PLUS
42248: PUSH
42249: LD_VAR 0 2
42253: PUSH
42254: LD_INT 4
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: PUSH
42262: LD_VAR 0 1
42266: PUSH
42267: LD_INT 4
42269: PLUS
42270: PUSH
42271: LD_VAR 0 2
42275: PUSH
42276: LD_INT 4
42278: PLUS
42279: PUSH
42280: LD_INT 5
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: PUSH
42288: LD_VAR 0 1
42292: PUSH
42293: LD_INT 4
42295: MINUS
42296: PUSH
42297: LD_VAR 0 2
42301: PUSH
42302: LD_INT 1
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: PUSH
42310: LD_VAR 0 1
42314: PUSH
42315: LD_VAR 0 2
42319: PUSH
42320: LD_INT 4
42322: MINUS
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: PUSH
42332: LD_VAR 0 1
42336: PUSH
42337: LD_INT 3
42339: MINUS
42340: PUSH
42341: LD_VAR 0 2
42345: PUSH
42346: LD_INT 3
42348: MINUS
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: ST_TO_ADDR
// end ; 4 :
42365: GO 42646
42367: LD_INT 4
42369: DOUBLE
42370: EQUAL
42371: IFTRUE 42375
42373: GO 42508
42375: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42376: LD_ADDR_VAR 0 5
42380: PUSH
42381: LD_VAR 0 1
42385: PUSH
42386: LD_VAR 0 2
42390: PUSH
42391: LD_INT 4
42393: PLUS
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: PUSH
42403: LD_VAR 0 1
42407: PUSH
42408: LD_INT 3
42410: PLUS
42411: PUSH
42412: LD_VAR 0 2
42416: PUSH
42417: LD_INT 3
42419: PLUS
42420: PUSH
42421: LD_INT 5
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: LIST
42428: PUSH
42429: LD_VAR 0 1
42433: PUSH
42434: LD_INT 4
42436: PLUS
42437: PUSH
42438: LD_VAR 0 2
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: PUSH
42451: LD_VAR 0 1
42455: PUSH
42456: LD_VAR 0 2
42460: PUSH
42461: LD_INT 3
42463: MINUS
42464: PUSH
42465: LD_INT 3
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: LIST
42472: PUSH
42473: LD_VAR 0 1
42477: PUSH
42478: LD_INT 4
42480: MINUS
42481: PUSH
42482: LD_VAR 0 2
42486: PUSH
42487: LD_INT 4
42489: MINUS
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: LIST
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: ST_TO_ADDR
// end ; 5 :
42506: GO 42646
42508: LD_INT 5
42510: DOUBLE
42511: EQUAL
42512: IFTRUE 42516
42514: GO 42645
42516: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42517: LD_ADDR_VAR 0 5
42521: PUSH
42522: LD_VAR 0 1
42526: PUSH
42527: LD_INT 4
42529: MINUS
42530: PUSH
42531: LD_VAR 0 2
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: PUSH
42544: LD_VAR 0 1
42548: PUSH
42549: LD_VAR 0 2
42553: PUSH
42554: LD_INT 4
42556: MINUS
42557: PUSH
42558: LD_INT 3
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: LIST
42565: PUSH
42566: LD_VAR 0 1
42570: PUSH
42571: LD_INT 4
42573: PLUS
42574: PUSH
42575: LD_VAR 0 2
42579: PUSH
42580: LD_INT 4
42582: PLUS
42583: PUSH
42584: LD_INT 5
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: PUSH
42592: LD_VAR 0 1
42596: PUSH
42597: LD_INT 3
42599: PLUS
42600: PUSH
42601: LD_VAR 0 2
42605: PUSH
42606: LD_INT 4
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: PUSH
42614: LD_VAR 0 1
42618: PUSH
42619: LD_VAR 0 2
42623: PUSH
42624: LD_INT 3
42626: PLUS
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: ST_TO_ADDR
// end ; end ;
42643: GO 42646
42645: POP
// result := list ;
42646: LD_ADDR_VAR 0 4
42650: PUSH
42651: LD_VAR 0 5
42655: ST_TO_ADDR
// end ;
42656: LD_VAR 0 4
42660: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42661: LD_INT 0
42663: PPUSH
42664: PPUSH
42665: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42666: LD_VAR 0 1
42670: NOT
42671: PUSH
42672: LD_VAR 0 2
42676: PUSH
42677: LD_INT 1
42679: PUSH
42680: LD_INT 2
42682: PUSH
42683: LD_INT 3
42685: PUSH
42686: LD_INT 4
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: IN
42695: NOT
42696: OR
42697: IFFALSE 42701
// exit ;
42699: GO 42784
// tmp := [ ] ;
42701: LD_ADDR_VAR 0 5
42705: PUSH
42706: EMPTY
42707: ST_TO_ADDR
// for i in units do
42708: LD_ADDR_VAR 0 4
42712: PUSH
42713: LD_VAR 0 1
42717: PUSH
42718: FOR_IN
42719: IFFALSE 42753
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
42721: LD_ADDR_VAR 0 5
42725: PUSH
42726: LD_VAR 0 5
42730: PPUSH
42731: LD_VAR 0 4
42735: PPUSH
42736: LD_VAR 0 2
42740: PPUSH
42741: CALL_OW 259
42745: PPUSH
42746: CALL 44157 0 2
42750: ST_TO_ADDR
42751: GO 42718
42753: POP
42754: POP
// if not tmp then
42755: LD_VAR 0 5
42759: NOT
42760: IFFALSE 42764
// exit ;
42762: GO 42784
// result := SortListByListDesc ( units , tmp ) ;
42764: LD_ADDR_VAR 0 3
42768: PUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: LD_VAR 0 5
42778: PPUSH
42779: CALL_OW 77
42783: ST_TO_ADDR
// end ;
42784: LD_VAR 0 3
42788: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42789: LD_INT 0
42791: PPUSH
42792: PPUSH
42793: PPUSH
// result := false ;
42794: LD_ADDR_VAR 0 3
42798: PUSH
42799: LD_INT 0
42801: ST_TO_ADDR
// if not building then
42802: LD_VAR 0 2
42806: NOT
42807: IFFALSE 42811
// exit ;
42809: GO 42949
// x := GetX ( building ) ;
42811: LD_ADDR_VAR 0 4
42815: PUSH
42816: LD_VAR 0 2
42820: PPUSH
42821: CALL_OW 250
42825: ST_TO_ADDR
// y := GetY ( building ) ;
42826: LD_ADDR_VAR 0 5
42830: PUSH
42831: LD_VAR 0 2
42835: PPUSH
42836: CALL_OW 251
42840: ST_TO_ADDR
// if not x or not y then
42841: LD_VAR 0 4
42845: NOT
42846: PUSH
42847: LD_VAR 0 5
42851: NOT
42852: OR
42853: IFFALSE 42857
// exit ;
42855: GO 42949
// if GetTaskList ( unit ) then
42857: LD_VAR 0 1
42861: PPUSH
42862: CALL_OW 437
42866: IFFALSE 42949
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42868: LD_STRING e
42870: PUSH
42871: LD_VAR 0 1
42875: PPUSH
42876: CALL_OW 437
42880: PUSH
42881: LD_INT 1
42883: ARRAY
42884: PUSH
42885: LD_INT 1
42887: ARRAY
42888: EQUAL
42889: PUSH
42890: LD_VAR 0 4
42894: PUSH
42895: LD_VAR 0 1
42899: PPUSH
42900: CALL_OW 437
42904: PUSH
42905: LD_INT 1
42907: ARRAY
42908: PUSH
42909: LD_INT 2
42911: ARRAY
42912: EQUAL
42913: AND
42914: PUSH
42915: LD_VAR 0 5
42919: PUSH
42920: LD_VAR 0 1
42924: PPUSH
42925: CALL_OW 437
42929: PUSH
42930: LD_INT 1
42932: ARRAY
42933: PUSH
42934: LD_INT 3
42936: ARRAY
42937: EQUAL
42938: AND
42939: IFFALSE 42949
// result := true end ;
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_INT 1
42948: ST_TO_ADDR
// end ;
42949: LD_VAR 0 3
42953: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42954: LD_INT 0
42956: PPUSH
// result := false ;
42957: LD_ADDR_VAR 0 4
42961: PUSH
42962: LD_INT 0
42964: ST_TO_ADDR
// if GetTaskList ( unit ) then
42965: LD_VAR 0 1
42969: PPUSH
42970: CALL_OW 437
42974: IFFALSE 43057
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42976: LD_STRING M
42978: PUSH
42979: LD_VAR 0 1
42983: PPUSH
42984: CALL_OW 437
42988: PUSH
42989: LD_INT 1
42991: ARRAY
42992: PUSH
42993: LD_INT 1
42995: ARRAY
42996: EQUAL
42997: PUSH
42998: LD_VAR 0 2
43002: PUSH
43003: LD_VAR 0 1
43007: PPUSH
43008: CALL_OW 437
43012: PUSH
43013: LD_INT 1
43015: ARRAY
43016: PUSH
43017: LD_INT 2
43019: ARRAY
43020: EQUAL
43021: AND
43022: PUSH
43023: LD_VAR 0 3
43027: PUSH
43028: LD_VAR 0 1
43032: PPUSH
43033: CALL_OW 437
43037: PUSH
43038: LD_INT 1
43040: ARRAY
43041: PUSH
43042: LD_INT 3
43044: ARRAY
43045: EQUAL
43046: AND
43047: IFFALSE 43057
// result := true ;
43049: LD_ADDR_VAR 0 4
43053: PUSH
43054: LD_INT 1
43056: ST_TO_ADDR
// end ; end ;
43057: LD_VAR 0 4
43061: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43062: LD_INT 0
43064: PPUSH
43065: PPUSH
43066: PPUSH
43067: PPUSH
// if not unit or not area then
43068: LD_VAR 0 1
43072: NOT
43073: PUSH
43074: LD_VAR 0 2
43078: NOT
43079: OR
43080: IFFALSE 43084
// exit ;
43082: GO 43260
// tmp := AreaToList ( area , i ) ;
43084: LD_ADDR_VAR 0 6
43088: PUSH
43089: LD_VAR 0 2
43093: PPUSH
43094: LD_VAR 0 5
43098: PPUSH
43099: CALL_OW 517
43103: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43104: LD_ADDR_VAR 0 5
43108: PUSH
43109: DOUBLE
43110: LD_INT 1
43112: DEC
43113: ST_TO_ADDR
43114: LD_VAR 0 6
43118: PUSH
43119: LD_INT 1
43121: ARRAY
43122: PUSH
43123: FOR_TO
43124: IFFALSE 43258
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43126: LD_ADDR_VAR 0 7
43130: PUSH
43131: LD_VAR 0 6
43135: PUSH
43136: LD_INT 1
43138: ARRAY
43139: PUSH
43140: LD_VAR 0 5
43144: ARRAY
43145: PUSH
43146: LD_VAR 0 6
43150: PUSH
43151: LD_INT 2
43153: ARRAY
43154: PUSH
43155: LD_VAR 0 5
43159: ARRAY
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
43165: LD_INT 92
43167: PUSH
43168: LD_VAR 0 7
43172: PUSH
43173: LD_INT 1
43175: ARRAY
43176: PUSH
43177: LD_VAR 0 7
43181: PUSH
43182: LD_INT 2
43184: ARRAY
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: EMPTY
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: PPUSH
43195: CALL_OW 69
43199: PUSH
43200: LD_INT 0
43202: EQUAL
43203: IFFALSE 43256
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43205: LD_VAR 0 1
43209: PPUSH
43210: LD_VAR 0 7
43214: PUSH
43215: LD_INT 1
43217: ARRAY
43218: PPUSH
43219: LD_VAR 0 7
43223: PUSH
43224: LD_INT 2
43226: ARRAY
43227: PPUSH
43228: LD_VAR 0 3
43232: PPUSH
43233: CALL_OW 48
// result := IsPlaced ( unit ) ;
43237: LD_ADDR_VAR 0 4
43241: PUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 305
43251: ST_TO_ADDR
// exit ;
43252: POP
43253: POP
43254: GO 43260
// end ; end ;
43256: GO 43123
43258: POP
43259: POP
// end ;
43260: LD_VAR 0 4
43264: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43265: LD_INT 0
43267: PPUSH
43268: PPUSH
43269: PPUSH
// if not side or side > 8 then
43270: LD_VAR 0 1
43274: NOT
43275: PUSH
43276: LD_VAR 0 1
43280: PUSH
43281: LD_INT 8
43283: GREATER
43284: OR
43285: IFFALSE 43289
// exit ;
43287: GO 43476
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43289: LD_ADDR_VAR 0 4
43293: PUSH
43294: LD_INT 22
43296: PUSH
43297: LD_VAR 0 1
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: LD_INT 21
43308: PUSH
43309: LD_INT 3
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PPUSH
43320: CALL_OW 69
43324: ST_TO_ADDR
// if not tmp then
43325: LD_VAR 0 4
43329: NOT
43330: IFFALSE 43334
// exit ;
43332: GO 43476
// enable_addtolog := true ;
43334: LD_ADDR_OWVAR 81
43338: PUSH
43339: LD_INT 1
43341: ST_TO_ADDR
// AddToLog ( [ ) ;
43342: LD_STRING [
43344: PPUSH
43345: CALL_OW 561
// for i in tmp do
43349: LD_ADDR_VAR 0 3
43353: PUSH
43354: LD_VAR 0 4
43358: PUSH
43359: FOR_IN
43360: IFFALSE 43467
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43362: LD_STRING [
43364: PUSH
43365: LD_VAR 0 3
43369: PPUSH
43370: CALL_OW 266
43374: STR
43375: PUSH
43376: LD_STRING , 
43378: STR
43379: PUSH
43380: LD_VAR 0 3
43384: PPUSH
43385: CALL_OW 250
43389: STR
43390: PUSH
43391: LD_STRING , 
43393: STR
43394: PUSH
43395: LD_VAR 0 3
43399: PPUSH
43400: CALL_OW 251
43404: STR
43405: PUSH
43406: LD_STRING , 
43408: STR
43409: PUSH
43410: LD_VAR 0 3
43414: PPUSH
43415: CALL_OW 254
43419: STR
43420: PUSH
43421: LD_STRING , 
43423: STR
43424: PUSH
43425: LD_VAR 0 3
43429: PPUSH
43430: LD_INT 1
43432: PPUSH
43433: CALL_OW 268
43437: STR
43438: PUSH
43439: LD_STRING , 
43441: STR
43442: PUSH
43443: LD_VAR 0 3
43447: PPUSH
43448: LD_INT 2
43450: PPUSH
43451: CALL_OW 268
43455: STR
43456: PUSH
43457: LD_STRING ],
43459: STR
43460: PPUSH
43461: CALL_OW 561
// end ;
43465: GO 43359
43467: POP
43468: POP
// AddToLog ( ]; ) ;
43469: LD_STRING ];
43471: PPUSH
43472: CALL_OW 561
// end ;
43476: LD_VAR 0 2
43480: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43481: LD_INT 0
43483: PPUSH
43484: PPUSH
43485: PPUSH
43486: PPUSH
43487: PPUSH
// if not area or not rate or not max then
43488: LD_VAR 0 1
43492: NOT
43493: PUSH
43494: LD_VAR 0 2
43498: NOT
43499: OR
43500: PUSH
43501: LD_VAR 0 4
43505: NOT
43506: OR
43507: IFFALSE 43511
// exit ;
43509: GO 43700
// while 1 do
43511: LD_INT 1
43513: IFFALSE 43700
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43515: LD_ADDR_VAR 0 9
43519: PUSH
43520: LD_VAR 0 1
43524: PPUSH
43525: LD_INT 1
43527: PPUSH
43528: CALL_OW 287
43532: PUSH
43533: LD_INT 10
43535: MUL
43536: ST_TO_ADDR
// r := rate / 10 ;
43537: LD_ADDR_VAR 0 7
43541: PUSH
43542: LD_VAR 0 2
43546: PUSH
43547: LD_INT 10
43549: DIVREAL
43550: ST_TO_ADDR
// time := 1 1$00 ;
43551: LD_ADDR_VAR 0 8
43555: PUSH
43556: LD_INT 2100
43558: ST_TO_ADDR
// if amount < min then
43559: LD_VAR 0 9
43563: PUSH
43564: LD_VAR 0 3
43568: LESS
43569: IFFALSE 43587
// r := r * 2 else
43571: LD_ADDR_VAR 0 7
43575: PUSH
43576: LD_VAR 0 7
43580: PUSH
43581: LD_INT 2
43583: MUL
43584: ST_TO_ADDR
43585: GO 43613
// if amount > max then
43587: LD_VAR 0 9
43591: PUSH
43592: LD_VAR 0 4
43596: GREATER
43597: IFFALSE 43613
// r := r / 2 ;
43599: LD_ADDR_VAR 0 7
43603: PUSH
43604: LD_VAR 0 7
43608: PUSH
43609: LD_INT 2
43611: DIVREAL
43612: ST_TO_ADDR
// time := time / r ;
43613: LD_ADDR_VAR 0 8
43617: PUSH
43618: LD_VAR 0 8
43622: PUSH
43623: LD_VAR 0 7
43627: DIVREAL
43628: ST_TO_ADDR
// if time < 0 then
43629: LD_VAR 0 8
43633: PUSH
43634: LD_INT 0
43636: LESS
43637: IFFALSE 43654
// time := time * - 1 ;
43639: LD_ADDR_VAR 0 8
43643: PUSH
43644: LD_VAR 0 8
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: MUL
43653: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43654: LD_VAR 0 8
43658: PUSH
43659: LD_INT 35
43661: PPUSH
43662: LD_INT 875
43664: PPUSH
43665: CALL_OW 12
43669: PLUS
43670: PPUSH
43671: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43675: LD_INT 1
43677: PPUSH
43678: LD_INT 5
43680: PPUSH
43681: CALL_OW 12
43685: PPUSH
43686: LD_VAR 0 1
43690: PPUSH
43691: LD_INT 1
43693: PPUSH
43694: CALL_OW 55
// end ;
43698: GO 43511
// end ;
43700: LD_VAR 0 5
43704: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43705: LD_INT 0
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
43714: PPUSH
// if not turrets or not factories then
43715: LD_VAR 0 1
43719: NOT
43720: PUSH
43721: LD_VAR 0 2
43725: NOT
43726: OR
43727: IFFALSE 43731
// exit ;
43729: GO 44038
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43731: LD_ADDR_VAR 0 10
43735: PUSH
43736: LD_INT 5
43738: PUSH
43739: LD_INT 6
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 4
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 3
43758: PUSH
43759: LD_INT 5
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 24
43773: PUSH
43774: LD_INT 25
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 23
43783: PUSH
43784: LD_INT 27
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 42
43797: PUSH
43798: LD_INT 43
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 44
43807: PUSH
43808: LD_INT 46
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 45
43817: PUSH
43818: LD_INT 47
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: LIST
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: LIST
43834: ST_TO_ADDR
// result := [ ] ;
43835: LD_ADDR_VAR 0 3
43839: PUSH
43840: EMPTY
43841: ST_TO_ADDR
// for i in turrets do
43842: LD_ADDR_VAR 0 4
43846: PUSH
43847: LD_VAR 0 1
43851: PUSH
43852: FOR_IN
43853: IFFALSE 44036
// begin nat := GetNation ( i ) ;
43855: LD_ADDR_VAR 0 7
43859: PUSH
43860: LD_VAR 0 4
43864: PPUSH
43865: CALL_OW 248
43869: ST_TO_ADDR
// weapon := 0 ;
43870: LD_ADDR_VAR 0 8
43874: PUSH
43875: LD_INT 0
43877: ST_TO_ADDR
// if not nat then
43878: LD_VAR 0 7
43882: NOT
43883: IFFALSE 43887
// continue ;
43885: GO 43852
// for j in list [ nat ] do
43887: LD_ADDR_VAR 0 5
43891: PUSH
43892: LD_VAR 0 10
43896: PUSH
43897: LD_VAR 0 7
43901: ARRAY
43902: PUSH
43903: FOR_IN
43904: IFFALSE 43945
// if GetBWeapon ( i ) = j [ 1 ] then
43906: LD_VAR 0 4
43910: PPUSH
43911: CALL_OW 269
43915: PUSH
43916: LD_VAR 0 5
43920: PUSH
43921: LD_INT 1
43923: ARRAY
43924: EQUAL
43925: IFFALSE 43943
// begin weapon := j [ 2 ] ;
43927: LD_ADDR_VAR 0 8
43931: PUSH
43932: LD_VAR 0 5
43936: PUSH
43937: LD_INT 2
43939: ARRAY
43940: ST_TO_ADDR
// break ;
43941: GO 43945
// end ;
43943: GO 43903
43945: POP
43946: POP
// if not weapon then
43947: LD_VAR 0 8
43951: NOT
43952: IFFALSE 43956
// continue ;
43954: GO 43852
// for k in factories do
43956: LD_ADDR_VAR 0 6
43960: PUSH
43961: LD_VAR 0 2
43965: PUSH
43966: FOR_IN
43967: IFFALSE 44032
// begin weapons := AvailableWeaponList ( k ) ;
43969: LD_ADDR_VAR 0 9
43973: PUSH
43974: LD_VAR 0 6
43978: PPUSH
43979: CALL_OW 478
43983: ST_TO_ADDR
// if not weapons then
43984: LD_VAR 0 9
43988: NOT
43989: IFFALSE 43993
// continue ;
43991: GO 43966
// if weapon in weapons then
43993: LD_VAR 0 8
43997: PUSH
43998: LD_VAR 0 9
44002: IN
44003: IFFALSE 44030
// begin result := [ i , weapon ] ;
44005: LD_ADDR_VAR 0 3
44009: PUSH
44010: LD_VAR 0 4
44014: PUSH
44015: LD_VAR 0 8
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: ST_TO_ADDR
// exit ;
44024: POP
44025: POP
44026: POP
44027: POP
44028: GO 44038
// end ; end ;
44030: GO 43966
44032: POP
44033: POP
// end ;
44034: GO 43852
44036: POP
44037: POP
// end ;
44038: LD_VAR 0 3
44042: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44043: LD_INT 0
44045: PPUSH
// if not side or side > 8 then
44046: LD_VAR 0 3
44050: NOT
44051: PUSH
44052: LD_VAR 0 3
44056: PUSH
44057: LD_INT 8
44059: GREATER
44060: OR
44061: IFFALSE 44065
// exit ;
44063: GO 44124
// if not range then
44065: LD_VAR 0 4
44069: NOT
44070: IFFALSE 44081
// range := - 12 ;
44072: LD_ADDR_VAR 0 4
44076: PUSH
44077: LD_INT 12
44079: NEG
44080: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44081: LD_VAR 0 1
44085: PPUSH
44086: LD_VAR 0 2
44090: PPUSH
44091: LD_VAR 0 3
44095: PPUSH
44096: LD_VAR 0 4
44100: PPUSH
44101: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44105: LD_VAR 0 1
44109: PPUSH
44110: LD_VAR 0 2
44114: PPUSH
44115: LD_VAR 0 3
44119: PPUSH
44120: CALL_OW 331
// end ;
44124: LD_VAR 0 5
44128: RET
// export function Video ( mode ) ; begin
44129: LD_INT 0
44131: PPUSH
// ingame_video = mode ;
44132: LD_ADDR_OWVAR 52
44136: PUSH
44137: LD_VAR 0 1
44141: ST_TO_ADDR
// interface_hidden = mode ;
44142: LD_ADDR_OWVAR 54
44146: PUSH
44147: LD_VAR 0 1
44151: ST_TO_ADDR
// end ;
44152: LD_VAR 0 2
44156: RET
// export function Join ( array , element ) ; begin
44157: LD_INT 0
44159: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44160: LD_ADDR_VAR 0 3
44164: PUSH
44165: LD_VAR 0 1
44169: PPUSH
44170: LD_VAR 0 1
44174: PUSH
44175: LD_INT 1
44177: PLUS
44178: PPUSH
44179: LD_VAR 0 2
44183: PPUSH
44184: CALL_OW 1
44188: ST_TO_ADDR
// end ;
44189: LD_VAR 0 3
44193: RET
// export function JoinUnion ( array , element ) ; begin
44194: LD_INT 0
44196: PPUSH
// result := array union element ;
44197: LD_ADDR_VAR 0 3
44201: PUSH
44202: LD_VAR 0 1
44206: PUSH
44207: LD_VAR 0 2
44211: UNION
44212: ST_TO_ADDR
// end ;
44213: LD_VAR 0 3
44217: RET
// export function GetBehemoths ( side ) ; begin
44218: LD_INT 0
44220: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
44221: LD_ADDR_VAR 0 2
44225: PUSH
44226: LD_INT 22
44228: PUSH
44229: LD_VAR 0 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 31
44240: PUSH
44241: LD_INT 25
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PPUSH
44252: CALL_OW 69
44256: ST_TO_ADDR
// end ;
44257: LD_VAR 0 2
44261: RET
// export function Shuffle ( array ) ; var i , index ; begin
44262: LD_INT 0
44264: PPUSH
44265: PPUSH
44266: PPUSH
// result := [ ] ;
44267: LD_ADDR_VAR 0 2
44271: PUSH
44272: EMPTY
44273: ST_TO_ADDR
// if not array then
44274: LD_VAR 0 1
44278: NOT
44279: IFFALSE 44283
// exit ;
44281: GO 44382
// Randomize ;
44283: CALL_OW 10
// for i = array downto 1 do
44287: LD_ADDR_VAR 0 3
44291: PUSH
44292: DOUBLE
44293: LD_VAR 0 1
44297: INC
44298: ST_TO_ADDR
44299: LD_INT 1
44301: PUSH
44302: FOR_DOWNTO
44303: IFFALSE 44380
// begin index := rand ( 1 , array ) ;
44305: LD_ADDR_VAR 0 4
44309: PUSH
44310: LD_INT 1
44312: PPUSH
44313: LD_VAR 0 1
44317: PPUSH
44318: CALL_OW 12
44322: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44323: LD_ADDR_VAR 0 2
44327: PUSH
44328: LD_VAR 0 2
44332: PPUSH
44333: LD_VAR 0 2
44337: PUSH
44338: LD_INT 1
44340: PLUS
44341: PPUSH
44342: LD_VAR 0 1
44346: PUSH
44347: LD_VAR 0 4
44351: ARRAY
44352: PPUSH
44353: CALL_OW 2
44357: ST_TO_ADDR
// array := Delete ( array , index ) ;
44358: LD_ADDR_VAR 0 1
44362: PUSH
44363: LD_VAR 0 1
44367: PPUSH
44368: LD_VAR 0 4
44372: PPUSH
44373: CALL_OW 3
44377: ST_TO_ADDR
// end ;
44378: GO 44302
44380: POP
44381: POP
// end ;
44382: LD_VAR 0 2
44386: RET
// export function GetBaseMaterials ( base ) ; begin
44387: LD_INT 0
44389: PPUSH
// result := [ 0 , 0 , 0 ] ;
44390: LD_ADDR_VAR 0 2
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 0
44403: PUSH
44404: EMPTY
44405: LIST
44406: LIST
44407: LIST
44408: ST_TO_ADDR
// if not base then
44409: LD_VAR 0 1
44413: NOT
44414: IFFALSE 44418
// exit ;
44416: GO 44467
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44418: LD_ADDR_VAR 0 2
44422: PUSH
44423: LD_VAR 0 1
44427: PPUSH
44428: LD_INT 1
44430: PPUSH
44431: CALL_OW 275
44435: PUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: LD_INT 2
44443: PPUSH
44444: CALL_OW 275
44448: PUSH
44449: LD_VAR 0 1
44453: PPUSH
44454: LD_INT 3
44456: PPUSH
44457: CALL_OW 275
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: ST_TO_ADDR
// end ;
44467: LD_VAR 0 2
44471: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44472: LD_INT 0
44474: PPUSH
44475: PPUSH
// result := array ;
44476: LD_ADDR_VAR 0 3
44480: PUSH
44481: LD_VAR 0 1
44485: ST_TO_ADDR
// if size >= result then
44486: LD_VAR 0 2
44490: PUSH
44491: LD_VAR 0 3
44495: GREATEREQUAL
44496: IFFALSE 44500
// exit ;
44498: GO 44550
// if size then
44500: LD_VAR 0 2
44504: IFFALSE 44550
// for i := array downto size do
44506: LD_ADDR_VAR 0 4
44510: PUSH
44511: DOUBLE
44512: LD_VAR 0 1
44516: INC
44517: ST_TO_ADDR
44518: LD_VAR 0 2
44522: PUSH
44523: FOR_DOWNTO
44524: IFFALSE 44548
// result := Delete ( result , result ) ;
44526: LD_ADDR_VAR 0 3
44530: PUSH
44531: LD_VAR 0 3
44535: PPUSH
44536: LD_VAR 0 3
44540: PPUSH
44541: CALL_OW 3
44545: ST_TO_ADDR
44546: GO 44523
44548: POP
44549: POP
// end ;
44550: LD_VAR 0 3
44554: RET
// export function ComExit ( unit ) ; var tmp ; begin
44555: LD_INT 0
44557: PPUSH
44558: PPUSH
// if not IsInUnit ( unit ) then
44559: LD_VAR 0 1
44563: PPUSH
44564: CALL_OW 310
44568: NOT
44569: IFFALSE 44573
// exit ;
44571: GO 44633
// tmp := IsInUnit ( unit ) ;
44573: LD_ADDR_VAR 0 3
44577: PUSH
44578: LD_VAR 0 1
44582: PPUSH
44583: CALL_OW 310
44587: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44588: LD_VAR 0 3
44592: PPUSH
44593: CALL_OW 247
44597: PUSH
44598: LD_INT 2
44600: EQUAL
44601: IFFALSE 44614
// ComExitVehicle ( unit ) else
44603: LD_VAR 0 1
44607: PPUSH
44608: CALL_OW 121
44612: GO 44623
// ComExitBuilding ( unit ) ;
44614: LD_VAR 0 1
44618: PPUSH
44619: CALL_OW 122
// result := tmp ;
44623: LD_ADDR_VAR 0 2
44627: PUSH
44628: LD_VAR 0 3
44632: ST_TO_ADDR
// end ;
44633: LD_VAR 0 2
44637: RET
// export function ComExitAll ( units ) ; var i ; begin
44638: LD_INT 0
44640: PPUSH
44641: PPUSH
// if not units then
44642: LD_VAR 0 1
44646: NOT
44647: IFFALSE 44651
// exit ;
44649: GO 44677
// for i in units do
44651: LD_ADDR_VAR 0 3
44655: PUSH
44656: LD_VAR 0 1
44660: PUSH
44661: FOR_IN
44662: IFFALSE 44675
// ComExit ( i ) ;
44664: LD_VAR 0 3
44668: PPUSH
44669: CALL 44555 0 1
44673: GO 44661
44675: POP
44676: POP
// end ;
44677: LD_VAR 0 2
44681: RET
// export function ResetHc ; begin
44682: LD_INT 0
44684: PPUSH
// InitHc ;
44685: CALL_OW 19
// hc_importance := 0 ;
44689: LD_ADDR_OWVAR 32
44693: PUSH
44694: LD_INT 0
44696: ST_TO_ADDR
// end ;
44697: LD_VAR 0 1
44701: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44702: LD_INT 0
44704: PPUSH
44705: PPUSH
44706: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44707: LD_ADDR_VAR 0 6
44711: PUSH
44712: LD_VAR 0 1
44716: PUSH
44717: LD_VAR 0 3
44721: PLUS
44722: PUSH
44723: LD_INT 2
44725: DIV
44726: ST_TO_ADDR
// if _x < 0 then
44727: LD_VAR 0 6
44731: PUSH
44732: LD_INT 0
44734: LESS
44735: IFFALSE 44752
// _x := _x * - 1 ;
44737: LD_ADDR_VAR 0 6
44741: PUSH
44742: LD_VAR 0 6
44746: PUSH
44747: LD_INT 1
44749: NEG
44750: MUL
44751: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44752: LD_ADDR_VAR 0 7
44756: PUSH
44757: LD_VAR 0 2
44761: PUSH
44762: LD_VAR 0 4
44766: PLUS
44767: PUSH
44768: LD_INT 2
44770: DIV
44771: ST_TO_ADDR
// if _y < 0 then
44772: LD_VAR 0 7
44776: PUSH
44777: LD_INT 0
44779: LESS
44780: IFFALSE 44797
// _y := _y * - 1 ;
44782: LD_ADDR_VAR 0 7
44786: PUSH
44787: LD_VAR 0 7
44791: PUSH
44792: LD_INT 1
44794: NEG
44795: MUL
44796: ST_TO_ADDR
// result := [ _x , _y ] ;
44797: LD_ADDR_VAR 0 5
44801: PUSH
44802: LD_VAR 0 6
44806: PUSH
44807: LD_VAR 0 7
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// end ;
44816: LD_VAR 0 5
44820: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44821: LD_INT 0
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
// task := GetTaskList ( unit ) ;
44827: LD_ADDR_VAR 0 7
44831: PUSH
44832: LD_VAR 0 1
44836: PPUSH
44837: CALL_OW 437
44841: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44842: LD_VAR 0 7
44846: NOT
44847: PUSH
44848: LD_VAR 0 1
44852: PPUSH
44853: LD_VAR 0 2
44857: PPUSH
44858: CALL_OW 308
44862: NOT
44863: AND
44864: IFFALSE 44868
// exit ;
44866: GO 44986
// if IsInArea ( unit , area ) then
44868: LD_VAR 0 1
44872: PPUSH
44873: LD_VAR 0 2
44877: PPUSH
44878: CALL_OW 308
44882: IFFALSE 44900
// begin ComMoveToArea ( unit , goAway ) ;
44884: LD_VAR 0 1
44888: PPUSH
44889: LD_VAR 0 3
44893: PPUSH
44894: CALL_OW 113
// exit ;
44898: GO 44986
// end ; if task [ 1 ] [ 1 ] <> M then
44900: LD_VAR 0 7
44904: PUSH
44905: LD_INT 1
44907: ARRAY
44908: PUSH
44909: LD_INT 1
44911: ARRAY
44912: PUSH
44913: LD_STRING M
44915: NONEQUAL
44916: IFFALSE 44920
// exit ;
44918: GO 44986
// x := task [ 1 ] [ 2 ] ;
44920: LD_ADDR_VAR 0 5
44924: PUSH
44925: LD_VAR 0 7
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: PUSH
44934: LD_INT 2
44936: ARRAY
44937: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44938: LD_ADDR_VAR 0 6
44942: PUSH
44943: LD_VAR 0 7
44947: PUSH
44948: LD_INT 1
44950: ARRAY
44951: PUSH
44952: LD_INT 3
44954: ARRAY
44955: ST_TO_ADDR
// if InArea ( x , y , area ) then
44956: LD_VAR 0 5
44960: PPUSH
44961: LD_VAR 0 6
44965: PPUSH
44966: LD_VAR 0 2
44970: PPUSH
44971: CALL_OW 309
44975: IFFALSE 44986
// ComStop ( unit ) ;
44977: LD_VAR 0 1
44981: PPUSH
44982: CALL_OW 141
// end ;
44986: LD_VAR 0 4
44990: RET
// export function Abs ( value ) ; begin
44991: LD_INT 0
44993: PPUSH
// result := value ;
44994: LD_ADDR_VAR 0 2
44998: PUSH
44999: LD_VAR 0 1
45003: ST_TO_ADDR
// if value < 0 then
45004: LD_VAR 0 1
45008: PUSH
45009: LD_INT 0
45011: LESS
45012: IFFALSE 45029
// result := value * - 1 ;
45014: LD_ADDR_VAR 0 2
45018: PUSH
45019: LD_VAR 0 1
45023: PUSH
45024: LD_INT 1
45026: NEG
45027: MUL
45028: ST_TO_ADDR
// end ;
45029: LD_VAR 0 2
45033: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45034: LD_INT 0
45036: PPUSH
45037: PPUSH
45038: PPUSH
45039: PPUSH
45040: PPUSH
45041: PPUSH
45042: PPUSH
45043: PPUSH
// if not unit or not building then
45044: LD_VAR 0 1
45048: NOT
45049: PUSH
45050: LD_VAR 0 2
45054: NOT
45055: OR
45056: IFFALSE 45060
// exit ;
45058: GO 45286
// x := GetX ( building ) ;
45060: LD_ADDR_VAR 0 4
45064: PUSH
45065: LD_VAR 0 2
45069: PPUSH
45070: CALL_OW 250
45074: ST_TO_ADDR
// y := GetY ( building ) ;
45075: LD_ADDR_VAR 0 6
45079: PUSH
45080: LD_VAR 0 2
45084: PPUSH
45085: CALL_OW 251
45089: ST_TO_ADDR
// d := GetDir ( building ) ;
45090: LD_ADDR_VAR 0 8
45094: PUSH
45095: LD_VAR 0 2
45099: PPUSH
45100: CALL_OW 254
45104: ST_TO_ADDR
// r := 4 ;
45105: LD_ADDR_VAR 0 9
45109: PUSH
45110: LD_INT 4
45112: ST_TO_ADDR
// for i := 1 to 5 do
45113: LD_ADDR_VAR 0 10
45117: PUSH
45118: DOUBLE
45119: LD_INT 1
45121: DEC
45122: ST_TO_ADDR
45123: LD_INT 5
45125: PUSH
45126: FOR_TO
45127: IFFALSE 45284
// begin _x := ShiftX ( x , d , r + i ) ;
45129: LD_ADDR_VAR 0 5
45133: PUSH
45134: LD_VAR 0 4
45138: PPUSH
45139: LD_VAR 0 8
45143: PPUSH
45144: LD_VAR 0 9
45148: PUSH
45149: LD_VAR 0 10
45153: PLUS
45154: PPUSH
45155: CALL_OW 272
45159: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45160: LD_ADDR_VAR 0 7
45164: PUSH
45165: LD_VAR 0 6
45169: PPUSH
45170: LD_VAR 0 8
45174: PPUSH
45175: LD_VAR 0 9
45179: PUSH
45180: LD_VAR 0 10
45184: PLUS
45185: PPUSH
45186: CALL_OW 273
45190: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45191: LD_VAR 0 5
45195: PPUSH
45196: LD_VAR 0 7
45200: PPUSH
45201: CALL_OW 488
45205: PUSH
45206: LD_VAR 0 5
45210: PPUSH
45211: LD_VAR 0 7
45215: PPUSH
45216: CALL_OW 428
45220: PPUSH
45221: CALL_OW 247
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: IN
45236: NOT
45237: AND
45238: IFFALSE 45282
// begin ComMoveXY ( unit , _x , _y ) ;
45240: LD_VAR 0 1
45244: PPUSH
45245: LD_VAR 0 5
45249: PPUSH
45250: LD_VAR 0 7
45254: PPUSH
45255: CALL_OW 111
// result := [ _x , _y ] ;
45259: LD_ADDR_VAR 0 3
45263: PUSH
45264: LD_VAR 0 5
45268: PUSH
45269: LD_VAR 0 7
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: ST_TO_ADDR
// exit ;
45278: POP
45279: POP
45280: GO 45286
// end ; end ;
45282: GO 45126
45284: POP
45285: POP
// end ;
45286: LD_VAR 0 3
45290: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45291: LD_INT 0
45293: PPUSH
45294: PPUSH
45295: PPUSH
// result := 0 ;
45296: LD_ADDR_VAR 0 3
45300: PUSH
45301: LD_INT 0
45303: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45304: LD_VAR 0 1
45308: PUSH
45309: LD_INT 0
45311: LESS
45312: PUSH
45313: LD_VAR 0 1
45317: PUSH
45318: LD_INT 8
45320: GREATER
45321: OR
45322: PUSH
45323: LD_VAR 0 2
45327: PUSH
45328: LD_INT 0
45330: LESS
45331: OR
45332: PUSH
45333: LD_VAR 0 2
45337: PUSH
45338: LD_INT 8
45340: GREATER
45341: OR
45342: IFFALSE 45346
// exit ;
45344: GO 45421
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45346: LD_ADDR_VAR 0 4
45350: PUSH
45351: LD_INT 22
45353: PUSH
45354: LD_VAR 0 2
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PPUSH
45363: CALL_OW 69
45367: PUSH
45368: FOR_IN
45369: IFFALSE 45419
// begin un := UnitShoot ( i ) ;
45371: LD_ADDR_VAR 0 5
45375: PUSH
45376: LD_VAR 0 4
45380: PPUSH
45381: CALL_OW 504
45385: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45386: LD_VAR 0 5
45390: PPUSH
45391: CALL_OW 255
45395: PUSH
45396: LD_VAR 0 1
45400: EQUAL
45401: IFFALSE 45417
// begin result := un ;
45403: LD_ADDR_VAR 0 3
45407: PUSH
45408: LD_VAR 0 5
45412: ST_TO_ADDR
// exit ;
45413: POP
45414: POP
45415: GO 45421
// end ; end ;
45417: GO 45368
45419: POP
45420: POP
// end ;
45421: LD_VAR 0 3
45425: RET
// export function GetCargoBay ( units ) ; begin
45426: LD_INT 0
45428: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45429: LD_ADDR_VAR 0 2
45433: PUSH
45434: LD_VAR 0 1
45438: PPUSH
45439: LD_INT 2
45441: PUSH
45442: LD_INT 34
45444: PUSH
45445: LD_INT 12
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 34
45454: PUSH
45455: LD_INT 51
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 34
45464: PUSH
45465: LD_INT 32
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 34
45474: PUSH
45475: LD_INT 89
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: PPUSH
45489: CALL_OW 72
45493: ST_TO_ADDR
// end ;
45494: LD_VAR 0 2
45498: RET
// export function Negate ( value ) ; begin
45499: LD_INT 0
45501: PPUSH
// result := not value ;
45502: LD_ADDR_VAR 0 2
45506: PUSH
45507: LD_VAR 0 1
45511: NOT
45512: ST_TO_ADDR
// end ;
45513: LD_VAR 0 2
45517: RET
// export function Inc ( value ) ; begin
45518: LD_INT 0
45520: PPUSH
// result := value + 1 ;
45521: LD_ADDR_VAR 0 2
45525: PUSH
45526: LD_VAR 0 1
45530: PUSH
45531: LD_INT 1
45533: PLUS
45534: ST_TO_ADDR
// end ;
45535: LD_VAR 0 2
45539: RET
// export function Dec ( value ) ; begin
45540: LD_INT 0
45542: PPUSH
// result := value - 1 ;
45543: LD_ADDR_VAR 0 2
45547: PUSH
45548: LD_VAR 0 1
45552: PUSH
45553: LD_INT 1
45555: MINUS
45556: ST_TO_ADDR
// end ;
45557: LD_VAR 0 2
45561: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45562: LD_INT 0
45564: PPUSH
45565: PPUSH
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45572: LD_VAR 0 1
45576: PPUSH
45577: LD_VAR 0 2
45581: PPUSH
45582: CALL_OW 488
45586: NOT
45587: PUSH
45588: LD_VAR 0 3
45592: PPUSH
45593: LD_VAR 0 4
45597: PPUSH
45598: CALL_OW 488
45602: NOT
45603: OR
45604: IFFALSE 45617
// begin result := - 1 ;
45606: LD_ADDR_VAR 0 5
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: ST_TO_ADDR
// exit ;
45615: GO 45852
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45617: LD_ADDR_VAR 0 12
45621: PUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: LD_VAR 0 2
45631: PPUSH
45632: LD_VAR 0 3
45636: PPUSH
45637: LD_VAR 0 4
45641: PPUSH
45642: CALL 44702 0 4
45646: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45647: LD_ADDR_VAR 0 11
45651: PUSH
45652: LD_VAR 0 1
45656: PPUSH
45657: LD_VAR 0 2
45661: PPUSH
45662: LD_VAR 0 12
45666: PUSH
45667: LD_INT 1
45669: ARRAY
45670: PPUSH
45671: LD_VAR 0 12
45675: PUSH
45676: LD_INT 2
45678: ARRAY
45679: PPUSH
45680: CALL_OW 298
45684: ST_TO_ADDR
// distance := 9999 ;
45685: LD_ADDR_VAR 0 10
45689: PUSH
45690: LD_INT 9999
45692: ST_TO_ADDR
// for i := 0 to 5 do
45693: LD_ADDR_VAR 0 6
45697: PUSH
45698: DOUBLE
45699: LD_INT 0
45701: DEC
45702: ST_TO_ADDR
45703: LD_INT 5
45705: PUSH
45706: FOR_TO
45707: IFFALSE 45850
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45709: LD_ADDR_VAR 0 7
45713: PUSH
45714: LD_VAR 0 1
45718: PPUSH
45719: LD_VAR 0 6
45723: PPUSH
45724: LD_VAR 0 11
45728: PPUSH
45729: CALL_OW 272
45733: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45734: LD_ADDR_VAR 0 8
45738: PUSH
45739: LD_VAR 0 2
45743: PPUSH
45744: LD_VAR 0 6
45748: PPUSH
45749: LD_VAR 0 11
45753: PPUSH
45754: CALL_OW 273
45758: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45759: LD_VAR 0 7
45763: PPUSH
45764: LD_VAR 0 8
45768: PPUSH
45769: CALL_OW 488
45773: NOT
45774: IFFALSE 45778
// continue ;
45776: GO 45706
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45778: LD_ADDR_VAR 0 9
45782: PUSH
45783: LD_VAR 0 12
45787: PUSH
45788: LD_INT 1
45790: ARRAY
45791: PPUSH
45792: LD_VAR 0 12
45796: PUSH
45797: LD_INT 2
45799: ARRAY
45800: PPUSH
45801: LD_VAR 0 7
45805: PPUSH
45806: LD_VAR 0 8
45810: PPUSH
45811: CALL_OW 298
45815: ST_TO_ADDR
// if tmp < distance then
45816: LD_VAR 0 9
45820: PUSH
45821: LD_VAR 0 10
45825: LESS
45826: IFFALSE 45848
// begin result := i ;
45828: LD_ADDR_VAR 0 5
45832: PUSH
45833: LD_VAR 0 6
45837: ST_TO_ADDR
// distance := tmp ;
45838: LD_ADDR_VAR 0 10
45842: PUSH
45843: LD_VAR 0 9
45847: ST_TO_ADDR
// end ; end ;
45848: GO 45706
45850: POP
45851: POP
// end ;
45852: LD_VAR 0 5
45856: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45857: LD_INT 0
45859: PPUSH
45860: PPUSH
// if not driver or not IsInUnit ( driver ) then
45861: LD_VAR 0 1
45865: NOT
45866: PUSH
45867: LD_VAR 0 1
45871: PPUSH
45872: CALL_OW 310
45876: NOT
45877: OR
45878: IFFALSE 45882
// exit ;
45880: GO 45972
// vehicle := IsInUnit ( driver ) ;
45882: LD_ADDR_VAR 0 3
45886: PUSH
45887: LD_VAR 0 1
45891: PPUSH
45892: CALL_OW 310
45896: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45897: LD_VAR 0 1
45901: PPUSH
45902: LD_STRING \
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 0
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: PUSH
45932: LD_STRING E
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_VAR 0 3
45945: PUSH
45946: LD_INT 0
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 0
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PPUSH
45968: CALL_OW 446
// end ;
45972: LD_VAR 0 2
45976: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45977: LD_INT 0
45979: PPUSH
45980: PPUSH
// if not driver or not IsInUnit ( driver ) then
45981: LD_VAR 0 1
45985: NOT
45986: PUSH
45987: LD_VAR 0 1
45991: PPUSH
45992: CALL_OW 310
45996: NOT
45997: OR
45998: IFFALSE 46002
// exit ;
46000: GO 46092
// vehicle := IsInUnit ( driver ) ;
46002: LD_ADDR_VAR 0 3
46006: PUSH
46007: LD_VAR 0 1
46011: PPUSH
46012: CALL_OW 310
46016: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
46017: LD_VAR 0 1
46021: PPUSH
46022: LD_STRING \
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 0
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: PUSH
46052: LD_STRING E
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_VAR 0 3
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 0
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PPUSH
46088: CALL_OW 447
// end ;
46092: LD_VAR 0 2
46096: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46097: LD_INT 0
46099: PPUSH
46100: PPUSH
46101: PPUSH
// tmp := [ ] ;
46102: LD_ADDR_VAR 0 5
46106: PUSH
46107: EMPTY
46108: ST_TO_ADDR
// for i in units do
46109: LD_ADDR_VAR 0 4
46113: PUSH
46114: LD_VAR 0 1
46118: PUSH
46119: FOR_IN
46120: IFFALSE 46158
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46122: LD_ADDR_VAR 0 5
46126: PUSH
46127: LD_VAR 0 5
46131: PPUSH
46132: LD_VAR 0 5
46136: PUSH
46137: LD_INT 1
46139: PLUS
46140: PPUSH
46141: LD_VAR 0 4
46145: PPUSH
46146: CALL_OW 256
46150: PPUSH
46151: CALL_OW 2
46155: ST_TO_ADDR
46156: GO 46119
46158: POP
46159: POP
// if not tmp then
46160: LD_VAR 0 5
46164: NOT
46165: IFFALSE 46169
// exit ;
46167: GO 46217
// if asc then
46169: LD_VAR 0 2
46173: IFFALSE 46197
// result := SortListByListAsc ( units , tmp ) else
46175: LD_ADDR_VAR 0 3
46179: PUSH
46180: LD_VAR 0 1
46184: PPUSH
46185: LD_VAR 0 5
46189: PPUSH
46190: CALL_OW 76
46194: ST_TO_ADDR
46195: GO 46217
// result := SortListByListDesc ( units , tmp ) ;
46197: LD_ADDR_VAR 0 3
46201: PUSH
46202: LD_VAR 0 1
46206: PPUSH
46207: LD_VAR 0 5
46211: PPUSH
46212: CALL_OW 77
46216: ST_TO_ADDR
// end ;
46217: LD_VAR 0 3
46221: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46222: LD_INT 0
46224: PPUSH
46225: PPUSH
// task := GetTaskList ( mech ) ;
46226: LD_ADDR_VAR 0 4
46230: PUSH
46231: LD_VAR 0 1
46235: PPUSH
46236: CALL_OW 437
46240: ST_TO_ADDR
// if not task then
46241: LD_VAR 0 4
46245: NOT
46246: IFFALSE 46250
// exit ;
46248: GO 46292
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46250: LD_ADDR_VAR 0 3
46254: PUSH
46255: LD_VAR 0 4
46259: PUSH
46260: LD_INT 1
46262: ARRAY
46263: PUSH
46264: LD_INT 1
46266: ARRAY
46267: PUSH
46268: LD_STRING r
46270: EQUAL
46271: PUSH
46272: LD_VAR 0 4
46276: PUSH
46277: LD_INT 1
46279: ARRAY
46280: PUSH
46281: LD_INT 4
46283: ARRAY
46284: PUSH
46285: LD_VAR 0 2
46289: EQUAL
46290: AND
46291: ST_TO_ADDR
// end ;
46292: LD_VAR 0 3
46296: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46297: LD_INT 0
46299: PPUSH
// SetDir ( unit , d ) ;
46300: LD_VAR 0 1
46304: PPUSH
46305: LD_VAR 0 4
46309: PPUSH
46310: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46314: LD_VAR 0 1
46318: PPUSH
46319: LD_VAR 0 2
46323: PPUSH
46324: LD_VAR 0 3
46328: PPUSH
46329: LD_VAR 0 5
46333: PPUSH
46334: CALL_OW 48
// end ;
46338: LD_VAR 0 6
46342: RET
// export function ToNaturalNumber ( number ) ; begin
46343: LD_INT 0
46345: PPUSH
// result := number div 1 ;
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: LD_VAR 0 1
46355: PUSH
46356: LD_INT 1
46358: DIV
46359: ST_TO_ADDR
// if number < 0 then
46360: LD_VAR 0 1
46364: PUSH
46365: LD_INT 0
46367: LESS
46368: IFFALSE 46378
// result := 0 ;
46370: LD_ADDR_VAR 0 2
46374: PUSH
46375: LD_INT 0
46377: ST_TO_ADDR
// end ;
46378: LD_VAR 0 2
46382: RET
// export function SortByClass ( units , class ) ; var un ; begin
46383: LD_INT 0
46385: PPUSH
46386: PPUSH
// if not units or not class then
46387: LD_VAR 0 1
46391: NOT
46392: PUSH
46393: LD_VAR 0 2
46397: NOT
46398: OR
46399: IFFALSE 46403
// exit ;
46401: GO 46498
// result := [ ] ;
46403: LD_ADDR_VAR 0 3
46407: PUSH
46408: EMPTY
46409: ST_TO_ADDR
// for un in units do
46410: LD_ADDR_VAR 0 4
46414: PUSH
46415: LD_VAR 0 1
46419: PUSH
46420: FOR_IN
46421: IFFALSE 46496
// if GetClass ( un ) = class then
46423: LD_VAR 0 4
46427: PPUSH
46428: CALL_OW 257
46432: PUSH
46433: LD_VAR 0 2
46437: EQUAL
46438: IFFALSE 46465
// result := Insert ( result , 1 , un ) else
46440: LD_ADDR_VAR 0 3
46444: PUSH
46445: LD_VAR 0 3
46449: PPUSH
46450: LD_INT 1
46452: PPUSH
46453: LD_VAR 0 4
46457: PPUSH
46458: CALL_OW 2
46462: ST_TO_ADDR
46463: GO 46494
// result := Replace ( result , result + 1 , un ) ;
46465: LD_ADDR_VAR 0 3
46469: PUSH
46470: LD_VAR 0 3
46474: PPUSH
46475: LD_VAR 0 3
46479: PUSH
46480: LD_INT 1
46482: PLUS
46483: PPUSH
46484: LD_VAR 0 4
46488: PPUSH
46489: CALL_OW 1
46493: ST_TO_ADDR
46494: GO 46420
46496: POP
46497: POP
// end ;
46498: LD_VAR 0 3
46502: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46503: LD_INT 0
46505: PPUSH
46506: PPUSH
46507: PPUSH
46508: PPUSH
46509: PPUSH
46510: PPUSH
46511: PPUSH
// result := [ ] ;
46512: LD_ADDR_VAR 0 4
46516: PUSH
46517: EMPTY
46518: ST_TO_ADDR
// if x - r < 0 then
46519: LD_VAR 0 1
46523: PUSH
46524: LD_VAR 0 3
46528: MINUS
46529: PUSH
46530: LD_INT 0
46532: LESS
46533: IFFALSE 46545
// min_x := 0 else
46535: LD_ADDR_VAR 0 8
46539: PUSH
46540: LD_INT 0
46542: ST_TO_ADDR
46543: GO 46561
// min_x := x - r ;
46545: LD_ADDR_VAR 0 8
46549: PUSH
46550: LD_VAR 0 1
46554: PUSH
46555: LD_VAR 0 3
46559: MINUS
46560: ST_TO_ADDR
// if y - r < 0 then
46561: LD_VAR 0 2
46565: PUSH
46566: LD_VAR 0 3
46570: MINUS
46571: PUSH
46572: LD_INT 0
46574: LESS
46575: IFFALSE 46587
// min_y := 0 else
46577: LD_ADDR_VAR 0 7
46581: PUSH
46582: LD_INT 0
46584: ST_TO_ADDR
46585: GO 46603
// min_y := y - r ;
46587: LD_ADDR_VAR 0 7
46591: PUSH
46592: LD_VAR 0 2
46596: PUSH
46597: LD_VAR 0 3
46601: MINUS
46602: ST_TO_ADDR
// max_x := x + r ;
46603: LD_ADDR_VAR 0 9
46607: PUSH
46608: LD_VAR 0 1
46612: PUSH
46613: LD_VAR 0 3
46617: PLUS
46618: ST_TO_ADDR
// max_y := y + r ;
46619: LD_ADDR_VAR 0 10
46623: PUSH
46624: LD_VAR 0 2
46628: PUSH
46629: LD_VAR 0 3
46633: PLUS
46634: ST_TO_ADDR
// for _x = min_x to max_x do
46635: LD_ADDR_VAR 0 5
46639: PUSH
46640: DOUBLE
46641: LD_VAR 0 8
46645: DEC
46646: ST_TO_ADDR
46647: LD_VAR 0 9
46651: PUSH
46652: FOR_TO
46653: IFFALSE 46754
// for _y = min_y to max_y do
46655: LD_ADDR_VAR 0 6
46659: PUSH
46660: DOUBLE
46661: LD_VAR 0 7
46665: DEC
46666: ST_TO_ADDR
46667: LD_VAR 0 10
46671: PUSH
46672: FOR_TO
46673: IFFALSE 46750
// begin if not ValidHex ( _x , _y ) then
46675: LD_VAR 0 5
46679: PPUSH
46680: LD_VAR 0 6
46684: PPUSH
46685: CALL_OW 488
46689: NOT
46690: IFFALSE 46694
// continue ;
46692: GO 46672
// if GetResourceTypeXY ( _x , _y ) then
46694: LD_VAR 0 5
46698: PPUSH
46699: LD_VAR 0 6
46703: PPUSH
46704: CALL_OW 283
46708: IFFALSE 46748
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46710: LD_ADDR_VAR 0 4
46714: PUSH
46715: LD_VAR 0 4
46719: PPUSH
46720: LD_VAR 0 4
46724: PUSH
46725: LD_INT 1
46727: PLUS
46728: PPUSH
46729: LD_VAR 0 5
46733: PUSH
46734: LD_VAR 0 6
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PPUSH
46743: CALL_OW 1
46747: ST_TO_ADDR
// end ;
46748: GO 46672
46750: POP
46751: POP
46752: GO 46652
46754: POP
46755: POP
// end ;
46756: LD_VAR 0 4
46760: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46761: LD_INT 0
46763: PPUSH
46764: PPUSH
46765: PPUSH
46766: PPUSH
46767: PPUSH
46768: PPUSH
46769: PPUSH
46770: PPUSH
// if not units then
46771: LD_VAR 0 1
46775: NOT
46776: IFFALSE 46780
// exit ;
46778: GO 47308
// result := UnitFilter ( units , [ f_ok ] ) ;
46780: LD_ADDR_VAR 0 3
46784: PUSH
46785: LD_VAR 0 1
46789: PPUSH
46790: LD_INT 50
46792: PUSH
46793: EMPTY
46794: LIST
46795: PPUSH
46796: CALL_OW 72
46800: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46801: LD_ADDR_VAR 0 8
46805: PUSH
46806: LD_VAR 0 1
46810: PUSH
46811: LD_INT 1
46813: ARRAY
46814: PPUSH
46815: CALL_OW 255
46819: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46820: LD_ADDR_VAR 0 10
46824: PUSH
46825: LD_INT 29
46827: PUSH
46828: LD_INT 91
46830: PUSH
46831: LD_INT 49
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: LIST
46838: ST_TO_ADDR
// if not result then
46839: LD_VAR 0 3
46843: NOT
46844: IFFALSE 46848
// exit ;
46846: GO 47308
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46848: LD_ADDR_VAR 0 5
46852: PUSH
46853: LD_INT 81
46855: PUSH
46856: LD_VAR 0 8
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PPUSH
46865: CALL_OW 69
46869: ST_TO_ADDR
// for i in result do
46870: LD_ADDR_VAR 0 4
46874: PUSH
46875: LD_VAR 0 3
46879: PUSH
46880: FOR_IN
46881: IFFALSE 47306
// begin tag := GetTag ( i ) + 1 ;
46883: LD_ADDR_VAR 0 9
46887: PUSH
46888: LD_VAR 0 4
46892: PPUSH
46893: CALL_OW 110
46897: PUSH
46898: LD_INT 1
46900: PLUS
46901: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
46902: LD_ADDR_VAR 0 7
46906: PUSH
46907: LD_VAR 0 4
46911: PPUSH
46912: CALL_OW 250
46916: PPUSH
46917: LD_VAR 0 4
46921: PPUSH
46922: CALL_OW 251
46926: PPUSH
46927: LD_INT 4
46929: PPUSH
46930: CALL 46503 0 3
46934: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
46935: LD_VAR 0 4
46939: PPUSH
46940: CALL_OW 247
46944: PUSH
46945: LD_INT 2
46947: EQUAL
46948: PUSH
46949: LD_VAR 0 7
46953: PUSH
46954: LD_INT 2
46956: GREATER
46957: AND
46958: PUSH
46959: LD_VAR 0 4
46963: PPUSH
46964: CALL_OW 264
46968: PUSH
46969: LD_VAR 0 10
46973: IN
46974: NOT
46975: AND
46976: IFFALSE 47015
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46978: LD_VAR 0 4
46982: PPUSH
46983: LD_VAR 0 7
46987: PUSH
46988: LD_INT 1
46990: ARRAY
46991: PUSH
46992: LD_INT 1
46994: ARRAY
46995: PPUSH
46996: LD_VAR 0 7
47000: PUSH
47001: LD_INT 1
47003: ARRAY
47004: PUSH
47005: LD_INT 2
47007: ARRAY
47008: PPUSH
47009: CALL_OW 116
47013: GO 47304
// if path > tag then
47015: LD_VAR 0 2
47019: PUSH
47020: LD_VAR 0 9
47024: GREATER
47025: IFFALSE 47233
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
47027: LD_ADDR_VAR 0 6
47031: PUSH
47032: LD_VAR 0 5
47036: PPUSH
47037: LD_INT 91
47039: PUSH
47040: LD_VAR 0 4
47044: PUSH
47045: LD_INT 8
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: LIST
47052: PPUSH
47053: CALL_OW 72
47057: ST_TO_ADDR
// if nearEnemy then
47058: LD_VAR 0 6
47062: IFFALSE 47131
// begin if GetWeapon ( i ) = ru_time_lapser then
47064: LD_VAR 0 4
47068: PPUSH
47069: CALL_OW 264
47073: PUSH
47074: LD_INT 49
47076: EQUAL
47077: IFFALSE 47105
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47079: LD_VAR 0 4
47083: PPUSH
47084: LD_VAR 0 6
47088: PPUSH
47089: LD_VAR 0 4
47093: PPUSH
47094: CALL_OW 74
47098: PPUSH
47099: CALL_OW 112
47103: GO 47129
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
47105: LD_VAR 0 4
47109: PPUSH
47110: LD_VAR 0 6
47114: PPUSH
47115: LD_VAR 0 4
47119: PPUSH
47120: CALL_OW 74
47124: PPUSH
47125: CALL 48379 0 2
// end else
47129: GO 47231
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47131: LD_VAR 0 4
47135: PPUSH
47136: LD_VAR 0 2
47140: PUSH
47141: LD_VAR 0 9
47145: ARRAY
47146: PUSH
47147: LD_INT 1
47149: ARRAY
47150: PPUSH
47151: LD_VAR 0 2
47155: PUSH
47156: LD_VAR 0 9
47160: ARRAY
47161: PUSH
47162: LD_INT 2
47164: ARRAY
47165: PPUSH
47166: CALL_OW 297
47170: PUSH
47171: LD_INT 6
47173: GREATER
47174: IFFALSE 47217
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47176: LD_VAR 0 4
47180: PPUSH
47181: LD_VAR 0 2
47185: PUSH
47186: LD_VAR 0 9
47190: ARRAY
47191: PUSH
47192: LD_INT 1
47194: ARRAY
47195: PPUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_VAR 0 9
47205: ARRAY
47206: PUSH
47207: LD_INT 2
47209: ARRAY
47210: PPUSH
47211: CALL_OW 114
47215: GO 47231
// SetTag ( i , tag ) ;
47217: LD_VAR 0 4
47221: PPUSH
47222: LD_VAR 0 9
47226: PPUSH
47227: CALL_OW 109
// end else
47231: GO 47304
// if enemy then
47233: LD_VAR 0 5
47237: IFFALSE 47304
// begin if GetWeapon ( i ) = ru_time_lapser then
47239: LD_VAR 0 4
47243: PPUSH
47244: CALL_OW 264
47248: PUSH
47249: LD_INT 49
47251: EQUAL
47252: IFFALSE 47280
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47254: LD_VAR 0 4
47258: PPUSH
47259: LD_VAR 0 5
47263: PPUSH
47264: LD_VAR 0 4
47268: PPUSH
47269: CALL_OW 74
47273: PPUSH
47274: CALL_OW 112
47278: GO 47304
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47280: LD_VAR 0 4
47284: PPUSH
47285: LD_VAR 0 5
47289: PPUSH
47290: LD_VAR 0 4
47294: PPUSH
47295: CALL_OW 74
47299: PPUSH
47300: CALL 48379 0 2
// end ; end ;
47304: GO 46880
47306: POP
47307: POP
// end ;
47308: LD_VAR 0 3
47312: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47313: LD_INT 0
47315: PPUSH
47316: PPUSH
47317: PPUSH
// if not unit or IsInUnit ( unit ) then
47318: LD_VAR 0 1
47322: NOT
47323: PUSH
47324: LD_VAR 0 1
47328: PPUSH
47329: CALL_OW 310
47333: OR
47334: IFFALSE 47338
// exit ;
47336: GO 47429
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47338: LD_ADDR_VAR 0 4
47342: PUSH
47343: LD_VAR 0 1
47347: PPUSH
47348: CALL_OW 250
47352: PPUSH
47353: LD_VAR 0 2
47357: PPUSH
47358: LD_INT 1
47360: PPUSH
47361: CALL_OW 272
47365: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47366: LD_ADDR_VAR 0 5
47370: PUSH
47371: LD_VAR 0 1
47375: PPUSH
47376: CALL_OW 251
47380: PPUSH
47381: LD_VAR 0 2
47385: PPUSH
47386: LD_INT 1
47388: PPUSH
47389: CALL_OW 273
47393: ST_TO_ADDR
// if ValidHex ( x , y ) then
47394: LD_VAR 0 4
47398: PPUSH
47399: LD_VAR 0 5
47403: PPUSH
47404: CALL_OW 488
47408: IFFALSE 47429
// ComTurnXY ( unit , x , y ) ;
47410: LD_VAR 0 1
47414: PPUSH
47415: LD_VAR 0 4
47419: PPUSH
47420: LD_VAR 0 5
47424: PPUSH
47425: CALL_OW 118
// end ;
47429: LD_VAR 0 3
47433: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47434: LD_INT 0
47436: PPUSH
47437: PPUSH
// result := false ;
47438: LD_ADDR_VAR 0 3
47442: PUSH
47443: LD_INT 0
47445: ST_TO_ADDR
// if not units then
47446: LD_VAR 0 2
47450: NOT
47451: IFFALSE 47455
// exit ;
47453: GO 47500
// for i in units do
47455: LD_ADDR_VAR 0 4
47459: PUSH
47460: LD_VAR 0 2
47464: PUSH
47465: FOR_IN
47466: IFFALSE 47498
// if See ( side , i ) then
47468: LD_VAR 0 1
47472: PPUSH
47473: LD_VAR 0 4
47477: PPUSH
47478: CALL_OW 292
47482: IFFALSE 47496
// begin result := true ;
47484: LD_ADDR_VAR 0 3
47488: PUSH
47489: LD_INT 1
47491: ST_TO_ADDR
// exit ;
47492: POP
47493: POP
47494: GO 47500
// end ;
47496: GO 47465
47498: POP
47499: POP
// end ;
47500: LD_VAR 0 3
47504: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47505: LD_INT 0
47507: PPUSH
47508: PPUSH
47509: PPUSH
47510: PPUSH
// if not unit or not points then
47511: LD_VAR 0 1
47515: NOT
47516: PUSH
47517: LD_VAR 0 2
47521: NOT
47522: OR
47523: IFFALSE 47527
// exit ;
47525: GO 47617
// dist := 99999 ;
47527: LD_ADDR_VAR 0 5
47531: PUSH
47532: LD_INT 99999
47534: ST_TO_ADDR
// for i in points do
47535: LD_ADDR_VAR 0 4
47539: PUSH
47540: LD_VAR 0 2
47544: PUSH
47545: FOR_IN
47546: IFFALSE 47615
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47548: LD_ADDR_VAR 0 6
47552: PUSH
47553: LD_VAR 0 1
47557: PPUSH
47558: LD_VAR 0 4
47562: PUSH
47563: LD_INT 1
47565: ARRAY
47566: PPUSH
47567: LD_VAR 0 4
47571: PUSH
47572: LD_INT 2
47574: ARRAY
47575: PPUSH
47576: CALL_OW 297
47580: ST_TO_ADDR
// if tmpDist < dist then
47581: LD_VAR 0 6
47585: PUSH
47586: LD_VAR 0 5
47590: LESS
47591: IFFALSE 47613
// begin result := i ;
47593: LD_ADDR_VAR 0 3
47597: PUSH
47598: LD_VAR 0 4
47602: ST_TO_ADDR
// dist := tmpDist ;
47603: LD_ADDR_VAR 0 5
47607: PUSH
47608: LD_VAR 0 6
47612: ST_TO_ADDR
// end ; end ;
47613: GO 47545
47615: POP
47616: POP
// end ;
47617: LD_VAR 0 3
47621: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47622: LD_INT 0
47624: PPUSH
// uc_side := side ;
47625: LD_ADDR_OWVAR 20
47629: PUSH
47630: LD_VAR 0 1
47634: ST_TO_ADDR
// uc_nation := 3 ;
47635: LD_ADDR_OWVAR 21
47639: PUSH
47640: LD_INT 3
47642: ST_TO_ADDR
// vc_chassis := 25 ;
47643: LD_ADDR_OWVAR 37
47647: PUSH
47648: LD_INT 25
47650: ST_TO_ADDR
// vc_engine := engine_siberite ;
47651: LD_ADDR_OWVAR 39
47655: PUSH
47656: LD_INT 3
47658: ST_TO_ADDR
// vc_control := control_computer ;
47659: LD_ADDR_OWVAR 38
47663: PUSH
47664: LD_INT 3
47666: ST_TO_ADDR
// vc_weapon := 59 ;
47667: LD_ADDR_OWVAR 40
47671: PUSH
47672: LD_INT 59
47674: ST_TO_ADDR
// result := CreateVehicle ;
47675: LD_ADDR_VAR 0 5
47679: PUSH
47680: CALL_OW 45
47684: ST_TO_ADDR
// SetDir ( result , d ) ;
47685: LD_VAR 0 5
47689: PPUSH
47690: LD_VAR 0 4
47694: PPUSH
47695: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47699: LD_VAR 0 5
47703: PPUSH
47704: LD_VAR 0 2
47708: PPUSH
47709: LD_VAR 0 3
47713: PPUSH
47714: LD_INT 0
47716: PPUSH
47717: CALL_OW 48
// end ;
47721: LD_VAR 0 5
47725: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47726: LD_INT 0
47728: PPUSH
47729: PPUSH
47730: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47731: LD_ADDR_VAR 0 2
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: LD_INT 0
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47754: LD_VAR 0 1
47758: NOT
47759: PUSH
47760: LD_VAR 0 1
47764: PPUSH
47765: CALL_OW 264
47769: PUSH
47770: LD_INT 12
47772: PUSH
47773: LD_INT 51
47775: PUSH
47776: LD_INT 32
47778: PUSH
47779: LD_INT 89
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: IN
47788: NOT
47789: OR
47790: IFFALSE 47794
// exit ;
47792: GO 47892
// for i := 1 to 3 do
47794: LD_ADDR_VAR 0 3
47798: PUSH
47799: DOUBLE
47800: LD_INT 1
47802: DEC
47803: ST_TO_ADDR
47804: LD_INT 3
47806: PUSH
47807: FOR_TO
47808: IFFALSE 47890
// begin tmp := GetCargo ( cargo , i ) ;
47810: LD_ADDR_VAR 0 4
47814: PUSH
47815: LD_VAR 0 1
47819: PPUSH
47820: LD_VAR 0 3
47824: PPUSH
47825: CALL_OW 289
47829: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47830: LD_ADDR_VAR 0 2
47834: PUSH
47835: LD_VAR 0 2
47839: PPUSH
47840: LD_VAR 0 3
47844: PPUSH
47845: LD_VAR 0 4
47849: PPUSH
47850: CALL_OW 1
47854: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47855: LD_ADDR_VAR 0 2
47859: PUSH
47860: LD_VAR 0 2
47864: PPUSH
47865: LD_INT 4
47867: PPUSH
47868: LD_VAR 0 2
47872: PUSH
47873: LD_INT 4
47875: ARRAY
47876: PUSH
47877: LD_VAR 0 4
47881: PLUS
47882: PPUSH
47883: CALL_OW 1
47887: ST_TO_ADDR
// end ;
47888: GO 47807
47890: POP
47891: POP
// end ;
47892: LD_VAR 0 2
47896: RET
// export function Length ( array ) ; begin
47897: LD_INT 0
47899: PPUSH
// result := array + 0 ;
47900: LD_ADDR_VAR 0 2
47904: PUSH
47905: LD_VAR 0 1
47909: PUSH
47910: LD_INT 0
47912: PLUS
47913: ST_TO_ADDR
// end ;
47914: LD_VAR 0 2
47918: RET
// export function PrepareArray ( array ) ; begin
47919: LD_INT 0
47921: PPUSH
// result := array diff 0 ;
47922: LD_ADDR_VAR 0 2
47926: PUSH
47927: LD_VAR 0 1
47931: PUSH
47932: LD_INT 0
47934: DIFF
47935: ST_TO_ADDR
// if not result [ 1 ] then
47936: LD_VAR 0 2
47940: PUSH
47941: LD_INT 1
47943: ARRAY
47944: NOT
47945: IFFALSE 47965
// result := Delete ( result , 1 ) ;
47947: LD_ADDR_VAR 0 2
47951: PUSH
47952: LD_VAR 0 2
47956: PPUSH
47957: LD_INT 1
47959: PPUSH
47960: CALL_OW 3
47964: ST_TO_ADDR
// end ;
47965: LD_VAR 0 2
47969: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
47970: LD_INT 0
47972: PPUSH
47973: PPUSH
47974: PPUSH
47975: PPUSH
// sibRocketRange := 25 ;
47976: LD_ADDR_VAR 0 6
47980: PUSH
47981: LD_INT 25
47983: ST_TO_ADDR
// result := false ;
47984: LD_ADDR_VAR 0 4
47988: PUSH
47989: LD_INT 0
47991: ST_TO_ADDR
// for i := 0 to 5 do
47992: LD_ADDR_VAR 0 5
47996: PUSH
47997: DOUBLE
47998: LD_INT 0
48000: DEC
48001: ST_TO_ADDR
48002: LD_INT 5
48004: PUSH
48005: FOR_TO
48006: IFFALSE 48073
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
48008: LD_VAR 0 1
48012: PPUSH
48013: LD_VAR 0 5
48017: PPUSH
48018: LD_VAR 0 6
48022: PPUSH
48023: CALL_OW 272
48027: PPUSH
48028: LD_VAR 0 2
48032: PPUSH
48033: LD_VAR 0 5
48037: PPUSH
48038: LD_VAR 0 6
48042: PPUSH
48043: CALL_OW 273
48047: PPUSH
48048: LD_VAR 0 3
48052: PPUSH
48053: CALL_OW 309
48057: IFFALSE 48071
// begin result := true ;
48059: LD_ADDR_VAR 0 4
48063: PUSH
48064: LD_INT 1
48066: ST_TO_ADDR
// exit ;
48067: POP
48068: POP
48069: GO 48075
// end ;
48071: GO 48005
48073: POP
48074: POP
// end ;
48075: LD_VAR 0 4
48079: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
48080: LD_INT 0
48082: PPUSH
48083: PPUSH
48084: PPUSH
// if btype = b_depot then
48085: LD_VAR 0 2
48089: PUSH
48090: LD_INT 0
48092: EQUAL
48093: IFFALSE 48105
// begin result := true ;
48095: LD_ADDR_VAR 0 3
48099: PUSH
48100: LD_INT 1
48102: ST_TO_ADDR
// exit ;
48103: GO 48221
// end ; pom := GetBase ( depot ) ;
48105: LD_ADDR_VAR 0 4
48109: PUSH
48110: LD_VAR 0 1
48114: PPUSH
48115: CALL_OW 274
48119: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48120: LD_ADDR_VAR 0 5
48124: PUSH
48125: LD_VAR 0 2
48129: PPUSH
48130: LD_VAR 0 1
48134: PPUSH
48135: CALL_OW 248
48139: PPUSH
48140: CALL_OW 450
48144: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
48145: LD_ADDR_VAR 0 3
48149: PUSH
48150: LD_VAR 0 4
48154: PPUSH
48155: LD_INT 1
48157: PPUSH
48158: CALL_OW 275
48162: PUSH
48163: LD_VAR 0 5
48167: PUSH
48168: LD_INT 1
48170: ARRAY
48171: GREATEREQUAL
48172: PUSH
48173: LD_VAR 0 4
48177: PPUSH
48178: LD_INT 2
48180: PPUSH
48181: CALL_OW 275
48185: PUSH
48186: LD_VAR 0 5
48190: PUSH
48191: LD_INT 2
48193: ARRAY
48194: GREATEREQUAL
48195: AND
48196: PUSH
48197: LD_VAR 0 4
48201: PPUSH
48202: LD_INT 3
48204: PPUSH
48205: CALL_OW 275
48209: PUSH
48210: LD_VAR 0 5
48214: PUSH
48215: LD_INT 3
48217: ARRAY
48218: GREATEREQUAL
48219: AND
48220: ST_TO_ADDR
// end ;
48221: LD_VAR 0 3
48225: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
48226: LD_INT 0
48228: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
48229: LD_VAR 0 1
48233: PPUSH
48234: LD_VAR 0 2
48238: PPUSH
48239: LD_INT 0
48241: PPUSH
48242: LD_INT 0
48244: PPUSH
48245: LD_INT 1
48247: PPUSH
48248: LD_INT 0
48250: PPUSH
48251: CALL_OW 587
// end ;
48255: LD_VAR 0 3
48259: RET
// export function CenterOnNow ( unit ) ; begin
48260: LD_INT 0
48262: PPUSH
// result := IsInUnit ( unit ) ;
48263: LD_ADDR_VAR 0 2
48267: PUSH
48268: LD_VAR 0 1
48272: PPUSH
48273: CALL_OW 310
48277: ST_TO_ADDR
// if not result then
48278: LD_VAR 0 2
48282: NOT
48283: IFFALSE 48295
// result := unit ;
48285: LD_ADDR_VAR 0 2
48289: PUSH
48290: LD_VAR 0 1
48294: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
48295: LD_VAR 0 1
48299: PPUSH
48300: CALL_OW 87
// end ;
48304: LD_VAR 0 2
48308: RET
// export function ComMoveHex ( unit , hex ) ; begin
48309: LD_INT 0
48311: PPUSH
// if not hex then
48312: LD_VAR 0 2
48316: NOT
48317: IFFALSE 48321
// exit ;
48319: GO 48374
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
48321: LD_VAR 0 2
48325: PUSH
48326: LD_INT 1
48328: ARRAY
48329: PPUSH
48330: LD_VAR 0 2
48334: PUSH
48335: LD_INT 2
48337: ARRAY
48338: PPUSH
48339: CALL_OW 428
48343: IFFALSE 48347
// exit ;
48345: GO 48374
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
48347: LD_VAR 0 1
48351: PPUSH
48352: LD_VAR 0 2
48356: PUSH
48357: LD_INT 1
48359: ARRAY
48360: PPUSH
48361: LD_VAR 0 2
48365: PUSH
48366: LD_INT 2
48368: ARRAY
48369: PPUSH
48370: CALL_OW 111
// end ;
48374: LD_VAR 0 3
48378: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
48379: LD_INT 0
48381: PPUSH
48382: PPUSH
48383: PPUSH
// if not unit or not enemy then
48384: LD_VAR 0 1
48388: NOT
48389: PUSH
48390: LD_VAR 0 2
48394: NOT
48395: OR
48396: IFFALSE 48400
// exit ;
48398: GO 48524
// x := GetX ( enemy ) ;
48400: LD_ADDR_VAR 0 4
48404: PUSH
48405: LD_VAR 0 2
48409: PPUSH
48410: CALL_OW 250
48414: ST_TO_ADDR
// y := GetY ( enemy ) ;
48415: LD_ADDR_VAR 0 5
48419: PUSH
48420: LD_VAR 0 2
48424: PPUSH
48425: CALL_OW 251
48429: ST_TO_ADDR
// if ValidHex ( x , y ) then
48430: LD_VAR 0 4
48434: PPUSH
48435: LD_VAR 0 5
48439: PPUSH
48440: CALL_OW 488
48444: IFFALSE 48524
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
48446: LD_VAR 0 2
48450: PPUSH
48451: CALL_OW 247
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: IN
48466: PUSH
48467: LD_VAR 0 1
48471: PPUSH
48472: CALL_OW 255
48476: PPUSH
48477: LD_VAR 0 2
48481: PPUSH
48482: CALL_OW 292
48486: OR
48487: IFFALSE 48505
// ComAttackUnit ( unit , enemy ) else
48489: LD_VAR 0 1
48493: PPUSH
48494: LD_VAR 0 2
48498: PPUSH
48499: CALL_OW 115
48503: GO 48524
// ComAgressiveMove ( unit , x , y ) ;
48505: LD_VAR 0 1
48509: PPUSH
48510: LD_VAR 0 4
48514: PPUSH
48515: LD_VAR 0 5
48519: PPUSH
48520: CALL_OW 114
// end ;
48524: LD_VAR 0 3
48528: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
48529: LD_INT 0
48531: PPUSH
48532: PPUSH
48533: PPUSH
// list := AreaToList ( area , 0 ) ;
48534: LD_ADDR_VAR 0 5
48538: PUSH
48539: LD_VAR 0 1
48543: PPUSH
48544: LD_INT 0
48546: PPUSH
48547: CALL_OW 517
48551: ST_TO_ADDR
// if not list then
48552: LD_VAR 0 5
48556: NOT
48557: IFFALSE 48561
// exit ;
48559: GO 48691
// if all then
48561: LD_VAR 0 2
48565: IFFALSE 48653
// begin for i := 1 to list [ 1 ] do
48567: LD_ADDR_VAR 0 4
48571: PUSH
48572: DOUBLE
48573: LD_INT 1
48575: DEC
48576: ST_TO_ADDR
48577: LD_VAR 0 5
48581: PUSH
48582: LD_INT 1
48584: ARRAY
48585: PUSH
48586: FOR_TO
48587: IFFALSE 48649
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
48589: LD_ADDR_VAR 0 3
48593: PUSH
48594: LD_VAR 0 3
48598: PPUSH
48599: LD_VAR 0 3
48603: PUSH
48604: LD_INT 1
48606: PLUS
48607: PPUSH
48608: LD_VAR 0 5
48612: PUSH
48613: LD_INT 1
48615: ARRAY
48616: PUSH
48617: LD_VAR 0 4
48621: ARRAY
48622: PUSH
48623: LD_VAR 0 5
48627: PUSH
48628: LD_INT 2
48630: ARRAY
48631: PUSH
48632: LD_VAR 0 4
48636: ARRAY
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PPUSH
48642: CALL_OW 1
48646: ST_TO_ADDR
48647: GO 48586
48649: POP
48650: POP
// exit ;
48651: GO 48691
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
48653: LD_ADDR_VAR 0 3
48657: PUSH
48658: LD_VAR 0 5
48662: PUSH
48663: LD_INT 1
48665: ARRAY
48666: PUSH
48667: LD_INT 1
48669: ARRAY
48670: PUSH
48671: LD_VAR 0 5
48675: PUSH
48676: LD_INT 2
48678: ARRAY
48679: PUSH
48680: LD_INT 1
48682: ARRAY
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: ST_TO_ADDR
// end ;
48691: LD_VAR 0 3
48695: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
48696: LD_INT 0
48698: PPUSH
48699: PPUSH
// list := AreaToList ( area , 0 ) ;
48700: LD_ADDR_VAR 0 4
48704: PUSH
48705: LD_VAR 0 1
48709: PPUSH
48710: LD_INT 0
48712: PPUSH
48713: CALL_OW 517
48717: ST_TO_ADDR
// if not list then
48718: LD_VAR 0 4
48722: NOT
48723: IFFALSE 48727
// exit ;
48725: GO 48768
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
48727: LD_ADDR_VAR 0 3
48731: PUSH
48732: LD_VAR 0 4
48736: PUSH
48737: LD_INT 1
48739: ARRAY
48740: PUSH
48741: LD_INT 1
48743: ARRAY
48744: PUSH
48745: LD_VAR 0 4
48749: PUSH
48750: LD_INT 2
48752: ARRAY
48753: PUSH
48754: LD_INT 1
48756: ARRAY
48757: PUSH
48758: LD_VAR 0 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: LIST
48767: ST_TO_ADDR
// end ;
48768: LD_VAR 0 3
48772: RET
// export function First ( array ) ; begin
48773: LD_INT 0
48775: PPUSH
// if not array then
48776: LD_VAR 0 1
48780: NOT
48781: IFFALSE 48785
// exit ;
48783: GO 48799
// result := array [ 1 ] ;
48785: LD_ADDR_VAR 0 2
48789: PUSH
48790: LD_VAR 0 1
48794: PUSH
48795: LD_INT 1
48797: ARRAY
48798: ST_TO_ADDR
// end ;
48799: LD_VAR 0 2
48803: RET
// export function Last ( array ) ; begin
48804: LD_INT 0
48806: PPUSH
// if not array then
48807: LD_VAR 0 1
48811: NOT
48812: IFFALSE 48816
// exit ;
48814: GO 48832
// result := array [ array ] ;
48816: LD_ADDR_VAR 0 2
48820: PUSH
48821: LD_VAR 0 1
48825: PUSH
48826: LD_VAR 0 1
48830: ARRAY
48831: ST_TO_ADDR
// end ;
48832: LD_VAR 0 2
48836: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
48837: LD_INT 0
48839: PPUSH
48840: PPUSH
// result := [ ] ;
48841: LD_ADDR_VAR 0 5
48845: PUSH
48846: EMPTY
48847: ST_TO_ADDR
// if not array then
48848: LD_VAR 0 1
48852: NOT
48853: IFFALSE 48857
// exit ;
48855: GO 48969
// for i := 1 to array do
48857: LD_ADDR_VAR 0 6
48861: PUSH
48862: DOUBLE
48863: LD_INT 1
48865: DEC
48866: ST_TO_ADDR
48867: LD_VAR 0 1
48871: PUSH
48872: FOR_TO
48873: IFFALSE 48967
// if array [ i ] [ index ] = value then
48875: LD_VAR 0 1
48879: PUSH
48880: LD_VAR 0 6
48884: ARRAY
48885: PUSH
48886: LD_VAR 0 2
48890: ARRAY
48891: PUSH
48892: LD_VAR 0 3
48896: EQUAL
48897: IFFALSE 48965
// begin if indexColumn then
48899: LD_VAR 0 4
48903: IFFALSE 48939
// result := Join ( result , array [ i ] [ indexColumn ] ) else
48905: LD_ADDR_VAR 0 5
48909: PUSH
48910: LD_VAR 0 5
48914: PPUSH
48915: LD_VAR 0 1
48919: PUSH
48920: LD_VAR 0 6
48924: ARRAY
48925: PUSH
48926: LD_VAR 0 4
48930: ARRAY
48931: PPUSH
48932: CALL 44157 0 2
48936: ST_TO_ADDR
48937: GO 48965
// result := Join ( result , array [ i ] ) ;
48939: LD_ADDR_VAR 0 5
48943: PUSH
48944: LD_VAR 0 5
48948: PPUSH
48949: LD_VAR 0 1
48953: PUSH
48954: LD_VAR 0 6
48958: ARRAY
48959: PPUSH
48960: CALL 44157 0 2
48964: ST_TO_ADDR
// end ;
48965: GO 48872
48967: POP
48968: POP
// end ;
48969: LD_VAR 0 5
48973: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
48974: LD_INT 0
48976: PPUSH
// if not vehicles or not parkingPoint then
48977: LD_VAR 0 1
48981: NOT
48982: PUSH
48983: LD_VAR 0 2
48987: NOT
48988: OR
48989: IFFALSE 48993
// exit ;
48991: GO 49091
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
48993: LD_ADDR_VAR 0 1
48997: PUSH
48998: LD_VAR 0 1
49002: PPUSH
49003: LD_INT 50
49005: PUSH
49006: EMPTY
49007: LIST
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: LD_INT 92
49014: PUSH
49015: LD_VAR 0 2
49019: PUSH
49020: LD_INT 1
49022: ARRAY
49023: PUSH
49024: LD_VAR 0 2
49028: PUSH
49029: LD_INT 2
49031: ARRAY
49032: PUSH
49033: LD_INT 8
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PPUSH
49050: CALL_OW 72
49054: ST_TO_ADDR
// if not vehicles then
49055: LD_VAR 0 1
49059: NOT
49060: IFFALSE 49064
// exit ;
49062: GO 49091
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
49064: LD_VAR 0 1
49068: PPUSH
49069: LD_VAR 0 2
49073: PUSH
49074: LD_INT 1
49076: ARRAY
49077: PPUSH
49078: LD_VAR 0 2
49082: PUSH
49083: LD_INT 2
49085: ARRAY
49086: PPUSH
49087: CALL_OW 111
// end ;
49091: LD_VAR 0 3
49095: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
49096: LD_INT 0
49098: PPUSH
49099: PPUSH
49100: PPUSH
// if not side or not area then
49101: LD_VAR 0 1
49105: NOT
49106: PUSH
49107: LD_VAR 0 2
49111: NOT
49112: OR
49113: IFFALSE 49117
// exit ;
49115: GO 49236
// tmp := AreaToList ( area , 0 ) ;
49117: LD_ADDR_VAR 0 5
49121: PUSH
49122: LD_VAR 0 2
49126: PPUSH
49127: LD_INT 0
49129: PPUSH
49130: CALL_OW 517
49134: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
49135: LD_ADDR_VAR 0 4
49139: PUSH
49140: DOUBLE
49141: LD_INT 1
49143: DEC
49144: ST_TO_ADDR
49145: LD_VAR 0 5
49149: PUSH
49150: LD_INT 1
49152: ARRAY
49153: PUSH
49154: FOR_TO
49155: IFFALSE 49234
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
49157: LD_VAR 0 5
49161: PUSH
49162: LD_INT 1
49164: ARRAY
49165: PUSH
49166: LD_VAR 0 4
49170: ARRAY
49171: PPUSH
49172: LD_VAR 0 5
49176: PUSH
49177: LD_INT 2
49179: ARRAY
49180: PUSH
49181: LD_VAR 0 4
49185: ARRAY
49186: PPUSH
49187: CALL_OW 351
49191: IFFALSE 49232
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
49193: LD_VAR 0 5
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: PUSH
49202: LD_VAR 0 4
49206: ARRAY
49207: PPUSH
49208: LD_VAR 0 5
49212: PUSH
49213: LD_INT 2
49215: ARRAY
49216: PUSH
49217: LD_VAR 0 4
49221: ARRAY
49222: PPUSH
49223: LD_VAR 0 1
49227: PPUSH
49228: CALL_OW 244
// end ;
49232: GO 49154
49234: POP
49235: POP
// end ; end_of_file end_of_file
49236: LD_VAR 0 3
49240: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
49241: LD_VAR 0 1
49245: PPUSH
49246: LD_VAR 0 2
49250: PPUSH
49251: LD_VAR 0 3
49255: PPUSH
49256: LD_VAR 0 4
49260: PPUSH
49261: LD_VAR 0 5
49265: PPUSH
49266: LD_VAR 0 6
49270: PPUSH
49271: CALL 49472 0 6
// end ;
49275: PPOPN 6
49277: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
49278: LD_INT 0
49280: PPUSH
// begin if not units then
49281: LD_VAR 0 1
49285: NOT
49286: IFFALSE 49290
// exit ;
49288: GO 49290
// end ;
49290: PPOPN 7
49292: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
49293: CALL 49359 0 0
// end ; end_of_file
49297: PPOPN 1
49299: END
// export globalGameSaveCounter ; every 0 0$1 do
49300: GO 49302
49302: DISABLE
// begin enable ;
49303: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49304: LD_STRING updateTimer(
49306: PUSH
49307: LD_OWVAR 1
49311: STR
49312: PUSH
49313: LD_STRING );
49315: STR
49316: PPUSH
49317: CALL_OW 559
// end ;
49321: END
// every 0 0$1 do
49322: GO 49324
49324: DISABLE
// begin globalGameSaveCounter := 0 ;
49325: LD_ADDR_EXP 29
49329: PUSH
49330: LD_INT 0
49332: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
49333: LD_STRING setGameSaveCounter(0)
49335: PPUSH
49336: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
49340: LD_STRING initStreamRollete();
49342: PPUSH
49343: CALL_OW 559
// InitStreamMode ;
49347: CALL 50690 0 0
// DefineStreamItems ( false ) ;
49351: LD_INT 0
49353: PPUSH
49354: CALL 51154 0 1
// end ;
49358: END
// export function SOS_MapStart ( ) ; begin
49359: LD_INT 0
49361: PPUSH
// if streamModeActive then
49362: LD_EXP 30
49366: IFFALSE 49375
// DefineStreamItems ( true ) ;
49368: LD_INT 1
49370: PPUSH
49371: CALL 51154 0 1
// UpdateLuaVariables ( ) ;
49375: CALL 49392 0 0
// UpdateFactoryWaypoints ( ) ;
49379: CALL 64156 0 0
// UpdateWarehouseGatheringPoints ( ) ;
49383: CALL 64408 0 0
// end ;
49387: LD_VAR 0 1
49391: RET
// function UpdateLuaVariables ( ) ; begin
49392: LD_INT 0
49394: PPUSH
// if globalGameSaveCounter then
49395: LD_EXP 29
49399: IFFALSE 49433
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
49401: LD_ADDR_EXP 29
49405: PUSH
49406: LD_EXP 29
49410: PPUSH
49411: CALL 45518 0 1
49415: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49416: LD_STRING setGameSaveCounter(
49418: PUSH
49419: LD_EXP 29
49423: STR
49424: PUSH
49425: LD_STRING )
49427: STR
49428: PPUSH
49429: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
49433: LD_STRING setGameDifficulty(
49435: PUSH
49436: LD_OWVAR 67
49440: STR
49441: PUSH
49442: LD_STRING )
49444: STR
49445: PPUSH
49446: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
49450: LD_STRING displayDifficulty(
49452: PUSH
49453: LD_OWVAR 67
49457: STR
49458: PUSH
49459: LD_STRING )
49461: STR
49462: PPUSH
49463: CALL_OW 559
// end ;
49467: LD_VAR 0 1
49471: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49472: LD_INT 0
49474: PPUSH
// if p2 = stream_mode then
49475: LD_VAR 0 2
49479: PUSH
49480: LD_INT 100
49482: EQUAL
49483: IFFALSE 50486
// begin if not StreamModeActive then
49485: LD_EXP 30
49489: NOT
49490: IFFALSE 49500
// StreamModeActive := true ;
49492: LD_ADDR_EXP 30
49496: PUSH
49497: LD_INT 1
49499: ST_TO_ADDR
// if p3 = 0 then
49500: LD_VAR 0 3
49504: PUSH
49505: LD_INT 0
49507: EQUAL
49508: IFFALSE 49514
// InitStreamMode ;
49510: CALL 50690 0 0
// if p3 = 1 then
49514: LD_VAR 0 3
49518: PUSH
49519: LD_INT 1
49521: EQUAL
49522: IFFALSE 49532
// sRocket := true ;
49524: LD_ADDR_EXP 35
49528: PUSH
49529: LD_INT 1
49531: ST_TO_ADDR
// if p3 = 2 then
49532: LD_VAR 0 3
49536: PUSH
49537: LD_INT 2
49539: EQUAL
49540: IFFALSE 49550
// sSpeed := true ;
49542: LD_ADDR_EXP 34
49546: PUSH
49547: LD_INT 1
49549: ST_TO_ADDR
// if p3 = 3 then
49550: LD_VAR 0 3
49554: PUSH
49555: LD_INT 3
49557: EQUAL
49558: IFFALSE 49568
// sEngine := true ;
49560: LD_ADDR_EXP 36
49564: PUSH
49565: LD_INT 1
49567: ST_TO_ADDR
// if p3 = 4 then
49568: LD_VAR 0 3
49572: PUSH
49573: LD_INT 4
49575: EQUAL
49576: IFFALSE 49586
// sSpec := true ;
49578: LD_ADDR_EXP 33
49582: PUSH
49583: LD_INT 1
49585: ST_TO_ADDR
// if p3 = 5 then
49586: LD_VAR 0 3
49590: PUSH
49591: LD_INT 5
49593: EQUAL
49594: IFFALSE 49604
// sLevel := true ;
49596: LD_ADDR_EXP 37
49600: PUSH
49601: LD_INT 1
49603: ST_TO_ADDR
// if p3 = 6 then
49604: LD_VAR 0 3
49608: PUSH
49609: LD_INT 6
49611: EQUAL
49612: IFFALSE 49622
// sArmoury := true ;
49614: LD_ADDR_EXP 38
49618: PUSH
49619: LD_INT 1
49621: ST_TO_ADDR
// if p3 = 7 then
49622: LD_VAR 0 3
49626: PUSH
49627: LD_INT 7
49629: EQUAL
49630: IFFALSE 49640
// sRadar := true ;
49632: LD_ADDR_EXP 39
49636: PUSH
49637: LD_INT 1
49639: ST_TO_ADDR
// if p3 = 8 then
49640: LD_VAR 0 3
49644: PUSH
49645: LD_INT 8
49647: EQUAL
49648: IFFALSE 49658
// sBunker := true ;
49650: LD_ADDR_EXP 40
49654: PUSH
49655: LD_INT 1
49657: ST_TO_ADDR
// if p3 = 9 then
49658: LD_VAR 0 3
49662: PUSH
49663: LD_INT 9
49665: EQUAL
49666: IFFALSE 49676
// sHack := true ;
49668: LD_ADDR_EXP 41
49672: PUSH
49673: LD_INT 1
49675: ST_TO_ADDR
// if p3 = 10 then
49676: LD_VAR 0 3
49680: PUSH
49681: LD_INT 10
49683: EQUAL
49684: IFFALSE 49694
// sFire := true ;
49686: LD_ADDR_EXP 42
49690: PUSH
49691: LD_INT 1
49693: ST_TO_ADDR
// if p3 = 11 then
49694: LD_VAR 0 3
49698: PUSH
49699: LD_INT 11
49701: EQUAL
49702: IFFALSE 49712
// sRefresh := true ;
49704: LD_ADDR_EXP 43
49708: PUSH
49709: LD_INT 1
49711: ST_TO_ADDR
// if p3 = 12 then
49712: LD_VAR 0 3
49716: PUSH
49717: LD_INT 12
49719: EQUAL
49720: IFFALSE 49730
// sExp := true ;
49722: LD_ADDR_EXP 44
49726: PUSH
49727: LD_INT 1
49729: ST_TO_ADDR
// if p3 = 13 then
49730: LD_VAR 0 3
49734: PUSH
49735: LD_INT 13
49737: EQUAL
49738: IFFALSE 49748
// sDepot := true ;
49740: LD_ADDR_EXP 45
49744: PUSH
49745: LD_INT 1
49747: ST_TO_ADDR
// if p3 = 14 then
49748: LD_VAR 0 3
49752: PUSH
49753: LD_INT 14
49755: EQUAL
49756: IFFALSE 49766
// sFlag := true ;
49758: LD_ADDR_EXP 46
49762: PUSH
49763: LD_INT 1
49765: ST_TO_ADDR
// if p3 = 15 then
49766: LD_VAR 0 3
49770: PUSH
49771: LD_INT 15
49773: EQUAL
49774: IFFALSE 49784
// sKamikadze := true ;
49776: LD_ADDR_EXP 54
49780: PUSH
49781: LD_INT 1
49783: ST_TO_ADDR
// if p3 = 16 then
49784: LD_VAR 0 3
49788: PUSH
49789: LD_INT 16
49791: EQUAL
49792: IFFALSE 49802
// sTroll := true ;
49794: LD_ADDR_EXP 55
49798: PUSH
49799: LD_INT 1
49801: ST_TO_ADDR
// if p3 = 17 then
49802: LD_VAR 0 3
49806: PUSH
49807: LD_INT 17
49809: EQUAL
49810: IFFALSE 49820
// sSlow := true ;
49812: LD_ADDR_EXP 56
49816: PUSH
49817: LD_INT 1
49819: ST_TO_ADDR
// if p3 = 18 then
49820: LD_VAR 0 3
49824: PUSH
49825: LD_INT 18
49827: EQUAL
49828: IFFALSE 49838
// sLack := true ;
49830: LD_ADDR_EXP 57
49834: PUSH
49835: LD_INT 1
49837: ST_TO_ADDR
// if p3 = 19 then
49838: LD_VAR 0 3
49842: PUSH
49843: LD_INT 19
49845: EQUAL
49846: IFFALSE 49856
// sTank := true ;
49848: LD_ADDR_EXP 59
49852: PUSH
49853: LD_INT 1
49855: ST_TO_ADDR
// if p3 = 20 then
49856: LD_VAR 0 3
49860: PUSH
49861: LD_INT 20
49863: EQUAL
49864: IFFALSE 49874
// sRemote := true ;
49866: LD_ADDR_EXP 60
49870: PUSH
49871: LD_INT 1
49873: ST_TO_ADDR
// if p3 = 21 then
49874: LD_VAR 0 3
49878: PUSH
49879: LD_INT 21
49881: EQUAL
49882: IFFALSE 49892
// sPowell := true ;
49884: LD_ADDR_EXP 61
49888: PUSH
49889: LD_INT 1
49891: ST_TO_ADDR
// if p3 = 22 then
49892: LD_VAR 0 3
49896: PUSH
49897: LD_INT 22
49899: EQUAL
49900: IFFALSE 49910
// sTeleport := true ;
49902: LD_ADDR_EXP 64
49906: PUSH
49907: LD_INT 1
49909: ST_TO_ADDR
// if p3 = 23 then
49910: LD_VAR 0 3
49914: PUSH
49915: LD_INT 23
49917: EQUAL
49918: IFFALSE 49928
// sOilTower := true ;
49920: LD_ADDR_EXP 66
49924: PUSH
49925: LD_INT 1
49927: ST_TO_ADDR
// if p3 = 24 then
49928: LD_VAR 0 3
49932: PUSH
49933: LD_INT 24
49935: EQUAL
49936: IFFALSE 49946
// sShovel := true ;
49938: LD_ADDR_EXP 67
49942: PUSH
49943: LD_INT 1
49945: ST_TO_ADDR
// if p3 = 25 then
49946: LD_VAR 0 3
49950: PUSH
49951: LD_INT 25
49953: EQUAL
49954: IFFALSE 49964
// sSheik := true ;
49956: LD_ADDR_EXP 68
49960: PUSH
49961: LD_INT 1
49963: ST_TO_ADDR
// if p3 = 26 then
49964: LD_VAR 0 3
49968: PUSH
49969: LD_INT 26
49971: EQUAL
49972: IFFALSE 49982
// sEarthquake := true ;
49974: LD_ADDR_EXP 70
49978: PUSH
49979: LD_INT 1
49981: ST_TO_ADDR
// if p3 = 27 then
49982: LD_VAR 0 3
49986: PUSH
49987: LD_INT 27
49989: EQUAL
49990: IFFALSE 50000
// sAI := true ;
49992: LD_ADDR_EXP 71
49996: PUSH
49997: LD_INT 1
49999: ST_TO_ADDR
// if p3 = 28 then
50000: LD_VAR 0 3
50004: PUSH
50005: LD_INT 28
50007: EQUAL
50008: IFFALSE 50018
// sCargo := true ;
50010: LD_ADDR_EXP 74
50014: PUSH
50015: LD_INT 1
50017: ST_TO_ADDR
// if p3 = 29 then
50018: LD_VAR 0 3
50022: PUSH
50023: LD_INT 29
50025: EQUAL
50026: IFFALSE 50036
// sDLaser := true ;
50028: LD_ADDR_EXP 75
50032: PUSH
50033: LD_INT 1
50035: ST_TO_ADDR
// if p3 = 30 then
50036: LD_VAR 0 3
50040: PUSH
50041: LD_INT 30
50043: EQUAL
50044: IFFALSE 50054
// sExchange := true ;
50046: LD_ADDR_EXP 76
50050: PUSH
50051: LD_INT 1
50053: ST_TO_ADDR
// if p3 = 31 then
50054: LD_VAR 0 3
50058: PUSH
50059: LD_INT 31
50061: EQUAL
50062: IFFALSE 50072
// sFac := true ;
50064: LD_ADDR_EXP 77
50068: PUSH
50069: LD_INT 1
50071: ST_TO_ADDR
// if p3 = 32 then
50072: LD_VAR 0 3
50076: PUSH
50077: LD_INT 32
50079: EQUAL
50080: IFFALSE 50090
// sPower := true ;
50082: LD_ADDR_EXP 78
50086: PUSH
50087: LD_INT 1
50089: ST_TO_ADDR
// if p3 = 33 then
50090: LD_VAR 0 3
50094: PUSH
50095: LD_INT 33
50097: EQUAL
50098: IFFALSE 50108
// sRandom := true ;
50100: LD_ADDR_EXP 79
50104: PUSH
50105: LD_INT 1
50107: ST_TO_ADDR
// if p3 = 34 then
50108: LD_VAR 0 3
50112: PUSH
50113: LD_INT 34
50115: EQUAL
50116: IFFALSE 50126
// sShield := true ;
50118: LD_ADDR_EXP 80
50122: PUSH
50123: LD_INT 1
50125: ST_TO_ADDR
// if p3 = 35 then
50126: LD_VAR 0 3
50130: PUSH
50131: LD_INT 35
50133: EQUAL
50134: IFFALSE 50144
// sTime := true ;
50136: LD_ADDR_EXP 81
50140: PUSH
50141: LD_INT 1
50143: ST_TO_ADDR
// if p3 = 36 then
50144: LD_VAR 0 3
50148: PUSH
50149: LD_INT 36
50151: EQUAL
50152: IFFALSE 50162
// sTools := true ;
50154: LD_ADDR_EXP 82
50158: PUSH
50159: LD_INT 1
50161: ST_TO_ADDR
// if p3 = 101 then
50162: LD_VAR 0 3
50166: PUSH
50167: LD_INT 101
50169: EQUAL
50170: IFFALSE 50180
// sSold := true ;
50172: LD_ADDR_EXP 47
50176: PUSH
50177: LD_INT 1
50179: ST_TO_ADDR
// if p3 = 102 then
50180: LD_VAR 0 3
50184: PUSH
50185: LD_INT 102
50187: EQUAL
50188: IFFALSE 50198
// sDiff := true ;
50190: LD_ADDR_EXP 48
50194: PUSH
50195: LD_INT 1
50197: ST_TO_ADDR
// if p3 = 103 then
50198: LD_VAR 0 3
50202: PUSH
50203: LD_INT 103
50205: EQUAL
50206: IFFALSE 50216
// sFog := true ;
50208: LD_ADDR_EXP 51
50212: PUSH
50213: LD_INT 1
50215: ST_TO_ADDR
// if p3 = 104 then
50216: LD_VAR 0 3
50220: PUSH
50221: LD_INT 104
50223: EQUAL
50224: IFFALSE 50234
// sReset := true ;
50226: LD_ADDR_EXP 52
50230: PUSH
50231: LD_INT 1
50233: ST_TO_ADDR
// if p3 = 105 then
50234: LD_VAR 0 3
50238: PUSH
50239: LD_INT 105
50241: EQUAL
50242: IFFALSE 50252
// sSun := true ;
50244: LD_ADDR_EXP 53
50248: PUSH
50249: LD_INT 1
50251: ST_TO_ADDR
// if p3 = 106 then
50252: LD_VAR 0 3
50256: PUSH
50257: LD_INT 106
50259: EQUAL
50260: IFFALSE 50270
// sTiger := true ;
50262: LD_ADDR_EXP 49
50266: PUSH
50267: LD_INT 1
50269: ST_TO_ADDR
// if p3 = 107 then
50270: LD_VAR 0 3
50274: PUSH
50275: LD_INT 107
50277: EQUAL
50278: IFFALSE 50288
// sBomb := true ;
50280: LD_ADDR_EXP 50
50284: PUSH
50285: LD_INT 1
50287: ST_TO_ADDR
// if p3 = 108 then
50288: LD_VAR 0 3
50292: PUSH
50293: LD_INT 108
50295: EQUAL
50296: IFFALSE 50306
// sWound := true ;
50298: LD_ADDR_EXP 58
50302: PUSH
50303: LD_INT 1
50305: ST_TO_ADDR
// if p3 = 109 then
50306: LD_VAR 0 3
50310: PUSH
50311: LD_INT 109
50313: EQUAL
50314: IFFALSE 50324
// sBetray := true ;
50316: LD_ADDR_EXP 62
50320: PUSH
50321: LD_INT 1
50323: ST_TO_ADDR
// if p3 = 110 then
50324: LD_VAR 0 3
50328: PUSH
50329: LD_INT 110
50331: EQUAL
50332: IFFALSE 50342
// sContamin := true ;
50334: LD_ADDR_EXP 63
50338: PUSH
50339: LD_INT 1
50341: ST_TO_ADDR
// if p3 = 111 then
50342: LD_VAR 0 3
50346: PUSH
50347: LD_INT 111
50349: EQUAL
50350: IFFALSE 50360
// sOil := true ;
50352: LD_ADDR_EXP 65
50356: PUSH
50357: LD_INT 1
50359: ST_TO_ADDR
// if p3 = 112 then
50360: LD_VAR 0 3
50364: PUSH
50365: LD_INT 112
50367: EQUAL
50368: IFFALSE 50378
// sStu := true ;
50370: LD_ADDR_EXP 69
50374: PUSH
50375: LD_INT 1
50377: ST_TO_ADDR
// if p3 = 113 then
50378: LD_VAR 0 3
50382: PUSH
50383: LD_INT 113
50385: EQUAL
50386: IFFALSE 50396
// sBazooka := true ;
50388: LD_ADDR_EXP 72
50392: PUSH
50393: LD_INT 1
50395: ST_TO_ADDR
// if p3 = 114 then
50396: LD_VAR 0 3
50400: PUSH
50401: LD_INT 114
50403: EQUAL
50404: IFFALSE 50414
// sMortar := true ;
50406: LD_ADDR_EXP 73
50410: PUSH
50411: LD_INT 1
50413: ST_TO_ADDR
// if p3 = 115 then
50414: LD_VAR 0 3
50418: PUSH
50419: LD_INT 115
50421: EQUAL
50422: IFFALSE 50432
// sRanger := true ;
50424: LD_ADDR_EXP 83
50428: PUSH
50429: LD_INT 1
50431: ST_TO_ADDR
// if p3 = 116 then
50432: LD_VAR 0 3
50436: PUSH
50437: LD_INT 116
50439: EQUAL
50440: IFFALSE 50450
// sComputer := true ;
50442: LD_ADDR_EXP 84
50446: PUSH
50447: LD_INT 1
50449: ST_TO_ADDR
// if p3 = 117 then
50450: LD_VAR 0 3
50454: PUSH
50455: LD_INT 117
50457: EQUAL
50458: IFFALSE 50468
// s30 := true ;
50460: LD_ADDR_EXP 85
50464: PUSH
50465: LD_INT 1
50467: ST_TO_ADDR
// if p3 = 118 then
50468: LD_VAR 0 3
50472: PUSH
50473: LD_INT 118
50475: EQUAL
50476: IFFALSE 50486
// s60 := true ;
50478: LD_ADDR_EXP 86
50482: PUSH
50483: LD_INT 1
50485: ST_TO_ADDR
// end ; if p2 = hack_mode then
50486: LD_VAR 0 2
50490: PUSH
50491: LD_INT 101
50493: EQUAL
50494: IFFALSE 50622
// begin case p3 of 1 :
50496: LD_VAR 0 3
50500: PUSH
50501: LD_INT 1
50503: DOUBLE
50504: EQUAL
50505: IFTRUE 50509
50507: GO 50516
50509: POP
// hHackUnlimitedResources ; 2 :
50510: CALL 62769 0 0
50514: GO 50622
50516: LD_INT 2
50518: DOUBLE
50519: EQUAL
50520: IFTRUE 50524
50522: GO 50531
50524: POP
// hHackSetLevel10 ; 3 :
50525: CALL 62902 0 0
50529: GO 50622
50531: LD_INT 3
50533: DOUBLE
50534: EQUAL
50535: IFTRUE 50539
50537: GO 50546
50539: POP
// hHackSetLevel10YourUnits ; 4 :
50540: CALL 62987 0 0
50544: GO 50622
50546: LD_INT 4
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50554
50552: GO 50561
50554: POP
// hHackInvincible ; 5 :
50555: CALL 63435 0 0
50559: GO 50622
50561: LD_INT 5
50563: DOUBLE
50564: EQUAL
50565: IFTRUE 50569
50567: GO 50576
50569: POP
// hHackInvisible ; 6 :
50570: CALL 63546 0 0
50574: GO 50622
50576: LD_INT 6
50578: DOUBLE
50579: EQUAL
50580: IFTRUE 50584
50582: GO 50591
50584: POP
// hHackChangeYourSide ; 7 :
50585: CALL 63603 0 0
50589: GO 50622
50591: LD_INT 7
50593: DOUBLE
50594: EQUAL
50595: IFTRUE 50599
50597: GO 50606
50599: POP
// hHackChangeUnitSide ; 8 :
50600: CALL 63645 0 0
50604: GO 50622
50606: LD_INT 8
50608: DOUBLE
50609: EQUAL
50610: IFTRUE 50614
50612: GO 50621
50614: POP
// hHackFog ; end ;
50615: CALL 63746 0 0
50619: GO 50622
50621: POP
// end ; if p2 = game_save_mode then
50622: LD_VAR 0 2
50626: PUSH
50627: LD_INT 102
50629: EQUAL
50630: IFFALSE 50685
// begin if p3 = 1 then
50632: LD_VAR 0 3
50636: PUSH
50637: LD_INT 1
50639: EQUAL
50640: IFFALSE 50652
// globalGameSaveCounter := p4 ;
50642: LD_ADDR_EXP 29
50646: PUSH
50647: LD_VAR 0 4
50651: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
50652: LD_VAR 0 3
50656: PUSH
50657: LD_INT 2
50659: EQUAL
50660: PUSH
50661: LD_EXP 29
50665: AND
50666: IFFALSE 50685
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50668: LD_STRING setGameSaveCounter(
50670: PUSH
50671: LD_EXP 29
50675: STR
50676: PUSH
50677: LD_STRING )
50679: STR
50680: PPUSH
50681: CALL_OW 559
// end ; end ;
50685: LD_VAR 0 7
50689: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
50690: LD_INT 0
50692: PPUSH
// streamModeActive := false ;
50693: LD_ADDR_EXP 30
50697: PUSH
50698: LD_INT 0
50700: ST_TO_ADDR
// normalCounter := 36 ;
50701: LD_ADDR_EXP 31
50705: PUSH
50706: LD_INT 36
50708: ST_TO_ADDR
// hardcoreCounter := 18 ;
50709: LD_ADDR_EXP 32
50713: PUSH
50714: LD_INT 18
50716: ST_TO_ADDR
// sRocket := false ;
50717: LD_ADDR_EXP 35
50721: PUSH
50722: LD_INT 0
50724: ST_TO_ADDR
// sSpeed := false ;
50725: LD_ADDR_EXP 34
50729: PUSH
50730: LD_INT 0
50732: ST_TO_ADDR
// sEngine := false ;
50733: LD_ADDR_EXP 36
50737: PUSH
50738: LD_INT 0
50740: ST_TO_ADDR
// sSpec := false ;
50741: LD_ADDR_EXP 33
50745: PUSH
50746: LD_INT 0
50748: ST_TO_ADDR
// sLevel := false ;
50749: LD_ADDR_EXP 37
50753: PUSH
50754: LD_INT 0
50756: ST_TO_ADDR
// sArmoury := false ;
50757: LD_ADDR_EXP 38
50761: PUSH
50762: LD_INT 0
50764: ST_TO_ADDR
// sRadar := false ;
50765: LD_ADDR_EXP 39
50769: PUSH
50770: LD_INT 0
50772: ST_TO_ADDR
// sBunker := false ;
50773: LD_ADDR_EXP 40
50777: PUSH
50778: LD_INT 0
50780: ST_TO_ADDR
// sHack := false ;
50781: LD_ADDR_EXP 41
50785: PUSH
50786: LD_INT 0
50788: ST_TO_ADDR
// sFire := false ;
50789: LD_ADDR_EXP 42
50793: PUSH
50794: LD_INT 0
50796: ST_TO_ADDR
// sRefresh := false ;
50797: LD_ADDR_EXP 43
50801: PUSH
50802: LD_INT 0
50804: ST_TO_ADDR
// sExp := false ;
50805: LD_ADDR_EXP 44
50809: PUSH
50810: LD_INT 0
50812: ST_TO_ADDR
// sDepot := false ;
50813: LD_ADDR_EXP 45
50817: PUSH
50818: LD_INT 0
50820: ST_TO_ADDR
// sFlag := false ;
50821: LD_ADDR_EXP 46
50825: PUSH
50826: LD_INT 0
50828: ST_TO_ADDR
// sKamikadze := false ;
50829: LD_ADDR_EXP 54
50833: PUSH
50834: LD_INT 0
50836: ST_TO_ADDR
// sTroll := false ;
50837: LD_ADDR_EXP 55
50841: PUSH
50842: LD_INT 0
50844: ST_TO_ADDR
// sSlow := false ;
50845: LD_ADDR_EXP 56
50849: PUSH
50850: LD_INT 0
50852: ST_TO_ADDR
// sLack := false ;
50853: LD_ADDR_EXP 57
50857: PUSH
50858: LD_INT 0
50860: ST_TO_ADDR
// sTank := false ;
50861: LD_ADDR_EXP 59
50865: PUSH
50866: LD_INT 0
50868: ST_TO_ADDR
// sRemote := false ;
50869: LD_ADDR_EXP 60
50873: PUSH
50874: LD_INT 0
50876: ST_TO_ADDR
// sPowell := false ;
50877: LD_ADDR_EXP 61
50881: PUSH
50882: LD_INT 0
50884: ST_TO_ADDR
// sTeleport := false ;
50885: LD_ADDR_EXP 64
50889: PUSH
50890: LD_INT 0
50892: ST_TO_ADDR
// sOilTower := false ;
50893: LD_ADDR_EXP 66
50897: PUSH
50898: LD_INT 0
50900: ST_TO_ADDR
// sShovel := false ;
50901: LD_ADDR_EXP 67
50905: PUSH
50906: LD_INT 0
50908: ST_TO_ADDR
// sSheik := false ;
50909: LD_ADDR_EXP 68
50913: PUSH
50914: LD_INT 0
50916: ST_TO_ADDR
// sEarthquake := false ;
50917: LD_ADDR_EXP 70
50921: PUSH
50922: LD_INT 0
50924: ST_TO_ADDR
// sAI := false ;
50925: LD_ADDR_EXP 71
50929: PUSH
50930: LD_INT 0
50932: ST_TO_ADDR
// sCargo := false ;
50933: LD_ADDR_EXP 74
50937: PUSH
50938: LD_INT 0
50940: ST_TO_ADDR
// sDLaser := false ;
50941: LD_ADDR_EXP 75
50945: PUSH
50946: LD_INT 0
50948: ST_TO_ADDR
// sExchange := false ;
50949: LD_ADDR_EXP 76
50953: PUSH
50954: LD_INT 0
50956: ST_TO_ADDR
// sFac := false ;
50957: LD_ADDR_EXP 77
50961: PUSH
50962: LD_INT 0
50964: ST_TO_ADDR
// sPower := false ;
50965: LD_ADDR_EXP 78
50969: PUSH
50970: LD_INT 0
50972: ST_TO_ADDR
// sRandom := false ;
50973: LD_ADDR_EXP 79
50977: PUSH
50978: LD_INT 0
50980: ST_TO_ADDR
// sShield := false ;
50981: LD_ADDR_EXP 80
50985: PUSH
50986: LD_INT 0
50988: ST_TO_ADDR
// sTime := false ;
50989: LD_ADDR_EXP 81
50993: PUSH
50994: LD_INT 0
50996: ST_TO_ADDR
// sTools := false ;
50997: LD_ADDR_EXP 82
51001: PUSH
51002: LD_INT 0
51004: ST_TO_ADDR
// sSold := false ;
51005: LD_ADDR_EXP 47
51009: PUSH
51010: LD_INT 0
51012: ST_TO_ADDR
// sDiff := false ;
51013: LD_ADDR_EXP 48
51017: PUSH
51018: LD_INT 0
51020: ST_TO_ADDR
// sFog := false ;
51021: LD_ADDR_EXP 51
51025: PUSH
51026: LD_INT 0
51028: ST_TO_ADDR
// sReset := false ;
51029: LD_ADDR_EXP 52
51033: PUSH
51034: LD_INT 0
51036: ST_TO_ADDR
// sSun := false ;
51037: LD_ADDR_EXP 53
51041: PUSH
51042: LD_INT 0
51044: ST_TO_ADDR
// sTiger := false ;
51045: LD_ADDR_EXP 49
51049: PUSH
51050: LD_INT 0
51052: ST_TO_ADDR
// sBomb := false ;
51053: LD_ADDR_EXP 50
51057: PUSH
51058: LD_INT 0
51060: ST_TO_ADDR
// sWound := false ;
51061: LD_ADDR_EXP 58
51065: PUSH
51066: LD_INT 0
51068: ST_TO_ADDR
// sBetray := false ;
51069: LD_ADDR_EXP 62
51073: PUSH
51074: LD_INT 0
51076: ST_TO_ADDR
// sContamin := false ;
51077: LD_ADDR_EXP 63
51081: PUSH
51082: LD_INT 0
51084: ST_TO_ADDR
// sOil := false ;
51085: LD_ADDR_EXP 65
51089: PUSH
51090: LD_INT 0
51092: ST_TO_ADDR
// sStu := false ;
51093: LD_ADDR_EXP 69
51097: PUSH
51098: LD_INT 0
51100: ST_TO_ADDR
// sBazooka := false ;
51101: LD_ADDR_EXP 72
51105: PUSH
51106: LD_INT 0
51108: ST_TO_ADDR
// sMortar := false ;
51109: LD_ADDR_EXP 73
51113: PUSH
51114: LD_INT 0
51116: ST_TO_ADDR
// sRanger := false ;
51117: LD_ADDR_EXP 83
51121: PUSH
51122: LD_INT 0
51124: ST_TO_ADDR
// sComputer := false ;
51125: LD_ADDR_EXP 84
51129: PUSH
51130: LD_INT 0
51132: ST_TO_ADDR
// s30 := false ;
51133: LD_ADDR_EXP 85
51137: PUSH
51138: LD_INT 0
51140: ST_TO_ADDR
// s60 := false ;
51141: LD_ADDR_EXP 86
51145: PUSH
51146: LD_INT 0
51148: ST_TO_ADDR
// end ;
51149: LD_VAR 0 1
51153: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51154: LD_INT 0
51156: PPUSH
51157: PPUSH
51158: PPUSH
51159: PPUSH
51160: PPUSH
51161: PPUSH
51162: PPUSH
// result := [ ] ;
51163: LD_ADDR_VAR 0 2
51167: PUSH
51168: EMPTY
51169: ST_TO_ADDR
// if campaign_id = 1 then
51170: LD_OWVAR 69
51174: PUSH
51175: LD_INT 1
51177: EQUAL
51178: IFFALSE 54344
// begin case mission_number of 1 :
51180: LD_OWVAR 70
51184: PUSH
51185: LD_INT 1
51187: DOUBLE
51188: EQUAL
51189: IFTRUE 51193
51191: GO 51269
51193: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51194: LD_ADDR_VAR 0 2
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 4
51204: PUSH
51205: LD_INT 11
51207: PUSH
51208: LD_INT 12
51210: PUSH
51211: LD_INT 15
51213: PUSH
51214: LD_INT 16
51216: PUSH
51217: LD_INT 22
51219: PUSH
51220: LD_INT 23
51222: PUSH
51223: LD_INT 26
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 101
51239: PUSH
51240: LD_INT 102
51242: PUSH
51243: LD_INT 106
51245: PUSH
51246: LD_INT 116
51248: PUSH
51249: LD_INT 117
51251: PUSH
51252: LD_INT 118
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: ST_TO_ADDR
51267: GO 54342
51269: LD_INT 2
51271: DOUBLE
51272: EQUAL
51273: IFTRUE 51277
51275: GO 51361
51277: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51278: LD_ADDR_VAR 0 2
51282: PUSH
51283: LD_INT 2
51285: PUSH
51286: LD_INT 4
51288: PUSH
51289: LD_INT 11
51291: PUSH
51292: LD_INT 12
51294: PUSH
51295: LD_INT 15
51297: PUSH
51298: LD_INT 16
51300: PUSH
51301: LD_INT 22
51303: PUSH
51304: LD_INT 23
51306: PUSH
51307: LD_INT 26
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 101
51323: PUSH
51324: LD_INT 102
51326: PUSH
51327: LD_INT 105
51329: PUSH
51330: LD_INT 106
51332: PUSH
51333: LD_INT 108
51335: PUSH
51336: LD_INT 116
51338: PUSH
51339: LD_INT 117
51341: PUSH
51342: LD_INT 118
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: ST_TO_ADDR
51359: GO 54342
51361: LD_INT 3
51363: DOUBLE
51364: EQUAL
51365: IFTRUE 51369
51367: GO 51457
51369: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
51370: LD_ADDR_VAR 0 2
51374: PUSH
51375: LD_INT 2
51377: PUSH
51378: LD_INT 4
51380: PUSH
51381: LD_INT 5
51383: PUSH
51384: LD_INT 11
51386: PUSH
51387: LD_INT 12
51389: PUSH
51390: LD_INT 15
51392: PUSH
51393: LD_INT 16
51395: PUSH
51396: LD_INT 22
51398: PUSH
51399: LD_INT 26
51401: PUSH
51402: LD_INT 36
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 101
51419: PUSH
51420: LD_INT 102
51422: PUSH
51423: LD_INT 105
51425: PUSH
51426: LD_INT 106
51428: PUSH
51429: LD_INT 108
51431: PUSH
51432: LD_INT 116
51434: PUSH
51435: LD_INT 117
51437: PUSH
51438: LD_INT 118
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: ST_TO_ADDR
51455: GO 54342
51457: LD_INT 4
51459: DOUBLE
51460: EQUAL
51461: IFTRUE 51465
51463: GO 51561
51465: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51466: LD_ADDR_VAR 0 2
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: LD_INT 4
51476: PUSH
51477: LD_INT 5
51479: PUSH
51480: LD_INT 8
51482: PUSH
51483: LD_INT 11
51485: PUSH
51486: LD_INT 12
51488: PUSH
51489: LD_INT 15
51491: PUSH
51492: LD_INT 16
51494: PUSH
51495: LD_INT 22
51497: PUSH
51498: LD_INT 23
51500: PUSH
51501: LD_INT 26
51503: PUSH
51504: LD_INT 36
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 101
51523: PUSH
51524: LD_INT 102
51526: PUSH
51527: LD_INT 105
51529: PUSH
51530: LD_INT 106
51532: PUSH
51533: LD_INT 108
51535: PUSH
51536: LD_INT 116
51538: PUSH
51539: LD_INT 117
51541: PUSH
51542: LD_INT 118
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: ST_TO_ADDR
51559: GO 54342
51561: LD_INT 5
51563: DOUBLE
51564: EQUAL
51565: IFTRUE 51569
51567: GO 51681
51569: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51570: LD_ADDR_VAR 0 2
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 4
51580: PUSH
51581: LD_INT 5
51583: PUSH
51584: LD_INT 6
51586: PUSH
51587: LD_INT 8
51589: PUSH
51590: LD_INT 11
51592: PUSH
51593: LD_INT 12
51595: PUSH
51596: LD_INT 15
51598: PUSH
51599: LD_INT 16
51601: PUSH
51602: LD_INT 22
51604: PUSH
51605: LD_INT 23
51607: PUSH
51608: LD_INT 25
51610: PUSH
51611: LD_INT 26
51613: PUSH
51614: LD_INT 36
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 101
51635: PUSH
51636: LD_INT 102
51638: PUSH
51639: LD_INT 105
51641: PUSH
51642: LD_INT 106
51644: PUSH
51645: LD_INT 108
51647: PUSH
51648: LD_INT 109
51650: PUSH
51651: LD_INT 112
51653: PUSH
51654: LD_INT 116
51656: PUSH
51657: LD_INT 117
51659: PUSH
51660: LD_INT 118
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: ST_TO_ADDR
51679: GO 54342
51681: LD_INT 6
51683: DOUBLE
51684: EQUAL
51685: IFTRUE 51689
51687: GO 51821
51689: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
51690: LD_ADDR_VAR 0 2
51694: PUSH
51695: LD_INT 2
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 5
51703: PUSH
51704: LD_INT 6
51706: PUSH
51707: LD_INT 8
51709: PUSH
51710: LD_INT 11
51712: PUSH
51713: LD_INT 12
51715: PUSH
51716: LD_INT 15
51718: PUSH
51719: LD_INT 16
51721: PUSH
51722: LD_INT 20
51724: PUSH
51725: LD_INT 21
51727: PUSH
51728: LD_INT 22
51730: PUSH
51731: LD_INT 23
51733: PUSH
51734: LD_INT 25
51736: PUSH
51737: LD_INT 26
51739: PUSH
51740: LD_INT 30
51742: PUSH
51743: LD_INT 31
51745: PUSH
51746: LD_INT 32
51748: PUSH
51749: LD_INT 36
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 101
51775: PUSH
51776: LD_INT 102
51778: PUSH
51779: LD_INT 105
51781: PUSH
51782: LD_INT 106
51784: PUSH
51785: LD_INT 108
51787: PUSH
51788: LD_INT 109
51790: PUSH
51791: LD_INT 112
51793: PUSH
51794: LD_INT 116
51796: PUSH
51797: LD_INT 117
51799: PUSH
51800: LD_INT 118
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: ST_TO_ADDR
51819: GO 54342
51821: LD_INT 7
51823: DOUBLE
51824: EQUAL
51825: IFTRUE 51829
51827: GO 51941
51829: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51830: LD_ADDR_VAR 0 2
51834: PUSH
51835: LD_INT 2
51837: PUSH
51838: LD_INT 4
51840: PUSH
51841: LD_INT 5
51843: PUSH
51844: LD_INT 7
51846: PUSH
51847: LD_INT 11
51849: PUSH
51850: LD_INT 12
51852: PUSH
51853: LD_INT 15
51855: PUSH
51856: LD_INT 16
51858: PUSH
51859: LD_INT 20
51861: PUSH
51862: LD_INT 21
51864: PUSH
51865: LD_INT 22
51867: PUSH
51868: LD_INT 23
51870: PUSH
51871: LD_INT 25
51873: PUSH
51874: LD_INT 26
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 101
51895: PUSH
51896: LD_INT 102
51898: PUSH
51899: LD_INT 103
51901: PUSH
51902: LD_INT 105
51904: PUSH
51905: LD_INT 106
51907: PUSH
51908: LD_INT 108
51910: PUSH
51911: LD_INT 112
51913: PUSH
51914: LD_INT 116
51916: PUSH
51917: LD_INT 117
51919: PUSH
51920: LD_INT 118
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: PUSH
51935: EMPTY
51936: LIST
51937: LIST
51938: ST_TO_ADDR
51939: GO 54342
51941: LD_INT 8
51943: DOUBLE
51944: EQUAL
51945: IFTRUE 51949
51947: GO 52089
51949: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51950: LD_ADDR_VAR 0 2
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 4
51960: PUSH
51961: LD_INT 5
51963: PUSH
51964: LD_INT 6
51966: PUSH
51967: LD_INT 7
51969: PUSH
51970: LD_INT 8
51972: PUSH
51973: LD_INT 11
51975: PUSH
51976: LD_INT 12
51978: PUSH
51979: LD_INT 15
51981: PUSH
51982: LD_INT 16
51984: PUSH
51985: LD_INT 20
51987: PUSH
51988: LD_INT 21
51990: PUSH
51991: LD_INT 22
51993: PUSH
51994: LD_INT 23
51996: PUSH
51997: LD_INT 25
51999: PUSH
52000: LD_INT 26
52002: PUSH
52003: LD_INT 30
52005: PUSH
52006: LD_INT 31
52008: PUSH
52009: LD_INT 32
52011: PUSH
52012: LD_INT 36
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 101
52039: PUSH
52040: LD_INT 102
52042: PUSH
52043: LD_INT 103
52045: PUSH
52046: LD_INT 105
52048: PUSH
52049: LD_INT 106
52051: PUSH
52052: LD_INT 108
52054: PUSH
52055: LD_INT 109
52057: PUSH
52058: LD_INT 112
52060: PUSH
52061: LD_INT 116
52063: PUSH
52064: LD_INT 117
52066: PUSH
52067: LD_INT 118
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: ST_TO_ADDR
52087: GO 54342
52089: LD_INT 9
52091: DOUBLE
52092: EQUAL
52093: IFTRUE 52097
52095: GO 52245
52097: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52098: LD_ADDR_VAR 0 2
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: LD_INT 5
52111: PUSH
52112: LD_INT 6
52114: PUSH
52115: LD_INT 7
52117: PUSH
52118: LD_INT 8
52120: PUSH
52121: LD_INT 11
52123: PUSH
52124: LD_INT 12
52126: PUSH
52127: LD_INT 15
52129: PUSH
52130: LD_INT 16
52132: PUSH
52133: LD_INT 20
52135: PUSH
52136: LD_INT 21
52138: PUSH
52139: LD_INT 22
52141: PUSH
52142: LD_INT 23
52144: PUSH
52145: LD_INT 25
52147: PUSH
52148: LD_INT 26
52150: PUSH
52151: LD_INT 28
52153: PUSH
52154: LD_INT 30
52156: PUSH
52157: LD_INT 31
52159: PUSH
52160: LD_INT 32
52162: PUSH
52163: LD_INT 36
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 101
52191: PUSH
52192: LD_INT 102
52194: PUSH
52195: LD_INT 103
52197: PUSH
52198: LD_INT 105
52200: PUSH
52201: LD_INT 106
52203: PUSH
52204: LD_INT 108
52206: PUSH
52207: LD_INT 109
52209: PUSH
52210: LD_INT 112
52212: PUSH
52213: LD_INT 114
52215: PUSH
52216: LD_INT 116
52218: PUSH
52219: LD_INT 117
52221: PUSH
52222: LD_INT 118
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: ST_TO_ADDR
52243: GO 54342
52245: LD_INT 10
52247: DOUBLE
52248: EQUAL
52249: IFTRUE 52253
52251: GO 52449
52253: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52254: LD_ADDR_VAR 0 2
52258: PUSH
52259: LD_INT 2
52261: PUSH
52262: LD_INT 4
52264: PUSH
52265: LD_INT 5
52267: PUSH
52268: LD_INT 6
52270: PUSH
52271: LD_INT 7
52273: PUSH
52274: LD_INT 8
52276: PUSH
52277: LD_INT 9
52279: PUSH
52280: LD_INT 10
52282: PUSH
52283: LD_INT 11
52285: PUSH
52286: LD_INT 12
52288: PUSH
52289: LD_INT 13
52291: PUSH
52292: LD_INT 14
52294: PUSH
52295: LD_INT 15
52297: PUSH
52298: LD_INT 16
52300: PUSH
52301: LD_INT 17
52303: PUSH
52304: LD_INT 18
52306: PUSH
52307: LD_INT 19
52309: PUSH
52310: LD_INT 20
52312: PUSH
52313: LD_INT 21
52315: PUSH
52316: LD_INT 22
52318: PUSH
52319: LD_INT 23
52321: PUSH
52322: LD_INT 24
52324: PUSH
52325: LD_INT 25
52327: PUSH
52328: LD_INT 26
52330: PUSH
52331: LD_INT 28
52333: PUSH
52334: LD_INT 30
52336: PUSH
52337: LD_INT 31
52339: PUSH
52340: LD_INT 32
52342: PUSH
52343: LD_INT 36
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: LIST
52373: LIST
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 101
52379: PUSH
52380: LD_INT 102
52382: PUSH
52383: LD_INT 103
52385: PUSH
52386: LD_INT 104
52388: PUSH
52389: LD_INT 105
52391: PUSH
52392: LD_INT 106
52394: PUSH
52395: LD_INT 107
52397: PUSH
52398: LD_INT 108
52400: PUSH
52401: LD_INT 109
52403: PUSH
52404: LD_INT 110
52406: PUSH
52407: LD_INT 111
52409: PUSH
52410: LD_INT 112
52412: PUSH
52413: LD_INT 114
52415: PUSH
52416: LD_INT 116
52418: PUSH
52419: LD_INT 117
52421: PUSH
52422: LD_INT 118
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: ST_TO_ADDR
52447: GO 54342
52449: LD_INT 11
52451: DOUBLE
52452: EQUAL
52453: IFTRUE 52457
52455: GO 52661
52457: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52458: LD_ADDR_VAR 0 2
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 4
52471: PUSH
52472: LD_INT 5
52474: PUSH
52475: LD_INT 6
52477: PUSH
52478: LD_INT 7
52480: PUSH
52481: LD_INT 8
52483: PUSH
52484: LD_INT 9
52486: PUSH
52487: LD_INT 10
52489: PUSH
52490: LD_INT 11
52492: PUSH
52493: LD_INT 12
52495: PUSH
52496: LD_INT 13
52498: PUSH
52499: LD_INT 14
52501: PUSH
52502: LD_INT 15
52504: PUSH
52505: LD_INT 16
52507: PUSH
52508: LD_INT 17
52510: PUSH
52511: LD_INT 18
52513: PUSH
52514: LD_INT 19
52516: PUSH
52517: LD_INT 20
52519: PUSH
52520: LD_INT 21
52522: PUSH
52523: LD_INT 22
52525: PUSH
52526: LD_INT 23
52528: PUSH
52529: LD_INT 24
52531: PUSH
52532: LD_INT 25
52534: PUSH
52535: LD_INT 26
52537: PUSH
52538: LD_INT 28
52540: PUSH
52541: LD_INT 30
52543: PUSH
52544: LD_INT 31
52546: PUSH
52547: LD_INT 32
52549: PUSH
52550: LD_INT 34
52552: PUSH
52553: LD_INT 36
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 101
52591: PUSH
52592: LD_INT 102
52594: PUSH
52595: LD_INT 103
52597: PUSH
52598: LD_INT 104
52600: PUSH
52601: LD_INT 105
52603: PUSH
52604: LD_INT 106
52606: PUSH
52607: LD_INT 107
52609: PUSH
52610: LD_INT 108
52612: PUSH
52613: LD_INT 109
52615: PUSH
52616: LD_INT 110
52618: PUSH
52619: LD_INT 111
52621: PUSH
52622: LD_INT 112
52624: PUSH
52625: LD_INT 114
52627: PUSH
52628: LD_INT 116
52630: PUSH
52631: LD_INT 117
52633: PUSH
52634: LD_INT 118
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: ST_TO_ADDR
52659: GO 54342
52661: LD_INT 12
52663: DOUBLE
52664: EQUAL
52665: IFTRUE 52669
52667: GO 52889
52669: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
52670: LD_ADDR_VAR 0 2
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 4
52686: PUSH
52687: LD_INT 5
52689: PUSH
52690: LD_INT 6
52692: PUSH
52693: LD_INT 7
52695: PUSH
52696: LD_INT 8
52698: PUSH
52699: LD_INT 9
52701: PUSH
52702: LD_INT 10
52704: PUSH
52705: LD_INT 11
52707: PUSH
52708: LD_INT 12
52710: PUSH
52711: LD_INT 13
52713: PUSH
52714: LD_INT 14
52716: PUSH
52717: LD_INT 15
52719: PUSH
52720: LD_INT 16
52722: PUSH
52723: LD_INT 17
52725: PUSH
52726: LD_INT 18
52728: PUSH
52729: LD_INT 19
52731: PUSH
52732: LD_INT 20
52734: PUSH
52735: LD_INT 21
52737: PUSH
52738: LD_INT 22
52740: PUSH
52741: LD_INT 23
52743: PUSH
52744: LD_INT 24
52746: PUSH
52747: LD_INT 25
52749: PUSH
52750: LD_INT 26
52752: PUSH
52753: LD_INT 27
52755: PUSH
52756: LD_INT 28
52758: PUSH
52759: LD_INT 30
52761: PUSH
52762: LD_INT 31
52764: PUSH
52765: LD_INT 32
52767: PUSH
52768: LD_INT 33
52770: PUSH
52771: LD_INT 34
52773: PUSH
52774: LD_INT 36
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 101
52815: PUSH
52816: LD_INT 102
52818: PUSH
52819: LD_INT 103
52821: PUSH
52822: LD_INT 104
52824: PUSH
52825: LD_INT 105
52827: PUSH
52828: LD_INT 106
52830: PUSH
52831: LD_INT 107
52833: PUSH
52834: LD_INT 108
52836: PUSH
52837: LD_INT 109
52839: PUSH
52840: LD_INT 110
52842: PUSH
52843: LD_INT 111
52845: PUSH
52846: LD_INT 112
52848: PUSH
52849: LD_INT 113
52851: PUSH
52852: LD_INT 114
52854: PUSH
52855: LD_INT 116
52857: PUSH
52858: LD_INT 117
52860: PUSH
52861: LD_INT 118
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: ST_TO_ADDR
52887: GO 54342
52889: LD_INT 13
52891: DOUBLE
52892: EQUAL
52893: IFTRUE 52897
52895: GO 53105
52897: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52898: LD_ADDR_VAR 0 2
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 3
52911: PUSH
52912: LD_INT 4
52914: PUSH
52915: LD_INT 5
52917: PUSH
52918: LD_INT 8
52920: PUSH
52921: LD_INT 9
52923: PUSH
52924: LD_INT 10
52926: PUSH
52927: LD_INT 11
52929: PUSH
52930: LD_INT 12
52932: PUSH
52933: LD_INT 14
52935: PUSH
52936: LD_INT 15
52938: PUSH
52939: LD_INT 16
52941: PUSH
52942: LD_INT 17
52944: PUSH
52945: LD_INT 18
52947: PUSH
52948: LD_INT 19
52950: PUSH
52951: LD_INT 20
52953: PUSH
52954: LD_INT 21
52956: PUSH
52957: LD_INT 22
52959: PUSH
52960: LD_INT 23
52962: PUSH
52963: LD_INT 24
52965: PUSH
52966: LD_INT 25
52968: PUSH
52969: LD_INT 26
52971: PUSH
52972: LD_INT 27
52974: PUSH
52975: LD_INT 28
52977: PUSH
52978: LD_INT 30
52980: PUSH
52981: LD_INT 31
52983: PUSH
52984: LD_INT 32
52986: PUSH
52987: LD_INT 33
52989: PUSH
52990: LD_INT 34
52992: PUSH
52993: LD_INT 36
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 101
53031: PUSH
53032: LD_INT 102
53034: PUSH
53035: LD_INT 103
53037: PUSH
53038: LD_INT 104
53040: PUSH
53041: LD_INT 105
53043: PUSH
53044: LD_INT 106
53046: PUSH
53047: LD_INT 107
53049: PUSH
53050: LD_INT 108
53052: PUSH
53053: LD_INT 109
53055: PUSH
53056: LD_INT 110
53058: PUSH
53059: LD_INT 111
53061: PUSH
53062: LD_INT 112
53064: PUSH
53065: LD_INT 113
53067: PUSH
53068: LD_INT 114
53070: PUSH
53071: LD_INT 116
53073: PUSH
53074: LD_INT 117
53076: PUSH
53077: LD_INT 118
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: ST_TO_ADDR
53103: GO 54342
53105: LD_INT 14
53107: DOUBLE
53108: EQUAL
53109: IFTRUE 53113
53111: GO 53337
53113: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53114: LD_ADDR_VAR 0 2
53118: PUSH
53119: LD_INT 1
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 4
53130: PUSH
53131: LD_INT 5
53133: PUSH
53134: LD_INT 6
53136: PUSH
53137: LD_INT 7
53139: PUSH
53140: LD_INT 8
53142: PUSH
53143: LD_INT 9
53145: PUSH
53146: LD_INT 10
53148: PUSH
53149: LD_INT 11
53151: PUSH
53152: LD_INT 12
53154: PUSH
53155: LD_INT 13
53157: PUSH
53158: LD_INT 14
53160: PUSH
53161: LD_INT 15
53163: PUSH
53164: LD_INT 16
53166: PUSH
53167: LD_INT 17
53169: PUSH
53170: LD_INT 18
53172: PUSH
53173: LD_INT 19
53175: PUSH
53176: LD_INT 20
53178: PUSH
53179: LD_INT 21
53181: PUSH
53182: LD_INT 22
53184: PUSH
53185: LD_INT 23
53187: PUSH
53188: LD_INT 24
53190: PUSH
53191: LD_INT 25
53193: PUSH
53194: LD_INT 26
53196: PUSH
53197: LD_INT 27
53199: PUSH
53200: LD_INT 28
53202: PUSH
53203: LD_INT 29
53205: PUSH
53206: LD_INT 30
53208: PUSH
53209: LD_INT 31
53211: PUSH
53212: LD_INT 32
53214: PUSH
53215: LD_INT 33
53217: PUSH
53218: LD_INT 34
53220: PUSH
53221: LD_INT 36
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 101
53263: PUSH
53264: LD_INT 102
53266: PUSH
53267: LD_INT 103
53269: PUSH
53270: LD_INT 104
53272: PUSH
53273: LD_INT 105
53275: PUSH
53276: LD_INT 106
53278: PUSH
53279: LD_INT 107
53281: PUSH
53282: LD_INT 108
53284: PUSH
53285: LD_INT 109
53287: PUSH
53288: LD_INT 110
53290: PUSH
53291: LD_INT 111
53293: PUSH
53294: LD_INT 112
53296: PUSH
53297: LD_INT 113
53299: PUSH
53300: LD_INT 114
53302: PUSH
53303: LD_INT 116
53305: PUSH
53306: LD_INT 117
53308: PUSH
53309: LD_INT 118
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: ST_TO_ADDR
53335: GO 54342
53337: LD_INT 15
53339: DOUBLE
53340: EQUAL
53341: IFTRUE 53345
53343: GO 53569
53345: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
53346: LD_ADDR_VAR 0 2
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: LD_INT 4
53362: PUSH
53363: LD_INT 5
53365: PUSH
53366: LD_INT 6
53368: PUSH
53369: LD_INT 7
53371: PUSH
53372: LD_INT 8
53374: PUSH
53375: LD_INT 9
53377: PUSH
53378: LD_INT 10
53380: PUSH
53381: LD_INT 11
53383: PUSH
53384: LD_INT 12
53386: PUSH
53387: LD_INT 13
53389: PUSH
53390: LD_INT 14
53392: PUSH
53393: LD_INT 15
53395: PUSH
53396: LD_INT 16
53398: PUSH
53399: LD_INT 17
53401: PUSH
53402: LD_INT 18
53404: PUSH
53405: LD_INT 19
53407: PUSH
53408: LD_INT 20
53410: PUSH
53411: LD_INT 21
53413: PUSH
53414: LD_INT 22
53416: PUSH
53417: LD_INT 23
53419: PUSH
53420: LD_INT 24
53422: PUSH
53423: LD_INT 25
53425: PUSH
53426: LD_INT 26
53428: PUSH
53429: LD_INT 27
53431: PUSH
53432: LD_INT 28
53434: PUSH
53435: LD_INT 29
53437: PUSH
53438: LD_INT 30
53440: PUSH
53441: LD_INT 31
53443: PUSH
53444: LD_INT 32
53446: PUSH
53447: LD_INT 33
53449: PUSH
53450: LD_INT 34
53452: PUSH
53453: LD_INT 36
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 101
53495: PUSH
53496: LD_INT 102
53498: PUSH
53499: LD_INT 103
53501: PUSH
53502: LD_INT 104
53504: PUSH
53505: LD_INT 105
53507: PUSH
53508: LD_INT 106
53510: PUSH
53511: LD_INT 107
53513: PUSH
53514: LD_INT 108
53516: PUSH
53517: LD_INT 109
53519: PUSH
53520: LD_INT 110
53522: PUSH
53523: LD_INT 111
53525: PUSH
53526: LD_INT 112
53528: PUSH
53529: LD_INT 113
53531: PUSH
53532: LD_INT 114
53534: PUSH
53535: LD_INT 116
53537: PUSH
53538: LD_INT 117
53540: PUSH
53541: LD_INT 118
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: ST_TO_ADDR
53567: GO 54342
53569: LD_INT 16
53571: DOUBLE
53572: EQUAL
53573: IFTRUE 53577
53575: GO 53713
53577: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53578: LD_ADDR_VAR 0 2
53582: PUSH
53583: LD_INT 2
53585: PUSH
53586: LD_INT 4
53588: PUSH
53589: LD_INT 5
53591: PUSH
53592: LD_INT 7
53594: PUSH
53595: LD_INT 11
53597: PUSH
53598: LD_INT 12
53600: PUSH
53601: LD_INT 15
53603: PUSH
53604: LD_INT 16
53606: PUSH
53607: LD_INT 20
53609: PUSH
53610: LD_INT 21
53612: PUSH
53613: LD_INT 22
53615: PUSH
53616: LD_INT 23
53618: PUSH
53619: LD_INT 25
53621: PUSH
53622: LD_INT 26
53624: PUSH
53625: LD_INT 30
53627: PUSH
53628: LD_INT 31
53630: PUSH
53631: LD_INT 32
53633: PUSH
53634: LD_INT 33
53636: PUSH
53637: LD_INT 34
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 101
53663: PUSH
53664: LD_INT 102
53666: PUSH
53667: LD_INT 103
53669: PUSH
53670: LD_INT 106
53672: PUSH
53673: LD_INT 108
53675: PUSH
53676: LD_INT 112
53678: PUSH
53679: LD_INT 113
53681: PUSH
53682: LD_INT 114
53684: PUSH
53685: LD_INT 116
53687: PUSH
53688: LD_INT 117
53690: PUSH
53691: LD_INT 118
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: ST_TO_ADDR
53711: GO 54342
53713: LD_INT 17
53715: DOUBLE
53716: EQUAL
53717: IFTRUE 53721
53719: GO 53945
53721: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53722: LD_ADDR_VAR 0 2
53726: PUSH
53727: LD_INT 1
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 3
53735: PUSH
53736: LD_INT 4
53738: PUSH
53739: LD_INT 5
53741: PUSH
53742: LD_INT 6
53744: PUSH
53745: LD_INT 7
53747: PUSH
53748: LD_INT 8
53750: PUSH
53751: LD_INT 9
53753: PUSH
53754: LD_INT 10
53756: PUSH
53757: LD_INT 11
53759: PUSH
53760: LD_INT 12
53762: PUSH
53763: LD_INT 13
53765: PUSH
53766: LD_INT 14
53768: PUSH
53769: LD_INT 15
53771: PUSH
53772: LD_INT 16
53774: PUSH
53775: LD_INT 17
53777: PUSH
53778: LD_INT 18
53780: PUSH
53781: LD_INT 19
53783: PUSH
53784: LD_INT 20
53786: PUSH
53787: LD_INT 21
53789: PUSH
53790: LD_INT 22
53792: PUSH
53793: LD_INT 23
53795: PUSH
53796: LD_INT 24
53798: PUSH
53799: LD_INT 25
53801: PUSH
53802: LD_INT 26
53804: PUSH
53805: LD_INT 27
53807: PUSH
53808: LD_INT 28
53810: PUSH
53811: LD_INT 29
53813: PUSH
53814: LD_INT 30
53816: PUSH
53817: LD_INT 31
53819: PUSH
53820: LD_INT 32
53822: PUSH
53823: LD_INT 33
53825: PUSH
53826: LD_INT 34
53828: PUSH
53829: LD_INT 36
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 101
53871: PUSH
53872: LD_INT 102
53874: PUSH
53875: LD_INT 103
53877: PUSH
53878: LD_INT 104
53880: PUSH
53881: LD_INT 105
53883: PUSH
53884: LD_INT 106
53886: PUSH
53887: LD_INT 107
53889: PUSH
53890: LD_INT 108
53892: PUSH
53893: LD_INT 109
53895: PUSH
53896: LD_INT 110
53898: PUSH
53899: LD_INT 111
53901: PUSH
53902: LD_INT 112
53904: PUSH
53905: LD_INT 113
53907: PUSH
53908: LD_INT 114
53910: PUSH
53911: LD_INT 116
53913: PUSH
53914: LD_INT 117
53916: PUSH
53917: LD_INT 118
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: LIST
53933: LIST
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: ST_TO_ADDR
53943: GO 54342
53945: LD_INT 18
53947: DOUBLE
53948: EQUAL
53949: IFTRUE 53953
53951: GO 54101
53953: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53954: LD_ADDR_VAR 0 2
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: LD_INT 4
53964: PUSH
53965: LD_INT 5
53967: PUSH
53968: LD_INT 7
53970: PUSH
53971: LD_INT 11
53973: PUSH
53974: LD_INT 12
53976: PUSH
53977: LD_INT 15
53979: PUSH
53980: LD_INT 16
53982: PUSH
53983: LD_INT 20
53985: PUSH
53986: LD_INT 21
53988: PUSH
53989: LD_INT 22
53991: PUSH
53992: LD_INT 23
53994: PUSH
53995: LD_INT 25
53997: PUSH
53998: LD_INT 26
54000: PUSH
54001: LD_INT 30
54003: PUSH
54004: LD_INT 31
54006: PUSH
54007: LD_INT 32
54009: PUSH
54010: LD_INT 33
54012: PUSH
54013: LD_INT 34
54015: PUSH
54016: LD_INT 35
54018: PUSH
54019: LD_INT 36
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 101
54047: PUSH
54048: LD_INT 102
54050: PUSH
54051: LD_INT 103
54053: PUSH
54054: LD_INT 106
54056: PUSH
54057: LD_INT 108
54059: PUSH
54060: LD_INT 112
54062: PUSH
54063: LD_INT 113
54065: PUSH
54066: LD_INT 114
54068: PUSH
54069: LD_INT 115
54071: PUSH
54072: LD_INT 116
54074: PUSH
54075: LD_INT 117
54077: PUSH
54078: LD_INT 118
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: ST_TO_ADDR
54099: GO 54342
54101: LD_INT 19
54103: DOUBLE
54104: EQUAL
54105: IFTRUE 54109
54107: GO 54341
54109: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54110: LD_ADDR_VAR 0 2
54114: PUSH
54115: LD_INT 1
54117: PUSH
54118: LD_INT 2
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: LD_INT 5
54129: PUSH
54130: LD_INT 6
54132: PUSH
54133: LD_INT 7
54135: PUSH
54136: LD_INT 8
54138: PUSH
54139: LD_INT 9
54141: PUSH
54142: LD_INT 10
54144: PUSH
54145: LD_INT 11
54147: PUSH
54148: LD_INT 12
54150: PUSH
54151: LD_INT 13
54153: PUSH
54154: LD_INT 14
54156: PUSH
54157: LD_INT 15
54159: PUSH
54160: LD_INT 16
54162: PUSH
54163: LD_INT 17
54165: PUSH
54166: LD_INT 18
54168: PUSH
54169: LD_INT 19
54171: PUSH
54172: LD_INT 20
54174: PUSH
54175: LD_INT 21
54177: PUSH
54178: LD_INT 22
54180: PUSH
54181: LD_INT 23
54183: PUSH
54184: LD_INT 24
54186: PUSH
54187: LD_INT 25
54189: PUSH
54190: LD_INT 26
54192: PUSH
54193: LD_INT 27
54195: PUSH
54196: LD_INT 28
54198: PUSH
54199: LD_INT 29
54201: PUSH
54202: LD_INT 30
54204: PUSH
54205: LD_INT 31
54207: PUSH
54208: LD_INT 32
54210: PUSH
54211: LD_INT 33
54213: PUSH
54214: LD_INT 34
54216: PUSH
54217: LD_INT 35
54219: PUSH
54220: LD_INT 36
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 101
54263: PUSH
54264: LD_INT 102
54266: PUSH
54267: LD_INT 103
54269: PUSH
54270: LD_INT 104
54272: PUSH
54273: LD_INT 105
54275: PUSH
54276: LD_INT 106
54278: PUSH
54279: LD_INT 107
54281: PUSH
54282: LD_INT 108
54284: PUSH
54285: LD_INT 109
54287: PUSH
54288: LD_INT 110
54290: PUSH
54291: LD_INT 111
54293: PUSH
54294: LD_INT 112
54296: PUSH
54297: LD_INT 113
54299: PUSH
54300: LD_INT 114
54302: PUSH
54303: LD_INT 115
54305: PUSH
54306: LD_INT 116
54308: PUSH
54309: LD_INT 117
54311: PUSH
54312: LD_INT 118
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: ST_TO_ADDR
54339: GO 54342
54341: POP
// end else
54342: GO 54573
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
54344: LD_ADDR_VAR 0 2
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: LD_INT 4
54360: PUSH
54361: LD_INT 5
54363: PUSH
54364: LD_INT 6
54366: PUSH
54367: LD_INT 7
54369: PUSH
54370: LD_INT 8
54372: PUSH
54373: LD_INT 9
54375: PUSH
54376: LD_INT 10
54378: PUSH
54379: LD_INT 11
54381: PUSH
54382: LD_INT 12
54384: PUSH
54385: LD_INT 13
54387: PUSH
54388: LD_INT 14
54390: PUSH
54391: LD_INT 15
54393: PUSH
54394: LD_INT 16
54396: PUSH
54397: LD_INT 17
54399: PUSH
54400: LD_INT 18
54402: PUSH
54403: LD_INT 19
54405: PUSH
54406: LD_INT 20
54408: PUSH
54409: LD_INT 21
54411: PUSH
54412: LD_INT 22
54414: PUSH
54415: LD_INT 23
54417: PUSH
54418: LD_INT 24
54420: PUSH
54421: LD_INT 25
54423: PUSH
54424: LD_INT 26
54426: PUSH
54427: LD_INT 27
54429: PUSH
54430: LD_INT 28
54432: PUSH
54433: LD_INT 29
54435: PUSH
54436: LD_INT 30
54438: PUSH
54439: LD_INT 31
54441: PUSH
54442: LD_INT 32
54444: PUSH
54445: LD_INT 33
54447: PUSH
54448: LD_INT 34
54450: PUSH
54451: LD_INT 35
54453: PUSH
54454: LD_INT 36
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 101
54497: PUSH
54498: LD_INT 102
54500: PUSH
54501: LD_INT 103
54503: PUSH
54504: LD_INT 104
54506: PUSH
54507: LD_INT 105
54509: PUSH
54510: LD_INT 106
54512: PUSH
54513: LD_INT 107
54515: PUSH
54516: LD_INT 108
54518: PUSH
54519: LD_INT 109
54521: PUSH
54522: LD_INT 110
54524: PUSH
54525: LD_INT 111
54527: PUSH
54528: LD_INT 112
54530: PUSH
54531: LD_INT 113
54533: PUSH
54534: LD_INT 114
54536: PUSH
54537: LD_INT 115
54539: PUSH
54540: LD_INT 116
54542: PUSH
54543: LD_INT 117
54545: PUSH
54546: LD_INT 118
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: ST_TO_ADDR
// if result then
54573: LD_VAR 0 2
54577: IFFALSE 55363
// begin normal :=  ;
54579: LD_ADDR_VAR 0 5
54583: PUSH
54584: LD_STRING 
54586: ST_TO_ADDR
// hardcore :=  ;
54587: LD_ADDR_VAR 0 6
54591: PUSH
54592: LD_STRING 
54594: ST_TO_ADDR
// active :=  ;
54595: LD_ADDR_VAR 0 7
54599: PUSH
54600: LD_STRING 
54602: ST_TO_ADDR
// for i = 1 to normalCounter do
54603: LD_ADDR_VAR 0 8
54607: PUSH
54608: DOUBLE
54609: LD_INT 1
54611: DEC
54612: ST_TO_ADDR
54613: LD_EXP 31
54617: PUSH
54618: FOR_TO
54619: IFFALSE 54720
// begin tmp := 0 ;
54621: LD_ADDR_VAR 0 3
54625: PUSH
54626: LD_STRING 0
54628: ST_TO_ADDR
// if result [ 1 ] then
54629: LD_VAR 0 2
54633: PUSH
54634: LD_INT 1
54636: ARRAY
54637: IFFALSE 54702
// if result [ 1 ] [ 1 ] = i then
54639: LD_VAR 0 2
54643: PUSH
54644: LD_INT 1
54646: ARRAY
54647: PUSH
54648: LD_INT 1
54650: ARRAY
54651: PUSH
54652: LD_VAR 0 8
54656: EQUAL
54657: IFFALSE 54702
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
54659: LD_ADDR_VAR 0 2
54663: PUSH
54664: LD_VAR 0 2
54668: PPUSH
54669: LD_INT 1
54671: PPUSH
54672: LD_VAR 0 2
54676: PUSH
54677: LD_INT 1
54679: ARRAY
54680: PPUSH
54681: LD_INT 1
54683: PPUSH
54684: CALL_OW 3
54688: PPUSH
54689: CALL_OW 1
54693: ST_TO_ADDR
// tmp := 1 ;
54694: LD_ADDR_VAR 0 3
54698: PUSH
54699: LD_STRING 1
54701: ST_TO_ADDR
// end ; normal := normal & tmp ;
54702: LD_ADDR_VAR 0 5
54706: PUSH
54707: LD_VAR 0 5
54711: PUSH
54712: LD_VAR 0 3
54716: STR
54717: ST_TO_ADDR
// end ;
54718: GO 54618
54720: POP
54721: POP
// for i = 1 to hardcoreCounter do
54722: LD_ADDR_VAR 0 8
54726: PUSH
54727: DOUBLE
54728: LD_INT 1
54730: DEC
54731: ST_TO_ADDR
54732: LD_EXP 32
54736: PUSH
54737: FOR_TO
54738: IFFALSE 54843
// begin tmp := 0 ;
54740: LD_ADDR_VAR 0 3
54744: PUSH
54745: LD_STRING 0
54747: ST_TO_ADDR
// if result [ 2 ] then
54748: LD_VAR 0 2
54752: PUSH
54753: LD_INT 2
54755: ARRAY
54756: IFFALSE 54825
// if result [ 2 ] [ 1 ] = 100 + i then
54758: LD_VAR 0 2
54762: PUSH
54763: LD_INT 2
54765: ARRAY
54766: PUSH
54767: LD_INT 1
54769: ARRAY
54770: PUSH
54771: LD_INT 100
54773: PUSH
54774: LD_VAR 0 8
54778: PLUS
54779: EQUAL
54780: IFFALSE 54825
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54782: LD_ADDR_VAR 0 2
54786: PUSH
54787: LD_VAR 0 2
54791: PPUSH
54792: LD_INT 2
54794: PPUSH
54795: LD_VAR 0 2
54799: PUSH
54800: LD_INT 2
54802: ARRAY
54803: PPUSH
54804: LD_INT 1
54806: PPUSH
54807: CALL_OW 3
54811: PPUSH
54812: CALL_OW 1
54816: ST_TO_ADDR
// tmp := 1 ;
54817: LD_ADDR_VAR 0 3
54821: PUSH
54822: LD_STRING 1
54824: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54825: LD_ADDR_VAR 0 6
54829: PUSH
54830: LD_VAR 0 6
54834: PUSH
54835: LD_VAR 0 3
54839: STR
54840: ST_TO_ADDR
// end ;
54841: GO 54737
54843: POP
54844: POP
// if isGameLoad then
54845: LD_VAR 0 1
54849: IFFALSE 55324
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54851: LD_ADDR_VAR 0 4
54855: PUSH
54856: LD_EXP 35
54860: PUSH
54861: LD_EXP 34
54865: PUSH
54866: LD_EXP 36
54870: PUSH
54871: LD_EXP 33
54875: PUSH
54876: LD_EXP 37
54880: PUSH
54881: LD_EXP 38
54885: PUSH
54886: LD_EXP 39
54890: PUSH
54891: LD_EXP 40
54895: PUSH
54896: LD_EXP 41
54900: PUSH
54901: LD_EXP 42
54905: PUSH
54906: LD_EXP 43
54910: PUSH
54911: LD_EXP 44
54915: PUSH
54916: LD_EXP 45
54920: PUSH
54921: LD_EXP 46
54925: PUSH
54926: LD_EXP 54
54930: PUSH
54931: LD_EXP 55
54935: PUSH
54936: LD_EXP 56
54940: PUSH
54941: LD_EXP 57
54945: PUSH
54946: LD_EXP 59
54950: PUSH
54951: LD_EXP 60
54955: PUSH
54956: LD_EXP 61
54960: PUSH
54961: LD_EXP 64
54965: PUSH
54966: LD_EXP 66
54970: PUSH
54971: LD_EXP 67
54975: PUSH
54976: LD_EXP 68
54980: PUSH
54981: LD_EXP 70
54985: PUSH
54986: LD_EXP 71
54990: PUSH
54991: LD_EXP 74
54995: PUSH
54996: LD_EXP 75
55000: PUSH
55001: LD_EXP 76
55005: PUSH
55006: LD_EXP 77
55010: PUSH
55011: LD_EXP 78
55015: PUSH
55016: LD_EXP 79
55020: PUSH
55021: LD_EXP 80
55025: PUSH
55026: LD_EXP 81
55030: PUSH
55031: LD_EXP 82
55035: PUSH
55036: LD_EXP 47
55040: PUSH
55041: LD_EXP 48
55045: PUSH
55046: LD_EXP 51
55050: PUSH
55051: LD_EXP 52
55055: PUSH
55056: LD_EXP 53
55060: PUSH
55061: LD_EXP 49
55065: PUSH
55066: LD_EXP 50
55070: PUSH
55071: LD_EXP 58
55075: PUSH
55076: LD_EXP 62
55080: PUSH
55081: LD_EXP 63
55085: PUSH
55086: LD_EXP 65
55090: PUSH
55091: LD_EXP 69
55095: PUSH
55096: LD_EXP 72
55100: PUSH
55101: LD_EXP 73
55105: PUSH
55106: LD_EXP 83
55110: PUSH
55111: LD_EXP 84
55115: PUSH
55116: LD_EXP 85
55120: PUSH
55121: LD_EXP 86
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: ST_TO_ADDR
// tmp :=  ;
55182: LD_ADDR_VAR 0 3
55186: PUSH
55187: LD_STRING 
55189: ST_TO_ADDR
// for i = 1 to normalCounter do
55190: LD_ADDR_VAR 0 8
55194: PUSH
55195: DOUBLE
55196: LD_INT 1
55198: DEC
55199: ST_TO_ADDR
55200: LD_EXP 31
55204: PUSH
55205: FOR_TO
55206: IFFALSE 55242
// begin if flags [ i ] then
55208: LD_VAR 0 4
55212: PUSH
55213: LD_VAR 0 8
55217: ARRAY
55218: IFFALSE 55240
// tmp := tmp & i & ; ;
55220: LD_ADDR_VAR 0 3
55224: PUSH
55225: LD_VAR 0 3
55229: PUSH
55230: LD_VAR 0 8
55234: STR
55235: PUSH
55236: LD_STRING ;
55238: STR
55239: ST_TO_ADDR
// end ;
55240: GO 55205
55242: POP
55243: POP
// for i = 1 to hardcoreCounter do
55244: LD_ADDR_VAR 0 8
55248: PUSH
55249: DOUBLE
55250: LD_INT 1
55252: DEC
55253: ST_TO_ADDR
55254: LD_EXP 32
55258: PUSH
55259: FOR_TO
55260: IFFALSE 55306
// begin if flags [ normalCounter + i ] then
55262: LD_VAR 0 4
55266: PUSH
55267: LD_EXP 31
55271: PUSH
55272: LD_VAR 0 8
55276: PLUS
55277: ARRAY
55278: IFFALSE 55304
// tmp := tmp & ( 100 + i ) & ; ;
55280: LD_ADDR_VAR 0 3
55284: PUSH
55285: LD_VAR 0 3
55289: PUSH
55290: LD_INT 100
55292: PUSH
55293: LD_VAR 0 8
55297: PLUS
55298: STR
55299: PUSH
55300: LD_STRING ;
55302: STR
55303: ST_TO_ADDR
// end ;
55304: GO 55259
55306: POP
55307: POP
// if tmp then
55308: LD_VAR 0 3
55312: IFFALSE 55324
// active := tmp ;
55314: LD_ADDR_VAR 0 7
55318: PUSH
55319: LD_VAR 0 3
55323: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
55324: LD_STRING getStreamItemsFromMission("
55326: PUSH
55327: LD_VAR 0 5
55331: STR
55332: PUSH
55333: LD_STRING ","
55335: STR
55336: PUSH
55337: LD_VAR 0 6
55341: STR
55342: PUSH
55343: LD_STRING ","
55345: STR
55346: PUSH
55347: LD_VAR 0 7
55351: STR
55352: PUSH
55353: LD_STRING ")
55355: STR
55356: PPUSH
55357: CALL_OW 559
// end else
55361: GO 55370
// ToLua ( getStreamItemsFromMission("","","") ) ;
55363: LD_STRING getStreamItemsFromMission("","","")
55365: PPUSH
55366: CALL_OW 559
// end ;
55370: LD_VAR 0 2
55374: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55375: LD_EXP 30
55379: PUSH
55380: LD_EXP 35
55384: AND
55385: IFFALSE 55509
55387: GO 55389
55389: DISABLE
55390: LD_INT 0
55392: PPUSH
55393: PPUSH
// begin enable ;
55394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55395: LD_ADDR_VAR 0 2
55399: PUSH
55400: LD_INT 22
55402: PUSH
55403: LD_OWVAR 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: LD_INT 34
55417: PUSH
55418: LD_INT 7
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 34
55427: PUSH
55428: LD_INT 45
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 34
55437: PUSH
55438: LD_INT 28
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 34
55447: PUSH
55448: LD_INT 47
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PPUSH
55466: CALL_OW 69
55470: ST_TO_ADDR
// if not tmp then
55471: LD_VAR 0 2
55475: NOT
55476: IFFALSE 55480
// exit ;
55478: GO 55509
// for i in tmp do
55480: LD_ADDR_VAR 0 1
55484: PUSH
55485: LD_VAR 0 2
55489: PUSH
55490: FOR_IN
55491: IFFALSE 55507
// begin SetLives ( i , 0 ) ;
55493: LD_VAR 0 1
55497: PPUSH
55498: LD_INT 0
55500: PPUSH
55501: CALL_OW 234
// end ;
55505: GO 55490
55507: POP
55508: POP
// end ;
55509: PPOPN 2
55511: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55512: LD_EXP 30
55516: PUSH
55517: LD_EXP 36
55521: AND
55522: IFFALSE 55606
55524: GO 55526
55526: DISABLE
55527: LD_INT 0
55529: PPUSH
55530: PPUSH
// begin enable ;
55531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55532: LD_ADDR_VAR 0 2
55536: PUSH
55537: LD_INT 22
55539: PUSH
55540: LD_OWVAR 2
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 32
55551: PUSH
55552: LD_INT 3
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PPUSH
55563: CALL_OW 69
55567: ST_TO_ADDR
// if not tmp then
55568: LD_VAR 0 2
55572: NOT
55573: IFFALSE 55577
// exit ;
55575: GO 55606
// for i in tmp do
55577: LD_ADDR_VAR 0 1
55581: PUSH
55582: LD_VAR 0 2
55586: PUSH
55587: FOR_IN
55588: IFFALSE 55604
// begin SetLives ( i , 0 ) ;
55590: LD_VAR 0 1
55594: PPUSH
55595: LD_INT 0
55597: PPUSH
55598: CALL_OW 234
// end ;
55602: GO 55587
55604: POP
55605: POP
// end ;
55606: PPOPN 2
55608: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55609: LD_EXP 30
55613: PUSH
55614: LD_EXP 33
55618: AND
55619: IFFALSE 55712
55621: GO 55623
55623: DISABLE
55624: LD_INT 0
55626: PPUSH
// begin enable ;
55627: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55628: LD_ADDR_VAR 0 1
55632: PUSH
55633: LD_INT 22
55635: PUSH
55636: LD_OWVAR 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: LD_INT 25
55650: PUSH
55651: LD_INT 5
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 25
55660: PUSH
55661: LD_INT 9
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 25
55670: PUSH
55671: LD_INT 8
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PPUSH
55688: CALL_OW 69
55692: PUSH
55693: FOR_IN
55694: IFFALSE 55710
// begin SetClass ( i , 1 ) ;
55696: LD_VAR 0 1
55700: PPUSH
55701: LD_INT 1
55703: PPUSH
55704: CALL_OW 336
// end ;
55708: GO 55693
55710: POP
55711: POP
// end ;
55712: PPOPN 1
55714: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55715: LD_EXP 30
55719: PUSH
55720: LD_EXP 34
55724: AND
55725: PUSH
55726: LD_OWVAR 65
55730: PUSH
55731: LD_INT 7
55733: LESS
55734: AND
55735: IFFALSE 55749
55737: GO 55739
55739: DISABLE
// begin enable ;
55740: ENABLE
// game_speed := 7 ;
55741: LD_ADDR_OWVAR 65
55745: PUSH
55746: LD_INT 7
55748: ST_TO_ADDR
// end ;
55749: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55750: LD_EXP 30
55754: PUSH
55755: LD_EXP 37
55759: AND
55760: IFFALSE 55962
55762: GO 55764
55764: DISABLE
55765: LD_INT 0
55767: PPUSH
55768: PPUSH
55769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55770: LD_ADDR_VAR 0 3
55774: PUSH
55775: LD_INT 81
55777: PUSH
55778: LD_OWVAR 2
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 21
55789: PUSH
55790: LD_INT 1
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PPUSH
55801: CALL_OW 69
55805: ST_TO_ADDR
// if not tmp then
55806: LD_VAR 0 3
55810: NOT
55811: IFFALSE 55815
// exit ;
55813: GO 55962
// if tmp > 5 then
55815: LD_VAR 0 3
55819: PUSH
55820: LD_INT 5
55822: GREATER
55823: IFFALSE 55835
// k := 5 else
55825: LD_ADDR_VAR 0 2
55829: PUSH
55830: LD_INT 5
55832: ST_TO_ADDR
55833: GO 55845
// k := tmp ;
55835: LD_ADDR_VAR 0 2
55839: PUSH
55840: LD_VAR 0 3
55844: ST_TO_ADDR
// for i := 1 to k do
55845: LD_ADDR_VAR 0 1
55849: PUSH
55850: DOUBLE
55851: LD_INT 1
55853: DEC
55854: ST_TO_ADDR
55855: LD_VAR 0 2
55859: PUSH
55860: FOR_TO
55861: IFFALSE 55960
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55863: LD_VAR 0 3
55867: PUSH
55868: LD_VAR 0 1
55872: ARRAY
55873: PPUSH
55874: LD_VAR 0 1
55878: PUSH
55879: LD_INT 4
55881: MOD
55882: PUSH
55883: LD_INT 1
55885: PLUS
55886: PPUSH
55887: CALL_OW 259
55891: PUSH
55892: LD_INT 10
55894: LESS
55895: IFFALSE 55958
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55897: LD_VAR 0 3
55901: PUSH
55902: LD_VAR 0 1
55906: ARRAY
55907: PPUSH
55908: LD_VAR 0 1
55912: PUSH
55913: LD_INT 4
55915: MOD
55916: PUSH
55917: LD_INT 1
55919: PLUS
55920: PPUSH
55921: LD_VAR 0 3
55925: PUSH
55926: LD_VAR 0 1
55930: ARRAY
55931: PPUSH
55932: LD_VAR 0 1
55936: PUSH
55937: LD_INT 4
55939: MOD
55940: PUSH
55941: LD_INT 1
55943: PLUS
55944: PPUSH
55945: CALL_OW 259
55949: PUSH
55950: LD_INT 1
55952: PLUS
55953: PPUSH
55954: CALL_OW 237
55958: GO 55860
55960: POP
55961: POP
// end ;
55962: PPOPN 3
55964: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55965: LD_EXP 30
55969: PUSH
55970: LD_EXP 38
55974: AND
55975: IFFALSE 55995
55977: GO 55979
55979: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55980: LD_INT 4
55982: PPUSH
55983: LD_OWVAR 2
55987: PPUSH
55988: LD_INT 0
55990: PPUSH
55991: CALL_OW 324
55995: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55996: LD_EXP 30
56000: PUSH
56001: LD_EXP 67
56005: AND
56006: IFFALSE 56026
56008: GO 56010
56010: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
56011: LD_INT 19
56013: PPUSH
56014: LD_OWVAR 2
56018: PPUSH
56019: LD_INT 0
56021: PPUSH
56022: CALL_OW 324
56026: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
56027: LD_EXP 30
56031: PUSH
56032: LD_EXP 39
56036: AND
56037: IFFALSE 56139
56039: GO 56041
56041: DISABLE
56042: LD_INT 0
56044: PPUSH
56045: PPUSH
// begin enable ;
56046: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56047: LD_ADDR_VAR 0 2
56051: PUSH
56052: LD_INT 22
56054: PUSH
56055: LD_OWVAR 2
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 2
56066: PUSH
56067: LD_INT 34
56069: PUSH
56070: LD_INT 11
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 34
56079: PUSH
56080: LD_INT 30
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PPUSH
56096: CALL_OW 69
56100: ST_TO_ADDR
// if not tmp then
56101: LD_VAR 0 2
56105: NOT
56106: IFFALSE 56110
// exit ;
56108: GO 56139
// for i in tmp do
56110: LD_ADDR_VAR 0 1
56114: PUSH
56115: LD_VAR 0 2
56119: PUSH
56120: FOR_IN
56121: IFFALSE 56137
// begin SetLives ( i , 0 ) ;
56123: LD_VAR 0 1
56127: PPUSH
56128: LD_INT 0
56130: PPUSH
56131: CALL_OW 234
// end ;
56135: GO 56120
56137: POP
56138: POP
// end ;
56139: PPOPN 2
56141: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56142: LD_EXP 30
56146: PUSH
56147: LD_EXP 40
56151: AND
56152: IFFALSE 56172
56154: GO 56156
56156: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56157: LD_INT 32
56159: PPUSH
56160: LD_OWVAR 2
56164: PPUSH
56165: LD_INT 0
56167: PPUSH
56168: CALL_OW 324
56172: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56173: LD_EXP 30
56177: PUSH
56178: LD_EXP 41
56182: AND
56183: IFFALSE 56364
56185: GO 56187
56187: DISABLE
56188: LD_INT 0
56190: PPUSH
56191: PPUSH
56192: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56193: LD_ADDR_VAR 0 2
56197: PUSH
56198: LD_INT 22
56200: PUSH
56201: LD_OWVAR 2
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 33
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PPUSH
56224: CALL_OW 69
56228: ST_TO_ADDR
// if not tmp then
56229: LD_VAR 0 2
56233: NOT
56234: IFFALSE 56238
// exit ;
56236: GO 56364
// side := 0 ;
56238: LD_ADDR_VAR 0 3
56242: PUSH
56243: LD_INT 0
56245: ST_TO_ADDR
// for i := 1 to 8 do
56246: LD_ADDR_VAR 0 1
56250: PUSH
56251: DOUBLE
56252: LD_INT 1
56254: DEC
56255: ST_TO_ADDR
56256: LD_INT 8
56258: PUSH
56259: FOR_TO
56260: IFFALSE 56308
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56262: LD_OWVAR 2
56266: PUSH
56267: LD_VAR 0 1
56271: NONEQUAL
56272: PUSH
56273: LD_OWVAR 2
56277: PPUSH
56278: LD_VAR 0 1
56282: PPUSH
56283: CALL_OW 81
56287: PUSH
56288: LD_INT 2
56290: EQUAL
56291: AND
56292: IFFALSE 56306
// begin side := i ;
56294: LD_ADDR_VAR 0 3
56298: PUSH
56299: LD_VAR 0 1
56303: ST_TO_ADDR
// break ;
56304: GO 56308
// end ;
56306: GO 56259
56308: POP
56309: POP
// if not side then
56310: LD_VAR 0 3
56314: NOT
56315: IFFALSE 56319
// exit ;
56317: GO 56364
// for i := 1 to tmp do
56319: LD_ADDR_VAR 0 1
56323: PUSH
56324: DOUBLE
56325: LD_INT 1
56327: DEC
56328: ST_TO_ADDR
56329: LD_VAR 0 2
56333: PUSH
56334: FOR_TO
56335: IFFALSE 56362
// if Prob ( 60 ) then
56337: LD_INT 60
56339: PPUSH
56340: CALL_OW 13
56344: IFFALSE 56360
// SetSide ( i , side ) ;
56346: LD_VAR 0 1
56350: PPUSH
56351: LD_VAR 0 3
56355: PPUSH
56356: CALL_OW 235
56360: GO 56334
56362: POP
56363: POP
// end ;
56364: PPOPN 3
56366: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56367: LD_EXP 30
56371: PUSH
56372: LD_EXP 43
56376: AND
56377: IFFALSE 56496
56379: GO 56381
56381: DISABLE
56382: LD_INT 0
56384: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56385: LD_ADDR_VAR 0 1
56389: PUSH
56390: LD_INT 22
56392: PUSH
56393: LD_OWVAR 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 21
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: LD_INT 23
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: LIST
56433: PPUSH
56434: CALL_OW 69
56438: PUSH
56439: FOR_IN
56440: IFFALSE 56494
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56442: LD_VAR 0 1
56446: PPUSH
56447: CALL_OW 257
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: LD_INT 4
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: IN
56470: IFFALSE 56492
// SetClass ( un , rand ( 1 , 4 ) ) ;
56472: LD_VAR 0 1
56476: PPUSH
56477: LD_INT 1
56479: PPUSH
56480: LD_INT 4
56482: PPUSH
56483: CALL_OW 12
56487: PPUSH
56488: CALL_OW 336
56492: GO 56439
56494: POP
56495: POP
// end ;
56496: PPOPN 1
56498: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56499: LD_EXP 30
56503: PUSH
56504: LD_EXP 42
56508: AND
56509: IFFALSE 56588
56511: GO 56513
56513: DISABLE
56514: LD_INT 0
56516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56517: LD_ADDR_VAR 0 1
56521: PUSH
56522: LD_INT 22
56524: PUSH
56525: LD_OWVAR 2
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 21
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PPUSH
56548: CALL_OW 69
56552: ST_TO_ADDR
// if not tmp then
56553: LD_VAR 0 1
56557: NOT
56558: IFFALSE 56562
// exit ;
56560: GO 56588
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56562: LD_VAR 0 1
56566: PUSH
56567: LD_INT 1
56569: PPUSH
56570: LD_VAR 0 1
56574: PPUSH
56575: CALL_OW 12
56579: ARRAY
56580: PPUSH
56581: LD_INT 100
56583: PPUSH
56584: CALL_OW 234
// end ;
56588: PPOPN 1
56590: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56591: LD_EXP 30
56595: PUSH
56596: LD_EXP 44
56600: AND
56601: IFFALSE 56699
56603: GO 56605
56605: DISABLE
56606: LD_INT 0
56608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56609: LD_ADDR_VAR 0 1
56613: PUSH
56614: LD_INT 22
56616: PUSH
56617: LD_OWVAR 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 21
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PPUSH
56640: CALL_OW 69
56644: ST_TO_ADDR
// if not tmp then
56645: LD_VAR 0 1
56649: NOT
56650: IFFALSE 56654
// exit ;
56652: GO 56699
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56654: LD_VAR 0 1
56658: PUSH
56659: LD_INT 1
56661: PPUSH
56662: LD_VAR 0 1
56666: PPUSH
56667: CALL_OW 12
56671: ARRAY
56672: PPUSH
56673: LD_INT 1
56675: PPUSH
56676: LD_INT 4
56678: PPUSH
56679: CALL_OW 12
56683: PPUSH
56684: LD_INT 3000
56686: PPUSH
56687: LD_INT 9000
56689: PPUSH
56690: CALL_OW 12
56694: PPUSH
56695: CALL_OW 492
// end ;
56699: PPOPN 1
56701: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56702: LD_EXP 30
56706: PUSH
56707: LD_EXP 45
56711: AND
56712: IFFALSE 56732
56714: GO 56716
56716: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56717: LD_INT 1
56719: PPUSH
56720: LD_OWVAR 2
56724: PPUSH
56725: LD_INT 0
56727: PPUSH
56728: CALL_OW 324
56732: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56733: LD_EXP 30
56737: PUSH
56738: LD_EXP 46
56742: AND
56743: IFFALSE 56826
56745: GO 56747
56747: DISABLE
56748: LD_INT 0
56750: PPUSH
56751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56752: LD_ADDR_VAR 0 2
56756: PUSH
56757: LD_INT 22
56759: PUSH
56760: LD_OWVAR 2
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 21
56771: PUSH
56772: LD_INT 3
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PPUSH
56783: CALL_OW 69
56787: ST_TO_ADDR
// if not tmp then
56788: LD_VAR 0 2
56792: NOT
56793: IFFALSE 56797
// exit ;
56795: GO 56826
// for i in tmp do
56797: LD_ADDR_VAR 0 1
56801: PUSH
56802: LD_VAR 0 2
56806: PUSH
56807: FOR_IN
56808: IFFALSE 56824
// SetBLevel ( i , 10 ) ;
56810: LD_VAR 0 1
56814: PPUSH
56815: LD_INT 10
56817: PPUSH
56818: CALL_OW 241
56822: GO 56807
56824: POP
56825: POP
// end ;
56826: PPOPN 2
56828: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56829: LD_EXP 30
56833: PUSH
56834: LD_EXP 47
56838: AND
56839: IFFALSE 56950
56841: GO 56843
56843: DISABLE
56844: LD_INT 0
56846: PPUSH
56847: PPUSH
56848: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56849: LD_ADDR_VAR 0 3
56853: PUSH
56854: LD_INT 22
56856: PUSH
56857: LD_OWVAR 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 25
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PPUSH
56880: CALL_OW 69
56884: ST_TO_ADDR
// if not tmp then
56885: LD_VAR 0 3
56889: NOT
56890: IFFALSE 56894
// exit ;
56892: GO 56950
// un := tmp [ rand ( 1 , tmp ) ] ;
56894: LD_ADDR_VAR 0 2
56898: PUSH
56899: LD_VAR 0 3
56903: PUSH
56904: LD_INT 1
56906: PPUSH
56907: LD_VAR 0 3
56911: PPUSH
56912: CALL_OW 12
56916: ARRAY
56917: ST_TO_ADDR
// if Crawls ( un ) then
56918: LD_VAR 0 2
56922: PPUSH
56923: CALL_OW 318
56927: IFFALSE 56938
// ComWalk ( un ) ;
56929: LD_VAR 0 2
56933: PPUSH
56934: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56938: LD_VAR 0 2
56942: PPUSH
56943: LD_INT 5
56945: PPUSH
56946: CALL_OW 336
// end ;
56950: PPOPN 3
56952: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56953: LD_EXP 30
56957: PUSH
56958: LD_EXP 48
56962: AND
56963: PUSH
56964: LD_OWVAR 67
56968: PUSH
56969: LD_INT 4
56971: LESS
56972: AND
56973: IFFALSE 56992
56975: GO 56977
56977: DISABLE
// begin Difficulty := Difficulty + 1 ;
56978: LD_ADDR_OWVAR 67
56982: PUSH
56983: LD_OWVAR 67
56987: PUSH
56988: LD_INT 1
56990: PLUS
56991: ST_TO_ADDR
// end ;
56992: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56993: LD_EXP 30
56997: PUSH
56998: LD_EXP 49
57002: AND
57003: IFFALSE 57106
57005: GO 57007
57007: DISABLE
57008: LD_INT 0
57010: PPUSH
// begin for i := 1 to 5 do
57011: LD_ADDR_VAR 0 1
57015: PUSH
57016: DOUBLE
57017: LD_INT 1
57019: DEC
57020: ST_TO_ADDR
57021: LD_INT 5
57023: PUSH
57024: FOR_TO
57025: IFFALSE 57104
// begin uc_nation := nation_nature ;
57027: LD_ADDR_OWVAR 21
57031: PUSH
57032: LD_INT 0
57034: ST_TO_ADDR
// uc_side := 0 ;
57035: LD_ADDR_OWVAR 20
57039: PUSH
57040: LD_INT 0
57042: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57043: LD_ADDR_OWVAR 29
57047: PUSH
57048: LD_INT 12
57050: PUSH
57051: LD_INT 12
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: ST_TO_ADDR
// hc_agressivity := 20 ;
57058: LD_ADDR_OWVAR 35
57062: PUSH
57063: LD_INT 20
57065: ST_TO_ADDR
// hc_class := class_tiger ;
57066: LD_ADDR_OWVAR 28
57070: PUSH
57071: LD_INT 14
57073: ST_TO_ADDR
// hc_gallery :=  ;
57074: LD_ADDR_OWVAR 33
57078: PUSH
57079: LD_STRING 
57081: ST_TO_ADDR
// hc_name :=  ;
57082: LD_ADDR_OWVAR 26
57086: PUSH
57087: LD_STRING 
57089: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57090: CALL_OW 44
57094: PPUSH
57095: LD_INT 0
57097: PPUSH
57098: CALL_OW 51
// end ;
57102: GO 57024
57104: POP
57105: POP
// end ;
57106: PPOPN 1
57108: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57109: LD_EXP 30
57113: PUSH
57114: LD_EXP 50
57118: AND
57119: IFFALSE 57128
57121: GO 57123
57123: DISABLE
// StreamSibBomb ;
57124: CALL 57129 0 0
57128: END
// export function StreamSibBomb ; var i , x , y ; begin
57129: LD_INT 0
57131: PPUSH
57132: PPUSH
57133: PPUSH
57134: PPUSH
// result := false ;
57135: LD_ADDR_VAR 0 1
57139: PUSH
57140: LD_INT 0
57142: ST_TO_ADDR
// for i := 1 to 16 do
57143: LD_ADDR_VAR 0 2
57147: PUSH
57148: DOUBLE
57149: LD_INT 1
57151: DEC
57152: ST_TO_ADDR
57153: LD_INT 16
57155: PUSH
57156: FOR_TO
57157: IFFALSE 57356
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57159: LD_ADDR_VAR 0 3
57163: PUSH
57164: LD_INT 10
57166: PUSH
57167: LD_INT 20
57169: PUSH
57170: LD_INT 30
57172: PUSH
57173: LD_INT 40
57175: PUSH
57176: LD_INT 50
57178: PUSH
57179: LD_INT 60
57181: PUSH
57182: LD_INT 70
57184: PUSH
57185: LD_INT 80
57187: PUSH
57188: LD_INT 90
57190: PUSH
57191: LD_INT 100
57193: PUSH
57194: LD_INT 110
57196: PUSH
57197: LD_INT 120
57199: PUSH
57200: LD_INT 130
57202: PUSH
57203: LD_INT 140
57205: PUSH
57206: LD_INT 150
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PPUSH
57229: LD_INT 15
57231: PPUSH
57232: CALL_OW 12
57236: ARRAY
57237: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57238: LD_ADDR_VAR 0 4
57242: PUSH
57243: LD_INT 10
57245: PUSH
57246: LD_INT 20
57248: PUSH
57249: LD_INT 30
57251: PUSH
57252: LD_INT 40
57254: PUSH
57255: LD_INT 50
57257: PUSH
57258: LD_INT 60
57260: PUSH
57261: LD_INT 70
57263: PUSH
57264: LD_INT 80
57266: PUSH
57267: LD_INT 90
57269: PUSH
57270: LD_INT 100
57272: PUSH
57273: LD_INT 110
57275: PUSH
57276: LD_INT 120
57278: PUSH
57279: LD_INT 130
57281: PUSH
57282: LD_INT 140
57284: PUSH
57285: LD_INT 150
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: PPUSH
57308: LD_INT 15
57310: PPUSH
57311: CALL_OW 12
57315: ARRAY
57316: ST_TO_ADDR
// if ValidHex ( x , y ) then
57317: LD_VAR 0 3
57321: PPUSH
57322: LD_VAR 0 4
57326: PPUSH
57327: CALL_OW 488
57331: IFFALSE 57354
// begin result := [ x , y ] ;
57333: LD_ADDR_VAR 0 1
57337: PUSH
57338: LD_VAR 0 3
57342: PUSH
57343: LD_VAR 0 4
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: ST_TO_ADDR
// break ;
57352: GO 57356
// end ; end ;
57354: GO 57156
57356: POP
57357: POP
// if result then
57358: LD_VAR 0 1
57362: IFFALSE 57422
// begin ToLua ( playSibBomb() ) ;
57364: LD_STRING playSibBomb()
57366: PPUSH
57367: CALL_OW 559
// wait ( 0 0$14 ) ;
57371: LD_INT 490
57373: PPUSH
57374: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57378: LD_VAR 0 1
57382: PUSH
57383: LD_INT 1
57385: ARRAY
57386: PPUSH
57387: LD_VAR 0 1
57391: PUSH
57392: LD_INT 2
57394: ARRAY
57395: PPUSH
57396: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57400: LD_VAR 0 1
57404: PUSH
57405: LD_INT 1
57407: ARRAY
57408: PPUSH
57409: LD_VAR 0 1
57413: PUSH
57414: LD_INT 2
57416: ARRAY
57417: PPUSH
57418: CALL_OW 429
// end ; end ;
57422: LD_VAR 0 1
57426: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57427: LD_EXP 30
57431: PUSH
57432: LD_EXP 52
57436: AND
57437: IFFALSE 57449
57439: GO 57441
57441: DISABLE
// YouLost (  ) ;
57442: LD_STRING 
57444: PPUSH
57445: CALL_OW 104
57449: END
// every 0 0$1 trigger StreamModeActive and sFog do
57450: LD_EXP 30
57454: PUSH
57455: LD_EXP 51
57459: AND
57460: IFFALSE 57474
57462: GO 57464
57464: DISABLE
// FogOff ( your_side ) ;
57465: LD_OWVAR 2
57469: PPUSH
57470: CALL_OW 344
57474: END
// every 0 0$1 trigger StreamModeActive and sSun do
57475: LD_EXP 30
57479: PUSH
57480: LD_EXP 53
57484: AND
57485: IFFALSE 57513
57487: GO 57489
57489: DISABLE
// begin solar_recharge_percent := 0 ;
57490: LD_ADDR_OWVAR 79
57494: PUSH
57495: LD_INT 0
57497: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57498: LD_INT 10500
57500: PPUSH
57501: CALL_OW 67
// solar_recharge_percent := 100 ;
57505: LD_ADDR_OWVAR 79
57509: PUSH
57510: LD_INT 100
57512: ST_TO_ADDR
// end ;
57513: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57514: LD_EXP 30
57518: PUSH
57519: LD_EXP 54
57523: AND
57524: IFFALSE 57763
57526: GO 57528
57528: DISABLE
57529: LD_INT 0
57531: PPUSH
57532: PPUSH
57533: PPUSH
// begin tmp := [ ] ;
57534: LD_ADDR_VAR 0 3
57538: PUSH
57539: EMPTY
57540: ST_TO_ADDR
// for i := 1 to 6 do
57541: LD_ADDR_VAR 0 1
57545: PUSH
57546: DOUBLE
57547: LD_INT 1
57549: DEC
57550: ST_TO_ADDR
57551: LD_INT 6
57553: PUSH
57554: FOR_TO
57555: IFFALSE 57660
// begin uc_nation := nation_nature ;
57557: LD_ADDR_OWVAR 21
57561: PUSH
57562: LD_INT 0
57564: ST_TO_ADDR
// uc_side := 0 ;
57565: LD_ADDR_OWVAR 20
57569: PUSH
57570: LD_INT 0
57572: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57573: LD_ADDR_OWVAR 29
57577: PUSH
57578: LD_INT 12
57580: PUSH
57581: LD_INT 12
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: ST_TO_ADDR
// hc_agressivity := 20 ;
57588: LD_ADDR_OWVAR 35
57592: PUSH
57593: LD_INT 20
57595: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57596: LD_ADDR_OWVAR 28
57600: PUSH
57601: LD_INT 17
57603: ST_TO_ADDR
// hc_gallery :=  ;
57604: LD_ADDR_OWVAR 33
57608: PUSH
57609: LD_STRING 
57611: ST_TO_ADDR
// hc_name :=  ;
57612: LD_ADDR_OWVAR 26
57616: PUSH
57617: LD_STRING 
57619: ST_TO_ADDR
// un := CreateHuman ;
57620: LD_ADDR_VAR 0 2
57624: PUSH
57625: CALL_OW 44
57629: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57630: LD_VAR 0 2
57634: PPUSH
57635: LD_INT 1
57637: PPUSH
57638: CALL_OW 51
// tmp := tmp ^ un ;
57642: LD_ADDR_VAR 0 3
57646: PUSH
57647: LD_VAR 0 3
57651: PUSH
57652: LD_VAR 0 2
57656: ADD
57657: ST_TO_ADDR
// end ;
57658: GO 57554
57660: POP
57661: POP
// repeat wait ( 0 0$1 ) ;
57662: LD_INT 35
57664: PPUSH
57665: CALL_OW 67
// for un in tmp do
57669: LD_ADDR_VAR 0 2
57673: PUSH
57674: LD_VAR 0 3
57678: PUSH
57679: FOR_IN
57680: IFFALSE 57754
// begin if IsDead ( un ) then
57682: LD_VAR 0 2
57686: PPUSH
57687: CALL_OW 301
57691: IFFALSE 57711
// begin tmp := tmp diff un ;
57693: LD_ADDR_VAR 0 3
57697: PUSH
57698: LD_VAR 0 3
57702: PUSH
57703: LD_VAR 0 2
57707: DIFF
57708: ST_TO_ADDR
// continue ;
57709: GO 57679
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57711: LD_VAR 0 2
57715: PPUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 22
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PPUSH
57733: CALL_OW 69
57737: PPUSH
57738: LD_VAR 0 2
57742: PPUSH
57743: CALL_OW 74
57747: PPUSH
57748: CALL_OW 115
// end ;
57752: GO 57679
57754: POP
57755: POP
// until not tmp ;
57756: LD_VAR 0 3
57760: NOT
57761: IFFALSE 57662
// end ;
57763: PPOPN 3
57765: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57766: LD_EXP 30
57770: PUSH
57771: LD_EXP 55
57775: AND
57776: IFFALSE 57830
57778: GO 57780
57780: DISABLE
// begin ToLua ( displayTroll(); ) ;
57781: LD_STRING displayTroll();
57783: PPUSH
57784: CALL_OW 559
// wait ( 3 3$00 ) ;
57788: LD_INT 6300
57790: PPUSH
57791: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57795: LD_STRING hideTroll();
57797: PPUSH
57798: CALL_OW 559
// wait ( 1 1$00 ) ;
57802: LD_INT 2100
57804: PPUSH
57805: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57809: LD_STRING displayTroll();
57811: PPUSH
57812: CALL_OW 559
// wait ( 1 1$00 ) ;
57816: LD_INT 2100
57818: PPUSH
57819: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57823: LD_STRING hideTroll();
57825: PPUSH
57826: CALL_OW 559
// end ;
57830: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57831: LD_EXP 30
57835: PUSH
57836: LD_EXP 56
57840: AND
57841: IFFALSE 57904
57843: GO 57845
57845: DISABLE
57846: LD_INT 0
57848: PPUSH
// begin p := 0 ;
57849: LD_ADDR_VAR 0 1
57853: PUSH
57854: LD_INT 0
57856: ST_TO_ADDR
// repeat game_speed := 1 ;
57857: LD_ADDR_OWVAR 65
57861: PUSH
57862: LD_INT 1
57864: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57865: LD_INT 35
57867: PPUSH
57868: CALL_OW 67
// p := p + 1 ;
57872: LD_ADDR_VAR 0 1
57876: PUSH
57877: LD_VAR 0 1
57881: PUSH
57882: LD_INT 1
57884: PLUS
57885: ST_TO_ADDR
// until p >= 60 ;
57886: LD_VAR 0 1
57890: PUSH
57891: LD_INT 60
57893: GREATEREQUAL
57894: IFFALSE 57857
// game_speed := 4 ;
57896: LD_ADDR_OWVAR 65
57900: PUSH
57901: LD_INT 4
57903: ST_TO_ADDR
// end ;
57904: PPOPN 1
57906: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57907: LD_EXP 30
57911: PUSH
57912: LD_EXP 57
57916: AND
57917: IFFALSE 58063
57919: GO 57921
57921: DISABLE
57922: LD_INT 0
57924: PPUSH
57925: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57926: LD_ADDR_VAR 0 1
57930: PUSH
57931: LD_INT 22
57933: PUSH
57934: LD_OWVAR 2
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: LD_INT 30
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 30
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PPUSH
57975: CALL_OW 69
57979: ST_TO_ADDR
// if not depot then
57980: LD_VAR 0 1
57984: NOT
57985: IFFALSE 57989
// exit ;
57987: GO 58063
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57989: LD_ADDR_VAR 0 2
57993: PUSH
57994: LD_VAR 0 1
57998: PUSH
57999: LD_INT 1
58001: PPUSH
58002: LD_VAR 0 1
58006: PPUSH
58007: CALL_OW 12
58011: ARRAY
58012: PPUSH
58013: CALL_OW 274
58017: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
58018: LD_VAR 0 2
58022: PPUSH
58023: LD_INT 1
58025: PPUSH
58026: LD_INT 0
58028: PPUSH
58029: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
58033: LD_VAR 0 2
58037: PPUSH
58038: LD_INT 2
58040: PPUSH
58041: LD_INT 0
58043: PPUSH
58044: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58048: LD_VAR 0 2
58052: PPUSH
58053: LD_INT 3
58055: PPUSH
58056: LD_INT 0
58058: PPUSH
58059: CALL_OW 277
// end ;
58063: PPOPN 2
58065: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58066: LD_EXP 30
58070: PUSH
58071: LD_EXP 58
58075: AND
58076: IFFALSE 58173
58078: GO 58080
58080: DISABLE
58081: LD_INT 0
58083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58084: LD_ADDR_VAR 0 1
58088: PUSH
58089: LD_INT 22
58091: PUSH
58092: LD_OWVAR 2
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 21
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: LD_INT 23
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: LIST
58132: PPUSH
58133: CALL_OW 69
58137: ST_TO_ADDR
// if not tmp then
58138: LD_VAR 0 1
58142: NOT
58143: IFFALSE 58147
// exit ;
58145: GO 58173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58147: LD_VAR 0 1
58151: PUSH
58152: LD_INT 1
58154: PPUSH
58155: LD_VAR 0 1
58159: PPUSH
58160: CALL_OW 12
58164: ARRAY
58165: PPUSH
58166: LD_INT 200
58168: PPUSH
58169: CALL_OW 234
// end ;
58173: PPOPN 1
58175: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58176: LD_EXP 30
58180: PUSH
58181: LD_EXP 59
58185: AND
58186: IFFALSE 58265
58188: GO 58190
58190: DISABLE
58191: LD_INT 0
58193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58194: LD_ADDR_VAR 0 1
58198: PUSH
58199: LD_INT 22
58201: PUSH
58202: LD_OWVAR 2
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 21
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PPUSH
58225: CALL_OW 69
58229: ST_TO_ADDR
// if not tmp then
58230: LD_VAR 0 1
58234: NOT
58235: IFFALSE 58239
// exit ;
58237: GO 58265
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58239: LD_VAR 0 1
58243: PUSH
58244: LD_INT 1
58246: PPUSH
58247: LD_VAR 0 1
58251: PPUSH
58252: CALL_OW 12
58256: ARRAY
58257: PPUSH
58258: LD_INT 60
58260: PPUSH
58261: CALL_OW 234
// end ;
58265: PPOPN 1
58267: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58268: LD_EXP 30
58272: PUSH
58273: LD_EXP 60
58277: AND
58278: IFFALSE 58377
58280: GO 58282
58282: DISABLE
58283: LD_INT 0
58285: PPUSH
58286: PPUSH
// begin enable ;
58287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58288: LD_ADDR_VAR 0 1
58292: PUSH
58293: LD_INT 22
58295: PUSH
58296: LD_OWVAR 2
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 61
58307: PUSH
58308: EMPTY
58309: LIST
58310: PUSH
58311: LD_INT 33
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: LIST
58325: PPUSH
58326: CALL_OW 69
58330: ST_TO_ADDR
// if not tmp then
58331: LD_VAR 0 1
58335: NOT
58336: IFFALSE 58340
// exit ;
58338: GO 58377
// for i in tmp do
58340: LD_ADDR_VAR 0 2
58344: PUSH
58345: LD_VAR 0 1
58349: PUSH
58350: FOR_IN
58351: IFFALSE 58375
// if IsControledBy ( i ) then
58353: LD_VAR 0 2
58357: PPUSH
58358: CALL_OW 312
58362: IFFALSE 58373
// ComUnlink ( i ) ;
58364: LD_VAR 0 2
58368: PPUSH
58369: CALL_OW 136
58373: GO 58350
58375: POP
58376: POP
// end ;
58377: PPOPN 2
58379: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58380: LD_EXP 30
58384: PUSH
58385: LD_EXP 61
58389: AND
58390: IFFALSE 58530
58392: GO 58394
58394: DISABLE
58395: LD_INT 0
58397: PPUSH
58398: PPUSH
// begin ToLua ( displayPowell(); ) ;
58399: LD_STRING displayPowell();
58401: PPUSH
58402: CALL_OW 559
// uc_side := 0 ;
58406: LD_ADDR_OWVAR 20
58410: PUSH
58411: LD_INT 0
58413: ST_TO_ADDR
// uc_nation := 2 ;
58414: LD_ADDR_OWVAR 21
58418: PUSH
58419: LD_INT 2
58421: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58422: LD_ADDR_OWVAR 37
58426: PUSH
58427: LD_INT 14
58429: ST_TO_ADDR
// vc_engine := engine_siberite ;
58430: LD_ADDR_OWVAR 39
58434: PUSH
58435: LD_INT 3
58437: ST_TO_ADDR
// vc_control := control_apeman ;
58438: LD_ADDR_OWVAR 38
58442: PUSH
58443: LD_INT 5
58445: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58446: LD_ADDR_OWVAR 40
58450: PUSH
58451: LD_INT 29
58453: ST_TO_ADDR
// un := CreateVehicle ;
58454: LD_ADDR_VAR 0 2
58458: PUSH
58459: CALL_OW 45
58463: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58464: LD_VAR 0 2
58468: PPUSH
58469: LD_INT 1
58471: PPUSH
58472: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58476: LD_INT 35
58478: PPUSH
58479: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58483: LD_VAR 0 2
58487: PPUSH
58488: LD_INT 22
58490: PUSH
58491: LD_OWVAR 2
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PPUSH
58500: CALL_OW 69
58504: PPUSH
58505: LD_VAR 0 2
58509: PPUSH
58510: CALL_OW 74
58514: PPUSH
58515: CALL_OW 115
// until IsDead ( un ) ;
58519: LD_VAR 0 2
58523: PPUSH
58524: CALL_OW 301
58528: IFFALSE 58476
// end ;
58530: PPOPN 2
58532: END
// every 0 0$1 trigger StreamModeActive and sStu do
58533: LD_EXP 30
58537: PUSH
58538: LD_EXP 69
58542: AND
58543: IFFALSE 58559
58545: GO 58547
58547: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58548: LD_STRING displayStucuk();
58550: PPUSH
58551: CALL_OW 559
// ResetFog ;
58555: CALL_OW 335
// end ;
58559: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58560: LD_EXP 30
58564: PUSH
58565: LD_EXP 62
58569: AND
58570: IFFALSE 58711
58572: GO 58574
58574: DISABLE
58575: LD_INT 0
58577: PPUSH
58578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58579: LD_ADDR_VAR 0 2
58583: PUSH
58584: LD_INT 22
58586: PUSH
58587: LD_OWVAR 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 21
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PPUSH
58610: CALL_OW 69
58614: ST_TO_ADDR
// if not tmp then
58615: LD_VAR 0 2
58619: NOT
58620: IFFALSE 58624
// exit ;
58622: GO 58711
// un := tmp [ rand ( 1 , tmp ) ] ;
58624: LD_ADDR_VAR 0 1
58628: PUSH
58629: LD_VAR 0 2
58633: PUSH
58634: LD_INT 1
58636: PPUSH
58637: LD_VAR 0 2
58641: PPUSH
58642: CALL_OW 12
58646: ARRAY
58647: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58648: LD_VAR 0 1
58652: PPUSH
58653: LD_INT 0
58655: PPUSH
58656: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58660: LD_VAR 0 1
58664: PPUSH
58665: LD_OWVAR 3
58669: PUSH
58670: LD_VAR 0 1
58674: DIFF
58675: PPUSH
58676: LD_VAR 0 1
58680: PPUSH
58681: CALL_OW 74
58685: PPUSH
58686: CALL_OW 115
// wait ( 0 0$20 ) ;
58690: LD_INT 700
58692: PPUSH
58693: CALL_OW 67
// SetSide ( un , your_side ) ;
58697: LD_VAR 0 1
58701: PPUSH
58702: LD_OWVAR 2
58706: PPUSH
58707: CALL_OW 235
// end ;
58711: PPOPN 2
58713: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58714: LD_EXP 30
58718: PUSH
58719: LD_EXP 63
58723: AND
58724: IFFALSE 58830
58726: GO 58728
58728: DISABLE
58729: LD_INT 0
58731: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58732: LD_ADDR_VAR 0 1
58736: PUSH
58737: LD_INT 22
58739: PUSH
58740: LD_OWVAR 2
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: LD_INT 30
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 30
58764: PUSH
58765: LD_INT 1
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PPUSH
58781: CALL_OW 69
58785: ST_TO_ADDR
// if not depot then
58786: LD_VAR 0 1
58790: NOT
58791: IFFALSE 58795
// exit ;
58793: GO 58830
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58795: LD_VAR 0 1
58799: PUSH
58800: LD_INT 1
58802: ARRAY
58803: PPUSH
58804: CALL_OW 250
58808: PPUSH
58809: LD_VAR 0 1
58813: PUSH
58814: LD_INT 1
58816: ARRAY
58817: PPUSH
58818: CALL_OW 251
58822: PPUSH
58823: LD_INT 70
58825: PPUSH
58826: CALL_OW 495
// end ;
58830: PPOPN 1
58832: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58833: LD_EXP 30
58837: PUSH
58838: LD_EXP 64
58842: AND
58843: IFFALSE 59054
58845: GO 58847
58847: DISABLE
58848: LD_INT 0
58850: PPUSH
58851: PPUSH
58852: PPUSH
58853: PPUSH
58854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58855: LD_ADDR_VAR 0 5
58859: PUSH
58860: LD_INT 22
58862: PUSH
58863: LD_OWVAR 2
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 21
58874: PUSH
58875: LD_INT 1
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PPUSH
58886: CALL_OW 69
58890: ST_TO_ADDR
// if not tmp then
58891: LD_VAR 0 5
58895: NOT
58896: IFFALSE 58900
// exit ;
58898: GO 59054
// for i in tmp do
58900: LD_ADDR_VAR 0 1
58904: PUSH
58905: LD_VAR 0 5
58909: PUSH
58910: FOR_IN
58911: IFFALSE 59052
// begin d := rand ( 0 , 5 ) ;
58913: LD_ADDR_VAR 0 4
58917: PUSH
58918: LD_INT 0
58920: PPUSH
58921: LD_INT 5
58923: PPUSH
58924: CALL_OW 12
58928: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58929: LD_ADDR_VAR 0 2
58933: PUSH
58934: LD_VAR 0 1
58938: PPUSH
58939: CALL_OW 250
58943: PPUSH
58944: LD_VAR 0 4
58948: PPUSH
58949: LD_INT 3
58951: PPUSH
58952: LD_INT 12
58954: PPUSH
58955: CALL_OW 12
58959: PPUSH
58960: CALL_OW 272
58964: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58965: LD_ADDR_VAR 0 3
58969: PUSH
58970: LD_VAR 0 1
58974: PPUSH
58975: CALL_OW 251
58979: PPUSH
58980: LD_VAR 0 4
58984: PPUSH
58985: LD_INT 3
58987: PPUSH
58988: LD_INT 12
58990: PPUSH
58991: CALL_OW 12
58995: PPUSH
58996: CALL_OW 273
59000: ST_TO_ADDR
// if ValidHex ( x , y ) then
59001: LD_VAR 0 2
59005: PPUSH
59006: LD_VAR 0 3
59010: PPUSH
59011: CALL_OW 488
59015: IFFALSE 59050
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
59017: LD_VAR 0 1
59021: PPUSH
59022: LD_VAR 0 2
59026: PPUSH
59027: LD_VAR 0 3
59031: PPUSH
59032: LD_INT 3
59034: PPUSH
59035: LD_INT 6
59037: PPUSH
59038: CALL_OW 12
59042: PPUSH
59043: LD_INT 1
59045: PPUSH
59046: CALL_OW 483
// end ;
59050: GO 58910
59052: POP
59053: POP
// end ;
59054: PPOPN 5
59056: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59057: LD_EXP 30
59061: PUSH
59062: LD_EXP 65
59066: AND
59067: IFFALSE 59161
59069: GO 59071
59071: DISABLE
59072: LD_INT 0
59074: PPUSH
59075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59076: LD_ADDR_VAR 0 2
59080: PUSH
59081: LD_INT 22
59083: PUSH
59084: LD_OWVAR 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 32
59095: PUSH
59096: LD_INT 1
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 21
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: LIST
59117: PPUSH
59118: CALL_OW 69
59122: ST_TO_ADDR
// if not tmp then
59123: LD_VAR 0 2
59127: NOT
59128: IFFALSE 59132
// exit ;
59130: GO 59161
// for i in tmp do
59132: LD_ADDR_VAR 0 1
59136: PUSH
59137: LD_VAR 0 2
59141: PUSH
59142: FOR_IN
59143: IFFALSE 59159
// SetFuel ( i , 0 ) ;
59145: LD_VAR 0 1
59149: PPUSH
59150: LD_INT 0
59152: PPUSH
59153: CALL_OW 240
59157: GO 59142
59159: POP
59160: POP
// end ;
59161: PPOPN 2
59163: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59164: LD_EXP 30
59168: PUSH
59169: LD_EXP 66
59173: AND
59174: IFFALSE 59240
59176: GO 59178
59178: DISABLE
59179: LD_INT 0
59181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59182: LD_ADDR_VAR 0 1
59186: PUSH
59187: LD_INT 22
59189: PUSH
59190: LD_OWVAR 2
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 30
59201: PUSH
59202: LD_INT 29
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PPUSH
59213: CALL_OW 69
59217: ST_TO_ADDR
// if not tmp then
59218: LD_VAR 0 1
59222: NOT
59223: IFFALSE 59227
// exit ;
59225: GO 59240
// DestroyUnit ( tmp [ 1 ] ) ;
59227: LD_VAR 0 1
59231: PUSH
59232: LD_INT 1
59234: ARRAY
59235: PPUSH
59236: CALL_OW 65
// end ;
59240: PPOPN 1
59242: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59243: LD_EXP 30
59247: PUSH
59248: LD_EXP 68
59252: AND
59253: IFFALSE 59382
59255: GO 59257
59257: DISABLE
59258: LD_INT 0
59260: PPUSH
// begin uc_side := 0 ;
59261: LD_ADDR_OWVAR 20
59265: PUSH
59266: LD_INT 0
59268: ST_TO_ADDR
// uc_nation := nation_arabian ;
59269: LD_ADDR_OWVAR 21
59273: PUSH
59274: LD_INT 2
59276: ST_TO_ADDR
// hc_gallery :=  ;
59277: LD_ADDR_OWVAR 33
59281: PUSH
59282: LD_STRING 
59284: ST_TO_ADDR
// hc_name :=  ;
59285: LD_ADDR_OWVAR 26
59289: PUSH
59290: LD_STRING 
59292: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59293: LD_INT 1
59295: PPUSH
59296: LD_INT 11
59298: PPUSH
59299: LD_INT 10
59301: PPUSH
59302: CALL_OW 380
// un := CreateHuman ;
59306: LD_ADDR_VAR 0 1
59310: PUSH
59311: CALL_OW 44
59315: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59316: LD_VAR 0 1
59320: PPUSH
59321: LD_INT 1
59323: PPUSH
59324: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59328: LD_INT 35
59330: PPUSH
59331: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59335: LD_VAR 0 1
59339: PPUSH
59340: LD_INT 22
59342: PUSH
59343: LD_OWVAR 2
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PPUSH
59352: CALL_OW 69
59356: PPUSH
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 74
59366: PPUSH
59367: CALL_OW 115
// until IsDead ( un ) ;
59371: LD_VAR 0 1
59375: PPUSH
59376: CALL_OW 301
59380: IFFALSE 59328
// end ;
59382: PPOPN 1
59384: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59385: LD_EXP 30
59389: PUSH
59390: LD_EXP 70
59394: AND
59395: IFFALSE 59407
59397: GO 59399
59399: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59400: LD_STRING earthquake(getX(game), 0, 32)
59402: PPUSH
59403: CALL_OW 559
59407: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59408: LD_EXP 30
59412: PUSH
59413: LD_EXP 71
59417: AND
59418: IFFALSE 59509
59420: GO 59422
59422: DISABLE
59423: LD_INT 0
59425: PPUSH
// begin enable ;
59426: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59427: LD_ADDR_VAR 0 1
59431: PUSH
59432: LD_INT 22
59434: PUSH
59435: LD_OWVAR 2
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 21
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 33
59456: PUSH
59457: LD_INT 3
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: LIST
59468: PPUSH
59469: CALL_OW 69
59473: ST_TO_ADDR
// if not tmp then
59474: LD_VAR 0 1
59478: NOT
59479: IFFALSE 59483
// exit ;
59481: GO 59509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59483: LD_VAR 0 1
59487: PUSH
59488: LD_INT 1
59490: PPUSH
59491: LD_VAR 0 1
59495: PPUSH
59496: CALL_OW 12
59500: ARRAY
59501: PPUSH
59502: LD_INT 1
59504: PPUSH
59505: CALL_OW 234
// end ;
59509: PPOPN 1
59511: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59512: LD_EXP 30
59516: PUSH
59517: LD_EXP 72
59521: AND
59522: IFFALSE 59663
59524: GO 59526
59526: DISABLE
59527: LD_INT 0
59529: PPUSH
59530: PPUSH
59531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59532: LD_ADDR_VAR 0 3
59536: PUSH
59537: LD_INT 22
59539: PUSH
59540: LD_OWVAR 2
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 25
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PPUSH
59563: CALL_OW 69
59567: ST_TO_ADDR
// if not tmp then
59568: LD_VAR 0 3
59572: NOT
59573: IFFALSE 59577
// exit ;
59575: GO 59663
// un := tmp [ rand ( 1 , tmp ) ] ;
59577: LD_ADDR_VAR 0 2
59581: PUSH
59582: LD_VAR 0 3
59586: PUSH
59587: LD_INT 1
59589: PPUSH
59590: LD_VAR 0 3
59594: PPUSH
59595: CALL_OW 12
59599: ARRAY
59600: ST_TO_ADDR
// if Crawls ( un ) then
59601: LD_VAR 0 2
59605: PPUSH
59606: CALL_OW 318
59610: IFFALSE 59621
// ComWalk ( un ) ;
59612: LD_VAR 0 2
59616: PPUSH
59617: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59621: LD_VAR 0 2
59625: PPUSH
59626: LD_INT 9
59628: PPUSH
59629: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59633: LD_INT 28
59635: PPUSH
59636: LD_OWVAR 2
59640: PPUSH
59641: LD_INT 2
59643: PPUSH
59644: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59648: LD_INT 29
59650: PPUSH
59651: LD_OWVAR 2
59655: PPUSH
59656: LD_INT 2
59658: PPUSH
59659: CALL_OW 322
// end ;
59663: PPOPN 3
59665: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59666: LD_EXP 30
59670: PUSH
59671: LD_EXP 73
59675: AND
59676: IFFALSE 59787
59678: GO 59680
59680: DISABLE
59681: LD_INT 0
59683: PPUSH
59684: PPUSH
59685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59686: LD_ADDR_VAR 0 3
59690: PUSH
59691: LD_INT 22
59693: PUSH
59694: LD_OWVAR 2
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 25
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PPUSH
59717: CALL_OW 69
59721: ST_TO_ADDR
// if not tmp then
59722: LD_VAR 0 3
59726: NOT
59727: IFFALSE 59731
// exit ;
59729: GO 59787
// un := tmp [ rand ( 1 , tmp ) ] ;
59731: LD_ADDR_VAR 0 2
59735: PUSH
59736: LD_VAR 0 3
59740: PUSH
59741: LD_INT 1
59743: PPUSH
59744: LD_VAR 0 3
59748: PPUSH
59749: CALL_OW 12
59753: ARRAY
59754: ST_TO_ADDR
// if Crawls ( un ) then
59755: LD_VAR 0 2
59759: PPUSH
59760: CALL_OW 318
59764: IFFALSE 59775
// ComWalk ( un ) ;
59766: LD_VAR 0 2
59770: PPUSH
59771: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59775: LD_VAR 0 2
59779: PPUSH
59780: LD_INT 8
59782: PPUSH
59783: CALL_OW 336
// end ;
59787: PPOPN 3
59789: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59790: LD_EXP 30
59794: PUSH
59795: LD_EXP 74
59799: AND
59800: IFFALSE 59944
59802: GO 59804
59804: DISABLE
59805: LD_INT 0
59807: PPUSH
59808: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59809: LD_ADDR_VAR 0 2
59813: PUSH
59814: LD_INT 22
59816: PUSH
59817: LD_OWVAR 2
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 21
59828: PUSH
59829: LD_INT 2
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 34
59841: PUSH
59842: LD_INT 12
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 34
59851: PUSH
59852: LD_INT 51
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 34
59861: PUSH
59862: LD_INT 32
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: PPUSH
59880: CALL_OW 69
59884: ST_TO_ADDR
// if not tmp then
59885: LD_VAR 0 2
59889: NOT
59890: IFFALSE 59894
// exit ;
59892: GO 59944
// for i in tmp do
59894: LD_ADDR_VAR 0 1
59898: PUSH
59899: LD_VAR 0 2
59903: PUSH
59904: FOR_IN
59905: IFFALSE 59942
// if GetCargo ( i , mat_artifact ) = 0 then
59907: LD_VAR 0 1
59911: PPUSH
59912: LD_INT 4
59914: PPUSH
59915: CALL_OW 289
59919: PUSH
59920: LD_INT 0
59922: EQUAL
59923: IFFALSE 59940
// SetCargo ( i , mat_siberit , 100 ) ;
59925: LD_VAR 0 1
59929: PPUSH
59930: LD_INT 3
59932: PPUSH
59933: LD_INT 100
59935: PPUSH
59936: CALL_OW 290
59940: GO 59904
59942: POP
59943: POP
// end ;
59944: PPOPN 2
59946: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59947: LD_EXP 30
59951: PUSH
59952: LD_EXP 75
59956: AND
59957: IFFALSE 60140
59959: GO 59961
59961: DISABLE
59962: LD_INT 0
59964: PPUSH
59965: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59966: LD_ADDR_VAR 0 2
59970: PUSH
59971: LD_INT 22
59973: PUSH
59974: LD_OWVAR 2
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PPUSH
59983: CALL_OW 69
59987: ST_TO_ADDR
// if not tmp then
59988: LD_VAR 0 2
59992: NOT
59993: IFFALSE 59997
// exit ;
59995: GO 60140
// for i := 1 to 2 do
59997: LD_ADDR_VAR 0 1
60001: PUSH
60002: DOUBLE
60003: LD_INT 1
60005: DEC
60006: ST_TO_ADDR
60007: LD_INT 2
60009: PUSH
60010: FOR_TO
60011: IFFALSE 60138
// begin uc_side := your_side ;
60013: LD_ADDR_OWVAR 20
60017: PUSH
60018: LD_OWVAR 2
60022: ST_TO_ADDR
// uc_nation := nation_american ;
60023: LD_ADDR_OWVAR 21
60027: PUSH
60028: LD_INT 1
60030: ST_TO_ADDR
// vc_chassis := us_morphling ;
60031: LD_ADDR_OWVAR 37
60035: PUSH
60036: LD_INT 5
60038: ST_TO_ADDR
// vc_engine := engine_siberite ;
60039: LD_ADDR_OWVAR 39
60043: PUSH
60044: LD_INT 3
60046: ST_TO_ADDR
// vc_control := control_computer ;
60047: LD_ADDR_OWVAR 38
60051: PUSH
60052: LD_INT 3
60054: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60055: LD_ADDR_OWVAR 40
60059: PUSH
60060: LD_INT 10
60062: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60063: LD_VAR 0 2
60067: PUSH
60068: LD_INT 1
60070: ARRAY
60071: PPUSH
60072: CALL_OW 310
60076: NOT
60077: IFFALSE 60124
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60079: CALL_OW 45
60083: PPUSH
60084: LD_VAR 0 2
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PPUSH
60093: CALL_OW 250
60097: PPUSH
60098: LD_VAR 0 2
60102: PUSH
60103: LD_INT 1
60105: ARRAY
60106: PPUSH
60107: CALL_OW 251
60111: PPUSH
60112: LD_INT 12
60114: PPUSH
60115: LD_INT 1
60117: PPUSH
60118: CALL_OW 50
60122: GO 60136
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60124: CALL_OW 45
60128: PPUSH
60129: LD_INT 1
60131: PPUSH
60132: CALL_OW 51
// end ;
60136: GO 60010
60138: POP
60139: POP
// end ;
60140: PPOPN 2
60142: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60143: LD_EXP 30
60147: PUSH
60148: LD_EXP 76
60152: AND
60153: IFFALSE 60375
60155: GO 60157
60157: DISABLE
60158: LD_INT 0
60160: PPUSH
60161: PPUSH
60162: PPUSH
60163: PPUSH
60164: PPUSH
60165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60166: LD_ADDR_VAR 0 6
60170: PUSH
60171: LD_INT 22
60173: PUSH
60174: LD_OWVAR 2
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 21
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 3
60195: PUSH
60196: LD_INT 23
60198: PUSH
60199: LD_INT 0
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: LIST
60214: PPUSH
60215: CALL_OW 69
60219: ST_TO_ADDR
// if not tmp then
60220: LD_VAR 0 6
60224: NOT
60225: IFFALSE 60229
// exit ;
60227: GO 60375
// s1 := rand ( 1 , 4 ) ;
60229: LD_ADDR_VAR 0 2
60233: PUSH
60234: LD_INT 1
60236: PPUSH
60237: LD_INT 4
60239: PPUSH
60240: CALL_OW 12
60244: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60245: LD_ADDR_VAR 0 4
60249: PUSH
60250: LD_VAR 0 6
60254: PUSH
60255: LD_INT 1
60257: ARRAY
60258: PPUSH
60259: LD_VAR 0 2
60263: PPUSH
60264: CALL_OW 259
60268: ST_TO_ADDR
// if s1 = 1 then
60269: LD_VAR 0 2
60273: PUSH
60274: LD_INT 1
60276: EQUAL
60277: IFFALSE 60297
// s2 := rand ( 2 , 4 ) else
60279: LD_ADDR_VAR 0 3
60283: PUSH
60284: LD_INT 2
60286: PPUSH
60287: LD_INT 4
60289: PPUSH
60290: CALL_OW 12
60294: ST_TO_ADDR
60295: GO 60305
// s2 := 1 ;
60297: LD_ADDR_VAR 0 3
60301: PUSH
60302: LD_INT 1
60304: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60305: LD_ADDR_VAR 0 5
60309: PUSH
60310: LD_VAR 0 6
60314: PUSH
60315: LD_INT 1
60317: ARRAY
60318: PPUSH
60319: LD_VAR 0 3
60323: PPUSH
60324: CALL_OW 259
60328: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60329: LD_VAR 0 6
60333: PUSH
60334: LD_INT 1
60336: ARRAY
60337: PPUSH
60338: LD_VAR 0 2
60342: PPUSH
60343: LD_VAR 0 5
60347: PPUSH
60348: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60352: LD_VAR 0 6
60356: PUSH
60357: LD_INT 1
60359: ARRAY
60360: PPUSH
60361: LD_VAR 0 3
60365: PPUSH
60366: LD_VAR 0 4
60370: PPUSH
60371: CALL_OW 237
// end ;
60375: PPOPN 6
60377: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60378: LD_EXP 30
60382: PUSH
60383: LD_EXP 77
60387: AND
60388: IFFALSE 60467
60390: GO 60392
60392: DISABLE
60393: LD_INT 0
60395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60396: LD_ADDR_VAR 0 1
60400: PUSH
60401: LD_INT 22
60403: PUSH
60404: LD_OWVAR 2
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 30
60415: PUSH
60416: LD_INT 3
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PPUSH
60427: CALL_OW 69
60431: ST_TO_ADDR
// if not tmp then
60432: LD_VAR 0 1
60436: NOT
60437: IFFALSE 60441
// exit ;
60439: GO 60467
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60441: LD_VAR 0 1
60445: PUSH
60446: LD_INT 1
60448: PPUSH
60449: LD_VAR 0 1
60453: PPUSH
60454: CALL_OW 12
60458: ARRAY
60459: PPUSH
60460: LD_INT 1
60462: PPUSH
60463: CALL_OW 234
// end ;
60467: PPOPN 1
60469: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60470: LD_EXP 30
60474: PUSH
60475: LD_EXP 78
60479: AND
60480: IFFALSE 60592
60482: GO 60484
60484: DISABLE
60485: LD_INT 0
60487: PPUSH
60488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60489: LD_ADDR_VAR 0 2
60493: PUSH
60494: LD_INT 22
60496: PUSH
60497: LD_OWVAR 2
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 2
60508: PUSH
60509: LD_INT 30
60511: PUSH
60512: LD_INT 27
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 30
60521: PUSH
60522: LD_INT 26
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 30
60531: PUSH
60532: LD_INT 28
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PPUSH
60549: CALL_OW 69
60553: ST_TO_ADDR
// if not tmp then
60554: LD_VAR 0 2
60558: NOT
60559: IFFALSE 60563
// exit ;
60561: GO 60592
// for i in tmp do
60563: LD_ADDR_VAR 0 1
60567: PUSH
60568: LD_VAR 0 2
60572: PUSH
60573: FOR_IN
60574: IFFALSE 60590
// SetLives ( i , 1 ) ;
60576: LD_VAR 0 1
60580: PPUSH
60581: LD_INT 1
60583: PPUSH
60584: CALL_OW 234
60588: GO 60573
60590: POP
60591: POP
// end ;
60592: PPOPN 2
60594: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60595: LD_EXP 30
60599: PUSH
60600: LD_EXP 79
60604: AND
60605: IFFALSE 60892
60607: GO 60609
60609: DISABLE
60610: LD_INT 0
60612: PPUSH
60613: PPUSH
60614: PPUSH
// begin i := rand ( 1 , 7 ) ;
60615: LD_ADDR_VAR 0 1
60619: PUSH
60620: LD_INT 1
60622: PPUSH
60623: LD_INT 7
60625: PPUSH
60626: CALL_OW 12
60630: ST_TO_ADDR
// case i of 1 :
60631: LD_VAR 0 1
60635: PUSH
60636: LD_INT 1
60638: DOUBLE
60639: EQUAL
60640: IFTRUE 60644
60642: GO 60654
60644: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60645: LD_STRING earthquake(getX(game), 0, 32)
60647: PPUSH
60648: CALL_OW 559
60652: GO 60892
60654: LD_INT 2
60656: DOUBLE
60657: EQUAL
60658: IFTRUE 60662
60660: GO 60676
60662: POP
// begin ToLua ( displayStucuk(); ) ;
60663: LD_STRING displayStucuk();
60665: PPUSH
60666: CALL_OW 559
// ResetFog ;
60670: CALL_OW 335
// end ; 3 :
60674: GO 60892
60676: LD_INT 3
60678: DOUBLE
60679: EQUAL
60680: IFTRUE 60684
60682: GO 60788
60684: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60685: LD_ADDR_VAR 0 2
60689: PUSH
60690: LD_INT 22
60692: PUSH
60693: LD_OWVAR 2
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 25
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PPUSH
60716: CALL_OW 69
60720: ST_TO_ADDR
// if not tmp then
60721: LD_VAR 0 2
60725: NOT
60726: IFFALSE 60730
// exit ;
60728: GO 60892
// un := tmp [ rand ( 1 , tmp ) ] ;
60730: LD_ADDR_VAR 0 3
60734: PUSH
60735: LD_VAR 0 2
60739: PUSH
60740: LD_INT 1
60742: PPUSH
60743: LD_VAR 0 2
60747: PPUSH
60748: CALL_OW 12
60752: ARRAY
60753: ST_TO_ADDR
// if Crawls ( un ) then
60754: LD_VAR 0 3
60758: PPUSH
60759: CALL_OW 318
60763: IFFALSE 60774
// ComWalk ( un ) ;
60765: LD_VAR 0 3
60769: PPUSH
60770: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60774: LD_VAR 0 3
60778: PPUSH
60779: LD_INT 8
60781: PPUSH
60782: CALL_OW 336
// end ; 4 :
60786: GO 60892
60788: LD_INT 4
60790: DOUBLE
60791: EQUAL
60792: IFTRUE 60796
60794: GO 60870
60796: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60797: LD_ADDR_VAR 0 2
60801: PUSH
60802: LD_INT 22
60804: PUSH
60805: LD_OWVAR 2
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 30
60816: PUSH
60817: LD_INT 29
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PPUSH
60828: CALL_OW 69
60832: ST_TO_ADDR
// if not tmp then
60833: LD_VAR 0 2
60837: NOT
60838: IFFALSE 60842
// exit ;
60840: GO 60892
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60842: LD_VAR 0 2
60846: PUSH
60847: LD_INT 1
60849: ARRAY
60850: PPUSH
60851: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60855: LD_VAR 0 2
60859: PUSH
60860: LD_INT 1
60862: ARRAY
60863: PPUSH
60864: CALL_OW 65
// end ; 5 .. 7 :
60868: GO 60892
60870: LD_INT 5
60872: DOUBLE
60873: GREATEREQUAL
60874: IFFALSE 60882
60876: LD_INT 7
60878: DOUBLE
60879: LESSEQUAL
60880: IFTRUE 60884
60882: GO 60891
60884: POP
// StreamSibBomb ; end ;
60885: CALL 57129 0 0
60889: GO 60892
60891: POP
// end ;
60892: PPOPN 3
60894: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60895: LD_EXP 30
60899: PUSH
60900: LD_EXP 80
60904: AND
60905: IFFALSE 61061
60907: GO 60909
60909: DISABLE
60910: LD_INT 0
60912: PPUSH
60913: PPUSH
60914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60915: LD_ADDR_VAR 0 2
60919: PUSH
60920: LD_INT 81
60922: PUSH
60923: LD_OWVAR 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: LD_INT 21
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 21
60947: PUSH
60948: LD_INT 2
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: LIST
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PPUSH
60964: CALL_OW 69
60968: ST_TO_ADDR
// if not tmp then
60969: LD_VAR 0 2
60973: NOT
60974: IFFALSE 60978
// exit ;
60976: GO 61061
// p := 0 ;
60978: LD_ADDR_VAR 0 3
60982: PUSH
60983: LD_INT 0
60985: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60986: LD_INT 35
60988: PPUSH
60989: CALL_OW 67
// p := p + 1 ;
60993: LD_ADDR_VAR 0 3
60997: PUSH
60998: LD_VAR 0 3
61002: PUSH
61003: LD_INT 1
61005: PLUS
61006: ST_TO_ADDR
// for i in tmp do
61007: LD_ADDR_VAR 0 1
61011: PUSH
61012: LD_VAR 0 2
61016: PUSH
61017: FOR_IN
61018: IFFALSE 61049
// if GetLives ( i ) < 1000 then
61020: LD_VAR 0 1
61024: PPUSH
61025: CALL_OW 256
61029: PUSH
61030: LD_INT 1000
61032: LESS
61033: IFFALSE 61047
// SetLives ( i , 1000 ) ;
61035: LD_VAR 0 1
61039: PPUSH
61040: LD_INT 1000
61042: PPUSH
61043: CALL_OW 234
61047: GO 61017
61049: POP
61050: POP
// until p > 20 ;
61051: LD_VAR 0 3
61055: PUSH
61056: LD_INT 20
61058: GREATER
61059: IFFALSE 60986
// end ;
61061: PPOPN 3
61063: END
// every 0 0$1 trigger StreamModeActive and sTime do
61064: LD_EXP 30
61068: PUSH
61069: LD_EXP 81
61073: AND
61074: IFFALSE 61109
61076: GO 61078
61078: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61079: LD_INT 28
61081: PPUSH
61082: LD_OWVAR 2
61086: PPUSH
61087: LD_INT 2
61089: PPUSH
61090: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61094: LD_INT 30
61096: PPUSH
61097: LD_OWVAR 2
61101: PPUSH
61102: LD_INT 2
61104: PPUSH
61105: CALL_OW 322
// end ;
61109: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61110: LD_EXP 30
61114: PUSH
61115: LD_EXP 82
61119: AND
61120: IFFALSE 61241
61122: GO 61124
61124: DISABLE
61125: LD_INT 0
61127: PPUSH
61128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61129: LD_ADDR_VAR 0 2
61133: PUSH
61134: LD_INT 22
61136: PUSH
61137: LD_OWVAR 2
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 21
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: LD_INT 23
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: LIST
61177: PPUSH
61178: CALL_OW 69
61182: ST_TO_ADDR
// if not tmp then
61183: LD_VAR 0 2
61187: NOT
61188: IFFALSE 61192
// exit ;
61190: GO 61241
// for i in tmp do
61192: LD_ADDR_VAR 0 1
61196: PUSH
61197: LD_VAR 0 2
61201: PUSH
61202: FOR_IN
61203: IFFALSE 61239
// begin if Crawls ( i ) then
61205: LD_VAR 0 1
61209: PPUSH
61210: CALL_OW 318
61214: IFFALSE 61225
// ComWalk ( i ) ;
61216: LD_VAR 0 1
61220: PPUSH
61221: CALL_OW 138
// SetClass ( i , 2 ) ;
61225: LD_VAR 0 1
61229: PPUSH
61230: LD_INT 2
61232: PPUSH
61233: CALL_OW 336
// end ;
61237: GO 61202
61239: POP
61240: POP
// end ;
61241: PPOPN 2
61243: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61244: LD_EXP 30
61248: PUSH
61249: LD_EXP 83
61253: AND
61254: IFFALSE 61542
61256: GO 61258
61258: DISABLE
61259: LD_INT 0
61261: PPUSH
61262: PPUSH
61263: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61264: LD_OWVAR 2
61268: PPUSH
61269: LD_INT 9
61271: PPUSH
61272: LD_INT 1
61274: PPUSH
61275: LD_INT 1
61277: PPUSH
61278: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61282: LD_INT 9
61284: PPUSH
61285: LD_OWVAR 2
61289: PPUSH
61290: CALL_OW 343
// uc_side := 9 ;
61294: LD_ADDR_OWVAR 20
61298: PUSH
61299: LD_INT 9
61301: ST_TO_ADDR
// uc_nation := 2 ;
61302: LD_ADDR_OWVAR 21
61306: PUSH
61307: LD_INT 2
61309: ST_TO_ADDR
// hc_name := Dark Warrior ;
61310: LD_ADDR_OWVAR 26
61314: PUSH
61315: LD_STRING Dark Warrior
61317: ST_TO_ADDR
// hc_gallery :=  ;
61318: LD_ADDR_OWVAR 33
61322: PUSH
61323: LD_STRING 
61325: ST_TO_ADDR
// hc_noskilllimit := true ;
61326: LD_ADDR_OWVAR 76
61330: PUSH
61331: LD_INT 1
61333: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61334: LD_ADDR_OWVAR 31
61338: PUSH
61339: LD_INT 30
61341: PUSH
61342: LD_INT 30
61344: PUSH
61345: LD_INT 30
61347: PUSH
61348: LD_INT 30
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// un := CreateHuman ;
61357: LD_ADDR_VAR 0 3
61361: PUSH
61362: CALL_OW 44
61366: ST_TO_ADDR
// hc_noskilllimit := false ;
61367: LD_ADDR_OWVAR 76
61371: PUSH
61372: LD_INT 0
61374: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61375: LD_VAR 0 3
61379: PPUSH
61380: LD_INT 1
61382: PPUSH
61383: CALL_OW 51
// ToLua ( playRanger() ) ;
61387: LD_STRING playRanger()
61389: PPUSH
61390: CALL_OW 559
// p := 0 ;
61394: LD_ADDR_VAR 0 2
61398: PUSH
61399: LD_INT 0
61401: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61402: LD_INT 35
61404: PPUSH
61405: CALL_OW 67
// p := p + 1 ;
61409: LD_ADDR_VAR 0 2
61413: PUSH
61414: LD_VAR 0 2
61418: PUSH
61419: LD_INT 1
61421: PLUS
61422: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61423: LD_VAR 0 3
61427: PPUSH
61428: CALL_OW 256
61432: PUSH
61433: LD_INT 1000
61435: LESS
61436: IFFALSE 61450
// SetLives ( un , 1000 ) ;
61438: LD_VAR 0 3
61442: PPUSH
61443: LD_INT 1000
61445: PPUSH
61446: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61450: LD_VAR 0 3
61454: PPUSH
61455: LD_INT 81
61457: PUSH
61458: LD_OWVAR 2
61462: PUSH
61463: EMPTY
61464: LIST
61465: LIST
61466: PUSH
61467: LD_INT 91
61469: PUSH
61470: LD_VAR 0 3
61474: PUSH
61475: LD_INT 30
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: LIST
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: PPUSH
61487: CALL_OW 69
61491: PPUSH
61492: LD_VAR 0 3
61496: PPUSH
61497: CALL_OW 74
61501: PPUSH
61502: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61506: LD_VAR 0 2
61510: PUSH
61511: LD_INT 80
61513: GREATER
61514: PUSH
61515: LD_VAR 0 3
61519: PPUSH
61520: CALL_OW 301
61524: OR
61525: IFFALSE 61402
// if un then
61527: LD_VAR 0 3
61531: IFFALSE 61542
// RemoveUnit ( un ) ;
61533: LD_VAR 0 3
61537: PPUSH
61538: CALL_OW 64
// end ;
61542: PPOPN 3
61544: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
61545: LD_EXP 84
61549: IFFALSE 61665
61551: GO 61553
61553: DISABLE
61554: LD_INT 0
61556: PPUSH
61557: PPUSH
61558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61559: LD_ADDR_VAR 0 2
61563: PUSH
61564: LD_INT 81
61566: PUSH
61567: LD_OWVAR 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 21
61578: PUSH
61579: LD_INT 1
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PPUSH
61590: CALL_OW 69
61594: ST_TO_ADDR
// ToLua ( playComputer() ) ;
61595: LD_STRING playComputer()
61597: PPUSH
61598: CALL_OW 559
// if not tmp then
61602: LD_VAR 0 2
61606: NOT
61607: IFFALSE 61611
// exit ;
61609: GO 61665
// for i in tmp do
61611: LD_ADDR_VAR 0 1
61615: PUSH
61616: LD_VAR 0 2
61620: PUSH
61621: FOR_IN
61622: IFFALSE 61663
// for j := 1 to 4 do
61624: LD_ADDR_VAR 0 3
61628: PUSH
61629: DOUBLE
61630: LD_INT 1
61632: DEC
61633: ST_TO_ADDR
61634: LD_INT 4
61636: PUSH
61637: FOR_TO
61638: IFFALSE 61659
// SetSkill ( i , j , 10 ) ;
61640: LD_VAR 0 1
61644: PPUSH
61645: LD_VAR 0 3
61649: PPUSH
61650: LD_INT 10
61652: PPUSH
61653: CALL_OW 237
61657: GO 61637
61659: POP
61660: POP
61661: GO 61621
61663: POP
61664: POP
// end ;
61665: PPOPN 3
61667: END
// every 0 0$1 trigger s30 do var i , tmp ;
61668: LD_EXP 85
61672: IFFALSE 61741
61674: GO 61676
61676: DISABLE
61677: LD_INT 0
61679: PPUSH
61680: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61681: LD_ADDR_VAR 0 2
61685: PUSH
61686: LD_INT 22
61688: PUSH
61689: LD_OWVAR 2
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PPUSH
61698: CALL_OW 69
61702: ST_TO_ADDR
// if not tmp then
61703: LD_VAR 0 2
61707: NOT
61708: IFFALSE 61712
// exit ;
61710: GO 61741
// for i in tmp do
61712: LD_ADDR_VAR 0 1
61716: PUSH
61717: LD_VAR 0 2
61721: PUSH
61722: FOR_IN
61723: IFFALSE 61739
// SetLives ( i , 300 ) ;
61725: LD_VAR 0 1
61729: PPUSH
61730: LD_INT 300
61732: PPUSH
61733: CALL_OW 234
61737: GO 61722
61739: POP
61740: POP
// end ;
61741: PPOPN 2
61743: END
// every 0 0$1 trigger s60 do var i , tmp ;
61744: LD_EXP 86
61748: IFFALSE 61817
61750: GO 61752
61752: DISABLE
61753: LD_INT 0
61755: PPUSH
61756: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61757: LD_ADDR_VAR 0 2
61761: PUSH
61762: LD_INT 22
61764: PUSH
61765: LD_OWVAR 2
61769: PUSH
61770: EMPTY
61771: LIST
61772: LIST
61773: PPUSH
61774: CALL_OW 69
61778: ST_TO_ADDR
// if not tmp then
61779: LD_VAR 0 2
61783: NOT
61784: IFFALSE 61788
// exit ;
61786: GO 61817
// for i in tmp do
61788: LD_ADDR_VAR 0 1
61792: PUSH
61793: LD_VAR 0 2
61797: PUSH
61798: FOR_IN
61799: IFFALSE 61815
// SetLives ( i , 600 ) ;
61801: LD_VAR 0 1
61805: PPUSH
61806: LD_INT 600
61808: PPUSH
61809: CALL_OW 234
61813: GO 61798
61815: POP
61816: POP
// end ;
61817: PPOPN 2
61819: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61820: LD_INT 0
61822: PPUSH
// case cmd of 301 :
61823: LD_VAR 0 1
61827: PUSH
61828: LD_INT 301
61830: DOUBLE
61831: EQUAL
61832: IFTRUE 61836
61834: GO 61868
61836: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61837: LD_VAR 0 6
61841: PPUSH
61842: LD_VAR 0 7
61846: PPUSH
61847: LD_VAR 0 8
61851: PPUSH
61852: LD_VAR 0 4
61856: PPUSH
61857: LD_VAR 0 5
61861: PPUSH
61862: CALL 63077 0 5
61866: GO 61989
61868: LD_INT 302
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61876
61874: GO 61913
61876: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61877: LD_VAR 0 6
61881: PPUSH
61882: LD_VAR 0 7
61886: PPUSH
61887: LD_VAR 0 8
61891: PPUSH
61892: LD_VAR 0 9
61896: PPUSH
61897: LD_VAR 0 4
61901: PPUSH
61902: LD_VAR 0 5
61906: PPUSH
61907: CALL 63168 0 6
61911: GO 61989
61913: LD_INT 303
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61921
61919: GO 61958
61921: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61922: LD_VAR 0 6
61926: PPUSH
61927: LD_VAR 0 7
61931: PPUSH
61932: LD_VAR 0 8
61936: PPUSH
61937: LD_VAR 0 9
61941: PPUSH
61942: LD_VAR 0 4
61946: PPUSH
61947: LD_VAR 0 5
61951: PPUSH
61952: CALL 61994 0 6
61956: GO 61989
61958: LD_INT 304
61960: DOUBLE
61961: EQUAL
61962: IFTRUE 61966
61964: GO 61988
61966: POP
// hHackTeleport ( unit , x , y ) ; end ;
61967: LD_VAR 0 2
61971: PPUSH
61972: LD_VAR 0 4
61976: PPUSH
61977: LD_VAR 0 5
61981: PPUSH
61982: CALL 63761 0 3
61986: GO 61989
61988: POP
// end ;
61989: LD_VAR 0 12
61993: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61994: LD_INT 0
61996: PPUSH
61997: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61998: LD_VAR 0 1
62002: PUSH
62003: LD_INT 1
62005: LESS
62006: PUSH
62007: LD_VAR 0 1
62011: PUSH
62012: LD_INT 3
62014: GREATER
62015: OR
62016: PUSH
62017: LD_VAR 0 5
62021: PPUSH
62022: LD_VAR 0 6
62026: PPUSH
62027: CALL_OW 428
62031: OR
62032: IFFALSE 62036
// exit ;
62034: GO 62764
// uc_side := your_side ;
62036: LD_ADDR_OWVAR 20
62040: PUSH
62041: LD_OWVAR 2
62045: ST_TO_ADDR
// uc_nation := nation ;
62046: LD_ADDR_OWVAR 21
62050: PUSH
62051: LD_VAR 0 1
62055: ST_TO_ADDR
// bc_level = 1 ;
62056: LD_ADDR_OWVAR 43
62060: PUSH
62061: LD_INT 1
62063: ST_TO_ADDR
// case btype of 1 :
62064: LD_VAR 0 2
62068: PUSH
62069: LD_INT 1
62071: DOUBLE
62072: EQUAL
62073: IFTRUE 62077
62075: GO 62088
62077: POP
// bc_type := b_depot ; 2 :
62078: LD_ADDR_OWVAR 42
62082: PUSH
62083: LD_INT 0
62085: ST_TO_ADDR
62086: GO 62708
62088: LD_INT 2
62090: DOUBLE
62091: EQUAL
62092: IFTRUE 62096
62094: GO 62107
62096: POP
// bc_type := b_warehouse ; 3 :
62097: LD_ADDR_OWVAR 42
62101: PUSH
62102: LD_INT 1
62104: ST_TO_ADDR
62105: GO 62708
62107: LD_INT 3
62109: DOUBLE
62110: EQUAL
62111: IFTRUE 62115
62113: GO 62126
62115: POP
// bc_type := b_lab ; 4 .. 9 :
62116: LD_ADDR_OWVAR 42
62120: PUSH
62121: LD_INT 6
62123: ST_TO_ADDR
62124: GO 62708
62126: LD_INT 4
62128: DOUBLE
62129: GREATEREQUAL
62130: IFFALSE 62138
62132: LD_INT 9
62134: DOUBLE
62135: LESSEQUAL
62136: IFTRUE 62140
62138: GO 62200
62140: POP
// begin bc_type := b_lab_half ;
62141: LD_ADDR_OWVAR 42
62145: PUSH
62146: LD_INT 7
62148: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62149: LD_ADDR_OWVAR 44
62153: PUSH
62154: LD_INT 10
62156: PUSH
62157: LD_INT 11
62159: PUSH
62160: LD_INT 12
62162: PUSH
62163: LD_INT 15
62165: PUSH
62166: LD_INT 14
62168: PUSH
62169: LD_INT 13
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: PUSH
62180: LD_VAR 0 2
62184: PUSH
62185: LD_INT 3
62187: MINUS
62188: ARRAY
62189: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
62190: LD_ADDR_OWVAR 45
62194: PUSH
62195: LD_INT 9
62197: ST_TO_ADDR
// end ; 10 .. 13 :
62198: GO 62708
62200: LD_INT 10
62202: DOUBLE
62203: GREATEREQUAL
62204: IFFALSE 62212
62206: LD_INT 13
62208: DOUBLE
62209: LESSEQUAL
62210: IFTRUE 62214
62212: GO 62291
62214: POP
// begin bc_type := b_lab_full ;
62215: LD_ADDR_OWVAR 42
62219: PUSH
62220: LD_INT 8
62222: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62223: LD_ADDR_OWVAR 44
62227: PUSH
62228: LD_INT 10
62230: PUSH
62231: LD_INT 12
62233: PUSH
62234: LD_INT 14
62236: PUSH
62237: LD_INT 13
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: PUSH
62246: LD_VAR 0 2
62250: PUSH
62251: LD_INT 9
62253: MINUS
62254: ARRAY
62255: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62256: LD_ADDR_OWVAR 45
62260: PUSH
62261: LD_INT 11
62263: PUSH
62264: LD_INT 15
62266: PUSH
62267: LD_INT 12
62269: PUSH
62270: LD_INT 15
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: PUSH
62279: LD_VAR 0 2
62283: PUSH
62284: LD_INT 9
62286: MINUS
62287: ARRAY
62288: ST_TO_ADDR
// end ; 14 :
62289: GO 62708
62291: LD_INT 14
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62299
62297: GO 62310
62299: POP
// bc_type := b_workshop ; 15 :
62300: LD_ADDR_OWVAR 42
62304: PUSH
62305: LD_INT 2
62307: ST_TO_ADDR
62308: GO 62708
62310: LD_INT 15
62312: DOUBLE
62313: EQUAL
62314: IFTRUE 62318
62316: GO 62329
62318: POP
// bc_type := b_factory ; 16 :
62319: LD_ADDR_OWVAR 42
62323: PUSH
62324: LD_INT 3
62326: ST_TO_ADDR
62327: GO 62708
62329: LD_INT 16
62331: DOUBLE
62332: EQUAL
62333: IFTRUE 62337
62335: GO 62348
62337: POP
// bc_type := b_ext_gun ; 17 :
62338: LD_ADDR_OWVAR 42
62342: PUSH
62343: LD_INT 17
62345: ST_TO_ADDR
62346: GO 62708
62348: LD_INT 17
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62356
62354: GO 62384
62356: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62357: LD_ADDR_OWVAR 42
62361: PUSH
62362: LD_INT 19
62364: PUSH
62365: LD_INT 23
62367: PUSH
62368: LD_INT 19
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: LIST
62375: PUSH
62376: LD_VAR 0 1
62380: ARRAY
62381: ST_TO_ADDR
62382: GO 62708
62384: LD_INT 18
62386: DOUBLE
62387: EQUAL
62388: IFTRUE 62392
62390: GO 62403
62392: POP
// bc_type := b_ext_radar ; 19 :
62393: LD_ADDR_OWVAR 42
62397: PUSH
62398: LD_INT 20
62400: ST_TO_ADDR
62401: GO 62708
62403: LD_INT 19
62405: DOUBLE
62406: EQUAL
62407: IFTRUE 62411
62409: GO 62422
62411: POP
// bc_type := b_ext_radio ; 20 :
62412: LD_ADDR_OWVAR 42
62416: PUSH
62417: LD_INT 22
62419: ST_TO_ADDR
62420: GO 62708
62422: LD_INT 20
62424: DOUBLE
62425: EQUAL
62426: IFTRUE 62430
62428: GO 62441
62430: POP
// bc_type := b_ext_siberium ; 21 :
62431: LD_ADDR_OWVAR 42
62435: PUSH
62436: LD_INT 21
62438: ST_TO_ADDR
62439: GO 62708
62441: LD_INT 21
62443: DOUBLE
62444: EQUAL
62445: IFTRUE 62449
62447: GO 62460
62449: POP
// bc_type := b_ext_computer ; 22 :
62450: LD_ADDR_OWVAR 42
62454: PUSH
62455: LD_INT 24
62457: ST_TO_ADDR
62458: GO 62708
62460: LD_INT 22
62462: DOUBLE
62463: EQUAL
62464: IFTRUE 62468
62466: GO 62479
62468: POP
// bc_type := b_ext_track ; 23 :
62469: LD_ADDR_OWVAR 42
62473: PUSH
62474: LD_INT 16
62476: ST_TO_ADDR
62477: GO 62708
62479: LD_INT 23
62481: DOUBLE
62482: EQUAL
62483: IFTRUE 62487
62485: GO 62498
62487: POP
// bc_type := b_ext_laser ; 24 :
62488: LD_ADDR_OWVAR 42
62492: PUSH
62493: LD_INT 25
62495: ST_TO_ADDR
62496: GO 62708
62498: LD_INT 24
62500: DOUBLE
62501: EQUAL
62502: IFTRUE 62506
62504: GO 62517
62506: POP
// bc_type := b_control_tower ; 25 :
62507: LD_ADDR_OWVAR 42
62511: PUSH
62512: LD_INT 36
62514: ST_TO_ADDR
62515: GO 62708
62517: LD_INT 25
62519: DOUBLE
62520: EQUAL
62521: IFTRUE 62525
62523: GO 62536
62525: POP
// bc_type := b_breastwork ; 26 :
62526: LD_ADDR_OWVAR 42
62530: PUSH
62531: LD_INT 31
62533: ST_TO_ADDR
62534: GO 62708
62536: LD_INT 26
62538: DOUBLE
62539: EQUAL
62540: IFTRUE 62544
62542: GO 62555
62544: POP
// bc_type := b_bunker ; 27 :
62545: LD_ADDR_OWVAR 42
62549: PUSH
62550: LD_INT 32
62552: ST_TO_ADDR
62553: GO 62708
62555: LD_INT 27
62557: DOUBLE
62558: EQUAL
62559: IFTRUE 62563
62561: GO 62574
62563: POP
// bc_type := b_turret ; 28 :
62564: LD_ADDR_OWVAR 42
62568: PUSH
62569: LD_INT 33
62571: ST_TO_ADDR
62572: GO 62708
62574: LD_INT 28
62576: DOUBLE
62577: EQUAL
62578: IFTRUE 62582
62580: GO 62593
62582: POP
// bc_type := b_armoury ; 29 :
62583: LD_ADDR_OWVAR 42
62587: PUSH
62588: LD_INT 4
62590: ST_TO_ADDR
62591: GO 62708
62593: LD_INT 29
62595: DOUBLE
62596: EQUAL
62597: IFTRUE 62601
62599: GO 62612
62601: POP
// bc_type := b_barracks ; 30 :
62602: LD_ADDR_OWVAR 42
62606: PUSH
62607: LD_INT 5
62609: ST_TO_ADDR
62610: GO 62708
62612: LD_INT 30
62614: DOUBLE
62615: EQUAL
62616: IFTRUE 62620
62618: GO 62631
62620: POP
// bc_type := b_solar_power ; 31 :
62621: LD_ADDR_OWVAR 42
62625: PUSH
62626: LD_INT 27
62628: ST_TO_ADDR
62629: GO 62708
62631: LD_INT 31
62633: DOUBLE
62634: EQUAL
62635: IFTRUE 62639
62637: GO 62650
62639: POP
// bc_type := b_oil_power ; 32 :
62640: LD_ADDR_OWVAR 42
62644: PUSH
62645: LD_INT 26
62647: ST_TO_ADDR
62648: GO 62708
62650: LD_INT 32
62652: DOUBLE
62653: EQUAL
62654: IFTRUE 62658
62656: GO 62669
62658: POP
// bc_type := b_siberite_power ; 33 :
62659: LD_ADDR_OWVAR 42
62663: PUSH
62664: LD_INT 28
62666: ST_TO_ADDR
62667: GO 62708
62669: LD_INT 33
62671: DOUBLE
62672: EQUAL
62673: IFTRUE 62677
62675: GO 62688
62677: POP
// bc_type := b_oil_mine ; 34 :
62678: LD_ADDR_OWVAR 42
62682: PUSH
62683: LD_INT 29
62685: ST_TO_ADDR
62686: GO 62708
62688: LD_INT 34
62690: DOUBLE
62691: EQUAL
62692: IFTRUE 62696
62694: GO 62707
62696: POP
// bc_type := b_siberite_mine ; end ;
62697: LD_ADDR_OWVAR 42
62701: PUSH
62702: LD_INT 30
62704: ST_TO_ADDR
62705: GO 62708
62707: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62708: LD_ADDR_VAR 0 8
62712: PUSH
62713: LD_VAR 0 5
62717: PPUSH
62718: LD_VAR 0 6
62722: PPUSH
62723: LD_VAR 0 3
62727: PPUSH
62728: CALL_OW 47
62732: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62733: LD_OWVAR 42
62737: PUSH
62738: LD_INT 32
62740: PUSH
62741: LD_INT 33
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: IN
62748: IFFALSE 62764
// PlaceWeaponTurret ( b , weapon ) ;
62750: LD_VAR 0 8
62754: PPUSH
62755: LD_VAR 0 4
62759: PPUSH
62760: CALL_OW 431
// end ;
62764: LD_VAR 0 7
62768: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62769: LD_INT 0
62771: PPUSH
62772: PPUSH
62773: PPUSH
62774: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62775: LD_ADDR_VAR 0 4
62779: PUSH
62780: LD_INT 22
62782: PUSH
62783: LD_OWVAR 2
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 2
62794: PUSH
62795: LD_INT 30
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 30
62807: PUSH
62808: LD_INT 1
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: LIST
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PPUSH
62824: CALL_OW 69
62828: ST_TO_ADDR
// if not tmp then
62829: LD_VAR 0 4
62833: NOT
62834: IFFALSE 62838
// exit ;
62836: GO 62897
// for i in tmp do
62838: LD_ADDR_VAR 0 2
62842: PUSH
62843: LD_VAR 0 4
62847: PUSH
62848: FOR_IN
62849: IFFALSE 62895
// for j = 1 to 3 do
62851: LD_ADDR_VAR 0 3
62855: PUSH
62856: DOUBLE
62857: LD_INT 1
62859: DEC
62860: ST_TO_ADDR
62861: LD_INT 3
62863: PUSH
62864: FOR_TO
62865: IFFALSE 62891
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62867: LD_VAR 0 2
62871: PPUSH
62872: CALL_OW 274
62876: PPUSH
62877: LD_VAR 0 3
62881: PPUSH
62882: LD_INT 99999
62884: PPUSH
62885: CALL_OW 277
62889: GO 62864
62891: POP
62892: POP
62893: GO 62848
62895: POP
62896: POP
// end ;
62897: LD_VAR 0 1
62901: RET
// export function hHackSetLevel10 ; var i , j ; begin
62902: LD_INT 0
62904: PPUSH
62905: PPUSH
62906: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62907: LD_ADDR_VAR 0 2
62911: PUSH
62912: LD_INT 21
62914: PUSH
62915: LD_INT 1
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PPUSH
62922: CALL_OW 69
62926: PUSH
62927: FOR_IN
62928: IFFALSE 62980
// if IsSelected ( i ) then
62930: LD_VAR 0 2
62934: PPUSH
62935: CALL_OW 306
62939: IFFALSE 62978
// begin for j := 1 to 4 do
62941: LD_ADDR_VAR 0 3
62945: PUSH
62946: DOUBLE
62947: LD_INT 1
62949: DEC
62950: ST_TO_ADDR
62951: LD_INT 4
62953: PUSH
62954: FOR_TO
62955: IFFALSE 62976
// SetSkill ( i , j , 10 ) ;
62957: LD_VAR 0 2
62961: PPUSH
62962: LD_VAR 0 3
62966: PPUSH
62967: LD_INT 10
62969: PPUSH
62970: CALL_OW 237
62974: GO 62954
62976: POP
62977: POP
// end ;
62978: GO 62927
62980: POP
62981: POP
// end ;
62982: LD_VAR 0 1
62986: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62987: LD_INT 0
62989: PPUSH
62990: PPUSH
62991: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62992: LD_ADDR_VAR 0 2
62996: PUSH
62997: LD_INT 22
62999: PUSH
63000: LD_OWVAR 2
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 21
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PPUSH
63023: CALL_OW 69
63027: PUSH
63028: FOR_IN
63029: IFFALSE 63070
// begin for j := 1 to 4 do
63031: LD_ADDR_VAR 0 3
63035: PUSH
63036: DOUBLE
63037: LD_INT 1
63039: DEC
63040: ST_TO_ADDR
63041: LD_INT 4
63043: PUSH
63044: FOR_TO
63045: IFFALSE 63066
// SetSkill ( i , j , 10 ) ;
63047: LD_VAR 0 2
63051: PPUSH
63052: LD_VAR 0 3
63056: PPUSH
63057: LD_INT 10
63059: PPUSH
63060: CALL_OW 237
63064: GO 63044
63066: POP
63067: POP
// end ;
63068: GO 63028
63070: POP
63071: POP
// end ;
63072: LD_VAR 0 1
63076: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63077: LD_INT 0
63079: PPUSH
// uc_side := your_side ;
63080: LD_ADDR_OWVAR 20
63084: PUSH
63085: LD_OWVAR 2
63089: ST_TO_ADDR
// uc_nation := nation ;
63090: LD_ADDR_OWVAR 21
63094: PUSH
63095: LD_VAR 0 1
63099: ST_TO_ADDR
// InitHc ;
63100: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63104: LD_INT 0
63106: PPUSH
63107: LD_VAR 0 2
63111: PPUSH
63112: LD_VAR 0 3
63116: PPUSH
63117: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63121: LD_VAR 0 4
63125: PPUSH
63126: LD_VAR 0 5
63130: PPUSH
63131: CALL_OW 428
63135: PUSH
63136: LD_INT 0
63138: EQUAL
63139: IFFALSE 63163
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63141: CALL_OW 44
63145: PPUSH
63146: LD_VAR 0 4
63150: PPUSH
63151: LD_VAR 0 5
63155: PPUSH
63156: LD_INT 1
63158: PPUSH
63159: CALL_OW 48
// end ;
63163: LD_VAR 0 6
63167: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63168: LD_INT 0
63170: PPUSH
63171: PPUSH
// uc_side := your_side ;
63172: LD_ADDR_OWVAR 20
63176: PUSH
63177: LD_OWVAR 2
63181: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63182: LD_VAR 0 1
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 2
63192: PUSH
63193: LD_INT 3
63195: PUSH
63196: LD_INT 4
63198: PUSH
63199: LD_INT 5
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: IN
63209: IFFALSE 63221
// uc_nation := nation_american else
63211: LD_ADDR_OWVAR 21
63215: PUSH
63216: LD_INT 1
63218: ST_TO_ADDR
63219: GO 63264
// if chassis in [ 11 , 12 , 13 , 14 ] then
63221: LD_VAR 0 1
63225: PUSH
63226: LD_INT 11
63228: PUSH
63229: LD_INT 12
63231: PUSH
63232: LD_INT 13
63234: PUSH
63235: LD_INT 14
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: IN
63244: IFFALSE 63256
// uc_nation := nation_arabian else
63246: LD_ADDR_OWVAR 21
63250: PUSH
63251: LD_INT 2
63253: ST_TO_ADDR
63254: GO 63264
// uc_nation := nation_russian ;
63256: LD_ADDR_OWVAR 21
63260: PUSH
63261: LD_INT 3
63263: ST_TO_ADDR
// vc_chassis := chassis ;
63264: LD_ADDR_OWVAR 37
63268: PUSH
63269: LD_VAR 0 1
63273: ST_TO_ADDR
// vc_engine := engine ;
63274: LD_ADDR_OWVAR 39
63278: PUSH
63279: LD_VAR 0 2
63283: ST_TO_ADDR
// vc_control := control ;
63284: LD_ADDR_OWVAR 38
63288: PUSH
63289: LD_VAR 0 3
63293: ST_TO_ADDR
// vc_weapon := weapon ;
63294: LD_ADDR_OWVAR 40
63298: PUSH
63299: LD_VAR 0 4
63303: ST_TO_ADDR
// un := CreateVehicle ;
63304: LD_ADDR_VAR 0 8
63308: PUSH
63309: CALL_OW 45
63313: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63314: LD_VAR 0 8
63318: PPUSH
63319: LD_INT 0
63321: PPUSH
63322: LD_INT 5
63324: PPUSH
63325: CALL_OW 12
63329: PPUSH
63330: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63334: LD_VAR 0 8
63338: PPUSH
63339: LD_VAR 0 5
63343: PPUSH
63344: LD_VAR 0 6
63348: PPUSH
63349: LD_INT 1
63351: PPUSH
63352: CALL_OW 48
// end ;
63356: LD_VAR 0 7
63360: RET
// export hInvincible ; every 1 do
63361: GO 63363
63363: DISABLE
// hInvincible := [ ] ;
63364: LD_ADDR_EXP 87
63368: PUSH
63369: EMPTY
63370: ST_TO_ADDR
63371: END
// every 10 do var i ;
63372: GO 63374
63374: DISABLE
63375: LD_INT 0
63377: PPUSH
// begin enable ;
63378: ENABLE
// if not hInvincible then
63379: LD_EXP 87
63383: NOT
63384: IFFALSE 63388
// exit ;
63386: GO 63432
// for i in hInvincible do
63388: LD_ADDR_VAR 0 1
63392: PUSH
63393: LD_EXP 87
63397: PUSH
63398: FOR_IN
63399: IFFALSE 63430
// if GetLives ( i ) < 1000 then
63401: LD_VAR 0 1
63405: PPUSH
63406: CALL_OW 256
63410: PUSH
63411: LD_INT 1000
63413: LESS
63414: IFFALSE 63428
// SetLives ( i , 1000 ) ;
63416: LD_VAR 0 1
63420: PPUSH
63421: LD_INT 1000
63423: PPUSH
63424: CALL_OW 234
63428: GO 63398
63430: POP
63431: POP
// end ;
63432: PPOPN 1
63434: END
// export function hHackInvincible ; var i ; begin
63435: LD_INT 0
63437: PPUSH
63438: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63439: LD_ADDR_VAR 0 2
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: LD_INT 21
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 21
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: LIST
63471: PPUSH
63472: CALL_OW 69
63476: PUSH
63477: FOR_IN
63478: IFFALSE 63539
// if IsSelected ( i ) then
63480: LD_VAR 0 2
63484: PPUSH
63485: CALL_OW 306
63489: IFFALSE 63537
// begin if i in hInvincible then
63491: LD_VAR 0 2
63495: PUSH
63496: LD_EXP 87
63500: IN
63501: IFFALSE 63521
// hInvincible := hInvincible diff i else
63503: LD_ADDR_EXP 87
63507: PUSH
63508: LD_EXP 87
63512: PUSH
63513: LD_VAR 0 2
63517: DIFF
63518: ST_TO_ADDR
63519: GO 63537
// hInvincible := hInvincible union i ;
63521: LD_ADDR_EXP 87
63525: PUSH
63526: LD_EXP 87
63530: PUSH
63531: LD_VAR 0 2
63535: UNION
63536: ST_TO_ADDR
// end ;
63537: GO 63477
63539: POP
63540: POP
// end ;
63541: LD_VAR 0 1
63545: RET
// export function hHackInvisible ; var i , j ; begin
63546: LD_INT 0
63548: PPUSH
63549: PPUSH
63550: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63551: LD_ADDR_VAR 0 2
63555: PUSH
63556: LD_INT 21
63558: PUSH
63559: LD_INT 1
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PPUSH
63566: CALL_OW 69
63570: PUSH
63571: FOR_IN
63572: IFFALSE 63596
// if IsSelected ( i ) then
63574: LD_VAR 0 2
63578: PPUSH
63579: CALL_OW 306
63583: IFFALSE 63594
// ComForceInvisible ( i ) ;
63585: LD_VAR 0 2
63589: PPUSH
63590: CALL_OW 496
63594: GO 63571
63596: POP
63597: POP
// end ;
63598: LD_VAR 0 1
63602: RET
// export function hHackChangeYourSide ; begin
63603: LD_INT 0
63605: PPUSH
// if your_side = 8 then
63606: LD_OWVAR 2
63610: PUSH
63611: LD_INT 8
63613: EQUAL
63614: IFFALSE 63626
// your_side := 0 else
63616: LD_ADDR_OWVAR 2
63620: PUSH
63621: LD_INT 0
63623: ST_TO_ADDR
63624: GO 63640
// your_side := your_side + 1 ;
63626: LD_ADDR_OWVAR 2
63630: PUSH
63631: LD_OWVAR 2
63635: PUSH
63636: LD_INT 1
63638: PLUS
63639: ST_TO_ADDR
// end ;
63640: LD_VAR 0 1
63644: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63645: LD_INT 0
63647: PPUSH
63648: PPUSH
63649: PPUSH
// for i in all_units do
63650: LD_ADDR_VAR 0 2
63654: PUSH
63655: LD_OWVAR 3
63659: PUSH
63660: FOR_IN
63661: IFFALSE 63739
// if IsSelected ( i ) then
63663: LD_VAR 0 2
63667: PPUSH
63668: CALL_OW 306
63672: IFFALSE 63737
// begin j := GetSide ( i ) ;
63674: LD_ADDR_VAR 0 3
63678: PUSH
63679: LD_VAR 0 2
63683: PPUSH
63684: CALL_OW 255
63688: ST_TO_ADDR
// if j = 8 then
63689: LD_VAR 0 3
63693: PUSH
63694: LD_INT 8
63696: EQUAL
63697: IFFALSE 63709
// j := 0 else
63699: LD_ADDR_VAR 0 3
63703: PUSH
63704: LD_INT 0
63706: ST_TO_ADDR
63707: GO 63723
// j := j + 1 ;
63709: LD_ADDR_VAR 0 3
63713: PUSH
63714: LD_VAR 0 3
63718: PUSH
63719: LD_INT 1
63721: PLUS
63722: ST_TO_ADDR
// SetSide ( i , j ) ;
63723: LD_VAR 0 2
63727: PPUSH
63728: LD_VAR 0 3
63732: PPUSH
63733: CALL_OW 235
// end ;
63737: GO 63660
63739: POP
63740: POP
// end ;
63741: LD_VAR 0 1
63745: RET
// export function hHackFog ; begin
63746: LD_INT 0
63748: PPUSH
// FogOff ( true ) ;
63749: LD_INT 1
63751: PPUSH
63752: CALL_OW 344
// end ;
63756: LD_VAR 0 1
63760: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63761: LD_INT 0
63763: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63764: LD_VAR 0 1
63768: PPUSH
63769: LD_VAR 0 2
63773: PPUSH
63774: LD_VAR 0 3
63778: PPUSH
63779: LD_INT 1
63781: PPUSH
63782: LD_INT 1
63784: PPUSH
63785: CALL_OW 483
// CenterOnXY ( x , y ) ;
63789: LD_VAR 0 2
63793: PPUSH
63794: LD_VAR 0 3
63798: PPUSH
63799: CALL_OW 84
// end ;
63803: LD_VAR 0 4
63807: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63808: LD_INT 0
63810: PPUSH
63811: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63812: LD_VAR 0 1
63816: NOT
63817: PUSH
63818: LD_VAR 0 2
63822: PPUSH
63823: LD_VAR 0 3
63827: PPUSH
63828: CALL_OW 488
63832: NOT
63833: OR
63834: PUSH
63835: LD_VAR 0 1
63839: PPUSH
63840: CALL_OW 266
63844: PUSH
63845: LD_INT 3
63847: NONEQUAL
63848: PUSH
63849: LD_VAR 0 1
63853: PPUSH
63854: CALL_OW 247
63858: PUSH
63859: LD_INT 1
63861: EQUAL
63862: NOT
63863: AND
63864: OR
63865: IFFALSE 63869
// exit ;
63867: GO 64151
// if GetType ( factory ) = unit_human then
63869: LD_VAR 0 1
63873: PPUSH
63874: CALL_OW 247
63878: PUSH
63879: LD_INT 1
63881: EQUAL
63882: IFFALSE 63899
// factory := IsInUnit ( factory ) ;
63884: LD_ADDR_VAR 0 1
63888: PUSH
63889: LD_VAR 0 1
63893: PPUSH
63894: CALL_OW 310
63898: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63899: LD_VAR 0 1
63903: PPUSH
63904: CALL_OW 266
63908: PUSH
63909: LD_INT 3
63911: NONEQUAL
63912: IFFALSE 63916
// exit ;
63914: GO 64151
// for i := 1 to Count ( factoryWaypoints ) do
63916: LD_ADDR_VAR 0 5
63920: PUSH
63921: DOUBLE
63922: LD_INT 1
63924: DEC
63925: ST_TO_ADDR
63926: LD_EXP 88
63930: PPUSH
63931: CALL 8548 0 1
63935: PUSH
63936: FOR_TO
63937: IFFALSE 64099
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
63939: LD_VAR 0 2
63943: PPUSH
63944: LD_VAR 0 3
63948: PPUSH
63949: CALL_OW 428
63953: PUSH
63954: LD_EXP 88
63958: PUSH
63959: LD_VAR 0 5
63963: ARRAY
63964: PUSH
63965: LD_INT 2
63967: ARRAY
63968: EQUAL
63969: IFFALSE 64001
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
63971: LD_ADDR_EXP 88
63975: PUSH
63976: LD_EXP 88
63980: PPUSH
63981: LD_VAR 0 5
63985: PPUSH
63986: CALL_OW 3
63990: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63991: CALL 64156 0 0
// exit ;
63995: POP
63996: POP
63997: GO 64151
// end else
63999: GO 64097
// if factory = factoryWaypoints [ i ] [ 2 ] then
64001: LD_VAR 0 1
64005: PUSH
64006: LD_EXP 88
64010: PUSH
64011: LD_VAR 0 5
64015: ARRAY
64016: PUSH
64017: LD_INT 2
64019: ARRAY
64020: EQUAL
64021: IFFALSE 64097
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
64023: LD_ADDR_EXP 88
64027: PUSH
64028: LD_EXP 88
64032: PPUSH
64033: LD_VAR 0 5
64037: PPUSH
64038: CALL_OW 3
64042: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64043: LD_ADDR_EXP 88
64047: PUSH
64048: LD_EXP 88
64052: PPUSH
64053: LD_VAR 0 1
64057: PPUSH
64058: CALL_OW 255
64062: PUSH
64063: LD_VAR 0 1
64067: PUSH
64068: LD_VAR 0 2
64072: PUSH
64073: LD_VAR 0 3
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: PPUSH
64084: CALL 44157 0 2
64088: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64089: CALL 64156 0 0
// exit ;
64093: POP
64094: POP
64095: GO 64151
// end ; end ;
64097: GO 63936
64099: POP
64100: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
64101: LD_ADDR_EXP 88
64105: PUSH
64106: LD_EXP 88
64110: PPUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 255
64120: PUSH
64121: LD_VAR 0 1
64125: PUSH
64126: LD_VAR 0 2
64130: PUSH
64131: LD_VAR 0 3
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: PPUSH
64142: CALL 44157 0 2
64146: ST_TO_ADDR
// UpdateFactoryWaypoints ;
64147: CALL 64156 0 0
// end ;
64151: LD_VAR 0 4
64155: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
64156: LD_INT 0
64158: PPUSH
64159: PPUSH
64160: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
64161: LD_STRING resetFactoryWaypoint();
64163: PPUSH
64164: CALL_OW 559
// if factoryWaypoints then
64168: LD_EXP 88
64172: IFFALSE 64293
// begin list := factoryWaypoints ;
64174: LD_ADDR_VAR 0 3
64178: PUSH
64179: LD_EXP 88
64183: ST_TO_ADDR
// for i := 1 to list do
64184: LD_ADDR_VAR 0 2
64188: PUSH
64189: DOUBLE
64190: LD_INT 1
64192: DEC
64193: ST_TO_ADDR
64194: LD_VAR 0 3
64198: PUSH
64199: FOR_TO
64200: IFFALSE 64291
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64202: LD_STRING setFactoryWaypointXY(
64204: PUSH
64205: LD_VAR 0 3
64209: PUSH
64210: LD_VAR 0 2
64214: ARRAY
64215: PUSH
64216: LD_INT 1
64218: ARRAY
64219: STR
64220: PUSH
64221: LD_STRING ,
64223: STR
64224: PUSH
64225: LD_VAR 0 3
64229: PUSH
64230: LD_VAR 0 2
64234: ARRAY
64235: PUSH
64236: LD_INT 2
64238: ARRAY
64239: STR
64240: PUSH
64241: LD_STRING ,
64243: STR
64244: PUSH
64245: LD_VAR 0 3
64249: PUSH
64250: LD_VAR 0 2
64254: ARRAY
64255: PUSH
64256: LD_INT 3
64258: ARRAY
64259: STR
64260: PUSH
64261: LD_STRING ,
64263: STR
64264: PUSH
64265: LD_VAR 0 3
64269: PUSH
64270: LD_VAR 0 2
64274: ARRAY
64275: PUSH
64276: LD_INT 4
64278: ARRAY
64279: STR
64280: PUSH
64281: LD_STRING )
64283: STR
64284: PPUSH
64285: CALL_OW 559
64289: GO 64199
64291: POP
64292: POP
// end ; end ;
64293: LD_VAR 0 1
64297: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64298: LD_INT 0
64300: PPUSH
// if HexInfo ( x , y ) = warehouse then
64301: LD_VAR 0 2
64305: PPUSH
64306: LD_VAR 0 3
64310: PPUSH
64311: CALL_OW 428
64315: PUSH
64316: LD_VAR 0 1
64320: EQUAL
64321: IFFALSE 64348
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64323: LD_ADDR_EXP 89
64327: PUSH
64328: LD_EXP 89
64332: PPUSH
64333: LD_VAR 0 1
64337: PPUSH
64338: LD_INT 0
64340: PPUSH
64341: CALL_OW 1
64345: ST_TO_ADDR
64346: GO 64399
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64348: LD_ADDR_EXP 89
64352: PUSH
64353: LD_EXP 89
64357: PPUSH
64358: LD_VAR 0 1
64362: PPUSH
64363: LD_VAR 0 1
64367: PPUSH
64368: CALL_OW 255
64372: PUSH
64373: LD_VAR 0 1
64377: PUSH
64378: LD_VAR 0 2
64382: PUSH
64383: LD_VAR 0 3
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: PPUSH
64394: CALL_OW 1
64398: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64399: CALL 64408 0 0
// end ;
64403: LD_VAR 0 4
64407: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64408: LD_INT 0
64410: PPUSH
64411: PPUSH
64412: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64413: LD_STRING resetWarehouseGatheringPoints();
64415: PPUSH
64416: CALL_OW 559
// if warehouseGatheringPoints then
64420: LD_EXP 89
64424: IFFALSE 64550
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64426: LD_ADDR_VAR 0 3
64430: PUSH
64431: LD_EXP 89
64435: PPUSH
64436: CALL 47919 0 1
64440: ST_TO_ADDR
// for i := 1 to list do
64441: LD_ADDR_VAR 0 2
64445: PUSH
64446: DOUBLE
64447: LD_INT 1
64449: DEC
64450: ST_TO_ADDR
64451: LD_VAR 0 3
64455: PUSH
64456: FOR_TO
64457: IFFALSE 64548
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64459: LD_STRING setWarehouseGatheringPointXY(
64461: PUSH
64462: LD_VAR 0 3
64466: PUSH
64467: LD_VAR 0 2
64471: ARRAY
64472: PUSH
64473: LD_INT 1
64475: ARRAY
64476: STR
64477: PUSH
64478: LD_STRING ,
64480: STR
64481: PUSH
64482: LD_VAR 0 3
64486: PUSH
64487: LD_VAR 0 2
64491: ARRAY
64492: PUSH
64493: LD_INT 2
64495: ARRAY
64496: STR
64497: PUSH
64498: LD_STRING ,
64500: STR
64501: PUSH
64502: LD_VAR 0 3
64506: PUSH
64507: LD_VAR 0 2
64511: ARRAY
64512: PUSH
64513: LD_INT 3
64515: ARRAY
64516: STR
64517: PUSH
64518: LD_STRING ,
64520: STR
64521: PUSH
64522: LD_VAR 0 3
64526: PUSH
64527: LD_VAR 0 2
64531: ARRAY
64532: PUSH
64533: LD_INT 4
64535: ARRAY
64536: STR
64537: PUSH
64538: LD_STRING )
64540: STR
64541: PPUSH
64542: CALL_OW 559
64546: GO 64456
64548: POP
64549: POP
// end ; end ;
64550: LD_VAR 0 1
64554: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
64555: LD_EXP 89
64559: IFFALSE 65244
64561: GO 64563
64563: DISABLE
64564: LD_INT 0
64566: PPUSH
64567: PPUSH
64568: PPUSH
64569: PPUSH
64570: PPUSH
64571: PPUSH
64572: PPUSH
64573: PPUSH
64574: PPUSH
// begin enable ;
64575: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
64576: LD_ADDR_VAR 0 3
64580: PUSH
64581: LD_EXP 89
64585: PPUSH
64586: CALL 47919 0 1
64590: ST_TO_ADDR
// if not list then
64591: LD_VAR 0 3
64595: NOT
64596: IFFALSE 64600
// exit ;
64598: GO 65244
// for i := 1 to list do
64600: LD_ADDR_VAR 0 1
64604: PUSH
64605: DOUBLE
64606: LD_INT 1
64608: DEC
64609: ST_TO_ADDR
64610: LD_VAR 0 3
64614: PUSH
64615: FOR_TO
64616: IFFALSE 65242
// begin depot := list [ i ] [ 2 ] ;
64618: LD_ADDR_VAR 0 8
64622: PUSH
64623: LD_VAR 0 3
64627: PUSH
64628: LD_VAR 0 1
64632: ARRAY
64633: PUSH
64634: LD_INT 2
64636: ARRAY
64637: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
64638: LD_ADDR_VAR 0 5
64642: PUSH
64643: LD_VAR 0 3
64647: PUSH
64648: LD_VAR 0 1
64652: ARRAY
64653: PUSH
64654: LD_INT 1
64656: ARRAY
64657: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
64658: LD_VAR 0 8
64662: PPUSH
64663: CALL_OW 301
64667: PUSH
64668: LD_VAR 0 5
64672: PUSH
64673: LD_VAR 0 8
64677: PPUSH
64678: CALL_OW 255
64682: NONEQUAL
64683: OR
64684: IFFALSE 64713
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
64686: LD_ADDR_EXP 89
64690: PUSH
64691: LD_EXP 89
64695: PPUSH
64696: LD_VAR 0 8
64700: PPUSH
64701: LD_INT 0
64703: PPUSH
64704: CALL_OW 1
64708: ST_TO_ADDR
// exit ;
64709: POP
64710: POP
64711: GO 65244
// end ; x := list [ i ] [ 3 ] ;
64713: LD_ADDR_VAR 0 6
64717: PUSH
64718: LD_VAR 0 3
64722: PUSH
64723: LD_VAR 0 1
64727: ARRAY
64728: PUSH
64729: LD_INT 3
64731: ARRAY
64732: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
64733: LD_ADDR_VAR 0 7
64737: PUSH
64738: LD_VAR 0 3
64742: PUSH
64743: LD_VAR 0 1
64747: ARRAY
64748: PUSH
64749: LD_INT 4
64751: ARRAY
64752: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
64753: LD_ADDR_VAR 0 9
64757: PUSH
64758: LD_VAR 0 6
64762: PPUSH
64763: LD_VAR 0 7
64767: PPUSH
64768: LD_INT 16
64770: PPUSH
64771: CALL 46503 0 3
64775: ST_TO_ADDR
// if not cratesNearbyPoint then
64776: LD_VAR 0 9
64780: NOT
64781: IFFALSE 64787
// exit ;
64783: POP
64784: POP
64785: GO 65244
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
64787: LD_ADDR_VAR 0 4
64791: PUSH
64792: LD_INT 22
64794: PUSH
64795: LD_VAR 0 5
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: PUSH
64804: LD_INT 3
64806: PUSH
64807: LD_INT 60
64809: PUSH
64810: EMPTY
64811: LIST
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 91
64819: PUSH
64820: LD_VAR 0 8
64824: PUSH
64825: LD_INT 6
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 2
64835: PUSH
64836: LD_INT 25
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 25
64848: PUSH
64849: LD_INT 16
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: LIST
64860: PUSH
64861: EMPTY
64862: LIST
64863: LIST
64864: LIST
64865: LIST
64866: PPUSH
64867: CALL_OW 69
64871: PUSH
64872: LD_VAR 0 8
64876: PPUSH
64877: CALL_OW 313
64881: PPUSH
64882: LD_INT 3
64884: PUSH
64885: LD_INT 60
64887: PUSH
64888: EMPTY
64889: LIST
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: PUSH
64898: LD_INT 25
64900: PUSH
64901: LD_INT 2
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 25
64910: PUSH
64911: LD_INT 16
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PPUSH
64927: CALL_OW 72
64931: UNION
64932: ST_TO_ADDR
// if tmp then
64933: LD_VAR 0 4
64937: IFFALSE 65017
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64939: LD_ADDR_VAR 0 4
64943: PUSH
64944: LD_VAR 0 4
64948: PPUSH
64949: LD_INT 3
64951: PPUSH
64952: CALL 44472 0 2
64956: ST_TO_ADDR
// for j in tmp do
64957: LD_ADDR_VAR 0 2
64961: PUSH
64962: LD_VAR 0 4
64966: PUSH
64967: FOR_IN
64968: IFFALSE 65011
// begin if IsInUnit ( j ) then
64970: LD_VAR 0 2
64974: PPUSH
64975: CALL_OW 310
64979: IFFALSE 64990
// ComExit ( j ) ;
64981: LD_VAR 0 2
64985: PPUSH
64986: CALL 44555 0 1
// AddComCollect ( j , x , y ) ;
64990: LD_VAR 0 2
64994: PPUSH
64995: LD_VAR 0 6
64999: PPUSH
65000: LD_VAR 0 7
65004: PPUSH
65005: CALL_OW 177
// end ;
65009: GO 64967
65011: POP
65012: POP
// exit ;
65013: POP
65014: POP
65015: GO 65244
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65017: LD_ADDR_VAR 0 4
65021: PUSH
65022: LD_INT 22
65024: PUSH
65025: LD_VAR 0 5
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 91
65036: PUSH
65037: LD_VAR 0 8
65041: PUSH
65042: LD_INT 8
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 34
65055: PUSH
65056: LD_INT 12
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 34
65065: PUSH
65066: LD_INT 51
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 34
65075: PUSH
65076: LD_INT 32
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 34
65085: PUSH
65086: LD_INT 89
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: LIST
65104: PPUSH
65105: CALL_OW 69
65109: ST_TO_ADDR
// if tmp then
65110: LD_VAR 0 4
65114: IFFALSE 65240
// begin for j in tmp do
65116: LD_ADDR_VAR 0 2
65120: PUSH
65121: LD_VAR 0 4
65125: PUSH
65126: FOR_IN
65127: IFFALSE 65238
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
65129: LD_VAR 0 2
65133: PPUSH
65134: CALL_OW 262
65138: PUSH
65139: LD_INT 3
65141: EQUAL
65142: PUSH
65143: LD_VAR 0 2
65147: PPUSH
65148: CALL_OW 261
65152: PUSH
65153: LD_INT 20
65155: GREATER
65156: OR
65157: PUSH
65158: LD_VAR 0 2
65162: PPUSH
65163: CALL_OW 314
65167: NOT
65168: AND
65169: PUSH
65170: LD_VAR 0 2
65174: PPUSH
65175: CALL_OW 263
65179: PUSH
65180: LD_INT 1
65182: NONEQUAL
65183: PUSH
65184: LD_VAR 0 2
65188: PPUSH
65189: CALL_OW 311
65193: OR
65194: AND
65195: IFFALSE 65236
// begin ComCollect ( j , x , y ) ;
65197: LD_VAR 0 2
65201: PPUSH
65202: LD_VAR 0 6
65206: PPUSH
65207: LD_VAR 0 7
65211: PPUSH
65212: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65216: LD_VAR 0 2
65220: PPUSH
65221: LD_VAR 0 8
65225: PPUSH
65226: CALL_OW 172
// exit ;
65230: POP
65231: POP
65232: POP
65233: POP
65234: GO 65244
// end ;
65236: GO 65126
65238: POP
65239: POP
// end ; end ;
65240: GO 64615
65242: POP
65243: POP
// end ; end_of_file
65244: PPOPN 9
65246: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65247: LD_VAR 0 1
65251: PUSH
65252: LD_INT 200
65254: DOUBLE
65255: GREATEREQUAL
65256: IFFALSE 65264
65258: LD_INT 299
65260: DOUBLE
65261: LESSEQUAL
65262: IFTRUE 65266
65264: GO 65298
65266: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65267: LD_VAR 0 1
65271: PPUSH
65272: LD_VAR 0 2
65276: PPUSH
65277: LD_VAR 0 3
65281: PPUSH
65282: LD_VAR 0 4
65286: PPUSH
65287: LD_VAR 0 5
65291: PPUSH
65292: CALL 65995 0 5
65296: GO 65375
65298: LD_INT 300
65300: DOUBLE
65301: GREATEREQUAL
65302: IFFALSE 65310
65304: LD_INT 399
65306: DOUBLE
65307: LESSEQUAL
65308: IFTRUE 65312
65310: GO 65374
65312: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65313: LD_VAR 0 1
65317: PPUSH
65318: LD_VAR 0 2
65322: PPUSH
65323: LD_VAR 0 3
65327: PPUSH
65328: LD_VAR 0 4
65332: PPUSH
65333: LD_VAR 0 5
65337: PPUSH
65338: LD_VAR 0 6
65342: PPUSH
65343: LD_VAR 0 7
65347: PPUSH
65348: LD_VAR 0 8
65352: PPUSH
65353: LD_VAR 0 9
65357: PPUSH
65358: LD_VAR 0 10
65362: PPUSH
65363: LD_VAR 0 11
65367: PPUSH
65368: CALL 61820 0 11
65372: GO 65375
65374: POP
// end ;
65375: PPOPN 11
65377: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65378: LD_VAR 0 1
65382: PPUSH
65383: LD_VAR 0 2
65387: PPUSH
65388: LD_VAR 0 3
65392: PPUSH
65393: LD_VAR 0 4
65397: PPUSH
65398: LD_VAR 0 5
65402: PPUSH
65403: CALL 65460 0 5
// end ; end_of_file
65407: PPOPN 5
65409: END
// export function SOS_UnitDestroyed ( un ) ; begin
65410: LD_INT 0
65412: PPUSH
// ComRadiation ( un ) ;
65413: LD_VAR 0 1
65417: PPUSH
65418: CALL 66399 0 1
// end ;
65422: LD_VAR 0 2
65426: RET
// export function SOS_UnitKamikazed ( un ) ; begin
65427: LD_INT 0
65429: PPUSH
// ComRadiation ( un ) ;
65430: LD_VAR 0 1
65434: PPUSH
65435: CALL 66399 0 1
// end ;
65439: LD_VAR 0 2
65443: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65444: LD_INT 0
65446: PPUSH
// end ;
65447: LD_VAR 0 4
65451: RET
// export function SOS_Command ( cmd ) ; begin
65452: LD_INT 0
65454: PPUSH
// end ;
65455: LD_VAR 0 2
65459: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65460: LD_INT 0
65462: PPUSH
// end ;
65463: LD_VAR 0 6
65467: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
65468: LD_INT 0
65470: PPUSH
65471: PPUSH
65472: PPUSH
65473: PPUSH
65474: PPUSH
// if not vehicle or not factory then
65475: LD_VAR 0 1
65479: NOT
65480: PUSH
65481: LD_VAR 0 2
65485: NOT
65486: OR
65487: IFFALSE 65491
// exit ;
65489: GO 65990
// if not factoryWaypoints then
65491: LD_EXP 88
65495: NOT
65496: IFFALSE 65500
// exit ;
65498: GO 65990
// for i := 1 to Count ( factoryWaypoints ) do
65500: LD_ADDR_VAR 0 4
65504: PUSH
65505: DOUBLE
65506: LD_INT 1
65508: DEC
65509: ST_TO_ADDR
65510: LD_EXP 88
65514: PPUSH
65515: CALL 8548 0 1
65519: PUSH
65520: FOR_TO
65521: IFFALSE 65988
// if factoryWaypoints [ i ] [ 2 ] = factory then
65523: LD_EXP 88
65527: PUSH
65528: LD_VAR 0 4
65532: ARRAY
65533: PUSH
65534: LD_INT 2
65536: ARRAY
65537: PUSH
65538: LD_VAR 0 2
65542: EQUAL
65543: IFFALSE 65986
// begin if GetControl ( vehicle ) = control_manual then
65545: LD_VAR 0 1
65549: PPUSH
65550: CALL_OW 263
65554: PUSH
65555: LD_INT 1
65557: EQUAL
65558: IFFALSE 65869
// begin driver := IsDrivenBy ( vehicle ) ;
65560: LD_ADDR_VAR 0 6
65564: PUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 311
65574: ST_TO_ADDR
// tag := GetTag ( driver ) ;
65575: LD_ADDR_VAR 0 5
65579: PUSH
65580: LD_VAR 0 6
65584: PPUSH
65585: CALL_OW 110
65589: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
65590: LD_VAR 0 5
65594: PUSH
65595: LD_INT 501
65597: EQUAL
65598: PUSH
65599: LD_VAR 0 1
65603: PPUSH
65604: CALL_OW 110
65608: PUSH
65609: LD_INT 501
65611: EQUAL
65612: OR
65613: IFFALSE 65619
// exit ;
65615: POP
65616: POP
65617: GO 65990
// if not HasTask ( driver ) then
65619: LD_VAR 0 6
65623: PPUSH
65624: CALL_OW 314
65628: NOT
65629: IFFALSE 65867
// begin SetTag ( driver , tDriver ) ;
65631: LD_VAR 0 6
65635: PPUSH
65636: LD_INT 501
65638: PPUSH
65639: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
65643: LD_VAR 0 1
65647: PPUSH
65648: LD_INT 501
65650: PPUSH
65651: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65655: LD_ADDR_VAR 0 7
65659: PUSH
65660: LD_EXP 88
65664: PUSH
65665: LD_VAR 0 4
65669: ARRAY
65670: PUSH
65671: LD_INT 3
65673: ARRAY
65674: PPUSH
65675: LD_EXP 88
65679: PUSH
65680: LD_VAR 0 4
65684: ARRAY
65685: PUSH
65686: LD_INT 4
65688: ARRAY
65689: PPUSH
65690: CALL_OW 428
65694: ST_TO_ADDR
// if hex then
65695: LD_VAR 0 7
65699: IFFALSE 65717
// ComMoveUnit ( driver , hex ) else
65701: LD_VAR 0 6
65705: PPUSH
65706: LD_VAR 0 7
65710: PPUSH
65711: CALL_OW 112
65715: GO 65756
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65717: LD_VAR 0 6
65721: PPUSH
65722: LD_EXP 88
65726: PUSH
65727: LD_VAR 0 4
65731: ARRAY
65732: PUSH
65733: LD_INT 3
65735: ARRAY
65736: PPUSH
65737: LD_EXP 88
65741: PUSH
65742: LD_VAR 0 4
65746: ARRAY
65747: PUSH
65748: LD_INT 4
65750: ARRAY
65751: PPUSH
65752: CALL_OW 111
// AddComExitVehicle ( driver ) ;
65756: LD_VAR 0 6
65760: PPUSH
65761: CALL_OW 181
// if Multiplayer then
65765: LD_OWVAR 4
65769: IFFALSE 65818
// begin repeat wait ( 10 ) ;
65771: LD_INT 10
65773: PPUSH
65774: CALL_OW 67
// until not IsInUnit ( driver ) ;
65778: LD_VAR 0 6
65782: PPUSH
65783: CALL_OW 310
65787: NOT
65788: IFFALSE 65771
// if not HasTask ( driver ) then
65790: LD_VAR 0 6
65794: PPUSH
65795: CALL_OW 314
65799: NOT
65800: IFFALSE 65816
// ComEnterUnit ( driver , factory ) ;
65802: LD_VAR 0 6
65806: PPUSH
65807: LD_VAR 0 2
65811: PPUSH
65812: CALL_OW 120
// end else
65816: GO 65832
// AddComEnterUnit ( driver , factory ) ;
65818: LD_VAR 0 6
65822: PPUSH
65823: LD_VAR 0 2
65827: PPUSH
65828: CALL_OW 180
// wait ( 0 0$1 ) ;
65832: LD_INT 35
65834: PPUSH
65835: CALL_OW 67
// SetTag ( driver , tag ) ;
65839: LD_VAR 0 6
65843: PPUSH
65844: LD_VAR 0 5
65848: PPUSH
65849: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
65853: LD_VAR 0 1
65857: PPUSH
65858: LD_INT 0
65860: PPUSH
65861: CALL_OW 109
// break ;
65865: GO 65988
// end ; end else
65867: GO 65986
// if GetControl ( vehicle ) = control_remote then
65869: LD_VAR 0 1
65873: PPUSH
65874: CALL_OW 263
65878: PUSH
65879: LD_INT 2
65881: EQUAL
65882: IFFALSE 65945
// begin wait ( 0 0$2 ) ;
65884: LD_INT 70
65886: PPUSH
65887: CALL_OW 67
// if Connect ( vehicle ) then
65891: LD_VAR 0 1
65895: PPUSH
65896: CALL 14754 0 1
65900: IFFALSE 65941
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_EXP 88
65911: PUSH
65912: LD_VAR 0 4
65916: ARRAY
65917: PUSH
65918: LD_INT 3
65920: ARRAY
65921: PPUSH
65922: LD_EXP 88
65926: PUSH
65927: LD_VAR 0 4
65931: ARRAY
65932: PUSH
65933: LD_INT 4
65935: ARRAY
65936: PPUSH
65937: CALL_OW 171
// break ;
65941: GO 65988
// end else
65943: GO 65986
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
65945: LD_VAR 0 1
65949: PPUSH
65950: LD_EXP 88
65954: PUSH
65955: LD_VAR 0 4
65959: ARRAY
65960: PUSH
65961: LD_INT 3
65963: ARRAY
65964: PPUSH
65965: LD_EXP 88
65969: PUSH
65970: LD_VAR 0 4
65974: ARRAY
65975: PUSH
65976: LD_INT 4
65978: ARRAY
65979: PPUSH
65980: CALL_OW 171
// break ;
65984: GO 65988
// end ; end ;
65986: GO 65520
65988: POP
65989: POP
// end ;
65990: LD_VAR 0 3
65994: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65995: LD_INT 0
65997: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65998: LD_VAR 0 1
66002: PUSH
66003: LD_INT 250
66005: EQUAL
66006: PUSH
66007: LD_VAR 0 2
66011: PPUSH
66012: CALL_OW 264
66016: PUSH
66017: LD_INT 81
66019: EQUAL
66020: AND
66021: IFFALSE 66042
// MinerPlaceMine ( unit , x , y ) ;
66023: LD_VAR 0 2
66027: PPUSH
66028: LD_VAR 0 4
66032: PPUSH
66033: LD_VAR 0 5
66037: PPUSH
66038: CALL 69134 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
66042: LD_VAR 0 1
66046: PUSH
66047: LD_INT 251
66049: EQUAL
66050: PUSH
66051: LD_VAR 0 2
66055: PPUSH
66056: CALL_OW 264
66060: PUSH
66061: LD_INT 81
66063: EQUAL
66064: AND
66065: IFFALSE 66086
// MinerDetonateMine ( unit , x , y ) ;
66067: LD_VAR 0 2
66071: PPUSH
66072: LD_VAR 0 4
66076: PPUSH
66077: LD_VAR 0 5
66081: PPUSH
66082: CALL 69409 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
66086: LD_VAR 0 1
66090: PUSH
66091: LD_INT 252
66093: EQUAL
66094: PUSH
66095: LD_VAR 0 2
66099: PPUSH
66100: CALL_OW 264
66104: PUSH
66105: LD_INT 81
66107: EQUAL
66108: AND
66109: IFFALSE 66130
// MinerCreateMinefield ( unit , x , y ) ;
66111: LD_VAR 0 2
66115: PPUSH
66116: LD_VAR 0 4
66120: PPUSH
66121: LD_VAR 0 5
66125: PPUSH
66126: CALL 69826 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
66130: LD_VAR 0 1
66134: PUSH
66135: LD_INT 253
66137: EQUAL
66138: PUSH
66139: LD_VAR 0 2
66143: PPUSH
66144: CALL_OW 257
66148: PUSH
66149: LD_INT 5
66151: EQUAL
66152: AND
66153: IFFALSE 66174
// ComBinocular ( unit , x , y ) ;
66155: LD_VAR 0 2
66159: PPUSH
66160: LD_VAR 0 4
66164: PPUSH
66165: LD_VAR 0 5
66169: PPUSH
66170: CALL 70195 0 3
// if selectedUnit then
66174: LD_VAR 0 3
66178: IFFALSE 66234
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
66180: LD_VAR 0 1
66184: PUSH
66185: LD_INT 254
66187: EQUAL
66188: PUSH
66189: LD_VAR 0 2
66193: PPUSH
66194: CALL_OW 264
66198: PUSH
66199: LD_INT 99
66201: EQUAL
66202: AND
66203: PUSH
66204: LD_VAR 0 3
66208: PPUSH
66209: CALL_OW 263
66213: PUSH
66214: LD_INT 3
66216: EQUAL
66217: AND
66218: IFFALSE 66234
// HackDestroyVehicle ( unit , selectedUnit ) ;
66220: LD_VAR 0 2
66224: PPUSH
66225: LD_VAR 0 3
66229: PPUSH
66230: CALL 68498 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
66234: LD_VAR 0 1
66238: PUSH
66239: LD_INT 255
66241: EQUAL
66242: PUSH
66243: LD_VAR 0 2
66247: PPUSH
66248: CALL_OW 264
66252: PUSH
66253: LD_INT 14
66255: PUSH
66256: LD_INT 53
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: IN
66263: AND
66264: PUSH
66265: LD_VAR 0 4
66269: PPUSH
66270: LD_VAR 0 5
66274: PPUSH
66275: CALL_OW 488
66279: AND
66280: IFFALSE 66304
// CutTreeXYR ( unit , x , y , 12 ) ;
66282: LD_VAR 0 2
66286: PPUSH
66287: LD_VAR 0 4
66291: PPUSH
66292: LD_VAR 0 5
66296: PPUSH
66297: LD_INT 12
66299: PPUSH
66300: CALL 66495 0 4
// if cmd = 256 then
66304: LD_VAR 0 1
66308: PUSH
66309: LD_INT 256
66311: EQUAL
66312: IFFALSE 66333
// SetFactoryWaypoint ( unit , x , y ) ;
66314: LD_VAR 0 2
66318: PPUSH
66319: LD_VAR 0 4
66323: PPUSH
66324: LD_VAR 0 5
66328: PPUSH
66329: CALL 63808 0 3
// if cmd = 257 then
66333: LD_VAR 0 1
66337: PUSH
66338: LD_INT 257
66340: EQUAL
66341: IFFALSE 66362
// SetWarehouseGatheringPoint ( unit , x , y ) ;
66343: LD_VAR 0 2
66347: PPUSH
66348: LD_VAR 0 4
66352: PPUSH
66353: LD_VAR 0 5
66357: PPUSH
66358: CALL 64298 0 3
// if cmd = 258 then
66362: LD_VAR 0 1
66366: PUSH
66367: LD_INT 258
66369: EQUAL
66370: IFFALSE 66394
// BurnTreeXYR ( unit , x , y , 8 ) ;
66372: LD_VAR 0 2
66376: PPUSH
66377: LD_VAR 0 4
66381: PPUSH
66382: LD_VAR 0 5
66386: PPUSH
66387: LD_INT 8
66389: PPUSH
66390: CALL 66889 0 4
// end ;
66394: LD_VAR 0 6
66398: RET
// export function ComRadiation ( un ) ; var eff ; begin
66399: LD_INT 0
66401: PPUSH
66402: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
66403: LD_VAR 0 1
66407: PPUSH
66408: CALL_OW 264
66412: PUSH
66413: LD_INT 91
66415: NONEQUAL
66416: IFFALSE 66420
// exit ;
66418: GO 66490
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
66420: LD_INT 68
66422: PPUSH
66423: LD_VAR 0 1
66427: PPUSH
66428: CALL_OW 255
66432: PPUSH
66433: CALL_OW 321
66437: PUSH
66438: LD_INT 2
66440: EQUAL
66441: IFFALSE 66453
// eff := 70 else
66443: LD_ADDR_VAR 0 3
66447: PUSH
66448: LD_INT 70
66450: ST_TO_ADDR
66451: GO 66461
// eff := 30 ;
66453: LD_ADDR_VAR 0 3
66457: PUSH
66458: LD_INT 30
66460: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
66461: LD_VAR 0 1
66465: PPUSH
66466: CALL_OW 250
66470: PPUSH
66471: LD_VAR 0 1
66475: PPUSH
66476: CALL_OW 251
66480: PPUSH
66481: LD_VAR 0 3
66485: PPUSH
66486: CALL_OW 495
// end ;
66490: LD_VAR 0 2
66494: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66495: LD_INT 0
66497: PPUSH
66498: PPUSH
66499: PPUSH
66500: PPUSH
66501: PPUSH
66502: PPUSH
66503: PPUSH
66504: PPUSH
66505: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
66506: LD_VAR 0 1
66510: PPUSH
66511: CALL_OW 302
66515: NOT
66516: PUSH
66517: LD_VAR 0 2
66521: PPUSH
66522: LD_VAR 0 3
66526: PPUSH
66527: CALL_OW 488
66531: NOT
66532: OR
66533: PUSH
66534: LD_VAR 0 4
66538: NOT
66539: OR
66540: IFFALSE 66544
// exit ;
66542: GO 66884
// list := [ ] ;
66544: LD_ADDR_VAR 0 13
66548: PUSH
66549: EMPTY
66550: ST_TO_ADDR
// if x - r < 0 then
66551: LD_VAR 0 2
66555: PUSH
66556: LD_VAR 0 4
66560: MINUS
66561: PUSH
66562: LD_INT 0
66564: LESS
66565: IFFALSE 66577
// min_x := 0 else
66567: LD_ADDR_VAR 0 7
66571: PUSH
66572: LD_INT 0
66574: ST_TO_ADDR
66575: GO 66593
// min_x := x - r ;
66577: LD_ADDR_VAR 0 7
66581: PUSH
66582: LD_VAR 0 2
66586: PUSH
66587: LD_VAR 0 4
66591: MINUS
66592: ST_TO_ADDR
// if y - r < 0 then
66593: LD_VAR 0 3
66597: PUSH
66598: LD_VAR 0 4
66602: MINUS
66603: PUSH
66604: LD_INT 0
66606: LESS
66607: IFFALSE 66619
// min_y := 0 else
66609: LD_ADDR_VAR 0 8
66613: PUSH
66614: LD_INT 0
66616: ST_TO_ADDR
66617: GO 66635
// min_y := y - r ;
66619: LD_ADDR_VAR 0 8
66623: PUSH
66624: LD_VAR 0 3
66628: PUSH
66629: LD_VAR 0 4
66633: MINUS
66634: ST_TO_ADDR
// max_x := x + r ;
66635: LD_ADDR_VAR 0 9
66639: PUSH
66640: LD_VAR 0 2
66644: PUSH
66645: LD_VAR 0 4
66649: PLUS
66650: ST_TO_ADDR
// max_y := y + r ;
66651: LD_ADDR_VAR 0 10
66655: PUSH
66656: LD_VAR 0 3
66660: PUSH
66661: LD_VAR 0 4
66665: PLUS
66666: ST_TO_ADDR
// for _x = min_x to max_x do
66667: LD_ADDR_VAR 0 11
66671: PUSH
66672: DOUBLE
66673: LD_VAR 0 7
66677: DEC
66678: ST_TO_ADDR
66679: LD_VAR 0 9
66683: PUSH
66684: FOR_TO
66685: IFFALSE 66802
// for _y = min_y to max_y do
66687: LD_ADDR_VAR 0 12
66691: PUSH
66692: DOUBLE
66693: LD_VAR 0 8
66697: DEC
66698: ST_TO_ADDR
66699: LD_VAR 0 10
66703: PUSH
66704: FOR_TO
66705: IFFALSE 66798
// begin if not ValidHex ( _x , _y ) then
66707: LD_VAR 0 11
66711: PPUSH
66712: LD_VAR 0 12
66716: PPUSH
66717: CALL_OW 488
66721: NOT
66722: IFFALSE 66726
// continue ;
66724: GO 66704
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66726: LD_VAR 0 11
66730: PPUSH
66731: LD_VAR 0 12
66735: PPUSH
66736: CALL_OW 351
66740: PUSH
66741: LD_VAR 0 11
66745: PPUSH
66746: LD_VAR 0 12
66750: PPUSH
66751: CALL_OW 554
66755: AND
66756: IFFALSE 66796
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66758: LD_ADDR_VAR 0 13
66762: PUSH
66763: LD_VAR 0 13
66767: PPUSH
66768: LD_VAR 0 13
66772: PUSH
66773: LD_INT 1
66775: PLUS
66776: PPUSH
66777: LD_VAR 0 11
66781: PUSH
66782: LD_VAR 0 12
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PPUSH
66791: CALL_OW 2
66795: ST_TO_ADDR
// end ;
66796: GO 66704
66798: POP
66799: POP
66800: GO 66684
66802: POP
66803: POP
// if not list then
66804: LD_VAR 0 13
66808: NOT
66809: IFFALSE 66813
// exit ;
66811: GO 66884
// for i in list do
66813: LD_ADDR_VAR 0 6
66817: PUSH
66818: LD_VAR 0 13
66822: PUSH
66823: FOR_IN
66824: IFFALSE 66882
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66826: LD_VAR 0 1
66830: PPUSH
66831: LD_STRING M
66833: PUSH
66834: LD_VAR 0 6
66838: PUSH
66839: LD_INT 1
66841: ARRAY
66842: PUSH
66843: LD_VAR 0 6
66847: PUSH
66848: LD_INT 2
66850: ARRAY
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: PUSH
66873: EMPTY
66874: LIST
66875: PPUSH
66876: CALL_OW 447
66880: GO 66823
66882: POP
66883: POP
// end ;
66884: LD_VAR 0 5
66888: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
66889: LD_INT 0
66891: PPUSH
66892: PPUSH
66893: PPUSH
66894: PPUSH
66895: PPUSH
66896: PPUSH
66897: PPUSH
66898: PPUSH
66899: PPUSH
66900: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
66901: LD_VAR 0 1
66905: PPUSH
66906: CALL_OW 302
66910: NOT
66911: PUSH
66912: LD_VAR 0 2
66916: PPUSH
66917: LD_VAR 0 3
66921: PPUSH
66922: CALL_OW 488
66926: NOT
66927: OR
66928: PUSH
66929: LD_VAR 0 4
66933: NOT
66934: OR
66935: IFFALSE 66939
// exit ;
66937: GO 67452
// list := [ ] ;
66939: LD_ADDR_VAR 0 13
66943: PUSH
66944: EMPTY
66945: ST_TO_ADDR
// if x - r < 0 then
66946: LD_VAR 0 2
66950: PUSH
66951: LD_VAR 0 4
66955: MINUS
66956: PUSH
66957: LD_INT 0
66959: LESS
66960: IFFALSE 66972
// min_x := 0 else
66962: LD_ADDR_VAR 0 7
66966: PUSH
66967: LD_INT 0
66969: ST_TO_ADDR
66970: GO 66988
// min_x := x - r ;
66972: LD_ADDR_VAR 0 7
66976: PUSH
66977: LD_VAR 0 2
66981: PUSH
66982: LD_VAR 0 4
66986: MINUS
66987: ST_TO_ADDR
// if y - r < 0 then
66988: LD_VAR 0 3
66992: PUSH
66993: LD_VAR 0 4
66997: MINUS
66998: PUSH
66999: LD_INT 0
67001: LESS
67002: IFFALSE 67014
// min_y := 0 else
67004: LD_ADDR_VAR 0 8
67008: PUSH
67009: LD_INT 0
67011: ST_TO_ADDR
67012: GO 67030
// min_y := y - r ;
67014: LD_ADDR_VAR 0 8
67018: PUSH
67019: LD_VAR 0 3
67023: PUSH
67024: LD_VAR 0 4
67028: MINUS
67029: ST_TO_ADDR
// max_x := x + r ;
67030: LD_ADDR_VAR 0 9
67034: PUSH
67035: LD_VAR 0 2
67039: PUSH
67040: LD_VAR 0 4
67044: PLUS
67045: ST_TO_ADDR
// max_y := y + r ;
67046: LD_ADDR_VAR 0 10
67050: PUSH
67051: LD_VAR 0 3
67055: PUSH
67056: LD_VAR 0 4
67060: PLUS
67061: ST_TO_ADDR
// for _x = min_x to max_x do
67062: LD_ADDR_VAR 0 11
67066: PUSH
67067: DOUBLE
67068: LD_VAR 0 7
67072: DEC
67073: ST_TO_ADDR
67074: LD_VAR 0 9
67078: PUSH
67079: FOR_TO
67080: IFFALSE 67197
// for _y = min_y to max_y do
67082: LD_ADDR_VAR 0 12
67086: PUSH
67087: DOUBLE
67088: LD_VAR 0 8
67092: DEC
67093: ST_TO_ADDR
67094: LD_VAR 0 10
67098: PUSH
67099: FOR_TO
67100: IFFALSE 67193
// begin if not ValidHex ( _x , _y ) then
67102: LD_VAR 0 11
67106: PPUSH
67107: LD_VAR 0 12
67111: PPUSH
67112: CALL_OW 488
67116: NOT
67117: IFFALSE 67121
// continue ;
67119: GO 67099
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
67121: LD_VAR 0 11
67125: PPUSH
67126: LD_VAR 0 12
67130: PPUSH
67131: CALL_OW 351
67135: PUSH
67136: LD_VAR 0 11
67140: PPUSH
67141: LD_VAR 0 12
67145: PPUSH
67146: CALL_OW 554
67150: AND
67151: IFFALSE 67191
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
67153: LD_ADDR_VAR 0 13
67157: PUSH
67158: LD_VAR 0 13
67162: PPUSH
67163: LD_VAR 0 13
67167: PUSH
67168: LD_INT 1
67170: PLUS
67171: PPUSH
67172: LD_VAR 0 11
67176: PUSH
67177: LD_VAR 0 12
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PPUSH
67186: CALL_OW 2
67190: ST_TO_ADDR
// end ;
67191: GO 67099
67193: POP
67194: POP
67195: GO 67079
67197: POP
67198: POP
// if not list then
67199: LD_VAR 0 13
67203: NOT
67204: IFFALSE 67208
// exit ;
67206: GO 67452
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
67208: LD_ADDR_VAR 0 13
67212: PUSH
67213: LD_VAR 0 1
67217: PPUSH
67218: LD_VAR 0 13
67222: PPUSH
67223: LD_INT 1
67225: PPUSH
67226: LD_INT 1
67228: PPUSH
67229: CALL 11896 0 4
67233: ST_TO_ADDR
// ComStop ( flame ) ;
67234: LD_VAR 0 1
67238: PPUSH
67239: CALL_OW 141
// for i in list do
67243: LD_ADDR_VAR 0 6
67247: PUSH
67248: LD_VAR 0 13
67252: PUSH
67253: FOR_IN
67254: IFFALSE 67285
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
67256: LD_VAR 0 1
67260: PPUSH
67261: LD_VAR 0 6
67265: PUSH
67266: LD_INT 1
67268: ARRAY
67269: PPUSH
67270: LD_VAR 0 6
67274: PUSH
67275: LD_INT 2
67277: ARRAY
67278: PPUSH
67279: CALL_OW 176
67283: GO 67253
67285: POP
67286: POP
// repeat wait ( 0 0$1 ) ;
67287: LD_INT 35
67289: PPUSH
67290: CALL_OW 67
// task := GetTaskList ( flame ) ;
67294: LD_ADDR_VAR 0 14
67298: PUSH
67299: LD_VAR 0 1
67303: PPUSH
67304: CALL_OW 437
67308: ST_TO_ADDR
// if not task then
67309: LD_VAR 0 14
67313: NOT
67314: IFFALSE 67318
// exit ;
67316: GO 67452
// if task [ 1 ] [ 1 ] <> | then
67318: LD_VAR 0 14
67322: PUSH
67323: LD_INT 1
67325: ARRAY
67326: PUSH
67327: LD_INT 1
67329: ARRAY
67330: PUSH
67331: LD_STRING |
67333: NONEQUAL
67334: IFFALSE 67338
// exit ;
67336: GO 67452
// _x := task [ 1 ] [ 2 ] ;
67338: LD_ADDR_VAR 0 11
67342: PUSH
67343: LD_VAR 0 14
67347: PUSH
67348: LD_INT 1
67350: ARRAY
67351: PUSH
67352: LD_INT 2
67354: ARRAY
67355: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
67356: LD_ADDR_VAR 0 12
67360: PUSH
67361: LD_VAR 0 14
67365: PUSH
67366: LD_INT 1
67368: ARRAY
67369: PUSH
67370: LD_INT 3
67372: ARRAY
67373: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
67374: LD_VAR 0 11
67378: PPUSH
67379: LD_VAR 0 12
67383: PPUSH
67384: CALL_OW 351
67388: NOT
67389: PUSH
67390: LD_VAR 0 11
67394: PPUSH
67395: LD_VAR 0 12
67399: PPUSH
67400: CALL_OW 554
67404: NOT
67405: OR
67406: IFFALSE 67440
// begin task := Delete ( task , 1 ) ;
67408: LD_ADDR_VAR 0 14
67412: PUSH
67413: LD_VAR 0 14
67417: PPUSH
67418: LD_INT 1
67420: PPUSH
67421: CALL_OW 3
67425: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
67426: LD_VAR 0 1
67430: PPUSH
67431: LD_VAR 0 14
67435: PPUSH
67436: CALL_OW 446
// end ; until not HasTask ( flame ) ;
67440: LD_VAR 0 1
67444: PPUSH
67445: CALL_OW 314
67449: NOT
67450: IFFALSE 67287
// end ;
67452: LD_VAR 0 5
67456: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
67457: LD_EXP 91
67461: NOT
67462: IFFALSE 67512
67464: GO 67466
67466: DISABLE
// begin initHack := true ;
67467: LD_ADDR_EXP 91
67471: PUSH
67472: LD_INT 1
67474: ST_TO_ADDR
// hackTanks := [ ] ;
67475: LD_ADDR_EXP 92
67479: PUSH
67480: EMPTY
67481: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
67482: LD_ADDR_EXP 93
67486: PUSH
67487: EMPTY
67488: ST_TO_ADDR
// hackLimit := 3 ;
67489: LD_ADDR_EXP 94
67493: PUSH
67494: LD_INT 3
67496: ST_TO_ADDR
// hackDist := 12 ;
67497: LD_ADDR_EXP 95
67501: PUSH
67502: LD_INT 12
67504: ST_TO_ADDR
// hackCounter := [ ] ;
67505: LD_ADDR_EXP 96
67509: PUSH
67510: EMPTY
67511: ST_TO_ADDR
// end ;
67512: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67513: LD_EXP 91
67517: PUSH
67518: LD_INT 34
67520: PUSH
67521: LD_INT 99
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PPUSH
67528: CALL_OW 69
67532: AND
67533: IFFALSE 67786
67535: GO 67537
67537: DISABLE
67538: LD_INT 0
67540: PPUSH
67541: PPUSH
// begin enable ;
67542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67543: LD_ADDR_VAR 0 1
67547: PUSH
67548: LD_INT 34
67550: PUSH
67551: LD_INT 99
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PPUSH
67558: CALL_OW 69
67562: PUSH
67563: FOR_IN
67564: IFFALSE 67784
// begin if not i in hackTanks then
67566: LD_VAR 0 1
67570: PUSH
67571: LD_EXP 92
67575: IN
67576: NOT
67577: IFFALSE 67660
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67579: LD_ADDR_EXP 92
67583: PUSH
67584: LD_EXP 92
67588: PPUSH
67589: LD_EXP 92
67593: PUSH
67594: LD_INT 1
67596: PLUS
67597: PPUSH
67598: LD_VAR 0 1
67602: PPUSH
67603: CALL_OW 1
67607: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67608: LD_ADDR_EXP 93
67612: PUSH
67613: LD_EXP 93
67617: PPUSH
67618: LD_EXP 93
67622: PUSH
67623: LD_INT 1
67625: PLUS
67626: PPUSH
67627: EMPTY
67628: PPUSH
67629: CALL_OW 1
67633: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67634: LD_ADDR_EXP 96
67638: PUSH
67639: LD_EXP 96
67643: PPUSH
67644: LD_EXP 96
67648: PUSH
67649: LD_INT 1
67651: PLUS
67652: PPUSH
67653: EMPTY
67654: PPUSH
67655: CALL_OW 1
67659: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67660: LD_VAR 0 1
67664: PPUSH
67665: CALL_OW 302
67669: NOT
67670: IFFALSE 67683
// begin HackUnlinkAll ( i ) ;
67672: LD_VAR 0 1
67676: PPUSH
67677: CALL 67789 0 1
// continue ;
67681: GO 67563
// end ; HackCheckCapturedStatus ( i ) ;
67683: LD_VAR 0 1
67687: PPUSH
67688: CALL 68232 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67692: LD_ADDR_VAR 0 2
67696: PUSH
67697: LD_INT 81
67699: PUSH
67700: LD_VAR 0 1
67704: PPUSH
67705: CALL_OW 255
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 33
67716: PUSH
67717: LD_INT 3
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 91
67726: PUSH
67727: LD_VAR 0 1
67731: PUSH
67732: LD_EXP 95
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 50
67744: PUSH
67745: EMPTY
67746: LIST
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: PPUSH
67754: CALL_OW 69
67758: ST_TO_ADDR
// if not tmp then
67759: LD_VAR 0 2
67763: NOT
67764: IFFALSE 67768
// continue ;
67766: GO 67563
// HackLink ( i , tmp ) ;
67768: LD_VAR 0 1
67772: PPUSH
67773: LD_VAR 0 2
67777: PPUSH
67778: CALL 67925 0 2
// end ;
67782: GO 67563
67784: POP
67785: POP
// end ;
67786: PPOPN 2
67788: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67789: LD_INT 0
67791: PPUSH
67792: PPUSH
67793: PPUSH
// if not hack in hackTanks then
67794: LD_VAR 0 1
67798: PUSH
67799: LD_EXP 92
67803: IN
67804: NOT
67805: IFFALSE 67809
// exit ;
67807: GO 67920
// index := GetElementIndex ( hackTanks , hack ) ;
67809: LD_ADDR_VAR 0 4
67813: PUSH
67814: LD_EXP 92
67818: PPUSH
67819: LD_VAR 0 1
67823: PPUSH
67824: CALL 11193 0 2
67828: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67829: LD_EXP 93
67833: PUSH
67834: LD_VAR 0 4
67838: ARRAY
67839: IFFALSE 67920
// begin for i in hackTanksCaptured [ index ] do
67841: LD_ADDR_VAR 0 3
67845: PUSH
67846: LD_EXP 93
67850: PUSH
67851: LD_VAR 0 4
67855: ARRAY
67856: PUSH
67857: FOR_IN
67858: IFFALSE 67884
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67860: LD_VAR 0 3
67864: PUSH
67865: LD_INT 1
67867: ARRAY
67868: PPUSH
67869: LD_VAR 0 3
67873: PUSH
67874: LD_INT 2
67876: ARRAY
67877: PPUSH
67878: CALL_OW 235
67882: GO 67857
67884: POP
67885: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67886: LD_ADDR_EXP 93
67890: PUSH
67891: LD_EXP 93
67895: PPUSH
67896: LD_VAR 0 4
67900: PPUSH
67901: EMPTY
67902: PPUSH
67903: CALL_OW 1
67907: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67908: LD_VAR 0 1
67912: PPUSH
67913: LD_INT 0
67915: PPUSH
67916: CALL_OW 505
// end ; end ;
67920: LD_VAR 0 2
67924: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67925: LD_INT 0
67927: PPUSH
67928: PPUSH
67929: PPUSH
// if not hack in hackTanks or not vehicles then
67930: LD_VAR 0 1
67934: PUSH
67935: LD_EXP 92
67939: IN
67940: NOT
67941: PUSH
67942: LD_VAR 0 2
67946: NOT
67947: OR
67948: IFFALSE 67952
// exit ;
67950: GO 68227
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67952: LD_ADDR_VAR 0 2
67956: PUSH
67957: LD_VAR 0 1
67961: PPUSH
67962: LD_VAR 0 2
67966: PPUSH
67967: LD_INT 1
67969: PPUSH
67970: LD_INT 1
67972: PPUSH
67973: CALL 11843 0 4
67977: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67978: LD_ADDR_VAR 0 5
67982: PUSH
67983: LD_EXP 92
67987: PPUSH
67988: LD_VAR 0 1
67992: PPUSH
67993: CALL 11193 0 2
67997: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67998: LD_EXP 93
68002: PUSH
68003: LD_VAR 0 5
68007: ARRAY
68008: PUSH
68009: LD_EXP 94
68013: LESS
68014: IFFALSE 68203
// begin for i := 1 to vehicles do
68016: LD_ADDR_VAR 0 4
68020: PUSH
68021: DOUBLE
68022: LD_INT 1
68024: DEC
68025: ST_TO_ADDR
68026: LD_VAR 0 2
68030: PUSH
68031: FOR_TO
68032: IFFALSE 68201
// begin if hackTanksCaptured [ index ] = hackLimit then
68034: LD_EXP 93
68038: PUSH
68039: LD_VAR 0 5
68043: ARRAY
68044: PUSH
68045: LD_EXP 94
68049: EQUAL
68050: IFFALSE 68054
// break ;
68052: GO 68201
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
68054: LD_ADDR_EXP 96
68058: PUSH
68059: LD_EXP 96
68063: PPUSH
68064: LD_VAR 0 5
68068: PPUSH
68069: LD_EXP 96
68073: PUSH
68074: LD_VAR 0 5
68078: ARRAY
68079: PUSH
68080: LD_INT 1
68082: PLUS
68083: PPUSH
68084: CALL_OW 1
68088: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
68089: LD_ADDR_EXP 93
68093: PUSH
68094: LD_EXP 93
68098: PPUSH
68099: LD_VAR 0 5
68103: PUSH
68104: LD_EXP 93
68108: PUSH
68109: LD_VAR 0 5
68113: ARRAY
68114: PUSH
68115: LD_INT 1
68117: PLUS
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PPUSH
68123: LD_VAR 0 2
68127: PUSH
68128: LD_VAR 0 4
68132: ARRAY
68133: PUSH
68134: LD_VAR 0 2
68138: PUSH
68139: LD_VAR 0 4
68143: ARRAY
68144: PPUSH
68145: CALL_OW 255
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PPUSH
68154: CALL 11408 0 3
68158: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
68159: LD_VAR 0 2
68163: PUSH
68164: LD_VAR 0 4
68168: ARRAY
68169: PPUSH
68170: LD_VAR 0 1
68174: PPUSH
68175: CALL_OW 255
68179: PPUSH
68180: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
68184: LD_VAR 0 2
68188: PUSH
68189: LD_VAR 0 4
68193: ARRAY
68194: PPUSH
68195: CALL_OW 141
// end ;
68199: GO 68031
68201: POP
68202: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68203: LD_VAR 0 1
68207: PPUSH
68208: LD_EXP 93
68212: PUSH
68213: LD_VAR 0 5
68217: ARRAY
68218: PUSH
68219: LD_INT 0
68221: PLUS
68222: PPUSH
68223: CALL_OW 505
// end ;
68227: LD_VAR 0 3
68231: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
68232: LD_INT 0
68234: PPUSH
68235: PPUSH
68236: PPUSH
68237: PPUSH
// if not hack in hackTanks then
68238: LD_VAR 0 1
68242: PUSH
68243: LD_EXP 92
68247: IN
68248: NOT
68249: IFFALSE 68253
// exit ;
68251: GO 68493
// index := GetElementIndex ( hackTanks , hack ) ;
68253: LD_ADDR_VAR 0 4
68257: PUSH
68258: LD_EXP 92
68262: PPUSH
68263: LD_VAR 0 1
68267: PPUSH
68268: CALL 11193 0 2
68272: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
68273: LD_ADDR_VAR 0 3
68277: PUSH
68278: DOUBLE
68279: LD_EXP 93
68283: PUSH
68284: LD_VAR 0 4
68288: ARRAY
68289: INC
68290: ST_TO_ADDR
68291: LD_INT 1
68293: PUSH
68294: FOR_DOWNTO
68295: IFFALSE 68467
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
68297: LD_ADDR_VAR 0 5
68301: PUSH
68302: LD_EXP 93
68306: PUSH
68307: LD_VAR 0 4
68311: ARRAY
68312: PUSH
68313: LD_VAR 0 3
68317: ARRAY
68318: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
68319: LD_VAR 0 5
68323: PUSH
68324: LD_INT 1
68326: ARRAY
68327: PPUSH
68328: CALL_OW 302
68332: NOT
68333: PUSH
68334: LD_VAR 0 5
68338: PUSH
68339: LD_INT 1
68341: ARRAY
68342: PPUSH
68343: CALL_OW 255
68347: PUSH
68348: LD_VAR 0 1
68352: PPUSH
68353: CALL_OW 255
68357: NONEQUAL
68358: OR
68359: IFFALSE 68465
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
68361: LD_VAR 0 5
68365: PUSH
68366: LD_INT 1
68368: ARRAY
68369: PPUSH
68370: CALL_OW 305
68374: PUSH
68375: LD_VAR 0 5
68379: PUSH
68380: LD_INT 1
68382: ARRAY
68383: PPUSH
68384: CALL_OW 255
68388: PUSH
68389: LD_VAR 0 1
68393: PPUSH
68394: CALL_OW 255
68398: EQUAL
68399: AND
68400: IFFALSE 68424
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
68402: LD_VAR 0 5
68406: PUSH
68407: LD_INT 1
68409: ARRAY
68410: PPUSH
68411: LD_VAR 0 5
68415: PUSH
68416: LD_INT 2
68418: ARRAY
68419: PPUSH
68420: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
68424: LD_ADDR_EXP 93
68428: PUSH
68429: LD_EXP 93
68433: PPUSH
68434: LD_VAR 0 4
68438: PPUSH
68439: LD_EXP 93
68443: PUSH
68444: LD_VAR 0 4
68448: ARRAY
68449: PPUSH
68450: LD_VAR 0 3
68454: PPUSH
68455: CALL_OW 3
68459: PPUSH
68460: CALL_OW 1
68464: ST_TO_ADDR
// end ; end ;
68465: GO 68294
68467: POP
68468: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
68469: LD_VAR 0 1
68473: PPUSH
68474: LD_EXP 93
68478: PUSH
68479: LD_VAR 0 4
68483: ARRAY
68484: PUSH
68485: LD_INT 0
68487: PLUS
68488: PPUSH
68489: CALL_OW 505
// end ;
68493: LD_VAR 0 2
68497: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68498: LD_INT 0
68500: PPUSH
68501: PPUSH
68502: PPUSH
68503: PPUSH
// if not hack in hackTanks then
68504: LD_VAR 0 1
68508: PUSH
68509: LD_EXP 92
68513: IN
68514: NOT
68515: IFFALSE 68519
// exit ;
68517: GO 68604
// index := GetElementIndex ( hackTanks , hack ) ;
68519: LD_ADDR_VAR 0 5
68523: PUSH
68524: LD_EXP 92
68528: PPUSH
68529: LD_VAR 0 1
68533: PPUSH
68534: CALL 11193 0 2
68538: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68539: LD_ADDR_VAR 0 4
68543: PUSH
68544: DOUBLE
68545: LD_INT 1
68547: DEC
68548: ST_TO_ADDR
68549: LD_EXP 93
68553: PUSH
68554: LD_VAR 0 5
68558: ARRAY
68559: PUSH
68560: FOR_TO
68561: IFFALSE 68602
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68563: LD_EXP 93
68567: PUSH
68568: LD_VAR 0 5
68572: ARRAY
68573: PUSH
68574: LD_VAR 0 4
68578: ARRAY
68579: PUSH
68580: LD_INT 1
68582: ARRAY
68583: PUSH
68584: LD_VAR 0 2
68588: EQUAL
68589: IFFALSE 68600
// KillUnit ( vehicle ) ;
68591: LD_VAR 0 2
68595: PPUSH
68596: CALL_OW 66
68600: GO 68560
68602: POP
68603: POP
// end ;
68604: LD_VAR 0 3
68608: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68609: LD_EXP 97
68613: NOT
68614: IFFALSE 68649
68616: GO 68618
68618: DISABLE
// begin initMiner := true ;
68619: LD_ADDR_EXP 97
68623: PUSH
68624: LD_INT 1
68626: ST_TO_ADDR
// minersList := [ ] ;
68627: LD_ADDR_EXP 98
68631: PUSH
68632: EMPTY
68633: ST_TO_ADDR
// minerMinesList := [ ] ;
68634: LD_ADDR_EXP 99
68638: PUSH
68639: EMPTY
68640: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68641: LD_ADDR_EXP 100
68645: PUSH
68646: LD_INT 5
68648: ST_TO_ADDR
// end ;
68649: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68650: LD_EXP 97
68654: PUSH
68655: LD_INT 34
68657: PUSH
68658: LD_INT 81
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: PPUSH
68665: CALL_OW 69
68669: AND
68670: IFFALSE 69131
68672: GO 68674
68674: DISABLE
68675: LD_INT 0
68677: PPUSH
68678: PPUSH
68679: PPUSH
68680: PPUSH
// begin enable ;
68681: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68682: LD_ADDR_VAR 0 1
68686: PUSH
68687: LD_INT 34
68689: PUSH
68690: LD_INT 81
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PPUSH
68697: CALL_OW 69
68701: PUSH
68702: FOR_IN
68703: IFFALSE 68775
// begin if not i in minersList then
68705: LD_VAR 0 1
68709: PUSH
68710: LD_EXP 98
68714: IN
68715: NOT
68716: IFFALSE 68773
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68718: LD_ADDR_EXP 98
68722: PUSH
68723: LD_EXP 98
68727: PPUSH
68728: LD_EXP 98
68732: PUSH
68733: LD_INT 1
68735: PLUS
68736: PPUSH
68737: LD_VAR 0 1
68741: PPUSH
68742: CALL_OW 1
68746: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68747: LD_ADDR_EXP 99
68751: PUSH
68752: LD_EXP 99
68756: PPUSH
68757: LD_EXP 99
68761: PUSH
68762: LD_INT 1
68764: PLUS
68765: PPUSH
68766: EMPTY
68767: PPUSH
68768: CALL_OW 1
68772: ST_TO_ADDR
// end end ;
68773: GO 68702
68775: POP
68776: POP
// for i := minerMinesList downto 1 do
68777: LD_ADDR_VAR 0 1
68781: PUSH
68782: DOUBLE
68783: LD_EXP 99
68787: INC
68788: ST_TO_ADDR
68789: LD_INT 1
68791: PUSH
68792: FOR_DOWNTO
68793: IFFALSE 69129
// begin if IsLive ( minersList [ i ] ) then
68795: LD_EXP 98
68799: PUSH
68800: LD_VAR 0 1
68804: ARRAY
68805: PPUSH
68806: CALL_OW 300
68810: IFFALSE 68838
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68812: LD_EXP 98
68816: PUSH
68817: LD_VAR 0 1
68821: ARRAY
68822: PPUSH
68823: LD_EXP 99
68827: PUSH
68828: LD_VAR 0 1
68832: ARRAY
68833: PPUSH
68834: CALL_OW 505
// if not minerMinesList [ i ] then
68838: LD_EXP 99
68842: PUSH
68843: LD_VAR 0 1
68847: ARRAY
68848: NOT
68849: IFFALSE 68853
// continue ;
68851: GO 68792
// for j := minerMinesList [ i ] downto 1 do
68853: LD_ADDR_VAR 0 2
68857: PUSH
68858: DOUBLE
68859: LD_EXP 99
68863: PUSH
68864: LD_VAR 0 1
68868: ARRAY
68869: INC
68870: ST_TO_ADDR
68871: LD_INT 1
68873: PUSH
68874: FOR_DOWNTO
68875: IFFALSE 69125
// begin side := GetSide ( minersList [ i ] ) ;
68877: LD_ADDR_VAR 0 3
68881: PUSH
68882: LD_EXP 98
68886: PUSH
68887: LD_VAR 0 1
68891: ARRAY
68892: PPUSH
68893: CALL_OW 255
68897: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68898: LD_ADDR_VAR 0 4
68902: PUSH
68903: LD_EXP 99
68907: PUSH
68908: LD_VAR 0 1
68912: ARRAY
68913: PUSH
68914: LD_VAR 0 2
68918: ARRAY
68919: PUSH
68920: LD_INT 1
68922: ARRAY
68923: PPUSH
68924: LD_EXP 99
68928: PUSH
68929: LD_VAR 0 1
68933: ARRAY
68934: PUSH
68935: LD_VAR 0 2
68939: ARRAY
68940: PUSH
68941: LD_INT 2
68943: ARRAY
68944: PPUSH
68945: CALL_OW 428
68949: ST_TO_ADDR
// if not tmp then
68950: LD_VAR 0 4
68954: NOT
68955: IFFALSE 68959
// continue ;
68957: GO 68874
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68959: LD_VAR 0 4
68963: PUSH
68964: LD_INT 81
68966: PUSH
68967: LD_VAR 0 3
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PPUSH
68976: CALL_OW 69
68980: IN
68981: PUSH
68982: LD_EXP 99
68986: PUSH
68987: LD_VAR 0 1
68991: ARRAY
68992: PUSH
68993: LD_VAR 0 2
68997: ARRAY
68998: PUSH
68999: LD_INT 1
69001: ARRAY
69002: PPUSH
69003: LD_EXP 99
69007: PUSH
69008: LD_VAR 0 1
69012: ARRAY
69013: PUSH
69014: LD_VAR 0 2
69018: ARRAY
69019: PUSH
69020: LD_INT 2
69022: ARRAY
69023: PPUSH
69024: CALL_OW 458
69028: AND
69029: IFFALSE 69123
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
69031: LD_EXP 99
69035: PUSH
69036: LD_VAR 0 1
69040: ARRAY
69041: PUSH
69042: LD_VAR 0 2
69046: ARRAY
69047: PUSH
69048: LD_INT 1
69050: ARRAY
69051: PPUSH
69052: LD_EXP 99
69056: PUSH
69057: LD_VAR 0 1
69061: ARRAY
69062: PUSH
69063: LD_VAR 0 2
69067: ARRAY
69068: PUSH
69069: LD_INT 2
69071: ARRAY
69072: PPUSH
69073: LD_VAR 0 3
69077: PPUSH
69078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
69082: LD_ADDR_EXP 99
69086: PUSH
69087: LD_EXP 99
69091: PPUSH
69092: LD_VAR 0 1
69096: PPUSH
69097: LD_EXP 99
69101: PUSH
69102: LD_VAR 0 1
69106: ARRAY
69107: PPUSH
69108: LD_VAR 0 2
69112: PPUSH
69113: CALL_OW 3
69117: PPUSH
69118: CALL_OW 1
69122: ST_TO_ADDR
// end ; end ;
69123: GO 68874
69125: POP
69126: POP
// end ;
69127: GO 68792
69129: POP
69130: POP
// end ;
69131: PPOPN 4
69133: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
69134: LD_INT 0
69136: PPUSH
69137: PPUSH
// result := false ;
69138: LD_ADDR_VAR 0 4
69142: PUSH
69143: LD_INT 0
69145: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
69146: LD_VAR 0 1
69150: PPUSH
69151: CALL_OW 264
69155: PUSH
69156: LD_INT 81
69158: EQUAL
69159: NOT
69160: IFFALSE 69164
// exit ;
69162: GO 69404
// index := GetElementIndex ( minersList , unit ) ;
69164: LD_ADDR_VAR 0 5
69168: PUSH
69169: LD_EXP 98
69173: PPUSH
69174: LD_VAR 0 1
69178: PPUSH
69179: CALL 11193 0 2
69183: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
69184: LD_EXP 99
69188: PUSH
69189: LD_VAR 0 5
69193: ARRAY
69194: PUSH
69195: LD_EXP 100
69199: GREATEREQUAL
69200: IFFALSE 69204
// exit ;
69202: GO 69404
// ComMoveXY ( unit , x , y ) ;
69204: LD_VAR 0 1
69208: PPUSH
69209: LD_VAR 0 2
69213: PPUSH
69214: LD_VAR 0 3
69218: PPUSH
69219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69223: LD_INT 35
69225: PPUSH
69226: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
69230: LD_VAR 0 1
69234: PPUSH
69235: LD_VAR 0 2
69239: PPUSH
69240: LD_VAR 0 3
69244: PPUSH
69245: CALL 42954 0 3
69249: NOT
69250: PUSH
69251: LD_VAR 0 1
69255: PPUSH
69256: CALL_OW 314
69260: AND
69261: IFFALSE 69265
// exit ;
69263: GO 69404
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
69265: LD_VAR 0 2
69269: PPUSH
69270: LD_VAR 0 3
69274: PPUSH
69275: CALL_OW 428
69279: PUSH
69280: LD_VAR 0 1
69284: EQUAL
69285: PUSH
69286: LD_VAR 0 1
69290: PPUSH
69291: CALL_OW 314
69295: NOT
69296: AND
69297: IFFALSE 69223
// PlaySoundXY ( x , y , PlantMine ) ;
69299: LD_VAR 0 2
69303: PPUSH
69304: LD_VAR 0 3
69308: PPUSH
69309: LD_STRING PlantMine
69311: PPUSH
69312: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
69316: LD_VAR 0 2
69320: PPUSH
69321: LD_VAR 0 3
69325: PPUSH
69326: LD_VAR 0 1
69330: PPUSH
69331: CALL_OW 255
69335: PPUSH
69336: LD_INT 0
69338: PPUSH
69339: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
69343: LD_ADDR_EXP 99
69347: PUSH
69348: LD_EXP 99
69352: PPUSH
69353: LD_VAR 0 5
69357: PUSH
69358: LD_EXP 99
69362: PUSH
69363: LD_VAR 0 5
69367: ARRAY
69368: PUSH
69369: LD_INT 1
69371: PLUS
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PPUSH
69377: LD_VAR 0 2
69381: PUSH
69382: LD_VAR 0 3
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PPUSH
69391: CALL 11408 0 3
69395: ST_TO_ADDR
// result := true ;
69396: LD_ADDR_VAR 0 4
69400: PUSH
69401: LD_INT 1
69403: ST_TO_ADDR
// end ;
69404: LD_VAR 0 4
69408: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
69409: LD_INT 0
69411: PPUSH
69412: PPUSH
69413: PPUSH
// if not unit in minersList then
69414: LD_VAR 0 1
69418: PUSH
69419: LD_EXP 98
69423: IN
69424: NOT
69425: IFFALSE 69429
// exit ;
69427: GO 69821
// index := GetElementIndex ( minersList , unit ) ;
69429: LD_ADDR_VAR 0 6
69433: PUSH
69434: LD_EXP 98
69438: PPUSH
69439: LD_VAR 0 1
69443: PPUSH
69444: CALL 11193 0 2
69448: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
69449: LD_ADDR_VAR 0 5
69453: PUSH
69454: DOUBLE
69455: LD_EXP 99
69459: PUSH
69460: LD_VAR 0 6
69464: ARRAY
69465: INC
69466: ST_TO_ADDR
69467: LD_INT 1
69469: PUSH
69470: FOR_DOWNTO
69471: IFFALSE 69632
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
69473: LD_EXP 99
69477: PUSH
69478: LD_VAR 0 6
69482: ARRAY
69483: PUSH
69484: LD_VAR 0 5
69488: ARRAY
69489: PUSH
69490: LD_INT 1
69492: ARRAY
69493: PUSH
69494: LD_VAR 0 2
69498: EQUAL
69499: PUSH
69500: LD_EXP 99
69504: PUSH
69505: LD_VAR 0 6
69509: ARRAY
69510: PUSH
69511: LD_VAR 0 5
69515: ARRAY
69516: PUSH
69517: LD_INT 2
69519: ARRAY
69520: PUSH
69521: LD_VAR 0 3
69525: EQUAL
69526: AND
69527: IFFALSE 69630
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69529: LD_EXP 99
69533: PUSH
69534: LD_VAR 0 6
69538: ARRAY
69539: PUSH
69540: LD_VAR 0 5
69544: ARRAY
69545: PUSH
69546: LD_INT 1
69548: ARRAY
69549: PPUSH
69550: LD_EXP 99
69554: PUSH
69555: LD_VAR 0 6
69559: ARRAY
69560: PUSH
69561: LD_VAR 0 5
69565: ARRAY
69566: PUSH
69567: LD_INT 2
69569: ARRAY
69570: PPUSH
69571: LD_VAR 0 1
69575: PPUSH
69576: CALL_OW 255
69580: PPUSH
69581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69585: LD_ADDR_EXP 99
69589: PUSH
69590: LD_EXP 99
69594: PPUSH
69595: LD_VAR 0 6
69599: PPUSH
69600: LD_EXP 99
69604: PUSH
69605: LD_VAR 0 6
69609: ARRAY
69610: PPUSH
69611: LD_VAR 0 5
69615: PPUSH
69616: CALL_OW 3
69620: PPUSH
69621: CALL_OW 1
69625: ST_TO_ADDR
// exit ;
69626: POP
69627: POP
69628: GO 69821
// end ; end ;
69630: GO 69470
69632: POP
69633: POP
// for i := minerMinesList [ index ] downto 1 do
69634: LD_ADDR_VAR 0 5
69638: PUSH
69639: DOUBLE
69640: LD_EXP 99
69644: PUSH
69645: LD_VAR 0 6
69649: ARRAY
69650: INC
69651: ST_TO_ADDR
69652: LD_INT 1
69654: PUSH
69655: FOR_DOWNTO
69656: IFFALSE 69819
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69658: LD_EXP 99
69662: PUSH
69663: LD_VAR 0 6
69667: ARRAY
69668: PUSH
69669: LD_VAR 0 5
69673: ARRAY
69674: PUSH
69675: LD_INT 1
69677: ARRAY
69678: PPUSH
69679: LD_EXP 99
69683: PUSH
69684: LD_VAR 0 6
69688: ARRAY
69689: PUSH
69690: LD_VAR 0 5
69694: ARRAY
69695: PUSH
69696: LD_INT 2
69698: ARRAY
69699: PPUSH
69700: LD_VAR 0 2
69704: PPUSH
69705: LD_VAR 0 3
69709: PPUSH
69710: CALL_OW 298
69714: PUSH
69715: LD_INT 6
69717: LESS
69718: IFFALSE 69817
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69720: LD_EXP 99
69724: PUSH
69725: LD_VAR 0 6
69729: ARRAY
69730: PUSH
69731: LD_VAR 0 5
69735: ARRAY
69736: PUSH
69737: LD_INT 1
69739: ARRAY
69740: PPUSH
69741: LD_EXP 99
69745: PUSH
69746: LD_VAR 0 6
69750: ARRAY
69751: PUSH
69752: LD_VAR 0 5
69756: ARRAY
69757: PUSH
69758: LD_INT 2
69760: ARRAY
69761: PPUSH
69762: LD_VAR 0 1
69766: PPUSH
69767: CALL_OW 255
69771: PPUSH
69772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69776: LD_ADDR_EXP 99
69780: PUSH
69781: LD_EXP 99
69785: PPUSH
69786: LD_VAR 0 6
69790: PPUSH
69791: LD_EXP 99
69795: PUSH
69796: LD_VAR 0 6
69800: ARRAY
69801: PPUSH
69802: LD_VAR 0 5
69806: PPUSH
69807: CALL_OW 3
69811: PPUSH
69812: CALL_OW 1
69816: ST_TO_ADDR
// end ; end ;
69817: GO 69655
69819: POP
69820: POP
// end ;
69821: LD_VAR 0 4
69825: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69826: LD_INT 0
69828: PPUSH
69829: PPUSH
69830: PPUSH
69831: PPUSH
69832: PPUSH
69833: PPUSH
69834: PPUSH
69835: PPUSH
69836: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69837: LD_VAR 0 1
69841: PPUSH
69842: CALL_OW 264
69846: PUSH
69847: LD_INT 81
69849: EQUAL
69850: NOT
69851: PUSH
69852: LD_VAR 0 1
69856: PUSH
69857: LD_EXP 98
69861: IN
69862: NOT
69863: OR
69864: IFFALSE 69868
// exit ;
69866: GO 70190
// index := GetElementIndex ( minersList , unit ) ;
69868: LD_ADDR_VAR 0 6
69872: PUSH
69873: LD_EXP 98
69877: PPUSH
69878: LD_VAR 0 1
69882: PPUSH
69883: CALL 11193 0 2
69887: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69888: LD_ADDR_VAR 0 8
69892: PUSH
69893: LD_EXP 100
69897: PUSH
69898: LD_EXP 99
69902: PUSH
69903: LD_VAR 0 6
69907: ARRAY
69908: MINUS
69909: ST_TO_ADDR
// if not minesFreeAmount then
69910: LD_VAR 0 8
69914: NOT
69915: IFFALSE 69919
// exit ;
69917: GO 70190
// tmp := [ ] ;
69919: LD_ADDR_VAR 0 7
69923: PUSH
69924: EMPTY
69925: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69926: LD_ADDR_VAR 0 5
69930: PUSH
69931: DOUBLE
69932: LD_INT 1
69934: DEC
69935: ST_TO_ADDR
69936: LD_VAR 0 8
69940: PUSH
69941: FOR_TO
69942: IFFALSE 70137
// begin _d := rand ( 0 , 5 ) ;
69944: LD_ADDR_VAR 0 11
69948: PUSH
69949: LD_INT 0
69951: PPUSH
69952: LD_INT 5
69954: PPUSH
69955: CALL_OW 12
69959: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69960: LD_ADDR_VAR 0 12
69964: PUSH
69965: LD_INT 2
69967: PPUSH
69968: LD_INT 6
69970: PPUSH
69971: CALL_OW 12
69975: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69976: LD_ADDR_VAR 0 9
69980: PUSH
69981: LD_VAR 0 2
69985: PPUSH
69986: LD_VAR 0 11
69990: PPUSH
69991: LD_VAR 0 12
69995: PPUSH
69996: CALL_OW 272
70000: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
70001: LD_ADDR_VAR 0 10
70005: PUSH
70006: LD_VAR 0 3
70010: PPUSH
70011: LD_VAR 0 11
70015: PPUSH
70016: LD_VAR 0 12
70020: PPUSH
70021: CALL_OW 273
70025: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
70026: LD_VAR 0 9
70030: PPUSH
70031: LD_VAR 0 10
70035: PPUSH
70036: CALL_OW 488
70040: PUSH
70041: LD_VAR 0 9
70045: PUSH
70046: LD_VAR 0 10
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_VAR 0 7
70059: IN
70060: NOT
70061: AND
70062: PUSH
70063: LD_VAR 0 9
70067: PPUSH
70068: LD_VAR 0 10
70072: PPUSH
70073: CALL_OW 458
70077: NOT
70078: AND
70079: IFFALSE 70121
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
70081: LD_ADDR_VAR 0 7
70085: PUSH
70086: LD_VAR 0 7
70090: PPUSH
70091: LD_VAR 0 7
70095: PUSH
70096: LD_INT 1
70098: PLUS
70099: PPUSH
70100: LD_VAR 0 9
70104: PUSH
70105: LD_VAR 0 10
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PPUSH
70114: CALL_OW 1
70118: ST_TO_ADDR
70119: GO 70135
// i := i - 1 ;
70121: LD_ADDR_VAR 0 5
70125: PUSH
70126: LD_VAR 0 5
70130: PUSH
70131: LD_INT 1
70133: MINUS
70134: ST_TO_ADDR
// end ;
70135: GO 69941
70137: POP
70138: POP
// for i in tmp do
70139: LD_ADDR_VAR 0 5
70143: PUSH
70144: LD_VAR 0 7
70148: PUSH
70149: FOR_IN
70150: IFFALSE 70188
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
70152: LD_VAR 0 1
70156: PPUSH
70157: LD_VAR 0 5
70161: PUSH
70162: LD_INT 1
70164: ARRAY
70165: PPUSH
70166: LD_VAR 0 5
70170: PUSH
70171: LD_INT 2
70173: ARRAY
70174: PPUSH
70175: CALL 69134 0 3
70179: NOT
70180: IFFALSE 70186
// exit ;
70182: POP
70183: POP
70184: GO 70190
70186: GO 70149
70188: POP
70189: POP
// end ;
70190: LD_VAR 0 4
70194: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
70195: LD_INT 0
70197: PPUSH
70198: PPUSH
70199: PPUSH
70200: PPUSH
70201: PPUSH
70202: PPUSH
70203: PPUSH
70204: PPUSH
70205: PPUSH
// if GetClass ( unit ) <> class_sniper then
70206: LD_VAR 0 1
70210: PPUSH
70211: CALL_OW 257
70215: PUSH
70216: LD_INT 5
70218: NONEQUAL
70219: IFFALSE 70223
// exit ;
70221: GO 70689
// dist := 8 ;
70223: LD_ADDR_VAR 0 5
70227: PUSH
70228: LD_INT 8
70230: ST_TO_ADDR
// viewRange := 12 ;
70231: LD_ADDR_VAR 0 8
70235: PUSH
70236: LD_INT 12
70238: ST_TO_ADDR
// side := GetSide ( unit ) ;
70239: LD_ADDR_VAR 0 6
70243: PUSH
70244: LD_VAR 0 1
70248: PPUSH
70249: CALL_OW 255
70253: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
70254: LD_INT 61
70256: PPUSH
70257: LD_VAR 0 6
70261: PPUSH
70262: CALL_OW 321
70266: PUSH
70267: LD_INT 2
70269: EQUAL
70270: IFFALSE 70280
// viewRange := 16 ;
70272: LD_ADDR_VAR 0 8
70276: PUSH
70277: LD_INT 16
70279: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
70280: LD_VAR 0 1
70284: PPUSH
70285: LD_VAR 0 2
70289: PPUSH
70290: LD_VAR 0 3
70294: PPUSH
70295: CALL_OW 297
70299: PUSH
70300: LD_VAR 0 5
70304: GREATER
70305: IFFALSE 70384
// begin ComMoveXY ( unit , x , y ) ;
70307: LD_VAR 0 1
70311: PPUSH
70312: LD_VAR 0 2
70316: PPUSH
70317: LD_VAR 0 3
70321: PPUSH
70322: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
70326: LD_INT 35
70328: PPUSH
70329: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
70333: LD_VAR 0 1
70337: PPUSH
70338: LD_VAR 0 2
70342: PPUSH
70343: LD_VAR 0 3
70347: PPUSH
70348: CALL 42954 0 3
70352: NOT
70353: IFFALSE 70357
// exit ;
70355: GO 70689
// until GetDistUnitXY ( unit , x , y ) < dist ;
70357: LD_VAR 0 1
70361: PPUSH
70362: LD_VAR 0 2
70366: PPUSH
70367: LD_VAR 0 3
70371: PPUSH
70372: CALL_OW 297
70376: PUSH
70377: LD_VAR 0 5
70381: LESS
70382: IFFALSE 70326
// end ; ComTurnXY ( unit , x , y ) ;
70384: LD_VAR 0 1
70388: PPUSH
70389: LD_VAR 0 2
70393: PPUSH
70394: LD_VAR 0 3
70398: PPUSH
70399: CALL_OW 118
// repeat if Multiplayer then
70403: LD_OWVAR 4
70407: IFFALSE 70418
// wait ( 35 ) else
70409: LD_INT 35
70411: PPUSH
70412: CALL_OW 67
70416: GO 70425
// wait ( 5 ) ;
70418: LD_INT 5
70420: PPUSH
70421: CALL_OW 67
// _d := GetDir ( unit ) ;
70425: LD_ADDR_VAR 0 11
70429: PUSH
70430: LD_VAR 0 1
70434: PPUSH
70435: CALL_OW 254
70439: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
70440: LD_ADDR_VAR 0 7
70444: PUSH
70445: LD_VAR 0 1
70449: PPUSH
70450: CALL_OW 250
70454: PPUSH
70455: LD_VAR 0 1
70459: PPUSH
70460: CALL_OW 251
70464: PPUSH
70465: LD_VAR 0 2
70469: PPUSH
70470: LD_VAR 0 3
70474: PPUSH
70475: CALL 45562 0 4
70479: ST_TO_ADDR
// until dir = _d ;
70480: LD_VAR 0 7
70484: PUSH
70485: LD_VAR 0 11
70489: EQUAL
70490: IFFALSE 70403
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
70492: LD_ADDR_VAR 0 9
70496: PUSH
70497: LD_VAR 0 1
70501: PPUSH
70502: CALL_OW 250
70506: PPUSH
70507: LD_VAR 0 7
70511: PPUSH
70512: LD_VAR 0 5
70516: PPUSH
70517: CALL_OW 272
70521: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
70522: LD_ADDR_VAR 0 10
70526: PUSH
70527: LD_VAR 0 1
70531: PPUSH
70532: CALL_OW 251
70536: PPUSH
70537: LD_VAR 0 7
70541: PPUSH
70542: LD_VAR 0 5
70546: PPUSH
70547: CALL_OW 273
70551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70552: LD_VAR 0 9
70556: PPUSH
70557: LD_VAR 0 10
70561: PPUSH
70562: CALL_OW 488
70566: NOT
70567: IFFALSE 70571
// exit ;
70569: GO 70689
// ComAnimCustom ( unit , 1 ) ;
70571: LD_VAR 0 1
70575: PPUSH
70576: LD_INT 1
70578: PPUSH
70579: CALL_OW 592
// p := 0 ;
70583: LD_ADDR_VAR 0 12
70587: PUSH
70588: LD_INT 0
70590: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70591: LD_VAR 0 9
70595: PPUSH
70596: LD_VAR 0 10
70600: PPUSH
70601: LD_VAR 0 6
70605: PPUSH
70606: LD_VAR 0 8
70610: PPUSH
70611: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
70615: LD_INT 35
70617: PPUSH
70618: CALL_OW 67
// p := Inc ( p ) ;
70622: LD_ADDR_VAR 0 12
70626: PUSH
70627: LD_VAR 0 12
70631: PPUSH
70632: CALL 45518 0 1
70636: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
70637: LD_VAR 0 12
70641: PUSH
70642: LD_INT 3
70644: EQUAL
70645: PUSH
70646: LD_VAR 0 1
70650: PPUSH
70651: CALL_OW 302
70655: NOT
70656: OR
70657: PUSH
70658: LD_VAR 0 1
70662: PPUSH
70663: CALL_OW 301
70667: OR
70668: IFFALSE 70615
// RemoveSeeing ( _x , _y , side ) ;
70670: LD_VAR 0 9
70674: PPUSH
70675: LD_VAR 0 10
70679: PPUSH
70680: LD_VAR 0 6
70684: PPUSH
70685: CALL_OW 331
// end ;
70689: LD_VAR 0 4
70693: RET
