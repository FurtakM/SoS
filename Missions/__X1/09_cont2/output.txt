// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3776 0 0
// CreateNature ;
  12: CALL 3647 0 0
// Action ;
  16: CALL 3918 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6425 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6425 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6425 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6425 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6425 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6425 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6425 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6425 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6425 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6425 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6425 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6425 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6425 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6425 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6425 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6425 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 44116 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11265 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14733 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11265 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 43021 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11265 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 44116 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 13
3195: PPUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 70
3210: AND
3211: IFFALSE 3644
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
// begin tmp := [ ] ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 3
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 5
3246: PUSH
3247: LD_INT 6
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_OWVAR 67
3260: ARRAY
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3380
// begin uc_side := 3 ;
3265: LD_ADDR_OWVAR 20
3269: PUSH
3270: LD_INT 3
3272: ST_TO_ADDR
// uc_nation := nation_russian ;
3273: LD_ADDR_OWVAR 21
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 6
3286: PUSH
3287: LD_INT 7
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: LD_INT 9
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// if Prob ( 50 ) then
3322: LD_INT 50
3324: PPUSH
3325: CALL_OW 13
3329: IFFALSE 3343
// SetClass ( un , class_bazooker ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 9
3338: PPUSH
3339: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3343: LD_VAR 0 2
3347: PPUSH
3348: LD_INT 12
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 44116 0 2
3377: ST_TO_ADDR
// end ;
3378: GO 3262
3380: POP
3381: POP
// for i := 1 to 4 do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 4
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3566
// begin uc_side := 3 ;
3398: LD_ADDR_OWVAR 20
3402: PUSH
3403: LD_INT 3
3405: ST_TO_ADDR
// uc_nation := nation_russian ;
3406: LD_ADDR_OWVAR 21
3410: PUSH
3411: LD_INT 3
3413: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 8
3425: PUSH
3426: LD_INT 9
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_OWVAR 67
3439: ARRAY
3440: PPUSH
3441: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3445: LD_INT 22
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 43
3456: PUSH
3457: LD_INT 44
3459: PUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 45
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_VAR 0 1
3476: PUSH
3477: LD_INT 4
3479: MOD
3480: PUSH
3481: LD_INT 1
3483: PLUS
3484: ARRAY
3485: PPUSH
3486: LD_INT 100
3488: PPUSH
3489: CALL 11265 0 5
// un := CreateVehicle ;
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: CALL_OW 45
3502: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_INT 4
3510: PPUSH
3511: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3530: CALL_OW 44
3534: PPUSH
3535: LD_VAR 0 2
3539: PPUSH
3540: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL 44116 0 2
3563: ST_TO_ADDR
// end ;
3564: GO 3395
3566: POP
3567: POP
// repeat wait ( 0 0$1 ) ;
3568: LD_INT 35
3570: PPUSH
3571: CALL_OW 67
// for i in tmp do
3575: LD_ADDR_VAR 0 1
3579: PUSH
3580: LD_VAR 0 3
3584: PUSH
3585: FOR_IN
3586: IFFALSE 3624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_INT 22
3595: PUSH
3596: LD_INT 2
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PPUSH
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 74
3617: PPUSH
3618: CALL_OW 115
3622: GO 3585
3624: POP
3625: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_INT 50
3633: PUSH
3634: EMPTY
3635: LIST
3636: PPUSH
3637: CALL_OW 72
3641: NOT
3642: IFFALSE 3568
// end ; end_of_file
3644: PPOPN 3
3646: END
// export function CreateNature ; var i ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
// PrepareTiger ( 0 ) ;
3651: LD_INT 0
3653: PPUSH
3654: CALL 40492 0 1
// for i := 1 to 2 do
3658: LD_ADDR_VAR 0 2
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 2
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3691
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3674: CALL_OW 44
3678: PPUSH
3679: LD_INT 4
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
3689: GO 3671
3691: POP
3692: POP
// PrepareBird ;
3693: CALL 40673 0 0
// for i := 1 to 3 do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: DOUBLE
3703: LD_INT 1
3705: DEC
3706: ST_TO_ADDR
3707: LD_INT 3
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3713: CALL_OW 44
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// PrepareFrog ;
3732: CALL 40593 0 0
// for i := 1 to 3 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 3
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3769
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3752: CALL_OW 44
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
3767: GO 3749
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function LoadTech ; var i , tmp ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3781: LD_ADDR_VAR 0 3
3785: PUSH
3786: LD_STRING 09_tech
3788: PPUSH
3789: EMPTY
3790: PPUSH
3791: CALL_OW 30
3795: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL 8527 0 1
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3844
// SetTech ( i , 2 , tmp [ i ] ) ;
3819: LD_VAR 0 2
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 322
3842: GO 3816
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3851: LD_ADDR_EXP 8
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// end ;
3859: PPOPN 1
3861: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3862: LD_VAR 0 1
3866: PUSH
3867: LD_EXP 21
3871: EQUAL
3872: IFFALSE 3881
// YouLost ( Schulz ) ;
3874: LD_STRING Schulz
3876: PPUSH
3877: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3881: LD_VAR 0 1
3885: PUSH
3886: LD_EXP 10
3890: EQUAL
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 255
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: AND
3906: IFFALSE 3915
// YouLost ( Heike ) ;
3908: LD_STRING Heike
3910: PPUSH
3911: CALL_OW 104
// end ; end_of_file
3915: PPOPN 1
3917: END
// export function Action ; var p , i , tmp ; begin
3918: LD_INT 0
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3924: LD_INT 12
3926: PPUSH
3927: LD_INT 12
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 10
3935: PPUSH
3936: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3940: LD_INT 12
3942: PPUSH
3943: LD_INT 12
3945: PPUSH
3946: LD_INT 2
3948: PPUSH
3949: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 12
3958: PPUSH
3959: CALL_OW 86
// InGameOn ;
3963: CALL_OW 8
// PrepareArabian ;
3967: CALL 133 0 0
// InGameOff ;
3971: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3975: LD_STRING M4
3977: PPUSH
3978: CALL_OW 337
// SaveForQuickRestart ;
3982: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3986: LD_INT 35
3988: PPUSH
3989: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3993: LD_INT 9
3995: PPUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 70
4010: IFFALSE 3986
// PrepareHeikeCamp ;
4012: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// if heikeIsDead then
4023: LD_EXP 7
4027: IFFALSE 4363
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4029: LD_INT 116
4031: PPUSH
4032: LD_INT 58
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 26
4040: NEG
4041: PPUSH
4042: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4046: LD_INT 116
4048: PPUSH
4049: LD_INT 58
4051: PPUSH
4052: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4056: LD_EXP 21
4060: PPUSH
4061: LD_STRING DL-Obj-a-1
4063: PPUSH
4064: CALL_OW 88
// InGameOn ;
4068: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4072: LD_INT 116
4074: PPUSH
4075: LD_INT 58
4077: PPUSH
4078: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4082: LD_INT 22
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: LD_EXP 21
4101: PUSH
4102: LD_EXP 25
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: DIFF
4111: PPUSH
4112: LD_INT 96
4114: PPUSH
4115: LD_INT 65
4117: PPUSH
4118: CALL_OW 111
// if IsInUnit ( Schulz ) then
4122: LD_EXP 21
4126: PPUSH
4127: CALL_OW 310
4131: IFFALSE 4155
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4133: LD_EXP 21
4137: PPUSH
4138: CALL_OW 310
4142: PPUSH
4143: LD_INT 115
4145: PPUSH
4146: LD_INT 61
4148: PPUSH
4149: CALL_OW 111
4153: GO 4170
// ComMoveXY ( Schulz , 115 , 61 ) ;
4155: LD_EXP 21
4159: PPUSH
4160: LD_INT 115
4162: PPUSH
4163: LD_INT 61
4165: PPUSH
4166: CALL_OW 111
// if IsInUnit ( Nia ) then
4170: LD_EXP 25
4174: PPUSH
4175: CALL_OW 310
4179: IFFALSE 4203
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4181: LD_EXP 25
4185: PPUSH
4186: CALL_OW 310
4190: PPUSH
4191: LD_INT 115
4193: PPUSH
4194: LD_INT 61
4196: PPUSH
4197: CALL_OW 111
4201: GO 4218
// ComMoveXY ( Nia , 115 , 61 ) ;
4203: LD_EXP 25
4207: PPUSH
4208: LD_INT 115
4210: PPUSH
4211: LD_INT 61
4213: PPUSH
4214: CALL_OW 111
// p := 0 ;
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4226: LD_INT 35
4228: PPUSH
4229: CALL_OW 67
// p := Inc ( p ) ;
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: LD_VAR 0 2
4242: PPUSH
4243: CALL 45477 0 1
4247: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4248: LD_INT 115
4250: PPUSH
4251: LD_INT 61
4253: PPUSH
4254: CALL_OW 428
4258: PUSH
4259: LD_VAR 0 2
4263: PUSH
4264: LD_INT 20
4266: GREATER
4267: OR
4268: IFFALSE 4226
// if Givi and IsOk ( Nia ) then
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 25
4279: PPUSH
4280: CALL_OW 302
4284: AND
4285: IFFALSE 4335
// begin Say ( Nia , DN-Obj-a-2 ) ;
4287: LD_EXP 25
4291: PPUSH
4292: LD_STRING DN-Obj-a-2
4294: PPUSH
4295: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4299: LD_EXP 21
4303: PPUSH
4304: LD_STRING DL-Obj-a-3
4306: PPUSH
4307: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4311: LD_EXP 25
4315: PPUSH
4316: LD_STRING DN-Obj-a-4
4318: PPUSH
4319: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4323: LD_EXP 21
4327: PPUSH
4328: LD_STRING DL-Obj-a-5
4330: PPUSH
4331: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4335: LD_INT 35
4337: PPUSH
4338: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4342: LD_EXP 21
4346: PPUSH
4347: LD_STRING DL-Fail-1
4349: PPUSH
4350: CALL_OW 88
// YouLost ( Fail ) ;
4354: LD_STRING Fail
4356: PPUSH
4357: CALL_OW 104
// exit ;
4361: GO 5378
// end ; PrepareRussianBaseAttackers ;
4363: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4367: LD_INT 35
4369: PPUSH
4370: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4374: LD_INT 116
4376: PPUSH
4377: LD_INT 58
4379: PPUSH
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 26
4385: NEG
4386: PPUSH
4387: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4391: LD_INT 116
4393: PPUSH
4394: LD_INT 58
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4404: LD_INT 116
4406: PPUSH
4407: LD_INT 58
4409: PPUSH
4410: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4414: LD_INT 5
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: CALL_OW 343
// DialogueOn ;
4424: CALL_OW 6
// Say ( Schulz , DL-Obj-1 ) ;
4428: LD_EXP 21
4432: PPUSH
4433: LD_STRING DL-Obj-1
4435: PPUSH
4436: CALL_OW 88
// DialogueOff ;
4440: CALL_OW 7
// PrepareBasim ;
4444: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4448: LD_INT 10
4450: PPUSH
4451: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4455: LD_INT 8
4457: PPUSH
4458: LD_INT 2
4460: PPUSH
4461: CALL_OW 343
// repeat wait ( 0 0$0.3 ) ;
4465: LD_INT 10
4467: PPUSH
4468: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 12 ] ] ) ;
4472: LD_INT 22
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 92
4484: PUSH
4485: LD_INT 117
4487: PUSH
4488: LD_INT 58
4490: PUSH
4491: LD_INT 12
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 69
4508: IFFALSE 4465
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4510: LD_ADDR_VAR 0 3
4514: PUSH
4515: LD_INT 22
4517: PUSH
4518: LD_INT 5
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: FOR_IN
4531: IFFALSE 4547
// SetSide ( i , 2 ) ;
4533: LD_VAR 0 3
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 235
4545: GO 4530
4547: POP
4548: POP
// repeat wait ( 0 0$1 ) ;
4549: LD_INT 35
4551: PPUSH
4552: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_INT 50
4563: PUSH
4564: EMPTY
4565: LIST
4566: PUSH
4567: LD_INT 25
4569: PUSH
4570: LD_INT 17
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 69
4585: ST_TO_ADDR
// for i in tmp do
4586: LD_ADDR_VAR 0 3
4590: PUSH
4591: LD_VAR 0 4
4595: PUSH
4596: FOR_IN
4597: IFFALSE 4635
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4599: LD_VAR 0 3
4603: PPUSH
4604: LD_INT 22
4606: PUSH
4607: LD_INT 3
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_VAR 0 3
4623: PPUSH
4624: CALL_OW 74
4628: PPUSH
4629: CALL_OW 115
4633: GO 4596
4635: POP
4636: POP
// until See ( 2 , Basim ) and kamikazed ;
4637: LD_INT 2
4639: PPUSH
4640: LD_EXP 22
4644: PPUSH
4645: CALL_OW 292
4649: PUSH
4650: LD_EXP 8
4654: AND
4655: IFFALSE 4549
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_INT 50
4664: PUSH
4665: EMPTY
4666: LIST
4667: PUSH
4668: LD_INT 25
4670: PUSH
4671: LD_INT 17
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 69
4686: ST_TO_ADDR
// if tmp then
4687: LD_VAR 0 4
4691: IFFALSE 4719
// for i in tmp do
4693: LD_ADDR_VAR 0 3
4697: PUSH
4698: LD_VAR 0 4
4702: PUSH
4703: FOR_IN
4704: IFFALSE 4717
// KillUnit ( i ) ;
4706: LD_VAR 0 3
4710: PPUSH
4711: CALL_OW 66
4715: GO 4703
4717: POP
4718: POP
// Say ( Basim , DBs-Obj-2 ) ;
4719: LD_EXP 22
4723: PPUSH
4724: LD_STRING DBs-Obj-2
4726: PPUSH
4727: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4731: LD_INT 35
4733: PPUSH
4734: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 3
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 50
4750: PUSH
4751: EMPTY
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: NOT
4763: IFFALSE 4731
// ComExit ( Heike ) ;
4765: LD_EXP 10
4769: PPUSH
4770: CALL 44514 0 1
// DialogueOn ;
4774: CALL_OW 6
// if IsOk ( Kaia ) then
4778: LD_EXP 15
4782: PPUSH
4783: CALL_OW 302
4787: IFFALSE 4930
// begin CenterNowOnUnits ( Kaia ) ;
4789: LD_EXP 15
4793: PPUSH
4794: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4798: LD_EXP 15
4802: PPUSH
4803: LD_STRING DK-Obj-3
4805: PPUSH
4806: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4810: LD_EXP 11
4814: PPUSH
4815: LD_STRING DG-Obj-4
4817: PPUSH
4818: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4822: LD_EXP 15
4826: PPUSH
4827: LD_STRING DK-Obj-5
4829: PPUSH
4830: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4834: LD_EXP 15
4838: PPUSH
4839: LD_STRING DK-Obj-6
4841: PPUSH
4842: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4846: LD_EXP 15
4850: PPUSH
4851: LD_STRING DK-Obj-7
4853: PPUSH
4854: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4858: LD_EXP 15
4862: PPUSH
4863: LD_STRING DK-Obj-8
4865: PPUSH
4866: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4870: LD_EXP 21
4874: PPUSH
4875: LD_STRING DL-Obj-9
4877: PPUSH
4878: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4882: LD_EXP 21
4886: PPUSH
4887: LD_STRING DL-Obj-10
4889: PPUSH
4890: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4894: LD_EXP 21
4898: PPUSH
4899: LD_STRING DL-Obj-11
4901: PPUSH
4902: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4906: LD_EXP 21
4910: PPUSH
4911: LD_STRING DL-Obj-12
4913: PPUSH
4914: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4918: LD_EXP 21
4922: PPUSH
4923: LD_STRING DL-Obj-13
4925: PPUSH
4926: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4930: LD_EXP 19
4934: PPUSH
4935: CALL_OW 302
4939: IFFALSE 4977
// begin Say ( Kurt , DKs-Obj-14 ) ;
4941: LD_EXP 19
4945: PPUSH
4946: LD_STRING DKs-Obj-14
4948: PPUSH
4949: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4953: LD_EXP 19
4957: PPUSH
4958: LD_STRING DKs-Obj-15
4960: PPUSH
4961: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4965: LD_EXP 11
4969: PPUSH
4970: LD_STRING DG-Obj-16
4972: PPUSH
4973: CALL_OW 88
// end ; DialogueOff ;
4977: CALL_OW 7
// SetSide ( Basim , 2 ) ;
4981: LD_EXP 22
4985: PPUSH
4986: LD_INT 2
4988: PPUSH
4989: CALL_OW 235
// wait ( 0 0$3 ) ;
4993: LD_INT 105
4995: PPUSH
4996: CALL_OW 67
// ComExit ( Givi ) ;
5000: LD_EXP 11
5004: PPUSH
5005: CALL 44514 0 1
// ComExit ( Nia ) ;
5009: LD_EXP 25
5013: PPUSH
5014: CALL 44514 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5018: LD_EXP 25
5022: PPUSH
5023: LD_EXP 11
5027: PPUSH
5028: CALL_OW 172
// wait ( 0 0$1 ) ;
5032: LD_INT 35
5034: PPUSH
5035: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5039: LD_EXP 11
5043: PPUSH
5044: CALL_OW 302
5048: PUSH
5049: LD_EXP 25
5053: PPUSH
5054: CALL_OW 302
5058: AND
5059: IFFALSE 5333
// begin DialogueOn ;
5061: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5065: LD_EXP 11
5069: PPUSH
5070: LD_STRING DG-Nia-1
5072: PPUSH
5073: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5077: LD_EXP 10
5081: PPUSH
5082: LD_STRING DH-Nia-2
5084: PPUSH
5085: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5089: LD_EXP 11
5093: PPUSH
5094: LD_STRING DG-Nia-3
5096: PPUSH
5097: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5101: LD_EXP 25
5105: PPUSH
5106: LD_STRING DN-Nia-4
5108: PPUSH
5109: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5113: LD_EXP 10
5117: PPUSH
5118: LD_STRING DH-Nia-5
5120: PPUSH
5121: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5125: LD_EXP 11
5129: PPUSH
5130: LD_STRING DG-Nia-6
5132: PPUSH
5133: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5137: LD_EXP 25
5141: PPUSH
5142: LD_STRING DN-Nia-7
5144: PPUSH
5145: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5149: LD_EXP 25
5153: PPUSH
5154: LD_STRING DN-Nia-8
5156: PPUSH
5157: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5161: LD_EXP 25
5165: PPUSH
5166: LD_STRING DN-Nia-9
5168: PPUSH
5169: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5173: LD_EXP 25
5177: PPUSH
5178: LD_STRING DN-Nia-10
5180: PPUSH
5181: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5185: LD_EXP 11
5189: PPUSH
5190: LD_STRING DG-Nia-11
5192: PPUSH
5193: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5197: LD_EXP 25
5201: PPUSH
5202: LD_STRING DN-Nia-12
5204: PPUSH
5205: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5209: LD_EXP 10
5213: PPUSH
5214: LD_STRING DH-Nia-13
5216: PPUSH
5217: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DN-Nia-14
5228: PPUSH
5229: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5233: LD_EXP 10
5237: PPUSH
5238: LD_STRING DH-Nia-15
5240: PPUSH
5241: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5245: LD_EXP 21
5249: PPUSH
5250: LD_STRING DL-Nia-16
5252: PPUSH
5253: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5257: LD_EXP 10
5261: PPUSH
5262: LD_STRING DH-Nia-17
5264: PPUSH
5265: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5269: LD_EXP 10
5273: PPUSH
5274: LD_STRING DH-Nia-18
5276: PPUSH
5277: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5281: LD_EXP 13
5285: PPUSH
5286: LD_STRING DI-Nia-19
5288: PPUSH
5289: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5293: LD_EXP 21
5297: PPUSH
5298: LD_STRING DL-Nia-20
5300: PPUSH
5301: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5305: LD_EXP 21
5309: PPUSH
5310: LD_STRING DL-Nia-21
5312: PPUSH
5313: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5317: LD_EXP 21
5321: PPUSH
5322: LD_STRING DL-Nia-22
5324: PPUSH
5325: CALL_OW 88
// DialogueOff ;
5329: CALL_OW 7
// end ; DialogueOn ;
5333: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5337: LD_EXP 21
5341: PPUSH
5342: LD_STRING DL-Retreat-1
5344: PPUSH
5345: CALL_OW 88
// DialogueOff ;
5349: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5353: LD_STRING M5
5355: PPUSH
5356: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5360: LD_INT 13
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 424
// startRussianAttacks := true ;
5370: LD_ADDR_EXP 9
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// end ;
5378: LD_VAR 0 1
5382: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5383: LD_EXP 9
5387: PUSH
5388: LD_INT 13
5390: PPUSH
5391: LD_INT 22
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: LD_INT 50
5403: PUSH
5404: EMPTY
5405: LIST
5406: PUSH
5407: LD_INT 21
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 71
5426: NOT
5427: AND
5428: IFFALSE 5437
5430: GO 5432
5432: DISABLE
// EndMission ;
5433: CALL 5438 0 0
5437: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5438: LD_INT 0
5440: PPUSH
5441: PPUSH
5442: PPUSH
5443: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_INT 13
5451: PPUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 2
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 21
5464: PUSH
5465: LD_INT 2
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 70
5480: ST_TO_ADDR
// saveVehicles := [ ] ;
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: EMPTY
5487: ST_TO_ADDR
// for i in tmp do
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_VAR 0 3
5497: PUSH
5498: FOR_IN
5499: IFFALSE 5608
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5501: LD_ADDR_VAR 0 4
5505: PUSH
5506: LD_VAR 0 4
5510: PPUSH
5511: LD_VAR 0 2
5515: PPUSH
5516: CALL_OW 265
5520: PUSH
5521: LD_VAR 0 2
5525: PPUSH
5526: CALL_OW 262
5530: PUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 263
5540: PUSH
5541: LD_VAR 0 2
5545: PPUSH
5546: CALL_OW 264
5550: PUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 248
5560: PUSH
5561: LD_VAR 0 2
5565: PPUSH
5566: CALL_OW 261
5570: PUSH
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 271
5580: PUSH
5581: LD_VAR 0 2
5585: PPUSH
5586: CALL_OW 311
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL 44116 0 2
5605: ST_TO_ADDR
5606: GO 5498
5608: POP
5609: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5610: LD_EXP 21
5614: PPUSH
5615: LD_STRING 09c_Schulz
5617: PPUSH
5618: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5622: LD_EXP 21
5626: PPUSH
5627: LD_STRING 09c_Schulz_ID
5629: PPUSH
5630: CALL_OW 39
// if IsOk ( Lemmy ) then
5634: LD_EXP 23
5638: PPUSH
5639: CALL_OW 302
5643: IFFALSE 5669
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5645: LD_EXP 23
5649: PPUSH
5650: LD_STRING 09c_Lemmy
5652: PPUSH
5653: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5657: LD_EXP 23
5661: PPUSH
5662: LD_STRING 09c_Lemmy_ID
5664: PPUSH
5665: CALL_OW 39
// end ; if IsOk ( Nia ) then
5669: LD_EXP 25
5673: PPUSH
5674: CALL_OW 302
5678: IFFALSE 5704
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5680: LD_EXP 25
5684: PPUSH
5685: LD_STRING 09c_Nia
5687: PPUSH
5688: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5692: LD_EXP 25
5696: PPUSH
5697: LD_STRING 09c_Nia_ID
5699: PPUSH
5700: CALL_OW 39
// end ; if IsOk ( Mia ) then
5704: LD_EXP 24
5708: PPUSH
5709: CALL_OW 302
5713: IFFALSE 5739
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5715: LD_EXP 24
5719: PPUSH
5720: LD_STRING 09c_Mia
5722: PPUSH
5723: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5727: LD_EXP 24
5731: PPUSH
5732: LD_STRING 09c_Mia_ID
5734: PPUSH
5735: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5739: LD_EXP 26
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5774
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5750: LD_EXP 26
5754: PPUSH
5755: LD_STRING 09c_Jenna
5757: PPUSH
5758: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5762: LD_EXP 26
5766: PPUSH
5767: LD_STRING 09c_Jenna_ID
5769: PPUSH
5770: CALL_OW 39
// end ; if IsOk ( Basim ) then
5774: LD_EXP 22
5778: PPUSH
5779: CALL_OW 302
5783: IFFALSE 5809
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5785: LD_EXP 22
5789: PPUSH
5790: LD_STRING 09c_Basim
5792: PPUSH
5793: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5797: LD_EXP 22
5801: PPUSH
5802: LD_STRING 09c_Basim_ID
5804: PPUSH
5805: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5809: LD_EXP 10
5813: PPUSH
5814: LD_STRING 09c_Heike
5816: PPUSH
5817: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5821: LD_EXP 10
5825: PPUSH
5826: LD_STRING 09c_Heike_ID
5828: PPUSH
5829: CALL_OW 39
// if IsOk ( Givi ) then
5833: LD_EXP 11
5837: PPUSH
5838: CALL_OW 302
5842: IFFALSE 5868
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5844: LD_EXP 11
5848: PPUSH
5849: LD_STRING 09c_Givi
5851: PPUSH
5852: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5856: LD_EXP 11
5860: PPUSH
5861: LD_STRING 09c_Givi_ID
5863: PPUSH
5864: CALL_OW 39
// end ; if IsOk ( Mike ) then
5868: LD_EXP 12
5872: PPUSH
5873: CALL_OW 302
5877: IFFALSE 5903
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5879: LD_EXP 12
5883: PPUSH
5884: LD_STRING 09c_Mike
5886: PPUSH
5887: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5891: LD_EXP 12
5895: PPUSH
5896: LD_STRING 09c_Mike_ID
5898: PPUSH
5899: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5903: LD_EXP 13
5907: PPUSH
5908: CALL_OW 302
5912: IFFALSE 5938
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5914: LD_EXP 13
5918: PPUSH
5919: LD_STRING 09c_Ibrahim
5921: PPUSH
5922: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5926: LD_EXP 13
5930: PPUSH
5931: LD_STRING 09c_Ibrahim_ID
5933: PPUSH
5934: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5938: LD_EXP 14
5942: PPUSH
5943: CALL_OW 302
5947: IFFALSE 5973
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5949: LD_EXP 14
5953: PPUSH
5954: LD_STRING 09c_Kamil
5956: PPUSH
5957: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5961: LD_EXP 14
5965: PPUSH
5966: LD_STRING 09c_Kamil_ID
5968: PPUSH
5969: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5973: LD_EXP 15
5977: PPUSH
5978: CALL_OW 302
5982: IFFALSE 6008
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5984: LD_EXP 15
5988: PPUSH
5989: LD_STRING 09c_Kaia
5991: PPUSH
5992: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
5996: LD_EXP 15
6000: PPUSH
6001: LD_STRING 09c_Kaia_ID
6003: PPUSH
6004: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6008: LD_EXP 16
6012: PPUSH
6013: CALL_OW 302
6017: IFFALSE 6043
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6019: LD_EXP 16
6023: PPUSH
6024: LD_STRING 09c_Sophia
6026: PPUSH
6027: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6031: LD_EXP 16
6035: PPUSH
6036: LD_STRING 09c_Sophia_ID
6038: PPUSH
6039: CALL_OW 39
// end ; if IsOk ( Markov ) then
6043: LD_EXP 17
6047: PPUSH
6048: CALL_OW 302
6052: IFFALSE 6078
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6054: LD_EXP 17
6058: PPUSH
6059: LD_STRING 09c_Markov
6061: PPUSH
6062: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6066: LD_EXP 17
6070: PPUSH
6071: LD_STRING 09c_Markov_ID
6073: PPUSH
6074: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6078: LD_EXP 18
6082: PPUSH
6083: CALL_OW 302
6087: IFFALSE 6113
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6089: LD_EXP 18
6093: PPUSH
6094: LD_STRING 09c_Olaf
6096: PPUSH
6097: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6101: LD_EXP 18
6105: PPUSH
6106: LD_STRING 09c_Olaf_ID
6108: PPUSH
6109: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6113: LD_EXP 19
6117: PPUSH
6118: CALL_OW 302
6122: IFFALSE 6148
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6124: LD_EXP 19
6128: PPUSH
6129: LD_STRING 09c_Kurt
6131: PPUSH
6132: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6136: LD_EXP 19
6140: PPUSH
6141: LD_STRING 09c_Kurt_ID
6143: PPUSH
6144: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6148: LD_EXP 20
6152: PPUSH
6153: CALL_OW 302
6157: IFFALSE 6183
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6159: LD_EXP 20
6163: PPUSH
6164: LD_STRING 09c_Aviradze
6166: PPUSH
6167: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6171: LD_EXP 20
6175: PPUSH
6176: LD_STRING 09c_Aviradze_ID
6178: PPUSH
6179: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6183: LD_EXP 28
6187: PPUSH
6188: LD_INT 50
6190: PUSH
6191: EMPTY
6192: LIST
6193: PPUSH
6194: CALL_OW 72
6198: PPUSH
6199: LD_STRING 09c_schulzSecondSquad
6201: PPUSH
6202: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6206: LD_EXP 27
6210: PPUSH
6211: LD_INT 50
6213: PUSH
6214: EMPTY
6215: LIST
6216: PPUSH
6217: CALL_OW 72
6221: PPUSH
6222: LD_STRING 09c_heikeSecondSquad
6224: PPUSH
6225: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6229: LD_ADDR_VAR 0 2
6233: PUSH
6234: DOUBLE
6235: LD_INT 1
6237: DEC
6238: ST_TO_ADDR
6239: LD_EXP 28
6243: PPUSH
6244: LD_INT 50
6246: PUSH
6247: EMPTY
6248: LIST
6249: PPUSH
6250: CALL_OW 72
6254: PUSH
6255: FOR_TO
6256: IFFALSE 6284
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6258: LD_EXP 28
6262: PUSH
6263: LD_VAR 0 2
6267: ARRAY
6268: PPUSH
6269: LD_STRING 09c_random_ID_
6271: PUSH
6272: LD_VAR 0 2
6276: STR
6277: PPUSH
6278: CALL_OW 39
6282: GO 6255
6284: POP
6285: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6286: LD_ADDR_VAR 0 2
6290: PUSH
6291: DOUBLE
6292: LD_INT 1
6294: DEC
6295: ST_TO_ADDR
6296: LD_EXP 27
6300: PPUSH
6301: LD_INT 50
6303: PUSH
6304: EMPTY
6305: LIST
6306: PPUSH
6307: CALL_OW 72
6311: PUSH
6312: FOR_TO
6313: IFFALSE 6341
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6315: LD_EXP 27
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_STRING 09c_hrandom_ID_
6328: PUSH
6329: LD_VAR 0 2
6333: STR
6334: PPUSH
6335: CALL_OW 39
6339: GO 6312
6341: POP
6342: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6343: LD_VAR 0 4
6347: PPUSH
6348: LD_STRING 09c_vehicles
6350: PPUSH
6351: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6355: LD_OWVAR 1
6359: PPUSH
6360: LD_STRING 09c_tick
6362: PPUSH
6363: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6367: LD_INT 22
6369: PUSH
6370: LD_INT 2
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 23
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PPUSH
6391: CALL_OW 69
6395: PPUSH
6396: LD_STRING 09c_apes
6398: PPUSH
6399: CALL_OW 38
// wait ( 3 ) ;
6403: LD_INT 3
6405: PPUSH
6406: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6410: LD_INT 1
6412: PPUSH
6413: LD_STRING __x1/09_cont3
6415: PPUSH
6416: CALL_OW 340
// end ; end_of_file
6420: LD_VAR 0 1
6424: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6425: LD_INT 0
6427: PPUSH
6428: PPUSH
// if exist_mode then
6429: LD_VAR 0 2
6433: IFFALSE 6458
// unit := CreateCharacter ( prefix & ident ) else
6435: LD_ADDR_VAR 0 5
6439: PUSH
6440: LD_VAR 0 3
6444: PUSH
6445: LD_VAR 0 1
6449: STR
6450: PPUSH
6451: CALL_OW 34
6455: ST_TO_ADDR
6456: GO 6473
// unit := NewCharacter ( ident ) ;
6458: LD_ADDR_VAR 0 5
6462: PUSH
6463: LD_VAR 0 1
6467: PPUSH
6468: CALL_OW 25
6472: ST_TO_ADDR
// result := unit ;
6473: LD_ADDR_VAR 0 4
6477: PUSH
6478: LD_VAR 0 5
6482: ST_TO_ADDR
// end ;
6483: LD_VAR 0 4
6487: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6488: LD_INT 0
6490: PPUSH
6491: PPUSH
// if not side or not nation then
6492: LD_VAR 0 1
6496: NOT
6497: PUSH
6498: LD_VAR 0 2
6502: NOT
6503: OR
6504: IFFALSE 6508
// exit ;
6506: GO 7276
// case nation of nation_american :
6508: LD_VAR 0 2
6512: PUSH
6513: LD_INT 1
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6735
6521: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6522: LD_ADDR_VAR 0 4
6526: PUSH
6527: LD_INT 35
6529: PUSH
6530: LD_INT 45
6532: PUSH
6533: LD_INT 46
6535: PUSH
6536: LD_INT 47
6538: PUSH
6539: LD_INT 82
6541: PUSH
6542: LD_INT 83
6544: PUSH
6545: LD_INT 84
6547: PUSH
6548: LD_INT 85
6550: PUSH
6551: LD_INT 86
6553: PUSH
6554: LD_INT 1
6556: PUSH
6557: LD_INT 2
6559: PUSH
6560: LD_INT 6
6562: PUSH
6563: LD_INT 15
6565: PUSH
6566: LD_INT 16
6568: PUSH
6569: LD_INT 7
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 13
6577: PUSH
6578: LD_INT 10
6580: PUSH
6581: LD_INT 14
6583: PUSH
6584: LD_INT 20
6586: PUSH
6587: LD_INT 21
6589: PUSH
6590: LD_INT 22
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 32
6598: PUSH
6599: LD_INT 27
6601: PUSH
6602: LD_INT 36
6604: PUSH
6605: LD_INT 69
6607: PUSH
6608: LD_INT 39
6610: PUSH
6611: LD_INT 34
6613: PUSH
6614: LD_INT 40
6616: PUSH
6617: LD_INT 48
6619: PUSH
6620: LD_INT 49
6622: PUSH
6623: LD_INT 50
6625: PUSH
6626: LD_INT 51
6628: PUSH
6629: LD_INT 52
6631: PUSH
6632: LD_INT 53
6634: PUSH
6635: LD_INT 54
6637: PUSH
6638: LD_INT 55
6640: PUSH
6641: LD_INT 56
6643: PUSH
6644: LD_INT 57
6646: PUSH
6647: LD_INT 58
6649: PUSH
6650: LD_INT 59
6652: PUSH
6653: LD_INT 60
6655: PUSH
6656: LD_INT 61
6658: PUSH
6659: LD_INT 62
6661: PUSH
6662: LD_INT 80
6664: PUSH
6665: LD_INT 82
6667: PUSH
6668: LD_INT 83
6670: PUSH
6671: LD_INT 84
6673: PUSH
6674: LD_INT 85
6676: PUSH
6677: LD_INT 86
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: ST_TO_ADDR
6733: GO 7200
6735: LD_INT 2
6737: DOUBLE
6738: EQUAL
6739: IFTRUE 6743
6741: GO 6969
6743: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 35
6751: PUSH
6752: LD_INT 45
6754: PUSH
6755: LD_INT 46
6757: PUSH
6758: LD_INT 47
6760: PUSH
6761: LD_INT 82
6763: PUSH
6764: LD_INT 83
6766: PUSH
6767: LD_INT 84
6769: PUSH
6770: LD_INT 85
6772: PUSH
6773: LD_INT 87
6775: PUSH
6776: LD_INT 70
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: LD_INT 11
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: LD_INT 15
6799: PUSH
6800: LD_INT 18
6802: PUSH
6803: LD_INT 7
6805: PUSH
6806: LD_INT 17
6808: PUSH
6809: LD_INT 8
6811: PUSH
6812: LD_INT 20
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 22
6820: PUSH
6821: LD_INT 72
6823: PUSH
6824: LD_INT 26
6826: PUSH
6827: LD_INT 69
6829: PUSH
6830: LD_INT 39
6832: PUSH
6833: LD_INT 40
6835: PUSH
6836: LD_INT 41
6838: PUSH
6839: LD_INT 42
6841: PUSH
6842: LD_INT 43
6844: PUSH
6845: LD_INT 48
6847: PUSH
6848: LD_INT 49
6850: PUSH
6851: LD_INT 50
6853: PUSH
6854: LD_INT 51
6856: PUSH
6857: LD_INT 52
6859: PUSH
6860: LD_INT 53
6862: PUSH
6863: LD_INT 54
6865: PUSH
6866: LD_INT 55
6868: PUSH
6869: LD_INT 56
6871: PUSH
6872: LD_INT 60
6874: PUSH
6875: LD_INT 61
6877: PUSH
6878: LD_INT 62
6880: PUSH
6881: LD_INT 66
6883: PUSH
6884: LD_INT 67
6886: PUSH
6887: LD_INT 68
6889: PUSH
6890: LD_INT 81
6892: PUSH
6893: LD_INT 82
6895: PUSH
6896: LD_INT 83
6898: PUSH
6899: LD_INT 84
6901: PUSH
6902: LD_INT 85
6904: PUSH
6905: LD_INT 87
6907: PUSH
6908: LD_INT 88
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: ST_TO_ADDR
6967: GO 7200
6969: LD_INT 3
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7199
6977: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6978: LD_ADDR_VAR 0 4
6982: PUSH
6983: LD_INT 46
6985: PUSH
6986: LD_INT 47
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 2
6994: PUSH
6995: LD_INT 82
6997: PUSH
6998: LD_INT 83
7000: PUSH
7001: LD_INT 84
7003: PUSH
7004: LD_INT 85
7006: PUSH
7007: LD_INT 86
7009: PUSH
7010: LD_INT 11
7012: PUSH
7013: LD_INT 9
7015: PUSH
7016: LD_INT 20
7018: PUSH
7019: LD_INT 19
7021: PUSH
7022: LD_INT 21
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: LD_INT 22
7030: PUSH
7031: LD_INT 25
7033: PUSH
7034: LD_INT 28
7036: PUSH
7037: LD_INT 29
7039: PUSH
7040: LD_INT 30
7042: PUSH
7043: LD_INT 31
7045: PUSH
7046: LD_INT 37
7048: PUSH
7049: LD_INT 38
7051: PUSH
7052: LD_INT 32
7054: PUSH
7055: LD_INT 27
7057: PUSH
7058: LD_INT 33
7060: PUSH
7061: LD_INT 69
7063: PUSH
7064: LD_INT 39
7066: PUSH
7067: LD_INT 34
7069: PUSH
7070: LD_INT 40
7072: PUSH
7073: LD_INT 71
7075: PUSH
7076: LD_INT 23
7078: PUSH
7079: LD_INT 44
7081: PUSH
7082: LD_INT 48
7084: PUSH
7085: LD_INT 49
7087: PUSH
7088: LD_INT 50
7090: PUSH
7091: LD_INT 51
7093: PUSH
7094: LD_INT 52
7096: PUSH
7097: LD_INT 53
7099: PUSH
7100: LD_INT 54
7102: PUSH
7103: LD_INT 55
7105: PUSH
7106: LD_INT 56
7108: PUSH
7109: LD_INT 57
7111: PUSH
7112: LD_INT 58
7114: PUSH
7115: LD_INT 59
7117: PUSH
7118: LD_INT 63
7120: PUSH
7121: LD_INT 64
7123: PUSH
7124: LD_INT 65
7126: PUSH
7127: LD_INT 82
7129: PUSH
7130: LD_INT 83
7132: PUSH
7133: LD_INT 84
7135: PUSH
7136: LD_INT 85
7138: PUSH
7139: LD_INT 86
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: ST_TO_ADDR
7197: GO 7200
7199: POP
// if state > - 1 and state < 3 then
7200: LD_VAR 0 3
7204: PUSH
7205: LD_INT 1
7207: NEG
7208: GREATER
7209: PUSH
7210: LD_VAR 0 3
7214: PUSH
7215: LD_INT 3
7217: LESS
7218: AND
7219: IFFALSE 7276
// for i in result do
7221: LD_ADDR_VAR 0 5
7225: PUSH
7226: LD_VAR 0 4
7230: PUSH
7231: FOR_IN
7232: IFFALSE 7274
// if GetTech ( i , side ) <> state then
7234: LD_VAR 0 5
7238: PPUSH
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 321
7248: PUSH
7249: LD_VAR 0 3
7253: NONEQUAL
7254: IFFALSE 7272
// result := result diff i ;
7256: LD_ADDR_VAR 0 4
7260: PUSH
7261: LD_VAR 0 4
7265: PUSH
7266: LD_VAR 0 5
7270: DIFF
7271: ST_TO_ADDR
7272: GO 7231
7274: POP
7275: POP
// end ;
7276: LD_VAR 0 4
7280: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
// result := true ;
7286: LD_ADDR_VAR 0 3
7290: PUSH
7291: LD_INT 1
7293: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 2
7303: PPUSH
7304: CALL_OW 480
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 5
7313: NOT
7314: IFFALSE 7318
// exit ;
7316: GO 7367
// for i in tmp do
7318: LD_ADDR_VAR 0 4
7322: PUSH
7323: LD_VAR 0 5
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7365
// if GetTech ( i , side ) <> state_researched then
7331: LD_VAR 0 4
7335: PPUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 321
7345: PUSH
7346: LD_INT 2
7348: NONEQUAL
7349: IFFALSE 7363
// begin result := false ;
7351: LD_ADDR_VAR 0 3
7355: PUSH
7356: LD_INT 0
7358: ST_TO_ADDR
// exit ;
7359: POP
7360: POP
7361: GO 7367
// end ;
7363: GO 7328
7365: POP
7366: POP
// end ;
7367: LD_VAR 0 3
7371: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7372: LD_INT 0
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7387: LD_VAR 0 1
7391: NOT
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 257
7402: PUSH
7403: LD_INT 9
7405: NONEQUAL
7406: OR
7407: IFFALSE 7411
// exit ;
7409: GO 7984
// side := GetSide ( unit ) ;
7411: LD_ADDR_VAR 0 9
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 255
7425: ST_TO_ADDR
// tech_space := tech_spacanom ;
7426: LD_ADDR_VAR 0 12
7430: PUSH
7431: LD_INT 29
7433: ST_TO_ADDR
// tech_time := tech_taurad ;
7434: LD_ADDR_VAR 0 13
7438: PUSH
7439: LD_INT 28
7441: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7442: LD_ADDR_VAR 0 11
7446: PUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 310
7456: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7457: LD_VAR 0 11
7461: PPUSH
7462: CALL_OW 247
7466: PUSH
7467: LD_INT 2
7469: EQUAL
7470: IFFALSE 7474
// exit ;
7472: GO 7984
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7474: LD_ADDR_VAR 0 8
7478: PUSH
7479: LD_INT 81
7481: PUSH
7482: LD_VAR 0 9
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: LD_INT 21
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PPUSH
7512: CALL_OW 69
7516: ST_TO_ADDR
// if not tmp then
7517: LD_VAR 0 8
7521: NOT
7522: IFFALSE 7526
// exit ;
7524: GO 7984
// if in_unit then
7526: LD_VAR 0 11
7530: IFFALSE 7554
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7532: LD_ADDR_VAR 0 10
7536: PUSH
7537: LD_VAR 0 8
7541: PPUSH
7542: LD_VAR 0 11
7546: PPUSH
7547: CALL_OW 74
7551: ST_TO_ADDR
7552: GO 7574
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7554: LD_ADDR_VAR 0 10
7558: PUSH
7559: LD_VAR 0 8
7563: PPUSH
7564: LD_VAR 0 1
7568: PPUSH
7569: CALL_OW 74
7573: ST_TO_ADDR
// if not enemy then
7574: LD_VAR 0 10
7578: NOT
7579: IFFALSE 7583
// exit ;
7581: GO 7984
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7583: LD_VAR 0 11
7587: PUSH
7588: LD_VAR 0 11
7592: PPUSH
7593: LD_VAR 0 10
7597: PPUSH
7598: CALL_OW 296
7602: PUSH
7603: LD_INT 13
7605: GREATER
7606: AND
7607: PUSH
7608: LD_VAR 0 1
7612: PPUSH
7613: LD_VAR 0 10
7617: PPUSH
7618: CALL_OW 296
7622: PUSH
7623: LD_INT 12
7625: GREATER
7626: OR
7627: IFFALSE 7631
// exit ;
7629: GO 7984
// missile := [ 1 ] ;
7631: LD_ADDR_VAR 0 14
7635: PUSH
7636: LD_INT 1
7638: PUSH
7639: EMPTY
7640: LIST
7641: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7642: LD_VAR 0 9
7646: PPUSH
7647: LD_VAR 0 12
7651: PPUSH
7652: CALL_OW 325
7656: IFFALSE 7685
// missile := Replace ( missile , missile + 1 , 2 ) ;
7658: LD_ADDR_VAR 0 14
7662: PUSH
7663: LD_VAR 0 14
7667: PPUSH
7668: LD_VAR 0 14
7672: PUSH
7673: LD_INT 1
7675: PLUS
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 1
7684: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7685: LD_VAR 0 9
7689: PPUSH
7690: LD_VAR 0 13
7694: PPUSH
7695: CALL_OW 325
7699: PUSH
7700: LD_VAR 0 10
7704: PPUSH
7705: CALL_OW 255
7709: PPUSH
7710: LD_VAR 0 13
7714: PPUSH
7715: CALL_OW 325
7719: NOT
7720: AND
7721: IFFALSE 7750
// missile := Replace ( missile , missile + 1 , 3 ) ;
7723: LD_ADDR_VAR 0 14
7727: PUSH
7728: LD_VAR 0 14
7732: PPUSH
7733: LD_VAR 0 14
7737: PUSH
7738: LD_INT 1
7740: PLUS
7741: PPUSH
7742: LD_INT 3
7744: PPUSH
7745: CALL_OW 1
7749: ST_TO_ADDR
// if missile < 2 then
7750: LD_VAR 0 14
7754: PUSH
7755: LD_INT 2
7757: LESS
7758: IFFALSE 7762
// exit ;
7760: GO 7984
// x := GetX ( enemy ) ;
7762: LD_ADDR_VAR 0 4
7766: PUSH
7767: LD_VAR 0 10
7771: PPUSH
7772: CALL_OW 250
7776: ST_TO_ADDR
// y := GetY ( enemy ) ;
7777: LD_ADDR_VAR 0 5
7781: PUSH
7782: LD_VAR 0 10
7786: PPUSH
7787: CALL_OW 251
7791: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7792: LD_ADDR_VAR 0 6
7796: PUSH
7797: LD_VAR 0 4
7801: PUSH
7802: LD_INT 1
7804: NEG
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: CALL_OW 12
7813: PLUS
7814: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7815: LD_ADDR_VAR 0 7
7819: PUSH
7820: LD_VAR 0 5
7824: PUSH
7825: LD_INT 1
7827: NEG
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: CALL_OW 12
7836: PLUS
7837: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7838: LD_VAR 0 6
7842: PPUSH
7843: LD_VAR 0 7
7847: PPUSH
7848: CALL_OW 488
7852: NOT
7853: IFFALSE 7875
// begin _x := x ;
7855: LD_ADDR_VAR 0 6
7859: PUSH
7860: LD_VAR 0 4
7864: ST_TO_ADDR
// _y := y ;
7865: LD_ADDR_VAR 0 7
7869: PUSH
7870: LD_VAR 0 5
7874: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_INT 1
7882: PPUSH
7883: LD_VAR 0 14
7887: PPUSH
7888: CALL_OW 12
7892: ST_TO_ADDR
// case i of 1 :
7893: LD_VAR 0 3
7897: PUSH
7898: LD_INT 1
7900: DOUBLE
7901: EQUAL
7902: IFTRUE 7906
7904: GO 7923
7906: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7907: LD_VAR 0 1
7911: PPUSH
7912: LD_VAR 0 10
7916: PPUSH
7917: CALL_OW 115
7921: GO 7984
7923: LD_INT 2
7925: DOUBLE
7926: EQUAL
7927: IFTRUE 7931
7929: GO 7953
7931: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_VAR 0 6
7941: PPUSH
7942: LD_VAR 0 7
7946: PPUSH
7947: CALL_OW 153
7951: GO 7984
7953: LD_INT 3
7955: DOUBLE
7956: EQUAL
7957: IFTRUE 7961
7959: GO 7983
7961: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7962: LD_VAR 0 1
7966: PPUSH
7967: LD_VAR 0 6
7971: PPUSH
7972: LD_VAR 0 7
7976: PPUSH
7977: CALL_OW 154
7981: GO 7984
7983: POP
// end ;
7984: LD_VAR 0 2
7988: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7989: LD_INT 0
7991: PPUSH
7992: PPUSH
7993: PPUSH
7994: PPUSH
7995: PPUSH
7996: PPUSH
// if not unit or not building then
7997: LD_VAR 0 1
8001: NOT
8002: PUSH
8003: LD_VAR 0 2
8007: NOT
8008: OR
8009: IFFALSE 8013
// exit ;
8011: GO 8171
// x := GetX ( building ) ;
8013: LD_ADDR_VAR 0 5
8017: PUSH
8018: LD_VAR 0 2
8022: PPUSH
8023: CALL_OW 250
8027: ST_TO_ADDR
// y := GetY ( building ) ;
8028: LD_ADDR_VAR 0 6
8032: PUSH
8033: LD_VAR 0 2
8037: PPUSH
8038: CALL_OW 251
8042: ST_TO_ADDR
// for i = 0 to 5 do
8043: LD_ADDR_VAR 0 4
8047: PUSH
8048: DOUBLE
8049: LD_INT 0
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 5
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8169
// begin _x := ShiftX ( x , i , 3 ) ;
8059: LD_ADDR_VAR 0 7
8063: PUSH
8064: LD_VAR 0 5
8068: PPUSH
8069: LD_VAR 0 4
8073: PPUSH
8074: LD_INT 3
8076: PPUSH
8077: CALL_OW 272
8081: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8082: LD_ADDR_VAR 0 8
8086: PUSH
8087: LD_VAR 0 6
8091: PPUSH
8092: LD_VAR 0 4
8096: PPUSH
8097: LD_INT 3
8099: PPUSH
8100: CALL_OW 273
8104: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8105: LD_VAR 0 7
8109: PPUSH
8110: LD_VAR 0 8
8114: PPUSH
8115: CALL_OW 488
8119: NOT
8120: IFFALSE 8124
// continue ;
8122: GO 8056
// if HexInfo ( _x , _y ) = 0 then
8124: LD_VAR 0 7
8128: PPUSH
8129: LD_VAR 0 8
8133: PPUSH
8134: CALL_OW 428
8138: PUSH
8139: LD_INT 0
8141: EQUAL
8142: IFFALSE 8167
// begin ComMoveXY ( unit , _x , _y ) ;
8144: LD_VAR 0 1
8148: PPUSH
8149: LD_VAR 0 7
8153: PPUSH
8154: LD_VAR 0 8
8158: PPUSH
8159: CALL_OW 111
// exit ;
8163: POP
8164: POP
8165: GO 8171
// end ; end ;
8167: GO 8056
8169: POP
8170: POP
// end ;
8171: LD_VAR 0 3
8175: RET
// export function ScanBase ( side , base_area ) ; begin
8176: LD_INT 0
8178: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8179: LD_ADDR_VAR 0 3
8183: PUSH
8184: LD_VAR 0 2
8188: PPUSH
8189: LD_INT 81
8191: PUSH
8192: LD_VAR 0 1
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 70
8205: ST_TO_ADDR
// end ;
8206: LD_VAR 0 3
8210: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8211: LD_INT 0
8213: PPUSH
8214: PPUSH
8215: PPUSH
8216: PPUSH
// result := false ;
8217: LD_ADDR_VAR 0 2
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// side := GetSide ( unit ) ;
8225: LD_ADDR_VAR 0 3
8229: PUSH
8230: LD_VAR 0 1
8234: PPUSH
8235: CALL_OW 255
8239: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8240: LD_ADDR_VAR 0 4
8244: PUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 248
8254: ST_TO_ADDR
// case nat of 1 :
8255: LD_VAR 0 4
8259: PUSH
8260: LD_INT 1
8262: DOUBLE
8263: EQUAL
8264: IFTRUE 8268
8266: GO 8279
8268: POP
// tech := tech_lassight ; 2 :
8269: LD_ADDR_VAR 0 5
8273: PUSH
8274: LD_INT 12
8276: ST_TO_ADDR
8277: GO 8318
8279: LD_INT 2
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8298
8287: POP
// tech := tech_mortar ; 3 :
8288: LD_ADDR_VAR 0 5
8292: PUSH
8293: LD_INT 41
8295: ST_TO_ADDR
8296: GO 8318
8298: LD_INT 3
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8306
8304: GO 8317
8306: POP
// tech := tech_bazooka ; end ;
8307: LD_ADDR_VAR 0 5
8311: PUSH
8312: LD_INT 44
8314: ST_TO_ADDR
8315: GO 8318
8317: POP
// if Researched ( side , tech ) then
8318: LD_VAR 0 3
8322: PPUSH
8323: LD_VAR 0 5
8327: PPUSH
8328: CALL_OW 325
8332: IFFALSE 8359
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8334: LD_ADDR_VAR 0 2
8338: PUSH
8339: LD_INT 5
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 9
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_VAR 0 4
8357: ARRAY
8358: ST_TO_ADDR
// end ;
8359: LD_VAR 0 2
8363: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8364: LD_INT 0
8366: PPUSH
8367: PPUSH
8368: PPUSH
// if not mines then
8369: LD_VAR 0 2
8373: NOT
8374: IFFALSE 8378
// exit ;
8376: GO 8522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_INT 81
8385: PUSH
8386: LD_VAR 0 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 3
8397: PUSH
8398: LD_INT 21
8400: PUSH
8401: LD_INT 3
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PPUSH
8416: CALL_OW 69
8420: ST_TO_ADDR
// for i in mines do
8421: LD_ADDR_VAR 0 4
8425: PUSH
8426: LD_VAR 0 2
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8520
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8434: LD_VAR 0 4
8438: PUSH
8439: LD_INT 1
8441: ARRAY
8442: PPUSH
8443: LD_VAR 0 4
8447: PUSH
8448: LD_INT 2
8450: ARRAY
8451: PPUSH
8452: CALL_OW 458
8456: NOT
8457: IFFALSE 8461
// continue ;
8459: GO 8431
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8461: LD_VAR 0 4
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 4
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PPUSH
8479: CALL_OW 428
8483: PUSH
8484: LD_VAR 0 5
8488: IN
8489: IFFALSE 8518
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8491: LD_VAR 0 4
8495: PUSH
8496: LD_INT 1
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 4
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PPUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 456
// end ;
8518: GO 8431
8520: POP
8521: POP
// end ;
8522: LD_VAR 0 3
8526: RET
// export function Count ( array ) ; begin
8527: LD_INT 0
8529: PPUSH
// result := array + 0 ;
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_VAR 0 1
8539: PUSH
8540: LD_INT 0
8542: PLUS
8543: ST_TO_ADDR
// end ;
8544: LD_VAR 0 2
8548: RET
// export function IsEmpty ( building ) ; begin
8549: LD_INT 0
8551: PPUSH
// if not building then
8552: LD_VAR 0 1
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8604
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_INT 22
8573: PUSH
8574: LD_VAR 0 1
8578: PPUSH
8579: CALL_OW 255
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 58
8590: PUSH
8591: EMPTY
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: IN
8603: ST_TO_ADDR
// end ;
8604: LD_VAR 0 2
8608: RET
// export function IsNotFull ( building ) ; var places ; begin
8609: LD_INT 0
8611: PPUSH
8612: PPUSH
// if not building then
8613: LD_VAR 0 1
8617: NOT
8618: IFFALSE 8622
// exit ;
8620: GO 8650
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_VAR 0 1
8631: PPUSH
8632: LD_INT 3
8634: PUSH
8635: LD_INT 62
8637: PUSH
8638: EMPTY
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PPUSH
8645: CALL_OW 72
8649: ST_TO_ADDR
// end ;
8650: LD_VAR 0 2
8654: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8655: LD_INT 0
8657: PPUSH
8658: PPUSH
8659: PPUSH
8660: PPUSH
// tmp := [ ] ;
8661: LD_ADDR_VAR 0 3
8665: PUSH
8666: EMPTY
8667: ST_TO_ADDR
// list := [ ] ;
8668: LD_ADDR_VAR 0 5
8672: PUSH
8673: EMPTY
8674: ST_TO_ADDR
// for i = 16 to 25 do
8675: LD_ADDR_VAR 0 4
8679: PUSH
8680: DOUBLE
8681: LD_INT 16
8683: DEC
8684: ST_TO_ADDR
8685: LD_INT 25
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8762
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8691: LD_ADDR_VAR 0 3
8695: PUSH
8696: LD_VAR 0 3
8700: PUSH
8701: LD_INT 22
8703: PUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: CALL_OW 255
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 91
8720: PUSH
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 6
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_VAR 0 4
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: PPUSH
8754: CALL_OW 69
8758: ADD
8759: ST_TO_ADDR
8760: GO 8688
8762: POP
8763: POP
// for i = 1 to tmp do
8764: LD_ADDR_VAR 0 4
8768: PUSH
8769: DOUBLE
8770: LD_INT 1
8772: DEC
8773: ST_TO_ADDR
8774: LD_VAR 0 3
8778: PUSH
8779: FOR_TO
8780: IFFALSE 8868
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8782: LD_ADDR_VAR 0 5
8786: PUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_VAR 0 3
8796: PUSH
8797: LD_VAR 0 4
8801: ARRAY
8802: PPUSH
8803: CALL_OW 266
8807: PUSH
8808: LD_VAR 0 3
8812: PUSH
8813: LD_VAR 0 4
8817: ARRAY
8818: PPUSH
8819: CALL_OW 250
8823: PUSH
8824: LD_VAR 0 3
8828: PUSH
8829: LD_VAR 0 4
8833: ARRAY
8834: PPUSH
8835: CALL_OW 251
8839: PUSH
8840: LD_VAR 0 3
8844: PUSH
8845: LD_VAR 0 4
8849: ARRAY
8850: PPUSH
8851: CALL_OW 254
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: ADD
8865: ST_TO_ADDR
8866: GO 8779
8868: POP
8869: POP
// result := list ;
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_VAR 0 5
8879: ST_TO_ADDR
// end ;
8880: LD_VAR 0 2
8884: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
// if not factory then
8894: LD_VAR 0 1
8898: NOT
8899: IFFALSE 8903
// exit ;
8901: GO 9496
// if control = control_apeman then
8903: LD_VAR 0 4
8907: PUSH
8908: LD_INT 5
8910: EQUAL
8911: IFFALSE 9020
// begin tmp := UnitsInside ( factory ) ;
8913: LD_ADDR_VAR 0 8
8917: PUSH
8918: LD_VAR 0 1
8922: PPUSH
8923: CALL_OW 313
8927: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8928: LD_VAR 0 8
8932: PPUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 12
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 72
8947: NOT
8948: IFFALSE 8958
// control := control_manual ;
8950: LD_ADDR_VAR 0 4
8954: PUSH
8955: LD_INT 1
8957: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8958: LD_ADDR_VAR 0 8
8962: PUSH
8963: LD_VAR 0 1
8967: PPUSH
8968: CALL 8655 0 1
8972: ST_TO_ADDR
// if tmp then
8973: LD_VAR 0 8
8977: IFFALSE 9020
// begin for i in tmp do
8979: LD_ADDR_VAR 0 7
8983: PUSH
8984: LD_VAR 0 8
8988: PUSH
8989: FOR_IN
8990: IFFALSE 9018
// if i [ 1 ] = b_ext_radio then
8992: LD_VAR 0 7
8996: PUSH
8997: LD_INT 1
8999: ARRAY
9000: PUSH
9001: LD_INT 22
9003: EQUAL
9004: IFFALSE 9016
// begin control := control_remote ;
9006: LD_ADDR_VAR 0 4
9010: PUSH
9011: LD_INT 2
9013: ST_TO_ADDR
// break ;
9014: GO 9018
// end ;
9016: GO 8989
9018: POP
9019: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9020: LD_VAR 0 1
9024: PPUSH
9025: LD_VAR 0 2
9029: PPUSH
9030: LD_VAR 0 3
9034: PPUSH
9035: LD_VAR 0 4
9039: PPUSH
9040: LD_VAR 0 5
9044: PPUSH
9045: CALL_OW 448
9049: IFFALSE 9084
// begin result := [ chassis , engine , control , weapon ] ;
9051: LD_ADDR_VAR 0 6
9055: PUSH
9056: LD_VAR 0 2
9060: PUSH
9061: LD_VAR 0 3
9065: PUSH
9066: LD_VAR 0 4
9070: PUSH
9071: LD_VAR 0 5
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: ST_TO_ADDR
// exit ;
9082: GO 9496
// end ; _chassis := AvailableChassisList ( factory ) ;
9084: LD_ADDR_VAR 0 9
9088: PUSH
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 475
9098: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9099: LD_ADDR_VAR 0 11
9103: PUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 476
9113: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9114: LD_ADDR_VAR 0 12
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 477
9128: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9129: LD_ADDR_VAR 0 10
9133: PUSH
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 478
9143: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9144: LD_VAR 0 9
9148: NOT
9149: PUSH
9150: LD_VAR 0 11
9154: NOT
9155: OR
9156: PUSH
9157: LD_VAR 0 12
9161: NOT
9162: OR
9163: PUSH
9164: LD_VAR 0 10
9168: NOT
9169: OR
9170: IFFALSE 9205
// begin result := [ chassis , engine , control , weapon ] ;
9172: LD_ADDR_VAR 0 6
9176: PUSH
9177: LD_VAR 0 2
9181: PUSH
9182: LD_VAR 0 3
9186: PUSH
9187: LD_VAR 0 4
9191: PUSH
9192: LD_VAR 0 5
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: ST_TO_ADDR
// exit ;
9203: GO 9496
// end ; if not chassis in _chassis then
9205: LD_VAR 0 2
9209: PUSH
9210: LD_VAR 0 9
9214: IN
9215: NOT
9216: IFFALSE 9242
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_VAR 0 9
9227: PUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_VAR 0 9
9235: PPUSH
9236: CALL_OW 12
9240: ARRAY
9241: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9242: LD_VAR 0 2
9246: PPUSH
9247: LD_VAR 0 3
9251: PPUSH
9252: CALL 9501 0 2
9256: NOT
9257: IFFALSE 9316
// repeat engine := _engine [ 1 ] ;
9259: LD_ADDR_VAR 0 3
9263: PUSH
9264: LD_VAR 0 11
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9273: LD_ADDR_VAR 0 11
9277: PUSH
9278: LD_VAR 0 11
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 3
9290: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9291: LD_VAR 0 2
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: CALL 9501 0 2
9305: PUSH
9306: LD_VAR 0 11
9310: PUSH
9311: EMPTY
9312: EQUAL
9313: OR
9314: IFFALSE 9259
// if not control in _control then
9316: LD_VAR 0 4
9320: PUSH
9321: LD_VAR 0 12
9325: IN
9326: NOT
9327: IFFALSE 9353
// control := _control [ rand ( 1 , _control ) ] ;
9329: LD_ADDR_VAR 0 4
9333: PUSH
9334: LD_VAR 0 12
9338: PUSH
9339: LD_INT 1
9341: PPUSH
9342: LD_VAR 0 12
9346: PPUSH
9347: CALL_OW 12
9351: ARRAY
9352: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9353: LD_VAR 0 2
9357: PPUSH
9358: LD_VAR 0 5
9362: PPUSH
9363: CALL 9721 0 2
9367: NOT
9368: IFFALSE 9427
// repeat weapon := _weapon [ 1 ] ;
9370: LD_ADDR_VAR 0 5
9374: PUSH
9375: LD_VAR 0 10
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9384: LD_ADDR_VAR 0 10
9388: PUSH
9389: LD_VAR 0 10
9393: PPUSH
9394: LD_INT 1
9396: PPUSH
9397: CALL_OW 3
9401: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9402: LD_VAR 0 2
9406: PPUSH
9407: LD_VAR 0 5
9411: PPUSH
9412: CALL 9721 0 2
9416: PUSH
9417: LD_VAR 0 10
9421: PUSH
9422: EMPTY
9423: EQUAL
9424: OR
9425: IFFALSE 9370
// result := [ ] ;
9427: LD_ADDR_VAR 0 6
9431: PUSH
9432: EMPTY
9433: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9434: LD_VAR 0 1
9438: PPUSH
9439: LD_VAR 0 2
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: LD_VAR 0 4
9453: PPUSH
9454: LD_VAR 0 5
9458: PPUSH
9459: CALL_OW 448
9463: IFFALSE 9496
// result := [ chassis , engine , control , weapon ] ;
9465: LD_ADDR_VAR 0 6
9469: PUSH
9470: LD_VAR 0 2
9474: PUSH
9475: LD_VAR 0 3
9479: PUSH
9480: LD_VAR 0 4
9484: PUSH
9485: LD_VAR 0 5
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// end ;
9496: LD_VAR 0 6
9500: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9501: LD_INT 0
9503: PPUSH
// if not chassis or not engine then
9504: LD_VAR 0 1
9508: NOT
9509: PUSH
9510: LD_VAR 0 2
9514: NOT
9515: OR
9516: IFFALSE 9520
// exit ;
9518: GO 9716
// case engine of engine_solar :
9520: LD_VAR 0 2
9524: PUSH
9525: LD_INT 2
9527: DOUBLE
9528: EQUAL
9529: IFTRUE 9533
9531: GO 9571
9533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9534: LD_ADDR_VAR 0 3
9538: PUSH
9539: LD_INT 11
9541: PUSH
9542: LD_INT 12
9544: PUSH
9545: LD_INT 13
9547: PUSH
9548: LD_INT 14
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: LD_INT 3
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
9569: GO 9700
9571: LD_INT 1
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9641
9579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9580: LD_ADDR_VAR 0 3
9584: PUSH
9585: LD_INT 11
9587: PUSH
9588: LD_INT 12
9590: PUSH
9591: LD_INT 13
9593: PUSH
9594: LD_INT 14
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 3
9605: PUSH
9606: LD_INT 4
9608: PUSH
9609: LD_INT 5
9611: PUSH
9612: LD_INT 21
9614: PUSH
9615: LD_INT 23
9617: PUSH
9618: LD_INT 22
9620: PUSH
9621: LD_INT 24
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
9639: GO 9700
9641: LD_INT 3
9643: DOUBLE
9644: EQUAL
9645: IFTRUE 9649
9647: GO 9699
9649: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9650: LD_ADDR_VAR 0 3
9654: PUSH
9655: LD_INT 13
9657: PUSH
9658: LD_INT 14
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: LD_INT 3
9666: PUSH
9667: LD_INT 4
9669: PUSH
9670: LD_INT 5
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 22
9678: PUSH
9679: LD_INT 23
9681: PUSH
9682: LD_INT 24
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: ST_TO_ADDR
9697: GO 9700
9699: POP
// result := ( chassis in result ) ;
9700: LD_ADDR_VAR 0 3
9704: PUSH
9705: LD_VAR 0 1
9709: PUSH
9710: LD_VAR 0 3
9714: IN
9715: ST_TO_ADDR
// end ;
9716: LD_VAR 0 3
9720: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9721: LD_INT 0
9723: PPUSH
// if not chassis or not weapon then
9724: LD_VAR 0 1
9728: NOT
9729: PUSH
9730: LD_VAR 0 2
9734: NOT
9735: OR
9736: IFFALSE 9740
// exit ;
9738: GO 10800
// case weapon of us_machine_gun :
9740: LD_VAR 0 2
9744: PUSH
9745: LD_INT 2
9747: DOUBLE
9748: EQUAL
9749: IFTRUE 9753
9751: GO 9783
9753: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9754: LD_ADDR_VAR 0 3
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: LD_INT 2
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: LD_INT 4
9770: PUSH
9771: LD_INT 5
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: ST_TO_ADDR
9781: GO 10784
9783: LD_INT 3
9785: DOUBLE
9786: EQUAL
9787: IFTRUE 9791
9789: GO 9821
9791: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9792: LD_ADDR_VAR 0 3
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: LD_INT 2
9802: PUSH
9803: LD_INT 3
9805: PUSH
9806: LD_INT 4
9808: PUSH
9809: LD_INT 5
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: ST_TO_ADDR
9819: GO 10784
9821: LD_INT 11
9823: DOUBLE
9824: EQUAL
9825: IFTRUE 9829
9827: GO 9859
9829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9830: LD_ADDR_VAR 0 3
9834: PUSH
9835: LD_INT 1
9837: PUSH
9838: LD_INT 2
9840: PUSH
9841: LD_INT 3
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: LD_INT 5
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: ST_TO_ADDR
9857: GO 10784
9859: LD_INT 4
9861: DOUBLE
9862: EQUAL
9863: IFTRUE 9867
9865: GO 9893
9867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9868: LD_ADDR_VAR 0 3
9872: PUSH
9873: LD_INT 2
9875: PUSH
9876: LD_INT 3
9878: PUSH
9879: LD_INT 4
9881: PUSH
9882: LD_INT 5
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: ST_TO_ADDR
9891: GO 10784
9893: LD_INT 5
9895: DOUBLE
9896: EQUAL
9897: IFTRUE 9901
9899: GO 9927
9901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9902: LD_ADDR_VAR 0 3
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: LD_INT 4
9915: PUSH
9916: LD_INT 5
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: ST_TO_ADDR
9925: GO 10784
9927: LD_INT 9
9929: DOUBLE
9930: EQUAL
9931: IFTRUE 9935
9933: GO 9961
9935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9936: LD_ADDR_VAR 0 3
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: LD_INT 4
9949: PUSH
9950: LD_INT 5
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: ST_TO_ADDR
9959: GO 10784
9961: LD_INT 7
9963: DOUBLE
9964: EQUAL
9965: IFTRUE 9969
9967: GO 9995
9969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9970: LD_ADDR_VAR 0 3
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: ST_TO_ADDR
9993: GO 10784
9995: LD_INT 12
9997: DOUBLE
9998: EQUAL
9999: IFTRUE 10003
10001: GO 10029
10003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10004: LD_ADDR_VAR 0 3
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 4
10017: PUSH
10018: LD_INT 5
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: ST_TO_ADDR
10027: GO 10784
10029: LD_INT 13
10031: DOUBLE
10032: EQUAL
10033: IFTRUE 10037
10035: GO 10063
10037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10038: LD_ADDR_VAR 0 3
10042: PUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 3
10048: PUSH
10049: LD_INT 4
10051: PUSH
10052: LD_INT 5
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: ST_TO_ADDR
10061: GO 10784
10063: LD_INT 14
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10089
10071: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_INT 4
10079: PUSH
10080: LD_INT 5
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: ST_TO_ADDR
10087: GO 10784
10089: LD_INT 6
10091: DOUBLE
10092: EQUAL
10093: IFTRUE 10097
10095: GO 10115
10097: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10098: LD_ADDR_VAR 0 3
10102: PUSH
10103: LD_INT 4
10105: PUSH
10106: LD_INT 5
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: ST_TO_ADDR
10113: GO 10784
10115: LD_INT 10
10117: DOUBLE
10118: EQUAL
10119: IFTRUE 10123
10121: GO 10141
10123: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10124: LD_ADDR_VAR 0 3
10128: PUSH
10129: LD_INT 4
10131: PUSH
10132: LD_INT 5
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: ST_TO_ADDR
10139: GO 10784
10141: LD_INT 22
10143: DOUBLE
10144: EQUAL
10145: IFTRUE 10149
10147: GO 10175
10149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10150: LD_ADDR_VAR 0 3
10154: PUSH
10155: LD_INT 11
10157: PUSH
10158: LD_INT 12
10160: PUSH
10161: LD_INT 13
10163: PUSH
10164: LD_INT 14
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: ST_TO_ADDR
10173: GO 10784
10175: LD_INT 23
10177: DOUBLE
10178: EQUAL
10179: IFTRUE 10183
10181: GO 10209
10183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: LD_INT 11
10191: PUSH
10192: LD_INT 12
10194: PUSH
10195: LD_INT 13
10197: PUSH
10198: LD_INT 14
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: ST_TO_ADDR
10207: GO 10784
10209: LD_INT 24
10211: DOUBLE
10212: EQUAL
10213: IFTRUE 10217
10215: GO 10243
10217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10218: LD_ADDR_VAR 0 3
10222: PUSH
10223: LD_INT 11
10225: PUSH
10226: LD_INT 12
10228: PUSH
10229: LD_INT 13
10231: PUSH
10232: LD_INT 14
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: ST_TO_ADDR
10241: GO 10784
10243: LD_INT 30
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10277
10251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10252: LD_ADDR_VAR 0 3
10256: PUSH
10257: LD_INT 11
10259: PUSH
10260: LD_INT 12
10262: PUSH
10263: LD_INT 13
10265: PUSH
10266: LD_INT 14
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
10275: GO 10784
10277: LD_INT 25
10279: DOUBLE
10280: EQUAL
10281: IFTRUE 10285
10283: GO 10303
10285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10286: LD_ADDR_VAR 0 3
10290: PUSH
10291: LD_INT 13
10293: PUSH
10294: LD_INT 14
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: ST_TO_ADDR
10301: GO 10784
10303: LD_INT 27
10305: DOUBLE
10306: EQUAL
10307: IFTRUE 10311
10309: GO 10329
10311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10312: LD_ADDR_VAR 0 3
10316: PUSH
10317: LD_INT 13
10319: PUSH
10320: LD_INT 14
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: ST_TO_ADDR
10327: GO 10784
10329: LD_INT 92
10331: DOUBLE
10332: EQUAL
10333: IFTRUE 10337
10335: GO 10363
10337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10338: LD_ADDR_VAR 0 3
10342: PUSH
10343: LD_INT 11
10345: PUSH
10346: LD_INT 12
10348: PUSH
10349: LD_INT 13
10351: PUSH
10352: LD_INT 14
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: ST_TO_ADDR
10361: GO 10784
10363: LD_INT 28
10365: DOUBLE
10366: EQUAL
10367: IFTRUE 10371
10369: GO 10389
10371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10372: LD_ADDR_VAR 0 3
10376: PUSH
10377: LD_INT 13
10379: PUSH
10380: LD_INT 14
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: ST_TO_ADDR
10387: GO 10784
10389: LD_INT 29
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10415
10397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10398: LD_ADDR_VAR 0 3
10402: PUSH
10403: LD_INT 13
10405: PUSH
10406: LD_INT 14
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: ST_TO_ADDR
10413: GO 10784
10415: LD_INT 31
10417: DOUBLE
10418: EQUAL
10419: IFTRUE 10423
10421: GO 10441
10423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10424: LD_ADDR_VAR 0 3
10428: PUSH
10429: LD_INT 13
10431: PUSH
10432: LD_INT 14
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: ST_TO_ADDR
10439: GO 10784
10441: LD_INT 26
10443: DOUBLE
10444: EQUAL
10445: IFTRUE 10449
10447: GO 10467
10449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10450: LD_ADDR_VAR 0 3
10454: PUSH
10455: LD_INT 13
10457: PUSH
10458: LD_INT 14
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: ST_TO_ADDR
10465: GO 10784
10467: LD_INT 42
10469: DOUBLE
10470: EQUAL
10471: IFTRUE 10475
10473: GO 10501
10475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10476: LD_ADDR_VAR 0 3
10480: PUSH
10481: LD_INT 21
10483: PUSH
10484: LD_INT 22
10486: PUSH
10487: LD_INT 23
10489: PUSH
10490: LD_INT 24
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: ST_TO_ADDR
10499: GO 10784
10501: LD_INT 43
10503: DOUBLE
10504: EQUAL
10505: IFTRUE 10509
10507: GO 10535
10509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10510: LD_ADDR_VAR 0 3
10514: PUSH
10515: LD_INT 21
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 23
10523: PUSH
10524: LD_INT 24
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: ST_TO_ADDR
10533: GO 10784
10535: LD_INT 44
10537: DOUBLE
10538: EQUAL
10539: IFTRUE 10543
10541: GO 10569
10543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10544: LD_ADDR_VAR 0 3
10548: PUSH
10549: LD_INT 21
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 23
10557: PUSH
10558: LD_INT 24
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: ST_TO_ADDR
10567: GO 10784
10569: LD_INT 45
10571: DOUBLE
10572: EQUAL
10573: IFTRUE 10577
10575: GO 10603
10577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10578: LD_ADDR_VAR 0 3
10582: PUSH
10583: LD_INT 21
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_INT 23
10591: PUSH
10592: LD_INT 24
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: ST_TO_ADDR
10601: GO 10784
10603: LD_INT 49
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10637
10611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10612: LD_ADDR_VAR 0 3
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 22
10622: PUSH
10623: LD_INT 23
10625: PUSH
10626: LD_INT 24
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: ST_TO_ADDR
10635: GO 10784
10637: LD_INT 51
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10645
10643: GO 10671
10645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10646: LD_ADDR_VAR 0 3
10650: PUSH
10651: LD_INT 21
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_INT 23
10659: PUSH
10660: LD_INT 24
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: ST_TO_ADDR
10669: GO 10784
10671: LD_INT 52
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10705
10679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: LD_INT 21
10687: PUSH
10688: LD_INT 22
10690: PUSH
10691: LD_INT 23
10693: PUSH
10694: LD_INT 24
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: ST_TO_ADDR
10703: GO 10784
10705: LD_INT 53
10707: DOUBLE
10708: EQUAL
10709: IFTRUE 10713
10711: GO 10731
10713: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10714: LD_ADDR_VAR 0 3
10718: PUSH
10719: LD_INT 23
10721: PUSH
10722: LD_INT 24
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: ST_TO_ADDR
10729: GO 10784
10731: LD_INT 46
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10757
10739: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10740: LD_ADDR_VAR 0 3
10744: PUSH
10745: LD_INT 23
10747: PUSH
10748: LD_INT 24
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: ST_TO_ADDR
10755: GO 10784
10757: LD_INT 47
10759: DOUBLE
10760: EQUAL
10761: IFTRUE 10765
10763: GO 10783
10765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_INT 23
10773: PUSH
10774: LD_INT 24
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: ST_TO_ADDR
10781: GO 10784
10783: POP
// result := ( chassis in result ) ;
10784: LD_ADDR_VAR 0 3
10788: PUSH
10789: LD_VAR 0 1
10793: PUSH
10794: LD_VAR 0 3
10798: IN
10799: ST_TO_ADDR
// end ;
10800: LD_VAR 0 3
10804: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10805: LD_INT 0
10807: PPUSH
10808: PPUSH
10809: PPUSH
10810: PPUSH
10811: PPUSH
10812: PPUSH
10813: PPUSH
// result := array ;
10814: LD_ADDR_VAR 0 5
10818: PUSH
10819: LD_VAR 0 1
10823: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10824: LD_VAR 0 1
10828: NOT
10829: PUSH
10830: LD_VAR 0 2
10834: NOT
10835: OR
10836: PUSH
10837: LD_VAR 0 3
10841: NOT
10842: OR
10843: PUSH
10844: LD_VAR 0 2
10848: PUSH
10849: LD_VAR 0 1
10853: GREATER
10854: OR
10855: PUSH
10856: LD_VAR 0 3
10860: PUSH
10861: LD_VAR 0 1
10865: GREATER
10866: OR
10867: IFFALSE 10871
// exit ;
10869: GO 11167
// if direction then
10871: LD_VAR 0 4
10875: IFFALSE 10939
// begin d := 1 ;
10877: LD_ADDR_VAR 0 9
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// if i_from > i_to then
10885: LD_VAR 0 2
10889: PUSH
10890: LD_VAR 0 3
10894: GREATER
10895: IFFALSE 10921
// length := ( array - i_from ) + i_to else
10897: LD_ADDR_VAR 0 11
10901: PUSH
10902: LD_VAR 0 1
10906: PUSH
10907: LD_VAR 0 2
10911: MINUS
10912: PUSH
10913: LD_VAR 0 3
10917: PLUS
10918: ST_TO_ADDR
10919: GO 10937
// length := i_to - i_from ;
10921: LD_ADDR_VAR 0 11
10925: PUSH
10926: LD_VAR 0 3
10930: PUSH
10931: LD_VAR 0 2
10935: MINUS
10936: ST_TO_ADDR
// end else
10937: GO 11000
// begin d := - 1 ;
10939: LD_ADDR_VAR 0 9
10943: PUSH
10944: LD_INT 1
10946: NEG
10947: ST_TO_ADDR
// if i_from > i_to then
10948: LD_VAR 0 2
10952: PUSH
10953: LD_VAR 0 3
10957: GREATER
10958: IFFALSE 10978
// length := i_from - i_to else
10960: LD_ADDR_VAR 0 11
10964: PUSH
10965: LD_VAR 0 2
10969: PUSH
10970: LD_VAR 0 3
10974: MINUS
10975: ST_TO_ADDR
10976: GO 11000
// length := ( array - i_to ) + i_from ;
10978: LD_ADDR_VAR 0 11
10982: PUSH
10983: LD_VAR 0 1
10987: PUSH
10988: LD_VAR 0 3
10992: MINUS
10993: PUSH
10994: LD_VAR 0 2
10998: PLUS
10999: ST_TO_ADDR
// end ; if not length then
11000: LD_VAR 0 11
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11167
// tmp := array ;
11009: LD_ADDR_VAR 0 10
11013: PUSH
11014: LD_VAR 0 1
11018: ST_TO_ADDR
// for i = 1 to length do
11019: LD_ADDR_VAR 0 6
11023: PUSH
11024: DOUBLE
11025: LD_INT 1
11027: DEC
11028: ST_TO_ADDR
11029: LD_VAR 0 11
11033: PUSH
11034: FOR_TO
11035: IFFALSE 11155
// begin for j = 1 to array do
11037: LD_ADDR_VAR 0 7
11041: PUSH
11042: DOUBLE
11043: LD_INT 1
11045: DEC
11046: ST_TO_ADDR
11047: LD_VAR 0 1
11051: PUSH
11052: FOR_TO
11053: IFFALSE 11141
// begin k := j + d ;
11055: LD_ADDR_VAR 0 8
11059: PUSH
11060: LD_VAR 0 7
11064: PUSH
11065: LD_VAR 0 9
11069: PLUS
11070: ST_TO_ADDR
// if k > array then
11071: LD_VAR 0 8
11075: PUSH
11076: LD_VAR 0 1
11080: GREATER
11081: IFFALSE 11091
// k := 1 ;
11083: LD_ADDR_VAR 0 8
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// if not k then
11091: LD_VAR 0 8
11095: NOT
11096: IFFALSE 11108
// k := array ;
11098: LD_ADDR_VAR 0 8
11102: PUSH
11103: LD_VAR 0 1
11107: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11108: LD_ADDR_VAR 0 10
11112: PUSH
11113: LD_VAR 0 10
11117: PPUSH
11118: LD_VAR 0 8
11122: PPUSH
11123: LD_VAR 0 1
11127: PUSH
11128: LD_VAR 0 7
11132: ARRAY
11133: PPUSH
11134: CALL_OW 1
11138: ST_TO_ADDR
// end ;
11139: GO 11052
11141: POP
11142: POP
// array := tmp ;
11143: LD_ADDR_VAR 0 1
11147: PUSH
11148: LD_VAR 0 10
11152: ST_TO_ADDR
// end ;
11153: GO 11034
11155: POP
11156: POP
// result := array ;
11157: LD_ADDR_VAR 0 5
11161: PUSH
11162: LD_VAR 0 1
11166: ST_TO_ADDR
// end ;
11167: LD_VAR 0 5
11171: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11172: LD_INT 0
11174: PPUSH
11175: PPUSH
// result := 0 ;
11176: LD_ADDR_VAR 0 3
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// if not array or not value in array then
11184: LD_VAR 0 1
11188: NOT
11189: PUSH
11190: LD_VAR 0 2
11194: PUSH
11195: LD_VAR 0 1
11199: IN
11200: NOT
11201: OR
11202: IFFALSE 11206
// exit ;
11204: GO 11260
// for i = 1 to array do
11206: LD_ADDR_VAR 0 4
11210: PUSH
11211: DOUBLE
11212: LD_INT 1
11214: DEC
11215: ST_TO_ADDR
11216: LD_VAR 0 1
11220: PUSH
11221: FOR_TO
11222: IFFALSE 11258
// if value = array [ i ] then
11224: LD_VAR 0 2
11228: PUSH
11229: LD_VAR 0 1
11233: PUSH
11234: LD_VAR 0 4
11238: ARRAY
11239: EQUAL
11240: IFFALSE 11256
// begin result := i ;
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: LD_VAR 0 4
11251: ST_TO_ADDR
// exit ;
11252: POP
11253: POP
11254: GO 11260
// end ;
11256: GO 11221
11258: POP
11259: POP
// end ;
11260: LD_VAR 0 3
11264: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11265: LD_INT 0
11267: PPUSH
// vc_chassis := chassis ;
11268: LD_ADDR_OWVAR 37
11272: PUSH
11273: LD_VAR 0 1
11277: ST_TO_ADDR
// vc_engine := engine ;
11278: LD_ADDR_OWVAR 39
11282: PUSH
11283: LD_VAR 0 2
11287: ST_TO_ADDR
// vc_control := control ;
11288: LD_ADDR_OWVAR 38
11292: PUSH
11293: LD_VAR 0 3
11297: ST_TO_ADDR
// vc_weapon := weapon ;
11298: LD_ADDR_OWVAR 40
11302: PUSH
11303: LD_VAR 0 4
11307: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11308: LD_ADDR_OWVAR 41
11312: PUSH
11313: LD_VAR 0 5
11317: ST_TO_ADDR
// end ;
11318: LD_VAR 0 6
11322: RET
// export function WantPlant ( unit ) ; var task ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// result := false ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 0
11334: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11335: LD_ADDR_VAR 0 3
11339: PUSH
11340: LD_VAR 0 1
11344: PPUSH
11345: CALL_OW 437
11349: ST_TO_ADDR
// if task then
11350: LD_VAR 0 3
11354: IFFALSE 11382
// if task [ 1 ] [ 1 ] = p then
11356: LD_VAR 0 3
11360: PUSH
11361: LD_INT 1
11363: ARRAY
11364: PUSH
11365: LD_INT 1
11367: ARRAY
11368: PUSH
11369: LD_STRING p
11371: EQUAL
11372: IFFALSE 11382
// result := true ;
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// end ;
11382: LD_VAR 0 2
11386: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11387: LD_INT 0
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
// if pos < 1 then
11393: LD_VAR 0 2
11397: PUSH
11398: LD_INT 1
11400: LESS
11401: IFFALSE 11405
// exit ;
11403: GO 11708
// if pos = 1 then
11405: LD_VAR 0 2
11409: PUSH
11410: LD_INT 1
11412: EQUAL
11413: IFFALSE 11446
// result := Replace ( arr , pos [ 1 ] , value ) else
11415: LD_ADDR_VAR 0 4
11419: PUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_VAR 0 2
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: CALL_OW 1
11443: ST_TO_ADDR
11444: GO 11708
// begin tmp := arr ;
11446: LD_ADDR_VAR 0 6
11450: PUSH
11451: LD_VAR 0 1
11455: ST_TO_ADDR
// s_arr := [ tmp ] ;
11456: LD_ADDR_VAR 0 7
11460: PUSH
11461: LD_VAR 0 6
11465: PUSH
11466: EMPTY
11467: LIST
11468: ST_TO_ADDR
// for i = 1 to pos - 1 do
11469: LD_ADDR_VAR 0 5
11473: PUSH
11474: DOUBLE
11475: LD_INT 1
11477: DEC
11478: ST_TO_ADDR
11479: LD_VAR 0 2
11483: PUSH
11484: LD_INT 1
11486: MINUS
11487: PUSH
11488: FOR_TO
11489: IFFALSE 11534
// begin tmp := tmp [ pos [ i ] ] ;
11491: LD_ADDR_VAR 0 6
11495: PUSH
11496: LD_VAR 0 6
11500: PUSH
11501: LD_VAR 0 2
11505: PUSH
11506: LD_VAR 0 5
11510: ARRAY
11511: ARRAY
11512: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11513: LD_ADDR_VAR 0 7
11517: PUSH
11518: LD_VAR 0 7
11522: PUSH
11523: LD_VAR 0 6
11527: PUSH
11528: EMPTY
11529: LIST
11530: ADD
11531: ST_TO_ADDR
// end ;
11532: GO 11488
11534: POP
11535: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11536: LD_ADDR_VAR 0 6
11540: PUSH
11541: LD_VAR 0 6
11545: PPUSH
11546: LD_VAR 0 2
11550: PUSH
11551: LD_VAR 0 2
11555: ARRAY
11556: PPUSH
11557: LD_VAR 0 3
11561: PPUSH
11562: CALL_OW 1
11566: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11567: LD_ADDR_VAR 0 7
11571: PUSH
11572: LD_VAR 0 7
11576: PPUSH
11577: LD_VAR 0 7
11581: PPUSH
11582: LD_VAR 0 6
11586: PPUSH
11587: CALL_OW 1
11591: ST_TO_ADDR
// for i = s_arr downto 2 do
11592: LD_ADDR_VAR 0 5
11596: PUSH
11597: DOUBLE
11598: LD_VAR 0 7
11602: INC
11603: ST_TO_ADDR
11604: LD_INT 2
11606: PUSH
11607: FOR_DOWNTO
11608: IFFALSE 11692
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11610: LD_ADDR_VAR 0 6
11614: PUSH
11615: LD_VAR 0 7
11619: PUSH
11620: LD_VAR 0 5
11624: PUSH
11625: LD_INT 1
11627: MINUS
11628: ARRAY
11629: PPUSH
11630: LD_VAR 0 2
11634: PUSH
11635: LD_VAR 0 5
11639: PUSH
11640: LD_INT 1
11642: MINUS
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 7
11649: PUSH
11650: LD_VAR 0 5
11654: ARRAY
11655: PPUSH
11656: CALL_OW 1
11660: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11661: LD_ADDR_VAR 0 7
11665: PUSH
11666: LD_VAR 0 7
11670: PPUSH
11671: LD_VAR 0 5
11675: PUSH
11676: LD_INT 1
11678: MINUS
11679: PPUSH
11680: LD_VAR 0 6
11684: PPUSH
11685: CALL_OW 1
11689: ST_TO_ADDR
// end ;
11690: GO 11607
11692: POP
11693: POP
// result := s_arr [ 1 ] ;
11694: LD_ADDR_VAR 0 4
11698: PUSH
11699: LD_VAR 0 7
11703: PUSH
11704: LD_INT 1
11706: ARRAY
11707: ST_TO_ADDR
// end ; end ;
11708: LD_VAR 0 4
11712: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11713: LD_INT 0
11715: PPUSH
11716: PPUSH
// if not list then
11717: LD_VAR 0 1
11721: NOT
11722: IFFALSE 11726
// exit ;
11724: GO 11817
// i := list [ pos1 ] ;
11726: LD_ADDR_VAR 0 5
11730: PUSH
11731: LD_VAR 0 1
11735: PUSH
11736: LD_VAR 0 2
11740: ARRAY
11741: ST_TO_ADDR
// if not i then
11742: LD_VAR 0 5
11746: NOT
11747: IFFALSE 11751
// exit ;
11749: GO 11817
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11751: LD_ADDR_VAR 0 1
11755: PUSH
11756: LD_VAR 0 1
11760: PPUSH
11761: LD_VAR 0 2
11765: PPUSH
11766: LD_VAR 0 1
11770: PUSH
11771: LD_VAR 0 3
11775: ARRAY
11776: PPUSH
11777: CALL_OW 1
11781: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11782: LD_ADDR_VAR 0 1
11786: PUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_VAR 0 5
11801: PPUSH
11802: CALL_OW 1
11806: ST_TO_ADDR
// result := list ;
11807: LD_ADDR_VAR 0 4
11811: PUSH
11812: LD_VAR 0 1
11816: ST_TO_ADDR
// end ;
11817: LD_VAR 0 4
11821: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11822: LD_INT 0
11824: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11825: LD_ADDR_VAR 0 5
11829: PUSH
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 250
11839: PPUSH
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 251
11849: PPUSH
11850: LD_VAR 0 2
11854: PPUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: LD_VAR 0 4
11864: PPUSH
11865: CALL 12243 0 5
11869: ST_TO_ADDR
// end ;
11870: LD_VAR 0 5
11874: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
11875: LD_INT 0
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
// if not list or not unit then
11881: LD_VAR 0 2
11885: NOT
11886: PUSH
11887: LD_VAR 0 1
11891: NOT
11892: OR
11893: IFFALSE 11897
// exit ;
11895: GO 12238
// result := [ ] ;
11897: LD_ADDR_VAR 0 5
11901: PUSH
11902: EMPTY
11903: ST_TO_ADDR
// for i in list do
11904: LD_ADDR_VAR 0 6
11908: PUSH
11909: LD_VAR 0 2
11913: PUSH
11914: FOR_IN
11915: IFFALSE 12133
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
11917: LD_ADDR_VAR 0 8
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: LD_VAR 0 6
11931: PUSH
11932: LD_INT 1
11934: ARRAY
11935: PPUSH
11936: LD_VAR 0 6
11940: PUSH
11941: LD_INT 2
11943: ARRAY
11944: PPUSH
11945: CALL_OW 297
11949: ST_TO_ADDR
// if not Count ( result ) then
11950: LD_VAR 0 5
11954: PPUSH
11955: CALL 8527 0 1
11959: NOT
11960: IFFALSE 11993
// begin result := Join ( result , [ i , tmp ] ) ;
11962: LD_ADDR_VAR 0 5
11966: PUSH
11967: LD_VAR 0 5
11971: PPUSH
11972: LD_VAR 0 6
11976: PUSH
11977: LD_VAR 0 8
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL 44116 0 2
11990: ST_TO_ADDR
// continue ;
11991: GO 11914
// end ; if result [ result ] [ 2 ] <= tmp then
11993: LD_VAR 0 5
11997: PUSH
11998: LD_VAR 0 5
12002: ARRAY
12003: PUSH
12004: LD_INT 2
12006: ARRAY
12007: PUSH
12008: LD_VAR 0 8
12012: LESSEQUAL
12013: IFFALSE 12046
// result := Join ( result , [ i , tmp ] ) else
12015: LD_ADDR_VAR 0 5
12019: PUSH
12020: LD_VAR 0 5
12024: PPUSH
12025: LD_VAR 0 6
12029: PUSH
12030: LD_VAR 0 8
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PPUSH
12039: CALL 44116 0 2
12043: ST_TO_ADDR
12044: GO 12131
// begin for j := 1 to Count ( result ) do
12046: LD_ADDR_VAR 0 7
12050: PUSH
12051: DOUBLE
12052: LD_INT 1
12054: DEC
12055: ST_TO_ADDR
12056: LD_VAR 0 5
12060: PPUSH
12061: CALL 8527 0 1
12065: PUSH
12066: FOR_TO
12067: IFFALSE 12129
// begin if tmp < result [ j ] [ 2 ] then
12069: LD_VAR 0 8
12073: PUSH
12074: LD_VAR 0 5
12078: PUSH
12079: LD_VAR 0 7
12083: ARRAY
12084: PUSH
12085: LD_INT 2
12087: ARRAY
12088: LESS
12089: IFFALSE 12127
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: LD_VAR 0 5
12100: PPUSH
12101: LD_VAR 0 7
12105: PPUSH
12106: LD_VAR 0 6
12110: PUSH
12111: LD_VAR 0 8
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 2
12124: ST_TO_ADDR
// break ;
12125: GO 12129
// end ; end ;
12127: GO 12066
12129: POP
12130: POP
// end ; end ;
12131: GO 11914
12133: POP
12134: POP
// if result and not asc then
12135: LD_VAR 0 5
12139: PUSH
12140: LD_VAR 0 3
12144: NOT
12145: AND
12146: IFFALSE 12163
// result := ReverseArray ( result ) ;
12148: LD_ADDR_VAR 0 5
12152: PUSH
12153: LD_VAR 0 5
12157: PPUSH
12158: CALL 39403 0 1
12162: ST_TO_ADDR
// tmp := [ ] ;
12163: LD_ADDR_VAR 0 8
12167: PUSH
12168: EMPTY
12169: ST_TO_ADDR
// if mode then
12170: LD_VAR 0 4
12174: IFFALSE 12238
// begin for i := 1 to result do
12176: LD_ADDR_VAR 0 6
12180: PUSH
12181: DOUBLE
12182: LD_INT 1
12184: DEC
12185: ST_TO_ADDR
12186: LD_VAR 0 5
12190: PUSH
12191: FOR_TO
12192: IFFALSE 12226
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
12194: LD_ADDR_VAR 0 8
12198: PUSH
12199: LD_VAR 0 8
12203: PPUSH
12204: LD_VAR 0 5
12208: PUSH
12209: LD_VAR 0 6
12213: ARRAY
12214: PUSH
12215: LD_INT 1
12217: ARRAY
12218: PPUSH
12219: CALL 44116 0 2
12223: ST_TO_ADDR
12224: GO 12191
12226: POP
12227: POP
// result := tmp ;
12228: LD_ADDR_VAR 0 5
12232: PUSH
12233: LD_VAR 0 8
12237: ST_TO_ADDR
// end ; end ;
12238: LD_VAR 0 5
12242: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12243: LD_INT 0
12245: PPUSH
12246: PPUSH
12247: PPUSH
12248: PPUSH
// if not list then
12249: LD_VAR 0 3
12253: NOT
12254: IFFALSE 12258
// exit ;
12256: GO 12646
// result := [ ] ;
12258: LD_ADDR_VAR 0 6
12262: PUSH
12263: EMPTY
12264: ST_TO_ADDR
// for i in list do
12265: LD_ADDR_VAR 0 7
12269: PUSH
12270: LD_VAR 0 3
12274: PUSH
12275: FOR_IN
12276: IFFALSE 12478
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12278: LD_ADDR_VAR 0 9
12282: PUSH
12283: LD_VAR 0 7
12287: PPUSH
12288: LD_VAR 0 1
12292: PPUSH
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 297
12302: ST_TO_ADDR
// if not result then
12303: LD_VAR 0 6
12307: NOT
12308: IFFALSE 12334
// result := [ [ i , tmp ] ] else
12310: LD_ADDR_VAR 0 6
12314: PUSH
12315: LD_VAR 0 7
12319: PUSH
12320: LD_VAR 0 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: ST_TO_ADDR
12332: GO 12476
// begin if result [ result ] [ 2 ] < tmp then
12334: LD_VAR 0 6
12338: PUSH
12339: LD_VAR 0 6
12343: ARRAY
12344: PUSH
12345: LD_INT 2
12347: ARRAY
12348: PUSH
12349: LD_VAR 0 9
12353: LESS
12354: IFFALSE 12396
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12356: LD_ADDR_VAR 0 6
12360: PUSH
12361: LD_VAR 0 6
12365: PPUSH
12366: LD_VAR 0 6
12370: PUSH
12371: LD_INT 1
12373: PLUS
12374: PPUSH
12375: LD_VAR 0 7
12379: PUSH
12380: LD_VAR 0 9
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 2
12393: ST_TO_ADDR
12394: GO 12476
// for j = 1 to result do
12396: LD_ADDR_VAR 0 8
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_VAR 0 6
12410: PUSH
12411: FOR_TO
12412: IFFALSE 12474
// begin if tmp < result [ j ] [ 2 ] then
12414: LD_VAR 0 9
12418: PUSH
12419: LD_VAR 0 6
12423: PUSH
12424: LD_VAR 0 8
12428: ARRAY
12429: PUSH
12430: LD_INT 2
12432: ARRAY
12433: LESS
12434: IFFALSE 12472
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12436: LD_ADDR_VAR 0 6
12440: PUSH
12441: LD_VAR 0 6
12445: PPUSH
12446: LD_VAR 0 8
12450: PPUSH
12451: LD_VAR 0 7
12455: PUSH
12456: LD_VAR 0 9
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 2
12469: ST_TO_ADDR
// break ;
12470: GO 12474
// end ; end ;
12472: GO 12411
12474: POP
12475: POP
// end ; end ;
12476: GO 12275
12478: POP
12479: POP
// if result and not asc then
12480: LD_VAR 0 6
12484: PUSH
12485: LD_VAR 0 4
12489: NOT
12490: AND
12491: IFFALSE 12566
// begin tmp := result ;
12493: LD_ADDR_VAR 0 9
12497: PUSH
12498: LD_VAR 0 6
12502: ST_TO_ADDR
// for i = tmp downto 1 do
12503: LD_ADDR_VAR 0 7
12507: PUSH
12508: DOUBLE
12509: LD_VAR 0 9
12513: INC
12514: ST_TO_ADDR
12515: LD_INT 1
12517: PUSH
12518: FOR_DOWNTO
12519: IFFALSE 12564
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12521: LD_ADDR_VAR 0 6
12525: PUSH
12526: LD_VAR 0 6
12530: PPUSH
12531: LD_VAR 0 9
12535: PUSH
12536: LD_VAR 0 7
12540: MINUS
12541: PUSH
12542: LD_INT 1
12544: PLUS
12545: PPUSH
12546: LD_VAR 0 9
12550: PUSH
12551: LD_VAR 0 7
12555: ARRAY
12556: PPUSH
12557: CALL_OW 1
12561: ST_TO_ADDR
12562: GO 12518
12564: POP
12565: POP
// end ; tmp := [ ] ;
12566: LD_ADDR_VAR 0 9
12570: PUSH
12571: EMPTY
12572: ST_TO_ADDR
// if mode then
12573: LD_VAR 0 5
12577: IFFALSE 12646
// begin for i = 1 to result do
12579: LD_ADDR_VAR 0 7
12583: PUSH
12584: DOUBLE
12585: LD_INT 1
12587: DEC
12588: ST_TO_ADDR
12589: LD_VAR 0 6
12593: PUSH
12594: FOR_TO
12595: IFFALSE 12634
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12597: LD_ADDR_VAR 0 9
12601: PUSH
12602: LD_VAR 0 9
12606: PPUSH
12607: LD_VAR 0 7
12611: PPUSH
12612: LD_VAR 0 6
12616: PUSH
12617: LD_VAR 0 7
12621: ARRAY
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PPUSH
12627: CALL_OW 1
12631: ST_TO_ADDR
12632: GO 12594
12634: POP
12635: POP
// result := tmp ;
12636: LD_ADDR_VAR 0 6
12640: PUSH
12641: LD_VAR 0 9
12645: ST_TO_ADDR
// end ; end ;
12646: LD_VAR 0 6
12650: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12651: LD_INT 0
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
12658: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 0
12666: PUSH
12667: LD_INT 0
12669: PUSH
12670: LD_INT 0
12672: PUSH
12673: EMPTY
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: ST_TO_ADDR
// if not x or not y then
12681: LD_VAR 0 2
12685: NOT
12686: PUSH
12687: LD_VAR 0 3
12691: NOT
12692: OR
12693: IFFALSE 12697
// exit ;
12695: GO 14347
// if not range then
12697: LD_VAR 0 4
12701: NOT
12702: IFFALSE 12712
// range := 10 ;
12704: LD_ADDR_VAR 0 4
12708: PUSH
12709: LD_INT 10
12711: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12712: LD_ADDR_VAR 0 8
12716: PUSH
12717: LD_INT 81
12719: PUSH
12720: LD_VAR 0 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 92
12731: PUSH
12732: LD_VAR 0 2
12736: PUSH
12737: LD_VAR 0 3
12741: PUSH
12742: LD_VAR 0 4
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 3
12755: PUSH
12756: LD_INT 21
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: ST_TO_ADDR
// if not tmp then
12780: LD_VAR 0 8
12784: NOT
12785: IFFALSE 12789
// exit ;
12787: GO 14347
// for i in tmp do
12789: LD_ADDR_VAR 0 6
12793: PUSH
12794: LD_VAR 0 8
12798: PUSH
12799: FOR_IN
12800: IFFALSE 14322
// begin points := [ 0 , 0 , 0 ] ;
12802: LD_ADDR_VAR 0 9
12806: PUSH
12807: LD_INT 0
12809: PUSH
12810: LD_INT 0
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: ST_TO_ADDR
// bpoints := 1 ;
12821: LD_ADDR_VAR 0 10
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12829: LD_VAR 0 6
12833: PPUSH
12834: CALL_OW 247
12838: PUSH
12839: LD_INT 1
12841: DOUBLE
12842: EQUAL
12843: IFTRUE 12847
12845: GO 13425
12847: POP
// begin if GetClass ( i ) = 1 then
12848: LD_VAR 0 6
12852: PPUSH
12853: CALL_OW 257
12857: PUSH
12858: LD_INT 1
12860: EQUAL
12861: IFFALSE 12882
// points := [ 10 , 5 , 3 ] ;
12863: LD_ADDR_VAR 0 9
12867: PUSH
12868: LD_INT 10
12870: PUSH
12871: LD_INT 5
12873: PUSH
12874: LD_INT 3
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12882: LD_VAR 0 6
12886: PPUSH
12887: CALL_OW 257
12891: PUSH
12892: LD_INT 2
12894: PUSH
12895: LD_INT 3
12897: PUSH
12898: LD_INT 4
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: IN
12906: IFFALSE 12927
// points := [ 3 , 2 , 1 ] ;
12908: LD_ADDR_VAR 0 9
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12927: LD_VAR 0 6
12931: PPUSH
12932: CALL_OW 257
12936: PUSH
12937: LD_INT 5
12939: EQUAL
12940: IFFALSE 12961
// points := [ 130 , 5 , 2 ] ;
12942: LD_ADDR_VAR 0 9
12946: PUSH
12947: LD_INT 130
12949: PUSH
12950: LD_INT 5
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12961: LD_VAR 0 6
12965: PPUSH
12966: CALL_OW 257
12970: PUSH
12971: LD_INT 8
12973: EQUAL
12974: IFFALSE 12995
// points := [ 35 , 35 , 30 ] ;
12976: LD_ADDR_VAR 0 9
12980: PUSH
12981: LD_INT 35
12983: PUSH
12984: LD_INT 35
12986: PUSH
12987: LD_INT 30
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12995: LD_VAR 0 6
12999: PPUSH
13000: CALL_OW 257
13004: PUSH
13005: LD_INT 9
13007: EQUAL
13008: IFFALSE 13029
// points := [ 20 , 55 , 40 ] ;
13010: LD_ADDR_VAR 0 9
13014: PUSH
13015: LD_INT 20
13017: PUSH
13018: LD_INT 55
13020: PUSH
13021: LD_INT 40
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
13029: LD_VAR 0 6
13033: PPUSH
13034: CALL_OW 257
13038: PUSH
13039: LD_INT 12
13041: PUSH
13042: LD_INT 16
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: IN
13049: IFFALSE 13070
// points := [ 5 , 3 , 2 ] ;
13051: LD_ADDR_VAR 0 9
13055: PUSH
13056: LD_INT 5
13058: PUSH
13059: LD_INT 3
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: ST_TO_ADDR
// if GetClass ( i ) = 17 then
13070: LD_VAR 0 6
13074: PPUSH
13075: CALL_OW 257
13079: PUSH
13080: LD_INT 17
13082: EQUAL
13083: IFFALSE 13104
// points := [ 100 , 50 , 75 ] ;
13085: LD_ADDR_VAR 0 9
13089: PUSH
13090: LD_INT 100
13092: PUSH
13093: LD_INT 50
13095: PUSH
13096: LD_INT 75
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: ST_TO_ADDR
// if GetClass ( i ) = 15 then
13104: LD_VAR 0 6
13108: PPUSH
13109: CALL_OW 257
13113: PUSH
13114: LD_INT 15
13116: EQUAL
13117: IFFALSE 13138
// points := [ 10 , 5 , 3 ] ;
13119: LD_ADDR_VAR 0 9
13123: PUSH
13124: LD_INT 10
13126: PUSH
13127: LD_INT 5
13129: PUSH
13130: LD_INT 3
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: ST_TO_ADDR
// if GetClass ( i ) = 14 then
13138: LD_VAR 0 6
13142: PPUSH
13143: CALL_OW 257
13147: PUSH
13148: LD_INT 14
13150: EQUAL
13151: IFFALSE 13172
// points := [ 10 , 0 , 0 ] ;
13153: LD_ADDR_VAR 0 9
13157: PUSH
13158: LD_INT 10
13160: PUSH
13161: LD_INT 0
13163: PUSH
13164: LD_INT 0
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13172: LD_VAR 0 6
13176: PPUSH
13177: CALL_OW 257
13181: PUSH
13182: LD_INT 11
13184: EQUAL
13185: IFFALSE 13206
// points := [ 30 , 10 , 5 ] ;
13187: LD_ADDR_VAR 0 9
13191: PUSH
13192: LD_INT 30
13194: PUSH
13195: LD_INT 10
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13206: LD_VAR 0 1
13210: PPUSH
13211: LD_INT 5
13213: PPUSH
13214: CALL_OW 321
13218: PUSH
13219: LD_INT 2
13221: EQUAL
13222: IFFALSE 13239
// bpoints := bpoints * 1.8 ;
13224: LD_ADDR_VAR 0 10
13228: PUSH
13229: LD_VAR 0 10
13233: PUSH
13234: LD_REAL  1.80000000000000E+0000
13237: MUL
13238: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13239: LD_VAR 0 6
13243: PPUSH
13244: CALL_OW 257
13248: PUSH
13249: LD_INT 1
13251: PUSH
13252: LD_INT 2
13254: PUSH
13255: LD_INT 3
13257: PUSH
13258: LD_INT 4
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: IN
13267: PUSH
13268: LD_VAR 0 1
13272: PPUSH
13273: LD_INT 51
13275: PPUSH
13276: CALL_OW 321
13280: PUSH
13281: LD_INT 2
13283: EQUAL
13284: AND
13285: IFFALSE 13302
// bpoints := bpoints * 1.2 ;
13287: LD_ADDR_VAR 0 10
13291: PUSH
13292: LD_VAR 0 10
13296: PUSH
13297: LD_REAL  1.20000000000000E+0000
13300: MUL
13301: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13302: LD_VAR 0 6
13306: PPUSH
13307: CALL_OW 257
13311: PUSH
13312: LD_INT 5
13314: PUSH
13315: LD_INT 7
13317: PUSH
13318: LD_INT 9
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: IN
13326: PUSH
13327: LD_VAR 0 1
13331: PPUSH
13332: LD_INT 52
13334: PPUSH
13335: CALL_OW 321
13339: PUSH
13340: LD_INT 2
13342: EQUAL
13343: AND
13344: IFFALSE 13361
// bpoints := bpoints * 1.5 ;
13346: LD_ADDR_VAR 0 10
13350: PUSH
13351: LD_VAR 0 10
13355: PUSH
13356: LD_REAL  1.50000000000000E+0000
13359: MUL
13360: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_INT 66
13368: PPUSH
13369: CALL_OW 321
13373: PUSH
13374: LD_INT 2
13376: EQUAL
13377: IFFALSE 13394
// bpoints := bpoints * 1.1 ;
13379: LD_ADDR_VAR 0 10
13383: PUSH
13384: LD_VAR 0 10
13388: PUSH
13389: LD_REAL  1.10000000000000E+0000
13392: MUL
13393: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13394: LD_ADDR_VAR 0 10
13398: PUSH
13399: LD_VAR 0 10
13403: PUSH
13404: LD_VAR 0 6
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 259
13416: PUSH
13417: LD_REAL  1.15000000000000E+0000
13420: MUL
13421: MUL
13422: ST_TO_ADDR
// end ; unit_vehicle :
13423: GO 14251
13425: LD_INT 2
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 14239
13433: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13434: LD_VAR 0 6
13438: PPUSH
13439: CALL_OW 264
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 42
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: IN
13458: IFFALSE 13479
// points := [ 25 , 5 , 3 ] ;
13460: LD_ADDR_VAR 0 9
13464: PUSH
13465: LD_INT 25
13467: PUSH
13468: LD_INT 5
13470: PUSH
13471: LD_INT 3
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13479: LD_VAR 0 6
13483: PPUSH
13484: CALL_OW 264
13488: PUSH
13489: LD_INT 4
13491: PUSH
13492: LD_INT 43
13494: PUSH
13495: LD_INT 25
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: IN
13503: IFFALSE 13524
// points := [ 40 , 15 , 5 ] ;
13505: LD_ADDR_VAR 0 9
13509: PUSH
13510: LD_INT 40
13512: PUSH
13513: LD_INT 15
13515: PUSH
13516: LD_INT 5
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13524: LD_VAR 0 6
13528: PPUSH
13529: CALL_OW 264
13533: PUSH
13534: LD_INT 3
13536: PUSH
13537: LD_INT 23
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: IN
13544: IFFALSE 13565
// points := [ 7 , 25 , 8 ] ;
13546: LD_ADDR_VAR 0 9
13550: PUSH
13551: LD_INT 7
13553: PUSH
13554: LD_INT 25
13556: PUSH
13557: LD_INT 8
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13565: LD_VAR 0 6
13569: PPUSH
13570: CALL_OW 264
13574: PUSH
13575: LD_INT 5
13577: PUSH
13578: LD_INT 27
13580: PUSH
13581: LD_INT 44
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: IN
13589: IFFALSE 13610
// points := [ 14 , 50 , 16 ] ;
13591: LD_ADDR_VAR 0 9
13595: PUSH
13596: LD_INT 14
13598: PUSH
13599: LD_INT 50
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13610: LD_VAR 0 6
13614: PPUSH
13615: CALL_OW 264
13619: PUSH
13620: LD_INT 6
13622: PUSH
13623: LD_INT 46
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: IN
13630: IFFALSE 13651
// points := [ 32 , 120 , 70 ] ;
13632: LD_ADDR_VAR 0 9
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 120
13642: PUSH
13643: LD_INT 70
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13651: LD_VAR 0 6
13655: PPUSH
13656: CALL_OW 264
13660: PUSH
13661: LD_INT 7
13663: PUSH
13664: LD_INT 28
13666: PUSH
13667: LD_INT 45
13669: PUSH
13670: LD_INT 92
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: IN
13679: IFFALSE 13700
// points := [ 35 , 20 , 45 ] ;
13681: LD_ADDR_VAR 0 9
13685: PUSH
13686: LD_INT 35
13688: PUSH
13689: LD_INT 20
13691: PUSH
13692: LD_INT 45
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13700: LD_VAR 0 6
13704: PPUSH
13705: CALL_OW 264
13709: PUSH
13710: LD_INT 47
13712: PUSH
13713: EMPTY
13714: LIST
13715: IN
13716: IFFALSE 13737
// points := [ 67 , 45 , 75 ] ;
13718: LD_ADDR_VAR 0 9
13722: PUSH
13723: LD_INT 67
13725: PUSH
13726: LD_INT 45
13728: PUSH
13729: LD_INT 75
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13737: LD_VAR 0 6
13741: PPUSH
13742: CALL_OW 264
13746: PUSH
13747: LD_INT 26
13749: PUSH
13750: EMPTY
13751: LIST
13752: IN
13753: IFFALSE 13774
// points := [ 120 , 30 , 80 ] ;
13755: LD_ADDR_VAR 0 9
13759: PUSH
13760: LD_INT 120
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 80
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13774: LD_VAR 0 6
13778: PPUSH
13779: CALL_OW 264
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: EMPTY
13788: LIST
13789: IN
13790: IFFALSE 13811
// points := [ 40 , 1 , 1 ] ;
13792: LD_ADDR_VAR 0 9
13796: PUSH
13797: LD_INT 40
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: LD_INT 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13811: LD_VAR 0 6
13815: PPUSH
13816: CALL_OW 264
13820: PUSH
13821: LD_INT 29
13823: PUSH
13824: EMPTY
13825: LIST
13826: IN
13827: IFFALSE 13848
// points := [ 70 , 200 , 400 ] ;
13829: LD_ADDR_VAR 0 9
13833: PUSH
13834: LD_INT 70
13836: PUSH
13837: LD_INT 200
13839: PUSH
13840: LD_INT 400
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13848: LD_VAR 0 6
13852: PPUSH
13853: CALL_OW 264
13857: PUSH
13858: LD_INT 14
13860: PUSH
13861: LD_INT 53
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: IN
13868: IFFALSE 13889
// points := [ 40 , 10 , 20 ] ;
13870: LD_ADDR_VAR 0 9
13874: PUSH
13875: LD_INT 40
13877: PUSH
13878: LD_INT 10
13880: PUSH
13881: LD_INT 20
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13889: LD_VAR 0 6
13893: PPUSH
13894: CALL_OW 264
13898: PUSH
13899: LD_INT 9
13901: PUSH
13902: EMPTY
13903: LIST
13904: IN
13905: IFFALSE 13926
// points := [ 5 , 70 , 20 ] ;
13907: LD_ADDR_VAR 0 9
13911: PUSH
13912: LD_INT 5
13914: PUSH
13915: LD_INT 70
13917: PUSH
13918: LD_INT 20
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13926: LD_VAR 0 6
13930: PPUSH
13931: CALL_OW 264
13935: PUSH
13936: LD_INT 10
13938: PUSH
13939: EMPTY
13940: LIST
13941: IN
13942: IFFALSE 13963
// points := [ 35 , 110 , 70 ] ;
13944: LD_ADDR_VAR 0 9
13948: PUSH
13949: LD_INT 35
13951: PUSH
13952: LD_INT 110
13954: PUSH
13955: LD_INT 70
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13963: LD_VAR 0 6
13967: PPUSH
13968: CALL_OW 265
13972: PUSH
13973: LD_INT 25
13975: EQUAL
13976: IFFALSE 13997
// points := [ 80 , 65 , 100 ] ;
13978: LD_ADDR_VAR 0 9
13982: PUSH
13983: LD_INT 80
13985: PUSH
13986: LD_INT 65
13988: PUSH
13989: LD_INT 100
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13997: LD_VAR 0 6
14001: PPUSH
14002: CALL_OW 263
14006: PUSH
14007: LD_INT 1
14009: EQUAL
14010: IFFALSE 14045
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14012: LD_ADDR_VAR 0 10
14016: PUSH
14017: LD_VAR 0 10
14021: PUSH
14022: LD_VAR 0 6
14026: PPUSH
14027: CALL_OW 311
14031: PPUSH
14032: LD_INT 3
14034: PPUSH
14035: CALL_OW 259
14039: PUSH
14040: LD_INT 4
14042: MUL
14043: MUL
14044: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
14045: LD_VAR 0 6
14049: PPUSH
14050: CALL_OW 263
14054: PUSH
14055: LD_INT 2
14057: EQUAL
14058: IFFALSE 14109
// begin j := IsControledBy ( i ) ;
14060: LD_ADDR_VAR 0 7
14064: PUSH
14065: LD_VAR 0 6
14069: PPUSH
14070: CALL_OW 312
14074: ST_TO_ADDR
// if j then
14075: LD_VAR 0 7
14079: IFFALSE 14109
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
14081: LD_ADDR_VAR 0 10
14085: PUSH
14086: LD_VAR 0 10
14090: PUSH
14091: LD_VAR 0 7
14095: PPUSH
14096: LD_INT 3
14098: PPUSH
14099: CALL_OW 259
14103: PUSH
14104: LD_INT 3
14106: MUL
14107: MUL
14108: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
14109: LD_VAR 0 6
14113: PPUSH
14114: CALL_OW 264
14118: PUSH
14119: LD_INT 5
14121: PUSH
14122: LD_INT 6
14124: PUSH
14125: LD_INT 46
14127: PUSH
14128: LD_INT 44
14130: PUSH
14131: LD_INT 47
14133: PUSH
14134: LD_INT 45
14136: PUSH
14137: LD_INT 28
14139: PUSH
14140: LD_INT 7
14142: PUSH
14143: LD_INT 27
14145: PUSH
14146: LD_INT 29
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: IN
14161: PUSH
14162: LD_VAR 0 1
14166: PPUSH
14167: LD_INT 52
14169: PPUSH
14170: CALL_OW 321
14174: PUSH
14175: LD_INT 2
14177: EQUAL
14178: AND
14179: IFFALSE 14196
// bpoints := bpoints * 1.2 ;
14181: LD_ADDR_VAR 0 10
14185: PUSH
14186: LD_VAR 0 10
14190: PUSH
14191: LD_REAL  1.20000000000000E+0000
14194: MUL
14195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14196: LD_VAR 0 6
14200: PPUSH
14201: CALL_OW 264
14205: PUSH
14206: LD_INT 6
14208: PUSH
14209: LD_INT 46
14211: PUSH
14212: LD_INT 47
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: IN
14220: IFFALSE 14237
// bpoints := bpoints * 1.2 ;
14222: LD_ADDR_VAR 0 10
14226: PUSH
14227: LD_VAR 0 10
14231: PUSH
14232: LD_REAL  1.20000000000000E+0000
14235: MUL
14236: ST_TO_ADDR
// end ; unit_building :
14237: GO 14251
14239: LD_INT 3
14241: DOUBLE
14242: EQUAL
14243: IFTRUE 14247
14245: GO 14250
14247: POP
// ; end ;
14248: GO 14251
14250: POP
// for j = 1 to 3 do
14251: LD_ADDR_VAR 0 7
14255: PUSH
14256: DOUBLE
14257: LD_INT 1
14259: DEC
14260: ST_TO_ADDR
14261: LD_INT 3
14263: PUSH
14264: FOR_TO
14265: IFFALSE 14318
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14267: LD_ADDR_VAR 0 5
14271: PUSH
14272: LD_VAR 0 5
14276: PPUSH
14277: LD_VAR 0 7
14281: PPUSH
14282: LD_VAR 0 5
14286: PUSH
14287: LD_VAR 0 7
14291: ARRAY
14292: PUSH
14293: LD_VAR 0 9
14297: PUSH
14298: LD_VAR 0 7
14302: ARRAY
14303: PUSH
14304: LD_VAR 0 10
14308: MUL
14309: PLUS
14310: PPUSH
14311: CALL_OW 1
14315: ST_TO_ADDR
14316: GO 14264
14318: POP
14319: POP
// end ;
14320: GO 12799
14322: POP
14323: POP
// result := Replace ( result , 4 , tmp ) ;
14324: LD_ADDR_VAR 0 5
14328: PUSH
14329: LD_VAR 0 5
14333: PPUSH
14334: LD_INT 4
14336: PPUSH
14337: LD_VAR 0 8
14341: PPUSH
14342: CALL_OW 1
14346: ST_TO_ADDR
// end ;
14347: LD_VAR 0 5
14351: RET
// export function DangerAtRange ( unit , range ) ; begin
14352: LD_INT 0
14354: PPUSH
// if not unit then
14355: LD_VAR 0 1
14359: NOT
14360: IFFALSE 14364
// exit ;
14362: GO 14409
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 255
14378: PPUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 250
14388: PPUSH
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 251
14398: PPUSH
14399: LD_VAR 0 2
14403: PPUSH
14404: CALL 12651 0 4
14408: ST_TO_ADDR
// end ;
14409: LD_VAR 0 3
14413: RET
// export function DangerInArea ( side , area ) ; begin
14414: LD_INT 0
14416: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_VAR 0 2
14426: PPUSH
14427: LD_INT 81
14429: PUSH
14430: LD_VAR 0 1
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 70
14443: ST_TO_ADDR
// end ;
14444: LD_VAR 0 3
14448: RET
// export function IsExtension ( b ) ; begin
14449: LD_INT 0
14451: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14452: LD_ADDR_VAR 0 2
14456: PUSH
14457: LD_VAR 0 1
14461: PUSH
14462: LD_INT 23
14464: PUSH
14465: LD_INT 20
14467: PUSH
14468: LD_INT 22
14470: PUSH
14471: LD_INT 17
14473: PUSH
14474: LD_INT 24
14476: PUSH
14477: LD_INT 21
14479: PUSH
14480: LD_INT 19
14482: PUSH
14483: LD_INT 16
14485: PUSH
14486: LD_INT 25
14488: PUSH
14489: LD_INT 18
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: IN
14504: ST_TO_ADDR
// end ;
14505: LD_VAR 0 2
14509: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
// result := [ ] ;
14515: LD_ADDR_VAR 0 4
14519: PUSH
14520: EMPTY
14521: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14522: LD_ADDR_VAR 0 5
14526: PUSH
14527: LD_VAR 0 2
14531: PPUSH
14532: LD_INT 21
14534: PUSH
14535: LD_INT 3
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 70
14546: ST_TO_ADDR
// if not tmp then
14547: LD_VAR 0 5
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14620
// if checkLink then
14556: LD_VAR 0 3
14560: IFFALSE 14610
// begin for i in tmp do
14562: LD_ADDR_VAR 0 6
14566: PUSH
14567: LD_VAR 0 5
14571: PUSH
14572: FOR_IN
14573: IFFALSE 14608
// if GetBase ( i ) <> base then
14575: LD_VAR 0 6
14579: PPUSH
14580: CALL_OW 274
14584: PUSH
14585: LD_VAR 0 1
14589: NONEQUAL
14590: IFFALSE 14606
// ComLinkToBase ( base , i ) ;
14592: LD_VAR 0 1
14596: PPUSH
14597: LD_VAR 0 6
14601: PPUSH
14602: CALL_OW 169
14606: GO 14572
14608: POP
14609: POP
// end ; result := tmp ;
14610: LD_ADDR_VAR 0 4
14614: PUSH
14615: LD_VAR 0 5
14619: ST_TO_ADDR
// end ;
14620: LD_VAR 0 4
14624: RET
// export function ComComplete ( units , b ) ; var i ; begin
14625: LD_INT 0
14627: PPUSH
14628: PPUSH
// if not units then
14629: LD_VAR 0 1
14633: NOT
14634: IFFALSE 14638
// exit ;
14636: GO 14728
// for i in units do
14638: LD_ADDR_VAR 0 4
14642: PUSH
14643: LD_VAR 0 1
14647: PUSH
14648: FOR_IN
14649: IFFALSE 14726
// if BuildingStatus ( b ) = bs_build then
14651: LD_VAR 0 2
14655: PPUSH
14656: CALL_OW 461
14660: PUSH
14661: LD_INT 1
14663: EQUAL
14664: IFFALSE 14724
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14666: LD_VAR 0 4
14670: PPUSH
14671: LD_STRING h
14673: PUSH
14674: LD_VAR 0 2
14678: PPUSH
14679: CALL_OW 250
14683: PUSH
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 251
14693: PUSH
14694: LD_VAR 0 2
14698: PUSH
14699: LD_INT 0
14701: PUSH
14702: LD_INT 0
14704: PUSH
14705: LD_INT 0
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: PPUSH
14720: CALL_OW 446
14724: GO 14648
14726: POP
14727: POP
// end ;
14728: LD_VAR 0 3
14732: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14733: LD_INT 0
14735: PPUSH
14736: PPUSH
14737: PPUSH
14738: PPUSH
14739: PPUSH
14740: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14741: LD_VAR 0 1
14745: NOT
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 263
14756: PUSH
14757: LD_INT 2
14759: NONEQUAL
14760: OR
14761: IFFALSE 14765
// exit ;
14763: GO 15081
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14765: LD_ADDR_VAR 0 6
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 255
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 30
14792: PUSH
14793: LD_INT 36
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 34
14802: PUSH
14803: LD_INT 31
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PPUSH
14819: CALL_OW 69
14823: ST_TO_ADDR
// if not tmp then
14824: LD_VAR 0 6
14828: NOT
14829: IFFALSE 14833
// exit ;
14831: GO 15081
// result := [ ] ;
14833: LD_ADDR_VAR 0 2
14837: PUSH
14838: EMPTY
14839: ST_TO_ADDR
// for i in tmp do
14840: LD_ADDR_VAR 0 3
14844: PUSH
14845: LD_VAR 0 6
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14922
// begin t := UnitsInside ( i ) ;
14853: LD_ADDR_VAR 0 4
14857: PUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: CALL_OW 313
14867: ST_TO_ADDR
// if t then
14868: LD_VAR 0 4
14872: IFFALSE 14920
// for j in t do
14874: LD_ADDR_VAR 0 7
14878: PUSH
14879: LD_VAR 0 4
14883: PUSH
14884: FOR_IN
14885: IFFALSE 14918
// result := Replace ( result , result + 1 , j ) ;
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_VAR 0 2
14896: PPUSH
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: PLUS
14905: PPUSH
14906: LD_VAR 0 7
14910: PPUSH
14911: CALL_OW 1
14915: ST_TO_ADDR
14916: GO 14884
14918: POP
14919: POP
// end ;
14920: GO 14850
14922: POP
14923: POP
// if not result then
14924: LD_VAR 0 2
14928: NOT
14929: IFFALSE 14933
// exit ;
14931: GO 15081
// mech := result [ 1 ] ;
14933: LD_ADDR_VAR 0 5
14937: PUSH
14938: LD_VAR 0 2
14942: PUSH
14943: LD_INT 1
14945: ARRAY
14946: ST_TO_ADDR
// if result > 1 then
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 1
14954: GREATER
14955: IFFALSE 15067
// begin for i = 2 to result do
14957: LD_ADDR_VAR 0 3
14961: PUSH
14962: DOUBLE
14963: LD_INT 2
14965: DEC
14966: ST_TO_ADDR
14967: LD_VAR 0 2
14971: PUSH
14972: FOR_TO
14973: IFFALSE 15065
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14975: LD_ADDR_VAR 0 4
14979: PUSH
14980: LD_VAR 0 2
14984: PUSH
14985: LD_VAR 0 3
14989: ARRAY
14990: PPUSH
14991: LD_INT 3
14993: PPUSH
14994: CALL_OW 259
14998: PUSH
14999: LD_VAR 0 2
15003: PUSH
15004: LD_VAR 0 3
15008: ARRAY
15009: PPUSH
15010: CALL_OW 432
15014: MINUS
15015: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15016: LD_VAR 0 4
15020: PUSH
15021: LD_VAR 0 5
15025: PPUSH
15026: LD_INT 3
15028: PPUSH
15029: CALL_OW 259
15033: PUSH
15034: LD_VAR 0 5
15038: PPUSH
15039: CALL_OW 432
15043: MINUS
15044: GREATEREQUAL
15045: IFFALSE 15063
// mech := result [ i ] ;
15047: LD_ADDR_VAR 0 5
15051: PUSH
15052: LD_VAR 0 2
15056: PUSH
15057: LD_VAR 0 3
15061: ARRAY
15062: ST_TO_ADDR
// end ;
15063: GO 14972
15065: POP
15066: POP
// end ; ComLinkTo ( vehicle , mech ) ;
15067: LD_VAR 0 1
15071: PPUSH
15072: LD_VAR 0 5
15076: PPUSH
15077: CALL_OW 135
// end ;
15081: LD_VAR 0 2
15085: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
// result := [ ] ;
15101: LD_ADDR_VAR 0 7
15105: PUSH
15106: EMPTY
15107: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
15108: LD_VAR 0 1
15112: PPUSH
15113: CALL_OW 266
15117: PUSH
15118: LD_INT 0
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: IN
15128: NOT
15129: IFFALSE 15133
// exit ;
15131: GO 16767
// if name then
15133: LD_VAR 0 3
15137: IFFALSE 15153
// SetBName ( base_dep , name ) ;
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_VAR 0 3
15148: PPUSH
15149: CALL_OW 500
// base := GetBase ( base_dep ) ;
15153: LD_ADDR_VAR 0 15
15157: PUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 274
15167: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
15168: LD_ADDR_VAR 0 16
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15183: LD_ADDR_VAR 0 17
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 248
15197: ST_TO_ADDR
// if sources then
15198: LD_VAR 0 5
15202: IFFALSE 15249
// for i = 1 to 3 do
15204: LD_ADDR_VAR 0 8
15208: PUSH
15209: DOUBLE
15210: LD_INT 1
15212: DEC
15213: ST_TO_ADDR
15214: LD_INT 3
15216: PUSH
15217: FOR_TO
15218: IFFALSE 15247
// AddResourceType ( base , i , sources [ i ] ) ;
15220: LD_VAR 0 15
15224: PPUSH
15225: LD_VAR 0 8
15229: PPUSH
15230: LD_VAR 0 5
15234: PUSH
15235: LD_VAR 0 8
15239: ARRAY
15240: PPUSH
15241: CALL_OW 276
15245: GO 15217
15247: POP
15248: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15249: LD_ADDR_VAR 0 18
15253: PUSH
15254: LD_VAR 0 15
15258: PPUSH
15259: LD_VAR 0 2
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: CALL 14510 0 3
15271: ST_TO_ADDR
// InitHc ;
15272: CALL_OW 19
// InitUc ;
15276: CALL_OW 18
// uc_side := side ;
15280: LD_ADDR_OWVAR 20
15284: PUSH
15285: LD_VAR 0 16
15289: ST_TO_ADDR
// uc_nation := nation ;
15290: LD_ADDR_OWVAR 21
15294: PUSH
15295: LD_VAR 0 17
15299: ST_TO_ADDR
// if buildings then
15300: LD_VAR 0 18
15304: IFFALSE 16626
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15306: LD_ADDR_VAR 0 19
15310: PUSH
15311: LD_VAR 0 18
15315: PPUSH
15316: LD_INT 2
15318: PUSH
15319: LD_INT 30
15321: PUSH
15322: LD_INT 29
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 30
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 72
15348: ST_TO_ADDR
// if tmp then
15349: LD_VAR 0 19
15353: IFFALSE 15401
// for i in tmp do
15355: LD_ADDR_VAR 0 8
15359: PUSH
15360: LD_VAR 0 19
15364: PUSH
15365: FOR_IN
15366: IFFALSE 15399
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15368: LD_VAR 0 8
15372: PPUSH
15373: CALL_OW 250
15377: PPUSH
15378: LD_VAR 0 8
15382: PPUSH
15383: CALL_OW 251
15387: PPUSH
15388: LD_VAR 0 16
15392: PPUSH
15393: CALL_OW 441
15397: GO 15365
15399: POP
15400: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15401: LD_VAR 0 18
15405: PPUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 32
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 30
15421: PUSH
15422: LD_INT 33
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 72
15438: IFFALSE 15526
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15440: LD_ADDR_VAR 0 8
15444: PUSH
15445: LD_VAR 0 18
15449: PPUSH
15450: LD_INT 2
15452: PUSH
15453: LD_INT 30
15455: PUSH
15456: LD_INT 32
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 30
15465: PUSH
15466: LD_INT 33
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: PPUSH
15478: CALL_OW 72
15482: PUSH
15483: FOR_IN
15484: IFFALSE 15524
// begin if not GetBWeapon ( i ) then
15486: LD_VAR 0 8
15490: PPUSH
15491: CALL_OW 269
15495: NOT
15496: IFFALSE 15522
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15498: LD_VAR 0 8
15502: PPUSH
15503: LD_VAR 0 8
15507: PPUSH
15508: LD_VAR 0 2
15512: PPUSH
15513: CALL 16772 0 2
15517: PPUSH
15518: CALL_OW 431
// end ;
15522: GO 15483
15524: POP
15525: POP
// end ; for i = 1 to personel do
15526: LD_ADDR_VAR 0 8
15530: PUSH
15531: DOUBLE
15532: LD_INT 1
15534: DEC
15535: ST_TO_ADDR
15536: LD_VAR 0 6
15540: PUSH
15541: FOR_TO
15542: IFFALSE 16606
// begin if i > 4 then
15544: LD_VAR 0 8
15548: PUSH
15549: LD_INT 4
15551: GREATER
15552: IFFALSE 15556
// break ;
15554: GO 16606
// case i of 1 :
15556: LD_VAR 0 8
15560: PUSH
15561: LD_INT 1
15563: DOUBLE
15564: EQUAL
15565: IFTRUE 15569
15567: GO 15649
15569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15570: LD_ADDR_VAR 0 12
15574: PUSH
15575: LD_VAR 0 18
15579: PPUSH
15580: LD_INT 22
15582: PUSH
15583: LD_VAR 0 16
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 58
15594: PUSH
15595: EMPTY
15596: LIST
15597: PUSH
15598: LD_INT 2
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 32
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 4
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 30
15623: PUSH
15624: LD_INT 5
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: LIST
15641: PPUSH
15642: CALL_OW 72
15646: ST_TO_ADDR
15647: GO 15871
15649: LD_INT 2
15651: DOUBLE
15652: EQUAL
15653: IFTRUE 15657
15655: GO 15719
15657: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15658: LD_ADDR_VAR 0 12
15662: PUSH
15663: LD_VAR 0 18
15667: PPUSH
15668: LD_INT 22
15670: PUSH
15671: LD_VAR 0 16
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: LD_INT 30
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 30
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 72
15716: ST_TO_ADDR
15717: GO 15871
15719: LD_INT 3
15721: DOUBLE
15722: EQUAL
15723: IFTRUE 15727
15725: GO 15789
15727: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15728: LD_ADDR_VAR 0 12
15732: PUSH
15733: LD_VAR 0 18
15737: PPUSH
15738: LD_INT 22
15740: PUSH
15741: LD_VAR 0 16
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 2
15752: PUSH
15753: LD_INT 30
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 30
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PPUSH
15782: CALL_OW 72
15786: ST_TO_ADDR
15787: GO 15871
15789: LD_INT 4
15791: DOUBLE
15792: EQUAL
15793: IFTRUE 15797
15795: GO 15870
15797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15798: LD_ADDR_VAR 0 12
15802: PUSH
15803: LD_VAR 0 18
15807: PPUSH
15808: LD_INT 22
15810: PUSH
15811: LD_VAR 0 16
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: LD_INT 30
15825: PUSH
15826: LD_INT 6
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 30
15835: PUSH
15836: LD_INT 7
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 30
15845: PUSH
15846: LD_INT 8
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 72
15867: ST_TO_ADDR
15868: GO 15871
15870: POP
// if i = 1 then
15871: LD_VAR 0 8
15875: PUSH
15876: LD_INT 1
15878: EQUAL
15879: IFFALSE 15990
// begin tmp := [ ] ;
15881: LD_ADDR_VAR 0 19
15885: PUSH
15886: EMPTY
15887: ST_TO_ADDR
// for j in f do
15888: LD_ADDR_VAR 0 9
15892: PUSH
15893: LD_VAR 0 12
15897: PUSH
15898: FOR_IN
15899: IFFALSE 15972
// if GetBType ( j ) = b_bunker then
15901: LD_VAR 0 9
15905: PPUSH
15906: CALL_OW 266
15910: PUSH
15911: LD_INT 32
15913: EQUAL
15914: IFFALSE 15941
// tmp := Insert ( tmp , 1 , j ) else
15916: LD_ADDR_VAR 0 19
15920: PUSH
15921: LD_VAR 0 19
15925: PPUSH
15926: LD_INT 1
15928: PPUSH
15929: LD_VAR 0 9
15933: PPUSH
15934: CALL_OW 2
15938: ST_TO_ADDR
15939: GO 15970
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15941: LD_ADDR_VAR 0 19
15945: PUSH
15946: LD_VAR 0 19
15950: PPUSH
15951: LD_VAR 0 19
15955: PUSH
15956: LD_INT 1
15958: PLUS
15959: PPUSH
15960: LD_VAR 0 9
15964: PPUSH
15965: CALL_OW 2
15969: ST_TO_ADDR
15970: GO 15898
15972: POP
15973: POP
// if tmp then
15974: LD_VAR 0 19
15978: IFFALSE 15990
// f := tmp ;
15980: LD_ADDR_VAR 0 12
15984: PUSH
15985: LD_VAR 0 19
15989: ST_TO_ADDR
// end ; x := personel [ i ] ;
15990: LD_ADDR_VAR 0 13
15994: PUSH
15995: LD_VAR 0 6
15999: PUSH
16000: LD_VAR 0 8
16004: ARRAY
16005: ST_TO_ADDR
// if x = - 1 then
16006: LD_VAR 0 13
16010: PUSH
16011: LD_INT 1
16013: NEG
16014: EQUAL
16015: IFFALSE 16224
// begin for j in f do
16017: LD_ADDR_VAR 0 9
16021: PUSH
16022: LD_VAR 0 12
16026: PUSH
16027: FOR_IN
16028: IFFALSE 16220
// repeat InitHc ;
16030: CALL_OW 19
// if GetBType ( j ) = b_barracks then
16034: LD_VAR 0 9
16038: PPUSH
16039: CALL_OW 266
16043: PUSH
16044: LD_INT 5
16046: EQUAL
16047: IFFALSE 16117
// begin if UnitsInside ( j ) < 3 then
16049: LD_VAR 0 9
16053: PPUSH
16054: CALL_OW 313
16058: PUSH
16059: LD_INT 3
16061: LESS
16062: IFFALSE 16098
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16064: LD_INT 0
16066: PPUSH
16067: LD_INT 5
16069: PUSH
16070: LD_INT 8
16072: PUSH
16073: LD_INT 9
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: LD_VAR 0 17
16085: ARRAY
16086: PPUSH
16087: LD_VAR 0 4
16091: PPUSH
16092: CALL_OW 380
16096: GO 16115
// PrepareHuman ( false , i , skill ) ;
16098: LD_INT 0
16100: PPUSH
16101: LD_VAR 0 8
16105: PPUSH
16106: LD_VAR 0 4
16110: PPUSH
16111: CALL_OW 380
// end else
16115: GO 16134
// PrepareHuman ( false , i , skill ) ;
16117: LD_INT 0
16119: PPUSH
16120: LD_VAR 0 8
16124: PPUSH
16125: LD_VAR 0 4
16129: PPUSH
16130: CALL_OW 380
// un := CreateHuman ;
16134: LD_ADDR_VAR 0 14
16138: PUSH
16139: CALL_OW 44
16143: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16144: LD_ADDR_VAR 0 7
16148: PUSH
16149: LD_VAR 0 7
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: LD_VAR 0 14
16161: PPUSH
16162: CALL_OW 2
16166: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
16167: LD_VAR 0 14
16171: PPUSH
16172: LD_VAR 0 9
16176: PPUSH
16177: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16181: LD_VAR 0 9
16185: PPUSH
16186: CALL_OW 313
16190: PUSH
16191: LD_INT 6
16193: EQUAL
16194: PUSH
16195: LD_VAR 0 9
16199: PPUSH
16200: CALL_OW 266
16204: PUSH
16205: LD_INT 32
16207: PUSH
16208: LD_INT 31
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: IN
16215: OR
16216: IFFALSE 16030
16218: GO 16027
16220: POP
16221: POP
// end else
16222: GO 16604
// for j = 1 to x do
16224: LD_ADDR_VAR 0 9
16228: PUSH
16229: DOUBLE
16230: LD_INT 1
16232: DEC
16233: ST_TO_ADDR
16234: LD_VAR 0 13
16238: PUSH
16239: FOR_TO
16240: IFFALSE 16602
// begin InitHc ;
16242: CALL_OW 19
// if not f then
16246: LD_VAR 0 12
16250: NOT
16251: IFFALSE 16340
// begin PrepareHuman ( false , i , skill ) ;
16253: LD_INT 0
16255: PPUSH
16256: LD_VAR 0 8
16260: PPUSH
16261: LD_VAR 0 4
16265: PPUSH
16266: CALL_OW 380
// un := CreateHuman ;
16270: LD_ADDR_VAR 0 14
16274: PUSH
16275: CALL_OW 44
16279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16280: LD_ADDR_VAR 0 7
16284: PUSH
16285: LD_VAR 0 7
16289: PPUSH
16290: LD_INT 1
16292: PPUSH
16293: LD_VAR 0 14
16297: PPUSH
16298: CALL_OW 2
16302: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16303: LD_VAR 0 14
16307: PPUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 250
16317: PPUSH
16318: LD_VAR 0 1
16322: PPUSH
16323: CALL_OW 251
16327: PPUSH
16328: LD_INT 10
16330: PPUSH
16331: LD_INT 0
16333: PPUSH
16334: CALL_OW 50
// continue ;
16338: GO 16239
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16340: LD_VAR 0 12
16344: PUSH
16345: LD_INT 1
16347: ARRAY
16348: PPUSH
16349: CALL_OW 313
16353: PUSH
16354: LD_VAR 0 12
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: CALL_OW 266
16367: PUSH
16368: LD_INT 32
16370: PUSH
16371: LD_INT 31
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: IN
16378: AND
16379: PUSH
16380: LD_VAR 0 12
16384: PUSH
16385: LD_INT 1
16387: ARRAY
16388: PPUSH
16389: CALL_OW 313
16393: PUSH
16394: LD_INT 6
16396: EQUAL
16397: OR
16398: IFFALSE 16418
// f := Delete ( f , 1 ) ;
16400: LD_ADDR_VAR 0 12
16404: PUSH
16405: LD_VAR 0 12
16409: PPUSH
16410: LD_INT 1
16412: PPUSH
16413: CALL_OW 3
16417: ST_TO_ADDR
// if not f then
16418: LD_VAR 0 12
16422: NOT
16423: IFFALSE 16441
// begin x := x + 2 ;
16425: LD_ADDR_VAR 0 13
16429: PUSH
16430: LD_VAR 0 13
16434: PUSH
16435: LD_INT 2
16437: PLUS
16438: ST_TO_ADDR
// continue ;
16439: GO 16239
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16441: LD_VAR 0 12
16445: PUSH
16446: LD_INT 1
16448: ARRAY
16449: PPUSH
16450: CALL_OW 266
16454: PUSH
16455: LD_INT 5
16457: EQUAL
16458: IFFALSE 16532
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16460: LD_VAR 0 12
16464: PUSH
16465: LD_INT 1
16467: ARRAY
16468: PPUSH
16469: CALL_OW 313
16473: PUSH
16474: LD_INT 3
16476: LESS
16477: IFFALSE 16513
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16479: LD_INT 0
16481: PPUSH
16482: LD_INT 5
16484: PUSH
16485: LD_INT 8
16487: PUSH
16488: LD_INT 9
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: LD_VAR 0 17
16500: ARRAY
16501: PPUSH
16502: LD_VAR 0 4
16506: PPUSH
16507: CALL_OW 380
16511: GO 16530
// PrepareHuman ( false , i , skill ) ;
16513: LD_INT 0
16515: PPUSH
16516: LD_VAR 0 8
16520: PPUSH
16521: LD_VAR 0 4
16525: PPUSH
16526: CALL_OW 380
// end else
16530: GO 16549
// PrepareHuman ( false , i , skill ) ;
16532: LD_INT 0
16534: PPUSH
16535: LD_VAR 0 8
16539: PPUSH
16540: LD_VAR 0 4
16544: PPUSH
16545: CALL_OW 380
// un := CreateHuman ;
16549: LD_ADDR_VAR 0 14
16553: PUSH
16554: CALL_OW 44
16558: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16559: LD_ADDR_VAR 0 7
16563: PUSH
16564: LD_VAR 0 7
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: LD_VAR 0 14
16576: PPUSH
16577: CALL_OW 2
16581: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16582: LD_VAR 0 14
16586: PPUSH
16587: LD_VAR 0 12
16591: PUSH
16592: LD_INT 1
16594: ARRAY
16595: PPUSH
16596: CALL_OW 52
// end ;
16600: GO 16239
16602: POP
16603: POP
// end ;
16604: GO 15541
16606: POP
16607: POP
// result := result ^ buildings ;
16608: LD_ADDR_VAR 0 7
16612: PUSH
16613: LD_VAR 0 7
16617: PUSH
16618: LD_VAR 0 18
16622: ADD
16623: ST_TO_ADDR
// end else
16624: GO 16767
// begin for i = 1 to personel do
16626: LD_ADDR_VAR 0 8
16630: PUSH
16631: DOUBLE
16632: LD_INT 1
16634: DEC
16635: ST_TO_ADDR
16636: LD_VAR 0 6
16640: PUSH
16641: FOR_TO
16642: IFFALSE 16765
// begin if i > 4 then
16644: LD_VAR 0 8
16648: PUSH
16649: LD_INT 4
16651: GREATER
16652: IFFALSE 16656
// break ;
16654: GO 16765
// x := personel [ i ] ;
16656: LD_ADDR_VAR 0 13
16660: PUSH
16661: LD_VAR 0 6
16665: PUSH
16666: LD_VAR 0 8
16670: ARRAY
16671: ST_TO_ADDR
// if x = - 1 then
16672: LD_VAR 0 13
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: EQUAL
16681: IFFALSE 16685
// continue ;
16683: GO 16641
// PrepareHuman ( false , i , skill ) ;
16685: LD_INT 0
16687: PPUSH
16688: LD_VAR 0 8
16692: PPUSH
16693: LD_VAR 0 4
16697: PPUSH
16698: CALL_OW 380
// un := CreateHuman ;
16702: LD_ADDR_VAR 0 14
16706: PUSH
16707: CALL_OW 44
16711: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16712: LD_VAR 0 14
16716: PPUSH
16717: LD_VAR 0 1
16721: PPUSH
16722: CALL_OW 250
16726: PPUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 251
16736: PPUSH
16737: LD_INT 10
16739: PPUSH
16740: LD_INT 0
16742: PPUSH
16743: CALL_OW 50
// result := result ^ un ;
16747: LD_ADDR_VAR 0 7
16751: PUSH
16752: LD_VAR 0 7
16756: PUSH
16757: LD_VAR 0 14
16761: ADD
16762: ST_TO_ADDR
// end ;
16763: GO 16641
16765: POP
16766: POP
// end ; end ;
16767: LD_VAR 0 7
16771: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16772: LD_INT 0
16774: PPUSH
16775: PPUSH
16776: PPUSH
16777: PPUSH
16778: PPUSH
16779: PPUSH
16780: PPUSH
16781: PPUSH
16782: PPUSH
16783: PPUSH
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
// result := false ;
16790: LD_ADDR_VAR 0 3
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16798: LD_VAR 0 1
16802: NOT
16803: PUSH
16804: LD_VAR 0 1
16808: PPUSH
16809: CALL_OW 266
16813: PUSH
16814: LD_INT 32
16816: PUSH
16817: LD_INT 33
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: IN
16824: NOT
16825: OR
16826: IFFALSE 16830
// exit ;
16828: GO 17939
// nat := GetNation ( tower ) ;
16830: LD_ADDR_VAR 0 12
16834: PUSH
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 248
16844: ST_TO_ADDR
// side := GetSide ( tower ) ;
16845: LD_ADDR_VAR 0 16
16849: PUSH
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 255
16859: ST_TO_ADDR
// x := GetX ( tower ) ;
16860: LD_ADDR_VAR 0 10
16864: PUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 250
16874: ST_TO_ADDR
// y := GetY ( tower ) ;
16875: LD_ADDR_VAR 0 11
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: CALL_OW 251
16889: ST_TO_ADDR
// if not x or not y then
16890: LD_VAR 0 10
16894: NOT
16895: PUSH
16896: LD_VAR 0 11
16900: NOT
16901: OR
16902: IFFALSE 16906
// exit ;
16904: GO 17939
// weapon := 0 ;
16906: LD_ADDR_VAR 0 18
16910: PUSH
16911: LD_INT 0
16913: ST_TO_ADDR
// fac_list := [ ] ;
16914: LD_ADDR_VAR 0 17
16918: PUSH
16919: EMPTY
16920: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16921: LD_ADDR_VAR 0 6
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 274
16935: PPUSH
16936: LD_VAR 0 2
16940: PPUSH
16941: LD_INT 0
16943: PPUSH
16944: CALL 14510 0 3
16948: PPUSH
16949: LD_INT 30
16951: PUSH
16952: LD_INT 3
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 72
16963: ST_TO_ADDR
// if not factories then
16964: LD_VAR 0 6
16968: NOT
16969: IFFALSE 16973
// exit ;
16971: GO 17939
// for i in factories do
16973: LD_ADDR_VAR 0 8
16977: PUSH
16978: LD_VAR 0 6
16982: PUSH
16983: FOR_IN
16984: IFFALSE 17009
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16986: LD_ADDR_VAR 0 17
16990: PUSH
16991: LD_VAR 0 17
16995: PUSH
16996: LD_VAR 0 8
17000: PPUSH
17001: CALL_OW 478
17005: UNION
17006: ST_TO_ADDR
17007: GO 16983
17009: POP
17010: POP
// if not fac_list then
17011: LD_VAR 0 17
17015: NOT
17016: IFFALSE 17020
// exit ;
17018: GO 17939
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17020: LD_ADDR_VAR 0 5
17024: PUSH
17025: LD_INT 4
17027: PUSH
17028: LD_INT 5
17030: PUSH
17031: LD_INT 9
17033: PUSH
17034: LD_INT 10
17036: PUSH
17037: LD_INT 6
17039: PUSH
17040: LD_INT 7
17042: PUSH
17043: LD_INT 11
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 27
17057: PUSH
17058: LD_INT 28
17060: PUSH
17061: LD_INT 26
17063: PUSH
17064: LD_INT 30
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 43
17075: PUSH
17076: LD_INT 44
17078: PUSH
17079: LD_INT 46
17081: PUSH
17082: LD_INT 45
17084: PUSH
17085: LD_INT 47
17087: PUSH
17088: LD_INT 49
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: LD_VAR 0 12
17108: ARRAY
17109: ST_TO_ADDR
// list := list isect fac_list ;
17110: LD_ADDR_VAR 0 5
17114: PUSH
17115: LD_VAR 0 5
17119: PUSH
17120: LD_VAR 0 17
17124: ISECT
17125: ST_TO_ADDR
// if not list then
17126: LD_VAR 0 5
17130: NOT
17131: IFFALSE 17135
// exit ;
17133: GO 17939
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
17135: LD_VAR 0 12
17139: PUSH
17140: LD_INT 3
17142: EQUAL
17143: PUSH
17144: LD_INT 49
17146: PUSH
17147: LD_VAR 0 5
17151: IN
17152: AND
17153: PUSH
17154: LD_INT 31
17156: PPUSH
17157: LD_VAR 0 16
17161: PPUSH
17162: CALL_OW 321
17166: PUSH
17167: LD_INT 2
17169: EQUAL
17170: AND
17171: IFFALSE 17231
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
17173: LD_INT 22
17175: PUSH
17176: LD_VAR 0 16
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 35
17187: PUSH
17188: LD_INT 49
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 91
17197: PUSH
17198: LD_VAR 0 1
17202: PUSH
17203: LD_INT 10
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: LIST
17215: PPUSH
17216: CALL_OW 69
17220: NOT
17221: IFFALSE 17231
// weapon := ru_time_lapser ;
17223: LD_ADDR_VAR 0 18
17227: PUSH
17228: LD_INT 49
17230: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17231: LD_VAR 0 12
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: IN
17246: PUSH
17247: LD_INT 11
17249: PUSH
17250: LD_VAR 0 5
17254: IN
17255: PUSH
17256: LD_INT 30
17258: PUSH
17259: LD_VAR 0 5
17263: IN
17264: OR
17265: AND
17266: PUSH
17267: LD_INT 6
17269: PPUSH
17270: LD_VAR 0 16
17274: PPUSH
17275: CALL_OW 321
17279: PUSH
17280: LD_INT 2
17282: EQUAL
17283: AND
17284: IFFALSE 17449
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17286: LD_INT 22
17288: PUSH
17289: LD_VAR 0 16
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 35
17303: PUSH
17304: LD_INT 11
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 35
17313: PUSH
17314: LD_INT 30
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 91
17328: PUSH
17329: LD_VAR 0 1
17333: PUSH
17334: LD_INT 18
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: NOT
17352: PUSH
17353: LD_INT 22
17355: PUSH
17356: LD_VAR 0 16
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 32
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 30
17380: PUSH
17381: LD_INT 33
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 91
17395: PUSH
17396: LD_VAR 0 1
17400: PUSH
17401: LD_INT 12
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: PPUSH
17417: CALL_OW 69
17421: PUSH
17422: LD_INT 2
17424: GREATER
17425: AND
17426: IFFALSE 17449
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17428: LD_ADDR_VAR 0 18
17432: PUSH
17433: LD_INT 11
17435: PUSH
17436: LD_INT 30
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_VAR 0 12
17447: ARRAY
17448: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17449: LD_VAR 0 18
17453: NOT
17454: PUSH
17455: LD_INT 40
17457: PPUSH
17458: LD_VAR 0 16
17462: PPUSH
17463: CALL_OW 321
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_INT 7
17475: PUSH
17476: LD_VAR 0 5
17480: IN
17481: PUSH
17482: LD_INT 28
17484: PUSH
17485: LD_VAR 0 5
17489: IN
17490: OR
17491: PUSH
17492: LD_INT 45
17494: PUSH
17495: LD_VAR 0 5
17499: IN
17500: OR
17501: AND
17502: IFFALSE 17756
// begin hex := GetHexInfo ( x , y ) ;
17504: LD_ADDR_VAR 0 4
17508: PUSH
17509: LD_VAR 0 10
17513: PPUSH
17514: LD_VAR 0 11
17518: PPUSH
17519: CALL_OW 546
17523: ST_TO_ADDR
// if hex [ 1 ] then
17524: LD_VAR 0 4
17528: PUSH
17529: LD_INT 1
17531: ARRAY
17532: IFFALSE 17536
// exit ;
17534: GO 17939
// height := hex [ 2 ] ;
17536: LD_ADDR_VAR 0 15
17540: PUSH
17541: LD_VAR 0 4
17545: PUSH
17546: LD_INT 2
17548: ARRAY
17549: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17550: LD_ADDR_VAR 0 14
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: LD_INT 2
17560: PUSH
17561: LD_INT 3
17563: PUSH
17564: LD_INT 5
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: ST_TO_ADDR
// for i in tmp do
17573: LD_ADDR_VAR 0 8
17577: PUSH
17578: LD_VAR 0 14
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17754
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17586: LD_ADDR_VAR 0 9
17590: PUSH
17591: LD_VAR 0 10
17595: PPUSH
17596: LD_VAR 0 8
17600: PPUSH
17601: LD_INT 5
17603: PPUSH
17604: CALL_OW 272
17608: PUSH
17609: LD_VAR 0 11
17613: PPUSH
17614: LD_VAR 0 8
17618: PPUSH
17619: LD_INT 5
17621: PPUSH
17622: CALL_OW 273
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17631: LD_VAR 0 9
17635: PUSH
17636: LD_INT 1
17638: ARRAY
17639: PPUSH
17640: LD_VAR 0 9
17644: PUSH
17645: LD_INT 2
17647: ARRAY
17648: PPUSH
17649: CALL_OW 488
17653: IFFALSE 17752
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17655: LD_ADDR_VAR 0 4
17659: PUSH
17660: LD_VAR 0 9
17664: PUSH
17665: LD_INT 1
17667: ARRAY
17668: PPUSH
17669: LD_VAR 0 9
17673: PUSH
17674: LD_INT 2
17676: ARRAY
17677: PPUSH
17678: CALL_OW 546
17682: ST_TO_ADDR
// if hex [ 1 ] then
17683: LD_VAR 0 4
17687: PUSH
17688: LD_INT 1
17690: ARRAY
17691: IFFALSE 17695
// continue ;
17693: GO 17583
// h := hex [ 2 ] ;
17695: LD_ADDR_VAR 0 13
17699: PUSH
17700: LD_VAR 0 4
17704: PUSH
17705: LD_INT 2
17707: ARRAY
17708: ST_TO_ADDR
// if h + 7 < height then
17709: LD_VAR 0 13
17713: PUSH
17714: LD_INT 7
17716: PLUS
17717: PUSH
17718: LD_VAR 0 15
17722: LESS
17723: IFFALSE 17752
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17725: LD_ADDR_VAR 0 18
17729: PUSH
17730: LD_INT 7
17732: PUSH
17733: LD_INT 28
17735: PUSH
17736: LD_INT 45
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: LD_VAR 0 12
17748: ARRAY
17749: ST_TO_ADDR
// break ;
17750: GO 17754
// end ; end ; end ;
17752: GO 17583
17754: POP
17755: POP
// end ; if not weapon then
17756: LD_VAR 0 18
17760: NOT
17761: IFFALSE 17821
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17763: LD_ADDR_VAR 0 5
17767: PUSH
17768: LD_VAR 0 5
17772: PUSH
17773: LD_INT 11
17775: PUSH
17776: LD_INT 30
17778: PUSH
17779: LD_INT 49
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: LIST
17786: DIFF
17787: ST_TO_ADDR
// if not list then
17788: LD_VAR 0 5
17792: NOT
17793: IFFALSE 17797
// exit ;
17795: GO 17939
// weapon := list [ rand ( 1 , list ) ] ;
17797: LD_ADDR_VAR 0 18
17801: PUSH
17802: LD_VAR 0 5
17806: PUSH
17807: LD_INT 1
17809: PPUSH
17810: LD_VAR 0 5
17814: PPUSH
17815: CALL_OW 12
17819: ARRAY
17820: ST_TO_ADDR
// end ; if weapon then
17821: LD_VAR 0 18
17825: IFFALSE 17939
// begin tmp := CostOfWeapon ( weapon ) ;
17827: LD_ADDR_VAR 0 14
17831: PUSH
17832: LD_VAR 0 18
17836: PPUSH
17837: CALL_OW 451
17841: ST_TO_ADDR
// j := GetBase ( tower ) ;
17842: LD_ADDR_VAR 0 9
17846: PUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 274
17856: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17857: LD_VAR 0 9
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 275
17869: PUSH
17870: LD_VAR 0 14
17874: PUSH
17875: LD_INT 1
17877: ARRAY
17878: GREATEREQUAL
17879: PUSH
17880: LD_VAR 0 9
17884: PPUSH
17885: LD_INT 2
17887: PPUSH
17888: CALL_OW 275
17892: PUSH
17893: LD_VAR 0 14
17897: PUSH
17898: LD_INT 2
17900: ARRAY
17901: GREATEREQUAL
17902: AND
17903: PUSH
17904: LD_VAR 0 9
17908: PPUSH
17909: LD_INT 3
17911: PPUSH
17912: CALL_OW 275
17916: PUSH
17917: LD_VAR 0 14
17921: PUSH
17922: LD_INT 3
17924: ARRAY
17925: GREATEREQUAL
17926: AND
17927: IFFALSE 17939
// result := weapon ;
17929: LD_ADDR_VAR 0 3
17933: PUSH
17934: LD_VAR 0 18
17938: ST_TO_ADDR
// end ; end ;
17939: LD_VAR 0 3
17943: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17944: LD_INT 0
17946: PPUSH
17947: PPUSH
// result := true ;
17948: LD_ADDR_VAR 0 3
17952: PUSH
17953: LD_INT 1
17955: ST_TO_ADDR
// if array1 = array2 then
17956: LD_VAR 0 1
17960: PUSH
17961: LD_VAR 0 2
17965: EQUAL
17966: IFFALSE 18026
// begin for i = 1 to array1 do
17968: LD_ADDR_VAR 0 4
17972: PUSH
17973: DOUBLE
17974: LD_INT 1
17976: DEC
17977: ST_TO_ADDR
17978: LD_VAR 0 1
17982: PUSH
17983: FOR_TO
17984: IFFALSE 18022
// if array1 [ i ] <> array2 [ i ] then
17986: LD_VAR 0 1
17990: PUSH
17991: LD_VAR 0 4
17995: ARRAY
17996: PUSH
17997: LD_VAR 0 2
18001: PUSH
18002: LD_VAR 0 4
18006: ARRAY
18007: NONEQUAL
18008: IFFALSE 18020
// begin result := false ;
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_INT 0
18017: ST_TO_ADDR
// break ;
18018: GO 18022
// end ;
18020: GO 17983
18022: POP
18023: POP
// end else
18024: GO 18034
// result := false ;
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: LD_INT 0
18033: ST_TO_ADDR
// end ;
18034: LD_VAR 0 3
18038: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
18039: LD_INT 0
18041: PPUSH
18042: PPUSH
// if not array1 or not array2 then
18043: LD_VAR 0 1
18047: NOT
18048: PUSH
18049: LD_VAR 0 2
18053: NOT
18054: OR
18055: IFFALSE 18059
// exit ;
18057: GO 18123
// result := true ;
18059: LD_ADDR_VAR 0 3
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// for i = 1 to array1 do
18067: LD_ADDR_VAR 0 4
18071: PUSH
18072: DOUBLE
18073: LD_INT 1
18075: DEC
18076: ST_TO_ADDR
18077: LD_VAR 0 1
18081: PUSH
18082: FOR_TO
18083: IFFALSE 18121
// if array1 [ i ] <> array2 [ i ] then
18085: LD_VAR 0 1
18089: PUSH
18090: LD_VAR 0 4
18094: ARRAY
18095: PUSH
18096: LD_VAR 0 2
18100: PUSH
18101: LD_VAR 0 4
18105: ARRAY
18106: NONEQUAL
18107: IFFALSE 18119
// begin result := false ;
18109: LD_ADDR_VAR 0 3
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// break ;
18117: GO 18121
// end ;
18119: GO 18082
18121: POP
18122: POP
// end ;
18123: LD_VAR 0 3
18127: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
18132: PPUSH
// pom := GetBase ( fac ) ;
18133: LD_ADDR_VAR 0 5
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 274
18147: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
18148: LD_ADDR_VAR 0 4
18152: PUSH
18153: LD_VAR 0 2
18157: PUSH
18158: LD_INT 1
18160: ARRAY
18161: PPUSH
18162: LD_VAR 0 2
18166: PUSH
18167: LD_INT 2
18169: ARRAY
18170: PPUSH
18171: LD_VAR 0 2
18175: PUSH
18176: LD_INT 3
18178: ARRAY
18179: PPUSH
18180: LD_VAR 0 2
18184: PUSH
18185: LD_INT 4
18187: ARRAY
18188: PPUSH
18189: CALL_OW 449
18193: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18194: LD_ADDR_VAR 0 3
18198: PUSH
18199: LD_VAR 0 5
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 275
18211: PUSH
18212: LD_VAR 0 4
18216: PUSH
18217: LD_INT 1
18219: ARRAY
18220: GREATEREQUAL
18221: PUSH
18222: LD_VAR 0 5
18226: PPUSH
18227: LD_INT 2
18229: PPUSH
18230: CALL_OW 275
18234: PUSH
18235: LD_VAR 0 4
18239: PUSH
18240: LD_INT 2
18242: ARRAY
18243: GREATEREQUAL
18244: AND
18245: PUSH
18246: LD_VAR 0 5
18250: PPUSH
18251: LD_INT 3
18253: PPUSH
18254: CALL_OW 275
18258: PUSH
18259: LD_VAR 0 4
18263: PUSH
18264: LD_INT 3
18266: ARRAY
18267: GREATEREQUAL
18268: AND
18269: ST_TO_ADDR
// end ;
18270: LD_VAR 0 3
18274: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18275: LD_INT 0
18277: PPUSH
18278: PPUSH
18279: PPUSH
18280: PPUSH
// pom := GetBase ( building ) ;
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 274
18295: ST_TO_ADDR
// if not pom then
18296: LD_VAR 0 3
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18475
// btype := GetBType ( building ) ;
18305: LD_ADDR_VAR 0 5
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 266
18319: ST_TO_ADDR
// if btype = b_armoury then
18320: LD_VAR 0 5
18324: PUSH
18325: LD_INT 4
18327: EQUAL
18328: IFFALSE 18338
// btype := b_barracks ;
18330: LD_ADDR_VAR 0 5
18334: PUSH
18335: LD_INT 5
18337: ST_TO_ADDR
// if btype = b_depot then
18338: LD_VAR 0 5
18342: PUSH
18343: LD_INT 0
18345: EQUAL
18346: IFFALSE 18356
// btype := b_warehouse ;
18348: LD_ADDR_VAR 0 5
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// if btype = b_workshop then
18356: LD_VAR 0 5
18360: PUSH
18361: LD_INT 2
18363: EQUAL
18364: IFFALSE 18374
// btype := b_factory ;
18366: LD_ADDR_VAR 0 5
18370: PUSH
18371: LD_INT 3
18373: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18374: LD_ADDR_VAR 0 4
18378: PUSH
18379: LD_VAR 0 5
18383: PPUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 248
18393: PPUSH
18394: CALL_OW 450
18398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: LD_VAR 0 3
18408: PPUSH
18409: LD_INT 1
18411: PPUSH
18412: CALL_OW 275
18416: PUSH
18417: LD_VAR 0 4
18421: PUSH
18422: LD_INT 1
18424: ARRAY
18425: GREATEREQUAL
18426: PUSH
18427: LD_VAR 0 3
18431: PPUSH
18432: LD_INT 2
18434: PPUSH
18435: CALL_OW 275
18439: PUSH
18440: LD_VAR 0 4
18444: PUSH
18445: LD_INT 2
18447: ARRAY
18448: GREATEREQUAL
18449: AND
18450: PUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: LD_INT 3
18458: PPUSH
18459: CALL_OW 275
18463: PUSH
18464: LD_VAR 0 4
18468: PUSH
18469: LD_INT 3
18471: ARRAY
18472: GREATEREQUAL
18473: AND
18474: ST_TO_ADDR
// end ;
18475: LD_VAR 0 2
18479: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// pom := GetBase ( building ) ;
18485: LD_ADDR_VAR 0 4
18489: PUSH
18490: LD_VAR 0 1
18494: PPUSH
18495: CALL_OW 274
18499: ST_TO_ADDR
// if not pom then
18500: LD_VAR 0 4
18504: NOT
18505: IFFALSE 18509
// exit ;
18507: GO 18610
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18509: LD_ADDR_VAR 0 5
18513: PUSH
18514: LD_VAR 0 2
18518: PPUSH
18519: LD_VAR 0 1
18523: PPUSH
18524: CALL_OW 248
18528: PPUSH
18529: CALL_OW 450
18533: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 4
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: CALL_OW 275
18551: PUSH
18552: LD_VAR 0 5
18556: PUSH
18557: LD_INT 1
18559: ARRAY
18560: GREATEREQUAL
18561: PUSH
18562: LD_VAR 0 4
18566: PPUSH
18567: LD_INT 2
18569: PPUSH
18570: CALL_OW 275
18574: PUSH
18575: LD_VAR 0 5
18579: PUSH
18580: LD_INT 2
18582: ARRAY
18583: GREATEREQUAL
18584: AND
18585: PUSH
18586: LD_VAR 0 4
18590: PPUSH
18591: LD_INT 3
18593: PPUSH
18594: CALL_OW 275
18598: PUSH
18599: LD_VAR 0 5
18603: PUSH
18604: LD_INT 3
18606: ARRAY
18607: GREATEREQUAL
18608: AND
18609: ST_TO_ADDR
// end ;
18610: LD_VAR 0 3
18614: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18615: LD_INT 0
18617: PPUSH
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
// result := false ;
18628: LD_ADDR_VAR 0 8
18632: PUSH
18633: LD_INT 0
18635: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18636: LD_VAR 0 5
18640: NOT
18641: PUSH
18642: LD_VAR 0 1
18646: NOT
18647: OR
18648: PUSH
18649: LD_VAR 0 2
18653: NOT
18654: OR
18655: PUSH
18656: LD_VAR 0 3
18660: NOT
18661: OR
18662: IFFALSE 18666
// exit ;
18664: GO 19480
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18666: LD_ADDR_VAR 0 14
18670: PUSH
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_VAR 0 2
18680: PPUSH
18681: LD_VAR 0 3
18685: PPUSH
18686: LD_VAR 0 4
18690: PPUSH
18691: LD_VAR 0 5
18695: PUSH
18696: LD_INT 1
18698: ARRAY
18699: PPUSH
18700: CALL_OW 248
18704: PPUSH
18705: LD_INT 0
18707: PPUSH
18708: CALL 20733 0 6
18712: ST_TO_ADDR
// if not hexes then
18713: LD_VAR 0 14
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 19480
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18722: LD_ADDR_VAR 0 17
18726: PUSH
18727: LD_VAR 0 5
18731: PPUSH
18732: LD_INT 22
18734: PUSH
18735: LD_VAR 0 13
18739: PPUSH
18740: CALL_OW 255
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 30
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PPUSH
18781: CALL_OW 72
18785: ST_TO_ADDR
// for i = 1 to hexes do
18786: LD_ADDR_VAR 0 9
18790: PUSH
18791: DOUBLE
18792: LD_INT 1
18794: DEC
18795: ST_TO_ADDR
18796: LD_VAR 0 14
18800: PUSH
18801: FOR_TO
18802: IFFALSE 19478
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18804: LD_ADDR_VAR 0 13
18808: PUSH
18809: LD_VAR 0 14
18813: PUSH
18814: LD_VAR 0 9
18818: ARRAY
18819: PUSH
18820: LD_INT 1
18822: ARRAY
18823: PPUSH
18824: LD_VAR 0 14
18828: PUSH
18829: LD_VAR 0 9
18833: ARRAY
18834: PUSH
18835: LD_INT 2
18837: ARRAY
18838: PPUSH
18839: CALL_OW 428
18843: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18844: LD_VAR 0 14
18848: PUSH
18849: LD_VAR 0 9
18853: ARRAY
18854: PUSH
18855: LD_INT 1
18857: ARRAY
18858: PPUSH
18859: LD_VAR 0 14
18863: PUSH
18864: LD_VAR 0 9
18868: ARRAY
18869: PUSH
18870: LD_INT 2
18872: ARRAY
18873: PPUSH
18874: CALL_OW 351
18878: PUSH
18879: LD_VAR 0 14
18883: PUSH
18884: LD_VAR 0 9
18888: ARRAY
18889: PUSH
18890: LD_INT 1
18892: ARRAY
18893: PPUSH
18894: LD_VAR 0 14
18898: PUSH
18899: LD_VAR 0 9
18903: ARRAY
18904: PUSH
18905: LD_INT 2
18907: ARRAY
18908: PPUSH
18909: CALL_OW 488
18913: NOT
18914: OR
18915: PUSH
18916: LD_VAR 0 13
18920: PPUSH
18921: CALL_OW 247
18925: PUSH
18926: LD_INT 3
18928: EQUAL
18929: OR
18930: IFFALSE 18936
// exit ;
18932: POP
18933: POP
18934: GO 19480
// if not tmp then
18936: LD_VAR 0 13
18940: NOT
18941: IFFALSE 18945
// continue ;
18943: GO 18801
// result := true ;
18945: LD_ADDR_VAR 0 8
18949: PUSH
18950: LD_INT 1
18952: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18953: LD_VAR 0 6
18957: PUSH
18958: LD_VAR 0 13
18962: PPUSH
18963: CALL_OW 247
18967: PUSH
18968: LD_INT 2
18970: EQUAL
18971: AND
18972: PUSH
18973: LD_VAR 0 13
18977: PPUSH
18978: CALL_OW 263
18982: PUSH
18983: LD_INT 1
18985: EQUAL
18986: AND
18987: IFFALSE 19151
// begin if IsDrivenBy ( tmp ) then
18989: LD_VAR 0 13
18993: PPUSH
18994: CALL_OW 311
18998: IFFALSE 19002
// continue ;
19000: GO 18801
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19002: LD_VAR 0 6
19006: PPUSH
19007: LD_INT 3
19009: PUSH
19010: LD_INT 60
19012: PUSH
19013: EMPTY
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: LD_INT 55
19025: PUSH
19026: EMPTY
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 72
19041: IFFALSE 19149
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
19043: LD_ADDR_VAR 0 18
19047: PUSH
19048: LD_VAR 0 6
19052: PPUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 60
19058: PUSH
19059: EMPTY
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 3
19068: PUSH
19069: LD_INT 55
19071: PUSH
19072: EMPTY
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PPUSH
19083: CALL_OW 72
19087: PUSH
19088: LD_INT 1
19090: ARRAY
19091: ST_TO_ADDR
// if IsInUnit ( driver ) then
19092: LD_VAR 0 18
19096: PPUSH
19097: CALL_OW 310
19101: IFFALSE 19112
// ComExit ( driver ) ;
19103: LD_VAR 0 18
19107: PPUSH
19108: CALL 44514 0 1
// AddComEnterUnit ( driver , tmp ) ;
19112: LD_VAR 0 18
19116: PPUSH
19117: LD_VAR 0 13
19121: PPUSH
19122: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
19126: LD_VAR 0 18
19130: PPUSH
19131: LD_VAR 0 7
19135: PPUSH
19136: CALL_OW 173
// AddComExitVehicle ( driver ) ;
19140: LD_VAR 0 18
19144: PPUSH
19145: CALL_OW 181
// end ; continue ;
19149: GO 18801
// end ; if not cleaners or not tmp in cleaners then
19151: LD_VAR 0 6
19155: NOT
19156: PUSH
19157: LD_VAR 0 13
19161: PUSH
19162: LD_VAR 0 6
19166: IN
19167: NOT
19168: OR
19169: IFFALSE 19476
// begin if dep then
19171: LD_VAR 0 17
19175: IFFALSE 19311
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
19177: LD_ADDR_VAR 0 16
19181: PUSH
19182: LD_VAR 0 17
19186: PUSH
19187: LD_INT 1
19189: ARRAY
19190: PPUSH
19191: CALL_OW 250
19195: PPUSH
19196: LD_VAR 0 17
19200: PUSH
19201: LD_INT 1
19203: ARRAY
19204: PPUSH
19205: CALL_OW 254
19209: PPUSH
19210: LD_INT 5
19212: PPUSH
19213: CALL_OW 272
19217: PUSH
19218: LD_VAR 0 17
19222: PUSH
19223: LD_INT 1
19225: ARRAY
19226: PPUSH
19227: CALL_OW 251
19231: PPUSH
19232: LD_VAR 0 17
19236: PUSH
19237: LD_INT 1
19239: ARRAY
19240: PPUSH
19241: CALL_OW 254
19245: PPUSH
19246: LD_INT 5
19248: PPUSH
19249: CALL_OW 273
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19258: LD_VAR 0 16
19262: PUSH
19263: LD_INT 1
19265: ARRAY
19266: PPUSH
19267: LD_VAR 0 16
19271: PUSH
19272: LD_INT 2
19274: ARRAY
19275: PPUSH
19276: CALL_OW 488
19280: IFFALSE 19311
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19282: LD_VAR 0 13
19286: PPUSH
19287: LD_VAR 0 16
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: LD_VAR 0 16
19300: PUSH
19301: LD_INT 2
19303: ARRAY
19304: PPUSH
19305: CALL_OW 111
// continue ;
19309: GO 18801
// end ; end ; r := GetDir ( tmp ) ;
19311: LD_ADDR_VAR 0 15
19315: PUSH
19316: LD_VAR 0 13
19320: PPUSH
19321: CALL_OW 254
19325: ST_TO_ADDR
// if r = 5 then
19326: LD_VAR 0 15
19330: PUSH
19331: LD_INT 5
19333: EQUAL
19334: IFFALSE 19344
// r := 0 ;
19336: LD_ADDR_VAR 0 15
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// for j = r to 5 do
19344: LD_ADDR_VAR 0 10
19348: PUSH
19349: DOUBLE
19350: LD_VAR 0 15
19354: DEC
19355: ST_TO_ADDR
19356: LD_INT 5
19358: PUSH
19359: FOR_TO
19360: IFFALSE 19474
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19362: LD_ADDR_VAR 0 11
19366: PUSH
19367: LD_VAR 0 13
19371: PPUSH
19372: CALL_OW 250
19376: PPUSH
19377: LD_VAR 0 10
19381: PPUSH
19382: LD_INT 2
19384: PPUSH
19385: CALL_OW 272
19389: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19390: LD_ADDR_VAR 0 12
19394: PUSH
19395: LD_VAR 0 13
19399: PPUSH
19400: CALL_OW 251
19404: PPUSH
19405: LD_VAR 0 10
19409: PPUSH
19410: LD_INT 2
19412: PPUSH
19413: CALL_OW 273
19417: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19418: LD_VAR 0 11
19422: PPUSH
19423: LD_VAR 0 12
19427: PPUSH
19428: CALL_OW 488
19432: PUSH
19433: LD_VAR 0 11
19437: PPUSH
19438: LD_VAR 0 12
19442: PPUSH
19443: CALL_OW 428
19447: NOT
19448: AND
19449: IFFALSE 19472
// begin ComMoveXY ( tmp , _x , _y ) ;
19451: LD_VAR 0 13
19455: PPUSH
19456: LD_VAR 0 11
19460: PPUSH
19461: LD_VAR 0 12
19465: PPUSH
19466: CALL_OW 111
// break ;
19470: GO 19474
// end ; end ;
19472: GO 19359
19474: POP
19475: POP
// end ; end ;
19476: GO 18801
19478: POP
19479: POP
// end ;
19480: LD_VAR 0 8
19484: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19485: LD_INT 0
19487: PPUSH
// result := true ;
19488: LD_ADDR_VAR 0 3
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19496: LD_VAR 0 2
19500: PUSH
19501: LD_INT 24
19503: DOUBLE
19504: EQUAL
19505: IFTRUE 19515
19507: LD_INT 33
19509: DOUBLE
19510: EQUAL
19511: IFTRUE 19515
19513: GO 19540
19515: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19516: LD_ADDR_VAR 0 3
19520: PUSH
19521: LD_INT 32
19523: PPUSH
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 321
19533: PUSH
19534: LD_INT 2
19536: EQUAL
19537: ST_TO_ADDR
19538: GO 19856
19540: LD_INT 20
19542: DOUBLE
19543: EQUAL
19544: IFTRUE 19548
19546: GO 19573
19548: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19549: LD_ADDR_VAR 0 3
19553: PUSH
19554: LD_INT 6
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 321
19566: PUSH
19567: LD_INT 2
19569: EQUAL
19570: ST_TO_ADDR
19571: GO 19856
19573: LD_INT 22
19575: DOUBLE
19576: EQUAL
19577: IFTRUE 19587
19579: LD_INT 36
19581: DOUBLE
19582: EQUAL
19583: IFTRUE 19587
19585: GO 19612
19587: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19588: LD_ADDR_VAR 0 3
19592: PUSH
19593: LD_INT 15
19595: PPUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 321
19605: PUSH
19606: LD_INT 2
19608: EQUAL
19609: ST_TO_ADDR
19610: GO 19856
19612: LD_INT 30
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19645
19620: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19621: LD_ADDR_VAR 0 3
19625: PUSH
19626: LD_INT 20
19628: PPUSH
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 321
19638: PUSH
19639: LD_INT 2
19641: EQUAL
19642: ST_TO_ADDR
19643: GO 19856
19645: LD_INT 28
19647: DOUBLE
19648: EQUAL
19649: IFTRUE 19659
19651: LD_INT 21
19653: DOUBLE
19654: EQUAL
19655: IFTRUE 19659
19657: GO 19684
19659: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19660: LD_ADDR_VAR 0 3
19664: PUSH
19665: LD_INT 21
19667: PPUSH
19668: LD_VAR 0 1
19672: PPUSH
19673: CALL_OW 321
19677: PUSH
19678: LD_INT 2
19680: EQUAL
19681: ST_TO_ADDR
19682: GO 19856
19684: LD_INT 16
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19717
19692: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19693: LD_ADDR_VAR 0 3
19697: PUSH
19698: LD_INT 84
19700: PPUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 321
19710: PUSH
19711: LD_INT 2
19713: EQUAL
19714: ST_TO_ADDR
19715: GO 19856
19717: LD_INT 19
19719: DOUBLE
19720: EQUAL
19721: IFTRUE 19731
19723: LD_INT 23
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 19756
19731: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19732: LD_ADDR_VAR 0 3
19736: PUSH
19737: LD_INT 83
19739: PPUSH
19740: LD_VAR 0 1
19744: PPUSH
19745: CALL_OW 321
19749: PUSH
19750: LD_INT 2
19752: EQUAL
19753: ST_TO_ADDR
19754: GO 19856
19756: LD_INT 17
19758: DOUBLE
19759: EQUAL
19760: IFTRUE 19764
19762: GO 19789
19764: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19765: LD_ADDR_VAR 0 3
19769: PUSH
19770: LD_INT 39
19772: PPUSH
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 321
19782: PUSH
19783: LD_INT 2
19785: EQUAL
19786: ST_TO_ADDR
19787: GO 19856
19789: LD_INT 18
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19822
19797: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_INT 40
19805: PPUSH
19806: LD_VAR 0 1
19810: PPUSH
19811: CALL_OW 321
19815: PUSH
19816: LD_INT 2
19818: EQUAL
19819: ST_TO_ADDR
19820: GO 19856
19822: LD_INT 27
19824: DOUBLE
19825: EQUAL
19826: IFTRUE 19830
19828: GO 19855
19830: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19831: LD_ADDR_VAR 0 3
19835: PUSH
19836: LD_INT 35
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 321
19848: PUSH
19849: LD_INT 2
19851: EQUAL
19852: ST_TO_ADDR
19853: GO 19856
19855: POP
// end ;
19856: LD_VAR 0 3
19860: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19861: LD_INT 0
19863: PPUSH
19864: PPUSH
19865: PPUSH
19866: PPUSH
19867: PPUSH
19868: PPUSH
19869: PPUSH
19870: PPUSH
19871: PPUSH
19872: PPUSH
19873: PPUSH
// result := false ;
19874: LD_ADDR_VAR 0 6
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
// if btype = b_depot then
19882: LD_VAR 0 2
19886: PUSH
19887: LD_INT 0
19889: EQUAL
19890: IFFALSE 19902
// begin result := true ;
19892: LD_ADDR_VAR 0 6
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// exit ;
19900: GO 20728
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19902: LD_VAR 0 1
19906: NOT
19907: PUSH
19908: LD_VAR 0 1
19912: PPUSH
19913: CALL_OW 266
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: LD_INT 1
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: IN
19928: NOT
19929: OR
19930: PUSH
19931: LD_VAR 0 2
19935: NOT
19936: OR
19937: PUSH
19938: LD_VAR 0 5
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 3
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: IN
19969: NOT
19970: OR
19971: PUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: LD_VAR 0 4
19981: PPUSH
19982: CALL_OW 488
19986: NOT
19987: OR
19988: IFFALSE 19992
// exit ;
19990: GO 20728
// side := GetSide ( depot ) ;
19992: LD_ADDR_VAR 0 9
19996: PUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 255
20006: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20007: LD_VAR 0 9
20011: PPUSH
20012: LD_VAR 0 2
20016: PPUSH
20017: CALL 19485 0 2
20021: NOT
20022: IFFALSE 20026
// exit ;
20024: GO 20728
// pom := GetBase ( depot ) ;
20026: LD_ADDR_VAR 0 10
20030: PUSH
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 274
20040: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20041: LD_ADDR_VAR 0 11
20045: PUSH
20046: LD_VAR 0 2
20050: PPUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: CALL_OW 248
20060: PPUSH
20061: CALL_OW 450
20065: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20066: LD_VAR 0 10
20070: PPUSH
20071: LD_INT 1
20073: PPUSH
20074: CALL_OW 275
20078: PUSH
20079: LD_VAR 0 11
20083: PUSH
20084: LD_INT 1
20086: ARRAY
20087: GREATEREQUAL
20088: PUSH
20089: LD_VAR 0 10
20093: PPUSH
20094: LD_INT 2
20096: PPUSH
20097: CALL_OW 275
20101: PUSH
20102: LD_VAR 0 11
20106: PUSH
20107: LD_INT 2
20109: ARRAY
20110: GREATEREQUAL
20111: AND
20112: PUSH
20113: LD_VAR 0 10
20117: PPUSH
20118: LD_INT 3
20120: PPUSH
20121: CALL_OW 275
20125: PUSH
20126: LD_VAR 0 11
20130: PUSH
20131: LD_INT 3
20133: ARRAY
20134: GREATEREQUAL
20135: AND
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20728
// if GetBType ( depot ) = b_depot then
20141: LD_VAR 0 1
20145: PPUSH
20146: CALL_OW 266
20150: PUSH
20151: LD_INT 0
20153: EQUAL
20154: IFFALSE 20166
// dist := 28 else
20156: LD_ADDR_VAR 0 14
20160: PUSH
20161: LD_INT 28
20163: ST_TO_ADDR
20164: GO 20174
// dist := 36 ;
20166: LD_ADDR_VAR 0 14
20170: PUSH
20171: LD_INT 36
20173: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20174: LD_VAR 0 1
20178: PPUSH
20179: LD_VAR 0 3
20183: PPUSH
20184: LD_VAR 0 4
20188: PPUSH
20189: CALL_OW 297
20193: PUSH
20194: LD_VAR 0 14
20198: GREATER
20199: IFFALSE 20203
// exit ;
20201: GO 20728
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20203: LD_ADDR_VAR 0 12
20207: PUSH
20208: LD_VAR 0 2
20212: PPUSH
20213: LD_VAR 0 3
20217: PPUSH
20218: LD_VAR 0 4
20222: PPUSH
20223: LD_VAR 0 5
20227: PPUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 248
20237: PPUSH
20238: LD_INT 0
20240: PPUSH
20241: CALL 20733 0 6
20245: ST_TO_ADDR
// if not hexes then
20246: LD_VAR 0 12
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20728
// hex := GetHexInfo ( x , y ) ;
20255: LD_ADDR_VAR 0 15
20259: PUSH
20260: LD_VAR 0 3
20264: PPUSH
20265: LD_VAR 0 4
20269: PPUSH
20270: CALL_OW 546
20274: ST_TO_ADDR
// if hex [ 1 ] then
20275: LD_VAR 0 15
20279: PUSH
20280: LD_INT 1
20282: ARRAY
20283: IFFALSE 20287
// exit ;
20285: GO 20728
// height := hex [ 2 ] ;
20287: LD_ADDR_VAR 0 13
20291: PUSH
20292: LD_VAR 0 15
20296: PUSH
20297: LD_INT 2
20299: ARRAY
20300: ST_TO_ADDR
// for i = 1 to hexes do
20301: LD_ADDR_VAR 0 7
20305: PUSH
20306: DOUBLE
20307: LD_INT 1
20309: DEC
20310: ST_TO_ADDR
20311: LD_VAR 0 12
20315: PUSH
20316: FOR_TO
20317: IFFALSE 20647
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20319: LD_VAR 0 12
20323: PUSH
20324: LD_VAR 0 7
20328: ARRAY
20329: PUSH
20330: LD_INT 1
20332: ARRAY
20333: PPUSH
20334: LD_VAR 0 12
20338: PUSH
20339: LD_VAR 0 7
20343: ARRAY
20344: PUSH
20345: LD_INT 2
20347: ARRAY
20348: PPUSH
20349: CALL_OW 488
20353: NOT
20354: PUSH
20355: LD_VAR 0 12
20359: PUSH
20360: LD_VAR 0 7
20364: ARRAY
20365: PUSH
20366: LD_INT 1
20368: ARRAY
20369: PPUSH
20370: LD_VAR 0 12
20374: PUSH
20375: LD_VAR 0 7
20379: ARRAY
20380: PUSH
20381: LD_INT 2
20383: ARRAY
20384: PPUSH
20385: CALL_OW 428
20389: PUSH
20390: LD_INT 0
20392: GREATER
20393: OR
20394: PUSH
20395: LD_VAR 0 12
20399: PUSH
20400: LD_VAR 0 7
20404: ARRAY
20405: PUSH
20406: LD_INT 1
20408: ARRAY
20409: PPUSH
20410: LD_VAR 0 12
20414: PUSH
20415: LD_VAR 0 7
20419: ARRAY
20420: PUSH
20421: LD_INT 2
20423: ARRAY
20424: PPUSH
20425: CALL_OW 351
20429: OR
20430: IFFALSE 20436
// exit ;
20432: POP
20433: POP
20434: GO 20728
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20436: LD_ADDR_VAR 0 8
20440: PUSH
20441: LD_VAR 0 12
20445: PUSH
20446: LD_VAR 0 7
20450: ARRAY
20451: PUSH
20452: LD_INT 1
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 12
20460: PUSH
20461: LD_VAR 0 7
20465: ARRAY
20466: PUSH
20467: LD_INT 2
20469: ARRAY
20470: PPUSH
20471: CALL_OW 546
20475: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20476: LD_VAR 0 8
20480: PUSH
20481: LD_INT 1
20483: ARRAY
20484: PUSH
20485: LD_VAR 0 8
20489: PUSH
20490: LD_INT 2
20492: ARRAY
20493: PUSH
20494: LD_VAR 0 13
20498: PUSH
20499: LD_INT 2
20501: PLUS
20502: GREATER
20503: OR
20504: PUSH
20505: LD_VAR 0 8
20509: PUSH
20510: LD_INT 2
20512: ARRAY
20513: PUSH
20514: LD_VAR 0 13
20518: PUSH
20519: LD_INT 2
20521: MINUS
20522: LESS
20523: OR
20524: PUSH
20525: LD_VAR 0 8
20529: PUSH
20530: LD_INT 3
20532: ARRAY
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: LD_INT 8
20539: PUSH
20540: LD_INT 9
20542: PUSH
20543: LD_INT 10
20545: PUSH
20546: LD_INT 11
20548: PUSH
20549: LD_INT 12
20551: PUSH
20552: LD_INT 13
20554: PUSH
20555: LD_INT 16
20557: PUSH
20558: LD_INT 17
20560: PUSH
20561: LD_INT 18
20563: PUSH
20564: LD_INT 19
20566: PUSH
20567: LD_INT 20
20569: PUSH
20570: LD_INT 21
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: IN
20588: NOT
20589: OR
20590: PUSH
20591: LD_VAR 0 8
20595: PUSH
20596: LD_INT 5
20598: ARRAY
20599: NOT
20600: OR
20601: PUSH
20602: LD_VAR 0 8
20606: PUSH
20607: LD_INT 6
20609: ARRAY
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: LD_INT 7
20619: PUSH
20620: LD_INT 9
20622: PUSH
20623: LD_INT 10
20625: PUSH
20626: LD_INT 11
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: IN
20637: NOT
20638: OR
20639: IFFALSE 20645
// exit ;
20641: POP
20642: POP
20643: GO 20728
// end ;
20645: GO 20316
20647: POP
20648: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20649: LD_VAR 0 9
20653: PPUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_INT 20
20666: PPUSH
20667: CALL 12651 0 4
20671: PUSH
20672: LD_INT 4
20674: ARRAY
20675: IFFALSE 20679
// exit ;
20677: GO 20728
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20679: LD_VAR 0 2
20683: PUSH
20684: LD_INT 29
20686: PUSH
20687: LD_INT 30
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: IN
20694: PUSH
20695: LD_VAR 0 3
20699: PPUSH
20700: LD_VAR 0 4
20704: PPUSH
20705: LD_VAR 0 9
20709: PPUSH
20710: CALL_OW 440
20714: NOT
20715: AND
20716: IFFALSE 20720
// exit ;
20718: GO 20728
// result := true ;
20720: LD_ADDR_VAR 0 6
20724: PUSH
20725: LD_INT 1
20727: ST_TO_ADDR
// end ;
20728: LD_VAR 0 6
20732: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20733: LD_INT 0
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
20742: PPUSH
20743: PPUSH
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
20748: PPUSH
20749: PPUSH
20750: PPUSH
20751: PPUSH
20752: PPUSH
20753: PPUSH
20754: PPUSH
20755: PPUSH
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
20760: PPUSH
20761: PPUSH
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
20778: PPUSH
20779: PPUSH
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
20792: PPUSH
// result = [ ] ;
20793: LD_ADDR_VAR 0 7
20797: PUSH
20798: EMPTY
20799: ST_TO_ADDR
// temp_list = [ ] ;
20800: LD_ADDR_VAR 0 9
20804: PUSH
20805: EMPTY
20806: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20807: LD_VAR 0 4
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 4
20826: PUSH
20827: LD_INT 5
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: IN
20838: NOT
20839: PUSH
20840: LD_VAR 0 1
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 1
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: IN
20855: PUSH
20856: LD_VAR 0 5
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 3
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: IN
20875: NOT
20876: AND
20877: OR
20878: IFFALSE 20882
// exit ;
20880: GO 39273
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20882: LD_VAR 0 1
20886: PUSH
20887: LD_INT 6
20889: PUSH
20890: LD_INT 7
20892: PUSH
20893: LD_INT 8
20895: PUSH
20896: LD_INT 13
20898: PUSH
20899: LD_INT 12
20901: PUSH
20902: LD_INT 15
20904: PUSH
20905: LD_INT 11
20907: PUSH
20908: LD_INT 14
20910: PUSH
20911: LD_INT 10
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: IN
20925: IFFALSE 20935
// btype = b_lab ;
20927: LD_ADDR_VAR 0 1
20931: PUSH
20932: LD_INT 6
20934: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20935: LD_VAR 0 6
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: LIST
20953: IN
20954: NOT
20955: PUSH
20956: LD_VAR 0 1
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: LD_INT 6
20975: PUSH
20976: LD_INT 36
20978: PUSH
20979: LD_INT 4
20981: PUSH
20982: LD_INT 5
20984: PUSH
20985: LD_INT 31
20987: PUSH
20988: LD_INT 32
20990: PUSH
20991: LD_INT 33
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: IN
21007: NOT
21008: PUSH
21009: LD_VAR 0 6
21013: PUSH
21014: LD_INT 1
21016: EQUAL
21017: AND
21018: OR
21019: PUSH
21020: LD_VAR 0 1
21024: PUSH
21025: LD_INT 2
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: IN
21035: NOT
21036: PUSH
21037: LD_VAR 0 6
21041: PUSH
21042: LD_INT 2
21044: EQUAL
21045: AND
21046: OR
21047: IFFALSE 21057
// mode = 0 ;
21049: LD_ADDR_VAR 0 6
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// case mode of 0 :
21057: LD_VAR 0 6
21061: PUSH
21062: LD_INT 0
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 32523
21070: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21071: LD_ADDR_VAR 0 11
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 2
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 2
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 3
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21264: LD_ADDR_VAR 0 12
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: LD_INT 1
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 0
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: NEG
21388: PUSH
21389: LD_INT 0
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: LD_INT 1
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 2
21410: NEG
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 3
21421: NEG
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 3
21432: NEG
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21460: LD_ADDR_VAR 0 13
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 0
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 2
21583: NEG
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: LD_INT 3
21611: NEG
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 3
21619: NEG
21620: PUSH
21621: LD_INT 2
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 3
21631: NEG
21632: PUSH
21633: LD_INT 3
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21659: LD_ADDR_VAR 0 14
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: LD_INT 2
21755: NEG
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 2
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: LD_INT 3
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 3
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 2
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21855: LD_ADDR_VAR 0 15
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 1
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 2
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 3
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 3
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22048: LD_ADDR_VAR 0 16
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: NEG
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: LD_INT 2
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 3
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 3
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: LD_INT 3
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22241: LD_ADDR_VAR 0 17
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 0
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 2
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: LD_INT 2
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: LD_INT 1
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: LD_INT 0
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 2
22417: NEG
22418: PUSH
22419: LD_INT 0
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: NEG
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 2
22440: NEG
22441: PUSH
22442: LD_INT 2
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22471: LD_ADDR_VAR 0 18
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22701: LD_ADDR_VAR 0 19
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 1
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: LD_INT 2
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 2
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 2
22877: NEG
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: NEG
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 2
22900: NEG
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22931: LD_ADDR_VAR 0 20
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: LD_INT 0
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 1
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: LD_INT 2
23027: NEG
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: LD_INT 1
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: LD_INT 2
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: NEG
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: LD_INT 2
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23161: LD_ADDR_VAR 0 21
23165: PUSH
23166: LD_INT 0
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 1
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: NEG
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 2
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: LD_INT 2
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: NEG
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: NEG
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23391: LD_ADDR_VAR 0 22
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: LD_INT 2
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: NEG
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23621: LD_ADDR_VAR 0 23
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: LD_INT 2
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 2
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: LD_INT 2
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: NEG
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: LD_INT 2
23824: NEG
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: NEG
23833: PUSH
23834: LD_INT 3
23836: NEG
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 3
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 2
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23901: LD_ADDR_VAR 0 24
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 2
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 2
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 1
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: LD_INT 2
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: NEG
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 3
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 3
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
24177: LD_ADDR_VAR 0 25
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: NEG
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 3
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 3
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 3
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 3
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24451: LD_ADDR_VAR 0 26
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 2
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: NEG
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 3
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 3
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24727: LD_ADDR_VAR 0 27
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 3
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 3
24972: NEG
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25007: LD_ADDR_VAR 0 28
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 2
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 2
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 1
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: LD_INT 2
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: NEG
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: LD_INT 3
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: LD_INT 3
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 3
25242: NEG
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 3
25254: NEG
25255: PUSH
25256: LD_INT 2
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25289: LD_ADDR_VAR 0 29
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: LD_INT 2
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: LD_INT 3
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 3
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 3
25533: NEG
25534: PUSH
25535: LD_INT 2
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25568: LD_ADDR_VAR 0 30
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: LD_INT 2
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 3
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: LD_INT 3
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 3
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25846: LD_ADDR_VAR 0 31
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 2
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: NEG
26036: PUSH
26037: LD_INT 3
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 3
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 3
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26124: LD_ADDR_VAR 0 32
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 2
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: LD_INT 3
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 3
26336: PUSH
26337: LD_INT 2
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 2
26356: NEG
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 3
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26402: LD_ADDR_VAR 0 33
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: LD_INT 3
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 3
26646: NEG
26647: PUSH
26648: LD_INT 2
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26681: LD_ADDR_VAR 0 34
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: LD_INT 2
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: NEG
26861: PUSH
26862: LD_INT 2
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 3
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: LD_INT 2
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 3
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: NEG
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 3
26926: NEG
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26961: LD_ADDR_VAR 0 35
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27073: LD_ADDR_VAR 0 36
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27185: LD_ADDR_VAR 0 37
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27297: LD_ADDR_VAR 0 38
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27409: LD_ADDR_VAR 0 39
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27521: LD_ADDR_VAR 0 40
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: LD_INT 1
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27633: LD_ADDR_VAR 0 41
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 2
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 2
27788: NEG
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: NEG
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 3
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: NEG
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 3
27918: NEG
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 3
27930: NEG
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 3
27942: NEG
27943: PUSH
27944: LD_INT 3
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27983: LD_ADDR_VAR 0 42
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 2
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: NEG
28162: PUSH
28163: LD_INT 2
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: LD_INT 3
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 3
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: LD_INT 3
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 3
28280: NEG
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 3
28292: NEG
28293: PUSH
28294: LD_INT 3
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28333: LD_ADDR_VAR 0 43
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: NEG
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 3
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 3
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 3
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 3
28629: NEG
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 3
28640: NEG
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28681: LD_ADDR_VAR 0 44
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: LD_INT 2
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 2
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: NEG
28872: PUSH
28873: LD_INT 3
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 3
28924: PUSH
28925: LD_INT 3
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 2
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 3
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 3
28978: NEG
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 3
28990: NEG
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29031: LD_ADDR_VAR 0 45
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: LD_INT 2
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 2
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: LD_INT 1
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: NEG
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 2
29221: NEG
29222: PUSH
29223: LD_INT 3
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 3
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 3
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 3
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 3
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: LD_INT 3
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: LD_INT 3
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29381: LD_ADDR_VAR 0 46
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: NEG
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 3
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 3
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: LD_INT 2
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: NEG
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 3
29677: NEG
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 3
29688: NEG
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29729: LD_ADDR_VAR 0 47
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: NEG
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29880: LD_ADDR_VAR 0 48
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30027: LD_ADDR_VAR 0 49
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30171: LD_ADDR_VAR 0 50
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: NEG
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30315: LD_ADDR_VAR 0 51
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: LD_INT 0
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30462: LD_ADDR_VAR 0 52
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: LD_INT 2
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 2
30577: NEG
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 2
30589: NEG
30590: PUSH
30591: LD_INT 2
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30613: LD_ADDR_VAR 0 53
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 2
30800: NEG
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: NEG
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30843: LD_ADDR_VAR 0 54
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 2
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31073: LD_ADDR_VAR 0 55
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31303: LD_ADDR_VAR 0 56
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 2
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 2
31479: NEG
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: NEG
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31533: LD_ADDR_VAR 0 57
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: NEG
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31763: LD_ADDR_VAR 0 58
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 2
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31993: LD_ADDR_VAR 0 59
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32081: LD_ADDR_VAR 0 60
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32169: LD_ADDR_VAR 0 61
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32257: LD_ADDR_VAR 0 62
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32345: LD_ADDR_VAR 0 63
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32433: LD_ADDR_VAR 0 64
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: ST_TO_ADDR
// end ; 1 :
32521: GO 38418
32523: LD_INT 1
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 35154
32531: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32532: LD_ADDR_VAR 0 11
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 3
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: LD_INT 3
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: LIST
32575: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32576: LD_ADDR_VAR 0 12
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: LIST
32616: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32617: LD_ADDR_VAR 0 13
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: LD_INT 3
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32657: LD_ADDR_VAR 0 14
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32698: LD_ADDR_VAR 0 15
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32742: LD_ADDR_VAR 0 16
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: NEG
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32788: LD_ADDR_VAR 0 17
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: LD_INT 3
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32832: LD_ADDR_VAR 0 18
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32873: LD_ADDR_VAR 0 19
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 3
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32913: LD_ADDR_VAR 0 20
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 3
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32954: LD_ADDR_VAR 0 21
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 3
32972: NEG
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: LIST
32997: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32998: LD_ADDR_VAR 0 22
33002: PUSH
33003: LD_INT 2
33005: NEG
33006: PUSH
33007: LD_INT 3
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 3
33017: NEG
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: NEG
33030: PUSH
33031: LD_INT 3
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33044: LD_ADDR_VAR 0 23
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: LD_INT 4
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33088: LD_ADDR_VAR 0 24
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 4
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33129: LD_ADDR_VAR 0 25
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 4
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: LD_INT 4
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
33169: LD_ADDR_VAR 0 26
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 4
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33210: LD_ADDR_VAR 0 27
33214: PUSH
33215: LD_INT 3
33217: NEG
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: NEG
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33254: LD_ADDR_VAR 0 28
33258: PUSH
33259: LD_INT 3
33261: NEG
33262: PUSH
33263: LD_INT 3
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: NEG
33274: PUSH
33275: LD_INT 4
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 3
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: LIST
33299: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33300: LD_ADDR_VAR 0 29
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 4
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 4
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 3
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: LD_INT 5
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 5
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 6
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 6
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 5
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33455: LD_ADDR_VAR 0 30
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 4
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 4
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 5
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 5
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 5
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 6
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 6
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33598: LD_ADDR_VAR 0 31
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 4
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: LD_INT 4
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 5
33675: PUSH
33676: LD_INT 5
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 5
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 6
33695: PUSH
33696: LD_INT 5
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 6
33705: PUSH
33706: LD_INT 6
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 5
33715: PUSH
33716: LD_INT 6
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33737: LD_ADDR_VAR 0 32
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 4
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 4
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: LD_INT 5
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 4
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 6
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 6
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33880: LD_ADDR_VAR 0 33
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 3
33898: NEG
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 4
33932: NEG
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 4
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 5
33966: NEG
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 5
33977: NEG
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 5
33989: NEG
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 6
34000: NEG
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 6
34011: NEG
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34035: LD_ADDR_VAR 0 34
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 3
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 3
34054: NEG
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 3
34066: NEG
34067: PUSH
34068: LD_INT 3
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: LD_INT 4
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 4
34090: NEG
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 4
34102: NEG
34103: PUSH
34104: LD_INT 4
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 4
34114: NEG
34115: PUSH
34116: LD_INT 5
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 5
34126: NEG
34127: PUSH
34128: LD_INT 4
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 5
34138: NEG
34139: PUSH
34140: LD_INT 5
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 5
34150: NEG
34151: PUSH
34152: LD_INT 6
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 6
34162: NEG
34163: PUSH
34164: LD_INT 5
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 6
34174: NEG
34175: PUSH
34176: LD_INT 6
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34198: LD_ADDR_VAR 0 41
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: LD_INT 3
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34242: LD_ADDR_VAR 0 42
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34283: LD_ADDR_VAR 0 43
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34323: LD_ADDR_VAR 0 44
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 3
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34364: LD_ADDR_VAR 0 45
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34408: LD_ADDR_VAR 0 46
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34454: LD_ADDR_VAR 0 47
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 3
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 3
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34487: LD_ADDR_VAR 0 48
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34518: LD_ADDR_VAR 0 49
34522: PUSH
34523: LD_INT 3
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34547: LD_ADDR_VAR 0 50
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34576: LD_ADDR_VAR 0 51
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34607: LD_ADDR_VAR 0 52
34611: PUSH
34612: LD_INT 3
34614: NEG
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34640: LD_ADDR_VAR 0 53
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 3
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 3
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 2
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34684: LD_ADDR_VAR 0 54
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34725: LD_ADDR_VAR 0 55
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 3
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 3
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34765: LD_ADDR_VAR 0 56
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 3
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34806: LD_ADDR_VAR 0 57
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 3
34835: NEG
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34850: LD_ADDR_VAR 0 58
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: LD_INT 3
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 3
34869: NEG
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 3
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34896: LD_ADDR_VAR 0 59
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34940: LD_ADDR_VAR 0 60
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34981: LD_ADDR_VAR 0 61
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35021: LD_ADDR_VAR 0 62
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35062: LD_ADDR_VAR 0 63
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: NEG
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35106: LD_ADDR_VAR 0 64
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
// end ; 2 :
35152: GO 38418
35154: LD_INT 2
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 38417
35162: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35163: LD_ADDR_VAR 0 29
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 4
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 5
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 4
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 3
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 5
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: LD_INT 3
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 4
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 4
35293: PUSH
35294: LD_INT 4
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: LD_INT 4
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 4
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: LD_INT 4
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 4
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 4
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 5
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: LD_INT 4
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 3
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: LD_INT 5
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: LD_INT 3
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 3
35446: NEG
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 3
35457: NEG
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: NEG
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 3
35491: NEG
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 4
35502: NEG
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 4
35513: NEG
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 4
35525: NEG
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 4
35548: NEG
35549: PUSH
35550: LD_INT 4
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 4
35560: NEG
35561: PUSH
35562: LD_INT 5
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 3
35572: NEG
35573: PUSH
35574: LD_INT 4
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: LD_INT 3
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 4
35596: NEG
35597: PUSH
35598: LD_INT 3
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 5
35608: NEG
35609: PUSH
35610: LD_INT 4
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 5
35620: NEG
35621: PUSH
35622: LD_INT 5
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 3
35632: NEG
35633: PUSH
35634: LD_INT 5
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 5
35644: NEG
35645: PUSH
35646: LD_INT 3
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35701: LD_ADDR_VAR 0 30
35705: PUSH
35706: LD_INT 4
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 4
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 5
35728: PUSH
35729: LD_INT 4
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 5
35738: PUSH
35739: LD_INT 5
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 4
35748: PUSH
35749: LD_INT 5
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 3
35758: PUSH
35759: LD_INT 4
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 3
35768: PUSH
35769: LD_INT 3
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 5
35778: PUSH
35779: LD_INT 3
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 3
35788: PUSH
35789: LD_INT 5
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 3
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: LD_INT 4
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 4
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 4
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 4
35891: NEG
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 4
35902: NEG
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 3
35914: NEG
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 3
35925: NEG
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 4
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 5
35947: NEG
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 5
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 5
35970: NEG
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 3
35993: NEG
35994: PUSH
35995: LD_INT 3
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 3
36005: NEG
36006: PUSH
36007: LD_INT 4
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: LD_INT 3
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 3
36041: NEG
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 4
36053: NEG
36054: PUSH
36055: LD_INT 3
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 4
36065: NEG
36066: PUSH
36067: LD_INT 4
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 2
36077: NEG
36078: PUSH
36079: LD_INT 4
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 4
36089: NEG
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 4
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 5
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 4
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 3
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 3
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 4
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 5
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 3
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 5
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36248: LD_ADDR_VAR 0 31
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 4
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: LD_INT 4
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 5
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 5
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: LD_INT 4
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 5
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: NEG
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 3
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 3
36393: NEG
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 4
36404: NEG
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 4
36415: NEG
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 4
36427: NEG
36428: PUSH
36429: LD_INT 2
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 4
36450: NEG
36451: PUSH
36452: LD_INT 4
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 4
36462: NEG
36463: PUSH
36464: LD_INT 5
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 3
36474: NEG
36475: PUSH
36476: LD_INT 4
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 3
36486: NEG
36487: PUSH
36488: LD_INT 3
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 4
36498: NEG
36499: PUSH
36500: LD_INT 3
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 5
36510: NEG
36511: PUSH
36512: LD_INT 4
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 5
36522: NEG
36523: PUSH
36524: LD_INT 5
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 3
36534: NEG
36535: PUSH
36536: LD_INT 5
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 5
36546: NEG
36547: PUSH
36548: LD_INT 3
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 3
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 4
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 3
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 2
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 3
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 4
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: LD_INT 4
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 4
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 4
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 5
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 5
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 4
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 3
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 5
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36798: LD_ADDR_VAR 0 32
36802: PUSH
36803: LD_INT 4
36805: NEG
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 4
36816: NEG
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 3
36828: NEG
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 3
36839: NEG
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 4
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 5
36861: NEG
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 5
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 5
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 3
36907: NEG
36908: PUSH
36909: LD_INT 3
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 3
36919: NEG
36920: PUSH
36921: LD_INT 4
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: LD_INT 3
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: NEG
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 4
36967: NEG
36968: PUSH
36969: LD_INT 3
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 4
36979: NEG
36980: PUSH
36981: LD_INT 4
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 4
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 4
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 4
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 5
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 4
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 3
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: LD_INT 4
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: LD_INT 5
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: LD_INT 5
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 3
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 3
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 4
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 4
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 3
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 4
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 4
37210: PUSH
37211: LD_INT 4
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 4
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 5
37230: PUSH
37231: LD_INT 4
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 5
37240: PUSH
37241: LD_INT 5
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 4
37250: PUSH
37251: LD_INT 5
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: LD_INT 4
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 3
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 5
37280: PUSH
37281: LD_INT 3
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: LD_INT 5
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37345: LD_ADDR_VAR 0 33
37349: PUSH
37350: LD_INT 4
37352: NEG
37353: PUSH
37354: LD_INT 4
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 4
37364: NEG
37365: PUSH
37366: LD_INT 5
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 3
37376: NEG
37377: PUSH
37378: LD_INT 4
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 3
37388: NEG
37389: PUSH
37390: LD_INT 3
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 4
37400: NEG
37401: PUSH
37402: LD_INT 3
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 5
37412: NEG
37413: PUSH
37414: LD_INT 4
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 5
37424: NEG
37425: PUSH
37426: LD_INT 5
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: LD_INT 5
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 5
37448: NEG
37449: PUSH
37450: LD_INT 3
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 3
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 4
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 3
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 3
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 4
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 4
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 4
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 5
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 5
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 4
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 3
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 3
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 5
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 3
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 3
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: LD_INT 3
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 4
37685: PUSH
37686: LD_INT 4
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 4
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 4
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 4
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 4
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 3
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 4
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 5
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 5
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 4
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: LD_INT 5
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37883: LD_ADDR_VAR 0 34
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 4
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 5
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 4
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 4
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: LD_INT 5
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 3
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: LD_INT 5
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 4
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 4
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 3
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 4
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: LD_INT 4
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 4
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 5
38105: PUSH
38106: LD_INT 4
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 5
38115: PUSH
38116: LD_INT 5
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 4
38125: PUSH
38126: LD_INT 5
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 3
38135: PUSH
38136: LD_INT 4
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 3
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 5
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: LD_INT 5
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: LD_INT 3
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 4
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: LD_INT 4
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: LD_INT 4
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 4
38268: NEG
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 4
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 4
38313: NEG
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 5
38324: NEG
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 5
38335: NEG
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 5
38347: NEG
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 3
38359: NEG
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// end ; end ;
38415: GO 38418
38417: POP
// case btype of b_depot , b_warehouse :
38418: LD_VAR 0 1
38422: PUSH
38423: LD_INT 0
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38437
38429: LD_INT 1
38431: DOUBLE
38432: EQUAL
38433: IFTRUE 38437
38435: GO 38638
38437: POP
// case nation of nation_american :
38438: LD_VAR 0 5
38442: PUSH
38443: LD_INT 1
38445: DOUBLE
38446: EQUAL
38447: IFTRUE 38451
38449: GO 38507
38451: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38452: LD_ADDR_VAR 0 9
38456: PUSH
38457: LD_VAR 0 11
38461: PUSH
38462: LD_VAR 0 12
38466: PUSH
38467: LD_VAR 0 13
38471: PUSH
38472: LD_VAR 0 14
38476: PUSH
38477: LD_VAR 0 15
38481: PUSH
38482: LD_VAR 0 16
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: PUSH
38495: LD_VAR 0 4
38499: PUSH
38500: LD_INT 1
38502: PLUS
38503: ARRAY
38504: ST_TO_ADDR
38505: GO 38636
38507: LD_INT 2
38509: DOUBLE
38510: EQUAL
38511: IFTRUE 38515
38513: GO 38571
38515: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38516: LD_ADDR_VAR 0 9
38520: PUSH
38521: LD_VAR 0 17
38525: PUSH
38526: LD_VAR 0 18
38530: PUSH
38531: LD_VAR 0 19
38535: PUSH
38536: LD_VAR 0 20
38540: PUSH
38541: LD_VAR 0 21
38545: PUSH
38546: LD_VAR 0 22
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: PUSH
38559: LD_VAR 0 4
38563: PUSH
38564: LD_INT 1
38566: PLUS
38567: ARRAY
38568: ST_TO_ADDR
38569: GO 38636
38571: LD_INT 3
38573: DOUBLE
38574: EQUAL
38575: IFTRUE 38579
38577: GO 38635
38579: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38580: LD_ADDR_VAR 0 9
38584: PUSH
38585: LD_VAR 0 23
38589: PUSH
38590: LD_VAR 0 24
38594: PUSH
38595: LD_VAR 0 25
38599: PUSH
38600: LD_VAR 0 26
38604: PUSH
38605: LD_VAR 0 27
38609: PUSH
38610: LD_VAR 0 28
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: LD_VAR 0 4
38627: PUSH
38628: LD_INT 1
38630: PLUS
38631: ARRAY
38632: ST_TO_ADDR
38633: GO 38636
38635: POP
38636: GO 39191
38638: LD_INT 2
38640: DOUBLE
38641: EQUAL
38642: IFTRUE 38652
38644: LD_INT 3
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38708
38652: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38653: LD_ADDR_VAR 0 9
38657: PUSH
38658: LD_VAR 0 29
38662: PUSH
38663: LD_VAR 0 30
38667: PUSH
38668: LD_VAR 0 31
38672: PUSH
38673: LD_VAR 0 32
38677: PUSH
38678: LD_VAR 0 33
38682: PUSH
38683: LD_VAR 0 34
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: PUSH
38696: LD_VAR 0 4
38700: PUSH
38701: LD_INT 1
38703: PLUS
38704: ARRAY
38705: ST_TO_ADDR
38706: GO 39191
38708: LD_INT 16
38710: DOUBLE
38711: EQUAL
38712: IFTRUE 38770
38714: LD_INT 17
38716: DOUBLE
38717: EQUAL
38718: IFTRUE 38770
38720: LD_INT 18
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38770
38726: LD_INT 19
38728: DOUBLE
38729: EQUAL
38730: IFTRUE 38770
38732: LD_INT 22
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38770
38738: LD_INT 20
38740: DOUBLE
38741: EQUAL
38742: IFTRUE 38770
38744: LD_INT 21
38746: DOUBLE
38747: EQUAL
38748: IFTRUE 38770
38750: LD_INT 23
38752: DOUBLE
38753: EQUAL
38754: IFTRUE 38770
38756: LD_INT 24
38758: DOUBLE
38759: EQUAL
38760: IFTRUE 38770
38762: LD_INT 25
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38770
38768: GO 38826
38770: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38771: LD_ADDR_VAR 0 9
38775: PUSH
38776: LD_VAR 0 35
38780: PUSH
38781: LD_VAR 0 36
38785: PUSH
38786: LD_VAR 0 37
38790: PUSH
38791: LD_VAR 0 38
38795: PUSH
38796: LD_VAR 0 39
38800: PUSH
38801: LD_VAR 0 40
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: PUSH
38814: LD_VAR 0 4
38818: PUSH
38819: LD_INT 1
38821: PLUS
38822: ARRAY
38823: ST_TO_ADDR
38824: GO 39191
38826: LD_INT 6
38828: DOUBLE
38829: EQUAL
38830: IFTRUE 38882
38832: LD_INT 7
38834: DOUBLE
38835: EQUAL
38836: IFTRUE 38882
38838: LD_INT 8
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38882
38844: LD_INT 13
38846: DOUBLE
38847: EQUAL
38848: IFTRUE 38882
38850: LD_INT 12
38852: DOUBLE
38853: EQUAL
38854: IFTRUE 38882
38856: LD_INT 15
38858: DOUBLE
38859: EQUAL
38860: IFTRUE 38882
38862: LD_INT 11
38864: DOUBLE
38865: EQUAL
38866: IFTRUE 38882
38868: LD_INT 14
38870: DOUBLE
38871: EQUAL
38872: IFTRUE 38882
38874: LD_INT 10
38876: DOUBLE
38877: EQUAL
38878: IFTRUE 38882
38880: GO 38938
38882: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38883: LD_ADDR_VAR 0 9
38887: PUSH
38888: LD_VAR 0 41
38892: PUSH
38893: LD_VAR 0 42
38897: PUSH
38898: LD_VAR 0 43
38902: PUSH
38903: LD_VAR 0 44
38907: PUSH
38908: LD_VAR 0 45
38912: PUSH
38913: LD_VAR 0 46
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: LD_VAR 0 4
38930: PUSH
38931: LD_INT 1
38933: PLUS
38934: ARRAY
38935: ST_TO_ADDR
38936: GO 39191
38938: LD_INT 36
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 39002
38946: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38947: LD_ADDR_VAR 0 9
38951: PUSH
38952: LD_VAR 0 47
38956: PUSH
38957: LD_VAR 0 48
38961: PUSH
38962: LD_VAR 0 49
38966: PUSH
38967: LD_VAR 0 50
38971: PUSH
38972: LD_VAR 0 51
38976: PUSH
38977: LD_VAR 0 52
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: LD_VAR 0 4
38994: PUSH
38995: LD_INT 1
38997: PLUS
38998: ARRAY
38999: ST_TO_ADDR
39000: GO 39191
39002: LD_INT 4
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39028
39008: LD_INT 5
39010: DOUBLE
39011: EQUAL
39012: IFTRUE 39028
39014: LD_INT 34
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39028
39020: LD_INT 37
39022: DOUBLE
39023: EQUAL
39024: IFTRUE 39028
39026: GO 39084
39028: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_VAR 0 53
39038: PUSH
39039: LD_VAR 0 54
39043: PUSH
39044: LD_VAR 0 55
39048: PUSH
39049: LD_VAR 0 56
39053: PUSH
39054: LD_VAR 0 57
39058: PUSH
39059: LD_VAR 0 58
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: LD_VAR 0 4
39076: PUSH
39077: LD_INT 1
39079: PLUS
39080: ARRAY
39081: ST_TO_ADDR
39082: GO 39191
39084: LD_INT 31
39086: DOUBLE
39087: EQUAL
39088: IFTRUE 39134
39090: LD_INT 32
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39134
39096: LD_INT 33
39098: DOUBLE
39099: EQUAL
39100: IFTRUE 39134
39102: LD_INT 27
39104: DOUBLE
39105: EQUAL
39106: IFTRUE 39134
39108: LD_INT 26
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39134
39114: LD_INT 28
39116: DOUBLE
39117: EQUAL
39118: IFTRUE 39134
39120: LD_INT 29
39122: DOUBLE
39123: EQUAL
39124: IFTRUE 39134
39126: LD_INT 30
39128: DOUBLE
39129: EQUAL
39130: IFTRUE 39134
39132: GO 39190
39134: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39135: LD_ADDR_VAR 0 9
39139: PUSH
39140: LD_VAR 0 59
39144: PUSH
39145: LD_VAR 0 60
39149: PUSH
39150: LD_VAR 0 61
39154: PUSH
39155: LD_VAR 0 62
39159: PUSH
39160: LD_VAR 0 63
39164: PUSH
39165: LD_VAR 0 64
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: PUSH
39178: LD_VAR 0 4
39182: PUSH
39183: LD_INT 1
39185: PLUS
39186: ARRAY
39187: ST_TO_ADDR
39188: GO 39191
39190: POP
// temp_list2 = [ ] ;
39191: LD_ADDR_VAR 0 10
39195: PUSH
39196: EMPTY
39197: ST_TO_ADDR
// for i in temp_list do
39198: LD_ADDR_VAR 0 8
39202: PUSH
39203: LD_VAR 0 9
39207: PUSH
39208: FOR_IN
39209: IFFALSE 39261
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39211: LD_ADDR_VAR 0 10
39215: PUSH
39216: LD_VAR 0 10
39220: PUSH
39221: LD_VAR 0 8
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: PUSH
39230: LD_VAR 0 2
39234: PLUS
39235: PUSH
39236: LD_VAR 0 8
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: PUSH
39245: LD_VAR 0 3
39249: PLUS
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: ADD
39258: ST_TO_ADDR
39259: GO 39208
39261: POP
39262: POP
// result = temp_list2 ;
39263: LD_ADDR_VAR 0 7
39267: PUSH
39268: LD_VAR 0 10
39272: ST_TO_ADDR
// end ;
39273: LD_VAR 0 7
39277: RET
// export function EnemyInRange ( unit , dist ) ; begin
39278: LD_INT 0
39280: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: CALL_OW 255
39295: PPUSH
39296: LD_VAR 0 1
39300: PPUSH
39301: CALL_OW 250
39305: PPUSH
39306: LD_VAR 0 1
39310: PPUSH
39311: CALL_OW 251
39315: PPUSH
39316: LD_VAR 0 2
39320: PPUSH
39321: CALL 12651 0 4
39325: PUSH
39326: LD_INT 4
39328: ARRAY
39329: ST_TO_ADDR
// end ;
39330: LD_VAR 0 3
39334: RET
// export function PlayerSeeMe ( unit ) ; begin
39335: LD_INT 0
39337: PPUSH
// result := See ( your_side , unit ) ;
39338: LD_ADDR_VAR 0 2
39342: PUSH
39343: LD_OWVAR 2
39347: PPUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: CALL_OW 292
39357: ST_TO_ADDR
// end ;
39358: LD_VAR 0 2
39362: RET
// export function ReverseDir ( unit ) ; begin
39363: LD_INT 0
39365: PPUSH
// if not unit then
39366: LD_VAR 0 1
39370: NOT
39371: IFFALSE 39375
// exit ;
39373: GO 39398
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39375: LD_ADDR_VAR 0 2
39379: PUSH
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL_OW 254
39389: PUSH
39390: LD_INT 3
39392: PLUS
39393: PUSH
39394: LD_INT 6
39396: MOD
39397: ST_TO_ADDR
// end ;
39398: LD_VAR 0 2
39402: RET
// export function ReverseArray ( array ) ; var i ; begin
39403: LD_INT 0
39405: PPUSH
39406: PPUSH
// if not array then
39407: LD_VAR 0 1
39411: NOT
39412: IFFALSE 39416
// exit ;
39414: GO 39471
// result := [ ] ;
39416: LD_ADDR_VAR 0 2
39420: PUSH
39421: EMPTY
39422: ST_TO_ADDR
// for i := array downto 1 do
39423: LD_ADDR_VAR 0 3
39427: PUSH
39428: DOUBLE
39429: LD_VAR 0 1
39433: INC
39434: ST_TO_ADDR
39435: LD_INT 1
39437: PUSH
39438: FOR_DOWNTO
39439: IFFALSE 39469
// result := Join ( result , array [ i ] ) ;
39441: LD_ADDR_VAR 0 2
39445: PUSH
39446: LD_VAR 0 2
39450: PPUSH
39451: LD_VAR 0 1
39455: PUSH
39456: LD_VAR 0 3
39460: ARRAY
39461: PPUSH
39462: CALL 44116 0 2
39466: ST_TO_ADDR
39467: GO 39438
39469: POP
39470: POP
// end ;
39471: LD_VAR 0 2
39475: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39476: LD_INT 0
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
// if not unit or not hexes then
39484: LD_VAR 0 1
39488: NOT
39489: PUSH
39490: LD_VAR 0 2
39494: NOT
39495: OR
39496: IFFALSE 39500
// exit ;
39498: GO 39623
// dist := 9999 ;
39500: LD_ADDR_VAR 0 5
39504: PUSH
39505: LD_INT 9999
39507: ST_TO_ADDR
// for i = 1 to hexes do
39508: LD_ADDR_VAR 0 4
39512: PUSH
39513: DOUBLE
39514: LD_INT 1
39516: DEC
39517: ST_TO_ADDR
39518: LD_VAR 0 2
39522: PUSH
39523: FOR_TO
39524: IFFALSE 39611
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39526: LD_ADDR_VAR 0 6
39530: PUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: LD_VAR 0 2
39540: PUSH
39541: LD_VAR 0 4
39545: ARRAY
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: PPUSH
39551: LD_VAR 0 2
39555: PUSH
39556: LD_VAR 0 4
39560: ARRAY
39561: PUSH
39562: LD_INT 2
39564: ARRAY
39565: PPUSH
39566: CALL_OW 297
39570: ST_TO_ADDR
// if tdist < dist then
39571: LD_VAR 0 6
39575: PUSH
39576: LD_VAR 0 5
39580: LESS
39581: IFFALSE 39609
// begin hex := hexes [ i ] ;
39583: LD_ADDR_VAR 0 8
39587: PUSH
39588: LD_VAR 0 2
39592: PUSH
39593: LD_VAR 0 4
39597: ARRAY
39598: ST_TO_ADDR
// dist := tdist ;
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_VAR 0 6
39608: ST_TO_ADDR
// end ; end ;
39609: GO 39523
39611: POP
39612: POP
// result := hex ;
39613: LD_ADDR_VAR 0 3
39617: PUSH
39618: LD_VAR 0 8
39622: ST_TO_ADDR
// end ;
39623: LD_VAR 0 3
39627: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39628: LD_INT 0
39630: PPUSH
39631: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39632: LD_VAR 0 1
39636: NOT
39637: PUSH
39638: LD_VAR 0 1
39642: PUSH
39643: LD_INT 21
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 23
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PPUSH
39667: CALL_OW 69
39671: IN
39672: NOT
39673: OR
39674: IFFALSE 39678
// exit ;
39676: GO 39725
// for i = 1 to 3 do
39678: LD_ADDR_VAR 0 3
39682: PUSH
39683: DOUBLE
39684: LD_INT 1
39686: DEC
39687: ST_TO_ADDR
39688: LD_INT 3
39690: PUSH
39691: FOR_TO
39692: IFFALSE 39723
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 250
39703: PPUSH
39704: LD_VAR 0 1
39708: PPUSH
39709: CALL_OW 251
39713: PPUSH
39714: LD_INT 1
39716: PPUSH
39717: CALL_OW 453
39721: GO 39691
39723: POP
39724: POP
// end ;
39725: LD_VAR 0 2
39729: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39730: LD_INT 0
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
// if not unit or not enemy_unit then
39738: LD_VAR 0 1
39742: NOT
39743: PUSH
39744: LD_VAR 0 2
39748: NOT
39749: OR
39750: IFFALSE 39754
// exit ;
39752: GO 40221
// if GetLives ( i ) < 250 then
39754: LD_VAR 0 4
39758: PPUSH
39759: CALL_OW 256
39763: PUSH
39764: LD_INT 250
39766: LESS
39767: IFFALSE 39780
// begin ComAutodestruct ( i ) ;
39769: LD_VAR 0 4
39773: PPUSH
39774: CALL 39628 0 1
// exit ;
39778: GO 40221
// end ; x := GetX ( enemy_unit ) ;
39780: LD_ADDR_VAR 0 7
39784: PUSH
39785: LD_VAR 0 2
39789: PPUSH
39790: CALL_OW 250
39794: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39795: LD_ADDR_VAR 0 8
39799: PUSH
39800: LD_VAR 0 2
39804: PPUSH
39805: CALL_OW 251
39809: ST_TO_ADDR
// if not x or not y then
39810: LD_VAR 0 7
39814: NOT
39815: PUSH
39816: LD_VAR 0 8
39820: NOT
39821: OR
39822: IFFALSE 39826
// exit ;
39824: GO 40221
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39826: LD_ADDR_VAR 0 6
39830: PUSH
39831: LD_VAR 0 7
39835: PPUSH
39836: LD_INT 0
39838: PPUSH
39839: LD_INT 4
39841: PPUSH
39842: CALL_OW 272
39846: PUSH
39847: LD_VAR 0 8
39851: PPUSH
39852: LD_INT 0
39854: PPUSH
39855: LD_INT 4
39857: PPUSH
39858: CALL_OW 273
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_VAR 0 7
39871: PPUSH
39872: LD_INT 1
39874: PPUSH
39875: LD_INT 4
39877: PPUSH
39878: CALL_OW 272
39882: PUSH
39883: LD_VAR 0 8
39887: PPUSH
39888: LD_INT 1
39890: PPUSH
39891: LD_INT 4
39893: PPUSH
39894: CALL_OW 273
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_VAR 0 7
39907: PPUSH
39908: LD_INT 2
39910: PPUSH
39911: LD_INT 4
39913: PPUSH
39914: CALL_OW 272
39918: PUSH
39919: LD_VAR 0 8
39923: PPUSH
39924: LD_INT 2
39926: PPUSH
39927: LD_INT 4
39929: PPUSH
39930: CALL_OW 273
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_VAR 0 7
39943: PPUSH
39944: LD_INT 3
39946: PPUSH
39947: LD_INT 4
39949: PPUSH
39950: CALL_OW 272
39954: PUSH
39955: LD_VAR 0 8
39959: PPUSH
39960: LD_INT 3
39962: PPUSH
39963: LD_INT 4
39965: PPUSH
39966: CALL_OW 273
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_VAR 0 7
39979: PPUSH
39980: LD_INT 4
39982: PPUSH
39983: LD_INT 4
39985: PPUSH
39986: CALL_OW 272
39990: PUSH
39991: LD_VAR 0 8
39995: PPUSH
39996: LD_INT 4
39998: PPUSH
39999: LD_INT 4
40001: PPUSH
40002: CALL_OW 273
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_VAR 0 7
40015: PPUSH
40016: LD_INT 5
40018: PPUSH
40019: LD_INT 4
40021: PPUSH
40022: CALL_OW 272
40026: PUSH
40027: LD_VAR 0 8
40031: PPUSH
40032: LD_INT 5
40034: PPUSH
40035: LD_INT 4
40037: PPUSH
40038: CALL_OW 273
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: ST_TO_ADDR
// for i = tmp downto 1 do
40055: LD_ADDR_VAR 0 4
40059: PUSH
40060: DOUBLE
40061: LD_VAR 0 6
40065: INC
40066: ST_TO_ADDR
40067: LD_INT 1
40069: PUSH
40070: FOR_DOWNTO
40071: IFFALSE 40172
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40073: LD_VAR 0 6
40077: PUSH
40078: LD_VAR 0 4
40082: ARRAY
40083: PUSH
40084: LD_INT 1
40086: ARRAY
40087: PPUSH
40088: LD_VAR 0 6
40092: PUSH
40093: LD_VAR 0 4
40097: ARRAY
40098: PUSH
40099: LD_INT 2
40101: ARRAY
40102: PPUSH
40103: CALL_OW 488
40107: NOT
40108: PUSH
40109: LD_VAR 0 6
40113: PUSH
40114: LD_VAR 0 4
40118: ARRAY
40119: PUSH
40120: LD_INT 1
40122: ARRAY
40123: PPUSH
40124: LD_VAR 0 6
40128: PUSH
40129: LD_VAR 0 4
40133: ARRAY
40134: PUSH
40135: LD_INT 2
40137: ARRAY
40138: PPUSH
40139: CALL_OW 428
40143: PUSH
40144: LD_INT 0
40146: NONEQUAL
40147: OR
40148: IFFALSE 40170
// tmp := Delete ( tmp , i ) ;
40150: LD_ADDR_VAR 0 6
40154: PUSH
40155: LD_VAR 0 6
40159: PPUSH
40160: LD_VAR 0 4
40164: PPUSH
40165: CALL_OW 3
40169: ST_TO_ADDR
40170: GO 40070
40172: POP
40173: POP
// j := GetClosestHex ( unit , tmp ) ;
40174: LD_ADDR_VAR 0 5
40178: PUSH
40179: LD_VAR 0 1
40183: PPUSH
40184: LD_VAR 0 6
40188: PPUSH
40189: CALL 39476 0 2
40193: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40194: LD_VAR 0 1
40198: PPUSH
40199: LD_VAR 0 5
40203: PUSH
40204: LD_INT 1
40206: ARRAY
40207: PPUSH
40208: LD_VAR 0 5
40212: PUSH
40213: LD_INT 2
40215: ARRAY
40216: PPUSH
40217: CALL_OW 111
// end ;
40221: LD_VAR 0 3
40225: RET
// export function PrepareApemanSoldier ( ) ; begin
40226: LD_INT 0
40228: PPUSH
// uc_nation := 0 ;
40229: LD_ADDR_OWVAR 21
40233: PUSH
40234: LD_INT 0
40236: ST_TO_ADDR
// hc_sex := sex_male ;
40237: LD_ADDR_OWVAR 27
40241: PUSH
40242: LD_INT 1
40244: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
40245: LD_ADDR_OWVAR 28
40249: PUSH
40250: LD_INT 15
40252: ST_TO_ADDR
// hc_gallery :=  ;
40253: LD_ADDR_OWVAR 33
40257: PUSH
40258: LD_STRING 
40260: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40261: LD_ADDR_OWVAR 31
40265: PUSH
40266: LD_INT 0
40268: PPUSH
40269: LD_INT 3
40271: PPUSH
40272: CALL_OW 12
40276: PUSH
40277: LD_INT 0
40279: PPUSH
40280: LD_INT 3
40282: PPUSH
40283: CALL_OW 12
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: ST_TO_ADDR
// end ;
40300: LD_VAR 0 1
40304: RET
// export function PrepareApemanEngineer ( ) ; begin
40305: LD_INT 0
40307: PPUSH
// uc_nation := 0 ;
40308: LD_ADDR_OWVAR 21
40312: PUSH
40313: LD_INT 0
40315: ST_TO_ADDR
// hc_sex := sex_male ;
40316: LD_ADDR_OWVAR 27
40320: PUSH
40321: LD_INT 1
40323: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40324: LD_ADDR_OWVAR 28
40328: PUSH
40329: LD_INT 16
40331: ST_TO_ADDR
// hc_gallery :=  ;
40332: LD_ADDR_OWVAR 33
40336: PUSH
40337: LD_STRING 
40339: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40340: LD_ADDR_OWVAR 31
40344: PUSH
40345: LD_INT 0
40347: PPUSH
40348: LD_INT 3
40350: PPUSH
40351: CALL_OW 12
40355: PUSH
40356: LD_INT 0
40358: PPUSH
40359: LD_INT 3
40361: PPUSH
40362: CALL_OW 12
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: LD_INT 0
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: ST_TO_ADDR
// end ;
40379: LD_VAR 0 1
40383: RET
// export function PrepareApeman ( agressivity ) ; begin
40384: LD_INT 0
40386: PPUSH
// uc_side := 0 ;
40387: LD_ADDR_OWVAR 20
40391: PUSH
40392: LD_INT 0
40394: ST_TO_ADDR
// uc_nation := 0 ;
40395: LD_ADDR_OWVAR 21
40399: PUSH
40400: LD_INT 0
40402: ST_TO_ADDR
// hc_sex := sex_male ;
40403: LD_ADDR_OWVAR 27
40407: PUSH
40408: LD_INT 1
40410: ST_TO_ADDR
// hc_class := class_apeman ;
40411: LD_ADDR_OWVAR 28
40415: PUSH
40416: LD_INT 12
40418: ST_TO_ADDR
// hc_gallery :=  ;
40419: LD_ADDR_OWVAR 33
40423: PUSH
40424: LD_STRING 
40426: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40427: LD_ADDR_OWVAR 35
40431: PUSH
40432: LD_VAR 0 1
40436: NEG
40437: PPUSH
40438: LD_VAR 0 1
40442: PPUSH
40443: CALL_OW 12
40447: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40448: LD_ADDR_OWVAR 31
40452: PUSH
40453: LD_INT 0
40455: PPUSH
40456: LD_INT 3
40458: PPUSH
40459: CALL_OW 12
40463: PUSH
40464: LD_INT 0
40466: PPUSH
40467: LD_INT 3
40469: PPUSH
40470: CALL_OW 12
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 0
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: ST_TO_ADDR
// end ;
40487: LD_VAR 0 2
40491: RET
// export function PrepareTiger ( agressivity ) ; begin
40492: LD_INT 0
40494: PPUSH
// uc_side := 0 ;
40495: LD_ADDR_OWVAR 20
40499: PUSH
40500: LD_INT 0
40502: ST_TO_ADDR
// uc_nation := 0 ;
40503: LD_ADDR_OWVAR 21
40507: PUSH
40508: LD_INT 0
40510: ST_TO_ADDR
// hc_class := class_tiger ;
40511: LD_ADDR_OWVAR 28
40515: PUSH
40516: LD_INT 14
40518: ST_TO_ADDR
// hc_gallery :=  ;
40519: LD_ADDR_OWVAR 33
40523: PUSH
40524: LD_STRING 
40526: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40527: LD_ADDR_OWVAR 35
40531: PUSH
40532: LD_VAR 0 1
40536: NEG
40537: PPUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 12
40547: ST_TO_ADDR
// end ;
40548: LD_VAR 0 2
40552: RET
// export function PrepareEnchidna ( ) ; begin
40553: LD_INT 0
40555: PPUSH
// uc_side := 0 ;
40556: LD_ADDR_OWVAR 20
40560: PUSH
40561: LD_INT 0
40563: ST_TO_ADDR
// uc_nation := 0 ;
40564: LD_ADDR_OWVAR 21
40568: PUSH
40569: LD_INT 0
40571: ST_TO_ADDR
// hc_class := class_baggie ;
40572: LD_ADDR_OWVAR 28
40576: PUSH
40577: LD_INT 13
40579: ST_TO_ADDR
// hc_gallery :=  ;
40580: LD_ADDR_OWVAR 33
40584: PUSH
40585: LD_STRING 
40587: ST_TO_ADDR
// end ;
40588: LD_VAR 0 1
40592: RET
// export function PrepareFrog ( ) ; begin
40593: LD_INT 0
40595: PPUSH
// uc_side := 0 ;
40596: LD_ADDR_OWVAR 20
40600: PUSH
40601: LD_INT 0
40603: ST_TO_ADDR
// uc_nation := 0 ;
40604: LD_ADDR_OWVAR 21
40608: PUSH
40609: LD_INT 0
40611: ST_TO_ADDR
// hc_class := class_frog ;
40612: LD_ADDR_OWVAR 28
40616: PUSH
40617: LD_INT 19
40619: ST_TO_ADDR
// hc_gallery :=  ;
40620: LD_ADDR_OWVAR 33
40624: PUSH
40625: LD_STRING 
40627: ST_TO_ADDR
// end ;
40628: LD_VAR 0 1
40632: RET
// export function PrepareFish ( ) ; begin
40633: LD_INT 0
40635: PPUSH
// uc_side := 0 ;
40636: LD_ADDR_OWVAR 20
40640: PUSH
40641: LD_INT 0
40643: ST_TO_ADDR
// uc_nation := 0 ;
40644: LD_ADDR_OWVAR 21
40648: PUSH
40649: LD_INT 0
40651: ST_TO_ADDR
// hc_class := class_fish ;
40652: LD_ADDR_OWVAR 28
40656: PUSH
40657: LD_INT 20
40659: ST_TO_ADDR
// hc_gallery :=  ;
40660: LD_ADDR_OWVAR 33
40664: PUSH
40665: LD_STRING 
40667: ST_TO_ADDR
// end ;
40668: LD_VAR 0 1
40672: RET
// export function PrepareBird ( ) ; begin
40673: LD_INT 0
40675: PPUSH
// uc_side := 0 ;
40676: LD_ADDR_OWVAR 20
40680: PUSH
40681: LD_INT 0
40683: ST_TO_ADDR
// uc_nation := 0 ;
40684: LD_ADDR_OWVAR 21
40688: PUSH
40689: LD_INT 0
40691: ST_TO_ADDR
// hc_class := class_phororhacos ;
40692: LD_ADDR_OWVAR 28
40696: PUSH
40697: LD_INT 18
40699: ST_TO_ADDR
// hc_gallery :=  ;
40700: LD_ADDR_OWVAR 33
40704: PUSH
40705: LD_STRING 
40707: ST_TO_ADDR
// end ;
40708: LD_VAR 0 1
40712: RET
// export function PrepareHorse ( ) ; begin
40713: LD_INT 0
40715: PPUSH
// uc_side := 0 ;
40716: LD_ADDR_OWVAR 20
40720: PUSH
40721: LD_INT 0
40723: ST_TO_ADDR
// uc_nation := 0 ;
40724: LD_ADDR_OWVAR 21
40728: PUSH
40729: LD_INT 0
40731: ST_TO_ADDR
// hc_class := class_horse ;
40732: LD_ADDR_OWVAR 28
40736: PUSH
40737: LD_INT 21
40739: ST_TO_ADDR
// hc_gallery :=  ;
40740: LD_ADDR_OWVAR 33
40744: PUSH
40745: LD_STRING 
40747: ST_TO_ADDR
// end ;
40748: LD_VAR 0 1
40752: RET
// export function PrepareMastodont ( ) ; begin
40753: LD_INT 0
40755: PPUSH
// uc_side := 0 ;
40756: LD_ADDR_OWVAR 20
40760: PUSH
40761: LD_INT 0
40763: ST_TO_ADDR
// uc_nation := 0 ;
40764: LD_ADDR_OWVAR 21
40768: PUSH
40769: LD_INT 0
40771: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40772: LD_ADDR_OWVAR 37
40776: PUSH
40777: LD_INT 31
40779: ST_TO_ADDR
// vc_control := control_rider ;
40780: LD_ADDR_OWVAR 38
40784: PUSH
40785: LD_INT 4
40787: ST_TO_ADDR
// end ;
40788: LD_VAR 0 1
40792: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40793: LD_INT 0
40795: PPUSH
40796: PPUSH
40797: PPUSH
// uc_side = 0 ;
40798: LD_ADDR_OWVAR 20
40802: PUSH
40803: LD_INT 0
40805: ST_TO_ADDR
// uc_nation = 0 ;
40806: LD_ADDR_OWVAR 21
40810: PUSH
40811: LD_INT 0
40813: ST_TO_ADDR
// InitHc_All ( ) ;
40814: CALL_OW 584
// InitVc ;
40818: CALL_OW 20
// if mastodonts then
40822: LD_VAR 0 6
40826: IFFALSE 40893
// for i = 1 to mastodonts do
40828: LD_ADDR_VAR 0 11
40832: PUSH
40833: DOUBLE
40834: LD_INT 1
40836: DEC
40837: ST_TO_ADDR
40838: LD_VAR 0 6
40842: PUSH
40843: FOR_TO
40844: IFFALSE 40891
// begin vc_chassis := 31 ;
40846: LD_ADDR_OWVAR 37
40850: PUSH
40851: LD_INT 31
40853: ST_TO_ADDR
// vc_control := control_rider ;
40854: LD_ADDR_OWVAR 38
40858: PUSH
40859: LD_INT 4
40861: ST_TO_ADDR
// animal := CreateVehicle ;
40862: LD_ADDR_VAR 0 12
40866: PUSH
40867: CALL_OW 45
40871: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40872: LD_VAR 0 12
40876: PPUSH
40877: LD_VAR 0 8
40881: PPUSH
40882: LD_INT 0
40884: PPUSH
40885: CALL 43021 0 3
// end ;
40889: GO 40843
40891: POP
40892: POP
// if horses then
40893: LD_VAR 0 5
40897: IFFALSE 40964
// for i = 1 to horses do
40899: LD_ADDR_VAR 0 11
40903: PUSH
40904: DOUBLE
40905: LD_INT 1
40907: DEC
40908: ST_TO_ADDR
40909: LD_VAR 0 5
40913: PUSH
40914: FOR_TO
40915: IFFALSE 40962
// begin hc_class := 21 ;
40917: LD_ADDR_OWVAR 28
40921: PUSH
40922: LD_INT 21
40924: ST_TO_ADDR
// hc_gallery :=  ;
40925: LD_ADDR_OWVAR 33
40929: PUSH
40930: LD_STRING 
40932: ST_TO_ADDR
// animal := CreateHuman ;
40933: LD_ADDR_VAR 0 12
40937: PUSH
40938: CALL_OW 44
40942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40943: LD_VAR 0 12
40947: PPUSH
40948: LD_VAR 0 8
40952: PPUSH
40953: LD_INT 0
40955: PPUSH
40956: CALL 43021 0 3
// end ;
40960: GO 40914
40962: POP
40963: POP
// if birds then
40964: LD_VAR 0 1
40968: IFFALSE 41035
// for i = 1 to birds do
40970: LD_ADDR_VAR 0 11
40974: PUSH
40975: DOUBLE
40976: LD_INT 1
40978: DEC
40979: ST_TO_ADDR
40980: LD_VAR 0 1
40984: PUSH
40985: FOR_TO
40986: IFFALSE 41033
// begin hc_class := 18 ;
40988: LD_ADDR_OWVAR 28
40992: PUSH
40993: LD_INT 18
40995: ST_TO_ADDR
// hc_gallery =  ;
40996: LD_ADDR_OWVAR 33
41000: PUSH
41001: LD_STRING 
41003: ST_TO_ADDR
// animal := CreateHuman ;
41004: LD_ADDR_VAR 0 12
41008: PUSH
41009: CALL_OW 44
41013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41014: LD_VAR 0 12
41018: PPUSH
41019: LD_VAR 0 8
41023: PPUSH
41024: LD_INT 0
41026: PPUSH
41027: CALL 43021 0 3
// end ;
41031: GO 40985
41033: POP
41034: POP
// if tigers then
41035: LD_VAR 0 2
41039: IFFALSE 41123
// for i = 1 to tigers do
41041: LD_ADDR_VAR 0 11
41045: PUSH
41046: DOUBLE
41047: LD_INT 1
41049: DEC
41050: ST_TO_ADDR
41051: LD_VAR 0 2
41055: PUSH
41056: FOR_TO
41057: IFFALSE 41121
// begin hc_class = class_tiger ;
41059: LD_ADDR_OWVAR 28
41063: PUSH
41064: LD_INT 14
41066: ST_TO_ADDR
// hc_gallery =  ;
41067: LD_ADDR_OWVAR 33
41071: PUSH
41072: LD_STRING 
41074: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41075: LD_ADDR_OWVAR 35
41079: PUSH
41080: LD_INT 7
41082: NEG
41083: PPUSH
41084: LD_INT 7
41086: PPUSH
41087: CALL_OW 12
41091: ST_TO_ADDR
// animal := CreateHuman ;
41092: LD_ADDR_VAR 0 12
41096: PUSH
41097: CALL_OW 44
41101: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41102: LD_VAR 0 12
41106: PPUSH
41107: LD_VAR 0 8
41111: PPUSH
41112: LD_INT 0
41114: PPUSH
41115: CALL 43021 0 3
// end ;
41119: GO 41056
41121: POP
41122: POP
// if apemans then
41123: LD_VAR 0 3
41127: IFFALSE 41250
// for i = 1 to apemans do
41129: LD_ADDR_VAR 0 11
41133: PUSH
41134: DOUBLE
41135: LD_INT 1
41137: DEC
41138: ST_TO_ADDR
41139: LD_VAR 0 3
41143: PUSH
41144: FOR_TO
41145: IFFALSE 41248
// begin hc_class = class_apeman ;
41147: LD_ADDR_OWVAR 28
41151: PUSH
41152: LD_INT 12
41154: ST_TO_ADDR
// hc_gallery =  ;
41155: LD_ADDR_OWVAR 33
41159: PUSH
41160: LD_STRING 
41162: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41163: LD_ADDR_OWVAR 35
41167: PUSH
41168: LD_INT 2
41170: NEG
41171: PPUSH
41172: LD_INT 2
41174: PPUSH
41175: CALL_OW 12
41179: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41180: LD_ADDR_OWVAR 31
41184: PUSH
41185: LD_INT 1
41187: PPUSH
41188: LD_INT 3
41190: PPUSH
41191: CALL_OW 12
41195: PUSH
41196: LD_INT 1
41198: PPUSH
41199: LD_INT 3
41201: PPUSH
41202: CALL_OW 12
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 0
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
// animal := CreateHuman ;
41219: LD_ADDR_VAR 0 12
41223: PUSH
41224: CALL_OW 44
41228: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41229: LD_VAR 0 12
41233: PPUSH
41234: LD_VAR 0 8
41238: PPUSH
41239: LD_INT 0
41241: PPUSH
41242: CALL 43021 0 3
// end ;
41246: GO 41144
41248: POP
41249: POP
// if enchidnas then
41250: LD_VAR 0 4
41254: IFFALSE 41321
// for i = 1 to enchidnas do
41256: LD_ADDR_VAR 0 11
41260: PUSH
41261: DOUBLE
41262: LD_INT 1
41264: DEC
41265: ST_TO_ADDR
41266: LD_VAR 0 4
41270: PUSH
41271: FOR_TO
41272: IFFALSE 41319
// begin hc_class = 13 ;
41274: LD_ADDR_OWVAR 28
41278: PUSH
41279: LD_INT 13
41281: ST_TO_ADDR
// hc_gallery =  ;
41282: LD_ADDR_OWVAR 33
41286: PUSH
41287: LD_STRING 
41289: ST_TO_ADDR
// animal := CreateHuman ;
41290: LD_ADDR_VAR 0 12
41294: PUSH
41295: CALL_OW 44
41299: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41300: LD_VAR 0 12
41304: PPUSH
41305: LD_VAR 0 8
41309: PPUSH
41310: LD_INT 0
41312: PPUSH
41313: CALL 43021 0 3
// end ;
41317: GO 41271
41319: POP
41320: POP
// if fishes then
41321: LD_VAR 0 7
41325: IFFALSE 41392
// for i = 1 to fishes do
41327: LD_ADDR_VAR 0 11
41331: PUSH
41332: DOUBLE
41333: LD_INT 1
41335: DEC
41336: ST_TO_ADDR
41337: LD_VAR 0 7
41341: PUSH
41342: FOR_TO
41343: IFFALSE 41390
// begin hc_class = 20 ;
41345: LD_ADDR_OWVAR 28
41349: PUSH
41350: LD_INT 20
41352: ST_TO_ADDR
// hc_gallery =  ;
41353: LD_ADDR_OWVAR 33
41357: PUSH
41358: LD_STRING 
41360: ST_TO_ADDR
// animal := CreateHuman ;
41361: LD_ADDR_VAR 0 12
41365: PUSH
41366: CALL_OW 44
41370: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41371: LD_VAR 0 12
41375: PPUSH
41376: LD_VAR 0 9
41380: PPUSH
41381: LD_INT 0
41383: PPUSH
41384: CALL 43021 0 3
// end ;
41388: GO 41342
41390: POP
41391: POP
// end ;
41392: LD_VAR 0 10
41396: RET
// export function WantHeal ( sci , unit ) ; begin
41397: LD_INT 0
41399: PPUSH
// if GetTaskList ( sci ) > 0 then
41400: LD_VAR 0 1
41404: PPUSH
41405: CALL_OW 437
41409: PUSH
41410: LD_INT 0
41412: GREATER
41413: IFFALSE 41483
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41415: LD_VAR 0 1
41419: PPUSH
41420: CALL_OW 437
41424: PUSH
41425: LD_INT 1
41427: ARRAY
41428: PUSH
41429: LD_INT 1
41431: ARRAY
41432: PUSH
41433: LD_STRING l
41435: EQUAL
41436: PUSH
41437: LD_VAR 0 1
41441: PPUSH
41442: CALL_OW 437
41446: PUSH
41447: LD_INT 1
41449: ARRAY
41450: PUSH
41451: LD_INT 4
41453: ARRAY
41454: PUSH
41455: LD_VAR 0 2
41459: EQUAL
41460: AND
41461: IFFALSE 41473
// result := true else
41463: LD_ADDR_VAR 0 3
41467: PUSH
41468: LD_INT 1
41470: ST_TO_ADDR
41471: GO 41481
// result := false ;
41473: LD_ADDR_VAR 0 3
41477: PUSH
41478: LD_INT 0
41480: ST_TO_ADDR
// end else
41481: GO 41491
// result := false ;
41483: LD_ADDR_VAR 0 3
41487: PUSH
41488: LD_INT 0
41490: ST_TO_ADDR
// end ;
41491: LD_VAR 0 3
41495: RET
// export function HealTarget ( sci ) ; begin
41496: LD_INT 0
41498: PPUSH
// if not sci then
41499: LD_VAR 0 1
41503: NOT
41504: IFFALSE 41508
// exit ;
41506: GO 41573
// result := 0 ;
41508: LD_ADDR_VAR 0 2
41512: PUSH
41513: LD_INT 0
41515: ST_TO_ADDR
// if GetTaskList ( sci ) then
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 437
41525: IFFALSE 41573
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41527: LD_VAR 0 1
41531: PPUSH
41532: CALL_OW 437
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: PUSH
41541: LD_INT 1
41543: ARRAY
41544: PUSH
41545: LD_STRING l
41547: EQUAL
41548: IFFALSE 41573
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41550: LD_ADDR_VAR 0 2
41554: PUSH
41555: LD_VAR 0 1
41559: PPUSH
41560: CALL_OW 437
41564: PUSH
41565: LD_INT 1
41567: ARRAY
41568: PUSH
41569: LD_INT 4
41571: ARRAY
41572: ST_TO_ADDR
// end ;
41573: LD_VAR 0 2
41577: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41578: LD_INT 0
41580: PPUSH
41581: PPUSH
41582: PPUSH
41583: PPUSH
// if not base_units then
41584: LD_VAR 0 1
41588: NOT
41589: IFFALSE 41593
// exit ;
41591: GO 41680
// result := false ;
41593: LD_ADDR_VAR 0 2
41597: PUSH
41598: LD_INT 0
41600: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41601: LD_ADDR_VAR 0 5
41605: PUSH
41606: LD_VAR 0 1
41610: PPUSH
41611: LD_INT 21
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PPUSH
41621: CALL_OW 72
41625: ST_TO_ADDR
// if not tmp then
41626: LD_VAR 0 5
41630: NOT
41631: IFFALSE 41635
// exit ;
41633: GO 41680
// for i in tmp do
41635: LD_ADDR_VAR 0 3
41639: PUSH
41640: LD_VAR 0 5
41644: PUSH
41645: FOR_IN
41646: IFFALSE 41678
// begin result := EnemyInRange ( i , 22 ) ;
41648: LD_ADDR_VAR 0 2
41652: PUSH
41653: LD_VAR 0 3
41657: PPUSH
41658: LD_INT 22
41660: PPUSH
41661: CALL 39278 0 2
41665: ST_TO_ADDR
// if result then
41666: LD_VAR 0 2
41670: IFFALSE 41676
// exit ;
41672: POP
41673: POP
41674: GO 41680
// end ;
41676: GO 41645
41678: POP
41679: POP
// end ;
41680: LD_VAR 0 2
41684: RET
// export function FilterByTag ( units , tag ) ; begin
41685: LD_INT 0
41687: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41688: LD_ADDR_VAR 0 3
41692: PUSH
41693: LD_VAR 0 1
41697: PPUSH
41698: LD_INT 120
41700: PUSH
41701: LD_VAR 0 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PPUSH
41710: CALL_OW 72
41714: ST_TO_ADDR
// end ;
41715: LD_VAR 0 3
41719: RET
// export function IsDriver ( un ) ; begin
41720: LD_INT 0
41722: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41723: LD_ADDR_VAR 0 2
41727: PUSH
41728: LD_VAR 0 1
41732: PUSH
41733: LD_INT 55
41735: PUSH
41736: EMPTY
41737: LIST
41738: PPUSH
41739: CALL_OW 69
41743: IN
41744: ST_TO_ADDR
// end ;
41745: LD_VAR 0 2
41749: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41750: LD_INT 0
41752: PPUSH
41753: PPUSH
// list := [ ] ;
41754: LD_ADDR_VAR 0 5
41758: PUSH
41759: EMPTY
41760: ST_TO_ADDR
// case d of 0 :
41761: LD_VAR 0 3
41765: PUSH
41766: LD_INT 0
41768: DOUBLE
41769: EQUAL
41770: IFTRUE 41774
41772: GO 41907
41774: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41775: LD_ADDR_VAR 0 5
41779: PUSH
41780: LD_VAR 0 1
41784: PUSH
41785: LD_INT 4
41787: MINUS
41788: PUSH
41789: LD_VAR 0 2
41793: PUSH
41794: LD_INT 4
41796: MINUS
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: LIST
41805: PUSH
41806: LD_VAR 0 1
41810: PUSH
41811: LD_INT 3
41813: MINUS
41814: PUSH
41815: LD_VAR 0 2
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: LD_VAR 0 1
41832: PUSH
41833: LD_INT 4
41835: PLUS
41836: PUSH
41837: LD_VAR 0 2
41841: PUSH
41842: LD_INT 4
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: PUSH
41850: LD_VAR 0 1
41854: PUSH
41855: LD_INT 3
41857: PLUS
41858: PUSH
41859: LD_VAR 0 2
41863: PUSH
41864: LD_INT 3
41866: PLUS
41867: PUSH
41868: LD_INT 5
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: PUSH
41876: LD_VAR 0 1
41880: PUSH
41881: LD_VAR 0 2
41885: PUSH
41886: LD_INT 4
41888: PLUS
41889: PUSH
41890: LD_INT 0
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: LIST
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: ST_TO_ADDR
// end ; 1 :
41905: GO 42605
41907: LD_INT 1
41909: DOUBLE
41910: EQUAL
41911: IFTRUE 41915
41913: GO 42048
41915: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41916: LD_ADDR_VAR 0 5
41920: PUSH
41921: LD_VAR 0 1
41925: PUSH
41926: LD_VAR 0 2
41930: PUSH
41931: LD_INT 4
41933: MINUS
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: PUSH
41943: LD_VAR 0 1
41947: PUSH
41948: LD_INT 3
41950: MINUS
41951: PUSH
41952: LD_VAR 0 2
41956: PUSH
41957: LD_INT 3
41959: MINUS
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: LIST
41968: PUSH
41969: LD_VAR 0 1
41973: PUSH
41974: LD_INT 4
41976: MINUS
41977: PUSH
41978: LD_VAR 0 2
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: PUSH
41991: LD_VAR 0 1
41995: PUSH
41996: LD_VAR 0 2
42000: PUSH
42001: LD_INT 3
42003: PLUS
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: PUSH
42013: LD_VAR 0 1
42017: PUSH
42018: LD_INT 4
42020: PLUS
42021: PUSH
42022: LD_VAR 0 2
42026: PUSH
42027: LD_INT 4
42029: PLUS
42030: PUSH
42031: LD_INT 5
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
// end ; 2 :
42046: GO 42605
42048: LD_INT 2
42050: DOUBLE
42051: EQUAL
42052: IFTRUE 42056
42054: GO 42185
42056: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42057: LD_ADDR_VAR 0 5
42061: PUSH
42062: LD_VAR 0 1
42066: PUSH
42067: LD_VAR 0 2
42071: PUSH
42072: LD_INT 3
42074: MINUS
42075: PUSH
42076: LD_INT 3
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: PUSH
42084: LD_VAR 0 1
42088: PUSH
42089: LD_INT 4
42091: PLUS
42092: PUSH
42093: LD_VAR 0 2
42097: PUSH
42098: LD_INT 4
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: LIST
42105: PUSH
42106: LD_VAR 0 1
42110: PUSH
42111: LD_VAR 0 2
42115: PUSH
42116: LD_INT 4
42118: PLUS
42119: PUSH
42120: LD_INT 0
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: LIST
42127: PUSH
42128: LD_VAR 0 1
42132: PUSH
42133: LD_INT 3
42135: MINUS
42136: PUSH
42137: LD_VAR 0 2
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: LIST
42149: PUSH
42150: LD_VAR 0 1
42154: PUSH
42155: LD_INT 4
42157: MINUS
42158: PUSH
42159: LD_VAR 0 2
42163: PUSH
42164: LD_INT 4
42166: MINUS
42167: PUSH
42168: LD_INT 2
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: LIST
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// end ; 3 :
42183: GO 42605
42185: LD_INT 3
42187: DOUBLE
42188: EQUAL
42189: IFTRUE 42193
42191: GO 42326
42193: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42194: LD_ADDR_VAR 0 5
42198: PUSH
42199: LD_VAR 0 1
42203: PUSH
42204: LD_INT 3
42206: PLUS
42207: PUSH
42208: LD_VAR 0 2
42212: PUSH
42213: LD_INT 4
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: LIST
42220: PUSH
42221: LD_VAR 0 1
42225: PUSH
42226: LD_INT 4
42228: PLUS
42229: PUSH
42230: LD_VAR 0 2
42234: PUSH
42235: LD_INT 4
42237: PLUS
42238: PUSH
42239: LD_INT 5
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: LIST
42246: PUSH
42247: LD_VAR 0 1
42251: PUSH
42252: LD_INT 4
42254: MINUS
42255: PUSH
42256: LD_VAR 0 2
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: PUSH
42269: LD_VAR 0 1
42273: PUSH
42274: LD_VAR 0 2
42278: PUSH
42279: LD_INT 4
42281: MINUS
42282: PUSH
42283: LD_INT 3
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: LIST
42290: PUSH
42291: LD_VAR 0 1
42295: PUSH
42296: LD_INT 3
42298: MINUS
42299: PUSH
42300: LD_VAR 0 2
42304: PUSH
42305: LD_INT 3
42307: MINUS
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: ST_TO_ADDR
// end ; 4 :
42324: GO 42605
42326: LD_INT 4
42328: DOUBLE
42329: EQUAL
42330: IFTRUE 42334
42332: GO 42467
42334: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42335: LD_ADDR_VAR 0 5
42339: PUSH
42340: LD_VAR 0 1
42344: PUSH
42345: LD_VAR 0 2
42349: PUSH
42350: LD_INT 4
42352: PLUS
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: PUSH
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 3
42369: PLUS
42370: PUSH
42371: LD_VAR 0 2
42375: PUSH
42376: LD_INT 3
42378: PLUS
42379: PUSH
42380: LD_INT 5
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: PUSH
42388: LD_VAR 0 1
42392: PUSH
42393: LD_INT 4
42395: PLUS
42396: PUSH
42397: LD_VAR 0 2
42401: PUSH
42402: LD_INT 4
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: LIST
42409: PUSH
42410: LD_VAR 0 1
42414: PUSH
42415: LD_VAR 0 2
42419: PUSH
42420: LD_INT 3
42422: MINUS
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: LIST
42431: PUSH
42432: LD_VAR 0 1
42436: PUSH
42437: LD_INT 4
42439: MINUS
42440: PUSH
42441: LD_VAR 0 2
42445: PUSH
42446: LD_INT 4
42448: MINUS
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: LIST
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
// end ; 5 :
42465: GO 42605
42467: LD_INT 5
42469: DOUBLE
42470: EQUAL
42471: IFTRUE 42475
42473: GO 42604
42475: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42476: LD_ADDR_VAR 0 5
42480: PUSH
42481: LD_VAR 0 1
42485: PUSH
42486: LD_INT 4
42488: MINUS
42489: PUSH
42490: LD_VAR 0 2
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: PUSH
42503: LD_VAR 0 1
42507: PUSH
42508: LD_VAR 0 2
42512: PUSH
42513: LD_INT 4
42515: MINUS
42516: PUSH
42517: LD_INT 3
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: LIST
42524: PUSH
42525: LD_VAR 0 1
42529: PUSH
42530: LD_INT 4
42532: PLUS
42533: PUSH
42534: LD_VAR 0 2
42538: PUSH
42539: LD_INT 4
42541: PLUS
42542: PUSH
42543: LD_INT 5
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: PUSH
42551: LD_VAR 0 1
42555: PUSH
42556: LD_INT 3
42558: PLUS
42559: PUSH
42560: LD_VAR 0 2
42564: PUSH
42565: LD_INT 4
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: PUSH
42573: LD_VAR 0 1
42577: PUSH
42578: LD_VAR 0 2
42582: PUSH
42583: LD_INT 3
42585: PLUS
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: LIST
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
// end ; end ;
42602: GO 42605
42604: POP
// result := list ;
42605: LD_ADDR_VAR 0 4
42609: PUSH
42610: LD_VAR 0 5
42614: ST_TO_ADDR
// end ;
42615: LD_VAR 0 4
42619: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42620: LD_INT 0
42622: PPUSH
42623: PPUSH
42624: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42625: LD_VAR 0 1
42629: NOT
42630: PUSH
42631: LD_VAR 0 2
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: LD_INT 3
42644: PUSH
42645: LD_INT 4
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: IN
42654: NOT
42655: OR
42656: IFFALSE 42660
// exit ;
42658: GO 42743
// tmp := [ ] ;
42660: LD_ADDR_VAR 0 5
42664: PUSH
42665: EMPTY
42666: ST_TO_ADDR
// for i in units do
42667: LD_ADDR_VAR 0 4
42671: PUSH
42672: LD_VAR 0 1
42676: PUSH
42677: FOR_IN
42678: IFFALSE 42712
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
42680: LD_ADDR_VAR 0 5
42684: PUSH
42685: LD_VAR 0 5
42689: PPUSH
42690: LD_VAR 0 4
42694: PPUSH
42695: LD_VAR 0 2
42699: PPUSH
42700: CALL_OW 259
42704: PPUSH
42705: CALL 44116 0 2
42709: ST_TO_ADDR
42710: GO 42677
42712: POP
42713: POP
// if not tmp then
42714: LD_VAR 0 5
42718: NOT
42719: IFFALSE 42723
// exit ;
42721: GO 42743
// result := SortListByListDesc ( units , tmp ) ;
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_VAR 0 1
42732: PPUSH
42733: LD_VAR 0 5
42737: PPUSH
42738: CALL_OW 77
42742: ST_TO_ADDR
// end ;
42743: LD_VAR 0 3
42747: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42748: LD_INT 0
42750: PPUSH
42751: PPUSH
42752: PPUSH
// result := false ;
42753: LD_ADDR_VAR 0 3
42757: PUSH
42758: LD_INT 0
42760: ST_TO_ADDR
// if not building then
42761: LD_VAR 0 2
42765: NOT
42766: IFFALSE 42770
// exit ;
42768: GO 42908
// x := GetX ( building ) ;
42770: LD_ADDR_VAR 0 4
42774: PUSH
42775: LD_VAR 0 2
42779: PPUSH
42780: CALL_OW 250
42784: ST_TO_ADDR
// y := GetY ( building ) ;
42785: LD_ADDR_VAR 0 5
42789: PUSH
42790: LD_VAR 0 2
42794: PPUSH
42795: CALL_OW 251
42799: ST_TO_ADDR
// if not x or not y then
42800: LD_VAR 0 4
42804: NOT
42805: PUSH
42806: LD_VAR 0 5
42810: NOT
42811: OR
42812: IFFALSE 42816
// exit ;
42814: GO 42908
// if GetTaskList ( unit ) then
42816: LD_VAR 0 1
42820: PPUSH
42821: CALL_OW 437
42825: IFFALSE 42908
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42827: LD_STRING e
42829: PUSH
42830: LD_VAR 0 1
42834: PPUSH
42835: CALL_OW 437
42839: PUSH
42840: LD_INT 1
42842: ARRAY
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: EQUAL
42848: PUSH
42849: LD_VAR 0 4
42853: PUSH
42854: LD_VAR 0 1
42858: PPUSH
42859: CALL_OW 437
42863: PUSH
42864: LD_INT 1
42866: ARRAY
42867: PUSH
42868: LD_INT 2
42870: ARRAY
42871: EQUAL
42872: AND
42873: PUSH
42874: LD_VAR 0 5
42878: PUSH
42879: LD_VAR 0 1
42883: PPUSH
42884: CALL_OW 437
42888: PUSH
42889: LD_INT 1
42891: ARRAY
42892: PUSH
42893: LD_INT 3
42895: ARRAY
42896: EQUAL
42897: AND
42898: IFFALSE 42908
// result := true end ;
42900: LD_ADDR_VAR 0 3
42904: PUSH
42905: LD_INT 1
42907: ST_TO_ADDR
// end ;
42908: LD_VAR 0 3
42912: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42913: LD_INT 0
42915: PPUSH
// result := false ;
42916: LD_ADDR_VAR 0 4
42920: PUSH
42921: LD_INT 0
42923: ST_TO_ADDR
// if GetTaskList ( unit ) then
42924: LD_VAR 0 1
42928: PPUSH
42929: CALL_OW 437
42933: IFFALSE 43016
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42935: LD_STRING M
42937: PUSH
42938: LD_VAR 0 1
42942: PPUSH
42943: CALL_OW 437
42947: PUSH
42948: LD_INT 1
42950: ARRAY
42951: PUSH
42952: LD_INT 1
42954: ARRAY
42955: EQUAL
42956: PUSH
42957: LD_VAR 0 2
42961: PUSH
42962: LD_VAR 0 1
42966: PPUSH
42967: CALL_OW 437
42971: PUSH
42972: LD_INT 1
42974: ARRAY
42975: PUSH
42976: LD_INT 2
42978: ARRAY
42979: EQUAL
42980: AND
42981: PUSH
42982: LD_VAR 0 3
42986: PUSH
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 437
42996: PUSH
42997: LD_INT 1
42999: ARRAY
43000: PUSH
43001: LD_INT 3
43003: ARRAY
43004: EQUAL
43005: AND
43006: IFFALSE 43016
// result := true ;
43008: LD_ADDR_VAR 0 4
43012: PUSH
43013: LD_INT 1
43015: ST_TO_ADDR
// end ; end ;
43016: LD_VAR 0 4
43020: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43021: LD_INT 0
43023: PPUSH
43024: PPUSH
43025: PPUSH
43026: PPUSH
// if not unit or not area then
43027: LD_VAR 0 1
43031: NOT
43032: PUSH
43033: LD_VAR 0 2
43037: NOT
43038: OR
43039: IFFALSE 43043
// exit ;
43041: GO 43219
// tmp := AreaToList ( area , i ) ;
43043: LD_ADDR_VAR 0 6
43047: PUSH
43048: LD_VAR 0 2
43052: PPUSH
43053: LD_VAR 0 5
43057: PPUSH
43058: CALL_OW 517
43062: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43063: LD_ADDR_VAR 0 5
43067: PUSH
43068: DOUBLE
43069: LD_INT 1
43071: DEC
43072: ST_TO_ADDR
43073: LD_VAR 0 6
43077: PUSH
43078: LD_INT 1
43080: ARRAY
43081: PUSH
43082: FOR_TO
43083: IFFALSE 43217
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43085: LD_ADDR_VAR 0 7
43089: PUSH
43090: LD_VAR 0 6
43094: PUSH
43095: LD_INT 1
43097: ARRAY
43098: PUSH
43099: LD_VAR 0 5
43103: ARRAY
43104: PUSH
43105: LD_VAR 0 6
43109: PUSH
43110: LD_INT 2
43112: ARRAY
43113: PUSH
43114: LD_VAR 0 5
43118: ARRAY
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
43124: LD_INT 92
43126: PUSH
43127: LD_VAR 0 7
43131: PUSH
43132: LD_INT 1
43134: ARRAY
43135: PUSH
43136: LD_VAR 0 7
43140: PUSH
43141: LD_INT 2
43143: ARRAY
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: PPUSH
43154: CALL_OW 69
43158: PUSH
43159: LD_INT 0
43161: EQUAL
43162: IFFALSE 43215
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43164: LD_VAR 0 1
43168: PPUSH
43169: LD_VAR 0 7
43173: PUSH
43174: LD_INT 1
43176: ARRAY
43177: PPUSH
43178: LD_VAR 0 7
43182: PUSH
43183: LD_INT 2
43185: ARRAY
43186: PPUSH
43187: LD_VAR 0 3
43191: PPUSH
43192: CALL_OW 48
// result := IsPlaced ( unit ) ;
43196: LD_ADDR_VAR 0 4
43200: PUSH
43201: LD_VAR 0 1
43205: PPUSH
43206: CALL_OW 305
43210: ST_TO_ADDR
// exit ;
43211: POP
43212: POP
43213: GO 43219
// end ; end ;
43215: GO 43082
43217: POP
43218: POP
// end ;
43219: LD_VAR 0 4
43223: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43224: LD_INT 0
43226: PPUSH
43227: PPUSH
43228: PPUSH
// if not side or side > 8 then
43229: LD_VAR 0 1
43233: NOT
43234: PUSH
43235: LD_VAR 0 1
43239: PUSH
43240: LD_INT 8
43242: GREATER
43243: OR
43244: IFFALSE 43248
// exit ;
43246: GO 43435
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43248: LD_ADDR_VAR 0 4
43252: PUSH
43253: LD_INT 22
43255: PUSH
43256: LD_VAR 0 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 21
43267: PUSH
43268: LD_INT 3
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PPUSH
43279: CALL_OW 69
43283: ST_TO_ADDR
// if not tmp then
43284: LD_VAR 0 4
43288: NOT
43289: IFFALSE 43293
// exit ;
43291: GO 43435
// enable_addtolog := true ;
43293: LD_ADDR_OWVAR 81
43297: PUSH
43298: LD_INT 1
43300: ST_TO_ADDR
// AddToLog ( [ ) ;
43301: LD_STRING [
43303: PPUSH
43304: CALL_OW 561
// for i in tmp do
43308: LD_ADDR_VAR 0 3
43312: PUSH
43313: LD_VAR 0 4
43317: PUSH
43318: FOR_IN
43319: IFFALSE 43426
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43321: LD_STRING [
43323: PUSH
43324: LD_VAR 0 3
43328: PPUSH
43329: CALL_OW 266
43333: STR
43334: PUSH
43335: LD_STRING , 
43337: STR
43338: PUSH
43339: LD_VAR 0 3
43343: PPUSH
43344: CALL_OW 250
43348: STR
43349: PUSH
43350: LD_STRING , 
43352: STR
43353: PUSH
43354: LD_VAR 0 3
43358: PPUSH
43359: CALL_OW 251
43363: STR
43364: PUSH
43365: LD_STRING , 
43367: STR
43368: PUSH
43369: LD_VAR 0 3
43373: PPUSH
43374: CALL_OW 254
43378: STR
43379: PUSH
43380: LD_STRING , 
43382: STR
43383: PUSH
43384: LD_VAR 0 3
43388: PPUSH
43389: LD_INT 1
43391: PPUSH
43392: CALL_OW 268
43396: STR
43397: PUSH
43398: LD_STRING , 
43400: STR
43401: PUSH
43402: LD_VAR 0 3
43406: PPUSH
43407: LD_INT 2
43409: PPUSH
43410: CALL_OW 268
43414: STR
43415: PUSH
43416: LD_STRING ],
43418: STR
43419: PPUSH
43420: CALL_OW 561
// end ;
43424: GO 43318
43426: POP
43427: POP
// AddToLog ( ]; ) ;
43428: LD_STRING ];
43430: PPUSH
43431: CALL_OW 561
// end ;
43435: LD_VAR 0 2
43439: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43440: LD_INT 0
43442: PPUSH
43443: PPUSH
43444: PPUSH
43445: PPUSH
43446: PPUSH
// if not area or not rate or not max then
43447: LD_VAR 0 1
43451: NOT
43452: PUSH
43453: LD_VAR 0 2
43457: NOT
43458: OR
43459: PUSH
43460: LD_VAR 0 4
43464: NOT
43465: OR
43466: IFFALSE 43470
// exit ;
43468: GO 43659
// while 1 do
43470: LD_INT 1
43472: IFFALSE 43659
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43474: LD_ADDR_VAR 0 9
43478: PUSH
43479: LD_VAR 0 1
43483: PPUSH
43484: LD_INT 1
43486: PPUSH
43487: CALL_OW 287
43491: PUSH
43492: LD_INT 10
43494: MUL
43495: ST_TO_ADDR
// r := rate / 10 ;
43496: LD_ADDR_VAR 0 7
43500: PUSH
43501: LD_VAR 0 2
43505: PUSH
43506: LD_INT 10
43508: DIVREAL
43509: ST_TO_ADDR
// time := 1 1$00 ;
43510: LD_ADDR_VAR 0 8
43514: PUSH
43515: LD_INT 2100
43517: ST_TO_ADDR
// if amount < min then
43518: LD_VAR 0 9
43522: PUSH
43523: LD_VAR 0 3
43527: LESS
43528: IFFALSE 43546
// r := r * 2 else
43530: LD_ADDR_VAR 0 7
43534: PUSH
43535: LD_VAR 0 7
43539: PUSH
43540: LD_INT 2
43542: MUL
43543: ST_TO_ADDR
43544: GO 43572
// if amount > max then
43546: LD_VAR 0 9
43550: PUSH
43551: LD_VAR 0 4
43555: GREATER
43556: IFFALSE 43572
// r := r / 2 ;
43558: LD_ADDR_VAR 0 7
43562: PUSH
43563: LD_VAR 0 7
43567: PUSH
43568: LD_INT 2
43570: DIVREAL
43571: ST_TO_ADDR
// time := time / r ;
43572: LD_ADDR_VAR 0 8
43576: PUSH
43577: LD_VAR 0 8
43581: PUSH
43582: LD_VAR 0 7
43586: DIVREAL
43587: ST_TO_ADDR
// if time < 0 then
43588: LD_VAR 0 8
43592: PUSH
43593: LD_INT 0
43595: LESS
43596: IFFALSE 43613
// time := time * - 1 ;
43598: LD_ADDR_VAR 0 8
43602: PUSH
43603: LD_VAR 0 8
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: MUL
43612: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43613: LD_VAR 0 8
43617: PUSH
43618: LD_INT 35
43620: PPUSH
43621: LD_INT 875
43623: PPUSH
43624: CALL_OW 12
43628: PLUS
43629: PPUSH
43630: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43634: LD_INT 1
43636: PPUSH
43637: LD_INT 5
43639: PPUSH
43640: CALL_OW 12
43644: PPUSH
43645: LD_VAR 0 1
43649: PPUSH
43650: LD_INT 1
43652: PPUSH
43653: CALL_OW 55
// end ;
43657: GO 43470
// end ;
43659: LD_VAR 0 5
43663: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43664: LD_INT 0
43666: PPUSH
43667: PPUSH
43668: PPUSH
43669: PPUSH
43670: PPUSH
43671: PPUSH
43672: PPUSH
43673: PPUSH
// if not turrets or not factories then
43674: LD_VAR 0 1
43678: NOT
43679: PUSH
43680: LD_VAR 0 2
43684: NOT
43685: OR
43686: IFFALSE 43690
// exit ;
43688: GO 43997
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43690: LD_ADDR_VAR 0 10
43694: PUSH
43695: LD_INT 5
43697: PUSH
43698: LD_INT 6
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 4
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: LD_INT 5
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 24
43732: PUSH
43733: LD_INT 25
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 23
43742: PUSH
43743: LD_INT 27
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 42
43756: PUSH
43757: LD_INT 43
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 44
43766: PUSH
43767: LD_INT 46
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 45
43776: PUSH
43777: LD_INT 47
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: LIST
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: LIST
43793: ST_TO_ADDR
// result := [ ] ;
43794: LD_ADDR_VAR 0 3
43798: PUSH
43799: EMPTY
43800: ST_TO_ADDR
// for i in turrets do
43801: LD_ADDR_VAR 0 4
43805: PUSH
43806: LD_VAR 0 1
43810: PUSH
43811: FOR_IN
43812: IFFALSE 43995
// begin nat := GetNation ( i ) ;
43814: LD_ADDR_VAR 0 7
43818: PUSH
43819: LD_VAR 0 4
43823: PPUSH
43824: CALL_OW 248
43828: ST_TO_ADDR
// weapon := 0 ;
43829: LD_ADDR_VAR 0 8
43833: PUSH
43834: LD_INT 0
43836: ST_TO_ADDR
// if not nat then
43837: LD_VAR 0 7
43841: NOT
43842: IFFALSE 43846
// continue ;
43844: GO 43811
// for j in list [ nat ] do
43846: LD_ADDR_VAR 0 5
43850: PUSH
43851: LD_VAR 0 10
43855: PUSH
43856: LD_VAR 0 7
43860: ARRAY
43861: PUSH
43862: FOR_IN
43863: IFFALSE 43904
// if GetBWeapon ( i ) = j [ 1 ] then
43865: LD_VAR 0 4
43869: PPUSH
43870: CALL_OW 269
43874: PUSH
43875: LD_VAR 0 5
43879: PUSH
43880: LD_INT 1
43882: ARRAY
43883: EQUAL
43884: IFFALSE 43902
// begin weapon := j [ 2 ] ;
43886: LD_ADDR_VAR 0 8
43890: PUSH
43891: LD_VAR 0 5
43895: PUSH
43896: LD_INT 2
43898: ARRAY
43899: ST_TO_ADDR
// break ;
43900: GO 43904
// end ;
43902: GO 43862
43904: POP
43905: POP
// if not weapon then
43906: LD_VAR 0 8
43910: NOT
43911: IFFALSE 43915
// continue ;
43913: GO 43811
// for k in factories do
43915: LD_ADDR_VAR 0 6
43919: PUSH
43920: LD_VAR 0 2
43924: PUSH
43925: FOR_IN
43926: IFFALSE 43991
// begin weapons := AvailableWeaponList ( k ) ;
43928: LD_ADDR_VAR 0 9
43932: PUSH
43933: LD_VAR 0 6
43937: PPUSH
43938: CALL_OW 478
43942: ST_TO_ADDR
// if not weapons then
43943: LD_VAR 0 9
43947: NOT
43948: IFFALSE 43952
// continue ;
43950: GO 43925
// if weapon in weapons then
43952: LD_VAR 0 8
43956: PUSH
43957: LD_VAR 0 9
43961: IN
43962: IFFALSE 43989
// begin result := [ i , weapon ] ;
43964: LD_ADDR_VAR 0 3
43968: PUSH
43969: LD_VAR 0 4
43973: PUSH
43974: LD_VAR 0 8
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: ST_TO_ADDR
// exit ;
43983: POP
43984: POP
43985: POP
43986: POP
43987: GO 43997
// end ; end ;
43989: GO 43925
43991: POP
43992: POP
// end ;
43993: GO 43811
43995: POP
43996: POP
// end ;
43997: LD_VAR 0 3
44001: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44002: LD_INT 0
44004: PPUSH
// if not side or side > 8 then
44005: LD_VAR 0 3
44009: NOT
44010: PUSH
44011: LD_VAR 0 3
44015: PUSH
44016: LD_INT 8
44018: GREATER
44019: OR
44020: IFFALSE 44024
// exit ;
44022: GO 44083
// if not range then
44024: LD_VAR 0 4
44028: NOT
44029: IFFALSE 44040
// range := - 12 ;
44031: LD_ADDR_VAR 0 4
44035: PUSH
44036: LD_INT 12
44038: NEG
44039: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44040: LD_VAR 0 1
44044: PPUSH
44045: LD_VAR 0 2
44049: PPUSH
44050: LD_VAR 0 3
44054: PPUSH
44055: LD_VAR 0 4
44059: PPUSH
44060: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44064: LD_VAR 0 1
44068: PPUSH
44069: LD_VAR 0 2
44073: PPUSH
44074: LD_VAR 0 3
44078: PPUSH
44079: CALL_OW 331
// end ;
44083: LD_VAR 0 5
44087: RET
// export function Video ( mode ) ; begin
44088: LD_INT 0
44090: PPUSH
// ingame_video = mode ;
44091: LD_ADDR_OWVAR 52
44095: PUSH
44096: LD_VAR 0 1
44100: ST_TO_ADDR
// interface_hidden = mode ;
44101: LD_ADDR_OWVAR 54
44105: PUSH
44106: LD_VAR 0 1
44110: ST_TO_ADDR
// end ;
44111: LD_VAR 0 2
44115: RET
// export function Join ( array , element ) ; begin
44116: LD_INT 0
44118: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_VAR 0 1
44128: PPUSH
44129: LD_VAR 0 1
44133: PUSH
44134: LD_INT 1
44136: PLUS
44137: PPUSH
44138: LD_VAR 0 2
44142: PPUSH
44143: CALL_OW 1
44147: ST_TO_ADDR
// end ;
44148: LD_VAR 0 3
44152: RET
// export function JoinUnion ( array , element ) ; begin
44153: LD_INT 0
44155: PPUSH
// result := array union element ;
44156: LD_ADDR_VAR 0 3
44160: PUSH
44161: LD_VAR 0 1
44165: PUSH
44166: LD_VAR 0 2
44170: UNION
44171: ST_TO_ADDR
// end ;
44172: LD_VAR 0 3
44176: RET
// export function GetBehemoths ( side ) ; begin
44177: LD_INT 0
44179: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
44180: LD_ADDR_VAR 0 2
44184: PUSH
44185: LD_INT 22
44187: PUSH
44188: LD_VAR 0 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 31
44199: PUSH
44200: LD_INT 25
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PPUSH
44211: CALL_OW 69
44215: ST_TO_ADDR
// end ;
44216: LD_VAR 0 2
44220: RET
// export function Shuffle ( array ) ; var i , index ; begin
44221: LD_INT 0
44223: PPUSH
44224: PPUSH
44225: PPUSH
// result := [ ] ;
44226: LD_ADDR_VAR 0 2
44230: PUSH
44231: EMPTY
44232: ST_TO_ADDR
// if not array then
44233: LD_VAR 0 1
44237: NOT
44238: IFFALSE 44242
// exit ;
44240: GO 44341
// Randomize ;
44242: CALL_OW 10
// for i = array downto 1 do
44246: LD_ADDR_VAR 0 3
44250: PUSH
44251: DOUBLE
44252: LD_VAR 0 1
44256: INC
44257: ST_TO_ADDR
44258: LD_INT 1
44260: PUSH
44261: FOR_DOWNTO
44262: IFFALSE 44339
// begin index := rand ( 1 , array ) ;
44264: LD_ADDR_VAR 0 4
44268: PUSH
44269: LD_INT 1
44271: PPUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 12
44281: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44282: LD_ADDR_VAR 0 2
44286: PUSH
44287: LD_VAR 0 2
44291: PPUSH
44292: LD_VAR 0 2
44296: PUSH
44297: LD_INT 1
44299: PLUS
44300: PPUSH
44301: LD_VAR 0 1
44305: PUSH
44306: LD_VAR 0 4
44310: ARRAY
44311: PPUSH
44312: CALL_OW 2
44316: ST_TO_ADDR
// array := Delete ( array , index ) ;
44317: LD_ADDR_VAR 0 1
44321: PUSH
44322: LD_VAR 0 1
44326: PPUSH
44327: LD_VAR 0 4
44331: PPUSH
44332: CALL_OW 3
44336: ST_TO_ADDR
// end ;
44337: GO 44261
44339: POP
44340: POP
// end ;
44341: LD_VAR 0 2
44345: RET
// export function GetBaseMaterials ( base ) ; begin
44346: LD_INT 0
44348: PPUSH
// result := [ 0 , 0 , 0 ] ;
44349: LD_ADDR_VAR 0 2
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: LIST
44367: ST_TO_ADDR
// if not base then
44368: LD_VAR 0 1
44372: NOT
44373: IFFALSE 44377
// exit ;
44375: GO 44426
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44377: LD_ADDR_VAR 0 2
44381: PUSH
44382: LD_VAR 0 1
44386: PPUSH
44387: LD_INT 1
44389: PPUSH
44390: CALL_OW 275
44394: PUSH
44395: LD_VAR 0 1
44399: PPUSH
44400: LD_INT 2
44402: PPUSH
44403: CALL_OW 275
44407: PUSH
44408: LD_VAR 0 1
44412: PPUSH
44413: LD_INT 3
44415: PPUSH
44416: CALL_OW 275
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: LIST
44425: ST_TO_ADDR
// end ;
44426: LD_VAR 0 2
44430: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44431: LD_INT 0
44433: PPUSH
44434: PPUSH
// result := array ;
44435: LD_ADDR_VAR 0 3
44439: PUSH
44440: LD_VAR 0 1
44444: ST_TO_ADDR
// if size >= result then
44445: LD_VAR 0 2
44449: PUSH
44450: LD_VAR 0 3
44454: GREATEREQUAL
44455: IFFALSE 44459
// exit ;
44457: GO 44509
// if size then
44459: LD_VAR 0 2
44463: IFFALSE 44509
// for i := array downto size do
44465: LD_ADDR_VAR 0 4
44469: PUSH
44470: DOUBLE
44471: LD_VAR 0 1
44475: INC
44476: ST_TO_ADDR
44477: LD_VAR 0 2
44481: PUSH
44482: FOR_DOWNTO
44483: IFFALSE 44507
// result := Delete ( result , result ) ;
44485: LD_ADDR_VAR 0 3
44489: PUSH
44490: LD_VAR 0 3
44494: PPUSH
44495: LD_VAR 0 3
44499: PPUSH
44500: CALL_OW 3
44504: ST_TO_ADDR
44505: GO 44482
44507: POP
44508: POP
// end ;
44509: LD_VAR 0 3
44513: RET
// export function ComExit ( unit ) ; var tmp ; begin
44514: LD_INT 0
44516: PPUSH
44517: PPUSH
// if not IsInUnit ( unit ) then
44518: LD_VAR 0 1
44522: PPUSH
44523: CALL_OW 310
44527: NOT
44528: IFFALSE 44532
// exit ;
44530: GO 44592
// tmp := IsInUnit ( unit ) ;
44532: LD_ADDR_VAR 0 3
44536: PUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: CALL_OW 310
44546: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44547: LD_VAR 0 3
44551: PPUSH
44552: CALL_OW 247
44556: PUSH
44557: LD_INT 2
44559: EQUAL
44560: IFFALSE 44573
// ComExitVehicle ( unit ) else
44562: LD_VAR 0 1
44566: PPUSH
44567: CALL_OW 121
44571: GO 44582
// ComExitBuilding ( unit ) ;
44573: LD_VAR 0 1
44577: PPUSH
44578: CALL_OW 122
// result := tmp ;
44582: LD_ADDR_VAR 0 2
44586: PUSH
44587: LD_VAR 0 3
44591: ST_TO_ADDR
// end ;
44592: LD_VAR 0 2
44596: RET
// export function ComExitAll ( units ) ; var i ; begin
44597: LD_INT 0
44599: PPUSH
44600: PPUSH
// if not units then
44601: LD_VAR 0 1
44605: NOT
44606: IFFALSE 44610
// exit ;
44608: GO 44636
// for i in units do
44610: LD_ADDR_VAR 0 3
44614: PUSH
44615: LD_VAR 0 1
44619: PUSH
44620: FOR_IN
44621: IFFALSE 44634
// ComExit ( i ) ;
44623: LD_VAR 0 3
44627: PPUSH
44628: CALL 44514 0 1
44632: GO 44620
44634: POP
44635: POP
// end ;
44636: LD_VAR 0 2
44640: RET
// export function ResetHc ; begin
44641: LD_INT 0
44643: PPUSH
// InitHc ;
44644: CALL_OW 19
// hc_importance := 0 ;
44648: LD_ADDR_OWVAR 32
44652: PUSH
44653: LD_INT 0
44655: ST_TO_ADDR
// end ;
44656: LD_VAR 0 1
44660: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44661: LD_INT 0
44663: PPUSH
44664: PPUSH
44665: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44666: LD_ADDR_VAR 0 6
44670: PUSH
44671: LD_VAR 0 1
44675: PUSH
44676: LD_VAR 0 3
44680: PLUS
44681: PUSH
44682: LD_INT 2
44684: DIV
44685: ST_TO_ADDR
// if _x < 0 then
44686: LD_VAR 0 6
44690: PUSH
44691: LD_INT 0
44693: LESS
44694: IFFALSE 44711
// _x := _x * - 1 ;
44696: LD_ADDR_VAR 0 6
44700: PUSH
44701: LD_VAR 0 6
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: MUL
44710: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44711: LD_ADDR_VAR 0 7
44715: PUSH
44716: LD_VAR 0 2
44720: PUSH
44721: LD_VAR 0 4
44725: PLUS
44726: PUSH
44727: LD_INT 2
44729: DIV
44730: ST_TO_ADDR
// if _y < 0 then
44731: LD_VAR 0 7
44735: PUSH
44736: LD_INT 0
44738: LESS
44739: IFFALSE 44756
// _y := _y * - 1 ;
44741: LD_ADDR_VAR 0 7
44745: PUSH
44746: LD_VAR 0 7
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: MUL
44755: ST_TO_ADDR
// result := [ _x , _y ] ;
44756: LD_ADDR_VAR 0 5
44760: PUSH
44761: LD_VAR 0 6
44765: PUSH
44766: LD_VAR 0 7
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// end ;
44775: LD_VAR 0 5
44779: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44780: LD_INT 0
44782: PPUSH
44783: PPUSH
44784: PPUSH
44785: PPUSH
// task := GetTaskList ( unit ) ;
44786: LD_ADDR_VAR 0 7
44790: PUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 437
44800: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44801: LD_VAR 0 7
44805: NOT
44806: PUSH
44807: LD_VAR 0 1
44811: PPUSH
44812: LD_VAR 0 2
44816: PPUSH
44817: CALL_OW 308
44821: NOT
44822: AND
44823: IFFALSE 44827
// exit ;
44825: GO 44945
// if IsInArea ( unit , area ) then
44827: LD_VAR 0 1
44831: PPUSH
44832: LD_VAR 0 2
44836: PPUSH
44837: CALL_OW 308
44841: IFFALSE 44859
// begin ComMoveToArea ( unit , goAway ) ;
44843: LD_VAR 0 1
44847: PPUSH
44848: LD_VAR 0 3
44852: PPUSH
44853: CALL_OW 113
// exit ;
44857: GO 44945
// end ; if task [ 1 ] [ 1 ] <> M then
44859: LD_VAR 0 7
44863: PUSH
44864: LD_INT 1
44866: ARRAY
44867: PUSH
44868: LD_INT 1
44870: ARRAY
44871: PUSH
44872: LD_STRING M
44874: NONEQUAL
44875: IFFALSE 44879
// exit ;
44877: GO 44945
// x := task [ 1 ] [ 2 ] ;
44879: LD_ADDR_VAR 0 5
44883: PUSH
44884: LD_VAR 0 7
44888: PUSH
44889: LD_INT 1
44891: ARRAY
44892: PUSH
44893: LD_INT 2
44895: ARRAY
44896: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44897: LD_ADDR_VAR 0 6
44901: PUSH
44902: LD_VAR 0 7
44906: PUSH
44907: LD_INT 1
44909: ARRAY
44910: PUSH
44911: LD_INT 3
44913: ARRAY
44914: ST_TO_ADDR
// if InArea ( x , y , area ) then
44915: LD_VAR 0 5
44919: PPUSH
44920: LD_VAR 0 6
44924: PPUSH
44925: LD_VAR 0 2
44929: PPUSH
44930: CALL_OW 309
44934: IFFALSE 44945
// ComStop ( unit ) ;
44936: LD_VAR 0 1
44940: PPUSH
44941: CALL_OW 141
// end ;
44945: LD_VAR 0 4
44949: RET
// export function Abs ( value ) ; begin
44950: LD_INT 0
44952: PPUSH
// result := value ;
44953: LD_ADDR_VAR 0 2
44957: PUSH
44958: LD_VAR 0 1
44962: ST_TO_ADDR
// if value < 0 then
44963: LD_VAR 0 1
44967: PUSH
44968: LD_INT 0
44970: LESS
44971: IFFALSE 44988
// result := value * - 1 ;
44973: LD_ADDR_VAR 0 2
44977: PUSH
44978: LD_VAR 0 1
44982: PUSH
44983: LD_INT 1
44985: NEG
44986: MUL
44987: ST_TO_ADDR
// end ;
44988: LD_VAR 0 2
44992: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44993: LD_INT 0
44995: PPUSH
44996: PPUSH
44997: PPUSH
44998: PPUSH
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
// if not unit or not building then
45003: LD_VAR 0 1
45007: NOT
45008: PUSH
45009: LD_VAR 0 2
45013: NOT
45014: OR
45015: IFFALSE 45019
// exit ;
45017: GO 45245
// x := GetX ( building ) ;
45019: LD_ADDR_VAR 0 4
45023: PUSH
45024: LD_VAR 0 2
45028: PPUSH
45029: CALL_OW 250
45033: ST_TO_ADDR
// y := GetY ( building ) ;
45034: LD_ADDR_VAR 0 6
45038: PUSH
45039: LD_VAR 0 2
45043: PPUSH
45044: CALL_OW 251
45048: ST_TO_ADDR
// d := GetDir ( building ) ;
45049: LD_ADDR_VAR 0 8
45053: PUSH
45054: LD_VAR 0 2
45058: PPUSH
45059: CALL_OW 254
45063: ST_TO_ADDR
// r := 4 ;
45064: LD_ADDR_VAR 0 9
45068: PUSH
45069: LD_INT 4
45071: ST_TO_ADDR
// for i := 1 to 5 do
45072: LD_ADDR_VAR 0 10
45076: PUSH
45077: DOUBLE
45078: LD_INT 1
45080: DEC
45081: ST_TO_ADDR
45082: LD_INT 5
45084: PUSH
45085: FOR_TO
45086: IFFALSE 45243
// begin _x := ShiftX ( x , d , r + i ) ;
45088: LD_ADDR_VAR 0 5
45092: PUSH
45093: LD_VAR 0 4
45097: PPUSH
45098: LD_VAR 0 8
45102: PPUSH
45103: LD_VAR 0 9
45107: PUSH
45108: LD_VAR 0 10
45112: PLUS
45113: PPUSH
45114: CALL_OW 272
45118: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45119: LD_ADDR_VAR 0 7
45123: PUSH
45124: LD_VAR 0 6
45128: PPUSH
45129: LD_VAR 0 8
45133: PPUSH
45134: LD_VAR 0 9
45138: PUSH
45139: LD_VAR 0 10
45143: PLUS
45144: PPUSH
45145: CALL_OW 273
45149: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45150: LD_VAR 0 5
45154: PPUSH
45155: LD_VAR 0 7
45159: PPUSH
45160: CALL_OW 488
45164: PUSH
45165: LD_VAR 0 5
45169: PPUSH
45170: LD_VAR 0 7
45174: PPUSH
45175: CALL_OW 428
45179: PPUSH
45180: CALL_OW 247
45184: PUSH
45185: LD_INT 3
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: IN
45195: NOT
45196: AND
45197: IFFALSE 45241
// begin ComMoveXY ( unit , _x , _y ) ;
45199: LD_VAR 0 1
45203: PPUSH
45204: LD_VAR 0 5
45208: PPUSH
45209: LD_VAR 0 7
45213: PPUSH
45214: CALL_OW 111
// result := [ _x , _y ] ;
45218: LD_ADDR_VAR 0 3
45222: PUSH
45223: LD_VAR 0 5
45227: PUSH
45228: LD_VAR 0 7
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: ST_TO_ADDR
// exit ;
45237: POP
45238: POP
45239: GO 45245
// end ; end ;
45241: GO 45085
45243: POP
45244: POP
// end ;
45245: LD_VAR 0 3
45249: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45250: LD_INT 0
45252: PPUSH
45253: PPUSH
45254: PPUSH
// result := 0 ;
45255: LD_ADDR_VAR 0 3
45259: PUSH
45260: LD_INT 0
45262: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45263: LD_VAR 0 1
45267: PUSH
45268: LD_INT 0
45270: LESS
45271: PUSH
45272: LD_VAR 0 1
45276: PUSH
45277: LD_INT 8
45279: GREATER
45280: OR
45281: PUSH
45282: LD_VAR 0 2
45286: PUSH
45287: LD_INT 0
45289: LESS
45290: OR
45291: PUSH
45292: LD_VAR 0 2
45296: PUSH
45297: LD_INT 8
45299: GREATER
45300: OR
45301: IFFALSE 45305
// exit ;
45303: GO 45380
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45305: LD_ADDR_VAR 0 4
45309: PUSH
45310: LD_INT 22
45312: PUSH
45313: LD_VAR 0 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PPUSH
45322: CALL_OW 69
45326: PUSH
45327: FOR_IN
45328: IFFALSE 45378
// begin un := UnitShoot ( i ) ;
45330: LD_ADDR_VAR 0 5
45334: PUSH
45335: LD_VAR 0 4
45339: PPUSH
45340: CALL_OW 504
45344: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45345: LD_VAR 0 5
45349: PPUSH
45350: CALL_OW 255
45354: PUSH
45355: LD_VAR 0 1
45359: EQUAL
45360: IFFALSE 45376
// begin result := un ;
45362: LD_ADDR_VAR 0 3
45366: PUSH
45367: LD_VAR 0 5
45371: ST_TO_ADDR
// exit ;
45372: POP
45373: POP
45374: GO 45380
// end ; end ;
45376: GO 45327
45378: POP
45379: POP
// end ;
45380: LD_VAR 0 3
45384: RET
// export function GetCargoBay ( units ) ; begin
45385: LD_INT 0
45387: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45388: LD_ADDR_VAR 0 2
45392: PUSH
45393: LD_VAR 0 1
45397: PPUSH
45398: LD_INT 2
45400: PUSH
45401: LD_INT 34
45403: PUSH
45404: LD_INT 12
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 34
45413: PUSH
45414: LD_INT 51
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 34
45423: PUSH
45424: LD_INT 32
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 34
45433: PUSH
45434: LD_INT 89
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: PPUSH
45448: CALL_OW 72
45452: ST_TO_ADDR
// end ;
45453: LD_VAR 0 2
45457: RET
// export function Negate ( value ) ; begin
45458: LD_INT 0
45460: PPUSH
// result := not value ;
45461: LD_ADDR_VAR 0 2
45465: PUSH
45466: LD_VAR 0 1
45470: NOT
45471: ST_TO_ADDR
// end ;
45472: LD_VAR 0 2
45476: RET
// export function Inc ( value ) ; begin
45477: LD_INT 0
45479: PPUSH
// result := value + 1 ;
45480: LD_ADDR_VAR 0 2
45484: PUSH
45485: LD_VAR 0 1
45489: PUSH
45490: LD_INT 1
45492: PLUS
45493: ST_TO_ADDR
// end ;
45494: LD_VAR 0 2
45498: RET
// export function Dec ( value ) ; begin
45499: LD_INT 0
45501: PPUSH
// result := value - 1 ;
45502: LD_ADDR_VAR 0 2
45506: PUSH
45507: LD_VAR 0 1
45511: PUSH
45512: LD_INT 1
45514: MINUS
45515: ST_TO_ADDR
// end ;
45516: LD_VAR 0 2
45520: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45521: LD_INT 0
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45531: LD_VAR 0 1
45535: PPUSH
45536: LD_VAR 0 2
45540: PPUSH
45541: CALL_OW 488
45545: NOT
45546: PUSH
45547: LD_VAR 0 3
45551: PPUSH
45552: LD_VAR 0 4
45556: PPUSH
45557: CALL_OW 488
45561: NOT
45562: OR
45563: IFFALSE 45576
// begin result := - 1 ;
45565: LD_ADDR_VAR 0 5
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: ST_TO_ADDR
// exit ;
45574: GO 45811
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45576: LD_ADDR_VAR 0 12
45580: PUSH
45581: LD_VAR 0 1
45585: PPUSH
45586: LD_VAR 0 2
45590: PPUSH
45591: LD_VAR 0 3
45595: PPUSH
45596: LD_VAR 0 4
45600: PPUSH
45601: CALL 44661 0 4
45605: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45606: LD_ADDR_VAR 0 11
45610: PUSH
45611: LD_VAR 0 1
45615: PPUSH
45616: LD_VAR 0 2
45620: PPUSH
45621: LD_VAR 0 12
45625: PUSH
45626: LD_INT 1
45628: ARRAY
45629: PPUSH
45630: LD_VAR 0 12
45634: PUSH
45635: LD_INT 2
45637: ARRAY
45638: PPUSH
45639: CALL_OW 298
45643: ST_TO_ADDR
// distance := 9999 ;
45644: LD_ADDR_VAR 0 10
45648: PUSH
45649: LD_INT 9999
45651: ST_TO_ADDR
// for i := 0 to 5 do
45652: LD_ADDR_VAR 0 6
45656: PUSH
45657: DOUBLE
45658: LD_INT 0
45660: DEC
45661: ST_TO_ADDR
45662: LD_INT 5
45664: PUSH
45665: FOR_TO
45666: IFFALSE 45809
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45668: LD_ADDR_VAR 0 7
45672: PUSH
45673: LD_VAR 0 1
45677: PPUSH
45678: LD_VAR 0 6
45682: PPUSH
45683: LD_VAR 0 11
45687: PPUSH
45688: CALL_OW 272
45692: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45693: LD_ADDR_VAR 0 8
45697: PUSH
45698: LD_VAR 0 2
45702: PPUSH
45703: LD_VAR 0 6
45707: PPUSH
45708: LD_VAR 0 11
45712: PPUSH
45713: CALL_OW 273
45717: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45718: LD_VAR 0 7
45722: PPUSH
45723: LD_VAR 0 8
45727: PPUSH
45728: CALL_OW 488
45732: NOT
45733: IFFALSE 45737
// continue ;
45735: GO 45665
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45737: LD_ADDR_VAR 0 9
45741: PUSH
45742: LD_VAR 0 12
45746: PUSH
45747: LD_INT 1
45749: ARRAY
45750: PPUSH
45751: LD_VAR 0 12
45755: PUSH
45756: LD_INT 2
45758: ARRAY
45759: PPUSH
45760: LD_VAR 0 7
45764: PPUSH
45765: LD_VAR 0 8
45769: PPUSH
45770: CALL_OW 298
45774: ST_TO_ADDR
// if tmp < distance then
45775: LD_VAR 0 9
45779: PUSH
45780: LD_VAR 0 10
45784: LESS
45785: IFFALSE 45807
// begin result := i ;
45787: LD_ADDR_VAR 0 5
45791: PUSH
45792: LD_VAR 0 6
45796: ST_TO_ADDR
// distance := tmp ;
45797: LD_ADDR_VAR 0 10
45801: PUSH
45802: LD_VAR 0 9
45806: ST_TO_ADDR
// end ; end ;
45807: GO 45665
45809: POP
45810: POP
// end ;
45811: LD_VAR 0 5
45815: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45816: LD_INT 0
45818: PPUSH
45819: PPUSH
// if not driver or not IsInUnit ( driver ) then
45820: LD_VAR 0 1
45824: NOT
45825: PUSH
45826: LD_VAR 0 1
45830: PPUSH
45831: CALL_OW 310
45835: NOT
45836: OR
45837: IFFALSE 45841
// exit ;
45839: GO 45931
// vehicle := IsInUnit ( driver ) ;
45841: LD_ADDR_VAR 0 3
45845: PUSH
45846: LD_VAR 0 1
45850: PPUSH
45851: CALL_OW 310
45855: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45856: LD_VAR 0 1
45860: PPUSH
45861: LD_STRING \
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: LD_INT 0
45878: PUSH
45879: LD_INT 0
45881: PUSH
45882: EMPTY
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: PUSH
45891: LD_STRING E
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: LD_VAR 0 3
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PPUSH
45927: CALL_OW 446
// end ;
45931: LD_VAR 0 2
45935: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45936: LD_INT 0
45938: PPUSH
45939: PPUSH
// if not driver or not IsInUnit ( driver ) then
45940: LD_VAR 0 1
45944: NOT
45945: PUSH
45946: LD_VAR 0 1
45950: PPUSH
45951: CALL_OW 310
45955: NOT
45956: OR
45957: IFFALSE 45961
// exit ;
45959: GO 46051
// vehicle := IsInUnit ( driver ) ;
45961: LD_ADDR_VAR 0 3
45965: PUSH
45966: LD_VAR 0 1
45970: PPUSH
45971: CALL_OW 310
45975: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45976: LD_VAR 0 1
45980: PPUSH
45981: LD_STRING \
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: PUSH
46011: LD_STRING E
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: LD_VAR 0 3
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PPUSH
46047: CALL_OW 447
// end ;
46051: LD_VAR 0 2
46055: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46056: LD_INT 0
46058: PPUSH
46059: PPUSH
46060: PPUSH
// tmp := [ ] ;
46061: LD_ADDR_VAR 0 5
46065: PUSH
46066: EMPTY
46067: ST_TO_ADDR
// for i in units do
46068: LD_ADDR_VAR 0 4
46072: PUSH
46073: LD_VAR 0 1
46077: PUSH
46078: FOR_IN
46079: IFFALSE 46117
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46081: LD_ADDR_VAR 0 5
46085: PUSH
46086: LD_VAR 0 5
46090: PPUSH
46091: LD_VAR 0 5
46095: PUSH
46096: LD_INT 1
46098: PLUS
46099: PPUSH
46100: LD_VAR 0 4
46104: PPUSH
46105: CALL_OW 256
46109: PPUSH
46110: CALL_OW 2
46114: ST_TO_ADDR
46115: GO 46078
46117: POP
46118: POP
// if not tmp then
46119: LD_VAR 0 5
46123: NOT
46124: IFFALSE 46128
// exit ;
46126: GO 46176
// if asc then
46128: LD_VAR 0 2
46132: IFFALSE 46156
// result := SortListByListAsc ( units , tmp ) else
46134: LD_ADDR_VAR 0 3
46138: PUSH
46139: LD_VAR 0 1
46143: PPUSH
46144: LD_VAR 0 5
46148: PPUSH
46149: CALL_OW 76
46153: ST_TO_ADDR
46154: GO 46176
// result := SortListByListDesc ( units , tmp ) ;
46156: LD_ADDR_VAR 0 3
46160: PUSH
46161: LD_VAR 0 1
46165: PPUSH
46166: LD_VAR 0 5
46170: PPUSH
46171: CALL_OW 77
46175: ST_TO_ADDR
// end ;
46176: LD_VAR 0 3
46180: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46181: LD_INT 0
46183: PPUSH
46184: PPUSH
// task := GetTaskList ( mech ) ;
46185: LD_ADDR_VAR 0 4
46189: PUSH
46190: LD_VAR 0 1
46194: PPUSH
46195: CALL_OW 437
46199: ST_TO_ADDR
// if not task then
46200: LD_VAR 0 4
46204: NOT
46205: IFFALSE 46209
// exit ;
46207: GO 46251
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46209: LD_ADDR_VAR 0 3
46213: PUSH
46214: LD_VAR 0 4
46218: PUSH
46219: LD_INT 1
46221: ARRAY
46222: PUSH
46223: LD_INT 1
46225: ARRAY
46226: PUSH
46227: LD_STRING r
46229: EQUAL
46230: PUSH
46231: LD_VAR 0 4
46235: PUSH
46236: LD_INT 1
46238: ARRAY
46239: PUSH
46240: LD_INT 4
46242: ARRAY
46243: PUSH
46244: LD_VAR 0 2
46248: EQUAL
46249: AND
46250: ST_TO_ADDR
// end ;
46251: LD_VAR 0 3
46255: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46256: LD_INT 0
46258: PPUSH
// SetDir ( unit , d ) ;
46259: LD_VAR 0 1
46263: PPUSH
46264: LD_VAR 0 4
46268: PPUSH
46269: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46273: LD_VAR 0 1
46277: PPUSH
46278: LD_VAR 0 2
46282: PPUSH
46283: LD_VAR 0 3
46287: PPUSH
46288: LD_VAR 0 5
46292: PPUSH
46293: CALL_OW 48
// end ;
46297: LD_VAR 0 6
46301: RET
// export function ToNaturalNumber ( number ) ; begin
46302: LD_INT 0
46304: PPUSH
// result := number div 1 ;
46305: LD_ADDR_VAR 0 2
46309: PUSH
46310: LD_VAR 0 1
46314: PUSH
46315: LD_INT 1
46317: DIV
46318: ST_TO_ADDR
// if number < 0 then
46319: LD_VAR 0 1
46323: PUSH
46324: LD_INT 0
46326: LESS
46327: IFFALSE 46337
// result := 0 ;
46329: LD_ADDR_VAR 0 2
46333: PUSH
46334: LD_INT 0
46336: ST_TO_ADDR
// end ;
46337: LD_VAR 0 2
46341: RET
// export function SortByClass ( units , class ) ; var un ; begin
46342: LD_INT 0
46344: PPUSH
46345: PPUSH
// if not units or not class then
46346: LD_VAR 0 1
46350: NOT
46351: PUSH
46352: LD_VAR 0 2
46356: NOT
46357: OR
46358: IFFALSE 46362
// exit ;
46360: GO 46457
// result := [ ] ;
46362: LD_ADDR_VAR 0 3
46366: PUSH
46367: EMPTY
46368: ST_TO_ADDR
// for un in units do
46369: LD_ADDR_VAR 0 4
46373: PUSH
46374: LD_VAR 0 1
46378: PUSH
46379: FOR_IN
46380: IFFALSE 46455
// if GetClass ( un ) = class then
46382: LD_VAR 0 4
46386: PPUSH
46387: CALL_OW 257
46391: PUSH
46392: LD_VAR 0 2
46396: EQUAL
46397: IFFALSE 46424
// result := Insert ( result , 1 , un ) else
46399: LD_ADDR_VAR 0 3
46403: PUSH
46404: LD_VAR 0 3
46408: PPUSH
46409: LD_INT 1
46411: PPUSH
46412: LD_VAR 0 4
46416: PPUSH
46417: CALL_OW 2
46421: ST_TO_ADDR
46422: GO 46453
// result := Replace ( result , result + 1 , un ) ;
46424: LD_ADDR_VAR 0 3
46428: PUSH
46429: LD_VAR 0 3
46433: PPUSH
46434: LD_VAR 0 3
46438: PUSH
46439: LD_INT 1
46441: PLUS
46442: PPUSH
46443: LD_VAR 0 4
46447: PPUSH
46448: CALL_OW 1
46452: ST_TO_ADDR
46453: GO 46379
46455: POP
46456: POP
// end ;
46457: LD_VAR 0 3
46461: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46462: LD_INT 0
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
// result := [ ] ;
46471: LD_ADDR_VAR 0 4
46475: PUSH
46476: EMPTY
46477: ST_TO_ADDR
// if x - r < 0 then
46478: LD_VAR 0 1
46482: PUSH
46483: LD_VAR 0 3
46487: MINUS
46488: PUSH
46489: LD_INT 0
46491: LESS
46492: IFFALSE 46504
// min_x := 0 else
46494: LD_ADDR_VAR 0 8
46498: PUSH
46499: LD_INT 0
46501: ST_TO_ADDR
46502: GO 46520
// min_x := x - r ;
46504: LD_ADDR_VAR 0 8
46508: PUSH
46509: LD_VAR 0 1
46513: PUSH
46514: LD_VAR 0 3
46518: MINUS
46519: ST_TO_ADDR
// if y - r < 0 then
46520: LD_VAR 0 2
46524: PUSH
46525: LD_VAR 0 3
46529: MINUS
46530: PUSH
46531: LD_INT 0
46533: LESS
46534: IFFALSE 46546
// min_y := 0 else
46536: LD_ADDR_VAR 0 7
46540: PUSH
46541: LD_INT 0
46543: ST_TO_ADDR
46544: GO 46562
// min_y := y - r ;
46546: LD_ADDR_VAR 0 7
46550: PUSH
46551: LD_VAR 0 2
46555: PUSH
46556: LD_VAR 0 3
46560: MINUS
46561: ST_TO_ADDR
// max_x := x + r ;
46562: LD_ADDR_VAR 0 9
46566: PUSH
46567: LD_VAR 0 1
46571: PUSH
46572: LD_VAR 0 3
46576: PLUS
46577: ST_TO_ADDR
// max_y := y + r ;
46578: LD_ADDR_VAR 0 10
46582: PUSH
46583: LD_VAR 0 2
46587: PUSH
46588: LD_VAR 0 3
46592: PLUS
46593: ST_TO_ADDR
// for _x = min_x to max_x do
46594: LD_ADDR_VAR 0 5
46598: PUSH
46599: DOUBLE
46600: LD_VAR 0 8
46604: DEC
46605: ST_TO_ADDR
46606: LD_VAR 0 9
46610: PUSH
46611: FOR_TO
46612: IFFALSE 46713
// for _y = min_y to max_y do
46614: LD_ADDR_VAR 0 6
46618: PUSH
46619: DOUBLE
46620: LD_VAR 0 7
46624: DEC
46625: ST_TO_ADDR
46626: LD_VAR 0 10
46630: PUSH
46631: FOR_TO
46632: IFFALSE 46709
// begin if not ValidHex ( _x , _y ) then
46634: LD_VAR 0 5
46638: PPUSH
46639: LD_VAR 0 6
46643: PPUSH
46644: CALL_OW 488
46648: NOT
46649: IFFALSE 46653
// continue ;
46651: GO 46631
// if GetResourceTypeXY ( _x , _y ) then
46653: LD_VAR 0 5
46657: PPUSH
46658: LD_VAR 0 6
46662: PPUSH
46663: CALL_OW 283
46667: IFFALSE 46707
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46669: LD_ADDR_VAR 0 4
46673: PUSH
46674: LD_VAR 0 4
46678: PPUSH
46679: LD_VAR 0 4
46683: PUSH
46684: LD_INT 1
46686: PLUS
46687: PPUSH
46688: LD_VAR 0 5
46692: PUSH
46693: LD_VAR 0 6
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PPUSH
46702: CALL_OW 1
46706: ST_TO_ADDR
// end ;
46707: GO 46631
46709: POP
46710: POP
46711: GO 46611
46713: POP
46714: POP
// end ;
46715: LD_VAR 0 4
46719: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46720: LD_INT 0
46722: PPUSH
46723: PPUSH
46724: PPUSH
46725: PPUSH
46726: PPUSH
46727: PPUSH
46728: PPUSH
46729: PPUSH
// if not units then
46730: LD_VAR 0 1
46734: NOT
46735: IFFALSE 46739
// exit ;
46737: GO 47263
// result := UnitFilter ( units , [ f_ok ] ) ;
46739: LD_ADDR_VAR 0 3
46743: PUSH
46744: LD_VAR 0 1
46748: PPUSH
46749: LD_INT 50
46751: PUSH
46752: EMPTY
46753: LIST
46754: PPUSH
46755: CALL_OW 72
46759: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46760: LD_ADDR_VAR 0 8
46764: PUSH
46765: LD_VAR 0 1
46769: PUSH
46770: LD_INT 1
46772: ARRAY
46773: PPUSH
46774: CALL_OW 255
46778: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46779: LD_ADDR_VAR 0 10
46783: PUSH
46784: LD_INT 29
46786: PUSH
46787: LD_INT 91
46789: PUSH
46790: LD_INT 49
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: LIST
46797: ST_TO_ADDR
// if not result then
46798: LD_VAR 0 3
46802: NOT
46803: IFFALSE 46807
// exit ;
46805: GO 47263
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46807: LD_ADDR_VAR 0 5
46811: PUSH
46812: LD_INT 81
46814: PUSH
46815: LD_VAR 0 8
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PPUSH
46824: CALL_OW 69
46828: ST_TO_ADDR
// for i in result do
46829: LD_ADDR_VAR 0 4
46833: PUSH
46834: LD_VAR 0 3
46838: PUSH
46839: FOR_IN
46840: IFFALSE 47261
// begin tag := GetTag ( i ) + 1 ;
46842: LD_ADDR_VAR 0 9
46846: PUSH
46847: LD_VAR 0 4
46851: PPUSH
46852: CALL_OW 110
46856: PUSH
46857: LD_INT 1
46859: PLUS
46860: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46861: LD_ADDR_VAR 0 7
46865: PUSH
46866: LD_VAR 0 4
46870: PPUSH
46871: CALL_OW 250
46875: PPUSH
46876: LD_VAR 0 4
46880: PPUSH
46881: CALL_OW 251
46885: PPUSH
46886: LD_INT 6
46888: PPUSH
46889: CALL 46462 0 3
46893: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46894: LD_VAR 0 4
46898: PPUSH
46899: CALL_OW 247
46903: PUSH
46904: LD_INT 2
46906: EQUAL
46907: PUSH
46908: LD_VAR 0 7
46912: AND
46913: PUSH
46914: LD_VAR 0 4
46918: PPUSH
46919: CALL_OW 264
46923: PUSH
46924: LD_VAR 0 10
46928: IN
46929: NOT
46930: AND
46931: IFFALSE 46970
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46933: LD_VAR 0 4
46937: PPUSH
46938: LD_VAR 0 7
46942: PUSH
46943: LD_INT 1
46945: ARRAY
46946: PUSH
46947: LD_INT 1
46949: ARRAY
46950: PPUSH
46951: LD_VAR 0 7
46955: PUSH
46956: LD_INT 1
46958: ARRAY
46959: PUSH
46960: LD_INT 2
46962: ARRAY
46963: PPUSH
46964: CALL_OW 116
46968: GO 47259
// if path > tag then
46970: LD_VAR 0 2
46974: PUSH
46975: LD_VAR 0 9
46979: GREATER
46980: IFFALSE 47188
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46982: LD_ADDR_VAR 0 6
46986: PUSH
46987: LD_VAR 0 5
46991: PPUSH
46992: LD_INT 91
46994: PUSH
46995: LD_VAR 0 4
46999: PUSH
47000: LD_INT 8
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: PPUSH
47008: CALL_OW 72
47012: ST_TO_ADDR
// if nearEnemy then
47013: LD_VAR 0 6
47017: IFFALSE 47086
// begin if GetWeapon ( i ) = ru_time_lapser then
47019: LD_VAR 0 4
47023: PPUSH
47024: CALL_OW 264
47028: PUSH
47029: LD_INT 49
47031: EQUAL
47032: IFFALSE 47060
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47034: LD_VAR 0 4
47038: PPUSH
47039: LD_VAR 0 6
47043: PPUSH
47044: LD_VAR 0 4
47048: PPUSH
47049: CALL_OW 74
47053: PPUSH
47054: CALL_OW 112
47058: GO 47084
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
47060: LD_VAR 0 4
47064: PPUSH
47065: LD_VAR 0 6
47069: PPUSH
47070: LD_VAR 0 4
47074: PPUSH
47075: CALL_OW 74
47079: PPUSH
47080: CALL 48188 0 2
// end else
47084: GO 47186
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47086: LD_VAR 0 4
47090: PPUSH
47091: LD_VAR 0 2
47095: PUSH
47096: LD_VAR 0 9
47100: ARRAY
47101: PUSH
47102: LD_INT 1
47104: ARRAY
47105: PPUSH
47106: LD_VAR 0 2
47110: PUSH
47111: LD_VAR 0 9
47115: ARRAY
47116: PUSH
47117: LD_INT 2
47119: ARRAY
47120: PPUSH
47121: CALL_OW 297
47125: PUSH
47126: LD_INT 6
47128: GREATER
47129: IFFALSE 47172
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47131: LD_VAR 0 4
47135: PPUSH
47136: LD_VAR 0 2
47140: PUSH
47141: LD_VAR 0 9
47145: ARRAY
47146: PUSH
47147: LD_INT 1
47149: ARRAY
47150: PPUSH
47151: LD_VAR 0 2
47155: PUSH
47156: LD_VAR 0 9
47160: ARRAY
47161: PUSH
47162: LD_INT 2
47164: ARRAY
47165: PPUSH
47166: CALL_OW 114
47170: GO 47186
// SetTag ( i , tag ) ;
47172: LD_VAR 0 4
47176: PPUSH
47177: LD_VAR 0 9
47181: PPUSH
47182: CALL_OW 109
// end else
47186: GO 47259
// if enemy then
47188: LD_VAR 0 5
47192: IFFALSE 47259
// begin if GetWeapon ( i ) = ru_time_lapser then
47194: LD_VAR 0 4
47198: PPUSH
47199: CALL_OW 264
47203: PUSH
47204: LD_INT 49
47206: EQUAL
47207: IFFALSE 47235
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47209: LD_VAR 0 4
47213: PPUSH
47214: LD_VAR 0 5
47218: PPUSH
47219: LD_VAR 0 4
47223: PPUSH
47224: CALL_OW 74
47228: PPUSH
47229: CALL_OW 112
47233: GO 47259
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47235: LD_VAR 0 4
47239: PPUSH
47240: LD_VAR 0 5
47244: PPUSH
47245: LD_VAR 0 4
47249: PPUSH
47250: CALL_OW 74
47254: PPUSH
47255: CALL 48188 0 2
// end ; end ;
47259: GO 46839
47261: POP
47262: POP
// end ;
47263: LD_VAR 0 3
47267: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47268: LD_INT 0
47270: PPUSH
47271: PPUSH
47272: PPUSH
// if not unit or IsInUnit ( unit ) then
47273: LD_VAR 0 1
47277: NOT
47278: PUSH
47279: LD_VAR 0 1
47283: PPUSH
47284: CALL_OW 310
47288: OR
47289: IFFALSE 47293
// exit ;
47291: GO 47384
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47293: LD_ADDR_VAR 0 4
47297: PUSH
47298: LD_VAR 0 1
47302: PPUSH
47303: CALL_OW 250
47307: PPUSH
47308: LD_VAR 0 2
47312: PPUSH
47313: LD_INT 1
47315: PPUSH
47316: CALL_OW 272
47320: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47321: LD_ADDR_VAR 0 5
47325: PUSH
47326: LD_VAR 0 1
47330: PPUSH
47331: CALL_OW 251
47335: PPUSH
47336: LD_VAR 0 2
47340: PPUSH
47341: LD_INT 1
47343: PPUSH
47344: CALL_OW 273
47348: ST_TO_ADDR
// if ValidHex ( x , y ) then
47349: LD_VAR 0 4
47353: PPUSH
47354: LD_VAR 0 5
47358: PPUSH
47359: CALL_OW 488
47363: IFFALSE 47384
// ComTurnXY ( unit , x , y ) ;
47365: LD_VAR 0 1
47369: PPUSH
47370: LD_VAR 0 4
47374: PPUSH
47375: LD_VAR 0 5
47379: PPUSH
47380: CALL_OW 118
// end ;
47384: LD_VAR 0 3
47388: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47389: LD_INT 0
47391: PPUSH
47392: PPUSH
// result := false ;
47393: LD_ADDR_VAR 0 3
47397: PUSH
47398: LD_INT 0
47400: ST_TO_ADDR
// if not units then
47401: LD_VAR 0 2
47405: NOT
47406: IFFALSE 47410
// exit ;
47408: GO 47455
// for i in units do
47410: LD_ADDR_VAR 0 4
47414: PUSH
47415: LD_VAR 0 2
47419: PUSH
47420: FOR_IN
47421: IFFALSE 47453
// if See ( side , i ) then
47423: LD_VAR 0 1
47427: PPUSH
47428: LD_VAR 0 4
47432: PPUSH
47433: CALL_OW 292
47437: IFFALSE 47451
// begin result := true ;
47439: LD_ADDR_VAR 0 3
47443: PUSH
47444: LD_INT 1
47446: ST_TO_ADDR
// exit ;
47447: POP
47448: POP
47449: GO 47455
// end ;
47451: GO 47420
47453: POP
47454: POP
// end ;
47455: LD_VAR 0 3
47459: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47460: LD_INT 0
47462: PPUSH
47463: PPUSH
47464: PPUSH
47465: PPUSH
// if not unit or not points then
47466: LD_VAR 0 1
47470: NOT
47471: PUSH
47472: LD_VAR 0 2
47476: NOT
47477: OR
47478: IFFALSE 47482
// exit ;
47480: GO 47572
// dist := 99999 ;
47482: LD_ADDR_VAR 0 5
47486: PUSH
47487: LD_INT 99999
47489: ST_TO_ADDR
// for i in points do
47490: LD_ADDR_VAR 0 4
47494: PUSH
47495: LD_VAR 0 2
47499: PUSH
47500: FOR_IN
47501: IFFALSE 47570
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47503: LD_ADDR_VAR 0 6
47507: PUSH
47508: LD_VAR 0 1
47512: PPUSH
47513: LD_VAR 0 4
47517: PUSH
47518: LD_INT 1
47520: ARRAY
47521: PPUSH
47522: LD_VAR 0 4
47526: PUSH
47527: LD_INT 2
47529: ARRAY
47530: PPUSH
47531: CALL_OW 297
47535: ST_TO_ADDR
// if tmpDist < dist then
47536: LD_VAR 0 6
47540: PUSH
47541: LD_VAR 0 5
47545: LESS
47546: IFFALSE 47568
// begin result := i ;
47548: LD_ADDR_VAR 0 3
47552: PUSH
47553: LD_VAR 0 4
47557: ST_TO_ADDR
// dist := tmpDist ;
47558: LD_ADDR_VAR 0 5
47562: PUSH
47563: LD_VAR 0 6
47567: ST_TO_ADDR
// end ; end ;
47568: GO 47500
47570: POP
47571: POP
// end ;
47572: LD_VAR 0 3
47576: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47577: LD_INT 0
47579: PPUSH
// uc_side := side ;
47580: LD_ADDR_OWVAR 20
47584: PUSH
47585: LD_VAR 0 1
47589: ST_TO_ADDR
// uc_nation := 3 ;
47590: LD_ADDR_OWVAR 21
47594: PUSH
47595: LD_INT 3
47597: ST_TO_ADDR
// vc_chassis := 25 ;
47598: LD_ADDR_OWVAR 37
47602: PUSH
47603: LD_INT 25
47605: ST_TO_ADDR
// vc_engine := engine_siberite ;
47606: LD_ADDR_OWVAR 39
47610: PUSH
47611: LD_INT 3
47613: ST_TO_ADDR
// vc_control := control_computer ;
47614: LD_ADDR_OWVAR 38
47618: PUSH
47619: LD_INT 3
47621: ST_TO_ADDR
// vc_weapon := 59 ;
47622: LD_ADDR_OWVAR 40
47626: PUSH
47627: LD_INT 59
47629: ST_TO_ADDR
// result := CreateVehicle ;
47630: LD_ADDR_VAR 0 5
47634: PUSH
47635: CALL_OW 45
47639: ST_TO_ADDR
// SetDir ( result , d ) ;
47640: LD_VAR 0 5
47644: PPUSH
47645: LD_VAR 0 4
47649: PPUSH
47650: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47654: LD_VAR 0 5
47658: PPUSH
47659: LD_VAR 0 2
47663: PPUSH
47664: LD_VAR 0 3
47668: PPUSH
47669: LD_INT 0
47671: PPUSH
47672: CALL_OW 48
// end ;
47676: LD_VAR 0 5
47680: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47681: LD_INT 0
47683: PPUSH
47684: PPUSH
47685: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47686: LD_ADDR_VAR 0 2
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47709: LD_VAR 0 1
47713: NOT
47714: PUSH
47715: LD_VAR 0 1
47719: PPUSH
47720: CALL_OW 264
47724: PUSH
47725: LD_INT 12
47727: PUSH
47728: LD_INT 51
47730: PUSH
47731: LD_INT 32
47733: PUSH
47734: LD_INT 89
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: IN
47743: NOT
47744: OR
47745: IFFALSE 47749
// exit ;
47747: GO 47847
// for i := 1 to 3 do
47749: LD_ADDR_VAR 0 3
47753: PUSH
47754: DOUBLE
47755: LD_INT 1
47757: DEC
47758: ST_TO_ADDR
47759: LD_INT 3
47761: PUSH
47762: FOR_TO
47763: IFFALSE 47845
// begin tmp := GetCargo ( cargo , i ) ;
47765: LD_ADDR_VAR 0 4
47769: PUSH
47770: LD_VAR 0 1
47774: PPUSH
47775: LD_VAR 0 3
47779: PPUSH
47780: CALL_OW 289
47784: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47785: LD_ADDR_VAR 0 2
47789: PUSH
47790: LD_VAR 0 2
47794: PPUSH
47795: LD_VAR 0 3
47799: PPUSH
47800: LD_VAR 0 4
47804: PPUSH
47805: CALL_OW 1
47809: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47810: LD_ADDR_VAR 0 2
47814: PUSH
47815: LD_VAR 0 2
47819: PPUSH
47820: LD_INT 4
47822: PPUSH
47823: LD_VAR 0 2
47827: PUSH
47828: LD_INT 4
47830: ARRAY
47831: PUSH
47832: LD_VAR 0 4
47836: PLUS
47837: PPUSH
47838: CALL_OW 1
47842: ST_TO_ADDR
// end ;
47843: GO 47762
47845: POP
47846: POP
// end ;
47847: LD_VAR 0 2
47851: RET
// export function Length ( array ) ; begin
47852: LD_INT 0
47854: PPUSH
// result := array + 0 ;
47855: LD_ADDR_VAR 0 2
47859: PUSH
47860: LD_VAR 0 1
47864: PUSH
47865: LD_INT 0
47867: PLUS
47868: ST_TO_ADDR
// end ;
47869: LD_VAR 0 2
47873: RET
// export function PrepareArray ( array ) ; begin
47874: LD_INT 0
47876: PPUSH
// result := array diff 0 ;
47877: LD_ADDR_VAR 0 2
47881: PUSH
47882: LD_VAR 0 1
47886: PUSH
47887: LD_INT 0
47889: DIFF
47890: ST_TO_ADDR
// if not result [ 1 ] then
47891: LD_VAR 0 2
47895: PUSH
47896: LD_INT 1
47898: ARRAY
47899: NOT
47900: IFFALSE 47920
// result := Delete ( result , 1 ) ;
47902: LD_ADDR_VAR 0 2
47906: PUSH
47907: LD_VAR 0 2
47911: PPUSH
47912: LD_INT 1
47914: PPUSH
47915: CALL_OW 3
47919: ST_TO_ADDR
// end ;
47920: LD_VAR 0 2
47924: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
47925: LD_INT 0
47927: PPUSH
47928: PPUSH
47929: PPUSH
47930: PPUSH
// sibRocketRange := 25 ;
47931: LD_ADDR_VAR 0 6
47935: PUSH
47936: LD_INT 25
47938: ST_TO_ADDR
// result := false ;
47939: LD_ADDR_VAR 0 4
47943: PUSH
47944: LD_INT 0
47946: ST_TO_ADDR
// for i := 0 to 5 do
47947: LD_ADDR_VAR 0 5
47951: PUSH
47952: DOUBLE
47953: LD_INT 0
47955: DEC
47956: ST_TO_ADDR
47957: LD_INT 5
47959: PUSH
47960: FOR_TO
47961: IFFALSE 48028
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
47963: LD_VAR 0 1
47967: PPUSH
47968: LD_VAR 0 5
47972: PPUSH
47973: LD_VAR 0 6
47977: PPUSH
47978: CALL_OW 272
47982: PPUSH
47983: LD_VAR 0 2
47987: PPUSH
47988: LD_VAR 0 5
47992: PPUSH
47993: LD_VAR 0 6
47997: PPUSH
47998: CALL_OW 273
48002: PPUSH
48003: LD_VAR 0 3
48007: PPUSH
48008: CALL_OW 309
48012: IFFALSE 48026
// begin result := true ;
48014: LD_ADDR_VAR 0 4
48018: PUSH
48019: LD_INT 1
48021: ST_TO_ADDR
// exit ;
48022: POP
48023: POP
48024: GO 48030
// end ;
48026: GO 47960
48028: POP
48029: POP
// end ;
48030: LD_VAR 0 4
48034: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
48035: LD_INT 0
48037: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
48038: LD_VAR 0 1
48042: PPUSH
48043: LD_VAR 0 2
48047: PPUSH
48048: LD_INT 0
48050: PPUSH
48051: LD_INT 0
48053: PPUSH
48054: LD_INT 1
48056: PPUSH
48057: LD_INT 0
48059: PPUSH
48060: CALL_OW 587
// end ;
48064: LD_VAR 0 3
48068: RET
// export function CenterOnNow ( unit ) ; begin
48069: LD_INT 0
48071: PPUSH
// result := IsInUnit ( unit ) ;
48072: LD_ADDR_VAR 0 2
48076: PUSH
48077: LD_VAR 0 1
48081: PPUSH
48082: CALL_OW 310
48086: ST_TO_ADDR
// if not result then
48087: LD_VAR 0 2
48091: NOT
48092: IFFALSE 48104
// result := unit ;
48094: LD_ADDR_VAR 0 2
48098: PUSH
48099: LD_VAR 0 1
48103: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
48104: LD_VAR 0 1
48108: PPUSH
48109: CALL_OW 87
// end ;
48113: LD_VAR 0 2
48117: RET
// export function ComMoveHex ( unit , hex ) ; begin
48118: LD_INT 0
48120: PPUSH
// if not hex then
48121: LD_VAR 0 2
48125: NOT
48126: IFFALSE 48130
// exit ;
48128: GO 48183
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
48130: LD_VAR 0 2
48134: PUSH
48135: LD_INT 1
48137: ARRAY
48138: PPUSH
48139: LD_VAR 0 2
48143: PUSH
48144: LD_INT 2
48146: ARRAY
48147: PPUSH
48148: CALL_OW 428
48152: IFFALSE 48156
// exit ;
48154: GO 48183
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
48156: LD_VAR 0 1
48160: PPUSH
48161: LD_VAR 0 2
48165: PUSH
48166: LD_INT 1
48168: ARRAY
48169: PPUSH
48170: LD_VAR 0 2
48174: PUSH
48175: LD_INT 2
48177: ARRAY
48178: PPUSH
48179: CALL_OW 111
// end ;
48183: LD_VAR 0 3
48187: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
48188: LD_INT 0
48190: PPUSH
48191: PPUSH
48192: PPUSH
// if not unit or not enemy then
48193: LD_VAR 0 1
48197: NOT
48198: PUSH
48199: LD_VAR 0 2
48203: NOT
48204: OR
48205: IFFALSE 48209
// exit ;
48207: GO 48333
// x := GetX ( enemy ) ;
48209: LD_ADDR_VAR 0 4
48213: PUSH
48214: LD_VAR 0 2
48218: PPUSH
48219: CALL_OW 250
48223: ST_TO_ADDR
// y := GetY ( enemy ) ;
48224: LD_ADDR_VAR 0 5
48228: PUSH
48229: LD_VAR 0 2
48233: PPUSH
48234: CALL_OW 251
48238: ST_TO_ADDR
// if ValidHex ( x , y ) then
48239: LD_VAR 0 4
48243: PPUSH
48244: LD_VAR 0 5
48248: PPUSH
48249: CALL_OW 488
48253: IFFALSE 48333
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
48255: LD_VAR 0 2
48259: PPUSH
48260: CALL_OW 247
48264: PUSH
48265: LD_INT 3
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: IN
48275: PUSH
48276: LD_VAR 0 1
48280: PPUSH
48281: CALL_OW 255
48285: PPUSH
48286: LD_VAR 0 2
48290: PPUSH
48291: CALL_OW 292
48295: OR
48296: IFFALSE 48314
// ComAttackUnit ( unit , enemy ) else
48298: LD_VAR 0 1
48302: PPUSH
48303: LD_VAR 0 2
48307: PPUSH
48308: CALL_OW 115
48312: GO 48333
// ComAgressiveMove ( unit , x , y ) ;
48314: LD_VAR 0 1
48318: PPUSH
48319: LD_VAR 0 4
48323: PPUSH
48324: LD_VAR 0 5
48328: PPUSH
48329: CALL_OW 114
// end ;
48333: LD_VAR 0 3
48337: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
48338: LD_INT 0
48340: PPUSH
48341: PPUSH
48342: PPUSH
// list := AreaToList ( area , 0 ) ;
48343: LD_ADDR_VAR 0 5
48347: PUSH
48348: LD_VAR 0 1
48352: PPUSH
48353: LD_INT 0
48355: PPUSH
48356: CALL_OW 517
48360: ST_TO_ADDR
// if not list then
48361: LD_VAR 0 5
48365: NOT
48366: IFFALSE 48370
// exit ;
48368: GO 48500
// if all then
48370: LD_VAR 0 2
48374: IFFALSE 48462
// begin for i := 1 to list [ 1 ] do
48376: LD_ADDR_VAR 0 4
48380: PUSH
48381: DOUBLE
48382: LD_INT 1
48384: DEC
48385: ST_TO_ADDR
48386: LD_VAR 0 5
48390: PUSH
48391: LD_INT 1
48393: ARRAY
48394: PUSH
48395: FOR_TO
48396: IFFALSE 48458
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
48398: LD_ADDR_VAR 0 3
48402: PUSH
48403: LD_VAR 0 3
48407: PPUSH
48408: LD_VAR 0 3
48412: PUSH
48413: LD_INT 1
48415: PLUS
48416: PPUSH
48417: LD_VAR 0 5
48421: PUSH
48422: LD_INT 1
48424: ARRAY
48425: PUSH
48426: LD_VAR 0 4
48430: ARRAY
48431: PUSH
48432: LD_VAR 0 5
48436: PUSH
48437: LD_INT 2
48439: ARRAY
48440: PUSH
48441: LD_VAR 0 4
48445: ARRAY
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PPUSH
48451: CALL_OW 1
48455: ST_TO_ADDR
48456: GO 48395
48458: POP
48459: POP
// exit ;
48460: GO 48500
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
48462: LD_ADDR_VAR 0 3
48466: PUSH
48467: LD_VAR 0 5
48471: PUSH
48472: LD_INT 1
48474: ARRAY
48475: PUSH
48476: LD_INT 1
48478: ARRAY
48479: PUSH
48480: LD_VAR 0 5
48484: PUSH
48485: LD_INT 2
48487: ARRAY
48488: PUSH
48489: LD_INT 1
48491: ARRAY
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: EMPTY
48498: LIST
48499: ST_TO_ADDR
// end ;
48500: LD_VAR 0 3
48504: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
48505: LD_INT 0
48507: PPUSH
48508: PPUSH
// list := AreaToList ( area , 0 ) ;
48509: LD_ADDR_VAR 0 4
48513: PUSH
48514: LD_VAR 0 1
48518: PPUSH
48519: LD_INT 0
48521: PPUSH
48522: CALL_OW 517
48526: ST_TO_ADDR
// if not list then
48527: LD_VAR 0 4
48531: NOT
48532: IFFALSE 48536
// exit ;
48534: GO 48577
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
48536: LD_ADDR_VAR 0 3
48540: PUSH
48541: LD_VAR 0 4
48545: PUSH
48546: LD_INT 1
48548: ARRAY
48549: PUSH
48550: LD_INT 1
48552: ARRAY
48553: PUSH
48554: LD_VAR 0 4
48558: PUSH
48559: LD_INT 2
48561: ARRAY
48562: PUSH
48563: LD_INT 1
48565: ARRAY
48566: PUSH
48567: LD_VAR 0 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: ST_TO_ADDR
// end ;
48577: LD_VAR 0 3
48581: RET
// export function First ( array ) ; begin
48582: LD_INT 0
48584: PPUSH
// if not array then
48585: LD_VAR 0 1
48589: NOT
48590: IFFALSE 48594
// exit ;
48592: GO 48608
// result := array [ 1 ] ;
48594: LD_ADDR_VAR 0 2
48598: PUSH
48599: LD_VAR 0 1
48603: PUSH
48604: LD_INT 1
48606: ARRAY
48607: ST_TO_ADDR
// end ;
48608: LD_VAR 0 2
48612: RET
// export function Last ( array ) ; begin
48613: LD_INT 0
48615: PPUSH
// if not array then
48616: LD_VAR 0 1
48620: NOT
48621: IFFALSE 48625
// exit ;
48623: GO 48641
// result := array [ array ] ;
48625: LD_ADDR_VAR 0 2
48629: PUSH
48630: LD_VAR 0 1
48634: PUSH
48635: LD_VAR 0 1
48639: ARRAY
48640: ST_TO_ADDR
// end ;
48641: LD_VAR 0 2
48645: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
48646: LD_INT 0
48648: PPUSH
48649: PPUSH
// result := [ ] ;
48650: LD_ADDR_VAR 0 5
48654: PUSH
48655: EMPTY
48656: ST_TO_ADDR
// if not array then
48657: LD_VAR 0 1
48661: NOT
48662: IFFALSE 48666
// exit ;
48664: GO 48778
// for i := 1 to array do
48666: LD_ADDR_VAR 0 6
48670: PUSH
48671: DOUBLE
48672: LD_INT 1
48674: DEC
48675: ST_TO_ADDR
48676: LD_VAR 0 1
48680: PUSH
48681: FOR_TO
48682: IFFALSE 48776
// if array [ i ] [ index ] = value then
48684: LD_VAR 0 1
48688: PUSH
48689: LD_VAR 0 6
48693: ARRAY
48694: PUSH
48695: LD_VAR 0 2
48699: ARRAY
48700: PUSH
48701: LD_VAR 0 3
48705: EQUAL
48706: IFFALSE 48774
// begin if indexColumn then
48708: LD_VAR 0 4
48712: IFFALSE 48748
// result := Join ( result , array [ i ] [ indexColumn ] ) else
48714: LD_ADDR_VAR 0 5
48718: PUSH
48719: LD_VAR 0 5
48723: PPUSH
48724: LD_VAR 0 1
48728: PUSH
48729: LD_VAR 0 6
48733: ARRAY
48734: PUSH
48735: LD_VAR 0 4
48739: ARRAY
48740: PPUSH
48741: CALL 44116 0 2
48745: ST_TO_ADDR
48746: GO 48774
// result := Join ( result , array [ i ] ) ;
48748: LD_ADDR_VAR 0 5
48752: PUSH
48753: LD_VAR 0 5
48757: PPUSH
48758: LD_VAR 0 1
48762: PUSH
48763: LD_VAR 0 6
48767: ARRAY
48768: PPUSH
48769: CALL 44116 0 2
48773: ST_TO_ADDR
// end ;
48774: GO 48681
48776: POP
48777: POP
// end ;
48778: LD_VAR 0 5
48782: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
48783: LD_INT 0
48785: PPUSH
48786: PPUSH
48787: PPUSH
// if btype = b_depot then
48788: LD_VAR 0 2
48792: PUSH
48793: LD_INT 0
48795: EQUAL
48796: IFFALSE 48808
// begin result := true ;
48798: LD_ADDR_VAR 0 3
48802: PUSH
48803: LD_INT 1
48805: ST_TO_ADDR
// exit ;
48806: GO 48924
// end ; pom := GetBase ( depot ) ;
48808: LD_ADDR_VAR 0 4
48812: PUSH
48813: LD_VAR 0 1
48817: PPUSH
48818: CALL_OW 274
48822: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48823: LD_ADDR_VAR 0 5
48827: PUSH
48828: LD_VAR 0 2
48832: PPUSH
48833: LD_VAR 0 1
48837: PPUSH
48838: CALL_OW 248
48842: PPUSH
48843: CALL_OW 450
48847: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
48848: LD_ADDR_VAR 0 3
48852: PUSH
48853: LD_VAR 0 4
48857: PPUSH
48858: LD_INT 1
48860: PPUSH
48861: CALL_OW 275
48865: PUSH
48866: LD_VAR 0 5
48870: PUSH
48871: LD_INT 1
48873: ARRAY
48874: GREATEREQUAL
48875: PUSH
48876: LD_VAR 0 4
48880: PPUSH
48881: LD_INT 2
48883: PPUSH
48884: CALL_OW 275
48888: PUSH
48889: LD_VAR 0 5
48893: PUSH
48894: LD_INT 2
48896: ARRAY
48897: GREATEREQUAL
48898: AND
48899: PUSH
48900: LD_VAR 0 4
48904: PPUSH
48905: LD_INT 3
48907: PPUSH
48908: CALL_OW 275
48912: PUSH
48913: LD_VAR 0 5
48917: PUSH
48918: LD_INT 3
48920: ARRAY
48921: GREATEREQUAL
48922: AND
48923: ST_TO_ADDR
// end ;
48924: LD_VAR 0 3
48928: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
48929: LD_INT 0
48931: PPUSH
// if not vehicles or not parkingPoint then
48932: LD_VAR 0 1
48936: NOT
48937: PUSH
48938: LD_VAR 0 2
48942: NOT
48943: OR
48944: IFFALSE 48948
// exit ;
48946: GO 49046
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
48948: LD_ADDR_VAR 0 1
48952: PUSH
48953: LD_VAR 0 1
48957: PPUSH
48958: LD_INT 50
48960: PUSH
48961: EMPTY
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: PUSH
48967: LD_INT 92
48969: PUSH
48970: LD_VAR 0 2
48974: PUSH
48975: LD_INT 1
48977: ARRAY
48978: PUSH
48979: LD_VAR 0 2
48983: PUSH
48984: LD_INT 2
48986: ARRAY
48987: PUSH
48988: LD_INT 8
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PPUSH
49005: CALL_OW 72
49009: ST_TO_ADDR
// if not vehicles then
49010: LD_VAR 0 1
49014: NOT
49015: IFFALSE 49019
// exit ;
49017: GO 49046
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
49019: LD_VAR 0 1
49023: PPUSH
49024: LD_VAR 0 2
49028: PUSH
49029: LD_INT 1
49031: ARRAY
49032: PPUSH
49033: LD_VAR 0 2
49037: PUSH
49038: LD_INT 2
49040: ARRAY
49041: PPUSH
49042: CALL_OW 111
// end ;
49046: LD_VAR 0 3
49050: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
49051: LD_INT 0
49053: PPUSH
49054: PPUSH
49055: PPUSH
// if not side or not area then
49056: LD_VAR 0 1
49060: NOT
49061: PUSH
49062: LD_VAR 0 2
49066: NOT
49067: OR
49068: IFFALSE 49072
// exit ;
49070: GO 49191
// tmp := AreaToList ( area , 0 ) ;
49072: LD_ADDR_VAR 0 5
49076: PUSH
49077: LD_VAR 0 2
49081: PPUSH
49082: LD_INT 0
49084: PPUSH
49085: CALL_OW 517
49089: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
49090: LD_ADDR_VAR 0 4
49094: PUSH
49095: DOUBLE
49096: LD_INT 1
49098: DEC
49099: ST_TO_ADDR
49100: LD_VAR 0 5
49104: PUSH
49105: LD_INT 1
49107: ARRAY
49108: PUSH
49109: FOR_TO
49110: IFFALSE 49189
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
49112: LD_VAR 0 5
49116: PUSH
49117: LD_INT 1
49119: ARRAY
49120: PUSH
49121: LD_VAR 0 4
49125: ARRAY
49126: PPUSH
49127: LD_VAR 0 5
49131: PUSH
49132: LD_INT 2
49134: ARRAY
49135: PUSH
49136: LD_VAR 0 4
49140: ARRAY
49141: PPUSH
49142: CALL_OW 351
49146: IFFALSE 49187
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
49148: LD_VAR 0 5
49152: PUSH
49153: LD_INT 1
49155: ARRAY
49156: PUSH
49157: LD_VAR 0 4
49161: ARRAY
49162: PPUSH
49163: LD_VAR 0 5
49167: PUSH
49168: LD_INT 2
49170: ARRAY
49171: PUSH
49172: LD_VAR 0 4
49176: ARRAY
49177: PPUSH
49178: LD_VAR 0 1
49182: PPUSH
49183: CALL_OW 244
// end ;
49187: GO 49109
49189: POP
49190: POP
// end ; end_of_file end_of_file
49191: LD_VAR 0 3
49195: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
49196: LD_VAR 0 1
49200: PPUSH
49201: LD_VAR 0 2
49205: PPUSH
49206: LD_VAR 0 3
49210: PPUSH
49211: LD_VAR 0 4
49215: PPUSH
49216: LD_VAR 0 5
49220: PPUSH
49221: LD_VAR 0 6
49225: PPUSH
49226: CALL 49427 0 6
// end ;
49230: PPOPN 6
49232: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
49233: LD_INT 0
49235: PPUSH
// begin if not units then
49236: LD_VAR 0 1
49240: NOT
49241: IFFALSE 49245
// exit ;
49243: GO 49245
// end ;
49245: PPOPN 7
49247: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
49248: CALL 49314 0 0
// end ; end_of_file
49252: PPOPN 1
49254: END
// export globalGameSaveCounter ; every 0 0$1 do
49255: GO 49257
49257: DISABLE
// begin enable ;
49258: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
49259: LD_STRING updateTimer(
49261: PUSH
49262: LD_OWVAR 1
49266: STR
49267: PUSH
49268: LD_STRING );
49270: STR
49271: PPUSH
49272: CALL_OW 559
// end ;
49276: END
// every 0 0$1 do
49277: GO 49279
49279: DISABLE
// begin globalGameSaveCounter := 0 ;
49280: LD_ADDR_EXP 29
49284: PUSH
49285: LD_INT 0
49287: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
49288: LD_STRING setGameSaveCounter(0)
49290: PPUSH
49291: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
49295: LD_STRING initStreamRollete();
49297: PPUSH
49298: CALL_OW 559
// InitStreamMode ;
49302: CALL 50645 0 0
// DefineStreamItems ( false ) ;
49306: LD_INT 0
49308: PPUSH
49309: CALL 51109 0 1
// end ;
49313: END
// export function SOS_MapStart ( ) ; begin
49314: LD_INT 0
49316: PPUSH
// if streamModeActive then
49317: LD_EXP 30
49321: IFFALSE 49330
// DefineStreamItems ( true ) ;
49323: LD_INT 1
49325: PPUSH
49326: CALL 51109 0 1
// UpdateLuaVariables ( ) ;
49330: CALL 49347 0 0
// UpdateFactoryWaypoints ( ) ;
49334: CALL 63978 0 0
// UpdateWarehouseGatheringPoints ( ) ;
49338: CALL 64235 0 0
// end ;
49342: LD_VAR 0 1
49346: RET
// function UpdateLuaVariables ( ) ; begin
49347: LD_INT 0
49349: PPUSH
// if globalGameSaveCounter then
49350: LD_EXP 29
49354: IFFALSE 49388
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
49356: LD_ADDR_EXP 29
49360: PUSH
49361: LD_EXP 29
49365: PPUSH
49366: CALL 45477 0 1
49370: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49371: LD_STRING setGameSaveCounter(
49373: PUSH
49374: LD_EXP 29
49378: STR
49379: PUSH
49380: LD_STRING )
49382: STR
49383: PPUSH
49384: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
49388: LD_STRING setGameDifficulty(
49390: PUSH
49391: LD_OWVAR 67
49395: STR
49396: PUSH
49397: LD_STRING )
49399: STR
49400: PPUSH
49401: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
49405: LD_STRING displayDifficulty(
49407: PUSH
49408: LD_OWVAR 67
49412: STR
49413: PUSH
49414: LD_STRING )
49416: STR
49417: PPUSH
49418: CALL_OW 559
// end ;
49422: LD_VAR 0 1
49426: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
49427: LD_INT 0
49429: PPUSH
// if p2 = stream_mode then
49430: LD_VAR 0 2
49434: PUSH
49435: LD_INT 100
49437: EQUAL
49438: IFFALSE 50441
// begin if not StreamModeActive then
49440: LD_EXP 30
49444: NOT
49445: IFFALSE 49455
// StreamModeActive := true ;
49447: LD_ADDR_EXP 30
49451: PUSH
49452: LD_INT 1
49454: ST_TO_ADDR
// if p3 = 0 then
49455: LD_VAR 0 3
49459: PUSH
49460: LD_INT 0
49462: EQUAL
49463: IFFALSE 49469
// InitStreamMode ;
49465: CALL 50645 0 0
// if p3 = 1 then
49469: LD_VAR 0 3
49473: PUSH
49474: LD_INT 1
49476: EQUAL
49477: IFFALSE 49487
// sRocket := true ;
49479: LD_ADDR_EXP 35
49483: PUSH
49484: LD_INT 1
49486: ST_TO_ADDR
// if p3 = 2 then
49487: LD_VAR 0 3
49491: PUSH
49492: LD_INT 2
49494: EQUAL
49495: IFFALSE 49505
// sSpeed := true ;
49497: LD_ADDR_EXP 34
49501: PUSH
49502: LD_INT 1
49504: ST_TO_ADDR
// if p3 = 3 then
49505: LD_VAR 0 3
49509: PUSH
49510: LD_INT 3
49512: EQUAL
49513: IFFALSE 49523
// sEngine := true ;
49515: LD_ADDR_EXP 36
49519: PUSH
49520: LD_INT 1
49522: ST_TO_ADDR
// if p3 = 4 then
49523: LD_VAR 0 3
49527: PUSH
49528: LD_INT 4
49530: EQUAL
49531: IFFALSE 49541
// sSpec := true ;
49533: LD_ADDR_EXP 33
49537: PUSH
49538: LD_INT 1
49540: ST_TO_ADDR
// if p3 = 5 then
49541: LD_VAR 0 3
49545: PUSH
49546: LD_INT 5
49548: EQUAL
49549: IFFALSE 49559
// sLevel := true ;
49551: LD_ADDR_EXP 37
49555: PUSH
49556: LD_INT 1
49558: ST_TO_ADDR
// if p3 = 6 then
49559: LD_VAR 0 3
49563: PUSH
49564: LD_INT 6
49566: EQUAL
49567: IFFALSE 49577
// sArmoury := true ;
49569: LD_ADDR_EXP 38
49573: PUSH
49574: LD_INT 1
49576: ST_TO_ADDR
// if p3 = 7 then
49577: LD_VAR 0 3
49581: PUSH
49582: LD_INT 7
49584: EQUAL
49585: IFFALSE 49595
// sRadar := true ;
49587: LD_ADDR_EXP 39
49591: PUSH
49592: LD_INT 1
49594: ST_TO_ADDR
// if p3 = 8 then
49595: LD_VAR 0 3
49599: PUSH
49600: LD_INT 8
49602: EQUAL
49603: IFFALSE 49613
// sBunker := true ;
49605: LD_ADDR_EXP 40
49609: PUSH
49610: LD_INT 1
49612: ST_TO_ADDR
// if p3 = 9 then
49613: LD_VAR 0 3
49617: PUSH
49618: LD_INT 9
49620: EQUAL
49621: IFFALSE 49631
// sHack := true ;
49623: LD_ADDR_EXP 41
49627: PUSH
49628: LD_INT 1
49630: ST_TO_ADDR
// if p3 = 10 then
49631: LD_VAR 0 3
49635: PUSH
49636: LD_INT 10
49638: EQUAL
49639: IFFALSE 49649
// sFire := true ;
49641: LD_ADDR_EXP 42
49645: PUSH
49646: LD_INT 1
49648: ST_TO_ADDR
// if p3 = 11 then
49649: LD_VAR 0 3
49653: PUSH
49654: LD_INT 11
49656: EQUAL
49657: IFFALSE 49667
// sRefresh := true ;
49659: LD_ADDR_EXP 43
49663: PUSH
49664: LD_INT 1
49666: ST_TO_ADDR
// if p3 = 12 then
49667: LD_VAR 0 3
49671: PUSH
49672: LD_INT 12
49674: EQUAL
49675: IFFALSE 49685
// sExp := true ;
49677: LD_ADDR_EXP 44
49681: PUSH
49682: LD_INT 1
49684: ST_TO_ADDR
// if p3 = 13 then
49685: LD_VAR 0 3
49689: PUSH
49690: LD_INT 13
49692: EQUAL
49693: IFFALSE 49703
// sDepot := true ;
49695: LD_ADDR_EXP 45
49699: PUSH
49700: LD_INT 1
49702: ST_TO_ADDR
// if p3 = 14 then
49703: LD_VAR 0 3
49707: PUSH
49708: LD_INT 14
49710: EQUAL
49711: IFFALSE 49721
// sFlag := true ;
49713: LD_ADDR_EXP 46
49717: PUSH
49718: LD_INT 1
49720: ST_TO_ADDR
// if p3 = 15 then
49721: LD_VAR 0 3
49725: PUSH
49726: LD_INT 15
49728: EQUAL
49729: IFFALSE 49739
// sKamikadze := true ;
49731: LD_ADDR_EXP 54
49735: PUSH
49736: LD_INT 1
49738: ST_TO_ADDR
// if p3 = 16 then
49739: LD_VAR 0 3
49743: PUSH
49744: LD_INT 16
49746: EQUAL
49747: IFFALSE 49757
// sTroll := true ;
49749: LD_ADDR_EXP 55
49753: PUSH
49754: LD_INT 1
49756: ST_TO_ADDR
// if p3 = 17 then
49757: LD_VAR 0 3
49761: PUSH
49762: LD_INT 17
49764: EQUAL
49765: IFFALSE 49775
// sSlow := true ;
49767: LD_ADDR_EXP 56
49771: PUSH
49772: LD_INT 1
49774: ST_TO_ADDR
// if p3 = 18 then
49775: LD_VAR 0 3
49779: PUSH
49780: LD_INT 18
49782: EQUAL
49783: IFFALSE 49793
// sLack := true ;
49785: LD_ADDR_EXP 57
49789: PUSH
49790: LD_INT 1
49792: ST_TO_ADDR
// if p3 = 19 then
49793: LD_VAR 0 3
49797: PUSH
49798: LD_INT 19
49800: EQUAL
49801: IFFALSE 49811
// sTank := true ;
49803: LD_ADDR_EXP 59
49807: PUSH
49808: LD_INT 1
49810: ST_TO_ADDR
// if p3 = 20 then
49811: LD_VAR 0 3
49815: PUSH
49816: LD_INT 20
49818: EQUAL
49819: IFFALSE 49829
// sRemote := true ;
49821: LD_ADDR_EXP 60
49825: PUSH
49826: LD_INT 1
49828: ST_TO_ADDR
// if p3 = 21 then
49829: LD_VAR 0 3
49833: PUSH
49834: LD_INT 21
49836: EQUAL
49837: IFFALSE 49847
// sPowell := true ;
49839: LD_ADDR_EXP 61
49843: PUSH
49844: LD_INT 1
49846: ST_TO_ADDR
// if p3 = 22 then
49847: LD_VAR 0 3
49851: PUSH
49852: LD_INT 22
49854: EQUAL
49855: IFFALSE 49865
// sTeleport := true ;
49857: LD_ADDR_EXP 64
49861: PUSH
49862: LD_INT 1
49864: ST_TO_ADDR
// if p3 = 23 then
49865: LD_VAR 0 3
49869: PUSH
49870: LD_INT 23
49872: EQUAL
49873: IFFALSE 49883
// sOilTower := true ;
49875: LD_ADDR_EXP 66
49879: PUSH
49880: LD_INT 1
49882: ST_TO_ADDR
// if p3 = 24 then
49883: LD_VAR 0 3
49887: PUSH
49888: LD_INT 24
49890: EQUAL
49891: IFFALSE 49901
// sShovel := true ;
49893: LD_ADDR_EXP 67
49897: PUSH
49898: LD_INT 1
49900: ST_TO_ADDR
// if p3 = 25 then
49901: LD_VAR 0 3
49905: PUSH
49906: LD_INT 25
49908: EQUAL
49909: IFFALSE 49919
// sSheik := true ;
49911: LD_ADDR_EXP 68
49915: PUSH
49916: LD_INT 1
49918: ST_TO_ADDR
// if p3 = 26 then
49919: LD_VAR 0 3
49923: PUSH
49924: LD_INT 26
49926: EQUAL
49927: IFFALSE 49937
// sEarthquake := true ;
49929: LD_ADDR_EXP 70
49933: PUSH
49934: LD_INT 1
49936: ST_TO_ADDR
// if p3 = 27 then
49937: LD_VAR 0 3
49941: PUSH
49942: LD_INT 27
49944: EQUAL
49945: IFFALSE 49955
// sAI := true ;
49947: LD_ADDR_EXP 71
49951: PUSH
49952: LD_INT 1
49954: ST_TO_ADDR
// if p3 = 28 then
49955: LD_VAR 0 3
49959: PUSH
49960: LD_INT 28
49962: EQUAL
49963: IFFALSE 49973
// sCargo := true ;
49965: LD_ADDR_EXP 74
49969: PUSH
49970: LD_INT 1
49972: ST_TO_ADDR
// if p3 = 29 then
49973: LD_VAR 0 3
49977: PUSH
49978: LD_INT 29
49980: EQUAL
49981: IFFALSE 49991
// sDLaser := true ;
49983: LD_ADDR_EXP 75
49987: PUSH
49988: LD_INT 1
49990: ST_TO_ADDR
// if p3 = 30 then
49991: LD_VAR 0 3
49995: PUSH
49996: LD_INT 30
49998: EQUAL
49999: IFFALSE 50009
// sExchange := true ;
50001: LD_ADDR_EXP 76
50005: PUSH
50006: LD_INT 1
50008: ST_TO_ADDR
// if p3 = 31 then
50009: LD_VAR 0 3
50013: PUSH
50014: LD_INT 31
50016: EQUAL
50017: IFFALSE 50027
// sFac := true ;
50019: LD_ADDR_EXP 77
50023: PUSH
50024: LD_INT 1
50026: ST_TO_ADDR
// if p3 = 32 then
50027: LD_VAR 0 3
50031: PUSH
50032: LD_INT 32
50034: EQUAL
50035: IFFALSE 50045
// sPower := true ;
50037: LD_ADDR_EXP 78
50041: PUSH
50042: LD_INT 1
50044: ST_TO_ADDR
// if p3 = 33 then
50045: LD_VAR 0 3
50049: PUSH
50050: LD_INT 33
50052: EQUAL
50053: IFFALSE 50063
// sRandom := true ;
50055: LD_ADDR_EXP 79
50059: PUSH
50060: LD_INT 1
50062: ST_TO_ADDR
// if p3 = 34 then
50063: LD_VAR 0 3
50067: PUSH
50068: LD_INT 34
50070: EQUAL
50071: IFFALSE 50081
// sShield := true ;
50073: LD_ADDR_EXP 80
50077: PUSH
50078: LD_INT 1
50080: ST_TO_ADDR
// if p3 = 35 then
50081: LD_VAR 0 3
50085: PUSH
50086: LD_INT 35
50088: EQUAL
50089: IFFALSE 50099
// sTime := true ;
50091: LD_ADDR_EXP 81
50095: PUSH
50096: LD_INT 1
50098: ST_TO_ADDR
// if p3 = 36 then
50099: LD_VAR 0 3
50103: PUSH
50104: LD_INT 36
50106: EQUAL
50107: IFFALSE 50117
// sTools := true ;
50109: LD_ADDR_EXP 82
50113: PUSH
50114: LD_INT 1
50116: ST_TO_ADDR
// if p3 = 101 then
50117: LD_VAR 0 3
50121: PUSH
50122: LD_INT 101
50124: EQUAL
50125: IFFALSE 50135
// sSold := true ;
50127: LD_ADDR_EXP 47
50131: PUSH
50132: LD_INT 1
50134: ST_TO_ADDR
// if p3 = 102 then
50135: LD_VAR 0 3
50139: PUSH
50140: LD_INT 102
50142: EQUAL
50143: IFFALSE 50153
// sDiff := true ;
50145: LD_ADDR_EXP 48
50149: PUSH
50150: LD_INT 1
50152: ST_TO_ADDR
// if p3 = 103 then
50153: LD_VAR 0 3
50157: PUSH
50158: LD_INT 103
50160: EQUAL
50161: IFFALSE 50171
// sFog := true ;
50163: LD_ADDR_EXP 51
50167: PUSH
50168: LD_INT 1
50170: ST_TO_ADDR
// if p3 = 104 then
50171: LD_VAR 0 3
50175: PUSH
50176: LD_INT 104
50178: EQUAL
50179: IFFALSE 50189
// sReset := true ;
50181: LD_ADDR_EXP 52
50185: PUSH
50186: LD_INT 1
50188: ST_TO_ADDR
// if p3 = 105 then
50189: LD_VAR 0 3
50193: PUSH
50194: LD_INT 105
50196: EQUAL
50197: IFFALSE 50207
// sSun := true ;
50199: LD_ADDR_EXP 53
50203: PUSH
50204: LD_INT 1
50206: ST_TO_ADDR
// if p3 = 106 then
50207: LD_VAR 0 3
50211: PUSH
50212: LD_INT 106
50214: EQUAL
50215: IFFALSE 50225
// sTiger := true ;
50217: LD_ADDR_EXP 49
50221: PUSH
50222: LD_INT 1
50224: ST_TO_ADDR
// if p3 = 107 then
50225: LD_VAR 0 3
50229: PUSH
50230: LD_INT 107
50232: EQUAL
50233: IFFALSE 50243
// sBomb := true ;
50235: LD_ADDR_EXP 50
50239: PUSH
50240: LD_INT 1
50242: ST_TO_ADDR
// if p3 = 108 then
50243: LD_VAR 0 3
50247: PUSH
50248: LD_INT 108
50250: EQUAL
50251: IFFALSE 50261
// sWound := true ;
50253: LD_ADDR_EXP 58
50257: PUSH
50258: LD_INT 1
50260: ST_TO_ADDR
// if p3 = 109 then
50261: LD_VAR 0 3
50265: PUSH
50266: LD_INT 109
50268: EQUAL
50269: IFFALSE 50279
// sBetray := true ;
50271: LD_ADDR_EXP 62
50275: PUSH
50276: LD_INT 1
50278: ST_TO_ADDR
// if p3 = 110 then
50279: LD_VAR 0 3
50283: PUSH
50284: LD_INT 110
50286: EQUAL
50287: IFFALSE 50297
// sContamin := true ;
50289: LD_ADDR_EXP 63
50293: PUSH
50294: LD_INT 1
50296: ST_TO_ADDR
// if p3 = 111 then
50297: LD_VAR 0 3
50301: PUSH
50302: LD_INT 111
50304: EQUAL
50305: IFFALSE 50315
// sOil := true ;
50307: LD_ADDR_EXP 65
50311: PUSH
50312: LD_INT 1
50314: ST_TO_ADDR
// if p3 = 112 then
50315: LD_VAR 0 3
50319: PUSH
50320: LD_INT 112
50322: EQUAL
50323: IFFALSE 50333
// sStu := true ;
50325: LD_ADDR_EXP 69
50329: PUSH
50330: LD_INT 1
50332: ST_TO_ADDR
// if p3 = 113 then
50333: LD_VAR 0 3
50337: PUSH
50338: LD_INT 113
50340: EQUAL
50341: IFFALSE 50351
// sBazooka := true ;
50343: LD_ADDR_EXP 72
50347: PUSH
50348: LD_INT 1
50350: ST_TO_ADDR
// if p3 = 114 then
50351: LD_VAR 0 3
50355: PUSH
50356: LD_INT 114
50358: EQUAL
50359: IFFALSE 50369
// sMortar := true ;
50361: LD_ADDR_EXP 73
50365: PUSH
50366: LD_INT 1
50368: ST_TO_ADDR
// if p3 = 115 then
50369: LD_VAR 0 3
50373: PUSH
50374: LD_INT 115
50376: EQUAL
50377: IFFALSE 50387
// sRanger := true ;
50379: LD_ADDR_EXP 83
50383: PUSH
50384: LD_INT 1
50386: ST_TO_ADDR
// if p3 = 116 then
50387: LD_VAR 0 3
50391: PUSH
50392: LD_INT 116
50394: EQUAL
50395: IFFALSE 50405
// sComputer := true ;
50397: LD_ADDR_EXP 84
50401: PUSH
50402: LD_INT 1
50404: ST_TO_ADDR
// if p3 = 117 then
50405: LD_VAR 0 3
50409: PUSH
50410: LD_INT 117
50412: EQUAL
50413: IFFALSE 50423
// s30 := true ;
50415: LD_ADDR_EXP 85
50419: PUSH
50420: LD_INT 1
50422: ST_TO_ADDR
// if p3 = 118 then
50423: LD_VAR 0 3
50427: PUSH
50428: LD_INT 118
50430: EQUAL
50431: IFFALSE 50441
// s60 := true ;
50433: LD_ADDR_EXP 86
50437: PUSH
50438: LD_INT 1
50440: ST_TO_ADDR
// end ; if p2 = hack_mode then
50441: LD_VAR 0 2
50445: PUSH
50446: LD_INT 101
50448: EQUAL
50449: IFFALSE 50577
// begin case p3 of 1 :
50451: LD_VAR 0 3
50455: PUSH
50456: LD_INT 1
50458: DOUBLE
50459: EQUAL
50460: IFTRUE 50464
50462: GO 50471
50464: POP
// hHackUnlimitedResources ; 2 :
50465: CALL 62724 0 0
50469: GO 50577
50471: LD_INT 2
50473: DOUBLE
50474: EQUAL
50475: IFTRUE 50479
50477: GO 50486
50479: POP
// hHackSetLevel10 ; 3 :
50480: CALL 62857 0 0
50484: GO 50577
50486: LD_INT 3
50488: DOUBLE
50489: EQUAL
50490: IFTRUE 50494
50492: GO 50501
50494: POP
// hHackSetLevel10YourUnits ; 4 :
50495: CALL 62942 0 0
50499: GO 50577
50501: LD_INT 4
50503: DOUBLE
50504: EQUAL
50505: IFTRUE 50509
50507: GO 50516
50509: POP
// hHackInvincible ; 5 :
50510: CALL 63390 0 0
50514: GO 50577
50516: LD_INT 5
50518: DOUBLE
50519: EQUAL
50520: IFTRUE 50524
50522: GO 50531
50524: POP
// hHackInvisible ; 6 :
50525: CALL 63501 0 0
50529: GO 50577
50531: LD_INT 6
50533: DOUBLE
50534: EQUAL
50535: IFTRUE 50539
50537: GO 50546
50539: POP
// hHackChangeYourSide ; 7 :
50540: CALL 63558 0 0
50544: GO 50577
50546: LD_INT 7
50548: DOUBLE
50549: EQUAL
50550: IFTRUE 50554
50552: GO 50561
50554: POP
// hHackChangeUnitSide ; 8 :
50555: CALL 63600 0 0
50559: GO 50577
50561: LD_INT 8
50563: DOUBLE
50564: EQUAL
50565: IFTRUE 50569
50567: GO 50576
50569: POP
// hHackFog ; end ;
50570: CALL 63701 0 0
50574: GO 50577
50576: POP
// end ; if p2 = game_save_mode then
50577: LD_VAR 0 2
50581: PUSH
50582: LD_INT 102
50584: EQUAL
50585: IFFALSE 50640
// begin if p3 = 1 then
50587: LD_VAR 0 3
50591: PUSH
50592: LD_INT 1
50594: EQUAL
50595: IFFALSE 50607
// globalGameSaveCounter := p4 ;
50597: LD_ADDR_EXP 29
50601: PUSH
50602: LD_VAR 0 4
50606: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
50607: LD_VAR 0 3
50611: PUSH
50612: LD_INT 2
50614: EQUAL
50615: PUSH
50616: LD_EXP 29
50620: AND
50621: IFFALSE 50640
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
50623: LD_STRING setGameSaveCounter(
50625: PUSH
50626: LD_EXP 29
50630: STR
50631: PUSH
50632: LD_STRING )
50634: STR
50635: PPUSH
50636: CALL_OW 559
// end ; end ;
50640: LD_VAR 0 7
50644: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
50645: LD_INT 0
50647: PPUSH
// streamModeActive := false ;
50648: LD_ADDR_EXP 30
50652: PUSH
50653: LD_INT 0
50655: ST_TO_ADDR
// normalCounter := 36 ;
50656: LD_ADDR_EXP 31
50660: PUSH
50661: LD_INT 36
50663: ST_TO_ADDR
// hardcoreCounter := 18 ;
50664: LD_ADDR_EXP 32
50668: PUSH
50669: LD_INT 18
50671: ST_TO_ADDR
// sRocket := false ;
50672: LD_ADDR_EXP 35
50676: PUSH
50677: LD_INT 0
50679: ST_TO_ADDR
// sSpeed := false ;
50680: LD_ADDR_EXP 34
50684: PUSH
50685: LD_INT 0
50687: ST_TO_ADDR
// sEngine := false ;
50688: LD_ADDR_EXP 36
50692: PUSH
50693: LD_INT 0
50695: ST_TO_ADDR
// sSpec := false ;
50696: LD_ADDR_EXP 33
50700: PUSH
50701: LD_INT 0
50703: ST_TO_ADDR
// sLevel := false ;
50704: LD_ADDR_EXP 37
50708: PUSH
50709: LD_INT 0
50711: ST_TO_ADDR
// sArmoury := false ;
50712: LD_ADDR_EXP 38
50716: PUSH
50717: LD_INT 0
50719: ST_TO_ADDR
// sRadar := false ;
50720: LD_ADDR_EXP 39
50724: PUSH
50725: LD_INT 0
50727: ST_TO_ADDR
// sBunker := false ;
50728: LD_ADDR_EXP 40
50732: PUSH
50733: LD_INT 0
50735: ST_TO_ADDR
// sHack := false ;
50736: LD_ADDR_EXP 41
50740: PUSH
50741: LD_INT 0
50743: ST_TO_ADDR
// sFire := false ;
50744: LD_ADDR_EXP 42
50748: PUSH
50749: LD_INT 0
50751: ST_TO_ADDR
// sRefresh := false ;
50752: LD_ADDR_EXP 43
50756: PUSH
50757: LD_INT 0
50759: ST_TO_ADDR
// sExp := false ;
50760: LD_ADDR_EXP 44
50764: PUSH
50765: LD_INT 0
50767: ST_TO_ADDR
// sDepot := false ;
50768: LD_ADDR_EXP 45
50772: PUSH
50773: LD_INT 0
50775: ST_TO_ADDR
// sFlag := false ;
50776: LD_ADDR_EXP 46
50780: PUSH
50781: LD_INT 0
50783: ST_TO_ADDR
// sKamikadze := false ;
50784: LD_ADDR_EXP 54
50788: PUSH
50789: LD_INT 0
50791: ST_TO_ADDR
// sTroll := false ;
50792: LD_ADDR_EXP 55
50796: PUSH
50797: LD_INT 0
50799: ST_TO_ADDR
// sSlow := false ;
50800: LD_ADDR_EXP 56
50804: PUSH
50805: LD_INT 0
50807: ST_TO_ADDR
// sLack := false ;
50808: LD_ADDR_EXP 57
50812: PUSH
50813: LD_INT 0
50815: ST_TO_ADDR
// sTank := false ;
50816: LD_ADDR_EXP 59
50820: PUSH
50821: LD_INT 0
50823: ST_TO_ADDR
// sRemote := false ;
50824: LD_ADDR_EXP 60
50828: PUSH
50829: LD_INT 0
50831: ST_TO_ADDR
// sPowell := false ;
50832: LD_ADDR_EXP 61
50836: PUSH
50837: LD_INT 0
50839: ST_TO_ADDR
// sTeleport := false ;
50840: LD_ADDR_EXP 64
50844: PUSH
50845: LD_INT 0
50847: ST_TO_ADDR
// sOilTower := false ;
50848: LD_ADDR_EXP 66
50852: PUSH
50853: LD_INT 0
50855: ST_TO_ADDR
// sShovel := false ;
50856: LD_ADDR_EXP 67
50860: PUSH
50861: LD_INT 0
50863: ST_TO_ADDR
// sSheik := false ;
50864: LD_ADDR_EXP 68
50868: PUSH
50869: LD_INT 0
50871: ST_TO_ADDR
// sEarthquake := false ;
50872: LD_ADDR_EXP 70
50876: PUSH
50877: LD_INT 0
50879: ST_TO_ADDR
// sAI := false ;
50880: LD_ADDR_EXP 71
50884: PUSH
50885: LD_INT 0
50887: ST_TO_ADDR
// sCargo := false ;
50888: LD_ADDR_EXP 74
50892: PUSH
50893: LD_INT 0
50895: ST_TO_ADDR
// sDLaser := false ;
50896: LD_ADDR_EXP 75
50900: PUSH
50901: LD_INT 0
50903: ST_TO_ADDR
// sExchange := false ;
50904: LD_ADDR_EXP 76
50908: PUSH
50909: LD_INT 0
50911: ST_TO_ADDR
// sFac := false ;
50912: LD_ADDR_EXP 77
50916: PUSH
50917: LD_INT 0
50919: ST_TO_ADDR
// sPower := false ;
50920: LD_ADDR_EXP 78
50924: PUSH
50925: LD_INT 0
50927: ST_TO_ADDR
// sRandom := false ;
50928: LD_ADDR_EXP 79
50932: PUSH
50933: LD_INT 0
50935: ST_TO_ADDR
// sShield := false ;
50936: LD_ADDR_EXP 80
50940: PUSH
50941: LD_INT 0
50943: ST_TO_ADDR
// sTime := false ;
50944: LD_ADDR_EXP 81
50948: PUSH
50949: LD_INT 0
50951: ST_TO_ADDR
// sTools := false ;
50952: LD_ADDR_EXP 82
50956: PUSH
50957: LD_INT 0
50959: ST_TO_ADDR
// sSold := false ;
50960: LD_ADDR_EXP 47
50964: PUSH
50965: LD_INT 0
50967: ST_TO_ADDR
// sDiff := false ;
50968: LD_ADDR_EXP 48
50972: PUSH
50973: LD_INT 0
50975: ST_TO_ADDR
// sFog := false ;
50976: LD_ADDR_EXP 51
50980: PUSH
50981: LD_INT 0
50983: ST_TO_ADDR
// sReset := false ;
50984: LD_ADDR_EXP 52
50988: PUSH
50989: LD_INT 0
50991: ST_TO_ADDR
// sSun := false ;
50992: LD_ADDR_EXP 53
50996: PUSH
50997: LD_INT 0
50999: ST_TO_ADDR
// sTiger := false ;
51000: LD_ADDR_EXP 49
51004: PUSH
51005: LD_INT 0
51007: ST_TO_ADDR
// sBomb := false ;
51008: LD_ADDR_EXP 50
51012: PUSH
51013: LD_INT 0
51015: ST_TO_ADDR
// sWound := false ;
51016: LD_ADDR_EXP 58
51020: PUSH
51021: LD_INT 0
51023: ST_TO_ADDR
// sBetray := false ;
51024: LD_ADDR_EXP 62
51028: PUSH
51029: LD_INT 0
51031: ST_TO_ADDR
// sContamin := false ;
51032: LD_ADDR_EXP 63
51036: PUSH
51037: LD_INT 0
51039: ST_TO_ADDR
// sOil := false ;
51040: LD_ADDR_EXP 65
51044: PUSH
51045: LD_INT 0
51047: ST_TO_ADDR
// sStu := false ;
51048: LD_ADDR_EXP 69
51052: PUSH
51053: LD_INT 0
51055: ST_TO_ADDR
// sBazooka := false ;
51056: LD_ADDR_EXP 72
51060: PUSH
51061: LD_INT 0
51063: ST_TO_ADDR
// sMortar := false ;
51064: LD_ADDR_EXP 73
51068: PUSH
51069: LD_INT 0
51071: ST_TO_ADDR
// sRanger := false ;
51072: LD_ADDR_EXP 83
51076: PUSH
51077: LD_INT 0
51079: ST_TO_ADDR
// sComputer := false ;
51080: LD_ADDR_EXP 84
51084: PUSH
51085: LD_INT 0
51087: ST_TO_ADDR
// s30 := false ;
51088: LD_ADDR_EXP 85
51092: PUSH
51093: LD_INT 0
51095: ST_TO_ADDR
// s60 := false ;
51096: LD_ADDR_EXP 86
51100: PUSH
51101: LD_INT 0
51103: ST_TO_ADDR
// end ;
51104: LD_VAR 0 1
51108: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
51109: LD_INT 0
51111: PPUSH
51112: PPUSH
51113: PPUSH
51114: PPUSH
51115: PPUSH
51116: PPUSH
51117: PPUSH
// result := [ ] ;
51118: LD_ADDR_VAR 0 2
51122: PUSH
51123: EMPTY
51124: ST_TO_ADDR
// if campaign_id = 1 then
51125: LD_OWVAR 69
51129: PUSH
51130: LD_INT 1
51132: EQUAL
51133: IFFALSE 54299
// begin case mission_number of 1 :
51135: LD_OWVAR 70
51139: PUSH
51140: LD_INT 1
51142: DOUBLE
51143: EQUAL
51144: IFTRUE 51148
51146: GO 51224
51148: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
51149: LD_ADDR_VAR 0 2
51153: PUSH
51154: LD_INT 2
51156: PUSH
51157: LD_INT 4
51159: PUSH
51160: LD_INT 11
51162: PUSH
51163: LD_INT 12
51165: PUSH
51166: LD_INT 15
51168: PUSH
51169: LD_INT 16
51171: PUSH
51172: LD_INT 22
51174: PUSH
51175: LD_INT 23
51177: PUSH
51178: LD_INT 26
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 101
51194: PUSH
51195: LD_INT 102
51197: PUSH
51198: LD_INT 106
51200: PUSH
51201: LD_INT 116
51203: PUSH
51204: LD_INT 117
51206: PUSH
51207: LD_INT 118
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: ST_TO_ADDR
51222: GO 54297
51224: LD_INT 2
51226: DOUBLE
51227: EQUAL
51228: IFTRUE 51232
51230: GO 51316
51232: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
51233: LD_ADDR_VAR 0 2
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 4
51243: PUSH
51244: LD_INT 11
51246: PUSH
51247: LD_INT 12
51249: PUSH
51250: LD_INT 15
51252: PUSH
51253: LD_INT 16
51255: PUSH
51256: LD_INT 22
51258: PUSH
51259: LD_INT 23
51261: PUSH
51262: LD_INT 26
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 101
51278: PUSH
51279: LD_INT 102
51281: PUSH
51282: LD_INT 105
51284: PUSH
51285: LD_INT 106
51287: PUSH
51288: LD_INT 108
51290: PUSH
51291: LD_INT 116
51293: PUSH
51294: LD_INT 117
51296: PUSH
51297: LD_INT 118
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: ST_TO_ADDR
51314: GO 54297
51316: LD_INT 3
51318: DOUBLE
51319: EQUAL
51320: IFTRUE 51324
51322: GO 51412
51324: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
51325: LD_ADDR_VAR 0 2
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 4
51335: PUSH
51336: LD_INT 5
51338: PUSH
51339: LD_INT 11
51341: PUSH
51342: LD_INT 12
51344: PUSH
51345: LD_INT 15
51347: PUSH
51348: LD_INT 16
51350: PUSH
51351: LD_INT 22
51353: PUSH
51354: LD_INT 26
51356: PUSH
51357: LD_INT 36
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 101
51374: PUSH
51375: LD_INT 102
51377: PUSH
51378: LD_INT 105
51380: PUSH
51381: LD_INT 106
51383: PUSH
51384: LD_INT 108
51386: PUSH
51387: LD_INT 116
51389: PUSH
51390: LD_INT 117
51392: PUSH
51393: LD_INT 118
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: ST_TO_ADDR
51410: GO 54297
51412: LD_INT 4
51414: DOUBLE
51415: EQUAL
51416: IFTRUE 51420
51418: GO 51516
51420: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
51421: LD_ADDR_VAR 0 2
51425: PUSH
51426: LD_INT 2
51428: PUSH
51429: LD_INT 4
51431: PUSH
51432: LD_INT 5
51434: PUSH
51435: LD_INT 8
51437: PUSH
51438: LD_INT 11
51440: PUSH
51441: LD_INT 12
51443: PUSH
51444: LD_INT 15
51446: PUSH
51447: LD_INT 16
51449: PUSH
51450: LD_INT 22
51452: PUSH
51453: LD_INT 23
51455: PUSH
51456: LD_INT 26
51458: PUSH
51459: LD_INT 36
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 101
51478: PUSH
51479: LD_INT 102
51481: PUSH
51482: LD_INT 105
51484: PUSH
51485: LD_INT 106
51487: PUSH
51488: LD_INT 108
51490: PUSH
51491: LD_INT 116
51493: PUSH
51494: LD_INT 117
51496: PUSH
51497: LD_INT 118
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: ST_TO_ADDR
51514: GO 54297
51516: LD_INT 5
51518: DOUBLE
51519: EQUAL
51520: IFTRUE 51524
51522: GO 51636
51524: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
51525: LD_ADDR_VAR 0 2
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 4
51535: PUSH
51536: LD_INT 5
51538: PUSH
51539: LD_INT 6
51541: PUSH
51542: LD_INT 8
51544: PUSH
51545: LD_INT 11
51547: PUSH
51548: LD_INT 12
51550: PUSH
51551: LD_INT 15
51553: PUSH
51554: LD_INT 16
51556: PUSH
51557: LD_INT 22
51559: PUSH
51560: LD_INT 23
51562: PUSH
51563: LD_INT 25
51565: PUSH
51566: LD_INT 26
51568: PUSH
51569: LD_INT 36
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 101
51590: PUSH
51591: LD_INT 102
51593: PUSH
51594: LD_INT 105
51596: PUSH
51597: LD_INT 106
51599: PUSH
51600: LD_INT 108
51602: PUSH
51603: LD_INT 109
51605: PUSH
51606: LD_INT 112
51608: PUSH
51609: LD_INT 116
51611: PUSH
51612: LD_INT 117
51614: PUSH
51615: LD_INT 118
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: ST_TO_ADDR
51634: GO 54297
51636: LD_INT 6
51638: DOUBLE
51639: EQUAL
51640: IFTRUE 51644
51642: GO 51776
51644: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
51645: LD_ADDR_VAR 0 2
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 4
51655: PUSH
51656: LD_INT 5
51658: PUSH
51659: LD_INT 6
51661: PUSH
51662: LD_INT 8
51664: PUSH
51665: LD_INT 11
51667: PUSH
51668: LD_INT 12
51670: PUSH
51671: LD_INT 15
51673: PUSH
51674: LD_INT 16
51676: PUSH
51677: LD_INT 20
51679: PUSH
51680: LD_INT 21
51682: PUSH
51683: LD_INT 22
51685: PUSH
51686: LD_INT 23
51688: PUSH
51689: LD_INT 25
51691: PUSH
51692: LD_INT 26
51694: PUSH
51695: LD_INT 30
51697: PUSH
51698: LD_INT 31
51700: PUSH
51701: LD_INT 32
51703: PUSH
51704: LD_INT 36
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 101
51730: PUSH
51731: LD_INT 102
51733: PUSH
51734: LD_INT 105
51736: PUSH
51737: LD_INT 106
51739: PUSH
51740: LD_INT 108
51742: PUSH
51743: LD_INT 109
51745: PUSH
51746: LD_INT 112
51748: PUSH
51749: LD_INT 116
51751: PUSH
51752: LD_INT 117
51754: PUSH
51755: LD_INT 118
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: ST_TO_ADDR
51774: GO 54297
51776: LD_INT 7
51778: DOUBLE
51779: EQUAL
51780: IFTRUE 51784
51782: GO 51896
51784: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
51785: LD_ADDR_VAR 0 2
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: LD_INT 5
51798: PUSH
51799: LD_INT 7
51801: PUSH
51802: LD_INT 11
51804: PUSH
51805: LD_INT 12
51807: PUSH
51808: LD_INT 15
51810: PUSH
51811: LD_INT 16
51813: PUSH
51814: LD_INT 20
51816: PUSH
51817: LD_INT 21
51819: PUSH
51820: LD_INT 22
51822: PUSH
51823: LD_INT 23
51825: PUSH
51826: LD_INT 25
51828: PUSH
51829: LD_INT 26
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 101
51850: PUSH
51851: LD_INT 102
51853: PUSH
51854: LD_INT 103
51856: PUSH
51857: LD_INT 105
51859: PUSH
51860: LD_INT 106
51862: PUSH
51863: LD_INT 108
51865: PUSH
51866: LD_INT 112
51868: PUSH
51869: LD_INT 116
51871: PUSH
51872: LD_INT 117
51874: PUSH
51875: LD_INT 118
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: ST_TO_ADDR
51894: GO 54297
51896: LD_INT 8
51898: DOUBLE
51899: EQUAL
51900: IFTRUE 51904
51902: GO 52044
51904: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51905: LD_ADDR_VAR 0 2
51909: PUSH
51910: LD_INT 2
51912: PUSH
51913: LD_INT 4
51915: PUSH
51916: LD_INT 5
51918: PUSH
51919: LD_INT 6
51921: PUSH
51922: LD_INT 7
51924: PUSH
51925: LD_INT 8
51927: PUSH
51928: LD_INT 11
51930: PUSH
51931: LD_INT 12
51933: PUSH
51934: LD_INT 15
51936: PUSH
51937: LD_INT 16
51939: PUSH
51940: LD_INT 20
51942: PUSH
51943: LD_INT 21
51945: PUSH
51946: LD_INT 22
51948: PUSH
51949: LD_INT 23
51951: PUSH
51952: LD_INT 25
51954: PUSH
51955: LD_INT 26
51957: PUSH
51958: LD_INT 30
51960: PUSH
51961: LD_INT 31
51963: PUSH
51964: LD_INT 32
51966: PUSH
51967: LD_INT 36
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 101
51994: PUSH
51995: LD_INT 102
51997: PUSH
51998: LD_INT 103
52000: PUSH
52001: LD_INT 105
52003: PUSH
52004: LD_INT 106
52006: PUSH
52007: LD_INT 108
52009: PUSH
52010: LD_INT 109
52012: PUSH
52013: LD_INT 112
52015: PUSH
52016: LD_INT 116
52018: PUSH
52019: LD_INT 117
52021: PUSH
52022: LD_INT 118
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: ST_TO_ADDR
52042: GO 54297
52044: LD_INT 9
52046: DOUBLE
52047: EQUAL
52048: IFTRUE 52052
52050: GO 52200
52052: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
52053: LD_ADDR_VAR 0 2
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: LD_INT 4
52063: PUSH
52064: LD_INT 5
52066: PUSH
52067: LD_INT 6
52069: PUSH
52070: LD_INT 7
52072: PUSH
52073: LD_INT 8
52075: PUSH
52076: LD_INT 11
52078: PUSH
52079: LD_INT 12
52081: PUSH
52082: LD_INT 15
52084: PUSH
52085: LD_INT 16
52087: PUSH
52088: LD_INT 20
52090: PUSH
52091: LD_INT 21
52093: PUSH
52094: LD_INT 22
52096: PUSH
52097: LD_INT 23
52099: PUSH
52100: LD_INT 25
52102: PUSH
52103: LD_INT 26
52105: PUSH
52106: LD_INT 28
52108: PUSH
52109: LD_INT 30
52111: PUSH
52112: LD_INT 31
52114: PUSH
52115: LD_INT 32
52117: PUSH
52118: LD_INT 36
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 101
52146: PUSH
52147: LD_INT 102
52149: PUSH
52150: LD_INT 103
52152: PUSH
52153: LD_INT 105
52155: PUSH
52156: LD_INT 106
52158: PUSH
52159: LD_INT 108
52161: PUSH
52162: LD_INT 109
52164: PUSH
52165: LD_INT 112
52167: PUSH
52168: LD_INT 114
52170: PUSH
52171: LD_INT 116
52173: PUSH
52174: LD_INT 117
52176: PUSH
52177: LD_INT 118
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: ST_TO_ADDR
52198: GO 54297
52200: LD_INT 10
52202: DOUBLE
52203: EQUAL
52204: IFTRUE 52208
52206: GO 52404
52208: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
52209: LD_ADDR_VAR 0 2
52213: PUSH
52214: LD_INT 2
52216: PUSH
52217: LD_INT 4
52219: PUSH
52220: LD_INT 5
52222: PUSH
52223: LD_INT 6
52225: PUSH
52226: LD_INT 7
52228: PUSH
52229: LD_INT 8
52231: PUSH
52232: LD_INT 9
52234: PUSH
52235: LD_INT 10
52237: PUSH
52238: LD_INT 11
52240: PUSH
52241: LD_INT 12
52243: PUSH
52244: LD_INT 13
52246: PUSH
52247: LD_INT 14
52249: PUSH
52250: LD_INT 15
52252: PUSH
52253: LD_INT 16
52255: PUSH
52256: LD_INT 17
52258: PUSH
52259: LD_INT 18
52261: PUSH
52262: LD_INT 19
52264: PUSH
52265: LD_INT 20
52267: PUSH
52268: LD_INT 21
52270: PUSH
52271: LD_INT 22
52273: PUSH
52274: LD_INT 23
52276: PUSH
52277: LD_INT 24
52279: PUSH
52280: LD_INT 25
52282: PUSH
52283: LD_INT 26
52285: PUSH
52286: LD_INT 28
52288: PUSH
52289: LD_INT 30
52291: PUSH
52292: LD_INT 31
52294: PUSH
52295: LD_INT 32
52297: PUSH
52298: LD_INT 36
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 101
52334: PUSH
52335: LD_INT 102
52337: PUSH
52338: LD_INT 103
52340: PUSH
52341: LD_INT 104
52343: PUSH
52344: LD_INT 105
52346: PUSH
52347: LD_INT 106
52349: PUSH
52350: LD_INT 107
52352: PUSH
52353: LD_INT 108
52355: PUSH
52356: LD_INT 109
52358: PUSH
52359: LD_INT 110
52361: PUSH
52362: LD_INT 111
52364: PUSH
52365: LD_INT 112
52367: PUSH
52368: LD_INT 114
52370: PUSH
52371: LD_INT 116
52373: PUSH
52374: LD_INT 117
52376: PUSH
52377: LD_INT 118
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: ST_TO_ADDR
52402: GO 54297
52404: LD_INT 11
52406: DOUBLE
52407: EQUAL
52408: IFTRUE 52412
52410: GO 52616
52412: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
52413: LD_ADDR_VAR 0 2
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: LD_INT 4
52426: PUSH
52427: LD_INT 5
52429: PUSH
52430: LD_INT 6
52432: PUSH
52433: LD_INT 7
52435: PUSH
52436: LD_INT 8
52438: PUSH
52439: LD_INT 9
52441: PUSH
52442: LD_INT 10
52444: PUSH
52445: LD_INT 11
52447: PUSH
52448: LD_INT 12
52450: PUSH
52451: LD_INT 13
52453: PUSH
52454: LD_INT 14
52456: PUSH
52457: LD_INT 15
52459: PUSH
52460: LD_INT 16
52462: PUSH
52463: LD_INT 17
52465: PUSH
52466: LD_INT 18
52468: PUSH
52469: LD_INT 19
52471: PUSH
52472: LD_INT 20
52474: PUSH
52475: LD_INT 21
52477: PUSH
52478: LD_INT 22
52480: PUSH
52481: LD_INT 23
52483: PUSH
52484: LD_INT 24
52486: PUSH
52487: LD_INT 25
52489: PUSH
52490: LD_INT 26
52492: PUSH
52493: LD_INT 28
52495: PUSH
52496: LD_INT 30
52498: PUSH
52499: LD_INT 31
52501: PUSH
52502: LD_INT 32
52504: PUSH
52505: LD_INT 34
52507: PUSH
52508: LD_INT 36
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 101
52546: PUSH
52547: LD_INT 102
52549: PUSH
52550: LD_INT 103
52552: PUSH
52553: LD_INT 104
52555: PUSH
52556: LD_INT 105
52558: PUSH
52559: LD_INT 106
52561: PUSH
52562: LD_INT 107
52564: PUSH
52565: LD_INT 108
52567: PUSH
52568: LD_INT 109
52570: PUSH
52571: LD_INT 110
52573: PUSH
52574: LD_INT 111
52576: PUSH
52577: LD_INT 112
52579: PUSH
52580: LD_INT 114
52582: PUSH
52583: LD_INT 116
52585: PUSH
52586: LD_INT 117
52588: PUSH
52589: LD_INT 118
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: ST_TO_ADDR
52614: GO 54297
52616: LD_INT 12
52618: DOUBLE
52619: EQUAL
52620: IFTRUE 52624
52622: GO 52844
52624: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
52625: LD_ADDR_VAR 0 2
52629: PUSH
52630: LD_INT 1
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: LD_INT 4
52641: PUSH
52642: LD_INT 5
52644: PUSH
52645: LD_INT 6
52647: PUSH
52648: LD_INT 7
52650: PUSH
52651: LD_INT 8
52653: PUSH
52654: LD_INT 9
52656: PUSH
52657: LD_INT 10
52659: PUSH
52660: LD_INT 11
52662: PUSH
52663: LD_INT 12
52665: PUSH
52666: LD_INT 13
52668: PUSH
52669: LD_INT 14
52671: PUSH
52672: LD_INT 15
52674: PUSH
52675: LD_INT 16
52677: PUSH
52678: LD_INT 17
52680: PUSH
52681: LD_INT 18
52683: PUSH
52684: LD_INT 19
52686: PUSH
52687: LD_INT 20
52689: PUSH
52690: LD_INT 21
52692: PUSH
52693: LD_INT 22
52695: PUSH
52696: LD_INT 23
52698: PUSH
52699: LD_INT 24
52701: PUSH
52702: LD_INT 25
52704: PUSH
52705: LD_INT 26
52707: PUSH
52708: LD_INT 27
52710: PUSH
52711: LD_INT 28
52713: PUSH
52714: LD_INT 30
52716: PUSH
52717: LD_INT 31
52719: PUSH
52720: LD_INT 32
52722: PUSH
52723: LD_INT 33
52725: PUSH
52726: LD_INT 34
52728: PUSH
52729: LD_INT 36
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 101
52770: PUSH
52771: LD_INT 102
52773: PUSH
52774: LD_INT 103
52776: PUSH
52777: LD_INT 104
52779: PUSH
52780: LD_INT 105
52782: PUSH
52783: LD_INT 106
52785: PUSH
52786: LD_INT 107
52788: PUSH
52789: LD_INT 108
52791: PUSH
52792: LD_INT 109
52794: PUSH
52795: LD_INT 110
52797: PUSH
52798: LD_INT 111
52800: PUSH
52801: LD_INT 112
52803: PUSH
52804: LD_INT 113
52806: PUSH
52807: LD_INT 114
52809: PUSH
52810: LD_INT 116
52812: PUSH
52813: LD_INT 117
52815: PUSH
52816: LD_INT 118
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: ST_TO_ADDR
52842: GO 54297
52844: LD_INT 13
52846: DOUBLE
52847: EQUAL
52848: IFTRUE 52852
52850: GO 53060
52852: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
52853: LD_ADDR_VAR 0 2
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 3
52866: PUSH
52867: LD_INT 4
52869: PUSH
52870: LD_INT 5
52872: PUSH
52873: LD_INT 8
52875: PUSH
52876: LD_INT 9
52878: PUSH
52879: LD_INT 10
52881: PUSH
52882: LD_INT 11
52884: PUSH
52885: LD_INT 12
52887: PUSH
52888: LD_INT 14
52890: PUSH
52891: LD_INT 15
52893: PUSH
52894: LD_INT 16
52896: PUSH
52897: LD_INT 17
52899: PUSH
52900: LD_INT 18
52902: PUSH
52903: LD_INT 19
52905: PUSH
52906: LD_INT 20
52908: PUSH
52909: LD_INT 21
52911: PUSH
52912: LD_INT 22
52914: PUSH
52915: LD_INT 23
52917: PUSH
52918: LD_INT 24
52920: PUSH
52921: LD_INT 25
52923: PUSH
52924: LD_INT 26
52926: PUSH
52927: LD_INT 27
52929: PUSH
52930: LD_INT 28
52932: PUSH
52933: LD_INT 30
52935: PUSH
52936: LD_INT 31
52938: PUSH
52939: LD_INT 32
52941: PUSH
52942: LD_INT 33
52944: PUSH
52945: LD_INT 34
52947: PUSH
52948: LD_INT 36
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 101
52986: PUSH
52987: LD_INT 102
52989: PUSH
52990: LD_INT 103
52992: PUSH
52993: LD_INT 104
52995: PUSH
52996: LD_INT 105
52998: PUSH
52999: LD_INT 106
53001: PUSH
53002: LD_INT 107
53004: PUSH
53005: LD_INT 108
53007: PUSH
53008: LD_INT 109
53010: PUSH
53011: LD_INT 110
53013: PUSH
53014: LD_INT 111
53016: PUSH
53017: LD_INT 112
53019: PUSH
53020: LD_INT 113
53022: PUSH
53023: LD_INT 114
53025: PUSH
53026: LD_INT 116
53028: PUSH
53029: LD_INT 117
53031: PUSH
53032: LD_INT 118
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: ST_TO_ADDR
53058: GO 54297
53060: LD_INT 14
53062: DOUBLE
53063: EQUAL
53064: IFTRUE 53068
53066: GO 53292
53068: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
53069: LD_ADDR_VAR 0 2
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 4
53085: PUSH
53086: LD_INT 5
53088: PUSH
53089: LD_INT 6
53091: PUSH
53092: LD_INT 7
53094: PUSH
53095: LD_INT 8
53097: PUSH
53098: LD_INT 9
53100: PUSH
53101: LD_INT 10
53103: PUSH
53104: LD_INT 11
53106: PUSH
53107: LD_INT 12
53109: PUSH
53110: LD_INT 13
53112: PUSH
53113: LD_INT 14
53115: PUSH
53116: LD_INT 15
53118: PUSH
53119: LD_INT 16
53121: PUSH
53122: LD_INT 17
53124: PUSH
53125: LD_INT 18
53127: PUSH
53128: LD_INT 19
53130: PUSH
53131: LD_INT 20
53133: PUSH
53134: LD_INT 21
53136: PUSH
53137: LD_INT 22
53139: PUSH
53140: LD_INT 23
53142: PUSH
53143: LD_INT 24
53145: PUSH
53146: LD_INT 25
53148: PUSH
53149: LD_INT 26
53151: PUSH
53152: LD_INT 27
53154: PUSH
53155: LD_INT 28
53157: PUSH
53158: LD_INT 29
53160: PUSH
53161: LD_INT 30
53163: PUSH
53164: LD_INT 31
53166: PUSH
53167: LD_INT 32
53169: PUSH
53170: LD_INT 33
53172: PUSH
53173: LD_INT 34
53175: PUSH
53176: LD_INT 36
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 101
53218: PUSH
53219: LD_INT 102
53221: PUSH
53222: LD_INT 103
53224: PUSH
53225: LD_INT 104
53227: PUSH
53228: LD_INT 105
53230: PUSH
53231: LD_INT 106
53233: PUSH
53234: LD_INT 107
53236: PUSH
53237: LD_INT 108
53239: PUSH
53240: LD_INT 109
53242: PUSH
53243: LD_INT 110
53245: PUSH
53246: LD_INT 111
53248: PUSH
53249: LD_INT 112
53251: PUSH
53252: LD_INT 113
53254: PUSH
53255: LD_INT 114
53257: PUSH
53258: LD_INT 116
53260: PUSH
53261: LD_INT 117
53263: PUSH
53264: LD_INT 118
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: ST_TO_ADDR
53290: GO 54297
53292: LD_INT 15
53294: DOUBLE
53295: EQUAL
53296: IFTRUE 53300
53298: GO 53524
53300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
53301: LD_ADDR_VAR 0 2
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 3
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: LD_INT 5
53320: PUSH
53321: LD_INT 6
53323: PUSH
53324: LD_INT 7
53326: PUSH
53327: LD_INT 8
53329: PUSH
53330: LD_INT 9
53332: PUSH
53333: LD_INT 10
53335: PUSH
53336: LD_INT 11
53338: PUSH
53339: LD_INT 12
53341: PUSH
53342: LD_INT 13
53344: PUSH
53345: LD_INT 14
53347: PUSH
53348: LD_INT 15
53350: PUSH
53351: LD_INT 16
53353: PUSH
53354: LD_INT 17
53356: PUSH
53357: LD_INT 18
53359: PUSH
53360: LD_INT 19
53362: PUSH
53363: LD_INT 20
53365: PUSH
53366: LD_INT 21
53368: PUSH
53369: LD_INT 22
53371: PUSH
53372: LD_INT 23
53374: PUSH
53375: LD_INT 24
53377: PUSH
53378: LD_INT 25
53380: PUSH
53381: LD_INT 26
53383: PUSH
53384: LD_INT 27
53386: PUSH
53387: LD_INT 28
53389: PUSH
53390: LD_INT 29
53392: PUSH
53393: LD_INT 30
53395: PUSH
53396: LD_INT 31
53398: PUSH
53399: LD_INT 32
53401: PUSH
53402: LD_INT 33
53404: PUSH
53405: LD_INT 34
53407: PUSH
53408: LD_INT 36
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 101
53450: PUSH
53451: LD_INT 102
53453: PUSH
53454: LD_INT 103
53456: PUSH
53457: LD_INT 104
53459: PUSH
53460: LD_INT 105
53462: PUSH
53463: LD_INT 106
53465: PUSH
53466: LD_INT 107
53468: PUSH
53469: LD_INT 108
53471: PUSH
53472: LD_INT 109
53474: PUSH
53475: LD_INT 110
53477: PUSH
53478: LD_INT 111
53480: PUSH
53481: LD_INT 112
53483: PUSH
53484: LD_INT 113
53486: PUSH
53487: LD_INT 114
53489: PUSH
53490: LD_INT 116
53492: PUSH
53493: LD_INT 117
53495: PUSH
53496: LD_INT 118
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: ST_TO_ADDR
53522: GO 54297
53524: LD_INT 16
53526: DOUBLE
53527: EQUAL
53528: IFTRUE 53532
53530: GO 53668
53532: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
53533: LD_ADDR_VAR 0 2
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 4
53543: PUSH
53544: LD_INT 5
53546: PUSH
53547: LD_INT 7
53549: PUSH
53550: LD_INT 11
53552: PUSH
53553: LD_INT 12
53555: PUSH
53556: LD_INT 15
53558: PUSH
53559: LD_INT 16
53561: PUSH
53562: LD_INT 20
53564: PUSH
53565: LD_INT 21
53567: PUSH
53568: LD_INT 22
53570: PUSH
53571: LD_INT 23
53573: PUSH
53574: LD_INT 25
53576: PUSH
53577: LD_INT 26
53579: PUSH
53580: LD_INT 30
53582: PUSH
53583: LD_INT 31
53585: PUSH
53586: LD_INT 32
53588: PUSH
53589: LD_INT 33
53591: PUSH
53592: LD_INT 34
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 101
53618: PUSH
53619: LD_INT 102
53621: PUSH
53622: LD_INT 103
53624: PUSH
53625: LD_INT 106
53627: PUSH
53628: LD_INT 108
53630: PUSH
53631: LD_INT 112
53633: PUSH
53634: LD_INT 113
53636: PUSH
53637: LD_INT 114
53639: PUSH
53640: LD_INT 116
53642: PUSH
53643: LD_INT 117
53645: PUSH
53646: LD_INT 118
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: ST_TO_ADDR
53666: GO 54297
53668: LD_INT 17
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53676
53674: GO 53900
53676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
53677: LD_ADDR_VAR 0 2
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 2
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 4
53693: PUSH
53694: LD_INT 5
53696: PUSH
53697: LD_INT 6
53699: PUSH
53700: LD_INT 7
53702: PUSH
53703: LD_INT 8
53705: PUSH
53706: LD_INT 9
53708: PUSH
53709: LD_INT 10
53711: PUSH
53712: LD_INT 11
53714: PUSH
53715: LD_INT 12
53717: PUSH
53718: LD_INT 13
53720: PUSH
53721: LD_INT 14
53723: PUSH
53724: LD_INT 15
53726: PUSH
53727: LD_INT 16
53729: PUSH
53730: LD_INT 17
53732: PUSH
53733: LD_INT 18
53735: PUSH
53736: LD_INT 19
53738: PUSH
53739: LD_INT 20
53741: PUSH
53742: LD_INT 21
53744: PUSH
53745: LD_INT 22
53747: PUSH
53748: LD_INT 23
53750: PUSH
53751: LD_INT 24
53753: PUSH
53754: LD_INT 25
53756: PUSH
53757: LD_INT 26
53759: PUSH
53760: LD_INT 27
53762: PUSH
53763: LD_INT 28
53765: PUSH
53766: LD_INT 29
53768: PUSH
53769: LD_INT 30
53771: PUSH
53772: LD_INT 31
53774: PUSH
53775: LD_INT 32
53777: PUSH
53778: LD_INT 33
53780: PUSH
53781: LD_INT 34
53783: PUSH
53784: LD_INT 36
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 101
53826: PUSH
53827: LD_INT 102
53829: PUSH
53830: LD_INT 103
53832: PUSH
53833: LD_INT 104
53835: PUSH
53836: LD_INT 105
53838: PUSH
53839: LD_INT 106
53841: PUSH
53842: LD_INT 107
53844: PUSH
53845: LD_INT 108
53847: PUSH
53848: LD_INT 109
53850: PUSH
53851: LD_INT 110
53853: PUSH
53854: LD_INT 111
53856: PUSH
53857: LD_INT 112
53859: PUSH
53860: LD_INT 113
53862: PUSH
53863: LD_INT 114
53865: PUSH
53866: LD_INT 116
53868: PUSH
53869: LD_INT 117
53871: PUSH
53872: LD_INT 118
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: ST_TO_ADDR
53898: GO 54297
53900: LD_INT 18
53902: DOUBLE
53903: EQUAL
53904: IFTRUE 53908
53906: GO 54056
53908: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53909: LD_ADDR_VAR 0 2
53913: PUSH
53914: LD_INT 2
53916: PUSH
53917: LD_INT 4
53919: PUSH
53920: LD_INT 5
53922: PUSH
53923: LD_INT 7
53925: PUSH
53926: LD_INT 11
53928: PUSH
53929: LD_INT 12
53931: PUSH
53932: LD_INT 15
53934: PUSH
53935: LD_INT 16
53937: PUSH
53938: LD_INT 20
53940: PUSH
53941: LD_INT 21
53943: PUSH
53944: LD_INT 22
53946: PUSH
53947: LD_INT 23
53949: PUSH
53950: LD_INT 25
53952: PUSH
53953: LD_INT 26
53955: PUSH
53956: LD_INT 30
53958: PUSH
53959: LD_INT 31
53961: PUSH
53962: LD_INT 32
53964: PUSH
53965: LD_INT 33
53967: PUSH
53968: LD_INT 34
53970: PUSH
53971: LD_INT 35
53973: PUSH
53974: LD_INT 36
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 101
54002: PUSH
54003: LD_INT 102
54005: PUSH
54006: LD_INT 103
54008: PUSH
54009: LD_INT 106
54011: PUSH
54012: LD_INT 108
54014: PUSH
54015: LD_INT 112
54017: PUSH
54018: LD_INT 113
54020: PUSH
54021: LD_INT 114
54023: PUSH
54024: LD_INT 115
54026: PUSH
54027: LD_INT 116
54029: PUSH
54030: LD_INT 117
54032: PUSH
54033: LD_INT 118
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: ST_TO_ADDR
54054: GO 54297
54056: LD_INT 19
54058: DOUBLE
54059: EQUAL
54060: IFTRUE 54064
54062: GO 54296
54064: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
54065: LD_ADDR_VAR 0 2
54069: PUSH
54070: LD_INT 1
54072: PUSH
54073: LD_INT 2
54075: PUSH
54076: LD_INT 3
54078: PUSH
54079: LD_INT 4
54081: PUSH
54082: LD_INT 5
54084: PUSH
54085: LD_INT 6
54087: PUSH
54088: LD_INT 7
54090: PUSH
54091: LD_INT 8
54093: PUSH
54094: LD_INT 9
54096: PUSH
54097: LD_INT 10
54099: PUSH
54100: LD_INT 11
54102: PUSH
54103: LD_INT 12
54105: PUSH
54106: LD_INT 13
54108: PUSH
54109: LD_INT 14
54111: PUSH
54112: LD_INT 15
54114: PUSH
54115: LD_INT 16
54117: PUSH
54118: LD_INT 17
54120: PUSH
54121: LD_INT 18
54123: PUSH
54124: LD_INT 19
54126: PUSH
54127: LD_INT 20
54129: PUSH
54130: LD_INT 21
54132: PUSH
54133: LD_INT 22
54135: PUSH
54136: LD_INT 23
54138: PUSH
54139: LD_INT 24
54141: PUSH
54142: LD_INT 25
54144: PUSH
54145: LD_INT 26
54147: PUSH
54148: LD_INT 27
54150: PUSH
54151: LD_INT 28
54153: PUSH
54154: LD_INT 29
54156: PUSH
54157: LD_INT 30
54159: PUSH
54160: LD_INT 31
54162: PUSH
54163: LD_INT 32
54165: PUSH
54166: LD_INT 33
54168: PUSH
54169: LD_INT 34
54171: PUSH
54172: LD_INT 35
54174: PUSH
54175: LD_INT 36
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 101
54218: PUSH
54219: LD_INT 102
54221: PUSH
54222: LD_INT 103
54224: PUSH
54225: LD_INT 104
54227: PUSH
54228: LD_INT 105
54230: PUSH
54231: LD_INT 106
54233: PUSH
54234: LD_INT 107
54236: PUSH
54237: LD_INT 108
54239: PUSH
54240: LD_INT 109
54242: PUSH
54243: LD_INT 110
54245: PUSH
54246: LD_INT 111
54248: PUSH
54249: LD_INT 112
54251: PUSH
54252: LD_INT 113
54254: PUSH
54255: LD_INT 114
54257: PUSH
54258: LD_INT 115
54260: PUSH
54261: LD_INT 116
54263: PUSH
54264: LD_INT 117
54266: PUSH
54267: LD_INT 118
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: ST_TO_ADDR
54294: GO 54297
54296: POP
// end else
54297: GO 54528
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
54299: LD_ADDR_VAR 0 2
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: LD_INT 3
54312: PUSH
54313: LD_INT 4
54315: PUSH
54316: LD_INT 5
54318: PUSH
54319: LD_INT 6
54321: PUSH
54322: LD_INT 7
54324: PUSH
54325: LD_INT 8
54327: PUSH
54328: LD_INT 9
54330: PUSH
54331: LD_INT 10
54333: PUSH
54334: LD_INT 11
54336: PUSH
54337: LD_INT 12
54339: PUSH
54340: LD_INT 13
54342: PUSH
54343: LD_INT 14
54345: PUSH
54346: LD_INT 15
54348: PUSH
54349: LD_INT 16
54351: PUSH
54352: LD_INT 17
54354: PUSH
54355: LD_INT 18
54357: PUSH
54358: LD_INT 19
54360: PUSH
54361: LD_INT 20
54363: PUSH
54364: LD_INT 21
54366: PUSH
54367: LD_INT 22
54369: PUSH
54370: LD_INT 23
54372: PUSH
54373: LD_INT 24
54375: PUSH
54376: LD_INT 25
54378: PUSH
54379: LD_INT 26
54381: PUSH
54382: LD_INT 27
54384: PUSH
54385: LD_INT 28
54387: PUSH
54388: LD_INT 29
54390: PUSH
54391: LD_INT 30
54393: PUSH
54394: LD_INT 31
54396: PUSH
54397: LD_INT 32
54399: PUSH
54400: LD_INT 33
54402: PUSH
54403: LD_INT 34
54405: PUSH
54406: LD_INT 35
54408: PUSH
54409: LD_INT 36
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: LIST
54424: LIST
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 101
54452: PUSH
54453: LD_INT 102
54455: PUSH
54456: LD_INT 103
54458: PUSH
54459: LD_INT 104
54461: PUSH
54462: LD_INT 105
54464: PUSH
54465: LD_INT 106
54467: PUSH
54468: LD_INT 107
54470: PUSH
54471: LD_INT 108
54473: PUSH
54474: LD_INT 109
54476: PUSH
54477: LD_INT 110
54479: PUSH
54480: LD_INT 111
54482: PUSH
54483: LD_INT 112
54485: PUSH
54486: LD_INT 113
54488: PUSH
54489: LD_INT 114
54491: PUSH
54492: LD_INT 115
54494: PUSH
54495: LD_INT 116
54497: PUSH
54498: LD_INT 117
54500: PUSH
54501: LD_INT 118
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: ST_TO_ADDR
// if result then
54528: LD_VAR 0 2
54532: IFFALSE 55318
// begin normal :=  ;
54534: LD_ADDR_VAR 0 5
54538: PUSH
54539: LD_STRING 
54541: ST_TO_ADDR
// hardcore :=  ;
54542: LD_ADDR_VAR 0 6
54546: PUSH
54547: LD_STRING 
54549: ST_TO_ADDR
// active :=  ;
54550: LD_ADDR_VAR 0 7
54554: PUSH
54555: LD_STRING 
54557: ST_TO_ADDR
// for i = 1 to normalCounter do
54558: LD_ADDR_VAR 0 8
54562: PUSH
54563: DOUBLE
54564: LD_INT 1
54566: DEC
54567: ST_TO_ADDR
54568: LD_EXP 31
54572: PUSH
54573: FOR_TO
54574: IFFALSE 54675
// begin tmp := 0 ;
54576: LD_ADDR_VAR 0 3
54580: PUSH
54581: LD_STRING 0
54583: ST_TO_ADDR
// if result [ 1 ] then
54584: LD_VAR 0 2
54588: PUSH
54589: LD_INT 1
54591: ARRAY
54592: IFFALSE 54657
// if result [ 1 ] [ 1 ] = i then
54594: LD_VAR 0 2
54598: PUSH
54599: LD_INT 1
54601: ARRAY
54602: PUSH
54603: LD_INT 1
54605: ARRAY
54606: PUSH
54607: LD_VAR 0 8
54611: EQUAL
54612: IFFALSE 54657
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
54614: LD_ADDR_VAR 0 2
54618: PUSH
54619: LD_VAR 0 2
54623: PPUSH
54624: LD_INT 1
54626: PPUSH
54627: LD_VAR 0 2
54631: PUSH
54632: LD_INT 1
54634: ARRAY
54635: PPUSH
54636: LD_INT 1
54638: PPUSH
54639: CALL_OW 3
54643: PPUSH
54644: CALL_OW 1
54648: ST_TO_ADDR
// tmp := 1 ;
54649: LD_ADDR_VAR 0 3
54653: PUSH
54654: LD_STRING 1
54656: ST_TO_ADDR
// end ; normal := normal & tmp ;
54657: LD_ADDR_VAR 0 5
54661: PUSH
54662: LD_VAR 0 5
54666: PUSH
54667: LD_VAR 0 3
54671: STR
54672: ST_TO_ADDR
// end ;
54673: GO 54573
54675: POP
54676: POP
// for i = 1 to hardcoreCounter do
54677: LD_ADDR_VAR 0 8
54681: PUSH
54682: DOUBLE
54683: LD_INT 1
54685: DEC
54686: ST_TO_ADDR
54687: LD_EXP 32
54691: PUSH
54692: FOR_TO
54693: IFFALSE 54798
// begin tmp := 0 ;
54695: LD_ADDR_VAR 0 3
54699: PUSH
54700: LD_STRING 0
54702: ST_TO_ADDR
// if result [ 2 ] then
54703: LD_VAR 0 2
54707: PUSH
54708: LD_INT 2
54710: ARRAY
54711: IFFALSE 54780
// if result [ 2 ] [ 1 ] = 100 + i then
54713: LD_VAR 0 2
54717: PUSH
54718: LD_INT 2
54720: ARRAY
54721: PUSH
54722: LD_INT 1
54724: ARRAY
54725: PUSH
54726: LD_INT 100
54728: PUSH
54729: LD_VAR 0 8
54733: PLUS
54734: EQUAL
54735: IFFALSE 54780
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
54737: LD_ADDR_VAR 0 2
54741: PUSH
54742: LD_VAR 0 2
54746: PPUSH
54747: LD_INT 2
54749: PPUSH
54750: LD_VAR 0 2
54754: PUSH
54755: LD_INT 2
54757: ARRAY
54758: PPUSH
54759: LD_INT 1
54761: PPUSH
54762: CALL_OW 3
54766: PPUSH
54767: CALL_OW 1
54771: ST_TO_ADDR
// tmp := 1 ;
54772: LD_ADDR_VAR 0 3
54776: PUSH
54777: LD_STRING 1
54779: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
54780: LD_ADDR_VAR 0 6
54784: PUSH
54785: LD_VAR 0 6
54789: PUSH
54790: LD_VAR 0 3
54794: STR
54795: ST_TO_ADDR
// end ;
54796: GO 54692
54798: POP
54799: POP
// if isGameLoad then
54800: LD_VAR 0 1
54804: IFFALSE 55279
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
54806: LD_ADDR_VAR 0 4
54810: PUSH
54811: LD_EXP 35
54815: PUSH
54816: LD_EXP 34
54820: PUSH
54821: LD_EXP 36
54825: PUSH
54826: LD_EXP 33
54830: PUSH
54831: LD_EXP 37
54835: PUSH
54836: LD_EXP 38
54840: PUSH
54841: LD_EXP 39
54845: PUSH
54846: LD_EXP 40
54850: PUSH
54851: LD_EXP 41
54855: PUSH
54856: LD_EXP 42
54860: PUSH
54861: LD_EXP 43
54865: PUSH
54866: LD_EXP 44
54870: PUSH
54871: LD_EXP 45
54875: PUSH
54876: LD_EXP 46
54880: PUSH
54881: LD_EXP 54
54885: PUSH
54886: LD_EXP 55
54890: PUSH
54891: LD_EXP 56
54895: PUSH
54896: LD_EXP 57
54900: PUSH
54901: LD_EXP 59
54905: PUSH
54906: LD_EXP 60
54910: PUSH
54911: LD_EXP 61
54915: PUSH
54916: LD_EXP 64
54920: PUSH
54921: LD_EXP 66
54925: PUSH
54926: LD_EXP 67
54930: PUSH
54931: LD_EXP 68
54935: PUSH
54936: LD_EXP 70
54940: PUSH
54941: LD_EXP 71
54945: PUSH
54946: LD_EXP 74
54950: PUSH
54951: LD_EXP 75
54955: PUSH
54956: LD_EXP 76
54960: PUSH
54961: LD_EXP 77
54965: PUSH
54966: LD_EXP 78
54970: PUSH
54971: LD_EXP 79
54975: PUSH
54976: LD_EXP 80
54980: PUSH
54981: LD_EXP 81
54985: PUSH
54986: LD_EXP 82
54990: PUSH
54991: LD_EXP 47
54995: PUSH
54996: LD_EXP 48
55000: PUSH
55001: LD_EXP 51
55005: PUSH
55006: LD_EXP 52
55010: PUSH
55011: LD_EXP 53
55015: PUSH
55016: LD_EXP 49
55020: PUSH
55021: LD_EXP 50
55025: PUSH
55026: LD_EXP 58
55030: PUSH
55031: LD_EXP 62
55035: PUSH
55036: LD_EXP 63
55040: PUSH
55041: LD_EXP 65
55045: PUSH
55046: LD_EXP 69
55050: PUSH
55051: LD_EXP 72
55055: PUSH
55056: LD_EXP 73
55060: PUSH
55061: LD_EXP 83
55065: PUSH
55066: LD_EXP 84
55070: PUSH
55071: LD_EXP 85
55075: PUSH
55076: LD_EXP 86
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: ST_TO_ADDR
// tmp :=  ;
55137: LD_ADDR_VAR 0 3
55141: PUSH
55142: LD_STRING 
55144: ST_TO_ADDR
// for i = 1 to normalCounter do
55145: LD_ADDR_VAR 0 8
55149: PUSH
55150: DOUBLE
55151: LD_INT 1
55153: DEC
55154: ST_TO_ADDR
55155: LD_EXP 31
55159: PUSH
55160: FOR_TO
55161: IFFALSE 55197
// begin if flags [ i ] then
55163: LD_VAR 0 4
55167: PUSH
55168: LD_VAR 0 8
55172: ARRAY
55173: IFFALSE 55195
// tmp := tmp & i & ; ;
55175: LD_ADDR_VAR 0 3
55179: PUSH
55180: LD_VAR 0 3
55184: PUSH
55185: LD_VAR 0 8
55189: STR
55190: PUSH
55191: LD_STRING ;
55193: STR
55194: ST_TO_ADDR
// end ;
55195: GO 55160
55197: POP
55198: POP
// for i = 1 to hardcoreCounter do
55199: LD_ADDR_VAR 0 8
55203: PUSH
55204: DOUBLE
55205: LD_INT 1
55207: DEC
55208: ST_TO_ADDR
55209: LD_EXP 32
55213: PUSH
55214: FOR_TO
55215: IFFALSE 55261
// begin if flags [ normalCounter + i ] then
55217: LD_VAR 0 4
55221: PUSH
55222: LD_EXP 31
55226: PUSH
55227: LD_VAR 0 8
55231: PLUS
55232: ARRAY
55233: IFFALSE 55259
// tmp := tmp & ( 100 + i ) & ; ;
55235: LD_ADDR_VAR 0 3
55239: PUSH
55240: LD_VAR 0 3
55244: PUSH
55245: LD_INT 100
55247: PUSH
55248: LD_VAR 0 8
55252: PLUS
55253: STR
55254: PUSH
55255: LD_STRING ;
55257: STR
55258: ST_TO_ADDR
// end ;
55259: GO 55214
55261: POP
55262: POP
// if tmp then
55263: LD_VAR 0 3
55267: IFFALSE 55279
// active := tmp ;
55269: LD_ADDR_VAR 0 7
55273: PUSH
55274: LD_VAR 0 3
55278: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
55279: LD_STRING getStreamItemsFromMission("
55281: PUSH
55282: LD_VAR 0 5
55286: STR
55287: PUSH
55288: LD_STRING ","
55290: STR
55291: PUSH
55292: LD_VAR 0 6
55296: STR
55297: PUSH
55298: LD_STRING ","
55300: STR
55301: PUSH
55302: LD_VAR 0 7
55306: STR
55307: PUSH
55308: LD_STRING ")
55310: STR
55311: PPUSH
55312: CALL_OW 559
// end else
55316: GO 55325
// ToLua ( getStreamItemsFromMission("","","") ) ;
55318: LD_STRING getStreamItemsFromMission("","","")
55320: PPUSH
55321: CALL_OW 559
// end ;
55325: LD_VAR 0 2
55329: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
55330: LD_EXP 30
55334: PUSH
55335: LD_EXP 35
55339: AND
55340: IFFALSE 55464
55342: GO 55344
55344: DISABLE
55345: LD_INT 0
55347: PPUSH
55348: PPUSH
// begin enable ;
55349: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
55350: LD_ADDR_VAR 0 2
55354: PUSH
55355: LD_INT 22
55357: PUSH
55358: LD_OWVAR 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 34
55372: PUSH
55373: LD_INT 7
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 34
55382: PUSH
55383: LD_INT 45
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 34
55392: PUSH
55393: LD_INT 28
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 34
55402: PUSH
55403: LD_INT 47
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PPUSH
55421: CALL_OW 69
55425: ST_TO_ADDR
// if not tmp then
55426: LD_VAR 0 2
55430: NOT
55431: IFFALSE 55435
// exit ;
55433: GO 55464
// for i in tmp do
55435: LD_ADDR_VAR 0 1
55439: PUSH
55440: LD_VAR 0 2
55444: PUSH
55445: FOR_IN
55446: IFFALSE 55462
// begin SetLives ( i , 0 ) ;
55448: LD_VAR 0 1
55452: PPUSH
55453: LD_INT 0
55455: PPUSH
55456: CALL_OW 234
// end ;
55460: GO 55445
55462: POP
55463: POP
// end ;
55464: PPOPN 2
55466: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
55467: LD_EXP 30
55471: PUSH
55472: LD_EXP 36
55476: AND
55477: IFFALSE 55561
55479: GO 55481
55481: DISABLE
55482: LD_INT 0
55484: PPUSH
55485: PPUSH
// begin enable ;
55486: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
55487: LD_ADDR_VAR 0 2
55491: PUSH
55492: LD_INT 22
55494: PUSH
55495: LD_OWVAR 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 32
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PPUSH
55518: CALL_OW 69
55522: ST_TO_ADDR
// if not tmp then
55523: LD_VAR 0 2
55527: NOT
55528: IFFALSE 55532
// exit ;
55530: GO 55561
// for i in tmp do
55532: LD_ADDR_VAR 0 1
55536: PUSH
55537: LD_VAR 0 2
55541: PUSH
55542: FOR_IN
55543: IFFALSE 55559
// begin SetLives ( i , 0 ) ;
55545: LD_VAR 0 1
55549: PPUSH
55550: LD_INT 0
55552: PPUSH
55553: CALL_OW 234
// end ;
55557: GO 55542
55559: POP
55560: POP
// end ;
55561: PPOPN 2
55563: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
55564: LD_EXP 30
55568: PUSH
55569: LD_EXP 33
55573: AND
55574: IFFALSE 55667
55576: GO 55578
55578: DISABLE
55579: LD_INT 0
55581: PPUSH
// begin enable ;
55582: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
55583: LD_ADDR_VAR 0 1
55587: PUSH
55588: LD_INT 22
55590: PUSH
55591: LD_OWVAR 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 2
55602: PUSH
55603: LD_INT 25
55605: PUSH
55606: LD_INT 5
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 25
55615: PUSH
55616: LD_INT 9
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 25
55625: PUSH
55626: LD_INT 8
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PPUSH
55643: CALL_OW 69
55647: PUSH
55648: FOR_IN
55649: IFFALSE 55665
// begin SetClass ( i , 1 ) ;
55651: LD_VAR 0 1
55655: PPUSH
55656: LD_INT 1
55658: PPUSH
55659: CALL_OW 336
// end ;
55663: GO 55648
55665: POP
55666: POP
// end ;
55667: PPOPN 1
55669: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
55670: LD_EXP 30
55674: PUSH
55675: LD_EXP 34
55679: AND
55680: PUSH
55681: LD_OWVAR 65
55685: PUSH
55686: LD_INT 7
55688: LESS
55689: AND
55690: IFFALSE 55704
55692: GO 55694
55694: DISABLE
// begin enable ;
55695: ENABLE
// game_speed := 7 ;
55696: LD_ADDR_OWVAR 65
55700: PUSH
55701: LD_INT 7
55703: ST_TO_ADDR
// end ;
55704: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
55705: LD_EXP 30
55709: PUSH
55710: LD_EXP 37
55714: AND
55715: IFFALSE 55917
55717: GO 55719
55719: DISABLE
55720: LD_INT 0
55722: PPUSH
55723: PPUSH
55724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
55725: LD_ADDR_VAR 0 3
55729: PUSH
55730: LD_INT 81
55732: PUSH
55733: LD_OWVAR 2
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 21
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PPUSH
55756: CALL_OW 69
55760: ST_TO_ADDR
// if not tmp then
55761: LD_VAR 0 3
55765: NOT
55766: IFFALSE 55770
// exit ;
55768: GO 55917
// if tmp > 5 then
55770: LD_VAR 0 3
55774: PUSH
55775: LD_INT 5
55777: GREATER
55778: IFFALSE 55790
// k := 5 else
55780: LD_ADDR_VAR 0 2
55784: PUSH
55785: LD_INT 5
55787: ST_TO_ADDR
55788: GO 55800
// k := tmp ;
55790: LD_ADDR_VAR 0 2
55794: PUSH
55795: LD_VAR 0 3
55799: ST_TO_ADDR
// for i := 1 to k do
55800: LD_ADDR_VAR 0 1
55804: PUSH
55805: DOUBLE
55806: LD_INT 1
55808: DEC
55809: ST_TO_ADDR
55810: LD_VAR 0 2
55814: PUSH
55815: FOR_TO
55816: IFFALSE 55915
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
55818: LD_VAR 0 3
55822: PUSH
55823: LD_VAR 0 1
55827: ARRAY
55828: PPUSH
55829: LD_VAR 0 1
55833: PUSH
55834: LD_INT 4
55836: MOD
55837: PUSH
55838: LD_INT 1
55840: PLUS
55841: PPUSH
55842: CALL_OW 259
55846: PUSH
55847: LD_INT 10
55849: LESS
55850: IFFALSE 55913
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
55852: LD_VAR 0 3
55856: PUSH
55857: LD_VAR 0 1
55861: ARRAY
55862: PPUSH
55863: LD_VAR 0 1
55867: PUSH
55868: LD_INT 4
55870: MOD
55871: PUSH
55872: LD_INT 1
55874: PLUS
55875: PPUSH
55876: LD_VAR 0 3
55880: PUSH
55881: LD_VAR 0 1
55885: ARRAY
55886: PPUSH
55887: LD_VAR 0 1
55891: PUSH
55892: LD_INT 4
55894: MOD
55895: PUSH
55896: LD_INT 1
55898: PLUS
55899: PPUSH
55900: CALL_OW 259
55904: PUSH
55905: LD_INT 1
55907: PLUS
55908: PPUSH
55909: CALL_OW 237
55913: GO 55815
55915: POP
55916: POP
// end ;
55917: PPOPN 3
55919: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55920: LD_EXP 30
55924: PUSH
55925: LD_EXP 38
55929: AND
55930: IFFALSE 55950
55932: GO 55934
55934: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55935: LD_INT 4
55937: PPUSH
55938: LD_OWVAR 2
55942: PPUSH
55943: LD_INT 0
55945: PPUSH
55946: CALL_OW 324
55950: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55951: LD_EXP 30
55955: PUSH
55956: LD_EXP 67
55960: AND
55961: IFFALSE 55981
55963: GO 55965
55965: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55966: LD_INT 19
55968: PPUSH
55969: LD_OWVAR 2
55973: PPUSH
55974: LD_INT 0
55976: PPUSH
55977: CALL_OW 324
55981: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55982: LD_EXP 30
55986: PUSH
55987: LD_EXP 39
55991: AND
55992: IFFALSE 56094
55994: GO 55996
55996: DISABLE
55997: LD_INT 0
55999: PPUSH
56000: PPUSH
// begin enable ;
56001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
56002: LD_ADDR_VAR 0 2
56006: PUSH
56007: LD_INT 22
56009: PUSH
56010: LD_OWVAR 2
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: PUSH
56019: LD_INT 2
56021: PUSH
56022: LD_INT 34
56024: PUSH
56025: LD_INT 11
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 34
56034: PUSH
56035: LD_INT 30
56037: PUSH
56038: EMPTY
56039: LIST
56040: LIST
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: LIST
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PPUSH
56051: CALL_OW 69
56055: ST_TO_ADDR
// if not tmp then
56056: LD_VAR 0 2
56060: NOT
56061: IFFALSE 56065
// exit ;
56063: GO 56094
// for i in tmp do
56065: LD_ADDR_VAR 0 1
56069: PUSH
56070: LD_VAR 0 2
56074: PUSH
56075: FOR_IN
56076: IFFALSE 56092
// begin SetLives ( i , 0 ) ;
56078: LD_VAR 0 1
56082: PPUSH
56083: LD_INT 0
56085: PPUSH
56086: CALL_OW 234
// end ;
56090: GO 56075
56092: POP
56093: POP
// end ;
56094: PPOPN 2
56096: END
// every 0 0$1 trigger StreamModeActive and sBunker do
56097: LD_EXP 30
56101: PUSH
56102: LD_EXP 40
56106: AND
56107: IFFALSE 56127
56109: GO 56111
56111: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
56112: LD_INT 32
56114: PPUSH
56115: LD_OWVAR 2
56119: PPUSH
56120: LD_INT 0
56122: PPUSH
56123: CALL_OW 324
56127: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
56128: LD_EXP 30
56132: PUSH
56133: LD_EXP 41
56137: AND
56138: IFFALSE 56319
56140: GO 56142
56142: DISABLE
56143: LD_INT 0
56145: PPUSH
56146: PPUSH
56147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
56148: LD_ADDR_VAR 0 2
56152: PUSH
56153: LD_INT 22
56155: PUSH
56156: LD_OWVAR 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 33
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PPUSH
56179: CALL_OW 69
56183: ST_TO_ADDR
// if not tmp then
56184: LD_VAR 0 2
56188: NOT
56189: IFFALSE 56193
// exit ;
56191: GO 56319
// side := 0 ;
56193: LD_ADDR_VAR 0 3
56197: PUSH
56198: LD_INT 0
56200: ST_TO_ADDR
// for i := 1 to 8 do
56201: LD_ADDR_VAR 0 1
56205: PUSH
56206: DOUBLE
56207: LD_INT 1
56209: DEC
56210: ST_TO_ADDR
56211: LD_INT 8
56213: PUSH
56214: FOR_TO
56215: IFFALSE 56263
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
56217: LD_OWVAR 2
56221: PUSH
56222: LD_VAR 0 1
56226: NONEQUAL
56227: PUSH
56228: LD_OWVAR 2
56232: PPUSH
56233: LD_VAR 0 1
56237: PPUSH
56238: CALL_OW 81
56242: PUSH
56243: LD_INT 2
56245: EQUAL
56246: AND
56247: IFFALSE 56261
// begin side := i ;
56249: LD_ADDR_VAR 0 3
56253: PUSH
56254: LD_VAR 0 1
56258: ST_TO_ADDR
// break ;
56259: GO 56263
// end ;
56261: GO 56214
56263: POP
56264: POP
// if not side then
56265: LD_VAR 0 3
56269: NOT
56270: IFFALSE 56274
// exit ;
56272: GO 56319
// for i := 1 to tmp do
56274: LD_ADDR_VAR 0 1
56278: PUSH
56279: DOUBLE
56280: LD_INT 1
56282: DEC
56283: ST_TO_ADDR
56284: LD_VAR 0 2
56288: PUSH
56289: FOR_TO
56290: IFFALSE 56317
// if Prob ( 60 ) then
56292: LD_INT 60
56294: PPUSH
56295: CALL_OW 13
56299: IFFALSE 56315
// SetSide ( i , side ) ;
56301: LD_VAR 0 1
56305: PPUSH
56306: LD_VAR 0 3
56310: PPUSH
56311: CALL_OW 235
56315: GO 56289
56317: POP
56318: POP
// end ;
56319: PPOPN 3
56321: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
56322: LD_EXP 30
56326: PUSH
56327: LD_EXP 43
56331: AND
56332: IFFALSE 56451
56334: GO 56336
56336: DISABLE
56337: LD_INT 0
56339: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
56340: LD_ADDR_VAR 0 1
56344: PUSH
56345: LD_INT 22
56347: PUSH
56348: LD_OWVAR 2
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 21
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: LD_INT 23
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: LIST
56388: PPUSH
56389: CALL_OW 69
56393: PUSH
56394: FOR_IN
56395: IFFALSE 56449
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
56397: LD_VAR 0 1
56401: PPUSH
56402: CALL_OW 257
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: LD_INT 2
56412: PUSH
56413: LD_INT 3
56415: PUSH
56416: LD_INT 4
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: IN
56425: IFFALSE 56447
// SetClass ( un , rand ( 1 , 4 ) ) ;
56427: LD_VAR 0 1
56431: PPUSH
56432: LD_INT 1
56434: PPUSH
56435: LD_INT 4
56437: PPUSH
56438: CALL_OW 12
56442: PPUSH
56443: CALL_OW 336
56447: GO 56394
56449: POP
56450: POP
// end ;
56451: PPOPN 1
56453: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
56454: LD_EXP 30
56458: PUSH
56459: LD_EXP 42
56463: AND
56464: IFFALSE 56543
56466: GO 56468
56468: DISABLE
56469: LD_INT 0
56471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56472: LD_ADDR_VAR 0 1
56476: PUSH
56477: LD_INT 22
56479: PUSH
56480: LD_OWVAR 2
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 21
56491: PUSH
56492: LD_INT 3
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PPUSH
56503: CALL_OW 69
56507: ST_TO_ADDR
// if not tmp then
56508: LD_VAR 0 1
56512: NOT
56513: IFFALSE 56517
// exit ;
56515: GO 56543
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
56517: LD_VAR 0 1
56521: PUSH
56522: LD_INT 1
56524: PPUSH
56525: LD_VAR 0 1
56529: PPUSH
56530: CALL_OW 12
56534: ARRAY
56535: PPUSH
56536: LD_INT 100
56538: PPUSH
56539: CALL_OW 234
// end ;
56543: PPOPN 1
56545: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
56546: LD_EXP 30
56550: PUSH
56551: LD_EXP 44
56555: AND
56556: IFFALSE 56654
56558: GO 56560
56560: DISABLE
56561: LD_INT 0
56563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
56564: LD_ADDR_VAR 0 1
56568: PUSH
56569: LD_INT 22
56571: PUSH
56572: LD_OWVAR 2
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 21
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PPUSH
56595: CALL_OW 69
56599: ST_TO_ADDR
// if not tmp then
56600: LD_VAR 0 1
56604: NOT
56605: IFFALSE 56609
// exit ;
56607: GO 56654
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
56609: LD_VAR 0 1
56613: PUSH
56614: LD_INT 1
56616: PPUSH
56617: LD_VAR 0 1
56621: PPUSH
56622: CALL_OW 12
56626: ARRAY
56627: PPUSH
56628: LD_INT 1
56630: PPUSH
56631: LD_INT 4
56633: PPUSH
56634: CALL_OW 12
56638: PPUSH
56639: LD_INT 3000
56641: PPUSH
56642: LD_INT 9000
56644: PPUSH
56645: CALL_OW 12
56649: PPUSH
56650: CALL_OW 492
// end ;
56654: PPOPN 1
56656: END
// every 0 0$1 trigger StreamModeActive and sDepot do
56657: LD_EXP 30
56661: PUSH
56662: LD_EXP 45
56666: AND
56667: IFFALSE 56687
56669: GO 56671
56671: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
56672: LD_INT 1
56674: PPUSH
56675: LD_OWVAR 2
56679: PPUSH
56680: LD_INT 0
56682: PPUSH
56683: CALL_OW 324
56687: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
56688: LD_EXP 30
56692: PUSH
56693: LD_EXP 46
56697: AND
56698: IFFALSE 56781
56700: GO 56702
56702: DISABLE
56703: LD_INT 0
56705: PPUSH
56706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
56707: LD_ADDR_VAR 0 2
56711: PUSH
56712: LD_INT 22
56714: PUSH
56715: LD_OWVAR 2
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 21
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PPUSH
56738: CALL_OW 69
56742: ST_TO_ADDR
// if not tmp then
56743: LD_VAR 0 2
56747: NOT
56748: IFFALSE 56752
// exit ;
56750: GO 56781
// for i in tmp do
56752: LD_ADDR_VAR 0 1
56756: PUSH
56757: LD_VAR 0 2
56761: PUSH
56762: FOR_IN
56763: IFFALSE 56779
// SetBLevel ( i , 10 ) ;
56765: LD_VAR 0 1
56769: PPUSH
56770: LD_INT 10
56772: PPUSH
56773: CALL_OW 241
56777: GO 56762
56779: POP
56780: POP
// end ;
56781: PPOPN 2
56783: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
56784: LD_EXP 30
56788: PUSH
56789: LD_EXP 47
56793: AND
56794: IFFALSE 56905
56796: GO 56798
56798: DISABLE
56799: LD_INT 0
56801: PPUSH
56802: PPUSH
56803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
56804: LD_ADDR_VAR 0 3
56808: PUSH
56809: LD_INT 22
56811: PUSH
56812: LD_OWVAR 2
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 25
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PPUSH
56835: CALL_OW 69
56839: ST_TO_ADDR
// if not tmp then
56840: LD_VAR 0 3
56844: NOT
56845: IFFALSE 56849
// exit ;
56847: GO 56905
// un := tmp [ rand ( 1 , tmp ) ] ;
56849: LD_ADDR_VAR 0 2
56853: PUSH
56854: LD_VAR 0 3
56858: PUSH
56859: LD_INT 1
56861: PPUSH
56862: LD_VAR 0 3
56866: PPUSH
56867: CALL_OW 12
56871: ARRAY
56872: ST_TO_ADDR
// if Crawls ( un ) then
56873: LD_VAR 0 2
56877: PPUSH
56878: CALL_OW 318
56882: IFFALSE 56893
// ComWalk ( un ) ;
56884: LD_VAR 0 2
56888: PPUSH
56889: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56893: LD_VAR 0 2
56897: PPUSH
56898: LD_INT 5
56900: PPUSH
56901: CALL_OW 336
// end ;
56905: PPOPN 3
56907: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56908: LD_EXP 30
56912: PUSH
56913: LD_EXP 48
56917: AND
56918: PUSH
56919: LD_OWVAR 67
56923: PUSH
56924: LD_INT 4
56926: LESS
56927: AND
56928: IFFALSE 56947
56930: GO 56932
56932: DISABLE
// begin Difficulty := Difficulty + 1 ;
56933: LD_ADDR_OWVAR 67
56937: PUSH
56938: LD_OWVAR 67
56942: PUSH
56943: LD_INT 1
56945: PLUS
56946: ST_TO_ADDR
// end ;
56947: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56948: LD_EXP 30
56952: PUSH
56953: LD_EXP 49
56957: AND
56958: IFFALSE 57061
56960: GO 56962
56962: DISABLE
56963: LD_INT 0
56965: PPUSH
// begin for i := 1 to 5 do
56966: LD_ADDR_VAR 0 1
56970: PUSH
56971: DOUBLE
56972: LD_INT 1
56974: DEC
56975: ST_TO_ADDR
56976: LD_INT 5
56978: PUSH
56979: FOR_TO
56980: IFFALSE 57059
// begin uc_nation := nation_nature ;
56982: LD_ADDR_OWVAR 21
56986: PUSH
56987: LD_INT 0
56989: ST_TO_ADDR
// uc_side := 0 ;
56990: LD_ADDR_OWVAR 20
56994: PUSH
56995: LD_INT 0
56997: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56998: LD_ADDR_OWVAR 29
57002: PUSH
57003: LD_INT 12
57005: PUSH
57006: LD_INT 12
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// hc_agressivity := 20 ;
57013: LD_ADDR_OWVAR 35
57017: PUSH
57018: LD_INT 20
57020: ST_TO_ADDR
// hc_class := class_tiger ;
57021: LD_ADDR_OWVAR 28
57025: PUSH
57026: LD_INT 14
57028: ST_TO_ADDR
// hc_gallery :=  ;
57029: LD_ADDR_OWVAR 33
57033: PUSH
57034: LD_STRING 
57036: ST_TO_ADDR
// hc_name :=  ;
57037: LD_ADDR_OWVAR 26
57041: PUSH
57042: LD_STRING 
57044: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
57045: CALL_OW 44
57049: PPUSH
57050: LD_INT 0
57052: PPUSH
57053: CALL_OW 51
// end ;
57057: GO 56979
57059: POP
57060: POP
// end ;
57061: PPOPN 1
57063: END
// every 0 0$1 trigger StreamModeActive and sBomb do
57064: LD_EXP 30
57068: PUSH
57069: LD_EXP 50
57073: AND
57074: IFFALSE 57083
57076: GO 57078
57078: DISABLE
// StreamSibBomb ;
57079: CALL 57084 0 0
57083: END
// export function StreamSibBomb ; var i , x , y ; begin
57084: LD_INT 0
57086: PPUSH
57087: PPUSH
57088: PPUSH
57089: PPUSH
// result := false ;
57090: LD_ADDR_VAR 0 1
57094: PUSH
57095: LD_INT 0
57097: ST_TO_ADDR
// for i := 1 to 16 do
57098: LD_ADDR_VAR 0 2
57102: PUSH
57103: DOUBLE
57104: LD_INT 1
57106: DEC
57107: ST_TO_ADDR
57108: LD_INT 16
57110: PUSH
57111: FOR_TO
57112: IFFALSE 57311
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57114: LD_ADDR_VAR 0 3
57118: PUSH
57119: LD_INT 10
57121: PUSH
57122: LD_INT 20
57124: PUSH
57125: LD_INT 30
57127: PUSH
57128: LD_INT 40
57130: PUSH
57131: LD_INT 50
57133: PUSH
57134: LD_INT 60
57136: PUSH
57137: LD_INT 70
57139: PUSH
57140: LD_INT 80
57142: PUSH
57143: LD_INT 90
57145: PUSH
57146: LD_INT 100
57148: PUSH
57149: LD_INT 110
57151: PUSH
57152: LD_INT 120
57154: PUSH
57155: LD_INT 130
57157: PUSH
57158: LD_INT 140
57160: PUSH
57161: LD_INT 150
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PPUSH
57184: LD_INT 15
57186: PPUSH
57187: CALL_OW 12
57191: ARRAY
57192: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
57193: LD_ADDR_VAR 0 4
57197: PUSH
57198: LD_INT 10
57200: PUSH
57201: LD_INT 20
57203: PUSH
57204: LD_INT 30
57206: PUSH
57207: LD_INT 40
57209: PUSH
57210: LD_INT 50
57212: PUSH
57213: LD_INT 60
57215: PUSH
57216: LD_INT 70
57218: PUSH
57219: LD_INT 80
57221: PUSH
57222: LD_INT 90
57224: PUSH
57225: LD_INT 100
57227: PUSH
57228: LD_INT 110
57230: PUSH
57231: LD_INT 120
57233: PUSH
57234: LD_INT 130
57236: PUSH
57237: LD_INT 140
57239: PUSH
57240: LD_INT 150
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PPUSH
57263: LD_INT 15
57265: PPUSH
57266: CALL_OW 12
57270: ARRAY
57271: ST_TO_ADDR
// if ValidHex ( x , y ) then
57272: LD_VAR 0 3
57276: PPUSH
57277: LD_VAR 0 4
57281: PPUSH
57282: CALL_OW 488
57286: IFFALSE 57309
// begin result := [ x , y ] ;
57288: LD_ADDR_VAR 0 1
57292: PUSH
57293: LD_VAR 0 3
57297: PUSH
57298: LD_VAR 0 4
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: ST_TO_ADDR
// break ;
57307: GO 57311
// end ; end ;
57309: GO 57111
57311: POP
57312: POP
// if result then
57313: LD_VAR 0 1
57317: IFFALSE 57377
// begin ToLua ( playSibBomb() ) ;
57319: LD_STRING playSibBomb()
57321: PPUSH
57322: CALL_OW 559
// wait ( 0 0$14 ) ;
57326: LD_INT 490
57328: PPUSH
57329: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
57333: LD_VAR 0 1
57337: PUSH
57338: LD_INT 1
57340: ARRAY
57341: PPUSH
57342: LD_VAR 0 1
57346: PUSH
57347: LD_INT 2
57349: ARRAY
57350: PPUSH
57351: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
57355: LD_VAR 0 1
57359: PUSH
57360: LD_INT 1
57362: ARRAY
57363: PPUSH
57364: LD_VAR 0 1
57368: PUSH
57369: LD_INT 2
57371: ARRAY
57372: PPUSH
57373: CALL_OW 429
// end ; end ;
57377: LD_VAR 0 1
57381: RET
// every 0 0$1 trigger StreamModeActive and sReset do
57382: LD_EXP 30
57386: PUSH
57387: LD_EXP 52
57391: AND
57392: IFFALSE 57404
57394: GO 57396
57396: DISABLE
// YouLost (  ) ;
57397: LD_STRING 
57399: PPUSH
57400: CALL_OW 104
57404: END
// every 0 0$1 trigger StreamModeActive and sFog do
57405: LD_EXP 30
57409: PUSH
57410: LD_EXP 51
57414: AND
57415: IFFALSE 57429
57417: GO 57419
57419: DISABLE
// FogOff ( your_side ) ;
57420: LD_OWVAR 2
57424: PPUSH
57425: CALL_OW 344
57429: END
// every 0 0$1 trigger StreamModeActive and sSun do
57430: LD_EXP 30
57434: PUSH
57435: LD_EXP 53
57439: AND
57440: IFFALSE 57468
57442: GO 57444
57444: DISABLE
// begin solar_recharge_percent := 0 ;
57445: LD_ADDR_OWVAR 79
57449: PUSH
57450: LD_INT 0
57452: ST_TO_ADDR
// wait ( 5 5$00 ) ;
57453: LD_INT 10500
57455: PPUSH
57456: CALL_OW 67
// solar_recharge_percent := 100 ;
57460: LD_ADDR_OWVAR 79
57464: PUSH
57465: LD_INT 100
57467: ST_TO_ADDR
// end ;
57468: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
57469: LD_EXP 30
57473: PUSH
57474: LD_EXP 54
57478: AND
57479: IFFALSE 57718
57481: GO 57483
57483: DISABLE
57484: LD_INT 0
57486: PPUSH
57487: PPUSH
57488: PPUSH
// begin tmp := [ ] ;
57489: LD_ADDR_VAR 0 3
57493: PUSH
57494: EMPTY
57495: ST_TO_ADDR
// for i := 1 to 6 do
57496: LD_ADDR_VAR 0 1
57500: PUSH
57501: DOUBLE
57502: LD_INT 1
57504: DEC
57505: ST_TO_ADDR
57506: LD_INT 6
57508: PUSH
57509: FOR_TO
57510: IFFALSE 57615
// begin uc_nation := nation_nature ;
57512: LD_ADDR_OWVAR 21
57516: PUSH
57517: LD_INT 0
57519: ST_TO_ADDR
// uc_side := 0 ;
57520: LD_ADDR_OWVAR 20
57524: PUSH
57525: LD_INT 0
57527: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
57528: LD_ADDR_OWVAR 29
57532: PUSH
57533: LD_INT 12
57535: PUSH
57536: LD_INT 12
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: ST_TO_ADDR
// hc_agressivity := 20 ;
57543: LD_ADDR_OWVAR 35
57547: PUSH
57548: LD_INT 20
57550: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
57551: LD_ADDR_OWVAR 28
57555: PUSH
57556: LD_INT 17
57558: ST_TO_ADDR
// hc_gallery :=  ;
57559: LD_ADDR_OWVAR 33
57563: PUSH
57564: LD_STRING 
57566: ST_TO_ADDR
// hc_name :=  ;
57567: LD_ADDR_OWVAR 26
57571: PUSH
57572: LD_STRING 
57574: ST_TO_ADDR
// un := CreateHuman ;
57575: LD_ADDR_VAR 0 2
57579: PUSH
57580: CALL_OW 44
57584: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
57585: LD_VAR 0 2
57589: PPUSH
57590: LD_INT 1
57592: PPUSH
57593: CALL_OW 51
// tmp := tmp ^ un ;
57597: LD_ADDR_VAR 0 3
57601: PUSH
57602: LD_VAR 0 3
57606: PUSH
57607: LD_VAR 0 2
57611: ADD
57612: ST_TO_ADDR
// end ;
57613: GO 57509
57615: POP
57616: POP
// repeat wait ( 0 0$1 ) ;
57617: LD_INT 35
57619: PPUSH
57620: CALL_OW 67
// for un in tmp do
57624: LD_ADDR_VAR 0 2
57628: PUSH
57629: LD_VAR 0 3
57633: PUSH
57634: FOR_IN
57635: IFFALSE 57709
// begin if IsDead ( un ) then
57637: LD_VAR 0 2
57641: PPUSH
57642: CALL_OW 301
57646: IFFALSE 57666
// begin tmp := tmp diff un ;
57648: LD_ADDR_VAR 0 3
57652: PUSH
57653: LD_VAR 0 3
57657: PUSH
57658: LD_VAR 0 2
57662: DIFF
57663: ST_TO_ADDR
// continue ;
57664: GO 57634
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
57666: LD_VAR 0 2
57670: PPUSH
57671: LD_INT 3
57673: PUSH
57674: LD_INT 22
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PPUSH
57688: CALL_OW 69
57692: PPUSH
57693: LD_VAR 0 2
57697: PPUSH
57698: CALL_OW 74
57702: PPUSH
57703: CALL_OW 115
// end ;
57707: GO 57634
57709: POP
57710: POP
// until not tmp ;
57711: LD_VAR 0 3
57715: NOT
57716: IFFALSE 57617
// end ;
57718: PPOPN 3
57720: END
// every 0 0$1 trigger StreamModeActive and sTroll do
57721: LD_EXP 30
57725: PUSH
57726: LD_EXP 55
57730: AND
57731: IFFALSE 57785
57733: GO 57735
57735: DISABLE
// begin ToLua ( displayTroll(); ) ;
57736: LD_STRING displayTroll();
57738: PPUSH
57739: CALL_OW 559
// wait ( 3 3$00 ) ;
57743: LD_INT 6300
57745: PPUSH
57746: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57750: LD_STRING hideTroll();
57752: PPUSH
57753: CALL_OW 559
// wait ( 1 1$00 ) ;
57757: LD_INT 2100
57759: PPUSH
57760: CALL_OW 67
// ToLua ( displayTroll(); ) ;
57764: LD_STRING displayTroll();
57766: PPUSH
57767: CALL_OW 559
// wait ( 1 1$00 ) ;
57771: LD_INT 2100
57773: PPUSH
57774: CALL_OW 67
// ToLua ( hideTroll(); ) ;
57778: LD_STRING hideTroll();
57780: PPUSH
57781: CALL_OW 559
// end ;
57785: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
57786: LD_EXP 30
57790: PUSH
57791: LD_EXP 56
57795: AND
57796: IFFALSE 57859
57798: GO 57800
57800: DISABLE
57801: LD_INT 0
57803: PPUSH
// begin p := 0 ;
57804: LD_ADDR_VAR 0 1
57808: PUSH
57809: LD_INT 0
57811: ST_TO_ADDR
// repeat game_speed := 1 ;
57812: LD_ADDR_OWVAR 65
57816: PUSH
57817: LD_INT 1
57819: ST_TO_ADDR
// wait ( 0 0$1 ) ;
57820: LD_INT 35
57822: PPUSH
57823: CALL_OW 67
// p := p + 1 ;
57827: LD_ADDR_VAR 0 1
57831: PUSH
57832: LD_VAR 0 1
57836: PUSH
57837: LD_INT 1
57839: PLUS
57840: ST_TO_ADDR
// until p >= 60 ;
57841: LD_VAR 0 1
57845: PUSH
57846: LD_INT 60
57848: GREATEREQUAL
57849: IFFALSE 57812
// game_speed := 4 ;
57851: LD_ADDR_OWVAR 65
57855: PUSH
57856: LD_INT 4
57858: ST_TO_ADDR
// end ;
57859: PPOPN 1
57861: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
57862: LD_EXP 30
57866: PUSH
57867: LD_EXP 57
57871: AND
57872: IFFALSE 58018
57874: GO 57876
57876: DISABLE
57877: LD_INT 0
57879: PPUSH
57880: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57881: LD_ADDR_VAR 0 1
57885: PUSH
57886: LD_INT 22
57888: PUSH
57889: LD_OWVAR 2
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 2
57900: PUSH
57901: LD_INT 30
57903: PUSH
57904: LD_INT 0
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 30
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: LIST
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PPUSH
57930: CALL_OW 69
57934: ST_TO_ADDR
// if not depot then
57935: LD_VAR 0 1
57939: NOT
57940: IFFALSE 57944
// exit ;
57942: GO 58018
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57944: LD_ADDR_VAR 0 2
57948: PUSH
57949: LD_VAR 0 1
57953: PUSH
57954: LD_INT 1
57956: PPUSH
57957: LD_VAR 0 1
57961: PPUSH
57962: CALL_OW 12
57966: ARRAY
57967: PPUSH
57968: CALL_OW 274
57972: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57973: LD_VAR 0 2
57977: PPUSH
57978: LD_INT 1
57980: PPUSH
57981: LD_INT 0
57983: PPUSH
57984: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57988: LD_VAR 0 2
57992: PPUSH
57993: LD_INT 2
57995: PPUSH
57996: LD_INT 0
57998: PPUSH
57999: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
58003: LD_VAR 0 2
58007: PPUSH
58008: LD_INT 3
58010: PPUSH
58011: LD_INT 0
58013: PPUSH
58014: CALL_OW 277
// end ;
58018: PPOPN 2
58020: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
58021: LD_EXP 30
58025: PUSH
58026: LD_EXP 58
58030: AND
58031: IFFALSE 58128
58033: GO 58035
58035: DISABLE
58036: LD_INT 0
58038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58039: LD_ADDR_VAR 0 1
58043: PUSH
58044: LD_INT 22
58046: PUSH
58047: LD_OWVAR 2
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 21
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: LD_INT 23
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: LIST
58087: PPUSH
58088: CALL_OW 69
58092: ST_TO_ADDR
// if not tmp then
58093: LD_VAR 0 1
58097: NOT
58098: IFFALSE 58102
// exit ;
58100: GO 58128
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
58102: LD_VAR 0 1
58106: PUSH
58107: LD_INT 1
58109: PPUSH
58110: LD_VAR 0 1
58114: PPUSH
58115: CALL_OW 12
58119: ARRAY
58120: PPUSH
58121: LD_INT 200
58123: PPUSH
58124: CALL_OW 234
// end ;
58128: PPOPN 1
58130: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
58131: LD_EXP 30
58135: PUSH
58136: LD_EXP 59
58140: AND
58141: IFFALSE 58220
58143: GO 58145
58145: DISABLE
58146: LD_INT 0
58148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
58149: LD_ADDR_VAR 0 1
58153: PUSH
58154: LD_INT 22
58156: PUSH
58157: LD_OWVAR 2
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 21
58168: PUSH
58169: LD_INT 2
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PPUSH
58180: CALL_OW 69
58184: ST_TO_ADDR
// if not tmp then
58185: LD_VAR 0 1
58189: NOT
58190: IFFALSE 58194
// exit ;
58192: GO 58220
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
58194: LD_VAR 0 1
58198: PUSH
58199: LD_INT 1
58201: PPUSH
58202: LD_VAR 0 1
58206: PPUSH
58207: CALL_OW 12
58211: ARRAY
58212: PPUSH
58213: LD_INT 60
58215: PPUSH
58216: CALL_OW 234
// end ;
58220: PPOPN 1
58222: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
58223: LD_EXP 30
58227: PUSH
58228: LD_EXP 60
58232: AND
58233: IFFALSE 58332
58235: GO 58237
58237: DISABLE
58238: LD_INT 0
58240: PPUSH
58241: PPUSH
// begin enable ;
58242: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
58243: LD_ADDR_VAR 0 1
58247: PUSH
58248: LD_INT 22
58250: PUSH
58251: LD_OWVAR 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 61
58262: PUSH
58263: EMPTY
58264: LIST
58265: PUSH
58266: LD_INT 33
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: LIST
58280: PPUSH
58281: CALL_OW 69
58285: ST_TO_ADDR
// if not tmp then
58286: LD_VAR 0 1
58290: NOT
58291: IFFALSE 58295
// exit ;
58293: GO 58332
// for i in tmp do
58295: LD_ADDR_VAR 0 2
58299: PUSH
58300: LD_VAR 0 1
58304: PUSH
58305: FOR_IN
58306: IFFALSE 58330
// if IsControledBy ( i ) then
58308: LD_VAR 0 2
58312: PPUSH
58313: CALL_OW 312
58317: IFFALSE 58328
// ComUnlink ( i ) ;
58319: LD_VAR 0 2
58323: PPUSH
58324: CALL_OW 136
58328: GO 58305
58330: POP
58331: POP
// end ;
58332: PPOPN 2
58334: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
58335: LD_EXP 30
58339: PUSH
58340: LD_EXP 61
58344: AND
58345: IFFALSE 58485
58347: GO 58349
58349: DISABLE
58350: LD_INT 0
58352: PPUSH
58353: PPUSH
// begin ToLua ( displayPowell(); ) ;
58354: LD_STRING displayPowell();
58356: PPUSH
58357: CALL_OW 559
// uc_side := 0 ;
58361: LD_ADDR_OWVAR 20
58365: PUSH
58366: LD_INT 0
58368: ST_TO_ADDR
// uc_nation := 2 ;
58369: LD_ADDR_OWVAR 21
58373: PUSH
58374: LD_INT 2
58376: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
58377: LD_ADDR_OWVAR 37
58381: PUSH
58382: LD_INT 14
58384: ST_TO_ADDR
// vc_engine := engine_siberite ;
58385: LD_ADDR_OWVAR 39
58389: PUSH
58390: LD_INT 3
58392: ST_TO_ADDR
// vc_control := control_apeman ;
58393: LD_ADDR_OWVAR 38
58397: PUSH
58398: LD_INT 5
58400: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
58401: LD_ADDR_OWVAR 40
58405: PUSH
58406: LD_INT 29
58408: ST_TO_ADDR
// un := CreateVehicle ;
58409: LD_ADDR_VAR 0 2
58413: PUSH
58414: CALL_OW 45
58418: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58419: LD_VAR 0 2
58423: PPUSH
58424: LD_INT 1
58426: PPUSH
58427: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58431: LD_INT 35
58433: PPUSH
58434: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58438: LD_VAR 0 2
58442: PPUSH
58443: LD_INT 22
58445: PUSH
58446: LD_OWVAR 2
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PPUSH
58455: CALL_OW 69
58459: PPUSH
58460: LD_VAR 0 2
58464: PPUSH
58465: CALL_OW 74
58469: PPUSH
58470: CALL_OW 115
// until IsDead ( un ) ;
58474: LD_VAR 0 2
58478: PPUSH
58479: CALL_OW 301
58483: IFFALSE 58431
// end ;
58485: PPOPN 2
58487: END
// every 0 0$1 trigger StreamModeActive and sStu do
58488: LD_EXP 30
58492: PUSH
58493: LD_EXP 69
58497: AND
58498: IFFALSE 58514
58500: GO 58502
58502: DISABLE
// begin ToLua ( displayStucuk(); ) ;
58503: LD_STRING displayStucuk();
58505: PPUSH
58506: CALL_OW 559
// ResetFog ;
58510: CALL_OW 335
// end ;
58514: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
58515: LD_EXP 30
58519: PUSH
58520: LD_EXP 62
58524: AND
58525: IFFALSE 58666
58527: GO 58529
58529: DISABLE
58530: LD_INT 0
58532: PPUSH
58533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58534: LD_ADDR_VAR 0 2
58538: PUSH
58539: LD_INT 22
58541: PUSH
58542: LD_OWVAR 2
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 21
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PPUSH
58565: CALL_OW 69
58569: ST_TO_ADDR
// if not tmp then
58570: LD_VAR 0 2
58574: NOT
58575: IFFALSE 58579
// exit ;
58577: GO 58666
// un := tmp [ rand ( 1 , tmp ) ] ;
58579: LD_ADDR_VAR 0 1
58583: PUSH
58584: LD_VAR 0 2
58588: PUSH
58589: LD_INT 1
58591: PPUSH
58592: LD_VAR 0 2
58596: PPUSH
58597: CALL_OW 12
58601: ARRAY
58602: ST_TO_ADDR
// SetSide ( un , 0 ) ;
58603: LD_VAR 0 1
58607: PPUSH
58608: LD_INT 0
58610: PPUSH
58611: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
58615: LD_VAR 0 1
58619: PPUSH
58620: LD_OWVAR 3
58624: PUSH
58625: LD_VAR 0 1
58629: DIFF
58630: PPUSH
58631: LD_VAR 0 1
58635: PPUSH
58636: CALL_OW 74
58640: PPUSH
58641: CALL_OW 115
// wait ( 0 0$20 ) ;
58645: LD_INT 700
58647: PPUSH
58648: CALL_OW 67
// SetSide ( un , your_side ) ;
58652: LD_VAR 0 1
58656: PPUSH
58657: LD_OWVAR 2
58661: PPUSH
58662: CALL_OW 235
// end ;
58666: PPOPN 2
58668: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
58669: LD_EXP 30
58673: PUSH
58674: LD_EXP 63
58678: AND
58679: IFFALSE 58785
58681: GO 58683
58683: DISABLE
58684: LD_INT 0
58686: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58687: LD_ADDR_VAR 0 1
58691: PUSH
58692: LD_INT 22
58694: PUSH
58695: LD_OWVAR 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 30
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 30
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: LIST
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PPUSH
58736: CALL_OW 69
58740: ST_TO_ADDR
// if not depot then
58741: LD_VAR 0 1
58745: NOT
58746: IFFALSE 58750
// exit ;
58748: GO 58785
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
58750: LD_VAR 0 1
58754: PUSH
58755: LD_INT 1
58757: ARRAY
58758: PPUSH
58759: CALL_OW 250
58763: PPUSH
58764: LD_VAR 0 1
58768: PUSH
58769: LD_INT 1
58771: ARRAY
58772: PPUSH
58773: CALL_OW 251
58777: PPUSH
58778: LD_INT 70
58780: PPUSH
58781: CALL_OW 495
// end ;
58785: PPOPN 1
58787: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
58788: LD_EXP 30
58792: PUSH
58793: LD_EXP 64
58797: AND
58798: IFFALSE 59009
58800: GO 58802
58802: DISABLE
58803: LD_INT 0
58805: PPUSH
58806: PPUSH
58807: PPUSH
58808: PPUSH
58809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
58810: LD_ADDR_VAR 0 5
58814: PUSH
58815: LD_INT 22
58817: PUSH
58818: LD_OWVAR 2
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 21
58829: PUSH
58830: LD_INT 1
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PPUSH
58841: CALL_OW 69
58845: ST_TO_ADDR
// if not tmp then
58846: LD_VAR 0 5
58850: NOT
58851: IFFALSE 58855
// exit ;
58853: GO 59009
// for i in tmp do
58855: LD_ADDR_VAR 0 1
58859: PUSH
58860: LD_VAR 0 5
58864: PUSH
58865: FOR_IN
58866: IFFALSE 59007
// begin d := rand ( 0 , 5 ) ;
58868: LD_ADDR_VAR 0 4
58872: PUSH
58873: LD_INT 0
58875: PPUSH
58876: LD_INT 5
58878: PPUSH
58879: CALL_OW 12
58883: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58884: LD_ADDR_VAR 0 2
58888: PUSH
58889: LD_VAR 0 1
58893: PPUSH
58894: CALL_OW 250
58898: PPUSH
58899: LD_VAR 0 4
58903: PPUSH
58904: LD_INT 3
58906: PPUSH
58907: LD_INT 12
58909: PPUSH
58910: CALL_OW 12
58914: PPUSH
58915: CALL_OW 272
58919: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58920: LD_ADDR_VAR 0 3
58924: PUSH
58925: LD_VAR 0 1
58929: PPUSH
58930: CALL_OW 251
58934: PPUSH
58935: LD_VAR 0 4
58939: PPUSH
58940: LD_INT 3
58942: PPUSH
58943: LD_INT 12
58945: PPUSH
58946: CALL_OW 12
58950: PPUSH
58951: CALL_OW 273
58955: ST_TO_ADDR
// if ValidHex ( x , y ) then
58956: LD_VAR 0 2
58960: PPUSH
58961: LD_VAR 0 3
58965: PPUSH
58966: CALL_OW 488
58970: IFFALSE 59005
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58972: LD_VAR 0 1
58976: PPUSH
58977: LD_VAR 0 2
58981: PPUSH
58982: LD_VAR 0 3
58986: PPUSH
58987: LD_INT 3
58989: PPUSH
58990: LD_INT 6
58992: PPUSH
58993: CALL_OW 12
58997: PPUSH
58998: LD_INT 1
59000: PPUSH
59001: CALL_OW 483
// end ;
59005: GO 58865
59007: POP
59008: POP
// end ;
59009: PPOPN 5
59011: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
59012: LD_EXP 30
59016: PUSH
59017: LD_EXP 65
59021: AND
59022: IFFALSE 59116
59024: GO 59026
59026: DISABLE
59027: LD_INT 0
59029: PPUSH
59030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
59031: LD_ADDR_VAR 0 2
59035: PUSH
59036: LD_INT 22
59038: PUSH
59039: LD_OWVAR 2
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 32
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 21
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: PPUSH
59073: CALL_OW 69
59077: ST_TO_ADDR
// if not tmp then
59078: LD_VAR 0 2
59082: NOT
59083: IFFALSE 59087
// exit ;
59085: GO 59116
// for i in tmp do
59087: LD_ADDR_VAR 0 1
59091: PUSH
59092: LD_VAR 0 2
59096: PUSH
59097: FOR_IN
59098: IFFALSE 59114
// SetFuel ( i , 0 ) ;
59100: LD_VAR 0 1
59104: PPUSH
59105: LD_INT 0
59107: PPUSH
59108: CALL_OW 240
59112: GO 59097
59114: POP
59115: POP
// end ;
59116: PPOPN 2
59118: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
59119: LD_EXP 30
59123: PUSH
59124: LD_EXP 66
59128: AND
59129: IFFALSE 59195
59131: GO 59133
59133: DISABLE
59134: LD_INT 0
59136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59137: LD_ADDR_VAR 0 1
59141: PUSH
59142: LD_INT 22
59144: PUSH
59145: LD_OWVAR 2
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 30
59156: PUSH
59157: LD_INT 29
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PPUSH
59168: CALL_OW 69
59172: ST_TO_ADDR
// if not tmp then
59173: LD_VAR 0 1
59177: NOT
59178: IFFALSE 59182
// exit ;
59180: GO 59195
// DestroyUnit ( tmp [ 1 ] ) ;
59182: LD_VAR 0 1
59186: PUSH
59187: LD_INT 1
59189: ARRAY
59190: PPUSH
59191: CALL_OW 65
// end ;
59195: PPOPN 1
59197: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
59198: LD_EXP 30
59202: PUSH
59203: LD_EXP 68
59207: AND
59208: IFFALSE 59337
59210: GO 59212
59212: DISABLE
59213: LD_INT 0
59215: PPUSH
// begin uc_side := 0 ;
59216: LD_ADDR_OWVAR 20
59220: PUSH
59221: LD_INT 0
59223: ST_TO_ADDR
// uc_nation := nation_arabian ;
59224: LD_ADDR_OWVAR 21
59228: PUSH
59229: LD_INT 2
59231: ST_TO_ADDR
// hc_gallery :=  ;
59232: LD_ADDR_OWVAR 33
59236: PUSH
59237: LD_STRING 
59239: ST_TO_ADDR
// hc_name :=  ;
59240: LD_ADDR_OWVAR 26
59244: PUSH
59245: LD_STRING 
59247: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
59248: LD_INT 1
59250: PPUSH
59251: LD_INT 11
59253: PPUSH
59254: LD_INT 10
59256: PPUSH
59257: CALL_OW 380
// un := CreateHuman ;
59261: LD_ADDR_VAR 0 1
59265: PUSH
59266: CALL_OW 44
59270: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59271: LD_VAR 0 1
59275: PPUSH
59276: LD_INT 1
59278: PPUSH
59279: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59283: LD_INT 35
59285: PPUSH
59286: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59290: LD_VAR 0 1
59294: PPUSH
59295: LD_INT 22
59297: PUSH
59298: LD_OWVAR 2
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PPUSH
59307: CALL_OW 69
59311: PPUSH
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 74
59321: PPUSH
59322: CALL_OW 115
// until IsDead ( un ) ;
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL_OW 301
59335: IFFALSE 59283
// end ;
59337: PPOPN 1
59339: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
59340: LD_EXP 30
59344: PUSH
59345: LD_EXP 70
59349: AND
59350: IFFALSE 59362
59352: GO 59354
59354: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
59355: LD_STRING earthquake(getX(game), 0, 32)
59357: PPUSH
59358: CALL_OW 559
59362: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
59363: LD_EXP 30
59367: PUSH
59368: LD_EXP 71
59372: AND
59373: IFFALSE 59464
59375: GO 59377
59377: DISABLE
59378: LD_INT 0
59380: PPUSH
// begin enable ;
59381: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
59382: LD_ADDR_VAR 0 1
59386: PUSH
59387: LD_INT 22
59389: PUSH
59390: LD_OWVAR 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 21
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 33
59411: PUSH
59412: LD_INT 3
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: PPUSH
59424: CALL_OW 69
59428: ST_TO_ADDR
// if not tmp then
59429: LD_VAR 0 1
59433: NOT
59434: IFFALSE 59438
// exit ;
59436: GO 59464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59438: LD_VAR 0 1
59442: PUSH
59443: LD_INT 1
59445: PPUSH
59446: LD_VAR 0 1
59450: PPUSH
59451: CALL_OW 12
59455: ARRAY
59456: PPUSH
59457: LD_INT 1
59459: PPUSH
59460: CALL_OW 234
// end ;
59464: PPOPN 1
59466: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
59467: LD_EXP 30
59471: PUSH
59472: LD_EXP 72
59476: AND
59477: IFFALSE 59618
59479: GO 59481
59481: DISABLE
59482: LD_INT 0
59484: PPUSH
59485: PPUSH
59486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59487: LD_ADDR_VAR 0 3
59491: PUSH
59492: LD_INT 22
59494: PUSH
59495: LD_OWVAR 2
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 25
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PPUSH
59518: CALL_OW 69
59522: ST_TO_ADDR
// if not tmp then
59523: LD_VAR 0 3
59527: NOT
59528: IFFALSE 59532
// exit ;
59530: GO 59618
// un := tmp [ rand ( 1 , tmp ) ] ;
59532: LD_ADDR_VAR 0 2
59536: PUSH
59537: LD_VAR 0 3
59541: PUSH
59542: LD_INT 1
59544: PPUSH
59545: LD_VAR 0 3
59549: PPUSH
59550: CALL_OW 12
59554: ARRAY
59555: ST_TO_ADDR
// if Crawls ( un ) then
59556: LD_VAR 0 2
59560: PPUSH
59561: CALL_OW 318
59565: IFFALSE 59576
// ComWalk ( un ) ;
59567: LD_VAR 0 2
59571: PPUSH
59572: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
59576: LD_VAR 0 2
59580: PPUSH
59581: LD_INT 9
59583: PPUSH
59584: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
59588: LD_INT 28
59590: PPUSH
59591: LD_OWVAR 2
59595: PPUSH
59596: LD_INT 2
59598: PPUSH
59599: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
59603: LD_INT 29
59605: PPUSH
59606: LD_OWVAR 2
59610: PPUSH
59611: LD_INT 2
59613: PPUSH
59614: CALL_OW 322
// end ;
59618: PPOPN 3
59620: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
59621: LD_EXP 30
59625: PUSH
59626: LD_EXP 73
59630: AND
59631: IFFALSE 59742
59633: GO 59635
59635: DISABLE
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
59640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59641: LD_ADDR_VAR 0 3
59645: PUSH
59646: LD_INT 22
59648: PUSH
59649: LD_OWVAR 2
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 25
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PPUSH
59672: CALL_OW 69
59676: ST_TO_ADDR
// if not tmp then
59677: LD_VAR 0 3
59681: NOT
59682: IFFALSE 59686
// exit ;
59684: GO 59742
// un := tmp [ rand ( 1 , tmp ) ] ;
59686: LD_ADDR_VAR 0 2
59690: PUSH
59691: LD_VAR 0 3
59695: PUSH
59696: LD_INT 1
59698: PPUSH
59699: LD_VAR 0 3
59703: PPUSH
59704: CALL_OW 12
59708: ARRAY
59709: ST_TO_ADDR
// if Crawls ( un ) then
59710: LD_VAR 0 2
59714: PPUSH
59715: CALL_OW 318
59719: IFFALSE 59730
// ComWalk ( un ) ;
59721: LD_VAR 0 2
59725: PPUSH
59726: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59730: LD_VAR 0 2
59734: PPUSH
59735: LD_INT 8
59737: PPUSH
59738: CALL_OW 336
// end ;
59742: PPOPN 3
59744: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
59745: LD_EXP 30
59749: PUSH
59750: LD_EXP 74
59754: AND
59755: IFFALSE 59899
59757: GO 59759
59759: DISABLE
59760: LD_INT 0
59762: PPUSH
59763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
59764: LD_ADDR_VAR 0 2
59768: PUSH
59769: LD_INT 22
59771: PUSH
59772: LD_OWVAR 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 21
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 34
59796: PUSH
59797: LD_INT 12
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 34
59806: PUSH
59807: LD_INT 51
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 34
59816: PUSH
59817: LD_INT 32
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: PPUSH
59835: CALL_OW 69
59839: ST_TO_ADDR
// if not tmp then
59840: LD_VAR 0 2
59844: NOT
59845: IFFALSE 59849
// exit ;
59847: GO 59899
// for i in tmp do
59849: LD_ADDR_VAR 0 1
59853: PUSH
59854: LD_VAR 0 2
59858: PUSH
59859: FOR_IN
59860: IFFALSE 59897
// if GetCargo ( i , mat_artifact ) = 0 then
59862: LD_VAR 0 1
59866: PPUSH
59867: LD_INT 4
59869: PPUSH
59870: CALL_OW 289
59874: PUSH
59875: LD_INT 0
59877: EQUAL
59878: IFFALSE 59895
// SetCargo ( i , mat_siberit , 100 ) ;
59880: LD_VAR 0 1
59884: PPUSH
59885: LD_INT 3
59887: PPUSH
59888: LD_INT 100
59890: PPUSH
59891: CALL_OW 290
59895: GO 59859
59897: POP
59898: POP
// end ;
59899: PPOPN 2
59901: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59902: LD_EXP 30
59906: PUSH
59907: LD_EXP 75
59911: AND
59912: IFFALSE 60095
59914: GO 59916
59916: DISABLE
59917: LD_INT 0
59919: PPUSH
59920: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59921: LD_ADDR_VAR 0 2
59925: PUSH
59926: LD_INT 22
59928: PUSH
59929: LD_OWVAR 2
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PPUSH
59938: CALL_OW 69
59942: ST_TO_ADDR
// if not tmp then
59943: LD_VAR 0 2
59947: NOT
59948: IFFALSE 59952
// exit ;
59950: GO 60095
// for i := 1 to 2 do
59952: LD_ADDR_VAR 0 1
59956: PUSH
59957: DOUBLE
59958: LD_INT 1
59960: DEC
59961: ST_TO_ADDR
59962: LD_INT 2
59964: PUSH
59965: FOR_TO
59966: IFFALSE 60093
// begin uc_side := your_side ;
59968: LD_ADDR_OWVAR 20
59972: PUSH
59973: LD_OWVAR 2
59977: ST_TO_ADDR
// uc_nation := nation_american ;
59978: LD_ADDR_OWVAR 21
59982: PUSH
59983: LD_INT 1
59985: ST_TO_ADDR
// vc_chassis := us_morphling ;
59986: LD_ADDR_OWVAR 37
59990: PUSH
59991: LD_INT 5
59993: ST_TO_ADDR
// vc_engine := engine_siberite ;
59994: LD_ADDR_OWVAR 39
59998: PUSH
59999: LD_INT 3
60001: ST_TO_ADDR
// vc_control := control_computer ;
60002: LD_ADDR_OWVAR 38
60006: PUSH
60007: LD_INT 3
60009: ST_TO_ADDR
// vc_weapon := us_double_laser ;
60010: LD_ADDR_OWVAR 40
60014: PUSH
60015: LD_INT 10
60017: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
60018: LD_VAR 0 2
60022: PUSH
60023: LD_INT 1
60025: ARRAY
60026: PPUSH
60027: CALL_OW 310
60031: NOT
60032: IFFALSE 60079
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
60034: CALL_OW 45
60038: PPUSH
60039: LD_VAR 0 2
60043: PUSH
60044: LD_INT 1
60046: ARRAY
60047: PPUSH
60048: CALL_OW 250
60052: PPUSH
60053: LD_VAR 0 2
60057: PUSH
60058: LD_INT 1
60060: ARRAY
60061: PPUSH
60062: CALL_OW 251
60066: PPUSH
60067: LD_INT 12
60069: PPUSH
60070: LD_INT 1
60072: PPUSH
60073: CALL_OW 50
60077: GO 60091
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
60079: CALL_OW 45
60083: PPUSH
60084: LD_INT 1
60086: PPUSH
60087: CALL_OW 51
// end ;
60091: GO 59965
60093: POP
60094: POP
// end ;
60095: PPOPN 2
60097: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
60098: LD_EXP 30
60102: PUSH
60103: LD_EXP 76
60107: AND
60108: IFFALSE 60330
60110: GO 60112
60112: DISABLE
60113: LD_INT 0
60115: PPUSH
60116: PPUSH
60117: PPUSH
60118: PPUSH
60119: PPUSH
60120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60121: LD_ADDR_VAR 0 6
60125: PUSH
60126: LD_INT 22
60128: PUSH
60129: LD_OWVAR 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 21
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: LD_INT 23
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: PPUSH
60170: CALL_OW 69
60174: ST_TO_ADDR
// if not tmp then
60175: LD_VAR 0 6
60179: NOT
60180: IFFALSE 60184
// exit ;
60182: GO 60330
// s1 := rand ( 1 , 4 ) ;
60184: LD_ADDR_VAR 0 2
60188: PUSH
60189: LD_INT 1
60191: PPUSH
60192: LD_INT 4
60194: PPUSH
60195: CALL_OW 12
60199: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
60200: LD_ADDR_VAR 0 4
60204: PUSH
60205: LD_VAR 0 6
60209: PUSH
60210: LD_INT 1
60212: ARRAY
60213: PPUSH
60214: LD_VAR 0 2
60218: PPUSH
60219: CALL_OW 259
60223: ST_TO_ADDR
// if s1 = 1 then
60224: LD_VAR 0 2
60228: PUSH
60229: LD_INT 1
60231: EQUAL
60232: IFFALSE 60252
// s2 := rand ( 2 , 4 ) else
60234: LD_ADDR_VAR 0 3
60238: PUSH
60239: LD_INT 2
60241: PPUSH
60242: LD_INT 4
60244: PPUSH
60245: CALL_OW 12
60249: ST_TO_ADDR
60250: GO 60260
// s2 := 1 ;
60252: LD_ADDR_VAR 0 3
60256: PUSH
60257: LD_INT 1
60259: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
60260: LD_ADDR_VAR 0 5
60264: PUSH
60265: LD_VAR 0 6
60269: PUSH
60270: LD_INT 1
60272: ARRAY
60273: PPUSH
60274: LD_VAR 0 3
60278: PPUSH
60279: CALL_OW 259
60283: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
60284: LD_VAR 0 6
60288: PUSH
60289: LD_INT 1
60291: ARRAY
60292: PPUSH
60293: LD_VAR 0 2
60297: PPUSH
60298: LD_VAR 0 5
60302: PPUSH
60303: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
60307: LD_VAR 0 6
60311: PUSH
60312: LD_INT 1
60314: ARRAY
60315: PPUSH
60316: LD_VAR 0 3
60320: PPUSH
60321: LD_VAR 0 4
60325: PPUSH
60326: CALL_OW 237
// end ;
60330: PPOPN 6
60332: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
60333: LD_EXP 30
60337: PUSH
60338: LD_EXP 77
60342: AND
60343: IFFALSE 60422
60345: GO 60347
60347: DISABLE
60348: LD_INT 0
60350: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
60351: LD_ADDR_VAR 0 1
60355: PUSH
60356: LD_INT 22
60358: PUSH
60359: LD_OWVAR 2
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 30
60370: PUSH
60371: LD_INT 3
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PPUSH
60382: CALL_OW 69
60386: ST_TO_ADDR
// if not tmp then
60387: LD_VAR 0 1
60391: NOT
60392: IFFALSE 60396
// exit ;
60394: GO 60422
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60396: LD_VAR 0 1
60400: PUSH
60401: LD_INT 1
60403: PPUSH
60404: LD_VAR 0 1
60408: PPUSH
60409: CALL_OW 12
60413: ARRAY
60414: PPUSH
60415: LD_INT 1
60417: PPUSH
60418: CALL_OW 234
// end ;
60422: PPOPN 1
60424: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
60425: LD_EXP 30
60429: PUSH
60430: LD_EXP 78
60434: AND
60435: IFFALSE 60547
60437: GO 60439
60439: DISABLE
60440: LD_INT 0
60442: PPUSH
60443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
60444: LD_ADDR_VAR 0 2
60448: PUSH
60449: LD_INT 22
60451: PUSH
60452: LD_OWVAR 2
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 2
60463: PUSH
60464: LD_INT 30
60466: PUSH
60467: LD_INT 27
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 30
60476: PUSH
60477: LD_INT 26
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 30
60486: PUSH
60487: LD_INT 28
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PPUSH
60504: CALL_OW 69
60508: ST_TO_ADDR
// if not tmp then
60509: LD_VAR 0 2
60513: NOT
60514: IFFALSE 60518
// exit ;
60516: GO 60547
// for i in tmp do
60518: LD_ADDR_VAR 0 1
60522: PUSH
60523: LD_VAR 0 2
60527: PUSH
60528: FOR_IN
60529: IFFALSE 60545
// SetLives ( i , 1 ) ;
60531: LD_VAR 0 1
60535: PPUSH
60536: LD_INT 1
60538: PPUSH
60539: CALL_OW 234
60543: GO 60528
60545: POP
60546: POP
// end ;
60547: PPOPN 2
60549: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
60550: LD_EXP 30
60554: PUSH
60555: LD_EXP 79
60559: AND
60560: IFFALSE 60847
60562: GO 60564
60564: DISABLE
60565: LD_INT 0
60567: PPUSH
60568: PPUSH
60569: PPUSH
// begin i := rand ( 1 , 7 ) ;
60570: LD_ADDR_VAR 0 1
60574: PUSH
60575: LD_INT 1
60577: PPUSH
60578: LD_INT 7
60580: PPUSH
60581: CALL_OW 12
60585: ST_TO_ADDR
// case i of 1 :
60586: LD_VAR 0 1
60590: PUSH
60591: LD_INT 1
60593: DOUBLE
60594: EQUAL
60595: IFTRUE 60599
60597: GO 60609
60599: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
60600: LD_STRING earthquake(getX(game), 0, 32)
60602: PPUSH
60603: CALL_OW 559
60607: GO 60847
60609: LD_INT 2
60611: DOUBLE
60612: EQUAL
60613: IFTRUE 60617
60615: GO 60631
60617: POP
// begin ToLua ( displayStucuk(); ) ;
60618: LD_STRING displayStucuk();
60620: PPUSH
60621: CALL_OW 559
// ResetFog ;
60625: CALL_OW 335
// end ; 3 :
60629: GO 60847
60631: LD_INT 3
60633: DOUBLE
60634: EQUAL
60635: IFTRUE 60639
60637: GO 60743
60639: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60640: LD_ADDR_VAR 0 2
60644: PUSH
60645: LD_INT 22
60647: PUSH
60648: LD_OWVAR 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 25
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PPUSH
60671: CALL_OW 69
60675: ST_TO_ADDR
// if not tmp then
60676: LD_VAR 0 2
60680: NOT
60681: IFFALSE 60685
// exit ;
60683: GO 60847
// un := tmp [ rand ( 1 , tmp ) ] ;
60685: LD_ADDR_VAR 0 3
60689: PUSH
60690: LD_VAR 0 2
60694: PUSH
60695: LD_INT 1
60697: PPUSH
60698: LD_VAR 0 2
60702: PPUSH
60703: CALL_OW 12
60707: ARRAY
60708: ST_TO_ADDR
// if Crawls ( un ) then
60709: LD_VAR 0 3
60713: PPUSH
60714: CALL_OW 318
60718: IFFALSE 60729
// ComWalk ( un ) ;
60720: LD_VAR 0 3
60724: PPUSH
60725: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60729: LD_VAR 0 3
60733: PPUSH
60734: LD_INT 8
60736: PPUSH
60737: CALL_OW 336
// end ; 4 :
60741: GO 60847
60743: LD_INT 4
60745: DOUBLE
60746: EQUAL
60747: IFTRUE 60751
60749: GO 60825
60751: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60752: LD_ADDR_VAR 0 2
60756: PUSH
60757: LD_INT 22
60759: PUSH
60760: LD_OWVAR 2
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 30
60771: PUSH
60772: LD_INT 29
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PPUSH
60783: CALL_OW 69
60787: ST_TO_ADDR
// if not tmp then
60788: LD_VAR 0 2
60792: NOT
60793: IFFALSE 60797
// exit ;
60795: GO 60847
// CenterNowOnUnits ( tmp [ 1 ] ) ;
60797: LD_VAR 0 2
60801: PUSH
60802: LD_INT 1
60804: ARRAY
60805: PPUSH
60806: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
60810: LD_VAR 0 2
60814: PUSH
60815: LD_INT 1
60817: ARRAY
60818: PPUSH
60819: CALL_OW 65
// end ; 5 .. 7 :
60823: GO 60847
60825: LD_INT 5
60827: DOUBLE
60828: GREATEREQUAL
60829: IFFALSE 60837
60831: LD_INT 7
60833: DOUBLE
60834: LESSEQUAL
60835: IFTRUE 60839
60837: GO 60846
60839: POP
// StreamSibBomb ; end ;
60840: CALL 57084 0 0
60844: GO 60847
60846: POP
// end ;
60847: PPOPN 3
60849: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
60850: LD_EXP 30
60854: PUSH
60855: LD_EXP 80
60859: AND
60860: IFFALSE 61016
60862: GO 60864
60864: DISABLE
60865: LD_INT 0
60867: PPUSH
60868: PPUSH
60869: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60870: LD_ADDR_VAR 0 2
60874: PUSH
60875: LD_INT 81
60877: PUSH
60878: LD_OWVAR 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 21
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 21
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PPUSH
60919: CALL_OW 69
60923: ST_TO_ADDR
// if not tmp then
60924: LD_VAR 0 2
60928: NOT
60929: IFFALSE 60933
// exit ;
60931: GO 61016
// p := 0 ;
60933: LD_ADDR_VAR 0 3
60937: PUSH
60938: LD_INT 0
60940: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60941: LD_INT 35
60943: PPUSH
60944: CALL_OW 67
// p := p + 1 ;
60948: LD_ADDR_VAR 0 3
60952: PUSH
60953: LD_VAR 0 3
60957: PUSH
60958: LD_INT 1
60960: PLUS
60961: ST_TO_ADDR
// for i in tmp do
60962: LD_ADDR_VAR 0 1
60966: PUSH
60967: LD_VAR 0 2
60971: PUSH
60972: FOR_IN
60973: IFFALSE 61004
// if GetLives ( i ) < 1000 then
60975: LD_VAR 0 1
60979: PPUSH
60980: CALL_OW 256
60984: PUSH
60985: LD_INT 1000
60987: LESS
60988: IFFALSE 61002
// SetLives ( i , 1000 ) ;
60990: LD_VAR 0 1
60994: PPUSH
60995: LD_INT 1000
60997: PPUSH
60998: CALL_OW 234
61002: GO 60972
61004: POP
61005: POP
// until p > 20 ;
61006: LD_VAR 0 3
61010: PUSH
61011: LD_INT 20
61013: GREATER
61014: IFFALSE 60941
// end ;
61016: PPOPN 3
61018: END
// every 0 0$1 trigger StreamModeActive and sTime do
61019: LD_EXP 30
61023: PUSH
61024: LD_EXP 81
61028: AND
61029: IFFALSE 61064
61031: GO 61033
61033: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
61034: LD_INT 28
61036: PPUSH
61037: LD_OWVAR 2
61041: PPUSH
61042: LD_INT 2
61044: PPUSH
61045: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
61049: LD_INT 30
61051: PPUSH
61052: LD_OWVAR 2
61056: PPUSH
61057: LD_INT 2
61059: PPUSH
61060: CALL_OW 322
// end ;
61064: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
61065: LD_EXP 30
61069: PUSH
61070: LD_EXP 82
61074: AND
61075: IFFALSE 61196
61077: GO 61079
61079: DISABLE
61080: LD_INT 0
61082: PPUSH
61083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61084: LD_ADDR_VAR 0 2
61088: PUSH
61089: LD_INT 22
61091: PUSH
61092: LD_OWVAR 2
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 21
61103: PUSH
61104: LD_INT 1
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: LD_INT 23
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: PPUSH
61133: CALL_OW 69
61137: ST_TO_ADDR
// if not tmp then
61138: LD_VAR 0 2
61142: NOT
61143: IFFALSE 61147
// exit ;
61145: GO 61196
// for i in tmp do
61147: LD_ADDR_VAR 0 1
61151: PUSH
61152: LD_VAR 0 2
61156: PUSH
61157: FOR_IN
61158: IFFALSE 61194
// begin if Crawls ( i ) then
61160: LD_VAR 0 1
61164: PPUSH
61165: CALL_OW 318
61169: IFFALSE 61180
// ComWalk ( i ) ;
61171: LD_VAR 0 1
61175: PPUSH
61176: CALL_OW 138
// SetClass ( i , 2 ) ;
61180: LD_VAR 0 1
61184: PPUSH
61185: LD_INT 2
61187: PPUSH
61188: CALL_OW 336
// end ;
61192: GO 61157
61194: POP
61195: POP
// end ;
61196: PPOPN 2
61198: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
61199: LD_EXP 30
61203: PUSH
61204: LD_EXP 83
61208: AND
61209: IFFALSE 61497
61211: GO 61213
61213: DISABLE
61214: LD_INT 0
61216: PPUSH
61217: PPUSH
61218: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
61219: LD_OWVAR 2
61223: PPUSH
61224: LD_INT 9
61226: PPUSH
61227: LD_INT 1
61229: PPUSH
61230: LD_INT 1
61232: PPUSH
61233: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
61237: LD_INT 9
61239: PPUSH
61240: LD_OWVAR 2
61244: PPUSH
61245: CALL_OW 343
// uc_side := 9 ;
61249: LD_ADDR_OWVAR 20
61253: PUSH
61254: LD_INT 9
61256: ST_TO_ADDR
// uc_nation := 2 ;
61257: LD_ADDR_OWVAR 21
61261: PUSH
61262: LD_INT 2
61264: ST_TO_ADDR
// hc_name := Dark Warrior ;
61265: LD_ADDR_OWVAR 26
61269: PUSH
61270: LD_STRING Dark Warrior
61272: ST_TO_ADDR
// hc_gallery :=  ;
61273: LD_ADDR_OWVAR 33
61277: PUSH
61278: LD_STRING 
61280: ST_TO_ADDR
// hc_noskilllimit := true ;
61281: LD_ADDR_OWVAR 76
61285: PUSH
61286: LD_INT 1
61288: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
61289: LD_ADDR_OWVAR 31
61293: PUSH
61294: LD_INT 30
61296: PUSH
61297: LD_INT 30
61299: PUSH
61300: LD_INT 30
61302: PUSH
61303: LD_INT 30
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: ST_TO_ADDR
// un := CreateHuman ;
61312: LD_ADDR_VAR 0 3
61316: PUSH
61317: CALL_OW 44
61321: ST_TO_ADDR
// hc_noskilllimit := false ;
61322: LD_ADDR_OWVAR 76
61326: PUSH
61327: LD_INT 0
61329: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
61330: LD_VAR 0 3
61334: PPUSH
61335: LD_INT 1
61337: PPUSH
61338: CALL_OW 51
// ToLua ( playRanger() ) ;
61342: LD_STRING playRanger()
61344: PPUSH
61345: CALL_OW 559
// p := 0 ;
61349: LD_ADDR_VAR 0 2
61353: PUSH
61354: LD_INT 0
61356: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61357: LD_INT 35
61359: PPUSH
61360: CALL_OW 67
// p := p + 1 ;
61364: LD_ADDR_VAR 0 2
61368: PUSH
61369: LD_VAR 0 2
61373: PUSH
61374: LD_INT 1
61376: PLUS
61377: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
61378: LD_VAR 0 3
61382: PPUSH
61383: CALL_OW 256
61387: PUSH
61388: LD_INT 1000
61390: LESS
61391: IFFALSE 61405
// SetLives ( un , 1000 ) ;
61393: LD_VAR 0 3
61397: PPUSH
61398: LD_INT 1000
61400: PPUSH
61401: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
61405: LD_VAR 0 3
61409: PPUSH
61410: LD_INT 81
61412: PUSH
61413: LD_OWVAR 2
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 91
61424: PUSH
61425: LD_VAR 0 3
61429: PUSH
61430: LD_INT 30
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: PUSH
61438: EMPTY
61439: LIST
61440: LIST
61441: PPUSH
61442: CALL_OW 69
61446: PPUSH
61447: LD_VAR 0 3
61451: PPUSH
61452: CALL_OW 74
61456: PPUSH
61457: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
61461: LD_VAR 0 2
61465: PUSH
61466: LD_INT 80
61468: GREATER
61469: PUSH
61470: LD_VAR 0 3
61474: PPUSH
61475: CALL_OW 301
61479: OR
61480: IFFALSE 61357
// if un then
61482: LD_VAR 0 3
61486: IFFALSE 61497
// RemoveUnit ( un ) ;
61488: LD_VAR 0 3
61492: PPUSH
61493: CALL_OW 64
// end ;
61497: PPOPN 3
61499: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
61500: LD_EXP 84
61504: IFFALSE 61620
61506: GO 61508
61508: DISABLE
61509: LD_INT 0
61511: PPUSH
61512: PPUSH
61513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
61514: LD_ADDR_VAR 0 2
61518: PUSH
61519: LD_INT 81
61521: PUSH
61522: LD_OWVAR 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 21
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PPUSH
61545: CALL_OW 69
61549: ST_TO_ADDR
// ToLua ( playComputer() ) ;
61550: LD_STRING playComputer()
61552: PPUSH
61553: CALL_OW 559
// if not tmp then
61557: LD_VAR 0 2
61561: NOT
61562: IFFALSE 61566
// exit ;
61564: GO 61620
// for i in tmp do
61566: LD_ADDR_VAR 0 1
61570: PUSH
61571: LD_VAR 0 2
61575: PUSH
61576: FOR_IN
61577: IFFALSE 61618
// for j := 1 to 4 do
61579: LD_ADDR_VAR 0 3
61583: PUSH
61584: DOUBLE
61585: LD_INT 1
61587: DEC
61588: ST_TO_ADDR
61589: LD_INT 4
61591: PUSH
61592: FOR_TO
61593: IFFALSE 61614
// SetSkill ( i , j , 10 ) ;
61595: LD_VAR 0 1
61599: PPUSH
61600: LD_VAR 0 3
61604: PPUSH
61605: LD_INT 10
61607: PPUSH
61608: CALL_OW 237
61612: GO 61592
61614: POP
61615: POP
61616: GO 61576
61618: POP
61619: POP
// end ;
61620: PPOPN 3
61622: END
// every 0 0$1 trigger s30 do var i , tmp ;
61623: LD_EXP 85
61627: IFFALSE 61696
61629: GO 61631
61631: DISABLE
61632: LD_INT 0
61634: PPUSH
61635: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61636: LD_ADDR_VAR 0 2
61640: PUSH
61641: LD_INT 22
61643: PUSH
61644: LD_OWVAR 2
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PPUSH
61653: CALL_OW 69
61657: ST_TO_ADDR
// if not tmp then
61658: LD_VAR 0 2
61662: NOT
61663: IFFALSE 61667
// exit ;
61665: GO 61696
// for i in tmp do
61667: LD_ADDR_VAR 0 1
61671: PUSH
61672: LD_VAR 0 2
61676: PUSH
61677: FOR_IN
61678: IFFALSE 61694
// SetLives ( i , 300 ) ;
61680: LD_VAR 0 1
61684: PPUSH
61685: LD_INT 300
61687: PPUSH
61688: CALL_OW 234
61692: GO 61677
61694: POP
61695: POP
// end ;
61696: PPOPN 2
61698: END
// every 0 0$1 trigger s60 do var i , tmp ;
61699: LD_EXP 86
61703: IFFALSE 61772
61705: GO 61707
61707: DISABLE
61708: LD_INT 0
61710: PPUSH
61711: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
61712: LD_ADDR_VAR 0 2
61716: PUSH
61717: LD_INT 22
61719: PUSH
61720: LD_OWVAR 2
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PPUSH
61729: CALL_OW 69
61733: ST_TO_ADDR
// if not tmp then
61734: LD_VAR 0 2
61738: NOT
61739: IFFALSE 61743
// exit ;
61741: GO 61772
// for i in tmp do
61743: LD_ADDR_VAR 0 1
61747: PUSH
61748: LD_VAR 0 2
61752: PUSH
61753: FOR_IN
61754: IFFALSE 61770
// SetLives ( i , 600 ) ;
61756: LD_VAR 0 1
61760: PPUSH
61761: LD_INT 600
61763: PPUSH
61764: CALL_OW 234
61768: GO 61753
61770: POP
61771: POP
// end ;
61772: PPOPN 2
61774: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61775: LD_INT 0
61777: PPUSH
// case cmd of 301 :
61778: LD_VAR 0 1
61782: PUSH
61783: LD_INT 301
61785: DOUBLE
61786: EQUAL
61787: IFTRUE 61791
61789: GO 61823
61791: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
61792: LD_VAR 0 6
61796: PPUSH
61797: LD_VAR 0 7
61801: PPUSH
61802: LD_VAR 0 8
61806: PPUSH
61807: LD_VAR 0 4
61811: PPUSH
61812: LD_VAR 0 5
61816: PPUSH
61817: CALL 63032 0 5
61821: GO 61944
61823: LD_INT 302
61825: DOUBLE
61826: EQUAL
61827: IFTRUE 61831
61829: GO 61868
61831: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
61832: LD_VAR 0 6
61836: PPUSH
61837: LD_VAR 0 7
61841: PPUSH
61842: LD_VAR 0 8
61846: PPUSH
61847: LD_VAR 0 9
61851: PPUSH
61852: LD_VAR 0 4
61856: PPUSH
61857: LD_VAR 0 5
61861: PPUSH
61862: CALL 63123 0 6
61866: GO 61944
61868: LD_INT 303
61870: DOUBLE
61871: EQUAL
61872: IFTRUE 61876
61874: GO 61913
61876: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61877: LD_VAR 0 6
61881: PPUSH
61882: LD_VAR 0 7
61886: PPUSH
61887: LD_VAR 0 8
61891: PPUSH
61892: LD_VAR 0 9
61896: PPUSH
61897: LD_VAR 0 4
61901: PPUSH
61902: LD_VAR 0 5
61906: PPUSH
61907: CALL 61949 0 6
61911: GO 61944
61913: LD_INT 304
61915: DOUBLE
61916: EQUAL
61917: IFTRUE 61921
61919: GO 61943
61921: POP
// hHackTeleport ( unit , x , y ) ; end ;
61922: LD_VAR 0 2
61926: PPUSH
61927: LD_VAR 0 4
61931: PPUSH
61932: LD_VAR 0 5
61936: PPUSH
61937: CALL 63716 0 3
61941: GO 61944
61943: POP
// end ;
61944: LD_VAR 0 12
61948: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61949: LD_INT 0
61951: PPUSH
61952: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61953: LD_VAR 0 1
61957: PUSH
61958: LD_INT 1
61960: LESS
61961: PUSH
61962: LD_VAR 0 1
61966: PUSH
61967: LD_INT 3
61969: GREATER
61970: OR
61971: PUSH
61972: LD_VAR 0 5
61976: PPUSH
61977: LD_VAR 0 6
61981: PPUSH
61982: CALL_OW 428
61986: OR
61987: IFFALSE 61991
// exit ;
61989: GO 62719
// uc_side := your_side ;
61991: LD_ADDR_OWVAR 20
61995: PUSH
61996: LD_OWVAR 2
62000: ST_TO_ADDR
// uc_nation := nation ;
62001: LD_ADDR_OWVAR 21
62005: PUSH
62006: LD_VAR 0 1
62010: ST_TO_ADDR
// bc_level = 1 ;
62011: LD_ADDR_OWVAR 43
62015: PUSH
62016: LD_INT 1
62018: ST_TO_ADDR
// case btype of 1 :
62019: LD_VAR 0 2
62023: PUSH
62024: LD_INT 1
62026: DOUBLE
62027: EQUAL
62028: IFTRUE 62032
62030: GO 62043
62032: POP
// bc_type := b_depot ; 2 :
62033: LD_ADDR_OWVAR 42
62037: PUSH
62038: LD_INT 0
62040: ST_TO_ADDR
62041: GO 62663
62043: LD_INT 2
62045: DOUBLE
62046: EQUAL
62047: IFTRUE 62051
62049: GO 62062
62051: POP
// bc_type := b_warehouse ; 3 :
62052: LD_ADDR_OWVAR 42
62056: PUSH
62057: LD_INT 1
62059: ST_TO_ADDR
62060: GO 62663
62062: LD_INT 3
62064: DOUBLE
62065: EQUAL
62066: IFTRUE 62070
62068: GO 62081
62070: POP
// bc_type := b_lab ; 4 .. 9 :
62071: LD_ADDR_OWVAR 42
62075: PUSH
62076: LD_INT 6
62078: ST_TO_ADDR
62079: GO 62663
62081: LD_INT 4
62083: DOUBLE
62084: GREATEREQUAL
62085: IFFALSE 62093
62087: LD_INT 9
62089: DOUBLE
62090: LESSEQUAL
62091: IFTRUE 62095
62093: GO 62155
62095: POP
// begin bc_type := b_lab_half ;
62096: LD_ADDR_OWVAR 42
62100: PUSH
62101: LD_INT 7
62103: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
62104: LD_ADDR_OWVAR 44
62108: PUSH
62109: LD_INT 10
62111: PUSH
62112: LD_INT 11
62114: PUSH
62115: LD_INT 12
62117: PUSH
62118: LD_INT 15
62120: PUSH
62121: LD_INT 14
62123: PUSH
62124: LD_INT 13
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: PUSH
62135: LD_VAR 0 2
62139: PUSH
62140: LD_INT 3
62142: MINUS
62143: ARRAY
62144: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
62145: LD_ADDR_OWVAR 45
62149: PUSH
62150: LD_INT 9
62152: ST_TO_ADDR
// end ; 10 .. 13 :
62153: GO 62663
62155: LD_INT 10
62157: DOUBLE
62158: GREATEREQUAL
62159: IFFALSE 62167
62161: LD_INT 13
62163: DOUBLE
62164: LESSEQUAL
62165: IFTRUE 62169
62167: GO 62246
62169: POP
// begin bc_type := b_lab_full ;
62170: LD_ADDR_OWVAR 42
62174: PUSH
62175: LD_INT 8
62177: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
62178: LD_ADDR_OWVAR 44
62182: PUSH
62183: LD_INT 10
62185: PUSH
62186: LD_INT 12
62188: PUSH
62189: LD_INT 14
62191: PUSH
62192: LD_INT 13
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: PUSH
62201: LD_VAR 0 2
62205: PUSH
62206: LD_INT 9
62208: MINUS
62209: ARRAY
62210: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
62211: LD_ADDR_OWVAR 45
62215: PUSH
62216: LD_INT 11
62218: PUSH
62219: LD_INT 15
62221: PUSH
62222: LD_INT 12
62224: PUSH
62225: LD_INT 15
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: PUSH
62234: LD_VAR 0 2
62238: PUSH
62239: LD_INT 9
62241: MINUS
62242: ARRAY
62243: ST_TO_ADDR
// end ; 14 :
62244: GO 62663
62246: LD_INT 14
62248: DOUBLE
62249: EQUAL
62250: IFTRUE 62254
62252: GO 62265
62254: POP
// bc_type := b_workshop ; 15 :
62255: LD_ADDR_OWVAR 42
62259: PUSH
62260: LD_INT 2
62262: ST_TO_ADDR
62263: GO 62663
62265: LD_INT 15
62267: DOUBLE
62268: EQUAL
62269: IFTRUE 62273
62271: GO 62284
62273: POP
// bc_type := b_factory ; 16 :
62274: LD_ADDR_OWVAR 42
62278: PUSH
62279: LD_INT 3
62281: ST_TO_ADDR
62282: GO 62663
62284: LD_INT 16
62286: DOUBLE
62287: EQUAL
62288: IFTRUE 62292
62290: GO 62303
62292: POP
// bc_type := b_ext_gun ; 17 :
62293: LD_ADDR_OWVAR 42
62297: PUSH
62298: LD_INT 17
62300: ST_TO_ADDR
62301: GO 62663
62303: LD_INT 17
62305: DOUBLE
62306: EQUAL
62307: IFTRUE 62311
62309: GO 62339
62311: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
62312: LD_ADDR_OWVAR 42
62316: PUSH
62317: LD_INT 19
62319: PUSH
62320: LD_INT 23
62322: PUSH
62323: LD_INT 19
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 1
62335: ARRAY
62336: ST_TO_ADDR
62337: GO 62663
62339: LD_INT 18
62341: DOUBLE
62342: EQUAL
62343: IFTRUE 62347
62345: GO 62358
62347: POP
// bc_type := b_ext_radar ; 19 :
62348: LD_ADDR_OWVAR 42
62352: PUSH
62353: LD_INT 20
62355: ST_TO_ADDR
62356: GO 62663
62358: LD_INT 19
62360: DOUBLE
62361: EQUAL
62362: IFTRUE 62366
62364: GO 62377
62366: POP
// bc_type := b_ext_radio ; 20 :
62367: LD_ADDR_OWVAR 42
62371: PUSH
62372: LD_INT 22
62374: ST_TO_ADDR
62375: GO 62663
62377: LD_INT 20
62379: DOUBLE
62380: EQUAL
62381: IFTRUE 62385
62383: GO 62396
62385: POP
// bc_type := b_ext_siberium ; 21 :
62386: LD_ADDR_OWVAR 42
62390: PUSH
62391: LD_INT 21
62393: ST_TO_ADDR
62394: GO 62663
62396: LD_INT 21
62398: DOUBLE
62399: EQUAL
62400: IFTRUE 62404
62402: GO 62415
62404: POP
// bc_type := b_ext_computer ; 22 :
62405: LD_ADDR_OWVAR 42
62409: PUSH
62410: LD_INT 24
62412: ST_TO_ADDR
62413: GO 62663
62415: LD_INT 22
62417: DOUBLE
62418: EQUAL
62419: IFTRUE 62423
62421: GO 62434
62423: POP
// bc_type := b_ext_track ; 23 :
62424: LD_ADDR_OWVAR 42
62428: PUSH
62429: LD_INT 16
62431: ST_TO_ADDR
62432: GO 62663
62434: LD_INT 23
62436: DOUBLE
62437: EQUAL
62438: IFTRUE 62442
62440: GO 62453
62442: POP
// bc_type := b_ext_laser ; 24 :
62443: LD_ADDR_OWVAR 42
62447: PUSH
62448: LD_INT 25
62450: ST_TO_ADDR
62451: GO 62663
62453: LD_INT 24
62455: DOUBLE
62456: EQUAL
62457: IFTRUE 62461
62459: GO 62472
62461: POP
// bc_type := b_control_tower ; 25 :
62462: LD_ADDR_OWVAR 42
62466: PUSH
62467: LD_INT 36
62469: ST_TO_ADDR
62470: GO 62663
62472: LD_INT 25
62474: DOUBLE
62475: EQUAL
62476: IFTRUE 62480
62478: GO 62491
62480: POP
// bc_type := b_breastwork ; 26 :
62481: LD_ADDR_OWVAR 42
62485: PUSH
62486: LD_INT 31
62488: ST_TO_ADDR
62489: GO 62663
62491: LD_INT 26
62493: DOUBLE
62494: EQUAL
62495: IFTRUE 62499
62497: GO 62510
62499: POP
// bc_type := b_bunker ; 27 :
62500: LD_ADDR_OWVAR 42
62504: PUSH
62505: LD_INT 32
62507: ST_TO_ADDR
62508: GO 62663
62510: LD_INT 27
62512: DOUBLE
62513: EQUAL
62514: IFTRUE 62518
62516: GO 62529
62518: POP
// bc_type := b_turret ; 28 :
62519: LD_ADDR_OWVAR 42
62523: PUSH
62524: LD_INT 33
62526: ST_TO_ADDR
62527: GO 62663
62529: LD_INT 28
62531: DOUBLE
62532: EQUAL
62533: IFTRUE 62537
62535: GO 62548
62537: POP
// bc_type := b_armoury ; 29 :
62538: LD_ADDR_OWVAR 42
62542: PUSH
62543: LD_INT 4
62545: ST_TO_ADDR
62546: GO 62663
62548: LD_INT 29
62550: DOUBLE
62551: EQUAL
62552: IFTRUE 62556
62554: GO 62567
62556: POP
// bc_type := b_barracks ; 30 :
62557: LD_ADDR_OWVAR 42
62561: PUSH
62562: LD_INT 5
62564: ST_TO_ADDR
62565: GO 62663
62567: LD_INT 30
62569: DOUBLE
62570: EQUAL
62571: IFTRUE 62575
62573: GO 62586
62575: POP
// bc_type := b_solar_power ; 31 :
62576: LD_ADDR_OWVAR 42
62580: PUSH
62581: LD_INT 27
62583: ST_TO_ADDR
62584: GO 62663
62586: LD_INT 31
62588: DOUBLE
62589: EQUAL
62590: IFTRUE 62594
62592: GO 62605
62594: POP
// bc_type := b_oil_power ; 32 :
62595: LD_ADDR_OWVAR 42
62599: PUSH
62600: LD_INT 26
62602: ST_TO_ADDR
62603: GO 62663
62605: LD_INT 32
62607: DOUBLE
62608: EQUAL
62609: IFTRUE 62613
62611: GO 62624
62613: POP
// bc_type := b_siberite_power ; 33 :
62614: LD_ADDR_OWVAR 42
62618: PUSH
62619: LD_INT 28
62621: ST_TO_ADDR
62622: GO 62663
62624: LD_INT 33
62626: DOUBLE
62627: EQUAL
62628: IFTRUE 62632
62630: GO 62643
62632: POP
// bc_type := b_oil_mine ; 34 :
62633: LD_ADDR_OWVAR 42
62637: PUSH
62638: LD_INT 29
62640: ST_TO_ADDR
62641: GO 62663
62643: LD_INT 34
62645: DOUBLE
62646: EQUAL
62647: IFTRUE 62651
62649: GO 62662
62651: POP
// bc_type := b_siberite_mine ; end ;
62652: LD_ADDR_OWVAR 42
62656: PUSH
62657: LD_INT 30
62659: ST_TO_ADDR
62660: GO 62663
62662: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
62663: LD_ADDR_VAR 0 8
62667: PUSH
62668: LD_VAR 0 5
62672: PPUSH
62673: LD_VAR 0 6
62677: PPUSH
62678: LD_VAR 0 3
62682: PPUSH
62683: CALL_OW 47
62687: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
62688: LD_OWVAR 42
62692: PUSH
62693: LD_INT 32
62695: PUSH
62696: LD_INT 33
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: IN
62703: IFFALSE 62719
// PlaceWeaponTurret ( b , weapon ) ;
62705: LD_VAR 0 8
62709: PPUSH
62710: LD_VAR 0 4
62714: PPUSH
62715: CALL_OW 431
// end ;
62719: LD_VAR 0 7
62723: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
62724: LD_INT 0
62726: PPUSH
62727: PPUSH
62728: PPUSH
62729: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62730: LD_ADDR_VAR 0 4
62734: PUSH
62735: LD_INT 22
62737: PUSH
62738: LD_OWVAR 2
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 2
62749: PUSH
62750: LD_INT 30
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 30
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PPUSH
62779: CALL_OW 69
62783: ST_TO_ADDR
// if not tmp then
62784: LD_VAR 0 4
62788: NOT
62789: IFFALSE 62793
// exit ;
62791: GO 62852
// for i in tmp do
62793: LD_ADDR_VAR 0 2
62797: PUSH
62798: LD_VAR 0 4
62802: PUSH
62803: FOR_IN
62804: IFFALSE 62850
// for j = 1 to 3 do
62806: LD_ADDR_VAR 0 3
62810: PUSH
62811: DOUBLE
62812: LD_INT 1
62814: DEC
62815: ST_TO_ADDR
62816: LD_INT 3
62818: PUSH
62819: FOR_TO
62820: IFFALSE 62846
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
62822: LD_VAR 0 2
62826: PPUSH
62827: CALL_OW 274
62831: PPUSH
62832: LD_VAR 0 3
62836: PPUSH
62837: LD_INT 99999
62839: PPUSH
62840: CALL_OW 277
62844: GO 62819
62846: POP
62847: POP
62848: GO 62803
62850: POP
62851: POP
// end ;
62852: LD_VAR 0 1
62856: RET
// export function hHackSetLevel10 ; var i , j ; begin
62857: LD_INT 0
62859: PPUSH
62860: PPUSH
62861: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62862: LD_ADDR_VAR 0 2
62866: PUSH
62867: LD_INT 21
62869: PUSH
62870: LD_INT 1
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PPUSH
62877: CALL_OW 69
62881: PUSH
62882: FOR_IN
62883: IFFALSE 62935
// if IsSelected ( i ) then
62885: LD_VAR 0 2
62889: PPUSH
62890: CALL_OW 306
62894: IFFALSE 62933
// begin for j := 1 to 4 do
62896: LD_ADDR_VAR 0 3
62900: PUSH
62901: DOUBLE
62902: LD_INT 1
62904: DEC
62905: ST_TO_ADDR
62906: LD_INT 4
62908: PUSH
62909: FOR_TO
62910: IFFALSE 62931
// SetSkill ( i , j , 10 ) ;
62912: LD_VAR 0 2
62916: PPUSH
62917: LD_VAR 0 3
62921: PPUSH
62922: LD_INT 10
62924: PPUSH
62925: CALL_OW 237
62929: GO 62909
62931: POP
62932: POP
// end ;
62933: GO 62882
62935: POP
62936: POP
// end ;
62937: LD_VAR 0 1
62941: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62942: LD_INT 0
62944: PPUSH
62945: PPUSH
62946: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62947: LD_ADDR_VAR 0 2
62951: PUSH
62952: LD_INT 22
62954: PUSH
62955: LD_OWVAR 2
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 21
62966: PUSH
62967: LD_INT 1
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PPUSH
62978: CALL_OW 69
62982: PUSH
62983: FOR_IN
62984: IFFALSE 63025
// begin for j := 1 to 4 do
62986: LD_ADDR_VAR 0 3
62990: PUSH
62991: DOUBLE
62992: LD_INT 1
62994: DEC
62995: ST_TO_ADDR
62996: LD_INT 4
62998: PUSH
62999: FOR_TO
63000: IFFALSE 63021
// SetSkill ( i , j , 10 ) ;
63002: LD_VAR 0 2
63006: PPUSH
63007: LD_VAR 0 3
63011: PPUSH
63012: LD_INT 10
63014: PPUSH
63015: CALL_OW 237
63019: GO 62999
63021: POP
63022: POP
// end ;
63023: GO 62983
63025: POP
63026: POP
// end ;
63027: LD_VAR 0 1
63031: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
63032: LD_INT 0
63034: PPUSH
// uc_side := your_side ;
63035: LD_ADDR_OWVAR 20
63039: PUSH
63040: LD_OWVAR 2
63044: ST_TO_ADDR
// uc_nation := nation ;
63045: LD_ADDR_OWVAR 21
63049: PUSH
63050: LD_VAR 0 1
63054: ST_TO_ADDR
// InitHc ;
63055: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
63059: LD_INT 0
63061: PPUSH
63062: LD_VAR 0 2
63066: PPUSH
63067: LD_VAR 0 3
63071: PPUSH
63072: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
63076: LD_VAR 0 4
63080: PPUSH
63081: LD_VAR 0 5
63085: PPUSH
63086: CALL_OW 428
63090: PUSH
63091: LD_INT 0
63093: EQUAL
63094: IFFALSE 63118
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
63096: CALL_OW 44
63100: PPUSH
63101: LD_VAR 0 4
63105: PPUSH
63106: LD_VAR 0 5
63110: PPUSH
63111: LD_INT 1
63113: PPUSH
63114: CALL_OW 48
// end ;
63118: LD_VAR 0 6
63122: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
63123: LD_INT 0
63125: PPUSH
63126: PPUSH
// uc_side := your_side ;
63127: LD_ADDR_OWVAR 20
63131: PUSH
63132: LD_OWVAR 2
63136: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
63137: LD_VAR 0 1
63141: PUSH
63142: LD_INT 1
63144: PUSH
63145: LD_INT 2
63147: PUSH
63148: LD_INT 3
63150: PUSH
63151: LD_INT 4
63153: PUSH
63154: LD_INT 5
63156: PUSH
63157: EMPTY
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: IN
63164: IFFALSE 63176
// uc_nation := nation_american else
63166: LD_ADDR_OWVAR 21
63170: PUSH
63171: LD_INT 1
63173: ST_TO_ADDR
63174: GO 63219
// if chassis in [ 11 , 12 , 13 , 14 ] then
63176: LD_VAR 0 1
63180: PUSH
63181: LD_INT 11
63183: PUSH
63184: LD_INT 12
63186: PUSH
63187: LD_INT 13
63189: PUSH
63190: LD_INT 14
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: IN
63199: IFFALSE 63211
// uc_nation := nation_arabian else
63201: LD_ADDR_OWVAR 21
63205: PUSH
63206: LD_INT 2
63208: ST_TO_ADDR
63209: GO 63219
// uc_nation := nation_russian ;
63211: LD_ADDR_OWVAR 21
63215: PUSH
63216: LD_INT 3
63218: ST_TO_ADDR
// vc_chassis := chassis ;
63219: LD_ADDR_OWVAR 37
63223: PUSH
63224: LD_VAR 0 1
63228: ST_TO_ADDR
// vc_engine := engine ;
63229: LD_ADDR_OWVAR 39
63233: PUSH
63234: LD_VAR 0 2
63238: ST_TO_ADDR
// vc_control := control ;
63239: LD_ADDR_OWVAR 38
63243: PUSH
63244: LD_VAR 0 3
63248: ST_TO_ADDR
// vc_weapon := weapon ;
63249: LD_ADDR_OWVAR 40
63253: PUSH
63254: LD_VAR 0 4
63258: ST_TO_ADDR
// un := CreateVehicle ;
63259: LD_ADDR_VAR 0 8
63263: PUSH
63264: CALL_OW 45
63268: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
63269: LD_VAR 0 8
63273: PPUSH
63274: LD_INT 0
63276: PPUSH
63277: LD_INT 5
63279: PPUSH
63280: CALL_OW 12
63284: PPUSH
63285: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
63289: LD_VAR 0 8
63293: PPUSH
63294: LD_VAR 0 5
63298: PPUSH
63299: LD_VAR 0 6
63303: PPUSH
63304: LD_INT 1
63306: PPUSH
63307: CALL_OW 48
// end ;
63311: LD_VAR 0 7
63315: RET
// export hInvincible ; every 1 do
63316: GO 63318
63318: DISABLE
// hInvincible := [ ] ;
63319: LD_ADDR_EXP 87
63323: PUSH
63324: EMPTY
63325: ST_TO_ADDR
63326: END
// every 10 do var i ;
63327: GO 63329
63329: DISABLE
63330: LD_INT 0
63332: PPUSH
// begin enable ;
63333: ENABLE
// if not hInvincible then
63334: LD_EXP 87
63338: NOT
63339: IFFALSE 63343
// exit ;
63341: GO 63387
// for i in hInvincible do
63343: LD_ADDR_VAR 0 1
63347: PUSH
63348: LD_EXP 87
63352: PUSH
63353: FOR_IN
63354: IFFALSE 63385
// if GetLives ( i ) < 1000 then
63356: LD_VAR 0 1
63360: PPUSH
63361: CALL_OW 256
63365: PUSH
63366: LD_INT 1000
63368: LESS
63369: IFFALSE 63383
// SetLives ( i , 1000 ) ;
63371: LD_VAR 0 1
63375: PPUSH
63376: LD_INT 1000
63378: PPUSH
63379: CALL_OW 234
63383: GO 63353
63385: POP
63386: POP
// end ;
63387: PPOPN 1
63389: END
// export function hHackInvincible ; var i ; begin
63390: LD_INT 0
63392: PPUSH
63393: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
63394: LD_ADDR_VAR 0 2
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: LD_INT 21
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: LD_INT 21
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PPUSH
63427: CALL_OW 69
63431: PUSH
63432: FOR_IN
63433: IFFALSE 63494
// if IsSelected ( i ) then
63435: LD_VAR 0 2
63439: PPUSH
63440: CALL_OW 306
63444: IFFALSE 63492
// begin if i in hInvincible then
63446: LD_VAR 0 2
63450: PUSH
63451: LD_EXP 87
63455: IN
63456: IFFALSE 63476
// hInvincible := hInvincible diff i else
63458: LD_ADDR_EXP 87
63462: PUSH
63463: LD_EXP 87
63467: PUSH
63468: LD_VAR 0 2
63472: DIFF
63473: ST_TO_ADDR
63474: GO 63492
// hInvincible := hInvincible union i ;
63476: LD_ADDR_EXP 87
63480: PUSH
63481: LD_EXP 87
63485: PUSH
63486: LD_VAR 0 2
63490: UNION
63491: ST_TO_ADDR
// end ;
63492: GO 63432
63494: POP
63495: POP
// end ;
63496: LD_VAR 0 1
63500: RET
// export function hHackInvisible ; var i , j ; begin
63501: LD_INT 0
63503: PPUSH
63504: PPUSH
63505: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63506: LD_ADDR_VAR 0 2
63510: PUSH
63511: LD_INT 21
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PPUSH
63521: CALL_OW 69
63525: PUSH
63526: FOR_IN
63527: IFFALSE 63551
// if IsSelected ( i ) then
63529: LD_VAR 0 2
63533: PPUSH
63534: CALL_OW 306
63538: IFFALSE 63549
// ComForceInvisible ( i ) ;
63540: LD_VAR 0 2
63544: PPUSH
63545: CALL_OW 496
63549: GO 63526
63551: POP
63552: POP
// end ;
63553: LD_VAR 0 1
63557: RET
// export function hHackChangeYourSide ; begin
63558: LD_INT 0
63560: PPUSH
// if your_side = 8 then
63561: LD_OWVAR 2
63565: PUSH
63566: LD_INT 8
63568: EQUAL
63569: IFFALSE 63581
// your_side := 0 else
63571: LD_ADDR_OWVAR 2
63575: PUSH
63576: LD_INT 0
63578: ST_TO_ADDR
63579: GO 63595
// your_side := your_side + 1 ;
63581: LD_ADDR_OWVAR 2
63585: PUSH
63586: LD_OWVAR 2
63590: PUSH
63591: LD_INT 1
63593: PLUS
63594: ST_TO_ADDR
// end ;
63595: LD_VAR 0 1
63599: RET
// export function hHackChangeUnitSide ; var i , j ; begin
63600: LD_INT 0
63602: PPUSH
63603: PPUSH
63604: PPUSH
// for i in all_units do
63605: LD_ADDR_VAR 0 2
63609: PUSH
63610: LD_OWVAR 3
63614: PUSH
63615: FOR_IN
63616: IFFALSE 63694
// if IsSelected ( i ) then
63618: LD_VAR 0 2
63622: PPUSH
63623: CALL_OW 306
63627: IFFALSE 63692
// begin j := GetSide ( i ) ;
63629: LD_ADDR_VAR 0 3
63633: PUSH
63634: LD_VAR 0 2
63638: PPUSH
63639: CALL_OW 255
63643: ST_TO_ADDR
// if j = 8 then
63644: LD_VAR 0 3
63648: PUSH
63649: LD_INT 8
63651: EQUAL
63652: IFFALSE 63664
// j := 0 else
63654: LD_ADDR_VAR 0 3
63658: PUSH
63659: LD_INT 0
63661: ST_TO_ADDR
63662: GO 63678
// j := j + 1 ;
63664: LD_ADDR_VAR 0 3
63668: PUSH
63669: LD_VAR 0 3
63673: PUSH
63674: LD_INT 1
63676: PLUS
63677: ST_TO_ADDR
// SetSide ( i , j ) ;
63678: LD_VAR 0 2
63682: PPUSH
63683: LD_VAR 0 3
63687: PPUSH
63688: CALL_OW 235
// end ;
63692: GO 63615
63694: POP
63695: POP
// end ;
63696: LD_VAR 0 1
63700: RET
// export function hHackFog ; begin
63701: LD_INT 0
63703: PPUSH
// FogOff ( true ) ;
63704: LD_INT 1
63706: PPUSH
63707: CALL_OW 344
// end ;
63711: LD_VAR 0 1
63715: RET
// export function hHackTeleport ( unit , x , y ) ; begin
63716: LD_INT 0
63718: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
63719: LD_VAR 0 1
63723: PPUSH
63724: LD_VAR 0 2
63728: PPUSH
63729: LD_VAR 0 3
63733: PPUSH
63734: LD_INT 1
63736: PPUSH
63737: LD_INT 1
63739: PPUSH
63740: CALL_OW 483
// CenterOnXY ( x , y ) ;
63744: LD_VAR 0 2
63748: PPUSH
63749: LD_VAR 0 3
63753: PPUSH
63754: CALL_OW 84
// end ;
63758: LD_VAR 0 4
63762: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
63763: LD_INT 0
63765: PPUSH
63766: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
63767: LD_VAR 0 1
63771: NOT
63772: PUSH
63773: LD_VAR 0 2
63777: PPUSH
63778: LD_VAR 0 3
63782: PPUSH
63783: CALL_OW 488
63787: NOT
63788: OR
63789: PUSH
63790: LD_VAR 0 1
63794: PPUSH
63795: CALL_OW 266
63799: PUSH
63800: LD_INT 3
63802: NONEQUAL
63803: PUSH
63804: LD_VAR 0 1
63808: PPUSH
63809: CALL_OW 247
63813: PUSH
63814: LD_INT 1
63816: EQUAL
63817: NOT
63818: AND
63819: OR
63820: IFFALSE 63824
// exit ;
63822: GO 63973
// if GetType ( factory ) = unit_human then
63824: LD_VAR 0 1
63828: PPUSH
63829: CALL_OW 247
63833: PUSH
63834: LD_INT 1
63836: EQUAL
63837: IFFALSE 63854
// factory := IsInUnit ( factory ) ;
63839: LD_ADDR_VAR 0 1
63843: PUSH
63844: LD_VAR 0 1
63848: PPUSH
63849: CALL_OW 310
63853: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
63854: LD_VAR 0 1
63858: PPUSH
63859: CALL_OW 266
63863: PUSH
63864: LD_INT 3
63866: NONEQUAL
63867: IFFALSE 63871
// exit ;
63869: GO 63973
// if HexInfo ( x , y ) = factory then
63871: LD_VAR 0 2
63875: PPUSH
63876: LD_VAR 0 3
63880: PPUSH
63881: CALL_OW 428
63885: PUSH
63886: LD_VAR 0 1
63890: EQUAL
63891: IFFALSE 63918
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63893: LD_ADDR_EXP 88
63897: PUSH
63898: LD_EXP 88
63902: PPUSH
63903: LD_VAR 0 1
63907: PPUSH
63908: LD_INT 0
63910: PPUSH
63911: CALL_OW 1
63915: ST_TO_ADDR
63916: GO 63969
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63918: LD_ADDR_EXP 88
63922: PUSH
63923: LD_EXP 88
63927: PPUSH
63928: LD_VAR 0 1
63932: PPUSH
63933: LD_VAR 0 1
63937: PPUSH
63938: CALL_OW 255
63942: PUSH
63943: LD_VAR 0 1
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: LD_VAR 0 3
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: PPUSH
63964: CALL_OW 1
63968: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63969: CALL 63978 0 0
// end ;
63973: LD_VAR 0 4
63977: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63978: LD_INT 0
63980: PPUSH
63981: PPUSH
63982: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63983: LD_STRING resetFactoryWaypoint();
63985: PPUSH
63986: CALL_OW 559
// if factoryWaypoints then
63990: LD_EXP 88
63994: IFFALSE 64120
// begin list := PrepareArray ( factoryWaypoints ) ;
63996: LD_ADDR_VAR 0 3
64000: PUSH
64001: LD_EXP 88
64005: PPUSH
64006: CALL 47874 0 1
64010: ST_TO_ADDR
// for i := 1 to list do
64011: LD_ADDR_VAR 0 2
64015: PUSH
64016: DOUBLE
64017: LD_INT 1
64019: DEC
64020: ST_TO_ADDR
64021: LD_VAR 0 3
64025: PUSH
64026: FOR_TO
64027: IFFALSE 64118
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64029: LD_STRING setFactoryWaypointXY(
64031: PUSH
64032: LD_VAR 0 3
64036: PUSH
64037: LD_VAR 0 2
64041: ARRAY
64042: PUSH
64043: LD_INT 1
64045: ARRAY
64046: STR
64047: PUSH
64048: LD_STRING ,
64050: STR
64051: PUSH
64052: LD_VAR 0 3
64056: PUSH
64057: LD_VAR 0 2
64061: ARRAY
64062: PUSH
64063: LD_INT 2
64065: ARRAY
64066: STR
64067: PUSH
64068: LD_STRING ,
64070: STR
64071: PUSH
64072: LD_VAR 0 3
64076: PUSH
64077: LD_VAR 0 2
64081: ARRAY
64082: PUSH
64083: LD_INT 3
64085: ARRAY
64086: STR
64087: PUSH
64088: LD_STRING ,
64090: STR
64091: PUSH
64092: LD_VAR 0 3
64096: PUSH
64097: LD_VAR 0 2
64101: ARRAY
64102: PUSH
64103: LD_INT 4
64105: ARRAY
64106: STR
64107: PUSH
64108: LD_STRING )
64110: STR
64111: PPUSH
64112: CALL_OW 559
64116: GO 64026
64118: POP
64119: POP
// end ; end ;
64120: LD_VAR 0 1
64124: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
64125: LD_INT 0
64127: PPUSH
// if HexInfo ( x , y ) = warehouse then
64128: LD_VAR 0 2
64132: PPUSH
64133: LD_VAR 0 3
64137: PPUSH
64138: CALL_OW 428
64142: PUSH
64143: LD_VAR 0 1
64147: EQUAL
64148: IFFALSE 64175
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
64150: LD_ADDR_EXP 89
64154: PUSH
64155: LD_EXP 89
64159: PPUSH
64160: LD_VAR 0 1
64164: PPUSH
64165: LD_INT 0
64167: PPUSH
64168: CALL_OW 1
64172: ST_TO_ADDR
64173: GO 64226
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
64175: LD_ADDR_EXP 89
64179: PUSH
64180: LD_EXP 89
64184: PPUSH
64185: LD_VAR 0 1
64189: PPUSH
64190: LD_VAR 0 1
64194: PPUSH
64195: CALL_OW 255
64199: PUSH
64200: LD_VAR 0 1
64204: PUSH
64205: LD_VAR 0 2
64209: PUSH
64210: LD_VAR 0 3
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: PPUSH
64221: CALL_OW 1
64225: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
64226: CALL 64235 0 0
// end ;
64230: LD_VAR 0 4
64234: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
64235: LD_INT 0
64237: PPUSH
64238: PPUSH
64239: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
64240: LD_STRING resetWarehouseGatheringPoints();
64242: PPUSH
64243: CALL_OW 559
// if warehouseGatheringPoints then
64247: LD_EXP 89
64251: IFFALSE 64377
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: LD_EXP 89
64262: PPUSH
64263: CALL 47874 0 1
64267: ST_TO_ADDR
// for i := 1 to list do
64268: LD_ADDR_VAR 0 2
64272: PUSH
64273: DOUBLE
64274: LD_INT 1
64276: DEC
64277: ST_TO_ADDR
64278: LD_VAR 0 3
64282: PUSH
64283: FOR_TO
64284: IFFALSE 64375
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
64286: LD_STRING setWarehouseGatheringPointXY(
64288: PUSH
64289: LD_VAR 0 3
64293: PUSH
64294: LD_VAR 0 2
64298: ARRAY
64299: PUSH
64300: LD_INT 1
64302: ARRAY
64303: STR
64304: PUSH
64305: LD_STRING ,
64307: STR
64308: PUSH
64309: LD_VAR 0 3
64313: PUSH
64314: LD_VAR 0 2
64318: ARRAY
64319: PUSH
64320: LD_INT 2
64322: ARRAY
64323: STR
64324: PUSH
64325: LD_STRING ,
64327: STR
64328: PUSH
64329: LD_VAR 0 3
64333: PUSH
64334: LD_VAR 0 2
64338: ARRAY
64339: PUSH
64340: LD_INT 3
64342: ARRAY
64343: STR
64344: PUSH
64345: LD_STRING ,
64347: STR
64348: PUSH
64349: LD_VAR 0 3
64353: PUSH
64354: LD_VAR 0 2
64358: ARRAY
64359: PUSH
64360: LD_INT 4
64362: ARRAY
64363: STR
64364: PUSH
64365: LD_STRING )
64367: STR
64368: PPUSH
64369: CALL_OW 559
64373: GO 64283
64375: POP
64376: POP
// end ; end ;
64377: LD_VAR 0 1
64381: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
64382: LD_EXP 89
64386: IFFALSE 65071
64388: GO 64390
64390: DISABLE
64391: LD_INT 0
64393: PPUSH
64394: PPUSH
64395: PPUSH
64396: PPUSH
64397: PPUSH
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
// begin enable ;
64402: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
64403: LD_ADDR_VAR 0 3
64407: PUSH
64408: LD_EXP 89
64412: PPUSH
64413: CALL 47874 0 1
64417: ST_TO_ADDR
// if not list then
64418: LD_VAR 0 3
64422: NOT
64423: IFFALSE 64427
// exit ;
64425: GO 65071
// for i := 1 to list do
64427: LD_ADDR_VAR 0 1
64431: PUSH
64432: DOUBLE
64433: LD_INT 1
64435: DEC
64436: ST_TO_ADDR
64437: LD_VAR 0 3
64441: PUSH
64442: FOR_TO
64443: IFFALSE 65069
// begin depot := list [ i ] [ 2 ] ;
64445: LD_ADDR_VAR 0 8
64449: PUSH
64450: LD_VAR 0 3
64454: PUSH
64455: LD_VAR 0 1
64459: ARRAY
64460: PUSH
64461: LD_INT 2
64463: ARRAY
64464: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
64465: LD_ADDR_VAR 0 5
64469: PUSH
64470: LD_VAR 0 3
64474: PUSH
64475: LD_VAR 0 1
64479: ARRAY
64480: PUSH
64481: LD_INT 1
64483: ARRAY
64484: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
64485: LD_VAR 0 8
64489: PPUSH
64490: CALL_OW 301
64494: PUSH
64495: LD_VAR 0 5
64499: PUSH
64500: LD_VAR 0 8
64504: PPUSH
64505: CALL_OW 255
64509: NONEQUAL
64510: OR
64511: IFFALSE 64540
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
64513: LD_ADDR_EXP 89
64517: PUSH
64518: LD_EXP 89
64522: PPUSH
64523: LD_VAR 0 8
64527: PPUSH
64528: LD_INT 0
64530: PPUSH
64531: CALL_OW 1
64535: ST_TO_ADDR
// exit ;
64536: POP
64537: POP
64538: GO 65071
// end ; x := list [ i ] [ 3 ] ;
64540: LD_ADDR_VAR 0 6
64544: PUSH
64545: LD_VAR 0 3
64549: PUSH
64550: LD_VAR 0 1
64554: ARRAY
64555: PUSH
64556: LD_INT 3
64558: ARRAY
64559: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
64560: LD_ADDR_VAR 0 7
64564: PUSH
64565: LD_VAR 0 3
64569: PUSH
64570: LD_VAR 0 1
64574: ARRAY
64575: PUSH
64576: LD_INT 4
64578: ARRAY
64579: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
64580: LD_ADDR_VAR 0 9
64584: PUSH
64585: LD_VAR 0 6
64589: PPUSH
64590: LD_VAR 0 7
64594: PPUSH
64595: LD_INT 16
64597: PPUSH
64598: CALL 46462 0 3
64602: ST_TO_ADDR
// if not cratesNearbyPoint then
64603: LD_VAR 0 9
64607: NOT
64608: IFFALSE 64614
// exit ;
64610: POP
64611: POP
64612: GO 65071
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
64614: LD_ADDR_VAR 0 4
64618: PUSH
64619: LD_INT 22
64621: PUSH
64622: LD_VAR 0 5
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: LD_INT 60
64636: PUSH
64637: EMPTY
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 91
64646: PUSH
64647: LD_VAR 0 8
64651: PUSH
64652: LD_INT 6
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: PUSH
64663: LD_INT 25
64665: PUSH
64666: LD_INT 2
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 25
64675: PUSH
64676: LD_INT 16
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: PPUSH
64694: CALL_OW 69
64698: PUSH
64699: LD_VAR 0 8
64703: PPUSH
64704: CALL_OW 313
64708: PPUSH
64709: LD_INT 3
64711: PUSH
64712: LD_INT 60
64714: PUSH
64715: EMPTY
64716: LIST
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 2
64724: PUSH
64725: LD_INT 25
64727: PUSH
64728: LD_INT 2
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PUSH
64735: LD_INT 25
64737: PUSH
64738: LD_INT 16
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: LIST
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PPUSH
64754: CALL_OW 72
64758: UNION
64759: ST_TO_ADDR
// if tmp then
64760: LD_VAR 0 4
64764: IFFALSE 64844
// begin tmp := ShrinkArray ( tmp , 3 ) ;
64766: LD_ADDR_VAR 0 4
64770: PUSH
64771: LD_VAR 0 4
64775: PPUSH
64776: LD_INT 3
64778: PPUSH
64779: CALL 44431 0 2
64783: ST_TO_ADDR
// for j in tmp do
64784: LD_ADDR_VAR 0 2
64788: PUSH
64789: LD_VAR 0 4
64793: PUSH
64794: FOR_IN
64795: IFFALSE 64838
// begin if IsInUnit ( j ) then
64797: LD_VAR 0 2
64801: PPUSH
64802: CALL_OW 310
64806: IFFALSE 64817
// ComExit ( j ) ;
64808: LD_VAR 0 2
64812: PPUSH
64813: CALL 44514 0 1
// AddComCollect ( j , x , y ) ;
64817: LD_VAR 0 2
64821: PPUSH
64822: LD_VAR 0 6
64826: PPUSH
64827: LD_VAR 0 7
64831: PPUSH
64832: CALL_OW 177
// end ;
64836: GO 64794
64838: POP
64839: POP
// exit ;
64840: POP
64841: POP
64842: GO 65071
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
64844: LD_ADDR_VAR 0 4
64848: PUSH
64849: LD_INT 22
64851: PUSH
64852: LD_VAR 0 5
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 91
64863: PUSH
64864: LD_VAR 0 8
64868: PUSH
64869: LD_INT 8
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 2
64879: PUSH
64880: LD_INT 34
64882: PUSH
64883: LD_INT 12
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 34
64892: PUSH
64893: LD_INT 51
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 34
64902: PUSH
64903: LD_INT 32
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 34
64912: PUSH
64913: LD_INT 89
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: PPUSH
64932: CALL_OW 69
64936: ST_TO_ADDR
// if tmp then
64937: LD_VAR 0 4
64941: IFFALSE 65067
// begin for j in tmp do
64943: LD_ADDR_VAR 0 2
64947: PUSH
64948: LD_VAR 0 4
64952: PUSH
64953: FOR_IN
64954: IFFALSE 65065
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64956: LD_VAR 0 2
64960: PPUSH
64961: CALL_OW 262
64965: PUSH
64966: LD_INT 3
64968: EQUAL
64969: PUSH
64970: LD_VAR 0 2
64974: PPUSH
64975: CALL_OW 261
64979: PUSH
64980: LD_INT 20
64982: GREATER
64983: OR
64984: PUSH
64985: LD_VAR 0 2
64989: PPUSH
64990: CALL_OW 314
64994: NOT
64995: AND
64996: PUSH
64997: LD_VAR 0 2
65001: PPUSH
65002: CALL_OW 263
65006: PUSH
65007: LD_INT 1
65009: NONEQUAL
65010: PUSH
65011: LD_VAR 0 2
65015: PPUSH
65016: CALL_OW 311
65020: OR
65021: AND
65022: IFFALSE 65063
// begin ComCollect ( j , x , y ) ;
65024: LD_VAR 0 2
65028: PPUSH
65029: LD_VAR 0 6
65033: PPUSH
65034: LD_VAR 0 7
65038: PPUSH
65039: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
65043: LD_VAR 0 2
65047: PPUSH
65048: LD_VAR 0 8
65052: PPUSH
65053: CALL_OW 172
// exit ;
65057: POP
65058: POP
65059: POP
65060: POP
65061: GO 65071
// end ;
65063: GO 64953
65065: POP
65066: POP
// end ; end ;
65067: GO 64442
65069: POP
65070: POP
// end ; end_of_file
65071: PPOPN 9
65073: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65074: LD_VAR 0 1
65078: PUSH
65079: LD_INT 200
65081: DOUBLE
65082: GREATEREQUAL
65083: IFFALSE 65091
65085: LD_INT 299
65087: DOUBLE
65088: LESSEQUAL
65089: IFTRUE 65093
65091: GO 65125
65093: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65094: LD_VAR 0 1
65098: PPUSH
65099: LD_VAR 0 2
65103: PPUSH
65104: LD_VAR 0 3
65108: PPUSH
65109: LD_VAR 0 4
65113: PPUSH
65114: LD_VAR 0 5
65118: PPUSH
65119: CALL 65613 0 5
65123: GO 65202
65125: LD_INT 300
65127: DOUBLE
65128: GREATEREQUAL
65129: IFFALSE 65137
65131: LD_INT 399
65133: DOUBLE
65134: LESSEQUAL
65135: IFTRUE 65139
65137: GO 65201
65139: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65140: LD_VAR 0 1
65144: PPUSH
65145: LD_VAR 0 2
65149: PPUSH
65150: LD_VAR 0 3
65154: PPUSH
65155: LD_VAR 0 4
65159: PPUSH
65160: LD_VAR 0 5
65164: PPUSH
65165: LD_VAR 0 6
65169: PPUSH
65170: LD_VAR 0 7
65174: PPUSH
65175: LD_VAR 0 8
65179: PPUSH
65180: LD_VAR 0 9
65184: PPUSH
65185: LD_VAR 0 10
65189: PPUSH
65190: LD_VAR 0 11
65194: PPUSH
65195: CALL 61775 0 11
65199: GO 65202
65201: POP
// end ;
65202: PPOPN 11
65204: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65205: LD_VAR 0 1
65209: PPUSH
65210: LD_VAR 0 2
65214: PPUSH
65215: LD_VAR 0 3
65219: PPUSH
65220: LD_VAR 0 4
65224: PPUSH
65225: LD_VAR 0 5
65229: PPUSH
65230: CALL 65349 0 5
// end ; end_of_file
65234: PPOPN 5
65236: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
65237: LD_INT 0
65239: PPUSH
65240: PPUSH
65241: PPUSH
65242: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
65243: LD_VAR 0 1
65247: PPUSH
65248: CALL_OW 264
65252: PUSH
65253: LD_INT 91
65255: EQUAL
65256: IFFALSE 65328
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
65258: LD_INT 68
65260: PPUSH
65261: LD_VAR 0 1
65265: PPUSH
65266: CALL_OW 255
65270: PPUSH
65271: CALL_OW 321
65275: PUSH
65276: LD_INT 2
65278: EQUAL
65279: IFFALSE 65291
// eff := 70 else
65281: LD_ADDR_VAR 0 4
65285: PUSH
65286: LD_INT 70
65288: ST_TO_ADDR
65289: GO 65299
// eff := 30 ;
65291: LD_ADDR_VAR 0 4
65295: PUSH
65296: LD_INT 30
65298: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
65299: LD_VAR 0 1
65303: PPUSH
65304: CALL_OW 250
65308: PPUSH
65309: LD_VAR 0 1
65313: PPUSH
65314: CALL_OW 251
65318: PPUSH
65319: LD_VAR 0 4
65323: PPUSH
65324: CALL_OW 495
// end ; end ;
65328: LD_VAR 0 2
65332: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
65333: LD_INT 0
65335: PPUSH
// end ;
65336: LD_VAR 0 4
65340: RET
// export function SOS_Command ( cmd ) ; begin
65341: LD_INT 0
65343: PPUSH
// end ;
65344: LD_VAR 0 2
65348: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
65349: LD_INT 0
65351: PPUSH
// end ;
65352: LD_VAR 0 6
65356: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
65357: LD_INT 0
65359: PPUSH
65360: PPUSH
// if not vehicle or not factory then
65361: LD_VAR 0 1
65365: NOT
65366: PUSH
65367: LD_VAR 0 2
65371: NOT
65372: OR
65373: IFFALSE 65377
// exit ;
65375: GO 65608
// if factoryWaypoints >= factory then
65377: LD_EXP 88
65381: PUSH
65382: LD_VAR 0 2
65386: GREATEREQUAL
65387: IFFALSE 65608
// if factoryWaypoints [ factory ] then
65389: LD_EXP 88
65393: PUSH
65394: LD_VAR 0 2
65398: ARRAY
65399: IFFALSE 65608
// begin if GetControl ( vehicle ) = control_manual then
65401: LD_VAR 0 1
65405: PPUSH
65406: CALL_OW 263
65410: PUSH
65411: LD_INT 1
65413: EQUAL
65414: IFFALSE 65495
// begin driver := IsDrivenBy ( vehicle ) ;
65416: LD_ADDR_VAR 0 4
65420: PUSH
65421: LD_VAR 0 1
65425: PPUSH
65426: CALL_OW 311
65430: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65431: LD_VAR 0 4
65435: PPUSH
65436: LD_EXP 88
65440: PUSH
65441: LD_VAR 0 2
65445: ARRAY
65446: PUSH
65447: LD_INT 3
65449: ARRAY
65450: PPUSH
65451: LD_EXP 88
65455: PUSH
65456: LD_VAR 0 2
65460: ARRAY
65461: PUSH
65462: LD_INT 4
65464: ARRAY
65465: PPUSH
65466: CALL_OW 171
// AddComExitVehicle ( driver ) ;
65470: LD_VAR 0 4
65474: PPUSH
65475: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
65479: LD_VAR 0 4
65483: PPUSH
65484: LD_VAR 0 2
65488: PPUSH
65489: CALL_OW 180
// end else
65493: GO 65608
// if GetControl ( vehicle ) = control_remote then
65495: LD_VAR 0 1
65499: PPUSH
65500: CALL_OW 263
65504: PUSH
65505: LD_INT 2
65507: EQUAL
65508: IFFALSE 65569
// begin wait ( 0 0$2 ) ;
65510: LD_INT 70
65512: PPUSH
65513: CALL_OW 67
// if Connect ( vehicle ) then
65517: LD_VAR 0 1
65521: PPUSH
65522: CALL 14733 0 1
65526: IFFALSE 65567
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65528: LD_VAR 0 1
65532: PPUSH
65533: LD_EXP 88
65537: PUSH
65538: LD_VAR 0 2
65542: ARRAY
65543: PUSH
65544: LD_INT 3
65546: ARRAY
65547: PPUSH
65548: LD_EXP 88
65552: PUSH
65553: LD_VAR 0 2
65557: ARRAY
65558: PUSH
65559: LD_INT 4
65561: ARRAY
65562: PPUSH
65563: CALL_OW 171
// end else
65567: GO 65608
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
65569: LD_VAR 0 1
65573: PPUSH
65574: LD_EXP 88
65578: PUSH
65579: LD_VAR 0 2
65583: ARRAY
65584: PUSH
65585: LD_INT 3
65587: ARRAY
65588: PPUSH
65589: LD_EXP 88
65593: PUSH
65594: LD_VAR 0 2
65598: ARRAY
65599: PUSH
65600: LD_INT 4
65602: ARRAY
65603: PPUSH
65604: CALL_OW 171
// end ; end ;
65608: LD_VAR 0 3
65612: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
65613: LD_INT 0
65615: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
65616: LD_VAR 0 1
65620: PUSH
65621: LD_INT 250
65623: EQUAL
65624: PUSH
65625: LD_VAR 0 2
65629: PPUSH
65630: CALL_OW 264
65634: PUSH
65635: LD_INT 81
65637: EQUAL
65638: AND
65639: IFFALSE 65660
// MinerPlaceMine ( unit , x , y ) ;
65641: LD_VAR 0 2
65645: PPUSH
65646: LD_VAR 0 4
65650: PPUSH
65651: LD_VAR 0 5
65655: PPUSH
65656: CALL 68650 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
65660: LD_VAR 0 1
65664: PUSH
65665: LD_INT 251
65667: EQUAL
65668: PUSH
65669: LD_VAR 0 2
65673: PPUSH
65674: CALL_OW 264
65678: PUSH
65679: LD_INT 81
65681: EQUAL
65682: AND
65683: IFFALSE 65704
// MinerDetonateMine ( unit , x , y ) ;
65685: LD_VAR 0 2
65689: PPUSH
65690: LD_VAR 0 4
65694: PPUSH
65695: LD_VAR 0 5
65699: PPUSH
65700: CALL 68925 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
65704: LD_VAR 0 1
65708: PUSH
65709: LD_INT 252
65711: EQUAL
65712: PUSH
65713: LD_VAR 0 2
65717: PPUSH
65718: CALL_OW 264
65722: PUSH
65723: LD_INT 81
65725: EQUAL
65726: AND
65727: IFFALSE 65748
// MinerCreateMinefield ( unit , x , y ) ;
65729: LD_VAR 0 2
65733: PPUSH
65734: LD_VAR 0 4
65738: PPUSH
65739: LD_VAR 0 5
65743: PPUSH
65744: CALL 69342 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
65748: LD_VAR 0 1
65752: PUSH
65753: LD_INT 253
65755: EQUAL
65756: PUSH
65757: LD_VAR 0 2
65761: PPUSH
65762: CALL_OW 257
65766: PUSH
65767: LD_INT 5
65769: EQUAL
65770: AND
65771: IFFALSE 65792
// ComBinocular ( unit , x , y ) ;
65773: LD_VAR 0 2
65777: PPUSH
65778: LD_VAR 0 4
65782: PPUSH
65783: LD_VAR 0 5
65787: PPUSH
65788: CALL 69711 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
65792: LD_VAR 0 1
65796: PUSH
65797: LD_INT 254
65799: EQUAL
65800: PUSH
65801: LD_VAR 0 2
65805: PPUSH
65806: CALL_OW 264
65810: PUSH
65811: LD_INT 99
65813: EQUAL
65814: AND
65815: PUSH
65816: LD_VAR 0 3
65820: PPUSH
65821: CALL_OW 263
65825: PUSH
65826: LD_INT 3
65828: EQUAL
65829: AND
65830: IFFALSE 65846
// HackDestroyVehicle ( unit , selectedUnit ) ;
65832: LD_VAR 0 2
65836: PPUSH
65837: LD_VAR 0 3
65841: PPUSH
65842: CALL 68014 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
65846: LD_VAR 0 1
65850: PUSH
65851: LD_INT 255
65853: EQUAL
65854: PUSH
65855: LD_VAR 0 2
65859: PPUSH
65860: CALL_OW 264
65864: PUSH
65865: LD_INT 14
65867: PUSH
65868: LD_INT 53
65870: PUSH
65871: EMPTY
65872: LIST
65873: LIST
65874: IN
65875: AND
65876: PUSH
65877: LD_VAR 0 4
65881: PPUSH
65882: LD_VAR 0 5
65886: PPUSH
65887: CALL_OW 488
65891: AND
65892: IFFALSE 65916
// CutTreeXYR ( unit , x , y , 12 ) ;
65894: LD_VAR 0 2
65898: PPUSH
65899: LD_VAR 0 4
65903: PPUSH
65904: LD_VAR 0 5
65908: PPUSH
65909: LD_INT 12
65911: PPUSH
65912: CALL 66011 0 4
// if cmd = 256 then
65916: LD_VAR 0 1
65920: PUSH
65921: LD_INT 256
65923: EQUAL
65924: IFFALSE 65945
// SetFactoryWaypoint ( unit , x , y ) ;
65926: LD_VAR 0 2
65930: PPUSH
65931: LD_VAR 0 4
65935: PPUSH
65936: LD_VAR 0 5
65940: PPUSH
65941: CALL 63763 0 3
// if cmd = 257 then
65945: LD_VAR 0 1
65949: PUSH
65950: LD_INT 257
65952: EQUAL
65953: IFFALSE 65974
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65955: LD_VAR 0 2
65959: PPUSH
65960: LD_VAR 0 4
65964: PPUSH
65965: LD_VAR 0 5
65969: PPUSH
65970: CALL 64125 0 3
// if cmd = 258 then
65974: LD_VAR 0 1
65978: PUSH
65979: LD_INT 258
65981: EQUAL
65982: IFFALSE 66006
// BurnTreeXYR ( unit , x , y , 8 ) ;
65984: LD_VAR 0 2
65988: PPUSH
65989: LD_VAR 0 4
65993: PPUSH
65994: LD_VAR 0 5
65998: PPUSH
65999: LD_INT 8
66001: PPUSH
66002: CALL 66405 0 4
// end ;
66006: LD_VAR 0 6
66010: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
66011: LD_INT 0
66013: PPUSH
66014: PPUSH
66015: PPUSH
66016: PPUSH
66017: PPUSH
66018: PPUSH
66019: PPUSH
66020: PPUSH
66021: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
66022: LD_VAR 0 1
66026: PPUSH
66027: CALL_OW 302
66031: NOT
66032: PUSH
66033: LD_VAR 0 2
66037: PPUSH
66038: LD_VAR 0 3
66042: PPUSH
66043: CALL_OW 488
66047: NOT
66048: OR
66049: PUSH
66050: LD_VAR 0 4
66054: NOT
66055: OR
66056: IFFALSE 66060
// exit ;
66058: GO 66400
// list := [ ] ;
66060: LD_ADDR_VAR 0 13
66064: PUSH
66065: EMPTY
66066: ST_TO_ADDR
// if x - r < 0 then
66067: LD_VAR 0 2
66071: PUSH
66072: LD_VAR 0 4
66076: MINUS
66077: PUSH
66078: LD_INT 0
66080: LESS
66081: IFFALSE 66093
// min_x := 0 else
66083: LD_ADDR_VAR 0 7
66087: PUSH
66088: LD_INT 0
66090: ST_TO_ADDR
66091: GO 66109
// min_x := x - r ;
66093: LD_ADDR_VAR 0 7
66097: PUSH
66098: LD_VAR 0 2
66102: PUSH
66103: LD_VAR 0 4
66107: MINUS
66108: ST_TO_ADDR
// if y - r < 0 then
66109: LD_VAR 0 3
66113: PUSH
66114: LD_VAR 0 4
66118: MINUS
66119: PUSH
66120: LD_INT 0
66122: LESS
66123: IFFALSE 66135
// min_y := 0 else
66125: LD_ADDR_VAR 0 8
66129: PUSH
66130: LD_INT 0
66132: ST_TO_ADDR
66133: GO 66151
// min_y := y - r ;
66135: LD_ADDR_VAR 0 8
66139: PUSH
66140: LD_VAR 0 3
66144: PUSH
66145: LD_VAR 0 4
66149: MINUS
66150: ST_TO_ADDR
// max_x := x + r ;
66151: LD_ADDR_VAR 0 9
66155: PUSH
66156: LD_VAR 0 2
66160: PUSH
66161: LD_VAR 0 4
66165: PLUS
66166: ST_TO_ADDR
// max_y := y + r ;
66167: LD_ADDR_VAR 0 10
66171: PUSH
66172: LD_VAR 0 3
66176: PUSH
66177: LD_VAR 0 4
66181: PLUS
66182: ST_TO_ADDR
// for _x = min_x to max_x do
66183: LD_ADDR_VAR 0 11
66187: PUSH
66188: DOUBLE
66189: LD_VAR 0 7
66193: DEC
66194: ST_TO_ADDR
66195: LD_VAR 0 9
66199: PUSH
66200: FOR_TO
66201: IFFALSE 66318
// for _y = min_y to max_y do
66203: LD_ADDR_VAR 0 12
66207: PUSH
66208: DOUBLE
66209: LD_VAR 0 8
66213: DEC
66214: ST_TO_ADDR
66215: LD_VAR 0 10
66219: PUSH
66220: FOR_TO
66221: IFFALSE 66314
// begin if not ValidHex ( _x , _y ) then
66223: LD_VAR 0 11
66227: PPUSH
66228: LD_VAR 0 12
66232: PPUSH
66233: CALL_OW 488
66237: NOT
66238: IFFALSE 66242
// continue ;
66240: GO 66220
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66242: LD_VAR 0 11
66246: PPUSH
66247: LD_VAR 0 12
66251: PPUSH
66252: CALL_OW 351
66256: PUSH
66257: LD_VAR 0 11
66261: PPUSH
66262: LD_VAR 0 12
66266: PPUSH
66267: CALL_OW 554
66271: AND
66272: IFFALSE 66312
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66274: LD_ADDR_VAR 0 13
66278: PUSH
66279: LD_VAR 0 13
66283: PPUSH
66284: LD_VAR 0 13
66288: PUSH
66289: LD_INT 1
66291: PLUS
66292: PPUSH
66293: LD_VAR 0 11
66297: PUSH
66298: LD_VAR 0 12
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PPUSH
66307: CALL_OW 2
66311: ST_TO_ADDR
// end ;
66312: GO 66220
66314: POP
66315: POP
66316: GO 66200
66318: POP
66319: POP
// if not list then
66320: LD_VAR 0 13
66324: NOT
66325: IFFALSE 66329
// exit ;
66327: GO 66400
// for i in list do
66329: LD_ADDR_VAR 0 6
66333: PUSH
66334: LD_VAR 0 13
66338: PUSH
66339: FOR_IN
66340: IFFALSE 66398
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
66342: LD_VAR 0 1
66346: PPUSH
66347: LD_STRING M
66349: PUSH
66350: LD_VAR 0 6
66354: PUSH
66355: LD_INT 1
66357: ARRAY
66358: PUSH
66359: LD_VAR 0 6
66363: PUSH
66364: LD_INT 2
66366: ARRAY
66367: PUSH
66368: LD_INT 0
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: LD_INT 0
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: PUSH
66389: EMPTY
66390: LIST
66391: PPUSH
66392: CALL_OW 447
66396: GO 66339
66398: POP
66399: POP
// end ;
66400: LD_VAR 0 5
66404: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
66405: LD_INT 0
66407: PPUSH
66408: PPUSH
66409: PPUSH
66410: PPUSH
66411: PPUSH
66412: PPUSH
66413: PPUSH
66414: PPUSH
66415: PPUSH
66416: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
66417: LD_VAR 0 1
66421: PPUSH
66422: CALL_OW 302
66426: NOT
66427: PUSH
66428: LD_VAR 0 2
66432: PPUSH
66433: LD_VAR 0 3
66437: PPUSH
66438: CALL_OW 488
66442: NOT
66443: OR
66444: PUSH
66445: LD_VAR 0 4
66449: NOT
66450: OR
66451: IFFALSE 66455
// exit ;
66453: GO 66968
// list := [ ] ;
66455: LD_ADDR_VAR 0 13
66459: PUSH
66460: EMPTY
66461: ST_TO_ADDR
// if x - r < 0 then
66462: LD_VAR 0 2
66466: PUSH
66467: LD_VAR 0 4
66471: MINUS
66472: PUSH
66473: LD_INT 0
66475: LESS
66476: IFFALSE 66488
// min_x := 0 else
66478: LD_ADDR_VAR 0 7
66482: PUSH
66483: LD_INT 0
66485: ST_TO_ADDR
66486: GO 66504
// min_x := x - r ;
66488: LD_ADDR_VAR 0 7
66492: PUSH
66493: LD_VAR 0 2
66497: PUSH
66498: LD_VAR 0 4
66502: MINUS
66503: ST_TO_ADDR
// if y - r < 0 then
66504: LD_VAR 0 3
66508: PUSH
66509: LD_VAR 0 4
66513: MINUS
66514: PUSH
66515: LD_INT 0
66517: LESS
66518: IFFALSE 66530
// min_y := 0 else
66520: LD_ADDR_VAR 0 8
66524: PUSH
66525: LD_INT 0
66527: ST_TO_ADDR
66528: GO 66546
// min_y := y - r ;
66530: LD_ADDR_VAR 0 8
66534: PUSH
66535: LD_VAR 0 3
66539: PUSH
66540: LD_VAR 0 4
66544: MINUS
66545: ST_TO_ADDR
// max_x := x + r ;
66546: LD_ADDR_VAR 0 9
66550: PUSH
66551: LD_VAR 0 2
66555: PUSH
66556: LD_VAR 0 4
66560: PLUS
66561: ST_TO_ADDR
// max_y := y + r ;
66562: LD_ADDR_VAR 0 10
66566: PUSH
66567: LD_VAR 0 3
66571: PUSH
66572: LD_VAR 0 4
66576: PLUS
66577: ST_TO_ADDR
// for _x = min_x to max_x do
66578: LD_ADDR_VAR 0 11
66582: PUSH
66583: DOUBLE
66584: LD_VAR 0 7
66588: DEC
66589: ST_TO_ADDR
66590: LD_VAR 0 9
66594: PUSH
66595: FOR_TO
66596: IFFALSE 66713
// for _y = min_y to max_y do
66598: LD_ADDR_VAR 0 12
66602: PUSH
66603: DOUBLE
66604: LD_VAR 0 8
66608: DEC
66609: ST_TO_ADDR
66610: LD_VAR 0 10
66614: PUSH
66615: FOR_TO
66616: IFFALSE 66709
// begin if not ValidHex ( _x , _y ) then
66618: LD_VAR 0 11
66622: PPUSH
66623: LD_VAR 0 12
66627: PPUSH
66628: CALL_OW 488
66632: NOT
66633: IFFALSE 66637
// continue ;
66635: GO 66615
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
66637: LD_VAR 0 11
66641: PPUSH
66642: LD_VAR 0 12
66646: PPUSH
66647: CALL_OW 351
66651: PUSH
66652: LD_VAR 0 11
66656: PPUSH
66657: LD_VAR 0 12
66661: PPUSH
66662: CALL_OW 554
66666: AND
66667: IFFALSE 66707
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
66669: LD_ADDR_VAR 0 13
66673: PUSH
66674: LD_VAR 0 13
66678: PPUSH
66679: LD_VAR 0 13
66683: PUSH
66684: LD_INT 1
66686: PLUS
66687: PPUSH
66688: LD_VAR 0 11
66692: PUSH
66693: LD_VAR 0 12
66697: PUSH
66698: EMPTY
66699: LIST
66700: LIST
66701: PPUSH
66702: CALL_OW 2
66706: ST_TO_ADDR
// end ;
66707: GO 66615
66709: POP
66710: POP
66711: GO 66595
66713: POP
66714: POP
// if not list then
66715: LD_VAR 0 13
66719: NOT
66720: IFFALSE 66724
// exit ;
66722: GO 66968
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
66724: LD_ADDR_VAR 0 13
66728: PUSH
66729: LD_VAR 0 1
66733: PPUSH
66734: LD_VAR 0 13
66738: PPUSH
66739: LD_INT 1
66741: PPUSH
66742: LD_INT 1
66744: PPUSH
66745: CALL 11875 0 4
66749: ST_TO_ADDR
// ComStop ( flame ) ;
66750: LD_VAR 0 1
66754: PPUSH
66755: CALL_OW 141
// for i in list do
66759: LD_ADDR_VAR 0 6
66763: PUSH
66764: LD_VAR 0 13
66768: PUSH
66769: FOR_IN
66770: IFFALSE 66801
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
66772: LD_VAR 0 1
66776: PPUSH
66777: LD_VAR 0 6
66781: PUSH
66782: LD_INT 1
66784: ARRAY
66785: PPUSH
66786: LD_VAR 0 6
66790: PUSH
66791: LD_INT 2
66793: ARRAY
66794: PPUSH
66795: CALL_OW 176
66799: GO 66769
66801: POP
66802: POP
// repeat wait ( 0 0$1 ) ;
66803: LD_INT 35
66805: PPUSH
66806: CALL_OW 67
// task := GetTaskList ( flame ) ;
66810: LD_ADDR_VAR 0 14
66814: PUSH
66815: LD_VAR 0 1
66819: PPUSH
66820: CALL_OW 437
66824: ST_TO_ADDR
// if not task then
66825: LD_VAR 0 14
66829: NOT
66830: IFFALSE 66834
// exit ;
66832: GO 66968
// if task [ 1 ] [ 1 ] <> | then
66834: LD_VAR 0 14
66838: PUSH
66839: LD_INT 1
66841: ARRAY
66842: PUSH
66843: LD_INT 1
66845: ARRAY
66846: PUSH
66847: LD_STRING |
66849: NONEQUAL
66850: IFFALSE 66854
// exit ;
66852: GO 66968
// _x := task [ 1 ] [ 2 ] ;
66854: LD_ADDR_VAR 0 11
66858: PUSH
66859: LD_VAR 0 14
66863: PUSH
66864: LD_INT 1
66866: ARRAY
66867: PUSH
66868: LD_INT 2
66870: ARRAY
66871: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
66872: LD_ADDR_VAR 0 12
66876: PUSH
66877: LD_VAR 0 14
66881: PUSH
66882: LD_INT 1
66884: ARRAY
66885: PUSH
66886: LD_INT 3
66888: ARRAY
66889: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
66890: LD_VAR 0 11
66894: PPUSH
66895: LD_VAR 0 12
66899: PPUSH
66900: CALL_OW 351
66904: NOT
66905: PUSH
66906: LD_VAR 0 11
66910: PPUSH
66911: LD_VAR 0 12
66915: PPUSH
66916: CALL_OW 554
66920: NOT
66921: OR
66922: IFFALSE 66956
// begin task := Delete ( task , 1 ) ;
66924: LD_ADDR_VAR 0 14
66928: PUSH
66929: LD_VAR 0 14
66933: PPUSH
66934: LD_INT 1
66936: PPUSH
66937: CALL_OW 3
66941: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
66942: LD_VAR 0 1
66946: PPUSH
66947: LD_VAR 0 14
66951: PPUSH
66952: CALL_OW 446
// end ; until not HasTask ( flame ) ;
66956: LD_VAR 0 1
66960: PPUSH
66961: CALL_OW 314
66965: NOT
66966: IFFALSE 66803
// end ;
66968: LD_VAR 0 5
66972: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
66973: LD_EXP 91
66977: NOT
66978: IFFALSE 67028
66980: GO 66982
66982: DISABLE
// begin initHack := true ;
66983: LD_ADDR_EXP 91
66987: PUSH
66988: LD_INT 1
66990: ST_TO_ADDR
// hackTanks := [ ] ;
66991: LD_ADDR_EXP 92
66995: PUSH
66996: EMPTY
66997: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
66998: LD_ADDR_EXP 93
67002: PUSH
67003: EMPTY
67004: ST_TO_ADDR
// hackLimit := 3 ;
67005: LD_ADDR_EXP 94
67009: PUSH
67010: LD_INT 3
67012: ST_TO_ADDR
// hackDist := 12 ;
67013: LD_ADDR_EXP 95
67017: PUSH
67018: LD_INT 12
67020: ST_TO_ADDR
// hackCounter := [ ] ;
67021: LD_ADDR_EXP 96
67025: PUSH
67026: EMPTY
67027: ST_TO_ADDR
// end ;
67028: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
67029: LD_EXP 91
67033: PUSH
67034: LD_INT 34
67036: PUSH
67037: LD_INT 99
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PPUSH
67044: CALL_OW 69
67048: AND
67049: IFFALSE 67302
67051: GO 67053
67053: DISABLE
67054: LD_INT 0
67056: PPUSH
67057: PPUSH
// begin enable ;
67058: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
67059: LD_ADDR_VAR 0 1
67063: PUSH
67064: LD_INT 34
67066: PUSH
67067: LD_INT 99
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PPUSH
67074: CALL_OW 69
67078: PUSH
67079: FOR_IN
67080: IFFALSE 67300
// begin if not i in hackTanks then
67082: LD_VAR 0 1
67086: PUSH
67087: LD_EXP 92
67091: IN
67092: NOT
67093: IFFALSE 67176
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
67095: LD_ADDR_EXP 92
67099: PUSH
67100: LD_EXP 92
67104: PPUSH
67105: LD_EXP 92
67109: PUSH
67110: LD_INT 1
67112: PLUS
67113: PPUSH
67114: LD_VAR 0 1
67118: PPUSH
67119: CALL_OW 1
67123: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
67124: LD_ADDR_EXP 93
67128: PUSH
67129: LD_EXP 93
67133: PPUSH
67134: LD_EXP 93
67138: PUSH
67139: LD_INT 1
67141: PLUS
67142: PPUSH
67143: EMPTY
67144: PPUSH
67145: CALL_OW 1
67149: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
67150: LD_ADDR_EXP 96
67154: PUSH
67155: LD_EXP 96
67159: PPUSH
67160: LD_EXP 96
67164: PUSH
67165: LD_INT 1
67167: PLUS
67168: PPUSH
67169: EMPTY
67170: PPUSH
67171: CALL_OW 1
67175: ST_TO_ADDR
// end ; if not IsOk ( i ) then
67176: LD_VAR 0 1
67180: PPUSH
67181: CALL_OW 302
67185: NOT
67186: IFFALSE 67199
// begin HackUnlinkAll ( i ) ;
67188: LD_VAR 0 1
67192: PPUSH
67193: CALL 67305 0 1
// continue ;
67197: GO 67079
// end ; HackCheckCapturedStatus ( i ) ;
67199: LD_VAR 0 1
67203: PPUSH
67204: CALL 67748 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
67208: LD_ADDR_VAR 0 2
67212: PUSH
67213: LD_INT 81
67215: PUSH
67216: LD_VAR 0 1
67220: PPUSH
67221: CALL_OW 255
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 33
67232: PUSH
67233: LD_INT 3
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 91
67242: PUSH
67243: LD_VAR 0 1
67247: PUSH
67248: LD_EXP 95
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 50
67260: PUSH
67261: EMPTY
67262: LIST
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: PPUSH
67270: CALL_OW 69
67274: ST_TO_ADDR
// if not tmp then
67275: LD_VAR 0 2
67279: NOT
67280: IFFALSE 67284
// continue ;
67282: GO 67079
// HackLink ( i , tmp ) ;
67284: LD_VAR 0 1
67288: PPUSH
67289: LD_VAR 0 2
67293: PPUSH
67294: CALL 67441 0 2
// end ;
67298: GO 67079
67300: POP
67301: POP
// end ;
67302: PPOPN 2
67304: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
67305: LD_INT 0
67307: PPUSH
67308: PPUSH
67309: PPUSH
// if not hack in hackTanks then
67310: LD_VAR 0 1
67314: PUSH
67315: LD_EXP 92
67319: IN
67320: NOT
67321: IFFALSE 67325
// exit ;
67323: GO 67436
// index := GetElementIndex ( hackTanks , hack ) ;
67325: LD_ADDR_VAR 0 4
67329: PUSH
67330: LD_EXP 92
67334: PPUSH
67335: LD_VAR 0 1
67339: PPUSH
67340: CALL 11172 0 2
67344: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
67345: LD_EXP 93
67349: PUSH
67350: LD_VAR 0 4
67354: ARRAY
67355: IFFALSE 67436
// begin for i in hackTanksCaptured [ index ] do
67357: LD_ADDR_VAR 0 3
67361: PUSH
67362: LD_EXP 93
67366: PUSH
67367: LD_VAR 0 4
67371: ARRAY
67372: PUSH
67373: FOR_IN
67374: IFFALSE 67400
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
67376: LD_VAR 0 3
67380: PUSH
67381: LD_INT 1
67383: ARRAY
67384: PPUSH
67385: LD_VAR 0 3
67389: PUSH
67390: LD_INT 2
67392: ARRAY
67393: PPUSH
67394: CALL_OW 235
67398: GO 67373
67400: POP
67401: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
67402: LD_ADDR_EXP 93
67406: PUSH
67407: LD_EXP 93
67411: PPUSH
67412: LD_VAR 0 4
67416: PPUSH
67417: EMPTY
67418: PPUSH
67419: CALL_OW 1
67423: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
67424: LD_VAR 0 1
67428: PPUSH
67429: LD_INT 0
67431: PPUSH
67432: CALL_OW 505
// end ; end ;
67436: LD_VAR 0 2
67440: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
67441: LD_INT 0
67443: PPUSH
67444: PPUSH
67445: PPUSH
// if not hack in hackTanks or not vehicles then
67446: LD_VAR 0 1
67450: PUSH
67451: LD_EXP 92
67455: IN
67456: NOT
67457: PUSH
67458: LD_VAR 0 2
67462: NOT
67463: OR
67464: IFFALSE 67468
// exit ;
67466: GO 67743
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
67468: LD_ADDR_VAR 0 2
67472: PUSH
67473: LD_VAR 0 1
67477: PPUSH
67478: LD_VAR 0 2
67482: PPUSH
67483: LD_INT 1
67485: PPUSH
67486: LD_INT 1
67488: PPUSH
67489: CALL 11822 0 4
67493: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
67494: LD_ADDR_VAR 0 5
67498: PUSH
67499: LD_EXP 92
67503: PPUSH
67504: LD_VAR 0 1
67508: PPUSH
67509: CALL 11172 0 2
67513: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
67514: LD_EXP 93
67518: PUSH
67519: LD_VAR 0 5
67523: ARRAY
67524: PUSH
67525: LD_EXP 94
67529: LESS
67530: IFFALSE 67719
// begin for i := 1 to vehicles do
67532: LD_ADDR_VAR 0 4
67536: PUSH
67537: DOUBLE
67538: LD_INT 1
67540: DEC
67541: ST_TO_ADDR
67542: LD_VAR 0 2
67546: PUSH
67547: FOR_TO
67548: IFFALSE 67717
// begin if hackTanksCaptured [ index ] = hackLimit then
67550: LD_EXP 93
67554: PUSH
67555: LD_VAR 0 5
67559: ARRAY
67560: PUSH
67561: LD_EXP 94
67565: EQUAL
67566: IFFALSE 67570
// break ;
67568: GO 67717
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
67570: LD_ADDR_EXP 96
67574: PUSH
67575: LD_EXP 96
67579: PPUSH
67580: LD_VAR 0 5
67584: PPUSH
67585: LD_EXP 96
67589: PUSH
67590: LD_VAR 0 5
67594: ARRAY
67595: PUSH
67596: LD_INT 1
67598: PLUS
67599: PPUSH
67600: CALL_OW 1
67604: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
67605: LD_ADDR_EXP 93
67609: PUSH
67610: LD_EXP 93
67614: PPUSH
67615: LD_VAR 0 5
67619: PUSH
67620: LD_EXP 93
67624: PUSH
67625: LD_VAR 0 5
67629: ARRAY
67630: PUSH
67631: LD_INT 1
67633: PLUS
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PPUSH
67639: LD_VAR 0 2
67643: PUSH
67644: LD_VAR 0 4
67648: ARRAY
67649: PUSH
67650: LD_VAR 0 2
67654: PUSH
67655: LD_VAR 0 4
67659: ARRAY
67660: PPUSH
67661: CALL_OW 255
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PPUSH
67670: CALL 11387 0 3
67674: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
67675: LD_VAR 0 2
67679: PUSH
67680: LD_VAR 0 4
67684: ARRAY
67685: PPUSH
67686: LD_VAR 0 1
67690: PPUSH
67691: CALL_OW 255
67695: PPUSH
67696: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
67700: LD_VAR 0 2
67704: PUSH
67705: LD_VAR 0 4
67709: ARRAY
67710: PPUSH
67711: CALL_OW 141
// end ;
67715: GO 67547
67717: POP
67718: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67719: LD_VAR 0 1
67723: PPUSH
67724: LD_EXP 93
67728: PUSH
67729: LD_VAR 0 5
67733: ARRAY
67734: PUSH
67735: LD_INT 0
67737: PLUS
67738: PPUSH
67739: CALL_OW 505
// end ;
67743: LD_VAR 0 3
67747: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
67748: LD_INT 0
67750: PPUSH
67751: PPUSH
67752: PPUSH
67753: PPUSH
// if not hack in hackTanks then
67754: LD_VAR 0 1
67758: PUSH
67759: LD_EXP 92
67763: IN
67764: NOT
67765: IFFALSE 67769
// exit ;
67767: GO 68009
// index := GetElementIndex ( hackTanks , hack ) ;
67769: LD_ADDR_VAR 0 4
67773: PUSH
67774: LD_EXP 92
67778: PPUSH
67779: LD_VAR 0 1
67783: PPUSH
67784: CALL 11172 0 2
67788: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
67789: LD_ADDR_VAR 0 3
67793: PUSH
67794: DOUBLE
67795: LD_EXP 93
67799: PUSH
67800: LD_VAR 0 4
67804: ARRAY
67805: INC
67806: ST_TO_ADDR
67807: LD_INT 1
67809: PUSH
67810: FOR_DOWNTO
67811: IFFALSE 67983
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
67813: LD_ADDR_VAR 0 5
67817: PUSH
67818: LD_EXP 93
67822: PUSH
67823: LD_VAR 0 4
67827: ARRAY
67828: PUSH
67829: LD_VAR 0 3
67833: ARRAY
67834: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
67835: LD_VAR 0 5
67839: PUSH
67840: LD_INT 1
67842: ARRAY
67843: PPUSH
67844: CALL_OW 302
67848: NOT
67849: PUSH
67850: LD_VAR 0 5
67854: PUSH
67855: LD_INT 1
67857: ARRAY
67858: PPUSH
67859: CALL_OW 255
67863: PUSH
67864: LD_VAR 0 1
67868: PPUSH
67869: CALL_OW 255
67873: NONEQUAL
67874: OR
67875: IFFALSE 67981
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
67877: LD_VAR 0 5
67881: PUSH
67882: LD_INT 1
67884: ARRAY
67885: PPUSH
67886: CALL_OW 305
67890: PUSH
67891: LD_VAR 0 5
67895: PUSH
67896: LD_INT 1
67898: ARRAY
67899: PPUSH
67900: CALL_OW 255
67904: PUSH
67905: LD_VAR 0 1
67909: PPUSH
67910: CALL_OW 255
67914: EQUAL
67915: AND
67916: IFFALSE 67940
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
67918: LD_VAR 0 5
67922: PUSH
67923: LD_INT 1
67925: ARRAY
67926: PPUSH
67927: LD_VAR 0 5
67931: PUSH
67932: LD_INT 2
67934: ARRAY
67935: PPUSH
67936: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
67940: LD_ADDR_EXP 93
67944: PUSH
67945: LD_EXP 93
67949: PPUSH
67950: LD_VAR 0 4
67954: PPUSH
67955: LD_EXP 93
67959: PUSH
67960: LD_VAR 0 4
67964: ARRAY
67965: PPUSH
67966: LD_VAR 0 3
67970: PPUSH
67971: CALL_OW 3
67975: PPUSH
67976: CALL_OW 1
67980: ST_TO_ADDR
// end ; end ;
67981: GO 67810
67983: POP
67984: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
67985: LD_VAR 0 1
67989: PPUSH
67990: LD_EXP 93
67994: PUSH
67995: LD_VAR 0 4
67999: ARRAY
68000: PUSH
68001: LD_INT 0
68003: PLUS
68004: PPUSH
68005: CALL_OW 505
// end ;
68009: LD_VAR 0 2
68013: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
68014: LD_INT 0
68016: PPUSH
68017: PPUSH
68018: PPUSH
68019: PPUSH
// if not hack in hackTanks then
68020: LD_VAR 0 1
68024: PUSH
68025: LD_EXP 92
68029: IN
68030: NOT
68031: IFFALSE 68035
// exit ;
68033: GO 68120
// index := GetElementIndex ( hackTanks , hack ) ;
68035: LD_ADDR_VAR 0 5
68039: PUSH
68040: LD_EXP 92
68044: PPUSH
68045: LD_VAR 0 1
68049: PPUSH
68050: CALL 11172 0 2
68054: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
68055: LD_ADDR_VAR 0 4
68059: PUSH
68060: DOUBLE
68061: LD_INT 1
68063: DEC
68064: ST_TO_ADDR
68065: LD_EXP 93
68069: PUSH
68070: LD_VAR 0 5
68074: ARRAY
68075: PUSH
68076: FOR_TO
68077: IFFALSE 68118
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
68079: LD_EXP 93
68083: PUSH
68084: LD_VAR 0 5
68088: ARRAY
68089: PUSH
68090: LD_VAR 0 4
68094: ARRAY
68095: PUSH
68096: LD_INT 1
68098: ARRAY
68099: PUSH
68100: LD_VAR 0 2
68104: EQUAL
68105: IFFALSE 68116
// KillUnit ( vehicle ) ;
68107: LD_VAR 0 2
68111: PPUSH
68112: CALL_OW 66
68116: GO 68076
68118: POP
68119: POP
// end ;
68120: LD_VAR 0 3
68124: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
68125: LD_EXP 97
68129: NOT
68130: IFFALSE 68165
68132: GO 68134
68134: DISABLE
// begin initMiner := true ;
68135: LD_ADDR_EXP 97
68139: PUSH
68140: LD_INT 1
68142: ST_TO_ADDR
// minersList := [ ] ;
68143: LD_ADDR_EXP 98
68147: PUSH
68148: EMPTY
68149: ST_TO_ADDR
// minerMinesList := [ ] ;
68150: LD_ADDR_EXP 99
68154: PUSH
68155: EMPTY
68156: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
68157: LD_ADDR_EXP 100
68161: PUSH
68162: LD_INT 5
68164: ST_TO_ADDR
// end ;
68165: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
68166: LD_EXP 97
68170: PUSH
68171: LD_INT 34
68173: PUSH
68174: LD_INT 81
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PPUSH
68181: CALL_OW 69
68185: AND
68186: IFFALSE 68647
68188: GO 68190
68190: DISABLE
68191: LD_INT 0
68193: PPUSH
68194: PPUSH
68195: PPUSH
68196: PPUSH
// begin enable ;
68197: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
68198: LD_ADDR_VAR 0 1
68202: PUSH
68203: LD_INT 34
68205: PUSH
68206: LD_INT 81
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PPUSH
68213: CALL_OW 69
68217: PUSH
68218: FOR_IN
68219: IFFALSE 68291
// begin if not i in minersList then
68221: LD_VAR 0 1
68225: PUSH
68226: LD_EXP 98
68230: IN
68231: NOT
68232: IFFALSE 68289
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
68234: LD_ADDR_EXP 98
68238: PUSH
68239: LD_EXP 98
68243: PPUSH
68244: LD_EXP 98
68248: PUSH
68249: LD_INT 1
68251: PLUS
68252: PPUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: CALL_OW 1
68262: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
68263: LD_ADDR_EXP 99
68267: PUSH
68268: LD_EXP 99
68272: PPUSH
68273: LD_EXP 99
68277: PUSH
68278: LD_INT 1
68280: PLUS
68281: PPUSH
68282: EMPTY
68283: PPUSH
68284: CALL_OW 1
68288: ST_TO_ADDR
// end end ;
68289: GO 68218
68291: POP
68292: POP
// for i := minerMinesList downto 1 do
68293: LD_ADDR_VAR 0 1
68297: PUSH
68298: DOUBLE
68299: LD_EXP 99
68303: INC
68304: ST_TO_ADDR
68305: LD_INT 1
68307: PUSH
68308: FOR_DOWNTO
68309: IFFALSE 68645
// begin if IsLive ( minersList [ i ] ) then
68311: LD_EXP 98
68315: PUSH
68316: LD_VAR 0 1
68320: ARRAY
68321: PPUSH
68322: CALL_OW 300
68326: IFFALSE 68354
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
68328: LD_EXP 98
68332: PUSH
68333: LD_VAR 0 1
68337: ARRAY
68338: PPUSH
68339: LD_EXP 99
68343: PUSH
68344: LD_VAR 0 1
68348: ARRAY
68349: PPUSH
68350: CALL_OW 505
// if not minerMinesList [ i ] then
68354: LD_EXP 99
68358: PUSH
68359: LD_VAR 0 1
68363: ARRAY
68364: NOT
68365: IFFALSE 68369
// continue ;
68367: GO 68308
// for j := minerMinesList [ i ] downto 1 do
68369: LD_ADDR_VAR 0 2
68373: PUSH
68374: DOUBLE
68375: LD_EXP 99
68379: PUSH
68380: LD_VAR 0 1
68384: ARRAY
68385: INC
68386: ST_TO_ADDR
68387: LD_INT 1
68389: PUSH
68390: FOR_DOWNTO
68391: IFFALSE 68641
// begin side := GetSide ( minersList [ i ] ) ;
68393: LD_ADDR_VAR 0 3
68397: PUSH
68398: LD_EXP 98
68402: PUSH
68403: LD_VAR 0 1
68407: ARRAY
68408: PPUSH
68409: CALL_OW 255
68413: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
68414: LD_ADDR_VAR 0 4
68418: PUSH
68419: LD_EXP 99
68423: PUSH
68424: LD_VAR 0 1
68428: ARRAY
68429: PUSH
68430: LD_VAR 0 2
68434: ARRAY
68435: PUSH
68436: LD_INT 1
68438: ARRAY
68439: PPUSH
68440: LD_EXP 99
68444: PUSH
68445: LD_VAR 0 1
68449: ARRAY
68450: PUSH
68451: LD_VAR 0 2
68455: ARRAY
68456: PUSH
68457: LD_INT 2
68459: ARRAY
68460: PPUSH
68461: CALL_OW 428
68465: ST_TO_ADDR
// if not tmp then
68466: LD_VAR 0 4
68470: NOT
68471: IFFALSE 68475
// continue ;
68473: GO 68390
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
68475: LD_VAR 0 4
68479: PUSH
68480: LD_INT 81
68482: PUSH
68483: LD_VAR 0 3
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PPUSH
68492: CALL_OW 69
68496: IN
68497: PUSH
68498: LD_EXP 99
68502: PUSH
68503: LD_VAR 0 1
68507: ARRAY
68508: PUSH
68509: LD_VAR 0 2
68513: ARRAY
68514: PUSH
68515: LD_INT 1
68517: ARRAY
68518: PPUSH
68519: LD_EXP 99
68523: PUSH
68524: LD_VAR 0 1
68528: ARRAY
68529: PUSH
68530: LD_VAR 0 2
68534: ARRAY
68535: PUSH
68536: LD_INT 2
68538: ARRAY
68539: PPUSH
68540: CALL_OW 458
68544: AND
68545: IFFALSE 68639
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
68547: LD_EXP 99
68551: PUSH
68552: LD_VAR 0 1
68556: ARRAY
68557: PUSH
68558: LD_VAR 0 2
68562: ARRAY
68563: PUSH
68564: LD_INT 1
68566: ARRAY
68567: PPUSH
68568: LD_EXP 99
68572: PUSH
68573: LD_VAR 0 1
68577: ARRAY
68578: PUSH
68579: LD_VAR 0 2
68583: ARRAY
68584: PUSH
68585: LD_INT 2
68587: ARRAY
68588: PPUSH
68589: LD_VAR 0 3
68593: PPUSH
68594: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
68598: LD_ADDR_EXP 99
68602: PUSH
68603: LD_EXP 99
68607: PPUSH
68608: LD_VAR 0 1
68612: PPUSH
68613: LD_EXP 99
68617: PUSH
68618: LD_VAR 0 1
68622: ARRAY
68623: PPUSH
68624: LD_VAR 0 2
68628: PPUSH
68629: CALL_OW 3
68633: PPUSH
68634: CALL_OW 1
68638: ST_TO_ADDR
// end ; end ;
68639: GO 68390
68641: POP
68642: POP
// end ;
68643: GO 68308
68645: POP
68646: POP
// end ;
68647: PPOPN 4
68649: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
68650: LD_INT 0
68652: PPUSH
68653: PPUSH
// result := false ;
68654: LD_ADDR_VAR 0 4
68658: PUSH
68659: LD_INT 0
68661: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
68662: LD_VAR 0 1
68666: PPUSH
68667: CALL_OW 264
68671: PUSH
68672: LD_INT 81
68674: EQUAL
68675: NOT
68676: IFFALSE 68680
// exit ;
68678: GO 68920
// index := GetElementIndex ( minersList , unit ) ;
68680: LD_ADDR_VAR 0 5
68684: PUSH
68685: LD_EXP 98
68689: PPUSH
68690: LD_VAR 0 1
68694: PPUSH
68695: CALL 11172 0 2
68699: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
68700: LD_EXP 99
68704: PUSH
68705: LD_VAR 0 5
68709: ARRAY
68710: PUSH
68711: LD_EXP 100
68715: GREATEREQUAL
68716: IFFALSE 68720
// exit ;
68718: GO 68920
// ComMoveXY ( unit , x , y ) ;
68720: LD_VAR 0 1
68724: PPUSH
68725: LD_VAR 0 2
68729: PPUSH
68730: LD_VAR 0 3
68734: PPUSH
68735: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68739: LD_INT 35
68741: PPUSH
68742: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
68746: LD_VAR 0 1
68750: PPUSH
68751: LD_VAR 0 2
68755: PPUSH
68756: LD_VAR 0 3
68760: PPUSH
68761: CALL 42913 0 3
68765: NOT
68766: PUSH
68767: LD_VAR 0 1
68771: PPUSH
68772: CALL_OW 314
68776: AND
68777: IFFALSE 68781
// exit ;
68779: GO 68920
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
68781: LD_VAR 0 2
68785: PPUSH
68786: LD_VAR 0 3
68790: PPUSH
68791: CALL_OW 428
68795: PUSH
68796: LD_VAR 0 1
68800: EQUAL
68801: PUSH
68802: LD_VAR 0 1
68806: PPUSH
68807: CALL_OW 314
68811: NOT
68812: AND
68813: IFFALSE 68739
// PlaySoundXY ( x , y , PlantMine ) ;
68815: LD_VAR 0 2
68819: PPUSH
68820: LD_VAR 0 3
68824: PPUSH
68825: LD_STRING PlantMine
68827: PPUSH
68828: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
68832: LD_VAR 0 2
68836: PPUSH
68837: LD_VAR 0 3
68841: PPUSH
68842: LD_VAR 0 1
68846: PPUSH
68847: CALL_OW 255
68851: PPUSH
68852: LD_INT 0
68854: PPUSH
68855: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
68859: LD_ADDR_EXP 99
68863: PUSH
68864: LD_EXP 99
68868: PPUSH
68869: LD_VAR 0 5
68873: PUSH
68874: LD_EXP 99
68878: PUSH
68879: LD_VAR 0 5
68883: ARRAY
68884: PUSH
68885: LD_INT 1
68887: PLUS
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PPUSH
68893: LD_VAR 0 2
68897: PUSH
68898: LD_VAR 0 3
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PPUSH
68907: CALL 11387 0 3
68911: ST_TO_ADDR
// result := true ;
68912: LD_ADDR_VAR 0 4
68916: PUSH
68917: LD_INT 1
68919: ST_TO_ADDR
// end ;
68920: LD_VAR 0 4
68924: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
68925: LD_INT 0
68927: PPUSH
68928: PPUSH
68929: PPUSH
// if not unit in minersList then
68930: LD_VAR 0 1
68934: PUSH
68935: LD_EXP 98
68939: IN
68940: NOT
68941: IFFALSE 68945
// exit ;
68943: GO 69337
// index := GetElementIndex ( minersList , unit ) ;
68945: LD_ADDR_VAR 0 6
68949: PUSH
68950: LD_EXP 98
68954: PPUSH
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL 11172 0 2
68964: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
68965: LD_ADDR_VAR 0 5
68969: PUSH
68970: DOUBLE
68971: LD_EXP 99
68975: PUSH
68976: LD_VAR 0 6
68980: ARRAY
68981: INC
68982: ST_TO_ADDR
68983: LD_INT 1
68985: PUSH
68986: FOR_DOWNTO
68987: IFFALSE 69148
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
68989: LD_EXP 99
68993: PUSH
68994: LD_VAR 0 6
68998: ARRAY
68999: PUSH
69000: LD_VAR 0 5
69004: ARRAY
69005: PUSH
69006: LD_INT 1
69008: ARRAY
69009: PUSH
69010: LD_VAR 0 2
69014: EQUAL
69015: PUSH
69016: LD_EXP 99
69020: PUSH
69021: LD_VAR 0 6
69025: ARRAY
69026: PUSH
69027: LD_VAR 0 5
69031: ARRAY
69032: PUSH
69033: LD_INT 2
69035: ARRAY
69036: PUSH
69037: LD_VAR 0 3
69041: EQUAL
69042: AND
69043: IFFALSE 69146
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69045: LD_EXP 99
69049: PUSH
69050: LD_VAR 0 6
69054: ARRAY
69055: PUSH
69056: LD_VAR 0 5
69060: ARRAY
69061: PUSH
69062: LD_INT 1
69064: ARRAY
69065: PPUSH
69066: LD_EXP 99
69070: PUSH
69071: LD_VAR 0 6
69075: ARRAY
69076: PUSH
69077: LD_VAR 0 5
69081: ARRAY
69082: PUSH
69083: LD_INT 2
69085: ARRAY
69086: PPUSH
69087: LD_VAR 0 1
69091: PPUSH
69092: CALL_OW 255
69096: PPUSH
69097: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69101: LD_ADDR_EXP 99
69105: PUSH
69106: LD_EXP 99
69110: PPUSH
69111: LD_VAR 0 6
69115: PPUSH
69116: LD_EXP 99
69120: PUSH
69121: LD_VAR 0 6
69125: ARRAY
69126: PPUSH
69127: LD_VAR 0 5
69131: PPUSH
69132: CALL_OW 3
69136: PPUSH
69137: CALL_OW 1
69141: ST_TO_ADDR
// exit ;
69142: POP
69143: POP
69144: GO 69337
// end ; end ;
69146: GO 68986
69148: POP
69149: POP
// for i := minerMinesList [ index ] downto 1 do
69150: LD_ADDR_VAR 0 5
69154: PUSH
69155: DOUBLE
69156: LD_EXP 99
69160: PUSH
69161: LD_VAR 0 6
69165: ARRAY
69166: INC
69167: ST_TO_ADDR
69168: LD_INT 1
69170: PUSH
69171: FOR_DOWNTO
69172: IFFALSE 69335
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
69174: LD_EXP 99
69178: PUSH
69179: LD_VAR 0 6
69183: ARRAY
69184: PUSH
69185: LD_VAR 0 5
69189: ARRAY
69190: PUSH
69191: LD_INT 1
69193: ARRAY
69194: PPUSH
69195: LD_EXP 99
69199: PUSH
69200: LD_VAR 0 6
69204: ARRAY
69205: PUSH
69206: LD_VAR 0 5
69210: ARRAY
69211: PUSH
69212: LD_INT 2
69214: ARRAY
69215: PPUSH
69216: LD_VAR 0 2
69220: PPUSH
69221: LD_VAR 0 3
69225: PPUSH
69226: CALL_OW 298
69230: PUSH
69231: LD_INT 6
69233: LESS
69234: IFFALSE 69333
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
69236: LD_EXP 99
69240: PUSH
69241: LD_VAR 0 6
69245: ARRAY
69246: PUSH
69247: LD_VAR 0 5
69251: ARRAY
69252: PUSH
69253: LD_INT 1
69255: ARRAY
69256: PPUSH
69257: LD_EXP 99
69261: PUSH
69262: LD_VAR 0 6
69266: ARRAY
69267: PUSH
69268: LD_VAR 0 5
69272: ARRAY
69273: PUSH
69274: LD_INT 2
69276: ARRAY
69277: PPUSH
69278: LD_VAR 0 1
69282: PPUSH
69283: CALL_OW 255
69287: PPUSH
69288: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
69292: LD_ADDR_EXP 99
69296: PUSH
69297: LD_EXP 99
69301: PPUSH
69302: LD_VAR 0 6
69306: PPUSH
69307: LD_EXP 99
69311: PUSH
69312: LD_VAR 0 6
69316: ARRAY
69317: PPUSH
69318: LD_VAR 0 5
69322: PPUSH
69323: CALL_OW 3
69327: PPUSH
69328: CALL_OW 1
69332: ST_TO_ADDR
// end ; end ;
69333: GO 69171
69335: POP
69336: POP
// end ;
69337: LD_VAR 0 4
69341: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
69342: LD_INT 0
69344: PPUSH
69345: PPUSH
69346: PPUSH
69347: PPUSH
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
69353: LD_VAR 0 1
69357: PPUSH
69358: CALL_OW 264
69362: PUSH
69363: LD_INT 81
69365: EQUAL
69366: NOT
69367: PUSH
69368: LD_VAR 0 1
69372: PUSH
69373: LD_EXP 98
69377: IN
69378: NOT
69379: OR
69380: IFFALSE 69384
// exit ;
69382: GO 69706
// index := GetElementIndex ( minersList , unit ) ;
69384: LD_ADDR_VAR 0 6
69388: PUSH
69389: LD_EXP 98
69393: PPUSH
69394: LD_VAR 0 1
69398: PPUSH
69399: CALL 11172 0 2
69403: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
69404: LD_ADDR_VAR 0 8
69408: PUSH
69409: LD_EXP 100
69413: PUSH
69414: LD_EXP 99
69418: PUSH
69419: LD_VAR 0 6
69423: ARRAY
69424: MINUS
69425: ST_TO_ADDR
// if not minesFreeAmount then
69426: LD_VAR 0 8
69430: NOT
69431: IFFALSE 69435
// exit ;
69433: GO 69706
// tmp := [ ] ;
69435: LD_ADDR_VAR 0 7
69439: PUSH
69440: EMPTY
69441: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
69442: LD_ADDR_VAR 0 5
69446: PUSH
69447: DOUBLE
69448: LD_INT 1
69450: DEC
69451: ST_TO_ADDR
69452: LD_VAR 0 8
69456: PUSH
69457: FOR_TO
69458: IFFALSE 69653
// begin _d := rand ( 0 , 5 ) ;
69460: LD_ADDR_VAR 0 11
69464: PUSH
69465: LD_INT 0
69467: PPUSH
69468: LD_INT 5
69470: PPUSH
69471: CALL_OW 12
69475: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
69476: LD_ADDR_VAR 0 12
69480: PUSH
69481: LD_INT 2
69483: PPUSH
69484: LD_INT 6
69486: PPUSH
69487: CALL_OW 12
69491: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
69492: LD_ADDR_VAR 0 9
69496: PUSH
69497: LD_VAR 0 2
69501: PPUSH
69502: LD_VAR 0 11
69506: PPUSH
69507: LD_VAR 0 12
69511: PPUSH
69512: CALL_OW 272
69516: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
69517: LD_ADDR_VAR 0 10
69521: PUSH
69522: LD_VAR 0 3
69526: PPUSH
69527: LD_VAR 0 11
69531: PPUSH
69532: LD_VAR 0 12
69536: PPUSH
69537: CALL_OW 273
69541: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
69542: LD_VAR 0 9
69546: PPUSH
69547: LD_VAR 0 10
69551: PPUSH
69552: CALL_OW 488
69556: PUSH
69557: LD_VAR 0 9
69561: PUSH
69562: LD_VAR 0 10
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_VAR 0 7
69575: IN
69576: NOT
69577: AND
69578: PUSH
69579: LD_VAR 0 9
69583: PPUSH
69584: LD_VAR 0 10
69588: PPUSH
69589: CALL_OW 458
69593: NOT
69594: AND
69595: IFFALSE 69637
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
69597: LD_ADDR_VAR 0 7
69601: PUSH
69602: LD_VAR 0 7
69606: PPUSH
69607: LD_VAR 0 7
69611: PUSH
69612: LD_INT 1
69614: PLUS
69615: PPUSH
69616: LD_VAR 0 9
69620: PUSH
69621: LD_VAR 0 10
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PPUSH
69630: CALL_OW 1
69634: ST_TO_ADDR
69635: GO 69651
// i := i - 1 ;
69637: LD_ADDR_VAR 0 5
69641: PUSH
69642: LD_VAR 0 5
69646: PUSH
69647: LD_INT 1
69649: MINUS
69650: ST_TO_ADDR
// end ;
69651: GO 69457
69653: POP
69654: POP
// for i in tmp do
69655: LD_ADDR_VAR 0 5
69659: PUSH
69660: LD_VAR 0 7
69664: PUSH
69665: FOR_IN
69666: IFFALSE 69704
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
69668: LD_VAR 0 1
69672: PPUSH
69673: LD_VAR 0 5
69677: PUSH
69678: LD_INT 1
69680: ARRAY
69681: PPUSH
69682: LD_VAR 0 5
69686: PUSH
69687: LD_INT 2
69689: ARRAY
69690: PPUSH
69691: CALL 68650 0 3
69695: NOT
69696: IFFALSE 69702
// exit ;
69698: POP
69699: POP
69700: GO 69706
69702: GO 69665
69704: POP
69705: POP
// end ;
69706: LD_VAR 0 4
69710: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
69711: LD_INT 0
69713: PPUSH
69714: PPUSH
69715: PPUSH
69716: PPUSH
69717: PPUSH
69718: PPUSH
69719: PPUSH
// if not GetClass ( unit ) = class_sniper then
69720: LD_VAR 0 1
69724: PPUSH
69725: CALL_OW 257
69729: PUSH
69730: LD_INT 5
69732: EQUAL
69733: NOT
69734: IFFALSE 69738
// exit ;
69736: GO 70126
// dist := 8 ;
69738: LD_ADDR_VAR 0 5
69742: PUSH
69743: LD_INT 8
69745: ST_TO_ADDR
// viewRange := 12 ;
69746: LD_ADDR_VAR 0 7
69750: PUSH
69751: LD_INT 12
69753: ST_TO_ADDR
// side := GetSide ( unit ) ;
69754: LD_ADDR_VAR 0 6
69758: PUSH
69759: LD_VAR 0 1
69763: PPUSH
69764: CALL_OW 255
69768: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
69769: LD_INT 61
69771: PPUSH
69772: LD_VAR 0 6
69776: PPUSH
69777: CALL_OW 321
69781: PUSH
69782: LD_INT 2
69784: EQUAL
69785: IFFALSE 69795
// viewRange := 16 ;
69787: LD_ADDR_VAR 0 7
69791: PUSH
69792: LD_INT 16
69794: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
69795: LD_VAR 0 1
69799: PPUSH
69800: LD_VAR 0 2
69804: PPUSH
69805: LD_VAR 0 3
69809: PPUSH
69810: CALL_OW 297
69814: PUSH
69815: LD_VAR 0 5
69819: GREATER
69820: IFFALSE 69899
// begin ComMoveXY ( unit , x , y ) ;
69822: LD_VAR 0 1
69826: PPUSH
69827: LD_VAR 0 2
69831: PPUSH
69832: LD_VAR 0 3
69836: PPUSH
69837: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
69841: LD_INT 35
69843: PPUSH
69844: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
69848: LD_VAR 0 1
69852: PPUSH
69853: LD_VAR 0 2
69857: PPUSH
69858: LD_VAR 0 3
69862: PPUSH
69863: CALL 42913 0 3
69867: NOT
69868: IFFALSE 69872
// exit ;
69870: GO 70126
// until GetDistUnitXY ( unit , x , y ) < dist ;
69872: LD_VAR 0 1
69876: PPUSH
69877: LD_VAR 0 2
69881: PPUSH
69882: LD_VAR 0 3
69886: PPUSH
69887: CALL_OW 297
69891: PUSH
69892: LD_VAR 0 5
69896: LESS
69897: IFFALSE 69841
// end ; ComTurnXY ( unit , x , y ) ;
69899: LD_VAR 0 1
69903: PPUSH
69904: LD_VAR 0 2
69908: PPUSH
69909: LD_VAR 0 3
69913: PPUSH
69914: CALL_OW 118
// wait ( 5 ) ;
69918: LD_INT 5
69920: PPUSH
69921: CALL_OW 67
// _d := GetDir ( unit ) ;
69925: LD_ADDR_VAR 0 10
69929: PUSH
69930: LD_VAR 0 1
69934: PPUSH
69935: CALL_OW 254
69939: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
69940: LD_ADDR_VAR 0 8
69944: PUSH
69945: LD_VAR 0 1
69949: PPUSH
69950: CALL_OW 250
69954: PPUSH
69955: LD_VAR 0 10
69959: PPUSH
69960: LD_VAR 0 5
69964: PPUSH
69965: CALL_OW 272
69969: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
69970: LD_ADDR_VAR 0 9
69974: PUSH
69975: LD_VAR 0 1
69979: PPUSH
69980: CALL_OW 251
69984: PPUSH
69985: LD_VAR 0 10
69989: PPUSH
69990: LD_VAR 0 5
69994: PPUSH
69995: CALL_OW 273
69999: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
70000: LD_VAR 0 8
70004: PPUSH
70005: LD_VAR 0 9
70009: PPUSH
70010: CALL_OW 488
70014: NOT
70015: IFFALSE 70019
// exit ;
70017: GO 70126
// ComAnimCustom ( unit , 1 ) ;
70019: LD_VAR 0 1
70023: PPUSH
70024: LD_INT 1
70026: PPUSH
70027: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
70031: LD_VAR 0 8
70035: PPUSH
70036: LD_VAR 0 9
70040: PPUSH
70041: LD_VAR 0 6
70045: PPUSH
70046: LD_VAR 0 7
70050: PPUSH
70051: CALL_OW 330
// repeat wait ( 1 ) ;
70055: LD_INT 1
70057: PPUSH
70058: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
70062: LD_VAR 0 1
70066: PPUSH
70067: CALL_OW 316
70071: PUSH
70072: LD_VAR 0 1
70076: PPUSH
70077: CALL_OW 314
70081: OR
70082: PUSH
70083: LD_VAR 0 1
70087: PPUSH
70088: CALL_OW 302
70092: NOT
70093: OR
70094: PUSH
70095: LD_VAR 0 1
70099: PPUSH
70100: CALL_OW 301
70104: OR
70105: IFFALSE 70055
// RemoveSeeing ( _x , _y , side ) ;
70107: LD_VAR 0 8
70111: PPUSH
70112: LD_VAR 0 9
70116: PPUSH
70117: LD_VAR 0 6
70121: PPUSH
70122: CALL_OW 331
// end ;
70126: LD_VAR 0 4
70130: RET
