// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3746 0 0
// CreateNature ;
  12: CALL 3617 0 0
// Action ;
  16: CALL 3888 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6338 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6338 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6338 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6338 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6338 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6338 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6338 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6338 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6338 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6338 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6338 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6338 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6338 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6338 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6338 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6338 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 43806 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11353 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14444 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11353 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 42723 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11353 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 43806 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 13
3195: PPUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 70
3210: AND
3211: IFFALSE 3614
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
// begin tmp := [ ] ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// for i := 1 to 3 do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 3
3240: PUSH
3241: FOR_TO
3242: IFFALSE 3350
// begin uc_side := 3 ;
3244: LD_ADDR_OWVAR 20
3248: PUSH
3249: LD_INT 3
3251: ST_TO_ADDR
// uc_nation := nation_russian ;
3252: LD_ADDR_OWVAR 21
3256: PUSH
3257: LD_INT 3
3259: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3260: LD_INT 0
3262: PPUSH
3263: LD_INT 6
3265: PUSH
3266: LD_INT 7
3268: PUSH
3269: LD_INT 8
3271: PUSH
3272: LD_INT 9
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: LD_OWVAR 67
3285: ARRAY
3286: PPUSH
3287: CALL_OW 381
// un := CreateHuman ;
3291: LD_ADDR_VAR 0 2
3295: PUSH
3296: CALL_OW 44
3300: ST_TO_ADDR
// SetClass ( un , class_bazooker ) ;
3301: LD_VAR 0 2
3305: PPUSH
3306: LD_INT 9
3308: PPUSH
3309: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3313: LD_VAR 0 2
3317: PPUSH
3318: LD_INT 12
3320: PPUSH
3321: LD_INT 0
3323: PPUSH
3324: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3328: LD_ADDR_VAR 0 3
3332: PUSH
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_VAR 0 2
3342: PPUSH
3343: CALL 43806 0 2
3347: ST_TO_ADDR
// end ;
3348: GO 3241
3350: POP
3351: POP
// for i := 1 to 4 do
3352: LD_ADDR_VAR 0 1
3356: PUSH
3357: DOUBLE
3358: LD_INT 1
3360: DEC
3361: ST_TO_ADDR
3362: LD_INT 4
3364: PUSH
3365: FOR_TO
3366: IFFALSE 3536
// begin uc_side := 3 ;
3368: LD_ADDR_OWVAR 20
3372: PUSH
3373: LD_INT 3
3375: ST_TO_ADDR
// uc_nation := nation_russian ;
3376: LD_ADDR_OWVAR 21
3380: PUSH
3381: LD_INT 3
3383: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_INT 6
3389: PUSH
3390: LD_INT 7
3392: PUSH
3393: LD_INT 8
3395: PUSH
3396: LD_INT 9
3398: PUSH
3399: EMPTY
3400: LIST
3401: LIST
3402: LIST
3403: LIST
3404: PUSH
3405: LD_OWVAR 67
3409: ARRAY
3410: PPUSH
3411: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3415: LD_INT 22
3417: PPUSH
3418: LD_INT 3
3420: PPUSH
3421: LD_INT 1
3423: PPUSH
3424: LD_INT 43
3426: PUSH
3427: LD_INT 44
3429: PUSH
3430: LD_INT 44
3432: PUSH
3433: LD_INT 45
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: LIST
3440: LIST
3441: PUSH
3442: LD_VAR 0 1
3446: PUSH
3447: LD_INT 4
3449: MOD
3450: PUSH
3451: LD_INT 1
3453: PLUS
3454: ARRAY
3455: PPUSH
3456: LD_INT 100
3458: PPUSH
3459: CALL 11353 0 5
// un := CreateVehicle ;
3463: LD_ADDR_VAR 0 2
3467: PUSH
3468: CALL_OW 45
3472: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3473: LD_VAR 0 2
3477: PPUSH
3478: LD_INT 4
3480: PPUSH
3481: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3485: LD_VAR 0 2
3489: PPUSH
3490: LD_INT 3
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3500: CALL_OW 44
3504: PPUSH
3505: LD_VAR 0 2
3509: PPUSH
3510: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3514: LD_ADDR_VAR 0 3
3518: PUSH
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_VAR 0 2
3528: PPUSH
3529: CALL 43806 0 2
3533: ST_TO_ADDR
// end ;
3534: GO 3365
3536: POP
3537: POP
// repeat wait ( 0 0$1 ) ;
3538: LD_INT 35
3540: PPUSH
3541: CALL_OW 67
// for i in tmp do
3545: LD_ADDR_VAR 0 1
3549: PUSH
3550: LD_VAR 0 3
3554: PUSH
3555: FOR_IN
3556: IFFALSE 3594
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: LD_INT 22
3565: PUSH
3566: LD_INT 2
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PPUSH
3573: CALL_OW 69
3577: PPUSH
3578: LD_VAR 0 1
3582: PPUSH
3583: CALL_OW 74
3587: PPUSH
3588: CALL_OW 115
3592: GO 3555
3594: POP
3595: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3596: LD_VAR 0 3
3600: PPUSH
3601: LD_INT 50
3603: PUSH
3604: EMPTY
3605: LIST
3606: PPUSH
3607: CALL_OW 72
3611: NOT
3612: IFFALSE 3538
// end ; end_of_file
3614: PPOPN 3
3616: END
// export function CreateNature ; var i ; begin
3617: LD_INT 0
3619: PPUSH
3620: PPUSH
// PrepareTiger ( 0 ) ;
3621: LD_INT 0
3623: PPUSH
3624: CALL 40194 0 1
// for i := 1 to 2 do
3628: LD_ADDR_VAR 0 2
3632: PUSH
3633: DOUBLE
3634: LD_INT 1
3636: DEC
3637: ST_TO_ADDR
3638: LD_INT 2
3640: PUSH
3641: FOR_TO
3642: IFFALSE 3661
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3644: CALL_OW 44
3648: PPUSH
3649: LD_INT 4
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
3659: GO 3641
3661: POP
3662: POP
// PrepareBird ;
3663: CALL 40375 0 0
// for i := 1 to 3 do
3667: LD_ADDR_VAR 0 2
3671: PUSH
3672: DOUBLE
3673: LD_INT 1
3675: DEC
3676: ST_TO_ADDR
3677: LD_INT 3
3679: PUSH
3680: FOR_TO
3681: IFFALSE 3700
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3683: CALL_OW 44
3687: PPUSH
3688: LD_INT 4
3690: PPUSH
3691: LD_INT 0
3693: PPUSH
3694: CALL_OW 49
3698: GO 3680
3700: POP
3701: POP
// PrepareFrog ;
3702: CALL 40295 0 0
// for i := 1 to 3 do
3706: LD_ADDR_VAR 0 2
3710: PUSH
3711: DOUBLE
3712: LD_INT 1
3714: DEC
3715: ST_TO_ADDR
3716: LD_INT 3
3718: PUSH
3719: FOR_TO
3720: IFFALSE 3739
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3722: CALL_OW 44
3726: PPUSH
3727: LD_INT 5
3729: PPUSH
3730: LD_INT 0
3732: PPUSH
3733: CALL_OW 49
3737: GO 3719
3739: POP
3740: POP
// end ;
3741: LD_VAR 0 1
3745: RET
// export function LoadTech ; var i , tmp ; begin
3746: LD_INT 0
3748: PPUSH
3749: PPUSH
3750: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: LD_STRING 09_tech
3758: PPUSH
3759: EMPTY
3760: PPUSH
3761: CALL_OW 30
3765: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3766: LD_ADDR_VAR 0 2
3770: PUSH
3771: DOUBLE
3772: LD_INT 1
3774: DEC
3775: ST_TO_ADDR
3776: LD_VAR 0 3
3780: PPUSH
3781: CALL 8440 0 1
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3814
// SetTech ( i , 2 , tmp [ i ] ) ;
3789: LD_VAR 0 2
3793: PPUSH
3794: LD_INT 2
3796: PPUSH
3797: LD_VAR 0 3
3801: PUSH
3802: LD_VAR 0 2
3806: ARRAY
3807: PPUSH
3808: CALL_OW 322
3812: GO 3786
3814: POP
3815: POP
// end ; end_of_file
3816: LD_VAR 0 1
3820: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3821: LD_ADDR_EXP 8
3825: PUSH
3826: LD_INT 1
3828: ST_TO_ADDR
// end ;
3829: PPOPN 1
3831: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3832: LD_VAR 0 1
3836: PUSH
3837: LD_EXP 21
3841: EQUAL
3842: IFFALSE 3851
// YouLost ( Schulz ) ;
3844: LD_STRING Schulz
3846: PPUSH
3847: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3851: LD_VAR 0 1
3855: PUSH
3856: LD_EXP 10
3860: EQUAL
3861: PUSH
3862: LD_VAR 0 1
3866: PPUSH
3867: CALL_OW 255
3871: PUSH
3872: LD_INT 2
3874: EQUAL
3875: AND
3876: IFFALSE 3885
// YouLost ( Heike ) ;
3878: LD_STRING Heike
3880: PPUSH
3881: CALL_OW 104
// end ; end_of_file
3885: PPOPN 1
3887: END
// export function Action ; var p , i , tmp ; begin
3888: LD_INT 0
3890: PPUSH
3891: PPUSH
3892: PPUSH
3893: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3894: LD_INT 12
3896: PPUSH
3897: LD_INT 12
3899: PPUSH
3900: LD_INT 2
3902: PPUSH
3903: LD_INT 10
3905: PPUSH
3906: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3910: LD_INT 12
3912: PPUSH
3913: LD_INT 12
3915: PPUSH
3916: LD_INT 2
3918: PPUSH
3919: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3923: LD_INT 12
3925: PPUSH
3926: LD_INT 12
3928: PPUSH
3929: CALL_OW 86
// InGameOn ;
3933: CALL_OW 8
// PrepareArabian ;
3937: CALL 133 0 0
// InGameOff ;
3941: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3945: LD_STRING M4
3947: PPUSH
3948: CALL_OW 337
// repeat wait ( 0 0$1 ) ;
3952: LD_INT 35
3954: PPUSH
3955: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3959: LD_INT 9
3961: PPUSH
3962: LD_INT 22
3964: PUSH
3965: LD_INT 2
3967: PUSH
3968: EMPTY
3969: LIST
3970: LIST
3971: PPUSH
3972: CALL_OW 70
3976: IFFALSE 3952
// PrepareHeikeCamp ;
3978: CALL 1768 0 0
// wait ( 0 0$2 ) ;
3982: LD_INT 70
3984: PPUSH
3985: CALL_OW 67
// if heikeIsDead then
3989: LD_EXP 7
3993: IFFALSE 4329
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
3995: LD_INT 116
3997: PPUSH
3998: LD_INT 58
4000: PPUSH
4001: LD_INT 2
4003: PPUSH
4004: LD_INT 26
4006: NEG
4007: PPUSH
4008: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4012: LD_INT 116
4014: PPUSH
4015: LD_INT 58
4017: PPUSH
4018: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4022: LD_EXP 21
4026: PPUSH
4027: LD_STRING DL-Obj-a-1
4029: PPUSH
4030: CALL_OW 88
// InGameOn ;
4034: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4038: LD_INT 116
4040: PPUSH
4041: LD_INT 58
4043: PPUSH
4044: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4048: LD_INT 22
4050: PUSH
4051: LD_INT 2
4053: PUSH
4054: EMPTY
4055: LIST
4056: LIST
4057: PPUSH
4058: CALL_OW 69
4062: PUSH
4063: LD_EXP 21
4067: PUSH
4068: LD_EXP 25
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: DIFF
4077: PPUSH
4078: LD_INT 96
4080: PPUSH
4081: LD_INT 65
4083: PPUSH
4084: CALL_OW 111
// if IsInUnit ( Schulz ) then
4088: LD_EXP 21
4092: PPUSH
4093: CALL_OW 310
4097: IFFALSE 4121
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4099: LD_EXP 21
4103: PPUSH
4104: CALL_OW 310
4108: PPUSH
4109: LD_INT 115
4111: PPUSH
4112: LD_INT 61
4114: PPUSH
4115: CALL_OW 111
4119: GO 4136
// ComMoveXY ( Schulz , 115 , 61 ) ;
4121: LD_EXP 21
4125: PPUSH
4126: LD_INT 115
4128: PPUSH
4129: LD_INT 61
4131: PPUSH
4132: CALL_OW 111
// if IsInUnit ( Nia ) then
4136: LD_EXP 25
4140: PPUSH
4141: CALL_OW 310
4145: IFFALSE 4169
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4147: LD_EXP 25
4151: PPUSH
4152: CALL_OW 310
4156: PPUSH
4157: LD_INT 115
4159: PPUSH
4160: LD_INT 61
4162: PPUSH
4163: CALL_OW 111
4167: GO 4184
// ComMoveXY ( Nia , 115 , 61 ) ;
4169: LD_EXP 25
4173: PPUSH
4174: LD_INT 115
4176: PPUSH
4177: LD_INT 61
4179: PPUSH
4180: CALL_OW 111
// p := 0 ;
4184: LD_ADDR_VAR 0 2
4188: PUSH
4189: LD_INT 0
4191: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4192: LD_INT 35
4194: PPUSH
4195: CALL_OW 67
// p := Inc ( p ) ;
4199: LD_ADDR_VAR 0 2
4203: PUSH
4204: LD_VAR 0 2
4208: PPUSH
4209: CALL 45167 0 1
4213: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4214: LD_INT 115
4216: PPUSH
4217: LD_INT 61
4219: PPUSH
4220: CALL_OW 428
4224: PUSH
4225: LD_VAR 0 2
4229: PUSH
4230: LD_INT 20
4232: GREATER
4233: OR
4234: IFFALSE 4192
// if Givi and IsOk ( Nia ) then
4236: LD_EXP 11
4240: PUSH
4241: LD_EXP 25
4245: PPUSH
4246: CALL_OW 302
4250: AND
4251: IFFALSE 4301
// begin Say ( Nia , DN-Obj-a-2 ) ;
4253: LD_EXP 25
4257: PPUSH
4258: LD_STRING DN-Obj-a-2
4260: PPUSH
4261: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4265: LD_EXP 21
4269: PPUSH
4270: LD_STRING DL-Obj-a-3
4272: PPUSH
4273: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4277: LD_EXP 25
4281: PPUSH
4282: LD_STRING DN-Obj-a-4
4284: PPUSH
4285: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4289: LD_EXP 21
4293: PPUSH
4294: LD_STRING DL-Obj-a-5
4296: PPUSH
4297: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4301: LD_INT 35
4303: PPUSH
4304: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4308: LD_EXP 21
4312: PPUSH
4313: LD_STRING DL-Fail-1
4315: PPUSH
4316: CALL_OW 88
// YouLost ( Fail ) ;
4320: LD_STRING Fail
4322: PPUSH
4323: CALL_OW 104
// exit ;
4327: GO 5291
// end ; PrepareRussianBaseAttackers ;
4329: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4333: LD_INT 35
4335: PPUSH
4336: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4340: LD_INT 116
4342: PPUSH
4343: LD_INT 58
4345: PPUSH
4346: LD_INT 2
4348: PPUSH
4349: LD_INT 26
4351: NEG
4352: PPUSH
4353: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4357: LD_INT 116
4359: PPUSH
4360: LD_INT 58
4362: PPUSH
4363: LD_INT 2
4365: PPUSH
4366: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4370: LD_INT 116
4372: PPUSH
4373: LD_INT 58
4375: PPUSH
4376: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4380: LD_INT 5
4382: PPUSH
4383: LD_INT 2
4385: PPUSH
4386: CALL_OW 343
// Say ( Schulz , DL-Obj-1 ) ;
4390: LD_EXP 21
4394: PPUSH
4395: LD_STRING DL-Obj-1
4397: PPUSH
4398: CALL_OW 88
// PrepareBasim ;
4402: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4406: LD_INT 10
4408: PPUSH
4409: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4413: LD_INT 8
4415: PPUSH
4416: LD_INT 2
4418: PPUSH
4419: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
4423: LD_INT 35
4425: PPUSH
4426: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 10 ] ] ) ;
4430: LD_INT 22
4432: PUSH
4433: LD_INT 2
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: PUSH
4440: LD_INT 92
4442: PUSH
4443: LD_INT 117
4445: PUSH
4446: LD_INT 58
4448: PUSH
4449: LD_INT 10
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: LIST
4457: PUSH
4458: EMPTY
4459: LIST
4460: LIST
4461: PPUSH
4462: CALL_OW 69
4466: IFFALSE 4423
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4468: LD_ADDR_VAR 0 3
4472: PUSH
4473: LD_INT 22
4475: PUSH
4476: LD_INT 5
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PPUSH
4483: CALL_OW 69
4487: PUSH
4488: FOR_IN
4489: IFFALSE 4505
// SetSide ( i , 2 ) ;
4491: LD_VAR 0 3
4495: PPUSH
4496: LD_INT 2
4498: PPUSH
4499: CALL_OW 235
4503: GO 4488
4505: POP
4506: POP
// repeat wait ( 0 0$1 ) ;
4507: LD_INT 35
4509: PPUSH
4510: CALL_OW 67
// tmp := FilterAllUnits ( [ f_class , class_apeman_kamikaze ] ) ;
4514: LD_ADDR_VAR 0 4
4518: PUSH
4519: LD_INT 25
4521: PUSH
4522: LD_INT 17
4524: PUSH
4525: EMPTY
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// for i in tmp do
4534: LD_ADDR_VAR 0 3
4538: PUSH
4539: LD_VAR 0 4
4543: PUSH
4544: FOR_IN
4545: IFFALSE 4583
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4547: LD_VAR 0 3
4551: PPUSH
4552: LD_INT 22
4554: PUSH
4555: LD_INT 3
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PPUSH
4562: CALL_OW 69
4566: PPUSH
4567: LD_VAR 0 3
4571: PPUSH
4572: CALL_OW 74
4576: PPUSH
4577: CALL_OW 115
4581: GO 4544
4583: POP
4584: POP
// until See ( 2 , Basim ) and kamikazed ;
4585: LD_INT 2
4587: PPUSH
4588: LD_EXP 22
4592: PPUSH
4593: CALL_OW 292
4597: PUSH
4598: LD_EXP 8
4602: AND
4603: IFFALSE 4507
// Say ( Basim , DBs-Obj-2 ) ;
4605: LD_EXP 22
4609: PPUSH
4610: LD_STRING DBs-Obj-2
4612: PPUSH
4613: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4617: LD_INT 35
4619: PPUSH
4620: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4624: LD_INT 22
4626: PUSH
4627: LD_INT 3
4629: PUSH
4630: EMPTY
4631: LIST
4632: LIST
4633: PUSH
4634: LD_INT 50
4636: PUSH
4637: EMPTY
4638: LIST
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PPUSH
4644: CALL_OW 69
4648: NOT
4649: IFFALSE 4617
// ComExit ( Heike ) ;
4651: LD_EXP 10
4655: PPUSH
4656: CALL 44204 0 1
// DialogueOn ;
4660: CALL_OW 6
// if IsOk ( Kaia ) then
4664: LD_EXP 15
4668: PPUSH
4669: CALL_OW 302
4673: IFFALSE 4816
// begin CenterNowOnUnits ( Kaia ) ;
4675: LD_EXP 15
4679: PPUSH
4680: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4684: LD_EXP 15
4688: PPUSH
4689: LD_STRING DK-Obj-3
4691: PPUSH
4692: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4696: LD_EXP 11
4700: PPUSH
4701: LD_STRING DG-Obj-4
4703: PPUSH
4704: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4708: LD_EXP 15
4712: PPUSH
4713: LD_STRING DK-Obj-5
4715: PPUSH
4716: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4720: LD_EXP 15
4724: PPUSH
4725: LD_STRING DK-Obj-6
4727: PPUSH
4728: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4732: LD_EXP 15
4736: PPUSH
4737: LD_STRING DK-Obj-7
4739: PPUSH
4740: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4744: LD_EXP 15
4748: PPUSH
4749: LD_STRING DK-Obj-8
4751: PPUSH
4752: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4756: LD_EXP 21
4760: PPUSH
4761: LD_STRING DL-Obj-9
4763: PPUSH
4764: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4768: LD_EXP 21
4772: PPUSH
4773: LD_STRING DL-Obj-10
4775: PPUSH
4776: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4780: LD_EXP 21
4784: PPUSH
4785: LD_STRING DL-Obj-11
4787: PPUSH
4788: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4792: LD_EXP 21
4796: PPUSH
4797: LD_STRING DL-Obj-12
4799: PPUSH
4800: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4804: LD_EXP 21
4808: PPUSH
4809: LD_STRING DL-Obj-13
4811: PPUSH
4812: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4816: LD_EXP 19
4820: PPUSH
4821: CALL_OW 302
4825: IFFALSE 4863
// begin Say ( Kurt , DKs-Obj-14 ) ;
4827: LD_EXP 19
4831: PPUSH
4832: LD_STRING DKs-Obj-14
4834: PPUSH
4835: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4839: LD_EXP 19
4843: PPUSH
4844: LD_STRING DKs-Obj-15
4846: PPUSH
4847: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4851: LD_EXP 11
4855: PPUSH
4856: LD_STRING DG-Obj-16
4858: PPUSH
4859: CALL_OW 88
// end ; DialogueOff ;
4863: CALL_OW 7
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
4867: LD_ADDR_VAR 0 3
4871: PUSH
4872: LD_INT 22
4874: PUSH
4875: LD_INT 8
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: PUSH
4887: FOR_IN
4888: IFFALSE 4904
// SetSide ( i , 2 ) ;
4890: LD_VAR 0 3
4894: PPUSH
4895: LD_INT 2
4897: PPUSH
4898: CALL_OW 235
4902: GO 4887
4904: POP
4905: POP
// wait ( 0 0$3 ) ;
4906: LD_INT 105
4908: PPUSH
4909: CALL_OW 67
// ComExit ( Givi ) ;
4913: LD_EXP 11
4917: PPUSH
4918: CALL 44204 0 1
// ComExit ( Nia ) ;
4922: LD_EXP 25
4926: PPUSH
4927: CALL 44204 0 1
// AddComMoveUnit ( Nia , Givi ) ;
4931: LD_EXP 25
4935: PPUSH
4936: LD_EXP 11
4940: PPUSH
4941: CALL_OW 172
// wait ( 0 0$1 ) ;
4945: LD_INT 35
4947: PPUSH
4948: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
4952: LD_EXP 11
4956: PPUSH
4957: CALL_OW 302
4961: PUSH
4962: LD_EXP 25
4966: PPUSH
4967: CALL_OW 302
4971: AND
4972: IFFALSE 5246
// begin DialogueOn ;
4974: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
4978: LD_EXP 11
4982: PPUSH
4983: LD_STRING DG-Nia-1
4985: PPUSH
4986: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
4990: LD_EXP 10
4994: PPUSH
4995: LD_STRING DH-Nia-2
4997: PPUSH
4998: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5002: LD_EXP 11
5006: PPUSH
5007: LD_STRING DG-Nia-3
5009: PPUSH
5010: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5014: LD_EXP 25
5018: PPUSH
5019: LD_STRING DN-Nia-4
5021: PPUSH
5022: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5026: LD_EXP 10
5030: PPUSH
5031: LD_STRING DH-Nia-5
5033: PPUSH
5034: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5038: LD_EXP 11
5042: PPUSH
5043: LD_STRING DG-Nia-6
5045: PPUSH
5046: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5050: LD_EXP 25
5054: PPUSH
5055: LD_STRING DN-Nia-7
5057: PPUSH
5058: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5062: LD_EXP 25
5066: PPUSH
5067: LD_STRING DN-Nia-8
5069: PPUSH
5070: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5074: LD_EXP 25
5078: PPUSH
5079: LD_STRING DN-Nia-9
5081: PPUSH
5082: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5086: LD_EXP 25
5090: PPUSH
5091: LD_STRING DN-Nia-10
5093: PPUSH
5094: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5098: LD_EXP 11
5102: PPUSH
5103: LD_STRING DG-Nia-11
5105: PPUSH
5106: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5110: LD_EXP 25
5114: PPUSH
5115: LD_STRING DN-Nia-12
5117: PPUSH
5118: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5122: LD_EXP 10
5126: PPUSH
5127: LD_STRING DH-Nia-13
5129: PPUSH
5130: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5134: LD_EXP 25
5138: PPUSH
5139: LD_STRING DN-Nia-14
5141: PPUSH
5142: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5146: LD_EXP 10
5150: PPUSH
5151: LD_STRING DH-Nia-15
5153: PPUSH
5154: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5158: LD_EXP 21
5162: PPUSH
5163: LD_STRING DL-Nia-16
5165: PPUSH
5166: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5170: LD_EXP 10
5174: PPUSH
5175: LD_STRING DH-Nia-17
5177: PPUSH
5178: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5182: LD_EXP 10
5186: PPUSH
5187: LD_STRING DH-Nia-18
5189: PPUSH
5190: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5194: LD_EXP 13
5198: PPUSH
5199: LD_STRING DI-Nia-19
5201: PPUSH
5202: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5206: LD_EXP 21
5210: PPUSH
5211: LD_STRING DL-Nia-20
5213: PPUSH
5214: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5218: LD_EXP 21
5222: PPUSH
5223: LD_STRING DL-Nia-21
5225: PPUSH
5226: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5230: LD_EXP 21
5234: PPUSH
5235: LD_STRING DL-Nia-22
5237: PPUSH
5238: CALL_OW 88
// DialogueOff ;
5242: CALL_OW 7
// end ; DialogueOn ;
5246: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5250: LD_EXP 21
5254: PPUSH
5255: LD_STRING DL-Retreat-1
5257: PPUSH
5258: CALL_OW 88
// DialogueOff ;
5262: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5266: LD_STRING M5
5268: PPUSH
5269: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5273: LD_INT 13
5275: PPUSH
5276: LD_INT 1
5278: PPUSH
5279: CALL_OW 424
// startRussianAttacks := true ;
5283: LD_ADDR_EXP 9
5287: PUSH
5288: LD_INT 1
5290: ST_TO_ADDR
// end ;
5291: LD_VAR 0 1
5295: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5296: LD_EXP 9
5300: PUSH
5301: LD_INT 13
5303: PPUSH
5304: LD_INT 22
5306: PUSH
5307: LD_INT 2
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: PUSH
5314: LD_INT 50
5316: PUSH
5317: EMPTY
5318: LIST
5319: PUSH
5320: LD_INT 21
5322: PUSH
5323: LD_INT 1
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 71
5339: NOT
5340: AND
5341: IFFALSE 5350
5343: GO 5345
5345: DISABLE
// EndMission ;
5346: CALL 5351 0 0
5350: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5351: LD_INT 0
5353: PPUSH
5354: PPUSH
5355: PPUSH
5356: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5357: LD_ADDR_VAR 0 3
5361: PUSH
5362: LD_INT 13
5364: PPUSH
5365: LD_INT 22
5367: PUSH
5368: LD_INT 2
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 21
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: PPUSH
5389: CALL_OW 70
5393: ST_TO_ADDR
// saveVehicles := [ ] ;
5394: LD_ADDR_VAR 0 4
5398: PUSH
5399: EMPTY
5400: ST_TO_ADDR
// for i in tmp do
5401: LD_ADDR_VAR 0 2
5405: PUSH
5406: LD_VAR 0 3
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5521
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5414: LD_ADDR_VAR 0 4
5418: PUSH
5419: LD_VAR 0 4
5423: PPUSH
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 265
5433: PUSH
5434: LD_VAR 0 2
5438: PPUSH
5439: CALL_OW 262
5443: PUSH
5444: LD_VAR 0 2
5448: PPUSH
5449: CALL_OW 263
5453: PUSH
5454: LD_VAR 0 2
5458: PPUSH
5459: CALL_OW 264
5463: PUSH
5464: LD_VAR 0 2
5468: PPUSH
5469: CALL_OW 248
5473: PUSH
5474: LD_VAR 0 2
5478: PPUSH
5479: CALL_OW 261
5483: PUSH
5484: LD_VAR 0 2
5488: PPUSH
5489: CALL_OW 271
5493: PUSH
5494: LD_VAR 0 2
5498: PPUSH
5499: CALL_OW 311
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: LIST
5511: LIST
5512: LIST
5513: PPUSH
5514: CALL 43806 0 2
5518: ST_TO_ADDR
5519: GO 5411
5521: POP
5522: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5523: LD_EXP 21
5527: PPUSH
5528: LD_STRING 09c_Schulz
5530: PPUSH
5531: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5535: LD_EXP 21
5539: PPUSH
5540: LD_STRING 09c_Schulz_ID
5542: PPUSH
5543: CALL_OW 39
// if IsOk ( Lemmy ) then
5547: LD_EXP 23
5551: PPUSH
5552: CALL_OW 302
5556: IFFALSE 5582
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5558: LD_EXP 23
5562: PPUSH
5563: LD_STRING 09c_Lemmy
5565: PPUSH
5566: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5570: LD_EXP 23
5574: PPUSH
5575: LD_STRING 09c_Lemmy_ID
5577: PPUSH
5578: CALL_OW 39
// end ; if IsOk ( Nia ) then
5582: LD_EXP 25
5586: PPUSH
5587: CALL_OW 302
5591: IFFALSE 5617
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5593: LD_EXP 25
5597: PPUSH
5598: LD_STRING 09c_Nia
5600: PPUSH
5601: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5605: LD_EXP 25
5609: PPUSH
5610: LD_STRING 09c_Nia_ID
5612: PPUSH
5613: CALL_OW 39
// end ; if IsOk ( Mia ) then
5617: LD_EXP 24
5621: PPUSH
5622: CALL_OW 302
5626: IFFALSE 5652
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5628: LD_EXP 24
5632: PPUSH
5633: LD_STRING 09c_Mia
5635: PPUSH
5636: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5640: LD_EXP 24
5644: PPUSH
5645: LD_STRING 09c_Mia_ID
5647: PPUSH
5648: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5652: LD_EXP 26
5656: PPUSH
5657: CALL_OW 302
5661: IFFALSE 5687
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5663: LD_EXP 26
5667: PPUSH
5668: LD_STRING 09c_Jenna
5670: PPUSH
5671: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5675: LD_EXP 26
5679: PPUSH
5680: LD_STRING 09c_Jenna_ID
5682: PPUSH
5683: CALL_OW 39
// end ; if IsOk ( Basim ) then
5687: LD_EXP 22
5691: PPUSH
5692: CALL_OW 302
5696: IFFALSE 5722
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5698: LD_EXP 22
5702: PPUSH
5703: LD_STRING 09c_Basim
5705: PPUSH
5706: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5710: LD_EXP 22
5714: PPUSH
5715: LD_STRING 09c_Basim_ID
5717: PPUSH
5718: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5722: LD_EXP 10
5726: PPUSH
5727: LD_STRING 09c_Heike
5729: PPUSH
5730: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5734: LD_EXP 10
5738: PPUSH
5739: LD_STRING 09c_Heike_ID
5741: PPUSH
5742: CALL_OW 39
// if IsOk ( Givi ) then
5746: LD_EXP 11
5750: PPUSH
5751: CALL_OW 302
5755: IFFALSE 5781
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5757: LD_EXP 11
5761: PPUSH
5762: LD_STRING 09c_Givi
5764: PPUSH
5765: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5769: LD_EXP 11
5773: PPUSH
5774: LD_STRING 09c_Givi_ID
5776: PPUSH
5777: CALL_OW 39
// end ; if IsOk ( Mike ) then
5781: LD_EXP 12
5785: PPUSH
5786: CALL_OW 302
5790: IFFALSE 5816
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5792: LD_EXP 12
5796: PPUSH
5797: LD_STRING 09c_Mike
5799: PPUSH
5800: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5804: LD_EXP 12
5808: PPUSH
5809: LD_STRING 09c_Mike_ID
5811: PPUSH
5812: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5816: LD_EXP 13
5820: PPUSH
5821: CALL_OW 302
5825: IFFALSE 5851
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5827: LD_EXP 13
5831: PPUSH
5832: LD_STRING 09c_Ibrahim
5834: PPUSH
5835: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5839: LD_EXP 13
5843: PPUSH
5844: LD_STRING 09c_Ibrahim_ID
5846: PPUSH
5847: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5851: LD_EXP 14
5855: PPUSH
5856: CALL_OW 302
5860: IFFALSE 5886
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5862: LD_EXP 14
5866: PPUSH
5867: LD_STRING 09c_Kamil
5869: PPUSH
5870: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5874: LD_EXP 14
5878: PPUSH
5879: LD_STRING 09c_Kamil_ID
5881: PPUSH
5882: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5886: LD_EXP 15
5890: PPUSH
5891: CALL_OW 302
5895: IFFALSE 5921
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5897: LD_EXP 15
5901: PPUSH
5902: LD_STRING 09c_Kaia
5904: PPUSH
5905: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
5909: LD_EXP 15
5913: PPUSH
5914: LD_STRING 09c_Kaia_ID
5916: PPUSH
5917: CALL_OW 39
// end ; if IsOk ( Sophia ) then
5921: LD_EXP 16
5925: PPUSH
5926: CALL_OW 302
5930: IFFALSE 5956
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
5932: LD_EXP 16
5936: PPUSH
5937: LD_STRING 09c_Sophia
5939: PPUSH
5940: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
5944: LD_EXP 16
5948: PPUSH
5949: LD_STRING 09c_Sophia_ID
5951: PPUSH
5952: CALL_OW 39
// end ; if IsOk ( Markov ) then
5956: LD_EXP 17
5960: PPUSH
5961: CALL_OW 302
5965: IFFALSE 5991
// begin SaveCharacters ( Markov , 09c_Markov ) ;
5967: LD_EXP 17
5971: PPUSH
5972: LD_STRING 09c_Markov
5974: PPUSH
5975: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
5979: LD_EXP 17
5983: PPUSH
5984: LD_STRING 09c_Markov_ID
5986: PPUSH
5987: CALL_OW 39
// end ; if IsOk ( Olaf ) then
5991: LD_EXP 18
5995: PPUSH
5996: CALL_OW 302
6000: IFFALSE 6026
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6002: LD_EXP 18
6006: PPUSH
6007: LD_STRING 09c_Olaf
6009: PPUSH
6010: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6014: LD_EXP 18
6018: PPUSH
6019: LD_STRING 09c_Olaf_ID
6021: PPUSH
6022: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6026: LD_EXP 19
6030: PPUSH
6031: CALL_OW 302
6035: IFFALSE 6061
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6037: LD_EXP 19
6041: PPUSH
6042: LD_STRING 09c_Kurt
6044: PPUSH
6045: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6049: LD_EXP 19
6053: PPUSH
6054: LD_STRING 09c_Kurt_ID
6056: PPUSH
6057: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6061: LD_EXP 20
6065: PPUSH
6066: CALL_OW 302
6070: IFFALSE 6096
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6072: LD_EXP 20
6076: PPUSH
6077: LD_STRING 09c_Aviradze
6079: PPUSH
6080: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6084: LD_EXP 20
6088: PPUSH
6089: LD_STRING 09c_Aviradze_ID
6091: PPUSH
6092: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6096: LD_EXP 28
6100: PPUSH
6101: LD_INT 50
6103: PUSH
6104: EMPTY
6105: LIST
6106: PPUSH
6107: CALL_OW 72
6111: PPUSH
6112: LD_STRING 09c_schulzSecondSquad
6114: PPUSH
6115: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6119: LD_EXP 27
6123: PPUSH
6124: LD_INT 50
6126: PUSH
6127: EMPTY
6128: LIST
6129: PPUSH
6130: CALL_OW 72
6134: PPUSH
6135: LD_STRING 09c_heikeSecondSquad
6137: PPUSH
6138: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6142: LD_ADDR_VAR 0 2
6146: PUSH
6147: DOUBLE
6148: LD_INT 1
6150: DEC
6151: ST_TO_ADDR
6152: LD_EXP 28
6156: PPUSH
6157: LD_INT 50
6159: PUSH
6160: EMPTY
6161: LIST
6162: PPUSH
6163: CALL_OW 72
6167: PUSH
6168: FOR_TO
6169: IFFALSE 6197
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6171: LD_EXP 28
6175: PUSH
6176: LD_VAR 0 2
6180: ARRAY
6181: PPUSH
6182: LD_STRING 09c_random_ID_
6184: PUSH
6185: LD_VAR 0 2
6189: STR
6190: PPUSH
6191: CALL_OW 39
6195: GO 6168
6197: POP
6198: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6199: LD_ADDR_VAR 0 2
6203: PUSH
6204: DOUBLE
6205: LD_INT 1
6207: DEC
6208: ST_TO_ADDR
6209: LD_EXP 27
6213: PPUSH
6214: LD_INT 50
6216: PUSH
6217: EMPTY
6218: LIST
6219: PPUSH
6220: CALL_OW 72
6224: PUSH
6225: FOR_TO
6226: IFFALSE 6254
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6228: LD_EXP 27
6232: PUSH
6233: LD_VAR 0 2
6237: ARRAY
6238: PPUSH
6239: LD_STRING 09c_hrandom_ID_
6241: PUSH
6242: LD_VAR 0 2
6246: STR
6247: PPUSH
6248: CALL_OW 39
6252: GO 6225
6254: POP
6255: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6256: LD_VAR 0 4
6260: PPUSH
6261: LD_STRING 09c_vehicles
6263: PPUSH
6264: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6268: LD_OWVAR 1
6272: PPUSH
6273: LD_STRING 09c_tick
6275: PPUSH
6276: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6280: LD_INT 22
6282: PUSH
6283: LD_INT 2
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 23
6292: PUSH
6293: LD_INT 0
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: PPUSH
6309: LD_STRING 09c_apes
6311: PPUSH
6312: CALL_OW 38
// wait ( 3 ) ;
6316: LD_INT 3
6318: PPUSH
6319: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6323: LD_INT 1
6325: PPUSH
6326: LD_STRING __x1/09_cont3
6328: PPUSH
6329: CALL_OW 340
// end ; end_of_file
6333: LD_VAR 0 1
6337: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6338: LD_INT 0
6340: PPUSH
6341: PPUSH
// if exist_mode then
6342: LD_VAR 0 2
6346: IFFALSE 6371
// unit := CreateCharacter ( prefix & ident ) else
6348: LD_ADDR_VAR 0 5
6352: PUSH
6353: LD_VAR 0 3
6357: PUSH
6358: LD_VAR 0 1
6362: STR
6363: PPUSH
6364: CALL_OW 34
6368: ST_TO_ADDR
6369: GO 6386
// unit := NewCharacter ( ident ) ;
6371: LD_ADDR_VAR 0 5
6375: PUSH
6376: LD_VAR 0 1
6380: PPUSH
6381: CALL_OW 25
6385: ST_TO_ADDR
// result := unit ;
6386: LD_ADDR_VAR 0 4
6390: PUSH
6391: LD_VAR 0 5
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 4
6400: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6401: LD_INT 0
6403: PPUSH
6404: PPUSH
// if not side or not nation then
6405: LD_VAR 0 1
6409: NOT
6410: PUSH
6411: LD_VAR 0 2
6415: NOT
6416: OR
6417: IFFALSE 6421
// exit ;
6419: GO 7189
// case nation of nation_american :
6421: LD_VAR 0 2
6425: PUSH
6426: LD_INT 1
6428: DOUBLE
6429: EQUAL
6430: IFTRUE 6434
6432: GO 6648
6434: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6435: LD_ADDR_VAR 0 4
6439: PUSH
6440: LD_INT 35
6442: PUSH
6443: LD_INT 45
6445: PUSH
6446: LD_INT 46
6448: PUSH
6449: LD_INT 47
6451: PUSH
6452: LD_INT 82
6454: PUSH
6455: LD_INT 83
6457: PUSH
6458: LD_INT 84
6460: PUSH
6461: LD_INT 85
6463: PUSH
6464: LD_INT 86
6466: PUSH
6467: LD_INT 1
6469: PUSH
6470: LD_INT 2
6472: PUSH
6473: LD_INT 6
6475: PUSH
6476: LD_INT 15
6478: PUSH
6479: LD_INT 16
6481: PUSH
6482: LD_INT 7
6484: PUSH
6485: LD_INT 12
6487: PUSH
6488: LD_INT 13
6490: PUSH
6491: LD_INT 10
6493: PUSH
6494: LD_INT 14
6496: PUSH
6497: LD_INT 20
6499: PUSH
6500: LD_INT 21
6502: PUSH
6503: LD_INT 22
6505: PUSH
6506: LD_INT 25
6508: PUSH
6509: LD_INT 32
6511: PUSH
6512: LD_INT 27
6514: PUSH
6515: LD_INT 36
6517: PUSH
6518: LD_INT 69
6520: PUSH
6521: LD_INT 39
6523: PUSH
6524: LD_INT 34
6526: PUSH
6527: LD_INT 40
6529: PUSH
6530: LD_INT 48
6532: PUSH
6533: LD_INT 49
6535: PUSH
6536: LD_INT 50
6538: PUSH
6539: LD_INT 51
6541: PUSH
6542: LD_INT 52
6544: PUSH
6545: LD_INT 53
6547: PUSH
6548: LD_INT 54
6550: PUSH
6551: LD_INT 55
6553: PUSH
6554: LD_INT 56
6556: PUSH
6557: LD_INT 57
6559: PUSH
6560: LD_INT 58
6562: PUSH
6563: LD_INT 59
6565: PUSH
6566: LD_INT 60
6568: PUSH
6569: LD_INT 61
6571: PUSH
6572: LD_INT 62
6574: PUSH
6575: LD_INT 80
6577: PUSH
6578: LD_INT 82
6580: PUSH
6581: LD_INT 83
6583: PUSH
6584: LD_INT 84
6586: PUSH
6587: LD_INT 85
6589: PUSH
6590: LD_INT 86
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: ST_TO_ADDR
6646: GO 7113
6648: LD_INT 2
6650: DOUBLE
6651: EQUAL
6652: IFTRUE 6656
6654: GO 6882
6656: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6657: LD_ADDR_VAR 0 4
6661: PUSH
6662: LD_INT 35
6664: PUSH
6665: LD_INT 45
6667: PUSH
6668: LD_INT 46
6670: PUSH
6671: LD_INT 47
6673: PUSH
6674: LD_INT 82
6676: PUSH
6677: LD_INT 83
6679: PUSH
6680: LD_INT 84
6682: PUSH
6683: LD_INT 85
6685: PUSH
6686: LD_INT 87
6688: PUSH
6689: LD_INT 70
6691: PUSH
6692: LD_INT 1
6694: PUSH
6695: LD_INT 11
6697: PUSH
6698: LD_INT 3
6700: PUSH
6701: LD_INT 4
6703: PUSH
6704: LD_INT 5
6706: PUSH
6707: LD_INT 6
6709: PUSH
6710: LD_INT 15
6712: PUSH
6713: LD_INT 18
6715: PUSH
6716: LD_INT 7
6718: PUSH
6719: LD_INT 17
6721: PUSH
6722: LD_INT 8
6724: PUSH
6725: LD_INT 20
6727: PUSH
6728: LD_INT 21
6730: PUSH
6731: LD_INT 22
6733: PUSH
6734: LD_INT 72
6736: PUSH
6737: LD_INT 26
6739: PUSH
6740: LD_INT 69
6742: PUSH
6743: LD_INT 39
6745: PUSH
6746: LD_INT 40
6748: PUSH
6749: LD_INT 41
6751: PUSH
6752: LD_INT 42
6754: PUSH
6755: LD_INT 43
6757: PUSH
6758: LD_INT 48
6760: PUSH
6761: LD_INT 49
6763: PUSH
6764: LD_INT 50
6766: PUSH
6767: LD_INT 51
6769: PUSH
6770: LD_INT 52
6772: PUSH
6773: LD_INT 53
6775: PUSH
6776: LD_INT 54
6778: PUSH
6779: LD_INT 55
6781: PUSH
6782: LD_INT 56
6784: PUSH
6785: LD_INT 60
6787: PUSH
6788: LD_INT 61
6790: PUSH
6791: LD_INT 62
6793: PUSH
6794: LD_INT 66
6796: PUSH
6797: LD_INT 67
6799: PUSH
6800: LD_INT 68
6802: PUSH
6803: LD_INT 81
6805: PUSH
6806: LD_INT 82
6808: PUSH
6809: LD_INT 83
6811: PUSH
6812: LD_INT 84
6814: PUSH
6815: LD_INT 85
6817: PUSH
6818: LD_INT 87
6820: PUSH
6821: LD_INT 88
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: LIST
6867: LIST
6868: LIST
6869: LIST
6870: LIST
6871: LIST
6872: LIST
6873: LIST
6874: LIST
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: ST_TO_ADDR
6880: GO 7113
6882: LD_INT 3
6884: DOUBLE
6885: EQUAL
6886: IFTRUE 6890
6888: GO 7112
6890: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6891: LD_ADDR_VAR 0 4
6895: PUSH
6896: LD_INT 46
6898: PUSH
6899: LD_INT 47
6901: PUSH
6902: LD_INT 1
6904: PUSH
6905: LD_INT 2
6907: PUSH
6908: LD_INT 82
6910: PUSH
6911: LD_INT 83
6913: PUSH
6914: LD_INT 84
6916: PUSH
6917: LD_INT 85
6919: PUSH
6920: LD_INT 86
6922: PUSH
6923: LD_INT 11
6925: PUSH
6926: LD_INT 9
6928: PUSH
6929: LD_INT 20
6931: PUSH
6932: LD_INT 19
6934: PUSH
6935: LD_INT 21
6937: PUSH
6938: LD_INT 24
6940: PUSH
6941: LD_INT 22
6943: PUSH
6944: LD_INT 25
6946: PUSH
6947: LD_INT 28
6949: PUSH
6950: LD_INT 29
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 31
6958: PUSH
6959: LD_INT 37
6961: PUSH
6962: LD_INT 38
6964: PUSH
6965: LD_INT 32
6967: PUSH
6968: LD_INT 27
6970: PUSH
6971: LD_INT 33
6973: PUSH
6974: LD_INT 69
6976: PUSH
6977: LD_INT 39
6979: PUSH
6980: LD_INT 34
6982: PUSH
6983: LD_INT 40
6985: PUSH
6986: LD_INT 71
6988: PUSH
6989: LD_INT 23
6991: PUSH
6992: LD_INT 44
6994: PUSH
6995: LD_INT 48
6997: PUSH
6998: LD_INT 49
7000: PUSH
7001: LD_INT 50
7003: PUSH
7004: LD_INT 51
7006: PUSH
7007: LD_INT 52
7009: PUSH
7010: LD_INT 53
7012: PUSH
7013: LD_INT 54
7015: PUSH
7016: LD_INT 55
7018: PUSH
7019: LD_INT 56
7021: PUSH
7022: LD_INT 57
7024: PUSH
7025: LD_INT 58
7027: PUSH
7028: LD_INT 59
7030: PUSH
7031: LD_INT 63
7033: PUSH
7034: LD_INT 64
7036: PUSH
7037: LD_INT 65
7039: PUSH
7040: LD_INT 82
7042: PUSH
7043: LD_INT 83
7045: PUSH
7046: LD_INT 84
7048: PUSH
7049: LD_INT 85
7051: PUSH
7052: LD_INT 86
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: LIST
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: LIST
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: LIST
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: ST_TO_ADDR
7110: GO 7113
7112: POP
// if state > - 1 and state < 3 then
7113: LD_VAR 0 3
7117: PUSH
7118: LD_INT 1
7120: NEG
7121: GREATER
7122: PUSH
7123: LD_VAR 0 3
7127: PUSH
7128: LD_INT 3
7130: LESS
7131: AND
7132: IFFALSE 7189
// for i in result do
7134: LD_ADDR_VAR 0 5
7138: PUSH
7139: LD_VAR 0 4
7143: PUSH
7144: FOR_IN
7145: IFFALSE 7187
// if GetTech ( i , side ) <> state then
7147: LD_VAR 0 5
7151: PPUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: CALL_OW 321
7161: PUSH
7162: LD_VAR 0 3
7166: NONEQUAL
7167: IFFALSE 7185
// result := result diff i ;
7169: LD_ADDR_VAR 0 4
7173: PUSH
7174: LD_VAR 0 4
7178: PUSH
7179: LD_VAR 0 5
7183: DIFF
7184: ST_TO_ADDR
7185: GO 7144
7187: POP
7188: POP
// end ;
7189: LD_VAR 0 4
7193: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7194: LD_INT 0
7196: PPUSH
7197: PPUSH
7198: PPUSH
// result := true ;
7199: LD_ADDR_VAR 0 3
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7207: LD_ADDR_VAR 0 5
7211: PUSH
7212: LD_VAR 0 2
7216: PPUSH
7217: CALL_OW 480
7221: ST_TO_ADDR
// if not tmp then
7222: LD_VAR 0 5
7226: NOT
7227: IFFALSE 7231
// exit ;
7229: GO 7280
// for i in tmp do
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_VAR 0 5
7240: PUSH
7241: FOR_IN
7242: IFFALSE 7278
// if GetTech ( i , side ) <> state_researched then
7244: LD_VAR 0 4
7248: PPUSH
7249: LD_VAR 0 1
7253: PPUSH
7254: CALL_OW 321
7258: PUSH
7259: LD_INT 2
7261: NONEQUAL
7262: IFFALSE 7276
// begin result := false ;
7264: LD_ADDR_VAR 0 3
7268: PUSH
7269: LD_INT 0
7271: ST_TO_ADDR
// exit ;
7272: POP
7273: POP
7274: GO 7280
// end ;
7276: GO 7241
7278: POP
7279: POP
// end ;
7280: LD_VAR 0 3
7284: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7285: LD_INT 0
7287: PPUSH
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
7293: PPUSH
7294: PPUSH
7295: PPUSH
7296: PPUSH
7297: PPUSH
7298: PPUSH
7299: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7300: LD_VAR 0 1
7304: NOT
7305: PUSH
7306: LD_VAR 0 1
7310: PPUSH
7311: CALL_OW 257
7315: PUSH
7316: LD_INT 9
7318: NONEQUAL
7319: OR
7320: IFFALSE 7324
// exit ;
7322: GO 7897
// side := GetSide ( unit ) ;
7324: LD_ADDR_VAR 0 9
7328: PUSH
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL_OW 255
7338: ST_TO_ADDR
// tech_space := tech_spacanom ;
7339: LD_ADDR_VAR 0 12
7343: PUSH
7344: LD_INT 29
7346: ST_TO_ADDR
// tech_time := tech_taurad ;
7347: LD_ADDR_VAR 0 13
7351: PUSH
7352: LD_INT 28
7354: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7355: LD_ADDR_VAR 0 11
7359: PUSH
7360: LD_VAR 0 1
7364: PPUSH
7365: CALL_OW 310
7369: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7370: LD_VAR 0 11
7374: PPUSH
7375: CALL_OW 247
7379: PUSH
7380: LD_INT 2
7382: EQUAL
7383: IFFALSE 7387
// exit ;
7385: GO 7897
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7387: LD_ADDR_VAR 0 8
7391: PUSH
7392: LD_INT 81
7394: PUSH
7395: LD_VAR 0 9
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: LD_INT 3
7406: PUSH
7407: LD_INT 21
7409: PUSH
7410: LD_INT 3
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: PPUSH
7425: CALL_OW 69
7429: ST_TO_ADDR
// if not tmp then
7430: LD_VAR 0 8
7434: NOT
7435: IFFALSE 7439
// exit ;
7437: GO 7897
// if in_unit then
7439: LD_VAR 0 11
7443: IFFALSE 7467
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7445: LD_ADDR_VAR 0 10
7449: PUSH
7450: LD_VAR 0 8
7454: PPUSH
7455: LD_VAR 0 11
7459: PPUSH
7460: CALL_OW 74
7464: ST_TO_ADDR
7465: GO 7487
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7467: LD_ADDR_VAR 0 10
7471: PUSH
7472: LD_VAR 0 8
7476: PPUSH
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 74
7486: ST_TO_ADDR
// if not enemy then
7487: LD_VAR 0 10
7491: NOT
7492: IFFALSE 7496
// exit ;
7494: GO 7897
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7496: LD_VAR 0 11
7500: PUSH
7501: LD_VAR 0 11
7505: PPUSH
7506: LD_VAR 0 10
7510: PPUSH
7511: CALL_OW 296
7515: PUSH
7516: LD_INT 13
7518: GREATER
7519: AND
7520: PUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: LD_VAR 0 10
7530: PPUSH
7531: CALL_OW 296
7535: PUSH
7536: LD_INT 12
7538: GREATER
7539: OR
7540: IFFALSE 7544
// exit ;
7542: GO 7897
// missile := [ 1 ] ;
7544: LD_ADDR_VAR 0 14
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: EMPTY
7553: LIST
7554: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7555: LD_VAR 0 9
7559: PPUSH
7560: LD_VAR 0 12
7564: PPUSH
7565: CALL_OW 325
7569: IFFALSE 7598
// missile := Replace ( missile , missile + 1 , 2 ) ;
7571: LD_ADDR_VAR 0 14
7575: PUSH
7576: LD_VAR 0 14
7580: PPUSH
7581: LD_VAR 0 14
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: PPUSH
7590: LD_INT 2
7592: PPUSH
7593: CALL_OW 1
7597: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7598: LD_VAR 0 9
7602: PPUSH
7603: LD_VAR 0 13
7607: PPUSH
7608: CALL_OW 325
7612: PUSH
7613: LD_VAR 0 10
7617: PPUSH
7618: CALL_OW 255
7622: PPUSH
7623: LD_VAR 0 13
7627: PPUSH
7628: CALL_OW 325
7632: NOT
7633: AND
7634: IFFALSE 7663
// missile := Replace ( missile , missile + 1 , 3 ) ;
7636: LD_ADDR_VAR 0 14
7640: PUSH
7641: LD_VAR 0 14
7645: PPUSH
7646: LD_VAR 0 14
7650: PUSH
7651: LD_INT 1
7653: PLUS
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 1
7662: ST_TO_ADDR
// if missile < 2 then
7663: LD_VAR 0 14
7667: PUSH
7668: LD_INT 2
7670: LESS
7671: IFFALSE 7675
// exit ;
7673: GO 7897
// x := GetX ( enemy ) ;
7675: LD_ADDR_VAR 0 4
7679: PUSH
7680: LD_VAR 0 10
7684: PPUSH
7685: CALL_OW 250
7689: ST_TO_ADDR
// y := GetY ( enemy ) ;
7690: LD_ADDR_VAR 0 5
7694: PUSH
7695: LD_VAR 0 10
7699: PPUSH
7700: CALL_OW 251
7704: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7705: LD_ADDR_VAR 0 6
7709: PUSH
7710: LD_VAR 0 4
7714: PUSH
7715: LD_INT 1
7717: NEG
7718: PPUSH
7719: LD_INT 1
7721: PPUSH
7722: CALL_OW 12
7726: PLUS
7727: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7728: LD_ADDR_VAR 0 7
7732: PUSH
7733: LD_VAR 0 5
7737: PUSH
7738: LD_INT 1
7740: NEG
7741: PPUSH
7742: LD_INT 1
7744: PPUSH
7745: CALL_OW 12
7749: PLUS
7750: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7751: LD_VAR 0 6
7755: PPUSH
7756: LD_VAR 0 7
7760: PPUSH
7761: CALL_OW 488
7765: NOT
7766: IFFALSE 7788
// begin _x := x ;
7768: LD_ADDR_VAR 0 6
7772: PUSH
7773: LD_VAR 0 4
7777: ST_TO_ADDR
// _y := y ;
7778: LD_ADDR_VAR 0 7
7782: PUSH
7783: LD_VAR 0 5
7787: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7788: LD_ADDR_VAR 0 3
7792: PUSH
7793: LD_INT 1
7795: PPUSH
7796: LD_VAR 0 14
7800: PPUSH
7801: CALL_OW 12
7805: ST_TO_ADDR
// case i of 1 :
7806: LD_VAR 0 3
7810: PUSH
7811: LD_INT 1
7813: DOUBLE
7814: EQUAL
7815: IFTRUE 7819
7817: GO 7836
7819: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7820: LD_VAR 0 1
7824: PPUSH
7825: LD_VAR 0 10
7829: PPUSH
7830: CALL_OW 115
7834: GO 7897
7836: LD_INT 2
7838: DOUBLE
7839: EQUAL
7840: IFTRUE 7844
7842: GO 7866
7844: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7845: LD_VAR 0 1
7849: PPUSH
7850: LD_VAR 0 6
7854: PPUSH
7855: LD_VAR 0 7
7859: PPUSH
7860: CALL_OW 153
7864: GO 7897
7866: LD_INT 3
7868: DOUBLE
7869: EQUAL
7870: IFTRUE 7874
7872: GO 7896
7874: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7875: LD_VAR 0 1
7879: PPUSH
7880: LD_VAR 0 6
7884: PPUSH
7885: LD_VAR 0 7
7889: PPUSH
7890: CALL_OW 154
7894: GO 7897
7896: POP
// end ;
7897: LD_VAR 0 2
7901: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7902: LD_INT 0
7904: PPUSH
7905: PPUSH
7906: PPUSH
7907: PPUSH
7908: PPUSH
7909: PPUSH
// if not unit or not building then
7910: LD_VAR 0 1
7914: NOT
7915: PUSH
7916: LD_VAR 0 2
7920: NOT
7921: OR
7922: IFFALSE 7926
// exit ;
7924: GO 8084
// x := GetX ( building ) ;
7926: LD_ADDR_VAR 0 5
7930: PUSH
7931: LD_VAR 0 2
7935: PPUSH
7936: CALL_OW 250
7940: ST_TO_ADDR
// y := GetY ( building ) ;
7941: LD_ADDR_VAR 0 6
7945: PUSH
7946: LD_VAR 0 2
7950: PPUSH
7951: CALL_OW 251
7955: ST_TO_ADDR
// for i = 0 to 5 do
7956: LD_ADDR_VAR 0 4
7960: PUSH
7961: DOUBLE
7962: LD_INT 0
7964: DEC
7965: ST_TO_ADDR
7966: LD_INT 5
7968: PUSH
7969: FOR_TO
7970: IFFALSE 8082
// begin _x := ShiftX ( x , i , 3 ) ;
7972: LD_ADDR_VAR 0 7
7976: PUSH
7977: LD_VAR 0 5
7981: PPUSH
7982: LD_VAR 0 4
7986: PPUSH
7987: LD_INT 3
7989: PPUSH
7990: CALL_OW 272
7994: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
7995: LD_ADDR_VAR 0 8
7999: PUSH
8000: LD_VAR 0 6
8004: PPUSH
8005: LD_VAR 0 4
8009: PPUSH
8010: LD_INT 3
8012: PPUSH
8013: CALL_OW 273
8017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8018: LD_VAR 0 7
8022: PPUSH
8023: LD_VAR 0 8
8027: PPUSH
8028: CALL_OW 488
8032: NOT
8033: IFFALSE 8037
// continue ;
8035: GO 7969
// if HexInfo ( _x , _y ) = 0 then
8037: LD_VAR 0 7
8041: PPUSH
8042: LD_VAR 0 8
8046: PPUSH
8047: CALL_OW 428
8051: PUSH
8052: LD_INT 0
8054: EQUAL
8055: IFFALSE 8080
// begin ComMoveXY ( unit , _x , _y ) ;
8057: LD_VAR 0 1
8061: PPUSH
8062: LD_VAR 0 7
8066: PPUSH
8067: LD_VAR 0 8
8071: PPUSH
8072: CALL_OW 111
// exit ;
8076: POP
8077: POP
8078: GO 8084
// end ; end ;
8080: GO 7969
8082: POP
8083: POP
// end ;
8084: LD_VAR 0 3
8088: RET
// export function ScanBase ( side , base_area ) ; begin
8089: LD_INT 0
8091: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8092: LD_ADDR_VAR 0 3
8096: PUSH
8097: LD_VAR 0 2
8101: PPUSH
8102: LD_INT 81
8104: PUSH
8105: LD_VAR 0 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PPUSH
8114: CALL_OW 70
8118: ST_TO_ADDR
// end ;
8119: LD_VAR 0 3
8123: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8124: LD_INT 0
8126: PPUSH
8127: PPUSH
8128: PPUSH
8129: PPUSH
// result := false ;
8130: LD_ADDR_VAR 0 2
8134: PUSH
8135: LD_INT 0
8137: ST_TO_ADDR
// side := GetSide ( unit ) ;
8138: LD_ADDR_VAR 0 3
8142: PUSH
8143: LD_VAR 0 1
8147: PPUSH
8148: CALL_OW 255
8152: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8153: LD_ADDR_VAR 0 4
8157: PUSH
8158: LD_VAR 0 1
8162: PPUSH
8163: CALL_OW 248
8167: ST_TO_ADDR
// case nat of 1 :
8168: LD_VAR 0 4
8172: PUSH
8173: LD_INT 1
8175: DOUBLE
8176: EQUAL
8177: IFTRUE 8181
8179: GO 8192
8181: POP
// tech := tech_lassight ; 2 :
8182: LD_ADDR_VAR 0 5
8186: PUSH
8187: LD_INT 12
8189: ST_TO_ADDR
8190: GO 8231
8192: LD_INT 2
8194: DOUBLE
8195: EQUAL
8196: IFTRUE 8200
8198: GO 8211
8200: POP
// tech := tech_mortar ; 3 :
8201: LD_ADDR_VAR 0 5
8205: PUSH
8206: LD_INT 41
8208: ST_TO_ADDR
8209: GO 8231
8211: LD_INT 3
8213: DOUBLE
8214: EQUAL
8215: IFTRUE 8219
8217: GO 8230
8219: POP
// tech := tech_bazooka ; end ;
8220: LD_ADDR_VAR 0 5
8224: PUSH
8225: LD_INT 44
8227: ST_TO_ADDR
8228: GO 8231
8230: POP
// if Researched ( side , tech ) then
8231: LD_VAR 0 3
8235: PPUSH
8236: LD_VAR 0 5
8240: PPUSH
8241: CALL_OW 325
8245: IFFALSE 8272
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8247: LD_ADDR_VAR 0 2
8251: PUSH
8252: LD_INT 5
8254: PUSH
8255: LD_INT 8
8257: PUSH
8258: LD_INT 9
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_VAR 0 4
8270: ARRAY
8271: ST_TO_ADDR
// end ;
8272: LD_VAR 0 2
8276: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8277: LD_INT 0
8279: PPUSH
8280: PPUSH
8281: PPUSH
// if not mines then
8282: LD_VAR 0 2
8286: NOT
8287: IFFALSE 8291
// exit ;
8289: GO 8435
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8291: LD_ADDR_VAR 0 5
8295: PUSH
8296: LD_INT 81
8298: PUSH
8299: LD_VAR 0 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PUSH
8308: LD_INT 3
8310: PUSH
8311: LD_INT 21
8313: PUSH
8314: LD_INT 3
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: EMPTY
8326: LIST
8327: LIST
8328: PPUSH
8329: CALL_OW 69
8333: ST_TO_ADDR
// for i in mines do
8334: LD_ADDR_VAR 0 4
8338: PUSH
8339: LD_VAR 0 2
8343: PUSH
8344: FOR_IN
8345: IFFALSE 8433
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8347: LD_VAR 0 4
8351: PUSH
8352: LD_INT 1
8354: ARRAY
8355: PPUSH
8356: LD_VAR 0 4
8360: PUSH
8361: LD_INT 2
8363: ARRAY
8364: PPUSH
8365: CALL_OW 458
8369: NOT
8370: IFFALSE 8374
// continue ;
8372: GO 8344
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8374: LD_VAR 0 4
8378: PUSH
8379: LD_INT 1
8381: ARRAY
8382: PPUSH
8383: LD_VAR 0 4
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PPUSH
8392: CALL_OW 428
8396: PUSH
8397: LD_VAR 0 5
8401: IN
8402: IFFALSE 8431
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8404: LD_VAR 0 4
8408: PUSH
8409: LD_INT 1
8411: ARRAY
8412: PPUSH
8413: LD_VAR 0 4
8417: PUSH
8418: LD_INT 2
8420: ARRAY
8421: PPUSH
8422: LD_VAR 0 1
8426: PPUSH
8427: CALL_OW 456
// end ;
8431: GO 8344
8433: POP
8434: POP
// end ;
8435: LD_VAR 0 3
8439: RET
// export function Count ( array ) ; var i ; begin
8440: LD_INT 0
8442: PPUSH
8443: PPUSH
// result := 0 ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_INT 0
8451: ST_TO_ADDR
// for i in array do
8452: LD_ADDR_VAR 0 3
8456: PUSH
8457: LD_VAR 0 1
8461: PUSH
8462: FOR_IN
8463: IFFALSE 8487
// if i then
8465: LD_VAR 0 3
8469: IFFALSE 8485
// result := result + 1 ;
8471: LD_ADDR_VAR 0 2
8475: PUSH
8476: LD_VAR 0 2
8480: PUSH
8481: LD_INT 1
8483: PLUS
8484: ST_TO_ADDR
8485: GO 8462
8487: POP
8488: POP
// end ;
8489: LD_VAR 0 2
8493: RET
// export function IsEmpty ( building ) ; begin
8494: LD_INT 0
8496: PPUSH
// if not building then
8497: LD_VAR 0 1
8501: NOT
8502: IFFALSE 8506
// exit ;
8504: GO 8549
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8506: LD_ADDR_VAR 0 2
8510: PUSH
8511: LD_VAR 0 1
8515: PUSH
8516: LD_INT 22
8518: PUSH
8519: LD_VAR 0 1
8523: PPUSH
8524: CALL_OW 255
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 58
8535: PUSH
8536: EMPTY
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 69
8547: IN
8548: ST_TO_ADDR
// end ;
8549: LD_VAR 0 2
8553: RET
// export function IsNotFull ( building ) ; var places ; begin
8554: LD_INT 0
8556: PPUSH
8557: PPUSH
// if not building then
8558: LD_VAR 0 1
8562: NOT
8563: IFFALSE 8567
// exit ;
8565: GO 8738
// result := false ;
8567: LD_ADDR_VAR 0 2
8571: PUSH
8572: LD_INT 0
8574: ST_TO_ADDR
// places := 0 ;
8575: LD_ADDR_VAR 0 3
8579: PUSH
8580: LD_INT 0
8582: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 266
8592: PUSH
8593: LD_INT 0
8595: DOUBLE
8596: EQUAL
8597: IFTRUE 8655
8599: LD_INT 1
8601: DOUBLE
8602: EQUAL
8603: IFTRUE 8655
8605: LD_INT 6
8607: DOUBLE
8608: EQUAL
8609: IFTRUE 8655
8611: LD_INT 7
8613: DOUBLE
8614: EQUAL
8615: IFTRUE 8655
8617: LD_INT 8
8619: DOUBLE
8620: EQUAL
8621: IFTRUE 8655
8623: LD_INT 4
8625: DOUBLE
8626: EQUAL
8627: IFTRUE 8655
8629: LD_INT 5
8631: DOUBLE
8632: EQUAL
8633: IFTRUE 8655
8635: LD_INT 2
8637: DOUBLE
8638: EQUAL
8639: IFTRUE 8655
8641: LD_INT 3
8643: DOUBLE
8644: EQUAL
8645: IFTRUE 8655
8647: LD_INT 35
8649: DOUBLE
8650: EQUAL
8651: IFTRUE 8655
8653: GO 8666
8655: POP
// places := 6 ; b_bunker , b_breastwork :
8656: LD_ADDR_VAR 0 3
8660: PUSH
8661: LD_INT 6
8663: ST_TO_ADDR
8664: GO 8711
8666: LD_INT 32
8668: DOUBLE
8669: EQUAL
8670: IFTRUE 8680
8672: LD_INT 31
8674: DOUBLE
8675: EQUAL
8676: IFTRUE 8680
8678: GO 8691
8680: POP
// places := 1 ; b_control_tower :
8681: LD_ADDR_VAR 0 3
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
8689: GO 8711
8691: LD_INT 36
8693: DOUBLE
8694: EQUAL
8695: IFTRUE 8699
8697: GO 8710
8699: POP
// places := 3 ; end ;
8700: LD_ADDR_VAR 0 3
8704: PUSH
8705: LD_INT 3
8707: ST_TO_ADDR
8708: GO 8711
8710: POP
// if places then
8711: LD_VAR 0 3
8715: IFFALSE 8738
// result := UnitsInside ( building ) < places ;
8717: LD_ADDR_VAR 0 2
8721: PUSH
8722: LD_VAR 0 1
8726: PPUSH
8727: CALL_OW 313
8731: PUSH
8732: LD_VAR 0 3
8736: LESS
8737: ST_TO_ADDR
// end ;
8738: LD_VAR 0 2
8742: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8743: LD_INT 0
8745: PPUSH
8746: PPUSH
8747: PPUSH
8748: PPUSH
// tmp := [ ] ;
8749: LD_ADDR_VAR 0 3
8753: PUSH
8754: EMPTY
8755: ST_TO_ADDR
// list := [ ] ;
8756: LD_ADDR_VAR 0 5
8760: PUSH
8761: EMPTY
8762: ST_TO_ADDR
// for i = 16 to 25 do
8763: LD_ADDR_VAR 0 4
8767: PUSH
8768: DOUBLE
8769: LD_INT 16
8771: DEC
8772: ST_TO_ADDR
8773: LD_INT 25
8775: PUSH
8776: FOR_TO
8777: IFFALSE 8850
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8779: LD_ADDR_VAR 0 3
8783: PUSH
8784: LD_VAR 0 3
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_VAR 0 1
8796: PPUSH
8797: CALL_OW 255
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 91
8808: PUSH
8809: LD_VAR 0 1
8813: PUSH
8814: LD_INT 6
8816: PUSH
8817: EMPTY
8818: LIST
8819: LIST
8820: LIST
8821: PUSH
8822: LD_INT 30
8824: PUSH
8825: LD_VAR 0 4
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: PPUSH
8842: CALL_OW 69
8846: ADD
8847: ST_TO_ADDR
8848: GO 8776
8850: POP
8851: POP
// for i = 1 to tmp do
8852: LD_ADDR_VAR 0 4
8856: PUSH
8857: DOUBLE
8858: LD_INT 1
8860: DEC
8861: ST_TO_ADDR
8862: LD_VAR 0 3
8866: PUSH
8867: FOR_TO
8868: IFFALSE 8956
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8870: LD_ADDR_VAR 0 5
8874: PUSH
8875: LD_VAR 0 5
8879: PUSH
8880: LD_VAR 0 3
8884: PUSH
8885: LD_VAR 0 4
8889: ARRAY
8890: PPUSH
8891: CALL_OW 266
8895: PUSH
8896: LD_VAR 0 3
8900: PUSH
8901: LD_VAR 0 4
8905: ARRAY
8906: PPUSH
8907: CALL_OW 250
8911: PUSH
8912: LD_VAR 0 3
8916: PUSH
8917: LD_VAR 0 4
8921: ARRAY
8922: PPUSH
8923: CALL_OW 251
8927: PUSH
8928: LD_VAR 0 3
8932: PUSH
8933: LD_VAR 0 4
8937: ARRAY
8938: PPUSH
8939: CALL_OW 254
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: EMPTY
8951: LIST
8952: ADD
8953: ST_TO_ADDR
8954: GO 8867
8956: POP
8957: POP
// result := list ;
8958: LD_ADDR_VAR 0 2
8962: PUSH
8963: LD_VAR 0 5
8967: ST_TO_ADDR
// end ;
8968: LD_VAR 0 2
8972: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8973: LD_INT 0
8975: PPUSH
8976: PPUSH
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
// if not factory then
8982: LD_VAR 0 1
8986: NOT
8987: IFFALSE 8991
// exit ;
8989: GO 9584
// if control = control_apeman then
8991: LD_VAR 0 4
8995: PUSH
8996: LD_INT 5
8998: EQUAL
8999: IFFALSE 9108
// begin tmp := UnitsInside ( factory ) ;
9001: LD_ADDR_VAR 0 8
9005: PUSH
9006: LD_VAR 0 1
9010: PPUSH
9011: CALL_OW 313
9015: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9016: LD_VAR 0 8
9020: PPUSH
9021: LD_INT 25
9023: PUSH
9024: LD_INT 12
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 72
9035: NOT
9036: IFFALSE 9046
// control := control_manual ;
9038: LD_ADDR_VAR 0 4
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9046: LD_ADDR_VAR 0 8
9050: PUSH
9051: LD_VAR 0 1
9055: PPUSH
9056: CALL 8743 0 1
9060: ST_TO_ADDR
// if tmp then
9061: LD_VAR 0 8
9065: IFFALSE 9108
// begin for i in tmp do
9067: LD_ADDR_VAR 0 7
9071: PUSH
9072: LD_VAR 0 8
9076: PUSH
9077: FOR_IN
9078: IFFALSE 9106
// if i [ 1 ] = b_ext_radio then
9080: LD_VAR 0 7
9084: PUSH
9085: LD_INT 1
9087: ARRAY
9088: PUSH
9089: LD_INT 22
9091: EQUAL
9092: IFFALSE 9104
// begin control := control_remote ;
9094: LD_ADDR_VAR 0 4
9098: PUSH
9099: LD_INT 2
9101: ST_TO_ADDR
// break ;
9102: GO 9106
// end ;
9104: GO 9077
9106: POP
9107: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9108: LD_VAR 0 1
9112: PPUSH
9113: LD_VAR 0 2
9117: PPUSH
9118: LD_VAR 0 3
9122: PPUSH
9123: LD_VAR 0 4
9127: PPUSH
9128: LD_VAR 0 5
9132: PPUSH
9133: CALL_OW 448
9137: IFFALSE 9172
// begin result := [ chassis , engine , control , weapon ] ;
9139: LD_ADDR_VAR 0 6
9143: PUSH
9144: LD_VAR 0 2
9148: PUSH
9149: LD_VAR 0 3
9153: PUSH
9154: LD_VAR 0 4
9158: PUSH
9159: LD_VAR 0 5
9163: PUSH
9164: EMPTY
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: ST_TO_ADDR
// exit ;
9170: GO 9584
// end ; _chassis := AvailableChassisList ( factory ) ;
9172: LD_ADDR_VAR 0 9
9176: PUSH
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 475
9186: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9187: LD_ADDR_VAR 0 11
9191: PUSH
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 476
9201: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9202: LD_ADDR_VAR 0 12
9206: PUSH
9207: LD_VAR 0 1
9211: PPUSH
9212: CALL_OW 477
9216: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9217: LD_ADDR_VAR 0 10
9221: PUSH
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 478
9231: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9232: LD_VAR 0 9
9236: NOT
9237: PUSH
9238: LD_VAR 0 11
9242: NOT
9243: OR
9244: PUSH
9245: LD_VAR 0 12
9249: NOT
9250: OR
9251: PUSH
9252: LD_VAR 0 10
9256: NOT
9257: OR
9258: IFFALSE 9293
// begin result := [ chassis , engine , control , weapon ] ;
9260: LD_ADDR_VAR 0 6
9264: PUSH
9265: LD_VAR 0 2
9269: PUSH
9270: LD_VAR 0 3
9274: PUSH
9275: LD_VAR 0 4
9279: PUSH
9280: LD_VAR 0 5
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: ST_TO_ADDR
// exit ;
9291: GO 9584
// end ; if not chassis in _chassis then
9293: LD_VAR 0 2
9297: PUSH
9298: LD_VAR 0 9
9302: IN
9303: NOT
9304: IFFALSE 9330
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9306: LD_ADDR_VAR 0 2
9310: PUSH
9311: LD_VAR 0 9
9315: PUSH
9316: LD_INT 1
9318: PPUSH
9319: LD_VAR 0 9
9323: PPUSH
9324: CALL_OW 12
9328: ARRAY
9329: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9330: LD_VAR 0 2
9334: PPUSH
9335: LD_VAR 0 3
9339: PPUSH
9340: CALL 9589 0 2
9344: NOT
9345: IFFALSE 9404
// repeat engine := _engine [ 1 ] ;
9347: LD_ADDR_VAR 0 3
9351: PUSH
9352: LD_VAR 0 11
9356: PUSH
9357: LD_INT 1
9359: ARRAY
9360: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9361: LD_ADDR_VAR 0 11
9365: PUSH
9366: LD_VAR 0 11
9370: PPUSH
9371: LD_INT 1
9373: PPUSH
9374: CALL_OW 3
9378: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9379: LD_VAR 0 2
9383: PPUSH
9384: LD_VAR 0 3
9388: PPUSH
9389: CALL 9589 0 2
9393: PUSH
9394: LD_VAR 0 11
9398: PUSH
9399: EMPTY
9400: EQUAL
9401: OR
9402: IFFALSE 9347
// if not control in _control then
9404: LD_VAR 0 4
9408: PUSH
9409: LD_VAR 0 12
9413: IN
9414: NOT
9415: IFFALSE 9441
// control := _control [ rand ( 1 , _control ) ] ;
9417: LD_ADDR_VAR 0 4
9421: PUSH
9422: LD_VAR 0 12
9426: PUSH
9427: LD_INT 1
9429: PPUSH
9430: LD_VAR 0 12
9434: PPUSH
9435: CALL_OW 12
9439: ARRAY
9440: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9441: LD_VAR 0 2
9445: PPUSH
9446: LD_VAR 0 5
9450: PPUSH
9451: CALL 9809 0 2
9455: NOT
9456: IFFALSE 9515
// repeat weapon := _weapon [ 1 ] ;
9458: LD_ADDR_VAR 0 5
9462: PUSH
9463: LD_VAR 0 10
9467: PUSH
9468: LD_INT 1
9470: ARRAY
9471: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9472: LD_ADDR_VAR 0 10
9476: PUSH
9477: LD_VAR 0 10
9481: PPUSH
9482: LD_INT 1
9484: PPUSH
9485: CALL_OW 3
9489: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9490: LD_VAR 0 2
9494: PPUSH
9495: LD_VAR 0 5
9499: PPUSH
9500: CALL 9809 0 2
9504: PUSH
9505: LD_VAR 0 10
9509: PUSH
9510: EMPTY
9511: EQUAL
9512: OR
9513: IFFALSE 9458
// result := [ ] ;
9515: LD_ADDR_VAR 0 6
9519: PUSH
9520: EMPTY
9521: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9522: LD_VAR 0 1
9526: PPUSH
9527: LD_VAR 0 2
9531: PPUSH
9532: LD_VAR 0 3
9536: PPUSH
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_VAR 0 5
9546: PPUSH
9547: CALL_OW 448
9551: IFFALSE 9584
// result := [ chassis , engine , control , weapon ] ;
9553: LD_ADDR_VAR 0 6
9557: PUSH
9558: LD_VAR 0 2
9562: PUSH
9563: LD_VAR 0 3
9567: PUSH
9568: LD_VAR 0 4
9572: PUSH
9573: LD_VAR 0 5
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: ST_TO_ADDR
// end ;
9584: LD_VAR 0 6
9588: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9589: LD_INT 0
9591: PPUSH
// if not chassis or not engine then
9592: LD_VAR 0 1
9596: NOT
9597: PUSH
9598: LD_VAR 0 2
9602: NOT
9603: OR
9604: IFFALSE 9608
// exit ;
9606: GO 9804
// case engine of engine_solar :
9608: LD_VAR 0 2
9612: PUSH
9613: LD_INT 2
9615: DOUBLE
9616: EQUAL
9617: IFTRUE 9621
9619: GO 9659
9621: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9622: LD_ADDR_VAR 0 3
9626: PUSH
9627: LD_INT 11
9629: PUSH
9630: LD_INT 12
9632: PUSH
9633: LD_INT 13
9635: PUSH
9636: LD_INT 14
9638: PUSH
9639: LD_INT 1
9641: PUSH
9642: LD_INT 2
9644: PUSH
9645: LD_INT 3
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: ST_TO_ADDR
9657: GO 9788
9659: LD_INT 1
9661: DOUBLE
9662: EQUAL
9663: IFTRUE 9667
9665: GO 9729
9667: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9668: LD_ADDR_VAR 0 3
9672: PUSH
9673: LD_INT 11
9675: PUSH
9676: LD_INT 12
9678: PUSH
9679: LD_INT 13
9681: PUSH
9682: LD_INT 14
9684: PUSH
9685: LD_INT 1
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: LD_INT 3
9693: PUSH
9694: LD_INT 4
9696: PUSH
9697: LD_INT 5
9699: PUSH
9700: LD_INT 21
9702: PUSH
9703: LD_INT 23
9705: PUSH
9706: LD_INT 22
9708: PUSH
9709: LD_INT 24
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: ST_TO_ADDR
9727: GO 9788
9729: LD_INT 3
9731: DOUBLE
9732: EQUAL
9733: IFTRUE 9737
9735: GO 9787
9737: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9738: LD_ADDR_VAR 0 3
9742: PUSH
9743: LD_INT 13
9745: PUSH
9746: LD_INT 14
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: LD_INT 3
9754: PUSH
9755: LD_INT 4
9757: PUSH
9758: LD_INT 5
9760: PUSH
9761: LD_INT 21
9763: PUSH
9764: LD_INT 22
9766: PUSH
9767: LD_INT 23
9769: PUSH
9770: LD_INT 24
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: ST_TO_ADDR
9785: GO 9788
9787: POP
// result := ( chassis in result ) ;
9788: LD_ADDR_VAR 0 3
9792: PUSH
9793: LD_VAR 0 1
9797: PUSH
9798: LD_VAR 0 3
9802: IN
9803: ST_TO_ADDR
// end ;
9804: LD_VAR 0 3
9808: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9809: LD_INT 0
9811: PPUSH
// if not chassis or not weapon then
9812: LD_VAR 0 1
9816: NOT
9817: PUSH
9818: LD_VAR 0 2
9822: NOT
9823: OR
9824: IFFALSE 9828
// exit ;
9826: GO 10888
// case weapon of us_machine_gun :
9828: LD_VAR 0 2
9832: PUSH
9833: LD_INT 2
9835: DOUBLE
9836: EQUAL
9837: IFTRUE 9841
9839: GO 9871
9841: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9842: LD_ADDR_VAR 0 3
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: LD_INT 2
9852: PUSH
9853: LD_INT 3
9855: PUSH
9856: LD_INT 4
9858: PUSH
9859: LD_INT 5
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: ST_TO_ADDR
9869: GO 10872
9871: LD_INT 3
9873: DOUBLE
9874: EQUAL
9875: IFTRUE 9879
9877: GO 9909
9879: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9880: LD_ADDR_VAR 0 3
9884: PUSH
9885: LD_INT 1
9887: PUSH
9888: LD_INT 2
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: LD_INT 4
9896: PUSH
9897: LD_INT 5
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: ST_TO_ADDR
9907: GO 10872
9909: LD_INT 11
9911: DOUBLE
9912: EQUAL
9913: IFTRUE 9917
9915: GO 9947
9917: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9918: LD_ADDR_VAR 0 3
9922: PUSH
9923: LD_INT 1
9925: PUSH
9926: LD_INT 2
9928: PUSH
9929: LD_INT 3
9931: PUSH
9932: LD_INT 4
9934: PUSH
9935: LD_INT 5
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: ST_TO_ADDR
9945: GO 10872
9947: LD_INT 4
9949: DOUBLE
9950: EQUAL
9951: IFTRUE 9955
9953: GO 9981
9955: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9956: LD_ADDR_VAR 0 3
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: LD_INT 3
9966: PUSH
9967: LD_INT 4
9969: PUSH
9970: LD_INT 5
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: ST_TO_ADDR
9979: GO 10872
9981: LD_INT 5
9983: DOUBLE
9984: EQUAL
9985: IFTRUE 9989
9987: GO 10015
9989: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9990: LD_ADDR_VAR 0 3
9994: PUSH
9995: LD_INT 2
9997: PUSH
9998: LD_INT 3
10000: PUSH
10001: LD_INT 4
10003: PUSH
10004: LD_INT 5
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: ST_TO_ADDR
10013: GO 10872
10015: LD_INT 9
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10049
10023: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: LD_INT 2
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: LD_INT 4
10037: PUSH
10038: LD_INT 5
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: ST_TO_ADDR
10047: GO 10872
10049: LD_INT 7
10051: DOUBLE
10052: EQUAL
10053: IFTRUE 10057
10055: GO 10083
10057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10058: LD_ADDR_VAR 0 3
10062: PUSH
10063: LD_INT 2
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: LD_INT 4
10071: PUSH
10072: LD_INT 5
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: ST_TO_ADDR
10081: GO 10872
10083: LD_INT 12
10085: DOUBLE
10086: EQUAL
10087: IFTRUE 10091
10089: GO 10117
10091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10092: LD_ADDR_VAR 0 3
10096: PUSH
10097: LD_INT 2
10099: PUSH
10100: LD_INT 3
10102: PUSH
10103: LD_INT 4
10105: PUSH
10106: LD_INT 5
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: ST_TO_ADDR
10115: GO 10872
10117: LD_INT 13
10119: DOUBLE
10120: EQUAL
10121: IFTRUE 10125
10123: GO 10151
10125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10126: LD_ADDR_VAR 0 3
10130: PUSH
10131: LD_INT 2
10133: PUSH
10134: LD_INT 3
10136: PUSH
10137: LD_INT 4
10139: PUSH
10140: LD_INT 5
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: ST_TO_ADDR
10149: GO 10872
10151: LD_INT 14
10153: DOUBLE
10154: EQUAL
10155: IFTRUE 10159
10157: GO 10177
10159: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10160: LD_ADDR_VAR 0 3
10164: PUSH
10165: LD_INT 4
10167: PUSH
10168: LD_INT 5
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: ST_TO_ADDR
10175: GO 10872
10177: LD_INT 6
10179: DOUBLE
10180: EQUAL
10181: IFTRUE 10185
10183: GO 10203
10185: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10186: LD_ADDR_VAR 0 3
10190: PUSH
10191: LD_INT 4
10193: PUSH
10194: LD_INT 5
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: ST_TO_ADDR
10201: GO 10872
10203: LD_INT 10
10205: DOUBLE
10206: EQUAL
10207: IFTRUE 10211
10209: GO 10229
10211: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10212: LD_ADDR_VAR 0 3
10216: PUSH
10217: LD_INT 4
10219: PUSH
10220: LD_INT 5
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: ST_TO_ADDR
10227: GO 10872
10229: LD_INT 22
10231: DOUBLE
10232: EQUAL
10233: IFTRUE 10237
10235: GO 10263
10237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10238: LD_ADDR_VAR 0 3
10242: PUSH
10243: LD_INT 11
10245: PUSH
10246: LD_INT 12
10248: PUSH
10249: LD_INT 13
10251: PUSH
10252: LD_INT 14
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: ST_TO_ADDR
10261: GO 10872
10263: LD_INT 23
10265: DOUBLE
10266: EQUAL
10267: IFTRUE 10271
10269: GO 10297
10271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10272: LD_ADDR_VAR 0 3
10276: PUSH
10277: LD_INT 11
10279: PUSH
10280: LD_INT 12
10282: PUSH
10283: LD_INT 13
10285: PUSH
10286: LD_INT 14
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: ST_TO_ADDR
10295: GO 10872
10297: LD_INT 24
10299: DOUBLE
10300: EQUAL
10301: IFTRUE 10305
10303: GO 10331
10305: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10306: LD_ADDR_VAR 0 3
10310: PUSH
10311: LD_INT 11
10313: PUSH
10314: LD_INT 12
10316: PUSH
10317: LD_INT 13
10319: PUSH
10320: LD_INT 14
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: ST_TO_ADDR
10329: GO 10872
10331: LD_INT 30
10333: DOUBLE
10334: EQUAL
10335: IFTRUE 10339
10337: GO 10365
10339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10340: LD_ADDR_VAR 0 3
10344: PUSH
10345: LD_INT 11
10347: PUSH
10348: LD_INT 12
10350: PUSH
10351: LD_INT 13
10353: PUSH
10354: LD_INT 14
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: ST_TO_ADDR
10363: GO 10872
10365: LD_INT 25
10367: DOUBLE
10368: EQUAL
10369: IFTRUE 10373
10371: GO 10391
10373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10374: LD_ADDR_VAR 0 3
10378: PUSH
10379: LD_INT 13
10381: PUSH
10382: LD_INT 14
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: ST_TO_ADDR
10389: GO 10872
10391: LD_INT 27
10393: DOUBLE
10394: EQUAL
10395: IFTRUE 10399
10397: GO 10417
10399: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10400: LD_ADDR_VAR 0 3
10404: PUSH
10405: LD_INT 13
10407: PUSH
10408: LD_INT 14
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: ST_TO_ADDR
10415: GO 10872
10417: LD_INT 92
10419: DOUBLE
10420: EQUAL
10421: IFTRUE 10425
10423: GO 10451
10425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10426: LD_ADDR_VAR 0 3
10430: PUSH
10431: LD_INT 11
10433: PUSH
10434: LD_INT 12
10436: PUSH
10437: LD_INT 13
10439: PUSH
10440: LD_INT 14
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: ST_TO_ADDR
10449: GO 10872
10451: LD_INT 28
10453: DOUBLE
10454: EQUAL
10455: IFTRUE 10459
10457: GO 10477
10459: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10460: LD_ADDR_VAR 0 3
10464: PUSH
10465: LD_INT 13
10467: PUSH
10468: LD_INT 14
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: ST_TO_ADDR
10475: GO 10872
10477: LD_INT 29
10479: DOUBLE
10480: EQUAL
10481: IFTRUE 10485
10483: GO 10503
10485: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10486: LD_ADDR_VAR 0 3
10490: PUSH
10491: LD_INT 13
10493: PUSH
10494: LD_INT 14
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: ST_TO_ADDR
10501: GO 10872
10503: LD_INT 31
10505: DOUBLE
10506: EQUAL
10507: IFTRUE 10511
10509: GO 10529
10511: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10512: LD_ADDR_VAR 0 3
10516: PUSH
10517: LD_INT 13
10519: PUSH
10520: LD_INT 14
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: ST_TO_ADDR
10527: GO 10872
10529: LD_INT 26
10531: DOUBLE
10532: EQUAL
10533: IFTRUE 10537
10535: GO 10555
10537: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10538: LD_ADDR_VAR 0 3
10542: PUSH
10543: LD_INT 13
10545: PUSH
10546: LD_INT 14
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: ST_TO_ADDR
10553: GO 10872
10555: LD_INT 42
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10589
10563: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10564: LD_ADDR_VAR 0 3
10568: PUSH
10569: LD_INT 21
10571: PUSH
10572: LD_INT 22
10574: PUSH
10575: LD_INT 23
10577: PUSH
10578: LD_INT 24
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: ST_TO_ADDR
10587: GO 10872
10589: LD_INT 43
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10623
10597: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10598: LD_ADDR_VAR 0 3
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_INT 23
10611: PUSH
10612: LD_INT 24
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: ST_TO_ADDR
10621: GO 10872
10623: LD_INT 44
10625: DOUBLE
10626: EQUAL
10627: IFTRUE 10631
10629: GO 10657
10631: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10632: LD_ADDR_VAR 0 3
10636: PUSH
10637: LD_INT 21
10639: PUSH
10640: LD_INT 22
10642: PUSH
10643: LD_INT 23
10645: PUSH
10646: LD_INT 24
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: ST_TO_ADDR
10655: GO 10872
10657: LD_INT 45
10659: DOUBLE
10660: EQUAL
10661: IFTRUE 10665
10663: GO 10691
10665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10666: LD_ADDR_VAR 0 3
10670: PUSH
10671: LD_INT 21
10673: PUSH
10674: LD_INT 22
10676: PUSH
10677: LD_INT 23
10679: PUSH
10680: LD_INT 24
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: ST_TO_ADDR
10689: GO 10872
10691: LD_INT 49
10693: DOUBLE
10694: EQUAL
10695: IFTRUE 10699
10697: GO 10725
10699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10700: LD_ADDR_VAR 0 3
10704: PUSH
10705: LD_INT 21
10707: PUSH
10708: LD_INT 22
10710: PUSH
10711: LD_INT 23
10713: PUSH
10714: LD_INT 24
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: ST_TO_ADDR
10723: GO 10872
10725: LD_INT 51
10727: DOUBLE
10728: EQUAL
10729: IFTRUE 10733
10731: GO 10759
10733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10734: LD_ADDR_VAR 0 3
10738: PUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 23
10747: PUSH
10748: LD_INT 24
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: ST_TO_ADDR
10757: GO 10872
10759: LD_INT 52
10761: DOUBLE
10762: EQUAL
10763: IFTRUE 10767
10765: GO 10793
10767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10768: LD_ADDR_VAR 0 3
10772: PUSH
10773: LD_INT 21
10775: PUSH
10776: LD_INT 22
10778: PUSH
10779: LD_INT 23
10781: PUSH
10782: LD_INT 24
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: ST_TO_ADDR
10791: GO 10872
10793: LD_INT 53
10795: DOUBLE
10796: EQUAL
10797: IFTRUE 10801
10799: GO 10819
10801: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10802: LD_ADDR_VAR 0 3
10806: PUSH
10807: LD_INT 23
10809: PUSH
10810: LD_INT 24
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: ST_TO_ADDR
10817: GO 10872
10819: LD_INT 46
10821: DOUBLE
10822: EQUAL
10823: IFTRUE 10827
10825: GO 10845
10827: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10828: LD_ADDR_VAR 0 3
10832: PUSH
10833: LD_INT 23
10835: PUSH
10836: LD_INT 24
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: ST_TO_ADDR
10843: GO 10872
10845: LD_INT 47
10847: DOUBLE
10848: EQUAL
10849: IFTRUE 10853
10851: GO 10871
10853: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10854: LD_ADDR_VAR 0 3
10858: PUSH
10859: LD_INT 23
10861: PUSH
10862: LD_INT 24
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: ST_TO_ADDR
10869: GO 10872
10871: POP
// result := ( chassis in result ) ;
10872: LD_ADDR_VAR 0 3
10876: PUSH
10877: LD_VAR 0 1
10881: PUSH
10882: LD_VAR 0 3
10886: IN
10887: ST_TO_ADDR
// end ;
10888: LD_VAR 0 3
10892: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10893: LD_INT 0
10895: PPUSH
10896: PPUSH
10897: PPUSH
10898: PPUSH
10899: PPUSH
10900: PPUSH
10901: PPUSH
// result := array ;
10902: LD_ADDR_VAR 0 5
10906: PUSH
10907: LD_VAR 0 1
10911: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10912: LD_VAR 0 1
10916: NOT
10917: PUSH
10918: LD_VAR 0 2
10922: NOT
10923: OR
10924: PUSH
10925: LD_VAR 0 3
10929: NOT
10930: OR
10931: PUSH
10932: LD_VAR 0 2
10936: PUSH
10937: LD_VAR 0 1
10941: GREATER
10942: OR
10943: PUSH
10944: LD_VAR 0 3
10948: PUSH
10949: LD_VAR 0 1
10953: GREATER
10954: OR
10955: IFFALSE 10959
// exit ;
10957: GO 11255
// if direction then
10959: LD_VAR 0 4
10963: IFFALSE 11027
// begin d := 1 ;
10965: LD_ADDR_VAR 0 9
10969: PUSH
10970: LD_INT 1
10972: ST_TO_ADDR
// if i_from > i_to then
10973: LD_VAR 0 2
10977: PUSH
10978: LD_VAR 0 3
10982: GREATER
10983: IFFALSE 11009
// length := ( array - i_from ) + i_to else
10985: LD_ADDR_VAR 0 11
10989: PUSH
10990: LD_VAR 0 1
10994: PUSH
10995: LD_VAR 0 2
10999: MINUS
11000: PUSH
11001: LD_VAR 0 3
11005: PLUS
11006: ST_TO_ADDR
11007: GO 11025
// length := i_to - i_from ;
11009: LD_ADDR_VAR 0 11
11013: PUSH
11014: LD_VAR 0 3
11018: PUSH
11019: LD_VAR 0 2
11023: MINUS
11024: ST_TO_ADDR
// end else
11025: GO 11088
// begin d := - 1 ;
11027: LD_ADDR_VAR 0 9
11031: PUSH
11032: LD_INT 1
11034: NEG
11035: ST_TO_ADDR
// if i_from > i_to then
11036: LD_VAR 0 2
11040: PUSH
11041: LD_VAR 0 3
11045: GREATER
11046: IFFALSE 11066
// length := i_from - i_to else
11048: LD_ADDR_VAR 0 11
11052: PUSH
11053: LD_VAR 0 2
11057: PUSH
11058: LD_VAR 0 3
11062: MINUS
11063: ST_TO_ADDR
11064: GO 11088
// length := ( array - i_to ) + i_from ;
11066: LD_ADDR_VAR 0 11
11070: PUSH
11071: LD_VAR 0 1
11075: PUSH
11076: LD_VAR 0 3
11080: MINUS
11081: PUSH
11082: LD_VAR 0 2
11086: PLUS
11087: ST_TO_ADDR
// end ; if not length then
11088: LD_VAR 0 11
11092: NOT
11093: IFFALSE 11097
// exit ;
11095: GO 11255
// tmp := array ;
11097: LD_ADDR_VAR 0 10
11101: PUSH
11102: LD_VAR 0 1
11106: ST_TO_ADDR
// for i = 1 to length do
11107: LD_ADDR_VAR 0 6
11111: PUSH
11112: DOUBLE
11113: LD_INT 1
11115: DEC
11116: ST_TO_ADDR
11117: LD_VAR 0 11
11121: PUSH
11122: FOR_TO
11123: IFFALSE 11243
// begin for j = 1 to array do
11125: LD_ADDR_VAR 0 7
11129: PUSH
11130: DOUBLE
11131: LD_INT 1
11133: DEC
11134: ST_TO_ADDR
11135: LD_VAR 0 1
11139: PUSH
11140: FOR_TO
11141: IFFALSE 11229
// begin k := j + d ;
11143: LD_ADDR_VAR 0 8
11147: PUSH
11148: LD_VAR 0 7
11152: PUSH
11153: LD_VAR 0 9
11157: PLUS
11158: ST_TO_ADDR
// if k > array then
11159: LD_VAR 0 8
11163: PUSH
11164: LD_VAR 0 1
11168: GREATER
11169: IFFALSE 11179
// k := 1 ;
11171: LD_ADDR_VAR 0 8
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// if not k then
11179: LD_VAR 0 8
11183: NOT
11184: IFFALSE 11196
// k := array ;
11186: LD_ADDR_VAR 0 8
11190: PUSH
11191: LD_VAR 0 1
11195: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11196: LD_ADDR_VAR 0 10
11200: PUSH
11201: LD_VAR 0 10
11205: PPUSH
11206: LD_VAR 0 8
11210: PPUSH
11211: LD_VAR 0 1
11215: PUSH
11216: LD_VAR 0 7
11220: ARRAY
11221: PPUSH
11222: CALL_OW 1
11226: ST_TO_ADDR
// end ;
11227: GO 11140
11229: POP
11230: POP
// array := tmp ;
11231: LD_ADDR_VAR 0 1
11235: PUSH
11236: LD_VAR 0 10
11240: ST_TO_ADDR
// end ;
11241: GO 11122
11243: POP
11244: POP
// result := array ;
11245: LD_ADDR_VAR 0 5
11249: PUSH
11250: LD_VAR 0 1
11254: ST_TO_ADDR
// end ;
11255: LD_VAR 0 5
11259: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11260: LD_INT 0
11262: PPUSH
11263: PPUSH
// result := 0 ;
11264: LD_ADDR_VAR 0 3
11268: PUSH
11269: LD_INT 0
11271: ST_TO_ADDR
// if not array or not value in array then
11272: LD_VAR 0 1
11276: NOT
11277: PUSH
11278: LD_VAR 0 2
11282: PUSH
11283: LD_VAR 0 1
11287: IN
11288: NOT
11289: OR
11290: IFFALSE 11294
// exit ;
11292: GO 11348
// for i = 1 to array do
11294: LD_ADDR_VAR 0 4
11298: PUSH
11299: DOUBLE
11300: LD_INT 1
11302: DEC
11303: ST_TO_ADDR
11304: LD_VAR 0 1
11308: PUSH
11309: FOR_TO
11310: IFFALSE 11346
// if value = array [ i ] then
11312: LD_VAR 0 2
11316: PUSH
11317: LD_VAR 0 1
11321: PUSH
11322: LD_VAR 0 4
11326: ARRAY
11327: EQUAL
11328: IFFALSE 11344
// begin result := i ;
11330: LD_ADDR_VAR 0 3
11334: PUSH
11335: LD_VAR 0 4
11339: ST_TO_ADDR
// exit ;
11340: POP
11341: POP
11342: GO 11348
// end ;
11344: GO 11309
11346: POP
11347: POP
// end ;
11348: LD_VAR 0 3
11352: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11353: LD_INT 0
11355: PPUSH
// vc_chassis := chassis ;
11356: LD_ADDR_OWVAR 37
11360: PUSH
11361: LD_VAR 0 1
11365: ST_TO_ADDR
// vc_engine := engine ;
11366: LD_ADDR_OWVAR 39
11370: PUSH
11371: LD_VAR 0 2
11375: ST_TO_ADDR
// vc_control := control ;
11376: LD_ADDR_OWVAR 38
11380: PUSH
11381: LD_VAR 0 3
11385: ST_TO_ADDR
// vc_weapon := weapon ;
11386: LD_ADDR_OWVAR 40
11390: PUSH
11391: LD_VAR 0 4
11395: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11396: LD_ADDR_OWVAR 41
11400: PUSH
11401: LD_VAR 0 5
11405: ST_TO_ADDR
// end ;
11406: LD_VAR 0 6
11410: RET
// export function WantPlant ( unit ) ; var task ; begin
11411: LD_INT 0
11413: PPUSH
11414: PPUSH
// result := false ;
11415: LD_ADDR_VAR 0 2
11419: PUSH
11420: LD_INT 0
11422: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11423: LD_ADDR_VAR 0 3
11427: PUSH
11428: LD_VAR 0 1
11432: PPUSH
11433: CALL_OW 437
11437: ST_TO_ADDR
// if task then
11438: LD_VAR 0 3
11442: IFFALSE 11470
// if task [ 1 ] [ 1 ] = p then
11444: LD_VAR 0 3
11448: PUSH
11449: LD_INT 1
11451: ARRAY
11452: PUSH
11453: LD_INT 1
11455: ARRAY
11456: PUSH
11457: LD_STRING p
11459: EQUAL
11460: IFFALSE 11470
// result := true ;
11462: LD_ADDR_VAR 0 2
11466: PUSH
11467: LD_INT 1
11469: ST_TO_ADDR
// end ;
11470: LD_VAR 0 2
11474: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11475: LD_INT 0
11477: PPUSH
11478: PPUSH
11479: PPUSH
11480: PPUSH
// if pos < 1 then
11481: LD_VAR 0 2
11485: PUSH
11486: LD_INT 1
11488: LESS
11489: IFFALSE 11493
// exit ;
11491: GO 11796
// if pos = 1 then
11493: LD_VAR 0 2
11497: PUSH
11498: LD_INT 1
11500: EQUAL
11501: IFFALSE 11534
// result := Replace ( arr , pos [ 1 ] , value ) else
11503: LD_ADDR_VAR 0 4
11507: PUSH
11508: LD_VAR 0 1
11512: PPUSH
11513: LD_VAR 0 2
11517: PUSH
11518: LD_INT 1
11520: ARRAY
11521: PPUSH
11522: LD_VAR 0 3
11526: PPUSH
11527: CALL_OW 1
11531: ST_TO_ADDR
11532: GO 11796
// begin tmp := arr ;
11534: LD_ADDR_VAR 0 6
11538: PUSH
11539: LD_VAR 0 1
11543: ST_TO_ADDR
// s_arr := [ tmp ] ;
11544: LD_ADDR_VAR 0 7
11548: PUSH
11549: LD_VAR 0 6
11553: PUSH
11554: EMPTY
11555: LIST
11556: ST_TO_ADDR
// for i = 1 to pos - 1 do
11557: LD_ADDR_VAR 0 5
11561: PUSH
11562: DOUBLE
11563: LD_INT 1
11565: DEC
11566: ST_TO_ADDR
11567: LD_VAR 0 2
11571: PUSH
11572: LD_INT 1
11574: MINUS
11575: PUSH
11576: FOR_TO
11577: IFFALSE 11622
// begin tmp := tmp [ pos [ i ] ] ;
11579: LD_ADDR_VAR 0 6
11583: PUSH
11584: LD_VAR 0 6
11588: PUSH
11589: LD_VAR 0 2
11593: PUSH
11594: LD_VAR 0 5
11598: ARRAY
11599: ARRAY
11600: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11601: LD_ADDR_VAR 0 7
11605: PUSH
11606: LD_VAR 0 7
11610: PUSH
11611: LD_VAR 0 6
11615: PUSH
11616: EMPTY
11617: LIST
11618: ADD
11619: ST_TO_ADDR
// end ;
11620: GO 11576
11622: POP
11623: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11624: LD_ADDR_VAR 0 6
11628: PUSH
11629: LD_VAR 0 6
11633: PPUSH
11634: LD_VAR 0 2
11638: PUSH
11639: LD_VAR 0 2
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 3
11649: PPUSH
11650: CALL_OW 1
11654: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11655: LD_ADDR_VAR 0 7
11659: PUSH
11660: LD_VAR 0 7
11664: PPUSH
11665: LD_VAR 0 7
11669: PPUSH
11670: LD_VAR 0 6
11674: PPUSH
11675: CALL_OW 1
11679: ST_TO_ADDR
// for i = s_arr downto 2 do
11680: LD_ADDR_VAR 0 5
11684: PUSH
11685: DOUBLE
11686: LD_VAR 0 7
11690: INC
11691: ST_TO_ADDR
11692: LD_INT 2
11694: PUSH
11695: FOR_DOWNTO
11696: IFFALSE 11780
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11698: LD_ADDR_VAR 0 6
11702: PUSH
11703: LD_VAR 0 7
11707: PUSH
11708: LD_VAR 0 5
11712: PUSH
11713: LD_INT 1
11715: MINUS
11716: ARRAY
11717: PPUSH
11718: LD_VAR 0 2
11722: PUSH
11723: LD_VAR 0 5
11727: PUSH
11728: LD_INT 1
11730: MINUS
11731: ARRAY
11732: PPUSH
11733: LD_VAR 0 7
11737: PUSH
11738: LD_VAR 0 5
11742: ARRAY
11743: PPUSH
11744: CALL_OW 1
11748: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11749: LD_ADDR_VAR 0 7
11753: PUSH
11754: LD_VAR 0 7
11758: PPUSH
11759: LD_VAR 0 5
11763: PUSH
11764: LD_INT 1
11766: MINUS
11767: PPUSH
11768: LD_VAR 0 6
11772: PPUSH
11773: CALL_OW 1
11777: ST_TO_ADDR
// end ;
11778: GO 11695
11780: POP
11781: POP
// result := s_arr [ 1 ] ;
11782: LD_ADDR_VAR 0 4
11786: PUSH
11787: LD_VAR 0 7
11791: PUSH
11792: LD_INT 1
11794: ARRAY
11795: ST_TO_ADDR
// end ; end ;
11796: LD_VAR 0 4
11800: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11801: LD_INT 0
11803: PPUSH
11804: PPUSH
// if not list then
11805: LD_VAR 0 1
11809: NOT
11810: IFFALSE 11814
// exit ;
11812: GO 11905
// i := list [ pos1 ] ;
11814: LD_ADDR_VAR 0 5
11818: PUSH
11819: LD_VAR 0 1
11823: PUSH
11824: LD_VAR 0 2
11828: ARRAY
11829: ST_TO_ADDR
// if not i then
11830: LD_VAR 0 5
11834: NOT
11835: IFFALSE 11839
// exit ;
11837: GO 11905
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11839: LD_ADDR_VAR 0 1
11843: PUSH
11844: LD_VAR 0 1
11848: PPUSH
11849: LD_VAR 0 2
11853: PPUSH
11854: LD_VAR 0 1
11858: PUSH
11859: LD_VAR 0 3
11863: ARRAY
11864: PPUSH
11865: CALL_OW 1
11869: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11870: LD_ADDR_VAR 0 1
11874: PUSH
11875: LD_VAR 0 1
11879: PPUSH
11880: LD_VAR 0 3
11884: PPUSH
11885: LD_VAR 0 5
11889: PPUSH
11890: CALL_OW 1
11894: ST_TO_ADDR
// result := list ;
11895: LD_ADDR_VAR 0 4
11899: PUSH
11900: LD_VAR 0 1
11904: ST_TO_ADDR
// end ;
11905: LD_VAR 0 4
11909: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11910: LD_INT 0
11912: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11913: LD_ADDR_VAR 0 5
11917: PUSH
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL_OW 250
11927: PPUSH
11928: LD_VAR 0 1
11932: PPUSH
11933: CALL_OW 251
11937: PPUSH
11938: LD_VAR 0 2
11942: PPUSH
11943: LD_VAR 0 3
11947: PPUSH
11948: LD_VAR 0 4
11952: PPUSH
11953: CALL 11963 0 5
11957: ST_TO_ADDR
// end ;
11958: LD_VAR 0 5
11962: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
11963: LD_INT 0
11965: PPUSH
11966: PPUSH
11967: PPUSH
11968: PPUSH
// if not list then
11969: LD_VAR 0 3
11973: NOT
11974: IFFALSE 11978
// exit ;
11976: GO 12366
// result := [ ] ;
11978: LD_ADDR_VAR 0 6
11982: PUSH
11983: EMPTY
11984: ST_TO_ADDR
// for i in list do
11985: LD_ADDR_VAR 0 7
11989: PUSH
11990: LD_VAR 0 3
11994: PUSH
11995: FOR_IN
11996: IFFALSE 12198
// begin tmp := GetDistUnitXY ( i , x , y ) ;
11998: LD_ADDR_VAR 0 9
12002: PUSH
12003: LD_VAR 0 7
12007: PPUSH
12008: LD_VAR 0 1
12012: PPUSH
12013: LD_VAR 0 2
12017: PPUSH
12018: CALL_OW 297
12022: ST_TO_ADDR
// if not result then
12023: LD_VAR 0 6
12027: NOT
12028: IFFALSE 12054
// result := [ [ i , tmp ] ] else
12030: LD_ADDR_VAR 0 6
12034: PUSH
12035: LD_VAR 0 7
12039: PUSH
12040: LD_VAR 0 9
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: ST_TO_ADDR
12052: GO 12196
// begin if result [ result ] [ 2 ] < tmp then
12054: LD_VAR 0 6
12058: PUSH
12059: LD_VAR 0 6
12063: ARRAY
12064: PUSH
12065: LD_INT 2
12067: ARRAY
12068: PUSH
12069: LD_VAR 0 9
12073: LESS
12074: IFFALSE 12116
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12076: LD_ADDR_VAR 0 6
12080: PUSH
12081: LD_VAR 0 6
12085: PPUSH
12086: LD_VAR 0 6
12090: PUSH
12091: LD_INT 1
12093: PLUS
12094: PPUSH
12095: LD_VAR 0 7
12099: PUSH
12100: LD_VAR 0 9
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PPUSH
12109: CALL_OW 2
12113: ST_TO_ADDR
12114: GO 12196
// for j = 1 to result do
12116: LD_ADDR_VAR 0 8
12120: PUSH
12121: DOUBLE
12122: LD_INT 1
12124: DEC
12125: ST_TO_ADDR
12126: LD_VAR 0 6
12130: PUSH
12131: FOR_TO
12132: IFFALSE 12194
// begin if tmp < result [ j ] [ 2 ] then
12134: LD_VAR 0 9
12138: PUSH
12139: LD_VAR 0 6
12143: PUSH
12144: LD_VAR 0 8
12148: ARRAY
12149: PUSH
12150: LD_INT 2
12152: ARRAY
12153: LESS
12154: IFFALSE 12192
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12156: LD_ADDR_VAR 0 6
12160: PUSH
12161: LD_VAR 0 6
12165: PPUSH
12166: LD_VAR 0 8
12170: PPUSH
12171: LD_VAR 0 7
12175: PUSH
12176: LD_VAR 0 9
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 2
12189: ST_TO_ADDR
// break ;
12190: GO 12194
// end ; end ;
12192: GO 12131
12194: POP
12195: POP
// end ; end ;
12196: GO 11995
12198: POP
12199: POP
// if result and not asc then
12200: LD_VAR 0 6
12204: PUSH
12205: LD_VAR 0 4
12209: NOT
12210: AND
12211: IFFALSE 12286
// begin tmp := result ;
12213: LD_ADDR_VAR 0 9
12217: PUSH
12218: LD_VAR 0 6
12222: ST_TO_ADDR
// for i = tmp downto 1 do
12223: LD_ADDR_VAR 0 7
12227: PUSH
12228: DOUBLE
12229: LD_VAR 0 9
12233: INC
12234: ST_TO_ADDR
12235: LD_INT 1
12237: PUSH
12238: FOR_DOWNTO
12239: IFFALSE 12284
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12241: LD_ADDR_VAR 0 6
12245: PUSH
12246: LD_VAR 0 6
12250: PPUSH
12251: LD_VAR 0 9
12255: PUSH
12256: LD_VAR 0 7
12260: MINUS
12261: PUSH
12262: LD_INT 1
12264: PLUS
12265: PPUSH
12266: LD_VAR 0 9
12270: PUSH
12271: LD_VAR 0 7
12275: ARRAY
12276: PPUSH
12277: CALL_OW 1
12281: ST_TO_ADDR
12282: GO 12238
12284: POP
12285: POP
// end ; tmp := [ ] ;
12286: LD_ADDR_VAR 0 9
12290: PUSH
12291: EMPTY
12292: ST_TO_ADDR
// if mode then
12293: LD_VAR 0 5
12297: IFFALSE 12366
// begin for i = 1 to result do
12299: LD_ADDR_VAR 0 7
12303: PUSH
12304: DOUBLE
12305: LD_INT 1
12307: DEC
12308: ST_TO_ADDR
12309: LD_VAR 0 6
12313: PUSH
12314: FOR_TO
12315: IFFALSE 12354
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12317: LD_ADDR_VAR 0 9
12321: PUSH
12322: LD_VAR 0 9
12326: PPUSH
12327: LD_VAR 0 7
12331: PPUSH
12332: LD_VAR 0 6
12336: PUSH
12337: LD_VAR 0 7
12341: ARRAY
12342: PUSH
12343: LD_INT 1
12345: ARRAY
12346: PPUSH
12347: CALL_OW 1
12351: ST_TO_ADDR
12352: GO 12314
12354: POP
12355: POP
// result := tmp ;
12356: LD_ADDR_VAR 0 6
12360: PUSH
12361: LD_VAR 0 9
12365: ST_TO_ADDR
// end ; end ;
12366: LD_VAR 0 6
12370: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12371: LD_INT 0
12373: PPUSH
12374: PPUSH
12375: PPUSH
12376: PPUSH
12377: PPUSH
12378: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12379: LD_ADDR_VAR 0 5
12383: PUSH
12384: LD_INT 0
12386: PUSH
12387: LD_INT 0
12389: PUSH
12390: LD_INT 0
12392: PUSH
12393: EMPTY
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: ST_TO_ADDR
// if not x or not y then
12401: LD_VAR 0 2
12405: NOT
12406: PUSH
12407: LD_VAR 0 3
12411: NOT
12412: OR
12413: IFFALSE 12417
// exit ;
12415: GO 14067
// if not range then
12417: LD_VAR 0 4
12421: NOT
12422: IFFALSE 12432
// range := 10 ;
12424: LD_ADDR_VAR 0 4
12428: PUSH
12429: LD_INT 10
12431: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12432: LD_ADDR_VAR 0 8
12436: PUSH
12437: LD_INT 81
12439: PUSH
12440: LD_VAR 0 1
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 92
12451: PUSH
12452: LD_VAR 0 2
12456: PUSH
12457: LD_VAR 0 3
12461: PUSH
12462: LD_VAR 0 4
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: PUSH
12473: LD_INT 3
12475: PUSH
12476: LD_INT 21
12478: PUSH
12479: LD_INT 3
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: PPUSH
12495: CALL_OW 69
12499: ST_TO_ADDR
// if not tmp then
12500: LD_VAR 0 8
12504: NOT
12505: IFFALSE 12509
// exit ;
12507: GO 14067
// for i in tmp do
12509: LD_ADDR_VAR 0 6
12513: PUSH
12514: LD_VAR 0 8
12518: PUSH
12519: FOR_IN
12520: IFFALSE 14042
// begin points := [ 0 , 0 , 0 ] ;
12522: LD_ADDR_VAR 0 9
12526: PUSH
12527: LD_INT 0
12529: PUSH
12530: LD_INT 0
12532: PUSH
12533: LD_INT 0
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: ST_TO_ADDR
// bpoints := 1 ;
12541: LD_ADDR_VAR 0 10
12545: PUSH
12546: LD_INT 1
12548: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12549: LD_VAR 0 6
12553: PPUSH
12554: CALL_OW 247
12558: PUSH
12559: LD_INT 1
12561: DOUBLE
12562: EQUAL
12563: IFTRUE 12567
12565: GO 13145
12567: POP
// begin if GetClass ( i ) = 1 then
12568: LD_VAR 0 6
12572: PPUSH
12573: CALL_OW 257
12577: PUSH
12578: LD_INT 1
12580: EQUAL
12581: IFFALSE 12602
// points := [ 10 , 5 , 3 ] ;
12583: LD_ADDR_VAR 0 9
12587: PUSH
12588: LD_INT 10
12590: PUSH
12591: LD_INT 5
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: EMPTY
12598: LIST
12599: LIST
12600: LIST
12601: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12602: LD_VAR 0 6
12606: PPUSH
12607: CALL_OW 257
12611: PUSH
12612: LD_INT 2
12614: PUSH
12615: LD_INT 3
12617: PUSH
12618: LD_INT 4
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: IN
12626: IFFALSE 12647
// points := [ 3 , 2 , 1 ] ;
12628: LD_ADDR_VAR 0 9
12632: PUSH
12633: LD_INT 3
12635: PUSH
12636: LD_INT 2
12638: PUSH
12639: LD_INT 1
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12647: LD_VAR 0 6
12651: PPUSH
12652: CALL_OW 257
12656: PUSH
12657: LD_INT 5
12659: EQUAL
12660: IFFALSE 12681
// points := [ 130 , 5 , 2 ] ;
12662: LD_ADDR_VAR 0 9
12666: PUSH
12667: LD_INT 130
12669: PUSH
12670: LD_INT 5
12672: PUSH
12673: LD_INT 2
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: LIST
12680: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12681: LD_VAR 0 6
12685: PPUSH
12686: CALL_OW 257
12690: PUSH
12691: LD_INT 8
12693: EQUAL
12694: IFFALSE 12715
// points := [ 35 , 35 , 30 ] ;
12696: LD_ADDR_VAR 0 9
12700: PUSH
12701: LD_INT 35
12703: PUSH
12704: LD_INT 35
12706: PUSH
12707: LD_INT 30
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: LIST
12714: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12715: LD_VAR 0 6
12719: PPUSH
12720: CALL_OW 257
12724: PUSH
12725: LD_INT 9
12727: EQUAL
12728: IFFALSE 12749
// points := [ 20 , 55 , 40 ] ;
12730: LD_ADDR_VAR 0 9
12734: PUSH
12735: LD_INT 20
12737: PUSH
12738: LD_INT 55
12740: PUSH
12741: LD_INT 40
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12749: LD_VAR 0 6
12753: PPUSH
12754: CALL_OW 257
12758: PUSH
12759: LD_INT 12
12761: PUSH
12762: LD_INT 16
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: IN
12769: IFFALSE 12790
// points := [ 5 , 3 , 2 ] ;
12771: LD_ADDR_VAR 0 9
12775: PUSH
12776: LD_INT 5
12778: PUSH
12779: LD_INT 3
12781: PUSH
12782: LD_INT 2
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: LIST
12789: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12790: LD_VAR 0 6
12794: PPUSH
12795: CALL_OW 257
12799: PUSH
12800: LD_INT 17
12802: EQUAL
12803: IFFALSE 12824
// points := [ 100 , 50 , 75 ] ;
12805: LD_ADDR_VAR 0 9
12809: PUSH
12810: LD_INT 100
12812: PUSH
12813: LD_INT 50
12815: PUSH
12816: LD_INT 75
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12824: LD_VAR 0 6
12828: PPUSH
12829: CALL_OW 257
12833: PUSH
12834: LD_INT 15
12836: EQUAL
12837: IFFALSE 12858
// points := [ 10 , 5 , 3 ] ;
12839: LD_ADDR_VAR 0 9
12843: PUSH
12844: LD_INT 10
12846: PUSH
12847: LD_INT 5
12849: PUSH
12850: LD_INT 3
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12858: LD_VAR 0 6
12862: PPUSH
12863: CALL_OW 257
12867: PUSH
12868: LD_INT 14
12870: EQUAL
12871: IFFALSE 12892
// points := [ 10 , 0 , 0 ] ;
12873: LD_ADDR_VAR 0 9
12877: PUSH
12878: LD_INT 10
12880: PUSH
12881: LD_INT 0
12883: PUSH
12884: LD_INT 0
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12892: LD_VAR 0 6
12896: PPUSH
12897: CALL_OW 257
12901: PUSH
12902: LD_INT 11
12904: EQUAL
12905: IFFALSE 12926
// points := [ 30 , 10 , 5 ] ;
12907: LD_ADDR_VAR 0 9
12911: PUSH
12912: LD_INT 30
12914: PUSH
12915: LD_INT 10
12917: PUSH
12918: LD_INT 5
12920: PUSH
12921: EMPTY
12922: LIST
12923: LIST
12924: LIST
12925: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12926: LD_VAR 0 1
12930: PPUSH
12931: LD_INT 5
12933: PPUSH
12934: CALL_OW 321
12938: PUSH
12939: LD_INT 2
12941: EQUAL
12942: IFFALSE 12959
// bpoints := bpoints * 1.8 ;
12944: LD_ADDR_VAR 0 10
12948: PUSH
12949: LD_VAR 0 10
12953: PUSH
12954: LD_REAL  1.80000000000000E+0000
12957: MUL
12958: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
12959: LD_VAR 0 6
12963: PPUSH
12964: CALL_OW 257
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: LD_INT 2
12974: PUSH
12975: LD_INT 3
12977: PUSH
12978: LD_INT 4
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: IN
12987: PUSH
12988: LD_VAR 0 1
12992: PPUSH
12993: LD_INT 51
12995: PPUSH
12996: CALL_OW 321
13000: PUSH
13001: LD_INT 2
13003: EQUAL
13004: AND
13005: IFFALSE 13022
// bpoints := bpoints * 1.2 ;
13007: LD_ADDR_VAR 0 10
13011: PUSH
13012: LD_VAR 0 10
13016: PUSH
13017: LD_REAL  1.20000000000000E+0000
13020: MUL
13021: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13022: LD_VAR 0 6
13026: PPUSH
13027: CALL_OW 257
13031: PUSH
13032: LD_INT 5
13034: PUSH
13035: LD_INT 7
13037: PUSH
13038: LD_INT 9
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: LIST
13045: IN
13046: PUSH
13047: LD_VAR 0 1
13051: PPUSH
13052: LD_INT 52
13054: PPUSH
13055: CALL_OW 321
13059: PUSH
13060: LD_INT 2
13062: EQUAL
13063: AND
13064: IFFALSE 13081
// bpoints := bpoints * 1.5 ;
13066: LD_ADDR_VAR 0 10
13070: PUSH
13071: LD_VAR 0 10
13075: PUSH
13076: LD_REAL  1.50000000000000E+0000
13079: MUL
13080: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13081: LD_VAR 0 1
13085: PPUSH
13086: LD_INT 66
13088: PPUSH
13089: CALL_OW 321
13093: PUSH
13094: LD_INT 2
13096: EQUAL
13097: IFFALSE 13114
// bpoints := bpoints * 1.1 ;
13099: LD_ADDR_VAR 0 10
13103: PUSH
13104: LD_VAR 0 10
13108: PUSH
13109: LD_REAL  1.10000000000000E+0000
13112: MUL
13113: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13114: LD_ADDR_VAR 0 10
13118: PUSH
13119: LD_VAR 0 10
13123: PUSH
13124: LD_VAR 0 6
13128: PPUSH
13129: LD_INT 1
13131: PPUSH
13132: CALL_OW 259
13136: PUSH
13137: LD_REAL  1.15000000000000E+0000
13140: MUL
13141: MUL
13142: ST_TO_ADDR
// end ; unit_vehicle :
13143: GO 13971
13145: LD_INT 2
13147: DOUBLE
13148: EQUAL
13149: IFTRUE 13153
13151: GO 13959
13153: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13154: LD_VAR 0 6
13158: PPUSH
13159: CALL_OW 264
13163: PUSH
13164: LD_INT 2
13166: PUSH
13167: LD_INT 42
13169: PUSH
13170: LD_INT 24
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: LIST
13177: IN
13178: IFFALSE 13199
// points := [ 25 , 5 , 3 ] ;
13180: LD_ADDR_VAR 0 9
13184: PUSH
13185: LD_INT 25
13187: PUSH
13188: LD_INT 5
13190: PUSH
13191: LD_INT 3
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13199: LD_VAR 0 6
13203: PPUSH
13204: CALL_OW 264
13208: PUSH
13209: LD_INT 4
13211: PUSH
13212: LD_INT 43
13214: PUSH
13215: LD_INT 25
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: IN
13223: IFFALSE 13244
// points := [ 40 , 15 , 5 ] ;
13225: LD_ADDR_VAR 0 9
13229: PUSH
13230: LD_INT 40
13232: PUSH
13233: LD_INT 15
13235: PUSH
13236: LD_INT 5
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: LIST
13243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13244: LD_VAR 0 6
13248: PPUSH
13249: CALL_OW 264
13253: PUSH
13254: LD_INT 3
13256: PUSH
13257: LD_INT 23
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: IN
13264: IFFALSE 13285
// points := [ 7 , 25 , 8 ] ;
13266: LD_ADDR_VAR 0 9
13270: PUSH
13271: LD_INT 7
13273: PUSH
13274: LD_INT 25
13276: PUSH
13277: LD_INT 8
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13285: LD_VAR 0 6
13289: PPUSH
13290: CALL_OW 264
13294: PUSH
13295: LD_INT 5
13297: PUSH
13298: LD_INT 27
13300: PUSH
13301: LD_INT 44
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: LIST
13308: IN
13309: IFFALSE 13330
// points := [ 14 , 50 , 16 ] ;
13311: LD_ADDR_VAR 0 9
13315: PUSH
13316: LD_INT 14
13318: PUSH
13319: LD_INT 50
13321: PUSH
13322: LD_INT 16
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13330: LD_VAR 0 6
13334: PPUSH
13335: CALL_OW 264
13339: PUSH
13340: LD_INT 6
13342: PUSH
13343: LD_INT 46
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: IN
13350: IFFALSE 13371
// points := [ 32 , 120 , 70 ] ;
13352: LD_ADDR_VAR 0 9
13356: PUSH
13357: LD_INT 32
13359: PUSH
13360: LD_INT 120
13362: PUSH
13363: LD_INT 70
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: LIST
13370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13371: LD_VAR 0 6
13375: PPUSH
13376: CALL_OW 264
13380: PUSH
13381: LD_INT 7
13383: PUSH
13384: LD_INT 28
13386: PUSH
13387: LD_INT 45
13389: PUSH
13390: LD_INT 92
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: LIST
13397: LIST
13398: IN
13399: IFFALSE 13420
// points := [ 35 , 20 , 45 ] ;
13401: LD_ADDR_VAR 0 9
13405: PUSH
13406: LD_INT 35
13408: PUSH
13409: LD_INT 20
13411: PUSH
13412: LD_INT 45
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13420: LD_VAR 0 6
13424: PPUSH
13425: CALL_OW 264
13429: PUSH
13430: LD_INT 47
13432: PUSH
13433: EMPTY
13434: LIST
13435: IN
13436: IFFALSE 13457
// points := [ 67 , 45 , 75 ] ;
13438: LD_ADDR_VAR 0 9
13442: PUSH
13443: LD_INT 67
13445: PUSH
13446: LD_INT 45
13448: PUSH
13449: LD_INT 75
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13457: LD_VAR 0 6
13461: PPUSH
13462: CALL_OW 264
13466: PUSH
13467: LD_INT 26
13469: PUSH
13470: EMPTY
13471: LIST
13472: IN
13473: IFFALSE 13494
// points := [ 120 , 30 , 80 ] ;
13475: LD_ADDR_VAR 0 9
13479: PUSH
13480: LD_INT 120
13482: PUSH
13483: LD_INT 30
13485: PUSH
13486: LD_INT 80
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13494: LD_VAR 0 6
13498: PPUSH
13499: CALL_OW 264
13503: PUSH
13504: LD_INT 22
13506: PUSH
13507: EMPTY
13508: LIST
13509: IN
13510: IFFALSE 13531
// points := [ 40 , 1 , 1 ] ;
13512: LD_ADDR_VAR 0 9
13516: PUSH
13517: LD_INT 40
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: LD_INT 1
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13531: LD_VAR 0 6
13535: PPUSH
13536: CALL_OW 264
13540: PUSH
13541: LD_INT 29
13543: PUSH
13544: EMPTY
13545: LIST
13546: IN
13547: IFFALSE 13568
// points := [ 70 , 200 , 400 ] ;
13549: LD_ADDR_VAR 0 9
13553: PUSH
13554: LD_INT 70
13556: PUSH
13557: LD_INT 200
13559: PUSH
13560: LD_INT 400
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13568: LD_VAR 0 6
13572: PPUSH
13573: CALL_OW 264
13577: PUSH
13578: LD_INT 14
13580: PUSH
13581: LD_INT 53
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: IN
13588: IFFALSE 13609
// points := [ 40 , 10 , 20 ] ;
13590: LD_ADDR_VAR 0 9
13594: PUSH
13595: LD_INT 40
13597: PUSH
13598: LD_INT 10
13600: PUSH
13601: LD_INT 20
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13609: LD_VAR 0 6
13613: PPUSH
13614: CALL_OW 264
13618: PUSH
13619: LD_INT 9
13621: PUSH
13622: EMPTY
13623: LIST
13624: IN
13625: IFFALSE 13646
// points := [ 5 , 70 , 20 ] ;
13627: LD_ADDR_VAR 0 9
13631: PUSH
13632: LD_INT 5
13634: PUSH
13635: LD_INT 70
13637: PUSH
13638: LD_INT 20
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13646: LD_VAR 0 6
13650: PPUSH
13651: CALL_OW 264
13655: PUSH
13656: LD_INT 10
13658: PUSH
13659: EMPTY
13660: LIST
13661: IN
13662: IFFALSE 13683
// points := [ 35 , 110 , 70 ] ;
13664: LD_ADDR_VAR 0 9
13668: PUSH
13669: LD_INT 35
13671: PUSH
13672: LD_INT 110
13674: PUSH
13675: LD_INT 70
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: LIST
13682: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13683: LD_VAR 0 6
13687: PPUSH
13688: CALL_OW 265
13692: PUSH
13693: LD_INT 25
13695: EQUAL
13696: IFFALSE 13717
// points := [ 80 , 65 , 100 ] ;
13698: LD_ADDR_VAR 0 9
13702: PUSH
13703: LD_INT 80
13705: PUSH
13706: LD_INT 65
13708: PUSH
13709: LD_INT 100
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: LIST
13716: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13717: LD_VAR 0 6
13721: PPUSH
13722: CALL_OW 263
13726: PUSH
13727: LD_INT 1
13729: EQUAL
13730: IFFALSE 13765
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13732: LD_ADDR_VAR 0 10
13736: PUSH
13737: LD_VAR 0 10
13741: PUSH
13742: LD_VAR 0 6
13746: PPUSH
13747: CALL_OW 311
13751: PPUSH
13752: LD_INT 3
13754: PPUSH
13755: CALL_OW 259
13759: PUSH
13760: LD_INT 4
13762: MUL
13763: MUL
13764: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13765: LD_VAR 0 6
13769: PPUSH
13770: CALL_OW 263
13774: PUSH
13775: LD_INT 2
13777: EQUAL
13778: IFFALSE 13829
// begin j := IsControledBy ( i ) ;
13780: LD_ADDR_VAR 0 7
13784: PUSH
13785: LD_VAR 0 6
13789: PPUSH
13790: CALL_OW 312
13794: ST_TO_ADDR
// if j then
13795: LD_VAR 0 7
13799: IFFALSE 13829
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13801: LD_ADDR_VAR 0 10
13805: PUSH
13806: LD_VAR 0 10
13810: PUSH
13811: LD_VAR 0 7
13815: PPUSH
13816: LD_INT 3
13818: PPUSH
13819: CALL_OW 259
13823: PUSH
13824: LD_INT 3
13826: MUL
13827: MUL
13828: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13829: LD_VAR 0 6
13833: PPUSH
13834: CALL_OW 264
13838: PUSH
13839: LD_INT 5
13841: PUSH
13842: LD_INT 6
13844: PUSH
13845: LD_INT 46
13847: PUSH
13848: LD_INT 44
13850: PUSH
13851: LD_INT 47
13853: PUSH
13854: LD_INT 45
13856: PUSH
13857: LD_INT 28
13859: PUSH
13860: LD_INT 7
13862: PUSH
13863: LD_INT 27
13865: PUSH
13866: LD_INT 29
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: IN
13881: PUSH
13882: LD_VAR 0 1
13886: PPUSH
13887: LD_INT 52
13889: PPUSH
13890: CALL_OW 321
13894: PUSH
13895: LD_INT 2
13897: EQUAL
13898: AND
13899: IFFALSE 13916
// bpoints := bpoints * 1.2 ;
13901: LD_ADDR_VAR 0 10
13905: PUSH
13906: LD_VAR 0 10
13910: PUSH
13911: LD_REAL  1.20000000000000E+0000
13914: MUL
13915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13916: LD_VAR 0 6
13920: PPUSH
13921: CALL_OW 264
13925: PUSH
13926: LD_INT 6
13928: PUSH
13929: LD_INT 46
13931: PUSH
13932: LD_INT 47
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: IN
13940: IFFALSE 13957
// bpoints := bpoints * 1.2 ;
13942: LD_ADDR_VAR 0 10
13946: PUSH
13947: LD_VAR 0 10
13951: PUSH
13952: LD_REAL  1.20000000000000E+0000
13955: MUL
13956: ST_TO_ADDR
// end ; unit_building :
13957: GO 13971
13959: LD_INT 3
13961: DOUBLE
13962: EQUAL
13963: IFTRUE 13967
13965: GO 13970
13967: POP
// ; end ;
13968: GO 13971
13970: POP
// for j = 1 to 3 do
13971: LD_ADDR_VAR 0 7
13975: PUSH
13976: DOUBLE
13977: LD_INT 1
13979: DEC
13980: ST_TO_ADDR
13981: LD_INT 3
13983: PUSH
13984: FOR_TO
13985: IFFALSE 14038
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
13987: LD_ADDR_VAR 0 5
13991: PUSH
13992: LD_VAR 0 5
13996: PPUSH
13997: LD_VAR 0 7
14001: PPUSH
14002: LD_VAR 0 5
14006: PUSH
14007: LD_VAR 0 7
14011: ARRAY
14012: PUSH
14013: LD_VAR 0 9
14017: PUSH
14018: LD_VAR 0 7
14022: ARRAY
14023: PUSH
14024: LD_VAR 0 10
14028: MUL
14029: PLUS
14030: PPUSH
14031: CALL_OW 1
14035: ST_TO_ADDR
14036: GO 13984
14038: POP
14039: POP
// end ;
14040: GO 12519
14042: POP
14043: POP
// result := Replace ( result , 4 , tmp ) ;
14044: LD_ADDR_VAR 0 5
14048: PUSH
14049: LD_VAR 0 5
14053: PPUSH
14054: LD_INT 4
14056: PPUSH
14057: LD_VAR 0 8
14061: PPUSH
14062: CALL_OW 1
14066: ST_TO_ADDR
// end ;
14067: LD_VAR 0 5
14071: RET
// export function DangerAtRange ( unit , range ) ; begin
14072: LD_INT 0
14074: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14075: LD_ADDR_VAR 0 3
14079: PUSH
14080: LD_VAR 0 1
14084: PPUSH
14085: CALL_OW 255
14089: PPUSH
14090: LD_VAR 0 1
14094: PPUSH
14095: CALL_OW 250
14099: PPUSH
14100: LD_VAR 0 1
14104: PPUSH
14105: CALL_OW 251
14109: PPUSH
14110: LD_VAR 0 2
14114: PPUSH
14115: CALL 12371 0 4
14119: ST_TO_ADDR
// end ;
14120: LD_VAR 0 3
14124: RET
// export function DangerInArea ( side , area ) ; begin
14125: LD_INT 0
14127: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14128: LD_ADDR_VAR 0 3
14132: PUSH
14133: LD_VAR 0 2
14137: PPUSH
14138: LD_INT 81
14140: PUSH
14141: LD_VAR 0 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PPUSH
14150: CALL_OW 70
14154: ST_TO_ADDR
// end ;
14155: LD_VAR 0 3
14159: RET
// export function IsExtension ( b ) ; begin
14160: LD_INT 0
14162: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14163: LD_ADDR_VAR 0 2
14167: PUSH
14168: LD_VAR 0 1
14172: PUSH
14173: LD_INT 23
14175: PUSH
14176: LD_INT 20
14178: PUSH
14179: LD_INT 22
14181: PUSH
14182: LD_INT 17
14184: PUSH
14185: LD_INT 24
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 19
14193: PUSH
14194: LD_INT 16
14196: PUSH
14197: LD_INT 25
14199: PUSH
14200: LD_INT 18
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: LIST
14207: LIST
14208: LIST
14209: LIST
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: IN
14215: ST_TO_ADDR
// end ;
14216: LD_VAR 0 2
14220: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14221: LD_INT 0
14223: PPUSH
14224: PPUSH
14225: PPUSH
// result := [ ] ;
14226: LD_ADDR_VAR 0 4
14230: PUSH
14231: EMPTY
14232: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14233: LD_ADDR_VAR 0 5
14237: PUSH
14238: LD_VAR 0 2
14242: PPUSH
14243: LD_INT 21
14245: PUSH
14246: LD_INT 3
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 70
14257: ST_TO_ADDR
// if not tmp then
14258: LD_VAR 0 5
14262: NOT
14263: IFFALSE 14267
// exit ;
14265: GO 14331
// if checkLink then
14267: LD_VAR 0 3
14271: IFFALSE 14321
// begin for i in tmp do
14273: LD_ADDR_VAR 0 6
14277: PUSH
14278: LD_VAR 0 5
14282: PUSH
14283: FOR_IN
14284: IFFALSE 14319
// if GetBase ( i ) <> base then
14286: LD_VAR 0 6
14290: PPUSH
14291: CALL_OW 274
14295: PUSH
14296: LD_VAR 0 1
14300: NONEQUAL
14301: IFFALSE 14317
// ComLinkToBase ( base , i ) ;
14303: LD_VAR 0 1
14307: PPUSH
14308: LD_VAR 0 6
14312: PPUSH
14313: CALL_OW 169
14317: GO 14283
14319: POP
14320: POP
// end ; result := tmp ;
14321: LD_ADDR_VAR 0 4
14325: PUSH
14326: LD_VAR 0 5
14330: ST_TO_ADDR
// end ;
14331: LD_VAR 0 4
14335: RET
// export function ComComplete ( units , b ) ; var i ; begin
14336: LD_INT 0
14338: PPUSH
14339: PPUSH
// if not units then
14340: LD_VAR 0 1
14344: NOT
14345: IFFALSE 14349
// exit ;
14347: GO 14439
// for i in units do
14349: LD_ADDR_VAR 0 4
14353: PUSH
14354: LD_VAR 0 1
14358: PUSH
14359: FOR_IN
14360: IFFALSE 14437
// if BuildingStatus ( b ) = bs_build then
14362: LD_VAR 0 2
14366: PPUSH
14367: CALL_OW 461
14371: PUSH
14372: LD_INT 1
14374: EQUAL
14375: IFFALSE 14435
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14377: LD_VAR 0 4
14381: PPUSH
14382: LD_STRING h
14384: PUSH
14385: LD_VAR 0 2
14389: PPUSH
14390: CALL_OW 250
14394: PUSH
14395: LD_VAR 0 2
14399: PPUSH
14400: CALL_OW 251
14404: PUSH
14405: LD_VAR 0 2
14409: PUSH
14410: LD_INT 0
14412: PUSH
14413: LD_INT 0
14415: PUSH
14416: LD_INT 0
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: PUSH
14428: EMPTY
14429: LIST
14430: PPUSH
14431: CALL_OW 446
14435: GO 14359
14437: POP
14438: POP
// end ;
14439: LD_VAR 0 3
14443: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14444: LD_INT 0
14446: PPUSH
14447: PPUSH
14448: PPUSH
14449: PPUSH
14450: PPUSH
14451: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14452: LD_VAR 0 1
14456: NOT
14457: PUSH
14458: LD_VAR 0 1
14462: PPUSH
14463: CALL_OW 263
14467: PUSH
14468: LD_INT 2
14470: NONEQUAL
14471: OR
14472: IFFALSE 14476
// exit ;
14474: GO 14792
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14476: LD_ADDR_VAR 0 6
14480: PUSH
14481: LD_INT 22
14483: PUSH
14484: LD_VAR 0 1
14488: PPUSH
14489: CALL_OW 255
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PUSH
14498: LD_INT 2
14500: PUSH
14501: LD_INT 30
14503: PUSH
14504: LD_INT 36
14506: PUSH
14507: EMPTY
14508: LIST
14509: LIST
14510: PUSH
14511: LD_INT 34
14513: PUSH
14514: LD_INT 31
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PPUSH
14530: CALL_OW 69
14534: ST_TO_ADDR
// if not tmp then
14535: LD_VAR 0 6
14539: NOT
14540: IFFALSE 14544
// exit ;
14542: GO 14792
// result := [ ] ;
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: EMPTY
14550: ST_TO_ADDR
// for i in tmp do
14551: LD_ADDR_VAR 0 3
14555: PUSH
14556: LD_VAR 0 6
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14633
// begin t := UnitsInside ( i ) ;
14564: LD_ADDR_VAR 0 4
14568: PUSH
14569: LD_VAR 0 3
14573: PPUSH
14574: CALL_OW 313
14578: ST_TO_ADDR
// if t then
14579: LD_VAR 0 4
14583: IFFALSE 14631
// for j in t do
14585: LD_ADDR_VAR 0 7
14589: PUSH
14590: LD_VAR 0 4
14594: PUSH
14595: FOR_IN
14596: IFFALSE 14629
// result := Replace ( result , result + 1 , j ) ;
14598: LD_ADDR_VAR 0 2
14602: PUSH
14603: LD_VAR 0 2
14607: PPUSH
14608: LD_VAR 0 2
14612: PUSH
14613: LD_INT 1
14615: PLUS
14616: PPUSH
14617: LD_VAR 0 7
14621: PPUSH
14622: CALL_OW 1
14626: ST_TO_ADDR
14627: GO 14595
14629: POP
14630: POP
// end ;
14631: GO 14561
14633: POP
14634: POP
// if not result then
14635: LD_VAR 0 2
14639: NOT
14640: IFFALSE 14644
// exit ;
14642: GO 14792
// mech := result [ 1 ] ;
14644: LD_ADDR_VAR 0 5
14648: PUSH
14649: LD_VAR 0 2
14653: PUSH
14654: LD_INT 1
14656: ARRAY
14657: ST_TO_ADDR
// if result > 1 then
14658: LD_VAR 0 2
14662: PUSH
14663: LD_INT 1
14665: GREATER
14666: IFFALSE 14778
// begin for i = 2 to result do
14668: LD_ADDR_VAR 0 3
14672: PUSH
14673: DOUBLE
14674: LD_INT 2
14676: DEC
14677: ST_TO_ADDR
14678: LD_VAR 0 2
14682: PUSH
14683: FOR_TO
14684: IFFALSE 14776
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14686: LD_ADDR_VAR 0 4
14690: PUSH
14691: LD_VAR 0 2
14695: PUSH
14696: LD_VAR 0 3
14700: ARRAY
14701: PPUSH
14702: LD_INT 3
14704: PPUSH
14705: CALL_OW 259
14709: PUSH
14710: LD_VAR 0 2
14714: PUSH
14715: LD_VAR 0 3
14719: ARRAY
14720: PPUSH
14721: CALL_OW 432
14725: MINUS
14726: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14727: LD_VAR 0 4
14731: PUSH
14732: LD_VAR 0 5
14736: PPUSH
14737: LD_INT 3
14739: PPUSH
14740: CALL_OW 259
14744: PUSH
14745: LD_VAR 0 5
14749: PPUSH
14750: CALL_OW 432
14754: MINUS
14755: GREATEREQUAL
14756: IFFALSE 14774
// mech := result [ i ] ;
14758: LD_ADDR_VAR 0 5
14762: PUSH
14763: LD_VAR 0 2
14767: PUSH
14768: LD_VAR 0 3
14772: ARRAY
14773: ST_TO_ADDR
// end ;
14774: GO 14683
14776: POP
14777: POP
// end ; ComLinkTo ( vehicle , mech ) ;
14778: LD_VAR 0 1
14782: PPUSH
14783: LD_VAR 0 5
14787: PPUSH
14788: CALL_OW 135
// end ;
14792: LD_VAR 0 2
14796: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14797: LD_INT 0
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
14805: PPUSH
14806: PPUSH
14807: PPUSH
14808: PPUSH
14809: PPUSH
14810: PPUSH
14811: PPUSH
// result := [ ] ;
14812: LD_ADDR_VAR 0 7
14816: PUSH
14817: EMPTY
14818: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14819: LD_VAR 0 1
14823: PPUSH
14824: CALL_OW 266
14828: PUSH
14829: LD_INT 0
14831: PUSH
14832: LD_INT 1
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: IN
14839: NOT
14840: IFFALSE 14844
// exit ;
14842: GO 16478
// if name then
14844: LD_VAR 0 3
14848: IFFALSE 14864
// SetBName ( base_dep , name ) ;
14850: LD_VAR 0 1
14854: PPUSH
14855: LD_VAR 0 3
14859: PPUSH
14860: CALL_OW 500
// base := GetBase ( base_dep ) ;
14864: LD_ADDR_VAR 0 15
14868: PUSH
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 274
14878: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14879: LD_ADDR_VAR 0 16
14883: PUSH
14884: LD_VAR 0 1
14888: PPUSH
14889: CALL_OW 255
14893: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14894: LD_ADDR_VAR 0 17
14898: PUSH
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 248
14908: ST_TO_ADDR
// if sources then
14909: LD_VAR 0 5
14913: IFFALSE 14960
// for i = 1 to 3 do
14915: LD_ADDR_VAR 0 8
14919: PUSH
14920: DOUBLE
14921: LD_INT 1
14923: DEC
14924: ST_TO_ADDR
14925: LD_INT 3
14927: PUSH
14928: FOR_TO
14929: IFFALSE 14958
// AddResourceType ( base , i , sources [ i ] ) ;
14931: LD_VAR 0 15
14935: PPUSH
14936: LD_VAR 0 8
14940: PPUSH
14941: LD_VAR 0 5
14945: PUSH
14946: LD_VAR 0 8
14950: ARRAY
14951: PPUSH
14952: CALL_OW 276
14956: GO 14928
14958: POP
14959: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
14960: LD_ADDR_VAR 0 18
14964: PUSH
14965: LD_VAR 0 15
14969: PPUSH
14970: LD_VAR 0 2
14974: PPUSH
14975: LD_INT 1
14977: PPUSH
14978: CALL 14221 0 3
14982: ST_TO_ADDR
// InitHc ;
14983: CALL_OW 19
// InitUc ;
14987: CALL_OW 18
// uc_side := side ;
14991: LD_ADDR_OWVAR 20
14995: PUSH
14996: LD_VAR 0 16
15000: ST_TO_ADDR
// uc_nation := nation ;
15001: LD_ADDR_OWVAR 21
15005: PUSH
15006: LD_VAR 0 17
15010: ST_TO_ADDR
// if buildings then
15011: LD_VAR 0 18
15015: IFFALSE 16337
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15017: LD_ADDR_VAR 0 19
15021: PUSH
15022: LD_VAR 0 18
15026: PPUSH
15027: LD_INT 2
15029: PUSH
15030: LD_INT 30
15032: PUSH
15033: LD_INT 29
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 30
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: LIST
15054: PPUSH
15055: CALL_OW 72
15059: ST_TO_ADDR
// if tmp then
15060: LD_VAR 0 19
15064: IFFALSE 15112
// for i in tmp do
15066: LD_ADDR_VAR 0 8
15070: PUSH
15071: LD_VAR 0 19
15075: PUSH
15076: FOR_IN
15077: IFFALSE 15110
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15079: LD_VAR 0 8
15083: PPUSH
15084: CALL_OW 250
15088: PPUSH
15089: LD_VAR 0 8
15093: PPUSH
15094: CALL_OW 251
15098: PPUSH
15099: LD_VAR 0 16
15103: PPUSH
15104: CALL_OW 441
15108: GO 15076
15110: POP
15111: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15112: LD_VAR 0 18
15116: PPUSH
15117: LD_INT 2
15119: PUSH
15120: LD_INT 30
15122: PUSH
15123: LD_INT 32
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 30
15132: PUSH
15133: LD_INT 33
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: LIST
15144: PPUSH
15145: CALL_OW 72
15149: IFFALSE 15237
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15151: LD_ADDR_VAR 0 8
15155: PUSH
15156: LD_VAR 0 18
15160: PPUSH
15161: LD_INT 2
15163: PUSH
15164: LD_INT 30
15166: PUSH
15167: LD_INT 32
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 30
15176: PUSH
15177: LD_INT 33
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 72
15193: PUSH
15194: FOR_IN
15195: IFFALSE 15235
// begin if not GetBWeapon ( i ) then
15197: LD_VAR 0 8
15201: PPUSH
15202: CALL_OW 269
15206: NOT
15207: IFFALSE 15233
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15209: LD_VAR 0 8
15213: PPUSH
15214: LD_VAR 0 8
15218: PPUSH
15219: LD_VAR 0 2
15223: PPUSH
15224: CALL 16483 0 2
15228: PPUSH
15229: CALL_OW 431
// end ;
15233: GO 15194
15235: POP
15236: POP
// end ; for i = 1 to personel do
15237: LD_ADDR_VAR 0 8
15241: PUSH
15242: DOUBLE
15243: LD_INT 1
15245: DEC
15246: ST_TO_ADDR
15247: LD_VAR 0 6
15251: PUSH
15252: FOR_TO
15253: IFFALSE 16317
// begin if i > 4 then
15255: LD_VAR 0 8
15259: PUSH
15260: LD_INT 4
15262: GREATER
15263: IFFALSE 15267
// break ;
15265: GO 16317
// case i of 1 :
15267: LD_VAR 0 8
15271: PUSH
15272: LD_INT 1
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15360
15280: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15281: LD_ADDR_VAR 0 12
15285: PUSH
15286: LD_VAR 0 18
15290: PPUSH
15291: LD_INT 22
15293: PUSH
15294: LD_VAR 0 16
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: PUSH
15303: LD_INT 58
15305: PUSH
15306: EMPTY
15307: LIST
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: LD_INT 30
15314: PUSH
15315: LD_INT 32
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 30
15324: PUSH
15325: LD_INT 4
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 5
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 72
15357: ST_TO_ADDR
15358: GO 15582
15360: LD_INT 2
15362: DOUBLE
15363: EQUAL
15364: IFTRUE 15368
15366: GO 15430
15368: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15369: LD_ADDR_VAR 0 12
15373: PUSH
15374: LD_VAR 0 18
15378: PPUSH
15379: LD_INT 22
15381: PUSH
15382: LD_VAR 0 16
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: LD_INT 2
15393: PUSH
15394: LD_INT 30
15396: PUSH
15397: LD_INT 0
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PUSH
15404: LD_INT 30
15406: PUSH
15407: LD_INT 1
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PPUSH
15423: CALL_OW 72
15427: ST_TO_ADDR
15428: GO 15582
15430: LD_INT 3
15432: DOUBLE
15433: EQUAL
15434: IFTRUE 15438
15436: GO 15500
15438: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15439: LD_ADDR_VAR 0 12
15443: PUSH
15444: LD_VAR 0 18
15448: PPUSH
15449: LD_INT 22
15451: PUSH
15452: LD_VAR 0 16
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: LD_INT 30
15466: PUSH
15467: LD_INT 2
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 30
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PPUSH
15493: CALL_OW 72
15497: ST_TO_ADDR
15498: GO 15582
15500: LD_INT 4
15502: DOUBLE
15503: EQUAL
15504: IFTRUE 15508
15506: GO 15581
15508: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15509: LD_ADDR_VAR 0 12
15513: PUSH
15514: LD_VAR 0 18
15518: PPUSH
15519: LD_INT 22
15521: PUSH
15522: LD_VAR 0 16
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 30
15536: PUSH
15537: LD_INT 6
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 30
15546: PUSH
15547: LD_INT 7
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 30
15556: PUSH
15557: LD_INT 8
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PPUSH
15574: CALL_OW 72
15578: ST_TO_ADDR
15579: GO 15582
15581: POP
// if i = 1 then
15582: LD_VAR 0 8
15586: PUSH
15587: LD_INT 1
15589: EQUAL
15590: IFFALSE 15701
// begin tmp := [ ] ;
15592: LD_ADDR_VAR 0 19
15596: PUSH
15597: EMPTY
15598: ST_TO_ADDR
// for j in f do
15599: LD_ADDR_VAR 0 9
15603: PUSH
15604: LD_VAR 0 12
15608: PUSH
15609: FOR_IN
15610: IFFALSE 15683
// if GetBType ( j ) = b_bunker then
15612: LD_VAR 0 9
15616: PPUSH
15617: CALL_OW 266
15621: PUSH
15622: LD_INT 32
15624: EQUAL
15625: IFFALSE 15652
// tmp := Insert ( tmp , 1 , j ) else
15627: LD_ADDR_VAR 0 19
15631: PUSH
15632: LD_VAR 0 19
15636: PPUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_VAR 0 9
15644: PPUSH
15645: CALL_OW 2
15649: ST_TO_ADDR
15650: GO 15681
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15652: LD_ADDR_VAR 0 19
15656: PUSH
15657: LD_VAR 0 19
15661: PPUSH
15662: LD_VAR 0 19
15666: PUSH
15667: LD_INT 1
15669: PLUS
15670: PPUSH
15671: LD_VAR 0 9
15675: PPUSH
15676: CALL_OW 2
15680: ST_TO_ADDR
15681: GO 15609
15683: POP
15684: POP
// if tmp then
15685: LD_VAR 0 19
15689: IFFALSE 15701
// f := tmp ;
15691: LD_ADDR_VAR 0 12
15695: PUSH
15696: LD_VAR 0 19
15700: ST_TO_ADDR
// end ; x := personel [ i ] ;
15701: LD_ADDR_VAR 0 13
15705: PUSH
15706: LD_VAR 0 6
15710: PUSH
15711: LD_VAR 0 8
15715: ARRAY
15716: ST_TO_ADDR
// if x = - 1 then
15717: LD_VAR 0 13
15721: PUSH
15722: LD_INT 1
15724: NEG
15725: EQUAL
15726: IFFALSE 15935
// begin for j in f do
15728: LD_ADDR_VAR 0 9
15732: PUSH
15733: LD_VAR 0 12
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15931
// repeat InitHc ;
15741: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15745: LD_VAR 0 9
15749: PPUSH
15750: CALL_OW 266
15754: PUSH
15755: LD_INT 5
15757: EQUAL
15758: IFFALSE 15828
// begin if UnitsInside ( j ) < 3 then
15760: LD_VAR 0 9
15764: PPUSH
15765: CALL_OW 313
15769: PUSH
15770: LD_INT 3
15772: LESS
15773: IFFALSE 15809
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15775: LD_INT 0
15777: PPUSH
15778: LD_INT 5
15780: PUSH
15781: LD_INT 8
15783: PUSH
15784: LD_INT 9
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: LIST
15791: PUSH
15792: LD_VAR 0 17
15796: ARRAY
15797: PPUSH
15798: LD_VAR 0 4
15802: PPUSH
15803: CALL_OW 380
15807: GO 15826
// PrepareHuman ( false , i , skill ) ;
15809: LD_INT 0
15811: PPUSH
15812: LD_VAR 0 8
15816: PPUSH
15817: LD_VAR 0 4
15821: PPUSH
15822: CALL_OW 380
// end else
15826: GO 15845
// PrepareHuman ( false , i , skill ) ;
15828: LD_INT 0
15830: PPUSH
15831: LD_VAR 0 8
15835: PPUSH
15836: LD_VAR 0 4
15840: PPUSH
15841: CALL_OW 380
// un := CreateHuman ;
15845: LD_ADDR_VAR 0 14
15849: PUSH
15850: CALL_OW 44
15854: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15855: LD_ADDR_VAR 0 7
15859: PUSH
15860: LD_VAR 0 7
15864: PPUSH
15865: LD_INT 1
15867: PPUSH
15868: LD_VAR 0 14
15872: PPUSH
15873: CALL_OW 2
15877: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15878: LD_VAR 0 14
15882: PPUSH
15883: LD_VAR 0 9
15887: PPUSH
15888: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15892: LD_VAR 0 9
15896: PPUSH
15897: CALL_OW 313
15901: PUSH
15902: LD_INT 6
15904: EQUAL
15905: PUSH
15906: LD_VAR 0 9
15910: PPUSH
15911: CALL_OW 266
15915: PUSH
15916: LD_INT 32
15918: PUSH
15919: LD_INT 31
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: IN
15926: OR
15927: IFFALSE 15741
15929: GO 15738
15931: POP
15932: POP
// end else
15933: GO 16315
// for j = 1 to x do
15935: LD_ADDR_VAR 0 9
15939: PUSH
15940: DOUBLE
15941: LD_INT 1
15943: DEC
15944: ST_TO_ADDR
15945: LD_VAR 0 13
15949: PUSH
15950: FOR_TO
15951: IFFALSE 16313
// begin InitHc ;
15953: CALL_OW 19
// if not f then
15957: LD_VAR 0 12
15961: NOT
15962: IFFALSE 16051
// begin PrepareHuman ( false , i , skill ) ;
15964: LD_INT 0
15966: PPUSH
15967: LD_VAR 0 8
15971: PPUSH
15972: LD_VAR 0 4
15976: PPUSH
15977: CALL_OW 380
// un := CreateHuman ;
15981: LD_ADDR_VAR 0 14
15985: PUSH
15986: CALL_OW 44
15990: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15991: LD_ADDR_VAR 0 7
15995: PUSH
15996: LD_VAR 0 7
16000: PPUSH
16001: LD_INT 1
16003: PPUSH
16004: LD_VAR 0 14
16008: PPUSH
16009: CALL_OW 2
16013: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16014: LD_VAR 0 14
16018: PPUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 250
16028: PPUSH
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 251
16038: PPUSH
16039: LD_INT 10
16041: PPUSH
16042: LD_INT 0
16044: PPUSH
16045: CALL_OW 50
// continue ;
16049: GO 15950
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16051: LD_VAR 0 12
16055: PUSH
16056: LD_INT 1
16058: ARRAY
16059: PPUSH
16060: CALL_OW 313
16064: PUSH
16065: LD_VAR 0 12
16069: PUSH
16070: LD_INT 1
16072: ARRAY
16073: PPUSH
16074: CALL_OW 266
16078: PUSH
16079: LD_INT 32
16081: PUSH
16082: LD_INT 31
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: IN
16089: AND
16090: PUSH
16091: LD_VAR 0 12
16095: PUSH
16096: LD_INT 1
16098: ARRAY
16099: PPUSH
16100: CALL_OW 313
16104: PUSH
16105: LD_INT 6
16107: EQUAL
16108: OR
16109: IFFALSE 16129
// f := Delete ( f , 1 ) ;
16111: LD_ADDR_VAR 0 12
16115: PUSH
16116: LD_VAR 0 12
16120: PPUSH
16121: LD_INT 1
16123: PPUSH
16124: CALL_OW 3
16128: ST_TO_ADDR
// if not f then
16129: LD_VAR 0 12
16133: NOT
16134: IFFALSE 16152
// begin x := x + 2 ;
16136: LD_ADDR_VAR 0 13
16140: PUSH
16141: LD_VAR 0 13
16145: PUSH
16146: LD_INT 2
16148: PLUS
16149: ST_TO_ADDR
// continue ;
16150: GO 15950
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16152: LD_VAR 0 12
16156: PUSH
16157: LD_INT 1
16159: ARRAY
16160: PPUSH
16161: CALL_OW 266
16165: PUSH
16166: LD_INT 5
16168: EQUAL
16169: IFFALSE 16243
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16171: LD_VAR 0 12
16175: PUSH
16176: LD_INT 1
16178: ARRAY
16179: PPUSH
16180: CALL_OW 313
16184: PUSH
16185: LD_INT 3
16187: LESS
16188: IFFALSE 16224
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16190: LD_INT 0
16192: PPUSH
16193: LD_INT 5
16195: PUSH
16196: LD_INT 8
16198: PUSH
16199: LD_INT 9
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: LIST
16206: PUSH
16207: LD_VAR 0 17
16211: ARRAY
16212: PPUSH
16213: LD_VAR 0 4
16217: PPUSH
16218: CALL_OW 380
16222: GO 16241
// PrepareHuman ( false , i , skill ) ;
16224: LD_INT 0
16226: PPUSH
16227: LD_VAR 0 8
16231: PPUSH
16232: LD_VAR 0 4
16236: PPUSH
16237: CALL_OW 380
// end else
16241: GO 16260
// PrepareHuman ( false , i , skill ) ;
16243: LD_INT 0
16245: PPUSH
16246: LD_VAR 0 8
16250: PPUSH
16251: LD_VAR 0 4
16255: PPUSH
16256: CALL_OW 380
// un := CreateHuman ;
16260: LD_ADDR_VAR 0 14
16264: PUSH
16265: CALL_OW 44
16269: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16270: LD_ADDR_VAR 0 7
16274: PUSH
16275: LD_VAR 0 7
16279: PPUSH
16280: LD_INT 1
16282: PPUSH
16283: LD_VAR 0 14
16287: PPUSH
16288: CALL_OW 2
16292: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16293: LD_VAR 0 14
16297: PPUSH
16298: LD_VAR 0 12
16302: PUSH
16303: LD_INT 1
16305: ARRAY
16306: PPUSH
16307: CALL_OW 52
// end ;
16311: GO 15950
16313: POP
16314: POP
// end ;
16315: GO 15252
16317: POP
16318: POP
// result := result ^ buildings ;
16319: LD_ADDR_VAR 0 7
16323: PUSH
16324: LD_VAR 0 7
16328: PUSH
16329: LD_VAR 0 18
16333: ADD
16334: ST_TO_ADDR
// end else
16335: GO 16478
// begin for i = 1 to personel do
16337: LD_ADDR_VAR 0 8
16341: PUSH
16342: DOUBLE
16343: LD_INT 1
16345: DEC
16346: ST_TO_ADDR
16347: LD_VAR 0 6
16351: PUSH
16352: FOR_TO
16353: IFFALSE 16476
// begin if i > 4 then
16355: LD_VAR 0 8
16359: PUSH
16360: LD_INT 4
16362: GREATER
16363: IFFALSE 16367
// break ;
16365: GO 16476
// x := personel [ i ] ;
16367: LD_ADDR_VAR 0 13
16371: PUSH
16372: LD_VAR 0 6
16376: PUSH
16377: LD_VAR 0 8
16381: ARRAY
16382: ST_TO_ADDR
// if x = - 1 then
16383: LD_VAR 0 13
16387: PUSH
16388: LD_INT 1
16390: NEG
16391: EQUAL
16392: IFFALSE 16396
// continue ;
16394: GO 16352
// PrepareHuman ( false , i , skill ) ;
16396: LD_INT 0
16398: PPUSH
16399: LD_VAR 0 8
16403: PPUSH
16404: LD_VAR 0 4
16408: PPUSH
16409: CALL_OW 380
// un := CreateHuman ;
16413: LD_ADDR_VAR 0 14
16417: PUSH
16418: CALL_OW 44
16422: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16423: LD_VAR 0 14
16427: PPUSH
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 250
16437: PPUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 251
16447: PPUSH
16448: LD_INT 10
16450: PPUSH
16451: LD_INT 0
16453: PPUSH
16454: CALL_OW 50
// result := result ^ un ;
16458: LD_ADDR_VAR 0 7
16462: PUSH
16463: LD_VAR 0 7
16467: PUSH
16468: LD_VAR 0 14
16472: ADD
16473: ST_TO_ADDR
// end ;
16474: GO 16352
16476: POP
16477: POP
// end ; end ;
16478: LD_VAR 0 7
16482: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16483: LD_INT 0
16485: PPUSH
16486: PPUSH
16487: PPUSH
16488: PPUSH
16489: PPUSH
16490: PPUSH
16491: PPUSH
16492: PPUSH
16493: PPUSH
16494: PPUSH
16495: PPUSH
16496: PPUSH
16497: PPUSH
16498: PPUSH
16499: PPUSH
16500: PPUSH
// result := false ;
16501: LD_ADDR_VAR 0 3
16505: PUSH
16506: LD_INT 0
16508: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16509: LD_VAR 0 1
16513: NOT
16514: PUSH
16515: LD_VAR 0 1
16519: PPUSH
16520: CALL_OW 266
16524: PUSH
16525: LD_INT 32
16527: PUSH
16528: LD_INT 33
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: IN
16535: NOT
16536: OR
16537: IFFALSE 16541
// exit ;
16539: GO 17650
// nat := GetNation ( tower ) ;
16541: LD_ADDR_VAR 0 12
16545: PUSH
16546: LD_VAR 0 1
16550: PPUSH
16551: CALL_OW 248
16555: ST_TO_ADDR
// side := GetSide ( tower ) ;
16556: LD_ADDR_VAR 0 16
16560: PUSH
16561: LD_VAR 0 1
16565: PPUSH
16566: CALL_OW 255
16570: ST_TO_ADDR
// x := GetX ( tower ) ;
16571: LD_ADDR_VAR 0 10
16575: PUSH
16576: LD_VAR 0 1
16580: PPUSH
16581: CALL_OW 250
16585: ST_TO_ADDR
// y := GetY ( tower ) ;
16586: LD_ADDR_VAR 0 11
16590: PUSH
16591: LD_VAR 0 1
16595: PPUSH
16596: CALL_OW 251
16600: ST_TO_ADDR
// if not x or not y then
16601: LD_VAR 0 10
16605: NOT
16606: PUSH
16607: LD_VAR 0 11
16611: NOT
16612: OR
16613: IFFALSE 16617
// exit ;
16615: GO 17650
// weapon := 0 ;
16617: LD_ADDR_VAR 0 18
16621: PUSH
16622: LD_INT 0
16624: ST_TO_ADDR
// fac_list := [ ] ;
16625: LD_ADDR_VAR 0 17
16629: PUSH
16630: EMPTY
16631: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16632: LD_ADDR_VAR 0 6
16636: PUSH
16637: LD_VAR 0 1
16641: PPUSH
16642: CALL_OW 274
16646: PPUSH
16647: LD_VAR 0 2
16651: PPUSH
16652: LD_INT 0
16654: PPUSH
16655: CALL 14221 0 3
16659: PPUSH
16660: LD_INT 30
16662: PUSH
16663: LD_INT 3
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PPUSH
16670: CALL_OW 72
16674: ST_TO_ADDR
// if not factories then
16675: LD_VAR 0 6
16679: NOT
16680: IFFALSE 16684
// exit ;
16682: GO 17650
// for i in factories do
16684: LD_ADDR_VAR 0 8
16688: PUSH
16689: LD_VAR 0 6
16693: PUSH
16694: FOR_IN
16695: IFFALSE 16720
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16697: LD_ADDR_VAR 0 17
16701: PUSH
16702: LD_VAR 0 17
16706: PUSH
16707: LD_VAR 0 8
16711: PPUSH
16712: CALL_OW 478
16716: UNION
16717: ST_TO_ADDR
16718: GO 16694
16720: POP
16721: POP
// if not fac_list then
16722: LD_VAR 0 17
16726: NOT
16727: IFFALSE 16731
// exit ;
16729: GO 17650
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16731: LD_ADDR_VAR 0 5
16735: PUSH
16736: LD_INT 4
16738: PUSH
16739: LD_INT 5
16741: PUSH
16742: LD_INT 9
16744: PUSH
16745: LD_INT 10
16747: PUSH
16748: LD_INT 6
16750: PUSH
16751: LD_INT 7
16753: PUSH
16754: LD_INT 11
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 27
16768: PUSH
16769: LD_INT 28
16771: PUSH
16772: LD_INT 26
16774: PUSH
16775: LD_INT 30
16777: PUSH
16778: EMPTY
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 43
16786: PUSH
16787: LD_INT 44
16789: PUSH
16790: LD_INT 46
16792: PUSH
16793: LD_INT 45
16795: PUSH
16796: LD_INT 47
16798: PUSH
16799: LD_INT 49
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: PUSH
16815: LD_VAR 0 12
16819: ARRAY
16820: ST_TO_ADDR
// list := list isect fac_list ;
16821: LD_ADDR_VAR 0 5
16825: PUSH
16826: LD_VAR 0 5
16830: PUSH
16831: LD_VAR 0 17
16835: ISECT
16836: ST_TO_ADDR
// if not list then
16837: LD_VAR 0 5
16841: NOT
16842: IFFALSE 16846
// exit ;
16844: GO 17650
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16846: LD_VAR 0 12
16850: PUSH
16851: LD_INT 3
16853: EQUAL
16854: PUSH
16855: LD_INT 49
16857: PUSH
16858: LD_VAR 0 5
16862: IN
16863: AND
16864: PUSH
16865: LD_INT 31
16867: PPUSH
16868: LD_VAR 0 16
16872: PPUSH
16873: CALL_OW 321
16877: PUSH
16878: LD_INT 2
16880: EQUAL
16881: AND
16882: IFFALSE 16942
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16884: LD_INT 22
16886: PUSH
16887: LD_VAR 0 16
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 35
16898: PUSH
16899: LD_INT 49
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: PUSH
16906: LD_INT 91
16908: PUSH
16909: LD_VAR 0 1
16913: PUSH
16914: LD_INT 10
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: LIST
16926: PPUSH
16927: CALL_OW 69
16931: NOT
16932: IFFALSE 16942
// weapon := ru_time_lapser ;
16934: LD_ADDR_VAR 0 18
16938: PUSH
16939: LD_INT 49
16941: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16942: LD_VAR 0 12
16946: PUSH
16947: LD_INT 1
16949: PUSH
16950: LD_INT 2
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: IN
16957: PUSH
16958: LD_INT 11
16960: PUSH
16961: LD_VAR 0 5
16965: IN
16966: PUSH
16967: LD_INT 30
16969: PUSH
16970: LD_VAR 0 5
16974: IN
16975: OR
16976: AND
16977: PUSH
16978: LD_INT 6
16980: PPUSH
16981: LD_VAR 0 16
16985: PPUSH
16986: CALL_OW 321
16990: PUSH
16991: LD_INT 2
16993: EQUAL
16994: AND
16995: IFFALSE 17160
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
16997: LD_INT 22
16999: PUSH
17000: LD_VAR 0 16
17004: PUSH
17005: EMPTY
17006: LIST
17007: LIST
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 35
17014: PUSH
17015: LD_INT 11
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 35
17024: PUSH
17025: LD_INT 30
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 91
17039: PUSH
17040: LD_VAR 0 1
17044: PUSH
17045: LD_INT 18
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: PPUSH
17058: CALL_OW 69
17062: NOT
17063: PUSH
17064: LD_INT 22
17066: PUSH
17067: LD_VAR 0 16
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 30
17081: PUSH
17082: LD_INT 32
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 30
17091: PUSH
17092: LD_INT 33
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 91
17106: PUSH
17107: LD_VAR 0 1
17111: PUSH
17112: LD_INT 12
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: PUSH
17125: EMPTY
17126: LIST
17127: PPUSH
17128: CALL_OW 69
17132: PUSH
17133: LD_INT 2
17135: GREATER
17136: AND
17137: IFFALSE 17160
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17139: LD_ADDR_VAR 0 18
17143: PUSH
17144: LD_INT 11
17146: PUSH
17147: LD_INT 30
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_VAR 0 12
17158: ARRAY
17159: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17160: LD_VAR 0 18
17164: NOT
17165: PUSH
17166: LD_INT 40
17168: PPUSH
17169: LD_VAR 0 16
17173: PPUSH
17174: CALL_OW 321
17178: PUSH
17179: LD_INT 2
17181: EQUAL
17182: AND
17183: PUSH
17184: LD_INT 7
17186: PUSH
17187: LD_VAR 0 5
17191: IN
17192: PUSH
17193: LD_INT 28
17195: PUSH
17196: LD_VAR 0 5
17200: IN
17201: OR
17202: PUSH
17203: LD_INT 45
17205: PUSH
17206: LD_VAR 0 5
17210: IN
17211: OR
17212: AND
17213: IFFALSE 17467
// begin hex := GetHexInfo ( x , y ) ;
17215: LD_ADDR_VAR 0 4
17219: PUSH
17220: LD_VAR 0 10
17224: PPUSH
17225: LD_VAR 0 11
17229: PPUSH
17230: CALL_OW 546
17234: ST_TO_ADDR
// if hex [ 1 ] then
17235: LD_VAR 0 4
17239: PUSH
17240: LD_INT 1
17242: ARRAY
17243: IFFALSE 17247
// exit ;
17245: GO 17650
// height := hex [ 2 ] ;
17247: LD_ADDR_VAR 0 15
17251: PUSH
17252: LD_VAR 0 4
17256: PUSH
17257: LD_INT 2
17259: ARRAY
17260: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17261: LD_ADDR_VAR 0 14
17265: PUSH
17266: LD_INT 0
17268: PUSH
17269: LD_INT 2
17271: PUSH
17272: LD_INT 3
17274: PUSH
17275: LD_INT 5
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: ST_TO_ADDR
// for i in tmp do
17284: LD_ADDR_VAR 0 8
17288: PUSH
17289: LD_VAR 0 14
17293: PUSH
17294: FOR_IN
17295: IFFALSE 17465
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17297: LD_ADDR_VAR 0 9
17301: PUSH
17302: LD_VAR 0 10
17306: PPUSH
17307: LD_VAR 0 8
17311: PPUSH
17312: LD_INT 5
17314: PPUSH
17315: CALL_OW 272
17319: PUSH
17320: LD_VAR 0 11
17324: PPUSH
17325: LD_VAR 0 8
17329: PPUSH
17330: LD_INT 5
17332: PPUSH
17333: CALL_OW 273
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17342: LD_VAR 0 9
17346: PUSH
17347: LD_INT 1
17349: ARRAY
17350: PPUSH
17351: LD_VAR 0 9
17355: PUSH
17356: LD_INT 2
17358: ARRAY
17359: PPUSH
17360: CALL_OW 488
17364: IFFALSE 17463
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17366: LD_ADDR_VAR 0 4
17370: PUSH
17371: LD_VAR 0 9
17375: PUSH
17376: LD_INT 1
17378: ARRAY
17379: PPUSH
17380: LD_VAR 0 9
17384: PUSH
17385: LD_INT 2
17387: ARRAY
17388: PPUSH
17389: CALL_OW 546
17393: ST_TO_ADDR
// if hex [ 1 ] then
17394: LD_VAR 0 4
17398: PUSH
17399: LD_INT 1
17401: ARRAY
17402: IFFALSE 17406
// continue ;
17404: GO 17294
// h := hex [ 2 ] ;
17406: LD_ADDR_VAR 0 13
17410: PUSH
17411: LD_VAR 0 4
17415: PUSH
17416: LD_INT 2
17418: ARRAY
17419: ST_TO_ADDR
// if h + 7 < height then
17420: LD_VAR 0 13
17424: PUSH
17425: LD_INT 7
17427: PLUS
17428: PUSH
17429: LD_VAR 0 15
17433: LESS
17434: IFFALSE 17463
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17436: LD_ADDR_VAR 0 18
17440: PUSH
17441: LD_INT 7
17443: PUSH
17444: LD_INT 28
17446: PUSH
17447: LD_INT 45
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: PUSH
17455: LD_VAR 0 12
17459: ARRAY
17460: ST_TO_ADDR
// break ;
17461: GO 17465
// end ; end ; end ;
17463: GO 17294
17465: POP
17466: POP
// end ; if not weapon then
17467: LD_VAR 0 18
17471: NOT
17472: IFFALSE 17532
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17474: LD_ADDR_VAR 0 5
17478: PUSH
17479: LD_VAR 0 5
17483: PUSH
17484: LD_INT 11
17486: PUSH
17487: LD_INT 30
17489: PUSH
17490: LD_INT 49
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: LIST
17497: DIFF
17498: ST_TO_ADDR
// if not list then
17499: LD_VAR 0 5
17503: NOT
17504: IFFALSE 17508
// exit ;
17506: GO 17650
// weapon := list [ rand ( 1 , list ) ] ;
17508: LD_ADDR_VAR 0 18
17512: PUSH
17513: LD_VAR 0 5
17517: PUSH
17518: LD_INT 1
17520: PPUSH
17521: LD_VAR 0 5
17525: PPUSH
17526: CALL_OW 12
17530: ARRAY
17531: ST_TO_ADDR
// end ; if weapon then
17532: LD_VAR 0 18
17536: IFFALSE 17650
// begin tmp := CostOfWeapon ( weapon ) ;
17538: LD_ADDR_VAR 0 14
17542: PUSH
17543: LD_VAR 0 18
17547: PPUSH
17548: CALL_OW 451
17552: ST_TO_ADDR
// j := GetBase ( tower ) ;
17553: LD_ADDR_VAR 0 9
17557: PUSH
17558: LD_VAR 0 1
17562: PPUSH
17563: CALL_OW 274
17567: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17568: LD_VAR 0 9
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 275
17580: PUSH
17581: LD_VAR 0 14
17585: PUSH
17586: LD_INT 1
17588: ARRAY
17589: GREATEREQUAL
17590: PUSH
17591: LD_VAR 0 9
17595: PPUSH
17596: LD_INT 2
17598: PPUSH
17599: CALL_OW 275
17603: PUSH
17604: LD_VAR 0 14
17608: PUSH
17609: LD_INT 2
17611: ARRAY
17612: GREATEREQUAL
17613: AND
17614: PUSH
17615: LD_VAR 0 9
17619: PPUSH
17620: LD_INT 3
17622: PPUSH
17623: CALL_OW 275
17627: PUSH
17628: LD_VAR 0 14
17632: PUSH
17633: LD_INT 3
17635: ARRAY
17636: GREATEREQUAL
17637: AND
17638: IFFALSE 17650
// result := weapon ;
17640: LD_ADDR_VAR 0 3
17644: PUSH
17645: LD_VAR 0 18
17649: ST_TO_ADDR
// end ; end ;
17650: LD_VAR 0 3
17654: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17655: LD_INT 0
17657: PPUSH
17658: PPUSH
// result := true ;
17659: LD_ADDR_VAR 0 3
17663: PUSH
17664: LD_INT 1
17666: ST_TO_ADDR
// if array1 = array2 then
17667: LD_VAR 0 1
17671: PUSH
17672: LD_VAR 0 2
17676: EQUAL
17677: IFFALSE 17737
// begin for i = 1 to array1 do
17679: LD_ADDR_VAR 0 4
17683: PUSH
17684: DOUBLE
17685: LD_INT 1
17687: DEC
17688: ST_TO_ADDR
17689: LD_VAR 0 1
17693: PUSH
17694: FOR_TO
17695: IFFALSE 17733
// if array1 [ i ] <> array2 [ i ] then
17697: LD_VAR 0 1
17701: PUSH
17702: LD_VAR 0 4
17706: ARRAY
17707: PUSH
17708: LD_VAR 0 2
17712: PUSH
17713: LD_VAR 0 4
17717: ARRAY
17718: NONEQUAL
17719: IFFALSE 17731
// begin result := false ;
17721: LD_ADDR_VAR 0 3
17725: PUSH
17726: LD_INT 0
17728: ST_TO_ADDR
// break ;
17729: GO 17733
// end ;
17731: GO 17694
17733: POP
17734: POP
// end else
17735: GO 17745
// result := false ;
17737: LD_ADDR_VAR 0 3
17741: PUSH
17742: LD_INT 0
17744: ST_TO_ADDR
// end ;
17745: LD_VAR 0 3
17749: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17750: LD_INT 0
17752: PPUSH
17753: PPUSH
// if not array1 or not array2 then
17754: LD_VAR 0 1
17758: NOT
17759: PUSH
17760: LD_VAR 0 2
17764: NOT
17765: OR
17766: IFFALSE 17770
// exit ;
17768: GO 17834
// result := true ;
17770: LD_ADDR_VAR 0 3
17774: PUSH
17775: LD_INT 1
17777: ST_TO_ADDR
// for i = 1 to array1 do
17778: LD_ADDR_VAR 0 4
17782: PUSH
17783: DOUBLE
17784: LD_INT 1
17786: DEC
17787: ST_TO_ADDR
17788: LD_VAR 0 1
17792: PUSH
17793: FOR_TO
17794: IFFALSE 17832
// if array1 [ i ] <> array2 [ i ] then
17796: LD_VAR 0 1
17800: PUSH
17801: LD_VAR 0 4
17805: ARRAY
17806: PUSH
17807: LD_VAR 0 2
17811: PUSH
17812: LD_VAR 0 4
17816: ARRAY
17817: NONEQUAL
17818: IFFALSE 17830
// begin result := false ;
17820: LD_ADDR_VAR 0 3
17824: PUSH
17825: LD_INT 0
17827: ST_TO_ADDR
// break ;
17828: GO 17832
// end ;
17830: GO 17793
17832: POP
17833: POP
// end ;
17834: LD_VAR 0 3
17838: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17839: LD_INT 0
17841: PPUSH
17842: PPUSH
17843: PPUSH
// pom := GetBase ( fac ) ;
17844: LD_ADDR_VAR 0 5
17848: PUSH
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 274
17858: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17859: LD_ADDR_VAR 0 4
17863: PUSH
17864: LD_VAR 0 2
17868: PUSH
17869: LD_INT 1
17871: ARRAY
17872: PPUSH
17873: LD_VAR 0 2
17877: PUSH
17878: LD_INT 2
17880: ARRAY
17881: PPUSH
17882: LD_VAR 0 2
17886: PUSH
17887: LD_INT 3
17889: ARRAY
17890: PPUSH
17891: LD_VAR 0 2
17895: PUSH
17896: LD_INT 4
17898: ARRAY
17899: PPUSH
17900: CALL_OW 449
17904: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17905: LD_ADDR_VAR 0 3
17909: PUSH
17910: LD_VAR 0 5
17914: PPUSH
17915: LD_INT 1
17917: PPUSH
17918: CALL_OW 275
17922: PUSH
17923: LD_VAR 0 4
17927: PUSH
17928: LD_INT 1
17930: ARRAY
17931: GREATEREQUAL
17932: PUSH
17933: LD_VAR 0 5
17937: PPUSH
17938: LD_INT 2
17940: PPUSH
17941: CALL_OW 275
17945: PUSH
17946: LD_VAR 0 4
17950: PUSH
17951: LD_INT 2
17953: ARRAY
17954: GREATEREQUAL
17955: AND
17956: PUSH
17957: LD_VAR 0 5
17961: PPUSH
17962: LD_INT 3
17964: PPUSH
17965: CALL_OW 275
17969: PUSH
17970: LD_VAR 0 4
17974: PUSH
17975: LD_INT 3
17977: ARRAY
17978: GREATEREQUAL
17979: AND
17980: ST_TO_ADDR
// end ;
17981: LD_VAR 0 3
17985: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
17986: LD_INT 0
17988: PPUSH
17989: PPUSH
17990: PPUSH
17991: PPUSH
// pom := GetBase ( building ) ;
17992: LD_ADDR_VAR 0 3
17996: PUSH
17997: LD_VAR 0 1
18001: PPUSH
18002: CALL_OW 274
18006: ST_TO_ADDR
// if not pom then
18007: LD_VAR 0 3
18011: NOT
18012: IFFALSE 18016
// exit ;
18014: GO 18186
// btype := GetBType ( building ) ;
18016: LD_ADDR_VAR 0 5
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 266
18030: ST_TO_ADDR
// if btype = b_armoury then
18031: LD_VAR 0 5
18035: PUSH
18036: LD_INT 4
18038: EQUAL
18039: IFFALSE 18049
// btype := b_barracks ;
18041: LD_ADDR_VAR 0 5
18045: PUSH
18046: LD_INT 5
18048: ST_TO_ADDR
// if btype = b_depot then
18049: LD_VAR 0 5
18053: PUSH
18054: LD_INT 0
18056: EQUAL
18057: IFFALSE 18067
// btype := b_warehouse ;
18059: LD_ADDR_VAR 0 5
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// if btype = b_workshop then
18067: LD_VAR 0 5
18071: PUSH
18072: LD_INT 2
18074: EQUAL
18075: IFFALSE 18085
// btype := b_factory ;
18077: LD_ADDR_VAR 0 5
18081: PUSH
18082: LD_INT 3
18084: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18085: LD_ADDR_VAR 0 4
18089: PUSH
18090: LD_VAR 0 5
18094: PPUSH
18095: LD_VAR 0 1
18099: PPUSH
18100: CALL_OW 248
18104: PPUSH
18105: CALL_OW 450
18109: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18110: LD_ADDR_VAR 0 2
18114: PUSH
18115: LD_VAR 0 3
18119: PPUSH
18120: LD_INT 1
18122: PPUSH
18123: CALL_OW 275
18127: PUSH
18128: LD_VAR 0 4
18132: PUSH
18133: LD_INT 1
18135: ARRAY
18136: GREATEREQUAL
18137: PUSH
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_INT 2
18145: PPUSH
18146: CALL_OW 275
18150: PUSH
18151: LD_VAR 0 4
18155: PUSH
18156: LD_INT 2
18158: ARRAY
18159: GREATEREQUAL
18160: AND
18161: PUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: LD_INT 3
18169: PPUSH
18170: CALL_OW 275
18174: PUSH
18175: LD_VAR 0 4
18179: PUSH
18180: LD_INT 3
18182: ARRAY
18183: GREATEREQUAL
18184: AND
18185: ST_TO_ADDR
// end ;
18186: LD_VAR 0 2
18190: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18191: LD_INT 0
18193: PPUSH
18194: PPUSH
18195: PPUSH
// pom := GetBase ( building ) ;
18196: LD_ADDR_VAR 0 4
18200: PUSH
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 274
18210: ST_TO_ADDR
// if not pom then
18211: LD_VAR 0 4
18215: NOT
18216: IFFALSE 18220
// exit ;
18218: GO 18321
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18220: LD_ADDR_VAR 0 5
18224: PUSH
18225: LD_VAR 0 2
18229: PPUSH
18230: LD_VAR 0 1
18234: PPUSH
18235: CALL_OW 248
18239: PPUSH
18240: CALL_OW 450
18244: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18245: LD_ADDR_VAR 0 3
18249: PUSH
18250: LD_VAR 0 4
18254: PPUSH
18255: LD_INT 1
18257: PPUSH
18258: CALL_OW 275
18262: PUSH
18263: LD_VAR 0 5
18267: PUSH
18268: LD_INT 1
18270: ARRAY
18271: GREATEREQUAL
18272: PUSH
18273: LD_VAR 0 4
18277: PPUSH
18278: LD_INT 2
18280: PPUSH
18281: CALL_OW 275
18285: PUSH
18286: LD_VAR 0 5
18290: PUSH
18291: LD_INT 2
18293: ARRAY
18294: GREATEREQUAL
18295: AND
18296: PUSH
18297: LD_VAR 0 4
18301: PPUSH
18302: LD_INT 3
18304: PPUSH
18305: CALL_OW 275
18309: PUSH
18310: LD_VAR 0 5
18314: PUSH
18315: LD_INT 3
18317: ARRAY
18318: GREATEREQUAL
18319: AND
18320: ST_TO_ADDR
// end ;
18321: LD_VAR 0 3
18325: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18326: LD_INT 0
18328: PPUSH
18329: PPUSH
18330: PPUSH
18331: PPUSH
18332: PPUSH
18333: PPUSH
18334: PPUSH
18335: PPUSH
18336: PPUSH
18337: PPUSH
18338: PPUSH
// result := false ;
18339: LD_ADDR_VAR 0 8
18343: PUSH
18344: LD_INT 0
18346: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18347: LD_VAR 0 5
18351: NOT
18352: PUSH
18353: LD_VAR 0 1
18357: NOT
18358: OR
18359: PUSH
18360: LD_VAR 0 2
18364: NOT
18365: OR
18366: PUSH
18367: LD_VAR 0 3
18371: NOT
18372: OR
18373: IFFALSE 18377
// exit ;
18375: GO 19191
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18377: LD_ADDR_VAR 0 14
18381: PUSH
18382: LD_VAR 0 1
18386: PPUSH
18387: LD_VAR 0 2
18391: PPUSH
18392: LD_VAR 0 3
18396: PPUSH
18397: LD_VAR 0 4
18401: PPUSH
18402: LD_VAR 0 5
18406: PUSH
18407: LD_INT 1
18409: ARRAY
18410: PPUSH
18411: CALL_OW 248
18415: PPUSH
18416: LD_INT 0
18418: PPUSH
18419: CALL 20424 0 6
18423: ST_TO_ADDR
// if not hexes then
18424: LD_VAR 0 14
18428: NOT
18429: IFFALSE 18433
// exit ;
18431: GO 19191
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18433: LD_ADDR_VAR 0 17
18437: PUSH
18438: LD_VAR 0 5
18442: PPUSH
18443: LD_INT 22
18445: PUSH
18446: LD_VAR 0 13
18450: PPUSH
18451: CALL_OW 255
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: LD_INT 30
18465: PUSH
18466: LD_INT 0
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PUSH
18473: LD_INT 30
18475: PUSH
18476: LD_INT 1
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: PUSH
18488: EMPTY
18489: LIST
18490: LIST
18491: PPUSH
18492: CALL_OW 72
18496: ST_TO_ADDR
// for i = 1 to hexes do
18497: LD_ADDR_VAR 0 9
18501: PUSH
18502: DOUBLE
18503: LD_INT 1
18505: DEC
18506: ST_TO_ADDR
18507: LD_VAR 0 14
18511: PUSH
18512: FOR_TO
18513: IFFALSE 19189
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18515: LD_ADDR_VAR 0 13
18519: PUSH
18520: LD_VAR 0 14
18524: PUSH
18525: LD_VAR 0 9
18529: ARRAY
18530: PUSH
18531: LD_INT 1
18533: ARRAY
18534: PPUSH
18535: LD_VAR 0 14
18539: PUSH
18540: LD_VAR 0 9
18544: ARRAY
18545: PUSH
18546: LD_INT 2
18548: ARRAY
18549: PPUSH
18550: CALL_OW 428
18554: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18555: LD_VAR 0 14
18559: PUSH
18560: LD_VAR 0 9
18564: ARRAY
18565: PUSH
18566: LD_INT 1
18568: ARRAY
18569: PPUSH
18570: LD_VAR 0 14
18574: PUSH
18575: LD_VAR 0 9
18579: ARRAY
18580: PUSH
18581: LD_INT 2
18583: ARRAY
18584: PPUSH
18585: CALL_OW 351
18589: PUSH
18590: LD_VAR 0 14
18594: PUSH
18595: LD_VAR 0 9
18599: ARRAY
18600: PUSH
18601: LD_INT 1
18603: ARRAY
18604: PPUSH
18605: LD_VAR 0 14
18609: PUSH
18610: LD_VAR 0 9
18614: ARRAY
18615: PUSH
18616: LD_INT 2
18618: ARRAY
18619: PPUSH
18620: CALL_OW 488
18624: NOT
18625: OR
18626: PUSH
18627: LD_VAR 0 13
18631: PPUSH
18632: CALL_OW 247
18636: PUSH
18637: LD_INT 3
18639: EQUAL
18640: OR
18641: IFFALSE 18647
// exit ;
18643: POP
18644: POP
18645: GO 19191
// if not tmp then
18647: LD_VAR 0 13
18651: NOT
18652: IFFALSE 18656
// continue ;
18654: GO 18512
// result := true ;
18656: LD_ADDR_VAR 0 8
18660: PUSH
18661: LD_INT 1
18663: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18664: LD_VAR 0 6
18668: PUSH
18669: LD_VAR 0 13
18673: PPUSH
18674: CALL_OW 247
18678: PUSH
18679: LD_INT 2
18681: EQUAL
18682: AND
18683: PUSH
18684: LD_VAR 0 13
18688: PPUSH
18689: CALL_OW 263
18693: PUSH
18694: LD_INT 1
18696: EQUAL
18697: AND
18698: IFFALSE 18862
// begin if IsDrivenBy ( tmp ) then
18700: LD_VAR 0 13
18704: PPUSH
18705: CALL_OW 311
18709: IFFALSE 18713
// continue ;
18711: GO 18512
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18713: LD_VAR 0 6
18717: PPUSH
18718: LD_INT 3
18720: PUSH
18721: LD_INT 60
18723: PUSH
18724: EMPTY
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 3
18733: PUSH
18734: LD_INT 55
18736: PUSH
18737: EMPTY
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 72
18752: IFFALSE 18860
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18754: LD_ADDR_VAR 0 18
18758: PUSH
18759: LD_VAR 0 6
18763: PPUSH
18764: LD_INT 3
18766: PUSH
18767: LD_INT 60
18769: PUSH
18770: EMPTY
18771: LIST
18772: PUSH
18773: EMPTY
18774: LIST
18775: LIST
18776: PUSH
18777: LD_INT 3
18779: PUSH
18780: LD_INT 55
18782: PUSH
18783: EMPTY
18784: LIST
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: LIST
18793: PPUSH
18794: CALL_OW 72
18798: PUSH
18799: LD_INT 1
18801: ARRAY
18802: ST_TO_ADDR
// if IsInUnit ( driver ) then
18803: LD_VAR 0 18
18807: PPUSH
18808: CALL_OW 310
18812: IFFALSE 18823
// ComExit ( driver ) ;
18814: LD_VAR 0 18
18818: PPUSH
18819: CALL 44204 0 1
// AddComEnterUnit ( driver , tmp ) ;
18823: LD_VAR 0 18
18827: PPUSH
18828: LD_VAR 0 13
18832: PPUSH
18833: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18837: LD_VAR 0 18
18841: PPUSH
18842: LD_VAR 0 7
18846: PPUSH
18847: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18851: LD_VAR 0 18
18855: PPUSH
18856: CALL_OW 181
// end ; continue ;
18860: GO 18512
// end ; if not cleaners or not tmp in cleaners then
18862: LD_VAR 0 6
18866: NOT
18867: PUSH
18868: LD_VAR 0 13
18872: PUSH
18873: LD_VAR 0 6
18877: IN
18878: NOT
18879: OR
18880: IFFALSE 19187
// begin if dep then
18882: LD_VAR 0 17
18886: IFFALSE 19022
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18888: LD_ADDR_VAR 0 16
18892: PUSH
18893: LD_VAR 0 17
18897: PUSH
18898: LD_INT 1
18900: ARRAY
18901: PPUSH
18902: CALL_OW 250
18906: PPUSH
18907: LD_VAR 0 17
18911: PUSH
18912: LD_INT 1
18914: ARRAY
18915: PPUSH
18916: CALL_OW 254
18920: PPUSH
18921: LD_INT 5
18923: PPUSH
18924: CALL_OW 272
18928: PUSH
18929: LD_VAR 0 17
18933: PUSH
18934: LD_INT 1
18936: ARRAY
18937: PPUSH
18938: CALL_OW 251
18942: PPUSH
18943: LD_VAR 0 17
18947: PUSH
18948: LD_INT 1
18950: ARRAY
18951: PPUSH
18952: CALL_OW 254
18956: PPUSH
18957: LD_INT 5
18959: PPUSH
18960: CALL_OW 273
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
18969: LD_VAR 0 16
18973: PUSH
18974: LD_INT 1
18976: ARRAY
18977: PPUSH
18978: LD_VAR 0 16
18982: PUSH
18983: LD_INT 2
18985: ARRAY
18986: PPUSH
18987: CALL_OW 488
18991: IFFALSE 19022
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
18993: LD_VAR 0 13
18997: PPUSH
18998: LD_VAR 0 16
19002: PUSH
19003: LD_INT 1
19005: ARRAY
19006: PPUSH
19007: LD_VAR 0 16
19011: PUSH
19012: LD_INT 2
19014: ARRAY
19015: PPUSH
19016: CALL_OW 111
// continue ;
19020: GO 18512
// end ; end ; r := GetDir ( tmp ) ;
19022: LD_ADDR_VAR 0 15
19026: PUSH
19027: LD_VAR 0 13
19031: PPUSH
19032: CALL_OW 254
19036: ST_TO_ADDR
// if r = 5 then
19037: LD_VAR 0 15
19041: PUSH
19042: LD_INT 5
19044: EQUAL
19045: IFFALSE 19055
// r := 0 ;
19047: LD_ADDR_VAR 0 15
19051: PUSH
19052: LD_INT 0
19054: ST_TO_ADDR
// for j = r to 5 do
19055: LD_ADDR_VAR 0 10
19059: PUSH
19060: DOUBLE
19061: LD_VAR 0 15
19065: DEC
19066: ST_TO_ADDR
19067: LD_INT 5
19069: PUSH
19070: FOR_TO
19071: IFFALSE 19185
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19073: LD_ADDR_VAR 0 11
19077: PUSH
19078: LD_VAR 0 13
19082: PPUSH
19083: CALL_OW 250
19087: PPUSH
19088: LD_VAR 0 10
19092: PPUSH
19093: LD_INT 2
19095: PPUSH
19096: CALL_OW 272
19100: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19101: LD_ADDR_VAR 0 12
19105: PUSH
19106: LD_VAR 0 13
19110: PPUSH
19111: CALL_OW 251
19115: PPUSH
19116: LD_VAR 0 10
19120: PPUSH
19121: LD_INT 2
19123: PPUSH
19124: CALL_OW 273
19128: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19129: LD_VAR 0 11
19133: PPUSH
19134: LD_VAR 0 12
19138: PPUSH
19139: CALL_OW 488
19143: PUSH
19144: LD_VAR 0 11
19148: PPUSH
19149: LD_VAR 0 12
19153: PPUSH
19154: CALL_OW 428
19158: NOT
19159: AND
19160: IFFALSE 19183
// begin ComMoveXY ( tmp , _x , _y ) ;
19162: LD_VAR 0 13
19166: PPUSH
19167: LD_VAR 0 11
19171: PPUSH
19172: LD_VAR 0 12
19176: PPUSH
19177: CALL_OW 111
// break ;
19181: GO 19185
// end ; end ;
19183: GO 19070
19185: POP
19186: POP
// end ; end ;
19187: GO 18512
19189: POP
19190: POP
// end ;
19191: LD_VAR 0 8
19195: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19196: LD_INT 0
19198: PPUSH
// result := true ;
19199: LD_ADDR_VAR 0 3
19203: PUSH
19204: LD_INT 1
19206: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19207: LD_VAR 0 2
19211: PUSH
19212: LD_INT 24
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19226
19218: LD_INT 33
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19226
19224: GO 19251
19226: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19227: LD_ADDR_VAR 0 3
19231: PUSH
19232: LD_INT 32
19234: PPUSH
19235: LD_VAR 0 1
19239: PPUSH
19240: CALL_OW 321
19244: PUSH
19245: LD_INT 2
19247: EQUAL
19248: ST_TO_ADDR
19249: GO 19567
19251: LD_INT 20
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19284
19259: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19260: LD_ADDR_VAR 0 3
19264: PUSH
19265: LD_INT 6
19267: PPUSH
19268: LD_VAR 0 1
19272: PPUSH
19273: CALL_OW 321
19277: PUSH
19278: LD_INT 2
19280: EQUAL
19281: ST_TO_ADDR
19282: GO 19567
19284: LD_INT 22
19286: DOUBLE
19287: EQUAL
19288: IFTRUE 19298
19290: LD_INT 36
19292: DOUBLE
19293: EQUAL
19294: IFTRUE 19298
19296: GO 19323
19298: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19299: LD_ADDR_VAR 0 3
19303: PUSH
19304: LD_INT 15
19306: PPUSH
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 321
19316: PUSH
19317: LD_INT 2
19319: EQUAL
19320: ST_TO_ADDR
19321: GO 19567
19323: LD_INT 30
19325: DOUBLE
19326: EQUAL
19327: IFTRUE 19331
19329: GO 19356
19331: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19332: LD_ADDR_VAR 0 3
19336: PUSH
19337: LD_INT 20
19339: PPUSH
19340: LD_VAR 0 1
19344: PPUSH
19345: CALL_OW 321
19349: PUSH
19350: LD_INT 2
19352: EQUAL
19353: ST_TO_ADDR
19354: GO 19567
19356: LD_INT 28
19358: DOUBLE
19359: EQUAL
19360: IFTRUE 19370
19362: LD_INT 21
19364: DOUBLE
19365: EQUAL
19366: IFTRUE 19370
19368: GO 19395
19370: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19371: LD_ADDR_VAR 0 3
19375: PUSH
19376: LD_INT 21
19378: PPUSH
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 321
19388: PUSH
19389: LD_INT 2
19391: EQUAL
19392: ST_TO_ADDR
19393: GO 19567
19395: LD_INT 16
19397: DOUBLE
19398: EQUAL
19399: IFTRUE 19403
19401: GO 19428
19403: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19404: LD_ADDR_VAR 0 3
19408: PUSH
19409: LD_INT 84
19411: PPUSH
19412: LD_VAR 0 1
19416: PPUSH
19417: CALL_OW 321
19421: PUSH
19422: LD_INT 2
19424: EQUAL
19425: ST_TO_ADDR
19426: GO 19567
19428: LD_INT 19
19430: DOUBLE
19431: EQUAL
19432: IFTRUE 19442
19434: LD_INT 23
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19467
19442: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_INT 83
19450: PPUSH
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 321
19460: PUSH
19461: LD_INT 2
19463: EQUAL
19464: ST_TO_ADDR
19465: GO 19567
19467: LD_INT 17
19469: DOUBLE
19470: EQUAL
19471: IFTRUE 19475
19473: GO 19500
19475: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19476: LD_ADDR_VAR 0 3
19480: PUSH
19481: LD_INT 39
19483: PPUSH
19484: LD_VAR 0 1
19488: PPUSH
19489: CALL_OW 321
19493: PUSH
19494: LD_INT 2
19496: EQUAL
19497: ST_TO_ADDR
19498: GO 19567
19500: LD_INT 18
19502: DOUBLE
19503: EQUAL
19504: IFTRUE 19508
19506: GO 19533
19508: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19509: LD_ADDR_VAR 0 3
19513: PUSH
19514: LD_INT 40
19516: PPUSH
19517: LD_VAR 0 1
19521: PPUSH
19522: CALL_OW 321
19526: PUSH
19527: LD_INT 2
19529: EQUAL
19530: ST_TO_ADDR
19531: GO 19567
19533: LD_INT 27
19535: DOUBLE
19536: EQUAL
19537: IFTRUE 19541
19539: GO 19566
19541: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19542: LD_ADDR_VAR 0 3
19546: PUSH
19547: LD_INT 35
19549: PPUSH
19550: LD_VAR 0 1
19554: PPUSH
19555: CALL_OW 321
19559: PUSH
19560: LD_INT 2
19562: EQUAL
19563: ST_TO_ADDR
19564: GO 19567
19566: POP
// end ;
19567: LD_VAR 0 3
19571: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19572: LD_INT 0
19574: PPUSH
19575: PPUSH
19576: PPUSH
19577: PPUSH
19578: PPUSH
19579: PPUSH
19580: PPUSH
19581: PPUSH
19582: PPUSH
19583: PPUSH
19584: PPUSH
// result := false ;
19585: LD_ADDR_VAR 0 6
19589: PUSH
19590: LD_INT 0
19592: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19593: LD_VAR 0 1
19597: NOT
19598: PUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 266
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: LD_INT 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: IN
19619: NOT
19620: OR
19621: PUSH
19622: LD_VAR 0 2
19626: NOT
19627: OR
19628: PUSH
19629: LD_VAR 0 5
19633: PUSH
19634: LD_INT 0
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: LD_INT 2
19642: PUSH
19643: LD_INT 3
19645: PUSH
19646: LD_INT 4
19648: PUSH
19649: LD_INT 5
19651: PUSH
19652: EMPTY
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: LIST
19658: LIST
19659: IN
19660: NOT
19661: OR
19662: PUSH
19663: LD_VAR 0 3
19667: PPUSH
19668: LD_VAR 0 4
19672: PPUSH
19673: CALL_OW 488
19677: NOT
19678: OR
19679: IFFALSE 19683
// exit ;
19681: GO 20419
// side := GetSide ( depot ) ;
19683: LD_ADDR_VAR 0 9
19687: PUSH
19688: LD_VAR 0 1
19692: PPUSH
19693: CALL_OW 255
19697: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
19698: LD_VAR 0 9
19702: PPUSH
19703: LD_VAR 0 2
19707: PPUSH
19708: CALL 19196 0 2
19712: NOT
19713: IFFALSE 19717
// exit ;
19715: GO 20419
// pom := GetBase ( depot ) ;
19717: LD_ADDR_VAR 0 10
19721: PUSH
19722: LD_VAR 0 1
19726: PPUSH
19727: CALL_OW 274
19731: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
19732: LD_ADDR_VAR 0 11
19736: PUSH
19737: LD_VAR 0 2
19741: PPUSH
19742: LD_VAR 0 1
19746: PPUSH
19747: CALL_OW 248
19751: PPUSH
19752: CALL_OW 450
19756: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
19757: LD_VAR 0 10
19761: PPUSH
19762: LD_INT 1
19764: PPUSH
19765: CALL_OW 275
19769: PUSH
19770: LD_VAR 0 11
19774: PUSH
19775: LD_INT 1
19777: ARRAY
19778: GREATEREQUAL
19779: PUSH
19780: LD_VAR 0 10
19784: PPUSH
19785: LD_INT 2
19787: PPUSH
19788: CALL_OW 275
19792: PUSH
19793: LD_VAR 0 11
19797: PUSH
19798: LD_INT 2
19800: ARRAY
19801: GREATEREQUAL
19802: AND
19803: PUSH
19804: LD_VAR 0 10
19808: PPUSH
19809: LD_INT 3
19811: PPUSH
19812: CALL_OW 275
19816: PUSH
19817: LD_VAR 0 11
19821: PUSH
19822: LD_INT 3
19824: ARRAY
19825: GREATEREQUAL
19826: AND
19827: NOT
19828: IFFALSE 19832
// exit ;
19830: GO 20419
// if GetBType ( depot ) = b_depot then
19832: LD_VAR 0 1
19836: PPUSH
19837: CALL_OW 266
19841: PUSH
19842: LD_INT 0
19844: EQUAL
19845: IFFALSE 19857
// dist := 28 else
19847: LD_ADDR_VAR 0 14
19851: PUSH
19852: LD_INT 28
19854: ST_TO_ADDR
19855: GO 19865
// dist := 36 ;
19857: LD_ADDR_VAR 0 14
19861: PUSH
19862: LD_INT 36
19864: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19865: LD_VAR 0 1
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: LD_VAR 0 4
19879: PPUSH
19880: CALL_OW 297
19884: PUSH
19885: LD_VAR 0 14
19889: GREATER
19890: IFFALSE 19894
// exit ;
19892: GO 20419
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
19894: LD_ADDR_VAR 0 12
19898: PUSH
19899: LD_VAR 0 2
19903: PPUSH
19904: LD_VAR 0 3
19908: PPUSH
19909: LD_VAR 0 4
19913: PPUSH
19914: LD_VAR 0 5
19918: PPUSH
19919: LD_VAR 0 1
19923: PPUSH
19924: CALL_OW 248
19928: PPUSH
19929: LD_INT 0
19931: PPUSH
19932: CALL 20424 0 6
19936: ST_TO_ADDR
// if not hexes then
19937: LD_VAR 0 12
19941: NOT
19942: IFFALSE 19946
// exit ;
19944: GO 20419
// hex := GetHexInfo ( x , y ) ;
19946: LD_ADDR_VAR 0 15
19950: PUSH
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_VAR 0 4
19960: PPUSH
19961: CALL_OW 546
19965: ST_TO_ADDR
// if hex [ 1 ] then
19966: LD_VAR 0 15
19970: PUSH
19971: LD_INT 1
19973: ARRAY
19974: IFFALSE 19978
// exit ;
19976: GO 20419
// height := hex [ 2 ] ;
19978: LD_ADDR_VAR 0 13
19982: PUSH
19983: LD_VAR 0 15
19987: PUSH
19988: LD_INT 2
19990: ARRAY
19991: ST_TO_ADDR
// for i = 1 to hexes do
19992: LD_ADDR_VAR 0 7
19996: PUSH
19997: DOUBLE
19998: LD_INT 1
20000: DEC
20001: ST_TO_ADDR
20002: LD_VAR 0 12
20006: PUSH
20007: FOR_TO
20008: IFFALSE 20338
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20010: LD_VAR 0 12
20014: PUSH
20015: LD_VAR 0 7
20019: ARRAY
20020: PUSH
20021: LD_INT 1
20023: ARRAY
20024: PPUSH
20025: LD_VAR 0 12
20029: PUSH
20030: LD_VAR 0 7
20034: ARRAY
20035: PUSH
20036: LD_INT 2
20038: ARRAY
20039: PPUSH
20040: CALL_OW 488
20044: NOT
20045: PUSH
20046: LD_VAR 0 12
20050: PUSH
20051: LD_VAR 0 7
20055: ARRAY
20056: PUSH
20057: LD_INT 1
20059: ARRAY
20060: PPUSH
20061: LD_VAR 0 12
20065: PUSH
20066: LD_VAR 0 7
20070: ARRAY
20071: PUSH
20072: LD_INT 2
20074: ARRAY
20075: PPUSH
20076: CALL_OW 428
20080: PUSH
20081: LD_INT 0
20083: GREATER
20084: OR
20085: PUSH
20086: LD_VAR 0 12
20090: PUSH
20091: LD_VAR 0 7
20095: ARRAY
20096: PUSH
20097: LD_INT 1
20099: ARRAY
20100: PPUSH
20101: LD_VAR 0 12
20105: PUSH
20106: LD_VAR 0 7
20110: ARRAY
20111: PUSH
20112: LD_INT 2
20114: ARRAY
20115: PPUSH
20116: CALL_OW 351
20120: OR
20121: IFFALSE 20127
// exit ;
20123: POP
20124: POP
20125: GO 20419
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20127: LD_ADDR_VAR 0 8
20131: PUSH
20132: LD_VAR 0 12
20136: PUSH
20137: LD_VAR 0 7
20141: ARRAY
20142: PUSH
20143: LD_INT 1
20145: ARRAY
20146: PPUSH
20147: LD_VAR 0 12
20151: PUSH
20152: LD_VAR 0 7
20156: ARRAY
20157: PUSH
20158: LD_INT 2
20160: ARRAY
20161: PPUSH
20162: CALL_OW 546
20166: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20167: LD_VAR 0 8
20171: PUSH
20172: LD_INT 1
20174: ARRAY
20175: PUSH
20176: LD_VAR 0 8
20180: PUSH
20181: LD_INT 2
20183: ARRAY
20184: PUSH
20185: LD_VAR 0 13
20189: PUSH
20190: LD_INT 2
20192: PLUS
20193: GREATER
20194: OR
20195: PUSH
20196: LD_VAR 0 8
20200: PUSH
20201: LD_INT 2
20203: ARRAY
20204: PUSH
20205: LD_VAR 0 13
20209: PUSH
20210: LD_INT 2
20212: MINUS
20213: LESS
20214: OR
20215: PUSH
20216: LD_VAR 0 8
20220: PUSH
20221: LD_INT 3
20223: ARRAY
20224: PUSH
20225: LD_INT 0
20227: PUSH
20228: LD_INT 8
20230: PUSH
20231: LD_INT 9
20233: PUSH
20234: LD_INT 10
20236: PUSH
20237: LD_INT 11
20239: PUSH
20240: LD_INT 12
20242: PUSH
20243: LD_INT 13
20245: PUSH
20246: LD_INT 16
20248: PUSH
20249: LD_INT 17
20251: PUSH
20252: LD_INT 18
20254: PUSH
20255: LD_INT 19
20257: PUSH
20258: LD_INT 20
20260: PUSH
20261: LD_INT 21
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: IN
20279: NOT
20280: OR
20281: PUSH
20282: LD_VAR 0 8
20286: PUSH
20287: LD_INT 5
20289: ARRAY
20290: NOT
20291: OR
20292: PUSH
20293: LD_VAR 0 8
20297: PUSH
20298: LD_INT 6
20300: ARRAY
20301: PUSH
20302: LD_INT 1
20304: PUSH
20305: LD_INT 2
20307: PUSH
20308: LD_INT 7
20310: PUSH
20311: LD_INT 9
20313: PUSH
20314: LD_INT 10
20316: PUSH
20317: LD_INT 11
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: IN
20328: NOT
20329: OR
20330: IFFALSE 20336
// exit ;
20332: POP
20333: POP
20334: GO 20419
// end ;
20336: GO 20007
20338: POP
20339: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20340: LD_VAR 0 9
20344: PPUSH
20345: LD_VAR 0 3
20349: PPUSH
20350: LD_VAR 0 4
20354: PPUSH
20355: LD_INT 20
20357: PPUSH
20358: CALL 12371 0 4
20362: PUSH
20363: LD_INT 4
20365: ARRAY
20366: IFFALSE 20370
// exit ;
20368: GO 20419
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20370: LD_VAR 0 2
20374: PUSH
20375: LD_INT 29
20377: PUSH
20378: LD_INT 30
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: IN
20385: PUSH
20386: LD_VAR 0 3
20390: PPUSH
20391: LD_VAR 0 4
20395: PPUSH
20396: LD_VAR 0 9
20400: PPUSH
20401: CALL_OW 440
20405: NOT
20406: AND
20407: IFFALSE 20411
// exit ;
20409: GO 20419
// result := true ;
20411: LD_ADDR_VAR 0 6
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
// end ;
20419: LD_VAR 0 6
20423: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20424: LD_INT 0
20426: PPUSH
20427: PPUSH
20428: PPUSH
20429: PPUSH
20430: PPUSH
20431: PPUSH
20432: PPUSH
20433: PPUSH
20434: PPUSH
20435: PPUSH
20436: PPUSH
20437: PPUSH
20438: PPUSH
20439: PPUSH
20440: PPUSH
20441: PPUSH
20442: PPUSH
20443: PPUSH
20444: PPUSH
20445: PPUSH
20446: PPUSH
20447: PPUSH
20448: PPUSH
20449: PPUSH
20450: PPUSH
20451: PPUSH
20452: PPUSH
20453: PPUSH
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
20463: PPUSH
20464: PPUSH
20465: PPUSH
20466: PPUSH
20467: PPUSH
20468: PPUSH
20469: PPUSH
20470: PPUSH
20471: PPUSH
20472: PPUSH
20473: PPUSH
20474: PPUSH
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
20482: PPUSH
20483: PPUSH
// result = [ ] ;
20484: LD_ADDR_VAR 0 7
20488: PUSH
20489: EMPTY
20490: ST_TO_ADDR
// temp_list = [ ] ;
20491: LD_ADDR_VAR 0 9
20495: PUSH
20496: EMPTY
20497: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20498: LD_VAR 0 4
20502: PUSH
20503: LD_INT 0
20505: PUSH
20506: LD_INT 1
20508: PUSH
20509: LD_INT 2
20511: PUSH
20512: LD_INT 3
20514: PUSH
20515: LD_INT 4
20517: PUSH
20518: LD_INT 5
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: IN
20529: NOT
20530: PUSH
20531: LD_VAR 0 1
20535: PUSH
20536: LD_INT 0
20538: PUSH
20539: LD_INT 1
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: IN
20546: PUSH
20547: LD_VAR 0 5
20551: PUSH
20552: LD_INT 1
20554: PUSH
20555: LD_INT 2
20557: PUSH
20558: LD_INT 3
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: IN
20566: NOT
20567: AND
20568: OR
20569: IFFALSE 20573
// exit ;
20571: GO 38964
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20573: LD_VAR 0 1
20577: PUSH
20578: LD_INT 6
20580: PUSH
20581: LD_INT 7
20583: PUSH
20584: LD_INT 8
20586: PUSH
20587: LD_INT 13
20589: PUSH
20590: LD_INT 12
20592: PUSH
20593: LD_INT 15
20595: PUSH
20596: LD_INT 11
20598: PUSH
20599: LD_INT 14
20601: PUSH
20602: LD_INT 10
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: IN
20616: IFFALSE 20626
// btype = b_lab ;
20618: LD_ADDR_VAR 0 1
20622: PUSH
20623: LD_INT 6
20625: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20626: LD_VAR 0 6
20630: PUSH
20631: LD_INT 0
20633: PUSH
20634: LD_INT 1
20636: PUSH
20637: LD_INT 2
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: LIST
20644: IN
20645: NOT
20646: PUSH
20647: LD_VAR 0 1
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: LD_INT 2
20660: PUSH
20661: LD_INT 3
20663: PUSH
20664: LD_INT 6
20666: PUSH
20667: LD_INT 36
20669: PUSH
20670: LD_INT 4
20672: PUSH
20673: LD_INT 5
20675: PUSH
20676: LD_INT 31
20678: PUSH
20679: LD_INT 32
20681: PUSH
20682: LD_INT 33
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: IN
20698: NOT
20699: PUSH
20700: LD_VAR 0 6
20704: PUSH
20705: LD_INT 1
20707: EQUAL
20708: AND
20709: OR
20710: PUSH
20711: LD_VAR 0 1
20715: PUSH
20716: LD_INT 2
20718: PUSH
20719: LD_INT 3
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: IN
20726: NOT
20727: PUSH
20728: LD_VAR 0 6
20732: PUSH
20733: LD_INT 2
20735: EQUAL
20736: AND
20737: OR
20738: IFFALSE 20748
// mode = 0 ;
20740: LD_ADDR_VAR 0 6
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// case mode of 0 :
20748: LD_VAR 0 6
20752: PUSH
20753: LD_INT 0
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 32214
20761: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20762: LD_ADDR_VAR 0 11
20766: PUSH
20767: LD_INT 0
20769: PUSH
20770: LD_INT 0
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 0
20779: PUSH
20780: LD_INT 1
20782: NEG
20783: PUSH
20784: EMPTY
20785: LIST
20786: LIST
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 1
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 1
20820: NEG
20821: PUSH
20822: LD_INT 0
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 1
20831: NEG
20832: PUSH
20833: LD_INT 1
20835: NEG
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: PUSH
20841: LD_INT 1
20843: NEG
20844: PUSH
20845: LD_INT 2
20847: NEG
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PUSH
20853: LD_INT 0
20855: PUSH
20856: LD_INT 2
20858: NEG
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: LD_INT 1
20869: NEG
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: PUSH
20878: LD_INT 2
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: LD_INT 1
20897: NEG
20898: PUSH
20899: LD_INT 1
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: LD_INT 3
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: PUSH
20916: LD_INT 0
20918: PUSH
20919: LD_INT 3
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PUSH
20926: LD_INT 1
20928: NEG
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
20955: LD_ADDR_VAR 0 12
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 1
21013: NEG
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: LD_INT 1
21039: NEG
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: PUSH
21045: LD_INT 2
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: EMPTY
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 2
21057: PUSH
21058: LD_INT 1
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: LD_INT 1
21067: NEG
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: EMPTY
21073: LIST
21074: LIST
21075: PUSH
21076: LD_INT 2
21078: NEG
21079: PUSH
21080: LD_INT 0
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 2
21089: NEG
21090: PUSH
21091: LD_INT 1
21093: NEG
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 2
21101: NEG
21102: PUSH
21103: LD_INT 1
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 3
21112: NEG
21113: PUSH
21114: LD_INT 0
21116: PUSH
21117: EMPTY
21118: LIST
21119: LIST
21120: PUSH
21121: LD_INT 3
21123: NEG
21124: PUSH
21125: LD_INT 1
21127: NEG
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21151: LD_ADDR_VAR 0 13
21155: PUSH
21156: LD_INT 0
21158: PUSH
21159: LD_INT 0
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 0
21168: PUSH
21169: LD_INT 1
21171: NEG
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 1
21179: PUSH
21180: LD_INT 0
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: PUSH
21190: LD_INT 1
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: LD_INT 0
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 1
21209: NEG
21210: PUSH
21211: LD_INT 0
21213: PUSH
21214: EMPTY
21215: LIST
21216: LIST
21217: PUSH
21218: LD_INT 1
21220: NEG
21221: PUSH
21222: LD_INT 1
21224: NEG
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 1
21232: NEG
21233: PUSH
21234: LD_INT 2
21236: NEG
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 2
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: EMPTY
21249: LIST
21250: LIST
21251: PUSH
21252: LD_INT 2
21254: PUSH
21255: LD_INT 2
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 1
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: EMPTY
21269: LIST
21270: LIST
21271: PUSH
21272: LD_INT 2
21274: NEG
21275: PUSH
21276: LD_INT 1
21278: NEG
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 2
21286: NEG
21287: PUSH
21288: LD_INT 2
21290: NEG
21291: PUSH
21292: EMPTY
21293: LIST
21294: LIST
21295: PUSH
21296: LD_INT 2
21298: NEG
21299: PUSH
21300: LD_INT 3
21302: NEG
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 3
21310: NEG
21311: PUSH
21312: LD_INT 2
21314: NEG
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 3
21322: NEG
21323: PUSH
21324: LD_INT 3
21326: NEG
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: EMPTY
21333: LIST
21334: LIST
21335: LIST
21336: LIST
21337: LIST
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21350: LD_ADDR_VAR 0 14
21354: PUSH
21355: LD_INT 0
21357: PUSH
21358: LD_INT 0
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 0
21367: PUSH
21368: LD_INT 1
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: LD_INT 0
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: PUSH
21386: LD_INT 1
21388: PUSH
21389: LD_INT 1
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 0
21398: PUSH
21399: LD_INT 1
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 1
21408: NEG
21409: PUSH
21410: LD_INT 0
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: LD_INT 1
21419: NEG
21420: PUSH
21421: LD_INT 1
21423: NEG
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 1
21431: NEG
21432: PUSH
21433: LD_INT 2
21435: NEG
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 0
21443: PUSH
21444: LD_INT 2
21446: NEG
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: LD_INT 1
21457: NEG
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: LD_INT 2
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PUSH
21473: LD_INT 0
21475: PUSH
21476: LD_INT 2
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 1
21485: NEG
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 1
21496: NEG
21497: PUSH
21498: LD_INT 3
21500: NEG
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 3
21511: NEG
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PUSH
21517: LD_INT 1
21519: PUSH
21520: LD_INT 2
21522: NEG
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21546: LD_ADDR_VAR 0 15
21550: PUSH
21551: LD_INT 0
21553: PUSH
21554: LD_INT 0
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 0
21563: PUSH
21564: LD_INT 1
21566: NEG
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: LD_INT 0
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 1
21584: PUSH
21585: LD_INT 1
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 0
21594: PUSH
21595: LD_INT 1
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: NEG
21605: PUSH
21606: LD_INT 0
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: LD_INT 1
21615: NEG
21616: PUSH
21617: LD_INT 1
21619: NEG
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PUSH
21628: LD_INT 1
21630: NEG
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: PUSH
21636: LD_INT 2
21638: PUSH
21639: LD_INT 0
21641: PUSH
21642: EMPTY
21643: LIST
21644: LIST
21645: PUSH
21646: LD_INT 2
21648: PUSH
21649: LD_INT 1
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: PUSH
21656: LD_INT 1
21658: NEG
21659: PUSH
21660: LD_INT 1
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: PUSH
21667: LD_INT 2
21669: NEG
21670: PUSH
21671: LD_INT 0
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: PUSH
21678: LD_INT 2
21680: NEG
21681: PUSH
21682: LD_INT 1
21684: NEG
21685: PUSH
21686: EMPTY
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 2
21692: PUSH
21693: LD_INT 1
21695: NEG
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: LD_INT 0
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PUSH
21711: LD_INT 3
21713: PUSH
21714: LD_INT 1
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: LIST
21736: LIST
21737: LIST
21738: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21739: LD_ADDR_VAR 0 16
21743: PUSH
21744: LD_INT 0
21746: PUSH
21747: LD_INT 0
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 0
21756: PUSH
21757: LD_INT 1
21759: NEG
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PUSH
21765: LD_INT 1
21767: PUSH
21768: LD_INT 0
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 1
21777: PUSH
21778: LD_INT 1
21780: PUSH
21781: EMPTY
21782: LIST
21783: LIST
21784: PUSH
21785: LD_INT 0
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 1
21797: NEG
21798: PUSH
21799: LD_INT 0
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: LD_INT 1
21808: NEG
21809: PUSH
21810: LD_INT 1
21812: NEG
21813: PUSH
21814: EMPTY
21815: LIST
21816: LIST
21817: PUSH
21818: LD_INT 1
21820: NEG
21821: PUSH
21822: LD_INT 2
21824: NEG
21825: PUSH
21826: EMPTY
21827: LIST
21828: LIST
21829: PUSH
21830: LD_INT 2
21832: PUSH
21833: LD_INT 1
21835: PUSH
21836: EMPTY
21837: LIST
21838: LIST
21839: PUSH
21840: LD_INT 2
21842: PUSH
21843: LD_INT 2
21845: PUSH
21846: EMPTY
21847: LIST
21848: LIST
21849: PUSH
21850: LD_INT 1
21852: PUSH
21853: LD_INT 2
21855: PUSH
21856: EMPTY
21857: LIST
21858: LIST
21859: PUSH
21860: LD_INT 2
21862: NEG
21863: PUSH
21864: LD_INT 1
21866: NEG
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 2
21874: NEG
21875: PUSH
21876: LD_INT 2
21878: NEG
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PUSH
21884: LD_INT 3
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PUSH
21894: LD_INT 3
21896: PUSH
21897: LD_INT 3
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PUSH
21904: LD_INT 2
21906: PUSH
21907: LD_INT 3
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21932: LD_ADDR_VAR 0 17
21936: PUSH
21937: LD_INT 0
21939: PUSH
21940: LD_INT 0
21942: PUSH
21943: EMPTY
21944: LIST
21945: LIST
21946: PUSH
21947: LD_INT 0
21949: PUSH
21950: LD_INT 1
21952: NEG
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: LD_INT 0
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PUSH
21968: LD_INT 1
21970: PUSH
21971: LD_INT 1
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 0
21980: PUSH
21981: LD_INT 1
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: LD_INT 1
21990: NEG
21991: PUSH
21992: LD_INT 0
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: NEG
22002: PUSH
22003: LD_INT 1
22005: NEG
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 1
22013: NEG
22014: PUSH
22015: LD_INT 2
22017: NEG
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 0
22025: PUSH
22026: LD_INT 2
22028: NEG
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: LD_INT 1
22039: NEG
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 2
22047: PUSH
22048: LD_INT 0
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: LD_INT 1
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: PUSH
22065: LD_INT 2
22067: PUSH
22068: LD_INT 2
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: PUSH
22075: LD_INT 1
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: PUSH
22085: LD_INT 0
22087: PUSH
22088: LD_INT 2
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PUSH
22095: LD_INT 1
22097: NEG
22098: PUSH
22099: LD_INT 1
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 2
22108: NEG
22109: PUSH
22110: LD_INT 0
22112: PUSH
22113: EMPTY
22114: LIST
22115: LIST
22116: PUSH
22117: LD_INT 2
22119: NEG
22120: PUSH
22121: LD_INT 1
22123: NEG
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 2
22131: NEG
22132: PUSH
22133: LD_INT 2
22135: NEG
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22162: LD_ADDR_VAR 0 18
22166: PUSH
22167: LD_INT 0
22169: PUSH
22170: LD_INT 0
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 0
22179: PUSH
22180: LD_INT 1
22182: NEG
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: LD_INT 0
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 1
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 0
22210: PUSH
22211: LD_INT 1
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 1
22220: NEG
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 1
22231: NEG
22232: PUSH
22233: LD_INT 1
22235: NEG
22236: PUSH
22237: EMPTY
22238: LIST
22239: LIST
22240: PUSH
22241: LD_INT 1
22243: NEG
22244: PUSH
22245: LD_INT 2
22247: NEG
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 0
22255: PUSH
22256: LD_INT 2
22258: NEG
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 1
22266: PUSH
22267: LD_INT 1
22269: NEG
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 2
22277: PUSH
22278: LD_INT 0
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 2
22287: PUSH
22288: LD_INT 1
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 2
22297: PUSH
22298: LD_INT 2
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: LD_INT 1
22307: PUSH
22308: LD_INT 2
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 0
22317: PUSH
22318: LD_INT 2
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 1
22327: NEG
22328: PUSH
22329: LD_INT 1
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: LD_INT 2
22338: NEG
22339: PUSH
22340: LD_INT 0
22342: PUSH
22343: EMPTY
22344: LIST
22345: LIST
22346: PUSH
22347: LD_INT 2
22349: NEG
22350: PUSH
22351: LD_INT 1
22353: NEG
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 2
22361: NEG
22362: PUSH
22363: LD_INT 2
22365: NEG
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22392: LD_ADDR_VAR 0 19
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: LD_INT 0
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: PUSH
22407: LD_INT 0
22409: PUSH
22410: LD_INT 1
22412: NEG
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 1
22420: PUSH
22421: LD_INT 0
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 1
22430: PUSH
22431: LD_INT 1
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 0
22440: PUSH
22441: LD_INT 1
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 1
22450: NEG
22451: PUSH
22452: LD_INT 0
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 1
22461: NEG
22462: PUSH
22463: LD_INT 1
22465: NEG
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: PUSH
22471: LD_INT 1
22473: NEG
22474: PUSH
22475: LD_INT 2
22477: NEG
22478: PUSH
22479: EMPTY
22480: LIST
22481: LIST
22482: PUSH
22483: LD_INT 0
22485: PUSH
22486: LD_INT 2
22488: NEG
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 1
22496: PUSH
22497: LD_INT 1
22499: NEG
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 2
22507: PUSH
22508: LD_INT 0
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 2
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: LD_INT 2
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: LD_INT 2
22540: PUSH
22541: EMPTY
22542: LIST
22543: LIST
22544: PUSH
22545: LD_INT 0
22547: PUSH
22548: LD_INT 2
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 1
22557: NEG
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 2
22568: NEG
22569: PUSH
22570: LD_INT 0
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 2
22579: NEG
22580: PUSH
22581: LD_INT 1
22583: NEG
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: LD_INT 2
22591: NEG
22592: PUSH
22593: LD_INT 2
22595: NEG
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22622: LD_ADDR_VAR 0 20
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: LD_INT 0
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: LD_INT 0
22639: PUSH
22640: LD_INT 1
22642: NEG
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 1
22650: PUSH
22651: LD_INT 0
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 1
22660: PUSH
22661: LD_INT 1
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 0
22670: PUSH
22671: LD_INT 1
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 1
22680: NEG
22681: PUSH
22682: LD_INT 0
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 1
22691: NEG
22692: PUSH
22693: LD_INT 1
22695: NEG
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 1
22703: NEG
22704: PUSH
22705: LD_INT 2
22707: NEG
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 0
22715: PUSH
22716: LD_INT 2
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 1
22726: PUSH
22727: LD_INT 1
22729: NEG
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 0
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: PUSH
22745: LD_INT 2
22747: PUSH
22748: LD_INT 1
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: LD_INT 2
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 0
22777: PUSH
22778: LD_INT 2
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 1
22787: NEG
22788: PUSH
22789: LD_INT 1
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 2
22798: NEG
22799: PUSH
22800: LD_INT 0
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 2
22809: NEG
22810: PUSH
22811: LD_INT 1
22813: NEG
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 2
22821: NEG
22822: PUSH
22823: LD_INT 2
22825: NEG
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: EMPTY
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22852: LD_ADDR_VAR 0 21
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: LD_INT 0
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 0
22869: PUSH
22870: LD_INT 1
22872: NEG
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 1
22880: PUSH
22881: LD_INT 0
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 1
22890: PUSH
22891: LD_INT 1
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 0
22900: PUSH
22901: LD_INT 1
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 1
22910: NEG
22911: PUSH
22912: LD_INT 0
22914: PUSH
22915: EMPTY
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 1
22921: NEG
22922: PUSH
22923: LD_INT 1
22925: NEG
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: LD_INT 1
22933: NEG
22934: PUSH
22935: LD_INT 2
22937: NEG
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: LD_INT 0
22945: PUSH
22946: LD_INT 2
22948: NEG
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 1
22956: PUSH
22957: LD_INT 1
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 2
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 2
22977: PUSH
22978: LD_INT 1
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 2
22987: PUSH
22988: LD_INT 2
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 1
22997: PUSH
22998: LD_INT 2
23000: PUSH
23001: EMPTY
23002: LIST
23003: LIST
23004: PUSH
23005: LD_INT 0
23007: PUSH
23008: LD_INT 2
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PUSH
23015: LD_INT 1
23017: NEG
23018: PUSH
23019: LD_INT 1
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: PUSH
23026: LD_INT 2
23028: NEG
23029: PUSH
23030: LD_INT 0
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 2
23039: NEG
23040: PUSH
23041: LD_INT 1
23043: NEG
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 2
23051: NEG
23052: PUSH
23053: LD_INT 2
23055: NEG
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23082: LD_ADDR_VAR 0 22
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: LD_INT 0
23099: PUSH
23100: LD_INT 1
23102: NEG
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PUSH
23108: LD_INT 1
23110: PUSH
23111: LD_INT 0
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PUSH
23121: LD_INT 1
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 0
23130: PUSH
23131: LD_INT 1
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 1
23140: NEG
23141: PUSH
23142: LD_INT 0
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 1
23151: NEG
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 1
23163: NEG
23164: PUSH
23165: LD_INT 2
23167: NEG
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 2
23178: NEG
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: LD_INT 1
23189: NEG
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 2
23197: PUSH
23198: LD_INT 0
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 2
23207: PUSH
23208: LD_INT 1
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 2
23220: PUSH
23221: EMPTY
23222: LIST
23223: LIST
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: LD_INT 2
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: LD_INT 0
23237: PUSH
23238: LD_INT 2
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 1
23247: NEG
23248: PUSH
23249: LD_INT 1
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 2
23258: NEG
23259: PUSH
23260: LD_INT 0
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PUSH
23271: LD_INT 1
23273: NEG
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: PUSH
23279: LD_INT 2
23281: NEG
23282: PUSH
23283: LD_INT 2
23285: NEG
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23312: LD_ADDR_VAR 0 23
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 0
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 0
23329: PUSH
23330: LD_INT 1
23332: NEG
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 1
23340: PUSH
23341: LD_INT 0
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 1
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 0
23360: PUSH
23361: LD_INT 1
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: PUSH
23368: LD_INT 1
23370: NEG
23371: PUSH
23372: LD_INT 0
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: PUSH
23379: LD_INT 1
23381: NEG
23382: PUSH
23383: LD_INT 1
23385: NEG
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: PUSH
23391: LD_INT 1
23393: NEG
23394: PUSH
23395: LD_INT 2
23397: NEG
23398: PUSH
23399: EMPTY
23400: LIST
23401: LIST
23402: PUSH
23403: LD_INT 0
23405: PUSH
23406: LD_INT 2
23408: NEG
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 1
23419: NEG
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 0
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PUSH
23435: LD_INT 2
23437: PUSH
23438: LD_INT 1
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: PUSH
23445: LD_INT 2
23447: PUSH
23448: LD_INT 2
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 1
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: LD_INT 0
23467: PUSH
23468: LD_INT 2
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: PUSH
23475: LD_INT 1
23477: NEG
23478: PUSH
23479: LD_INT 1
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 2
23488: NEG
23489: PUSH
23490: LD_INT 0
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PUSH
23497: LD_INT 2
23499: NEG
23500: PUSH
23501: LD_INT 1
23503: NEG
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: LD_INT 2
23511: NEG
23512: PUSH
23513: LD_INT 2
23515: NEG
23516: PUSH
23517: EMPTY
23518: LIST
23519: LIST
23520: PUSH
23521: LD_INT 2
23523: NEG
23524: PUSH
23525: LD_INT 3
23527: NEG
23528: PUSH
23529: EMPTY
23530: LIST
23531: LIST
23532: PUSH
23533: LD_INT 1
23535: NEG
23536: PUSH
23537: LD_INT 3
23539: NEG
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 1
23547: PUSH
23548: LD_INT 2
23550: NEG
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 2
23558: PUSH
23559: LD_INT 1
23561: NEG
23562: PUSH
23563: EMPTY
23564: LIST
23565: LIST
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23592: LD_ADDR_VAR 0 24
23596: PUSH
23597: LD_INT 0
23599: PUSH
23600: LD_INT 0
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PUSH
23607: LD_INT 0
23609: PUSH
23610: LD_INT 1
23612: NEG
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: LD_INT 1
23620: PUSH
23621: LD_INT 0
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: LD_INT 1
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 0
23640: PUSH
23641: LD_INT 1
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 1
23650: NEG
23651: PUSH
23652: LD_INT 0
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 1
23661: NEG
23662: PUSH
23663: LD_INT 1
23665: NEG
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: LD_INT 1
23673: NEG
23674: PUSH
23675: LD_INT 2
23677: NEG
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: PUSH
23683: LD_INT 0
23685: PUSH
23686: LD_INT 2
23688: NEG
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PUSH
23694: LD_INT 1
23696: PUSH
23697: LD_INT 1
23699: NEG
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 2
23707: PUSH
23708: LD_INT 0
23710: PUSH
23711: EMPTY
23712: LIST
23713: LIST
23714: PUSH
23715: LD_INT 2
23717: PUSH
23718: LD_INT 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 2
23727: PUSH
23728: LD_INT 2
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: PUSH
23735: LD_INT 1
23737: PUSH
23738: LD_INT 2
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: LD_INT 2
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 1
23757: NEG
23758: PUSH
23759: LD_INT 1
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 2
23768: NEG
23769: PUSH
23770: LD_INT 0
23772: PUSH
23773: EMPTY
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 2
23779: NEG
23780: PUSH
23781: LD_INT 1
23783: NEG
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: PUSH
23789: LD_INT 2
23791: NEG
23792: PUSH
23793: LD_INT 2
23795: NEG
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 1
23803: PUSH
23804: LD_INT 2
23806: NEG
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 2
23814: PUSH
23815: LD_INT 1
23817: NEG
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 3
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 3
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23868: LD_ADDR_VAR 0 25
23872: PUSH
23873: LD_INT 0
23875: PUSH
23876: LD_INT 0
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: LD_INT 1
23888: NEG
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 1
23896: PUSH
23897: LD_INT 0
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 1
23906: PUSH
23907: LD_INT 1
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: LD_INT 0
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 1
23926: NEG
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 1
23937: NEG
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 1
23949: NEG
23950: PUSH
23951: LD_INT 2
23953: NEG
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 0
23961: PUSH
23962: LD_INT 2
23964: NEG
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: PUSH
23970: LD_INT 1
23972: PUSH
23973: LD_INT 1
23975: NEG
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 2
23983: PUSH
23984: LD_INT 0
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 2
23993: PUSH
23994: LD_INT 1
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: LD_INT 2
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 1
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 0
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 1
24033: NEG
24034: PUSH
24035: LD_INT 1
24037: PUSH
24038: EMPTY
24039: LIST
24040: LIST
24041: PUSH
24042: LD_INT 2
24044: NEG
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: PUSH
24053: LD_INT 2
24055: NEG
24056: PUSH
24057: LD_INT 1
24059: NEG
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PUSH
24065: LD_INT 2
24067: NEG
24068: PUSH
24069: LD_INT 2
24071: NEG
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 3
24079: PUSH
24080: LD_INT 1
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 3
24089: PUSH
24090: LD_INT 2
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: LD_INT 3
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 1
24109: PUSH
24110: LD_INT 3
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24142: LD_ADDR_VAR 0 26
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: LD_INT 0
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 0
24159: PUSH
24160: LD_INT 1
24162: NEG
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 1
24170: PUSH
24171: LD_INT 0
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: LD_INT 1
24180: PUSH
24181: LD_INT 1
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 0
24190: PUSH
24191: LD_INT 1
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: LD_INT 0
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 1
24211: NEG
24212: PUSH
24213: LD_INT 1
24215: NEG
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 1
24223: NEG
24224: PUSH
24225: LD_INT 2
24227: NEG
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 0
24235: PUSH
24236: LD_INT 2
24238: NEG
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: LD_INT 1
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 2
24257: PUSH
24258: LD_INT 0
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 2
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 2
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: LD_INT 1
24287: PUSH
24288: LD_INT 2
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PUSH
24295: LD_INT 0
24297: PUSH
24298: LD_INT 2
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 1
24307: NEG
24308: PUSH
24309: LD_INT 1
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 2
24318: NEG
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: EMPTY
24324: LIST
24325: LIST
24326: PUSH
24327: LD_INT 2
24329: NEG
24330: PUSH
24331: LD_INT 1
24333: NEG
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 2
24341: NEG
24342: PUSH
24343: LD_INT 2
24345: NEG
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: PUSH
24354: LD_INT 3
24356: PUSH
24357: EMPTY
24358: LIST
24359: LIST
24360: PUSH
24361: LD_INT 1
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 1
24373: NEG
24374: PUSH
24375: LD_INT 2
24377: PUSH
24378: EMPTY
24379: LIST
24380: LIST
24381: PUSH
24382: LD_INT 2
24384: NEG
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24418: LD_ADDR_VAR 0 27
24422: PUSH
24423: LD_INT 0
24425: PUSH
24426: LD_INT 0
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 0
24435: PUSH
24436: LD_INT 1
24438: NEG
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: PUSH
24444: LD_INT 1
24446: PUSH
24447: LD_INT 0
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: PUSH
24454: LD_INT 1
24456: PUSH
24457: LD_INT 1
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: PUSH
24464: LD_INT 0
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 0
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: PUSH
24485: LD_INT 1
24487: NEG
24488: PUSH
24489: LD_INT 1
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: NEG
24500: PUSH
24501: LD_INT 2
24503: NEG
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PUSH
24509: LD_INT 0
24511: PUSH
24512: LD_INT 2
24514: NEG
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PUSH
24520: LD_INT 1
24522: PUSH
24523: LD_INT 1
24525: NEG
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 2
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 2
24543: PUSH
24544: LD_INT 1
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 2
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 1
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 0
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 1
24583: NEG
24584: PUSH
24585: LD_INT 1
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 2
24594: NEG
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PUSH
24603: LD_INT 2
24605: NEG
24606: PUSH
24607: LD_INT 1
24609: NEG
24610: PUSH
24611: EMPTY
24612: LIST
24613: LIST
24614: PUSH
24615: LD_INT 2
24617: NEG
24618: PUSH
24619: LD_INT 2
24621: NEG
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: PUSH
24627: LD_INT 1
24629: NEG
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 2
24640: NEG
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 3
24651: NEG
24652: PUSH
24653: LD_INT 1
24655: NEG
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 3
24663: NEG
24664: PUSH
24665: LD_INT 2
24667: NEG
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24698: LD_ADDR_VAR 0 28
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: LD_INT 0
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 0
24715: PUSH
24716: LD_INT 1
24718: NEG
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 1
24736: PUSH
24737: LD_INT 1
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 0
24746: PUSH
24747: LD_INT 1
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 1
24756: NEG
24757: PUSH
24758: LD_INT 0
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: LD_INT 1
24771: NEG
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 1
24779: NEG
24780: PUSH
24781: LD_INT 2
24783: NEG
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 0
24791: PUSH
24792: LD_INT 2
24794: NEG
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 1
24802: PUSH
24803: LD_INT 1
24805: NEG
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 2
24813: PUSH
24814: LD_INT 0
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 2
24823: PUSH
24824: LD_INT 1
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: LD_INT 2
24833: PUSH
24834: LD_INT 2
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: PUSH
24841: LD_INT 1
24843: PUSH
24844: LD_INT 2
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: PUSH
24851: LD_INT 0
24853: PUSH
24854: LD_INT 2
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 1
24863: NEG
24864: PUSH
24865: LD_INT 1
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 2
24874: NEG
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 2
24885: NEG
24886: PUSH
24887: LD_INT 1
24889: NEG
24890: PUSH
24891: EMPTY
24892: LIST
24893: LIST
24894: PUSH
24895: LD_INT 2
24897: NEG
24898: PUSH
24899: LD_INT 2
24901: NEG
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 2
24909: NEG
24910: PUSH
24911: LD_INT 3
24913: NEG
24914: PUSH
24915: EMPTY
24916: LIST
24917: LIST
24918: PUSH
24919: LD_INT 1
24921: NEG
24922: PUSH
24923: LD_INT 3
24925: NEG
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 3
24933: NEG
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 3
24945: NEG
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
24980: LD_ADDR_VAR 0 29
24984: PUSH
24985: LD_INT 0
24987: PUSH
24988: LD_INT 0
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: PUSH
24995: LD_INT 0
24997: PUSH
24998: LD_INT 1
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: LD_INT 1
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: LD_INT 1
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PUSH
25026: LD_INT 0
25028: PUSH
25029: LD_INT 1
25031: PUSH
25032: EMPTY
25033: LIST
25034: LIST
25035: PUSH
25036: LD_INT 1
25038: NEG
25039: PUSH
25040: LD_INT 0
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: LD_INT 1
25053: NEG
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: NEG
25062: PUSH
25063: LD_INT 2
25065: NEG
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 0
25073: PUSH
25074: LD_INT 2
25076: NEG
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: LD_INT 1
25087: NEG
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 2
25095: PUSH
25096: LD_INT 0
25098: PUSH
25099: EMPTY
25100: LIST
25101: LIST
25102: PUSH
25103: LD_INT 2
25105: PUSH
25106: LD_INT 1
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 1
25115: PUSH
25116: LD_INT 2
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: LD_INT 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 1
25135: NEG
25136: PUSH
25137: LD_INT 1
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 2
25146: NEG
25147: PUSH
25148: LD_INT 1
25150: NEG
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: NEG
25159: PUSH
25160: LD_INT 2
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: NEG
25171: PUSH
25172: LD_INT 3
25174: NEG
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 2
25182: PUSH
25183: LD_INT 1
25185: NEG
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 3
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 1
25203: PUSH
25204: LD_INT 3
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 1
25213: NEG
25214: PUSH
25215: LD_INT 2
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: PUSH
25222: LD_INT 3
25224: NEG
25225: PUSH
25226: LD_INT 2
25228: NEG
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25259: LD_ADDR_VAR 0 30
25263: PUSH
25264: LD_INT 0
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 0
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 0
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 1
25297: PUSH
25298: LD_INT 1
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 0
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: NEG
25318: PUSH
25319: LD_INT 0
25321: PUSH
25322: EMPTY
25323: LIST
25324: LIST
25325: PUSH
25326: LD_INT 1
25328: NEG
25329: PUSH
25330: LD_INT 1
25332: NEG
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: PUSH
25338: LD_INT 1
25340: NEG
25341: PUSH
25342: LD_INT 2
25344: NEG
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 1
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 2
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: EMPTY
25379: LIST
25380: LIST
25381: PUSH
25382: LD_INT 2
25384: PUSH
25385: LD_INT 1
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 2
25394: PUSH
25395: LD_INT 2
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 1
25404: PUSH
25405: LD_INT 2
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: LD_INT 2
25425: NEG
25426: PUSH
25427: LD_INT 0
25429: PUSH
25430: EMPTY
25431: LIST
25432: LIST
25433: PUSH
25434: LD_INT 2
25436: NEG
25437: PUSH
25438: LD_INT 1
25440: NEG
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: LD_INT 1
25448: NEG
25449: PUSH
25450: LD_INT 3
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: LD_INT 2
25463: NEG
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 3
25471: PUSH
25472: LD_INT 2
25474: PUSH
25475: EMPTY
25476: LIST
25477: LIST
25478: PUSH
25479: LD_INT 2
25481: PUSH
25482: LD_INT 3
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: NEG
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 3
25502: NEG
25503: PUSH
25504: LD_INT 1
25506: NEG
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: LIST
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25537: LD_ADDR_VAR 0 31
25541: PUSH
25542: LD_INT 0
25544: PUSH
25545: LD_INT 0
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 1
25565: PUSH
25566: LD_INT 0
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 1
25575: PUSH
25576: LD_INT 1
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 1
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 1
25595: NEG
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: LD_INT 1
25610: NEG
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: PUSH
25616: LD_INT 1
25618: NEG
25619: PUSH
25620: LD_INT 2
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 1
25633: NEG
25634: PUSH
25635: EMPTY
25636: LIST
25637: LIST
25638: PUSH
25639: LD_INT 2
25641: PUSH
25642: LD_INT 0
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 2
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: LD_INT 0
25681: PUSH
25682: LD_INT 2
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PUSH
25689: LD_INT 1
25691: NEG
25692: PUSH
25693: LD_INT 1
25695: PUSH
25696: EMPTY
25697: LIST
25698: LIST
25699: PUSH
25700: LD_INT 2
25702: NEG
25703: PUSH
25704: LD_INT 1
25706: NEG
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 2
25714: NEG
25715: PUSH
25716: LD_INT 2
25718: NEG
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: LD_INT 3
25730: NEG
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 2
25738: PUSH
25739: LD_INT 1
25741: NEG
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: PUSH
25747: LD_INT 3
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 1
25759: PUSH
25760: LD_INT 3
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 3
25780: NEG
25781: PUSH
25782: LD_INT 2
25784: NEG
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25815: LD_ADDR_VAR 0 32
25819: PUSH
25820: LD_INT 0
25822: PUSH
25823: LD_INT 0
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 0
25832: PUSH
25833: LD_INT 1
25835: NEG
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: LD_INT 1
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 1
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 1
25873: NEG
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 1
25884: NEG
25885: PUSH
25886: LD_INT 1
25888: NEG
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: PUSH
25894: LD_INT 1
25896: NEG
25897: PUSH
25898: LD_INT 2
25900: NEG
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: LD_INT 2
25911: NEG
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PUSH
25917: LD_INT 1
25919: PUSH
25920: LD_INT 1
25922: NEG
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: LD_INT 1
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 2
25940: PUSH
25941: LD_INT 2
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 1
25950: PUSH
25951: LD_INT 2
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 0
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 1
25970: NEG
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 2
25981: NEG
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 2
25992: NEG
25993: PUSH
25994: LD_INT 1
25996: NEG
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 1
26004: NEG
26005: PUSH
26006: LD_INT 3
26008: NEG
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 1
26016: PUSH
26017: LD_INT 2
26019: NEG
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 3
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 2
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 2
26047: NEG
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 3
26058: NEG
26059: PUSH
26060: LD_INT 1
26062: NEG
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: LIST
26074: LIST
26075: LIST
26076: LIST
26077: LIST
26078: LIST
26079: LIST
26080: LIST
26081: LIST
26082: LIST
26083: LIST
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26093: LD_ADDR_VAR 0 33
26097: PUSH
26098: LD_INT 0
26100: PUSH
26101: LD_INT 0
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: LD_INT 1
26113: NEG
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 1
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: PUSH
26132: LD_INT 1
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: LD_INT 1
26151: NEG
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: NEG
26163: PUSH
26164: LD_INT 1
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: LD_INT 2
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 1
26186: PUSH
26187: LD_INT 1
26189: NEG
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 0
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 2
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 1
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 0
26227: PUSH
26228: LD_INT 2
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: LD_INT 1
26237: NEG
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: EMPTY
26243: LIST
26244: LIST
26245: PUSH
26246: LD_INT 2
26248: NEG
26249: PUSH
26250: LD_INT 0
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 2
26259: NEG
26260: PUSH
26261: LD_INT 1
26263: NEG
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 2
26271: NEG
26272: PUSH
26273: LD_INT 2
26275: NEG
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 2
26283: NEG
26284: PUSH
26285: LD_INT 3
26287: NEG
26288: PUSH
26289: EMPTY
26290: LIST
26291: LIST
26292: PUSH
26293: LD_INT 2
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: LD_INT 3
26306: PUSH
26307: LD_INT 1
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 1
26316: PUSH
26317: LD_INT 3
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 1
26326: NEG
26327: PUSH
26328: LD_INT 2
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 3
26337: NEG
26338: PUSH
26339: LD_INT 2
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: LIST
26363: LIST
26364: LIST
26365: LIST
26366: LIST
26367: LIST
26368: LIST
26369: LIST
26370: LIST
26371: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26372: LD_ADDR_VAR 0 34
26376: PUSH
26377: LD_INT 0
26379: PUSH
26380: LD_INT 0
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 0
26389: PUSH
26390: LD_INT 1
26392: NEG
26393: PUSH
26394: EMPTY
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 1
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: PUSH
26408: LD_INT 1
26410: PUSH
26411: LD_INT 1
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 0
26420: PUSH
26421: LD_INT 1
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: NEG
26431: PUSH
26432: LD_INT 0
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 1
26441: NEG
26442: PUSH
26443: LD_INT 1
26445: NEG
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 0
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: EMPTY
26471: LIST
26472: LIST
26473: PUSH
26474: LD_INT 1
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 2
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: LD_INT 2
26500: PUSH
26501: EMPTY
26502: LIST
26503: LIST
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PUSH
26515: LD_INT 1
26517: NEG
26518: PUSH
26519: LD_INT 1
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: PUSH
26526: LD_INT 2
26528: NEG
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 2
26539: NEG
26540: PUSH
26541: LD_INT 1
26543: NEG
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 2
26551: NEG
26552: PUSH
26553: LD_INT 2
26555: NEG
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 1
26563: NEG
26564: PUSH
26565: LD_INT 3
26567: NEG
26568: PUSH
26569: EMPTY
26570: LIST
26571: LIST
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: LD_INT 2
26578: NEG
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 2
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 2
26606: NEG
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 3
26617: NEG
26618: PUSH
26619: LD_INT 1
26621: NEG
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26652: LD_ADDR_VAR 0 35
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 2
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 2
26743: NEG
26744: PUSH
26745: LD_INT 1
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: LIST
26759: LIST
26760: LIST
26761: LIST
26762: LIST
26763: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26764: LD_ADDR_VAR 0 36
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: LD_INT 1
26784: NEG
26785: PUSH
26786: EMPTY
26787: LIST
26788: LIST
26789: PUSH
26790: LD_INT 1
26792: PUSH
26793: LD_INT 0
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: PUSH
26800: LD_INT 1
26802: PUSH
26803: LD_INT 1
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: LD_INT 0
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 1
26822: NEG
26823: PUSH
26824: LD_INT 0
26826: PUSH
26827: EMPTY
26828: LIST
26829: LIST
26830: PUSH
26831: LD_INT 1
26833: NEG
26834: PUSH
26835: LD_INT 1
26837: NEG
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: LD_INT 1
26845: NEG
26846: PUSH
26847: LD_INT 2
26849: NEG
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26876: LD_ADDR_VAR 0 37
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: LD_INT 0
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 0
26893: PUSH
26894: LD_INT 1
26896: NEG
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 1
26904: PUSH
26905: LD_INT 0
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: LD_INT 1
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: LD_INT 1
26934: NEG
26935: PUSH
26936: LD_INT 0
26938: PUSH
26939: EMPTY
26940: LIST
26941: LIST
26942: PUSH
26943: LD_INT 1
26945: NEG
26946: PUSH
26947: LD_INT 1
26949: NEG
26950: PUSH
26951: EMPTY
26952: LIST
26953: LIST
26954: PUSH
26955: LD_INT 1
26957: PUSH
26958: LD_INT 1
26960: NEG
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: PUSH
26966: LD_INT 1
26968: NEG
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26988: LD_ADDR_VAR 0 38
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: LD_INT 0
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 1
27008: NEG
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: LD_INT 0
27019: PUSH
27020: EMPTY
27021: LIST
27022: LIST
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: LD_INT 1
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: PUSH
27044: LD_INT 1
27046: NEG
27047: PUSH
27048: LD_INT 0
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: PUSH
27055: LD_INT 1
27057: NEG
27058: PUSH
27059: LD_INT 1
27061: NEG
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: PUSH
27070: LD_INT 1
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 2
27079: NEG
27080: PUSH
27081: LD_INT 1
27083: NEG
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: EMPTY
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27100: LD_ADDR_VAR 0 39
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: LD_INT 0
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: PUSH
27115: LD_INT 0
27117: PUSH
27118: LD_INT 1
27120: NEG
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: LD_INT 0
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: LD_INT 1
27138: PUSH
27139: LD_INT 1
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: LD_INT 0
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: LD_INT 1
27158: NEG
27159: PUSH
27160: LD_INT 0
27162: PUSH
27163: EMPTY
27164: LIST
27165: LIST
27166: PUSH
27167: LD_INT 1
27169: NEG
27170: PUSH
27171: LD_INT 1
27173: NEG
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: LD_INT 2
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: PUSH
27194: LD_INT 2
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: EMPTY
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27212: LD_ADDR_VAR 0 40
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 1
27232: NEG
27233: PUSH
27234: EMPTY
27235: LIST
27236: LIST
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 0
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 1
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 0
27260: PUSH
27261: LD_INT 1
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: NEG
27271: PUSH
27272: LD_INT 0
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 1
27281: NEG
27282: PUSH
27283: LD_INT 1
27285: NEG
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: PUSH
27291: LD_INT 1
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: LD_INT 1
27304: NEG
27305: PUSH
27306: LD_INT 1
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27324: LD_ADDR_VAR 0 41
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: LD_INT 0
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: PUSH
27339: LD_INT 0
27341: PUSH
27342: LD_INT 1
27344: NEG
27345: PUSH
27346: EMPTY
27347: LIST
27348: LIST
27349: PUSH
27350: LD_INT 1
27352: PUSH
27353: LD_INT 0
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: PUSH
27360: LD_INT 1
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 1
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: PUSH
27380: LD_INT 1
27382: NEG
27383: PUSH
27384: LD_INT 0
27386: PUSH
27387: EMPTY
27388: LIST
27389: LIST
27390: PUSH
27391: LD_INT 1
27393: NEG
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: EMPTY
27400: LIST
27401: LIST
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: PUSH
27407: LD_INT 2
27409: NEG
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: PUSH
27415: LD_INT 1
27417: PUSH
27418: LD_INT 1
27420: NEG
27421: PUSH
27422: EMPTY
27423: LIST
27424: LIST
27425: PUSH
27426: LD_INT 2
27428: PUSH
27429: LD_INT 0
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: PUSH
27436: LD_INT 2
27438: PUSH
27439: LD_INT 1
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 2
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: EMPTY
27453: LIST
27454: LIST
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: LD_INT 2
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 1
27468: NEG
27469: PUSH
27470: LD_INT 1
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 2
27479: NEG
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 2
27490: NEG
27491: PUSH
27492: LD_INT 1
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 2
27502: NEG
27503: PUSH
27504: LD_INT 2
27506: NEG
27507: PUSH
27508: EMPTY
27509: LIST
27510: LIST
27511: PUSH
27512: LD_INT 2
27514: NEG
27515: PUSH
27516: LD_INT 3
27518: NEG
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 2
27526: PUSH
27527: LD_INT 1
27529: NEG
27530: PUSH
27531: EMPTY
27532: LIST
27533: LIST
27534: PUSH
27535: LD_INT 3
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 3
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: PUSH
27555: LD_INT 3
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: PUSH
27565: LD_INT 3
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_INT 2
27577: PUSH
27578: LD_INT 3
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: PUSH
27585: LD_INT 2
27587: NEG
27588: PUSH
27589: LD_INT 1
27591: PUSH
27592: EMPTY
27593: LIST
27594: LIST
27595: PUSH
27596: LD_INT 3
27598: NEG
27599: PUSH
27600: LD_INT 0
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 3
27609: NEG
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: EMPTY
27616: LIST
27617: LIST
27618: PUSH
27619: LD_INT 3
27621: NEG
27622: PUSH
27623: LD_INT 2
27625: NEG
27626: PUSH
27627: EMPTY
27628: LIST
27629: LIST
27630: PUSH
27631: LD_INT 3
27633: NEG
27634: PUSH
27635: LD_INT 3
27637: NEG
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27674: LD_ADDR_VAR 0 42
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 0
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 1
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: PUSH
27703: LD_INT 0
27705: PUSH
27706: EMPTY
27707: LIST
27708: LIST
27709: PUSH
27710: LD_INT 1
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: PUSH
27720: LD_INT 0
27722: PUSH
27723: LD_INT 1
27725: PUSH
27726: EMPTY
27727: LIST
27728: LIST
27729: PUSH
27730: LD_INT 1
27732: NEG
27733: PUSH
27734: LD_INT 0
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: PUSH
27741: LD_INT 1
27743: NEG
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: EMPTY
27750: LIST
27751: LIST
27752: PUSH
27753: LD_INT 1
27755: NEG
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: LD_INT 2
27770: NEG
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 1
27781: NEG
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: LD_INT 1
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: PUSH
27800: LD_INT 2
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: LD_INT 2
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 2
27822: PUSH
27823: EMPTY
27824: LIST
27825: LIST
27826: PUSH
27827: LD_INT 1
27829: NEG
27830: PUSH
27831: LD_INT 1
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 2
27840: NEG
27841: PUSH
27842: LD_INT 1
27844: NEG
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 2
27852: NEG
27853: PUSH
27854: LD_INT 2
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: LD_INT 3
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 1
27876: NEG
27877: PUSH
27878: LD_INT 3
27880: NEG
27881: PUSH
27882: EMPTY
27883: LIST
27884: LIST
27885: PUSH
27886: LD_INT 0
27888: PUSH
27889: LD_INT 3
27891: NEG
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 1
27899: PUSH
27900: LD_INT 2
27902: NEG
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: LD_INT 3
27910: PUSH
27911: LD_INT 2
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: PUSH
27918: LD_INT 3
27920: PUSH
27921: LD_INT 3
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 2
27930: PUSH
27931: LD_INT 3
27933: PUSH
27934: EMPTY
27935: LIST
27936: LIST
27937: PUSH
27938: LD_INT 1
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: EMPTY
27945: LIST
27946: LIST
27947: PUSH
27948: LD_INT 0
27950: PUSH
27951: LD_INT 3
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 1
27960: NEG
27961: PUSH
27962: LD_INT 2
27964: PUSH
27965: EMPTY
27966: LIST
27967: LIST
27968: PUSH
27969: LD_INT 3
27971: NEG
27972: PUSH
27973: LD_INT 2
27975: NEG
27976: PUSH
27977: EMPTY
27978: LIST
27979: LIST
27980: PUSH
27981: LD_INT 3
27983: NEG
27984: PUSH
27985: LD_INT 3
27987: NEG
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: LIST
28002: LIST
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: LIST
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28024: LD_ADDR_VAR 0 43
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 0
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 0
28041: PUSH
28042: LD_INT 1
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: PUSH
28053: LD_INT 0
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PUSH
28060: LD_INT 1
28062: PUSH
28063: LD_INT 1
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PUSH
28070: LD_INT 0
28072: PUSH
28073: LD_INT 1
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 1
28082: NEG
28083: PUSH
28084: LD_INT 0
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: LD_INT 1
28097: NEG
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 1
28105: NEG
28106: PUSH
28107: LD_INT 2
28109: NEG
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: LD_INT 0
28117: PUSH
28118: LD_INT 2
28120: NEG
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 1
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 2
28139: PUSH
28140: LD_INT 0
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: PUSH
28150: LD_INT 1
28152: PUSH
28153: EMPTY
28154: LIST
28155: LIST
28156: PUSH
28157: LD_INT 1
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: EMPTY
28164: LIST
28165: LIST
28166: PUSH
28167: LD_INT 0
28169: PUSH
28170: LD_INT 2
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 1
28179: NEG
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: EMPTY
28185: LIST
28186: LIST
28187: PUSH
28188: LD_INT 2
28190: NEG
28191: PUSH
28192: LD_INT 0
28194: PUSH
28195: EMPTY
28196: LIST
28197: LIST
28198: PUSH
28199: LD_INT 2
28201: NEG
28202: PUSH
28203: LD_INT 1
28205: NEG
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: NEG
28214: PUSH
28215: LD_INT 3
28217: NEG
28218: PUSH
28219: EMPTY
28220: LIST
28221: LIST
28222: PUSH
28223: LD_INT 0
28225: PUSH
28226: LD_INT 3
28228: NEG
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: PUSH
28248: LD_INT 1
28250: NEG
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 3
28258: PUSH
28259: LD_INT 0
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 3
28268: PUSH
28269: LD_INT 1
28271: PUSH
28272: EMPTY
28273: LIST
28274: LIST
28275: PUSH
28276: LD_INT 1
28278: PUSH
28279: LD_INT 3
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: LD_INT 0
28288: PUSH
28289: LD_INT 3
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 1
28298: NEG
28299: PUSH
28300: LD_INT 2
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: LD_INT 2
28309: NEG
28310: PUSH
28311: LD_INT 1
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 3
28320: NEG
28321: PUSH
28322: LD_INT 0
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 3
28331: NEG
28332: PUSH
28333: LD_INT 1
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: LIST
28366: LIST
28367: LIST
28368: LIST
28369: LIST
28370: LIST
28371: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28372: LD_ADDR_VAR 0 44
28376: PUSH
28377: LD_INT 0
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: LD_INT 1
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PUSH
28408: LD_INT 1
28410: PUSH
28411: LD_INT 1
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: LD_INT 1
28423: PUSH
28424: EMPTY
28425: LIST
28426: LIST
28427: PUSH
28428: LD_INT 1
28430: NEG
28431: PUSH
28432: LD_INT 0
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 1
28441: NEG
28442: PUSH
28443: LD_INT 1
28445: NEG
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: PUSH
28451: LD_INT 1
28453: NEG
28454: PUSH
28455: LD_INT 2
28457: NEG
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: LD_INT 1
28468: NEG
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 2
28476: PUSH
28477: LD_INT 0
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: LD_INT 2
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: LD_INT 2
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 1
28506: PUSH
28507: LD_INT 2
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 1
28516: NEG
28517: PUSH
28518: LD_INT 1
28520: PUSH
28521: EMPTY
28522: LIST
28523: LIST
28524: PUSH
28525: LD_INT 2
28527: NEG
28528: PUSH
28529: LD_INT 0
28531: PUSH
28532: EMPTY
28533: LIST
28534: LIST
28535: PUSH
28536: LD_INT 2
28538: NEG
28539: PUSH
28540: LD_INT 1
28542: NEG
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 2
28550: NEG
28551: PUSH
28552: LD_INT 2
28554: NEG
28555: PUSH
28556: EMPTY
28557: LIST
28558: LIST
28559: PUSH
28560: LD_INT 2
28562: NEG
28563: PUSH
28564: LD_INT 3
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 1
28577: NEG
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: LD_INT 3
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 3
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: LD_INT 3
28605: PUSH
28606: LD_INT 2
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: LD_INT 3
28615: PUSH
28616: LD_INT 3
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: PUSH
28623: LD_INT 2
28625: PUSH
28626: LD_INT 3
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: LD_INT 1
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 3
28646: NEG
28647: PUSH
28648: LD_INT 0
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 3
28657: NEG
28658: PUSH
28659: LD_INT 1
28661: NEG
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 3
28669: NEG
28670: PUSH
28671: LD_INT 2
28673: NEG
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 3
28681: NEG
28682: PUSH
28683: LD_INT 3
28685: NEG
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28722: LD_ADDR_VAR 0 45
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 0
28739: PUSH
28740: LD_INT 1
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: PUSH
28751: LD_INT 0
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: LD_INT 1
28773: PUSH
28774: EMPTY
28775: LIST
28776: LIST
28777: PUSH
28778: LD_INT 1
28780: NEG
28781: PUSH
28782: LD_INT 0
28784: PUSH
28785: EMPTY
28786: LIST
28787: LIST
28788: PUSH
28789: LD_INT 1
28791: NEG
28792: PUSH
28793: LD_INT 1
28795: NEG
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PUSH
28801: LD_INT 1
28803: NEG
28804: PUSH
28805: LD_INT 2
28807: NEG
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 0
28815: PUSH
28816: LD_INT 2
28818: NEG
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: LD_INT 1
28829: NEG
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 1
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 2
28847: PUSH
28848: LD_INT 2
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: LD_INT 2
28860: PUSH
28861: EMPTY
28862: LIST
28863: LIST
28864: PUSH
28865: LD_INT 0
28867: PUSH
28868: LD_INT 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 1
28877: NEG
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 2
28888: NEG
28889: PUSH
28890: LD_INT 1
28892: NEG
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: LD_INT 2
28900: NEG
28901: PUSH
28902: LD_INT 2
28904: NEG
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: LD_INT 3
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 1
28924: NEG
28925: PUSH
28926: LD_INT 3
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 0
28936: PUSH
28937: LD_INT 3
28939: NEG
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: EMPTY
28953: LIST
28954: LIST
28955: PUSH
28956: LD_INT 3
28958: PUSH
28959: LD_INT 2
28961: PUSH
28962: EMPTY
28963: LIST
28964: LIST
28965: PUSH
28966: LD_INT 3
28968: PUSH
28969: LD_INT 3
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 2
28978: PUSH
28979: LD_INT 3
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: PUSH
28989: LD_INT 3
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 0
28998: PUSH
28999: LD_INT 3
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: LD_INT 1
29008: NEG
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PUSH
29017: LD_INT 3
29019: NEG
29020: PUSH
29021: LD_INT 2
29023: NEG
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 3
29031: NEG
29032: PUSH
29033: LD_INT 3
29035: NEG
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29072: LD_ADDR_VAR 0 46
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 0
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 0
29089: PUSH
29090: LD_INT 1
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: LD_INT 0
29103: PUSH
29104: EMPTY
29105: LIST
29106: LIST
29107: PUSH
29108: LD_INT 1
29110: PUSH
29111: LD_INT 1
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 0
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: NEG
29131: PUSH
29132: LD_INT 0
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 1
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 1
29153: NEG
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: LD_INT 0
29165: PUSH
29166: LD_INT 2
29168: NEG
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: LD_INT 1
29179: NEG
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 0
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 1
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 1
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: LD_INT 2
29220: PUSH
29221: EMPTY
29222: LIST
29223: LIST
29224: PUSH
29225: LD_INT 1
29227: NEG
29228: PUSH
29229: LD_INT 1
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 2
29238: NEG
29239: PUSH
29240: LD_INT 0
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: PUSH
29247: LD_INT 2
29249: NEG
29250: PUSH
29251: LD_INT 1
29253: NEG
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: LD_INT 3
29265: NEG
29266: PUSH
29267: EMPTY
29268: LIST
29269: LIST
29270: PUSH
29271: LD_INT 0
29273: PUSH
29274: LD_INT 3
29276: NEG
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: PUSH
29285: LD_INT 2
29287: NEG
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: PUSH
29296: LD_INT 1
29298: NEG
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 3
29306: PUSH
29307: LD_INT 0
29309: PUSH
29310: EMPTY
29311: LIST
29312: LIST
29313: PUSH
29314: LD_INT 3
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: EMPTY
29321: LIST
29322: LIST
29323: PUSH
29324: LD_INT 1
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: EMPTY
29331: LIST
29332: LIST
29333: PUSH
29334: LD_INT 0
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: LD_INT 1
29346: NEG
29347: PUSH
29348: LD_INT 2
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PUSH
29355: LD_INT 2
29357: NEG
29358: PUSH
29359: LD_INT 1
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: LD_INT 3
29368: NEG
29369: PUSH
29370: LD_INT 0
29372: PUSH
29373: EMPTY
29374: LIST
29375: LIST
29376: PUSH
29377: LD_INT 3
29379: NEG
29380: PUSH
29381: LD_INT 1
29383: NEG
29384: PUSH
29385: EMPTY
29386: LIST
29387: LIST
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: LIST
29397: LIST
29398: LIST
29399: LIST
29400: LIST
29401: LIST
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: LIST
29410: LIST
29411: LIST
29412: LIST
29413: LIST
29414: LIST
29415: LIST
29416: LIST
29417: LIST
29418: LIST
29419: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29420: LD_ADDR_VAR 0 47
29424: PUSH
29425: LD_INT 0
29427: PUSH
29428: LD_INT 0
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PUSH
29435: LD_INT 0
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 1
29448: PUSH
29449: LD_INT 0
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: PUSH
29456: LD_INT 1
29458: PUSH
29459: LD_INT 1
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 0
29468: PUSH
29469: LD_INT 1
29471: PUSH
29472: EMPTY
29473: LIST
29474: LIST
29475: PUSH
29476: LD_INT 1
29478: NEG
29479: PUSH
29480: LD_INT 0
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 1
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: NEG
29502: PUSH
29503: LD_INT 2
29505: NEG
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 2
29516: NEG
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: LD_INT 1
29527: NEG
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 2
29535: NEG
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: NEG
29548: PUSH
29549: LD_INT 2
29551: NEG
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29571: LD_ADDR_VAR 0 48
29575: PUSH
29576: LD_INT 0
29578: PUSH
29579: LD_INT 0
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: LD_INT 1
29591: NEG
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 1
29599: PUSH
29600: LD_INT 0
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: LD_INT 1
29609: PUSH
29610: LD_INT 1
29612: PUSH
29613: EMPTY
29614: LIST
29615: LIST
29616: PUSH
29617: LD_INT 0
29619: PUSH
29620: LD_INT 1
29622: PUSH
29623: EMPTY
29624: LIST
29625: LIST
29626: PUSH
29627: LD_INT 1
29629: NEG
29630: PUSH
29631: LD_INT 0
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: LD_INT 2
29656: NEG
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: PUSH
29662: LD_INT 0
29664: PUSH
29665: LD_INT 2
29667: NEG
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 1
29675: PUSH
29676: LD_INT 1
29678: NEG
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 2
29686: PUSH
29687: LD_INT 0
29689: PUSH
29690: EMPTY
29691: LIST
29692: LIST
29693: PUSH
29694: LD_INT 2
29696: PUSH
29697: LD_INT 1
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PUSH
29704: EMPTY
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29718: LD_ADDR_VAR 0 49
29722: PUSH
29723: LD_INT 0
29725: PUSH
29726: LD_INT 0
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: LD_INT 0
29735: PUSH
29736: LD_INT 1
29738: NEG
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 1
29746: PUSH
29747: LD_INT 0
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: LD_INT 1
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 1
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 1
29776: NEG
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 1
29791: NEG
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 1
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 2
29810: PUSH
29811: LD_INT 0
29813: PUSH
29814: EMPTY
29815: LIST
29816: LIST
29817: PUSH
29818: LD_INT 2
29820: PUSH
29821: LD_INT 1
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 2
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: LD_INT 2
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29862: LD_ADDR_VAR 0 50
29866: PUSH
29867: LD_INT 0
29869: PUSH
29870: LD_INT 0
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 0
29879: PUSH
29880: LD_INT 1
29882: NEG
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 1
29890: PUSH
29891: LD_INT 0
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: PUSH
29901: LD_INT 1
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 1
29920: NEG
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 1
29931: NEG
29932: PUSH
29933: LD_INT 1
29935: NEG
29936: PUSH
29937: EMPTY
29938: LIST
29939: LIST
29940: PUSH
29941: LD_INT 2
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: EMPTY
29948: LIST
29949: LIST
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 2
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: PUSH
29961: LD_INT 1
29963: PUSH
29964: LD_INT 2
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 2
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: PUSH
29992: EMPTY
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30006: LD_ADDR_VAR 0 51
30010: PUSH
30011: LD_INT 0
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 0
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: EMPTY
30029: LIST
30030: LIST
30031: PUSH
30032: LD_INT 1
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: LD_INT 1
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 0
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: NEG
30065: PUSH
30066: LD_INT 0
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 1
30075: NEG
30076: PUSH
30077: LD_INT 1
30079: NEG
30080: PUSH
30081: EMPTY
30082: LIST
30083: LIST
30084: PUSH
30085: LD_INT 1
30087: PUSH
30088: LD_INT 2
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 2
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: LD_INT 1
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 2
30118: NEG
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: NEG
30130: PUSH
30131: LD_INT 1
30133: NEG
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: LIST
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30153: LD_ADDR_VAR 0 52
30157: PUSH
30158: LD_INT 0
30160: PUSH
30161: LD_INT 0
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: PUSH
30168: LD_INT 0
30170: PUSH
30171: LD_INT 1
30173: NEG
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: LD_INT 0
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: LD_INT 1
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 0
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: LD_INT 0
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 1
30222: NEG
30223: PUSH
30224: LD_INT 1
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PUSH
30236: LD_INT 2
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 1
30246: NEG
30247: PUSH
30248: LD_INT 1
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: LD_INT 2
30257: NEG
30258: PUSH
30259: LD_INT 0
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 2
30268: NEG
30269: PUSH
30270: LD_INT 1
30272: NEG
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: PUSH
30278: LD_INT 2
30280: NEG
30281: PUSH
30282: LD_INT 2
30284: NEG
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: EMPTY
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30304: LD_ADDR_VAR 0 53
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: LD_INT 2
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 0
30397: PUSH
30398: LD_INT 2
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 1
30408: PUSH
30409: LD_INT 1
30411: NEG
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 2
30419: PUSH
30420: LD_INT 0
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 2
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 2
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: LD_INT 2
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 0
30459: PUSH
30460: LD_INT 2
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: PUSH
30467: LD_INT 1
30469: NEG
30470: PUSH
30471: LD_INT 1
30473: PUSH
30474: EMPTY
30475: LIST
30476: LIST
30477: PUSH
30478: LD_INT 2
30480: NEG
30481: PUSH
30482: LD_INT 0
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 2
30491: NEG
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 2
30503: NEG
30504: PUSH
30505: LD_INT 2
30507: NEG
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30534: LD_ADDR_VAR 0 54
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 0
30551: PUSH
30552: LD_INT 1
30554: NEG
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: LD_INT 0
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: LD_INT 1
30572: PUSH
30573: LD_INT 1
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: LD_INT 1
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: NEG
30593: PUSH
30594: LD_INT 0
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: LD_INT 1
30607: NEG
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PUSH
30613: LD_INT 1
30615: NEG
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 0
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PUSH
30636: LD_INT 1
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 2
30649: PUSH
30650: LD_INT 0
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 2
30659: PUSH
30660: LD_INT 1
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 2
30669: PUSH
30670: LD_INT 2
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: LD_INT 1
30679: PUSH
30680: LD_INT 2
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: PUSH
30687: LD_INT 0
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: EMPTY
30694: LIST
30695: LIST
30696: PUSH
30697: LD_INT 1
30699: NEG
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 2
30710: NEG
30711: PUSH
30712: LD_INT 0
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 2
30721: NEG
30722: PUSH
30723: LD_INT 1
30725: NEG
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 2
30733: NEG
30734: PUSH
30735: LD_INT 2
30737: NEG
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30764: LD_ADDR_VAR 0 55
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: LD_INT 0
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: PUSH
30779: LD_INT 0
30781: PUSH
30782: LD_INT 1
30784: NEG
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: PUSH
30790: LD_INT 1
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 1
30802: PUSH
30803: LD_INT 1
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 1
30822: NEG
30823: PUSH
30824: LD_INT 0
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: NEG
30834: PUSH
30835: LD_INT 1
30837: NEG
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 1
30845: NEG
30846: PUSH
30847: LD_INT 2
30849: NEG
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 0
30857: PUSH
30858: LD_INT 2
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 1
30868: PUSH
30869: LD_INT 1
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 0
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 2
30899: PUSH
30900: LD_INT 2
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: LD_INT 2
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 0
30919: PUSH
30920: LD_INT 2
30922: PUSH
30923: EMPTY
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 1
30929: NEG
30930: PUSH
30931: LD_INT 1
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 2
30940: NEG
30941: PUSH
30942: LD_INT 0
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 2
30951: NEG
30952: PUSH
30953: LD_INT 1
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: NEG
30964: PUSH
30965: LD_INT 2
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30994: LD_ADDR_VAR 0 56
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: LD_INT 0
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 1
31014: NEG
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PUSH
31020: LD_INT 1
31022: PUSH
31023: LD_INT 0
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: LD_INT 1
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 0
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 1
31052: NEG
31053: PUSH
31054: LD_INT 0
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: PUSH
31061: LD_INT 1
31063: NEG
31064: PUSH
31065: LD_INT 1
31067: NEG
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 1
31075: NEG
31076: PUSH
31077: LD_INT 2
31079: NEG
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 0
31087: PUSH
31088: LD_INT 2
31090: NEG
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: PUSH
31099: LD_INT 1
31101: NEG
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 2
31109: PUSH
31110: LD_INT 0
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 1
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: LD_INT 2
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: NEG
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 2
31193: NEG
31194: PUSH
31195: LD_INT 2
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31224: LD_ADDR_VAR 0 57
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: EMPTY
31236: LIST
31237: LIST
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 1
31252: PUSH
31253: LD_INT 0
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 1
31262: PUSH
31263: LD_INT 1
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 0
31272: PUSH
31273: LD_INT 1
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: NEG
31283: PUSH
31284: LD_INT 0
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 1
31297: NEG
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: PUSH
31303: LD_INT 1
31305: NEG
31306: PUSH
31307: LD_INT 2
31309: NEG
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 0
31317: PUSH
31318: LD_INT 2
31320: NEG
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 1
31328: PUSH
31329: LD_INT 1
31331: NEG
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 2
31339: PUSH
31340: LD_INT 0
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: EMPTY
31354: LIST
31355: LIST
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: LD_INT 2
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: LD_INT 2
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: LD_INT 2
31382: PUSH
31383: EMPTY
31384: LIST
31385: LIST
31386: PUSH
31387: LD_INT 1
31389: NEG
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 2
31400: NEG
31401: PUSH
31402: LD_INT 0
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PUSH
31409: LD_INT 2
31411: NEG
31412: PUSH
31413: LD_INT 1
31415: NEG
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 2
31423: NEG
31424: PUSH
31425: LD_INT 2
31427: NEG
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31454: LD_ADDR_VAR 0 58
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 0
31471: PUSH
31472: LD_INT 1
31474: NEG
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 1
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 0
31502: PUSH
31503: LD_INT 1
31505: PUSH
31506: EMPTY
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 1
31512: NEG
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 1
31523: NEG
31524: PUSH
31525: LD_INT 1
31527: NEG
31528: PUSH
31529: EMPTY
31530: LIST
31531: LIST
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: LD_INT 2
31539: NEG
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 0
31547: PUSH
31548: LD_INT 2
31550: NEG
31551: PUSH
31552: EMPTY
31553: LIST
31554: LIST
31555: PUSH
31556: LD_INT 1
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: PUSH
31570: LD_INT 0
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: LD_INT 1
31582: PUSH
31583: EMPTY
31584: LIST
31585: LIST
31586: PUSH
31587: LD_INT 2
31589: PUSH
31590: LD_INT 2
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 0
31609: PUSH
31610: LD_INT 2
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 1
31619: NEG
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: PUSH
31628: LD_INT 2
31630: NEG
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 2
31641: NEG
31642: PUSH
31643: LD_INT 1
31645: NEG
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 2
31653: NEG
31654: PUSH
31655: LD_INT 2
31657: NEG
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31684: LD_ADDR_VAR 0 59
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: LD_INT 0
31694: PUSH
31695: EMPTY
31696: LIST
31697: LIST
31698: PUSH
31699: LD_INT 0
31701: PUSH
31702: LD_INT 1
31704: NEG
31705: PUSH
31706: EMPTY
31707: LIST
31708: LIST
31709: PUSH
31710: LD_INT 1
31712: PUSH
31713: LD_INT 0
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: LD_INT 1
31722: PUSH
31723: LD_INT 1
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 1
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 1
31742: NEG
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: NEG
31754: PUSH
31755: LD_INT 1
31757: NEG
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31772: LD_ADDR_VAR 0 60
31776: PUSH
31777: LD_INT 0
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 1
31792: NEG
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 1
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 1
31813: PUSH
31814: EMPTY
31815: LIST
31816: LIST
31817: PUSH
31818: LD_INT 0
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 1
31830: NEG
31831: PUSH
31832: LD_INT 0
31834: PUSH
31835: EMPTY
31836: LIST
31837: LIST
31838: PUSH
31839: LD_INT 1
31841: NEG
31842: PUSH
31843: LD_INT 1
31845: NEG
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31860: LD_ADDR_VAR 0 61
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: LD_INT 0
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 1
31880: NEG
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 1
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 0
31908: PUSH
31909: LD_INT 1
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 1
31918: NEG
31919: PUSH
31920: LD_INT 0
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: EMPTY
31936: LIST
31937: LIST
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31948: LD_ADDR_VAR 0 62
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 0
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 1
31968: NEG
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: PUSH
31987: LD_INT 1
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: LD_INT 0
31996: PUSH
31997: LD_INT 1
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 1
32006: NEG
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: PUSH
32015: LD_INT 1
32017: NEG
32018: PUSH
32019: LD_INT 1
32021: NEG
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32036: LD_ADDR_VAR 0 63
32040: PUSH
32041: LD_INT 0
32043: PUSH
32044: LD_INT 0
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 1
32056: NEG
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: PUSH
32075: LD_INT 1
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: PUSH
32082: LD_INT 0
32084: PUSH
32085: LD_INT 1
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: EMPTY
32100: LIST
32101: LIST
32102: PUSH
32103: LD_INT 1
32105: NEG
32106: PUSH
32107: LD_INT 1
32109: NEG
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32124: LD_ADDR_VAR 0 64
32128: PUSH
32129: LD_INT 0
32131: PUSH
32132: LD_INT 0
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 1
32144: NEG
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PUSH
32150: LD_INT 1
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: PUSH
32163: LD_INT 1
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: PUSH
32170: LD_INT 0
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 1
32182: NEG
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 1
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: ST_TO_ADDR
// end ; 1 :
32212: GO 38109
32214: LD_INT 1
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 34845
32222: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32223: LD_ADDR_VAR 0 11
32227: PUSH
32228: LD_INT 1
32230: NEG
32231: PUSH
32232: LD_INT 3
32234: NEG
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 0
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 1
32253: PUSH
32254: LD_INT 2
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: LIST
32266: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32267: LD_ADDR_VAR 0 12
32271: PUSH
32272: LD_INT 2
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 3
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 3
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32308: LD_ADDR_VAR 0 13
32312: PUSH
32313: LD_INT 3
32315: PUSH
32316: LD_INT 2
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: PUSH
32323: LD_INT 3
32325: PUSH
32326: LD_INT 3
32328: PUSH
32329: EMPTY
32330: LIST
32331: LIST
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32348: LD_ADDR_VAR 0 14
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: LD_INT 3
32358: PUSH
32359: EMPTY
32360: LIST
32361: LIST
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: LD_INT 3
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: PUSH
32373: LD_INT 1
32375: NEG
32376: PUSH
32377: LD_INT 2
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: LIST
32388: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32389: LD_ADDR_VAR 0 15
32393: PUSH
32394: LD_INT 2
32396: NEG
32397: PUSH
32398: LD_INT 1
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: LD_INT 3
32407: NEG
32408: PUSH
32409: LD_INT 0
32411: PUSH
32412: EMPTY
32413: LIST
32414: LIST
32415: PUSH
32416: LD_INT 3
32418: NEG
32419: PUSH
32420: LD_INT 1
32422: NEG
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32433: LD_ADDR_VAR 0 16
32437: PUSH
32438: LD_INT 2
32440: NEG
32441: PUSH
32442: LD_INT 3
32444: NEG
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 3
32452: NEG
32453: PUSH
32454: LD_INT 2
32456: NEG
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 3
32464: NEG
32465: PUSH
32466: LD_INT 3
32468: NEG
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32479: LD_ADDR_VAR 0 17
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: LD_INT 3
32490: NEG
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 1
32509: PUSH
32510: LD_INT 2
32512: NEG
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32523: LD_ADDR_VAR 0 18
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: LD_INT 0
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 3
32551: PUSH
32552: LD_INT 1
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32564: LD_ADDR_VAR 0 19
32568: PUSH
32569: LD_INT 3
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 3
32581: PUSH
32582: LD_INT 3
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: LIST
32603: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32604: LD_ADDR_VAR 0 20
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: LD_INT 3
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: PUSH
32629: LD_INT 1
32631: NEG
32632: PUSH
32633: LD_INT 2
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32645: LD_ADDR_VAR 0 21
32649: PUSH
32650: LD_INT 2
32652: NEG
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 3
32663: NEG
32664: PUSH
32665: LD_INT 0
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 3
32674: NEG
32675: PUSH
32676: LD_INT 1
32678: NEG
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32689: LD_ADDR_VAR 0 22
32693: PUSH
32694: LD_INT 2
32696: NEG
32697: PUSH
32698: LD_INT 3
32700: NEG
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: PUSH
32706: LD_INT 3
32708: NEG
32709: PUSH
32710: LD_INT 2
32712: NEG
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 3
32720: NEG
32721: PUSH
32722: LD_INT 3
32724: NEG
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: LIST
32734: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
32735: LD_ADDR_VAR 0 23
32739: PUSH
32740: LD_INT 0
32742: PUSH
32743: LD_INT 3
32745: NEG
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: LD_INT 4
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: PUSH
32766: LD_INT 3
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
32779: LD_ADDR_VAR 0 24
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: LD_INT 0
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 3
32796: PUSH
32797: LD_INT 1
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 4
32807: PUSH
32808: LD_INT 1
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32820: LD_ADDR_VAR 0 25
32824: PUSH
32825: LD_INT 3
32827: PUSH
32828: LD_INT 3
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 4
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: PUSH
32845: LD_INT 3
32847: PUSH
32848: LD_INT 4
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: LIST
32859: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32860: LD_ADDR_VAR 0 26
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: LD_INT 3
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 4
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 1
32887: NEG
32888: PUSH
32889: LD_INT 3
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
32901: LD_ADDR_VAR 0 27
32905: PUSH
32906: LD_INT 3
32908: NEG
32909: PUSH
32910: LD_INT 0
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: NEG
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 4
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
32945: LD_ADDR_VAR 0 28
32949: PUSH
32950: LD_INT 3
32952: NEG
32953: PUSH
32954: LD_INT 3
32956: NEG
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: PUSH
32962: LD_INT 3
32964: NEG
32965: PUSH
32966: LD_INT 4
32968: NEG
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 4
32976: NEG
32977: PUSH
32978: LD_INT 3
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: LIST
32990: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
32991: LD_ADDR_VAR 0 29
32995: PUSH
32996: LD_INT 1
32998: NEG
32999: PUSH
33000: LD_INT 3
33002: NEG
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: PUSH
33008: LD_INT 0
33010: PUSH
33011: LD_INT 3
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 1
33021: PUSH
33022: LD_INT 2
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: LD_INT 4
33036: NEG
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 0
33044: PUSH
33045: LD_INT 4
33047: NEG
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: PUSH
33056: LD_INT 3
33058: NEG
33059: PUSH
33060: EMPTY
33061: LIST
33062: LIST
33063: PUSH
33064: LD_INT 1
33066: NEG
33067: PUSH
33068: LD_INT 5
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: LD_INT 5
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 4
33092: NEG
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 1
33100: NEG
33101: PUSH
33102: LD_INT 6
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 0
33112: PUSH
33113: LD_INT 6
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: PUSH
33124: LD_INT 5
33126: NEG
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33146: LD_ADDR_VAR 0 30
33150: PUSH
33151: LD_INT 2
33153: PUSH
33154: LD_INT 1
33156: NEG
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 3
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 3
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 3
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 4
33195: PUSH
33196: LD_INT 0
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 4
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 4
33215: PUSH
33216: LD_INT 1
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 5
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 5
33236: PUSH
33237: LD_INT 1
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PUSH
33244: LD_INT 5
33246: PUSH
33247: LD_INT 1
33249: NEG
33250: PUSH
33251: EMPTY
33252: LIST
33253: LIST
33254: PUSH
33255: LD_INT 6
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: PUSH
33265: LD_INT 6
33267: PUSH
33268: LD_INT 1
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33289: LD_ADDR_VAR 0 31
33293: PUSH
33294: LD_INT 3
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 3
33306: PUSH
33307: LD_INT 3
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 3
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 4
33326: PUSH
33327: LD_INT 3
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 4
33336: PUSH
33337: LD_INT 4
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 3
33346: PUSH
33347: LD_INT 4
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 5
33356: PUSH
33357: LD_INT 4
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: PUSH
33364: LD_INT 5
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 4
33376: PUSH
33377: LD_INT 5
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 6
33386: PUSH
33387: LD_INT 5
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 6
33396: PUSH
33397: LD_INT 6
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 5
33406: PUSH
33407: LD_INT 6
33409: PUSH
33410: EMPTY
33411: LIST
33412: LIST
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33428: LD_ADDR_VAR 0 32
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: LD_INT 3
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 0
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: LD_INT 2
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PUSH
33464: LD_INT 1
33466: PUSH
33467: LD_INT 4
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: LD_INT 4
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: LD_INT 1
33486: NEG
33487: PUSH
33488: LD_INT 3
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PUSH
33495: LD_INT 1
33497: PUSH
33498: LD_INT 5
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: LD_INT 5
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: PUSH
33515: LD_INT 1
33517: NEG
33518: PUSH
33519: LD_INT 4
33521: PUSH
33522: EMPTY
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 1
33528: PUSH
33529: LD_INT 6
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: LD_INT 6
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 1
33548: NEG
33549: PUSH
33550: LD_INT 5
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33571: LD_ADDR_VAR 0 33
33575: PUSH
33576: LD_INT 2
33578: NEG
33579: PUSH
33580: LD_INT 1
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: PUSH
33587: LD_INT 3
33589: NEG
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 3
33600: NEG
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: LD_INT 3
33612: NEG
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: LD_INT 4
33623: NEG
33624: PUSH
33625: LD_INT 0
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 4
33634: NEG
33635: PUSH
33636: LD_INT 1
33638: NEG
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 4
33646: NEG
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 5
33657: NEG
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 5
33668: NEG
33669: PUSH
33670: LD_INT 1
33672: NEG
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 5
33680: NEG
33681: PUSH
33682: LD_INT 1
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 6
33691: NEG
33692: PUSH
33693: LD_INT 0
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 6
33702: NEG
33703: PUSH
33704: LD_INT 1
33706: NEG
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: EMPTY
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
33726: LD_ADDR_VAR 0 34
33730: PUSH
33731: LD_INT 2
33733: NEG
33734: PUSH
33735: LD_INT 3
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 3
33745: NEG
33746: PUSH
33747: LD_INT 2
33749: NEG
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 3
33757: NEG
33758: PUSH
33759: LD_INT 3
33761: NEG
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 3
33769: NEG
33770: PUSH
33771: LD_INT 4
33773: NEG
33774: PUSH
33775: EMPTY
33776: LIST
33777: LIST
33778: PUSH
33779: LD_INT 4
33781: NEG
33782: PUSH
33783: LD_INT 3
33785: NEG
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 4
33793: NEG
33794: PUSH
33795: LD_INT 4
33797: NEG
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 4
33805: NEG
33806: PUSH
33807: LD_INT 5
33809: NEG
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 5
33817: NEG
33818: PUSH
33819: LD_INT 4
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 5
33829: NEG
33830: PUSH
33831: LD_INT 5
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: LD_INT 5
33841: NEG
33842: PUSH
33843: LD_INT 6
33845: NEG
33846: PUSH
33847: EMPTY
33848: LIST
33849: LIST
33850: PUSH
33851: LD_INT 6
33853: NEG
33854: PUSH
33855: LD_INT 5
33857: NEG
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: LD_INT 6
33865: NEG
33866: PUSH
33867: LD_INT 6
33869: NEG
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
33889: LD_ADDR_VAR 0 41
33893: PUSH
33894: LD_INT 0
33896: PUSH
33897: LD_INT 2
33899: NEG
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: PUSH
33905: LD_INT 1
33907: NEG
33908: PUSH
33909: LD_INT 3
33911: NEG
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 1
33919: PUSH
33920: LD_INT 2
33922: NEG
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: LIST
33932: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
33933: LD_ADDR_VAR 0 42
33937: PUSH
33938: LD_INT 2
33940: PUSH
33941: LD_INT 0
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: LD_INT 2
33950: PUSH
33951: LD_INT 1
33953: NEG
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 3
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: EMPTY
33966: LIST
33967: LIST
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: LIST
33973: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
33974: LD_ADDR_VAR 0 43
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 3
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 3
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34014: LD_ADDR_VAR 0 44
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 3
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: NEG
34042: PUSH
34043: LD_INT 2
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34055: LD_ADDR_VAR 0 45
34059: PUSH
34060: LD_INT 2
34062: NEG
34063: PUSH
34064: LD_INT 0
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 2
34073: NEG
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 3
34084: NEG
34085: PUSH
34086: LD_INT 1
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34099: LD_ADDR_VAR 0 46
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 2
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: NEG
34119: PUSH
34120: LD_INT 3
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 3
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34145: LD_ADDR_VAR 0 47
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: LD_INT 3
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 1
34164: NEG
34165: PUSH
34166: LD_INT 3
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34178: LD_ADDR_VAR 0 48
34182: PUSH
34183: LD_INT 1
34185: PUSH
34186: LD_INT 2
34188: NEG
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: LD_INT 1
34199: NEG
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34209: LD_ADDR_VAR 0 49
34213: PUSH
34214: LD_INT 3
34216: PUSH
34217: LD_INT 1
34219: PUSH
34220: EMPTY
34221: LIST
34222: LIST
34223: PUSH
34224: LD_INT 3
34226: PUSH
34227: LD_INT 2
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34238: LD_ADDR_VAR 0 50
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34267: LD_ADDR_VAR 0 51
34271: PUSH
34272: LD_INT 1
34274: NEG
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 2
34285: NEG
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34298: LD_ADDR_VAR 0 52
34302: PUSH
34303: LD_INT 3
34305: NEG
34306: PUSH
34307: LD_INT 1
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: NEG
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34331: LD_ADDR_VAR 0 53
34335: PUSH
34336: LD_INT 1
34338: NEG
34339: PUSH
34340: LD_INT 3
34342: NEG
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 3
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34375: LD_ADDR_VAR 0 54
34379: PUSH
34380: LD_INT 2
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 3
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34416: LD_ADDR_VAR 0 55
34420: PUSH
34421: LD_INT 3
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 3
34433: PUSH
34434: LD_INT 3
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: LD_INT 3
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: LIST
34455: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34456: LD_ADDR_VAR 0 56
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: LD_INT 3
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: LD_INT 3
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 1
34483: NEG
34484: PUSH
34485: LD_INT 2
34487: PUSH
34488: EMPTY
34489: LIST
34490: LIST
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34497: LD_ADDR_VAR 0 57
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 3
34515: NEG
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 3
34526: NEG
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34541: LD_ADDR_VAR 0 58
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: LD_INT 3
34552: NEG
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 3
34560: NEG
34561: PUSH
34562: LD_INT 2
34564: NEG
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 3
34572: NEG
34573: PUSH
34574: LD_INT 3
34576: NEG
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: LIST
34586: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34587: LD_ADDR_VAR 0 59
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: LD_INT 2
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: LIST
34630: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34631: LD_ADDR_VAR 0 60
34635: PUSH
34636: LD_INT 1
34638: PUSH
34639: LD_INT 1
34641: NEG
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 2
34649: PUSH
34650: LD_INT 0
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 2
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34672: LD_ADDR_VAR 0 61
34676: PUSH
34677: LD_INT 2
34679: PUSH
34680: LD_INT 1
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: LD_INT 2
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34712: LD_ADDR_VAR 0 62
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: EMPTY
34724: LIST
34725: LIST
34726: PUSH
34727: LD_INT 0
34729: PUSH
34730: LD_INT 2
34732: PUSH
34733: EMPTY
34734: LIST
34735: LIST
34736: PUSH
34737: LD_INT 1
34739: NEG
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: EMPTY
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34753: LD_ADDR_VAR 0 63
34757: PUSH
34758: LD_INT 1
34760: NEG
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 2
34771: NEG
34772: PUSH
34773: LD_INT 0
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 2
34782: NEG
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34797: LD_ADDR_VAR 0 64
34801: PUSH
34802: LD_INT 1
34804: NEG
34805: PUSH
34806: LD_INT 2
34808: NEG
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 2
34816: NEG
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: LD_INT 2
34832: NEG
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: LIST
34842: ST_TO_ADDR
// end ; 2 :
34843: GO 38109
34845: LD_INT 2
34847: DOUBLE
34848: EQUAL
34849: IFTRUE 34853
34851: GO 38108
34853: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34854: LD_ADDR_VAR 0 29
34858: PUSH
34859: LD_INT 4
34861: PUSH
34862: LD_INT 0
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 4
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 5
34882: PUSH
34883: LD_INT 0
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: PUSH
34890: LD_INT 5
34892: PUSH
34893: LD_INT 1
34895: PUSH
34896: EMPTY
34897: LIST
34898: LIST
34899: PUSH
34900: LD_INT 4
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: EMPTY
34907: LIST
34908: LIST
34909: PUSH
34910: LD_INT 3
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 3
34922: PUSH
34923: LD_INT 1
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 3
34933: PUSH
34934: LD_INT 2
34936: NEG
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 5
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 3
34954: PUSH
34955: LD_INT 3
34957: PUSH
34958: EMPTY
34959: LIST
34960: LIST
34961: PUSH
34962: LD_INT 3
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 4
34974: PUSH
34975: LD_INT 3
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: LD_INT 4
34984: PUSH
34985: LD_INT 4
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 3
34994: PUSH
34995: LD_INT 4
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 3
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 2
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 4
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 2
35034: PUSH
35035: LD_INT 4
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 4
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 4
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: PUSH
35075: LD_INT 5
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: LD_INT 5
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 4
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 2
35116: PUSH
35117: LD_INT 5
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: LD_INT 2
35126: NEG
35127: PUSH
35128: LD_INT 3
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 3
35137: NEG
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 3
35148: NEG
35149: PUSH
35150: LD_INT 1
35152: NEG
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: NEG
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: EMPTY
35177: LIST
35178: LIST
35179: PUSH
35180: LD_INT 3
35182: NEG
35183: PUSH
35184: LD_INT 1
35186: PUSH
35187: EMPTY
35188: LIST
35189: LIST
35190: PUSH
35191: LD_INT 4
35193: NEG
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 4
35204: NEG
35205: PUSH
35206: LD_INT 1
35208: NEG
35209: PUSH
35210: EMPTY
35211: LIST
35212: LIST
35213: PUSH
35214: LD_INT 4
35216: NEG
35217: PUSH
35218: LD_INT 2
35220: NEG
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 4
35239: NEG
35240: PUSH
35241: LD_INT 4
35243: NEG
35244: PUSH
35245: EMPTY
35246: LIST
35247: LIST
35248: PUSH
35249: LD_INT 4
35251: NEG
35252: PUSH
35253: LD_INT 5
35255: NEG
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 3
35263: NEG
35264: PUSH
35265: LD_INT 4
35267: NEG
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: NEG
35276: PUSH
35277: LD_INT 3
35279: NEG
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 4
35287: NEG
35288: PUSH
35289: LD_INT 3
35291: NEG
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 5
35299: NEG
35300: PUSH
35301: LD_INT 4
35303: NEG
35304: PUSH
35305: EMPTY
35306: LIST
35307: LIST
35308: PUSH
35309: LD_INT 5
35311: NEG
35312: PUSH
35313: LD_INT 5
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 3
35323: NEG
35324: PUSH
35325: LD_INT 5
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 5
35335: NEG
35336: PUSH
35337: LD_INT 3
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: LIST
35349: LIST
35350: LIST
35351: LIST
35352: LIST
35353: LIST
35354: LIST
35355: LIST
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35392: LD_ADDR_VAR 0 30
35396: PUSH
35397: LD_INT 4
35399: PUSH
35400: LD_INT 4
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 4
35409: PUSH
35410: LD_INT 3
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 5
35419: PUSH
35420: LD_INT 4
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 5
35429: PUSH
35430: LD_INT 5
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 4
35439: PUSH
35440: LD_INT 5
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 3
35449: PUSH
35450: LD_INT 4
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: LD_INT 3
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 5
35469: PUSH
35470: LD_INT 3
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: LD_INT 5
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 0
35489: PUSH
35490: LD_INT 3
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 0
35499: PUSH
35500: LD_INT 2
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: EMPTY
35514: LIST
35515: LIST
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 4
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: PUSH
35527: LD_INT 0
35529: PUSH
35530: LD_INT 4
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 1
35539: NEG
35540: PUSH
35541: LD_INT 3
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 1
35550: NEG
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 2
35561: PUSH
35562: LD_INT 4
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: NEG
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 4
35582: NEG
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 4
35593: NEG
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 3
35605: NEG
35606: PUSH
35607: LD_INT 0
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 3
35616: NEG
35617: PUSH
35618: LD_INT 1
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: PUSH
35625: LD_INT 4
35627: NEG
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: EMPTY
35633: LIST
35634: LIST
35635: PUSH
35636: LD_INT 5
35638: NEG
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 5
35649: NEG
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 5
35661: NEG
35662: PUSH
35663: LD_INT 2
35665: NEG
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 3
35673: NEG
35674: PUSH
35675: LD_INT 2
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 3
35684: NEG
35685: PUSH
35686: LD_INT 3
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 3
35696: NEG
35697: PUSH
35698: LD_INT 4
35700: NEG
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 2
35708: NEG
35709: PUSH
35710: LD_INT 3
35712: NEG
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 2
35720: NEG
35721: PUSH
35722: LD_INT 2
35724: NEG
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 3
35732: NEG
35733: PUSH
35734: LD_INT 2
35736: NEG
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 4
35744: NEG
35745: PUSH
35746: LD_INT 3
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 4
35756: NEG
35757: PUSH
35758: LD_INT 4
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: LD_INT 4
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 4
35780: NEG
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 0
35792: PUSH
35793: LD_INT 4
35795: NEG
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 0
35803: PUSH
35804: LD_INT 5
35806: NEG
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 1
35814: PUSH
35815: LD_INT 4
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 1
35825: PUSH
35826: LD_INT 3
35828: NEG
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: LD_INT 3
35839: NEG
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: PUSH
35845: LD_INT 1
35847: NEG
35848: PUSH
35849: LD_INT 4
35851: NEG
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: LD_INT 5
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 2
35871: PUSH
35872: LD_INT 3
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 2
35882: NEG
35883: PUSH
35884: LD_INT 5
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
35939: LD_ADDR_VAR 0 31
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: LD_INT 4
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: LD_INT 4
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: LD_INT 5
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: LD_INT 5
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 4
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 3
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 5
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 2
36028: NEG
36029: PUSH
36030: LD_INT 3
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 3
36039: NEG
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 3
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 0
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 2
36073: NEG
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 3
36084: NEG
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 4
36095: NEG
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 4
36106: NEG
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 4
36118: NEG
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: NEG
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 4
36141: NEG
36142: PUSH
36143: LD_INT 4
36145: NEG
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: PUSH
36151: LD_INT 4
36153: NEG
36154: PUSH
36155: LD_INT 5
36157: NEG
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 3
36165: NEG
36166: PUSH
36167: LD_INT 4
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 3
36177: NEG
36178: PUSH
36179: LD_INT 3
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 4
36189: NEG
36190: PUSH
36191: LD_INT 3
36193: NEG
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 5
36201: NEG
36202: PUSH
36203: LD_INT 4
36205: NEG
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 5
36213: NEG
36214: PUSH
36215: LD_INT 5
36217: NEG
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 3
36225: NEG
36226: PUSH
36227: LD_INT 5
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 5
36237: NEG
36238: PUSH
36239: LD_INT 3
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 0
36249: PUSH
36250: LD_INT 3
36252: NEG
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: LD_INT 4
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 1
36271: PUSH
36272: LD_INT 3
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 2
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: LD_INT 2
36296: NEG
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 1
36304: NEG
36305: PUSH
36306: LD_INT 3
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 4
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: LD_INT 2
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 2
36339: NEG
36340: PUSH
36341: LD_INT 4
36343: NEG
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 4
36351: PUSH
36352: LD_INT 0
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 4
36361: PUSH
36362: LD_INT 1
36364: NEG
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 5
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 5
36382: PUSH
36383: LD_INT 1
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: PUSH
36390: LD_INT 4
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 3
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 3
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 5
36434: PUSH
36435: LD_INT 2
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: LIST
36446: LIST
36447: LIST
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: LIST
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36489: LD_ADDR_VAR 0 32
36493: PUSH
36494: LD_INT 4
36496: NEG
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 4
36507: NEG
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 3
36519: NEG
36520: PUSH
36521: LD_INT 0
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 3
36530: NEG
36531: PUSH
36532: LD_INT 1
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 4
36541: NEG
36542: PUSH
36543: LD_INT 1
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 5
36552: NEG
36553: PUSH
36554: LD_INT 0
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 5
36563: NEG
36564: PUSH
36565: LD_INT 1
36567: NEG
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 5
36575: NEG
36576: PUSH
36577: LD_INT 2
36579: NEG
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 3
36587: NEG
36588: PUSH
36589: LD_INT 2
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 3
36598: NEG
36599: PUSH
36600: LD_INT 3
36602: NEG
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 3
36610: NEG
36611: PUSH
36612: LD_INT 4
36614: NEG
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: LD_INT 3
36626: NEG
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: PUSH
36632: LD_INT 2
36634: NEG
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 3
36646: NEG
36647: PUSH
36648: LD_INT 2
36650: NEG
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 4
36658: NEG
36659: PUSH
36660: LD_INT 3
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 4
36670: NEG
36671: PUSH
36672: LD_INT 4
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 2
36682: NEG
36683: PUSH
36684: LD_INT 4
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 4
36694: NEG
36695: PUSH
36696: LD_INT 2
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: LD_INT 4
36709: NEG
36710: PUSH
36711: EMPTY
36712: LIST
36713: LIST
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: LD_INT 5
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: LD_INT 4
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 3
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 0
36750: PUSH
36751: LD_INT 3
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: LD_INT 4
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 5
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 2
36785: PUSH
36786: LD_INT 3
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 2
36796: NEG
36797: PUSH
36798: LD_INT 5
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 3
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 4
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 4
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 3
36849: PUSH
36850: LD_INT 1
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: LD_INT 0
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 4
36891: PUSH
36892: LD_INT 2
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 4
36901: PUSH
36902: LD_INT 4
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 4
36911: PUSH
36912: LD_INT 3
36914: PUSH
36915: EMPTY
36916: LIST
36917: LIST
36918: PUSH
36919: LD_INT 5
36921: PUSH
36922: LD_INT 4
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 5
36931: PUSH
36932: LD_INT 5
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 4
36941: PUSH
36942: LD_INT 5
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 3
36951: PUSH
36952: LD_INT 4
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 3
36961: PUSH
36962: LD_INT 3
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 5
36971: PUSH
36972: LD_INT 3
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 3
36981: PUSH
36982: LD_INT 5
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37036: LD_ADDR_VAR 0 33
37040: PUSH
37041: LD_INT 4
37043: NEG
37044: PUSH
37045: LD_INT 4
37047: NEG
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 4
37055: NEG
37056: PUSH
37057: LD_INT 5
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 3
37067: NEG
37068: PUSH
37069: LD_INT 4
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: LD_INT 3
37079: NEG
37080: PUSH
37081: LD_INT 3
37083: NEG
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 4
37091: NEG
37092: PUSH
37093: LD_INT 3
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: LD_INT 5
37103: NEG
37104: PUSH
37105: LD_INT 4
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 5
37115: NEG
37116: PUSH
37117: LD_INT 5
37119: NEG
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 3
37127: NEG
37128: PUSH
37129: LD_INT 5
37131: NEG
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PUSH
37137: LD_INT 5
37139: NEG
37140: PUSH
37141: LD_INT 3
37143: NEG
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: LD_INT 3
37154: NEG
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 4
37165: NEG
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 1
37173: PUSH
37174: LD_INT 3
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 0
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: NEG
37207: PUSH
37208: LD_INT 3
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PUSH
37220: LD_INT 4
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: PUSH
37231: LD_INT 2
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: LD_INT 4
37245: NEG
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 4
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 4
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 5
37274: PUSH
37275: LD_INT 0
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 5
37284: PUSH
37285: LD_INT 1
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PUSH
37292: LD_INT 4
37294: PUSH
37295: LD_INT 1
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 3
37304: PUSH
37305: LD_INT 0
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 3
37314: PUSH
37315: LD_INT 1
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 3
37325: PUSH
37326: LD_INT 2
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 5
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 3
37346: PUSH
37347: LD_INT 3
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 3
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 4
37366: PUSH
37367: LD_INT 3
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 4
37376: PUSH
37377: LD_INT 4
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: PUSH
37387: LD_INT 4
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: LD_INT 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 4
37416: PUSH
37417: LD_INT 2
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 4
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: LD_INT 4
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: LD_INT 3
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: LD_INT 4
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 1
37466: PUSH
37467: LD_INT 5
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 0
37476: PUSH
37477: LD_INT 5
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 1
37486: NEG
37487: PUSH
37488: LD_INT 4
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PUSH
37495: LD_INT 1
37497: NEG
37498: PUSH
37499: LD_INT 3
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 5
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: LD_INT 3
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37574: LD_ADDR_VAR 0 34
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 4
37584: NEG
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 5
37595: NEG
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: PUSH
37604: LD_INT 4
37606: NEG
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: PUSH
37615: LD_INT 3
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 0
37625: PUSH
37626: LD_INT 3
37628: NEG
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 4
37640: NEG
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: NEG
37649: PUSH
37650: LD_INT 5
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: LD_INT 3
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 2
37671: NEG
37672: PUSH
37673: LD_INT 5
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 3
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 3
37693: PUSH
37694: LD_INT 1
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 4
37704: PUSH
37705: LD_INT 0
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 4
37714: PUSH
37715: LD_INT 1
37717: PUSH
37718: EMPTY
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 3
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: PUSH
37735: LD_INT 0
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 2
37755: PUSH
37756: LD_INT 2
37758: NEG
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 4
37766: PUSH
37767: LD_INT 2
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 4
37776: PUSH
37777: LD_INT 4
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 4
37786: PUSH
37787: LD_INT 3
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 5
37796: PUSH
37797: LD_INT 4
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 5
37806: PUSH
37807: LD_INT 5
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 4
37816: PUSH
37817: LD_INT 5
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 3
37826: PUSH
37827: LD_INT 4
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 3
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 5
37846: PUSH
37847: LD_INT 3
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 3
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: LD_INT 3
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 1
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: LD_INT 4
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 0
37906: PUSH
37907: LD_INT 4
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 1
37916: NEG
37917: PUSH
37918: LD_INT 3
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 2
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 2
37938: PUSH
37939: LD_INT 4
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: NEG
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 4
37959: NEG
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 4
37970: NEG
37971: PUSH
37972: LD_INT 1
37974: NEG
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 3
37982: NEG
37983: PUSH
37984: LD_INT 0
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 3
37993: NEG
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 4
38004: NEG
38005: PUSH
38006: LD_INT 1
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 5
38015: NEG
38016: PUSH
38017: LD_INT 0
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: PUSH
38024: LD_INT 5
38026: NEG
38027: PUSH
38028: LD_INT 1
38030: NEG
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 5
38038: NEG
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: LD_INT 2
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: ST_TO_ADDR
// end ; end ;
38106: GO 38109
38108: POP
// case btype of b_depot , b_warehouse :
38109: LD_VAR 0 1
38113: PUSH
38114: LD_INT 0
38116: DOUBLE
38117: EQUAL
38118: IFTRUE 38128
38120: LD_INT 1
38122: DOUBLE
38123: EQUAL
38124: IFTRUE 38128
38126: GO 38329
38128: POP
// case nation of nation_american :
38129: LD_VAR 0 5
38133: PUSH
38134: LD_INT 1
38136: DOUBLE
38137: EQUAL
38138: IFTRUE 38142
38140: GO 38198
38142: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38143: LD_ADDR_VAR 0 9
38147: PUSH
38148: LD_VAR 0 11
38152: PUSH
38153: LD_VAR 0 12
38157: PUSH
38158: LD_VAR 0 13
38162: PUSH
38163: LD_VAR 0 14
38167: PUSH
38168: LD_VAR 0 15
38172: PUSH
38173: LD_VAR 0 16
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: PUSH
38186: LD_VAR 0 4
38190: PUSH
38191: LD_INT 1
38193: PLUS
38194: ARRAY
38195: ST_TO_ADDR
38196: GO 38327
38198: LD_INT 2
38200: DOUBLE
38201: EQUAL
38202: IFTRUE 38206
38204: GO 38262
38206: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38207: LD_ADDR_VAR 0 9
38211: PUSH
38212: LD_VAR 0 17
38216: PUSH
38217: LD_VAR 0 18
38221: PUSH
38222: LD_VAR 0 19
38226: PUSH
38227: LD_VAR 0 20
38231: PUSH
38232: LD_VAR 0 21
38236: PUSH
38237: LD_VAR 0 22
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: PUSH
38250: LD_VAR 0 4
38254: PUSH
38255: LD_INT 1
38257: PLUS
38258: ARRAY
38259: ST_TO_ADDR
38260: GO 38327
38262: LD_INT 3
38264: DOUBLE
38265: EQUAL
38266: IFTRUE 38270
38268: GO 38326
38270: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38271: LD_ADDR_VAR 0 9
38275: PUSH
38276: LD_VAR 0 23
38280: PUSH
38281: LD_VAR 0 24
38285: PUSH
38286: LD_VAR 0 25
38290: PUSH
38291: LD_VAR 0 26
38295: PUSH
38296: LD_VAR 0 27
38300: PUSH
38301: LD_VAR 0 28
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: LD_VAR 0 4
38318: PUSH
38319: LD_INT 1
38321: PLUS
38322: ARRAY
38323: ST_TO_ADDR
38324: GO 38327
38326: POP
38327: GO 38882
38329: LD_INT 2
38331: DOUBLE
38332: EQUAL
38333: IFTRUE 38343
38335: LD_INT 3
38337: DOUBLE
38338: EQUAL
38339: IFTRUE 38343
38341: GO 38399
38343: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38344: LD_ADDR_VAR 0 9
38348: PUSH
38349: LD_VAR 0 29
38353: PUSH
38354: LD_VAR 0 30
38358: PUSH
38359: LD_VAR 0 31
38363: PUSH
38364: LD_VAR 0 32
38368: PUSH
38369: LD_VAR 0 33
38373: PUSH
38374: LD_VAR 0 34
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: PUSH
38387: LD_VAR 0 4
38391: PUSH
38392: LD_INT 1
38394: PLUS
38395: ARRAY
38396: ST_TO_ADDR
38397: GO 38882
38399: LD_INT 16
38401: DOUBLE
38402: EQUAL
38403: IFTRUE 38461
38405: LD_INT 17
38407: DOUBLE
38408: EQUAL
38409: IFTRUE 38461
38411: LD_INT 18
38413: DOUBLE
38414: EQUAL
38415: IFTRUE 38461
38417: LD_INT 19
38419: DOUBLE
38420: EQUAL
38421: IFTRUE 38461
38423: LD_INT 22
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38461
38429: LD_INT 20
38431: DOUBLE
38432: EQUAL
38433: IFTRUE 38461
38435: LD_INT 21
38437: DOUBLE
38438: EQUAL
38439: IFTRUE 38461
38441: LD_INT 23
38443: DOUBLE
38444: EQUAL
38445: IFTRUE 38461
38447: LD_INT 24
38449: DOUBLE
38450: EQUAL
38451: IFTRUE 38461
38453: LD_INT 25
38455: DOUBLE
38456: EQUAL
38457: IFTRUE 38461
38459: GO 38517
38461: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: LD_VAR 0 35
38471: PUSH
38472: LD_VAR 0 36
38476: PUSH
38477: LD_VAR 0 37
38481: PUSH
38482: LD_VAR 0 38
38486: PUSH
38487: LD_VAR 0 39
38491: PUSH
38492: LD_VAR 0 40
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: PUSH
38505: LD_VAR 0 4
38509: PUSH
38510: LD_INT 1
38512: PLUS
38513: ARRAY
38514: ST_TO_ADDR
38515: GO 38882
38517: LD_INT 6
38519: DOUBLE
38520: EQUAL
38521: IFTRUE 38573
38523: LD_INT 7
38525: DOUBLE
38526: EQUAL
38527: IFTRUE 38573
38529: LD_INT 8
38531: DOUBLE
38532: EQUAL
38533: IFTRUE 38573
38535: LD_INT 13
38537: DOUBLE
38538: EQUAL
38539: IFTRUE 38573
38541: LD_INT 12
38543: DOUBLE
38544: EQUAL
38545: IFTRUE 38573
38547: LD_INT 15
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38573
38553: LD_INT 11
38555: DOUBLE
38556: EQUAL
38557: IFTRUE 38573
38559: LD_INT 14
38561: DOUBLE
38562: EQUAL
38563: IFTRUE 38573
38565: LD_INT 10
38567: DOUBLE
38568: EQUAL
38569: IFTRUE 38573
38571: GO 38629
38573: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38574: LD_ADDR_VAR 0 9
38578: PUSH
38579: LD_VAR 0 41
38583: PUSH
38584: LD_VAR 0 42
38588: PUSH
38589: LD_VAR 0 43
38593: PUSH
38594: LD_VAR 0 44
38598: PUSH
38599: LD_VAR 0 45
38603: PUSH
38604: LD_VAR 0 46
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: PUSH
38617: LD_VAR 0 4
38621: PUSH
38622: LD_INT 1
38624: PLUS
38625: ARRAY
38626: ST_TO_ADDR
38627: GO 38882
38629: LD_INT 36
38631: DOUBLE
38632: EQUAL
38633: IFTRUE 38637
38635: GO 38693
38637: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38638: LD_ADDR_VAR 0 9
38642: PUSH
38643: LD_VAR 0 47
38647: PUSH
38648: LD_VAR 0 48
38652: PUSH
38653: LD_VAR 0 49
38657: PUSH
38658: LD_VAR 0 50
38662: PUSH
38663: LD_VAR 0 51
38667: PUSH
38668: LD_VAR 0 52
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: PUSH
38681: LD_VAR 0 4
38685: PUSH
38686: LD_INT 1
38688: PLUS
38689: ARRAY
38690: ST_TO_ADDR
38691: GO 38882
38693: LD_INT 4
38695: DOUBLE
38696: EQUAL
38697: IFTRUE 38719
38699: LD_INT 5
38701: DOUBLE
38702: EQUAL
38703: IFTRUE 38719
38705: LD_INT 34
38707: DOUBLE
38708: EQUAL
38709: IFTRUE 38719
38711: LD_INT 37
38713: DOUBLE
38714: EQUAL
38715: IFTRUE 38719
38717: GO 38775
38719: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
38720: LD_ADDR_VAR 0 9
38724: PUSH
38725: LD_VAR 0 53
38729: PUSH
38730: LD_VAR 0 54
38734: PUSH
38735: LD_VAR 0 55
38739: PUSH
38740: LD_VAR 0 56
38744: PUSH
38745: LD_VAR 0 57
38749: PUSH
38750: LD_VAR 0 58
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: PUSH
38763: LD_VAR 0 4
38767: PUSH
38768: LD_INT 1
38770: PLUS
38771: ARRAY
38772: ST_TO_ADDR
38773: GO 38882
38775: LD_INT 31
38777: DOUBLE
38778: EQUAL
38779: IFTRUE 38825
38781: LD_INT 32
38783: DOUBLE
38784: EQUAL
38785: IFTRUE 38825
38787: LD_INT 33
38789: DOUBLE
38790: EQUAL
38791: IFTRUE 38825
38793: LD_INT 27
38795: DOUBLE
38796: EQUAL
38797: IFTRUE 38825
38799: LD_INT 26
38801: DOUBLE
38802: EQUAL
38803: IFTRUE 38825
38805: LD_INT 28
38807: DOUBLE
38808: EQUAL
38809: IFTRUE 38825
38811: LD_INT 29
38813: DOUBLE
38814: EQUAL
38815: IFTRUE 38825
38817: LD_INT 30
38819: DOUBLE
38820: EQUAL
38821: IFTRUE 38825
38823: GO 38881
38825: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38826: LD_ADDR_VAR 0 9
38830: PUSH
38831: LD_VAR 0 59
38835: PUSH
38836: LD_VAR 0 60
38840: PUSH
38841: LD_VAR 0 61
38845: PUSH
38846: LD_VAR 0 62
38850: PUSH
38851: LD_VAR 0 63
38855: PUSH
38856: LD_VAR 0 64
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: PUSH
38869: LD_VAR 0 4
38873: PUSH
38874: LD_INT 1
38876: PLUS
38877: ARRAY
38878: ST_TO_ADDR
38879: GO 38882
38881: POP
// temp_list2 = [ ] ;
38882: LD_ADDR_VAR 0 10
38886: PUSH
38887: EMPTY
38888: ST_TO_ADDR
// for i in temp_list do
38889: LD_ADDR_VAR 0 8
38893: PUSH
38894: LD_VAR 0 9
38898: PUSH
38899: FOR_IN
38900: IFFALSE 38952
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
38902: LD_ADDR_VAR 0 10
38906: PUSH
38907: LD_VAR 0 10
38911: PUSH
38912: LD_VAR 0 8
38916: PUSH
38917: LD_INT 1
38919: ARRAY
38920: PUSH
38921: LD_VAR 0 2
38925: PLUS
38926: PUSH
38927: LD_VAR 0 8
38931: PUSH
38932: LD_INT 2
38934: ARRAY
38935: PUSH
38936: LD_VAR 0 3
38940: PLUS
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: EMPTY
38947: LIST
38948: ADD
38949: ST_TO_ADDR
38950: GO 38899
38952: POP
38953: POP
// result = temp_list2 ;
38954: LD_ADDR_VAR 0 7
38958: PUSH
38959: LD_VAR 0 10
38963: ST_TO_ADDR
// end ;
38964: LD_VAR 0 7
38968: RET
// export function EnemyInRange ( unit , dist ) ; begin
38969: LD_INT 0
38971: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
38972: LD_ADDR_VAR 0 3
38976: PUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL_OW 255
38986: PPUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 250
38996: PPUSH
38997: LD_VAR 0 1
39001: PPUSH
39002: CALL_OW 251
39006: PPUSH
39007: LD_VAR 0 2
39011: PPUSH
39012: CALL 12371 0 4
39016: PUSH
39017: LD_INT 4
39019: ARRAY
39020: ST_TO_ADDR
// end ;
39021: LD_VAR 0 3
39025: RET
// export function PlayerSeeMe ( unit ) ; begin
39026: LD_INT 0
39028: PPUSH
// result := See ( your_side , unit ) ;
39029: LD_ADDR_VAR 0 2
39033: PUSH
39034: LD_OWVAR 2
39038: PPUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 292
39048: ST_TO_ADDR
// end ;
39049: LD_VAR 0 2
39053: RET
// export function ReverseDir ( unit ) ; begin
39054: LD_INT 0
39056: PPUSH
// if not unit then
39057: LD_VAR 0 1
39061: NOT
39062: IFFALSE 39066
// exit ;
39064: GO 39089
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39066: LD_ADDR_VAR 0 2
39070: PUSH
39071: LD_VAR 0 1
39075: PPUSH
39076: CALL_OW 254
39080: PUSH
39081: LD_INT 3
39083: PLUS
39084: PUSH
39085: LD_INT 6
39087: MOD
39088: ST_TO_ADDR
// end ;
39089: LD_VAR 0 2
39093: RET
// export function ReverseArray ( array ) ; var i ; begin
39094: LD_INT 0
39096: PPUSH
39097: PPUSH
// if not array then
39098: LD_VAR 0 1
39102: NOT
39103: IFFALSE 39107
// exit ;
39105: GO 39162
// result := [ ] ;
39107: LD_ADDR_VAR 0 2
39111: PUSH
39112: EMPTY
39113: ST_TO_ADDR
// for i := array downto 1 do
39114: LD_ADDR_VAR 0 3
39118: PUSH
39119: DOUBLE
39120: LD_VAR 0 1
39124: INC
39125: ST_TO_ADDR
39126: LD_INT 1
39128: PUSH
39129: FOR_DOWNTO
39130: IFFALSE 39160
// result := Join ( result , array [ i ] ) ;
39132: LD_ADDR_VAR 0 2
39136: PUSH
39137: LD_VAR 0 2
39141: PPUSH
39142: LD_VAR 0 1
39146: PUSH
39147: LD_VAR 0 3
39151: ARRAY
39152: PPUSH
39153: CALL 43806 0 2
39157: ST_TO_ADDR
39158: GO 39129
39160: POP
39161: POP
// end ;
39162: LD_VAR 0 2
39166: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39167: LD_INT 0
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
// if not unit or not hexes then
39175: LD_VAR 0 1
39179: NOT
39180: PUSH
39181: LD_VAR 0 2
39185: NOT
39186: OR
39187: IFFALSE 39191
// exit ;
39189: GO 39314
// dist := 9999 ;
39191: LD_ADDR_VAR 0 5
39195: PUSH
39196: LD_INT 9999
39198: ST_TO_ADDR
// for i = 1 to hexes do
39199: LD_ADDR_VAR 0 4
39203: PUSH
39204: DOUBLE
39205: LD_INT 1
39207: DEC
39208: ST_TO_ADDR
39209: LD_VAR 0 2
39213: PUSH
39214: FOR_TO
39215: IFFALSE 39302
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39217: LD_ADDR_VAR 0 6
39221: PUSH
39222: LD_VAR 0 1
39226: PPUSH
39227: LD_VAR 0 2
39231: PUSH
39232: LD_VAR 0 4
39236: ARRAY
39237: PUSH
39238: LD_INT 1
39240: ARRAY
39241: PPUSH
39242: LD_VAR 0 2
39246: PUSH
39247: LD_VAR 0 4
39251: ARRAY
39252: PUSH
39253: LD_INT 2
39255: ARRAY
39256: PPUSH
39257: CALL_OW 297
39261: ST_TO_ADDR
// if tdist < dist then
39262: LD_VAR 0 6
39266: PUSH
39267: LD_VAR 0 5
39271: LESS
39272: IFFALSE 39300
// begin hex := hexes [ i ] ;
39274: LD_ADDR_VAR 0 8
39278: PUSH
39279: LD_VAR 0 2
39283: PUSH
39284: LD_VAR 0 4
39288: ARRAY
39289: ST_TO_ADDR
// dist := tdist ;
39290: LD_ADDR_VAR 0 5
39294: PUSH
39295: LD_VAR 0 6
39299: ST_TO_ADDR
// end ; end ;
39300: GO 39214
39302: POP
39303: POP
// result := hex ;
39304: LD_ADDR_VAR 0 3
39308: PUSH
39309: LD_VAR 0 8
39313: ST_TO_ADDR
// end ;
39314: LD_VAR 0 3
39318: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39319: LD_INT 0
39321: PPUSH
39322: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39323: LD_VAR 0 1
39327: NOT
39328: PUSH
39329: LD_VAR 0 1
39333: PUSH
39334: LD_INT 21
39336: PUSH
39337: LD_INT 2
39339: PUSH
39340: EMPTY
39341: LIST
39342: LIST
39343: PUSH
39344: LD_INT 23
39346: PUSH
39347: LD_INT 2
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PPUSH
39358: CALL_OW 69
39362: IN
39363: NOT
39364: OR
39365: IFFALSE 39369
// exit ;
39367: GO 39416
// for i = 1 to 3 do
39369: LD_ADDR_VAR 0 3
39373: PUSH
39374: DOUBLE
39375: LD_INT 1
39377: DEC
39378: ST_TO_ADDR
39379: LD_INT 3
39381: PUSH
39382: FOR_TO
39383: IFFALSE 39414
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39385: LD_VAR 0 1
39389: PPUSH
39390: CALL_OW 250
39394: PPUSH
39395: LD_VAR 0 1
39399: PPUSH
39400: CALL_OW 251
39404: PPUSH
39405: LD_INT 1
39407: PPUSH
39408: CALL_OW 453
39412: GO 39382
39414: POP
39415: POP
// end ;
39416: LD_VAR 0 2
39420: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39421: LD_INT 0
39423: PPUSH
39424: PPUSH
39425: PPUSH
39426: PPUSH
39427: PPUSH
39428: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39429: LD_VAR 0 1
39433: NOT
39434: PUSH
39435: LD_VAR 0 2
39439: NOT
39440: OR
39441: PUSH
39442: LD_VAR 0 1
39446: PPUSH
39447: CALL_OW 314
39451: OR
39452: IFFALSE 39456
// exit ;
39454: GO 39923
// if GetLives ( i ) < 250 then
39456: LD_VAR 0 4
39460: PPUSH
39461: CALL_OW 256
39465: PUSH
39466: LD_INT 250
39468: LESS
39469: IFFALSE 39482
// begin ComAutodestruct ( i ) ;
39471: LD_VAR 0 4
39475: PPUSH
39476: CALL 39319 0 1
// exit ;
39480: GO 39923
// end ; x := GetX ( enemy_unit ) ;
39482: LD_ADDR_VAR 0 7
39486: PUSH
39487: LD_VAR 0 2
39491: PPUSH
39492: CALL_OW 250
39496: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39497: LD_ADDR_VAR 0 8
39501: PUSH
39502: LD_VAR 0 2
39506: PPUSH
39507: CALL_OW 251
39511: ST_TO_ADDR
// if not x or not y then
39512: LD_VAR 0 7
39516: NOT
39517: PUSH
39518: LD_VAR 0 8
39522: NOT
39523: OR
39524: IFFALSE 39528
// exit ;
39526: GO 39923
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39528: LD_ADDR_VAR 0 6
39532: PUSH
39533: LD_VAR 0 7
39537: PPUSH
39538: LD_INT 0
39540: PPUSH
39541: LD_INT 4
39543: PPUSH
39544: CALL_OW 272
39548: PUSH
39549: LD_VAR 0 8
39553: PPUSH
39554: LD_INT 0
39556: PPUSH
39557: LD_INT 4
39559: PPUSH
39560: CALL_OW 273
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_VAR 0 7
39573: PPUSH
39574: LD_INT 1
39576: PPUSH
39577: LD_INT 4
39579: PPUSH
39580: CALL_OW 272
39584: PUSH
39585: LD_VAR 0 8
39589: PPUSH
39590: LD_INT 1
39592: PPUSH
39593: LD_INT 4
39595: PPUSH
39596: CALL_OW 273
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_VAR 0 7
39609: PPUSH
39610: LD_INT 2
39612: PPUSH
39613: LD_INT 4
39615: PPUSH
39616: CALL_OW 272
39620: PUSH
39621: LD_VAR 0 8
39625: PPUSH
39626: LD_INT 2
39628: PPUSH
39629: LD_INT 4
39631: PPUSH
39632: CALL_OW 273
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_VAR 0 7
39645: PPUSH
39646: LD_INT 3
39648: PPUSH
39649: LD_INT 4
39651: PPUSH
39652: CALL_OW 272
39656: PUSH
39657: LD_VAR 0 8
39661: PPUSH
39662: LD_INT 3
39664: PPUSH
39665: LD_INT 4
39667: PPUSH
39668: CALL_OW 273
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_VAR 0 7
39681: PPUSH
39682: LD_INT 4
39684: PPUSH
39685: LD_INT 4
39687: PPUSH
39688: CALL_OW 272
39692: PUSH
39693: LD_VAR 0 8
39697: PPUSH
39698: LD_INT 4
39700: PPUSH
39701: LD_INT 4
39703: PPUSH
39704: CALL_OW 273
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_VAR 0 7
39717: PPUSH
39718: LD_INT 5
39720: PPUSH
39721: LD_INT 4
39723: PPUSH
39724: CALL_OW 272
39728: PUSH
39729: LD_VAR 0 8
39733: PPUSH
39734: LD_INT 5
39736: PPUSH
39737: LD_INT 4
39739: PPUSH
39740: CALL_OW 273
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: ST_TO_ADDR
// for i = tmp downto 1 do
39757: LD_ADDR_VAR 0 4
39761: PUSH
39762: DOUBLE
39763: LD_VAR 0 6
39767: INC
39768: ST_TO_ADDR
39769: LD_INT 1
39771: PUSH
39772: FOR_DOWNTO
39773: IFFALSE 39874
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
39775: LD_VAR 0 6
39779: PUSH
39780: LD_VAR 0 4
39784: ARRAY
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: LD_VAR 0 6
39794: PUSH
39795: LD_VAR 0 4
39799: ARRAY
39800: PUSH
39801: LD_INT 2
39803: ARRAY
39804: PPUSH
39805: CALL_OW 488
39809: NOT
39810: PUSH
39811: LD_VAR 0 6
39815: PUSH
39816: LD_VAR 0 4
39820: ARRAY
39821: PUSH
39822: LD_INT 1
39824: ARRAY
39825: PPUSH
39826: LD_VAR 0 6
39830: PUSH
39831: LD_VAR 0 4
39835: ARRAY
39836: PUSH
39837: LD_INT 2
39839: ARRAY
39840: PPUSH
39841: CALL_OW 428
39845: PUSH
39846: LD_INT 0
39848: NONEQUAL
39849: OR
39850: IFFALSE 39872
// tmp := Delete ( tmp , i ) ;
39852: LD_ADDR_VAR 0 6
39856: PUSH
39857: LD_VAR 0 6
39861: PPUSH
39862: LD_VAR 0 4
39866: PPUSH
39867: CALL_OW 3
39871: ST_TO_ADDR
39872: GO 39772
39874: POP
39875: POP
// j := GetClosestHex ( unit , tmp ) ;
39876: LD_ADDR_VAR 0 5
39880: PUSH
39881: LD_VAR 0 1
39885: PPUSH
39886: LD_VAR 0 6
39890: PPUSH
39891: CALL 39167 0 2
39895: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39896: LD_VAR 0 1
39900: PPUSH
39901: LD_VAR 0 5
39905: PUSH
39906: LD_INT 1
39908: ARRAY
39909: PPUSH
39910: LD_VAR 0 5
39914: PUSH
39915: LD_INT 2
39917: ARRAY
39918: PPUSH
39919: CALL_OW 111
// end ;
39923: LD_VAR 0 3
39927: RET
// export function PrepareApemanSoldier ( ) ; begin
39928: LD_INT 0
39930: PPUSH
// uc_nation := 0 ;
39931: LD_ADDR_OWVAR 21
39935: PUSH
39936: LD_INT 0
39938: ST_TO_ADDR
// hc_sex := sex_male ;
39939: LD_ADDR_OWVAR 27
39943: PUSH
39944: LD_INT 1
39946: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
39947: LD_ADDR_OWVAR 28
39951: PUSH
39952: LD_INT 15
39954: ST_TO_ADDR
// hc_gallery :=  ;
39955: LD_ADDR_OWVAR 33
39959: PUSH
39960: LD_STRING 
39962: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
39963: LD_ADDR_OWVAR 31
39967: PUSH
39968: LD_INT 0
39970: PPUSH
39971: LD_INT 3
39973: PPUSH
39974: CALL_OW 12
39978: PUSH
39979: LD_INT 0
39981: PPUSH
39982: LD_INT 3
39984: PPUSH
39985: CALL_OW 12
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: LD_INT 0
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: ST_TO_ADDR
// end ;
40002: LD_VAR 0 1
40006: RET
// export function PrepareApemanEngineer ( ) ; begin
40007: LD_INT 0
40009: PPUSH
// uc_nation := 0 ;
40010: LD_ADDR_OWVAR 21
40014: PUSH
40015: LD_INT 0
40017: ST_TO_ADDR
// hc_sex := sex_male ;
40018: LD_ADDR_OWVAR 27
40022: PUSH
40023: LD_INT 1
40025: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40026: LD_ADDR_OWVAR 28
40030: PUSH
40031: LD_INT 16
40033: ST_TO_ADDR
// hc_gallery :=  ;
40034: LD_ADDR_OWVAR 33
40038: PUSH
40039: LD_STRING 
40041: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40042: LD_ADDR_OWVAR 31
40046: PUSH
40047: LD_INT 0
40049: PPUSH
40050: LD_INT 3
40052: PPUSH
40053: CALL_OW 12
40057: PUSH
40058: LD_INT 0
40060: PPUSH
40061: LD_INT 3
40063: PPUSH
40064: CALL_OW 12
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 0
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: ST_TO_ADDR
// end ;
40081: LD_VAR 0 1
40085: RET
// export function PrepareApeman ( agressivity ) ; begin
40086: LD_INT 0
40088: PPUSH
// uc_side := 0 ;
40089: LD_ADDR_OWVAR 20
40093: PUSH
40094: LD_INT 0
40096: ST_TO_ADDR
// uc_nation := 0 ;
40097: LD_ADDR_OWVAR 21
40101: PUSH
40102: LD_INT 0
40104: ST_TO_ADDR
// hc_sex := sex_male ;
40105: LD_ADDR_OWVAR 27
40109: PUSH
40110: LD_INT 1
40112: ST_TO_ADDR
// hc_class := class_apeman ;
40113: LD_ADDR_OWVAR 28
40117: PUSH
40118: LD_INT 12
40120: ST_TO_ADDR
// hc_gallery :=  ;
40121: LD_ADDR_OWVAR 33
40125: PUSH
40126: LD_STRING 
40128: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40129: LD_ADDR_OWVAR 35
40133: PUSH
40134: LD_VAR 0 1
40138: NEG
40139: PPUSH
40140: LD_VAR 0 1
40144: PPUSH
40145: CALL_OW 12
40149: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40150: LD_ADDR_OWVAR 31
40154: PUSH
40155: LD_INT 0
40157: PPUSH
40158: LD_INT 3
40160: PPUSH
40161: CALL_OW 12
40165: PUSH
40166: LD_INT 0
40168: PPUSH
40169: LD_INT 3
40171: PPUSH
40172: CALL_OW 12
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: ST_TO_ADDR
// end ;
40189: LD_VAR 0 2
40193: RET
// export function PrepareTiger ( agressivity ) ; begin
40194: LD_INT 0
40196: PPUSH
// uc_side := 0 ;
40197: LD_ADDR_OWVAR 20
40201: PUSH
40202: LD_INT 0
40204: ST_TO_ADDR
// uc_nation := 0 ;
40205: LD_ADDR_OWVAR 21
40209: PUSH
40210: LD_INT 0
40212: ST_TO_ADDR
// hc_class := class_tiger ;
40213: LD_ADDR_OWVAR 28
40217: PUSH
40218: LD_INT 14
40220: ST_TO_ADDR
// hc_gallery :=  ;
40221: LD_ADDR_OWVAR 33
40225: PUSH
40226: LD_STRING 
40228: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40229: LD_ADDR_OWVAR 35
40233: PUSH
40234: LD_VAR 0 1
40238: NEG
40239: PPUSH
40240: LD_VAR 0 1
40244: PPUSH
40245: CALL_OW 12
40249: ST_TO_ADDR
// end ;
40250: LD_VAR 0 2
40254: RET
// export function PrepareEnchidna ( ) ; begin
40255: LD_INT 0
40257: PPUSH
// uc_side := 0 ;
40258: LD_ADDR_OWVAR 20
40262: PUSH
40263: LD_INT 0
40265: ST_TO_ADDR
// uc_nation := 0 ;
40266: LD_ADDR_OWVAR 21
40270: PUSH
40271: LD_INT 0
40273: ST_TO_ADDR
// hc_class := class_baggie ;
40274: LD_ADDR_OWVAR 28
40278: PUSH
40279: LD_INT 13
40281: ST_TO_ADDR
// hc_gallery :=  ;
40282: LD_ADDR_OWVAR 33
40286: PUSH
40287: LD_STRING 
40289: ST_TO_ADDR
// end ;
40290: LD_VAR 0 1
40294: RET
// export function PrepareFrog ( ) ; begin
40295: LD_INT 0
40297: PPUSH
// uc_side := 0 ;
40298: LD_ADDR_OWVAR 20
40302: PUSH
40303: LD_INT 0
40305: ST_TO_ADDR
// uc_nation := 0 ;
40306: LD_ADDR_OWVAR 21
40310: PUSH
40311: LD_INT 0
40313: ST_TO_ADDR
// hc_class := class_frog ;
40314: LD_ADDR_OWVAR 28
40318: PUSH
40319: LD_INT 19
40321: ST_TO_ADDR
// hc_gallery :=  ;
40322: LD_ADDR_OWVAR 33
40326: PUSH
40327: LD_STRING 
40329: ST_TO_ADDR
// end ;
40330: LD_VAR 0 1
40334: RET
// export function PrepareFish ( ) ; begin
40335: LD_INT 0
40337: PPUSH
// uc_side := 0 ;
40338: LD_ADDR_OWVAR 20
40342: PUSH
40343: LD_INT 0
40345: ST_TO_ADDR
// uc_nation := 0 ;
40346: LD_ADDR_OWVAR 21
40350: PUSH
40351: LD_INT 0
40353: ST_TO_ADDR
// hc_class := class_fish ;
40354: LD_ADDR_OWVAR 28
40358: PUSH
40359: LD_INT 20
40361: ST_TO_ADDR
// hc_gallery :=  ;
40362: LD_ADDR_OWVAR 33
40366: PUSH
40367: LD_STRING 
40369: ST_TO_ADDR
// end ;
40370: LD_VAR 0 1
40374: RET
// export function PrepareBird ( ) ; begin
40375: LD_INT 0
40377: PPUSH
// uc_side := 0 ;
40378: LD_ADDR_OWVAR 20
40382: PUSH
40383: LD_INT 0
40385: ST_TO_ADDR
// uc_nation := 0 ;
40386: LD_ADDR_OWVAR 21
40390: PUSH
40391: LD_INT 0
40393: ST_TO_ADDR
// hc_class := class_phororhacos ;
40394: LD_ADDR_OWVAR 28
40398: PUSH
40399: LD_INT 18
40401: ST_TO_ADDR
// hc_gallery :=  ;
40402: LD_ADDR_OWVAR 33
40406: PUSH
40407: LD_STRING 
40409: ST_TO_ADDR
// end ;
40410: LD_VAR 0 1
40414: RET
// export function PrepareHorse ( ) ; begin
40415: LD_INT 0
40417: PPUSH
// uc_side := 0 ;
40418: LD_ADDR_OWVAR 20
40422: PUSH
40423: LD_INT 0
40425: ST_TO_ADDR
// uc_nation := 0 ;
40426: LD_ADDR_OWVAR 21
40430: PUSH
40431: LD_INT 0
40433: ST_TO_ADDR
// hc_class := class_horse ;
40434: LD_ADDR_OWVAR 28
40438: PUSH
40439: LD_INT 21
40441: ST_TO_ADDR
// hc_gallery :=  ;
40442: LD_ADDR_OWVAR 33
40446: PUSH
40447: LD_STRING 
40449: ST_TO_ADDR
// end ;
40450: LD_VAR 0 1
40454: RET
// export function PrepareMastodont ( ) ; begin
40455: LD_INT 0
40457: PPUSH
// uc_side := 0 ;
40458: LD_ADDR_OWVAR 20
40462: PUSH
40463: LD_INT 0
40465: ST_TO_ADDR
// uc_nation := 0 ;
40466: LD_ADDR_OWVAR 21
40470: PUSH
40471: LD_INT 0
40473: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40474: LD_ADDR_OWVAR 37
40478: PUSH
40479: LD_INT 31
40481: ST_TO_ADDR
// vc_control := control_rider ;
40482: LD_ADDR_OWVAR 38
40486: PUSH
40487: LD_INT 4
40489: ST_TO_ADDR
// end ;
40490: LD_VAR 0 1
40494: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40495: LD_INT 0
40497: PPUSH
40498: PPUSH
40499: PPUSH
// uc_side = 0 ;
40500: LD_ADDR_OWVAR 20
40504: PUSH
40505: LD_INT 0
40507: ST_TO_ADDR
// uc_nation = 0 ;
40508: LD_ADDR_OWVAR 21
40512: PUSH
40513: LD_INT 0
40515: ST_TO_ADDR
// InitHc_All ( ) ;
40516: CALL_OW 584
// InitVc ;
40520: CALL_OW 20
// if mastodonts then
40524: LD_VAR 0 6
40528: IFFALSE 40595
// for i = 1 to mastodonts do
40530: LD_ADDR_VAR 0 11
40534: PUSH
40535: DOUBLE
40536: LD_INT 1
40538: DEC
40539: ST_TO_ADDR
40540: LD_VAR 0 6
40544: PUSH
40545: FOR_TO
40546: IFFALSE 40593
// begin vc_chassis := 31 ;
40548: LD_ADDR_OWVAR 37
40552: PUSH
40553: LD_INT 31
40555: ST_TO_ADDR
// vc_control := control_rider ;
40556: LD_ADDR_OWVAR 38
40560: PUSH
40561: LD_INT 4
40563: ST_TO_ADDR
// animal := CreateVehicle ;
40564: LD_ADDR_VAR 0 12
40568: PUSH
40569: CALL_OW 45
40573: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40574: LD_VAR 0 12
40578: PPUSH
40579: LD_VAR 0 8
40583: PPUSH
40584: LD_INT 0
40586: PPUSH
40587: CALL 42723 0 3
// end ;
40591: GO 40545
40593: POP
40594: POP
// if horses then
40595: LD_VAR 0 5
40599: IFFALSE 40666
// for i = 1 to horses do
40601: LD_ADDR_VAR 0 11
40605: PUSH
40606: DOUBLE
40607: LD_INT 1
40609: DEC
40610: ST_TO_ADDR
40611: LD_VAR 0 5
40615: PUSH
40616: FOR_TO
40617: IFFALSE 40664
// begin hc_class := 21 ;
40619: LD_ADDR_OWVAR 28
40623: PUSH
40624: LD_INT 21
40626: ST_TO_ADDR
// hc_gallery :=  ;
40627: LD_ADDR_OWVAR 33
40631: PUSH
40632: LD_STRING 
40634: ST_TO_ADDR
// animal := CreateHuman ;
40635: LD_ADDR_VAR 0 12
40639: PUSH
40640: CALL_OW 44
40644: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40645: LD_VAR 0 12
40649: PPUSH
40650: LD_VAR 0 8
40654: PPUSH
40655: LD_INT 0
40657: PPUSH
40658: CALL 42723 0 3
// end ;
40662: GO 40616
40664: POP
40665: POP
// if birds then
40666: LD_VAR 0 1
40670: IFFALSE 40737
// for i = 1 to birds do
40672: LD_ADDR_VAR 0 11
40676: PUSH
40677: DOUBLE
40678: LD_INT 1
40680: DEC
40681: ST_TO_ADDR
40682: LD_VAR 0 1
40686: PUSH
40687: FOR_TO
40688: IFFALSE 40735
// begin hc_class = 18 ;
40690: LD_ADDR_OWVAR 28
40694: PUSH
40695: LD_INT 18
40697: ST_TO_ADDR
// hc_gallery =  ;
40698: LD_ADDR_OWVAR 33
40702: PUSH
40703: LD_STRING 
40705: ST_TO_ADDR
// animal := CreateHuman ;
40706: LD_ADDR_VAR 0 12
40710: PUSH
40711: CALL_OW 44
40715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40716: LD_VAR 0 12
40720: PPUSH
40721: LD_VAR 0 8
40725: PPUSH
40726: LD_INT 0
40728: PPUSH
40729: CALL 42723 0 3
// end ;
40733: GO 40687
40735: POP
40736: POP
// if tigers then
40737: LD_VAR 0 2
40741: IFFALSE 40825
// for i = 1 to tigers do
40743: LD_ADDR_VAR 0 11
40747: PUSH
40748: DOUBLE
40749: LD_INT 1
40751: DEC
40752: ST_TO_ADDR
40753: LD_VAR 0 2
40757: PUSH
40758: FOR_TO
40759: IFFALSE 40823
// begin hc_class = class_tiger ;
40761: LD_ADDR_OWVAR 28
40765: PUSH
40766: LD_INT 14
40768: ST_TO_ADDR
// hc_gallery =  ;
40769: LD_ADDR_OWVAR 33
40773: PUSH
40774: LD_STRING 
40776: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
40777: LD_ADDR_OWVAR 35
40781: PUSH
40782: LD_INT 7
40784: NEG
40785: PPUSH
40786: LD_INT 7
40788: PPUSH
40789: CALL_OW 12
40793: ST_TO_ADDR
// animal := CreateHuman ;
40794: LD_ADDR_VAR 0 12
40798: PUSH
40799: CALL_OW 44
40803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40804: LD_VAR 0 12
40808: PPUSH
40809: LD_VAR 0 8
40813: PPUSH
40814: LD_INT 0
40816: PPUSH
40817: CALL 42723 0 3
// end ;
40821: GO 40758
40823: POP
40824: POP
// if apemans then
40825: LD_VAR 0 3
40829: IFFALSE 40952
// for i = 1 to apemans do
40831: LD_ADDR_VAR 0 11
40835: PUSH
40836: DOUBLE
40837: LD_INT 1
40839: DEC
40840: ST_TO_ADDR
40841: LD_VAR 0 3
40845: PUSH
40846: FOR_TO
40847: IFFALSE 40950
// begin hc_class = class_apeman ;
40849: LD_ADDR_OWVAR 28
40853: PUSH
40854: LD_INT 12
40856: ST_TO_ADDR
// hc_gallery =  ;
40857: LD_ADDR_OWVAR 33
40861: PUSH
40862: LD_STRING 
40864: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
40865: LD_ADDR_OWVAR 35
40869: PUSH
40870: LD_INT 2
40872: NEG
40873: PPUSH
40874: LD_INT 2
40876: PPUSH
40877: CALL_OW 12
40881: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
40882: LD_ADDR_OWVAR 31
40886: PUSH
40887: LD_INT 1
40889: PPUSH
40890: LD_INT 3
40892: PPUSH
40893: CALL_OW 12
40897: PUSH
40898: LD_INT 1
40900: PPUSH
40901: LD_INT 3
40903: PPUSH
40904: CALL_OW 12
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: ST_TO_ADDR
// animal := CreateHuman ;
40921: LD_ADDR_VAR 0 12
40925: PUSH
40926: CALL_OW 44
40930: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40931: LD_VAR 0 12
40935: PPUSH
40936: LD_VAR 0 8
40940: PPUSH
40941: LD_INT 0
40943: PPUSH
40944: CALL 42723 0 3
// end ;
40948: GO 40846
40950: POP
40951: POP
// if enchidnas then
40952: LD_VAR 0 4
40956: IFFALSE 41023
// for i = 1 to enchidnas do
40958: LD_ADDR_VAR 0 11
40962: PUSH
40963: DOUBLE
40964: LD_INT 1
40966: DEC
40967: ST_TO_ADDR
40968: LD_VAR 0 4
40972: PUSH
40973: FOR_TO
40974: IFFALSE 41021
// begin hc_class = 13 ;
40976: LD_ADDR_OWVAR 28
40980: PUSH
40981: LD_INT 13
40983: ST_TO_ADDR
// hc_gallery =  ;
40984: LD_ADDR_OWVAR 33
40988: PUSH
40989: LD_STRING 
40991: ST_TO_ADDR
// animal := CreateHuman ;
40992: LD_ADDR_VAR 0 12
40996: PUSH
40997: CALL_OW 44
41001: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41002: LD_VAR 0 12
41006: PPUSH
41007: LD_VAR 0 8
41011: PPUSH
41012: LD_INT 0
41014: PPUSH
41015: CALL 42723 0 3
// end ;
41019: GO 40973
41021: POP
41022: POP
// if fishes then
41023: LD_VAR 0 7
41027: IFFALSE 41094
// for i = 1 to fishes do
41029: LD_ADDR_VAR 0 11
41033: PUSH
41034: DOUBLE
41035: LD_INT 1
41037: DEC
41038: ST_TO_ADDR
41039: LD_VAR 0 7
41043: PUSH
41044: FOR_TO
41045: IFFALSE 41092
// begin hc_class = 20 ;
41047: LD_ADDR_OWVAR 28
41051: PUSH
41052: LD_INT 20
41054: ST_TO_ADDR
// hc_gallery =  ;
41055: LD_ADDR_OWVAR 33
41059: PUSH
41060: LD_STRING 
41062: ST_TO_ADDR
// animal := CreateHuman ;
41063: LD_ADDR_VAR 0 12
41067: PUSH
41068: CALL_OW 44
41072: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41073: LD_VAR 0 12
41077: PPUSH
41078: LD_VAR 0 9
41082: PPUSH
41083: LD_INT 0
41085: PPUSH
41086: CALL 42723 0 3
// end ;
41090: GO 41044
41092: POP
41093: POP
// end ;
41094: LD_VAR 0 10
41098: RET
// export function WantHeal ( sci , unit ) ; begin
41099: LD_INT 0
41101: PPUSH
// if GetTaskList ( sci ) > 0 then
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 437
41111: PUSH
41112: LD_INT 0
41114: GREATER
41115: IFFALSE 41185
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 437
41126: PUSH
41127: LD_INT 1
41129: ARRAY
41130: PUSH
41131: LD_INT 1
41133: ARRAY
41134: PUSH
41135: LD_STRING l
41137: EQUAL
41138: PUSH
41139: LD_VAR 0 1
41143: PPUSH
41144: CALL_OW 437
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: PUSH
41153: LD_INT 4
41155: ARRAY
41156: PUSH
41157: LD_VAR 0 2
41161: EQUAL
41162: AND
41163: IFFALSE 41175
// result := true else
41165: LD_ADDR_VAR 0 3
41169: PUSH
41170: LD_INT 1
41172: ST_TO_ADDR
41173: GO 41183
// result := false ;
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_INT 0
41182: ST_TO_ADDR
// end else
41183: GO 41193
// result := false ;
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: LD_INT 0
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 3
41197: RET
// export function HealTarget ( sci ) ; begin
41198: LD_INT 0
41200: PPUSH
// if not sci then
41201: LD_VAR 0 1
41205: NOT
41206: IFFALSE 41210
// exit ;
41208: GO 41275
// result := 0 ;
41210: LD_ADDR_VAR 0 2
41214: PUSH
41215: LD_INT 0
41217: ST_TO_ADDR
// if GetTaskList ( sci ) then
41218: LD_VAR 0 1
41222: PPUSH
41223: CALL_OW 437
41227: IFFALSE 41275
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41229: LD_VAR 0 1
41233: PPUSH
41234: CALL_OW 437
41238: PUSH
41239: LD_INT 1
41241: ARRAY
41242: PUSH
41243: LD_INT 1
41245: ARRAY
41246: PUSH
41247: LD_STRING l
41249: EQUAL
41250: IFFALSE 41275
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41252: LD_ADDR_VAR 0 2
41256: PUSH
41257: LD_VAR 0 1
41261: PPUSH
41262: CALL_OW 437
41266: PUSH
41267: LD_INT 1
41269: ARRAY
41270: PUSH
41271: LD_INT 4
41273: ARRAY
41274: ST_TO_ADDR
// end ;
41275: LD_VAR 0 2
41279: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
// if not base_units then
41286: LD_VAR 0 1
41290: NOT
41291: IFFALSE 41295
// exit ;
41293: GO 41382
// result := false ;
41295: LD_ADDR_VAR 0 2
41299: PUSH
41300: LD_INT 0
41302: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41303: LD_ADDR_VAR 0 5
41307: PUSH
41308: LD_VAR 0 1
41312: PPUSH
41313: LD_INT 21
41315: PUSH
41316: LD_INT 3
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PPUSH
41323: CALL_OW 72
41327: ST_TO_ADDR
// if not tmp then
41328: LD_VAR 0 5
41332: NOT
41333: IFFALSE 41337
// exit ;
41335: GO 41382
// for i in tmp do
41337: LD_ADDR_VAR 0 3
41341: PUSH
41342: LD_VAR 0 5
41346: PUSH
41347: FOR_IN
41348: IFFALSE 41380
// begin result := EnemyInRange ( i , 22 ) ;
41350: LD_ADDR_VAR 0 2
41354: PUSH
41355: LD_VAR 0 3
41359: PPUSH
41360: LD_INT 22
41362: PPUSH
41363: CALL 38969 0 2
41367: ST_TO_ADDR
// if result then
41368: LD_VAR 0 2
41372: IFFALSE 41378
// exit ;
41374: POP
41375: POP
41376: GO 41382
// end ;
41378: GO 41347
41380: POP
41381: POP
// end ;
41382: LD_VAR 0 2
41386: RET
// export function FilterByTag ( units , tag ) ; begin
41387: LD_INT 0
41389: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41390: LD_ADDR_VAR 0 3
41394: PUSH
41395: LD_VAR 0 1
41399: PPUSH
41400: LD_INT 120
41402: PUSH
41403: LD_VAR 0 2
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PPUSH
41412: CALL_OW 72
41416: ST_TO_ADDR
// end ;
41417: LD_VAR 0 3
41421: RET
// export function IsDriver ( un ) ; begin
41422: LD_INT 0
41424: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41425: LD_ADDR_VAR 0 2
41429: PUSH
41430: LD_VAR 0 1
41434: PUSH
41435: LD_INT 55
41437: PUSH
41438: EMPTY
41439: LIST
41440: PPUSH
41441: CALL_OW 69
41445: IN
41446: ST_TO_ADDR
// end ;
41447: LD_VAR 0 2
41451: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41452: LD_INT 0
41454: PPUSH
41455: PPUSH
// list := [ ] ;
41456: LD_ADDR_VAR 0 5
41460: PUSH
41461: EMPTY
41462: ST_TO_ADDR
// case d of 0 :
41463: LD_VAR 0 3
41467: PUSH
41468: LD_INT 0
41470: DOUBLE
41471: EQUAL
41472: IFTRUE 41476
41474: GO 41609
41476: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41477: LD_ADDR_VAR 0 5
41481: PUSH
41482: LD_VAR 0 1
41486: PUSH
41487: LD_INT 4
41489: MINUS
41490: PUSH
41491: LD_VAR 0 2
41495: PUSH
41496: LD_INT 4
41498: MINUS
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: PUSH
41508: LD_VAR 0 1
41512: PUSH
41513: LD_INT 3
41515: MINUS
41516: PUSH
41517: LD_VAR 0 2
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: LIST
41529: PUSH
41530: LD_VAR 0 1
41534: PUSH
41535: LD_INT 4
41537: PLUS
41538: PUSH
41539: LD_VAR 0 2
41543: PUSH
41544: LD_INT 4
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: LIST
41551: PUSH
41552: LD_VAR 0 1
41556: PUSH
41557: LD_INT 3
41559: PLUS
41560: PUSH
41561: LD_VAR 0 2
41565: PUSH
41566: LD_INT 3
41568: PLUS
41569: PUSH
41570: LD_INT 5
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: LIST
41577: PUSH
41578: LD_VAR 0 1
41582: PUSH
41583: LD_VAR 0 2
41587: PUSH
41588: LD_INT 4
41590: PLUS
41591: PUSH
41592: LD_INT 0
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: LIST
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: ST_TO_ADDR
// end ; 1 :
41607: GO 42307
41609: LD_INT 1
41611: DOUBLE
41612: EQUAL
41613: IFTRUE 41617
41615: GO 41750
41617: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41618: LD_ADDR_VAR 0 5
41622: PUSH
41623: LD_VAR 0 1
41627: PUSH
41628: LD_VAR 0 2
41632: PUSH
41633: LD_INT 4
41635: MINUS
41636: PUSH
41637: LD_INT 3
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: LIST
41644: PUSH
41645: LD_VAR 0 1
41649: PUSH
41650: LD_INT 3
41652: MINUS
41653: PUSH
41654: LD_VAR 0 2
41658: PUSH
41659: LD_INT 3
41661: MINUS
41662: PUSH
41663: LD_INT 2
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: PUSH
41671: LD_VAR 0 1
41675: PUSH
41676: LD_INT 4
41678: MINUS
41679: PUSH
41680: LD_VAR 0 2
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: LIST
41692: PUSH
41693: LD_VAR 0 1
41697: PUSH
41698: LD_VAR 0 2
41702: PUSH
41703: LD_INT 3
41705: PLUS
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: PUSH
41715: LD_VAR 0 1
41719: PUSH
41720: LD_INT 4
41722: PLUS
41723: PUSH
41724: LD_VAR 0 2
41728: PUSH
41729: LD_INT 4
41731: PLUS
41732: PUSH
41733: LD_INT 5
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: ST_TO_ADDR
// end ; 2 :
41748: GO 42307
41750: LD_INT 2
41752: DOUBLE
41753: EQUAL
41754: IFTRUE 41758
41756: GO 41887
41758: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
41759: LD_ADDR_VAR 0 5
41763: PUSH
41764: LD_VAR 0 1
41768: PUSH
41769: LD_VAR 0 2
41773: PUSH
41774: LD_INT 3
41776: MINUS
41777: PUSH
41778: LD_INT 3
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: PUSH
41786: LD_VAR 0 1
41790: PUSH
41791: LD_INT 4
41793: PLUS
41794: PUSH
41795: LD_VAR 0 2
41799: PUSH
41800: LD_INT 4
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: PUSH
41808: LD_VAR 0 1
41812: PUSH
41813: LD_VAR 0 2
41817: PUSH
41818: LD_INT 4
41820: PLUS
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: LIST
41829: PUSH
41830: LD_VAR 0 1
41834: PUSH
41835: LD_INT 3
41837: MINUS
41838: PUSH
41839: LD_VAR 0 2
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: LIST
41851: PUSH
41852: LD_VAR 0 1
41856: PUSH
41857: LD_INT 4
41859: MINUS
41860: PUSH
41861: LD_VAR 0 2
41865: PUSH
41866: LD_INT 4
41868: MINUS
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: LIST
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: ST_TO_ADDR
// end ; 3 :
41885: GO 42307
41887: LD_INT 3
41889: DOUBLE
41890: EQUAL
41891: IFTRUE 41895
41893: GO 42028
41895: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41896: LD_ADDR_VAR 0 5
41900: PUSH
41901: LD_VAR 0 1
41905: PUSH
41906: LD_INT 3
41908: PLUS
41909: PUSH
41910: LD_VAR 0 2
41914: PUSH
41915: LD_INT 4
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: LIST
41922: PUSH
41923: LD_VAR 0 1
41927: PUSH
41928: LD_INT 4
41930: PLUS
41931: PUSH
41932: LD_VAR 0 2
41936: PUSH
41937: LD_INT 4
41939: PLUS
41940: PUSH
41941: LD_INT 5
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: PUSH
41949: LD_VAR 0 1
41953: PUSH
41954: LD_INT 4
41956: MINUS
41957: PUSH
41958: LD_VAR 0 2
41962: PUSH
41963: LD_INT 1
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: PUSH
41971: LD_VAR 0 1
41975: PUSH
41976: LD_VAR 0 2
41980: PUSH
41981: LD_INT 4
41983: MINUS
41984: PUSH
41985: LD_INT 3
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: LIST
41992: PUSH
41993: LD_VAR 0 1
41997: PUSH
41998: LD_INT 3
42000: MINUS
42001: PUSH
42002: LD_VAR 0 2
42006: PUSH
42007: LD_INT 3
42009: MINUS
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: LIST
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// end ; 4 :
42026: GO 42307
42028: LD_INT 4
42030: DOUBLE
42031: EQUAL
42032: IFTRUE 42036
42034: GO 42169
42036: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42037: LD_ADDR_VAR 0 5
42041: PUSH
42042: LD_VAR 0 1
42046: PUSH
42047: LD_VAR 0 2
42051: PUSH
42052: LD_INT 4
42054: PLUS
42055: PUSH
42056: LD_INT 0
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: PUSH
42064: LD_VAR 0 1
42068: PUSH
42069: LD_INT 3
42071: PLUS
42072: PUSH
42073: LD_VAR 0 2
42077: PUSH
42078: LD_INT 3
42080: PLUS
42081: PUSH
42082: LD_INT 5
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: PUSH
42090: LD_VAR 0 1
42094: PUSH
42095: LD_INT 4
42097: PLUS
42098: PUSH
42099: LD_VAR 0 2
42103: PUSH
42104: LD_INT 4
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: PUSH
42112: LD_VAR 0 1
42116: PUSH
42117: LD_VAR 0 2
42121: PUSH
42122: LD_INT 3
42124: MINUS
42125: PUSH
42126: LD_INT 3
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: LIST
42133: PUSH
42134: LD_VAR 0 1
42138: PUSH
42139: LD_INT 4
42141: MINUS
42142: PUSH
42143: LD_VAR 0 2
42147: PUSH
42148: LD_INT 4
42150: MINUS
42151: PUSH
42152: LD_INT 2
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: ST_TO_ADDR
// end ; 5 :
42167: GO 42307
42169: LD_INT 5
42171: DOUBLE
42172: EQUAL
42173: IFTRUE 42177
42175: GO 42306
42177: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42178: LD_ADDR_VAR 0 5
42182: PUSH
42183: LD_VAR 0 1
42187: PUSH
42188: LD_INT 4
42190: MINUS
42191: PUSH
42192: LD_VAR 0 2
42196: PUSH
42197: LD_INT 1
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: LIST
42204: PUSH
42205: LD_VAR 0 1
42209: PUSH
42210: LD_VAR 0 2
42214: PUSH
42215: LD_INT 4
42217: MINUS
42218: PUSH
42219: LD_INT 3
42221: PUSH
42222: EMPTY
42223: LIST
42224: LIST
42225: LIST
42226: PUSH
42227: LD_VAR 0 1
42231: PUSH
42232: LD_INT 4
42234: PLUS
42235: PUSH
42236: LD_VAR 0 2
42240: PUSH
42241: LD_INT 4
42243: PLUS
42244: PUSH
42245: LD_INT 5
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: LIST
42252: PUSH
42253: LD_VAR 0 1
42257: PUSH
42258: LD_INT 3
42260: PLUS
42261: PUSH
42262: LD_VAR 0 2
42266: PUSH
42267: LD_INT 4
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: LIST
42274: PUSH
42275: LD_VAR 0 1
42279: PUSH
42280: LD_VAR 0 2
42284: PUSH
42285: LD_INT 3
42287: PLUS
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// end ; end ;
42304: GO 42307
42306: POP
// result := list ;
42307: LD_ADDR_VAR 0 4
42311: PUSH
42312: LD_VAR 0 5
42316: ST_TO_ADDR
// end ;
42317: LD_VAR 0 4
42321: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42322: LD_INT 0
42324: PPUSH
42325: PPUSH
42326: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42327: LD_VAR 0 1
42331: NOT
42332: PUSH
42333: LD_VAR 0 2
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: LD_INT 3
42346: PUSH
42347: LD_INT 4
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: IN
42356: NOT
42357: OR
42358: IFFALSE 42362
// exit ;
42360: GO 42445
// tmp := [ ] ;
42362: LD_ADDR_VAR 0 5
42366: PUSH
42367: EMPTY
42368: ST_TO_ADDR
// for i in units do
42369: LD_ADDR_VAR 0 4
42373: PUSH
42374: LD_VAR 0 1
42378: PUSH
42379: FOR_IN
42380: IFFALSE 42414
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
42382: LD_ADDR_VAR 0 5
42386: PUSH
42387: LD_VAR 0 5
42391: PPUSH
42392: LD_VAR 0 4
42396: PPUSH
42397: LD_VAR 0 2
42401: PPUSH
42402: CALL_OW 259
42406: PPUSH
42407: CALL 43806 0 2
42411: ST_TO_ADDR
42412: GO 42379
42414: POP
42415: POP
// if not tmp then
42416: LD_VAR 0 5
42420: NOT
42421: IFFALSE 42425
// exit ;
42423: GO 42445
// result := SortListByListDesc ( units , tmp ) ;
42425: LD_ADDR_VAR 0 3
42429: PUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: LD_VAR 0 5
42439: PPUSH
42440: CALL_OW 77
42444: ST_TO_ADDR
// end ;
42445: LD_VAR 0 3
42449: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42450: LD_INT 0
42452: PPUSH
42453: PPUSH
42454: PPUSH
// result := false ;
42455: LD_ADDR_VAR 0 3
42459: PUSH
42460: LD_INT 0
42462: ST_TO_ADDR
// if not building then
42463: LD_VAR 0 2
42467: NOT
42468: IFFALSE 42472
// exit ;
42470: GO 42610
// x := GetX ( building ) ;
42472: LD_ADDR_VAR 0 4
42476: PUSH
42477: LD_VAR 0 2
42481: PPUSH
42482: CALL_OW 250
42486: ST_TO_ADDR
// y := GetY ( building ) ;
42487: LD_ADDR_VAR 0 5
42491: PUSH
42492: LD_VAR 0 2
42496: PPUSH
42497: CALL_OW 251
42501: ST_TO_ADDR
// if not x or not y then
42502: LD_VAR 0 4
42506: NOT
42507: PUSH
42508: LD_VAR 0 5
42512: NOT
42513: OR
42514: IFFALSE 42518
// exit ;
42516: GO 42610
// if GetTaskList ( unit ) then
42518: LD_VAR 0 1
42522: PPUSH
42523: CALL_OW 437
42527: IFFALSE 42610
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42529: LD_STRING e
42531: PUSH
42532: LD_VAR 0 1
42536: PPUSH
42537: CALL_OW 437
42541: PUSH
42542: LD_INT 1
42544: ARRAY
42545: PUSH
42546: LD_INT 1
42548: ARRAY
42549: EQUAL
42550: PUSH
42551: LD_VAR 0 4
42555: PUSH
42556: LD_VAR 0 1
42560: PPUSH
42561: CALL_OW 437
42565: PUSH
42566: LD_INT 1
42568: ARRAY
42569: PUSH
42570: LD_INT 2
42572: ARRAY
42573: EQUAL
42574: AND
42575: PUSH
42576: LD_VAR 0 5
42580: PUSH
42581: LD_VAR 0 1
42585: PPUSH
42586: CALL_OW 437
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PUSH
42595: LD_INT 3
42597: ARRAY
42598: EQUAL
42599: AND
42600: IFFALSE 42610
// result := true end ;
42602: LD_ADDR_VAR 0 3
42606: PUSH
42607: LD_INT 1
42609: ST_TO_ADDR
// end ;
42610: LD_VAR 0 3
42614: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42615: LD_INT 0
42617: PPUSH
// result := false ;
42618: LD_ADDR_VAR 0 4
42622: PUSH
42623: LD_INT 0
42625: ST_TO_ADDR
// if GetTaskList ( unit ) then
42626: LD_VAR 0 1
42630: PPUSH
42631: CALL_OW 437
42635: IFFALSE 42718
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42637: LD_STRING M
42639: PUSH
42640: LD_VAR 0 1
42644: PPUSH
42645: CALL_OW 437
42649: PUSH
42650: LD_INT 1
42652: ARRAY
42653: PUSH
42654: LD_INT 1
42656: ARRAY
42657: EQUAL
42658: PUSH
42659: LD_VAR 0 2
42663: PUSH
42664: LD_VAR 0 1
42668: PPUSH
42669: CALL_OW 437
42673: PUSH
42674: LD_INT 1
42676: ARRAY
42677: PUSH
42678: LD_INT 2
42680: ARRAY
42681: EQUAL
42682: AND
42683: PUSH
42684: LD_VAR 0 3
42688: PUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 437
42698: PUSH
42699: LD_INT 1
42701: ARRAY
42702: PUSH
42703: LD_INT 3
42705: ARRAY
42706: EQUAL
42707: AND
42708: IFFALSE 42718
// result := true ;
42710: LD_ADDR_VAR 0 4
42714: PUSH
42715: LD_INT 1
42717: ST_TO_ADDR
// end ; end ;
42718: LD_VAR 0 4
42722: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
42723: LD_INT 0
42725: PPUSH
42726: PPUSH
42727: PPUSH
42728: PPUSH
// if not unit or not area then
42729: LD_VAR 0 1
42733: NOT
42734: PUSH
42735: LD_VAR 0 2
42739: NOT
42740: OR
42741: IFFALSE 42745
// exit ;
42743: GO 42909
// tmp := AreaToList ( area , i ) ;
42745: LD_ADDR_VAR 0 6
42749: PUSH
42750: LD_VAR 0 2
42754: PPUSH
42755: LD_VAR 0 5
42759: PPUSH
42760: CALL_OW 517
42764: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
42765: LD_ADDR_VAR 0 5
42769: PUSH
42770: DOUBLE
42771: LD_INT 1
42773: DEC
42774: ST_TO_ADDR
42775: LD_VAR 0 6
42779: PUSH
42780: LD_INT 1
42782: ARRAY
42783: PUSH
42784: FOR_TO
42785: IFFALSE 42907
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
42787: LD_ADDR_VAR 0 7
42791: PUSH
42792: LD_VAR 0 6
42796: PUSH
42797: LD_INT 1
42799: ARRAY
42800: PUSH
42801: LD_VAR 0 5
42805: ARRAY
42806: PUSH
42807: LD_VAR 0 6
42811: PUSH
42812: LD_INT 2
42814: ARRAY
42815: PUSH
42816: LD_VAR 0 5
42820: ARRAY
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
42826: LD_VAR 0 7
42830: PUSH
42831: LD_INT 1
42833: ARRAY
42834: PPUSH
42835: LD_VAR 0 7
42839: PUSH
42840: LD_INT 2
42842: ARRAY
42843: PPUSH
42844: CALL_OW 428
42848: PUSH
42849: LD_INT 0
42851: EQUAL
42852: IFFALSE 42905
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
42854: LD_VAR 0 1
42858: PPUSH
42859: LD_VAR 0 7
42863: PUSH
42864: LD_INT 1
42866: ARRAY
42867: PPUSH
42868: LD_VAR 0 7
42872: PUSH
42873: LD_INT 2
42875: ARRAY
42876: PPUSH
42877: LD_VAR 0 3
42881: PPUSH
42882: CALL_OW 48
// result := IsPlaced ( unit ) ;
42886: LD_ADDR_VAR 0 4
42890: PUSH
42891: LD_VAR 0 1
42895: PPUSH
42896: CALL_OW 305
42900: ST_TO_ADDR
// exit ;
42901: POP
42902: POP
42903: GO 42909
// end ; end ;
42905: GO 42784
42907: POP
42908: POP
// end ;
42909: LD_VAR 0 4
42913: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42914: LD_INT 0
42916: PPUSH
42917: PPUSH
42918: PPUSH
// if not side or side > 8 then
42919: LD_VAR 0 1
42923: NOT
42924: PUSH
42925: LD_VAR 0 1
42929: PUSH
42930: LD_INT 8
42932: GREATER
42933: OR
42934: IFFALSE 42938
// exit ;
42936: GO 43125
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42938: LD_ADDR_VAR 0 4
42942: PUSH
42943: LD_INT 22
42945: PUSH
42946: LD_VAR 0 1
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 21
42957: PUSH
42958: LD_INT 3
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PPUSH
42969: CALL_OW 69
42973: ST_TO_ADDR
// if not tmp then
42974: LD_VAR 0 4
42978: NOT
42979: IFFALSE 42983
// exit ;
42981: GO 43125
// enable_addtolog := true ;
42983: LD_ADDR_OWVAR 81
42987: PUSH
42988: LD_INT 1
42990: ST_TO_ADDR
// AddToLog ( [ ) ;
42991: LD_STRING [
42993: PPUSH
42994: CALL_OW 561
// for i in tmp do
42998: LD_ADDR_VAR 0 3
43002: PUSH
43003: LD_VAR 0 4
43007: PUSH
43008: FOR_IN
43009: IFFALSE 43116
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43011: LD_STRING [
43013: PUSH
43014: LD_VAR 0 3
43018: PPUSH
43019: CALL_OW 266
43023: STR
43024: PUSH
43025: LD_STRING , 
43027: STR
43028: PUSH
43029: LD_VAR 0 3
43033: PPUSH
43034: CALL_OW 250
43038: STR
43039: PUSH
43040: LD_STRING , 
43042: STR
43043: PUSH
43044: LD_VAR 0 3
43048: PPUSH
43049: CALL_OW 251
43053: STR
43054: PUSH
43055: LD_STRING , 
43057: STR
43058: PUSH
43059: LD_VAR 0 3
43063: PPUSH
43064: CALL_OW 254
43068: STR
43069: PUSH
43070: LD_STRING , 
43072: STR
43073: PUSH
43074: LD_VAR 0 3
43078: PPUSH
43079: LD_INT 1
43081: PPUSH
43082: CALL_OW 268
43086: STR
43087: PUSH
43088: LD_STRING , 
43090: STR
43091: PUSH
43092: LD_VAR 0 3
43096: PPUSH
43097: LD_INT 2
43099: PPUSH
43100: CALL_OW 268
43104: STR
43105: PUSH
43106: LD_STRING ],
43108: STR
43109: PPUSH
43110: CALL_OW 561
// end ;
43114: GO 43008
43116: POP
43117: POP
// AddToLog ( ]; ) ;
43118: LD_STRING ];
43120: PPUSH
43121: CALL_OW 561
// end ;
43125: LD_VAR 0 2
43129: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43130: LD_INT 0
43132: PPUSH
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
// if not area or not rate or not max then
43137: LD_VAR 0 1
43141: NOT
43142: PUSH
43143: LD_VAR 0 2
43147: NOT
43148: OR
43149: PUSH
43150: LD_VAR 0 4
43154: NOT
43155: OR
43156: IFFALSE 43160
// exit ;
43158: GO 43349
// while 1 do
43160: LD_INT 1
43162: IFFALSE 43349
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43164: LD_ADDR_VAR 0 9
43168: PUSH
43169: LD_VAR 0 1
43173: PPUSH
43174: LD_INT 1
43176: PPUSH
43177: CALL_OW 287
43181: PUSH
43182: LD_INT 10
43184: MUL
43185: ST_TO_ADDR
// r := rate / 10 ;
43186: LD_ADDR_VAR 0 7
43190: PUSH
43191: LD_VAR 0 2
43195: PUSH
43196: LD_INT 10
43198: DIVREAL
43199: ST_TO_ADDR
// time := 1 1$00 ;
43200: LD_ADDR_VAR 0 8
43204: PUSH
43205: LD_INT 2100
43207: ST_TO_ADDR
// if amount < min then
43208: LD_VAR 0 9
43212: PUSH
43213: LD_VAR 0 3
43217: LESS
43218: IFFALSE 43236
// r := r * 2 else
43220: LD_ADDR_VAR 0 7
43224: PUSH
43225: LD_VAR 0 7
43229: PUSH
43230: LD_INT 2
43232: MUL
43233: ST_TO_ADDR
43234: GO 43262
// if amount > max then
43236: LD_VAR 0 9
43240: PUSH
43241: LD_VAR 0 4
43245: GREATER
43246: IFFALSE 43262
// r := r / 2 ;
43248: LD_ADDR_VAR 0 7
43252: PUSH
43253: LD_VAR 0 7
43257: PUSH
43258: LD_INT 2
43260: DIVREAL
43261: ST_TO_ADDR
// time := time / r ;
43262: LD_ADDR_VAR 0 8
43266: PUSH
43267: LD_VAR 0 8
43271: PUSH
43272: LD_VAR 0 7
43276: DIVREAL
43277: ST_TO_ADDR
// if time < 0 then
43278: LD_VAR 0 8
43282: PUSH
43283: LD_INT 0
43285: LESS
43286: IFFALSE 43303
// time := time * - 1 ;
43288: LD_ADDR_VAR 0 8
43292: PUSH
43293: LD_VAR 0 8
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: MUL
43302: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43303: LD_VAR 0 8
43307: PUSH
43308: LD_INT 35
43310: PPUSH
43311: LD_INT 875
43313: PPUSH
43314: CALL_OW 12
43318: PLUS
43319: PPUSH
43320: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43324: LD_INT 1
43326: PPUSH
43327: LD_INT 5
43329: PPUSH
43330: CALL_OW 12
43334: PPUSH
43335: LD_VAR 0 1
43339: PPUSH
43340: LD_INT 1
43342: PPUSH
43343: CALL_OW 55
// end ;
43347: GO 43160
// end ;
43349: LD_VAR 0 5
43353: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43354: LD_INT 0
43356: PPUSH
43357: PPUSH
43358: PPUSH
43359: PPUSH
43360: PPUSH
43361: PPUSH
43362: PPUSH
43363: PPUSH
// if not turrets or not factories then
43364: LD_VAR 0 1
43368: NOT
43369: PUSH
43370: LD_VAR 0 2
43374: NOT
43375: OR
43376: IFFALSE 43380
// exit ;
43378: GO 43687
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43380: LD_ADDR_VAR 0 10
43384: PUSH
43385: LD_INT 5
43387: PUSH
43388: LD_INT 6
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 2
43397: PUSH
43398: LD_INT 4
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 5
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 24
43422: PUSH
43423: LD_INT 25
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 23
43432: PUSH
43433: LD_INT 27
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 42
43446: PUSH
43447: LD_INT 43
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 44
43456: PUSH
43457: LD_INT 46
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 45
43466: PUSH
43467: LD_INT 47
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: LIST
43483: ST_TO_ADDR
// result := [ ] ;
43484: LD_ADDR_VAR 0 3
43488: PUSH
43489: EMPTY
43490: ST_TO_ADDR
// for i in turrets do
43491: LD_ADDR_VAR 0 4
43495: PUSH
43496: LD_VAR 0 1
43500: PUSH
43501: FOR_IN
43502: IFFALSE 43685
// begin nat := GetNation ( i ) ;
43504: LD_ADDR_VAR 0 7
43508: PUSH
43509: LD_VAR 0 4
43513: PPUSH
43514: CALL_OW 248
43518: ST_TO_ADDR
// weapon := 0 ;
43519: LD_ADDR_VAR 0 8
43523: PUSH
43524: LD_INT 0
43526: ST_TO_ADDR
// if not nat then
43527: LD_VAR 0 7
43531: NOT
43532: IFFALSE 43536
// continue ;
43534: GO 43501
// for j in list [ nat ] do
43536: LD_ADDR_VAR 0 5
43540: PUSH
43541: LD_VAR 0 10
43545: PUSH
43546: LD_VAR 0 7
43550: ARRAY
43551: PUSH
43552: FOR_IN
43553: IFFALSE 43594
// if GetBWeapon ( i ) = j [ 1 ] then
43555: LD_VAR 0 4
43559: PPUSH
43560: CALL_OW 269
43564: PUSH
43565: LD_VAR 0 5
43569: PUSH
43570: LD_INT 1
43572: ARRAY
43573: EQUAL
43574: IFFALSE 43592
// begin weapon := j [ 2 ] ;
43576: LD_ADDR_VAR 0 8
43580: PUSH
43581: LD_VAR 0 5
43585: PUSH
43586: LD_INT 2
43588: ARRAY
43589: ST_TO_ADDR
// break ;
43590: GO 43594
// end ;
43592: GO 43552
43594: POP
43595: POP
// if not weapon then
43596: LD_VAR 0 8
43600: NOT
43601: IFFALSE 43605
// continue ;
43603: GO 43501
// for k in factories do
43605: LD_ADDR_VAR 0 6
43609: PUSH
43610: LD_VAR 0 2
43614: PUSH
43615: FOR_IN
43616: IFFALSE 43681
// begin weapons := AvailableWeaponList ( k ) ;
43618: LD_ADDR_VAR 0 9
43622: PUSH
43623: LD_VAR 0 6
43627: PPUSH
43628: CALL_OW 478
43632: ST_TO_ADDR
// if not weapons then
43633: LD_VAR 0 9
43637: NOT
43638: IFFALSE 43642
// continue ;
43640: GO 43615
// if weapon in weapons then
43642: LD_VAR 0 8
43646: PUSH
43647: LD_VAR 0 9
43651: IN
43652: IFFALSE 43679
// begin result := [ i , weapon ] ;
43654: LD_ADDR_VAR 0 3
43658: PUSH
43659: LD_VAR 0 4
43663: PUSH
43664: LD_VAR 0 8
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: ST_TO_ADDR
// exit ;
43673: POP
43674: POP
43675: POP
43676: POP
43677: GO 43687
// end ; end ;
43679: GO 43615
43681: POP
43682: POP
// end ;
43683: GO 43501
43685: POP
43686: POP
// end ;
43687: LD_VAR 0 3
43691: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
43692: LD_INT 0
43694: PPUSH
// if not side or side > 8 then
43695: LD_VAR 0 3
43699: NOT
43700: PUSH
43701: LD_VAR 0 3
43705: PUSH
43706: LD_INT 8
43708: GREATER
43709: OR
43710: IFFALSE 43714
// exit ;
43712: GO 43773
// if not range then
43714: LD_VAR 0 4
43718: NOT
43719: IFFALSE 43730
// range := - 12 ;
43721: LD_ADDR_VAR 0 4
43725: PUSH
43726: LD_INT 12
43728: NEG
43729: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
43730: LD_VAR 0 1
43734: PPUSH
43735: LD_VAR 0 2
43739: PPUSH
43740: LD_VAR 0 3
43744: PPUSH
43745: LD_VAR 0 4
43749: PPUSH
43750: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
43754: LD_VAR 0 1
43758: PPUSH
43759: LD_VAR 0 2
43763: PPUSH
43764: LD_VAR 0 3
43768: PPUSH
43769: CALL_OW 331
// end ;
43773: LD_VAR 0 5
43777: RET
// export function Video ( mode ) ; begin
43778: LD_INT 0
43780: PPUSH
// ingame_video = mode ;
43781: LD_ADDR_OWVAR 52
43785: PUSH
43786: LD_VAR 0 1
43790: ST_TO_ADDR
// interface_hidden = mode ;
43791: LD_ADDR_OWVAR 54
43795: PUSH
43796: LD_VAR 0 1
43800: ST_TO_ADDR
// end ;
43801: LD_VAR 0 2
43805: RET
// export function Join ( array , element ) ; begin
43806: LD_INT 0
43808: PPUSH
// result := Replace ( array , array + 1 , element ) ;
43809: LD_ADDR_VAR 0 3
43813: PUSH
43814: LD_VAR 0 1
43818: PPUSH
43819: LD_VAR 0 1
43823: PUSH
43824: LD_INT 1
43826: PLUS
43827: PPUSH
43828: LD_VAR 0 2
43832: PPUSH
43833: CALL_OW 1
43837: ST_TO_ADDR
// end ;
43838: LD_VAR 0 3
43842: RET
// export function JoinUnion ( array , element ) ; begin
43843: LD_INT 0
43845: PPUSH
// result := array union element ;
43846: LD_ADDR_VAR 0 3
43850: PUSH
43851: LD_VAR 0 1
43855: PUSH
43856: LD_VAR 0 2
43860: UNION
43861: ST_TO_ADDR
// end ;
43862: LD_VAR 0 3
43866: RET
// export function GetBehemoths ( side ) ; begin
43867: LD_INT 0
43869: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
43870: LD_ADDR_VAR 0 2
43874: PUSH
43875: LD_INT 22
43877: PUSH
43878: LD_VAR 0 1
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 31
43889: PUSH
43890: LD_INT 25
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PPUSH
43901: CALL_OW 69
43905: ST_TO_ADDR
// end ;
43906: LD_VAR 0 2
43910: RET
// export function Shuffle ( array ) ; var i , index ; begin
43911: LD_INT 0
43913: PPUSH
43914: PPUSH
43915: PPUSH
// result := [ ] ;
43916: LD_ADDR_VAR 0 2
43920: PUSH
43921: EMPTY
43922: ST_TO_ADDR
// if not array then
43923: LD_VAR 0 1
43927: NOT
43928: IFFALSE 43932
// exit ;
43930: GO 44031
// Randomize ;
43932: CALL_OW 10
// for i = array downto 1 do
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: DOUBLE
43942: LD_VAR 0 1
43946: INC
43947: ST_TO_ADDR
43948: LD_INT 1
43950: PUSH
43951: FOR_DOWNTO
43952: IFFALSE 44029
// begin index := rand ( 1 , array ) ;
43954: LD_ADDR_VAR 0 4
43958: PUSH
43959: LD_INT 1
43961: PPUSH
43962: LD_VAR 0 1
43966: PPUSH
43967: CALL_OW 12
43971: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
43972: LD_ADDR_VAR 0 2
43976: PUSH
43977: LD_VAR 0 2
43981: PPUSH
43982: LD_VAR 0 2
43986: PUSH
43987: LD_INT 1
43989: PLUS
43990: PPUSH
43991: LD_VAR 0 1
43995: PUSH
43996: LD_VAR 0 4
44000: ARRAY
44001: PPUSH
44002: CALL_OW 2
44006: ST_TO_ADDR
// array := Delete ( array , index ) ;
44007: LD_ADDR_VAR 0 1
44011: PUSH
44012: LD_VAR 0 1
44016: PPUSH
44017: LD_VAR 0 4
44021: PPUSH
44022: CALL_OW 3
44026: ST_TO_ADDR
// end ;
44027: GO 43951
44029: POP
44030: POP
// end ;
44031: LD_VAR 0 2
44035: RET
// export function GetBaseMaterials ( base ) ; begin
44036: LD_INT 0
44038: PPUSH
// result := [ 0 , 0 , 0 ] ;
44039: LD_ADDR_VAR 0 2
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: ST_TO_ADDR
// if not base then
44058: LD_VAR 0 1
44062: NOT
44063: IFFALSE 44067
// exit ;
44065: GO 44116
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44067: LD_ADDR_VAR 0 2
44071: PUSH
44072: LD_VAR 0 1
44076: PPUSH
44077: LD_INT 1
44079: PPUSH
44080: CALL_OW 275
44084: PUSH
44085: LD_VAR 0 1
44089: PPUSH
44090: LD_INT 2
44092: PPUSH
44093: CALL_OW 275
44097: PUSH
44098: LD_VAR 0 1
44102: PPUSH
44103: LD_INT 3
44105: PPUSH
44106: CALL_OW 275
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: LIST
44115: ST_TO_ADDR
// end ;
44116: LD_VAR 0 2
44120: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44121: LD_INT 0
44123: PPUSH
44124: PPUSH
// result := array ;
44125: LD_ADDR_VAR 0 3
44129: PUSH
44130: LD_VAR 0 1
44134: ST_TO_ADDR
// if size >= result then
44135: LD_VAR 0 2
44139: PUSH
44140: LD_VAR 0 3
44144: GREATEREQUAL
44145: IFFALSE 44149
// exit ;
44147: GO 44199
// if size then
44149: LD_VAR 0 2
44153: IFFALSE 44199
// for i := array downto size do
44155: LD_ADDR_VAR 0 4
44159: PUSH
44160: DOUBLE
44161: LD_VAR 0 1
44165: INC
44166: ST_TO_ADDR
44167: LD_VAR 0 2
44171: PUSH
44172: FOR_DOWNTO
44173: IFFALSE 44197
// result := Delete ( result , result ) ;
44175: LD_ADDR_VAR 0 3
44179: PUSH
44180: LD_VAR 0 3
44184: PPUSH
44185: LD_VAR 0 3
44189: PPUSH
44190: CALL_OW 3
44194: ST_TO_ADDR
44195: GO 44172
44197: POP
44198: POP
// end ;
44199: LD_VAR 0 3
44203: RET
// export function ComExit ( unit ) ; var tmp ; begin
44204: LD_INT 0
44206: PPUSH
44207: PPUSH
// if not IsInUnit ( unit ) then
44208: LD_VAR 0 1
44212: PPUSH
44213: CALL_OW 310
44217: NOT
44218: IFFALSE 44222
// exit ;
44220: GO 44282
// tmp := IsInUnit ( unit ) ;
44222: LD_ADDR_VAR 0 3
44226: PUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 310
44236: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44237: LD_VAR 0 3
44241: PPUSH
44242: CALL_OW 247
44246: PUSH
44247: LD_INT 2
44249: EQUAL
44250: IFFALSE 44263
// ComExitVehicle ( unit ) else
44252: LD_VAR 0 1
44256: PPUSH
44257: CALL_OW 121
44261: GO 44272
// ComExitBuilding ( unit ) ;
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 122
// result := tmp ;
44272: LD_ADDR_VAR 0 2
44276: PUSH
44277: LD_VAR 0 3
44281: ST_TO_ADDR
// end ;
44282: LD_VAR 0 2
44286: RET
// export function ComExitAll ( units ) ; var i ; begin
44287: LD_INT 0
44289: PPUSH
44290: PPUSH
// if not units then
44291: LD_VAR 0 1
44295: NOT
44296: IFFALSE 44300
// exit ;
44298: GO 44326
// for i in units do
44300: LD_ADDR_VAR 0 3
44304: PUSH
44305: LD_VAR 0 1
44309: PUSH
44310: FOR_IN
44311: IFFALSE 44324
// ComExit ( i ) ;
44313: LD_VAR 0 3
44317: PPUSH
44318: CALL 44204 0 1
44322: GO 44310
44324: POP
44325: POP
// end ;
44326: LD_VAR 0 2
44330: RET
// export function ResetHc ; begin
44331: LD_INT 0
44333: PPUSH
// InitHc ;
44334: CALL_OW 19
// hc_importance := 0 ;
44338: LD_ADDR_OWVAR 32
44342: PUSH
44343: LD_INT 0
44345: ST_TO_ADDR
// end ;
44346: LD_VAR 0 1
44350: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44351: LD_INT 0
44353: PPUSH
44354: PPUSH
44355: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44356: LD_ADDR_VAR 0 6
44360: PUSH
44361: LD_VAR 0 1
44365: PUSH
44366: LD_VAR 0 3
44370: PLUS
44371: PUSH
44372: LD_INT 2
44374: DIV
44375: ST_TO_ADDR
// if _x < 0 then
44376: LD_VAR 0 6
44380: PUSH
44381: LD_INT 0
44383: LESS
44384: IFFALSE 44401
// _x := _x * - 1 ;
44386: LD_ADDR_VAR 0 6
44390: PUSH
44391: LD_VAR 0 6
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: MUL
44400: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44401: LD_ADDR_VAR 0 7
44405: PUSH
44406: LD_VAR 0 2
44410: PUSH
44411: LD_VAR 0 4
44415: PLUS
44416: PUSH
44417: LD_INT 2
44419: DIV
44420: ST_TO_ADDR
// if _y < 0 then
44421: LD_VAR 0 7
44425: PUSH
44426: LD_INT 0
44428: LESS
44429: IFFALSE 44446
// _y := _y * - 1 ;
44431: LD_ADDR_VAR 0 7
44435: PUSH
44436: LD_VAR 0 7
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: MUL
44445: ST_TO_ADDR
// result := [ _x , _y ] ;
44446: LD_ADDR_VAR 0 5
44450: PUSH
44451: LD_VAR 0 6
44455: PUSH
44456: LD_VAR 0 7
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: ST_TO_ADDR
// end ;
44465: LD_VAR 0 5
44469: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44470: LD_INT 0
44472: PPUSH
44473: PPUSH
44474: PPUSH
44475: PPUSH
// task := GetTaskList ( unit ) ;
44476: LD_ADDR_VAR 0 7
44480: PUSH
44481: LD_VAR 0 1
44485: PPUSH
44486: CALL_OW 437
44490: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44491: LD_VAR 0 7
44495: NOT
44496: PUSH
44497: LD_VAR 0 1
44501: PPUSH
44502: LD_VAR 0 2
44506: PPUSH
44507: CALL_OW 308
44511: NOT
44512: AND
44513: IFFALSE 44517
// exit ;
44515: GO 44635
// if IsInArea ( unit , area ) then
44517: LD_VAR 0 1
44521: PPUSH
44522: LD_VAR 0 2
44526: PPUSH
44527: CALL_OW 308
44531: IFFALSE 44549
// begin ComMoveToArea ( unit , goAway ) ;
44533: LD_VAR 0 1
44537: PPUSH
44538: LD_VAR 0 3
44542: PPUSH
44543: CALL_OW 113
// exit ;
44547: GO 44635
// end ; if task [ 1 ] [ 1 ] <> M then
44549: LD_VAR 0 7
44553: PUSH
44554: LD_INT 1
44556: ARRAY
44557: PUSH
44558: LD_INT 1
44560: ARRAY
44561: PUSH
44562: LD_STRING M
44564: NONEQUAL
44565: IFFALSE 44569
// exit ;
44567: GO 44635
// x := task [ 1 ] [ 2 ] ;
44569: LD_ADDR_VAR 0 5
44573: PUSH
44574: LD_VAR 0 7
44578: PUSH
44579: LD_INT 1
44581: ARRAY
44582: PUSH
44583: LD_INT 2
44585: ARRAY
44586: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44587: LD_ADDR_VAR 0 6
44591: PUSH
44592: LD_VAR 0 7
44596: PUSH
44597: LD_INT 1
44599: ARRAY
44600: PUSH
44601: LD_INT 3
44603: ARRAY
44604: ST_TO_ADDR
// if InArea ( x , y , area ) then
44605: LD_VAR 0 5
44609: PPUSH
44610: LD_VAR 0 6
44614: PPUSH
44615: LD_VAR 0 2
44619: PPUSH
44620: CALL_OW 309
44624: IFFALSE 44635
// ComStop ( unit ) ;
44626: LD_VAR 0 1
44630: PPUSH
44631: CALL_OW 141
// end ;
44635: LD_VAR 0 4
44639: RET
// export function Abs ( value ) ; begin
44640: LD_INT 0
44642: PPUSH
// result := value ;
44643: LD_ADDR_VAR 0 2
44647: PUSH
44648: LD_VAR 0 1
44652: ST_TO_ADDR
// if value < 0 then
44653: LD_VAR 0 1
44657: PUSH
44658: LD_INT 0
44660: LESS
44661: IFFALSE 44678
// result := value * - 1 ;
44663: LD_ADDR_VAR 0 2
44667: PUSH
44668: LD_VAR 0 1
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: MUL
44677: ST_TO_ADDR
// end ;
44678: LD_VAR 0 2
44682: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44683: LD_INT 0
44685: PPUSH
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
// if not unit or not building then
44693: LD_VAR 0 1
44697: NOT
44698: PUSH
44699: LD_VAR 0 2
44703: NOT
44704: OR
44705: IFFALSE 44709
// exit ;
44707: GO 44935
// x := GetX ( building ) ;
44709: LD_ADDR_VAR 0 4
44713: PUSH
44714: LD_VAR 0 2
44718: PPUSH
44719: CALL_OW 250
44723: ST_TO_ADDR
// y := GetY ( building ) ;
44724: LD_ADDR_VAR 0 6
44728: PUSH
44729: LD_VAR 0 2
44733: PPUSH
44734: CALL_OW 251
44738: ST_TO_ADDR
// d := GetDir ( building ) ;
44739: LD_ADDR_VAR 0 8
44743: PUSH
44744: LD_VAR 0 2
44748: PPUSH
44749: CALL_OW 254
44753: ST_TO_ADDR
// r := 4 ;
44754: LD_ADDR_VAR 0 9
44758: PUSH
44759: LD_INT 4
44761: ST_TO_ADDR
// for i := 1 to 5 do
44762: LD_ADDR_VAR 0 10
44766: PUSH
44767: DOUBLE
44768: LD_INT 1
44770: DEC
44771: ST_TO_ADDR
44772: LD_INT 5
44774: PUSH
44775: FOR_TO
44776: IFFALSE 44933
// begin _x := ShiftX ( x , d , r + i ) ;
44778: LD_ADDR_VAR 0 5
44782: PUSH
44783: LD_VAR 0 4
44787: PPUSH
44788: LD_VAR 0 8
44792: PPUSH
44793: LD_VAR 0 9
44797: PUSH
44798: LD_VAR 0 10
44802: PLUS
44803: PPUSH
44804: CALL_OW 272
44808: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
44809: LD_ADDR_VAR 0 7
44813: PUSH
44814: LD_VAR 0 6
44818: PPUSH
44819: LD_VAR 0 8
44823: PPUSH
44824: LD_VAR 0 9
44828: PUSH
44829: LD_VAR 0 10
44833: PLUS
44834: PPUSH
44835: CALL_OW 273
44839: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
44840: LD_VAR 0 5
44844: PPUSH
44845: LD_VAR 0 7
44849: PPUSH
44850: CALL_OW 488
44854: PUSH
44855: LD_VAR 0 5
44859: PPUSH
44860: LD_VAR 0 7
44864: PPUSH
44865: CALL_OW 428
44869: PPUSH
44870: CALL_OW 247
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 2
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: IN
44885: NOT
44886: AND
44887: IFFALSE 44931
// begin ComMoveXY ( unit , _x , _y ) ;
44889: LD_VAR 0 1
44893: PPUSH
44894: LD_VAR 0 5
44898: PPUSH
44899: LD_VAR 0 7
44903: PPUSH
44904: CALL_OW 111
// result := [ _x , _y ] ;
44908: LD_ADDR_VAR 0 3
44912: PUSH
44913: LD_VAR 0 5
44917: PUSH
44918: LD_VAR 0 7
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: ST_TO_ADDR
// exit ;
44927: POP
44928: POP
44929: GO 44935
// end ; end ;
44931: GO 44775
44933: POP
44934: POP
// end ;
44935: LD_VAR 0 3
44939: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44940: LD_INT 0
44942: PPUSH
44943: PPUSH
44944: PPUSH
// result := 0 ;
44945: LD_ADDR_VAR 0 3
44949: PUSH
44950: LD_INT 0
44952: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
44953: LD_VAR 0 1
44957: PUSH
44958: LD_INT 0
44960: LESS
44961: PUSH
44962: LD_VAR 0 1
44966: PUSH
44967: LD_INT 8
44969: GREATER
44970: OR
44971: PUSH
44972: LD_VAR 0 2
44976: PUSH
44977: LD_INT 0
44979: LESS
44980: OR
44981: PUSH
44982: LD_VAR 0 2
44986: PUSH
44987: LD_INT 8
44989: GREATER
44990: OR
44991: IFFALSE 44995
// exit ;
44993: GO 45070
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
44995: LD_ADDR_VAR 0 4
44999: PUSH
45000: LD_INT 22
45002: PUSH
45003: LD_VAR 0 2
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PPUSH
45012: CALL_OW 69
45016: PUSH
45017: FOR_IN
45018: IFFALSE 45068
// begin un := UnitShoot ( i ) ;
45020: LD_ADDR_VAR 0 5
45024: PUSH
45025: LD_VAR 0 4
45029: PPUSH
45030: CALL_OW 504
45034: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45035: LD_VAR 0 5
45039: PPUSH
45040: CALL_OW 255
45044: PUSH
45045: LD_VAR 0 1
45049: EQUAL
45050: IFFALSE 45066
// begin result := un ;
45052: LD_ADDR_VAR 0 3
45056: PUSH
45057: LD_VAR 0 5
45061: ST_TO_ADDR
// exit ;
45062: POP
45063: POP
45064: GO 45070
// end ; end ;
45066: GO 45017
45068: POP
45069: POP
// end ;
45070: LD_VAR 0 3
45074: RET
// export function GetCargoBay ( units ) ; begin
45075: LD_INT 0
45077: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45078: LD_ADDR_VAR 0 2
45082: PUSH
45083: LD_VAR 0 1
45087: PPUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 34
45093: PUSH
45094: LD_INT 12
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 34
45103: PUSH
45104: LD_INT 51
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 34
45113: PUSH
45114: LD_INT 32
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 34
45123: PUSH
45124: LD_INT 89
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: PPUSH
45138: CALL_OW 72
45142: ST_TO_ADDR
// end ;
45143: LD_VAR 0 2
45147: RET
// export function Negate ( value ) ; begin
45148: LD_INT 0
45150: PPUSH
// result := not value ;
45151: LD_ADDR_VAR 0 2
45155: PUSH
45156: LD_VAR 0 1
45160: NOT
45161: ST_TO_ADDR
// end ;
45162: LD_VAR 0 2
45166: RET
// export function Inc ( value ) ; begin
45167: LD_INT 0
45169: PPUSH
// result := value + 1 ;
45170: LD_ADDR_VAR 0 2
45174: PUSH
45175: LD_VAR 0 1
45179: PUSH
45180: LD_INT 1
45182: PLUS
45183: ST_TO_ADDR
// end ;
45184: LD_VAR 0 2
45188: RET
// export function Dec ( value ) ; begin
45189: LD_INT 0
45191: PPUSH
// result := value - 1 ;
45192: LD_ADDR_VAR 0 2
45196: PUSH
45197: LD_VAR 0 1
45201: PUSH
45202: LD_INT 1
45204: MINUS
45205: ST_TO_ADDR
// end ;
45206: LD_VAR 0 2
45210: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45211: LD_INT 0
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
45217: PPUSH
45218: PPUSH
45219: PPUSH
45220: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45221: LD_VAR 0 1
45225: PPUSH
45226: LD_VAR 0 2
45230: PPUSH
45231: CALL_OW 488
45235: NOT
45236: PUSH
45237: LD_VAR 0 3
45241: PPUSH
45242: LD_VAR 0 4
45246: PPUSH
45247: CALL_OW 488
45251: NOT
45252: OR
45253: IFFALSE 45266
// begin result := - 1 ;
45255: LD_ADDR_VAR 0 5
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: ST_TO_ADDR
// exit ;
45264: GO 45501
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45266: LD_ADDR_VAR 0 12
45270: PUSH
45271: LD_VAR 0 1
45275: PPUSH
45276: LD_VAR 0 2
45280: PPUSH
45281: LD_VAR 0 3
45285: PPUSH
45286: LD_VAR 0 4
45290: PPUSH
45291: CALL 44351 0 4
45295: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45296: LD_ADDR_VAR 0 11
45300: PUSH
45301: LD_VAR 0 1
45305: PPUSH
45306: LD_VAR 0 2
45310: PPUSH
45311: LD_VAR 0 12
45315: PUSH
45316: LD_INT 1
45318: ARRAY
45319: PPUSH
45320: LD_VAR 0 12
45324: PUSH
45325: LD_INT 2
45327: ARRAY
45328: PPUSH
45329: CALL_OW 298
45333: ST_TO_ADDR
// distance := 9999 ;
45334: LD_ADDR_VAR 0 10
45338: PUSH
45339: LD_INT 9999
45341: ST_TO_ADDR
// for i := 0 to 5 do
45342: LD_ADDR_VAR 0 6
45346: PUSH
45347: DOUBLE
45348: LD_INT 0
45350: DEC
45351: ST_TO_ADDR
45352: LD_INT 5
45354: PUSH
45355: FOR_TO
45356: IFFALSE 45499
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45358: LD_ADDR_VAR 0 7
45362: PUSH
45363: LD_VAR 0 1
45367: PPUSH
45368: LD_VAR 0 6
45372: PPUSH
45373: LD_VAR 0 11
45377: PPUSH
45378: CALL_OW 272
45382: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45383: LD_ADDR_VAR 0 8
45387: PUSH
45388: LD_VAR 0 2
45392: PPUSH
45393: LD_VAR 0 6
45397: PPUSH
45398: LD_VAR 0 11
45402: PPUSH
45403: CALL_OW 273
45407: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45408: LD_VAR 0 7
45412: PPUSH
45413: LD_VAR 0 8
45417: PPUSH
45418: CALL_OW 488
45422: NOT
45423: IFFALSE 45427
// continue ;
45425: GO 45355
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45427: LD_ADDR_VAR 0 9
45431: PUSH
45432: LD_VAR 0 12
45436: PUSH
45437: LD_INT 1
45439: ARRAY
45440: PPUSH
45441: LD_VAR 0 12
45445: PUSH
45446: LD_INT 2
45448: ARRAY
45449: PPUSH
45450: LD_VAR 0 7
45454: PPUSH
45455: LD_VAR 0 8
45459: PPUSH
45460: CALL_OW 298
45464: ST_TO_ADDR
// if tmp < distance then
45465: LD_VAR 0 9
45469: PUSH
45470: LD_VAR 0 10
45474: LESS
45475: IFFALSE 45497
// begin result := i ;
45477: LD_ADDR_VAR 0 5
45481: PUSH
45482: LD_VAR 0 6
45486: ST_TO_ADDR
// distance := tmp ;
45487: LD_ADDR_VAR 0 10
45491: PUSH
45492: LD_VAR 0 9
45496: ST_TO_ADDR
// end ; end ;
45497: GO 45355
45499: POP
45500: POP
// end ;
45501: LD_VAR 0 5
45505: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45506: LD_INT 0
45508: PPUSH
45509: PPUSH
// if not driver or not IsInUnit ( driver ) then
45510: LD_VAR 0 1
45514: NOT
45515: PUSH
45516: LD_VAR 0 1
45520: PPUSH
45521: CALL_OW 310
45525: NOT
45526: OR
45527: IFFALSE 45531
// exit ;
45529: GO 45621
// vehicle := IsInUnit ( driver ) ;
45531: LD_ADDR_VAR 0 3
45535: PUSH
45536: LD_VAR 0 1
45540: PPUSH
45541: CALL_OW 310
45545: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45546: LD_VAR 0 1
45550: PPUSH
45551: LD_STRING \
45553: PUSH
45554: LD_INT 0
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 0
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: PUSH
45581: LD_STRING E
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_VAR 0 3
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PPUSH
45617: CALL_OW 446
// end ;
45621: LD_VAR 0 2
45625: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45626: LD_INT 0
45628: PPUSH
45629: PPUSH
// if not driver or not IsInUnit ( driver ) then
45630: LD_VAR 0 1
45634: NOT
45635: PUSH
45636: LD_VAR 0 1
45640: PPUSH
45641: CALL_OW 310
45645: NOT
45646: OR
45647: IFFALSE 45651
// exit ;
45649: GO 45741
// vehicle := IsInUnit ( driver ) ;
45651: LD_ADDR_VAR 0 3
45655: PUSH
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 310
45665: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45666: LD_VAR 0 1
45670: PPUSH
45671: LD_STRING \
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 0
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: PUSH
45701: LD_STRING E
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: LD_VAR 0 3
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 0
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PPUSH
45737: CALL_OW 447
// end ;
45741: LD_VAR 0 2
45745: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
45746: LD_INT 0
45748: PPUSH
45749: PPUSH
45750: PPUSH
// tmp := [ ] ;
45751: LD_ADDR_VAR 0 5
45755: PUSH
45756: EMPTY
45757: ST_TO_ADDR
// for i in units do
45758: LD_ADDR_VAR 0 4
45762: PUSH
45763: LD_VAR 0 1
45767: PUSH
45768: FOR_IN
45769: IFFALSE 45807
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
45771: LD_ADDR_VAR 0 5
45775: PUSH
45776: LD_VAR 0 5
45780: PPUSH
45781: LD_VAR 0 5
45785: PUSH
45786: LD_INT 1
45788: PLUS
45789: PPUSH
45790: LD_VAR 0 4
45794: PPUSH
45795: CALL_OW 256
45799: PPUSH
45800: CALL_OW 2
45804: ST_TO_ADDR
45805: GO 45768
45807: POP
45808: POP
// if not tmp then
45809: LD_VAR 0 5
45813: NOT
45814: IFFALSE 45818
// exit ;
45816: GO 45866
// if asc then
45818: LD_VAR 0 2
45822: IFFALSE 45846
// result := SortListByListAsc ( units , tmp ) else
45824: LD_ADDR_VAR 0 3
45828: PUSH
45829: LD_VAR 0 1
45833: PPUSH
45834: LD_VAR 0 5
45838: PPUSH
45839: CALL_OW 76
45843: ST_TO_ADDR
45844: GO 45866
// result := SortListByListDesc ( units , tmp ) ;
45846: LD_ADDR_VAR 0 3
45850: PUSH
45851: LD_VAR 0 1
45855: PPUSH
45856: LD_VAR 0 5
45860: PPUSH
45861: CALL_OW 77
45865: ST_TO_ADDR
// end ;
45866: LD_VAR 0 3
45870: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45871: LD_INT 0
45873: PPUSH
45874: PPUSH
// task := GetTaskList ( mech ) ;
45875: LD_ADDR_VAR 0 4
45879: PUSH
45880: LD_VAR 0 1
45884: PPUSH
45885: CALL_OW 437
45889: ST_TO_ADDR
// if not task then
45890: LD_VAR 0 4
45894: NOT
45895: IFFALSE 45899
// exit ;
45897: GO 45941
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45899: LD_ADDR_VAR 0 3
45903: PUSH
45904: LD_VAR 0 4
45908: PUSH
45909: LD_INT 1
45911: ARRAY
45912: PUSH
45913: LD_INT 1
45915: ARRAY
45916: PUSH
45917: LD_STRING r
45919: EQUAL
45920: PUSH
45921: LD_VAR 0 4
45925: PUSH
45926: LD_INT 1
45928: ARRAY
45929: PUSH
45930: LD_INT 4
45932: ARRAY
45933: PUSH
45934: LD_VAR 0 2
45938: EQUAL
45939: AND
45940: ST_TO_ADDR
// end ;
45941: LD_VAR 0 3
45945: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
45946: LD_INT 0
45948: PPUSH
// SetDir ( unit , d ) ;
45949: LD_VAR 0 1
45953: PPUSH
45954: LD_VAR 0 4
45958: PPUSH
45959: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
45963: LD_VAR 0 1
45967: PPUSH
45968: LD_VAR 0 2
45972: PPUSH
45973: LD_VAR 0 3
45977: PPUSH
45978: LD_VAR 0 5
45982: PPUSH
45983: CALL_OW 48
// end ;
45987: LD_VAR 0 6
45991: RET
// export function ToNaturalNumber ( number ) ; begin
45992: LD_INT 0
45994: PPUSH
// result := number div 1 ;
45995: LD_ADDR_VAR 0 2
45999: PUSH
46000: LD_VAR 0 1
46004: PUSH
46005: LD_INT 1
46007: DIV
46008: ST_TO_ADDR
// if number < 0 then
46009: LD_VAR 0 1
46013: PUSH
46014: LD_INT 0
46016: LESS
46017: IFFALSE 46027
// result := 0 ;
46019: LD_ADDR_VAR 0 2
46023: PUSH
46024: LD_INT 0
46026: ST_TO_ADDR
// end ;
46027: LD_VAR 0 2
46031: RET
// export function SortByClass ( units , class ) ; var un ; begin
46032: LD_INT 0
46034: PPUSH
46035: PPUSH
// if not units or not class then
46036: LD_VAR 0 1
46040: NOT
46041: PUSH
46042: LD_VAR 0 2
46046: NOT
46047: OR
46048: IFFALSE 46052
// exit ;
46050: GO 46147
// result := [ ] ;
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: EMPTY
46058: ST_TO_ADDR
// for un in units do
46059: LD_ADDR_VAR 0 4
46063: PUSH
46064: LD_VAR 0 1
46068: PUSH
46069: FOR_IN
46070: IFFALSE 46145
// if GetClass ( un ) = class then
46072: LD_VAR 0 4
46076: PPUSH
46077: CALL_OW 257
46081: PUSH
46082: LD_VAR 0 2
46086: EQUAL
46087: IFFALSE 46114
// result := Insert ( result , 1 , un ) else
46089: LD_ADDR_VAR 0 3
46093: PUSH
46094: LD_VAR 0 3
46098: PPUSH
46099: LD_INT 1
46101: PPUSH
46102: LD_VAR 0 4
46106: PPUSH
46107: CALL_OW 2
46111: ST_TO_ADDR
46112: GO 46143
// result := Replace ( result , result + 1 , un ) ;
46114: LD_ADDR_VAR 0 3
46118: PUSH
46119: LD_VAR 0 3
46123: PPUSH
46124: LD_VAR 0 3
46128: PUSH
46129: LD_INT 1
46131: PLUS
46132: PPUSH
46133: LD_VAR 0 4
46137: PPUSH
46138: CALL_OW 1
46142: ST_TO_ADDR
46143: GO 46069
46145: POP
46146: POP
// end ;
46147: LD_VAR 0 3
46151: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46152: LD_INT 0
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
// result := [ ] ;
46161: LD_ADDR_VAR 0 4
46165: PUSH
46166: EMPTY
46167: ST_TO_ADDR
// if x - r < 0 then
46168: LD_VAR 0 1
46172: PUSH
46173: LD_VAR 0 3
46177: MINUS
46178: PUSH
46179: LD_INT 0
46181: LESS
46182: IFFALSE 46194
// min_x := 0 else
46184: LD_ADDR_VAR 0 8
46188: PUSH
46189: LD_INT 0
46191: ST_TO_ADDR
46192: GO 46210
// min_x := x - r ;
46194: LD_ADDR_VAR 0 8
46198: PUSH
46199: LD_VAR 0 1
46203: PUSH
46204: LD_VAR 0 3
46208: MINUS
46209: ST_TO_ADDR
// if y - r < 0 then
46210: LD_VAR 0 2
46214: PUSH
46215: LD_VAR 0 3
46219: MINUS
46220: PUSH
46221: LD_INT 0
46223: LESS
46224: IFFALSE 46236
// min_y := 0 else
46226: LD_ADDR_VAR 0 7
46230: PUSH
46231: LD_INT 0
46233: ST_TO_ADDR
46234: GO 46252
// min_y := y - r ;
46236: LD_ADDR_VAR 0 7
46240: PUSH
46241: LD_VAR 0 2
46245: PUSH
46246: LD_VAR 0 3
46250: MINUS
46251: ST_TO_ADDR
// max_x := x + r ;
46252: LD_ADDR_VAR 0 9
46256: PUSH
46257: LD_VAR 0 1
46261: PUSH
46262: LD_VAR 0 3
46266: PLUS
46267: ST_TO_ADDR
// max_y := y + r ;
46268: LD_ADDR_VAR 0 10
46272: PUSH
46273: LD_VAR 0 2
46277: PUSH
46278: LD_VAR 0 3
46282: PLUS
46283: ST_TO_ADDR
// for _x = min_x to max_x do
46284: LD_ADDR_VAR 0 5
46288: PUSH
46289: DOUBLE
46290: LD_VAR 0 8
46294: DEC
46295: ST_TO_ADDR
46296: LD_VAR 0 9
46300: PUSH
46301: FOR_TO
46302: IFFALSE 46403
// for _y = min_y to max_y do
46304: LD_ADDR_VAR 0 6
46308: PUSH
46309: DOUBLE
46310: LD_VAR 0 7
46314: DEC
46315: ST_TO_ADDR
46316: LD_VAR 0 10
46320: PUSH
46321: FOR_TO
46322: IFFALSE 46399
// begin if not ValidHex ( _x , _y ) then
46324: LD_VAR 0 5
46328: PPUSH
46329: LD_VAR 0 6
46333: PPUSH
46334: CALL_OW 488
46338: NOT
46339: IFFALSE 46343
// continue ;
46341: GO 46321
// if GetResourceTypeXY ( _x , _y ) then
46343: LD_VAR 0 5
46347: PPUSH
46348: LD_VAR 0 6
46352: PPUSH
46353: CALL_OW 283
46357: IFFALSE 46397
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46359: LD_ADDR_VAR 0 4
46363: PUSH
46364: LD_VAR 0 4
46368: PPUSH
46369: LD_VAR 0 4
46373: PUSH
46374: LD_INT 1
46376: PLUS
46377: PPUSH
46378: LD_VAR 0 5
46382: PUSH
46383: LD_VAR 0 6
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PPUSH
46392: CALL_OW 1
46396: ST_TO_ADDR
// end ;
46397: GO 46321
46399: POP
46400: POP
46401: GO 46301
46403: POP
46404: POP
// end ;
46405: LD_VAR 0 4
46409: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46410: LD_INT 0
46412: PPUSH
46413: PPUSH
46414: PPUSH
46415: PPUSH
46416: PPUSH
46417: PPUSH
46418: PPUSH
46419: PPUSH
// if not units then
46420: LD_VAR 0 1
46424: NOT
46425: IFFALSE 46429
// exit ;
46427: GO 46953
// result := UnitFilter ( units , [ f_ok ] ) ;
46429: LD_ADDR_VAR 0 3
46433: PUSH
46434: LD_VAR 0 1
46438: PPUSH
46439: LD_INT 50
46441: PUSH
46442: EMPTY
46443: LIST
46444: PPUSH
46445: CALL_OW 72
46449: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46450: LD_ADDR_VAR 0 8
46454: PUSH
46455: LD_VAR 0 1
46459: PUSH
46460: LD_INT 1
46462: ARRAY
46463: PPUSH
46464: CALL_OW 255
46468: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46469: LD_ADDR_VAR 0 10
46473: PUSH
46474: LD_INT 29
46476: PUSH
46477: LD_INT 91
46479: PUSH
46480: LD_INT 49
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: LIST
46487: ST_TO_ADDR
// if not result then
46488: LD_VAR 0 3
46492: NOT
46493: IFFALSE 46497
// exit ;
46495: GO 46953
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46497: LD_ADDR_VAR 0 5
46501: PUSH
46502: LD_INT 81
46504: PUSH
46505: LD_VAR 0 8
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PPUSH
46514: CALL_OW 69
46518: ST_TO_ADDR
// for i in result do
46519: LD_ADDR_VAR 0 4
46523: PUSH
46524: LD_VAR 0 3
46528: PUSH
46529: FOR_IN
46530: IFFALSE 46951
// begin tag := GetTag ( i ) + 1 ;
46532: LD_ADDR_VAR 0 9
46536: PUSH
46537: LD_VAR 0 4
46541: PPUSH
46542: CALL_OW 110
46546: PUSH
46547: LD_INT 1
46549: PLUS
46550: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46551: LD_ADDR_VAR 0 7
46555: PUSH
46556: LD_VAR 0 4
46560: PPUSH
46561: CALL_OW 250
46565: PPUSH
46566: LD_VAR 0 4
46570: PPUSH
46571: CALL_OW 251
46575: PPUSH
46576: LD_INT 6
46578: PPUSH
46579: CALL 46152 0 3
46583: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46584: LD_VAR 0 4
46588: PPUSH
46589: CALL_OW 247
46593: PUSH
46594: LD_INT 2
46596: EQUAL
46597: PUSH
46598: LD_VAR 0 7
46602: AND
46603: PUSH
46604: LD_VAR 0 4
46608: PPUSH
46609: CALL_OW 264
46613: PUSH
46614: LD_VAR 0 10
46618: IN
46619: NOT
46620: AND
46621: IFFALSE 46660
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46623: LD_VAR 0 4
46627: PPUSH
46628: LD_VAR 0 7
46632: PUSH
46633: LD_INT 1
46635: ARRAY
46636: PUSH
46637: LD_INT 1
46639: ARRAY
46640: PPUSH
46641: LD_VAR 0 7
46645: PUSH
46646: LD_INT 1
46648: ARRAY
46649: PUSH
46650: LD_INT 2
46652: ARRAY
46653: PPUSH
46654: CALL_OW 116
46658: GO 46949
// if path > tag then
46660: LD_VAR 0 2
46664: PUSH
46665: LD_VAR 0 9
46669: GREATER
46670: IFFALSE 46878
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46672: LD_ADDR_VAR 0 6
46676: PUSH
46677: LD_VAR 0 5
46681: PPUSH
46682: LD_INT 91
46684: PUSH
46685: LD_VAR 0 4
46689: PUSH
46690: LD_INT 8
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: LIST
46697: PPUSH
46698: CALL_OW 72
46702: ST_TO_ADDR
// if nearEnemy then
46703: LD_VAR 0 6
46707: IFFALSE 46776
// begin if GetWeapon ( i ) = ru_time_lapser then
46709: LD_VAR 0 4
46713: PPUSH
46714: CALL_OW 264
46718: PUSH
46719: LD_INT 49
46721: EQUAL
46722: IFFALSE 46750
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46724: LD_VAR 0 4
46728: PPUSH
46729: LD_VAR 0 6
46733: PPUSH
46734: LD_VAR 0 4
46738: PPUSH
46739: CALL_OW 74
46743: PPUSH
46744: CALL_OW 112
46748: GO 46774
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46750: LD_VAR 0 4
46754: PPUSH
46755: LD_VAR 0 6
46759: PPUSH
46760: LD_VAR 0 4
46764: PPUSH
46765: CALL_OW 74
46769: PPUSH
46770: CALL_OW 115
// end else
46774: GO 46876
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46776: LD_VAR 0 4
46780: PPUSH
46781: LD_VAR 0 2
46785: PUSH
46786: LD_VAR 0 9
46790: ARRAY
46791: PUSH
46792: LD_INT 1
46794: ARRAY
46795: PPUSH
46796: LD_VAR 0 2
46800: PUSH
46801: LD_VAR 0 9
46805: ARRAY
46806: PUSH
46807: LD_INT 2
46809: ARRAY
46810: PPUSH
46811: CALL_OW 297
46815: PUSH
46816: LD_INT 6
46818: GREATER
46819: IFFALSE 46862
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46821: LD_VAR 0 4
46825: PPUSH
46826: LD_VAR 0 2
46830: PUSH
46831: LD_VAR 0 9
46835: ARRAY
46836: PUSH
46837: LD_INT 1
46839: ARRAY
46840: PPUSH
46841: LD_VAR 0 2
46845: PUSH
46846: LD_VAR 0 9
46850: ARRAY
46851: PUSH
46852: LD_INT 2
46854: ARRAY
46855: PPUSH
46856: CALL_OW 114
46860: GO 46876
// SetTag ( i , tag ) ;
46862: LD_VAR 0 4
46866: PPUSH
46867: LD_VAR 0 9
46871: PPUSH
46872: CALL_OW 109
// end else
46876: GO 46949
// if enemy then
46878: LD_VAR 0 5
46882: IFFALSE 46949
// begin if GetWeapon ( i ) = ru_time_lapser then
46884: LD_VAR 0 4
46888: PPUSH
46889: CALL_OW 264
46893: PUSH
46894: LD_INT 49
46896: EQUAL
46897: IFFALSE 46925
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46899: LD_VAR 0 4
46903: PPUSH
46904: LD_VAR 0 5
46908: PPUSH
46909: LD_VAR 0 4
46913: PPUSH
46914: CALL_OW 74
46918: PPUSH
46919: CALL_OW 112
46923: GO 46949
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46925: LD_VAR 0 4
46929: PPUSH
46930: LD_VAR 0 5
46934: PPUSH
46935: LD_VAR 0 4
46939: PPUSH
46940: CALL_OW 74
46944: PPUSH
46945: CALL_OW 115
// end ; end ;
46949: GO 46529
46951: POP
46952: POP
// end ;
46953: LD_VAR 0 3
46957: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
46958: LD_INT 0
46960: PPUSH
46961: PPUSH
46962: PPUSH
// if not unit or IsInUnit ( unit ) then
46963: LD_VAR 0 1
46967: NOT
46968: PUSH
46969: LD_VAR 0 1
46973: PPUSH
46974: CALL_OW 310
46978: OR
46979: IFFALSE 46983
// exit ;
46981: GO 47074
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
46983: LD_ADDR_VAR 0 4
46987: PUSH
46988: LD_VAR 0 1
46992: PPUSH
46993: CALL_OW 250
46997: PPUSH
46998: LD_VAR 0 2
47002: PPUSH
47003: LD_INT 1
47005: PPUSH
47006: CALL_OW 272
47010: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47011: LD_ADDR_VAR 0 5
47015: PUSH
47016: LD_VAR 0 1
47020: PPUSH
47021: CALL_OW 251
47025: PPUSH
47026: LD_VAR 0 2
47030: PPUSH
47031: LD_INT 1
47033: PPUSH
47034: CALL_OW 273
47038: ST_TO_ADDR
// if ValidHex ( x , y ) then
47039: LD_VAR 0 4
47043: PPUSH
47044: LD_VAR 0 5
47048: PPUSH
47049: CALL_OW 488
47053: IFFALSE 47074
// ComTurnXY ( unit , x , y ) ;
47055: LD_VAR 0 1
47059: PPUSH
47060: LD_VAR 0 4
47064: PPUSH
47065: LD_VAR 0 5
47069: PPUSH
47070: CALL_OW 118
// end ;
47074: LD_VAR 0 3
47078: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47079: LD_INT 0
47081: PPUSH
47082: PPUSH
// result := false ;
47083: LD_ADDR_VAR 0 3
47087: PUSH
47088: LD_INT 0
47090: ST_TO_ADDR
// if not units then
47091: LD_VAR 0 2
47095: NOT
47096: IFFALSE 47100
// exit ;
47098: GO 47145
// for i in units do
47100: LD_ADDR_VAR 0 4
47104: PUSH
47105: LD_VAR 0 2
47109: PUSH
47110: FOR_IN
47111: IFFALSE 47143
// if See ( side , i ) then
47113: LD_VAR 0 1
47117: PPUSH
47118: LD_VAR 0 4
47122: PPUSH
47123: CALL_OW 292
47127: IFFALSE 47141
// begin result := true ;
47129: LD_ADDR_VAR 0 3
47133: PUSH
47134: LD_INT 1
47136: ST_TO_ADDR
// exit ;
47137: POP
47138: POP
47139: GO 47145
// end ;
47141: GO 47110
47143: POP
47144: POP
// end ;
47145: LD_VAR 0 3
47149: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47150: LD_INT 0
47152: PPUSH
47153: PPUSH
47154: PPUSH
47155: PPUSH
// if not unit or not points then
47156: LD_VAR 0 1
47160: NOT
47161: PUSH
47162: LD_VAR 0 2
47166: NOT
47167: OR
47168: IFFALSE 47172
// exit ;
47170: GO 47262
// dist := 99999 ;
47172: LD_ADDR_VAR 0 5
47176: PUSH
47177: LD_INT 99999
47179: ST_TO_ADDR
// for i in points do
47180: LD_ADDR_VAR 0 4
47184: PUSH
47185: LD_VAR 0 2
47189: PUSH
47190: FOR_IN
47191: IFFALSE 47260
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47193: LD_ADDR_VAR 0 6
47197: PUSH
47198: LD_VAR 0 1
47202: PPUSH
47203: LD_VAR 0 4
47207: PUSH
47208: LD_INT 1
47210: ARRAY
47211: PPUSH
47212: LD_VAR 0 4
47216: PUSH
47217: LD_INT 2
47219: ARRAY
47220: PPUSH
47221: CALL_OW 297
47225: ST_TO_ADDR
// if tmpDist < dist then
47226: LD_VAR 0 6
47230: PUSH
47231: LD_VAR 0 5
47235: LESS
47236: IFFALSE 47258
// begin result := i ;
47238: LD_ADDR_VAR 0 3
47242: PUSH
47243: LD_VAR 0 4
47247: ST_TO_ADDR
// dist := tmpDist ;
47248: LD_ADDR_VAR 0 5
47252: PUSH
47253: LD_VAR 0 6
47257: ST_TO_ADDR
// end ; end ;
47258: GO 47190
47260: POP
47261: POP
// end ;
47262: LD_VAR 0 3
47266: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47267: LD_INT 0
47269: PPUSH
// uc_side := side ;
47270: LD_ADDR_OWVAR 20
47274: PUSH
47275: LD_VAR 0 1
47279: ST_TO_ADDR
// uc_nation := 3 ;
47280: LD_ADDR_OWVAR 21
47284: PUSH
47285: LD_INT 3
47287: ST_TO_ADDR
// vc_chassis := 25 ;
47288: LD_ADDR_OWVAR 37
47292: PUSH
47293: LD_INT 25
47295: ST_TO_ADDR
// vc_engine := engine_siberite ;
47296: LD_ADDR_OWVAR 39
47300: PUSH
47301: LD_INT 3
47303: ST_TO_ADDR
// vc_control := control_computer ;
47304: LD_ADDR_OWVAR 38
47308: PUSH
47309: LD_INT 3
47311: ST_TO_ADDR
// vc_weapon := 59 ;
47312: LD_ADDR_OWVAR 40
47316: PUSH
47317: LD_INT 59
47319: ST_TO_ADDR
// result := CreateVehicle ;
47320: LD_ADDR_VAR 0 5
47324: PUSH
47325: CALL_OW 45
47329: ST_TO_ADDR
// SetDir ( result , d ) ;
47330: LD_VAR 0 5
47334: PPUSH
47335: LD_VAR 0 4
47339: PPUSH
47340: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47344: LD_VAR 0 5
47348: PPUSH
47349: LD_VAR 0 2
47353: PPUSH
47354: LD_VAR 0 3
47358: PPUSH
47359: LD_INT 0
47361: PPUSH
47362: CALL_OW 48
// end ;
47366: LD_VAR 0 5
47370: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47371: LD_INT 0
47373: PPUSH
47374: PPUSH
47375: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47376: LD_ADDR_VAR 0 2
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47399: LD_VAR 0 1
47403: NOT
47404: PUSH
47405: LD_VAR 0 1
47409: PPUSH
47410: CALL_OW 264
47414: PUSH
47415: LD_INT 12
47417: PUSH
47418: LD_INT 51
47420: PUSH
47421: LD_INT 32
47423: PUSH
47424: LD_INT 89
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: IN
47433: NOT
47434: OR
47435: IFFALSE 47439
// exit ;
47437: GO 47537
// for i := 1 to 3 do
47439: LD_ADDR_VAR 0 3
47443: PUSH
47444: DOUBLE
47445: LD_INT 1
47447: DEC
47448: ST_TO_ADDR
47449: LD_INT 3
47451: PUSH
47452: FOR_TO
47453: IFFALSE 47535
// begin tmp := GetCargo ( cargo , i ) ;
47455: LD_ADDR_VAR 0 4
47459: PUSH
47460: LD_VAR 0 1
47464: PPUSH
47465: LD_VAR 0 3
47469: PPUSH
47470: CALL_OW 289
47474: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47475: LD_ADDR_VAR 0 2
47479: PUSH
47480: LD_VAR 0 2
47484: PPUSH
47485: LD_VAR 0 3
47489: PPUSH
47490: LD_VAR 0 4
47494: PPUSH
47495: CALL_OW 1
47499: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47500: LD_ADDR_VAR 0 2
47504: PUSH
47505: LD_VAR 0 2
47509: PPUSH
47510: LD_INT 4
47512: PPUSH
47513: LD_VAR 0 2
47517: PUSH
47518: LD_INT 4
47520: ARRAY
47521: PUSH
47522: LD_VAR 0 4
47526: PLUS
47527: PPUSH
47528: CALL_OW 1
47532: ST_TO_ADDR
// end ;
47533: GO 47452
47535: POP
47536: POP
// end ;
47537: LD_VAR 0 2
47541: RET
// export function Length ( array ) ; begin
47542: LD_INT 0
47544: PPUSH
// result := array + 0 ;
47545: LD_ADDR_VAR 0 2
47549: PUSH
47550: LD_VAR 0 1
47554: PUSH
47555: LD_INT 0
47557: PLUS
47558: ST_TO_ADDR
// end ;
47559: LD_VAR 0 2
47563: RET
// export function PrepareArray ( array ) ; begin
47564: LD_INT 0
47566: PPUSH
// result := array diff 0 ;
47567: LD_ADDR_VAR 0 2
47571: PUSH
47572: LD_VAR 0 1
47576: PUSH
47577: LD_INT 0
47579: DIFF
47580: ST_TO_ADDR
// if not result [ 1 ] then
47581: LD_VAR 0 2
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: NOT
47590: IFFALSE 47610
// result := Delete ( result , 1 ) ;
47592: LD_ADDR_VAR 0 2
47596: PUSH
47597: LD_VAR 0 2
47601: PPUSH
47602: LD_INT 1
47604: PPUSH
47605: CALL_OW 3
47609: ST_TO_ADDR
// end ;
47610: LD_VAR 0 2
47614: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
47615: LD_INT 0
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
// sibRocketRange := 25 ;
47621: LD_ADDR_VAR 0 6
47625: PUSH
47626: LD_INT 25
47628: ST_TO_ADDR
// result := false ;
47629: LD_ADDR_VAR 0 4
47633: PUSH
47634: LD_INT 0
47636: ST_TO_ADDR
// for i := 0 to 5 do
47637: LD_ADDR_VAR 0 5
47641: PUSH
47642: DOUBLE
47643: LD_INT 0
47645: DEC
47646: ST_TO_ADDR
47647: LD_INT 5
47649: PUSH
47650: FOR_TO
47651: IFFALSE 47718
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
47653: LD_VAR 0 1
47657: PPUSH
47658: LD_VAR 0 5
47662: PPUSH
47663: LD_VAR 0 6
47667: PPUSH
47668: CALL_OW 272
47672: PPUSH
47673: LD_VAR 0 2
47677: PPUSH
47678: LD_VAR 0 5
47682: PPUSH
47683: LD_VAR 0 6
47687: PPUSH
47688: CALL_OW 273
47692: PPUSH
47693: LD_VAR 0 3
47697: PPUSH
47698: CALL_OW 309
47702: IFFALSE 47716
// begin result := true ;
47704: LD_ADDR_VAR 0 4
47708: PUSH
47709: LD_INT 1
47711: ST_TO_ADDR
// exit ;
47712: POP
47713: POP
47714: GO 47720
// end ;
47716: GO 47650
47718: POP
47719: POP
// end ;
47720: LD_VAR 0 4
47724: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
47725: LD_INT 0
47727: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
47728: LD_VAR 0 1
47732: PPUSH
47733: LD_VAR 0 2
47737: PPUSH
47738: LD_INT 0
47740: PPUSH
47741: LD_INT 0
47743: PPUSH
47744: LD_INT 1
47746: PPUSH
47747: LD_INT 0
47749: PPUSH
47750: CALL_OW 587
// end ;
47754: LD_VAR 0 3
47758: RET
// export function CenterOnNow ( unit ) ; begin
47759: LD_INT 0
47761: PPUSH
// result := IsInUnit ( unit ) ;
47762: LD_ADDR_VAR 0 2
47766: PUSH
47767: LD_VAR 0 1
47771: PPUSH
47772: CALL_OW 310
47776: ST_TO_ADDR
// if not result then
47777: LD_VAR 0 2
47781: NOT
47782: IFFALSE 47794
// result := unit ;
47784: LD_ADDR_VAR 0 2
47788: PUSH
47789: LD_VAR 0 1
47793: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
47794: LD_VAR 0 1
47798: PPUSH
47799: CALL_OW 87
// end ; end_of_file end_of_file
47803: LD_VAR 0 2
47807: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47808: LD_VAR 0 1
47812: PPUSH
47813: LD_VAR 0 2
47817: PPUSH
47818: LD_VAR 0 3
47822: PPUSH
47823: LD_VAR 0 4
47827: PPUSH
47828: LD_VAR 0 5
47832: PPUSH
47833: LD_VAR 0 6
47837: PPUSH
47838: CALL 48022 0 6
// end ;
47842: PPOPN 6
47844: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
47845: LD_INT 0
47847: PPUSH
// begin if not units then
47848: LD_VAR 0 1
47852: NOT
47853: IFFALSE 47857
// exit ;
47855: GO 47857
// end ;
47857: PPOPN 7
47859: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
47860: CALL 47926 0 0
// end ; end_of_file
47864: PPOPN 1
47866: END
// export globalGameSaveCounter ; every 0 0$1 do
47867: GO 47869
47869: DISABLE
// begin enable ;
47870: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47871: LD_STRING updateTimer(
47873: PUSH
47874: LD_OWVAR 1
47878: STR
47879: PUSH
47880: LD_STRING );
47882: STR
47883: PPUSH
47884: CALL_OW 559
// end ;
47888: END
// every 0 0$1 do
47889: GO 47891
47891: DISABLE
// begin globalGameSaveCounter := 0 ;
47892: LD_ADDR_EXP 29
47896: PUSH
47897: LD_INT 0
47899: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47900: LD_STRING setGameSaveCounter(0)
47902: PPUSH
47903: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47907: LD_STRING initStreamRollete();
47909: PPUSH
47910: CALL_OW 559
// InitStreamMode ;
47914: CALL 49240 0 0
// DefineStreamItems ( false ) ;
47918: LD_INT 0
47920: PPUSH
47921: CALL 49704 0 1
// end ;
47925: END
// export function SOS_MapStart ( ) ; begin
47926: LD_INT 0
47928: PPUSH
// if streamModeActive then
47929: LD_EXP 30
47933: IFFALSE 47942
// DefineStreamItems ( true ) ;
47935: LD_INT 1
47937: PPUSH
47938: CALL 49704 0 1
// UpdateLuaVariables ( ) ;
47942: CALL 47959 0 0
// UpdateFactoryWaypoints ( ) ;
47946: CALL 62565 0 0
// UpdateWarehouseGatheringPoints ( ) ;
47950: CALL 62822 0 0
// end ;
47954: LD_VAR 0 1
47958: RET
// function UpdateLuaVariables ( ) ; begin
47959: LD_INT 0
47961: PPUSH
// if globalGameSaveCounter then
47962: LD_EXP 29
47966: IFFALSE 48000
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
47968: LD_ADDR_EXP 29
47972: PUSH
47973: LD_EXP 29
47977: PPUSH
47978: CALL 45167 0 1
47982: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
47983: LD_STRING setGameSaveCounter(
47985: PUSH
47986: LD_EXP 29
47990: STR
47991: PUSH
47992: LD_STRING )
47994: STR
47995: PPUSH
47996: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48000: LD_STRING setGameDifficulty(
48002: PUSH
48003: LD_OWVAR 67
48007: STR
48008: PUSH
48009: LD_STRING )
48011: STR
48012: PPUSH
48013: CALL_OW 559
// end ;
48017: LD_VAR 0 1
48021: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48022: LD_INT 0
48024: PPUSH
// if p2 = stream_mode then
48025: LD_VAR 0 2
48029: PUSH
48030: LD_INT 100
48032: EQUAL
48033: IFFALSE 49036
// begin if not StreamModeActive then
48035: LD_EXP 30
48039: NOT
48040: IFFALSE 48050
// StreamModeActive := true ;
48042: LD_ADDR_EXP 30
48046: PUSH
48047: LD_INT 1
48049: ST_TO_ADDR
// if p3 = 0 then
48050: LD_VAR 0 3
48054: PUSH
48055: LD_INT 0
48057: EQUAL
48058: IFFALSE 48064
// InitStreamMode ;
48060: CALL 49240 0 0
// if p3 = 1 then
48064: LD_VAR 0 3
48068: PUSH
48069: LD_INT 1
48071: EQUAL
48072: IFFALSE 48082
// sRocket := true ;
48074: LD_ADDR_EXP 35
48078: PUSH
48079: LD_INT 1
48081: ST_TO_ADDR
// if p3 = 2 then
48082: LD_VAR 0 3
48086: PUSH
48087: LD_INT 2
48089: EQUAL
48090: IFFALSE 48100
// sSpeed := true ;
48092: LD_ADDR_EXP 34
48096: PUSH
48097: LD_INT 1
48099: ST_TO_ADDR
// if p3 = 3 then
48100: LD_VAR 0 3
48104: PUSH
48105: LD_INT 3
48107: EQUAL
48108: IFFALSE 48118
// sEngine := true ;
48110: LD_ADDR_EXP 36
48114: PUSH
48115: LD_INT 1
48117: ST_TO_ADDR
// if p3 = 4 then
48118: LD_VAR 0 3
48122: PUSH
48123: LD_INT 4
48125: EQUAL
48126: IFFALSE 48136
// sSpec := true ;
48128: LD_ADDR_EXP 33
48132: PUSH
48133: LD_INT 1
48135: ST_TO_ADDR
// if p3 = 5 then
48136: LD_VAR 0 3
48140: PUSH
48141: LD_INT 5
48143: EQUAL
48144: IFFALSE 48154
// sLevel := true ;
48146: LD_ADDR_EXP 37
48150: PUSH
48151: LD_INT 1
48153: ST_TO_ADDR
// if p3 = 6 then
48154: LD_VAR 0 3
48158: PUSH
48159: LD_INT 6
48161: EQUAL
48162: IFFALSE 48172
// sArmoury := true ;
48164: LD_ADDR_EXP 38
48168: PUSH
48169: LD_INT 1
48171: ST_TO_ADDR
// if p3 = 7 then
48172: LD_VAR 0 3
48176: PUSH
48177: LD_INT 7
48179: EQUAL
48180: IFFALSE 48190
// sRadar := true ;
48182: LD_ADDR_EXP 39
48186: PUSH
48187: LD_INT 1
48189: ST_TO_ADDR
// if p3 = 8 then
48190: LD_VAR 0 3
48194: PUSH
48195: LD_INT 8
48197: EQUAL
48198: IFFALSE 48208
// sBunker := true ;
48200: LD_ADDR_EXP 40
48204: PUSH
48205: LD_INT 1
48207: ST_TO_ADDR
// if p3 = 9 then
48208: LD_VAR 0 3
48212: PUSH
48213: LD_INT 9
48215: EQUAL
48216: IFFALSE 48226
// sHack := true ;
48218: LD_ADDR_EXP 41
48222: PUSH
48223: LD_INT 1
48225: ST_TO_ADDR
// if p3 = 10 then
48226: LD_VAR 0 3
48230: PUSH
48231: LD_INT 10
48233: EQUAL
48234: IFFALSE 48244
// sFire := true ;
48236: LD_ADDR_EXP 42
48240: PUSH
48241: LD_INT 1
48243: ST_TO_ADDR
// if p3 = 11 then
48244: LD_VAR 0 3
48248: PUSH
48249: LD_INT 11
48251: EQUAL
48252: IFFALSE 48262
// sRefresh := true ;
48254: LD_ADDR_EXP 43
48258: PUSH
48259: LD_INT 1
48261: ST_TO_ADDR
// if p3 = 12 then
48262: LD_VAR 0 3
48266: PUSH
48267: LD_INT 12
48269: EQUAL
48270: IFFALSE 48280
// sExp := true ;
48272: LD_ADDR_EXP 44
48276: PUSH
48277: LD_INT 1
48279: ST_TO_ADDR
// if p3 = 13 then
48280: LD_VAR 0 3
48284: PUSH
48285: LD_INT 13
48287: EQUAL
48288: IFFALSE 48298
// sDepot := true ;
48290: LD_ADDR_EXP 45
48294: PUSH
48295: LD_INT 1
48297: ST_TO_ADDR
// if p3 = 14 then
48298: LD_VAR 0 3
48302: PUSH
48303: LD_INT 14
48305: EQUAL
48306: IFFALSE 48316
// sFlag := true ;
48308: LD_ADDR_EXP 46
48312: PUSH
48313: LD_INT 1
48315: ST_TO_ADDR
// if p3 = 15 then
48316: LD_VAR 0 3
48320: PUSH
48321: LD_INT 15
48323: EQUAL
48324: IFFALSE 48334
// sKamikadze := true ;
48326: LD_ADDR_EXP 54
48330: PUSH
48331: LD_INT 1
48333: ST_TO_ADDR
// if p3 = 16 then
48334: LD_VAR 0 3
48338: PUSH
48339: LD_INT 16
48341: EQUAL
48342: IFFALSE 48352
// sTroll := true ;
48344: LD_ADDR_EXP 55
48348: PUSH
48349: LD_INT 1
48351: ST_TO_ADDR
// if p3 = 17 then
48352: LD_VAR 0 3
48356: PUSH
48357: LD_INT 17
48359: EQUAL
48360: IFFALSE 48370
// sSlow := true ;
48362: LD_ADDR_EXP 56
48366: PUSH
48367: LD_INT 1
48369: ST_TO_ADDR
// if p3 = 18 then
48370: LD_VAR 0 3
48374: PUSH
48375: LD_INT 18
48377: EQUAL
48378: IFFALSE 48388
// sLack := true ;
48380: LD_ADDR_EXP 57
48384: PUSH
48385: LD_INT 1
48387: ST_TO_ADDR
// if p3 = 19 then
48388: LD_VAR 0 3
48392: PUSH
48393: LD_INT 19
48395: EQUAL
48396: IFFALSE 48406
// sTank := true ;
48398: LD_ADDR_EXP 59
48402: PUSH
48403: LD_INT 1
48405: ST_TO_ADDR
// if p3 = 20 then
48406: LD_VAR 0 3
48410: PUSH
48411: LD_INT 20
48413: EQUAL
48414: IFFALSE 48424
// sRemote := true ;
48416: LD_ADDR_EXP 60
48420: PUSH
48421: LD_INT 1
48423: ST_TO_ADDR
// if p3 = 21 then
48424: LD_VAR 0 3
48428: PUSH
48429: LD_INT 21
48431: EQUAL
48432: IFFALSE 48442
// sPowell := true ;
48434: LD_ADDR_EXP 61
48438: PUSH
48439: LD_INT 1
48441: ST_TO_ADDR
// if p3 = 22 then
48442: LD_VAR 0 3
48446: PUSH
48447: LD_INT 22
48449: EQUAL
48450: IFFALSE 48460
// sTeleport := true ;
48452: LD_ADDR_EXP 64
48456: PUSH
48457: LD_INT 1
48459: ST_TO_ADDR
// if p3 = 23 then
48460: LD_VAR 0 3
48464: PUSH
48465: LD_INT 23
48467: EQUAL
48468: IFFALSE 48478
// sOilTower := true ;
48470: LD_ADDR_EXP 66
48474: PUSH
48475: LD_INT 1
48477: ST_TO_ADDR
// if p3 = 24 then
48478: LD_VAR 0 3
48482: PUSH
48483: LD_INT 24
48485: EQUAL
48486: IFFALSE 48496
// sShovel := true ;
48488: LD_ADDR_EXP 67
48492: PUSH
48493: LD_INT 1
48495: ST_TO_ADDR
// if p3 = 25 then
48496: LD_VAR 0 3
48500: PUSH
48501: LD_INT 25
48503: EQUAL
48504: IFFALSE 48514
// sSheik := true ;
48506: LD_ADDR_EXP 68
48510: PUSH
48511: LD_INT 1
48513: ST_TO_ADDR
// if p3 = 26 then
48514: LD_VAR 0 3
48518: PUSH
48519: LD_INT 26
48521: EQUAL
48522: IFFALSE 48532
// sEarthquake := true ;
48524: LD_ADDR_EXP 70
48528: PUSH
48529: LD_INT 1
48531: ST_TO_ADDR
// if p3 = 27 then
48532: LD_VAR 0 3
48536: PUSH
48537: LD_INT 27
48539: EQUAL
48540: IFFALSE 48550
// sAI := true ;
48542: LD_ADDR_EXP 71
48546: PUSH
48547: LD_INT 1
48549: ST_TO_ADDR
// if p3 = 28 then
48550: LD_VAR 0 3
48554: PUSH
48555: LD_INT 28
48557: EQUAL
48558: IFFALSE 48568
// sCargo := true ;
48560: LD_ADDR_EXP 74
48564: PUSH
48565: LD_INT 1
48567: ST_TO_ADDR
// if p3 = 29 then
48568: LD_VAR 0 3
48572: PUSH
48573: LD_INT 29
48575: EQUAL
48576: IFFALSE 48586
// sDLaser := true ;
48578: LD_ADDR_EXP 75
48582: PUSH
48583: LD_INT 1
48585: ST_TO_ADDR
// if p3 = 30 then
48586: LD_VAR 0 3
48590: PUSH
48591: LD_INT 30
48593: EQUAL
48594: IFFALSE 48604
// sExchange := true ;
48596: LD_ADDR_EXP 76
48600: PUSH
48601: LD_INT 1
48603: ST_TO_ADDR
// if p3 = 31 then
48604: LD_VAR 0 3
48608: PUSH
48609: LD_INT 31
48611: EQUAL
48612: IFFALSE 48622
// sFac := true ;
48614: LD_ADDR_EXP 77
48618: PUSH
48619: LD_INT 1
48621: ST_TO_ADDR
// if p3 = 32 then
48622: LD_VAR 0 3
48626: PUSH
48627: LD_INT 32
48629: EQUAL
48630: IFFALSE 48640
// sPower := true ;
48632: LD_ADDR_EXP 78
48636: PUSH
48637: LD_INT 1
48639: ST_TO_ADDR
// if p3 = 33 then
48640: LD_VAR 0 3
48644: PUSH
48645: LD_INT 33
48647: EQUAL
48648: IFFALSE 48658
// sRandom := true ;
48650: LD_ADDR_EXP 79
48654: PUSH
48655: LD_INT 1
48657: ST_TO_ADDR
// if p3 = 34 then
48658: LD_VAR 0 3
48662: PUSH
48663: LD_INT 34
48665: EQUAL
48666: IFFALSE 48676
// sShield := true ;
48668: LD_ADDR_EXP 80
48672: PUSH
48673: LD_INT 1
48675: ST_TO_ADDR
// if p3 = 35 then
48676: LD_VAR 0 3
48680: PUSH
48681: LD_INT 35
48683: EQUAL
48684: IFFALSE 48694
// sTime := true ;
48686: LD_ADDR_EXP 81
48690: PUSH
48691: LD_INT 1
48693: ST_TO_ADDR
// if p3 = 36 then
48694: LD_VAR 0 3
48698: PUSH
48699: LD_INT 36
48701: EQUAL
48702: IFFALSE 48712
// sTools := true ;
48704: LD_ADDR_EXP 82
48708: PUSH
48709: LD_INT 1
48711: ST_TO_ADDR
// if p3 = 101 then
48712: LD_VAR 0 3
48716: PUSH
48717: LD_INT 101
48719: EQUAL
48720: IFFALSE 48730
// sSold := true ;
48722: LD_ADDR_EXP 47
48726: PUSH
48727: LD_INT 1
48729: ST_TO_ADDR
// if p3 = 102 then
48730: LD_VAR 0 3
48734: PUSH
48735: LD_INT 102
48737: EQUAL
48738: IFFALSE 48748
// sDiff := true ;
48740: LD_ADDR_EXP 48
48744: PUSH
48745: LD_INT 1
48747: ST_TO_ADDR
// if p3 = 103 then
48748: LD_VAR 0 3
48752: PUSH
48753: LD_INT 103
48755: EQUAL
48756: IFFALSE 48766
// sFog := true ;
48758: LD_ADDR_EXP 51
48762: PUSH
48763: LD_INT 1
48765: ST_TO_ADDR
// if p3 = 104 then
48766: LD_VAR 0 3
48770: PUSH
48771: LD_INT 104
48773: EQUAL
48774: IFFALSE 48784
// sReset := true ;
48776: LD_ADDR_EXP 52
48780: PUSH
48781: LD_INT 1
48783: ST_TO_ADDR
// if p3 = 105 then
48784: LD_VAR 0 3
48788: PUSH
48789: LD_INT 105
48791: EQUAL
48792: IFFALSE 48802
// sSun := true ;
48794: LD_ADDR_EXP 53
48798: PUSH
48799: LD_INT 1
48801: ST_TO_ADDR
// if p3 = 106 then
48802: LD_VAR 0 3
48806: PUSH
48807: LD_INT 106
48809: EQUAL
48810: IFFALSE 48820
// sTiger := true ;
48812: LD_ADDR_EXP 49
48816: PUSH
48817: LD_INT 1
48819: ST_TO_ADDR
// if p3 = 107 then
48820: LD_VAR 0 3
48824: PUSH
48825: LD_INT 107
48827: EQUAL
48828: IFFALSE 48838
// sBomb := true ;
48830: LD_ADDR_EXP 50
48834: PUSH
48835: LD_INT 1
48837: ST_TO_ADDR
// if p3 = 108 then
48838: LD_VAR 0 3
48842: PUSH
48843: LD_INT 108
48845: EQUAL
48846: IFFALSE 48856
// sWound := true ;
48848: LD_ADDR_EXP 58
48852: PUSH
48853: LD_INT 1
48855: ST_TO_ADDR
// if p3 = 109 then
48856: LD_VAR 0 3
48860: PUSH
48861: LD_INT 109
48863: EQUAL
48864: IFFALSE 48874
// sBetray := true ;
48866: LD_ADDR_EXP 62
48870: PUSH
48871: LD_INT 1
48873: ST_TO_ADDR
// if p3 = 110 then
48874: LD_VAR 0 3
48878: PUSH
48879: LD_INT 110
48881: EQUAL
48882: IFFALSE 48892
// sContamin := true ;
48884: LD_ADDR_EXP 63
48888: PUSH
48889: LD_INT 1
48891: ST_TO_ADDR
// if p3 = 111 then
48892: LD_VAR 0 3
48896: PUSH
48897: LD_INT 111
48899: EQUAL
48900: IFFALSE 48910
// sOil := true ;
48902: LD_ADDR_EXP 65
48906: PUSH
48907: LD_INT 1
48909: ST_TO_ADDR
// if p3 = 112 then
48910: LD_VAR 0 3
48914: PUSH
48915: LD_INT 112
48917: EQUAL
48918: IFFALSE 48928
// sStu := true ;
48920: LD_ADDR_EXP 69
48924: PUSH
48925: LD_INT 1
48927: ST_TO_ADDR
// if p3 = 113 then
48928: LD_VAR 0 3
48932: PUSH
48933: LD_INT 113
48935: EQUAL
48936: IFFALSE 48946
// sBazooka := true ;
48938: LD_ADDR_EXP 72
48942: PUSH
48943: LD_INT 1
48945: ST_TO_ADDR
// if p3 = 114 then
48946: LD_VAR 0 3
48950: PUSH
48951: LD_INT 114
48953: EQUAL
48954: IFFALSE 48964
// sMortar := true ;
48956: LD_ADDR_EXP 73
48960: PUSH
48961: LD_INT 1
48963: ST_TO_ADDR
// if p3 = 115 then
48964: LD_VAR 0 3
48968: PUSH
48969: LD_INT 115
48971: EQUAL
48972: IFFALSE 48982
// sRanger := true ;
48974: LD_ADDR_EXP 83
48978: PUSH
48979: LD_INT 1
48981: ST_TO_ADDR
// if p3 = 116 then
48982: LD_VAR 0 3
48986: PUSH
48987: LD_INT 116
48989: EQUAL
48990: IFFALSE 49000
// sComputer := true ;
48992: LD_ADDR_EXP 84
48996: PUSH
48997: LD_INT 1
48999: ST_TO_ADDR
// if p3 = 117 then
49000: LD_VAR 0 3
49004: PUSH
49005: LD_INT 117
49007: EQUAL
49008: IFFALSE 49018
// s30 := true ;
49010: LD_ADDR_EXP 85
49014: PUSH
49015: LD_INT 1
49017: ST_TO_ADDR
// if p3 = 118 then
49018: LD_VAR 0 3
49022: PUSH
49023: LD_INT 118
49025: EQUAL
49026: IFFALSE 49036
// s60 := true ;
49028: LD_ADDR_EXP 86
49032: PUSH
49033: LD_INT 1
49035: ST_TO_ADDR
// end ; if p2 = hack_mode then
49036: LD_VAR 0 2
49040: PUSH
49041: LD_INT 101
49043: EQUAL
49044: IFFALSE 49172
// begin case p3 of 1 :
49046: LD_VAR 0 3
49050: PUSH
49051: LD_INT 1
49053: DOUBLE
49054: EQUAL
49055: IFTRUE 49059
49057: GO 49066
49059: POP
// hHackUnlimitedResources ; 2 :
49060: CALL 61311 0 0
49064: GO 49172
49066: LD_INT 2
49068: DOUBLE
49069: EQUAL
49070: IFTRUE 49074
49072: GO 49081
49074: POP
// hHackSetLevel10 ; 3 :
49075: CALL 61444 0 0
49079: GO 49172
49081: LD_INT 3
49083: DOUBLE
49084: EQUAL
49085: IFTRUE 49089
49087: GO 49096
49089: POP
// hHackSetLevel10YourUnits ; 4 :
49090: CALL 61529 0 0
49094: GO 49172
49096: LD_INT 4
49098: DOUBLE
49099: EQUAL
49100: IFTRUE 49104
49102: GO 49111
49104: POP
// hHackInvincible ; 5 :
49105: CALL 61977 0 0
49109: GO 49172
49111: LD_INT 5
49113: DOUBLE
49114: EQUAL
49115: IFTRUE 49119
49117: GO 49126
49119: POP
// hHackInvisible ; 6 :
49120: CALL 62088 0 0
49124: GO 49172
49126: LD_INT 6
49128: DOUBLE
49129: EQUAL
49130: IFTRUE 49134
49132: GO 49141
49134: POP
// hHackChangeYourSide ; 7 :
49135: CALL 62145 0 0
49139: GO 49172
49141: LD_INT 7
49143: DOUBLE
49144: EQUAL
49145: IFTRUE 49149
49147: GO 49156
49149: POP
// hHackChangeUnitSide ; 8 :
49150: CALL 62187 0 0
49154: GO 49172
49156: LD_INT 8
49158: DOUBLE
49159: EQUAL
49160: IFTRUE 49164
49162: GO 49171
49164: POP
// hHackFog ; end ;
49165: CALL 62288 0 0
49169: GO 49172
49171: POP
// end ; if p2 = game_save_mode then
49172: LD_VAR 0 2
49176: PUSH
49177: LD_INT 102
49179: EQUAL
49180: IFFALSE 49235
// begin if p3 = 1 then
49182: LD_VAR 0 3
49186: PUSH
49187: LD_INT 1
49189: EQUAL
49190: IFFALSE 49202
// globalGameSaveCounter := p4 ;
49192: LD_ADDR_EXP 29
49196: PUSH
49197: LD_VAR 0 4
49201: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49202: LD_VAR 0 3
49206: PUSH
49207: LD_INT 2
49209: EQUAL
49210: PUSH
49211: LD_EXP 29
49215: AND
49216: IFFALSE 49235
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49218: LD_STRING setGameSaveCounter(
49220: PUSH
49221: LD_EXP 29
49225: STR
49226: PUSH
49227: LD_STRING )
49229: STR
49230: PPUSH
49231: CALL_OW 559
// end ; end ;
49235: LD_VAR 0 7
49239: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49240: LD_INT 0
49242: PPUSH
// streamModeActive := false ;
49243: LD_ADDR_EXP 30
49247: PUSH
49248: LD_INT 0
49250: ST_TO_ADDR
// normalCounter := 36 ;
49251: LD_ADDR_EXP 31
49255: PUSH
49256: LD_INT 36
49258: ST_TO_ADDR
// hardcoreCounter := 18 ;
49259: LD_ADDR_EXP 32
49263: PUSH
49264: LD_INT 18
49266: ST_TO_ADDR
// sRocket := false ;
49267: LD_ADDR_EXP 35
49271: PUSH
49272: LD_INT 0
49274: ST_TO_ADDR
// sSpeed := false ;
49275: LD_ADDR_EXP 34
49279: PUSH
49280: LD_INT 0
49282: ST_TO_ADDR
// sEngine := false ;
49283: LD_ADDR_EXP 36
49287: PUSH
49288: LD_INT 0
49290: ST_TO_ADDR
// sSpec := false ;
49291: LD_ADDR_EXP 33
49295: PUSH
49296: LD_INT 0
49298: ST_TO_ADDR
// sLevel := false ;
49299: LD_ADDR_EXP 37
49303: PUSH
49304: LD_INT 0
49306: ST_TO_ADDR
// sArmoury := false ;
49307: LD_ADDR_EXP 38
49311: PUSH
49312: LD_INT 0
49314: ST_TO_ADDR
// sRadar := false ;
49315: LD_ADDR_EXP 39
49319: PUSH
49320: LD_INT 0
49322: ST_TO_ADDR
// sBunker := false ;
49323: LD_ADDR_EXP 40
49327: PUSH
49328: LD_INT 0
49330: ST_TO_ADDR
// sHack := false ;
49331: LD_ADDR_EXP 41
49335: PUSH
49336: LD_INT 0
49338: ST_TO_ADDR
// sFire := false ;
49339: LD_ADDR_EXP 42
49343: PUSH
49344: LD_INT 0
49346: ST_TO_ADDR
// sRefresh := false ;
49347: LD_ADDR_EXP 43
49351: PUSH
49352: LD_INT 0
49354: ST_TO_ADDR
// sExp := false ;
49355: LD_ADDR_EXP 44
49359: PUSH
49360: LD_INT 0
49362: ST_TO_ADDR
// sDepot := false ;
49363: LD_ADDR_EXP 45
49367: PUSH
49368: LD_INT 0
49370: ST_TO_ADDR
// sFlag := false ;
49371: LD_ADDR_EXP 46
49375: PUSH
49376: LD_INT 0
49378: ST_TO_ADDR
// sKamikadze := false ;
49379: LD_ADDR_EXP 54
49383: PUSH
49384: LD_INT 0
49386: ST_TO_ADDR
// sTroll := false ;
49387: LD_ADDR_EXP 55
49391: PUSH
49392: LD_INT 0
49394: ST_TO_ADDR
// sSlow := false ;
49395: LD_ADDR_EXP 56
49399: PUSH
49400: LD_INT 0
49402: ST_TO_ADDR
// sLack := false ;
49403: LD_ADDR_EXP 57
49407: PUSH
49408: LD_INT 0
49410: ST_TO_ADDR
// sTank := false ;
49411: LD_ADDR_EXP 59
49415: PUSH
49416: LD_INT 0
49418: ST_TO_ADDR
// sRemote := false ;
49419: LD_ADDR_EXP 60
49423: PUSH
49424: LD_INT 0
49426: ST_TO_ADDR
// sPowell := false ;
49427: LD_ADDR_EXP 61
49431: PUSH
49432: LD_INT 0
49434: ST_TO_ADDR
// sTeleport := false ;
49435: LD_ADDR_EXP 64
49439: PUSH
49440: LD_INT 0
49442: ST_TO_ADDR
// sOilTower := false ;
49443: LD_ADDR_EXP 66
49447: PUSH
49448: LD_INT 0
49450: ST_TO_ADDR
// sShovel := false ;
49451: LD_ADDR_EXP 67
49455: PUSH
49456: LD_INT 0
49458: ST_TO_ADDR
// sSheik := false ;
49459: LD_ADDR_EXP 68
49463: PUSH
49464: LD_INT 0
49466: ST_TO_ADDR
// sEarthquake := false ;
49467: LD_ADDR_EXP 70
49471: PUSH
49472: LD_INT 0
49474: ST_TO_ADDR
// sAI := false ;
49475: LD_ADDR_EXP 71
49479: PUSH
49480: LD_INT 0
49482: ST_TO_ADDR
// sCargo := false ;
49483: LD_ADDR_EXP 74
49487: PUSH
49488: LD_INT 0
49490: ST_TO_ADDR
// sDLaser := false ;
49491: LD_ADDR_EXP 75
49495: PUSH
49496: LD_INT 0
49498: ST_TO_ADDR
// sExchange := false ;
49499: LD_ADDR_EXP 76
49503: PUSH
49504: LD_INT 0
49506: ST_TO_ADDR
// sFac := false ;
49507: LD_ADDR_EXP 77
49511: PUSH
49512: LD_INT 0
49514: ST_TO_ADDR
// sPower := false ;
49515: LD_ADDR_EXP 78
49519: PUSH
49520: LD_INT 0
49522: ST_TO_ADDR
// sRandom := false ;
49523: LD_ADDR_EXP 79
49527: PUSH
49528: LD_INT 0
49530: ST_TO_ADDR
// sShield := false ;
49531: LD_ADDR_EXP 80
49535: PUSH
49536: LD_INT 0
49538: ST_TO_ADDR
// sTime := false ;
49539: LD_ADDR_EXP 81
49543: PUSH
49544: LD_INT 0
49546: ST_TO_ADDR
// sTools := false ;
49547: LD_ADDR_EXP 82
49551: PUSH
49552: LD_INT 0
49554: ST_TO_ADDR
// sSold := false ;
49555: LD_ADDR_EXP 47
49559: PUSH
49560: LD_INT 0
49562: ST_TO_ADDR
// sDiff := false ;
49563: LD_ADDR_EXP 48
49567: PUSH
49568: LD_INT 0
49570: ST_TO_ADDR
// sFog := false ;
49571: LD_ADDR_EXP 51
49575: PUSH
49576: LD_INT 0
49578: ST_TO_ADDR
// sReset := false ;
49579: LD_ADDR_EXP 52
49583: PUSH
49584: LD_INT 0
49586: ST_TO_ADDR
// sSun := false ;
49587: LD_ADDR_EXP 53
49591: PUSH
49592: LD_INT 0
49594: ST_TO_ADDR
// sTiger := false ;
49595: LD_ADDR_EXP 49
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// sBomb := false ;
49603: LD_ADDR_EXP 50
49607: PUSH
49608: LD_INT 0
49610: ST_TO_ADDR
// sWound := false ;
49611: LD_ADDR_EXP 58
49615: PUSH
49616: LD_INT 0
49618: ST_TO_ADDR
// sBetray := false ;
49619: LD_ADDR_EXP 62
49623: PUSH
49624: LD_INT 0
49626: ST_TO_ADDR
// sContamin := false ;
49627: LD_ADDR_EXP 63
49631: PUSH
49632: LD_INT 0
49634: ST_TO_ADDR
// sOil := false ;
49635: LD_ADDR_EXP 65
49639: PUSH
49640: LD_INT 0
49642: ST_TO_ADDR
// sStu := false ;
49643: LD_ADDR_EXP 69
49647: PUSH
49648: LD_INT 0
49650: ST_TO_ADDR
// sBazooka := false ;
49651: LD_ADDR_EXP 72
49655: PUSH
49656: LD_INT 0
49658: ST_TO_ADDR
// sMortar := false ;
49659: LD_ADDR_EXP 73
49663: PUSH
49664: LD_INT 0
49666: ST_TO_ADDR
// sRanger := false ;
49667: LD_ADDR_EXP 83
49671: PUSH
49672: LD_INT 0
49674: ST_TO_ADDR
// sComputer := false ;
49675: LD_ADDR_EXP 84
49679: PUSH
49680: LD_INT 0
49682: ST_TO_ADDR
// s30 := false ;
49683: LD_ADDR_EXP 85
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// s60 := false ;
49691: LD_ADDR_EXP 86
49695: PUSH
49696: LD_INT 0
49698: ST_TO_ADDR
// end ;
49699: LD_VAR 0 1
49703: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49704: LD_INT 0
49706: PPUSH
49707: PPUSH
49708: PPUSH
49709: PPUSH
49710: PPUSH
49711: PPUSH
49712: PPUSH
// result := [ ] ;
49713: LD_ADDR_VAR 0 2
49717: PUSH
49718: EMPTY
49719: ST_TO_ADDR
// if campaign_id = 1 then
49720: LD_OWVAR 69
49724: PUSH
49725: LD_INT 1
49727: EQUAL
49728: IFFALSE 52894
// begin case mission_number of 1 :
49730: LD_OWVAR 70
49734: PUSH
49735: LD_INT 1
49737: DOUBLE
49738: EQUAL
49739: IFTRUE 49743
49741: GO 49819
49743: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49744: LD_ADDR_VAR 0 2
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 4
49754: PUSH
49755: LD_INT 11
49757: PUSH
49758: LD_INT 12
49760: PUSH
49761: LD_INT 15
49763: PUSH
49764: LD_INT 16
49766: PUSH
49767: LD_INT 22
49769: PUSH
49770: LD_INT 23
49772: PUSH
49773: LD_INT 26
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 101
49789: PUSH
49790: LD_INT 102
49792: PUSH
49793: LD_INT 106
49795: PUSH
49796: LD_INT 116
49798: PUSH
49799: LD_INT 117
49801: PUSH
49802: LD_INT 118
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: ST_TO_ADDR
49817: GO 52892
49819: LD_INT 2
49821: DOUBLE
49822: EQUAL
49823: IFTRUE 49827
49825: GO 49911
49827: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49828: LD_ADDR_VAR 0 2
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 4
49838: PUSH
49839: LD_INT 11
49841: PUSH
49842: LD_INT 12
49844: PUSH
49845: LD_INT 15
49847: PUSH
49848: LD_INT 16
49850: PUSH
49851: LD_INT 22
49853: PUSH
49854: LD_INT 23
49856: PUSH
49857: LD_INT 26
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 101
49873: PUSH
49874: LD_INT 102
49876: PUSH
49877: LD_INT 105
49879: PUSH
49880: LD_INT 106
49882: PUSH
49883: LD_INT 108
49885: PUSH
49886: LD_INT 116
49888: PUSH
49889: LD_INT 117
49891: PUSH
49892: LD_INT 118
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: ST_TO_ADDR
49909: GO 52892
49911: LD_INT 3
49913: DOUBLE
49914: EQUAL
49915: IFTRUE 49919
49917: GO 50007
49919: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49920: LD_ADDR_VAR 0 2
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: LD_INT 4
49930: PUSH
49931: LD_INT 5
49933: PUSH
49934: LD_INT 11
49936: PUSH
49937: LD_INT 12
49939: PUSH
49940: LD_INT 15
49942: PUSH
49943: LD_INT 16
49945: PUSH
49946: LD_INT 22
49948: PUSH
49949: LD_INT 26
49951: PUSH
49952: LD_INT 36
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 101
49969: PUSH
49970: LD_INT 102
49972: PUSH
49973: LD_INT 105
49975: PUSH
49976: LD_INT 106
49978: PUSH
49979: LD_INT 108
49981: PUSH
49982: LD_INT 116
49984: PUSH
49985: LD_INT 117
49987: PUSH
49988: LD_INT 118
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: ST_TO_ADDR
50005: GO 52892
50007: LD_INT 4
50009: DOUBLE
50010: EQUAL
50011: IFTRUE 50015
50013: GO 50111
50015: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50016: LD_ADDR_VAR 0 2
50020: PUSH
50021: LD_INT 2
50023: PUSH
50024: LD_INT 4
50026: PUSH
50027: LD_INT 5
50029: PUSH
50030: LD_INT 8
50032: PUSH
50033: LD_INT 11
50035: PUSH
50036: LD_INT 12
50038: PUSH
50039: LD_INT 15
50041: PUSH
50042: LD_INT 16
50044: PUSH
50045: LD_INT 22
50047: PUSH
50048: LD_INT 23
50050: PUSH
50051: LD_INT 26
50053: PUSH
50054: LD_INT 36
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 101
50073: PUSH
50074: LD_INT 102
50076: PUSH
50077: LD_INT 105
50079: PUSH
50080: LD_INT 106
50082: PUSH
50083: LD_INT 108
50085: PUSH
50086: LD_INT 116
50088: PUSH
50089: LD_INT 117
50091: PUSH
50092: LD_INT 118
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: ST_TO_ADDR
50109: GO 52892
50111: LD_INT 5
50113: DOUBLE
50114: EQUAL
50115: IFTRUE 50119
50117: GO 50231
50119: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50120: LD_ADDR_VAR 0 2
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 4
50130: PUSH
50131: LD_INT 5
50133: PUSH
50134: LD_INT 6
50136: PUSH
50137: LD_INT 8
50139: PUSH
50140: LD_INT 11
50142: PUSH
50143: LD_INT 12
50145: PUSH
50146: LD_INT 15
50148: PUSH
50149: LD_INT 16
50151: PUSH
50152: LD_INT 22
50154: PUSH
50155: LD_INT 23
50157: PUSH
50158: LD_INT 25
50160: PUSH
50161: LD_INT 26
50163: PUSH
50164: LD_INT 36
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 101
50185: PUSH
50186: LD_INT 102
50188: PUSH
50189: LD_INT 105
50191: PUSH
50192: LD_INT 106
50194: PUSH
50195: LD_INT 108
50197: PUSH
50198: LD_INT 109
50200: PUSH
50201: LD_INT 112
50203: PUSH
50204: LD_INT 116
50206: PUSH
50207: LD_INT 117
50209: PUSH
50210: LD_INT 118
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: ST_TO_ADDR
50229: GO 52892
50231: LD_INT 6
50233: DOUBLE
50234: EQUAL
50235: IFTRUE 50239
50237: GO 50371
50239: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50240: LD_ADDR_VAR 0 2
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 4
50250: PUSH
50251: LD_INT 5
50253: PUSH
50254: LD_INT 6
50256: PUSH
50257: LD_INT 8
50259: PUSH
50260: LD_INT 11
50262: PUSH
50263: LD_INT 12
50265: PUSH
50266: LD_INT 15
50268: PUSH
50269: LD_INT 16
50271: PUSH
50272: LD_INT 20
50274: PUSH
50275: LD_INT 21
50277: PUSH
50278: LD_INT 22
50280: PUSH
50281: LD_INT 23
50283: PUSH
50284: LD_INT 25
50286: PUSH
50287: LD_INT 26
50289: PUSH
50290: LD_INT 30
50292: PUSH
50293: LD_INT 31
50295: PUSH
50296: LD_INT 32
50298: PUSH
50299: LD_INT 36
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 101
50325: PUSH
50326: LD_INT 102
50328: PUSH
50329: LD_INT 105
50331: PUSH
50332: LD_INT 106
50334: PUSH
50335: LD_INT 108
50337: PUSH
50338: LD_INT 109
50340: PUSH
50341: LD_INT 112
50343: PUSH
50344: LD_INT 116
50346: PUSH
50347: LD_INT 117
50349: PUSH
50350: LD_INT 118
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: ST_TO_ADDR
50369: GO 52892
50371: LD_INT 7
50373: DOUBLE
50374: EQUAL
50375: IFTRUE 50379
50377: GO 50491
50379: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50380: LD_ADDR_VAR 0 2
50384: PUSH
50385: LD_INT 2
50387: PUSH
50388: LD_INT 4
50390: PUSH
50391: LD_INT 5
50393: PUSH
50394: LD_INT 7
50396: PUSH
50397: LD_INT 11
50399: PUSH
50400: LD_INT 12
50402: PUSH
50403: LD_INT 15
50405: PUSH
50406: LD_INT 16
50408: PUSH
50409: LD_INT 20
50411: PUSH
50412: LD_INT 21
50414: PUSH
50415: LD_INT 22
50417: PUSH
50418: LD_INT 23
50420: PUSH
50421: LD_INT 25
50423: PUSH
50424: LD_INT 26
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 101
50445: PUSH
50446: LD_INT 102
50448: PUSH
50449: LD_INT 103
50451: PUSH
50452: LD_INT 105
50454: PUSH
50455: LD_INT 106
50457: PUSH
50458: LD_INT 108
50460: PUSH
50461: LD_INT 112
50463: PUSH
50464: LD_INT 116
50466: PUSH
50467: LD_INT 117
50469: PUSH
50470: LD_INT 118
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: ST_TO_ADDR
50489: GO 52892
50491: LD_INT 8
50493: DOUBLE
50494: EQUAL
50495: IFTRUE 50499
50497: GO 50639
50499: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50500: LD_ADDR_VAR 0 2
50504: PUSH
50505: LD_INT 2
50507: PUSH
50508: LD_INT 4
50510: PUSH
50511: LD_INT 5
50513: PUSH
50514: LD_INT 6
50516: PUSH
50517: LD_INT 7
50519: PUSH
50520: LD_INT 8
50522: PUSH
50523: LD_INT 11
50525: PUSH
50526: LD_INT 12
50528: PUSH
50529: LD_INT 15
50531: PUSH
50532: LD_INT 16
50534: PUSH
50535: LD_INT 20
50537: PUSH
50538: LD_INT 21
50540: PUSH
50541: LD_INT 22
50543: PUSH
50544: LD_INT 23
50546: PUSH
50547: LD_INT 25
50549: PUSH
50550: LD_INT 26
50552: PUSH
50553: LD_INT 30
50555: PUSH
50556: LD_INT 31
50558: PUSH
50559: LD_INT 32
50561: PUSH
50562: LD_INT 36
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 101
50589: PUSH
50590: LD_INT 102
50592: PUSH
50593: LD_INT 103
50595: PUSH
50596: LD_INT 105
50598: PUSH
50599: LD_INT 106
50601: PUSH
50602: LD_INT 108
50604: PUSH
50605: LD_INT 109
50607: PUSH
50608: LD_INT 112
50610: PUSH
50611: LD_INT 116
50613: PUSH
50614: LD_INT 117
50616: PUSH
50617: LD_INT 118
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: ST_TO_ADDR
50637: GO 52892
50639: LD_INT 9
50641: DOUBLE
50642: EQUAL
50643: IFTRUE 50647
50645: GO 50795
50647: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50648: LD_ADDR_VAR 0 2
50652: PUSH
50653: LD_INT 2
50655: PUSH
50656: LD_INT 4
50658: PUSH
50659: LD_INT 5
50661: PUSH
50662: LD_INT 6
50664: PUSH
50665: LD_INT 7
50667: PUSH
50668: LD_INT 8
50670: PUSH
50671: LD_INT 11
50673: PUSH
50674: LD_INT 12
50676: PUSH
50677: LD_INT 15
50679: PUSH
50680: LD_INT 16
50682: PUSH
50683: LD_INT 20
50685: PUSH
50686: LD_INT 21
50688: PUSH
50689: LD_INT 22
50691: PUSH
50692: LD_INT 23
50694: PUSH
50695: LD_INT 25
50697: PUSH
50698: LD_INT 26
50700: PUSH
50701: LD_INT 28
50703: PUSH
50704: LD_INT 30
50706: PUSH
50707: LD_INT 31
50709: PUSH
50710: LD_INT 32
50712: PUSH
50713: LD_INT 36
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 101
50741: PUSH
50742: LD_INT 102
50744: PUSH
50745: LD_INT 103
50747: PUSH
50748: LD_INT 105
50750: PUSH
50751: LD_INT 106
50753: PUSH
50754: LD_INT 108
50756: PUSH
50757: LD_INT 109
50759: PUSH
50760: LD_INT 112
50762: PUSH
50763: LD_INT 114
50765: PUSH
50766: LD_INT 116
50768: PUSH
50769: LD_INT 117
50771: PUSH
50772: LD_INT 118
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: ST_TO_ADDR
50793: GO 52892
50795: LD_INT 10
50797: DOUBLE
50798: EQUAL
50799: IFTRUE 50803
50801: GO 50999
50803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50804: LD_ADDR_VAR 0 2
50808: PUSH
50809: LD_INT 2
50811: PUSH
50812: LD_INT 4
50814: PUSH
50815: LD_INT 5
50817: PUSH
50818: LD_INT 6
50820: PUSH
50821: LD_INT 7
50823: PUSH
50824: LD_INT 8
50826: PUSH
50827: LD_INT 9
50829: PUSH
50830: LD_INT 10
50832: PUSH
50833: LD_INT 11
50835: PUSH
50836: LD_INT 12
50838: PUSH
50839: LD_INT 13
50841: PUSH
50842: LD_INT 14
50844: PUSH
50845: LD_INT 15
50847: PUSH
50848: LD_INT 16
50850: PUSH
50851: LD_INT 17
50853: PUSH
50854: LD_INT 18
50856: PUSH
50857: LD_INT 19
50859: PUSH
50860: LD_INT 20
50862: PUSH
50863: LD_INT 21
50865: PUSH
50866: LD_INT 22
50868: PUSH
50869: LD_INT 23
50871: PUSH
50872: LD_INT 24
50874: PUSH
50875: LD_INT 25
50877: PUSH
50878: LD_INT 26
50880: PUSH
50881: LD_INT 28
50883: PUSH
50884: LD_INT 30
50886: PUSH
50887: LD_INT 31
50889: PUSH
50890: LD_INT 32
50892: PUSH
50893: LD_INT 36
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 101
50929: PUSH
50930: LD_INT 102
50932: PUSH
50933: LD_INT 103
50935: PUSH
50936: LD_INT 104
50938: PUSH
50939: LD_INT 105
50941: PUSH
50942: LD_INT 106
50944: PUSH
50945: LD_INT 107
50947: PUSH
50948: LD_INT 108
50950: PUSH
50951: LD_INT 109
50953: PUSH
50954: LD_INT 110
50956: PUSH
50957: LD_INT 111
50959: PUSH
50960: LD_INT 112
50962: PUSH
50963: LD_INT 114
50965: PUSH
50966: LD_INT 116
50968: PUSH
50969: LD_INT 117
50971: PUSH
50972: LD_INT 118
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: ST_TO_ADDR
50997: GO 52892
50999: LD_INT 11
51001: DOUBLE
51002: EQUAL
51003: IFTRUE 51007
51005: GO 51211
51007: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51008: LD_ADDR_VAR 0 2
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: LD_INT 4
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: LD_INT 6
51027: PUSH
51028: LD_INT 7
51030: PUSH
51031: LD_INT 8
51033: PUSH
51034: LD_INT 9
51036: PUSH
51037: LD_INT 10
51039: PUSH
51040: LD_INT 11
51042: PUSH
51043: LD_INT 12
51045: PUSH
51046: LD_INT 13
51048: PUSH
51049: LD_INT 14
51051: PUSH
51052: LD_INT 15
51054: PUSH
51055: LD_INT 16
51057: PUSH
51058: LD_INT 17
51060: PUSH
51061: LD_INT 18
51063: PUSH
51064: LD_INT 19
51066: PUSH
51067: LD_INT 20
51069: PUSH
51070: LD_INT 21
51072: PUSH
51073: LD_INT 22
51075: PUSH
51076: LD_INT 23
51078: PUSH
51079: LD_INT 24
51081: PUSH
51082: LD_INT 25
51084: PUSH
51085: LD_INT 26
51087: PUSH
51088: LD_INT 28
51090: PUSH
51091: LD_INT 30
51093: PUSH
51094: LD_INT 31
51096: PUSH
51097: LD_INT 32
51099: PUSH
51100: LD_INT 34
51102: PUSH
51103: LD_INT 36
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 101
51141: PUSH
51142: LD_INT 102
51144: PUSH
51145: LD_INT 103
51147: PUSH
51148: LD_INT 104
51150: PUSH
51151: LD_INT 105
51153: PUSH
51154: LD_INT 106
51156: PUSH
51157: LD_INT 107
51159: PUSH
51160: LD_INT 108
51162: PUSH
51163: LD_INT 109
51165: PUSH
51166: LD_INT 110
51168: PUSH
51169: LD_INT 111
51171: PUSH
51172: LD_INT 112
51174: PUSH
51175: LD_INT 114
51177: PUSH
51178: LD_INT 116
51180: PUSH
51181: LD_INT 117
51183: PUSH
51184: LD_INT 118
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: ST_TO_ADDR
51209: GO 52892
51211: LD_INT 12
51213: DOUBLE
51214: EQUAL
51215: IFTRUE 51219
51217: GO 51439
51219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51220: LD_ADDR_VAR 0 2
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: LD_INT 2
51230: PUSH
51231: LD_INT 3
51233: PUSH
51234: LD_INT 4
51236: PUSH
51237: LD_INT 5
51239: PUSH
51240: LD_INT 6
51242: PUSH
51243: LD_INT 7
51245: PUSH
51246: LD_INT 8
51248: PUSH
51249: LD_INT 9
51251: PUSH
51252: LD_INT 10
51254: PUSH
51255: LD_INT 11
51257: PUSH
51258: LD_INT 12
51260: PUSH
51261: LD_INT 13
51263: PUSH
51264: LD_INT 14
51266: PUSH
51267: LD_INT 15
51269: PUSH
51270: LD_INT 16
51272: PUSH
51273: LD_INT 17
51275: PUSH
51276: LD_INT 18
51278: PUSH
51279: LD_INT 19
51281: PUSH
51282: LD_INT 20
51284: PUSH
51285: LD_INT 21
51287: PUSH
51288: LD_INT 22
51290: PUSH
51291: LD_INT 23
51293: PUSH
51294: LD_INT 24
51296: PUSH
51297: LD_INT 25
51299: PUSH
51300: LD_INT 26
51302: PUSH
51303: LD_INT 27
51305: PUSH
51306: LD_INT 28
51308: PUSH
51309: LD_INT 30
51311: PUSH
51312: LD_INT 31
51314: PUSH
51315: LD_INT 32
51317: PUSH
51318: LD_INT 33
51320: PUSH
51321: LD_INT 34
51323: PUSH
51324: LD_INT 36
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 101
51365: PUSH
51366: LD_INT 102
51368: PUSH
51369: LD_INT 103
51371: PUSH
51372: LD_INT 104
51374: PUSH
51375: LD_INT 105
51377: PUSH
51378: LD_INT 106
51380: PUSH
51381: LD_INT 107
51383: PUSH
51384: LD_INT 108
51386: PUSH
51387: LD_INT 109
51389: PUSH
51390: LD_INT 110
51392: PUSH
51393: LD_INT 111
51395: PUSH
51396: LD_INT 112
51398: PUSH
51399: LD_INT 113
51401: PUSH
51402: LD_INT 114
51404: PUSH
51405: LD_INT 116
51407: PUSH
51408: LD_INT 117
51410: PUSH
51411: LD_INT 118
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: ST_TO_ADDR
51437: GO 52892
51439: LD_INT 13
51441: DOUBLE
51442: EQUAL
51443: IFTRUE 51447
51445: GO 51655
51447: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51448: LD_ADDR_VAR 0 2
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 3
51461: PUSH
51462: LD_INT 4
51464: PUSH
51465: LD_INT 5
51467: PUSH
51468: LD_INT 8
51470: PUSH
51471: LD_INT 9
51473: PUSH
51474: LD_INT 10
51476: PUSH
51477: LD_INT 11
51479: PUSH
51480: LD_INT 12
51482: PUSH
51483: LD_INT 14
51485: PUSH
51486: LD_INT 15
51488: PUSH
51489: LD_INT 16
51491: PUSH
51492: LD_INT 17
51494: PUSH
51495: LD_INT 18
51497: PUSH
51498: LD_INT 19
51500: PUSH
51501: LD_INT 20
51503: PUSH
51504: LD_INT 21
51506: PUSH
51507: LD_INT 22
51509: PUSH
51510: LD_INT 23
51512: PUSH
51513: LD_INT 24
51515: PUSH
51516: LD_INT 25
51518: PUSH
51519: LD_INT 26
51521: PUSH
51522: LD_INT 27
51524: PUSH
51525: LD_INT 28
51527: PUSH
51528: LD_INT 30
51530: PUSH
51531: LD_INT 31
51533: PUSH
51534: LD_INT 32
51536: PUSH
51537: LD_INT 33
51539: PUSH
51540: LD_INT 34
51542: PUSH
51543: LD_INT 36
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 101
51581: PUSH
51582: LD_INT 102
51584: PUSH
51585: LD_INT 103
51587: PUSH
51588: LD_INT 104
51590: PUSH
51591: LD_INT 105
51593: PUSH
51594: LD_INT 106
51596: PUSH
51597: LD_INT 107
51599: PUSH
51600: LD_INT 108
51602: PUSH
51603: LD_INT 109
51605: PUSH
51606: LD_INT 110
51608: PUSH
51609: LD_INT 111
51611: PUSH
51612: LD_INT 112
51614: PUSH
51615: LD_INT 113
51617: PUSH
51618: LD_INT 114
51620: PUSH
51621: LD_INT 116
51623: PUSH
51624: LD_INT 117
51626: PUSH
51627: LD_INT 118
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: ST_TO_ADDR
51653: GO 52892
51655: LD_INT 14
51657: DOUBLE
51658: EQUAL
51659: IFTRUE 51663
51661: GO 51887
51663: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51664: LD_ADDR_VAR 0 2
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: LD_INT 3
51677: PUSH
51678: LD_INT 4
51680: PUSH
51681: LD_INT 5
51683: PUSH
51684: LD_INT 6
51686: PUSH
51687: LD_INT 7
51689: PUSH
51690: LD_INT 8
51692: PUSH
51693: LD_INT 9
51695: PUSH
51696: LD_INT 10
51698: PUSH
51699: LD_INT 11
51701: PUSH
51702: LD_INT 12
51704: PUSH
51705: LD_INT 13
51707: PUSH
51708: LD_INT 14
51710: PUSH
51711: LD_INT 15
51713: PUSH
51714: LD_INT 16
51716: PUSH
51717: LD_INT 17
51719: PUSH
51720: LD_INT 18
51722: PUSH
51723: LD_INT 19
51725: PUSH
51726: LD_INT 20
51728: PUSH
51729: LD_INT 21
51731: PUSH
51732: LD_INT 22
51734: PUSH
51735: LD_INT 23
51737: PUSH
51738: LD_INT 24
51740: PUSH
51741: LD_INT 25
51743: PUSH
51744: LD_INT 26
51746: PUSH
51747: LD_INT 27
51749: PUSH
51750: LD_INT 28
51752: PUSH
51753: LD_INT 29
51755: PUSH
51756: LD_INT 30
51758: PUSH
51759: LD_INT 31
51761: PUSH
51762: LD_INT 32
51764: PUSH
51765: LD_INT 33
51767: PUSH
51768: LD_INT 34
51770: PUSH
51771: LD_INT 36
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 101
51813: PUSH
51814: LD_INT 102
51816: PUSH
51817: LD_INT 103
51819: PUSH
51820: LD_INT 104
51822: PUSH
51823: LD_INT 105
51825: PUSH
51826: LD_INT 106
51828: PUSH
51829: LD_INT 107
51831: PUSH
51832: LD_INT 108
51834: PUSH
51835: LD_INT 109
51837: PUSH
51838: LD_INT 110
51840: PUSH
51841: LD_INT 111
51843: PUSH
51844: LD_INT 112
51846: PUSH
51847: LD_INT 113
51849: PUSH
51850: LD_INT 114
51852: PUSH
51853: LD_INT 116
51855: PUSH
51856: LD_INT 117
51858: PUSH
51859: LD_INT 118
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: ST_TO_ADDR
51885: GO 52892
51887: LD_INT 15
51889: DOUBLE
51890: EQUAL
51891: IFTRUE 51895
51893: GO 52119
51895: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51896: LD_ADDR_VAR 0 2
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 3
51909: PUSH
51910: LD_INT 4
51912: PUSH
51913: LD_INT 5
51915: PUSH
51916: LD_INT 6
51918: PUSH
51919: LD_INT 7
51921: PUSH
51922: LD_INT 8
51924: PUSH
51925: LD_INT 9
51927: PUSH
51928: LD_INT 10
51930: PUSH
51931: LD_INT 11
51933: PUSH
51934: LD_INT 12
51936: PUSH
51937: LD_INT 13
51939: PUSH
51940: LD_INT 14
51942: PUSH
51943: LD_INT 15
51945: PUSH
51946: LD_INT 16
51948: PUSH
51949: LD_INT 17
51951: PUSH
51952: LD_INT 18
51954: PUSH
51955: LD_INT 19
51957: PUSH
51958: LD_INT 20
51960: PUSH
51961: LD_INT 21
51963: PUSH
51964: LD_INT 22
51966: PUSH
51967: LD_INT 23
51969: PUSH
51970: LD_INT 24
51972: PUSH
51973: LD_INT 25
51975: PUSH
51976: LD_INT 26
51978: PUSH
51979: LD_INT 27
51981: PUSH
51982: LD_INT 28
51984: PUSH
51985: LD_INT 29
51987: PUSH
51988: LD_INT 30
51990: PUSH
51991: LD_INT 31
51993: PUSH
51994: LD_INT 32
51996: PUSH
51997: LD_INT 33
51999: PUSH
52000: LD_INT 34
52002: PUSH
52003: LD_INT 36
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 101
52045: PUSH
52046: LD_INT 102
52048: PUSH
52049: LD_INT 103
52051: PUSH
52052: LD_INT 104
52054: PUSH
52055: LD_INT 105
52057: PUSH
52058: LD_INT 106
52060: PUSH
52061: LD_INT 107
52063: PUSH
52064: LD_INT 108
52066: PUSH
52067: LD_INT 109
52069: PUSH
52070: LD_INT 110
52072: PUSH
52073: LD_INT 111
52075: PUSH
52076: LD_INT 112
52078: PUSH
52079: LD_INT 113
52081: PUSH
52082: LD_INT 114
52084: PUSH
52085: LD_INT 116
52087: PUSH
52088: LD_INT 117
52090: PUSH
52091: LD_INT 118
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: ST_TO_ADDR
52117: GO 52892
52119: LD_INT 16
52121: DOUBLE
52122: EQUAL
52123: IFTRUE 52127
52125: GO 52263
52127: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52128: LD_ADDR_VAR 0 2
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: LD_INT 4
52138: PUSH
52139: LD_INT 5
52141: PUSH
52142: LD_INT 7
52144: PUSH
52145: LD_INT 11
52147: PUSH
52148: LD_INT 12
52150: PUSH
52151: LD_INT 15
52153: PUSH
52154: LD_INT 16
52156: PUSH
52157: LD_INT 20
52159: PUSH
52160: LD_INT 21
52162: PUSH
52163: LD_INT 22
52165: PUSH
52166: LD_INT 23
52168: PUSH
52169: LD_INT 25
52171: PUSH
52172: LD_INT 26
52174: PUSH
52175: LD_INT 30
52177: PUSH
52178: LD_INT 31
52180: PUSH
52181: LD_INT 32
52183: PUSH
52184: LD_INT 33
52186: PUSH
52187: LD_INT 34
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 101
52213: PUSH
52214: LD_INT 102
52216: PUSH
52217: LD_INT 103
52219: PUSH
52220: LD_INT 106
52222: PUSH
52223: LD_INT 108
52225: PUSH
52226: LD_INT 112
52228: PUSH
52229: LD_INT 113
52231: PUSH
52232: LD_INT 114
52234: PUSH
52235: LD_INT 116
52237: PUSH
52238: LD_INT 117
52240: PUSH
52241: LD_INT 118
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: ST_TO_ADDR
52261: GO 52892
52263: LD_INT 17
52265: DOUBLE
52266: EQUAL
52267: IFTRUE 52271
52269: GO 52495
52271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52272: LD_ADDR_VAR 0 2
52276: PUSH
52277: LD_INT 1
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 3
52285: PUSH
52286: LD_INT 4
52288: PUSH
52289: LD_INT 5
52291: PUSH
52292: LD_INT 6
52294: PUSH
52295: LD_INT 7
52297: PUSH
52298: LD_INT 8
52300: PUSH
52301: LD_INT 9
52303: PUSH
52304: LD_INT 10
52306: PUSH
52307: LD_INT 11
52309: PUSH
52310: LD_INT 12
52312: PUSH
52313: LD_INT 13
52315: PUSH
52316: LD_INT 14
52318: PUSH
52319: LD_INT 15
52321: PUSH
52322: LD_INT 16
52324: PUSH
52325: LD_INT 17
52327: PUSH
52328: LD_INT 18
52330: PUSH
52331: LD_INT 19
52333: PUSH
52334: LD_INT 20
52336: PUSH
52337: LD_INT 21
52339: PUSH
52340: LD_INT 22
52342: PUSH
52343: LD_INT 23
52345: PUSH
52346: LD_INT 24
52348: PUSH
52349: LD_INT 25
52351: PUSH
52352: LD_INT 26
52354: PUSH
52355: LD_INT 27
52357: PUSH
52358: LD_INT 28
52360: PUSH
52361: LD_INT 29
52363: PUSH
52364: LD_INT 30
52366: PUSH
52367: LD_INT 31
52369: PUSH
52370: LD_INT 32
52372: PUSH
52373: LD_INT 33
52375: PUSH
52376: LD_INT 34
52378: PUSH
52379: LD_INT 36
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 101
52421: PUSH
52422: LD_INT 102
52424: PUSH
52425: LD_INT 103
52427: PUSH
52428: LD_INT 104
52430: PUSH
52431: LD_INT 105
52433: PUSH
52434: LD_INT 106
52436: PUSH
52437: LD_INT 107
52439: PUSH
52440: LD_INT 108
52442: PUSH
52443: LD_INT 109
52445: PUSH
52446: LD_INT 110
52448: PUSH
52449: LD_INT 111
52451: PUSH
52452: LD_INT 112
52454: PUSH
52455: LD_INT 113
52457: PUSH
52458: LD_INT 114
52460: PUSH
52461: LD_INT 116
52463: PUSH
52464: LD_INT 117
52466: PUSH
52467: LD_INT 118
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: ST_TO_ADDR
52493: GO 52892
52495: LD_INT 18
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52503
52501: GO 52651
52503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52504: LD_ADDR_VAR 0 2
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: LD_INT 4
52514: PUSH
52515: LD_INT 5
52517: PUSH
52518: LD_INT 7
52520: PUSH
52521: LD_INT 11
52523: PUSH
52524: LD_INT 12
52526: PUSH
52527: LD_INT 15
52529: PUSH
52530: LD_INT 16
52532: PUSH
52533: LD_INT 20
52535: PUSH
52536: LD_INT 21
52538: PUSH
52539: LD_INT 22
52541: PUSH
52542: LD_INT 23
52544: PUSH
52545: LD_INT 25
52547: PUSH
52548: LD_INT 26
52550: PUSH
52551: LD_INT 30
52553: PUSH
52554: LD_INT 31
52556: PUSH
52557: LD_INT 32
52559: PUSH
52560: LD_INT 33
52562: PUSH
52563: LD_INT 34
52565: PUSH
52566: LD_INT 35
52568: PUSH
52569: LD_INT 36
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 101
52597: PUSH
52598: LD_INT 102
52600: PUSH
52601: LD_INT 103
52603: PUSH
52604: LD_INT 106
52606: PUSH
52607: LD_INT 108
52609: PUSH
52610: LD_INT 112
52612: PUSH
52613: LD_INT 113
52615: PUSH
52616: LD_INT 114
52618: PUSH
52619: LD_INT 115
52621: PUSH
52622: LD_INT 116
52624: PUSH
52625: LD_INT 117
52627: PUSH
52628: LD_INT 118
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: ST_TO_ADDR
52649: GO 52892
52651: LD_INT 19
52653: DOUBLE
52654: EQUAL
52655: IFTRUE 52659
52657: GO 52891
52659: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52660: LD_ADDR_VAR 0 2
52664: PUSH
52665: LD_INT 1
52667: PUSH
52668: LD_INT 2
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: LD_INT 6
52682: PUSH
52683: LD_INT 7
52685: PUSH
52686: LD_INT 8
52688: PUSH
52689: LD_INT 9
52691: PUSH
52692: LD_INT 10
52694: PUSH
52695: LD_INT 11
52697: PUSH
52698: LD_INT 12
52700: PUSH
52701: LD_INT 13
52703: PUSH
52704: LD_INT 14
52706: PUSH
52707: LD_INT 15
52709: PUSH
52710: LD_INT 16
52712: PUSH
52713: LD_INT 17
52715: PUSH
52716: LD_INT 18
52718: PUSH
52719: LD_INT 19
52721: PUSH
52722: LD_INT 20
52724: PUSH
52725: LD_INT 21
52727: PUSH
52728: LD_INT 22
52730: PUSH
52731: LD_INT 23
52733: PUSH
52734: LD_INT 24
52736: PUSH
52737: LD_INT 25
52739: PUSH
52740: LD_INT 26
52742: PUSH
52743: LD_INT 27
52745: PUSH
52746: LD_INT 28
52748: PUSH
52749: LD_INT 29
52751: PUSH
52752: LD_INT 30
52754: PUSH
52755: LD_INT 31
52757: PUSH
52758: LD_INT 32
52760: PUSH
52761: LD_INT 33
52763: PUSH
52764: LD_INT 34
52766: PUSH
52767: LD_INT 35
52769: PUSH
52770: LD_INT 36
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 101
52813: PUSH
52814: LD_INT 102
52816: PUSH
52817: LD_INT 103
52819: PUSH
52820: LD_INT 104
52822: PUSH
52823: LD_INT 105
52825: PUSH
52826: LD_INT 106
52828: PUSH
52829: LD_INT 107
52831: PUSH
52832: LD_INT 108
52834: PUSH
52835: LD_INT 109
52837: PUSH
52838: LD_INT 110
52840: PUSH
52841: LD_INT 111
52843: PUSH
52844: LD_INT 112
52846: PUSH
52847: LD_INT 113
52849: PUSH
52850: LD_INT 114
52852: PUSH
52853: LD_INT 115
52855: PUSH
52856: LD_INT 116
52858: PUSH
52859: LD_INT 117
52861: PUSH
52862: LD_INT 118
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: ST_TO_ADDR
52889: GO 52892
52891: POP
// end else
52892: GO 53123
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52894: LD_ADDR_VAR 0 2
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 3
52907: PUSH
52908: LD_INT 4
52910: PUSH
52911: LD_INT 5
52913: PUSH
52914: LD_INT 6
52916: PUSH
52917: LD_INT 7
52919: PUSH
52920: LD_INT 8
52922: PUSH
52923: LD_INT 9
52925: PUSH
52926: LD_INT 10
52928: PUSH
52929: LD_INT 11
52931: PUSH
52932: LD_INT 12
52934: PUSH
52935: LD_INT 13
52937: PUSH
52938: LD_INT 14
52940: PUSH
52941: LD_INT 15
52943: PUSH
52944: LD_INT 16
52946: PUSH
52947: LD_INT 17
52949: PUSH
52950: LD_INT 18
52952: PUSH
52953: LD_INT 19
52955: PUSH
52956: LD_INT 20
52958: PUSH
52959: LD_INT 21
52961: PUSH
52962: LD_INT 22
52964: PUSH
52965: LD_INT 23
52967: PUSH
52968: LD_INT 24
52970: PUSH
52971: LD_INT 25
52973: PUSH
52974: LD_INT 26
52976: PUSH
52977: LD_INT 27
52979: PUSH
52980: LD_INT 28
52982: PUSH
52983: LD_INT 29
52985: PUSH
52986: LD_INT 30
52988: PUSH
52989: LD_INT 31
52991: PUSH
52992: LD_INT 32
52994: PUSH
52995: LD_INT 33
52997: PUSH
52998: LD_INT 34
53000: PUSH
53001: LD_INT 35
53003: PUSH
53004: LD_INT 36
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 101
53047: PUSH
53048: LD_INT 102
53050: PUSH
53051: LD_INT 103
53053: PUSH
53054: LD_INT 104
53056: PUSH
53057: LD_INT 105
53059: PUSH
53060: LD_INT 106
53062: PUSH
53063: LD_INT 107
53065: PUSH
53066: LD_INT 108
53068: PUSH
53069: LD_INT 109
53071: PUSH
53072: LD_INT 110
53074: PUSH
53075: LD_INT 111
53077: PUSH
53078: LD_INT 112
53080: PUSH
53081: LD_INT 113
53083: PUSH
53084: LD_INT 114
53086: PUSH
53087: LD_INT 115
53089: PUSH
53090: LD_INT 116
53092: PUSH
53093: LD_INT 117
53095: PUSH
53096: LD_INT 118
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: ST_TO_ADDR
// if result then
53123: LD_VAR 0 2
53127: IFFALSE 53913
// begin normal :=  ;
53129: LD_ADDR_VAR 0 5
53133: PUSH
53134: LD_STRING 
53136: ST_TO_ADDR
// hardcore :=  ;
53137: LD_ADDR_VAR 0 6
53141: PUSH
53142: LD_STRING 
53144: ST_TO_ADDR
// active :=  ;
53145: LD_ADDR_VAR 0 7
53149: PUSH
53150: LD_STRING 
53152: ST_TO_ADDR
// for i = 1 to normalCounter do
53153: LD_ADDR_VAR 0 8
53157: PUSH
53158: DOUBLE
53159: LD_INT 1
53161: DEC
53162: ST_TO_ADDR
53163: LD_EXP 31
53167: PUSH
53168: FOR_TO
53169: IFFALSE 53270
// begin tmp := 0 ;
53171: LD_ADDR_VAR 0 3
53175: PUSH
53176: LD_STRING 0
53178: ST_TO_ADDR
// if result [ 1 ] then
53179: LD_VAR 0 2
53183: PUSH
53184: LD_INT 1
53186: ARRAY
53187: IFFALSE 53252
// if result [ 1 ] [ 1 ] = i then
53189: LD_VAR 0 2
53193: PUSH
53194: LD_INT 1
53196: ARRAY
53197: PUSH
53198: LD_INT 1
53200: ARRAY
53201: PUSH
53202: LD_VAR 0 8
53206: EQUAL
53207: IFFALSE 53252
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53209: LD_ADDR_VAR 0 2
53213: PUSH
53214: LD_VAR 0 2
53218: PPUSH
53219: LD_INT 1
53221: PPUSH
53222: LD_VAR 0 2
53226: PUSH
53227: LD_INT 1
53229: ARRAY
53230: PPUSH
53231: LD_INT 1
53233: PPUSH
53234: CALL_OW 3
53238: PPUSH
53239: CALL_OW 1
53243: ST_TO_ADDR
// tmp := 1 ;
53244: LD_ADDR_VAR 0 3
53248: PUSH
53249: LD_STRING 1
53251: ST_TO_ADDR
// end ; normal := normal & tmp ;
53252: LD_ADDR_VAR 0 5
53256: PUSH
53257: LD_VAR 0 5
53261: PUSH
53262: LD_VAR 0 3
53266: STR
53267: ST_TO_ADDR
// end ;
53268: GO 53168
53270: POP
53271: POP
// for i = 1 to hardcoreCounter do
53272: LD_ADDR_VAR 0 8
53276: PUSH
53277: DOUBLE
53278: LD_INT 1
53280: DEC
53281: ST_TO_ADDR
53282: LD_EXP 32
53286: PUSH
53287: FOR_TO
53288: IFFALSE 53393
// begin tmp := 0 ;
53290: LD_ADDR_VAR 0 3
53294: PUSH
53295: LD_STRING 0
53297: ST_TO_ADDR
// if result [ 2 ] then
53298: LD_VAR 0 2
53302: PUSH
53303: LD_INT 2
53305: ARRAY
53306: IFFALSE 53375
// if result [ 2 ] [ 1 ] = 100 + i then
53308: LD_VAR 0 2
53312: PUSH
53313: LD_INT 2
53315: ARRAY
53316: PUSH
53317: LD_INT 1
53319: ARRAY
53320: PUSH
53321: LD_INT 100
53323: PUSH
53324: LD_VAR 0 8
53328: PLUS
53329: EQUAL
53330: IFFALSE 53375
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53332: LD_ADDR_VAR 0 2
53336: PUSH
53337: LD_VAR 0 2
53341: PPUSH
53342: LD_INT 2
53344: PPUSH
53345: LD_VAR 0 2
53349: PUSH
53350: LD_INT 2
53352: ARRAY
53353: PPUSH
53354: LD_INT 1
53356: PPUSH
53357: CALL_OW 3
53361: PPUSH
53362: CALL_OW 1
53366: ST_TO_ADDR
// tmp := 1 ;
53367: LD_ADDR_VAR 0 3
53371: PUSH
53372: LD_STRING 1
53374: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53375: LD_ADDR_VAR 0 6
53379: PUSH
53380: LD_VAR 0 6
53384: PUSH
53385: LD_VAR 0 3
53389: STR
53390: ST_TO_ADDR
// end ;
53391: GO 53287
53393: POP
53394: POP
// if isGameLoad then
53395: LD_VAR 0 1
53399: IFFALSE 53874
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53401: LD_ADDR_VAR 0 4
53405: PUSH
53406: LD_EXP 35
53410: PUSH
53411: LD_EXP 34
53415: PUSH
53416: LD_EXP 36
53420: PUSH
53421: LD_EXP 33
53425: PUSH
53426: LD_EXP 37
53430: PUSH
53431: LD_EXP 38
53435: PUSH
53436: LD_EXP 39
53440: PUSH
53441: LD_EXP 40
53445: PUSH
53446: LD_EXP 41
53450: PUSH
53451: LD_EXP 42
53455: PUSH
53456: LD_EXP 43
53460: PUSH
53461: LD_EXP 44
53465: PUSH
53466: LD_EXP 45
53470: PUSH
53471: LD_EXP 46
53475: PUSH
53476: LD_EXP 54
53480: PUSH
53481: LD_EXP 55
53485: PUSH
53486: LD_EXP 56
53490: PUSH
53491: LD_EXP 57
53495: PUSH
53496: LD_EXP 59
53500: PUSH
53501: LD_EXP 60
53505: PUSH
53506: LD_EXP 61
53510: PUSH
53511: LD_EXP 64
53515: PUSH
53516: LD_EXP 66
53520: PUSH
53521: LD_EXP 67
53525: PUSH
53526: LD_EXP 68
53530: PUSH
53531: LD_EXP 70
53535: PUSH
53536: LD_EXP 71
53540: PUSH
53541: LD_EXP 74
53545: PUSH
53546: LD_EXP 75
53550: PUSH
53551: LD_EXP 76
53555: PUSH
53556: LD_EXP 77
53560: PUSH
53561: LD_EXP 78
53565: PUSH
53566: LD_EXP 79
53570: PUSH
53571: LD_EXP 80
53575: PUSH
53576: LD_EXP 81
53580: PUSH
53581: LD_EXP 82
53585: PUSH
53586: LD_EXP 47
53590: PUSH
53591: LD_EXP 48
53595: PUSH
53596: LD_EXP 51
53600: PUSH
53601: LD_EXP 52
53605: PUSH
53606: LD_EXP 53
53610: PUSH
53611: LD_EXP 49
53615: PUSH
53616: LD_EXP 50
53620: PUSH
53621: LD_EXP 58
53625: PUSH
53626: LD_EXP 62
53630: PUSH
53631: LD_EXP 63
53635: PUSH
53636: LD_EXP 65
53640: PUSH
53641: LD_EXP 69
53645: PUSH
53646: LD_EXP 72
53650: PUSH
53651: LD_EXP 73
53655: PUSH
53656: LD_EXP 83
53660: PUSH
53661: LD_EXP 84
53665: PUSH
53666: LD_EXP 85
53670: PUSH
53671: LD_EXP 86
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: ST_TO_ADDR
// tmp :=  ;
53732: LD_ADDR_VAR 0 3
53736: PUSH
53737: LD_STRING 
53739: ST_TO_ADDR
// for i = 1 to normalCounter do
53740: LD_ADDR_VAR 0 8
53744: PUSH
53745: DOUBLE
53746: LD_INT 1
53748: DEC
53749: ST_TO_ADDR
53750: LD_EXP 31
53754: PUSH
53755: FOR_TO
53756: IFFALSE 53792
// begin if flags [ i ] then
53758: LD_VAR 0 4
53762: PUSH
53763: LD_VAR 0 8
53767: ARRAY
53768: IFFALSE 53790
// tmp := tmp & i & ; ;
53770: LD_ADDR_VAR 0 3
53774: PUSH
53775: LD_VAR 0 3
53779: PUSH
53780: LD_VAR 0 8
53784: STR
53785: PUSH
53786: LD_STRING ;
53788: STR
53789: ST_TO_ADDR
// end ;
53790: GO 53755
53792: POP
53793: POP
// for i = 1 to hardcoreCounter do
53794: LD_ADDR_VAR 0 8
53798: PUSH
53799: DOUBLE
53800: LD_INT 1
53802: DEC
53803: ST_TO_ADDR
53804: LD_EXP 32
53808: PUSH
53809: FOR_TO
53810: IFFALSE 53856
// begin if flags [ normalCounter + i ] then
53812: LD_VAR 0 4
53816: PUSH
53817: LD_EXP 31
53821: PUSH
53822: LD_VAR 0 8
53826: PLUS
53827: ARRAY
53828: IFFALSE 53854
// tmp := tmp & ( 100 + i ) & ; ;
53830: LD_ADDR_VAR 0 3
53834: PUSH
53835: LD_VAR 0 3
53839: PUSH
53840: LD_INT 100
53842: PUSH
53843: LD_VAR 0 8
53847: PLUS
53848: STR
53849: PUSH
53850: LD_STRING ;
53852: STR
53853: ST_TO_ADDR
// end ;
53854: GO 53809
53856: POP
53857: POP
// if tmp then
53858: LD_VAR 0 3
53862: IFFALSE 53874
// active := tmp ;
53864: LD_ADDR_VAR 0 7
53868: PUSH
53869: LD_VAR 0 3
53873: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53874: LD_STRING getStreamItemsFromMission("
53876: PUSH
53877: LD_VAR 0 5
53881: STR
53882: PUSH
53883: LD_STRING ","
53885: STR
53886: PUSH
53887: LD_VAR 0 6
53891: STR
53892: PUSH
53893: LD_STRING ","
53895: STR
53896: PUSH
53897: LD_VAR 0 7
53901: STR
53902: PUSH
53903: LD_STRING ")
53905: STR
53906: PPUSH
53907: CALL_OW 559
// end else
53911: GO 53920
// ToLua ( getStreamItemsFromMission("","","") ) ;
53913: LD_STRING getStreamItemsFromMission("","","")
53915: PPUSH
53916: CALL_OW 559
// end ;
53920: LD_VAR 0 2
53924: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53925: LD_EXP 30
53929: PUSH
53930: LD_EXP 35
53934: AND
53935: IFFALSE 54059
53937: GO 53939
53939: DISABLE
53940: LD_INT 0
53942: PPUSH
53943: PPUSH
// begin enable ;
53944: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
53945: LD_ADDR_VAR 0 2
53949: PUSH
53950: LD_INT 22
53952: PUSH
53953: LD_OWVAR 2
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: LD_INT 34
53967: PUSH
53968: LD_INT 7
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 34
53977: PUSH
53978: LD_INT 45
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 34
53987: PUSH
53988: LD_INT 28
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 34
53997: PUSH
53998: LD_INT 47
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PPUSH
54016: CALL_OW 69
54020: ST_TO_ADDR
// if not tmp then
54021: LD_VAR 0 2
54025: NOT
54026: IFFALSE 54030
// exit ;
54028: GO 54059
// for i in tmp do
54030: LD_ADDR_VAR 0 1
54034: PUSH
54035: LD_VAR 0 2
54039: PUSH
54040: FOR_IN
54041: IFFALSE 54057
// begin SetLives ( i , 0 ) ;
54043: LD_VAR 0 1
54047: PPUSH
54048: LD_INT 0
54050: PPUSH
54051: CALL_OW 234
// end ;
54055: GO 54040
54057: POP
54058: POP
// end ;
54059: PPOPN 2
54061: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54062: LD_EXP 30
54066: PUSH
54067: LD_EXP 36
54071: AND
54072: IFFALSE 54156
54074: GO 54076
54076: DISABLE
54077: LD_INT 0
54079: PPUSH
54080: PPUSH
// begin enable ;
54081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54082: LD_ADDR_VAR 0 2
54086: PUSH
54087: LD_INT 22
54089: PUSH
54090: LD_OWVAR 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 32
54101: PUSH
54102: LD_INT 3
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PPUSH
54113: CALL_OW 69
54117: ST_TO_ADDR
// if not tmp then
54118: LD_VAR 0 2
54122: NOT
54123: IFFALSE 54127
// exit ;
54125: GO 54156
// for i in tmp do
54127: LD_ADDR_VAR 0 1
54131: PUSH
54132: LD_VAR 0 2
54136: PUSH
54137: FOR_IN
54138: IFFALSE 54154
// begin SetLives ( i , 0 ) ;
54140: LD_VAR 0 1
54144: PPUSH
54145: LD_INT 0
54147: PPUSH
54148: CALL_OW 234
// end ;
54152: GO 54137
54154: POP
54155: POP
// end ;
54156: PPOPN 2
54158: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54159: LD_EXP 30
54163: PUSH
54164: LD_EXP 33
54168: AND
54169: IFFALSE 54262
54171: GO 54173
54173: DISABLE
54174: LD_INT 0
54176: PPUSH
// begin enable ;
54177: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54178: LD_ADDR_VAR 0 1
54182: PUSH
54183: LD_INT 22
54185: PUSH
54186: LD_OWVAR 2
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 25
54200: PUSH
54201: LD_INT 5
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 25
54210: PUSH
54211: LD_INT 9
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 25
54220: PUSH
54221: LD_INT 8
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PPUSH
54238: CALL_OW 69
54242: PUSH
54243: FOR_IN
54244: IFFALSE 54260
// begin SetClass ( i , 1 ) ;
54246: LD_VAR 0 1
54250: PPUSH
54251: LD_INT 1
54253: PPUSH
54254: CALL_OW 336
// end ;
54258: GO 54243
54260: POP
54261: POP
// end ;
54262: PPOPN 1
54264: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54265: LD_EXP 30
54269: PUSH
54270: LD_EXP 34
54274: AND
54275: PUSH
54276: LD_OWVAR 65
54280: PUSH
54281: LD_INT 7
54283: LESS
54284: AND
54285: IFFALSE 54299
54287: GO 54289
54289: DISABLE
// begin enable ;
54290: ENABLE
// game_speed := 7 ;
54291: LD_ADDR_OWVAR 65
54295: PUSH
54296: LD_INT 7
54298: ST_TO_ADDR
// end ;
54299: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54300: LD_EXP 30
54304: PUSH
54305: LD_EXP 37
54309: AND
54310: IFFALSE 54512
54312: GO 54314
54314: DISABLE
54315: LD_INT 0
54317: PPUSH
54318: PPUSH
54319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54320: LD_ADDR_VAR 0 3
54324: PUSH
54325: LD_INT 81
54327: PUSH
54328: LD_OWVAR 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 21
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PPUSH
54351: CALL_OW 69
54355: ST_TO_ADDR
// if not tmp then
54356: LD_VAR 0 3
54360: NOT
54361: IFFALSE 54365
// exit ;
54363: GO 54512
// if tmp > 5 then
54365: LD_VAR 0 3
54369: PUSH
54370: LD_INT 5
54372: GREATER
54373: IFFALSE 54385
// k := 5 else
54375: LD_ADDR_VAR 0 2
54379: PUSH
54380: LD_INT 5
54382: ST_TO_ADDR
54383: GO 54395
// k := tmp ;
54385: LD_ADDR_VAR 0 2
54389: PUSH
54390: LD_VAR 0 3
54394: ST_TO_ADDR
// for i := 1 to k do
54395: LD_ADDR_VAR 0 1
54399: PUSH
54400: DOUBLE
54401: LD_INT 1
54403: DEC
54404: ST_TO_ADDR
54405: LD_VAR 0 2
54409: PUSH
54410: FOR_TO
54411: IFFALSE 54510
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54413: LD_VAR 0 3
54417: PUSH
54418: LD_VAR 0 1
54422: ARRAY
54423: PPUSH
54424: LD_VAR 0 1
54428: PUSH
54429: LD_INT 4
54431: MOD
54432: PUSH
54433: LD_INT 1
54435: PLUS
54436: PPUSH
54437: CALL_OW 259
54441: PUSH
54442: LD_INT 10
54444: LESS
54445: IFFALSE 54508
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54447: LD_VAR 0 3
54451: PUSH
54452: LD_VAR 0 1
54456: ARRAY
54457: PPUSH
54458: LD_VAR 0 1
54462: PUSH
54463: LD_INT 4
54465: MOD
54466: PUSH
54467: LD_INT 1
54469: PLUS
54470: PPUSH
54471: LD_VAR 0 3
54475: PUSH
54476: LD_VAR 0 1
54480: ARRAY
54481: PPUSH
54482: LD_VAR 0 1
54486: PUSH
54487: LD_INT 4
54489: MOD
54490: PUSH
54491: LD_INT 1
54493: PLUS
54494: PPUSH
54495: CALL_OW 259
54499: PUSH
54500: LD_INT 1
54502: PLUS
54503: PPUSH
54504: CALL_OW 237
54508: GO 54410
54510: POP
54511: POP
// end ;
54512: PPOPN 3
54514: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54515: LD_EXP 30
54519: PUSH
54520: LD_EXP 38
54524: AND
54525: IFFALSE 54545
54527: GO 54529
54529: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54530: LD_INT 4
54532: PPUSH
54533: LD_OWVAR 2
54537: PPUSH
54538: LD_INT 0
54540: PPUSH
54541: CALL_OW 324
54545: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54546: LD_EXP 30
54550: PUSH
54551: LD_EXP 67
54555: AND
54556: IFFALSE 54576
54558: GO 54560
54560: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54561: LD_INT 19
54563: PPUSH
54564: LD_OWVAR 2
54568: PPUSH
54569: LD_INT 0
54571: PPUSH
54572: CALL_OW 324
54576: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54577: LD_EXP 30
54581: PUSH
54582: LD_EXP 39
54586: AND
54587: IFFALSE 54689
54589: GO 54591
54591: DISABLE
54592: LD_INT 0
54594: PPUSH
54595: PPUSH
// begin enable ;
54596: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54597: LD_ADDR_VAR 0 2
54601: PUSH
54602: LD_INT 22
54604: PUSH
54605: LD_OWVAR 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: PUSH
54617: LD_INT 34
54619: PUSH
54620: LD_INT 11
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 34
54629: PUSH
54630: LD_INT 30
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PPUSH
54646: CALL_OW 69
54650: ST_TO_ADDR
// if not tmp then
54651: LD_VAR 0 2
54655: NOT
54656: IFFALSE 54660
// exit ;
54658: GO 54689
// for i in tmp do
54660: LD_ADDR_VAR 0 1
54664: PUSH
54665: LD_VAR 0 2
54669: PUSH
54670: FOR_IN
54671: IFFALSE 54687
// begin SetLives ( i , 0 ) ;
54673: LD_VAR 0 1
54677: PPUSH
54678: LD_INT 0
54680: PPUSH
54681: CALL_OW 234
// end ;
54685: GO 54670
54687: POP
54688: POP
// end ;
54689: PPOPN 2
54691: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54692: LD_EXP 30
54696: PUSH
54697: LD_EXP 40
54701: AND
54702: IFFALSE 54722
54704: GO 54706
54706: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54707: LD_INT 32
54709: PPUSH
54710: LD_OWVAR 2
54714: PPUSH
54715: LD_INT 0
54717: PPUSH
54718: CALL_OW 324
54722: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54723: LD_EXP 30
54727: PUSH
54728: LD_EXP 41
54732: AND
54733: IFFALSE 54914
54735: GO 54737
54737: DISABLE
54738: LD_INT 0
54740: PPUSH
54741: PPUSH
54742: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54743: LD_ADDR_VAR 0 2
54747: PUSH
54748: LD_INT 22
54750: PUSH
54751: LD_OWVAR 2
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 33
54762: PUSH
54763: LD_INT 3
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PPUSH
54774: CALL_OW 69
54778: ST_TO_ADDR
// if not tmp then
54779: LD_VAR 0 2
54783: NOT
54784: IFFALSE 54788
// exit ;
54786: GO 54914
// side := 0 ;
54788: LD_ADDR_VAR 0 3
54792: PUSH
54793: LD_INT 0
54795: ST_TO_ADDR
// for i := 1 to 8 do
54796: LD_ADDR_VAR 0 1
54800: PUSH
54801: DOUBLE
54802: LD_INT 1
54804: DEC
54805: ST_TO_ADDR
54806: LD_INT 8
54808: PUSH
54809: FOR_TO
54810: IFFALSE 54858
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54812: LD_OWVAR 2
54816: PUSH
54817: LD_VAR 0 1
54821: NONEQUAL
54822: PUSH
54823: LD_OWVAR 2
54827: PPUSH
54828: LD_VAR 0 1
54832: PPUSH
54833: CALL_OW 81
54837: PUSH
54838: LD_INT 2
54840: EQUAL
54841: AND
54842: IFFALSE 54856
// begin side := i ;
54844: LD_ADDR_VAR 0 3
54848: PUSH
54849: LD_VAR 0 1
54853: ST_TO_ADDR
// break ;
54854: GO 54858
// end ;
54856: GO 54809
54858: POP
54859: POP
// if not side then
54860: LD_VAR 0 3
54864: NOT
54865: IFFALSE 54869
// exit ;
54867: GO 54914
// for i := 1 to tmp do
54869: LD_ADDR_VAR 0 1
54873: PUSH
54874: DOUBLE
54875: LD_INT 1
54877: DEC
54878: ST_TO_ADDR
54879: LD_VAR 0 2
54883: PUSH
54884: FOR_TO
54885: IFFALSE 54912
// if Prob ( 60 ) then
54887: LD_INT 60
54889: PPUSH
54890: CALL_OW 13
54894: IFFALSE 54910
// SetSide ( i , side ) ;
54896: LD_VAR 0 1
54900: PPUSH
54901: LD_VAR 0 3
54905: PPUSH
54906: CALL_OW 235
54910: GO 54884
54912: POP
54913: POP
// end ;
54914: PPOPN 3
54916: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54917: LD_EXP 30
54921: PUSH
54922: LD_EXP 43
54926: AND
54927: IFFALSE 55046
54929: GO 54931
54931: DISABLE
54932: LD_INT 0
54934: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54935: LD_ADDR_VAR 0 1
54939: PUSH
54940: LD_INT 22
54942: PUSH
54943: LD_OWVAR 2
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 21
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 3
54964: PUSH
54965: LD_INT 23
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: LIST
54983: PPUSH
54984: CALL_OW 69
54988: PUSH
54989: FOR_IN
54990: IFFALSE 55044
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
54992: LD_VAR 0 1
54996: PPUSH
54997: CALL_OW 257
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 3
55010: PUSH
55011: LD_INT 4
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: IN
55020: IFFALSE 55042
// SetClass ( un , rand ( 1 , 4 ) ) ;
55022: LD_VAR 0 1
55026: PPUSH
55027: LD_INT 1
55029: PPUSH
55030: LD_INT 4
55032: PPUSH
55033: CALL_OW 12
55037: PPUSH
55038: CALL_OW 336
55042: GO 54989
55044: POP
55045: POP
// end ;
55046: PPOPN 1
55048: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55049: LD_EXP 30
55053: PUSH
55054: LD_EXP 42
55058: AND
55059: IFFALSE 55138
55061: GO 55063
55063: DISABLE
55064: LD_INT 0
55066: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55067: LD_ADDR_VAR 0 1
55071: PUSH
55072: LD_INT 22
55074: PUSH
55075: LD_OWVAR 2
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 21
55086: PUSH
55087: LD_INT 3
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PPUSH
55098: CALL_OW 69
55102: ST_TO_ADDR
// if not tmp then
55103: LD_VAR 0 1
55107: NOT
55108: IFFALSE 55112
// exit ;
55110: GO 55138
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55112: LD_VAR 0 1
55116: PUSH
55117: LD_INT 1
55119: PPUSH
55120: LD_VAR 0 1
55124: PPUSH
55125: CALL_OW 12
55129: ARRAY
55130: PPUSH
55131: LD_INT 100
55133: PPUSH
55134: CALL_OW 234
// end ;
55138: PPOPN 1
55140: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55141: LD_EXP 30
55145: PUSH
55146: LD_EXP 44
55150: AND
55151: IFFALSE 55249
55153: GO 55155
55155: DISABLE
55156: LD_INT 0
55158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55159: LD_ADDR_VAR 0 1
55163: PUSH
55164: LD_INT 22
55166: PUSH
55167: LD_OWVAR 2
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 21
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PPUSH
55190: CALL_OW 69
55194: ST_TO_ADDR
// if not tmp then
55195: LD_VAR 0 1
55199: NOT
55200: IFFALSE 55204
// exit ;
55202: GO 55249
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55204: LD_VAR 0 1
55208: PUSH
55209: LD_INT 1
55211: PPUSH
55212: LD_VAR 0 1
55216: PPUSH
55217: CALL_OW 12
55221: ARRAY
55222: PPUSH
55223: LD_INT 1
55225: PPUSH
55226: LD_INT 4
55228: PPUSH
55229: CALL_OW 12
55233: PPUSH
55234: LD_INT 3000
55236: PPUSH
55237: LD_INT 9000
55239: PPUSH
55240: CALL_OW 12
55244: PPUSH
55245: CALL_OW 492
// end ;
55249: PPOPN 1
55251: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55252: LD_EXP 30
55256: PUSH
55257: LD_EXP 45
55261: AND
55262: IFFALSE 55282
55264: GO 55266
55266: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55267: LD_INT 1
55269: PPUSH
55270: LD_OWVAR 2
55274: PPUSH
55275: LD_INT 0
55277: PPUSH
55278: CALL_OW 324
55282: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55283: LD_EXP 30
55287: PUSH
55288: LD_EXP 46
55292: AND
55293: IFFALSE 55376
55295: GO 55297
55297: DISABLE
55298: LD_INT 0
55300: PPUSH
55301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55302: LD_ADDR_VAR 0 2
55306: PUSH
55307: LD_INT 22
55309: PUSH
55310: LD_OWVAR 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 21
55321: PUSH
55322: LD_INT 3
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PPUSH
55333: CALL_OW 69
55337: ST_TO_ADDR
// if not tmp then
55338: LD_VAR 0 2
55342: NOT
55343: IFFALSE 55347
// exit ;
55345: GO 55376
// for i in tmp do
55347: LD_ADDR_VAR 0 1
55351: PUSH
55352: LD_VAR 0 2
55356: PUSH
55357: FOR_IN
55358: IFFALSE 55374
// SetBLevel ( i , 10 ) ;
55360: LD_VAR 0 1
55364: PPUSH
55365: LD_INT 10
55367: PPUSH
55368: CALL_OW 241
55372: GO 55357
55374: POP
55375: POP
// end ;
55376: PPOPN 2
55378: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55379: LD_EXP 30
55383: PUSH
55384: LD_EXP 47
55388: AND
55389: IFFALSE 55500
55391: GO 55393
55393: DISABLE
55394: LD_INT 0
55396: PPUSH
55397: PPUSH
55398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55399: LD_ADDR_VAR 0 3
55403: PUSH
55404: LD_INT 22
55406: PUSH
55407: LD_OWVAR 2
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 25
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PPUSH
55430: CALL_OW 69
55434: ST_TO_ADDR
// if not tmp then
55435: LD_VAR 0 3
55439: NOT
55440: IFFALSE 55444
// exit ;
55442: GO 55500
// un := tmp [ rand ( 1 , tmp ) ] ;
55444: LD_ADDR_VAR 0 2
55448: PUSH
55449: LD_VAR 0 3
55453: PUSH
55454: LD_INT 1
55456: PPUSH
55457: LD_VAR 0 3
55461: PPUSH
55462: CALL_OW 12
55466: ARRAY
55467: ST_TO_ADDR
// if Crawls ( un ) then
55468: LD_VAR 0 2
55472: PPUSH
55473: CALL_OW 318
55477: IFFALSE 55488
// ComWalk ( un ) ;
55479: LD_VAR 0 2
55483: PPUSH
55484: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55488: LD_VAR 0 2
55492: PPUSH
55493: LD_INT 5
55495: PPUSH
55496: CALL_OW 336
// end ;
55500: PPOPN 3
55502: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55503: LD_EXP 30
55507: PUSH
55508: LD_EXP 48
55512: AND
55513: PUSH
55514: LD_OWVAR 67
55518: PUSH
55519: LD_INT 4
55521: LESS
55522: AND
55523: IFFALSE 55542
55525: GO 55527
55527: DISABLE
// begin Difficulty := Difficulty + 1 ;
55528: LD_ADDR_OWVAR 67
55532: PUSH
55533: LD_OWVAR 67
55537: PUSH
55538: LD_INT 1
55540: PLUS
55541: ST_TO_ADDR
// end ;
55542: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55543: LD_EXP 30
55547: PUSH
55548: LD_EXP 49
55552: AND
55553: IFFALSE 55656
55555: GO 55557
55557: DISABLE
55558: LD_INT 0
55560: PPUSH
// begin for i := 1 to 5 do
55561: LD_ADDR_VAR 0 1
55565: PUSH
55566: DOUBLE
55567: LD_INT 1
55569: DEC
55570: ST_TO_ADDR
55571: LD_INT 5
55573: PUSH
55574: FOR_TO
55575: IFFALSE 55654
// begin uc_nation := nation_nature ;
55577: LD_ADDR_OWVAR 21
55581: PUSH
55582: LD_INT 0
55584: ST_TO_ADDR
// uc_side := 0 ;
55585: LD_ADDR_OWVAR 20
55589: PUSH
55590: LD_INT 0
55592: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55593: LD_ADDR_OWVAR 29
55597: PUSH
55598: LD_INT 12
55600: PUSH
55601: LD_INT 12
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: ST_TO_ADDR
// hc_agressivity := 20 ;
55608: LD_ADDR_OWVAR 35
55612: PUSH
55613: LD_INT 20
55615: ST_TO_ADDR
// hc_class := class_tiger ;
55616: LD_ADDR_OWVAR 28
55620: PUSH
55621: LD_INT 14
55623: ST_TO_ADDR
// hc_gallery :=  ;
55624: LD_ADDR_OWVAR 33
55628: PUSH
55629: LD_STRING 
55631: ST_TO_ADDR
// hc_name :=  ;
55632: LD_ADDR_OWVAR 26
55636: PUSH
55637: LD_STRING 
55639: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55640: CALL_OW 44
55644: PPUSH
55645: LD_INT 0
55647: PPUSH
55648: CALL_OW 51
// end ;
55652: GO 55574
55654: POP
55655: POP
// end ;
55656: PPOPN 1
55658: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55659: LD_EXP 30
55663: PUSH
55664: LD_EXP 50
55668: AND
55669: IFFALSE 55678
55671: GO 55673
55673: DISABLE
// StreamSibBomb ;
55674: CALL 55679 0 0
55678: END
// export function StreamSibBomb ; var i , x , y ; begin
55679: LD_INT 0
55681: PPUSH
55682: PPUSH
55683: PPUSH
55684: PPUSH
// result := false ;
55685: LD_ADDR_VAR 0 1
55689: PUSH
55690: LD_INT 0
55692: ST_TO_ADDR
// for i := 1 to 16 do
55693: LD_ADDR_VAR 0 2
55697: PUSH
55698: DOUBLE
55699: LD_INT 1
55701: DEC
55702: ST_TO_ADDR
55703: LD_INT 16
55705: PUSH
55706: FOR_TO
55707: IFFALSE 55906
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55709: LD_ADDR_VAR 0 3
55713: PUSH
55714: LD_INT 10
55716: PUSH
55717: LD_INT 20
55719: PUSH
55720: LD_INT 30
55722: PUSH
55723: LD_INT 40
55725: PUSH
55726: LD_INT 50
55728: PUSH
55729: LD_INT 60
55731: PUSH
55732: LD_INT 70
55734: PUSH
55735: LD_INT 80
55737: PUSH
55738: LD_INT 90
55740: PUSH
55741: LD_INT 100
55743: PUSH
55744: LD_INT 110
55746: PUSH
55747: LD_INT 120
55749: PUSH
55750: LD_INT 130
55752: PUSH
55753: LD_INT 140
55755: PUSH
55756: LD_INT 150
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PPUSH
55779: LD_INT 15
55781: PPUSH
55782: CALL_OW 12
55786: ARRAY
55787: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55788: LD_ADDR_VAR 0 4
55792: PUSH
55793: LD_INT 10
55795: PUSH
55796: LD_INT 20
55798: PUSH
55799: LD_INT 30
55801: PUSH
55802: LD_INT 40
55804: PUSH
55805: LD_INT 50
55807: PUSH
55808: LD_INT 60
55810: PUSH
55811: LD_INT 70
55813: PUSH
55814: LD_INT 80
55816: PUSH
55817: LD_INT 90
55819: PUSH
55820: LD_INT 100
55822: PUSH
55823: LD_INT 110
55825: PUSH
55826: LD_INT 120
55828: PUSH
55829: LD_INT 130
55831: PUSH
55832: LD_INT 140
55834: PUSH
55835: LD_INT 150
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PPUSH
55858: LD_INT 15
55860: PPUSH
55861: CALL_OW 12
55865: ARRAY
55866: ST_TO_ADDR
// if ValidHex ( x , y ) then
55867: LD_VAR 0 3
55871: PPUSH
55872: LD_VAR 0 4
55876: PPUSH
55877: CALL_OW 488
55881: IFFALSE 55904
// begin result := [ x , y ] ;
55883: LD_ADDR_VAR 0 1
55887: PUSH
55888: LD_VAR 0 3
55892: PUSH
55893: LD_VAR 0 4
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// break ;
55902: GO 55906
// end ; end ;
55904: GO 55706
55906: POP
55907: POP
// if result then
55908: LD_VAR 0 1
55912: IFFALSE 55972
// begin ToLua ( playSibBomb() ) ;
55914: LD_STRING playSibBomb()
55916: PPUSH
55917: CALL_OW 559
// wait ( 0 0$14 ) ;
55921: LD_INT 490
55923: PPUSH
55924: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55928: LD_VAR 0 1
55932: PUSH
55933: LD_INT 1
55935: ARRAY
55936: PPUSH
55937: LD_VAR 0 1
55941: PUSH
55942: LD_INT 2
55944: ARRAY
55945: PPUSH
55946: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
55950: LD_VAR 0 1
55954: PUSH
55955: LD_INT 1
55957: ARRAY
55958: PPUSH
55959: LD_VAR 0 1
55963: PUSH
55964: LD_INT 2
55966: ARRAY
55967: PPUSH
55968: CALL_OW 429
// end ; end ;
55972: LD_VAR 0 1
55976: RET
// every 0 0$1 trigger StreamModeActive and sReset do
55977: LD_EXP 30
55981: PUSH
55982: LD_EXP 52
55986: AND
55987: IFFALSE 55999
55989: GO 55991
55991: DISABLE
// YouLost (  ) ;
55992: LD_STRING 
55994: PPUSH
55995: CALL_OW 104
55999: END
// every 0 0$1 trigger StreamModeActive and sFog do
56000: LD_EXP 30
56004: PUSH
56005: LD_EXP 51
56009: AND
56010: IFFALSE 56024
56012: GO 56014
56014: DISABLE
// FogOff ( your_side ) ;
56015: LD_OWVAR 2
56019: PPUSH
56020: CALL_OW 344
56024: END
// every 0 0$1 trigger StreamModeActive and sSun do
56025: LD_EXP 30
56029: PUSH
56030: LD_EXP 53
56034: AND
56035: IFFALSE 56063
56037: GO 56039
56039: DISABLE
// begin solar_recharge_percent := 0 ;
56040: LD_ADDR_OWVAR 79
56044: PUSH
56045: LD_INT 0
56047: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56048: LD_INT 10500
56050: PPUSH
56051: CALL_OW 67
// solar_recharge_percent := 100 ;
56055: LD_ADDR_OWVAR 79
56059: PUSH
56060: LD_INT 100
56062: ST_TO_ADDR
// end ;
56063: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56064: LD_EXP 30
56068: PUSH
56069: LD_EXP 54
56073: AND
56074: IFFALSE 56313
56076: GO 56078
56078: DISABLE
56079: LD_INT 0
56081: PPUSH
56082: PPUSH
56083: PPUSH
// begin tmp := [ ] ;
56084: LD_ADDR_VAR 0 3
56088: PUSH
56089: EMPTY
56090: ST_TO_ADDR
// for i := 1 to 6 do
56091: LD_ADDR_VAR 0 1
56095: PUSH
56096: DOUBLE
56097: LD_INT 1
56099: DEC
56100: ST_TO_ADDR
56101: LD_INT 6
56103: PUSH
56104: FOR_TO
56105: IFFALSE 56210
// begin uc_nation := nation_nature ;
56107: LD_ADDR_OWVAR 21
56111: PUSH
56112: LD_INT 0
56114: ST_TO_ADDR
// uc_side := 0 ;
56115: LD_ADDR_OWVAR 20
56119: PUSH
56120: LD_INT 0
56122: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56123: LD_ADDR_OWVAR 29
56127: PUSH
56128: LD_INT 12
56130: PUSH
56131: LD_INT 12
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: ST_TO_ADDR
// hc_agressivity := 20 ;
56138: LD_ADDR_OWVAR 35
56142: PUSH
56143: LD_INT 20
56145: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56146: LD_ADDR_OWVAR 28
56150: PUSH
56151: LD_INT 17
56153: ST_TO_ADDR
// hc_gallery :=  ;
56154: LD_ADDR_OWVAR 33
56158: PUSH
56159: LD_STRING 
56161: ST_TO_ADDR
// hc_name :=  ;
56162: LD_ADDR_OWVAR 26
56166: PUSH
56167: LD_STRING 
56169: ST_TO_ADDR
// un := CreateHuman ;
56170: LD_ADDR_VAR 0 2
56174: PUSH
56175: CALL_OW 44
56179: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56180: LD_VAR 0 2
56184: PPUSH
56185: LD_INT 1
56187: PPUSH
56188: CALL_OW 51
// tmp := tmp ^ un ;
56192: LD_ADDR_VAR 0 3
56196: PUSH
56197: LD_VAR 0 3
56201: PUSH
56202: LD_VAR 0 2
56206: ADD
56207: ST_TO_ADDR
// end ;
56208: GO 56104
56210: POP
56211: POP
// repeat wait ( 0 0$1 ) ;
56212: LD_INT 35
56214: PPUSH
56215: CALL_OW 67
// for un in tmp do
56219: LD_ADDR_VAR 0 2
56223: PUSH
56224: LD_VAR 0 3
56228: PUSH
56229: FOR_IN
56230: IFFALSE 56304
// begin if IsDead ( un ) then
56232: LD_VAR 0 2
56236: PPUSH
56237: CALL_OW 301
56241: IFFALSE 56261
// begin tmp := tmp diff un ;
56243: LD_ADDR_VAR 0 3
56247: PUSH
56248: LD_VAR 0 3
56252: PUSH
56253: LD_VAR 0 2
56257: DIFF
56258: ST_TO_ADDR
// continue ;
56259: GO 56229
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56261: LD_VAR 0 2
56265: PPUSH
56266: LD_INT 3
56268: PUSH
56269: LD_INT 22
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: CALL_OW 69
56287: PPUSH
56288: LD_VAR 0 2
56292: PPUSH
56293: CALL_OW 74
56297: PPUSH
56298: CALL_OW 115
// end ;
56302: GO 56229
56304: POP
56305: POP
// until not tmp ;
56306: LD_VAR 0 3
56310: NOT
56311: IFFALSE 56212
// end ;
56313: PPOPN 3
56315: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56316: LD_EXP 30
56320: PUSH
56321: LD_EXP 55
56325: AND
56326: IFFALSE 56380
56328: GO 56330
56330: DISABLE
// begin ToLua ( displayTroll(); ) ;
56331: LD_STRING displayTroll();
56333: PPUSH
56334: CALL_OW 559
// wait ( 3 3$00 ) ;
56338: LD_INT 6300
56340: PPUSH
56341: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56345: LD_STRING hideTroll();
56347: PPUSH
56348: CALL_OW 559
// wait ( 1 1$00 ) ;
56352: LD_INT 2100
56354: PPUSH
56355: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56359: LD_STRING displayTroll();
56361: PPUSH
56362: CALL_OW 559
// wait ( 1 1$00 ) ;
56366: LD_INT 2100
56368: PPUSH
56369: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56373: LD_STRING hideTroll();
56375: PPUSH
56376: CALL_OW 559
// end ;
56380: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56381: LD_EXP 30
56385: PUSH
56386: LD_EXP 56
56390: AND
56391: IFFALSE 56454
56393: GO 56395
56395: DISABLE
56396: LD_INT 0
56398: PPUSH
// begin p := 0 ;
56399: LD_ADDR_VAR 0 1
56403: PUSH
56404: LD_INT 0
56406: ST_TO_ADDR
// repeat game_speed := 1 ;
56407: LD_ADDR_OWVAR 65
56411: PUSH
56412: LD_INT 1
56414: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56415: LD_INT 35
56417: PPUSH
56418: CALL_OW 67
// p := p + 1 ;
56422: LD_ADDR_VAR 0 1
56426: PUSH
56427: LD_VAR 0 1
56431: PUSH
56432: LD_INT 1
56434: PLUS
56435: ST_TO_ADDR
// until p >= 60 ;
56436: LD_VAR 0 1
56440: PUSH
56441: LD_INT 60
56443: GREATEREQUAL
56444: IFFALSE 56407
// game_speed := 4 ;
56446: LD_ADDR_OWVAR 65
56450: PUSH
56451: LD_INT 4
56453: ST_TO_ADDR
// end ;
56454: PPOPN 1
56456: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56457: LD_EXP 30
56461: PUSH
56462: LD_EXP 57
56466: AND
56467: IFFALSE 56613
56469: GO 56471
56471: DISABLE
56472: LD_INT 0
56474: PPUSH
56475: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56476: LD_ADDR_VAR 0 1
56480: PUSH
56481: LD_INT 22
56483: PUSH
56484: LD_OWVAR 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: PUSH
56496: LD_INT 30
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 30
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: LIST
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PPUSH
56525: CALL_OW 69
56529: ST_TO_ADDR
// if not depot then
56530: LD_VAR 0 1
56534: NOT
56535: IFFALSE 56539
// exit ;
56537: GO 56613
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56539: LD_ADDR_VAR 0 2
56543: PUSH
56544: LD_VAR 0 1
56548: PUSH
56549: LD_INT 1
56551: PPUSH
56552: LD_VAR 0 1
56556: PPUSH
56557: CALL_OW 12
56561: ARRAY
56562: PPUSH
56563: CALL_OW 274
56567: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56568: LD_VAR 0 2
56572: PPUSH
56573: LD_INT 1
56575: PPUSH
56576: LD_INT 0
56578: PPUSH
56579: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56583: LD_VAR 0 2
56587: PPUSH
56588: LD_INT 2
56590: PPUSH
56591: LD_INT 0
56593: PPUSH
56594: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56598: LD_VAR 0 2
56602: PPUSH
56603: LD_INT 3
56605: PPUSH
56606: LD_INT 0
56608: PPUSH
56609: CALL_OW 277
// end ;
56613: PPOPN 2
56615: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56616: LD_EXP 30
56620: PUSH
56621: LD_EXP 58
56625: AND
56626: IFFALSE 56723
56628: GO 56630
56630: DISABLE
56631: LD_INT 0
56633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56634: LD_ADDR_VAR 0 1
56638: PUSH
56639: LD_INT 22
56641: PUSH
56642: LD_OWVAR 2
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 21
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 3
56663: PUSH
56664: LD_INT 23
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: LIST
56682: PPUSH
56683: CALL_OW 69
56687: ST_TO_ADDR
// if not tmp then
56688: LD_VAR 0 1
56692: NOT
56693: IFFALSE 56697
// exit ;
56695: GO 56723
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56697: LD_VAR 0 1
56701: PUSH
56702: LD_INT 1
56704: PPUSH
56705: LD_VAR 0 1
56709: PPUSH
56710: CALL_OW 12
56714: ARRAY
56715: PPUSH
56716: LD_INT 200
56718: PPUSH
56719: CALL_OW 234
// end ;
56723: PPOPN 1
56725: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56726: LD_EXP 30
56730: PUSH
56731: LD_EXP 59
56735: AND
56736: IFFALSE 56815
56738: GO 56740
56740: DISABLE
56741: LD_INT 0
56743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56744: LD_ADDR_VAR 0 1
56748: PUSH
56749: LD_INT 22
56751: PUSH
56752: LD_OWVAR 2
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 21
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PPUSH
56775: CALL_OW 69
56779: ST_TO_ADDR
// if not tmp then
56780: LD_VAR 0 1
56784: NOT
56785: IFFALSE 56789
// exit ;
56787: GO 56815
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56789: LD_VAR 0 1
56793: PUSH
56794: LD_INT 1
56796: PPUSH
56797: LD_VAR 0 1
56801: PPUSH
56802: CALL_OW 12
56806: ARRAY
56807: PPUSH
56808: LD_INT 60
56810: PPUSH
56811: CALL_OW 234
// end ;
56815: PPOPN 1
56817: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56818: LD_EXP 30
56822: PUSH
56823: LD_EXP 60
56827: AND
56828: IFFALSE 56927
56830: GO 56832
56832: DISABLE
56833: LD_INT 0
56835: PPUSH
56836: PPUSH
// begin enable ;
56837: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56838: LD_ADDR_VAR 0 1
56842: PUSH
56843: LD_INT 22
56845: PUSH
56846: LD_OWVAR 2
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 61
56857: PUSH
56858: EMPTY
56859: LIST
56860: PUSH
56861: LD_INT 33
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PPUSH
56876: CALL_OW 69
56880: ST_TO_ADDR
// if not tmp then
56881: LD_VAR 0 1
56885: NOT
56886: IFFALSE 56890
// exit ;
56888: GO 56927
// for i in tmp do
56890: LD_ADDR_VAR 0 2
56894: PUSH
56895: LD_VAR 0 1
56899: PUSH
56900: FOR_IN
56901: IFFALSE 56925
// if IsControledBy ( i ) then
56903: LD_VAR 0 2
56907: PPUSH
56908: CALL_OW 312
56912: IFFALSE 56923
// ComUnlink ( i ) ;
56914: LD_VAR 0 2
56918: PPUSH
56919: CALL_OW 136
56923: GO 56900
56925: POP
56926: POP
// end ;
56927: PPOPN 2
56929: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56930: LD_EXP 30
56934: PUSH
56935: LD_EXP 61
56939: AND
56940: IFFALSE 57080
56942: GO 56944
56944: DISABLE
56945: LD_INT 0
56947: PPUSH
56948: PPUSH
// begin ToLua ( displayPowell(); ) ;
56949: LD_STRING displayPowell();
56951: PPUSH
56952: CALL_OW 559
// uc_side := 0 ;
56956: LD_ADDR_OWVAR 20
56960: PUSH
56961: LD_INT 0
56963: ST_TO_ADDR
// uc_nation := 2 ;
56964: LD_ADDR_OWVAR 21
56968: PUSH
56969: LD_INT 2
56971: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
56972: LD_ADDR_OWVAR 37
56976: PUSH
56977: LD_INT 14
56979: ST_TO_ADDR
// vc_engine := engine_siberite ;
56980: LD_ADDR_OWVAR 39
56984: PUSH
56985: LD_INT 3
56987: ST_TO_ADDR
// vc_control := control_apeman ;
56988: LD_ADDR_OWVAR 38
56992: PUSH
56993: LD_INT 5
56995: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
56996: LD_ADDR_OWVAR 40
57000: PUSH
57001: LD_INT 29
57003: ST_TO_ADDR
// un := CreateVehicle ;
57004: LD_ADDR_VAR 0 2
57008: PUSH
57009: CALL_OW 45
57013: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57014: LD_VAR 0 2
57018: PPUSH
57019: LD_INT 1
57021: PPUSH
57022: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57026: LD_INT 35
57028: PPUSH
57029: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57033: LD_VAR 0 2
57037: PPUSH
57038: LD_INT 22
57040: PUSH
57041: LD_OWVAR 2
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PPUSH
57050: CALL_OW 69
57054: PPUSH
57055: LD_VAR 0 2
57059: PPUSH
57060: CALL_OW 74
57064: PPUSH
57065: CALL_OW 115
// until IsDead ( un ) ;
57069: LD_VAR 0 2
57073: PPUSH
57074: CALL_OW 301
57078: IFFALSE 57026
// end ;
57080: PPOPN 2
57082: END
// every 0 0$1 trigger StreamModeActive and sStu do
57083: LD_EXP 30
57087: PUSH
57088: LD_EXP 69
57092: AND
57093: IFFALSE 57109
57095: GO 57097
57097: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57098: LD_STRING displayStucuk();
57100: PPUSH
57101: CALL_OW 559
// ResetFog ;
57105: CALL_OW 335
// end ;
57109: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57110: LD_EXP 30
57114: PUSH
57115: LD_EXP 62
57119: AND
57120: IFFALSE 57261
57122: GO 57124
57124: DISABLE
57125: LD_INT 0
57127: PPUSH
57128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57129: LD_ADDR_VAR 0 2
57133: PUSH
57134: LD_INT 22
57136: PUSH
57137: LD_OWVAR 2
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 21
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PPUSH
57160: CALL_OW 69
57164: ST_TO_ADDR
// if not tmp then
57165: LD_VAR 0 2
57169: NOT
57170: IFFALSE 57174
// exit ;
57172: GO 57261
// un := tmp [ rand ( 1 , tmp ) ] ;
57174: LD_ADDR_VAR 0 1
57178: PUSH
57179: LD_VAR 0 2
57183: PUSH
57184: LD_INT 1
57186: PPUSH
57187: LD_VAR 0 2
57191: PPUSH
57192: CALL_OW 12
57196: ARRAY
57197: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57198: LD_VAR 0 1
57202: PPUSH
57203: LD_INT 0
57205: PPUSH
57206: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57210: LD_VAR 0 1
57214: PPUSH
57215: LD_OWVAR 3
57219: PUSH
57220: LD_VAR 0 1
57224: DIFF
57225: PPUSH
57226: LD_VAR 0 1
57230: PPUSH
57231: CALL_OW 74
57235: PPUSH
57236: CALL_OW 115
// wait ( 0 0$20 ) ;
57240: LD_INT 700
57242: PPUSH
57243: CALL_OW 67
// SetSide ( un , your_side ) ;
57247: LD_VAR 0 1
57251: PPUSH
57252: LD_OWVAR 2
57256: PPUSH
57257: CALL_OW 235
// end ;
57261: PPOPN 2
57263: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57264: LD_EXP 30
57268: PUSH
57269: LD_EXP 63
57273: AND
57274: IFFALSE 57380
57276: GO 57278
57278: DISABLE
57279: LD_INT 0
57281: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57282: LD_ADDR_VAR 0 1
57286: PUSH
57287: LD_INT 22
57289: PUSH
57290: LD_OWVAR 2
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 30
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 30
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PPUSH
57331: CALL_OW 69
57335: ST_TO_ADDR
// if not depot then
57336: LD_VAR 0 1
57340: NOT
57341: IFFALSE 57345
// exit ;
57343: GO 57380
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57345: LD_VAR 0 1
57349: PUSH
57350: LD_INT 1
57352: ARRAY
57353: PPUSH
57354: CALL_OW 250
57358: PPUSH
57359: LD_VAR 0 1
57363: PUSH
57364: LD_INT 1
57366: ARRAY
57367: PPUSH
57368: CALL_OW 251
57372: PPUSH
57373: LD_INT 70
57375: PPUSH
57376: CALL_OW 495
// end ;
57380: PPOPN 1
57382: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57383: LD_EXP 30
57387: PUSH
57388: LD_EXP 64
57392: AND
57393: IFFALSE 57604
57395: GO 57397
57397: DISABLE
57398: LD_INT 0
57400: PPUSH
57401: PPUSH
57402: PPUSH
57403: PPUSH
57404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57405: LD_ADDR_VAR 0 5
57409: PUSH
57410: LD_INT 22
57412: PUSH
57413: LD_OWVAR 2
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 21
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PPUSH
57436: CALL_OW 69
57440: ST_TO_ADDR
// if not tmp then
57441: LD_VAR 0 5
57445: NOT
57446: IFFALSE 57450
// exit ;
57448: GO 57604
// for i in tmp do
57450: LD_ADDR_VAR 0 1
57454: PUSH
57455: LD_VAR 0 5
57459: PUSH
57460: FOR_IN
57461: IFFALSE 57602
// begin d := rand ( 0 , 5 ) ;
57463: LD_ADDR_VAR 0 4
57467: PUSH
57468: LD_INT 0
57470: PPUSH
57471: LD_INT 5
57473: PPUSH
57474: CALL_OW 12
57478: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57479: LD_ADDR_VAR 0 2
57483: PUSH
57484: LD_VAR 0 1
57488: PPUSH
57489: CALL_OW 250
57493: PPUSH
57494: LD_VAR 0 4
57498: PPUSH
57499: LD_INT 3
57501: PPUSH
57502: LD_INT 12
57504: PPUSH
57505: CALL_OW 12
57509: PPUSH
57510: CALL_OW 272
57514: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57515: LD_ADDR_VAR 0 3
57519: PUSH
57520: LD_VAR 0 1
57524: PPUSH
57525: CALL_OW 251
57529: PPUSH
57530: LD_VAR 0 4
57534: PPUSH
57535: LD_INT 3
57537: PPUSH
57538: LD_INT 12
57540: PPUSH
57541: CALL_OW 12
57545: PPUSH
57546: CALL_OW 273
57550: ST_TO_ADDR
// if ValidHex ( x , y ) then
57551: LD_VAR 0 2
57555: PPUSH
57556: LD_VAR 0 3
57560: PPUSH
57561: CALL_OW 488
57565: IFFALSE 57600
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57567: LD_VAR 0 1
57571: PPUSH
57572: LD_VAR 0 2
57576: PPUSH
57577: LD_VAR 0 3
57581: PPUSH
57582: LD_INT 3
57584: PPUSH
57585: LD_INT 6
57587: PPUSH
57588: CALL_OW 12
57592: PPUSH
57593: LD_INT 1
57595: PPUSH
57596: CALL_OW 483
// end ;
57600: GO 57460
57602: POP
57603: POP
// end ;
57604: PPOPN 5
57606: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57607: LD_EXP 30
57611: PUSH
57612: LD_EXP 65
57616: AND
57617: IFFALSE 57711
57619: GO 57621
57621: DISABLE
57622: LD_INT 0
57624: PPUSH
57625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57626: LD_ADDR_VAR 0 2
57630: PUSH
57631: LD_INT 22
57633: PUSH
57634: LD_OWVAR 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 32
57645: PUSH
57646: LD_INT 1
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 21
57655: PUSH
57656: LD_INT 2
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: PPUSH
57668: CALL_OW 69
57672: ST_TO_ADDR
// if not tmp then
57673: LD_VAR 0 2
57677: NOT
57678: IFFALSE 57682
// exit ;
57680: GO 57711
// for i in tmp do
57682: LD_ADDR_VAR 0 1
57686: PUSH
57687: LD_VAR 0 2
57691: PUSH
57692: FOR_IN
57693: IFFALSE 57709
// SetFuel ( i , 0 ) ;
57695: LD_VAR 0 1
57699: PPUSH
57700: LD_INT 0
57702: PPUSH
57703: CALL_OW 240
57707: GO 57692
57709: POP
57710: POP
// end ;
57711: PPOPN 2
57713: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57714: LD_EXP 30
57718: PUSH
57719: LD_EXP 66
57723: AND
57724: IFFALSE 57790
57726: GO 57728
57728: DISABLE
57729: LD_INT 0
57731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57732: LD_ADDR_VAR 0 1
57736: PUSH
57737: LD_INT 22
57739: PUSH
57740: LD_OWVAR 2
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 30
57751: PUSH
57752: LD_INT 29
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PPUSH
57763: CALL_OW 69
57767: ST_TO_ADDR
// if not tmp then
57768: LD_VAR 0 1
57772: NOT
57773: IFFALSE 57777
// exit ;
57775: GO 57790
// DestroyUnit ( tmp [ 1 ] ) ;
57777: LD_VAR 0 1
57781: PUSH
57782: LD_INT 1
57784: ARRAY
57785: PPUSH
57786: CALL_OW 65
// end ;
57790: PPOPN 1
57792: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57793: LD_EXP 30
57797: PUSH
57798: LD_EXP 68
57802: AND
57803: IFFALSE 57932
57805: GO 57807
57807: DISABLE
57808: LD_INT 0
57810: PPUSH
// begin uc_side := 0 ;
57811: LD_ADDR_OWVAR 20
57815: PUSH
57816: LD_INT 0
57818: ST_TO_ADDR
// uc_nation := nation_arabian ;
57819: LD_ADDR_OWVAR 21
57823: PUSH
57824: LD_INT 2
57826: ST_TO_ADDR
// hc_gallery :=  ;
57827: LD_ADDR_OWVAR 33
57831: PUSH
57832: LD_STRING 
57834: ST_TO_ADDR
// hc_name :=  ;
57835: LD_ADDR_OWVAR 26
57839: PUSH
57840: LD_STRING 
57842: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57843: LD_INT 1
57845: PPUSH
57846: LD_INT 11
57848: PPUSH
57849: LD_INT 10
57851: PPUSH
57852: CALL_OW 380
// un := CreateHuman ;
57856: LD_ADDR_VAR 0 1
57860: PUSH
57861: CALL_OW 44
57865: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57866: LD_VAR 0 1
57870: PPUSH
57871: LD_INT 1
57873: PPUSH
57874: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57878: LD_INT 35
57880: PPUSH
57881: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57885: LD_VAR 0 1
57889: PPUSH
57890: LD_INT 22
57892: PUSH
57893: LD_OWVAR 2
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PPUSH
57902: CALL_OW 69
57906: PPUSH
57907: LD_VAR 0 1
57911: PPUSH
57912: CALL_OW 74
57916: PPUSH
57917: CALL_OW 115
// until IsDead ( un ) ;
57921: LD_VAR 0 1
57925: PPUSH
57926: CALL_OW 301
57930: IFFALSE 57878
// end ;
57932: PPOPN 1
57934: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57935: LD_EXP 30
57939: PUSH
57940: LD_EXP 70
57944: AND
57945: IFFALSE 57957
57947: GO 57949
57949: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
57950: LD_STRING earthquake(getX(game), 0, 32)
57952: PPUSH
57953: CALL_OW 559
57957: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
57958: LD_EXP 30
57962: PUSH
57963: LD_EXP 71
57967: AND
57968: IFFALSE 58059
57970: GO 57972
57972: DISABLE
57973: LD_INT 0
57975: PPUSH
// begin enable ;
57976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
57977: LD_ADDR_VAR 0 1
57981: PUSH
57982: LD_INT 22
57984: PUSH
57985: LD_OWVAR 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 21
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 33
58006: PUSH
58007: LD_INT 3
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: PPUSH
58019: CALL_OW 69
58023: ST_TO_ADDR
// if not tmp then
58024: LD_VAR 0 1
58028: NOT
58029: IFFALSE 58033
// exit ;
58031: GO 58059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58033: LD_VAR 0 1
58037: PUSH
58038: LD_INT 1
58040: PPUSH
58041: LD_VAR 0 1
58045: PPUSH
58046: CALL_OW 12
58050: ARRAY
58051: PPUSH
58052: LD_INT 1
58054: PPUSH
58055: CALL_OW 234
// end ;
58059: PPOPN 1
58061: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58062: LD_EXP 30
58066: PUSH
58067: LD_EXP 72
58071: AND
58072: IFFALSE 58213
58074: GO 58076
58076: DISABLE
58077: LD_INT 0
58079: PPUSH
58080: PPUSH
58081: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58082: LD_ADDR_VAR 0 3
58086: PUSH
58087: LD_INT 22
58089: PUSH
58090: LD_OWVAR 2
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 25
58101: PUSH
58102: LD_INT 1
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PPUSH
58113: CALL_OW 69
58117: ST_TO_ADDR
// if not tmp then
58118: LD_VAR 0 3
58122: NOT
58123: IFFALSE 58127
// exit ;
58125: GO 58213
// un := tmp [ rand ( 1 , tmp ) ] ;
58127: LD_ADDR_VAR 0 2
58131: PUSH
58132: LD_VAR 0 3
58136: PUSH
58137: LD_INT 1
58139: PPUSH
58140: LD_VAR 0 3
58144: PPUSH
58145: CALL_OW 12
58149: ARRAY
58150: ST_TO_ADDR
// if Crawls ( un ) then
58151: LD_VAR 0 2
58155: PPUSH
58156: CALL_OW 318
58160: IFFALSE 58171
// ComWalk ( un ) ;
58162: LD_VAR 0 2
58166: PPUSH
58167: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58171: LD_VAR 0 2
58175: PPUSH
58176: LD_INT 9
58178: PPUSH
58179: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58183: LD_INT 28
58185: PPUSH
58186: LD_OWVAR 2
58190: PPUSH
58191: LD_INT 2
58193: PPUSH
58194: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58198: LD_INT 29
58200: PPUSH
58201: LD_OWVAR 2
58205: PPUSH
58206: LD_INT 2
58208: PPUSH
58209: CALL_OW 322
// end ;
58213: PPOPN 3
58215: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58216: LD_EXP 30
58220: PUSH
58221: LD_EXP 73
58225: AND
58226: IFFALSE 58337
58228: GO 58230
58230: DISABLE
58231: LD_INT 0
58233: PPUSH
58234: PPUSH
58235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58236: LD_ADDR_VAR 0 3
58240: PUSH
58241: LD_INT 22
58243: PUSH
58244: LD_OWVAR 2
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 25
58255: PUSH
58256: LD_INT 1
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PPUSH
58267: CALL_OW 69
58271: ST_TO_ADDR
// if not tmp then
58272: LD_VAR 0 3
58276: NOT
58277: IFFALSE 58281
// exit ;
58279: GO 58337
// un := tmp [ rand ( 1 , tmp ) ] ;
58281: LD_ADDR_VAR 0 2
58285: PUSH
58286: LD_VAR 0 3
58290: PUSH
58291: LD_INT 1
58293: PPUSH
58294: LD_VAR 0 3
58298: PPUSH
58299: CALL_OW 12
58303: ARRAY
58304: ST_TO_ADDR
// if Crawls ( un ) then
58305: LD_VAR 0 2
58309: PPUSH
58310: CALL_OW 318
58314: IFFALSE 58325
// ComWalk ( un ) ;
58316: LD_VAR 0 2
58320: PPUSH
58321: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58325: LD_VAR 0 2
58329: PPUSH
58330: LD_INT 8
58332: PPUSH
58333: CALL_OW 336
// end ;
58337: PPOPN 3
58339: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58340: LD_EXP 30
58344: PUSH
58345: LD_EXP 74
58349: AND
58350: IFFALSE 58494
58352: GO 58354
58354: DISABLE
58355: LD_INT 0
58357: PPUSH
58358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58359: LD_ADDR_VAR 0 2
58363: PUSH
58364: LD_INT 22
58366: PUSH
58367: LD_OWVAR 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 21
58378: PUSH
58379: LD_INT 2
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 34
58391: PUSH
58392: LD_INT 12
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 34
58401: PUSH
58402: LD_INT 51
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 34
58411: PUSH
58412: LD_INT 32
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: LIST
58429: PPUSH
58430: CALL_OW 69
58434: ST_TO_ADDR
// if not tmp then
58435: LD_VAR 0 2
58439: NOT
58440: IFFALSE 58444
// exit ;
58442: GO 58494
// for i in tmp do
58444: LD_ADDR_VAR 0 1
58448: PUSH
58449: LD_VAR 0 2
58453: PUSH
58454: FOR_IN
58455: IFFALSE 58492
// if GetCargo ( i , mat_artifact ) = 0 then
58457: LD_VAR 0 1
58461: PPUSH
58462: LD_INT 4
58464: PPUSH
58465: CALL_OW 289
58469: PUSH
58470: LD_INT 0
58472: EQUAL
58473: IFFALSE 58490
// SetCargo ( i , mat_siberit , 100 ) ;
58475: LD_VAR 0 1
58479: PPUSH
58480: LD_INT 3
58482: PPUSH
58483: LD_INT 100
58485: PPUSH
58486: CALL_OW 290
58490: GO 58454
58492: POP
58493: POP
// end ;
58494: PPOPN 2
58496: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58497: LD_EXP 30
58501: PUSH
58502: LD_EXP 75
58506: AND
58507: IFFALSE 58690
58509: GO 58511
58511: DISABLE
58512: LD_INT 0
58514: PPUSH
58515: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58516: LD_ADDR_VAR 0 2
58520: PUSH
58521: LD_INT 22
58523: PUSH
58524: LD_OWVAR 2
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PPUSH
58533: CALL_OW 69
58537: ST_TO_ADDR
// if not tmp then
58538: LD_VAR 0 2
58542: NOT
58543: IFFALSE 58547
// exit ;
58545: GO 58690
// for i := 1 to 2 do
58547: LD_ADDR_VAR 0 1
58551: PUSH
58552: DOUBLE
58553: LD_INT 1
58555: DEC
58556: ST_TO_ADDR
58557: LD_INT 2
58559: PUSH
58560: FOR_TO
58561: IFFALSE 58688
// begin uc_side := your_side ;
58563: LD_ADDR_OWVAR 20
58567: PUSH
58568: LD_OWVAR 2
58572: ST_TO_ADDR
// uc_nation := nation_american ;
58573: LD_ADDR_OWVAR 21
58577: PUSH
58578: LD_INT 1
58580: ST_TO_ADDR
// vc_chassis := us_morphling ;
58581: LD_ADDR_OWVAR 37
58585: PUSH
58586: LD_INT 5
58588: ST_TO_ADDR
// vc_engine := engine_siberite ;
58589: LD_ADDR_OWVAR 39
58593: PUSH
58594: LD_INT 3
58596: ST_TO_ADDR
// vc_control := control_computer ;
58597: LD_ADDR_OWVAR 38
58601: PUSH
58602: LD_INT 3
58604: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58605: LD_ADDR_OWVAR 40
58609: PUSH
58610: LD_INT 10
58612: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58613: LD_VAR 0 2
58617: PUSH
58618: LD_INT 1
58620: ARRAY
58621: PPUSH
58622: CALL_OW 310
58626: NOT
58627: IFFALSE 58674
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58629: CALL_OW 45
58633: PPUSH
58634: LD_VAR 0 2
58638: PUSH
58639: LD_INT 1
58641: ARRAY
58642: PPUSH
58643: CALL_OW 250
58647: PPUSH
58648: LD_VAR 0 2
58652: PUSH
58653: LD_INT 1
58655: ARRAY
58656: PPUSH
58657: CALL_OW 251
58661: PPUSH
58662: LD_INT 12
58664: PPUSH
58665: LD_INT 1
58667: PPUSH
58668: CALL_OW 50
58672: GO 58686
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58674: CALL_OW 45
58678: PPUSH
58679: LD_INT 1
58681: PPUSH
58682: CALL_OW 51
// end ;
58686: GO 58560
58688: POP
58689: POP
// end ;
58690: PPOPN 2
58692: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58693: LD_EXP 30
58697: PUSH
58698: LD_EXP 76
58702: AND
58703: IFFALSE 58925
58705: GO 58707
58707: DISABLE
58708: LD_INT 0
58710: PPUSH
58711: PPUSH
58712: PPUSH
58713: PPUSH
58714: PPUSH
58715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58716: LD_ADDR_VAR 0 6
58720: PUSH
58721: LD_INT 22
58723: PUSH
58724: LD_OWVAR 2
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 21
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 3
58745: PUSH
58746: LD_INT 23
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: LIST
58764: PPUSH
58765: CALL_OW 69
58769: ST_TO_ADDR
// if not tmp then
58770: LD_VAR 0 6
58774: NOT
58775: IFFALSE 58779
// exit ;
58777: GO 58925
// s1 := rand ( 1 , 4 ) ;
58779: LD_ADDR_VAR 0 2
58783: PUSH
58784: LD_INT 1
58786: PPUSH
58787: LD_INT 4
58789: PPUSH
58790: CALL_OW 12
58794: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58795: LD_ADDR_VAR 0 4
58799: PUSH
58800: LD_VAR 0 6
58804: PUSH
58805: LD_INT 1
58807: ARRAY
58808: PPUSH
58809: LD_VAR 0 2
58813: PPUSH
58814: CALL_OW 259
58818: ST_TO_ADDR
// if s1 = 1 then
58819: LD_VAR 0 2
58823: PUSH
58824: LD_INT 1
58826: EQUAL
58827: IFFALSE 58847
// s2 := rand ( 2 , 4 ) else
58829: LD_ADDR_VAR 0 3
58833: PUSH
58834: LD_INT 2
58836: PPUSH
58837: LD_INT 4
58839: PPUSH
58840: CALL_OW 12
58844: ST_TO_ADDR
58845: GO 58855
// s2 := 1 ;
58847: LD_ADDR_VAR 0 3
58851: PUSH
58852: LD_INT 1
58854: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58855: LD_ADDR_VAR 0 5
58859: PUSH
58860: LD_VAR 0 6
58864: PUSH
58865: LD_INT 1
58867: ARRAY
58868: PPUSH
58869: LD_VAR 0 3
58873: PPUSH
58874: CALL_OW 259
58878: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58879: LD_VAR 0 6
58883: PUSH
58884: LD_INT 1
58886: ARRAY
58887: PPUSH
58888: LD_VAR 0 2
58892: PPUSH
58893: LD_VAR 0 5
58897: PPUSH
58898: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58902: LD_VAR 0 6
58906: PUSH
58907: LD_INT 1
58909: ARRAY
58910: PPUSH
58911: LD_VAR 0 3
58915: PPUSH
58916: LD_VAR 0 4
58920: PPUSH
58921: CALL_OW 237
// end ;
58925: PPOPN 6
58927: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58928: LD_EXP 30
58932: PUSH
58933: LD_EXP 77
58937: AND
58938: IFFALSE 59017
58940: GO 58942
58942: DISABLE
58943: LD_INT 0
58945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
58946: LD_ADDR_VAR 0 1
58950: PUSH
58951: LD_INT 22
58953: PUSH
58954: LD_OWVAR 2
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 30
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: PPUSH
58977: CALL_OW 69
58981: ST_TO_ADDR
// if not tmp then
58982: LD_VAR 0 1
58986: NOT
58987: IFFALSE 58991
// exit ;
58989: GO 59017
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58991: LD_VAR 0 1
58995: PUSH
58996: LD_INT 1
58998: PPUSH
58999: LD_VAR 0 1
59003: PPUSH
59004: CALL_OW 12
59008: ARRAY
59009: PPUSH
59010: LD_INT 1
59012: PPUSH
59013: CALL_OW 234
// end ;
59017: PPOPN 1
59019: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59020: LD_EXP 30
59024: PUSH
59025: LD_EXP 78
59029: AND
59030: IFFALSE 59142
59032: GO 59034
59034: DISABLE
59035: LD_INT 0
59037: PPUSH
59038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59039: LD_ADDR_VAR 0 2
59043: PUSH
59044: LD_INT 22
59046: PUSH
59047: LD_OWVAR 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 30
59061: PUSH
59062: LD_INT 27
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 30
59071: PUSH
59072: LD_INT 26
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 30
59081: PUSH
59082: LD_INT 28
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PPUSH
59099: CALL_OW 69
59103: ST_TO_ADDR
// if not tmp then
59104: LD_VAR 0 2
59108: NOT
59109: IFFALSE 59113
// exit ;
59111: GO 59142
// for i in tmp do
59113: LD_ADDR_VAR 0 1
59117: PUSH
59118: LD_VAR 0 2
59122: PUSH
59123: FOR_IN
59124: IFFALSE 59140
// SetLives ( i , 1 ) ;
59126: LD_VAR 0 1
59130: PPUSH
59131: LD_INT 1
59133: PPUSH
59134: CALL_OW 234
59138: GO 59123
59140: POP
59141: POP
// end ;
59142: PPOPN 2
59144: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59145: LD_EXP 30
59149: PUSH
59150: LD_EXP 79
59154: AND
59155: IFFALSE 59442
59157: GO 59159
59159: DISABLE
59160: LD_INT 0
59162: PPUSH
59163: PPUSH
59164: PPUSH
// begin i := rand ( 1 , 7 ) ;
59165: LD_ADDR_VAR 0 1
59169: PUSH
59170: LD_INT 1
59172: PPUSH
59173: LD_INT 7
59175: PPUSH
59176: CALL_OW 12
59180: ST_TO_ADDR
// case i of 1 :
59181: LD_VAR 0 1
59185: PUSH
59186: LD_INT 1
59188: DOUBLE
59189: EQUAL
59190: IFTRUE 59194
59192: GO 59204
59194: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59195: LD_STRING earthquake(getX(game), 0, 32)
59197: PPUSH
59198: CALL_OW 559
59202: GO 59442
59204: LD_INT 2
59206: DOUBLE
59207: EQUAL
59208: IFTRUE 59212
59210: GO 59226
59212: POP
// begin ToLua ( displayStucuk(); ) ;
59213: LD_STRING displayStucuk();
59215: PPUSH
59216: CALL_OW 559
// ResetFog ;
59220: CALL_OW 335
// end ; 3 :
59224: GO 59442
59226: LD_INT 3
59228: DOUBLE
59229: EQUAL
59230: IFTRUE 59234
59232: GO 59338
59234: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59235: LD_ADDR_VAR 0 2
59239: PUSH
59240: LD_INT 22
59242: PUSH
59243: LD_OWVAR 2
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 25
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PPUSH
59266: CALL_OW 69
59270: ST_TO_ADDR
// if not tmp then
59271: LD_VAR 0 2
59275: NOT
59276: IFFALSE 59280
// exit ;
59278: GO 59442
// un := tmp [ rand ( 1 , tmp ) ] ;
59280: LD_ADDR_VAR 0 3
59284: PUSH
59285: LD_VAR 0 2
59289: PUSH
59290: LD_INT 1
59292: PPUSH
59293: LD_VAR 0 2
59297: PPUSH
59298: CALL_OW 12
59302: ARRAY
59303: ST_TO_ADDR
// if Crawls ( un ) then
59304: LD_VAR 0 3
59308: PPUSH
59309: CALL_OW 318
59313: IFFALSE 59324
// ComWalk ( un ) ;
59315: LD_VAR 0 3
59319: PPUSH
59320: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59324: LD_VAR 0 3
59328: PPUSH
59329: LD_INT 8
59331: PPUSH
59332: CALL_OW 336
// end ; 4 :
59336: GO 59442
59338: LD_INT 4
59340: DOUBLE
59341: EQUAL
59342: IFTRUE 59346
59344: GO 59420
59346: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59347: LD_ADDR_VAR 0 2
59351: PUSH
59352: LD_INT 22
59354: PUSH
59355: LD_OWVAR 2
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 30
59366: PUSH
59367: LD_INT 29
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PPUSH
59378: CALL_OW 69
59382: ST_TO_ADDR
// if not tmp then
59383: LD_VAR 0 2
59387: NOT
59388: IFFALSE 59392
// exit ;
59390: GO 59442
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59392: LD_VAR 0 2
59396: PUSH
59397: LD_INT 1
59399: ARRAY
59400: PPUSH
59401: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59405: LD_VAR 0 2
59409: PUSH
59410: LD_INT 1
59412: ARRAY
59413: PPUSH
59414: CALL_OW 65
// end ; 5 .. 7 :
59418: GO 59442
59420: LD_INT 5
59422: DOUBLE
59423: GREATEREQUAL
59424: IFFALSE 59432
59426: LD_INT 7
59428: DOUBLE
59429: LESSEQUAL
59430: IFTRUE 59434
59432: GO 59441
59434: POP
// StreamSibBomb ; end ;
59435: CALL 55679 0 0
59439: GO 59442
59441: POP
// end ;
59442: PPOPN 3
59444: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59445: LD_EXP 30
59449: PUSH
59450: LD_EXP 80
59454: AND
59455: IFFALSE 59611
59457: GO 59459
59459: DISABLE
59460: LD_INT 0
59462: PPUSH
59463: PPUSH
59464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59465: LD_ADDR_VAR 0 2
59469: PUSH
59470: LD_INT 81
59472: PUSH
59473: LD_OWVAR 2
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 21
59487: PUSH
59488: LD_INT 1
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 21
59497: PUSH
59498: LD_INT 2
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PPUSH
59514: CALL_OW 69
59518: ST_TO_ADDR
// if not tmp then
59519: LD_VAR 0 2
59523: NOT
59524: IFFALSE 59528
// exit ;
59526: GO 59611
// p := 0 ;
59528: LD_ADDR_VAR 0 3
59532: PUSH
59533: LD_INT 0
59535: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59536: LD_INT 35
59538: PPUSH
59539: CALL_OW 67
// p := p + 1 ;
59543: LD_ADDR_VAR 0 3
59547: PUSH
59548: LD_VAR 0 3
59552: PUSH
59553: LD_INT 1
59555: PLUS
59556: ST_TO_ADDR
// for i in tmp do
59557: LD_ADDR_VAR 0 1
59561: PUSH
59562: LD_VAR 0 2
59566: PUSH
59567: FOR_IN
59568: IFFALSE 59599
// if GetLives ( i ) < 1000 then
59570: LD_VAR 0 1
59574: PPUSH
59575: CALL_OW 256
59579: PUSH
59580: LD_INT 1000
59582: LESS
59583: IFFALSE 59597
// SetLives ( i , 1000 ) ;
59585: LD_VAR 0 1
59589: PPUSH
59590: LD_INT 1000
59592: PPUSH
59593: CALL_OW 234
59597: GO 59567
59599: POP
59600: POP
// until p > 20 ;
59601: LD_VAR 0 3
59605: PUSH
59606: LD_INT 20
59608: GREATER
59609: IFFALSE 59536
// end ;
59611: PPOPN 3
59613: END
// every 0 0$1 trigger StreamModeActive and sTime do
59614: LD_EXP 30
59618: PUSH
59619: LD_EXP 81
59623: AND
59624: IFFALSE 59659
59626: GO 59628
59628: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59629: LD_INT 28
59631: PPUSH
59632: LD_OWVAR 2
59636: PPUSH
59637: LD_INT 2
59639: PPUSH
59640: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59644: LD_INT 30
59646: PPUSH
59647: LD_OWVAR 2
59651: PPUSH
59652: LD_INT 2
59654: PPUSH
59655: CALL_OW 322
// end ;
59659: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59660: LD_EXP 30
59664: PUSH
59665: LD_EXP 82
59669: AND
59670: IFFALSE 59791
59672: GO 59674
59674: DISABLE
59675: LD_INT 0
59677: PPUSH
59678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59679: LD_ADDR_VAR 0 2
59683: PUSH
59684: LD_INT 22
59686: PUSH
59687: LD_OWVAR 2
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 21
59698: PUSH
59699: LD_INT 1
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 3
59708: PUSH
59709: LD_INT 23
59711: PUSH
59712: LD_INT 0
59714: PUSH
59715: EMPTY
59716: LIST
59717: LIST
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: LIST
59727: PPUSH
59728: CALL_OW 69
59732: ST_TO_ADDR
// if not tmp then
59733: LD_VAR 0 2
59737: NOT
59738: IFFALSE 59742
// exit ;
59740: GO 59791
// for i in tmp do
59742: LD_ADDR_VAR 0 1
59746: PUSH
59747: LD_VAR 0 2
59751: PUSH
59752: FOR_IN
59753: IFFALSE 59789
// begin if Crawls ( i ) then
59755: LD_VAR 0 1
59759: PPUSH
59760: CALL_OW 318
59764: IFFALSE 59775
// ComWalk ( i ) ;
59766: LD_VAR 0 1
59770: PPUSH
59771: CALL_OW 138
// SetClass ( i , 2 ) ;
59775: LD_VAR 0 1
59779: PPUSH
59780: LD_INT 2
59782: PPUSH
59783: CALL_OW 336
// end ;
59787: GO 59752
59789: POP
59790: POP
// end ;
59791: PPOPN 2
59793: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59794: LD_EXP 30
59798: PUSH
59799: LD_EXP 83
59803: AND
59804: IFFALSE 60092
59806: GO 59808
59808: DISABLE
59809: LD_INT 0
59811: PPUSH
59812: PPUSH
59813: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59814: LD_OWVAR 2
59818: PPUSH
59819: LD_INT 9
59821: PPUSH
59822: LD_INT 1
59824: PPUSH
59825: LD_INT 1
59827: PPUSH
59828: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59832: LD_INT 9
59834: PPUSH
59835: LD_OWVAR 2
59839: PPUSH
59840: CALL_OW 343
// uc_side := 9 ;
59844: LD_ADDR_OWVAR 20
59848: PUSH
59849: LD_INT 9
59851: ST_TO_ADDR
// uc_nation := 2 ;
59852: LD_ADDR_OWVAR 21
59856: PUSH
59857: LD_INT 2
59859: ST_TO_ADDR
// hc_name := Dark Warrior ;
59860: LD_ADDR_OWVAR 26
59864: PUSH
59865: LD_STRING Dark Warrior
59867: ST_TO_ADDR
// hc_gallery :=  ;
59868: LD_ADDR_OWVAR 33
59872: PUSH
59873: LD_STRING 
59875: ST_TO_ADDR
// hc_noskilllimit := true ;
59876: LD_ADDR_OWVAR 76
59880: PUSH
59881: LD_INT 1
59883: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59884: LD_ADDR_OWVAR 31
59888: PUSH
59889: LD_INT 30
59891: PUSH
59892: LD_INT 30
59894: PUSH
59895: LD_INT 30
59897: PUSH
59898: LD_INT 30
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: ST_TO_ADDR
// un := CreateHuman ;
59907: LD_ADDR_VAR 0 3
59911: PUSH
59912: CALL_OW 44
59916: ST_TO_ADDR
// hc_noskilllimit := false ;
59917: LD_ADDR_OWVAR 76
59921: PUSH
59922: LD_INT 0
59924: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59925: LD_VAR 0 3
59929: PPUSH
59930: LD_INT 1
59932: PPUSH
59933: CALL_OW 51
// ToLua ( playRanger() ) ;
59937: LD_STRING playRanger()
59939: PPUSH
59940: CALL_OW 559
// p := 0 ;
59944: LD_ADDR_VAR 0 2
59948: PUSH
59949: LD_INT 0
59951: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59952: LD_INT 35
59954: PPUSH
59955: CALL_OW 67
// p := p + 1 ;
59959: LD_ADDR_VAR 0 2
59963: PUSH
59964: LD_VAR 0 2
59968: PUSH
59969: LD_INT 1
59971: PLUS
59972: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
59973: LD_VAR 0 3
59977: PPUSH
59978: CALL_OW 256
59982: PUSH
59983: LD_INT 1000
59985: LESS
59986: IFFALSE 60000
// SetLives ( un , 1000 ) ;
59988: LD_VAR 0 3
59992: PPUSH
59993: LD_INT 1000
59995: PPUSH
59996: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60000: LD_VAR 0 3
60004: PPUSH
60005: LD_INT 81
60007: PUSH
60008: LD_OWVAR 2
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 91
60019: PUSH
60020: LD_VAR 0 3
60024: PUSH
60025: LD_INT 30
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PPUSH
60037: CALL_OW 69
60041: PPUSH
60042: LD_VAR 0 3
60046: PPUSH
60047: CALL_OW 74
60051: PPUSH
60052: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60056: LD_VAR 0 2
60060: PUSH
60061: LD_INT 80
60063: GREATER
60064: PUSH
60065: LD_VAR 0 3
60069: PPUSH
60070: CALL_OW 301
60074: OR
60075: IFFALSE 59952
// if un then
60077: LD_VAR 0 3
60081: IFFALSE 60092
// RemoveUnit ( un ) ;
60083: LD_VAR 0 3
60087: PPUSH
60088: CALL_OW 64
// end ;
60092: PPOPN 3
60094: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60095: LD_EXP 84
60099: IFFALSE 60215
60101: GO 60103
60103: DISABLE
60104: LD_INT 0
60106: PPUSH
60107: PPUSH
60108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60109: LD_ADDR_VAR 0 2
60113: PUSH
60114: LD_INT 81
60116: PUSH
60117: LD_OWVAR 2
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 21
60128: PUSH
60129: LD_INT 1
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PPUSH
60140: CALL_OW 69
60144: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60145: LD_STRING playComputer()
60147: PPUSH
60148: CALL_OW 559
// if not tmp then
60152: LD_VAR 0 2
60156: NOT
60157: IFFALSE 60161
// exit ;
60159: GO 60215
// for i in tmp do
60161: LD_ADDR_VAR 0 1
60165: PUSH
60166: LD_VAR 0 2
60170: PUSH
60171: FOR_IN
60172: IFFALSE 60213
// for j := 1 to 4 do
60174: LD_ADDR_VAR 0 3
60178: PUSH
60179: DOUBLE
60180: LD_INT 1
60182: DEC
60183: ST_TO_ADDR
60184: LD_INT 4
60186: PUSH
60187: FOR_TO
60188: IFFALSE 60209
// SetSkill ( i , j , 10 ) ;
60190: LD_VAR 0 1
60194: PPUSH
60195: LD_VAR 0 3
60199: PPUSH
60200: LD_INT 10
60202: PPUSH
60203: CALL_OW 237
60207: GO 60187
60209: POP
60210: POP
60211: GO 60171
60213: POP
60214: POP
// end ;
60215: PPOPN 3
60217: END
// every 0 0$1 trigger s30 do var i , tmp ;
60218: LD_EXP 85
60222: IFFALSE 60291
60224: GO 60226
60226: DISABLE
60227: LD_INT 0
60229: PPUSH
60230: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60231: LD_ADDR_VAR 0 2
60235: PUSH
60236: LD_INT 22
60238: PUSH
60239: LD_OWVAR 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PPUSH
60248: CALL_OW 69
60252: ST_TO_ADDR
// if not tmp then
60253: LD_VAR 0 2
60257: NOT
60258: IFFALSE 60262
// exit ;
60260: GO 60291
// for i in tmp do
60262: LD_ADDR_VAR 0 1
60266: PUSH
60267: LD_VAR 0 2
60271: PUSH
60272: FOR_IN
60273: IFFALSE 60289
// SetLives ( i , 300 ) ;
60275: LD_VAR 0 1
60279: PPUSH
60280: LD_INT 300
60282: PPUSH
60283: CALL_OW 234
60287: GO 60272
60289: POP
60290: POP
// end ;
60291: PPOPN 2
60293: END
// every 0 0$1 trigger s60 do var i , tmp ;
60294: LD_EXP 86
60298: IFFALSE 60367
60300: GO 60302
60302: DISABLE
60303: LD_INT 0
60305: PPUSH
60306: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60307: LD_ADDR_VAR 0 2
60311: PUSH
60312: LD_INT 22
60314: PUSH
60315: LD_OWVAR 2
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PPUSH
60324: CALL_OW 69
60328: ST_TO_ADDR
// if not tmp then
60329: LD_VAR 0 2
60333: NOT
60334: IFFALSE 60338
// exit ;
60336: GO 60367
// for i in tmp do
60338: LD_ADDR_VAR 0 1
60342: PUSH
60343: LD_VAR 0 2
60347: PUSH
60348: FOR_IN
60349: IFFALSE 60365
// SetLives ( i , 600 ) ;
60351: LD_VAR 0 1
60355: PPUSH
60356: LD_INT 600
60358: PPUSH
60359: CALL_OW 234
60363: GO 60348
60365: POP
60366: POP
// end ;
60367: PPOPN 2
60369: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60370: LD_INT 0
60372: PPUSH
// case cmd of 301 :
60373: LD_VAR 0 1
60377: PUSH
60378: LD_INT 301
60380: DOUBLE
60381: EQUAL
60382: IFTRUE 60386
60384: GO 60418
60386: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60387: LD_VAR 0 6
60391: PPUSH
60392: LD_VAR 0 7
60396: PPUSH
60397: LD_VAR 0 8
60401: PPUSH
60402: LD_VAR 0 4
60406: PPUSH
60407: LD_VAR 0 5
60411: PPUSH
60412: CALL 61619 0 5
60416: GO 60539
60418: LD_INT 302
60420: DOUBLE
60421: EQUAL
60422: IFTRUE 60426
60424: GO 60463
60426: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60427: LD_VAR 0 6
60431: PPUSH
60432: LD_VAR 0 7
60436: PPUSH
60437: LD_VAR 0 8
60441: PPUSH
60442: LD_VAR 0 9
60446: PPUSH
60447: LD_VAR 0 4
60451: PPUSH
60452: LD_VAR 0 5
60456: PPUSH
60457: CALL 61710 0 6
60461: GO 60539
60463: LD_INT 303
60465: DOUBLE
60466: EQUAL
60467: IFTRUE 60471
60469: GO 60508
60471: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60472: LD_VAR 0 6
60476: PPUSH
60477: LD_VAR 0 7
60481: PPUSH
60482: LD_VAR 0 8
60486: PPUSH
60487: LD_VAR 0 9
60491: PPUSH
60492: LD_VAR 0 4
60496: PPUSH
60497: LD_VAR 0 5
60501: PPUSH
60502: CALL 60544 0 6
60506: GO 60539
60508: LD_INT 304
60510: DOUBLE
60511: EQUAL
60512: IFTRUE 60516
60514: GO 60538
60516: POP
// hHackTeleport ( unit , x , y ) ; end ;
60517: LD_VAR 0 2
60521: PPUSH
60522: LD_VAR 0 4
60526: PPUSH
60527: LD_VAR 0 5
60531: PPUSH
60532: CALL 62303 0 3
60536: GO 60539
60538: POP
// end ;
60539: LD_VAR 0 12
60543: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60544: LD_INT 0
60546: PPUSH
60547: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60548: LD_VAR 0 1
60552: PUSH
60553: LD_INT 1
60555: LESS
60556: PUSH
60557: LD_VAR 0 1
60561: PUSH
60562: LD_INT 3
60564: GREATER
60565: OR
60566: PUSH
60567: LD_VAR 0 5
60571: PPUSH
60572: LD_VAR 0 6
60576: PPUSH
60577: CALL_OW 428
60581: OR
60582: IFFALSE 60586
// exit ;
60584: GO 61306
// uc_side := your_side ;
60586: LD_ADDR_OWVAR 20
60590: PUSH
60591: LD_OWVAR 2
60595: ST_TO_ADDR
// uc_nation := nation ;
60596: LD_ADDR_OWVAR 21
60600: PUSH
60601: LD_VAR 0 1
60605: ST_TO_ADDR
// bc_level = 1 ;
60606: LD_ADDR_OWVAR 43
60610: PUSH
60611: LD_INT 1
60613: ST_TO_ADDR
// case btype of 1 :
60614: LD_VAR 0 2
60618: PUSH
60619: LD_INT 1
60621: DOUBLE
60622: EQUAL
60623: IFTRUE 60627
60625: GO 60638
60627: POP
// bc_type := b_depot ; 2 :
60628: LD_ADDR_OWVAR 42
60632: PUSH
60633: LD_INT 0
60635: ST_TO_ADDR
60636: GO 61250
60638: LD_INT 2
60640: DOUBLE
60641: EQUAL
60642: IFTRUE 60646
60644: GO 60657
60646: POP
// bc_type := b_warehouse ; 3 :
60647: LD_ADDR_OWVAR 42
60651: PUSH
60652: LD_INT 1
60654: ST_TO_ADDR
60655: GO 61250
60657: LD_INT 3
60659: DOUBLE
60660: EQUAL
60661: IFTRUE 60665
60663: GO 60676
60665: POP
// bc_type := b_lab ; 4 .. 9 :
60666: LD_ADDR_OWVAR 42
60670: PUSH
60671: LD_INT 6
60673: ST_TO_ADDR
60674: GO 61250
60676: LD_INT 4
60678: DOUBLE
60679: GREATEREQUAL
60680: IFFALSE 60688
60682: LD_INT 9
60684: DOUBLE
60685: LESSEQUAL
60686: IFTRUE 60690
60688: GO 60742
60690: POP
// begin bc_type := b_lab_half ;
60691: LD_ADDR_OWVAR 42
60695: PUSH
60696: LD_INT 7
60698: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60699: LD_ADDR_OWVAR 44
60703: PUSH
60704: LD_INT 10
60706: PUSH
60707: LD_INT 11
60709: PUSH
60710: LD_INT 12
60712: PUSH
60713: LD_INT 15
60715: PUSH
60716: LD_INT 14
60718: PUSH
60719: LD_INT 13
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: PUSH
60730: LD_VAR 0 2
60734: PUSH
60735: LD_INT 3
60737: MINUS
60738: ARRAY
60739: ST_TO_ADDR
// end ; 10 .. 13 :
60740: GO 61250
60742: LD_INT 10
60744: DOUBLE
60745: GREATEREQUAL
60746: IFFALSE 60754
60748: LD_INT 13
60750: DOUBLE
60751: LESSEQUAL
60752: IFTRUE 60756
60754: GO 60833
60756: POP
// begin bc_type := b_lab_full ;
60757: LD_ADDR_OWVAR 42
60761: PUSH
60762: LD_INT 8
60764: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60765: LD_ADDR_OWVAR 44
60769: PUSH
60770: LD_INT 10
60772: PUSH
60773: LD_INT 12
60775: PUSH
60776: LD_INT 14
60778: PUSH
60779: LD_INT 13
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: PUSH
60788: LD_VAR 0 2
60792: PUSH
60793: LD_INT 9
60795: MINUS
60796: ARRAY
60797: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60798: LD_ADDR_OWVAR 45
60802: PUSH
60803: LD_INT 11
60805: PUSH
60806: LD_INT 15
60808: PUSH
60809: LD_INT 12
60811: PUSH
60812: LD_INT 15
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: PUSH
60821: LD_VAR 0 2
60825: PUSH
60826: LD_INT 9
60828: MINUS
60829: ARRAY
60830: ST_TO_ADDR
// end ; 14 :
60831: GO 61250
60833: LD_INT 14
60835: DOUBLE
60836: EQUAL
60837: IFTRUE 60841
60839: GO 60852
60841: POP
// bc_type := b_workshop ; 15 :
60842: LD_ADDR_OWVAR 42
60846: PUSH
60847: LD_INT 2
60849: ST_TO_ADDR
60850: GO 61250
60852: LD_INT 15
60854: DOUBLE
60855: EQUAL
60856: IFTRUE 60860
60858: GO 60871
60860: POP
// bc_type := b_factory ; 16 :
60861: LD_ADDR_OWVAR 42
60865: PUSH
60866: LD_INT 3
60868: ST_TO_ADDR
60869: GO 61250
60871: LD_INT 16
60873: DOUBLE
60874: EQUAL
60875: IFTRUE 60879
60877: GO 60890
60879: POP
// bc_type := b_ext_gun ; 17 :
60880: LD_ADDR_OWVAR 42
60884: PUSH
60885: LD_INT 17
60887: ST_TO_ADDR
60888: GO 61250
60890: LD_INT 17
60892: DOUBLE
60893: EQUAL
60894: IFTRUE 60898
60896: GO 60926
60898: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60899: LD_ADDR_OWVAR 42
60903: PUSH
60904: LD_INT 19
60906: PUSH
60907: LD_INT 23
60909: PUSH
60910: LD_INT 19
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: PUSH
60918: LD_VAR 0 1
60922: ARRAY
60923: ST_TO_ADDR
60924: GO 61250
60926: LD_INT 18
60928: DOUBLE
60929: EQUAL
60930: IFTRUE 60934
60932: GO 60945
60934: POP
// bc_type := b_ext_radar ; 19 :
60935: LD_ADDR_OWVAR 42
60939: PUSH
60940: LD_INT 20
60942: ST_TO_ADDR
60943: GO 61250
60945: LD_INT 19
60947: DOUBLE
60948: EQUAL
60949: IFTRUE 60953
60951: GO 60964
60953: POP
// bc_type := b_ext_radio ; 20 :
60954: LD_ADDR_OWVAR 42
60958: PUSH
60959: LD_INT 22
60961: ST_TO_ADDR
60962: GO 61250
60964: LD_INT 20
60966: DOUBLE
60967: EQUAL
60968: IFTRUE 60972
60970: GO 60983
60972: POP
// bc_type := b_ext_siberium ; 21 :
60973: LD_ADDR_OWVAR 42
60977: PUSH
60978: LD_INT 21
60980: ST_TO_ADDR
60981: GO 61250
60983: LD_INT 21
60985: DOUBLE
60986: EQUAL
60987: IFTRUE 60991
60989: GO 61002
60991: POP
// bc_type := b_ext_computer ; 22 :
60992: LD_ADDR_OWVAR 42
60996: PUSH
60997: LD_INT 24
60999: ST_TO_ADDR
61000: GO 61250
61002: LD_INT 22
61004: DOUBLE
61005: EQUAL
61006: IFTRUE 61010
61008: GO 61021
61010: POP
// bc_type := b_ext_track ; 23 :
61011: LD_ADDR_OWVAR 42
61015: PUSH
61016: LD_INT 16
61018: ST_TO_ADDR
61019: GO 61250
61021: LD_INT 23
61023: DOUBLE
61024: EQUAL
61025: IFTRUE 61029
61027: GO 61040
61029: POP
// bc_type := b_ext_laser ; 24 :
61030: LD_ADDR_OWVAR 42
61034: PUSH
61035: LD_INT 25
61037: ST_TO_ADDR
61038: GO 61250
61040: LD_INT 24
61042: DOUBLE
61043: EQUAL
61044: IFTRUE 61048
61046: GO 61059
61048: POP
// bc_type := b_control_tower ; 25 :
61049: LD_ADDR_OWVAR 42
61053: PUSH
61054: LD_INT 36
61056: ST_TO_ADDR
61057: GO 61250
61059: LD_INT 25
61061: DOUBLE
61062: EQUAL
61063: IFTRUE 61067
61065: GO 61078
61067: POP
// bc_type := b_breastwork ; 26 :
61068: LD_ADDR_OWVAR 42
61072: PUSH
61073: LD_INT 31
61075: ST_TO_ADDR
61076: GO 61250
61078: LD_INT 26
61080: DOUBLE
61081: EQUAL
61082: IFTRUE 61086
61084: GO 61097
61086: POP
// bc_type := b_bunker ; 27 :
61087: LD_ADDR_OWVAR 42
61091: PUSH
61092: LD_INT 32
61094: ST_TO_ADDR
61095: GO 61250
61097: LD_INT 27
61099: DOUBLE
61100: EQUAL
61101: IFTRUE 61105
61103: GO 61116
61105: POP
// bc_type := b_turret ; 28 :
61106: LD_ADDR_OWVAR 42
61110: PUSH
61111: LD_INT 33
61113: ST_TO_ADDR
61114: GO 61250
61116: LD_INT 28
61118: DOUBLE
61119: EQUAL
61120: IFTRUE 61124
61122: GO 61135
61124: POP
// bc_type := b_armoury ; 29 :
61125: LD_ADDR_OWVAR 42
61129: PUSH
61130: LD_INT 4
61132: ST_TO_ADDR
61133: GO 61250
61135: LD_INT 29
61137: DOUBLE
61138: EQUAL
61139: IFTRUE 61143
61141: GO 61154
61143: POP
// bc_type := b_barracks ; 30 :
61144: LD_ADDR_OWVAR 42
61148: PUSH
61149: LD_INT 5
61151: ST_TO_ADDR
61152: GO 61250
61154: LD_INT 30
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61162
61160: GO 61173
61162: POP
// bc_type := b_solar_power ; 31 :
61163: LD_ADDR_OWVAR 42
61167: PUSH
61168: LD_INT 27
61170: ST_TO_ADDR
61171: GO 61250
61173: LD_INT 31
61175: DOUBLE
61176: EQUAL
61177: IFTRUE 61181
61179: GO 61192
61181: POP
// bc_type := b_oil_power ; 32 :
61182: LD_ADDR_OWVAR 42
61186: PUSH
61187: LD_INT 26
61189: ST_TO_ADDR
61190: GO 61250
61192: LD_INT 32
61194: DOUBLE
61195: EQUAL
61196: IFTRUE 61200
61198: GO 61211
61200: POP
// bc_type := b_siberite_power ; 33 :
61201: LD_ADDR_OWVAR 42
61205: PUSH
61206: LD_INT 28
61208: ST_TO_ADDR
61209: GO 61250
61211: LD_INT 33
61213: DOUBLE
61214: EQUAL
61215: IFTRUE 61219
61217: GO 61230
61219: POP
// bc_type := b_oil_mine ; 34 :
61220: LD_ADDR_OWVAR 42
61224: PUSH
61225: LD_INT 29
61227: ST_TO_ADDR
61228: GO 61250
61230: LD_INT 34
61232: DOUBLE
61233: EQUAL
61234: IFTRUE 61238
61236: GO 61249
61238: POP
// bc_type := b_siberite_mine ; end ;
61239: LD_ADDR_OWVAR 42
61243: PUSH
61244: LD_INT 30
61246: ST_TO_ADDR
61247: GO 61250
61249: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61250: LD_ADDR_VAR 0 8
61254: PUSH
61255: LD_VAR 0 5
61259: PPUSH
61260: LD_VAR 0 6
61264: PPUSH
61265: LD_VAR 0 3
61269: PPUSH
61270: CALL_OW 47
61274: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61275: LD_OWVAR 42
61279: PUSH
61280: LD_INT 32
61282: PUSH
61283: LD_INT 33
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: IN
61290: IFFALSE 61306
// PlaceWeaponTurret ( b , weapon ) ;
61292: LD_VAR 0 8
61296: PPUSH
61297: LD_VAR 0 4
61301: PPUSH
61302: CALL_OW 431
// end ;
61306: LD_VAR 0 7
61310: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61311: LD_INT 0
61313: PPUSH
61314: PPUSH
61315: PPUSH
61316: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61317: LD_ADDR_VAR 0 4
61321: PUSH
61322: LD_INT 22
61324: PUSH
61325: LD_OWVAR 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 30
61339: PUSH
61340: LD_INT 0
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 30
61349: PUSH
61350: LD_INT 1
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PPUSH
61366: CALL_OW 69
61370: ST_TO_ADDR
// if not tmp then
61371: LD_VAR 0 4
61375: NOT
61376: IFFALSE 61380
// exit ;
61378: GO 61439
// for i in tmp do
61380: LD_ADDR_VAR 0 2
61384: PUSH
61385: LD_VAR 0 4
61389: PUSH
61390: FOR_IN
61391: IFFALSE 61437
// for j = 1 to 3 do
61393: LD_ADDR_VAR 0 3
61397: PUSH
61398: DOUBLE
61399: LD_INT 1
61401: DEC
61402: ST_TO_ADDR
61403: LD_INT 3
61405: PUSH
61406: FOR_TO
61407: IFFALSE 61433
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61409: LD_VAR 0 2
61413: PPUSH
61414: CALL_OW 274
61418: PPUSH
61419: LD_VAR 0 3
61423: PPUSH
61424: LD_INT 99999
61426: PPUSH
61427: CALL_OW 277
61431: GO 61406
61433: POP
61434: POP
61435: GO 61390
61437: POP
61438: POP
// end ;
61439: LD_VAR 0 1
61443: RET
// export function hHackSetLevel10 ; var i , j ; begin
61444: LD_INT 0
61446: PPUSH
61447: PPUSH
61448: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61449: LD_ADDR_VAR 0 2
61453: PUSH
61454: LD_INT 21
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PPUSH
61464: CALL_OW 69
61468: PUSH
61469: FOR_IN
61470: IFFALSE 61522
// if IsSelected ( i ) then
61472: LD_VAR 0 2
61476: PPUSH
61477: CALL_OW 306
61481: IFFALSE 61520
// begin for j := 1 to 4 do
61483: LD_ADDR_VAR 0 3
61487: PUSH
61488: DOUBLE
61489: LD_INT 1
61491: DEC
61492: ST_TO_ADDR
61493: LD_INT 4
61495: PUSH
61496: FOR_TO
61497: IFFALSE 61518
// SetSkill ( i , j , 10 ) ;
61499: LD_VAR 0 2
61503: PPUSH
61504: LD_VAR 0 3
61508: PPUSH
61509: LD_INT 10
61511: PPUSH
61512: CALL_OW 237
61516: GO 61496
61518: POP
61519: POP
// end ;
61520: GO 61469
61522: POP
61523: POP
// end ;
61524: LD_VAR 0 1
61528: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61529: LD_INT 0
61531: PPUSH
61532: PPUSH
61533: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61534: LD_ADDR_VAR 0 2
61538: PUSH
61539: LD_INT 22
61541: PUSH
61542: LD_OWVAR 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 21
61553: PUSH
61554: LD_INT 1
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PPUSH
61565: CALL_OW 69
61569: PUSH
61570: FOR_IN
61571: IFFALSE 61612
// begin for j := 1 to 4 do
61573: LD_ADDR_VAR 0 3
61577: PUSH
61578: DOUBLE
61579: LD_INT 1
61581: DEC
61582: ST_TO_ADDR
61583: LD_INT 4
61585: PUSH
61586: FOR_TO
61587: IFFALSE 61608
// SetSkill ( i , j , 10 ) ;
61589: LD_VAR 0 2
61593: PPUSH
61594: LD_VAR 0 3
61598: PPUSH
61599: LD_INT 10
61601: PPUSH
61602: CALL_OW 237
61606: GO 61586
61608: POP
61609: POP
// end ;
61610: GO 61570
61612: POP
61613: POP
// end ;
61614: LD_VAR 0 1
61618: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61619: LD_INT 0
61621: PPUSH
// uc_side := your_side ;
61622: LD_ADDR_OWVAR 20
61626: PUSH
61627: LD_OWVAR 2
61631: ST_TO_ADDR
// uc_nation := nation ;
61632: LD_ADDR_OWVAR 21
61636: PUSH
61637: LD_VAR 0 1
61641: ST_TO_ADDR
// InitHc ;
61642: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61646: LD_INT 0
61648: PPUSH
61649: LD_VAR 0 2
61653: PPUSH
61654: LD_VAR 0 3
61658: PPUSH
61659: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61663: LD_VAR 0 4
61667: PPUSH
61668: LD_VAR 0 5
61672: PPUSH
61673: CALL_OW 428
61677: PUSH
61678: LD_INT 0
61680: EQUAL
61681: IFFALSE 61705
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61683: CALL_OW 44
61687: PPUSH
61688: LD_VAR 0 4
61692: PPUSH
61693: LD_VAR 0 5
61697: PPUSH
61698: LD_INT 1
61700: PPUSH
61701: CALL_OW 48
// end ;
61705: LD_VAR 0 6
61709: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61710: LD_INT 0
61712: PPUSH
61713: PPUSH
// uc_side := your_side ;
61714: LD_ADDR_OWVAR 20
61718: PUSH
61719: LD_OWVAR 2
61723: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61724: LD_VAR 0 1
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: LD_INT 2
61734: PUSH
61735: LD_INT 3
61737: PUSH
61738: LD_INT 4
61740: PUSH
61741: LD_INT 5
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: IN
61751: IFFALSE 61763
// uc_nation := nation_american else
61753: LD_ADDR_OWVAR 21
61757: PUSH
61758: LD_INT 1
61760: ST_TO_ADDR
61761: GO 61806
// if chassis in [ 11 , 12 , 13 , 14 ] then
61763: LD_VAR 0 1
61767: PUSH
61768: LD_INT 11
61770: PUSH
61771: LD_INT 12
61773: PUSH
61774: LD_INT 13
61776: PUSH
61777: LD_INT 14
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: IN
61786: IFFALSE 61798
// uc_nation := nation_arabian else
61788: LD_ADDR_OWVAR 21
61792: PUSH
61793: LD_INT 2
61795: ST_TO_ADDR
61796: GO 61806
// uc_nation := nation_russian ;
61798: LD_ADDR_OWVAR 21
61802: PUSH
61803: LD_INT 3
61805: ST_TO_ADDR
// vc_chassis := chassis ;
61806: LD_ADDR_OWVAR 37
61810: PUSH
61811: LD_VAR 0 1
61815: ST_TO_ADDR
// vc_engine := engine ;
61816: LD_ADDR_OWVAR 39
61820: PUSH
61821: LD_VAR 0 2
61825: ST_TO_ADDR
// vc_control := control ;
61826: LD_ADDR_OWVAR 38
61830: PUSH
61831: LD_VAR 0 3
61835: ST_TO_ADDR
// vc_weapon := weapon ;
61836: LD_ADDR_OWVAR 40
61840: PUSH
61841: LD_VAR 0 4
61845: ST_TO_ADDR
// un := CreateVehicle ;
61846: LD_ADDR_VAR 0 8
61850: PUSH
61851: CALL_OW 45
61855: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61856: LD_VAR 0 8
61860: PPUSH
61861: LD_INT 0
61863: PPUSH
61864: LD_INT 5
61866: PPUSH
61867: CALL_OW 12
61871: PPUSH
61872: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61876: LD_VAR 0 8
61880: PPUSH
61881: LD_VAR 0 5
61885: PPUSH
61886: LD_VAR 0 6
61890: PPUSH
61891: LD_INT 1
61893: PPUSH
61894: CALL_OW 48
// end ;
61898: LD_VAR 0 7
61902: RET
// export hInvincible ; every 1 do
61903: GO 61905
61905: DISABLE
// hInvincible := [ ] ;
61906: LD_ADDR_EXP 87
61910: PUSH
61911: EMPTY
61912: ST_TO_ADDR
61913: END
// every 10 do var i ;
61914: GO 61916
61916: DISABLE
61917: LD_INT 0
61919: PPUSH
// begin enable ;
61920: ENABLE
// if not hInvincible then
61921: LD_EXP 87
61925: NOT
61926: IFFALSE 61930
// exit ;
61928: GO 61974
// for i in hInvincible do
61930: LD_ADDR_VAR 0 1
61934: PUSH
61935: LD_EXP 87
61939: PUSH
61940: FOR_IN
61941: IFFALSE 61972
// if GetLives ( i ) < 1000 then
61943: LD_VAR 0 1
61947: PPUSH
61948: CALL_OW 256
61952: PUSH
61953: LD_INT 1000
61955: LESS
61956: IFFALSE 61970
// SetLives ( i , 1000 ) ;
61958: LD_VAR 0 1
61962: PPUSH
61963: LD_INT 1000
61965: PPUSH
61966: CALL_OW 234
61970: GO 61940
61972: POP
61973: POP
// end ;
61974: PPOPN 1
61976: END
// export function hHackInvincible ; var i ; begin
61977: LD_INT 0
61979: PPUSH
61980: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
61981: LD_ADDR_VAR 0 2
61985: PUSH
61986: LD_INT 2
61988: PUSH
61989: LD_INT 21
61991: PUSH
61992: LD_INT 1
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 21
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: LIST
62013: PPUSH
62014: CALL_OW 69
62018: PUSH
62019: FOR_IN
62020: IFFALSE 62081
// if IsSelected ( i ) then
62022: LD_VAR 0 2
62026: PPUSH
62027: CALL_OW 306
62031: IFFALSE 62079
// begin if i in hInvincible then
62033: LD_VAR 0 2
62037: PUSH
62038: LD_EXP 87
62042: IN
62043: IFFALSE 62063
// hInvincible := hInvincible diff i else
62045: LD_ADDR_EXP 87
62049: PUSH
62050: LD_EXP 87
62054: PUSH
62055: LD_VAR 0 2
62059: DIFF
62060: ST_TO_ADDR
62061: GO 62079
// hInvincible := hInvincible union i ;
62063: LD_ADDR_EXP 87
62067: PUSH
62068: LD_EXP 87
62072: PUSH
62073: LD_VAR 0 2
62077: UNION
62078: ST_TO_ADDR
// end ;
62079: GO 62019
62081: POP
62082: POP
// end ;
62083: LD_VAR 0 1
62087: RET
// export function hHackInvisible ; var i , j ; begin
62088: LD_INT 0
62090: PPUSH
62091: PPUSH
62092: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62093: LD_ADDR_VAR 0 2
62097: PUSH
62098: LD_INT 21
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PPUSH
62108: CALL_OW 69
62112: PUSH
62113: FOR_IN
62114: IFFALSE 62138
// if IsSelected ( i ) then
62116: LD_VAR 0 2
62120: PPUSH
62121: CALL_OW 306
62125: IFFALSE 62136
// ComForceInvisible ( i ) ;
62127: LD_VAR 0 2
62131: PPUSH
62132: CALL_OW 496
62136: GO 62113
62138: POP
62139: POP
// end ;
62140: LD_VAR 0 1
62144: RET
// export function hHackChangeYourSide ; begin
62145: LD_INT 0
62147: PPUSH
// if your_side = 8 then
62148: LD_OWVAR 2
62152: PUSH
62153: LD_INT 8
62155: EQUAL
62156: IFFALSE 62168
// your_side := 0 else
62158: LD_ADDR_OWVAR 2
62162: PUSH
62163: LD_INT 0
62165: ST_TO_ADDR
62166: GO 62182
// your_side := your_side + 1 ;
62168: LD_ADDR_OWVAR 2
62172: PUSH
62173: LD_OWVAR 2
62177: PUSH
62178: LD_INT 1
62180: PLUS
62181: ST_TO_ADDR
// end ;
62182: LD_VAR 0 1
62186: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62187: LD_INT 0
62189: PPUSH
62190: PPUSH
62191: PPUSH
// for i in all_units do
62192: LD_ADDR_VAR 0 2
62196: PUSH
62197: LD_OWVAR 3
62201: PUSH
62202: FOR_IN
62203: IFFALSE 62281
// if IsSelected ( i ) then
62205: LD_VAR 0 2
62209: PPUSH
62210: CALL_OW 306
62214: IFFALSE 62279
// begin j := GetSide ( i ) ;
62216: LD_ADDR_VAR 0 3
62220: PUSH
62221: LD_VAR 0 2
62225: PPUSH
62226: CALL_OW 255
62230: ST_TO_ADDR
// if j = 8 then
62231: LD_VAR 0 3
62235: PUSH
62236: LD_INT 8
62238: EQUAL
62239: IFFALSE 62251
// j := 0 else
62241: LD_ADDR_VAR 0 3
62245: PUSH
62246: LD_INT 0
62248: ST_TO_ADDR
62249: GO 62265
// j := j + 1 ;
62251: LD_ADDR_VAR 0 3
62255: PUSH
62256: LD_VAR 0 3
62260: PUSH
62261: LD_INT 1
62263: PLUS
62264: ST_TO_ADDR
// SetSide ( i , j ) ;
62265: LD_VAR 0 2
62269: PPUSH
62270: LD_VAR 0 3
62274: PPUSH
62275: CALL_OW 235
// end ;
62279: GO 62202
62281: POP
62282: POP
// end ;
62283: LD_VAR 0 1
62287: RET
// export function hHackFog ; begin
62288: LD_INT 0
62290: PPUSH
// FogOff ( true ) ;
62291: LD_INT 1
62293: PPUSH
62294: CALL_OW 344
// end ;
62298: LD_VAR 0 1
62302: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62303: LD_INT 0
62305: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62306: LD_VAR 0 1
62310: PPUSH
62311: LD_VAR 0 2
62315: PPUSH
62316: LD_VAR 0 3
62320: PPUSH
62321: LD_INT 1
62323: PPUSH
62324: LD_INT 1
62326: PPUSH
62327: CALL_OW 483
// CenterOnXY ( x , y ) ;
62331: LD_VAR 0 2
62335: PPUSH
62336: LD_VAR 0 3
62340: PPUSH
62341: CALL_OW 84
// end ;
62345: LD_VAR 0 4
62349: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62350: LD_INT 0
62352: PPUSH
62353: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62354: LD_VAR 0 1
62358: NOT
62359: PUSH
62360: LD_VAR 0 2
62364: PPUSH
62365: LD_VAR 0 3
62369: PPUSH
62370: CALL_OW 488
62374: NOT
62375: OR
62376: PUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: CALL_OW 266
62386: PUSH
62387: LD_INT 3
62389: NONEQUAL
62390: PUSH
62391: LD_VAR 0 1
62395: PPUSH
62396: CALL_OW 247
62400: PUSH
62401: LD_INT 1
62403: EQUAL
62404: NOT
62405: AND
62406: OR
62407: IFFALSE 62411
// exit ;
62409: GO 62560
// if GetType ( factory ) = unit_human then
62411: LD_VAR 0 1
62415: PPUSH
62416: CALL_OW 247
62420: PUSH
62421: LD_INT 1
62423: EQUAL
62424: IFFALSE 62441
// factory := IsInUnit ( factory ) ;
62426: LD_ADDR_VAR 0 1
62430: PUSH
62431: LD_VAR 0 1
62435: PPUSH
62436: CALL_OW 310
62440: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62441: LD_VAR 0 1
62445: PPUSH
62446: CALL_OW 266
62450: PUSH
62451: LD_INT 3
62453: NONEQUAL
62454: IFFALSE 62458
// exit ;
62456: GO 62560
// if HexInfo ( x , y ) = factory then
62458: LD_VAR 0 2
62462: PPUSH
62463: LD_VAR 0 3
62467: PPUSH
62468: CALL_OW 428
62472: PUSH
62473: LD_VAR 0 1
62477: EQUAL
62478: IFFALSE 62505
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62480: LD_ADDR_EXP 88
62484: PUSH
62485: LD_EXP 88
62489: PPUSH
62490: LD_VAR 0 1
62494: PPUSH
62495: LD_INT 0
62497: PPUSH
62498: CALL_OW 1
62502: ST_TO_ADDR
62503: GO 62556
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62505: LD_ADDR_EXP 88
62509: PUSH
62510: LD_EXP 88
62514: PPUSH
62515: LD_VAR 0 1
62519: PPUSH
62520: LD_VAR 0 1
62524: PPUSH
62525: CALL_OW 255
62529: PUSH
62530: LD_VAR 0 1
62534: PUSH
62535: LD_VAR 0 2
62539: PUSH
62540: LD_VAR 0 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: PPUSH
62551: CALL_OW 1
62555: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62556: CALL 62565 0 0
// end ;
62560: LD_VAR 0 4
62564: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62565: LD_INT 0
62567: PPUSH
62568: PPUSH
62569: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62570: LD_STRING resetFactoryWaypoint();
62572: PPUSH
62573: CALL_OW 559
// if factoryWaypoints then
62577: LD_EXP 88
62581: IFFALSE 62707
// begin list := PrepareArray ( factoryWaypoints ) ;
62583: LD_ADDR_VAR 0 3
62587: PUSH
62588: LD_EXP 88
62592: PPUSH
62593: CALL 47564 0 1
62597: ST_TO_ADDR
// for i := 1 to list do
62598: LD_ADDR_VAR 0 2
62602: PUSH
62603: DOUBLE
62604: LD_INT 1
62606: DEC
62607: ST_TO_ADDR
62608: LD_VAR 0 3
62612: PUSH
62613: FOR_TO
62614: IFFALSE 62705
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62616: LD_STRING setFactoryWaypointXY(
62618: PUSH
62619: LD_VAR 0 3
62623: PUSH
62624: LD_VAR 0 2
62628: ARRAY
62629: PUSH
62630: LD_INT 1
62632: ARRAY
62633: STR
62634: PUSH
62635: LD_STRING ,
62637: STR
62638: PUSH
62639: LD_VAR 0 3
62643: PUSH
62644: LD_VAR 0 2
62648: ARRAY
62649: PUSH
62650: LD_INT 2
62652: ARRAY
62653: STR
62654: PUSH
62655: LD_STRING ,
62657: STR
62658: PUSH
62659: LD_VAR 0 3
62663: PUSH
62664: LD_VAR 0 2
62668: ARRAY
62669: PUSH
62670: LD_INT 3
62672: ARRAY
62673: STR
62674: PUSH
62675: LD_STRING ,
62677: STR
62678: PUSH
62679: LD_VAR 0 3
62683: PUSH
62684: LD_VAR 0 2
62688: ARRAY
62689: PUSH
62690: LD_INT 4
62692: ARRAY
62693: STR
62694: PUSH
62695: LD_STRING )
62697: STR
62698: PPUSH
62699: CALL_OW 559
62703: GO 62613
62705: POP
62706: POP
// end ; end ;
62707: LD_VAR 0 1
62711: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62712: LD_INT 0
62714: PPUSH
// if HexInfo ( x , y ) = warehouse then
62715: LD_VAR 0 2
62719: PPUSH
62720: LD_VAR 0 3
62724: PPUSH
62725: CALL_OW 428
62729: PUSH
62730: LD_VAR 0 1
62734: EQUAL
62735: IFFALSE 62762
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62737: LD_ADDR_EXP 89
62741: PUSH
62742: LD_EXP 89
62746: PPUSH
62747: LD_VAR 0 1
62751: PPUSH
62752: LD_INT 0
62754: PPUSH
62755: CALL_OW 1
62759: ST_TO_ADDR
62760: GO 62813
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62762: LD_ADDR_EXP 89
62766: PUSH
62767: LD_EXP 89
62771: PPUSH
62772: LD_VAR 0 1
62776: PPUSH
62777: LD_VAR 0 1
62781: PPUSH
62782: CALL_OW 255
62786: PUSH
62787: LD_VAR 0 1
62791: PUSH
62792: LD_VAR 0 2
62796: PUSH
62797: LD_VAR 0 3
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: PPUSH
62808: CALL_OW 1
62812: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62813: CALL 62822 0 0
// end ;
62817: LD_VAR 0 4
62821: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62822: LD_INT 0
62824: PPUSH
62825: PPUSH
62826: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62827: LD_STRING resetWarehouseGatheringPoints();
62829: PPUSH
62830: CALL_OW 559
// if warehouseGatheringPoints then
62834: LD_EXP 89
62838: IFFALSE 62964
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62840: LD_ADDR_VAR 0 3
62844: PUSH
62845: LD_EXP 89
62849: PPUSH
62850: CALL 47564 0 1
62854: ST_TO_ADDR
// for i := 1 to list do
62855: LD_ADDR_VAR 0 2
62859: PUSH
62860: DOUBLE
62861: LD_INT 1
62863: DEC
62864: ST_TO_ADDR
62865: LD_VAR 0 3
62869: PUSH
62870: FOR_TO
62871: IFFALSE 62962
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62873: LD_STRING setWarehouseGatheringPointXY(
62875: PUSH
62876: LD_VAR 0 3
62880: PUSH
62881: LD_VAR 0 2
62885: ARRAY
62886: PUSH
62887: LD_INT 1
62889: ARRAY
62890: STR
62891: PUSH
62892: LD_STRING ,
62894: STR
62895: PUSH
62896: LD_VAR 0 3
62900: PUSH
62901: LD_VAR 0 2
62905: ARRAY
62906: PUSH
62907: LD_INT 2
62909: ARRAY
62910: STR
62911: PUSH
62912: LD_STRING ,
62914: STR
62915: PUSH
62916: LD_VAR 0 3
62920: PUSH
62921: LD_VAR 0 2
62925: ARRAY
62926: PUSH
62927: LD_INT 3
62929: ARRAY
62930: STR
62931: PUSH
62932: LD_STRING ,
62934: STR
62935: PUSH
62936: LD_VAR 0 3
62940: PUSH
62941: LD_VAR 0 2
62945: ARRAY
62946: PUSH
62947: LD_INT 4
62949: ARRAY
62950: STR
62951: PUSH
62952: LD_STRING )
62954: STR
62955: PPUSH
62956: CALL_OW 559
62960: GO 62870
62962: POP
62963: POP
// end ; end ;
62964: LD_VAR 0 1
62968: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
62969: LD_EXP 89
62973: IFFALSE 63658
62975: GO 62977
62977: DISABLE
62978: LD_INT 0
62980: PPUSH
62981: PPUSH
62982: PPUSH
62983: PPUSH
62984: PPUSH
62985: PPUSH
62986: PPUSH
62987: PPUSH
62988: PPUSH
// begin enable ;
62989: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
62990: LD_ADDR_VAR 0 3
62994: PUSH
62995: LD_EXP 89
62999: PPUSH
63000: CALL 47564 0 1
63004: ST_TO_ADDR
// if not list then
63005: LD_VAR 0 3
63009: NOT
63010: IFFALSE 63014
// exit ;
63012: GO 63658
// for i := 1 to list do
63014: LD_ADDR_VAR 0 1
63018: PUSH
63019: DOUBLE
63020: LD_INT 1
63022: DEC
63023: ST_TO_ADDR
63024: LD_VAR 0 3
63028: PUSH
63029: FOR_TO
63030: IFFALSE 63656
// begin depot := list [ i ] [ 2 ] ;
63032: LD_ADDR_VAR 0 8
63036: PUSH
63037: LD_VAR 0 3
63041: PUSH
63042: LD_VAR 0 1
63046: ARRAY
63047: PUSH
63048: LD_INT 2
63050: ARRAY
63051: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63052: LD_ADDR_VAR 0 5
63056: PUSH
63057: LD_VAR 0 3
63061: PUSH
63062: LD_VAR 0 1
63066: ARRAY
63067: PUSH
63068: LD_INT 1
63070: ARRAY
63071: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63072: LD_VAR 0 8
63076: PPUSH
63077: CALL_OW 301
63081: PUSH
63082: LD_VAR 0 5
63086: PUSH
63087: LD_VAR 0 8
63091: PPUSH
63092: CALL_OW 255
63096: NONEQUAL
63097: OR
63098: IFFALSE 63127
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63100: LD_ADDR_EXP 89
63104: PUSH
63105: LD_EXP 89
63109: PPUSH
63110: LD_VAR 0 8
63114: PPUSH
63115: LD_INT 0
63117: PPUSH
63118: CALL_OW 1
63122: ST_TO_ADDR
// exit ;
63123: POP
63124: POP
63125: GO 63658
// end ; x := list [ i ] [ 3 ] ;
63127: LD_ADDR_VAR 0 6
63131: PUSH
63132: LD_VAR 0 3
63136: PUSH
63137: LD_VAR 0 1
63141: ARRAY
63142: PUSH
63143: LD_INT 3
63145: ARRAY
63146: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63147: LD_ADDR_VAR 0 7
63151: PUSH
63152: LD_VAR 0 3
63156: PUSH
63157: LD_VAR 0 1
63161: ARRAY
63162: PUSH
63163: LD_INT 4
63165: ARRAY
63166: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63167: LD_ADDR_VAR 0 9
63171: PUSH
63172: LD_VAR 0 6
63176: PPUSH
63177: LD_VAR 0 7
63181: PPUSH
63182: LD_INT 16
63184: PPUSH
63185: CALL 46152 0 3
63189: ST_TO_ADDR
// if not cratesNearbyPoint then
63190: LD_VAR 0 9
63194: NOT
63195: IFFALSE 63201
// exit ;
63197: POP
63198: POP
63199: GO 63658
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63201: LD_ADDR_VAR 0 4
63205: PUSH
63206: LD_INT 22
63208: PUSH
63209: LD_VAR 0 5
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 3
63220: PUSH
63221: LD_INT 60
63223: PUSH
63224: EMPTY
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 91
63233: PUSH
63234: LD_VAR 0 8
63238: PUSH
63239: LD_INT 6
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: LD_INT 25
63252: PUSH
63253: LD_INT 2
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 25
63262: PUSH
63263: LD_INT 16
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: LIST
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: PPUSH
63281: CALL_OW 69
63285: PUSH
63286: LD_VAR 0 8
63290: PPUSH
63291: CALL_OW 313
63295: PPUSH
63296: LD_INT 3
63298: PUSH
63299: LD_INT 60
63301: PUSH
63302: EMPTY
63303: LIST
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: LD_INT 25
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 25
63324: PUSH
63325: LD_INT 16
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PPUSH
63341: CALL_OW 72
63345: UNION
63346: ST_TO_ADDR
// if tmp then
63347: LD_VAR 0 4
63351: IFFALSE 63431
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63353: LD_ADDR_VAR 0 4
63357: PUSH
63358: LD_VAR 0 4
63362: PPUSH
63363: LD_INT 3
63365: PPUSH
63366: CALL 44121 0 2
63370: ST_TO_ADDR
// for j in tmp do
63371: LD_ADDR_VAR 0 2
63375: PUSH
63376: LD_VAR 0 4
63380: PUSH
63381: FOR_IN
63382: IFFALSE 63425
// begin if IsInUnit ( j ) then
63384: LD_VAR 0 2
63388: PPUSH
63389: CALL_OW 310
63393: IFFALSE 63404
// ComExit ( j ) ;
63395: LD_VAR 0 2
63399: PPUSH
63400: CALL 44204 0 1
// AddComCollect ( j , x , y ) ;
63404: LD_VAR 0 2
63408: PPUSH
63409: LD_VAR 0 6
63413: PPUSH
63414: LD_VAR 0 7
63418: PPUSH
63419: CALL_OW 177
// end ;
63423: GO 63381
63425: POP
63426: POP
// exit ;
63427: POP
63428: POP
63429: GO 63658
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63431: LD_ADDR_VAR 0 4
63435: PUSH
63436: LD_INT 22
63438: PUSH
63439: LD_VAR 0 5
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 91
63450: PUSH
63451: LD_VAR 0 8
63455: PUSH
63456: LD_INT 8
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 2
63466: PUSH
63467: LD_INT 34
63469: PUSH
63470: LD_INT 12
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 34
63479: PUSH
63480: LD_INT 51
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 34
63489: PUSH
63490: LD_INT 32
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: PUSH
63497: LD_INT 34
63499: PUSH
63500: LD_INT 89
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: LIST
63518: PPUSH
63519: CALL_OW 69
63523: ST_TO_ADDR
// if tmp then
63524: LD_VAR 0 4
63528: IFFALSE 63654
// begin for j in tmp do
63530: LD_ADDR_VAR 0 2
63534: PUSH
63535: LD_VAR 0 4
63539: PUSH
63540: FOR_IN
63541: IFFALSE 63652
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63543: LD_VAR 0 2
63547: PPUSH
63548: CALL_OW 262
63552: PUSH
63553: LD_INT 3
63555: EQUAL
63556: PUSH
63557: LD_VAR 0 2
63561: PPUSH
63562: CALL_OW 261
63566: PUSH
63567: LD_INT 20
63569: GREATER
63570: OR
63571: PUSH
63572: LD_VAR 0 2
63576: PPUSH
63577: CALL_OW 314
63581: NOT
63582: AND
63583: PUSH
63584: LD_VAR 0 2
63588: PPUSH
63589: CALL_OW 263
63593: PUSH
63594: LD_INT 1
63596: NONEQUAL
63597: PUSH
63598: LD_VAR 0 2
63602: PPUSH
63603: CALL_OW 311
63607: OR
63608: AND
63609: IFFALSE 63650
// begin ComCollect ( j , x , y ) ;
63611: LD_VAR 0 2
63615: PPUSH
63616: LD_VAR 0 6
63620: PPUSH
63621: LD_VAR 0 7
63625: PPUSH
63626: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63630: LD_VAR 0 2
63634: PPUSH
63635: LD_VAR 0 8
63639: PPUSH
63640: CALL_OW 172
// exit ;
63644: POP
63645: POP
63646: POP
63647: POP
63648: GO 63658
// end ;
63650: GO 63540
63652: POP
63653: POP
// end ; end ;
63654: GO 63029
63656: POP
63657: POP
// end ; end_of_file
63658: PPOPN 9
63660: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63661: LD_VAR 0 1
63665: PUSH
63666: LD_INT 200
63668: DOUBLE
63669: GREATEREQUAL
63670: IFFALSE 63678
63672: LD_INT 299
63674: DOUBLE
63675: LESSEQUAL
63676: IFTRUE 63680
63678: GO 63712
63680: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63681: LD_VAR 0 1
63685: PPUSH
63686: LD_VAR 0 2
63690: PPUSH
63691: LD_VAR 0 3
63695: PPUSH
63696: LD_VAR 0 4
63700: PPUSH
63701: LD_VAR 0 5
63705: PPUSH
63706: CALL 64200 0 5
63710: GO 63789
63712: LD_INT 300
63714: DOUBLE
63715: GREATEREQUAL
63716: IFFALSE 63724
63718: LD_INT 399
63720: DOUBLE
63721: LESSEQUAL
63722: IFTRUE 63726
63724: GO 63788
63726: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63727: LD_VAR 0 1
63731: PPUSH
63732: LD_VAR 0 2
63736: PPUSH
63737: LD_VAR 0 3
63741: PPUSH
63742: LD_VAR 0 4
63746: PPUSH
63747: LD_VAR 0 5
63751: PPUSH
63752: LD_VAR 0 6
63756: PPUSH
63757: LD_VAR 0 7
63761: PPUSH
63762: LD_VAR 0 8
63766: PPUSH
63767: LD_VAR 0 9
63771: PPUSH
63772: LD_VAR 0 10
63776: PPUSH
63777: LD_VAR 0 11
63781: PPUSH
63782: CALL 60370 0 11
63786: GO 63789
63788: POP
// end ;
63789: PPOPN 11
63791: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63792: LD_VAR 0 1
63796: PPUSH
63797: LD_VAR 0 2
63801: PPUSH
63802: LD_VAR 0 3
63806: PPUSH
63807: LD_VAR 0 4
63811: PPUSH
63812: LD_VAR 0 5
63816: PPUSH
63817: CALL 63936 0 5
// end ; end_of_file
63821: PPOPN 5
63823: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63824: LD_INT 0
63826: PPUSH
63827: PPUSH
63828: PPUSH
63829: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63830: LD_VAR 0 1
63834: PPUSH
63835: CALL_OW 264
63839: PUSH
63840: LD_INT 91
63842: EQUAL
63843: IFFALSE 63915
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63845: LD_INT 68
63847: PPUSH
63848: LD_VAR 0 1
63852: PPUSH
63853: CALL_OW 255
63857: PPUSH
63858: CALL_OW 321
63862: PUSH
63863: LD_INT 2
63865: EQUAL
63866: IFFALSE 63878
// eff := 70 else
63868: LD_ADDR_VAR 0 4
63872: PUSH
63873: LD_INT 70
63875: ST_TO_ADDR
63876: GO 63886
// eff := 30 ;
63878: LD_ADDR_VAR 0 4
63882: PUSH
63883: LD_INT 30
63885: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63886: LD_VAR 0 1
63890: PPUSH
63891: CALL_OW 250
63895: PPUSH
63896: LD_VAR 0 1
63900: PPUSH
63901: CALL_OW 251
63905: PPUSH
63906: LD_VAR 0 4
63910: PPUSH
63911: CALL_OW 495
// end ; end ;
63915: LD_VAR 0 2
63919: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63920: LD_INT 0
63922: PPUSH
// end ;
63923: LD_VAR 0 4
63927: RET
// export function SOS_Command ( cmd ) ; begin
63928: LD_INT 0
63930: PPUSH
// end ;
63931: LD_VAR 0 2
63935: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63936: LD_INT 0
63938: PPUSH
// end ;
63939: LD_VAR 0 6
63943: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
63944: LD_INT 0
63946: PPUSH
63947: PPUSH
// if not vehicle or not factory then
63948: LD_VAR 0 1
63952: NOT
63953: PUSH
63954: LD_VAR 0 2
63958: NOT
63959: OR
63960: IFFALSE 63964
// exit ;
63962: GO 64195
// if factoryWaypoints >= factory then
63964: LD_EXP 88
63968: PUSH
63969: LD_VAR 0 2
63973: GREATEREQUAL
63974: IFFALSE 64195
// if factoryWaypoints [ factory ] then
63976: LD_EXP 88
63980: PUSH
63981: LD_VAR 0 2
63985: ARRAY
63986: IFFALSE 64195
// begin if GetControl ( vehicle ) = control_manual then
63988: LD_VAR 0 1
63992: PPUSH
63993: CALL_OW 263
63997: PUSH
63998: LD_INT 1
64000: EQUAL
64001: IFFALSE 64082
// begin driver := IsDrivenBy ( vehicle ) ;
64003: LD_ADDR_VAR 0 4
64007: PUSH
64008: LD_VAR 0 1
64012: PPUSH
64013: CALL_OW 311
64017: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64018: LD_VAR 0 4
64022: PPUSH
64023: LD_EXP 88
64027: PUSH
64028: LD_VAR 0 2
64032: ARRAY
64033: PUSH
64034: LD_INT 3
64036: ARRAY
64037: PPUSH
64038: LD_EXP 88
64042: PUSH
64043: LD_VAR 0 2
64047: ARRAY
64048: PUSH
64049: LD_INT 4
64051: ARRAY
64052: PPUSH
64053: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64057: LD_VAR 0 4
64061: PPUSH
64062: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64066: LD_VAR 0 4
64070: PPUSH
64071: LD_VAR 0 2
64075: PPUSH
64076: CALL_OW 180
// end else
64080: GO 64195
// if GetControl ( vehicle ) = control_remote then
64082: LD_VAR 0 1
64086: PPUSH
64087: CALL_OW 263
64091: PUSH
64092: LD_INT 2
64094: EQUAL
64095: IFFALSE 64156
// begin wait ( 0 0$2 ) ;
64097: LD_INT 70
64099: PPUSH
64100: CALL_OW 67
// if Connect ( vehicle ) then
64104: LD_VAR 0 1
64108: PPUSH
64109: CALL 14444 0 1
64113: IFFALSE 64154
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64115: LD_VAR 0 1
64119: PPUSH
64120: LD_EXP 88
64124: PUSH
64125: LD_VAR 0 2
64129: ARRAY
64130: PUSH
64131: LD_INT 3
64133: ARRAY
64134: PPUSH
64135: LD_EXP 88
64139: PUSH
64140: LD_VAR 0 2
64144: ARRAY
64145: PUSH
64146: LD_INT 4
64148: ARRAY
64149: PPUSH
64150: CALL_OW 171
// end else
64154: GO 64195
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64156: LD_VAR 0 1
64160: PPUSH
64161: LD_EXP 88
64165: PUSH
64166: LD_VAR 0 2
64170: ARRAY
64171: PUSH
64172: LD_INT 3
64174: ARRAY
64175: PPUSH
64176: LD_EXP 88
64180: PUSH
64181: LD_VAR 0 2
64185: ARRAY
64186: PUSH
64187: LD_INT 4
64189: ARRAY
64190: PPUSH
64191: CALL_OW 171
// end ; end ;
64195: LD_VAR 0 3
64199: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64200: LD_INT 0
64202: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64203: LD_VAR 0 1
64207: PUSH
64208: LD_INT 250
64210: EQUAL
64211: PUSH
64212: LD_VAR 0 2
64216: PPUSH
64217: CALL_OW 264
64221: PUSH
64222: LD_INT 81
64224: EQUAL
64225: AND
64226: IFFALSE 64247
// MinerPlaceMine ( unit , x , y ) ;
64228: LD_VAR 0 2
64232: PPUSH
64233: LD_VAR 0 4
64237: PPUSH
64238: LD_VAR 0 5
64242: PPUSH
64243: CALL 66632 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64247: LD_VAR 0 1
64251: PUSH
64252: LD_INT 251
64254: EQUAL
64255: PUSH
64256: LD_VAR 0 2
64260: PPUSH
64261: CALL_OW 264
64265: PUSH
64266: LD_INT 81
64268: EQUAL
64269: AND
64270: IFFALSE 64291
// MinerDetonateMine ( unit , x , y ) ;
64272: LD_VAR 0 2
64276: PPUSH
64277: LD_VAR 0 4
64281: PPUSH
64282: LD_VAR 0 5
64286: PPUSH
64287: CALL 66907 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64291: LD_VAR 0 1
64295: PUSH
64296: LD_INT 252
64298: EQUAL
64299: PUSH
64300: LD_VAR 0 2
64304: PPUSH
64305: CALL_OW 264
64309: PUSH
64310: LD_INT 81
64312: EQUAL
64313: AND
64314: IFFALSE 64335
// MinerCreateMinefield ( unit , x , y ) ;
64316: LD_VAR 0 2
64320: PPUSH
64321: LD_VAR 0 4
64325: PPUSH
64326: LD_VAR 0 5
64330: PPUSH
64331: CALL 67324 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64335: LD_VAR 0 1
64339: PUSH
64340: LD_INT 253
64342: EQUAL
64343: PUSH
64344: LD_VAR 0 2
64348: PPUSH
64349: CALL_OW 257
64353: PUSH
64354: LD_INT 5
64356: EQUAL
64357: AND
64358: IFFALSE 64379
// ComBinocular ( unit , x , y ) ;
64360: LD_VAR 0 2
64364: PPUSH
64365: LD_VAR 0 4
64369: PPUSH
64370: LD_VAR 0 5
64374: PPUSH
64375: CALL 67693 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64379: LD_VAR 0 1
64383: PUSH
64384: LD_INT 254
64386: EQUAL
64387: PUSH
64388: LD_VAR 0 2
64392: PPUSH
64393: CALL_OW 264
64397: PUSH
64398: LD_INT 99
64400: EQUAL
64401: AND
64402: PUSH
64403: LD_VAR 0 3
64407: PPUSH
64408: CALL_OW 263
64412: PUSH
64413: LD_INT 3
64415: EQUAL
64416: AND
64417: IFFALSE 64433
// HackDestroyVehicle ( unit , selectedUnit ) ;
64419: LD_VAR 0 2
64423: PPUSH
64424: LD_VAR 0 3
64428: PPUSH
64429: CALL 65996 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64433: LD_VAR 0 1
64437: PUSH
64438: LD_INT 255
64440: EQUAL
64441: PUSH
64442: LD_VAR 0 2
64446: PPUSH
64447: CALL_OW 264
64451: PUSH
64452: LD_INT 14
64454: PUSH
64455: LD_INT 53
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: IN
64462: AND
64463: PUSH
64464: LD_VAR 0 4
64468: PPUSH
64469: LD_VAR 0 5
64473: PPUSH
64474: CALL_OW 488
64478: AND
64479: IFFALSE 64503
// CutTreeXYR ( unit , x , y , 12 ) ;
64481: LD_VAR 0 2
64485: PPUSH
64486: LD_VAR 0 4
64490: PPUSH
64491: LD_VAR 0 5
64495: PPUSH
64496: LD_INT 12
64498: PPUSH
64499: CALL 64566 0 4
// if cmd = 256 then
64503: LD_VAR 0 1
64507: PUSH
64508: LD_INT 256
64510: EQUAL
64511: IFFALSE 64532
// SetFactoryWaypoint ( unit , x , y ) ;
64513: LD_VAR 0 2
64517: PPUSH
64518: LD_VAR 0 4
64522: PPUSH
64523: LD_VAR 0 5
64527: PPUSH
64528: CALL 62350 0 3
// if cmd = 257 then
64532: LD_VAR 0 1
64536: PUSH
64537: LD_INT 257
64539: EQUAL
64540: IFFALSE 64561
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64542: LD_VAR 0 2
64546: PPUSH
64547: LD_VAR 0 4
64551: PPUSH
64552: LD_VAR 0 5
64556: PPUSH
64557: CALL 62712 0 3
// end ;
64561: LD_VAR 0 6
64565: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64566: LD_INT 0
64568: PPUSH
64569: PPUSH
64570: PPUSH
64571: PPUSH
64572: PPUSH
64573: PPUSH
64574: PPUSH
64575: PPUSH
64576: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64577: LD_VAR 0 1
64581: NOT
64582: PUSH
64583: LD_VAR 0 2
64587: PPUSH
64588: LD_VAR 0 3
64592: PPUSH
64593: CALL_OW 488
64597: NOT
64598: OR
64599: PUSH
64600: LD_VAR 0 4
64604: NOT
64605: OR
64606: IFFALSE 64610
// exit ;
64608: GO 64950
// list := [ ] ;
64610: LD_ADDR_VAR 0 13
64614: PUSH
64615: EMPTY
64616: ST_TO_ADDR
// if x - r < 0 then
64617: LD_VAR 0 2
64621: PUSH
64622: LD_VAR 0 4
64626: MINUS
64627: PUSH
64628: LD_INT 0
64630: LESS
64631: IFFALSE 64643
// min_x := 0 else
64633: LD_ADDR_VAR 0 7
64637: PUSH
64638: LD_INT 0
64640: ST_TO_ADDR
64641: GO 64659
// min_x := x - r ;
64643: LD_ADDR_VAR 0 7
64647: PUSH
64648: LD_VAR 0 2
64652: PUSH
64653: LD_VAR 0 4
64657: MINUS
64658: ST_TO_ADDR
// if y - r < 0 then
64659: LD_VAR 0 3
64663: PUSH
64664: LD_VAR 0 4
64668: MINUS
64669: PUSH
64670: LD_INT 0
64672: LESS
64673: IFFALSE 64685
// min_y := 0 else
64675: LD_ADDR_VAR 0 8
64679: PUSH
64680: LD_INT 0
64682: ST_TO_ADDR
64683: GO 64701
// min_y := y - r ;
64685: LD_ADDR_VAR 0 8
64689: PUSH
64690: LD_VAR 0 3
64694: PUSH
64695: LD_VAR 0 4
64699: MINUS
64700: ST_TO_ADDR
// max_x := x + r ;
64701: LD_ADDR_VAR 0 9
64705: PUSH
64706: LD_VAR 0 2
64710: PUSH
64711: LD_VAR 0 4
64715: PLUS
64716: ST_TO_ADDR
// max_y := y + r ;
64717: LD_ADDR_VAR 0 10
64721: PUSH
64722: LD_VAR 0 3
64726: PUSH
64727: LD_VAR 0 4
64731: PLUS
64732: ST_TO_ADDR
// for _x = min_x to max_x do
64733: LD_ADDR_VAR 0 11
64737: PUSH
64738: DOUBLE
64739: LD_VAR 0 7
64743: DEC
64744: ST_TO_ADDR
64745: LD_VAR 0 9
64749: PUSH
64750: FOR_TO
64751: IFFALSE 64868
// for _y = min_y to max_y do
64753: LD_ADDR_VAR 0 12
64757: PUSH
64758: DOUBLE
64759: LD_VAR 0 8
64763: DEC
64764: ST_TO_ADDR
64765: LD_VAR 0 10
64769: PUSH
64770: FOR_TO
64771: IFFALSE 64864
// begin if not ValidHex ( _x , _y ) then
64773: LD_VAR 0 11
64777: PPUSH
64778: LD_VAR 0 12
64782: PPUSH
64783: CALL_OW 488
64787: NOT
64788: IFFALSE 64792
// continue ;
64790: GO 64770
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64792: LD_VAR 0 11
64796: PPUSH
64797: LD_VAR 0 12
64801: PPUSH
64802: CALL_OW 351
64806: PUSH
64807: LD_VAR 0 11
64811: PPUSH
64812: LD_VAR 0 12
64816: PPUSH
64817: CALL_OW 554
64821: AND
64822: IFFALSE 64862
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64824: LD_ADDR_VAR 0 13
64828: PUSH
64829: LD_VAR 0 13
64833: PPUSH
64834: LD_VAR 0 13
64838: PUSH
64839: LD_INT 1
64841: PLUS
64842: PPUSH
64843: LD_VAR 0 11
64847: PUSH
64848: LD_VAR 0 12
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PPUSH
64857: CALL_OW 2
64861: ST_TO_ADDR
// end ;
64862: GO 64770
64864: POP
64865: POP
64866: GO 64750
64868: POP
64869: POP
// if not list then
64870: LD_VAR 0 13
64874: NOT
64875: IFFALSE 64879
// exit ;
64877: GO 64950
// for i in list do
64879: LD_ADDR_VAR 0 6
64883: PUSH
64884: LD_VAR 0 13
64888: PUSH
64889: FOR_IN
64890: IFFALSE 64948
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64892: LD_VAR 0 1
64896: PPUSH
64897: LD_STRING M
64899: PUSH
64900: LD_VAR 0 6
64904: PUSH
64905: LD_INT 1
64907: ARRAY
64908: PUSH
64909: LD_VAR 0 6
64913: PUSH
64914: LD_INT 2
64916: ARRAY
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: PUSH
64939: EMPTY
64940: LIST
64941: PPUSH
64942: CALL_OW 447
64946: GO 64889
64948: POP
64949: POP
// end ;
64950: LD_VAR 0 5
64954: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
64955: LD_EXP 91
64959: NOT
64960: IFFALSE 65010
64962: GO 64964
64964: DISABLE
// begin initHack := true ;
64965: LD_ADDR_EXP 91
64969: PUSH
64970: LD_INT 1
64972: ST_TO_ADDR
// hackTanks := [ ] ;
64973: LD_ADDR_EXP 92
64977: PUSH
64978: EMPTY
64979: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
64980: LD_ADDR_EXP 93
64984: PUSH
64985: EMPTY
64986: ST_TO_ADDR
// hackLimit := 3 ;
64987: LD_ADDR_EXP 94
64991: PUSH
64992: LD_INT 3
64994: ST_TO_ADDR
// hackDist := 12 ;
64995: LD_ADDR_EXP 95
64999: PUSH
65000: LD_INT 12
65002: ST_TO_ADDR
// hackCounter := [ ] ;
65003: LD_ADDR_EXP 96
65007: PUSH
65008: EMPTY
65009: ST_TO_ADDR
// end ;
65010: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65011: LD_EXP 91
65015: PUSH
65016: LD_INT 34
65018: PUSH
65019: LD_INT 99
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PPUSH
65026: CALL_OW 69
65030: AND
65031: IFFALSE 65284
65033: GO 65035
65035: DISABLE
65036: LD_INT 0
65038: PPUSH
65039: PPUSH
// begin enable ;
65040: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65041: LD_ADDR_VAR 0 1
65045: PUSH
65046: LD_INT 34
65048: PUSH
65049: LD_INT 99
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PPUSH
65056: CALL_OW 69
65060: PUSH
65061: FOR_IN
65062: IFFALSE 65282
// begin if not i in hackTanks then
65064: LD_VAR 0 1
65068: PUSH
65069: LD_EXP 92
65073: IN
65074: NOT
65075: IFFALSE 65158
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65077: LD_ADDR_EXP 92
65081: PUSH
65082: LD_EXP 92
65086: PPUSH
65087: LD_EXP 92
65091: PUSH
65092: LD_INT 1
65094: PLUS
65095: PPUSH
65096: LD_VAR 0 1
65100: PPUSH
65101: CALL_OW 1
65105: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65106: LD_ADDR_EXP 93
65110: PUSH
65111: LD_EXP 93
65115: PPUSH
65116: LD_EXP 93
65120: PUSH
65121: LD_INT 1
65123: PLUS
65124: PPUSH
65125: EMPTY
65126: PPUSH
65127: CALL_OW 1
65131: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65132: LD_ADDR_EXP 96
65136: PUSH
65137: LD_EXP 96
65141: PPUSH
65142: LD_EXP 96
65146: PUSH
65147: LD_INT 1
65149: PLUS
65150: PPUSH
65151: EMPTY
65152: PPUSH
65153: CALL_OW 1
65157: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65158: LD_VAR 0 1
65162: PPUSH
65163: CALL_OW 302
65167: NOT
65168: IFFALSE 65181
// begin HackUnlinkAll ( i ) ;
65170: LD_VAR 0 1
65174: PPUSH
65175: CALL 65287 0 1
// continue ;
65179: GO 65061
// end ; HackCheckCapturedStatus ( i ) ;
65181: LD_VAR 0 1
65185: PPUSH
65186: CALL 65730 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65190: LD_ADDR_VAR 0 2
65194: PUSH
65195: LD_INT 81
65197: PUSH
65198: LD_VAR 0 1
65202: PPUSH
65203: CALL_OW 255
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 33
65214: PUSH
65215: LD_INT 3
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 91
65224: PUSH
65225: LD_VAR 0 1
65229: PUSH
65230: LD_EXP 95
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 50
65242: PUSH
65243: EMPTY
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: PPUSH
65252: CALL_OW 69
65256: ST_TO_ADDR
// if not tmp then
65257: LD_VAR 0 2
65261: NOT
65262: IFFALSE 65266
// continue ;
65264: GO 65061
// HackLink ( i , tmp ) ;
65266: LD_VAR 0 1
65270: PPUSH
65271: LD_VAR 0 2
65275: PPUSH
65276: CALL 65423 0 2
// end ;
65280: GO 65061
65282: POP
65283: POP
// end ;
65284: PPOPN 2
65286: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65287: LD_INT 0
65289: PPUSH
65290: PPUSH
65291: PPUSH
// if not hack in hackTanks then
65292: LD_VAR 0 1
65296: PUSH
65297: LD_EXP 92
65301: IN
65302: NOT
65303: IFFALSE 65307
// exit ;
65305: GO 65418
// index := GetElementIndex ( hackTanks , hack ) ;
65307: LD_ADDR_VAR 0 4
65311: PUSH
65312: LD_EXP 92
65316: PPUSH
65317: LD_VAR 0 1
65321: PPUSH
65322: CALL 11260 0 2
65326: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65327: LD_EXP 93
65331: PUSH
65332: LD_VAR 0 4
65336: ARRAY
65337: IFFALSE 65418
// begin for i in hackTanksCaptured [ index ] do
65339: LD_ADDR_VAR 0 3
65343: PUSH
65344: LD_EXP 93
65348: PUSH
65349: LD_VAR 0 4
65353: ARRAY
65354: PUSH
65355: FOR_IN
65356: IFFALSE 65382
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65358: LD_VAR 0 3
65362: PUSH
65363: LD_INT 1
65365: ARRAY
65366: PPUSH
65367: LD_VAR 0 3
65371: PUSH
65372: LD_INT 2
65374: ARRAY
65375: PPUSH
65376: CALL_OW 235
65380: GO 65355
65382: POP
65383: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65384: LD_ADDR_EXP 93
65388: PUSH
65389: LD_EXP 93
65393: PPUSH
65394: LD_VAR 0 4
65398: PPUSH
65399: EMPTY
65400: PPUSH
65401: CALL_OW 1
65405: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65406: LD_VAR 0 1
65410: PPUSH
65411: LD_INT 0
65413: PPUSH
65414: CALL_OW 505
// end ; end ;
65418: LD_VAR 0 2
65422: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65423: LD_INT 0
65425: PPUSH
65426: PPUSH
65427: PPUSH
// if not hack in hackTanks or not vehicles then
65428: LD_VAR 0 1
65432: PUSH
65433: LD_EXP 92
65437: IN
65438: NOT
65439: PUSH
65440: LD_VAR 0 2
65444: NOT
65445: OR
65446: IFFALSE 65450
// exit ;
65448: GO 65725
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65450: LD_ADDR_VAR 0 2
65454: PUSH
65455: LD_VAR 0 1
65459: PPUSH
65460: LD_VAR 0 2
65464: PPUSH
65465: LD_INT 1
65467: PPUSH
65468: LD_INT 1
65470: PPUSH
65471: CALL 11910 0 4
65475: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65476: LD_ADDR_VAR 0 5
65480: PUSH
65481: LD_EXP 92
65485: PPUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL 11260 0 2
65495: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65496: LD_EXP 93
65500: PUSH
65501: LD_VAR 0 5
65505: ARRAY
65506: PUSH
65507: LD_EXP 94
65511: LESS
65512: IFFALSE 65701
// begin for i := 1 to vehicles do
65514: LD_ADDR_VAR 0 4
65518: PUSH
65519: DOUBLE
65520: LD_INT 1
65522: DEC
65523: ST_TO_ADDR
65524: LD_VAR 0 2
65528: PUSH
65529: FOR_TO
65530: IFFALSE 65699
// begin if hackTanksCaptured [ index ] = hackLimit then
65532: LD_EXP 93
65536: PUSH
65537: LD_VAR 0 5
65541: ARRAY
65542: PUSH
65543: LD_EXP 94
65547: EQUAL
65548: IFFALSE 65552
// break ;
65550: GO 65699
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65552: LD_ADDR_EXP 96
65556: PUSH
65557: LD_EXP 96
65561: PPUSH
65562: LD_VAR 0 5
65566: PPUSH
65567: LD_EXP 96
65571: PUSH
65572: LD_VAR 0 5
65576: ARRAY
65577: PUSH
65578: LD_INT 1
65580: PLUS
65581: PPUSH
65582: CALL_OW 1
65586: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65587: LD_ADDR_EXP 93
65591: PUSH
65592: LD_EXP 93
65596: PPUSH
65597: LD_VAR 0 5
65601: PUSH
65602: LD_EXP 93
65606: PUSH
65607: LD_VAR 0 5
65611: ARRAY
65612: PUSH
65613: LD_INT 1
65615: PLUS
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PPUSH
65621: LD_VAR 0 2
65625: PUSH
65626: LD_VAR 0 4
65630: ARRAY
65631: PUSH
65632: LD_VAR 0 2
65636: PUSH
65637: LD_VAR 0 4
65641: ARRAY
65642: PPUSH
65643: CALL_OW 255
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: PPUSH
65652: CALL 11475 0 3
65656: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65657: LD_VAR 0 2
65661: PUSH
65662: LD_VAR 0 4
65666: ARRAY
65667: PPUSH
65668: LD_VAR 0 1
65672: PPUSH
65673: CALL_OW 255
65677: PPUSH
65678: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65682: LD_VAR 0 2
65686: PUSH
65687: LD_VAR 0 4
65691: ARRAY
65692: PPUSH
65693: CALL_OW 141
// end ;
65697: GO 65529
65699: POP
65700: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65701: LD_VAR 0 1
65705: PPUSH
65706: LD_EXP 93
65710: PUSH
65711: LD_VAR 0 5
65715: ARRAY
65716: PUSH
65717: LD_INT 0
65719: PLUS
65720: PPUSH
65721: CALL_OW 505
// end ;
65725: LD_VAR 0 3
65729: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65730: LD_INT 0
65732: PPUSH
65733: PPUSH
65734: PPUSH
65735: PPUSH
// if not hack in hackTanks then
65736: LD_VAR 0 1
65740: PUSH
65741: LD_EXP 92
65745: IN
65746: NOT
65747: IFFALSE 65751
// exit ;
65749: GO 65991
// index := GetElementIndex ( hackTanks , hack ) ;
65751: LD_ADDR_VAR 0 4
65755: PUSH
65756: LD_EXP 92
65760: PPUSH
65761: LD_VAR 0 1
65765: PPUSH
65766: CALL 11260 0 2
65770: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65771: LD_ADDR_VAR 0 3
65775: PUSH
65776: DOUBLE
65777: LD_EXP 93
65781: PUSH
65782: LD_VAR 0 4
65786: ARRAY
65787: INC
65788: ST_TO_ADDR
65789: LD_INT 1
65791: PUSH
65792: FOR_DOWNTO
65793: IFFALSE 65965
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65795: LD_ADDR_VAR 0 5
65799: PUSH
65800: LD_EXP 93
65804: PUSH
65805: LD_VAR 0 4
65809: ARRAY
65810: PUSH
65811: LD_VAR 0 3
65815: ARRAY
65816: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65817: LD_VAR 0 5
65821: PUSH
65822: LD_INT 1
65824: ARRAY
65825: PPUSH
65826: CALL_OW 302
65830: NOT
65831: PUSH
65832: LD_VAR 0 5
65836: PUSH
65837: LD_INT 1
65839: ARRAY
65840: PPUSH
65841: CALL_OW 255
65845: PUSH
65846: LD_VAR 0 1
65850: PPUSH
65851: CALL_OW 255
65855: NONEQUAL
65856: OR
65857: IFFALSE 65963
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65859: LD_VAR 0 5
65863: PUSH
65864: LD_INT 1
65866: ARRAY
65867: PPUSH
65868: CALL_OW 305
65872: PUSH
65873: LD_VAR 0 5
65877: PUSH
65878: LD_INT 1
65880: ARRAY
65881: PPUSH
65882: CALL_OW 255
65886: PUSH
65887: LD_VAR 0 1
65891: PPUSH
65892: CALL_OW 255
65896: EQUAL
65897: AND
65898: IFFALSE 65922
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65900: LD_VAR 0 5
65904: PUSH
65905: LD_INT 1
65907: ARRAY
65908: PPUSH
65909: LD_VAR 0 5
65913: PUSH
65914: LD_INT 2
65916: ARRAY
65917: PPUSH
65918: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65922: LD_ADDR_EXP 93
65926: PUSH
65927: LD_EXP 93
65931: PPUSH
65932: LD_VAR 0 4
65936: PPUSH
65937: LD_EXP 93
65941: PUSH
65942: LD_VAR 0 4
65946: ARRAY
65947: PPUSH
65948: LD_VAR 0 3
65952: PPUSH
65953: CALL_OW 3
65957: PPUSH
65958: CALL_OW 1
65962: ST_TO_ADDR
// end ; end ;
65963: GO 65792
65965: POP
65966: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65967: LD_VAR 0 1
65971: PPUSH
65972: LD_EXP 93
65976: PUSH
65977: LD_VAR 0 4
65981: ARRAY
65982: PUSH
65983: LD_INT 0
65985: PLUS
65986: PPUSH
65987: CALL_OW 505
// end ;
65991: LD_VAR 0 2
65995: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
65996: LD_INT 0
65998: PPUSH
65999: PPUSH
66000: PPUSH
66001: PPUSH
// if not hack in hackTanks then
66002: LD_VAR 0 1
66006: PUSH
66007: LD_EXP 92
66011: IN
66012: NOT
66013: IFFALSE 66017
// exit ;
66015: GO 66102
// index := GetElementIndex ( hackTanks , hack ) ;
66017: LD_ADDR_VAR 0 5
66021: PUSH
66022: LD_EXP 92
66026: PPUSH
66027: LD_VAR 0 1
66031: PPUSH
66032: CALL 11260 0 2
66036: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66037: LD_ADDR_VAR 0 4
66041: PUSH
66042: DOUBLE
66043: LD_INT 1
66045: DEC
66046: ST_TO_ADDR
66047: LD_EXP 93
66051: PUSH
66052: LD_VAR 0 5
66056: ARRAY
66057: PUSH
66058: FOR_TO
66059: IFFALSE 66100
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66061: LD_EXP 93
66065: PUSH
66066: LD_VAR 0 5
66070: ARRAY
66071: PUSH
66072: LD_VAR 0 4
66076: ARRAY
66077: PUSH
66078: LD_INT 1
66080: ARRAY
66081: PUSH
66082: LD_VAR 0 2
66086: EQUAL
66087: IFFALSE 66098
// KillUnit ( vehicle ) ;
66089: LD_VAR 0 2
66093: PPUSH
66094: CALL_OW 66
66098: GO 66058
66100: POP
66101: POP
// end ;
66102: LD_VAR 0 3
66106: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66107: LD_EXP 97
66111: NOT
66112: IFFALSE 66147
66114: GO 66116
66116: DISABLE
// begin initMiner := true ;
66117: LD_ADDR_EXP 97
66121: PUSH
66122: LD_INT 1
66124: ST_TO_ADDR
// minersList := [ ] ;
66125: LD_ADDR_EXP 98
66129: PUSH
66130: EMPTY
66131: ST_TO_ADDR
// minerMinesList := [ ] ;
66132: LD_ADDR_EXP 99
66136: PUSH
66137: EMPTY
66138: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66139: LD_ADDR_EXP 100
66143: PUSH
66144: LD_INT 5
66146: ST_TO_ADDR
// end ;
66147: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66148: LD_EXP 97
66152: PUSH
66153: LD_INT 34
66155: PUSH
66156: LD_INT 81
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PPUSH
66163: CALL_OW 69
66167: AND
66168: IFFALSE 66629
66170: GO 66172
66172: DISABLE
66173: LD_INT 0
66175: PPUSH
66176: PPUSH
66177: PPUSH
66178: PPUSH
// begin enable ;
66179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66180: LD_ADDR_VAR 0 1
66184: PUSH
66185: LD_INT 34
66187: PUSH
66188: LD_INT 81
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PPUSH
66195: CALL_OW 69
66199: PUSH
66200: FOR_IN
66201: IFFALSE 66273
// begin if not i in minersList then
66203: LD_VAR 0 1
66207: PUSH
66208: LD_EXP 98
66212: IN
66213: NOT
66214: IFFALSE 66271
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66216: LD_ADDR_EXP 98
66220: PUSH
66221: LD_EXP 98
66225: PPUSH
66226: LD_EXP 98
66230: PUSH
66231: LD_INT 1
66233: PLUS
66234: PPUSH
66235: LD_VAR 0 1
66239: PPUSH
66240: CALL_OW 1
66244: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66245: LD_ADDR_EXP 99
66249: PUSH
66250: LD_EXP 99
66254: PPUSH
66255: LD_EXP 99
66259: PUSH
66260: LD_INT 1
66262: PLUS
66263: PPUSH
66264: EMPTY
66265: PPUSH
66266: CALL_OW 1
66270: ST_TO_ADDR
// end end ;
66271: GO 66200
66273: POP
66274: POP
// for i := minerMinesList downto 1 do
66275: LD_ADDR_VAR 0 1
66279: PUSH
66280: DOUBLE
66281: LD_EXP 99
66285: INC
66286: ST_TO_ADDR
66287: LD_INT 1
66289: PUSH
66290: FOR_DOWNTO
66291: IFFALSE 66627
// begin if IsLive ( minersList [ i ] ) then
66293: LD_EXP 98
66297: PUSH
66298: LD_VAR 0 1
66302: ARRAY
66303: PPUSH
66304: CALL_OW 300
66308: IFFALSE 66336
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66310: LD_EXP 98
66314: PUSH
66315: LD_VAR 0 1
66319: ARRAY
66320: PPUSH
66321: LD_EXP 99
66325: PUSH
66326: LD_VAR 0 1
66330: ARRAY
66331: PPUSH
66332: CALL_OW 505
// if not minerMinesList [ i ] then
66336: LD_EXP 99
66340: PUSH
66341: LD_VAR 0 1
66345: ARRAY
66346: NOT
66347: IFFALSE 66351
// continue ;
66349: GO 66290
// for j := minerMinesList [ i ] downto 1 do
66351: LD_ADDR_VAR 0 2
66355: PUSH
66356: DOUBLE
66357: LD_EXP 99
66361: PUSH
66362: LD_VAR 0 1
66366: ARRAY
66367: INC
66368: ST_TO_ADDR
66369: LD_INT 1
66371: PUSH
66372: FOR_DOWNTO
66373: IFFALSE 66623
// begin side := GetSide ( minersList [ i ] ) ;
66375: LD_ADDR_VAR 0 3
66379: PUSH
66380: LD_EXP 98
66384: PUSH
66385: LD_VAR 0 1
66389: ARRAY
66390: PPUSH
66391: CALL_OW 255
66395: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66396: LD_ADDR_VAR 0 4
66400: PUSH
66401: LD_EXP 99
66405: PUSH
66406: LD_VAR 0 1
66410: ARRAY
66411: PUSH
66412: LD_VAR 0 2
66416: ARRAY
66417: PUSH
66418: LD_INT 1
66420: ARRAY
66421: PPUSH
66422: LD_EXP 99
66426: PUSH
66427: LD_VAR 0 1
66431: ARRAY
66432: PUSH
66433: LD_VAR 0 2
66437: ARRAY
66438: PUSH
66439: LD_INT 2
66441: ARRAY
66442: PPUSH
66443: CALL_OW 428
66447: ST_TO_ADDR
// if not tmp then
66448: LD_VAR 0 4
66452: NOT
66453: IFFALSE 66457
// continue ;
66455: GO 66372
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66457: LD_VAR 0 4
66461: PUSH
66462: LD_INT 81
66464: PUSH
66465: LD_VAR 0 3
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PPUSH
66474: CALL_OW 69
66478: IN
66479: PUSH
66480: LD_EXP 99
66484: PUSH
66485: LD_VAR 0 1
66489: ARRAY
66490: PUSH
66491: LD_VAR 0 2
66495: ARRAY
66496: PUSH
66497: LD_INT 1
66499: ARRAY
66500: PPUSH
66501: LD_EXP 99
66505: PUSH
66506: LD_VAR 0 1
66510: ARRAY
66511: PUSH
66512: LD_VAR 0 2
66516: ARRAY
66517: PUSH
66518: LD_INT 2
66520: ARRAY
66521: PPUSH
66522: CALL_OW 458
66526: AND
66527: IFFALSE 66621
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66529: LD_EXP 99
66533: PUSH
66534: LD_VAR 0 1
66538: ARRAY
66539: PUSH
66540: LD_VAR 0 2
66544: ARRAY
66545: PUSH
66546: LD_INT 1
66548: ARRAY
66549: PPUSH
66550: LD_EXP 99
66554: PUSH
66555: LD_VAR 0 1
66559: ARRAY
66560: PUSH
66561: LD_VAR 0 2
66565: ARRAY
66566: PUSH
66567: LD_INT 2
66569: ARRAY
66570: PPUSH
66571: LD_VAR 0 3
66575: PPUSH
66576: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66580: LD_ADDR_EXP 99
66584: PUSH
66585: LD_EXP 99
66589: PPUSH
66590: LD_VAR 0 1
66594: PPUSH
66595: LD_EXP 99
66599: PUSH
66600: LD_VAR 0 1
66604: ARRAY
66605: PPUSH
66606: LD_VAR 0 2
66610: PPUSH
66611: CALL_OW 3
66615: PPUSH
66616: CALL_OW 1
66620: ST_TO_ADDR
// end ; end ;
66621: GO 66372
66623: POP
66624: POP
// end ;
66625: GO 66290
66627: POP
66628: POP
// end ;
66629: PPOPN 4
66631: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66632: LD_INT 0
66634: PPUSH
66635: PPUSH
// result := false ;
66636: LD_ADDR_VAR 0 4
66640: PUSH
66641: LD_INT 0
66643: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66644: LD_VAR 0 1
66648: PPUSH
66649: CALL_OW 264
66653: PUSH
66654: LD_INT 81
66656: EQUAL
66657: NOT
66658: IFFALSE 66662
// exit ;
66660: GO 66902
// index := GetElementIndex ( minersList , unit ) ;
66662: LD_ADDR_VAR 0 5
66666: PUSH
66667: LD_EXP 98
66671: PPUSH
66672: LD_VAR 0 1
66676: PPUSH
66677: CALL 11260 0 2
66681: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66682: LD_EXP 99
66686: PUSH
66687: LD_VAR 0 5
66691: ARRAY
66692: PUSH
66693: LD_EXP 100
66697: GREATEREQUAL
66698: IFFALSE 66702
// exit ;
66700: GO 66902
// ComMoveXY ( unit , x , y ) ;
66702: LD_VAR 0 1
66706: PPUSH
66707: LD_VAR 0 2
66711: PPUSH
66712: LD_VAR 0 3
66716: PPUSH
66717: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66721: LD_INT 35
66723: PPUSH
66724: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66728: LD_VAR 0 1
66732: PPUSH
66733: LD_VAR 0 2
66737: PPUSH
66738: LD_VAR 0 3
66742: PPUSH
66743: CALL 42615 0 3
66747: NOT
66748: PUSH
66749: LD_VAR 0 1
66753: PPUSH
66754: CALL_OW 314
66758: AND
66759: IFFALSE 66763
// exit ;
66761: GO 66902
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66763: LD_VAR 0 2
66767: PPUSH
66768: LD_VAR 0 3
66772: PPUSH
66773: CALL_OW 428
66777: PUSH
66778: LD_VAR 0 1
66782: EQUAL
66783: PUSH
66784: LD_VAR 0 1
66788: PPUSH
66789: CALL_OW 314
66793: NOT
66794: AND
66795: IFFALSE 66721
// PlaySoundXY ( x , y , PlantMine ) ;
66797: LD_VAR 0 2
66801: PPUSH
66802: LD_VAR 0 3
66806: PPUSH
66807: LD_STRING PlantMine
66809: PPUSH
66810: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66814: LD_VAR 0 2
66818: PPUSH
66819: LD_VAR 0 3
66823: PPUSH
66824: LD_VAR 0 1
66828: PPUSH
66829: CALL_OW 255
66833: PPUSH
66834: LD_INT 0
66836: PPUSH
66837: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66841: LD_ADDR_EXP 99
66845: PUSH
66846: LD_EXP 99
66850: PPUSH
66851: LD_VAR 0 5
66855: PUSH
66856: LD_EXP 99
66860: PUSH
66861: LD_VAR 0 5
66865: ARRAY
66866: PUSH
66867: LD_INT 1
66869: PLUS
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PPUSH
66875: LD_VAR 0 2
66879: PUSH
66880: LD_VAR 0 3
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PPUSH
66889: CALL 11475 0 3
66893: ST_TO_ADDR
// result := true ;
66894: LD_ADDR_VAR 0 4
66898: PUSH
66899: LD_INT 1
66901: ST_TO_ADDR
// end ;
66902: LD_VAR 0 4
66906: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66907: LD_INT 0
66909: PPUSH
66910: PPUSH
66911: PPUSH
// if not unit in minersList then
66912: LD_VAR 0 1
66916: PUSH
66917: LD_EXP 98
66921: IN
66922: NOT
66923: IFFALSE 66927
// exit ;
66925: GO 67319
// index := GetElementIndex ( minersList , unit ) ;
66927: LD_ADDR_VAR 0 6
66931: PUSH
66932: LD_EXP 98
66936: PPUSH
66937: LD_VAR 0 1
66941: PPUSH
66942: CALL 11260 0 2
66946: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
66947: LD_ADDR_VAR 0 5
66951: PUSH
66952: DOUBLE
66953: LD_EXP 99
66957: PUSH
66958: LD_VAR 0 6
66962: ARRAY
66963: INC
66964: ST_TO_ADDR
66965: LD_INT 1
66967: PUSH
66968: FOR_DOWNTO
66969: IFFALSE 67130
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
66971: LD_EXP 99
66975: PUSH
66976: LD_VAR 0 6
66980: ARRAY
66981: PUSH
66982: LD_VAR 0 5
66986: ARRAY
66987: PUSH
66988: LD_INT 1
66990: ARRAY
66991: PUSH
66992: LD_VAR 0 2
66996: EQUAL
66997: PUSH
66998: LD_EXP 99
67002: PUSH
67003: LD_VAR 0 6
67007: ARRAY
67008: PUSH
67009: LD_VAR 0 5
67013: ARRAY
67014: PUSH
67015: LD_INT 2
67017: ARRAY
67018: PUSH
67019: LD_VAR 0 3
67023: EQUAL
67024: AND
67025: IFFALSE 67128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67027: LD_EXP 99
67031: PUSH
67032: LD_VAR 0 6
67036: ARRAY
67037: PUSH
67038: LD_VAR 0 5
67042: ARRAY
67043: PUSH
67044: LD_INT 1
67046: ARRAY
67047: PPUSH
67048: LD_EXP 99
67052: PUSH
67053: LD_VAR 0 6
67057: ARRAY
67058: PUSH
67059: LD_VAR 0 5
67063: ARRAY
67064: PUSH
67065: LD_INT 2
67067: ARRAY
67068: PPUSH
67069: LD_VAR 0 1
67073: PPUSH
67074: CALL_OW 255
67078: PPUSH
67079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67083: LD_ADDR_EXP 99
67087: PUSH
67088: LD_EXP 99
67092: PPUSH
67093: LD_VAR 0 6
67097: PPUSH
67098: LD_EXP 99
67102: PUSH
67103: LD_VAR 0 6
67107: ARRAY
67108: PPUSH
67109: LD_VAR 0 5
67113: PPUSH
67114: CALL_OW 3
67118: PPUSH
67119: CALL_OW 1
67123: ST_TO_ADDR
// exit ;
67124: POP
67125: POP
67126: GO 67319
// end ; end ;
67128: GO 66968
67130: POP
67131: POP
// for i := minerMinesList [ index ] downto 1 do
67132: LD_ADDR_VAR 0 5
67136: PUSH
67137: DOUBLE
67138: LD_EXP 99
67142: PUSH
67143: LD_VAR 0 6
67147: ARRAY
67148: INC
67149: ST_TO_ADDR
67150: LD_INT 1
67152: PUSH
67153: FOR_DOWNTO
67154: IFFALSE 67317
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67156: LD_EXP 99
67160: PUSH
67161: LD_VAR 0 6
67165: ARRAY
67166: PUSH
67167: LD_VAR 0 5
67171: ARRAY
67172: PUSH
67173: LD_INT 1
67175: ARRAY
67176: PPUSH
67177: LD_EXP 99
67181: PUSH
67182: LD_VAR 0 6
67186: ARRAY
67187: PUSH
67188: LD_VAR 0 5
67192: ARRAY
67193: PUSH
67194: LD_INT 2
67196: ARRAY
67197: PPUSH
67198: LD_VAR 0 2
67202: PPUSH
67203: LD_VAR 0 3
67207: PPUSH
67208: CALL_OW 298
67212: PUSH
67213: LD_INT 6
67215: LESS
67216: IFFALSE 67315
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67218: LD_EXP 99
67222: PUSH
67223: LD_VAR 0 6
67227: ARRAY
67228: PUSH
67229: LD_VAR 0 5
67233: ARRAY
67234: PUSH
67235: LD_INT 1
67237: ARRAY
67238: PPUSH
67239: LD_EXP 99
67243: PUSH
67244: LD_VAR 0 6
67248: ARRAY
67249: PUSH
67250: LD_VAR 0 5
67254: ARRAY
67255: PUSH
67256: LD_INT 2
67258: ARRAY
67259: PPUSH
67260: LD_VAR 0 1
67264: PPUSH
67265: CALL_OW 255
67269: PPUSH
67270: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67274: LD_ADDR_EXP 99
67278: PUSH
67279: LD_EXP 99
67283: PPUSH
67284: LD_VAR 0 6
67288: PPUSH
67289: LD_EXP 99
67293: PUSH
67294: LD_VAR 0 6
67298: ARRAY
67299: PPUSH
67300: LD_VAR 0 5
67304: PPUSH
67305: CALL_OW 3
67309: PPUSH
67310: CALL_OW 1
67314: ST_TO_ADDR
// end ; end ;
67315: GO 67153
67317: POP
67318: POP
// end ;
67319: LD_VAR 0 4
67323: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67324: LD_INT 0
67326: PPUSH
67327: PPUSH
67328: PPUSH
67329: PPUSH
67330: PPUSH
67331: PPUSH
67332: PPUSH
67333: PPUSH
67334: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67335: LD_VAR 0 1
67339: PPUSH
67340: CALL_OW 264
67344: PUSH
67345: LD_INT 81
67347: EQUAL
67348: NOT
67349: PUSH
67350: LD_VAR 0 1
67354: PUSH
67355: LD_EXP 98
67359: IN
67360: NOT
67361: OR
67362: IFFALSE 67366
// exit ;
67364: GO 67688
// index := GetElementIndex ( minersList , unit ) ;
67366: LD_ADDR_VAR 0 6
67370: PUSH
67371: LD_EXP 98
67375: PPUSH
67376: LD_VAR 0 1
67380: PPUSH
67381: CALL 11260 0 2
67385: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67386: LD_ADDR_VAR 0 8
67390: PUSH
67391: LD_EXP 100
67395: PUSH
67396: LD_EXP 99
67400: PUSH
67401: LD_VAR 0 6
67405: ARRAY
67406: MINUS
67407: ST_TO_ADDR
// if not minesFreeAmount then
67408: LD_VAR 0 8
67412: NOT
67413: IFFALSE 67417
// exit ;
67415: GO 67688
// tmp := [ ] ;
67417: LD_ADDR_VAR 0 7
67421: PUSH
67422: EMPTY
67423: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67424: LD_ADDR_VAR 0 5
67428: PUSH
67429: DOUBLE
67430: LD_INT 1
67432: DEC
67433: ST_TO_ADDR
67434: LD_VAR 0 8
67438: PUSH
67439: FOR_TO
67440: IFFALSE 67635
// begin _d := rand ( 0 , 5 ) ;
67442: LD_ADDR_VAR 0 11
67446: PUSH
67447: LD_INT 0
67449: PPUSH
67450: LD_INT 5
67452: PPUSH
67453: CALL_OW 12
67457: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67458: LD_ADDR_VAR 0 12
67462: PUSH
67463: LD_INT 2
67465: PPUSH
67466: LD_INT 6
67468: PPUSH
67469: CALL_OW 12
67473: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67474: LD_ADDR_VAR 0 9
67478: PUSH
67479: LD_VAR 0 2
67483: PPUSH
67484: LD_VAR 0 11
67488: PPUSH
67489: LD_VAR 0 12
67493: PPUSH
67494: CALL_OW 272
67498: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67499: LD_ADDR_VAR 0 10
67503: PUSH
67504: LD_VAR 0 3
67508: PPUSH
67509: LD_VAR 0 11
67513: PPUSH
67514: LD_VAR 0 12
67518: PPUSH
67519: CALL_OW 273
67523: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67524: LD_VAR 0 9
67528: PPUSH
67529: LD_VAR 0 10
67533: PPUSH
67534: CALL_OW 488
67538: PUSH
67539: LD_VAR 0 9
67543: PUSH
67544: LD_VAR 0 10
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_VAR 0 7
67557: IN
67558: NOT
67559: AND
67560: PUSH
67561: LD_VAR 0 9
67565: PPUSH
67566: LD_VAR 0 10
67570: PPUSH
67571: CALL_OW 458
67575: NOT
67576: AND
67577: IFFALSE 67619
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67579: LD_ADDR_VAR 0 7
67583: PUSH
67584: LD_VAR 0 7
67588: PPUSH
67589: LD_VAR 0 7
67593: PUSH
67594: LD_INT 1
67596: PLUS
67597: PPUSH
67598: LD_VAR 0 9
67602: PUSH
67603: LD_VAR 0 10
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PPUSH
67612: CALL_OW 1
67616: ST_TO_ADDR
67617: GO 67633
// i := i - 1 ;
67619: LD_ADDR_VAR 0 5
67623: PUSH
67624: LD_VAR 0 5
67628: PUSH
67629: LD_INT 1
67631: MINUS
67632: ST_TO_ADDR
// end ;
67633: GO 67439
67635: POP
67636: POP
// for i in tmp do
67637: LD_ADDR_VAR 0 5
67641: PUSH
67642: LD_VAR 0 7
67646: PUSH
67647: FOR_IN
67648: IFFALSE 67686
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67650: LD_VAR 0 1
67654: PPUSH
67655: LD_VAR 0 5
67659: PUSH
67660: LD_INT 1
67662: ARRAY
67663: PPUSH
67664: LD_VAR 0 5
67668: PUSH
67669: LD_INT 2
67671: ARRAY
67672: PPUSH
67673: CALL 66632 0 3
67677: NOT
67678: IFFALSE 67684
// exit ;
67680: POP
67681: POP
67682: GO 67688
67684: GO 67647
67686: POP
67687: POP
// end ;
67688: LD_VAR 0 4
67692: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67693: LD_INT 0
67695: PPUSH
67696: PPUSH
67697: PPUSH
67698: PPUSH
67699: PPUSH
67700: PPUSH
67701: PPUSH
// if not GetClass ( unit ) = class_sniper then
67702: LD_VAR 0 1
67706: PPUSH
67707: CALL_OW 257
67711: PUSH
67712: LD_INT 5
67714: EQUAL
67715: NOT
67716: IFFALSE 67720
// exit ;
67718: GO 68108
// dist := 8 ;
67720: LD_ADDR_VAR 0 5
67724: PUSH
67725: LD_INT 8
67727: ST_TO_ADDR
// viewRange := 12 ;
67728: LD_ADDR_VAR 0 7
67732: PUSH
67733: LD_INT 12
67735: ST_TO_ADDR
// side := GetSide ( unit ) ;
67736: LD_ADDR_VAR 0 6
67740: PUSH
67741: LD_VAR 0 1
67745: PPUSH
67746: CALL_OW 255
67750: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67751: LD_INT 61
67753: PPUSH
67754: LD_VAR 0 6
67758: PPUSH
67759: CALL_OW 321
67763: PUSH
67764: LD_INT 2
67766: EQUAL
67767: IFFALSE 67777
// viewRange := 16 ;
67769: LD_ADDR_VAR 0 7
67773: PUSH
67774: LD_INT 16
67776: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67777: LD_VAR 0 1
67781: PPUSH
67782: LD_VAR 0 2
67786: PPUSH
67787: LD_VAR 0 3
67791: PPUSH
67792: CALL_OW 297
67796: PUSH
67797: LD_VAR 0 5
67801: GREATER
67802: IFFALSE 67881
// begin ComMoveXY ( unit , x , y ) ;
67804: LD_VAR 0 1
67808: PPUSH
67809: LD_VAR 0 2
67813: PPUSH
67814: LD_VAR 0 3
67818: PPUSH
67819: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67823: LD_INT 35
67825: PPUSH
67826: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67830: LD_VAR 0 1
67834: PPUSH
67835: LD_VAR 0 2
67839: PPUSH
67840: LD_VAR 0 3
67844: PPUSH
67845: CALL 42615 0 3
67849: NOT
67850: IFFALSE 67854
// exit ;
67852: GO 68108
// until GetDistUnitXY ( unit , x , y ) < dist ;
67854: LD_VAR 0 1
67858: PPUSH
67859: LD_VAR 0 2
67863: PPUSH
67864: LD_VAR 0 3
67868: PPUSH
67869: CALL_OW 297
67873: PUSH
67874: LD_VAR 0 5
67878: LESS
67879: IFFALSE 67823
// end ; ComTurnXY ( unit , x , y ) ;
67881: LD_VAR 0 1
67885: PPUSH
67886: LD_VAR 0 2
67890: PPUSH
67891: LD_VAR 0 3
67895: PPUSH
67896: CALL_OW 118
// wait ( 5 ) ;
67900: LD_INT 5
67902: PPUSH
67903: CALL_OW 67
// _d := GetDir ( unit ) ;
67907: LD_ADDR_VAR 0 10
67911: PUSH
67912: LD_VAR 0 1
67916: PPUSH
67917: CALL_OW 254
67921: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67922: LD_ADDR_VAR 0 8
67926: PUSH
67927: LD_VAR 0 1
67931: PPUSH
67932: CALL_OW 250
67936: PPUSH
67937: LD_VAR 0 10
67941: PPUSH
67942: LD_VAR 0 5
67946: PPUSH
67947: CALL_OW 272
67951: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
67952: LD_ADDR_VAR 0 9
67956: PUSH
67957: LD_VAR 0 1
67961: PPUSH
67962: CALL_OW 251
67966: PPUSH
67967: LD_VAR 0 10
67971: PPUSH
67972: LD_VAR 0 5
67976: PPUSH
67977: CALL_OW 273
67981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67982: LD_VAR 0 8
67986: PPUSH
67987: LD_VAR 0 9
67991: PPUSH
67992: CALL_OW 488
67996: NOT
67997: IFFALSE 68001
// exit ;
67999: GO 68108
// ComAnimCustom ( unit , 1 ) ;
68001: LD_VAR 0 1
68005: PPUSH
68006: LD_INT 1
68008: PPUSH
68009: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68013: LD_VAR 0 8
68017: PPUSH
68018: LD_VAR 0 9
68022: PPUSH
68023: LD_VAR 0 6
68027: PPUSH
68028: LD_VAR 0 7
68032: PPUSH
68033: CALL_OW 330
// repeat wait ( 1 ) ;
68037: LD_INT 1
68039: PPUSH
68040: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
68044: LD_VAR 0 1
68048: PPUSH
68049: CALL_OW 316
68053: PUSH
68054: LD_VAR 0 1
68058: PPUSH
68059: CALL_OW 314
68063: OR
68064: PUSH
68065: LD_VAR 0 1
68069: PPUSH
68070: CALL_OW 302
68074: NOT
68075: OR
68076: PUSH
68077: LD_VAR 0 1
68081: PPUSH
68082: CALL_OW 301
68086: OR
68087: IFFALSE 68037
// RemoveSeeing ( _x , _y , side ) ;
68089: LD_VAR 0 8
68093: PPUSH
68094: LD_VAR 0 9
68098: PPUSH
68099: LD_VAR 0 6
68103: PPUSH
68104: CALL_OW 331
// end ;
68108: LD_VAR 0 4
68112: RET
