// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3776 0 0
// CreateNature ;
  12: CALL 3647 0 0
// Action ;
  16: CALL 3918 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6427 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6427 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6427 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6427 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6427 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6427 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6427 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6427 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6427 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6427 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6427 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6427 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6427 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6427 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6427 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6427 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 43862 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11410 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14501 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11410 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 42780 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11410 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 43862 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 13
3195: PPUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 70
3210: AND
3211: IFFALSE 3644
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
// begin tmp := [ ] ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 3
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 5
3246: PUSH
3247: LD_INT 6
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_OWVAR 67
3260: ARRAY
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3380
// begin uc_side := 3 ;
3265: LD_ADDR_OWVAR 20
3269: PUSH
3270: LD_INT 3
3272: ST_TO_ADDR
// uc_nation := nation_russian ;
3273: LD_ADDR_OWVAR 21
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 6
3286: PUSH
3287: LD_INT 7
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: LD_INT 9
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// if Prob ( 50 ) then
3322: LD_INT 50
3324: PPUSH
3325: CALL_OW 13
3329: IFFALSE 3343
// SetClass ( un , class_bazooker ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 9
3338: PPUSH
3339: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3343: LD_VAR 0 2
3347: PPUSH
3348: LD_INT 12
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 43862 0 2
3377: ST_TO_ADDR
// end ;
3378: GO 3262
3380: POP
3381: POP
// for i := 1 to 4 do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 4
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3566
// begin uc_side := 3 ;
3398: LD_ADDR_OWVAR 20
3402: PUSH
3403: LD_INT 3
3405: ST_TO_ADDR
// uc_nation := nation_russian ;
3406: LD_ADDR_OWVAR 21
3410: PUSH
3411: LD_INT 3
3413: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 8
3425: PUSH
3426: LD_INT 9
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_OWVAR 67
3439: ARRAY
3440: PPUSH
3441: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3445: LD_INT 22
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 43
3456: PUSH
3457: LD_INT 44
3459: PUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 45
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_VAR 0 1
3476: PUSH
3477: LD_INT 4
3479: MOD
3480: PUSH
3481: LD_INT 1
3483: PLUS
3484: ARRAY
3485: PPUSH
3486: LD_INT 100
3488: PPUSH
3489: CALL 11410 0 5
// un := CreateVehicle ;
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: CALL_OW 45
3502: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_INT 4
3510: PPUSH
3511: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3530: CALL_OW 44
3534: PPUSH
3535: LD_VAR 0 2
3539: PPUSH
3540: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL 43862 0 2
3563: ST_TO_ADDR
// end ;
3564: GO 3395
3566: POP
3567: POP
// repeat wait ( 0 0$1 ) ;
3568: LD_INT 35
3570: PPUSH
3571: CALL_OW 67
// for i in tmp do
3575: LD_ADDR_VAR 0 1
3579: PUSH
3580: LD_VAR 0 3
3584: PUSH
3585: FOR_IN
3586: IFFALSE 3624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_INT 22
3595: PUSH
3596: LD_INT 2
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PPUSH
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 74
3617: PPUSH
3618: CALL_OW 115
3622: GO 3585
3624: POP
3625: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_INT 50
3633: PUSH
3634: EMPTY
3635: LIST
3636: PPUSH
3637: CALL_OW 72
3641: NOT
3642: IFFALSE 3568
// end ; end_of_file
3644: PPOPN 3
3646: END
// export function CreateNature ; var i ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
// PrepareTiger ( 0 ) ;
3651: LD_INT 0
3653: PPUSH
3654: CALL 40251 0 1
// for i := 1 to 2 do
3658: LD_ADDR_VAR 0 2
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 2
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3691
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3674: CALL_OW 44
3678: PPUSH
3679: LD_INT 4
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
3689: GO 3671
3691: POP
3692: POP
// PrepareBird ;
3693: CALL 40432 0 0
// for i := 1 to 3 do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: DOUBLE
3703: LD_INT 1
3705: DEC
3706: ST_TO_ADDR
3707: LD_INT 3
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3713: CALL_OW 44
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// PrepareFrog ;
3732: CALL 40352 0 0
// for i := 1 to 3 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 3
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3769
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3752: CALL_OW 44
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
3767: GO 3749
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function LoadTech ; var i , tmp ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3781: LD_ADDR_VAR 0 3
3785: PUSH
3786: LD_STRING 09_tech
3788: PPUSH
3789: EMPTY
3790: PPUSH
3791: CALL_OW 30
3795: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL 8529 0 1
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3844
// SetTech ( i , 2 , tmp [ i ] ) ;
3819: LD_VAR 0 2
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 322
3842: GO 3816
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3851: LD_ADDR_EXP 8
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// end ;
3859: PPOPN 1
3861: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3862: LD_VAR 0 1
3866: PUSH
3867: LD_EXP 21
3871: EQUAL
3872: IFFALSE 3881
// YouLost ( Schulz ) ;
3874: LD_STRING Schulz
3876: PPUSH
3877: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3881: LD_VAR 0 1
3885: PUSH
3886: LD_EXP 10
3890: EQUAL
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 255
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: AND
3906: IFFALSE 3915
// YouLost ( Heike ) ;
3908: LD_STRING Heike
3910: PPUSH
3911: CALL_OW 104
// end ; end_of_file
3915: PPOPN 1
3917: END
// export function Action ; var p , i , tmp ; begin
3918: LD_INT 0
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3924: LD_INT 12
3926: PPUSH
3927: LD_INT 12
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 10
3935: PPUSH
3936: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3940: LD_INT 12
3942: PPUSH
3943: LD_INT 12
3945: PPUSH
3946: LD_INT 2
3948: PPUSH
3949: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 12
3958: PPUSH
3959: CALL_OW 86
// InGameOn ;
3963: CALL_OW 8
// PrepareArabian ;
3967: CALL 133 0 0
// InGameOff ;
3971: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3975: LD_STRING M4
3977: PPUSH
3978: CALL_OW 337
// SaveForQuickRestart ;
3982: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3986: LD_INT 35
3988: PPUSH
3989: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3993: LD_INT 9
3995: PPUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 70
4010: IFFALSE 3986
// PrepareHeikeCamp ;
4012: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// if heikeIsDead then
4023: LD_EXP 7
4027: IFFALSE 4363
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4029: LD_INT 116
4031: PPUSH
4032: LD_INT 58
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 26
4040: NEG
4041: PPUSH
4042: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4046: LD_INT 116
4048: PPUSH
4049: LD_INT 58
4051: PPUSH
4052: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4056: LD_EXP 21
4060: PPUSH
4061: LD_STRING DL-Obj-a-1
4063: PPUSH
4064: CALL_OW 88
// InGameOn ;
4068: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4072: LD_INT 116
4074: PPUSH
4075: LD_INT 58
4077: PPUSH
4078: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4082: LD_INT 22
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: LD_EXP 21
4101: PUSH
4102: LD_EXP 25
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: DIFF
4111: PPUSH
4112: LD_INT 96
4114: PPUSH
4115: LD_INT 65
4117: PPUSH
4118: CALL_OW 111
// if IsInUnit ( Schulz ) then
4122: LD_EXP 21
4126: PPUSH
4127: CALL_OW 310
4131: IFFALSE 4155
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4133: LD_EXP 21
4137: PPUSH
4138: CALL_OW 310
4142: PPUSH
4143: LD_INT 115
4145: PPUSH
4146: LD_INT 61
4148: PPUSH
4149: CALL_OW 111
4153: GO 4170
// ComMoveXY ( Schulz , 115 , 61 ) ;
4155: LD_EXP 21
4159: PPUSH
4160: LD_INT 115
4162: PPUSH
4163: LD_INT 61
4165: PPUSH
4166: CALL_OW 111
// if IsInUnit ( Nia ) then
4170: LD_EXP 25
4174: PPUSH
4175: CALL_OW 310
4179: IFFALSE 4203
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4181: LD_EXP 25
4185: PPUSH
4186: CALL_OW 310
4190: PPUSH
4191: LD_INT 115
4193: PPUSH
4194: LD_INT 61
4196: PPUSH
4197: CALL_OW 111
4201: GO 4218
// ComMoveXY ( Nia , 115 , 61 ) ;
4203: LD_EXP 25
4207: PPUSH
4208: LD_INT 115
4210: PPUSH
4211: LD_INT 61
4213: PPUSH
4214: CALL_OW 111
// p := 0 ;
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4226: LD_INT 35
4228: PPUSH
4229: CALL_OW 67
// p := Inc ( p ) ;
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: LD_VAR 0 2
4242: PPUSH
4243: CALL 45223 0 1
4247: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4248: LD_INT 115
4250: PPUSH
4251: LD_INT 61
4253: PPUSH
4254: CALL_OW 428
4258: PUSH
4259: LD_VAR 0 2
4263: PUSH
4264: LD_INT 20
4266: GREATER
4267: OR
4268: IFFALSE 4226
// if Givi and IsOk ( Nia ) then
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 25
4279: PPUSH
4280: CALL_OW 302
4284: AND
4285: IFFALSE 4335
// begin Say ( Nia , DN-Obj-a-2 ) ;
4287: LD_EXP 25
4291: PPUSH
4292: LD_STRING DN-Obj-a-2
4294: PPUSH
4295: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4299: LD_EXP 21
4303: PPUSH
4304: LD_STRING DL-Obj-a-3
4306: PPUSH
4307: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4311: LD_EXP 25
4315: PPUSH
4316: LD_STRING DN-Obj-a-4
4318: PPUSH
4319: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4323: LD_EXP 21
4327: PPUSH
4328: LD_STRING DL-Obj-a-5
4330: PPUSH
4331: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4335: LD_INT 35
4337: PPUSH
4338: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4342: LD_EXP 21
4346: PPUSH
4347: LD_STRING DL-Fail-1
4349: PPUSH
4350: CALL_OW 88
// YouLost ( Fail ) ;
4354: LD_STRING Fail
4356: PPUSH
4357: CALL_OW 104
// exit ;
4361: GO 5380
// end ; PrepareRussianBaseAttackers ;
4363: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4367: LD_INT 35
4369: PPUSH
4370: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4374: LD_INT 116
4376: PPUSH
4377: LD_INT 58
4379: PPUSH
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 26
4385: NEG
4386: PPUSH
4387: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4391: LD_INT 116
4393: PPUSH
4394: LD_INT 58
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4404: LD_INT 116
4406: PPUSH
4407: LD_INT 58
4409: PPUSH
4410: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4414: LD_INT 5
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: CALL_OW 343
// Say ( Schulz , DL-Obj-1 ) ;
4424: LD_EXP 21
4428: PPUSH
4429: LD_STRING DL-Obj-1
4431: PPUSH
4432: CALL_OW 88
// PrepareBasim ;
4436: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4440: LD_INT 10
4442: PPUSH
4443: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4447: LD_INT 8
4449: PPUSH
4450: LD_INT 2
4452: PPUSH
4453: CALL_OW 343
// repeat wait ( 0 0$1 ) ;
4457: LD_INT 35
4459: PPUSH
4460: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 10 ] ] ) ;
4464: LD_INT 22
4466: PUSH
4467: LD_INT 2
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 92
4476: PUSH
4477: LD_INT 117
4479: PUSH
4480: LD_INT 58
4482: PUSH
4483: LD_INT 10
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: EMPTY
4493: LIST
4494: LIST
4495: PPUSH
4496: CALL_OW 69
4500: IFFALSE 4457
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4502: LD_ADDR_VAR 0 3
4506: PUSH
4507: LD_INT 22
4509: PUSH
4510: LD_INT 5
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4539
// SetSide ( i , 2 ) ;
4525: LD_VAR 0 3
4529: PPUSH
4530: LD_INT 2
4532: PPUSH
4533: CALL_OW 235
4537: GO 4522
4539: POP
4540: POP
// repeat wait ( 0 0$1 ) ;
4541: LD_INT 35
4543: PPUSH
4544: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4548: LD_ADDR_VAR 0 4
4552: PUSH
4553: LD_INT 50
4555: PUSH
4556: EMPTY
4557: LIST
4558: PUSH
4559: LD_INT 25
4561: PUSH
4562: LD_INT 17
4564: PUSH
4565: EMPTY
4566: LIST
4567: LIST
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PPUSH
4573: CALL_OW 69
4577: ST_TO_ADDR
// for i in tmp do
4578: LD_ADDR_VAR 0 3
4582: PUSH
4583: LD_VAR 0 4
4587: PUSH
4588: FOR_IN
4589: IFFALSE 4627
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4591: LD_VAR 0 3
4595: PPUSH
4596: LD_INT 22
4598: PUSH
4599: LD_INT 3
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PPUSH
4611: LD_VAR 0 3
4615: PPUSH
4616: CALL_OW 74
4620: PPUSH
4621: CALL_OW 115
4625: GO 4588
4627: POP
4628: POP
// if not FilterAllUnits ( [ f_side , 3 ] ) then
4629: LD_INT 22
4631: PUSH
4632: LD_INT 3
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PPUSH
4639: CALL_OW 69
4643: NOT
4644: IFFALSE 4674
// begin for i in tmp do
4646: LD_ADDR_VAR 0 3
4650: PUSH
4651: LD_VAR 0 4
4655: PUSH
4656: FOR_IN
4657: IFFALSE 4670
// KillUnit ( i ) ;
4659: LD_VAR 0 3
4663: PPUSH
4664: CALL_OW 66
4668: GO 4656
4670: POP
4671: POP
// break ;
4672: GO 4694
// end ; until See ( 2 , Basim ) and kamikazed ;
4674: LD_INT 2
4676: PPUSH
4677: LD_EXP 22
4681: PPUSH
4682: CALL_OW 292
4686: PUSH
4687: LD_EXP 8
4691: AND
4692: IFFALSE 4541
// Say ( Basim , DBs-Obj-2 ) ;
4694: LD_EXP 22
4698: PPUSH
4699: LD_STRING DBs-Obj-2
4701: PPUSH
4702: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4706: LD_INT 35
4708: PPUSH
4709: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4713: LD_INT 22
4715: PUSH
4716: LD_INT 3
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 50
4725: PUSH
4726: EMPTY
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PPUSH
4733: CALL_OW 69
4737: NOT
4738: IFFALSE 4706
// ComExit ( Heike ) ;
4740: LD_EXP 10
4744: PPUSH
4745: CALL 44260 0 1
// DialogueOn ;
4749: CALL_OW 6
// if IsOk ( Kaia ) then
4753: LD_EXP 15
4757: PPUSH
4758: CALL_OW 302
4762: IFFALSE 4905
// begin CenterNowOnUnits ( Kaia ) ;
4764: LD_EXP 15
4768: PPUSH
4769: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4773: LD_EXP 15
4777: PPUSH
4778: LD_STRING DK-Obj-3
4780: PPUSH
4781: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4785: LD_EXP 11
4789: PPUSH
4790: LD_STRING DG-Obj-4
4792: PPUSH
4793: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4797: LD_EXP 15
4801: PPUSH
4802: LD_STRING DK-Obj-5
4804: PPUSH
4805: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4809: LD_EXP 15
4813: PPUSH
4814: LD_STRING DK-Obj-6
4816: PPUSH
4817: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4821: LD_EXP 15
4825: PPUSH
4826: LD_STRING DK-Obj-7
4828: PPUSH
4829: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4833: LD_EXP 15
4837: PPUSH
4838: LD_STRING DK-Obj-8
4840: PPUSH
4841: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4845: LD_EXP 21
4849: PPUSH
4850: LD_STRING DL-Obj-9
4852: PPUSH
4853: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4857: LD_EXP 21
4861: PPUSH
4862: LD_STRING DL-Obj-10
4864: PPUSH
4865: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4869: LD_EXP 21
4873: PPUSH
4874: LD_STRING DL-Obj-11
4876: PPUSH
4877: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4881: LD_EXP 21
4885: PPUSH
4886: LD_STRING DL-Obj-12
4888: PPUSH
4889: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4893: LD_EXP 21
4897: PPUSH
4898: LD_STRING DL-Obj-13
4900: PPUSH
4901: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4905: LD_EXP 19
4909: PPUSH
4910: CALL_OW 302
4914: IFFALSE 4952
// begin Say ( Kurt , DKs-Obj-14 ) ;
4916: LD_EXP 19
4920: PPUSH
4921: LD_STRING DKs-Obj-14
4923: PPUSH
4924: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4928: LD_EXP 19
4932: PPUSH
4933: LD_STRING DKs-Obj-15
4935: PPUSH
4936: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4940: LD_EXP 11
4944: PPUSH
4945: LD_STRING DG-Obj-16
4947: PPUSH
4948: CALL_OW 88
// end ; DialogueOff ;
4952: CALL_OW 7
// for i in FilterAllUnits ( [ f_side , 8 ] ) do
4956: LD_ADDR_VAR 0 3
4960: PUSH
4961: LD_INT 22
4963: PUSH
4964: LD_INT 8
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PPUSH
4971: CALL_OW 69
4975: PUSH
4976: FOR_IN
4977: IFFALSE 4993
// SetSide ( i , 2 ) ;
4979: LD_VAR 0 3
4983: PPUSH
4984: LD_INT 2
4986: PPUSH
4987: CALL_OW 235
4991: GO 4976
4993: POP
4994: POP
// wait ( 0 0$3 ) ;
4995: LD_INT 105
4997: PPUSH
4998: CALL_OW 67
// ComExit ( Givi ) ;
5002: LD_EXP 11
5006: PPUSH
5007: CALL 44260 0 1
// ComExit ( Nia ) ;
5011: LD_EXP 25
5015: PPUSH
5016: CALL 44260 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5020: LD_EXP 25
5024: PPUSH
5025: LD_EXP 11
5029: PPUSH
5030: CALL_OW 172
// wait ( 0 0$1 ) ;
5034: LD_INT 35
5036: PPUSH
5037: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5041: LD_EXP 11
5045: PPUSH
5046: CALL_OW 302
5050: PUSH
5051: LD_EXP 25
5055: PPUSH
5056: CALL_OW 302
5060: AND
5061: IFFALSE 5335
// begin DialogueOn ;
5063: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5067: LD_EXP 11
5071: PPUSH
5072: LD_STRING DG-Nia-1
5074: PPUSH
5075: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5079: LD_EXP 10
5083: PPUSH
5084: LD_STRING DH-Nia-2
5086: PPUSH
5087: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5091: LD_EXP 11
5095: PPUSH
5096: LD_STRING DG-Nia-3
5098: PPUSH
5099: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5103: LD_EXP 25
5107: PPUSH
5108: LD_STRING DN-Nia-4
5110: PPUSH
5111: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5115: LD_EXP 10
5119: PPUSH
5120: LD_STRING DH-Nia-5
5122: PPUSH
5123: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5127: LD_EXP 11
5131: PPUSH
5132: LD_STRING DG-Nia-6
5134: PPUSH
5135: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5139: LD_EXP 25
5143: PPUSH
5144: LD_STRING DN-Nia-7
5146: PPUSH
5147: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5151: LD_EXP 25
5155: PPUSH
5156: LD_STRING DN-Nia-8
5158: PPUSH
5159: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5163: LD_EXP 25
5167: PPUSH
5168: LD_STRING DN-Nia-9
5170: PPUSH
5171: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5175: LD_EXP 25
5179: PPUSH
5180: LD_STRING DN-Nia-10
5182: PPUSH
5183: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5187: LD_EXP 11
5191: PPUSH
5192: LD_STRING DG-Nia-11
5194: PPUSH
5195: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5199: LD_EXP 25
5203: PPUSH
5204: LD_STRING DN-Nia-12
5206: PPUSH
5207: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5211: LD_EXP 10
5215: PPUSH
5216: LD_STRING DH-Nia-13
5218: PPUSH
5219: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5223: LD_EXP 25
5227: PPUSH
5228: LD_STRING DN-Nia-14
5230: PPUSH
5231: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5235: LD_EXP 10
5239: PPUSH
5240: LD_STRING DH-Nia-15
5242: PPUSH
5243: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5247: LD_EXP 21
5251: PPUSH
5252: LD_STRING DL-Nia-16
5254: PPUSH
5255: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5259: LD_EXP 10
5263: PPUSH
5264: LD_STRING DH-Nia-17
5266: PPUSH
5267: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5271: LD_EXP 10
5275: PPUSH
5276: LD_STRING DH-Nia-18
5278: PPUSH
5279: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5283: LD_EXP 13
5287: PPUSH
5288: LD_STRING DI-Nia-19
5290: PPUSH
5291: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5295: LD_EXP 21
5299: PPUSH
5300: LD_STRING DL-Nia-20
5302: PPUSH
5303: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5307: LD_EXP 21
5311: PPUSH
5312: LD_STRING DL-Nia-21
5314: PPUSH
5315: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5319: LD_EXP 21
5323: PPUSH
5324: LD_STRING DL-Nia-22
5326: PPUSH
5327: CALL_OW 88
// DialogueOff ;
5331: CALL_OW 7
// end ; DialogueOn ;
5335: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5339: LD_EXP 21
5343: PPUSH
5344: LD_STRING DL-Retreat-1
5346: PPUSH
5347: CALL_OW 88
// DialogueOff ;
5351: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5355: LD_STRING M5
5357: PPUSH
5358: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5362: LD_INT 13
5364: PPUSH
5365: LD_INT 1
5367: PPUSH
5368: CALL_OW 424
// startRussianAttacks := true ;
5372: LD_ADDR_EXP 9
5376: PUSH
5377: LD_INT 1
5379: ST_TO_ADDR
// end ;
5380: LD_VAR 0 1
5384: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5385: LD_EXP 9
5389: PUSH
5390: LD_INT 13
5392: PPUSH
5393: LD_INT 22
5395: PUSH
5396: LD_INT 2
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 50
5405: PUSH
5406: EMPTY
5407: LIST
5408: PUSH
5409: LD_INT 21
5411: PUSH
5412: LD_INT 1
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: LIST
5423: PPUSH
5424: CALL_OW 71
5428: NOT
5429: AND
5430: IFFALSE 5439
5432: GO 5434
5434: DISABLE
// EndMission ;
5435: CALL 5440 0 0
5439: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5440: LD_INT 0
5442: PPUSH
5443: PPUSH
5444: PPUSH
5445: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5446: LD_ADDR_VAR 0 3
5450: PUSH
5451: LD_INT 13
5453: PPUSH
5454: LD_INT 22
5456: PUSH
5457: LD_INT 2
5459: PUSH
5460: EMPTY
5461: LIST
5462: LIST
5463: PUSH
5464: LD_INT 21
5466: PUSH
5467: LD_INT 2
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: EMPTY
5475: LIST
5476: LIST
5477: PPUSH
5478: CALL_OW 70
5482: ST_TO_ADDR
// saveVehicles := [ ] ;
5483: LD_ADDR_VAR 0 4
5487: PUSH
5488: EMPTY
5489: ST_TO_ADDR
// for i in tmp do
5490: LD_ADDR_VAR 0 2
5494: PUSH
5495: LD_VAR 0 3
5499: PUSH
5500: FOR_IN
5501: IFFALSE 5610
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: LD_VAR 0 4
5512: PPUSH
5513: LD_VAR 0 2
5517: PPUSH
5518: CALL_OW 265
5522: PUSH
5523: LD_VAR 0 2
5527: PPUSH
5528: CALL_OW 262
5532: PUSH
5533: LD_VAR 0 2
5537: PPUSH
5538: CALL_OW 263
5542: PUSH
5543: LD_VAR 0 2
5547: PPUSH
5548: CALL_OW 264
5552: PUSH
5553: LD_VAR 0 2
5557: PPUSH
5558: CALL_OW 248
5562: PUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: CALL_OW 261
5572: PUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 271
5582: PUSH
5583: LD_VAR 0 2
5587: PPUSH
5588: CALL_OW 311
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: PPUSH
5603: CALL 43862 0 2
5607: ST_TO_ADDR
5608: GO 5500
5610: POP
5611: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5612: LD_EXP 21
5616: PPUSH
5617: LD_STRING 09c_Schulz
5619: PPUSH
5620: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5624: LD_EXP 21
5628: PPUSH
5629: LD_STRING 09c_Schulz_ID
5631: PPUSH
5632: CALL_OW 39
// if IsOk ( Lemmy ) then
5636: LD_EXP 23
5640: PPUSH
5641: CALL_OW 302
5645: IFFALSE 5671
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5647: LD_EXP 23
5651: PPUSH
5652: LD_STRING 09c_Lemmy
5654: PPUSH
5655: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5659: LD_EXP 23
5663: PPUSH
5664: LD_STRING 09c_Lemmy_ID
5666: PPUSH
5667: CALL_OW 39
// end ; if IsOk ( Nia ) then
5671: LD_EXP 25
5675: PPUSH
5676: CALL_OW 302
5680: IFFALSE 5706
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5682: LD_EXP 25
5686: PPUSH
5687: LD_STRING 09c_Nia
5689: PPUSH
5690: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5694: LD_EXP 25
5698: PPUSH
5699: LD_STRING 09c_Nia_ID
5701: PPUSH
5702: CALL_OW 39
// end ; if IsOk ( Mia ) then
5706: LD_EXP 24
5710: PPUSH
5711: CALL_OW 302
5715: IFFALSE 5741
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5717: LD_EXP 24
5721: PPUSH
5722: LD_STRING 09c_Mia
5724: PPUSH
5725: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5729: LD_EXP 24
5733: PPUSH
5734: LD_STRING 09c_Mia_ID
5736: PPUSH
5737: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5741: LD_EXP 26
5745: PPUSH
5746: CALL_OW 302
5750: IFFALSE 5776
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5752: LD_EXP 26
5756: PPUSH
5757: LD_STRING 09c_Jenna
5759: PPUSH
5760: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5764: LD_EXP 26
5768: PPUSH
5769: LD_STRING 09c_Jenna_ID
5771: PPUSH
5772: CALL_OW 39
// end ; if IsOk ( Basim ) then
5776: LD_EXP 22
5780: PPUSH
5781: CALL_OW 302
5785: IFFALSE 5811
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5787: LD_EXP 22
5791: PPUSH
5792: LD_STRING 09c_Basim
5794: PPUSH
5795: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5799: LD_EXP 22
5803: PPUSH
5804: LD_STRING 09c_Basim_ID
5806: PPUSH
5807: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5811: LD_EXP 10
5815: PPUSH
5816: LD_STRING 09c_Heike
5818: PPUSH
5819: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5823: LD_EXP 10
5827: PPUSH
5828: LD_STRING 09c_Heike_ID
5830: PPUSH
5831: CALL_OW 39
// if IsOk ( Givi ) then
5835: LD_EXP 11
5839: PPUSH
5840: CALL_OW 302
5844: IFFALSE 5870
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5846: LD_EXP 11
5850: PPUSH
5851: LD_STRING 09c_Givi
5853: PPUSH
5854: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5858: LD_EXP 11
5862: PPUSH
5863: LD_STRING 09c_Givi_ID
5865: PPUSH
5866: CALL_OW 39
// end ; if IsOk ( Mike ) then
5870: LD_EXP 12
5874: PPUSH
5875: CALL_OW 302
5879: IFFALSE 5905
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5881: LD_EXP 12
5885: PPUSH
5886: LD_STRING 09c_Mike
5888: PPUSH
5889: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5893: LD_EXP 12
5897: PPUSH
5898: LD_STRING 09c_Mike_ID
5900: PPUSH
5901: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5905: LD_EXP 13
5909: PPUSH
5910: CALL_OW 302
5914: IFFALSE 5940
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5916: LD_EXP 13
5920: PPUSH
5921: LD_STRING 09c_Ibrahim
5923: PPUSH
5924: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5928: LD_EXP 13
5932: PPUSH
5933: LD_STRING 09c_Ibrahim_ID
5935: PPUSH
5936: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5940: LD_EXP 14
5944: PPUSH
5945: CALL_OW 302
5949: IFFALSE 5975
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5951: LD_EXP 14
5955: PPUSH
5956: LD_STRING 09c_Kamil
5958: PPUSH
5959: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5963: LD_EXP 14
5967: PPUSH
5968: LD_STRING 09c_Kamil_ID
5970: PPUSH
5971: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5975: LD_EXP 15
5979: PPUSH
5980: CALL_OW 302
5984: IFFALSE 6010
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5986: LD_EXP 15
5990: PPUSH
5991: LD_STRING 09c_Kaia
5993: PPUSH
5994: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
5998: LD_EXP 15
6002: PPUSH
6003: LD_STRING 09c_Kaia_ID
6005: PPUSH
6006: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6010: LD_EXP 16
6014: PPUSH
6015: CALL_OW 302
6019: IFFALSE 6045
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6021: LD_EXP 16
6025: PPUSH
6026: LD_STRING 09c_Sophia
6028: PPUSH
6029: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6033: LD_EXP 16
6037: PPUSH
6038: LD_STRING 09c_Sophia_ID
6040: PPUSH
6041: CALL_OW 39
// end ; if IsOk ( Markov ) then
6045: LD_EXP 17
6049: PPUSH
6050: CALL_OW 302
6054: IFFALSE 6080
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6056: LD_EXP 17
6060: PPUSH
6061: LD_STRING 09c_Markov
6063: PPUSH
6064: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6068: LD_EXP 17
6072: PPUSH
6073: LD_STRING 09c_Markov_ID
6075: PPUSH
6076: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6080: LD_EXP 18
6084: PPUSH
6085: CALL_OW 302
6089: IFFALSE 6115
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6091: LD_EXP 18
6095: PPUSH
6096: LD_STRING 09c_Olaf
6098: PPUSH
6099: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6103: LD_EXP 18
6107: PPUSH
6108: LD_STRING 09c_Olaf_ID
6110: PPUSH
6111: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6115: LD_EXP 19
6119: PPUSH
6120: CALL_OW 302
6124: IFFALSE 6150
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6126: LD_EXP 19
6130: PPUSH
6131: LD_STRING 09c_Kurt
6133: PPUSH
6134: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6138: LD_EXP 19
6142: PPUSH
6143: LD_STRING 09c_Kurt_ID
6145: PPUSH
6146: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6150: LD_EXP 20
6154: PPUSH
6155: CALL_OW 302
6159: IFFALSE 6185
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6161: LD_EXP 20
6165: PPUSH
6166: LD_STRING 09c_Aviradze
6168: PPUSH
6169: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6173: LD_EXP 20
6177: PPUSH
6178: LD_STRING 09c_Aviradze_ID
6180: PPUSH
6181: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6185: LD_EXP 28
6189: PPUSH
6190: LD_INT 50
6192: PUSH
6193: EMPTY
6194: LIST
6195: PPUSH
6196: CALL_OW 72
6200: PPUSH
6201: LD_STRING 09c_schulzSecondSquad
6203: PPUSH
6204: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6208: LD_EXP 27
6212: PPUSH
6213: LD_INT 50
6215: PUSH
6216: EMPTY
6217: LIST
6218: PPUSH
6219: CALL_OW 72
6223: PPUSH
6224: LD_STRING 09c_heikeSecondSquad
6226: PPUSH
6227: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: DOUBLE
6237: LD_INT 1
6239: DEC
6240: ST_TO_ADDR
6241: LD_EXP 28
6245: PPUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PPUSH
6252: CALL_OW 72
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6286
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6260: LD_EXP 28
6264: PUSH
6265: LD_VAR 0 2
6269: ARRAY
6270: PPUSH
6271: LD_STRING 09c_random_ID_
6273: PUSH
6274: LD_VAR 0 2
6278: STR
6279: PPUSH
6280: CALL_OW 39
6284: GO 6257
6286: POP
6287: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6288: LD_ADDR_VAR 0 2
6292: PUSH
6293: DOUBLE
6294: LD_INT 1
6296: DEC
6297: ST_TO_ADDR
6298: LD_EXP 27
6302: PPUSH
6303: LD_INT 50
6305: PUSH
6306: EMPTY
6307: LIST
6308: PPUSH
6309: CALL_OW 72
6313: PUSH
6314: FOR_TO
6315: IFFALSE 6343
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6317: LD_EXP 27
6321: PUSH
6322: LD_VAR 0 2
6326: ARRAY
6327: PPUSH
6328: LD_STRING 09c_hrandom_ID_
6330: PUSH
6331: LD_VAR 0 2
6335: STR
6336: PPUSH
6337: CALL_OW 39
6341: GO 6314
6343: POP
6344: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6345: LD_VAR 0 4
6349: PPUSH
6350: LD_STRING 09c_vehicles
6352: PPUSH
6353: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6357: LD_OWVAR 1
6361: PPUSH
6362: LD_STRING 09c_tick
6364: PPUSH
6365: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6369: LD_INT 22
6371: PUSH
6372: LD_INT 2
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 23
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PPUSH
6393: CALL_OW 69
6397: PPUSH
6398: LD_STRING 09c_apes
6400: PPUSH
6401: CALL_OW 38
// wait ( 3 ) ;
6405: LD_INT 3
6407: PPUSH
6408: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6412: LD_INT 1
6414: PPUSH
6415: LD_STRING __x1/09_cont3
6417: PPUSH
6418: CALL_OW 340
// end ; end_of_file
6422: LD_VAR 0 1
6426: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6427: LD_INT 0
6429: PPUSH
6430: PPUSH
// if exist_mode then
6431: LD_VAR 0 2
6435: IFFALSE 6460
// unit := CreateCharacter ( prefix & ident ) else
6437: LD_ADDR_VAR 0 5
6441: PUSH
6442: LD_VAR 0 3
6446: PUSH
6447: LD_VAR 0 1
6451: STR
6452: PPUSH
6453: CALL_OW 34
6457: ST_TO_ADDR
6458: GO 6475
// unit := NewCharacter ( ident ) ;
6460: LD_ADDR_VAR 0 5
6464: PUSH
6465: LD_VAR 0 1
6469: PPUSH
6470: CALL_OW 25
6474: ST_TO_ADDR
// result := unit ;
6475: LD_ADDR_VAR 0 4
6479: PUSH
6480: LD_VAR 0 5
6484: ST_TO_ADDR
// end ;
6485: LD_VAR 0 4
6489: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6490: LD_INT 0
6492: PPUSH
6493: PPUSH
// if not side or not nation then
6494: LD_VAR 0 1
6498: NOT
6499: PUSH
6500: LD_VAR 0 2
6504: NOT
6505: OR
6506: IFFALSE 6510
// exit ;
6508: GO 7278
// case nation of nation_american :
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 1
6517: DOUBLE
6518: EQUAL
6519: IFTRUE 6523
6521: GO 6737
6523: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6524: LD_ADDR_VAR 0 4
6528: PUSH
6529: LD_INT 35
6531: PUSH
6532: LD_INT 45
6534: PUSH
6535: LD_INT 46
6537: PUSH
6538: LD_INT 47
6540: PUSH
6541: LD_INT 82
6543: PUSH
6544: LD_INT 83
6546: PUSH
6547: LD_INT 84
6549: PUSH
6550: LD_INT 85
6552: PUSH
6553: LD_INT 86
6555: PUSH
6556: LD_INT 1
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: LD_INT 6
6564: PUSH
6565: LD_INT 15
6567: PUSH
6568: LD_INT 16
6570: PUSH
6571: LD_INT 7
6573: PUSH
6574: LD_INT 12
6576: PUSH
6577: LD_INT 13
6579: PUSH
6580: LD_INT 10
6582: PUSH
6583: LD_INT 14
6585: PUSH
6586: LD_INT 20
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 22
6594: PUSH
6595: LD_INT 25
6597: PUSH
6598: LD_INT 32
6600: PUSH
6601: LD_INT 27
6603: PUSH
6604: LD_INT 36
6606: PUSH
6607: LD_INT 69
6609: PUSH
6610: LD_INT 39
6612: PUSH
6613: LD_INT 34
6615: PUSH
6616: LD_INT 40
6618: PUSH
6619: LD_INT 48
6621: PUSH
6622: LD_INT 49
6624: PUSH
6625: LD_INT 50
6627: PUSH
6628: LD_INT 51
6630: PUSH
6631: LD_INT 52
6633: PUSH
6634: LD_INT 53
6636: PUSH
6637: LD_INT 54
6639: PUSH
6640: LD_INT 55
6642: PUSH
6643: LD_INT 56
6645: PUSH
6646: LD_INT 57
6648: PUSH
6649: LD_INT 58
6651: PUSH
6652: LD_INT 59
6654: PUSH
6655: LD_INT 60
6657: PUSH
6658: LD_INT 61
6660: PUSH
6661: LD_INT 62
6663: PUSH
6664: LD_INT 80
6666: PUSH
6667: LD_INT 82
6669: PUSH
6670: LD_INT 83
6672: PUSH
6673: LD_INT 84
6675: PUSH
6676: LD_INT 85
6678: PUSH
6679: LD_INT 86
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: ST_TO_ADDR
6735: GO 7202
6737: LD_INT 2
6739: DOUBLE
6740: EQUAL
6741: IFTRUE 6745
6743: GO 6971
6745: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6746: LD_ADDR_VAR 0 4
6750: PUSH
6751: LD_INT 35
6753: PUSH
6754: LD_INT 45
6756: PUSH
6757: LD_INT 46
6759: PUSH
6760: LD_INT 47
6762: PUSH
6763: LD_INT 82
6765: PUSH
6766: LD_INT 83
6768: PUSH
6769: LD_INT 84
6771: PUSH
6772: LD_INT 85
6774: PUSH
6775: LD_INT 87
6777: PUSH
6778: LD_INT 70
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: LD_INT 11
6786: PUSH
6787: LD_INT 3
6789: PUSH
6790: LD_INT 4
6792: PUSH
6793: LD_INT 5
6795: PUSH
6796: LD_INT 6
6798: PUSH
6799: LD_INT 15
6801: PUSH
6802: LD_INT 18
6804: PUSH
6805: LD_INT 7
6807: PUSH
6808: LD_INT 17
6810: PUSH
6811: LD_INT 8
6813: PUSH
6814: LD_INT 20
6816: PUSH
6817: LD_INT 21
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 72
6825: PUSH
6826: LD_INT 26
6828: PUSH
6829: LD_INT 69
6831: PUSH
6832: LD_INT 39
6834: PUSH
6835: LD_INT 40
6837: PUSH
6838: LD_INT 41
6840: PUSH
6841: LD_INT 42
6843: PUSH
6844: LD_INT 43
6846: PUSH
6847: LD_INT 48
6849: PUSH
6850: LD_INT 49
6852: PUSH
6853: LD_INT 50
6855: PUSH
6856: LD_INT 51
6858: PUSH
6859: LD_INT 52
6861: PUSH
6862: LD_INT 53
6864: PUSH
6865: LD_INT 54
6867: PUSH
6868: LD_INT 55
6870: PUSH
6871: LD_INT 56
6873: PUSH
6874: LD_INT 60
6876: PUSH
6877: LD_INT 61
6879: PUSH
6880: LD_INT 62
6882: PUSH
6883: LD_INT 66
6885: PUSH
6886: LD_INT 67
6888: PUSH
6889: LD_INT 68
6891: PUSH
6892: LD_INT 81
6894: PUSH
6895: LD_INT 82
6897: PUSH
6898: LD_INT 83
6900: PUSH
6901: LD_INT 84
6903: PUSH
6904: LD_INT 85
6906: PUSH
6907: LD_INT 87
6909: PUSH
6910: LD_INT 88
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: ST_TO_ADDR
6969: GO 7202
6971: LD_INT 3
6973: DOUBLE
6974: EQUAL
6975: IFTRUE 6979
6977: GO 7201
6979: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6980: LD_ADDR_VAR 0 4
6984: PUSH
6985: LD_INT 46
6987: PUSH
6988: LD_INT 47
6990: PUSH
6991: LD_INT 1
6993: PUSH
6994: LD_INT 2
6996: PUSH
6997: LD_INT 82
6999: PUSH
7000: LD_INT 83
7002: PUSH
7003: LD_INT 84
7005: PUSH
7006: LD_INT 85
7008: PUSH
7009: LD_INT 86
7011: PUSH
7012: LD_INT 11
7014: PUSH
7015: LD_INT 9
7017: PUSH
7018: LD_INT 20
7020: PUSH
7021: LD_INT 19
7023: PUSH
7024: LD_INT 21
7026: PUSH
7027: LD_INT 24
7029: PUSH
7030: LD_INT 22
7032: PUSH
7033: LD_INT 25
7035: PUSH
7036: LD_INT 28
7038: PUSH
7039: LD_INT 29
7041: PUSH
7042: LD_INT 30
7044: PUSH
7045: LD_INT 31
7047: PUSH
7048: LD_INT 37
7050: PUSH
7051: LD_INT 38
7053: PUSH
7054: LD_INT 32
7056: PUSH
7057: LD_INT 27
7059: PUSH
7060: LD_INT 33
7062: PUSH
7063: LD_INT 69
7065: PUSH
7066: LD_INT 39
7068: PUSH
7069: LD_INT 34
7071: PUSH
7072: LD_INT 40
7074: PUSH
7075: LD_INT 71
7077: PUSH
7078: LD_INT 23
7080: PUSH
7081: LD_INT 44
7083: PUSH
7084: LD_INT 48
7086: PUSH
7087: LD_INT 49
7089: PUSH
7090: LD_INT 50
7092: PUSH
7093: LD_INT 51
7095: PUSH
7096: LD_INT 52
7098: PUSH
7099: LD_INT 53
7101: PUSH
7102: LD_INT 54
7104: PUSH
7105: LD_INT 55
7107: PUSH
7108: LD_INT 56
7110: PUSH
7111: LD_INT 57
7113: PUSH
7114: LD_INT 58
7116: PUSH
7117: LD_INT 59
7119: PUSH
7120: LD_INT 63
7122: PUSH
7123: LD_INT 64
7125: PUSH
7126: LD_INT 65
7128: PUSH
7129: LD_INT 82
7131: PUSH
7132: LD_INT 83
7134: PUSH
7135: LD_INT 84
7137: PUSH
7138: LD_INT 85
7140: PUSH
7141: LD_INT 86
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: ST_TO_ADDR
7199: GO 7202
7201: POP
// if state > - 1 and state < 3 then
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 1
7209: NEG
7210: GREATER
7211: PUSH
7212: LD_VAR 0 3
7216: PUSH
7217: LD_INT 3
7219: LESS
7220: AND
7221: IFFALSE 7278
// for i in result do
7223: LD_ADDR_VAR 0 5
7227: PUSH
7228: LD_VAR 0 4
7232: PUSH
7233: FOR_IN
7234: IFFALSE 7276
// if GetTech ( i , side ) <> state then
7236: LD_VAR 0 5
7240: PPUSH
7241: LD_VAR 0 1
7245: PPUSH
7246: CALL_OW 321
7250: PUSH
7251: LD_VAR 0 3
7255: NONEQUAL
7256: IFFALSE 7274
// result := result diff i ;
7258: LD_ADDR_VAR 0 4
7262: PUSH
7263: LD_VAR 0 4
7267: PUSH
7268: LD_VAR 0 5
7272: DIFF
7273: ST_TO_ADDR
7274: GO 7233
7276: POP
7277: POP
// end ;
7278: LD_VAR 0 4
7282: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7283: LD_INT 0
7285: PPUSH
7286: PPUSH
7287: PPUSH
// result := true ;
7288: LD_ADDR_VAR 0 3
7292: PUSH
7293: LD_INT 1
7295: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7296: LD_ADDR_VAR 0 5
7300: PUSH
7301: LD_VAR 0 2
7305: PPUSH
7306: CALL_OW 480
7310: ST_TO_ADDR
// if not tmp then
7311: LD_VAR 0 5
7315: NOT
7316: IFFALSE 7320
// exit ;
7318: GO 7369
// for i in tmp do
7320: LD_ADDR_VAR 0 4
7324: PUSH
7325: LD_VAR 0 5
7329: PUSH
7330: FOR_IN
7331: IFFALSE 7367
// if GetTech ( i , side ) <> state_researched then
7333: LD_VAR 0 4
7337: PPUSH
7338: LD_VAR 0 1
7342: PPUSH
7343: CALL_OW 321
7347: PUSH
7348: LD_INT 2
7350: NONEQUAL
7351: IFFALSE 7365
// begin result := false ;
7353: LD_ADDR_VAR 0 3
7357: PUSH
7358: LD_INT 0
7360: ST_TO_ADDR
// exit ;
7361: POP
7362: POP
7363: GO 7369
// end ;
7365: GO 7330
7367: POP
7368: POP
// end ;
7369: LD_VAR 0 3
7373: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7374: LD_INT 0
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
7387: PPUSH
7388: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7389: LD_VAR 0 1
7393: NOT
7394: PUSH
7395: LD_VAR 0 1
7399: PPUSH
7400: CALL_OW 257
7404: PUSH
7405: LD_INT 9
7407: NONEQUAL
7408: OR
7409: IFFALSE 7413
// exit ;
7411: GO 7986
// side := GetSide ( unit ) ;
7413: LD_ADDR_VAR 0 9
7417: PUSH
7418: LD_VAR 0 1
7422: PPUSH
7423: CALL_OW 255
7427: ST_TO_ADDR
// tech_space := tech_spacanom ;
7428: LD_ADDR_VAR 0 12
7432: PUSH
7433: LD_INT 29
7435: ST_TO_ADDR
// tech_time := tech_taurad ;
7436: LD_ADDR_VAR 0 13
7440: PUSH
7441: LD_INT 28
7443: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7444: LD_ADDR_VAR 0 11
7448: PUSH
7449: LD_VAR 0 1
7453: PPUSH
7454: CALL_OW 310
7458: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7459: LD_VAR 0 11
7463: PPUSH
7464: CALL_OW 247
7468: PUSH
7469: LD_INT 2
7471: EQUAL
7472: IFFALSE 7476
// exit ;
7474: GO 7986
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7476: LD_ADDR_VAR 0 8
7480: PUSH
7481: LD_INT 81
7483: PUSH
7484: LD_VAR 0 9
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 3
7495: PUSH
7496: LD_INT 21
7498: PUSH
7499: LD_INT 3
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PPUSH
7514: CALL_OW 69
7518: ST_TO_ADDR
// if not tmp then
7519: LD_VAR 0 8
7523: NOT
7524: IFFALSE 7528
// exit ;
7526: GO 7986
// if in_unit then
7528: LD_VAR 0 11
7532: IFFALSE 7556
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7534: LD_ADDR_VAR 0 10
7538: PUSH
7539: LD_VAR 0 8
7543: PPUSH
7544: LD_VAR 0 11
7548: PPUSH
7549: CALL_OW 74
7553: ST_TO_ADDR
7554: GO 7576
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7556: LD_ADDR_VAR 0 10
7560: PUSH
7561: LD_VAR 0 8
7565: PPUSH
7566: LD_VAR 0 1
7570: PPUSH
7571: CALL_OW 74
7575: ST_TO_ADDR
// if not enemy then
7576: LD_VAR 0 10
7580: NOT
7581: IFFALSE 7585
// exit ;
7583: GO 7986
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7585: LD_VAR 0 11
7589: PUSH
7590: LD_VAR 0 11
7594: PPUSH
7595: LD_VAR 0 10
7599: PPUSH
7600: CALL_OW 296
7604: PUSH
7605: LD_INT 13
7607: GREATER
7608: AND
7609: PUSH
7610: LD_VAR 0 1
7614: PPUSH
7615: LD_VAR 0 10
7619: PPUSH
7620: CALL_OW 296
7624: PUSH
7625: LD_INT 12
7627: GREATER
7628: OR
7629: IFFALSE 7633
// exit ;
7631: GO 7986
// missile := [ 1 ] ;
7633: LD_ADDR_VAR 0 14
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 12
7653: PPUSH
7654: CALL_OW 325
7658: IFFALSE 7687
// missile := Replace ( missile , missile + 1 , 2 ) ;
7660: LD_ADDR_VAR 0 14
7664: PUSH
7665: LD_VAR 0 14
7669: PPUSH
7670: LD_VAR 0 14
7674: PUSH
7675: LD_INT 1
7677: PLUS
7678: PPUSH
7679: LD_INT 2
7681: PPUSH
7682: CALL_OW 1
7686: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7687: LD_VAR 0 9
7691: PPUSH
7692: LD_VAR 0 13
7696: PPUSH
7697: CALL_OW 325
7701: PUSH
7702: LD_VAR 0 10
7706: PPUSH
7707: CALL_OW 255
7711: PPUSH
7712: LD_VAR 0 13
7716: PPUSH
7717: CALL_OW 325
7721: NOT
7722: AND
7723: IFFALSE 7752
// missile := Replace ( missile , missile + 1 , 3 ) ;
7725: LD_ADDR_VAR 0 14
7729: PUSH
7730: LD_VAR 0 14
7734: PPUSH
7735: LD_VAR 0 14
7739: PUSH
7740: LD_INT 1
7742: PLUS
7743: PPUSH
7744: LD_INT 3
7746: PPUSH
7747: CALL_OW 1
7751: ST_TO_ADDR
// if missile < 2 then
7752: LD_VAR 0 14
7756: PUSH
7757: LD_INT 2
7759: LESS
7760: IFFALSE 7764
// exit ;
7762: GO 7986
// x := GetX ( enemy ) ;
7764: LD_ADDR_VAR 0 4
7768: PUSH
7769: LD_VAR 0 10
7773: PPUSH
7774: CALL_OW 250
7778: ST_TO_ADDR
// y := GetY ( enemy ) ;
7779: LD_ADDR_VAR 0 5
7783: PUSH
7784: LD_VAR 0 10
7788: PPUSH
7789: CALL_OW 251
7793: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7794: LD_ADDR_VAR 0 6
7798: PUSH
7799: LD_VAR 0 4
7803: PUSH
7804: LD_INT 1
7806: NEG
7807: PPUSH
7808: LD_INT 1
7810: PPUSH
7811: CALL_OW 12
7815: PLUS
7816: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7817: LD_ADDR_VAR 0 7
7821: PUSH
7822: LD_VAR 0 5
7826: PUSH
7827: LD_INT 1
7829: NEG
7830: PPUSH
7831: LD_INT 1
7833: PPUSH
7834: CALL_OW 12
7838: PLUS
7839: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7840: LD_VAR 0 6
7844: PPUSH
7845: LD_VAR 0 7
7849: PPUSH
7850: CALL_OW 488
7854: NOT
7855: IFFALSE 7877
// begin _x := x ;
7857: LD_ADDR_VAR 0 6
7861: PUSH
7862: LD_VAR 0 4
7866: ST_TO_ADDR
// _y := y ;
7867: LD_ADDR_VAR 0 7
7871: PUSH
7872: LD_VAR 0 5
7876: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7877: LD_ADDR_VAR 0 3
7881: PUSH
7882: LD_INT 1
7884: PPUSH
7885: LD_VAR 0 14
7889: PPUSH
7890: CALL_OW 12
7894: ST_TO_ADDR
// case i of 1 :
7895: LD_VAR 0 3
7899: PUSH
7900: LD_INT 1
7902: DOUBLE
7903: EQUAL
7904: IFTRUE 7908
7906: GO 7925
7908: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7909: LD_VAR 0 1
7913: PPUSH
7914: LD_VAR 0 10
7918: PPUSH
7919: CALL_OW 115
7923: GO 7986
7925: LD_INT 2
7927: DOUBLE
7928: EQUAL
7929: IFTRUE 7933
7931: GO 7955
7933: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7934: LD_VAR 0 1
7938: PPUSH
7939: LD_VAR 0 6
7943: PPUSH
7944: LD_VAR 0 7
7948: PPUSH
7949: CALL_OW 153
7953: GO 7986
7955: LD_INT 3
7957: DOUBLE
7958: EQUAL
7959: IFTRUE 7963
7961: GO 7985
7963: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7964: LD_VAR 0 1
7968: PPUSH
7969: LD_VAR 0 6
7973: PPUSH
7974: LD_VAR 0 7
7978: PPUSH
7979: CALL_OW 154
7983: GO 7986
7985: POP
// end ;
7986: LD_VAR 0 2
7990: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7991: LD_INT 0
7993: PPUSH
7994: PPUSH
7995: PPUSH
7996: PPUSH
7997: PPUSH
7998: PPUSH
// if not unit or not building then
7999: LD_VAR 0 1
8003: NOT
8004: PUSH
8005: LD_VAR 0 2
8009: NOT
8010: OR
8011: IFFALSE 8015
// exit ;
8013: GO 8173
// x := GetX ( building ) ;
8015: LD_ADDR_VAR 0 5
8019: PUSH
8020: LD_VAR 0 2
8024: PPUSH
8025: CALL_OW 250
8029: ST_TO_ADDR
// y := GetY ( building ) ;
8030: LD_ADDR_VAR 0 6
8034: PUSH
8035: LD_VAR 0 2
8039: PPUSH
8040: CALL_OW 251
8044: ST_TO_ADDR
// for i = 0 to 5 do
8045: LD_ADDR_VAR 0 4
8049: PUSH
8050: DOUBLE
8051: LD_INT 0
8053: DEC
8054: ST_TO_ADDR
8055: LD_INT 5
8057: PUSH
8058: FOR_TO
8059: IFFALSE 8171
// begin _x := ShiftX ( x , i , 3 ) ;
8061: LD_ADDR_VAR 0 7
8065: PUSH
8066: LD_VAR 0 5
8070: PPUSH
8071: LD_VAR 0 4
8075: PPUSH
8076: LD_INT 3
8078: PPUSH
8079: CALL_OW 272
8083: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8084: LD_ADDR_VAR 0 8
8088: PUSH
8089: LD_VAR 0 6
8093: PPUSH
8094: LD_VAR 0 4
8098: PPUSH
8099: LD_INT 3
8101: PPUSH
8102: CALL_OW 273
8106: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8107: LD_VAR 0 7
8111: PPUSH
8112: LD_VAR 0 8
8116: PPUSH
8117: CALL_OW 488
8121: NOT
8122: IFFALSE 8126
// continue ;
8124: GO 8058
// if HexInfo ( _x , _y ) = 0 then
8126: LD_VAR 0 7
8130: PPUSH
8131: LD_VAR 0 8
8135: PPUSH
8136: CALL_OW 428
8140: PUSH
8141: LD_INT 0
8143: EQUAL
8144: IFFALSE 8169
// begin ComMoveXY ( unit , _x , _y ) ;
8146: LD_VAR 0 1
8150: PPUSH
8151: LD_VAR 0 7
8155: PPUSH
8156: LD_VAR 0 8
8160: PPUSH
8161: CALL_OW 111
// exit ;
8165: POP
8166: POP
8167: GO 8173
// end ; end ;
8169: GO 8058
8171: POP
8172: POP
// end ;
8173: LD_VAR 0 3
8177: RET
// export function ScanBase ( side , base_area ) ; begin
8178: LD_INT 0
8180: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8181: LD_ADDR_VAR 0 3
8185: PUSH
8186: LD_VAR 0 2
8190: PPUSH
8191: LD_INT 81
8193: PUSH
8194: LD_VAR 0 1
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PPUSH
8203: CALL_OW 70
8207: ST_TO_ADDR
// end ;
8208: LD_VAR 0 3
8212: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8213: LD_INT 0
8215: PPUSH
8216: PPUSH
8217: PPUSH
8218: PPUSH
// result := false ;
8219: LD_ADDR_VAR 0 2
8223: PUSH
8224: LD_INT 0
8226: ST_TO_ADDR
// side := GetSide ( unit ) ;
8227: LD_ADDR_VAR 0 3
8231: PUSH
8232: LD_VAR 0 1
8236: PPUSH
8237: CALL_OW 255
8241: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8242: LD_ADDR_VAR 0 4
8246: PUSH
8247: LD_VAR 0 1
8251: PPUSH
8252: CALL_OW 248
8256: ST_TO_ADDR
// case nat of 1 :
8257: LD_VAR 0 4
8261: PUSH
8262: LD_INT 1
8264: DOUBLE
8265: EQUAL
8266: IFTRUE 8270
8268: GO 8281
8270: POP
// tech := tech_lassight ; 2 :
8271: LD_ADDR_VAR 0 5
8275: PUSH
8276: LD_INT 12
8278: ST_TO_ADDR
8279: GO 8320
8281: LD_INT 2
8283: DOUBLE
8284: EQUAL
8285: IFTRUE 8289
8287: GO 8300
8289: POP
// tech := tech_mortar ; 3 :
8290: LD_ADDR_VAR 0 5
8294: PUSH
8295: LD_INT 41
8297: ST_TO_ADDR
8298: GO 8320
8300: LD_INT 3
8302: DOUBLE
8303: EQUAL
8304: IFTRUE 8308
8306: GO 8319
8308: POP
// tech := tech_bazooka ; end ;
8309: LD_ADDR_VAR 0 5
8313: PUSH
8314: LD_INT 44
8316: ST_TO_ADDR
8317: GO 8320
8319: POP
// if Researched ( side , tech ) then
8320: LD_VAR 0 3
8324: PPUSH
8325: LD_VAR 0 5
8329: PPUSH
8330: CALL_OW 325
8334: IFFALSE 8361
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8336: LD_ADDR_VAR 0 2
8340: PUSH
8341: LD_INT 5
8343: PUSH
8344: LD_INT 8
8346: PUSH
8347: LD_INT 9
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: PUSH
8355: LD_VAR 0 4
8359: ARRAY
8360: ST_TO_ADDR
// end ;
8361: LD_VAR 0 2
8365: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8366: LD_INT 0
8368: PPUSH
8369: PPUSH
8370: PPUSH
// if not mines then
8371: LD_VAR 0 2
8375: NOT
8376: IFFALSE 8380
// exit ;
8378: GO 8524
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8380: LD_ADDR_VAR 0 5
8384: PUSH
8385: LD_INT 81
8387: PUSH
8388: LD_VAR 0 1
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 3
8399: PUSH
8400: LD_INT 21
8402: PUSH
8403: LD_INT 3
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PPUSH
8418: CALL_OW 69
8422: ST_TO_ADDR
// for i in mines do
8423: LD_ADDR_VAR 0 4
8427: PUSH
8428: LD_VAR 0 2
8432: PUSH
8433: FOR_IN
8434: IFFALSE 8522
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8436: LD_VAR 0 4
8440: PUSH
8441: LD_INT 1
8443: ARRAY
8444: PPUSH
8445: LD_VAR 0 4
8449: PUSH
8450: LD_INT 2
8452: ARRAY
8453: PPUSH
8454: CALL_OW 458
8458: NOT
8459: IFFALSE 8463
// continue ;
8461: GO 8433
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8463: LD_VAR 0 4
8467: PUSH
8468: LD_INT 1
8470: ARRAY
8471: PPUSH
8472: LD_VAR 0 4
8476: PUSH
8477: LD_INT 2
8479: ARRAY
8480: PPUSH
8481: CALL_OW 428
8485: PUSH
8486: LD_VAR 0 5
8490: IN
8491: IFFALSE 8520
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8493: LD_VAR 0 4
8497: PUSH
8498: LD_INT 1
8500: ARRAY
8501: PPUSH
8502: LD_VAR 0 4
8506: PUSH
8507: LD_INT 2
8509: ARRAY
8510: PPUSH
8511: LD_VAR 0 1
8515: PPUSH
8516: CALL_OW 456
// end ;
8520: GO 8433
8522: POP
8523: POP
// end ;
8524: LD_VAR 0 3
8528: RET
// export function Count ( array ) ; begin
8529: LD_INT 0
8531: PPUSH
// result := array + 0 ;
8532: LD_ADDR_VAR 0 2
8536: PUSH
8537: LD_VAR 0 1
8541: PUSH
8542: LD_INT 0
8544: PLUS
8545: ST_TO_ADDR
// end ;
8546: LD_VAR 0 2
8550: RET
// export function IsEmpty ( building ) ; begin
8551: LD_INT 0
8553: PPUSH
// if not building then
8554: LD_VAR 0 1
8558: NOT
8559: IFFALSE 8563
// exit ;
8561: GO 8606
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8563: LD_ADDR_VAR 0 2
8567: PUSH
8568: LD_VAR 0 1
8572: PUSH
8573: LD_INT 22
8575: PUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 255
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: PUSH
8590: LD_INT 58
8592: PUSH
8593: EMPTY
8594: LIST
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: IN
8605: ST_TO_ADDR
// end ;
8606: LD_VAR 0 2
8610: RET
// export function IsNotFull ( building ) ; var places ; begin
8611: LD_INT 0
8613: PPUSH
8614: PPUSH
// if not building then
8615: LD_VAR 0 1
8619: NOT
8620: IFFALSE 8624
// exit ;
8622: GO 8795
// result := false ;
8624: LD_ADDR_VAR 0 2
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// places := 0 ;
8632: LD_ADDR_VAR 0 3
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
8640: LD_VAR 0 1
8644: PPUSH
8645: CALL_OW 266
8649: PUSH
8650: LD_INT 0
8652: DOUBLE
8653: EQUAL
8654: IFTRUE 8712
8656: LD_INT 1
8658: DOUBLE
8659: EQUAL
8660: IFTRUE 8712
8662: LD_INT 6
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8712
8668: LD_INT 7
8670: DOUBLE
8671: EQUAL
8672: IFTRUE 8712
8674: LD_INT 8
8676: DOUBLE
8677: EQUAL
8678: IFTRUE 8712
8680: LD_INT 4
8682: DOUBLE
8683: EQUAL
8684: IFTRUE 8712
8686: LD_INT 5
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8712
8692: LD_INT 2
8694: DOUBLE
8695: EQUAL
8696: IFTRUE 8712
8698: LD_INT 3
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8712
8704: LD_INT 35
8706: DOUBLE
8707: EQUAL
8708: IFTRUE 8712
8710: GO 8723
8712: POP
// places := 6 ; b_bunker , b_breastwork :
8713: LD_ADDR_VAR 0 3
8717: PUSH
8718: LD_INT 6
8720: ST_TO_ADDR
8721: GO 8768
8723: LD_INT 32
8725: DOUBLE
8726: EQUAL
8727: IFTRUE 8737
8729: LD_INT 31
8731: DOUBLE
8732: EQUAL
8733: IFTRUE 8737
8735: GO 8748
8737: POP
// places := 1 ; b_control_tower :
8738: LD_ADDR_VAR 0 3
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
8746: GO 8768
8748: LD_INT 36
8750: DOUBLE
8751: EQUAL
8752: IFTRUE 8756
8754: GO 8767
8756: POP
// places := 3 ; end ;
8757: LD_ADDR_VAR 0 3
8761: PUSH
8762: LD_INT 3
8764: ST_TO_ADDR
8765: GO 8768
8767: POP
// if places then
8768: LD_VAR 0 3
8772: IFFALSE 8795
// result := UnitsInside ( building ) < places ;
8774: LD_ADDR_VAR 0 2
8778: PUSH
8779: LD_VAR 0 1
8783: PPUSH
8784: CALL_OW 313
8788: PUSH
8789: LD_VAR 0 3
8793: LESS
8794: ST_TO_ADDR
// end ;
8795: LD_VAR 0 2
8799: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8800: LD_INT 0
8802: PPUSH
8803: PPUSH
8804: PPUSH
8805: PPUSH
// tmp := [ ] ;
8806: LD_ADDR_VAR 0 3
8810: PUSH
8811: EMPTY
8812: ST_TO_ADDR
// list := [ ] ;
8813: LD_ADDR_VAR 0 5
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// for i = 16 to 25 do
8820: LD_ADDR_VAR 0 4
8824: PUSH
8825: DOUBLE
8826: LD_INT 16
8828: DEC
8829: ST_TO_ADDR
8830: LD_INT 25
8832: PUSH
8833: FOR_TO
8834: IFFALSE 8907
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8836: LD_ADDR_VAR 0 3
8840: PUSH
8841: LD_VAR 0 3
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_VAR 0 1
8853: PPUSH
8854: CALL_OW 255
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 91
8865: PUSH
8866: LD_VAR 0 1
8870: PUSH
8871: LD_INT 6
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 30
8881: PUSH
8882: LD_VAR 0 4
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: EMPTY
8897: LIST
8898: PPUSH
8899: CALL_OW 69
8903: ADD
8904: ST_TO_ADDR
8905: GO 8833
8907: POP
8908: POP
// for i = 1 to tmp do
8909: LD_ADDR_VAR 0 4
8913: PUSH
8914: DOUBLE
8915: LD_INT 1
8917: DEC
8918: ST_TO_ADDR
8919: LD_VAR 0 3
8923: PUSH
8924: FOR_TO
8925: IFFALSE 9013
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8927: LD_ADDR_VAR 0 5
8931: PUSH
8932: LD_VAR 0 5
8936: PUSH
8937: LD_VAR 0 3
8941: PUSH
8942: LD_VAR 0 4
8946: ARRAY
8947: PPUSH
8948: CALL_OW 266
8952: PUSH
8953: LD_VAR 0 3
8957: PUSH
8958: LD_VAR 0 4
8962: ARRAY
8963: PPUSH
8964: CALL_OW 250
8968: PUSH
8969: LD_VAR 0 3
8973: PUSH
8974: LD_VAR 0 4
8978: ARRAY
8979: PPUSH
8980: CALL_OW 251
8984: PUSH
8985: LD_VAR 0 3
8989: PUSH
8990: LD_VAR 0 4
8994: ARRAY
8995: PPUSH
8996: CALL_OW 254
9000: PUSH
9001: EMPTY
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: PUSH
9007: EMPTY
9008: LIST
9009: ADD
9010: ST_TO_ADDR
9011: GO 8924
9013: POP
9014: POP
// result := list ;
9015: LD_ADDR_VAR 0 2
9019: PUSH
9020: LD_VAR 0 5
9024: ST_TO_ADDR
// end ;
9025: LD_VAR 0 2
9029: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
9030: LD_INT 0
9032: PPUSH
9033: PPUSH
9034: PPUSH
9035: PPUSH
9036: PPUSH
9037: PPUSH
9038: PPUSH
// if not factory then
9039: LD_VAR 0 1
9043: NOT
9044: IFFALSE 9048
// exit ;
9046: GO 9641
// if control = control_apeman then
9048: LD_VAR 0 4
9052: PUSH
9053: LD_INT 5
9055: EQUAL
9056: IFFALSE 9165
// begin tmp := UnitsInside ( factory ) ;
9058: LD_ADDR_VAR 0 8
9062: PUSH
9063: LD_VAR 0 1
9067: PPUSH
9068: CALL_OW 313
9072: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
9073: LD_VAR 0 8
9077: PPUSH
9078: LD_INT 25
9080: PUSH
9081: LD_INT 12
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 72
9092: NOT
9093: IFFALSE 9103
// control := control_manual ;
9095: LD_ADDR_VAR 0 4
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
9103: LD_ADDR_VAR 0 8
9107: PUSH
9108: LD_VAR 0 1
9112: PPUSH
9113: CALL 8800 0 1
9117: ST_TO_ADDR
// if tmp then
9118: LD_VAR 0 8
9122: IFFALSE 9165
// begin for i in tmp do
9124: LD_ADDR_VAR 0 7
9128: PUSH
9129: LD_VAR 0 8
9133: PUSH
9134: FOR_IN
9135: IFFALSE 9163
// if i [ 1 ] = b_ext_radio then
9137: LD_VAR 0 7
9141: PUSH
9142: LD_INT 1
9144: ARRAY
9145: PUSH
9146: LD_INT 22
9148: EQUAL
9149: IFFALSE 9161
// begin control := control_remote ;
9151: LD_ADDR_VAR 0 4
9155: PUSH
9156: LD_INT 2
9158: ST_TO_ADDR
// break ;
9159: GO 9163
// end ;
9161: GO 9134
9163: POP
9164: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9165: LD_VAR 0 1
9169: PPUSH
9170: LD_VAR 0 2
9174: PPUSH
9175: LD_VAR 0 3
9179: PPUSH
9180: LD_VAR 0 4
9184: PPUSH
9185: LD_VAR 0 5
9189: PPUSH
9190: CALL_OW 448
9194: IFFALSE 9229
// begin result := [ chassis , engine , control , weapon ] ;
9196: LD_ADDR_VAR 0 6
9200: PUSH
9201: LD_VAR 0 2
9205: PUSH
9206: LD_VAR 0 3
9210: PUSH
9211: LD_VAR 0 4
9215: PUSH
9216: LD_VAR 0 5
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: ST_TO_ADDR
// exit ;
9227: GO 9641
// end ; _chassis := AvailableChassisList ( factory ) ;
9229: LD_ADDR_VAR 0 9
9233: PUSH
9234: LD_VAR 0 1
9238: PPUSH
9239: CALL_OW 475
9243: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9244: LD_ADDR_VAR 0 11
9248: PUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 476
9258: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9259: LD_ADDR_VAR 0 12
9263: PUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: CALL_OW 477
9273: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9274: LD_ADDR_VAR 0 10
9278: PUSH
9279: LD_VAR 0 1
9283: PPUSH
9284: CALL_OW 478
9288: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9289: LD_VAR 0 9
9293: NOT
9294: PUSH
9295: LD_VAR 0 11
9299: NOT
9300: OR
9301: PUSH
9302: LD_VAR 0 12
9306: NOT
9307: OR
9308: PUSH
9309: LD_VAR 0 10
9313: NOT
9314: OR
9315: IFFALSE 9350
// begin result := [ chassis , engine , control , weapon ] ;
9317: LD_ADDR_VAR 0 6
9321: PUSH
9322: LD_VAR 0 2
9326: PUSH
9327: LD_VAR 0 3
9331: PUSH
9332: LD_VAR 0 4
9336: PUSH
9337: LD_VAR 0 5
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: ST_TO_ADDR
// exit ;
9348: GO 9641
// end ; if not chassis in _chassis then
9350: LD_VAR 0 2
9354: PUSH
9355: LD_VAR 0 9
9359: IN
9360: NOT
9361: IFFALSE 9387
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9363: LD_ADDR_VAR 0 2
9367: PUSH
9368: LD_VAR 0 9
9372: PUSH
9373: LD_INT 1
9375: PPUSH
9376: LD_VAR 0 9
9380: PPUSH
9381: CALL_OW 12
9385: ARRAY
9386: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9387: LD_VAR 0 2
9391: PPUSH
9392: LD_VAR 0 3
9396: PPUSH
9397: CALL 9646 0 2
9401: NOT
9402: IFFALSE 9461
// repeat engine := _engine [ 1 ] ;
9404: LD_ADDR_VAR 0 3
9408: PUSH
9409: LD_VAR 0 11
9413: PUSH
9414: LD_INT 1
9416: ARRAY
9417: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9418: LD_ADDR_VAR 0 11
9422: PUSH
9423: LD_VAR 0 11
9427: PPUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 3
9435: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9436: LD_VAR 0 2
9440: PPUSH
9441: LD_VAR 0 3
9445: PPUSH
9446: CALL 9646 0 2
9450: PUSH
9451: LD_VAR 0 11
9455: PUSH
9456: EMPTY
9457: EQUAL
9458: OR
9459: IFFALSE 9404
// if not control in _control then
9461: LD_VAR 0 4
9465: PUSH
9466: LD_VAR 0 12
9470: IN
9471: NOT
9472: IFFALSE 9498
// control := _control [ rand ( 1 , _control ) ] ;
9474: LD_ADDR_VAR 0 4
9478: PUSH
9479: LD_VAR 0 12
9483: PUSH
9484: LD_INT 1
9486: PPUSH
9487: LD_VAR 0 12
9491: PPUSH
9492: CALL_OW 12
9496: ARRAY
9497: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9498: LD_VAR 0 2
9502: PPUSH
9503: LD_VAR 0 5
9507: PPUSH
9508: CALL 9866 0 2
9512: NOT
9513: IFFALSE 9572
// repeat weapon := _weapon [ 1 ] ;
9515: LD_ADDR_VAR 0 5
9519: PUSH
9520: LD_VAR 0 10
9524: PUSH
9525: LD_INT 1
9527: ARRAY
9528: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9529: LD_ADDR_VAR 0 10
9533: PUSH
9534: LD_VAR 0 10
9538: PPUSH
9539: LD_INT 1
9541: PPUSH
9542: CALL_OW 3
9546: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9547: LD_VAR 0 2
9551: PPUSH
9552: LD_VAR 0 5
9556: PPUSH
9557: CALL 9866 0 2
9561: PUSH
9562: LD_VAR 0 10
9566: PUSH
9567: EMPTY
9568: EQUAL
9569: OR
9570: IFFALSE 9515
// result := [ ] ;
9572: LD_ADDR_VAR 0 6
9576: PUSH
9577: EMPTY
9578: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9579: LD_VAR 0 1
9583: PPUSH
9584: LD_VAR 0 2
9588: PPUSH
9589: LD_VAR 0 3
9593: PPUSH
9594: LD_VAR 0 4
9598: PPUSH
9599: LD_VAR 0 5
9603: PPUSH
9604: CALL_OW 448
9608: IFFALSE 9641
// result := [ chassis , engine , control , weapon ] ;
9610: LD_ADDR_VAR 0 6
9614: PUSH
9615: LD_VAR 0 2
9619: PUSH
9620: LD_VAR 0 3
9624: PUSH
9625: LD_VAR 0 4
9629: PUSH
9630: LD_VAR 0 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: ST_TO_ADDR
// end ;
9641: LD_VAR 0 6
9645: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9646: LD_INT 0
9648: PPUSH
// if not chassis or not engine then
9649: LD_VAR 0 1
9653: NOT
9654: PUSH
9655: LD_VAR 0 2
9659: NOT
9660: OR
9661: IFFALSE 9665
// exit ;
9663: GO 9861
// case engine of engine_solar :
9665: LD_VAR 0 2
9669: PUSH
9670: LD_INT 2
9672: DOUBLE
9673: EQUAL
9674: IFTRUE 9678
9676: GO 9716
9678: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_INT 11
9686: PUSH
9687: LD_INT 12
9689: PUSH
9690: LD_INT 13
9692: PUSH
9693: LD_INT 14
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: LD_INT 2
9701: PUSH
9702: LD_INT 3
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: ST_TO_ADDR
9714: GO 9845
9716: LD_INT 1
9718: DOUBLE
9719: EQUAL
9720: IFTRUE 9724
9722: GO 9786
9724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9725: LD_ADDR_VAR 0 3
9729: PUSH
9730: LD_INT 11
9732: PUSH
9733: LD_INT 12
9735: PUSH
9736: LD_INT 13
9738: PUSH
9739: LD_INT 14
9741: PUSH
9742: LD_INT 1
9744: PUSH
9745: LD_INT 2
9747: PUSH
9748: LD_INT 3
9750: PUSH
9751: LD_INT 4
9753: PUSH
9754: LD_INT 5
9756: PUSH
9757: LD_INT 21
9759: PUSH
9760: LD_INT 23
9762: PUSH
9763: LD_INT 22
9765: PUSH
9766: LD_INT 24
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: ST_TO_ADDR
9784: GO 9845
9786: LD_INT 3
9788: DOUBLE
9789: EQUAL
9790: IFTRUE 9794
9792: GO 9844
9794: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9795: LD_ADDR_VAR 0 3
9799: PUSH
9800: LD_INT 13
9802: PUSH
9803: LD_INT 14
9805: PUSH
9806: LD_INT 2
9808: PUSH
9809: LD_INT 3
9811: PUSH
9812: LD_INT 4
9814: PUSH
9815: LD_INT 5
9817: PUSH
9818: LD_INT 21
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 23
9826: PUSH
9827: LD_INT 24
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: ST_TO_ADDR
9842: GO 9845
9844: POP
// result := ( chassis in result ) ;
9845: LD_ADDR_VAR 0 3
9849: PUSH
9850: LD_VAR 0 1
9854: PUSH
9855: LD_VAR 0 3
9859: IN
9860: ST_TO_ADDR
// end ;
9861: LD_VAR 0 3
9865: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9866: LD_INT 0
9868: PPUSH
// if not chassis or not weapon then
9869: LD_VAR 0 1
9873: NOT
9874: PUSH
9875: LD_VAR 0 2
9879: NOT
9880: OR
9881: IFFALSE 9885
// exit ;
9883: GO 10945
// case weapon of us_machine_gun :
9885: LD_VAR 0 2
9889: PUSH
9890: LD_INT 2
9892: DOUBLE
9893: EQUAL
9894: IFTRUE 9898
9896: GO 9928
9898: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9899: LD_ADDR_VAR 0 3
9903: PUSH
9904: LD_INT 1
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: LD_INT 4
9915: PUSH
9916: LD_INT 5
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: ST_TO_ADDR
9926: GO 10929
9928: LD_INT 3
9930: DOUBLE
9931: EQUAL
9932: IFTRUE 9936
9934: GO 9966
9936: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9937: LD_ADDR_VAR 0 3
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: LD_INT 2
9947: PUSH
9948: LD_INT 3
9950: PUSH
9951: LD_INT 4
9953: PUSH
9954: LD_INT 5
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: ST_TO_ADDR
9964: GO 10929
9966: LD_INT 11
9968: DOUBLE
9969: EQUAL
9970: IFTRUE 9974
9972: GO 10004
9974: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9975: LD_ADDR_VAR 0 3
9979: PUSH
9980: LD_INT 1
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: LD_INT 3
9988: PUSH
9989: LD_INT 4
9991: PUSH
9992: LD_INT 5
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: ST_TO_ADDR
10002: GO 10929
10004: LD_INT 4
10006: DOUBLE
10007: EQUAL
10008: IFTRUE 10012
10010: GO 10038
10012: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
10013: LD_ADDR_VAR 0 3
10017: PUSH
10018: LD_INT 2
10020: PUSH
10021: LD_INT 3
10023: PUSH
10024: LD_INT 4
10026: PUSH
10027: LD_INT 5
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: ST_TO_ADDR
10036: GO 10929
10038: LD_INT 5
10040: DOUBLE
10041: EQUAL
10042: IFTRUE 10046
10044: GO 10072
10046: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
10047: LD_ADDR_VAR 0 3
10051: PUSH
10052: LD_INT 2
10054: PUSH
10055: LD_INT 3
10057: PUSH
10058: LD_INT 4
10060: PUSH
10061: LD_INT 5
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: ST_TO_ADDR
10070: GO 10929
10072: LD_INT 9
10074: DOUBLE
10075: EQUAL
10076: IFTRUE 10080
10078: GO 10106
10080: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
10081: LD_ADDR_VAR 0 3
10085: PUSH
10086: LD_INT 2
10088: PUSH
10089: LD_INT 3
10091: PUSH
10092: LD_INT 4
10094: PUSH
10095: LD_INT 5
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: ST_TO_ADDR
10104: GO 10929
10106: LD_INT 7
10108: DOUBLE
10109: EQUAL
10110: IFTRUE 10114
10112: GO 10140
10114: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
10115: LD_ADDR_VAR 0 3
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: LD_INT 4
10128: PUSH
10129: LD_INT 5
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: ST_TO_ADDR
10138: GO 10929
10140: LD_INT 12
10142: DOUBLE
10143: EQUAL
10144: IFTRUE 10148
10146: GO 10174
10148: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10149: LD_ADDR_VAR 0 3
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: LD_INT 3
10159: PUSH
10160: LD_INT 4
10162: PUSH
10163: LD_INT 5
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: ST_TO_ADDR
10172: GO 10929
10174: LD_INT 13
10176: DOUBLE
10177: EQUAL
10178: IFTRUE 10182
10180: GO 10208
10182: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10183: LD_ADDR_VAR 0 3
10187: PUSH
10188: LD_INT 2
10190: PUSH
10191: LD_INT 3
10193: PUSH
10194: LD_INT 4
10196: PUSH
10197: LD_INT 5
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: ST_TO_ADDR
10206: GO 10929
10208: LD_INT 14
10210: DOUBLE
10211: EQUAL
10212: IFTRUE 10216
10214: GO 10234
10216: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10217: LD_ADDR_VAR 0 3
10221: PUSH
10222: LD_INT 4
10224: PUSH
10225: LD_INT 5
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: ST_TO_ADDR
10232: GO 10929
10234: LD_INT 6
10236: DOUBLE
10237: EQUAL
10238: IFTRUE 10242
10240: GO 10260
10242: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10243: LD_ADDR_VAR 0 3
10247: PUSH
10248: LD_INT 4
10250: PUSH
10251: LD_INT 5
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: ST_TO_ADDR
10258: GO 10929
10260: LD_INT 10
10262: DOUBLE
10263: EQUAL
10264: IFTRUE 10268
10266: GO 10286
10268: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10269: LD_ADDR_VAR 0 3
10273: PUSH
10274: LD_INT 4
10276: PUSH
10277: LD_INT 5
10279: PUSH
10280: EMPTY
10281: LIST
10282: LIST
10283: ST_TO_ADDR
10284: GO 10929
10286: LD_INT 22
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10320
10294: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10295: LD_ADDR_VAR 0 3
10299: PUSH
10300: LD_INT 11
10302: PUSH
10303: LD_INT 12
10305: PUSH
10306: LD_INT 13
10308: PUSH
10309: LD_INT 14
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: ST_TO_ADDR
10318: GO 10929
10320: LD_INT 23
10322: DOUBLE
10323: EQUAL
10324: IFTRUE 10328
10326: GO 10354
10328: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10329: LD_ADDR_VAR 0 3
10333: PUSH
10334: LD_INT 11
10336: PUSH
10337: LD_INT 12
10339: PUSH
10340: LD_INT 13
10342: PUSH
10343: LD_INT 14
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: ST_TO_ADDR
10352: GO 10929
10354: LD_INT 24
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10388
10362: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10363: LD_ADDR_VAR 0 3
10367: PUSH
10368: LD_INT 11
10370: PUSH
10371: LD_INT 12
10373: PUSH
10374: LD_INT 13
10376: PUSH
10377: LD_INT 14
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: ST_TO_ADDR
10386: GO 10929
10388: LD_INT 30
10390: DOUBLE
10391: EQUAL
10392: IFTRUE 10396
10394: GO 10422
10396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10397: LD_ADDR_VAR 0 3
10401: PUSH
10402: LD_INT 11
10404: PUSH
10405: LD_INT 12
10407: PUSH
10408: LD_INT 13
10410: PUSH
10411: LD_INT 14
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: ST_TO_ADDR
10420: GO 10929
10422: LD_INT 25
10424: DOUBLE
10425: EQUAL
10426: IFTRUE 10430
10428: GO 10448
10430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10431: LD_ADDR_VAR 0 3
10435: PUSH
10436: LD_INT 13
10438: PUSH
10439: LD_INT 14
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: ST_TO_ADDR
10446: GO 10929
10448: LD_INT 27
10450: DOUBLE
10451: EQUAL
10452: IFTRUE 10456
10454: GO 10474
10456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10457: LD_ADDR_VAR 0 3
10461: PUSH
10462: LD_INT 13
10464: PUSH
10465: LD_INT 14
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: ST_TO_ADDR
10472: GO 10929
10474: LD_INT 92
10476: DOUBLE
10477: EQUAL
10478: IFTRUE 10482
10480: GO 10508
10482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10483: LD_ADDR_VAR 0 3
10487: PUSH
10488: LD_INT 11
10490: PUSH
10491: LD_INT 12
10493: PUSH
10494: LD_INT 13
10496: PUSH
10497: LD_INT 14
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: ST_TO_ADDR
10506: GO 10929
10508: LD_INT 28
10510: DOUBLE
10511: EQUAL
10512: IFTRUE 10516
10514: GO 10534
10516: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10517: LD_ADDR_VAR 0 3
10521: PUSH
10522: LD_INT 13
10524: PUSH
10525: LD_INT 14
10527: PUSH
10528: EMPTY
10529: LIST
10530: LIST
10531: ST_TO_ADDR
10532: GO 10929
10534: LD_INT 29
10536: DOUBLE
10537: EQUAL
10538: IFTRUE 10542
10540: GO 10560
10542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10543: LD_ADDR_VAR 0 3
10547: PUSH
10548: LD_INT 13
10550: PUSH
10551: LD_INT 14
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: ST_TO_ADDR
10558: GO 10929
10560: LD_INT 31
10562: DOUBLE
10563: EQUAL
10564: IFTRUE 10568
10566: GO 10586
10568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 13
10576: PUSH
10577: LD_INT 14
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: ST_TO_ADDR
10584: GO 10929
10586: LD_INT 26
10588: DOUBLE
10589: EQUAL
10590: IFTRUE 10594
10592: GO 10612
10594: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10595: LD_ADDR_VAR 0 3
10599: PUSH
10600: LD_INT 13
10602: PUSH
10603: LD_INT 14
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: ST_TO_ADDR
10610: GO 10929
10612: LD_INT 42
10614: DOUBLE
10615: EQUAL
10616: IFTRUE 10620
10618: GO 10646
10620: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10621: LD_ADDR_VAR 0 3
10625: PUSH
10626: LD_INT 21
10628: PUSH
10629: LD_INT 22
10631: PUSH
10632: LD_INT 23
10634: PUSH
10635: LD_INT 24
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: ST_TO_ADDR
10644: GO 10929
10646: LD_INT 43
10648: DOUBLE
10649: EQUAL
10650: IFTRUE 10654
10652: GO 10680
10654: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10655: LD_ADDR_VAR 0 3
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 22
10665: PUSH
10666: LD_INT 23
10668: PUSH
10669: LD_INT 24
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: ST_TO_ADDR
10678: GO 10929
10680: LD_INT 44
10682: DOUBLE
10683: EQUAL
10684: IFTRUE 10688
10686: GO 10714
10688: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10689: LD_ADDR_VAR 0 3
10693: PUSH
10694: LD_INT 21
10696: PUSH
10697: LD_INT 22
10699: PUSH
10700: LD_INT 23
10702: PUSH
10703: LD_INT 24
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: ST_TO_ADDR
10712: GO 10929
10714: LD_INT 45
10716: DOUBLE
10717: EQUAL
10718: IFTRUE 10722
10720: GO 10748
10722: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10723: LD_ADDR_VAR 0 3
10727: PUSH
10728: LD_INT 21
10730: PUSH
10731: LD_INT 22
10733: PUSH
10734: LD_INT 23
10736: PUSH
10737: LD_INT 24
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: ST_TO_ADDR
10746: GO 10929
10748: LD_INT 49
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10782
10756: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10757: LD_ADDR_VAR 0 3
10761: PUSH
10762: LD_INT 21
10764: PUSH
10765: LD_INT 22
10767: PUSH
10768: LD_INT 23
10770: PUSH
10771: LD_INT 24
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: ST_TO_ADDR
10780: GO 10929
10782: LD_INT 51
10784: DOUBLE
10785: EQUAL
10786: IFTRUE 10790
10788: GO 10816
10790: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10791: LD_ADDR_VAR 0 3
10795: PUSH
10796: LD_INT 21
10798: PUSH
10799: LD_INT 22
10801: PUSH
10802: LD_INT 23
10804: PUSH
10805: LD_INT 24
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: ST_TO_ADDR
10814: GO 10929
10816: LD_INT 52
10818: DOUBLE
10819: EQUAL
10820: IFTRUE 10824
10822: GO 10850
10824: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10825: LD_ADDR_VAR 0 3
10829: PUSH
10830: LD_INT 21
10832: PUSH
10833: LD_INT 22
10835: PUSH
10836: LD_INT 23
10838: PUSH
10839: LD_INT 24
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: ST_TO_ADDR
10848: GO 10929
10850: LD_INT 53
10852: DOUBLE
10853: EQUAL
10854: IFTRUE 10858
10856: GO 10876
10858: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10859: LD_ADDR_VAR 0 3
10863: PUSH
10864: LD_INT 23
10866: PUSH
10867: LD_INT 24
10869: PUSH
10870: EMPTY
10871: LIST
10872: LIST
10873: ST_TO_ADDR
10874: GO 10929
10876: LD_INT 46
10878: DOUBLE
10879: EQUAL
10880: IFTRUE 10884
10882: GO 10902
10884: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_INT 23
10892: PUSH
10893: LD_INT 24
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: ST_TO_ADDR
10900: GO 10929
10902: LD_INT 47
10904: DOUBLE
10905: EQUAL
10906: IFTRUE 10910
10908: GO 10928
10910: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10911: LD_ADDR_VAR 0 3
10915: PUSH
10916: LD_INT 23
10918: PUSH
10919: LD_INT 24
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: ST_TO_ADDR
10926: GO 10929
10928: POP
// result := ( chassis in result ) ;
10929: LD_ADDR_VAR 0 3
10933: PUSH
10934: LD_VAR 0 1
10938: PUSH
10939: LD_VAR 0 3
10943: IN
10944: ST_TO_ADDR
// end ;
10945: LD_VAR 0 3
10949: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10950: LD_INT 0
10952: PPUSH
10953: PPUSH
10954: PPUSH
10955: PPUSH
10956: PPUSH
10957: PPUSH
10958: PPUSH
// result := array ;
10959: LD_ADDR_VAR 0 5
10963: PUSH
10964: LD_VAR 0 1
10968: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10969: LD_VAR 0 1
10973: NOT
10974: PUSH
10975: LD_VAR 0 2
10979: NOT
10980: OR
10981: PUSH
10982: LD_VAR 0 3
10986: NOT
10987: OR
10988: PUSH
10989: LD_VAR 0 2
10993: PUSH
10994: LD_VAR 0 1
10998: GREATER
10999: OR
11000: PUSH
11001: LD_VAR 0 3
11005: PUSH
11006: LD_VAR 0 1
11010: GREATER
11011: OR
11012: IFFALSE 11016
// exit ;
11014: GO 11312
// if direction then
11016: LD_VAR 0 4
11020: IFFALSE 11084
// begin d := 1 ;
11022: LD_ADDR_VAR 0 9
11026: PUSH
11027: LD_INT 1
11029: ST_TO_ADDR
// if i_from > i_to then
11030: LD_VAR 0 2
11034: PUSH
11035: LD_VAR 0 3
11039: GREATER
11040: IFFALSE 11066
// length := ( array - i_from ) + i_to else
11042: LD_ADDR_VAR 0 11
11046: PUSH
11047: LD_VAR 0 1
11051: PUSH
11052: LD_VAR 0 2
11056: MINUS
11057: PUSH
11058: LD_VAR 0 3
11062: PLUS
11063: ST_TO_ADDR
11064: GO 11082
// length := i_to - i_from ;
11066: LD_ADDR_VAR 0 11
11070: PUSH
11071: LD_VAR 0 3
11075: PUSH
11076: LD_VAR 0 2
11080: MINUS
11081: ST_TO_ADDR
// end else
11082: GO 11145
// begin d := - 1 ;
11084: LD_ADDR_VAR 0 9
11088: PUSH
11089: LD_INT 1
11091: NEG
11092: ST_TO_ADDR
// if i_from > i_to then
11093: LD_VAR 0 2
11097: PUSH
11098: LD_VAR 0 3
11102: GREATER
11103: IFFALSE 11123
// length := i_from - i_to else
11105: LD_ADDR_VAR 0 11
11109: PUSH
11110: LD_VAR 0 2
11114: PUSH
11115: LD_VAR 0 3
11119: MINUS
11120: ST_TO_ADDR
11121: GO 11145
// length := ( array - i_to ) + i_from ;
11123: LD_ADDR_VAR 0 11
11127: PUSH
11128: LD_VAR 0 1
11132: PUSH
11133: LD_VAR 0 3
11137: MINUS
11138: PUSH
11139: LD_VAR 0 2
11143: PLUS
11144: ST_TO_ADDR
// end ; if not length then
11145: LD_VAR 0 11
11149: NOT
11150: IFFALSE 11154
// exit ;
11152: GO 11312
// tmp := array ;
11154: LD_ADDR_VAR 0 10
11158: PUSH
11159: LD_VAR 0 1
11163: ST_TO_ADDR
// for i = 1 to length do
11164: LD_ADDR_VAR 0 6
11168: PUSH
11169: DOUBLE
11170: LD_INT 1
11172: DEC
11173: ST_TO_ADDR
11174: LD_VAR 0 11
11178: PUSH
11179: FOR_TO
11180: IFFALSE 11300
// begin for j = 1 to array do
11182: LD_ADDR_VAR 0 7
11186: PUSH
11187: DOUBLE
11188: LD_INT 1
11190: DEC
11191: ST_TO_ADDR
11192: LD_VAR 0 1
11196: PUSH
11197: FOR_TO
11198: IFFALSE 11286
// begin k := j + d ;
11200: LD_ADDR_VAR 0 8
11204: PUSH
11205: LD_VAR 0 7
11209: PUSH
11210: LD_VAR 0 9
11214: PLUS
11215: ST_TO_ADDR
// if k > array then
11216: LD_VAR 0 8
11220: PUSH
11221: LD_VAR 0 1
11225: GREATER
11226: IFFALSE 11236
// k := 1 ;
11228: LD_ADDR_VAR 0 8
11232: PUSH
11233: LD_INT 1
11235: ST_TO_ADDR
// if not k then
11236: LD_VAR 0 8
11240: NOT
11241: IFFALSE 11253
// k := array ;
11243: LD_ADDR_VAR 0 8
11247: PUSH
11248: LD_VAR 0 1
11252: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11253: LD_ADDR_VAR 0 10
11257: PUSH
11258: LD_VAR 0 10
11262: PPUSH
11263: LD_VAR 0 8
11267: PPUSH
11268: LD_VAR 0 1
11272: PUSH
11273: LD_VAR 0 7
11277: ARRAY
11278: PPUSH
11279: CALL_OW 1
11283: ST_TO_ADDR
// end ;
11284: GO 11197
11286: POP
11287: POP
// array := tmp ;
11288: LD_ADDR_VAR 0 1
11292: PUSH
11293: LD_VAR 0 10
11297: ST_TO_ADDR
// end ;
11298: GO 11179
11300: POP
11301: POP
// result := array ;
11302: LD_ADDR_VAR 0 5
11306: PUSH
11307: LD_VAR 0 1
11311: ST_TO_ADDR
// end ;
11312: LD_VAR 0 5
11316: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11317: LD_INT 0
11319: PPUSH
11320: PPUSH
// result := 0 ;
11321: LD_ADDR_VAR 0 3
11325: PUSH
11326: LD_INT 0
11328: ST_TO_ADDR
// if not array or not value in array then
11329: LD_VAR 0 1
11333: NOT
11334: PUSH
11335: LD_VAR 0 2
11339: PUSH
11340: LD_VAR 0 1
11344: IN
11345: NOT
11346: OR
11347: IFFALSE 11351
// exit ;
11349: GO 11405
// for i = 1 to array do
11351: LD_ADDR_VAR 0 4
11355: PUSH
11356: DOUBLE
11357: LD_INT 1
11359: DEC
11360: ST_TO_ADDR
11361: LD_VAR 0 1
11365: PUSH
11366: FOR_TO
11367: IFFALSE 11403
// if value = array [ i ] then
11369: LD_VAR 0 2
11373: PUSH
11374: LD_VAR 0 1
11378: PUSH
11379: LD_VAR 0 4
11383: ARRAY
11384: EQUAL
11385: IFFALSE 11401
// begin result := i ;
11387: LD_ADDR_VAR 0 3
11391: PUSH
11392: LD_VAR 0 4
11396: ST_TO_ADDR
// exit ;
11397: POP
11398: POP
11399: GO 11405
// end ;
11401: GO 11366
11403: POP
11404: POP
// end ;
11405: LD_VAR 0 3
11409: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11410: LD_INT 0
11412: PPUSH
// vc_chassis := chassis ;
11413: LD_ADDR_OWVAR 37
11417: PUSH
11418: LD_VAR 0 1
11422: ST_TO_ADDR
// vc_engine := engine ;
11423: LD_ADDR_OWVAR 39
11427: PUSH
11428: LD_VAR 0 2
11432: ST_TO_ADDR
// vc_control := control ;
11433: LD_ADDR_OWVAR 38
11437: PUSH
11438: LD_VAR 0 3
11442: ST_TO_ADDR
// vc_weapon := weapon ;
11443: LD_ADDR_OWVAR 40
11447: PUSH
11448: LD_VAR 0 4
11452: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11453: LD_ADDR_OWVAR 41
11457: PUSH
11458: LD_VAR 0 5
11462: ST_TO_ADDR
// end ;
11463: LD_VAR 0 6
11467: RET
// export function WantPlant ( unit ) ; var task ; begin
11468: LD_INT 0
11470: PPUSH
11471: PPUSH
// result := false ;
11472: LD_ADDR_VAR 0 2
11476: PUSH
11477: LD_INT 0
11479: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11480: LD_ADDR_VAR 0 3
11484: PUSH
11485: LD_VAR 0 1
11489: PPUSH
11490: CALL_OW 437
11494: ST_TO_ADDR
// if task then
11495: LD_VAR 0 3
11499: IFFALSE 11527
// if task [ 1 ] [ 1 ] = p then
11501: LD_VAR 0 3
11505: PUSH
11506: LD_INT 1
11508: ARRAY
11509: PUSH
11510: LD_INT 1
11512: ARRAY
11513: PUSH
11514: LD_STRING p
11516: EQUAL
11517: IFFALSE 11527
// result := true ;
11519: LD_ADDR_VAR 0 2
11523: PUSH
11524: LD_INT 1
11526: ST_TO_ADDR
// end ;
11527: LD_VAR 0 2
11531: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11532: LD_INT 0
11534: PPUSH
11535: PPUSH
11536: PPUSH
11537: PPUSH
// if pos < 1 then
11538: LD_VAR 0 2
11542: PUSH
11543: LD_INT 1
11545: LESS
11546: IFFALSE 11550
// exit ;
11548: GO 11853
// if pos = 1 then
11550: LD_VAR 0 2
11554: PUSH
11555: LD_INT 1
11557: EQUAL
11558: IFFALSE 11591
// result := Replace ( arr , pos [ 1 ] , value ) else
11560: LD_ADDR_VAR 0 4
11564: PUSH
11565: LD_VAR 0 1
11569: PPUSH
11570: LD_VAR 0 2
11574: PUSH
11575: LD_INT 1
11577: ARRAY
11578: PPUSH
11579: LD_VAR 0 3
11583: PPUSH
11584: CALL_OW 1
11588: ST_TO_ADDR
11589: GO 11853
// begin tmp := arr ;
11591: LD_ADDR_VAR 0 6
11595: PUSH
11596: LD_VAR 0 1
11600: ST_TO_ADDR
// s_arr := [ tmp ] ;
11601: LD_ADDR_VAR 0 7
11605: PUSH
11606: LD_VAR 0 6
11610: PUSH
11611: EMPTY
11612: LIST
11613: ST_TO_ADDR
// for i = 1 to pos - 1 do
11614: LD_ADDR_VAR 0 5
11618: PUSH
11619: DOUBLE
11620: LD_INT 1
11622: DEC
11623: ST_TO_ADDR
11624: LD_VAR 0 2
11628: PUSH
11629: LD_INT 1
11631: MINUS
11632: PUSH
11633: FOR_TO
11634: IFFALSE 11679
// begin tmp := tmp [ pos [ i ] ] ;
11636: LD_ADDR_VAR 0 6
11640: PUSH
11641: LD_VAR 0 6
11645: PUSH
11646: LD_VAR 0 2
11650: PUSH
11651: LD_VAR 0 5
11655: ARRAY
11656: ARRAY
11657: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11658: LD_ADDR_VAR 0 7
11662: PUSH
11663: LD_VAR 0 7
11667: PUSH
11668: LD_VAR 0 6
11672: PUSH
11673: EMPTY
11674: LIST
11675: ADD
11676: ST_TO_ADDR
// end ;
11677: GO 11633
11679: POP
11680: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11681: LD_ADDR_VAR 0 6
11685: PUSH
11686: LD_VAR 0 6
11690: PPUSH
11691: LD_VAR 0 2
11695: PUSH
11696: LD_VAR 0 2
11700: ARRAY
11701: PPUSH
11702: LD_VAR 0 3
11706: PPUSH
11707: CALL_OW 1
11711: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11712: LD_ADDR_VAR 0 7
11716: PUSH
11717: LD_VAR 0 7
11721: PPUSH
11722: LD_VAR 0 7
11726: PPUSH
11727: LD_VAR 0 6
11731: PPUSH
11732: CALL_OW 1
11736: ST_TO_ADDR
// for i = s_arr downto 2 do
11737: LD_ADDR_VAR 0 5
11741: PUSH
11742: DOUBLE
11743: LD_VAR 0 7
11747: INC
11748: ST_TO_ADDR
11749: LD_INT 2
11751: PUSH
11752: FOR_DOWNTO
11753: IFFALSE 11837
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11755: LD_ADDR_VAR 0 6
11759: PUSH
11760: LD_VAR 0 7
11764: PUSH
11765: LD_VAR 0 5
11769: PUSH
11770: LD_INT 1
11772: MINUS
11773: ARRAY
11774: PPUSH
11775: LD_VAR 0 2
11779: PUSH
11780: LD_VAR 0 5
11784: PUSH
11785: LD_INT 1
11787: MINUS
11788: ARRAY
11789: PPUSH
11790: LD_VAR 0 7
11794: PUSH
11795: LD_VAR 0 5
11799: ARRAY
11800: PPUSH
11801: CALL_OW 1
11805: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11806: LD_ADDR_VAR 0 7
11810: PUSH
11811: LD_VAR 0 7
11815: PPUSH
11816: LD_VAR 0 5
11820: PUSH
11821: LD_INT 1
11823: MINUS
11824: PPUSH
11825: LD_VAR 0 6
11829: PPUSH
11830: CALL_OW 1
11834: ST_TO_ADDR
// end ;
11835: GO 11752
11837: POP
11838: POP
// result := s_arr [ 1 ] ;
11839: LD_ADDR_VAR 0 4
11843: PUSH
11844: LD_VAR 0 7
11848: PUSH
11849: LD_INT 1
11851: ARRAY
11852: ST_TO_ADDR
// end ; end ;
11853: LD_VAR 0 4
11857: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11858: LD_INT 0
11860: PPUSH
11861: PPUSH
// if not list then
11862: LD_VAR 0 1
11866: NOT
11867: IFFALSE 11871
// exit ;
11869: GO 11962
// i := list [ pos1 ] ;
11871: LD_ADDR_VAR 0 5
11875: PUSH
11876: LD_VAR 0 1
11880: PUSH
11881: LD_VAR 0 2
11885: ARRAY
11886: ST_TO_ADDR
// if not i then
11887: LD_VAR 0 5
11891: NOT
11892: IFFALSE 11896
// exit ;
11894: GO 11962
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11896: LD_ADDR_VAR 0 1
11900: PUSH
11901: LD_VAR 0 1
11905: PPUSH
11906: LD_VAR 0 2
11910: PPUSH
11911: LD_VAR 0 1
11915: PUSH
11916: LD_VAR 0 3
11920: ARRAY
11921: PPUSH
11922: CALL_OW 1
11926: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11927: LD_ADDR_VAR 0 1
11931: PUSH
11932: LD_VAR 0 1
11936: PPUSH
11937: LD_VAR 0 3
11941: PPUSH
11942: LD_VAR 0 5
11946: PPUSH
11947: CALL_OW 1
11951: ST_TO_ADDR
// result := list ;
11952: LD_ADDR_VAR 0 4
11956: PUSH
11957: LD_VAR 0 1
11961: ST_TO_ADDR
// end ;
11962: LD_VAR 0 4
11966: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11967: LD_INT 0
11969: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11970: LD_ADDR_VAR 0 5
11974: PUSH
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 250
11984: PPUSH
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 251
11994: PPUSH
11995: LD_VAR 0 2
11999: PPUSH
12000: LD_VAR 0 3
12004: PPUSH
12005: LD_VAR 0 4
12009: PPUSH
12010: CALL 12020 0 5
12014: ST_TO_ADDR
// end ;
12015: LD_VAR 0 5
12019: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12020: LD_INT 0
12022: PPUSH
12023: PPUSH
12024: PPUSH
12025: PPUSH
// if not list then
12026: LD_VAR 0 3
12030: NOT
12031: IFFALSE 12035
// exit ;
12033: GO 12423
// result := [ ] ;
12035: LD_ADDR_VAR 0 6
12039: PUSH
12040: EMPTY
12041: ST_TO_ADDR
// for i in list do
12042: LD_ADDR_VAR 0 7
12046: PUSH
12047: LD_VAR 0 3
12051: PUSH
12052: FOR_IN
12053: IFFALSE 12255
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12055: LD_ADDR_VAR 0 9
12059: PUSH
12060: LD_VAR 0 7
12064: PPUSH
12065: LD_VAR 0 1
12069: PPUSH
12070: LD_VAR 0 2
12074: PPUSH
12075: CALL_OW 297
12079: ST_TO_ADDR
// if not result then
12080: LD_VAR 0 6
12084: NOT
12085: IFFALSE 12111
// result := [ [ i , tmp ] ] else
12087: LD_ADDR_VAR 0 6
12091: PUSH
12092: LD_VAR 0 7
12096: PUSH
12097: LD_VAR 0 9
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: ST_TO_ADDR
12109: GO 12253
// begin if result [ result ] [ 2 ] < tmp then
12111: LD_VAR 0 6
12115: PUSH
12116: LD_VAR 0 6
12120: ARRAY
12121: PUSH
12122: LD_INT 2
12124: ARRAY
12125: PUSH
12126: LD_VAR 0 9
12130: LESS
12131: IFFALSE 12173
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12133: LD_ADDR_VAR 0 6
12137: PUSH
12138: LD_VAR 0 6
12142: PPUSH
12143: LD_VAR 0 6
12147: PUSH
12148: LD_INT 1
12150: PLUS
12151: PPUSH
12152: LD_VAR 0 7
12156: PUSH
12157: LD_VAR 0 9
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 2
12170: ST_TO_ADDR
12171: GO 12253
// for j = 1 to result do
12173: LD_ADDR_VAR 0 8
12177: PUSH
12178: DOUBLE
12179: LD_INT 1
12181: DEC
12182: ST_TO_ADDR
12183: LD_VAR 0 6
12187: PUSH
12188: FOR_TO
12189: IFFALSE 12251
// begin if tmp < result [ j ] [ 2 ] then
12191: LD_VAR 0 9
12195: PUSH
12196: LD_VAR 0 6
12200: PUSH
12201: LD_VAR 0 8
12205: ARRAY
12206: PUSH
12207: LD_INT 2
12209: ARRAY
12210: LESS
12211: IFFALSE 12249
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12213: LD_ADDR_VAR 0 6
12217: PUSH
12218: LD_VAR 0 6
12222: PPUSH
12223: LD_VAR 0 8
12227: PPUSH
12228: LD_VAR 0 7
12232: PUSH
12233: LD_VAR 0 9
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 2
12246: ST_TO_ADDR
// break ;
12247: GO 12251
// end ; end ;
12249: GO 12188
12251: POP
12252: POP
// end ; end ;
12253: GO 12052
12255: POP
12256: POP
// if result and not asc then
12257: LD_VAR 0 6
12261: PUSH
12262: LD_VAR 0 4
12266: NOT
12267: AND
12268: IFFALSE 12343
// begin tmp := result ;
12270: LD_ADDR_VAR 0 9
12274: PUSH
12275: LD_VAR 0 6
12279: ST_TO_ADDR
// for i = tmp downto 1 do
12280: LD_ADDR_VAR 0 7
12284: PUSH
12285: DOUBLE
12286: LD_VAR 0 9
12290: INC
12291: ST_TO_ADDR
12292: LD_INT 1
12294: PUSH
12295: FOR_DOWNTO
12296: IFFALSE 12341
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12298: LD_ADDR_VAR 0 6
12302: PUSH
12303: LD_VAR 0 6
12307: PPUSH
12308: LD_VAR 0 9
12312: PUSH
12313: LD_VAR 0 7
12317: MINUS
12318: PUSH
12319: LD_INT 1
12321: PLUS
12322: PPUSH
12323: LD_VAR 0 9
12327: PUSH
12328: LD_VAR 0 7
12332: ARRAY
12333: PPUSH
12334: CALL_OW 1
12338: ST_TO_ADDR
12339: GO 12295
12341: POP
12342: POP
// end ; tmp := [ ] ;
12343: LD_ADDR_VAR 0 9
12347: PUSH
12348: EMPTY
12349: ST_TO_ADDR
// if mode then
12350: LD_VAR 0 5
12354: IFFALSE 12423
// begin for i = 1 to result do
12356: LD_ADDR_VAR 0 7
12360: PUSH
12361: DOUBLE
12362: LD_INT 1
12364: DEC
12365: ST_TO_ADDR
12366: LD_VAR 0 6
12370: PUSH
12371: FOR_TO
12372: IFFALSE 12411
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12374: LD_ADDR_VAR 0 9
12378: PUSH
12379: LD_VAR 0 9
12383: PPUSH
12384: LD_VAR 0 7
12388: PPUSH
12389: LD_VAR 0 6
12393: PUSH
12394: LD_VAR 0 7
12398: ARRAY
12399: PUSH
12400: LD_INT 1
12402: ARRAY
12403: PPUSH
12404: CALL_OW 1
12408: ST_TO_ADDR
12409: GO 12371
12411: POP
12412: POP
// result := tmp ;
12413: LD_ADDR_VAR 0 6
12417: PUSH
12418: LD_VAR 0 9
12422: ST_TO_ADDR
// end ; end ;
12423: LD_VAR 0 6
12427: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12428: LD_INT 0
12430: PPUSH
12431: PPUSH
12432: PPUSH
12433: PPUSH
12434: PPUSH
12435: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12436: LD_ADDR_VAR 0 5
12440: PUSH
12441: LD_INT 0
12443: PUSH
12444: LD_INT 0
12446: PUSH
12447: LD_INT 0
12449: PUSH
12450: EMPTY
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: ST_TO_ADDR
// if not x or not y then
12458: LD_VAR 0 2
12462: NOT
12463: PUSH
12464: LD_VAR 0 3
12468: NOT
12469: OR
12470: IFFALSE 12474
// exit ;
12472: GO 14124
// if not range then
12474: LD_VAR 0 4
12478: NOT
12479: IFFALSE 12489
// range := 10 ;
12481: LD_ADDR_VAR 0 4
12485: PUSH
12486: LD_INT 10
12488: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12489: LD_ADDR_VAR 0 8
12493: PUSH
12494: LD_INT 81
12496: PUSH
12497: LD_VAR 0 1
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: LD_INT 92
12508: PUSH
12509: LD_VAR 0 2
12513: PUSH
12514: LD_VAR 0 3
12518: PUSH
12519: LD_VAR 0 4
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 3
12532: PUSH
12533: LD_INT 21
12535: PUSH
12536: LD_INT 3
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: LIST
12551: PPUSH
12552: CALL_OW 69
12556: ST_TO_ADDR
// if not tmp then
12557: LD_VAR 0 8
12561: NOT
12562: IFFALSE 12566
// exit ;
12564: GO 14124
// for i in tmp do
12566: LD_ADDR_VAR 0 6
12570: PUSH
12571: LD_VAR 0 8
12575: PUSH
12576: FOR_IN
12577: IFFALSE 14099
// begin points := [ 0 , 0 , 0 ] ;
12579: LD_ADDR_VAR 0 9
12583: PUSH
12584: LD_INT 0
12586: PUSH
12587: LD_INT 0
12589: PUSH
12590: LD_INT 0
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: LIST
12597: ST_TO_ADDR
// bpoints := 1 ;
12598: LD_ADDR_VAR 0 10
12602: PUSH
12603: LD_INT 1
12605: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12606: LD_VAR 0 6
12610: PPUSH
12611: CALL_OW 247
12615: PUSH
12616: LD_INT 1
12618: DOUBLE
12619: EQUAL
12620: IFTRUE 12624
12622: GO 13202
12624: POP
// begin if GetClass ( i ) = 1 then
12625: LD_VAR 0 6
12629: PPUSH
12630: CALL_OW 257
12634: PUSH
12635: LD_INT 1
12637: EQUAL
12638: IFFALSE 12659
// points := [ 10 , 5 , 3 ] ;
12640: LD_ADDR_VAR 0 9
12644: PUSH
12645: LD_INT 10
12647: PUSH
12648: LD_INT 5
12650: PUSH
12651: LD_INT 3
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12659: LD_VAR 0 6
12663: PPUSH
12664: CALL_OW 257
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: LD_INT 3
12674: PUSH
12675: LD_INT 4
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: IN
12683: IFFALSE 12704
// points := [ 3 , 2 , 1 ] ;
12685: LD_ADDR_VAR 0 9
12689: PUSH
12690: LD_INT 3
12692: PUSH
12693: LD_INT 2
12695: PUSH
12696: LD_INT 1
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12704: LD_VAR 0 6
12708: PPUSH
12709: CALL_OW 257
12713: PUSH
12714: LD_INT 5
12716: EQUAL
12717: IFFALSE 12738
// points := [ 130 , 5 , 2 ] ;
12719: LD_ADDR_VAR 0 9
12723: PUSH
12724: LD_INT 130
12726: PUSH
12727: LD_INT 5
12729: PUSH
12730: LD_INT 2
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12738: LD_VAR 0 6
12742: PPUSH
12743: CALL_OW 257
12747: PUSH
12748: LD_INT 8
12750: EQUAL
12751: IFFALSE 12772
// points := [ 35 , 35 , 30 ] ;
12753: LD_ADDR_VAR 0 9
12757: PUSH
12758: LD_INT 35
12760: PUSH
12761: LD_INT 35
12763: PUSH
12764: LD_INT 30
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: LIST
12771: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12772: LD_VAR 0 6
12776: PPUSH
12777: CALL_OW 257
12781: PUSH
12782: LD_INT 9
12784: EQUAL
12785: IFFALSE 12806
// points := [ 20 , 55 , 40 ] ;
12787: LD_ADDR_VAR 0 9
12791: PUSH
12792: LD_INT 20
12794: PUSH
12795: LD_INT 55
12797: PUSH
12798: LD_INT 40
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
12806: LD_VAR 0 6
12810: PPUSH
12811: CALL_OW 257
12815: PUSH
12816: LD_INT 12
12818: PUSH
12819: LD_INT 16
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: IN
12826: IFFALSE 12847
// points := [ 5 , 3 , 2 ] ;
12828: LD_ADDR_VAR 0 9
12832: PUSH
12833: LD_INT 5
12835: PUSH
12836: LD_INT 3
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: ST_TO_ADDR
// if GetClass ( i ) = 17 then
12847: LD_VAR 0 6
12851: PPUSH
12852: CALL_OW 257
12856: PUSH
12857: LD_INT 17
12859: EQUAL
12860: IFFALSE 12881
// points := [ 100 , 50 , 75 ] ;
12862: LD_ADDR_VAR 0 9
12866: PUSH
12867: LD_INT 100
12869: PUSH
12870: LD_INT 50
12872: PUSH
12873: LD_INT 75
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: LIST
12880: ST_TO_ADDR
// if GetClass ( i ) = 15 then
12881: LD_VAR 0 6
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 15
12893: EQUAL
12894: IFFALSE 12915
// points := [ 10 , 5 , 3 ] ;
12896: LD_ADDR_VAR 0 9
12900: PUSH
12901: LD_INT 10
12903: PUSH
12904: LD_INT 5
12906: PUSH
12907: LD_INT 3
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: ST_TO_ADDR
// if GetClass ( i ) = 14 then
12915: LD_VAR 0 6
12919: PPUSH
12920: CALL_OW 257
12924: PUSH
12925: LD_INT 14
12927: EQUAL
12928: IFFALSE 12949
// points := [ 10 , 0 , 0 ] ;
12930: LD_ADDR_VAR 0 9
12934: PUSH
12935: LD_INT 10
12937: PUSH
12938: LD_INT 0
12940: PUSH
12941: LD_INT 0
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// if GetClass ( i ) = 11 then
12949: LD_VAR 0 6
12953: PPUSH
12954: CALL_OW 257
12958: PUSH
12959: LD_INT 11
12961: EQUAL
12962: IFFALSE 12983
// points := [ 30 , 10 , 5 ] ;
12964: LD_ADDR_VAR 0 9
12968: PUSH
12969: LD_INT 30
12971: PUSH
12972: LD_INT 10
12974: PUSH
12975: LD_INT 5
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
12983: LD_VAR 0 1
12987: PPUSH
12988: LD_INT 5
12990: PPUSH
12991: CALL_OW 321
12995: PUSH
12996: LD_INT 2
12998: EQUAL
12999: IFFALSE 13016
// bpoints := bpoints * 1.8 ;
13001: LD_ADDR_VAR 0 10
13005: PUSH
13006: LD_VAR 0 10
13010: PUSH
13011: LD_REAL  1.80000000000000E+0000
13014: MUL
13015: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13016: LD_VAR 0 6
13020: PPUSH
13021: CALL_OW 257
13025: PUSH
13026: LD_INT 1
13028: PUSH
13029: LD_INT 2
13031: PUSH
13032: LD_INT 3
13034: PUSH
13035: LD_INT 4
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: IN
13044: PUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: LD_INT 51
13052: PPUSH
13053: CALL_OW 321
13057: PUSH
13058: LD_INT 2
13060: EQUAL
13061: AND
13062: IFFALSE 13079
// bpoints := bpoints * 1.2 ;
13064: LD_ADDR_VAR 0 10
13068: PUSH
13069: LD_VAR 0 10
13073: PUSH
13074: LD_REAL  1.20000000000000E+0000
13077: MUL
13078: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13079: LD_VAR 0 6
13083: PPUSH
13084: CALL_OW 257
13088: PUSH
13089: LD_INT 5
13091: PUSH
13092: LD_INT 7
13094: PUSH
13095: LD_INT 9
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: IN
13103: PUSH
13104: LD_VAR 0 1
13108: PPUSH
13109: LD_INT 52
13111: PPUSH
13112: CALL_OW 321
13116: PUSH
13117: LD_INT 2
13119: EQUAL
13120: AND
13121: IFFALSE 13138
// bpoints := bpoints * 1.5 ;
13123: LD_ADDR_VAR 0 10
13127: PUSH
13128: LD_VAR 0 10
13132: PUSH
13133: LD_REAL  1.50000000000000E+0000
13136: MUL
13137: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13138: LD_VAR 0 1
13142: PPUSH
13143: LD_INT 66
13145: PPUSH
13146: CALL_OW 321
13150: PUSH
13151: LD_INT 2
13153: EQUAL
13154: IFFALSE 13171
// bpoints := bpoints * 1.1 ;
13156: LD_ADDR_VAR 0 10
13160: PUSH
13161: LD_VAR 0 10
13165: PUSH
13166: LD_REAL  1.10000000000000E+0000
13169: MUL
13170: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13171: LD_ADDR_VAR 0 10
13175: PUSH
13176: LD_VAR 0 10
13180: PUSH
13181: LD_VAR 0 6
13185: PPUSH
13186: LD_INT 1
13188: PPUSH
13189: CALL_OW 259
13193: PUSH
13194: LD_REAL  1.15000000000000E+0000
13197: MUL
13198: MUL
13199: ST_TO_ADDR
// end ; unit_vehicle :
13200: GO 14028
13202: LD_INT 2
13204: DOUBLE
13205: EQUAL
13206: IFTRUE 13210
13208: GO 14016
13210: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13211: LD_VAR 0 6
13215: PPUSH
13216: CALL_OW 264
13220: PUSH
13221: LD_INT 2
13223: PUSH
13224: LD_INT 42
13226: PUSH
13227: LD_INT 24
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: IN
13235: IFFALSE 13256
// points := [ 25 , 5 , 3 ] ;
13237: LD_ADDR_VAR 0 9
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 5
13247: PUSH
13248: LD_INT 3
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13256: LD_VAR 0 6
13260: PPUSH
13261: CALL_OW 264
13265: PUSH
13266: LD_INT 4
13268: PUSH
13269: LD_INT 43
13271: PUSH
13272: LD_INT 25
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: LIST
13279: IN
13280: IFFALSE 13301
// points := [ 40 , 15 , 5 ] ;
13282: LD_ADDR_VAR 0 9
13286: PUSH
13287: LD_INT 40
13289: PUSH
13290: LD_INT 15
13292: PUSH
13293: LD_INT 5
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: LIST
13300: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13301: LD_VAR 0 6
13305: PPUSH
13306: CALL_OW 264
13310: PUSH
13311: LD_INT 3
13313: PUSH
13314: LD_INT 23
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: IN
13321: IFFALSE 13342
// points := [ 7 , 25 , 8 ] ;
13323: LD_ADDR_VAR 0 9
13327: PUSH
13328: LD_INT 7
13330: PUSH
13331: LD_INT 25
13333: PUSH
13334: LD_INT 8
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: LIST
13341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13342: LD_VAR 0 6
13346: PPUSH
13347: CALL_OW 264
13351: PUSH
13352: LD_INT 5
13354: PUSH
13355: LD_INT 27
13357: PUSH
13358: LD_INT 44
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: IN
13366: IFFALSE 13387
// points := [ 14 , 50 , 16 ] ;
13368: LD_ADDR_VAR 0 9
13372: PUSH
13373: LD_INT 14
13375: PUSH
13376: LD_INT 50
13378: PUSH
13379: LD_INT 16
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: LIST
13386: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13387: LD_VAR 0 6
13391: PPUSH
13392: CALL_OW 264
13396: PUSH
13397: LD_INT 6
13399: PUSH
13400: LD_INT 46
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: IN
13407: IFFALSE 13428
// points := [ 32 , 120 , 70 ] ;
13409: LD_ADDR_VAR 0 9
13413: PUSH
13414: LD_INT 32
13416: PUSH
13417: LD_INT 120
13419: PUSH
13420: LD_INT 70
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13428: LD_VAR 0 6
13432: PPUSH
13433: CALL_OW 264
13437: PUSH
13438: LD_INT 7
13440: PUSH
13441: LD_INT 28
13443: PUSH
13444: LD_INT 45
13446: PUSH
13447: LD_INT 92
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: IN
13456: IFFALSE 13477
// points := [ 35 , 20 , 45 ] ;
13458: LD_ADDR_VAR 0 9
13462: PUSH
13463: LD_INT 35
13465: PUSH
13466: LD_INT 20
13468: PUSH
13469: LD_INT 45
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13477: LD_VAR 0 6
13481: PPUSH
13482: CALL_OW 264
13486: PUSH
13487: LD_INT 47
13489: PUSH
13490: EMPTY
13491: LIST
13492: IN
13493: IFFALSE 13514
// points := [ 67 , 45 , 75 ] ;
13495: LD_ADDR_VAR 0 9
13499: PUSH
13500: LD_INT 67
13502: PUSH
13503: LD_INT 45
13505: PUSH
13506: LD_INT 75
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: LIST
13513: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13514: LD_VAR 0 6
13518: PPUSH
13519: CALL_OW 264
13523: PUSH
13524: LD_INT 26
13526: PUSH
13527: EMPTY
13528: LIST
13529: IN
13530: IFFALSE 13551
// points := [ 120 , 30 , 80 ] ;
13532: LD_ADDR_VAR 0 9
13536: PUSH
13537: LD_INT 120
13539: PUSH
13540: LD_INT 30
13542: PUSH
13543: LD_INT 80
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: LIST
13550: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13551: LD_VAR 0 6
13555: PPUSH
13556: CALL_OW 264
13560: PUSH
13561: LD_INT 22
13563: PUSH
13564: EMPTY
13565: LIST
13566: IN
13567: IFFALSE 13588
// points := [ 40 , 1 , 1 ] ;
13569: LD_ADDR_VAR 0 9
13573: PUSH
13574: LD_INT 40
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: LD_INT 1
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13588: LD_VAR 0 6
13592: PPUSH
13593: CALL_OW 264
13597: PUSH
13598: LD_INT 29
13600: PUSH
13601: EMPTY
13602: LIST
13603: IN
13604: IFFALSE 13625
// points := [ 70 , 200 , 400 ] ;
13606: LD_ADDR_VAR 0 9
13610: PUSH
13611: LD_INT 70
13613: PUSH
13614: LD_INT 200
13616: PUSH
13617: LD_INT 400
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13625: LD_VAR 0 6
13629: PPUSH
13630: CALL_OW 264
13634: PUSH
13635: LD_INT 14
13637: PUSH
13638: LD_INT 53
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: IN
13645: IFFALSE 13666
// points := [ 40 , 10 , 20 ] ;
13647: LD_ADDR_VAR 0 9
13651: PUSH
13652: LD_INT 40
13654: PUSH
13655: LD_INT 10
13657: PUSH
13658: LD_INT 20
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: LIST
13665: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13666: LD_VAR 0 6
13670: PPUSH
13671: CALL_OW 264
13675: PUSH
13676: LD_INT 9
13678: PUSH
13679: EMPTY
13680: LIST
13681: IN
13682: IFFALSE 13703
// points := [ 5 , 70 , 20 ] ;
13684: LD_ADDR_VAR 0 9
13688: PUSH
13689: LD_INT 5
13691: PUSH
13692: LD_INT 70
13694: PUSH
13695: LD_INT 20
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13703: LD_VAR 0 6
13707: PPUSH
13708: CALL_OW 264
13712: PUSH
13713: LD_INT 10
13715: PUSH
13716: EMPTY
13717: LIST
13718: IN
13719: IFFALSE 13740
// points := [ 35 , 110 , 70 ] ;
13721: LD_ADDR_VAR 0 9
13725: PUSH
13726: LD_INT 35
13728: PUSH
13729: LD_INT 110
13731: PUSH
13732: LD_INT 70
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: LIST
13739: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13740: LD_VAR 0 6
13744: PPUSH
13745: CALL_OW 265
13749: PUSH
13750: LD_INT 25
13752: EQUAL
13753: IFFALSE 13774
// points := [ 80 , 65 , 100 ] ;
13755: LD_ADDR_VAR 0 9
13759: PUSH
13760: LD_INT 80
13762: PUSH
13763: LD_INT 65
13765: PUSH
13766: LD_INT 100
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13774: LD_VAR 0 6
13778: PPUSH
13779: CALL_OW 263
13783: PUSH
13784: LD_INT 1
13786: EQUAL
13787: IFFALSE 13822
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
13789: LD_ADDR_VAR 0 10
13793: PUSH
13794: LD_VAR 0 10
13798: PUSH
13799: LD_VAR 0 6
13803: PPUSH
13804: CALL_OW 311
13808: PPUSH
13809: LD_INT 3
13811: PPUSH
13812: CALL_OW 259
13816: PUSH
13817: LD_INT 4
13819: MUL
13820: MUL
13821: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
13822: LD_VAR 0 6
13826: PPUSH
13827: CALL_OW 263
13831: PUSH
13832: LD_INT 2
13834: EQUAL
13835: IFFALSE 13886
// begin j := IsControledBy ( i ) ;
13837: LD_ADDR_VAR 0 7
13841: PUSH
13842: LD_VAR 0 6
13846: PPUSH
13847: CALL_OW 312
13851: ST_TO_ADDR
// if j then
13852: LD_VAR 0 7
13856: IFFALSE 13886
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
13858: LD_ADDR_VAR 0 10
13862: PUSH
13863: LD_VAR 0 10
13867: PUSH
13868: LD_VAR 0 7
13872: PPUSH
13873: LD_INT 3
13875: PPUSH
13876: CALL_OW 259
13880: PUSH
13881: LD_INT 3
13883: MUL
13884: MUL
13885: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
13886: LD_VAR 0 6
13890: PPUSH
13891: CALL_OW 264
13895: PUSH
13896: LD_INT 5
13898: PUSH
13899: LD_INT 6
13901: PUSH
13902: LD_INT 46
13904: PUSH
13905: LD_INT 44
13907: PUSH
13908: LD_INT 47
13910: PUSH
13911: LD_INT 45
13913: PUSH
13914: LD_INT 28
13916: PUSH
13917: LD_INT 7
13919: PUSH
13920: LD_INT 27
13922: PUSH
13923: LD_INT 29
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: IN
13938: PUSH
13939: LD_VAR 0 1
13943: PPUSH
13944: LD_INT 52
13946: PPUSH
13947: CALL_OW 321
13951: PUSH
13952: LD_INT 2
13954: EQUAL
13955: AND
13956: IFFALSE 13973
// bpoints := bpoints * 1.2 ;
13958: LD_ADDR_VAR 0 10
13962: PUSH
13963: LD_VAR 0 10
13967: PUSH
13968: LD_REAL  1.20000000000000E+0000
13971: MUL
13972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
13973: LD_VAR 0 6
13977: PPUSH
13978: CALL_OW 264
13982: PUSH
13983: LD_INT 6
13985: PUSH
13986: LD_INT 46
13988: PUSH
13989: LD_INT 47
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: IN
13997: IFFALSE 14014
// bpoints := bpoints * 1.2 ;
13999: LD_ADDR_VAR 0 10
14003: PUSH
14004: LD_VAR 0 10
14008: PUSH
14009: LD_REAL  1.20000000000000E+0000
14012: MUL
14013: ST_TO_ADDR
// end ; unit_building :
14014: GO 14028
14016: LD_INT 3
14018: DOUBLE
14019: EQUAL
14020: IFTRUE 14024
14022: GO 14027
14024: POP
// ; end ;
14025: GO 14028
14027: POP
// for j = 1 to 3 do
14028: LD_ADDR_VAR 0 7
14032: PUSH
14033: DOUBLE
14034: LD_INT 1
14036: DEC
14037: ST_TO_ADDR
14038: LD_INT 3
14040: PUSH
14041: FOR_TO
14042: IFFALSE 14095
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14044: LD_ADDR_VAR 0 5
14048: PUSH
14049: LD_VAR 0 5
14053: PPUSH
14054: LD_VAR 0 7
14058: PPUSH
14059: LD_VAR 0 5
14063: PUSH
14064: LD_VAR 0 7
14068: ARRAY
14069: PUSH
14070: LD_VAR 0 9
14074: PUSH
14075: LD_VAR 0 7
14079: ARRAY
14080: PUSH
14081: LD_VAR 0 10
14085: MUL
14086: PLUS
14087: PPUSH
14088: CALL_OW 1
14092: ST_TO_ADDR
14093: GO 14041
14095: POP
14096: POP
// end ;
14097: GO 12576
14099: POP
14100: POP
// result := Replace ( result , 4 , tmp ) ;
14101: LD_ADDR_VAR 0 5
14105: PUSH
14106: LD_VAR 0 5
14110: PPUSH
14111: LD_INT 4
14113: PPUSH
14114: LD_VAR 0 8
14118: PPUSH
14119: CALL_OW 1
14123: ST_TO_ADDR
// end ;
14124: LD_VAR 0 5
14128: RET
// export function DangerAtRange ( unit , range ) ; begin
14129: LD_INT 0
14131: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14132: LD_ADDR_VAR 0 3
14136: PUSH
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 255
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 250
14156: PPUSH
14157: LD_VAR 0 1
14161: PPUSH
14162: CALL_OW 251
14166: PPUSH
14167: LD_VAR 0 2
14171: PPUSH
14172: CALL 12428 0 4
14176: ST_TO_ADDR
// end ;
14177: LD_VAR 0 3
14181: RET
// export function DangerInArea ( side , area ) ; begin
14182: LD_INT 0
14184: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14185: LD_ADDR_VAR 0 3
14189: PUSH
14190: LD_VAR 0 2
14194: PPUSH
14195: LD_INT 81
14197: PUSH
14198: LD_VAR 0 1
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PPUSH
14207: CALL_OW 70
14211: ST_TO_ADDR
// end ;
14212: LD_VAR 0 3
14216: RET
// export function IsExtension ( b ) ; begin
14217: LD_INT 0
14219: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14220: LD_ADDR_VAR 0 2
14224: PUSH
14225: LD_VAR 0 1
14229: PUSH
14230: LD_INT 23
14232: PUSH
14233: LD_INT 20
14235: PUSH
14236: LD_INT 22
14238: PUSH
14239: LD_INT 17
14241: PUSH
14242: LD_INT 24
14244: PUSH
14245: LD_INT 21
14247: PUSH
14248: LD_INT 19
14250: PUSH
14251: LD_INT 16
14253: PUSH
14254: LD_INT 25
14256: PUSH
14257: LD_INT 18
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: IN
14272: ST_TO_ADDR
// end ;
14273: LD_VAR 0 2
14277: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14278: LD_INT 0
14280: PPUSH
14281: PPUSH
14282: PPUSH
// result := [ ] ;
14283: LD_ADDR_VAR 0 4
14287: PUSH
14288: EMPTY
14289: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14290: LD_ADDR_VAR 0 5
14294: PUSH
14295: LD_VAR 0 2
14299: PPUSH
14300: LD_INT 21
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PPUSH
14310: CALL_OW 70
14314: ST_TO_ADDR
// if not tmp then
14315: LD_VAR 0 5
14319: NOT
14320: IFFALSE 14324
// exit ;
14322: GO 14388
// if checkLink then
14324: LD_VAR 0 3
14328: IFFALSE 14378
// begin for i in tmp do
14330: LD_ADDR_VAR 0 6
14334: PUSH
14335: LD_VAR 0 5
14339: PUSH
14340: FOR_IN
14341: IFFALSE 14376
// if GetBase ( i ) <> base then
14343: LD_VAR 0 6
14347: PPUSH
14348: CALL_OW 274
14352: PUSH
14353: LD_VAR 0 1
14357: NONEQUAL
14358: IFFALSE 14374
// ComLinkToBase ( base , i ) ;
14360: LD_VAR 0 1
14364: PPUSH
14365: LD_VAR 0 6
14369: PPUSH
14370: CALL_OW 169
14374: GO 14340
14376: POP
14377: POP
// end ; result := tmp ;
14378: LD_ADDR_VAR 0 4
14382: PUSH
14383: LD_VAR 0 5
14387: ST_TO_ADDR
// end ;
14388: LD_VAR 0 4
14392: RET
// export function ComComplete ( units , b ) ; var i ; begin
14393: LD_INT 0
14395: PPUSH
14396: PPUSH
// if not units then
14397: LD_VAR 0 1
14401: NOT
14402: IFFALSE 14406
// exit ;
14404: GO 14496
// for i in units do
14406: LD_ADDR_VAR 0 4
14410: PUSH
14411: LD_VAR 0 1
14415: PUSH
14416: FOR_IN
14417: IFFALSE 14494
// if BuildingStatus ( b ) = bs_build then
14419: LD_VAR 0 2
14423: PPUSH
14424: CALL_OW 461
14428: PUSH
14429: LD_INT 1
14431: EQUAL
14432: IFFALSE 14492
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14434: LD_VAR 0 4
14438: PPUSH
14439: LD_STRING h
14441: PUSH
14442: LD_VAR 0 2
14446: PPUSH
14447: CALL_OW 250
14451: PUSH
14452: LD_VAR 0 2
14456: PPUSH
14457: CALL_OW 251
14461: PUSH
14462: LD_VAR 0 2
14466: PUSH
14467: LD_INT 0
14469: PUSH
14470: LD_INT 0
14472: PUSH
14473: LD_INT 0
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: PPUSH
14488: CALL_OW 446
14492: GO 14416
14494: POP
14495: POP
// end ;
14496: LD_VAR 0 3
14500: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14501: LD_INT 0
14503: PPUSH
14504: PPUSH
14505: PPUSH
14506: PPUSH
14507: PPUSH
14508: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14509: LD_VAR 0 1
14513: NOT
14514: PUSH
14515: LD_VAR 0 1
14519: PPUSH
14520: CALL_OW 263
14524: PUSH
14525: LD_INT 2
14527: NONEQUAL
14528: OR
14529: IFFALSE 14533
// exit ;
14531: GO 14849
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14533: LD_ADDR_VAR 0 6
14537: PUSH
14538: LD_INT 22
14540: PUSH
14541: LD_VAR 0 1
14545: PPUSH
14546: CALL_OW 255
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PUSH
14555: LD_INT 2
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 36
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: LD_INT 34
14570: PUSH
14571: LD_INT 31
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: LIST
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PPUSH
14587: CALL_OW 69
14591: ST_TO_ADDR
// if not tmp then
14592: LD_VAR 0 6
14596: NOT
14597: IFFALSE 14601
// exit ;
14599: GO 14849
// result := [ ] ;
14601: LD_ADDR_VAR 0 2
14605: PUSH
14606: EMPTY
14607: ST_TO_ADDR
// for i in tmp do
14608: LD_ADDR_VAR 0 3
14612: PUSH
14613: LD_VAR 0 6
14617: PUSH
14618: FOR_IN
14619: IFFALSE 14690
// begin t := UnitsInside ( i ) ;
14621: LD_ADDR_VAR 0 4
14625: PUSH
14626: LD_VAR 0 3
14630: PPUSH
14631: CALL_OW 313
14635: ST_TO_ADDR
// if t then
14636: LD_VAR 0 4
14640: IFFALSE 14688
// for j in t do
14642: LD_ADDR_VAR 0 7
14646: PUSH
14647: LD_VAR 0 4
14651: PUSH
14652: FOR_IN
14653: IFFALSE 14686
// result := Replace ( result , result + 1 , j ) ;
14655: LD_ADDR_VAR 0 2
14659: PUSH
14660: LD_VAR 0 2
14664: PPUSH
14665: LD_VAR 0 2
14669: PUSH
14670: LD_INT 1
14672: PLUS
14673: PPUSH
14674: LD_VAR 0 7
14678: PPUSH
14679: CALL_OW 1
14683: ST_TO_ADDR
14684: GO 14652
14686: POP
14687: POP
// end ;
14688: GO 14618
14690: POP
14691: POP
// if not result then
14692: LD_VAR 0 2
14696: NOT
14697: IFFALSE 14701
// exit ;
14699: GO 14849
// mech := result [ 1 ] ;
14701: LD_ADDR_VAR 0 5
14705: PUSH
14706: LD_VAR 0 2
14710: PUSH
14711: LD_INT 1
14713: ARRAY
14714: ST_TO_ADDR
// if result > 1 then
14715: LD_VAR 0 2
14719: PUSH
14720: LD_INT 1
14722: GREATER
14723: IFFALSE 14835
// begin for i = 2 to result do
14725: LD_ADDR_VAR 0 3
14729: PUSH
14730: DOUBLE
14731: LD_INT 2
14733: DEC
14734: ST_TO_ADDR
14735: LD_VAR 0 2
14739: PUSH
14740: FOR_TO
14741: IFFALSE 14833
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14743: LD_ADDR_VAR 0 4
14747: PUSH
14748: LD_VAR 0 2
14752: PUSH
14753: LD_VAR 0 3
14757: ARRAY
14758: PPUSH
14759: LD_INT 3
14761: PPUSH
14762: CALL_OW 259
14766: PUSH
14767: LD_VAR 0 2
14771: PUSH
14772: LD_VAR 0 3
14776: ARRAY
14777: PPUSH
14778: CALL_OW 432
14782: MINUS
14783: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
14784: LD_VAR 0 4
14788: PUSH
14789: LD_VAR 0 5
14793: PPUSH
14794: LD_INT 3
14796: PPUSH
14797: CALL_OW 259
14801: PUSH
14802: LD_VAR 0 5
14806: PPUSH
14807: CALL_OW 432
14811: MINUS
14812: GREATEREQUAL
14813: IFFALSE 14831
// mech := result [ i ] ;
14815: LD_ADDR_VAR 0 5
14819: PUSH
14820: LD_VAR 0 2
14824: PUSH
14825: LD_VAR 0 3
14829: ARRAY
14830: ST_TO_ADDR
// end ;
14831: GO 14740
14833: POP
14834: POP
// end ; ComLinkTo ( vehicle , mech ) ;
14835: LD_VAR 0 1
14839: PPUSH
14840: LD_VAR 0 5
14844: PPUSH
14845: CALL_OW 135
// end ;
14849: LD_VAR 0 2
14853: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
14854: LD_INT 0
14856: PPUSH
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
14866: PPUSH
14867: PPUSH
14868: PPUSH
// result := [ ] ;
14869: LD_ADDR_VAR 0 7
14873: PUSH
14874: EMPTY
14875: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
14876: LD_VAR 0 1
14880: PPUSH
14881: CALL_OW 266
14885: PUSH
14886: LD_INT 0
14888: PUSH
14889: LD_INT 1
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: IN
14896: NOT
14897: IFFALSE 14901
// exit ;
14899: GO 16535
// if name then
14901: LD_VAR 0 3
14905: IFFALSE 14921
// SetBName ( base_dep , name ) ;
14907: LD_VAR 0 1
14911: PPUSH
14912: LD_VAR 0 3
14916: PPUSH
14917: CALL_OW 500
// base := GetBase ( base_dep ) ;
14921: LD_ADDR_VAR 0 15
14925: PUSH
14926: LD_VAR 0 1
14930: PPUSH
14931: CALL_OW 274
14935: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
14936: LD_ADDR_VAR 0 16
14940: PUSH
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 255
14950: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
14951: LD_ADDR_VAR 0 17
14955: PUSH
14956: LD_VAR 0 1
14960: PPUSH
14961: CALL_OW 248
14965: ST_TO_ADDR
// if sources then
14966: LD_VAR 0 5
14970: IFFALSE 15017
// for i = 1 to 3 do
14972: LD_ADDR_VAR 0 8
14976: PUSH
14977: DOUBLE
14978: LD_INT 1
14980: DEC
14981: ST_TO_ADDR
14982: LD_INT 3
14984: PUSH
14985: FOR_TO
14986: IFFALSE 15015
// AddResourceType ( base , i , sources [ i ] ) ;
14988: LD_VAR 0 15
14992: PPUSH
14993: LD_VAR 0 8
14997: PPUSH
14998: LD_VAR 0 5
15002: PUSH
15003: LD_VAR 0 8
15007: ARRAY
15008: PPUSH
15009: CALL_OW 276
15013: GO 14985
15015: POP
15016: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15017: LD_ADDR_VAR 0 18
15021: PUSH
15022: LD_VAR 0 15
15026: PPUSH
15027: LD_VAR 0 2
15031: PPUSH
15032: LD_INT 1
15034: PPUSH
15035: CALL 14278 0 3
15039: ST_TO_ADDR
// InitHc ;
15040: CALL_OW 19
// InitUc ;
15044: CALL_OW 18
// uc_side := side ;
15048: LD_ADDR_OWVAR 20
15052: PUSH
15053: LD_VAR 0 16
15057: ST_TO_ADDR
// uc_nation := nation ;
15058: LD_ADDR_OWVAR 21
15062: PUSH
15063: LD_VAR 0 17
15067: ST_TO_ADDR
// if buildings then
15068: LD_VAR 0 18
15072: IFFALSE 16394
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15074: LD_ADDR_VAR 0 19
15078: PUSH
15079: LD_VAR 0 18
15083: PPUSH
15084: LD_INT 2
15086: PUSH
15087: LD_INT 30
15089: PUSH
15090: LD_INT 29
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 30
15099: PUSH
15100: LD_INT 30
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 72
15116: ST_TO_ADDR
// if tmp then
15117: LD_VAR 0 19
15121: IFFALSE 15169
// for i in tmp do
15123: LD_ADDR_VAR 0 8
15127: PUSH
15128: LD_VAR 0 19
15132: PUSH
15133: FOR_IN
15134: IFFALSE 15167
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15136: LD_VAR 0 8
15140: PPUSH
15141: CALL_OW 250
15145: PPUSH
15146: LD_VAR 0 8
15150: PPUSH
15151: CALL_OW 251
15155: PPUSH
15156: LD_VAR 0 16
15160: PPUSH
15161: CALL_OW 441
15165: GO 15133
15167: POP
15168: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15169: LD_VAR 0 18
15173: PPUSH
15174: LD_INT 2
15176: PUSH
15177: LD_INT 30
15179: PUSH
15180: LD_INT 32
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 30
15189: PUSH
15190: LD_INT 33
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: LIST
15201: PPUSH
15202: CALL_OW 72
15206: IFFALSE 15294
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15208: LD_ADDR_VAR 0 8
15212: PUSH
15213: LD_VAR 0 18
15217: PPUSH
15218: LD_INT 2
15220: PUSH
15221: LD_INT 30
15223: PUSH
15224: LD_INT 32
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 30
15233: PUSH
15234: LD_INT 33
15236: PUSH
15237: EMPTY
15238: LIST
15239: LIST
15240: PUSH
15241: EMPTY
15242: LIST
15243: LIST
15244: LIST
15245: PPUSH
15246: CALL_OW 72
15250: PUSH
15251: FOR_IN
15252: IFFALSE 15292
// begin if not GetBWeapon ( i ) then
15254: LD_VAR 0 8
15258: PPUSH
15259: CALL_OW 269
15263: NOT
15264: IFFALSE 15290
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15266: LD_VAR 0 8
15270: PPUSH
15271: LD_VAR 0 8
15275: PPUSH
15276: LD_VAR 0 2
15280: PPUSH
15281: CALL 16540 0 2
15285: PPUSH
15286: CALL_OW 431
// end ;
15290: GO 15251
15292: POP
15293: POP
// end ; for i = 1 to personel do
15294: LD_ADDR_VAR 0 8
15298: PUSH
15299: DOUBLE
15300: LD_INT 1
15302: DEC
15303: ST_TO_ADDR
15304: LD_VAR 0 6
15308: PUSH
15309: FOR_TO
15310: IFFALSE 16374
// begin if i > 4 then
15312: LD_VAR 0 8
15316: PUSH
15317: LD_INT 4
15319: GREATER
15320: IFFALSE 15324
// break ;
15322: GO 16374
// case i of 1 :
15324: LD_VAR 0 8
15328: PUSH
15329: LD_INT 1
15331: DOUBLE
15332: EQUAL
15333: IFTRUE 15337
15335: GO 15417
15337: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15338: LD_ADDR_VAR 0 12
15342: PUSH
15343: LD_VAR 0 18
15347: PPUSH
15348: LD_INT 22
15350: PUSH
15351: LD_VAR 0 16
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 58
15362: PUSH
15363: EMPTY
15364: LIST
15365: PUSH
15366: LD_INT 2
15368: PUSH
15369: LD_INT 30
15371: PUSH
15372: LD_INT 32
15374: PUSH
15375: EMPTY
15376: LIST
15377: LIST
15378: PUSH
15379: LD_INT 30
15381: PUSH
15382: LD_INT 4
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 30
15391: PUSH
15392: LD_INT 5
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: PPUSH
15410: CALL_OW 72
15414: ST_TO_ADDR
15415: GO 15639
15417: LD_INT 2
15419: DOUBLE
15420: EQUAL
15421: IFTRUE 15425
15423: GO 15487
15425: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15426: LD_ADDR_VAR 0 12
15430: PUSH
15431: LD_VAR 0 18
15435: PPUSH
15436: LD_INT 22
15438: PUSH
15439: LD_VAR 0 16
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: LD_INT 30
15453: PUSH
15454: LD_INT 0
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: LD_INT 30
15463: PUSH
15464: LD_INT 1
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: LIST
15475: PUSH
15476: EMPTY
15477: LIST
15478: LIST
15479: PPUSH
15480: CALL_OW 72
15484: ST_TO_ADDR
15485: GO 15639
15487: LD_INT 3
15489: DOUBLE
15490: EQUAL
15491: IFTRUE 15495
15493: GO 15557
15495: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15496: LD_ADDR_VAR 0 12
15500: PUSH
15501: LD_VAR 0 18
15505: PPUSH
15506: LD_INT 22
15508: PUSH
15509: LD_VAR 0 16
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 2
15520: PUSH
15521: LD_INT 30
15523: PUSH
15524: LD_INT 2
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 30
15533: PUSH
15534: LD_INT 3
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 72
15554: ST_TO_ADDR
15555: GO 15639
15557: LD_INT 4
15559: DOUBLE
15560: EQUAL
15561: IFTRUE 15565
15563: GO 15638
15565: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15566: LD_ADDR_VAR 0 12
15570: PUSH
15571: LD_VAR 0 18
15575: PPUSH
15576: LD_INT 22
15578: PUSH
15579: LD_VAR 0 16
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 2
15590: PUSH
15591: LD_INT 30
15593: PUSH
15594: LD_INT 6
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 7
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 8
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: EMPTY
15622: LIST
15623: LIST
15624: LIST
15625: LIST
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PPUSH
15631: CALL_OW 72
15635: ST_TO_ADDR
15636: GO 15639
15638: POP
// if i = 1 then
15639: LD_VAR 0 8
15643: PUSH
15644: LD_INT 1
15646: EQUAL
15647: IFFALSE 15758
// begin tmp := [ ] ;
15649: LD_ADDR_VAR 0 19
15653: PUSH
15654: EMPTY
15655: ST_TO_ADDR
// for j in f do
15656: LD_ADDR_VAR 0 9
15660: PUSH
15661: LD_VAR 0 12
15665: PUSH
15666: FOR_IN
15667: IFFALSE 15740
// if GetBType ( j ) = b_bunker then
15669: LD_VAR 0 9
15673: PPUSH
15674: CALL_OW 266
15678: PUSH
15679: LD_INT 32
15681: EQUAL
15682: IFFALSE 15709
// tmp := Insert ( tmp , 1 , j ) else
15684: LD_ADDR_VAR 0 19
15688: PUSH
15689: LD_VAR 0 19
15693: PPUSH
15694: LD_INT 1
15696: PPUSH
15697: LD_VAR 0 9
15701: PPUSH
15702: CALL_OW 2
15706: ST_TO_ADDR
15707: GO 15738
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15709: LD_ADDR_VAR 0 19
15713: PUSH
15714: LD_VAR 0 19
15718: PPUSH
15719: LD_VAR 0 19
15723: PUSH
15724: LD_INT 1
15726: PLUS
15727: PPUSH
15728: LD_VAR 0 9
15732: PPUSH
15733: CALL_OW 2
15737: ST_TO_ADDR
15738: GO 15666
15740: POP
15741: POP
// if tmp then
15742: LD_VAR 0 19
15746: IFFALSE 15758
// f := tmp ;
15748: LD_ADDR_VAR 0 12
15752: PUSH
15753: LD_VAR 0 19
15757: ST_TO_ADDR
// end ; x := personel [ i ] ;
15758: LD_ADDR_VAR 0 13
15762: PUSH
15763: LD_VAR 0 6
15767: PUSH
15768: LD_VAR 0 8
15772: ARRAY
15773: ST_TO_ADDR
// if x = - 1 then
15774: LD_VAR 0 13
15778: PUSH
15779: LD_INT 1
15781: NEG
15782: EQUAL
15783: IFFALSE 15992
// begin for j in f do
15785: LD_ADDR_VAR 0 9
15789: PUSH
15790: LD_VAR 0 12
15794: PUSH
15795: FOR_IN
15796: IFFALSE 15988
// repeat InitHc ;
15798: CALL_OW 19
// if GetBType ( j ) = b_barracks then
15802: LD_VAR 0 9
15806: PPUSH
15807: CALL_OW 266
15811: PUSH
15812: LD_INT 5
15814: EQUAL
15815: IFFALSE 15885
// begin if UnitsInside ( j ) < 3 then
15817: LD_VAR 0 9
15821: PPUSH
15822: CALL_OW 313
15826: PUSH
15827: LD_INT 3
15829: LESS
15830: IFFALSE 15866
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
15832: LD_INT 0
15834: PPUSH
15835: LD_INT 5
15837: PUSH
15838: LD_INT 8
15840: PUSH
15841: LD_INT 9
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: PUSH
15849: LD_VAR 0 17
15853: ARRAY
15854: PPUSH
15855: LD_VAR 0 4
15859: PPUSH
15860: CALL_OW 380
15864: GO 15883
// PrepareHuman ( false , i , skill ) ;
15866: LD_INT 0
15868: PPUSH
15869: LD_VAR 0 8
15873: PPUSH
15874: LD_VAR 0 4
15878: PPUSH
15879: CALL_OW 380
// end else
15883: GO 15902
// PrepareHuman ( false , i , skill ) ;
15885: LD_INT 0
15887: PPUSH
15888: LD_VAR 0 8
15892: PPUSH
15893: LD_VAR 0 4
15897: PPUSH
15898: CALL_OW 380
// un := CreateHuman ;
15902: LD_ADDR_VAR 0 14
15906: PUSH
15907: CALL_OW 44
15911: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
15912: LD_ADDR_VAR 0 7
15916: PUSH
15917: LD_VAR 0 7
15921: PPUSH
15922: LD_INT 1
15924: PPUSH
15925: LD_VAR 0 14
15929: PPUSH
15930: CALL_OW 2
15934: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
15935: LD_VAR 0 14
15939: PPUSH
15940: LD_VAR 0 9
15944: PPUSH
15945: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
15949: LD_VAR 0 9
15953: PPUSH
15954: CALL_OW 313
15958: PUSH
15959: LD_INT 6
15961: EQUAL
15962: PUSH
15963: LD_VAR 0 9
15967: PPUSH
15968: CALL_OW 266
15972: PUSH
15973: LD_INT 32
15975: PUSH
15976: LD_INT 31
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: IN
15983: OR
15984: IFFALSE 15798
15986: GO 15795
15988: POP
15989: POP
// end else
15990: GO 16372
// for j = 1 to x do
15992: LD_ADDR_VAR 0 9
15996: PUSH
15997: DOUBLE
15998: LD_INT 1
16000: DEC
16001: ST_TO_ADDR
16002: LD_VAR 0 13
16006: PUSH
16007: FOR_TO
16008: IFFALSE 16370
// begin InitHc ;
16010: CALL_OW 19
// if not f then
16014: LD_VAR 0 12
16018: NOT
16019: IFFALSE 16108
// begin PrepareHuman ( false , i , skill ) ;
16021: LD_INT 0
16023: PPUSH
16024: LD_VAR 0 8
16028: PPUSH
16029: LD_VAR 0 4
16033: PPUSH
16034: CALL_OW 380
// un := CreateHuman ;
16038: LD_ADDR_VAR 0 14
16042: PUSH
16043: CALL_OW 44
16047: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16048: LD_ADDR_VAR 0 7
16052: PUSH
16053: LD_VAR 0 7
16057: PPUSH
16058: LD_INT 1
16060: PPUSH
16061: LD_VAR 0 14
16065: PPUSH
16066: CALL_OW 2
16070: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16071: LD_VAR 0 14
16075: PPUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: CALL_OW 250
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 251
16095: PPUSH
16096: LD_INT 10
16098: PPUSH
16099: LD_INT 0
16101: PPUSH
16102: CALL_OW 50
// continue ;
16106: GO 16007
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16108: LD_VAR 0 12
16112: PUSH
16113: LD_INT 1
16115: ARRAY
16116: PPUSH
16117: CALL_OW 313
16121: PUSH
16122: LD_VAR 0 12
16126: PUSH
16127: LD_INT 1
16129: ARRAY
16130: PPUSH
16131: CALL_OW 266
16135: PUSH
16136: LD_INT 32
16138: PUSH
16139: LD_INT 31
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: IN
16146: AND
16147: PUSH
16148: LD_VAR 0 12
16152: PUSH
16153: LD_INT 1
16155: ARRAY
16156: PPUSH
16157: CALL_OW 313
16161: PUSH
16162: LD_INT 6
16164: EQUAL
16165: OR
16166: IFFALSE 16186
// f := Delete ( f , 1 ) ;
16168: LD_ADDR_VAR 0 12
16172: PUSH
16173: LD_VAR 0 12
16177: PPUSH
16178: LD_INT 1
16180: PPUSH
16181: CALL_OW 3
16185: ST_TO_ADDR
// if not f then
16186: LD_VAR 0 12
16190: NOT
16191: IFFALSE 16209
// begin x := x + 2 ;
16193: LD_ADDR_VAR 0 13
16197: PUSH
16198: LD_VAR 0 13
16202: PUSH
16203: LD_INT 2
16205: PLUS
16206: ST_TO_ADDR
// continue ;
16207: GO 16007
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16209: LD_VAR 0 12
16213: PUSH
16214: LD_INT 1
16216: ARRAY
16217: PPUSH
16218: CALL_OW 266
16222: PUSH
16223: LD_INT 5
16225: EQUAL
16226: IFFALSE 16300
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16228: LD_VAR 0 12
16232: PUSH
16233: LD_INT 1
16235: ARRAY
16236: PPUSH
16237: CALL_OW 313
16241: PUSH
16242: LD_INT 3
16244: LESS
16245: IFFALSE 16281
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16247: LD_INT 0
16249: PPUSH
16250: LD_INT 5
16252: PUSH
16253: LD_INT 8
16255: PUSH
16256: LD_INT 9
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: PUSH
16264: LD_VAR 0 17
16268: ARRAY
16269: PPUSH
16270: LD_VAR 0 4
16274: PPUSH
16275: CALL_OW 380
16279: GO 16298
// PrepareHuman ( false , i , skill ) ;
16281: LD_INT 0
16283: PPUSH
16284: LD_VAR 0 8
16288: PPUSH
16289: LD_VAR 0 4
16293: PPUSH
16294: CALL_OW 380
// end else
16298: GO 16317
// PrepareHuman ( false , i , skill ) ;
16300: LD_INT 0
16302: PPUSH
16303: LD_VAR 0 8
16307: PPUSH
16308: LD_VAR 0 4
16312: PPUSH
16313: CALL_OW 380
// un := CreateHuman ;
16317: LD_ADDR_VAR 0 14
16321: PUSH
16322: CALL_OW 44
16326: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16327: LD_ADDR_VAR 0 7
16331: PUSH
16332: LD_VAR 0 7
16336: PPUSH
16337: LD_INT 1
16339: PPUSH
16340: LD_VAR 0 14
16344: PPUSH
16345: CALL_OW 2
16349: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16350: LD_VAR 0 14
16354: PPUSH
16355: LD_VAR 0 12
16359: PUSH
16360: LD_INT 1
16362: ARRAY
16363: PPUSH
16364: CALL_OW 52
// end ;
16368: GO 16007
16370: POP
16371: POP
// end ;
16372: GO 15309
16374: POP
16375: POP
// result := result ^ buildings ;
16376: LD_ADDR_VAR 0 7
16380: PUSH
16381: LD_VAR 0 7
16385: PUSH
16386: LD_VAR 0 18
16390: ADD
16391: ST_TO_ADDR
// end else
16392: GO 16535
// begin for i = 1 to personel do
16394: LD_ADDR_VAR 0 8
16398: PUSH
16399: DOUBLE
16400: LD_INT 1
16402: DEC
16403: ST_TO_ADDR
16404: LD_VAR 0 6
16408: PUSH
16409: FOR_TO
16410: IFFALSE 16533
// begin if i > 4 then
16412: LD_VAR 0 8
16416: PUSH
16417: LD_INT 4
16419: GREATER
16420: IFFALSE 16424
// break ;
16422: GO 16533
// x := personel [ i ] ;
16424: LD_ADDR_VAR 0 13
16428: PUSH
16429: LD_VAR 0 6
16433: PUSH
16434: LD_VAR 0 8
16438: ARRAY
16439: ST_TO_ADDR
// if x = - 1 then
16440: LD_VAR 0 13
16444: PUSH
16445: LD_INT 1
16447: NEG
16448: EQUAL
16449: IFFALSE 16453
// continue ;
16451: GO 16409
// PrepareHuman ( false , i , skill ) ;
16453: LD_INT 0
16455: PPUSH
16456: LD_VAR 0 8
16460: PPUSH
16461: LD_VAR 0 4
16465: PPUSH
16466: CALL_OW 380
// un := CreateHuman ;
16470: LD_ADDR_VAR 0 14
16474: PUSH
16475: CALL_OW 44
16479: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16480: LD_VAR 0 14
16484: PPUSH
16485: LD_VAR 0 1
16489: PPUSH
16490: CALL_OW 250
16494: PPUSH
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 251
16504: PPUSH
16505: LD_INT 10
16507: PPUSH
16508: LD_INT 0
16510: PPUSH
16511: CALL_OW 50
// result := result ^ un ;
16515: LD_ADDR_VAR 0 7
16519: PUSH
16520: LD_VAR 0 7
16524: PUSH
16525: LD_VAR 0 14
16529: ADD
16530: ST_TO_ADDR
// end ;
16531: GO 16409
16533: POP
16534: POP
// end ; end ;
16535: LD_VAR 0 7
16539: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16540: LD_INT 0
16542: PPUSH
16543: PPUSH
16544: PPUSH
16545: PPUSH
16546: PPUSH
16547: PPUSH
16548: PPUSH
16549: PPUSH
16550: PPUSH
16551: PPUSH
16552: PPUSH
16553: PPUSH
16554: PPUSH
16555: PPUSH
16556: PPUSH
16557: PPUSH
// result := false ;
16558: LD_ADDR_VAR 0 3
16562: PUSH
16563: LD_INT 0
16565: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16566: LD_VAR 0 1
16570: NOT
16571: PUSH
16572: LD_VAR 0 1
16576: PPUSH
16577: CALL_OW 266
16581: PUSH
16582: LD_INT 32
16584: PUSH
16585: LD_INT 33
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: IN
16592: NOT
16593: OR
16594: IFFALSE 16598
// exit ;
16596: GO 17707
// nat := GetNation ( tower ) ;
16598: LD_ADDR_VAR 0 12
16602: PUSH
16603: LD_VAR 0 1
16607: PPUSH
16608: CALL_OW 248
16612: ST_TO_ADDR
// side := GetSide ( tower ) ;
16613: LD_ADDR_VAR 0 16
16617: PUSH
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 255
16627: ST_TO_ADDR
// x := GetX ( tower ) ;
16628: LD_ADDR_VAR 0 10
16632: PUSH
16633: LD_VAR 0 1
16637: PPUSH
16638: CALL_OW 250
16642: ST_TO_ADDR
// y := GetY ( tower ) ;
16643: LD_ADDR_VAR 0 11
16647: PUSH
16648: LD_VAR 0 1
16652: PPUSH
16653: CALL_OW 251
16657: ST_TO_ADDR
// if not x or not y then
16658: LD_VAR 0 10
16662: NOT
16663: PUSH
16664: LD_VAR 0 11
16668: NOT
16669: OR
16670: IFFALSE 16674
// exit ;
16672: GO 17707
// weapon := 0 ;
16674: LD_ADDR_VAR 0 18
16678: PUSH
16679: LD_INT 0
16681: ST_TO_ADDR
// fac_list := [ ] ;
16682: LD_ADDR_VAR 0 17
16686: PUSH
16687: EMPTY
16688: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16689: LD_ADDR_VAR 0 6
16693: PUSH
16694: LD_VAR 0 1
16698: PPUSH
16699: CALL_OW 274
16703: PPUSH
16704: LD_VAR 0 2
16708: PPUSH
16709: LD_INT 0
16711: PPUSH
16712: CALL 14278 0 3
16716: PPUSH
16717: LD_INT 30
16719: PUSH
16720: LD_INT 3
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PPUSH
16727: CALL_OW 72
16731: ST_TO_ADDR
// if not factories then
16732: LD_VAR 0 6
16736: NOT
16737: IFFALSE 16741
// exit ;
16739: GO 17707
// for i in factories do
16741: LD_ADDR_VAR 0 8
16745: PUSH
16746: LD_VAR 0 6
16750: PUSH
16751: FOR_IN
16752: IFFALSE 16777
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16754: LD_ADDR_VAR 0 17
16758: PUSH
16759: LD_VAR 0 17
16763: PUSH
16764: LD_VAR 0 8
16768: PPUSH
16769: CALL_OW 478
16773: UNION
16774: ST_TO_ADDR
16775: GO 16751
16777: POP
16778: POP
// if not fac_list then
16779: LD_VAR 0 17
16783: NOT
16784: IFFALSE 16788
// exit ;
16786: GO 17707
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
16788: LD_ADDR_VAR 0 5
16792: PUSH
16793: LD_INT 4
16795: PUSH
16796: LD_INT 5
16798: PUSH
16799: LD_INT 9
16801: PUSH
16802: LD_INT 10
16804: PUSH
16805: LD_INT 6
16807: PUSH
16808: LD_INT 7
16810: PUSH
16811: LD_INT 11
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 27
16825: PUSH
16826: LD_INT 28
16828: PUSH
16829: LD_INT 26
16831: PUSH
16832: LD_INT 30
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: PUSH
16841: LD_INT 43
16843: PUSH
16844: LD_INT 44
16846: PUSH
16847: LD_INT 46
16849: PUSH
16850: LD_INT 45
16852: PUSH
16853: LD_INT 47
16855: PUSH
16856: LD_INT 49
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: PUSH
16872: LD_VAR 0 12
16876: ARRAY
16877: ST_TO_ADDR
// list := list isect fac_list ;
16878: LD_ADDR_VAR 0 5
16882: PUSH
16883: LD_VAR 0 5
16887: PUSH
16888: LD_VAR 0 17
16892: ISECT
16893: ST_TO_ADDR
// if not list then
16894: LD_VAR 0 5
16898: NOT
16899: IFFALSE 16903
// exit ;
16901: GO 17707
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
16903: LD_VAR 0 12
16907: PUSH
16908: LD_INT 3
16910: EQUAL
16911: PUSH
16912: LD_INT 49
16914: PUSH
16915: LD_VAR 0 5
16919: IN
16920: AND
16921: PUSH
16922: LD_INT 31
16924: PPUSH
16925: LD_VAR 0 16
16929: PPUSH
16930: CALL_OW 321
16934: PUSH
16935: LD_INT 2
16937: EQUAL
16938: AND
16939: IFFALSE 16999
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
16941: LD_INT 22
16943: PUSH
16944: LD_VAR 0 16
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: LD_INT 35
16955: PUSH
16956: LD_INT 49
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 91
16965: PUSH
16966: LD_VAR 0 1
16970: PUSH
16971: LD_INT 10
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: PPUSH
16984: CALL_OW 69
16988: NOT
16989: IFFALSE 16999
// weapon := ru_time_lapser ;
16991: LD_ADDR_VAR 0 18
16995: PUSH
16996: LD_INT 49
16998: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
16999: LD_VAR 0 12
17003: PUSH
17004: LD_INT 1
17006: PUSH
17007: LD_INT 2
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: IN
17014: PUSH
17015: LD_INT 11
17017: PUSH
17018: LD_VAR 0 5
17022: IN
17023: PUSH
17024: LD_INT 30
17026: PUSH
17027: LD_VAR 0 5
17031: IN
17032: OR
17033: AND
17034: PUSH
17035: LD_INT 6
17037: PPUSH
17038: LD_VAR 0 16
17042: PPUSH
17043: CALL_OW 321
17047: PUSH
17048: LD_INT 2
17050: EQUAL
17051: AND
17052: IFFALSE 17217
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17054: LD_INT 22
17056: PUSH
17057: LD_VAR 0 16
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: LD_INT 35
17071: PUSH
17072: LD_INT 11
17074: PUSH
17075: EMPTY
17076: LIST
17077: LIST
17078: PUSH
17079: LD_INT 35
17081: PUSH
17082: LD_INT 30
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 91
17096: PUSH
17097: LD_VAR 0 1
17101: PUSH
17102: LD_INT 18
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL_OW 69
17119: NOT
17120: PUSH
17121: LD_INT 22
17123: PUSH
17124: LD_VAR 0 16
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 2
17135: PUSH
17136: LD_INT 30
17138: PUSH
17139: LD_INT 32
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 30
17148: PUSH
17149: LD_INT 33
17151: PUSH
17152: EMPTY
17153: LIST
17154: LIST
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 91
17163: PUSH
17164: LD_VAR 0 1
17168: PUSH
17169: LD_INT 12
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: PUSH
17182: EMPTY
17183: LIST
17184: PPUSH
17185: CALL_OW 69
17189: PUSH
17190: LD_INT 2
17192: GREATER
17193: AND
17194: IFFALSE 17217
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17196: LD_ADDR_VAR 0 18
17200: PUSH
17201: LD_INT 11
17203: PUSH
17204: LD_INT 30
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PUSH
17211: LD_VAR 0 12
17215: ARRAY
17216: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17217: LD_VAR 0 18
17221: NOT
17222: PUSH
17223: LD_INT 40
17225: PPUSH
17226: LD_VAR 0 16
17230: PPUSH
17231: CALL_OW 321
17235: PUSH
17236: LD_INT 2
17238: EQUAL
17239: AND
17240: PUSH
17241: LD_INT 7
17243: PUSH
17244: LD_VAR 0 5
17248: IN
17249: PUSH
17250: LD_INT 28
17252: PUSH
17253: LD_VAR 0 5
17257: IN
17258: OR
17259: PUSH
17260: LD_INT 45
17262: PUSH
17263: LD_VAR 0 5
17267: IN
17268: OR
17269: AND
17270: IFFALSE 17524
// begin hex := GetHexInfo ( x , y ) ;
17272: LD_ADDR_VAR 0 4
17276: PUSH
17277: LD_VAR 0 10
17281: PPUSH
17282: LD_VAR 0 11
17286: PPUSH
17287: CALL_OW 546
17291: ST_TO_ADDR
// if hex [ 1 ] then
17292: LD_VAR 0 4
17296: PUSH
17297: LD_INT 1
17299: ARRAY
17300: IFFALSE 17304
// exit ;
17302: GO 17707
// height := hex [ 2 ] ;
17304: LD_ADDR_VAR 0 15
17308: PUSH
17309: LD_VAR 0 4
17313: PUSH
17314: LD_INT 2
17316: ARRAY
17317: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17318: LD_ADDR_VAR 0 14
17322: PUSH
17323: LD_INT 0
17325: PUSH
17326: LD_INT 2
17328: PUSH
17329: LD_INT 3
17331: PUSH
17332: LD_INT 5
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: ST_TO_ADDR
// for i in tmp do
17341: LD_ADDR_VAR 0 8
17345: PUSH
17346: LD_VAR 0 14
17350: PUSH
17351: FOR_IN
17352: IFFALSE 17522
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17354: LD_ADDR_VAR 0 9
17358: PUSH
17359: LD_VAR 0 10
17363: PPUSH
17364: LD_VAR 0 8
17368: PPUSH
17369: LD_INT 5
17371: PPUSH
17372: CALL_OW 272
17376: PUSH
17377: LD_VAR 0 11
17381: PPUSH
17382: LD_VAR 0 8
17386: PPUSH
17387: LD_INT 5
17389: PPUSH
17390: CALL_OW 273
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17399: LD_VAR 0 9
17403: PUSH
17404: LD_INT 1
17406: ARRAY
17407: PPUSH
17408: LD_VAR 0 9
17412: PUSH
17413: LD_INT 2
17415: ARRAY
17416: PPUSH
17417: CALL_OW 488
17421: IFFALSE 17520
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17423: LD_ADDR_VAR 0 4
17427: PUSH
17428: LD_VAR 0 9
17432: PUSH
17433: LD_INT 1
17435: ARRAY
17436: PPUSH
17437: LD_VAR 0 9
17441: PUSH
17442: LD_INT 2
17444: ARRAY
17445: PPUSH
17446: CALL_OW 546
17450: ST_TO_ADDR
// if hex [ 1 ] then
17451: LD_VAR 0 4
17455: PUSH
17456: LD_INT 1
17458: ARRAY
17459: IFFALSE 17463
// continue ;
17461: GO 17351
// h := hex [ 2 ] ;
17463: LD_ADDR_VAR 0 13
17467: PUSH
17468: LD_VAR 0 4
17472: PUSH
17473: LD_INT 2
17475: ARRAY
17476: ST_TO_ADDR
// if h + 7 < height then
17477: LD_VAR 0 13
17481: PUSH
17482: LD_INT 7
17484: PLUS
17485: PUSH
17486: LD_VAR 0 15
17490: LESS
17491: IFFALSE 17520
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17493: LD_ADDR_VAR 0 18
17497: PUSH
17498: LD_INT 7
17500: PUSH
17501: LD_INT 28
17503: PUSH
17504: LD_INT 45
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: LIST
17511: PUSH
17512: LD_VAR 0 12
17516: ARRAY
17517: ST_TO_ADDR
// break ;
17518: GO 17522
// end ; end ; end ;
17520: GO 17351
17522: POP
17523: POP
// end ; if not weapon then
17524: LD_VAR 0 18
17528: NOT
17529: IFFALSE 17589
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17531: LD_ADDR_VAR 0 5
17535: PUSH
17536: LD_VAR 0 5
17540: PUSH
17541: LD_INT 11
17543: PUSH
17544: LD_INT 30
17546: PUSH
17547: LD_INT 49
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: LIST
17554: DIFF
17555: ST_TO_ADDR
// if not list then
17556: LD_VAR 0 5
17560: NOT
17561: IFFALSE 17565
// exit ;
17563: GO 17707
// weapon := list [ rand ( 1 , list ) ] ;
17565: LD_ADDR_VAR 0 18
17569: PUSH
17570: LD_VAR 0 5
17574: PUSH
17575: LD_INT 1
17577: PPUSH
17578: LD_VAR 0 5
17582: PPUSH
17583: CALL_OW 12
17587: ARRAY
17588: ST_TO_ADDR
// end ; if weapon then
17589: LD_VAR 0 18
17593: IFFALSE 17707
// begin tmp := CostOfWeapon ( weapon ) ;
17595: LD_ADDR_VAR 0 14
17599: PUSH
17600: LD_VAR 0 18
17604: PPUSH
17605: CALL_OW 451
17609: ST_TO_ADDR
// j := GetBase ( tower ) ;
17610: LD_ADDR_VAR 0 9
17614: PUSH
17615: LD_VAR 0 1
17619: PPUSH
17620: CALL_OW 274
17624: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17625: LD_VAR 0 9
17629: PPUSH
17630: LD_INT 1
17632: PPUSH
17633: CALL_OW 275
17637: PUSH
17638: LD_VAR 0 14
17642: PUSH
17643: LD_INT 1
17645: ARRAY
17646: GREATEREQUAL
17647: PUSH
17648: LD_VAR 0 9
17652: PPUSH
17653: LD_INT 2
17655: PPUSH
17656: CALL_OW 275
17660: PUSH
17661: LD_VAR 0 14
17665: PUSH
17666: LD_INT 2
17668: ARRAY
17669: GREATEREQUAL
17670: AND
17671: PUSH
17672: LD_VAR 0 9
17676: PPUSH
17677: LD_INT 3
17679: PPUSH
17680: CALL_OW 275
17684: PUSH
17685: LD_VAR 0 14
17689: PUSH
17690: LD_INT 3
17692: ARRAY
17693: GREATEREQUAL
17694: AND
17695: IFFALSE 17707
// result := weapon ;
17697: LD_ADDR_VAR 0 3
17701: PUSH
17702: LD_VAR 0 18
17706: ST_TO_ADDR
// end ; end ;
17707: LD_VAR 0 3
17711: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17712: LD_INT 0
17714: PPUSH
17715: PPUSH
// result := true ;
17716: LD_ADDR_VAR 0 3
17720: PUSH
17721: LD_INT 1
17723: ST_TO_ADDR
// if array1 = array2 then
17724: LD_VAR 0 1
17728: PUSH
17729: LD_VAR 0 2
17733: EQUAL
17734: IFFALSE 17794
// begin for i = 1 to array1 do
17736: LD_ADDR_VAR 0 4
17740: PUSH
17741: DOUBLE
17742: LD_INT 1
17744: DEC
17745: ST_TO_ADDR
17746: LD_VAR 0 1
17750: PUSH
17751: FOR_TO
17752: IFFALSE 17790
// if array1 [ i ] <> array2 [ i ] then
17754: LD_VAR 0 1
17758: PUSH
17759: LD_VAR 0 4
17763: ARRAY
17764: PUSH
17765: LD_VAR 0 2
17769: PUSH
17770: LD_VAR 0 4
17774: ARRAY
17775: NONEQUAL
17776: IFFALSE 17788
// begin result := false ;
17778: LD_ADDR_VAR 0 3
17782: PUSH
17783: LD_INT 0
17785: ST_TO_ADDR
// break ;
17786: GO 17790
// end ;
17788: GO 17751
17790: POP
17791: POP
// end else
17792: GO 17802
// result := false ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_INT 0
17801: ST_TO_ADDR
// end ;
17802: LD_VAR 0 3
17806: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
17807: LD_INT 0
17809: PPUSH
17810: PPUSH
// if not array1 or not array2 then
17811: LD_VAR 0 1
17815: NOT
17816: PUSH
17817: LD_VAR 0 2
17821: NOT
17822: OR
17823: IFFALSE 17827
// exit ;
17825: GO 17891
// result := true ;
17827: LD_ADDR_VAR 0 3
17831: PUSH
17832: LD_INT 1
17834: ST_TO_ADDR
// for i = 1 to array1 do
17835: LD_ADDR_VAR 0 4
17839: PUSH
17840: DOUBLE
17841: LD_INT 1
17843: DEC
17844: ST_TO_ADDR
17845: LD_VAR 0 1
17849: PUSH
17850: FOR_TO
17851: IFFALSE 17889
// if array1 [ i ] <> array2 [ i ] then
17853: LD_VAR 0 1
17857: PUSH
17858: LD_VAR 0 4
17862: ARRAY
17863: PUSH
17864: LD_VAR 0 2
17868: PUSH
17869: LD_VAR 0 4
17873: ARRAY
17874: NONEQUAL
17875: IFFALSE 17887
// begin result := false ;
17877: LD_ADDR_VAR 0 3
17881: PUSH
17882: LD_INT 0
17884: ST_TO_ADDR
// break ;
17885: GO 17889
// end ;
17887: GO 17850
17889: POP
17890: POP
// end ;
17891: LD_VAR 0 3
17895: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
17896: LD_INT 0
17898: PPUSH
17899: PPUSH
17900: PPUSH
// pom := GetBase ( fac ) ;
17901: LD_ADDR_VAR 0 5
17905: PUSH
17906: LD_VAR 0 1
17910: PPUSH
17911: CALL_OW 274
17915: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
17916: LD_ADDR_VAR 0 4
17920: PUSH
17921: LD_VAR 0 2
17925: PUSH
17926: LD_INT 1
17928: ARRAY
17929: PPUSH
17930: LD_VAR 0 2
17934: PUSH
17935: LD_INT 2
17937: ARRAY
17938: PPUSH
17939: LD_VAR 0 2
17943: PUSH
17944: LD_INT 3
17946: ARRAY
17947: PPUSH
17948: LD_VAR 0 2
17952: PUSH
17953: LD_INT 4
17955: ARRAY
17956: PPUSH
17957: CALL_OW 449
17961: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
17962: LD_ADDR_VAR 0 3
17966: PUSH
17967: LD_VAR 0 5
17971: PPUSH
17972: LD_INT 1
17974: PPUSH
17975: CALL_OW 275
17979: PUSH
17980: LD_VAR 0 4
17984: PUSH
17985: LD_INT 1
17987: ARRAY
17988: GREATEREQUAL
17989: PUSH
17990: LD_VAR 0 5
17994: PPUSH
17995: LD_INT 2
17997: PPUSH
17998: CALL_OW 275
18002: PUSH
18003: LD_VAR 0 4
18007: PUSH
18008: LD_INT 2
18010: ARRAY
18011: GREATEREQUAL
18012: AND
18013: PUSH
18014: LD_VAR 0 5
18018: PPUSH
18019: LD_INT 3
18021: PPUSH
18022: CALL_OW 275
18026: PUSH
18027: LD_VAR 0 4
18031: PUSH
18032: LD_INT 3
18034: ARRAY
18035: GREATEREQUAL
18036: AND
18037: ST_TO_ADDR
// end ;
18038: LD_VAR 0 3
18042: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18043: LD_INT 0
18045: PPUSH
18046: PPUSH
18047: PPUSH
18048: PPUSH
// pom := GetBase ( building ) ;
18049: LD_ADDR_VAR 0 3
18053: PUSH
18054: LD_VAR 0 1
18058: PPUSH
18059: CALL_OW 274
18063: ST_TO_ADDR
// if not pom then
18064: LD_VAR 0 3
18068: NOT
18069: IFFALSE 18073
// exit ;
18071: GO 18243
// btype := GetBType ( building ) ;
18073: LD_ADDR_VAR 0 5
18077: PUSH
18078: LD_VAR 0 1
18082: PPUSH
18083: CALL_OW 266
18087: ST_TO_ADDR
// if btype = b_armoury then
18088: LD_VAR 0 5
18092: PUSH
18093: LD_INT 4
18095: EQUAL
18096: IFFALSE 18106
// btype := b_barracks ;
18098: LD_ADDR_VAR 0 5
18102: PUSH
18103: LD_INT 5
18105: ST_TO_ADDR
// if btype = b_depot then
18106: LD_VAR 0 5
18110: PUSH
18111: LD_INT 0
18113: EQUAL
18114: IFFALSE 18124
// btype := b_warehouse ;
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_INT 1
18123: ST_TO_ADDR
// if btype = b_workshop then
18124: LD_VAR 0 5
18128: PUSH
18129: LD_INT 2
18131: EQUAL
18132: IFFALSE 18142
// btype := b_factory ;
18134: LD_ADDR_VAR 0 5
18138: PUSH
18139: LD_INT 3
18141: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18142: LD_ADDR_VAR 0 4
18146: PUSH
18147: LD_VAR 0 5
18151: PPUSH
18152: LD_VAR 0 1
18156: PPUSH
18157: CALL_OW 248
18161: PPUSH
18162: CALL_OW 450
18166: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_VAR 0 3
18176: PPUSH
18177: LD_INT 1
18179: PPUSH
18180: CALL_OW 275
18184: PUSH
18185: LD_VAR 0 4
18189: PUSH
18190: LD_INT 1
18192: ARRAY
18193: GREATEREQUAL
18194: PUSH
18195: LD_VAR 0 3
18199: PPUSH
18200: LD_INT 2
18202: PPUSH
18203: CALL_OW 275
18207: PUSH
18208: LD_VAR 0 4
18212: PUSH
18213: LD_INT 2
18215: ARRAY
18216: GREATEREQUAL
18217: AND
18218: PUSH
18219: LD_VAR 0 3
18223: PPUSH
18224: LD_INT 3
18226: PPUSH
18227: CALL_OW 275
18231: PUSH
18232: LD_VAR 0 4
18236: PUSH
18237: LD_INT 3
18239: ARRAY
18240: GREATEREQUAL
18241: AND
18242: ST_TO_ADDR
// end ;
18243: LD_VAR 0 2
18247: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18248: LD_INT 0
18250: PPUSH
18251: PPUSH
18252: PPUSH
// pom := GetBase ( building ) ;
18253: LD_ADDR_VAR 0 4
18257: PUSH
18258: LD_VAR 0 1
18262: PPUSH
18263: CALL_OW 274
18267: ST_TO_ADDR
// if not pom then
18268: LD_VAR 0 4
18272: NOT
18273: IFFALSE 18277
// exit ;
18275: GO 18378
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18277: LD_ADDR_VAR 0 5
18281: PUSH
18282: LD_VAR 0 2
18286: PPUSH
18287: LD_VAR 0 1
18291: PPUSH
18292: CALL_OW 248
18296: PPUSH
18297: CALL_OW 450
18301: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18302: LD_ADDR_VAR 0 3
18306: PUSH
18307: LD_VAR 0 4
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: CALL_OW 275
18319: PUSH
18320: LD_VAR 0 5
18324: PUSH
18325: LD_INT 1
18327: ARRAY
18328: GREATEREQUAL
18329: PUSH
18330: LD_VAR 0 4
18334: PPUSH
18335: LD_INT 2
18337: PPUSH
18338: CALL_OW 275
18342: PUSH
18343: LD_VAR 0 5
18347: PUSH
18348: LD_INT 2
18350: ARRAY
18351: GREATEREQUAL
18352: AND
18353: PUSH
18354: LD_VAR 0 4
18358: PPUSH
18359: LD_INT 3
18361: PPUSH
18362: CALL_OW 275
18366: PUSH
18367: LD_VAR 0 5
18371: PUSH
18372: LD_INT 3
18374: ARRAY
18375: GREATEREQUAL
18376: AND
18377: ST_TO_ADDR
// end ;
18378: LD_VAR 0 3
18382: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18383: LD_INT 0
18385: PPUSH
18386: PPUSH
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
18391: PPUSH
18392: PPUSH
18393: PPUSH
18394: PPUSH
18395: PPUSH
// result := false ;
18396: LD_ADDR_VAR 0 8
18400: PUSH
18401: LD_INT 0
18403: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18404: LD_VAR 0 5
18408: NOT
18409: PUSH
18410: LD_VAR 0 1
18414: NOT
18415: OR
18416: PUSH
18417: LD_VAR 0 2
18421: NOT
18422: OR
18423: PUSH
18424: LD_VAR 0 3
18428: NOT
18429: OR
18430: IFFALSE 18434
// exit ;
18432: GO 19248
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18434: LD_ADDR_VAR 0 14
18438: PUSH
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_VAR 0 2
18448: PPUSH
18449: LD_VAR 0 3
18453: PPUSH
18454: LD_VAR 0 4
18458: PPUSH
18459: LD_VAR 0 5
18463: PUSH
18464: LD_INT 1
18466: ARRAY
18467: PPUSH
18468: CALL_OW 248
18472: PPUSH
18473: LD_INT 0
18475: PPUSH
18476: CALL 20481 0 6
18480: ST_TO_ADDR
// if not hexes then
18481: LD_VAR 0 14
18485: NOT
18486: IFFALSE 18490
// exit ;
18488: GO 19248
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18490: LD_ADDR_VAR 0 17
18494: PUSH
18495: LD_VAR 0 5
18499: PPUSH
18500: LD_INT 22
18502: PUSH
18503: LD_VAR 0 13
18507: PPUSH
18508: CALL_OW 255
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 30
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 30
18532: PUSH
18533: LD_INT 1
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 72
18553: ST_TO_ADDR
// for i = 1 to hexes do
18554: LD_ADDR_VAR 0 9
18558: PUSH
18559: DOUBLE
18560: LD_INT 1
18562: DEC
18563: ST_TO_ADDR
18564: LD_VAR 0 14
18568: PUSH
18569: FOR_TO
18570: IFFALSE 19246
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18572: LD_ADDR_VAR 0 13
18576: PUSH
18577: LD_VAR 0 14
18581: PUSH
18582: LD_VAR 0 9
18586: ARRAY
18587: PUSH
18588: LD_INT 1
18590: ARRAY
18591: PPUSH
18592: LD_VAR 0 14
18596: PUSH
18597: LD_VAR 0 9
18601: ARRAY
18602: PUSH
18603: LD_INT 2
18605: ARRAY
18606: PPUSH
18607: CALL_OW 428
18611: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18612: LD_VAR 0 14
18616: PUSH
18617: LD_VAR 0 9
18621: ARRAY
18622: PUSH
18623: LD_INT 1
18625: ARRAY
18626: PPUSH
18627: LD_VAR 0 14
18631: PUSH
18632: LD_VAR 0 9
18636: ARRAY
18637: PUSH
18638: LD_INT 2
18640: ARRAY
18641: PPUSH
18642: CALL_OW 351
18646: PUSH
18647: LD_VAR 0 14
18651: PUSH
18652: LD_VAR 0 9
18656: ARRAY
18657: PUSH
18658: LD_INT 1
18660: ARRAY
18661: PPUSH
18662: LD_VAR 0 14
18666: PUSH
18667: LD_VAR 0 9
18671: ARRAY
18672: PUSH
18673: LD_INT 2
18675: ARRAY
18676: PPUSH
18677: CALL_OW 488
18681: NOT
18682: OR
18683: PUSH
18684: LD_VAR 0 13
18688: PPUSH
18689: CALL_OW 247
18693: PUSH
18694: LD_INT 3
18696: EQUAL
18697: OR
18698: IFFALSE 18704
// exit ;
18700: POP
18701: POP
18702: GO 19248
// if not tmp then
18704: LD_VAR 0 13
18708: NOT
18709: IFFALSE 18713
// continue ;
18711: GO 18569
// result := true ;
18713: LD_ADDR_VAR 0 8
18717: PUSH
18718: LD_INT 1
18720: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18721: LD_VAR 0 6
18725: PUSH
18726: LD_VAR 0 13
18730: PPUSH
18731: CALL_OW 247
18735: PUSH
18736: LD_INT 2
18738: EQUAL
18739: AND
18740: PUSH
18741: LD_VAR 0 13
18745: PPUSH
18746: CALL_OW 263
18750: PUSH
18751: LD_INT 1
18753: EQUAL
18754: AND
18755: IFFALSE 18919
// begin if IsDrivenBy ( tmp ) then
18757: LD_VAR 0 13
18761: PPUSH
18762: CALL_OW 311
18766: IFFALSE 18770
// continue ;
18768: GO 18569
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
18770: LD_VAR 0 6
18774: PPUSH
18775: LD_INT 3
18777: PUSH
18778: LD_INT 60
18780: PUSH
18781: EMPTY
18782: LIST
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 3
18790: PUSH
18791: LD_INT 55
18793: PUSH
18794: EMPTY
18795: LIST
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PPUSH
18805: CALL_OW 72
18809: IFFALSE 18917
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
18811: LD_ADDR_VAR 0 18
18815: PUSH
18816: LD_VAR 0 6
18820: PPUSH
18821: LD_INT 3
18823: PUSH
18824: LD_INT 60
18826: PUSH
18827: EMPTY
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 3
18836: PUSH
18837: LD_INT 55
18839: PUSH
18840: EMPTY
18841: LIST
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 72
18855: PUSH
18856: LD_INT 1
18858: ARRAY
18859: ST_TO_ADDR
// if IsInUnit ( driver ) then
18860: LD_VAR 0 18
18864: PPUSH
18865: CALL_OW 310
18869: IFFALSE 18880
// ComExit ( driver ) ;
18871: LD_VAR 0 18
18875: PPUSH
18876: CALL 44260 0 1
// AddComEnterUnit ( driver , tmp ) ;
18880: LD_VAR 0 18
18884: PPUSH
18885: LD_VAR 0 13
18889: PPUSH
18890: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
18894: LD_VAR 0 18
18898: PPUSH
18899: LD_VAR 0 7
18903: PPUSH
18904: CALL_OW 173
// AddComExitVehicle ( driver ) ;
18908: LD_VAR 0 18
18912: PPUSH
18913: CALL_OW 181
// end ; continue ;
18917: GO 18569
// end ; if not cleaners or not tmp in cleaners then
18919: LD_VAR 0 6
18923: NOT
18924: PUSH
18925: LD_VAR 0 13
18929: PUSH
18930: LD_VAR 0 6
18934: IN
18935: NOT
18936: OR
18937: IFFALSE 19244
// begin if dep then
18939: LD_VAR 0 17
18943: IFFALSE 19079
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
18945: LD_ADDR_VAR 0 16
18949: PUSH
18950: LD_VAR 0 17
18954: PUSH
18955: LD_INT 1
18957: ARRAY
18958: PPUSH
18959: CALL_OW 250
18963: PPUSH
18964: LD_VAR 0 17
18968: PUSH
18969: LD_INT 1
18971: ARRAY
18972: PPUSH
18973: CALL_OW 254
18977: PPUSH
18978: LD_INT 5
18980: PPUSH
18981: CALL_OW 272
18985: PUSH
18986: LD_VAR 0 17
18990: PUSH
18991: LD_INT 1
18993: ARRAY
18994: PPUSH
18995: CALL_OW 251
18999: PPUSH
19000: LD_VAR 0 17
19004: PUSH
19005: LD_INT 1
19007: ARRAY
19008: PPUSH
19009: CALL_OW 254
19013: PPUSH
19014: LD_INT 5
19016: PPUSH
19017: CALL_OW 273
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19026: LD_VAR 0 16
19030: PUSH
19031: LD_INT 1
19033: ARRAY
19034: PPUSH
19035: LD_VAR 0 16
19039: PUSH
19040: LD_INT 2
19042: ARRAY
19043: PPUSH
19044: CALL_OW 488
19048: IFFALSE 19079
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19050: LD_VAR 0 13
19054: PPUSH
19055: LD_VAR 0 16
19059: PUSH
19060: LD_INT 1
19062: ARRAY
19063: PPUSH
19064: LD_VAR 0 16
19068: PUSH
19069: LD_INT 2
19071: ARRAY
19072: PPUSH
19073: CALL_OW 111
// continue ;
19077: GO 18569
// end ; end ; r := GetDir ( tmp ) ;
19079: LD_ADDR_VAR 0 15
19083: PUSH
19084: LD_VAR 0 13
19088: PPUSH
19089: CALL_OW 254
19093: ST_TO_ADDR
// if r = 5 then
19094: LD_VAR 0 15
19098: PUSH
19099: LD_INT 5
19101: EQUAL
19102: IFFALSE 19112
// r := 0 ;
19104: LD_ADDR_VAR 0 15
19108: PUSH
19109: LD_INT 0
19111: ST_TO_ADDR
// for j = r to 5 do
19112: LD_ADDR_VAR 0 10
19116: PUSH
19117: DOUBLE
19118: LD_VAR 0 15
19122: DEC
19123: ST_TO_ADDR
19124: LD_INT 5
19126: PUSH
19127: FOR_TO
19128: IFFALSE 19242
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19130: LD_ADDR_VAR 0 11
19134: PUSH
19135: LD_VAR 0 13
19139: PPUSH
19140: CALL_OW 250
19144: PPUSH
19145: LD_VAR 0 10
19149: PPUSH
19150: LD_INT 2
19152: PPUSH
19153: CALL_OW 272
19157: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19158: LD_ADDR_VAR 0 12
19162: PUSH
19163: LD_VAR 0 13
19167: PPUSH
19168: CALL_OW 251
19172: PPUSH
19173: LD_VAR 0 10
19177: PPUSH
19178: LD_INT 2
19180: PPUSH
19181: CALL_OW 273
19185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19186: LD_VAR 0 11
19190: PPUSH
19191: LD_VAR 0 12
19195: PPUSH
19196: CALL_OW 488
19200: PUSH
19201: LD_VAR 0 11
19205: PPUSH
19206: LD_VAR 0 12
19210: PPUSH
19211: CALL_OW 428
19215: NOT
19216: AND
19217: IFFALSE 19240
// begin ComMoveXY ( tmp , _x , _y ) ;
19219: LD_VAR 0 13
19223: PPUSH
19224: LD_VAR 0 11
19228: PPUSH
19229: LD_VAR 0 12
19233: PPUSH
19234: CALL_OW 111
// break ;
19238: GO 19242
// end ; end ;
19240: GO 19127
19242: POP
19243: POP
// end ; end ;
19244: GO 18569
19246: POP
19247: POP
// end ;
19248: LD_VAR 0 8
19252: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19253: LD_INT 0
19255: PPUSH
// result := true ;
19256: LD_ADDR_VAR 0 3
19260: PUSH
19261: LD_INT 1
19263: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19264: LD_VAR 0 2
19268: PUSH
19269: LD_INT 24
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19283
19275: LD_INT 33
19277: DOUBLE
19278: EQUAL
19279: IFTRUE 19283
19281: GO 19308
19283: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19284: LD_ADDR_VAR 0 3
19288: PUSH
19289: LD_INT 32
19291: PPUSH
19292: LD_VAR 0 1
19296: PPUSH
19297: CALL_OW 321
19301: PUSH
19302: LD_INT 2
19304: EQUAL
19305: ST_TO_ADDR
19306: GO 19624
19308: LD_INT 20
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19341
19316: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19317: LD_ADDR_VAR 0 3
19321: PUSH
19322: LD_INT 6
19324: PPUSH
19325: LD_VAR 0 1
19329: PPUSH
19330: CALL_OW 321
19334: PUSH
19335: LD_INT 2
19337: EQUAL
19338: ST_TO_ADDR
19339: GO 19624
19341: LD_INT 22
19343: DOUBLE
19344: EQUAL
19345: IFTRUE 19355
19347: LD_INT 36
19349: DOUBLE
19350: EQUAL
19351: IFTRUE 19355
19353: GO 19380
19355: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: LD_INT 15
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 321
19373: PUSH
19374: LD_INT 2
19376: EQUAL
19377: ST_TO_ADDR
19378: GO 19624
19380: LD_INT 30
19382: DOUBLE
19383: EQUAL
19384: IFTRUE 19388
19386: GO 19413
19388: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19389: LD_ADDR_VAR 0 3
19393: PUSH
19394: LD_INT 20
19396: PPUSH
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 321
19406: PUSH
19407: LD_INT 2
19409: EQUAL
19410: ST_TO_ADDR
19411: GO 19624
19413: LD_INT 28
19415: DOUBLE
19416: EQUAL
19417: IFTRUE 19427
19419: LD_INT 21
19421: DOUBLE
19422: EQUAL
19423: IFTRUE 19427
19425: GO 19452
19427: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19428: LD_ADDR_VAR 0 3
19432: PUSH
19433: LD_INT 21
19435: PPUSH
19436: LD_VAR 0 1
19440: PPUSH
19441: CALL_OW 321
19445: PUSH
19446: LD_INT 2
19448: EQUAL
19449: ST_TO_ADDR
19450: GO 19624
19452: LD_INT 16
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19485
19460: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19461: LD_ADDR_VAR 0 3
19465: PUSH
19466: LD_INT 84
19468: PPUSH
19469: LD_VAR 0 1
19473: PPUSH
19474: CALL_OW 321
19478: PUSH
19479: LD_INT 2
19481: EQUAL
19482: ST_TO_ADDR
19483: GO 19624
19485: LD_INT 19
19487: DOUBLE
19488: EQUAL
19489: IFTRUE 19499
19491: LD_INT 23
19493: DOUBLE
19494: EQUAL
19495: IFTRUE 19499
19497: GO 19524
19499: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19500: LD_ADDR_VAR 0 3
19504: PUSH
19505: LD_INT 83
19507: PPUSH
19508: LD_VAR 0 1
19512: PPUSH
19513: CALL_OW 321
19517: PUSH
19518: LD_INT 2
19520: EQUAL
19521: ST_TO_ADDR
19522: GO 19624
19524: LD_INT 17
19526: DOUBLE
19527: EQUAL
19528: IFTRUE 19532
19530: GO 19557
19532: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19533: LD_ADDR_VAR 0 3
19537: PUSH
19538: LD_INT 39
19540: PPUSH
19541: LD_VAR 0 1
19545: PPUSH
19546: CALL_OW 321
19550: PUSH
19551: LD_INT 2
19553: EQUAL
19554: ST_TO_ADDR
19555: GO 19624
19557: LD_INT 18
19559: DOUBLE
19560: EQUAL
19561: IFTRUE 19565
19563: GO 19590
19565: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19566: LD_ADDR_VAR 0 3
19570: PUSH
19571: LD_INT 40
19573: PPUSH
19574: LD_VAR 0 1
19578: PPUSH
19579: CALL_OW 321
19583: PUSH
19584: LD_INT 2
19586: EQUAL
19587: ST_TO_ADDR
19588: GO 19624
19590: LD_INT 27
19592: DOUBLE
19593: EQUAL
19594: IFTRUE 19598
19596: GO 19623
19598: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19599: LD_ADDR_VAR 0 3
19603: PUSH
19604: LD_INT 35
19606: PPUSH
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 321
19616: PUSH
19617: LD_INT 2
19619: EQUAL
19620: ST_TO_ADDR
19621: GO 19624
19623: POP
// end ;
19624: LD_VAR 0 3
19628: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19629: LD_INT 0
19631: PPUSH
19632: PPUSH
19633: PPUSH
19634: PPUSH
19635: PPUSH
19636: PPUSH
19637: PPUSH
19638: PPUSH
19639: PPUSH
19640: PPUSH
19641: PPUSH
// result := false ;
19642: LD_ADDR_VAR 0 6
19646: PUSH
19647: LD_INT 0
19649: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19650: LD_VAR 0 1
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 266
19665: PUSH
19666: LD_INT 0
19668: PUSH
19669: LD_INT 1
19671: PUSH
19672: EMPTY
19673: LIST
19674: LIST
19675: IN
19676: NOT
19677: OR
19678: PUSH
19679: LD_VAR 0 2
19683: NOT
19684: OR
19685: PUSH
19686: LD_VAR 0 5
19690: PUSH
19691: LD_INT 0
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: LD_INT 2
19699: PUSH
19700: LD_INT 3
19702: PUSH
19703: LD_INT 4
19705: PUSH
19706: LD_INT 5
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: LIST
19713: LIST
19714: LIST
19715: LIST
19716: IN
19717: NOT
19718: OR
19719: PUSH
19720: LD_VAR 0 3
19724: PPUSH
19725: LD_VAR 0 4
19729: PPUSH
19730: CALL_OW 488
19734: NOT
19735: OR
19736: IFFALSE 19740
// exit ;
19738: GO 20476
// side := GetSide ( depot ) ;
19740: LD_ADDR_VAR 0 9
19744: PUSH
19745: LD_VAR 0 1
19749: PPUSH
19750: CALL_OW 255
19754: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
19755: LD_VAR 0 9
19759: PPUSH
19760: LD_VAR 0 2
19764: PPUSH
19765: CALL 19253 0 2
19769: NOT
19770: IFFALSE 19774
// exit ;
19772: GO 20476
// pom := GetBase ( depot ) ;
19774: LD_ADDR_VAR 0 10
19778: PUSH
19779: LD_VAR 0 1
19783: PPUSH
19784: CALL_OW 274
19788: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
19789: LD_ADDR_VAR 0 11
19793: PUSH
19794: LD_VAR 0 2
19798: PPUSH
19799: LD_VAR 0 1
19803: PPUSH
19804: CALL_OW 248
19808: PPUSH
19809: CALL_OW 450
19813: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
19814: LD_VAR 0 10
19818: PPUSH
19819: LD_INT 1
19821: PPUSH
19822: CALL_OW 275
19826: PUSH
19827: LD_VAR 0 11
19831: PUSH
19832: LD_INT 1
19834: ARRAY
19835: GREATEREQUAL
19836: PUSH
19837: LD_VAR 0 10
19841: PPUSH
19842: LD_INT 2
19844: PPUSH
19845: CALL_OW 275
19849: PUSH
19850: LD_VAR 0 11
19854: PUSH
19855: LD_INT 2
19857: ARRAY
19858: GREATEREQUAL
19859: AND
19860: PUSH
19861: LD_VAR 0 10
19865: PPUSH
19866: LD_INT 3
19868: PPUSH
19869: CALL_OW 275
19873: PUSH
19874: LD_VAR 0 11
19878: PUSH
19879: LD_INT 3
19881: ARRAY
19882: GREATEREQUAL
19883: AND
19884: NOT
19885: IFFALSE 19889
// exit ;
19887: GO 20476
// if GetBType ( depot ) = b_depot then
19889: LD_VAR 0 1
19893: PPUSH
19894: CALL_OW 266
19898: PUSH
19899: LD_INT 0
19901: EQUAL
19902: IFFALSE 19914
// dist := 28 else
19904: LD_ADDR_VAR 0 14
19908: PUSH
19909: LD_INT 28
19911: ST_TO_ADDR
19912: GO 19922
// dist := 36 ;
19914: LD_ADDR_VAR 0 14
19918: PUSH
19919: LD_INT 36
19921: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
19922: LD_VAR 0 1
19926: PPUSH
19927: LD_VAR 0 3
19931: PPUSH
19932: LD_VAR 0 4
19936: PPUSH
19937: CALL_OW 297
19941: PUSH
19942: LD_VAR 0 14
19946: GREATER
19947: IFFALSE 19951
// exit ;
19949: GO 20476
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
19951: LD_ADDR_VAR 0 12
19955: PUSH
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 3
19965: PPUSH
19966: LD_VAR 0 4
19970: PPUSH
19971: LD_VAR 0 5
19975: PPUSH
19976: LD_VAR 0 1
19980: PPUSH
19981: CALL_OW 248
19985: PPUSH
19986: LD_INT 0
19988: PPUSH
19989: CALL 20481 0 6
19993: ST_TO_ADDR
// if not hexes then
19994: LD_VAR 0 12
19998: NOT
19999: IFFALSE 20003
// exit ;
20001: GO 20476
// hex := GetHexInfo ( x , y ) ;
20003: LD_ADDR_VAR 0 15
20007: PUSH
20008: LD_VAR 0 3
20012: PPUSH
20013: LD_VAR 0 4
20017: PPUSH
20018: CALL_OW 546
20022: ST_TO_ADDR
// if hex [ 1 ] then
20023: LD_VAR 0 15
20027: PUSH
20028: LD_INT 1
20030: ARRAY
20031: IFFALSE 20035
// exit ;
20033: GO 20476
// height := hex [ 2 ] ;
20035: LD_ADDR_VAR 0 13
20039: PUSH
20040: LD_VAR 0 15
20044: PUSH
20045: LD_INT 2
20047: ARRAY
20048: ST_TO_ADDR
// for i = 1 to hexes do
20049: LD_ADDR_VAR 0 7
20053: PUSH
20054: DOUBLE
20055: LD_INT 1
20057: DEC
20058: ST_TO_ADDR
20059: LD_VAR 0 12
20063: PUSH
20064: FOR_TO
20065: IFFALSE 20395
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20067: LD_VAR 0 12
20071: PUSH
20072: LD_VAR 0 7
20076: ARRAY
20077: PUSH
20078: LD_INT 1
20080: ARRAY
20081: PPUSH
20082: LD_VAR 0 12
20086: PUSH
20087: LD_VAR 0 7
20091: ARRAY
20092: PUSH
20093: LD_INT 2
20095: ARRAY
20096: PPUSH
20097: CALL_OW 488
20101: NOT
20102: PUSH
20103: LD_VAR 0 12
20107: PUSH
20108: LD_VAR 0 7
20112: ARRAY
20113: PUSH
20114: LD_INT 1
20116: ARRAY
20117: PPUSH
20118: LD_VAR 0 12
20122: PUSH
20123: LD_VAR 0 7
20127: ARRAY
20128: PUSH
20129: LD_INT 2
20131: ARRAY
20132: PPUSH
20133: CALL_OW 428
20137: PUSH
20138: LD_INT 0
20140: GREATER
20141: OR
20142: PUSH
20143: LD_VAR 0 12
20147: PUSH
20148: LD_VAR 0 7
20152: ARRAY
20153: PUSH
20154: LD_INT 1
20156: ARRAY
20157: PPUSH
20158: LD_VAR 0 12
20162: PUSH
20163: LD_VAR 0 7
20167: ARRAY
20168: PUSH
20169: LD_INT 2
20171: ARRAY
20172: PPUSH
20173: CALL_OW 351
20177: OR
20178: IFFALSE 20184
// exit ;
20180: POP
20181: POP
20182: GO 20476
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20184: LD_ADDR_VAR 0 8
20188: PUSH
20189: LD_VAR 0 12
20193: PUSH
20194: LD_VAR 0 7
20198: ARRAY
20199: PUSH
20200: LD_INT 1
20202: ARRAY
20203: PPUSH
20204: LD_VAR 0 12
20208: PUSH
20209: LD_VAR 0 7
20213: ARRAY
20214: PUSH
20215: LD_INT 2
20217: ARRAY
20218: PPUSH
20219: CALL_OW 546
20223: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20224: LD_VAR 0 8
20228: PUSH
20229: LD_INT 1
20231: ARRAY
20232: PUSH
20233: LD_VAR 0 8
20237: PUSH
20238: LD_INT 2
20240: ARRAY
20241: PUSH
20242: LD_VAR 0 13
20246: PUSH
20247: LD_INT 2
20249: PLUS
20250: GREATER
20251: OR
20252: PUSH
20253: LD_VAR 0 8
20257: PUSH
20258: LD_INT 2
20260: ARRAY
20261: PUSH
20262: LD_VAR 0 13
20266: PUSH
20267: LD_INT 2
20269: MINUS
20270: LESS
20271: OR
20272: PUSH
20273: LD_VAR 0 8
20277: PUSH
20278: LD_INT 3
20280: ARRAY
20281: PUSH
20282: LD_INT 0
20284: PUSH
20285: LD_INT 8
20287: PUSH
20288: LD_INT 9
20290: PUSH
20291: LD_INT 10
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 12
20299: PUSH
20300: LD_INT 13
20302: PUSH
20303: LD_INT 16
20305: PUSH
20306: LD_INT 17
20308: PUSH
20309: LD_INT 18
20311: PUSH
20312: LD_INT 19
20314: PUSH
20315: LD_INT 20
20317: PUSH
20318: LD_INT 21
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: IN
20336: NOT
20337: OR
20338: PUSH
20339: LD_VAR 0 8
20343: PUSH
20344: LD_INT 5
20346: ARRAY
20347: NOT
20348: OR
20349: PUSH
20350: LD_VAR 0 8
20354: PUSH
20355: LD_INT 6
20357: ARRAY
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 7
20367: PUSH
20368: LD_INT 9
20370: PUSH
20371: LD_INT 10
20373: PUSH
20374: LD_INT 11
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: IN
20385: NOT
20386: OR
20387: IFFALSE 20393
// exit ;
20389: POP
20390: POP
20391: GO 20476
// end ;
20393: GO 20064
20395: POP
20396: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20397: LD_VAR 0 9
20401: PPUSH
20402: LD_VAR 0 3
20406: PPUSH
20407: LD_VAR 0 4
20411: PPUSH
20412: LD_INT 20
20414: PPUSH
20415: CALL 12428 0 4
20419: PUSH
20420: LD_INT 4
20422: ARRAY
20423: IFFALSE 20427
// exit ;
20425: GO 20476
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20427: LD_VAR 0 2
20431: PUSH
20432: LD_INT 29
20434: PUSH
20435: LD_INT 30
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: IN
20442: PUSH
20443: LD_VAR 0 3
20447: PPUSH
20448: LD_VAR 0 4
20452: PPUSH
20453: LD_VAR 0 9
20457: PPUSH
20458: CALL_OW 440
20462: NOT
20463: AND
20464: IFFALSE 20468
// exit ;
20466: GO 20476
// result := true ;
20468: LD_ADDR_VAR 0 6
20472: PUSH
20473: LD_INT 1
20475: ST_TO_ADDR
// end ;
20476: LD_VAR 0 6
20480: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20481: LD_INT 0
20483: PPUSH
20484: PPUSH
20485: PPUSH
20486: PPUSH
20487: PPUSH
20488: PPUSH
20489: PPUSH
20490: PPUSH
20491: PPUSH
20492: PPUSH
20493: PPUSH
20494: PPUSH
20495: PPUSH
20496: PPUSH
20497: PPUSH
20498: PPUSH
20499: PPUSH
20500: PPUSH
20501: PPUSH
20502: PPUSH
20503: PPUSH
20504: PPUSH
20505: PPUSH
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
20522: PPUSH
20523: PPUSH
20524: PPUSH
20525: PPUSH
20526: PPUSH
20527: PPUSH
20528: PPUSH
20529: PPUSH
20530: PPUSH
20531: PPUSH
20532: PPUSH
20533: PPUSH
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
20540: PPUSH
// result = [ ] ;
20541: LD_ADDR_VAR 0 7
20545: PUSH
20546: EMPTY
20547: ST_TO_ADDR
// temp_list = [ ] ;
20548: LD_ADDR_VAR 0 9
20552: PUSH
20553: EMPTY
20554: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20555: LD_VAR 0 4
20559: PUSH
20560: LD_INT 0
20562: PUSH
20563: LD_INT 1
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: LD_INT 3
20571: PUSH
20572: LD_INT 4
20574: PUSH
20575: LD_INT 5
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: IN
20586: NOT
20587: PUSH
20588: LD_VAR 0 1
20592: PUSH
20593: LD_INT 0
20595: PUSH
20596: LD_INT 1
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: IN
20603: PUSH
20604: LD_VAR 0 5
20608: PUSH
20609: LD_INT 1
20611: PUSH
20612: LD_INT 2
20614: PUSH
20615: LD_INT 3
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: LIST
20622: IN
20623: NOT
20624: AND
20625: OR
20626: IFFALSE 20630
// exit ;
20628: GO 39021
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20630: LD_VAR 0 1
20634: PUSH
20635: LD_INT 6
20637: PUSH
20638: LD_INT 7
20640: PUSH
20641: LD_INT 8
20643: PUSH
20644: LD_INT 13
20646: PUSH
20647: LD_INT 12
20649: PUSH
20650: LD_INT 15
20652: PUSH
20653: LD_INT 11
20655: PUSH
20656: LD_INT 14
20658: PUSH
20659: LD_INT 10
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: LIST
20666: LIST
20667: LIST
20668: LIST
20669: LIST
20670: LIST
20671: LIST
20672: IN
20673: IFFALSE 20683
// btype = b_lab ;
20675: LD_ADDR_VAR 0 1
20679: PUSH
20680: LD_INT 6
20682: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20683: LD_VAR 0 6
20687: PUSH
20688: LD_INT 0
20690: PUSH
20691: LD_INT 1
20693: PUSH
20694: LD_INT 2
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: IN
20702: NOT
20703: PUSH
20704: LD_VAR 0 1
20708: PUSH
20709: LD_INT 0
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: LD_INT 6
20723: PUSH
20724: LD_INT 36
20726: PUSH
20727: LD_INT 4
20729: PUSH
20730: LD_INT 5
20732: PUSH
20733: LD_INT 31
20735: PUSH
20736: LD_INT 32
20738: PUSH
20739: LD_INT 33
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: IN
20755: NOT
20756: PUSH
20757: LD_VAR 0 6
20761: PUSH
20762: LD_INT 1
20764: EQUAL
20765: AND
20766: OR
20767: PUSH
20768: LD_VAR 0 1
20772: PUSH
20773: LD_INT 2
20775: PUSH
20776: LD_INT 3
20778: PUSH
20779: EMPTY
20780: LIST
20781: LIST
20782: IN
20783: NOT
20784: PUSH
20785: LD_VAR 0 6
20789: PUSH
20790: LD_INT 2
20792: EQUAL
20793: AND
20794: OR
20795: IFFALSE 20805
// mode = 0 ;
20797: LD_ADDR_VAR 0 6
20801: PUSH
20802: LD_INT 0
20804: ST_TO_ADDR
// case mode of 0 :
20805: LD_VAR 0 6
20809: PUSH
20810: LD_INT 0
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 32271
20818: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
20819: LD_ADDR_VAR 0 11
20823: PUSH
20824: LD_INT 0
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 0
20836: PUSH
20837: LD_INT 1
20839: NEG
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: LD_INT 1
20847: PUSH
20848: LD_INT 0
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: PUSH
20855: LD_INT 1
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 0
20867: PUSH
20868: LD_INT 1
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 1
20877: NEG
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 1
20888: NEG
20889: PUSH
20890: LD_INT 1
20892: NEG
20893: PUSH
20894: EMPTY
20895: LIST
20896: LIST
20897: PUSH
20898: LD_INT 1
20900: NEG
20901: PUSH
20902: LD_INT 2
20904: NEG
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 0
20912: PUSH
20913: LD_INT 2
20915: NEG
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: LD_INT 1
20923: PUSH
20924: LD_INT 1
20926: NEG
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 1
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 0
20944: PUSH
20945: LD_INT 2
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 1
20954: NEG
20955: PUSH
20956: LD_INT 1
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 1
20965: PUSH
20966: LD_INT 3
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 0
20975: PUSH
20976: LD_INT 3
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 1
20985: NEG
20986: PUSH
20987: LD_INT 2
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21012: LD_ADDR_VAR 0 12
21016: PUSH
21017: LD_INT 0
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 0
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 1
21040: PUSH
21041: LD_INT 0
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 1
21050: PUSH
21051: LD_INT 1
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: LD_INT 1
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: PUSH
21068: LD_INT 1
21070: NEG
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: NEG
21082: PUSH
21083: LD_INT 1
21085: NEG
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 1
21096: NEG
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 0
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 2
21114: PUSH
21115: LD_INT 1
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: LD_INT 1
21124: NEG
21125: PUSH
21126: LD_INT 1
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: PUSH
21133: LD_INT 2
21135: NEG
21136: PUSH
21137: LD_INT 0
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 2
21146: NEG
21147: PUSH
21148: LD_INT 1
21150: NEG
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: LD_INT 2
21158: NEG
21159: PUSH
21160: LD_INT 1
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 3
21169: NEG
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: PUSH
21178: LD_INT 3
21180: NEG
21181: PUSH
21182: LD_INT 1
21184: NEG
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21208: LD_ADDR_VAR 0 13
21212: PUSH
21213: LD_INT 0
21215: PUSH
21216: LD_INT 0
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 0
21225: PUSH
21226: LD_INT 1
21228: NEG
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 1
21236: PUSH
21237: LD_INT 0
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: LD_INT 1
21246: PUSH
21247: LD_INT 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 0
21256: PUSH
21257: LD_INT 1
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: NEG
21267: PUSH
21268: LD_INT 0
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 1
21281: NEG
21282: PUSH
21283: EMPTY
21284: LIST
21285: LIST
21286: PUSH
21287: LD_INT 1
21289: NEG
21290: PUSH
21291: LD_INT 2
21293: NEG
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: PUSH
21299: LD_INT 2
21301: PUSH
21302: LD_INT 1
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: LD_INT 1
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 2
21331: NEG
21332: PUSH
21333: LD_INT 1
21335: NEG
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 2
21343: NEG
21344: PUSH
21345: LD_INT 2
21347: NEG
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: PUSH
21353: LD_INT 2
21355: NEG
21356: PUSH
21357: LD_INT 3
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 3
21367: NEG
21368: PUSH
21369: LD_INT 2
21371: NEG
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 3
21379: NEG
21380: PUSH
21381: LD_INT 3
21383: NEG
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21407: LD_ADDR_VAR 0 14
21411: PUSH
21412: LD_INT 0
21414: PUSH
21415: LD_INT 0
21417: PUSH
21418: EMPTY
21419: LIST
21420: LIST
21421: PUSH
21422: LD_INT 0
21424: PUSH
21425: LD_INT 1
21427: NEG
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 1
21435: PUSH
21436: LD_INT 0
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: LD_INT 1
21445: PUSH
21446: LD_INT 1
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: LD_INT 0
21455: PUSH
21456: LD_INT 1
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PUSH
21463: LD_INT 1
21465: NEG
21466: PUSH
21467: LD_INT 0
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 1
21476: NEG
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: NEG
21489: PUSH
21490: LD_INT 2
21492: NEG
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: LD_INT 0
21500: PUSH
21501: LD_INT 2
21503: NEG
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: LD_INT 1
21514: NEG
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PUSH
21520: LD_INT 1
21522: PUSH
21523: LD_INT 2
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 0
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_INT 1
21542: NEG
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 1
21553: NEG
21554: PUSH
21555: LD_INT 3
21557: NEG
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 0
21565: PUSH
21566: LD_INT 3
21568: NEG
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 1
21576: PUSH
21577: LD_INT 2
21579: NEG
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21603: LD_ADDR_VAR 0 15
21607: PUSH
21608: LD_INT 0
21610: PUSH
21611: LD_INT 0
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 0
21620: PUSH
21621: LD_INT 1
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 1
21631: PUSH
21632: LD_INT 0
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: PUSH
21639: LD_INT 1
21641: PUSH
21642: LD_INT 1
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: LD_INT 0
21651: PUSH
21652: LD_INT 1
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: PUSH
21659: LD_INT 1
21661: NEG
21662: PUSH
21663: LD_INT 0
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 1
21672: NEG
21673: PUSH
21674: LD_INT 1
21676: NEG
21677: PUSH
21678: EMPTY
21679: LIST
21680: LIST
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: LD_INT 1
21687: NEG
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 2
21695: PUSH
21696: LD_INT 0
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 1
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: LD_INT 1
21715: NEG
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 2
21726: NEG
21727: PUSH
21728: LD_INT 0
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: LD_INT 2
21737: NEG
21738: PUSH
21739: LD_INT 1
21741: NEG
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: LD_INT 1
21752: NEG
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 3
21760: PUSH
21761: LD_INT 0
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: LD_INT 1
21773: PUSH
21774: EMPTY
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21796: LD_ADDR_VAR 0 16
21800: PUSH
21801: LD_INT 0
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 1
21816: NEG
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: PUSH
21822: LD_INT 1
21824: PUSH
21825: LD_INT 0
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 1
21834: PUSH
21835: LD_INT 1
21837: PUSH
21838: EMPTY
21839: LIST
21840: LIST
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 1
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: PUSH
21852: LD_INT 1
21854: NEG
21855: PUSH
21856: LD_INT 0
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: PUSH
21863: LD_INT 1
21865: NEG
21866: PUSH
21867: LD_INT 1
21869: NEG
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: LD_INT 1
21877: NEG
21878: PUSH
21879: LD_INT 2
21881: NEG
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 2
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 2
21899: PUSH
21900: LD_INT 2
21902: PUSH
21903: EMPTY
21904: LIST
21905: LIST
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: LD_INT 2
21912: PUSH
21913: EMPTY
21914: LIST
21915: LIST
21916: PUSH
21917: LD_INT 2
21919: NEG
21920: PUSH
21921: LD_INT 1
21923: NEG
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 2
21931: NEG
21932: PUSH
21933: LD_INT 2
21935: NEG
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 3
21943: PUSH
21944: LD_INT 2
21946: PUSH
21947: EMPTY
21948: LIST
21949: LIST
21950: PUSH
21951: LD_INT 3
21953: PUSH
21954: LD_INT 3
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
21989: LD_ADDR_VAR 0 17
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: LD_INT 0
22006: PUSH
22007: LD_INT 1
22009: NEG
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: PUSH
22015: LD_INT 1
22017: PUSH
22018: LD_INT 0
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 1
22027: PUSH
22028: LD_INT 1
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 0
22037: PUSH
22038: LD_INT 1
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 1
22047: NEG
22048: PUSH
22049: LD_INT 0
22051: PUSH
22052: EMPTY
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 1
22058: NEG
22059: PUSH
22060: LD_INT 1
22062: NEG
22063: PUSH
22064: EMPTY
22065: LIST
22066: LIST
22067: PUSH
22068: LD_INT 1
22070: NEG
22071: PUSH
22072: LD_INT 2
22074: NEG
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 0
22082: PUSH
22083: LD_INT 2
22085: NEG
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: LD_INT 1
22096: NEG
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: LD_INT 0
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 2
22114: PUSH
22115: LD_INT 1
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 2
22124: PUSH
22125: LD_INT 2
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 1
22134: PUSH
22135: LD_INT 2
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: LD_INT 0
22144: PUSH
22145: LD_INT 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 1
22154: NEG
22155: PUSH
22156: LD_INT 1
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 2
22165: NEG
22166: PUSH
22167: LD_INT 0
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 2
22176: NEG
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 2
22188: NEG
22189: PUSH
22190: LD_INT 2
22192: NEG
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: LIST
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: LIST
22218: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22219: LD_ADDR_VAR 0 18
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 0
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 1
22239: NEG
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 1
22247: PUSH
22248: LD_INT 0
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: LD_INT 1
22260: PUSH
22261: EMPTY
22262: LIST
22263: LIST
22264: PUSH
22265: LD_INT 0
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 1
22277: NEG
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 1
22288: NEG
22289: PUSH
22290: LD_INT 1
22292: NEG
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 1
22300: NEG
22301: PUSH
22302: LD_INT 2
22304: NEG
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: LD_INT 2
22315: NEG
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 1
22323: PUSH
22324: LD_INT 1
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 2
22334: PUSH
22335: LD_INT 0
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PUSH
22342: LD_INT 2
22344: PUSH
22345: LD_INT 1
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 1
22384: NEG
22385: PUSH
22386: LD_INT 1
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: PUSH
22393: LD_INT 2
22395: NEG
22396: PUSH
22397: LD_INT 0
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 2
22406: NEG
22407: PUSH
22408: LD_INT 1
22410: NEG
22411: PUSH
22412: EMPTY
22413: LIST
22414: LIST
22415: PUSH
22416: LD_INT 2
22418: NEG
22419: PUSH
22420: LD_INT 2
22422: NEG
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: LIST
22432: LIST
22433: LIST
22434: LIST
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: LIST
22445: LIST
22446: LIST
22447: LIST
22448: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22449: LD_ADDR_VAR 0 19
22453: PUSH
22454: LD_INT 0
22456: PUSH
22457: LD_INT 0
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: LD_INT 0
22466: PUSH
22467: LD_INT 1
22469: NEG
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 1
22477: PUSH
22478: LD_INT 0
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: LD_INT 1
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: LD_INT 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 1
22507: NEG
22508: PUSH
22509: LD_INT 0
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 1
22518: NEG
22519: PUSH
22520: LD_INT 1
22522: NEG
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: LD_INT 1
22530: NEG
22531: PUSH
22532: LD_INT 2
22534: NEG
22535: PUSH
22536: EMPTY
22537: LIST
22538: LIST
22539: PUSH
22540: LD_INT 0
22542: PUSH
22543: LD_INT 2
22545: NEG
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 1
22553: PUSH
22554: LD_INT 1
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 2
22564: PUSH
22565: LD_INT 0
22567: PUSH
22568: EMPTY
22569: LIST
22570: LIST
22571: PUSH
22572: LD_INT 2
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 2
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: LD_INT 2
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: LD_INT 0
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: EMPTY
22609: LIST
22610: LIST
22611: PUSH
22612: LD_INT 1
22614: NEG
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: NEG
22626: PUSH
22627: LD_INT 0
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 2
22636: NEG
22637: PUSH
22638: LD_INT 1
22640: NEG
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: LD_INT 2
22648: NEG
22649: PUSH
22650: LD_INT 2
22652: NEG
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22679: LD_ADDR_VAR 0 20
22683: PUSH
22684: LD_INT 0
22686: PUSH
22687: LD_INT 0
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PUSH
22694: LD_INT 0
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 1
22707: PUSH
22708: LD_INT 0
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 1
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 0
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 1
22737: NEG
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 1
22748: NEG
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 1
22760: NEG
22761: PUSH
22762: LD_INT 2
22764: NEG
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 0
22772: PUSH
22773: LD_INT 2
22775: NEG
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 1
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 2
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: LD_INT 2
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: LD_INT 1
22824: PUSH
22825: LD_INT 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 0
22834: PUSH
22835: LD_INT 2
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 1
22844: NEG
22845: PUSH
22846: LD_INT 1
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 2
22855: NEG
22856: PUSH
22857: LD_INT 0
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 2
22866: NEG
22867: PUSH
22868: LD_INT 1
22870: NEG
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 2
22878: NEG
22879: PUSH
22880: LD_INT 2
22882: NEG
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: EMPTY
22889: LIST
22890: LIST
22891: LIST
22892: LIST
22893: LIST
22894: LIST
22895: LIST
22896: LIST
22897: LIST
22898: LIST
22899: LIST
22900: LIST
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22909: LD_ADDR_VAR 0 21
22913: PUSH
22914: LD_INT 0
22916: PUSH
22917: LD_INT 0
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 0
22926: PUSH
22927: LD_INT 1
22929: NEG
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 1
22937: PUSH
22938: LD_INT 0
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PUSH
22948: LD_INT 1
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 0
22957: PUSH
22958: LD_INT 1
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 1
22967: NEG
22968: PUSH
22969: LD_INT 0
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 1
22978: NEG
22979: PUSH
22980: LD_INT 1
22982: NEG
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: PUSH
22988: LD_INT 1
22990: NEG
22991: PUSH
22992: LD_INT 2
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 0
23002: PUSH
23003: LD_INT 2
23005: NEG
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 1
23013: PUSH
23014: LD_INT 1
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 2
23024: PUSH
23025: LD_INT 0
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 1
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: LD_INT 2
23044: PUSH
23045: LD_INT 2
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 1
23054: PUSH
23055: LD_INT 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 0
23064: PUSH
23065: LD_INT 2
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: LD_INT 1
23074: NEG
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 2
23085: NEG
23086: PUSH
23087: LD_INT 0
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 2
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: NEG
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 2
23108: NEG
23109: PUSH
23110: LD_INT 2
23112: NEG
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23139: LD_ADDR_VAR 0 22
23143: PUSH
23144: LD_INT 0
23146: PUSH
23147: LD_INT 0
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: LD_INT 1
23159: NEG
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: LD_INT 1
23167: PUSH
23168: LD_INT 0
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 1
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 0
23187: PUSH
23188: LD_INT 1
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 1
23197: NEG
23198: PUSH
23199: LD_INT 0
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 1
23208: NEG
23209: PUSH
23210: LD_INT 1
23212: NEG
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 1
23220: NEG
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 2
23235: NEG
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: LD_INT 1
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: EMPTY
23259: LIST
23260: LIST
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 1
23267: PUSH
23268: EMPTY
23269: LIST
23270: LIST
23271: PUSH
23272: LD_INT 2
23274: PUSH
23275: LD_INT 2
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: LD_INT 2
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 1
23304: NEG
23305: PUSH
23306: LD_INT 1
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 2
23315: NEG
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 2
23326: NEG
23327: PUSH
23328: LD_INT 1
23330: NEG
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: LD_INT 2
23338: NEG
23339: PUSH
23340: LD_INT 2
23342: NEG
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23369: LD_ADDR_VAR 0 23
23373: PUSH
23374: LD_INT 0
23376: PUSH
23377: LD_INT 0
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 1
23389: NEG
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 1
23397: PUSH
23398: LD_INT 0
23400: PUSH
23401: EMPTY
23402: LIST
23403: LIST
23404: PUSH
23405: LD_INT 1
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 0
23417: PUSH
23418: LD_INT 1
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: LD_INT 1
23427: NEG
23428: PUSH
23429: LD_INT 0
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 1
23438: NEG
23439: PUSH
23440: LD_INT 1
23442: NEG
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: LD_INT 1
23450: NEG
23451: PUSH
23452: LD_INT 2
23454: NEG
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: PUSH
23460: LD_INT 0
23462: PUSH
23463: LD_INT 2
23465: NEG
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 1
23473: PUSH
23474: LD_INT 1
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 2
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: LD_INT 1
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PUSH
23502: LD_INT 2
23504: PUSH
23505: LD_INT 2
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: PUSH
23512: LD_INT 1
23514: PUSH
23515: LD_INT 2
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PUSH
23522: LD_INT 0
23524: PUSH
23525: LD_INT 2
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: PUSH
23532: LD_INT 1
23534: NEG
23535: PUSH
23536: LD_INT 1
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: PUSH
23543: LD_INT 2
23545: NEG
23546: PUSH
23547: LD_INT 0
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 2
23556: NEG
23557: PUSH
23558: LD_INT 1
23560: NEG
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 2
23568: NEG
23569: PUSH
23570: LD_INT 2
23572: NEG
23573: PUSH
23574: EMPTY
23575: LIST
23576: LIST
23577: PUSH
23578: LD_INT 2
23580: NEG
23581: PUSH
23582: LD_INT 3
23584: NEG
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 1
23592: NEG
23593: PUSH
23594: LD_INT 3
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 2
23607: NEG
23608: PUSH
23609: EMPTY
23610: LIST
23611: LIST
23612: PUSH
23613: LD_INT 2
23615: PUSH
23616: LD_INT 1
23618: NEG
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: EMPTY
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23649: LD_ADDR_VAR 0 24
23653: PUSH
23654: LD_INT 0
23656: PUSH
23657: LD_INT 0
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: LD_INT 1
23669: NEG
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: LD_INT 0
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 1
23687: PUSH
23688: LD_INT 1
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 0
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: LD_INT 1
23707: NEG
23708: PUSH
23709: LD_INT 0
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: LD_INT 1
23718: NEG
23719: PUSH
23720: LD_INT 1
23722: NEG
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: LD_INT 1
23730: NEG
23731: PUSH
23732: LD_INT 2
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 0
23742: PUSH
23743: LD_INT 2
23745: NEG
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 1
23756: NEG
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: LD_INT 0
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: LD_INT 2
23807: PUSH
23808: EMPTY
23809: LIST
23810: LIST
23811: PUSH
23812: LD_INT 1
23814: NEG
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 2
23825: NEG
23826: PUSH
23827: LD_INT 0
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 2
23836: NEG
23837: PUSH
23838: LD_INT 1
23840: NEG
23841: PUSH
23842: EMPTY
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 2
23848: NEG
23849: PUSH
23850: LD_INT 2
23852: NEG
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: PUSH
23858: LD_INT 1
23860: PUSH
23861: LD_INT 2
23863: NEG
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PUSH
23880: LD_INT 3
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 3
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
23925: LD_ADDR_VAR 0 25
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: LD_INT 0
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 1
23945: NEG
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 1
23953: PUSH
23954: LD_INT 0
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: LD_INT 1
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 0
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 1
23983: NEG
23984: PUSH
23985: LD_INT 0
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 1
23994: NEG
23995: PUSH
23996: LD_INT 1
23998: NEG
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 1
24006: NEG
24007: PUSH
24008: LD_INT 2
24010: NEG
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: LD_INT 2
24021: NEG
24022: PUSH
24023: EMPTY
24024: LIST
24025: LIST
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: LD_INT 1
24032: NEG
24033: PUSH
24034: EMPTY
24035: LIST
24036: LIST
24037: PUSH
24038: LD_INT 2
24040: PUSH
24041: LD_INT 0
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PUSH
24048: LD_INT 2
24050: PUSH
24051: LD_INT 1
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 2
24060: PUSH
24061: LD_INT 2
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: LD_INT 2
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: PUSH
24078: LD_INT 0
24080: PUSH
24081: LD_INT 2
24083: PUSH
24084: EMPTY
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: NEG
24091: PUSH
24092: LD_INT 1
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: LD_INT 2
24101: NEG
24102: PUSH
24103: LD_INT 0
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: LD_INT 1
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 2
24124: NEG
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 3
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 2
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 1
24166: PUSH
24167: LD_INT 3
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24199: LD_ADDR_VAR 0 26
24203: PUSH
24204: LD_INT 0
24206: PUSH
24207: LD_INT 0
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: LD_INT 0
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 0
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: PUSH
24235: LD_INT 1
24237: PUSH
24238: LD_INT 1
24240: PUSH
24241: EMPTY
24242: LIST
24243: LIST
24244: PUSH
24245: LD_INT 0
24247: PUSH
24248: LD_INT 1
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 1
24257: NEG
24258: PUSH
24259: LD_INT 0
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: NEG
24269: PUSH
24270: LD_INT 1
24272: NEG
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 1
24280: NEG
24281: PUSH
24282: LD_INT 2
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: LD_INT 2
24295: NEG
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: LD_INT 1
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 2
24314: PUSH
24315: LD_INT 0
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 2
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 2
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: LD_INT 1
24344: PUSH
24345: LD_INT 2
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: LD_INT 0
24354: PUSH
24355: LD_INT 2
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 1
24364: NEG
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: EMPTY
24370: LIST
24371: LIST
24372: PUSH
24373: LD_INT 2
24375: NEG
24376: PUSH
24377: LD_INT 0
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: PUSH
24384: LD_INT 2
24386: NEG
24387: PUSH
24388: LD_INT 1
24390: NEG
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 2
24398: NEG
24399: PUSH
24400: LD_INT 2
24402: NEG
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PUSH
24408: LD_INT 2
24410: PUSH
24411: LD_INT 3
24413: PUSH
24414: EMPTY
24415: LIST
24416: LIST
24417: PUSH
24418: LD_INT 1
24420: PUSH
24421: LD_INT 3
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 1
24430: NEG
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 2
24441: NEG
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: EMPTY
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24475: LD_ADDR_VAR 0 27
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: LD_INT 0
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: PUSH
24490: LD_INT 0
24492: PUSH
24493: LD_INT 1
24495: NEG
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 1
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 0
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 1
24533: NEG
24534: PUSH
24535: LD_INT 0
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 1
24544: NEG
24545: PUSH
24546: LD_INT 1
24548: NEG
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 1
24556: NEG
24557: PUSH
24558: LD_INT 2
24560: NEG
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: PUSH
24566: LD_INT 0
24568: PUSH
24569: LD_INT 2
24571: NEG
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: LD_INT 1
24582: NEG
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: LD_INT 0
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PUSH
24598: LD_INT 2
24600: PUSH
24601: LD_INT 1
24603: PUSH
24604: EMPTY
24605: LIST
24606: LIST
24607: PUSH
24608: LD_INT 2
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: LD_INT 2
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PUSH
24628: LD_INT 0
24630: PUSH
24631: LD_INT 2
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: PUSH
24638: LD_INT 1
24640: NEG
24641: PUSH
24642: LD_INT 1
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: PUSH
24649: LD_INT 2
24651: NEG
24652: PUSH
24653: LD_INT 0
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: NEG
24663: PUSH
24664: LD_INT 1
24666: NEG
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 2
24674: NEG
24675: PUSH
24676: LD_INT 2
24678: NEG
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: PUSH
24688: LD_INT 2
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 2
24697: NEG
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 3
24708: NEG
24709: PUSH
24710: LD_INT 1
24712: NEG
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 3
24720: NEG
24721: PUSH
24722: LD_INT 2
24724: NEG
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24755: LD_ADDR_VAR 0 28
24759: PUSH
24760: LD_INT 0
24762: PUSH
24763: LD_INT 0
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 0
24772: PUSH
24773: LD_INT 1
24775: NEG
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 1
24783: PUSH
24784: LD_INT 0
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 1
24793: PUSH
24794: LD_INT 1
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 0
24803: PUSH
24804: LD_INT 1
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 1
24813: NEG
24814: PUSH
24815: LD_INT 0
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 1
24824: NEG
24825: PUSH
24826: LD_INT 1
24828: NEG
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PUSH
24838: LD_INT 2
24840: NEG
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: PUSH
24846: LD_INT 0
24848: PUSH
24849: LD_INT 2
24851: NEG
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 1
24859: PUSH
24860: LD_INT 1
24862: NEG
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 2
24870: PUSH
24871: LD_INT 0
24873: PUSH
24874: EMPTY
24875: LIST
24876: LIST
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 2
24890: PUSH
24891: LD_INT 2
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: LD_INT 1
24900: PUSH
24901: LD_INT 2
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: PUSH
24908: LD_INT 0
24910: PUSH
24911: LD_INT 2
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: NEG
24921: PUSH
24922: LD_INT 1
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 2
24931: NEG
24932: PUSH
24933: LD_INT 0
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 2
24942: NEG
24943: PUSH
24944: LD_INT 1
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 2
24954: NEG
24955: PUSH
24956: LD_INT 2
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 2
24966: NEG
24967: PUSH
24968: LD_INT 3
24970: NEG
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: PUSH
24976: LD_INT 1
24978: NEG
24979: PUSH
24980: LD_INT 3
24982: NEG
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: PUSH
24988: LD_INT 3
24990: NEG
24991: PUSH
24992: LD_INT 1
24994: NEG
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 3
25002: NEG
25003: PUSH
25004: LD_INT 2
25006: NEG
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25037: LD_ADDR_VAR 0 29
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 0
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: EMPTY
25070: LIST
25071: LIST
25072: PUSH
25073: LD_INT 1
25075: PUSH
25076: LD_INT 1
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: LD_INT 1
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PUSH
25093: LD_INT 1
25095: NEG
25096: PUSH
25097: LD_INT 0
25099: PUSH
25100: EMPTY
25101: LIST
25102: LIST
25103: PUSH
25104: LD_INT 1
25106: NEG
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PUSH
25116: LD_INT 1
25118: NEG
25119: PUSH
25120: LD_INT 2
25122: NEG
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 0
25130: PUSH
25131: LD_INT 2
25133: NEG
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 1
25144: NEG
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: PUSH
25153: LD_INT 0
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 2
25162: PUSH
25163: LD_INT 1
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: LD_INT 2
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: PUSH
25180: LD_INT 0
25182: PUSH
25183: LD_INT 2
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: PUSH
25190: LD_INT 1
25192: NEG
25193: PUSH
25194: LD_INT 1
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: PUSH
25201: LD_INT 2
25203: NEG
25204: PUSH
25205: LD_INT 1
25207: NEG
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: PUSH
25213: LD_INT 2
25215: NEG
25216: PUSH
25217: LD_INT 2
25219: NEG
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: LD_INT 3
25231: NEG
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 2
25239: PUSH
25240: LD_INT 1
25242: NEG
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 3
25250: PUSH
25251: LD_INT 1
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 1
25260: PUSH
25261: LD_INT 3
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 1
25270: NEG
25271: PUSH
25272: LD_INT 2
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 3
25281: NEG
25282: PUSH
25283: LD_INT 2
25285: NEG
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25316: LD_ADDR_VAR 0 30
25320: PUSH
25321: LD_INT 0
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 1
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 1
25344: PUSH
25345: LD_INT 0
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 1
25354: PUSH
25355: LD_INT 1
25357: PUSH
25358: EMPTY
25359: LIST
25360: LIST
25361: PUSH
25362: LD_INT 0
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 1
25374: NEG
25375: PUSH
25376: LD_INT 0
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: NEG
25386: PUSH
25387: LD_INT 1
25389: NEG
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: LD_INT 2
25401: NEG
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 0
25409: PUSH
25410: LD_INT 2
25412: NEG
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 1
25420: PUSH
25421: LD_INT 1
25423: NEG
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PUSH
25429: LD_INT 2
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 2
25441: PUSH
25442: LD_INT 1
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: LD_INT 2
25451: PUSH
25452: LD_INT 2
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PUSH
25459: LD_INT 1
25461: PUSH
25462: LD_INT 2
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: PUSH
25469: LD_INT 1
25471: NEG
25472: PUSH
25473: LD_INT 1
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 2
25482: NEG
25483: PUSH
25484: LD_INT 0
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 2
25493: NEG
25494: PUSH
25495: LD_INT 1
25497: NEG
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: LD_INT 3
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 2
25520: NEG
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: PUSH
25526: LD_INT 3
25528: PUSH
25529: LD_INT 2
25531: PUSH
25532: EMPTY
25533: LIST
25534: LIST
25535: PUSH
25536: LD_INT 2
25538: PUSH
25539: LD_INT 3
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: NEG
25549: PUSH
25550: LD_INT 1
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 3
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25594: LD_ADDR_VAR 0 31
25598: PUSH
25599: LD_INT 0
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: LD_INT 0
25611: PUSH
25612: LD_INT 1
25614: NEG
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: PUSH
25620: LD_INT 1
25622: PUSH
25623: LD_INT 0
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 0
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 1
25652: NEG
25653: PUSH
25654: LD_INT 0
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 1
25663: NEG
25664: PUSH
25665: LD_INT 1
25667: NEG
25668: PUSH
25669: EMPTY
25670: LIST
25671: LIST
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: LD_INT 2
25679: NEG
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 1
25687: PUSH
25688: LD_INT 1
25690: NEG
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 2
25698: PUSH
25699: LD_INT 0
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: LD_INT 2
25708: PUSH
25709: LD_INT 1
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: LD_INT 2
25718: PUSH
25719: LD_INT 2
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PUSH
25726: LD_INT 1
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: LD_INT 2
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 1
25748: NEG
25749: PUSH
25750: LD_INT 1
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 2
25759: NEG
25760: PUSH
25761: LD_INT 1
25763: NEG
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PUSH
25769: LD_INT 2
25771: NEG
25772: PUSH
25773: LD_INT 2
25775: NEG
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 2
25783: NEG
25784: PUSH
25785: LD_INT 3
25787: NEG
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 1
25798: NEG
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 3
25806: PUSH
25807: LD_INT 1
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 1
25816: PUSH
25817: LD_INT 3
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 1
25826: NEG
25827: PUSH
25828: LD_INT 2
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 3
25837: NEG
25838: PUSH
25839: LD_INT 2
25841: NEG
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: LIST
25853: LIST
25854: LIST
25855: LIST
25856: LIST
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: LIST
25870: LIST
25871: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25872: LD_ADDR_VAR 0 32
25876: PUSH
25877: LD_INT 0
25879: PUSH
25880: LD_INT 0
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 0
25889: PUSH
25890: LD_INT 1
25892: NEG
25893: PUSH
25894: EMPTY
25895: LIST
25896: LIST
25897: PUSH
25898: LD_INT 1
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 1
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: LD_INT 1
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: LD_INT 1
25930: NEG
25931: PUSH
25932: LD_INT 0
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: PUSH
25939: LD_INT 1
25941: NEG
25942: PUSH
25943: LD_INT 1
25945: NEG
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: LD_INT 2
25957: NEG
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 2
25968: NEG
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: LD_INT 1
25979: NEG
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 2
25987: PUSH
25988: LD_INT 1
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 2
25997: PUSH
25998: LD_INT 2
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PUSH
26005: LD_INT 1
26007: PUSH
26008: LD_INT 2
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: LD_INT 0
26017: PUSH
26018: LD_INT 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 1
26027: NEG
26028: PUSH
26029: LD_INT 1
26031: PUSH
26032: EMPTY
26033: LIST
26034: LIST
26035: PUSH
26036: LD_INT 2
26038: NEG
26039: PUSH
26040: LD_INT 0
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: LD_INT 2
26049: NEG
26050: PUSH
26051: LD_INT 1
26053: NEG
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 3
26065: NEG
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 1
26073: PUSH
26074: LD_INT 2
26076: NEG
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: LD_INT 3
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PUSH
26102: LD_INT 2
26104: NEG
26105: PUSH
26106: LD_INT 1
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: PUSH
26113: LD_INT 3
26115: NEG
26116: PUSH
26117: LD_INT 1
26119: NEG
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26150: LD_ADDR_VAR 0 33
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 0
26167: PUSH
26168: LD_INT 1
26170: NEG
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: LD_INT 0
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 1
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 0
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 1
26208: NEG
26209: PUSH
26210: LD_INT 0
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 1
26219: NEG
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: LD_INT 2
26235: NEG
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: LD_INT 1
26246: NEG
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: LD_INT 2
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: LD_INT 2
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 0
26284: PUSH
26285: LD_INT 2
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: PUSH
26292: LD_INT 1
26294: NEG
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: EMPTY
26300: LIST
26301: LIST
26302: PUSH
26303: LD_INT 2
26305: NEG
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: EMPTY
26311: LIST
26312: LIST
26313: PUSH
26314: LD_INT 2
26316: NEG
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: LD_INT 2
26332: NEG
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: NEG
26341: PUSH
26342: LD_INT 3
26344: NEG
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: PUSH
26353: LD_INT 1
26355: NEG
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 3
26363: PUSH
26364: LD_INT 1
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 1
26383: NEG
26384: PUSH
26385: LD_INT 2
26387: PUSH
26388: EMPTY
26389: LIST
26390: LIST
26391: PUSH
26392: LD_INT 3
26394: NEG
26395: PUSH
26396: LD_INT 2
26398: NEG
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26429: LD_ADDR_VAR 0 34
26433: PUSH
26434: LD_INT 0
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 0
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: LD_INT 0
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 1
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 0
26477: PUSH
26478: LD_INT 1
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 0
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: NEG
26511: PUSH
26512: LD_INT 2
26514: NEG
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 2
26525: NEG
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: LD_INT 1
26536: NEG
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: LD_INT 1
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: PUSH
26562: LD_INT 1
26564: PUSH
26565: LD_INT 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: EMPTY
26580: LIST
26581: LIST
26582: PUSH
26583: LD_INT 2
26585: NEG
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 2
26596: NEG
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 2
26608: NEG
26609: PUSH
26610: LD_INT 2
26612: NEG
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 1
26620: NEG
26621: PUSH
26622: LD_INT 3
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 1
26632: PUSH
26633: LD_INT 2
26635: NEG
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: LD_INT 3
26643: PUSH
26644: LD_INT 2
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: LD_INT 3
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: LD_INT 2
26663: NEG
26664: PUSH
26665: LD_INT 1
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 3
26674: NEG
26675: PUSH
26676: LD_INT 1
26678: NEG
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: LIST
26708: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26709: LD_ADDR_VAR 0 35
26713: PUSH
26714: LD_INT 0
26716: PUSH
26717: LD_INT 0
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: LD_INT 0
26726: PUSH
26727: LD_INT 1
26729: NEG
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 1
26737: PUSH
26738: LD_INT 0
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: PUSH
26745: LD_INT 1
26747: PUSH
26748: LD_INT 1
26750: PUSH
26751: EMPTY
26752: LIST
26753: LIST
26754: PUSH
26755: LD_INT 0
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: NEG
26768: PUSH
26769: LD_INT 0
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 1
26778: NEG
26779: PUSH
26780: LD_INT 1
26782: NEG
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 2
26800: NEG
26801: PUSH
26802: LD_INT 1
26804: NEG
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
26821: LD_ADDR_VAR 0 36
26825: PUSH
26826: LD_INT 0
26828: PUSH
26829: LD_INT 0
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 1
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 0
26852: PUSH
26853: EMPTY
26854: LIST
26855: LIST
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: LD_INT 1
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 0
26869: PUSH
26870: LD_INT 1
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: PUSH
26877: LD_INT 1
26879: NEG
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: NEG
26891: PUSH
26892: LD_INT 1
26894: NEG
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: LD_INT 2
26906: NEG
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: LD_INT 2
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: EMPTY
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
26933: LD_ADDR_VAR 0 37
26937: PUSH
26938: LD_INT 0
26940: PUSH
26941: LD_INT 0
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 0
26950: PUSH
26951: LD_INT 1
26953: NEG
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 1
26961: PUSH
26962: LD_INT 0
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 1
26971: PUSH
26972: LD_INT 1
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 0
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: NEG
26992: PUSH
26993: LD_INT 0
26995: PUSH
26996: EMPTY
26997: LIST
26998: LIST
26999: PUSH
27000: LD_INT 1
27002: NEG
27003: PUSH
27004: LD_INT 1
27006: NEG
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: LD_INT 1
27017: NEG
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: LD_INT 1
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27045: LD_ADDR_VAR 0 38
27049: PUSH
27050: LD_INT 0
27052: PUSH
27053: LD_INT 0
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: LD_INT 1
27065: NEG
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 1
27073: PUSH
27074: LD_INT 0
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: PUSH
27081: LD_INT 1
27083: PUSH
27084: LD_INT 1
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: LD_INT 1
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 1
27103: NEG
27104: PUSH
27105: LD_INT 0
27107: PUSH
27108: EMPTY
27109: LIST
27110: LIST
27111: PUSH
27112: LD_INT 1
27114: NEG
27115: PUSH
27116: LD_INT 1
27118: NEG
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 2
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 2
27136: NEG
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27157: LD_ADDR_VAR 0 39
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: LD_INT 0
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: LD_INT 1
27177: NEG
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PUSH
27183: LD_INT 1
27185: PUSH
27186: LD_INT 0
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: PUSH
27193: LD_INT 1
27195: PUSH
27196: LD_INT 1
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 1
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: NEG
27216: PUSH
27217: LD_INT 0
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: NEG
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 1
27238: NEG
27239: PUSH
27240: LD_INT 2
27242: NEG
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: LD_INT 2
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27269: LD_ADDR_VAR 0 40
27273: PUSH
27274: LD_INT 0
27276: PUSH
27277: LD_INT 0
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 0
27286: PUSH
27287: LD_INT 1
27289: NEG
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 1
27297: PUSH
27298: LD_INT 0
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: LD_INT 1
27307: PUSH
27308: LD_INT 1
27310: PUSH
27311: EMPTY
27312: LIST
27313: LIST
27314: PUSH
27315: LD_INT 0
27317: PUSH
27318: LD_INT 1
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: PUSH
27325: LD_INT 1
27327: NEG
27328: PUSH
27329: LD_INT 0
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 1
27338: NEG
27339: PUSH
27340: LD_INT 1
27342: NEG
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 1
27361: NEG
27362: PUSH
27363: LD_INT 1
27365: PUSH
27366: EMPTY
27367: LIST
27368: LIST
27369: PUSH
27370: EMPTY
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27381: LD_ADDR_VAR 0 41
27385: PUSH
27386: LD_INT 0
27388: PUSH
27389: LD_INT 0
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: PUSH
27396: LD_INT 0
27398: PUSH
27399: LD_INT 1
27401: NEG
27402: PUSH
27403: EMPTY
27404: LIST
27405: LIST
27406: PUSH
27407: LD_INT 1
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 1
27419: PUSH
27420: LD_INT 1
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: LD_INT 1
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: PUSH
27437: LD_INT 1
27439: NEG
27440: PUSH
27441: LD_INT 0
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: PUSH
27448: LD_INT 1
27450: NEG
27451: PUSH
27452: LD_INT 1
27454: NEG
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 1
27462: NEG
27463: PUSH
27464: LD_INT 2
27466: NEG
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: LD_INT 1
27474: PUSH
27475: LD_INT 1
27477: NEG
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: PUSH
27483: LD_INT 2
27485: PUSH
27486: LD_INT 0
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PUSH
27493: LD_INT 2
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: LD_INT 2
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: PUSH
27513: LD_INT 1
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: PUSH
27523: LD_INT 1
27525: NEG
27526: PUSH
27527: LD_INT 1
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 2
27536: NEG
27537: PUSH
27538: LD_INT 0
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: PUSH
27545: LD_INT 2
27547: NEG
27548: PUSH
27549: LD_INT 1
27551: NEG
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 2
27559: NEG
27560: PUSH
27561: LD_INT 2
27563: NEG
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 2
27571: NEG
27572: PUSH
27573: LD_INT 3
27575: NEG
27576: PUSH
27577: EMPTY
27578: LIST
27579: LIST
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: LD_INT 1
27586: NEG
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: PUSH
27592: LD_INT 3
27594: PUSH
27595: LD_INT 0
27597: PUSH
27598: EMPTY
27599: LIST
27600: LIST
27601: PUSH
27602: LD_INT 3
27604: PUSH
27605: LD_INT 1
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 3
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: LD_INT 3
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: PUSH
27635: LD_INT 3
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 2
27644: NEG
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: LD_INT 3
27655: NEG
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 3
27666: NEG
27667: PUSH
27668: LD_INT 1
27670: NEG
27671: PUSH
27672: EMPTY
27673: LIST
27674: LIST
27675: PUSH
27676: LD_INT 3
27678: NEG
27679: PUSH
27680: LD_INT 2
27682: NEG
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: PUSH
27688: LD_INT 3
27690: NEG
27691: PUSH
27692: LD_INT 3
27694: NEG
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27731: LD_ADDR_VAR 0 42
27735: PUSH
27736: LD_INT 0
27738: PUSH
27739: LD_INT 0
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: PUSH
27760: LD_INT 0
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 1
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: PUSH
27777: LD_INT 0
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: PUSH
27787: LD_INT 1
27789: NEG
27790: PUSH
27791: LD_INT 0
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 1
27800: NEG
27801: PUSH
27802: LD_INT 1
27804: NEG
27805: PUSH
27806: EMPTY
27807: LIST
27808: LIST
27809: PUSH
27810: LD_INT 1
27812: NEG
27813: PUSH
27814: LD_INT 2
27816: NEG
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 0
27824: PUSH
27825: LD_INT 2
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: LD_INT 1
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 2
27856: PUSH
27857: LD_INT 2
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 1
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 0
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 1
27886: NEG
27887: PUSH
27888: LD_INT 1
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: LD_INT 2
27897: NEG
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: NEG
27910: PUSH
27911: LD_INT 2
27913: NEG
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PUSH
27919: LD_INT 2
27921: NEG
27922: PUSH
27923: LD_INT 3
27925: NEG
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: NEG
27934: PUSH
27935: LD_INT 3
27937: NEG
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 0
27945: PUSH
27946: LD_INT 3
27948: NEG
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: PUSH
27954: LD_INT 1
27956: PUSH
27957: LD_INT 2
27959: NEG
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 3
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 3
27977: PUSH
27978: LD_INT 3
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: PUSH
27985: LD_INT 2
27987: PUSH
27988: LD_INT 3
27990: PUSH
27991: EMPTY
27992: LIST
27993: LIST
27994: PUSH
27995: LD_INT 1
27997: PUSH
27998: LD_INT 3
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 0
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: NEG
28018: PUSH
28019: LD_INT 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 3
28028: NEG
28029: PUSH
28030: LD_INT 2
28032: NEG
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 3
28040: NEG
28041: PUSH
28042: LD_INT 3
28044: NEG
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28081: LD_ADDR_VAR 0 43
28085: PUSH
28086: LD_INT 0
28088: PUSH
28089: LD_INT 0
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 0
28098: PUSH
28099: LD_INT 1
28101: NEG
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PUSH
28107: LD_INT 1
28109: PUSH
28110: LD_INT 0
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: LD_INT 1
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: PUSH
28127: LD_INT 0
28129: PUSH
28130: LD_INT 1
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PUSH
28137: LD_INT 1
28139: NEG
28140: PUSH
28141: LD_INT 0
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: NEG
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 1
28162: NEG
28163: PUSH
28164: LD_INT 2
28166: NEG
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: PUSH
28172: LD_INT 0
28174: PUSH
28175: LD_INT 2
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: PUSH
28186: LD_INT 1
28188: NEG
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: LD_INT 2
28196: PUSH
28197: LD_INT 0
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PUSH
28204: LD_INT 2
28206: PUSH
28207: LD_INT 1
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: LD_INT 2
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 0
28226: PUSH
28227: LD_INT 2
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 1
28236: NEG
28237: PUSH
28238: LD_INT 1
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 2
28247: NEG
28248: PUSH
28249: LD_INT 0
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: EMPTY
28265: LIST
28266: LIST
28267: PUSH
28268: LD_INT 1
28270: NEG
28271: PUSH
28272: LD_INT 3
28274: NEG
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 0
28282: PUSH
28283: LD_INT 3
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: LD_INT 0
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 3
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: LD_INT 3
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: LD_INT 3
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 1
28355: NEG
28356: PUSH
28357: LD_INT 2
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: LD_INT 2
28366: NEG
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: PUSH
28375: LD_INT 3
28377: NEG
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 3
28388: NEG
28389: PUSH
28390: LD_INT 1
28392: NEG
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28429: LD_ADDR_VAR 0 44
28433: PUSH
28434: LD_INT 0
28436: PUSH
28437: LD_INT 0
28439: PUSH
28440: EMPTY
28441: LIST
28442: LIST
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: LD_INT 1
28449: NEG
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: LD_INT 0
28460: PUSH
28461: EMPTY
28462: LIST
28463: LIST
28464: PUSH
28465: LD_INT 1
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 0
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: NEG
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 1
28498: NEG
28499: PUSH
28500: LD_INT 1
28502: NEG
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 1
28510: NEG
28511: PUSH
28512: LD_INT 2
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: PUSH
28523: LD_INT 1
28525: NEG
28526: PUSH
28527: EMPTY
28528: LIST
28529: LIST
28530: PUSH
28531: LD_INT 2
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: EMPTY
28538: LIST
28539: LIST
28540: PUSH
28541: LD_INT 2
28543: PUSH
28544: LD_INT 1
28546: PUSH
28547: EMPTY
28548: LIST
28549: LIST
28550: PUSH
28551: LD_INT 2
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: NEG
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: NEG
28585: PUSH
28586: LD_INT 0
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 2
28595: NEG
28596: PUSH
28597: LD_INT 1
28599: NEG
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 2
28607: NEG
28608: PUSH
28609: LD_INT 2
28611: NEG
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: LD_INT 2
28619: NEG
28620: PUSH
28621: LD_INT 3
28623: NEG
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: LD_INT 1
28634: NEG
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: PUSH
28640: LD_INT 3
28642: PUSH
28643: LD_INT 0
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: LD_INT 3
28652: PUSH
28653: LD_INT 1
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: LD_INT 2
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: LD_INT 3
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 2
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 3
28703: NEG
28704: PUSH
28705: LD_INT 0
28707: PUSH
28708: EMPTY
28709: LIST
28710: LIST
28711: PUSH
28712: LD_INT 3
28714: NEG
28715: PUSH
28716: LD_INT 1
28718: NEG
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: PUSH
28724: LD_INT 3
28726: NEG
28727: PUSH
28728: LD_INT 2
28730: NEG
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PUSH
28736: LD_INT 3
28738: NEG
28739: PUSH
28740: LD_INT 3
28742: NEG
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28779: LD_ADDR_VAR 0 45
28783: PUSH
28784: LD_INT 0
28786: PUSH
28787: LD_INT 0
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 0
28796: PUSH
28797: LD_INT 1
28799: NEG
28800: PUSH
28801: EMPTY
28802: LIST
28803: LIST
28804: PUSH
28805: LD_INT 1
28807: PUSH
28808: LD_INT 0
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: PUSH
28815: LD_INT 1
28817: PUSH
28818: LD_INT 1
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 0
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PUSH
28835: LD_INT 1
28837: NEG
28838: PUSH
28839: LD_INT 0
28841: PUSH
28842: EMPTY
28843: LIST
28844: LIST
28845: PUSH
28846: LD_INT 1
28848: NEG
28849: PUSH
28850: LD_INT 1
28852: NEG
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 1
28860: NEG
28861: PUSH
28862: LD_INT 2
28864: NEG
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 0
28872: PUSH
28873: LD_INT 2
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 1
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 2
28894: PUSH
28895: LD_INT 1
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 2
28904: PUSH
28905: LD_INT 2
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 1
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 2
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 1
28934: NEG
28935: PUSH
28936: LD_INT 1
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 2
28945: NEG
28946: PUSH
28947: LD_INT 1
28949: NEG
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 2
28957: NEG
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: PUSH
28967: LD_INT 2
28969: NEG
28970: PUSH
28971: LD_INT 3
28973: NEG
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 1
28981: NEG
28982: PUSH
28983: LD_INT 3
28985: NEG
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 0
28993: PUSH
28994: LD_INT 3
28996: NEG
28997: PUSH
28998: EMPTY
28999: LIST
29000: LIST
29001: PUSH
29002: LD_INT 1
29004: PUSH
29005: LD_INT 2
29007: NEG
29008: PUSH
29009: EMPTY
29010: LIST
29011: LIST
29012: PUSH
29013: LD_INT 3
29015: PUSH
29016: LD_INT 2
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 3
29025: PUSH
29026: LD_INT 3
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 2
29035: PUSH
29036: LD_INT 3
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: LD_INT 1
29045: PUSH
29046: LD_INT 3
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: PUSH
29053: LD_INT 0
29055: PUSH
29056: LD_INT 3
29058: PUSH
29059: EMPTY
29060: LIST
29061: LIST
29062: PUSH
29063: LD_INT 1
29065: NEG
29066: PUSH
29067: LD_INT 2
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PUSH
29074: LD_INT 3
29076: NEG
29077: PUSH
29078: LD_INT 2
29080: NEG
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PUSH
29086: LD_INT 3
29088: NEG
29089: PUSH
29090: LD_INT 3
29092: NEG
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: LIST
29126: LIST
29127: LIST
29128: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29129: LD_ADDR_VAR 0 46
29133: PUSH
29134: LD_INT 0
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: LD_INT 1
29149: NEG
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 1
29157: PUSH
29158: LD_INT 0
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 1
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 0
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 1
29187: NEG
29188: PUSH
29189: LD_INT 0
29191: PUSH
29192: EMPTY
29193: LIST
29194: LIST
29195: PUSH
29196: LD_INT 1
29198: NEG
29199: PUSH
29200: LD_INT 1
29202: NEG
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 1
29210: NEG
29211: PUSH
29212: LD_INT 2
29214: NEG
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 0
29222: PUSH
29223: LD_INT 2
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: PUSH
29234: LD_INT 1
29236: NEG
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 0
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 2
29254: PUSH
29255: LD_INT 1
29257: PUSH
29258: EMPTY
29259: LIST
29260: LIST
29261: PUSH
29262: LD_INT 1
29264: PUSH
29265: LD_INT 2
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PUSH
29272: LD_INT 0
29274: PUSH
29275: LD_INT 2
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 1
29284: NEG
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: LD_INT 2
29295: NEG
29296: PUSH
29297: LD_INT 0
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 2
29306: NEG
29307: PUSH
29308: LD_INT 1
29310: NEG
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: PUSH
29316: LD_INT 1
29318: NEG
29319: PUSH
29320: LD_INT 3
29322: NEG
29323: PUSH
29324: EMPTY
29325: LIST
29326: LIST
29327: PUSH
29328: LD_INT 0
29330: PUSH
29331: LD_INT 3
29333: NEG
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: LD_INT 2
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: LD_INT 2
29352: PUSH
29353: LD_INT 1
29355: NEG
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 3
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: LD_INT 3
29373: PUSH
29374: LD_INT 1
29376: PUSH
29377: EMPTY
29378: LIST
29379: LIST
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 3
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: LD_INT 3
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 1
29403: NEG
29404: PUSH
29405: LD_INT 2
29407: PUSH
29408: EMPTY
29409: LIST
29410: LIST
29411: PUSH
29412: LD_INT 2
29414: NEG
29415: PUSH
29416: LD_INT 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 3
29425: NEG
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 3
29436: NEG
29437: PUSH
29438: LD_INT 1
29440: NEG
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: LIST
29476: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29477: LD_ADDR_VAR 0 47
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 0
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: PUSH
29503: LD_INT 1
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 1
29515: PUSH
29516: LD_INT 1
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 0
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: LD_INT 0
29539: PUSH
29540: EMPTY
29541: LIST
29542: LIST
29543: PUSH
29544: LD_INT 1
29546: NEG
29547: PUSH
29548: LD_INT 1
29550: NEG
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 1
29558: NEG
29559: PUSH
29560: LD_INT 2
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 2
29573: NEG
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PUSH
29579: LD_INT 1
29581: PUSH
29582: LD_INT 1
29584: NEG
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: LD_INT 2
29592: NEG
29593: PUSH
29594: LD_INT 1
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: NEG
29605: PUSH
29606: LD_INT 2
29608: NEG
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29628: LD_ADDR_VAR 0 48
29632: PUSH
29633: LD_INT 0
29635: PUSH
29636: LD_INT 0
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 1
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 1
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 1
29666: PUSH
29667: LD_INT 1
29669: PUSH
29670: EMPTY
29671: LIST
29672: LIST
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PUSH
29684: LD_INT 1
29686: NEG
29687: PUSH
29688: LD_INT 0
29690: PUSH
29691: EMPTY
29692: LIST
29693: LIST
29694: PUSH
29695: LD_INT 1
29697: NEG
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 1
29709: NEG
29710: PUSH
29711: LD_INT 2
29713: NEG
29714: PUSH
29715: EMPTY
29716: LIST
29717: LIST
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: LD_INT 2
29724: NEG
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: PUSH
29733: LD_INT 1
29735: NEG
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: PUSH
29754: LD_INT 1
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
29775: LD_ADDR_VAR 0 49
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 1
29795: NEG
29796: PUSH
29797: EMPTY
29798: LIST
29799: LIST
29800: PUSH
29801: LD_INT 1
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 1
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 0
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: NEG
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 1
29856: PUSH
29857: LD_INT 1
29859: NEG
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 0
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: LD_INT 2
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: LD_INT 2
29900: PUSH
29901: EMPTY
29902: LIST
29903: LIST
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
29919: LD_ADDR_VAR 0 50
29923: PUSH
29924: LD_INT 0
29926: PUSH
29927: LD_INT 0
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: PUSH
29934: LD_INT 0
29936: PUSH
29937: LD_INT 1
29939: NEG
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: LD_INT 1
29947: PUSH
29948: LD_INT 0
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 1
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 0
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 1
29977: NEG
29978: PUSH
29979: LD_INT 0
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: LD_INT 1
29992: NEG
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 1
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: LD_INT 2
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PUSH
30018: LD_INT 1
30020: PUSH
30021: LD_INT 2
30023: PUSH
30024: EMPTY
30025: LIST
30026: LIST
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: LD_INT 2
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PUSH
30038: LD_INT 1
30040: NEG
30041: PUSH
30042: LD_INT 1
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30063: LD_ADDR_VAR 0 51
30067: PUSH
30068: LD_INT 0
30070: PUSH
30071: LD_INT 0
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 1
30083: NEG
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 1
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: LD_INT 1
30114: PUSH
30115: EMPTY
30116: LIST
30117: LIST
30118: PUSH
30119: LD_INT 1
30121: NEG
30122: PUSH
30123: LD_INT 0
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: LD_INT 1
30132: NEG
30133: PUSH
30134: LD_INT 1
30136: NEG
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: LD_INT 2
30147: PUSH
30148: EMPTY
30149: LIST
30150: LIST
30151: PUSH
30152: LD_INT 0
30154: PUSH
30155: LD_INT 2
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: PUSH
30162: LD_INT 1
30164: NEG
30165: PUSH
30166: LD_INT 1
30168: PUSH
30169: EMPTY
30170: LIST
30171: LIST
30172: PUSH
30173: LD_INT 2
30175: NEG
30176: PUSH
30177: LD_INT 0
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 2
30186: NEG
30187: PUSH
30188: LD_INT 1
30190: NEG
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: EMPTY
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30210: LD_ADDR_VAR 0 52
30214: PUSH
30215: LD_INT 0
30217: PUSH
30218: LD_INT 0
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 1
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 1
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: LD_INT 1
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 1
30268: NEG
30269: PUSH
30270: LD_INT 0
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 1
30279: NEG
30280: PUSH
30281: LD_INT 1
30283: NEG
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 1
30291: NEG
30292: PUSH
30293: LD_INT 2
30295: NEG
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 1
30303: NEG
30304: PUSH
30305: LD_INT 1
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 2
30314: NEG
30315: PUSH
30316: LD_INT 0
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PUSH
30323: LD_INT 2
30325: NEG
30326: PUSH
30327: LD_INT 1
30329: NEG
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PUSH
30335: LD_INT 2
30337: NEG
30338: PUSH
30339: LD_INT 2
30341: NEG
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30361: LD_ADDR_VAR 0 53
30365: PUSH
30366: LD_INT 0
30368: PUSH
30369: LD_INT 0
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 0
30378: PUSH
30379: LD_INT 1
30381: NEG
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PUSH
30387: LD_INT 1
30389: PUSH
30390: LD_INT 0
30392: PUSH
30393: EMPTY
30394: LIST
30395: LIST
30396: PUSH
30397: LD_INT 1
30399: PUSH
30400: LD_INT 1
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 0
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: PUSH
30417: LD_INT 1
30419: NEG
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 1
30430: NEG
30431: PUSH
30432: LD_INT 1
30434: NEG
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: LD_INT 2
30446: NEG
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 0
30454: PUSH
30455: LD_INT 2
30457: NEG
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: PUSH
30463: LD_INT 1
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 2
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 2
30486: PUSH
30487: LD_INT 1
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 2
30496: PUSH
30497: LD_INT 2
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: LD_INT 2
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 0
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: NEG
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: LD_INT 0
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 2
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: PUSH
30570: EMPTY
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: LIST
30589: LIST
30590: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30591: LD_ADDR_VAR 0 54
30595: PUSH
30596: LD_INT 0
30598: PUSH
30599: LD_INT 0
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: PUSH
30606: LD_INT 0
30608: PUSH
30609: LD_INT 1
30611: NEG
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PUSH
30617: LD_INT 1
30619: PUSH
30620: LD_INT 0
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: LD_INT 1
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 0
30639: PUSH
30640: LD_INT 1
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 1
30649: NEG
30650: PUSH
30651: LD_INT 0
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: PUSH
30658: LD_INT 1
30660: NEG
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: LD_INT 1
30672: NEG
30673: PUSH
30674: LD_INT 2
30676: NEG
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: PUSH
30682: LD_INT 0
30684: PUSH
30685: LD_INT 2
30687: NEG
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: LD_INT 1
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 2
30706: PUSH
30707: LD_INT 0
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 2
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 2
30726: PUSH
30727: LD_INT 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 1
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 0
30746: PUSH
30747: LD_INT 2
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: LD_INT 1
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 2
30767: NEG
30768: PUSH
30769: LD_INT 0
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: NEG
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: NEG
30791: PUSH
30792: LD_INT 2
30794: NEG
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30821: LD_ADDR_VAR 0 55
30825: PUSH
30826: LD_INT 0
30828: PUSH
30829: LD_INT 0
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 0
30838: PUSH
30839: LD_INT 1
30841: NEG
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: PUSH
30847: LD_INT 1
30849: PUSH
30850: LD_INT 0
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: PUSH
30857: LD_INT 1
30859: PUSH
30860: LD_INT 1
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: NEG
30880: PUSH
30881: LD_INT 0
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: NEG
30891: PUSH
30892: LD_INT 1
30894: NEG
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: NEG
30903: PUSH
30904: LD_INT 2
30906: NEG
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PUSH
30912: LD_INT 0
30914: PUSH
30915: LD_INT 2
30917: NEG
30918: PUSH
30919: EMPTY
30920: LIST
30921: LIST
30922: PUSH
30923: LD_INT 1
30925: PUSH
30926: LD_INT 1
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 2
30936: PUSH
30937: LD_INT 0
30939: PUSH
30940: EMPTY
30941: LIST
30942: LIST
30943: PUSH
30944: LD_INT 2
30946: PUSH
30947: LD_INT 1
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PUSH
30954: LD_INT 2
30956: PUSH
30957: LD_INT 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 0
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 1
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 2
30997: NEG
30998: PUSH
30999: LD_INT 0
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 2
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: NEG
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 2
31020: NEG
31021: PUSH
31022: LD_INT 2
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31051: LD_ADDR_VAR 0 56
31055: PUSH
31056: LD_INT 0
31058: PUSH
31059: LD_INT 0
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: PUSH
31066: LD_INT 0
31068: PUSH
31069: LD_INT 1
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: LD_INT 1
31079: PUSH
31080: LD_INT 0
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PUSH
31087: LD_INT 1
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: EMPTY
31094: LIST
31095: LIST
31096: PUSH
31097: LD_INT 0
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: LD_INT 0
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 1
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 2
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 0
31144: PUSH
31145: LD_INT 2
31147: NEG
31148: PUSH
31149: EMPTY
31150: LIST
31151: LIST
31152: PUSH
31153: LD_INT 1
31155: PUSH
31156: LD_INT 1
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 2
31166: PUSH
31167: LD_INT 0
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: LD_INT 2
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: EMPTY
31181: LIST
31182: LIST
31183: PUSH
31184: LD_INT 2
31186: PUSH
31187: LD_INT 2
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: PUSH
31194: LD_INT 1
31196: PUSH
31197: LD_INT 2
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: PUSH
31204: LD_INT 0
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: NEG
31217: PUSH
31218: LD_INT 1
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: NEG
31228: PUSH
31229: LD_INT 0
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 2
31238: NEG
31239: PUSH
31240: LD_INT 1
31242: NEG
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: LD_INT 2
31250: NEG
31251: PUSH
31252: LD_INT 2
31254: NEG
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: LIST
31279: LIST
31280: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31281: LD_ADDR_VAR 0 57
31285: PUSH
31286: LD_INT 0
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 0
31298: PUSH
31299: LD_INT 1
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 0
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: LD_INT 1
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 0
31329: PUSH
31330: LD_INT 1
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PUSH
31337: LD_INT 1
31339: NEG
31340: PUSH
31341: LD_INT 0
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: LD_INT 1
31350: NEG
31351: PUSH
31352: LD_INT 1
31354: NEG
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 1
31362: NEG
31363: PUSH
31364: LD_INT 2
31366: NEG
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PUSH
31372: LD_INT 0
31374: PUSH
31375: LD_INT 2
31377: NEG
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 1
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 2
31396: PUSH
31397: LD_INT 0
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: PUSH
31404: LD_INT 2
31406: PUSH
31407: LD_INT 1
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 2
31416: PUSH
31417: LD_INT 2
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 1
31426: PUSH
31427: LD_INT 2
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 0
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 2
31457: NEG
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 2
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 2
31480: NEG
31481: PUSH
31482: LD_INT 2
31484: NEG
31485: PUSH
31486: EMPTY
31487: LIST
31488: LIST
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: LIST
31501: LIST
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31511: LD_ADDR_VAR 0 58
31515: PUSH
31516: LD_INT 0
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 0
31528: PUSH
31529: LD_INT 1
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: LD_INT 1
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: LD_INT 1
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 0
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 1
31569: NEG
31570: PUSH
31571: LD_INT 0
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 1
31580: NEG
31581: PUSH
31582: LD_INT 1
31584: NEG
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: LD_INT 1
31592: NEG
31593: PUSH
31594: LD_INT 2
31596: NEG
31597: PUSH
31598: EMPTY
31599: LIST
31600: LIST
31601: PUSH
31602: LD_INT 0
31604: PUSH
31605: LD_INT 2
31607: NEG
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 1
31615: PUSH
31616: LD_INT 1
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 2
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: EMPTY
31631: LIST
31632: LIST
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 1
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: PUSH
31644: LD_INT 2
31646: PUSH
31647: LD_INT 2
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PUSH
31654: LD_INT 1
31656: PUSH
31657: LD_INT 2
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: PUSH
31664: LD_INT 0
31666: PUSH
31667: LD_INT 2
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: EMPTY
31682: LIST
31683: LIST
31684: PUSH
31685: LD_INT 2
31687: NEG
31688: PUSH
31689: LD_INT 0
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: NEG
31703: PUSH
31704: EMPTY
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 2
31710: NEG
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: EMPTY
31717: LIST
31718: LIST
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: LIST
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: LIST
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31741: LD_ADDR_VAR 0 59
31745: PUSH
31746: LD_INT 0
31748: PUSH
31749: LD_INT 0
31751: PUSH
31752: EMPTY
31753: LIST
31754: LIST
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: LD_INT 1
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: LD_INT 1
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_INT 1
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: EMPTY
31784: LIST
31785: LIST
31786: PUSH
31787: LD_INT 0
31789: PUSH
31790: LD_INT 1
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: PUSH
31797: LD_INT 1
31799: NEG
31800: PUSH
31801: LD_INT 0
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31829: LD_ADDR_VAR 0 60
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 0
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 0
31846: PUSH
31847: LD_INT 1
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 1
31870: PUSH
31871: EMPTY
31872: LIST
31873: LIST
31874: PUSH
31875: LD_INT 0
31877: PUSH
31878: LD_INT 1
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: LD_INT 0
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: NEG
31899: PUSH
31900: LD_INT 1
31902: NEG
31903: PUSH
31904: EMPTY
31905: LIST
31906: LIST
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31917: LD_ADDR_VAR 0 61
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 0
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 1
31937: NEG
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 1
31975: NEG
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: EMPTY
31981: LIST
31982: LIST
31983: PUSH
31984: LD_INT 1
31986: NEG
31987: PUSH
31988: LD_INT 1
31990: NEG
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32005: LD_ADDR_VAR 0 62
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 0
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 0
32022: PUSH
32023: LD_INT 1
32025: NEG
32026: PUSH
32027: EMPTY
32028: LIST
32029: LIST
32030: PUSH
32031: LD_INT 1
32033: PUSH
32034: LD_INT 0
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PUSH
32041: LD_INT 1
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: EMPTY
32048: LIST
32049: LIST
32050: PUSH
32051: LD_INT 0
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: LD_INT 0
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: LD_INT 1
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32093: LD_ADDR_VAR 0 63
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 0
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 0
32110: PUSH
32111: LD_INT 1
32113: NEG
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: PUSH
32122: LD_INT 0
32124: PUSH
32125: EMPTY
32126: LIST
32127: LIST
32128: PUSH
32129: LD_INT 1
32131: PUSH
32132: LD_INT 1
32134: PUSH
32135: EMPTY
32136: LIST
32137: LIST
32138: PUSH
32139: LD_INT 0
32141: PUSH
32142: LD_INT 1
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: PUSH
32149: LD_INT 1
32151: NEG
32152: PUSH
32153: LD_INT 0
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 1
32162: NEG
32163: PUSH
32164: LD_INT 1
32166: NEG
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32181: LD_ADDR_VAR 0 64
32185: PUSH
32186: LD_INT 0
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 1
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: EMPTY
32214: LIST
32215: LIST
32216: PUSH
32217: LD_INT 1
32219: PUSH
32220: LD_INT 1
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 0
32229: PUSH
32230: LD_INT 1
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PUSH
32237: LD_INT 1
32239: NEG
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: NEG
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: ST_TO_ADDR
// end ; 1 :
32269: GO 38166
32271: LD_INT 1
32273: DOUBLE
32274: EQUAL
32275: IFTRUE 32279
32277: GO 34902
32279: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32280: LD_ADDR_VAR 0 11
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: LD_INT 3
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 3
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 2
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32324: LD_ADDR_VAR 0 12
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 3
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 3
32352: PUSH
32353: LD_INT 1
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32365: LD_ADDR_VAR 0 13
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: LD_INT 2
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 3
32382: PUSH
32383: LD_INT 3
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 2
32392: PUSH
32393: LD_INT 3
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: LIST
32404: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32405: LD_ADDR_VAR 0 14
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: LD_INT 3
32415: PUSH
32416: EMPTY
32417: LIST
32418: LIST
32419: PUSH
32420: LD_INT 0
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 1
32432: NEG
32433: PUSH
32434: LD_INT 2
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32446: LD_ADDR_VAR 0 15
32450: PUSH
32451: LD_INT 2
32453: NEG
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 3
32464: NEG
32465: PUSH
32466: LD_INT 0
32468: PUSH
32469: EMPTY
32470: LIST
32471: LIST
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: LD_INT 1
32479: NEG
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: LIST
32489: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32490: LD_ADDR_VAR 0 16
32494: PUSH
32495: LD_INT 2
32497: NEG
32498: PUSH
32499: LD_INT 3
32501: NEG
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PUSH
32507: LD_INT 3
32509: NEG
32510: PUSH
32511: LD_INT 2
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 3
32521: NEG
32522: PUSH
32523: LD_INT 3
32525: NEG
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32536: LD_ADDR_VAR 0 17
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: LD_INT 3
32547: NEG
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: PUSH
32553: LD_INT 0
32555: PUSH
32556: LD_INT 3
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 2
32569: NEG
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: LIST
32579: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32580: LD_ADDR_VAR 0 18
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: LD_INT 0
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 3
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32621: LD_ADDR_VAR 0 19
32625: PUSH
32626: LD_INT 3
32628: PUSH
32629: LD_INT 2
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 3
32638: PUSH
32639: LD_INT 3
32641: PUSH
32642: EMPTY
32643: LIST
32644: LIST
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: LIST
32660: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32661: LD_ADDR_VAR 0 20
32665: PUSH
32666: LD_INT 1
32668: PUSH
32669: LD_INT 3
32671: PUSH
32672: EMPTY
32673: LIST
32674: LIST
32675: PUSH
32676: LD_INT 0
32678: PUSH
32679: LD_INT 3
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 2
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: LIST
32701: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32702: LD_ADDR_VAR 0 21
32706: PUSH
32707: LD_INT 2
32709: NEG
32710: PUSH
32711: LD_INT 1
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 3
32720: NEG
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 3
32731: NEG
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: LIST
32745: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32746: LD_ADDR_VAR 0 22
32750: PUSH
32751: LD_INT 2
32753: NEG
32754: PUSH
32755: LD_INT 3
32757: NEG
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 3
32765: NEG
32766: PUSH
32767: LD_INT 2
32769: NEG
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: LD_INT 3
32781: NEG
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: LIST
32791: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
32792: LD_ADDR_VAR 0 23
32796: PUSH
32797: LD_INT 0
32799: PUSH
32800: LD_INT 3
32802: NEG
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 1
32810: NEG
32811: PUSH
32812: LD_INT 4
32814: NEG
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: PUSH
32820: LD_INT 1
32822: PUSH
32823: LD_INT 3
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
32836: LD_ADDR_VAR 0 24
32840: PUSH
32841: LD_INT 3
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 3
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 4
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
32877: LD_ADDR_VAR 0 25
32881: PUSH
32882: LD_INT 3
32884: PUSH
32885: LD_INT 3
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 4
32894: PUSH
32895: LD_INT 3
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 3
32904: PUSH
32905: LD_INT 4
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: LIST
32916: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
32917: LD_ADDR_VAR 0 26
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: LD_INT 3
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 4
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 1
32944: NEG
32945: PUSH
32946: LD_INT 3
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
32958: LD_ADDR_VAR 0 27
32962: PUSH
32963: LD_INT 3
32965: NEG
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 3
32976: NEG
32977: PUSH
32978: LD_INT 1
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: PUSH
32985: LD_INT 4
32987: NEG
32988: PUSH
32989: LD_INT 1
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33002: LD_ADDR_VAR 0 28
33006: PUSH
33007: LD_INT 3
33009: NEG
33010: PUSH
33011: LD_INT 3
33013: NEG
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 3
33021: NEG
33022: PUSH
33023: LD_INT 4
33025: NEG
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 4
33033: NEG
33034: PUSH
33035: LD_INT 3
33037: NEG
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33048: LD_ADDR_VAR 0 29
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 3
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 0
33067: PUSH
33068: LD_INT 3
33070: NEG
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PUSH
33076: LD_INT 1
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: NEG
33090: PUSH
33091: LD_INT 4
33093: NEG
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 4
33104: NEG
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: LD_INT 1
33112: PUSH
33113: LD_INT 3
33115: NEG
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: PUSH
33121: LD_INT 1
33123: NEG
33124: PUSH
33125: LD_INT 5
33127: NEG
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 5
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 4
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 1
33157: NEG
33158: PUSH
33159: LD_INT 6
33161: NEG
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: PUSH
33167: LD_INT 0
33169: PUSH
33170: LD_INT 6
33172: NEG
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 1
33180: PUSH
33181: LD_INT 5
33183: NEG
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33203: LD_ADDR_VAR 0 30
33207: PUSH
33208: LD_INT 2
33210: PUSH
33211: LD_INT 1
33213: NEG
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 3
33221: PUSH
33222: LD_INT 0
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 3
33231: PUSH
33232: LD_INT 1
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 3
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 4
33252: PUSH
33253: LD_INT 0
33255: PUSH
33256: EMPTY
33257: LIST
33258: LIST
33259: PUSH
33260: LD_INT 4
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 4
33272: PUSH
33273: LD_INT 1
33275: NEG
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 5
33283: PUSH
33284: LD_INT 0
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 5
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 5
33303: PUSH
33304: LD_INT 1
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 6
33314: PUSH
33315: LD_INT 0
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 6
33324: PUSH
33325: LD_INT 1
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33346: LD_ADDR_VAR 0 31
33350: PUSH
33351: LD_INT 3
33353: PUSH
33354: LD_INT 2
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: EMPTY
33378: LIST
33379: LIST
33380: PUSH
33381: LD_INT 4
33383: PUSH
33384: LD_INT 3
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PUSH
33391: LD_INT 4
33393: PUSH
33394: LD_INT 4
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: PUSH
33401: LD_INT 3
33403: PUSH
33404: LD_INT 4
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 5
33413: PUSH
33414: LD_INT 4
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 5
33423: PUSH
33424: LD_INT 5
33426: PUSH
33427: EMPTY
33428: LIST
33429: LIST
33430: PUSH
33431: LD_INT 4
33433: PUSH
33434: LD_INT 5
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: LD_INT 6
33443: PUSH
33444: LD_INT 5
33446: PUSH
33447: EMPTY
33448: LIST
33449: LIST
33450: PUSH
33451: LD_INT 6
33453: PUSH
33454: LD_INT 6
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 5
33463: PUSH
33464: LD_INT 6
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33485: LD_ADDR_VAR 0 32
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: LD_INT 3
33495: PUSH
33496: EMPTY
33497: LIST
33498: LIST
33499: PUSH
33500: LD_INT 0
33502: PUSH
33503: LD_INT 3
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: PUSH
33510: LD_INT 1
33512: NEG
33513: PUSH
33514: LD_INT 2
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: LD_INT 4
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 4
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: NEG
33544: PUSH
33545: LD_INT 3
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 5
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 0
33564: PUSH
33565: LD_INT 5
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: LD_INT 4
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 1
33585: PUSH
33586: LD_INT 6
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 6
33598: PUSH
33599: EMPTY
33600: LIST
33601: LIST
33602: PUSH
33603: LD_INT 1
33605: NEG
33606: PUSH
33607: LD_INT 5
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33628: LD_ADDR_VAR 0 33
33632: PUSH
33633: LD_INT 2
33635: NEG
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 3
33646: NEG
33647: PUSH
33648: LD_INT 0
33650: PUSH
33651: EMPTY
33652: LIST
33653: LIST
33654: PUSH
33655: LD_INT 3
33657: NEG
33658: PUSH
33659: LD_INT 1
33661: NEG
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 3
33669: NEG
33670: PUSH
33671: LD_INT 1
33673: PUSH
33674: EMPTY
33675: LIST
33676: LIST
33677: PUSH
33678: LD_INT 4
33680: NEG
33681: PUSH
33682: LD_INT 0
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 4
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: NEG
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 4
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: EMPTY
33709: LIST
33710: LIST
33711: PUSH
33712: LD_INT 5
33714: NEG
33715: PUSH
33716: LD_INT 0
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 5
33725: NEG
33726: PUSH
33727: LD_INT 1
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 5
33737: NEG
33738: PUSH
33739: LD_INT 1
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 6
33748: NEG
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 6
33759: NEG
33760: PUSH
33761: LD_INT 1
33763: NEG
33764: PUSH
33765: EMPTY
33766: LIST
33767: LIST
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
33783: LD_ADDR_VAR 0 34
33787: PUSH
33788: LD_INT 2
33790: NEG
33791: PUSH
33792: LD_INT 3
33794: NEG
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 3
33802: NEG
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 3
33814: NEG
33815: PUSH
33816: LD_INT 3
33818: NEG
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 3
33826: NEG
33827: PUSH
33828: LD_INT 4
33830: NEG
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: LD_INT 4
33838: NEG
33839: PUSH
33840: LD_INT 3
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 4
33850: NEG
33851: PUSH
33852: LD_INT 4
33854: NEG
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 4
33862: NEG
33863: PUSH
33864: LD_INT 5
33866: NEG
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 5
33874: NEG
33875: PUSH
33876: LD_INT 4
33878: NEG
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 5
33886: NEG
33887: PUSH
33888: LD_INT 5
33890: NEG
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 5
33898: NEG
33899: PUSH
33900: LD_INT 6
33902: NEG
33903: PUSH
33904: EMPTY
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 6
33910: NEG
33911: PUSH
33912: LD_INT 5
33914: NEG
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 6
33922: NEG
33923: PUSH
33924: LD_INT 6
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
33946: LD_ADDR_VAR 0 41
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: NEG
33965: PUSH
33966: LD_INT 3
33968: NEG
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 1
33976: PUSH
33977: LD_INT 2
33979: NEG
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
33990: LD_ADDR_VAR 0 42
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: LD_INT 1
34010: NEG
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PUSH
34016: LD_INT 3
34018: PUSH
34019: LD_INT 1
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: LIST
34030: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34031: LD_ADDR_VAR 0 43
34035: PUSH
34036: LD_INT 2
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: EMPTY
34043: LIST
34044: LIST
34045: PUSH
34046: LD_INT 3
34048: PUSH
34049: LD_INT 2
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 3
34061: PUSH
34062: EMPTY
34063: LIST
34064: LIST
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: LIST
34070: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34071: LD_ADDR_VAR 0 44
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 2
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: LD_INT 3
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: PUSH
34096: LD_INT 1
34098: NEG
34099: PUSH
34100: LD_INT 2
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34112: LD_ADDR_VAR 0 45
34116: PUSH
34117: LD_INT 2
34119: NEG
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 3
34141: NEG
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34156: LD_ADDR_VAR 0 46
34160: PUSH
34161: LD_INT 2
34163: NEG
34164: PUSH
34165: LD_INT 2
34167: NEG
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: LD_INT 3
34179: NEG
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: PUSH
34185: LD_INT 3
34187: NEG
34188: PUSH
34189: LD_INT 2
34191: NEG
34192: PUSH
34193: EMPTY
34194: LIST
34195: LIST
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34202: LD_ADDR_VAR 0 47
34206: PUSH
34207: LD_INT 2
34209: NEG
34210: PUSH
34211: LD_INT 3
34213: NEG
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 1
34221: NEG
34222: PUSH
34223: LD_INT 3
34225: NEG
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34235: LD_ADDR_VAR 0 48
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: LD_INT 2
34245: NEG
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 2
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34266: LD_ADDR_VAR 0 49
34270: PUSH
34271: LD_INT 3
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: EMPTY
34278: LIST
34279: LIST
34280: PUSH
34281: LD_INT 3
34283: PUSH
34284: LD_INT 2
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34295: LD_ADDR_VAR 0 50
34299: PUSH
34300: LD_INT 2
34302: PUSH
34303: LD_INT 3
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: LD_INT 3
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34324: LD_ADDR_VAR 0 51
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 2
34342: NEG
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34355: LD_ADDR_VAR 0 52
34359: PUSH
34360: LD_INT 3
34362: NEG
34363: PUSH
34364: LD_INT 1
34366: NEG
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 3
34374: NEG
34375: PUSH
34376: LD_INT 2
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34388: LD_ADDR_VAR 0 53
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: LD_INT 3
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: PUSH
34419: LD_INT 2
34421: NEG
34422: PUSH
34423: EMPTY
34424: LIST
34425: LIST
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: LIST
34431: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34432: LD_ADDR_VAR 0 54
34436: PUSH
34437: LD_INT 2
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 3
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 3
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: LIST
34472: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34473: LD_ADDR_VAR 0 55
34477: PUSH
34478: LD_INT 3
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 3
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 2
34500: PUSH
34501: LD_INT 3
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: LIST
34512: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34513: LD_ADDR_VAR 0 56
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: PUSH
34528: LD_INT 0
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 1
34540: NEG
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: EMPTY
34550: LIST
34551: LIST
34552: LIST
34553: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34554: LD_ADDR_VAR 0 57
34558: PUSH
34559: LD_INT 2
34561: NEG
34562: PUSH
34563: LD_INT 1
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: PUSH
34570: LD_INT 3
34572: NEG
34573: PUSH
34574: LD_INT 0
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 3
34583: NEG
34584: PUSH
34585: LD_INT 1
34587: NEG
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: LIST
34597: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34598: LD_ADDR_VAR 0 58
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: LD_INT 3
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 3
34617: NEG
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 3
34629: NEG
34630: PUSH
34631: LD_INT 3
34633: NEG
34634: PUSH
34635: EMPTY
34636: LIST
34637: LIST
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: LIST
34643: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34644: LD_ADDR_VAR 0 59
34648: PUSH
34649: LD_INT 1
34651: NEG
34652: PUSH
34653: LD_INT 2
34655: NEG
34656: PUSH
34657: EMPTY
34658: LIST
34659: LIST
34660: PUSH
34661: LD_INT 0
34663: PUSH
34664: LD_INT 2
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 1
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34688: LD_ADDR_VAR 0 60
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 1
34698: NEG
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: PUSH
34704: LD_INT 2
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 2
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: LIST
34728: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34729: LD_ADDR_VAR 0 61
34733: PUSH
34734: LD_INT 2
34736: PUSH
34737: LD_INT 1
34739: PUSH
34740: EMPTY
34741: LIST
34742: LIST
34743: PUSH
34744: LD_INT 2
34746: PUSH
34747: LD_INT 2
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 1
34756: PUSH
34757: LD_INT 2
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: LIST
34768: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34769: LD_ADDR_VAR 0 62
34773: PUSH
34774: LD_INT 1
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: LD_INT 2
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: NEG
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: LIST
34809: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34810: LD_ADDR_VAR 0 63
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 2
34839: NEG
34840: PUSH
34841: LD_INT 1
34843: NEG
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: LIST
34853: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34854: LD_ADDR_VAR 0 64
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: LD_INT 2
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: LD_INT 1
34877: NEG
34878: PUSH
34879: EMPTY
34880: LIST
34881: LIST
34882: PUSH
34883: LD_INT 2
34885: NEG
34886: PUSH
34887: LD_INT 2
34889: NEG
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: ST_TO_ADDR
// end ; 2 :
34900: GO 38166
34902: LD_INT 2
34904: DOUBLE
34905: EQUAL
34906: IFTRUE 34910
34908: GO 38165
34910: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
34911: LD_ADDR_VAR 0 29
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 4
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 5
34939: PUSH
34940: LD_INT 0
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 5
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 4
34959: PUSH
34960: LD_INT 1
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: PUSH
34967: LD_INT 3
34969: PUSH
34970: LD_INT 0
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 3
34979: PUSH
34980: LD_INT 1
34982: NEG
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 3
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 5
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 3
35011: PUSH
35012: LD_INT 3
35014: PUSH
35015: EMPTY
35016: LIST
35017: LIST
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: EMPTY
35026: LIST
35027: LIST
35028: PUSH
35029: LD_INT 4
35031: PUSH
35032: LD_INT 3
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 4
35041: PUSH
35042: LD_INT 4
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 3
35051: PUSH
35052: LD_INT 4
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: PUSH
35062: LD_INT 3
35064: PUSH
35065: EMPTY
35066: LIST
35067: LIST
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 2
35074: PUSH
35075: EMPTY
35076: LIST
35077: LIST
35078: PUSH
35079: LD_INT 4
35081: PUSH
35082: LD_INT 2
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: PUSH
35092: LD_INT 4
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 4
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 3
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 1
35121: PUSH
35122: LD_INT 4
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: LD_INT 5
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 0
35141: PUSH
35142: LD_INT 5
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: PUSH
35149: LD_INT 1
35151: NEG
35152: PUSH
35153: LD_INT 4
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 3
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: LD_INT 5
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: LD_INT 3
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 3
35194: NEG
35195: PUSH
35196: LD_INT 0
35198: PUSH
35199: EMPTY
35200: LIST
35201: LIST
35202: PUSH
35203: LD_INT 3
35205: NEG
35206: PUSH
35207: LD_INT 1
35209: NEG
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 2
35217: NEG
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 3
35239: NEG
35240: PUSH
35241: LD_INT 1
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: PUSH
35248: LD_INT 4
35250: NEG
35251: PUSH
35252: LD_INT 0
35254: PUSH
35255: EMPTY
35256: LIST
35257: LIST
35258: PUSH
35259: LD_INT 4
35261: NEG
35262: PUSH
35263: LD_INT 1
35265: NEG
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 4
35273: NEG
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 2
35285: NEG
35286: PUSH
35287: LD_INT 2
35289: PUSH
35290: EMPTY
35291: LIST
35292: LIST
35293: PUSH
35294: LD_INT 4
35296: NEG
35297: PUSH
35298: LD_INT 4
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 4
35308: NEG
35309: PUSH
35310: LD_INT 5
35312: NEG
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: PUSH
35318: LD_INT 3
35320: NEG
35321: PUSH
35322: LD_INT 4
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: LD_INT 3
35332: NEG
35333: PUSH
35334: LD_INT 3
35336: NEG
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: PUSH
35342: LD_INT 4
35344: NEG
35345: PUSH
35346: LD_INT 3
35348: NEG
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 5
35356: NEG
35357: PUSH
35358: LD_INT 4
35360: NEG
35361: PUSH
35362: EMPTY
35363: LIST
35364: LIST
35365: PUSH
35366: LD_INT 5
35368: NEG
35369: PUSH
35370: LD_INT 5
35372: NEG
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 3
35380: NEG
35381: PUSH
35382: LD_INT 5
35384: NEG
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 5
35392: NEG
35393: PUSH
35394: LD_INT 3
35396: NEG
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: LIST
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35449: LD_ADDR_VAR 0 30
35453: PUSH
35454: LD_INT 4
35456: PUSH
35457: LD_INT 4
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 4
35466: PUSH
35467: LD_INT 3
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 5
35476: PUSH
35477: LD_INT 4
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 5
35486: PUSH
35487: LD_INT 5
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: LD_INT 4
35496: PUSH
35497: LD_INT 5
35499: PUSH
35500: EMPTY
35501: LIST
35502: LIST
35503: PUSH
35504: LD_INT 3
35506: PUSH
35507: LD_INT 4
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: PUSH
35514: LD_INT 3
35516: PUSH
35517: LD_INT 3
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: PUSH
35524: LD_INT 5
35526: PUSH
35527: LD_INT 3
35529: PUSH
35530: EMPTY
35531: LIST
35532: LIST
35533: PUSH
35534: LD_INT 3
35536: PUSH
35537: LD_INT 5
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: LD_INT 3
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: LD_INT 2
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: LD_INT 3
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: PUSH
35577: LD_INT 4
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 0
35586: PUSH
35587: LD_INT 4
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 1
35596: NEG
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: LD_INT 2
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: LD_INT 2
35618: PUSH
35619: LD_INT 4
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 2
35628: NEG
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 4
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 4
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 3
35662: NEG
35663: PUSH
35664: LD_INT 0
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 3
35673: NEG
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: PUSH
35682: LD_INT 4
35684: NEG
35685: PUSH
35686: LD_INT 1
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 5
35695: NEG
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 5
35706: NEG
35707: PUSH
35708: LD_INT 1
35710: NEG
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 5
35718: NEG
35719: PUSH
35720: LD_INT 2
35722: NEG
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 3
35730: NEG
35731: PUSH
35732: LD_INT 2
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 3
35741: NEG
35742: PUSH
35743: LD_INT 3
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 3
35753: NEG
35754: PUSH
35755: LD_INT 4
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: LD_INT 3
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 2
35777: NEG
35778: PUSH
35779: LD_INT 2
35781: NEG
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 3
35789: NEG
35790: PUSH
35791: LD_INT 2
35793: NEG
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 4
35801: NEG
35802: PUSH
35803: LD_INT 3
35805: NEG
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: PUSH
35811: LD_INT 4
35813: NEG
35814: PUSH
35815: LD_INT 4
35817: NEG
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: PUSH
35823: LD_INT 2
35825: NEG
35826: PUSH
35827: LD_INT 4
35829: NEG
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: LD_INT 4
35837: NEG
35838: PUSH
35839: LD_INT 2
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: LD_INT 4
35852: NEG
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: LD_INT 5
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: LD_INT 4
35874: NEG
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: PUSH
35883: LD_INT 3
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 0
35893: PUSH
35894: LD_INT 3
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 4
35908: NEG
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 5
35920: NEG
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: LD_INT 3
35931: NEG
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: LD_INT 5
35943: NEG
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
35996: LD_ADDR_VAR 0 31
36000: PUSH
36001: LD_INT 0
36003: PUSH
36004: LD_INT 4
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 0
36013: PUSH
36014: LD_INT 3
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 4
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 5
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: NEG
36054: PUSH
36055: LD_INT 4
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: NEG
36065: PUSH
36066: LD_INT 3
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 5
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 3
36096: NEG
36097: PUSH
36098: LD_INT 0
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 3
36107: NEG
36108: PUSH
36109: LD_INT 1
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: NEG
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: NEG
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 3
36141: NEG
36142: PUSH
36143: LD_INT 1
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 4
36152: NEG
36153: PUSH
36154: LD_INT 0
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 4
36163: NEG
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 4
36175: NEG
36176: PUSH
36177: LD_INT 2
36179: NEG
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 2
36187: NEG
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 4
36198: NEG
36199: PUSH
36200: LD_INT 4
36202: NEG
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 4
36210: NEG
36211: PUSH
36212: LD_INT 5
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 3
36222: NEG
36223: PUSH
36224: LD_INT 4
36226: NEG
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 3
36234: NEG
36235: PUSH
36236: LD_INT 3
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 4
36246: NEG
36247: PUSH
36248: LD_INT 3
36250: NEG
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 5
36258: NEG
36259: PUSH
36260: LD_INT 4
36262: NEG
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PUSH
36268: LD_INT 5
36270: NEG
36271: PUSH
36272: LD_INT 5
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: LD_INT 5
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 5
36294: NEG
36295: PUSH
36296: LD_INT 3
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 0
36306: PUSH
36307: LD_INT 3
36309: NEG
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 4
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: PUSH
36329: LD_INT 3
36331: NEG
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 2
36342: NEG
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 0
36350: PUSH
36351: LD_INT 2
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 3
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 1
36373: NEG
36374: PUSH
36375: LD_INT 4
36377: NEG
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 2
36396: NEG
36397: PUSH
36398: LD_INT 4
36400: NEG
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 4
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 4
36418: PUSH
36419: LD_INT 1
36421: NEG
36422: PUSH
36423: EMPTY
36424: LIST
36425: LIST
36426: PUSH
36427: LD_INT 5
36429: PUSH
36430: LD_INT 0
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 5
36439: PUSH
36440: LD_INT 1
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 3
36459: PUSH
36460: LD_INT 0
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: PUSH
36467: LD_INT 3
36469: PUSH
36470: LD_INT 1
36472: NEG
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 3
36480: PUSH
36481: LD_INT 2
36483: NEG
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 5
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36546: LD_ADDR_VAR 0 32
36550: PUSH
36551: LD_INT 4
36553: NEG
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 4
36564: NEG
36565: PUSH
36566: LD_INT 1
36568: NEG
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 3
36576: NEG
36577: PUSH
36578: LD_INT 0
36580: PUSH
36581: EMPTY
36582: LIST
36583: LIST
36584: PUSH
36585: LD_INT 3
36587: NEG
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 4
36598: NEG
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 5
36609: NEG
36610: PUSH
36611: LD_INT 0
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 5
36620: NEG
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 5
36632: NEG
36633: PUSH
36634: LD_INT 2
36636: NEG
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 3
36644: NEG
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 3
36655: NEG
36656: PUSH
36657: LD_INT 3
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 3
36667: NEG
36668: PUSH
36669: LD_INT 4
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 2
36679: NEG
36680: PUSH
36681: LD_INT 3
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 3
36703: NEG
36704: PUSH
36705: LD_INT 2
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 4
36715: NEG
36716: PUSH
36717: LD_INT 3
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 4
36727: NEG
36728: PUSH
36729: LD_INT 4
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: LD_INT 4
36743: NEG
36744: PUSH
36745: EMPTY
36746: LIST
36747: LIST
36748: PUSH
36749: LD_INT 4
36751: NEG
36752: PUSH
36753: LD_INT 2
36755: NEG
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 4
36766: NEG
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: PUSH
36772: LD_INT 0
36774: PUSH
36775: LD_INT 5
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: LD_INT 4
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: PUSH
36797: LD_INT 3
36799: NEG
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 3
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: NEG
36819: PUSH
36820: LD_INT 4
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: NEG
36831: PUSH
36832: LD_INT 5
36834: NEG
36835: PUSH
36836: EMPTY
36837: LIST
36838: LIST
36839: PUSH
36840: LD_INT 2
36842: PUSH
36843: LD_INT 3
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: NEG
36854: PUSH
36855: LD_INT 5
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 3
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 3
36875: PUSH
36876: LD_INT 1
36878: NEG
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 4
36886: PUSH
36887: LD_INT 0
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 4
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 3
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 0
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: PUSH
36927: LD_INT 1
36929: NEG
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 2
36937: PUSH
36938: LD_INT 2
36940: NEG
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 4
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 4
36958: PUSH
36959: LD_INT 4
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 4
36968: PUSH
36969: LD_INT 3
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 5
36978: PUSH
36979: LD_INT 4
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 5
36988: PUSH
36989: LD_INT 5
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 4
36998: PUSH
36999: LD_INT 5
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 3
37008: PUSH
37009: LD_INT 4
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 3
37018: PUSH
37019: LD_INT 3
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 5
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 3
37038: PUSH
37039: LD_INT 5
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37093: LD_ADDR_VAR 0 33
37097: PUSH
37098: LD_INT 4
37100: NEG
37101: PUSH
37102: LD_INT 4
37104: NEG
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 4
37112: NEG
37113: PUSH
37114: LD_INT 5
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 3
37124: NEG
37125: PUSH
37126: LD_INT 4
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 3
37136: NEG
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 4
37148: NEG
37149: PUSH
37150: LD_INT 3
37152: NEG
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 5
37160: NEG
37161: PUSH
37162: LD_INT 4
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 5
37172: NEG
37173: PUSH
37174: LD_INT 5
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 3
37184: NEG
37185: PUSH
37186: LD_INT 5
37188: NEG
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 5
37196: NEG
37197: PUSH
37198: LD_INT 3
37200: NEG
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: LD_INT 3
37211: NEG
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 4
37222: NEG
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: LD_INT 3
37233: NEG
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 1
37241: PUSH
37242: LD_INT 2
37244: NEG
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 2
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: LD_INT 3
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: LD_INT 4
37279: NEG
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 2
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: LD_INT 4
37302: NEG
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 4
37310: PUSH
37311: LD_INT 0
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 4
37320: PUSH
37321: LD_INT 1
37323: NEG
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 5
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 5
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: LD_INT 4
37351: PUSH
37352: LD_INT 1
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 3
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: LD_INT 3
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 3
37382: PUSH
37383: LD_INT 2
37385: NEG
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: LD_INT 5
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 3
37413: PUSH
37414: LD_INT 2
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 4
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 4
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 3
37443: PUSH
37444: LD_INT 4
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 3
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 4
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 2
37483: PUSH
37484: LD_INT 4
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 4
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 3
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 1
37523: PUSH
37524: LD_INT 5
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: LD_INT 5
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 1
37543: NEG
37544: PUSH
37545: LD_INT 4
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: PUSH
37552: LD_INT 1
37554: NEG
37555: PUSH
37556: LD_INT 3
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 2
37565: PUSH
37566: LD_INT 5
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 2
37575: NEG
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37631: LD_ADDR_VAR 0 34
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 4
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 0
37649: PUSH
37650: LD_INT 5
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 4
37663: NEG
37664: PUSH
37665: EMPTY
37666: LIST
37667: LIST
37668: PUSH
37669: LD_INT 1
37671: PUSH
37672: LD_INT 3
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: LD_INT 0
37682: PUSH
37683: LD_INT 3
37685: NEG
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 1
37693: NEG
37694: PUSH
37695: LD_INT 4
37697: NEG
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 5
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 2
37717: PUSH
37718: LD_INT 3
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: NEG
37729: PUSH
37730: LD_INT 5
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 3
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: LD_INT 1
37753: NEG
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 4
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 4
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 3
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 2
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 2
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 4
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PUSH
37831: LD_INT 4
37833: PUSH
37834: LD_INT 4
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 4
37843: PUSH
37844: LD_INT 3
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 5
37853: PUSH
37854: LD_INT 4
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 5
37863: PUSH
37864: LD_INT 5
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 4
37873: PUSH
37874: LD_INT 5
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 3
37883: PUSH
37884: LD_INT 4
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 3
37893: PUSH
37894: LD_INT 3
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 5
37903: PUSH
37904: LD_INT 3
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: LD_INT 5
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 0
37923: PUSH
37924: LD_INT 3
37926: PUSH
37927: EMPTY
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PUSH
37941: LD_INT 1
37943: PUSH
37944: LD_INT 3
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 1
37953: PUSH
37954: LD_INT 4
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: LD_INT 4
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: LD_INT 3
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 1
37984: NEG
37985: PUSH
37986: LD_INT 2
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: PUSH
37993: LD_INT 2
37995: PUSH
37996: LD_INT 4
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 2
38005: NEG
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 4
38016: NEG
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 4
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 3
38039: NEG
38040: PUSH
38041: LD_INT 0
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: PUSH
38048: LD_INT 3
38050: NEG
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: PUSH
38059: LD_INT 4
38061: NEG
38062: PUSH
38063: LD_INT 1
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 5
38072: NEG
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 5
38083: NEG
38084: PUSH
38085: LD_INT 1
38087: NEG
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 5
38095: NEG
38096: PUSH
38097: LD_INT 2
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 3
38107: NEG
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: ST_TO_ADDR
// end ; end ;
38163: GO 38166
38165: POP
// case btype of b_depot , b_warehouse :
38166: LD_VAR 0 1
38170: PUSH
38171: LD_INT 0
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38185
38177: LD_INT 1
38179: DOUBLE
38180: EQUAL
38181: IFTRUE 38185
38183: GO 38386
38185: POP
// case nation of nation_american :
38186: LD_VAR 0 5
38190: PUSH
38191: LD_INT 1
38193: DOUBLE
38194: EQUAL
38195: IFTRUE 38199
38197: GO 38255
38199: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38200: LD_ADDR_VAR 0 9
38204: PUSH
38205: LD_VAR 0 11
38209: PUSH
38210: LD_VAR 0 12
38214: PUSH
38215: LD_VAR 0 13
38219: PUSH
38220: LD_VAR 0 14
38224: PUSH
38225: LD_VAR 0 15
38229: PUSH
38230: LD_VAR 0 16
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: PUSH
38243: LD_VAR 0 4
38247: PUSH
38248: LD_INT 1
38250: PLUS
38251: ARRAY
38252: ST_TO_ADDR
38253: GO 38384
38255: LD_INT 2
38257: DOUBLE
38258: EQUAL
38259: IFTRUE 38263
38261: GO 38319
38263: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38264: LD_ADDR_VAR 0 9
38268: PUSH
38269: LD_VAR 0 17
38273: PUSH
38274: LD_VAR 0 18
38278: PUSH
38279: LD_VAR 0 19
38283: PUSH
38284: LD_VAR 0 20
38288: PUSH
38289: LD_VAR 0 21
38293: PUSH
38294: LD_VAR 0 22
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: PUSH
38307: LD_VAR 0 4
38311: PUSH
38312: LD_INT 1
38314: PLUS
38315: ARRAY
38316: ST_TO_ADDR
38317: GO 38384
38319: LD_INT 3
38321: DOUBLE
38322: EQUAL
38323: IFTRUE 38327
38325: GO 38383
38327: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38328: LD_ADDR_VAR 0 9
38332: PUSH
38333: LD_VAR 0 23
38337: PUSH
38338: LD_VAR 0 24
38342: PUSH
38343: LD_VAR 0 25
38347: PUSH
38348: LD_VAR 0 26
38352: PUSH
38353: LD_VAR 0 27
38357: PUSH
38358: LD_VAR 0 28
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: PUSH
38371: LD_VAR 0 4
38375: PUSH
38376: LD_INT 1
38378: PLUS
38379: ARRAY
38380: ST_TO_ADDR
38381: GO 38384
38383: POP
38384: GO 38939
38386: LD_INT 2
38388: DOUBLE
38389: EQUAL
38390: IFTRUE 38400
38392: LD_INT 3
38394: DOUBLE
38395: EQUAL
38396: IFTRUE 38400
38398: GO 38456
38400: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38401: LD_ADDR_VAR 0 9
38405: PUSH
38406: LD_VAR 0 29
38410: PUSH
38411: LD_VAR 0 30
38415: PUSH
38416: LD_VAR 0 31
38420: PUSH
38421: LD_VAR 0 32
38425: PUSH
38426: LD_VAR 0 33
38430: PUSH
38431: LD_VAR 0 34
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: PUSH
38444: LD_VAR 0 4
38448: PUSH
38449: LD_INT 1
38451: PLUS
38452: ARRAY
38453: ST_TO_ADDR
38454: GO 38939
38456: LD_INT 16
38458: DOUBLE
38459: EQUAL
38460: IFTRUE 38518
38462: LD_INT 17
38464: DOUBLE
38465: EQUAL
38466: IFTRUE 38518
38468: LD_INT 18
38470: DOUBLE
38471: EQUAL
38472: IFTRUE 38518
38474: LD_INT 19
38476: DOUBLE
38477: EQUAL
38478: IFTRUE 38518
38480: LD_INT 22
38482: DOUBLE
38483: EQUAL
38484: IFTRUE 38518
38486: LD_INT 20
38488: DOUBLE
38489: EQUAL
38490: IFTRUE 38518
38492: LD_INT 21
38494: DOUBLE
38495: EQUAL
38496: IFTRUE 38518
38498: LD_INT 23
38500: DOUBLE
38501: EQUAL
38502: IFTRUE 38518
38504: LD_INT 24
38506: DOUBLE
38507: EQUAL
38508: IFTRUE 38518
38510: LD_INT 25
38512: DOUBLE
38513: EQUAL
38514: IFTRUE 38518
38516: GO 38574
38518: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38519: LD_ADDR_VAR 0 9
38523: PUSH
38524: LD_VAR 0 35
38528: PUSH
38529: LD_VAR 0 36
38533: PUSH
38534: LD_VAR 0 37
38538: PUSH
38539: LD_VAR 0 38
38543: PUSH
38544: LD_VAR 0 39
38548: PUSH
38549: LD_VAR 0 40
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: PUSH
38562: LD_VAR 0 4
38566: PUSH
38567: LD_INT 1
38569: PLUS
38570: ARRAY
38571: ST_TO_ADDR
38572: GO 38939
38574: LD_INT 6
38576: DOUBLE
38577: EQUAL
38578: IFTRUE 38630
38580: LD_INT 7
38582: DOUBLE
38583: EQUAL
38584: IFTRUE 38630
38586: LD_INT 8
38588: DOUBLE
38589: EQUAL
38590: IFTRUE 38630
38592: LD_INT 13
38594: DOUBLE
38595: EQUAL
38596: IFTRUE 38630
38598: LD_INT 12
38600: DOUBLE
38601: EQUAL
38602: IFTRUE 38630
38604: LD_INT 15
38606: DOUBLE
38607: EQUAL
38608: IFTRUE 38630
38610: LD_INT 11
38612: DOUBLE
38613: EQUAL
38614: IFTRUE 38630
38616: LD_INT 14
38618: DOUBLE
38619: EQUAL
38620: IFTRUE 38630
38622: LD_INT 10
38624: DOUBLE
38625: EQUAL
38626: IFTRUE 38630
38628: GO 38686
38630: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38631: LD_ADDR_VAR 0 9
38635: PUSH
38636: LD_VAR 0 41
38640: PUSH
38641: LD_VAR 0 42
38645: PUSH
38646: LD_VAR 0 43
38650: PUSH
38651: LD_VAR 0 44
38655: PUSH
38656: LD_VAR 0 45
38660: PUSH
38661: LD_VAR 0 46
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: PUSH
38674: LD_VAR 0 4
38678: PUSH
38679: LD_INT 1
38681: PLUS
38682: ARRAY
38683: ST_TO_ADDR
38684: GO 38939
38686: LD_INT 36
38688: DOUBLE
38689: EQUAL
38690: IFTRUE 38694
38692: GO 38750
38694: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38695: LD_ADDR_VAR 0 9
38699: PUSH
38700: LD_VAR 0 47
38704: PUSH
38705: LD_VAR 0 48
38709: PUSH
38710: LD_VAR 0 49
38714: PUSH
38715: LD_VAR 0 50
38719: PUSH
38720: LD_VAR 0 51
38724: PUSH
38725: LD_VAR 0 52
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: PUSH
38738: LD_VAR 0 4
38742: PUSH
38743: LD_INT 1
38745: PLUS
38746: ARRAY
38747: ST_TO_ADDR
38748: GO 38939
38750: LD_INT 4
38752: DOUBLE
38753: EQUAL
38754: IFTRUE 38776
38756: LD_INT 5
38758: DOUBLE
38759: EQUAL
38760: IFTRUE 38776
38762: LD_INT 34
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38776
38768: LD_INT 37
38770: DOUBLE
38771: EQUAL
38772: IFTRUE 38776
38774: GO 38832
38776: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
38777: LD_ADDR_VAR 0 9
38781: PUSH
38782: LD_VAR 0 53
38786: PUSH
38787: LD_VAR 0 54
38791: PUSH
38792: LD_VAR 0 55
38796: PUSH
38797: LD_VAR 0 56
38801: PUSH
38802: LD_VAR 0 57
38806: PUSH
38807: LD_VAR 0 58
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: PUSH
38820: LD_VAR 0 4
38824: PUSH
38825: LD_INT 1
38827: PLUS
38828: ARRAY
38829: ST_TO_ADDR
38830: GO 38939
38832: LD_INT 31
38834: DOUBLE
38835: EQUAL
38836: IFTRUE 38882
38838: LD_INT 32
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38882
38844: LD_INT 33
38846: DOUBLE
38847: EQUAL
38848: IFTRUE 38882
38850: LD_INT 27
38852: DOUBLE
38853: EQUAL
38854: IFTRUE 38882
38856: LD_INT 26
38858: DOUBLE
38859: EQUAL
38860: IFTRUE 38882
38862: LD_INT 28
38864: DOUBLE
38865: EQUAL
38866: IFTRUE 38882
38868: LD_INT 29
38870: DOUBLE
38871: EQUAL
38872: IFTRUE 38882
38874: LD_INT 30
38876: DOUBLE
38877: EQUAL
38878: IFTRUE 38882
38880: GO 38938
38882: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
38883: LD_ADDR_VAR 0 9
38887: PUSH
38888: LD_VAR 0 59
38892: PUSH
38893: LD_VAR 0 60
38897: PUSH
38898: LD_VAR 0 61
38902: PUSH
38903: LD_VAR 0 62
38907: PUSH
38908: LD_VAR 0 63
38912: PUSH
38913: LD_VAR 0 64
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: LD_VAR 0 4
38930: PUSH
38931: LD_INT 1
38933: PLUS
38934: ARRAY
38935: ST_TO_ADDR
38936: GO 38939
38938: POP
// temp_list2 = [ ] ;
38939: LD_ADDR_VAR 0 10
38943: PUSH
38944: EMPTY
38945: ST_TO_ADDR
// for i in temp_list do
38946: LD_ADDR_VAR 0 8
38950: PUSH
38951: LD_VAR 0 9
38955: PUSH
38956: FOR_IN
38957: IFFALSE 39009
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
38959: LD_ADDR_VAR 0 10
38963: PUSH
38964: LD_VAR 0 10
38968: PUSH
38969: LD_VAR 0 8
38973: PUSH
38974: LD_INT 1
38976: ARRAY
38977: PUSH
38978: LD_VAR 0 2
38982: PLUS
38983: PUSH
38984: LD_VAR 0 8
38988: PUSH
38989: LD_INT 2
38991: ARRAY
38992: PUSH
38993: LD_VAR 0 3
38997: PLUS
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: EMPTY
39004: LIST
39005: ADD
39006: ST_TO_ADDR
39007: GO 38956
39009: POP
39010: POP
// result = temp_list2 ;
39011: LD_ADDR_VAR 0 7
39015: PUSH
39016: LD_VAR 0 10
39020: ST_TO_ADDR
// end ;
39021: LD_VAR 0 7
39025: RET
// export function EnemyInRange ( unit , dist ) ; begin
39026: LD_INT 0
39028: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39029: LD_ADDR_VAR 0 3
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: CALL_OW 255
39043: PPUSH
39044: LD_VAR 0 1
39048: PPUSH
39049: CALL_OW 250
39053: PPUSH
39054: LD_VAR 0 1
39058: PPUSH
39059: CALL_OW 251
39063: PPUSH
39064: LD_VAR 0 2
39068: PPUSH
39069: CALL 12428 0 4
39073: PUSH
39074: LD_INT 4
39076: ARRAY
39077: ST_TO_ADDR
// end ;
39078: LD_VAR 0 3
39082: RET
// export function PlayerSeeMe ( unit ) ; begin
39083: LD_INT 0
39085: PPUSH
// result := See ( your_side , unit ) ;
39086: LD_ADDR_VAR 0 2
39090: PUSH
39091: LD_OWVAR 2
39095: PPUSH
39096: LD_VAR 0 1
39100: PPUSH
39101: CALL_OW 292
39105: ST_TO_ADDR
// end ;
39106: LD_VAR 0 2
39110: RET
// export function ReverseDir ( unit ) ; begin
39111: LD_INT 0
39113: PPUSH
// if not unit then
39114: LD_VAR 0 1
39118: NOT
39119: IFFALSE 39123
// exit ;
39121: GO 39146
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39123: LD_ADDR_VAR 0 2
39127: PUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 254
39137: PUSH
39138: LD_INT 3
39140: PLUS
39141: PUSH
39142: LD_INT 6
39144: MOD
39145: ST_TO_ADDR
// end ;
39146: LD_VAR 0 2
39150: RET
// export function ReverseArray ( array ) ; var i ; begin
39151: LD_INT 0
39153: PPUSH
39154: PPUSH
// if not array then
39155: LD_VAR 0 1
39159: NOT
39160: IFFALSE 39164
// exit ;
39162: GO 39219
// result := [ ] ;
39164: LD_ADDR_VAR 0 2
39168: PUSH
39169: EMPTY
39170: ST_TO_ADDR
// for i := array downto 1 do
39171: LD_ADDR_VAR 0 3
39175: PUSH
39176: DOUBLE
39177: LD_VAR 0 1
39181: INC
39182: ST_TO_ADDR
39183: LD_INT 1
39185: PUSH
39186: FOR_DOWNTO
39187: IFFALSE 39217
// result := Join ( result , array [ i ] ) ;
39189: LD_ADDR_VAR 0 2
39193: PUSH
39194: LD_VAR 0 2
39198: PPUSH
39199: LD_VAR 0 1
39203: PUSH
39204: LD_VAR 0 3
39208: ARRAY
39209: PPUSH
39210: CALL 43862 0 2
39214: ST_TO_ADDR
39215: GO 39186
39217: POP
39218: POP
// end ;
39219: LD_VAR 0 2
39223: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39224: LD_INT 0
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
39231: PPUSH
// if not unit or not hexes then
39232: LD_VAR 0 1
39236: NOT
39237: PUSH
39238: LD_VAR 0 2
39242: NOT
39243: OR
39244: IFFALSE 39248
// exit ;
39246: GO 39371
// dist := 9999 ;
39248: LD_ADDR_VAR 0 5
39252: PUSH
39253: LD_INT 9999
39255: ST_TO_ADDR
// for i = 1 to hexes do
39256: LD_ADDR_VAR 0 4
39260: PUSH
39261: DOUBLE
39262: LD_INT 1
39264: DEC
39265: ST_TO_ADDR
39266: LD_VAR 0 2
39270: PUSH
39271: FOR_TO
39272: IFFALSE 39359
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39274: LD_ADDR_VAR 0 6
39278: PUSH
39279: LD_VAR 0 1
39283: PPUSH
39284: LD_VAR 0 2
39288: PUSH
39289: LD_VAR 0 4
39293: ARRAY
39294: PUSH
39295: LD_INT 1
39297: ARRAY
39298: PPUSH
39299: LD_VAR 0 2
39303: PUSH
39304: LD_VAR 0 4
39308: ARRAY
39309: PUSH
39310: LD_INT 2
39312: ARRAY
39313: PPUSH
39314: CALL_OW 297
39318: ST_TO_ADDR
// if tdist < dist then
39319: LD_VAR 0 6
39323: PUSH
39324: LD_VAR 0 5
39328: LESS
39329: IFFALSE 39357
// begin hex := hexes [ i ] ;
39331: LD_ADDR_VAR 0 8
39335: PUSH
39336: LD_VAR 0 2
39340: PUSH
39341: LD_VAR 0 4
39345: ARRAY
39346: ST_TO_ADDR
// dist := tdist ;
39347: LD_ADDR_VAR 0 5
39351: PUSH
39352: LD_VAR 0 6
39356: ST_TO_ADDR
// end ; end ;
39357: GO 39271
39359: POP
39360: POP
// result := hex ;
39361: LD_ADDR_VAR 0 3
39365: PUSH
39366: LD_VAR 0 8
39370: ST_TO_ADDR
// end ;
39371: LD_VAR 0 3
39375: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39376: LD_INT 0
39378: PPUSH
39379: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39380: LD_VAR 0 1
39384: NOT
39385: PUSH
39386: LD_VAR 0 1
39390: PUSH
39391: LD_INT 21
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 23
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PPUSH
39415: CALL_OW 69
39419: IN
39420: NOT
39421: OR
39422: IFFALSE 39426
// exit ;
39424: GO 39473
// for i = 1 to 3 do
39426: LD_ADDR_VAR 0 3
39430: PUSH
39431: DOUBLE
39432: LD_INT 1
39434: DEC
39435: ST_TO_ADDR
39436: LD_INT 3
39438: PUSH
39439: FOR_TO
39440: IFFALSE 39471
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39442: LD_VAR 0 1
39446: PPUSH
39447: CALL_OW 250
39451: PPUSH
39452: LD_VAR 0 1
39456: PPUSH
39457: CALL_OW 251
39461: PPUSH
39462: LD_INT 1
39464: PPUSH
39465: CALL_OW 453
39469: GO 39439
39471: POP
39472: POP
// end ;
39473: LD_VAR 0 2
39477: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39478: LD_INT 0
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39486: LD_VAR 0 1
39490: NOT
39491: PUSH
39492: LD_VAR 0 2
39496: NOT
39497: OR
39498: PUSH
39499: LD_VAR 0 1
39503: PPUSH
39504: CALL_OW 314
39508: OR
39509: IFFALSE 39513
// exit ;
39511: GO 39980
// if GetLives ( i ) < 250 then
39513: LD_VAR 0 4
39517: PPUSH
39518: CALL_OW 256
39522: PUSH
39523: LD_INT 250
39525: LESS
39526: IFFALSE 39539
// begin ComAutodestruct ( i ) ;
39528: LD_VAR 0 4
39532: PPUSH
39533: CALL 39376 0 1
// exit ;
39537: GO 39980
// end ; x := GetX ( enemy_unit ) ;
39539: LD_ADDR_VAR 0 7
39543: PUSH
39544: LD_VAR 0 2
39548: PPUSH
39549: CALL_OW 250
39553: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39554: LD_ADDR_VAR 0 8
39558: PUSH
39559: LD_VAR 0 2
39563: PPUSH
39564: CALL_OW 251
39568: ST_TO_ADDR
// if not x or not y then
39569: LD_VAR 0 7
39573: NOT
39574: PUSH
39575: LD_VAR 0 8
39579: NOT
39580: OR
39581: IFFALSE 39585
// exit ;
39583: GO 39980
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39585: LD_ADDR_VAR 0 6
39589: PUSH
39590: LD_VAR 0 7
39594: PPUSH
39595: LD_INT 0
39597: PPUSH
39598: LD_INT 4
39600: PPUSH
39601: CALL_OW 272
39605: PUSH
39606: LD_VAR 0 8
39610: PPUSH
39611: LD_INT 0
39613: PPUSH
39614: LD_INT 4
39616: PPUSH
39617: CALL_OW 273
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_VAR 0 7
39630: PPUSH
39631: LD_INT 1
39633: PPUSH
39634: LD_INT 4
39636: PPUSH
39637: CALL_OW 272
39641: PUSH
39642: LD_VAR 0 8
39646: PPUSH
39647: LD_INT 1
39649: PPUSH
39650: LD_INT 4
39652: PPUSH
39653: CALL_OW 273
39657: PUSH
39658: EMPTY
39659: LIST
39660: LIST
39661: PUSH
39662: LD_VAR 0 7
39666: PPUSH
39667: LD_INT 2
39669: PPUSH
39670: LD_INT 4
39672: PPUSH
39673: CALL_OW 272
39677: PUSH
39678: LD_VAR 0 8
39682: PPUSH
39683: LD_INT 2
39685: PPUSH
39686: LD_INT 4
39688: PPUSH
39689: CALL_OW 273
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_VAR 0 7
39702: PPUSH
39703: LD_INT 3
39705: PPUSH
39706: LD_INT 4
39708: PPUSH
39709: CALL_OW 272
39713: PUSH
39714: LD_VAR 0 8
39718: PPUSH
39719: LD_INT 3
39721: PPUSH
39722: LD_INT 4
39724: PPUSH
39725: CALL_OW 273
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_VAR 0 7
39738: PPUSH
39739: LD_INT 4
39741: PPUSH
39742: LD_INT 4
39744: PPUSH
39745: CALL_OW 272
39749: PUSH
39750: LD_VAR 0 8
39754: PPUSH
39755: LD_INT 4
39757: PPUSH
39758: LD_INT 4
39760: PPUSH
39761: CALL_OW 273
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_VAR 0 7
39774: PPUSH
39775: LD_INT 5
39777: PPUSH
39778: LD_INT 4
39780: PPUSH
39781: CALL_OW 272
39785: PUSH
39786: LD_VAR 0 8
39790: PPUSH
39791: LD_INT 5
39793: PPUSH
39794: LD_INT 4
39796: PPUSH
39797: CALL_OW 273
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: ST_TO_ADDR
// for i = tmp downto 1 do
39814: LD_ADDR_VAR 0 4
39818: PUSH
39819: DOUBLE
39820: LD_VAR 0 6
39824: INC
39825: ST_TO_ADDR
39826: LD_INT 1
39828: PUSH
39829: FOR_DOWNTO
39830: IFFALSE 39931
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
39832: LD_VAR 0 6
39836: PUSH
39837: LD_VAR 0 4
39841: ARRAY
39842: PUSH
39843: LD_INT 1
39845: ARRAY
39846: PPUSH
39847: LD_VAR 0 6
39851: PUSH
39852: LD_VAR 0 4
39856: ARRAY
39857: PUSH
39858: LD_INT 2
39860: ARRAY
39861: PPUSH
39862: CALL_OW 488
39866: NOT
39867: PUSH
39868: LD_VAR 0 6
39872: PUSH
39873: LD_VAR 0 4
39877: ARRAY
39878: PUSH
39879: LD_INT 1
39881: ARRAY
39882: PPUSH
39883: LD_VAR 0 6
39887: PUSH
39888: LD_VAR 0 4
39892: ARRAY
39893: PUSH
39894: LD_INT 2
39896: ARRAY
39897: PPUSH
39898: CALL_OW 428
39902: PUSH
39903: LD_INT 0
39905: NONEQUAL
39906: OR
39907: IFFALSE 39929
// tmp := Delete ( tmp , i ) ;
39909: LD_ADDR_VAR 0 6
39913: PUSH
39914: LD_VAR 0 6
39918: PPUSH
39919: LD_VAR 0 4
39923: PPUSH
39924: CALL_OW 3
39928: ST_TO_ADDR
39929: GO 39829
39931: POP
39932: POP
// j := GetClosestHex ( unit , tmp ) ;
39933: LD_ADDR_VAR 0 5
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: LD_VAR 0 6
39947: PPUSH
39948: CALL 39224 0 2
39952: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
39953: LD_VAR 0 1
39957: PPUSH
39958: LD_VAR 0 5
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PPUSH
39967: LD_VAR 0 5
39971: PUSH
39972: LD_INT 2
39974: ARRAY
39975: PPUSH
39976: CALL_OW 111
// end ;
39980: LD_VAR 0 3
39984: RET
// export function PrepareApemanSoldier ( ) ; begin
39985: LD_INT 0
39987: PPUSH
// uc_nation := 0 ;
39988: LD_ADDR_OWVAR 21
39992: PUSH
39993: LD_INT 0
39995: ST_TO_ADDR
// hc_sex := sex_male ;
39996: LD_ADDR_OWVAR 27
40000: PUSH
40001: LD_INT 1
40003: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
40004: LD_ADDR_OWVAR 28
40008: PUSH
40009: LD_INT 15
40011: ST_TO_ADDR
// hc_gallery :=  ;
40012: LD_ADDR_OWVAR 33
40016: PUSH
40017: LD_STRING 
40019: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40020: LD_ADDR_OWVAR 31
40024: PUSH
40025: LD_INT 0
40027: PPUSH
40028: LD_INT 3
40030: PPUSH
40031: CALL_OW 12
40035: PUSH
40036: LD_INT 0
40038: PPUSH
40039: LD_INT 3
40041: PPUSH
40042: CALL_OW 12
40046: PUSH
40047: LD_INT 0
40049: PUSH
40050: LD_INT 0
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: ST_TO_ADDR
// end ;
40059: LD_VAR 0 1
40063: RET
// export function PrepareApemanEngineer ( ) ; begin
40064: LD_INT 0
40066: PPUSH
// uc_nation := 0 ;
40067: LD_ADDR_OWVAR 21
40071: PUSH
40072: LD_INT 0
40074: ST_TO_ADDR
// hc_sex := sex_male ;
40075: LD_ADDR_OWVAR 27
40079: PUSH
40080: LD_INT 1
40082: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40083: LD_ADDR_OWVAR 28
40087: PUSH
40088: LD_INT 16
40090: ST_TO_ADDR
// hc_gallery :=  ;
40091: LD_ADDR_OWVAR 33
40095: PUSH
40096: LD_STRING 
40098: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40099: LD_ADDR_OWVAR 31
40103: PUSH
40104: LD_INT 0
40106: PPUSH
40107: LD_INT 3
40109: PPUSH
40110: CALL_OW 12
40114: PUSH
40115: LD_INT 0
40117: PPUSH
40118: LD_INT 3
40120: PPUSH
40121: CALL_OW 12
40125: PUSH
40126: LD_INT 0
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: LIST
40136: LIST
40137: ST_TO_ADDR
// end ;
40138: LD_VAR 0 1
40142: RET
// export function PrepareApeman ( agressivity ) ; begin
40143: LD_INT 0
40145: PPUSH
// uc_side := 0 ;
40146: LD_ADDR_OWVAR 20
40150: PUSH
40151: LD_INT 0
40153: ST_TO_ADDR
// uc_nation := 0 ;
40154: LD_ADDR_OWVAR 21
40158: PUSH
40159: LD_INT 0
40161: ST_TO_ADDR
// hc_sex := sex_male ;
40162: LD_ADDR_OWVAR 27
40166: PUSH
40167: LD_INT 1
40169: ST_TO_ADDR
// hc_class := class_apeman ;
40170: LD_ADDR_OWVAR 28
40174: PUSH
40175: LD_INT 12
40177: ST_TO_ADDR
// hc_gallery :=  ;
40178: LD_ADDR_OWVAR 33
40182: PUSH
40183: LD_STRING 
40185: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40186: LD_ADDR_OWVAR 35
40190: PUSH
40191: LD_VAR 0 1
40195: NEG
40196: PPUSH
40197: LD_VAR 0 1
40201: PPUSH
40202: CALL_OW 12
40206: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40207: LD_ADDR_OWVAR 31
40211: PUSH
40212: LD_INT 0
40214: PPUSH
40215: LD_INT 3
40217: PPUSH
40218: CALL_OW 12
40222: PUSH
40223: LD_INT 0
40225: PPUSH
40226: LD_INT 3
40228: PPUSH
40229: CALL_OW 12
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: ST_TO_ADDR
// end ;
40246: LD_VAR 0 2
40250: RET
// export function PrepareTiger ( agressivity ) ; begin
40251: LD_INT 0
40253: PPUSH
// uc_side := 0 ;
40254: LD_ADDR_OWVAR 20
40258: PUSH
40259: LD_INT 0
40261: ST_TO_ADDR
// uc_nation := 0 ;
40262: LD_ADDR_OWVAR 21
40266: PUSH
40267: LD_INT 0
40269: ST_TO_ADDR
// hc_class := class_tiger ;
40270: LD_ADDR_OWVAR 28
40274: PUSH
40275: LD_INT 14
40277: ST_TO_ADDR
// hc_gallery :=  ;
40278: LD_ADDR_OWVAR 33
40282: PUSH
40283: LD_STRING 
40285: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40286: LD_ADDR_OWVAR 35
40290: PUSH
40291: LD_VAR 0 1
40295: NEG
40296: PPUSH
40297: LD_VAR 0 1
40301: PPUSH
40302: CALL_OW 12
40306: ST_TO_ADDR
// end ;
40307: LD_VAR 0 2
40311: RET
// export function PrepareEnchidna ( ) ; begin
40312: LD_INT 0
40314: PPUSH
// uc_side := 0 ;
40315: LD_ADDR_OWVAR 20
40319: PUSH
40320: LD_INT 0
40322: ST_TO_ADDR
// uc_nation := 0 ;
40323: LD_ADDR_OWVAR 21
40327: PUSH
40328: LD_INT 0
40330: ST_TO_ADDR
// hc_class := class_baggie ;
40331: LD_ADDR_OWVAR 28
40335: PUSH
40336: LD_INT 13
40338: ST_TO_ADDR
// hc_gallery :=  ;
40339: LD_ADDR_OWVAR 33
40343: PUSH
40344: LD_STRING 
40346: ST_TO_ADDR
// end ;
40347: LD_VAR 0 1
40351: RET
// export function PrepareFrog ( ) ; begin
40352: LD_INT 0
40354: PPUSH
// uc_side := 0 ;
40355: LD_ADDR_OWVAR 20
40359: PUSH
40360: LD_INT 0
40362: ST_TO_ADDR
// uc_nation := 0 ;
40363: LD_ADDR_OWVAR 21
40367: PUSH
40368: LD_INT 0
40370: ST_TO_ADDR
// hc_class := class_frog ;
40371: LD_ADDR_OWVAR 28
40375: PUSH
40376: LD_INT 19
40378: ST_TO_ADDR
// hc_gallery :=  ;
40379: LD_ADDR_OWVAR 33
40383: PUSH
40384: LD_STRING 
40386: ST_TO_ADDR
// end ;
40387: LD_VAR 0 1
40391: RET
// export function PrepareFish ( ) ; begin
40392: LD_INT 0
40394: PPUSH
// uc_side := 0 ;
40395: LD_ADDR_OWVAR 20
40399: PUSH
40400: LD_INT 0
40402: ST_TO_ADDR
// uc_nation := 0 ;
40403: LD_ADDR_OWVAR 21
40407: PUSH
40408: LD_INT 0
40410: ST_TO_ADDR
// hc_class := class_fish ;
40411: LD_ADDR_OWVAR 28
40415: PUSH
40416: LD_INT 20
40418: ST_TO_ADDR
// hc_gallery :=  ;
40419: LD_ADDR_OWVAR 33
40423: PUSH
40424: LD_STRING 
40426: ST_TO_ADDR
// end ;
40427: LD_VAR 0 1
40431: RET
// export function PrepareBird ( ) ; begin
40432: LD_INT 0
40434: PPUSH
// uc_side := 0 ;
40435: LD_ADDR_OWVAR 20
40439: PUSH
40440: LD_INT 0
40442: ST_TO_ADDR
// uc_nation := 0 ;
40443: LD_ADDR_OWVAR 21
40447: PUSH
40448: LD_INT 0
40450: ST_TO_ADDR
// hc_class := class_phororhacos ;
40451: LD_ADDR_OWVAR 28
40455: PUSH
40456: LD_INT 18
40458: ST_TO_ADDR
// hc_gallery :=  ;
40459: LD_ADDR_OWVAR 33
40463: PUSH
40464: LD_STRING 
40466: ST_TO_ADDR
// end ;
40467: LD_VAR 0 1
40471: RET
// export function PrepareHorse ( ) ; begin
40472: LD_INT 0
40474: PPUSH
// uc_side := 0 ;
40475: LD_ADDR_OWVAR 20
40479: PUSH
40480: LD_INT 0
40482: ST_TO_ADDR
// uc_nation := 0 ;
40483: LD_ADDR_OWVAR 21
40487: PUSH
40488: LD_INT 0
40490: ST_TO_ADDR
// hc_class := class_horse ;
40491: LD_ADDR_OWVAR 28
40495: PUSH
40496: LD_INT 21
40498: ST_TO_ADDR
// hc_gallery :=  ;
40499: LD_ADDR_OWVAR 33
40503: PUSH
40504: LD_STRING 
40506: ST_TO_ADDR
// end ;
40507: LD_VAR 0 1
40511: RET
// export function PrepareMastodont ( ) ; begin
40512: LD_INT 0
40514: PPUSH
// uc_side := 0 ;
40515: LD_ADDR_OWVAR 20
40519: PUSH
40520: LD_INT 0
40522: ST_TO_ADDR
// uc_nation := 0 ;
40523: LD_ADDR_OWVAR 21
40527: PUSH
40528: LD_INT 0
40530: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40531: LD_ADDR_OWVAR 37
40535: PUSH
40536: LD_INT 31
40538: ST_TO_ADDR
// vc_control := control_rider ;
40539: LD_ADDR_OWVAR 38
40543: PUSH
40544: LD_INT 4
40546: ST_TO_ADDR
// end ;
40547: LD_VAR 0 1
40551: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40552: LD_INT 0
40554: PPUSH
40555: PPUSH
40556: PPUSH
// uc_side = 0 ;
40557: LD_ADDR_OWVAR 20
40561: PUSH
40562: LD_INT 0
40564: ST_TO_ADDR
// uc_nation = 0 ;
40565: LD_ADDR_OWVAR 21
40569: PUSH
40570: LD_INT 0
40572: ST_TO_ADDR
// InitHc_All ( ) ;
40573: CALL_OW 584
// InitVc ;
40577: CALL_OW 20
// if mastodonts then
40581: LD_VAR 0 6
40585: IFFALSE 40652
// for i = 1 to mastodonts do
40587: LD_ADDR_VAR 0 11
40591: PUSH
40592: DOUBLE
40593: LD_INT 1
40595: DEC
40596: ST_TO_ADDR
40597: LD_VAR 0 6
40601: PUSH
40602: FOR_TO
40603: IFFALSE 40650
// begin vc_chassis := 31 ;
40605: LD_ADDR_OWVAR 37
40609: PUSH
40610: LD_INT 31
40612: ST_TO_ADDR
// vc_control := control_rider ;
40613: LD_ADDR_OWVAR 38
40617: PUSH
40618: LD_INT 4
40620: ST_TO_ADDR
// animal := CreateVehicle ;
40621: LD_ADDR_VAR 0 12
40625: PUSH
40626: CALL_OW 45
40630: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40631: LD_VAR 0 12
40635: PPUSH
40636: LD_VAR 0 8
40640: PPUSH
40641: LD_INT 0
40643: PPUSH
40644: CALL 42780 0 3
// end ;
40648: GO 40602
40650: POP
40651: POP
// if horses then
40652: LD_VAR 0 5
40656: IFFALSE 40723
// for i = 1 to horses do
40658: LD_ADDR_VAR 0 11
40662: PUSH
40663: DOUBLE
40664: LD_INT 1
40666: DEC
40667: ST_TO_ADDR
40668: LD_VAR 0 5
40672: PUSH
40673: FOR_TO
40674: IFFALSE 40721
// begin hc_class := 21 ;
40676: LD_ADDR_OWVAR 28
40680: PUSH
40681: LD_INT 21
40683: ST_TO_ADDR
// hc_gallery :=  ;
40684: LD_ADDR_OWVAR 33
40688: PUSH
40689: LD_STRING 
40691: ST_TO_ADDR
// animal := CreateHuman ;
40692: LD_ADDR_VAR 0 12
40696: PUSH
40697: CALL_OW 44
40701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40702: LD_VAR 0 12
40706: PPUSH
40707: LD_VAR 0 8
40711: PPUSH
40712: LD_INT 0
40714: PPUSH
40715: CALL 42780 0 3
// end ;
40719: GO 40673
40721: POP
40722: POP
// if birds then
40723: LD_VAR 0 1
40727: IFFALSE 40794
// for i = 1 to birds do
40729: LD_ADDR_VAR 0 11
40733: PUSH
40734: DOUBLE
40735: LD_INT 1
40737: DEC
40738: ST_TO_ADDR
40739: LD_VAR 0 1
40743: PUSH
40744: FOR_TO
40745: IFFALSE 40792
// begin hc_class = 18 ;
40747: LD_ADDR_OWVAR 28
40751: PUSH
40752: LD_INT 18
40754: ST_TO_ADDR
// hc_gallery =  ;
40755: LD_ADDR_OWVAR 33
40759: PUSH
40760: LD_STRING 
40762: ST_TO_ADDR
// animal := CreateHuman ;
40763: LD_ADDR_VAR 0 12
40767: PUSH
40768: CALL_OW 44
40772: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40773: LD_VAR 0 12
40777: PPUSH
40778: LD_VAR 0 8
40782: PPUSH
40783: LD_INT 0
40785: PPUSH
40786: CALL 42780 0 3
// end ;
40790: GO 40744
40792: POP
40793: POP
// if tigers then
40794: LD_VAR 0 2
40798: IFFALSE 40882
// for i = 1 to tigers do
40800: LD_ADDR_VAR 0 11
40804: PUSH
40805: DOUBLE
40806: LD_INT 1
40808: DEC
40809: ST_TO_ADDR
40810: LD_VAR 0 2
40814: PUSH
40815: FOR_TO
40816: IFFALSE 40880
// begin hc_class = class_tiger ;
40818: LD_ADDR_OWVAR 28
40822: PUSH
40823: LD_INT 14
40825: ST_TO_ADDR
// hc_gallery =  ;
40826: LD_ADDR_OWVAR 33
40830: PUSH
40831: LD_STRING 
40833: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
40834: LD_ADDR_OWVAR 35
40838: PUSH
40839: LD_INT 7
40841: NEG
40842: PPUSH
40843: LD_INT 7
40845: PPUSH
40846: CALL_OW 12
40850: ST_TO_ADDR
// animal := CreateHuman ;
40851: LD_ADDR_VAR 0 12
40855: PUSH
40856: CALL_OW 44
40860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40861: LD_VAR 0 12
40865: PPUSH
40866: LD_VAR 0 8
40870: PPUSH
40871: LD_INT 0
40873: PPUSH
40874: CALL 42780 0 3
// end ;
40878: GO 40815
40880: POP
40881: POP
// if apemans then
40882: LD_VAR 0 3
40886: IFFALSE 41009
// for i = 1 to apemans do
40888: LD_ADDR_VAR 0 11
40892: PUSH
40893: DOUBLE
40894: LD_INT 1
40896: DEC
40897: ST_TO_ADDR
40898: LD_VAR 0 3
40902: PUSH
40903: FOR_TO
40904: IFFALSE 41007
// begin hc_class = class_apeman ;
40906: LD_ADDR_OWVAR 28
40910: PUSH
40911: LD_INT 12
40913: ST_TO_ADDR
// hc_gallery =  ;
40914: LD_ADDR_OWVAR 33
40918: PUSH
40919: LD_STRING 
40921: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
40922: LD_ADDR_OWVAR 35
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PPUSH
40931: LD_INT 2
40933: PPUSH
40934: CALL_OW 12
40938: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
40939: LD_ADDR_OWVAR 31
40943: PUSH
40944: LD_INT 1
40946: PPUSH
40947: LD_INT 3
40949: PPUSH
40950: CALL_OW 12
40954: PUSH
40955: LD_INT 1
40957: PPUSH
40958: LD_INT 3
40960: PPUSH
40961: CALL_OW 12
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// animal := CreateHuman ;
40978: LD_ADDR_VAR 0 12
40982: PUSH
40983: CALL_OW 44
40987: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40988: LD_VAR 0 12
40992: PPUSH
40993: LD_VAR 0 8
40997: PPUSH
40998: LD_INT 0
41000: PPUSH
41001: CALL 42780 0 3
// end ;
41005: GO 40903
41007: POP
41008: POP
// if enchidnas then
41009: LD_VAR 0 4
41013: IFFALSE 41080
// for i = 1 to enchidnas do
41015: LD_ADDR_VAR 0 11
41019: PUSH
41020: DOUBLE
41021: LD_INT 1
41023: DEC
41024: ST_TO_ADDR
41025: LD_VAR 0 4
41029: PUSH
41030: FOR_TO
41031: IFFALSE 41078
// begin hc_class = 13 ;
41033: LD_ADDR_OWVAR 28
41037: PUSH
41038: LD_INT 13
41040: ST_TO_ADDR
// hc_gallery =  ;
41041: LD_ADDR_OWVAR 33
41045: PUSH
41046: LD_STRING 
41048: ST_TO_ADDR
// animal := CreateHuman ;
41049: LD_ADDR_VAR 0 12
41053: PUSH
41054: CALL_OW 44
41058: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41059: LD_VAR 0 12
41063: PPUSH
41064: LD_VAR 0 8
41068: PPUSH
41069: LD_INT 0
41071: PPUSH
41072: CALL 42780 0 3
// end ;
41076: GO 41030
41078: POP
41079: POP
// if fishes then
41080: LD_VAR 0 7
41084: IFFALSE 41151
// for i = 1 to fishes do
41086: LD_ADDR_VAR 0 11
41090: PUSH
41091: DOUBLE
41092: LD_INT 1
41094: DEC
41095: ST_TO_ADDR
41096: LD_VAR 0 7
41100: PUSH
41101: FOR_TO
41102: IFFALSE 41149
// begin hc_class = 20 ;
41104: LD_ADDR_OWVAR 28
41108: PUSH
41109: LD_INT 20
41111: ST_TO_ADDR
// hc_gallery =  ;
41112: LD_ADDR_OWVAR 33
41116: PUSH
41117: LD_STRING 
41119: ST_TO_ADDR
// animal := CreateHuman ;
41120: LD_ADDR_VAR 0 12
41124: PUSH
41125: CALL_OW 44
41129: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41130: LD_VAR 0 12
41134: PPUSH
41135: LD_VAR 0 9
41139: PPUSH
41140: LD_INT 0
41142: PPUSH
41143: CALL 42780 0 3
// end ;
41147: GO 41101
41149: POP
41150: POP
// end ;
41151: LD_VAR 0 10
41155: RET
// export function WantHeal ( sci , unit ) ; begin
41156: LD_INT 0
41158: PPUSH
// if GetTaskList ( sci ) > 0 then
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 437
41168: PUSH
41169: LD_INT 0
41171: GREATER
41172: IFFALSE 41242
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41174: LD_VAR 0 1
41178: PPUSH
41179: CALL_OW 437
41183: PUSH
41184: LD_INT 1
41186: ARRAY
41187: PUSH
41188: LD_INT 1
41190: ARRAY
41191: PUSH
41192: LD_STRING l
41194: EQUAL
41195: PUSH
41196: LD_VAR 0 1
41200: PPUSH
41201: CALL_OW 437
41205: PUSH
41206: LD_INT 1
41208: ARRAY
41209: PUSH
41210: LD_INT 4
41212: ARRAY
41213: PUSH
41214: LD_VAR 0 2
41218: EQUAL
41219: AND
41220: IFFALSE 41232
// result := true else
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 1
41229: ST_TO_ADDR
41230: GO 41240
// result := false ;
41232: LD_ADDR_VAR 0 3
41236: PUSH
41237: LD_INT 0
41239: ST_TO_ADDR
// end else
41240: GO 41250
// result := false ;
41242: LD_ADDR_VAR 0 3
41246: PUSH
41247: LD_INT 0
41249: ST_TO_ADDR
// end ;
41250: LD_VAR 0 3
41254: RET
// export function HealTarget ( sci ) ; begin
41255: LD_INT 0
41257: PPUSH
// if not sci then
41258: LD_VAR 0 1
41262: NOT
41263: IFFALSE 41267
// exit ;
41265: GO 41332
// result := 0 ;
41267: LD_ADDR_VAR 0 2
41271: PUSH
41272: LD_INT 0
41274: ST_TO_ADDR
// if GetTaskList ( sci ) then
41275: LD_VAR 0 1
41279: PPUSH
41280: CALL_OW 437
41284: IFFALSE 41332
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41286: LD_VAR 0 1
41290: PPUSH
41291: CALL_OW 437
41295: PUSH
41296: LD_INT 1
41298: ARRAY
41299: PUSH
41300: LD_INT 1
41302: ARRAY
41303: PUSH
41304: LD_STRING l
41306: EQUAL
41307: IFFALSE 41332
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41309: LD_ADDR_VAR 0 2
41313: PUSH
41314: LD_VAR 0 1
41318: PPUSH
41319: CALL_OW 437
41323: PUSH
41324: LD_INT 1
41326: ARRAY
41327: PUSH
41328: LD_INT 4
41330: ARRAY
41331: ST_TO_ADDR
// end ;
41332: LD_VAR 0 2
41336: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41337: LD_INT 0
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
// if not base_units then
41343: LD_VAR 0 1
41347: NOT
41348: IFFALSE 41352
// exit ;
41350: GO 41439
// result := false ;
41352: LD_ADDR_VAR 0 2
41356: PUSH
41357: LD_INT 0
41359: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41360: LD_ADDR_VAR 0 5
41364: PUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: LD_INT 21
41372: PUSH
41373: LD_INT 3
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PPUSH
41380: CALL_OW 72
41384: ST_TO_ADDR
// if not tmp then
41385: LD_VAR 0 5
41389: NOT
41390: IFFALSE 41394
// exit ;
41392: GO 41439
// for i in tmp do
41394: LD_ADDR_VAR 0 3
41398: PUSH
41399: LD_VAR 0 5
41403: PUSH
41404: FOR_IN
41405: IFFALSE 41437
// begin result := EnemyInRange ( i , 22 ) ;
41407: LD_ADDR_VAR 0 2
41411: PUSH
41412: LD_VAR 0 3
41416: PPUSH
41417: LD_INT 22
41419: PPUSH
41420: CALL 39026 0 2
41424: ST_TO_ADDR
// if result then
41425: LD_VAR 0 2
41429: IFFALSE 41435
// exit ;
41431: POP
41432: POP
41433: GO 41439
// end ;
41435: GO 41404
41437: POP
41438: POP
// end ;
41439: LD_VAR 0 2
41443: RET
// export function FilterByTag ( units , tag ) ; begin
41444: LD_INT 0
41446: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41447: LD_ADDR_VAR 0 3
41451: PUSH
41452: LD_VAR 0 1
41456: PPUSH
41457: LD_INT 120
41459: PUSH
41460: LD_VAR 0 2
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PPUSH
41469: CALL_OW 72
41473: ST_TO_ADDR
// end ;
41474: LD_VAR 0 3
41478: RET
// export function IsDriver ( un ) ; begin
41479: LD_INT 0
41481: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41482: LD_ADDR_VAR 0 2
41486: PUSH
41487: LD_VAR 0 1
41491: PUSH
41492: LD_INT 55
41494: PUSH
41495: EMPTY
41496: LIST
41497: PPUSH
41498: CALL_OW 69
41502: IN
41503: ST_TO_ADDR
// end ;
41504: LD_VAR 0 2
41508: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41509: LD_INT 0
41511: PPUSH
41512: PPUSH
// list := [ ] ;
41513: LD_ADDR_VAR 0 5
41517: PUSH
41518: EMPTY
41519: ST_TO_ADDR
// case d of 0 :
41520: LD_VAR 0 3
41524: PUSH
41525: LD_INT 0
41527: DOUBLE
41528: EQUAL
41529: IFTRUE 41533
41531: GO 41666
41533: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41534: LD_ADDR_VAR 0 5
41538: PUSH
41539: LD_VAR 0 1
41543: PUSH
41544: LD_INT 4
41546: MINUS
41547: PUSH
41548: LD_VAR 0 2
41552: PUSH
41553: LD_INT 4
41555: MINUS
41556: PUSH
41557: LD_INT 2
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: PUSH
41565: LD_VAR 0 1
41569: PUSH
41570: LD_INT 3
41572: MINUS
41573: PUSH
41574: LD_VAR 0 2
41578: PUSH
41579: LD_INT 1
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: LIST
41586: PUSH
41587: LD_VAR 0 1
41591: PUSH
41592: LD_INT 4
41594: PLUS
41595: PUSH
41596: LD_VAR 0 2
41600: PUSH
41601: LD_INT 4
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: LIST
41608: PUSH
41609: LD_VAR 0 1
41613: PUSH
41614: LD_INT 3
41616: PLUS
41617: PUSH
41618: LD_VAR 0 2
41622: PUSH
41623: LD_INT 3
41625: PLUS
41626: PUSH
41627: LD_INT 5
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: PUSH
41635: LD_VAR 0 1
41639: PUSH
41640: LD_VAR 0 2
41644: PUSH
41645: LD_INT 4
41647: PLUS
41648: PUSH
41649: LD_INT 0
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: ST_TO_ADDR
// end ; 1 :
41664: GO 42364
41666: LD_INT 1
41668: DOUBLE
41669: EQUAL
41670: IFTRUE 41674
41672: GO 41807
41674: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41675: LD_ADDR_VAR 0 5
41679: PUSH
41680: LD_VAR 0 1
41684: PUSH
41685: LD_VAR 0 2
41689: PUSH
41690: LD_INT 4
41692: MINUS
41693: PUSH
41694: LD_INT 3
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: PUSH
41702: LD_VAR 0 1
41706: PUSH
41707: LD_INT 3
41709: MINUS
41710: PUSH
41711: LD_VAR 0 2
41715: PUSH
41716: LD_INT 3
41718: MINUS
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: LIST
41727: PUSH
41728: LD_VAR 0 1
41732: PUSH
41733: LD_INT 4
41735: MINUS
41736: PUSH
41737: LD_VAR 0 2
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: LIST
41749: PUSH
41750: LD_VAR 0 1
41754: PUSH
41755: LD_VAR 0 2
41759: PUSH
41760: LD_INT 3
41762: PLUS
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: LIST
41771: PUSH
41772: LD_VAR 0 1
41776: PUSH
41777: LD_INT 4
41779: PLUS
41780: PUSH
41781: LD_VAR 0 2
41785: PUSH
41786: LD_INT 4
41788: PLUS
41789: PUSH
41790: LD_INT 5
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: LIST
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: ST_TO_ADDR
// end ; 2 :
41805: GO 42364
41807: LD_INT 2
41809: DOUBLE
41810: EQUAL
41811: IFTRUE 41815
41813: GO 41944
41815: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
41816: LD_ADDR_VAR 0 5
41820: PUSH
41821: LD_VAR 0 1
41825: PUSH
41826: LD_VAR 0 2
41830: PUSH
41831: LD_INT 3
41833: MINUS
41834: PUSH
41835: LD_INT 3
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: LIST
41842: PUSH
41843: LD_VAR 0 1
41847: PUSH
41848: LD_INT 4
41850: PLUS
41851: PUSH
41852: LD_VAR 0 2
41856: PUSH
41857: LD_INT 4
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: LIST
41864: PUSH
41865: LD_VAR 0 1
41869: PUSH
41870: LD_VAR 0 2
41874: PUSH
41875: LD_INT 4
41877: PLUS
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: PUSH
41887: LD_VAR 0 1
41891: PUSH
41892: LD_INT 3
41894: MINUS
41895: PUSH
41896: LD_VAR 0 2
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: PUSH
41909: LD_VAR 0 1
41913: PUSH
41914: LD_INT 4
41916: MINUS
41917: PUSH
41918: LD_VAR 0 2
41922: PUSH
41923: LD_INT 4
41925: MINUS
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: ST_TO_ADDR
// end ; 3 :
41942: GO 42364
41944: LD_INT 3
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41952
41950: GO 42085
41952: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
41953: LD_ADDR_VAR 0 5
41957: PUSH
41958: LD_VAR 0 1
41962: PUSH
41963: LD_INT 3
41965: PLUS
41966: PUSH
41967: LD_VAR 0 2
41971: PUSH
41972: LD_INT 4
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: PUSH
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 4
41987: PLUS
41988: PUSH
41989: LD_VAR 0 2
41993: PUSH
41994: LD_INT 4
41996: PLUS
41997: PUSH
41998: LD_INT 5
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: PUSH
42006: LD_VAR 0 1
42010: PUSH
42011: LD_INT 4
42013: MINUS
42014: PUSH
42015: LD_VAR 0 2
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: LIST
42027: PUSH
42028: LD_VAR 0 1
42032: PUSH
42033: LD_VAR 0 2
42037: PUSH
42038: LD_INT 4
42040: MINUS
42041: PUSH
42042: LD_INT 3
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: PUSH
42050: LD_VAR 0 1
42054: PUSH
42055: LD_INT 3
42057: MINUS
42058: PUSH
42059: LD_VAR 0 2
42063: PUSH
42064: LD_INT 3
42066: MINUS
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// end ; 4 :
42083: GO 42364
42085: LD_INT 4
42087: DOUBLE
42088: EQUAL
42089: IFTRUE 42093
42091: GO 42226
42093: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42094: LD_ADDR_VAR 0 5
42098: PUSH
42099: LD_VAR 0 1
42103: PUSH
42104: LD_VAR 0 2
42108: PUSH
42109: LD_INT 4
42111: PLUS
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: LIST
42120: PUSH
42121: LD_VAR 0 1
42125: PUSH
42126: LD_INT 3
42128: PLUS
42129: PUSH
42130: LD_VAR 0 2
42134: PUSH
42135: LD_INT 3
42137: PLUS
42138: PUSH
42139: LD_INT 5
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: PUSH
42147: LD_VAR 0 1
42151: PUSH
42152: LD_INT 4
42154: PLUS
42155: PUSH
42156: LD_VAR 0 2
42160: PUSH
42161: LD_INT 4
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: LIST
42168: PUSH
42169: LD_VAR 0 1
42173: PUSH
42174: LD_VAR 0 2
42178: PUSH
42179: LD_INT 3
42181: MINUS
42182: PUSH
42183: LD_INT 3
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: PUSH
42191: LD_VAR 0 1
42195: PUSH
42196: LD_INT 4
42198: MINUS
42199: PUSH
42200: LD_VAR 0 2
42204: PUSH
42205: LD_INT 4
42207: MINUS
42208: PUSH
42209: LD_INT 2
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: ST_TO_ADDR
// end ; 5 :
42224: GO 42364
42226: LD_INT 5
42228: DOUBLE
42229: EQUAL
42230: IFTRUE 42234
42232: GO 42363
42234: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42235: LD_ADDR_VAR 0 5
42239: PUSH
42240: LD_VAR 0 1
42244: PUSH
42245: LD_INT 4
42247: MINUS
42248: PUSH
42249: LD_VAR 0 2
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: PUSH
42262: LD_VAR 0 1
42266: PUSH
42267: LD_VAR 0 2
42271: PUSH
42272: LD_INT 4
42274: MINUS
42275: PUSH
42276: LD_INT 3
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: LIST
42283: PUSH
42284: LD_VAR 0 1
42288: PUSH
42289: LD_INT 4
42291: PLUS
42292: PUSH
42293: LD_VAR 0 2
42297: PUSH
42298: LD_INT 4
42300: PLUS
42301: PUSH
42302: LD_INT 5
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: LIST
42309: PUSH
42310: LD_VAR 0 1
42314: PUSH
42315: LD_INT 3
42317: PLUS
42318: PUSH
42319: LD_VAR 0 2
42323: PUSH
42324: LD_INT 4
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: PUSH
42332: LD_VAR 0 1
42336: PUSH
42337: LD_VAR 0 2
42341: PUSH
42342: LD_INT 3
42344: PLUS
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: LIST
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: ST_TO_ADDR
// end ; end ;
42361: GO 42364
42363: POP
// result := list ;
42364: LD_ADDR_VAR 0 4
42368: PUSH
42369: LD_VAR 0 5
42373: ST_TO_ADDR
// end ;
42374: LD_VAR 0 4
42378: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42379: LD_INT 0
42381: PPUSH
42382: PPUSH
42383: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42384: LD_VAR 0 1
42388: NOT
42389: PUSH
42390: LD_VAR 0 2
42394: PUSH
42395: LD_INT 1
42397: PUSH
42398: LD_INT 2
42400: PUSH
42401: LD_INT 3
42403: PUSH
42404: LD_INT 4
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: IN
42413: NOT
42414: OR
42415: IFFALSE 42419
// exit ;
42417: GO 42502
// tmp := [ ] ;
42419: LD_ADDR_VAR 0 5
42423: PUSH
42424: EMPTY
42425: ST_TO_ADDR
// for i in units do
42426: LD_ADDR_VAR 0 4
42430: PUSH
42431: LD_VAR 0 1
42435: PUSH
42436: FOR_IN
42437: IFFALSE 42471
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
42439: LD_ADDR_VAR 0 5
42443: PUSH
42444: LD_VAR 0 5
42448: PPUSH
42449: LD_VAR 0 4
42453: PPUSH
42454: LD_VAR 0 2
42458: PPUSH
42459: CALL_OW 259
42463: PPUSH
42464: CALL 43862 0 2
42468: ST_TO_ADDR
42469: GO 42436
42471: POP
42472: POP
// if not tmp then
42473: LD_VAR 0 5
42477: NOT
42478: IFFALSE 42482
// exit ;
42480: GO 42502
// result := SortListByListDesc ( units , tmp ) ;
42482: LD_ADDR_VAR 0 3
42486: PUSH
42487: LD_VAR 0 1
42491: PPUSH
42492: LD_VAR 0 5
42496: PPUSH
42497: CALL_OW 77
42501: ST_TO_ADDR
// end ;
42502: LD_VAR 0 3
42506: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42507: LD_INT 0
42509: PPUSH
42510: PPUSH
42511: PPUSH
// result := false ;
42512: LD_ADDR_VAR 0 3
42516: PUSH
42517: LD_INT 0
42519: ST_TO_ADDR
// if not building then
42520: LD_VAR 0 2
42524: NOT
42525: IFFALSE 42529
// exit ;
42527: GO 42667
// x := GetX ( building ) ;
42529: LD_ADDR_VAR 0 4
42533: PUSH
42534: LD_VAR 0 2
42538: PPUSH
42539: CALL_OW 250
42543: ST_TO_ADDR
// y := GetY ( building ) ;
42544: LD_ADDR_VAR 0 5
42548: PUSH
42549: LD_VAR 0 2
42553: PPUSH
42554: CALL_OW 251
42558: ST_TO_ADDR
// if not x or not y then
42559: LD_VAR 0 4
42563: NOT
42564: PUSH
42565: LD_VAR 0 5
42569: NOT
42570: OR
42571: IFFALSE 42575
// exit ;
42573: GO 42667
// if GetTaskList ( unit ) then
42575: LD_VAR 0 1
42579: PPUSH
42580: CALL_OW 437
42584: IFFALSE 42667
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42586: LD_STRING e
42588: PUSH
42589: LD_VAR 0 1
42593: PPUSH
42594: CALL_OW 437
42598: PUSH
42599: LD_INT 1
42601: ARRAY
42602: PUSH
42603: LD_INT 1
42605: ARRAY
42606: EQUAL
42607: PUSH
42608: LD_VAR 0 4
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: CALL_OW 437
42622: PUSH
42623: LD_INT 1
42625: ARRAY
42626: PUSH
42627: LD_INT 2
42629: ARRAY
42630: EQUAL
42631: AND
42632: PUSH
42633: LD_VAR 0 5
42637: PUSH
42638: LD_VAR 0 1
42642: PPUSH
42643: CALL_OW 437
42647: PUSH
42648: LD_INT 1
42650: ARRAY
42651: PUSH
42652: LD_INT 3
42654: ARRAY
42655: EQUAL
42656: AND
42657: IFFALSE 42667
// result := true end ;
42659: LD_ADDR_VAR 0 3
42663: PUSH
42664: LD_INT 1
42666: ST_TO_ADDR
// end ;
42667: LD_VAR 0 3
42671: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42672: LD_INT 0
42674: PPUSH
// result := false ;
42675: LD_ADDR_VAR 0 4
42679: PUSH
42680: LD_INT 0
42682: ST_TO_ADDR
// if GetTaskList ( unit ) then
42683: LD_VAR 0 1
42687: PPUSH
42688: CALL_OW 437
42692: IFFALSE 42775
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42694: LD_STRING M
42696: PUSH
42697: LD_VAR 0 1
42701: PPUSH
42702: CALL_OW 437
42706: PUSH
42707: LD_INT 1
42709: ARRAY
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: EQUAL
42715: PUSH
42716: LD_VAR 0 2
42720: PUSH
42721: LD_VAR 0 1
42725: PPUSH
42726: CALL_OW 437
42730: PUSH
42731: LD_INT 1
42733: ARRAY
42734: PUSH
42735: LD_INT 2
42737: ARRAY
42738: EQUAL
42739: AND
42740: PUSH
42741: LD_VAR 0 3
42745: PUSH
42746: LD_VAR 0 1
42750: PPUSH
42751: CALL_OW 437
42755: PUSH
42756: LD_INT 1
42758: ARRAY
42759: PUSH
42760: LD_INT 3
42762: ARRAY
42763: EQUAL
42764: AND
42765: IFFALSE 42775
// result := true ;
42767: LD_ADDR_VAR 0 4
42771: PUSH
42772: LD_INT 1
42774: ST_TO_ADDR
// end ; end ;
42775: LD_VAR 0 4
42779: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
42780: LD_INT 0
42782: PPUSH
42783: PPUSH
42784: PPUSH
42785: PPUSH
// if not unit or not area then
42786: LD_VAR 0 1
42790: NOT
42791: PUSH
42792: LD_VAR 0 2
42796: NOT
42797: OR
42798: IFFALSE 42802
// exit ;
42800: GO 42965
// tmp := AreaToList ( area , i ) ;
42802: LD_ADDR_VAR 0 6
42806: PUSH
42807: LD_VAR 0 2
42811: PPUSH
42812: LD_VAR 0 5
42816: PPUSH
42817: CALL_OW 517
42821: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
42822: LD_ADDR_VAR 0 5
42826: PUSH
42827: DOUBLE
42828: LD_INT 1
42830: DEC
42831: ST_TO_ADDR
42832: LD_VAR 0 6
42836: PUSH
42837: LD_INT 1
42839: ARRAY
42840: PUSH
42841: FOR_TO
42842: IFFALSE 42963
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
42844: LD_ADDR_VAR 0 7
42848: PUSH
42849: LD_VAR 0 6
42853: PUSH
42854: LD_INT 1
42856: ARRAY
42857: PUSH
42858: LD_VAR 0 5
42862: ARRAY
42863: PUSH
42864: LD_VAR 0 6
42868: PUSH
42869: LD_INT 2
42871: ARRAY
42872: PUSH
42873: LD_VAR 0 5
42877: ARRAY
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
42883: LD_INT 92
42885: PUSH
42886: LD_VAR 0 7
42890: PUSH
42891: LD_INT 1
42893: ARRAY
42894: PUSH
42895: LD_VAR 0 7
42899: PUSH
42900: LD_INT 2
42902: ARRAY
42903: PUSH
42904: LD_INT 3
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: PPUSH
42913: CALL_OW 69
42917: PUSH
42918: LD_INT 0
42920: EQUAL
42921: IFFALSE 42961
// begin PlaceUnitArea ( unit , area , mode ) ;
42923: LD_VAR 0 1
42927: PPUSH
42928: LD_VAR 0 2
42932: PPUSH
42933: LD_VAR 0 3
42937: PPUSH
42938: CALL_OW 49
// result := IsPlaced ( unit ) ;
42942: LD_ADDR_VAR 0 4
42946: PUSH
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 305
42956: ST_TO_ADDR
// exit ;
42957: POP
42958: POP
42959: GO 42965
// end ; end ;
42961: GO 42841
42963: POP
42964: POP
// end ;
42965: LD_VAR 0 4
42969: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
42970: LD_INT 0
42972: PPUSH
42973: PPUSH
42974: PPUSH
// if not side or side > 8 then
42975: LD_VAR 0 1
42979: NOT
42980: PUSH
42981: LD_VAR 0 1
42985: PUSH
42986: LD_INT 8
42988: GREATER
42989: OR
42990: IFFALSE 42994
// exit ;
42992: GO 43181
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
42994: LD_ADDR_VAR 0 4
42998: PUSH
42999: LD_INT 22
43001: PUSH
43002: LD_VAR 0 1
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 21
43013: PUSH
43014: LD_INT 3
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PPUSH
43025: CALL_OW 69
43029: ST_TO_ADDR
// if not tmp then
43030: LD_VAR 0 4
43034: NOT
43035: IFFALSE 43039
// exit ;
43037: GO 43181
// enable_addtolog := true ;
43039: LD_ADDR_OWVAR 81
43043: PUSH
43044: LD_INT 1
43046: ST_TO_ADDR
// AddToLog ( [ ) ;
43047: LD_STRING [
43049: PPUSH
43050: CALL_OW 561
// for i in tmp do
43054: LD_ADDR_VAR 0 3
43058: PUSH
43059: LD_VAR 0 4
43063: PUSH
43064: FOR_IN
43065: IFFALSE 43172
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43067: LD_STRING [
43069: PUSH
43070: LD_VAR 0 3
43074: PPUSH
43075: CALL_OW 266
43079: STR
43080: PUSH
43081: LD_STRING , 
43083: STR
43084: PUSH
43085: LD_VAR 0 3
43089: PPUSH
43090: CALL_OW 250
43094: STR
43095: PUSH
43096: LD_STRING , 
43098: STR
43099: PUSH
43100: LD_VAR 0 3
43104: PPUSH
43105: CALL_OW 251
43109: STR
43110: PUSH
43111: LD_STRING , 
43113: STR
43114: PUSH
43115: LD_VAR 0 3
43119: PPUSH
43120: CALL_OW 254
43124: STR
43125: PUSH
43126: LD_STRING , 
43128: STR
43129: PUSH
43130: LD_VAR 0 3
43134: PPUSH
43135: LD_INT 1
43137: PPUSH
43138: CALL_OW 268
43142: STR
43143: PUSH
43144: LD_STRING , 
43146: STR
43147: PUSH
43148: LD_VAR 0 3
43152: PPUSH
43153: LD_INT 2
43155: PPUSH
43156: CALL_OW 268
43160: STR
43161: PUSH
43162: LD_STRING ],
43164: STR
43165: PPUSH
43166: CALL_OW 561
// end ;
43170: GO 43064
43172: POP
43173: POP
// AddToLog ( ]; ) ;
43174: LD_STRING ];
43176: PPUSH
43177: CALL_OW 561
// end ;
43181: LD_VAR 0 2
43185: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43186: LD_INT 0
43188: PPUSH
43189: PPUSH
43190: PPUSH
43191: PPUSH
43192: PPUSH
// if not area or not rate or not max then
43193: LD_VAR 0 1
43197: NOT
43198: PUSH
43199: LD_VAR 0 2
43203: NOT
43204: OR
43205: PUSH
43206: LD_VAR 0 4
43210: NOT
43211: OR
43212: IFFALSE 43216
// exit ;
43214: GO 43405
// while 1 do
43216: LD_INT 1
43218: IFFALSE 43405
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43220: LD_ADDR_VAR 0 9
43224: PUSH
43225: LD_VAR 0 1
43229: PPUSH
43230: LD_INT 1
43232: PPUSH
43233: CALL_OW 287
43237: PUSH
43238: LD_INT 10
43240: MUL
43241: ST_TO_ADDR
// r := rate / 10 ;
43242: LD_ADDR_VAR 0 7
43246: PUSH
43247: LD_VAR 0 2
43251: PUSH
43252: LD_INT 10
43254: DIVREAL
43255: ST_TO_ADDR
// time := 1 1$00 ;
43256: LD_ADDR_VAR 0 8
43260: PUSH
43261: LD_INT 2100
43263: ST_TO_ADDR
// if amount < min then
43264: LD_VAR 0 9
43268: PUSH
43269: LD_VAR 0 3
43273: LESS
43274: IFFALSE 43292
// r := r * 2 else
43276: LD_ADDR_VAR 0 7
43280: PUSH
43281: LD_VAR 0 7
43285: PUSH
43286: LD_INT 2
43288: MUL
43289: ST_TO_ADDR
43290: GO 43318
// if amount > max then
43292: LD_VAR 0 9
43296: PUSH
43297: LD_VAR 0 4
43301: GREATER
43302: IFFALSE 43318
// r := r / 2 ;
43304: LD_ADDR_VAR 0 7
43308: PUSH
43309: LD_VAR 0 7
43313: PUSH
43314: LD_INT 2
43316: DIVREAL
43317: ST_TO_ADDR
// time := time / r ;
43318: LD_ADDR_VAR 0 8
43322: PUSH
43323: LD_VAR 0 8
43327: PUSH
43328: LD_VAR 0 7
43332: DIVREAL
43333: ST_TO_ADDR
// if time < 0 then
43334: LD_VAR 0 8
43338: PUSH
43339: LD_INT 0
43341: LESS
43342: IFFALSE 43359
// time := time * - 1 ;
43344: LD_ADDR_VAR 0 8
43348: PUSH
43349: LD_VAR 0 8
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: MUL
43358: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43359: LD_VAR 0 8
43363: PUSH
43364: LD_INT 35
43366: PPUSH
43367: LD_INT 875
43369: PPUSH
43370: CALL_OW 12
43374: PLUS
43375: PPUSH
43376: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43380: LD_INT 1
43382: PPUSH
43383: LD_INT 5
43385: PPUSH
43386: CALL_OW 12
43390: PPUSH
43391: LD_VAR 0 1
43395: PPUSH
43396: LD_INT 1
43398: PPUSH
43399: CALL_OW 55
// end ;
43403: GO 43216
// end ;
43405: LD_VAR 0 5
43409: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43410: LD_INT 0
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
// if not turrets or not factories then
43420: LD_VAR 0 1
43424: NOT
43425: PUSH
43426: LD_VAR 0 2
43430: NOT
43431: OR
43432: IFFALSE 43436
// exit ;
43434: GO 43743
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43436: LD_ADDR_VAR 0 10
43440: PUSH
43441: LD_INT 5
43443: PUSH
43444: LD_INT 6
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 2
43453: PUSH
43454: LD_INT 4
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 3
43463: PUSH
43464: LD_INT 5
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 24
43478: PUSH
43479: LD_INT 25
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 23
43488: PUSH
43489: LD_INT 27
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 42
43502: PUSH
43503: LD_INT 43
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 44
43512: PUSH
43513: LD_INT 46
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 45
43522: PUSH
43523: LD_INT 47
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
// result := [ ] ;
43540: LD_ADDR_VAR 0 3
43544: PUSH
43545: EMPTY
43546: ST_TO_ADDR
// for i in turrets do
43547: LD_ADDR_VAR 0 4
43551: PUSH
43552: LD_VAR 0 1
43556: PUSH
43557: FOR_IN
43558: IFFALSE 43741
// begin nat := GetNation ( i ) ;
43560: LD_ADDR_VAR 0 7
43564: PUSH
43565: LD_VAR 0 4
43569: PPUSH
43570: CALL_OW 248
43574: ST_TO_ADDR
// weapon := 0 ;
43575: LD_ADDR_VAR 0 8
43579: PUSH
43580: LD_INT 0
43582: ST_TO_ADDR
// if not nat then
43583: LD_VAR 0 7
43587: NOT
43588: IFFALSE 43592
// continue ;
43590: GO 43557
// for j in list [ nat ] do
43592: LD_ADDR_VAR 0 5
43596: PUSH
43597: LD_VAR 0 10
43601: PUSH
43602: LD_VAR 0 7
43606: ARRAY
43607: PUSH
43608: FOR_IN
43609: IFFALSE 43650
// if GetBWeapon ( i ) = j [ 1 ] then
43611: LD_VAR 0 4
43615: PPUSH
43616: CALL_OW 269
43620: PUSH
43621: LD_VAR 0 5
43625: PUSH
43626: LD_INT 1
43628: ARRAY
43629: EQUAL
43630: IFFALSE 43648
// begin weapon := j [ 2 ] ;
43632: LD_ADDR_VAR 0 8
43636: PUSH
43637: LD_VAR 0 5
43641: PUSH
43642: LD_INT 2
43644: ARRAY
43645: ST_TO_ADDR
// break ;
43646: GO 43650
// end ;
43648: GO 43608
43650: POP
43651: POP
// if not weapon then
43652: LD_VAR 0 8
43656: NOT
43657: IFFALSE 43661
// continue ;
43659: GO 43557
// for k in factories do
43661: LD_ADDR_VAR 0 6
43665: PUSH
43666: LD_VAR 0 2
43670: PUSH
43671: FOR_IN
43672: IFFALSE 43737
// begin weapons := AvailableWeaponList ( k ) ;
43674: LD_ADDR_VAR 0 9
43678: PUSH
43679: LD_VAR 0 6
43683: PPUSH
43684: CALL_OW 478
43688: ST_TO_ADDR
// if not weapons then
43689: LD_VAR 0 9
43693: NOT
43694: IFFALSE 43698
// continue ;
43696: GO 43671
// if weapon in weapons then
43698: LD_VAR 0 8
43702: PUSH
43703: LD_VAR 0 9
43707: IN
43708: IFFALSE 43735
// begin result := [ i , weapon ] ;
43710: LD_ADDR_VAR 0 3
43714: PUSH
43715: LD_VAR 0 4
43719: PUSH
43720: LD_VAR 0 8
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: ST_TO_ADDR
// exit ;
43729: POP
43730: POP
43731: POP
43732: POP
43733: GO 43743
// end ; end ;
43735: GO 43671
43737: POP
43738: POP
// end ;
43739: GO 43557
43741: POP
43742: POP
// end ;
43743: LD_VAR 0 3
43747: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
43748: LD_INT 0
43750: PPUSH
// if not side or side > 8 then
43751: LD_VAR 0 3
43755: NOT
43756: PUSH
43757: LD_VAR 0 3
43761: PUSH
43762: LD_INT 8
43764: GREATER
43765: OR
43766: IFFALSE 43770
// exit ;
43768: GO 43829
// if not range then
43770: LD_VAR 0 4
43774: NOT
43775: IFFALSE 43786
// range := - 12 ;
43777: LD_ADDR_VAR 0 4
43781: PUSH
43782: LD_INT 12
43784: NEG
43785: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
43786: LD_VAR 0 1
43790: PPUSH
43791: LD_VAR 0 2
43795: PPUSH
43796: LD_VAR 0 3
43800: PPUSH
43801: LD_VAR 0 4
43805: PPUSH
43806: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
43810: LD_VAR 0 1
43814: PPUSH
43815: LD_VAR 0 2
43819: PPUSH
43820: LD_VAR 0 3
43824: PPUSH
43825: CALL_OW 331
// end ;
43829: LD_VAR 0 5
43833: RET
// export function Video ( mode ) ; begin
43834: LD_INT 0
43836: PPUSH
// ingame_video = mode ;
43837: LD_ADDR_OWVAR 52
43841: PUSH
43842: LD_VAR 0 1
43846: ST_TO_ADDR
// interface_hidden = mode ;
43847: LD_ADDR_OWVAR 54
43851: PUSH
43852: LD_VAR 0 1
43856: ST_TO_ADDR
// end ;
43857: LD_VAR 0 2
43861: RET
// export function Join ( array , element ) ; begin
43862: LD_INT 0
43864: PPUSH
// result := Replace ( array , array + 1 , element ) ;
43865: LD_ADDR_VAR 0 3
43869: PUSH
43870: LD_VAR 0 1
43874: PPUSH
43875: LD_VAR 0 1
43879: PUSH
43880: LD_INT 1
43882: PLUS
43883: PPUSH
43884: LD_VAR 0 2
43888: PPUSH
43889: CALL_OW 1
43893: ST_TO_ADDR
// end ;
43894: LD_VAR 0 3
43898: RET
// export function JoinUnion ( array , element ) ; begin
43899: LD_INT 0
43901: PPUSH
// result := array union element ;
43902: LD_ADDR_VAR 0 3
43906: PUSH
43907: LD_VAR 0 1
43911: PUSH
43912: LD_VAR 0 2
43916: UNION
43917: ST_TO_ADDR
// end ;
43918: LD_VAR 0 3
43922: RET
// export function GetBehemoths ( side ) ; begin
43923: LD_INT 0
43925: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
43926: LD_ADDR_VAR 0 2
43930: PUSH
43931: LD_INT 22
43933: PUSH
43934: LD_VAR 0 1
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 31
43945: PUSH
43946: LD_INT 25
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PPUSH
43957: CALL_OW 69
43961: ST_TO_ADDR
// end ;
43962: LD_VAR 0 2
43966: RET
// export function Shuffle ( array ) ; var i , index ; begin
43967: LD_INT 0
43969: PPUSH
43970: PPUSH
43971: PPUSH
// result := [ ] ;
43972: LD_ADDR_VAR 0 2
43976: PUSH
43977: EMPTY
43978: ST_TO_ADDR
// if not array then
43979: LD_VAR 0 1
43983: NOT
43984: IFFALSE 43988
// exit ;
43986: GO 44087
// Randomize ;
43988: CALL_OW 10
// for i = array downto 1 do
43992: LD_ADDR_VAR 0 3
43996: PUSH
43997: DOUBLE
43998: LD_VAR 0 1
44002: INC
44003: ST_TO_ADDR
44004: LD_INT 1
44006: PUSH
44007: FOR_DOWNTO
44008: IFFALSE 44085
// begin index := rand ( 1 , array ) ;
44010: LD_ADDR_VAR 0 4
44014: PUSH
44015: LD_INT 1
44017: PPUSH
44018: LD_VAR 0 1
44022: PPUSH
44023: CALL_OW 12
44027: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44028: LD_ADDR_VAR 0 2
44032: PUSH
44033: LD_VAR 0 2
44037: PPUSH
44038: LD_VAR 0 2
44042: PUSH
44043: LD_INT 1
44045: PLUS
44046: PPUSH
44047: LD_VAR 0 1
44051: PUSH
44052: LD_VAR 0 4
44056: ARRAY
44057: PPUSH
44058: CALL_OW 2
44062: ST_TO_ADDR
// array := Delete ( array , index ) ;
44063: LD_ADDR_VAR 0 1
44067: PUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: LD_VAR 0 4
44077: PPUSH
44078: CALL_OW 3
44082: ST_TO_ADDR
// end ;
44083: GO 44007
44085: POP
44086: POP
// end ;
44087: LD_VAR 0 2
44091: RET
// export function GetBaseMaterials ( base ) ; begin
44092: LD_INT 0
44094: PPUSH
// result := [ 0 , 0 , 0 ] ;
44095: LD_ADDR_VAR 0 2
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: ST_TO_ADDR
// if not base then
44114: LD_VAR 0 1
44118: NOT
44119: IFFALSE 44123
// exit ;
44121: GO 44172
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44123: LD_ADDR_VAR 0 2
44127: PUSH
44128: LD_VAR 0 1
44132: PPUSH
44133: LD_INT 1
44135: PPUSH
44136: CALL_OW 275
44140: PUSH
44141: LD_VAR 0 1
44145: PPUSH
44146: LD_INT 2
44148: PPUSH
44149: CALL_OW 275
44153: PUSH
44154: LD_VAR 0 1
44158: PPUSH
44159: LD_INT 3
44161: PPUSH
44162: CALL_OW 275
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// end ;
44172: LD_VAR 0 2
44176: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44177: LD_INT 0
44179: PPUSH
44180: PPUSH
// result := array ;
44181: LD_ADDR_VAR 0 3
44185: PUSH
44186: LD_VAR 0 1
44190: ST_TO_ADDR
// if size >= result then
44191: LD_VAR 0 2
44195: PUSH
44196: LD_VAR 0 3
44200: GREATEREQUAL
44201: IFFALSE 44205
// exit ;
44203: GO 44255
// if size then
44205: LD_VAR 0 2
44209: IFFALSE 44255
// for i := array downto size do
44211: LD_ADDR_VAR 0 4
44215: PUSH
44216: DOUBLE
44217: LD_VAR 0 1
44221: INC
44222: ST_TO_ADDR
44223: LD_VAR 0 2
44227: PUSH
44228: FOR_DOWNTO
44229: IFFALSE 44253
// result := Delete ( result , result ) ;
44231: LD_ADDR_VAR 0 3
44235: PUSH
44236: LD_VAR 0 3
44240: PPUSH
44241: LD_VAR 0 3
44245: PPUSH
44246: CALL_OW 3
44250: ST_TO_ADDR
44251: GO 44228
44253: POP
44254: POP
// end ;
44255: LD_VAR 0 3
44259: RET
// export function ComExit ( unit ) ; var tmp ; begin
44260: LD_INT 0
44262: PPUSH
44263: PPUSH
// if not IsInUnit ( unit ) then
44264: LD_VAR 0 1
44268: PPUSH
44269: CALL_OW 310
44273: NOT
44274: IFFALSE 44278
// exit ;
44276: GO 44338
// tmp := IsInUnit ( unit ) ;
44278: LD_ADDR_VAR 0 3
44282: PUSH
44283: LD_VAR 0 1
44287: PPUSH
44288: CALL_OW 310
44292: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44293: LD_VAR 0 3
44297: PPUSH
44298: CALL_OW 247
44302: PUSH
44303: LD_INT 2
44305: EQUAL
44306: IFFALSE 44319
// ComExitVehicle ( unit ) else
44308: LD_VAR 0 1
44312: PPUSH
44313: CALL_OW 121
44317: GO 44328
// ComExitBuilding ( unit ) ;
44319: LD_VAR 0 1
44323: PPUSH
44324: CALL_OW 122
// result := tmp ;
44328: LD_ADDR_VAR 0 2
44332: PUSH
44333: LD_VAR 0 3
44337: ST_TO_ADDR
// end ;
44338: LD_VAR 0 2
44342: RET
// export function ComExitAll ( units ) ; var i ; begin
44343: LD_INT 0
44345: PPUSH
44346: PPUSH
// if not units then
44347: LD_VAR 0 1
44351: NOT
44352: IFFALSE 44356
// exit ;
44354: GO 44382
// for i in units do
44356: LD_ADDR_VAR 0 3
44360: PUSH
44361: LD_VAR 0 1
44365: PUSH
44366: FOR_IN
44367: IFFALSE 44380
// ComExit ( i ) ;
44369: LD_VAR 0 3
44373: PPUSH
44374: CALL 44260 0 1
44378: GO 44366
44380: POP
44381: POP
// end ;
44382: LD_VAR 0 2
44386: RET
// export function ResetHc ; begin
44387: LD_INT 0
44389: PPUSH
// InitHc ;
44390: CALL_OW 19
// hc_importance := 0 ;
44394: LD_ADDR_OWVAR 32
44398: PUSH
44399: LD_INT 0
44401: ST_TO_ADDR
// end ;
44402: LD_VAR 0 1
44406: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44407: LD_INT 0
44409: PPUSH
44410: PPUSH
44411: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44412: LD_ADDR_VAR 0 6
44416: PUSH
44417: LD_VAR 0 1
44421: PUSH
44422: LD_VAR 0 3
44426: PLUS
44427: PUSH
44428: LD_INT 2
44430: DIV
44431: ST_TO_ADDR
// if _x < 0 then
44432: LD_VAR 0 6
44436: PUSH
44437: LD_INT 0
44439: LESS
44440: IFFALSE 44457
// _x := _x * - 1 ;
44442: LD_ADDR_VAR 0 6
44446: PUSH
44447: LD_VAR 0 6
44451: PUSH
44452: LD_INT 1
44454: NEG
44455: MUL
44456: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44457: LD_ADDR_VAR 0 7
44461: PUSH
44462: LD_VAR 0 2
44466: PUSH
44467: LD_VAR 0 4
44471: PLUS
44472: PUSH
44473: LD_INT 2
44475: DIV
44476: ST_TO_ADDR
// if _y < 0 then
44477: LD_VAR 0 7
44481: PUSH
44482: LD_INT 0
44484: LESS
44485: IFFALSE 44502
// _y := _y * - 1 ;
44487: LD_ADDR_VAR 0 7
44491: PUSH
44492: LD_VAR 0 7
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: MUL
44501: ST_TO_ADDR
// result := [ _x , _y ] ;
44502: LD_ADDR_VAR 0 5
44506: PUSH
44507: LD_VAR 0 6
44511: PUSH
44512: LD_VAR 0 7
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: ST_TO_ADDR
// end ;
44521: LD_VAR 0 5
44525: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44526: LD_INT 0
44528: PPUSH
44529: PPUSH
44530: PPUSH
44531: PPUSH
// task := GetTaskList ( unit ) ;
44532: LD_ADDR_VAR 0 7
44536: PUSH
44537: LD_VAR 0 1
44541: PPUSH
44542: CALL_OW 437
44546: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44547: LD_VAR 0 7
44551: NOT
44552: PUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: LD_VAR 0 2
44562: PPUSH
44563: CALL_OW 308
44567: NOT
44568: AND
44569: IFFALSE 44573
// exit ;
44571: GO 44691
// if IsInArea ( unit , area ) then
44573: LD_VAR 0 1
44577: PPUSH
44578: LD_VAR 0 2
44582: PPUSH
44583: CALL_OW 308
44587: IFFALSE 44605
// begin ComMoveToArea ( unit , goAway ) ;
44589: LD_VAR 0 1
44593: PPUSH
44594: LD_VAR 0 3
44598: PPUSH
44599: CALL_OW 113
// exit ;
44603: GO 44691
// end ; if task [ 1 ] [ 1 ] <> M then
44605: LD_VAR 0 7
44609: PUSH
44610: LD_INT 1
44612: ARRAY
44613: PUSH
44614: LD_INT 1
44616: ARRAY
44617: PUSH
44618: LD_STRING M
44620: NONEQUAL
44621: IFFALSE 44625
// exit ;
44623: GO 44691
// x := task [ 1 ] [ 2 ] ;
44625: LD_ADDR_VAR 0 5
44629: PUSH
44630: LD_VAR 0 7
44634: PUSH
44635: LD_INT 1
44637: ARRAY
44638: PUSH
44639: LD_INT 2
44641: ARRAY
44642: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44643: LD_ADDR_VAR 0 6
44647: PUSH
44648: LD_VAR 0 7
44652: PUSH
44653: LD_INT 1
44655: ARRAY
44656: PUSH
44657: LD_INT 3
44659: ARRAY
44660: ST_TO_ADDR
// if InArea ( x , y , area ) then
44661: LD_VAR 0 5
44665: PPUSH
44666: LD_VAR 0 6
44670: PPUSH
44671: LD_VAR 0 2
44675: PPUSH
44676: CALL_OW 309
44680: IFFALSE 44691
// ComStop ( unit ) ;
44682: LD_VAR 0 1
44686: PPUSH
44687: CALL_OW 141
// end ;
44691: LD_VAR 0 4
44695: RET
// export function Abs ( value ) ; begin
44696: LD_INT 0
44698: PPUSH
// result := value ;
44699: LD_ADDR_VAR 0 2
44703: PUSH
44704: LD_VAR 0 1
44708: ST_TO_ADDR
// if value < 0 then
44709: LD_VAR 0 1
44713: PUSH
44714: LD_INT 0
44716: LESS
44717: IFFALSE 44734
// result := value * - 1 ;
44719: LD_ADDR_VAR 0 2
44723: PUSH
44724: LD_VAR 0 1
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: MUL
44733: ST_TO_ADDR
// end ;
44734: LD_VAR 0 2
44738: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
44739: LD_INT 0
44741: PPUSH
44742: PPUSH
44743: PPUSH
44744: PPUSH
44745: PPUSH
44746: PPUSH
44747: PPUSH
44748: PPUSH
// if not unit or not building then
44749: LD_VAR 0 1
44753: NOT
44754: PUSH
44755: LD_VAR 0 2
44759: NOT
44760: OR
44761: IFFALSE 44765
// exit ;
44763: GO 44991
// x := GetX ( building ) ;
44765: LD_ADDR_VAR 0 4
44769: PUSH
44770: LD_VAR 0 2
44774: PPUSH
44775: CALL_OW 250
44779: ST_TO_ADDR
// y := GetY ( building ) ;
44780: LD_ADDR_VAR 0 6
44784: PUSH
44785: LD_VAR 0 2
44789: PPUSH
44790: CALL_OW 251
44794: ST_TO_ADDR
// d := GetDir ( building ) ;
44795: LD_ADDR_VAR 0 8
44799: PUSH
44800: LD_VAR 0 2
44804: PPUSH
44805: CALL_OW 254
44809: ST_TO_ADDR
// r := 4 ;
44810: LD_ADDR_VAR 0 9
44814: PUSH
44815: LD_INT 4
44817: ST_TO_ADDR
// for i := 1 to 5 do
44818: LD_ADDR_VAR 0 10
44822: PUSH
44823: DOUBLE
44824: LD_INT 1
44826: DEC
44827: ST_TO_ADDR
44828: LD_INT 5
44830: PUSH
44831: FOR_TO
44832: IFFALSE 44989
// begin _x := ShiftX ( x , d , r + i ) ;
44834: LD_ADDR_VAR 0 5
44838: PUSH
44839: LD_VAR 0 4
44843: PPUSH
44844: LD_VAR 0 8
44848: PPUSH
44849: LD_VAR 0 9
44853: PUSH
44854: LD_VAR 0 10
44858: PLUS
44859: PPUSH
44860: CALL_OW 272
44864: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
44865: LD_ADDR_VAR 0 7
44869: PUSH
44870: LD_VAR 0 6
44874: PPUSH
44875: LD_VAR 0 8
44879: PPUSH
44880: LD_VAR 0 9
44884: PUSH
44885: LD_VAR 0 10
44889: PLUS
44890: PPUSH
44891: CALL_OW 273
44895: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
44896: LD_VAR 0 5
44900: PPUSH
44901: LD_VAR 0 7
44905: PPUSH
44906: CALL_OW 488
44910: PUSH
44911: LD_VAR 0 5
44915: PPUSH
44916: LD_VAR 0 7
44920: PPUSH
44921: CALL_OW 428
44925: PPUSH
44926: CALL_OW 247
44930: PUSH
44931: LD_INT 3
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: IN
44941: NOT
44942: AND
44943: IFFALSE 44987
// begin ComMoveXY ( unit , _x , _y ) ;
44945: LD_VAR 0 1
44949: PPUSH
44950: LD_VAR 0 5
44954: PPUSH
44955: LD_VAR 0 7
44959: PPUSH
44960: CALL_OW 111
// result := [ _x , _y ] ;
44964: LD_ADDR_VAR 0 3
44968: PUSH
44969: LD_VAR 0 5
44973: PUSH
44974: LD_VAR 0 7
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: ST_TO_ADDR
// exit ;
44983: POP
44984: POP
44985: GO 44991
// end ; end ;
44987: GO 44831
44989: POP
44990: POP
// end ;
44991: LD_VAR 0 3
44995: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
44996: LD_INT 0
44998: PPUSH
44999: PPUSH
45000: PPUSH
// result := 0 ;
45001: LD_ADDR_VAR 0 3
45005: PUSH
45006: LD_INT 0
45008: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45009: LD_VAR 0 1
45013: PUSH
45014: LD_INT 0
45016: LESS
45017: PUSH
45018: LD_VAR 0 1
45022: PUSH
45023: LD_INT 8
45025: GREATER
45026: OR
45027: PUSH
45028: LD_VAR 0 2
45032: PUSH
45033: LD_INT 0
45035: LESS
45036: OR
45037: PUSH
45038: LD_VAR 0 2
45042: PUSH
45043: LD_INT 8
45045: GREATER
45046: OR
45047: IFFALSE 45051
// exit ;
45049: GO 45126
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45051: LD_ADDR_VAR 0 4
45055: PUSH
45056: LD_INT 22
45058: PUSH
45059: LD_VAR 0 2
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PPUSH
45068: CALL_OW 69
45072: PUSH
45073: FOR_IN
45074: IFFALSE 45124
// begin un := UnitShoot ( i ) ;
45076: LD_ADDR_VAR 0 5
45080: PUSH
45081: LD_VAR 0 4
45085: PPUSH
45086: CALL_OW 504
45090: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45091: LD_VAR 0 5
45095: PPUSH
45096: CALL_OW 255
45100: PUSH
45101: LD_VAR 0 1
45105: EQUAL
45106: IFFALSE 45122
// begin result := un ;
45108: LD_ADDR_VAR 0 3
45112: PUSH
45113: LD_VAR 0 5
45117: ST_TO_ADDR
// exit ;
45118: POP
45119: POP
45120: GO 45126
// end ; end ;
45122: GO 45073
45124: POP
45125: POP
// end ;
45126: LD_VAR 0 3
45130: RET
// export function GetCargoBay ( units ) ; begin
45131: LD_INT 0
45133: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45134: LD_ADDR_VAR 0 2
45138: PUSH
45139: LD_VAR 0 1
45143: PPUSH
45144: LD_INT 2
45146: PUSH
45147: LD_INT 34
45149: PUSH
45150: LD_INT 12
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 34
45159: PUSH
45160: LD_INT 51
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 34
45169: PUSH
45170: LD_INT 32
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 34
45179: PUSH
45180: LD_INT 89
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: PPUSH
45194: CALL_OW 72
45198: ST_TO_ADDR
// end ;
45199: LD_VAR 0 2
45203: RET
// export function Negate ( value ) ; begin
45204: LD_INT 0
45206: PPUSH
// result := not value ;
45207: LD_ADDR_VAR 0 2
45211: PUSH
45212: LD_VAR 0 1
45216: NOT
45217: ST_TO_ADDR
// end ;
45218: LD_VAR 0 2
45222: RET
// export function Inc ( value ) ; begin
45223: LD_INT 0
45225: PPUSH
// result := value + 1 ;
45226: LD_ADDR_VAR 0 2
45230: PUSH
45231: LD_VAR 0 1
45235: PUSH
45236: LD_INT 1
45238: PLUS
45239: ST_TO_ADDR
// end ;
45240: LD_VAR 0 2
45244: RET
// export function Dec ( value ) ; begin
45245: LD_INT 0
45247: PPUSH
// result := value - 1 ;
45248: LD_ADDR_VAR 0 2
45252: PUSH
45253: LD_VAR 0 1
45257: PUSH
45258: LD_INT 1
45260: MINUS
45261: ST_TO_ADDR
// end ;
45262: LD_VAR 0 2
45266: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45267: LD_INT 0
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
45274: PPUSH
45275: PPUSH
45276: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45277: LD_VAR 0 1
45281: PPUSH
45282: LD_VAR 0 2
45286: PPUSH
45287: CALL_OW 488
45291: NOT
45292: PUSH
45293: LD_VAR 0 3
45297: PPUSH
45298: LD_VAR 0 4
45302: PPUSH
45303: CALL_OW 488
45307: NOT
45308: OR
45309: IFFALSE 45322
// begin result := - 1 ;
45311: LD_ADDR_VAR 0 5
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: ST_TO_ADDR
// exit ;
45320: GO 45557
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45322: LD_ADDR_VAR 0 12
45326: PUSH
45327: LD_VAR 0 1
45331: PPUSH
45332: LD_VAR 0 2
45336: PPUSH
45337: LD_VAR 0 3
45341: PPUSH
45342: LD_VAR 0 4
45346: PPUSH
45347: CALL 44407 0 4
45351: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45352: LD_ADDR_VAR 0 11
45356: PUSH
45357: LD_VAR 0 1
45361: PPUSH
45362: LD_VAR 0 2
45366: PPUSH
45367: LD_VAR 0 12
45371: PUSH
45372: LD_INT 1
45374: ARRAY
45375: PPUSH
45376: LD_VAR 0 12
45380: PUSH
45381: LD_INT 2
45383: ARRAY
45384: PPUSH
45385: CALL_OW 298
45389: ST_TO_ADDR
// distance := 9999 ;
45390: LD_ADDR_VAR 0 10
45394: PUSH
45395: LD_INT 9999
45397: ST_TO_ADDR
// for i := 0 to 5 do
45398: LD_ADDR_VAR 0 6
45402: PUSH
45403: DOUBLE
45404: LD_INT 0
45406: DEC
45407: ST_TO_ADDR
45408: LD_INT 5
45410: PUSH
45411: FOR_TO
45412: IFFALSE 45555
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45414: LD_ADDR_VAR 0 7
45418: PUSH
45419: LD_VAR 0 1
45423: PPUSH
45424: LD_VAR 0 6
45428: PPUSH
45429: LD_VAR 0 11
45433: PPUSH
45434: CALL_OW 272
45438: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45439: LD_ADDR_VAR 0 8
45443: PUSH
45444: LD_VAR 0 2
45448: PPUSH
45449: LD_VAR 0 6
45453: PPUSH
45454: LD_VAR 0 11
45458: PPUSH
45459: CALL_OW 273
45463: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45464: LD_VAR 0 7
45468: PPUSH
45469: LD_VAR 0 8
45473: PPUSH
45474: CALL_OW 488
45478: NOT
45479: IFFALSE 45483
// continue ;
45481: GO 45411
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45483: LD_ADDR_VAR 0 9
45487: PUSH
45488: LD_VAR 0 12
45492: PUSH
45493: LD_INT 1
45495: ARRAY
45496: PPUSH
45497: LD_VAR 0 12
45501: PUSH
45502: LD_INT 2
45504: ARRAY
45505: PPUSH
45506: LD_VAR 0 7
45510: PPUSH
45511: LD_VAR 0 8
45515: PPUSH
45516: CALL_OW 298
45520: ST_TO_ADDR
// if tmp < distance then
45521: LD_VAR 0 9
45525: PUSH
45526: LD_VAR 0 10
45530: LESS
45531: IFFALSE 45553
// begin result := i ;
45533: LD_ADDR_VAR 0 5
45537: PUSH
45538: LD_VAR 0 6
45542: ST_TO_ADDR
// distance := tmp ;
45543: LD_ADDR_VAR 0 10
45547: PUSH
45548: LD_VAR 0 9
45552: ST_TO_ADDR
// end ; end ;
45553: GO 45411
45555: POP
45556: POP
// end ;
45557: LD_VAR 0 5
45561: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45562: LD_INT 0
45564: PPUSH
45565: PPUSH
// if not driver or not IsInUnit ( driver ) then
45566: LD_VAR 0 1
45570: NOT
45571: PUSH
45572: LD_VAR 0 1
45576: PPUSH
45577: CALL_OW 310
45581: NOT
45582: OR
45583: IFFALSE 45587
// exit ;
45585: GO 45677
// vehicle := IsInUnit ( driver ) ;
45587: LD_ADDR_VAR 0 3
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: CALL_OW 310
45601: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45602: LD_VAR 0 1
45606: PPUSH
45607: LD_STRING \
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: PUSH
45637: LD_STRING E
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_VAR 0 3
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PPUSH
45673: CALL_OW 446
// end ;
45677: LD_VAR 0 2
45681: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45682: LD_INT 0
45684: PPUSH
45685: PPUSH
// if not driver or not IsInUnit ( driver ) then
45686: LD_VAR 0 1
45690: NOT
45691: PUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: CALL_OW 310
45701: NOT
45702: OR
45703: IFFALSE 45707
// exit ;
45705: GO 45797
// vehicle := IsInUnit ( driver ) ;
45707: LD_ADDR_VAR 0 3
45711: PUSH
45712: LD_VAR 0 1
45716: PPUSH
45717: CALL_OW 310
45721: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45722: LD_VAR 0 1
45726: PPUSH
45727: LD_STRING \
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 0
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 0
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: PUSH
45757: LD_STRING E
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_VAR 0 3
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 0
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PPUSH
45793: CALL_OW 447
// end ;
45797: LD_VAR 0 2
45801: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
45802: LD_INT 0
45804: PPUSH
45805: PPUSH
45806: PPUSH
// tmp := [ ] ;
45807: LD_ADDR_VAR 0 5
45811: PUSH
45812: EMPTY
45813: ST_TO_ADDR
// for i in units do
45814: LD_ADDR_VAR 0 4
45818: PUSH
45819: LD_VAR 0 1
45823: PUSH
45824: FOR_IN
45825: IFFALSE 45863
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
45827: LD_ADDR_VAR 0 5
45831: PUSH
45832: LD_VAR 0 5
45836: PPUSH
45837: LD_VAR 0 5
45841: PUSH
45842: LD_INT 1
45844: PLUS
45845: PPUSH
45846: LD_VAR 0 4
45850: PPUSH
45851: CALL_OW 256
45855: PPUSH
45856: CALL_OW 2
45860: ST_TO_ADDR
45861: GO 45824
45863: POP
45864: POP
// if not tmp then
45865: LD_VAR 0 5
45869: NOT
45870: IFFALSE 45874
// exit ;
45872: GO 45922
// if asc then
45874: LD_VAR 0 2
45878: IFFALSE 45902
// result := SortListByListAsc ( units , tmp ) else
45880: LD_ADDR_VAR 0 3
45884: PUSH
45885: LD_VAR 0 1
45889: PPUSH
45890: LD_VAR 0 5
45894: PPUSH
45895: CALL_OW 76
45899: ST_TO_ADDR
45900: GO 45922
// result := SortListByListDesc ( units , tmp ) ;
45902: LD_ADDR_VAR 0 3
45906: PUSH
45907: LD_VAR 0 1
45911: PPUSH
45912: LD_VAR 0 5
45916: PPUSH
45917: CALL_OW 77
45921: ST_TO_ADDR
// end ;
45922: LD_VAR 0 3
45926: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
45927: LD_INT 0
45929: PPUSH
45930: PPUSH
// task := GetTaskList ( mech ) ;
45931: LD_ADDR_VAR 0 4
45935: PUSH
45936: LD_VAR 0 1
45940: PPUSH
45941: CALL_OW 437
45945: ST_TO_ADDR
// if not task then
45946: LD_VAR 0 4
45950: NOT
45951: IFFALSE 45955
// exit ;
45953: GO 45997
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
45955: LD_ADDR_VAR 0 3
45959: PUSH
45960: LD_VAR 0 4
45964: PUSH
45965: LD_INT 1
45967: ARRAY
45968: PUSH
45969: LD_INT 1
45971: ARRAY
45972: PUSH
45973: LD_STRING r
45975: EQUAL
45976: PUSH
45977: LD_VAR 0 4
45981: PUSH
45982: LD_INT 1
45984: ARRAY
45985: PUSH
45986: LD_INT 4
45988: ARRAY
45989: PUSH
45990: LD_VAR 0 2
45994: EQUAL
45995: AND
45996: ST_TO_ADDR
// end ;
45997: LD_VAR 0 3
46001: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46002: LD_INT 0
46004: PPUSH
// SetDir ( unit , d ) ;
46005: LD_VAR 0 1
46009: PPUSH
46010: LD_VAR 0 4
46014: PPUSH
46015: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46019: LD_VAR 0 1
46023: PPUSH
46024: LD_VAR 0 2
46028: PPUSH
46029: LD_VAR 0 3
46033: PPUSH
46034: LD_VAR 0 5
46038: PPUSH
46039: CALL_OW 48
// end ;
46043: LD_VAR 0 6
46047: RET
// export function ToNaturalNumber ( number ) ; begin
46048: LD_INT 0
46050: PPUSH
// result := number div 1 ;
46051: LD_ADDR_VAR 0 2
46055: PUSH
46056: LD_VAR 0 1
46060: PUSH
46061: LD_INT 1
46063: DIV
46064: ST_TO_ADDR
// if number < 0 then
46065: LD_VAR 0 1
46069: PUSH
46070: LD_INT 0
46072: LESS
46073: IFFALSE 46083
// result := 0 ;
46075: LD_ADDR_VAR 0 2
46079: PUSH
46080: LD_INT 0
46082: ST_TO_ADDR
// end ;
46083: LD_VAR 0 2
46087: RET
// export function SortByClass ( units , class ) ; var un ; begin
46088: LD_INT 0
46090: PPUSH
46091: PPUSH
// if not units or not class then
46092: LD_VAR 0 1
46096: NOT
46097: PUSH
46098: LD_VAR 0 2
46102: NOT
46103: OR
46104: IFFALSE 46108
// exit ;
46106: GO 46203
// result := [ ] ;
46108: LD_ADDR_VAR 0 3
46112: PUSH
46113: EMPTY
46114: ST_TO_ADDR
// for un in units do
46115: LD_ADDR_VAR 0 4
46119: PUSH
46120: LD_VAR 0 1
46124: PUSH
46125: FOR_IN
46126: IFFALSE 46201
// if GetClass ( un ) = class then
46128: LD_VAR 0 4
46132: PPUSH
46133: CALL_OW 257
46137: PUSH
46138: LD_VAR 0 2
46142: EQUAL
46143: IFFALSE 46170
// result := Insert ( result , 1 , un ) else
46145: LD_ADDR_VAR 0 3
46149: PUSH
46150: LD_VAR 0 3
46154: PPUSH
46155: LD_INT 1
46157: PPUSH
46158: LD_VAR 0 4
46162: PPUSH
46163: CALL_OW 2
46167: ST_TO_ADDR
46168: GO 46199
// result := Replace ( result , result + 1 , un ) ;
46170: LD_ADDR_VAR 0 3
46174: PUSH
46175: LD_VAR 0 3
46179: PPUSH
46180: LD_VAR 0 3
46184: PUSH
46185: LD_INT 1
46187: PLUS
46188: PPUSH
46189: LD_VAR 0 4
46193: PPUSH
46194: CALL_OW 1
46198: ST_TO_ADDR
46199: GO 46125
46201: POP
46202: POP
// end ;
46203: LD_VAR 0 3
46207: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46208: LD_INT 0
46210: PPUSH
46211: PPUSH
46212: PPUSH
46213: PPUSH
46214: PPUSH
46215: PPUSH
46216: PPUSH
// result := [ ] ;
46217: LD_ADDR_VAR 0 4
46221: PUSH
46222: EMPTY
46223: ST_TO_ADDR
// if x - r < 0 then
46224: LD_VAR 0 1
46228: PUSH
46229: LD_VAR 0 3
46233: MINUS
46234: PUSH
46235: LD_INT 0
46237: LESS
46238: IFFALSE 46250
// min_x := 0 else
46240: LD_ADDR_VAR 0 8
46244: PUSH
46245: LD_INT 0
46247: ST_TO_ADDR
46248: GO 46266
// min_x := x - r ;
46250: LD_ADDR_VAR 0 8
46254: PUSH
46255: LD_VAR 0 1
46259: PUSH
46260: LD_VAR 0 3
46264: MINUS
46265: ST_TO_ADDR
// if y - r < 0 then
46266: LD_VAR 0 2
46270: PUSH
46271: LD_VAR 0 3
46275: MINUS
46276: PUSH
46277: LD_INT 0
46279: LESS
46280: IFFALSE 46292
// min_y := 0 else
46282: LD_ADDR_VAR 0 7
46286: PUSH
46287: LD_INT 0
46289: ST_TO_ADDR
46290: GO 46308
// min_y := y - r ;
46292: LD_ADDR_VAR 0 7
46296: PUSH
46297: LD_VAR 0 2
46301: PUSH
46302: LD_VAR 0 3
46306: MINUS
46307: ST_TO_ADDR
// max_x := x + r ;
46308: LD_ADDR_VAR 0 9
46312: PUSH
46313: LD_VAR 0 1
46317: PUSH
46318: LD_VAR 0 3
46322: PLUS
46323: ST_TO_ADDR
// max_y := y + r ;
46324: LD_ADDR_VAR 0 10
46328: PUSH
46329: LD_VAR 0 2
46333: PUSH
46334: LD_VAR 0 3
46338: PLUS
46339: ST_TO_ADDR
// for _x = min_x to max_x do
46340: LD_ADDR_VAR 0 5
46344: PUSH
46345: DOUBLE
46346: LD_VAR 0 8
46350: DEC
46351: ST_TO_ADDR
46352: LD_VAR 0 9
46356: PUSH
46357: FOR_TO
46358: IFFALSE 46459
// for _y = min_y to max_y do
46360: LD_ADDR_VAR 0 6
46364: PUSH
46365: DOUBLE
46366: LD_VAR 0 7
46370: DEC
46371: ST_TO_ADDR
46372: LD_VAR 0 10
46376: PUSH
46377: FOR_TO
46378: IFFALSE 46455
// begin if not ValidHex ( _x , _y ) then
46380: LD_VAR 0 5
46384: PPUSH
46385: LD_VAR 0 6
46389: PPUSH
46390: CALL_OW 488
46394: NOT
46395: IFFALSE 46399
// continue ;
46397: GO 46377
// if GetResourceTypeXY ( _x , _y ) then
46399: LD_VAR 0 5
46403: PPUSH
46404: LD_VAR 0 6
46408: PPUSH
46409: CALL_OW 283
46413: IFFALSE 46453
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46415: LD_ADDR_VAR 0 4
46419: PUSH
46420: LD_VAR 0 4
46424: PPUSH
46425: LD_VAR 0 4
46429: PUSH
46430: LD_INT 1
46432: PLUS
46433: PPUSH
46434: LD_VAR 0 5
46438: PUSH
46439: LD_VAR 0 6
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PPUSH
46448: CALL_OW 1
46452: ST_TO_ADDR
// end ;
46453: GO 46377
46455: POP
46456: POP
46457: GO 46357
46459: POP
46460: POP
// end ;
46461: LD_VAR 0 4
46465: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46466: LD_INT 0
46468: PPUSH
46469: PPUSH
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
// if not units then
46476: LD_VAR 0 1
46480: NOT
46481: IFFALSE 46485
// exit ;
46483: GO 47009
// result := UnitFilter ( units , [ f_ok ] ) ;
46485: LD_ADDR_VAR 0 3
46489: PUSH
46490: LD_VAR 0 1
46494: PPUSH
46495: LD_INT 50
46497: PUSH
46498: EMPTY
46499: LIST
46500: PPUSH
46501: CALL_OW 72
46505: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46506: LD_ADDR_VAR 0 8
46510: PUSH
46511: LD_VAR 0 1
46515: PUSH
46516: LD_INT 1
46518: ARRAY
46519: PPUSH
46520: CALL_OW 255
46524: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46525: LD_ADDR_VAR 0 10
46529: PUSH
46530: LD_INT 29
46532: PUSH
46533: LD_INT 91
46535: PUSH
46536: LD_INT 49
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: ST_TO_ADDR
// if not result then
46544: LD_VAR 0 3
46548: NOT
46549: IFFALSE 46553
// exit ;
46551: GO 47009
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46553: LD_ADDR_VAR 0 5
46557: PUSH
46558: LD_INT 81
46560: PUSH
46561: LD_VAR 0 8
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PPUSH
46570: CALL_OW 69
46574: ST_TO_ADDR
// for i in result do
46575: LD_ADDR_VAR 0 4
46579: PUSH
46580: LD_VAR 0 3
46584: PUSH
46585: FOR_IN
46586: IFFALSE 47007
// begin tag := GetTag ( i ) + 1 ;
46588: LD_ADDR_VAR 0 9
46592: PUSH
46593: LD_VAR 0 4
46597: PPUSH
46598: CALL_OW 110
46602: PUSH
46603: LD_INT 1
46605: PLUS
46606: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46607: LD_ADDR_VAR 0 7
46611: PUSH
46612: LD_VAR 0 4
46616: PPUSH
46617: CALL_OW 250
46621: PPUSH
46622: LD_VAR 0 4
46626: PPUSH
46627: CALL_OW 251
46631: PPUSH
46632: LD_INT 6
46634: PPUSH
46635: CALL 46208 0 3
46639: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46640: LD_VAR 0 4
46644: PPUSH
46645: CALL_OW 247
46649: PUSH
46650: LD_INT 2
46652: EQUAL
46653: PUSH
46654: LD_VAR 0 7
46658: AND
46659: PUSH
46660: LD_VAR 0 4
46664: PPUSH
46665: CALL_OW 264
46669: PUSH
46670: LD_VAR 0 10
46674: IN
46675: NOT
46676: AND
46677: IFFALSE 46716
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46679: LD_VAR 0 4
46683: PPUSH
46684: LD_VAR 0 7
46688: PUSH
46689: LD_INT 1
46691: ARRAY
46692: PUSH
46693: LD_INT 1
46695: ARRAY
46696: PPUSH
46697: LD_VAR 0 7
46701: PUSH
46702: LD_INT 1
46704: ARRAY
46705: PUSH
46706: LD_INT 2
46708: ARRAY
46709: PPUSH
46710: CALL_OW 116
46714: GO 47005
// if path > tag then
46716: LD_VAR 0 2
46720: PUSH
46721: LD_VAR 0 9
46725: GREATER
46726: IFFALSE 46934
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46728: LD_ADDR_VAR 0 6
46732: PUSH
46733: LD_VAR 0 5
46737: PPUSH
46738: LD_INT 91
46740: PUSH
46741: LD_VAR 0 4
46745: PUSH
46746: LD_INT 8
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: LIST
46753: PPUSH
46754: CALL_OW 72
46758: ST_TO_ADDR
// if nearEnemy then
46759: LD_VAR 0 6
46763: IFFALSE 46832
// begin if GetWeapon ( i ) = ru_time_lapser then
46765: LD_VAR 0 4
46769: PPUSH
46770: CALL_OW 264
46774: PUSH
46775: LD_INT 49
46777: EQUAL
46778: IFFALSE 46806
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
46780: LD_VAR 0 4
46784: PPUSH
46785: LD_VAR 0 6
46789: PPUSH
46790: LD_VAR 0 4
46794: PPUSH
46795: CALL_OW 74
46799: PPUSH
46800: CALL_OW 112
46804: GO 46830
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
46806: LD_VAR 0 4
46810: PPUSH
46811: LD_VAR 0 6
46815: PPUSH
46816: LD_VAR 0 4
46820: PPUSH
46821: CALL_OW 74
46825: PPUSH
46826: CALL_OW 115
// end else
46830: GO 46932
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
46832: LD_VAR 0 4
46836: PPUSH
46837: LD_VAR 0 2
46841: PUSH
46842: LD_VAR 0 9
46846: ARRAY
46847: PUSH
46848: LD_INT 1
46850: ARRAY
46851: PPUSH
46852: LD_VAR 0 2
46856: PUSH
46857: LD_VAR 0 9
46861: ARRAY
46862: PUSH
46863: LD_INT 2
46865: ARRAY
46866: PPUSH
46867: CALL_OW 297
46871: PUSH
46872: LD_INT 6
46874: GREATER
46875: IFFALSE 46918
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
46877: LD_VAR 0 4
46881: PPUSH
46882: LD_VAR 0 2
46886: PUSH
46887: LD_VAR 0 9
46891: ARRAY
46892: PUSH
46893: LD_INT 1
46895: ARRAY
46896: PPUSH
46897: LD_VAR 0 2
46901: PUSH
46902: LD_VAR 0 9
46906: ARRAY
46907: PUSH
46908: LD_INT 2
46910: ARRAY
46911: PPUSH
46912: CALL_OW 114
46916: GO 46932
// SetTag ( i , tag ) ;
46918: LD_VAR 0 4
46922: PPUSH
46923: LD_VAR 0 9
46927: PPUSH
46928: CALL_OW 109
// end else
46932: GO 47005
// if enemy then
46934: LD_VAR 0 5
46938: IFFALSE 47005
// begin if GetWeapon ( i ) = ru_time_lapser then
46940: LD_VAR 0 4
46944: PPUSH
46945: CALL_OW 264
46949: PUSH
46950: LD_INT 49
46952: EQUAL
46953: IFFALSE 46981
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
46955: LD_VAR 0 4
46959: PPUSH
46960: LD_VAR 0 5
46964: PPUSH
46965: LD_VAR 0 4
46969: PPUSH
46970: CALL_OW 74
46974: PPUSH
46975: CALL_OW 112
46979: GO 47005
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
46981: LD_VAR 0 4
46985: PPUSH
46986: LD_VAR 0 5
46990: PPUSH
46991: LD_VAR 0 4
46995: PPUSH
46996: CALL_OW 74
47000: PPUSH
47001: CALL_OW 115
// end ; end ;
47005: GO 46585
47007: POP
47008: POP
// end ;
47009: LD_VAR 0 3
47013: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47014: LD_INT 0
47016: PPUSH
47017: PPUSH
47018: PPUSH
// if not unit or IsInUnit ( unit ) then
47019: LD_VAR 0 1
47023: NOT
47024: PUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 310
47034: OR
47035: IFFALSE 47039
// exit ;
47037: GO 47130
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47039: LD_ADDR_VAR 0 4
47043: PUSH
47044: LD_VAR 0 1
47048: PPUSH
47049: CALL_OW 250
47053: PPUSH
47054: LD_VAR 0 2
47058: PPUSH
47059: LD_INT 1
47061: PPUSH
47062: CALL_OW 272
47066: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47067: LD_ADDR_VAR 0 5
47071: PUSH
47072: LD_VAR 0 1
47076: PPUSH
47077: CALL_OW 251
47081: PPUSH
47082: LD_VAR 0 2
47086: PPUSH
47087: LD_INT 1
47089: PPUSH
47090: CALL_OW 273
47094: ST_TO_ADDR
// if ValidHex ( x , y ) then
47095: LD_VAR 0 4
47099: PPUSH
47100: LD_VAR 0 5
47104: PPUSH
47105: CALL_OW 488
47109: IFFALSE 47130
// ComTurnXY ( unit , x , y ) ;
47111: LD_VAR 0 1
47115: PPUSH
47116: LD_VAR 0 4
47120: PPUSH
47121: LD_VAR 0 5
47125: PPUSH
47126: CALL_OW 118
// end ;
47130: LD_VAR 0 3
47134: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47135: LD_INT 0
47137: PPUSH
47138: PPUSH
// result := false ;
47139: LD_ADDR_VAR 0 3
47143: PUSH
47144: LD_INT 0
47146: ST_TO_ADDR
// if not units then
47147: LD_VAR 0 2
47151: NOT
47152: IFFALSE 47156
// exit ;
47154: GO 47201
// for i in units do
47156: LD_ADDR_VAR 0 4
47160: PUSH
47161: LD_VAR 0 2
47165: PUSH
47166: FOR_IN
47167: IFFALSE 47199
// if See ( side , i ) then
47169: LD_VAR 0 1
47173: PPUSH
47174: LD_VAR 0 4
47178: PPUSH
47179: CALL_OW 292
47183: IFFALSE 47197
// begin result := true ;
47185: LD_ADDR_VAR 0 3
47189: PUSH
47190: LD_INT 1
47192: ST_TO_ADDR
// exit ;
47193: POP
47194: POP
47195: GO 47201
// end ;
47197: GO 47166
47199: POP
47200: POP
// end ;
47201: LD_VAR 0 3
47205: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47206: LD_INT 0
47208: PPUSH
47209: PPUSH
47210: PPUSH
47211: PPUSH
// if not unit or not points then
47212: LD_VAR 0 1
47216: NOT
47217: PUSH
47218: LD_VAR 0 2
47222: NOT
47223: OR
47224: IFFALSE 47228
// exit ;
47226: GO 47318
// dist := 99999 ;
47228: LD_ADDR_VAR 0 5
47232: PUSH
47233: LD_INT 99999
47235: ST_TO_ADDR
// for i in points do
47236: LD_ADDR_VAR 0 4
47240: PUSH
47241: LD_VAR 0 2
47245: PUSH
47246: FOR_IN
47247: IFFALSE 47316
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47249: LD_ADDR_VAR 0 6
47253: PUSH
47254: LD_VAR 0 1
47258: PPUSH
47259: LD_VAR 0 4
47263: PUSH
47264: LD_INT 1
47266: ARRAY
47267: PPUSH
47268: LD_VAR 0 4
47272: PUSH
47273: LD_INT 2
47275: ARRAY
47276: PPUSH
47277: CALL_OW 297
47281: ST_TO_ADDR
// if tmpDist < dist then
47282: LD_VAR 0 6
47286: PUSH
47287: LD_VAR 0 5
47291: LESS
47292: IFFALSE 47314
// begin result := i ;
47294: LD_ADDR_VAR 0 3
47298: PUSH
47299: LD_VAR 0 4
47303: ST_TO_ADDR
// dist := tmpDist ;
47304: LD_ADDR_VAR 0 5
47308: PUSH
47309: LD_VAR 0 6
47313: ST_TO_ADDR
// end ; end ;
47314: GO 47246
47316: POP
47317: POP
// end ;
47318: LD_VAR 0 3
47322: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47323: LD_INT 0
47325: PPUSH
// uc_side := side ;
47326: LD_ADDR_OWVAR 20
47330: PUSH
47331: LD_VAR 0 1
47335: ST_TO_ADDR
// uc_nation := 3 ;
47336: LD_ADDR_OWVAR 21
47340: PUSH
47341: LD_INT 3
47343: ST_TO_ADDR
// vc_chassis := 25 ;
47344: LD_ADDR_OWVAR 37
47348: PUSH
47349: LD_INT 25
47351: ST_TO_ADDR
// vc_engine := engine_siberite ;
47352: LD_ADDR_OWVAR 39
47356: PUSH
47357: LD_INT 3
47359: ST_TO_ADDR
// vc_control := control_computer ;
47360: LD_ADDR_OWVAR 38
47364: PUSH
47365: LD_INT 3
47367: ST_TO_ADDR
// vc_weapon := 59 ;
47368: LD_ADDR_OWVAR 40
47372: PUSH
47373: LD_INT 59
47375: ST_TO_ADDR
// result := CreateVehicle ;
47376: LD_ADDR_VAR 0 5
47380: PUSH
47381: CALL_OW 45
47385: ST_TO_ADDR
// SetDir ( result , d ) ;
47386: LD_VAR 0 5
47390: PPUSH
47391: LD_VAR 0 4
47395: PPUSH
47396: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47400: LD_VAR 0 5
47404: PPUSH
47405: LD_VAR 0 2
47409: PPUSH
47410: LD_VAR 0 3
47414: PPUSH
47415: LD_INT 0
47417: PPUSH
47418: CALL_OW 48
// end ;
47422: LD_VAR 0 5
47426: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47427: LD_INT 0
47429: PPUSH
47430: PPUSH
47431: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47432: LD_ADDR_VAR 0 2
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: LD_INT 0
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47455: LD_VAR 0 1
47459: NOT
47460: PUSH
47461: LD_VAR 0 1
47465: PPUSH
47466: CALL_OW 264
47470: PUSH
47471: LD_INT 12
47473: PUSH
47474: LD_INT 51
47476: PUSH
47477: LD_INT 32
47479: PUSH
47480: LD_INT 89
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: IN
47489: NOT
47490: OR
47491: IFFALSE 47495
// exit ;
47493: GO 47593
// for i := 1 to 3 do
47495: LD_ADDR_VAR 0 3
47499: PUSH
47500: DOUBLE
47501: LD_INT 1
47503: DEC
47504: ST_TO_ADDR
47505: LD_INT 3
47507: PUSH
47508: FOR_TO
47509: IFFALSE 47591
// begin tmp := GetCargo ( cargo , i ) ;
47511: LD_ADDR_VAR 0 4
47515: PUSH
47516: LD_VAR 0 1
47520: PPUSH
47521: LD_VAR 0 3
47525: PPUSH
47526: CALL_OW 289
47530: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47531: LD_ADDR_VAR 0 2
47535: PUSH
47536: LD_VAR 0 2
47540: PPUSH
47541: LD_VAR 0 3
47545: PPUSH
47546: LD_VAR 0 4
47550: PPUSH
47551: CALL_OW 1
47555: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47556: LD_ADDR_VAR 0 2
47560: PUSH
47561: LD_VAR 0 2
47565: PPUSH
47566: LD_INT 4
47568: PPUSH
47569: LD_VAR 0 2
47573: PUSH
47574: LD_INT 4
47576: ARRAY
47577: PUSH
47578: LD_VAR 0 4
47582: PLUS
47583: PPUSH
47584: CALL_OW 1
47588: ST_TO_ADDR
// end ;
47589: GO 47508
47591: POP
47592: POP
// end ;
47593: LD_VAR 0 2
47597: RET
// export function Length ( array ) ; begin
47598: LD_INT 0
47600: PPUSH
// result := array + 0 ;
47601: LD_ADDR_VAR 0 2
47605: PUSH
47606: LD_VAR 0 1
47610: PUSH
47611: LD_INT 0
47613: PLUS
47614: ST_TO_ADDR
// end ;
47615: LD_VAR 0 2
47619: RET
// export function PrepareArray ( array ) ; begin
47620: LD_INT 0
47622: PPUSH
// result := array diff 0 ;
47623: LD_ADDR_VAR 0 2
47627: PUSH
47628: LD_VAR 0 1
47632: PUSH
47633: LD_INT 0
47635: DIFF
47636: ST_TO_ADDR
// if not result [ 1 ] then
47637: LD_VAR 0 2
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: NOT
47646: IFFALSE 47666
// result := Delete ( result , 1 ) ;
47648: LD_ADDR_VAR 0 2
47652: PUSH
47653: LD_VAR 0 2
47657: PPUSH
47658: LD_INT 1
47660: PPUSH
47661: CALL_OW 3
47665: ST_TO_ADDR
// end ;
47666: LD_VAR 0 2
47670: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
47671: LD_INT 0
47673: PPUSH
47674: PPUSH
47675: PPUSH
47676: PPUSH
// sibRocketRange := 25 ;
47677: LD_ADDR_VAR 0 6
47681: PUSH
47682: LD_INT 25
47684: ST_TO_ADDR
// result := false ;
47685: LD_ADDR_VAR 0 4
47689: PUSH
47690: LD_INT 0
47692: ST_TO_ADDR
// for i := 0 to 5 do
47693: LD_ADDR_VAR 0 5
47697: PUSH
47698: DOUBLE
47699: LD_INT 0
47701: DEC
47702: ST_TO_ADDR
47703: LD_INT 5
47705: PUSH
47706: FOR_TO
47707: IFFALSE 47774
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
47709: LD_VAR 0 1
47713: PPUSH
47714: LD_VAR 0 5
47718: PPUSH
47719: LD_VAR 0 6
47723: PPUSH
47724: CALL_OW 272
47728: PPUSH
47729: LD_VAR 0 2
47733: PPUSH
47734: LD_VAR 0 5
47738: PPUSH
47739: LD_VAR 0 6
47743: PPUSH
47744: CALL_OW 273
47748: PPUSH
47749: LD_VAR 0 3
47753: PPUSH
47754: CALL_OW 309
47758: IFFALSE 47772
// begin result := true ;
47760: LD_ADDR_VAR 0 4
47764: PUSH
47765: LD_INT 1
47767: ST_TO_ADDR
// exit ;
47768: POP
47769: POP
47770: GO 47776
// end ;
47772: GO 47706
47774: POP
47775: POP
// end ;
47776: LD_VAR 0 4
47780: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
47781: LD_INT 0
47783: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
47784: LD_VAR 0 1
47788: PPUSH
47789: LD_VAR 0 2
47793: PPUSH
47794: LD_INT 0
47796: PPUSH
47797: LD_INT 0
47799: PPUSH
47800: LD_INT 1
47802: PPUSH
47803: LD_INT 0
47805: PPUSH
47806: CALL_OW 587
// end ;
47810: LD_VAR 0 3
47814: RET
// export function CenterOnNow ( unit ) ; begin
47815: LD_INT 0
47817: PPUSH
// result := IsInUnit ( unit ) ;
47818: LD_ADDR_VAR 0 2
47822: PUSH
47823: LD_VAR 0 1
47827: PPUSH
47828: CALL_OW 310
47832: ST_TO_ADDR
// if not result then
47833: LD_VAR 0 2
47837: NOT
47838: IFFALSE 47850
// result := unit ;
47840: LD_ADDR_VAR 0 2
47844: PUSH
47845: LD_VAR 0 1
47849: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 87
// end ; end_of_file end_of_file
47859: LD_VAR 0 2
47863: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
47864: LD_VAR 0 1
47868: PPUSH
47869: LD_VAR 0 2
47873: PPUSH
47874: LD_VAR 0 3
47878: PPUSH
47879: LD_VAR 0 4
47883: PPUSH
47884: LD_VAR 0 5
47888: PPUSH
47889: LD_VAR 0 6
47893: PPUSH
47894: CALL 48078 0 6
// end ;
47898: PPOPN 6
47900: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
47901: LD_INT 0
47903: PPUSH
// begin if not units then
47904: LD_VAR 0 1
47908: NOT
47909: IFFALSE 47913
// exit ;
47911: GO 47913
// end ;
47913: PPOPN 7
47915: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
47916: CALL 47982 0 0
// end ; end_of_file
47920: PPOPN 1
47922: END
// export globalGameSaveCounter ; every 0 0$1 do
47923: GO 47925
47925: DISABLE
// begin enable ;
47926: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
47927: LD_STRING updateTimer(
47929: PUSH
47930: LD_OWVAR 1
47934: STR
47935: PUSH
47936: LD_STRING );
47938: STR
47939: PPUSH
47940: CALL_OW 559
// end ;
47944: END
// every 0 0$1 do
47945: GO 47947
47947: DISABLE
// begin globalGameSaveCounter := 0 ;
47948: LD_ADDR_EXP 29
47952: PUSH
47953: LD_INT 0
47955: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
47956: LD_STRING setGameSaveCounter(0)
47958: PPUSH
47959: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
47963: LD_STRING initStreamRollete();
47965: PPUSH
47966: CALL_OW 559
// InitStreamMode ;
47970: CALL 49296 0 0
// DefineStreamItems ( false ) ;
47974: LD_INT 0
47976: PPUSH
47977: CALL 49760 0 1
// end ;
47981: END
// export function SOS_MapStart ( ) ; begin
47982: LD_INT 0
47984: PPUSH
// if streamModeActive then
47985: LD_EXP 30
47989: IFFALSE 47998
// DefineStreamItems ( true ) ;
47991: LD_INT 1
47993: PPUSH
47994: CALL 49760 0 1
// UpdateLuaVariables ( ) ;
47998: CALL 48015 0 0
// UpdateFactoryWaypoints ( ) ;
48002: CALL 62621 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48006: CALL 62878 0 0
// end ;
48010: LD_VAR 0 1
48014: RET
// function UpdateLuaVariables ( ) ; begin
48015: LD_INT 0
48017: PPUSH
// if globalGameSaveCounter then
48018: LD_EXP 29
48022: IFFALSE 48056
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48024: LD_ADDR_EXP 29
48028: PUSH
48029: LD_EXP 29
48033: PPUSH
48034: CALL 45223 0 1
48038: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48039: LD_STRING setGameSaveCounter(
48041: PUSH
48042: LD_EXP 29
48046: STR
48047: PUSH
48048: LD_STRING )
48050: STR
48051: PPUSH
48052: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48056: LD_STRING setGameDifficulty(
48058: PUSH
48059: LD_OWVAR 67
48063: STR
48064: PUSH
48065: LD_STRING )
48067: STR
48068: PPUSH
48069: CALL_OW 559
// end ;
48073: LD_VAR 0 1
48077: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48078: LD_INT 0
48080: PPUSH
// if p2 = stream_mode then
48081: LD_VAR 0 2
48085: PUSH
48086: LD_INT 100
48088: EQUAL
48089: IFFALSE 49092
// begin if not StreamModeActive then
48091: LD_EXP 30
48095: NOT
48096: IFFALSE 48106
// StreamModeActive := true ;
48098: LD_ADDR_EXP 30
48102: PUSH
48103: LD_INT 1
48105: ST_TO_ADDR
// if p3 = 0 then
48106: LD_VAR 0 3
48110: PUSH
48111: LD_INT 0
48113: EQUAL
48114: IFFALSE 48120
// InitStreamMode ;
48116: CALL 49296 0 0
// if p3 = 1 then
48120: LD_VAR 0 3
48124: PUSH
48125: LD_INT 1
48127: EQUAL
48128: IFFALSE 48138
// sRocket := true ;
48130: LD_ADDR_EXP 35
48134: PUSH
48135: LD_INT 1
48137: ST_TO_ADDR
// if p3 = 2 then
48138: LD_VAR 0 3
48142: PUSH
48143: LD_INT 2
48145: EQUAL
48146: IFFALSE 48156
// sSpeed := true ;
48148: LD_ADDR_EXP 34
48152: PUSH
48153: LD_INT 1
48155: ST_TO_ADDR
// if p3 = 3 then
48156: LD_VAR 0 3
48160: PUSH
48161: LD_INT 3
48163: EQUAL
48164: IFFALSE 48174
// sEngine := true ;
48166: LD_ADDR_EXP 36
48170: PUSH
48171: LD_INT 1
48173: ST_TO_ADDR
// if p3 = 4 then
48174: LD_VAR 0 3
48178: PUSH
48179: LD_INT 4
48181: EQUAL
48182: IFFALSE 48192
// sSpec := true ;
48184: LD_ADDR_EXP 33
48188: PUSH
48189: LD_INT 1
48191: ST_TO_ADDR
// if p3 = 5 then
48192: LD_VAR 0 3
48196: PUSH
48197: LD_INT 5
48199: EQUAL
48200: IFFALSE 48210
// sLevel := true ;
48202: LD_ADDR_EXP 37
48206: PUSH
48207: LD_INT 1
48209: ST_TO_ADDR
// if p3 = 6 then
48210: LD_VAR 0 3
48214: PUSH
48215: LD_INT 6
48217: EQUAL
48218: IFFALSE 48228
// sArmoury := true ;
48220: LD_ADDR_EXP 38
48224: PUSH
48225: LD_INT 1
48227: ST_TO_ADDR
// if p3 = 7 then
48228: LD_VAR 0 3
48232: PUSH
48233: LD_INT 7
48235: EQUAL
48236: IFFALSE 48246
// sRadar := true ;
48238: LD_ADDR_EXP 39
48242: PUSH
48243: LD_INT 1
48245: ST_TO_ADDR
// if p3 = 8 then
48246: LD_VAR 0 3
48250: PUSH
48251: LD_INT 8
48253: EQUAL
48254: IFFALSE 48264
// sBunker := true ;
48256: LD_ADDR_EXP 40
48260: PUSH
48261: LD_INT 1
48263: ST_TO_ADDR
// if p3 = 9 then
48264: LD_VAR 0 3
48268: PUSH
48269: LD_INT 9
48271: EQUAL
48272: IFFALSE 48282
// sHack := true ;
48274: LD_ADDR_EXP 41
48278: PUSH
48279: LD_INT 1
48281: ST_TO_ADDR
// if p3 = 10 then
48282: LD_VAR 0 3
48286: PUSH
48287: LD_INT 10
48289: EQUAL
48290: IFFALSE 48300
// sFire := true ;
48292: LD_ADDR_EXP 42
48296: PUSH
48297: LD_INT 1
48299: ST_TO_ADDR
// if p3 = 11 then
48300: LD_VAR 0 3
48304: PUSH
48305: LD_INT 11
48307: EQUAL
48308: IFFALSE 48318
// sRefresh := true ;
48310: LD_ADDR_EXP 43
48314: PUSH
48315: LD_INT 1
48317: ST_TO_ADDR
// if p3 = 12 then
48318: LD_VAR 0 3
48322: PUSH
48323: LD_INT 12
48325: EQUAL
48326: IFFALSE 48336
// sExp := true ;
48328: LD_ADDR_EXP 44
48332: PUSH
48333: LD_INT 1
48335: ST_TO_ADDR
// if p3 = 13 then
48336: LD_VAR 0 3
48340: PUSH
48341: LD_INT 13
48343: EQUAL
48344: IFFALSE 48354
// sDepot := true ;
48346: LD_ADDR_EXP 45
48350: PUSH
48351: LD_INT 1
48353: ST_TO_ADDR
// if p3 = 14 then
48354: LD_VAR 0 3
48358: PUSH
48359: LD_INT 14
48361: EQUAL
48362: IFFALSE 48372
// sFlag := true ;
48364: LD_ADDR_EXP 46
48368: PUSH
48369: LD_INT 1
48371: ST_TO_ADDR
// if p3 = 15 then
48372: LD_VAR 0 3
48376: PUSH
48377: LD_INT 15
48379: EQUAL
48380: IFFALSE 48390
// sKamikadze := true ;
48382: LD_ADDR_EXP 54
48386: PUSH
48387: LD_INT 1
48389: ST_TO_ADDR
// if p3 = 16 then
48390: LD_VAR 0 3
48394: PUSH
48395: LD_INT 16
48397: EQUAL
48398: IFFALSE 48408
// sTroll := true ;
48400: LD_ADDR_EXP 55
48404: PUSH
48405: LD_INT 1
48407: ST_TO_ADDR
// if p3 = 17 then
48408: LD_VAR 0 3
48412: PUSH
48413: LD_INT 17
48415: EQUAL
48416: IFFALSE 48426
// sSlow := true ;
48418: LD_ADDR_EXP 56
48422: PUSH
48423: LD_INT 1
48425: ST_TO_ADDR
// if p3 = 18 then
48426: LD_VAR 0 3
48430: PUSH
48431: LD_INT 18
48433: EQUAL
48434: IFFALSE 48444
// sLack := true ;
48436: LD_ADDR_EXP 57
48440: PUSH
48441: LD_INT 1
48443: ST_TO_ADDR
// if p3 = 19 then
48444: LD_VAR 0 3
48448: PUSH
48449: LD_INT 19
48451: EQUAL
48452: IFFALSE 48462
// sTank := true ;
48454: LD_ADDR_EXP 59
48458: PUSH
48459: LD_INT 1
48461: ST_TO_ADDR
// if p3 = 20 then
48462: LD_VAR 0 3
48466: PUSH
48467: LD_INT 20
48469: EQUAL
48470: IFFALSE 48480
// sRemote := true ;
48472: LD_ADDR_EXP 60
48476: PUSH
48477: LD_INT 1
48479: ST_TO_ADDR
// if p3 = 21 then
48480: LD_VAR 0 3
48484: PUSH
48485: LD_INT 21
48487: EQUAL
48488: IFFALSE 48498
// sPowell := true ;
48490: LD_ADDR_EXP 61
48494: PUSH
48495: LD_INT 1
48497: ST_TO_ADDR
// if p3 = 22 then
48498: LD_VAR 0 3
48502: PUSH
48503: LD_INT 22
48505: EQUAL
48506: IFFALSE 48516
// sTeleport := true ;
48508: LD_ADDR_EXP 64
48512: PUSH
48513: LD_INT 1
48515: ST_TO_ADDR
// if p3 = 23 then
48516: LD_VAR 0 3
48520: PUSH
48521: LD_INT 23
48523: EQUAL
48524: IFFALSE 48534
// sOilTower := true ;
48526: LD_ADDR_EXP 66
48530: PUSH
48531: LD_INT 1
48533: ST_TO_ADDR
// if p3 = 24 then
48534: LD_VAR 0 3
48538: PUSH
48539: LD_INT 24
48541: EQUAL
48542: IFFALSE 48552
// sShovel := true ;
48544: LD_ADDR_EXP 67
48548: PUSH
48549: LD_INT 1
48551: ST_TO_ADDR
// if p3 = 25 then
48552: LD_VAR 0 3
48556: PUSH
48557: LD_INT 25
48559: EQUAL
48560: IFFALSE 48570
// sSheik := true ;
48562: LD_ADDR_EXP 68
48566: PUSH
48567: LD_INT 1
48569: ST_TO_ADDR
// if p3 = 26 then
48570: LD_VAR 0 3
48574: PUSH
48575: LD_INT 26
48577: EQUAL
48578: IFFALSE 48588
// sEarthquake := true ;
48580: LD_ADDR_EXP 70
48584: PUSH
48585: LD_INT 1
48587: ST_TO_ADDR
// if p3 = 27 then
48588: LD_VAR 0 3
48592: PUSH
48593: LD_INT 27
48595: EQUAL
48596: IFFALSE 48606
// sAI := true ;
48598: LD_ADDR_EXP 71
48602: PUSH
48603: LD_INT 1
48605: ST_TO_ADDR
// if p3 = 28 then
48606: LD_VAR 0 3
48610: PUSH
48611: LD_INT 28
48613: EQUAL
48614: IFFALSE 48624
// sCargo := true ;
48616: LD_ADDR_EXP 74
48620: PUSH
48621: LD_INT 1
48623: ST_TO_ADDR
// if p3 = 29 then
48624: LD_VAR 0 3
48628: PUSH
48629: LD_INT 29
48631: EQUAL
48632: IFFALSE 48642
// sDLaser := true ;
48634: LD_ADDR_EXP 75
48638: PUSH
48639: LD_INT 1
48641: ST_TO_ADDR
// if p3 = 30 then
48642: LD_VAR 0 3
48646: PUSH
48647: LD_INT 30
48649: EQUAL
48650: IFFALSE 48660
// sExchange := true ;
48652: LD_ADDR_EXP 76
48656: PUSH
48657: LD_INT 1
48659: ST_TO_ADDR
// if p3 = 31 then
48660: LD_VAR 0 3
48664: PUSH
48665: LD_INT 31
48667: EQUAL
48668: IFFALSE 48678
// sFac := true ;
48670: LD_ADDR_EXP 77
48674: PUSH
48675: LD_INT 1
48677: ST_TO_ADDR
// if p3 = 32 then
48678: LD_VAR 0 3
48682: PUSH
48683: LD_INT 32
48685: EQUAL
48686: IFFALSE 48696
// sPower := true ;
48688: LD_ADDR_EXP 78
48692: PUSH
48693: LD_INT 1
48695: ST_TO_ADDR
// if p3 = 33 then
48696: LD_VAR 0 3
48700: PUSH
48701: LD_INT 33
48703: EQUAL
48704: IFFALSE 48714
// sRandom := true ;
48706: LD_ADDR_EXP 79
48710: PUSH
48711: LD_INT 1
48713: ST_TO_ADDR
// if p3 = 34 then
48714: LD_VAR 0 3
48718: PUSH
48719: LD_INT 34
48721: EQUAL
48722: IFFALSE 48732
// sShield := true ;
48724: LD_ADDR_EXP 80
48728: PUSH
48729: LD_INT 1
48731: ST_TO_ADDR
// if p3 = 35 then
48732: LD_VAR 0 3
48736: PUSH
48737: LD_INT 35
48739: EQUAL
48740: IFFALSE 48750
// sTime := true ;
48742: LD_ADDR_EXP 81
48746: PUSH
48747: LD_INT 1
48749: ST_TO_ADDR
// if p3 = 36 then
48750: LD_VAR 0 3
48754: PUSH
48755: LD_INT 36
48757: EQUAL
48758: IFFALSE 48768
// sTools := true ;
48760: LD_ADDR_EXP 82
48764: PUSH
48765: LD_INT 1
48767: ST_TO_ADDR
// if p3 = 101 then
48768: LD_VAR 0 3
48772: PUSH
48773: LD_INT 101
48775: EQUAL
48776: IFFALSE 48786
// sSold := true ;
48778: LD_ADDR_EXP 47
48782: PUSH
48783: LD_INT 1
48785: ST_TO_ADDR
// if p3 = 102 then
48786: LD_VAR 0 3
48790: PUSH
48791: LD_INT 102
48793: EQUAL
48794: IFFALSE 48804
// sDiff := true ;
48796: LD_ADDR_EXP 48
48800: PUSH
48801: LD_INT 1
48803: ST_TO_ADDR
// if p3 = 103 then
48804: LD_VAR 0 3
48808: PUSH
48809: LD_INT 103
48811: EQUAL
48812: IFFALSE 48822
// sFog := true ;
48814: LD_ADDR_EXP 51
48818: PUSH
48819: LD_INT 1
48821: ST_TO_ADDR
// if p3 = 104 then
48822: LD_VAR 0 3
48826: PUSH
48827: LD_INT 104
48829: EQUAL
48830: IFFALSE 48840
// sReset := true ;
48832: LD_ADDR_EXP 52
48836: PUSH
48837: LD_INT 1
48839: ST_TO_ADDR
// if p3 = 105 then
48840: LD_VAR 0 3
48844: PUSH
48845: LD_INT 105
48847: EQUAL
48848: IFFALSE 48858
// sSun := true ;
48850: LD_ADDR_EXP 53
48854: PUSH
48855: LD_INT 1
48857: ST_TO_ADDR
// if p3 = 106 then
48858: LD_VAR 0 3
48862: PUSH
48863: LD_INT 106
48865: EQUAL
48866: IFFALSE 48876
// sTiger := true ;
48868: LD_ADDR_EXP 49
48872: PUSH
48873: LD_INT 1
48875: ST_TO_ADDR
// if p3 = 107 then
48876: LD_VAR 0 3
48880: PUSH
48881: LD_INT 107
48883: EQUAL
48884: IFFALSE 48894
// sBomb := true ;
48886: LD_ADDR_EXP 50
48890: PUSH
48891: LD_INT 1
48893: ST_TO_ADDR
// if p3 = 108 then
48894: LD_VAR 0 3
48898: PUSH
48899: LD_INT 108
48901: EQUAL
48902: IFFALSE 48912
// sWound := true ;
48904: LD_ADDR_EXP 58
48908: PUSH
48909: LD_INT 1
48911: ST_TO_ADDR
// if p3 = 109 then
48912: LD_VAR 0 3
48916: PUSH
48917: LD_INT 109
48919: EQUAL
48920: IFFALSE 48930
// sBetray := true ;
48922: LD_ADDR_EXP 62
48926: PUSH
48927: LD_INT 1
48929: ST_TO_ADDR
// if p3 = 110 then
48930: LD_VAR 0 3
48934: PUSH
48935: LD_INT 110
48937: EQUAL
48938: IFFALSE 48948
// sContamin := true ;
48940: LD_ADDR_EXP 63
48944: PUSH
48945: LD_INT 1
48947: ST_TO_ADDR
// if p3 = 111 then
48948: LD_VAR 0 3
48952: PUSH
48953: LD_INT 111
48955: EQUAL
48956: IFFALSE 48966
// sOil := true ;
48958: LD_ADDR_EXP 65
48962: PUSH
48963: LD_INT 1
48965: ST_TO_ADDR
// if p3 = 112 then
48966: LD_VAR 0 3
48970: PUSH
48971: LD_INT 112
48973: EQUAL
48974: IFFALSE 48984
// sStu := true ;
48976: LD_ADDR_EXP 69
48980: PUSH
48981: LD_INT 1
48983: ST_TO_ADDR
// if p3 = 113 then
48984: LD_VAR 0 3
48988: PUSH
48989: LD_INT 113
48991: EQUAL
48992: IFFALSE 49002
// sBazooka := true ;
48994: LD_ADDR_EXP 72
48998: PUSH
48999: LD_INT 1
49001: ST_TO_ADDR
// if p3 = 114 then
49002: LD_VAR 0 3
49006: PUSH
49007: LD_INT 114
49009: EQUAL
49010: IFFALSE 49020
// sMortar := true ;
49012: LD_ADDR_EXP 73
49016: PUSH
49017: LD_INT 1
49019: ST_TO_ADDR
// if p3 = 115 then
49020: LD_VAR 0 3
49024: PUSH
49025: LD_INT 115
49027: EQUAL
49028: IFFALSE 49038
// sRanger := true ;
49030: LD_ADDR_EXP 83
49034: PUSH
49035: LD_INT 1
49037: ST_TO_ADDR
// if p3 = 116 then
49038: LD_VAR 0 3
49042: PUSH
49043: LD_INT 116
49045: EQUAL
49046: IFFALSE 49056
// sComputer := true ;
49048: LD_ADDR_EXP 84
49052: PUSH
49053: LD_INT 1
49055: ST_TO_ADDR
// if p3 = 117 then
49056: LD_VAR 0 3
49060: PUSH
49061: LD_INT 117
49063: EQUAL
49064: IFFALSE 49074
// s30 := true ;
49066: LD_ADDR_EXP 85
49070: PUSH
49071: LD_INT 1
49073: ST_TO_ADDR
// if p3 = 118 then
49074: LD_VAR 0 3
49078: PUSH
49079: LD_INT 118
49081: EQUAL
49082: IFFALSE 49092
// s60 := true ;
49084: LD_ADDR_EXP 86
49088: PUSH
49089: LD_INT 1
49091: ST_TO_ADDR
// end ; if p2 = hack_mode then
49092: LD_VAR 0 2
49096: PUSH
49097: LD_INT 101
49099: EQUAL
49100: IFFALSE 49228
// begin case p3 of 1 :
49102: LD_VAR 0 3
49106: PUSH
49107: LD_INT 1
49109: DOUBLE
49110: EQUAL
49111: IFTRUE 49115
49113: GO 49122
49115: POP
// hHackUnlimitedResources ; 2 :
49116: CALL 61367 0 0
49120: GO 49228
49122: LD_INT 2
49124: DOUBLE
49125: EQUAL
49126: IFTRUE 49130
49128: GO 49137
49130: POP
// hHackSetLevel10 ; 3 :
49131: CALL 61500 0 0
49135: GO 49228
49137: LD_INT 3
49139: DOUBLE
49140: EQUAL
49141: IFTRUE 49145
49143: GO 49152
49145: POP
// hHackSetLevel10YourUnits ; 4 :
49146: CALL 61585 0 0
49150: GO 49228
49152: LD_INT 4
49154: DOUBLE
49155: EQUAL
49156: IFTRUE 49160
49158: GO 49167
49160: POP
// hHackInvincible ; 5 :
49161: CALL 62033 0 0
49165: GO 49228
49167: LD_INT 5
49169: DOUBLE
49170: EQUAL
49171: IFTRUE 49175
49173: GO 49182
49175: POP
// hHackInvisible ; 6 :
49176: CALL 62144 0 0
49180: GO 49228
49182: LD_INT 6
49184: DOUBLE
49185: EQUAL
49186: IFTRUE 49190
49188: GO 49197
49190: POP
// hHackChangeYourSide ; 7 :
49191: CALL 62201 0 0
49195: GO 49228
49197: LD_INT 7
49199: DOUBLE
49200: EQUAL
49201: IFTRUE 49205
49203: GO 49212
49205: POP
// hHackChangeUnitSide ; 8 :
49206: CALL 62243 0 0
49210: GO 49228
49212: LD_INT 8
49214: DOUBLE
49215: EQUAL
49216: IFTRUE 49220
49218: GO 49227
49220: POP
// hHackFog ; end ;
49221: CALL 62344 0 0
49225: GO 49228
49227: POP
// end ; if p2 = game_save_mode then
49228: LD_VAR 0 2
49232: PUSH
49233: LD_INT 102
49235: EQUAL
49236: IFFALSE 49291
// begin if p3 = 1 then
49238: LD_VAR 0 3
49242: PUSH
49243: LD_INT 1
49245: EQUAL
49246: IFFALSE 49258
// globalGameSaveCounter := p4 ;
49248: LD_ADDR_EXP 29
49252: PUSH
49253: LD_VAR 0 4
49257: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49258: LD_VAR 0 3
49262: PUSH
49263: LD_INT 2
49265: EQUAL
49266: PUSH
49267: LD_EXP 29
49271: AND
49272: IFFALSE 49291
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49274: LD_STRING setGameSaveCounter(
49276: PUSH
49277: LD_EXP 29
49281: STR
49282: PUSH
49283: LD_STRING )
49285: STR
49286: PPUSH
49287: CALL_OW 559
// end ; end ;
49291: LD_VAR 0 7
49295: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49296: LD_INT 0
49298: PPUSH
// streamModeActive := false ;
49299: LD_ADDR_EXP 30
49303: PUSH
49304: LD_INT 0
49306: ST_TO_ADDR
// normalCounter := 36 ;
49307: LD_ADDR_EXP 31
49311: PUSH
49312: LD_INT 36
49314: ST_TO_ADDR
// hardcoreCounter := 18 ;
49315: LD_ADDR_EXP 32
49319: PUSH
49320: LD_INT 18
49322: ST_TO_ADDR
// sRocket := false ;
49323: LD_ADDR_EXP 35
49327: PUSH
49328: LD_INT 0
49330: ST_TO_ADDR
// sSpeed := false ;
49331: LD_ADDR_EXP 34
49335: PUSH
49336: LD_INT 0
49338: ST_TO_ADDR
// sEngine := false ;
49339: LD_ADDR_EXP 36
49343: PUSH
49344: LD_INT 0
49346: ST_TO_ADDR
// sSpec := false ;
49347: LD_ADDR_EXP 33
49351: PUSH
49352: LD_INT 0
49354: ST_TO_ADDR
// sLevel := false ;
49355: LD_ADDR_EXP 37
49359: PUSH
49360: LD_INT 0
49362: ST_TO_ADDR
// sArmoury := false ;
49363: LD_ADDR_EXP 38
49367: PUSH
49368: LD_INT 0
49370: ST_TO_ADDR
// sRadar := false ;
49371: LD_ADDR_EXP 39
49375: PUSH
49376: LD_INT 0
49378: ST_TO_ADDR
// sBunker := false ;
49379: LD_ADDR_EXP 40
49383: PUSH
49384: LD_INT 0
49386: ST_TO_ADDR
// sHack := false ;
49387: LD_ADDR_EXP 41
49391: PUSH
49392: LD_INT 0
49394: ST_TO_ADDR
// sFire := false ;
49395: LD_ADDR_EXP 42
49399: PUSH
49400: LD_INT 0
49402: ST_TO_ADDR
// sRefresh := false ;
49403: LD_ADDR_EXP 43
49407: PUSH
49408: LD_INT 0
49410: ST_TO_ADDR
// sExp := false ;
49411: LD_ADDR_EXP 44
49415: PUSH
49416: LD_INT 0
49418: ST_TO_ADDR
// sDepot := false ;
49419: LD_ADDR_EXP 45
49423: PUSH
49424: LD_INT 0
49426: ST_TO_ADDR
// sFlag := false ;
49427: LD_ADDR_EXP 46
49431: PUSH
49432: LD_INT 0
49434: ST_TO_ADDR
// sKamikadze := false ;
49435: LD_ADDR_EXP 54
49439: PUSH
49440: LD_INT 0
49442: ST_TO_ADDR
// sTroll := false ;
49443: LD_ADDR_EXP 55
49447: PUSH
49448: LD_INT 0
49450: ST_TO_ADDR
// sSlow := false ;
49451: LD_ADDR_EXP 56
49455: PUSH
49456: LD_INT 0
49458: ST_TO_ADDR
// sLack := false ;
49459: LD_ADDR_EXP 57
49463: PUSH
49464: LD_INT 0
49466: ST_TO_ADDR
// sTank := false ;
49467: LD_ADDR_EXP 59
49471: PUSH
49472: LD_INT 0
49474: ST_TO_ADDR
// sRemote := false ;
49475: LD_ADDR_EXP 60
49479: PUSH
49480: LD_INT 0
49482: ST_TO_ADDR
// sPowell := false ;
49483: LD_ADDR_EXP 61
49487: PUSH
49488: LD_INT 0
49490: ST_TO_ADDR
// sTeleport := false ;
49491: LD_ADDR_EXP 64
49495: PUSH
49496: LD_INT 0
49498: ST_TO_ADDR
// sOilTower := false ;
49499: LD_ADDR_EXP 66
49503: PUSH
49504: LD_INT 0
49506: ST_TO_ADDR
// sShovel := false ;
49507: LD_ADDR_EXP 67
49511: PUSH
49512: LD_INT 0
49514: ST_TO_ADDR
// sSheik := false ;
49515: LD_ADDR_EXP 68
49519: PUSH
49520: LD_INT 0
49522: ST_TO_ADDR
// sEarthquake := false ;
49523: LD_ADDR_EXP 70
49527: PUSH
49528: LD_INT 0
49530: ST_TO_ADDR
// sAI := false ;
49531: LD_ADDR_EXP 71
49535: PUSH
49536: LD_INT 0
49538: ST_TO_ADDR
// sCargo := false ;
49539: LD_ADDR_EXP 74
49543: PUSH
49544: LD_INT 0
49546: ST_TO_ADDR
// sDLaser := false ;
49547: LD_ADDR_EXP 75
49551: PUSH
49552: LD_INT 0
49554: ST_TO_ADDR
// sExchange := false ;
49555: LD_ADDR_EXP 76
49559: PUSH
49560: LD_INT 0
49562: ST_TO_ADDR
// sFac := false ;
49563: LD_ADDR_EXP 77
49567: PUSH
49568: LD_INT 0
49570: ST_TO_ADDR
// sPower := false ;
49571: LD_ADDR_EXP 78
49575: PUSH
49576: LD_INT 0
49578: ST_TO_ADDR
// sRandom := false ;
49579: LD_ADDR_EXP 79
49583: PUSH
49584: LD_INT 0
49586: ST_TO_ADDR
// sShield := false ;
49587: LD_ADDR_EXP 80
49591: PUSH
49592: LD_INT 0
49594: ST_TO_ADDR
// sTime := false ;
49595: LD_ADDR_EXP 81
49599: PUSH
49600: LD_INT 0
49602: ST_TO_ADDR
// sTools := false ;
49603: LD_ADDR_EXP 82
49607: PUSH
49608: LD_INT 0
49610: ST_TO_ADDR
// sSold := false ;
49611: LD_ADDR_EXP 47
49615: PUSH
49616: LD_INT 0
49618: ST_TO_ADDR
// sDiff := false ;
49619: LD_ADDR_EXP 48
49623: PUSH
49624: LD_INT 0
49626: ST_TO_ADDR
// sFog := false ;
49627: LD_ADDR_EXP 51
49631: PUSH
49632: LD_INT 0
49634: ST_TO_ADDR
// sReset := false ;
49635: LD_ADDR_EXP 52
49639: PUSH
49640: LD_INT 0
49642: ST_TO_ADDR
// sSun := false ;
49643: LD_ADDR_EXP 53
49647: PUSH
49648: LD_INT 0
49650: ST_TO_ADDR
// sTiger := false ;
49651: LD_ADDR_EXP 49
49655: PUSH
49656: LD_INT 0
49658: ST_TO_ADDR
// sBomb := false ;
49659: LD_ADDR_EXP 50
49663: PUSH
49664: LD_INT 0
49666: ST_TO_ADDR
// sWound := false ;
49667: LD_ADDR_EXP 58
49671: PUSH
49672: LD_INT 0
49674: ST_TO_ADDR
// sBetray := false ;
49675: LD_ADDR_EXP 62
49679: PUSH
49680: LD_INT 0
49682: ST_TO_ADDR
// sContamin := false ;
49683: LD_ADDR_EXP 63
49687: PUSH
49688: LD_INT 0
49690: ST_TO_ADDR
// sOil := false ;
49691: LD_ADDR_EXP 65
49695: PUSH
49696: LD_INT 0
49698: ST_TO_ADDR
// sStu := false ;
49699: LD_ADDR_EXP 69
49703: PUSH
49704: LD_INT 0
49706: ST_TO_ADDR
// sBazooka := false ;
49707: LD_ADDR_EXP 72
49711: PUSH
49712: LD_INT 0
49714: ST_TO_ADDR
// sMortar := false ;
49715: LD_ADDR_EXP 73
49719: PUSH
49720: LD_INT 0
49722: ST_TO_ADDR
// sRanger := false ;
49723: LD_ADDR_EXP 83
49727: PUSH
49728: LD_INT 0
49730: ST_TO_ADDR
// sComputer := false ;
49731: LD_ADDR_EXP 84
49735: PUSH
49736: LD_INT 0
49738: ST_TO_ADDR
// s30 := false ;
49739: LD_ADDR_EXP 85
49743: PUSH
49744: LD_INT 0
49746: ST_TO_ADDR
// s60 := false ;
49747: LD_ADDR_EXP 86
49751: PUSH
49752: LD_INT 0
49754: ST_TO_ADDR
// end ;
49755: LD_VAR 0 1
49759: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
49760: LD_INT 0
49762: PPUSH
49763: PPUSH
49764: PPUSH
49765: PPUSH
49766: PPUSH
49767: PPUSH
49768: PPUSH
// result := [ ] ;
49769: LD_ADDR_VAR 0 2
49773: PUSH
49774: EMPTY
49775: ST_TO_ADDR
// if campaign_id = 1 then
49776: LD_OWVAR 69
49780: PUSH
49781: LD_INT 1
49783: EQUAL
49784: IFFALSE 52950
// begin case mission_number of 1 :
49786: LD_OWVAR 70
49790: PUSH
49791: LD_INT 1
49793: DOUBLE
49794: EQUAL
49795: IFTRUE 49799
49797: GO 49875
49799: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
49800: LD_ADDR_VAR 0 2
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 4
49810: PUSH
49811: LD_INT 11
49813: PUSH
49814: LD_INT 12
49816: PUSH
49817: LD_INT 15
49819: PUSH
49820: LD_INT 16
49822: PUSH
49823: LD_INT 22
49825: PUSH
49826: LD_INT 23
49828: PUSH
49829: LD_INT 26
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 101
49845: PUSH
49846: LD_INT 102
49848: PUSH
49849: LD_INT 106
49851: PUSH
49852: LD_INT 116
49854: PUSH
49855: LD_INT 117
49857: PUSH
49858: LD_INT 118
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: ST_TO_ADDR
49873: GO 52948
49875: LD_INT 2
49877: DOUBLE
49878: EQUAL
49879: IFTRUE 49883
49881: GO 49967
49883: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
49884: LD_ADDR_VAR 0 2
49888: PUSH
49889: LD_INT 2
49891: PUSH
49892: LD_INT 4
49894: PUSH
49895: LD_INT 11
49897: PUSH
49898: LD_INT 12
49900: PUSH
49901: LD_INT 15
49903: PUSH
49904: LD_INT 16
49906: PUSH
49907: LD_INT 22
49909: PUSH
49910: LD_INT 23
49912: PUSH
49913: LD_INT 26
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 101
49929: PUSH
49930: LD_INT 102
49932: PUSH
49933: LD_INT 105
49935: PUSH
49936: LD_INT 106
49938: PUSH
49939: LD_INT 108
49941: PUSH
49942: LD_INT 116
49944: PUSH
49945: LD_INT 117
49947: PUSH
49948: LD_INT 118
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: ST_TO_ADDR
49965: GO 52948
49967: LD_INT 3
49969: DOUBLE
49970: EQUAL
49971: IFTRUE 49975
49973: GO 50063
49975: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
49976: LD_ADDR_VAR 0 2
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: LD_INT 4
49986: PUSH
49987: LD_INT 5
49989: PUSH
49990: LD_INT 11
49992: PUSH
49993: LD_INT 12
49995: PUSH
49996: LD_INT 15
49998: PUSH
49999: LD_INT 16
50001: PUSH
50002: LD_INT 22
50004: PUSH
50005: LD_INT 26
50007: PUSH
50008: LD_INT 36
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 101
50025: PUSH
50026: LD_INT 102
50028: PUSH
50029: LD_INT 105
50031: PUSH
50032: LD_INT 106
50034: PUSH
50035: LD_INT 108
50037: PUSH
50038: LD_INT 116
50040: PUSH
50041: LD_INT 117
50043: PUSH
50044: LD_INT 118
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: ST_TO_ADDR
50061: GO 52948
50063: LD_INT 4
50065: DOUBLE
50066: EQUAL
50067: IFTRUE 50071
50069: GO 50167
50071: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50072: LD_ADDR_VAR 0 2
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 4
50082: PUSH
50083: LD_INT 5
50085: PUSH
50086: LD_INT 8
50088: PUSH
50089: LD_INT 11
50091: PUSH
50092: LD_INT 12
50094: PUSH
50095: LD_INT 15
50097: PUSH
50098: LD_INT 16
50100: PUSH
50101: LD_INT 22
50103: PUSH
50104: LD_INT 23
50106: PUSH
50107: LD_INT 26
50109: PUSH
50110: LD_INT 36
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 101
50129: PUSH
50130: LD_INT 102
50132: PUSH
50133: LD_INT 105
50135: PUSH
50136: LD_INT 106
50138: PUSH
50139: LD_INT 108
50141: PUSH
50142: LD_INT 116
50144: PUSH
50145: LD_INT 117
50147: PUSH
50148: LD_INT 118
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: ST_TO_ADDR
50165: GO 52948
50167: LD_INT 5
50169: DOUBLE
50170: EQUAL
50171: IFTRUE 50175
50173: GO 50287
50175: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50176: LD_ADDR_VAR 0 2
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: LD_INT 5
50189: PUSH
50190: LD_INT 6
50192: PUSH
50193: LD_INT 8
50195: PUSH
50196: LD_INT 11
50198: PUSH
50199: LD_INT 12
50201: PUSH
50202: LD_INT 15
50204: PUSH
50205: LD_INT 16
50207: PUSH
50208: LD_INT 22
50210: PUSH
50211: LD_INT 23
50213: PUSH
50214: LD_INT 25
50216: PUSH
50217: LD_INT 26
50219: PUSH
50220: LD_INT 36
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 101
50241: PUSH
50242: LD_INT 102
50244: PUSH
50245: LD_INT 105
50247: PUSH
50248: LD_INT 106
50250: PUSH
50251: LD_INT 108
50253: PUSH
50254: LD_INT 109
50256: PUSH
50257: LD_INT 112
50259: PUSH
50260: LD_INT 116
50262: PUSH
50263: LD_INT 117
50265: PUSH
50266: LD_INT 118
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: ST_TO_ADDR
50285: GO 52948
50287: LD_INT 6
50289: DOUBLE
50290: EQUAL
50291: IFTRUE 50295
50293: GO 50427
50295: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50296: LD_ADDR_VAR 0 2
50300: PUSH
50301: LD_INT 2
50303: PUSH
50304: LD_INT 4
50306: PUSH
50307: LD_INT 5
50309: PUSH
50310: LD_INT 6
50312: PUSH
50313: LD_INT 8
50315: PUSH
50316: LD_INT 11
50318: PUSH
50319: LD_INT 12
50321: PUSH
50322: LD_INT 15
50324: PUSH
50325: LD_INT 16
50327: PUSH
50328: LD_INT 20
50330: PUSH
50331: LD_INT 21
50333: PUSH
50334: LD_INT 22
50336: PUSH
50337: LD_INT 23
50339: PUSH
50340: LD_INT 25
50342: PUSH
50343: LD_INT 26
50345: PUSH
50346: LD_INT 30
50348: PUSH
50349: LD_INT 31
50351: PUSH
50352: LD_INT 32
50354: PUSH
50355: LD_INT 36
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 101
50381: PUSH
50382: LD_INT 102
50384: PUSH
50385: LD_INT 105
50387: PUSH
50388: LD_INT 106
50390: PUSH
50391: LD_INT 108
50393: PUSH
50394: LD_INT 109
50396: PUSH
50397: LD_INT 112
50399: PUSH
50400: LD_INT 116
50402: PUSH
50403: LD_INT 117
50405: PUSH
50406: LD_INT 118
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: ST_TO_ADDR
50425: GO 52948
50427: LD_INT 7
50429: DOUBLE
50430: EQUAL
50431: IFTRUE 50435
50433: GO 50547
50435: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50436: LD_ADDR_VAR 0 2
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 4
50446: PUSH
50447: LD_INT 5
50449: PUSH
50450: LD_INT 7
50452: PUSH
50453: LD_INT 11
50455: PUSH
50456: LD_INT 12
50458: PUSH
50459: LD_INT 15
50461: PUSH
50462: LD_INT 16
50464: PUSH
50465: LD_INT 20
50467: PUSH
50468: LD_INT 21
50470: PUSH
50471: LD_INT 22
50473: PUSH
50474: LD_INT 23
50476: PUSH
50477: LD_INT 25
50479: PUSH
50480: LD_INT 26
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 101
50501: PUSH
50502: LD_INT 102
50504: PUSH
50505: LD_INT 103
50507: PUSH
50508: LD_INT 105
50510: PUSH
50511: LD_INT 106
50513: PUSH
50514: LD_INT 108
50516: PUSH
50517: LD_INT 112
50519: PUSH
50520: LD_INT 116
50522: PUSH
50523: LD_INT 117
50525: PUSH
50526: LD_INT 118
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: ST_TO_ADDR
50545: GO 52948
50547: LD_INT 8
50549: DOUBLE
50550: EQUAL
50551: IFTRUE 50555
50553: GO 50695
50555: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
50556: LD_ADDR_VAR 0 2
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: LD_INT 4
50566: PUSH
50567: LD_INT 5
50569: PUSH
50570: LD_INT 6
50572: PUSH
50573: LD_INT 7
50575: PUSH
50576: LD_INT 8
50578: PUSH
50579: LD_INT 11
50581: PUSH
50582: LD_INT 12
50584: PUSH
50585: LD_INT 15
50587: PUSH
50588: LD_INT 16
50590: PUSH
50591: LD_INT 20
50593: PUSH
50594: LD_INT 21
50596: PUSH
50597: LD_INT 22
50599: PUSH
50600: LD_INT 23
50602: PUSH
50603: LD_INT 25
50605: PUSH
50606: LD_INT 26
50608: PUSH
50609: LD_INT 30
50611: PUSH
50612: LD_INT 31
50614: PUSH
50615: LD_INT 32
50617: PUSH
50618: LD_INT 36
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 101
50645: PUSH
50646: LD_INT 102
50648: PUSH
50649: LD_INT 103
50651: PUSH
50652: LD_INT 105
50654: PUSH
50655: LD_INT 106
50657: PUSH
50658: LD_INT 108
50660: PUSH
50661: LD_INT 109
50663: PUSH
50664: LD_INT 112
50666: PUSH
50667: LD_INT 116
50669: PUSH
50670: LD_INT 117
50672: PUSH
50673: LD_INT 118
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: ST_TO_ADDR
50693: GO 52948
50695: LD_INT 9
50697: DOUBLE
50698: EQUAL
50699: IFTRUE 50703
50701: GO 50851
50703: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
50704: LD_ADDR_VAR 0 2
50708: PUSH
50709: LD_INT 2
50711: PUSH
50712: LD_INT 4
50714: PUSH
50715: LD_INT 5
50717: PUSH
50718: LD_INT 6
50720: PUSH
50721: LD_INT 7
50723: PUSH
50724: LD_INT 8
50726: PUSH
50727: LD_INT 11
50729: PUSH
50730: LD_INT 12
50732: PUSH
50733: LD_INT 15
50735: PUSH
50736: LD_INT 16
50738: PUSH
50739: LD_INT 20
50741: PUSH
50742: LD_INT 21
50744: PUSH
50745: LD_INT 22
50747: PUSH
50748: LD_INT 23
50750: PUSH
50751: LD_INT 25
50753: PUSH
50754: LD_INT 26
50756: PUSH
50757: LD_INT 28
50759: PUSH
50760: LD_INT 30
50762: PUSH
50763: LD_INT 31
50765: PUSH
50766: LD_INT 32
50768: PUSH
50769: LD_INT 36
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 101
50797: PUSH
50798: LD_INT 102
50800: PUSH
50801: LD_INT 103
50803: PUSH
50804: LD_INT 105
50806: PUSH
50807: LD_INT 106
50809: PUSH
50810: LD_INT 108
50812: PUSH
50813: LD_INT 109
50815: PUSH
50816: LD_INT 112
50818: PUSH
50819: LD_INT 114
50821: PUSH
50822: LD_INT 116
50824: PUSH
50825: LD_INT 117
50827: PUSH
50828: LD_INT 118
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: ST_TO_ADDR
50849: GO 52948
50851: LD_INT 10
50853: DOUBLE
50854: EQUAL
50855: IFTRUE 50859
50857: GO 51055
50859: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
50860: LD_ADDR_VAR 0 2
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 4
50870: PUSH
50871: LD_INT 5
50873: PUSH
50874: LD_INT 6
50876: PUSH
50877: LD_INT 7
50879: PUSH
50880: LD_INT 8
50882: PUSH
50883: LD_INT 9
50885: PUSH
50886: LD_INT 10
50888: PUSH
50889: LD_INT 11
50891: PUSH
50892: LD_INT 12
50894: PUSH
50895: LD_INT 13
50897: PUSH
50898: LD_INT 14
50900: PUSH
50901: LD_INT 15
50903: PUSH
50904: LD_INT 16
50906: PUSH
50907: LD_INT 17
50909: PUSH
50910: LD_INT 18
50912: PUSH
50913: LD_INT 19
50915: PUSH
50916: LD_INT 20
50918: PUSH
50919: LD_INT 21
50921: PUSH
50922: LD_INT 22
50924: PUSH
50925: LD_INT 23
50927: PUSH
50928: LD_INT 24
50930: PUSH
50931: LD_INT 25
50933: PUSH
50934: LD_INT 26
50936: PUSH
50937: LD_INT 28
50939: PUSH
50940: LD_INT 30
50942: PUSH
50943: LD_INT 31
50945: PUSH
50946: LD_INT 32
50948: PUSH
50949: LD_INT 36
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 101
50985: PUSH
50986: LD_INT 102
50988: PUSH
50989: LD_INT 103
50991: PUSH
50992: LD_INT 104
50994: PUSH
50995: LD_INT 105
50997: PUSH
50998: LD_INT 106
51000: PUSH
51001: LD_INT 107
51003: PUSH
51004: LD_INT 108
51006: PUSH
51007: LD_INT 109
51009: PUSH
51010: LD_INT 110
51012: PUSH
51013: LD_INT 111
51015: PUSH
51016: LD_INT 112
51018: PUSH
51019: LD_INT 114
51021: PUSH
51022: LD_INT 116
51024: PUSH
51025: LD_INT 117
51027: PUSH
51028: LD_INT 118
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: ST_TO_ADDR
51053: GO 52948
51055: LD_INT 11
51057: DOUBLE
51058: EQUAL
51059: IFTRUE 51063
51061: GO 51267
51063: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51064: LD_ADDR_VAR 0 2
51068: PUSH
51069: LD_INT 2
51071: PUSH
51072: LD_INT 3
51074: PUSH
51075: LD_INT 4
51077: PUSH
51078: LD_INT 5
51080: PUSH
51081: LD_INT 6
51083: PUSH
51084: LD_INT 7
51086: PUSH
51087: LD_INT 8
51089: PUSH
51090: LD_INT 9
51092: PUSH
51093: LD_INT 10
51095: PUSH
51096: LD_INT 11
51098: PUSH
51099: LD_INT 12
51101: PUSH
51102: LD_INT 13
51104: PUSH
51105: LD_INT 14
51107: PUSH
51108: LD_INT 15
51110: PUSH
51111: LD_INT 16
51113: PUSH
51114: LD_INT 17
51116: PUSH
51117: LD_INT 18
51119: PUSH
51120: LD_INT 19
51122: PUSH
51123: LD_INT 20
51125: PUSH
51126: LD_INT 21
51128: PUSH
51129: LD_INT 22
51131: PUSH
51132: LD_INT 23
51134: PUSH
51135: LD_INT 24
51137: PUSH
51138: LD_INT 25
51140: PUSH
51141: LD_INT 26
51143: PUSH
51144: LD_INT 28
51146: PUSH
51147: LD_INT 30
51149: PUSH
51150: LD_INT 31
51152: PUSH
51153: LD_INT 32
51155: PUSH
51156: LD_INT 34
51158: PUSH
51159: LD_INT 36
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 101
51197: PUSH
51198: LD_INT 102
51200: PUSH
51201: LD_INT 103
51203: PUSH
51204: LD_INT 104
51206: PUSH
51207: LD_INT 105
51209: PUSH
51210: LD_INT 106
51212: PUSH
51213: LD_INT 107
51215: PUSH
51216: LD_INT 108
51218: PUSH
51219: LD_INT 109
51221: PUSH
51222: LD_INT 110
51224: PUSH
51225: LD_INT 111
51227: PUSH
51228: LD_INT 112
51230: PUSH
51231: LD_INT 114
51233: PUSH
51234: LD_INT 116
51236: PUSH
51237: LD_INT 117
51239: PUSH
51240: LD_INT 118
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: ST_TO_ADDR
51265: GO 52948
51267: LD_INT 12
51269: DOUBLE
51270: EQUAL
51271: IFTRUE 51275
51273: GO 51495
51275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51276: LD_ADDR_VAR 0 2
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: LD_INT 3
51289: PUSH
51290: LD_INT 4
51292: PUSH
51293: LD_INT 5
51295: PUSH
51296: LD_INT 6
51298: PUSH
51299: LD_INT 7
51301: PUSH
51302: LD_INT 8
51304: PUSH
51305: LD_INT 9
51307: PUSH
51308: LD_INT 10
51310: PUSH
51311: LD_INT 11
51313: PUSH
51314: LD_INT 12
51316: PUSH
51317: LD_INT 13
51319: PUSH
51320: LD_INT 14
51322: PUSH
51323: LD_INT 15
51325: PUSH
51326: LD_INT 16
51328: PUSH
51329: LD_INT 17
51331: PUSH
51332: LD_INT 18
51334: PUSH
51335: LD_INT 19
51337: PUSH
51338: LD_INT 20
51340: PUSH
51341: LD_INT 21
51343: PUSH
51344: LD_INT 22
51346: PUSH
51347: LD_INT 23
51349: PUSH
51350: LD_INT 24
51352: PUSH
51353: LD_INT 25
51355: PUSH
51356: LD_INT 26
51358: PUSH
51359: LD_INT 27
51361: PUSH
51362: LD_INT 28
51364: PUSH
51365: LD_INT 30
51367: PUSH
51368: LD_INT 31
51370: PUSH
51371: LD_INT 32
51373: PUSH
51374: LD_INT 33
51376: PUSH
51377: LD_INT 34
51379: PUSH
51380: LD_INT 36
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 101
51421: PUSH
51422: LD_INT 102
51424: PUSH
51425: LD_INT 103
51427: PUSH
51428: LD_INT 104
51430: PUSH
51431: LD_INT 105
51433: PUSH
51434: LD_INT 106
51436: PUSH
51437: LD_INT 107
51439: PUSH
51440: LD_INT 108
51442: PUSH
51443: LD_INT 109
51445: PUSH
51446: LD_INT 110
51448: PUSH
51449: LD_INT 111
51451: PUSH
51452: LD_INT 112
51454: PUSH
51455: LD_INT 113
51457: PUSH
51458: LD_INT 114
51460: PUSH
51461: LD_INT 116
51463: PUSH
51464: LD_INT 117
51466: PUSH
51467: LD_INT 118
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: ST_TO_ADDR
51493: GO 52948
51495: LD_INT 13
51497: DOUBLE
51498: EQUAL
51499: IFTRUE 51503
51501: GO 51711
51503: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51504: LD_ADDR_VAR 0 2
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: LD_INT 4
51520: PUSH
51521: LD_INT 5
51523: PUSH
51524: LD_INT 8
51526: PUSH
51527: LD_INT 9
51529: PUSH
51530: LD_INT 10
51532: PUSH
51533: LD_INT 11
51535: PUSH
51536: LD_INT 12
51538: PUSH
51539: LD_INT 14
51541: PUSH
51542: LD_INT 15
51544: PUSH
51545: LD_INT 16
51547: PUSH
51548: LD_INT 17
51550: PUSH
51551: LD_INT 18
51553: PUSH
51554: LD_INT 19
51556: PUSH
51557: LD_INT 20
51559: PUSH
51560: LD_INT 21
51562: PUSH
51563: LD_INT 22
51565: PUSH
51566: LD_INT 23
51568: PUSH
51569: LD_INT 24
51571: PUSH
51572: LD_INT 25
51574: PUSH
51575: LD_INT 26
51577: PUSH
51578: LD_INT 27
51580: PUSH
51581: LD_INT 28
51583: PUSH
51584: LD_INT 30
51586: PUSH
51587: LD_INT 31
51589: PUSH
51590: LD_INT 32
51592: PUSH
51593: LD_INT 33
51595: PUSH
51596: LD_INT 34
51598: PUSH
51599: LD_INT 36
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 101
51637: PUSH
51638: LD_INT 102
51640: PUSH
51641: LD_INT 103
51643: PUSH
51644: LD_INT 104
51646: PUSH
51647: LD_INT 105
51649: PUSH
51650: LD_INT 106
51652: PUSH
51653: LD_INT 107
51655: PUSH
51656: LD_INT 108
51658: PUSH
51659: LD_INT 109
51661: PUSH
51662: LD_INT 110
51664: PUSH
51665: LD_INT 111
51667: PUSH
51668: LD_INT 112
51670: PUSH
51671: LD_INT 113
51673: PUSH
51674: LD_INT 114
51676: PUSH
51677: LD_INT 116
51679: PUSH
51680: LD_INT 117
51682: PUSH
51683: LD_INT 118
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: ST_TO_ADDR
51709: GO 52948
51711: LD_INT 14
51713: DOUBLE
51714: EQUAL
51715: IFTRUE 51719
51717: GO 51943
51719: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
51720: LD_ADDR_VAR 0 2
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: LD_INT 4
51736: PUSH
51737: LD_INT 5
51739: PUSH
51740: LD_INT 6
51742: PUSH
51743: LD_INT 7
51745: PUSH
51746: LD_INT 8
51748: PUSH
51749: LD_INT 9
51751: PUSH
51752: LD_INT 10
51754: PUSH
51755: LD_INT 11
51757: PUSH
51758: LD_INT 12
51760: PUSH
51761: LD_INT 13
51763: PUSH
51764: LD_INT 14
51766: PUSH
51767: LD_INT 15
51769: PUSH
51770: LD_INT 16
51772: PUSH
51773: LD_INT 17
51775: PUSH
51776: LD_INT 18
51778: PUSH
51779: LD_INT 19
51781: PUSH
51782: LD_INT 20
51784: PUSH
51785: LD_INT 21
51787: PUSH
51788: LD_INT 22
51790: PUSH
51791: LD_INT 23
51793: PUSH
51794: LD_INT 24
51796: PUSH
51797: LD_INT 25
51799: PUSH
51800: LD_INT 26
51802: PUSH
51803: LD_INT 27
51805: PUSH
51806: LD_INT 28
51808: PUSH
51809: LD_INT 29
51811: PUSH
51812: LD_INT 30
51814: PUSH
51815: LD_INT 31
51817: PUSH
51818: LD_INT 32
51820: PUSH
51821: LD_INT 33
51823: PUSH
51824: LD_INT 34
51826: PUSH
51827: LD_INT 36
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: PUSH
51867: LD_INT 101
51869: PUSH
51870: LD_INT 102
51872: PUSH
51873: LD_INT 103
51875: PUSH
51876: LD_INT 104
51878: PUSH
51879: LD_INT 105
51881: PUSH
51882: LD_INT 106
51884: PUSH
51885: LD_INT 107
51887: PUSH
51888: LD_INT 108
51890: PUSH
51891: LD_INT 109
51893: PUSH
51894: LD_INT 110
51896: PUSH
51897: LD_INT 111
51899: PUSH
51900: LD_INT 112
51902: PUSH
51903: LD_INT 113
51905: PUSH
51906: LD_INT 114
51908: PUSH
51909: LD_INT 116
51911: PUSH
51912: LD_INT 117
51914: PUSH
51915: LD_INT 118
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: ST_TO_ADDR
51941: GO 52948
51943: LD_INT 15
51945: DOUBLE
51946: EQUAL
51947: IFTRUE 51951
51949: GO 52175
51951: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
51952: LD_ADDR_VAR 0 2
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 3
51965: PUSH
51966: LD_INT 4
51968: PUSH
51969: LD_INT 5
51971: PUSH
51972: LD_INT 6
51974: PUSH
51975: LD_INT 7
51977: PUSH
51978: LD_INT 8
51980: PUSH
51981: LD_INT 9
51983: PUSH
51984: LD_INT 10
51986: PUSH
51987: LD_INT 11
51989: PUSH
51990: LD_INT 12
51992: PUSH
51993: LD_INT 13
51995: PUSH
51996: LD_INT 14
51998: PUSH
51999: LD_INT 15
52001: PUSH
52002: LD_INT 16
52004: PUSH
52005: LD_INT 17
52007: PUSH
52008: LD_INT 18
52010: PUSH
52011: LD_INT 19
52013: PUSH
52014: LD_INT 20
52016: PUSH
52017: LD_INT 21
52019: PUSH
52020: LD_INT 22
52022: PUSH
52023: LD_INT 23
52025: PUSH
52026: LD_INT 24
52028: PUSH
52029: LD_INT 25
52031: PUSH
52032: LD_INT 26
52034: PUSH
52035: LD_INT 27
52037: PUSH
52038: LD_INT 28
52040: PUSH
52041: LD_INT 29
52043: PUSH
52044: LD_INT 30
52046: PUSH
52047: LD_INT 31
52049: PUSH
52050: LD_INT 32
52052: PUSH
52053: LD_INT 33
52055: PUSH
52056: LD_INT 34
52058: PUSH
52059: LD_INT 36
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 101
52101: PUSH
52102: LD_INT 102
52104: PUSH
52105: LD_INT 103
52107: PUSH
52108: LD_INT 104
52110: PUSH
52111: LD_INT 105
52113: PUSH
52114: LD_INT 106
52116: PUSH
52117: LD_INT 107
52119: PUSH
52120: LD_INT 108
52122: PUSH
52123: LD_INT 109
52125: PUSH
52126: LD_INT 110
52128: PUSH
52129: LD_INT 111
52131: PUSH
52132: LD_INT 112
52134: PUSH
52135: LD_INT 113
52137: PUSH
52138: LD_INT 114
52140: PUSH
52141: LD_INT 116
52143: PUSH
52144: LD_INT 117
52146: PUSH
52147: LD_INT 118
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: ST_TO_ADDR
52173: GO 52948
52175: LD_INT 16
52177: DOUBLE
52178: EQUAL
52179: IFTRUE 52183
52181: GO 52319
52183: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52184: LD_ADDR_VAR 0 2
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: LD_INT 4
52194: PUSH
52195: LD_INT 5
52197: PUSH
52198: LD_INT 7
52200: PUSH
52201: LD_INT 11
52203: PUSH
52204: LD_INT 12
52206: PUSH
52207: LD_INT 15
52209: PUSH
52210: LD_INT 16
52212: PUSH
52213: LD_INT 20
52215: PUSH
52216: LD_INT 21
52218: PUSH
52219: LD_INT 22
52221: PUSH
52222: LD_INT 23
52224: PUSH
52225: LD_INT 25
52227: PUSH
52228: LD_INT 26
52230: PUSH
52231: LD_INT 30
52233: PUSH
52234: LD_INT 31
52236: PUSH
52237: LD_INT 32
52239: PUSH
52240: LD_INT 33
52242: PUSH
52243: LD_INT 34
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 101
52269: PUSH
52270: LD_INT 102
52272: PUSH
52273: LD_INT 103
52275: PUSH
52276: LD_INT 106
52278: PUSH
52279: LD_INT 108
52281: PUSH
52282: LD_INT 112
52284: PUSH
52285: LD_INT 113
52287: PUSH
52288: LD_INT 114
52290: PUSH
52291: LD_INT 116
52293: PUSH
52294: LD_INT 117
52296: PUSH
52297: LD_INT 118
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: ST_TO_ADDR
52317: GO 52948
52319: LD_INT 17
52321: DOUBLE
52322: EQUAL
52323: IFTRUE 52327
52325: GO 52551
52327: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52328: LD_ADDR_VAR 0 2
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 3
52341: PUSH
52342: LD_INT 4
52344: PUSH
52345: LD_INT 5
52347: PUSH
52348: LD_INT 6
52350: PUSH
52351: LD_INT 7
52353: PUSH
52354: LD_INT 8
52356: PUSH
52357: LD_INT 9
52359: PUSH
52360: LD_INT 10
52362: PUSH
52363: LD_INT 11
52365: PUSH
52366: LD_INT 12
52368: PUSH
52369: LD_INT 13
52371: PUSH
52372: LD_INT 14
52374: PUSH
52375: LD_INT 15
52377: PUSH
52378: LD_INT 16
52380: PUSH
52381: LD_INT 17
52383: PUSH
52384: LD_INT 18
52386: PUSH
52387: LD_INT 19
52389: PUSH
52390: LD_INT 20
52392: PUSH
52393: LD_INT 21
52395: PUSH
52396: LD_INT 22
52398: PUSH
52399: LD_INT 23
52401: PUSH
52402: LD_INT 24
52404: PUSH
52405: LD_INT 25
52407: PUSH
52408: LD_INT 26
52410: PUSH
52411: LD_INT 27
52413: PUSH
52414: LD_INT 28
52416: PUSH
52417: LD_INT 29
52419: PUSH
52420: LD_INT 30
52422: PUSH
52423: LD_INT 31
52425: PUSH
52426: LD_INT 32
52428: PUSH
52429: LD_INT 33
52431: PUSH
52432: LD_INT 34
52434: PUSH
52435: LD_INT 36
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 101
52477: PUSH
52478: LD_INT 102
52480: PUSH
52481: LD_INT 103
52483: PUSH
52484: LD_INT 104
52486: PUSH
52487: LD_INT 105
52489: PUSH
52490: LD_INT 106
52492: PUSH
52493: LD_INT 107
52495: PUSH
52496: LD_INT 108
52498: PUSH
52499: LD_INT 109
52501: PUSH
52502: LD_INT 110
52504: PUSH
52505: LD_INT 111
52507: PUSH
52508: LD_INT 112
52510: PUSH
52511: LD_INT 113
52513: PUSH
52514: LD_INT 114
52516: PUSH
52517: LD_INT 116
52519: PUSH
52520: LD_INT 117
52522: PUSH
52523: LD_INT 118
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: ST_TO_ADDR
52549: GO 52948
52551: LD_INT 18
52553: DOUBLE
52554: EQUAL
52555: IFTRUE 52559
52557: GO 52707
52559: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
52560: LD_ADDR_VAR 0 2
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 4
52570: PUSH
52571: LD_INT 5
52573: PUSH
52574: LD_INT 7
52576: PUSH
52577: LD_INT 11
52579: PUSH
52580: LD_INT 12
52582: PUSH
52583: LD_INT 15
52585: PUSH
52586: LD_INT 16
52588: PUSH
52589: LD_INT 20
52591: PUSH
52592: LD_INT 21
52594: PUSH
52595: LD_INT 22
52597: PUSH
52598: LD_INT 23
52600: PUSH
52601: LD_INT 25
52603: PUSH
52604: LD_INT 26
52606: PUSH
52607: LD_INT 30
52609: PUSH
52610: LD_INT 31
52612: PUSH
52613: LD_INT 32
52615: PUSH
52616: LD_INT 33
52618: PUSH
52619: LD_INT 34
52621: PUSH
52622: LD_INT 35
52624: PUSH
52625: LD_INT 36
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 101
52653: PUSH
52654: LD_INT 102
52656: PUSH
52657: LD_INT 103
52659: PUSH
52660: LD_INT 106
52662: PUSH
52663: LD_INT 108
52665: PUSH
52666: LD_INT 112
52668: PUSH
52669: LD_INT 113
52671: PUSH
52672: LD_INT 114
52674: PUSH
52675: LD_INT 115
52677: PUSH
52678: LD_INT 116
52680: PUSH
52681: LD_INT 117
52683: PUSH
52684: LD_INT 118
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: ST_TO_ADDR
52705: GO 52948
52707: LD_INT 19
52709: DOUBLE
52710: EQUAL
52711: IFTRUE 52715
52713: GO 52947
52715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
52716: LD_ADDR_VAR 0 2
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: LD_INT 2
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: LD_INT 4
52732: PUSH
52733: LD_INT 5
52735: PUSH
52736: LD_INT 6
52738: PUSH
52739: LD_INT 7
52741: PUSH
52742: LD_INT 8
52744: PUSH
52745: LD_INT 9
52747: PUSH
52748: LD_INT 10
52750: PUSH
52751: LD_INT 11
52753: PUSH
52754: LD_INT 12
52756: PUSH
52757: LD_INT 13
52759: PUSH
52760: LD_INT 14
52762: PUSH
52763: LD_INT 15
52765: PUSH
52766: LD_INT 16
52768: PUSH
52769: LD_INT 17
52771: PUSH
52772: LD_INT 18
52774: PUSH
52775: LD_INT 19
52777: PUSH
52778: LD_INT 20
52780: PUSH
52781: LD_INT 21
52783: PUSH
52784: LD_INT 22
52786: PUSH
52787: LD_INT 23
52789: PUSH
52790: LD_INT 24
52792: PUSH
52793: LD_INT 25
52795: PUSH
52796: LD_INT 26
52798: PUSH
52799: LD_INT 27
52801: PUSH
52802: LD_INT 28
52804: PUSH
52805: LD_INT 29
52807: PUSH
52808: LD_INT 30
52810: PUSH
52811: LD_INT 31
52813: PUSH
52814: LD_INT 32
52816: PUSH
52817: LD_INT 33
52819: PUSH
52820: LD_INT 34
52822: PUSH
52823: LD_INT 35
52825: PUSH
52826: LD_INT 36
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 101
52869: PUSH
52870: LD_INT 102
52872: PUSH
52873: LD_INT 103
52875: PUSH
52876: LD_INT 104
52878: PUSH
52879: LD_INT 105
52881: PUSH
52882: LD_INT 106
52884: PUSH
52885: LD_INT 107
52887: PUSH
52888: LD_INT 108
52890: PUSH
52891: LD_INT 109
52893: PUSH
52894: LD_INT 110
52896: PUSH
52897: LD_INT 111
52899: PUSH
52900: LD_INT 112
52902: PUSH
52903: LD_INT 113
52905: PUSH
52906: LD_INT 114
52908: PUSH
52909: LD_INT 115
52911: PUSH
52912: LD_INT 116
52914: PUSH
52915: LD_INT 117
52917: PUSH
52918: LD_INT 118
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: ST_TO_ADDR
52945: GO 52948
52947: POP
// end else
52948: GO 53179
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
52950: LD_ADDR_VAR 0 2
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 2
52960: PUSH
52961: LD_INT 3
52963: PUSH
52964: LD_INT 4
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: LD_INT 6
52972: PUSH
52973: LD_INT 7
52975: PUSH
52976: LD_INT 8
52978: PUSH
52979: LD_INT 9
52981: PUSH
52982: LD_INT 10
52984: PUSH
52985: LD_INT 11
52987: PUSH
52988: LD_INT 12
52990: PUSH
52991: LD_INT 13
52993: PUSH
52994: LD_INT 14
52996: PUSH
52997: LD_INT 15
52999: PUSH
53000: LD_INT 16
53002: PUSH
53003: LD_INT 17
53005: PUSH
53006: LD_INT 18
53008: PUSH
53009: LD_INT 19
53011: PUSH
53012: LD_INT 20
53014: PUSH
53015: LD_INT 21
53017: PUSH
53018: LD_INT 22
53020: PUSH
53021: LD_INT 23
53023: PUSH
53024: LD_INT 24
53026: PUSH
53027: LD_INT 25
53029: PUSH
53030: LD_INT 26
53032: PUSH
53033: LD_INT 27
53035: PUSH
53036: LD_INT 28
53038: PUSH
53039: LD_INT 29
53041: PUSH
53042: LD_INT 30
53044: PUSH
53045: LD_INT 31
53047: PUSH
53048: LD_INT 32
53050: PUSH
53051: LD_INT 33
53053: PUSH
53054: LD_INT 34
53056: PUSH
53057: LD_INT 35
53059: PUSH
53060: LD_INT 36
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: PUSH
53101: LD_INT 101
53103: PUSH
53104: LD_INT 102
53106: PUSH
53107: LD_INT 103
53109: PUSH
53110: LD_INT 104
53112: PUSH
53113: LD_INT 105
53115: PUSH
53116: LD_INT 106
53118: PUSH
53119: LD_INT 107
53121: PUSH
53122: LD_INT 108
53124: PUSH
53125: LD_INT 109
53127: PUSH
53128: LD_INT 110
53130: PUSH
53131: LD_INT 111
53133: PUSH
53134: LD_INT 112
53136: PUSH
53137: LD_INT 113
53139: PUSH
53140: LD_INT 114
53142: PUSH
53143: LD_INT 115
53145: PUSH
53146: LD_INT 116
53148: PUSH
53149: LD_INT 117
53151: PUSH
53152: LD_INT 118
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// if result then
53179: LD_VAR 0 2
53183: IFFALSE 53969
// begin normal :=  ;
53185: LD_ADDR_VAR 0 5
53189: PUSH
53190: LD_STRING 
53192: ST_TO_ADDR
// hardcore :=  ;
53193: LD_ADDR_VAR 0 6
53197: PUSH
53198: LD_STRING 
53200: ST_TO_ADDR
// active :=  ;
53201: LD_ADDR_VAR 0 7
53205: PUSH
53206: LD_STRING 
53208: ST_TO_ADDR
// for i = 1 to normalCounter do
53209: LD_ADDR_VAR 0 8
53213: PUSH
53214: DOUBLE
53215: LD_INT 1
53217: DEC
53218: ST_TO_ADDR
53219: LD_EXP 31
53223: PUSH
53224: FOR_TO
53225: IFFALSE 53326
// begin tmp := 0 ;
53227: LD_ADDR_VAR 0 3
53231: PUSH
53232: LD_STRING 0
53234: ST_TO_ADDR
// if result [ 1 ] then
53235: LD_VAR 0 2
53239: PUSH
53240: LD_INT 1
53242: ARRAY
53243: IFFALSE 53308
// if result [ 1 ] [ 1 ] = i then
53245: LD_VAR 0 2
53249: PUSH
53250: LD_INT 1
53252: ARRAY
53253: PUSH
53254: LD_INT 1
53256: ARRAY
53257: PUSH
53258: LD_VAR 0 8
53262: EQUAL
53263: IFFALSE 53308
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53265: LD_ADDR_VAR 0 2
53269: PUSH
53270: LD_VAR 0 2
53274: PPUSH
53275: LD_INT 1
53277: PPUSH
53278: LD_VAR 0 2
53282: PUSH
53283: LD_INT 1
53285: ARRAY
53286: PPUSH
53287: LD_INT 1
53289: PPUSH
53290: CALL_OW 3
53294: PPUSH
53295: CALL_OW 1
53299: ST_TO_ADDR
// tmp := 1 ;
53300: LD_ADDR_VAR 0 3
53304: PUSH
53305: LD_STRING 1
53307: ST_TO_ADDR
// end ; normal := normal & tmp ;
53308: LD_ADDR_VAR 0 5
53312: PUSH
53313: LD_VAR 0 5
53317: PUSH
53318: LD_VAR 0 3
53322: STR
53323: ST_TO_ADDR
// end ;
53324: GO 53224
53326: POP
53327: POP
// for i = 1 to hardcoreCounter do
53328: LD_ADDR_VAR 0 8
53332: PUSH
53333: DOUBLE
53334: LD_INT 1
53336: DEC
53337: ST_TO_ADDR
53338: LD_EXP 32
53342: PUSH
53343: FOR_TO
53344: IFFALSE 53449
// begin tmp := 0 ;
53346: LD_ADDR_VAR 0 3
53350: PUSH
53351: LD_STRING 0
53353: ST_TO_ADDR
// if result [ 2 ] then
53354: LD_VAR 0 2
53358: PUSH
53359: LD_INT 2
53361: ARRAY
53362: IFFALSE 53431
// if result [ 2 ] [ 1 ] = 100 + i then
53364: LD_VAR 0 2
53368: PUSH
53369: LD_INT 2
53371: ARRAY
53372: PUSH
53373: LD_INT 1
53375: ARRAY
53376: PUSH
53377: LD_INT 100
53379: PUSH
53380: LD_VAR 0 8
53384: PLUS
53385: EQUAL
53386: IFFALSE 53431
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53388: LD_ADDR_VAR 0 2
53392: PUSH
53393: LD_VAR 0 2
53397: PPUSH
53398: LD_INT 2
53400: PPUSH
53401: LD_VAR 0 2
53405: PUSH
53406: LD_INT 2
53408: ARRAY
53409: PPUSH
53410: LD_INT 1
53412: PPUSH
53413: CALL_OW 3
53417: PPUSH
53418: CALL_OW 1
53422: ST_TO_ADDR
// tmp := 1 ;
53423: LD_ADDR_VAR 0 3
53427: PUSH
53428: LD_STRING 1
53430: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53431: LD_ADDR_VAR 0 6
53435: PUSH
53436: LD_VAR 0 6
53440: PUSH
53441: LD_VAR 0 3
53445: STR
53446: ST_TO_ADDR
// end ;
53447: GO 53343
53449: POP
53450: POP
// if isGameLoad then
53451: LD_VAR 0 1
53455: IFFALSE 53930
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53457: LD_ADDR_VAR 0 4
53461: PUSH
53462: LD_EXP 35
53466: PUSH
53467: LD_EXP 34
53471: PUSH
53472: LD_EXP 36
53476: PUSH
53477: LD_EXP 33
53481: PUSH
53482: LD_EXP 37
53486: PUSH
53487: LD_EXP 38
53491: PUSH
53492: LD_EXP 39
53496: PUSH
53497: LD_EXP 40
53501: PUSH
53502: LD_EXP 41
53506: PUSH
53507: LD_EXP 42
53511: PUSH
53512: LD_EXP 43
53516: PUSH
53517: LD_EXP 44
53521: PUSH
53522: LD_EXP 45
53526: PUSH
53527: LD_EXP 46
53531: PUSH
53532: LD_EXP 54
53536: PUSH
53537: LD_EXP 55
53541: PUSH
53542: LD_EXP 56
53546: PUSH
53547: LD_EXP 57
53551: PUSH
53552: LD_EXP 59
53556: PUSH
53557: LD_EXP 60
53561: PUSH
53562: LD_EXP 61
53566: PUSH
53567: LD_EXP 64
53571: PUSH
53572: LD_EXP 66
53576: PUSH
53577: LD_EXP 67
53581: PUSH
53582: LD_EXP 68
53586: PUSH
53587: LD_EXP 70
53591: PUSH
53592: LD_EXP 71
53596: PUSH
53597: LD_EXP 74
53601: PUSH
53602: LD_EXP 75
53606: PUSH
53607: LD_EXP 76
53611: PUSH
53612: LD_EXP 77
53616: PUSH
53617: LD_EXP 78
53621: PUSH
53622: LD_EXP 79
53626: PUSH
53627: LD_EXP 80
53631: PUSH
53632: LD_EXP 81
53636: PUSH
53637: LD_EXP 82
53641: PUSH
53642: LD_EXP 47
53646: PUSH
53647: LD_EXP 48
53651: PUSH
53652: LD_EXP 51
53656: PUSH
53657: LD_EXP 52
53661: PUSH
53662: LD_EXP 53
53666: PUSH
53667: LD_EXP 49
53671: PUSH
53672: LD_EXP 50
53676: PUSH
53677: LD_EXP 58
53681: PUSH
53682: LD_EXP 62
53686: PUSH
53687: LD_EXP 63
53691: PUSH
53692: LD_EXP 65
53696: PUSH
53697: LD_EXP 69
53701: PUSH
53702: LD_EXP 72
53706: PUSH
53707: LD_EXP 73
53711: PUSH
53712: LD_EXP 83
53716: PUSH
53717: LD_EXP 84
53721: PUSH
53722: LD_EXP 85
53726: PUSH
53727: LD_EXP 86
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: ST_TO_ADDR
// tmp :=  ;
53788: LD_ADDR_VAR 0 3
53792: PUSH
53793: LD_STRING 
53795: ST_TO_ADDR
// for i = 1 to normalCounter do
53796: LD_ADDR_VAR 0 8
53800: PUSH
53801: DOUBLE
53802: LD_INT 1
53804: DEC
53805: ST_TO_ADDR
53806: LD_EXP 31
53810: PUSH
53811: FOR_TO
53812: IFFALSE 53848
// begin if flags [ i ] then
53814: LD_VAR 0 4
53818: PUSH
53819: LD_VAR 0 8
53823: ARRAY
53824: IFFALSE 53846
// tmp := tmp & i & ; ;
53826: LD_ADDR_VAR 0 3
53830: PUSH
53831: LD_VAR 0 3
53835: PUSH
53836: LD_VAR 0 8
53840: STR
53841: PUSH
53842: LD_STRING ;
53844: STR
53845: ST_TO_ADDR
// end ;
53846: GO 53811
53848: POP
53849: POP
// for i = 1 to hardcoreCounter do
53850: LD_ADDR_VAR 0 8
53854: PUSH
53855: DOUBLE
53856: LD_INT 1
53858: DEC
53859: ST_TO_ADDR
53860: LD_EXP 32
53864: PUSH
53865: FOR_TO
53866: IFFALSE 53912
// begin if flags [ normalCounter + i ] then
53868: LD_VAR 0 4
53872: PUSH
53873: LD_EXP 31
53877: PUSH
53878: LD_VAR 0 8
53882: PLUS
53883: ARRAY
53884: IFFALSE 53910
// tmp := tmp & ( 100 + i ) & ; ;
53886: LD_ADDR_VAR 0 3
53890: PUSH
53891: LD_VAR 0 3
53895: PUSH
53896: LD_INT 100
53898: PUSH
53899: LD_VAR 0 8
53903: PLUS
53904: STR
53905: PUSH
53906: LD_STRING ;
53908: STR
53909: ST_TO_ADDR
// end ;
53910: GO 53865
53912: POP
53913: POP
// if tmp then
53914: LD_VAR 0 3
53918: IFFALSE 53930
// active := tmp ;
53920: LD_ADDR_VAR 0 7
53924: PUSH
53925: LD_VAR 0 3
53929: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
53930: LD_STRING getStreamItemsFromMission("
53932: PUSH
53933: LD_VAR 0 5
53937: STR
53938: PUSH
53939: LD_STRING ","
53941: STR
53942: PUSH
53943: LD_VAR 0 6
53947: STR
53948: PUSH
53949: LD_STRING ","
53951: STR
53952: PUSH
53953: LD_VAR 0 7
53957: STR
53958: PUSH
53959: LD_STRING ")
53961: STR
53962: PPUSH
53963: CALL_OW 559
// end else
53967: GO 53976
// ToLua ( getStreamItemsFromMission("","","") ) ;
53969: LD_STRING getStreamItemsFromMission("","","")
53971: PPUSH
53972: CALL_OW 559
// end ;
53976: LD_VAR 0 2
53980: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
53981: LD_EXP 30
53985: PUSH
53986: LD_EXP 35
53990: AND
53991: IFFALSE 54115
53993: GO 53995
53995: DISABLE
53996: LD_INT 0
53998: PPUSH
53999: PPUSH
// begin enable ;
54000: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54001: LD_ADDR_VAR 0 2
54005: PUSH
54006: LD_INT 22
54008: PUSH
54009: LD_OWVAR 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 2
54020: PUSH
54021: LD_INT 34
54023: PUSH
54024: LD_INT 7
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 34
54033: PUSH
54034: LD_INT 45
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 34
54043: PUSH
54044: LD_INT 28
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 34
54053: PUSH
54054: LD_INT 47
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PPUSH
54072: CALL_OW 69
54076: ST_TO_ADDR
// if not tmp then
54077: LD_VAR 0 2
54081: NOT
54082: IFFALSE 54086
// exit ;
54084: GO 54115
// for i in tmp do
54086: LD_ADDR_VAR 0 1
54090: PUSH
54091: LD_VAR 0 2
54095: PUSH
54096: FOR_IN
54097: IFFALSE 54113
// begin SetLives ( i , 0 ) ;
54099: LD_VAR 0 1
54103: PPUSH
54104: LD_INT 0
54106: PPUSH
54107: CALL_OW 234
// end ;
54111: GO 54096
54113: POP
54114: POP
// end ;
54115: PPOPN 2
54117: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54118: LD_EXP 30
54122: PUSH
54123: LD_EXP 36
54127: AND
54128: IFFALSE 54212
54130: GO 54132
54132: DISABLE
54133: LD_INT 0
54135: PPUSH
54136: PPUSH
// begin enable ;
54137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54138: LD_ADDR_VAR 0 2
54142: PUSH
54143: LD_INT 22
54145: PUSH
54146: LD_OWVAR 2
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 32
54157: PUSH
54158: LD_INT 3
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PPUSH
54169: CALL_OW 69
54173: ST_TO_ADDR
// if not tmp then
54174: LD_VAR 0 2
54178: NOT
54179: IFFALSE 54183
// exit ;
54181: GO 54212
// for i in tmp do
54183: LD_ADDR_VAR 0 1
54187: PUSH
54188: LD_VAR 0 2
54192: PUSH
54193: FOR_IN
54194: IFFALSE 54210
// begin SetLives ( i , 0 ) ;
54196: LD_VAR 0 1
54200: PPUSH
54201: LD_INT 0
54203: PPUSH
54204: CALL_OW 234
// end ;
54208: GO 54193
54210: POP
54211: POP
// end ;
54212: PPOPN 2
54214: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54215: LD_EXP 30
54219: PUSH
54220: LD_EXP 33
54224: AND
54225: IFFALSE 54318
54227: GO 54229
54229: DISABLE
54230: LD_INT 0
54232: PPUSH
// begin enable ;
54233: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54234: LD_ADDR_VAR 0 1
54238: PUSH
54239: LD_INT 22
54241: PUSH
54242: LD_OWVAR 2
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: LD_INT 25
54256: PUSH
54257: LD_INT 5
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 25
54266: PUSH
54267: LD_INT 9
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 25
54276: PUSH
54277: LD_INT 8
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PPUSH
54294: CALL_OW 69
54298: PUSH
54299: FOR_IN
54300: IFFALSE 54316
// begin SetClass ( i , 1 ) ;
54302: LD_VAR 0 1
54306: PPUSH
54307: LD_INT 1
54309: PPUSH
54310: CALL_OW 336
// end ;
54314: GO 54299
54316: POP
54317: POP
// end ;
54318: PPOPN 1
54320: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54321: LD_EXP 30
54325: PUSH
54326: LD_EXP 34
54330: AND
54331: PUSH
54332: LD_OWVAR 65
54336: PUSH
54337: LD_INT 7
54339: LESS
54340: AND
54341: IFFALSE 54355
54343: GO 54345
54345: DISABLE
// begin enable ;
54346: ENABLE
// game_speed := 7 ;
54347: LD_ADDR_OWVAR 65
54351: PUSH
54352: LD_INT 7
54354: ST_TO_ADDR
// end ;
54355: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54356: LD_EXP 30
54360: PUSH
54361: LD_EXP 37
54365: AND
54366: IFFALSE 54568
54368: GO 54370
54370: DISABLE
54371: LD_INT 0
54373: PPUSH
54374: PPUSH
54375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54376: LD_ADDR_VAR 0 3
54380: PUSH
54381: LD_INT 81
54383: PUSH
54384: LD_OWVAR 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 21
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PPUSH
54407: CALL_OW 69
54411: ST_TO_ADDR
// if not tmp then
54412: LD_VAR 0 3
54416: NOT
54417: IFFALSE 54421
// exit ;
54419: GO 54568
// if tmp > 5 then
54421: LD_VAR 0 3
54425: PUSH
54426: LD_INT 5
54428: GREATER
54429: IFFALSE 54441
// k := 5 else
54431: LD_ADDR_VAR 0 2
54435: PUSH
54436: LD_INT 5
54438: ST_TO_ADDR
54439: GO 54451
// k := tmp ;
54441: LD_ADDR_VAR 0 2
54445: PUSH
54446: LD_VAR 0 3
54450: ST_TO_ADDR
// for i := 1 to k do
54451: LD_ADDR_VAR 0 1
54455: PUSH
54456: DOUBLE
54457: LD_INT 1
54459: DEC
54460: ST_TO_ADDR
54461: LD_VAR 0 2
54465: PUSH
54466: FOR_TO
54467: IFFALSE 54566
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54469: LD_VAR 0 3
54473: PUSH
54474: LD_VAR 0 1
54478: ARRAY
54479: PPUSH
54480: LD_VAR 0 1
54484: PUSH
54485: LD_INT 4
54487: MOD
54488: PUSH
54489: LD_INT 1
54491: PLUS
54492: PPUSH
54493: CALL_OW 259
54497: PUSH
54498: LD_INT 10
54500: LESS
54501: IFFALSE 54564
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54503: LD_VAR 0 3
54507: PUSH
54508: LD_VAR 0 1
54512: ARRAY
54513: PPUSH
54514: LD_VAR 0 1
54518: PUSH
54519: LD_INT 4
54521: MOD
54522: PUSH
54523: LD_INT 1
54525: PLUS
54526: PPUSH
54527: LD_VAR 0 3
54531: PUSH
54532: LD_VAR 0 1
54536: ARRAY
54537: PPUSH
54538: LD_VAR 0 1
54542: PUSH
54543: LD_INT 4
54545: MOD
54546: PUSH
54547: LD_INT 1
54549: PLUS
54550: PPUSH
54551: CALL_OW 259
54555: PUSH
54556: LD_INT 1
54558: PLUS
54559: PPUSH
54560: CALL_OW 237
54564: GO 54466
54566: POP
54567: POP
// end ;
54568: PPOPN 3
54570: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
54571: LD_EXP 30
54575: PUSH
54576: LD_EXP 38
54580: AND
54581: IFFALSE 54601
54583: GO 54585
54585: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
54586: LD_INT 4
54588: PPUSH
54589: LD_OWVAR 2
54593: PPUSH
54594: LD_INT 0
54596: PPUSH
54597: CALL_OW 324
54601: END
// every 0 0$1 trigger StreamModeActive and sShovel do
54602: LD_EXP 30
54606: PUSH
54607: LD_EXP 67
54611: AND
54612: IFFALSE 54632
54614: GO 54616
54616: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
54617: LD_INT 19
54619: PPUSH
54620: LD_OWVAR 2
54624: PPUSH
54625: LD_INT 0
54627: PPUSH
54628: CALL_OW 324
54632: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
54633: LD_EXP 30
54637: PUSH
54638: LD_EXP 39
54642: AND
54643: IFFALSE 54745
54645: GO 54647
54647: DISABLE
54648: LD_INT 0
54650: PPUSH
54651: PPUSH
// begin enable ;
54652: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
54653: LD_ADDR_VAR 0 2
54657: PUSH
54658: LD_INT 22
54660: PUSH
54661: LD_OWVAR 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 34
54675: PUSH
54676: LD_INT 11
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 34
54685: PUSH
54686: LD_INT 30
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: LIST
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PPUSH
54702: CALL_OW 69
54706: ST_TO_ADDR
// if not tmp then
54707: LD_VAR 0 2
54711: NOT
54712: IFFALSE 54716
// exit ;
54714: GO 54745
// for i in tmp do
54716: LD_ADDR_VAR 0 1
54720: PUSH
54721: LD_VAR 0 2
54725: PUSH
54726: FOR_IN
54727: IFFALSE 54743
// begin SetLives ( i , 0 ) ;
54729: LD_VAR 0 1
54733: PPUSH
54734: LD_INT 0
54736: PPUSH
54737: CALL_OW 234
// end ;
54741: GO 54726
54743: POP
54744: POP
// end ;
54745: PPOPN 2
54747: END
// every 0 0$1 trigger StreamModeActive and sBunker do
54748: LD_EXP 30
54752: PUSH
54753: LD_EXP 40
54757: AND
54758: IFFALSE 54778
54760: GO 54762
54762: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
54763: LD_INT 32
54765: PPUSH
54766: LD_OWVAR 2
54770: PPUSH
54771: LD_INT 0
54773: PPUSH
54774: CALL_OW 324
54778: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
54779: LD_EXP 30
54783: PUSH
54784: LD_EXP 41
54788: AND
54789: IFFALSE 54970
54791: GO 54793
54793: DISABLE
54794: LD_INT 0
54796: PPUSH
54797: PPUSH
54798: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
54799: LD_ADDR_VAR 0 2
54803: PUSH
54804: LD_INT 22
54806: PUSH
54807: LD_OWVAR 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 33
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PPUSH
54830: CALL_OW 69
54834: ST_TO_ADDR
// if not tmp then
54835: LD_VAR 0 2
54839: NOT
54840: IFFALSE 54844
// exit ;
54842: GO 54970
// side := 0 ;
54844: LD_ADDR_VAR 0 3
54848: PUSH
54849: LD_INT 0
54851: ST_TO_ADDR
// for i := 1 to 8 do
54852: LD_ADDR_VAR 0 1
54856: PUSH
54857: DOUBLE
54858: LD_INT 1
54860: DEC
54861: ST_TO_ADDR
54862: LD_INT 8
54864: PUSH
54865: FOR_TO
54866: IFFALSE 54914
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
54868: LD_OWVAR 2
54872: PUSH
54873: LD_VAR 0 1
54877: NONEQUAL
54878: PUSH
54879: LD_OWVAR 2
54883: PPUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 81
54893: PUSH
54894: LD_INT 2
54896: EQUAL
54897: AND
54898: IFFALSE 54912
// begin side := i ;
54900: LD_ADDR_VAR 0 3
54904: PUSH
54905: LD_VAR 0 1
54909: ST_TO_ADDR
// break ;
54910: GO 54914
// end ;
54912: GO 54865
54914: POP
54915: POP
// if not side then
54916: LD_VAR 0 3
54920: NOT
54921: IFFALSE 54925
// exit ;
54923: GO 54970
// for i := 1 to tmp do
54925: LD_ADDR_VAR 0 1
54929: PUSH
54930: DOUBLE
54931: LD_INT 1
54933: DEC
54934: ST_TO_ADDR
54935: LD_VAR 0 2
54939: PUSH
54940: FOR_TO
54941: IFFALSE 54968
// if Prob ( 60 ) then
54943: LD_INT 60
54945: PPUSH
54946: CALL_OW 13
54950: IFFALSE 54966
// SetSide ( i , side ) ;
54952: LD_VAR 0 1
54956: PPUSH
54957: LD_VAR 0 3
54961: PPUSH
54962: CALL_OW 235
54966: GO 54940
54968: POP
54969: POP
// end ;
54970: PPOPN 3
54972: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
54973: LD_EXP 30
54977: PUSH
54978: LD_EXP 43
54982: AND
54983: IFFALSE 55102
54985: GO 54987
54987: DISABLE
54988: LD_INT 0
54990: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
54991: LD_ADDR_VAR 0 1
54995: PUSH
54996: LD_INT 22
54998: PUSH
54999: LD_OWVAR 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 21
55010: PUSH
55011: LD_INT 1
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 3
55020: PUSH
55021: LD_INT 23
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: PPUSH
55040: CALL_OW 69
55044: PUSH
55045: FOR_IN
55046: IFFALSE 55100
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55048: LD_VAR 0 1
55052: PPUSH
55053: CALL_OW 257
55057: PUSH
55058: LD_INT 1
55060: PUSH
55061: LD_INT 2
55063: PUSH
55064: LD_INT 3
55066: PUSH
55067: LD_INT 4
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: IN
55076: IFFALSE 55098
// SetClass ( un , rand ( 1 , 4 ) ) ;
55078: LD_VAR 0 1
55082: PPUSH
55083: LD_INT 1
55085: PPUSH
55086: LD_INT 4
55088: PPUSH
55089: CALL_OW 12
55093: PPUSH
55094: CALL_OW 336
55098: GO 55045
55100: POP
55101: POP
// end ;
55102: PPOPN 1
55104: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55105: LD_EXP 30
55109: PUSH
55110: LD_EXP 42
55114: AND
55115: IFFALSE 55194
55117: GO 55119
55119: DISABLE
55120: LD_INT 0
55122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55123: LD_ADDR_VAR 0 1
55127: PUSH
55128: LD_INT 22
55130: PUSH
55131: LD_OWVAR 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 21
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PPUSH
55154: CALL_OW 69
55158: ST_TO_ADDR
// if not tmp then
55159: LD_VAR 0 1
55163: NOT
55164: IFFALSE 55168
// exit ;
55166: GO 55194
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55168: LD_VAR 0 1
55172: PUSH
55173: LD_INT 1
55175: PPUSH
55176: LD_VAR 0 1
55180: PPUSH
55181: CALL_OW 12
55185: ARRAY
55186: PPUSH
55187: LD_INT 100
55189: PPUSH
55190: CALL_OW 234
// end ;
55194: PPOPN 1
55196: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55197: LD_EXP 30
55201: PUSH
55202: LD_EXP 44
55206: AND
55207: IFFALSE 55305
55209: GO 55211
55211: DISABLE
55212: LD_INT 0
55214: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55215: LD_ADDR_VAR 0 1
55219: PUSH
55220: LD_INT 22
55222: PUSH
55223: LD_OWVAR 2
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 21
55234: PUSH
55235: LD_INT 1
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PPUSH
55246: CALL_OW 69
55250: ST_TO_ADDR
// if not tmp then
55251: LD_VAR 0 1
55255: NOT
55256: IFFALSE 55260
// exit ;
55258: GO 55305
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55260: LD_VAR 0 1
55264: PUSH
55265: LD_INT 1
55267: PPUSH
55268: LD_VAR 0 1
55272: PPUSH
55273: CALL_OW 12
55277: ARRAY
55278: PPUSH
55279: LD_INT 1
55281: PPUSH
55282: LD_INT 4
55284: PPUSH
55285: CALL_OW 12
55289: PPUSH
55290: LD_INT 3000
55292: PPUSH
55293: LD_INT 9000
55295: PPUSH
55296: CALL_OW 12
55300: PPUSH
55301: CALL_OW 492
// end ;
55305: PPOPN 1
55307: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55308: LD_EXP 30
55312: PUSH
55313: LD_EXP 45
55317: AND
55318: IFFALSE 55338
55320: GO 55322
55322: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55323: LD_INT 1
55325: PPUSH
55326: LD_OWVAR 2
55330: PPUSH
55331: LD_INT 0
55333: PPUSH
55334: CALL_OW 324
55338: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55339: LD_EXP 30
55343: PUSH
55344: LD_EXP 46
55348: AND
55349: IFFALSE 55432
55351: GO 55353
55353: DISABLE
55354: LD_INT 0
55356: PPUSH
55357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55358: LD_ADDR_VAR 0 2
55362: PUSH
55363: LD_INT 22
55365: PUSH
55366: LD_OWVAR 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 21
55377: PUSH
55378: LD_INT 3
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PPUSH
55389: CALL_OW 69
55393: ST_TO_ADDR
// if not tmp then
55394: LD_VAR 0 2
55398: NOT
55399: IFFALSE 55403
// exit ;
55401: GO 55432
// for i in tmp do
55403: LD_ADDR_VAR 0 1
55407: PUSH
55408: LD_VAR 0 2
55412: PUSH
55413: FOR_IN
55414: IFFALSE 55430
// SetBLevel ( i , 10 ) ;
55416: LD_VAR 0 1
55420: PPUSH
55421: LD_INT 10
55423: PPUSH
55424: CALL_OW 241
55428: GO 55413
55430: POP
55431: POP
// end ;
55432: PPOPN 2
55434: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55435: LD_EXP 30
55439: PUSH
55440: LD_EXP 47
55444: AND
55445: IFFALSE 55556
55447: GO 55449
55449: DISABLE
55450: LD_INT 0
55452: PPUSH
55453: PPUSH
55454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55455: LD_ADDR_VAR 0 3
55459: PUSH
55460: LD_INT 22
55462: PUSH
55463: LD_OWVAR 2
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 25
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PPUSH
55486: CALL_OW 69
55490: ST_TO_ADDR
// if not tmp then
55491: LD_VAR 0 3
55495: NOT
55496: IFFALSE 55500
// exit ;
55498: GO 55556
// un := tmp [ rand ( 1 , tmp ) ] ;
55500: LD_ADDR_VAR 0 2
55504: PUSH
55505: LD_VAR 0 3
55509: PUSH
55510: LD_INT 1
55512: PPUSH
55513: LD_VAR 0 3
55517: PPUSH
55518: CALL_OW 12
55522: ARRAY
55523: ST_TO_ADDR
// if Crawls ( un ) then
55524: LD_VAR 0 2
55528: PPUSH
55529: CALL_OW 318
55533: IFFALSE 55544
// ComWalk ( un ) ;
55535: LD_VAR 0 2
55539: PPUSH
55540: CALL_OW 138
// SetClass ( un , class_sniper ) ;
55544: LD_VAR 0 2
55548: PPUSH
55549: LD_INT 5
55551: PPUSH
55552: CALL_OW 336
// end ;
55556: PPOPN 3
55558: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
55559: LD_EXP 30
55563: PUSH
55564: LD_EXP 48
55568: AND
55569: PUSH
55570: LD_OWVAR 67
55574: PUSH
55575: LD_INT 4
55577: LESS
55578: AND
55579: IFFALSE 55598
55581: GO 55583
55583: DISABLE
// begin Difficulty := Difficulty + 1 ;
55584: LD_ADDR_OWVAR 67
55588: PUSH
55589: LD_OWVAR 67
55593: PUSH
55594: LD_INT 1
55596: PLUS
55597: ST_TO_ADDR
// end ;
55598: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
55599: LD_EXP 30
55603: PUSH
55604: LD_EXP 49
55608: AND
55609: IFFALSE 55712
55611: GO 55613
55613: DISABLE
55614: LD_INT 0
55616: PPUSH
// begin for i := 1 to 5 do
55617: LD_ADDR_VAR 0 1
55621: PUSH
55622: DOUBLE
55623: LD_INT 1
55625: DEC
55626: ST_TO_ADDR
55627: LD_INT 5
55629: PUSH
55630: FOR_TO
55631: IFFALSE 55710
// begin uc_nation := nation_nature ;
55633: LD_ADDR_OWVAR 21
55637: PUSH
55638: LD_INT 0
55640: ST_TO_ADDR
// uc_side := 0 ;
55641: LD_ADDR_OWVAR 20
55645: PUSH
55646: LD_INT 0
55648: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
55649: LD_ADDR_OWVAR 29
55653: PUSH
55654: LD_INT 12
55656: PUSH
55657: LD_INT 12
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// hc_agressivity := 20 ;
55664: LD_ADDR_OWVAR 35
55668: PUSH
55669: LD_INT 20
55671: ST_TO_ADDR
// hc_class := class_tiger ;
55672: LD_ADDR_OWVAR 28
55676: PUSH
55677: LD_INT 14
55679: ST_TO_ADDR
// hc_gallery :=  ;
55680: LD_ADDR_OWVAR 33
55684: PUSH
55685: LD_STRING 
55687: ST_TO_ADDR
// hc_name :=  ;
55688: LD_ADDR_OWVAR 26
55692: PUSH
55693: LD_STRING 
55695: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
55696: CALL_OW 44
55700: PPUSH
55701: LD_INT 0
55703: PPUSH
55704: CALL_OW 51
// end ;
55708: GO 55630
55710: POP
55711: POP
// end ;
55712: PPOPN 1
55714: END
// every 0 0$1 trigger StreamModeActive and sBomb do
55715: LD_EXP 30
55719: PUSH
55720: LD_EXP 50
55724: AND
55725: IFFALSE 55734
55727: GO 55729
55729: DISABLE
// StreamSibBomb ;
55730: CALL 55735 0 0
55734: END
// export function StreamSibBomb ; var i , x , y ; begin
55735: LD_INT 0
55737: PPUSH
55738: PPUSH
55739: PPUSH
55740: PPUSH
// result := false ;
55741: LD_ADDR_VAR 0 1
55745: PUSH
55746: LD_INT 0
55748: ST_TO_ADDR
// for i := 1 to 16 do
55749: LD_ADDR_VAR 0 2
55753: PUSH
55754: DOUBLE
55755: LD_INT 1
55757: DEC
55758: ST_TO_ADDR
55759: LD_INT 16
55761: PUSH
55762: FOR_TO
55763: IFFALSE 55962
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55765: LD_ADDR_VAR 0 3
55769: PUSH
55770: LD_INT 10
55772: PUSH
55773: LD_INT 20
55775: PUSH
55776: LD_INT 30
55778: PUSH
55779: LD_INT 40
55781: PUSH
55782: LD_INT 50
55784: PUSH
55785: LD_INT 60
55787: PUSH
55788: LD_INT 70
55790: PUSH
55791: LD_INT 80
55793: PUSH
55794: LD_INT 90
55796: PUSH
55797: LD_INT 100
55799: PUSH
55800: LD_INT 110
55802: PUSH
55803: LD_INT 120
55805: PUSH
55806: LD_INT 130
55808: PUSH
55809: LD_INT 140
55811: PUSH
55812: LD_INT 150
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 1
55834: PPUSH
55835: LD_INT 15
55837: PPUSH
55838: CALL_OW 12
55842: ARRAY
55843: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
55844: LD_ADDR_VAR 0 4
55848: PUSH
55849: LD_INT 10
55851: PUSH
55852: LD_INT 20
55854: PUSH
55855: LD_INT 30
55857: PUSH
55858: LD_INT 40
55860: PUSH
55861: LD_INT 50
55863: PUSH
55864: LD_INT 60
55866: PUSH
55867: LD_INT 70
55869: PUSH
55870: LD_INT 80
55872: PUSH
55873: LD_INT 90
55875: PUSH
55876: LD_INT 100
55878: PUSH
55879: LD_INT 110
55881: PUSH
55882: LD_INT 120
55884: PUSH
55885: LD_INT 130
55887: PUSH
55888: LD_INT 140
55890: PUSH
55891: LD_INT 150
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: PPUSH
55914: LD_INT 15
55916: PPUSH
55917: CALL_OW 12
55921: ARRAY
55922: ST_TO_ADDR
// if ValidHex ( x , y ) then
55923: LD_VAR 0 3
55927: PPUSH
55928: LD_VAR 0 4
55932: PPUSH
55933: CALL_OW 488
55937: IFFALSE 55960
// begin result := [ x , y ] ;
55939: LD_ADDR_VAR 0 1
55943: PUSH
55944: LD_VAR 0 3
55948: PUSH
55949: LD_VAR 0 4
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: ST_TO_ADDR
// break ;
55958: GO 55962
// end ; end ;
55960: GO 55762
55962: POP
55963: POP
// if result then
55964: LD_VAR 0 1
55968: IFFALSE 56028
// begin ToLua ( playSibBomb() ) ;
55970: LD_STRING playSibBomb()
55972: PPUSH
55973: CALL_OW 559
// wait ( 0 0$14 ) ;
55977: LD_INT 490
55979: PPUSH
55980: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
55984: LD_VAR 0 1
55988: PUSH
55989: LD_INT 1
55991: ARRAY
55992: PPUSH
55993: LD_VAR 0 1
55997: PUSH
55998: LD_INT 2
56000: ARRAY
56001: PPUSH
56002: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56006: LD_VAR 0 1
56010: PUSH
56011: LD_INT 1
56013: ARRAY
56014: PPUSH
56015: LD_VAR 0 1
56019: PUSH
56020: LD_INT 2
56022: ARRAY
56023: PPUSH
56024: CALL_OW 429
// end ; end ;
56028: LD_VAR 0 1
56032: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56033: LD_EXP 30
56037: PUSH
56038: LD_EXP 52
56042: AND
56043: IFFALSE 56055
56045: GO 56047
56047: DISABLE
// YouLost (  ) ;
56048: LD_STRING 
56050: PPUSH
56051: CALL_OW 104
56055: END
// every 0 0$1 trigger StreamModeActive and sFog do
56056: LD_EXP 30
56060: PUSH
56061: LD_EXP 51
56065: AND
56066: IFFALSE 56080
56068: GO 56070
56070: DISABLE
// FogOff ( your_side ) ;
56071: LD_OWVAR 2
56075: PPUSH
56076: CALL_OW 344
56080: END
// every 0 0$1 trigger StreamModeActive and sSun do
56081: LD_EXP 30
56085: PUSH
56086: LD_EXP 53
56090: AND
56091: IFFALSE 56119
56093: GO 56095
56095: DISABLE
// begin solar_recharge_percent := 0 ;
56096: LD_ADDR_OWVAR 79
56100: PUSH
56101: LD_INT 0
56103: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56104: LD_INT 10500
56106: PPUSH
56107: CALL_OW 67
// solar_recharge_percent := 100 ;
56111: LD_ADDR_OWVAR 79
56115: PUSH
56116: LD_INT 100
56118: ST_TO_ADDR
// end ;
56119: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56120: LD_EXP 30
56124: PUSH
56125: LD_EXP 54
56129: AND
56130: IFFALSE 56369
56132: GO 56134
56134: DISABLE
56135: LD_INT 0
56137: PPUSH
56138: PPUSH
56139: PPUSH
// begin tmp := [ ] ;
56140: LD_ADDR_VAR 0 3
56144: PUSH
56145: EMPTY
56146: ST_TO_ADDR
// for i := 1 to 6 do
56147: LD_ADDR_VAR 0 1
56151: PUSH
56152: DOUBLE
56153: LD_INT 1
56155: DEC
56156: ST_TO_ADDR
56157: LD_INT 6
56159: PUSH
56160: FOR_TO
56161: IFFALSE 56266
// begin uc_nation := nation_nature ;
56163: LD_ADDR_OWVAR 21
56167: PUSH
56168: LD_INT 0
56170: ST_TO_ADDR
// uc_side := 0 ;
56171: LD_ADDR_OWVAR 20
56175: PUSH
56176: LD_INT 0
56178: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56179: LD_ADDR_OWVAR 29
56183: PUSH
56184: LD_INT 12
56186: PUSH
56187: LD_INT 12
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: ST_TO_ADDR
// hc_agressivity := 20 ;
56194: LD_ADDR_OWVAR 35
56198: PUSH
56199: LD_INT 20
56201: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56202: LD_ADDR_OWVAR 28
56206: PUSH
56207: LD_INT 17
56209: ST_TO_ADDR
// hc_gallery :=  ;
56210: LD_ADDR_OWVAR 33
56214: PUSH
56215: LD_STRING 
56217: ST_TO_ADDR
// hc_name :=  ;
56218: LD_ADDR_OWVAR 26
56222: PUSH
56223: LD_STRING 
56225: ST_TO_ADDR
// un := CreateHuman ;
56226: LD_ADDR_VAR 0 2
56230: PUSH
56231: CALL_OW 44
56235: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56236: LD_VAR 0 2
56240: PPUSH
56241: LD_INT 1
56243: PPUSH
56244: CALL_OW 51
// tmp := tmp ^ un ;
56248: LD_ADDR_VAR 0 3
56252: PUSH
56253: LD_VAR 0 3
56257: PUSH
56258: LD_VAR 0 2
56262: ADD
56263: ST_TO_ADDR
// end ;
56264: GO 56160
56266: POP
56267: POP
// repeat wait ( 0 0$1 ) ;
56268: LD_INT 35
56270: PPUSH
56271: CALL_OW 67
// for un in tmp do
56275: LD_ADDR_VAR 0 2
56279: PUSH
56280: LD_VAR 0 3
56284: PUSH
56285: FOR_IN
56286: IFFALSE 56360
// begin if IsDead ( un ) then
56288: LD_VAR 0 2
56292: PPUSH
56293: CALL_OW 301
56297: IFFALSE 56317
// begin tmp := tmp diff un ;
56299: LD_ADDR_VAR 0 3
56303: PUSH
56304: LD_VAR 0 3
56308: PUSH
56309: LD_VAR 0 2
56313: DIFF
56314: ST_TO_ADDR
// continue ;
56315: GO 56285
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56317: LD_VAR 0 2
56321: PPUSH
56322: LD_INT 3
56324: PUSH
56325: LD_INT 22
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PPUSH
56339: CALL_OW 69
56343: PPUSH
56344: LD_VAR 0 2
56348: PPUSH
56349: CALL_OW 74
56353: PPUSH
56354: CALL_OW 115
// end ;
56358: GO 56285
56360: POP
56361: POP
// until not tmp ;
56362: LD_VAR 0 3
56366: NOT
56367: IFFALSE 56268
// end ;
56369: PPOPN 3
56371: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56372: LD_EXP 30
56376: PUSH
56377: LD_EXP 55
56381: AND
56382: IFFALSE 56436
56384: GO 56386
56386: DISABLE
// begin ToLua ( displayTroll(); ) ;
56387: LD_STRING displayTroll();
56389: PPUSH
56390: CALL_OW 559
// wait ( 3 3$00 ) ;
56394: LD_INT 6300
56396: PPUSH
56397: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56401: LD_STRING hideTroll();
56403: PPUSH
56404: CALL_OW 559
// wait ( 1 1$00 ) ;
56408: LD_INT 2100
56410: PPUSH
56411: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56415: LD_STRING displayTroll();
56417: PPUSH
56418: CALL_OW 559
// wait ( 1 1$00 ) ;
56422: LD_INT 2100
56424: PPUSH
56425: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56429: LD_STRING hideTroll();
56431: PPUSH
56432: CALL_OW 559
// end ;
56436: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56437: LD_EXP 30
56441: PUSH
56442: LD_EXP 56
56446: AND
56447: IFFALSE 56510
56449: GO 56451
56451: DISABLE
56452: LD_INT 0
56454: PPUSH
// begin p := 0 ;
56455: LD_ADDR_VAR 0 1
56459: PUSH
56460: LD_INT 0
56462: ST_TO_ADDR
// repeat game_speed := 1 ;
56463: LD_ADDR_OWVAR 65
56467: PUSH
56468: LD_INT 1
56470: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56471: LD_INT 35
56473: PPUSH
56474: CALL_OW 67
// p := p + 1 ;
56478: LD_ADDR_VAR 0 1
56482: PUSH
56483: LD_VAR 0 1
56487: PUSH
56488: LD_INT 1
56490: PLUS
56491: ST_TO_ADDR
// until p >= 60 ;
56492: LD_VAR 0 1
56496: PUSH
56497: LD_INT 60
56499: GREATEREQUAL
56500: IFFALSE 56463
// game_speed := 4 ;
56502: LD_ADDR_OWVAR 65
56506: PUSH
56507: LD_INT 4
56509: ST_TO_ADDR
// end ;
56510: PPOPN 1
56512: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56513: LD_EXP 30
56517: PUSH
56518: LD_EXP 57
56522: AND
56523: IFFALSE 56669
56525: GO 56527
56527: DISABLE
56528: LD_INT 0
56530: PPUSH
56531: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
56532: LD_ADDR_VAR 0 1
56536: PUSH
56537: LD_INT 22
56539: PUSH
56540: LD_OWVAR 2
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 30
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 30
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PPUSH
56581: CALL_OW 69
56585: ST_TO_ADDR
// if not depot then
56586: LD_VAR 0 1
56590: NOT
56591: IFFALSE 56595
// exit ;
56593: GO 56669
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
56595: LD_ADDR_VAR 0 2
56599: PUSH
56600: LD_VAR 0 1
56604: PUSH
56605: LD_INT 1
56607: PPUSH
56608: LD_VAR 0 1
56612: PPUSH
56613: CALL_OW 12
56617: ARRAY
56618: PPUSH
56619: CALL_OW 274
56623: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
56624: LD_VAR 0 2
56628: PPUSH
56629: LD_INT 1
56631: PPUSH
56632: LD_INT 0
56634: PPUSH
56635: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
56639: LD_VAR 0 2
56643: PPUSH
56644: LD_INT 2
56646: PPUSH
56647: LD_INT 0
56649: PPUSH
56650: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
56654: LD_VAR 0 2
56658: PPUSH
56659: LD_INT 3
56661: PPUSH
56662: LD_INT 0
56664: PPUSH
56665: CALL_OW 277
// end ;
56669: PPOPN 2
56671: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
56672: LD_EXP 30
56676: PUSH
56677: LD_EXP 58
56681: AND
56682: IFFALSE 56779
56684: GO 56686
56686: DISABLE
56687: LD_INT 0
56689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
56690: LD_ADDR_VAR 0 1
56694: PUSH
56695: LD_INT 22
56697: PUSH
56698: LD_OWVAR 2
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 21
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 3
56719: PUSH
56720: LD_INT 23
56722: PUSH
56723: LD_INT 0
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: LIST
56738: PPUSH
56739: CALL_OW 69
56743: ST_TO_ADDR
// if not tmp then
56744: LD_VAR 0 1
56748: NOT
56749: IFFALSE 56753
// exit ;
56751: GO 56779
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
56753: LD_VAR 0 1
56757: PUSH
56758: LD_INT 1
56760: PPUSH
56761: LD_VAR 0 1
56765: PPUSH
56766: CALL_OW 12
56770: ARRAY
56771: PPUSH
56772: LD_INT 200
56774: PPUSH
56775: CALL_OW 234
// end ;
56779: PPOPN 1
56781: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
56782: LD_EXP 30
56786: PUSH
56787: LD_EXP 59
56791: AND
56792: IFFALSE 56871
56794: GO 56796
56796: DISABLE
56797: LD_INT 0
56799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
56800: LD_ADDR_VAR 0 1
56804: PUSH
56805: LD_INT 22
56807: PUSH
56808: LD_OWVAR 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 21
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PPUSH
56831: CALL_OW 69
56835: ST_TO_ADDR
// if not tmp then
56836: LD_VAR 0 1
56840: NOT
56841: IFFALSE 56845
// exit ;
56843: GO 56871
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
56845: LD_VAR 0 1
56849: PUSH
56850: LD_INT 1
56852: PPUSH
56853: LD_VAR 0 1
56857: PPUSH
56858: CALL_OW 12
56862: ARRAY
56863: PPUSH
56864: LD_INT 60
56866: PPUSH
56867: CALL_OW 234
// end ;
56871: PPOPN 1
56873: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
56874: LD_EXP 30
56878: PUSH
56879: LD_EXP 60
56883: AND
56884: IFFALSE 56983
56886: GO 56888
56888: DISABLE
56889: LD_INT 0
56891: PPUSH
56892: PPUSH
// begin enable ;
56893: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
56894: LD_ADDR_VAR 0 1
56898: PUSH
56899: LD_INT 22
56901: PUSH
56902: LD_OWVAR 2
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 61
56913: PUSH
56914: EMPTY
56915: LIST
56916: PUSH
56917: LD_INT 33
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: PPUSH
56932: CALL_OW 69
56936: ST_TO_ADDR
// if not tmp then
56937: LD_VAR 0 1
56941: NOT
56942: IFFALSE 56946
// exit ;
56944: GO 56983
// for i in tmp do
56946: LD_ADDR_VAR 0 2
56950: PUSH
56951: LD_VAR 0 1
56955: PUSH
56956: FOR_IN
56957: IFFALSE 56981
// if IsControledBy ( i ) then
56959: LD_VAR 0 2
56963: PPUSH
56964: CALL_OW 312
56968: IFFALSE 56979
// ComUnlink ( i ) ;
56970: LD_VAR 0 2
56974: PPUSH
56975: CALL_OW 136
56979: GO 56956
56981: POP
56982: POP
// end ;
56983: PPOPN 2
56985: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
56986: LD_EXP 30
56990: PUSH
56991: LD_EXP 61
56995: AND
56996: IFFALSE 57136
56998: GO 57000
57000: DISABLE
57001: LD_INT 0
57003: PPUSH
57004: PPUSH
// begin ToLua ( displayPowell(); ) ;
57005: LD_STRING displayPowell();
57007: PPUSH
57008: CALL_OW 559
// uc_side := 0 ;
57012: LD_ADDR_OWVAR 20
57016: PUSH
57017: LD_INT 0
57019: ST_TO_ADDR
// uc_nation := 2 ;
57020: LD_ADDR_OWVAR 21
57024: PUSH
57025: LD_INT 2
57027: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57028: LD_ADDR_OWVAR 37
57032: PUSH
57033: LD_INT 14
57035: ST_TO_ADDR
// vc_engine := engine_siberite ;
57036: LD_ADDR_OWVAR 39
57040: PUSH
57041: LD_INT 3
57043: ST_TO_ADDR
// vc_control := control_apeman ;
57044: LD_ADDR_OWVAR 38
57048: PUSH
57049: LD_INT 5
57051: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57052: LD_ADDR_OWVAR 40
57056: PUSH
57057: LD_INT 29
57059: ST_TO_ADDR
// un := CreateVehicle ;
57060: LD_ADDR_VAR 0 2
57064: PUSH
57065: CALL_OW 45
57069: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57070: LD_VAR 0 2
57074: PPUSH
57075: LD_INT 1
57077: PPUSH
57078: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57082: LD_INT 35
57084: PPUSH
57085: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57089: LD_VAR 0 2
57093: PPUSH
57094: LD_INT 22
57096: PUSH
57097: LD_OWVAR 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PPUSH
57106: CALL_OW 69
57110: PPUSH
57111: LD_VAR 0 2
57115: PPUSH
57116: CALL_OW 74
57120: PPUSH
57121: CALL_OW 115
// until IsDead ( un ) ;
57125: LD_VAR 0 2
57129: PPUSH
57130: CALL_OW 301
57134: IFFALSE 57082
// end ;
57136: PPOPN 2
57138: END
// every 0 0$1 trigger StreamModeActive and sStu do
57139: LD_EXP 30
57143: PUSH
57144: LD_EXP 69
57148: AND
57149: IFFALSE 57165
57151: GO 57153
57153: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57154: LD_STRING displayStucuk();
57156: PPUSH
57157: CALL_OW 559
// ResetFog ;
57161: CALL_OW 335
// end ;
57165: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57166: LD_EXP 30
57170: PUSH
57171: LD_EXP 62
57175: AND
57176: IFFALSE 57317
57178: GO 57180
57180: DISABLE
57181: LD_INT 0
57183: PPUSH
57184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57185: LD_ADDR_VAR 0 2
57189: PUSH
57190: LD_INT 22
57192: PUSH
57193: LD_OWVAR 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 21
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PPUSH
57216: CALL_OW 69
57220: ST_TO_ADDR
// if not tmp then
57221: LD_VAR 0 2
57225: NOT
57226: IFFALSE 57230
// exit ;
57228: GO 57317
// un := tmp [ rand ( 1 , tmp ) ] ;
57230: LD_ADDR_VAR 0 1
57234: PUSH
57235: LD_VAR 0 2
57239: PUSH
57240: LD_INT 1
57242: PPUSH
57243: LD_VAR 0 2
57247: PPUSH
57248: CALL_OW 12
57252: ARRAY
57253: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57254: LD_VAR 0 1
57258: PPUSH
57259: LD_INT 0
57261: PPUSH
57262: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57266: LD_VAR 0 1
57270: PPUSH
57271: LD_OWVAR 3
57275: PUSH
57276: LD_VAR 0 1
57280: DIFF
57281: PPUSH
57282: LD_VAR 0 1
57286: PPUSH
57287: CALL_OW 74
57291: PPUSH
57292: CALL_OW 115
// wait ( 0 0$20 ) ;
57296: LD_INT 700
57298: PPUSH
57299: CALL_OW 67
// SetSide ( un , your_side ) ;
57303: LD_VAR 0 1
57307: PPUSH
57308: LD_OWVAR 2
57312: PPUSH
57313: CALL_OW 235
// end ;
57317: PPOPN 2
57319: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57320: LD_EXP 30
57324: PUSH
57325: LD_EXP 63
57329: AND
57330: IFFALSE 57436
57332: GO 57334
57334: DISABLE
57335: LD_INT 0
57337: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57338: LD_ADDR_VAR 0 1
57342: PUSH
57343: LD_INT 22
57345: PUSH
57346: LD_OWVAR 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: LD_INT 30
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 30
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PPUSH
57387: CALL_OW 69
57391: ST_TO_ADDR
// if not depot then
57392: LD_VAR 0 1
57396: NOT
57397: IFFALSE 57401
// exit ;
57399: GO 57436
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57401: LD_VAR 0 1
57405: PUSH
57406: LD_INT 1
57408: ARRAY
57409: PPUSH
57410: CALL_OW 250
57414: PPUSH
57415: LD_VAR 0 1
57419: PUSH
57420: LD_INT 1
57422: ARRAY
57423: PPUSH
57424: CALL_OW 251
57428: PPUSH
57429: LD_INT 70
57431: PPUSH
57432: CALL_OW 495
// end ;
57436: PPOPN 1
57438: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57439: LD_EXP 30
57443: PUSH
57444: LD_EXP 64
57448: AND
57449: IFFALSE 57660
57451: GO 57453
57453: DISABLE
57454: LD_INT 0
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
57460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57461: LD_ADDR_VAR 0 5
57465: PUSH
57466: LD_INT 22
57468: PUSH
57469: LD_OWVAR 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 21
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PPUSH
57492: CALL_OW 69
57496: ST_TO_ADDR
// if not tmp then
57497: LD_VAR 0 5
57501: NOT
57502: IFFALSE 57506
// exit ;
57504: GO 57660
// for i in tmp do
57506: LD_ADDR_VAR 0 1
57510: PUSH
57511: LD_VAR 0 5
57515: PUSH
57516: FOR_IN
57517: IFFALSE 57658
// begin d := rand ( 0 , 5 ) ;
57519: LD_ADDR_VAR 0 4
57523: PUSH
57524: LD_INT 0
57526: PPUSH
57527: LD_INT 5
57529: PPUSH
57530: CALL_OW 12
57534: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
57535: LD_ADDR_VAR 0 2
57539: PUSH
57540: LD_VAR 0 1
57544: PPUSH
57545: CALL_OW 250
57549: PPUSH
57550: LD_VAR 0 4
57554: PPUSH
57555: LD_INT 3
57557: PPUSH
57558: LD_INT 12
57560: PPUSH
57561: CALL_OW 12
57565: PPUSH
57566: CALL_OW 272
57570: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
57571: LD_ADDR_VAR 0 3
57575: PUSH
57576: LD_VAR 0 1
57580: PPUSH
57581: CALL_OW 251
57585: PPUSH
57586: LD_VAR 0 4
57590: PPUSH
57591: LD_INT 3
57593: PPUSH
57594: LD_INT 12
57596: PPUSH
57597: CALL_OW 12
57601: PPUSH
57602: CALL_OW 273
57606: ST_TO_ADDR
// if ValidHex ( x , y ) then
57607: LD_VAR 0 2
57611: PPUSH
57612: LD_VAR 0 3
57616: PPUSH
57617: CALL_OW 488
57621: IFFALSE 57656
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
57623: LD_VAR 0 1
57627: PPUSH
57628: LD_VAR 0 2
57632: PPUSH
57633: LD_VAR 0 3
57637: PPUSH
57638: LD_INT 3
57640: PPUSH
57641: LD_INT 6
57643: PPUSH
57644: CALL_OW 12
57648: PPUSH
57649: LD_INT 1
57651: PPUSH
57652: CALL_OW 483
// end ;
57656: GO 57516
57658: POP
57659: POP
// end ;
57660: PPOPN 5
57662: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
57663: LD_EXP 30
57667: PUSH
57668: LD_EXP 65
57672: AND
57673: IFFALSE 57767
57675: GO 57677
57677: DISABLE
57678: LD_INT 0
57680: PPUSH
57681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
57682: LD_ADDR_VAR 0 2
57686: PUSH
57687: LD_INT 22
57689: PUSH
57690: LD_OWVAR 2
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 32
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 21
57711: PUSH
57712: LD_INT 2
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: LIST
57723: PPUSH
57724: CALL_OW 69
57728: ST_TO_ADDR
// if not tmp then
57729: LD_VAR 0 2
57733: NOT
57734: IFFALSE 57738
// exit ;
57736: GO 57767
// for i in tmp do
57738: LD_ADDR_VAR 0 1
57742: PUSH
57743: LD_VAR 0 2
57747: PUSH
57748: FOR_IN
57749: IFFALSE 57765
// SetFuel ( i , 0 ) ;
57751: LD_VAR 0 1
57755: PPUSH
57756: LD_INT 0
57758: PPUSH
57759: CALL_OW 240
57763: GO 57748
57765: POP
57766: POP
// end ;
57767: PPOPN 2
57769: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
57770: LD_EXP 30
57774: PUSH
57775: LD_EXP 66
57779: AND
57780: IFFALSE 57846
57782: GO 57784
57784: DISABLE
57785: LD_INT 0
57787: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
57788: LD_ADDR_VAR 0 1
57792: PUSH
57793: LD_INT 22
57795: PUSH
57796: LD_OWVAR 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 30
57807: PUSH
57808: LD_INT 29
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PPUSH
57819: CALL_OW 69
57823: ST_TO_ADDR
// if not tmp then
57824: LD_VAR 0 1
57828: NOT
57829: IFFALSE 57833
// exit ;
57831: GO 57846
// DestroyUnit ( tmp [ 1 ] ) ;
57833: LD_VAR 0 1
57837: PUSH
57838: LD_INT 1
57840: ARRAY
57841: PPUSH
57842: CALL_OW 65
// end ;
57846: PPOPN 1
57848: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
57849: LD_EXP 30
57853: PUSH
57854: LD_EXP 68
57858: AND
57859: IFFALSE 57988
57861: GO 57863
57863: DISABLE
57864: LD_INT 0
57866: PPUSH
// begin uc_side := 0 ;
57867: LD_ADDR_OWVAR 20
57871: PUSH
57872: LD_INT 0
57874: ST_TO_ADDR
// uc_nation := nation_arabian ;
57875: LD_ADDR_OWVAR 21
57879: PUSH
57880: LD_INT 2
57882: ST_TO_ADDR
// hc_gallery :=  ;
57883: LD_ADDR_OWVAR 33
57887: PUSH
57888: LD_STRING 
57890: ST_TO_ADDR
// hc_name :=  ;
57891: LD_ADDR_OWVAR 26
57895: PUSH
57896: LD_STRING 
57898: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
57899: LD_INT 1
57901: PPUSH
57902: LD_INT 11
57904: PPUSH
57905: LD_INT 10
57907: PPUSH
57908: CALL_OW 380
// un := CreateHuman ;
57912: LD_ADDR_VAR 0 1
57916: PUSH
57917: CALL_OW 44
57921: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57922: LD_VAR 0 1
57926: PPUSH
57927: LD_INT 1
57929: PPUSH
57930: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57934: LD_INT 35
57936: PPUSH
57937: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57941: LD_VAR 0 1
57945: PPUSH
57946: LD_INT 22
57948: PUSH
57949: LD_OWVAR 2
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PPUSH
57958: CALL_OW 69
57962: PPUSH
57963: LD_VAR 0 1
57967: PPUSH
57968: CALL_OW 74
57972: PPUSH
57973: CALL_OW 115
// until IsDead ( un ) ;
57977: LD_VAR 0 1
57981: PPUSH
57982: CALL_OW 301
57986: IFFALSE 57934
// end ;
57988: PPOPN 1
57990: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
57991: LD_EXP 30
57995: PUSH
57996: LD_EXP 70
58000: AND
58001: IFFALSE 58013
58003: GO 58005
58005: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58006: LD_STRING earthquake(getX(game), 0, 32)
58008: PPUSH
58009: CALL_OW 559
58013: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58014: LD_EXP 30
58018: PUSH
58019: LD_EXP 71
58023: AND
58024: IFFALSE 58115
58026: GO 58028
58028: DISABLE
58029: LD_INT 0
58031: PPUSH
// begin enable ;
58032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58033: LD_ADDR_VAR 0 1
58037: PUSH
58038: LD_INT 22
58040: PUSH
58041: LD_OWVAR 2
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 21
58052: PUSH
58053: LD_INT 2
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 33
58062: PUSH
58063: LD_INT 3
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: LIST
58074: PPUSH
58075: CALL_OW 69
58079: ST_TO_ADDR
// if not tmp then
58080: LD_VAR 0 1
58084: NOT
58085: IFFALSE 58089
// exit ;
58087: GO 58115
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58089: LD_VAR 0 1
58093: PUSH
58094: LD_INT 1
58096: PPUSH
58097: LD_VAR 0 1
58101: PPUSH
58102: CALL_OW 12
58106: ARRAY
58107: PPUSH
58108: LD_INT 1
58110: PPUSH
58111: CALL_OW 234
// end ;
58115: PPOPN 1
58117: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58118: LD_EXP 30
58122: PUSH
58123: LD_EXP 72
58127: AND
58128: IFFALSE 58269
58130: GO 58132
58132: DISABLE
58133: LD_INT 0
58135: PPUSH
58136: PPUSH
58137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58138: LD_ADDR_VAR 0 3
58142: PUSH
58143: LD_INT 22
58145: PUSH
58146: LD_OWVAR 2
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 25
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PPUSH
58169: CALL_OW 69
58173: ST_TO_ADDR
// if not tmp then
58174: LD_VAR 0 3
58178: NOT
58179: IFFALSE 58183
// exit ;
58181: GO 58269
// un := tmp [ rand ( 1 , tmp ) ] ;
58183: LD_ADDR_VAR 0 2
58187: PUSH
58188: LD_VAR 0 3
58192: PUSH
58193: LD_INT 1
58195: PPUSH
58196: LD_VAR 0 3
58200: PPUSH
58201: CALL_OW 12
58205: ARRAY
58206: ST_TO_ADDR
// if Crawls ( un ) then
58207: LD_VAR 0 2
58211: PPUSH
58212: CALL_OW 318
58216: IFFALSE 58227
// ComWalk ( un ) ;
58218: LD_VAR 0 2
58222: PPUSH
58223: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58227: LD_VAR 0 2
58231: PPUSH
58232: LD_INT 9
58234: PPUSH
58235: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58239: LD_INT 28
58241: PPUSH
58242: LD_OWVAR 2
58246: PPUSH
58247: LD_INT 2
58249: PPUSH
58250: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58254: LD_INT 29
58256: PPUSH
58257: LD_OWVAR 2
58261: PPUSH
58262: LD_INT 2
58264: PPUSH
58265: CALL_OW 322
// end ;
58269: PPOPN 3
58271: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58272: LD_EXP 30
58276: PUSH
58277: LD_EXP 73
58281: AND
58282: IFFALSE 58393
58284: GO 58286
58286: DISABLE
58287: LD_INT 0
58289: PPUSH
58290: PPUSH
58291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58292: LD_ADDR_VAR 0 3
58296: PUSH
58297: LD_INT 22
58299: PUSH
58300: LD_OWVAR 2
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 25
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PPUSH
58323: CALL_OW 69
58327: ST_TO_ADDR
// if not tmp then
58328: LD_VAR 0 3
58332: NOT
58333: IFFALSE 58337
// exit ;
58335: GO 58393
// un := tmp [ rand ( 1 , tmp ) ] ;
58337: LD_ADDR_VAR 0 2
58341: PUSH
58342: LD_VAR 0 3
58346: PUSH
58347: LD_INT 1
58349: PPUSH
58350: LD_VAR 0 3
58354: PPUSH
58355: CALL_OW 12
58359: ARRAY
58360: ST_TO_ADDR
// if Crawls ( un ) then
58361: LD_VAR 0 2
58365: PPUSH
58366: CALL_OW 318
58370: IFFALSE 58381
// ComWalk ( un ) ;
58372: LD_VAR 0 2
58376: PPUSH
58377: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58381: LD_VAR 0 2
58385: PPUSH
58386: LD_INT 8
58388: PPUSH
58389: CALL_OW 336
// end ;
58393: PPOPN 3
58395: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58396: LD_EXP 30
58400: PUSH
58401: LD_EXP 74
58405: AND
58406: IFFALSE 58550
58408: GO 58410
58410: DISABLE
58411: LD_INT 0
58413: PPUSH
58414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58415: LD_ADDR_VAR 0 2
58419: PUSH
58420: LD_INT 22
58422: PUSH
58423: LD_OWVAR 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 21
58434: PUSH
58435: LD_INT 2
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 34
58447: PUSH
58448: LD_INT 12
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 34
58457: PUSH
58458: LD_INT 51
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 34
58467: PUSH
58468: LD_INT 32
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: PPUSH
58486: CALL_OW 69
58490: ST_TO_ADDR
// if not tmp then
58491: LD_VAR 0 2
58495: NOT
58496: IFFALSE 58500
// exit ;
58498: GO 58550
// for i in tmp do
58500: LD_ADDR_VAR 0 1
58504: PUSH
58505: LD_VAR 0 2
58509: PUSH
58510: FOR_IN
58511: IFFALSE 58548
// if GetCargo ( i , mat_artifact ) = 0 then
58513: LD_VAR 0 1
58517: PPUSH
58518: LD_INT 4
58520: PPUSH
58521: CALL_OW 289
58525: PUSH
58526: LD_INT 0
58528: EQUAL
58529: IFFALSE 58546
// SetCargo ( i , mat_siberit , 100 ) ;
58531: LD_VAR 0 1
58535: PPUSH
58536: LD_INT 3
58538: PPUSH
58539: LD_INT 100
58541: PPUSH
58542: CALL_OW 290
58546: GO 58510
58548: POP
58549: POP
// end ;
58550: PPOPN 2
58552: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
58553: LD_EXP 30
58557: PUSH
58558: LD_EXP 75
58562: AND
58563: IFFALSE 58746
58565: GO 58567
58567: DISABLE
58568: LD_INT 0
58570: PPUSH
58571: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
58572: LD_ADDR_VAR 0 2
58576: PUSH
58577: LD_INT 22
58579: PUSH
58580: LD_OWVAR 2
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PPUSH
58589: CALL_OW 69
58593: ST_TO_ADDR
// if not tmp then
58594: LD_VAR 0 2
58598: NOT
58599: IFFALSE 58603
// exit ;
58601: GO 58746
// for i := 1 to 2 do
58603: LD_ADDR_VAR 0 1
58607: PUSH
58608: DOUBLE
58609: LD_INT 1
58611: DEC
58612: ST_TO_ADDR
58613: LD_INT 2
58615: PUSH
58616: FOR_TO
58617: IFFALSE 58744
// begin uc_side := your_side ;
58619: LD_ADDR_OWVAR 20
58623: PUSH
58624: LD_OWVAR 2
58628: ST_TO_ADDR
// uc_nation := nation_american ;
58629: LD_ADDR_OWVAR 21
58633: PUSH
58634: LD_INT 1
58636: ST_TO_ADDR
// vc_chassis := us_morphling ;
58637: LD_ADDR_OWVAR 37
58641: PUSH
58642: LD_INT 5
58644: ST_TO_ADDR
// vc_engine := engine_siberite ;
58645: LD_ADDR_OWVAR 39
58649: PUSH
58650: LD_INT 3
58652: ST_TO_ADDR
// vc_control := control_computer ;
58653: LD_ADDR_OWVAR 38
58657: PUSH
58658: LD_INT 3
58660: ST_TO_ADDR
// vc_weapon := us_double_laser ;
58661: LD_ADDR_OWVAR 40
58665: PUSH
58666: LD_INT 10
58668: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
58669: LD_VAR 0 2
58673: PUSH
58674: LD_INT 1
58676: ARRAY
58677: PPUSH
58678: CALL_OW 310
58682: NOT
58683: IFFALSE 58730
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
58685: CALL_OW 45
58689: PPUSH
58690: LD_VAR 0 2
58694: PUSH
58695: LD_INT 1
58697: ARRAY
58698: PPUSH
58699: CALL_OW 250
58703: PPUSH
58704: LD_VAR 0 2
58708: PUSH
58709: LD_INT 1
58711: ARRAY
58712: PPUSH
58713: CALL_OW 251
58717: PPUSH
58718: LD_INT 12
58720: PPUSH
58721: LD_INT 1
58723: PPUSH
58724: CALL_OW 50
58728: GO 58742
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
58730: CALL_OW 45
58734: PPUSH
58735: LD_INT 1
58737: PPUSH
58738: CALL_OW 51
// end ;
58742: GO 58616
58744: POP
58745: POP
// end ;
58746: PPOPN 2
58748: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
58749: LD_EXP 30
58753: PUSH
58754: LD_EXP 76
58758: AND
58759: IFFALSE 58981
58761: GO 58763
58763: DISABLE
58764: LD_INT 0
58766: PPUSH
58767: PPUSH
58768: PPUSH
58769: PPUSH
58770: PPUSH
58771: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
58772: LD_ADDR_VAR 0 6
58776: PUSH
58777: LD_INT 22
58779: PUSH
58780: LD_OWVAR 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 21
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 3
58801: PUSH
58802: LD_INT 23
58804: PUSH
58805: LD_INT 0
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: PPUSH
58821: CALL_OW 69
58825: ST_TO_ADDR
// if not tmp then
58826: LD_VAR 0 6
58830: NOT
58831: IFFALSE 58835
// exit ;
58833: GO 58981
// s1 := rand ( 1 , 4 ) ;
58835: LD_ADDR_VAR 0 2
58839: PUSH
58840: LD_INT 1
58842: PPUSH
58843: LD_INT 4
58845: PPUSH
58846: CALL_OW 12
58850: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
58851: LD_ADDR_VAR 0 4
58855: PUSH
58856: LD_VAR 0 6
58860: PUSH
58861: LD_INT 1
58863: ARRAY
58864: PPUSH
58865: LD_VAR 0 2
58869: PPUSH
58870: CALL_OW 259
58874: ST_TO_ADDR
// if s1 = 1 then
58875: LD_VAR 0 2
58879: PUSH
58880: LD_INT 1
58882: EQUAL
58883: IFFALSE 58903
// s2 := rand ( 2 , 4 ) else
58885: LD_ADDR_VAR 0 3
58889: PUSH
58890: LD_INT 2
58892: PPUSH
58893: LD_INT 4
58895: PPUSH
58896: CALL_OW 12
58900: ST_TO_ADDR
58901: GO 58911
// s2 := 1 ;
58903: LD_ADDR_VAR 0 3
58907: PUSH
58908: LD_INT 1
58910: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
58911: LD_ADDR_VAR 0 5
58915: PUSH
58916: LD_VAR 0 6
58920: PUSH
58921: LD_INT 1
58923: ARRAY
58924: PPUSH
58925: LD_VAR 0 3
58929: PPUSH
58930: CALL_OW 259
58934: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
58935: LD_VAR 0 6
58939: PUSH
58940: LD_INT 1
58942: ARRAY
58943: PPUSH
58944: LD_VAR 0 2
58948: PPUSH
58949: LD_VAR 0 5
58953: PPUSH
58954: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
58958: LD_VAR 0 6
58962: PUSH
58963: LD_INT 1
58965: ARRAY
58966: PPUSH
58967: LD_VAR 0 3
58971: PPUSH
58972: LD_VAR 0 4
58976: PPUSH
58977: CALL_OW 237
// end ;
58981: PPOPN 6
58983: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
58984: LD_EXP 30
58988: PUSH
58989: LD_EXP 77
58993: AND
58994: IFFALSE 59073
58996: GO 58998
58998: DISABLE
58999: LD_INT 0
59001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59002: LD_ADDR_VAR 0 1
59006: PUSH
59007: LD_INT 22
59009: PUSH
59010: LD_OWVAR 2
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 30
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PPUSH
59033: CALL_OW 69
59037: ST_TO_ADDR
// if not tmp then
59038: LD_VAR 0 1
59042: NOT
59043: IFFALSE 59047
// exit ;
59045: GO 59073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59047: LD_VAR 0 1
59051: PUSH
59052: LD_INT 1
59054: PPUSH
59055: LD_VAR 0 1
59059: PPUSH
59060: CALL_OW 12
59064: ARRAY
59065: PPUSH
59066: LD_INT 1
59068: PPUSH
59069: CALL_OW 234
// end ;
59073: PPOPN 1
59075: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59076: LD_EXP 30
59080: PUSH
59081: LD_EXP 78
59085: AND
59086: IFFALSE 59198
59088: GO 59090
59090: DISABLE
59091: LD_INT 0
59093: PPUSH
59094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59095: LD_ADDR_VAR 0 2
59099: PUSH
59100: LD_INT 22
59102: PUSH
59103: LD_OWVAR 2
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 2
59114: PUSH
59115: LD_INT 30
59117: PUSH
59118: LD_INT 27
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 30
59127: PUSH
59128: LD_INT 26
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 30
59137: PUSH
59138: LD_INT 28
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PPUSH
59155: CALL_OW 69
59159: ST_TO_ADDR
// if not tmp then
59160: LD_VAR 0 2
59164: NOT
59165: IFFALSE 59169
// exit ;
59167: GO 59198
// for i in tmp do
59169: LD_ADDR_VAR 0 1
59173: PUSH
59174: LD_VAR 0 2
59178: PUSH
59179: FOR_IN
59180: IFFALSE 59196
// SetLives ( i , 1 ) ;
59182: LD_VAR 0 1
59186: PPUSH
59187: LD_INT 1
59189: PPUSH
59190: CALL_OW 234
59194: GO 59179
59196: POP
59197: POP
// end ;
59198: PPOPN 2
59200: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59201: LD_EXP 30
59205: PUSH
59206: LD_EXP 79
59210: AND
59211: IFFALSE 59498
59213: GO 59215
59215: DISABLE
59216: LD_INT 0
59218: PPUSH
59219: PPUSH
59220: PPUSH
// begin i := rand ( 1 , 7 ) ;
59221: LD_ADDR_VAR 0 1
59225: PUSH
59226: LD_INT 1
59228: PPUSH
59229: LD_INT 7
59231: PPUSH
59232: CALL_OW 12
59236: ST_TO_ADDR
// case i of 1 :
59237: LD_VAR 0 1
59241: PUSH
59242: LD_INT 1
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59250
59248: GO 59260
59250: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59251: LD_STRING earthquake(getX(game), 0, 32)
59253: PPUSH
59254: CALL_OW 559
59258: GO 59498
59260: LD_INT 2
59262: DOUBLE
59263: EQUAL
59264: IFTRUE 59268
59266: GO 59282
59268: POP
// begin ToLua ( displayStucuk(); ) ;
59269: LD_STRING displayStucuk();
59271: PPUSH
59272: CALL_OW 559
// ResetFog ;
59276: CALL_OW 335
// end ; 3 :
59280: GO 59498
59282: LD_INT 3
59284: DOUBLE
59285: EQUAL
59286: IFTRUE 59290
59288: GO 59394
59290: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59291: LD_ADDR_VAR 0 2
59295: PUSH
59296: LD_INT 22
59298: PUSH
59299: LD_OWVAR 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 25
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PPUSH
59322: CALL_OW 69
59326: ST_TO_ADDR
// if not tmp then
59327: LD_VAR 0 2
59331: NOT
59332: IFFALSE 59336
// exit ;
59334: GO 59498
// un := tmp [ rand ( 1 , tmp ) ] ;
59336: LD_ADDR_VAR 0 3
59340: PUSH
59341: LD_VAR 0 2
59345: PUSH
59346: LD_INT 1
59348: PPUSH
59349: LD_VAR 0 2
59353: PPUSH
59354: CALL_OW 12
59358: ARRAY
59359: ST_TO_ADDR
// if Crawls ( un ) then
59360: LD_VAR 0 3
59364: PPUSH
59365: CALL_OW 318
59369: IFFALSE 59380
// ComWalk ( un ) ;
59371: LD_VAR 0 3
59375: PPUSH
59376: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59380: LD_VAR 0 3
59384: PPUSH
59385: LD_INT 8
59387: PPUSH
59388: CALL_OW 336
// end ; 4 :
59392: GO 59498
59394: LD_INT 4
59396: DOUBLE
59397: EQUAL
59398: IFTRUE 59402
59400: GO 59476
59402: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59403: LD_ADDR_VAR 0 2
59407: PUSH
59408: LD_INT 22
59410: PUSH
59411: LD_OWVAR 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 30
59422: PUSH
59423: LD_INT 29
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PPUSH
59434: CALL_OW 69
59438: ST_TO_ADDR
// if not tmp then
59439: LD_VAR 0 2
59443: NOT
59444: IFFALSE 59448
// exit ;
59446: GO 59498
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59448: LD_VAR 0 2
59452: PUSH
59453: LD_INT 1
59455: ARRAY
59456: PPUSH
59457: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59461: LD_VAR 0 2
59465: PUSH
59466: LD_INT 1
59468: ARRAY
59469: PPUSH
59470: CALL_OW 65
// end ; 5 .. 7 :
59474: GO 59498
59476: LD_INT 5
59478: DOUBLE
59479: GREATEREQUAL
59480: IFFALSE 59488
59482: LD_INT 7
59484: DOUBLE
59485: LESSEQUAL
59486: IFTRUE 59490
59488: GO 59497
59490: POP
// StreamSibBomb ; end ;
59491: CALL 55735 0 0
59495: GO 59498
59497: POP
// end ;
59498: PPOPN 3
59500: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59501: LD_EXP 30
59505: PUSH
59506: LD_EXP 80
59510: AND
59511: IFFALSE 59667
59513: GO 59515
59515: DISABLE
59516: LD_INT 0
59518: PPUSH
59519: PPUSH
59520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
59521: LD_ADDR_VAR 0 2
59525: PUSH
59526: LD_INT 81
59528: PUSH
59529: LD_OWVAR 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: LD_INT 21
59543: PUSH
59544: LD_INT 1
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 21
59553: PUSH
59554: LD_INT 2
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: LIST
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PPUSH
59570: CALL_OW 69
59574: ST_TO_ADDR
// if not tmp then
59575: LD_VAR 0 2
59579: NOT
59580: IFFALSE 59584
// exit ;
59582: GO 59667
// p := 0 ;
59584: LD_ADDR_VAR 0 3
59588: PUSH
59589: LD_INT 0
59591: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
59592: LD_INT 35
59594: PPUSH
59595: CALL_OW 67
// p := p + 1 ;
59599: LD_ADDR_VAR 0 3
59603: PUSH
59604: LD_VAR 0 3
59608: PUSH
59609: LD_INT 1
59611: PLUS
59612: ST_TO_ADDR
// for i in tmp do
59613: LD_ADDR_VAR 0 1
59617: PUSH
59618: LD_VAR 0 2
59622: PUSH
59623: FOR_IN
59624: IFFALSE 59655
// if GetLives ( i ) < 1000 then
59626: LD_VAR 0 1
59630: PPUSH
59631: CALL_OW 256
59635: PUSH
59636: LD_INT 1000
59638: LESS
59639: IFFALSE 59653
// SetLives ( i , 1000 ) ;
59641: LD_VAR 0 1
59645: PPUSH
59646: LD_INT 1000
59648: PPUSH
59649: CALL_OW 234
59653: GO 59623
59655: POP
59656: POP
// until p > 20 ;
59657: LD_VAR 0 3
59661: PUSH
59662: LD_INT 20
59664: GREATER
59665: IFFALSE 59592
// end ;
59667: PPOPN 3
59669: END
// every 0 0$1 trigger StreamModeActive and sTime do
59670: LD_EXP 30
59674: PUSH
59675: LD_EXP 81
59679: AND
59680: IFFALSE 59715
59682: GO 59684
59684: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
59685: LD_INT 28
59687: PPUSH
59688: LD_OWVAR 2
59692: PPUSH
59693: LD_INT 2
59695: PPUSH
59696: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
59700: LD_INT 30
59702: PPUSH
59703: LD_OWVAR 2
59707: PPUSH
59708: LD_INT 2
59710: PPUSH
59711: CALL_OW 322
// end ;
59715: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
59716: LD_EXP 30
59720: PUSH
59721: LD_EXP 82
59725: AND
59726: IFFALSE 59847
59728: GO 59730
59730: DISABLE
59731: LD_INT 0
59733: PPUSH
59734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59735: LD_ADDR_VAR 0 2
59739: PUSH
59740: LD_INT 22
59742: PUSH
59743: LD_OWVAR 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 21
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 3
59764: PUSH
59765: LD_INT 23
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: EMPTY
59776: LIST
59777: LIST
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: LIST
59783: PPUSH
59784: CALL_OW 69
59788: ST_TO_ADDR
// if not tmp then
59789: LD_VAR 0 2
59793: NOT
59794: IFFALSE 59798
// exit ;
59796: GO 59847
// for i in tmp do
59798: LD_ADDR_VAR 0 1
59802: PUSH
59803: LD_VAR 0 2
59807: PUSH
59808: FOR_IN
59809: IFFALSE 59845
// begin if Crawls ( i ) then
59811: LD_VAR 0 1
59815: PPUSH
59816: CALL_OW 318
59820: IFFALSE 59831
// ComWalk ( i ) ;
59822: LD_VAR 0 1
59826: PPUSH
59827: CALL_OW 138
// SetClass ( i , 2 ) ;
59831: LD_VAR 0 1
59835: PPUSH
59836: LD_INT 2
59838: PPUSH
59839: CALL_OW 336
// end ;
59843: GO 59808
59845: POP
59846: POP
// end ;
59847: PPOPN 2
59849: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
59850: LD_EXP 30
59854: PUSH
59855: LD_EXP 83
59859: AND
59860: IFFALSE 60148
59862: GO 59864
59864: DISABLE
59865: LD_INT 0
59867: PPUSH
59868: PPUSH
59869: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
59870: LD_OWVAR 2
59874: PPUSH
59875: LD_INT 9
59877: PPUSH
59878: LD_INT 1
59880: PPUSH
59881: LD_INT 1
59883: PPUSH
59884: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
59888: LD_INT 9
59890: PPUSH
59891: LD_OWVAR 2
59895: PPUSH
59896: CALL_OW 343
// uc_side := 9 ;
59900: LD_ADDR_OWVAR 20
59904: PUSH
59905: LD_INT 9
59907: ST_TO_ADDR
// uc_nation := 2 ;
59908: LD_ADDR_OWVAR 21
59912: PUSH
59913: LD_INT 2
59915: ST_TO_ADDR
// hc_name := Dark Warrior ;
59916: LD_ADDR_OWVAR 26
59920: PUSH
59921: LD_STRING Dark Warrior
59923: ST_TO_ADDR
// hc_gallery :=  ;
59924: LD_ADDR_OWVAR 33
59928: PUSH
59929: LD_STRING 
59931: ST_TO_ADDR
// hc_noskilllimit := true ;
59932: LD_ADDR_OWVAR 76
59936: PUSH
59937: LD_INT 1
59939: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
59940: LD_ADDR_OWVAR 31
59944: PUSH
59945: LD_INT 30
59947: PUSH
59948: LD_INT 30
59950: PUSH
59951: LD_INT 30
59953: PUSH
59954: LD_INT 30
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// un := CreateHuman ;
59963: LD_ADDR_VAR 0 3
59967: PUSH
59968: CALL_OW 44
59972: ST_TO_ADDR
// hc_noskilllimit := false ;
59973: LD_ADDR_OWVAR 76
59977: PUSH
59978: LD_INT 0
59980: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59981: LD_VAR 0 3
59985: PPUSH
59986: LD_INT 1
59988: PPUSH
59989: CALL_OW 51
// ToLua ( playRanger() ) ;
59993: LD_STRING playRanger()
59995: PPUSH
59996: CALL_OW 559
// p := 0 ;
60000: LD_ADDR_VAR 0 2
60004: PUSH
60005: LD_INT 0
60007: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60008: LD_INT 35
60010: PPUSH
60011: CALL_OW 67
// p := p + 1 ;
60015: LD_ADDR_VAR 0 2
60019: PUSH
60020: LD_VAR 0 2
60024: PUSH
60025: LD_INT 1
60027: PLUS
60028: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60029: LD_VAR 0 3
60033: PPUSH
60034: CALL_OW 256
60038: PUSH
60039: LD_INT 1000
60041: LESS
60042: IFFALSE 60056
// SetLives ( un , 1000 ) ;
60044: LD_VAR 0 3
60048: PPUSH
60049: LD_INT 1000
60051: PPUSH
60052: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60056: LD_VAR 0 3
60060: PPUSH
60061: LD_INT 81
60063: PUSH
60064: LD_OWVAR 2
60068: PUSH
60069: EMPTY
60070: LIST
60071: LIST
60072: PUSH
60073: LD_INT 91
60075: PUSH
60076: LD_VAR 0 3
60080: PUSH
60081: LD_INT 30
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PPUSH
60093: CALL_OW 69
60097: PPUSH
60098: LD_VAR 0 3
60102: PPUSH
60103: CALL_OW 74
60107: PPUSH
60108: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60112: LD_VAR 0 2
60116: PUSH
60117: LD_INT 80
60119: GREATER
60120: PUSH
60121: LD_VAR 0 3
60125: PPUSH
60126: CALL_OW 301
60130: OR
60131: IFFALSE 60008
// if un then
60133: LD_VAR 0 3
60137: IFFALSE 60148
// RemoveUnit ( un ) ;
60139: LD_VAR 0 3
60143: PPUSH
60144: CALL_OW 64
// end ;
60148: PPOPN 3
60150: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60151: LD_EXP 84
60155: IFFALSE 60271
60157: GO 60159
60159: DISABLE
60160: LD_INT 0
60162: PPUSH
60163: PPUSH
60164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60165: LD_ADDR_VAR 0 2
60169: PUSH
60170: LD_INT 81
60172: PUSH
60173: LD_OWVAR 2
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 21
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PPUSH
60196: CALL_OW 69
60200: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60201: LD_STRING playComputer()
60203: PPUSH
60204: CALL_OW 559
// if not tmp then
60208: LD_VAR 0 2
60212: NOT
60213: IFFALSE 60217
// exit ;
60215: GO 60271
// for i in tmp do
60217: LD_ADDR_VAR 0 1
60221: PUSH
60222: LD_VAR 0 2
60226: PUSH
60227: FOR_IN
60228: IFFALSE 60269
// for j := 1 to 4 do
60230: LD_ADDR_VAR 0 3
60234: PUSH
60235: DOUBLE
60236: LD_INT 1
60238: DEC
60239: ST_TO_ADDR
60240: LD_INT 4
60242: PUSH
60243: FOR_TO
60244: IFFALSE 60265
// SetSkill ( i , j , 10 ) ;
60246: LD_VAR 0 1
60250: PPUSH
60251: LD_VAR 0 3
60255: PPUSH
60256: LD_INT 10
60258: PPUSH
60259: CALL_OW 237
60263: GO 60243
60265: POP
60266: POP
60267: GO 60227
60269: POP
60270: POP
// end ;
60271: PPOPN 3
60273: END
// every 0 0$1 trigger s30 do var i , tmp ;
60274: LD_EXP 85
60278: IFFALSE 60347
60280: GO 60282
60282: DISABLE
60283: LD_INT 0
60285: PPUSH
60286: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60287: LD_ADDR_VAR 0 2
60291: PUSH
60292: LD_INT 22
60294: PUSH
60295: LD_OWVAR 2
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PPUSH
60304: CALL_OW 69
60308: ST_TO_ADDR
// if not tmp then
60309: LD_VAR 0 2
60313: NOT
60314: IFFALSE 60318
// exit ;
60316: GO 60347
// for i in tmp do
60318: LD_ADDR_VAR 0 1
60322: PUSH
60323: LD_VAR 0 2
60327: PUSH
60328: FOR_IN
60329: IFFALSE 60345
// SetLives ( i , 300 ) ;
60331: LD_VAR 0 1
60335: PPUSH
60336: LD_INT 300
60338: PPUSH
60339: CALL_OW 234
60343: GO 60328
60345: POP
60346: POP
// end ;
60347: PPOPN 2
60349: END
// every 0 0$1 trigger s60 do var i , tmp ;
60350: LD_EXP 86
60354: IFFALSE 60423
60356: GO 60358
60358: DISABLE
60359: LD_INT 0
60361: PPUSH
60362: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60363: LD_ADDR_VAR 0 2
60367: PUSH
60368: LD_INT 22
60370: PUSH
60371: LD_OWVAR 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PPUSH
60380: CALL_OW 69
60384: ST_TO_ADDR
// if not tmp then
60385: LD_VAR 0 2
60389: NOT
60390: IFFALSE 60394
// exit ;
60392: GO 60423
// for i in tmp do
60394: LD_ADDR_VAR 0 1
60398: PUSH
60399: LD_VAR 0 2
60403: PUSH
60404: FOR_IN
60405: IFFALSE 60421
// SetLives ( i , 600 ) ;
60407: LD_VAR 0 1
60411: PPUSH
60412: LD_INT 600
60414: PPUSH
60415: CALL_OW 234
60419: GO 60404
60421: POP
60422: POP
// end ;
60423: PPOPN 2
60425: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60426: LD_INT 0
60428: PPUSH
// case cmd of 301 :
60429: LD_VAR 0 1
60433: PUSH
60434: LD_INT 301
60436: DOUBLE
60437: EQUAL
60438: IFTRUE 60442
60440: GO 60474
60442: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60443: LD_VAR 0 6
60447: PPUSH
60448: LD_VAR 0 7
60452: PPUSH
60453: LD_VAR 0 8
60457: PPUSH
60458: LD_VAR 0 4
60462: PPUSH
60463: LD_VAR 0 5
60467: PPUSH
60468: CALL 61675 0 5
60472: GO 60595
60474: LD_INT 302
60476: DOUBLE
60477: EQUAL
60478: IFTRUE 60482
60480: GO 60519
60482: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60483: LD_VAR 0 6
60487: PPUSH
60488: LD_VAR 0 7
60492: PPUSH
60493: LD_VAR 0 8
60497: PPUSH
60498: LD_VAR 0 9
60502: PPUSH
60503: LD_VAR 0 4
60507: PPUSH
60508: LD_VAR 0 5
60512: PPUSH
60513: CALL 61766 0 6
60517: GO 60595
60519: LD_INT 303
60521: DOUBLE
60522: EQUAL
60523: IFTRUE 60527
60525: GO 60564
60527: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
60528: LD_VAR 0 6
60532: PPUSH
60533: LD_VAR 0 7
60537: PPUSH
60538: LD_VAR 0 8
60542: PPUSH
60543: LD_VAR 0 9
60547: PPUSH
60548: LD_VAR 0 4
60552: PPUSH
60553: LD_VAR 0 5
60557: PPUSH
60558: CALL 60600 0 6
60562: GO 60595
60564: LD_INT 304
60566: DOUBLE
60567: EQUAL
60568: IFTRUE 60572
60570: GO 60594
60572: POP
// hHackTeleport ( unit , x , y ) ; end ;
60573: LD_VAR 0 2
60577: PPUSH
60578: LD_VAR 0 4
60582: PPUSH
60583: LD_VAR 0 5
60587: PPUSH
60588: CALL 62359 0 3
60592: GO 60595
60594: POP
// end ;
60595: LD_VAR 0 12
60599: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
60600: LD_INT 0
60602: PPUSH
60603: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
60604: LD_VAR 0 1
60608: PUSH
60609: LD_INT 1
60611: LESS
60612: PUSH
60613: LD_VAR 0 1
60617: PUSH
60618: LD_INT 3
60620: GREATER
60621: OR
60622: PUSH
60623: LD_VAR 0 5
60627: PPUSH
60628: LD_VAR 0 6
60632: PPUSH
60633: CALL_OW 428
60637: OR
60638: IFFALSE 60642
// exit ;
60640: GO 61362
// uc_side := your_side ;
60642: LD_ADDR_OWVAR 20
60646: PUSH
60647: LD_OWVAR 2
60651: ST_TO_ADDR
// uc_nation := nation ;
60652: LD_ADDR_OWVAR 21
60656: PUSH
60657: LD_VAR 0 1
60661: ST_TO_ADDR
// bc_level = 1 ;
60662: LD_ADDR_OWVAR 43
60666: PUSH
60667: LD_INT 1
60669: ST_TO_ADDR
// case btype of 1 :
60670: LD_VAR 0 2
60674: PUSH
60675: LD_INT 1
60677: DOUBLE
60678: EQUAL
60679: IFTRUE 60683
60681: GO 60694
60683: POP
// bc_type := b_depot ; 2 :
60684: LD_ADDR_OWVAR 42
60688: PUSH
60689: LD_INT 0
60691: ST_TO_ADDR
60692: GO 61306
60694: LD_INT 2
60696: DOUBLE
60697: EQUAL
60698: IFTRUE 60702
60700: GO 60713
60702: POP
// bc_type := b_warehouse ; 3 :
60703: LD_ADDR_OWVAR 42
60707: PUSH
60708: LD_INT 1
60710: ST_TO_ADDR
60711: GO 61306
60713: LD_INT 3
60715: DOUBLE
60716: EQUAL
60717: IFTRUE 60721
60719: GO 60732
60721: POP
// bc_type := b_lab ; 4 .. 9 :
60722: LD_ADDR_OWVAR 42
60726: PUSH
60727: LD_INT 6
60729: ST_TO_ADDR
60730: GO 61306
60732: LD_INT 4
60734: DOUBLE
60735: GREATEREQUAL
60736: IFFALSE 60744
60738: LD_INT 9
60740: DOUBLE
60741: LESSEQUAL
60742: IFTRUE 60746
60744: GO 60798
60746: POP
// begin bc_type := b_lab_half ;
60747: LD_ADDR_OWVAR 42
60751: PUSH
60752: LD_INT 7
60754: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
60755: LD_ADDR_OWVAR 44
60759: PUSH
60760: LD_INT 10
60762: PUSH
60763: LD_INT 11
60765: PUSH
60766: LD_INT 12
60768: PUSH
60769: LD_INT 15
60771: PUSH
60772: LD_INT 14
60774: PUSH
60775: LD_INT 13
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: PUSH
60786: LD_VAR 0 2
60790: PUSH
60791: LD_INT 3
60793: MINUS
60794: ARRAY
60795: ST_TO_ADDR
// end ; 10 .. 13 :
60796: GO 61306
60798: LD_INT 10
60800: DOUBLE
60801: GREATEREQUAL
60802: IFFALSE 60810
60804: LD_INT 13
60806: DOUBLE
60807: LESSEQUAL
60808: IFTRUE 60812
60810: GO 60889
60812: POP
// begin bc_type := b_lab_full ;
60813: LD_ADDR_OWVAR 42
60817: PUSH
60818: LD_INT 8
60820: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
60821: LD_ADDR_OWVAR 44
60825: PUSH
60826: LD_INT 10
60828: PUSH
60829: LD_INT 12
60831: PUSH
60832: LD_INT 14
60834: PUSH
60835: LD_INT 13
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: PUSH
60844: LD_VAR 0 2
60848: PUSH
60849: LD_INT 9
60851: MINUS
60852: ARRAY
60853: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
60854: LD_ADDR_OWVAR 45
60858: PUSH
60859: LD_INT 11
60861: PUSH
60862: LD_INT 15
60864: PUSH
60865: LD_INT 12
60867: PUSH
60868: LD_INT 15
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: PUSH
60877: LD_VAR 0 2
60881: PUSH
60882: LD_INT 9
60884: MINUS
60885: ARRAY
60886: ST_TO_ADDR
// end ; 14 :
60887: GO 61306
60889: LD_INT 14
60891: DOUBLE
60892: EQUAL
60893: IFTRUE 60897
60895: GO 60908
60897: POP
// bc_type := b_workshop ; 15 :
60898: LD_ADDR_OWVAR 42
60902: PUSH
60903: LD_INT 2
60905: ST_TO_ADDR
60906: GO 61306
60908: LD_INT 15
60910: DOUBLE
60911: EQUAL
60912: IFTRUE 60916
60914: GO 60927
60916: POP
// bc_type := b_factory ; 16 :
60917: LD_ADDR_OWVAR 42
60921: PUSH
60922: LD_INT 3
60924: ST_TO_ADDR
60925: GO 61306
60927: LD_INT 16
60929: DOUBLE
60930: EQUAL
60931: IFTRUE 60935
60933: GO 60946
60935: POP
// bc_type := b_ext_gun ; 17 :
60936: LD_ADDR_OWVAR 42
60940: PUSH
60941: LD_INT 17
60943: ST_TO_ADDR
60944: GO 61306
60946: LD_INT 17
60948: DOUBLE
60949: EQUAL
60950: IFTRUE 60954
60952: GO 60982
60954: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
60955: LD_ADDR_OWVAR 42
60959: PUSH
60960: LD_INT 19
60962: PUSH
60963: LD_INT 23
60965: PUSH
60966: LD_INT 19
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: LIST
60973: PUSH
60974: LD_VAR 0 1
60978: ARRAY
60979: ST_TO_ADDR
60980: GO 61306
60982: LD_INT 18
60984: DOUBLE
60985: EQUAL
60986: IFTRUE 60990
60988: GO 61001
60990: POP
// bc_type := b_ext_radar ; 19 :
60991: LD_ADDR_OWVAR 42
60995: PUSH
60996: LD_INT 20
60998: ST_TO_ADDR
60999: GO 61306
61001: LD_INT 19
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61009
61007: GO 61020
61009: POP
// bc_type := b_ext_radio ; 20 :
61010: LD_ADDR_OWVAR 42
61014: PUSH
61015: LD_INT 22
61017: ST_TO_ADDR
61018: GO 61306
61020: LD_INT 20
61022: DOUBLE
61023: EQUAL
61024: IFTRUE 61028
61026: GO 61039
61028: POP
// bc_type := b_ext_siberium ; 21 :
61029: LD_ADDR_OWVAR 42
61033: PUSH
61034: LD_INT 21
61036: ST_TO_ADDR
61037: GO 61306
61039: LD_INT 21
61041: DOUBLE
61042: EQUAL
61043: IFTRUE 61047
61045: GO 61058
61047: POP
// bc_type := b_ext_computer ; 22 :
61048: LD_ADDR_OWVAR 42
61052: PUSH
61053: LD_INT 24
61055: ST_TO_ADDR
61056: GO 61306
61058: LD_INT 22
61060: DOUBLE
61061: EQUAL
61062: IFTRUE 61066
61064: GO 61077
61066: POP
// bc_type := b_ext_track ; 23 :
61067: LD_ADDR_OWVAR 42
61071: PUSH
61072: LD_INT 16
61074: ST_TO_ADDR
61075: GO 61306
61077: LD_INT 23
61079: DOUBLE
61080: EQUAL
61081: IFTRUE 61085
61083: GO 61096
61085: POP
// bc_type := b_ext_laser ; 24 :
61086: LD_ADDR_OWVAR 42
61090: PUSH
61091: LD_INT 25
61093: ST_TO_ADDR
61094: GO 61306
61096: LD_INT 24
61098: DOUBLE
61099: EQUAL
61100: IFTRUE 61104
61102: GO 61115
61104: POP
// bc_type := b_control_tower ; 25 :
61105: LD_ADDR_OWVAR 42
61109: PUSH
61110: LD_INT 36
61112: ST_TO_ADDR
61113: GO 61306
61115: LD_INT 25
61117: DOUBLE
61118: EQUAL
61119: IFTRUE 61123
61121: GO 61134
61123: POP
// bc_type := b_breastwork ; 26 :
61124: LD_ADDR_OWVAR 42
61128: PUSH
61129: LD_INT 31
61131: ST_TO_ADDR
61132: GO 61306
61134: LD_INT 26
61136: DOUBLE
61137: EQUAL
61138: IFTRUE 61142
61140: GO 61153
61142: POP
// bc_type := b_bunker ; 27 :
61143: LD_ADDR_OWVAR 42
61147: PUSH
61148: LD_INT 32
61150: ST_TO_ADDR
61151: GO 61306
61153: LD_INT 27
61155: DOUBLE
61156: EQUAL
61157: IFTRUE 61161
61159: GO 61172
61161: POP
// bc_type := b_turret ; 28 :
61162: LD_ADDR_OWVAR 42
61166: PUSH
61167: LD_INT 33
61169: ST_TO_ADDR
61170: GO 61306
61172: LD_INT 28
61174: DOUBLE
61175: EQUAL
61176: IFTRUE 61180
61178: GO 61191
61180: POP
// bc_type := b_armoury ; 29 :
61181: LD_ADDR_OWVAR 42
61185: PUSH
61186: LD_INT 4
61188: ST_TO_ADDR
61189: GO 61306
61191: LD_INT 29
61193: DOUBLE
61194: EQUAL
61195: IFTRUE 61199
61197: GO 61210
61199: POP
// bc_type := b_barracks ; 30 :
61200: LD_ADDR_OWVAR 42
61204: PUSH
61205: LD_INT 5
61207: ST_TO_ADDR
61208: GO 61306
61210: LD_INT 30
61212: DOUBLE
61213: EQUAL
61214: IFTRUE 61218
61216: GO 61229
61218: POP
// bc_type := b_solar_power ; 31 :
61219: LD_ADDR_OWVAR 42
61223: PUSH
61224: LD_INT 27
61226: ST_TO_ADDR
61227: GO 61306
61229: LD_INT 31
61231: DOUBLE
61232: EQUAL
61233: IFTRUE 61237
61235: GO 61248
61237: POP
// bc_type := b_oil_power ; 32 :
61238: LD_ADDR_OWVAR 42
61242: PUSH
61243: LD_INT 26
61245: ST_TO_ADDR
61246: GO 61306
61248: LD_INT 32
61250: DOUBLE
61251: EQUAL
61252: IFTRUE 61256
61254: GO 61267
61256: POP
// bc_type := b_siberite_power ; 33 :
61257: LD_ADDR_OWVAR 42
61261: PUSH
61262: LD_INT 28
61264: ST_TO_ADDR
61265: GO 61306
61267: LD_INT 33
61269: DOUBLE
61270: EQUAL
61271: IFTRUE 61275
61273: GO 61286
61275: POP
// bc_type := b_oil_mine ; 34 :
61276: LD_ADDR_OWVAR 42
61280: PUSH
61281: LD_INT 29
61283: ST_TO_ADDR
61284: GO 61306
61286: LD_INT 34
61288: DOUBLE
61289: EQUAL
61290: IFTRUE 61294
61292: GO 61305
61294: POP
// bc_type := b_siberite_mine ; end ;
61295: LD_ADDR_OWVAR 42
61299: PUSH
61300: LD_INT 30
61302: ST_TO_ADDR
61303: GO 61306
61305: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61306: LD_ADDR_VAR 0 8
61310: PUSH
61311: LD_VAR 0 5
61315: PPUSH
61316: LD_VAR 0 6
61320: PPUSH
61321: LD_VAR 0 3
61325: PPUSH
61326: CALL_OW 47
61330: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61331: LD_OWVAR 42
61335: PUSH
61336: LD_INT 32
61338: PUSH
61339: LD_INT 33
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: IN
61346: IFFALSE 61362
// PlaceWeaponTurret ( b , weapon ) ;
61348: LD_VAR 0 8
61352: PPUSH
61353: LD_VAR 0 4
61357: PPUSH
61358: CALL_OW 431
// end ;
61362: LD_VAR 0 7
61366: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61367: LD_INT 0
61369: PPUSH
61370: PPUSH
61371: PPUSH
61372: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61373: LD_ADDR_VAR 0 4
61377: PUSH
61378: LD_INT 22
61380: PUSH
61381: LD_OWVAR 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 30
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 30
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PPUSH
61422: CALL_OW 69
61426: ST_TO_ADDR
// if not tmp then
61427: LD_VAR 0 4
61431: NOT
61432: IFFALSE 61436
// exit ;
61434: GO 61495
// for i in tmp do
61436: LD_ADDR_VAR 0 2
61440: PUSH
61441: LD_VAR 0 4
61445: PUSH
61446: FOR_IN
61447: IFFALSE 61493
// for j = 1 to 3 do
61449: LD_ADDR_VAR 0 3
61453: PUSH
61454: DOUBLE
61455: LD_INT 1
61457: DEC
61458: ST_TO_ADDR
61459: LD_INT 3
61461: PUSH
61462: FOR_TO
61463: IFFALSE 61489
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61465: LD_VAR 0 2
61469: PPUSH
61470: CALL_OW 274
61474: PPUSH
61475: LD_VAR 0 3
61479: PPUSH
61480: LD_INT 99999
61482: PPUSH
61483: CALL_OW 277
61487: GO 61462
61489: POP
61490: POP
61491: GO 61446
61493: POP
61494: POP
// end ;
61495: LD_VAR 0 1
61499: RET
// export function hHackSetLevel10 ; var i , j ; begin
61500: LD_INT 0
61502: PPUSH
61503: PPUSH
61504: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61505: LD_ADDR_VAR 0 2
61509: PUSH
61510: LD_INT 21
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PPUSH
61520: CALL_OW 69
61524: PUSH
61525: FOR_IN
61526: IFFALSE 61578
// if IsSelected ( i ) then
61528: LD_VAR 0 2
61532: PPUSH
61533: CALL_OW 306
61537: IFFALSE 61576
// begin for j := 1 to 4 do
61539: LD_ADDR_VAR 0 3
61543: PUSH
61544: DOUBLE
61545: LD_INT 1
61547: DEC
61548: ST_TO_ADDR
61549: LD_INT 4
61551: PUSH
61552: FOR_TO
61553: IFFALSE 61574
// SetSkill ( i , j , 10 ) ;
61555: LD_VAR 0 2
61559: PPUSH
61560: LD_VAR 0 3
61564: PPUSH
61565: LD_INT 10
61567: PPUSH
61568: CALL_OW 237
61572: GO 61552
61574: POP
61575: POP
// end ;
61576: GO 61525
61578: POP
61579: POP
// end ;
61580: LD_VAR 0 1
61584: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
61585: LD_INT 0
61587: PPUSH
61588: PPUSH
61589: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
61590: LD_ADDR_VAR 0 2
61594: PUSH
61595: LD_INT 22
61597: PUSH
61598: LD_OWVAR 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 21
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PPUSH
61621: CALL_OW 69
61625: PUSH
61626: FOR_IN
61627: IFFALSE 61668
// begin for j := 1 to 4 do
61629: LD_ADDR_VAR 0 3
61633: PUSH
61634: DOUBLE
61635: LD_INT 1
61637: DEC
61638: ST_TO_ADDR
61639: LD_INT 4
61641: PUSH
61642: FOR_TO
61643: IFFALSE 61664
// SetSkill ( i , j , 10 ) ;
61645: LD_VAR 0 2
61649: PPUSH
61650: LD_VAR 0 3
61654: PPUSH
61655: LD_INT 10
61657: PPUSH
61658: CALL_OW 237
61662: GO 61642
61664: POP
61665: POP
// end ;
61666: GO 61626
61668: POP
61669: POP
// end ;
61670: LD_VAR 0 1
61674: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
61675: LD_INT 0
61677: PPUSH
// uc_side := your_side ;
61678: LD_ADDR_OWVAR 20
61682: PUSH
61683: LD_OWVAR 2
61687: ST_TO_ADDR
// uc_nation := nation ;
61688: LD_ADDR_OWVAR 21
61692: PUSH
61693: LD_VAR 0 1
61697: ST_TO_ADDR
// InitHc ;
61698: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
61702: LD_INT 0
61704: PPUSH
61705: LD_VAR 0 2
61709: PPUSH
61710: LD_VAR 0 3
61714: PPUSH
61715: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
61719: LD_VAR 0 4
61723: PPUSH
61724: LD_VAR 0 5
61728: PPUSH
61729: CALL_OW 428
61733: PUSH
61734: LD_INT 0
61736: EQUAL
61737: IFFALSE 61761
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
61739: CALL_OW 44
61743: PPUSH
61744: LD_VAR 0 4
61748: PPUSH
61749: LD_VAR 0 5
61753: PPUSH
61754: LD_INT 1
61756: PPUSH
61757: CALL_OW 48
// end ;
61761: LD_VAR 0 6
61765: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
61766: LD_INT 0
61768: PPUSH
61769: PPUSH
// uc_side := your_side ;
61770: LD_ADDR_OWVAR 20
61774: PUSH
61775: LD_OWVAR 2
61779: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
61780: LD_VAR 0 1
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: LD_INT 3
61793: PUSH
61794: LD_INT 4
61796: PUSH
61797: LD_INT 5
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: IN
61807: IFFALSE 61819
// uc_nation := nation_american else
61809: LD_ADDR_OWVAR 21
61813: PUSH
61814: LD_INT 1
61816: ST_TO_ADDR
61817: GO 61862
// if chassis in [ 11 , 12 , 13 , 14 ] then
61819: LD_VAR 0 1
61823: PUSH
61824: LD_INT 11
61826: PUSH
61827: LD_INT 12
61829: PUSH
61830: LD_INT 13
61832: PUSH
61833: LD_INT 14
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: IN
61842: IFFALSE 61854
// uc_nation := nation_arabian else
61844: LD_ADDR_OWVAR 21
61848: PUSH
61849: LD_INT 2
61851: ST_TO_ADDR
61852: GO 61862
// uc_nation := nation_russian ;
61854: LD_ADDR_OWVAR 21
61858: PUSH
61859: LD_INT 3
61861: ST_TO_ADDR
// vc_chassis := chassis ;
61862: LD_ADDR_OWVAR 37
61866: PUSH
61867: LD_VAR 0 1
61871: ST_TO_ADDR
// vc_engine := engine ;
61872: LD_ADDR_OWVAR 39
61876: PUSH
61877: LD_VAR 0 2
61881: ST_TO_ADDR
// vc_control := control ;
61882: LD_ADDR_OWVAR 38
61886: PUSH
61887: LD_VAR 0 3
61891: ST_TO_ADDR
// vc_weapon := weapon ;
61892: LD_ADDR_OWVAR 40
61896: PUSH
61897: LD_VAR 0 4
61901: ST_TO_ADDR
// un := CreateVehicle ;
61902: LD_ADDR_VAR 0 8
61906: PUSH
61907: CALL_OW 45
61911: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
61912: LD_VAR 0 8
61916: PPUSH
61917: LD_INT 0
61919: PPUSH
61920: LD_INT 5
61922: PPUSH
61923: CALL_OW 12
61927: PPUSH
61928: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
61932: LD_VAR 0 8
61936: PPUSH
61937: LD_VAR 0 5
61941: PPUSH
61942: LD_VAR 0 6
61946: PPUSH
61947: LD_INT 1
61949: PPUSH
61950: CALL_OW 48
// end ;
61954: LD_VAR 0 7
61958: RET
// export hInvincible ; every 1 do
61959: GO 61961
61961: DISABLE
// hInvincible := [ ] ;
61962: LD_ADDR_EXP 87
61966: PUSH
61967: EMPTY
61968: ST_TO_ADDR
61969: END
// every 10 do var i ;
61970: GO 61972
61972: DISABLE
61973: LD_INT 0
61975: PPUSH
// begin enable ;
61976: ENABLE
// if not hInvincible then
61977: LD_EXP 87
61981: NOT
61982: IFFALSE 61986
// exit ;
61984: GO 62030
// for i in hInvincible do
61986: LD_ADDR_VAR 0 1
61990: PUSH
61991: LD_EXP 87
61995: PUSH
61996: FOR_IN
61997: IFFALSE 62028
// if GetLives ( i ) < 1000 then
61999: LD_VAR 0 1
62003: PPUSH
62004: CALL_OW 256
62008: PUSH
62009: LD_INT 1000
62011: LESS
62012: IFFALSE 62026
// SetLives ( i , 1000 ) ;
62014: LD_VAR 0 1
62018: PPUSH
62019: LD_INT 1000
62021: PPUSH
62022: CALL_OW 234
62026: GO 61996
62028: POP
62029: POP
// end ;
62030: PPOPN 1
62032: END
// export function hHackInvincible ; var i ; begin
62033: LD_INT 0
62035: PPUSH
62036: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62037: LD_ADDR_VAR 0 2
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 21
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 21
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: LIST
62069: PPUSH
62070: CALL_OW 69
62074: PUSH
62075: FOR_IN
62076: IFFALSE 62137
// if IsSelected ( i ) then
62078: LD_VAR 0 2
62082: PPUSH
62083: CALL_OW 306
62087: IFFALSE 62135
// begin if i in hInvincible then
62089: LD_VAR 0 2
62093: PUSH
62094: LD_EXP 87
62098: IN
62099: IFFALSE 62119
// hInvincible := hInvincible diff i else
62101: LD_ADDR_EXP 87
62105: PUSH
62106: LD_EXP 87
62110: PUSH
62111: LD_VAR 0 2
62115: DIFF
62116: ST_TO_ADDR
62117: GO 62135
// hInvincible := hInvincible union i ;
62119: LD_ADDR_EXP 87
62123: PUSH
62124: LD_EXP 87
62128: PUSH
62129: LD_VAR 0 2
62133: UNION
62134: ST_TO_ADDR
// end ;
62135: GO 62075
62137: POP
62138: POP
// end ;
62139: LD_VAR 0 1
62143: RET
// export function hHackInvisible ; var i , j ; begin
62144: LD_INT 0
62146: PPUSH
62147: PPUSH
62148: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62149: LD_ADDR_VAR 0 2
62153: PUSH
62154: LD_INT 21
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PPUSH
62164: CALL_OW 69
62168: PUSH
62169: FOR_IN
62170: IFFALSE 62194
// if IsSelected ( i ) then
62172: LD_VAR 0 2
62176: PPUSH
62177: CALL_OW 306
62181: IFFALSE 62192
// ComForceInvisible ( i ) ;
62183: LD_VAR 0 2
62187: PPUSH
62188: CALL_OW 496
62192: GO 62169
62194: POP
62195: POP
// end ;
62196: LD_VAR 0 1
62200: RET
// export function hHackChangeYourSide ; begin
62201: LD_INT 0
62203: PPUSH
// if your_side = 8 then
62204: LD_OWVAR 2
62208: PUSH
62209: LD_INT 8
62211: EQUAL
62212: IFFALSE 62224
// your_side := 0 else
62214: LD_ADDR_OWVAR 2
62218: PUSH
62219: LD_INT 0
62221: ST_TO_ADDR
62222: GO 62238
// your_side := your_side + 1 ;
62224: LD_ADDR_OWVAR 2
62228: PUSH
62229: LD_OWVAR 2
62233: PUSH
62234: LD_INT 1
62236: PLUS
62237: ST_TO_ADDR
// end ;
62238: LD_VAR 0 1
62242: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62243: LD_INT 0
62245: PPUSH
62246: PPUSH
62247: PPUSH
// for i in all_units do
62248: LD_ADDR_VAR 0 2
62252: PUSH
62253: LD_OWVAR 3
62257: PUSH
62258: FOR_IN
62259: IFFALSE 62337
// if IsSelected ( i ) then
62261: LD_VAR 0 2
62265: PPUSH
62266: CALL_OW 306
62270: IFFALSE 62335
// begin j := GetSide ( i ) ;
62272: LD_ADDR_VAR 0 3
62276: PUSH
62277: LD_VAR 0 2
62281: PPUSH
62282: CALL_OW 255
62286: ST_TO_ADDR
// if j = 8 then
62287: LD_VAR 0 3
62291: PUSH
62292: LD_INT 8
62294: EQUAL
62295: IFFALSE 62307
// j := 0 else
62297: LD_ADDR_VAR 0 3
62301: PUSH
62302: LD_INT 0
62304: ST_TO_ADDR
62305: GO 62321
// j := j + 1 ;
62307: LD_ADDR_VAR 0 3
62311: PUSH
62312: LD_VAR 0 3
62316: PUSH
62317: LD_INT 1
62319: PLUS
62320: ST_TO_ADDR
// SetSide ( i , j ) ;
62321: LD_VAR 0 2
62325: PPUSH
62326: LD_VAR 0 3
62330: PPUSH
62331: CALL_OW 235
// end ;
62335: GO 62258
62337: POP
62338: POP
// end ;
62339: LD_VAR 0 1
62343: RET
// export function hHackFog ; begin
62344: LD_INT 0
62346: PPUSH
// FogOff ( true ) ;
62347: LD_INT 1
62349: PPUSH
62350: CALL_OW 344
// end ;
62354: LD_VAR 0 1
62358: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62359: LD_INT 0
62361: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62362: LD_VAR 0 1
62366: PPUSH
62367: LD_VAR 0 2
62371: PPUSH
62372: LD_VAR 0 3
62376: PPUSH
62377: LD_INT 1
62379: PPUSH
62380: LD_INT 1
62382: PPUSH
62383: CALL_OW 483
// CenterOnXY ( x , y ) ;
62387: LD_VAR 0 2
62391: PPUSH
62392: LD_VAR 0 3
62396: PPUSH
62397: CALL_OW 84
// end ;
62401: LD_VAR 0 4
62405: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62406: LD_INT 0
62408: PPUSH
62409: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62410: LD_VAR 0 1
62414: NOT
62415: PUSH
62416: LD_VAR 0 2
62420: PPUSH
62421: LD_VAR 0 3
62425: PPUSH
62426: CALL_OW 488
62430: NOT
62431: OR
62432: PUSH
62433: LD_VAR 0 1
62437: PPUSH
62438: CALL_OW 266
62442: PUSH
62443: LD_INT 3
62445: NONEQUAL
62446: PUSH
62447: LD_VAR 0 1
62451: PPUSH
62452: CALL_OW 247
62456: PUSH
62457: LD_INT 1
62459: EQUAL
62460: NOT
62461: AND
62462: OR
62463: IFFALSE 62467
// exit ;
62465: GO 62616
// if GetType ( factory ) = unit_human then
62467: LD_VAR 0 1
62471: PPUSH
62472: CALL_OW 247
62476: PUSH
62477: LD_INT 1
62479: EQUAL
62480: IFFALSE 62497
// factory := IsInUnit ( factory ) ;
62482: LD_ADDR_VAR 0 1
62486: PUSH
62487: LD_VAR 0 1
62491: PPUSH
62492: CALL_OW 310
62496: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62497: LD_VAR 0 1
62501: PPUSH
62502: CALL_OW 266
62506: PUSH
62507: LD_INT 3
62509: NONEQUAL
62510: IFFALSE 62514
// exit ;
62512: GO 62616
// if HexInfo ( x , y ) = factory then
62514: LD_VAR 0 2
62518: PPUSH
62519: LD_VAR 0 3
62523: PPUSH
62524: CALL_OW 428
62528: PUSH
62529: LD_VAR 0 1
62533: EQUAL
62534: IFFALSE 62561
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
62536: LD_ADDR_EXP 88
62540: PUSH
62541: LD_EXP 88
62545: PPUSH
62546: LD_VAR 0 1
62550: PPUSH
62551: LD_INT 0
62553: PPUSH
62554: CALL_OW 1
62558: ST_TO_ADDR
62559: GO 62612
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
62561: LD_ADDR_EXP 88
62565: PUSH
62566: LD_EXP 88
62570: PPUSH
62571: LD_VAR 0 1
62575: PPUSH
62576: LD_VAR 0 1
62580: PPUSH
62581: CALL_OW 255
62585: PUSH
62586: LD_VAR 0 1
62590: PUSH
62591: LD_VAR 0 2
62595: PUSH
62596: LD_VAR 0 3
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: PPUSH
62607: CALL_OW 1
62611: ST_TO_ADDR
// UpdateFactoryWaypoints ;
62612: CALL 62621 0 0
// end ;
62616: LD_VAR 0 4
62620: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
62621: LD_INT 0
62623: PPUSH
62624: PPUSH
62625: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
62626: LD_STRING resetFactoryWaypoint();
62628: PPUSH
62629: CALL_OW 559
// if factoryWaypoints then
62633: LD_EXP 88
62637: IFFALSE 62763
// begin list := PrepareArray ( factoryWaypoints ) ;
62639: LD_ADDR_VAR 0 3
62643: PUSH
62644: LD_EXP 88
62648: PPUSH
62649: CALL 47620 0 1
62653: ST_TO_ADDR
// for i := 1 to list do
62654: LD_ADDR_VAR 0 2
62658: PUSH
62659: DOUBLE
62660: LD_INT 1
62662: DEC
62663: ST_TO_ADDR
62664: LD_VAR 0 3
62668: PUSH
62669: FOR_TO
62670: IFFALSE 62761
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62672: LD_STRING setFactoryWaypointXY(
62674: PUSH
62675: LD_VAR 0 3
62679: PUSH
62680: LD_VAR 0 2
62684: ARRAY
62685: PUSH
62686: LD_INT 1
62688: ARRAY
62689: STR
62690: PUSH
62691: LD_STRING ,
62693: STR
62694: PUSH
62695: LD_VAR 0 3
62699: PUSH
62700: LD_VAR 0 2
62704: ARRAY
62705: PUSH
62706: LD_INT 2
62708: ARRAY
62709: STR
62710: PUSH
62711: LD_STRING ,
62713: STR
62714: PUSH
62715: LD_VAR 0 3
62719: PUSH
62720: LD_VAR 0 2
62724: ARRAY
62725: PUSH
62726: LD_INT 3
62728: ARRAY
62729: STR
62730: PUSH
62731: LD_STRING ,
62733: STR
62734: PUSH
62735: LD_VAR 0 3
62739: PUSH
62740: LD_VAR 0 2
62744: ARRAY
62745: PUSH
62746: LD_INT 4
62748: ARRAY
62749: STR
62750: PUSH
62751: LD_STRING )
62753: STR
62754: PPUSH
62755: CALL_OW 559
62759: GO 62669
62761: POP
62762: POP
// end ; end ;
62763: LD_VAR 0 1
62767: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
62768: LD_INT 0
62770: PPUSH
// if HexInfo ( x , y ) = warehouse then
62771: LD_VAR 0 2
62775: PPUSH
62776: LD_VAR 0 3
62780: PPUSH
62781: CALL_OW 428
62785: PUSH
62786: LD_VAR 0 1
62790: EQUAL
62791: IFFALSE 62818
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
62793: LD_ADDR_EXP 89
62797: PUSH
62798: LD_EXP 89
62802: PPUSH
62803: LD_VAR 0 1
62807: PPUSH
62808: LD_INT 0
62810: PPUSH
62811: CALL_OW 1
62815: ST_TO_ADDR
62816: GO 62869
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
62818: LD_ADDR_EXP 89
62822: PUSH
62823: LD_EXP 89
62827: PPUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: CALL_OW 255
62842: PUSH
62843: LD_VAR 0 1
62847: PUSH
62848: LD_VAR 0 2
62852: PUSH
62853: LD_VAR 0 3
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: PPUSH
62864: CALL_OW 1
62868: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
62869: CALL 62878 0 0
// end ;
62873: LD_VAR 0 4
62877: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
62878: LD_INT 0
62880: PPUSH
62881: PPUSH
62882: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
62883: LD_STRING resetWarehouseGatheringPoints();
62885: PPUSH
62886: CALL_OW 559
// if warehouseGatheringPoints then
62890: LD_EXP 89
62894: IFFALSE 63020
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
62896: LD_ADDR_VAR 0 3
62900: PUSH
62901: LD_EXP 89
62905: PPUSH
62906: CALL 47620 0 1
62910: ST_TO_ADDR
// for i := 1 to list do
62911: LD_ADDR_VAR 0 2
62915: PUSH
62916: DOUBLE
62917: LD_INT 1
62919: DEC
62920: ST_TO_ADDR
62921: LD_VAR 0 3
62925: PUSH
62926: FOR_TO
62927: IFFALSE 63018
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
62929: LD_STRING setWarehouseGatheringPointXY(
62931: PUSH
62932: LD_VAR 0 3
62936: PUSH
62937: LD_VAR 0 2
62941: ARRAY
62942: PUSH
62943: LD_INT 1
62945: ARRAY
62946: STR
62947: PUSH
62948: LD_STRING ,
62950: STR
62951: PUSH
62952: LD_VAR 0 3
62956: PUSH
62957: LD_VAR 0 2
62961: ARRAY
62962: PUSH
62963: LD_INT 2
62965: ARRAY
62966: STR
62967: PUSH
62968: LD_STRING ,
62970: STR
62971: PUSH
62972: LD_VAR 0 3
62976: PUSH
62977: LD_VAR 0 2
62981: ARRAY
62982: PUSH
62983: LD_INT 3
62985: ARRAY
62986: STR
62987: PUSH
62988: LD_STRING ,
62990: STR
62991: PUSH
62992: LD_VAR 0 3
62996: PUSH
62997: LD_VAR 0 2
63001: ARRAY
63002: PUSH
63003: LD_INT 4
63005: ARRAY
63006: STR
63007: PUSH
63008: LD_STRING )
63010: STR
63011: PPUSH
63012: CALL_OW 559
63016: GO 62926
63018: POP
63019: POP
// end ; end ;
63020: LD_VAR 0 1
63024: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63025: LD_EXP 89
63029: IFFALSE 63714
63031: GO 63033
63033: DISABLE
63034: LD_INT 0
63036: PPUSH
63037: PPUSH
63038: PPUSH
63039: PPUSH
63040: PPUSH
63041: PPUSH
63042: PPUSH
63043: PPUSH
63044: PPUSH
// begin enable ;
63045: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63046: LD_ADDR_VAR 0 3
63050: PUSH
63051: LD_EXP 89
63055: PPUSH
63056: CALL 47620 0 1
63060: ST_TO_ADDR
// if not list then
63061: LD_VAR 0 3
63065: NOT
63066: IFFALSE 63070
// exit ;
63068: GO 63714
// for i := 1 to list do
63070: LD_ADDR_VAR 0 1
63074: PUSH
63075: DOUBLE
63076: LD_INT 1
63078: DEC
63079: ST_TO_ADDR
63080: LD_VAR 0 3
63084: PUSH
63085: FOR_TO
63086: IFFALSE 63712
// begin depot := list [ i ] [ 2 ] ;
63088: LD_ADDR_VAR 0 8
63092: PUSH
63093: LD_VAR 0 3
63097: PUSH
63098: LD_VAR 0 1
63102: ARRAY
63103: PUSH
63104: LD_INT 2
63106: ARRAY
63107: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63108: LD_ADDR_VAR 0 5
63112: PUSH
63113: LD_VAR 0 3
63117: PUSH
63118: LD_VAR 0 1
63122: ARRAY
63123: PUSH
63124: LD_INT 1
63126: ARRAY
63127: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63128: LD_VAR 0 8
63132: PPUSH
63133: CALL_OW 301
63137: PUSH
63138: LD_VAR 0 5
63142: PUSH
63143: LD_VAR 0 8
63147: PPUSH
63148: CALL_OW 255
63152: NONEQUAL
63153: OR
63154: IFFALSE 63183
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63156: LD_ADDR_EXP 89
63160: PUSH
63161: LD_EXP 89
63165: PPUSH
63166: LD_VAR 0 8
63170: PPUSH
63171: LD_INT 0
63173: PPUSH
63174: CALL_OW 1
63178: ST_TO_ADDR
// exit ;
63179: POP
63180: POP
63181: GO 63714
// end ; x := list [ i ] [ 3 ] ;
63183: LD_ADDR_VAR 0 6
63187: PUSH
63188: LD_VAR 0 3
63192: PUSH
63193: LD_VAR 0 1
63197: ARRAY
63198: PUSH
63199: LD_INT 3
63201: ARRAY
63202: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63203: LD_ADDR_VAR 0 7
63207: PUSH
63208: LD_VAR 0 3
63212: PUSH
63213: LD_VAR 0 1
63217: ARRAY
63218: PUSH
63219: LD_INT 4
63221: ARRAY
63222: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63223: LD_ADDR_VAR 0 9
63227: PUSH
63228: LD_VAR 0 6
63232: PPUSH
63233: LD_VAR 0 7
63237: PPUSH
63238: LD_INT 16
63240: PPUSH
63241: CALL 46208 0 3
63245: ST_TO_ADDR
// if not cratesNearbyPoint then
63246: LD_VAR 0 9
63250: NOT
63251: IFFALSE 63257
// exit ;
63253: POP
63254: POP
63255: GO 63714
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63257: LD_ADDR_VAR 0 4
63261: PUSH
63262: LD_INT 22
63264: PUSH
63265: LD_VAR 0 5
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 3
63276: PUSH
63277: LD_INT 60
63279: PUSH
63280: EMPTY
63281: LIST
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 91
63289: PUSH
63290: LD_VAR 0 8
63294: PUSH
63295: LD_INT 6
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 2
63305: PUSH
63306: LD_INT 25
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 25
63318: PUSH
63319: LD_INT 16
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: LIST
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: PPUSH
63337: CALL_OW 69
63341: PUSH
63342: LD_VAR 0 8
63346: PPUSH
63347: CALL_OW 313
63351: PPUSH
63352: LD_INT 3
63354: PUSH
63355: LD_INT 60
63357: PUSH
63358: EMPTY
63359: LIST
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 2
63367: PUSH
63368: LD_INT 25
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 25
63380: PUSH
63381: LD_INT 16
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: PPUSH
63397: CALL_OW 72
63401: UNION
63402: ST_TO_ADDR
// if tmp then
63403: LD_VAR 0 4
63407: IFFALSE 63487
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63409: LD_ADDR_VAR 0 4
63413: PUSH
63414: LD_VAR 0 4
63418: PPUSH
63419: LD_INT 3
63421: PPUSH
63422: CALL 44177 0 2
63426: ST_TO_ADDR
// for j in tmp do
63427: LD_ADDR_VAR 0 2
63431: PUSH
63432: LD_VAR 0 4
63436: PUSH
63437: FOR_IN
63438: IFFALSE 63481
// begin if IsInUnit ( j ) then
63440: LD_VAR 0 2
63444: PPUSH
63445: CALL_OW 310
63449: IFFALSE 63460
// ComExit ( j ) ;
63451: LD_VAR 0 2
63455: PPUSH
63456: CALL 44260 0 1
// AddComCollect ( j , x , y ) ;
63460: LD_VAR 0 2
63464: PPUSH
63465: LD_VAR 0 6
63469: PPUSH
63470: LD_VAR 0 7
63474: PPUSH
63475: CALL_OW 177
// end ;
63479: GO 63437
63481: POP
63482: POP
// exit ;
63483: POP
63484: POP
63485: GO 63714
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63487: LD_ADDR_VAR 0 4
63491: PUSH
63492: LD_INT 22
63494: PUSH
63495: LD_VAR 0 5
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 91
63506: PUSH
63507: LD_VAR 0 8
63511: PUSH
63512: LD_INT 8
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 2
63522: PUSH
63523: LD_INT 34
63525: PUSH
63526: LD_INT 12
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 34
63535: PUSH
63536: LD_INT 51
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 34
63545: PUSH
63546: LD_INT 32
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 34
63555: PUSH
63556: LD_INT 89
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: LIST
63574: PPUSH
63575: CALL_OW 69
63579: ST_TO_ADDR
// if tmp then
63580: LD_VAR 0 4
63584: IFFALSE 63710
// begin for j in tmp do
63586: LD_ADDR_VAR 0 2
63590: PUSH
63591: LD_VAR 0 4
63595: PUSH
63596: FOR_IN
63597: IFFALSE 63708
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
63599: LD_VAR 0 2
63603: PPUSH
63604: CALL_OW 262
63608: PUSH
63609: LD_INT 3
63611: EQUAL
63612: PUSH
63613: LD_VAR 0 2
63617: PPUSH
63618: CALL_OW 261
63622: PUSH
63623: LD_INT 20
63625: GREATER
63626: OR
63627: PUSH
63628: LD_VAR 0 2
63632: PPUSH
63633: CALL_OW 314
63637: NOT
63638: AND
63639: PUSH
63640: LD_VAR 0 2
63644: PPUSH
63645: CALL_OW 263
63649: PUSH
63650: LD_INT 1
63652: NONEQUAL
63653: PUSH
63654: LD_VAR 0 2
63658: PPUSH
63659: CALL_OW 311
63663: OR
63664: AND
63665: IFFALSE 63706
// begin ComCollect ( j , x , y ) ;
63667: LD_VAR 0 2
63671: PPUSH
63672: LD_VAR 0 6
63676: PPUSH
63677: LD_VAR 0 7
63681: PPUSH
63682: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
63686: LD_VAR 0 2
63690: PPUSH
63691: LD_VAR 0 8
63695: PPUSH
63696: CALL_OW 172
// exit ;
63700: POP
63701: POP
63702: POP
63703: POP
63704: GO 63714
// end ;
63706: GO 63596
63708: POP
63709: POP
// end ; end ;
63710: GO 63085
63712: POP
63713: POP
// end ; end_of_file
63714: PPOPN 9
63716: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
63717: LD_VAR 0 1
63721: PUSH
63722: LD_INT 200
63724: DOUBLE
63725: GREATEREQUAL
63726: IFFALSE 63734
63728: LD_INT 299
63730: DOUBLE
63731: LESSEQUAL
63732: IFTRUE 63736
63734: GO 63768
63736: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
63737: LD_VAR 0 1
63741: PPUSH
63742: LD_VAR 0 2
63746: PPUSH
63747: LD_VAR 0 3
63751: PPUSH
63752: LD_VAR 0 4
63756: PPUSH
63757: LD_VAR 0 5
63761: PPUSH
63762: CALL 64256 0 5
63766: GO 63845
63768: LD_INT 300
63770: DOUBLE
63771: GREATEREQUAL
63772: IFFALSE 63780
63774: LD_INT 399
63776: DOUBLE
63777: LESSEQUAL
63778: IFTRUE 63782
63780: GO 63844
63782: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
63783: LD_VAR 0 1
63787: PPUSH
63788: LD_VAR 0 2
63792: PPUSH
63793: LD_VAR 0 3
63797: PPUSH
63798: LD_VAR 0 4
63802: PPUSH
63803: LD_VAR 0 5
63807: PPUSH
63808: LD_VAR 0 6
63812: PPUSH
63813: LD_VAR 0 7
63817: PPUSH
63818: LD_VAR 0 8
63822: PPUSH
63823: LD_VAR 0 9
63827: PPUSH
63828: LD_VAR 0 10
63832: PPUSH
63833: LD_VAR 0 11
63837: PPUSH
63838: CALL 60426 0 11
63842: GO 63845
63844: POP
// end ;
63845: PPOPN 11
63847: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
63848: LD_VAR 0 1
63852: PPUSH
63853: LD_VAR 0 2
63857: PPUSH
63858: LD_VAR 0 3
63862: PPUSH
63863: LD_VAR 0 4
63867: PPUSH
63868: LD_VAR 0 5
63872: PPUSH
63873: CALL 63992 0 5
// end ; end_of_file
63877: PPOPN 5
63879: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
63880: LD_INT 0
63882: PPUSH
63883: PPUSH
63884: PPUSH
63885: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
63886: LD_VAR 0 1
63890: PPUSH
63891: CALL_OW 264
63895: PUSH
63896: LD_INT 91
63898: EQUAL
63899: IFFALSE 63971
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
63901: LD_INT 68
63903: PPUSH
63904: LD_VAR 0 1
63908: PPUSH
63909: CALL_OW 255
63913: PPUSH
63914: CALL_OW 321
63918: PUSH
63919: LD_INT 2
63921: EQUAL
63922: IFFALSE 63934
// eff := 70 else
63924: LD_ADDR_VAR 0 4
63928: PUSH
63929: LD_INT 70
63931: ST_TO_ADDR
63932: GO 63942
// eff := 30 ;
63934: LD_ADDR_VAR 0 4
63938: PUSH
63939: LD_INT 30
63941: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
63942: LD_VAR 0 1
63946: PPUSH
63947: CALL_OW 250
63951: PPUSH
63952: LD_VAR 0 1
63956: PPUSH
63957: CALL_OW 251
63961: PPUSH
63962: LD_VAR 0 4
63966: PPUSH
63967: CALL_OW 495
// end ; end ;
63971: LD_VAR 0 2
63975: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
63976: LD_INT 0
63978: PPUSH
// end ;
63979: LD_VAR 0 4
63983: RET
// export function SOS_Command ( cmd ) ; begin
63984: LD_INT 0
63986: PPUSH
// end ;
63987: LD_VAR 0 2
63991: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
63992: LD_INT 0
63994: PPUSH
// end ;
63995: LD_VAR 0 6
63999: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
64000: LD_INT 0
64002: PPUSH
64003: PPUSH
// if not vehicle or not factory then
64004: LD_VAR 0 1
64008: NOT
64009: PUSH
64010: LD_VAR 0 2
64014: NOT
64015: OR
64016: IFFALSE 64020
// exit ;
64018: GO 64251
// if factoryWaypoints >= factory then
64020: LD_EXP 88
64024: PUSH
64025: LD_VAR 0 2
64029: GREATEREQUAL
64030: IFFALSE 64251
// if factoryWaypoints [ factory ] then
64032: LD_EXP 88
64036: PUSH
64037: LD_VAR 0 2
64041: ARRAY
64042: IFFALSE 64251
// begin if GetControl ( vehicle ) = control_manual then
64044: LD_VAR 0 1
64048: PPUSH
64049: CALL_OW 263
64053: PUSH
64054: LD_INT 1
64056: EQUAL
64057: IFFALSE 64138
// begin driver := IsDrivenBy ( vehicle ) ;
64059: LD_ADDR_VAR 0 4
64063: PUSH
64064: LD_VAR 0 1
64068: PPUSH
64069: CALL_OW 311
64073: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64074: LD_VAR 0 4
64078: PPUSH
64079: LD_EXP 88
64083: PUSH
64084: LD_VAR 0 2
64088: ARRAY
64089: PUSH
64090: LD_INT 3
64092: ARRAY
64093: PPUSH
64094: LD_EXP 88
64098: PUSH
64099: LD_VAR 0 2
64103: ARRAY
64104: PUSH
64105: LD_INT 4
64107: ARRAY
64108: PPUSH
64109: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64113: LD_VAR 0 4
64117: PPUSH
64118: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64122: LD_VAR 0 4
64126: PPUSH
64127: LD_VAR 0 2
64131: PPUSH
64132: CALL_OW 180
// end else
64136: GO 64251
// if GetControl ( vehicle ) = control_remote then
64138: LD_VAR 0 1
64142: PPUSH
64143: CALL_OW 263
64147: PUSH
64148: LD_INT 2
64150: EQUAL
64151: IFFALSE 64212
// begin wait ( 0 0$2 ) ;
64153: LD_INT 70
64155: PPUSH
64156: CALL_OW 67
// if Connect ( vehicle ) then
64160: LD_VAR 0 1
64164: PPUSH
64165: CALL 14501 0 1
64169: IFFALSE 64210
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64171: LD_VAR 0 1
64175: PPUSH
64176: LD_EXP 88
64180: PUSH
64181: LD_VAR 0 2
64185: ARRAY
64186: PUSH
64187: LD_INT 3
64189: ARRAY
64190: PPUSH
64191: LD_EXP 88
64195: PUSH
64196: LD_VAR 0 2
64200: ARRAY
64201: PUSH
64202: LD_INT 4
64204: ARRAY
64205: PPUSH
64206: CALL_OW 171
// end else
64210: GO 64251
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64212: LD_VAR 0 1
64216: PPUSH
64217: LD_EXP 88
64221: PUSH
64222: LD_VAR 0 2
64226: ARRAY
64227: PUSH
64228: LD_INT 3
64230: ARRAY
64231: PPUSH
64232: LD_EXP 88
64236: PUSH
64237: LD_VAR 0 2
64241: ARRAY
64242: PUSH
64243: LD_INT 4
64245: ARRAY
64246: PPUSH
64247: CALL_OW 171
// end ; end ;
64251: LD_VAR 0 3
64255: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64256: LD_INT 0
64258: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64259: LD_VAR 0 1
64263: PUSH
64264: LD_INT 250
64266: EQUAL
64267: PUSH
64268: LD_VAR 0 2
64272: PPUSH
64273: CALL_OW 264
64277: PUSH
64278: LD_INT 81
64280: EQUAL
64281: AND
64282: IFFALSE 64303
// MinerPlaceMine ( unit , x , y ) ;
64284: LD_VAR 0 2
64288: PPUSH
64289: LD_VAR 0 4
64293: PPUSH
64294: LD_VAR 0 5
64298: PPUSH
64299: CALL 66688 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64303: LD_VAR 0 1
64307: PUSH
64308: LD_INT 251
64310: EQUAL
64311: PUSH
64312: LD_VAR 0 2
64316: PPUSH
64317: CALL_OW 264
64321: PUSH
64322: LD_INT 81
64324: EQUAL
64325: AND
64326: IFFALSE 64347
// MinerDetonateMine ( unit , x , y ) ;
64328: LD_VAR 0 2
64332: PPUSH
64333: LD_VAR 0 4
64337: PPUSH
64338: LD_VAR 0 5
64342: PPUSH
64343: CALL 66963 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64347: LD_VAR 0 1
64351: PUSH
64352: LD_INT 252
64354: EQUAL
64355: PUSH
64356: LD_VAR 0 2
64360: PPUSH
64361: CALL_OW 264
64365: PUSH
64366: LD_INT 81
64368: EQUAL
64369: AND
64370: IFFALSE 64391
// MinerCreateMinefield ( unit , x , y ) ;
64372: LD_VAR 0 2
64376: PPUSH
64377: LD_VAR 0 4
64381: PPUSH
64382: LD_VAR 0 5
64386: PPUSH
64387: CALL 67380 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64391: LD_VAR 0 1
64395: PUSH
64396: LD_INT 253
64398: EQUAL
64399: PUSH
64400: LD_VAR 0 2
64404: PPUSH
64405: CALL_OW 257
64409: PUSH
64410: LD_INT 5
64412: EQUAL
64413: AND
64414: IFFALSE 64435
// ComBinocular ( unit , x , y ) ;
64416: LD_VAR 0 2
64420: PPUSH
64421: LD_VAR 0 4
64425: PPUSH
64426: LD_VAR 0 5
64430: PPUSH
64431: CALL 67749 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64435: LD_VAR 0 1
64439: PUSH
64440: LD_INT 254
64442: EQUAL
64443: PUSH
64444: LD_VAR 0 2
64448: PPUSH
64449: CALL_OW 264
64453: PUSH
64454: LD_INT 99
64456: EQUAL
64457: AND
64458: PUSH
64459: LD_VAR 0 3
64463: PPUSH
64464: CALL_OW 263
64468: PUSH
64469: LD_INT 3
64471: EQUAL
64472: AND
64473: IFFALSE 64489
// HackDestroyVehicle ( unit , selectedUnit ) ;
64475: LD_VAR 0 2
64479: PPUSH
64480: LD_VAR 0 3
64484: PPUSH
64485: CALL 66052 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64489: LD_VAR 0 1
64493: PUSH
64494: LD_INT 255
64496: EQUAL
64497: PUSH
64498: LD_VAR 0 2
64502: PPUSH
64503: CALL_OW 264
64507: PUSH
64508: LD_INT 14
64510: PUSH
64511: LD_INT 53
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: IN
64518: AND
64519: PUSH
64520: LD_VAR 0 4
64524: PPUSH
64525: LD_VAR 0 5
64529: PPUSH
64530: CALL_OW 488
64534: AND
64535: IFFALSE 64559
// CutTreeXYR ( unit , x , y , 12 ) ;
64537: LD_VAR 0 2
64541: PPUSH
64542: LD_VAR 0 4
64546: PPUSH
64547: LD_VAR 0 5
64551: PPUSH
64552: LD_INT 12
64554: PPUSH
64555: CALL 64622 0 4
// if cmd = 256 then
64559: LD_VAR 0 1
64563: PUSH
64564: LD_INT 256
64566: EQUAL
64567: IFFALSE 64588
// SetFactoryWaypoint ( unit , x , y ) ;
64569: LD_VAR 0 2
64573: PPUSH
64574: LD_VAR 0 4
64578: PPUSH
64579: LD_VAR 0 5
64583: PPUSH
64584: CALL 62406 0 3
// if cmd = 257 then
64588: LD_VAR 0 1
64592: PUSH
64593: LD_INT 257
64595: EQUAL
64596: IFFALSE 64617
// SetWarehouseGatheringPoint ( unit , x , y ) ;
64598: LD_VAR 0 2
64602: PPUSH
64603: LD_VAR 0 4
64607: PPUSH
64608: LD_VAR 0 5
64612: PPUSH
64613: CALL 62768 0 3
// end ;
64617: LD_VAR 0 6
64621: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
64622: LD_INT 0
64624: PPUSH
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
64629: PPUSH
64630: PPUSH
64631: PPUSH
64632: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
64633: LD_VAR 0 1
64637: NOT
64638: PUSH
64639: LD_VAR 0 2
64643: PPUSH
64644: LD_VAR 0 3
64648: PPUSH
64649: CALL_OW 488
64653: NOT
64654: OR
64655: PUSH
64656: LD_VAR 0 4
64660: NOT
64661: OR
64662: IFFALSE 64666
// exit ;
64664: GO 65006
// list := [ ] ;
64666: LD_ADDR_VAR 0 13
64670: PUSH
64671: EMPTY
64672: ST_TO_ADDR
// if x - r < 0 then
64673: LD_VAR 0 2
64677: PUSH
64678: LD_VAR 0 4
64682: MINUS
64683: PUSH
64684: LD_INT 0
64686: LESS
64687: IFFALSE 64699
// min_x := 0 else
64689: LD_ADDR_VAR 0 7
64693: PUSH
64694: LD_INT 0
64696: ST_TO_ADDR
64697: GO 64715
// min_x := x - r ;
64699: LD_ADDR_VAR 0 7
64703: PUSH
64704: LD_VAR 0 2
64708: PUSH
64709: LD_VAR 0 4
64713: MINUS
64714: ST_TO_ADDR
// if y - r < 0 then
64715: LD_VAR 0 3
64719: PUSH
64720: LD_VAR 0 4
64724: MINUS
64725: PUSH
64726: LD_INT 0
64728: LESS
64729: IFFALSE 64741
// min_y := 0 else
64731: LD_ADDR_VAR 0 8
64735: PUSH
64736: LD_INT 0
64738: ST_TO_ADDR
64739: GO 64757
// min_y := y - r ;
64741: LD_ADDR_VAR 0 8
64745: PUSH
64746: LD_VAR 0 3
64750: PUSH
64751: LD_VAR 0 4
64755: MINUS
64756: ST_TO_ADDR
// max_x := x + r ;
64757: LD_ADDR_VAR 0 9
64761: PUSH
64762: LD_VAR 0 2
64766: PUSH
64767: LD_VAR 0 4
64771: PLUS
64772: ST_TO_ADDR
// max_y := y + r ;
64773: LD_ADDR_VAR 0 10
64777: PUSH
64778: LD_VAR 0 3
64782: PUSH
64783: LD_VAR 0 4
64787: PLUS
64788: ST_TO_ADDR
// for _x = min_x to max_x do
64789: LD_ADDR_VAR 0 11
64793: PUSH
64794: DOUBLE
64795: LD_VAR 0 7
64799: DEC
64800: ST_TO_ADDR
64801: LD_VAR 0 9
64805: PUSH
64806: FOR_TO
64807: IFFALSE 64924
// for _y = min_y to max_y do
64809: LD_ADDR_VAR 0 12
64813: PUSH
64814: DOUBLE
64815: LD_VAR 0 8
64819: DEC
64820: ST_TO_ADDR
64821: LD_VAR 0 10
64825: PUSH
64826: FOR_TO
64827: IFFALSE 64920
// begin if not ValidHex ( _x , _y ) then
64829: LD_VAR 0 11
64833: PPUSH
64834: LD_VAR 0 12
64838: PPUSH
64839: CALL_OW 488
64843: NOT
64844: IFFALSE 64848
// continue ;
64846: GO 64826
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
64848: LD_VAR 0 11
64852: PPUSH
64853: LD_VAR 0 12
64857: PPUSH
64858: CALL_OW 351
64862: PUSH
64863: LD_VAR 0 11
64867: PPUSH
64868: LD_VAR 0 12
64872: PPUSH
64873: CALL_OW 554
64877: AND
64878: IFFALSE 64918
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
64880: LD_ADDR_VAR 0 13
64884: PUSH
64885: LD_VAR 0 13
64889: PPUSH
64890: LD_VAR 0 13
64894: PUSH
64895: LD_INT 1
64897: PLUS
64898: PPUSH
64899: LD_VAR 0 11
64903: PUSH
64904: LD_VAR 0 12
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PPUSH
64913: CALL_OW 2
64917: ST_TO_ADDR
// end ;
64918: GO 64826
64920: POP
64921: POP
64922: GO 64806
64924: POP
64925: POP
// if not list then
64926: LD_VAR 0 13
64930: NOT
64931: IFFALSE 64935
// exit ;
64933: GO 65006
// for i in list do
64935: LD_ADDR_VAR 0 6
64939: PUSH
64940: LD_VAR 0 13
64944: PUSH
64945: FOR_IN
64946: IFFALSE 65004
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
64948: LD_VAR 0 1
64952: PPUSH
64953: LD_STRING M
64955: PUSH
64956: LD_VAR 0 6
64960: PUSH
64961: LD_INT 1
64963: ARRAY
64964: PUSH
64965: LD_VAR 0 6
64969: PUSH
64970: LD_INT 2
64972: ARRAY
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: LD_INT 0
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: PUSH
64995: EMPTY
64996: LIST
64997: PPUSH
64998: CALL_OW 447
65002: GO 64945
65004: POP
65005: POP
// end ;
65006: LD_VAR 0 5
65010: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65011: LD_EXP 91
65015: NOT
65016: IFFALSE 65066
65018: GO 65020
65020: DISABLE
// begin initHack := true ;
65021: LD_ADDR_EXP 91
65025: PUSH
65026: LD_INT 1
65028: ST_TO_ADDR
// hackTanks := [ ] ;
65029: LD_ADDR_EXP 92
65033: PUSH
65034: EMPTY
65035: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65036: LD_ADDR_EXP 93
65040: PUSH
65041: EMPTY
65042: ST_TO_ADDR
// hackLimit := 3 ;
65043: LD_ADDR_EXP 94
65047: PUSH
65048: LD_INT 3
65050: ST_TO_ADDR
// hackDist := 12 ;
65051: LD_ADDR_EXP 95
65055: PUSH
65056: LD_INT 12
65058: ST_TO_ADDR
// hackCounter := [ ] ;
65059: LD_ADDR_EXP 96
65063: PUSH
65064: EMPTY
65065: ST_TO_ADDR
// end ;
65066: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65067: LD_EXP 91
65071: PUSH
65072: LD_INT 34
65074: PUSH
65075: LD_INT 99
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PPUSH
65082: CALL_OW 69
65086: AND
65087: IFFALSE 65340
65089: GO 65091
65091: DISABLE
65092: LD_INT 0
65094: PPUSH
65095: PPUSH
// begin enable ;
65096: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
65097: LD_ADDR_VAR 0 1
65101: PUSH
65102: LD_INT 34
65104: PUSH
65105: LD_INT 99
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PPUSH
65112: CALL_OW 69
65116: PUSH
65117: FOR_IN
65118: IFFALSE 65338
// begin if not i in hackTanks then
65120: LD_VAR 0 1
65124: PUSH
65125: LD_EXP 92
65129: IN
65130: NOT
65131: IFFALSE 65214
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
65133: LD_ADDR_EXP 92
65137: PUSH
65138: LD_EXP 92
65142: PPUSH
65143: LD_EXP 92
65147: PUSH
65148: LD_INT 1
65150: PLUS
65151: PPUSH
65152: LD_VAR 0 1
65156: PPUSH
65157: CALL_OW 1
65161: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
65162: LD_ADDR_EXP 93
65166: PUSH
65167: LD_EXP 93
65171: PPUSH
65172: LD_EXP 93
65176: PUSH
65177: LD_INT 1
65179: PLUS
65180: PPUSH
65181: EMPTY
65182: PPUSH
65183: CALL_OW 1
65187: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
65188: LD_ADDR_EXP 96
65192: PUSH
65193: LD_EXP 96
65197: PPUSH
65198: LD_EXP 96
65202: PUSH
65203: LD_INT 1
65205: PLUS
65206: PPUSH
65207: EMPTY
65208: PPUSH
65209: CALL_OW 1
65213: ST_TO_ADDR
// end ; if not IsOk ( i ) then
65214: LD_VAR 0 1
65218: PPUSH
65219: CALL_OW 302
65223: NOT
65224: IFFALSE 65237
// begin HackUnlinkAll ( i ) ;
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL 65343 0 1
// continue ;
65235: GO 65117
// end ; HackCheckCapturedStatus ( i ) ;
65237: LD_VAR 0 1
65241: PPUSH
65242: CALL 65786 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
65246: LD_ADDR_VAR 0 2
65250: PUSH
65251: LD_INT 81
65253: PUSH
65254: LD_VAR 0 1
65258: PPUSH
65259: CALL_OW 255
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 33
65270: PUSH
65271: LD_INT 3
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 91
65280: PUSH
65281: LD_VAR 0 1
65285: PUSH
65286: LD_EXP 95
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 50
65298: PUSH
65299: EMPTY
65300: LIST
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: PPUSH
65308: CALL_OW 69
65312: ST_TO_ADDR
// if not tmp then
65313: LD_VAR 0 2
65317: NOT
65318: IFFALSE 65322
// continue ;
65320: GO 65117
// HackLink ( i , tmp ) ;
65322: LD_VAR 0 1
65326: PPUSH
65327: LD_VAR 0 2
65331: PPUSH
65332: CALL 65479 0 2
// end ;
65336: GO 65117
65338: POP
65339: POP
// end ;
65340: PPOPN 2
65342: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
65343: LD_INT 0
65345: PPUSH
65346: PPUSH
65347: PPUSH
// if not hack in hackTanks then
65348: LD_VAR 0 1
65352: PUSH
65353: LD_EXP 92
65357: IN
65358: NOT
65359: IFFALSE 65363
// exit ;
65361: GO 65474
// index := GetElementIndex ( hackTanks , hack ) ;
65363: LD_ADDR_VAR 0 4
65367: PUSH
65368: LD_EXP 92
65372: PPUSH
65373: LD_VAR 0 1
65377: PPUSH
65378: CALL 11317 0 2
65382: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
65383: LD_EXP 93
65387: PUSH
65388: LD_VAR 0 4
65392: ARRAY
65393: IFFALSE 65474
// begin for i in hackTanksCaptured [ index ] do
65395: LD_ADDR_VAR 0 3
65399: PUSH
65400: LD_EXP 93
65404: PUSH
65405: LD_VAR 0 4
65409: ARRAY
65410: PUSH
65411: FOR_IN
65412: IFFALSE 65438
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
65414: LD_VAR 0 3
65418: PUSH
65419: LD_INT 1
65421: ARRAY
65422: PPUSH
65423: LD_VAR 0 3
65427: PUSH
65428: LD_INT 2
65430: ARRAY
65431: PPUSH
65432: CALL_OW 235
65436: GO 65411
65438: POP
65439: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
65440: LD_ADDR_EXP 93
65444: PUSH
65445: LD_EXP 93
65449: PPUSH
65450: LD_VAR 0 4
65454: PPUSH
65455: EMPTY
65456: PPUSH
65457: CALL_OW 1
65461: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
65462: LD_VAR 0 1
65466: PPUSH
65467: LD_INT 0
65469: PPUSH
65470: CALL_OW 505
// end ; end ;
65474: LD_VAR 0 2
65478: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
65479: LD_INT 0
65481: PPUSH
65482: PPUSH
65483: PPUSH
// if not hack in hackTanks or not vehicles then
65484: LD_VAR 0 1
65488: PUSH
65489: LD_EXP 92
65493: IN
65494: NOT
65495: PUSH
65496: LD_VAR 0 2
65500: NOT
65501: OR
65502: IFFALSE 65506
// exit ;
65504: GO 65781
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
65506: LD_ADDR_VAR 0 2
65510: PUSH
65511: LD_VAR 0 1
65515: PPUSH
65516: LD_VAR 0 2
65520: PPUSH
65521: LD_INT 1
65523: PPUSH
65524: LD_INT 1
65526: PPUSH
65527: CALL 11967 0 4
65531: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
65532: LD_ADDR_VAR 0 5
65536: PUSH
65537: LD_EXP 92
65541: PPUSH
65542: LD_VAR 0 1
65546: PPUSH
65547: CALL 11317 0 2
65551: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
65552: LD_EXP 93
65556: PUSH
65557: LD_VAR 0 5
65561: ARRAY
65562: PUSH
65563: LD_EXP 94
65567: LESS
65568: IFFALSE 65757
// begin for i := 1 to vehicles do
65570: LD_ADDR_VAR 0 4
65574: PUSH
65575: DOUBLE
65576: LD_INT 1
65578: DEC
65579: ST_TO_ADDR
65580: LD_VAR 0 2
65584: PUSH
65585: FOR_TO
65586: IFFALSE 65755
// begin if hackTanksCaptured [ index ] = hackLimit then
65588: LD_EXP 93
65592: PUSH
65593: LD_VAR 0 5
65597: ARRAY
65598: PUSH
65599: LD_EXP 94
65603: EQUAL
65604: IFFALSE 65608
// break ;
65606: GO 65755
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
65608: LD_ADDR_EXP 96
65612: PUSH
65613: LD_EXP 96
65617: PPUSH
65618: LD_VAR 0 5
65622: PPUSH
65623: LD_EXP 96
65627: PUSH
65628: LD_VAR 0 5
65632: ARRAY
65633: PUSH
65634: LD_INT 1
65636: PLUS
65637: PPUSH
65638: CALL_OW 1
65642: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
65643: LD_ADDR_EXP 93
65647: PUSH
65648: LD_EXP 93
65652: PPUSH
65653: LD_VAR 0 5
65657: PUSH
65658: LD_EXP 93
65662: PUSH
65663: LD_VAR 0 5
65667: ARRAY
65668: PUSH
65669: LD_INT 1
65671: PLUS
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PPUSH
65677: LD_VAR 0 2
65681: PUSH
65682: LD_VAR 0 4
65686: ARRAY
65687: PUSH
65688: LD_VAR 0 2
65692: PUSH
65693: LD_VAR 0 4
65697: ARRAY
65698: PPUSH
65699: CALL_OW 255
65703: PUSH
65704: EMPTY
65705: LIST
65706: LIST
65707: PPUSH
65708: CALL 11532 0 3
65712: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
65713: LD_VAR 0 2
65717: PUSH
65718: LD_VAR 0 4
65722: ARRAY
65723: PPUSH
65724: LD_VAR 0 1
65728: PPUSH
65729: CALL_OW 255
65733: PPUSH
65734: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
65738: LD_VAR 0 2
65742: PUSH
65743: LD_VAR 0 4
65747: ARRAY
65748: PPUSH
65749: CALL_OW 141
// end ;
65753: GO 65585
65755: POP
65756: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
65757: LD_VAR 0 1
65761: PPUSH
65762: LD_EXP 93
65766: PUSH
65767: LD_VAR 0 5
65771: ARRAY
65772: PUSH
65773: LD_INT 0
65775: PLUS
65776: PPUSH
65777: CALL_OW 505
// end ;
65781: LD_VAR 0 3
65785: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
65786: LD_INT 0
65788: PPUSH
65789: PPUSH
65790: PPUSH
65791: PPUSH
// if not hack in hackTanks then
65792: LD_VAR 0 1
65796: PUSH
65797: LD_EXP 92
65801: IN
65802: NOT
65803: IFFALSE 65807
// exit ;
65805: GO 66047
// index := GetElementIndex ( hackTanks , hack ) ;
65807: LD_ADDR_VAR 0 4
65811: PUSH
65812: LD_EXP 92
65816: PPUSH
65817: LD_VAR 0 1
65821: PPUSH
65822: CALL 11317 0 2
65826: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
65827: LD_ADDR_VAR 0 3
65831: PUSH
65832: DOUBLE
65833: LD_EXP 93
65837: PUSH
65838: LD_VAR 0 4
65842: ARRAY
65843: INC
65844: ST_TO_ADDR
65845: LD_INT 1
65847: PUSH
65848: FOR_DOWNTO
65849: IFFALSE 66021
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
65851: LD_ADDR_VAR 0 5
65855: PUSH
65856: LD_EXP 93
65860: PUSH
65861: LD_VAR 0 4
65865: ARRAY
65866: PUSH
65867: LD_VAR 0 3
65871: ARRAY
65872: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
65873: LD_VAR 0 5
65877: PUSH
65878: LD_INT 1
65880: ARRAY
65881: PPUSH
65882: CALL_OW 302
65886: NOT
65887: PUSH
65888: LD_VAR 0 5
65892: PUSH
65893: LD_INT 1
65895: ARRAY
65896: PPUSH
65897: CALL_OW 255
65901: PUSH
65902: LD_VAR 0 1
65906: PPUSH
65907: CALL_OW 255
65911: NONEQUAL
65912: OR
65913: IFFALSE 66019
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
65915: LD_VAR 0 5
65919: PUSH
65920: LD_INT 1
65922: ARRAY
65923: PPUSH
65924: CALL_OW 305
65928: PUSH
65929: LD_VAR 0 5
65933: PUSH
65934: LD_INT 1
65936: ARRAY
65937: PPUSH
65938: CALL_OW 255
65942: PUSH
65943: LD_VAR 0 1
65947: PPUSH
65948: CALL_OW 255
65952: EQUAL
65953: AND
65954: IFFALSE 65978
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
65956: LD_VAR 0 5
65960: PUSH
65961: LD_INT 1
65963: ARRAY
65964: PPUSH
65965: LD_VAR 0 5
65969: PUSH
65970: LD_INT 2
65972: ARRAY
65973: PPUSH
65974: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
65978: LD_ADDR_EXP 93
65982: PUSH
65983: LD_EXP 93
65987: PPUSH
65988: LD_VAR 0 4
65992: PPUSH
65993: LD_EXP 93
65997: PUSH
65998: LD_VAR 0 4
66002: ARRAY
66003: PPUSH
66004: LD_VAR 0 3
66008: PPUSH
66009: CALL_OW 3
66013: PPUSH
66014: CALL_OW 1
66018: ST_TO_ADDR
// end ; end ;
66019: GO 65848
66021: POP
66022: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66023: LD_VAR 0 1
66027: PPUSH
66028: LD_EXP 93
66032: PUSH
66033: LD_VAR 0 4
66037: ARRAY
66038: PUSH
66039: LD_INT 0
66041: PLUS
66042: PPUSH
66043: CALL_OW 505
// end ;
66047: LD_VAR 0 2
66051: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66052: LD_INT 0
66054: PPUSH
66055: PPUSH
66056: PPUSH
66057: PPUSH
// if not hack in hackTanks then
66058: LD_VAR 0 1
66062: PUSH
66063: LD_EXP 92
66067: IN
66068: NOT
66069: IFFALSE 66073
// exit ;
66071: GO 66158
// index := GetElementIndex ( hackTanks , hack ) ;
66073: LD_ADDR_VAR 0 5
66077: PUSH
66078: LD_EXP 92
66082: PPUSH
66083: LD_VAR 0 1
66087: PPUSH
66088: CALL 11317 0 2
66092: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
66093: LD_ADDR_VAR 0 4
66097: PUSH
66098: DOUBLE
66099: LD_INT 1
66101: DEC
66102: ST_TO_ADDR
66103: LD_EXP 93
66107: PUSH
66108: LD_VAR 0 5
66112: ARRAY
66113: PUSH
66114: FOR_TO
66115: IFFALSE 66156
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
66117: LD_EXP 93
66121: PUSH
66122: LD_VAR 0 5
66126: ARRAY
66127: PUSH
66128: LD_VAR 0 4
66132: ARRAY
66133: PUSH
66134: LD_INT 1
66136: ARRAY
66137: PUSH
66138: LD_VAR 0 2
66142: EQUAL
66143: IFFALSE 66154
// KillUnit ( vehicle ) ;
66145: LD_VAR 0 2
66149: PPUSH
66150: CALL_OW 66
66154: GO 66114
66156: POP
66157: POP
// end ;
66158: LD_VAR 0 3
66162: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
66163: LD_EXP 97
66167: NOT
66168: IFFALSE 66203
66170: GO 66172
66172: DISABLE
// begin initMiner := true ;
66173: LD_ADDR_EXP 97
66177: PUSH
66178: LD_INT 1
66180: ST_TO_ADDR
// minersList := [ ] ;
66181: LD_ADDR_EXP 98
66185: PUSH
66186: EMPTY
66187: ST_TO_ADDR
// minerMinesList := [ ] ;
66188: LD_ADDR_EXP 99
66192: PUSH
66193: EMPTY
66194: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
66195: LD_ADDR_EXP 100
66199: PUSH
66200: LD_INT 5
66202: ST_TO_ADDR
// end ;
66203: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
66204: LD_EXP 97
66208: PUSH
66209: LD_INT 34
66211: PUSH
66212: LD_INT 81
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PPUSH
66219: CALL_OW 69
66223: AND
66224: IFFALSE 66685
66226: GO 66228
66228: DISABLE
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
66233: PPUSH
66234: PPUSH
// begin enable ;
66235: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
66236: LD_ADDR_VAR 0 1
66240: PUSH
66241: LD_INT 34
66243: PUSH
66244: LD_INT 81
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: PPUSH
66251: CALL_OW 69
66255: PUSH
66256: FOR_IN
66257: IFFALSE 66329
// begin if not i in minersList then
66259: LD_VAR 0 1
66263: PUSH
66264: LD_EXP 98
66268: IN
66269: NOT
66270: IFFALSE 66327
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
66272: LD_ADDR_EXP 98
66276: PUSH
66277: LD_EXP 98
66281: PPUSH
66282: LD_EXP 98
66286: PUSH
66287: LD_INT 1
66289: PLUS
66290: PPUSH
66291: LD_VAR 0 1
66295: PPUSH
66296: CALL_OW 1
66300: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
66301: LD_ADDR_EXP 99
66305: PUSH
66306: LD_EXP 99
66310: PPUSH
66311: LD_EXP 99
66315: PUSH
66316: LD_INT 1
66318: PLUS
66319: PPUSH
66320: EMPTY
66321: PPUSH
66322: CALL_OW 1
66326: ST_TO_ADDR
// end end ;
66327: GO 66256
66329: POP
66330: POP
// for i := minerMinesList downto 1 do
66331: LD_ADDR_VAR 0 1
66335: PUSH
66336: DOUBLE
66337: LD_EXP 99
66341: INC
66342: ST_TO_ADDR
66343: LD_INT 1
66345: PUSH
66346: FOR_DOWNTO
66347: IFFALSE 66683
// begin if IsLive ( minersList [ i ] ) then
66349: LD_EXP 98
66353: PUSH
66354: LD_VAR 0 1
66358: ARRAY
66359: PPUSH
66360: CALL_OW 300
66364: IFFALSE 66392
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
66366: LD_EXP 98
66370: PUSH
66371: LD_VAR 0 1
66375: ARRAY
66376: PPUSH
66377: LD_EXP 99
66381: PUSH
66382: LD_VAR 0 1
66386: ARRAY
66387: PPUSH
66388: CALL_OW 505
// if not minerMinesList [ i ] then
66392: LD_EXP 99
66396: PUSH
66397: LD_VAR 0 1
66401: ARRAY
66402: NOT
66403: IFFALSE 66407
// continue ;
66405: GO 66346
// for j := minerMinesList [ i ] downto 1 do
66407: LD_ADDR_VAR 0 2
66411: PUSH
66412: DOUBLE
66413: LD_EXP 99
66417: PUSH
66418: LD_VAR 0 1
66422: ARRAY
66423: INC
66424: ST_TO_ADDR
66425: LD_INT 1
66427: PUSH
66428: FOR_DOWNTO
66429: IFFALSE 66679
// begin side := GetSide ( minersList [ i ] ) ;
66431: LD_ADDR_VAR 0 3
66435: PUSH
66436: LD_EXP 98
66440: PUSH
66441: LD_VAR 0 1
66445: ARRAY
66446: PPUSH
66447: CALL_OW 255
66451: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
66452: LD_ADDR_VAR 0 4
66456: PUSH
66457: LD_EXP 99
66461: PUSH
66462: LD_VAR 0 1
66466: ARRAY
66467: PUSH
66468: LD_VAR 0 2
66472: ARRAY
66473: PUSH
66474: LD_INT 1
66476: ARRAY
66477: PPUSH
66478: LD_EXP 99
66482: PUSH
66483: LD_VAR 0 1
66487: ARRAY
66488: PUSH
66489: LD_VAR 0 2
66493: ARRAY
66494: PUSH
66495: LD_INT 2
66497: ARRAY
66498: PPUSH
66499: CALL_OW 428
66503: ST_TO_ADDR
// if not tmp then
66504: LD_VAR 0 4
66508: NOT
66509: IFFALSE 66513
// continue ;
66511: GO 66428
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
66513: LD_VAR 0 4
66517: PUSH
66518: LD_INT 81
66520: PUSH
66521: LD_VAR 0 3
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PPUSH
66530: CALL_OW 69
66534: IN
66535: PUSH
66536: LD_EXP 99
66540: PUSH
66541: LD_VAR 0 1
66545: ARRAY
66546: PUSH
66547: LD_VAR 0 2
66551: ARRAY
66552: PUSH
66553: LD_INT 1
66555: ARRAY
66556: PPUSH
66557: LD_EXP 99
66561: PUSH
66562: LD_VAR 0 1
66566: ARRAY
66567: PUSH
66568: LD_VAR 0 2
66572: ARRAY
66573: PUSH
66574: LD_INT 2
66576: ARRAY
66577: PPUSH
66578: CALL_OW 458
66582: AND
66583: IFFALSE 66677
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
66585: LD_EXP 99
66589: PUSH
66590: LD_VAR 0 1
66594: ARRAY
66595: PUSH
66596: LD_VAR 0 2
66600: ARRAY
66601: PUSH
66602: LD_INT 1
66604: ARRAY
66605: PPUSH
66606: LD_EXP 99
66610: PUSH
66611: LD_VAR 0 1
66615: ARRAY
66616: PUSH
66617: LD_VAR 0 2
66621: ARRAY
66622: PUSH
66623: LD_INT 2
66625: ARRAY
66626: PPUSH
66627: LD_VAR 0 3
66631: PPUSH
66632: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
66636: LD_ADDR_EXP 99
66640: PUSH
66641: LD_EXP 99
66645: PPUSH
66646: LD_VAR 0 1
66650: PPUSH
66651: LD_EXP 99
66655: PUSH
66656: LD_VAR 0 1
66660: ARRAY
66661: PPUSH
66662: LD_VAR 0 2
66666: PPUSH
66667: CALL_OW 3
66671: PPUSH
66672: CALL_OW 1
66676: ST_TO_ADDR
// end ; end ;
66677: GO 66428
66679: POP
66680: POP
// end ;
66681: GO 66346
66683: POP
66684: POP
// end ;
66685: PPOPN 4
66687: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
66688: LD_INT 0
66690: PPUSH
66691: PPUSH
// result := false ;
66692: LD_ADDR_VAR 0 4
66696: PUSH
66697: LD_INT 0
66699: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
66700: LD_VAR 0 1
66704: PPUSH
66705: CALL_OW 264
66709: PUSH
66710: LD_INT 81
66712: EQUAL
66713: NOT
66714: IFFALSE 66718
// exit ;
66716: GO 66958
// index := GetElementIndex ( minersList , unit ) ;
66718: LD_ADDR_VAR 0 5
66722: PUSH
66723: LD_EXP 98
66727: PPUSH
66728: LD_VAR 0 1
66732: PPUSH
66733: CALL 11317 0 2
66737: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
66738: LD_EXP 99
66742: PUSH
66743: LD_VAR 0 5
66747: ARRAY
66748: PUSH
66749: LD_EXP 100
66753: GREATEREQUAL
66754: IFFALSE 66758
// exit ;
66756: GO 66958
// ComMoveXY ( unit , x , y ) ;
66758: LD_VAR 0 1
66762: PPUSH
66763: LD_VAR 0 2
66767: PPUSH
66768: LD_VAR 0 3
66772: PPUSH
66773: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66777: LD_INT 35
66779: PPUSH
66780: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
66784: LD_VAR 0 1
66788: PPUSH
66789: LD_VAR 0 2
66793: PPUSH
66794: LD_VAR 0 3
66798: PPUSH
66799: CALL 42672 0 3
66803: NOT
66804: PUSH
66805: LD_VAR 0 1
66809: PPUSH
66810: CALL_OW 314
66814: AND
66815: IFFALSE 66819
// exit ;
66817: GO 66958
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
66819: LD_VAR 0 2
66823: PPUSH
66824: LD_VAR 0 3
66828: PPUSH
66829: CALL_OW 428
66833: PUSH
66834: LD_VAR 0 1
66838: EQUAL
66839: PUSH
66840: LD_VAR 0 1
66844: PPUSH
66845: CALL_OW 314
66849: NOT
66850: AND
66851: IFFALSE 66777
// PlaySoundXY ( x , y , PlantMine ) ;
66853: LD_VAR 0 2
66857: PPUSH
66858: LD_VAR 0 3
66862: PPUSH
66863: LD_STRING PlantMine
66865: PPUSH
66866: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
66870: LD_VAR 0 2
66874: PPUSH
66875: LD_VAR 0 3
66879: PPUSH
66880: LD_VAR 0 1
66884: PPUSH
66885: CALL_OW 255
66889: PPUSH
66890: LD_INT 0
66892: PPUSH
66893: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
66897: LD_ADDR_EXP 99
66901: PUSH
66902: LD_EXP 99
66906: PPUSH
66907: LD_VAR 0 5
66911: PUSH
66912: LD_EXP 99
66916: PUSH
66917: LD_VAR 0 5
66921: ARRAY
66922: PUSH
66923: LD_INT 1
66925: PLUS
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PPUSH
66931: LD_VAR 0 2
66935: PUSH
66936: LD_VAR 0 3
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PPUSH
66945: CALL 11532 0 3
66949: ST_TO_ADDR
// result := true ;
66950: LD_ADDR_VAR 0 4
66954: PUSH
66955: LD_INT 1
66957: ST_TO_ADDR
// end ;
66958: LD_VAR 0 4
66962: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
66963: LD_INT 0
66965: PPUSH
66966: PPUSH
66967: PPUSH
// if not unit in minersList then
66968: LD_VAR 0 1
66972: PUSH
66973: LD_EXP 98
66977: IN
66978: NOT
66979: IFFALSE 66983
// exit ;
66981: GO 67375
// index := GetElementIndex ( minersList , unit ) ;
66983: LD_ADDR_VAR 0 6
66987: PUSH
66988: LD_EXP 98
66992: PPUSH
66993: LD_VAR 0 1
66997: PPUSH
66998: CALL 11317 0 2
67002: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67003: LD_ADDR_VAR 0 5
67007: PUSH
67008: DOUBLE
67009: LD_EXP 99
67013: PUSH
67014: LD_VAR 0 6
67018: ARRAY
67019: INC
67020: ST_TO_ADDR
67021: LD_INT 1
67023: PUSH
67024: FOR_DOWNTO
67025: IFFALSE 67186
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67027: LD_EXP 99
67031: PUSH
67032: LD_VAR 0 6
67036: ARRAY
67037: PUSH
67038: LD_VAR 0 5
67042: ARRAY
67043: PUSH
67044: LD_INT 1
67046: ARRAY
67047: PUSH
67048: LD_VAR 0 2
67052: EQUAL
67053: PUSH
67054: LD_EXP 99
67058: PUSH
67059: LD_VAR 0 6
67063: ARRAY
67064: PUSH
67065: LD_VAR 0 5
67069: ARRAY
67070: PUSH
67071: LD_INT 2
67073: ARRAY
67074: PUSH
67075: LD_VAR 0 3
67079: EQUAL
67080: AND
67081: IFFALSE 67184
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67083: LD_EXP 99
67087: PUSH
67088: LD_VAR 0 6
67092: ARRAY
67093: PUSH
67094: LD_VAR 0 5
67098: ARRAY
67099: PUSH
67100: LD_INT 1
67102: ARRAY
67103: PPUSH
67104: LD_EXP 99
67108: PUSH
67109: LD_VAR 0 6
67113: ARRAY
67114: PUSH
67115: LD_VAR 0 5
67119: ARRAY
67120: PUSH
67121: LD_INT 2
67123: ARRAY
67124: PPUSH
67125: LD_VAR 0 1
67129: PPUSH
67130: CALL_OW 255
67134: PPUSH
67135: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67139: LD_ADDR_EXP 99
67143: PUSH
67144: LD_EXP 99
67148: PPUSH
67149: LD_VAR 0 6
67153: PPUSH
67154: LD_EXP 99
67158: PUSH
67159: LD_VAR 0 6
67163: ARRAY
67164: PPUSH
67165: LD_VAR 0 5
67169: PPUSH
67170: CALL_OW 3
67174: PPUSH
67175: CALL_OW 1
67179: ST_TO_ADDR
// exit ;
67180: POP
67181: POP
67182: GO 67375
// end ; end ;
67184: GO 67024
67186: POP
67187: POP
// for i := minerMinesList [ index ] downto 1 do
67188: LD_ADDR_VAR 0 5
67192: PUSH
67193: DOUBLE
67194: LD_EXP 99
67198: PUSH
67199: LD_VAR 0 6
67203: ARRAY
67204: INC
67205: ST_TO_ADDR
67206: LD_INT 1
67208: PUSH
67209: FOR_DOWNTO
67210: IFFALSE 67373
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
67212: LD_EXP 99
67216: PUSH
67217: LD_VAR 0 6
67221: ARRAY
67222: PUSH
67223: LD_VAR 0 5
67227: ARRAY
67228: PUSH
67229: LD_INT 1
67231: ARRAY
67232: PPUSH
67233: LD_EXP 99
67237: PUSH
67238: LD_VAR 0 6
67242: ARRAY
67243: PUSH
67244: LD_VAR 0 5
67248: ARRAY
67249: PUSH
67250: LD_INT 2
67252: ARRAY
67253: PPUSH
67254: LD_VAR 0 2
67258: PPUSH
67259: LD_VAR 0 3
67263: PPUSH
67264: CALL_OW 298
67268: PUSH
67269: LD_INT 6
67271: LESS
67272: IFFALSE 67371
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
67274: LD_EXP 99
67278: PUSH
67279: LD_VAR 0 6
67283: ARRAY
67284: PUSH
67285: LD_VAR 0 5
67289: ARRAY
67290: PUSH
67291: LD_INT 1
67293: ARRAY
67294: PPUSH
67295: LD_EXP 99
67299: PUSH
67300: LD_VAR 0 6
67304: ARRAY
67305: PUSH
67306: LD_VAR 0 5
67310: ARRAY
67311: PUSH
67312: LD_INT 2
67314: ARRAY
67315: PPUSH
67316: LD_VAR 0 1
67320: PPUSH
67321: CALL_OW 255
67325: PPUSH
67326: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
67330: LD_ADDR_EXP 99
67334: PUSH
67335: LD_EXP 99
67339: PPUSH
67340: LD_VAR 0 6
67344: PPUSH
67345: LD_EXP 99
67349: PUSH
67350: LD_VAR 0 6
67354: ARRAY
67355: PPUSH
67356: LD_VAR 0 5
67360: PPUSH
67361: CALL_OW 3
67365: PPUSH
67366: CALL_OW 1
67370: ST_TO_ADDR
// end ; end ;
67371: GO 67209
67373: POP
67374: POP
// end ;
67375: LD_VAR 0 4
67379: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
67380: LD_INT 0
67382: PPUSH
67383: PPUSH
67384: PPUSH
67385: PPUSH
67386: PPUSH
67387: PPUSH
67388: PPUSH
67389: PPUSH
67390: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
67391: LD_VAR 0 1
67395: PPUSH
67396: CALL_OW 264
67400: PUSH
67401: LD_INT 81
67403: EQUAL
67404: NOT
67405: PUSH
67406: LD_VAR 0 1
67410: PUSH
67411: LD_EXP 98
67415: IN
67416: NOT
67417: OR
67418: IFFALSE 67422
// exit ;
67420: GO 67744
// index := GetElementIndex ( minersList , unit ) ;
67422: LD_ADDR_VAR 0 6
67426: PUSH
67427: LD_EXP 98
67431: PPUSH
67432: LD_VAR 0 1
67436: PPUSH
67437: CALL 11317 0 2
67441: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
67442: LD_ADDR_VAR 0 8
67446: PUSH
67447: LD_EXP 100
67451: PUSH
67452: LD_EXP 99
67456: PUSH
67457: LD_VAR 0 6
67461: ARRAY
67462: MINUS
67463: ST_TO_ADDR
// if not minesFreeAmount then
67464: LD_VAR 0 8
67468: NOT
67469: IFFALSE 67473
// exit ;
67471: GO 67744
// tmp := [ ] ;
67473: LD_ADDR_VAR 0 7
67477: PUSH
67478: EMPTY
67479: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
67480: LD_ADDR_VAR 0 5
67484: PUSH
67485: DOUBLE
67486: LD_INT 1
67488: DEC
67489: ST_TO_ADDR
67490: LD_VAR 0 8
67494: PUSH
67495: FOR_TO
67496: IFFALSE 67691
// begin _d := rand ( 0 , 5 ) ;
67498: LD_ADDR_VAR 0 11
67502: PUSH
67503: LD_INT 0
67505: PPUSH
67506: LD_INT 5
67508: PPUSH
67509: CALL_OW 12
67513: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
67514: LD_ADDR_VAR 0 12
67518: PUSH
67519: LD_INT 2
67521: PPUSH
67522: LD_INT 6
67524: PPUSH
67525: CALL_OW 12
67529: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
67530: LD_ADDR_VAR 0 9
67534: PUSH
67535: LD_VAR 0 2
67539: PPUSH
67540: LD_VAR 0 11
67544: PPUSH
67545: LD_VAR 0 12
67549: PPUSH
67550: CALL_OW 272
67554: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
67555: LD_ADDR_VAR 0 10
67559: PUSH
67560: LD_VAR 0 3
67564: PPUSH
67565: LD_VAR 0 11
67569: PPUSH
67570: LD_VAR 0 12
67574: PPUSH
67575: CALL_OW 273
67579: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
67580: LD_VAR 0 9
67584: PPUSH
67585: LD_VAR 0 10
67589: PPUSH
67590: CALL_OW 488
67594: PUSH
67595: LD_VAR 0 9
67599: PUSH
67600: LD_VAR 0 10
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_VAR 0 7
67613: IN
67614: NOT
67615: AND
67616: PUSH
67617: LD_VAR 0 9
67621: PPUSH
67622: LD_VAR 0 10
67626: PPUSH
67627: CALL_OW 458
67631: NOT
67632: AND
67633: IFFALSE 67675
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
67635: LD_ADDR_VAR 0 7
67639: PUSH
67640: LD_VAR 0 7
67644: PPUSH
67645: LD_VAR 0 7
67649: PUSH
67650: LD_INT 1
67652: PLUS
67653: PPUSH
67654: LD_VAR 0 9
67658: PUSH
67659: LD_VAR 0 10
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: PPUSH
67668: CALL_OW 1
67672: ST_TO_ADDR
67673: GO 67689
// i := i - 1 ;
67675: LD_ADDR_VAR 0 5
67679: PUSH
67680: LD_VAR 0 5
67684: PUSH
67685: LD_INT 1
67687: MINUS
67688: ST_TO_ADDR
// end ;
67689: GO 67495
67691: POP
67692: POP
// for i in tmp do
67693: LD_ADDR_VAR 0 5
67697: PUSH
67698: LD_VAR 0 7
67702: PUSH
67703: FOR_IN
67704: IFFALSE 67742
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
67706: LD_VAR 0 1
67710: PPUSH
67711: LD_VAR 0 5
67715: PUSH
67716: LD_INT 1
67718: ARRAY
67719: PPUSH
67720: LD_VAR 0 5
67724: PUSH
67725: LD_INT 2
67727: ARRAY
67728: PPUSH
67729: CALL 66688 0 3
67733: NOT
67734: IFFALSE 67740
// exit ;
67736: POP
67737: POP
67738: GO 67744
67740: GO 67703
67742: POP
67743: POP
// end ;
67744: LD_VAR 0 4
67748: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
67749: LD_INT 0
67751: PPUSH
67752: PPUSH
67753: PPUSH
67754: PPUSH
67755: PPUSH
67756: PPUSH
67757: PPUSH
// if not GetClass ( unit ) = class_sniper then
67758: LD_VAR 0 1
67762: PPUSH
67763: CALL_OW 257
67767: PUSH
67768: LD_INT 5
67770: EQUAL
67771: NOT
67772: IFFALSE 67776
// exit ;
67774: GO 68164
// dist := 8 ;
67776: LD_ADDR_VAR 0 5
67780: PUSH
67781: LD_INT 8
67783: ST_TO_ADDR
// viewRange := 12 ;
67784: LD_ADDR_VAR 0 7
67788: PUSH
67789: LD_INT 12
67791: ST_TO_ADDR
// side := GetSide ( unit ) ;
67792: LD_ADDR_VAR 0 6
67796: PUSH
67797: LD_VAR 0 1
67801: PPUSH
67802: CALL_OW 255
67806: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
67807: LD_INT 61
67809: PPUSH
67810: LD_VAR 0 6
67814: PPUSH
67815: CALL_OW 321
67819: PUSH
67820: LD_INT 2
67822: EQUAL
67823: IFFALSE 67833
// viewRange := 16 ;
67825: LD_ADDR_VAR 0 7
67829: PUSH
67830: LD_INT 16
67832: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
67833: LD_VAR 0 1
67837: PPUSH
67838: LD_VAR 0 2
67842: PPUSH
67843: LD_VAR 0 3
67847: PPUSH
67848: CALL_OW 297
67852: PUSH
67853: LD_VAR 0 5
67857: GREATER
67858: IFFALSE 67937
// begin ComMoveXY ( unit , x , y ) ;
67860: LD_VAR 0 1
67864: PPUSH
67865: LD_VAR 0 2
67869: PPUSH
67870: LD_VAR 0 3
67874: PPUSH
67875: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67879: LD_INT 35
67881: PPUSH
67882: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
67886: LD_VAR 0 1
67890: PPUSH
67891: LD_VAR 0 2
67895: PPUSH
67896: LD_VAR 0 3
67900: PPUSH
67901: CALL 42672 0 3
67905: NOT
67906: IFFALSE 67910
// exit ;
67908: GO 68164
// until GetDistUnitXY ( unit , x , y ) < dist ;
67910: LD_VAR 0 1
67914: PPUSH
67915: LD_VAR 0 2
67919: PPUSH
67920: LD_VAR 0 3
67924: PPUSH
67925: CALL_OW 297
67929: PUSH
67930: LD_VAR 0 5
67934: LESS
67935: IFFALSE 67879
// end ; ComTurnXY ( unit , x , y ) ;
67937: LD_VAR 0 1
67941: PPUSH
67942: LD_VAR 0 2
67946: PPUSH
67947: LD_VAR 0 3
67951: PPUSH
67952: CALL_OW 118
// wait ( 5 ) ;
67956: LD_INT 5
67958: PPUSH
67959: CALL_OW 67
// _d := GetDir ( unit ) ;
67963: LD_ADDR_VAR 0 10
67967: PUSH
67968: LD_VAR 0 1
67972: PPUSH
67973: CALL_OW 254
67977: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
67978: LD_ADDR_VAR 0 8
67982: PUSH
67983: LD_VAR 0 1
67987: PPUSH
67988: CALL_OW 250
67992: PPUSH
67993: LD_VAR 0 10
67997: PPUSH
67998: LD_VAR 0 5
68002: PPUSH
68003: CALL_OW 272
68007: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
68008: LD_ADDR_VAR 0 9
68012: PUSH
68013: LD_VAR 0 1
68017: PPUSH
68018: CALL_OW 251
68022: PPUSH
68023: LD_VAR 0 10
68027: PPUSH
68028: LD_VAR 0 5
68032: PPUSH
68033: CALL_OW 273
68037: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68038: LD_VAR 0 8
68042: PPUSH
68043: LD_VAR 0 9
68047: PPUSH
68048: CALL_OW 488
68052: NOT
68053: IFFALSE 68057
// exit ;
68055: GO 68164
// ComAnimCustom ( unit , 1 ) ;
68057: LD_VAR 0 1
68061: PPUSH
68062: LD_INT 1
68064: PPUSH
68065: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
68069: LD_VAR 0 8
68073: PPUSH
68074: LD_VAR 0 9
68078: PPUSH
68079: LD_VAR 0 6
68083: PPUSH
68084: LD_VAR 0 7
68088: PPUSH
68089: CALL_OW 330
// repeat wait ( 1 ) ;
68093: LD_INT 1
68095: PPUSH
68096: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
68100: LD_VAR 0 1
68104: PPUSH
68105: CALL_OW 316
68109: PUSH
68110: LD_VAR 0 1
68114: PPUSH
68115: CALL_OW 314
68119: OR
68120: PUSH
68121: LD_VAR 0 1
68125: PPUSH
68126: CALL_OW 302
68130: NOT
68131: OR
68132: PUSH
68133: LD_VAR 0 1
68137: PPUSH
68138: CALL_OW 301
68142: OR
68143: IFFALSE 68093
// RemoveSeeing ( _x , _y , side ) ;
68145: LD_VAR 0 8
68149: PPUSH
68150: LD_VAR 0 9
68154: PPUSH
68155: LD_VAR 0 6
68159: PPUSH
68160: CALL_OW 331
// end ;
68164: LD_VAR 0 4
68168: RET
