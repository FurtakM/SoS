// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// LoadTech ;
   8: CALL 3776 0 0
// CreateNature ;
  12: CALL 3647 0 0
// Action ;
  16: CALL 3918 0 0
// end ;
  20: END
// export debug , prefix , prefix9 , timeToHeikeDead , gameIsReady , prevMissionTime , heikeIsDead , kamikazed , startRussianAttacks ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prefix := 08_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 08_
  39: ST_TO_ADDR
// prefix9 := 09_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 09_
  47: ST_TO_ADDR
// solar_recharge_amount := 0 ;
  48: LD_ADDR_OWVAR 82
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// solar_recharge_percent := 0 ;
  56: LD_ADDR_OWVAR 79
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// timeToHeikeDead := LoadVariable ( 09_timeToHeikeDead , 16 16$00 ) ;
  64: LD_ADDR_EXP 4
  68: PUSH
  69: LD_STRING 09_timeToHeikeDead
  71: PPUSH
  72: LD_INT 33600
  74: PPUSH
  75: CALL_OW 30
  79: ST_TO_ADDR
// prevMissionTime := LoadVariable ( 09_tick , 15 15$00 ) ;
  80: LD_ADDR_EXP 6
  84: PUSH
  85: LD_STRING 09_tick
  87: PPUSH
  88: LD_INT 31500
  90: PPUSH
  91: CALL_OW 30
  95: ST_TO_ADDR
// heikeIsDead := prevMissionTime > timeToHeikeDead ;
  96: LD_ADDR_EXP 7
 100: PUSH
 101: LD_EXP 6
 105: PUSH
 106: LD_EXP 4
 110: GREATER
 111: ST_TO_ADDR
// gameIsReady := false ;
 112: LD_ADDR_EXP 5
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// startRussianAttacks := false ;
 120: LD_ADDR_EXP 9
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// end ; end_of_file
 128: LD_VAR 0 1
 132: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze , Schulz , Basim , Lemmy , Mia , Nia , Jenna , heikeSecondSquad , schulzSecondSquad ; export function PrepareArabian ; var i , un , tmp , vehicles , veh , p ; begin
 133: LD_INT 0
 135: PPUSH
 136: PPUSH
 137: PPUSH
 138: PPUSH
 139: PPUSH
 140: PPUSH
 141: PPUSH
// uc_side := 5 ;
 142: LD_ADDR_OWVAR 20
 146: PUSH
 147: LD_INT 5
 149: ST_TO_ADDR
// uc_nation := nation_arabian ;
 150: LD_ADDR_OWVAR 21
 154: PUSH
 155: LD_INT 2
 157: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
 158: LD_ADDR_EXP 10
 162: PUSH
 163: LD_STRING Heike
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_EXP 2
 176: PPUSH
 177: CALL 6425 0 3
 181: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
 182: LD_ADDR_EXP 13
 186: PUSH
 187: LD_STRING Ibrahim
 189: PPUSH
 190: LD_EXP 1
 194: NOT
 195: PPUSH
 196: LD_EXP 2
 200: PPUSH
 201: CALL 6425 0 3
 205: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
 206: LD_ADDR_EXP 11
 210: PUSH
 211: LD_STRING Givi
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_EXP 2
 224: PPUSH
 225: CALL 6425 0 3
 229: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
 230: LD_ADDR_EXP 14
 234: PUSH
 235: LD_STRING Kamil
 237: PPUSH
 238: LD_EXP 1
 242: NOT
 243: PPUSH
 244: LD_EXP 2
 248: PPUSH
 249: CALL 6425 0 3
 253: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
 254: LD_ADDR_EXP 15
 258: PUSH
 259: LD_STRING Kaia
 261: PPUSH
 262: LD_EXP 1
 266: NOT
 267: PPUSH
 268: LD_EXP 2
 272: PPUSH
 273: CALL 6425 0 3
 277: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
 278: LD_ADDR_EXP 16
 282: PUSH
 283: LD_STRING Sophia
 285: PPUSH
 286: LD_EXP 1
 290: NOT
 291: PPUSH
 292: LD_EXP 2
 296: PPUSH
 297: CALL 6425 0 3
 301: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
 302: LD_ADDR_EXP 17
 306: PUSH
 307: LD_STRING Markov
 309: PPUSH
 310: LD_EXP 1
 314: NOT
 315: PPUSH
 316: LD_EXP 2
 320: PPUSH
 321: CALL 6425 0 3
 325: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
 326: LD_ADDR_EXP 20
 330: PUSH
 331: LD_STRING Aviradze
 333: PPUSH
 334: LD_EXP 1
 338: NOT
 339: PPUSH
 340: LD_EXP 2
 344: PPUSH
 345: CALL 6425 0 3
 349: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , ( not debug ) , prefix ) ;
 350: LD_ADDR_EXP 19
 354: PUSH
 355: LD_STRING Kurt
 357: PPUSH
 358: LD_EXP 1
 362: NOT
 363: PPUSH
 364: LD_EXP 2
 368: PPUSH
 369: CALL 6425 0 3
 373: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
 374: LD_ADDR_EXP 12
 378: PUSH
 379: LD_STRING Mike
 381: PPUSH
 382: LD_EXP 1
 386: NOT
 387: PPUSH
 388: LD_EXP 2
 392: PPUSH
 393: CALL 6425 0 3
 397: ST_TO_ADDR
// Olaf := PrepareUnit ( Olaf , ( not debug ) , prefix ) ;
 398: LD_ADDR_EXP 18
 402: PUSH
 403: LD_STRING Olaf
 405: PPUSH
 406: LD_EXP 1
 410: NOT
 411: PPUSH
 412: LD_EXP 2
 416: PPUSH
 417: CALL 6425 0 3
 421: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 08_others ) ;
 422: LD_ADDR_EXP 27
 426: PUSH
 427: LD_STRING 08_others
 429: PPUSH
 430: CALL_OW 31
 434: ST_TO_ADDR
// uc_side := 8 ;
 435: LD_ADDR_OWVAR 20
 439: PUSH
 440: LD_INT 8
 442: ST_TO_ADDR
// Basim := NewCharacter ( Basim ) ;
 443: LD_ADDR_EXP 22
 447: PUSH
 448: LD_STRING Basim
 450: PPUSH
 451: CALL_OW 25
 455: ST_TO_ADDR
// SetClass ( Basim , 4 ) ;
 456: LD_EXP 22
 460: PPUSH
 461: LD_INT 4
 463: PPUSH
 464: CALL_OW 336
// uc_side := 2 ;
 468: LD_ADDR_OWVAR 20
 472: PUSH
 473: LD_INT 2
 475: ST_TO_ADDR
// uc_nation := nation_arabian ;
 476: LD_ADDR_OWVAR 21
 480: PUSH
 481: LD_INT 2
 483: ST_TO_ADDR
// Schulz := PrepareUnit ( Schulz , ( not debug ) , prefix9 ) ;
 484: LD_ADDR_EXP 21
 488: PUSH
 489: LD_STRING Schulz
 491: PPUSH
 492: LD_EXP 1
 496: NOT
 497: PPUSH
 498: LD_EXP 3
 502: PPUSH
 503: CALL 6425 0 3
 507: ST_TO_ADDR
// Lemmy := PrepareUnit ( Lemmy , ( not debug ) , prefix9 ) ;
 508: LD_ADDR_EXP 23
 512: PUSH
 513: LD_STRING Lemmy
 515: PPUSH
 516: LD_EXP 1
 520: NOT
 521: PPUSH
 522: LD_EXP 3
 526: PPUSH
 527: CALL 6425 0 3
 531: ST_TO_ADDR
// Mia := PrepareUnit ( Mia , ( not debug ) , prefix9 ) ;
 532: LD_ADDR_EXP 24
 536: PUSH
 537: LD_STRING Mia
 539: PPUSH
 540: LD_EXP 1
 544: NOT
 545: PPUSH
 546: LD_EXP 3
 550: PPUSH
 551: CALL 6425 0 3
 555: ST_TO_ADDR
// Nia := PrepareUnit ( Nia , ( not debug ) , prefix9 ) ;
 556: LD_ADDR_EXP 25
 560: PUSH
 561: LD_STRING Nia
 563: PPUSH
 564: LD_EXP 1
 568: NOT
 569: PPUSH
 570: LD_EXP 3
 574: PPUSH
 575: CALL 6425 0 3
 579: ST_TO_ADDR
// Jenna := PrepareUnit ( Jenna , ( not debug ) , prefix9 ) ;
 580: LD_ADDR_EXP 26
 584: PUSH
 585: LD_STRING Jenna
 587: PPUSH
 588: LD_EXP 1
 592: NOT
 593: PPUSH
 594: LD_EXP 3
 598: PPUSH
 599: CALL 6425 0 3
 603: ST_TO_ADDR
// schulzSecondSquad := CreateCharacterSet ( 09_schulzSecondSquad ) ;
 604: LD_ADDR_EXP 28
 608: PUSH
 609: LD_STRING 09_schulzSecondSquad
 611: PPUSH
 612: CALL_OW 31
 616: ST_TO_ADDR
// if debug then
 617: LD_EXP 1
 621: IFFALSE 685
// begin schulzSecondSquad := [ ] ;
 623: LD_ADDR_EXP 28
 627: PUSH
 628: EMPTY
 629: ST_TO_ADDR
// for i := 1 to 3 do
 630: LD_ADDR_VAR 0 2
 634: PUSH
 635: DOUBLE
 636: LD_INT 1
 638: DEC
 639: ST_TO_ADDR
 640: LD_INT 3
 642: PUSH
 643: FOR_TO
 644: IFFALSE 683
// begin PrepareHuman ( false , i , 6 ) ;
 646: LD_INT 0
 648: PPUSH
 649: LD_VAR 0 2
 653: PPUSH
 654: LD_INT 6
 656: PPUSH
 657: CALL_OW 380
// schulzSecondSquad := Join ( schulzSecondSquad , CreateHuman ) ;
 661: LD_ADDR_EXP 28
 665: PUSH
 666: LD_EXP 28
 670: PPUSH
 671: CALL_OW 44
 675: PPUSH
 676: CALL 44127 0 2
 680: ST_TO_ADDR
// end ;
 681: GO 643
 683: POP
 684: POP
// end ; vehicles := LoadVariable ( 09_vehicles , [ [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , - 2 , 1 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 2 ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun , 2 , 90 , 0 , 0 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_control_tower , 2 , 90 , 0 , 3 ] , [ ar_half_tracked , engine_combustion , control_manual , ar_gun , 2 , 90 , 0 , 4 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 5 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_rocket_launcher , 2 , 90 , 0 , 6 ] , [ ru_medium_tracked , engine_combustion , control_manual , ru_rocket_launcher , 3 , 90 , 0 , 7 ] , [ ar_medium_trike , engine_combustion , control_manual , ar_radar , 2 , 90 , 0 , 8 ] , ] ) ;
 685: LD_ADDR_VAR 0 5
 689: PUSH
 690: LD_STRING 09_vehicles
 692: PPUSH
 693: LD_INT 14
 695: PUSH
 696: LD_INT 1
 698: PUSH
 699: LD_INT 1
 701: PUSH
 702: LD_INT 27
 704: PUSH
 705: LD_INT 2
 707: PUSH
 708: LD_INT 90
 710: PUSH
 711: LD_INT 2
 713: NEG
 714: PUSH
 715: LD_INT 1
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: LIST
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 14
 730: PUSH
 731: LD_INT 1
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: LD_INT 90
 745: PUSH
 746: LD_INT 0
 748: PUSH
 749: LD_INT 2
 751: PUSH
 752: EMPTY
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: LIST
 759: LIST
 760: LIST
 761: PUSH
 762: LD_INT 14
 764: PUSH
 765: LD_INT 1
 767: PUSH
 768: LD_INT 2
 770: PUSH
 771: LD_INT 27
 773: PUSH
 774: LD_INT 2
 776: PUSH
 777: LD_INT 90
 779: PUSH
 780: LD_INT 0
 782: PUSH
 783: LD_INT 0
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: LIST
 790: LIST
 791: LIST
 792: LIST
 793: LIST
 794: LIST
 795: PUSH
 796: LD_INT 14
 798: PUSH
 799: LD_INT 1
 801: PUSH
 802: LD_INT 1
 804: PUSH
 805: LD_INT 31
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: LD_INT 90
 813: PUSH
 814: LD_INT 0
 816: PUSH
 817: LD_INT 3
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 14
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 27
 841: PUSH
 842: LD_INT 2
 844: PUSH
 845: LD_INT 90
 847: PUSH
 848: LD_INT 0
 850: PUSH
 851: LD_INT 4
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: LIST
 861: LIST
 862: LIST
 863: PUSH
 864: LD_INT 13
 866: PUSH
 867: LD_INT 1
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: LD_INT 28
 875: PUSH
 876: LD_INT 2
 878: PUSH
 879: LD_INT 90
 881: PUSH
 882: LD_INT 0
 884: PUSH
 885: LD_INT 5
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: LIST
 894: LIST
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 13
 900: PUSH
 901: LD_INT 1
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 28
 909: PUSH
 910: LD_INT 2
 912: PUSH
 913: LD_INT 90
 915: PUSH
 916: LD_INT 0
 918: PUSH
 919: LD_INT 6
 921: PUSH
 922: EMPTY
 923: LIST
 924: LIST
 925: LIST
 926: LIST
 927: LIST
 928: LIST
 929: LIST
 930: LIST
 931: PUSH
 932: LD_INT 22
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 1
 940: PUSH
 941: LD_INT 45
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: LD_INT 90
 949: PUSH
 950: LD_INT 0
 952: PUSH
 953: LD_INT 7
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: LIST
 960: LIST
 961: LIST
 962: LIST
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 13
 968: PUSH
 969: LD_INT 1
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: LD_INT 30
 977: PUSH
 978: LD_INT 2
 980: PUSH
 981: LD_INT 90
 983: PUSH
 984: LD_INT 0
 986: PUSH
 987: LD_INT 8
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: LIST
 994: LIST
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 30
1015: ST_TO_ADDR
// SpawnInto ( Schulz , LoadVariable ( 09_Schulz_ID , 1 ) , vehicles , 0 ) ;
1016: LD_EXP 21
1020: PPUSH
1021: LD_STRING 09_Schulz_ID
1023: PPUSH
1024: LD_INT 1
1026: PPUSH
1027: CALL_OW 30
1031: PPUSH
1032: LD_VAR 0 5
1036: PPUSH
1037: LD_INT 0
1039: PPUSH
1040: CALL 1511 0 4
// SpawnInto ( Lemmy , LoadVariable ( 09_Lemmy_ID , 2 ) , vehicles , 1 ) ;
1044: LD_EXP 23
1048: PPUSH
1049: LD_STRING 09_Lemmy_ID
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: CALL_OW 30
1059: PPUSH
1060: LD_VAR 0 5
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL 1511 0 4
// SpawnInto ( Mia , LoadVariable ( 09_Mia_ID , 3 ) , vehicles , 2 ) ;
1072: LD_EXP 24
1076: PPUSH
1077: LD_STRING 09_Mia_ID
1079: PPUSH
1080: LD_INT 3
1082: PPUSH
1083: CALL_OW 30
1087: PPUSH
1088: LD_VAR 0 5
1092: PPUSH
1093: LD_INT 2
1095: PPUSH
1096: CALL 1511 0 4
// SpawnInto ( Nia , LoadVariable ( 09_Nia_ID , 4 ) , vehicles , 3 ) ;
1100: LD_EXP 25
1104: PPUSH
1105: LD_STRING 09_Nia_ID
1107: PPUSH
1108: LD_INT 4
1110: PPUSH
1111: CALL_OW 30
1115: PPUSH
1116: LD_VAR 0 5
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: CALL 1511 0 4
// SpawnInto ( Jenna , LoadVariable ( 09_Jenna_ID , 5 ) , vehicles , 4 ) ;
1128: LD_EXP 26
1132: PPUSH
1133: LD_STRING 09_Jenna_ID
1135: PPUSH
1136: LD_INT 5
1138: PPUSH
1139: CALL_OW 30
1143: PPUSH
1144: LD_VAR 0 5
1148: PPUSH
1149: LD_INT 4
1151: PPUSH
1152: CALL 1511 0 4
// for i := 1 to schulzSecondSquad do
1156: LD_ADDR_VAR 0 2
1160: PUSH
1161: DOUBLE
1162: LD_INT 1
1164: DEC
1165: ST_TO_ADDR
1166: LD_EXP 28
1170: PUSH
1171: FOR_TO
1172: IFFALSE 1228
// SpawnInto ( schulzSecondSquad [ i ] , LoadVariable ( 09_random_ID_ & i , 5 + i ) , vehicles , 4 + i ) ;
1174: LD_EXP 28
1178: PUSH
1179: LD_VAR 0 2
1183: ARRAY
1184: PPUSH
1185: LD_STRING 09_random_ID_
1187: PUSH
1188: LD_VAR 0 2
1192: STR
1193: PPUSH
1194: LD_INT 5
1196: PUSH
1197: LD_VAR 0 2
1201: PLUS
1202: PPUSH
1203: CALL_OW 30
1207: PPUSH
1208: LD_VAR 0 5
1212: PPUSH
1213: LD_INT 4
1215: PUSH
1216: LD_VAR 0 2
1220: PLUS
1221: PPUSH
1222: CALL 1511 0 4
1226: GO 1171
1228: POP
1229: POP
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) then
1230: LD_INT 22
1232: PUSH
1233: LD_INT 2
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PUSH
1240: LD_INT 34
1242: PUSH
1243: LD_INT 31
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: PPUSH
1254: CALL_OW 69
1258: IFFALSE 1498
// begin for i in vehicles do
1260: LD_ADDR_VAR 0 2
1264: PUSH
1265: LD_VAR 0 5
1269: PUSH
1270: FOR_IN
1271: IFFALSE 1496
// begin p := 0 ;
1273: LD_ADDR_VAR 0 7
1277: PUSH
1278: LD_INT 0
1280: ST_TO_ADDR
// if i [ 3 ] = control_remote then
1281: LD_VAR 0 2
1285: PUSH
1286: LD_INT 3
1288: ARRAY
1289: PUSH
1290: LD_INT 2
1292: EQUAL
1293: IFFALSE 1494
// begin uc_side := 2 ;
1295: LD_ADDR_OWVAR 20
1299: PUSH
1300: LD_INT 2
1302: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1303: LD_ADDR_OWVAR 21
1307: PUSH
1308: LD_VAR 0 2
1312: PUSH
1313: LD_INT 5
1315: ARRAY
1316: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1317: LD_VAR 0 2
1321: PUSH
1322: LD_INT 1
1324: ARRAY
1325: PPUSH
1326: LD_VAR 0 2
1330: PUSH
1331: LD_INT 2
1333: ARRAY
1334: PPUSH
1335: LD_VAR 0 2
1339: PUSH
1340: LD_INT 3
1342: ARRAY
1343: PPUSH
1344: LD_VAR 0 2
1348: PUSH
1349: LD_INT 4
1351: ARRAY
1352: PPUSH
1353: LD_VAR 0 2
1357: PUSH
1358: LD_INT 6
1360: ARRAY
1361: PPUSH
1362: CALL 11265 0 5
// veh := CreateVehicle ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: CALL_OW 45
1375: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1376: LD_VAR 0 6
1380: PPUSH
1381: LD_INT 2
1383: PPUSH
1384: CALL_OW 233
// repeat wait ( 0 0$2 ) ;
1388: LD_INT 70
1390: PPUSH
1391: CALL_OW 67
// p := p + 2 ;
1395: LD_ADDR_VAR 0 7
1399: PUSH
1400: LD_VAR 0 7
1404: PUSH
1405: LD_INT 2
1407: PLUS
1408: ST_TO_ADDR
// if p > 8 then
1409: LD_VAR 0 7
1413: PUSH
1414: LD_INT 8
1416: GREATER
1417: IFFALSE 1421
// break ;
1419: GO 1437
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1421: LD_INT 6
1423: PPUSH
1424: LD_INT 50
1426: PUSH
1427: EMPTY
1428: LIST
1429: PPUSH
1430: CALL_OW 70
1434: NOT
1435: IFFALSE 1388
// PlaceUnitArea ( veh , startArea , false ) ;
1437: LD_VAR 0 6
1441: PPUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// repeat Connect ( veh ) ;
1452: LD_VAR 0 6
1456: PPUSH
1457: CALL 14733 0 1
// wait ( 0 0$1 ) ;
1461: LD_INT 35
1463: PPUSH
1464: CALL_OW 67
// until IsControledBy ( veh ) ;
1468: LD_VAR 0 6
1472: PPUSH
1473: CALL_OW 312
1477: IFFALSE 1452
// ComMoveXY ( veh , 26 , 23 ) ;
1479: LD_VAR 0 6
1483: PPUSH
1484: LD_INT 26
1486: PPUSH
1487: LD_INT 23
1489: PPUSH
1490: CALL_OW 111
// end ; end ;
1494: GO 1270
1496: POP
1497: POP
// end ; gameIsReady := true ;
1498: LD_ADDR_EXP 5
1502: PUSH
1503: LD_INT 1
1505: ST_TO_ADDR
// end ;
1506: LD_VAR 0 1
1510: RET
// function SpawnInto ( unit , number , vehicles , step ) ; var i , veh ; begin
1511: LD_INT 0
1513: PPUSH
1514: PPUSH
1515: PPUSH
// for i in vehicles do
1516: LD_ADDR_VAR 0 6
1520: PUSH
1521: LD_VAR 0 3
1525: PUSH
1526: FOR_IN
1527: IFFALSE 1761
// if i [ 8 ] = number then
1529: LD_VAR 0 6
1533: PUSH
1534: LD_INT 8
1536: ARRAY
1537: PUSH
1538: LD_VAR 0 2
1542: EQUAL
1543: IFFALSE 1759
// begin uc_side := 2 ;
1545: LD_ADDR_OWVAR 20
1549: PUSH
1550: LD_INT 2
1552: ST_TO_ADDR
// uc_nation := i [ 5 ] ;
1553: LD_ADDR_OWVAR 21
1557: PUSH
1558: LD_VAR 0 6
1562: PUSH
1563: LD_INT 5
1565: ARRAY
1566: ST_TO_ADDR
// PrepareVehicle ( i [ 1 ] , i [ 2 ] , i [ 3 ] , i [ 4 ] , i [ 6 ] ) ;
1567: LD_VAR 0 6
1571: PUSH
1572: LD_INT 1
1574: ARRAY
1575: PPUSH
1576: LD_VAR 0 6
1580: PUSH
1581: LD_INT 2
1583: ARRAY
1584: PPUSH
1585: LD_VAR 0 6
1589: PUSH
1590: LD_INT 3
1592: ARRAY
1593: PPUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_INT 4
1601: ARRAY
1602: PPUSH
1603: LD_VAR 0 6
1607: PUSH
1608: LD_INT 6
1610: ARRAY
1611: PPUSH
1612: CALL 11265 0 5
// veh := CreateVehicle ;
1616: LD_ADDR_VAR 0 7
1620: PUSH
1621: CALL_OW 45
1625: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
1626: LD_VAR 0 7
1630: PPUSH
1631: LD_INT 2
1633: PPUSH
1634: CALL_OW 233
// if i [ 7 ] < 0 then
1638: LD_VAR 0 6
1642: PUSH
1643: LD_INT 7
1645: ARRAY
1646: PUSH
1647: LD_INT 0
1649: LESS
1650: IFFALSE 1670
// SetMark ( veh , i [ 7 ] ) ;
1652: LD_VAR 0 7
1656: PPUSH
1657: LD_VAR 0 6
1661: PUSH
1662: LD_INT 7
1664: ARRAY
1665: PPUSH
1666: CALL_OW 242
// repeat wait ( 0 0$2 ) ;
1670: LD_INT 70
1672: PPUSH
1673: CALL_OW 67
// until not FilterUnitsInArea ( startBlockArea , [ f_ok ] ) ;
1677: LD_INT 6
1679: PPUSH
1680: LD_INT 50
1682: PUSH
1683: EMPTY
1684: LIST
1685: PPUSH
1686: CALL_OW 70
1690: NOT
1691: IFFALSE 1670
// PlaceUnitArea ( veh , startArea , false ) ;
1693: LD_VAR 0 7
1697: PPUSH
1698: LD_INT 1
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// PlaceHumanInUnit ( unit , veh ) ;
1708: LD_VAR 0 1
1712: PPUSH
1713: LD_VAR 0 7
1717: PPUSH
1718: CALL_OW 52
// ComMoveXY ( unit , 26 - ( step * 2 ) , 30 - ( step * 2 ) ) ;
1722: LD_VAR 0 1
1726: PPUSH
1727: LD_INT 26
1729: PUSH
1730: LD_VAR 0 4
1734: PUSH
1735: LD_INT 2
1737: MUL
1738: MINUS
1739: PPUSH
1740: LD_INT 30
1742: PUSH
1743: LD_VAR 0 4
1747: PUSH
1748: LD_INT 2
1750: MUL
1751: MINUS
1752: PPUSH
1753: CALL_OW 111
// break ;
1757: GO 1761
// end ;
1759: GO 1526
1761: POP
1762: POP
// end ;
1763: LD_VAR 0 5
1767: RET
// export function PrepareHeikeCamp ; var i , tmp , b ; begin
1768: LD_INT 0
1770: PPUSH
1771: PPUSH
1772: PPUSH
1773: PPUSH
// tmp := [ Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Olaf , Kurt , Aviradze ] union heikeSecondSquad ;
1774: LD_ADDR_VAR 0 3
1778: PUSH
1779: LD_EXP 11
1783: PUSH
1784: LD_EXP 12
1788: PUSH
1789: LD_EXP 13
1793: PUSH
1794: LD_EXP 14
1798: PUSH
1799: LD_EXP 15
1803: PUSH
1804: LD_EXP 16
1808: PUSH
1809: LD_EXP 17
1813: PUSH
1814: LD_EXP 18
1818: PUSH
1819: LD_EXP 19
1823: PUSH
1824: LD_EXP 20
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_EXP 27
1845: UNION
1846: ST_TO_ADDR
// if heikeIsDead then
1847: LD_EXP 7
1851: IFFALSE 1982
// begin PlaceUnitXY ( Heike , 117 , 57 , false ) ;
1853: LD_EXP 10
1857: PPUSH
1858: LD_INT 117
1860: PPUSH
1861: LD_INT 57
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 48
// SetLives ( Heike , 1 ) ;
1871: LD_EXP 10
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL_OW 234
// for i in tmp do
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: LD_VAR 0 3
1892: PUSH
1893: FOR_IN
1894: IFFALSE 1925
// begin PlaceUnitArea ( i , failHeikeArea , false ) ;
1896: LD_VAR 0 2
1900: PPUSH
1901: LD_INT 7
1903: PPUSH
1904: LD_INT 0
1906: PPUSH
1907: CALL_OW 49
// SetLives ( i , 1 ) ;
1911: LD_VAR 0 2
1915: PPUSH
1916: LD_INT 1
1918: PPUSH
1919: CALL_OW 234
// end ;
1923: GO 1893
1925: POP
1926: POP
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1927: LD_ADDR_VAR 0 2
1931: PUSH
1932: LD_INT 22
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 21
1944: PUSH
1945: LD_INT 3
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 69
1960: PUSH
1961: FOR_IN
1962: IFFALSE 1978
// SetLives ( i , 190 ) ;
1964: LD_VAR 0 2
1968: PPUSH
1969: LD_INT 190
1971: PPUSH
1972: CALL_OW 234
1976: GO 1961
1978: POP
1979: POP
// end else
1980: GO 2475
// begin for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] ] ) do
1982: LD_ADDR_VAR 0 2
1986: PUSH
1987: LD_INT 22
1989: PUSH
1990: LD_INT 5
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 21
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PPUSH
2011: CALL_OW 69
2015: PUSH
2016: FOR_IN
2017: IFFALSE 2053
// begin SetBLevel ( i , 6 ) ;
2019: LD_VAR 0 2
2023: PPUSH
2024: LD_INT 6
2026: PPUSH
2027: CALL_OW 241
// SetLives ( i , rand ( 500 , 800 ) ) ;
2031: LD_VAR 0 2
2035: PPUSH
2036: LD_INT 500
2038: PPUSH
2039: LD_INT 800
2041: PPUSH
2042: CALL_OW 12
2046: PPUSH
2047: CALL_OW 234
// end ;
2051: GO 2016
2053: POP
2054: POP
// PlaceHumanInUnit ( Heike , arDep ) ;
2055: LD_EXP 10
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 52
// SetLives ( Heike , 500 ) ;
2067: LD_EXP 10
2071: PPUSH
2072: LD_INT 500
2074: PPUSH
2075: CALL_OW 234
// if GetClass ( Heike ) = class_prison then
2079: LD_EXP 10
2083: PPUSH
2084: CALL_OW 257
2088: PUSH
2089: LD_INT 33
2091: EQUAL
2092: IFFALSE 2106
// SetClass ( Heike , class_soldier ) ;
2094: LD_EXP 10
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: CALL_OW 336
// for i in tmp do
2106: LD_ADDR_VAR 0 2
2110: PUSH
2111: LD_VAR 0 3
2115: PUSH
2116: FOR_IN
2117: IFFALSE 2473
// begin if GetClass ( i ) = class_prison then
2119: LD_VAR 0 2
2123: PPUSH
2124: CALL_OW 257
2128: PUSH
2129: LD_INT 33
2131: EQUAL
2132: IFFALSE 2188
// if GetSkill ( i , 2 ) > GetSkill ( i , 1 ) then
2134: LD_VAR 0 2
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: CALL_OW 259
2146: PUSH
2147: LD_VAR 0 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL_OW 259
2159: GREATER
2160: IFFALSE 2176
// SetClass ( i , class_engineer ) else
2162: LD_VAR 0 2
2166: PPUSH
2167: LD_INT 2
2169: PPUSH
2170: CALL_OW 336
2174: GO 2188
// SetClass ( i , class_soldier ) ;
2176: LD_VAR 0 2
2180: PPUSH
2181: LD_INT 1
2183: PPUSH
2184: CALL_OW 336
// if GetClass ( i ) in [ class_mechanic , class_desert_warior , class_revolver ] then
2188: LD_VAR 0 2
2192: PPUSH
2193: CALL_OW 257
2197: PUSH
2198: LD_INT 3
2200: PUSH
2201: LD_INT 11
2203: PUSH
2204: LD_INT 34
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: LIST
2211: IN
2212: IFFALSE 2226
// SetClass ( i , class_soldier ) ;
2214: LD_VAR 0 2
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 336
// if GetClass ( i ) = class_engineer then
2226: LD_VAR 0 2
2230: PPUSH
2231: CALL_OW 257
2235: PUSH
2236: LD_INT 2
2238: EQUAL
2239: IFFALSE 2282
// begin if not PlaceUnitInArea ( i , engArea , false ) then
2241: LD_VAR 0 2
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: LD_INT 0
2251: PPUSH
2252: CALL 43032 0 3
2256: NOT
2257: IFFALSE 2280
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2259: LD_VAR 0 2
2263: PPUSH
2264: LD_INT 117
2266: PPUSH
2267: LD_INT 62
2269: PPUSH
2270: LD_INT 4
2272: PPUSH
2273: LD_INT 0
2275: PPUSH
2276: CALL_OW 50
// end else
2280: GO 2471
// if GetClass ( i ) in [ class_soldier , class_hunter ] then
2282: LD_VAR 0 2
2286: PPUSH
2287: CALL_OW 257
2291: PUSH
2292: LD_INT 1
2294: PUSH
2295: LD_INT 32
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: IN
2302: IFFALSE 2450
// begin b := FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_building ] , [ f_not , [ f_btype , b_depot ] ] , [ f_not , [ f_full ] ] ] ) ;
2304: LD_ADDR_VAR 0 4
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 5
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 21
2321: PUSH
2322: LD_INT 3
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: LD_INT 3
2331: PUSH
2332: LD_INT 30
2334: PUSH
2335: LD_INT 0
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: EMPTY
2343: LIST
2344: LIST
2345: PUSH
2346: LD_INT 3
2348: PUSH
2349: LD_INT 62
2351: PUSH
2352: EMPTY
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: PPUSH
2365: CALL_OW 69
2369: ST_TO_ADDR
// if b then
2370: LD_VAR 0 4
2374: IFFALSE 2427
// begin SetDir ( i , GetDir ( b [ b ] ) - 3 ) ;
2376: LD_VAR 0 2
2380: PPUSH
2381: LD_VAR 0 4
2385: PUSH
2386: LD_VAR 0 4
2390: ARRAY
2391: PPUSH
2392: CALL_OW 254
2396: PUSH
2397: LD_INT 3
2399: MINUS
2400: PPUSH
2401: CALL_OW 233
// PlaceHumanInUnit ( i , b [ b ] ) ;
2405: LD_VAR 0 2
2409: PPUSH
2410: LD_VAR 0 4
2414: PUSH
2415: LD_VAR 0 4
2419: ARRAY
2420: PPUSH
2421: CALL_OW 52
// end else
2425: GO 2448
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2427: LD_VAR 0 2
2431: PPUSH
2432: LD_INT 117
2434: PPUSH
2435: LD_INT 62
2437: PPUSH
2438: LD_INT 4
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 50
// end else
2448: GO 2471
// PlaceUnitXYR ( i , 117 , 62 , 4 , false ) ;
2450: LD_VAR 0 2
2454: PPUSH
2455: LD_INT 117
2457: PPUSH
2458: LD_INT 62
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: LD_INT 0
2466: PPUSH
2467: CALL_OW 50
// end ;
2471: GO 2116
2473: POP
2474: POP
// end ; end ;
2475: LD_VAR 0 1
2479: RET
// export function PrepareBasim ; var i , un ; begin
2480: LD_INT 0
2482: PPUSH
2483: PPUSH
2484: PPUSH
// PlaceUnitArea ( Basim , northStartArea , false ) ;
2485: LD_EXP 22
2489: PPUSH
2490: LD_INT 2
2492: PPUSH
2493: LD_INT 0
2495: PPUSH
2496: CALL_OW 49
// for i := 1 to 3 do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 3
2512: PUSH
2513: FOR_TO
2514: IFFALSE 2636
// begin uc_side := 8 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 8
2523: ST_TO_ADDR
// uc_nation := nation_nature ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
2532: LD_ADDR_OWVAR 28
2536: PUSH
2537: LD_INT 17
2539: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
2540: LD_ADDR_OWVAR 31
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: LD_INT 0
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: LD_INT 0
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: LIST
2561: LIST
2562: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
2563: LD_ADDR_OWVAR 29
2567: PUSH
2568: LD_INT 10
2570: PUSH
2571: LD_INT 10
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: ST_TO_ADDR
// hc_name :=  ;
2578: LD_ADDR_OWVAR 26
2582: PUSH
2583: LD_STRING 
2585: ST_TO_ADDR
// hc_gallery :=  ;
2586: LD_ADDR_OWVAR 33
2590: PUSH
2591: LD_STRING 
2593: ST_TO_ADDR
// un := CreateHuman ;
2594: LD_ADDR_VAR 0 3
2598: PUSH
2599: CALL_OW 44
2603: ST_TO_ADDR
// PlaceUnitArea ( un , northStartArea , false ) ;
2604: LD_VAR 0 3
2608: PPUSH
2609: LD_INT 2
2611: PPUSH
2612: LD_INT 0
2614: PPUSH
2615: CALL_OW 49
// ComAgressiveMove ( un , 114 , 34 ) ;
2619: LD_VAR 0 3
2623: PPUSH
2624: LD_INT 114
2626: PPUSH
2627: LD_INT 34
2629: PPUSH
2630: CALL_OW 114
// end ;
2634: GO 2513
2636: POP
2637: POP
// wait ( 0 0$2 ) ;
2638: LD_INT 70
2640: PPUSH
2641: CALL_OW 67
// ComMoveXY ( Basim , 100 , 25 ) ;
2645: LD_EXP 22
2649: PPUSH
2650: LD_INT 100
2652: PPUSH
2653: LD_INT 25
2655: PPUSH
2656: CALL_OW 111
// AddComMoveXY ( Basim , 107 , 52 ) ;
2660: LD_EXP 22
2664: PPUSH
2665: LD_INT 107
2667: PPUSH
2668: LD_INT 52
2670: PPUSH
2671: CALL_OW 171
// end ; end_of_file
2675: LD_VAR 0 1
2679: RET
// export function PrepareRussianBaseAttackers ; var i , un , tmp ; begin
2680: LD_INT 0
2682: PPUSH
2683: PPUSH
2684: PPUSH
2685: PPUSH
// for i := 1 to 12 do
2686: LD_ADDR_VAR 0 2
2690: PUSH
2691: DOUBLE
2692: LD_INT 1
2694: DEC
2695: ST_TO_ADDR
2696: LD_INT 12
2698: PUSH
2699: FOR_TO
2700: IFFALSE 2803
// begin uc_side := 3 ;
2702: LD_ADDR_OWVAR 20
2706: PUSH
2707: LD_INT 3
2709: ST_TO_ADDR
// uc_nation := nation_russian ;
2710: LD_ADDR_OWVAR 21
2714: PUSH
2715: LD_INT 3
2717: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
2718: LD_INT 0
2720: PPUSH
2721: LD_INT 3
2723: PPUSH
2724: CALL_OW 381
// un := CreateHuman ;
2728: LD_ADDR_VAR 0 3
2732: PUSH
2733: CALL_OW 44
2737: ST_TO_ADDR
// if Prob ( 50 ) then
2738: LD_INT 50
2740: PPUSH
2741: CALL_OW 13
2745: IFFALSE 2759
// SetClass ( un , class_bazooker ) ;
2747: LD_VAR 0 3
2751: PPUSH
2752: LD_INT 9
2754: PPUSH
2755: CALL_OW 336
// SetDir ( un , 2 ) ;
2759: LD_VAR 0 3
2763: PPUSH
2764: LD_INT 2
2766: PPUSH
2767: CALL_OW 233
// PlaceUnitArea ( un , russianNorthEastAttackersArea , false ) ;
2771: LD_VAR 0 3
2775: PPUSH
2776: LD_INT 10
2778: PPUSH
2779: LD_INT 0
2781: PPUSH
2782: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2786: LD_VAR 0 3
2790: PPUSH
2791: LD_INT 116
2793: PPUSH
2794: LD_INT 51
2796: PPUSH
2797: CALL_OW 114
// end ;
2801: GO 2699
2803: POP
2804: POP
// for i := 1 to 3 do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: DOUBLE
2811: LD_INT 1
2813: DEC
2814: ST_TO_ADDR
2815: LD_INT 3
2817: PUSH
2818: FOR_TO
2819: IFFALSE 2927
// begin uc_side := 3 ;
2821: LD_ADDR_OWVAR 20
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// uc_nation := nation_russian ;
2829: LD_ADDR_OWVAR 21
2833: PUSH
2834: LD_INT 3
2836: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher ] [ i ] , 100 ) ;
2837: LD_INT 22
2839: PPUSH
2840: LD_INT 3
2842: PPUSH
2843: LD_INT 3
2845: PPUSH
2846: LD_INT 44
2848: PUSH
2849: LD_INT 45
2851: PUSH
2852: LD_INT 45
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_VAR 0 2
2864: ARRAY
2865: PPUSH
2866: LD_INT 100
2868: PPUSH
2869: CALL 11265 0 5
// un := CreateVehicle ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 45
2882: ST_TO_ADDR
// SetDir ( un , 4 ) ;
2883: LD_VAR 0 3
2887: PPUSH
2888: LD_INT 4
2890: PPUSH
2891: CALL_OW 233
// PlaceUnitArea ( un , russianEastAttackersArea , false ) ;
2895: LD_VAR 0 3
2899: PPUSH
2900: LD_INT 11
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// ComAgressiveMove ( un , 116 , 51 ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 116
2917: PPUSH
2918: LD_INT 51
2920: PPUSH
2921: CALL_OW 114
// end ;
2925: GO 2818
2927: POP
2928: POP
// end ;
2929: LD_VAR 0 1
2933: RET
// every 0 0$30 trigger startRussianAttacks do var i , un , tmp ;
2934: LD_EXP 9
2938: IFFALSE 3185
2940: GO 2942
2942: DISABLE
2943: LD_INT 0
2945: PPUSH
2946: PPUSH
2947: PPUSH
// begin tmp := [ ] ;
2948: LD_ADDR_VAR 0 3
2952: PUSH
2953: EMPTY
2954: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2955: LD_ADDR_VAR 0 1
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 4
2967: PUSH
2968: LD_INT 5
2970: PUSH
2971: LD_INT 6
2973: PUSH
2974: LD_INT 7
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: PUSH
2983: LD_OWVAR 67
2987: ARRAY
2988: PUSH
2989: FOR_TO
2990: IFFALSE 3107
// begin uc_side := 3 ;
2992: LD_ADDR_OWVAR 20
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// uc_nation := nation_russian ;
3000: LD_ADDR_OWVAR 21
3004: PUSH
3005: LD_INT 3
3007: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3008: LD_INT 0
3010: PPUSH
3011: LD_INT 6
3013: PUSH
3014: LD_INT 7
3016: PUSH
3017: LD_INT 8
3019: PUSH
3020: LD_INT 9
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: LIST
3027: LIST
3028: PUSH
3029: LD_OWVAR 67
3033: ARRAY
3034: PPUSH
3035: CALL_OW 381
// un := CreateHuman ;
3039: LD_ADDR_VAR 0 2
3043: PUSH
3044: CALL_OW 44
3048: ST_TO_ADDR
// if Prob ( 50 ) then
3049: LD_INT 50
3051: PPUSH
3052: CALL_OW 13
3056: IFFALSE 3070
// SetClass ( un , class_bazooker ) ;
3058: LD_VAR 0 2
3062: PPUSH
3063: LD_INT 9
3065: PPUSH
3066: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3070: LD_VAR 0 2
3074: PPUSH
3075: LD_INT 12
3077: PPUSH
3078: LD_INT 0
3080: PPUSH
3081: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3085: LD_ADDR_VAR 0 3
3089: PUSH
3090: LD_VAR 0 3
3094: PPUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: CALL 44127 0 2
3104: ST_TO_ADDR
// end ;
3105: GO 2989
3107: POP
3108: POP
// repeat wait ( 0 0$1 ) ;
3109: LD_INT 35
3111: PPUSH
3112: CALL_OW 67
// for i in tmp do
3116: LD_ADDR_VAR 0 1
3120: PUSH
3121: LD_VAR 0 3
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3165
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3129: LD_VAR 0 1
3133: PPUSH
3134: LD_INT 22
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 115
3163: GO 3126
3165: POP
3166: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3167: LD_VAR 0 3
3171: PPUSH
3172: LD_INT 50
3174: PUSH
3175: EMPTY
3176: LIST
3177: PPUSH
3178: CALL_OW 72
3182: NOT
3183: IFFALSE 3109
// end ;
3185: PPOPN 3
3187: END
// every 0 0$10 trigger startRussianAttacks and FilterUnitsInArea ( endArea , [ f_side , 2 ] ) do var i , un , tmp ;
3188: LD_EXP 9
3192: PUSH
3193: LD_INT 13
3195: PPUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 2
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PPUSH
3206: CALL_OW 70
3210: AND
3211: IFFALSE 3644
3213: GO 3215
3215: DISABLE
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
// begin tmp := [ ] ;
3221: LD_ADDR_VAR 0 3
3225: PUSH
3226: EMPTY
3227: ST_TO_ADDR
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
3228: LD_ADDR_VAR 0 1
3232: PUSH
3233: DOUBLE
3234: LD_INT 1
3236: DEC
3237: ST_TO_ADDR
3238: LD_INT 3
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 5
3246: PUSH
3247: LD_INT 6
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: PUSH
3256: LD_OWVAR 67
3260: ARRAY
3261: PUSH
3262: FOR_TO
3263: IFFALSE 3380
// begin uc_side := 3 ;
3265: LD_ADDR_OWVAR 20
3269: PUSH
3270: LD_INT 3
3272: ST_TO_ADDR
// uc_nation := nation_russian ;
3273: LD_ADDR_OWVAR 21
3277: PUSH
3278: LD_INT 3
3280: ST_TO_ADDR
// PrepareSoldier ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 6
3286: PUSH
3287: LD_INT 7
3289: PUSH
3290: LD_INT 8
3292: PUSH
3293: LD_INT 9
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: PUSH
3302: LD_OWVAR 67
3306: ARRAY
3307: PPUSH
3308: CALL_OW 381
// un := CreateHuman ;
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: CALL_OW 44
3321: ST_TO_ADDR
// if Prob ( 50 ) then
3322: LD_INT 50
3324: PPUSH
3325: CALL_OW 13
3329: IFFALSE 3343
// SetClass ( un , class_bazooker ) ;
3331: LD_VAR 0 2
3335: PPUSH
3336: LD_INT 9
3338: PPUSH
3339: CALL_OW 336
// PlaceUnitArea ( un , russianNorthAttackersArea , false ) ;
3343: LD_VAR 0 2
3347: PPUSH
3348: LD_INT 12
3350: PPUSH
3351: LD_INT 0
3353: PPUSH
3354: CALL_OW 49
// tmp := Join ( tmp , un ) ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_VAR 0 2
3372: PPUSH
3373: CALL 44127 0 2
3377: ST_TO_ADDR
// end ;
3378: GO 3262
3380: POP
3381: POP
// for i := 1 to 4 do
3382: LD_ADDR_VAR 0 1
3386: PUSH
3387: DOUBLE
3388: LD_INT 1
3390: DEC
3391: ST_TO_ADDR
3392: LD_INT 4
3394: PUSH
3395: FOR_TO
3396: IFFALSE 3566
// begin uc_side := 3 ;
3398: LD_ADDR_OWVAR 20
3402: PUSH
3403: LD_INT 3
3405: ST_TO_ADDR
// uc_nation := nation_russian ;
3406: LD_ADDR_OWVAR 21
3410: PUSH
3411: LD_INT 3
3413: ST_TO_ADDR
// PrepareMechanic ( false , [ 6 , 7 , 8 , 9 ] [ Difficulty ] ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_INT 6
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 8
3425: PUSH
3426: LD_INT 9
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: PUSH
3435: LD_OWVAR 67
3439: ARRAY
3440: PPUSH
3441: CALL_OW 383
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_gun , ru_rocket_launcher ] [ i mod 4 + 1 ] , 100 ) ;
3445: LD_INT 22
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 1
3453: PPUSH
3454: LD_INT 43
3456: PUSH
3457: LD_INT 44
3459: PUSH
3460: LD_INT 44
3462: PUSH
3463: LD_INT 45
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_VAR 0 1
3476: PUSH
3477: LD_INT 4
3479: MOD
3480: PUSH
3481: LD_INT 1
3483: PLUS
3484: ARRAY
3485: PPUSH
3486: LD_INT 100
3488: PPUSH
3489: CALL 11265 0 5
// un := CreateVehicle ;
3493: LD_ADDR_VAR 0 2
3497: PUSH
3498: CALL_OW 45
3502: ST_TO_ADDR
// SetDir ( un , 4 ) ;
3503: LD_VAR 0 2
3507: PPUSH
3508: LD_INT 4
3510: PPUSH
3511: CALL_OW 233
// PlaceUnitArea ( un , eastStartArea , false ) ;
3515: LD_VAR 0 2
3519: PPUSH
3520: LD_INT 3
3522: PPUSH
3523: LD_INT 0
3525: PPUSH
3526: CALL_OW 49
// PlaceHumanInUnit ( CreateHuman , un ) ;
3530: CALL_OW 44
3534: PPUSH
3535: LD_VAR 0 2
3539: PPUSH
3540: CALL_OW 52
// tmp := Join ( tmp , un ) ;
3544: LD_ADDR_VAR 0 3
3548: PUSH
3549: LD_VAR 0 3
3553: PPUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL 44127 0 2
3563: ST_TO_ADDR
// end ;
3564: GO 3395
3566: POP
3567: POP
// repeat wait ( 0 0$1 ) ;
3568: LD_INT 35
3570: PPUSH
3571: CALL_OW 67
// for i in tmp do
3575: LD_ADDR_VAR 0 1
3579: PUSH
3580: LD_VAR 0 3
3584: PUSH
3585: FOR_IN
3586: IFFALSE 3624
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 2 ] ) , i ) ) ;
3588: LD_VAR 0 1
3592: PPUSH
3593: LD_INT 22
3595: PUSH
3596: LD_INT 2
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PPUSH
3608: LD_VAR 0 1
3612: PPUSH
3613: CALL_OW 74
3617: PPUSH
3618: CALL_OW 115
3622: GO 3585
3624: POP
3625: POP
// until not UnitFilter ( tmp , [ f_ok ] ) ;
3626: LD_VAR 0 3
3630: PPUSH
3631: LD_INT 50
3633: PUSH
3634: EMPTY
3635: LIST
3636: PPUSH
3637: CALL_OW 72
3641: NOT
3642: IFFALSE 3568
// end ; end_of_file
3644: PPOPN 3
3646: END
// export function CreateNature ; var i ; begin
3647: LD_INT 0
3649: PPUSH
3650: PPUSH
// PrepareTiger ( 0 ) ;
3651: LD_INT 0
3653: PPUSH
3654: CALL 40503 0 1
// for i := 1 to 2 do
3658: LD_ADDR_VAR 0 2
3662: PUSH
3663: DOUBLE
3664: LD_INT 1
3666: DEC
3667: ST_TO_ADDR
3668: LD_INT 2
3670: PUSH
3671: FOR_TO
3672: IFFALSE 3691
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3674: CALL_OW 44
3678: PPUSH
3679: LD_INT 4
3681: PPUSH
3682: LD_INT 0
3684: PPUSH
3685: CALL_OW 49
3689: GO 3671
3691: POP
3692: POP
// PrepareBird ;
3693: CALL 40684 0 0
// for i := 1 to 3 do
3697: LD_ADDR_VAR 0 2
3701: PUSH
3702: DOUBLE
3703: LD_INT 1
3705: DEC
3706: ST_TO_ADDR
3707: LD_INT 3
3709: PUSH
3710: FOR_TO
3711: IFFALSE 3730
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
3713: CALL_OW 44
3717: PPUSH
3718: LD_INT 4
3720: PPUSH
3721: LD_INT 0
3723: PPUSH
3724: CALL_OW 49
3728: GO 3710
3730: POP
3731: POP
// PrepareFrog ;
3732: CALL 40604 0 0
// for i := 1 to 3 do
3736: LD_ADDR_VAR 0 2
3740: PUSH
3741: DOUBLE
3742: LD_INT 1
3744: DEC
3745: ST_TO_ADDR
3746: LD_INT 3
3748: PUSH
3749: FOR_TO
3750: IFFALSE 3769
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
3752: CALL_OW 44
3756: PPUSH
3757: LD_INT 5
3759: PPUSH
3760: LD_INT 0
3762: PPUSH
3763: CALL_OW 49
3767: GO 3749
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function LoadTech ; var i , tmp ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// tmp := LoadVariable ( 09_tech , [ ] ) ;
3781: LD_ADDR_VAR 0 3
3785: PUSH
3786: LD_STRING 09_tech
3788: PPUSH
3789: EMPTY
3790: PPUSH
3791: CALL_OW 30
3795: ST_TO_ADDR
// for i := 1 to Count ( tmp ) do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 3
3810: PPUSH
3811: CALL 8527 0 1
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3844
// SetTech ( i , 2 , tmp [ i ] ) ;
3819: LD_VAR 0 2
3823: PPUSH
3824: LD_INT 2
3826: PPUSH
3827: LD_VAR 0 3
3831: PUSH
3832: LD_VAR 0 2
3836: ARRAY
3837: PPUSH
3838: CALL_OW 322
3842: GO 3816
3844: POP
3845: POP
// end ; end_of_file
3846: LD_VAR 0 1
3850: RET
// on UnitKamikazed ( un ) do begin kamikazed := true ;
3851: LD_ADDR_EXP 8
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// end ;
3859: PPOPN 1
3861: END
// on UnitDestroyed ( un ) do begin if un = Schulz then
3862: LD_VAR 0 1
3866: PUSH
3867: LD_EXP 21
3871: EQUAL
3872: IFFALSE 3881
// YouLost ( Schulz ) ;
3874: LD_STRING Schulz
3876: PPUSH
3877: CALL_OW 104
// if un = Heike and GetSide ( un ) = 2 then
3881: LD_VAR 0 1
3885: PUSH
3886: LD_EXP 10
3890: EQUAL
3891: PUSH
3892: LD_VAR 0 1
3896: PPUSH
3897: CALL_OW 255
3901: PUSH
3902: LD_INT 2
3904: EQUAL
3905: AND
3906: IFFALSE 3915
// YouLost ( Heike ) ;
3908: LD_STRING Heike
3910: PPUSH
3911: CALL_OW 104
// end ; end_of_file
3915: PPOPN 1
3917: END
// export function Action ; var p , i , tmp ; begin
3918: LD_INT 0
3920: PPUSH
3921: PPUSH
3922: PPUSH
3923: PPUSH
// PlaceSeeing ( 12 , 12 , 2 , 10 ) ;
3924: LD_INT 12
3926: PPUSH
3927: LD_INT 12
3929: PPUSH
3930: LD_INT 2
3932: PPUSH
3933: LD_INT 10
3935: PPUSH
3936: CALL_OW 330
// RemoveSeeing ( 12 , 12 , 2 ) ;
3940: LD_INT 12
3942: PPUSH
3943: LD_INT 12
3945: PPUSH
3946: LD_INT 2
3948: PPUSH
3949: CALL_OW 331
// CenterNowOnXY ( 12 , 12 ) ;
3953: LD_INT 12
3955: PPUSH
3956: LD_INT 12
3958: PPUSH
3959: CALL_OW 86
// InGameOn ;
3963: CALL_OW 8
// PrepareArabian ;
3967: CALL 133 0 0
// InGameOff ;
3971: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
3975: LD_STRING M4
3977: PPUSH
3978: CALL_OW 337
// SaveForQuickRestart ;
3982: CALL_OW 22
// repeat wait ( 0 0$1 ) ;
3986: LD_INT 35
3988: PPUSH
3989: CALL_OW 67
// until FilterUnitsInArea ( borderArea , [ f_side , 2 ] ) ;
3993: LD_INT 9
3995: PPUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 70
4010: IFFALSE 3986
// PrepareHeikeCamp ;
4012: CALL 1768 0 0
// wait ( 0 0$2 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// if heikeIsDead then
4023: LD_EXP 7
4027: IFFALSE 4363
// begin PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4029: LD_INT 116
4031: PPUSH
4032: LD_INT 58
4034: PPUSH
4035: LD_INT 2
4037: PPUSH
4038: LD_INT 26
4040: NEG
4041: PPUSH
4042: CALL_OW 330
// CenterOnXY ( 116 , 58 ) ;
4046: LD_INT 116
4048: PPUSH
4049: LD_INT 58
4051: PPUSH
4052: CALL_OW 84
// Say ( Schulz , DL-Obj-a-1 ) ;
4056: LD_EXP 21
4060: PPUSH
4061: LD_STRING DL-Obj-a-1
4063: PPUSH
4064: CALL_OW 88
// InGameOn ;
4068: CALL_OW 8
// CenterOnXY ( 116 , 58 ) ;
4072: LD_INT 116
4074: PPUSH
4075: LD_INT 58
4077: PPUSH
4078: CALL_OW 84
// ComMoveXY ( FilterAllUnits ( [ f_side , 2 ] ) diff [ Schulz , Nia ] , 96 , 65 ) ;
4082: LD_INT 22
4084: PUSH
4085: LD_INT 2
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: LD_EXP 21
4101: PUSH
4102: LD_EXP 25
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: DIFF
4111: PPUSH
4112: LD_INT 96
4114: PPUSH
4115: LD_INT 65
4117: PPUSH
4118: CALL_OW 111
// if IsInUnit ( Schulz ) then
4122: LD_EXP 21
4126: PPUSH
4127: CALL_OW 310
4131: IFFALSE 4155
// ComMoveXY ( IsInUnit ( Schulz ) , 115 , 61 ) else
4133: LD_EXP 21
4137: PPUSH
4138: CALL_OW 310
4142: PPUSH
4143: LD_INT 115
4145: PPUSH
4146: LD_INT 61
4148: PPUSH
4149: CALL_OW 111
4153: GO 4170
// ComMoveXY ( Schulz , 115 , 61 ) ;
4155: LD_EXP 21
4159: PPUSH
4160: LD_INT 115
4162: PPUSH
4163: LD_INT 61
4165: PPUSH
4166: CALL_OW 111
// if IsInUnit ( Nia ) then
4170: LD_EXP 25
4174: PPUSH
4175: CALL_OW 310
4179: IFFALSE 4203
// ComMoveXY ( IsInUnit ( Nia ) , 115 , 61 ) else
4181: LD_EXP 25
4185: PPUSH
4186: CALL_OW 310
4190: PPUSH
4191: LD_INT 115
4193: PPUSH
4194: LD_INT 61
4196: PPUSH
4197: CALL_OW 111
4201: GO 4218
// ComMoveXY ( Nia , 115 , 61 ) ;
4203: LD_EXP 25
4207: PPUSH
4208: LD_INT 115
4210: PPUSH
4211: LD_INT 61
4213: PPUSH
4214: CALL_OW 111
// p := 0 ;
4218: LD_ADDR_VAR 0 2
4222: PUSH
4223: LD_INT 0
4225: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4226: LD_INT 35
4228: PPUSH
4229: CALL_OW 67
// p := Inc ( p ) ;
4233: LD_ADDR_VAR 0 2
4237: PUSH
4238: LD_VAR 0 2
4242: PPUSH
4243: CALL 45488 0 1
4247: ST_TO_ADDR
// until HexInfo ( 115 , 61 ) or p > 20 ;
4248: LD_INT 115
4250: PPUSH
4251: LD_INT 61
4253: PPUSH
4254: CALL_OW 428
4258: PUSH
4259: LD_VAR 0 2
4263: PUSH
4264: LD_INT 20
4266: GREATER
4267: OR
4268: IFFALSE 4226
// if Givi and IsOk ( Nia ) then
4270: LD_EXP 11
4274: PUSH
4275: LD_EXP 25
4279: PPUSH
4280: CALL_OW 302
4284: AND
4285: IFFALSE 4335
// begin Say ( Nia , DN-Obj-a-2 ) ;
4287: LD_EXP 25
4291: PPUSH
4292: LD_STRING DN-Obj-a-2
4294: PPUSH
4295: CALL_OW 88
// Say ( Schulz , DL-Obj-a-3 ) ;
4299: LD_EXP 21
4303: PPUSH
4304: LD_STRING DL-Obj-a-3
4306: PPUSH
4307: CALL_OW 88
// Say ( Nia , DN-Obj-a-4 ) ;
4311: LD_EXP 25
4315: PPUSH
4316: LD_STRING DN-Obj-a-4
4318: PPUSH
4319: CALL_OW 88
// Say ( Schulz , DL-Obj-a-5 ) ;
4323: LD_EXP 21
4327: PPUSH
4328: LD_STRING DL-Obj-a-5
4330: PPUSH
4331: CALL_OW 88
// end ; wait ( 0 0$1 ) ;
4335: LD_INT 35
4337: PPUSH
4338: CALL_OW 67
// Say ( Schulz , DL-Fail-1 ) ;
4342: LD_EXP 21
4346: PPUSH
4347: LD_STRING DL-Fail-1
4349: PPUSH
4350: CALL_OW 88
// YouLost ( Fail ) ;
4354: LD_STRING Fail
4356: PPUSH
4357: CALL_OW 104
// exit ;
4361: GO 5378
// end ; PrepareRussianBaseAttackers ;
4363: CALL 2680 0 0
// wait ( 0 0$1 ) ;
4367: LD_INT 35
4369: PPUSH
4370: CALL_OW 67
// PlaceSeeing ( 116 , 58 , 2 , - 26 ) ;
4374: LD_INT 116
4376: PPUSH
4377: LD_INT 58
4379: PPUSH
4380: LD_INT 2
4382: PPUSH
4383: LD_INT 26
4385: NEG
4386: PPUSH
4387: CALL_OW 330
// RemoveSeeing ( 116 , 58 , 2 ) ;
4391: LD_INT 116
4393: PPUSH
4394: LD_INT 58
4396: PPUSH
4397: LD_INT 2
4399: PPUSH
4400: CALL_OW 331
// CenterOnXY ( 116 , 58 ) ;
4404: LD_INT 116
4406: PPUSH
4407: LD_INT 58
4409: PPUSH
4410: CALL_OW 84
// ChangeSideFog ( 5 , 2 ) ;
4414: LD_INT 5
4416: PPUSH
4417: LD_INT 2
4419: PPUSH
4420: CALL_OW 343
// DialogueOn ;
4424: CALL_OW 6
// Say ( Schulz , DL-Obj-1 ) ;
4428: LD_EXP 21
4432: PPUSH
4433: LD_STRING DL-Obj-1
4435: PPUSH
4436: CALL_OW 88
// DialogueOff ;
4440: CALL_OW 7
// PrepareBasim ;
4444: CALL 2480 0 0
// wait ( 0 0$0.3 ) ;
4448: LD_INT 10
4450: PPUSH
4451: CALL_OW 67
// ChangeSideFog ( 8 , 2 ) ;
4455: LD_INT 8
4457: PPUSH
4458: LD_INT 2
4460: PPUSH
4461: CALL_OW 343
// repeat wait ( 0 0$0.3 ) ;
4465: LD_INT 10
4467: PPUSH
4468: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 117 , 58 , 12 ] ] ) ;
4472: LD_INT 22
4474: PUSH
4475: LD_INT 2
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 92
4484: PUSH
4485: LD_INT 117
4487: PUSH
4488: LD_INT 58
4490: PUSH
4491: LD_INT 12
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: PUSH
4500: EMPTY
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 69
4508: IFFALSE 4465
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
4510: LD_ADDR_VAR 0 3
4514: PUSH
4515: LD_INT 22
4517: PUSH
4518: LD_INT 5
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: PPUSH
4525: CALL_OW 69
4529: PUSH
4530: FOR_IN
4531: IFFALSE 4547
// SetSide ( i , 2 ) ;
4533: LD_VAR 0 3
4537: PPUSH
4538: LD_INT 2
4540: PPUSH
4541: CALL_OW 235
4545: GO 4530
4547: POP
4548: POP
// repeat wait ( 0 0$1 ) ;
4549: LD_INT 35
4551: PPUSH
4552: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4556: LD_ADDR_VAR 0 4
4560: PUSH
4561: LD_INT 50
4563: PUSH
4564: EMPTY
4565: LIST
4566: PUSH
4567: LD_INT 25
4569: PUSH
4570: LD_INT 17
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PPUSH
4581: CALL_OW 69
4585: ST_TO_ADDR
// for i in tmp do
4586: LD_ADDR_VAR 0 3
4590: PUSH
4591: LD_VAR 0 4
4595: PUSH
4596: FOR_IN
4597: IFFALSE 4635
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 3 ] ) , i ) ) ;
4599: LD_VAR 0 3
4603: PPUSH
4604: LD_INT 22
4606: PUSH
4607: LD_INT 3
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: PPUSH
4619: LD_VAR 0 3
4623: PPUSH
4624: CALL_OW 74
4628: PPUSH
4629: CALL_OW 115
4633: GO 4596
4635: POP
4636: POP
// until See ( 2 , Basim ) and kamikazed ;
4637: LD_INT 2
4639: PPUSH
4640: LD_EXP 22
4644: PPUSH
4645: CALL_OW 292
4649: PUSH
4650: LD_EXP 8
4654: AND
4655: IFFALSE 4549
// tmp := FilterAllUnits ( [ [ f_ok ] , [ f_class , class_apeman_kamikaze ] ] ) ;
4657: LD_ADDR_VAR 0 4
4661: PUSH
4662: LD_INT 50
4664: PUSH
4665: EMPTY
4666: LIST
4667: PUSH
4668: LD_INT 25
4670: PUSH
4671: LD_INT 17
4673: PUSH
4674: EMPTY
4675: LIST
4676: LIST
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PPUSH
4682: CALL_OW 69
4686: ST_TO_ADDR
// if tmp then
4687: LD_VAR 0 4
4691: IFFALSE 4719
// for i in tmp do
4693: LD_ADDR_VAR 0 3
4697: PUSH
4698: LD_VAR 0 4
4702: PUSH
4703: FOR_IN
4704: IFFALSE 4717
// KillUnit ( i ) ;
4706: LD_VAR 0 3
4710: PPUSH
4711: CALL_OW 66
4715: GO 4703
4717: POP
4718: POP
// Say ( Basim , DBs-Obj-2 ) ;
4719: LD_EXP 22
4723: PPUSH
4724: LD_STRING DBs-Obj-2
4726: PPUSH
4727: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
4731: LD_INT 35
4733: PPUSH
4734: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] ] ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 3
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 50
4750: PUSH
4751: EMPTY
4752: LIST
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PPUSH
4758: CALL_OW 69
4762: NOT
4763: IFFALSE 4731
// ComExit ( Heike ) ;
4765: LD_EXP 10
4769: PPUSH
4770: CALL 44525 0 1
// DialogueOn ;
4774: CALL_OW 6
// if IsOk ( Kaia ) then
4778: LD_EXP 15
4782: PPUSH
4783: CALL_OW 302
4787: IFFALSE 4930
// begin CenterNowOnUnits ( Kaia ) ;
4789: LD_EXP 15
4793: PPUSH
4794: CALL_OW 87
// Say ( Kaia , DK-Obj-3 ) ;
4798: LD_EXP 15
4802: PPUSH
4803: LD_STRING DK-Obj-3
4805: PPUSH
4806: CALL_OW 88
// Say ( Givi , DG-Obj-4 ) ;
4810: LD_EXP 11
4814: PPUSH
4815: LD_STRING DG-Obj-4
4817: PPUSH
4818: CALL_OW 88
// Say ( Kaia , DK-Obj-5 ) ;
4822: LD_EXP 15
4826: PPUSH
4827: LD_STRING DK-Obj-5
4829: PPUSH
4830: CALL_OW 88
// Say ( Kaia , DK-Obj-6 ) ;
4834: LD_EXP 15
4838: PPUSH
4839: LD_STRING DK-Obj-6
4841: PPUSH
4842: CALL_OW 88
// Say ( Kaia , DK-Obj-7 ) ;
4846: LD_EXP 15
4850: PPUSH
4851: LD_STRING DK-Obj-7
4853: PPUSH
4854: CALL_OW 88
// Say ( Kaia , DK-Obj-8 ) ;
4858: LD_EXP 15
4862: PPUSH
4863: LD_STRING DK-Obj-8
4865: PPUSH
4866: CALL_OW 88
// Say ( Schulz , DL-Obj-9 ) ;
4870: LD_EXP 21
4874: PPUSH
4875: LD_STRING DL-Obj-9
4877: PPUSH
4878: CALL_OW 88
// Say ( Schulz , DL-Obj-10 ) ;
4882: LD_EXP 21
4886: PPUSH
4887: LD_STRING DL-Obj-10
4889: PPUSH
4890: CALL_OW 88
// Say ( Schulz , DL-Obj-11 ) ;
4894: LD_EXP 21
4898: PPUSH
4899: LD_STRING DL-Obj-11
4901: PPUSH
4902: CALL_OW 88
// Say ( Schulz , DL-Obj-12 ) ;
4906: LD_EXP 21
4910: PPUSH
4911: LD_STRING DL-Obj-12
4913: PPUSH
4914: CALL_OW 88
// Say ( Schulz , DL-Obj-13 ) ;
4918: LD_EXP 21
4922: PPUSH
4923: LD_STRING DL-Obj-13
4925: PPUSH
4926: CALL_OW 88
// end ; if IsOk ( Kurt ) then
4930: LD_EXP 19
4934: PPUSH
4935: CALL_OW 302
4939: IFFALSE 4977
// begin Say ( Kurt , DKs-Obj-14 ) ;
4941: LD_EXP 19
4945: PPUSH
4946: LD_STRING DKs-Obj-14
4948: PPUSH
4949: CALL_OW 88
// Say ( Kurt , DKs-Obj-15 ) ;
4953: LD_EXP 19
4957: PPUSH
4958: LD_STRING DKs-Obj-15
4960: PPUSH
4961: CALL_OW 88
// Say ( Givi , DG-Obj-16 ) ;
4965: LD_EXP 11
4969: PPUSH
4970: LD_STRING DG-Obj-16
4972: PPUSH
4973: CALL_OW 88
// end ; DialogueOff ;
4977: CALL_OW 7
// SetSide ( Basim , 2 ) ;
4981: LD_EXP 22
4985: PPUSH
4986: LD_INT 2
4988: PPUSH
4989: CALL_OW 235
// wait ( 0 0$3 ) ;
4993: LD_INT 105
4995: PPUSH
4996: CALL_OW 67
// ComExit ( Givi ) ;
5000: LD_EXP 11
5004: PPUSH
5005: CALL 44525 0 1
// ComExit ( Nia ) ;
5009: LD_EXP 25
5013: PPUSH
5014: CALL 44525 0 1
// AddComMoveUnit ( Nia , Givi ) ;
5018: LD_EXP 25
5022: PPUSH
5023: LD_EXP 11
5027: PPUSH
5028: CALL_OW 172
// wait ( 0 0$1 ) ;
5032: LD_INT 35
5034: PPUSH
5035: CALL_OW 67
// if IsOk ( Givi ) and IsOk ( Nia ) then
5039: LD_EXP 11
5043: PPUSH
5044: CALL_OW 302
5048: PUSH
5049: LD_EXP 25
5053: PPUSH
5054: CALL_OW 302
5058: AND
5059: IFFALSE 5333
// begin DialogueOn ;
5061: CALL_OW 6
// Say ( Givi , DG-Nia-1 ) ;
5065: LD_EXP 11
5069: PPUSH
5070: LD_STRING DG-Nia-1
5072: PPUSH
5073: CALL_OW 88
// Say ( Heike , DH-Nia-2 ) ;
5077: LD_EXP 10
5081: PPUSH
5082: LD_STRING DH-Nia-2
5084: PPUSH
5085: CALL_OW 88
// Say ( Givi , DG-Nia-3 ) ;
5089: LD_EXP 11
5093: PPUSH
5094: LD_STRING DG-Nia-3
5096: PPUSH
5097: CALL_OW 88
// Say ( Nia , DN-Nia-4 ) ;
5101: LD_EXP 25
5105: PPUSH
5106: LD_STRING DN-Nia-4
5108: PPUSH
5109: CALL_OW 88
// Say ( Heike , DH-Nia-5 ) ;
5113: LD_EXP 10
5117: PPUSH
5118: LD_STRING DH-Nia-5
5120: PPUSH
5121: CALL_OW 88
// Say ( Givi , DG-Nia-6 ) ;
5125: LD_EXP 11
5129: PPUSH
5130: LD_STRING DG-Nia-6
5132: PPUSH
5133: CALL_OW 88
// Say ( Nia , DN-Nia-7 ) ;
5137: LD_EXP 25
5141: PPUSH
5142: LD_STRING DN-Nia-7
5144: PPUSH
5145: CALL_OW 88
// Say ( Nia , DN-Nia-8 ) ;
5149: LD_EXP 25
5153: PPUSH
5154: LD_STRING DN-Nia-8
5156: PPUSH
5157: CALL_OW 88
// Say ( Nia , DN-Nia-9 ) ;
5161: LD_EXP 25
5165: PPUSH
5166: LD_STRING DN-Nia-9
5168: PPUSH
5169: CALL_OW 88
// Say ( Nia , DN-Nia-10 ) ;
5173: LD_EXP 25
5177: PPUSH
5178: LD_STRING DN-Nia-10
5180: PPUSH
5181: CALL_OW 88
// Say ( Givi , DG-Nia-11 ) ;
5185: LD_EXP 11
5189: PPUSH
5190: LD_STRING DG-Nia-11
5192: PPUSH
5193: CALL_OW 88
// Say ( Nia , DN-Nia-12 ) ;
5197: LD_EXP 25
5201: PPUSH
5202: LD_STRING DN-Nia-12
5204: PPUSH
5205: CALL_OW 88
// Say ( Heike , DH-Nia-13 ) ;
5209: LD_EXP 10
5213: PPUSH
5214: LD_STRING DH-Nia-13
5216: PPUSH
5217: CALL_OW 88
// Say ( Nia , DN-Nia-14 ) ;
5221: LD_EXP 25
5225: PPUSH
5226: LD_STRING DN-Nia-14
5228: PPUSH
5229: CALL_OW 88
// Say ( Heike , DH-Nia-15 ) ;
5233: LD_EXP 10
5237: PPUSH
5238: LD_STRING DH-Nia-15
5240: PPUSH
5241: CALL_OW 88
// Say ( Schulz , DL-Nia-16 ) ;
5245: LD_EXP 21
5249: PPUSH
5250: LD_STRING DL-Nia-16
5252: PPUSH
5253: CALL_OW 88
// Say ( Heike , DH-Nia-17 ) ;
5257: LD_EXP 10
5261: PPUSH
5262: LD_STRING DH-Nia-17
5264: PPUSH
5265: CALL_OW 88
// Say ( Heike , DH-Nia-18 ) ;
5269: LD_EXP 10
5273: PPUSH
5274: LD_STRING DH-Nia-18
5276: PPUSH
5277: CALL_OW 88
// Say ( Ibrahim , DI-Nia-19 ) ;
5281: LD_EXP 13
5285: PPUSH
5286: LD_STRING DI-Nia-19
5288: PPUSH
5289: CALL_OW 88
// Say ( Schulz , DL-Nia-20 ) ;
5293: LD_EXP 21
5297: PPUSH
5298: LD_STRING DL-Nia-20
5300: PPUSH
5301: CALL_OW 88
// Say ( Schulz , DL-Nia-21 ) ;
5305: LD_EXP 21
5309: PPUSH
5310: LD_STRING DL-Nia-21
5312: PPUSH
5313: CALL_OW 88
// Say ( Schulz , DL-Nia-22 ) ;
5317: LD_EXP 21
5321: PPUSH
5322: LD_STRING DL-Nia-22
5324: PPUSH
5325: CALL_OW 88
// DialogueOff ;
5329: CALL_OW 7
// end ; DialogueOn ;
5333: CALL_OW 6
// Say ( Schulz , DL-Retreat-1 ) ;
5337: LD_EXP 21
5341: PPUSH
5342: LD_STRING DL-Retreat-1
5344: PPUSH
5345: CALL_OW 88
// DialogueOff ;
5349: CALL_OW 7
// ChangeMissionObjectives ( M5 ) ;
5353: LD_STRING M5
5355: PPUSH
5356: CALL_OW 337
// SetAreaMapShow ( endArea , 1 ) ;
5360: LD_INT 13
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 424
// startRussianAttacks := true ;
5370: LD_ADDR_EXP 9
5374: PUSH
5375: LD_INT 1
5377: ST_TO_ADDR
// end ;
5378: LD_VAR 0 1
5382: RET
// every 0 0$1 trigger startRussianAttacks and not FilterUnitsExceptArea ( endArea , [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) do
5383: LD_EXP 9
5387: PUSH
5388: LD_INT 13
5390: PPUSH
5391: LD_INT 22
5393: PUSH
5394: LD_INT 2
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: PUSH
5401: LD_INT 50
5403: PUSH
5404: EMPTY
5405: LIST
5406: PUSH
5407: LD_INT 21
5409: PUSH
5410: LD_INT 1
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PUSH
5417: EMPTY
5418: LIST
5419: LIST
5420: LIST
5421: PPUSH
5422: CALL_OW 71
5426: NOT
5427: AND
5428: IFFALSE 5437
5430: GO 5432
5432: DISABLE
// EndMission ;
5433: CALL 5438 0 0
5437: END
// function EndMission ; var i , tmp , saveVehicles ; begin
5438: LD_INT 0
5440: PPUSH
5441: PPUSH
5442: PPUSH
5443: PPUSH
// tmp := FilterUnitsInArea ( endArea , [ [ f_side , 2 ] , [ f_type , unit_vehicle ] ] ) ;
5444: LD_ADDR_VAR 0 3
5448: PUSH
5449: LD_INT 13
5451: PPUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 2
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 21
5464: PUSH
5465: LD_INT 2
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 70
5480: ST_TO_ADDR
// saveVehicles := [ ] ;
5481: LD_ADDR_VAR 0 4
5485: PUSH
5486: EMPTY
5487: ST_TO_ADDR
// for i in tmp do
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_VAR 0 3
5497: PUSH
5498: FOR_IN
5499: IFFALSE 5608
// saveVehicles := Join ( saveVehicles , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetFuel ( i ) , GetMark ( i ) , IsDrivenBy ( i ) ] ) ;
5501: LD_ADDR_VAR 0 4
5505: PUSH
5506: LD_VAR 0 4
5510: PPUSH
5511: LD_VAR 0 2
5515: PPUSH
5516: CALL_OW 265
5520: PUSH
5521: LD_VAR 0 2
5525: PPUSH
5526: CALL_OW 262
5530: PUSH
5531: LD_VAR 0 2
5535: PPUSH
5536: CALL_OW 263
5540: PUSH
5541: LD_VAR 0 2
5545: PPUSH
5546: CALL_OW 264
5550: PUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 248
5560: PUSH
5561: LD_VAR 0 2
5565: PPUSH
5566: CALL_OW 261
5570: PUSH
5571: LD_VAR 0 2
5575: PPUSH
5576: CALL_OW 271
5580: PUSH
5581: LD_VAR 0 2
5585: PPUSH
5586: CALL_OW 311
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PPUSH
5601: CALL 44127 0 2
5605: ST_TO_ADDR
5606: GO 5498
5608: POP
5609: POP
// SaveCharacters ( Schulz , 09c_Schulz ) ;
5610: LD_EXP 21
5614: PPUSH
5615: LD_STRING 09c_Schulz
5617: PPUSH
5618: CALL_OW 38
// SaveVariable ( Schulz , 09c_Schulz_ID ) ;
5622: LD_EXP 21
5626: PPUSH
5627: LD_STRING 09c_Schulz_ID
5629: PPUSH
5630: CALL_OW 39
// if IsOk ( Lemmy ) then
5634: LD_EXP 23
5638: PPUSH
5639: CALL_OW 302
5643: IFFALSE 5669
// begin SaveCharacters ( Lemmy , 09c_Lemmy ) ;
5645: LD_EXP 23
5649: PPUSH
5650: LD_STRING 09c_Lemmy
5652: PPUSH
5653: CALL_OW 38
// SaveVariable ( Lemmy , 09c_Lemmy_ID ) ;
5657: LD_EXP 23
5661: PPUSH
5662: LD_STRING 09c_Lemmy_ID
5664: PPUSH
5665: CALL_OW 39
// end ; if IsOk ( Nia ) then
5669: LD_EXP 25
5673: PPUSH
5674: CALL_OW 302
5678: IFFALSE 5704
// begin SaveCharacters ( Nia , 09c_Nia ) ;
5680: LD_EXP 25
5684: PPUSH
5685: LD_STRING 09c_Nia
5687: PPUSH
5688: CALL_OW 38
// SaveVariable ( Nia , 09c_Nia_ID ) ;
5692: LD_EXP 25
5696: PPUSH
5697: LD_STRING 09c_Nia_ID
5699: PPUSH
5700: CALL_OW 39
// end ; if IsOk ( Mia ) then
5704: LD_EXP 24
5708: PPUSH
5709: CALL_OW 302
5713: IFFALSE 5739
// begin SaveCharacters ( Mia , 09c_Mia ) ;
5715: LD_EXP 24
5719: PPUSH
5720: LD_STRING 09c_Mia
5722: PPUSH
5723: CALL_OW 38
// SaveVariable ( Mia , 09c_Mia_ID ) ;
5727: LD_EXP 24
5731: PPUSH
5732: LD_STRING 09c_Mia_ID
5734: PPUSH
5735: CALL_OW 39
// end ; if IsOk ( Jenna ) then
5739: LD_EXP 26
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5774
// begin SaveCharacters ( Jenna , 09c_Jenna ) ;
5750: LD_EXP 26
5754: PPUSH
5755: LD_STRING 09c_Jenna
5757: PPUSH
5758: CALL_OW 38
// SaveVariable ( Jenna , 09c_Jenna_ID ) ;
5762: LD_EXP 26
5766: PPUSH
5767: LD_STRING 09c_Jenna_ID
5769: PPUSH
5770: CALL_OW 39
// end ; if IsOk ( Basim ) then
5774: LD_EXP 22
5778: PPUSH
5779: CALL_OW 302
5783: IFFALSE 5809
// begin SaveCharacters ( Basim , 09c_Basim ) ;
5785: LD_EXP 22
5789: PPUSH
5790: LD_STRING 09c_Basim
5792: PPUSH
5793: CALL_OW 38
// SaveVariable ( Basim , 09c_Basim_ID ) ;
5797: LD_EXP 22
5801: PPUSH
5802: LD_STRING 09c_Basim_ID
5804: PPUSH
5805: CALL_OW 39
// end ; SaveCharacters ( Heike , 09c_Heike ) ;
5809: LD_EXP 10
5813: PPUSH
5814: LD_STRING 09c_Heike
5816: PPUSH
5817: CALL_OW 38
// SaveVariable ( Heike , 09c_Heike_ID ) ;
5821: LD_EXP 10
5825: PPUSH
5826: LD_STRING 09c_Heike_ID
5828: PPUSH
5829: CALL_OW 39
// if IsOk ( Givi ) then
5833: LD_EXP 11
5837: PPUSH
5838: CALL_OW 302
5842: IFFALSE 5868
// begin SaveCharacters ( Givi , 09c_Givi ) ;
5844: LD_EXP 11
5848: PPUSH
5849: LD_STRING 09c_Givi
5851: PPUSH
5852: CALL_OW 38
// SaveVariable ( Givi , 09c_Givi_ID ) ;
5856: LD_EXP 11
5860: PPUSH
5861: LD_STRING 09c_Givi_ID
5863: PPUSH
5864: CALL_OW 39
// end ; if IsOk ( Mike ) then
5868: LD_EXP 12
5872: PPUSH
5873: CALL_OW 302
5877: IFFALSE 5903
// begin SaveCharacters ( Mike , 09c_Mike ) ;
5879: LD_EXP 12
5883: PPUSH
5884: LD_STRING 09c_Mike
5886: PPUSH
5887: CALL_OW 38
// SaveVariable ( Mike , 09c_Mike_ID ) ;
5891: LD_EXP 12
5895: PPUSH
5896: LD_STRING 09c_Mike_ID
5898: PPUSH
5899: CALL_OW 39
// end ; if IsOk ( Ibrahim ) then
5903: LD_EXP 13
5907: PPUSH
5908: CALL_OW 302
5912: IFFALSE 5938
// begin SaveCharacters ( Ibrahim , 09c_Ibrahim ) ;
5914: LD_EXP 13
5918: PPUSH
5919: LD_STRING 09c_Ibrahim
5921: PPUSH
5922: CALL_OW 38
// SaveVariable ( Ibrahim , 09c_Ibrahim_ID ) ;
5926: LD_EXP 13
5930: PPUSH
5931: LD_STRING 09c_Ibrahim_ID
5933: PPUSH
5934: CALL_OW 39
// end ; if IsOk ( Kamil ) then
5938: LD_EXP 14
5942: PPUSH
5943: CALL_OW 302
5947: IFFALSE 5973
// begin SaveCharacters ( Kamil , 09c_Kamil ) ;
5949: LD_EXP 14
5953: PPUSH
5954: LD_STRING 09c_Kamil
5956: PPUSH
5957: CALL_OW 38
// SaveVariable ( Kamil , 09c_Kamil_ID ) ;
5961: LD_EXP 14
5965: PPUSH
5966: LD_STRING 09c_Kamil_ID
5968: PPUSH
5969: CALL_OW 39
// end ; if IsOk ( Kaia ) then
5973: LD_EXP 15
5977: PPUSH
5978: CALL_OW 302
5982: IFFALSE 6008
// begin SaveCharacters ( Kaia , 09c_Kaia ) ;
5984: LD_EXP 15
5988: PPUSH
5989: LD_STRING 09c_Kaia
5991: PPUSH
5992: CALL_OW 38
// SaveVariable ( Kaia , 09c_Kaia_ID ) ;
5996: LD_EXP 15
6000: PPUSH
6001: LD_STRING 09c_Kaia_ID
6003: PPUSH
6004: CALL_OW 39
// end ; if IsOk ( Sophia ) then
6008: LD_EXP 16
6012: PPUSH
6013: CALL_OW 302
6017: IFFALSE 6043
// begin SaveCharacters ( Sophia , 09c_Sophia ) ;
6019: LD_EXP 16
6023: PPUSH
6024: LD_STRING 09c_Sophia
6026: PPUSH
6027: CALL_OW 38
// SaveVariable ( Sophia , 09c_Sophia_ID ) ;
6031: LD_EXP 16
6035: PPUSH
6036: LD_STRING 09c_Sophia_ID
6038: PPUSH
6039: CALL_OW 39
// end ; if IsOk ( Markov ) then
6043: LD_EXP 17
6047: PPUSH
6048: CALL_OW 302
6052: IFFALSE 6078
// begin SaveCharacters ( Markov , 09c_Markov ) ;
6054: LD_EXP 17
6058: PPUSH
6059: LD_STRING 09c_Markov
6061: PPUSH
6062: CALL_OW 38
// SaveVariable ( Markov , 09c_Markov_ID ) ;
6066: LD_EXP 17
6070: PPUSH
6071: LD_STRING 09c_Markov_ID
6073: PPUSH
6074: CALL_OW 39
// end ; if IsOk ( Olaf ) then
6078: LD_EXP 18
6082: PPUSH
6083: CALL_OW 302
6087: IFFALSE 6113
// begin SaveCharacters ( Olaf , 09c_Olaf ) ;
6089: LD_EXP 18
6093: PPUSH
6094: LD_STRING 09c_Olaf
6096: PPUSH
6097: CALL_OW 38
// SaveVariable ( Olaf , 09c_Olaf_ID ) ;
6101: LD_EXP 18
6105: PPUSH
6106: LD_STRING 09c_Olaf_ID
6108: PPUSH
6109: CALL_OW 39
// end ; if IsOk ( Kurt ) then
6113: LD_EXP 19
6117: PPUSH
6118: CALL_OW 302
6122: IFFALSE 6148
// begin SaveCharacters ( Kurt , 09c_Kurt ) ;
6124: LD_EXP 19
6128: PPUSH
6129: LD_STRING 09c_Kurt
6131: PPUSH
6132: CALL_OW 38
// SaveVariable ( Kurt , 09c_Kurt_ID ) ;
6136: LD_EXP 19
6140: PPUSH
6141: LD_STRING 09c_Kurt_ID
6143: PPUSH
6144: CALL_OW 39
// end ; if IsOk ( Aviradze ) then
6148: LD_EXP 20
6152: PPUSH
6153: CALL_OW 302
6157: IFFALSE 6183
// begin SaveCharacters ( Aviradze , 09c_Aviradze ) ;
6159: LD_EXP 20
6163: PPUSH
6164: LD_STRING 09c_Aviradze
6166: PPUSH
6167: CALL_OW 38
// SaveVariable ( Aviradze , 09c_Aviradze_ID ) ;
6171: LD_EXP 20
6175: PPUSH
6176: LD_STRING 09c_Aviradze_ID
6178: PPUSH
6179: CALL_OW 39
// end ; SaveCharacters ( UnitFilter ( schulzSecondSquad , [ f_ok ] ) , 09c_schulzSecondSquad ) ;
6183: LD_EXP 28
6187: PPUSH
6188: LD_INT 50
6190: PUSH
6191: EMPTY
6192: LIST
6193: PPUSH
6194: CALL_OW 72
6198: PPUSH
6199: LD_STRING 09c_schulzSecondSquad
6201: PPUSH
6202: CALL_OW 38
// SaveCharacters ( UnitFilter ( heikeSecondSquad , [ f_ok ] ) , 09c_heikeSecondSquad ) ;
6206: LD_EXP 27
6210: PPUSH
6211: LD_INT 50
6213: PUSH
6214: EMPTY
6215: LIST
6216: PPUSH
6217: CALL_OW 72
6221: PPUSH
6222: LD_STRING 09c_heikeSecondSquad
6224: PPUSH
6225: CALL_OW 38
// for i := 1 to UnitFilter ( schulzSecondSquad , [ f_ok ] ) do
6229: LD_ADDR_VAR 0 2
6233: PUSH
6234: DOUBLE
6235: LD_INT 1
6237: DEC
6238: ST_TO_ADDR
6239: LD_EXP 28
6243: PPUSH
6244: LD_INT 50
6246: PUSH
6247: EMPTY
6248: LIST
6249: PPUSH
6250: CALL_OW 72
6254: PUSH
6255: FOR_TO
6256: IFFALSE 6284
// SaveVariable ( schulzSecondSquad [ i ] , 09c_random_ID_ & i ) ;
6258: LD_EXP 28
6262: PUSH
6263: LD_VAR 0 2
6267: ARRAY
6268: PPUSH
6269: LD_STRING 09c_random_ID_
6271: PUSH
6272: LD_VAR 0 2
6276: STR
6277: PPUSH
6278: CALL_OW 39
6282: GO 6255
6284: POP
6285: POP
// for i := 1 to UnitFilter ( heikeSecondSquad , [ f_ok ] ) do
6286: LD_ADDR_VAR 0 2
6290: PUSH
6291: DOUBLE
6292: LD_INT 1
6294: DEC
6295: ST_TO_ADDR
6296: LD_EXP 27
6300: PPUSH
6301: LD_INT 50
6303: PUSH
6304: EMPTY
6305: LIST
6306: PPUSH
6307: CALL_OW 72
6311: PUSH
6312: FOR_TO
6313: IFFALSE 6341
// SaveVariable ( heikeSecondSquad [ i ] , 09c_hrandom_ID_ & i ) ;
6315: LD_EXP 27
6319: PUSH
6320: LD_VAR 0 2
6324: ARRAY
6325: PPUSH
6326: LD_STRING 09c_hrandom_ID_
6328: PUSH
6329: LD_VAR 0 2
6333: STR
6334: PPUSH
6335: CALL_OW 39
6339: GO 6312
6341: POP
6342: POP
// SaveVariable ( saveVehicles , 09c_vehicles ) ;
6343: LD_VAR 0 4
6347: PPUSH
6348: LD_STRING 09c_vehicles
6350: PPUSH
6351: CALL_OW 39
// SaveVariable ( tick , 09c_tick ) ;
6355: LD_OWVAR 1
6359: PPUSH
6360: LD_STRING 09c_tick
6362: PPUSH
6363: CALL_OW 39
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) , 09c_apes ) ;
6367: LD_INT 22
6369: PUSH
6370: LD_INT 2
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 23
6379: PUSH
6380: LD_INT 0
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: LIST
6390: PPUSH
6391: CALL_OW 69
6395: PPUSH
6396: LD_STRING 09c_apes
6398: PPUSH
6399: CALL_OW 38
// wait ( 3 ) ;
6403: LD_INT 3
6405: PPUSH
6406: CALL_OW 67
// ChangeMap ( 1 , __x1/09_cont3 ) ;
6410: LD_INT 1
6412: PPUSH
6413: LD_STRING __x1/09_cont3
6415: PPUSH
6416: CALL_OW 340
// end ; end_of_file
6420: LD_VAR 0 1
6424: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6425: LD_INT 0
6427: PPUSH
6428: PPUSH
// if exist_mode then
6429: LD_VAR 0 2
6433: IFFALSE 6458
// unit := CreateCharacter ( prefix & ident ) else
6435: LD_ADDR_VAR 0 5
6439: PUSH
6440: LD_VAR 0 3
6444: PUSH
6445: LD_VAR 0 1
6449: STR
6450: PPUSH
6451: CALL_OW 34
6455: ST_TO_ADDR
6456: GO 6473
// unit := NewCharacter ( ident ) ;
6458: LD_ADDR_VAR 0 5
6462: PUSH
6463: LD_VAR 0 1
6467: PPUSH
6468: CALL_OW 25
6472: ST_TO_ADDR
// result := unit ;
6473: LD_ADDR_VAR 0 4
6477: PUSH
6478: LD_VAR 0 5
6482: ST_TO_ADDR
// end ;
6483: LD_VAR 0 4
6487: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
6488: LD_INT 0
6490: PPUSH
6491: PPUSH
// if not side or not nation then
6492: LD_VAR 0 1
6496: NOT
6497: PUSH
6498: LD_VAR 0 2
6502: NOT
6503: OR
6504: IFFALSE 6508
// exit ;
6506: GO 7276
// case nation of nation_american :
6508: LD_VAR 0 2
6512: PUSH
6513: LD_INT 1
6515: DOUBLE
6516: EQUAL
6517: IFTRUE 6521
6519: GO 6735
6521: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
6522: LD_ADDR_VAR 0 4
6526: PUSH
6527: LD_INT 35
6529: PUSH
6530: LD_INT 45
6532: PUSH
6533: LD_INT 46
6535: PUSH
6536: LD_INT 47
6538: PUSH
6539: LD_INT 82
6541: PUSH
6542: LD_INT 83
6544: PUSH
6545: LD_INT 84
6547: PUSH
6548: LD_INT 85
6550: PUSH
6551: LD_INT 86
6553: PUSH
6554: LD_INT 1
6556: PUSH
6557: LD_INT 2
6559: PUSH
6560: LD_INT 6
6562: PUSH
6563: LD_INT 15
6565: PUSH
6566: LD_INT 16
6568: PUSH
6569: LD_INT 7
6571: PUSH
6572: LD_INT 12
6574: PUSH
6575: LD_INT 13
6577: PUSH
6578: LD_INT 10
6580: PUSH
6581: LD_INT 14
6583: PUSH
6584: LD_INT 20
6586: PUSH
6587: LD_INT 21
6589: PUSH
6590: LD_INT 22
6592: PUSH
6593: LD_INT 25
6595: PUSH
6596: LD_INT 32
6598: PUSH
6599: LD_INT 27
6601: PUSH
6602: LD_INT 36
6604: PUSH
6605: LD_INT 69
6607: PUSH
6608: LD_INT 39
6610: PUSH
6611: LD_INT 34
6613: PUSH
6614: LD_INT 40
6616: PUSH
6617: LD_INT 48
6619: PUSH
6620: LD_INT 49
6622: PUSH
6623: LD_INT 50
6625: PUSH
6626: LD_INT 51
6628: PUSH
6629: LD_INT 52
6631: PUSH
6632: LD_INT 53
6634: PUSH
6635: LD_INT 54
6637: PUSH
6638: LD_INT 55
6640: PUSH
6641: LD_INT 56
6643: PUSH
6644: LD_INT 57
6646: PUSH
6647: LD_INT 58
6649: PUSH
6650: LD_INT 59
6652: PUSH
6653: LD_INT 60
6655: PUSH
6656: LD_INT 61
6658: PUSH
6659: LD_INT 62
6661: PUSH
6662: LD_INT 80
6664: PUSH
6665: LD_INT 82
6667: PUSH
6668: LD_INT 83
6670: PUSH
6671: LD_INT 84
6673: PUSH
6674: LD_INT 85
6676: PUSH
6677: LD_INT 86
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: LIST
6698: LIST
6699: LIST
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: ST_TO_ADDR
6733: GO 7200
6735: LD_INT 2
6737: DOUBLE
6738: EQUAL
6739: IFTRUE 6743
6741: GO 6969
6743: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
6744: LD_ADDR_VAR 0 4
6748: PUSH
6749: LD_INT 35
6751: PUSH
6752: LD_INT 45
6754: PUSH
6755: LD_INT 46
6757: PUSH
6758: LD_INT 47
6760: PUSH
6761: LD_INT 82
6763: PUSH
6764: LD_INT 83
6766: PUSH
6767: LD_INT 84
6769: PUSH
6770: LD_INT 85
6772: PUSH
6773: LD_INT 87
6775: PUSH
6776: LD_INT 70
6778: PUSH
6779: LD_INT 1
6781: PUSH
6782: LD_INT 11
6784: PUSH
6785: LD_INT 3
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: LD_INT 15
6799: PUSH
6800: LD_INT 18
6802: PUSH
6803: LD_INT 7
6805: PUSH
6806: LD_INT 17
6808: PUSH
6809: LD_INT 8
6811: PUSH
6812: LD_INT 20
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 22
6820: PUSH
6821: LD_INT 72
6823: PUSH
6824: LD_INT 26
6826: PUSH
6827: LD_INT 69
6829: PUSH
6830: LD_INT 39
6832: PUSH
6833: LD_INT 40
6835: PUSH
6836: LD_INT 41
6838: PUSH
6839: LD_INT 42
6841: PUSH
6842: LD_INT 43
6844: PUSH
6845: LD_INT 48
6847: PUSH
6848: LD_INT 49
6850: PUSH
6851: LD_INT 50
6853: PUSH
6854: LD_INT 51
6856: PUSH
6857: LD_INT 52
6859: PUSH
6860: LD_INT 53
6862: PUSH
6863: LD_INT 54
6865: PUSH
6866: LD_INT 55
6868: PUSH
6869: LD_INT 56
6871: PUSH
6872: LD_INT 60
6874: PUSH
6875: LD_INT 61
6877: PUSH
6878: LD_INT 62
6880: PUSH
6881: LD_INT 66
6883: PUSH
6884: LD_INT 67
6886: PUSH
6887: LD_INT 68
6889: PUSH
6890: LD_INT 81
6892: PUSH
6893: LD_INT 82
6895: PUSH
6896: LD_INT 83
6898: PUSH
6899: LD_INT 84
6901: PUSH
6902: LD_INT 85
6904: PUSH
6905: LD_INT 87
6907: PUSH
6908: LD_INT 88
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: LIST
6933: LIST
6934: LIST
6935: LIST
6936: LIST
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: ST_TO_ADDR
6967: GO 7200
6969: LD_INT 3
6971: DOUBLE
6972: EQUAL
6973: IFTRUE 6977
6975: GO 7199
6977: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
6978: LD_ADDR_VAR 0 4
6982: PUSH
6983: LD_INT 46
6985: PUSH
6986: LD_INT 47
6988: PUSH
6989: LD_INT 1
6991: PUSH
6992: LD_INT 2
6994: PUSH
6995: LD_INT 82
6997: PUSH
6998: LD_INT 83
7000: PUSH
7001: LD_INT 84
7003: PUSH
7004: LD_INT 85
7006: PUSH
7007: LD_INT 86
7009: PUSH
7010: LD_INT 11
7012: PUSH
7013: LD_INT 9
7015: PUSH
7016: LD_INT 20
7018: PUSH
7019: LD_INT 19
7021: PUSH
7022: LD_INT 21
7024: PUSH
7025: LD_INT 24
7027: PUSH
7028: LD_INT 22
7030: PUSH
7031: LD_INT 25
7033: PUSH
7034: LD_INT 28
7036: PUSH
7037: LD_INT 29
7039: PUSH
7040: LD_INT 30
7042: PUSH
7043: LD_INT 31
7045: PUSH
7046: LD_INT 37
7048: PUSH
7049: LD_INT 38
7051: PUSH
7052: LD_INT 32
7054: PUSH
7055: LD_INT 27
7057: PUSH
7058: LD_INT 33
7060: PUSH
7061: LD_INT 69
7063: PUSH
7064: LD_INT 39
7066: PUSH
7067: LD_INT 34
7069: PUSH
7070: LD_INT 40
7072: PUSH
7073: LD_INT 71
7075: PUSH
7076: LD_INT 23
7078: PUSH
7079: LD_INT 44
7081: PUSH
7082: LD_INT 48
7084: PUSH
7085: LD_INT 49
7087: PUSH
7088: LD_INT 50
7090: PUSH
7091: LD_INT 51
7093: PUSH
7094: LD_INT 52
7096: PUSH
7097: LD_INT 53
7099: PUSH
7100: LD_INT 54
7102: PUSH
7103: LD_INT 55
7105: PUSH
7106: LD_INT 56
7108: PUSH
7109: LD_INT 57
7111: PUSH
7112: LD_INT 58
7114: PUSH
7115: LD_INT 59
7117: PUSH
7118: LD_INT 63
7120: PUSH
7121: LD_INT 64
7123: PUSH
7124: LD_INT 65
7126: PUSH
7127: LD_INT 82
7129: PUSH
7130: LD_INT 83
7132: PUSH
7133: LD_INT 84
7135: PUSH
7136: LD_INT 85
7138: PUSH
7139: LD_INT 86
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: ST_TO_ADDR
7197: GO 7200
7199: POP
// if state > - 1 and state < 3 then
7200: LD_VAR 0 3
7204: PUSH
7205: LD_INT 1
7207: NEG
7208: GREATER
7209: PUSH
7210: LD_VAR 0 3
7214: PUSH
7215: LD_INT 3
7217: LESS
7218: AND
7219: IFFALSE 7276
// for i in result do
7221: LD_ADDR_VAR 0 5
7225: PUSH
7226: LD_VAR 0 4
7230: PUSH
7231: FOR_IN
7232: IFFALSE 7274
// if GetTech ( i , side ) <> state then
7234: LD_VAR 0 5
7238: PPUSH
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 321
7248: PUSH
7249: LD_VAR 0 3
7253: NONEQUAL
7254: IFFALSE 7272
// result := result diff i ;
7256: LD_ADDR_VAR 0 4
7260: PUSH
7261: LD_VAR 0 4
7265: PUSH
7266: LD_VAR 0 5
7270: DIFF
7271: ST_TO_ADDR
7272: GO 7231
7274: POP
7275: POP
// end ;
7276: LD_VAR 0 4
7280: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
7281: LD_INT 0
7283: PPUSH
7284: PPUSH
7285: PPUSH
// result := true ;
7286: LD_ADDR_VAR 0 3
7290: PUSH
7291: LD_INT 1
7293: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
7294: LD_ADDR_VAR 0 5
7298: PUSH
7299: LD_VAR 0 2
7303: PPUSH
7304: CALL_OW 480
7308: ST_TO_ADDR
// if not tmp then
7309: LD_VAR 0 5
7313: NOT
7314: IFFALSE 7318
// exit ;
7316: GO 7367
// for i in tmp do
7318: LD_ADDR_VAR 0 4
7322: PUSH
7323: LD_VAR 0 5
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7365
// if GetTech ( i , side ) <> state_researched then
7331: LD_VAR 0 4
7335: PPUSH
7336: LD_VAR 0 1
7340: PPUSH
7341: CALL_OW 321
7345: PUSH
7346: LD_INT 2
7348: NONEQUAL
7349: IFFALSE 7363
// begin result := false ;
7351: LD_ADDR_VAR 0 3
7355: PUSH
7356: LD_INT 0
7358: ST_TO_ADDR
// exit ;
7359: POP
7360: POP
7361: GO 7367
// end ;
7363: GO 7328
7365: POP
7366: POP
// end ;
7367: LD_VAR 0 3
7371: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
7372: LD_INT 0
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
7378: PPUSH
7379: PPUSH
7380: PPUSH
7381: PPUSH
7382: PPUSH
7383: PPUSH
7384: PPUSH
7385: PPUSH
7386: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
7387: LD_VAR 0 1
7391: NOT
7392: PUSH
7393: LD_VAR 0 1
7397: PPUSH
7398: CALL_OW 257
7402: PUSH
7403: LD_INT 9
7405: NONEQUAL
7406: OR
7407: IFFALSE 7411
// exit ;
7409: GO 7984
// side := GetSide ( unit ) ;
7411: LD_ADDR_VAR 0 9
7415: PUSH
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 255
7425: ST_TO_ADDR
// tech_space := tech_spacanom ;
7426: LD_ADDR_VAR 0 12
7430: PUSH
7431: LD_INT 29
7433: ST_TO_ADDR
// tech_time := tech_taurad ;
7434: LD_ADDR_VAR 0 13
7438: PUSH
7439: LD_INT 28
7441: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
7442: LD_ADDR_VAR 0 11
7446: PUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 310
7456: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
7457: LD_VAR 0 11
7461: PPUSH
7462: CALL_OW 247
7466: PUSH
7467: LD_INT 2
7469: EQUAL
7470: IFFALSE 7474
// exit ;
7472: GO 7984
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
7474: LD_ADDR_VAR 0 8
7478: PUSH
7479: LD_INT 81
7481: PUSH
7482: LD_VAR 0 9
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: LD_INT 21
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PPUSH
7512: CALL_OW 69
7516: ST_TO_ADDR
// if not tmp then
7517: LD_VAR 0 8
7521: NOT
7522: IFFALSE 7526
// exit ;
7524: GO 7984
// if in_unit then
7526: LD_VAR 0 11
7530: IFFALSE 7554
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
7532: LD_ADDR_VAR 0 10
7536: PUSH
7537: LD_VAR 0 8
7541: PPUSH
7542: LD_VAR 0 11
7546: PPUSH
7547: CALL_OW 74
7551: ST_TO_ADDR
7552: GO 7574
// enemy := NearestUnitToUnit ( tmp , unit ) ;
7554: LD_ADDR_VAR 0 10
7558: PUSH
7559: LD_VAR 0 8
7563: PPUSH
7564: LD_VAR 0 1
7568: PPUSH
7569: CALL_OW 74
7573: ST_TO_ADDR
// if not enemy then
7574: LD_VAR 0 10
7578: NOT
7579: IFFALSE 7583
// exit ;
7581: GO 7984
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
7583: LD_VAR 0 11
7587: PUSH
7588: LD_VAR 0 11
7592: PPUSH
7593: LD_VAR 0 10
7597: PPUSH
7598: CALL_OW 296
7602: PUSH
7603: LD_INT 13
7605: GREATER
7606: AND
7607: PUSH
7608: LD_VAR 0 1
7612: PPUSH
7613: LD_VAR 0 10
7617: PPUSH
7618: CALL_OW 296
7622: PUSH
7623: LD_INT 12
7625: GREATER
7626: OR
7627: IFFALSE 7631
// exit ;
7629: GO 7984
// missile := [ 1 ] ;
7631: LD_ADDR_VAR 0 14
7635: PUSH
7636: LD_INT 1
7638: PUSH
7639: EMPTY
7640: LIST
7641: ST_TO_ADDR
// if Researched ( side , tech_space ) then
7642: LD_VAR 0 9
7646: PPUSH
7647: LD_VAR 0 12
7651: PPUSH
7652: CALL_OW 325
7656: IFFALSE 7685
// missile := Replace ( missile , missile + 1 , 2 ) ;
7658: LD_ADDR_VAR 0 14
7662: PUSH
7663: LD_VAR 0 14
7667: PPUSH
7668: LD_VAR 0 14
7672: PUSH
7673: LD_INT 1
7675: PLUS
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 1
7684: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
7685: LD_VAR 0 9
7689: PPUSH
7690: LD_VAR 0 13
7694: PPUSH
7695: CALL_OW 325
7699: PUSH
7700: LD_VAR 0 10
7704: PPUSH
7705: CALL_OW 255
7709: PPUSH
7710: LD_VAR 0 13
7714: PPUSH
7715: CALL_OW 325
7719: NOT
7720: AND
7721: IFFALSE 7750
// missile := Replace ( missile , missile + 1 , 3 ) ;
7723: LD_ADDR_VAR 0 14
7727: PUSH
7728: LD_VAR 0 14
7732: PPUSH
7733: LD_VAR 0 14
7737: PUSH
7738: LD_INT 1
7740: PLUS
7741: PPUSH
7742: LD_INT 3
7744: PPUSH
7745: CALL_OW 1
7749: ST_TO_ADDR
// if missile < 2 then
7750: LD_VAR 0 14
7754: PUSH
7755: LD_INT 2
7757: LESS
7758: IFFALSE 7762
// exit ;
7760: GO 7984
// x := GetX ( enemy ) ;
7762: LD_ADDR_VAR 0 4
7766: PUSH
7767: LD_VAR 0 10
7771: PPUSH
7772: CALL_OW 250
7776: ST_TO_ADDR
// y := GetY ( enemy ) ;
7777: LD_ADDR_VAR 0 5
7781: PUSH
7782: LD_VAR 0 10
7786: PPUSH
7787: CALL_OW 251
7791: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
7792: LD_ADDR_VAR 0 6
7796: PUSH
7797: LD_VAR 0 4
7801: PUSH
7802: LD_INT 1
7804: NEG
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: CALL_OW 12
7813: PLUS
7814: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
7815: LD_ADDR_VAR 0 7
7819: PUSH
7820: LD_VAR 0 5
7824: PUSH
7825: LD_INT 1
7827: NEG
7828: PPUSH
7829: LD_INT 1
7831: PPUSH
7832: CALL_OW 12
7836: PLUS
7837: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7838: LD_VAR 0 6
7842: PPUSH
7843: LD_VAR 0 7
7847: PPUSH
7848: CALL_OW 488
7852: NOT
7853: IFFALSE 7875
// begin _x := x ;
7855: LD_ADDR_VAR 0 6
7859: PUSH
7860: LD_VAR 0 4
7864: ST_TO_ADDR
// _y := y ;
7865: LD_ADDR_VAR 0 7
7869: PUSH
7870: LD_VAR 0 5
7874: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
7875: LD_ADDR_VAR 0 3
7879: PUSH
7880: LD_INT 1
7882: PPUSH
7883: LD_VAR 0 14
7887: PPUSH
7888: CALL_OW 12
7892: ST_TO_ADDR
// case i of 1 :
7893: LD_VAR 0 3
7897: PUSH
7898: LD_INT 1
7900: DOUBLE
7901: EQUAL
7902: IFTRUE 7906
7904: GO 7923
7906: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
7907: LD_VAR 0 1
7911: PPUSH
7912: LD_VAR 0 10
7916: PPUSH
7917: CALL_OW 115
7921: GO 7984
7923: LD_INT 2
7925: DOUBLE
7926: EQUAL
7927: IFTRUE 7931
7929: GO 7953
7931: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_VAR 0 6
7941: PPUSH
7942: LD_VAR 0 7
7946: PPUSH
7947: CALL_OW 153
7951: GO 7984
7953: LD_INT 3
7955: DOUBLE
7956: EQUAL
7957: IFTRUE 7961
7959: GO 7983
7961: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
7962: LD_VAR 0 1
7966: PPUSH
7967: LD_VAR 0 6
7971: PPUSH
7972: LD_VAR 0 7
7976: PPUSH
7977: CALL_OW 154
7981: GO 7984
7983: POP
// end ;
7984: LD_VAR 0 2
7988: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
7989: LD_INT 0
7991: PPUSH
7992: PPUSH
7993: PPUSH
7994: PPUSH
7995: PPUSH
7996: PPUSH
// if not unit or not building then
7997: LD_VAR 0 1
8001: NOT
8002: PUSH
8003: LD_VAR 0 2
8007: NOT
8008: OR
8009: IFFALSE 8013
// exit ;
8011: GO 8171
// x := GetX ( building ) ;
8013: LD_ADDR_VAR 0 5
8017: PUSH
8018: LD_VAR 0 2
8022: PPUSH
8023: CALL_OW 250
8027: ST_TO_ADDR
// y := GetY ( building ) ;
8028: LD_ADDR_VAR 0 6
8032: PUSH
8033: LD_VAR 0 2
8037: PPUSH
8038: CALL_OW 251
8042: ST_TO_ADDR
// for i = 0 to 5 do
8043: LD_ADDR_VAR 0 4
8047: PUSH
8048: DOUBLE
8049: LD_INT 0
8051: DEC
8052: ST_TO_ADDR
8053: LD_INT 5
8055: PUSH
8056: FOR_TO
8057: IFFALSE 8169
// begin _x := ShiftX ( x , i , 3 ) ;
8059: LD_ADDR_VAR 0 7
8063: PUSH
8064: LD_VAR 0 5
8068: PPUSH
8069: LD_VAR 0 4
8073: PPUSH
8074: LD_INT 3
8076: PPUSH
8077: CALL_OW 272
8081: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
8082: LD_ADDR_VAR 0 8
8086: PUSH
8087: LD_VAR 0 6
8091: PPUSH
8092: LD_VAR 0 4
8096: PPUSH
8097: LD_INT 3
8099: PPUSH
8100: CALL_OW 273
8104: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
8105: LD_VAR 0 7
8109: PPUSH
8110: LD_VAR 0 8
8114: PPUSH
8115: CALL_OW 488
8119: NOT
8120: IFFALSE 8124
// continue ;
8122: GO 8056
// if HexInfo ( _x , _y ) = 0 then
8124: LD_VAR 0 7
8128: PPUSH
8129: LD_VAR 0 8
8133: PPUSH
8134: CALL_OW 428
8138: PUSH
8139: LD_INT 0
8141: EQUAL
8142: IFFALSE 8167
// begin ComMoveXY ( unit , _x , _y ) ;
8144: LD_VAR 0 1
8148: PPUSH
8149: LD_VAR 0 7
8153: PPUSH
8154: LD_VAR 0 8
8158: PPUSH
8159: CALL_OW 111
// exit ;
8163: POP
8164: POP
8165: GO 8171
// end ; end ;
8167: GO 8056
8169: POP
8170: POP
// end ;
8171: LD_VAR 0 3
8175: RET
// export function ScanBase ( side , base_area ) ; begin
8176: LD_INT 0
8178: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
8179: LD_ADDR_VAR 0 3
8183: PUSH
8184: LD_VAR 0 2
8188: PPUSH
8189: LD_INT 81
8191: PUSH
8192: LD_VAR 0 1
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 70
8205: ST_TO_ADDR
// end ;
8206: LD_VAR 0 3
8210: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
8211: LD_INT 0
8213: PPUSH
8214: PPUSH
8215: PPUSH
8216: PPUSH
// result := false ;
8217: LD_ADDR_VAR 0 2
8221: PUSH
8222: LD_INT 0
8224: ST_TO_ADDR
// side := GetSide ( unit ) ;
8225: LD_ADDR_VAR 0 3
8229: PUSH
8230: LD_VAR 0 1
8234: PPUSH
8235: CALL_OW 255
8239: ST_TO_ADDR
// nat := GetNation ( unit ) ;
8240: LD_ADDR_VAR 0 4
8244: PUSH
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 248
8254: ST_TO_ADDR
// case nat of 1 :
8255: LD_VAR 0 4
8259: PUSH
8260: LD_INT 1
8262: DOUBLE
8263: EQUAL
8264: IFTRUE 8268
8266: GO 8279
8268: POP
// tech := tech_lassight ; 2 :
8269: LD_ADDR_VAR 0 5
8273: PUSH
8274: LD_INT 12
8276: ST_TO_ADDR
8277: GO 8318
8279: LD_INT 2
8281: DOUBLE
8282: EQUAL
8283: IFTRUE 8287
8285: GO 8298
8287: POP
// tech := tech_mortar ; 3 :
8288: LD_ADDR_VAR 0 5
8292: PUSH
8293: LD_INT 41
8295: ST_TO_ADDR
8296: GO 8318
8298: LD_INT 3
8300: DOUBLE
8301: EQUAL
8302: IFTRUE 8306
8304: GO 8317
8306: POP
// tech := tech_bazooka ; end ;
8307: LD_ADDR_VAR 0 5
8311: PUSH
8312: LD_INT 44
8314: ST_TO_ADDR
8315: GO 8318
8317: POP
// if Researched ( side , tech ) then
8318: LD_VAR 0 3
8322: PPUSH
8323: LD_VAR 0 5
8327: PPUSH
8328: CALL_OW 325
8332: IFFALSE 8359
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
8334: LD_ADDR_VAR 0 2
8338: PUSH
8339: LD_INT 5
8341: PUSH
8342: LD_INT 8
8344: PUSH
8345: LD_INT 9
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: PUSH
8353: LD_VAR 0 4
8357: ARRAY
8358: ST_TO_ADDR
// end ;
8359: LD_VAR 0 2
8363: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
8364: LD_INT 0
8366: PPUSH
8367: PPUSH
8368: PPUSH
// if not mines then
8369: LD_VAR 0 2
8373: NOT
8374: IFFALSE 8378
// exit ;
8376: GO 8522
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8378: LD_ADDR_VAR 0 5
8382: PUSH
8383: LD_INT 81
8385: PUSH
8386: LD_VAR 0 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 3
8397: PUSH
8398: LD_INT 21
8400: PUSH
8401: LD_INT 3
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PPUSH
8416: CALL_OW 69
8420: ST_TO_ADDR
// for i in mines do
8421: LD_ADDR_VAR 0 4
8425: PUSH
8426: LD_VAR 0 2
8430: PUSH
8431: FOR_IN
8432: IFFALSE 8520
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
8434: LD_VAR 0 4
8438: PUSH
8439: LD_INT 1
8441: ARRAY
8442: PPUSH
8443: LD_VAR 0 4
8447: PUSH
8448: LD_INT 2
8450: ARRAY
8451: PPUSH
8452: CALL_OW 458
8456: NOT
8457: IFFALSE 8461
// continue ;
8459: GO 8431
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
8461: LD_VAR 0 4
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_VAR 0 4
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PPUSH
8479: CALL_OW 428
8483: PUSH
8484: LD_VAR 0 5
8488: IN
8489: IFFALSE 8518
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
8491: LD_VAR 0 4
8495: PUSH
8496: LD_INT 1
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 4
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PPUSH
8509: LD_VAR 0 1
8513: PPUSH
8514: CALL_OW 456
// end ;
8518: GO 8431
8520: POP
8521: POP
// end ;
8522: LD_VAR 0 3
8526: RET
// export function Count ( array ) ; begin
8527: LD_INT 0
8529: PPUSH
// result := array + 0 ;
8530: LD_ADDR_VAR 0 2
8534: PUSH
8535: LD_VAR 0 1
8539: PUSH
8540: LD_INT 0
8542: PLUS
8543: ST_TO_ADDR
// end ;
8544: LD_VAR 0 2
8548: RET
// export function IsEmpty ( building ) ; begin
8549: LD_INT 0
8551: PPUSH
// if not building then
8552: LD_VAR 0 1
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8604
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_INT 22
8573: PUSH
8574: LD_VAR 0 1
8578: PPUSH
8579: CALL_OW 255
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 58
8590: PUSH
8591: EMPTY
8592: LIST
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PPUSH
8598: CALL_OW 69
8602: IN
8603: ST_TO_ADDR
// end ;
8604: LD_VAR 0 2
8608: RET
// export function IsNotFull ( building ) ; var places ; begin
8609: LD_INT 0
8611: PPUSH
8612: PPUSH
// if not building then
8613: LD_VAR 0 1
8617: NOT
8618: IFFALSE 8622
// exit ;
8620: GO 8650
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
8622: LD_ADDR_VAR 0 2
8626: PUSH
8627: LD_VAR 0 1
8631: PPUSH
8632: LD_INT 3
8634: PUSH
8635: LD_INT 62
8637: PUSH
8638: EMPTY
8639: LIST
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PPUSH
8645: CALL_OW 72
8649: ST_TO_ADDR
// end ;
8650: LD_VAR 0 2
8654: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
8655: LD_INT 0
8657: PPUSH
8658: PPUSH
8659: PPUSH
8660: PPUSH
// tmp := [ ] ;
8661: LD_ADDR_VAR 0 3
8665: PUSH
8666: EMPTY
8667: ST_TO_ADDR
// list := [ ] ;
8668: LD_ADDR_VAR 0 5
8672: PUSH
8673: EMPTY
8674: ST_TO_ADDR
// for i = 16 to 25 do
8675: LD_ADDR_VAR 0 4
8679: PUSH
8680: DOUBLE
8681: LD_INT 16
8683: DEC
8684: ST_TO_ADDR
8685: LD_INT 25
8687: PUSH
8688: FOR_TO
8689: IFFALSE 8762
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
8691: LD_ADDR_VAR 0 3
8695: PUSH
8696: LD_VAR 0 3
8700: PUSH
8701: LD_INT 22
8703: PUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: CALL_OW 255
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: LD_INT 91
8720: PUSH
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 6
8728: PUSH
8729: EMPTY
8730: LIST
8731: LIST
8732: LIST
8733: PUSH
8734: LD_INT 30
8736: PUSH
8737: LD_VAR 0 4
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: LIST
8750: PUSH
8751: EMPTY
8752: LIST
8753: PPUSH
8754: CALL_OW 69
8758: ADD
8759: ST_TO_ADDR
8760: GO 8688
8762: POP
8763: POP
// for i = 1 to tmp do
8764: LD_ADDR_VAR 0 4
8768: PUSH
8769: DOUBLE
8770: LD_INT 1
8772: DEC
8773: ST_TO_ADDR
8774: LD_VAR 0 3
8778: PUSH
8779: FOR_TO
8780: IFFALSE 8868
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
8782: LD_ADDR_VAR 0 5
8786: PUSH
8787: LD_VAR 0 5
8791: PUSH
8792: LD_VAR 0 3
8796: PUSH
8797: LD_VAR 0 4
8801: ARRAY
8802: PPUSH
8803: CALL_OW 266
8807: PUSH
8808: LD_VAR 0 3
8812: PUSH
8813: LD_VAR 0 4
8817: ARRAY
8818: PPUSH
8819: CALL_OW 250
8823: PUSH
8824: LD_VAR 0 3
8828: PUSH
8829: LD_VAR 0 4
8833: ARRAY
8834: PPUSH
8835: CALL_OW 251
8839: PUSH
8840: LD_VAR 0 3
8844: PUSH
8845: LD_VAR 0 4
8849: ARRAY
8850: PPUSH
8851: CALL_OW 254
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: PUSH
8862: EMPTY
8863: LIST
8864: ADD
8865: ST_TO_ADDR
8866: GO 8779
8868: POP
8869: POP
// result := list ;
8870: LD_ADDR_VAR 0 2
8874: PUSH
8875: LD_VAR 0 5
8879: ST_TO_ADDR
// end ;
8880: LD_VAR 0 2
8884: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
8885: LD_INT 0
8887: PPUSH
8888: PPUSH
8889: PPUSH
8890: PPUSH
8891: PPUSH
8892: PPUSH
8893: PPUSH
// if not factory then
8894: LD_VAR 0 1
8898: NOT
8899: IFFALSE 8903
// exit ;
8901: GO 9496
// if control = control_apeman then
8903: LD_VAR 0 4
8907: PUSH
8908: LD_INT 5
8910: EQUAL
8911: IFFALSE 9020
// begin tmp := UnitsInside ( factory ) ;
8913: LD_ADDR_VAR 0 8
8917: PUSH
8918: LD_VAR 0 1
8922: PPUSH
8923: CALL_OW 313
8927: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
8928: LD_VAR 0 8
8932: PPUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 12
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PPUSH
8943: CALL_OW 72
8947: NOT
8948: IFFALSE 8958
// control := control_manual ;
8950: LD_ADDR_VAR 0 4
8954: PUSH
8955: LD_INT 1
8957: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
8958: LD_ADDR_VAR 0 8
8962: PUSH
8963: LD_VAR 0 1
8967: PPUSH
8968: CALL 8655 0 1
8972: ST_TO_ADDR
// if tmp then
8973: LD_VAR 0 8
8977: IFFALSE 9020
// begin for i in tmp do
8979: LD_ADDR_VAR 0 7
8983: PUSH
8984: LD_VAR 0 8
8988: PUSH
8989: FOR_IN
8990: IFFALSE 9018
// if i [ 1 ] = b_ext_radio then
8992: LD_VAR 0 7
8996: PUSH
8997: LD_INT 1
8999: ARRAY
9000: PUSH
9001: LD_INT 22
9003: EQUAL
9004: IFFALSE 9016
// begin control := control_remote ;
9006: LD_ADDR_VAR 0 4
9010: PUSH
9011: LD_INT 2
9013: ST_TO_ADDR
// break ;
9014: GO 9018
// end ;
9016: GO 8989
9018: POP
9019: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9020: LD_VAR 0 1
9024: PPUSH
9025: LD_VAR 0 2
9029: PPUSH
9030: LD_VAR 0 3
9034: PPUSH
9035: LD_VAR 0 4
9039: PPUSH
9040: LD_VAR 0 5
9044: PPUSH
9045: CALL_OW 448
9049: IFFALSE 9084
// begin result := [ chassis , engine , control , weapon ] ;
9051: LD_ADDR_VAR 0 6
9055: PUSH
9056: LD_VAR 0 2
9060: PUSH
9061: LD_VAR 0 3
9065: PUSH
9066: LD_VAR 0 4
9070: PUSH
9071: LD_VAR 0 5
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: ST_TO_ADDR
// exit ;
9082: GO 9496
// end ; _chassis := AvailableChassisList ( factory ) ;
9084: LD_ADDR_VAR 0 9
9088: PUSH
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 475
9098: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
9099: LD_ADDR_VAR 0 11
9103: PUSH
9104: LD_VAR 0 1
9108: PPUSH
9109: CALL_OW 476
9113: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
9114: LD_ADDR_VAR 0 12
9118: PUSH
9119: LD_VAR 0 1
9123: PPUSH
9124: CALL_OW 477
9128: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
9129: LD_ADDR_VAR 0 10
9133: PUSH
9134: LD_VAR 0 1
9138: PPUSH
9139: CALL_OW 478
9143: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
9144: LD_VAR 0 9
9148: NOT
9149: PUSH
9150: LD_VAR 0 11
9154: NOT
9155: OR
9156: PUSH
9157: LD_VAR 0 12
9161: NOT
9162: OR
9163: PUSH
9164: LD_VAR 0 10
9168: NOT
9169: OR
9170: IFFALSE 9205
// begin result := [ chassis , engine , control , weapon ] ;
9172: LD_ADDR_VAR 0 6
9176: PUSH
9177: LD_VAR 0 2
9181: PUSH
9182: LD_VAR 0 3
9186: PUSH
9187: LD_VAR 0 4
9191: PUSH
9192: LD_VAR 0 5
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: ST_TO_ADDR
// exit ;
9203: GO 9496
// end ; if not chassis in _chassis then
9205: LD_VAR 0 2
9209: PUSH
9210: LD_VAR 0 9
9214: IN
9215: NOT
9216: IFFALSE 9242
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_VAR 0 9
9227: PUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_VAR 0 9
9235: PPUSH
9236: CALL_OW 12
9240: ARRAY
9241: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
9242: LD_VAR 0 2
9246: PPUSH
9247: LD_VAR 0 3
9251: PPUSH
9252: CALL 9501 0 2
9256: NOT
9257: IFFALSE 9316
// repeat engine := _engine [ 1 ] ;
9259: LD_ADDR_VAR 0 3
9263: PUSH
9264: LD_VAR 0 11
9268: PUSH
9269: LD_INT 1
9271: ARRAY
9272: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
9273: LD_ADDR_VAR 0 11
9277: PUSH
9278: LD_VAR 0 11
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: CALL_OW 3
9290: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
9291: LD_VAR 0 2
9295: PPUSH
9296: LD_VAR 0 3
9300: PPUSH
9301: CALL 9501 0 2
9305: PUSH
9306: LD_VAR 0 11
9310: PUSH
9311: EMPTY
9312: EQUAL
9313: OR
9314: IFFALSE 9259
// if not control in _control then
9316: LD_VAR 0 4
9320: PUSH
9321: LD_VAR 0 12
9325: IN
9326: NOT
9327: IFFALSE 9353
// control := _control [ rand ( 1 , _control ) ] ;
9329: LD_ADDR_VAR 0 4
9333: PUSH
9334: LD_VAR 0 12
9338: PUSH
9339: LD_INT 1
9341: PPUSH
9342: LD_VAR 0 12
9346: PPUSH
9347: CALL_OW 12
9351: ARRAY
9352: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
9353: LD_VAR 0 2
9357: PPUSH
9358: LD_VAR 0 5
9362: PPUSH
9363: CALL 9721 0 2
9367: NOT
9368: IFFALSE 9427
// repeat weapon := _weapon [ 1 ] ;
9370: LD_ADDR_VAR 0 5
9374: PUSH
9375: LD_VAR 0 10
9379: PUSH
9380: LD_INT 1
9382: ARRAY
9383: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
9384: LD_ADDR_VAR 0 10
9388: PUSH
9389: LD_VAR 0 10
9393: PPUSH
9394: LD_INT 1
9396: PPUSH
9397: CALL_OW 3
9401: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
9402: LD_VAR 0 2
9406: PPUSH
9407: LD_VAR 0 5
9411: PPUSH
9412: CALL 9721 0 2
9416: PUSH
9417: LD_VAR 0 10
9421: PUSH
9422: EMPTY
9423: EQUAL
9424: OR
9425: IFFALSE 9370
// result := [ ] ;
9427: LD_ADDR_VAR 0 6
9431: PUSH
9432: EMPTY
9433: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
9434: LD_VAR 0 1
9438: PPUSH
9439: LD_VAR 0 2
9443: PPUSH
9444: LD_VAR 0 3
9448: PPUSH
9449: LD_VAR 0 4
9453: PPUSH
9454: LD_VAR 0 5
9458: PPUSH
9459: CALL_OW 448
9463: IFFALSE 9496
// result := [ chassis , engine , control , weapon ] ;
9465: LD_ADDR_VAR 0 6
9469: PUSH
9470: LD_VAR 0 2
9474: PUSH
9475: LD_VAR 0 3
9479: PUSH
9480: LD_VAR 0 4
9484: PUSH
9485: LD_VAR 0 5
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: ST_TO_ADDR
// end ;
9496: LD_VAR 0 6
9500: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
9501: LD_INT 0
9503: PPUSH
// if not chassis or not engine then
9504: LD_VAR 0 1
9508: NOT
9509: PUSH
9510: LD_VAR 0 2
9514: NOT
9515: OR
9516: IFFALSE 9520
// exit ;
9518: GO 9716
// case engine of engine_solar :
9520: LD_VAR 0 2
9524: PUSH
9525: LD_INT 2
9527: DOUBLE
9528: EQUAL
9529: IFTRUE 9533
9531: GO 9571
9533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
9534: LD_ADDR_VAR 0 3
9538: PUSH
9539: LD_INT 11
9541: PUSH
9542: LD_INT 12
9544: PUSH
9545: LD_INT 13
9547: PUSH
9548: LD_INT 14
9550: PUSH
9551: LD_INT 1
9553: PUSH
9554: LD_INT 2
9556: PUSH
9557: LD_INT 3
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: ST_TO_ADDR
9569: GO 9700
9571: LD_INT 1
9573: DOUBLE
9574: EQUAL
9575: IFTRUE 9579
9577: GO 9641
9579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
9580: LD_ADDR_VAR 0 3
9584: PUSH
9585: LD_INT 11
9587: PUSH
9588: LD_INT 12
9590: PUSH
9591: LD_INT 13
9593: PUSH
9594: LD_INT 14
9596: PUSH
9597: LD_INT 1
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 3
9605: PUSH
9606: LD_INT 4
9608: PUSH
9609: LD_INT 5
9611: PUSH
9612: LD_INT 21
9614: PUSH
9615: LD_INT 23
9617: PUSH
9618: LD_INT 22
9620: PUSH
9621: LD_INT 24
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: ST_TO_ADDR
9639: GO 9700
9641: LD_INT 3
9643: DOUBLE
9644: EQUAL
9645: IFTRUE 9649
9647: GO 9699
9649: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
9650: LD_ADDR_VAR 0 3
9654: PUSH
9655: LD_INT 13
9657: PUSH
9658: LD_INT 14
9660: PUSH
9661: LD_INT 2
9663: PUSH
9664: LD_INT 3
9666: PUSH
9667: LD_INT 4
9669: PUSH
9670: LD_INT 5
9672: PUSH
9673: LD_INT 21
9675: PUSH
9676: LD_INT 22
9678: PUSH
9679: LD_INT 23
9681: PUSH
9682: LD_INT 24
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: ST_TO_ADDR
9697: GO 9700
9699: POP
// result := ( chassis in result ) ;
9700: LD_ADDR_VAR 0 3
9704: PUSH
9705: LD_VAR 0 1
9709: PUSH
9710: LD_VAR 0 3
9714: IN
9715: ST_TO_ADDR
// end ;
9716: LD_VAR 0 3
9720: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
9721: LD_INT 0
9723: PPUSH
// if not chassis or not weapon then
9724: LD_VAR 0 1
9728: NOT
9729: PUSH
9730: LD_VAR 0 2
9734: NOT
9735: OR
9736: IFFALSE 9740
// exit ;
9738: GO 10800
// case weapon of us_machine_gun :
9740: LD_VAR 0 2
9744: PUSH
9745: LD_INT 2
9747: DOUBLE
9748: EQUAL
9749: IFTRUE 9753
9751: GO 9783
9753: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
9754: LD_ADDR_VAR 0 3
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: LD_INT 2
9764: PUSH
9765: LD_INT 3
9767: PUSH
9768: LD_INT 4
9770: PUSH
9771: LD_INT 5
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: ST_TO_ADDR
9781: GO 10784
9783: LD_INT 3
9785: DOUBLE
9786: EQUAL
9787: IFTRUE 9791
9789: GO 9821
9791: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
9792: LD_ADDR_VAR 0 3
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: LD_INT 2
9802: PUSH
9803: LD_INT 3
9805: PUSH
9806: LD_INT 4
9808: PUSH
9809: LD_INT 5
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: ST_TO_ADDR
9819: GO 10784
9821: LD_INT 11
9823: DOUBLE
9824: EQUAL
9825: IFTRUE 9829
9827: GO 9859
9829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
9830: LD_ADDR_VAR 0 3
9834: PUSH
9835: LD_INT 1
9837: PUSH
9838: LD_INT 2
9840: PUSH
9841: LD_INT 3
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: LD_INT 5
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: ST_TO_ADDR
9857: GO 10784
9859: LD_INT 4
9861: DOUBLE
9862: EQUAL
9863: IFTRUE 9867
9865: GO 9893
9867: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
9868: LD_ADDR_VAR 0 3
9872: PUSH
9873: LD_INT 2
9875: PUSH
9876: LD_INT 3
9878: PUSH
9879: LD_INT 4
9881: PUSH
9882: LD_INT 5
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: ST_TO_ADDR
9891: GO 10784
9893: LD_INT 5
9895: DOUBLE
9896: EQUAL
9897: IFTRUE 9901
9899: GO 9927
9901: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
9902: LD_ADDR_VAR 0 3
9906: PUSH
9907: LD_INT 2
9909: PUSH
9910: LD_INT 3
9912: PUSH
9913: LD_INT 4
9915: PUSH
9916: LD_INT 5
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: ST_TO_ADDR
9925: GO 10784
9927: LD_INT 9
9929: DOUBLE
9930: EQUAL
9931: IFTRUE 9935
9933: GO 9961
9935: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
9936: LD_ADDR_VAR 0 3
9940: PUSH
9941: LD_INT 2
9943: PUSH
9944: LD_INT 3
9946: PUSH
9947: LD_INT 4
9949: PUSH
9950: LD_INT 5
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: ST_TO_ADDR
9959: GO 10784
9961: LD_INT 7
9963: DOUBLE
9964: EQUAL
9965: IFTRUE 9969
9967: GO 9995
9969: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
9970: LD_ADDR_VAR 0 3
9974: PUSH
9975: LD_INT 2
9977: PUSH
9978: LD_INT 3
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: EMPTY
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: ST_TO_ADDR
9993: GO 10784
9995: LD_INT 12
9997: DOUBLE
9998: EQUAL
9999: IFTRUE 10003
10001: GO 10029
10003: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
10004: LD_ADDR_VAR 0 3
10008: PUSH
10009: LD_INT 2
10011: PUSH
10012: LD_INT 3
10014: PUSH
10015: LD_INT 4
10017: PUSH
10018: LD_INT 5
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: ST_TO_ADDR
10027: GO 10784
10029: LD_INT 13
10031: DOUBLE
10032: EQUAL
10033: IFTRUE 10037
10035: GO 10063
10037: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
10038: LD_ADDR_VAR 0 3
10042: PUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 3
10048: PUSH
10049: LD_INT 4
10051: PUSH
10052: LD_INT 5
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: ST_TO_ADDR
10061: GO 10784
10063: LD_INT 14
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10089
10071: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_INT 4
10079: PUSH
10080: LD_INT 5
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: ST_TO_ADDR
10087: GO 10784
10089: LD_INT 6
10091: DOUBLE
10092: EQUAL
10093: IFTRUE 10097
10095: GO 10115
10097: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
10098: LD_ADDR_VAR 0 3
10102: PUSH
10103: LD_INT 4
10105: PUSH
10106: LD_INT 5
10108: PUSH
10109: EMPTY
10110: LIST
10111: LIST
10112: ST_TO_ADDR
10113: GO 10784
10115: LD_INT 10
10117: DOUBLE
10118: EQUAL
10119: IFTRUE 10123
10121: GO 10141
10123: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
10124: LD_ADDR_VAR 0 3
10128: PUSH
10129: LD_INT 4
10131: PUSH
10132: LD_INT 5
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: ST_TO_ADDR
10139: GO 10784
10141: LD_INT 22
10143: DOUBLE
10144: EQUAL
10145: IFTRUE 10149
10147: GO 10175
10149: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
10150: LD_ADDR_VAR 0 3
10154: PUSH
10155: LD_INT 11
10157: PUSH
10158: LD_INT 12
10160: PUSH
10161: LD_INT 13
10163: PUSH
10164: LD_INT 14
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: ST_TO_ADDR
10173: GO 10784
10175: LD_INT 23
10177: DOUBLE
10178: EQUAL
10179: IFTRUE 10183
10181: GO 10209
10183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
10184: LD_ADDR_VAR 0 3
10188: PUSH
10189: LD_INT 11
10191: PUSH
10192: LD_INT 12
10194: PUSH
10195: LD_INT 13
10197: PUSH
10198: LD_INT 14
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: ST_TO_ADDR
10207: GO 10784
10209: LD_INT 24
10211: DOUBLE
10212: EQUAL
10213: IFTRUE 10217
10215: GO 10243
10217: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
10218: LD_ADDR_VAR 0 3
10222: PUSH
10223: LD_INT 11
10225: PUSH
10226: LD_INT 12
10228: PUSH
10229: LD_INT 13
10231: PUSH
10232: LD_INT 14
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: ST_TO_ADDR
10241: GO 10784
10243: LD_INT 30
10245: DOUBLE
10246: EQUAL
10247: IFTRUE 10251
10249: GO 10277
10251: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
10252: LD_ADDR_VAR 0 3
10256: PUSH
10257: LD_INT 11
10259: PUSH
10260: LD_INT 12
10262: PUSH
10263: LD_INT 13
10265: PUSH
10266: LD_INT 14
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: ST_TO_ADDR
10275: GO 10784
10277: LD_INT 25
10279: DOUBLE
10280: EQUAL
10281: IFTRUE 10285
10283: GO 10303
10285: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
10286: LD_ADDR_VAR 0 3
10290: PUSH
10291: LD_INT 13
10293: PUSH
10294: LD_INT 14
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: ST_TO_ADDR
10301: GO 10784
10303: LD_INT 27
10305: DOUBLE
10306: EQUAL
10307: IFTRUE 10311
10309: GO 10329
10311: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
10312: LD_ADDR_VAR 0 3
10316: PUSH
10317: LD_INT 13
10319: PUSH
10320: LD_INT 14
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: ST_TO_ADDR
10327: GO 10784
10329: LD_INT 92
10331: DOUBLE
10332: EQUAL
10333: IFTRUE 10337
10335: GO 10363
10337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
10338: LD_ADDR_VAR 0 3
10342: PUSH
10343: LD_INT 11
10345: PUSH
10346: LD_INT 12
10348: PUSH
10349: LD_INT 13
10351: PUSH
10352: LD_INT 14
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: ST_TO_ADDR
10361: GO 10784
10363: LD_INT 28
10365: DOUBLE
10366: EQUAL
10367: IFTRUE 10371
10369: GO 10389
10371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
10372: LD_ADDR_VAR 0 3
10376: PUSH
10377: LD_INT 13
10379: PUSH
10380: LD_INT 14
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: ST_TO_ADDR
10387: GO 10784
10389: LD_INT 29
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10415
10397: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
10398: LD_ADDR_VAR 0 3
10402: PUSH
10403: LD_INT 13
10405: PUSH
10406: LD_INT 14
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: ST_TO_ADDR
10413: GO 10784
10415: LD_INT 31
10417: DOUBLE
10418: EQUAL
10419: IFTRUE 10423
10421: GO 10441
10423: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
10424: LD_ADDR_VAR 0 3
10428: PUSH
10429: LD_INT 13
10431: PUSH
10432: LD_INT 14
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: ST_TO_ADDR
10439: GO 10784
10441: LD_INT 26
10443: DOUBLE
10444: EQUAL
10445: IFTRUE 10449
10447: GO 10467
10449: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
10450: LD_ADDR_VAR 0 3
10454: PUSH
10455: LD_INT 13
10457: PUSH
10458: LD_INT 14
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: ST_TO_ADDR
10465: GO 10784
10467: LD_INT 42
10469: DOUBLE
10470: EQUAL
10471: IFTRUE 10475
10473: GO 10501
10475: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
10476: LD_ADDR_VAR 0 3
10480: PUSH
10481: LD_INT 21
10483: PUSH
10484: LD_INT 22
10486: PUSH
10487: LD_INT 23
10489: PUSH
10490: LD_INT 24
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: ST_TO_ADDR
10499: GO 10784
10501: LD_INT 43
10503: DOUBLE
10504: EQUAL
10505: IFTRUE 10509
10507: GO 10535
10509: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
10510: LD_ADDR_VAR 0 3
10514: PUSH
10515: LD_INT 21
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 23
10523: PUSH
10524: LD_INT 24
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: ST_TO_ADDR
10533: GO 10784
10535: LD_INT 44
10537: DOUBLE
10538: EQUAL
10539: IFTRUE 10543
10541: GO 10569
10543: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
10544: LD_ADDR_VAR 0 3
10548: PUSH
10549: LD_INT 21
10551: PUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 23
10557: PUSH
10558: LD_INT 24
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: ST_TO_ADDR
10567: GO 10784
10569: LD_INT 45
10571: DOUBLE
10572: EQUAL
10573: IFTRUE 10577
10575: GO 10603
10577: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
10578: LD_ADDR_VAR 0 3
10582: PUSH
10583: LD_INT 21
10585: PUSH
10586: LD_INT 22
10588: PUSH
10589: LD_INT 23
10591: PUSH
10592: LD_INT 24
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: ST_TO_ADDR
10601: GO 10784
10603: LD_INT 49
10605: DOUBLE
10606: EQUAL
10607: IFTRUE 10611
10609: GO 10637
10611: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
10612: LD_ADDR_VAR 0 3
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 22
10622: PUSH
10623: LD_INT 23
10625: PUSH
10626: LD_INT 24
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: ST_TO_ADDR
10635: GO 10784
10637: LD_INT 51
10639: DOUBLE
10640: EQUAL
10641: IFTRUE 10645
10643: GO 10671
10645: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
10646: LD_ADDR_VAR 0 3
10650: PUSH
10651: LD_INT 21
10653: PUSH
10654: LD_INT 22
10656: PUSH
10657: LD_INT 23
10659: PUSH
10660: LD_INT 24
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: ST_TO_ADDR
10669: GO 10784
10671: LD_INT 52
10673: DOUBLE
10674: EQUAL
10675: IFTRUE 10679
10677: GO 10705
10679: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: LD_INT 21
10687: PUSH
10688: LD_INT 22
10690: PUSH
10691: LD_INT 23
10693: PUSH
10694: LD_INT 24
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: ST_TO_ADDR
10703: GO 10784
10705: LD_INT 53
10707: DOUBLE
10708: EQUAL
10709: IFTRUE 10713
10711: GO 10731
10713: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
10714: LD_ADDR_VAR 0 3
10718: PUSH
10719: LD_INT 23
10721: PUSH
10722: LD_INT 24
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: ST_TO_ADDR
10729: GO 10784
10731: LD_INT 46
10733: DOUBLE
10734: EQUAL
10735: IFTRUE 10739
10737: GO 10757
10739: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
10740: LD_ADDR_VAR 0 3
10744: PUSH
10745: LD_INT 23
10747: PUSH
10748: LD_INT 24
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: ST_TO_ADDR
10755: GO 10784
10757: LD_INT 47
10759: DOUBLE
10760: EQUAL
10761: IFTRUE 10765
10763: GO 10783
10765: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
10766: LD_ADDR_VAR 0 3
10770: PUSH
10771: LD_INT 23
10773: PUSH
10774: LD_INT 24
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: ST_TO_ADDR
10781: GO 10784
10783: POP
// result := ( chassis in result ) ;
10784: LD_ADDR_VAR 0 3
10788: PUSH
10789: LD_VAR 0 1
10793: PUSH
10794: LD_VAR 0 3
10798: IN
10799: ST_TO_ADDR
// end ;
10800: LD_VAR 0 3
10804: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
10805: LD_INT 0
10807: PPUSH
10808: PPUSH
10809: PPUSH
10810: PPUSH
10811: PPUSH
10812: PPUSH
10813: PPUSH
// result := array ;
10814: LD_ADDR_VAR 0 5
10818: PUSH
10819: LD_VAR 0 1
10823: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
10824: LD_VAR 0 1
10828: NOT
10829: PUSH
10830: LD_VAR 0 2
10834: NOT
10835: OR
10836: PUSH
10837: LD_VAR 0 3
10841: NOT
10842: OR
10843: PUSH
10844: LD_VAR 0 2
10848: PUSH
10849: LD_VAR 0 1
10853: GREATER
10854: OR
10855: PUSH
10856: LD_VAR 0 3
10860: PUSH
10861: LD_VAR 0 1
10865: GREATER
10866: OR
10867: IFFALSE 10871
// exit ;
10869: GO 11167
// if direction then
10871: LD_VAR 0 4
10875: IFFALSE 10939
// begin d := 1 ;
10877: LD_ADDR_VAR 0 9
10881: PUSH
10882: LD_INT 1
10884: ST_TO_ADDR
// if i_from > i_to then
10885: LD_VAR 0 2
10889: PUSH
10890: LD_VAR 0 3
10894: GREATER
10895: IFFALSE 10921
// length := ( array - i_from ) + i_to else
10897: LD_ADDR_VAR 0 11
10901: PUSH
10902: LD_VAR 0 1
10906: PUSH
10907: LD_VAR 0 2
10911: MINUS
10912: PUSH
10913: LD_VAR 0 3
10917: PLUS
10918: ST_TO_ADDR
10919: GO 10937
// length := i_to - i_from ;
10921: LD_ADDR_VAR 0 11
10925: PUSH
10926: LD_VAR 0 3
10930: PUSH
10931: LD_VAR 0 2
10935: MINUS
10936: ST_TO_ADDR
// end else
10937: GO 11000
// begin d := - 1 ;
10939: LD_ADDR_VAR 0 9
10943: PUSH
10944: LD_INT 1
10946: NEG
10947: ST_TO_ADDR
// if i_from > i_to then
10948: LD_VAR 0 2
10952: PUSH
10953: LD_VAR 0 3
10957: GREATER
10958: IFFALSE 10978
// length := i_from - i_to else
10960: LD_ADDR_VAR 0 11
10964: PUSH
10965: LD_VAR 0 2
10969: PUSH
10970: LD_VAR 0 3
10974: MINUS
10975: ST_TO_ADDR
10976: GO 11000
// length := ( array - i_to ) + i_from ;
10978: LD_ADDR_VAR 0 11
10982: PUSH
10983: LD_VAR 0 1
10987: PUSH
10988: LD_VAR 0 3
10992: MINUS
10993: PUSH
10994: LD_VAR 0 2
10998: PLUS
10999: ST_TO_ADDR
// end ; if not length then
11000: LD_VAR 0 11
11004: NOT
11005: IFFALSE 11009
// exit ;
11007: GO 11167
// tmp := array ;
11009: LD_ADDR_VAR 0 10
11013: PUSH
11014: LD_VAR 0 1
11018: ST_TO_ADDR
// for i = 1 to length do
11019: LD_ADDR_VAR 0 6
11023: PUSH
11024: DOUBLE
11025: LD_INT 1
11027: DEC
11028: ST_TO_ADDR
11029: LD_VAR 0 11
11033: PUSH
11034: FOR_TO
11035: IFFALSE 11155
// begin for j = 1 to array do
11037: LD_ADDR_VAR 0 7
11041: PUSH
11042: DOUBLE
11043: LD_INT 1
11045: DEC
11046: ST_TO_ADDR
11047: LD_VAR 0 1
11051: PUSH
11052: FOR_TO
11053: IFFALSE 11141
// begin k := j + d ;
11055: LD_ADDR_VAR 0 8
11059: PUSH
11060: LD_VAR 0 7
11064: PUSH
11065: LD_VAR 0 9
11069: PLUS
11070: ST_TO_ADDR
// if k > array then
11071: LD_VAR 0 8
11075: PUSH
11076: LD_VAR 0 1
11080: GREATER
11081: IFFALSE 11091
// k := 1 ;
11083: LD_ADDR_VAR 0 8
11087: PUSH
11088: LD_INT 1
11090: ST_TO_ADDR
// if not k then
11091: LD_VAR 0 8
11095: NOT
11096: IFFALSE 11108
// k := array ;
11098: LD_ADDR_VAR 0 8
11102: PUSH
11103: LD_VAR 0 1
11107: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
11108: LD_ADDR_VAR 0 10
11112: PUSH
11113: LD_VAR 0 10
11117: PPUSH
11118: LD_VAR 0 8
11122: PPUSH
11123: LD_VAR 0 1
11127: PUSH
11128: LD_VAR 0 7
11132: ARRAY
11133: PPUSH
11134: CALL_OW 1
11138: ST_TO_ADDR
// end ;
11139: GO 11052
11141: POP
11142: POP
// array := tmp ;
11143: LD_ADDR_VAR 0 1
11147: PUSH
11148: LD_VAR 0 10
11152: ST_TO_ADDR
// end ;
11153: GO 11034
11155: POP
11156: POP
// result := array ;
11157: LD_ADDR_VAR 0 5
11161: PUSH
11162: LD_VAR 0 1
11166: ST_TO_ADDR
// end ;
11167: LD_VAR 0 5
11171: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
11172: LD_INT 0
11174: PPUSH
11175: PPUSH
// result := 0 ;
11176: LD_ADDR_VAR 0 3
11180: PUSH
11181: LD_INT 0
11183: ST_TO_ADDR
// if not array or not value in array then
11184: LD_VAR 0 1
11188: NOT
11189: PUSH
11190: LD_VAR 0 2
11194: PUSH
11195: LD_VAR 0 1
11199: IN
11200: NOT
11201: OR
11202: IFFALSE 11206
// exit ;
11204: GO 11260
// for i = 1 to array do
11206: LD_ADDR_VAR 0 4
11210: PUSH
11211: DOUBLE
11212: LD_INT 1
11214: DEC
11215: ST_TO_ADDR
11216: LD_VAR 0 1
11220: PUSH
11221: FOR_TO
11222: IFFALSE 11258
// if value = array [ i ] then
11224: LD_VAR 0 2
11228: PUSH
11229: LD_VAR 0 1
11233: PUSH
11234: LD_VAR 0 4
11238: ARRAY
11239: EQUAL
11240: IFFALSE 11256
// begin result := i ;
11242: LD_ADDR_VAR 0 3
11246: PUSH
11247: LD_VAR 0 4
11251: ST_TO_ADDR
// exit ;
11252: POP
11253: POP
11254: GO 11260
// end ;
11256: GO 11221
11258: POP
11259: POP
// end ;
11260: LD_VAR 0 3
11264: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
11265: LD_INT 0
11267: PPUSH
// vc_chassis := chassis ;
11268: LD_ADDR_OWVAR 37
11272: PUSH
11273: LD_VAR 0 1
11277: ST_TO_ADDR
// vc_engine := engine ;
11278: LD_ADDR_OWVAR 39
11282: PUSH
11283: LD_VAR 0 2
11287: ST_TO_ADDR
// vc_control := control ;
11288: LD_ADDR_OWVAR 38
11292: PUSH
11293: LD_VAR 0 3
11297: ST_TO_ADDR
// vc_weapon := weapon ;
11298: LD_ADDR_OWVAR 40
11302: PUSH
11303: LD_VAR 0 4
11307: ST_TO_ADDR
// vc_fuel_battery := fuel ;
11308: LD_ADDR_OWVAR 41
11312: PUSH
11313: LD_VAR 0 5
11317: ST_TO_ADDR
// end ;
11318: LD_VAR 0 6
11322: RET
// export function WantPlant ( unit ) ; var task ; begin
11323: LD_INT 0
11325: PPUSH
11326: PPUSH
// result := false ;
11327: LD_ADDR_VAR 0 2
11331: PUSH
11332: LD_INT 0
11334: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
11335: LD_ADDR_VAR 0 3
11339: PUSH
11340: LD_VAR 0 1
11344: PPUSH
11345: CALL_OW 437
11349: ST_TO_ADDR
// if task then
11350: LD_VAR 0 3
11354: IFFALSE 11382
// if task [ 1 ] [ 1 ] = p then
11356: LD_VAR 0 3
11360: PUSH
11361: LD_INT 1
11363: ARRAY
11364: PUSH
11365: LD_INT 1
11367: ARRAY
11368: PUSH
11369: LD_STRING p
11371: EQUAL
11372: IFFALSE 11382
// result := true ;
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: LD_INT 1
11381: ST_TO_ADDR
// end ;
11382: LD_VAR 0 2
11386: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
11387: LD_INT 0
11389: PPUSH
11390: PPUSH
11391: PPUSH
11392: PPUSH
// if pos < 1 then
11393: LD_VAR 0 2
11397: PUSH
11398: LD_INT 1
11400: LESS
11401: IFFALSE 11405
// exit ;
11403: GO 11708
// if pos = 1 then
11405: LD_VAR 0 2
11409: PUSH
11410: LD_INT 1
11412: EQUAL
11413: IFFALSE 11446
// result := Replace ( arr , pos [ 1 ] , value ) else
11415: LD_ADDR_VAR 0 4
11419: PUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: LD_VAR 0 2
11429: PUSH
11430: LD_INT 1
11432: ARRAY
11433: PPUSH
11434: LD_VAR 0 3
11438: PPUSH
11439: CALL_OW 1
11443: ST_TO_ADDR
11444: GO 11708
// begin tmp := arr ;
11446: LD_ADDR_VAR 0 6
11450: PUSH
11451: LD_VAR 0 1
11455: ST_TO_ADDR
// s_arr := [ tmp ] ;
11456: LD_ADDR_VAR 0 7
11460: PUSH
11461: LD_VAR 0 6
11465: PUSH
11466: EMPTY
11467: LIST
11468: ST_TO_ADDR
// for i = 1 to pos - 1 do
11469: LD_ADDR_VAR 0 5
11473: PUSH
11474: DOUBLE
11475: LD_INT 1
11477: DEC
11478: ST_TO_ADDR
11479: LD_VAR 0 2
11483: PUSH
11484: LD_INT 1
11486: MINUS
11487: PUSH
11488: FOR_TO
11489: IFFALSE 11534
// begin tmp := tmp [ pos [ i ] ] ;
11491: LD_ADDR_VAR 0 6
11495: PUSH
11496: LD_VAR 0 6
11500: PUSH
11501: LD_VAR 0 2
11505: PUSH
11506: LD_VAR 0 5
11510: ARRAY
11511: ARRAY
11512: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
11513: LD_ADDR_VAR 0 7
11517: PUSH
11518: LD_VAR 0 7
11522: PUSH
11523: LD_VAR 0 6
11527: PUSH
11528: EMPTY
11529: LIST
11530: ADD
11531: ST_TO_ADDR
// end ;
11532: GO 11488
11534: POP
11535: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
11536: LD_ADDR_VAR 0 6
11540: PUSH
11541: LD_VAR 0 6
11545: PPUSH
11546: LD_VAR 0 2
11550: PUSH
11551: LD_VAR 0 2
11555: ARRAY
11556: PPUSH
11557: LD_VAR 0 3
11561: PPUSH
11562: CALL_OW 1
11566: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
11567: LD_ADDR_VAR 0 7
11571: PUSH
11572: LD_VAR 0 7
11576: PPUSH
11577: LD_VAR 0 7
11581: PPUSH
11582: LD_VAR 0 6
11586: PPUSH
11587: CALL_OW 1
11591: ST_TO_ADDR
// for i = s_arr downto 2 do
11592: LD_ADDR_VAR 0 5
11596: PUSH
11597: DOUBLE
11598: LD_VAR 0 7
11602: INC
11603: ST_TO_ADDR
11604: LD_INT 2
11606: PUSH
11607: FOR_DOWNTO
11608: IFFALSE 11692
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
11610: LD_ADDR_VAR 0 6
11614: PUSH
11615: LD_VAR 0 7
11619: PUSH
11620: LD_VAR 0 5
11624: PUSH
11625: LD_INT 1
11627: MINUS
11628: ARRAY
11629: PPUSH
11630: LD_VAR 0 2
11634: PUSH
11635: LD_VAR 0 5
11639: PUSH
11640: LD_INT 1
11642: MINUS
11643: ARRAY
11644: PPUSH
11645: LD_VAR 0 7
11649: PUSH
11650: LD_VAR 0 5
11654: ARRAY
11655: PPUSH
11656: CALL_OW 1
11660: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
11661: LD_ADDR_VAR 0 7
11665: PUSH
11666: LD_VAR 0 7
11670: PPUSH
11671: LD_VAR 0 5
11675: PUSH
11676: LD_INT 1
11678: MINUS
11679: PPUSH
11680: LD_VAR 0 6
11684: PPUSH
11685: CALL_OW 1
11689: ST_TO_ADDR
// end ;
11690: GO 11607
11692: POP
11693: POP
// result := s_arr [ 1 ] ;
11694: LD_ADDR_VAR 0 4
11698: PUSH
11699: LD_VAR 0 7
11703: PUSH
11704: LD_INT 1
11706: ARRAY
11707: ST_TO_ADDR
// end ; end ;
11708: LD_VAR 0 4
11712: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
11713: LD_INT 0
11715: PPUSH
11716: PPUSH
// if not list then
11717: LD_VAR 0 1
11721: NOT
11722: IFFALSE 11726
// exit ;
11724: GO 11817
// i := list [ pos1 ] ;
11726: LD_ADDR_VAR 0 5
11730: PUSH
11731: LD_VAR 0 1
11735: PUSH
11736: LD_VAR 0 2
11740: ARRAY
11741: ST_TO_ADDR
// if not i then
11742: LD_VAR 0 5
11746: NOT
11747: IFFALSE 11751
// exit ;
11749: GO 11817
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
11751: LD_ADDR_VAR 0 1
11755: PUSH
11756: LD_VAR 0 1
11760: PPUSH
11761: LD_VAR 0 2
11765: PPUSH
11766: LD_VAR 0 1
11770: PUSH
11771: LD_VAR 0 3
11775: ARRAY
11776: PPUSH
11777: CALL_OW 1
11781: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
11782: LD_ADDR_VAR 0 1
11786: PUSH
11787: LD_VAR 0 1
11791: PPUSH
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_VAR 0 5
11801: PPUSH
11802: CALL_OW 1
11806: ST_TO_ADDR
// result := list ;
11807: LD_ADDR_VAR 0 4
11811: PUSH
11812: LD_VAR 0 1
11816: ST_TO_ADDR
// end ;
11817: LD_VAR 0 4
11821: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
11822: LD_INT 0
11824: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
11825: LD_ADDR_VAR 0 5
11829: PUSH
11830: LD_VAR 0 1
11834: PPUSH
11835: CALL_OW 250
11839: PPUSH
11840: LD_VAR 0 1
11844: PPUSH
11845: CALL_OW 251
11849: PPUSH
11850: LD_VAR 0 2
11854: PPUSH
11855: LD_VAR 0 3
11859: PPUSH
11860: LD_VAR 0 4
11864: PPUSH
11865: CALL 12243 0 5
11869: ST_TO_ADDR
// end ;
11870: LD_VAR 0 5
11874: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
11875: LD_INT 0
11877: PPUSH
11878: PPUSH
11879: PPUSH
11880: PPUSH
// if not list or not unit then
11881: LD_VAR 0 2
11885: NOT
11886: PUSH
11887: LD_VAR 0 1
11891: NOT
11892: OR
11893: IFFALSE 11897
// exit ;
11895: GO 12238
// result := [ ] ;
11897: LD_ADDR_VAR 0 5
11901: PUSH
11902: EMPTY
11903: ST_TO_ADDR
// for i in list do
11904: LD_ADDR_VAR 0 6
11908: PUSH
11909: LD_VAR 0 2
11913: PUSH
11914: FOR_IN
11915: IFFALSE 12133
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
11917: LD_ADDR_VAR 0 8
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: LD_VAR 0 6
11931: PUSH
11932: LD_INT 1
11934: ARRAY
11935: PPUSH
11936: LD_VAR 0 6
11940: PUSH
11941: LD_INT 2
11943: ARRAY
11944: PPUSH
11945: CALL_OW 297
11949: ST_TO_ADDR
// if not Count ( result ) then
11950: LD_VAR 0 5
11954: PPUSH
11955: CALL 8527 0 1
11959: NOT
11960: IFFALSE 11993
// begin result := Join ( result , [ i , tmp ] ) ;
11962: LD_ADDR_VAR 0 5
11966: PUSH
11967: LD_VAR 0 5
11971: PPUSH
11972: LD_VAR 0 6
11976: PUSH
11977: LD_VAR 0 8
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: PPUSH
11986: CALL 44127 0 2
11990: ST_TO_ADDR
// continue ;
11991: GO 11914
// end ; if result [ result ] [ 2 ] <= tmp then
11993: LD_VAR 0 5
11997: PUSH
11998: LD_VAR 0 5
12002: ARRAY
12003: PUSH
12004: LD_INT 2
12006: ARRAY
12007: PUSH
12008: LD_VAR 0 8
12012: LESSEQUAL
12013: IFFALSE 12046
// result := Join ( result , [ i , tmp ] ) else
12015: LD_ADDR_VAR 0 5
12019: PUSH
12020: LD_VAR 0 5
12024: PPUSH
12025: LD_VAR 0 6
12029: PUSH
12030: LD_VAR 0 8
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PPUSH
12039: CALL 44127 0 2
12043: ST_TO_ADDR
12044: GO 12131
// begin for j := 1 to Count ( result ) do
12046: LD_ADDR_VAR 0 7
12050: PUSH
12051: DOUBLE
12052: LD_INT 1
12054: DEC
12055: ST_TO_ADDR
12056: LD_VAR 0 5
12060: PPUSH
12061: CALL 8527 0 1
12065: PUSH
12066: FOR_TO
12067: IFFALSE 12129
// begin if tmp < result [ j ] [ 2 ] then
12069: LD_VAR 0 8
12073: PUSH
12074: LD_VAR 0 5
12078: PUSH
12079: LD_VAR 0 7
12083: ARRAY
12084: PUSH
12085: LD_INT 2
12087: ARRAY
12088: LESS
12089: IFFALSE 12127
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12091: LD_ADDR_VAR 0 5
12095: PUSH
12096: LD_VAR 0 5
12100: PPUSH
12101: LD_VAR 0 7
12105: PPUSH
12106: LD_VAR 0 6
12110: PUSH
12111: LD_VAR 0 8
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PPUSH
12120: CALL_OW 2
12124: ST_TO_ADDR
// break ;
12125: GO 12129
// end ; end ;
12127: GO 12066
12129: POP
12130: POP
// end ; end ;
12131: GO 11914
12133: POP
12134: POP
// if result and not asc then
12135: LD_VAR 0 5
12139: PUSH
12140: LD_VAR 0 3
12144: NOT
12145: AND
12146: IFFALSE 12163
// result := ReverseArray ( result ) ;
12148: LD_ADDR_VAR 0 5
12152: PUSH
12153: LD_VAR 0 5
12157: PPUSH
12158: CALL 39403 0 1
12162: ST_TO_ADDR
// tmp := [ ] ;
12163: LD_ADDR_VAR 0 8
12167: PUSH
12168: EMPTY
12169: ST_TO_ADDR
// if mode then
12170: LD_VAR 0 4
12174: IFFALSE 12238
// begin for i := 1 to result do
12176: LD_ADDR_VAR 0 6
12180: PUSH
12181: DOUBLE
12182: LD_INT 1
12184: DEC
12185: ST_TO_ADDR
12186: LD_VAR 0 5
12190: PUSH
12191: FOR_TO
12192: IFFALSE 12226
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
12194: LD_ADDR_VAR 0 8
12198: PUSH
12199: LD_VAR 0 8
12203: PPUSH
12204: LD_VAR 0 5
12208: PUSH
12209: LD_VAR 0 6
12213: ARRAY
12214: PUSH
12215: LD_INT 1
12217: ARRAY
12218: PPUSH
12219: CALL 44127 0 2
12223: ST_TO_ADDR
12224: GO 12191
12226: POP
12227: POP
// result := tmp ;
12228: LD_ADDR_VAR 0 5
12232: PUSH
12233: LD_VAR 0 8
12237: ST_TO_ADDR
// end ; end ;
12238: LD_VAR 0 5
12242: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
12243: LD_INT 0
12245: PPUSH
12246: PPUSH
12247: PPUSH
12248: PPUSH
// if not list then
12249: LD_VAR 0 3
12253: NOT
12254: IFFALSE 12258
// exit ;
12256: GO 12646
// result := [ ] ;
12258: LD_ADDR_VAR 0 6
12262: PUSH
12263: EMPTY
12264: ST_TO_ADDR
// for i in list do
12265: LD_ADDR_VAR 0 7
12269: PUSH
12270: LD_VAR 0 3
12274: PUSH
12275: FOR_IN
12276: IFFALSE 12478
// begin tmp := GetDistUnitXY ( i , x , y ) ;
12278: LD_ADDR_VAR 0 9
12282: PUSH
12283: LD_VAR 0 7
12287: PPUSH
12288: LD_VAR 0 1
12292: PPUSH
12293: LD_VAR 0 2
12297: PPUSH
12298: CALL_OW 297
12302: ST_TO_ADDR
// if not result then
12303: LD_VAR 0 6
12307: NOT
12308: IFFALSE 12334
// result := [ [ i , tmp ] ] else
12310: LD_ADDR_VAR 0 6
12314: PUSH
12315: LD_VAR 0 7
12319: PUSH
12320: LD_VAR 0 9
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: EMPTY
12330: LIST
12331: ST_TO_ADDR
12332: GO 12476
// begin if result [ result ] [ 2 ] < tmp then
12334: LD_VAR 0 6
12338: PUSH
12339: LD_VAR 0 6
12343: ARRAY
12344: PUSH
12345: LD_INT 2
12347: ARRAY
12348: PUSH
12349: LD_VAR 0 9
12353: LESS
12354: IFFALSE 12396
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
12356: LD_ADDR_VAR 0 6
12360: PUSH
12361: LD_VAR 0 6
12365: PPUSH
12366: LD_VAR 0 6
12370: PUSH
12371: LD_INT 1
12373: PLUS
12374: PPUSH
12375: LD_VAR 0 7
12379: PUSH
12380: LD_VAR 0 9
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PPUSH
12389: CALL_OW 2
12393: ST_TO_ADDR
12394: GO 12476
// for j = 1 to result do
12396: LD_ADDR_VAR 0 8
12400: PUSH
12401: DOUBLE
12402: LD_INT 1
12404: DEC
12405: ST_TO_ADDR
12406: LD_VAR 0 6
12410: PUSH
12411: FOR_TO
12412: IFFALSE 12474
// begin if tmp < result [ j ] [ 2 ] then
12414: LD_VAR 0 9
12418: PUSH
12419: LD_VAR 0 6
12423: PUSH
12424: LD_VAR 0 8
12428: ARRAY
12429: PUSH
12430: LD_INT 2
12432: ARRAY
12433: LESS
12434: IFFALSE 12472
// begin result := Insert ( result , j , [ i , tmp ] ) ;
12436: LD_ADDR_VAR 0 6
12440: PUSH
12441: LD_VAR 0 6
12445: PPUSH
12446: LD_VAR 0 8
12450: PPUSH
12451: LD_VAR 0 7
12455: PUSH
12456: LD_VAR 0 9
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 2
12469: ST_TO_ADDR
// break ;
12470: GO 12474
// end ; end ;
12472: GO 12411
12474: POP
12475: POP
// end ; end ;
12476: GO 12275
12478: POP
12479: POP
// if result and not asc then
12480: LD_VAR 0 6
12484: PUSH
12485: LD_VAR 0 4
12489: NOT
12490: AND
12491: IFFALSE 12566
// begin tmp := result ;
12493: LD_ADDR_VAR 0 9
12497: PUSH
12498: LD_VAR 0 6
12502: ST_TO_ADDR
// for i = tmp downto 1 do
12503: LD_ADDR_VAR 0 7
12507: PUSH
12508: DOUBLE
12509: LD_VAR 0 9
12513: INC
12514: ST_TO_ADDR
12515: LD_INT 1
12517: PUSH
12518: FOR_DOWNTO
12519: IFFALSE 12564
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
12521: LD_ADDR_VAR 0 6
12525: PUSH
12526: LD_VAR 0 6
12530: PPUSH
12531: LD_VAR 0 9
12535: PUSH
12536: LD_VAR 0 7
12540: MINUS
12541: PUSH
12542: LD_INT 1
12544: PLUS
12545: PPUSH
12546: LD_VAR 0 9
12550: PUSH
12551: LD_VAR 0 7
12555: ARRAY
12556: PPUSH
12557: CALL_OW 1
12561: ST_TO_ADDR
12562: GO 12518
12564: POP
12565: POP
// end ; tmp := [ ] ;
12566: LD_ADDR_VAR 0 9
12570: PUSH
12571: EMPTY
12572: ST_TO_ADDR
// if mode then
12573: LD_VAR 0 5
12577: IFFALSE 12646
// begin for i = 1 to result do
12579: LD_ADDR_VAR 0 7
12583: PUSH
12584: DOUBLE
12585: LD_INT 1
12587: DEC
12588: ST_TO_ADDR
12589: LD_VAR 0 6
12593: PUSH
12594: FOR_TO
12595: IFFALSE 12634
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
12597: LD_ADDR_VAR 0 9
12601: PUSH
12602: LD_VAR 0 9
12606: PPUSH
12607: LD_VAR 0 7
12611: PPUSH
12612: LD_VAR 0 6
12616: PUSH
12617: LD_VAR 0 7
12621: ARRAY
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PPUSH
12627: CALL_OW 1
12631: ST_TO_ADDR
12632: GO 12594
12634: POP
12635: POP
// result := tmp ;
12636: LD_ADDR_VAR 0 6
12640: PUSH
12641: LD_VAR 0 9
12645: ST_TO_ADDR
// end ; end ;
12646: LD_VAR 0 6
12650: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
12651: LD_INT 0
12653: PPUSH
12654: PPUSH
12655: PPUSH
12656: PPUSH
12657: PPUSH
12658: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_INT 0
12666: PUSH
12667: LD_INT 0
12669: PUSH
12670: LD_INT 0
12672: PUSH
12673: EMPTY
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: ST_TO_ADDR
// if not x or not y then
12681: LD_VAR 0 2
12685: NOT
12686: PUSH
12687: LD_VAR 0 3
12691: NOT
12692: OR
12693: IFFALSE 12697
// exit ;
12695: GO 14347
// if not range then
12697: LD_VAR 0 4
12701: NOT
12702: IFFALSE 12712
// range := 10 ;
12704: LD_ADDR_VAR 0 4
12708: PUSH
12709: LD_INT 10
12711: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12712: LD_ADDR_VAR 0 8
12716: PUSH
12717: LD_INT 81
12719: PUSH
12720: LD_VAR 0 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 92
12731: PUSH
12732: LD_VAR 0 2
12736: PUSH
12737: LD_VAR 0 3
12741: PUSH
12742: LD_VAR 0 4
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 3
12755: PUSH
12756: LD_INT 21
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: ST_TO_ADDR
// if not tmp then
12780: LD_VAR 0 8
12784: NOT
12785: IFFALSE 12789
// exit ;
12787: GO 14347
// for i in tmp do
12789: LD_ADDR_VAR 0 6
12793: PUSH
12794: LD_VAR 0 8
12798: PUSH
12799: FOR_IN
12800: IFFALSE 14322
// begin points := [ 0 , 0 , 0 ] ;
12802: LD_ADDR_VAR 0 9
12806: PUSH
12807: LD_INT 0
12809: PUSH
12810: LD_INT 0
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: ST_TO_ADDR
// bpoints := 1 ;
12821: LD_ADDR_VAR 0 10
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// case GetType ( i ) of unit_human :
12829: LD_VAR 0 6
12833: PPUSH
12834: CALL_OW 247
12838: PUSH
12839: LD_INT 1
12841: DOUBLE
12842: EQUAL
12843: IFTRUE 12847
12845: GO 13425
12847: POP
// begin if GetClass ( i ) = 1 then
12848: LD_VAR 0 6
12852: PPUSH
12853: CALL_OW 257
12857: PUSH
12858: LD_INT 1
12860: EQUAL
12861: IFFALSE 12882
// points := [ 10 , 5 , 3 ] ;
12863: LD_ADDR_VAR 0 9
12867: PUSH
12868: LD_INT 10
12870: PUSH
12871: LD_INT 5
12873: PUSH
12874: LD_INT 3
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
12882: LD_VAR 0 6
12886: PPUSH
12887: CALL_OW 257
12891: PUSH
12892: LD_INT 2
12894: PUSH
12895: LD_INT 3
12897: PUSH
12898: LD_INT 4
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: LIST
12905: IN
12906: IFFALSE 12927
// points := [ 3 , 2 , 1 ] ;
12908: LD_ADDR_VAR 0 9
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: LD_INT 2
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: ST_TO_ADDR
// if GetClass ( i ) = 5 then
12927: LD_VAR 0 6
12931: PPUSH
12932: CALL_OW 257
12936: PUSH
12937: LD_INT 5
12939: EQUAL
12940: IFFALSE 12961
// points := [ 130 , 5 , 2 ] ;
12942: LD_ADDR_VAR 0 9
12946: PUSH
12947: LD_INT 130
12949: PUSH
12950: LD_INT 5
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: ST_TO_ADDR
// if GetClass ( i ) = 8 then
12961: LD_VAR 0 6
12965: PPUSH
12966: CALL_OW 257
12970: PUSH
12971: LD_INT 8
12973: EQUAL
12974: IFFALSE 12995
// points := [ 35 , 35 , 30 ] ;
12976: LD_ADDR_VAR 0 9
12980: PUSH
12981: LD_INT 35
12983: PUSH
12984: LD_INT 35
12986: PUSH
12987: LD_INT 30
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: ST_TO_ADDR
// if GetClass ( i ) = 9 then
12995: LD_VAR 0 6
12999: PPUSH
13000: CALL_OW 257
13004: PUSH
13005: LD_INT 9
13007: EQUAL
13008: IFFALSE 13029
// points := [ 20 , 55 , 40 ] ;
13010: LD_ADDR_VAR 0 9
13014: PUSH
13015: LD_INT 20
13017: PUSH
13018: LD_INT 55
13020: PUSH
13021: LD_INT 40
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: LIST
13028: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
13029: LD_VAR 0 6
13033: PPUSH
13034: CALL_OW 257
13038: PUSH
13039: LD_INT 12
13041: PUSH
13042: LD_INT 16
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: IN
13049: IFFALSE 13070
// points := [ 5 , 3 , 2 ] ;
13051: LD_ADDR_VAR 0 9
13055: PUSH
13056: LD_INT 5
13058: PUSH
13059: LD_INT 3
13061: PUSH
13062: LD_INT 2
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: LIST
13069: ST_TO_ADDR
// if GetClass ( i ) = 17 then
13070: LD_VAR 0 6
13074: PPUSH
13075: CALL_OW 257
13079: PUSH
13080: LD_INT 17
13082: EQUAL
13083: IFFALSE 13104
// points := [ 100 , 50 , 75 ] ;
13085: LD_ADDR_VAR 0 9
13089: PUSH
13090: LD_INT 100
13092: PUSH
13093: LD_INT 50
13095: PUSH
13096: LD_INT 75
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: LIST
13103: ST_TO_ADDR
// if GetClass ( i ) = 15 then
13104: LD_VAR 0 6
13108: PPUSH
13109: CALL_OW 257
13113: PUSH
13114: LD_INT 15
13116: EQUAL
13117: IFFALSE 13138
// points := [ 10 , 5 , 3 ] ;
13119: LD_ADDR_VAR 0 9
13123: PUSH
13124: LD_INT 10
13126: PUSH
13127: LD_INT 5
13129: PUSH
13130: LD_INT 3
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: LIST
13137: ST_TO_ADDR
// if GetClass ( i ) = 14 then
13138: LD_VAR 0 6
13142: PPUSH
13143: CALL_OW 257
13147: PUSH
13148: LD_INT 14
13150: EQUAL
13151: IFFALSE 13172
// points := [ 10 , 0 , 0 ] ;
13153: LD_ADDR_VAR 0 9
13157: PUSH
13158: LD_INT 10
13160: PUSH
13161: LD_INT 0
13163: PUSH
13164: LD_INT 0
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: ST_TO_ADDR
// if GetClass ( i ) = 11 then
13172: LD_VAR 0 6
13176: PPUSH
13177: CALL_OW 257
13181: PUSH
13182: LD_INT 11
13184: EQUAL
13185: IFFALSE 13206
// points := [ 30 , 10 , 5 ] ;
13187: LD_ADDR_VAR 0 9
13191: PUSH
13192: LD_INT 30
13194: PUSH
13195: LD_INT 10
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
13206: LD_VAR 0 1
13210: PPUSH
13211: LD_INT 5
13213: PPUSH
13214: CALL_OW 321
13218: PUSH
13219: LD_INT 2
13221: EQUAL
13222: IFFALSE 13239
// bpoints := bpoints * 1.8 ;
13224: LD_ADDR_VAR 0 10
13228: PUSH
13229: LD_VAR 0 10
13233: PUSH
13234: LD_REAL  1.80000000000000E+0000
13237: MUL
13238: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
13239: LD_VAR 0 6
13243: PPUSH
13244: CALL_OW 257
13248: PUSH
13249: LD_INT 1
13251: PUSH
13252: LD_INT 2
13254: PUSH
13255: LD_INT 3
13257: PUSH
13258: LD_INT 4
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: IN
13267: PUSH
13268: LD_VAR 0 1
13272: PPUSH
13273: LD_INT 51
13275: PPUSH
13276: CALL_OW 321
13280: PUSH
13281: LD_INT 2
13283: EQUAL
13284: AND
13285: IFFALSE 13302
// bpoints := bpoints * 1.2 ;
13287: LD_ADDR_VAR 0 10
13291: PUSH
13292: LD_VAR 0 10
13296: PUSH
13297: LD_REAL  1.20000000000000E+0000
13300: MUL
13301: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
13302: LD_VAR 0 6
13306: PPUSH
13307: CALL_OW 257
13311: PUSH
13312: LD_INT 5
13314: PUSH
13315: LD_INT 7
13317: PUSH
13318: LD_INT 9
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: IN
13326: PUSH
13327: LD_VAR 0 1
13331: PPUSH
13332: LD_INT 52
13334: PPUSH
13335: CALL_OW 321
13339: PUSH
13340: LD_INT 2
13342: EQUAL
13343: AND
13344: IFFALSE 13361
// bpoints := bpoints * 1.5 ;
13346: LD_ADDR_VAR 0 10
13350: PUSH
13351: LD_VAR 0 10
13355: PUSH
13356: LD_REAL  1.50000000000000E+0000
13359: MUL
13360: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
13361: LD_VAR 0 1
13365: PPUSH
13366: LD_INT 66
13368: PPUSH
13369: CALL_OW 321
13373: PUSH
13374: LD_INT 2
13376: EQUAL
13377: IFFALSE 13394
// bpoints := bpoints * 1.1 ;
13379: LD_ADDR_VAR 0 10
13383: PUSH
13384: LD_VAR 0 10
13388: PUSH
13389: LD_REAL  1.10000000000000E+0000
13392: MUL
13393: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
13394: LD_ADDR_VAR 0 10
13398: PUSH
13399: LD_VAR 0 10
13403: PUSH
13404: LD_VAR 0 6
13408: PPUSH
13409: LD_INT 1
13411: PPUSH
13412: CALL_OW 259
13416: PUSH
13417: LD_REAL  1.15000000000000E+0000
13420: MUL
13421: MUL
13422: ST_TO_ADDR
// end ; unit_vehicle :
13423: GO 14251
13425: LD_INT 2
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 14239
13433: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
13434: LD_VAR 0 6
13438: PPUSH
13439: CALL_OW 264
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: LD_INT 42
13449: PUSH
13450: LD_INT 24
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: IN
13458: IFFALSE 13479
// points := [ 25 , 5 , 3 ] ;
13460: LD_ADDR_VAR 0 9
13464: PUSH
13465: LD_INT 25
13467: PUSH
13468: LD_INT 5
13470: PUSH
13471: LD_INT 3
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
13479: LD_VAR 0 6
13483: PPUSH
13484: CALL_OW 264
13488: PUSH
13489: LD_INT 4
13491: PUSH
13492: LD_INT 43
13494: PUSH
13495: LD_INT 25
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: IN
13503: IFFALSE 13524
// points := [ 40 , 15 , 5 ] ;
13505: LD_ADDR_VAR 0 9
13509: PUSH
13510: LD_INT 40
13512: PUSH
13513: LD_INT 15
13515: PUSH
13516: LD_INT 5
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
13524: LD_VAR 0 6
13528: PPUSH
13529: CALL_OW 264
13533: PUSH
13534: LD_INT 3
13536: PUSH
13537: LD_INT 23
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: IN
13544: IFFALSE 13565
// points := [ 7 , 25 , 8 ] ;
13546: LD_ADDR_VAR 0 9
13550: PUSH
13551: LD_INT 7
13553: PUSH
13554: LD_INT 25
13556: PUSH
13557: LD_INT 8
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
13565: LD_VAR 0 6
13569: PPUSH
13570: CALL_OW 264
13574: PUSH
13575: LD_INT 5
13577: PUSH
13578: LD_INT 27
13580: PUSH
13581: LD_INT 44
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: IN
13589: IFFALSE 13610
// points := [ 14 , 50 , 16 ] ;
13591: LD_ADDR_VAR 0 9
13595: PUSH
13596: LD_INT 14
13598: PUSH
13599: LD_INT 50
13601: PUSH
13602: LD_INT 16
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
13610: LD_VAR 0 6
13614: PPUSH
13615: CALL_OW 264
13619: PUSH
13620: LD_INT 6
13622: PUSH
13623: LD_INT 46
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: IN
13630: IFFALSE 13651
// points := [ 32 , 120 , 70 ] ;
13632: LD_ADDR_VAR 0 9
13636: PUSH
13637: LD_INT 32
13639: PUSH
13640: LD_INT 120
13642: PUSH
13643: LD_INT 70
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
13651: LD_VAR 0 6
13655: PPUSH
13656: CALL_OW 264
13660: PUSH
13661: LD_INT 7
13663: PUSH
13664: LD_INT 28
13666: PUSH
13667: LD_INT 45
13669: PUSH
13670: LD_INT 92
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: IN
13679: IFFALSE 13700
// points := [ 35 , 20 , 45 ] ;
13681: LD_ADDR_VAR 0 9
13685: PUSH
13686: LD_INT 35
13688: PUSH
13689: LD_INT 20
13691: PUSH
13692: LD_INT 45
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: LIST
13699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
13700: LD_VAR 0 6
13704: PPUSH
13705: CALL_OW 264
13709: PUSH
13710: LD_INT 47
13712: PUSH
13713: EMPTY
13714: LIST
13715: IN
13716: IFFALSE 13737
// points := [ 67 , 45 , 75 ] ;
13718: LD_ADDR_VAR 0 9
13722: PUSH
13723: LD_INT 67
13725: PUSH
13726: LD_INT 45
13728: PUSH
13729: LD_INT 75
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: LIST
13736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
13737: LD_VAR 0 6
13741: PPUSH
13742: CALL_OW 264
13746: PUSH
13747: LD_INT 26
13749: PUSH
13750: EMPTY
13751: LIST
13752: IN
13753: IFFALSE 13774
// points := [ 120 , 30 , 80 ] ;
13755: LD_ADDR_VAR 0 9
13759: PUSH
13760: LD_INT 120
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 80
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: LIST
13773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
13774: LD_VAR 0 6
13778: PPUSH
13779: CALL_OW 264
13783: PUSH
13784: LD_INT 22
13786: PUSH
13787: EMPTY
13788: LIST
13789: IN
13790: IFFALSE 13811
// points := [ 40 , 1 , 1 ] ;
13792: LD_ADDR_VAR 0 9
13796: PUSH
13797: LD_INT 40
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: LD_INT 1
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
13811: LD_VAR 0 6
13815: PPUSH
13816: CALL_OW 264
13820: PUSH
13821: LD_INT 29
13823: PUSH
13824: EMPTY
13825: LIST
13826: IN
13827: IFFALSE 13848
// points := [ 70 , 200 , 400 ] ;
13829: LD_ADDR_VAR 0 9
13833: PUSH
13834: LD_INT 70
13836: PUSH
13837: LD_INT 200
13839: PUSH
13840: LD_INT 400
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: LIST
13847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
13848: LD_VAR 0 6
13852: PPUSH
13853: CALL_OW 264
13857: PUSH
13858: LD_INT 14
13860: PUSH
13861: LD_INT 53
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: IN
13868: IFFALSE 13889
// points := [ 40 , 10 , 20 ] ;
13870: LD_ADDR_VAR 0 9
13874: PUSH
13875: LD_INT 40
13877: PUSH
13878: LD_INT 10
13880: PUSH
13881: LD_INT 20
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
13889: LD_VAR 0 6
13893: PPUSH
13894: CALL_OW 264
13898: PUSH
13899: LD_INT 9
13901: PUSH
13902: EMPTY
13903: LIST
13904: IN
13905: IFFALSE 13926
// points := [ 5 , 70 , 20 ] ;
13907: LD_ADDR_VAR 0 9
13911: PUSH
13912: LD_INT 5
13914: PUSH
13915: LD_INT 70
13917: PUSH
13918: LD_INT 20
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
13926: LD_VAR 0 6
13930: PPUSH
13931: CALL_OW 264
13935: PUSH
13936: LD_INT 10
13938: PUSH
13939: EMPTY
13940: LIST
13941: IN
13942: IFFALSE 13963
// points := [ 35 , 110 , 70 ] ;
13944: LD_ADDR_VAR 0 9
13948: PUSH
13949: LD_INT 35
13951: PUSH
13952: LD_INT 110
13954: PUSH
13955: LD_INT 70
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
13963: LD_VAR 0 6
13967: PPUSH
13968: CALL_OW 265
13972: PUSH
13973: LD_INT 25
13975: EQUAL
13976: IFFALSE 13997
// points := [ 80 , 65 , 100 ] ;
13978: LD_ADDR_VAR 0 9
13982: PUSH
13983: LD_INT 80
13985: PUSH
13986: LD_INT 65
13988: PUSH
13989: LD_INT 100
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
13997: LD_VAR 0 6
14001: PPUSH
14002: CALL_OW 263
14006: PUSH
14007: LD_INT 1
14009: EQUAL
14010: IFFALSE 14045
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
14012: LD_ADDR_VAR 0 10
14016: PUSH
14017: LD_VAR 0 10
14021: PUSH
14022: LD_VAR 0 6
14026: PPUSH
14027: CALL_OW 311
14031: PPUSH
14032: LD_INT 3
14034: PPUSH
14035: CALL_OW 259
14039: PUSH
14040: LD_INT 4
14042: MUL
14043: MUL
14044: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
14045: LD_VAR 0 6
14049: PPUSH
14050: CALL_OW 263
14054: PUSH
14055: LD_INT 2
14057: EQUAL
14058: IFFALSE 14109
// begin j := IsControledBy ( i ) ;
14060: LD_ADDR_VAR 0 7
14064: PUSH
14065: LD_VAR 0 6
14069: PPUSH
14070: CALL_OW 312
14074: ST_TO_ADDR
// if j then
14075: LD_VAR 0 7
14079: IFFALSE 14109
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
14081: LD_ADDR_VAR 0 10
14085: PUSH
14086: LD_VAR 0 10
14090: PUSH
14091: LD_VAR 0 7
14095: PPUSH
14096: LD_INT 3
14098: PPUSH
14099: CALL_OW 259
14103: PUSH
14104: LD_INT 3
14106: MUL
14107: MUL
14108: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
14109: LD_VAR 0 6
14113: PPUSH
14114: CALL_OW 264
14118: PUSH
14119: LD_INT 5
14121: PUSH
14122: LD_INT 6
14124: PUSH
14125: LD_INT 46
14127: PUSH
14128: LD_INT 44
14130: PUSH
14131: LD_INT 47
14133: PUSH
14134: LD_INT 45
14136: PUSH
14137: LD_INT 28
14139: PUSH
14140: LD_INT 7
14142: PUSH
14143: LD_INT 27
14145: PUSH
14146: LD_INT 29
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: IN
14161: PUSH
14162: LD_VAR 0 1
14166: PPUSH
14167: LD_INT 52
14169: PPUSH
14170: CALL_OW 321
14174: PUSH
14175: LD_INT 2
14177: EQUAL
14178: AND
14179: IFFALSE 14196
// bpoints := bpoints * 1.2 ;
14181: LD_ADDR_VAR 0 10
14185: PUSH
14186: LD_VAR 0 10
14190: PUSH
14191: LD_REAL  1.20000000000000E+0000
14194: MUL
14195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
14196: LD_VAR 0 6
14200: PPUSH
14201: CALL_OW 264
14205: PUSH
14206: LD_INT 6
14208: PUSH
14209: LD_INT 46
14211: PUSH
14212: LD_INT 47
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: IN
14220: IFFALSE 14237
// bpoints := bpoints * 1.2 ;
14222: LD_ADDR_VAR 0 10
14226: PUSH
14227: LD_VAR 0 10
14231: PUSH
14232: LD_REAL  1.20000000000000E+0000
14235: MUL
14236: ST_TO_ADDR
// end ; unit_building :
14237: GO 14251
14239: LD_INT 3
14241: DOUBLE
14242: EQUAL
14243: IFTRUE 14247
14245: GO 14250
14247: POP
// ; end ;
14248: GO 14251
14250: POP
// for j = 1 to 3 do
14251: LD_ADDR_VAR 0 7
14255: PUSH
14256: DOUBLE
14257: LD_INT 1
14259: DEC
14260: ST_TO_ADDR
14261: LD_INT 3
14263: PUSH
14264: FOR_TO
14265: IFFALSE 14318
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
14267: LD_ADDR_VAR 0 5
14271: PUSH
14272: LD_VAR 0 5
14276: PPUSH
14277: LD_VAR 0 7
14281: PPUSH
14282: LD_VAR 0 5
14286: PUSH
14287: LD_VAR 0 7
14291: ARRAY
14292: PUSH
14293: LD_VAR 0 9
14297: PUSH
14298: LD_VAR 0 7
14302: ARRAY
14303: PUSH
14304: LD_VAR 0 10
14308: MUL
14309: PLUS
14310: PPUSH
14311: CALL_OW 1
14315: ST_TO_ADDR
14316: GO 14264
14318: POP
14319: POP
// end ;
14320: GO 12799
14322: POP
14323: POP
// result := Replace ( result , 4 , tmp ) ;
14324: LD_ADDR_VAR 0 5
14328: PUSH
14329: LD_VAR 0 5
14333: PPUSH
14334: LD_INT 4
14336: PPUSH
14337: LD_VAR 0 8
14341: PPUSH
14342: CALL_OW 1
14346: ST_TO_ADDR
// end ;
14347: LD_VAR 0 5
14351: RET
// export function DangerAtRange ( unit , range ) ; begin
14352: LD_INT 0
14354: PPUSH
// if not unit then
14355: LD_VAR 0 1
14359: NOT
14360: IFFALSE 14364
// exit ;
14362: GO 14409
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
14364: LD_ADDR_VAR 0 3
14368: PUSH
14369: LD_VAR 0 1
14373: PPUSH
14374: CALL_OW 255
14378: PPUSH
14379: LD_VAR 0 1
14383: PPUSH
14384: CALL_OW 250
14388: PPUSH
14389: LD_VAR 0 1
14393: PPUSH
14394: CALL_OW 251
14398: PPUSH
14399: LD_VAR 0 2
14403: PPUSH
14404: CALL 12651 0 4
14408: ST_TO_ADDR
// end ;
14409: LD_VAR 0 3
14413: RET
// export function DangerInArea ( side , area ) ; begin
14414: LD_INT 0
14416: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_VAR 0 2
14426: PPUSH
14427: LD_INT 81
14429: PUSH
14430: LD_VAR 0 1
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 70
14443: ST_TO_ADDR
// end ;
14444: LD_VAR 0 3
14448: RET
// export function IsExtension ( b ) ; begin
14449: LD_INT 0
14451: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
14452: LD_ADDR_VAR 0 2
14456: PUSH
14457: LD_VAR 0 1
14461: PUSH
14462: LD_INT 23
14464: PUSH
14465: LD_INT 20
14467: PUSH
14468: LD_INT 22
14470: PUSH
14471: LD_INT 17
14473: PUSH
14474: LD_INT 24
14476: PUSH
14477: LD_INT 21
14479: PUSH
14480: LD_INT 19
14482: PUSH
14483: LD_INT 16
14485: PUSH
14486: LD_INT 25
14488: PUSH
14489: LD_INT 18
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: LIST
14496: LIST
14497: LIST
14498: LIST
14499: LIST
14500: LIST
14501: LIST
14502: LIST
14503: IN
14504: ST_TO_ADDR
// end ;
14505: LD_VAR 0 2
14509: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
14510: LD_INT 0
14512: PPUSH
14513: PPUSH
14514: PPUSH
// result := [ ] ;
14515: LD_ADDR_VAR 0 4
14519: PUSH
14520: EMPTY
14521: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
14522: LD_ADDR_VAR 0 5
14526: PUSH
14527: LD_VAR 0 2
14531: PPUSH
14532: LD_INT 21
14534: PUSH
14535: LD_INT 3
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: CALL_OW 70
14546: ST_TO_ADDR
// if not tmp then
14547: LD_VAR 0 5
14551: NOT
14552: IFFALSE 14556
// exit ;
14554: GO 14620
// if checkLink then
14556: LD_VAR 0 3
14560: IFFALSE 14610
// begin for i in tmp do
14562: LD_ADDR_VAR 0 6
14566: PUSH
14567: LD_VAR 0 5
14571: PUSH
14572: FOR_IN
14573: IFFALSE 14608
// if GetBase ( i ) <> base then
14575: LD_VAR 0 6
14579: PPUSH
14580: CALL_OW 274
14584: PUSH
14585: LD_VAR 0 1
14589: NONEQUAL
14590: IFFALSE 14606
// ComLinkToBase ( base , i ) ;
14592: LD_VAR 0 1
14596: PPUSH
14597: LD_VAR 0 6
14601: PPUSH
14602: CALL_OW 169
14606: GO 14572
14608: POP
14609: POP
// end ; result := tmp ;
14610: LD_ADDR_VAR 0 4
14614: PUSH
14615: LD_VAR 0 5
14619: ST_TO_ADDR
// end ;
14620: LD_VAR 0 4
14624: RET
// export function ComComplete ( units , b ) ; var i ; begin
14625: LD_INT 0
14627: PPUSH
14628: PPUSH
// if not units then
14629: LD_VAR 0 1
14633: NOT
14634: IFFALSE 14638
// exit ;
14636: GO 14728
// for i in units do
14638: LD_ADDR_VAR 0 4
14642: PUSH
14643: LD_VAR 0 1
14647: PUSH
14648: FOR_IN
14649: IFFALSE 14726
// if BuildingStatus ( b ) = bs_build then
14651: LD_VAR 0 2
14655: PPUSH
14656: CALL_OW 461
14660: PUSH
14661: LD_INT 1
14663: EQUAL
14664: IFFALSE 14724
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
14666: LD_VAR 0 4
14670: PPUSH
14671: LD_STRING h
14673: PUSH
14674: LD_VAR 0 2
14678: PPUSH
14679: CALL_OW 250
14683: PUSH
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 251
14693: PUSH
14694: LD_VAR 0 2
14698: PUSH
14699: LD_INT 0
14701: PUSH
14702: LD_INT 0
14704: PUSH
14705: LD_INT 0
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: PPUSH
14720: CALL_OW 446
14724: GO 14648
14726: POP
14727: POP
// end ;
14728: LD_VAR 0 3
14732: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
14733: LD_INT 0
14735: PPUSH
14736: PPUSH
14737: PPUSH
14738: PPUSH
14739: PPUSH
14740: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
14741: LD_VAR 0 1
14745: NOT
14746: PUSH
14747: LD_VAR 0 1
14751: PPUSH
14752: CALL_OW 263
14756: PUSH
14757: LD_INT 2
14759: NONEQUAL
14760: OR
14761: IFFALSE 14765
// exit ;
14763: GO 15081
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
14765: LD_ADDR_VAR 0 6
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 255
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 30
14792: PUSH
14793: LD_INT 36
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 34
14802: PUSH
14803: LD_INT 31
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PPUSH
14819: CALL_OW 69
14823: ST_TO_ADDR
// if not tmp then
14824: LD_VAR 0 6
14828: NOT
14829: IFFALSE 14833
// exit ;
14831: GO 15081
// result := [ ] ;
14833: LD_ADDR_VAR 0 2
14837: PUSH
14838: EMPTY
14839: ST_TO_ADDR
// for i in tmp do
14840: LD_ADDR_VAR 0 3
14844: PUSH
14845: LD_VAR 0 6
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14922
// begin t := UnitsInside ( i ) ;
14853: LD_ADDR_VAR 0 4
14857: PUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: CALL_OW 313
14867: ST_TO_ADDR
// if t then
14868: LD_VAR 0 4
14872: IFFALSE 14920
// for j in t do
14874: LD_ADDR_VAR 0 7
14878: PUSH
14879: LD_VAR 0 4
14883: PUSH
14884: FOR_IN
14885: IFFALSE 14918
// result := Replace ( result , result + 1 , j ) ;
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_VAR 0 2
14896: PPUSH
14897: LD_VAR 0 2
14901: PUSH
14902: LD_INT 1
14904: PLUS
14905: PPUSH
14906: LD_VAR 0 7
14910: PPUSH
14911: CALL_OW 1
14915: ST_TO_ADDR
14916: GO 14884
14918: POP
14919: POP
// end ;
14920: GO 14850
14922: POP
14923: POP
// if not result then
14924: LD_VAR 0 2
14928: NOT
14929: IFFALSE 14933
// exit ;
14931: GO 15081
// mech := result [ 1 ] ;
14933: LD_ADDR_VAR 0 5
14937: PUSH
14938: LD_VAR 0 2
14942: PUSH
14943: LD_INT 1
14945: ARRAY
14946: ST_TO_ADDR
// if result > 1 then
14947: LD_VAR 0 2
14951: PUSH
14952: LD_INT 1
14954: GREATER
14955: IFFALSE 15067
// begin for i = 2 to result do
14957: LD_ADDR_VAR 0 3
14961: PUSH
14962: DOUBLE
14963: LD_INT 2
14965: DEC
14966: ST_TO_ADDR
14967: LD_VAR 0 2
14971: PUSH
14972: FOR_TO
14973: IFFALSE 15065
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
14975: LD_ADDR_VAR 0 4
14979: PUSH
14980: LD_VAR 0 2
14984: PUSH
14985: LD_VAR 0 3
14989: ARRAY
14990: PPUSH
14991: LD_INT 3
14993: PPUSH
14994: CALL_OW 259
14998: PUSH
14999: LD_VAR 0 2
15003: PUSH
15004: LD_VAR 0 3
15008: ARRAY
15009: PPUSH
15010: CALL_OW 432
15014: MINUS
15015: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
15016: LD_VAR 0 4
15020: PUSH
15021: LD_VAR 0 5
15025: PPUSH
15026: LD_INT 3
15028: PPUSH
15029: CALL_OW 259
15033: PUSH
15034: LD_VAR 0 5
15038: PPUSH
15039: CALL_OW 432
15043: MINUS
15044: GREATEREQUAL
15045: IFFALSE 15063
// mech := result [ i ] ;
15047: LD_ADDR_VAR 0 5
15051: PUSH
15052: LD_VAR 0 2
15056: PUSH
15057: LD_VAR 0 3
15061: ARRAY
15062: ST_TO_ADDR
// end ;
15063: GO 14972
15065: POP
15066: POP
// end ; ComLinkTo ( vehicle , mech ) ;
15067: LD_VAR 0 1
15071: PPUSH
15072: LD_VAR 0 5
15076: PPUSH
15077: CALL_OW 135
// end ;
15081: LD_VAR 0 2
15085: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
// result := [ ] ;
15101: LD_ADDR_VAR 0 7
15105: PUSH
15106: EMPTY
15107: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
15108: LD_VAR 0 1
15112: PPUSH
15113: CALL_OW 266
15117: PUSH
15118: LD_INT 0
15120: PUSH
15121: LD_INT 1
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: IN
15128: NOT
15129: IFFALSE 15133
// exit ;
15131: GO 16767
// if name then
15133: LD_VAR 0 3
15137: IFFALSE 15153
// SetBName ( base_dep , name ) ;
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_VAR 0 3
15148: PPUSH
15149: CALL_OW 500
// base := GetBase ( base_dep ) ;
15153: LD_ADDR_VAR 0 15
15157: PUSH
15158: LD_VAR 0 1
15162: PPUSH
15163: CALL_OW 274
15167: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
15168: LD_ADDR_VAR 0 16
15172: PUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 255
15182: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
15183: LD_ADDR_VAR 0 17
15187: PUSH
15188: LD_VAR 0 1
15192: PPUSH
15193: CALL_OW 248
15197: ST_TO_ADDR
// if sources then
15198: LD_VAR 0 5
15202: IFFALSE 15249
// for i = 1 to 3 do
15204: LD_ADDR_VAR 0 8
15208: PUSH
15209: DOUBLE
15210: LD_INT 1
15212: DEC
15213: ST_TO_ADDR
15214: LD_INT 3
15216: PUSH
15217: FOR_TO
15218: IFFALSE 15247
// AddResourceType ( base , i , sources [ i ] ) ;
15220: LD_VAR 0 15
15224: PPUSH
15225: LD_VAR 0 8
15229: PPUSH
15230: LD_VAR 0 5
15234: PUSH
15235: LD_VAR 0 8
15239: ARRAY
15240: PPUSH
15241: CALL_OW 276
15245: GO 15217
15247: POP
15248: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
15249: LD_ADDR_VAR 0 18
15253: PUSH
15254: LD_VAR 0 15
15258: PPUSH
15259: LD_VAR 0 2
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: CALL 14510 0 3
15271: ST_TO_ADDR
// InitHc ;
15272: CALL_OW 19
// InitUc ;
15276: CALL_OW 18
// uc_side := side ;
15280: LD_ADDR_OWVAR 20
15284: PUSH
15285: LD_VAR 0 16
15289: ST_TO_ADDR
// uc_nation := nation ;
15290: LD_ADDR_OWVAR 21
15294: PUSH
15295: LD_VAR 0 17
15299: ST_TO_ADDR
// if buildings then
15300: LD_VAR 0 18
15304: IFFALSE 16626
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
15306: LD_ADDR_VAR 0 19
15310: PUSH
15311: LD_VAR 0 18
15315: PPUSH
15316: LD_INT 2
15318: PUSH
15319: LD_INT 30
15321: PUSH
15322: LD_INT 29
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 30
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 72
15348: ST_TO_ADDR
// if tmp then
15349: LD_VAR 0 19
15353: IFFALSE 15401
// for i in tmp do
15355: LD_ADDR_VAR 0 8
15359: PUSH
15360: LD_VAR 0 19
15364: PUSH
15365: FOR_IN
15366: IFFALSE 15399
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
15368: LD_VAR 0 8
15372: PPUSH
15373: CALL_OW 250
15377: PPUSH
15378: LD_VAR 0 8
15382: PPUSH
15383: CALL_OW 251
15387: PPUSH
15388: LD_VAR 0 16
15392: PPUSH
15393: CALL_OW 441
15397: GO 15365
15399: POP
15400: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
15401: LD_VAR 0 18
15405: PPUSH
15406: LD_INT 2
15408: PUSH
15409: LD_INT 30
15411: PUSH
15412: LD_INT 32
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 30
15421: PUSH
15422: LD_INT 33
15424: PUSH
15425: EMPTY
15426: LIST
15427: LIST
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: PPUSH
15434: CALL_OW 72
15438: IFFALSE 15526
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
15440: LD_ADDR_VAR 0 8
15444: PUSH
15445: LD_VAR 0 18
15449: PPUSH
15450: LD_INT 2
15452: PUSH
15453: LD_INT 30
15455: PUSH
15456: LD_INT 32
15458: PUSH
15459: EMPTY
15460: LIST
15461: LIST
15462: PUSH
15463: LD_INT 30
15465: PUSH
15466: LD_INT 33
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: LIST
15477: PPUSH
15478: CALL_OW 72
15482: PUSH
15483: FOR_IN
15484: IFFALSE 15524
// begin if not GetBWeapon ( i ) then
15486: LD_VAR 0 8
15490: PPUSH
15491: CALL_OW 269
15495: NOT
15496: IFFALSE 15522
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
15498: LD_VAR 0 8
15502: PPUSH
15503: LD_VAR 0 8
15507: PPUSH
15508: LD_VAR 0 2
15512: PPUSH
15513: CALL 16772 0 2
15517: PPUSH
15518: CALL_OW 431
// end ;
15522: GO 15483
15524: POP
15525: POP
// end ; for i = 1 to personel do
15526: LD_ADDR_VAR 0 8
15530: PUSH
15531: DOUBLE
15532: LD_INT 1
15534: DEC
15535: ST_TO_ADDR
15536: LD_VAR 0 6
15540: PUSH
15541: FOR_TO
15542: IFFALSE 16606
// begin if i > 4 then
15544: LD_VAR 0 8
15548: PUSH
15549: LD_INT 4
15551: GREATER
15552: IFFALSE 15556
// break ;
15554: GO 16606
// case i of 1 :
15556: LD_VAR 0 8
15560: PUSH
15561: LD_INT 1
15563: DOUBLE
15564: EQUAL
15565: IFTRUE 15569
15567: GO 15649
15569: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
15570: LD_ADDR_VAR 0 12
15574: PUSH
15575: LD_VAR 0 18
15579: PPUSH
15580: LD_INT 22
15582: PUSH
15583: LD_VAR 0 16
15587: PUSH
15588: EMPTY
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 58
15594: PUSH
15595: EMPTY
15596: LIST
15597: PUSH
15598: LD_INT 2
15600: PUSH
15601: LD_INT 30
15603: PUSH
15604: LD_INT 32
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 30
15613: PUSH
15614: LD_INT 4
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 30
15623: PUSH
15624: LD_INT 5
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: LIST
15641: PPUSH
15642: CALL_OW 72
15646: ST_TO_ADDR
15647: GO 15871
15649: LD_INT 2
15651: DOUBLE
15652: EQUAL
15653: IFTRUE 15657
15655: GO 15719
15657: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
15658: LD_ADDR_VAR 0 12
15662: PUSH
15663: LD_VAR 0 18
15667: PPUSH
15668: LD_INT 22
15670: PUSH
15671: LD_VAR 0 16
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: LD_INT 2
15682: PUSH
15683: LD_INT 30
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: PUSH
15693: LD_INT 30
15695: PUSH
15696: LD_INT 1
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: LIST
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 72
15716: ST_TO_ADDR
15717: GO 15871
15719: LD_INT 3
15721: DOUBLE
15722: EQUAL
15723: IFTRUE 15727
15725: GO 15789
15727: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
15728: LD_ADDR_VAR 0 12
15732: PUSH
15733: LD_VAR 0 18
15737: PPUSH
15738: LD_INT 22
15740: PUSH
15741: LD_VAR 0 16
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 2
15752: PUSH
15753: LD_INT 30
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 30
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PPUSH
15782: CALL_OW 72
15786: ST_TO_ADDR
15787: GO 15871
15789: LD_INT 4
15791: DOUBLE
15792: EQUAL
15793: IFTRUE 15797
15795: GO 15870
15797: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
15798: LD_ADDR_VAR 0 12
15802: PUSH
15803: LD_VAR 0 18
15807: PPUSH
15808: LD_INT 22
15810: PUSH
15811: LD_VAR 0 16
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 2
15822: PUSH
15823: LD_INT 30
15825: PUSH
15826: LD_INT 6
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 30
15835: PUSH
15836: LD_INT 7
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 30
15845: PUSH
15846: LD_INT 8
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 72
15867: ST_TO_ADDR
15868: GO 15871
15870: POP
// if i = 1 then
15871: LD_VAR 0 8
15875: PUSH
15876: LD_INT 1
15878: EQUAL
15879: IFFALSE 15990
// begin tmp := [ ] ;
15881: LD_ADDR_VAR 0 19
15885: PUSH
15886: EMPTY
15887: ST_TO_ADDR
// for j in f do
15888: LD_ADDR_VAR 0 9
15892: PUSH
15893: LD_VAR 0 12
15897: PUSH
15898: FOR_IN
15899: IFFALSE 15972
// if GetBType ( j ) = b_bunker then
15901: LD_VAR 0 9
15905: PPUSH
15906: CALL_OW 266
15910: PUSH
15911: LD_INT 32
15913: EQUAL
15914: IFFALSE 15941
// tmp := Insert ( tmp , 1 , j ) else
15916: LD_ADDR_VAR 0 19
15920: PUSH
15921: LD_VAR 0 19
15925: PPUSH
15926: LD_INT 1
15928: PPUSH
15929: LD_VAR 0 9
15933: PPUSH
15934: CALL_OW 2
15938: ST_TO_ADDR
15939: GO 15970
// tmp := Insert ( tmp , tmp + 1 , j ) ;
15941: LD_ADDR_VAR 0 19
15945: PUSH
15946: LD_VAR 0 19
15950: PPUSH
15951: LD_VAR 0 19
15955: PUSH
15956: LD_INT 1
15958: PLUS
15959: PPUSH
15960: LD_VAR 0 9
15964: PPUSH
15965: CALL_OW 2
15969: ST_TO_ADDR
15970: GO 15898
15972: POP
15973: POP
// if tmp then
15974: LD_VAR 0 19
15978: IFFALSE 15990
// f := tmp ;
15980: LD_ADDR_VAR 0 12
15984: PUSH
15985: LD_VAR 0 19
15989: ST_TO_ADDR
// end ; x := personel [ i ] ;
15990: LD_ADDR_VAR 0 13
15994: PUSH
15995: LD_VAR 0 6
15999: PUSH
16000: LD_VAR 0 8
16004: ARRAY
16005: ST_TO_ADDR
// if x = - 1 then
16006: LD_VAR 0 13
16010: PUSH
16011: LD_INT 1
16013: NEG
16014: EQUAL
16015: IFFALSE 16224
// begin for j in f do
16017: LD_ADDR_VAR 0 9
16021: PUSH
16022: LD_VAR 0 12
16026: PUSH
16027: FOR_IN
16028: IFFALSE 16220
// repeat InitHc ;
16030: CALL_OW 19
// if GetBType ( j ) = b_barracks then
16034: LD_VAR 0 9
16038: PPUSH
16039: CALL_OW 266
16043: PUSH
16044: LD_INT 5
16046: EQUAL
16047: IFFALSE 16117
// begin if UnitsInside ( j ) < 3 then
16049: LD_VAR 0 9
16053: PPUSH
16054: CALL_OW 313
16058: PUSH
16059: LD_INT 3
16061: LESS
16062: IFFALSE 16098
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16064: LD_INT 0
16066: PPUSH
16067: LD_INT 5
16069: PUSH
16070: LD_INT 8
16072: PUSH
16073: LD_INT 9
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: LIST
16080: PUSH
16081: LD_VAR 0 17
16085: ARRAY
16086: PPUSH
16087: LD_VAR 0 4
16091: PPUSH
16092: CALL_OW 380
16096: GO 16115
// PrepareHuman ( false , i , skill ) ;
16098: LD_INT 0
16100: PPUSH
16101: LD_VAR 0 8
16105: PPUSH
16106: LD_VAR 0 4
16110: PPUSH
16111: CALL_OW 380
// end else
16115: GO 16134
// PrepareHuman ( false , i , skill ) ;
16117: LD_INT 0
16119: PPUSH
16120: LD_VAR 0 8
16124: PPUSH
16125: LD_VAR 0 4
16129: PPUSH
16130: CALL_OW 380
// un := CreateHuman ;
16134: LD_ADDR_VAR 0 14
16138: PUSH
16139: CALL_OW 44
16143: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16144: LD_ADDR_VAR 0 7
16148: PUSH
16149: LD_VAR 0 7
16153: PPUSH
16154: LD_INT 1
16156: PPUSH
16157: LD_VAR 0 14
16161: PPUSH
16162: CALL_OW 2
16166: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
16167: LD_VAR 0 14
16171: PPUSH
16172: LD_VAR 0 9
16176: PPUSH
16177: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
16181: LD_VAR 0 9
16185: PPUSH
16186: CALL_OW 313
16190: PUSH
16191: LD_INT 6
16193: EQUAL
16194: PUSH
16195: LD_VAR 0 9
16199: PPUSH
16200: CALL_OW 266
16204: PUSH
16205: LD_INT 32
16207: PUSH
16208: LD_INT 31
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: IN
16215: OR
16216: IFFALSE 16030
16218: GO 16027
16220: POP
16221: POP
// end else
16222: GO 16604
// for j = 1 to x do
16224: LD_ADDR_VAR 0 9
16228: PUSH
16229: DOUBLE
16230: LD_INT 1
16232: DEC
16233: ST_TO_ADDR
16234: LD_VAR 0 13
16238: PUSH
16239: FOR_TO
16240: IFFALSE 16602
// begin InitHc ;
16242: CALL_OW 19
// if not f then
16246: LD_VAR 0 12
16250: NOT
16251: IFFALSE 16340
// begin PrepareHuman ( false , i , skill ) ;
16253: LD_INT 0
16255: PPUSH
16256: LD_VAR 0 8
16260: PPUSH
16261: LD_VAR 0 4
16265: PPUSH
16266: CALL_OW 380
// un := CreateHuman ;
16270: LD_ADDR_VAR 0 14
16274: PUSH
16275: CALL_OW 44
16279: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16280: LD_ADDR_VAR 0 7
16284: PUSH
16285: LD_VAR 0 7
16289: PPUSH
16290: LD_INT 1
16292: PPUSH
16293: LD_VAR 0 14
16297: PPUSH
16298: CALL_OW 2
16302: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16303: LD_VAR 0 14
16307: PPUSH
16308: LD_VAR 0 1
16312: PPUSH
16313: CALL_OW 250
16317: PPUSH
16318: LD_VAR 0 1
16322: PPUSH
16323: CALL_OW 251
16327: PPUSH
16328: LD_INT 10
16330: PPUSH
16331: LD_INT 0
16333: PPUSH
16334: CALL_OW 50
// continue ;
16338: GO 16239
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
16340: LD_VAR 0 12
16344: PUSH
16345: LD_INT 1
16347: ARRAY
16348: PPUSH
16349: CALL_OW 313
16353: PUSH
16354: LD_VAR 0 12
16358: PUSH
16359: LD_INT 1
16361: ARRAY
16362: PPUSH
16363: CALL_OW 266
16367: PUSH
16368: LD_INT 32
16370: PUSH
16371: LD_INT 31
16373: PUSH
16374: EMPTY
16375: LIST
16376: LIST
16377: IN
16378: AND
16379: PUSH
16380: LD_VAR 0 12
16384: PUSH
16385: LD_INT 1
16387: ARRAY
16388: PPUSH
16389: CALL_OW 313
16393: PUSH
16394: LD_INT 6
16396: EQUAL
16397: OR
16398: IFFALSE 16418
// f := Delete ( f , 1 ) ;
16400: LD_ADDR_VAR 0 12
16404: PUSH
16405: LD_VAR 0 12
16409: PPUSH
16410: LD_INT 1
16412: PPUSH
16413: CALL_OW 3
16417: ST_TO_ADDR
// if not f then
16418: LD_VAR 0 12
16422: NOT
16423: IFFALSE 16441
// begin x := x + 2 ;
16425: LD_ADDR_VAR 0 13
16429: PUSH
16430: LD_VAR 0 13
16434: PUSH
16435: LD_INT 2
16437: PLUS
16438: ST_TO_ADDR
// continue ;
16439: GO 16239
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
16441: LD_VAR 0 12
16445: PUSH
16446: LD_INT 1
16448: ARRAY
16449: PPUSH
16450: CALL_OW 266
16454: PUSH
16455: LD_INT 5
16457: EQUAL
16458: IFFALSE 16532
// begin if UnitsInside ( f [ 1 ] ) < 3 then
16460: LD_VAR 0 12
16464: PUSH
16465: LD_INT 1
16467: ARRAY
16468: PPUSH
16469: CALL_OW 313
16473: PUSH
16474: LD_INT 3
16476: LESS
16477: IFFALSE 16513
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
16479: LD_INT 0
16481: PPUSH
16482: LD_INT 5
16484: PUSH
16485: LD_INT 8
16487: PUSH
16488: LD_INT 9
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: LD_VAR 0 17
16500: ARRAY
16501: PPUSH
16502: LD_VAR 0 4
16506: PPUSH
16507: CALL_OW 380
16511: GO 16530
// PrepareHuman ( false , i , skill ) ;
16513: LD_INT 0
16515: PPUSH
16516: LD_VAR 0 8
16520: PPUSH
16521: LD_VAR 0 4
16525: PPUSH
16526: CALL_OW 380
// end else
16530: GO 16549
// PrepareHuman ( false , i , skill ) ;
16532: LD_INT 0
16534: PPUSH
16535: LD_VAR 0 8
16539: PPUSH
16540: LD_VAR 0 4
16544: PPUSH
16545: CALL_OW 380
// un := CreateHuman ;
16549: LD_ADDR_VAR 0 14
16553: PUSH
16554: CALL_OW 44
16558: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
16559: LD_ADDR_VAR 0 7
16563: PUSH
16564: LD_VAR 0 7
16568: PPUSH
16569: LD_INT 1
16571: PPUSH
16572: LD_VAR 0 14
16576: PPUSH
16577: CALL_OW 2
16581: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
16582: LD_VAR 0 14
16586: PPUSH
16587: LD_VAR 0 12
16591: PUSH
16592: LD_INT 1
16594: ARRAY
16595: PPUSH
16596: CALL_OW 52
// end ;
16600: GO 16239
16602: POP
16603: POP
// end ;
16604: GO 15541
16606: POP
16607: POP
// result := result ^ buildings ;
16608: LD_ADDR_VAR 0 7
16612: PUSH
16613: LD_VAR 0 7
16617: PUSH
16618: LD_VAR 0 18
16622: ADD
16623: ST_TO_ADDR
// end else
16624: GO 16767
// begin for i = 1 to personel do
16626: LD_ADDR_VAR 0 8
16630: PUSH
16631: DOUBLE
16632: LD_INT 1
16634: DEC
16635: ST_TO_ADDR
16636: LD_VAR 0 6
16640: PUSH
16641: FOR_TO
16642: IFFALSE 16765
// begin if i > 4 then
16644: LD_VAR 0 8
16648: PUSH
16649: LD_INT 4
16651: GREATER
16652: IFFALSE 16656
// break ;
16654: GO 16765
// x := personel [ i ] ;
16656: LD_ADDR_VAR 0 13
16660: PUSH
16661: LD_VAR 0 6
16665: PUSH
16666: LD_VAR 0 8
16670: ARRAY
16671: ST_TO_ADDR
// if x = - 1 then
16672: LD_VAR 0 13
16676: PUSH
16677: LD_INT 1
16679: NEG
16680: EQUAL
16681: IFFALSE 16685
// continue ;
16683: GO 16641
// PrepareHuman ( false , i , skill ) ;
16685: LD_INT 0
16687: PPUSH
16688: LD_VAR 0 8
16692: PPUSH
16693: LD_VAR 0 4
16697: PPUSH
16698: CALL_OW 380
// un := CreateHuman ;
16702: LD_ADDR_VAR 0 14
16706: PUSH
16707: CALL_OW 44
16711: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
16712: LD_VAR 0 14
16716: PPUSH
16717: LD_VAR 0 1
16721: PPUSH
16722: CALL_OW 250
16726: PPUSH
16727: LD_VAR 0 1
16731: PPUSH
16732: CALL_OW 251
16736: PPUSH
16737: LD_INT 10
16739: PPUSH
16740: LD_INT 0
16742: PPUSH
16743: CALL_OW 50
// result := result ^ un ;
16747: LD_ADDR_VAR 0 7
16751: PUSH
16752: LD_VAR 0 7
16756: PUSH
16757: LD_VAR 0 14
16761: ADD
16762: ST_TO_ADDR
// end ;
16763: GO 16641
16765: POP
16766: POP
// end ; end ;
16767: LD_VAR 0 7
16771: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
16772: LD_INT 0
16774: PPUSH
16775: PPUSH
16776: PPUSH
16777: PPUSH
16778: PPUSH
16779: PPUSH
16780: PPUSH
16781: PPUSH
16782: PPUSH
16783: PPUSH
16784: PPUSH
16785: PPUSH
16786: PPUSH
16787: PPUSH
16788: PPUSH
16789: PPUSH
// result := false ;
16790: LD_ADDR_VAR 0 3
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
16798: LD_VAR 0 1
16802: NOT
16803: PUSH
16804: LD_VAR 0 1
16808: PPUSH
16809: CALL_OW 266
16813: PUSH
16814: LD_INT 32
16816: PUSH
16817: LD_INT 33
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: IN
16824: NOT
16825: OR
16826: IFFALSE 16830
// exit ;
16828: GO 17939
// nat := GetNation ( tower ) ;
16830: LD_ADDR_VAR 0 12
16834: PUSH
16835: LD_VAR 0 1
16839: PPUSH
16840: CALL_OW 248
16844: ST_TO_ADDR
// side := GetSide ( tower ) ;
16845: LD_ADDR_VAR 0 16
16849: PUSH
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 255
16859: ST_TO_ADDR
// x := GetX ( tower ) ;
16860: LD_ADDR_VAR 0 10
16864: PUSH
16865: LD_VAR 0 1
16869: PPUSH
16870: CALL_OW 250
16874: ST_TO_ADDR
// y := GetY ( tower ) ;
16875: LD_ADDR_VAR 0 11
16879: PUSH
16880: LD_VAR 0 1
16884: PPUSH
16885: CALL_OW 251
16889: ST_TO_ADDR
// if not x or not y then
16890: LD_VAR 0 10
16894: NOT
16895: PUSH
16896: LD_VAR 0 11
16900: NOT
16901: OR
16902: IFFALSE 16906
// exit ;
16904: GO 17939
// weapon := 0 ;
16906: LD_ADDR_VAR 0 18
16910: PUSH
16911: LD_INT 0
16913: ST_TO_ADDR
// fac_list := [ ] ;
16914: LD_ADDR_VAR 0 17
16918: PUSH
16919: EMPTY
16920: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
16921: LD_ADDR_VAR 0 6
16925: PUSH
16926: LD_VAR 0 1
16930: PPUSH
16931: CALL_OW 274
16935: PPUSH
16936: LD_VAR 0 2
16940: PPUSH
16941: LD_INT 0
16943: PPUSH
16944: CALL 14510 0 3
16948: PPUSH
16949: LD_INT 30
16951: PUSH
16952: LD_INT 3
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 72
16963: ST_TO_ADDR
// if not factories then
16964: LD_VAR 0 6
16968: NOT
16969: IFFALSE 16973
// exit ;
16971: GO 17939
// for i in factories do
16973: LD_ADDR_VAR 0 8
16977: PUSH
16978: LD_VAR 0 6
16982: PUSH
16983: FOR_IN
16984: IFFALSE 17009
// fac_list := fac_list union AvailableWeaponList ( i ) ;
16986: LD_ADDR_VAR 0 17
16990: PUSH
16991: LD_VAR 0 17
16995: PUSH
16996: LD_VAR 0 8
17000: PPUSH
17001: CALL_OW 478
17005: UNION
17006: ST_TO_ADDR
17007: GO 16983
17009: POP
17010: POP
// if not fac_list then
17011: LD_VAR 0 17
17015: NOT
17016: IFFALSE 17020
// exit ;
17018: GO 17939
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
17020: LD_ADDR_VAR 0 5
17024: PUSH
17025: LD_INT 4
17027: PUSH
17028: LD_INT 5
17030: PUSH
17031: LD_INT 9
17033: PUSH
17034: LD_INT 10
17036: PUSH
17037: LD_INT 6
17039: PUSH
17040: LD_INT 7
17042: PUSH
17043: LD_INT 11
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 27
17057: PUSH
17058: LD_INT 28
17060: PUSH
17061: LD_INT 26
17063: PUSH
17064: LD_INT 30
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 43
17075: PUSH
17076: LD_INT 44
17078: PUSH
17079: LD_INT 46
17081: PUSH
17082: LD_INT 45
17084: PUSH
17085: LD_INT 47
17087: PUSH
17088: LD_INT 49
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: LIST
17103: PUSH
17104: LD_VAR 0 12
17108: ARRAY
17109: ST_TO_ADDR
// list := list isect fac_list ;
17110: LD_ADDR_VAR 0 5
17114: PUSH
17115: LD_VAR 0 5
17119: PUSH
17120: LD_VAR 0 17
17124: ISECT
17125: ST_TO_ADDR
// if not list then
17126: LD_VAR 0 5
17130: NOT
17131: IFFALSE 17135
// exit ;
17133: GO 17939
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
17135: LD_VAR 0 12
17139: PUSH
17140: LD_INT 3
17142: EQUAL
17143: PUSH
17144: LD_INT 49
17146: PUSH
17147: LD_VAR 0 5
17151: IN
17152: AND
17153: PUSH
17154: LD_INT 31
17156: PPUSH
17157: LD_VAR 0 16
17161: PPUSH
17162: CALL_OW 321
17166: PUSH
17167: LD_INT 2
17169: EQUAL
17170: AND
17171: IFFALSE 17231
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
17173: LD_INT 22
17175: PUSH
17176: LD_VAR 0 16
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 35
17187: PUSH
17188: LD_INT 49
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 91
17197: PUSH
17198: LD_VAR 0 1
17202: PUSH
17203: LD_INT 10
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: LIST
17215: PPUSH
17216: CALL_OW 69
17220: NOT
17221: IFFALSE 17231
// weapon := ru_time_lapser ;
17223: LD_ADDR_VAR 0 18
17227: PUSH
17228: LD_INT 49
17230: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
17231: LD_VAR 0 12
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: IN
17246: PUSH
17247: LD_INT 11
17249: PUSH
17250: LD_VAR 0 5
17254: IN
17255: PUSH
17256: LD_INT 30
17258: PUSH
17259: LD_VAR 0 5
17263: IN
17264: OR
17265: AND
17266: PUSH
17267: LD_INT 6
17269: PPUSH
17270: LD_VAR 0 16
17274: PPUSH
17275: CALL_OW 321
17279: PUSH
17280: LD_INT 2
17282: EQUAL
17283: AND
17284: IFFALSE 17449
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
17286: LD_INT 22
17288: PUSH
17289: LD_VAR 0 16
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 35
17303: PUSH
17304: LD_INT 11
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 35
17313: PUSH
17314: LD_INT 30
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 91
17328: PUSH
17329: LD_VAR 0 1
17333: PUSH
17334: LD_INT 18
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: NOT
17352: PUSH
17353: LD_INT 22
17355: PUSH
17356: LD_VAR 0 16
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 30
17370: PUSH
17371: LD_INT 32
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 30
17380: PUSH
17381: LD_INT 33
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: LIST
17392: PUSH
17393: LD_INT 91
17395: PUSH
17396: LD_VAR 0 1
17400: PUSH
17401: LD_INT 12
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: LIST
17413: PUSH
17414: EMPTY
17415: LIST
17416: PPUSH
17417: CALL_OW 69
17421: PUSH
17422: LD_INT 2
17424: GREATER
17425: AND
17426: IFFALSE 17449
// weapon := [ us_radar , ar_radar ] [ nat ] ;
17428: LD_ADDR_VAR 0 18
17432: PUSH
17433: LD_INT 11
17435: PUSH
17436: LD_INT 30
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_VAR 0 12
17447: ARRAY
17448: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
17449: LD_VAR 0 18
17453: NOT
17454: PUSH
17455: LD_INT 40
17457: PPUSH
17458: LD_VAR 0 16
17462: PPUSH
17463: CALL_OW 321
17467: PUSH
17468: LD_INT 2
17470: EQUAL
17471: AND
17472: PUSH
17473: LD_INT 7
17475: PUSH
17476: LD_VAR 0 5
17480: IN
17481: PUSH
17482: LD_INT 28
17484: PUSH
17485: LD_VAR 0 5
17489: IN
17490: OR
17491: PUSH
17492: LD_INT 45
17494: PUSH
17495: LD_VAR 0 5
17499: IN
17500: OR
17501: AND
17502: IFFALSE 17756
// begin hex := GetHexInfo ( x , y ) ;
17504: LD_ADDR_VAR 0 4
17508: PUSH
17509: LD_VAR 0 10
17513: PPUSH
17514: LD_VAR 0 11
17518: PPUSH
17519: CALL_OW 546
17523: ST_TO_ADDR
// if hex [ 1 ] then
17524: LD_VAR 0 4
17528: PUSH
17529: LD_INT 1
17531: ARRAY
17532: IFFALSE 17536
// exit ;
17534: GO 17939
// height := hex [ 2 ] ;
17536: LD_ADDR_VAR 0 15
17540: PUSH
17541: LD_VAR 0 4
17545: PUSH
17546: LD_INT 2
17548: ARRAY
17549: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
17550: LD_ADDR_VAR 0 14
17554: PUSH
17555: LD_INT 0
17557: PUSH
17558: LD_INT 2
17560: PUSH
17561: LD_INT 3
17563: PUSH
17564: LD_INT 5
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: ST_TO_ADDR
// for i in tmp do
17573: LD_ADDR_VAR 0 8
17577: PUSH
17578: LD_VAR 0 14
17582: PUSH
17583: FOR_IN
17584: IFFALSE 17754
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
17586: LD_ADDR_VAR 0 9
17590: PUSH
17591: LD_VAR 0 10
17595: PPUSH
17596: LD_VAR 0 8
17600: PPUSH
17601: LD_INT 5
17603: PPUSH
17604: CALL_OW 272
17608: PUSH
17609: LD_VAR 0 11
17613: PPUSH
17614: LD_VAR 0 8
17618: PPUSH
17619: LD_INT 5
17621: PPUSH
17622: CALL_OW 273
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
17631: LD_VAR 0 9
17635: PUSH
17636: LD_INT 1
17638: ARRAY
17639: PPUSH
17640: LD_VAR 0 9
17644: PUSH
17645: LD_INT 2
17647: ARRAY
17648: PPUSH
17649: CALL_OW 488
17653: IFFALSE 17752
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
17655: LD_ADDR_VAR 0 4
17659: PUSH
17660: LD_VAR 0 9
17664: PUSH
17665: LD_INT 1
17667: ARRAY
17668: PPUSH
17669: LD_VAR 0 9
17673: PUSH
17674: LD_INT 2
17676: ARRAY
17677: PPUSH
17678: CALL_OW 546
17682: ST_TO_ADDR
// if hex [ 1 ] then
17683: LD_VAR 0 4
17687: PUSH
17688: LD_INT 1
17690: ARRAY
17691: IFFALSE 17695
// continue ;
17693: GO 17583
// h := hex [ 2 ] ;
17695: LD_ADDR_VAR 0 13
17699: PUSH
17700: LD_VAR 0 4
17704: PUSH
17705: LD_INT 2
17707: ARRAY
17708: ST_TO_ADDR
// if h + 7 < height then
17709: LD_VAR 0 13
17713: PUSH
17714: LD_INT 7
17716: PLUS
17717: PUSH
17718: LD_VAR 0 15
17722: LESS
17723: IFFALSE 17752
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
17725: LD_ADDR_VAR 0 18
17729: PUSH
17730: LD_INT 7
17732: PUSH
17733: LD_INT 28
17735: PUSH
17736: LD_INT 45
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: PUSH
17744: LD_VAR 0 12
17748: ARRAY
17749: ST_TO_ADDR
// break ;
17750: GO 17754
// end ; end ; end ;
17752: GO 17583
17754: POP
17755: POP
// end ; if not weapon then
17756: LD_VAR 0 18
17760: NOT
17761: IFFALSE 17821
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
17763: LD_ADDR_VAR 0 5
17767: PUSH
17768: LD_VAR 0 5
17772: PUSH
17773: LD_INT 11
17775: PUSH
17776: LD_INT 30
17778: PUSH
17779: LD_INT 49
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: LIST
17786: DIFF
17787: ST_TO_ADDR
// if not list then
17788: LD_VAR 0 5
17792: NOT
17793: IFFALSE 17797
// exit ;
17795: GO 17939
// weapon := list [ rand ( 1 , list ) ] ;
17797: LD_ADDR_VAR 0 18
17801: PUSH
17802: LD_VAR 0 5
17806: PUSH
17807: LD_INT 1
17809: PPUSH
17810: LD_VAR 0 5
17814: PPUSH
17815: CALL_OW 12
17819: ARRAY
17820: ST_TO_ADDR
// end ; if weapon then
17821: LD_VAR 0 18
17825: IFFALSE 17939
// begin tmp := CostOfWeapon ( weapon ) ;
17827: LD_ADDR_VAR 0 14
17831: PUSH
17832: LD_VAR 0 18
17836: PPUSH
17837: CALL_OW 451
17841: ST_TO_ADDR
// j := GetBase ( tower ) ;
17842: LD_ADDR_VAR 0 9
17846: PUSH
17847: LD_VAR 0 1
17851: PPUSH
17852: CALL_OW 274
17856: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
17857: LD_VAR 0 9
17861: PPUSH
17862: LD_INT 1
17864: PPUSH
17865: CALL_OW 275
17869: PUSH
17870: LD_VAR 0 14
17874: PUSH
17875: LD_INT 1
17877: ARRAY
17878: GREATEREQUAL
17879: PUSH
17880: LD_VAR 0 9
17884: PPUSH
17885: LD_INT 2
17887: PPUSH
17888: CALL_OW 275
17892: PUSH
17893: LD_VAR 0 14
17897: PUSH
17898: LD_INT 2
17900: ARRAY
17901: GREATEREQUAL
17902: AND
17903: PUSH
17904: LD_VAR 0 9
17908: PPUSH
17909: LD_INT 3
17911: PPUSH
17912: CALL_OW 275
17916: PUSH
17917: LD_VAR 0 14
17921: PUSH
17922: LD_INT 3
17924: ARRAY
17925: GREATEREQUAL
17926: AND
17927: IFFALSE 17939
// result := weapon ;
17929: LD_ADDR_VAR 0 3
17933: PUSH
17934: LD_VAR 0 18
17938: ST_TO_ADDR
// end ; end ;
17939: LD_VAR 0 3
17943: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
17944: LD_INT 0
17946: PPUSH
17947: PPUSH
// result := true ;
17948: LD_ADDR_VAR 0 3
17952: PUSH
17953: LD_INT 1
17955: ST_TO_ADDR
// if array1 = array2 then
17956: LD_VAR 0 1
17960: PUSH
17961: LD_VAR 0 2
17965: EQUAL
17966: IFFALSE 18026
// begin for i = 1 to array1 do
17968: LD_ADDR_VAR 0 4
17972: PUSH
17973: DOUBLE
17974: LD_INT 1
17976: DEC
17977: ST_TO_ADDR
17978: LD_VAR 0 1
17982: PUSH
17983: FOR_TO
17984: IFFALSE 18022
// if array1 [ i ] <> array2 [ i ] then
17986: LD_VAR 0 1
17990: PUSH
17991: LD_VAR 0 4
17995: ARRAY
17996: PUSH
17997: LD_VAR 0 2
18001: PUSH
18002: LD_VAR 0 4
18006: ARRAY
18007: NONEQUAL
18008: IFFALSE 18020
// begin result := false ;
18010: LD_ADDR_VAR 0 3
18014: PUSH
18015: LD_INT 0
18017: ST_TO_ADDR
// break ;
18018: GO 18022
// end ;
18020: GO 17983
18022: POP
18023: POP
// end else
18024: GO 18034
// result := false ;
18026: LD_ADDR_VAR 0 3
18030: PUSH
18031: LD_INT 0
18033: ST_TO_ADDR
// end ;
18034: LD_VAR 0 3
18038: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
18039: LD_INT 0
18041: PPUSH
18042: PPUSH
// if not array1 or not array2 then
18043: LD_VAR 0 1
18047: NOT
18048: PUSH
18049: LD_VAR 0 2
18053: NOT
18054: OR
18055: IFFALSE 18059
// exit ;
18057: GO 18123
// result := true ;
18059: LD_ADDR_VAR 0 3
18063: PUSH
18064: LD_INT 1
18066: ST_TO_ADDR
// for i = 1 to array1 do
18067: LD_ADDR_VAR 0 4
18071: PUSH
18072: DOUBLE
18073: LD_INT 1
18075: DEC
18076: ST_TO_ADDR
18077: LD_VAR 0 1
18081: PUSH
18082: FOR_TO
18083: IFFALSE 18121
// if array1 [ i ] <> array2 [ i ] then
18085: LD_VAR 0 1
18089: PUSH
18090: LD_VAR 0 4
18094: ARRAY
18095: PUSH
18096: LD_VAR 0 2
18100: PUSH
18101: LD_VAR 0 4
18105: ARRAY
18106: NONEQUAL
18107: IFFALSE 18119
// begin result := false ;
18109: LD_ADDR_VAR 0 3
18113: PUSH
18114: LD_INT 0
18116: ST_TO_ADDR
// break ;
18117: GO 18121
// end ;
18119: GO 18082
18121: POP
18122: POP
// end ;
18123: LD_VAR 0 3
18127: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
18128: LD_INT 0
18130: PPUSH
18131: PPUSH
18132: PPUSH
// pom := GetBase ( fac ) ;
18133: LD_ADDR_VAR 0 5
18137: PUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 274
18147: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
18148: LD_ADDR_VAR 0 4
18152: PUSH
18153: LD_VAR 0 2
18157: PUSH
18158: LD_INT 1
18160: ARRAY
18161: PPUSH
18162: LD_VAR 0 2
18166: PUSH
18167: LD_INT 2
18169: ARRAY
18170: PPUSH
18171: LD_VAR 0 2
18175: PUSH
18176: LD_INT 3
18178: ARRAY
18179: PPUSH
18180: LD_VAR 0 2
18184: PUSH
18185: LD_INT 4
18187: ARRAY
18188: PPUSH
18189: CALL_OW 449
18193: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18194: LD_ADDR_VAR 0 3
18198: PUSH
18199: LD_VAR 0 5
18203: PPUSH
18204: LD_INT 1
18206: PPUSH
18207: CALL_OW 275
18211: PUSH
18212: LD_VAR 0 4
18216: PUSH
18217: LD_INT 1
18219: ARRAY
18220: GREATEREQUAL
18221: PUSH
18222: LD_VAR 0 5
18226: PPUSH
18227: LD_INT 2
18229: PPUSH
18230: CALL_OW 275
18234: PUSH
18235: LD_VAR 0 4
18239: PUSH
18240: LD_INT 2
18242: ARRAY
18243: GREATEREQUAL
18244: AND
18245: PUSH
18246: LD_VAR 0 5
18250: PPUSH
18251: LD_INT 3
18253: PPUSH
18254: CALL_OW 275
18258: PUSH
18259: LD_VAR 0 4
18263: PUSH
18264: LD_INT 3
18266: ARRAY
18267: GREATEREQUAL
18268: AND
18269: ST_TO_ADDR
// end ;
18270: LD_VAR 0 3
18274: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
18275: LD_INT 0
18277: PPUSH
18278: PPUSH
18279: PPUSH
18280: PPUSH
// pom := GetBase ( building ) ;
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_VAR 0 1
18290: PPUSH
18291: CALL_OW 274
18295: ST_TO_ADDR
// if not pom then
18296: LD_VAR 0 3
18300: NOT
18301: IFFALSE 18305
// exit ;
18303: GO 18475
// btype := GetBType ( building ) ;
18305: LD_ADDR_VAR 0 5
18309: PUSH
18310: LD_VAR 0 1
18314: PPUSH
18315: CALL_OW 266
18319: ST_TO_ADDR
// if btype = b_armoury then
18320: LD_VAR 0 5
18324: PUSH
18325: LD_INT 4
18327: EQUAL
18328: IFFALSE 18338
// btype := b_barracks ;
18330: LD_ADDR_VAR 0 5
18334: PUSH
18335: LD_INT 5
18337: ST_TO_ADDR
// if btype = b_depot then
18338: LD_VAR 0 5
18342: PUSH
18343: LD_INT 0
18345: EQUAL
18346: IFFALSE 18356
// btype := b_warehouse ;
18348: LD_ADDR_VAR 0 5
18352: PUSH
18353: LD_INT 1
18355: ST_TO_ADDR
// if btype = b_workshop then
18356: LD_VAR 0 5
18360: PUSH
18361: LD_INT 2
18363: EQUAL
18364: IFFALSE 18374
// btype := b_factory ;
18366: LD_ADDR_VAR 0 5
18370: PUSH
18371: LD_INT 3
18373: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18374: LD_ADDR_VAR 0 4
18378: PUSH
18379: LD_VAR 0 5
18383: PPUSH
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 248
18393: PPUSH
18394: CALL_OW 450
18398: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18399: LD_ADDR_VAR 0 2
18403: PUSH
18404: LD_VAR 0 3
18408: PPUSH
18409: LD_INT 1
18411: PPUSH
18412: CALL_OW 275
18416: PUSH
18417: LD_VAR 0 4
18421: PUSH
18422: LD_INT 1
18424: ARRAY
18425: GREATEREQUAL
18426: PUSH
18427: LD_VAR 0 3
18431: PPUSH
18432: LD_INT 2
18434: PPUSH
18435: CALL_OW 275
18439: PUSH
18440: LD_VAR 0 4
18444: PUSH
18445: LD_INT 2
18447: ARRAY
18448: GREATEREQUAL
18449: AND
18450: PUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: LD_INT 3
18458: PPUSH
18459: CALL_OW 275
18463: PUSH
18464: LD_VAR 0 4
18468: PUSH
18469: LD_INT 3
18471: ARRAY
18472: GREATEREQUAL
18473: AND
18474: ST_TO_ADDR
// end ;
18475: LD_VAR 0 2
18479: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
18484: PPUSH
// pom := GetBase ( building ) ;
18485: LD_ADDR_VAR 0 4
18489: PUSH
18490: LD_VAR 0 1
18494: PPUSH
18495: CALL_OW 274
18499: ST_TO_ADDR
// if not pom then
18500: LD_VAR 0 4
18504: NOT
18505: IFFALSE 18509
// exit ;
18507: GO 18610
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
18509: LD_ADDR_VAR 0 5
18513: PUSH
18514: LD_VAR 0 2
18518: PPUSH
18519: LD_VAR 0 1
18523: PPUSH
18524: CALL_OW 248
18528: PPUSH
18529: CALL_OW 450
18533: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
18534: LD_ADDR_VAR 0 3
18538: PUSH
18539: LD_VAR 0 4
18543: PPUSH
18544: LD_INT 1
18546: PPUSH
18547: CALL_OW 275
18551: PUSH
18552: LD_VAR 0 5
18556: PUSH
18557: LD_INT 1
18559: ARRAY
18560: GREATEREQUAL
18561: PUSH
18562: LD_VAR 0 4
18566: PPUSH
18567: LD_INT 2
18569: PPUSH
18570: CALL_OW 275
18574: PUSH
18575: LD_VAR 0 5
18579: PUSH
18580: LD_INT 2
18582: ARRAY
18583: GREATEREQUAL
18584: AND
18585: PUSH
18586: LD_VAR 0 4
18590: PPUSH
18591: LD_INT 3
18593: PPUSH
18594: CALL_OW 275
18598: PUSH
18599: LD_VAR 0 5
18603: PUSH
18604: LD_INT 3
18606: ARRAY
18607: GREATEREQUAL
18608: AND
18609: ST_TO_ADDR
// end ;
18610: LD_VAR 0 3
18614: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
18615: LD_INT 0
18617: PPUSH
18618: PPUSH
18619: PPUSH
18620: PPUSH
18621: PPUSH
18622: PPUSH
18623: PPUSH
18624: PPUSH
18625: PPUSH
18626: PPUSH
18627: PPUSH
// result := false ;
18628: LD_ADDR_VAR 0 8
18632: PUSH
18633: LD_INT 0
18635: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
18636: LD_VAR 0 5
18640: NOT
18641: PUSH
18642: LD_VAR 0 1
18646: NOT
18647: OR
18648: PUSH
18649: LD_VAR 0 2
18653: NOT
18654: OR
18655: PUSH
18656: LD_VAR 0 3
18660: NOT
18661: OR
18662: IFFALSE 18666
// exit ;
18664: GO 19480
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
18666: LD_ADDR_VAR 0 14
18670: PUSH
18671: LD_VAR 0 1
18675: PPUSH
18676: LD_VAR 0 2
18680: PPUSH
18681: LD_VAR 0 3
18685: PPUSH
18686: LD_VAR 0 4
18690: PPUSH
18691: LD_VAR 0 5
18695: PUSH
18696: LD_INT 1
18698: ARRAY
18699: PPUSH
18700: CALL_OW 248
18704: PPUSH
18705: LD_INT 0
18707: PPUSH
18708: CALL 20733 0 6
18712: ST_TO_ADDR
// if not hexes then
18713: LD_VAR 0 14
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 19480
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18722: LD_ADDR_VAR 0 17
18726: PUSH
18727: LD_VAR 0 5
18731: PPUSH
18732: LD_INT 22
18734: PUSH
18735: LD_VAR 0 13
18739: PPUSH
18740: CALL_OW 255
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 2
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 0
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 30
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PPUSH
18781: CALL_OW 72
18785: ST_TO_ADDR
// for i = 1 to hexes do
18786: LD_ADDR_VAR 0 9
18790: PUSH
18791: DOUBLE
18792: LD_INT 1
18794: DEC
18795: ST_TO_ADDR
18796: LD_VAR 0 14
18800: PUSH
18801: FOR_TO
18802: IFFALSE 19478
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
18804: LD_ADDR_VAR 0 13
18808: PUSH
18809: LD_VAR 0 14
18813: PUSH
18814: LD_VAR 0 9
18818: ARRAY
18819: PUSH
18820: LD_INT 1
18822: ARRAY
18823: PPUSH
18824: LD_VAR 0 14
18828: PUSH
18829: LD_VAR 0 9
18833: ARRAY
18834: PUSH
18835: LD_INT 2
18837: ARRAY
18838: PPUSH
18839: CALL_OW 428
18843: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
18844: LD_VAR 0 14
18848: PUSH
18849: LD_VAR 0 9
18853: ARRAY
18854: PUSH
18855: LD_INT 1
18857: ARRAY
18858: PPUSH
18859: LD_VAR 0 14
18863: PUSH
18864: LD_VAR 0 9
18868: ARRAY
18869: PUSH
18870: LD_INT 2
18872: ARRAY
18873: PPUSH
18874: CALL_OW 351
18878: PUSH
18879: LD_VAR 0 14
18883: PUSH
18884: LD_VAR 0 9
18888: ARRAY
18889: PUSH
18890: LD_INT 1
18892: ARRAY
18893: PPUSH
18894: LD_VAR 0 14
18898: PUSH
18899: LD_VAR 0 9
18903: ARRAY
18904: PUSH
18905: LD_INT 2
18907: ARRAY
18908: PPUSH
18909: CALL_OW 488
18913: NOT
18914: OR
18915: PUSH
18916: LD_VAR 0 13
18920: PPUSH
18921: CALL_OW 247
18925: PUSH
18926: LD_INT 3
18928: EQUAL
18929: OR
18930: IFFALSE 18936
// exit ;
18932: POP
18933: POP
18934: GO 19480
// if not tmp then
18936: LD_VAR 0 13
18940: NOT
18941: IFFALSE 18945
// continue ;
18943: GO 18801
// result := true ;
18945: LD_ADDR_VAR 0 8
18949: PUSH
18950: LD_INT 1
18952: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
18953: LD_VAR 0 6
18957: PUSH
18958: LD_VAR 0 13
18962: PPUSH
18963: CALL_OW 247
18967: PUSH
18968: LD_INT 2
18970: EQUAL
18971: AND
18972: PUSH
18973: LD_VAR 0 13
18977: PPUSH
18978: CALL_OW 263
18982: PUSH
18983: LD_INT 1
18985: EQUAL
18986: AND
18987: IFFALSE 19151
// begin if IsDrivenBy ( tmp ) then
18989: LD_VAR 0 13
18993: PPUSH
18994: CALL_OW 311
18998: IFFALSE 19002
// continue ;
19000: GO 18801
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
19002: LD_VAR 0 6
19006: PPUSH
19007: LD_INT 3
19009: PUSH
19010: LD_INT 60
19012: PUSH
19013: EMPTY
19014: LIST
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: LD_INT 55
19025: PUSH
19026: EMPTY
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PPUSH
19037: CALL_OW 72
19041: IFFALSE 19149
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
19043: LD_ADDR_VAR 0 18
19047: PUSH
19048: LD_VAR 0 6
19052: PPUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 60
19058: PUSH
19059: EMPTY
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 3
19068: PUSH
19069: LD_INT 55
19071: PUSH
19072: EMPTY
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: EMPTY
19080: LIST
19081: LIST
19082: PPUSH
19083: CALL_OW 72
19087: PUSH
19088: LD_INT 1
19090: ARRAY
19091: ST_TO_ADDR
// if IsInUnit ( driver ) then
19092: LD_VAR 0 18
19096: PPUSH
19097: CALL_OW 310
19101: IFFALSE 19112
// ComExit ( driver ) ;
19103: LD_VAR 0 18
19107: PPUSH
19108: CALL 44525 0 1
// AddComEnterUnit ( driver , tmp ) ;
19112: LD_VAR 0 18
19116: PPUSH
19117: LD_VAR 0 13
19121: PPUSH
19122: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
19126: LD_VAR 0 18
19130: PPUSH
19131: LD_VAR 0 7
19135: PPUSH
19136: CALL_OW 173
// AddComExitVehicle ( driver ) ;
19140: LD_VAR 0 18
19144: PPUSH
19145: CALL_OW 181
// end ; continue ;
19149: GO 18801
// end ; if not cleaners or not tmp in cleaners then
19151: LD_VAR 0 6
19155: NOT
19156: PUSH
19157: LD_VAR 0 13
19161: PUSH
19162: LD_VAR 0 6
19166: IN
19167: NOT
19168: OR
19169: IFFALSE 19476
// begin if dep then
19171: LD_VAR 0 17
19175: IFFALSE 19311
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
19177: LD_ADDR_VAR 0 16
19181: PUSH
19182: LD_VAR 0 17
19186: PUSH
19187: LD_INT 1
19189: ARRAY
19190: PPUSH
19191: CALL_OW 250
19195: PPUSH
19196: LD_VAR 0 17
19200: PUSH
19201: LD_INT 1
19203: ARRAY
19204: PPUSH
19205: CALL_OW 254
19209: PPUSH
19210: LD_INT 5
19212: PPUSH
19213: CALL_OW 272
19217: PUSH
19218: LD_VAR 0 17
19222: PUSH
19223: LD_INT 1
19225: ARRAY
19226: PPUSH
19227: CALL_OW 251
19231: PPUSH
19232: LD_VAR 0 17
19236: PUSH
19237: LD_INT 1
19239: ARRAY
19240: PPUSH
19241: CALL_OW 254
19245: PPUSH
19246: LD_INT 5
19248: PPUSH
19249: CALL_OW 273
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
19258: LD_VAR 0 16
19262: PUSH
19263: LD_INT 1
19265: ARRAY
19266: PPUSH
19267: LD_VAR 0 16
19271: PUSH
19272: LD_INT 2
19274: ARRAY
19275: PPUSH
19276: CALL_OW 488
19280: IFFALSE 19311
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
19282: LD_VAR 0 13
19286: PPUSH
19287: LD_VAR 0 16
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: LD_VAR 0 16
19300: PUSH
19301: LD_INT 2
19303: ARRAY
19304: PPUSH
19305: CALL_OW 111
// continue ;
19309: GO 18801
// end ; end ; r := GetDir ( tmp ) ;
19311: LD_ADDR_VAR 0 15
19315: PUSH
19316: LD_VAR 0 13
19320: PPUSH
19321: CALL_OW 254
19325: ST_TO_ADDR
// if r = 5 then
19326: LD_VAR 0 15
19330: PUSH
19331: LD_INT 5
19333: EQUAL
19334: IFFALSE 19344
// r := 0 ;
19336: LD_ADDR_VAR 0 15
19340: PUSH
19341: LD_INT 0
19343: ST_TO_ADDR
// for j = r to 5 do
19344: LD_ADDR_VAR 0 10
19348: PUSH
19349: DOUBLE
19350: LD_VAR 0 15
19354: DEC
19355: ST_TO_ADDR
19356: LD_INT 5
19358: PUSH
19359: FOR_TO
19360: IFFALSE 19474
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
19362: LD_ADDR_VAR 0 11
19366: PUSH
19367: LD_VAR 0 13
19371: PPUSH
19372: CALL_OW 250
19376: PPUSH
19377: LD_VAR 0 10
19381: PPUSH
19382: LD_INT 2
19384: PPUSH
19385: CALL_OW 272
19389: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
19390: LD_ADDR_VAR 0 12
19394: PUSH
19395: LD_VAR 0 13
19399: PPUSH
19400: CALL_OW 251
19404: PPUSH
19405: LD_VAR 0 10
19409: PPUSH
19410: LD_INT 2
19412: PPUSH
19413: CALL_OW 273
19417: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
19418: LD_VAR 0 11
19422: PPUSH
19423: LD_VAR 0 12
19427: PPUSH
19428: CALL_OW 488
19432: PUSH
19433: LD_VAR 0 11
19437: PPUSH
19438: LD_VAR 0 12
19442: PPUSH
19443: CALL_OW 428
19447: NOT
19448: AND
19449: IFFALSE 19472
// begin ComMoveXY ( tmp , _x , _y ) ;
19451: LD_VAR 0 13
19455: PPUSH
19456: LD_VAR 0 11
19460: PPUSH
19461: LD_VAR 0 12
19465: PPUSH
19466: CALL_OW 111
// break ;
19470: GO 19474
// end ; end ;
19472: GO 19359
19474: POP
19475: POP
// end ; end ;
19476: GO 18801
19478: POP
19479: POP
// end ;
19480: LD_VAR 0 8
19484: RET
// export function BuildingTechInvented ( side , btype ) ; begin
19485: LD_INT 0
19487: PPUSH
// result := true ;
19488: LD_ADDR_VAR 0 3
19492: PUSH
19493: LD_INT 1
19495: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
19496: LD_VAR 0 2
19500: PUSH
19501: LD_INT 24
19503: DOUBLE
19504: EQUAL
19505: IFTRUE 19515
19507: LD_INT 33
19509: DOUBLE
19510: EQUAL
19511: IFTRUE 19515
19513: GO 19540
19515: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
19516: LD_ADDR_VAR 0 3
19520: PUSH
19521: LD_INT 32
19523: PPUSH
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 321
19533: PUSH
19534: LD_INT 2
19536: EQUAL
19537: ST_TO_ADDR
19538: GO 19856
19540: LD_INT 20
19542: DOUBLE
19543: EQUAL
19544: IFTRUE 19548
19546: GO 19573
19548: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
19549: LD_ADDR_VAR 0 3
19553: PUSH
19554: LD_INT 6
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 321
19566: PUSH
19567: LD_INT 2
19569: EQUAL
19570: ST_TO_ADDR
19571: GO 19856
19573: LD_INT 22
19575: DOUBLE
19576: EQUAL
19577: IFTRUE 19587
19579: LD_INT 36
19581: DOUBLE
19582: EQUAL
19583: IFTRUE 19587
19585: GO 19612
19587: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
19588: LD_ADDR_VAR 0 3
19592: PUSH
19593: LD_INT 15
19595: PPUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 321
19605: PUSH
19606: LD_INT 2
19608: EQUAL
19609: ST_TO_ADDR
19610: GO 19856
19612: LD_INT 30
19614: DOUBLE
19615: EQUAL
19616: IFTRUE 19620
19618: GO 19645
19620: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
19621: LD_ADDR_VAR 0 3
19625: PUSH
19626: LD_INT 20
19628: PPUSH
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL_OW 321
19638: PUSH
19639: LD_INT 2
19641: EQUAL
19642: ST_TO_ADDR
19643: GO 19856
19645: LD_INT 28
19647: DOUBLE
19648: EQUAL
19649: IFTRUE 19659
19651: LD_INT 21
19653: DOUBLE
19654: EQUAL
19655: IFTRUE 19659
19657: GO 19684
19659: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
19660: LD_ADDR_VAR 0 3
19664: PUSH
19665: LD_INT 21
19667: PPUSH
19668: LD_VAR 0 1
19672: PPUSH
19673: CALL_OW 321
19677: PUSH
19678: LD_INT 2
19680: EQUAL
19681: ST_TO_ADDR
19682: GO 19856
19684: LD_INT 16
19686: DOUBLE
19687: EQUAL
19688: IFTRUE 19692
19690: GO 19717
19692: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
19693: LD_ADDR_VAR 0 3
19697: PUSH
19698: LD_INT 84
19700: PPUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 321
19710: PUSH
19711: LD_INT 2
19713: EQUAL
19714: ST_TO_ADDR
19715: GO 19856
19717: LD_INT 19
19719: DOUBLE
19720: EQUAL
19721: IFTRUE 19731
19723: LD_INT 23
19725: DOUBLE
19726: EQUAL
19727: IFTRUE 19731
19729: GO 19756
19731: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
19732: LD_ADDR_VAR 0 3
19736: PUSH
19737: LD_INT 83
19739: PPUSH
19740: LD_VAR 0 1
19744: PPUSH
19745: CALL_OW 321
19749: PUSH
19750: LD_INT 2
19752: EQUAL
19753: ST_TO_ADDR
19754: GO 19856
19756: LD_INT 17
19758: DOUBLE
19759: EQUAL
19760: IFTRUE 19764
19762: GO 19789
19764: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
19765: LD_ADDR_VAR 0 3
19769: PUSH
19770: LD_INT 39
19772: PPUSH
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 321
19782: PUSH
19783: LD_INT 2
19785: EQUAL
19786: ST_TO_ADDR
19787: GO 19856
19789: LD_INT 18
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19822
19797: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_INT 40
19805: PPUSH
19806: LD_VAR 0 1
19810: PPUSH
19811: CALL_OW 321
19815: PUSH
19816: LD_INT 2
19818: EQUAL
19819: ST_TO_ADDR
19820: GO 19856
19822: LD_INT 27
19824: DOUBLE
19825: EQUAL
19826: IFTRUE 19830
19828: GO 19855
19830: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
19831: LD_ADDR_VAR 0 3
19835: PUSH
19836: LD_INT 35
19838: PPUSH
19839: LD_VAR 0 1
19843: PPUSH
19844: CALL_OW 321
19848: PUSH
19849: LD_INT 2
19851: EQUAL
19852: ST_TO_ADDR
19853: GO 19856
19855: POP
// end ;
19856: LD_VAR 0 3
19860: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
19861: LD_INT 0
19863: PPUSH
19864: PPUSH
19865: PPUSH
19866: PPUSH
19867: PPUSH
19868: PPUSH
19869: PPUSH
19870: PPUSH
19871: PPUSH
19872: PPUSH
19873: PPUSH
// result := false ;
19874: LD_ADDR_VAR 0 6
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
// if btype = b_depot then
19882: LD_VAR 0 2
19886: PUSH
19887: LD_INT 0
19889: EQUAL
19890: IFFALSE 19902
// begin result := true ;
19892: LD_ADDR_VAR 0 6
19896: PUSH
19897: LD_INT 1
19899: ST_TO_ADDR
// exit ;
19900: GO 20728
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
19902: LD_VAR 0 1
19906: NOT
19907: PUSH
19908: LD_VAR 0 1
19912: PPUSH
19913: CALL_OW 266
19917: PUSH
19918: LD_INT 0
19920: PUSH
19921: LD_INT 1
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: IN
19928: NOT
19929: OR
19930: PUSH
19931: LD_VAR 0 2
19935: NOT
19936: OR
19937: PUSH
19938: LD_VAR 0 5
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: LD_INT 2
19951: PUSH
19952: LD_INT 3
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: IN
19969: NOT
19970: OR
19971: PUSH
19972: LD_VAR 0 3
19976: PPUSH
19977: LD_VAR 0 4
19981: PPUSH
19982: CALL_OW 488
19986: NOT
19987: OR
19988: IFFALSE 19992
// exit ;
19990: GO 20728
// side := GetSide ( depot ) ;
19992: LD_ADDR_VAR 0 9
19996: PUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 255
20006: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
20007: LD_VAR 0 9
20011: PPUSH
20012: LD_VAR 0 2
20016: PPUSH
20017: CALL 19485 0 2
20021: NOT
20022: IFFALSE 20026
// exit ;
20024: GO 20728
// pom := GetBase ( depot ) ;
20026: LD_ADDR_VAR 0 10
20030: PUSH
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 274
20040: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
20041: LD_ADDR_VAR 0 11
20045: PUSH
20046: LD_VAR 0 2
20050: PPUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: CALL_OW 248
20060: PPUSH
20061: CALL_OW 450
20065: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
20066: LD_VAR 0 10
20070: PPUSH
20071: LD_INT 1
20073: PPUSH
20074: CALL_OW 275
20078: PUSH
20079: LD_VAR 0 11
20083: PUSH
20084: LD_INT 1
20086: ARRAY
20087: GREATEREQUAL
20088: PUSH
20089: LD_VAR 0 10
20093: PPUSH
20094: LD_INT 2
20096: PPUSH
20097: CALL_OW 275
20101: PUSH
20102: LD_VAR 0 11
20106: PUSH
20107: LD_INT 2
20109: ARRAY
20110: GREATEREQUAL
20111: AND
20112: PUSH
20113: LD_VAR 0 10
20117: PPUSH
20118: LD_INT 3
20120: PPUSH
20121: CALL_OW 275
20125: PUSH
20126: LD_VAR 0 11
20130: PUSH
20131: LD_INT 3
20133: ARRAY
20134: GREATEREQUAL
20135: AND
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20728
// if GetBType ( depot ) = b_depot then
20141: LD_VAR 0 1
20145: PPUSH
20146: CALL_OW 266
20150: PUSH
20151: LD_INT 0
20153: EQUAL
20154: IFFALSE 20166
// dist := 28 else
20156: LD_ADDR_VAR 0 14
20160: PUSH
20161: LD_INT 28
20163: ST_TO_ADDR
20164: GO 20174
// dist := 36 ;
20166: LD_ADDR_VAR 0 14
20170: PUSH
20171: LD_INT 36
20173: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
20174: LD_VAR 0 1
20178: PPUSH
20179: LD_VAR 0 3
20183: PPUSH
20184: LD_VAR 0 4
20188: PPUSH
20189: CALL_OW 297
20193: PUSH
20194: LD_VAR 0 14
20198: GREATER
20199: IFFALSE 20203
// exit ;
20201: GO 20728
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
20203: LD_ADDR_VAR 0 12
20207: PUSH
20208: LD_VAR 0 2
20212: PPUSH
20213: LD_VAR 0 3
20217: PPUSH
20218: LD_VAR 0 4
20222: PPUSH
20223: LD_VAR 0 5
20227: PPUSH
20228: LD_VAR 0 1
20232: PPUSH
20233: CALL_OW 248
20237: PPUSH
20238: LD_INT 0
20240: PPUSH
20241: CALL 20733 0 6
20245: ST_TO_ADDR
// if not hexes then
20246: LD_VAR 0 12
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20728
// hex := GetHexInfo ( x , y ) ;
20255: LD_ADDR_VAR 0 15
20259: PUSH
20260: LD_VAR 0 3
20264: PPUSH
20265: LD_VAR 0 4
20269: PPUSH
20270: CALL_OW 546
20274: ST_TO_ADDR
// if hex [ 1 ] then
20275: LD_VAR 0 15
20279: PUSH
20280: LD_INT 1
20282: ARRAY
20283: IFFALSE 20287
// exit ;
20285: GO 20728
// height := hex [ 2 ] ;
20287: LD_ADDR_VAR 0 13
20291: PUSH
20292: LD_VAR 0 15
20296: PUSH
20297: LD_INT 2
20299: ARRAY
20300: ST_TO_ADDR
// for i = 1 to hexes do
20301: LD_ADDR_VAR 0 7
20305: PUSH
20306: DOUBLE
20307: LD_INT 1
20309: DEC
20310: ST_TO_ADDR
20311: LD_VAR 0 12
20315: PUSH
20316: FOR_TO
20317: IFFALSE 20647
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
20319: LD_VAR 0 12
20323: PUSH
20324: LD_VAR 0 7
20328: ARRAY
20329: PUSH
20330: LD_INT 1
20332: ARRAY
20333: PPUSH
20334: LD_VAR 0 12
20338: PUSH
20339: LD_VAR 0 7
20343: ARRAY
20344: PUSH
20345: LD_INT 2
20347: ARRAY
20348: PPUSH
20349: CALL_OW 488
20353: NOT
20354: PUSH
20355: LD_VAR 0 12
20359: PUSH
20360: LD_VAR 0 7
20364: ARRAY
20365: PUSH
20366: LD_INT 1
20368: ARRAY
20369: PPUSH
20370: LD_VAR 0 12
20374: PUSH
20375: LD_VAR 0 7
20379: ARRAY
20380: PUSH
20381: LD_INT 2
20383: ARRAY
20384: PPUSH
20385: CALL_OW 428
20389: PUSH
20390: LD_INT 0
20392: GREATER
20393: OR
20394: PUSH
20395: LD_VAR 0 12
20399: PUSH
20400: LD_VAR 0 7
20404: ARRAY
20405: PUSH
20406: LD_INT 1
20408: ARRAY
20409: PPUSH
20410: LD_VAR 0 12
20414: PUSH
20415: LD_VAR 0 7
20419: ARRAY
20420: PUSH
20421: LD_INT 2
20423: ARRAY
20424: PPUSH
20425: CALL_OW 351
20429: OR
20430: IFFALSE 20436
// exit ;
20432: POP
20433: POP
20434: GO 20728
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
20436: LD_ADDR_VAR 0 8
20440: PUSH
20441: LD_VAR 0 12
20445: PUSH
20446: LD_VAR 0 7
20450: ARRAY
20451: PUSH
20452: LD_INT 1
20454: ARRAY
20455: PPUSH
20456: LD_VAR 0 12
20460: PUSH
20461: LD_VAR 0 7
20465: ARRAY
20466: PUSH
20467: LD_INT 2
20469: ARRAY
20470: PPUSH
20471: CALL_OW 546
20475: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
20476: LD_VAR 0 8
20480: PUSH
20481: LD_INT 1
20483: ARRAY
20484: PUSH
20485: LD_VAR 0 8
20489: PUSH
20490: LD_INT 2
20492: ARRAY
20493: PUSH
20494: LD_VAR 0 13
20498: PUSH
20499: LD_INT 2
20501: PLUS
20502: GREATER
20503: OR
20504: PUSH
20505: LD_VAR 0 8
20509: PUSH
20510: LD_INT 2
20512: ARRAY
20513: PUSH
20514: LD_VAR 0 13
20518: PUSH
20519: LD_INT 2
20521: MINUS
20522: LESS
20523: OR
20524: PUSH
20525: LD_VAR 0 8
20529: PUSH
20530: LD_INT 3
20532: ARRAY
20533: PUSH
20534: LD_INT 0
20536: PUSH
20537: LD_INT 8
20539: PUSH
20540: LD_INT 9
20542: PUSH
20543: LD_INT 10
20545: PUSH
20546: LD_INT 11
20548: PUSH
20549: LD_INT 12
20551: PUSH
20552: LD_INT 13
20554: PUSH
20555: LD_INT 16
20557: PUSH
20558: LD_INT 17
20560: PUSH
20561: LD_INT 18
20563: PUSH
20564: LD_INT 19
20566: PUSH
20567: LD_INT 20
20569: PUSH
20570: LD_INT 21
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: LIST
20577: LIST
20578: LIST
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: IN
20588: NOT
20589: OR
20590: PUSH
20591: LD_VAR 0 8
20595: PUSH
20596: LD_INT 5
20598: ARRAY
20599: NOT
20600: OR
20601: PUSH
20602: LD_VAR 0 8
20606: PUSH
20607: LD_INT 6
20609: ARRAY
20610: PUSH
20611: LD_INT 1
20613: PUSH
20614: LD_INT 2
20616: PUSH
20617: LD_INT 7
20619: PUSH
20620: LD_INT 9
20622: PUSH
20623: LD_INT 10
20625: PUSH
20626: LD_INT 11
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: IN
20637: NOT
20638: OR
20639: IFFALSE 20645
// exit ;
20641: POP
20642: POP
20643: GO 20728
// end ;
20645: GO 20316
20647: POP
20648: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
20649: LD_VAR 0 9
20653: PPUSH
20654: LD_VAR 0 3
20658: PPUSH
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_INT 20
20666: PPUSH
20667: CALL 12651 0 4
20671: PUSH
20672: LD_INT 4
20674: ARRAY
20675: IFFALSE 20679
// exit ;
20677: GO 20728
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
20679: LD_VAR 0 2
20683: PUSH
20684: LD_INT 29
20686: PUSH
20687: LD_INT 30
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: IN
20694: PUSH
20695: LD_VAR 0 3
20699: PPUSH
20700: LD_VAR 0 4
20704: PPUSH
20705: LD_VAR 0 9
20709: PPUSH
20710: CALL_OW 440
20714: NOT
20715: AND
20716: IFFALSE 20720
// exit ;
20718: GO 20728
// result := true ;
20720: LD_ADDR_VAR 0 6
20724: PUSH
20725: LD_INT 1
20727: ST_TO_ADDR
// end ;
20728: LD_VAR 0 6
20732: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
20733: LD_INT 0
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
20739: PPUSH
20740: PPUSH
20741: PPUSH
20742: PPUSH
20743: PPUSH
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
20748: PPUSH
20749: PPUSH
20750: PPUSH
20751: PPUSH
20752: PPUSH
20753: PPUSH
20754: PPUSH
20755: PPUSH
20756: PPUSH
20757: PPUSH
20758: PPUSH
20759: PPUSH
20760: PPUSH
20761: PPUSH
20762: PPUSH
20763: PPUSH
20764: PPUSH
20765: PPUSH
20766: PPUSH
20767: PPUSH
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
20772: PPUSH
20773: PPUSH
20774: PPUSH
20775: PPUSH
20776: PPUSH
20777: PPUSH
20778: PPUSH
20779: PPUSH
20780: PPUSH
20781: PPUSH
20782: PPUSH
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
20792: PPUSH
// result = [ ] ;
20793: LD_ADDR_VAR 0 7
20797: PUSH
20798: EMPTY
20799: ST_TO_ADDR
// temp_list = [ ] ;
20800: LD_ADDR_VAR 0 9
20804: PUSH
20805: EMPTY
20806: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
20807: LD_VAR 0 4
20811: PUSH
20812: LD_INT 0
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 2
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 4
20826: PUSH
20827: LD_INT 5
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: LIST
20834: LIST
20835: LIST
20836: LIST
20837: IN
20838: NOT
20839: PUSH
20840: LD_VAR 0 1
20844: PUSH
20845: LD_INT 0
20847: PUSH
20848: LD_INT 1
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: IN
20855: PUSH
20856: LD_VAR 0 5
20860: PUSH
20861: LD_INT 1
20863: PUSH
20864: LD_INT 2
20866: PUSH
20867: LD_INT 3
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: LIST
20874: IN
20875: NOT
20876: AND
20877: OR
20878: IFFALSE 20882
// exit ;
20880: GO 39273
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
20882: LD_VAR 0 1
20886: PUSH
20887: LD_INT 6
20889: PUSH
20890: LD_INT 7
20892: PUSH
20893: LD_INT 8
20895: PUSH
20896: LD_INT 13
20898: PUSH
20899: LD_INT 12
20901: PUSH
20902: LD_INT 15
20904: PUSH
20905: LD_INT 11
20907: PUSH
20908: LD_INT 14
20910: PUSH
20911: LD_INT 10
20913: PUSH
20914: EMPTY
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: LIST
20924: IN
20925: IFFALSE 20935
// btype = b_lab ;
20927: LD_ADDR_VAR 0 1
20931: PUSH
20932: LD_INT 6
20934: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
20935: LD_VAR 0 6
20939: PUSH
20940: LD_INT 0
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: LIST
20953: IN
20954: NOT
20955: PUSH
20956: LD_VAR 0 1
20960: PUSH
20961: LD_INT 0
20963: PUSH
20964: LD_INT 1
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: LD_INT 3
20972: PUSH
20973: LD_INT 6
20975: PUSH
20976: LD_INT 36
20978: PUSH
20979: LD_INT 4
20981: PUSH
20982: LD_INT 5
20984: PUSH
20985: LD_INT 31
20987: PUSH
20988: LD_INT 32
20990: PUSH
20991: LD_INT 33
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: IN
21007: NOT
21008: PUSH
21009: LD_VAR 0 6
21013: PUSH
21014: LD_INT 1
21016: EQUAL
21017: AND
21018: OR
21019: PUSH
21020: LD_VAR 0 1
21024: PUSH
21025: LD_INT 2
21027: PUSH
21028: LD_INT 3
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: IN
21035: NOT
21036: PUSH
21037: LD_VAR 0 6
21041: PUSH
21042: LD_INT 2
21044: EQUAL
21045: AND
21046: OR
21047: IFFALSE 21057
// mode = 0 ;
21049: LD_ADDR_VAR 0 6
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// case mode of 0 :
21057: LD_VAR 0 6
21061: PUSH
21062: LD_INT 0
21064: DOUBLE
21065: EQUAL
21066: IFTRUE 21070
21068: GO 32523
21070: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21071: LD_ADDR_VAR 0 11
21075: PUSH
21076: LD_INT 0
21078: PUSH
21079: LD_INT 0
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: PUSH
21086: LD_INT 0
21088: PUSH
21089: LD_INT 1
21091: NEG
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: LD_INT 0
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: LD_INT 1
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PUSH
21117: LD_INT 0
21119: PUSH
21120: LD_INT 1
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PUSH
21131: LD_INT 0
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 1
21140: NEG
21141: PUSH
21142: LD_INT 1
21144: NEG
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PUSH
21154: LD_INT 2
21156: NEG
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 0
21164: PUSH
21165: LD_INT 2
21167: NEG
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: LD_INT 1
21175: PUSH
21176: LD_INT 1
21178: NEG
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: EMPTY
21191: LIST
21192: LIST
21193: PUSH
21194: LD_INT 0
21196: PUSH
21197: LD_INT 2
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: LD_INT 1
21206: NEG
21207: PUSH
21208: LD_INT 1
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 1
21217: PUSH
21218: LD_INT 3
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: LD_INT 0
21227: PUSH
21228: LD_INT 3
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 1
21237: NEG
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: EMPTY
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21264: LD_ADDR_VAR 0 12
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: LD_INT 0
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: LD_INT 1
21284: NEG
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 1
21292: PUSH
21293: LD_INT 0
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 1
21302: PUSH
21303: LD_INT 1
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: LD_INT 0
21312: PUSH
21313: LD_INT 1
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 1
21322: NEG
21323: PUSH
21324: LD_INT 0
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 1
21333: NEG
21334: PUSH
21335: LD_INT 1
21337: NEG
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: LD_INT 1
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 2
21356: PUSH
21357: LD_INT 0
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 1
21376: NEG
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: LD_INT 2
21387: NEG
21388: PUSH
21389: LD_INT 0
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: PUSH
21396: LD_INT 2
21398: NEG
21399: PUSH
21400: LD_INT 1
21402: NEG
21403: PUSH
21404: EMPTY
21405: LIST
21406: LIST
21407: PUSH
21408: LD_INT 2
21410: NEG
21411: PUSH
21412: LD_INT 1
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PUSH
21419: LD_INT 3
21421: NEG
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PUSH
21430: LD_INT 3
21432: NEG
21433: PUSH
21434: LD_INT 1
21436: NEG
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21460: LD_ADDR_VAR 0 13
21464: PUSH
21465: LD_INT 0
21467: PUSH
21468: LD_INT 0
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 0
21477: PUSH
21478: LD_INT 1
21480: NEG
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: LD_INT 0
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: PUSH
21496: LD_INT 1
21498: PUSH
21499: LD_INT 1
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 0
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: LD_INT 1
21518: NEG
21519: PUSH
21520: LD_INT 0
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: PUSH
21527: LD_INT 1
21529: NEG
21530: PUSH
21531: LD_INT 1
21533: NEG
21534: PUSH
21535: EMPTY
21536: LIST
21537: LIST
21538: PUSH
21539: LD_INT 1
21541: NEG
21542: PUSH
21543: LD_INT 2
21545: NEG
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: LD_INT 2
21553: PUSH
21554: LD_INT 1
21556: PUSH
21557: EMPTY
21558: LIST
21559: LIST
21560: PUSH
21561: LD_INT 2
21563: PUSH
21564: LD_INT 2
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 1
21573: PUSH
21574: LD_INT 2
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 2
21583: NEG
21584: PUSH
21585: LD_INT 1
21587: NEG
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 2
21595: NEG
21596: PUSH
21597: LD_INT 2
21599: NEG
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: LD_INT 3
21611: NEG
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PUSH
21617: LD_INT 3
21619: NEG
21620: PUSH
21621: LD_INT 2
21623: NEG
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 3
21631: NEG
21632: PUSH
21633: LD_INT 3
21635: NEG
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21659: LD_ADDR_VAR 0 14
21663: PUSH
21664: LD_INT 0
21666: PUSH
21667: LD_INT 0
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 0
21676: PUSH
21677: LD_INT 1
21679: NEG
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: LD_INT 1
21687: PUSH
21688: LD_INT 0
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: LD_INT 1
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PUSH
21705: LD_INT 0
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: PUSH
21715: LD_INT 1
21717: NEG
21718: PUSH
21719: LD_INT 0
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PUSH
21726: LD_INT 1
21728: NEG
21729: PUSH
21730: LD_INT 1
21732: NEG
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: PUSH
21738: LD_INT 1
21740: NEG
21741: PUSH
21742: LD_INT 2
21744: NEG
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 0
21752: PUSH
21753: LD_INT 2
21755: NEG
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 1
21763: PUSH
21764: LD_INT 1
21766: NEG
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 1
21774: PUSH
21775: LD_INT 2
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: LD_INT 0
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: EMPTY
21789: LIST
21790: LIST
21791: PUSH
21792: LD_INT 1
21794: NEG
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 1
21805: NEG
21806: PUSH
21807: LD_INT 3
21809: NEG
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 0
21817: PUSH
21818: LD_INT 3
21820: NEG
21821: PUSH
21822: EMPTY
21823: LIST
21824: LIST
21825: PUSH
21826: LD_INT 1
21828: PUSH
21829: LD_INT 2
21831: NEG
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21855: LD_ADDR_VAR 0 15
21859: PUSH
21860: LD_INT 0
21862: PUSH
21863: LD_INT 0
21865: PUSH
21866: EMPTY
21867: LIST
21868: LIST
21869: PUSH
21870: LD_INT 0
21872: PUSH
21873: LD_INT 1
21875: NEG
21876: PUSH
21877: EMPTY
21878: LIST
21879: LIST
21880: PUSH
21881: LD_INT 1
21883: PUSH
21884: LD_INT 0
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: PUSH
21891: LD_INT 1
21893: PUSH
21894: LD_INT 1
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: LD_INT 0
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 1
21924: NEG
21925: PUSH
21926: LD_INT 1
21928: NEG
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 1
21936: PUSH
21937: LD_INT 1
21939: NEG
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 2
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: PUSH
21955: LD_INT 2
21957: PUSH
21958: LD_INT 1
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 1
21967: NEG
21968: PUSH
21969: LD_INT 1
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: LD_INT 2
21978: NEG
21979: PUSH
21980: LD_INT 0
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PUSH
21987: LD_INT 2
21989: NEG
21990: PUSH
21991: LD_INT 1
21993: NEG
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 2
22001: PUSH
22002: LD_INT 1
22004: NEG
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 3
22012: PUSH
22013: LD_INT 0
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: LD_INT 3
22022: PUSH
22023: LD_INT 1
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: EMPTY
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
22048: LD_ADDR_VAR 0 16
22052: PUSH
22053: LD_INT 0
22055: PUSH
22056: LD_INT 0
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 0
22065: PUSH
22066: LD_INT 1
22068: NEG
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 1
22076: PUSH
22077: LD_INT 0
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 1
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 1
22106: NEG
22107: PUSH
22108: LD_INT 0
22110: PUSH
22111: EMPTY
22112: LIST
22113: LIST
22114: PUSH
22115: LD_INT 1
22117: NEG
22118: PUSH
22119: LD_INT 1
22121: NEG
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: PUSH
22127: LD_INT 1
22129: NEG
22130: PUSH
22131: LD_INT 2
22133: NEG
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: LD_INT 2
22141: PUSH
22142: LD_INT 1
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: PUSH
22162: LD_INT 2
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 2
22171: NEG
22172: PUSH
22173: LD_INT 1
22175: NEG
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: LD_INT 2
22183: NEG
22184: PUSH
22185: LD_INT 2
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 3
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 3
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 2
22215: PUSH
22216: LD_INT 3
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22241: LD_ADDR_VAR 0 17
22245: PUSH
22246: LD_INT 0
22248: PUSH
22249: LD_INT 0
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 0
22258: PUSH
22259: LD_INT 1
22261: NEG
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 1
22269: PUSH
22270: LD_INT 0
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 0
22289: PUSH
22290: LD_INT 1
22292: PUSH
22293: EMPTY
22294: LIST
22295: LIST
22296: PUSH
22297: LD_INT 1
22299: NEG
22300: PUSH
22301: LD_INT 0
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 1
22310: NEG
22311: PUSH
22312: LD_INT 1
22314: NEG
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 1
22322: NEG
22323: PUSH
22324: LD_INT 2
22326: NEG
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: PUSH
22332: LD_INT 0
22334: PUSH
22335: LD_INT 2
22337: NEG
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: PUSH
22343: LD_INT 1
22345: PUSH
22346: LD_INT 1
22348: NEG
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: LD_INT 0
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: LD_INT 1
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 2
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 1
22386: PUSH
22387: LD_INT 2
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 0
22396: PUSH
22397: LD_INT 2
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 1
22406: NEG
22407: PUSH
22408: LD_INT 1
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: LD_INT 2
22417: NEG
22418: PUSH
22419: LD_INT 0
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PUSH
22426: LD_INT 2
22428: NEG
22429: PUSH
22430: LD_INT 1
22432: NEG
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 2
22440: NEG
22441: PUSH
22442: LD_INT 2
22444: NEG
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22471: LD_ADDR_VAR 0 18
22475: PUSH
22476: LD_INT 0
22478: PUSH
22479: LD_INT 0
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 0
22488: PUSH
22489: LD_INT 1
22491: NEG
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: LD_INT 0
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: LD_INT 1
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 0
22519: PUSH
22520: LD_INT 1
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 1
22529: NEG
22530: PUSH
22531: LD_INT 0
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 1
22540: NEG
22541: PUSH
22542: LD_INT 1
22544: NEG
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 1
22552: NEG
22553: PUSH
22554: LD_INT 2
22556: NEG
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: PUSH
22562: LD_INT 0
22564: PUSH
22565: LD_INT 2
22567: NEG
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 1
22575: PUSH
22576: LD_INT 1
22578: NEG
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 2
22586: PUSH
22587: LD_INT 0
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 2
22596: PUSH
22597: LD_INT 1
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 2
22606: PUSH
22607: LD_INT 2
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 1
22616: PUSH
22617: LD_INT 2
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 0
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: LD_INT 1
22636: NEG
22637: PUSH
22638: LD_INT 1
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: PUSH
22645: LD_INT 2
22647: NEG
22648: PUSH
22649: LD_INT 0
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: PUSH
22656: LD_INT 2
22658: NEG
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: PUSH
22668: LD_INT 2
22670: NEG
22671: PUSH
22672: LD_INT 2
22674: NEG
22675: PUSH
22676: EMPTY
22677: LIST
22678: LIST
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22701: LD_ADDR_VAR 0 19
22705: PUSH
22706: LD_INT 0
22708: PUSH
22709: LD_INT 0
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 0
22718: PUSH
22719: LD_INT 1
22721: NEG
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: LD_INT 0
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: LD_INT 1
22739: PUSH
22740: LD_INT 1
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 0
22749: PUSH
22750: LD_INT 1
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: LD_INT 1
22759: NEG
22760: PUSH
22761: LD_INT 0
22763: PUSH
22764: EMPTY
22765: LIST
22766: LIST
22767: PUSH
22768: LD_INT 1
22770: NEG
22771: PUSH
22772: LD_INT 1
22774: NEG
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 1
22782: NEG
22783: PUSH
22784: LD_INT 2
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 0
22794: PUSH
22795: LD_INT 2
22797: NEG
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 1
22805: PUSH
22806: LD_INT 1
22808: NEG
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 0
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 1
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 2
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 1
22846: PUSH
22847: LD_INT 2
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: LD_INT 0
22856: PUSH
22857: LD_INT 2
22859: PUSH
22860: EMPTY
22861: LIST
22862: LIST
22863: PUSH
22864: LD_INT 1
22866: NEG
22867: PUSH
22868: LD_INT 1
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 2
22877: NEG
22878: PUSH
22879: LD_INT 0
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 2
22888: NEG
22889: PUSH
22890: LD_INT 1
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 2
22900: NEG
22901: PUSH
22902: LD_INT 2
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
22931: LD_ADDR_VAR 0 20
22935: PUSH
22936: LD_INT 0
22938: PUSH
22939: LD_INT 0
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 0
22948: PUSH
22949: LD_INT 1
22951: NEG
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: LD_INT 0
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 1
22969: PUSH
22970: LD_INT 1
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: LD_INT 1
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 1
22989: NEG
22990: PUSH
22991: LD_INT 0
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 1
23000: NEG
23001: PUSH
23002: LD_INT 1
23004: NEG
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 1
23012: NEG
23013: PUSH
23014: LD_INT 2
23016: NEG
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 0
23024: PUSH
23025: LD_INT 2
23027: NEG
23028: PUSH
23029: EMPTY
23030: LIST
23031: LIST
23032: PUSH
23033: LD_INT 1
23035: PUSH
23036: LD_INT 1
23038: NEG
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 0
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: LD_INT 2
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: LD_INT 1
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 0
23086: PUSH
23087: LD_INT 2
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 1
23096: NEG
23097: PUSH
23098: LD_INT 1
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: NEG
23108: PUSH
23109: LD_INT 0
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: LD_INT 2
23118: NEG
23119: PUSH
23120: LD_INT 1
23122: NEG
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 2
23130: NEG
23131: PUSH
23132: LD_INT 2
23134: NEG
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23161: LD_ADDR_VAR 0 21
23165: PUSH
23166: LD_INT 0
23168: PUSH
23169: LD_INT 0
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 1
23181: NEG
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: LD_INT 0
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: PUSH
23197: LD_INT 1
23199: PUSH
23200: LD_INT 1
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: LD_INT 1
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PUSH
23217: LD_INT 1
23219: NEG
23220: PUSH
23221: LD_INT 0
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 1
23230: NEG
23231: PUSH
23232: LD_INT 1
23234: NEG
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 1
23242: NEG
23243: PUSH
23244: LD_INT 2
23246: NEG
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 0
23254: PUSH
23255: LD_INT 2
23257: NEG
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 1
23265: PUSH
23266: LD_INT 1
23268: NEG
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 0
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 1
23289: PUSH
23290: EMPTY
23291: LIST
23292: LIST
23293: PUSH
23294: LD_INT 2
23296: PUSH
23297: LD_INT 2
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: PUSH
23304: LD_INT 1
23306: PUSH
23307: LD_INT 2
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PUSH
23314: LD_INT 0
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 1
23326: NEG
23327: PUSH
23328: LD_INT 1
23330: PUSH
23331: EMPTY
23332: LIST
23333: LIST
23334: PUSH
23335: LD_INT 2
23337: NEG
23338: PUSH
23339: LD_INT 0
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PUSH
23346: LD_INT 2
23348: NEG
23349: PUSH
23350: LD_INT 1
23352: NEG
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: LD_INT 2
23360: NEG
23361: PUSH
23362: LD_INT 2
23364: NEG
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23391: LD_ADDR_VAR 0 22
23395: PUSH
23396: LD_INT 0
23398: PUSH
23399: LD_INT 0
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: PUSH
23406: LD_INT 0
23408: PUSH
23409: LD_INT 1
23411: NEG
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PUSH
23417: LD_INT 1
23419: PUSH
23420: LD_INT 0
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 1
23429: PUSH
23430: LD_INT 1
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: LD_INT 0
23439: PUSH
23440: LD_INT 1
23442: PUSH
23443: EMPTY
23444: LIST
23445: LIST
23446: PUSH
23447: LD_INT 1
23449: NEG
23450: PUSH
23451: LD_INT 0
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: PUSH
23458: LD_INT 1
23460: NEG
23461: PUSH
23462: LD_INT 1
23464: NEG
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: PUSH
23470: LD_INT 1
23472: NEG
23473: PUSH
23474: LD_INT 2
23476: NEG
23477: PUSH
23478: EMPTY
23479: LIST
23480: LIST
23481: PUSH
23482: LD_INT 0
23484: PUSH
23485: LD_INT 2
23487: NEG
23488: PUSH
23489: EMPTY
23490: LIST
23491: LIST
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: LD_INT 1
23498: NEG
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 2
23506: PUSH
23507: LD_INT 0
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 1
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 1
23536: PUSH
23537: LD_INT 2
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: LD_INT 0
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PUSH
23554: LD_INT 1
23556: NEG
23557: PUSH
23558: LD_INT 1
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 2
23567: NEG
23568: PUSH
23569: LD_INT 0
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 2
23578: NEG
23579: PUSH
23580: LD_INT 1
23582: NEG
23583: PUSH
23584: EMPTY
23585: LIST
23586: LIST
23587: PUSH
23588: LD_INT 2
23590: NEG
23591: PUSH
23592: LD_INT 2
23594: NEG
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23621: LD_ADDR_VAR 0 23
23625: PUSH
23626: LD_INT 0
23628: PUSH
23629: LD_INT 0
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: LD_INT 1
23641: NEG
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 1
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 1
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 1
23679: NEG
23680: PUSH
23681: LD_INT 0
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 1
23690: NEG
23691: PUSH
23692: LD_INT 1
23694: NEG
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: LD_INT 1
23702: NEG
23703: PUSH
23704: LD_INT 2
23706: NEG
23707: PUSH
23708: EMPTY
23709: LIST
23710: LIST
23711: PUSH
23712: LD_INT 0
23714: PUSH
23715: LD_INT 2
23717: NEG
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 1
23725: PUSH
23726: LD_INT 1
23728: NEG
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: LD_INT 2
23736: PUSH
23737: LD_INT 0
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 2
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 1
23766: PUSH
23767: LD_INT 2
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: LD_INT 2
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 1
23786: NEG
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 2
23797: NEG
23798: PUSH
23799: LD_INT 0
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: PUSH
23806: LD_INT 2
23808: NEG
23809: PUSH
23810: LD_INT 1
23812: NEG
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: LD_INT 2
23820: NEG
23821: PUSH
23822: LD_INT 2
23824: NEG
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 2
23832: NEG
23833: PUSH
23834: LD_INT 3
23836: NEG
23837: PUSH
23838: EMPTY
23839: LIST
23840: LIST
23841: PUSH
23842: LD_INT 1
23844: NEG
23845: PUSH
23846: LD_INT 3
23848: NEG
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: PUSH
23854: LD_INT 1
23856: PUSH
23857: LD_INT 2
23859: NEG
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: LD_INT 1
23870: NEG
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
23901: LD_ADDR_VAR 0 24
23905: PUSH
23906: LD_INT 0
23908: PUSH
23909: LD_INT 0
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: PUSH
23916: LD_INT 0
23918: PUSH
23919: LD_INT 1
23921: NEG
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: PUSH
23927: LD_INT 1
23929: PUSH
23930: LD_INT 0
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 1
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 0
23949: PUSH
23950: LD_INT 1
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 1
23959: NEG
23960: PUSH
23961: LD_INT 0
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PUSH
23968: LD_INT 1
23970: NEG
23971: PUSH
23972: LD_INT 1
23974: NEG
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 1
23982: NEG
23983: PUSH
23984: LD_INT 2
23986: NEG
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 0
23994: PUSH
23995: LD_INT 2
23997: NEG
23998: PUSH
23999: EMPTY
24000: LIST
24001: LIST
24002: PUSH
24003: LD_INT 1
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 2
24016: PUSH
24017: LD_INT 0
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 1
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 2
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: PUSH
24047: LD_INT 2
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: PUSH
24054: LD_INT 0
24056: PUSH
24057: LD_INT 2
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: PUSH
24064: LD_INT 1
24066: NEG
24067: PUSH
24068: LD_INT 1
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 2
24077: NEG
24078: PUSH
24079: LD_INT 0
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: NEG
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: NEG
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 1
24126: NEG
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: PUSH
24132: LD_INT 3
24134: PUSH
24135: LD_INT 1
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 3
24144: PUSH
24145: LD_INT 2
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
24177: LD_ADDR_VAR 0 25
24181: PUSH
24182: LD_INT 0
24184: PUSH
24185: LD_INT 0
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: PUSH
24192: LD_INT 0
24194: PUSH
24195: LD_INT 1
24197: NEG
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: LD_INT 1
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 0
24225: PUSH
24226: LD_INT 1
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 1
24235: NEG
24236: PUSH
24237: LD_INT 0
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 1
24246: NEG
24247: PUSH
24248: LD_INT 1
24250: NEG
24251: PUSH
24252: EMPTY
24253: LIST
24254: LIST
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: LD_INT 2
24262: NEG
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 0
24270: PUSH
24271: LD_INT 2
24273: NEG
24274: PUSH
24275: EMPTY
24276: LIST
24277: LIST
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: LD_INT 1
24284: NEG
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: LD_INT 0
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 2
24312: PUSH
24313: LD_INT 2
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 1
24322: PUSH
24323: LD_INT 2
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 0
24332: PUSH
24333: LD_INT 2
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 1
24342: NEG
24343: PUSH
24344: LD_INT 1
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 2
24353: NEG
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: PUSH
24362: LD_INT 2
24364: NEG
24365: PUSH
24366: LD_INT 1
24368: NEG
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 2
24376: NEG
24377: PUSH
24378: LD_INT 2
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 3
24388: PUSH
24389: LD_INT 1
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 3
24398: PUSH
24399: LD_INT 2
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 2
24408: PUSH
24409: LD_INT 3
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: PUSH
24419: LD_INT 3
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
24451: LD_ADDR_VAR 0 26
24455: PUSH
24456: LD_INT 0
24458: PUSH
24459: LD_INT 0
24461: PUSH
24462: EMPTY
24463: LIST
24464: LIST
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 1
24471: NEG
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PUSH
24477: LD_INT 1
24479: PUSH
24480: LD_INT 0
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: PUSH
24487: LD_INT 1
24489: PUSH
24490: LD_INT 1
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 0
24499: PUSH
24500: LD_INT 1
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: LD_INT 0
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: PUSH
24518: LD_INT 1
24520: NEG
24521: PUSH
24522: LD_INT 1
24524: NEG
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PUSH
24530: LD_INT 1
24532: NEG
24533: PUSH
24534: LD_INT 2
24536: NEG
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 0
24544: PUSH
24545: LD_INT 2
24547: NEG
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 1
24555: PUSH
24556: LD_INT 1
24558: NEG
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: EMPTY
24571: LIST
24572: LIST
24573: PUSH
24574: LD_INT 2
24576: PUSH
24577: LD_INT 1
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 2
24586: PUSH
24587: LD_INT 2
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: LD_INT 2
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 0
24606: PUSH
24607: LD_INT 2
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 1
24616: NEG
24617: PUSH
24618: LD_INT 1
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: PUSH
24625: LD_INT 2
24627: NEG
24628: PUSH
24629: LD_INT 0
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: LD_INT 1
24642: NEG
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: PUSH
24648: LD_INT 2
24650: NEG
24651: PUSH
24652: LD_INT 2
24654: NEG
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: LD_INT 2
24662: PUSH
24663: LD_INT 3
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 1
24672: PUSH
24673: LD_INT 3
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: PUSH
24680: LD_INT 1
24682: NEG
24683: PUSH
24684: LD_INT 2
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 2
24693: NEG
24694: PUSH
24695: LD_INT 1
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
24727: LD_ADDR_VAR 0 27
24731: PUSH
24732: LD_INT 0
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: LD_INT 1
24747: NEG
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 1
24755: PUSH
24756: LD_INT 0
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: LD_INT 1
24765: PUSH
24766: LD_INT 1
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 1
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: PUSH
24783: LD_INT 1
24785: NEG
24786: PUSH
24787: LD_INT 0
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: LD_INT 1
24796: NEG
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: PUSH
24806: LD_INT 1
24808: NEG
24809: PUSH
24810: LD_INT 2
24812: NEG
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 2
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 1
24834: NEG
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: PUSH
24843: LD_INT 0
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: PUSH
24873: LD_INT 2
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 0
24882: PUSH
24883: LD_INT 2
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: LD_INT 1
24892: NEG
24893: PUSH
24894: LD_INT 1
24896: PUSH
24897: EMPTY
24898: LIST
24899: LIST
24900: PUSH
24901: LD_INT 2
24903: NEG
24904: PUSH
24905: LD_INT 0
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: PUSH
24912: LD_INT 2
24914: NEG
24915: PUSH
24916: LD_INT 1
24918: NEG
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 2
24926: NEG
24927: PUSH
24928: LD_INT 2
24930: NEG
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: LD_INT 2
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 3
24960: NEG
24961: PUSH
24962: LD_INT 1
24964: NEG
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 3
24972: NEG
24973: PUSH
24974: LD_INT 2
24976: NEG
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: PUSH
24982: EMPTY
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
25007: LD_ADDR_VAR 0 28
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: NEG
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 1
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 1
25048: PUSH
25049: EMPTY
25050: LIST
25051: LIST
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: LD_INT 1
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 1
25076: NEG
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 1
25088: NEG
25089: PUSH
25090: LD_INT 2
25092: NEG
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 2
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 1
25111: PUSH
25112: LD_INT 1
25114: NEG
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 2
25122: PUSH
25123: LD_INT 0
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 2
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 1
25152: PUSH
25153: LD_INT 2
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PUSH
25160: LD_INT 0
25162: PUSH
25163: LD_INT 2
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 1
25172: NEG
25173: PUSH
25174: LD_INT 1
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 2
25183: NEG
25184: PUSH
25185: LD_INT 0
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 2
25194: NEG
25195: PUSH
25196: LD_INT 1
25198: NEG
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: NEG
25207: PUSH
25208: LD_INT 2
25210: NEG
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 2
25218: NEG
25219: PUSH
25220: LD_INT 3
25222: NEG
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: NEG
25231: PUSH
25232: LD_INT 3
25234: NEG
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 3
25242: NEG
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 3
25254: NEG
25255: PUSH
25256: LD_INT 2
25258: NEG
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25289: LD_ADDR_VAR 0 29
25293: PUSH
25294: LD_INT 0
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 0
25306: PUSH
25307: LD_INT 1
25309: NEG
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: PUSH
25315: LD_INT 1
25317: PUSH
25318: LD_INT 0
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 1
25327: PUSH
25328: LD_INT 1
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 0
25337: PUSH
25338: LD_INT 1
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 1
25347: NEG
25348: PUSH
25349: LD_INT 0
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: PUSH
25356: LD_INT 1
25358: NEG
25359: PUSH
25360: LD_INT 1
25362: NEG
25363: PUSH
25364: EMPTY
25365: LIST
25366: LIST
25367: PUSH
25368: LD_INT 1
25370: NEG
25371: PUSH
25372: LD_INT 2
25374: NEG
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: LD_INT 2
25385: NEG
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 1
25393: PUSH
25394: LD_INT 1
25396: NEG
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 2
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 2
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 1
25424: PUSH
25425: LD_INT 2
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: LD_INT 2
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 1
25444: NEG
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: LD_INT 2
25455: NEG
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 2
25467: NEG
25468: PUSH
25469: LD_INT 2
25471: NEG
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 2
25479: NEG
25480: PUSH
25481: LD_INT 3
25483: NEG
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 2
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 3
25502: PUSH
25503: LD_INT 1
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: LD_INT 1
25512: PUSH
25513: LD_INT 3
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: LD_INT 1
25522: NEG
25523: PUSH
25524: LD_INT 2
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: LD_INT 3
25533: NEG
25534: PUSH
25535: LD_INT 2
25537: NEG
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
25568: LD_ADDR_VAR 0 30
25572: PUSH
25573: LD_INT 0
25575: PUSH
25576: LD_INT 0
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 0
25585: PUSH
25586: LD_INT 1
25588: NEG
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: PUSH
25597: LD_INT 0
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: PUSH
25604: LD_INT 1
25606: PUSH
25607: LD_INT 1
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: LD_INT 1
25626: NEG
25627: PUSH
25628: LD_INT 0
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PUSH
25635: LD_INT 1
25637: NEG
25638: PUSH
25639: LD_INT 1
25641: NEG
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 1
25649: NEG
25650: PUSH
25651: LD_INT 2
25653: NEG
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 0
25661: PUSH
25662: LD_INT 2
25664: NEG
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 1
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 2
25683: PUSH
25684: LD_INT 0
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 2
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: LD_INT 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 1
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 1
25723: NEG
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: NEG
25735: PUSH
25736: LD_INT 0
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: LD_INT 1
25749: NEG
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 1
25757: NEG
25758: PUSH
25759: LD_INT 3
25761: NEG
25762: PUSH
25763: EMPTY
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 1
25769: PUSH
25770: LD_INT 2
25772: NEG
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 3
25780: PUSH
25781: LD_INT 2
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PUSH
25788: LD_INT 2
25790: PUSH
25791: LD_INT 3
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: NEG
25801: PUSH
25802: LD_INT 1
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 3
25811: NEG
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
25846: LD_ADDR_VAR 0 31
25850: PUSH
25851: LD_INT 0
25853: PUSH
25854: LD_INT 0
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: PUSH
25872: LD_INT 1
25874: PUSH
25875: LD_INT 0
25877: PUSH
25878: EMPTY
25879: LIST
25880: LIST
25881: PUSH
25882: LD_INT 1
25884: PUSH
25885: LD_INT 1
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 1
25904: NEG
25905: PUSH
25906: LD_INT 0
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 1
25915: NEG
25916: PUSH
25917: LD_INT 1
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 1
25927: NEG
25928: PUSH
25929: LD_INT 2
25931: NEG
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PUSH
25937: LD_INT 1
25939: PUSH
25940: LD_INT 1
25942: NEG
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 2
25950: PUSH
25951: LD_INT 0
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: LD_INT 2
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: LD_INT 1
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 2
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: NEG
26001: PUSH
26002: LD_INT 1
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: NEG
26012: PUSH
26013: LD_INT 1
26015: NEG
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: PUSH
26021: LD_INT 2
26023: NEG
26024: PUSH
26025: LD_INT 2
26027: NEG
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 2
26035: NEG
26036: PUSH
26037: LD_INT 3
26039: NEG
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: LD_INT 2
26047: PUSH
26048: LD_INT 1
26050: NEG
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 3
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: PUSH
26069: LD_INT 3
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 1
26078: NEG
26079: PUSH
26080: LD_INT 2
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 3
26089: NEG
26090: PUSH
26091: LD_INT 2
26093: NEG
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26124: LD_ADDR_VAR 0 32
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: LD_INT 0
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: LD_INT 1
26144: NEG
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 1
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 0
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 1
26182: NEG
26183: PUSH
26184: LD_INT 0
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: NEG
26194: PUSH
26195: LD_INT 1
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 1
26205: NEG
26206: PUSH
26207: LD_INT 2
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 2
26220: NEG
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 1
26228: PUSH
26229: LD_INT 1
26231: NEG
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 1
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: PUSH
26250: LD_INT 2
26252: PUSH
26253: EMPTY
26254: LIST
26255: LIST
26256: PUSH
26257: LD_INT 1
26259: PUSH
26260: LD_INT 2
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 0
26269: PUSH
26270: LD_INT 2
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: NEG
26280: PUSH
26281: LD_INT 1
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 2
26290: NEG
26291: PUSH
26292: LD_INT 0
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: LD_INT 1
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: LD_INT 3
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 3
26336: PUSH
26337: LD_INT 2
26339: PUSH
26340: EMPTY
26341: LIST
26342: LIST
26343: PUSH
26344: LD_INT 2
26346: PUSH
26347: LD_INT 3
26349: PUSH
26350: EMPTY
26351: LIST
26352: LIST
26353: PUSH
26354: LD_INT 2
26356: NEG
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 3
26367: NEG
26368: PUSH
26369: LD_INT 1
26371: NEG
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
26402: LD_ADDR_VAR 0 33
26406: PUSH
26407: LD_INT 0
26409: PUSH
26410: LD_INT 0
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 0
26419: PUSH
26420: LD_INT 1
26422: NEG
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: PUSH
26428: LD_INT 1
26430: PUSH
26431: LD_INT 0
26433: PUSH
26434: EMPTY
26435: LIST
26436: LIST
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: LD_INT 1
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: NEG
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: NEG
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: EMPTY
26478: LIST
26479: LIST
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: LD_INT 2
26487: NEG
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 1
26495: PUSH
26496: LD_INT 1
26498: NEG
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PUSH
26504: LD_INT 2
26506: PUSH
26507: LD_INT 0
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 2
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 0
26536: PUSH
26537: LD_INT 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 1
26546: NEG
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: NEG
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: NEG
26569: PUSH
26570: LD_INT 1
26572: NEG
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 2
26580: NEG
26581: PUSH
26582: LD_INT 2
26584: NEG
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 2
26592: NEG
26593: PUSH
26594: LD_INT 3
26596: NEG
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 2
26604: PUSH
26605: LD_INT 1
26607: NEG
26608: PUSH
26609: EMPTY
26610: LIST
26611: LIST
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: LD_INT 1
26618: PUSH
26619: EMPTY
26620: LIST
26621: LIST
26622: PUSH
26623: LD_INT 1
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: PUSH
26633: LD_INT 1
26635: NEG
26636: PUSH
26637: LD_INT 2
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 3
26646: NEG
26647: PUSH
26648: LD_INT 2
26650: NEG
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
26681: LD_ADDR_VAR 0 34
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: LD_INT 0
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 0
26698: PUSH
26699: LD_INT 1
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 1
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 0
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 1
26739: NEG
26740: PUSH
26741: LD_INT 0
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: LD_INT 1
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 0
26774: PUSH
26775: LD_INT 2
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 1
26785: PUSH
26786: LD_INT 1
26788: NEG
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 2
26796: PUSH
26797: LD_INT 1
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: PUSH
26804: LD_INT 2
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PUSH
26817: LD_INT 2
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 1
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 2
26837: NEG
26838: PUSH
26839: LD_INT 0
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 2
26848: NEG
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: NEG
26861: PUSH
26862: LD_INT 2
26864: NEG
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PUSH
26870: LD_INT 1
26872: NEG
26873: PUSH
26874: LD_INT 3
26876: NEG
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 1
26884: PUSH
26885: LD_INT 2
26887: NEG
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 3
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: LD_INT 2
26905: PUSH
26906: LD_INT 3
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 2
26915: NEG
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 3
26926: NEG
26927: PUSH
26928: LD_INT 1
26930: NEG
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
26961: LD_ADDR_VAR 0 35
26965: PUSH
26966: LD_INT 0
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 0
26978: PUSH
26979: LD_INT 1
26981: NEG
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 1
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: LD_INT 1
26999: PUSH
27000: LD_INT 1
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: PUSH
27007: LD_INT 0
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 1
27019: NEG
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 1
27034: NEG
27035: PUSH
27036: EMPTY
27037: LIST
27038: LIST
27039: PUSH
27040: LD_INT 2
27042: PUSH
27043: LD_INT 1
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: LIST
27069: LIST
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27073: LD_ADDR_VAR 0 36
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: LD_INT 0
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 0
27090: PUSH
27091: LD_INT 1
27093: NEG
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 0
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: LD_INT 1
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PUSH
27129: LD_INT 1
27131: NEG
27132: PUSH
27133: LD_INT 0
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: LD_INT 1
27146: NEG
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: PUSH
27152: LD_INT 1
27154: NEG
27155: PUSH
27156: LD_INT 2
27158: NEG
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PUSH
27164: LD_INT 1
27166: PUSH
27167: LD_INT 2
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27185: LD_ADDR_VAR 0 37
27189: PUSH
27190: LD_INT 0
27192: PUSH
27193: LD_INT 0
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: PUSH
27200: LD_INT 0
27202: PUSH
27203: LD_INT 1
27205: NEG
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 1
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: LD_INT 1
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 0
27233: PUSH
27234: LD_INT 1
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: NEG
27244: PUSH
27245: LD_INT 0
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 1
27254: NEG
27255: PUSH
27256: LD_INT 1
27258: NEG
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 1
27266: PUSH
27267: LD_INT 1
27269: NEG
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: EMPTY
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
27297: LD_ADDR_VAR 0 38
27301: PUSH
27302: LD_INT 0
27304: PUSH
27305: LD_INT 0
27307: PUSH
27308: EMPTY
27309: LIST
27310: LIST
27311: PUSH
27312: LD_INT 0
27314: PUSH
27315: LD_INT 1
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 1
27325: PUSH
27326: LD_INT 0
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: LD_INT 1
27338: PUSH
27339: EMPTY
27340: LIST
27341: LIST
27342: PUSH
27343: LD_INT 0
27345: PUSH
27346: LD_INT 1
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 1
27355: NEG
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: EMPTY
27361: LIST
27362: LIST
27363: PUSH
27364: LD_INT 1
27366: NEG
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: EMPTY
27373: LIST
27374: LIST
27375: PUSH
27376: LD_INT 2
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: EMPTY
27383: LIST
27384: LIST
27385: PUSH
27386: LD_INT 2
27388: NEG
27389: PUSH
27390: LD_INT 1
27392: NEG
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
27409: LD_ADDR_VAR 0 39
27413: PUSH
27414: LD_INT 0
27416: PUSH
27417: LD_INT 0
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 0
27426: PUSH
27427: LD_INT 1
27429: NEG
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: LD_INT 1
27437: PUSH
27438: LD_INT 0
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 1
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 0
27457: PUSH
27458: LD_INT 1
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 1
27478: NEG
27479: PUSH
27480: LD_INT 1
27482: NEG
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 1
27490: NEG
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 2
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
27521: LD_ADDR_VAR 0 40
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 0
27531: PUSH
27532: EMPTY
27533: LIST
27534: LIST
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 1
27541: NEG
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: LD_INT 0
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: PUSH
27557: LD_INT 1
27559: PUSH
27560: LD_INT 1
27562: PUSH
27563: EMPTY
27564: LIST
27565: LIST
27566: PUSH
27567: LD_INT 0
27569: PUSH
27570: LD_INT 1
27572: PUSH
27573: EMPTY
27574: LIST
27575: LIST
27576: PUSH
27577: LD_INT 1
27579: NEG
27580: PUSH
27581: LD_INT 0
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 1
27590: NEG
27591: PUSH
27592: LD_INT 1
27594: NEG
27595: PUSH
27596: EMPTY
27597: LIST
27598: LIST
27599: PUSH
27600: LD_INT 1
27602: PUSH
27603: LD_INT 1
27605: NEG
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 1
27613: NEG
27614: PUSH
27615: LD_INT 1
27617: PUSH
27618: EMPTY
27619: LIST
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27633: LD_ADDR_VAR 0 41
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 1
27726: PUSH
27727: LD_INT 1
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 2
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 2
27747: PUSH
27748: LD_INT 1
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: PUSH
27755: LD_INT 2
27757: PUSH
27758: LD_INT 2
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: PUSH
27775: LD_INT 1
27777: NEG
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 2
27788: NEG
27789: PUSH
27790: LD_INT 0
27792: PUSH
27793: EMPTY
27794: LIST
27795: LIST
27796: PUSH
27797: LD_INT 2
27799: NEG
27800: PUSH
27801: LD_INT 1
27803: NEG
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 2
27811: NEG
27812: PUSH
27813: LD_INT 2
27815: NEG
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 2
27823: NEG
27824: PUSH
27825: LD_INT 3
27827: NEG
27828: PUSH
27829: EMPTY
27830: LIST
27831: LIST
27832: PUSH
27833: LD_INT 2
27835: PUSH
27836: LD_INT 1
27838: NEG
27839: PUSH
27840: EMPTY
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 3
27846: PUSH
27847: LD_INT 0
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 3
27856: PUSH
27857: LD_INT 1
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: LD_INT 2
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: LD_INT 3
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 2
27886: PUSH
27887: LD_INT 3
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: LD_INT 2
27896: NEG
27897: PUSH
27898: LD_INT 1
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: PUSH
27905: LD_INT 3
27907: NEG
27908: PUSH
27909: LD_INT 0
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 3
27918: NEG
27919: PUSH
27920: LD_INT 1
27922: NEG
27923: PUSH
27924: EMPTY
27925: LIST
27926: LIST
27927: PUSH
27928: LD_INT 3
27930: NEG
27931: PUSH
27932: LD_INT 2
27934: NEG
27935: PUSH
27936: EMPTY
27937: LIST
27938: LIST
27939: PUSH
27940: LD_INT 3
27942: NEG
27943: PUSH
27944: LD_INT 3
27946: NEG
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: LIST
27962: LIST
27963: LIST
27964: LIST
27965: LIST
27966: LIST
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: LIST
27981: LIST
27982: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
27983: LD_ADDR_VAR 0 42
27987: PUSH
27988: LD_INT 0
27990: PUSH
27991: LD_INT 0
27993: PUSH
27994: EMPTY
27995: LIST
27996: LIST
27997: PUSH
27998: LD_INT 0
28000: PUSH
28001: LD_INT 1
28003: NEG
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: LD_INT 0
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 1
28021: PUSH
28022: LD_INT 1
28024: PUSH
28025: EMPTY
28026: LIST
28027: LIST
28028: PUSH
28029: LD_INT 0
28031: PUSH
28032: LD_INT 1
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: LD_INT 1
28052: NEG
28053: PUSH
28054: LD_INT 1
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: NEG
28065: PUSH
28066: LD_INT 2
28068: NEG
28069: PUSH
28070: EMPTY
28071: LIST
28072: LIST
28073: PUSH
28074: LD_INT 0
28076: PUSH
28077: LD_INT 2
28079: NEG
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: LD_INT 1
28090: NEG
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: LD_INT 2
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: PUSH
28119: LD_INT 2
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: PUSH
28126: LD_INT 0
28128: PUSH
28129: LD_INT 2
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 1
28138: NEG
28139: PUSH
28140: LD_INT 1
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: PUSH
28147: LD_INT 2
28149: NEG
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: PUSH
28159: LD_INT 2
28161: NEG
28162: PUSH
28163: LD_INT 2
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 2
28173: NEG
28174: PUSH
28175: LD_INT 3
28177: NEG
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 1
28185: NEG
28186: PUSH
28187: LD_INT 3
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 0
28197: PUSH
28198: LD_INT 3
28200: NEG
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 1
28208: PUSH
28209: LD_INT 2
28211: NEG
28212: PUSH
28213: EMPTY
28214: LIST
28215: LIST
28216: PUSH
28217: LD_INT 3
28219: PUSH
28220: LD_INT 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 3
28229: PUSH
28230: LD_INT 3
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: PUSH
28240: LD_INT 3
28242: PUSH
28243: EMPTY
28244: LIST
28245: LIST
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 3
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 0
28259: PUSH
28260: LD_INT 3
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 1
28269: NEG
28270: PUSH
28271: LD_INT 2
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PUSH
28278: LD_INT 3
28280: NEG
28281: PUSH
28282: LD_INT 2
28284: NEG
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: LD_INT 3
28292: NEG
28293: PUSH
28294: LD_INT 3
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
28333: LD_ADDR_VAR 0 43
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: LD_INT 0
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 0
28350: PUSH
28351: LD_INT 1
28353: NEG
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: PUSH
28359: LD_INT 1
28361: PUSH
28362: LD_INT 0
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 1
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: LD_INT 0
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: EMPTY
28386: LIST
28387: LIST
28388: PUSH
28389: LD_INT 1
28391: NEG
28392: PUSH
28393: LD_INT 0
28395: PUSH
28396: EMPTY
28397: LIST
28398: LIST
28399: PUSH
28400: LD_INT 1
28402: NEG
28403: PUSH
28404: LD_INT 1
28406: NEG
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: LD_INT 2
28418: NEG
28419: PUSH
28420: EMPTY
28421: LIST
28422: LIST
28423: PUSH
28424: LD_INT 0
28426: PUSH
28427: LD_INT 2
28429: NEG
28430: PUSH
28431: EMPTY
28432: LIST
28433: LIST
28434: PUSH
28435: LD_INT 1
28437: PUSH
28438: LD_INT 1
28440: NEG
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: LD_INT 2
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: EMPTY
28453: LIST
28454: LIST
28455: PUSH
28456: LD_INT 2
28458: PUSH
28459: LD_INT 1
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: LD_INT 2
28471: PUSH
28472: EMPTY
28473: LIST
28474: LIST
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: LD_INT 2
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 1
28488: NEG
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 2
28499: NEG
28500: PUSH
28501: LD_INT 0
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: LD_INT 2
28510: NEG
28511: PUSH
28512: LD_INT 1
28514: NEG
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: PUSH
28520: LD_INT 1
28522: NEG
28523: PUSH
28524: LD_INT 3
28526: NEG
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 3
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 2
28548: NEG
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 1
28559: NEG
28560: PUSH
28561: EMPTY
28562: LIST
28563: LIST
28564: PUSH
28565: LD_INT 3
28567: PUSH
28568: LD_INT 0
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 3
28577: PUSH
28578: LD_INT 1
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: LD_INT 3
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: LD_INT 0
28597: PUSH
28598: LD_INT 3
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 1
28607: NEG
28608: PUSH
28609: LD_INT 2
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: NEG
28619: PUSH
28620: LD_INT 1
28622: PUSH
28623: EMPTY
28624: LIST
28625: LIST
28626: PUSH
28627: LD_INT 3
28629: NEG
28630: PUSH
28631: LD_INT 0
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: LD_INT 3
28640: NEG
28641: PUSH
28642: LD_INT 1
28644: NEG
28645: PUSH
28646: EMPTY
28647: LIST
28648: LIST
28649: PUSH
28650: EMPTY
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: LIST
28677: LIST
28678: LIST
28679: LIST
28680: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
28681: LD_ADDR_VAR 0 44
28685: PUSH
28686: LD_INT 0
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 0
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: LD_INT 1
28709: PUSH
28710: LD_INT 0
28712: PUSH
28713: EMPTY
28714: LIST
28715: LIST
28716: PUSH
28717: LD_INT 1
28719: PUSH
28720: LD_INT 1
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 0
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: LD_INT 0
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_INT 1
28750: NEG
28751: PUSH
28752: LD_INT 1
28754: NEG
28755: PUSH
28756: EMPTY
28757: LIST
28758: LIST
28759: PUSH
28760: LD_INT 1
28762: NEG
28763: PUSH
28764: LD_INT 2
28766: NEG
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 1
28774: PUSH
28775: LD_INT 1
28777: NEG
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: PUSH
28783: LD_INT 2
28785: PUSH
28786: LD_INT 0
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: LD_INT 1
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 2
28805: PUSH
28806: LD_INT 2
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: LD_INT 1
28815: PUSH
28816: LD_INT 2
28818: PUSH
28819: EMPTY
28820: LIST
28821: LIST
28822: PUSH
28823: LD_INT 1
28825: NEG
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 2
28836: NEG
28837: PUSH
28838: LD_INT 0
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: PUSH
28845: LD_INT 2
28847: NEG
28848: PUSH
28849: LD_INT 1
28851: NEG
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 2
28859: NEG
28860: PUSH
28861: LD_INT 2
28863: NEG
28864: PUSH
28865: EMPTY
28866: LIST
28867: LIST
28868: PUSH
28869: LD_INT 2
28871: NEG
28872: PUSH
28873: LD_INT 3
28875: NEG
28876: PUSH
28877: EMPTY
28878: LIST
28879: LIST
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: LD_INT 1
28886: NEG
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 3
28894: PUSH
28895: LD_INT 0
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 3
28904: PUSH
28905: LD_INT 1
28907: PUSH
28908: EMPTY
28909: LIST
28910: LIST
28911: PUSH
28912: LD_INT 3
28914: PUSH
28915: LD_INT 2
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 3
28924: PUSH
28925: LD_INT 3
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PUSH
28932: LD_INT 2
28934: PUSH
28935: LD_INT 3
28937: PUSH
28938: EMPTY
28939: LIST
28940: LIST
28941: PUSH
28942: LD_INT 2
28944: NEG
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 3
28955: NEG
28956: PUSH
28957: LD_INT 0
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 3
28966: NEG
28967: PUSH
28968: LD_INT 1
28970: NEG
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: LD_INT 3
28978: NEG
28979: PUSH
28980: LD_INT 2
28982: NEG
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: LD_INT 3
28990: NEG
28991: PUSH
28992: LD_INT 3
28994: NEG
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
29031: LD_ADDR_VAR 0 45
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 0
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 0
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 1
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 0
29079: PUSH
29080: LD_INT 1
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: PUSH
29087: LD_INT 1
29089: NEG
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PUSH
29098: LD_INT 1
29100: NEG
29101: PUSH
29102: LD_INT 1
29104: NEG
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: LD_INT 2
29116: NEG
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PUSH
29122: LD_INT 0
29124: PUSH
29125: LD_INT 2
29127: NEG
29128: PUSH
29129: EMPTY
29130: LIST
29131: LIST
29132: PUSH
29133: LD_INT 1
29135: PUSH
29136: LD_INT 1
29138: NEG
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 2
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 0
29176: PUSH
29177: LD_INT 2
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 1
29186: NEG
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 2
29197: NEG
29198: PUSH
29199: LD_INT 1
29201: NEG
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: PUSH
29207: LD_INT 2
29209: NEG
29210: PUSH
29211: LD_INT 2
29213: NEG
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 2
29221: NEG
29222: PUSH
29223: LD_INT 3
29225: NEG
29226: PUSH
29227: EMPTY
29228: LIST
29229: LIST
29230: PUSH
29231: LD_INT 1
29233: NEG
29234: PUSH
29235: LD_INT 3
29237: NEG
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: LD_INT 0
29245: PUSH
29246: LD_INT 3
29248: NEG
29249: PUSH
29250: EMPTY
29251: LIST
29252: LIST
29253: PUSH
29254: LD_INT 1
29256: PUSH
29257: LD_INT 2
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 3
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: LD_INT 3
29277: PUSH
29278: LD_INT 3
29280: PUSH
29281: EMPTY
29282: LIST
29283: LIST
29284: PUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 3
29290: PUSH
29291: EMPTY
29292: LIST
29293: LIST
29294: PUSH
29295: LD_INT 1
29297: PUSH
29298: LD_INT 3
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 3
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 1
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 3
29328: NEG
29329: PUSH
29330: LD_INT 2
29332: NEG
29333: PUSH
29334: EMPTY
29335: LIST
29336: LIST
29337: PUSH
29338: LD_INT 3
29340: NEG
29341: PUSH
29342: LD_INT 3
29344: NEG
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: LIST
29375: LIST
29376: LIST
29377: LIST
29378: LIST
29379: LIST
29380: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29381: LD_ADDR_VAR 0 46
29385: PUSH
29386: LD_INT 0
29388: PUSH
29389: LD_INT 0
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 0
29398: PUSH
29399: LD_INT 1
29401: NEG
29402: PUSH
29403: EMPTY
29404: LIST
29405: LIST
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: LD_INT 0
29412: PUSH
29413: EMPTY
29414: LIST
29415: LIST
29416: PUSH
29417: LD_INT 1
29419: PUSH
29420: LD_INT 1
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: PUSH
29427: LD_INT 0
29429: PUSH
29430: LD_INT 1
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 1
29439: NEG
29440: PUSH
29441: LD_INT 0
29443: PUSH
29444: EMPTY
29445: LIST
29446: LIST
29447: PUSH
29448: LD_INT 1
29450: NEG
29451: PUSH
29452: LD_INT 1
29454: NEG
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: LD_INT 1
29462: NEG
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: EMPTY
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: EMPTY
29480: LIST
29481: LIST
29482: PUSH
29483: LD_INT 1
29485: PUSH
29486: LD_INT 1
29488: NEG
29489: PUSH
29490: EMPTY
29491: LIST
29492: LIST
29493: PUSH
29494: LD_INT 2
29496: PUSH
29497: LD_INT 0
29499: PUSH
29500: EMPTY
29501: LIST
29502: LIST
29503: PUSH
29504: LD_INT 2
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 1
29516: PUSH
29517: LD_INT 2
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 0
29526: PUSH
29527: LD_INT 2
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: PUSH
29534: LD_INT 1
29536: NEG
29537: PUSH
29538: LD_INT 1
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: NEG
29548: PUSH
29549: LD_INT 0
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: LD_INT 1
29562: NEG
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 1
29570: NEG
29571: PUSH
29572: LD_INT 3
29574: NEG
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: LD_INT 3
29585: NEG
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: LD_INT 2
29596: NEG
29597: PUSH
29598: EMPTY
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 2
29604: PUSH
29605: LD_INT 1
29607: NEG
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 0
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 3
29625: PUSH
29626: LD_INT 1
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 1
29635: PUSH
29636: LD_INT 3
29638: PUSH
29639: EMPTY
29640: LIST
29641: LIST
29642: PUSH
29643: LD_INT 0
29645: PUSH
29646: LD_INT 3
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: LD_INT 1
29655: NEG
29656: PUSH
29657: LD_INT 2
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: PUSH
29664: LD_INT 2
29666: NEG
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 3
29677: NEG
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 3
29688: NEG
29689: PUSH
29690: LD_INT 1
29692: NEG
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: EMPTY
29699: LIST
29700: LIST
29701: LIST
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: LIST
29713: LIST
29714: LIST
29715: LIST
29716: LIST
29717: LIST
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: LIST
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
29729: LD_ADDR_VAR 0 47
29733: PUSH
29734: LD_INT 0
29736: PUSH
29737: LD_INT 0
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: LD_INT 1
29749: NEG
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: PUSH
29755: LD_INT 1
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: PUSH
29768: LD_INT 1
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 0
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: NEG
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 1
29798: NEG
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 2
29814: NEG
29815: PUSH
29816: EMPTY
29817: LIST
29818: LIST
29819: PUSH
29820: LD_INT 0
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: PUSH
29834: LD_INT 1
29836: NEG
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 2
29844: NEG
29845: PUSH
29846: LD_INT 1
29848: NEG
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: NEG
29857: PUSH
29858: LD_INT 2
29860: NEG
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
29880: LD_ADDR_VAR 0 48
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: LD_INT 0
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: LD_INT 0
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: PUSH
29916: LD_INT 1
29918: PUSH
29919: LD_INT 1
29921: PUSH
29922: EMPTY
29923: LIST
29924: LIST
29925: PUSH
29926: LD_INT 0
29928: PUSH
29929: LD_INT 1
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 0
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 1
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 1
29961: NEG
29962: PUSH
29963: LD_INT 2
29965: NEG
29966: PUSH
29967: EMPTY
29968: LIST
29969: LIST
29970: PUSH
29971: LD_INT 0
29973: PUSH
29974: LD_INT 2
29976: NEG
29977: PUSH
29978: EMPTY
29979: LIST
29980: LIST
29981: PUSH
29982: LD_INT 1
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 0
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 1
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
30027: LD_ADDR_VAR 0 49
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 1
30111: NEG
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 2
30119: PUSH
30120: LD_INT 0
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: LD_INT 2
30129: PUSH
30130: LD_INT 1
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PUSH
30137: LD_INT 2
30139: PUSH
30140: LD_INT 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: PUSH
30150: LD_INT 2
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
30171: LD_ADDR_VAR 0 50
30175: PUSH
30176: LD_INT 0
30178: PUSH
30179: LD_INT 0
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 0
30188: PUSH
30189: LD_INT 1
30191: NEG
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: PUSH
30197: LD_INT 1
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 1
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 0
30219: PUSH
30220: LD_INT 1
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 1
30229: NEG
30230: PUSH
30231: LD_INT 0
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 1
30240: NEG
30241: PUSH
30242: LD_INT 1
30244: NEG
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 0
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 1
30292: NEG
30293: PUSH
30294: LD_INT 1
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
30315: LD_ADDR_VAR 0 51
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 0
30332: PUSH
30333: LD_INT 1
30335: NEG
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 1
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: LD_INT 1
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 0
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PUSH
30382: LD_INT 1
30384: NEG
30385: PUSH
30386: LD_INT 1
30388: NEG
30389: PUSH
30390: EMPTY
30391: LIST
30392: LIST
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: EMPTY
30401: LIST
30402: LIST
30403: PUSH
30404: LD_INT 0
30406: PUSH
30407: LD_INT 2
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 1
30416: NEG
30417: PUSH
30418: LD_INT 1
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: LD_INT 2
30427: NEG
30428: PUSH
30429: LD_INT 0
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 2
30438: NEG
30439: PUSH
30440: LD_INT 1
30442: NEG
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30462: LD_ADDR_VAR 0 52
30466: PUSH
30467: LD_INT 0
30469: PUSH
30470: LD_INT 0
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 0
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 1
30490: PUSH
30491: LD_INT 0
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: LD_INT 1
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 0
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: LD_INT 0
30524: PUSH
30525: EMPTY
30526: LIST
30527: LIST
30528: PUSH
30529: LD_INT 1
30531: NEG
30532: PUSH
30533: LD_INT 1
30535: NEG
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 1
30543: NEG
30544: PUSH
30545: LD_INT 2
30547: NEG
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: LD_INT 1
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: PUSH
30564: LD_INT 2
30566: NEG
30567: PUSH
30568: LD_INT 0
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 2
30577: NEG
30578: PUSH
30579: LD_INT 1
30581: NEG
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 2
30589: NEG
30590: PUSH
30591: LD_INT 2
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30613: LD_ADDR_VAR 0 53
30617: PUSH
30618: LD_INT 0
30620: PUSH
30621: LD_INT 0
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 0
30630: PUSH
30631: LD_INT 1
30633: NEG
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 0
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: LD_INT 1
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 1
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 1
30671: NEG
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: NEG
30683: PUSH
30684: LD_INT 1
30686: NEG
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 1
30694: NEG
30695: PUSH
30696: LD_INT 2
30698: NEG
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: LD_INT 2
30709: NEG
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: LD_INT 1
30720: NEG
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: PUSH
30726: LD_INT 2
30728: PUSH
30729: LD_INT 0
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: LD_INT 2
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 2
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 0
30768: PUSH
30769: LD_INT 2
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 1
30778: NEG
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: LD_INT 0
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 2
30800: NEG
30801: PUSH
30802: LD_INT 1
30804: NEG
30805: PUSH
30806: EMPTY
30807: LIST
30808: LIST
30809: PUSH
30810: LD_INT 2
30812: NEG
30813: PUSH
30814: LD_INT 2
30816: NEG
30817: PUSH
30818: EMPTY
30819: LIST
30820: LIST
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: LIST
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30843: LD_ADDR_VAR 0 54
30847: PUSH
30848: LD_INT 0
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: PUSH
30858: LD_INT 0
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PUSH
30869: LD_INT 1
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 1
30881: PUSH
30882: LD_INT 1
30884: PUSH
30885: EMPTY
30886: LIST
30887: LIST
30888: PUSH
30889: LD_INT 0
30891: PUSH
30892: LD_INT 1
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 1
30901: NEG
30902: PUSH
30903: LD_INT 0
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 1
30912: NEG
30913: PUSH
30914: LD_INT 1
30916: NEG
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: PUSH
30922: LD_INT 1
30924: NEG
30925: PUSH
30926: LD_INT 2
30928: NEG
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 0
30936: PUSH
30937: LD_INT 2
30939: NEG
30940: PUSH
30941: EMPTY
30942: LIST
30943: LIST
30944: PUSH
30945: LD_INT 1
30947: PUSH
30948: LD_INT 1
30950: NEG
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: PUSH
30956: LD_INT 2
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 2
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 2
30978: PUSH
30979: LD_INT 2
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: LD_INT 1
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 0
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: PUSH
31006: LD_INT 1
31008: NEG
31009: PUSH
31010: LD_INT 1
31012: PUSH
31013: EMPTY
31014: LIST
31015: LIST
31016: PUSH
31017: LD_INT 2
31019: NEG
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: PUSH
31028: LD_INT 2
31030: NEG
31031: PUSH
31032: LD_INT 1
31034: NEG
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 2
31042: NEG
31043: PUSH
31044: LD_INT 2
31046: NEG
31047: PUSH
31048: EMPTY
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31073: LD_ADDR_VAR 0 55
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 0
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 0
31090: PUSH
31091: LD_INT 1
31093: NEG
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 0
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 1
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 0
31121: PUSH
31122: LD_INT 1
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: PUSH
31129: LD_INT 1
31131: NEG
31132: PUSH
31133: LD_INT 0
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: PUSH
31140: LD_INT 1
31142: NEG
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: EMPTY
31149: LIST
31150: LIST
31151: PUSH
31152: LD_INT 1
31154: NEG
31155: PUSH
31156: LD_INT 2
31158: NEG
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 0
31166: PUSH
31167: LD_INT 2
31169: NEG
31170: PUSH
31171: EMPTY
31172: LIST
31173: LIST
31174: PUSH
31175: LD_INT 1
31177: PUSH
31178: LD_INT 1
31180: NEG
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 2
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 2
31198: PUSH
31199: LD_INT 1
31201: PUSH
31202: EMPTY
31203: LIST
31204: LIST
31205: PUSH
31206: LD_INT 2
31208: PUSH
31209: LD_INT 2
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: PUSH
31216: LD_INT 1
31218: PUSH
31219: LD_INT 2
31221: PUSH
31222: EMPTY
31223: LIST
31224: LIST
31225: PUSH
31226: LD_INT 0
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 1
31238: NEG
31239: PUSH
31240: LD_INT 1
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: PUSH
31247: LD_INT 2
31249: NEG
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: LD_INT 2
31260: NEG
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PUSH
31270: LD_INT 2
31272: NEG
31273: PUSH
31274: LD_INT 2
31276: NEG
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: LIST
31290: LIST
31291: LIST
31292: LIST
31293: LIST
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31303: LD_ADDR_VAR 0 56
31307: PUSH
31308: LD_INT 0
31310: PUSH
31311: LD_INT 0
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 0
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 1
31331: PUSH
31332: LD_INT 0
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: PUSH
31342: LD_INT 1
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 0
31351: PUSH
31352: LD_INT 1
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 1
31361: NEG
31362: PUSH
31363: LD_INT 0
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: LD_INT 1
31376: NEG
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: PUSH
31382: LD_INT 1
31384: NEG
31385: PUSH
31386: LD_INT 2
31388: NEG
31389: PUSH
31390: EMPTY
31391: LIST
31392: LIST
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: LD_INT 2
31399: NEG
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: PUSH
31416: LD_INT 2
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 2
31428: PUSH
31429: LD_INT 1
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 2
31438: PUSH
31439: LD_INT 2
31441: PUSH
31442: EMPTY
31443: LIST
31444: LIST
31445: PUSH
31446: LD_INT 1
31448: PUSH
31449: LD_INT 2
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 0
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 2
31479: NEG
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: NEG
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: EMPTY
31497: LIST
31498: LIST
31499: PUSH
31500: LD_INT 2
31502: NEG
31503: PUSH
31504: LD_INT 2
31506: NEG
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31533: LD_ADDR_VAR 0 57
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: PUSH
31548: LD_INT 0
31550: PUSH
31551: LD_INT 1
31553: NEG
31554: PUSH
31555: EMPTY
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 1
31561: PUSH
31562: LD_INT 0
31564: PUSH
31565: EMPTY
31566: LIST
31567: LIST
31568: PUSH
31569: LD_INT 1
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: LD_INT 1
31584: PUSH
31585: EMPTY
31586: LIST
31587: LIST
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: LD_INT 0
31595: PUSH
31596: EMPTY
31597: LIST
31598: LIST
31599: PUSH
31600: LD_INT 1
31602: NEG
31603: PUSH
31604: LD_INT 1
31606: NEG
31607: PUSH
31608: EMPTY
31609: LIST
31610: LIST
31611: PUSH
31612: LD_INT 1
31614: NEG
31615: PUSH
31616: LD_INT 2
31618: NEG
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: LD_INT 2
31629: NEG
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 1
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 2
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: EMPTY
31653: LIST
31654: LIST
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 1
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: PUSH
31666: LD_INT 2
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: PUSH
31676: LD_INT 1
31678: PUSH
31679: LD_INT 2
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 0
31688: PUSH
31689: LD_INT 2
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 1
31698: NEG
31699: PUSH
31700: LD_INT 1
31702: PUSH
31703: EMPTY
31704: LIST
31705: LIST
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: LD_INT 1
31724: NEG
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 2
31732: NEG
31733: PUSH
31734: LD_INT 2
31736: NEG
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: PUSH
31742: EMPTY
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31763: LD_ADDR_VAR 0 58
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: LD_INT 0
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 0
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: LD_INT 0
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 1
31801: PUSH
31802: LD_INT 1
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 1
31821: NEG
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: NEG
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 1
31844: NEG
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: LD_INT 2
31859: NEG
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: PUSH
31865: LD_INT 1
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PUSH
31886: LD_INT 2
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 2
31898: PUSH
31899: LD_INT 2
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: PUSH
31906: LD_INT 1
31908: PUSH
31909: LD_INT 2
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 0
31918: PUSH
31919: LD_INT 2
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 1
31928: NEG
31929: PUSH
31930: LD_INT 1
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: PUSH
31937: LD_INT 2
31939: NEG
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 2
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: NEG
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: PUSH
31960: LD_INT 2
31962: NEG
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: LIST
31992: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
31993: LD_ADDR_VAR 0 59
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: LD_INT 0
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 0
32010: PUSH
32011: LD_INT 1
32013: NEG
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 0
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: LD_INT 1
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: NEG
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32081: LD_ADDR_VAR 0 60
32085: PUSH
32086: LD_INT 0
32088: PUSH
32089: LD_INT 0
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 0
32098: PUSH
32099: LD_INT 1
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: PUSH
32117: LD_INT 1
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: PUSH
32127: LD_INT 0
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: LD_INT 0
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 1
32150: NEG
32151: PUSH
32152: LD_INT 1
32154: NEG
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32169: LD_ADDR_VAR 0 61
32173: PUSH
32174: LD_INT 0
32176: PUSH
32177: LD_INT 0
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: LD_INT 1
32189: NEG
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 1
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: PUSH
32208: LD_INT 1
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 0
32217: PUSH
32218: LD_INT 1
32220: PUSH
32221: EMPTY
32222: LIST
32223: LIST
32224: PUSH
32225: LD_INT 1
32227: NEG
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: EMPTY
32233: LIST
32234: LIST
32235: PUSH
32236: LD_INT 1
32238: NEG
32239: PUSH
32240: LD_INT 1
32242: NEG
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32257: LD_ADDR_VAR 0 62
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32345: LD_ADDR_VAR 0 63
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: LD_INT 0
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: PUSH
32360: LD_INT 0
32362: PUSH
32363: LD_INT 1
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 0
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 1
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 1
32403: NEG
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: PUSH
32416: LD_INT 1
32418: NEG
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
32433: LD_ADDR_VAR 0 64
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 0
32450: PUSH
32451: LD_INT 1
32453: NEG
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 0
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 0
32481: PUSH
32482: LD_INT 1
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 1
32491: NEG
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: LD_INT 1
32506: NEG
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: ST_TO_ADDR
// end ; 1 :
32521: GO 38418
32523: LD_INT 1
32525: DOUBLE
32526: EQUAL
32527: IFTRUE 32531
32529: GO 35154
32531: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32532: LD_ADDR_VAR 0 11
32536: PUSH
32537: LD_INT 1
32539: NEG
32540: PUSH
32541: LD_INT 3
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 0
32551: PUSH
32552: LD_INT 3
32554: NEG
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 1
32562: PUSH
32563: LD_INT 2
32565: NEG
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: EMPTY
32572: LIST
32573: LIST
32574: LIST
32575: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32576: LD_ADDR_VAR 0 12
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: EMPTY
32589: LIST
32590: LIST
32591: PUSH
32592: LD_INT 3
32594: PUSH
32595: LD_INT 0
32597: PUSH
32598: EMPTY
32599: LIST
32600: LIST
32601: PUSH
32602: LD_INT 3
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: LIST
32616: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32617: LD_ADDR_VAR 0 13
32621: PUSH
32622: LD_INT 3
32624: PUSH
32625: LD_INT 2
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 3
32634: PUSH
32635: LD_INT 3
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 3
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32657: LD_ADDR_VAR 0 14
32661: PUSH
32662: LD_INT 1
32664: PUSH
32665: LD_INT 3
32667: PUSH
32668: EMPTY
32669: LIST
32670: LIST
32671: PUSH
32672: LD_INT 0
32674: PUSH
32675: LD_INT 3
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: NEG
32685: PUSH
32686: LD_INT 2
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32698: LD_ADDR_VAR 0 15
32702: PUSH
32703: LD_INT 2
32705: NEG
32706: PUSH
32707: LD_INT 1
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: PUSH
32714: LD_INT 3
32716: NEG
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 3
32727: NEG
32728: PUSH
32729: LD_INT 1
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: EMPTY
32738: LIST
32739: LIST
32740: LIST
32741: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32742: LD_ADDR_VAR 0 16
32746: PUSH
32747: LD_INT 2
32749: NEG
32750: PUSH
32751: LD_INT 3
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: NEG
32762: PUSH
32763: LD_INT 2
32765: NEG
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 3
32773: NEG
32774: PUSH
32775: LD_INT 3
32777: NEG
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32788: LD_ADDR_VAR 0 17
32792: PUSH
32793: LD_INT 1
32795: NEG
32796: PUSH
32797: LD_INT 3
32799: NEG
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 0
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: PUSH
32816: LD_INT 1
32818: PUSH
32819: LD_INT 2
32821: NEG
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: LIST
32831: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32832: LD_ADDR_VAR 0 18
32836: PUSH
32837: LD_INT 2
32839: PUSH
32840: LD_INT 1
32842: NEG
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 3
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 1
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32873: LD_ADDR_VAR 0 19
32877: PUSH
32878: LD_INT 3
32880: PUSH
32881: LD_INT 2
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 3
32890: PUSH
32891: LD_INT 3
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 2
32900: PUSH
32901: LD_INT 3
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32913: LD_ADDR_VAR 0 20
32917: PUSH
32918: LD_INT 1
32920: PUSH
32921: LD_INT 3
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 0
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: NEG
32941: PUSH
32942: LD_INT 2
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: LIST
32953: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32954: LD_ADDR_VAR 0 21
32958: PUSH
32959: LD_INT 2
32961: NEG
32962: PUSH
32963: LD_INT 1
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 3
32972: NEG
32973: PUSH
32974: LD_INT 0
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: NEG
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: LIST
32997: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32998: LD_ADDR_VAR 0 22
33002: PUSH
33003: LD_INT 2
33005: NEG
33006: PUSH
33007: LD_INT 3
33009: NEG
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 3
33017: NEG
33018: PUSH
33019: LD_INT 2
33021: NEG
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 3
33029: NEG
33030: PUSH
33031: LD_INT 3
33033: NEG
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
33044: LD_ADDR_VAR 0 23
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 3
33054: NEG
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 1
33062: NEG
33063: PUSH
33064: LD_INT 4
33066: NEG
33067: PUSH
33068: EMPTY
33069: LIST
33070: LIST
33071: PUSH
33072: LD_INT 1
33074: PUSH
33075: LD_INT 3
33077: NEG
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: LIST
33087: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
33088: LD_ADDR_VAR 0 24
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 1
33108: NEG
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 4
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
33129: LD_ADDR_VAR 0 25
33133: PUSH
33134: LD_INT 3
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 4
33146: PUSH
33147: LD_INT 3
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 3
33156: PUSH
33157: LD_INT 4
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: LIST
33168: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
33169: LD_ADDR_VAR 0 26
33173: PUSH
33174: LD_INT 0
33176: PUSH
33177: LD_INT 3
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: LD_INT 4
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 1
33196: NEG
33197: PUSH
33198: LD_INT 3
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: LIST
33209: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
33210: LD_ADDR_VAR 0 27
33214: PUSH
33215: LD_INT 3
33217: NEG
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 3
33228: NEG
33229: PUSH
33230: LD_INT 1
33232: PUSH
33233: EMPTY
33234: LIST
33235: LIST
33236: PUSH
33237: LD_INT 4
33239: NEG
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
33254: LD_ADDR_VAR 0 28
33258: PUSH
33259: LD_INT 3
33261: NEG
33262: PUSH
33263: LD_INT 3
33265: NEG
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 3
33273: NEG
33274: PUSH
33275: LD_INT 4
33277: NEG
33278: PUSH
33279: EMPTY
33280: LIST
33281: LIST
33282: PUSH
33283: LD_INT 4
33285: NEG
33286: PUSH
33287: LD_INT 3
33289: NEG
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: LIST
33299: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
33300: LD_ADDR_VAR 0 29
33304: PUSH
33305: LD_INT 1
33307: NEG
33308: PUSH
33309: LD_INT 3
33311: NEG
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PUSH
33317: LD_INT 0
33319: PUSH
33320: LD_INT 3
33322: NEG
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: LD_INT 2
33333: NEG
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: PUSH
33339: LD_INT 1
33341: NEG
33342: PUSH
33343: LD_INT 4
33345: NEG
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 4
33356: NEG
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 1
33364: PUSH
33365: LD_INT 3
33367: NEG
33368: PUSH
33369: EMPTY
33370: LIST
33371: LIST
33372: PUSH
33373: LD_INT 1
33375: NEG
33376: PUSH
33377: LD_INT 5
33379: NEG
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: LD_INT 5
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: LD_INT 4
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: NEG
33410: PUSH
33411: LD_INT 6
33413: NEG
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 6
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: LD_INT 1
33432: PUSH
33433: LD_INT 5
33435: NEG
33436: PUSH
33437: EMPTY
33438: LIST
33439: LIST
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
33455: LD_ADDR_VAR 0 30
33459: PUSH
33460: LD_INT 2
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 3
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 3
33483: PUSH
33484: LD_INT 1
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 3
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 4
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: PUSH
33512: LD_INT 4
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 4
33524: PUSH
33525: LD_INT 1
33527: NEG
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 5
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 5
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 5
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PUSH
33560: EMPTY
33561: LIST
33562: LIST
33563: PUSH
33564: LD_INT 6
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 6
33576: PUSH
33577: LD_INT 1
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
33598: LD_ADDR_VAR 0 31
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 2
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 3
33615: PUSH
33616: LD_INT 3
33618: PUSH
33619: EMPTY
33620: LIST
33621: LIST
33622: PUSH
33623: LD_INT 2
33625: PUSH
33626: LD_INT 3
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 4
33635: PUSH
33636: LD_INT 3
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: LD_INT 4
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 3
33655: PUSH
33656: LD_INT 4
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: LD_INT 5
33665: PUSH
33666: LD_INT 4
33668: PUSH
33669: EMPTY
33670: LIST
33671: LIST
33672: PUSH
33673: LD_INT 5
33675: PUSH
33676: LD_INT 5
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 4
33685: PUSH
33686: LD_INT 5
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: PUSH
33693: LD_INT 6
33695: PUSH
33696: LD_INT 5
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 6
33705: PUSH
33706: LD_INT 6
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 5
33715: PUSH
33716: LD_INT 6
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
33737: LD_ADDR_VAR 0 32
33741: PUSH
33742: LD_INT 1
33744: PUSH
33745: LD_INT 3
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: LD_INT 3
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 4
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 4
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 3
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 1
33806: PUSH
33807: LD_INT 5
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 0
33816: PUSH
33817: LD_INT 5
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 1
33826: NEG
33827: PUSH
33828: LD_INT 4
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: PUSH
33838: LD_INT 6
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 0
33847: PUSH
33848: LD_INT 6
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 5
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
33880: LD_ADDR_VAR 0 33
33884: PUSH
33885: LD_INT 2
33887: NEG
33888: PUSH
33889: LD_INT 1
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 3
33898: NEG
33899: PUSH
33900: LD_INT 0
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 3
33909: NEG
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 3
33921: NEG
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 4
33932: NEG
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 4
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 4
33955: NEG
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: EMPTY
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 5
33966: NEG
33967: PUSH
33968: LD_INT 0
33970: PUSH
33971: EMPTY
33972: LIST
33973: LIST
33974: PUSH
33975: LD_INT 5
33977: NEG
33978: PUSH
33979: LD_INT 1
33981: NEG
33982: PUSH
33983: EMPTY
33984: LIST
33985: LIST
33986: PUSH
33987: LD_INT 5
33989: NEG
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 6
34000: NEG
34001: PUSH
34002: LD_INT 0
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 6
34011: NEG
34012: PUSH
34013: LD_INT 1
34015: NEG
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
34035: LD_ADDR_VAR 0 34
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 3
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 3
34054: NEG
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 3
34066: NEG
34067: PUSH
34068: LD_INT 3
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 3
34078: NEG
34079: PUSH
34080: LD_INT 4
34082: NEG
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 4
34090: NEG
34091: PUSH
34092: LD_INT 3
34094: NEG
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: LD_INT 4
34102: NEG
34103: PUSH
34104: LD_INT 4
34106: NEG
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 4
34114: NEG
34115: PUSH
34116: LD_INT 5
34118: NEG
34119: PUSH
34120: EMPTY
34121: LIST
34122: LIST
34123: PUSH
34124: LD_INT 5
34126: NEG
34127: PUSH
34128: LD_INT 4
34130: NEG
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 5
34138: NEG
34139: PUSH
34140: LD_INT 5
34142: NEG
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 5
34150: NEG
34151: PUSH
34152: LD_INT 6
34154: NEG
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 6
34162: NEG
34163: PUSH
34164: LD_INT 5
34166: NEG
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: PUSH
34172: LD_INT 6
34174: NEG
34175: PUSH
34176: LD_INT 6
34178: NEG
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
34198: LD_ADDR_VAR 0 41
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: LD_INT 2
34208: NEG
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 1
34216: NEG
34217: PUSH
34218: LD_INT 3
34220: NEG
34221: PUSH
34222: EMPTY
34223: LIST
34224: LIST
34225: PUSH
34226: LD_INT 1
34228: PUSH
34229: LD_INT 2
34231: NEG
34232: PUSH
34233: EMPTY
34234: LIST
34235: LIST
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
34242: LD_ADDR_VAR 0 42
34246: PUSH
34247: LD_INT 2
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: PUSH
34257: LD_INT 2
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: EMPTY
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 3
34270: PUSH
34271: LD_INT 1
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: LIST
34282: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
34283: LD_ADDR_VAR 0 43
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 3
34300: PUSH
34301: LD_INT 2
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 3
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
34323: LD_ADDR_VAR 0 44
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 3
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 2
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: LIST
34363: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34364: LD_ADDR_VAR 0 45
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 3
34393: NEG
34394: PUSH
34395: LD_INT 1
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
34408: LD_ADDR_VAR 0 46
34412: PUSH
34413: LD_INT 2
34415: NEG
34416: PUSH
34417: LD_INT 2
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 3
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 3
34439: NEG
34440: PUSH
34441: LD_INT 2
34443: NEG
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
34454: LD_ADDR_VAR 0 47
34458: PUSH
34459: LD_INT 2
34461: NEG
34462: PUSH
34463: LD_INT 3
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 3
34477: NEG
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34487: LD_ADDR_VAR 0 48
34491: PUSH
34492: LD_INT 1
34494: PUSH
34495: LD_INT 2
34497: NEG
34498: PUSH
34499: EMPTY
34500: LIST
34501: LIST
34502: PUSH
34503: LD_INT 2
34505: PUSH
34506: LD_INT 1
34508: NEG
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
34518: LD_ADDR_VAR 0 49
34522: PUSH
34523: LD_INT 3
34525: PUSH
34526: LD_INT 1
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PUSH
34533: LD_INT 3
34535: PUSH
34536: LD_INT 2
34538: PUSH
34539: EMPTY
34540: LIST
34541: LIST
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
34547: LD_ADDR_VAR 0 50
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 3
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: LD_INT 3
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34576: LD_ADDR_VAR 0 51
34580: PUSH
34581: LD_INT 1
34583: NEG
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 2
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: EMPTY
34604: LIST
34605: LIST
34606: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34607: LD_ADDR_VAR 0 52
34611: PUSH
34612: LD_INT 3
34614: NEG
34615: PUSH
34616: LD_INT 1
34618: NEG
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: LD_INT 2
34630: NEG
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34640: LD_ADDR_VAR 0 53
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 3
34651: NEG
34652: PUSH
34653: EMPTY
34654: LIST
34655: LIST
34656: PUSH
34657: LD_INT 0
34659: PUSH
34660: LD_INT 3
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 2
34673: NEG
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: LIST
34683: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34684: LD_ADDR_VAR 0 54
34688: PUSH
34689: LD_INT 2
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 3
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 3
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: LIST
34724: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
34725: LD_ADDR_VAR 0 55
34729: PUSH
34730: LD_INT 3
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: EMPTY
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 3
34742: PUSH
34743: LD_INT 3
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 2
34752: PUSH
34753: LD_INT 3
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: LIST
34764: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34765: LD_ADDR_VAR 0 56
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: LD_INT 3
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: LD_INT 3
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 1
34792: NEG
34793: PUSH
34794: LD_INT 2
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: LIST
34805: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34806: LD_ADDR_VAR 0 57
34810: PUSH
34811: LD_INT 2
34813: NEG
34814: PUSH
34815: LD_INT 1
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 3
34824: NEG
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 3
34835: NEG
34836: PUSH
34837: LD_INT 1
34839: NEG
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34850: LD_ADDR_VAR 0 58
34854: PUSH
34855: LD_INT 2
34857: NEG
34858: PUSH
34859: LD_INT 3
34861: NEG
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 3
34869: NEG
34870: PUSH
34871: LD_INT 2
34873: NEG
34874: PUSH
34875: EMPTY
34876: LIST
34877: LIST
34878: PUSH
34879: LD_INT 3
34881: NEG
34882: PUSH
34883: LD_INT 3
34885: NEG
34886: PUSH
34887: EMPTY
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: LIST
34895: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
34896: LD_ADDR_VAR 0 59
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 0
34915: PUSH
34916: LD_INT 2
34918: NEG
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34940: LD_ADDR_VAR 0 60
34944: PUSH
34945: LD_INT 1
34947: PUSH
34948: LD_INT 1
34950: NEG
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 2
34958: PUSH
34959: LD_INT 0
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 2
34968: PUSH
34969: LD_INT 1
34971: PUSH
34972: EMPTY
34973: LIST
34974: LIST
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34981: LD_ADDR_VAR 0 61
34985: PUSH
34986: LD_INT 2
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: EMPTY
34993: LIST
34994: LIST
34995: PUSH
34996: LD_INT 2
34998: PUSH
34999: LD_INT 2
35001: PUSH
35002: EMPTY
35003: LIST
35004: LIST
35005: PUSH
35006: LD_INT 1
35008: PUSH
35009: LD_INT 2
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
35021: LD_ADDR_VAR 0 62
35025: PUSH
35026: LD_INT 1
35028: PUSH
35029: LD_INT 2
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: NEG
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: EMPTY
35054: LIST
35055: LIST
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
35062: LD_ADDR_VAR 0 63
35066: PUSH
35067: LD_INT 1
35069: NEG
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: EMPTY
35075: LIST
35076: LIST
35077: PUSH
35078: LD_INT 2
35080: NEG
35081: PUSH
35082: LD_INT 0
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 2
35091: NEG
35092: PUSH
35093: LD_INT 1
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: LIST
35105: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35106: LD_ADDR_VAR 0 64
35110: PUSH
35111: LD_INT 1
35113: NEG
35114: PUSH
35115: LD_INT 2
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: NEG
35126: PUSH
35127: LD_INT 1
35129: NEG
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 2
35137: NEG
35138: PUSH
35139: LD_INT 2
35141: NEG
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
// end ; 2 :
35152: GO 38418
35154: LD_INT 2
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 38417
35162: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
35163: LD_ADDR_VAR 0 29
35167: PUSH
35168: LD_INT 4
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 4
35180: PUSH
35181: LD_INT 1
35183: NEG
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 5
35191: PUSH
35192: LD_INT 0
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 5
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 4
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: PUSH
35222: LD_INT 0
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 3
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 2
35245: NEG
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: LD_INT 5
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: EMPTY
35258: LIST
35259: LIST
35260: PUSH
35261: LD_INT 3
35263: PUSH
35264: LD_INT 3
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: PUSH
35274: LD_INT 2
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 4
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 4
35293: PUSH
35294: LD_INT 4
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 3
35303: PUSH
35304: LD_INT 4
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: PUSH
35314: LD_INT 3
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 2
35323: PUSH
35324: LD_INT 2
35326: PUSH
35327: EMPTY
35328: LIST
35329: LIST
35330: PUSH
35331: LD_INT 4
35333: PUSH
35334: LD_INT 2
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 2
35343: PUSH
35344: LD_INT 4
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 0
35353: PUSH
35354: LD_INT 4
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: LD_INT 3
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 4
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 1
35383: PUSH
35384: LD_INT 5
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: LD_INT 5
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: LD_INT 4
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 1
35414: NEG
35415: PUSH
35416: LD_INT 3
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: LD_INT 5
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 2
35435: NEG
35436: PUSH
35437: LD_INT 3
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 3
35446: NEG
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 3
35457: NEG
35458: PUSH
35459: LD_INT 1
35461: NEG
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 2
35469: NEG
35470: PUSH
35471: LD_INT 0
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 2
35480: NEG
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: PUSH
35489: LD_INT 3
35491: NEG
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 4
35502: NEG
35503: PUSH
35504: LD_INT 0
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: PUSH
35511: LD_INT 4
35513: NEG
35514: PUSH
35515: LD_INT 1
35517: NEG
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: LD_INT 4
35525: NEG
35526: PUSH
35527: LD_INT 2
35529: NEG
35530: PUSH
35531: EMPTY
35532: LIST
35533: LIST
35534: PUSH
35535: LD_INT 2
35537: NEG
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 4
35548: NEG
35549: PUSH
35550: LD_INT 4
35552: NEG
35553: PUSH
35554: EMPTY
35555: LIST
35556: LIST
35557: PUSH
35558: LD_INT 4
35560: NEG
35561: PUSH
35562: LD_INT 5
35564: NEG
35565: PUSH
35566: EMPTY
35567: LIST
35568: LIST
35569: PUSH
35570: LD_INT 3
35572: NEG
35573: PUSH
35574: LD_INT 4
35576: NEG
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 3
35584: NEG
35585: PUSH
35586: LD_INT 3
35588: NEG
35589: PUSH
35590: EMPTY
35591: LIST
35592: LIST
35593: PUSH
35594: LD_INT 4
35596: NEG
35597: PUSH
35598: LD_INT 3
35600: NEG
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: PUSH
35606: LD_INT 5
35608: NEG
35609: PUSH
35610: LD_INT 4
35612: NEG
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 5
35620: NEG
35621: PUSH
35622: LD_INT 5
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 3
35632: NEG
35633: PUSH
35634: LD_INT 5
35636: NEG
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 5
35644: NEG
35645: PUSH
35646: LD_INT 3
35648: NEG
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
35701: LD_ADDR_VAR 0 30
35705: PUSH
35706: LD_INT 4
35708: PUSH
35709: LD_INT 4
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: LD_INT 4
35718: PUSH
35719: LD_INT 3
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 5
35728: PUSH
35729: LD_INT 4
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 5
35738: PUSH
35739: LD_INT 5
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 4
35748: PUSH
35749: LD_INT 5
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 3
35758: PUSH
35759: LD_INT 4
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 3
35768: PUSH
35769: LD_INT 3
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 5
35778: PUSH
35779: LD_INT 3
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 3
35788: PUSH
35789: LD_INT 5
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 3
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: PUSH
35806: LD_INT 0
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 3
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 1
35828: PUSH
35829: LD_INT 4
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: LD_INT 4
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: NEG
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: NEG
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 2
35870: PUSH
35871: LD_INT 4
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 4
35891: NEG
35892: PUSH
35893: LD_INT 0
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: PUSH
35900: LD_INT 4
35902: NEG
35903: PUSH
35904: LD_INT 1
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 3
35914: NEG
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 3
35925: NEG
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 4
35936: NEG
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 5
35947: NEG
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 5
35958: NEG
35959: PUSH
35960: LD_INT 1
35962: NEG
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 5
35970: NEG
35971: PUSH
35972: LD_INT 2
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: LD_INT 2
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 3
35993: NEG
35994: PUSH
35995: LD_INT 3
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 3
36005: NEG
36006: PUSH
36007: LD_INT 4
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 2
36017: NEG
36018: PUSH
36019: LD_INT 3
36021: NEG
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 2
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 3
36041: NEG
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 4
36053: NEG
36054: PUSH
36055: LD_INT 3
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 4
36065: NEG
36066: PUSH
36067: LD_INT 4
36069: NEG
36070: PUSH
36071: EMPTY
36072: LIST
36073: LIST
36074: PUSH
36075: LD_INT 2
36077: NEG
36078: PUSH
36079: LD_INT 4
36081: NEG
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 4
36089: NEG
36090: PUSH
36091: LD_INT 2
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 0
36101: PUSH
36102: LD_INT 4
36104: NEG
36105: PUSH
36106: EMPTY
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 0
36112: PUSH
36113: LD_INT 5
36115: NEG
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 4
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 1
36134: PUSH
36135: LD_INT 3
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: LD_INT 3
36148: NEG
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: PUSH
36154: LD_INT 1
36156: NEG
36157: PUSH
36158: LD_INT 4
36160: NEG
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: LD_INT 5
36172: NEG
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 3
36183: NEG
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 5
36195: NEG
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
36248: LD_ADDR_VAR 0 31
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 4
36258: PUSH
36259: EMPTY
36260: LIST
36261: LIST
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: LD_INT 3
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: PUSH
36276: LD_INT 4
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: LD_INT 5
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 0
36295: PUSH
36296: LD_INT 5
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: NEG
36306: PUSH
36307: LD_INT 4
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 1
36316: NEG
36317: PUSH
36318: LD_INT 3
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: LD_INT 5
36330: PUSH
36331: EMPTY
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 2
36337: NEG
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 3
36348: NEG
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 3
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: NEG
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 2
36382: NEG
36383: PUSH
36384: LD_INT 1
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 3
36393: NEG
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 4
36404: NEG
36405: PUSH
36406: LD_INT 0
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 4
36415: NEG
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: LD_INT 4
36427: NEG
36428: PUSH
36429: LD_INT 2
36431: NEG
36432: PUSH
36433: EMPTY
36434: LIST
36435: LIST
36436: PUSH
36437: LD_INT 2
36439: NEG
36440: PUSH
36441: LD_INT 2
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 4
36450: NEG
36451: PUSH
36452: LD_INT 4
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 4
36462: NEG
36463: PUSH
36464: LD_INT 5
36466: NEG
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 3
36474: NEG
36475: PUSH
36476: LD_INT 4
36478: NEG
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 3
36486: NEG
36487: PUSH
36488: LD_INT 3
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 4
36498: NEG
36499: PUSH
36500: LD_INT 3
36502: NEG
36503: PUSH
36504: EMPTY
36505: LIST
36506: LIST
36507: PUSH
36508: LD_INT 5
36510: NEG
36511: PUSH
36512: LD_INT 4
36514: NEG
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 5
36522: NEG
36523: PUSH
36524: LD_INT 5
36526: NEG
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 3
36534: NEG
36535: PUSH
36536: LD_INT 5
36538: NEG
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 5
36546: NEG
36547: PUSH
36548: LD_INT 3
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 0
36558: PUSH
36559: LD_INT 3
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 4
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 1
36580: PUSH
36581: LD_INT 3
36583: NEG
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: PUSH
36592: LD_INT 2
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 0
36602: PUSH
36603: LD_INT 2
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 1
36613: NEG
36614: PUSH
36615: LD_INT 3
36617: NEG
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: PUSH
36623: LD_INT 1
36625: NEG
36626: PUSH
36627: LD_INT 4
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 2
36637: PUSH
36638: LD_INT 2
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: NEG
36649: PUSH
36650: LD_INT 4
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 4
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 4
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 5
36681: PUSH
36682: LD_INT 0
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 5
36691: PUSH
36692: LD_INT 1
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 4
36701: PUSH
36702: LD_INT 1
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 3
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 3
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 3
36732: PUSH
36733: LD_INT 2
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 5
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
36798: LD_ADDR_VAR 0 32
36802: PUSH
36803: LD_INT 4
36805: NEG
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 4
36816: NEG
36817: PUSH
36818: LD_INT 1
36820: NEG
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 3
36828: NEG
36829: PUSH
36830: LD_INT 0
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 3
36839: NEG
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 4
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 5
36861: NEG
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 5
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 5
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 3
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 3
36907: NEG
36908: PUSH
36909: LD_INT 3
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 3
36919: NEG
36920: PUSH
36921: LD_INT 4
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: NEG
36932: PUSH
36933: LD_INT 3
36935: NEG
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: NEG
36944: PUSH
36945: LD_INT 2
36947: NEG
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: PUSH
36953: LD_INT 3
36955: NEG
36956: PUSH
36957: LD_INT 2
36959: NEG
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: LD_INT 4
36967: NEG
36968: PUSH
36969: LD_INT 3
36971: NEG
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 4
36979: NEG
36980: PUSH
36981: LD_INT 4
36983: NEG
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: LD_INT 2
36991: NEG
36992: PUSH
36993: LD_INT 4
36995: NEG
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 4
37003: NEG
37004: PUSH
37005: LD_INT 2
37007: NEG
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 0
37015: PUSH
37016: LD_INT 4
37018: NEG
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: LD_INT 5
37029: NEG
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: LD_INT 4
37040: NEG
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: PUSH
37046: LD_INT 1
37048: PUSH
37049: LD_INT 3
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 3
37062: NEG
37063: PUSH
37064: EMPTY
37065: LIST
37066: LIST
37067: PUSH
37068: LD_INT 1
37070: NEG
37071: PUSH
37072: LD_INT 4
37074: NEG
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 1
37082: NEG
37083: PUSH
37084: LD_INT 5
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 3
37097: NEG
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: NEG
37106: PUSH
37107: LD_INT 5
37109: NEG
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 3
37117: PUSH
37118: LD_INT 0
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 3
37127: PUSH
37128: LD_INT 1
37130: NEG
37131: PUSH
37132: EMPTY
37133: LIST
37134: LIST
37135: PUSH
37136: LD_INT 4
37138: PUSH
37139: LD_INT 0
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 4
37148: PUSH
37149: LD_INT 1
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 3
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 0
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 4
37200: PUSH
37201: LD_INT 2
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 4
37210: PUSH
37211: LD_INT 4
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 4
37220: PUSH
37221: LD_INT 3
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 5
37230: PUSH
37231: LD_INT 4
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 5
37240: PUSH
37241: LD_INT 5
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 4
37250: PUSH
37251: LD_INT 5
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: LD_INT 4
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 3
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 5
37280: PUSH
37281: LD_INT 3
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: LD_INT 5
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
37345: LD_ADDR_VAR 0 33
37349: PUSH
37350: LD_INT 4
37352: NEG
37353: PUSH
37354: LD_INT 4
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 4
37364: NEG
37365: PUSH
37366: LD_INT 5
37368: NEG
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 3
37376: NEG
37377: PUSH
37378: LD_INT 4
37380: NEG
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 3
37388: NEG
37389: PUSH
37390: LD_INT 3
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 4
37400: NEG
37401: PUSH
37402: LD_INT 3
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 5
37412: NEG
37413: PUSH
37414: LD_INT 4
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 5
37424: NEG
37425: PUSH
37426: LD_INT 5
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 3
37436: NEG
37437: PUSH
37438: LD_INT 5
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 5
37448: NEG
37449: PUSH
37450: LD_INT 3
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 0
37460: PUSH
37461: LD_INT 3
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 4
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 3
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 2
37496: NEG
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: LD_INT 2
37507: NEG
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 1
37515: NEG
37516: PUSH
37517: LD_INT 3
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 4
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 2
37539: PUSH
37540: LD_INT 2
37542: NEG
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: LD_INT 4
37554: NEG
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 4
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 4
37572: PUSH
37573: LD_INT 1
37575: NEG
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 5
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 5
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 4
37603: PUSH
37604: LD_INT 1
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 3
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 3
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: PUSH
37632: LD_INT 3
37634: PUSH
37635: LD_INT 2
37637: NEG
37638: PUSH
37639: EMPTY
37640: LIST
37641: LIST
37642: PUSH
37643: LD_INT 5
37645: PUSH
37646: LD_INT 2
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 3
37655: PUSH
37656: LD_INT 3
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: PUSH
37663: LD_INT 3
37665: PUSH
37666: LD_INT 2
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: LD_INT 3
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 4
37685: PUSH
37686: LD_INT 4
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: LD_INT 4
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 2
37705: PUSH
37706: LD_INT 3
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 2
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 4
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 4
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 4
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: LD_INT 3
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 4
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 5
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 5
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 4
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 3
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: LD_INT 5
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 2
37827: NEG
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: EMPTY
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
37883: LD_ADDR_VAR 0 34
37887: PUSH
37888: LD_INT 0
37890: PUSH
37891: LD_INT 4
37893: NEG
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 0
37901: PUSH
37902: LD_INT 5
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: LD_INT 4
37915: NEG
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: LD_INT 3
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 3
37937: NEG
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 4
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: NEG
37958: PUSH
37959: LD_INT 5
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: LD_INT 3
37972: NEG
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PUSH
37978: LD_INT 2
37980: NEG
37981: PUSH
37982: LD_INT 5
37984: NEG
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 3
37992: PUSH
37993: LD_INT 0
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 4
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PUSH
38021: LD_INT 4
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 3
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 2
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 2
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 4
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 4
38085: PUSH
38086: LD_INT 4
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 4
38095: PUSH
38096: LD_INT 3
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 5
38105: PUSH
38106: LD_INT 4
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 5
38115: PUSH
38116: LD_INT 5
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 4
38125: PUSH
38126: LD_INT 5
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 3
38135: PUSH
38136: LD_INT 4
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 3
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 5
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 3
38165: PUSH
38166: LD_INT 5
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 0
38175: PUSH
38176: LD_INT 3
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: LD_INT 2
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: LD_INT 3
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 4
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 0
38215: PUSH
38216: LD_INT 4
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: LD_INT 3
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 1
38236: NEG
38237: PUSH
38238: LD_INT 2
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 2
38247: PUSH
38248: LD_INT 4
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: LD_INT 2
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 4
38268: NEG
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 4
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: PUSH
38300: LD_INT 3
38302: NEG
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 4
38313: NEG
38314: PUSH
38315: LD_INT 1
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 5
38324: NEG
38325: PUSH
38326: LD_INT 0
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 5
38335: NEG
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 5
38347: NEG
38348: PUSH
38349: LD_INT 2
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 3
38359: NEG
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: ST_TO_ADDR
// end ; end ;
38415: GO 38418
38417: POP
// case btype of b_depot , b_warehouse :
38418: LD_VAR 0 1
38422: PUSH
38423: LD_INT 0
38425: DOUBLE
38426: EQUAL
38427: IFTRUE 38437
38429: LD_INT 1
38431: DOUBLE
38432: EQUAL
38433: IFTRUE 38437
38435: GO 38638
38437: POP
// case nation of nation_american :
38438: LD_VAR 0 5
38442: PUSH
38443: LD_INT 1
38445: DOUBLE
38446: EQUAL
38447: IFTRUE 38451
38449: GO 38507
38451: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
38452: LD_ADDR_VAR 0 9
38456: PUSH
38457: LD_VAR 0 11
38461: PUSH
38462: LD_VAR 0 12
38466: PUSH
38467: LD_VAR 0 13
38471: PUSH
38472: LD_VAR 0 14
38476: PUSH
38477: LD_VAR 0 15
38481: PUSH
38482: LD_VAR 0 16
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: PUSH
38495: LD_VAR 0 4
38499: PUSH
38500: LD_INT 1
38502: PLUS
38503: ARRAY
38504: ST_TO_ADDR
38505: GO 38636
38507: LD_INT 2
38509: DOUBLE
38510: EQUAL
38511: IFTRUE 38515
38513: GO 38571
38515: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
38516: LD_ADDR_VAR 0 9
38520: PUSH
38521: LD_VAR 0 17
38525: PUSH
38526: LD_VAR 0 18
38530: PUSH
38531: LD_VAR 0 19
38535: PUSH
38536: LD_VAR 0 20
38540: PUSH
38541: LD_VAR 0 21
38545: PUSH
38546: LD_VAR 0 22
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: PUSH
38559: LD_VAR 0 4
38563: PUSH
38564: LD_INT 1
38566: PLUS
38567: ARRAY
38568: ST_TO_ADDR
38569: GO 38636
38571: LD_INT 3
38573: DOUBLE
38574: EQUAL
38575: IFTRUE 38579
38577: GO 38635
38579: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
38580: LD_ADDR_VAR 0 9
38584: PUSH
38585: LD_VAR 0 23
38589: PUSH
38590: LD_VAR 0 24
38594: PUSH
38595: LD_VAR 0 25
38599: PUSH
38600: LD_VAR 0 26
38604: PUSH
38605: LD_VAR 0 27
38609: PUSH
38610: LD_VAR 0 28
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: PUSH
38623: LD_VAR 0 4
38627: PUSH
38628: LD_INT 1
38630: PLUS
38631: ARRAY
38632: ST_TO_ADDR
38633: GO 38636
38635: POP
38636: GO 39191
38638: LD_INT 2
38640: DOUBLE
38641: EQUAL
38642: IFTRUE 38652
38644: LD_INT 3
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38708
38652: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
38653: LD_ADDR_VAR 0 9
38657: PUSH
38658: LD_VAR 0 29
38662: PUSH
38663: LD_VAR 0 30
38667: PUSH
38668: LD_VAR 0 31
38672: PUSH
38673: LD_VAR 0 32
38677: PUSH
38678: LD_VAR 0 33
38682: PUSH
38683: LD_VAR 0 34
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: PUSH
38696: LD_VAR 0 4
38700: PUSH
38701: LD_INT 1
38703: PLUS
38704: ARRAY
38705: ST_TO_ADDR
38706: GO 39191
38708: LD_INT 16
38710: DOUBLE
38711: EQUAL
38712: IFTRUE 38770
38714: LD_INT 17
38716: DOUBLE
38717: EQUAL
38718: IFTRUE 38770
38720: LD_INT 18
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38770
38726: LD_INT 19
38728: DOUBLE
38729: EQUAL
38730: IFTRUE 38770
38732: LD_INT 22
38734: DOUBLE
38735: EQUAL
38736: IFTRUE 38770
38738: LD_INT 20
38740: DOUBLE
38741: EQUAL
38742: IFTRUE 38770
38744: LD_INT 21
38746: DOUBLE
38747: EQUAL
38748: IFTRUE 38770
38750: LD_INT 23
38752: DOUBLE
38753: EQUAL
38754: IFTRUE 38770
38756: LD_INT 24
38758: DOUBLE
38759: EQUAL
38760: IFTRUE 38770
38762: LD_INT 25
38764: DOUBLE
38765: EQUAL
38766: IFTRUE 38770
38768: GO 38826
38770: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
38771: LD_ADDR_VAR 0 9
38775: PUSH
38776: LD_VAR 0 35
38780: PUSH
38781: LD_VAR 0 36
38785: PUSH
38786: LD_VAR 0 37
38790: PUSH
38791: LD_VAR 0 38
38795: PUSH
38796: LD_VAR 0 39
38800: PUSH
38801: LD_VAR 0 40
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: PUSH
38814: LD_VAR 0 4
38818: PUSH
38819: LD_INT 1
38821: PLUS
38822: ARRAY
38823: ST_TO_ADDR
38824: GO 39191
38826: LD_INT 6
38828: DOUBLE
38829: EQUAL
38830: IFTRUE 38882
38832: LD_INT 7
38834: DOUBLE
38835: EQUAL
38836: IFTRUE 38882
38838: LD_INT 8
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38882
38844: LD_INT 13
38846: DOUBLE
38847: EQUAL
38848: IFTRUE 38882
38850: LD_INT 12
38852: DOUBLE
38853: EQUAL
38854: IFTRUE 38882
38856: LD_INT 15
38858: DOUBLE
38859: EQUAL
38860: IFTRUE 38882
38862: LD_INT 11
38864: DOUBLE
38865: EQUAL
38866: IFTRUE 38882
38868: LD_INT 14
38870: DOUBLE
38871: EQUAL
38872: IFTRUE 38882
38874: LD_INT 10
38876: DOUBLE
38877: EQUAL
38878: IFTRUE 38882
38880: GO 38938
38882: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
38883: LD_ADDR_VAR 0 9
38887: PUSH
38888: LD_VAR 0 41
38892: PUSH
38893: LD_VAR 0 42
38897: PUSH
38898: LD_VAR 0 43
38902: PUSH
38903: LD_VAR 0 44
38907: PUSH
38908: LD_VAR 0 45
38912: PUSH
38913: LD_VAR 0 46
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: PUSH
38926: LD_VAR 0 4
38930: PUSH
38931: LD_INT 1
38933: PLUS
38934: ARRAY
38935: ST_TO_ADDR
38936: GO 39191
38938: LD_INT 36
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 39002
38946: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
38947: LD_ADDR_VAR 0 9
38951: PUSH
38952: LD_VAR 0 47
38956: PUSH
38957: LD_VAR 0 48
38961: PUSH
38962: LD_VAR 0 49
38966: PUSH
38967: LD_VAR 0 50
38971: PUSH
38972: LD_VAR 0 51
38976: PUSH
38977: LD_VAR 0 52
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: PUSH
38990: LD_VAR 0 4
38994: PUSH
38995: LD_INT 1
38997: PLUS
38998: ARRAY
38999: ST_TO_ADDR
39000: GO 39191
39002: LD_INT 4
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39028
39008: LD_INT 5
39010: DOUBLE
39011: EQUAL
39012: IFTRUE 39028
39014: LD_INT 34
39016: DOUBLE
39017: EQUAL
39018: IFTRUE 39028
39020: LD_INT 37
39022: DOUBLE
39023: EQUAL
39024: IFTRUE 39028
39026: GO 39084
39028: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
39029: LD_ADDR_VAR 0 9
39033: PUSH
39034: LD_VAR 0 53
39038: PUSH
39039: LD_VAR 0 54
39043: PUSH
39044: LD_VAR 0 55
39048: PUSH
39049: LD_VAR 0 56
39053: PUSH
39054: LD_VAR 0 57
39058: PUSH
39059: LD_VAR 0 58
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: PUSH
39072: LD_VAR 0 4
39076: PUSH
39077: LD_INT 1
39079: PLUS
39080: ARRAY
39081: ST_TO_ADDR
39082: GO 39191
39084: LD_INT 31
39086: DOUBLE
39087: EQUAL
39088: IFTRUE 39134
39090: LD_INT 32
39092: DOUBLE
39093: EQUAL
39094: IFTRUE 39134
39096: LD_INT 33
39098: DOUBLE
39099: EQUAL
39100: IFTRUE 39134
39102: LD_INT 27
39104: DOUBLE
39105: EQUAL
39106: IFTRUE 39134
39108: LD_INT 26
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39134
39114: LD_INT 28
39116: DOUBLE
39117: EQUAL
39118: IFTRUE 39134
39120: LD_INT 29
39122: DOUBLE
39123: EQUAL
39124: IFTRUE 39134
39126: LD_INT 30
39128: DOUBLE
39129: EQUAL
39130: IFTRUE 39134
39132: GO 39190
39134: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
39135: LD_ADDR_VAR 0 9
39139: PUSH
39140: LD_VAR 0 59
39144: PUSH
39145: LD_VAR 0 60
39149: PUSH
39150: LD_VAR 0 61
39154: PUSH
39155: LD_VAR 0 62
39159: PUSH
39160: LD_VAR 0 63
39164: PUSH
39165: LD_VAR 0 64
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: PUSH
39178: LD_VAR 0 4
39182: PUSH
39183: LD_INT 1
39185: PLUS
39186: ARRAY
39187: ST_TO_ADDR
39188: GO 39191
39190: POP
// temp_list2 = [ ] ;
39191: LD_ADDR_VAR 0 10
39195: PUSH
39196: EMPTY
39197: ST_TO_ADDR
// for i in temp_list do
39198: LD_ADDR_VAR 0 8
39202: PUSH
39203: LD_VAR 0 9
39207: PUSH
39208: FOR_IN
39209: IFFALSE 39261
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
39211: LD_ADDR_VAR 0 10
39215: PUSH
39216: LD_VAR 0 10
39220: PUSH
39221: LD_VAR 0 8
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: PUSH
39230: LD_VAR 0 2
39234: PLUS
39235: PUSH
39236: LD_VAR 0 8
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: PUSH
39245: LD_VAR 0 3
39249: PLUS
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: EMPTY
39256: LIST
39257: ADD
39258: ST_TO_ADDR
39259: GO 39208
39261: POP
39262: POP
// result = temp_list2 ;
39263: LD_ADDR_VAR 0 7
39267: PUSH
39268: LD_VAR 0 10
39272: ST_TO_ADDR
// end ;
39273: LD_VAR 0 7
39277: RET
// export function EnemyInRange ( unit , dist ) ; begin
39278: LD_INT 0
39280: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: CALL_OW 255
39295: PPUSH
39296: LD_VAR 0 1
39300: PPUSH
39301: CALL_OW 250
39305: PPUSH
39306: LD_VAR 0 1
39310: PPUSH
39311: CALL_OW 251
39315: PPUSH
39316: LD_VAR 0 2
39320: PPUSH
39321: CALL 12651 0 4
39325: PUSH
39326: LD_INT 4
39328: ARRAY
39329: ST_TO_ADDR
// end ;
39330: LD_VAR 0 3
39334: RET
// export function PlayerSeeMe ( unit ) ; begin
39335: LD_INT 0
39337: PPUSH
// result := See ( your_side , unit ) ;
39338: LD_ADDR_VAR 0 2
39342: PUSH
39343: LD_OWVAR 2
39347: PPUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: CALL_OW 292
39357: ST_TO_ADDR
// end ;
39358: LD_VAR 0 2
39362: RET
// export function ReverseDir ( unit ) ; begin
39363: LD_INT 0
39365: PPUSH
// if not unit then
39366: LD_VAR 0 1
39370: NOT
39371: IFFALSE 39375
// exit ;
39373: GO 39398
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
39375: LD_ADDR_VAR 0 2
39379: PUSH
39380: LD_VAR 0 1
39384: PPUSH
39385: CALL_OW 254
39389: PUSH
39390: LD_INT 3
39392: PLUS
39393: PUSH
39394: LD_INT 6
39396: MOD
39397: ST_TO_ADDR
// end ;
39398: LD_VAR 0 2
39402: RET
// export function ReverseArray ( array ) ; var i ; begin
39403: LD_INT 0
39405: PPUSH
39406: PPUSH
// if not array then
39407: LD_VAR 0 1
39411: NOT
39412: IFFALSE 39416
// exit ;
39414: GO 39471
// result := [ ] ;
39416: LD_ADDR_VAR 0 2
39420: PUSH
39421: EMPTY
39422: ST_TO_ADDR
// for i := array downto 1 do
39423: LD_ADDR_VAR 0 3
39427: PUSH
39428: DOUBLE
39429: LD_VAR 0 1
39433: INC
39434: ST_TO_ADDR
39435: LD_INT 1
39437: PUSH
39438: FOR_DOWNTO
39439: IFFALSE 39469
// result := Join ( result , array [ i ] ) ;
39441: LD_ADDR_VAR 0 2
39445: PUSH
39446: LD_VAR 0 2
39450: PPUSH
39451: LD_VAR 0 1
39455: PUSH
39456: LD_VAR 0 3
39460: ARRAY
39461: PPUSH
39462: CALL 44127 0 2
39466: ST_TO_ADDR
39467: GO 39438
39469: POP
39470: POP
// end ;
39471: LD_VAR 0 2
39475: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
39476: LD_INT 0
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
// if not unit or not hexes then
39484: LD_VAR 0 1
39488: NOT
39489: PUSH
39490: LD_VAR 0 2
39494: NOT
39495: OR
39496: IFFALSE 39500
// exit ;
39498: GO 39623
// dist := 9999 ;
39500: LD_ADDR_VAR 0 5
39504: PUSH
39505: LD_INT 9999
39507: ST_TO_ADDR
// for i = 1 to hexes do
39508: LD_ADDR_VAR 0 4
39512: PUSH
39513: DOUBLE
39514: LD_INT 1
39516: DEC
39517: ST_TO_ADDR
39518: LD_VAR 0 2
39522: PUSH
39523: FOR_TO
39524: IFFALSE 39611
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39526: LD_ADDR_VAR 0 6
39530: PUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: LD_VAR 0 2
39540: PUSH
39541: LD_VAR 0 4
39545: ARRAY
39546: PUSH
39547: LD_INT 1
39549: ARRAY
39550: PPUSH
39551: LD_VAR 0 2
39555: PUSH
39556: LD_VAR 0 4
39560: ARRAY
39561: PUSH
39562: LD_INT 2
39564: ARRAY
39565: PPUSH
39566: CALL_OW 297
39570: ST_TO_ADDR
// if tdist < dist then
39571: LD_VAR 0 6
39575: PUSH
39576: LD_VAR 0 5
39580: LESS
39581: IFFALSE 39609
// begin hex := hexes [ i ] ;
39583: LD_ADDR_VAR 0 8
39587: PUSH
39588: LD_VAR 0 2
39592: PUSH
39593: LD_VAR 0 4
39597: ARRAY
39598: ST_TO_ADDR
// dist := tdist ;
39599: LD_ADDR_VAR 0 5
39603: PUSH
39604: LD_VAR 0 6
39608: ST_TO_ADDR
// end ; end ;
39609: GO 39523
39611: POP
39612: POP
// result := hex ;
39613: LD_ADDR_VAR 0 3
39617: PUSH
39618: LD_VAR 0 8
39622: ST_TO_ADDR
// end ;
39623: LD_VAR 0 3
39627: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
39628: LD_INT 0
39630: PPUSH
39631: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
39632: LD_VAR 0 1
39636: NOT
39637: PUSH
39638: LD_VAR 0 1
39642: PUSH
39643: LD_INT 21
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 23
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PPUSH
39667: CALL_OW 69
39671: IN
39672: NOT
39673: OR
39674: IFFALSE 39678
// exit ;
39676: GO 39725
// for i = 1 to 3 do
39678: LD_ADDR_VAR 0 3
39682: PUSH
39683: DOUBLE
39684: LD_INT 1
39686: DEC
39687: ST_TO_ADDR
39688: LD_INT 3
39690: PUSH
39691: FOR_TO
39692: IFFALSE 39723
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
39694: LD_VAR 0 1
39698: PPUSH
39699: CALL_OW 250
39703: PPUSH
39704: LD_VAR 0 1
39708: PPUSH
39709: CALL_OW 251
39713: PPUSH
39714: LD_INT 1
39716: PPUSH
39717: CALL_OW 453
39721: GO 39691
39723: POP
39724: POP
// end ;
39725: LD_VAR 0 2
39729: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
39730: LD_INT 0
39732: PPUSH
39733: PPUSH
39734: PPUSH
39735: PPUSH
39736: PPUSH
39737: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
39738: LD_VAR 0 1
39742: NOT
39743: PUSH
39744: LD_VAR 0 2
39748: NOT
39749: OR
39750: PUSH
39751: LD_VAR 0 1
39755: PPUSH
39756: CALL_OW 314
39760: OR
39761: IFFALSE 39765
// exit ;
39763: GO 40232
// if GetLives ( i ) < 250 then
39765: LD_VAR 0 4
39769: PPUSH
39770: CALL_OW 256
39774: PUSH
39775: LD_INT 250
39777: LESS
39778: IFFALSE 39791
// begin ComAutodestruct ( i ) ;
39780: LD_VAR 0 4
39784: PPUSH
39785: CALL 39628 0 1
// exit ;
39789: GO 40232
// end ; x := GetX ( enemy_unit ) ;
39791: LD_ADDR_VAR 0 7
39795: PUSH
39796: LD_VAR 0 2
39800: PPUSH
39801: CALL_OW 250
39805: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
39806: LD_ADDR_VAR 0 8
39810: PUSH
39811: LD_VAR 0 2
39815: PPUSH
39816: CALL_OW 251
39820: ST_TO_ADDR
// if not x or not y then
39821: LD_VAR 0 7
39825: NOT
39826: PUSH
39827: LD_VAR 0 8
39831: NOT
39832: OR
39833: IFFALSE 39837
// exit ;
39835: GO 40232
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
39837: LD_ADDR_VAR 0 6
39841: PUSH
39842: LD_VAR 0 7
39846: PPUSH
39847: LD_INT 0
39849: PPUSH
39850: LD_INT 4
39852: PPUSH
39853: CALL_OW 272
39857: PUSH
39858: LD_VAR 0 8
39862: PPUSH
39863: LD_INT 0
39865: PPUSH
39866: LD_INT 4
39868: PPUSH
39869: CALL_OW 273
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_VAR 0 7
39882: PPUSH
39883: LD_INT 1
39885: PPUSH
39886: LD_INT 4
39888: PPUSH
39889: CALL_OW 272
39893: PUSH
39894: LD_VAR 0 8
39898: PPUSH
39899: LD_INT 1
39901: PPUSH
39902: LD_INT 4
39904: PPUSH
39905: CALL_OW 273
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_VAR 0 7
39918: PPUSH
39919: LD_INT 2
39921: PPUSH
39922: LD_INT 4
39924: PPUSH
39925: CALL_OW 272
39929: PUSH
39930: LD_VAR 0 8
39934: PPUSH
39935: LD_INT 2
39937: PPUSH
39938: LD_INT 4
39940: PPUSH
39941: CALL_OW 273
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_VAR 0 7
39954: PPUSH
39955: LD_INT 3
39957: PPUSH
39958: LD_INT 4
39960: PPUSH
39961: CALL_OW 272
39965: PUSH
39966: LD_VAR 0 8
39970: PPUSH
39971: LD_INT 3
39973: PPUSH
39974: LD_INT 4
39976: PPUSH
39977: CALL_OW 273
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_VAR 0 7
39990: PPUSH
39991: LD_INT 4
39993: PPUSH
39994: LD_INT 4
39996: PPUSH
39997: CALL_OW 272
40001: PUSH
40002: LD_VAR 0 8
40006: PPUSH
40007: LD_INT 4
40009: PPUSH
40010: LD_INT 4
40012: PPUSH
40013: CALL_OW 273
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_VAR 0 7
40026: PPUSH
40027: LD_INT 5
40029: PPUSH
40030: LD_INT 4
40032: PPUSH
40033: CALL_OW 272
40037: PUSH
40038: LD_VAR 0 8
40042: PPUSH
40043: LD_INT 5
40045: PPUSH
40046: LD_INT 4
40048: PPUSH
40049: CALL_OW 273
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: ST_TO_ADDR
// for i = tmp downto 1 do
40066: LD_ADDR_VAR 0 4
40070: PUSH
40071: DOUBLE
40072: LD_VAR 0 6
40076: INC
40077: ST_TO_ADDR
40078: LD_INT 1
40080: PUSH
40081: FOR_DOWNTO
40082: IFFALSE 40183
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
40084: LD_VAR 0 6
40088: PUSH
40089: LD_VAR 0 4
40093: ARRAY
40094: PUSH
40095: LD_INT 1
40097: ARRAY
40098: PPUSH
40099: LD_VAR 0 6
40103: PUSH
40104: LD_VAR 0 4
40108: ARRAY
40109: PUSH
40110: LD_INT 2
40112: ARRAY
40113: PPUSH
40114: CALL_OW 488
40118: NOT
40119: PUSH
40120: LD_VAR 0 6
40124: PUSH
40125: LD_VAR 0 4
40129: ARRAY
40130: PUSH
40131: LD_INT 1
40133: ARRAY
40134: PPUSH
40135: LD_VAR 0 6
40139: PUSH
40140: LD_VAR 0 4
40144: ARRAY
40145: PUSH
40146: LD_INT 2
40148: ARRAY
40149: PPUSH
40150: CALL_OW 428
40154: PUSH
40155: LD_INT 0
40157: NONEQUAL
40158: OR
40159: IFFALSE 40181
// tmp := Delete ( tmp , i ) ;
40161: LD_ADDR_VAR 0 6
40165: PUSH
40166: LD_VAR 0 6
40170: PPUSH
40171: LD_VAR 0 4
40175: PPUSH
40176: CALL_OW 3
40180: ST_TO_ADDR
40181: GO 40081
40183: POP
40184: POP
// j := GetClosestHex ( unit , tmp ) ;
40185: LD_ADDR_VAR 0 5
40189: PUSH
40190: LD_VAR 0 1
40194: PPUSH
40195: LD_VAR 0 6
40199: PPUSH
40200: CALL 39476 0 2
40204: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
40205: LD_VAR 0 1
40209: PPUSH
40210: LD_VAR 0 5
40214: PUSH
40215: LD_INT 1
40217: ARRAY
40218: PPUSH
40219: LD_VAR 0 5
40223: PUSH
40224: LD_INT 2
40226: ARRAY
40227: PPUSH
40228: CALL_OW 111
// end ;
40232: LD_VAR 0 3
40236: RET
// export function PrepareApemanSoldier ( ) ; begin
40237: LD_INT 0
40239: PPUSH
// uc_nation := 0 ;
40240: LD_ADDR_OWVAR 21
40244: PUSH
40245: LD_INT 0
40247: ST_TO_ADDR
// hc_sex := sex_male ;
40248: LD_ADDR_OWVAR 27
40252: PUSH
40253: LD_INT 1
40255: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
40256: LD_ADDR_OWVAR 28
40260: PUSH
40261: LD_INT 15
40263: ST_TO_ADDR
// hc_gallery :=  ;
40264: LD_ADDR_OWVAR 33
40268: PUSH
40269: LD_STRING 
40271: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40272: LD_ADDR_OWVAR 31
40276: PUSH
40277: LD_INT 0
40279: PPUSH
40280: LD_INT 3
40282: PPUSH
40283: CALL_OW 12
40287: PUSH
40288: LD_INT 0
40290: PPUSH
40291: LD_INT 3
40293: PPUSH
40294: CALL_OW 12
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 0
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: ST_TO_ADDR
// end ;
40311: LD_VAR 0 1
40315: RET
// export function PrepareApemanEngineer ( ) ; begin
40316: LD_INT 0
40318: PPUSH
// uc_nation := 0 ;
40319: LD_ADDR_OWVAR 21
40323: PUSH
40324: LD_INT 0
40326: ST_TO_ADDR
// hc_sex := sex_male ;
40327: LD_ADDR_OWVAR 27
40331: PUSH
40332: LD_INT 1
40334: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
40335: LD_ADDR_OWVAR 28
40339: PUSH
40340: LD_INT 16
40342: ST_TO_ADDR
// hc_gallery :=  ;
40343: LD_ADDR_OWVAR 33
40347: PUSH
40348: LD_STRING 
40350: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40351: LD_ADDR_OWVAR 31
40355: PUSH
40356: LD_INT 0
40358: PPUSH
40359: LD_INT 3
40361: PPUSH
40362: CALL_OW 12
40366: PUSH
40367: LD_INT 0
40369: PPUSH
40370: LD_INT 3
40372: PPUSH
40373: CALL_OW 12
40377: PUSH
40378: LD_INT 0
40380: PUSH
40381: LD_INT 0
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: ST_TO_ADDR
// end ;
40390: LD_VAR 0 1
40394: RET
// export function PrepareApeman ( agressivity ) ; begin
40395: LD_INT 0
40397: PPUSH
// uc_side := 0 ;
40398: LD_ADDR_OWVAR 20
40402: PUSH
40403: LD_INT 0
40405: ST_TO_ADDR
// uc_nation := 0 ;
40406: LD_ADDR_OWVAR 21
40410: PUSH
40411: LD_INT 0
40413: ST_TO_ADDR
// hc_sex := sex_male ;
40414: LD_ADDR_OWVAR 27
40418: PUSH
40419: LD_INT 1
40421: ST_TO_ADDR
// hc_class := class_apeman ;
40422: LD_ADDR_OWVAR 28
40426: PUSH
40427: LD_INT 12
40429: ST_TO_ADDR
// hc_gallery :=  ;
40430: LD_ADDR_OWVAR 33
40434: PUSH
40435: LD_STRING 
40437: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40438: LD_ADDR_OWVAR 35
40442: PUSH
40443: LD_VAR 0 1
40447: NEG
40448: PPUSH
40449: LD_VAR 0 1
40453: PPUSH
40454: CALL_OW 12
40458: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
40459: LD_ADDR_OWVAR 31
40463: PUSH
40464: LD_INT 0
40466: PPUSH
40467: LD_INT 3
40469: PPUSH
40470: CALL_OW 12
40474: PUSH
40475: LD_INT 0
40477: PPUSH
40478: LD_INT 3
40480: PPUSH
40481: CALL_OW 12
40485: PUSH
40486: LD_INT 0
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: ST_TO_ADDR
// end ;
40498: LD_VAR 0 2
40502: RET
// export function PrepareTiger ( agressivity ) ; begin
40503: LD_INT 0
40505: PPUSH
// uc_side := 0 ;
40506: LD_ADDR_OWVAR 20
40510: PUSH
40511: LD_INT 0
40513: ST_TO_ADDR
// uc_nation := 0 ;
40514: LD_ADDR_OWVAR 21
40518: PUSH
40519: LD_INT 0
40521: ST_TO_ADDR
// hc_class := class_tiger ;
40522: LD_ADDR_OWVAR 28
40526: PUSH
40527: LD_INT 14
40529: ST_TO_ADDR
// hc_gallery :=  ;
40530: LD_ADDR_OWVAR 33
40534: PUSH
40535: LD_STRING 
40537: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
40538: LD_ADDR_OWVAR 35
40542: PUSH
40543: LD_VAR 0 1
40547: NEG
40548: PPUSH
40549: LD_VAR 0 1
40553: PPUSH
40554: CALL_OW 12
40558: ST_TO_ADDR
// end ;
40559: LD_VAR 0 2
40563: RET
// export function PrepareEnchidna ( ) ; begin
40564: LD_INT 0
40566: PPUSH
// uc_side := 0 ;
40567: LD_ADDR_OWVAR 20
40571: PUSH
40572: LD_INT 0
40574: ST_TO_ADDR
// uc_nation := 0 ;
40575: LD_ADDR_OWVAR 21
40579: PUSH
40580: LD_INT 0
40582: ST_TO_ADDR
// hc_class := class_baggie ;
40583: LD_ADDR_OWVAR 28
40587: PUSH
40588: LD_INT 13
40590: ST_TO_ADDR
// hc_gallery :=  ;
40591: LD_ADDR_OWVAR 33
40595: PUSH
40596: LD_STRING 
40598: ST_TO_ADDR
// end ;
40599: LD_VAR 0 1
40603: RET
// export function PrepareFrog ( ) ; begin
40604: LD_INT 0
40606: PPUSH
// uc_side := 0 ;
40607: LD_ADDR_OWVAR 20
40611: PUSH
40612: LD_INT 0
40614: ST_TO_ADDR
// uc_nation := 0 ;
40615: LD_ADDR_OWVAR 21
40619: PUSH
40620: LD_INT 0
40622: ST_TO_ADDR
// hc_class := class_frog ;
40623: LD_ADDR_OWVAR 28
40627: PUSH
40628: LD_INT 19
40630: ST_TO_ADDR
// hc_gallery :=  ;
40631: LD_ADDR_OWVAR 33
40635: PUSH
40636: LD_STRING 
40638: ST_TO_ADDR
// end ;
40639: LD_VAR 0 1
40643: RET
// export function PrepareFish ( ) ; begin
40644: LD_INT 0
40646: PPUSH
// uc_side := 0 ;
40647: LD_ADDR_OWVAR 20
40651: PUSH
40652: LD_INT 0
40654: ST_TO_ADDR
// uc_nation := 0 ;
40655: LD_ADDR_OWVAR 21
40659: PUSH
40660: LD_INT 0
40662: ST_TO_ADDR
// hc_class := class_fish ;
40663: LD_ADDR_OWVAR 28
40667: PUSH
40668: LD_INT 20
40670: ST_TO_ADDR
// hc_gallery :=  ;
40671: LD_ADDR_OWVAR 33
40675: PUSH
40676: LD_STRING 
40678: ST_TO_ADDR
// end ;
40679: LD_VAR 0 1
40683: RET
// export function PrepareBird ( ) ; begin
40684: LD_INT 0
40686: PPUSH
// uc_side := 0 ;
40687: LD_ADDR_OWVAR 20
40691: PUSH
40692: LD_INT 0
40694: ST_TO_ADDR
// uc_nation := 0 ;
40695: LD_ADDR_OWVAR 21
40699: PUSH
40700: LD_INT 0
40702: ST_TO_ADDR
// hc_class := class_phororhacos ;
40703: LD_ADDR_OWVAR 28
40707: PUSH
40708: LD_INT 18
40710: ST_TO_ADDR
// hc_gallery :=  ;
40711: LD_ADDR_OWVAR 33
40715: PUSH
40716: LD_STRING 
40718: ST_TO_ADDR
// end ;
40719: LD_VAR 0 1
40723: RET
// export function PrepareHorse ( ) ; begin
40724: LD_INT 0
40726: PPUSH
// uc_side := 0 ;
40727: LD_ADDR_OWVAR 20
40731: PUSH
40732: LD_INT 0
40734: ST_TO_ADDR
// uc_nation := 0 ;
40735: LD_ADDR_OWVAR 21
40739: PUSH
40740: LD_INT 0
40742: ST_TO_ADDR
// hc_class := class_horse ;
40743: LD_ADDR_OWVAR 28
40747: PUSH
40748: LD_INT 21
40750: ST_TO_ADDR
// hc_gallery :=  ;
40751: LD_ADDR_OWVAR 33
40755: PUSH
40756: LD_STRING 
40758: ST_TO_ADDR
// end ;
40759: LD_VAR 0 1
40763: RET
// export function PrepareMastodont ( ) ; begin
40764: LD_INT 0
40766: PPUSH
// uc_side := 0 ;
40767: LD_ADDR_OWVAR 20
40771: PUSH
40772: LD_INT 0
40774: ST_TO_ADDR
// uc_nation := 0 ;
40775: LD_ADDR_OWVAR 21
40779: PUSH
40780: LD_INT 0
40782: ST_TO_ADDR
// vc_chassis := class_mastodont ;
40783: LD_ADDR_OWVAR 37
40787: PUSH
40788: LD_INT 31
40790: ST_TO_ADDR
// vc_control := control_rider ;
40791: LD_ADDR_OWVAR 38
40795: PUSH
40796: LD_INT 4
40798: ST_TO_ADDR
// end ;
40799: LD_VAR 0 1
40803: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
40804: LD_INT 0
40806: PPUSH
40807: PPUSH
40808: PPUSH
// uc_side = 0 ;
40809: LD_ADDR_OWVAR 20
40813: PUSH
40814: LD_INT 0
40816: ST_TO_ADDR
// uc_nation = 0 ;
40817: LD_ADDR_OWVAR 21
40821: PUSH
40822: LD_INT 0
40824: ST_TO_ADDR
// InitHc_All ( ) ;
40825: CALL_OW 584
// InitVc ;
40829: CALL_OW 20
// if mastodonts then
40833: LD_VAR 0 6
40837: IFFALSE 40904
// for i = 1 to mastodonts do
40839: LD_ADDR_VAR 0 11
40843: PUSH
40844: DOUBLE
40845: LD_INT 1
40847: DEC
40848: ST_TO_ADDR
40849: LD_VAR 0 6
40853: PUSH
40854: FOR_TO
40855: IFFALSE 40902
// begin vc_chassis := 31 ;
40857: LD_ADDR_OWVAR 37
40861: PUSH
40862: LD_INT 31
40864: ST_TO_ADDR
// vc_control := control_rider ;
40865: LD_ADDR_OWVAR 38
40869: PUSH
40870: LD_INT 4
40872: ST_TO_ADDR
// animal := CreateVehicle ;
40873: LD_ADDR_VAR 0 12
40877: PUSH
40878: CALL_OW 45
40882: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40883: LD_VAR 0 12
40887: PPUSH
40888: LD_VAR 0 8
40892: PPUSH
40893: LD_INT 0
40895: PPUSH
40896: CALL 43032 0 3
// end ;
40900: GO 40854
40902: POP
40903: POP
// if horses then
40904: LD_VAR 0 5
40908: IFFALSE 40975
// for i = 1 to horses do
40910: LD_ADDR_VAR 0 11
40914: PUSH
40915: DOUBLE
40916: LD_INT 1
40918: DEC
40919: ST_TO_ADDR
40920: LD_VAR 0 5
40924: PUSH
40925: FOR_TO
40926: IFFALSE 40973
// begin hc_class := 21 ;
40928: LD_ADDR_OWVAR 28
40932: PUSH
40933: LD_INT 21
40935: ST_TO_ADDR
// hc_gallery :=  ;
40936: LD_ADDR_OWVAR 33
40940: PUSH
40941: LD_STRING 
40943: ST_TO_ADDR
// animal := CreateHuman ;
40944: LD_ADDR_VAR 0 12
40948: PUSH
40949: CALL_OW 44
40953: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
40954: LD_VAR 0 12
40958: PPUSH
40959: LD_VAR 0 8
40963: PPUSH
40964: LD_INT 0
40966: PPUSH
40967: CALL 43032 0 3
// end ;
40971: GO 40925
40973: POP
40974: POP
// if birds then
40975: LD_VAR 0 1
40979: IFFALSE 41046
// for i = 1 to birds do
40981: LD_ADDR_VAR 0 11
40985: PUSH
40986: DOUBLE
40987: LD_INT 1
40989: DEC
40990: ST_TO_ADDR
40991: LD_VAR 0 1
40995: PUSH
40996: FOR_TO
40997: IFFALSE 41044
// begin hc_class := 18 ;
40999: LD_ADDR_OWVAR 28
41003: PUSH
41004: LD_INT 18
41006: ST_TO_ADDR
// hc_gallery =  ;
41007: LD_ADDR_OWVAR 33
41011: PUSH
41012: LD_STRING 
41014: ST_TO_ADDR
// animal := CreateHuman ;
41015: LD_ADDR_VAR 0 12
41019: PUSH
41020: CALL_OW 44
41024: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41025: LD_VAR 0 12
41029: PPUSH
41030: LD_VAR 0 8
41034: PPUSH
41035: LD_INT 0
41037: PPUSH
41038: CALL 43032 0 3
// end ;
41042: GO 40996
41044: POP
41045: POP
// if tigers then
41046: LD_VAR 0 2
41050: IFFALSE 41134
// for i = 1 to tigers do
41052: LD_ADDR_VAR 0 11
41056: PUSH
41057: DOUBLE
41058: LD_INT 1
41060: DEC
41061: ST_TO_ADDR
41062: LD_VAR 0 2
41066: PUSH
41067: FOR_TO
41068: IFFALSE 41132
// begin hc_class = class_tiger ;
41070: LD_ADDR_OWVAR 28
41074: PUSH
41075: LD_INT 14
41077: ST_TO_ADDR
// hc_gallery =  ;
41078: LD_ADDR_OWVAR 33
41082: PUSH
41083: LD_STRING 
41085: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
41086: LD_ADDR_OWVAR 35
41090: PUSH
41091: LD_INT 7
41093: NEG
41094: PPUSH
41095: LD_INT 7
41097: PPUSH
41098: CALL_OW 12
41102: ST_TO_ADDR
// animal := CreateHuman ;
41103: LD_ADDR_VAR 0 12
41107: PUSH
41108: CALL_OW 44
41112: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41113: LD_VAR 0 12
41117: PPUSH
41118: LD_VAR 0 8
41122: PPUSH
41123: LD_INT 0
41125: PPUSH
41126: CALL 43032 0 3
// end ;
41130: GO 41067
41132: POP
41133: POP
// if apemans then
41134: LD_VAR 0 3
41138: IFFALSE 41261
// for i = 1 to apemans do
41140: LD_ADDR_VAR 0 11
41144: PUSH
41145: DOUBLE
41146: LD_INT 1
41148: DEC
41149: ST_TO_ADDR
41150: LD_VAR 0 3
41154: PUSH
41155: FOR_TO
41156: IFFALSE 41259
// begin hc_class = class_apeman ;
41158: LD_ADDR_OWVAR 28
41162: PUSH
41163: LD_INT 12
41165: ST_TO_ADDR
// hc_gallery =  ;
41166: LD_ADDR_OWVAR 33
41170: PUSH
41171: LD_STRING 
41173: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
41174: LD_ADDR_OWVAR 35
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PPUSH
41183: LD_INT 2
41185: PPUSH
41186: CALL_OW 12
41190: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
41191: LD_ADDR_OWVAR 31
41195: PUSH
41196: LD_INT 1
41198: PPUSH
41199: LD_INT 3
41201: PPUSH
41202: CALL_OW 12
41206: PUSH
41207: LD_INT 1
41209: PPUSH
41210: LD_INT 3
41212: PPUSH
41213: CALL_OW 12
41217: PUSH
41218: LD_INT 0
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: ST_TO_ADDR
// animal := CreateHuman ;
41230: LD_ADDR_VAR 0 12
41234: PUSH
41235: CALL_OW 44
41239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41240: LD_VAR 0 12
41244: PPUSH
41245: LD_VAR 0 8
41249: PPUSH
41250: LD_INT 0
41252: PPUSH
41253: CALL 43032 0 3
// end ;
41257: GO 41155
41259: POP
41260: POP
// if enchidnas then
41261: LD_VAR 0 4
41265: IFFALSE 41332
// for i = 1 to enchidnas do
41267: LD_ADDR_VAR 0 11
41271: PUSH
41272: DOUBLE
41273: LD_INT 1
41275: DEC
41276: ST_TO_ADDR
41277: LD_VAR 0 4
41281: PUSH
41282: FOR_TO
41283: IFFALSE 41330
// begin hc_class = 13 ;
41285: LD_ADDR_OWVAR 28
41289: PUSH
41290: LD_INT 13
41292: ST_TO_ADDR
// hc_gallery =  ;
41293: LD_ADDR_OWVAR 33
41297: PUSH
41298: LD_STRING 
41300: ST_TO_ADDR
// animal := CreateHuman ;
41301: LD_ADDR_VAR 0 12
41305: PUSH
41306: CALL_OW 44
41310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
41311: LD_VAR 0 12
41315: PPUSH
41316: LD_VAR 0 8
41320: PPUSH
41321: LD_INT 0
41323: PPUSH
41324: CALL 43032 0 3
// end ;
41328: GO 41282
41330: POP
41331: POP
// if fishes then
41332: LD_VAR 0 7
41336: IFFALSE 41403
// for i = 1 to fishes do
41338: LD_ADDR_VAR 0 11
41342: PUSH
41343: DOUBLE
41344: LD_INT 1
41346: DEC
41347: ST_TO_ADDR
41348: LD_VAR 0 7
41352: PUSH
41353: FOR_TO
41354: IFFALSE 41401
// begin hc_class = 20 ;
41356: LD_ADDR_OWVAR 28
41360: PUSH
41361: LD_INT 20
41363: ST_TO_ADDR
// hc_gallery =  ;
41364: LD_ADDR_OWVAR 33
41368: PUSH
41369: LD_STRING 
41371: ST_TO_ADDR
// animal := CreateHuman ;
41372: LD_ADDR_VAR 0 12
41376: PUSH
41377: CALL_OW 44
41381: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
41382: LD_VAR 0 12
41386: PPUSH
41387: LD_VAR 0 9
41391: PPUSH
41392: LD_INT 0
41394: PPUSH
41395: CALL 43032 0 3
// end ;
41399: GO 41353
41401: POP
41402: POP
// end ;
41403: LD_VAR 0 10
41407: RET
// export function WantHeal ( sci , unit ) ; begin
41408: LD_INT 0
41410: PPUSH
// if GetTaskList ( sci ) > 0 then
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 437
41420: PUSH
41421: LD_INT 0
41423: GREATER
41424: IFFALSE 41494
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
41426: LD_VAR 0 1
41430: PPUSH
41431: CALL_OW 437
41435: PUSH
41436: LD_INT 1
41438: ARRAY
41439: PUSH
41440: LD_INT 1
41442: ARRAY
41443: PUSH
41444: LD_STRING l
41446: EQUAL
41447: PUSH
41448: LD_VAR 0 1
41452: PPUSH
41453: CALL_OW 437
41457: PUSH
41458: LD_INT 1
41460: ARRAY
41461: PUSH
41462: LD_INT 4
41464: ARRAY
41465: PUSH
41466: LD_VAR 0 2
41470: EQUAL
41471: AND
41472: IFFALSE 41484
// result := true else
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_INT 1
41481: ST_TO_ADDR
41482: GO 41492
// result := false ;
41484: LD_ADDR_VAR 0 3
41488: PUSH
41489: LD_INT 0
41491: ST_TO_ADDR
// end else
41492: GO 41502
// result := false ;
41494: LD_ADDR_VAR 0 3
41498: PUSH
41499: LD_INT 0
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 3
41506: RET
// export function HealTarget ( sci ) ; begin
41507: LD_INT 0
41509: PPUSH
// if not sci then
41510: LD_VAR 0 1
41514: NOT
41515: IFFALSE 41519
// exit ;
41517: GO 41584
// result := 0 ;
41519: LD_ADDR_VAR 0 2
41523: PUSH
41524: LD_INT 0
41526: ST_TO_ADDR
// if GetTaskList ( sci ) then
41527: LD_VAR 0 1
41531: PPUSH
41532: CALL_OW 437
41536: IFFALSE 41584
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
41538: LD_VAR 0 1
41542: PPUSH
41543: CALL_OW 437
41547: PUSH
41548: LD_INT 1
41550: ARRAY
41551: PUSH
41552: LD_INT 1
41554: ARRAY
41555: PUSH
41556: LD_STRING l
41558: EQUAL
41559: IFFALSE 41584
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
41561: LD_ADDR_VAR 0 2
41565: PUSH
41566: LD_VAR 0 1
41570: PPUSH
41571: CALL_OW 437
41575: PUSH
41576: LD_INT 1
41578: ARRAY
41579: PUSH
41580: LD_INT 4
41582: ARRAY
41583: ST_TO_ADDR
// end ;
41584: LD_VAR 0 2
41588: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
41589: LD_INT 0
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
// if not base_units then
41595: LD_VAR 0 1
41599: NOT
41600: IFFALSE 41604
// exit ;
41602: GO 41691
// result := false ;
41604: LD_ADDR_VAR 0 2
41608: PUSH
41609: LD_INT 0
41611: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
41612: LD_ADDR_VAR 0 5
41616: PUSH
41617: LD_VAR 0 1
41621: PPUSH
41622: LD_INT 21
41624: PUSH
41625: LD_INT 3
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PPUSH
41632: CALL_OW 72
41636: ST_TO_ADDR
// if not tmp then
41637: LD_VAR 0 5
41641: NOT
41642: IFFALSE 41646
// exit ;
41644: GO 41691
// for i in tmp do
41646: LD_ADDR_VAR 0 3
41650: PUSH
41651: LD_VAR 0 5
41655: PUSH
41656: FOR_IN
41657: IFFALSE 41689
// begin result := EnemyInRange ( i , 22 ) ;
41659: LD_ADDR_VAR 0 2
41663: PUSH
41664: LD_VAR 0 3
41668: PPUSH
41669: LD_INT 22
41671: PPUSH
41672: CALL 39278 0 2
41676: ST_TO_ADDR
// if result then
41677: LD_VAR 0 2
41681: IFFALSE 41687
// exit ;
41683: POP
41684: POP
41685: GO 41691
// end ;
41687: GO 41656
41689: POP
41690: POP
// end ;
41691: LD_VAR 0 2
41695: RET
// export function FilterByTag ( units , tag ) ; begin
41696: LD_INT 0
41698: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
41699: LD_ADDR_VAR 0 3
41703: PUSH
41704: LD_VAR 0 1
41708: PPUSH
41709: LD_INT 120
41711: PUSH
41712: LD_VAR 0 2
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PPUSH
41721: CALL_OW 72
41725: ST_TO_ADDR
// end ;
41726: LD_VAR 0 3
41730: RET
// export function IsDriver ( un ) ; begin
41731: LD_INT 0
41733: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
41734: LD_ADDR_VAR 0 2
41738: PUSH
41739: LD_VAR 0 1
41743: PUSH
41744: LD_INT 55
41746: PUSH
41747: EMPTY
41748: LIST
41749: PPUSH
41750: CALL_OW 69
41754: IN
41755: ST_TO_ADDR
// end ;
41756: LD_VAR 0 2
41760: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
41761: LD_INT 0
41763: PPUSH
41764: PPUSH
// list := [ ] ;
41765: LD_ADDR_VAR 0 5
41769: PUSH
41770: EMPTY
41771: ST_TO_ADDR
// case d of 0 :
41772: LD_VAR 0 3
41776: PUSH
41777: LD_INT 0
41779: DOUBLE
41780: EQUAL
41781: IFTRUE 41785
41783: GO 41918
41785: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
41786: LD_ADDR_VAR 0 5
41790: PUSH
41791: LD_VAR 0 1
41795: PUSH
41796: LD_INT 4
41798: MINUS
41799: PUSH
41800: LD_VAR 0 2
41804: PUSH
41805: LD_INT 4
41807: MINUS
41808: PUSH
41809: LD_INT 2
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: LIST
41816: PUSH
41817: LD_VAR 0 1
41821: PUSH
41822: LD_INT 3
41824: MINUS
41825: PUSH
41826: LD_VAR 0 2
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: LIST
41838: PUSH
41839: LD_VAR 0 1
41843: PUSH
41844: LD_INT 4
41846: PLUS
41847: PUSH
41848: LD_VAR 0 2
41852: PUSH
41853: LD_INT 4
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: PUSH
41861: LD_VAR 0 1
41865: PUSH
41866: LD_INT 3
41868: PLUS
41869: PUSH
41870: LD_VAR 0 2
41874: PUSH
41875: LD_INT 3
41877: PLUS
41878: PUSH
41879: LD_INT 5
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: LIST
41886: PUSH
41887: LD_VAR 0 1
41891: PUSH
41892: LD_VAR 0 2
41896: PUSH
41897: LD_INT 4
41899: PLUS
41900: PUSH
41901: LD_INT 0
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: LIST
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
// end ; 1 :
41916: GO 42616
41918: LD_INT 1
41920: DOUBLE
41921: EQUAL
41922: IFTRUE 41926
41924: GO 42059
41926: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
41927: LD_ADDR_VAR 0 5
41931: PUSH
41932: LD_VAR 0 1
41936: PUSH
41937: LD_VAR 0 2
41941: PUSH
41942: LD_INT 4
41944: MINUS
41945: PUSH
41946: LD_INT 3
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: LIST
41953: PUSH
41954: LD_VAR 0 1
41958: PUSH
41959: LD_INT 3
41961: MINUS
41962: PUSH
41963: LD_VAR 0 2
41967: PUSH
41968: LD_INT 3
41970: MINUS
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: PUSH
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 4
41987: MINUS
41988: PUSH
41989: LD_VAR 0 2
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: PUSH
42002: LD_VAR 0 1
42006: PUSH
42007: LD_VAR 0 2
42011: PUSH
42012: LD_INT 3
42014: PLUS
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: PUSH
42024: LD_VAR 0 1
42028: PUSH
42029: LD_INT 4
42031: PLUS
42032: PUSH
42033: LD_VAR 0 2
42037: PUSH
42038: LD_INT 4
42040: PLUS
42041: PUSH
42042: LD_INT 5
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: LIST
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// end ; 2 :
42057: GO 42616
42059: LD_INT 2
42061: DOUBLE
42062: EQUAL
42063: IFTRUE 42067
42065: GO 42196
42067: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
42068: LD_ADDR_VAR 0 5
42072: PUSH
42073: LD_VAR 0 1
42077: PUSH
42078: LD_VAR 0 2
42082: PUSH
42083: LD_INT 3
42085: MINUS
42086: PUSH
42087: LD_INT 3
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: LIST
42094: PUSH
42095: LD_VAR 0 1
42099: PUSH
42100: LD_INT 4
42102: PLUS
42103: PUSH
42104: LD_VAR 0 2
42108: PUSH
42109: LD_INT 4
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: PUSH
42117: LD_VAR 0 1
42121: PUSH
42122: LD_VAR 0 2
42126: PUSH
42127: LD_INT 4
42129: PLUS
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: LIST
42138: PUSH
42139: LD_VAR 0 1
42143: PUSH
42144: LD_INT 3
42146: MINUS
42147: PUSH
42148: LD_VAR 0 2
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: LIST
42160: PUSH
42161: LD_VAR 0 1
42165: PUSH
42166: LD_INT 4
42168: MINUS
42169: PUSH
42170: LD_VAR 0 2
42174: PUSH
42175: LD_INT 4
42177: MINUS
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: ST_TO_ADDR
// end ; 3 :
42194: GO 42616
42196: LD_INT 3
42198: DOUBLE
42199: EQUAL
42200: IFTRUE 42204
42202: GO 42337
42204: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
42205: LD_ADDR_VAR 0 5
42209: PUSH
42210: LD_VAR 0 1
42214: PUSH
42215: LD_INT 3
42217: PLUS
42218: PUSH
42219: LD_VAR 0 2
42223: PUSH
42224: LD_INT 4
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: LIST
42231: PUSH
42232: LD_VAR 0 1
42236: PUSH
42237: LD_INT 4
42239: PLUS
42240: PUSH
42241: LD_VAR 0 2
42245: PUSH
42246: LD_INT 4
42248: PLUS
42249: PUSH
42250: LD_INT 5
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: LIST
42257: PUSH
42258: LD_VAR 0 1
42262: PUSH
42263: LD_INT 4
42265: MINUS
42266: PUSH
42267: LD_VAR 0 2
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: LIST
42279: PUSH
42280: LD_VAR 0 1
42284: PUSH
42285: LD_VAR 0 2
42289: PUSH
42290: LD_INT 4
42292: MINUS
42293: PUSH
42294: LD_INT 3
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: PUSH
42302: LD_VAR 0 1
42306: PUSH
42307: LD_INT 3
42309: MINUS
42310: PUSH
42311: LD_VAR 0 2
42315: PUSH
42316: LD_INT 3
42318: MINUS
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: LIST
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: ST_TO_ADDR
// end ; 4 :
42335: GO 42616
42337: LD_INT 4
42339: DOUBLE
42340: EQUAL
42341: IFTRUE 42345
42343: GO 42478
42345: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
42346: LD_ADDR_VAR 0 5
42350: PUSH
42351: LD_VAR 0 1
42355: PUSH
42356: LD_VAR 0 2
42360: PUSH
42361: LD_INT 4
42363: PLUS
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: LIST
42372: PUSH
42373: LD_VAR 0 1
42377: PUSH
42378: LD_INT 3
42380: PLUS
42381: PUSH
42382: LD_VAR 0 2
42386: PUSH
42387: LD_INT 3
42389: PLUS
42390: PUSH
42391: LD_INT 5
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: LIST
42398: PUSH
42399: LD_VAR 0 1
42403: PUSH
42404: LD_INT 4
42406: PLUS
42407: PUSH
42408: LD_VAR 0 2
42412: PUSH
42413: LD_INT 4
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: PUSH
42421: LD_VAR 0 1
42425: PUSH
42426: LD_VAR 0 2
42430: PUSH
42431: LD_INT 3
42433: MINUS
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: LIST
42442: PUSH
42443: LD_VAR 0 1
42447: PUSH
42448: LD_INT 4
42450: MINUS
42451: PUSH
42452: LD_VAR 0 2
42456: PUSH
42457: LD_INT 4
42459: MINUS
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: PUSH
42469: EMPTY
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
// end ; 5 :
42476: GO 42616
42478: LD_INT 5
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42615
42486: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
42487: LD_ADDR_VAR 0 5
42491: PUSH
42492: LD_VAR 0 1
42496: PUSH
42497: LD_INT 4
42499: MINUS
42500: PUSH
42501: LD_VAR 0 2
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: PUSH
42514: LD_VAR 0 1
42518: PUSH
42519: LD_VAR 0 2
42523: PUSH
42524: LD_INT 4
42526: MINUS
42527: PUSH
42528: LD_INT 3
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: LIST
42535: PUSH
42536: LD_VAR 0 1
42540: PUSH
42541: LD_INT 4
42543: PLUS
42544: PUSH
42545: LD_VAR 0 2
42549: PUSH
42550: LD_INT 4
42552: PLUS
42553: PUSH
42554: LD_INT 5
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: LIST
42561: PUSH
42562: LD_VAR 0 1
42566: PUSH
42567: LD_INT 3
42569: PLUS
42570: PUSH
42571: LD_VAR 0 2
42575: PUSH
42576: LD_INT 4
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: LIST
42583: PUSH
42584: LD_VAR 0 1
42588: PUSH
42589: LD_VAR 0 2
42593: PUSH
42594: LD_INT 3
42596: PLUS
42597: PUSH
42598: LD_INT 0
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: LIST
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: ST_TO_ADDR
// end ; end ;
42613: GO 42616
42615: POP
// result := list ;
42616: LD_ADDR_VAR 0 4
42620: PUSH
42621: LD_VAR 0 5
42625: ST_TO_ADDR
// end ;
42626: LD_VAR 0 4
42630: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
42631: LD_INT 0
42633: PPUSH
42634: PPUSH
42635: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
42636: LD_VAR 0 1
42640: NOT
42641: PUSH
42642: LD_VAR 0 2
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: LD_INT 3
42655: PUSH
42656: LD_INT 4
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: IN
42665: NOT
42666: OR
42667: IFFALSE 42671
// exit ;
42669: GO 42754
// tmp := [ ] ;
42671: LD_ADDR_VAR 0 5
42675: PUSH
42676: EMPTY
42677: ST_TO_ADDR
// for i in units do
42678: LD_ADDR_VAR 0 4
42682: PUSH
42683: LD_VAR 0 1
42687: PUSH
42688: FOR_IN
42689: IFFALSE 42723
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
42691: LD_ADDR_VAR 0 5
42695: PUSH
42696: LD_VAR 0 5
42700: PPUSH
42701: LD_VAR 0 4
42705: PPUSH
42706: LD_VAR 0 2
42710: PPUSH
42711: CALL_OW 259
42715: PPUSH
42716: CALL 44127 0 2
42720: ST_TO_ADDR
42721: GO 42688
42723: POP
42724: POP
// if not tmp then
42725: LD_VAR 0 5
42729: NOT
42730: IFFALSE 42734
// exit ;
42732: GO 42754
// result := SortListByListDesc ( units , tmp ) ;
42734: LD_ADDR_VAR 0 3
42738: PUSH
42739: LD_VAR 0 1
42743: PPUSH
42744: LD_VAR 0 5
42748: PPUSH
42749: CALL_OW 77
42753: ST_TO_ADDR
// end ;
42754: LD_VAR 0 3
42758: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
42759: LD_INT 0
42761: PPUSH
42762: PPUSH
42763: PPUSH
// result := false ;
42764: LD_ADDR_VAR 0 3
42768: PUSH
42769: LD_INT 0
42771: ST_TO_ADDR
// if not building then
42772: LD_VAR 0 2
42776: NOT
42777: IFFALSE 42781
// exit ;
42779: GO 42919
// x := GetX ( building ) ;
42781: LD_ADDR_VAR 0 4
42785: PUSH
42786: LD_VAR 0 2
42790: PPUSH
42791: CALL_OW 250
42795: ST_TO_ADDR
// y := GetY ( building ) ;
42796: LD_ADDR_VAR 0 5
42800: PUSH
42801: LD_VAR 0 2
42805: PPUSH
42806: CALL_OW 251
42810: ST_TO_ADDR
// if not x or not y then
42811: LD_VAR 0 4
42815: NOT
42816: PUSH
42817: LD_VAR 0 5
42821: NOT
42822: OR
42823: IFFALSE 42827
// exit ;
42825: GO 42919
// if GetTaskList ( unit ) then
42827: LD_VAR 0 1
42831: PPUSH
42832: CALL_OW 437
42836: IFFALSE 42919
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42838: LD_STRING e
42840: PUSH
42841: LD_VAR 0 1
42845: PPUSH
42846: CALL_OW 437
42850: PUSH
42851: LD_INT 1
42853: ARRAY
42854: PUSH
42855: LD_INT 1
42857: ARRAY
42858: EQUAL
42859: PUSH
42860: LD_VAR 0 4
42864: PUSH
42865: LD_VAR 0 1
42869: PPUSH
42870: CALL_OW 437
42874: PUSH
42875: LD_INT 1
42877: ARRAY
42878: PUSH
42879: LD_INT 2
42881: ARRAY
42882: EQUAL
42883: AND
42884: PUSH
42885: LD_VAR 0 5
42889: PUSH
42890: LD_VAR 0 1
42894: PPUSH
42895: CALL_OW 437
42899: PUSH
42900: LD_INT 1
42902: ARRAY
42903: PUSH
42904: LD_INT 3
42906: ARRAY
42907: EQUAL
42908: AND
42909: IFFALSE 42919
// result := true end ;
42911: LD_ADDR_VAR 0 3
42915: PUSH
42916: LD_INT 1
42918: ST_TO_ADDR
// end ;
42919: LD_VAR 0 3
42923: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
42924: LD_INT 0
42926: PPUSH
// result := false ;
42927: LD_ADDR_VAR 0 4
42931: PUSH
42932: LD_INT 0
42934: ST_TO_ADDR
// if GetTaskList ( unit ) then
42935: LD_VAR 0 1
42939: PPUSH
42940: CALL_OW 437
42944: IFFALSE 43027
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
42946: LD_STRING M
42948: PUSH
42949: LD_VAR 0 1
42953: PPUSH
42954: CALL_OW 437
42958: PUSH
42959: LD_INT 1
42961: ARRAY
42962: PUSH
42963: LD_INT 1
42965: ARRAY
42966: EQUAL
42967: PUSH
42968: LD_VAR 0 2
42972: PUSH
42973: LD_VAR 0 1
42977: PPUSH
42978: CALL_OW 437
42982: PUSH
42983: LD_INT 1
42985: ARRAY
42986: PUSH
42987: LD_INT 2
42989: ARRAY
42990: EQUAL
42991: AND
42992: PUSH
42993: LD_VAR 0 3
42997: PUSH
42998: LD_VAR 0 1
43002: PPUSH
43003: CALL_OW 437
43007: PUSH
43008: LD_INT 1
43010: ARRAY
43011: PUSH
43012: LD_INT 3
43014: ARRAY
43015: EQUAL
43016: AND
43017: IFFALSE 43027
// result := true ;
43019: LD_ADDR_VAR 0 4
43023: PUSH
43024: LD_INT 1
43026: ST_TO_ADDR
// end ; end ;
43027: LD_VAR 0 4
43031: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
43032: LD_INT 0
43034: PPUSH
43035: PPUSH
43036: PPUSH
43037: PPUSH
// if not unit or not area then
43038: LD_VAR 0 1
43042: NOT
43043: PUSH
43044: LD_VAR 0 2
43048: NOT
43049: OR
43050: IFFALSE 43054
// exit ;
43052: GO 43230
// tmp := AreaToList ( area , i ) ;
43054: LD_ADDR_VAR 0 6
43058: PUSH
43059: LD_VAR 0 2
43063: PPUSH
43064: LD_VAR 0 5
43068: PPUSH
43069: CALL_OW 517
43073: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
43074: LD_ADDR_VAR 0 5
43078: PUSH
43079: DOUBLE
43080: LD_INT 1
43082: DEC
43083: ST_TO_ADDR
43084: LD_VAR 0 6
43088: PUSH
43089: LD_INT 1
43091: ARRAY
43092: PUSH
43093: FOR_TO
43094: IFFALSE 43228
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
43096: LD_ADDR_VAR 0 7
43100: PUSH
43101: LD_VAR 0 6
43105: PUSH
43106: LD_INT 1
43108: ARRAY
43109: PUSH
43110: LD_VAR 0 5
43114: ARRAY
43115: PUSH
43116: LD_VAR 0 6
43120: PUSH
43121: LD_INT 2
43123: ARRAY
43124: PUSH
43125: LD_VAR 0 5
43129: ARRAY
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
43135: LD_INT 92
43137: PUSH
43138: LD_VAR 0 7
43142: PUSH
43143: LD_INT 1
43145: ARRAY
43146: PUSH
43147: LD_VAR 0 7
43151: PUSH
43152: LD_INT 2
43154: ARRAY
43155: PUSH
43156: LD_INT 2
43158: PUSH
43159: EMPTY
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: PPUSH
43165: CALL_OW 69
43169: PUSH
43170: LD_INT 0
43172: EQUAL
43173: IFFALSE 43226
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
43175: LD_VAR 0 1
43179: PPUSH
43180: LD_VAR 0 7
43184: PUSH
43185: LD_INT 1
43187: ARRAY
43188: PPUSH
43189: LD_VAR 0 7
43193: PUSH
43194: LD_INT 2
43196: ARRAY
43197: PPUSH
43198: LD_VAR 0 3
43202: PPUSH
43203: CALL_OW 48
// result := IsPlaced ( unit ) ;
43207: LD_ADDR_VAR 0 4
43211: PUSH
43212: LD_VAR 0 1
43216: PPUSH
43217: CALL_OW 305
43221: ST_TO_ADDR
// exit ;
43222: POP
43223: POP
43224: GO 43230
// end ; end ;
43226: GO 43093
43228: POP
43229: POP
// end ;
43230: LD_VAR 0 4
43234: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
43235: LD_INT 0
43237: PPUSH
43238: PPUSH
43239: PPUSH
// if not side or side > 8 then
43240: LD_VAR 0 1
43244: NOT
43245: PUSH
43246: LD_VAR 0 1
43250: PUSH
43251: LD_INT 8
43253: GREATER
43254: OR
43255: IFFALSE 43259
// exit ;
43257: GO 43446
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
43259: LD_ADDR_VAR 0 4
43263: PUSH
43264: LD_INT 22
43266: PUSH
43267: LD_VAR 0 1
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 21
43278: PUSH
43279: LD_INT 3
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: EMPTY
43287: LIST
43288: LIST
43289: PPUSH
43290: CALL_OW 69
43294: ST_TO_ADDR
// if not tmp then
43295: LD_VAR 0 4
43299: NOT
43300: IFFALSE 43304
// exit ;
43302: GO 43446
// enable_addtolog := true ;
43304: LD_ADDR_OWVAR 81
43308: PUSH
43309: LD_INT 1
43311: ST_TO_ADDR
// AddToLog ( [ ) ;
43312: LD_STRING [
43314: PPUSH
43315: CALL_OW 561
// for i in tmp do
43319: LD_ADDR_VAR 0 3
43323: PUSH
43324: LD_VAR 0 4
43328: PUSH
43329: FOR_IN
43330: IFFALSE 43437
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
43332: LD_STRING [
43334: PUSH
43335: LD_VAR 0 3
43339: PPUSH
43340: CALL_OW 266
43344: STR
43345: PUSH
43346: LD_STRING , 
43348: STR
43349: PUSH
43350: LD_VAR 0 3
43354: PPUSH
43355: CALL_OW 250
43359: STR
43360: PUSH
43361: LD_STRING , 
43363: STR
43364: PUSH
43365: LD_VAR 0 3
43369: PPUSH
43370: CALL_OW 251
43374: STR
43375: PUSH
43376: LD_STRING , 
43378: STR
43379: PUSH
43380: LD_VAR 0 3
43384: PPUSH
43385: CALL_OW 254
43389: STR
43390: PUSH
43391: LD_STRING , 
43393: STR
43394: PUSH
43395: LD_VAR 0 3
43399: PPUSH
43400: LD_INT 1
43402: PPUSH
43403: CALL_OW 268
43407: STR
43408: PUSH
43409: LD_STRING , 
43411: STR
43412: PUSH
43413: LD_VAR 0 3
43417: PPUSH
43418: LD_INT 2
43420: PPUSH
43421: CALL_OW 268
43425: STR
43426: PUSH
43427: LD_STRING ],
43429: STR
43430: PPUSH
43431: CALL_OW 561
// end ;
43435: GO 43329
43437: POP
43438: POP
// AddToLog ( ]; ) ;
43439: LD_STRING ];
43441: PPUSH
43442: CALL_OW 561
// end ;
43446: LD_VAR 0 2
43450: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
43451: LD_INT 0
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
43457: PPUSH
// if not area or not rate or not max then
43458: LD_VAR 0 1
43462: NOT
43463: PUSH
43464: LD_VAR 0 2
43468: NOT
43469: OR
43470: PUSH
43471: LD_VAR 0 4
43475: NOT
43476: OR
43477: IFFALSE 43481
// exit ;
43479: GO 43670
// while 1 do
43481: LD_INT 1
43483: IFFALSE 43670
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
43485: LD_ADDR_VAR 0 9
43489: PUSH
43490: LD_VAR 0 1
43494: PPUSH
43495: LD_INT 1
43497: PPUSH
43498: CALL_OW 287
43502: PUSH
43503: LD_INT 10
43505: MUL
43506: ST_TO_ADDR
// r := rate / 10 ;
43507: LD_ADDR_VAR 0 7
43511: PUSH
43512: LD_VAR 0 2
43516: PUSH
43517: LD_INT 10
43519: DIVREAL
43520: ST_TO_ADDR
// time := 1 1$00 ;
43521: LD_ADDR_VAR 0 8
43525: PUSH
43526: LD_INT 2100
43528: ST_TO_ADDR
// if amount < min then
43529: LD_VAR 0 9
43533: PUSH
43534: LD_VAR 0 3
43538: LESS
43539: IFFALSE 43557
// r := r * 2 else
43541: LD_ADDR_VAR 0 7
43545: PUSH
43546: LD_VAR 0 7
43550: PUSH
43551: LD_INT 2
43553: MUL
43554: ST_TO_ADDR
43555: GO 43583
// if amount > max then
43557: LD_VAR 0 9
43561: PUSH
43562: LD_VAR 0 4
43566: GREATER
43567: IFFALSE 43583
// r := r / 2 ;
43569: LD_ADDR_VAR 0 7
43573: PUSH
43574: LD_VAR 0 7
43578: PUSH
43579: LD_INT 2
43581: DIVREAL
43582: ST_TO_ADDR
// time := time / r ;
43583: LD_ADDR_VAR 0 8
43587: PUSH
43588: LD_VAR 0 8
43592: PUSH
43593: LD_VAR 0 7
43597: DIVREAL
43598: ST_TO_ADDR
// if time < 0 then
43599: LD_VAR 0 8
43603: PUSH
43604: LD_INT 0
43606: LESS
43607: IFFALSE 43624
// time := time * - 1 ;
43609: LD_ADDR_VAR 0 8
43613: PUSH
43614: LD_VAR 0 8
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: MUL
43623: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
43624: LD_VAR 0 8
43628: PUSH
43629: LD_INT 35
43631: PPUSH
43632: LD_INT 875
43634: PPUSH
43635: CALL_OW 12
43639: PLUS
43640: PPUSH
43641: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
43645: LD_INT 1
43647: PPUSH
43648: LD_INT 5
43650: PPUSH
43651: CALL_OW 12
43655: PPUSH
43656: LD_VAR 0 1
43660: PPUSH
43661: LD_INT 1
43663: PPUSH
43664: CALL_OW 55
// end ;
43668: GO 43481
// end ;
43670: LD_VAR 0 5
43674: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
43675: LD_INT 0
43677: PPUSH
43678: PPUSH
43679: PPUSH
43680: PPUSH
43681: PPUSH
43682: PPUSH
43683: PPUSH
43684: PPUSH
// if not turrets or not factories then
43685: LD_VAR 0 1
43689: NOT
43690: PUSH
43691: LD_VAR 0 2
43695: NOT
43696: OR
43697: IFFALSE 43701
// exit ;
43699: GO 44008
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
43701: LD_ADDR_VAR 0 10
43705: PUSH
43706: LD_INT 5
43708: PUSH
43709: LD_INT 6
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 4
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: LD_INT 5
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 24
43743: PUSH
43744: LD_INT 25
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: LD_INT 23
43753: PUSH
43754: LD_INT 27
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 42
43767: PUSH
43768: LD_INT 43
43770: PUSH
43771: EMPTY
43772: LIST
43773: LIST
43774: PUSH
43775: LD_INT 44
43777: PUSH
43778: LD_INT 46
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 45
43787: PUSH
43788: LD_INT 47
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: ST_TO_ADDR
// result := [ ] ;
43805: LD_ADDR_VAR 0 3
43809: PUSH
43810: EMPTY
43811: ST_TO_ADDR
// for i in turrets do
43812: LD_ADDR_VAR 0 4
43816: PUSH
43817: LD_VAR 0 1
43821: PUSH
43822: FOR_IN
43823: IFFALSE 44006
// begin nat := GetNation ( i ) ;
43825: LD_ADDR_VAR 0 7
43829: PUSH
43830: LD_VAR 0 4
43834: PPUSH
43835: CALL_OW 248
43839: ST_TO_ADDR
// weapon := 0 ;
43840: LD_ADDR_VAR 0 8
43844: PUSH
43845: LD_INT 0
43847: ST_TO_ADDR
// if not nat then
43848: LD_VAR 0 7
43852: NOT
43853: IFFALSE 43857
// continue ;
43855: GO 43822
// for j in list [ nat ] do
43857: LD_ADDR_VAR 0 5
43861: PUSH
43862: LD_VAR 0 10
43866: PUSH
43867: LD_VAR 0 7
43871: ARRAY
43872: PUSH
43873: FOR_IN
43874: IFFALSE 43915
// if GetBWeapon ( i ) = j [ 1 ] then
43876: LD_VAR 0 4
43880: PPUSH
43881: CALL_OW 269
43885: PUSH
43886: LD_VAR 0 5
43890: PUSH
43891: LD_INT 1
43893: ARRAY
43894: EQUAL
43895: IFFALSE 43913
// begin weapon := j [ 2 ] ;
43897: LD_ADDR_VAR 0 8
43901: PUSH
43902: LD_VAR 0 5
43906: PUSH
43907: LD_INT 2
43909: ARRAY
43910: ST_TO_ADDR
// break ;
43911: GO 43915
// end ;
43913: GO 43873
43915: POP
43916: POP
// if not weapon then
43917: LD_VAR 0 8
43921: NOT
43922: IFFALSE 43926
// continue ;
43924: GO 43822
// for k in factories do
43926: LD_ADDR_VAR 0 6
43930: PUSH
43931: LD_VAR 0 2
43935: PUSH
43936: FOR_IN
43937: IFFALSE 44002
// begin weapons := AvailableWeaponList ( k ) ;
43939: LD_ADDR_VAR 0 9
43943: PUSH
43944: LD_VAR 0 6
43948: PPUSH
43949: CALL_OW 478
43953: ST_TO_ADDR
// if not weapons then
43954: LD_VAR 0 9
43958: NOT
43959: IFFALSE 43963
// continue ;
43961: GO 43936
// if weapon in weapons then
43963: LD_VAR 0 8
43967: PUSH
43968: LD_VAR 0 9
43972: IN
43973: IFFALSE 44000
// begin result := [ i , weapon ] ;
43975: LD_ADDR_VAR 0 3
43979: PUSH
43980: LD_VAR 0 4
43984: PUSH
43985: LD_VAR 0 8
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: ST_TO_ADDR
// exit ;
43994: POP
43995: POP
43996: POP
43997: POP
43998: GO 44008
// end ; end ;
44000: GO 43936
44002: POP
44003: POP
// end ;
44004: GO 43822
44006: POP
44007: POP
// end ;
44008: LD_VAR 0 3
44012: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
44013: LD_INT 0
44015: PPUSH
// if not side or side > 8 then
44016: LD_VAR 0 3
44020: NOT
44021: PUSH
44022: LD_VAR 0 3
44026: PUSH
44027: LD_INT 8
44029: GREATER
44030: OR
44031: IFFALSE 44035
// exit ;
44033: GO 44094
// if not range then
44035: LD_VAR 0 4
44039: NOT
44040: IFFALSE 44051
// range := - 12 ;
44042: LD_ADDR_VAR 0 4
44046: PUSH
44047: LD_INT 12
44049: NEG
44050: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
44051: LD_VAR 0 1
44055: PPUSH
44056: LD_VAR 0 2
44060: PPUSH
44061: LD_VAR 0 3
44065: PPUSH
44066: LD_VAR 0 4
44070: PPUSH
44071: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
44075: LD_VAR 0 1
44079: PPUSH
44080: LD_VAR 0 2
44084: PPUSH
44085: LD_VAR 0 3
44089: PPUSH
44090: CALL_OW 331
// end ;
44094: LD_VAR 0 5
44098: RET
// export function Video ( mode ) ; begin
44099: LD_INT 0
44101: PPUSH
// ingame_video = mode ;
44102: LD_ADDR_OWVAR 52
44106: PUSH
44107: LD_VAR 0 1
44111: ST_TO_ADDR
// interface_hidden = mode ;
44112: LD_ADDR_OWVAR 54
44116: PUSH
44117: LD_VAR 0 1
44121: ST_TO_ADDR
// end ;
44122: LD_VAR 0 2
44126: RET
// export function Join ( array , element ) ; begin
44127: LD_INT 0
44129: PPUSH
// result := Replace ( array , array + 1 , element ) ;
44130: LD_ADDR_VAR 0 3
44134: PUSH
44135: LD_VAR 0 1
44139: PPUSH
44140: LD_VAR 0 1
44144: PUSH
44145: LD_INT 1
44147: PLUS
44148: PPUSH
44149: LD_VAR 0 2
44153: PPUSH
44154: CALL_OW 1
44158: ST_TO_ADDR
// end ;
44159: LD_VAR 0 3
44163: RET
// export function JoinUnion ( array , element ) ; begin
44164: LD_INT 0
44166: PPUSH
// result := array union element ;
44167: LD_ADDR_VAR 0 3
44171: PUSH
44172: LD_VAR 0 1
44176: PUSH
44177: LD_VAR 0 2
44181: UNION
44182: ST_TO_ADDR
// end ;
44183: LD_VAR 0 3
44187: RET
// export function GetBehemoths ( side ) ; begin
44188: LD_INT 0
44190: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
44191: LD_ADDR_VAR 0 2
44195: PUSH
44196: LD_INT 22
44198: PUSH
44199: LD_VAR 0 1
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 31
44210: PUSH
44211: LD_INT 25
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PPUSH
44222: CALL_OW 69
44226: ST_TO_ADDR
// end ;
44227: LD_VAR 0 2
44231: RET
// export function Shuffle ( array ) ; var i , index ; begin
44232: LD_INT 0
44234: PPUSH
44235: PPUSH
44236: PPUSH
// result := [ ] ;
44237: LD_ADDR_VAR 0 2
44241: PUSH
44242: EMPTY
44243: ST_TO_ADDR
// if not array then
44244: LD_VAR 0 1
44248: NOT
44249: IFFALSE 44253
// exit ;
44251: GO 44352
// Randomize ;
44253: CALL_OW 10
// for i = array downto 1 do
44257: LD_ADDR_VAR 0 3
44261: PUSH
44262: DOUBLE
44263: LD_VAR 0 1
44267: INC
44268: ST_TO_ADDR
44269: LD_INT 1
44271: PUSH
44272: FOR_DOWNTO
44273: IFFALSE 44350
// begin index := rand ( 1 , array ) ;
44275: LD_ADDR_VAR 0 4
44279: PUSH
44280: LD_INT 1
44282: PPUSH
44283: LD_VAR 0 1
44287: PPUSH
44288: CALL_OW 12
44292: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
44293: LD_ADDR_VAR 0 2
44297: PUSH
44298: LD_VAR 0 2
44302: PPUSH
44303: LD_VAR 0 2
44307: PUSH
44308: LD_INT 1
44310: PLUS
44311: PPUSH
44312: LD_VAR 0 1
44316: PUSH
44317: LD_VAR 0 4
44321: ARRAY
44322: PPUSH
44323: CALL_OW 2
44327: ST_TO_ADDR
// array := Delete ( array , index ) ;
44328: LD_ADDR_VAR 0 1
44332: PUSH
44333: LD_VAR 0 1
44337: PPUSH
44338: LD_VAR 0 4
44342: PPUSH
44343: CALL_OW 3
44347: ST_TO_ADDR
// end ;
44348: GO 44272
44350: POP
44351: POP
// end ;
44352: LD_VAR 0 2
44356: RET
// export function GetBaseMaterials ( base ) ; begin
44357: LD_INT 0
44359: PPUSH
// result := [ 0 , 0 , 0 ] ;
44360: LD_ADDR_VAR 0 2
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 0
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: LIST
44378: ST_TO_ADDR
// if not base then
44379: LD_VAR 0 1
44383: NOT
44384: IFFALSE 44388
// exit ;
44386: GO 44437
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
44388: LD_ADDR_VAR 0 2
44392: PUSH
44393: LD_VAR 0 1
44397: PPUSH
44398: LD_INT 1
44400: PPUSH
44401: CALL_OW 275
44405: PUSH
44406: LD_VAR 0 1
44410: PPUSH
44411: LD_INT 2
44413: PPUSH
44414: CALL_OW 275
44418: PUSH
44419: LD_VAR 0 1
44423: PPUSH
44424: LD_INT 3
44426: PPUSH
44427: CALL_OW 275
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: ST_TO_ADDR
// end ;
44437: LD_VAR 0 2
44441: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
44442: LD_INT 0
44444: PPUSH
44445: PPUSH
// result := array ;
44446: LD_ADDR_VAR 0 3
44450: PUSH
44451: LD_VAR 0 1
44455: ST_TO_ADDR
// if size >= result then
44456: LD_VAR 0 2
44460: PUSH
44461: LD_VAR 0 3
44465: GREATEREQUAL
44466: IFFALSE 44470
// exit ;
44468: GO 44520
// if size then
44470: LD_VAR 0 2
44474: IFFALSE 44520
// for i := array downto size do
44476: LD_ADDR_VAR 0 4
44480: PUSH
44481: DOUBLE
44482: LD_VAR 0 1
44486: INC
44487: ST_TO_ADDR
44488: LD_VAR 0 2
44492: PUSH
44493: FOR_DOWNTO
44494: IFFALSE 44518
// result := Delete ( result , result ) ;
44496: LD_ADDR_VAR 0 3
44500: PUSH
44501: LD_VAR 0 3
44505: PPUSH
44506: LD_VAR 0 3
44510: PPUSH
44511: CALL_OW 3
44515: ST_TO_ADDR
44516: GO 44493
44518: POP
44519: POP
// end ;
44520: LD_VAR 0 3
44524: RET
// export function ComExit ( unit ) ; var tmp ; begin
44525: LD_INT 0
44527: PPUSH
44528: PPUSH
// if not IsInUnit ( unit ) then
44529: LD_VAR 0 1
44533: PPUSH
44534: CALL_OW 310
44538: NOT
44539: IFFALSE 44543
// exit ;
44541: GO 44603
// tmp := IsInUnit ( unit ) ;
44543: LD_ADDR_VAR 0 3
44547: PUSH
44548: LD_VAR 0 1
44552: PPUSH
44553: CALL_OW 310
44557: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
44558: LD_VAR 0 3
44562: PPUSH
44563: CALL_OW 247
44567: PUSH
44568: LD_INT 2
44570: EQUAL
44571: IFFALSE 44584
// ComExitVehicle ( unit ) else
44573: LD_VAR 0 1
44577: PPUSH
44578: CALL_OW 121
44582: GO 44593
// ComExitBuilding ( unit ) ;
44584: LD_VAR 0 1
44588: PPUSH
44589: CALL_OW 122
// result := tmp ;
44593: LD_ADDR_VAR 0 2
44597: PUSH
44598: LD_VAR 0 3
44602: ST_TO_ADDR
// end ;
44603: LD_VAR 0 2
44607: RET
// export function ComExitAll ( units ) ; var i ; begin
44608: LD_INT 0
44610: PPUSH
44611: PPUSH
// if not units then
44612: LD_VAR 0 1
44616: NOT
44617: IFFALSE 44621
// exit ;
44619: GO 44647
// for i in units do
44621: LD_ADDR_VAR 0 3
44625: PUSH
44626: LD_VAR 0 1
44630: PUSH
44631: FOR_IN
44632: IFFALSE 44645
// ComExit ( i ) ;
44634: LD_VAR 0 3
44638: PPUSH
44639: CALL 44525 0 1
44643: GO 44631
44645: POP
44646: POP
// end ;
44647: LD_VAR 0 2
44651: RET
// export function ResetHc ; begin
44652: LD_INT 0
44654: PPUSH
// InitHc ;
44655: CALL_OW 19
// hc_importance := 0 ;
44659: LD_ADDR_OWVAR 32
44663: PUSH
44664: LD_INT 0
44666: ST_TO_ADDR
// end ;
44667: LD_VAR 0 1
44671: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
44672: LD_INT 0
44674: PPUSH
44675: PPUSH
44676: PPUSH
// _x := ( x1 + x2 ) div 2 ;
44677: LD_ADDR_VAR 0 6
44681: PUSH
44682: LD_VAR 0 1
44686: PUSH
44687: LD_VAR 0 3
44691: PLUS
44692: PUSH
44693: LD_INT 2
44695: DIV
44696: ST_TO_ADDR
// if _x < 0 then
44697: LD_VAR 0 6
44701: PUSH
44702: LD_INT 0
44704: LESS
44705: IFFALSE 44722
// _x := _x * - 1 ;
44707: LD_ADDR_VAR 0 6
44711: PUSH
44712: LD_VAR 0 6
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: MUL
44721: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
44722: LD_ADDR_VAR 0 7
44726: PUSH
44727: LD_VAR 0 2
44731: PUSH
44732: LD_VAR 0 4
44736: PLUS
44737: PUSH
44738: LD_INT 2
44740: DIV
44741: ST_TO_ADDR
// if _y < 0 then
44742: LD_VAR 0 7
44746: PUSH
44747: LD_INT 0
44749: LESS
44750: IFFALSE 44767
// _y := _y * - 1 ;
44752: LD_ADDR_VAR 0 7
44756: PUSH
44757: LD_VAR 0 7
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: MUL
44766: ST_TO_ADDR
// result := [ _x , _y ] ;
44767: LD_ADDR_VAR 0 5
44771: PUSH
44772: LD_VAR 0 6
44776: PUSH
44777: LD_VAR 0 7
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// end ;
44786: LD_VAR 0 5
44790: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
44791: LD_INT 0
44793: PPUSH
44794: PPUSH
44795: PPUSH
44796: PPUSH
// task := GetTaskList ( unit ) ;
44797: LD_ADDR_VAR 0 7
44801: PUSH
44802: LD_VAR 0 1
44806: PPUSH
44807: CALL_OW 437
44811: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
44812: LD_VAR 0 7
44816: NOT
44817: PUSH
44818: LD_VAR 0 1
44822: PPUSH
44823: LD_VAR 0 2
44827: PPUSH
44828: CALL_OW 308
44832: NOT
44833: AND
44834: IFFALSE 44838
// exit ;
44836: GO 44956
// if IsInArea ( unit , area ) then
44838: LD_VAR 0 1
44842: PPUSH
44843: LD_VAR 0 2
44847: PPUSH
44848: CALL_OW 308
44852: IFFALSE 44870
// begin ComMoveToArea ( unit , goAway ) ;
44854: LD_VAR 0 1
44858: PPUSH
44859: LD_VAR 0 3
44863: PPUSH
44864: CALL_OW 113
// exit ;
44868: GO 44956
// end ; if task [ 1 ] [ 1 ] <> M then
44870: LD_VAR 0 7
44874: PUSH
44875: LD_INT 1
44877: ARRAY
44878: PUSH
44879: LD_INT 1
44881: ARRAY
44882: PUSH
44883: LD_STRING M
44885: NONEQUAL
44886: IFFALSE 44890
// exit ;
44888: GO 44956
// x := task [ 1 ] [ 2 ] ;
44890: LD_ADDR_VAR 0 5
44894: PUSH
44895: LD_VAR 0 7
44899: PUSH
44900: LD_INT 1
44902: ARRAY
44903: PUSH
44904: LD_INT 2
44906: ARRAY
44907: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
44908: LD_ADDR_VAR 0 6
44912: PUSH
44913: LD_VAR 0 7
44917: PUSH
44918: LD_INT 1
44920: ARRAY
44921: PUSH
44922: LD_INT 3
44924: ARRAY
44925: ST_TO_ADDR
// if InArea ( x , y , area ) then
44926: LD_VAR 0 5
44930: PPUSH
44931: LD_VAR 0 6
44935: PPUSH
44936: LD_VAR 0 2
44940: PPUSH
44941: CALL_OW 309
44945: IFFALSE 44956
// ComStop ( unit ) ;
44947: LD_VAR 0 1
44951: PPUSH
44952: CALL_OW 141
// end ;
44956: LD_VAR 0 4
44960: RET
// export function Abs ( value ) ; begin
44961: LD_INT 0
44963: PPUSH
// result := value ;
44964: LD_ADDR_VAR 0 2
44968: PUSH
44969: LD_VAR 0 1
44973: ST_TO_ADDR
// if value < 0 then
44974: LD_VAR 0 1
44978: PUSH
44979: LD_INT 0
44981: LESS
44982: IFFALSE 44999
// result := value * - 1 ;
44984: LD_ADDR_VAR 0 2
44988: PUSH
44989: LD_VAR 0 1
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: MUL
44998: ST_TO_ADDR
// end ;
44999: LD_VAR 0 2
45003: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
45004: LD_INT 0
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
// if not unit or not building then
45014: LD_VAR 0 1
45018: NOT
45019: PUSH
45020: LD_VAR 0 2
45024: NOT
45025: OR
45026: IFFALSE 45030
// exit ;
45028: GO 45256
// x := GetX ( building ) ;
45030: LD_ADDR_VAR 0 4
45034: PUSH
45035: LD_VAR 0 2
45039: PPUSH
45040: CALL_OW 250
45044: ST_TO_ADDR
// y := GetY ( building ) ;
45045: LD_ADDR_VAR 0 6
45049: PUSH
45050: LD_VAR 0 2
45054: PPUSH
45055: CALL_OW 251
45059: ST_TO_ADDR
// d := GetDir ( building ) ;
45060: LD_ADDR_VAR 0 8
45064: PUSH
45065: LD_VAR 0 2
45069: PPUSH
45070: CALL_OW 254
45074: ST_TO_ADDR
// r := 4 ;
45075: LD_ADDR_VAR 0 9
45079: PUSH
45080: LD_INT 4
45082: ST_TO_ADDR
// for i := 1 to 5 do
45083: LD_ADDR_VAR 0 10
45087: PUSH
45088: DOUBLE
45089: LD_INT 1
45091: DEC
45092: ST_TO_ADDR
45093: LD_INT 5
45095: PUSH
45096: FOR_TO
45097: IFFALSE 45254
// begin _x := ShiftX ( x , d , r + i ) ;
45099: LD_ADDR_VAR 0 5
45103: PUSH
45104: LD_VAR 0 4
45108: PPUSH
45109: LD_VAR 0 8
45113: PPUSH
45114: LD_VAR 0 9
45118: PUSH
45119: LD_VAR 0 10
45123: PLUS
45124: PPUSH
45125: CALL_OW 272
45129: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
45130: LD_ADDR_VAR 0 7
45134: PUSH
45135: LD_VAR 0 6
45139: PPUSH
45140: LD_VAR 0 8
45144: PPUSH
45145: LD_VAR 0 9
45149: PUSH
45150: LD_VAR 0 10
45154: PLUS
45155: PPUSH
45156: CALL_OW 273
45160: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
45161: LD_VAR 0 5
45165: PPUSH
45166: LD_VAR 0 7
45170: PPUSH
45171: CALL_OW 488
45175: PUSH
45176: LD_VAR 0 5
45180: PPUSH
45181: LD_VAR 0 7
45185: PPUSH
45186: CALL_OW 428
45190: PPUSH
45191: CALL_OW 247
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: IN
45206: NOT
45207: AND
45208: IFFALSE 45252
// begin ComMoveXY ( unit , _x , _y ) ;
45210: LD_VAR 0 1
45214: PPUSH
45215: LD_VAR 0 5
45219: PPUSH
45220: LD_VAR 0 7
45224: PPUSH
45225: CALL_OW 111
// result := [ _x , _y ] ;
45229: LD_ADDR_VAR 0 3
45233: PUSH
45234: LD_VAR 0 5
45238: PUSH
45239: LD_VAR 0 7
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: ST_TO_ADDR
// exit ;
45248: POP
45249: POP
45250: GO 45256
// end ; end ;
45252: GO 45096
45254: POP
45255: POP
// end ;
45256: LD_VAR 0 3
45260: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
45261: LD_INT 0
45263: PPUSH
45264: PPUSH
45265: PPUSH
// result := 0 ;
45266: LD_ADDR_VAR 0 3
45270: PUSH
45271: LD_INT 0
45273: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
45274: LD_VAR 0 1
45278: PUSH
45279: LD_INT 0
45281: LESS
45282: PUSH
45283: LD_VAR 0 1
45287: PUSH
45288: LD_INT 8
45290: GREATER
45291: OR
45292: PUSH
45293: LD_VAR 0 2
45297: PUSH
45298: LD_INT 0
45300: LESS
45301: OR
45302: PUSH
45303: LD_VAR 0 2
45307: PUSH
45308: LD_INT 8
45310: GREATER
45311: OR
45312: IFFALSE 45316
// exit ;
45314: GO 45391
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
45316: LD_ADDR_VAR 0 4
45320: PUSH
45321: LD_INT 22
45323: PUSH
45324: LD_VAR 0 2
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PPUSH
45333: CALL_OW 69
45337: PUSH
45338: FOR_IN
45339: IFFALSE 45389
// begin un := UnitShoot ( i ) ;
45341: LD_ADDR_VAR 0 5
45345: PUSH
45346: LD_VAR 0 4
45350: PPUSH
45351: CALL_OW 504
45355: ST_TO_ADDR
// if GetSide ( un ) = side1 then
45356: LD_VAR 0 5
45360: PPUSH
45361: CALL_OW 255
45365: PUSH
45366: LD_VAR 0 1
45370: EQUAL
45371: IFFALSE 45387
// begin result := un ;
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: LD_VAR 0 5
45382: ST_TO_ADDR
// exit ;
45383: POP
45384: POP
45385: GO 45391
// end ; end ;
45387: GO 45338
45389: POP
45390: POP
// end ;
45391: LD_VAR 0 3
45395: RET
// export function GetCargoBay ( units ) ; begin
45396: LD_INT 0
45398: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: LD_INT 2
45411: PUSH
45412: LD_INT 34
45414: PUSH
45415: LD_INT 12
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 34
45424: PUSH
45425: LD_INT 51
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 34
45434: PUSH
45435: LD_INT 32
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 34
45444: PUSH
45445: LD_INT 89
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: PPUSH
45459: CALL_OW 72
45463: ST_TO_ADDR
// end ;
45464: LD_VAR 0 2
45468: RET
// export function Negate ( value ) ; begin
45469: LD_INT 0
45471: PPUSH
// result := not value ;
45472: LD_ADDR_VAR 0 2
45476: PUSH
45477: LD_VAR 0 1
45481: NOT
45482: ST_TO_ADDR
// end ;
45483: LD_VAR 0 2
45487: RET
// export function Inc ( value ) ; begin
45488: LD_INT 0
45490: PPUSH
// result := value + 1 ;
45491: LD_ADDR_VAR 0 2
45495: PUSH
45496: LD_VAR 0 1
45500: PUSH
45501: LD_INT 1
45503: PLUS
45504: ST_TO_ADDR
// end ;
45505: LD_VAR 0 2
45509: RET
// export function Dec ( value ) ; begin
45510: LD_INT 0
45512: PPUSH
// result := value - 1 ;
45513: LD_ADDR_VAR 0 2
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 1
45525: MINUS
45526: ST_TO_ADDR
// end ;
45527: LD_VAR 0 2
45531: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
45532: LD_INT 0
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
45541: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
45542: LD_VAR 0 1
45546: PPUSH
45547: LD_VAR 0 2
45551: PPUSH
45552: CALL_OW 488
45556: NOT
45557: PUSH
45558: LD_VAR 0 3
45562: PPUSH
45563: LD_VAR 0 4
45567: PPUSH
45568: CALL_OW 488
45572: NOT
45573: OR
45574: IFFALSE 45587
// begin result := - 1 ;
45576: LD_ADDR_VAR 0 5
45580: PUSH
45581: LD_INT 1
45583: NEG
45584: ST_TO_ADDR
// exit ;
45585: GO 45822
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
45587: LD_ADDR_VAR 0 12
45591: PUSH
45592: LD_VAR 0 1
45596: PPUSH
45597: LD_VAR 0 2
45601: PPUSH
45602: LD_VAR 0 3
45606: PPUSH
45607: LD_VAR 0 4
45611: PPUSH
45612: CALL 44672 0 4
45616: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
45617: LD_ADDR_VAR 0 11
45621: PUSH
45622: LD_VAR 0 1
45626: PPUSH
45627: LD_VAR 0 2
45631: PPUSH
45632: LD_VAR 0 12
45636: PUSH
45637: LD_INT 1
45639: ARRAY
45640: PPUSH
45641: LD_VAR 0 12
45645: PUSH
45646: LD_INT 2
45648: ARRAY
45649: PPUSH
45650: CALL_OW 298
45654: ST_TO_ADDR
// distance := 9999 ;
45655: LD_ADDR_VAR 0 10
45659: PUSH
45660: LD_INT 9999
45662: ST_TO_ADDR
// for i := 0 to 5 do
45663: LD_ADDR_VAR 0 6
45667: PUSH
45668: DOUBLE
45669: LD_INT 0
45671: DEC
45672: ST_TO_ADDR
45673: LD_INT 5
45675: PUSH
45676: FOR_TO
45677: IFFALSE 45820
// begin _x := ShiftX ( x1 , i , centerDist ) ;
45679: LD_ADDR_VAR 0 7
45683: PUSH
45684: LD_VAR 0 1
45688: PPUSH
45689: LD_VAR 0 6
45693: PPUSH
45694: LD_VAR 0 11
45698: PPUSH
45699: CALL_OW 272
45703: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
45704: LD_ADDR_VAR 0 8
45708: PUSH
45709: LD_VAR 0 2
45713: PPUSH
45714: LD_VAR 0 6
45718: PPUSH
45719: LD_VAR 0 11
45723: PPUSH
45724: CALL_OW 273
45728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45729: LD_VAR 0 7
45733: PPUSH
45734: LD_VAR 0 8
45738: PPUSH
45739: CALL_OW 488
45743: NOT
45744: IFFALSE 45748
// continue ;
45746: GO 45676
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
45748: LD_ADDR_VAR 0 9
45752: PUSH
45753: LD_VAR 0 12
45757: PUSH
45758: LD_INT 1
45760: ARRAY
45761: PPUSH
45762: LD_VAR 0 12
45766: PUSH
45767: LD_INT 2
45769: ARRAY
45770: PPUSH
45771: LD_VAR 0 7
45775: PPUSH
45776: LD_VAR 0 8
45780: PPUSH
45781: CALL_OW 298
45785: ST_TO_ADDR
// if tmp < distance then
45786: LD_VAR 0 9
45790: PUSH
45791: LD_VAR 0 10
45795: LESS
45796: IFFALSE 45818
// begin result := i ;
45798: LD_ADDR_VAR 0 5
45802: PUSH
45803: LD_VAR 0 6
45807: ST_TO_ADDR
// distance := tmp ;
45808: LD_ADDR_VAR 0 10
45812: PUSH
45813: LD_VAR 0 9
45817: ST_TO_ADDR
// end ; end ;
45818: GO 45676
45820: POP
45821: POP
// end ;
45822: LD_VAR 0 5
45826: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45827: LD_INT 0
45829: PPUSH
45830: PPUSH
// if not driver or not IsInUnit ( driver ) then
45831: LD_VAR 0 1
45835: NOT
45836: PUSH
45837: LD_VAR 0 1
45841: PPUSH
45842: CALL_OW 310
45846: NOT
45847: OR
45848: IFFALSE 45852
// exit ;
45850: GO 45942
// vehicle := IsInUnit ( driver ) ;
45852: LD_ADDR_VAR 0 3
45856: PUSH
45857: LD_VAR 0 1
45861: PPUSH
45862: CALL_OW 310
45866: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45867: LD_VAR 0 1
45871: PPUSH
45872: LD_STRING \
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: PUSH
45902: LD_STRING E
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_VAR 0 3
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: LD_INT 0
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PPUSH
45938: CALL_OW 446
// end ;
45942: LD_VAR 0 2
45946: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
45947: LD_INT 0
45949: PPUSH
45950: PPUSH
// if not driver or not IsInUnit ( driver ) then
45951: LD_VAR 0 1
45955: NOT
45956: PUSH
45957: LD_VAR 0 1
45961: PPUSH
45962: CALL_OW 310
45966: NOT
45967: OR
45968: IFFALSE 45972
// exit ;
45970: GO 46062
// vehicle := IsInUnit ( driver ) ;
45972: LD_ADDR_VAR 0 3
45976: PUSH
45977: LD_VAR 0 1
45981: PPUSH
45982: CALL_OW 310
45986: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
45987: LD_VAR 0 1
45991: PPUSH
45992: LD_STRING \
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: LD_INT 0
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 0
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: PUSH
46022: LD_STRING E
46024: PUSH
46025: LD_INT 0
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_VAR 0 3
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PPUSH
46058: CALL_OW 447
// end ;
46062: LD_VAR 0 2
46066: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
46067: LD_INT 0
46069: PPUSH
46070: PPUSH
46071: PPUSH
// tmp := [ ] ;
46072: LD_ADDR_VAR 0 5
46076: PUSH
46077: EMPTY
46078: ST_TO_ADDR
// for i in units do
46079: LD_ADDR_VAR 0 4
46083: PUSH
46084: LD_VAR 0 1
46088: PUSH
46089: FOR_IN
46090: IFFALSE 46128
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
46092: LD_ADDR_VAR 0 5
46096: PUSH
46097: LD_VAR 0 5
46101: PPUSH
46102: LD_VAR 0 5
46106: PUSH
46107: LD_INT 1
46109: PLUS
46110: PPUSH
46111: LD_VAR 0 4
46115: PPUSH
46116: CALL_OW 256
46120: PPUSH
46121: CALL_OW 2
46125: ST_TO_ADDR
46126: GO 46089
46128: POP
46129: POP
// if not tmp then
46130: LD_VAR 0 5
46134: NOT
46135: IFFALSE 46139
// exit ;
46137: GO 46187
// if asc then
46139: LD_VAR 0 2
46143: IFFALSE 46167
// result := SortListByListAsc ( units , tmp ) else
46145: LD_ADDR_VAR 0 3
46149: PUSH
46150: LD_VAR 0 1
46154: PPUSH
46155: LD_VAR 0 5
46159: PPUSH
46160: CALL_OW 76
46164: ST_TO_ADDR
46165: GO 46187
// result := SortListByListDesc ( units , tmp ) ;
46167: LD_ADDR_VAR 0 3
46171: PUSH
46172: LD_VAR 0 1
46176: PPUSH
46177: LD_VAR 0 5
46181: PPUSH
46182: CALL_OW 77
46186: ST_TO_ADDR
// end ;
46187: LD_VAR 0 3
46191: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
46192: LD_INT 0
46194: PPUSH
46195: PPUSH
// task := GetTaskList ( mech ) ;
46196: LD_ADDR_VAR 0 4
46200: PUSH
46201: LD_VAR 0 1
46205: PPUSH
46206: CALL_OW 437
46210: ST_TO_ADDR
// if not task then
46211: LD_VAR 0 4
46215: NOT
46216: IFFALSE 46220
// exit ;
46218: GO 46262
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
46220: LD_ADDR_VAR 0 3
46224: PUSH
46225: LD_VAR 0 4
46229: PUSH
46230: LD_INT 1
46232: ARRAY
46233: PUSH
46234: LD_INT 1
46236: ARRAY
46237: PUSH
46238: LD_STRING r
46240: EQUAL
46241: PUSH
46242: LD_VAR 0 4
46246: PUSH
46247: LD_INT 1
46249: ARRAY
46250: PUSH
46251: LD_INT 4
46253: ARRAY
46254: PUSH
46255: LD_VAR 0 2
46259: EQUAL
46260: AND
46261: ST_TO_ADDR
// end ;
46262: LD_VAR 0 3
46266: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
46267: LD_INT 0
46269: PPUSH
// SetDir ( unit , d ) ;
46270: LD_VAR 0 1
46274: PPUSH
46275: LD_VAR 0 4
46279: PPUSH
46280: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
46284: LD_VAR 0 1
46288: PPUSH
46289: LD_VAR 0 2
46293: PPUSH
46294: LD_VAR 0 3
46298: PPUSH
46299: LD_VAR 0 5
46303: PPUSH
46304: CALL_OW 48
// end ;
46308: LD_VAR 0 6
46312: RET
// export function ToNaturalNumber ( number ) ; begin
46313: LD_INT 0
46315: PPUSH
// result := number div 1 ;
46316: LD_ADDR_VAR 0 2
46320: PUSH
46321: LD_VAR 0 1
46325: PUSH
46326: LD_INT 1
46328: DIV
46329: ST_TO_ADDR
// if number < 0 then
46330: LD_VAR 0 1
46334: PUSH
46335: LD_INT 0
46337: LESS
46338: IFFALSE 46348
// result := 0 ;
46340: LD_ADDR_VAR 0 2
46344: PUSH
46345: LD_INT 0
46347: ST_TO_ADDR
// end ;
46348: LD_VAR 0 2
46352: RET
// export function SortByClass ( units , class ) ; var un ; begin
46353: LD_INT 0
46355: PPUSH
46356: PPUSH
// if not units or not class then
46357: LD_VAR 0 1
46361: NOT
46362: PUSH
46363: LD_VAR 0 2
46367: NOT
46368: OR
46369: IFFALSE 46373
// exit ;
46371: GO 46468
// result := [ ] ;
46373: LD_ADDR_VAR 0 3
46377: PUSH
46378: EMPTY
46379: ST_TO_ADDR
// for un in units do
46380: LD_ADDR_VAR 0 4
46384: PUSH
46385: LD_VAR 0 1
46389: PUSH
46390: FOR_IN
46391: IFFALSE 46466
// if GetClass ( un ) = class then
46393: LD_VAR 0 4
46397: PPUSH
46398: CALL_OW 257
46402: PUSH
46403: LD_VAR 0 2
46407: EQUAL
46408: IFFALSE 46435
// result := Insert ( result , 1 , un ) else
46410: LD_ADDR_VAR 0 3
46414: PUSH
46415: LD_VAR 0 3
46419: PPUSH
46420: LD_INT 1
46422: PPUSH
46423: LD_VAR 0 4
46427: PPUSH
46428: CALL_OW 2
46432: ST_TO_ADDR
46433: GO 46464
// result := Replace ( result , result + 1 , un ) ;
46435: LD_ADDR_VAR 0 3
46439: PUSH
46440: LD_VAR 0 3
46444: PPUSH
46445: LD_VAR 0 3
46449: PUSH
46450: LD_INT 1
46452: PLUS
46453: PPUSH
46454: LD_VAR 0 4
46458: PPUSH
46459: CALL_OW 1
46463: ST_TO_ADDR
46464: GO 46390
46466: POP
46467: POP
// end ;
46468: LD_VAR 0 3
46472: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
46473: LD_INT 0
46475: PPUSH
46476: PPUSH
46477: PPUSH
46478: PPUSH
46479: PPUSH
46480: PPUSH
46481: PPUSH
// result := [ ] ;
46482: LD_ADDR_VAR 0 4
46486: PUSH
46487: EMPTY
46488: ST_TO_ADDR
// if x - r < 0 then
46489: LD_VAR 0 1
46493: PUSH
46494: LD_VAR 0 3
46498: MINUS
46499: PUSH
46500: LD_INT 0
46502: LESS
46503: IFFALSE 46515
// min_x := 0 else
46505: LD_ADDR_VAR 0 8
46509: PUSH
46510: LD_INT 0
46512: ST_TO_ADDR
46513: GO 46531
// min_x := x - r ;
46515: LD_ADDR_VAR 0 8
46519: PUSH
46520: LD_VAR 0 1
46524: PUSH
46525: LD_VAR 0 3
46529: MINUS
46530: ST_TO_ADDR
// if y - r < 0 then
46531: LD_VAR 0 2
46535: PUSH
46536: LD_VAR 0 3
46540: MINUS
46541: PUSH
46542: LD_INT 0
46544: LESS
46545: IFFALSE 46557
// min_y := 0 else
46547: LD_ADDR_VAR 0 7
46551: PUSH
46552: LD_INT 0
46554: ST_TO_ADDR
46555: GO 46573
// min_y := y - r ;
46557: LD_ADDR_VAR 0 7
46561: PUSH
46562: LD_VAR 0 2
46566: PUSH
46567: LD_VAR 0 3
46571: MINUS
46572: ST_TO_ADDR
// max_x := x + r ;
46573: LD_ADDR_VAR 0 9
46577: PUSH
46578: LD_VAR 0 1
46582: PUSH
46583: LD_VAR 0 3
46587: PLUS
46588: ST_TO_ADDR
// max_y := y + r ;
46589: LD_ADDR_VAR 0 10
46593: PUSH
46594: LD_VAR 0 2
46598: PUSH
46599: LD_VAR 0 3
46603: PLUS
46604: ST_TO_ADDR
// for _x = min_x to max_x do
46605: LD_ADDR_VAR 0 5
46609: PUSH
46610: DOUBLE
46611: LD_VAR 0 8
46615: DEC
46616: ST_TO_ADDR
46617: LD_VAR 0 9
46621: PUSH
46622: FOR_TO
46623: IFFALSE 46724
// for _y = min_y to max_y do
46625: LD_ADDR_VAR 0 6
46629: PUSH
46630: DOUBLE
46631: LD_VAR 0 7
46635: DEC
46636: ST_TO_ADDR
46637: LD_VAR 0 10
46641: PUSH
46642: FOR_TO
46643: IFFALSE 46720
// begin if not ValidHex ( _x , _y ) then
46645: LD_VAR 0 5
46649: PPUSH
46650: LD_VAR 0 6
46654: PPUSH
46655: CALL_OW 488
46659: NOT
46660: IFFALSE 46664
// continue ;
46662: GO 46642
// if GetResourceTypeXY ( _x , _y ) then
46664: LD_VAR 0 5
46668: PPUSH
46669: LD_VAR 0 6
46673: PPUSH
46674: CALL_OW 283
46678: IFFALSE 46718
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
46680: LD_ADDR_VAR 0 4
46684: PUSH
46685: LD_VAR 0 4
46689: PPUSH
46690: LD_VAR 0 4
46694: PUSH
46695: LD_INT 1
46697: PLUS
46698: PPUSH
46699: LD_VAR 0 5
46703: PUSH
46704: LD_VAR 0 6
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PPUSH
46713: CALL_OW 1
46717: ST_TO_ADDR
// end ;
46718: GO 46642
46720: POP
46721: POP
46722: GO 46622
46724: POP
46725: POP
// end ;
46726: LD_VAR 0 4
46730: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
46731: LD_INT 0
46733: PPUSH
46734: PPUSH
46735: PPUSH
46736: PPUSH
46737: PPUSH
46738: PPUSH
46739: PPUSH
46740: PPUSH
// if not units then
46741: LD_VAR 0 1
46745: NOT
46746: IFFALSE 46750
// exit ;
46748: GO 47274
// result := UnitFilter ( units , [ f_ok ] ) ;
46750: LD_ADDR_VAR 0 3
46754: PUSH
46755: LD_VAR 0 1
46759: PPUSH
46760: LD_INT 50
46762: PUSH
46763: EMPTY
46764: LIST
46765: PPUSH
46766: CALL_OW 72
46770: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
46771: LD_ADDR_VAR 0 8
46775: PUSH
46776: LD_VAR 0 1
46780: PUSH
46781: LD_INT 1
46783: ARRAY
46784: PPUSH
46785: CALL_OW 255
46789: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
46790: LD_ADDR_VAR 0 10
46794: PUSH
46795: LD_INT 29
46797: PUSH
46798: LD_INT 91
46800: PUSH
46801: LD_INT 49
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// if not result then
46809: LD_VAR 0 3
46813: NOT
46814: IFFALSE 46818
// exit ;
46816: GO 47274
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
46818: LD_ADDR_VAR 0 5
46822: PUSH
46823: LD_INT 81
46825: PUSH
46826: LD_VAR 0 8
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PPUSH
46835: CALL_OW 69
46839: ST_TO_ADDR
// for i in result do
46840: LD_ADDR_VAR 0 4
46844: PUSH
46845: LD_VAR 0 3
46849: PUSH
46850: FOR_IN
46851: IFFALSE 47272
// begin tag := GetTag ( i ) + 1 ;
46853: LD_ADDR_VAR 0 9
46857: PUSH
46858: LD_VAR 0 4
46862: PPUSH
46863: CALL_OW 110
46867: PUSH
46868: LD_INT 1
46870: PLUS
46871: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
46872: LD_ADDR_VAR 0 7
46876: PUSH
46877: LD_VAR 0 4
46881: PPUSH
46882: CALL_OW 250
46886: PPUSH
46887: LD_VAR 0 4
46891: PPUSH
46892: CALL_OW 251
46896: PPUSH
46897: LD_INT 6
46899: PPUSH
46900: CALL 46473 0 3
46904: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
46905: LD_VAR 0 4
46909: PPUSH
46910: CALL_OW 247
46914: PUSH
46915: LD_INT 2
46917: EQUAL
46918: PUSH
46919: LD_VAR 0 7
46923: AND
46924: PUSH
46925: LD_VAR 0 4
46929: PPUSH
46930: CALL_OW 264
46934: PUSH
46935: LD_VAR 0 10
46939: IN
46940: NOT
46941: AND
46942: IFFALSE 46981
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
46944: LD_VAR 0 4
46948: PPUSH
46949: LD_VAR 0 7
46953: PUSH
46954: LD_INT 1
46956: ARRAY
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: PPUSH
46962: LD_VAR 0 7
46966: PUSH
46967: LD_INT 1
46969: ARRAY
46970: PUSH
46971: LD_INT 2
46973: ARRAY
46974: PPUSH
46975: CALL_OW 116
46979: GO 47270
// if path > tag then
46981: LD_VAR 0 2
46985: PUSH
46986: LD_VAR 0 9
46990: GREATER
46991: IFFALSE 47199
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
46993: LD_ADDR_VAR 0 6
46997: PUSH
46998: LD_VAR 0 5
47002: PPUSH
47003: LD_INT 91
47005: PUSH
47006: LD_VAR 0 4
47010: PUSH
47011: LD_INT 8
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: PPUSH
47019: CALL_OW 72
47023: ST_TO_ADDR
// if nearEnemy then
47024: LD_VAR 0 6
47028: IFFALSE 47097
// begin if GetWeapon ( i ) = ru_time_lapser then
47030: LD_VAR 0 4
47034: PPUSH
47035: CALL_OW 264
47039: PUSH
47040: LD_INT 49
47042: EQUAL
47043: IFFALSE 47071
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
47045: LD_VAR 0 4
47049: PPUSH
47050: LD_VAR 0 6
47054: PPUSH
47055: LD_VAR 0 4
47059: PPUSH
47060: CALL_OW 74
47064: PPUSH
47065: CALL_OW 112
47069: GO 47095
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
47071: LD_VAR 0 4
47075: PPUSH
47076: LD_VAR 0 6
47080: PPUSH
47081: LD_VAR 0 4
47085: PPUSH
47086: CALL_OW 74
47090: PPUSH
47091: CALL 48199 0 2
// end else
47095: GO 47197
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
47097: LD_VAR 0 4
47101: PPUSH
47102: LD_VAR 0 2
47106: PUSH
47107: LD_VAR 0 9
47111: ARRAY
47112: PUSH
47113: LD_INT 1
47115: ARRAY
47116: PPUSH
47117: LD_VAR 0 2
47121: PUSH
47122: LD_VAR 0 9
47126: ARRAY
47127: PUSH
47128: LD_INT 2
47130: ARRAY
47131: PPUSH
47132: CALL_OW 297
47136: PUSH
47137: LD_INT 6
47139: GREATER
47140: IFFALSE 47183
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
47142: LD_VAR 0 4
47146: PPUSH
47147: LD_VAR 0 2
47151: PUSH
47152: LD_VAR 0 9
47156: ARRAY
47157: PUSH
47158: LD_INT 1
47160: ARRAY
47161: PPUSH
47162: LD_VAR 0 2
47166: PUSH
47167: LD_VAR 0 9
47171: ARRAY
47172: PUSH
47173: LD_INT 2
47175: ARRAY
47176: PPUSH
47177: CALL_OW 114
47181: GO 47197
// SetTag ( i , tag ) ;
47183: LD_VAR 0 4
47187: PPUSH
47188: LD_VAR 0 9
47192: PPUSH
47193: CALL_OW 109
// end else
47197: GO 47270
// if enemy then
47199: LD_VAR 0 5
47203: IFFALSE 47270
// begin if GetWeapon ( i ) = ru_time_lapser then
47205: LD_VAR 0 4
47209: PPUSH
47210: CALL_OW 264
47214: PUSH
47215: LD_INT 49
47217: EQUAL
47218: IFFALSE 47246
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
47220: LD_VAR 0 4
47224: PPUSH
47225: LD_VAR 0 5
47229: PPUSH
47230: LD_VAR 0 4
47234: PPUSH
47235: CALL_OW 74
47239: PPUSH
47240: CALL_OW 112
47244: GO 47270
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
47246: LD_VAR 0 4
47250: PPUSH
47251: LD_VAR 0 5
47255: PPUSH
47256: LD_VAR 0 4
47260: PPUSH
47261: CALL_OW 74
47265: PPUSH
47266: CALL 48199 0 2
// end ; end ;
47270: GO 46850
47272: POP
47273: POP
// end ;
47274: LD_VAR 0 3
47278: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
47279: LD_INT 0
47281: PPUSH
47282: PPUSH
47283: PPUSH
// if not unit or IsInUnit ( unit ) then
47284: LD_VAR 0 1
47288: NOT
47289: PUSH
47290: LD_VAR 0 1
47294: PPUSH
47295: CALL_OW 310
47299: OR
47300: IFFALSE 47304
// exit ;
47302: GO 47395
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
47304: LD_ADDR_VAR 0 4
47308: PUSH
47309: LD_VAR 0 1
47313: PPUSH
47314: CALL_OW 250
47318: PPUSH
47319: LD_VAR 0 2
47323: PPUSH
47324: LD_INT 1
47326: PPUSH
47327: CALL_OW 272
47331: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
47332: LD_ADDR_VAR 0 5
47336: PUSH
47337: LD_VAR 0 1
47341: PPUSH
47342: CALL_OW 251
47346: PPUSH
47347: LD_VAR 0 2
47351: PPUSH
47352: LD_INT 1
47354: PPUSH
47355: CALL_OW 273
47359: ST_TO_ADDR
// if ValidHex ( x , y ) then
47360: LD_VAR 0 4
47364: PPUSH
47365: LD_VAR 0 5
47369: PPUSH
47370: CALL_OW 488
47374: IFFALSE 47395
// ComTurnXY ( unit , x , y ) ;
47376: LD_VAR 0 1
47380: PPUSH
47381: LD_VAR 0 4
47385: PPUSH
47386: LD_VAR 0 5
47390: PPUSH
47391: CALL_OW 118
// end ;
47395: LD_VAR 0 3
47399: RET
// export function SeeUnits ( side , units ) ; var i ; begin
47400: LD_INT 0
47402: PPUSH
47403: PPUSH
// result := false ;
47404: LD_ADDR_VAR 0 3
47408: PUSH
47409: LD_INT 0
47411: ST_TO_ADDR
// if not units then
47412: LD_VAR 0 2
47416: NOT
47417: IFFALSE 47421
// exit ;
47419: GO 47466
// for i in units do
47421: LD_ADDR_VAR 0 4
47425: PUSH
47426: LD_VAR 0 2
47430: PUSH
47431: FOR_IN
47432: IFFALSE 47464
// if See ( side , i ) then
47434: LD_VAR 0 1
47438: PPUSH
47439: LD_VAR 0 4
47443: PPUSH
47444: CALL_OW 292
47448: IFFALSE 47462
// begin result := true ;
47450: LD_ADDR_VAR 0 3
47454: PUSH
47455: LD_INT 1
47457: ST_TO_ADDR
// exit ;
47458: POP
47459: POP
47460: GO 47466
// end ;
47462: GO 47431
47464: POP
47465: POP
// end ;
47466: LD_VAR 0 3
47470: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
47471: LD_INT 0
47473: PPUSH
47474: PPUSH
47475: PPUSH
47476: PPUSH
// if not unit or not points then
47477: LD_VAR 0 1
47481: NOT
47482: PUSH
47483: LD_VAR 0 2
47487: NOT
47488: OR
47489: IFFALSE 47493
// exit ;
47491: GO 47583
// dist := 99999 ;
47493: LD_ADDR_VAR 0 5
47497: PUSH
47498: LD_INT 99999
47500: ST_TO_ADDR
// for i in points do
47501: LD_ADDR_VAR 0 4
47505: PUSH
47506: LD_VAR 0 2
47510: PUSH
47511: FOR_IN
47512: IFFALSE 47581
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
47514: LD_ADDR_VAR 0 6
47518: PUSH
47519: LD_VAR 0 1
47523: PPUSH
47524: LD_VAR 0 4
47528: PUSH
47529: LD_INT 1
47531: ARRAY
47532: PPUSH
47533: LD_VAR 0 4
47537: PUSH
47538: LD_INT 2
47540: ARRAY
47541: PPUSH
47542: CALL_OW 297
47546: ST_TO_ADDR
// if tmpDist < dist then
47547: LD_VAR 0 6
47551: PUSH
47552: LD_VAR 0 5
47556: LESS
47557: IFFALSE 47579
// begin result := i ;
47559: LD_ADDR_VAR 0 3
47563: PUSH
47564: LD_VAR 0 4
47568: ST_TO_ADDR
// dist := tmpDist ;
47569: LD_ADDR_VAR 0 5
47573: PUSH
47574: LD_VAR 0 6
47578: ST_TO_ADDR
// end ; end ;
47579: GO 47511
47581: POP
47582: POP
// end ;
47583: LD_VAR 0 3
47587: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
47588: LD_INT 0
47590: PPUSH
// uc_side := side ;
47591: LD_ADDR_OWVAR 20
47595: PUSH
47596: LD_VAR 0 1
47600: ST_TO_ADDR
// uc_nation := 3 ;
47601: LD_ADDR_OWVAR 21
47605: PUSH
47606: LD_INT 3
47608: ST_TO_ADDR
// vc_chassis := 25 ;
47609: LD_ADDR_OWVAR 37
47613: PUSH
47614: LD_INT 25
47616: ST_TO_ADDR
// vc_engine := engine_siberite ;
47617: LD_ADDR_OWVAR 39
47621: PUSH
47622: LD_INT 3
47624: ST_TO_ADDR
// vc_control := control_computer ;
47625: LD_ADDR_OWVAR 38
47629: PUSH
47630: LD_INT 3
47632: ST_TO_ADDR
// vc_weapon := 59 ;
47633: LD_ADDR_OWVAR 40
47637: PUSH
47638: LD_INT 59
47640: ST_TO_ADDR
// result := CreateVehicle ;
47641: LD_ADDR_VAR 0 5
47645: PUSH
47646: CALL_OW 45
47650: ST_TO_ADDR
// SetDir ( result , d ) ;
47651: LD_VAR 0 5
47655: PPUSH
47656: LD_VAR 0 4
47660: PPUSH
47661: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
47665: LD_VAR 0 5
47669: PPUSH
47670: LD_VAR 0 2
47674: PPUSH
47675: LD_VAR 0 3
47679: PPUSH
47680: LD_INT 0
47682: PPUSH
47683: CALL_OW 48
// end ;
47687: LD_VAR 0 5
47691: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
47692: LD_INT 0
47694: PPUSH
47695: PPUSH
47696: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
47697: LD_ADDR_VAR 0 2
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 0
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
47720: LD_VAR 0 1
47724: NOT
47725: PUSH
47726: LD_VAR 0 1
47730: PPUSH
47731: CALL_OW 264
47735: PUSH
47736: LD_INT 12
47738: PUSH
47739: LD_INT 51
47741: PUSH
47742: LD_INT 32
47744: PUSH
47745: LD_INT 89
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: IN
47754: NOT
47755: OR
47756: IFFALSE 47760
// exit ;
47758: GO 47858
// for i := 1 to 3 do
47760: LD_ADDR_VAR 0 3
47764: PUSH
47765: DOUBLE
47766: LD_INT 1
47768: DEC
47769: ST_TO_ADDR
47770: LD_INT 3
47772: PUSH
47773: FOR_TO
47774: IFFALSE 47856
// begin tmp := GetCargo ( cargo , i ) ;
47776: LD_ADDR_VAR 0 4
47780: PUSH
47781: LD_VAR 0 1
47785: PPUSH
47786: LD_VAR 0 3
47790: PPUSH
47791: CALL_OW 289
47795: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
47796: LD_ADDR_VAR 0 2
47800: PUSH
47801: LD_VAR 0 2
47805: PPUSH
47806: LD_VAR 0 3
47810: PPUSH
47811: LD_VAR 0 4
47815: PPUSH
47816: CALL_OW 1
47820: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
47821: LD_ADDR_VAR 0 2
47825: PUSH
47826: LD_VAR 0 2
47830: PPUSH
47831: LD_INT 4
47833: PPUSH
47834: LD_VAR 0 2
47838: PUSH
47839: LD_INT 4
47841: ARRAY
47842: PUSH
47843: LD_VAR 0 4
47847: PLUS
47848: PPUSH
47849: CALL_OW 1
47853: ST_TO_ADDR
// end ;
47854: GO 47773
47856: POP
47857: POP
// end ;
47858: LD_VAR 0 2
47862: RET
// export function Length ( array ) ; begin
47863: LD_INT 0
47865: PPUSH
// result := array + 0 ;
47866: LD_ADDR_VAR 0 2
47870: PUSH
47871: LD_VAR 0 1
47875: PUSH
47876: LD_INT 0
47878: PLUS
47879: ST_TO_ADDR
// end ;
47880: LD_VAR 0 2
47884: RET
// export function PrepareArray ( array ) ; begin
47885: LD_INT 0
47887: PPUSH
// result := array diff 0 ;
47888: LD_ADDR_VAR 0 2
47892: PUSH
47893: LD_VAR 0 1
47897: PUSH
47898: LD_INT 0
47900: DIFF
47901: ST_TO_ADDR
// if not result [ 1 ] then
47902: LD_VAR 0 2
47906: PUSH
47907: LD_INT 1
47909: ARRAY
47910: NOT
47911: IFFALSE 47931
// result := Delete ( result , 1 ) ;
47913: LD_ADDR_VAR 0 2
47917: PUSH
47918: LD_VAR 0 2
47922: PPUSH
47923: LD_INT 1
47925: PPUSH
47926: CALL_OW 3
47930: ST_TO_ADDR
// end ;
47931: LD_VAR 0 2
47935: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
47936: LD_INT 0
47938: PPUSH
47939: PPUSH
47940: PPUSH
47941: PPUSH
// sibRocketRange := 25 ;
47942: LD_ADDR_VAR 0 6
47946: PUSH
47947: LD_INT 25
47949: ST_TO_ADDR
// result := false ;
47950: LD_ADDR_VAR 0 4
47954: PUSH
47955: LD_INT 0
47957: ST_TO_ADDR
// for i := 0 to 5 do
47958: LD_ADDR_VAR 0 5
47962: PUSH
47963: DOUBLE
47964: LD_INT 0
47966: DEC
47967: ST_TO_ADDR
47968: LD_INT 5
47970: PUSH
47971: FOR_TO
47972: IFFALSE 48039
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
47974: LD_VAR 0 1
47978: PPUSH
47979: LD_VAR 0 5
47983: PPUSH
47984: LD_VAR 0 6
47988: PPUSH
47989: CALL_OW 272
47993: PPUSH
47994: LD_VAR 0 2
47998: PPUSH
47999: LD_VAR 0 5
48003: PPUSH
48004: LD_VAR 0 6
48008: PPUSH
48009: CALL_OW 273
48013: PPUSH
48014: LD_VAR 0 3
48018: PPUSH
48019: CALL_OW 309
48023: IFFALSE 48037
// begin result := true ;
48025: LD_ADDR_VAR 0 4
48029: PUSH
48030: LD_INT 1
48032: ST_TO_ADDR
// exit ;
48033: POP
48034: POP
48035: GO 48041
// end ;
48037: GO 47971
48039: POP
48040: POP
// end ;
48041: LD_VAR 0 4
48045: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
48046: LD_INT 0
48048: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
48049: LD_VAR 0 1
48053: PPUSH
48054: LD_VAR 0 2
48058: PPUSH
48059: LD_INT 0
48061: PPUSH
48062: LD_INT 0
48064: PPUSH
48065: LD_INT 1
48067: PPUSH
48068: LD_INT 0
48070: PPUSH
48071: CALL_OW 587
// end ;
48075: LD_VAR 0 3
48079: RET
// export function CenterOnNow ( unit ) ; begin
48080: LD_INT 0
48082: PPUSH
// result := IsInUnit ( unit ) ;
48083: LD_ADDR_VAR 0 2
48087: PUSH
48088: LD_VAR 0 1
48092: PPUSH
48093: CALL_OW 310
48097: ST_TO_ADDR
// if not result then
48098: LD_VAR 0 2
48102: NOT
48103: IFFALSE 48115
// result := unit ;
48105: LD_ADDR_VAR 0 2
48109: PUSH
48110: LD_VAR 0 1
48114: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
48115: LD_VAR 0 1
48119: PPUSH
48120: CALL_OW 87
// end ;
48124: LD_VAR 0 2
48128: RET
// export function ComMoveHex ( unit , hex ) ; begin
48129: LD_INT 0
48131: PPUSH
// if not hex then
48132: LD_VAR 0 2
48136: NOT
48137: IFFALSE 48141
// exit ;
48139: GO 48194
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
48141: LD_VAR 0 2
48145: PUSH
48146: LD_INT 1
48148: ARRAY
48149: PPUSH
48150: LD_VAR 0 2
48154: PUSH
48155: LD_INT 2
48157: ARRAY
48158: PPUSH
48159: CALL_OW 428
48163: IFFALSE 48167
// exit ;
48165: GO 48194
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
48167: LD_VAR 0 1
48171: PPUSH
48172: LD_VAR 0 2
48176: PUSH
48177: LD_INT 1
48179: ARRAY
48180: PPUSH
48181: LD_VAR 0 2
48185: PUSH
48186: LD_INT 2
48188: ARRAY
48189: PPUSH
48190: CALL_OW 111
// end ;
48194: LD_VAR 0 3
48198: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
48199: LD_INT 0
48201: PPUSH
48202: PPUSH
48203: PPUSH
// if not unit or not enemy then
48204: LD_VAR 0 1
48208: NOT
48209: PUSH
48210: LD_VAR 0 2
48214: NOT
48215: OR
48216: IFFALSE 48220
// exit ;
48218: GO 48344
// x := GetX ( enemy ) ;
48220: LD_ADDR_VAR 0 4
48224: PUSH
48225: LD_VAR 0 2
48229: PPUSH
48230: CALL_OW 250
48234: ST_TO_ADDR
// y := GetY ( enemy ) ;
48235: LD_ADDR_VAR 0 5
48239: PUSH
48240: LD_VAR 0 2
48244: PPUSH
48245: CALL_OW 251
48249: ST_TO_ADDR
// if ValidHex ( x , y ) then
48250: LD_VAR 0 4
48254: PPUSH
48255: LD_VAR 0 5
48259: PPUSH
48260: CALL_OW 488
48264: IFFALSE 48344
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
48266: LD_VAR 0 2
48270: PPUSH
48271: CALL_OW 247
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: IN
48286: PUSH
48287: LD_VAR 0 1
48291: PPUSH
48292: CALL_OW 255
48296: PPUSH
48297: LD_VAR 0 2
48301: PPUSH
48302: CALL_OW 292
48306: AND
48307: IFFALSE 48325
// ComAttackUnit ( unit , enemy ) else
48309: LD_VAR 0 1
48313: PPUSH
48314: LD_VAR 0 2
48318: PPUSH
48319: CALL_OW 115
48323: GO 48344
// ComAgressiveMove ( unit , x , y ) ;
48325: LD_VAR 0 1
48329: PPUSH
48330: LD_VAR 0 4
48334: PPUSH
48335: LD_VAR 0 5
48339: PPUSH
48340: CALL_OW 114
// end ; end_of_file end_of_file
48344: LD_VAR 0 3
48348: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
48349: LD_VAR 0 1
48353: PPUSH
48354: LD_VAR 0 2
48358: PPUSH
48359: LD_VAR 0 3
48363: PPUSH
48364: LD_VAR 0 4
48368: PPUSH
48369: LD_VAR 0 5
48373: PPUSH
48374: LD_VAR 0 6
48378: PPUSH
48379: CALL 48563 0 6
// end ;
48383: PPOPN 6
48385: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
48386: LD_INT 0
48388: PPUSH
// begin if not units then
48389: LD_VAR 0 1
48393: NOT
48394: IFFALSE 48398
// exit ;
48396: GO 48398
// end ;
48398: PPOPN 7
48400: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
48401: CALL 48467 0 0
// end ; end_of_file
48405: PPOPN 1
48407: END
// export globalGameSaveCounter ; every 0 0$1 do
48408: GO 48410
48410: DISABLE
// begin enable ;
48411: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
48412: LD_STRING updateTimer(
48414: PUSH
48415: LD_OWVAR 1
48419: STR
48420: PUSH
48421: LD_STRING );
48423: STR
48424: PPUSH
48425: CALL_OW 559
// end ;
48429: END
// every 0 0$1 do
48430: GO 48432
48432: DISABLE
// begin globalGameSaveCounter := 0 ;
48433: LD_ADDR_EXP 29
48437: PUSH
48438: LD_INT 0
48440: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
48441: LD_STRING setGameSaveCounter(0)
48443: PPUSH
48444: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
48448: LD_STRING initStreamRollete();
48450: PPUSH
48451: CALL_OW 559
// InitStreamMode ;
48455: CALL 49781 0 0
// DefineStreamItems ( false ) ;
48459: LD_INT 0
48461: PPUSH
48462: CALL 50245 0 1
// end ;
48466: END
// export function SOS_MapStart ( ) ; begin
48467: LD_INT 0
48469: PPUSH
// if streamModeActive then
48470: LD_EXP 30
48474: IFFALSE 48483
// DefineStreamItems ( true ) ;
48476: LD_INT 1
48478: PPUSH
48479: CALL 50245 0 1
// UpdateLuaVariables ( ) ;
48483: CALL 48500 0 0
// UpdateFactoryWaypoints ( ) ;
48487: CALL 63114 0 0
// UpdateWarehouseGatheringPoints ( ) ;
48491: CALL 63371 0 0
// end ;
48495: LD_VAR 0 1
48499: RET
// function UpdateLuaVariables ( ) ; begin
48500: LD_INT 0
48502: PPUSH
// if globalGameSaveCounter then
48503: LD_EXP 29
48507: IFFALSE 48541
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
48509: LD_ADDR_EXP 29
48513: PUSH
48514: LD_EXP 29
48518: PPUSH
48519: CALL 45488 0 1
48523: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
48524: LD_STRING setGameSaveCounter(
48526: PUSH
48527: LD_EXP 29
48531: STR
48532: PUSH
48533: LD_STRING )
48535: STR
48536: PPUSH
48537: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
48541: LD_STRING setGameDifficulty(
48543: PUSH
48544: LD_OWVAR 67
48548: STR
48549: PUSH
48550: LD_STRING )
48552: STR
48553: PPUSH
48554: CALL_OW 559
// end ;
48558: LD_VAR 0 1
48562: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
48563: LD_INT 0
48565: PPUSH
// if p2 = stream_mode then
48566: LD_VAR 0 2
48570: PUSH
48571: LD_INT 100
48573: EQUAL
48574: IFFALSE 49577
// begin if not StreamModeActive then
48576: LD_EXP 30
48580: NOT
48581: IFFALSE 48591
// StreamModeActive := true ;
48583: LD_ADDR_EXP 30
48587: PUSH
48588: LD_INT 1
48590: ST_TO_ADDR
// if p3 = 0 then
48591: LD_VAR 0 3
48595: PUSH
48596: LD_INT 0
48598: EQUAL
48599: IFFALSE 48605
// InitStreamMode ;
48601: CALL 49781 0 0
// if p3 = 1 then
48605: LD_VAR 0 3
48609: PUSH
48610: LD_INT 1
48612: EQUAL
48613: IFFALSE 48623
// sRocket := true ;
48615: LD_ADDR_EXP 35
48619: PUSH
48620: LD_INT 1
48622: ST_TO_ADDR
// if p3 = 2 then
48623: LD_VAR 0 3
48627: PUSH
48628: LD_INT 2
48630: EQUAL
48631: IFFALSE 48641
// sSpeed := true ;
48633: LD_ADDR_EXP 34
48637: PUSH
48638: LD_INT 1
48640: ST_TO_ADDR
// if p3 = 3 then
48641: LD_VAR 0 3
48645: PUSH
48646: LD_INT 3
48648: EQUAL
48649: IFFALSE 48659
// sEngine := true ;
48651: LD_ADDR_EXP 36
48655: PUSH
48656: LD_INT 1
48658: ST_TO_ADDR
// if p3 = 4 then
48659: LD_VAR 0 3
48663: PUSH
48664: LD_INT 4
48666: EQUAL
48667: IFFALSE 48677
// sSpec := true ;
48669: LD_ADDR_EXP 33
48673: PUSH
48674: LD_INT 1
48676: ST_TO_ADDR
// if p3 = 5 then
48677: LD_VAR 0 3
48681: PUSH
48682: LD_INT 5
48684: EQUAL
48685: IFFALSE 48695
// sLevel := true ;
48687: LD_ADDR_EXP 37
48691: PUSH
48692: LD_INT 1
48694: ST_TO_ADDR
// if p3 = 6 then
48695: LD_VAR 0 3
48699: PUSH
48700: LD_INT 6
48702: EQUAL
48703: IFFALSE 48713
// sArmoury := true ;
48705: LD_ADDR_EXP 38
48709: PUSH
48710: LD_INT 1
48712: ST_TO_ADDR
// if p3 = 7 then
48713: LD_VAR 0 3
48717: PUSH
48718: LD_INT 7
48720: EQUAL
48721: IFFALSE 48731
// sRadar := true ;
48723: LD_ADDR_EXP 39
48727: PUSH
48728: LD_INT 1
48730: ST_TO_ADDR
// if p3 = 8 then
48731: LD_VAR 0 3
48735: PUSH
48736: LD_INT 8
48738: EQUAL
48739: IFFALSE 48749
// sBunker := true ;
48741: LD_ADDR_EXP 40
48745: PUSH
48746: LD_INT 1
48748: ST_TO_ADDR
// if p3 = 9 then
48749: LD_VAR 0 3
48753: PUSH
48754: LD_INT 9
48756: EQUAL
48757: IFFALSE 48767
// sHack := true ;
48759: LD_ADDR_EXP 41
48763: PUSH
48764: LD_INT 1
48766: ST_TO_ADDR
// if p3 = 10 then
48767: LD_VAR 0 3
48771: PUSH
48772: LD_INT 10
48774: EQUAL
48775: IFFALSE 48785
// sFire := true ;
48777: LD_ADDR_EXP 42
48781: PUSH
48782: LD_INT 1
48784: ST_TO_ADDR
// if p3 = 11 then
48785: LD_VAR 0 3
48789: PUSH
48790: LD_INT 11
48792: EQUAL
48793: IFFALSE 48803
// sRefresh := true ;
48795: LD_ADDR_EXP 43
48799: PUSH
48800: LD_INT 1
48802: ST_TO_ADDR
// if p3 = 12 then
48803: LD_VAR 0 3
48807: PUSH
48808: LD_INT 12
48810: EQUAL
48811: IFFALSE 48821
// sExp := true ;
48813: LD_ADDR_EXP 44
48817: PUSH
48818: LD_INT 1
48820: ST_TO_ADDR
// if p3 = 13 then
48821: LD_VAR 0 3
48825: PUSH
48826: LD_INT 13
48828: EQUAL
48829: IFFALSE 48839
// sDepot := true ;
48831: LD_ADDR_EXP 45
48835: PUSH
48836: LD_INT 1
48838: ST_TO_ADDR
// if p3 = 14 then
48839: LD_VAR 0 3
48843: PUSH
48844: LD_INT 14
48846: EQUAL
48847: IFFALSE 48857
// sFlag := true ;
48849: LD_ADDR_EXP 46
48853: PUSH
48854: LD_INT 1
48856: ST_TO_ADDR
// if p3 = 15 then
48857: LD_VAR 0 3
48861: PUSH
48862: LD_INT 15
48864: EQUAL
48865: IFFALSE 48875
// sKamikadze := true ;
48867: LD_ADDR_EXP 54
48871: PUSH
48872: LD_INT 1
48874: ST_TO_ADDR
// if p3 = 16 then
48875: LD_VAR 0 3
48879: PUSH
48880: LD_INT 16
48882: EQUAL
48883: IFFALSE 48893
// sTroll := true ;
48885: LD_ADDR_EXP 55
48889: PUSH
48890: LD_INT 1
48892: ST_TO_ADDR
// if p3 = 17 then
48893: LD_VAR 0 3
48897: PUSH
48898: LD_INT 17
48900: EQUAL
48901: IFFALSE 48911
// sSlow := true ;
48903: LD_ADDR_EXP 56
48907: PUSH
48908: LD_INT 1
48910: ST_TO_ADDR
// if p3 = 18 then
48911: LD_VAR 0 3
48915: PUSH
48916: LD_INT 18
48918: EQUAL
48919: IFFALSE 48929
// sLack := true ;
48921: LD_ADDR_EXP 57
48925: PUSH
48926: LD_INT 1
48928: ST_TO_ADDR
// if p3 = 19 then
48929: LD_VAR 0 3
48933: PUSH
48934: LD_INT 19
48936: EQUAL
48937: IFFALSE 48947
// sTank := true ;
48939: LD_ADDR_EXP 59
48943: PUSH
48944: LD_INT 1
48946: ST_TO_ADDR
// if p3 = 20 then
48947: LD_VAR 0 3
48951: PUSH
48952: LD_INT 20
48954: EQUAL
48955: IFFALSE 48965
// sRemote := true ;
48957: LD_ADDR_EXP 60
48961: PUSH
48962: LD_INT 1
48964: ST_TO_ADDR
// if p3 = 21 then
48965: LD_VAR 0 3
48969: PUSH
48970: LD_INT 21
48972: EQUAL
48973: IFFALSE 48983
// sPowell := true ;
48975: LD_ADDR_EXP 61
48979: PUSH
48980: LD_INT 1
48982: ST_TO_ADDR
// if p3 = 22 then
48983: LD_VAR 0 3
48987: PUSH
48988: LD_INT 22
48990: EQUAL
48991: IFFALSE 49001
// sTeleport := true ;
48993: LD_ADDR_EXP 64
48997: PUSH
48998: LD_INT 1
49000: ST_TO_ADDR
// if p3 = 23 then
49001: LD_VAR 0 3
49005: PUSH
49006: LD_INT 23
49008: EQUAL
49009: IFFALSE 49019
// sOilTower := true ;
49011: LD_ADDR_EXP 66
49015: PUSH
49016: LD_INT 1
49018: ST_TO_ADDR
// if p3 = 24 then
49019: LD_VAR 0 3
49023: PUSH
49024: LD_INT 24
49026: EQUAL
49027: IFFALSE 49037
// sShovel := true ;
49029: LD_ADDR_EXP 67
49033: PUSH
49034: LD_INT 1
49036: ST_TO_ADDR
// if p3 = 25 then
49037: LD_VAR 0 3
49041: PUSH
49042: LD_INT 25
49044: EQUAL
49045: IFFALSE 49055
// sSheik := true ;
49047: LD_ADDR_EXP 68
49051: PUSH
49052: LD_INT 1
49054: ST_TO_ADDR
// if p3 = 26 then
49055: LD_VAR 0 3
49059: PUSH
49060: LD_INT 26
49062: EQUAL
49063: IFFALSE 49073
// sEarthquake := true ;
49065: LD_ADDR_EXP 70
49069: PUSH
49070: LD_INT 1
49072: ST_TO_ADDR
// if p3 = 27 then
49073: LD_VAR 0 3
49077: PUSH
49078: LD_INT 27
49080: EQUAL
49081: IFFALSE 49091
// sAI := true ;
49083: LD_ADDR_EXP 71
49087: PUSH
49088: LD_INT 1
49090: ST_TO_ADDR
// if p3 = 28 then
49091: LD_VAR 0 3
49095: PUSH
49096: LD_INT 28
49098: EQUAL
49099: IFFALSE 49109
// sCargo := true ;
49101: LD_ADDR_EXP 74
49105: PUSH
49106: LD_INT 1
49108: ST_TO_ADDR
// if p3 = 29 then
49109: LD_VAR 0 3
49113: PUSH
49114: LD_INT 29
49116: EQUAL
49117: IFFALSE 49127
// sDLaser := true ;
49119: LD_ADDR_EXP 75
49123: PUSH
49124: LD_INT 1
49126: ST_TO_ADDR
// if p3 = 30 then
49127: LD_VAR 0 3
49131: PUSH
49132: LD_INT 30
49134: EQUAL
49135: IFFALSE 49145
// sExchange := true ;
49137: LD_ADDR_EXP 76
49141: PUSH
49142: LD_INT 1
49144: ST_TO_ADDR
// if p3 = 31 then
49145: LD_VAR 0 3
49149: PUSH
49150: LD_INT 31
49152: EQUAL
49153: IFFALSE 49163
// sFac := true ;
49155: LD_ADDR_EXP 77
49159: PUSH
49160: LD_INT 1
49162: ST_TO_ADDR
// if p3 = 32 then
49163: LD_VAR 0 3
49167: PUSH
49168: LD_INT 32
49170: EQUAL
49171: IFFALSE 49181
// sPower := true ;
49173: LD_ADDR_EXP 78
49177: PUSH
49178: LD_INT 1
49180: ST_TO_ADDR
// if p3 = 33 then
49181: LD_VAR 0 3
49185: PUSH
49186: LD_INT 33
49188: EQUAL
49189: IFFALSE 49199
// sRandom := true ;
49191: LD_ADDR_EXP 79
49195: PUSH
49196: LD_INT 1
49198: ST_TO_ADDR
// if p3 = 34 then
49199: LD_VAR 0 3
49203: PUSH
49204: LD_INT 34
49206: EQUAL
49207: IFFALSE 49217
// sShield := true ;
49209: LD_ADDR_EXP 80
49213: PUSH
49214: LD_INT 1
49216: ST_TO_ADDR
// if p3 = 35 then
49217: LD_VAR 0 3
49221: PUSH
49222: LD_INT 35
49224: EQUAL
49225: IFFALSE 49235
// sTime := true ;
49227: LD_ADDR_EXP 81
49231: PUSH
49232: LD_INT 1
49234: ST_TO_ADDR
// if p3 = 36 then
49235: LD_VAR 0 3
49239: PUSH
49240: LD_INT 36
49242: EQUAL
49243: IFFALSE 49253
// sTools := true ;
49245: LD_ADDR_EXP 82
49249: PUSH
49250: LD_INT 1
49252: ST_TO_ADDR
// if p3 = 101 then
49253: LD_VAR 0 3
49257: PUSH
49258: LD_INT 101
49260: EQUAL
49261: IFFALSE 49271
// sSold := true ;
49263: LD_ADDR_EXP 47
49267: PUSH
49268: LD_INT 1
49270: ST_TO_ADDR
// if p3 = 102 then
49271: LD_VAR 0 3
49275: PUSH
49276: LD_INT 102
49278: EQUAL
49279: IFFALSE 49289
// sDiff := true ;
49281: LD_ADDR_EXP 48
49285: PUSH
49286: LD_INT 1
49288: ST_TO_ADDR
// if p3 = 103 then
49289: LD_VAR 0 3
49293: PUSH
49294: LD_INT 103
49296: EQUAL
49297: IFFALSE 49307
// sFog := true ;
49299: LD_ADDR_EXP 51
49303: PUSH
49304: LD_INT 1
49306: ST_TO_ADDR
// if p3 = 104 then
49307: LD_VAR 0 3
49311: PUSH
49312: LD_INT 104
49314: EQUAL
49315: IFFALSE 49325
// sReset := true ;
49317: LD_ADDR_EXP 52
49321: PUSH
49322: LD_INT 1
49324: ST_TO_ADDR
// if p3 = 105 then
49325: LD_VAR 0 3
49329: PUSH
49330: LD_INT 105
49332: EQUAL
49333: IFFALSE 49343
// sSun := true ;
49335: LD_ADDR_EXP 53
49339: PUSH
49340: LD_INT 1
49342: ST_TO_ADDR
// if p3 = 106 then
49343: LD_VAR 0 3
49347: PUSH
49348: LD_INT 106
49350: EQUAL
49351: IFFALSE 49361
// sTiger := true ;
49353: LD_ADDR_EXP 49
49357: PUSH
49358: LD_INT 1
49360: ST_TO_ADDR
// if p3 = 107 then
49361: LD_VAR 0 3
49365: PUSH
49366: LD_INT 107
49368: EQUAL
49369: IFFALSE 49379
// sBomb := true ;
49371: LD_ADDR_EXP 50
49375: PUSH
49376: LD_INT 1
49378: ST_TO_ADDR
// if p3 = 108 then
49379: LD_VAR 0 3
49383: PUSH
49384: LD_INT 108
49386: EQUAL
49387: IFFALSE 49397
// sWound := true ;
49389: LD_ADDR_EXP 58
49393: PUSH
49394: LD_INT 1
49396: ST_TO_ADDR
// if p3 = 109 then
49397: LD_VAR 0 3
49401: PUSH
49402: LD_INT 109
49404: EQUAL
49405: IFFALSE 49415
// sBetray := true ;
49407: LD_ADDR_EXP 62
49411: PUSH
49412: LD_INT 1
49414: ST_TO_ADDR
// if p3 = 110 then
49415: LD_VAR 0 3
49419: PUSH
49420: LD_INT 110
49422: EQUAL
49423: IFFALSE 49433
// sContamin := true ;
49425: LD_ADDR_EXP 63
49429: PUSH
49430: LD_INT 1
49432: ST_TO_ADDR
// if p3 = 111 then
49433: LD_VAR 0 3
49437: PUSH
49438: LD_INT 111
49440: EQUAL
49441: IFFALSE 49451
// sOil := true ;
49443: LD_ADDR_EXP 65
49447: PUSH
49448: LD_INT 1
49450: ST_TO_ADDR
// if p3 = 112 then
49451: LD_VAR 0 3
49455: PUSH
49456: LD_INT 112
49458: EQUAL
49459: IFFALSE 49469
// sStu := true ;
49461: LD_ADDR_EXP 69
49465: PUSH
49466: LD_INT 1
49468: ST_TO_ADDR
// if p3 = 113 then
49469: LD_VAR 0 3
49473: PUSH
49474: LD_INT 113
49476: EQUAL
49477: IFFALSE 49487
// sBazooka := true ;
49479: LD_ADDR_EXP 72
49483: PUSH
49484: LD_INT 1
49486: ST_TO_ADDR
// if p3 = 114 then
49487: LD_VAR 0 3
49491: PUSH
49492: LD_INT 114
49494: EQUAL
49495: IFFALSE 49505
// sMortar := true ;
49497: LD_ADDR_EXP 73
49501: PUSH
49502: LD_INT 1
49504: ST_TO_ADDR
// if p3 = 115 then
49505: LD_VAR 0 3
49509: PUSH
49510: LD_INT 115
49512: EQUAL
49513: IFFALSE 49523
// sRanger := true ;
49515: LD_ADDR_EXP 83
49519: PUSH
49520: LD_INT 1
49522: ST_TO_ADDR
// if p3 = 116 then
49523: LD_VAR 0 3
49527: PUSH
49528: LD_INT 116
49530: EQUAL
49531: IFFALSE 49541
// sComputer := true ;
49533: LD_ADDR_EXP 84
49537: PUSH
49538: LD_INT 1
49540: ST_TO_ADDR
// if p3 = 117 then
49541: LD_VAR 0 3
49545: PUSH
49546: LD_INT 117
49548: EQUAL
49549: IFFALSE 49559
// s30 := true ;
49551: LD_ADDR_EXP 85
49555: PUSH
49556: LD_INT 1
49558: ST_TO_ADDR
// if p3 = 118 then
49559: LD_VAR 0 3
49563: PUSH
49564: LD_INT 118
49566: EQUAL
49567: IFFALSE 49577
// s60 := true ;
49569: LD_ADDR_EXP 86
49573: PUSH
49574: LD_INT 1
49576: ST_TO_ADDR
// end ; if p2 = hack_mode then
49577: LD_VAR 0 2
49581: PUSH
49582: LD_INT 101
49584: EQUAL
49585: IFFALSE 49713
// begin case p3 of 1 :
49587: LD_VAR 0 3
49591: PUSH
49592: LD_INT 1
49594: DOUBLE
49595: EQUAL
49596: IFTRUE 49600
49598: GO 49607
49600: POP
// hHackUnlimitedResources ; 2 :
49601: CALL 61860 0 0
49605: GO 49713
49607: LD_INT 2
49609: DOUBLE
49610: EQUAL
49611: IFTRUE 49615
49613: GO 49622
49615: POP
// hHackSetLevel10 ; 3 :
49616: CALL 61993 0 0
49620: GO 49713
49622: LD_INT 3
49624: DOUBLE
49625: EQUAL
49626: IFTRUE 49630
49628: GO 49637
49630: POP
// hHackSetLevel10YourUnits ; 4 :
49631: CALL 62078 0 0
49635: GO 49713
49637: LD_INT 4
49639: DOUBLE
49640: EQUAL
49641: IFTRUE 49645
49643: GO 49652
49645: POP
// hHackInvincible ; 5 :
49646: CALL 62526 0 0
49650: GO 49713
49652: LD_INT 5
49654: DOUBLE
49655: EQUAL
49656: IFTRUE 49660
49658: GO 49667
49660: POP
// hHackInvisible ; 6 :
49661: CALL 62637 0 0
49665: GO 49713
49667: LD_INT 6
49669: DOUBLE
49670: EQUAL
49671: IFTRUE 49675
49673: GO 49682
49675: POP
// hHackChangeYourSide ; 7 :
49676: CALL 62694 0 0
49680: GO 49713
49682: LD_INT 7
49684: DOUBLE
49685: EQUAL
49686: IFTRUE 49690
49688: GO 49697
49690: POP
// hHackChangeUnitSide ; 8 :
49691: CALL 62736 0 0
49695: GO 49713
49697: LD_INT 8
49699: DOUBLE
49700: EQUAL
49701: IFTRUE 49705
49703: GO 49712
49705: POP
// hHackFog ; end ;
49706: CALL 62837 0 0
49710: GO 49713
49712: POP
// end ; if p2 = game_save_mode then
49713: LD_VAR 0 2
49717: PUSH
49718: LD_INT 102
49720: EQUAL
49721: IFFALSE 49776
// begin if p3 = 1 then
49723: LD_VAR 0 3
49727: PUSH
49728: LD_INT 1
49730: EQUAL
49731: IFFALSE 49743
// globalGameSaveCounter := p4 ;
49733: LD_ADDR_EXP 29
49737: PUSH
49738: LD_VAR 0 4
49742: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
49743: LD_VAR 0 3
49747: PUSH
49748: LD_INT 2
49750: EQUAL
49751: PUSH
49752: LD_EXP 29
49756: AND
49757: IFFALSE 49776
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
49759: LD_STRING setGameSaveCounter(
49761: PUSH
49762: LD_EXP 29
49766: STR
49767: PUSH
49768: LD_STRING )
49770: STR
49771: PPUSH
49772: CALL_OW 559
// end ; end ;
49776: LD_VAR 0 7
49780: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
49781: LD_INT 0
49783: PPUSH
// streamModeActive := false ;
49784: LD_ADDR_EXP 30
49788: PUSH
49789: LD_INT 0
49791: ST_TO_ADDR
// normalCounter := 36 ;
49792: LD_ADDR_EXP 31
49796: PUSH
49797: LD_INT 36
49799: ST_TO_ADDR
// hardcoreCounter := 18 ;
49800: LD_ADDR_EXP 32
49804: PUSH
49805: LD_INT 18
49807: ST_TO_ADDR
// sRocket := false ;
49808: LD_ADDR_EXP 35
49812: PUSH
49813: LD_INT 0
49815: ST_TO_ADDR
// sSpeed := false ;
49816: LD_ADDR_EXP 34
49820: PUSH
49821: LD_INT 0
49823: ST_TO_ADDR
// sEngine := false ;
49824: LD_ADDR_EXP 36
49828: PUSH
49829: LD_INT 0
49831: ST_TO_ADDR
// sSpec := false ;
49832: LD_ADDR_EXP 33
49836: PUSH
49837: LD_INT 0
49839: ST_TO_ADDR
// sLevel := false ;
49840: LD_ADDR_EXP 37
49844: PUSH
49845: LD_INT 0
49847: ST_TO_ADDR
// sArmoury := false ;
49848: LD_ADDR_EXP 38
49852: PUSH
49853: LD_INT 0
49855: ST_TO_ADDR
// sRadar := false ;
49856: LD_ADDR_EXP 39
49860: PUSH
49861: LD_INT 0
49863: ST_TO_ADDR
// sBunker := false ;
49864: LD_ADDR_EXP 40
49868: PUSH
49869: LD_INT 0
49871: ST_TO_ADDR
// sHack := false ;
49872: LD_ADDR_EXP 41
49876: PUSH
49877: LD_INT 0
49879: ST_TO_ADDR
// sFire := false ;
49880: LD_ADDR_EXP 42
49884: PUSH
49885: LD_INT 0
49887: ST_TO_ADDR
// sRefresh := false ;
49888: LD_ADDR_EXP 43
49892: PUSH
49893: LD_INT 0
49895: ST_TO_ADDR
// sExp := false ;
49896: LD_ADDR_EXP 44
49900: PUSH
49901: LD_INT 0
49903: ST_TO_ADDR
// sDepot := false ;
49904: LD_ADDR_EXP 45
49908: PUSH
49909: LD_INT 0
49911: ST_TO_ADDR
// sFlag := false ;
49912: LD_ADDR_EXP 46
49916: PUSH
49917: LD_INT 0
49919: ST_TO_ADDR
// sKamikadze := false ;
49920: LD_ADDR_EXP 54
49924: PUSH
49925: LD_INT 0
49927: ST_TO_ADDR
// sTroll := false ;
49928: LD_ADDR_EXP 55
49932: PUSH
49933: LD_INT 0
49935: ST_TO_ADDR
// sSlow := false ;
49936: LD_ADDR_EXP 56
49940: PUSH
49941: LD_INT 0
49943: ST_TO_ADDR
// sLack := false ;
49944: LD_ADDR_EXP 57
49948: PUSH
49949: LD_INT 0
49951: ST_TO_ADDR
// sTank := false ;
49952: LD_ADDR_EXP 59
49956: PUSH
49957: LD_INT 0
49959: ST_TO_ADDR
// sRemote := false ;
49960: LD_ADDR_EXP 60
49964: PUSH
49965: LD_INT 0
49967: ST_TO_ADDR
// sPowell := false ;
49968: LD_ADDR_EXP 61
49972: PUSH
49973: LD_INT 0
49975: ST_TO_ADDR
// sTeleport := false ;
49976: LD_ADDR_EXP 64
49980: PUSH
49981: LD_INT 0
49983: ST_TO_ADDR
// sOilTower := false ;
49984: LD_ADDR_EXP 66
49988: PUSH
49989: LD_INT 0
49991: ST_TO_ADDR
// sShovel := false ;
49992: LD_ADDR_EXP 67
49996: PUSH
49997: LD_INT 0
49999: ST_TO_ADDR
// sSheik := false ;
50000: LD_ADDR_EXP 68
50004: PUSH
50005: LD_INT 0
50007: ST_TO_ADDR
// sEarthquake := false ;
50008: LD_ADDR_EXP 70
50012: PUSH
50013: LD_INT 0
50015: ST_TO_ADDR
// sAI := false ;
50016: LD_ADDR_EXP 71
50020: PUSH
50021: LD_INT 0
50023: ST_TO_ADDR
// sCargo := false ;
50024: LD_ADDR_EXP 74
50028: PUSH
50029: LD_INT 0
50031: ST_TO_ADDR
// sDLaser := false ;
50032: LD_ADDR_EXP 75
50036: PUSH
50037: LD_INT 0
50039: ST_TO_ADDR
// sExchange := false ;
50040: LD_ADDR_EXP 76
50044: PUSH
50045: LD_INT 0
50047: ST_TO_ADDR
// sFac := false ;
50048: LD_ADDR_EXP 77
50052: PUSH
50053: LD_INT 0
50055: ST_TO_ADDR
// sPower := false ;
50056: LD_ADDR_EXP 78
50060: PUSH
50061: LD_INT 0
50063: ST_TO_ADDR
// sRandom := false ;
50064: LD_ADDR_EXP 79
50068: PUSH
50069: LD_INT 0
50071: ST_TO_ADDR
// sShield := false ;
50072: LD_ADDR_EXP 80
50076: PUSH
50077: LD_INT 0
50079: ST_TO_ADDR
// sTime := false ;
50080: LD_ADDR_EXP 81
50084: PUSH
50085: LD_INT 0
50087: ST_TO_ADDR
// sTools := false ;
50088: LD_ADDR_EXP 82
50092: PUSH
50093: LD_INT 0
50095: ST_TO_ADDR
// sSold := false ;
50096: LD_ADDR_EXP 47
50100: PUSH
50101: LD_INT 0
50103: ST_TO_ADDR
// sDiff := false ;
50104: LD_ADDR_EXP 48
50108: PUSH
50109: LD_INT 0
50111: ST_TO_ADDR
// sFog := false ;
50112: LD_ADDR_EXP 51
50116: PUSH
50117: LD_INT 0
50119: ST_TO_ADDR
// sReset := false ;
50120: LD_ADDR_EXP 52
50124: PUSH
50125: LD_INT 0
50127: ST_TO_ADDR
// sSun := false ;
50128: LD_ADDR_EXP 53
50132: PUSH
50133: LD_INT 0
50135: ST_TO_ADDR
// sTiger := false ;
50136: LD_ADDR_EXP 49
50140: PUSH
50141: LD_INT 0
50143: ST_TO_ADDR
// sBomb := false ;
50144: LD_ADDR_EXP 50
50148: PUSH
50149: LD_INT 0
50151: ST_TO_ADDR
// sWound := false ;
50152: LD_ADDR_EXP 58
50156: PUSH
50157: LD_INT 0
50159: ST_TO_ADDR
// sBetray := false ;
50160: LD_ADDR_EXP 62
50164: PUSH
50165: LD_INT 0
50167: ST_TO_ADDR
// sContamin := false ;
50168: LD_ADDR_EXP 63
50172: PUSH
50173: LD_INT 0
50175: ST_TO_ADDR
// sOil := false ;
50176: LD_ADDR_EXP 65
50180: PUSH
50181: LD_INT 0
50183: ST_TO_ADDR
// sStu := false ;
50184: LD_ADDR_EXP 69
50188: PUSH
50189: LD_INT 0
50191: ST_TO_ADDR
// sBazooka := false ;
50192: LD_ADDR_EXP 72
50196: PUSH
50197: LD_INT 0
50199: ST_TO_ADDR
// sMortar := false ;
50200: LD_ADDR_EXP 73
50204: PUSH
50205: LD_INT 0
50207: ST_TO_ADDR
// sRanger := false ;
50208: LD_ADDR_EXP 83
50212: PUSH
50213: LD_INT 0
50215: ST_TO_ADDR
// sComputer := false ;
50216: LD_ADDR_EXP 84
50220: PUSH
50221: LD_INT 0
50223: ST_TO_ADDR
// s30 := false ;
50224: LD_ADDR_EXP 85
50228: PUSH
50229: LD_INT 0
50231: ST_TO_ADDR
// s60 := false ;
50232: LD_ADDR_EXP 86
50236: PUSH
50237: LD_INT 0
50239: ST_TO_ADDR
// end ;
50240: LD_VAR 0 1
50244: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
50245: LD_INT 0
50247: PPUSH
50248: PPUSH
50249: PPUSH
50250: PPUSH
50251: PPUSH
50252: PPUSH
50253: PPUSH
// result := [ ] ;
50254: LD_ADDR_VAR 0 2
50258: PUSH
50259: EMPTY
50260: ST_TO_ADDR
// if campaign_id = 1 then
50261: LD_OWVAR 69
50265: PUSH
50266: LD_INT 1
50268: EQUAL
50269: IFFALSE 53435
// begin case mission_number of 1 :
50271: LD_OWVAR 70
50275: PUSH
50276: LD_INT 1
50278: DOUBLE
50279: EQUAL
50280: IFTRUE 50284
50282: GO 50360
50284: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
50285: LD_ADDR_VAR 0 2
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 4
50295: PUSH
50296: LD_INT 11
50298: PUSH
50299: LD_INT 12
50301: PUSH
50302: LD_INT 15
50304: PUSH
50305: LD_INT 16
50307: PUSH
50308: LD_INT 22
50310: PUSH
50311: LD_INT 23
50313: PUSH
50314: LD_INT 26
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 101
50330: PUSH
50331: LD_INT 102
50333: PUSH
50334: LD_INT 106
50336: PUSH
50337: LD_INT 116
50339: PUSH
50340: LD_INT 117
50342: PUSH
50343: LD_INT 118
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: ST_TO_ADDR
50358: GO 53433
50360: LD_INT 2
50362: DOUBLE
50363: EQUAL
50364: IFTRUE 50368
50366: GO 50452
50368: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
50369: LD_ADDR_VAR 0 2
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: LD_INT 4
50379: PUSH
50380: LD_INT 11
50382: PUSH
50383: LD_INT 12
50385: PUSH
50386: LD_INT 15
50388: PUSH
50389: LD_INT 16
50391: PUSH
50392: LD_INT 22
50394: PUSH
50395: LD_INT 23
50397: PUSH
50398: LD_INT 26
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 101
50414: PUSH
50415: LD_INT 102
50417: PUSH
50418: LD_INT 105
50420: PUSH
50421: LD_INT 106
50423: PUSH
50424: LD_INT 108
50426: PUSH
50427: LD_INT 116
50429: PUSH
50430: LD_INT 117
50432: PUSH
50433: LD_INT 118
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: ST_TO_ADDR
50450: GO 53433
50452: LD_INT 3
50454: DOUBLE
50455: EQUAL
50456: IFTRUE 50460
50458: GO 50548
50460: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
50461: LD_ADDR_VAR 0 2
50465: PUSH
50466: LD_INT 2
50468: PUSH
50469: LD_INT 4
50471: PUSH
50472: LD_INT 5
50474: PUSH
50475: LD_INT 11
50477: PUSH
50478: LD_INT 12
50480: PUSH
50481: LD_INT 15
50483: PUSH
50484: LD_INT 16
50486: PUSH
50487: LD_INT 22
50489: PUSH
50490: LD_INT 26
50492: PUSH
50493: LD_INT 36
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 101
50510: PUSH
50511: LD_INT 102
50513: PUSH
50514: LD_INT 105
50516: PUSH
50517: LD_INT 106
50519: PUSH
50520: LD_INT 108
50522: PUSH
50523: LD_INT 116
50525: PUSH
50526: LD_INT 117
50528: PUSH
50529: LD_INT 118
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: ST_TO_ADDR
50546: GO 53433
50548: LD_INT 4
50550: DOUBLE
50551: EQUAL
50552: IFTRUE 50556
50554: GO 50652
50556: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
50557: LD_ADDR_VAR 0 2
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 4
50567: PUSH
50568: LD_INT 5
50570: PUSH
50571: LD_INT 8
50573: PUSH
50574: LD_INT 11
50576: PUSH
50577: LD_INT 12
50579: PUSH
50580: LD_INT 15
50582: PUSH
50583: LD_INT 16
50585: PUSH
50586: LD_INT 22
50588: PUSH
50589: LD_INT 23
50591: PUSH
50592: LD_INT 26
50594: PUSH
50595: LD_INT 36
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 101
50614: PUSH
50615: LD_INT 102
50617: PUSH
50618: LD_INT 105
50620: PUSH
50621: LD_INT 106
50623: PUSH
50624: LD_INT 108
50626: PUSH
50627: LD_INT 116
50629: PUSH
50630: LD_INT 117
50632: PUSH
50633: LD_INT 118
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: ST_TO_ADDR
50650: GO 53433
50652: LD_INT 5
50654: DOUBLE
50655: EQUAL
50656: IFTRUE 50660
50658: GO 50772
50660: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
50661: LD_ADDR_VAR 0 2
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 4
50671: PUSH
50672: LD_INT 5
50674: PUSH
50675: LD_INT 6
50677: PUSH
50678: LD_INT 8
50680: PUSH
50681: LD_INT 11
50683: PUSH
50684: LD_INT 12
50686: PUSH
50687: LD_INT 15
50689: PUSH
50690: LD_INT 16
50692: PUSH
50693: LD_INT 22
50695: PUSH
50696: LD_INT 23
50698: PUSH
50699: LD_INT 25
50701: PUSH
50702: LD_INT 26
50704: PUSH
50705: LD_INT 36
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 101
50726: PUSH
50727: LD_INT 102
50729: PUSH
50730: LD_INT 105
50732: PUSH
50733: LD_INT 106
50735: PUSH
50736: LD_INT 108
50738: PUSH
50739: LD_INT 109
50741: PUSH
50742: LD_INT 112
50744: PUSH
50745: LD_INT 116
50747: PUSH
50748: LD_INT 117
50750: PUSH
50751: LD_INT 118
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: ST_TO_ADDR
50770: GO 53433
50772: LD_INT 6
50774: DOUBLE
50775: EQUAL
50776: IFTRUE 50780
50778: GO 50912
50780: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
50781: LD_ADDR_VAR 0 2
50785: PUSH
50786: LD_INT 2
50788: PUSH
50789: LD_INT 4
50791: PUSH
50792: LD_INT 5
50794: PUSH
50795: LD_INT 6
50797: PUSH
50798: LD_INT 8
50800: PUSH
50801: LD_INT 11
50803: PUSH
50804: LD_INT 12
50806: PUSH
50807: LD_INT 15
50809: PUSH
50810: LD_INT 16
50812: PUSH
50813: LD_INT 20
50815: PUSH
50816: LD_INT 21
50818: PUSH
50819: LD_INT 22
50821: PUSH
50822: LD_INT 23
50824: PUSH
50825: LD_INT 25
50827: PUSH
50828: LD_INT 26
50830: PUSH
50831: LD_INT 30
50833: PUSH
50834: LD_INT 31
50836: PUSH
50837: LD_INT 32
50839: PUSH
50840: LD_INT 36
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 101
50866: PUSH
50867: LD_INT 102
50869: PUSH
50870: LD_INT 105
50872: PUSH
50873: LD_INT 106
50875: PUSH
50876: LD_INT 108
50878: PUSH
50879: LD_INT 109
50881: PUSH
50882: LD_INT 112
50884: PUSH
50885: LD_INT 116
50887: PUSH
50888: LD_INT 117
50890: PUSH
50891: LD_INT 118
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: ST_TO_ADDR
50910: GO 53433
50912: LD_INT 7
50914: DOUBLE
50915: EQUAL
50916: IFTRUE 50920
50918: GO 51032
50920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
50921: LD_ADDR_VAR 0 2
50925: PUSH
50926: LD_INT 2
50928: PUSH
50929: LD_INT 4
50931: PUSH
50932: LD_INT 5
50934: PUSH
50935: LD_INT 7
50937: PUSH
50938: LD_INT 11
50940: PUSH
50941: LD_INT 12
50943: PUSH
50944: LD_INT 15
50946: PUSH
50947: LD_INT 16
50949: PUSH
50950: LD_INT 20
50952: PUSH
50953: LD_INT 21
50955: PUSH
50956: LD_INT 22
50958: PUSH
50959: LD_INT 23
50961: PUSH
50962: LD_INT 25
50964: PUSH
50965: LD_INT 26
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 101
50986: PUSH
50987: LD_INT 102
50989: PUSH
50990: LD_INT 103
50992: PUSH
50993: LD_INT 105
50995: PUSH
50996: LD_INT 106
50998: PUSH
50999: LD_INT 108
51001: PUSH
51002: LD_INT 112
51004: PUSH
51005: LD_INT 116
51007: PUSH
51008: LD_INT 117
51010: PUSH
51011: LD_INT 118
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: ST_TO_ADDR
51030: GO 53433
51032: LD_INT 8
51034: DOUBLE
51035: EQUAL
51036: IFTRUE 51040
51038: GO 51180
51040: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
51041: LD_ADDR_VAR 0 2
51045: PUSH
51046: LD_INT 2
51048: PUSH
51049: LD_INT 4
51051: PUSH
51052: LD_INT 5
51054: PUSH
51055: LD_INT 6
51057: PUSH
51058: LD_INT 7
51060: PUSH
51061: LD_INT 8
51063: PUSH
51064: LD_INT 11
51066: PUSH
51067: LD_INT 12
51069: PUSH
51070: LD_INT 15
51072: PUSH
51073: LD_INT 16
51075: PUSH
51076: LD_INT 20
51078: PUSH
51079: LD_INT 21
51081: PUSH
51082: LD_INT 22
51084: PUSH
51085: LD_INT 23
51087: PUSH
51088: LD_INT 25
51090: PUSH
51091: LD_INT 26
51093: PUSH
51094: LD_INT 30
51096: PUSH
51097: LD_INT 31
51099: PUSH
51100: LD_INT 32
51102: PUSH
51103: LD_INT 36
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 101
51130: PUSH
51131: LD_INT 102
51133: PUSH
51134: LD_INT 103
51136: PUSH
51137: LD_INT 105
51139: PUSH
51140: LD_INT 106
51142: PUSH
51143: LD_INT 108
51145: PUSH
51146: LD_INT 109
51148: PUSH
51149: LD_INT 112
51151: PUSH
51152: LD_INT 116
51154: PUSH
51155: LD_INT 117
51157: PUSH
51158: LD_INT 118
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: ST_TO_ADDR
51178: GO 53433
51180: LD_INT 9
51182: DOUBLE
51183: EQUAL
51184: IFTRUE 51188
51186: GO 51336
51188: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
51189: LD_ADDR_VAR 0 2
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 4
51199: PUSH
51200: LD_INT 5
51202: PUSH
51203: LD_INT 6
51205: PUSH
51206: LD_INT 7
51208: PUSH
51209: LD_INT 8
51211: PUSH
51212: LD_INT 11
51214: PUSH
51215: LD_INT 12
51217: PUSH
51218: LD_INT 15
51220: PUSH
51221: LD_INT 16
51223: PUSH
51224: LD_INT 20
51226: PUSH
51227: LD_INT 21
51229: PUSH
51230: LD_INT 22
51232: PUSH
51233: LD_INT 23
51235: PUSH
51236: LD_INT 25
51238: PUSH
51239: LD_INT 26
51241: PUSH
51242: LD_INT 28
51244: PUSH
51245: LD_INT 30
51247: PUSH
51248: LD_INT 31
51250: PUSH
51251: LD_INT 32
51253: PUSH
51254: LD_INT 36
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 101
51282: PUSH
51283: LD_INT 102
51285: PUSH
51286: LD_INT 103
51288: PUSH
51289: LD_INT 105
51291: PUSH
51292: LD_INT 106
51294: PUSH
51295: LD_INT 108
51297: PUSH
51298: LD_INT 109
51300: PUSH
51301: LD_INT 112
51303: PUSH
51304: LD_INT 114
51306: PUSH
51307: LD_INT 116
51309: PUSH
51310: LD_INT 117
51312: PUSH
51313: LD_INT 118
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: ST_TO_ADDR
51334: GO 53433
51336: LD_INT 10
51338: DOUBLE
51339: EQUAL
51340: IFTRUE 51344
51342: GO 51540
51344: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
51345: LD_ADDR_VAR 0 2
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 4
51355: PUSH
51356: LD_INT 5
51358: PUSH
51359: LD_INT 6
51361: PUSH
51362: LD_INT 7
51364: PUSH
51365: LD_INT 8
51367: PUSH
51368: LD_INT 9
51370: PUSH
51371: LD_INT 10
51373: PUSH
51374: LD_INT 11
51376: PUSH
51377: LD_INT 12
51379: PUSH
51380: LD_INT 13
51382: PUSH
51383: LD_INT 14
51385: PUSH
51386: LD_INT 15
51388: PUSH
51389: LD_INT 16
51391: PUSH
51392: LD_INT 17
51394: PUSH
51395: LD_INT 18
51397: PUSH
51398: LD_INT 19
51400: PUSH
51401: LD_INT 20
51403: PUSH
51404: LD_INT 21
51406: PUSH
51407: LD_INT 22
51409: PUSH
51410: LD_INT 23
51412: PUSH
51413: LD_INT 24
51415: PUSH
51416: LD_INT 25
51418: PUSH
51419: LD_INT 26
51421: PUSH
51422: LD_INT 28
51424: PUSH
51425: LD_INT 30
51427: PUSH
51428: LD_INT 31
51430: PUSH
51431: LD_INT 32
51433: PUSH
51434: LD_INT 36
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 101
51470: PUSH
51471: LD_INT 102
51473: PUSH
51474: LD_INT 103
51476: PUSH
51477: LD_INT 104
51479: PUSH
51480: LD_INT 105
51482: PUSH
51483: LD_INT 106
51485: PUSH
51486: LD_INT 107
51488: PUSH
51489: LD_INT 108
51491: PUSH
51492: LD_INT 109
51494: PUSH
51495: LD_INT 110
51497: PUSH
51498: LD_INT 111
51500: PUSH
51501: LD_INT 112
51503: PUSH
51504: LD_INT 114
51506: PUSH
51507: LD_INT 116
51509: PUSH
51510: LD_INT 117
51512: PUSH
51513: LD_INT 118
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: ST_TO_ADDR
51538: GO 53433
51540: LD_INT 11
51542: DOUBLE
51543: EQUAL
51544: IFTRUE 51548
51546: GO 51752
51548: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
51549: LD_ADDR_VAR 0 2
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: LD_INT 4
51562: PUSH
51563: LD_INT 5
51565: PUSH
51566: LD_INT 6
51568: PUSH
51569: LD_INT 7
51571: PUSH
51572: LD_INT 8
51574: PUSH
51575: LD_INT 9
51577: PUSH
51578: LD_INT 10
51580: PUSH
51581: LD_INT 11
51583: PUSH
51584: LD_INT 12
51586: PUSH
51587: LD_INT 13
51589: PUSH
51590: LD_INT 14
51592: PUSH
51593: LD_INT 15
51595: PUSH
51596: LD_INT 16
51598: PUSH
51599: LD_INT 17
51601: PUSH
51602: LD_INT 18
51604: PUSH
51605: LD_INT 19
51607: PUSH
51608: LD_INT 20
51610: PUSH
51611: LD_INT 21
51613: PUSH
51614: LD_INT 22
51616: PUSH
51617: LD_INT 23
51619: PUSH
51620: LD_INT 24
51622: PUSH
51623: LD_INT 25
51625: PUSH
51626: LD_INT 26
51628: PUSH
51629: LD_INT 28
51631: PUSH
51632: LD_INT 30
51634: PUSH
51635: LD_INT 31
51637: PUSH
51638: LD_INT 32
51640: PUSH
51641: LD_INT 34
51643: PUSH
51644: LD_INT 36
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 101
51682: PUSH
51683: LD_INT 102
51685: PUSH
51686: LD_INT 103
51688: PUSH
51689: LD_INT 104
51691: PUSH
51692: LD_INT 105
51694: PUSH
51695: LD_INT 106
51697: PUSH
51698: LD_INT 107
51700: PUSH
51701: LD_INT 108
51703: PUSH
51704: LD_INT 109
51706: PUSH
51707: LD_INT 110
51709: PUSH
51710: LD_INT 111
51712: PUSH
51713: LD_INT 112
51715: PUSH
51716: LD_INT 114
51718: PUSH
51719: LD_INT 116
51721: PUSH
51722: LD_INT 117
51724: PUSH
51725: LD_INT 118
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: ST_TO_ADDR
51750: GO 53433
51752: LD_INT 12
51754: DOUBLE
51755: EQUAL
51756: IFTRUE 51760
51758: GO 51980
51760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
51761: LD_ADDR_VAR 0 2
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 3
51774: PUSH
51775: LD_INT 4
51777: PUSH
51778: LD_INT 5
51780: PUSH
51781: LD_INT 6
51783: PUSH
51784: LD_INT 7
51786: PUSH
51787: LD_INT 8
51789: PUSH
51790: LD_INT 9
51792: PUSH
51793: LD_INT 10
51795: PUSH
51796: LD_INT 11
51798: PUSH
51799: LD_INT 12
51801: PUSH
51802: LD_INT 13
51804: PUSH
51805: LD_INT 14
51807: PUSH
51808: LD_INT 15
51810: PUSH
51811: LD_INT 16
51813: PUSH
51814: LD_INT 17
51816: PUSH
51817: LD_INT 18
51819: PUSH
51820: LD_INT 19
51822: PUSH
51823: LD_INT 20
51825: PUSH
51826: LD_INT 21
51828: PUSH
51829: LD_INT 22
51831: PUSH
51832: LD_INT 23
51834: PUSH
51835: LD_INT 24
51837: PUSH
51838: LD_INT 25
51840: PUSH
51841: LD_INT 26
51843: PUSH
51844: LD_INT 27
51846: PUSH
51847: LD_INT 28
51849: PUSH
51850: LD_INT 30
51852: PUSH
51853: LD_INT 31
51855: PUSH
51856: LD_INT 32
51858: PUSH
51859: LD_INT 33
51861: PUSH
51862: LD_INT 34
51864: PUSH
51865: LD_INT 36
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 101
51906: PUSH
51907: LD_INT 102
51909: PUSH
51910: LD_INT 103
51912: PUSH
51913: LD_INT 104
51915: PUSH
51916: LD_INT 105
51918: PUSH
51919: LD_INT 106
51921: PUSH
51922: LD_INT 107
51924: PUSH
51925: LD_INT 108
51927: PUSH
51928: LD_INT 109
51930: PUSH
51931: LD_INT 110
51933: PUSH
51934: LD_INT 111
51936: PUSH
51937: LD_INT 112
51939: PUSH
51940: LD_INT 113
51942: PUSH
51943: LD_INT 114
51945: PUSH
51946: LD_INT 116
51948: PUSH
51949: LD_INT 117
51951: PUSH
51952: LD_INT 118
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: ST_TO_ADDR
51978: GO 53433
51980: LD_INT 13
51982: DOUBLE
51983: EQUAL
51984: IFTRUE 51988
51986: GO 52196
51988: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
51989: LD_ADDR_VAR 0 2
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: LD_INT 2
51999: PUSH
52000: LD_INT 3
52002: PUSH
52003: LD_INT 4
52005: PUSH
52006: LD_INT 5
52008: PUSH
52009: LD_INT 8
52011: PUSH
52012: LD_INT 9
52014: PUSH
52015: LD_INT 10
52017: PUSH
52018: LD_INT 11
52020: PUSH
52021: LD_INT 12
52023: PUSH
52024: LD_INT 14
52026: PUSH
52027: LD_INT 15
52029: PUSH
52030: LD_INT 16
52032: PUSH
52033: LD_INT 17
52035: PUSH
52036: LD_INT 18
52038: PUSH
52039: LD_INT 19
52041: PUSH
52042: LD_INT 20
52044: PUSH
52045: LD_INT 21
52047: PUSH
52048: LD_INT 22
52050: PUSH
52051: LD_INT 23
52053: PUSH
52054: LD_INT 24
52056: PUSH
52057: LD_INT 25
52059: PUSH
52060: LD_INT 26
52062: PUSH
52063: LD_INT 27
52065: PUSH
52066: LD_INT 28
52068: PUSH
52069: LD_INT 30
52071: PUSH
52072: LD_INT 31
52074: PUSH
52075: LD_INT 32
52077: PUSH
52078: LD_INT 33
52080: PUSH
52081: LD_INT 34
52083: PUSH
52084: LD_INT 36
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 101
52122: PUSH
52123: LD_INT 102
52125: PUSH
52126: LD_INT 103
52128: PUSH
52129: LD_INT 104
52131: PUSH
52132: LD_INT 105
52134: PUSH
52135: LD_INT 106
52137: PUSH
52138: LD_INT 107
52140: PUSH
52141: LD_INT 108
52143: PUSH
52144: LD_INT 109
52146: PUSH
52147: LD_INT 110
52149: PUSH
52150: LD_INT 111
52152: PUSH
52153: LD_INT 112
52155: PUSH
52156: LD_INT 113
52158: PUSH
52159: LD_INT 114
52161: PUSH
52162: LD_INT 116
52164: PUSH
52165: LD_INT 117
52167: PUSH
52168: LD_INT 118
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: ST_TO_ADDR
52194: GO 53433
52196: LD_INT 14
52198: DOUBLE
52199: EQUAL
52200: IFTRUE 52204
52202: GO 52428
52204: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
52205: LD_ADDR_VAR 0 2
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: LD_INT 4
52221: PUSH
52222: LD_INT 5
52224: PUSH
52225: LD_INT 6
52227: PUSH
52228: LD_INT 7
52230: PUSH
52231: LD_INT 8
52233: PUSH
52234: LD_INT 9
52236: PUSH
52237: LD_INT 10
52239: PUSH
52240: LD_INT 11
52242: PUSH
52243: LD_INT 12
52245: PUSH
52246: LD_INT 13
52248: PUSH
52249: LD_INT 14
52251: PUSH
52252: LD_INT 15
52254: PUSH
52255: LD_INT 16
52257: PUSH
52258: LD_INT 17
52260: PUSH
52261: LD_INT 18
52263: PUSH
52264: LD_INT 19
52266: PUSH
52267: LD_INT 20
52269: PUSH
52270: LD_INT 21
52272: PUSH
52273: LD_INT 22
52275: PUSH
52276: LD_INT 23
52278: PUSH
52279: LD_INT 24
52281: PUSH
52282: LD_INT 25
52284: PUSH
52285: LD_INT 26
52287: PUSH
52288: LD_INT 27
52290: PUSH
52291: LD_INT 28
52293: PUSH
52294: LD_INT 29
52296: PUSH
52297: LD_INT 30
52299: PUSH
52300: LD_INT 31
52302: PUSH
52303: LD_INT 32
52305: PUSH
52306: LD_INT 33
52308: PUSH
52309: LD_INT 34
52311: PUSH
52312: LD_INT 36
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 101
52354: PUSH
52355: LD_INT 102
52357: PUSH
52358: LD_INT 103
52360: PUSH
52361: LD_INT 104
52363: PUSH
52364: LD_INT 105
52366: PUSH
52367: LD_INT 106
52369: PUSH
52370: LD_INT 107
52372: PUSH
52373: LD_INT 108
52375: PUSH
52376: LD_INT 109
52378: PUSH
52379: LD_INT 110
52381: PUSH
52382: LD_INT 111
52384: PUSH
52385: LD_INT 112
52387: PUSH
52388: LD_INT 113
52390: PUSH
52391: LD_INT 114
52393: PUSH
52394: LD_INT 116
52396: PUSH
52397: LD_INT 117
52399: PUSH
52400: LD_INT 118
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: ST_TO_ADDR
52426: GO 53433
52428: LD_INT 15
52430: DOUBLE
52431: EQUAL
52432: IFTRUE 52436
52434: GO 52660
52436: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
52437: LD_ADDR_VAR 0 2
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 4
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: LD_INT 6
52459: PUSH
52460: LD_INT 7
52462: PUSH
52463: LD_INT 8
52465: PUSH
52466: LD_INT 9
52468: PUSH
52469: LD_INT 10
52471: PUSH
52472: LD_INT 11
52474: PUSH
52475: LD_INT 12
52477: PUSH
52478: LD_INT 13
52480: PUSH
52481: LD_INT 14
52483: PUSH
52484: LD_INT 15
52486: PUSH
52487: LD_INT 16
52489: PUSH
52490: LD_INT 17
52492: PUSH
52493: LD_INT 18
52495: PUSH
52496: LD_INT 19
52498: PUSH
52499: LD_INT 20
52501: PUSH
52502: LD_INT 21
52504: PUSH
52505: LD_INT 22
52507: PUSH
52508: LD_INT 23
52510: PUSH
52511: LD_INT 24
52513: PUSH
52514: LD_INT 25
52516: PUSH
52517: LD_INT 26
52519: PUSH
52520: LD_INT 27
52522: PUSH
52523: LD_INT 28
52525: PUSH
52526: LD_INT 29
52528: PUSH
52529: LD_INT 30
52531: PUSH
52532: LD_INT 31
52534: PUSH
52535: LD_INT 32
52537: PUSH
52538: LD_INT 33
52540: PUSH
52541: LD_INT 34
52543: PUSH
52544: LD_INT 36
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 101
52586: PUSH
52587: LD_INT 102
52589: PUSH
52590: LD_INT 103
52592: PUSH
52593: LD_INT 104
52595: PUSH
52596: LD_INT 105
52598: PUSH
52599: LD_INT 106
52601: PUSH
52602: LD_INT 107
52604: PUSH
52605: LD_INT 108
52607: PUSH
52608: LD_INT 109
52610: PUSH
52611: LD_INT 110
52613: PUSH
52614: LD_INT 111
52616: PUSH
52617: LD_INT 112
52619: PUSH
52620: LD_INT 113
52622: PUSH
52623: LD_INT 114
52625: PUSH
52626: LD_INT 116
52628: PUSH
52629: LD_INT 117
52631: PUSH
52632: LD_INT 118
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: ST_TO_ADDR
52658: GO 53433
52660: LD_INT 16
52662: DOUBLE
52663: EQUAL
52664: IFTRUE 52668
52666: GO 52804
52668: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
52669: LD_ADDR_VAR 0 2
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 4
52679: PUSH
52680: LD_INT 5
52682: PUSH
52683: LD_INT 7
52685: PUSH
52686: LD_INT 11
52688: PUSH
52689: LD_INT 12
52691: PUSH
52692: LD_INT 15
52694: PUSH
52695: LD_INT 16
52697: PUSH
52698: LD_INT 20
52700: PUSH
52701: LD_INT 21
52703: PUSH
52704: LD_INT 22
52706: PUSH
52707: LD_INT 23
52709: PUSH
52710: LD_INT 25
52712: PUSH
52713: LD_INT 26
52715: PUSH
52716: LD_INT 30
52718: PUSH
52719: LD_INT 31
52721: PUSH
52722: LD_INT 32
52724: PUSH
52725: LD_INT 33
52727: PUSH
52728: LD_INT 34
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 101
52754: PUSH
52755: LD_INT 102
52757: PUSH
52758: LD_INT 103
52760: PUSH
52761: LD_INT 106
52763: PUSH
52764: LD_INT 108
52766: PUSH
52767: LD_INT 112
52769: PUSH
52770: LD_INT 113
52772: PUSH
52773: LD_INT 114
52775: PUSH
52776: LD_INT 116
52778: PUSH
52779: LD_INT 117
52781: PUSH
52782: LD_INT 118
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: ST_TO_ADDR
52802: GO 53433
52804: LD_INT 17
52806: DOUBLE
52807: EQUAL
52808: IFTRUE 52812
52810: GO 53036
52812: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
52813: LD_ADDR_VAR 0 2
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: LD_INT 3
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: LD_INT 5
52832: PUSH
52833: LD_INT 6
52835: PUSH
52836: LD_INT 7
52838: PUSH
52839: LD_INT 8
52841: PUSH
52842: LD_INT 9
52844: PUSH
52845: LD_INT 10
52847: PUSH
52848: LD_INT 11
52850: PUSH
52851: LD_INT 12
52853: PUSH
52854: LD_INT 13
52856: PUSH
52857: LD_INT 14
52859: PUSH
52860: LD_INT 15
52862: PUSH
52863: LD_INT 16
52865: PUSH
52866: LD_INT 17
52868: PUSH
52869: LD_INT 18
52871: PUSH
52872: LD_INT 19
52874: PUSH
52875: LD_INT 20
52877: PUSH
52878: LD_INT 21
52880: PUSH
52881: LD_INT 22
52883: PUSH
52884: LD_INT 23
52886: PUSH
52887: LD_INT 24
52889: PUSH
52890: LD_INT 25
52892: PUSH
52893: LD_INT 26
52895: PUSH
52896: LD_INT 27
52898: PUSH
52899: LD_INT 28
52901: PUSH
52902: LD_INT 29
52904: PUSH
52905: LD_INT 30
52907: PUSH
52908: LD_INT 31
52910: PUSH
52911: LD_INT 32
52913: PUSH
52914: LD_INT 33
52916: PUSH
52917: LD_INT 34
52919: PUSH
52920: LD_INT 36
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 101
52962: PUSH
52963: LD_INT 102
52965: PUSH
52966: LD_INT 103
52968: PUSH
52969: LD_INT 104
52971: PUSH
52972: LD_INT 105
52974: PUSH
52975: LD_INT 106
52977: PUSH
52978: LD_INT 107
52980: PUSH
52981: LD_INT 108
52983: PUSH
52984: LD_INT 109
52986: PUSH
52987: LD_INT 110
52989: PUSH
52990: LD_INT 111
52992: PUSH
52993: LD_INT 112
52995: PUSH
52996: LD_INT 113
52998: PUSH
52999: LD_INT 114
53001: PUSH
53002: LD_INT 116
53004: PUSH
53005: LD_INT 117
53007: PUSH
53008: LD_INT 118
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: ST_TO_ADDR
53034: GO 53433
53036: LD_INT 18
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53044
53042: GO 53192
53044: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
53045: LD_ADDR_VAR 0 2
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 4
53055: PUSH
53056: LD_INT 5
53058: PUSH
53059: LD_INT 7
53061: PUSH
53062: LD_INT 11
53064: PUSH
53065: LD_INT 12
53067: PUSH
53068: LD_INT 15
53070: PUSH
53071: LD_INT 16
53073: PUSH
53074: LD_INT 20
53076: PUSH
53077: LD_INT 21
53079: PUSH
53080: LD_INT 22
53082: PUSH
53083: LD_INT 23
53085: PUSH
53086: LD_INT 25
53088: PUSH
53089: LD_INT 26
53091: PUSH
53092: LD_INT 30
53094: PUSH
53095: LD_INT 31
53097: PUSH
53098: LD_INT 32
53100: PUSH
53101: LD_INT 33
53103: PUSH
53104: LD_INT 34
53106: PUSH
53107: LD_INT 35
53109: PUSH
53110: LD_INT 36
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 101
53138: PUSH
53139: LD_INT 102
53141: PUSH
53142: LD_INT 103
53144: PUSH
53145: LD_INT 106
53147: PUSH
53148: LD_INT 108
53150: PUSH
53151: LD_INT 112
53153: PUSH
53154: LD_INT 113
53156: PUSH
53157: LD_INT 114
53159: PUSH
53160: LD_INT 115
53162: PUSH
53163: LD_INT 116
53165: PUSH
53166: LD_INT 117
53168: PUSH
53169: LD_INT 118
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: ST_TO_ADDR
53190: GO 53433
53192: LD_INT 19
53194: DOUBLE
53195: EQUAL
53196: IFTRUE 53200
53198: GO 53432
53200: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
53201: LD_ADDR_VAR 0 2
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: LD_INT 3
53214: PUSH
53215: LD_INT 4
53217: PUSH
53218: LD_INT 5
53220: PUSH
53221: LD_INT 6
53223: PUSH
53224: LD_INT 7
53226: PUSH
53227: LD_INT 8
53229: PUSH
53230: LD_INT 9
53232: PUSH
53233: LD_INT 10
53235: PUSH
53236: LD_INT 11
53238: PUSH
53239: LD_INT 12
53241: PUSH
53242: LD_INT 13
53244: PUSH
53245: LD_INT 14
53247: PUSH
53248: LD_INT 15
53250: PUSH
53251: LD_INT 16
53253: PUSH
53254: LD_INT 17
53256: PUSH
53257: LD_INT 18
53259: PUSH
53260: LD_INT 19
53262: PUSH
53263: LD_INT 20
53265: PUSH
53266: LD_INT 21
53268: PUSH
53269: LD_INT 22
53271: PUSH
53272: LD_INT 23
53274: PUSH
53275: LD_INT 24
53277: PUSH
53278: LD_INT 25
53280: PUSH
53281: LD_INT 26
53283: PUSH
53284: LD_INT 27
53286: PUSH
53287: LD_INT 28
53289: PUSH
53290: LD_INT 29
53292: PUSH
53293: LD_INT 30
53295: PUSH
53296: LD_INT 31
53298: PUSH
53299: LD_INT 32
53301: PUSH
53302: LD_INT 33
53304: PUSH
53305: LD_INT 34
53307: PUSH
53308: LD_INT 35
53310: PUSH
53311: LD_INT 36
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 101
53354: PUSH
53355: LD_INT 102
53357: PUSH
53358: LD_INT 103
53360: PUSH
53361: LD_INT 104
53363: PUSH
53364: LD_INT 105
53366: PUSH
53367: LD_INT 106
53369: PUSH
53370: LD_INT 107
53372: PUSH
53373: LD_INT 108
53375: PUSH
53376: LD_INT 109
53378: PUSH
53379: LD_INT 110
53381: PUSH
53382: LD_INT 111
53384: PUSH
53385: LD_INT 112
53387: PUSH
53388: LD_INT 113
53390: PUSH
53391: LD_INT 114
53393: PUSH
53394: LD_INT 115
53396: PUSH
53397: LD_INT 116
53399: PUSH
53400: LD_INT 117
53402: PUSH
53403: LD_INT 118
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: ST_TO_ADDR
53430: GO 53433
53432: POP
// end else
53433: GO 53664
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
53435: LD_ADDR_VAR 0 2
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: LD_INT 3
53448: PUSH
53449: LD_INT 4
53451: PUSH
53452: LD_INT 5
53454: PUSH
53455: LD_INT 6
53457: PUSH
53458: LD_INT 7
53460: PUSH
53461: LD_INT 8
53463: PUSH
53464: LD_INT 9
53466: PUSH
53467: LD_INT 10
53469: PUSH
53470: LD_INT 11
53472: PUSH
53473: LD_INT 12
53475: PUSH
53476: LD_INT 13
53478: PUSH
53479: LD_INT 14
53481: PUSH
53482: LD_INT 15
53484: PUSH
53485: LD_INT 16
53487: PUSH
53488: LD_INT 17
53490: PUSH
53491: LD_INT 18
53493: PUSH
53494: LD_INT 19
53496: PUSH
53497: LD_INT 20
53499: PUSH
53500: LD_INT 21
53502: PUSH
53503: LD_INT 22
53505: PUSH
53506: LD_INT 23
53508: PUSH
53509: LD_INT 24
53511: PUSH
53512: LD_INT 25
53514: PUSH
53515: LD_INT 26
53517: PUSH
53518: LD_INT 27
53520: PUSH
53521: LD_INT 28
53523: PUSH
53524: LD_INT 29
53526: PUSH
53527: LD_INT 30
53529: PUSH
53530: LD_INT 31
53532: PUSH
53533: LD_INT 32
53535: PUSH
53536: LD_INT 33
53538: PUSH
53539: LD_INT 34
53541: PUSH
53542: LD_INT 35
53544: PUSH
53545: LD_INT 36
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 101
53588: PUSH
53589: LD_INT 102
53591: PUSH
53592: LD_INT 103
53594: PUSH
53595: LD_INT 104
53597: PUSH
53598: LD_INT 105
53600: PUSH
53601: LD_INT 106
53603: PUSH
53604: LD_INT 107
53606: PUSH
53607: LD_INT 108
53609: PUSH
53610: LD_INT 109
53612: PUSH
53613: LD_INT 110
53615: PUSH
53616: LD_INT 111
53618: PUSH
53619: LD_INT 112
53621: PUSH
53622: LD_INT 113
53624: PUSH
53625: LD_INT 114
53627: PUSH
53628: LD_INT 115
53630: PUSH
53631: LD_INT 116
53633: PUSH
53634: LD_INT 117
53636: PUSH
53637: LD_INT 118
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: ST_TO_ADDR
// if result then
53664: LD_VAR 0 2
53668: IFFALSE 54454
// begin normal :=  ;
53670: LD_ADDR_VAR 0 5
53674: PUSH
53675: LD_STRING 
53677: ST_TO_ADDR
// hardcore :=  ;
53678: LD_ADDR_VAR 0 6
53682: PUSH
53683: LD_STRING 
53685: ST_TO_ADDR
// active :=  ;
53686: LD_ADDR_VAR 0 7
53690: PUSH
53691: LD_STRING 
53693: ST_TO_ADDR
// for i = 1 to normalCounter do
53694: LD_ADDR_VAR 0 8
53698: PUSH
53699: DOUBLE
53700: LD_INT 1
53702: DEC
53703: ST_TO_ADDR
53704: LD_EXP 31
53708: PUSH
53709: FOR_TO
53710: IFFALSE 53811
// begin tmp := 0 ;
53712: LD_ADDR_VAR 0 3
53716: PUSH
53717: LD_STRING 0
53719: ST_TO_ADDR
// if result [ 1 ] then
53720: LD_VAR 0 2
53724: PUSH
53725: LD_INT 1
53727: ARRAY
53728: IFFALSE 53793
// if result [ 1 ] [ 1 ] = i then
53730: LD_VAR 0 2
53734: PUSH
53735: LD_INT 1
53737: ARRAY
53738: PUSH
53739: LD_INT 1
53741: ARRAY
53742: PUSH
53743: LD_VAR 0 8
53747: EQUAL
53748: IFFALSE 53793
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
53750: LD_ADDR_VAR 0 2
53754: PUSH
53755: LD_VAR 0 2
53759: PPUSH
53760: LD_INT 1
53762: PPUSH
53763: LD_VAR 0 2
53767: PUSH
53768: LD_INT 1
53770: ARRAY
53771: PPUSH
53772: LD_INT 1
53774: PPUSH
53775: CALL_OW 3
53779: PPUSH
53780: CALL_OW 1
53784: ST_TO_ADDR
// tmp := 1 ;
53785: LD_ADDR_VAR 0 3
53789: PUSH
53790: LD_STRING 1
53792: ST_TO_ADDR
// end ; normal := normal & tmp ;
53793: LD_ADDR_VAR 0 5
53797: PUSH
53798: LD_VAR 0 5
53802: PUSH
53803: LD_VAR 0 3
53807: STR
53808: ST_TO_ADDR
// end ;
53809: GO 53709
53811: POP
53812: POP
// for i = 1 to hardcoreCounter do
53813: LD_ADDR_VAR 0 8
53817: PUSH
53818: DOUBLE
53819: LD_INT 1
53821: DEC
53822: ST_TO_ADDR
53823: LD_EXP 32
53827: PUSH
53828: FOR_TO
53829: IFFALSE 53934
// begin tmp := 0 ;
53831: LD_ADDR_VAR 0 3
53835: PUSH
53836: LD_STRING 0
53838: ST_TO_ADDR
// if result [ 2 ] then
53839: LD_VAR 0 2
53843: PUSH
53844: LD_INT 2
53846: ARRAY
53847: IFFALSE 53916
// if result [ 2 ] [ 1 ] = 100 + i then
53849: LD_VAR 0 2
53853: PUSH
53854: LD_INT 2
53856: ARRAY
53857: PUSH
53858: LD_INT 1
53860: ARRAY
53861: PUSH
53862: LD_INT 100
53864: PUSH
53865: LD_VAR 0 8
53869: PLUS
53870: EQUAL
53871: IFFALSE 53916
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
53873: LD_ADDR_VAR 0 2
53877: PUSH
53878: LD_VAR 0 2
53882: PPUSH
53883: LD_INT 2
53885: PPUSH
53886: LD_VAR 0 2
53890: PUSH
53891: LD_INT 2
53893: ARRAY
53894: PPUSH
53895: LD_INT 1
53897: PPUSH
53898: CALL_OW 3
53902: PPUSH
53903: CALL_OW 1
53907: ST_TO_ADDR
// tmp := 1 ;
53908: LD_ADDR_VAR 0 3
53912: PUSH
53913: LD_STRING 1
53915: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
53916: LD_ADDR_VAR 0 6
53920: PUSH
53921: LD_VAR 0 6
53925: PUSH
53926: LD_VAR 0 3
53930: STR
53931: ST_TO_ADDR
// end ;
53932: GO 53828
53934: POP
53935: POP
// if isGameLoad then
53936: LD_VAR 0 1
53940: IFFALSE 54415
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
53942: LD_ADDR_VAR 0 4
53946: PUSH
53947: LD_EXP 35
53951: PUSH
53952: LD_EXP 34
53956: PUSH
53957: LD_EXP 36
53961: PUSH
53962: LD_EXP 33
53966: PUSH
53967: LD_EXP 37
53971: PUSH
53972: LD_EXP 38
53976: PUSH
53977: LD_EXP 39
53981: PUSH
53982: LD_EXP 40
53986: PUSH
53987: LD_EXP 41
53991: PUSH
53992: LD_EXP 42
53996: PUSH
53997: LD_EXP 43
54001: PUSH
54002: LD_EXP 44
54006: PUSH
54007: LD_EXP 45
54011: PUSH
54012: LD_EXP 46
54016: PUSH
54017: LD_EXP 54
54021: PUSH
54022: LD_EXP 55
54026: PUSH
54027: LD_EXP 56
54031: PUSH
54032: LD_EXP 57
54036: PUSH
54037: LD_EXP 59
54041: PUSH
54042: LD_EXP 60
54046: PUSH
54047: LD_EXP 61
54051: PUSH
54052: LD_EXP 64
54056: PUSH
54057: LD_EXP 66
54061: PUSH
54062: LD_EXP 67
54066: PUSH
54067: LD_EXP 68
54071: PUSH
54072: LD_EXP 70
54076: PUSH
54077: LD_EXP 71
54081: PUSH
54082: LD_EXP 74
54086: PUSH
54087: LD_EXP 75
54091: PUSH
54092: LD_EXP 76
54096: PUSH
54097: LD_EXP 77
54101: PUSH
54102: LD_EXP 78
54106: PUSH
54107: LD_EXP 79
54111: PUSH
54112: LD_EXP 80
54116: PUSH
54117: LD_EXP 81
54121: PUSH
54122: LD_EXP 82
54126: PUSH
54127: LD_EXP 47
54131: PUSH
54132: LD_EXP 48
54136: PUSH
54137: LD_EXP 51
54141: PUSH
54142: LD_EXP 52
54146: PUSH
54147: LD_EXP 53
54151: PUSH
54152: LD_EXP 49
54156: PUSH
54157: LD_EXP 50
54161: PUSH
54162: LD_EXP 58
54166: PUSH
54167: LD_EXP 62
54171: PUSH
54172: LD_EXP 63
54176: PUSH
54177: LD_EXP 65
54181: PUSH
54182: LD_EXP 69
54186: PUSH
54187: LD_EXP 72
54191: PUSH
54192: LD_EXP 73
54196: PUSH
54197: LD_EXP 83
54201: PUSH
54202: LD_EXP 84
54206: PUSH
54207: LD_EXP 85
54211: PUSH
54212: LD_EXP 86
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// tmp :=  ;
54273: LD_ADDR_VAR 0 3
54277: PUSH
54278: LD_STRING 
54280: ST_TO_ADDR
// for i = 1 to normalCounter do
54281: LD_ADDR_VAR 0 8
54285: PUSH
54286: DOUBLE
54287: LD_INT 1
54289: DEC
54290: ST_TO_ADDR
54291: LD_EXP 31
54295: PUSH
54296: FOR_TO
54297: IFFALSE 54333
// begin if flags [ i ] then
54299: LD_VAR 0 4
54303: PUSH
54304: LD_VAR 0 8
54308: ARRAY
54309: IFFALSE 54331
// tmp := tmp & i & ; ;
54311: LD_ADDR_VAR 0 3
54315: PUSH
54316: LD_VAR 0 3
54320: PUSH
54321: LD_VAR 0 8
54325: STR
54326: PUSH
54327: LD_STRING ;
54329: STR
54330: ST_TO_ADDR
// end ;
54331: GO 54296
54333: POP
54334: POP
// for i = 1 to hardcoreCounter do
54335: LD_ADDR_VAR 0 8
54339: PUSH
54340: DOUBLE
54341: LD_INT 1
54343: DEC
54344: ST_TO_ADDR
54345: LD_EXP 32
54349: PUSH
54350: FOR_TO
54351: IFFALSE 54397
// begin if flags [ normalCounter + i ] then
54353: LD_VAR 0 4
54357: PUSH
54358: LD_EXP 31
54362: PUSH
54363: LD_VAR 0 8
54367: PLUS
54368: ARRAY
54369: IFFALSE 54395
// tmp := tmp & ( 100 + i ) & ; ;
54371: LD_ADDR_VAR 0 3
54375: PUSH
54376: LD_VAR 0 3
54380: PUSH
54381: LD_INT 100
54383: PUSH
54384: LD_VAR 0 8
54388: PLUS
54389: STR
54390: PUSH
54391: LD_STRING ;
54393: STR
54394: ST_TO_ADDR
// end ;
54395: GO 54350
54397: POP
54398: POP
// if tmp then
54399: LD_VAR 0 3
54403: IFFALSE 54415
// active := tmp ;
54405: LD_ADDR_VAR 0 7
54409: PUSH
54410: LD_VAR 0 3
54414: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
54415: LD_STRING getStreamItemsFromMission("
54417: PUSH
54418: LD_VAR 0 5
54422: STR
54423: PUSH
54424: LD_STRING ","
54426: STR
54427: PUSH
54428: LD_VAR 0 6
54432: STR
54433: PUSH
54434: LD_STRING ","
54436: STR
54437: PUSH
54438: LD_VAR 0 7
54442: STR
54443: PUSH
54444: LD_STRING ")
54446: STR
54447: PPUSH
54448: CALL_OW 559
// end else
54452: GO 54461
// ToLua ( getStreamItemsFromMission("","","") ) ;
54454: LD_STRING getStreamItemsFromMission("","","")
54456: PPUSH
54457: CALL_OW 559
// end ;
54461: LD_VAR 0 2
54465: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
54466: LD_EXP 30
54470: PUSH
54471: LD_EXP 35
54475: AND
54476: IFFALSE 54600
54478: GO 54480
54480: DISABLE
54481: LD_INT 0
54483: PPUSH
54484: PPUSH
// begin enable ;
54485: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
54486: LD_ADDR_VAR 0 2
54490: PUSH
54491: LD_INT 22
54493: PUSH
54494: LD_OWVAR 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: LD_INT 34
54508: PUSH
54509: LD_INT 7
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 34
54518: PUSH
54519: LD_INT 45
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 34
54528: PUSH
54529: LD_INT 28
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 34
54538: PUSH
54539: LD_INT 47
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: EMPTY
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PPUSH
54557: CALL_OW 69
54561: ST_TO_ADDR
// if not tmp then
54562: LD_VAR 0 2
54566: NOT
54567: IFFALSE 54571
// exit ;
54569: GO 54600
// for i in tmp do
54571: LD_ADDR_VAR 0 1
54575: PUSH
54576: LD_VAR 0 2
54580: PUSH
54581: FOR_IN
54582: IFFALSE 54598
// begin SetLives ( i , 0 ) ;
54584: LD_VAR 0 1
54588: PPUSH
54589: LD_INT 0
54591: PPUSH
54592: CALL_OW 234
// end ;
54596: GO 54581
54598: POP
54599: POP
// end ;
54600: PPOPN 2
54602: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
54603: LD_EXP 30
54607: PUSH
54608: LD_EXP 36
54612: AND
54613: IFFALSE 54697
54615: GO 54617
54617: DISABLE
54618: LD_INT 0
54620: PPUSH
54621: PPUSH
// begin enable ;
54622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
54623: LD_ADDR_VAR 0 2
54627: PUSH
54628: LD_INT 22
54630: PUSH
54631: LD_OWVAR 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 32
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PPUSH
54654: CALL_OW 69
54658: ST_TO_ADDR
// if not tmp then
54659: LD_VAR 0 2
54663: NOT
54664: IFFALSE 54668
// exit ;
54666: GO 54697
// for i in tmp do
54668: LD_ADDR_VAR 0 1
54672: PUSH
54673: LD_VAR 0 2
54677: PUSH
54678: FOR_IN
54679: IFFALSE 54695
// begin SetLives ( i , 0 ) ;
54681: LD_VAR 0 1
54685: PPUSH
54686: LD_INT 0
54688: PPUSH
54689: CALL_OW 234
// end ;
54693: GO 54678
54695: POP
54696: POP
// end ;
54697: PPOPN 2
54699: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
54700: LD_EXP 30
54704: PUSH
54705: LD_EXP 33
54709: AND
54710: IFFALSE 54803
54712: GO 54714
54714: DISABLE
54715: LD_INT 0
54717: PPUSH
// begin enable ;
54718: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
54719: LD_ADDR_VAR 0 1
54723: PUSH
54724: LD_INT 22
54726: PUSH
54727: LD_OWVAR 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: PUSH
54739: LD_INT 25
54741: PUSH
54742: LD_INT 5
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 25
54751: PUSH
54752: LD_INT 9
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 25
54761: PUSH
54762: LD_INT 8
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PPUSH
54779: CALL_OW 69
54783: PUSH
54784: FOR_IN
54785: IFFALSE 54801
// begin SetClass ( i , 1 ) ;
54787: LD_VAR 0 1
54791: PPUSH
54792: LD_INT 1
54794: PPUSH
54795: CALL_OW 336
// end ;
54799: GO 54784
54801: POP
54802: POP
// end ;
54803: PPOPN 1
54805: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
54806: LD_EXP 30
54810: PUSH
54811: LD_EXP 34
54815: AND
54816: PUSH
54817: LD_OWVAR 65
54821: PUSH
54822: LD_INT 7
54824: LESS
54825: AND
54826: IFFALSE 54840
54828: GO 54830
54830: DISABLE
// begin enable ;
54831: ENABLE
// game_speed := 7 ;
54832: LD_ADDR_OWVAR 65
54836: PUSH
54837: LD_INT 7
54839: ST_TO_ADDR
// end ;
54840: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
54841: LD_EXP 30
54845: PUSH
54846: LD_EXP 37
54850: AND
54851: IFFALSE 55053
54853: GO 54855
54855: DISABLE
54856: LD_INT 0
54858: PPUSH
54859: PPUSH
54860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
54861: LD_ADDR_VAR 0 3
54865: PUSH
54866: LD_INT 81
54868: PUSH
54869: LD_OWVAR 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 21
54880: PUSH
54881: LD_INT 1
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PPUSH
54892: CALL_OW 69
54896: ST_TO_ADDR
// if not tmp then
54897: LD_VAR 0 3
54901: NOT
54902: IFFALSE 54906
// exit ;
54904: GO 55053
// if tmp > 5 then
54906: LD_VAR 0 3
54910: PUSH
54911: LD_INT 5
54913: GREATER
54914: IFFALSE 54926
// k := 5 else
54916: LD_ADDR_VAR 0 2
54920: PUSH
54921: LD_INT 5
54923: ST_TO_ADDR
54924: GO 54936
// k := tmp ;
54926: LD_ADDR_VAR 0 2
54930: PUSH
54931: LD_VAR 0 3
54935: ST_TO_ADDR
// for i := 1 to k do
54936: LD_ADDR_VAR 0 1
54940: PUSH
54941: DOUBLE
54942: LD_INT 1
54944: DEC
54945: ST_TO_ADDR
54946: LD_VAR 0 2
54950: PUSH
54951: FOR_TO
54952: IFFALSE 55051
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
54954: LD_VAR 0 3
54958: PUSH
54959: LD_VAR 0 1
54963: ARRAY
54964: PPUSH
54965: LD_VAR 0 1
54969: PUSH
54970: LD_INT 4
54972: MOD
54973: PUSH
54974: LD_INT 1
54976: PLUS
54977: PPUSH
54978: CALL_OW 259
54982: PUSH
54983: LD_INT 10
54985: LESS
54986: IFFALSE 55049
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
54988: LD_VAR 0 3
54992: PUSH
54993: LD_VAR 0 1
54997: ARRAY
54998: PPUSH
54999: LD_VAR 0 1
55003: PUSH
55004: LD_INT 4
55006: MOD
55007: PUSH
55008: LD_INT 1
55010: PLUS
55011: PPUSH
55012: LD_VAR 0 3
55016: PUSH
55017: LD_VAR 0 1
55021: ARRAY
55022: PPUSH
55023: LD_VAR 0 1
55027: PUSH
55028: LD_INT 4
55030: MOD
55031: PUSH
55032: LD_INT 1
55034: PLUS
55035: PPUSH
55036: CALL_OW 259
55040: PUSH
55041: LD_INT 1
55043: PLUS
55044: PPUSH
55045: CALL_OW 237
55049: GO 54951
55051: POP
55052: POP
// end ;
55053: PPOPN 3
55055: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
55056: LD_EXP 30
55060: PUSH
55061: LD_EXP 38
55065: AND
55066: IFFALSE 55086
55068: GO 55070
55070: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
55071: LD_INT 4
55073: PPUSH
55074: LD_OWVAR 2
55078: PPUSH
55079: LD_INT 0
55081: PPUSH
55082: CALL_OW 324
55086: END
// every 0 0$1 trigger StreamModeActive and sShovel do
55087: LD_EXP 30
55091: PUSH
55092: LD_EXP 67
55096: AND
55097: IFFALSE 55117
55099: GO 55101
55101: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
55102: LD_INT 19
55104: PPUSH
55105: LD_OWVAR 2
55109: PPUSH
55110: LD_INT 0
55112: PPUSH
55113: CALL_OW 324
55117: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
55118: LD_EXP 30
55122: PUSH
55123: LD_EXP 39
55127: AND
55128: IFFALSE 55230
55130: GO 55132
55132: DISABLE
55133: LD_INT 0
55135: PPUSH
55136: PPUSH
// begin enable ;
55137: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
55138: LD_ADDR_VAR 0 2
55142: PUSH
55143: LD_INT 22
55145: PUSH
55146: LD_OWVAR 2
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: LD_INT 34
55160: PUSH
55161: LD_INT 11
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 34
55170: PUSH
55171: LD_INT 30
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PPUSH
55187: CALL_OW 69
55191: ST_TO_ADDR
// if not tmp then
55192: LD_VAR 0 2
55196: NOT
55197: IFFALSE 55201
// exit ;
55199: GO 55230
// for i in tmp do
55201: LD_ADDR_VAR 0 1
55205: PUSH
55206: LD_VAR 0 2
55210: PUSH
55211: FOR_IN
55212: IFFALSE 55228
// begin SetLives ( i , 0 ) ;
55214: LD_VAR 0 1
55218: PPUSH
55219: LD_INT 0
55221: PPUSH
55222: CALL_OW 234
// end ;
55226: GO 55211
55228: POP
55229: POP
// end ;
55230: PPOPN 2
55232: END
// every 0 0$1 trigger StreamModeActive and sBunker do
55233: LD_EXP 30
55237: PUSH
55238: LD_EXP 40
55242: AND
55243: IFFALSE 55263
55245: GO 55247
55247: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
55248: LD_INT 32
55250: PPUSH
55251: LD_OWVAR 2
55255: PPUSH
55256: LD_INT 0
55258: PPUSH
55259: CALL_OW 324
55263: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
55264: LD_EXP 30
55268: PUSH
55269: LD_EXP 41
55273: AND
55274: IFFALSE 55455
55276: GO 55278
55278: DISABLE
55279: LD_INT 0
55281: PPUSH
55282: PPUSH
55283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
55284: LD_ADDR_VAR 0 2
55288: PUSH
55289: LD_INT 22
55291: PUSH
55292: LD_OWVAR 2
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 33
55303: PUSH
55304: LD_INT 3
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PPUSH
55315: CALL_OW 69
55319: ST_TO_ADDR
// if not tmp then
55320: LD_VAR 0 2
55324: NOT
55325: IFFALSE 55329
// exit ;
55327: GO 55455
// side := 0 ;
55329: LD_ADDR_VAR 0 3
55333: PUSH
55334: LD_INT 0
55336: ST_TO_ADDR
// for i := 1 to 8 do
55337: LD_ADDR_VAR 0 1
55341: PUSH
55342: DOUBLE
55343: LD_INT 1
55345: DEC
55346: ST_TO_ADDR
55347: LD_INT 8
55349: PUSH
55350: FOR_TO
55351: IFFALSE 55399
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
55353: LD_OWVAR 2
55357: PUSH
55358: LD_VAR 0 1
55362: NONEQUAL
55363: PUSH
55364: LD_OWVAR 2
55368: PPUSH
55369: LD_VAR 0 1
55373: PPUSH
55374: CALL_OW 81
55378: PUSH
55379: LD_INT 2
55381: EQUAL
55382: AND
55383: IFFALSE 55397
// begin side := i ;
55385: LD_ADDR_VAR 0 3
55389: PUSH
55390: LD_VAR 0 1
55394: ST_TO_ADDR
// break ;
55395: GO 55399
// end ;
55397: GO 55350
55399: POP
55400: POP
// if not side then
55401: LD_VAR 0 3
55405: NOT
55406: IFFALSE 55410
// exit ;
55408: GO 55455
// for i := 1 to tmp do
55410: LD_ADDR_VAR 0 1
55414: PUSH
55415: DOUBLE
55416: LD_INT 1
55418: DEC
55419: ST_TO_ADDR
55420: LD_VAR 0 2
55424: PUSH
55425: FOR_TO
55426: IFFALSE 55453
// if Prob ( 60 ) then
55428: LD_INT 60
55430: PPUSH
55431: CALL_OW 13
55435: IFFALSE 55451
// SetSide ( i , side ) ;
55437: LD_VAR 0 1
55441: PPUSH
55442: LD_VAR 0 3
55446: PPUSH
55447: CALL_OW 235
55451: GO 55425
55453: POP
55454: POP
// end ;
55455: PPOPN 3
55457: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
55458: LD_EXP 30
55462: PUSH
55463: LD_EXP 43
55467: AND
55468: IFFALSE 55587
55470: GO 55472
55472: DISABLE
55473: LD_INT 0
55475: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
55476: LD_ADDR_VAR 0 1
55480: PUSH
55481: LD_INT 22
55483: PUSH
55484: LD_OWVAR 2
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 21
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 3
55505: PUSH
55506: LD_INT 23
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: LIST
55524: PPUSH
55525: CALL_OW 69
55529: PUSH
55530: FOR_IN
55531: IFFALSE 55585
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
55533: LD_VAR 0 1
55537: PPUSH
55538: CALL_OW 257
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 3
55551: PUSH
55552: LD_INT 4
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: IN
55561: IFFALSE 55583
// SetClass ( un , rand ( 1 , 4 ) ) ;
55563: LD_VAR 0 1
55567: PPUSH
55568: LD_INT 1
55570: PPUSH
55571: LD_INT 4
55573: PPUSH
55574: CALL_OW 12
55578: PPUSH
55579: CALL_OW 336
55583: GO 55530
55585: POP
55586: POP
// end ;
55587: PPOPN 1
55589: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
55590: LD_EXP 30
55594: PUSH
55595: LD_EXP 42
55599: AND
55600: IFFALSE 55679
55602: GO 55604
55604: DISABLE
55605: LD_INT 0
55607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55608: LD_ADDR_VAR 0 1
55612: PUSH
55613: LD_INT 22
55615: PUSH
55616: LD_OWVAR 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 21
55627: PUSH
55628: LD_INT 3
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PPUSH
55639: CALL_OW 69
55643: ST_TO_ADDR
// if not tmp then
55644: LD_VAR 0 1
55648: NOT
55649: IFFALSE 55653
// exit ;
55651: GO 55679
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
55653: LD_VAR 0 1
55657: PUSH
55658: LD_INT 1
55660: PPUSH
55661: LD_VAR 0 1
55665: PPUSH
55666: CALL_OW 12
55670: ARRAY
55671: PPUSH
55672: LD_INT 100
55674: PPUSH
55675: CALL_OW 234
// end ;
55679: PPOPN 1
55681: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
55682: LD_EXP 30
55686: PUSH
55687: LD_EXP 44
55691: AND
55692: IFFALSE 55790
55694: GO 55696
55696: DISABLE
55697: LD_INT 0
55699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
55700: LD_ADDR_VAR 0 1
55704: PUSH
55705: LD_INT 22
55707: PUSH
55708: LD_OWVAR 2
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 21
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PPUSH
55731: CALL_OW 69
55735: ST_TO_ADDR
// if not tmp then
55736: LD_VAR 0 1
55740: NOT
55741: IFFALSE 55745
// exit ;
55743: GO 55790
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
55745: LD_VAR 0 1
55749: PUSH
55750: LD_INT 1
55752: PPUSH
55753: LD_VAR 0 1
55757: PPUSH
55758: CALL_OW 12
55762: ARRAY
55763: PPUSH
55764: LD_INT 1
55766: PPUSH
55767: LD_INT 4
55769: PPUSH
55770: CALL_OW 12
55774: PPUSH
55775: LD_INT 3000
55777: PPUSH
55778: LD_INT 9000
55780: PPUSH
55781: CALL_OW 12
55785: PPUSH
55786: CALL_OW 492
// end ;
55790: PPOPN 1
55792: END
// every 0 0$1 trigger StreamModeActive and sDepot do
55793: LD_EXP 30
55797: PUSH
55798: LD_EXP 45
55802: AND
55803: IFFALSE 55823
55805: GO 55807
55807: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
55808: LD_INT 1
55810: PPUSH
55811: LD_OWVAR 2
55815: PPUSH
55816: LD_INT 0
55818: PPUSH
55819: CALL_OW 324
55823: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
55824: LD_EXP 30
55828: PUSH
55829: LD_EXP 46
55833: AND
55834: IFFALSE 55917
55836: GO 55838
55838: DISABLE
55839: LD_INT 0
55841: PPUSH
55842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
55843: LD_ADDR_VAR 0 2
55847: PUSH
55848: LD_INT 22
55850: PUSH
55851: LD_OWVAR 2
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 21
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PPUSH
55874: CALL_OW 69
55878: ST_TO_ADDR
// if not tmp then
55879: LD_VAR 0 2
55883: NOT
55884: IFFALSE 55888
// exit ;
55886: GO 55917
// for i in tmp do
55888: LD_ADDR_VAR 0 1
55892: PUSH
55893: LD_VAR 0 2
55897: PUSH
55898: FOR_IN
55899: IFFALSE 55915
// SetBLevel ( i , 10 ) ;
55901: LD_VAR 0 1
55905: PPUSH
55906: LD_INT 10
55908: PPUSH
55909: CALL_OW 241
55913: GO 55898
55915: POP
55916: POP
// end ;
55917: PPOPN 2
55919: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
55920: LD_EXP 30
55924: PUSH
55925: LD_EXP 47
55929: AND
55930: IFFALSE 56041
55932: GO 55934
55934: DISABLE
55935: LD_INT 0
55937: PPUSH
55938: PPUSH
55939: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
55940: LD_ADDR_VAR 0 3
55944: PUSH
55945: LD_INT 22
55947: PUSH
55948: LD_OWVAR 2
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 25
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PPUSH
55971: CALL_OW 69
55975: ST_TO_ADDR
// if not tmp then
55976: LD_VAR 0 3
55980: NOT
55981: IFFALSE 55985
// exit ;
55983: GO 56041
// un := tmp [ rand ( 1 , tmp ) ] ;
55985: LD_ADDR_VAR 0 2
55989: PUSH
55990: LD_VAR 0 3
55994: PUSH
55995: LD_INT 1
55997: PPUSH
55998: LD_VAR 0 3
56002: PPUSH
56003: CALL_OW 12
56007: ARRAY
56008: ST_TO_ADDR
// if Crawls ( un ) then
56009: LD_VAR 0 2
56013: PPUSH
56014: CALL_OW 318
56018: IFFALSE 56029
// ComWalk ( un ) ;
56020: LD_VAR 0 2
56024: PPUSH
56025: CALL_OW 138
// SetClass ( un , class_sniper ) ;
56029: LD_VAR 0 2
56033: PPUSH
56034: LD_INT 5
56036: PPUSH
56037: CALL_OW 336
// end ;
56041: PPOPN 3
56043: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
56044: LD_EXP 30
56048: PUSH
56049: LD_EXP 48
56053: AND
56054: PUSH
56055: LD_OWVAR 67
56059: PUSH
56060: LD_INT 4
56062: LESS
56063: AND
56064: IFFALSE 56083
56066: GO 56068
56068: DISABLE
// begin Difficulty := Difficulty + 1 ;
56069: LD_ADDR_OWVAR 67
56073: PUSH
56074: LD_OWVAR 67
56078: PUSH
56079: LD_INT 1
56081: PLUS
56082: ST_TO_ADDR
// end ;
56083: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
56084: LD_EXP 30
56088: PUSH
56089: LD_EXP 49
56093: AND
56094: IFFALSE 56197
56096: GO 56098
56098: DISABLE
56099: LD_INT 0
56101: PPUSH
// begin for i := 1 to 5 do
56102: LD_ADDR_VAR 0 1
56106: PUSH
56107: DOUBLE
56108: LD_INT 1
56110: DEC
56111: ST_TO_ADDR
56112: LD_INT 5
56114: PUSH
56115: FOR_TO
56116: IFFALSE 56195
// begin uc_nation := nation_nature ;
56118: LD_ADDR_OWVAR 21
56122: PUSH
56123: LD_INT 0
56125: ST_TO_ADDR
// uc_side := 0 ;
56126: LD_ADDR_OWVAR 20
56130: PUSH
56131: LD_INT 0
56133: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56134: LD_ADDR_OWVAR 29
56138: PUSH
56139: LD_INT 12
56141: PUSH
56142: LD_INT 12
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: ST_TO_ADDR
// hc_agressivity := 20 ;
56149: LD_ADDR_OWVAR 35
56153: PUSH
56154: LD_INT 20
56156: ST_TO_ADDR
// hc_class := class_tiger ;
56157: LD_ADDR_OWVAR 28
56161: PUSH
56162: LD_INT 14
56164: ST_TO_ADDR
// hc_gallery :=  ;
56165: LD_ADDR_OWVAR 33
56169: PUSH
56170: LD_STRING 
56172: ST_TO_ADDR
// hc_name :=  ;
56173: LD_ADDR_OWVAR 26
56177: PUSH
56178: LD_STRING 
56180: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
56181: CALL_OW 44
56185: PPUSH
56186: LD_INT 0
56188: PPUSH
56189: CALL_OW 51
// end ;
56193: GO 56115
56195: POP
56196: POP
// end ;
56197: PPOPN 1
56199: END
// every 0 0$1 trigger StreamModeActive and sBomb do
56200: LD_EXP 30
56204: PUSH
56205: LD_EXP 50
56209: AND
56210: IFFALSE 56219
56212: GO 56214
56214: DISABLE
// StreamSibBomb ;
56215: CALL 56220 0 0
56219: END
// export function StreamSibBomb ; var i , x , y ; begin
56220: LD_INT 0
56222: PPUSH
56223: PPUSH
56224: PPUSH
56225: PPUSH
// result := false ;
56226: LD_ADDR_VAR 0 1
56230: PUSH
56231: LD_INT 0
56233: ST_TO_ADDR
// for i := 1 to 16 do
56234: LD_ADDR_VAR 0 2
56238: PUSH
56239: DOUBLE
56240: LD_INT 1
56242: DEC
56243: ST_TO_ADDR
56244: LD_INT 16
56246: PUSH
56247: FOR_TO
56248: IFFALSE 56447
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56250: LD_ADDR_VAR 0 3
56254: PUSH
56255: LD_INT 10
56257: PUSH
56258: LD_INT 20
56260: PUSH
56261: LD_INT 30
56263: PUSH
56264: LD_INT 40
56266: PUSH
56267: LD_INT 50
56269: PUSH
56270: LD_INT 60
56272: PUSH
56273: LD_INT 70
56275: PUSH
56276: LD_INT 80
56278: PUSH
56279: LD_INT 90
56281: PUSH
56282: LD_INT 100
56284: PUSH
56285: LD_INT 110
56287: PUSH
56288: LD_INT 120
56290: PUSH
56291: LD_INT 130
56293: PUSH
56294: LD_INT 140
56296: PUSH
56297: LD_INT 150
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: PPUSH
56320: LD_INT 15
56322: PPUSH
56323: CALL_OW 12
56327: ARRAY
56328: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
56329: LD_ADDR_VAR 0 4
56333: PUSH
56334: LD_INT 10
56336: PUSH
56337: LD_INT 20
56339: PUSH
56340: LD_INT 30
56342: PUSH
56343: LD_INT 40
56345: PUSH
56346: LD_INT 50
56348: PUSH
56349: LD_INT 60
56351: PUSH
56352: LD_INT 70
56354: PUSH
56355: LD_INT 80
56357: PUSH
56358: LD_INT 90
56360: PUSH
56361: LD_INT 100
56363: PUSH
56364: LD_INT 110
56366: PUSH
56367: LD_INT 120
56369: PUSH
56370: LD_INT 130
56372: PUSH
56373: LD_INT 140
56375: PUSH
56376: LD_INT 150
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PPUSH
56399: LD_INT 15
56401: PPUSH
56402: CALL_OW 12
56406: ARRAY
56407: ST_TO_ADDR
// if ValidHex ( x , y ) then
56408: LD_VAR 0 3
56412: PPUSH
56413: LD_VAR 0 4
56417: PPUSH
56418: CALL_OW 488
56422: IFFALSE 56445
// begin result := [ x , y ] ;
56424: LD_ADDR_VAR 0 1
56428: PUSH
56429: LD_VAR 0 3
56433: PUSH
56434: LD_VAR 0 4
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// break ;
56443: GO 56447
// end ; end ;
56445: GO 56247
56447: POP
56448: POP
// if result then
56449: LD_VAR 0 1
56453: IFFALSE 56513
// begin ToLua ( playSibBomb() ) ;
56455: LD_STRING playSibBomb()
56457: PPUSH
56458: CALL_OW 559
// wait ( 0 0$14 ) ;
56462: LD_INT 490
56464: PPUSH
56465: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
56469: LD_VAR 0 1
56473: PUSH
56474: LD_INT 1
56476: ARRAY
56477: PPUSH
56478: LD_VAR 0 1
56482: PUSH
56483: LD_INT 2
56485: ARRAY
56486: PPUSH
56487: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
56491: LD_VAR 0 1
56495: PUSH
56496: LD_INT 1
56498: ARRAY
56499: PPUSH
56500: LD_VAR 0 1
56504: PUSH
56505: LD_INT 2
56507: ARRAY
56508: PPUSH
56509: CALL_OW 429
// end ; end ;
56513: LD_VAR 0 1
56517: RET
// every 0 0$1 trigger StreamModeActive and sReset do
56518: LD_EXP 30
56522: PUSH
56523: LD_EXP 52
56527: AND
56528: IFFALSE 56540
56530: GO 56532
56532: DISABLE
// YouLost (  ) ;
56533: LD_STRING 
56535: PPUSH
56536: CALL_OW 104
56540: END
// every 0 0$1 trigger StreamModeActive and sFog do
56541: LD_EXP 30
56545: PUSH
56546: LD_EXP 51
56550: AND
56551: IFFALSE 56565
56553: GO 56555
56555: DISABLE
// FogOff ( your_side ) ;
56556: LD_OWVAR 2
56560: PPUSH
56561: CALL_OW 344
56565: END
// every 0 0$1 trigger StreamModeActive and sSun do
56566: LD_EXP 30
56570: PUSH
56571: LD_EXP 53
56575: AND
56576: IFFALSE 56604
56578: GO 56580
56580: DISABLE
// begin solar_recharge_percent := 0 ;
56581: LD_ADDR_OWVAR 79
56585: PUSH
56586: LD_INT 0
56588: ST_TO_ADDR
// wait ( 5 5$00 ) ;
56589: LD_INT 10500
56591: PPUSH
56592: CALL_OW 67
// solar_recharge_percent := 100 ;
56596: LD_ADDR_OWVAR 79
56600: PUSH
56601: LD_INT 100
56603: ST_TO_ADDR
// end ;
56604: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
56605: LD_EXP 30
56609: PUSH
56610: LD_EXP 54
56614: AND
56615: IFFALSE 56854
56617: GO 56619
56619: DISABLE
56620: LD_INT 0
56622: PPUSH
56623: PPUSH
56624: PPUSH
// begin tmp := [ ] ;
56625: LD_ADDR_VAR 0 3
56629: PUSH
56630: EMPTY
56631: ST_TO_ADDR
// for i := 1 to 6 do
56632: LD_ADDR_VAR 0 1
56636: PUSH
56637: DOUBLE
56638: LD_INT 1
56640: DEC
56641: ST_TO_ADDR
56642: LD_INT 6
56644: PUSH
56645: FOR_TO
56646: IFFALSE 56751
// begin uc_nation := nation_nature ;
56648: LD_ADDR_OWVAR 21
56652: PUSH
56653: LD_INT 0
56655: ST_TO_ADDR
// uc_side := 0 ;
56656: LD_ADDR_OWVAR 20
56660: PUSH
56661: LD_INT 0
56663: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
56664: LD_ADDR_OWVAR 29
56668: PUSH
56669: LD_INT 12
56671: PUSH
56672: LD_INT 12
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: ST_TO_ADDR
// hc_agressivity := 20 ;
56679: LD_ADDR_OWVAR 35
56683: PUSH
56684: LD_INT 20
56686: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
56687: LD_ADDR_OWVAR 28
56691: PUSH
56692: LD_INT 17
56694: ST_TO_ADDR
// hc_gallery :=  ;
56695: LD_ADDR_OWVAR 33
56699: PUSH
56700: LD_STRING 
56702: ST_TO_ADDR
// hc_name :=  ;
56703: LD_ADDR_OWVAR 26
56707: PUSH
56708: LD_STRING 
56710: ST_TO_ADDR
// un := CreateHuman ;
56711: LD_ADDR_VAR 0 2
56715: PUSH
56716: CALL_OW 44
56720: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
56721: LD_VAR 0 2
56725: PPUSH
56726: LD_INT 1
56728: PPUSH
56729: CALL_OW 51
// tmp := tmp ^ un ;
56733: LD_ADDR_VAR 0 3
56737: PUSH
56738: LD_VAR 0 3
56742: PUSH
56743: LD_VAR 0 2
56747: ADD
56748: ST_TO_ADDR
// end ;
56749: GO 56645
56751: POP
56752: POP
// repeat wait ( 0 0$1 ) ;
56753: LD_INT 35
56755: PPUSH
56756: CALL_OW 67
// for un in tmp do
56760: LD_ADDR_VAR 0 2
56764: PUSH
56765: LD_VAR 0 3
56769: PUSH
56770: FOR_IN
56771: IFFALSE 56845
// begin if IsDead ( un ) then
56773: LD_VAR 0 2
56777: PPUSH
56778: CALL_OW 301
56782: IFFALSE 56802
// begin tmp := tmp diff un ;
56784: LD_ADDR_VAR 0 3
56788: PUSH
56789: LD_VAR 0 3
56793: PUSH
56794: LD_VAR 0 2
56798: DIFF
56799: ST_TO_ADDR
// continue ;
56800: GO 56770
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
56802: LD_VAR 0 2
56806: PPUSH
56807: LD_INT 3
56809: PUSH
56810: LD_INT 22
56812: PUSH
56813: LD_INT 0
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PPUSH
56824: CALL_OW 69
56828: PPUSH
56829: LD_VAR 0 2
56833: PPUSH
56834: CALL_OW 74
56838: PPUSH
56839: CALL_OW 115
// end ;
56843: GO 56770
56845: POP
56846: POP
// until not tmp ;
56847: LD_VAR 0 3
56851: NOT
56852: IFFALSE 56753
// end ;
56854: PPOPN 3
56856: END
// every 0 0$1 trigger StreamModeActive and sTroll do
56857: LD_EXP 30
56861: PUSH
56862: LD_EXP 55
56866: AND
56867: IFFALSE 56921
56869: GO 56871
56871: DISABLE
// begin ToLua ( displayTroll(); ) ;
56872: LD_STRING displayTroll();
56874: PPUSH
56875: CALL_OW 559
// wait ( 3 3$00 ) ;
56879: LD_INT 6300
56881: PPUSH
56882: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56886: LD_STRING hideTroll();
56888: PPUSH
56889: CALL_OW 559
// wait ( 1 1$00 ) ;
56893: LD_INT 2100
56895: PPUSH
56896: CALL_OW 67
// ToLua ( displayTroll(); ) ;
56900: LD_STRING displayTroll();
56902: PPUSH
56903: CALL_OW 559
// wait ( 1 1$00 ) ;
56907: LD_INT 2100
56909: PPUSH
56910: CALL_OW 67
// ToLua ( hideTroll(); ) ;
56914: LD_STRING hideTroll();
56916: PPUSH
56917: CALL_OW 559
// end ;
56921: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
56922: LD_EXP 30
56926: PUSH
56927: LD_EXP 56
56931: AND
56932: IFFALSE 56995
56934: GO 56936
56936: DISABLE
56937: LD_INT 0
56939: PPUSH
// begin p := 0 ;
56940: LD_ADDR_VAR 0 1
56944: PUSH
56945: LD_INT 0
56947: ST_TO_ADDR
// repeat game_speed := 1 ;
56948: LD_ADDR_OWVAR 65
56952: PUSH
56953: LD_INT 1
56955: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56956: LD_INT 35
56958: PPUSH
56959: CALL_OW 67
// p := p + 1 ;
56963: LD_ADDR_VAR 0 1
56967: PUSH
56968: LD_VAR 0 1
56972: PUSH
56973: LD_INT 1
56975: PLUS
56976: ST_TO_ADDR
// until p >= 60 ;
56977: LD_VAR 0 1
56981: PUSH
56982: LD_INT 60
56984: GREATEREQUAL
56985: IFFALSE 56948
// game_speed := 4 ;
56987: LD_ADDR_OWVAR 65
56991: PUSH
56992: LD_INT 4
56994: ST_TO_ADDR
// end ;
56995: PPOPN 1
56997: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
56998: LD_EXP 30
57002: PUSH
57003: LD_EXP 57
57007: AND
57008: IFFALSE 57154
57010: GO 57012
57012: DISABLE
57013: LD_INT 0
57015: PPUSH
57016: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57017: LD_ADDR_VAR 0 1
57021: PUSH
57022: LD_INT 22
57024: PUSH
57025: LD_OWVAR 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 30
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 30
57049: PUSH
57050: LD_INT 1
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PPUSH
57066: CALL_OW 69
57070: ST_TO_ADDR
// if not depot then
57071: LD_VAR 0 1
57075: NOT
57076: IFFALSE 57080
// exit ;
57078: GO 57154
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
57080: LD_ADDR_VAR 0 2
57084: PUSH
57085: LD_VAR 0 1
57089: PUSH
57090: LD_INT 1
57092: PPUSH
57093: LD_VAR 0 1
57097: PPUSH
57098: CALL_OW 12
57102: ARRAY
57103: PPUSH
57104: CALL_OW 274
57108: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
57109: LD_VAR 0 2
57113: PPUSH
57114: LD_INT 1
57116: PPUSH
57117: LD_INT 0
57119: PPUSH
57120: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
57124: LD_VAR 0 2
57128: PPUSH
57129: LD_INT 2
57131: PPUSH
57132: LD_INT 0
57134: PPUSH
57135: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
57139: LD_VAR 0 2
57143: PPUSH
57144: LD_INT 3
57146: PPUSH
57147: LD_INT 0
57149: PPUSH
57150: CALL_OW 277
// end ;
57154: PPOPN 2
57156: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
57157: LD_EXP 30
57161: PUSH
57162: LD_EXP 58
57166: AND
57167: IFFALSE 57264
57169: GO 57171
57171: DISABLE
57172: LD_INT 0
57174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
57175: LD_ADDR_VAR 0 1
57179: PUSH
57180: LD_INT 22
57182: PUSH
57183: LD_OWVAR 2
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 21
57194: PUSH
57195: LD_INT 1
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: LD_INT 23
57207: PUSH
57208: LD_INT 0
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: LIST
57223: PPUSH
57224: CALL_OW 69
57228: ST_TO_ADDR
// if not tmp then
57229: LD_VAR 0 1
57233: NOT
57234: IFFALSE 57238
// exit ;
57236: GO 57264
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
57238: LD_VAR 0 1
57242: PUSH
57243: LD_INT 1
57245: PPUSH
57246: LD_VAR 0 1
57250: PPUSH
57251: CALL_OW 12
57255: ARRAY
57256: PPUSH
57257: LD_INT 200
57259: PPUSH
57260: CALL_OW 234
// end ;
57264: PPOPN 1
57266: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
57267: LD_EXP 30
57271: PUSH
57272: LD_EXP 59
57276: AND
57277: IFFALSE 57356
57279: GO 57281
57281: DISABLE
57282: LD_INT 0
57284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
57285: LD_ADDR_VAR 0 1
57289: PUSH
57290: LD_INT 22
57292: PUSH
57293: LD_OWVAR 2
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 21
57304: PUSH
57305: LD_INT 2
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PPUSH
57316: CALL_OW 69
57320: ST_TO_ADDR
// if not tmp then
57321: LD_VAR 0 1
57325: NOT
57326: IFFALSE 57330
// exit ;
57328: GO 57356
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
57330: LD_VAR 0 1
57334: PUSH
57335: LD_INT 1
57337: PPUSH
57338: LD_VAR 0 1
57342: PPUSH
57343: CALL_OW 12
57347: ARRAY
57348: PPUSH
57349: LD_INT 60
57351: PPUSH
57352: CALL_OW 234
// end ;
57356: PPOPN 1
57358: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
57359: LD_EXP 30
57363: PUSH
57364: LD_EXP 60
57368: AND
57369: IFFALSE 57468
57371: GO 57373
57373: DISABLE
57374: LD_INT 0
57376: PPUSH
57377: PPUSH
// begin enable ;
57378: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
57379: LD_ADDR_VAR 0 1
57383: PUSH
57384: LD_INT 22
57386: PUSH
57387: LD_OWVAR 2
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 61
57398: PUSH
57399: EMPTY
57400: LIST
57401: PUSH
57402: LD_INT 33
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: PPUSH
57417: CALL_OW 69
57421: ST_TO_ADDR
// if not tmp then
57422: LD_VAR 0 1
57426: NOT
57427: IFFALSE 57431
// exit ;
57429: GO 57468
// for i in tmp do
57431: LD_ADDR_VAR 0 2
57435: PUSH
57436: LD_VAR 0 1
57440: PUSH
57441: FOR_IN
57442: IFFALSE 57466
// if IsControledBy ( i ) then
57444: LD_VAR 0 2
57448: PPUSH
57449: CALL_OW 312
57453: IFFALSE 57464
// ComUnlink ( i ) ;
57455: LD_VAR 0 2
57459: PPUSH
57460: CALL_OW 136
57464: GO 57441
57466: POP
57467: POP
// end ;
57468: PPOPN 2
57470: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
57471: LD_EXP 30
57475: PUSH
57476: LD_EXP 61
57480: AND
57481: IFFALSE 57621
57483: GO 57485
57485: DISABLE
57486: LD_INT 0
57488: PPUSH
57489: PPUSH
// begin ToLua ( displayPowell(); ) ;
57490: LD_STRING displayPowell();
57492: PPUSH
57493: CALL_OW 559
// uc_side := 0 ;
57497: LD_ADDR_OWVAR 20
57501: PUSH
57502: LD_INT 0
57504: ST_TO_ADDR
// uc_nation := 2 ;
57505: LD_ADDR_OWVAR 21
57509: PUSH
57510: LD_INT 2
57512: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
57513: LD_ADDR_OWVAR 37
57517: PUSH
57518: LD_INT 14
57520: ST_TO_ADDR
// vc_engine := engine_siberite ;
57521: LD_ADDR_OWVAR 39
57525: PUSH
57526: LD_INT 3
57528: ST_TO_ADDR
// vc_control := control_apeman ;
57529: LD_ADDR_OWVAR 38
57533: PUSH
57534: LD_INT 5
57536: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
57537: LD_ADDR_OWVAR 40
57541: PUSH
57542: LD_INT 29
57544: ST_TO_ADDR
// un := CreateVehicle ;
57545: LD_ADDR_VAR 0 2
57549: PUSH
57550: CALL_OW 45
57554: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
57555: LD_VAR 0 2
57559: PPUSH
57560: LD_INT 1
57562: PPUSH
57563: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
57567: LD_INT 35
57569: PPUSH
57570: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
57574: LD_VAR 0 2
57578: PPUSH
57579: LD_INT 22
57581: PUSH
57582: LD_OWVAR 2
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PPUSH
57591: CALL_OW 69
57595: PPUSH
57596: LD_VAR 0 2
57600: PPUSH
57601: CALL_OW 74
57605: PPUSH
57606: CALL_OW 115
// until IsDead ( un ) ;
57610: LD_VAR 0 2
57614: PPUSH
57615: CALL_OW 301
57619: IFFALSE 57567
// end ;
57621: PPOPN 2
57623: END
// every 0 0$1 trigger StreamModeActive and sStu do
57624: LD_EXP 30
57628: PUSH
57629: LD_EXP 69
57633: AND
57634: IFFALSE 57650
57636: GO 57638
57638: DISABLE
// begin ToLua ( displayStucuk(); ) ;
57639: LD_STRING displayStucuk();
57641: PPUSH
57642: CALL_OW 559
// ResetFog ;
57646: CALL_OW 335
// end ;
57650: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
57651: LD_EXP 30
57655: PUSH
57656: LD_EXP 62
57660: AND
57661: IFFALSE 57802
57663: GO 57665
57665: DISABLE
57666: LD_INT 0
57668: PPUSH
57669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57670: LD_ADDR_VAR 0 2
57674: PUSH
57675: LD_INT 22
57677: PUSH
57678: LD_OWVAR 2
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 21
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PPUSH
57701: CALL_OW 69
57705: ST_TO_ADDR
// if not tmp then
57706: LD_VAR 0 2
57710: NOT
57711: IFFALSE 57715
// exit ;
57713: GO 57802
// un := tmp [ rand ( 1 , tmp ) ] ;
57715: LD_ADDR_VAR 0 1
57719: PUSH
57720: LD_VAR 0 2
57724: PUSH
57725: LD_INT 1
57727: PPUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: CALL_OW 12
57737: ARRAY
57738: ST_TO_ADDR
// SetSide ( un , 0 ) ;
57739: LD_VAR 0 1
57743: PPUSH
57744: LD_INT 0
57746: PPUSH
57747: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
57751: LD_VAR 0 1
57755: PPUSH
57756: LD_OWVAR 3
57760: PUSH
57761: LD_VAR 0 1
57765: DIFF
57766: PPUSH
57767: LD_VAR 0 1
57771: PPUSH
57772: CALL_OW 74
57776: PPUSH
57777: CALL_OW 115
// wait ( 0 0$20 ) ;
57781: LD_INT 700
57783: PPUSH
57784: CALL_OW 67
// SetSide ( un , your_side ) ;
57788: LD_VAR 0 1
57792: PPUSH
57793: LD_OWVAR 2
57797: PPUSH
57798: CALL_OW 235
// end ;
57802: PPOPN 2
57804: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
57805: LD_EXP 30
57809: PUSH
57810: LD_EXP 63
57814: AND
57815: IFFALSE 57921
57817: GO 57819
57819: DISABLE
57820: LD_INT 0
57822: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
57823: LD_ADDR_VAR 0 1
57827: PUSH
57828: LD_INT 22
57830: PUSH
57831: LD_OWVAR 2
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 2
57842: PUSH
57843: LD_INT 30
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 30
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PPUSH
57872: CALL_OW 69
57876: ST_TO_ADDR
// if not depot then
57877: LD_VAR 0 1
57881: NOT
57882: IFFALSE 57886
// exit ;
57884: GO 57921
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
57886: LD_VAR 0 1
57890: PUSH
57891: LD_INT 1
57893: ARRAY
57894: PPUSH
57895: CALL_OW 250
57899: PPUSH
57900: LD_VAR 0 1
57904: PUSH
57905: LD_INT 1
57907: ARRAY
57908: PPUSH
57909: CALL_OW 251
57913: PPUSH
57914: LD_INT 70
57916: PPUSH
57917: CALL_OW 495
// end ;
57921: PPOPN 1
57923: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
57924: LD_EXP 30
57928: PUSH
57929: LD_EXP 64
57933: AND
57934: IFFALSE 58145
57936: GO 57938
57938: DISABLE
57939: LD_INT 0
57941: PPUSH
57942: PPUSH
57943: PPUSH
57944: PPUSH
57945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57946: LD_ADDR_VAR 0 5
57950: PUSH
57951: LD_INT 22
57953: PUSH
57954: LD_OWVAR 2
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 21
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PPUSH
57977: CALL_OW 69
57981: ST_TO_ADDR
// if not tmp then
57982: LD_VAR 0 5
57986: NOT
57987: IFFALSE 57991
// exit ;
57989: GO 58145
// for i in tmp do
57991: LD_ADDR_VAR 0 1
57995: PUSH
57996: LD_VAR 0 5
58000: PUSH
58001: FOR_IN
58002: IFFALSE 58143
// begin d := rand ( 0 , 5 ) ;
58004: LD_ADDR_VAR 0 4
58008: PUSH
58009: LD_INT 0
58011: PPUSH
58012: LD_INT 5
58014: PPUSH
58015: CALL_OW 12
58019: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
58020: LD_ADDR_VAR 0 2
58024: PUSH
58025: LD_VAR 0 1
58029: PPUSH
58030: CALL_OW 250
58034: PPUSH
58035: LD_VAR 0 4
58039: PPUSH
58040: LD_INT 3
58042: PPUSH
58043: LD_INT 12
58045: PPUSH
58046: CALL_OW 12
58050: PPUSH
58051: CALL_OW 272
58055: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
58056: LD_ADDR_VAR 0 3
58060: PUSH
58061: LD_VAR 0 1
58065: PPUSH
58066: CALL_OW 251
58070: PPUSH
58071: LD_VAR 0 4
58075: PPUSH
58076: LD_INT 3
58078: PPUSH
58079: LD_INT 12
58081: PPUSH
58082: CALL_OW 12
58086: PPUSH
58087: CALL_OW 273
58091: ST_TO_ADDR
// if ValidHex ( x , y ) then
58092: LD_VAR 0 2
58096: PPUSH
58097: LD_VAR 0 3
58101: PPUSH
58102: CALL_OW 488
58106: IFFALSE 58141
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
58108: LD_VAR 0 1
58112: PPUSH
58113: LD_VAR 0 2
58117: PPUSH
58118: LD_VAR 0 3
58122: PPUSH
58123: LD_INT 3
58125: PPUSH
58126: LD_INT 6
58128: PPUSH
58129: CALL_OW 12
58133: PPUSH
58134: LD_INT 1
58136: PPUSH
58137: CALL_OW 483
// end ;
58141: GO 58001
58143: POP
58144: POP
// end ;
58145: PPOPN 5
58147: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
58148: LD_EXP 30
58152: PUSH
58153: LD_EXP 65
58157: AND
58158: IFFALSE 58252
58160: GO 58162
58162: DISABLE
58163: LD_INT 0
58165: PPUSH
58166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
58167: LD_ADDR_VAR 0 2
58171: PUSH
58172: LD_INT 22
58174: PUSH
58175: LD_OWVAR 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 32
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 21
58196: PUSH
58197: LD_INT 2
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: PPUSH
58209: CALL_OW 69
58213: ST_TO_ADDR
// if not tmp then
58214: LD_VAR 0 2
58218: NOT
58219: IFFALSE 58223
// exit ;
58221: GO 58252
// for i in tmp do
58223: LD_ADDR_VAR 0 1
58227: PUSH
58228: LD_VAR 0 2
58232: PUSH
58233: FOR_IN
58234: IFFALSE 58250
// SetFuel ( i , 0 ) ;
58236: LD_VAR 0 1
58240: PPUSH
58241: LD_INT 0
58243: PPUSH
58244: CALL_OW 240
58248: GO 58233
58250: POP
58251: POP
// end ;
58252: PPOPN 2
58254: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
58255: LD_EXP 30
58259: PUSH
58260: LD_EXP 66
58264: AND
58265: IFFALSE 58331
58267: GO 58269
58269: DISABLE
58270: LD_INT 0
58272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
58273: LD_ADDR_VAR 0 1
58277: PUSH
58278: LD_INT 22
58280: PUSH
58281: LD_OWVAR 2
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 30
58292: PUSH
58293: LD_INT 29
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PPUSH
58304: CALL_OW 69
58308: ST_TO_ADDR
// if not tmp then
58309: LD_VAR 0 1
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 58331
// DestroyUnit ( tmp [ 1 ] ) ;
58318: LD_VAR 0 1
58322: PUSH
58323: LD_INT 1
58325: ARRAY
58326: PPUSH
58327: CALL_OW 65
// end ;
58331: PPOPN 1
58333: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
58334: LD_EXP 30
58338: PUSH
58339: LD_EXP 68
58343: AND
58344: IFFALSE 58473
58346: GO 58348
58348: DISABLE
58349: LD_INT 0
58351: PPUSH
// begin uc_side := 0 ;
58352: LD_ADDR_OWVAR 20
58356: PUSH
58357: LD_INT 0
58359: ST_TO_ADDR
// uc_nation := nation_arabian ;
58360: LD_ADDR_OWVAR 21
58364: PUSH
58365: LD_INT 2
58367: ST_TO_ADDR
// hc_gallery :=  ;
58368: LD_ADDR_OWVAR 33
58372: PUSH
58373: LD_STRING 
58375: ST_TO_ADDR
// hc_name :=  ;
58376: LD_ADDR_OWVAR 26
58380: PUSH
58381: LD_STRING 
58383: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
58384: LD_INT 1
58386: PPUSH
58387: LD_INT 11
58389: PPUSH
58390: LD_INT 10
58392: PPUSH
58393: CALL_OW 380
// un := CreateHuman ;
58397: LD_ADDR_VAR 0 1
58401: PUSH
58402: CALL_OW 44
58406: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
58407: LD_VAR 0 1
58411: PPUSH
58412: LD_INT 1
58414: PPUSH
58415: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
58419: LD_INT 35
58421: PPUSH
58422: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
58426: LD_VAR 0 1
58430: PPUSH
58431: LD_INT 22
58433: PUSH
58434: LD_OWVAR 2
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PPUSH
58443: CALL_OW 69
58447: PPUSH
58448: LD_VAR 0 1
58452: PPUSH
58453: CALL_OW 74
58457: PPUSH
58458: CALL_OW 115
// until IsDead ( un ) ;
58462: LD_VAR 0 1
58466: PPUSH
58467: CALL_OW 301
58471: IFFALSE 58419
// end ;
58473: PPOPN 1
58475: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
58476: LD_EXP 30
58480: PUSH
58481: LD_EXP 70
58485: AND
58486: IFFALSE 58498
58488: GO 58490
58490: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
58491: LD_STRING earthquake(getX(game), 0, 32)
58493: PPUSH
58494: CALL_OW 559
58498: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
58499: LD_EXP 30
58503: PUSH
58504: LD_EXP 71
58508: AND
58509: IFFALSE 58600
58511: GO 58513
58513: DISABLE
58514: LD_INT 0
58516: PPUSH
// begin enable ;
58517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
58518: LD_ADDR_VAR 0 1
58522: PUSH
58523: LD_INT 22
58525: PUSH
58526: LD_OWVAR 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 21
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 33
58547: PUSH
58548: LD_INT 3
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: LIST
58559: PPUSH
58560: CALL_OW 69
58564: ST_TO_ADDR
// if not tmp then
58565: LD_VAR 0 1
58569: NOT
58570: IFFALSE 58574
// exit ;
58572: GO 58600
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
58574: LD_VAR 0 1
58578: PUSH
58579: LD_INT 1
58581: PPUSH
58582: LD_VAR 0 1
58586: PPUSH
58587: CALL_OW 12
58591: ARRAY
58592: PPUSH
58593: LD_INT 1
58595: PPUSH
58596: CALL_OW 234
// end ;
58600: PPOPN 1
58602: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
58603: LD_EXP 30
58607: PUSH
58608: LD_EXP 72
58612: AND
58613: IFFALSE 58754
58615: GO 58617
58617: DISABLE
58618: LD_INT 0
58620: PPUSH
58621: PPUSH
58622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58623: LD_ADDR_VAR 0 3
58627: PUSH
58628: LD_INT 22
58630: PUSH
58631: LD_OWVAR 2
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 25
58642: PUSH
58643: LD_INT 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PPUSH
58654: CALL_OW 69
58658: ST_TO_ADDR
// if not tmp then
58659: LD_VAR 0 3
58663: NOT
58664: IFFALSE 58668
// exit ;
58666: GO 58754
// un := tmp [ rand ( 1 , tmp ) ] ;
58668: LD_ADDR_VAR 0 2
58672: PUSH
58673: LD_VAR 0 3
58677: PUSH
58678: LD_INT 1
58680: PPUSH
58681: LD_VAR 0 3
58685: PPUSH
58686: CALL_OW 12
58690: ARRAY
58691: ST_TO_ADDR
// if Crawls ( un ) then
58692: LD_VAR 0 2
58696: PPUSH
58697: CALL_OW 318
58701: IFFALSE 58712
// ComWalk ( un ) ;
58703: LD_VAR 0 2
58707: PPUSH
58708: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
58712: LD_VAR 0 2
58716: PPUSH
58717: LD_INT 9
58719: PPUSH
58720: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
58724: LD_INT 28
58726: PPUSH
58727: LD_OWVAR 2
58731: PPUSH
58732: LD_INT 2
58734: PPUSH
58735: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
58739: LD_INT 29
58741: PPUSH
58742: LD_OWVAR 2
58746: PPUSH
58747: LD_INT 2
58749: PPUSH
58750: CALL_OW 322
// end ;
58754: PPOPN 3
58756: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
58757: LD_EXP 30
58761: PUSH
58762: LD_EXP 73
58766: AND
58767: IFFALSE 58878
58769: GO 58771
58771: DISABLE
58772: LD_INT 0
58774: PPUSH
58775: PPUSH
58776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
58777: LD_ADDR_VAR 0 3
58781: PUSH
58782: LD_INT 22
58784: PUSH
58785: LD_OWVAR 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 25
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PPUSH
58808: CALL_OW 69
58812: ST_TO_ADDR
// if not tmp then
58813: LD_VAR 0 3
58817: NOT
58818: IFFALSE 58822
// exit ;
58820: GO 58878
// un := tmp [ rand ( 1 , tmp ) ] ;
58822: LD_ADDR_VAR 0 2
58826: PUSH
58827: LD_VAR 0 3
58831: PUSH
58832: LD_INT 1
58834: PPUSH
58835: LD_VAR 0 3
58839: PPUSH
58840: CALL_OW 12
58844: ARRAY
58845: ST_TO_ADDR
// if Crawls ( un ) then
58846: LD_VAR 0 2
58850: PPUSH
58851: CALL_OW 318
58855: IFFALSE 58866
// ComWalk ( un ) ;
58857: LD_VAR 0 2
58861: PPUSH
58862: CALL_OW 138
// SetClass ( un , class_mortar ) ;
58866: LD_VAR 0 2
58870: PPUSH
58871: LD_INT 8
58873: PPUSH
58874: CALL_OW 336
// end ;
58878: PPOPN 3
58880: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
58881: LD_EXP 30
58885: PUSH
58886: LD_EXP 74
58890: AND
58891: IFFALSE 59035
58893: GO 58895
58895: DISABLE
58896: LD_INT 0
58898: PPUSH
58899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
58900: LD_ADDR_VAR 0 2
58904: PUSH
58905: LD_INT 22
58907: PUSH
58908: LD_OWVAR 2
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 21
58919: PUSH
58920: LD_INT 2
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 2
58929: PUSH
58930: LD_INT 34
58932: PUSH
58933: LD_INT 12
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 34
58942: PUSH
58943: LD_INT 51
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 34
58952: PUSH
58953: LD_INT 32
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: PPUSH
58971: CALL_OW 69
58975: ST_TO_ADDR
// if not tmp then
58976: LD_VAR 0 2
58980: NOT
58981: IFFALSE 58985
// exit ;
58983: GO 59035
// for i in tmp do
58985: LD_ADDR_VAR 0 1
58989: PUSH
58990: LD_VAR 0 2
58994: PUSH
58995: FOR_IN
58996: IFFALSE 59033
// if GetCargo ( i , mat_artifact ) = 0 then
58998: LD_VAR 0 1
59002: PPUSH
59003: LD_INT 4
59005: PPUSH
59006: CALL_OW 289
59010: PUSH
59011: LD_INT 0
59013: EQUAL
59014: IFFALSE 59031
// SetCargo ( i , mat_siberit , 100 ) ;
59016: LD_VAR 0 1
59020: PPUSH
59021: LD_INT 3
59023: PPUSH
59024: LD_INT 100
59026: PPUSH
59027: CALL_OW 290
59031: GO 58995
59033: POP
59034: POP
// end ;
59035: PPOPN 2
59037: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
59038: LD_EXP 30
59042: PUSH
59043: LD_EXP 75
59047: AND
59048: IFFALSE 59231
59050: GO 59052
59052: DISABLE
59053: LD_INT 0
59055: PPUSH
59056: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
59057: LD_ADDR_VAR 0 2
59061: PUSH
59062: LD_INT 22
59064: PUSH
59065: LD_OWVAR 2
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PPUSH
59074: CALL_OW 69
59078: ST_TO_ADDR
// if not tmp then
59079: LD_VAR 0 2
59083: NOT
59084: IFFALSE 59088
// exit ;
59086: GO 59231
// for i := 1 to 2 do
59088: LD_ADDR_VAR 0 1
59092: PUSH
59093: DOUBLE
59094: LD_INT 1
59096: DEC
59097: ST_TO_ADDR
59098: LD_INT 2
59100: PUSH
59101: FOR_TO
59102: IFFALSE 59229
// begin uc_side := your_side ;
59104: LD_ADDR_OWVAR 20
59108: PUSH
59109: LD_OWVAR 2
59113: ST_TO_ADDR
// uc_nation := nation_american ;
59114: LD_ADDR_OWVAR 21
59118: PUSH
59119: LD_INT 1
59121: ST_TO_ADDR
// vc_chassis := us_morphling ;
59122: LD_ADDR_OWVAR 37
59126: PUSH
59127: LD_INT 5
59129: ST_TO_ADDR
// vc_engine := engine_siberite ;
59130: LD_ADDR_OWVAR 39
59134: PUSH
59135: LD_INT 3
59137: ST_TO_ADDR
// vc_control := control_computer ;
59138: LD_ADDR_OWVAR 38
59142: PUSH
59143: LD_INT 3
59145: ST_TO_ADDR
// vc_weapon := us_double_laser ;
59146: LD_ADDR_OWVAR 40
59150: PUSH
59151: LD_INT 10
59153: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
59154: LD_VAR 0 2
59158: PUSH
59159: LD_INT 1
59161: ARRAY
59162: PPUSH
59163: CALL_OW 310
59167: NOT
59168: IFFALSE 59215
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
59170: CALL_OW 45
59174: PPUSH
59175: LD_VAR 0 2
59179: PUSH
59180: LD_INT 1
59182: ARRAY
59183: PPUSH
59184: CALL_OW 250
59188: PPUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: PPUSH
59198: CALL_OW 251
59202: PPUSH
59203: LD_INT 12
59205: PPUSH
59206: LD_INT 1
59208: PPUSH
59209: CALL_OW 50
59213: GO 59227
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
59215: CALL_OW 45
59219: PPUSH
59220: LD_INT 1
59222: PPUSH
59223: CALL_OW 51
// end ;
59227: GO 59101
59229: POP
59230: POP
// end ;
59231: PPOPN 2
59233: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
59234: LD_EXP 30
59238: PUSH
59239: LD_EXP 76
59243: AND
59244: IFFALSE 59466
59246: GO 59248
59248: DISABLE
59249: LD_INT 0
59251: PPUSH
59252: PPUSH
59253: PPUSH
59254: PPUSH
59255: PPUSH
59256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59257: LD_ADDR_VAR 0 6
59261: PUSH
59262: LD_INT 22
59264: PUSH
59265: LD_OWVAR 2
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 21
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: PUSH
59287: LD_INT 23
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: LIST
59305: PPUSH
59306: CALL_OW 69
59310: ST_TO_ADDR
// if not tmp then
59311: LD_VAR 0 6
59315: NOT
59316: IFFALSE 59320
// exit ;
59318: GO 59466
// s1 := rand ( 1 , 4 ) ;
59320: LD_ADDR_VAR 0 2
59324: PUSH
59325: LD_INT 1
59327: PPUSH
59328: LD_INT 4
59330: PPUSH
59331: CALL_OW 12
59335: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
59336: LD_ADDR_VAR 0 4
59340: PUSH
59341: LD_VAR 0 6
59345: PUSH
59346: LD_INT 1
59348: ARRAY
59349: PPUSH
59350: LD_VAR 0 2
59354: PPUSH
59355: CALL_OW 259
59359: ST_TO_ADDR
// if s1 = 1 then
59360: LD_VAR 0 2
59364: PUSH
59365: LD_INT 1
59367: EQUAL
59368: IFFALSE 59388
// s2 := rand ( 2 , 4 ) else
59370: LD_ADDR_VAR 0 3
59374: PUSH
59375: LD_INT 2
59377: PPUSH
59378: LD_INT 4
59380: PPUSH
59381: CALL_OW 12
59385: ST_TO_ADDR
59386: GO 59396
// s2 := 1 ;
59388: LD_ADDR_VAR 0 3
59392: PUSH
59393: LD_INT 1
59395: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
59396: LD_ADDR_VAR 0 5
59400: PUSH
59401: LD_VAR 0 6
59405: PUSH
59406: LD_INT 1
59408: ARRAY
59409: PPUSH
59410: LD_VAR 0 3
59414: PPUSH
59415: CALL_OW 259
59419: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
59420: LD_VAR 0 6
59424: PUSH
59425: LD_INT 1
59427: ARRAY
59428: PPUSH
59429: LD_VAR 0 2
59433: PPUSH
59434: LD_VAR 0 5
59438: PPUSH
59439: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
59443: LD_VAR 0 6
59447: PUSH
59448: LD_INT 1
59450: ARRAY
59451: PPUSH
59452: LD_VAR 0 3
59456: PPUSH
59457: LD_VAR 0 4
59461: PPUSH
59462: CALL_OW 237
// end ;
59466: PPOPN 6
59468: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
59469: LD_EXP 30
59473: PUSH
59474: LD_EXP 77
59478: AND
59479: IFFALSE 59558
59481: GO 59483
59483: DISABLE
59484: LD_INT 0
59486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
59487: LD_ADDR_VAR 0 1
59491: PUSH
59492: LD_INT 22
59494: PUSH
59495: LD_OWVAR 2
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 30
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PPUSH
59518: CALL_OW 69
59522: ST_TO_ADDR
// if not tmp then
59523: LD_VAR 0 1
59527: NOT
59528: IFFALSE 59532
// exit ;
59530: GO 59558
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
59532: LD_VAR 0 1
59536: PUSH
59537: LD_INT 1
59539: PPUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: CALL_OW 12
59549: ARRAY
59550: PPUSH
59551: LD_INT 1
59553: PPUSH
59554: CALL_OW 234
// end ;
59558: PPOPN 1
59560: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
59561: LD_EXP 30
59565: PUSH
59566: LD_EXP 78
59570: AND
59571: IFFALSE 59683
59573: GO 59575
59575: DISABLE
59576: LD_INT 0
59578: PPUSH
59579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
59580: LD_ADDR_VAR 0 2
59584: PUSH
59585: LD_INT 22
59587: PUSH
59588: LD_OWVAR 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 2
59599: PUSH
59600: LD_INT 30
59602: PUSH
59603: LD_INT 27
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 30
59612: PUSH
59613: LD_INT 26
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 30
59622: PUSH
59623: LD_INT 28
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PPUSH
59640: CALL_OW 69
59644: ST_TO_ADDR
// if not tmp then
59645: LD_VAR 0 2
59649: NOT
59650: IFFALSE 59654
// exit ;
59652: GO 59683
// for i in tmp do
59654: LD_ADDR_VAR 0 1
59658: PUSH
59659: LD_VAR 0 2
59663: PUSH
59664: FOR_IN
59665: IFFALSE 59681
// SetLives ( i , 1 ) ;
59667: LD_VAR 0 1
59671: PPUSH
59672: LD_INT 1
59674: PPUSH
59675: CALL_OW 234
59679: GO 59664
59681: POP
59682: POP
// end ;
59683: PPOPN 2
59685: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
59686: LD_EXP 30
59690: PUSH
59691: LD_EXP 79
59695: AND
59696: IFFALSE 59983
59698: GO 59700
59700: DISABLE
59701: LD_INT 0
59703: PPUSH
59704: PPUSH
59705: PPUSH
// begin i := rand ( 1 , 7 ) ;
59706: LD_ADDR_VAR 0 1
59710: PUSH
59711: LD_INT 1
59713: PPUSH
59714: LD_INT 7
59716: PPUSH
59717: CALL_OW 12
59721: ST_TO_ADDR
// case i of 1 :
59722: LD_VAR 0 1
59726: PUSH
59727: LD_INT 1
59729: DOUBLE
59730: EQUAL
59731: IFTRUE 59735
59733: GO 59745
59735: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
59736: LD_STRING earthquake(getX(game), 0, 32)
59738: PPUSH
59739: CALL_OW 559
59743: GO 59983
59745: LD_INT 2
59747: DOUBLE
59748: EQUAL
59749: IFTRUE 59753
59751: GO 59767
59753: POP
// begin ToLua ( displayStucuk(); ) ;
59754: LD_STRING displayStucuk();
59756: PPUSH
59757: CALL_OW 559
// ResetFog ;
59761: CALL_OW 335
// end ; 3 :
59765: GO 59983
59767: LD_INT 3
59769: DOUBLE
59770: EQUAL
59771: IFTRUE 59775
59773: GO 59879
59775: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
59776: LD_ADDR_VAR 0 2
59780: PUSH
59781: LD_INT 22
59783: PUSH
59784: LD_OWVAR 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 25
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PPUSH
59807: CALL_OW 69
59811: ST_TO_ADDR
// if not tmp then
59812: LD_VAR 0 2
59816: NOT
59817: IFFALSE 59821
// exit ;
59819: GO 59983
// un := tmp [ rand ( 1 , tmp ) ] ;
59821: LD_ADDR_VAR 0 3
59825: PUSH
59826: LD_VAR 0 2
59830: PUSH
59831: LD_INT 1
59833: PPUSH
59834: LD_VAR 0 2
59838: PPUSH
59839: CALL_OW 12
59843: ARRAY
59844: ST_TO_ADDR
// if Crawls ( un ) then
59845: LD_VAR 0 3
59849: PPUSH
59850: CALL_OW 318
59854: IFFALSE 59865
// ComWalk ( un ) ;
59856: LD_VAR 0 3
59860: PPUSH
59861: CALL_OW 138
// SetClass ( un , class_mortar ) ;
59865: LD_VAR 0 3
59869: PPUSH
59870: LD_INT 8
59872: PPUSH
59873: CALL_OW 336
// end ; 4 :
59877: GO 59983
59879: LD_INT 4
59881: DOUBLE
59882: EQUAL
59883: IFTRUE 59887
59885: GO 59961
59887: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
59888: LD_ADDR_VAR 0 2
59892: PUSH
59893: LD_INT 22
59895: PUSH
59896: LD_OWVAR 2
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 30
59907: PUSH
59908: LD_INT 29
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: EMPTY
59916: LIST
59917: LIST
59918: PPUSH
59919: CALL_OW 69
59923: ST_TO_ADDR
// if not tmp then
59924: LD_VAR 0 2
59928: NOT
59929: IFFALSE 59933
// exit ;
59931: GO 59983
// CenterNowOnUnits ( tmp [ 1 ] ) ;
59933: LD_VAR 0 2
59937: PUSH
59938: LD_INT 1
59940: ARRAY
59941: PPUSH
59942: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
59946: LD_VAR 0 2
59950: PUSH
59951: LD_INT 1
59953: ARRAY
59954: PPUSH
59955: CALL_OW 65
// end ; 5 .. 7 :
59959: GO 59983
59961: LD_INT 5
59963: DOUBLE
59964: GREATEREQUAL
59965: IFFALSE 59973
59967: LD_INT 7
59969: DOUBLE
59970: LESSEQUAL
59971: IFTRUE 59975
59973: GO 59982
59975: POP
// StreamSibBomb ; end ;
59976: CALL 56220 0 0
59980: GO 59983
59982: POP
// end ;
59983: PPOPN 3
59985: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
59986: LD_EXP 30
59990: PUSH
59991: LD_EXP 80
59995: AND
59996: IFFALSE 60152
59998: GO 60000
60000: DISABLE
60001: LD_INT 0
60003: PPUSH
60004: PPUSH
60005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
60006: LD_ADDR_VAR 0 2
60010: PUSH
60011: LD_INT 81
60013: PUSH
60014: LD_OWVAR 2
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: LD_INT 21
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 21
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: LIST
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PPUSH
60055: CALL_OW 69
60059: ST_TO_ADDR
// if not tmp then
60060: LD_VAR 0 2
60064: NOT
60065: IFFALSE 60069
// exit ;
60067: GO 60152
// p := 0 ;
60069: LD_ADDR_VAR 0 3
60073: PUSH
60074: LD_INT 0
60076: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60077: LD_INT 35
60079: PPUSH
60080: CALL_OW 67
// p := p + 1 ;
60084: LD_ADDR_VAR 0 3
60088: PUSH
60089: LD_VAR 0 3
60093: PUSH
60094: LD_INT 1
60096: PLUS
60097: ST_TO_ADDR
// for i in tmp do
60098: LD_ADDR_VAR 0 1
60102: PUSH
60103: LD_VAR 0 2
60107: PUSH
60108: FOR_IN
60109: IFFALSE 60140
// if GetLives ( i ) < 1000 then
60111: LD_VAR 0 1
60115: PPUSH
60116: CALL_OW 256
60120: PUSH
60121: LD_INT 1000
60123: LESS
60124: IFFALSE 60138
// SetLives ( i , 1000 ) ;
60126: LD_VAR 0 1
60130: PPUSH
60131: LD_INT 1000
60133: PPUSH
60134: CALL_OW 234
60138: GO 60108
60140: POP
60141: POP
// until p > 20 ;
60142: LD_VAR 0 3
60146: PUSH
60147: LD_INT 20
60149: GREATER
60150: IFFALSE 60077
// end ;
60152: PPOPN 3
60154: END
// every 0 0$1 trigger StreamModeActive and sTime do
60155: LD_EXP 30
60159: PUSH
60160: LD_EXP 81
60164: AND
60165: IFFALSE 60200
60167: GO 60169
60169: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
60170: LD_INT 28
60172: PPUSH
60173: LD_OWVAR 2
60177: PPUSH
60178: LD_INT 2
60180: PPUSH
60181: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
60185: LD_INT 30
60187: PPUSH
60188: LD_OWVAR 2
60192: PPUSH
60193: LD_INT 2
60195: PPUSH
60196: CALL_OW 322
// end ;
60200: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
60201: LD_EXP 30
60205: PUSH
60206: LD_EXP 82
60210: AND
60211: IFFALSE 60332
60213: GO 60215
60215: DISABLE
60216: LD_INT 0
60218: PPUSH
60219: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
60220: LD_ADDR_VAR 0 2
60224: PUSH
60225: LD_INT 22
60227: PUSH
60228: LD_OWVAR 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 21
60239: PUSH
60240: LD_INT 1
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 3
60249: PUSH
60250: LD_INT 23
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: PPUSH
60269: CALL_OW 69
60273: ST_TO_ADDR
// if not tmp then
60274: LD_VAR 0 2
60278: NOT
60279: IFFALSE 60283
// exit ;
60281: GO 60332
// for i in tmp do
60283: LD_ADDR_VAR 0 1
60287: PUSH
60288: LD_VAR 0 2
60292: PUSH
60293: FOR_IN
60294: IFFALSE 60330
// begin if Crawls ( i ) then
60296: LD_VAR 0 1
60300: PPUSH
60301: CALL_OW 318
60305: IFFALSE 60316
// ComWalk ( i ) ;
60307: LD_VAR 0 1
60311: PPUSH
60312: CALL_OW 138
// SetClass ( i , 2 ) ;
60316: LD_VAR 0 1
60320: PPUSH
60321: LD_INT 2
60323: PPUSH
60324: CALL_OW 336
// end ;
60328: GO 60293
60330: POP
60331: POP
// end ;
60332: PPOPN 2
60334: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
60335: LD_EXP 30
60339: PUSH
60340: LD_EXP 83
60344: AND
60345: IFFALSE 60633
60347: GO 60349
60349: DISABLE
60350: LD_INT 0
60352: PPUSH
60353: PPUSH
60354: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
60355: LD_OWVAR 2
60359: PPUSH
60360: LD_INT 9
60362: PPUSH
60363: LD_INT 1
60365: PPUSH
60366: LD_INT 1
60368: PPUSH
60369: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
60373: LD_INT 9
60375: PPUSH
60376: LD_OWVAR 2
60380: PPUSH
60381: CALL_OW 343
// uc_side := 9 ;
60385: LD_ADDR_OWVAR 20
60389: PUSH
60390: LD_INT 9
60392: ST_TO_ADDR
// uc_nation := 2 ;
60393: LD_ADDR_OWVAR 21
60397: PUSH
60398: LD_INT 2
60400: ST_TO_ADDR
// hc_name := Dark Warrior ;
60401: LD_ADDR_OWVAR 26
60405: PUSH
60406: LD_STRING Dark Warrior
60408: ST_TO_ADDR
// hc_gallery :=  ;
60409: LD_ADDR_OWVAR 33
60413: PUSH
60414: LD_STRING 
60416: ST_TO_ADDR
// hc_noskilllimit := true ;
60417: LD_ADDR_OWVAR 76
60421: PUSH
60422: LD_INT 1
60424: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
60425: LD_ADDR_OWVAR 31
60429: PUSH
60430: LD_INT 30
60432: PUSH
60433: LD_INT 30
60435: PUSH
60436: LD_INT 30
60438: PUSH
60439: LD_INT 30
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// un := CreateHuman ;
60448: LD_ADDR_VAR 0 3
60452: PUSH
60453: CALL_OW 44
60457: ST_TO_ADDR
// hc_noskilllimit := false ;
60458: LD_ADDR_OWVAR 76
60462: PUSH
60463: LD_INT 0
60465: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60466: LD_VAR 0 3
60470: PPUSH
60471: LD_INT 1
60473: PPUSH
60474: CALL_OW 51
// ToLua ( playRanger() ) ;
60478: LD_STRING playRanger()
60480: PPUSH
60481: CALL_OW 559
// p := 0 ;
60485: LD_ADDR_VAR 0 2
60489: PUSH
60490: LD_INT 0
60492: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
60493: LD_INT 35
60495: PPUSH
60496: CALL_OW 67
// p := p + 1 ;
60500: LD_ADDR_VAR 0 2
60504: PUSH
60505: LD_VAR 0 2
60509: PUSH
60510: LD_INT 1
60512: PLUS
60513: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
60514: LD_VAR 0 3
60518: PPUSH
60519: CALL_OW 256
60523: PUSH
60524: LD_INT 1000
60526: LESS
60527: IFFALSE 60541
// SetLives ( un , 1000 ) ;
60529: LD_VAR 0 3
60533: PPUSH
60534: LD_INT 1000
60536: PPUSH
60537: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
60541: LD_VAR 0 3
60545: PPUSH
60546: LD_INT 81
60548: PUSH
60549: LD_OWVAR 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 91
60560: PUSH
60561: LD_VAR 0 3
60565: PUSH
60566: LD_INT 30
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PPUSH
60578: CALL_OW 69
60582: PPUSH
60583: LD_VAR 0 3
60587: PPUSH
60588: CALL_OW 74
60592: PPUSH
60593: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
60597: LD_VAR 0 2
60601: PUSH
60602: LD_INT 80
60604: GREATER
60605: PUSH
60606: LD_VAR 0 3
60610: PPUSH
60611: CALL_OW 301
60615: OR
60616: IFFALSE 60493
// if un then
60618: LD_VAR 0 3
60622: IFFALSE 60633
// RemoveUnit ( un ) ;
60624: LD_VAR 0 3
60628: PPUSH
60629: CALL_OW 64
// end ;
60633: PPOPN 3
60635: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
60636: LD_EXP 84
60640: IFFALSE 60756
60642: GO 60644
60644: DISABLE
60645: LD_INT 0
60647: PPUSH
60648: PPUSH
60649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60650: LD_ADDR_VAR 0 2
60654: PUSH
60655: LD_INT 81
60657: PUSH
60658: LD_OWVAR 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 21
60669: PUSH
60670: LD_INT 1
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PPUSH
60681: CALL_OW 69
60685: ST_TO_ADDR
// ToLua ( playComputer() ) ;
60686: LD_STRING playComputer()
60688: PPUSH
60689: CALL_OW 559
// if not tmp then
60693: LD_VAR 0 2
60697: NOT
60698: IFFALSE 60702
// exit ;
60700: GO 60756
// for i in tmp do
60702: LD_ADDR_VAR 0 1
60706: PUSH
60707: LD_VAR 0 2
60711: PUSH
60712: FOR_IN
60713: IFFALSE 60754
// for j := 1 to 4 do
60715: LD_ADDR_VAR 0 3
60719: PUSH
60720: DOUBLE
60721: LD_INT 1
60723: DEC
60724: ST_TO_ADDR
60725: LD_INT 4
60727: PUSH
60728: FOR_TO
60729: IFFALSE 60750
// SetSkill ( i , j , 10 ) ;
60731: LD_VAR 0 1
60735: PPUSH
60736: LD_VAR 0 3
60740: PPUSH
60741: LD_INT 10
60743: PPUSH
60744: CALL_OW 237
60748: GO 60728
60750: POP
60751: POP
60752: GO 60712
60754: POP
60755: POP
// end ;
60756: PPOPN 3
60758: END
// every 0 0$1 trigger s30 do var i , tmp ;
60759: LD_EXP 85
60763: IFFALSE 60832
60765: GO 60767
60767: DISABLE
60768: LD_INT 0
60770: PPUSH
60771: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60772: LD_ADDR_VAR 0 2
60776: PUSH
60777: LD_INT 22
60779: PUSH
60780: LD_OWVAR 2
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PPUSH
60789: CALL_OW 69
60793: ST_TO_ADDR
// if not tmp then
60794: LD_VAR 0 2
60798: NOT
60799: IFFALSE 60803
// exit ;
60801: GO 60832
// for i in tmp do
60803: LD_ADDR_VAR 0 1
60807: PUSH
60808: LD_VAR 0 2
60812: PUSH
60813: FOR_IN
60814: IFFALSE 60830
// SetLives ( i , 300 ) ;
60816: LD_VAR 0 1
60820: PPUSH
60821: LD_INT 300
60823: PPUSH
60824: CALL_OW 234
60828: GO 60813
60830: POP
60831: POP
// end ;
60832: PPOPN 2
60834: END
// every 0 0$1 trigger s60 do var i , tmp ;
60835: LD_EXP 86
60839: IFFALSE 60908
60841: GO 60843
60843: DISABLE
60844: LD_INT 0
60846: PPUSH
60847: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60848: LD_ADDR_VAR 0 2
60852: PUSH
60853: LD_INT 22
60855: PUSH
60856: LD_OWVAR 2
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PPUSH
60865: CALL_OW 69
60869: ST_TO_ADDR
// if not tmp then
60870: LD_VAR 0 2
60874: NOT
60875: IFFALSE 60879
// exit ;
60877: GO 60908
// for i in tmp do
60879: LD_ADDR_VAR 0 1
60883: PUSH
60884: LD_VAR 0 2
60888: PUSH
60889: FOR_IN
60890: IFFALSE 60906
// SetLives ( i , 600 ) ;
60892: LD_VAR 0 1
60896: PPUSH
60897: LD_INT 600
60899: PPUSH
60900: CALL_OW 234
60904: GO 60889
60906: POP
60907: POP
// end ;
60908: PPOPN 2
60910: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
60911: LD_INT 0
60913: PPUSH
// case cmd of 301 :
60914: LD_VAR 0 1
60918: PUSH
60919: LD_INT 301
60921: DOUBLE
60922: EQUAL
60923: IFTRUE 60927
60925: GO 60959
60927: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
60928: LD_VAR 0 6
60932: PPUSH
60933: LD_VAR 0 7
60937: PPUSH
60938: LD_VAR 0 8
60942: PPUSH
60943: LD_VAR 0 4
60947: PPUSH
60948: LD_VAR 0 5
60952: PPUSH
60953: CALL 62168 0 5
60957: GO 61080
60959: LD_INT 302
60961: DOUBLE
60962: EQUAL
60963: IFTRUE 60967
60965: GO 61004
60967: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
60968: LD_VAR 0 6
60972: PPUSH
60973: LD_VAR 0 7
60977: PPUSH
60978: LD_VAR 0 8
60982: PPUSH
60983: LD_VAR 0 9
60987: PPUSH
60988: LD_VAR 0 4
60992: PPUSH
60993: LD_VAR 0 5
60997: PPUSH
60998: CALL 62259 0 6
61002: GO 61080
61004: LD_INT 303
61006: DOUBLE
61007: EQUAL
61008: IFTRUE 61012
61010: GO 61049
61012: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
61013: LD_VAR 0 6
61017: PPUSH
61018: LD_VAR 0 7
61022: PPUSH
61023: LD_VAR 0 8
61027: PPUSH
61028: LD_VAR 0 9
61032: PPUSH
61033: LD_VAR 0 4
61037: PPUSH
61038: LD_VAR 0 5
61042: PPUSH
61043: CALL 61085 0 6
61047: GO 61080
61049: LD_INT 304
61051: DOUBLE
61052: EQUAL
61053: IFTRUE 61057
61055: GO 61079
61057: POP
// hHackTeleport ( unit , x , y ) ; end ;
61058: LD_VAR 0 2
61062: PPUSH
61063: LD_VAR 0 4
61067: PPUSH
61068: LD_VAR 0 5
61072: PPUSH
61073: CALL 62852 0 3
61077: GO 61080
61079: POP
// end ;
61080: LD_VAR 0 12
61084: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
61085: LD_INT 0
61087: PPUSH
61088: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
61089: LD_VAR 0 1
61093: PUSH
61094: LD_INT 1
61096: LESS
61097: PUSH
61098: LD_VAR 0 1
61102: PUSH
61103: LD_INT 3
61105: GREATER
61106: OR
61107: PUSH
61108: LD_VAR 0 5
61112: PPUSH
61113: LD_VAR 0 6
61117: PPUSH
61118: CALL_OW 428
61122: OR
61123: IFFALSE 61127
// exit ;
61125: GO 61855
// uc_side := your_side ;
61127: LD_ADDR_OWVAR 20
61131: PUSH
61132: LD_OWVAR 2
61136: ST_TO_ADDR
// uc_nation := nation ;
61137: LD_ADDR_OWVAR 21
61141: PUSH
61142: LD_VAR 0 1
61146: ST_TO_ADDR
// bc_level = 1 ;
61147: LD_ADDR_OWVAR 43
61151: PUSH
61152: LD_INT 1
61154: ST_TO_ADDR
// case btype of 1 :
61155: LD_VAR 0 2
61159: PUSH
61160: LD_INT 1
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61168
61166: GO 61179
61168: POP
// bc_type := b_depot ; 2 :
61169: LD_ADDR_OWVAR 42
61173: PUSH
61174: LD_INT 0
61176: ST_TO_ADDR
61177: GO 61799
61179: LD_INT 2
61181: DOUBLE
61182: EQUAL
61183: IFTRUE 61187
61185: GO 61198
61187: POP
// bc_type := b_warehouse ; 3 :
61188: LD_ADDR_OWVAR 42
61192: PUSH
61193: LD_INT 1
61195: ST_TO_ADDR
61196: GO 61799
61198: LD_INT 3
61200: DOUBLE
61201: EQUAL
61202: IFTRUE 61206
61204: GO 61217
61206: POP
// bc_type := b_lab ; 4 .. 9 :
61207: LD_ADDR_OWVAR 42
61211: PUSH
61212: LD_INT 6
61214: ST_TO_ADDR
61215: GO 61799
61217: LD_INT 4
61219: DOUBLE
61220: GREATEREQUAL
61221: IFFALSE 61229
61223: LD_INT 9
61225: DOUBLE
61226: LESSEQUAL
61227: IFTRUE 61231
61229: GO 61291
61231: POP
// begin bc_type := b_lab_half ;
61232: LD_ADDR_OWVAR 42
61236: PUSH
61237: LD_INT 7
61239: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
61240: LD_ADDR_OWVAR 44
61244: PUSH
61245: LD_INT 10
61247: PUSH
61248: LD_INT 11
61250: PUSH
61251: LD_INT 12
61253: PUSH
61254: LD_INT 15
61256: PUSH
61257: LD_INT 14
61259: PUSH
61260: LD_INT 13
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: PUSH
61271: LD_VAR 0 2
61275: PUSH
61276: LD_INT 3
61278: MINUS
61279: ARRAY
61280: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
61281: LD_ADDR_OWVAR 45
61285: PUSH
61286: LD_INT 9
61288: ST_TO_ADDR
// end ; 10 .. 13 :
61289: GO 61799
61291: LD_INT 10
61293: DOUBLE
61294: GREATEREQUAL
61295: IFFALSE 61303
61297: LD_INT 13
61299: DOUBLE
61300: LESSEQUAL
61301: IFTRUE 61305
61303: GO 61382
61305: POP
// begin bc_type := b_lab_full ;
61306: LD_ADDR_OWVAR 42
61310: PUSH
61311: LD_INT 8
61313: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
61314: LD_ADDR_OWVAR 44
61318: PUSH
61319: LD_INT 10
61321: PUSH
61322: LD_INT 12
61324: PUSH
61325: LD_INT 14
61327: PUSH
61328: LD_INT 13
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: PUSH
61337: LD_VAR 0 2
61341: PUSH
61342: LD_INT 9
61344: MINUS
61345: ARRAY
61346: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
61347: LD_ADDR_OWVAR 45
61351: PUSH
61352: LD_INT 11
61354: PUSH
61355: LD_INT 15
61357: PUSH
61358: LD_INT 12
61360: PUSH
61361: LD_INT 15
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: PUSH
61370: LD_VAR 0 2
61374: PUSH
61375: LD_INT 9
61377: MINUS
61378: ARRAY
61379: ST_TO_ADDR
// end ; 14 :
61380: GO 61799
61382: LD_INT 14
61384: DOUBLE
61385: EQUAL
61386: IFTRUE 61390
61388: GO 61401
61390: POP
// bc_type := b_workshop ; 15 :
61391: LD_ADDR_OWVAR 42
61395: PUSH
61396: LD_INT 2
61398: ST_TO_ADDR
61399: GO 61799
61401: LD_INT 15
61403: DOUBLE
61404: EQUAL
61405: IFTRUE 61409
61407: GO 61420
61409: POP
// bc_type := b_factory ; 16 :
61410: LD_ADDR_OWVAR 42
61414: PUSH
61415: LD_INT 3
61417: ST_TO_ADDR
61418: GO 61799
61420: LD_INT 16
61422: DOUBLE
61423: EQUAL
61424: IFTRUE 61428
61426: GO 61439
61428: POP
// bc_type := b_ext_gun ; 17 :
61429: LD_ADDR_OWVAR 42
61433: PUSH
61434: LD_INT 17
61436: ST_TO_ADDR
61437: GO 61799
61439: LD_INT 17
61441: DOUBLE
61442: EQUAL
61443: IFTRUE 61447
61445: GO 61475
61447: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
61448: LD_ADDR_OWVAR 42
61452: PUSH
61453: LD_INT 19
61455: PUSH
61456: LD_INT 23
61458: PUSH
61459: LD_INT 19
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: PUSH
61467: LD_VAR 0 1
61471: ARRAY
61472: ST_TO_ADDR
61473: GO 61799
61475: LD_INT 18
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61483
61481: GO 61494
61483: POP
// bc_type := b_ext_radar ; 19 :
61484: LD_ADDR_OWVAR 42
61488: PUSH
61489: LD_INT 20
61491: ST_TO_ADDR
61492: GO 61799
61494: LD_INT 19
61496: DOUBLE
61497: EQUAL
61498: IFTRUE 61502
61500: GO 61513
61502: POP
// bc_type := b_ext_radio ; 20 :
61503: LD_ADDR_OWVAR 42
61507: PUSH
61508: LD_INT 22
61510: ST_TO_ADDR
61511: GO 61799
61513: LD_INT 20
61515: DOUBLE
61516: EQUAL
61517: IFTRUE 61521
61519: GO 61532
61521: POP
// bc_type := b_ext_siberium ; 21 :
61522: LD_ADDR_OWVAR 42
61526: PUSH
61527: LD_INT 21
61529: ST_TO_ADDR
61530: GO 61799
61532: LD_INT 21
61534: DOUBLE
61535: EQUAL
61536: IFTRUE 61540
61538: GO 61551
61540: POP
// bc_type := b_ext_computer ; 22 :
61541: LD_ADDR_OWVAR 42
61545: PUSH
61546: LD_INT 24
61548: ST_TO_ADDR
61549: GO 61799
61551: LD_INT 22
61553: DOUBLE
61554: EQUAL
61555: IFTRUE 61559
61557: GO 61570
61559: POP
// bc_type := b_ext_track ; 23 :
61560: LD_ADDR_OWVAR 42
61564: PUSH
61565: LD_INT 16
61567: ST_TO_ADDR
61568: GO 61799
61570: LD_INT 23
61572: DOUBLE
61573: EQUAL
61574: IFTRUE 61578
61576: GO 61589
61578: POP
// bc_type := b_ext_laser ; 24 :
61579: LD_ADDR_OWVAR 42
61583: PUSH
61584: LD_INT 25
61586: ST_TO_ADDR
61587: GO 61799
61589: LD_INT 24
61591: DOUBLE
61592: EQUAL
61593: IFTRUE 61597
61595: GO 61608
61597: POP
// bc_type := b_control_tower ; 25 :
61598: LD_ADDR_OWVAR 42
61602: PUSH
61603: LD_INT 36
61605: ST_TO_ADDR
61606: GO 61799
61608: LD_INT 25
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61616
61614: GO 61627
61616: POP
// bc_type := b_breastwork ; 26 :
61617: LD_ADDR_OWVAR 42
61621: PUSH
61622: LD_INT 31
61624: ST_TO_ADDR
61625: GO 61799
61627: LD_INT 26
61629: DOUBLE
61630: EQUAL
61631: IFTRUE 61635
61633: GO 61646
61635: POP
// bc_type := b_bunker ; 27 :
61636: LD_ADDR_OWVAR 42
61640: PUSH
61641: LD_INT 32
61643: ST_TO_ADDR
61644: GO 61799
61646: LD_INT 27
61648: DOUBLE
61649: EQUAL
61650: IFTRUE 61654
61652: GO 61665
61654: POP
// bc_type := b_turret ; 28 :
61655: LD_ADDR_OWVAR 42
61659: PUSH
61660: LD_INT 33
61662: ST_TO_ADDR
61663: GO 61799
61665: LD_INT 28
61667: DOUBLE
61668: EQUAL
61669: IFTRUE 61673
61671: GO 61684
61673: POP
// bc_type := b_armoury ; 29 :
61674: LD_ADDR_OWVAR 42
61678: PUSH
61679: LD_INT 4
61681: ST_TO_ADDR
61682: GO 61799
61684: LD_INT 29
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61692
61690: GO 61703
61692: POP
// bc_type := b_barracks ; 30 :
61693: LD_ADDR_OWVAR 42
61697: PUSH
61698: LD_INT 5
61700: ST_TO_ADDR
61701: GO 61799
61703: LD_INT 30
61705: DOUBLE
61706: EQUAL
61707: IFTRUE 61711
61709: GO 61722
61711: POP
// bc_type := b_solar_power ; 31 :
61712: LD_ADDR_OWVAR 42
61716: PUSH
61717: LD_INT 27
61719: ST_TO_ADDR
61720: GO 61799
61722: LD_INT 31
61724: DOUBLE
61725: EQUAL
61726: IFTRUE 61730
61728: GO 61741
61730: POP
// bc_type := b_oil_power ; 32 :
61731: LD_ADDR_OWVAR 42
61735: PUSH
61736: LD_INT 26
61738: ST_TO_ADDR
61739: GO 61799
61741: LD_INT 32
61743: DOUBLE
61744: EQUAL
61745: IFTRUE 61749
61747: GO 61760
61749: POP
// bc_type := b_siberite_power ; 33 :
61750: LD_ADDR_OWVAR 42
61754: PUSH
61755: LD_INT 28
61757: ST_TO_ADDR
61758: GO 61799
61760: LD_INT 33
61762: DOUBLE
61763: EQUAL
61764: IFTRUE 61768
61766: GO 61779
61768: POP
// bc_type := b_oil_mine ; 34 :
61769: LD_ADDR_OWVAR 42
61773: PUSH
61774: LD_INT 29
61776: ST_TO_ADDR
61777: GO 61799
61779: LD_INT 34
61781: DOUBLE
61782: EQUAL
61783: IFTRUE 61787
61785: GO 61798
61787: POP
// bc_type := b_siberite_mine ; end ;
61788: LD_ADDR_OWVAR 42
61792: PUSH
61793: LD_INT 30
61795: ST_TO_ADDR
61796: GO 61799
61798: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
61799: LD_ADDR_VAR 0 8
61803: PUSH
61804: LD_VAR 0 5
61808: PPUSH
61809: LD_VAR 0 6
61813: PPUSH
61814: LD_VAR 0 3
61818: PPUSH
61819: CALL_OW 47
61823: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
61824: LD_OWVAR 42
61828: PUSH
61829: LD_INT 32
61831: PUSH
61832: LD_INT 33
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: IN
61839: IFFALSE 61855
// PlaceWeaponTurret ( b , weapon ) ;
61841: LD_VAR 0 8
61845: PPUSH
61846: LD_VAR 0 4
61850: PPUSH
61851: CALL_OW 431
// end ;
61855: LD_VAR 0 7
61859: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
61860: LD_INT 0
61862: PPUSH
61863: PPUSH
61864: PPUSH
61865: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61866: LD_ADDR_VAR 0 4
61870: PUSH
61871: LD_INT 22
61873: PUSH
61874: LD_OWVAR 2
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: LD_INT 30
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 30
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PPUSH
61915: CALL_OW 69
61919: ST_TO_ADDR
// if not tmp then
61920: LD_VAR 0 4
61924: NOT
61925: IFFALSE 61929
// exit ;
61927: GO 61988
// for i in tmp do
61929: LD_ADDR_VAR 0 2
61933: PUSH
61934: LD_VAR 0 4
61938: PUSH
61939: FOR_IN
61940: IFFALSE 61986
// for j = 1 to 3 do
61942: LD_ADDR_VAR 0 3
61946: PUSH
61947: DOUBLE
61948: LD_INT 1
61950: DEC
61951: ST_TO_ADDR
61952: LD_INT 3
61954: PUSH
61955: FOR_TO
61956: IFFALSE 61982
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
61958: LD_VAR 0 2
61962: PPUSH
61963: CALL_OW 274
61967: PPUSH
61968: LD_VAR 0 3
61972: PPUSH
61973: LD_INT 99999
61975: PPUSH
61976: CALL_OW 277
61980: GO 61955
61982: POP
61983: POP
61984: GO 61939
61986: POP
61987: POP
// end ;
61988: LD_VAR 0 1
61992: RET
// export function hHackSetLevel10 ; var i , j ; begin
61993: LD_INT 0
61995: PPUSH
61996: PPUSH
61997: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
61998: LD_ADDR_VAR 0 2
62002: PUSH
62003: LD_INT 21
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PPUSH
62013: CALL_OW 69
62017: PUSH
62018: FOR_IN
62019: IFFALSE 62071
// if IsSelected ( i ) then
62021: LD_VAR 0 2
62025: PPUSH
62026: CALL_OW 306
62030: IFFALSE 62069
// begin for j := 1 to 4 do
62032: LD_ADDR_VAR 0 3
62036: PUSH
62037: DOUBLE
62038: LD_INT 1
62040: DEC
62041: ST_TO_ADDR
62042: LD_INT 4
62044: PUSH
62045: FOR_TO
62046: IFFALSE 62067
// SetSkill ( i , j , 10 ) ;
62048: LD_VAR 0 2
62052: PPUSH
62053: LD_VAR 0 3
62057: PPUSH
62058: LD_INT 10
62060: PPUSH
62061: CALL_OW 237
62065: GO 62045
62067: POP
62068: POP
// end ;
62069: GO 62018
62071: POP
62072: POP
// end ;
62073: LD_VAR 0 1
62077: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
62078: LD_INT 0
62080: PPUSH
62081: PPUSH
62082: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
62083: LD_ADDR_VAR 0 2
62087: PUSH
62088: LD_INT 22
62090: PUSH
62091: LD_OWVAR 2
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 21
62102: PUSH
62103: LD_INT 1
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PPUSH
62114: CALL_OW 69
62118: PUSH
62119: FOR_IN
62120: IFFALSE 62161
// begin for j := 1 to 4 do
62122: LD_ADDR_VAR 0 3
62126: PUSH
62127: DOUBLE
62128: LD_INT 1
62130: DEC
62131: ST_TO_ADDR
62132: LD_INT 4
62134: PUSH
62135: FOR_TO
62136: IFFALSE 62157
// SetSkill ( i , j , 10 ) ;
62138: LD_VAR 0 2
62142: PPUSH
62143: LD_VAR 0 3
62147: PPUSH
62148: LD_INT 10
62150: PPUSH
62151: CALL_OW 237
62155: GO 62135
62157: POP
62158: POP
// end ;
62159: GO 62119
62161: POP
62162: POP
// end ;
62163: LD_VAR 0 1
62167: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
62168: LD_INT 0
62170: PPUSH
// uc_side := your_side ;
62171: LD_ADDR_OWVAR 20
62175: PUSH
62176: LD_OWVAR 2
62180: ST_TO_ADDR
// uc_nation := nation ;
62181: LD_ADDR_OWVAR 21
62185: PUSH
62186: LD_VAR 0 1
62190: ST_TO_ADDR
// InitHc ;
62191: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
62195: LD_INT 0
62197: PPUSH
62198: LD_VAR 0 2
62202: PPUSH
62203: LD_VAR 0 3
62207: PPUSH
62208: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
62212: LD_VAR 0 4
62216: PPUSH
62217: LD_VAR 0 5
62221: PPUSH
62222: CALL_OW 428
62226: PUSH
62227: LD_INT 0
62229: EQUAL
62230: IFFALSE 62254
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
62232: CALL_OW 44
62236: PPUSH
62237: LD_VAR 0 4
62241: PPUSH
62242: LD_VAR 0 5
62246: PPUSH
62247: LD_INT 1
62249: PPUSH
62250: CALL_OW 48
// end ;
62254: LD_VAR 0 6
62258: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
62259: LD_INT 0
62261: PPUSH
62262: PPUSH
// uc_side := your_side ;
62263: LD_ADDR_OWVAR 20
62267: PUSH
62268: LD_OWVAR 2
62272: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
62273: LD_VAR 0 1
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 2
62283: PUSH
62284: LD_INT 3
62286: PUSH
62287: LD_INT 4
62289: PUSH
62290: LD_INT 5
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: IN
62300: IFFALSE 62312
// uc_nation := nation_american else
62302: LD_ADDR_OWVAR 21
62306: PUSH
62307: LD_INT 1
62309: ST_TO_ADDR
62310: GO 62355
// if chassis in [ 11 , 12 , 13 , 14 ] then
62312: LD_VAR 0 1
62316: PUSH
62317: LD_INT 11
62319: PUSH
62320: LD_INT 12
62322: PUSH
62323: LD_INT 13
62325: PUSH
62326: LD_INT 14
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: IN
62335: IFFALSE 62347
// uc_nation := nation_arabian else
62337: LD_ADDR_OWVAR 21
62341: PUSH
62342: LD_INT 2
62344: ST_TO_ADDR
62345: GO 62355
// uc_nation := nation_russian ;
62347: LD_ADDR_OWVAR 21
62351: PUSH
62352: LD_INT 3
62354: ST_TO_ADDR
// vc_chassis := chassis ;
62355: LD_ADDR_OWVAR 37
62359: PUSH
62360: LD_VAR 0 1
62364: ST_TO_ADDR
// vc_engine := engine ;
62365: LD_ADDR_OWVAR 39
62369: PUSH
62370: LD_VAR 0 2
62374: ST_TO_ADDR
// vc_control := control ;
62375: LD_ADDR_OWVAR 38
62379: PUSH
62380: LD_VAR 0 3
62384: ST_TO_ADDR
// vc_weapon := weapon ;
62385: LD_ADDR_OWVAR 40
62389: PUSH
62390: LD_VAR 0 4
62394: ST_TO_ADDR
// un := CreateVehicle ;
62395: LD_ADDR_VAR 0 8
62399: PUSH
62400: CALL_OW 45
62404: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
62405: LD_VAR 0 8
62409: PPUSH
62410: LD_INT 0
62412: PPUSH
62413: LD_INT 5
62415: PPUSH
62416: CALL_OW 12
62420: PPUSH
62421: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
62425: LD_VAR 0 8
62429: PPUSH
62430: LD_VAR 0 5
62434: PPUSH
62435: LD_VAR 0 6
62439: PPUSH
62440: LD_INT 1
62442: PPUSH
62443: CALL_OW 48
// end ;
62447: LD_VAR 0 7
62451: RET
// export hInvincible ; every 1 do
62452: GO 62454
62454: DISABLE
// hInvincible := [ ] ;
62455: LD_ADDR_EXP 87
62459: PUSH
62460: EMPTY
62461: ST_TO_ADDR
62462: END
// every 10 do var i ;
62463: GO 62465
62465: DISABLE
62466: LD_INT 0
62468: PPUSH
// begin enable ;
62469: ENABLE
// if not hInvincible then
62470: LD_EXP 87
62474: NOT
62475: IFFALSE 62479
// exit ;
62477: GO 62523
// for i in hInvincible do
62479: LD_ADDR_VAR 0 1
62483: PUSH
62484: LD_EXP 87
62488: PUSH
62489: FOR_IN
62490: IFFALSE 62521
// if GetLives ( i ) < 1000 then
62492: LD_VAR 0 1
62496: PPUSH
62497: CALL_OW 256
62501: PUSH
62502: LD_INT 1000
62504: LESS
62505: IFFALSE 62519
// SetLives ( i , 1000 ) ;
62507: LD_VAR 0 1
62511: PPUSH
62512: LD_INT 1000
62514: PPUSH
62515: CALL_OW 234
62519: GO 62489
62521: POP
62522: POP
// end ;
62523: PPOPN 1
62525: END
// export function hHackInvincible ; var i ; begin
62526: LD_INT 0
62528: PPUSH
62529: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
62530: LD_ADDR_VAR 0 2
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: LD_INT 21
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 21
62550: PUSH
62551: LD_INT 2
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: PPUSH
62563: CALL_OW 69
62567: PUSH
62568: FOR_IN
62569: IFFALSE 62630
// if IsSelected ( i ) then
62571: LD_VAR 0 2
62575: PPUSH
62576: CALL_OW 306
62580: IFFALSE 62628
// begin if i in hInvincible then
62582: LD_VAR 0 2
62586: PUSH
62587: LD_EXP 87
62591: IN
62592: IFFALSE 62612
// hInvincible := hInvincible diff i else
62594: LD_ADDR_EXP 87
62598: PUSH
62599: LD_EXP 87
62603: PUSH
62604: LD_VAR 0 2
62608: DIFF
62609: ST_TO_ADDR
62610: GO 62628
// hInvincible := hInvincible union i ;
62612: LD_ADDR_EXP 87
62616: PUSH
62617: LD_EXP 87
62621: PUSH
62622: LD_VAR 0 2
62626: UNION
62627: ST_TO_ADDR
// end ;
62628: GO 62568
62630: POP
62631: POP
// end ;
62632: LD_VAR 0 1
62636: RET
// export function hHackInvisible ; var i , j ; begin
62637: LD_INT 0
62639: PPUSH
62640: PPUSH
62641: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
62642: LD_ADDR_VAR 0 2
62646: PUSH
62647: LD_INT 21
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PPUSH
62657: CALL_OW 69
62661: PUSH
62662: FOR_IN
62663: IFFALSE 62687
// if IsSelected ( i ) then
62665: LD_VAR 0 2
62669: PPUSH
62670: CALL_OW 306
62674: IFFALSE 62685
// ComForceInvisible ( i ) ;
62676: LD_VAR 0 2
62680: PPUSH
62681: CALL_OW 496
62685: GO 62662
62687: POP
62688: POP
// end ;
62689: LD_VAR 0 1
62693: RET
// export function hHackChangeYourSide ; begin
62694: LD_INT 0
62696: PPUSH
// if your_side = 8 then
62697: LD_OWVAR 2
62701: PUSH
62702: LD_INT 8
62704: EQUAL
62705: IFFALSE 62717
// your_side := 0 else
62707: LD_ADDR_OWVAR 2
62711: PUSH
62712: LD_INT 0
62714: ST_TO_ADDR
62715: GO 62731
// your_side := your_side + 1 ;
62717: LD_ADDR_OWVAR 2
62721: PUSH
62722: LD_OWVAR 2
62726: PUSH
62727: LD_INT 1
62729: PLUS
62730: ST_TO_ADDR
// end ;
62731: LD_VAR 0 1
62735: RET
// export function hHackChangeUnitSide ; var i , j ; begin
62736: LD_INT 0
62738: PPUSH
62739: PPUSH
62740: PPUSH
// for i in all_units do
62741: LD_ADDR_VAR 0 2
62745: PUSH
62746: LD_OWVAR 3
62750: PUSH
62751: FOR_IN
62752: IFFALSE 62830
// if IsSelected ( i ) then
62754: LD_VAR 0 2
62758: PPUSH
62759: CALL_OW 306
62763: IFFALSE 62828
// begin j := GetSide ( i ) ;
62765: LD_ADDR_VAR 0 3
62769: PUSH
62770: LD_VAR 0 2
62774: PPUSH
62775: CALL_OW 255
62779: ST_TO_ADDR
// if j = 8 then
62780: LD_VAR 0 3
62784: PUSH
62785: LD_INT 8
62787: EQUAL
62788: IFFALSE 62800
// j := 0 else
62790: LD_ADDR_VAR 0 3
62794: PUSH
62795: LD_INT 0
62797: ST_TO_ADDR
62798: GO 62814
// j := j + 1 ;
62800: LD_ADDR_VAR 0 3
62804: PUSH
62805: LD_VAR 0 3
62809: PUSH
62810: LD_INT 1
62812: PLUS
62813: ST_TO_ADDR
// SetSide ( i , j ) ;
62814: LD_VAR 0 2
62818: PPUSH
62819: LD_VAR 0 3
62823: PPUSH
62824: CALL_OW 235
// end ;
62828: GO 62751
62830: POP
62831: POP
// end ;
62832: LD_VAR 0 1
62836: RET
// export function hHackFog ; begin
62837: LD_INT 0
62839: PPUSH
// FogOff ( true ) ;
62840: LD_INT 1
62842: PPUSH
62843: CALL_OW 344
// end ;
62847: LD_VAR 0 1
62851: RET
// export function hHackTeleport ( unit , x , y ) ; begin
62852: LD_INT 0
62854: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
62855: LD_VAR 0 1
62859: PPUSH
62860: LD_VAR 0 2
62864: PPUSH
62865: LD_VAR 0 3
62869: PPUSH
62870: LD_INT 1
62872: PPUSH
62873: LD_INT 1
62875: PPUSH
62876: CALL_OW 483
// CenterOnXY ( x , y ) ;
62880: LD_VAR 0 2
62884: PPUSH
62885: LD_VAR 0 3
62889: PPUSH
62890: CALL_OW 84
// end ;
62894: LD_VAR 0 4
62898: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
62899: LD_INT 0
62901: PPUSH
62902: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
62903: LD_VAR 0 1
62907: NOT
62908: PUSH
62909: LD_VAR 0 2
62913: PPUSH
62914: LD_VAR 0 3
62918: PPUSH
62919: CALL_OW 488
62923: NOT
62924: OR
62925: PUSH
62926: LD_VAR 0 1
62930: PPUSH
62931: CALL_OW 266
62935: PUSH
62936: LD_INT 3
62938: NONEQUAL
62939: PUSH
62940: LD_VAR 0 1
62944: PPUSH
62945: CALL_OW 247
62949: PUSH
62950: LD_INT 1
62952: EQUAL
62953: NOT
62954: AND
62955: OR
62956: IFFALSE 62960
// exit ;
62958: GO 63109
// if GetType ( factory ) = unit_human then
62960: LD_VAR 0 1
62964: PPUSH
62965: CALL_OW 247
62969: PUSH
62970: LD_INT 1
62972: EQUAL
62973: IFFALSE 62990
// factory := IsInUnit ( factory ) ;
62975: LD_ADDR_VAR 0 1
62979: PUSH
62980: LD_VAR 0 1
62984: PPUSH
62985: CALL_OW 310
62989: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
62990: LD_VAR 0 1
62994: PPUSH
62995: CALL_OW 266
62999: PUSH
63000: LD_INT 3
63002: NONEQUAL
63003: IFFALSE 63007
// exit ;
63005: GO 63109
// if HexInfo ( x , y ) = factory then
63007: LD_VAR 0 2
63011: PPUSH
63012: LD_VAR 0 3
63016: PPUSH
63017: CALL_OW 428
63021: PUSH
63022: LD_VAR 0 1
63026: EQUAL
63027: IFFALSE 63054
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
63029: LD_ADDR_EXP 88
63033: PUSH
63034: LD_EXP 88
63038: PPUSH
63039: LD_VAR 0 1
63043: PPUSH
63044: LD_INT 0
63046: PPUSH
63047: CALL_OW 1
63051: ST_TO_ADDR
63052: GO 63105
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
63054: LD_ADDR_EXP 88
63058: PUSH
63059: LD_EXP 88
63063: PPUSH
63064: LD_VAR 0 1
63068: PPUSH
63069: LD_VAR 0 1
63073: PPUSH
63074: CALL_OW 255
63078: PUSH
63079: LD_VAR 0 1
63083: PUSH
63084: LD_VAR 0 2
63088: PUSH
63089: LD_VAR 0 3
63093: PUSH
63094: EMPTY
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: PPUSH
63100: CALL_OW 1
63104: ST_TO_ADDR
// UpdateFactoryWaypoints ;
63105: CALL 63114 0 0
// end ;
63109: LD_VAR 0 4
63113: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
63114: LD_INT 0
63116: PPUSH
63117: PPUSH
63118: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
63119: LD_STRING resetFactoryWaypoint();
63121: PPUSH
63122: CALL_OW 559
// if factoryWaypoints then
63126: LD_EXP 88
63130: IFFALSE 63256
// begin list := PrepareArray ( factoryWaypoints ) ;
63132: LD_ADDR_VAR 0 3
63136: PUSH
63137: LD_EXP 88
63141: PPUSH
63142: CALL 47885 0 1
63146: ST_TO_ADDR
// for i := 1 to list do
63147: LD_ADDR_VAR 0 2
63151: PUSH
63152: DOUBLE
63153: LD_INT 1
63155: DEC
63156: ST_TO_ADDR
63157: LD_VAR 0 3
63161: PUSH
63162: FOR_TO
63163: IFFALSE 63254
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63165: LD_STRING setFactoryWaypointXY(
63167: PUSH
63168: LD_VAR 0 3
63172: PUSH
63173: LD_VAR 0 2
63177: ARRAY
63178: PUSH
63179: LD_INT 1
63181: ARRAY
63182: STR
63183: PUSH
63184: LD_STRING ,
63186: STR
63187: PUSH
63188: LD_VAR 0 3
63192: PUSH
63193: LD_VAR 0 2
63197: ARRAY
63198: PUSH
63199: LD_INT 2
63201: ARRAY
63202: STR
63203: PUSH
63204: LD_STRING ,
63206: STR
63207: PUSH
63208: LD_VAR 0 3
63212: PUSH
63213: LD_VAR 0 2
63217: ARRAY
63218: PUSH
63219: LD_INT 3
63221: ARRAY
63222: STR
63223: PUSH
63224: LD_STRING ,
63226: STR
63227: PUSH
63228: LD_VAR 0 3
63232: PUSH
63233: LD_VAR 0 2
63237: ARRAY
63238: PUSH
63239: LD_INT 4
63241: ARRAY
63242: STR
63243: PUSH
63244: LD_STRING )
63246: STR
63247: PPUSH
63248: CALL_OW 559
63252: GO 63162
63254: POP
63255: POP
// end ; end ;
63256: LD_VAR 0 1
63260: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
63261: LD_INT 0
63263: PPUSH
// if HexInfo ( x , y ) = warehouse then
63264: LD_VAR 0 2
63268: PPUSH
63269: LD_VAR 0 3
63273: PPUSH
63274: CALL_OW 428
63278: PUSH
63279: LD_VAR 0 1
63283: EQUAL
63284: IFFALSE 63311
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
63286: LD_ADDR_EXP 89
63290: PUSH
63291: LD_EXP 89
63295: PPUSH
63296: LD_VAR 0 1
63300: PPUSH
63301: LD_INT 0
63303: PPUSH
63304: CALL_OW 1
63308: ST_TO_ADDR
63309: GO 63362
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
63311: LD_ADDR_EXP 89
63315: PUSH
63316: LD_EXP 89
63320: PPUSH
63321: LD_VAR 0 1
63325: PPUSH
63326: LD_VAR 0 1
63330: PPUSH
63331: CALL_OW 255
63335: PUSH
63336: LD_VAR 0 1
63340: PUSH
63341: LD_VAR 0 2
63345: PUSH
63346: LD_VAR 0 3
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: PPUSH
63357: CALL_OW 1
63361: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
63362: CALL 63371 0 0
// end ;
63366: LD_VAR 0 4
63370: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
63371: LD_INT 0
63373: PPUSH
63374: PPUSH
63375: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
63376: LD_STRING resetWarehouseGatheringPoints();
63378: PPUSH
63379: CALL_OW 559
// if warehouseGatheringPoints then
63383: LD_EXP 89
63387: IFFALSE 63513
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
63389: LD_ADDR_VAR 0 3
63393: PUSH
63394: LD_EXP 89
63398: PPUSH
63399: CALL 47885 0 1
63403: ST_TO_ADDR
// for i := 1 to list do
63404: LD_ADDR_VAR 0 2
63408: PUSH
63409: DOUBLE
63410: LD_INT 1
63412: DEC
63413: ST_TO_ADDR
63414: LD_VAR 0 3
63418: PUSH
63419: FOR_TO
63420: IFFALSE 63511
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
63422: LD_STRING setWarehouseGatheringPointXY(
63424: PUSH
63425: LD_VAR 0 3
63429: PUSH
63430: LD_VAR 0 2
63434: ARRAY
63435: PUSH
63436: LD_INT 1
63438: ARRAY
63439: STR
63440: PUSH
63441: LD_STRING ,
63443: STR
63444: PUSH
63445: LD_VAR 0 3
63449: PUSH
63450: LD_VAR 0 2
63454: ARRAY
63455: PUSH
63456: LD_INT 2
63458: ARRAY
63459: STR
63460: PUSH
63461: LD_STRING ,
63463: STR
63464: PUSH
63465: LD_VAR 0 3
63469: PUSH
63470: LD_VAR 0 2
63474: ARRAY
63475: PUSH
63476: LD_INT 3
63478: ARRAY
63479: STR
63480: PUSH
63481: LD_STRING ,
63483: STR
63484: PUSH
63485: LD_VAR 0 3
63489: PUSH
63490: LD_VAR 0 2
63494: ARRAY
63495: PUSH
63496: LD_INT 4
63498: ARRAY
63499: STR
63500: PUSH
63501: LD_STRING )
63503: STR
63504: PPUSH
63505: CALL_OW 559
63509: GO 63419
63511: POP
63512: POP
// end ; end ;
63513: LD_VAR 0 1
63517: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
63518: LD_EXP 89
63522: IFFALSE 64207
63524: GO 63526
63526: DISABLE
63527: LD_INT 0
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
63533: PPUSH
63534: PPUSH
63535: PPUSH
63536: PPUSH
63537: PPUSH
// begin enable ;
63538: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
63539: LD_ADDR_VAR 0 3
63543: PUSH
63544: LD_EXP 89
63548: PPUSH
63549: CALL 47885 0 1
63553: ST_TO_ADDR
// if not list then
63554: LD_VAR 0 3
63558: NOT
63559: IFFALSE 63563
// exit ;
63561: GO 64207
// for i := 1 to list do
63563: LD_ADDR_VAR 0 1
63567: PUSH
63568: DOUBLE
63569: LD_INT 1
63571: DEC
63572: ST_TO_ADDR
63573: LD_VAR 0 3
63577: PUSH
63578: FOR_TO
63579: IFFALSE 64205
// begin depot := list [ i ] [ 2 ] ;
63581: LD_ADDR_VAR 0 8
63585: PUSH
63586: LD_VAR 0 3
63590: PUSH
63591: LD_VAR 0 1
63595: ARRAY
63596: PUSH
63597: LD_INT 2
63599: ARRAY
63600: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
63601: LD_ADDR_VAR 0 5
63605: PUSH
63606: LD_VAR 0 3
63610: PUSH
63611: LD_VAR 0 1
63615: ARRAY
63616: PUSH
63617: LD_INT 1
63619: ARRAY
63620: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
63621: LD_VAR 0 8
63625: PPUSH
63626: CALL_OW 301
63630: PUSH
63631: LD_VAR 0 5
63635: PUSH
63636: LD_VAR 0 8
63640: PPUSH
63641: CALL_OW 255
63645: NONEQUAL
63646: OR
63647: IFFALSE 63676
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
63649: LD_ADDR_EXP 89
63653: PUSH
63654: LD_EXP 89
63658: PPUSH
63659: LD_VAR 0 8
63663: PPUSH
63664: LD_INT 0
63666: PPUSH
63667: CALL_OW 1
63671: ST_TO_ADDR
// exit ;
63672: POP
63673: POP
63674: GO 64207
// end ; x := list [ i ] [ 3 ] ;
63676: LD_ADDR_VAR 0 6
63680: PUSH
63681: LD_VAR 0 3
63685: PUSH
63686: LD_VAR 0 1
63690: ARRAY
63691: PUSH
63692: LD_INT 3
63694: ARRAY
63695: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
63696: LD_ADDR_VAR 0 7
63700: PUSH
63701: LD_VAR 0 3
63705: PUSH
63706: LD_VAR 0 1
63710: ARRAY
63711: PUSH
63712: LD_INT 4
63714: ARRAY
63715: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
63716: LD_ADDR_VAR 0 9
63720: PUSH
63721: LD_VAR 0 6
63725: PPUSH
63726: LD_VAR 0 7
63730: PPUSH
63731: LD_INT 16
63733: PPUSH
63734: CALL 46473 0 3
63738: ST_TO_ADDR
// if not cratesNearbyPoint then
63739: LD_VAR 0 9
63743: NOT
63744: IFFALSE 63750
// exit ;
63746: POP
63747: POP
63748: GO 64207
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
63750: LD_ADDR_VAR 0 4
63754: PUSH
63755: LD_INT 22
63757: PUSH
63758: LD_VAR 0 5
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 3
63769: PUSH
63770: LD_INT 60
63772: PUSH
63773: EMPTY
63774: LIST
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 91
63782: PUSH
63783: LD_VAR 0 8
63787: PUSH
63788: LD_INT 6
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: LD_INT 25
63801: PUSH
63802: LD_INT 2
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 25
63811: PUSH
63812: LD_INT 16
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: PPUSH
63830: CALL_OW 69
63834: PUSH
63835: LD_VAR 0 8
63839: PPUSH
63840: CALL_OW 313
63844: PPUSH
63845: LD_INT 3
63847: PUSH
63848: LD_INT 60
63850: PUSH
63851: EMPTY
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 2
63860: PUSH
63861: LD_INT 25
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 25
63873: PUSH
63874: LD_INT 16
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PPUSH
63890: CALL_OW 72
63894: UNION
63895: ST_TO_ADDR
// if tmp then
63896: LD_VAR 0 4
63900: IFFALSE 63980
// begin tmp := ShrinkArray ( tmp , 3 ) ;
63902: LD_ADDR_VAR 0 4
63906: PUSH
63907: LD_VAR 0 4
63911: PPUSH
63912: LD_INT 3
63914: PPUSH
63915: CALL 44442 0 2
63919: ST_TO_ADDR
// for j in tmp do
63920: LD_ADDR_VAR 0 2
63924: PUSH
63925: LD_VAR 0 4
63929: PUSH
63930: FOR_IN
63931: IFFALSE 63974
// begin if IsInUnit ( j ) then
63933: LD_VAR 0 2
63937: PPUSH
63938: CALL_OW 310
63942: IFFALSE 63953
// ComExit ( j ) ;
63944: LD_VAR 0 2
63948: PPUSH
63949: CALL 44525 0 1
// AddComCollect ( j , x , y ) ;
63953: LD_VAR 0 2
63957: PPUSH
63958: LD_VAR 0 6
63962: PPUSH
63963: LD_VAR 0 7
63967: PPUSH
63968: CALL_OW 177
// end ;
63972: GO 63930
63974: POP
63975: POP
// exit ;
63976: POP
63977: POP
63978: GO 64207
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
63980: LD_ADDR_VAR 0 4
63984: PUSH
63985: LD_INT 22
63987: PUSH
63988: LD_VAR 0 5
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 91
63999: PUSH
64000: LD_VAR 0 8
64004: PUSH
64005: LD_INT 8
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: LIST
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: LD_INT 34
64018: PUSH
64019: LD_INT 12
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 34
64028: PUSH
64029: LD_INT 51
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 34
64038: PUSH
64039: LD_INT 32
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 34
64048: PUSH
64049: LD_INT 89
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: LIST
64067: PPUSH
64068: CALL_OW 69
64072: ST_TO_ADDR
// if tmp then
64073: LD_VAR 0 4
64077: IFFALSE 64203
// begin for j in tmp do
64079: LD_ADDR_VAR 0 2
64083: PUSH
64084: LD_VAR 0 4
64088: PUSH
64089: FOR_IN
64090: IFFALSE 64201
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
64092: LD_VAR 0 2
64096: PPUSH
64097: CALL_OW 262
64101: PUSH
64102: LD_INT 3
64104: EQUAL
64105: PUSH
64106: LD_VAR 0 2
64110: PPUSH
64111: CALL_OW 261
64115: PUSH
64116: LD_INT 20
64118: GREATER
64119: OR
64120: PUSH
64121: LD_VAR 0 2
64125: PPUSH
64126: CALL_OW 314
64130: NOT
64131: AND
64132: PUSH
64133: LD_VAR 0 2
64137: PPUSH
64138: CALL_OW 263
64142: PUSH
64143: LD_INT 1
64145: NONEQUAL
64146: PUSH
64147: LD_VAR 0 2
64151: PPUSH
64152: CALL_OW 311
64156: OR
64157: AND
64158: IFFALSE 64199
// begin ComCollect ( j , x , y ) ;
64160: LD_VAR 0 2
64164: PPUSH
64165: LD_VAR 0 6
64169: PPUSH
64170: LD_VAR 0 7
64174: PPUSH
64175: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
64179: LD_VAR 0 2
64183: PPUSH
64184: LD_VAR 0 8
64188: PPUSH
64189: CALL_OW 172
// exit ;
64193: POP
64194: POP
64195: POP
64196: POP
64197: GO 64207
// end ;
64199: GO 64089
64201: POP
64202: POP
// end ; end ;
64203: GO 63578
64205: POP
64206: POP
// end ; end_of_file
64207: PPOPN 9
64209: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64210: LD_VAR 0 1
64214: PUSH
64215: LD_INT 200
64217: DOUBLE
64218: GREATEREQUAL
64219: IFFALSE 64227
64221: LD_INT 299
64223: DOUBLE
64224: LESSEQUAL
64225: IFTRUE 64229
64227: GO 64261
64229: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64230: LD_VAR 0 1
64234: PPUSH
64235: LD_VAR 0 2
64239: PPUSH
64240: LD_VAR 0 3
64244: PPUSH
64245: LD_VAR 0 4
64249: PPUSH
64250: LD_VAR 0 5
64254: PPUSH
64255: CALL 64749 0 5
64259: GO 64338
64261: LD_INT 300
64263: DOUBLE
64264: GREATEREQUAL
64265: IFFALSE 64273
64267: LD_INT 399
64269: DOUBLE
64270: LESSEQUAL
64271: IFTRUE 64275
64273: GO 64337
64275: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64276: LD_VAR 0 1
64280: PPUSH
64281: LD_VAR 0 2
64285: PPUSH
64286: LD_VAR 0 3
64290: PPUSH
64291: LD_VAR 0 4
64295: PPUSH
64296: LD_VAR 0 5
64300: PPUSH
64301: LD_VAR 0 6
64305: PPUSH
64306: LD_VAR 0 7
64310: PPUSH
64311: LD_VAR 0 8
64315: PPUSH
64316: LD_VAR 0 9
64320: PPUSH
64321: LD_VAR 0 10
64325: PPUSH
64326: LD_VAR 0 11
64330: PPUSH
64331: CALL 60911 0 11
64335: GO 64338
64337: POP
// end ;
64338: PPOPN 11
64340: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64341: LD_VAR 0 1
64345: PPUSH
64346: LD_VAR 0 2
64350: PPUSH
64351: LD_VAR 0 3
64355: PPUSH
64356: LD_VAR 0 4
64360: PPUSH
64361: LD_VAR 0 5
64365: PPUSH
64366: CALL 64485 0 5
// end ; end_of_file
64370: PPOPN 5
64372: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
64373: LD_INT 0
64375: PPUSH
64376: PPUSH
64377: PPUSH
64378: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
64379: LD_VAR 0 1
64383: PPUSH
64384: CALL_OW 264
64388: PUSH
64389: LD_INT 91
64391: EQUAL
64392: IFFALSE 64464
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
64394: LD_INT 68
64396: PPUSH
64397: LD_VAR 0 1
64401: PPUSH
64402: CALL_OW 255
64406: PPUSH
64407: CALL_OW 321
64411: PUSH
64412: LD_INT 2
64414: EQUAL
64415: IFFALSE 64427
// eff := 70 else
64417: LD_ADDR_VAR 0 4
64421: PUSH
64422: LD_INT 70
64424: ST_TO_ADDR
64425: GO 64435
// eff := 30 ;
64427: LD_ADDR_VAR 0 4
64431: PUSH
64432: LD_INT 30
64434: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
64435: LD_VAR 0 1
64439: PPUSH
64440: CALL_OW 250
64444: PPUSH
64445: LD_VAR 0 1
64449: PPUSH
64450: CALL_OW 251
64454: PPUSH
64455: LD_VAR 0 4
64459: PPUSH
64460: CALL_OW 495
// end ; end ;
64464: LD_VAR 0 2
64468: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
64469: LD_INT 0
64471: PPUSH
// end ;
64472: LD_VAR 0 4
64476: RET
// export function SOS_Command ( cmd ) ; begin
64477: LD_INT 0
64479: PPUSH
// end ;
64480: LD_VAR 0 2
64484: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
64485: LD_INT 0
64487: PPUSH
// end ;
64488: LD_VAR 0 6
64492: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
64493: LD_INT 0
64495: PPUSH
64496: PPUSH
// if not vehicle or not factory then
64497: LD_VAR 0 1
64501: NOT
64502: PUSH
64503: LD_VAR 0 2
64507: NOT
64508: OR
64509: IFFALSE 64513
// exit ;
64511: GO 64744
// if factoryWaypoints >= factory then
64513: LD_EXP 88
64517: PUSH
64518: LD_VAR 0 2
64522: GREATEREQUAL
64523: IFFALSE 64744
// if factoryWaypoints [ factory ] then
64525: LD_EXP 88
64529: PUSH
64530: LD_VAR 0 2
64534: ARRAY
64535: IFFALSE 64744
// begin if GetControl ( vehicle ) = control_manual then
64537: LD_VAR 0 1
64541: PPUSH
64542: CALL_OW 263
64546: PUSH
64547: LD_INT 1
64549: EQUAL
64550: IFFALSE 64631
// begin driver := IsDrivenBy ( vehicle ) ;
64552: LD_ADDR_VAR 0 4
64556: PUSH
64557: LD_VAR 0 1
64561: PPUSH
64562: CALL_OW 311
64566: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64567: LD_VAR 0 4
64571: PPUSH
64572: LD_EXP 88
64576: PUSH
64577: LD_VAR 0 2
64581: ARRAY
64582: PUSH
64583: LD_INT 3
64585: ARRAY
64586: PPUSH
64587: LD_EXP 88
64591: PUSH
64592: LD_VAR 0 2
64596: ARRAY
64597: PUSH
64598: LD_INT 4
64600: ARRAY
64601: PPUSH
64602: CALL_OW 171
// AddComExitVehicle ( driver ) ;
64606: LD_VAR 0 4
64610: PPUSH
64611: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
64615: LD_VAR 0 4
64619: PPUSH
64620: LD_VAR 0 2
64624: PPUSH
64625: CALL_OW 180
// end else
64629: GO 64744
// if GetControl ( vehicle ) = control_remote then
64631: LD_VAR 0 1
64635: PPUSH
64636: CALL_OW 263
64640: PUSH
64641: LD_INT 2
64643: EQUAL
64644: IFFALSE 64705
// begin wait ( 0 0$2 ) ;
64646: LD_INT 70
64648: PPUSH
64649: CALL_OW 67
// if Connect ( vehicle ) then
64653: LD_VAR 0 1
64657: PPUSH
64658: CALL 14733 0 1
64662: IFFALSE 64703
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64664: LD_VAR 0 1
64668: PPUSH
64669: LD_EXP 88
64673: PUSH
64674: LD_VAR 0 2
64678: ARRAY
64679: PUSH
64680: LD_INT 3
64682: ARRAY
64683: PPUSH
64684: LD_EXP 88
64688: PUSH
64689: LD_VAR 0 2
64693: ARRAY
64694: PUSH
64695: LD_INT 4
64697: ARRAY
64698: PPUSH
64699: CALL_OW 171
// end else
64703: GO 64744
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
64705: LD_VAR 0 1
64709: PPUSH
64710: LD_EXP 88
64714: PUSH
64715: LD_VAR 0 2
64719: ARRAY
64720: PUSH
64721: LD_INT 3
64723: ARRAY
64724: PPUSH
64725: LD_EXP 88
64729: PUSH
64730: LD_VAR 0 2
64734: ARRAY
64735: PUSH
64736: LD_INT 4
64738: ARRAY
64739: PPUSH
64740: CALL_OW 171
// end ; end ;
64744: LD_VAR 0 3
64748: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
64749: LD_INT 0
64751: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
64752: LD_VAR 0 1
64756: PUSH
64757: LD_INT 250
64759: EQUAL
64760: PUSH
64761: LD_VAR 0 2
64765: PPUSH
64766: CALL_OW 264
64770: PUSH
64771: LD_INT 81
64773: EQUAL
64774: AND
64775: IFFALSE 64796
// MinerPlaceMine ( unit , x , y ) ;
64777: LD_VAR 0 2
64781: PPUSH
64782: LD_VAR 0 4
64786: PPUSH
64787: LD_VAR 0 5
64791: PPUSH
64792: CALL 67620 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
64796: LD_VAR 0 1
64800: PUSH
64801: LD_INT 251
64803: EQUAL
64804: PUSH
64805: LD_VAR 0 2
64809: PPUSH
64810: CALL_OW 264
64814: PUSH
64815: LD_INT 81
64817: EQUAL
64818: AND
64819: IFFALSE 64840
// MinerDetonateMine ( unit , x , y ) ;
64821: LD_VAR 0 2
64825: PPUSH
64826: LD_VAR 0 4
64830: PPUSH
64831: LD_VAR 0 5
64835: PPUSH
64836: CALL 67895 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
64840: LD_VAR 0 1
64844: PUSH
64845: LD_INT 252
64847: EQUAL
64848: PUSH
64849: LD_VAR 0 2
64853: PPUSH
64854: CALL_OW 264
64858: PUSH
64859: LD_INT 81
64861: EQUAL
64862: AND
64863: IFFALSE 64884
// MinerCreateMinefield ( unit , x , y ) ;
64865: LD_VAR 0 2
64869: PPUSH
64870: LD_VAR 0 4
64874: PPUSH
64875: LD_VAR 0 5
64879: PPUSH
64880: CALL 68312 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
64884: LD_VAR 0 1
64888: PUSH
64889: LD_INT 253
64891: EQUAL
64892: PUSH
64893: LD_VAR 0 2
64897: PPUSH
64898: CALL_OW 257
64902: PUSH
64903: LD_INT 5
64905: EQUAL
64906: AND
64907: IFFALSE 64928
// ComBinocular ( unit , x , y ) ;
64909: LD_VAR 0 2
64913: PPUSH
64914: LD_VAR 0 4
64918: PPUSH
64919: LD_VAR 0 5
64923: PPUSH
64924: CALL 68681 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
64928: LD_VAR 0 1
64932: PUSH
64933: LD_INT 254
64935: EQUAL
64936: PUSH
64937: LD_VAR 0 2
64941: PPUSH
64942: CALL_OW 264
64946: PUSH
64947: LD_INT 99
64949: EQUAL
64950: AND
64951: PUSH
64952: LD_VAR 0 3
64956: PPUSH
64957: CALL_OW 263
64961: PUSH
64962: LD_INT 3
64964: EQUAL
64965: AND
64966: IFFALSE 64982
// HackDestroyVehicle ( unit , selectedUnit ) ;
64968: LD_VAR 0 2
64972: PPUSH
64973: LD_VAR 0 3
64977: PPUSH
64978: CALL 66984 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
64982: LD_VAR 0 1
64986: PUSH
64987: LD_INT 255
64989: EQUAL
64990: PUSH
64991: LD_VAR 0 2
64995: PPUSH
64996: CALL_OW 264
65000: PUSH
65001: LD_INT 14
65003: PUSH
65004: LD_INT 53
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: IN
65011: AND
65012: PUSH
65013: LD_VAR 0 4
65017: PPUSH
65018: LD_VAR 0 5
65022: PPUSH
65023: CALL_OW 488
65027: AND
65028: IFFALSE 65052
// CutTreeXYR ( unit , x , y , 12 ) ;
65030: LD_VAR 0 2
65034: PPUSH
65035: LD_VAR 0 4
65039: PPUSH
65040: LD_VAR 0 5
65044: PPUSH
65045: LD_INT 12
65047: PPUSH
65048: CALL 65147 0 4
// if cmd = 256 then
65052: LD_VAR 0 1
65056: PUSH
65057: LD_INT 256
65059: EQUAL
65060: IFFALSE 65081
// SetFactoryWaypoint ( unit , x , y ) ;
65062: LD_VAR 0 2
65066: PPUSH
65067: LD_VAR 0 4
65071: PPUSH
65072: LD_VAR 0 5
65076: PPUSH
65077: CALL 62899 0 3
// if cmd = 257 then
65081: LD_VAR 0 1
65085: PUSH
65086: LD_INT 257
65088: EQUAL
65089: IFFALSE 65110
// SetWarehouseGatheringPoint ( unit , x , y ) ;
65091: LD_VAR 0 2
65095: PPUSH
65096: LD_VAR 0 4
65100: PPUSH
65101: LD_VAR 0 5
65105: PPUSH
65106: CALL 63261 0 3
// if cmd = 258 then
65110: LD_VAR 0 1
65114: PUSH
65115: LD_INT 258
65117: EQUAL
65118: IFFALSE 65142
// BurnTreeXYR ( unit , x , y , 8 ) ;
65120: LD_VAR 0 2
65124: PPUSH
65125: LD_VAR 0 4
65129: PPUSH
65130: LD_VAR 0 5
65134: PPUSH
65135: LD_INT 8
65137: PPUSH
65138: CALL 65541 0 4
// end ;
65142: LD_VAR 0 6
65146: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65147: LD_INT 0
65149: PPUSH
65150: PPUSH
65151: PPUSH
65152: PPUSH
65153: PPUSH
65154: PPUSH
65155: PPUSH
65156: PPUSH
65157: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
65158: LD_VAR 0 1
65162: PPUSH
65163: CALL_OW 302
65167: NOT
65168: PUSH
65169: LD_VAR 0 2
65173: PPUSH
65174: LD_VAR 0 3
65178: PPUSH
65179: CALL_OW 488
65183: NOT
65184: OR
65185: PUSH
65186: LD_VAR 0 4
65190: NOT
65191: OR
65192: IFFALSE 65196
// exit ;
65194: GO 65536
// list := [ ] ;
65196: LD_ADDR_VAR 0 13
65200: PUSH
65201: EMPTY
65202: ST_TO_ADDR
// if x - r < 0 then
65203: LD_VAR 0 2
65207: PUSH
65208: LD_VAR 0 4
65212: MINUS
65213: PUSH
65214: LD_INT 0
65216: LESS
65217: IFFALSE 65229
// min_x := 0 else
65219: LD_ADDR_VAR 0 7
65223: PUSH
65224: LD_INT 0
65226: ST_TO_ADDR
65227: GO 65245
// min_x := x - r ;
65229: LD_ADDR_VAR 0 7
65233: PUSH
65234: LD_VAR 0 2
65238: PUSH
65239: LD_VAR 0 4
65243: MINUS
65244: ST_TO_ADDR
// if y - r < 0 then
65245: LD_VAR 0 3
65249: PUSH
65250: LD_VAR 0 4
65254: MINUS
65255: PUSH
65256: LD_INT 0
65258: LESS
65259: IFFALSE 65271
// min_y := 0 else
65261: LD_ADDR_VAR 0 8
65265: PUSH
65266: LD_INT 0
65268: ST_TO_ADDR
65269: GO 65287
// min_y := y - r ;
65271: LD_ADDR_VAR 0 8
65275: PUSH
65276: LD_VAR 0 3
65280: PUSH
65281: LD_VAR 0 4
65285: MINUS
65286: ST_TO_ADDR
// max_x := x + r ;
65287: LD_ADDR_VAR 0 9
65291: PUSH
65292: LD_VAR 0 2
65296: PUSH
65297: LD_VAR 0 4
65301: PLUS
65302: ST_TO_ADDR
// max_y := y + r ;
65303: LD_ADDR_VAR 0 10
65307: PUSH
65308: LD_VAR 0 3
65312: PUSH
65313: LD_VAR 0 4
65317: PLUS
65318: ST_TO_ADDR
// for _x = min_x to max_x do
65319: LD_ADDR_VAR 0 11
65323: PUSH
65324: DOUBLE
65325: LD_VAR 0 7
65329: DEC
65330: ST_TO_ADDR
65331: LD_VAR 0 9
65335: PUSH
65336: FOR_TO
65337: IFFALSE 65454
// for _y = min_y to max_y do
65339: LD_ADDR_VAR 0 12
65343: PUSH
65344: DOUBLE
65345: LD_VAR 0 8
65349: DEC
65350: ST_TO_ADDR
65351: LD_VAR 0 10
65355: PUSH
65356: FOR_TO
65357: IFFALSE 65450
// begin if not ValidHex ( _x , _y ) then
65359: LD_VAR 0 11
65363: PPUSH
65364: LD_VAR 0 12
65368: PPUSH
65369: CALL_OW 488
65373: NOT
65374: IFFALSE 65378
// continue ;
65376: GO 65356
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65378: LD_VAR 0 11
65382: PPUSH
65383: LD_VAR 0 12
65387: PPUSH
65388: CALL_OW 351
65392: PUSH
65393: LD_VAR 0 11
65397: PPUSH
65398: LD_VAR 0 12
65402: PPUSH
65403: CALL_OW 554
65407: AND
65408: IFFALSE 65448
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65410: LD_ADDR_VAR 0 13
65414: PUSH
65415: LD_VAR 0 13
65419: PPUSH
65420: LD_VAR 0 13
65424: PUSH
65425: LD_INT 1
65427: PLUS
65428: PPUSH
65429: LD_VAR 0 11
65433: PUSH
65434: LD_VAR 0 12
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PPUSH
65443: CALL_OW 2
65447: ST_TO_ADDR
// end ;
65448: GO 65356
65450: POP
65451: POP
65452: GO 65336
65454: POP
65455: POP
// if not list then
65456: LD_VAR 0 13
65460: NOT
65461: IFFALSE 65465
// exit ;
65463: GO 65536
// for i in list do
65465: LD_ADDR_VAR 0 6
65469: PUSH
65470: LD_VAR 0 13
65474: PUSH
65475: FOR_IN
65476: IFFALSE 65534
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
65478: LD_VAR 0 1
65482: PPUSH
65483: LD_STRING M
65485: PUSH
65486: LD_VAR 0 6
65490: PUSH
65491: LD_INT 1
65493: ARRAY
65494: PUSH
65495: LD_VAR 0 6
65499: PUSH
65500: LD_INT 2
65502: ARRAY
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: LD_INT 0
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: PUSH
65525: EMPTY
65526: LIST
65527: PPUSH
65528: CALL_OW 447
65532: GO 65475
65534: POP
65535: POP
// end ;
65536: LD_VAR 0 5
65540: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
65541: LD_INT 0
65543: PPUSH
65544: PPUSH
65545: PPUSH
65546: PPUSH
65547: PPUSH
65548: PPUSH
65549: PPUSH
65550: PPUSH
65551: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
65552: LD_VAR 0 1
65556: PPUSH
65557: CALL_OW 302
65561: NOT
65562: PUSH
65563: LD_VAR 0 2
65567: PPUSH
65568: LD_VAR 0 3
65572: PPUSH
65573: CALL_OW 488
65577: NOT
65578: OR
65579: PUSH
65580: LD_VAR 0 4
65584: NOT
65585: OR
65586: IFFALSE 65590
// exit ;
65588: GO 65938
// list := [ ] ;
65590: LD_ADDR_VAR 0 13
65594: PUSH
65595: EMPTY
65596: ST_TO_ADDR
// if x - r < 0 then
65597: LD_VAR 0 2
65601: PUSH
65602: LD_VAR 0 4
65606: MINUS
65607: PUSH
65608: LD_INT 0
65610: LESS
65611: IFFALSE 65623
// min_x := 0 else
65613: LD_ADDR_VAR 0 7
65617: PUSH
65618: LD_INT 0
65620: ST_TO_ADDR
65621: GO 65639
// min_x := x - r ;
65623: LD_ADDR_VAR 0 7
65627: PUSH
65628: LD_VAR 0 2
65632: PUSH
65633: LD_VAR 0 4
65637: MINUS
65638: ST_TO_ADDR
// if y - r < 0 then
65639: LD_VAR 0 3
65643: PUSH
65644: LD_VAR 0 4
65648: MINUS
65649: PUSH
65650: LD_INT 0
65652: LESS
65653: IFFALSE 65665
// min_y := 0 else
65655: LD_ADDR_VAR 0 8
65659: PUSH
65660: LD_INT 0
65662: ST_TO_ADDR
65663: GO 65681
// min_y := y - r ;
65665: LD_ADDR_VAR 0 8
65669: PUSH
65670: LD_VAR 0 3
65674: PUSH
65675: LD_VAR 0 4
65679: MINUS
65680: ST_TO_ADDR
// max_x := x + r ;
65681: LD_ADDR_VAR 0 9
65685: PUSH
65686: LD_VAR 0 2
65690: PUSH
65691: LD_VAR 0 4
65695: PLUS
65696: ST_TO_ADDR
// max_y := y + r ;
65697: LD_ADDR_VAR 0 10
65701: PUSH
65702: LD_VAR 0 3
65706: PUSH
65707: LD_VAR 0 4
65711: PLUS
65712: ST_TO_ADDR
// for _x = min_x to max_x do
65713: LD_ADDR_VAR 0 11
65717: PUSH
65718: DOUBLE
65719: LD_VAR 0 7
65723: DEC
65724: ST_TO_ADDR
65725: LD_VAR 0 9
65729: PUSH
65730: FOR_TO
65731: IFFALSE 65848
// for _y = min_y to max_y do
65733: LD_ADDR_VAR 0 12
65737: PUSH
65738: DOUBLE
65739: LD_VAR 0 8
65743: DEC
65744: ST_TO_ADDR
65745: LD_VAR 0 10
65749: PUSH
65750: FOR_TO
65751: IFFALSE 65844
// begin if not ValidHex ( _x , _y ) then
65753: LD_VAR 0 11
65757: PPUSH
65758: LD_VAR 0 12
65762: PPUSH
65763: CALL_OW 488
65767: NOT
65768: IFFALSE 65772
// continue ;
65770: GO 65750
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
65772: LD_VAR 0 11
65776: PPUSH
65777: LD_VAR 0 12
65781: PPUSH
65782: CALL_OW 351
65786: PUSH
65787: LD_VAR 0 11
65791: PPUSH
65792: LD_VAR 0 12
65796: PPUSH
65797: CALL_OW 554
65801: AND
65802: IFFALSE 65842
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
65804: LD_ADDR_VAR 0 13
65808: PUSH
65809: LD_VAR 0 13
65813: PPUSH
65814: LD_VAR 0 13
65818: PUSH
65819: LD_INT 1
65821: PLUS
65822: PPUSH
65823: LD_VAR 0 11
65827: PUSH
65828: LD_VAR 0 12
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PPUSH
65837: CALL_OW 2
65841: ST_TO_ADDR
// end ;
65842: GO 65750
65844: POP
65845: POP
65846: GO 65730
65848: POP
65849: POP
// if not list then
65850: LD_VAR 0 13
65854: NOT
65855: IFFALSE 65859
// exit ;
65857: GO 65938
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
65859: LD_ADDR_VAR 0 13
65863: PUSH
65864: LD_VAR 0 1
65868: PPUSH
65869: LD_VAR 0 13
65873: PPUSH
65874: LD_INT 1
65876: PPUSH
65877: LD_INT 1
65879: PPUSH
65880: CALL 11875 0 4
65884: ST_TO_ADDR
// ComStop ( flame ) ;
65885: LD_VAR 0 1
65889: PPUSH
65890: CALL_OW 141
// for i in list do
65894: LD_ADDR_VAR 0 6
65898: PUSH
65899: LD_VAR 0 13
65903: PUSH
65904: FOR_IN
65905: IFFALSE 65936
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
65907: LD_VAR 0 1
65911: PPUSH
65912: LD_VAR 0 6
65916: PUSH
65917: LD_INT 1
65919: ARRAY
65920: PPUSH
65921: LD_VAR 0 6
65925: PUSH
65926: LD_INT 2
65928: ARRAY
65929: PPUSH
65930: CALL_OW 176
65934: GO 65904
65936: POP
65937: POP
// end ;
65938: LD_VAR 0 5
65942: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
65943: LD_EXP 91
65947: NOT
65948: IFFALSE 65998
65950: GO 65952
65952: DISABLE
// begin initHack := true ;
65953: LD_ADDR_EXP 91
65957: PUSH
65958: LD_INT 1
65960: ST_TO_ADDR
// hackTanks := [ ] ;
65961: LD_ADDR_EXP 92
65965: PUSH
65966: EMPTY
65967: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
65968: LD_ADDR_EXP 93
65972: PUSH
65973: EMPTY
65974: ST_TO_ADDR
// hackLimit := 3 ;
65975: LD_ADDR_EXP 94
65979: PUSH
65980: LD_INT 3
65982: ST_TO_ADDR
// hackDist := 12 ;
65983: LD_ADDR_EXP 95
65987: PUSH
65988: LD_INT 12
65990: ST_TO_ADDR
// hackCounter := [ ] ;
65991: LD_ADDR_EXP 96
65995: PUSH
65996: EMPTY
65997: ST_TO_ADDR
// end ;
65998: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
65999: LD_EXP 91
66003: PUSH
66004: LD_INT 34
66006: PUSH
66007: LD_INT 99
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PPUSH
66014: CALL_OW 69
66018: AND
66019: IFFALSE 66272
66021: GO 66023
66023: DISABLE
66024: LD_INT 0
66026: PPUSH
66027: PPUSH
// begin enable ;
66028: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
66029: LD_ADDR_VAR 0 1
66033: PUSH
66034: LD_INT 34
66036: PUSH
66037: LD_INT 99
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PPUSH
66044: CALL_OW 69
66048: PUSH
66049: FOR_IN
66050: IFFALSE 66270
// begin if not i in hackTanks then
66052: LD_VAR 0 1
66056: PUSH
66057: LD_EXP 92
66061: IN
66062: NOT
66063: IFFALSE 66146
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
66065: LD_ADDR_EXP 92
66069: PUSH
66070: LD_EXP 92
66074: PPUSH
66075: LD_EXP 92
66079: PUSH
66080: LD_INT 1
66082: PLUS
66083: PPUSH
66084: LD_VAR 0 1
66088: PPUSH
66089: CALL_OW 1
66093: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
66094: LD_ADDR_EXP 93
66098: PUSH
66099: LD_EXP 93
66103: PPUSH
66104: LD_EXP 93
66108: PUSH
66109: LD_INT 1
66111: PLUS
66112: PPUSH
66113: EMPTY
66114: PPUSH
66115: CALL_OW 1
66119: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
66120: LD_ADDR_EXP 96
66124: PUSH
66125: LD_EXP 96
66129: PPUSH
66130: LD_EXP 96
66134: PUSH
66135: LD_INT 1
66137: PLUS
66138: PPUSH
66139: EMPTY
66140: PPUSH
66141: CALL_OW 1
66145: ST_TO_ADDR
// end ; if not IsOk ( i ) then
66146: LD_VAR 0 1
66150: PPUSH
66151: CALL_OW 302
66155: NOT
66156: IFFALSE 66169
// begin HackUnlinkAll ( i ) ;
66158: LD_VAR 0 1
66162: PPUSH
66163: CALL 66275 0 1
// continue ;
66167: GO 66049
// end ; HackCheckCapturedStatus ( i ) ;
66169: LD_VAR 0 1
66173: PPUSH
66174: CALL 66718 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
66178: LD_ADDR_VAR 0 2
66182: PUSH
66183: LD_INT 81
66185: PUSH
66186: LD_VAR 0 1
66190: PPUSH
66191: CALL_OW 255
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 33
66202: PUSH
66203: LD_INT 3
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 91
66212: PUSH
66213: LD_VAR 0 1
66217: PUSH
66218: LD_EXP 95
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: LIST
66227: PUSH
66228: LD_INT 50
66230: PUSH
66231: EMPTY
66232: LIST
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: PPUSH
66240: CALL_OW 69
66244: ST_TO_ADDR
// if not tmp then
66245: LD_VAR 0 2
66249: NOT
66250: IFFALSE 66254
// continue ;
66252: GO 66049
// HackLink ( i , tmp ) ;
66254: LD_VAR 0 1
66258: PPUSH
66259: LD_VAR 0 2
66263: PPUSH
66264: CALL 66411 0 2
// end ;
66268: GO 66049
66270: POP
66271: POP
// end ;
66272: PPOPN 2
66274: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
66275: LD_INT 0
66277: PPUSH
66278: PPUSH
66279: PPUSH
// if not hack in hackTanks then
66280: LD_VAR 0 1
66284: PUSH
66285: LD_EXP 92
66289: IN
66290: NOT
66291: IFFALSE 66295
// exit ;
66293: GO 66406
// index := GetElementIndex ( hackTanks , hack ) ;
66295: LD_ADDR_VAR 0 4
66299: PUSH
66300: LD_EXP 92
66304: PPUSH
66305: LD_VAR 0 1
66309: PPUSH
66310: CALL 11172 0 2
66314: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
66315: LD_EXP 93
66319: PUSH
66320: LD_VAR 0 4
66324: ARRAY
66325: IFFALSE 66406
// begin for i in hackTanksCaptured [ index ] do
66327: LD_ADDR_VAR 0 3
66331: PUSH
66332: LD_EXP 93
66336: PUSH
66337: LD_VAR 0 4
66341: ARRAY
66342: PUSH
66343: FOR_IN
66344: IFFALSE 66370
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
66346: LD_VAR 0 3
66350: PUSH
66351: LD_INT 1
66353: ARRAY
66354: PPUSH
66355: LD_VAR 0 3
66359: PUSH
66360: LD_INT 2
66362: ARRAY
66363: PPUSH
66364: CALL_OW 235
66368: GO 66343
66370: POP
66371: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
66372: LD_ADDR_EXP 93
66376: PUSH
66377: LD_EXP 93
66381: PPUSH
66382: LD_VAR 0 4
66386: PPUSH
66387: EMPTY
66388: PPUSH
66389: CALL_OW 1
66393: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
66394: LD_VAR 0 1
66398: PPUSH
66399: LD_INT 0
66401: PPUSH
66402: CALL_OW 505
// end ; end ;
66406: LD_VAR 0 2
66410: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
66411: LD_INT 0
66413: PPUSH
66414: PPUSH
66415: PPUSH
// if not hack in hackTanks or not vehicles then
66416: LD_VAR 0 1
66420: PUSH
66421: LD_EXP 92
66425: IN
66426: NOT
66427: PUSH
66428: LD_VAR 0 2
66432: NOT
66433: OR
66434: IFFALSE 66438
// exit ;
66436: GO 66713
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
66438: LD_ADDR_VAR 0 2
66442: PUSH
66443: LD_VAR 0 1
66447: PPUSH
66448: LD_VAR 0 2
66452: PPUSH
66453: LD_INT 1
66455: PPUSH
66456: LD_INT 1
66458: PPUSH
66459: CALL 11822 0 4
66463: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
66464: LD_ADDR_VAR 0 5
66468: PUSH
66469: LD_EXP 92
66473: PPUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL 11172 0 2
66483: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
66484: LD_EXP 93
66488: PUSH
66489: LD_VAR 0 5
66493: ARRAY
66494: PUSH
66495: LD_EXP 94
66499: LESS
66500: IFFALSE 66689
// begin for i := 1 to vehicles do
66502: LD_ADDR_VAR 0 4
66506: PUSH
66507: DOUBLE
66508: LD_INT 1
66510: DEC
66511: ST_TO_ADDR
66512: LD_VAR 0 2
66516: PUSH
66517: FOR_TO
66518: IFFALSE 66687
// begin if hackTanksCaptured [ index ] = hackLimit then
66520: LD_EXP 93
66524: PUSH
66525: LD_VAR 0 5
66529: ARRAY
66530: PUSH
66531: LD_EXP 94
66535: EQUAL
66536: IFFALSE 66540
// break ;
66538: GO 66687
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
66540: LD_ADDR_EXP 96
66544: PUSH
66545: LD_EXP 96
66549: PPUSH
66550: LD_VAR 0 5
66554: PPUSH
66555: LD_EXP 96
66559: PUSH
66560: LD_VAR 0 5
66564: ARRAY
66565: PUSH
66566: LD_INT 1
66568: PLUS
66569: PPUSH
66570: CALL_OW 1
66574: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
66575: LD_ADDR_EXP 93
66579: PUSH
66580: LD_EXP 93
66584: PPUSH
66585: LD_VAR 0 5
66589: PUSH
66590: LD_EXP 93
66594: PUSH
66595: LD_VAR 0 5
66599: ARRAY
66600: PUSH
66601: LD_INT 1
66603: PLUS
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PPUSH
66609: LD_VAR 0 2
66613: PUSH
66614: LD_VAR 0 4
66618: ARRAY
66619: PUSH
66620: LD_VAR 0 2
66624: PUSH
66625: LD_VAR 0 4
66629: ARRAY
66630: PPUSH
66631: CALL_OW 255
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: PPUSH
66640: CALL 11387 0 3
66644: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
66645: LD_VAR 0 2
66649: PUSH
66650: LD_VAR 0 4
66654: ARRAY
66655: PPUSH
66656: LD_VAR 0 1
66660: PPUSH
66661: CALL_OW 255
66665: PPUSH
66666: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
66670: LD_VAR 0 2
66674: PUSH
66675: LD_VAR 0 4
66679: ARRAY
66680: PPUSH
66681: CALL_OW 141
// end ;
66685: GO 66517
66687: POP
66688: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66689: LD_VAR 0 1
66693: PPUSH
66694: LD_EXP 93
66698: PUSH
66699: LD_VAR 0 5
66703: ARRAY
66704: PUSH
66705: LD_INT 0
66707: PLUS
66708: PPUSH
66709: CALL_OW 505
// end ;
66713: LD_VAR 0 3
66717: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
66718: LD_INT 0
66720: PPUSH
66721: PPUSH
66722: PPUSH
66723: PPUSH
// if not hack in hackTanks then
66724: LD_VAR 0 1
66728: PUSH
66729: LD_EXP 92
66733: IN
66734: NOT
66735: IFFALSE 66739
// exit ;
66737: GO 66979
// index := GetElementIndex ( hackTanks , hack ) ;
66739: LD_ADDR_VAR 0 4
66743: PUSH
66744: LD_EXP 92
66748: PPUSH
66749: LD_VAR 0 1
66753: PPUSH
66754: CALL 11172 0 2
66758: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
66759: LD_ADDR_VAR 0 3
66763: PUSH
66764: DOUBLE
66765: LD_EXP 93
66769: PUSH
66770: LD_VAR 0 4
66774: ARRAY
66775: INC
66776: ST_TO_ADDR
66777: LD_INT 1
66779: PUSH
66780: FOR_DOWNTO
66781: IFFALSE 66953
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
66783: LD_ADDR_VAR 0 5
66787: PUSH
66788: LD_EXP 93
66792: PUSH
66793: LD_VAR 0 4
66797: ARRAY
66798: PUSH
66799: LD_VAR 0 3
66803: ARRAY
66804: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
66805: LD_VAR 0 5
66809: PUSH
66810: LD_INT 1
66812: ARRAY
66813: PPUSH
66814: CALL_OW 302
66818: NOT
66819: PUSH
66820: LD_VAR 0 5
66824: PUSH
66825: LD_INT 1
66827: ARRAY
66828: PPUSH
66829: CALL_OW 255
66833: PUSH
66834: LD_VAR 0 1
66838: PPUSH
66839: CALL_OW 255
66843: NONEQUAL
66844: OR
66845: IFFALSE 66951
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
66847: LD_VAR 0 5
66851: PUSH
66852: LD_INT 1
66854: ARRAY
66855: PPUSH
66856: CALL_OW 305
66860: PUSH
66861: LD_VAR 0 5
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PPUSH
66870: CALL_OW 255
66874: PUSH
66875: LD_VAR 0 1
66879: PPUSH
66880: CALL_OW 255
66884: EQUAL
66885: AND
66886: IFFALSE 66910
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
66888: LD_VAR 0 5
66892: PUSH
66893: LD_INT 1
66895: ARRAY
66896: PPUSH
66897: LD_VAR 0 5
66901: PUSH
66902: LD_INT 2
66904: ARRAY
66905: PPUSH
66906: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
66910: LD_ADDR_EXP 93
66914: PUSH
66915: LD_EXP 93
66919: PPUSH
66920: LD_VAR 0 4
66924: PPUSH
66925: LD_EXP 93
66929: PUSH
66930: LD_VAR 0 4
66934: ARRAY
66935: PPUSH
66936: LD_VAR 0 3
66940: PPUSH
66941: CALL_OW 3
66945: PPUSH
66946: CALL_OW 1
66950: ST_TO_ADDR
// end ; end ;
66951: GO 66780
66953: POP
66954: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
66955: LD_VAR 0 1
66959: PPUSH
66960: LD_EXP 93
66964: PUSH
66965: LD_VAR 0 4
66969: ARRAY
66970: PUSH
66971: LD_INT 0
66973: PLUS
66974: PPUSH
66975: CALL_OW 505
// end ;
66979: LD_VAR 0 2
66983: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
66984: LD_INT 0
66986: PPUSH
66987: PPUSH
66988: PPUSH
66989: PPUSH
// if not hack in hackTanks then
66990: LD_VAR 0 1
66994: PUSH
66995: LD_EXP 92
66999: IN
67000: NOT
67001: IFFALSE 67005
// exit ;
67003: GO 67090
// index := GetElementIndex ( hackTanks , hack ) ;
67005: LD_ADDR_VAR 0 5
67009: PUSH
67010: LD_EXP 92
67014: PPUSH
67015: LD_VAR 0 1
67019: PPUSH
67020: CALL 11172 0 2
67024: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
67025: LD_ADDR_VAR 0 4
67029: PUSH
67030: DOUBLE
67031: LD_INT 1
67033: DEC
67034: ST_TO_ADDR
67035: LD_EXP 93
67039: PUSH
67040: LD_VAR 0 5
67044: ARRAY
67045: PUSH
67046: FOR_TO
67047: IFFALSE 67088
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
67049: LD_EXP 93
67053: PUSH
67054: LD_VAR 0 5
67058: ARRAY
67059: PUSH
67060: LD_VAR 0 4
67064: ARRAY
67065: PUSH
67066: LD_INT 1
67068: ARRAY
67069: PUSH
67070: LD_VAR 0 2
67074: EQUAL
67075: IFFALSE 67086
// KillUnit ( vehicle ) ;
67077: LD_VAR 0 2
67081: PPUSH
67082: CALL_OW 66
67086: GO 67046
67088: POP
67089: POP
// end ;
67090: LD_VAR 0 3
67094: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
67095: LD_EXP 97
67099: NOT
67100: IFFALSE 67135
67102: GO 67104
67104: DISABLE
// begin initMiner := true ;
67105: LD_ADDR_EXP 97
67109: PUSH
67110: LD_INT 1
67112: ST_TO_ADDR
// minersList := [ ] ;
67113: LD_ADDR_EXP 98
67117: PUSH
67118: EMPTY
67119: ST_TO_ADDR
// minerMinesList := [ ] ;
67120: LD_ADDR_EXP 99
67124: PUSH
67125: EMPTY
67126: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
67127: LD_ADDR_EXP 100
67131: PUSH
67132: LD_INT 5
67134: ST_TO_ADDR
// end ;
67135: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
67136: LD_EXP 97
67140: PUSH
67141: LD_INT 34
67143: PUSH
67144: LD_INT 81
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PPUSH
67151: CALL_OW 69
67155: AND
67156: IFFALSE 67617
67158: GO 67160
67160: DISABLE
67161: LD_INT 0
67163: PPUSH
67164: PPUSH
67165: PPUSH
67166: PPUSH
// begin enable ;
67167: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
67168: LD_ADDR_VAR 0 1
67172: PUSH
67173: LD_INT 34
67175: PUSH
67176: LD_INT 81
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: PPUSH
67183: CALL_OW 69
67187: PUSH
67188: FOR_IN
67189: IFFALSE 67261
// begin if not i in minersList then
67191: LD_VAR 0 1
67195: PUSH
67196: LD_EXP 98
67200: IN
67201: NOT
67202: IFFALSE 67259
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
67204: LD_ADDR_EXP 98
67208: PUSH
67209: LD_EXP 98
67213: PPUSH
67214: LD_EXP 98
67218: PUSH
67219: LD_INT 1
67221: PLUS
67222: PPUSH
67223: LD_VAR 0 1
67227: PPUSH
67228: CALL_OW 1
67232: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
67233: LD_ADDR_EXP 99
67237: PUSH
67238: LD_EXP 99
67242: PPUSH
67243: LD_EXP 99
67247: PUSH
67248: LD_INT 1
67250: PLUS
67251: PPUSH
67252: EMPTY
67253: PPUSH
67254: CALL_OW 1
67258: ST_TO_ADDR
// end end ;
67259: GO 67188
67261: POP
67262: POP
// for i := minerMinesList downto 1 do
67263: LD_ADDR_VAR 0 1
67267: PUSH
67268: DOUBLE
67269: LD_EXP 99
67273: INC
67274: ST_TO_ADDR
67275: LD_INT 1
67277: PUSH
67278: FOR_DOWNTO
67279: IFFALSE 67615
// begin if IsLive ( minersList [ i ] ) then
67281: LD_EXP 98
67285: PUSH
67286: LD_VAR 0 1
67290: ARRAY
67291: PPUSH
67292: CALL_OW 300
67296: IFFALSE 67324
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
67298: LD_EXP 98
67302: PUSH
67303: LD_VAR 0 1
67307: ARRAY
67308: PPUSH
67309: LD_EXP 99
67313: PUSH
67314: LD_VAR 0 1
67318: ARRAY
67319: PPUSH
67320: CALL_OW 505
// if not minerMinesList [ i ] then
67324: LD_EXP 99
67328: PUSH
67329: LD_VAR 0 1
67333: ARRAY
67334: NOT
67335: IFFALSE 67339
// continue ;
67337: GO 67278
// for j := minerMinesList [ i ] downto 1 do
67339: LD_ADDR_VAR 0 2
67343: PUSH
67344: DOUBLE
67345: LD_EXP 99
67349: PUSH
67350: LD_VAR 0 1
67354: ARRAY
67355: INC
67356: ST_TO_ADDR
67357: LD_INT 1
67359: PUSH
67360: FOR_DOWNTO
67361: IFFALSE 67611
// begin side := GetSide ( minersList [ i ] ) ;
67363: LD_ADDR_VAR 0 3
67367: PUSH
67368: LD_EXP 98
67372: PUSH
67373: LD_VAR 0 1
67377: ARRAY
67378: PPUSH
67379: CALL_OW 255
67383: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
67384: LD_ADDR_VAR 0 4
67388: PUSH
67389: LD_EXP 99
67393: PUSH
67394: LD_VAR 0 1
67398: ARRAY
67399: PUSH
67400: LD_VAR 0 2
67404: ARRAY
67405: PUSH
67406: LD_INT 1
67408: ARRAY
67409: PPUSH
67410: LD_EXP 99
67414: PUSH
67415: LD_VAR 0 1
67419: ARRAY
67420: PUSH
67421: LD_VAR 0 2
67425: ARRAY
67426: PUSH
67427: LD_INT 2
67429: ARRAY
67430: PPUSH
67431: CALL_OW 428
67435: ST_TO_ADDR
// if not tmp then
67436: LD_VAR 0 4
67440: NOT
67441: IFFALSE 67445
// continue ;
67443: GO 67360
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
67445: LD_VAR 0 4
67449: PUSH
67450: LD_INT 81
67452: PUSH
67453: LD_VAR 0 3
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PPUSH
67462: CALL_OW 69
67466: IN
67467: PUSH
67468: LD_EXP 99
67472: PUSH
67473: LD_VAR 0 1
67477: ARRAY
67478: PUSH
67479: LD_VAR 0 2
67483: ARRAY
67484: PUSH
67485: LD_INT 1
67487: ARRAY
67488: PPUSH
67489: LD_EXP 99
67493: PUSH
67494: LD_VAR 0 1
67498: ARRAY
67499: PUSH
67500: LD_VAR 0 2
67504: ARRAY
67505: PUSH
67506: LD_INT 2
67508: ARRAY
67509: PPUSH
67510: CALL_OW 458
67514: AND
67515: IFFALSE 67609
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
67517: LD_EXP 99
67521: PUSH
67522: LD_VAR 0 1
67526: ARRAY
67527: PUSH
67528: LD_VAR 0 2
67532: ARRAY
67533: PUSH
67534: LD_INT 1
67536: ARRAY
67537: PPUSH
67538: LD_EXP 99
67542: PUSH
67543: LD_VAR 0 1
67547: ARRAY
67548: PUSH
67549: LD_VAR 0 2
67553: ARRAY
67554: PUSH
67555: LD_INT 2
67557: ARRAY
67558: PPUSH
67559: LD_VAR 0 3
67563: PPUSH
67564: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
67568: LD_ADDR_EXP 99
67572: PUSH
67573: LD_EXP 99
67577: PPUSH
67578: LD_VAR 0 1
67582: PPUSH
67583: LD_EXP 99
67587: PUSH
67588: LD_VAR 0 1
67592: ARRAY
67593: PPUSH
67594: LD_VAR 0 2
67598: PPUSH
67599: CALL_OW 3
67603: PPUSH
67604: CALL_OW 1
67608: ST_TO_ADDR
// end ; end ;
67609: GO 67360
67611: POP
67612: POP
// end ;
67613: GO 67278
67615: POP
67616: POP
// end ;
67617: PPOPN 4
67619: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
67620: LD_INT 0
67622: PPUSH
67623: PPUSH
// result := false ;
67624: LD_ADDR_VAR 0 4
67628: PUSH
67629: LD_INT 0
67631: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
67632: LD_VAR 0 1
67636: PPUSH
67637: CALL_OW 264
67641: PUSH
67642: LD_INT 81
67644: EQUAL
67645: NOT
67646: IFFALSE 67650
// exit ;
67648: GO 67890
// index := GetElementIndex ( minersList , unit ) ;
67650: LD_ADDR_VAR 0 5
67654: PUSH
67655: LD_EXP 98
67659: PPUSH
67660: LD_VAR 0 1
67664: PPUSH
67665: CALL 11172 0 2
67669: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
67670: LD_EXP 99
67674: PUSH
67675: LD_VAR 0 5
67679: ARRAY
67680: PUSH
67681: LD_EXP 100
67685: GREATEREQUAL
67686: IFFALSE 67690
// exit ;
67688: GO 67890
// ComMoveXY ( unit , x , y ) ;
67690: LD_VAR 0 1
67694: PPUSH
67695: LD_VAR 0 2
67699: PPUSH
67700: LD_VAR 0 3
67704: PPUSH
67705: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
67709: LD_INT 35
67711: PPUSH
67712: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
67716: LD_VAR 0 1
67720: PPUSH
67721: LD_VAR 0 2
67725: PPUSH
67726: LD_VAR 0 3
67730: PPUSH
67731: CALL 42924 0 3
67735: NOT
67736: PUSH
67737: LD_VAR 0 1
67741: PPUSH
67742: CALL_OW 314
67746: AND
67747: IFFALSE 67751
// exit ;
67749: GO 67890
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
67751: LD_VAR 0 2
67755: PPUSH
67756: LD_VAR 0 3
67760: PPUSH
67761: CALL_OW 428
67765: PUSH
67766: LD_VAR 0 1
67770: EQUAL
67771: PUSH
67772: LD_VAR 0 1
67776: PPUSH
67777: CALL_OW 314
67781: NOT
67782: AND
67783: IFFALSE 67709
// PlaySoundXY ( x , y , PlantMine ) ;
67785: LD_VAR 0 2
67789: PPUSH
67790: LD_VAR 0 3
67794: PPUSH
67795: LD_STRING PlantMine
67797: PPUSH
67798: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
67802: LD_VAR 0 2
67806: PPUSH
67807: LD_VAR 0 3
67811: PPUSH
67812: LD_VAR 0 1
67816: PPUSH
67817: CALL_OW 255
67821: PPUSH
67822: LD_INT 0
67824: PPUSH
67825: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
67829: LD_ADDR_EXP 99
67833: PUSH
67834: LD_EXP 99
67838: PPUSH
67839: LD_VAR 0 5
67843: PUSH
67844: LD_EXP 99
67848: PUSH
67849: LD_VAR 0 5
67853: ARRAY
67854: PUSH
67855: LD_INT 1
67857: PLUS
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PPUSH
67863: LD_VAR 0 2
67867: PUSH
67868: LD_VAR 0 3
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PPUSH
67877: CALL 11387 0 3
67881: ST_TO_ADDR
// result := true ;
67882: LD_ADDR_VAR 0 4
67886: PUSH
67887: LD_INT 1
67889: ST_TO_ADDR
// end ;
67890: LD_VAR 0 4
67894: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
67895: LD_INT 0
67897: PPUSH
67898: PPUSH
67899: PPUSH
// if not unit in minersList then
67900: LD_VAR 0 1
67904: PUSH
67905: LD_EXP 98
67909: IN
67910: NOT
67911: IFFALSE 67915
// exit ;
67913: GO 68307
// index := GetElementIndex ( minersList , unit ) ;
67915: LD_ADDR_VAR 0 6
67919: PUSH
67920: LD_EXP 98
67924: PPUSH
67925: LD_VAR 0 1
67929: PPUSH
67930: CALL 11172 0 2
67934: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
67935: LD_ADDR_VAR 0 5
67939: PUSH
67940: DOUBLE
67941: LD_EXP 99
67945: PUSH
67946: LD_VAR 0 6
67950: ARRAY
67951: INC
67952: ST_TO_ADDR
67953: LD_INT 1
67955: PUSH
67956: FOR_DOWNTO
67957: IFFALSE 68118
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
67959: LD_EXP 99
67963: PUSH
67964: LD_VAR 0 6
67968: ARRAY
67969: PUSH
67970: LD_VAR 0 5
67974: ARRAY
67975: PUSH
67976: LD_INT 1
67978: ARRAY
67979: PUSH
67980: LD_VAR 0 2
67984: EQUAL
67985: PUSH
67986: LD_EXP 99
67990: PUSH
67991: LD_VAR 0 6
67995: ARRAY
67996: PUSH
67997: LD_VAR 0 5
68001: ARRAY
68002: PUSH
68003: LD_INT 2
68005: ARRAY
68006: PUSH
68007: LD_VAR 0 3
68011: EQUAL
68012: AND
68013: IFFALSE 68116
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68015: LD_EXP 99
68019: PUSH
68020: LD_VAR 0 6
68024: ARRAY
68025: PUSH
68026: LD_VAR 0 5
68030: ARRAY
68031: PUSH
68032: LD_INT 1
68034: ARRAY
68035: PPUSH
68036: LD_EXP 99
68040: PUSH
68041: LD_VAR 0 6
68045: ARRAY
68046: PUSH
68047: LD_VAR 0 5
68051: ARRAY
68052: PUSH
68053: LD_INT 2
68055: ARRAY
68056: PPUSH
68057: LD_VAR 0 1
68061: PPUSH
68062: CALL_OW 255
68066: PPUSH
68067: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68071: LD_ADDR_EXP 99
68075: PUSH
68076: LD_EXP 99
68080: PPUSH
68081: LD_VAR 0 6
68085: PPUSH
68086: LD_EXP 99
68090: PUSH
68091: LD_VAR 0 6
68095: ARRAY
68096: PPUSH
68097: LD_VAR 0 5
68101: PPUSH
68102: CALL_OW 3
68106: PPUSH
68107: CALL_OW 1
68111: ST_TO_ADDR
// exit ;
68112: POP
68113: POP
68114: GO 68307
// end ; end ;
68116: GO 67956
68118: POP
68119: POP
// for i := minerMinesList [ index ] downto 1 do
68120: LD_ADDR_VAR 0 5
68124: PUSH
68125: DOUBLE
68126: LD_EXP 99
68130: PUSH
68131: LD_VAR 0 6
68135: ARRAY
68136: INC
68137: ST_TO_ADDR
68138: LD_INT 1
68140: PUSH
68141: FOR_DOWNTO
68142: IFFALSE 68305
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
68144: LD_EXP 99
68148: PUSH
68149: LD_VAR 0 6
68153: ARRAY
68154: PUSH
68155: LD_VAR 0 5
68159: ARRAY
68160: PUSH
68161: LD_INT 1
68163: ARRAY
68164: PPUSH
68165: LD_EXP 99
68169: PUSH
68170: LD_VAR 0 6
68174: ARRAY
68175: PUSH
68176: LD_VAR 0 5
68180: ARRAY
68181: PUSH
68182: LD_INT 2
68184: ARRAY
68185: PPUSH
68186: LD_VAR 0 2
68190: PPUSH
68191: LD_VAR 0 3
68195: PPUSH
68196: CALL_OW 298
68200: PUSH
68201: LD_INT 6
68203: LESS
68204: IFFALSE 68303
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
68206: LD_EXP 99
68210: PUSH
68211: LD_VAR 0 6
68215: ARRAY
68216: PUSH
68217: LD_VAR 0 5
68221: ARRAY
68222: PUSH
68223: LD_INT 1
68225: ARRAY
68226: PPUSH
68227: LD_EXP 99
68231: PUSH
68232: LD_VAR 0 6
68236: ARRAY
68237: PUSH
68238: LD_VAR 0 5
68242: ARRAY
68243: PUSH
68244: LD_INT 2
68246: ARRAY
68247: PPUSH
68248: LD_VAR 0 1
68252: PPUSH
68253: CALL_OW 255
68257: PPUSH
68258: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
68262: LD_ADDR_EXP 99
68266: PUSH
68267: LD_EXP 99
68271: PPUSH
68272: LD_VAR 0 6
68276: PPUSH
68277: LD_EXP 99
68281: PUSH
68282: LD_VAR 0 6
68286: ARRAY
68287: PPUSH
68288: LD_VAR 0 5
68292: PPUSH
68293: CALL_OW 3
68297: PPUSH
68298: CALL_OW 1
68302: ST_TO_ADDR
// end ; end ;
68303: GO 68141
68305: POP
68306: POP
// end ;
68307: LD_VAR 0 4
68311: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
68312: LD_INT 0
68314: PPUSH
68315: PPUSH
68316: PPUSH
68317: PPUSH
68318: PPUSH
68319: PPUSH
68320: PPUSH
68321: PPUSH
68322: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
68323: LD_VAR 0 1
68327: PPUSH
68328: CALL_OW 264
68332: PUSH
68333: LD_INT 81
68335: EQUAL
68336: NOT
68337: PUSH
68338: LD_VAR 0 1
68342: PUSH
68343: LD_EXP 98
68347: IN
68348: NOT
68349: OR
68350: IFFALSE 68354
// exit ;
68352: GO 68676
// index := GetElementIndex ( minersList , unit ) ;
68354: LD_ADDR_VAR 0 6
68358: PUSH
68359: LD_EXP 98
68363: PPUSH
68364: LD_VAR 0 1
68368: PPUSH
68369: CALL 11172 0 2
68373: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
68374: LD_ADDR_VAR 0 8
68378: PUSH
68379: LD_EXP 100
68383: PUSH
68384: LD_EXP 99
68388: PUSH
68389: LD_VAR 0 6
68393: ARRAY
68394: MINUS
68395: ST_TO_ADDR
// if not minesFreeAmount then
68396: LD_VAR 0 8
68400: NOT
68401: IFFALSE 68405
// exit ;
68403: GO 68676
// tmp := [ ] ;
68405: LD_ADDR_VAR 0 7
68409: PUSH
68410: EMPTY
68411: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
68412: LD_ADDR_VAR 0 5
68416: PUSH
68417: DOUBLE
68418: LD_INT 1
68420: DEC
68421: ST_TO_ADDR
68422: LD_VAR 0 8
68426: PUSH
68427: FOR_TO
68428: IFFALSE 68623
// begin _d := rand ( 0 , 5 ) ;
68430: LD_ADDR_VAR 0 11
68434: PUSH
68435: LD_INT 0
68437: PPUSH
68438: LD_INT 5
68440: PPUSH
68441: CALL_OW 12
68445: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
68446: LD_ADDR_VAR 0 12
68450: PUSH
68451: LD_INT 2
68453: PPUSH
68454: LD_INT 6
68456: PPUSH
68457: CALL_OW 12
68461: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
68462: LD_ADDR_VAR 0 9
68466: PUSH
68467: LD_VAR 0 2
68471: PPUSH
68472: LD_VAR 0 11
68476: PPUSH
68477: LD_VAR 0 12
68481: PPUSH
68482: CALL_OW 272
68486: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
68487: LD_ADDR_VAR 0 10
68491: PUSH
68492: LD_VAR 0 3
68496: PPUSH
68497: LD_VAR 0 11
68501: PPUSH
68502: LD_VAR 0 12
68506: PPUSH
68507: CALL_OW 273
68511: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
68512: LD_VAR 0 9
68516: PPUSH
68517: LD_VAR 0 10
68521: PPUSH
68522: CALL_OW 488
68526: PUSH
68527: LD_VAR 0 9
68531: PUSH
68532: LD_VAR 0 10
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_VAR 0 7
68545: IN
68546: NOT
68547: AND
68548: PUSH
68549: LD_VAR 0 9
68553: PPUSH
68554: LD_VAR 0 10
68558: PPUSH
68559: CALL_OW 458
68563: NOT
68564: AND
68565: IFFALSE 68607
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
68567: LD_ADDR_VAR 0 7
68571: PUSH
68572: LD_VAR 0 7
68576: PPUSH
68577: LD_VAR 0 7
68581: PUSH
68582: LD_INT 1
68584: PLUS
68585: PPUSH
68586: LD_VAR 0 9
68590: PUSH
68591: LD_VAR 0 10
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PPUSH
68600: CALL_OW 1
68604: ST_TO_ADDR
68605: GO 68621
// i := i - 1 ;
68607: LD_ADDR_VAR 0 5
68611: PUSH
68612: LD_VAR 0 5
68616: PUSH
68617: LD_INT 1
68619: MINUS
68620: ST_TO_ADDR
// end ;
68621: GO 68427
68623: POP
68624: POP
// for i in tmp do
68625: LD_ADDR_VAR 0 5
68629: PUSH
68630: LD_VAR 0 7
68634: PUSH
68635: FOR_IN
68636: IFFALSE 68674
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
68638: LD_VAR 0 1
68642: PPUSH
68643: LD_VAR 0 5
68647: PUSH
68648: LD_INT 1
68650: ARRAY
68651: PPUSH
68652: LD_VAR 0 5
68656: PUSH
68657: LD_INT 2
68659: ARRAY
68660: PPUSH
68661: CALL 67620 0 3
68665: NOT
68666: IFFALSE 68672
// exit ;
68668: POP
68669: POP
68670: GO 68676
68672: GO 68635
68674: POP
68675: POP
// end ;
68676: LD_VAR 0 4
68680: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
68681: LD_INT 0
68683: PPUSH
68684: PPUSH
68685: PPUSH
68686: PPUSH
68687: PPUSH
68688: PPUSH
68689: PPUSH
// if not GetClass ( unit ) = class_sniper then
68690: LD_VAR 0 1
68694: PPUSH
68695: CALL_OW 257
68699: PUSH
68700: LD_INT 5
68702: EQUAL
68703: NOT
68704: IFFALSE 68708
// exit ;
68706: GO 69096
// dist := 8 ;
68708: LD_ADDR_VAR 0 5
68712: PUSH
68713: LD_INT 8
68715: ST_TO_ADDR
// viewRange := 12 ;
68716: LD_ADDR_VAR 0 7
68720: PUSH
68721: LD_INT 12
68723: ST_TO_ADDR
// side := GetSide ( unit ) ;
68724: LD_ADDR_VAR 0 6
68728: PUSH
68729: LD_VAR 0 1
68733: PPUSH
68734: CALL_OW 255
68738: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
68739: LD_INT 61
68741: PPUSH
68742: LD_VAR 0 6
68746: PPUSH
68747: CALL_OW 321
68751: PUSH
68752: LD_INT 2
68754: EQUAL
68755: IFFALSE 68765
// viewRange := 16 ;
68757: LD_ADDR_VAR 0 7
68761: PUSH
68762: LD_INT 16
68764: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
68765: LD_VAR 0 1
68769: PPUSH
68770: LD_VAR 0 2
68774: PPUSH
68775: LD_VAR 0 3
68779: PPUSH
68780: CALL_OW 297
68784: PUSH
68785: LD_VAR 0 5
68789: GREATER
68790: IFFALSE 68869
// begin ComMoveXY ( unit , x , y ) ;
68792: LD_VAR 0 1
68796: PPUSH
68797: LD_VAR 0 2
68801: PPUSH
68802: LD_VAR 0 3
68806: PPUSH
68807: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
68811: LD_INT 35
68813: PPUSH
68814: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
68818: LD_VAR 0 1
68822: PPUSH
68823: LD_VAR 0 2
68827: PPUSH
68828: LD_VAR 0 3
68832: PPUSH
68833: CALL 42924 0 3
68837: NOT
68838: IFFALSE 68842
// exit ;
68840: GO 69096
// until GetDistUnitXY ( unit , x , y ) < dist ;
68842: LD_VAR 0 1
68846: PPUSH
68847: LD_VAR 0 2
68851: PPUSH
68852: LD_VAR 0 3
68856: PPUSH
68857: CALL_OW 297
68861: PUSH
68862: LD_VAR 0 5
68866: LESS
68867: IFFALSE 68811
// end ; ComTurnXY ( unit , x , y ) ;
68869: LD_VAR 0 1
68873: PPUSH
68874: LD_VAR 0 2
68878: PPUSH
68879: LD_VAR 0 3
68883: PPUSH
68884: CALL_OW 118
// wait ( 5 ) ;
68888: LD_INT 5
68890: PPUSH
68891: CALL_OW 67
// _d := GetDir ( unit ) ;
68895: LD_ADDR_VAR 0 10
68899: PUSH
68900: LD_VAR 0 1
68904: PPUSH
68905: CALL_OW 254
68909: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
68910: LD_ADDR_VAR 0 8
68914: PUSH
68915: LD_VAR 0 1
68919: PPUSH
68920: CALL_OW 250
68924: PPUSH
68925: LD_VAR 0 10
68929: PPUSH
68930: LD_VAR 0 5
68934: PPUSH
68935: CALL_OW 272
68939: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
68940: LD_ADDR_VAR 0 9
68944: PUSH
68945: LD_VAR 0 1
68949: PPUSH
68950: CALL_OW 251
68954: PPUSH
68955: LD_VAR 0 10
68959: PPUSH
68960: LD_VAR 0 5
68964: PPUSH
68965: CALL_OW 273
68969: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68970: LD_VAR 0 8
68974: PPUSH
68975: LD_VAR 0 9
68979: PPUSH
68980: CALL_OW 488
68984: NOT
68985: IFFALSE 68989
// exit ;
68987: GO 69096
// ComAnimCustom ( unit , 1 ) ;
68989: LD_VAR 0 1
68993: PPUSH
68994: LD_INT 1
68996: PPUSH
68997: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
69001: LD_VAR 0 8
69005: PPUSH
69006: LD_VAR 0 9
69010: PPUSH
69011: LD_VAR 0 6
69015: PPUSH
69016: LD_VAR 0 7
69020: PPUSH
69021: CALL_OW 330
// repeat wait ( 1 ) ;
69025: LD_INT 1
69027: PPUSH
69028: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
69032: LD_VAR 0 1
69036: PPUSH
69037: CALL_OW 316
69041: PUSH
69042: LD_VAR 0 1
69046: PPUSH
69047: CALL_OW 314
69051: OR
69052: PUSH
69053: LD_VAR 0 1
69057: PPUSH
69058: CALL_OW 302
69062: NOT
69063: OR
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: CALL_OW 301
69074: OR
69075: IFFALSE 69025
// RemoveSeeing ( _x , _y , side ) ;
69077: LD_VAR 0 8
69081: PPUSH
69082: LD_VAR 0 9
69086: PPUSH
69087: LD_VAR 0 6
69091: PPUSH
69092: CALL_OW 331
// end ;
69096: LD_VAR 0 4
69100: RET
