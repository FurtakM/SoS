// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1111 0 0
// PrepareArabians ;
 313: CALL 4770 0 0
// Nef_PrepareNature ;
 317: CALL 27314 0 0
// MissionIntro ;
 321: CALL 6438 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: PUSH
 462: LD_OWVAR 67
 466: ARRAY
 467: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 , 40 40$00 ] [ Difficulty ] ;
 468: LD_ADDR_EXP 28
 472: PUSH
 473: LD_INT 147000
 475: PUSH
 476: LD_INT 126000
 478: PUSH
 479: LD_INT 94500
 481: PUSH
 482: LD_INT 84000
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_OWVAR 67
 495: ARRAY
 496: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 497: LD_ADDR_EXP 29
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_OWVAR 67
 524: ARRAY
 525: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 , 2 ] [ Difficulty ] ;
 526: LD_ADDR_EXP 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 2
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 31
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_OWVAR 67
 582: ARRAY
 583: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 584: LD_ADDR_EXP 32
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 , 2 ] [ Difficulty ] ;
 613: LD_ADDR_EXP 33
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_OWVAR 67
 640: ARRAY
 641: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
 642: LD_ADDR_EXP 34
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: LD_OWVAR 67
 669: ARRAY
 670: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 671: LD_ADDR_EXP 35
 675: PUSH
 676: LD_INT 106
 678: PUSH
 679: LD_INT 159
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 91
 688: PUSH
 689: LD_INT 130
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 75
 698: PUSH
 699: LD_INT 98
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 54
 708: PUSH
 709: LD_INT 60
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 86
 718: PUSH
 719: LD_INT 54
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 128
 728: PUSH
 729: LD_INT 42
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 142
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 , 50 ] [ Difficulty ] ;
 755: LD_ADDR_EXP 36
 759: PUSH
 760: LD_INT 200
 762: PUSH
 763: LD_INT 150
 765: PUSH
 766: LD_INT 100
 768: PUSH
 769: LD_INT 50
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// end ;
 784: LD_VAR 0 1
 788: RET
// every 0 0$1 trigger debugMode do var i ;
 789: LD_EXP 26
 793: IFFALSE 1108
 795: GO 797
 797: DISABLE
 798: LD_INT 0
 800: PPUSH
// begin enable ;
 801: ENABLE
// FogOff ( your_side ) ;
 802: LD_OWVAR 2
 806: PPUSH
 807: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 811: LD_ADDR_VAR 0 1
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_OWVAR 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 2
 830: PUSH
 831: LD_INT 21
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: FOR_IN
 866: IFFALSE 882
// SetLives ( i , 1000 ) ;
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 1000
 875: PPUSH
 876: CALL_OW 234
 880: GO 865
 882: POP
 883: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_OWVAR 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: FOR_IN
 921: IFFALSE 985
// begin SetSkill ( i , skill_combat , 10 ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 938: LD_VAR 0 1
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: LD_INT 10
 948: PPUSH
 949: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: LD_INT 10
 963: PPUSH
 964: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 968: LD_VAR 0 1
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 10
 978: PPUSH
 979: CALL_OW 237
// end ;
 983: GO 920
 985: POP
 986: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 987: LD_ADDR_VAR 0 1
 991: PUSH
 992: LD_INT 22
 994: PUSH
 995: LD_OWVAR 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 69
1040: PUSH
1041: FOR_IN
1042: IFFALSE 1106
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 274
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 9999
1059: PPUSH
1060: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 274
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: LD_INT 9999
1079: PPUSH
1080: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 274
1093: PPUSH
1094: LD_INT 3
1096: PPUSH
1097: LD_INT 9999
1099: PPUSH
1100: CALL_OW 277
// end ;
1104: GO 1041
1106: POP
1107: POP
// end ; end_of_file
1108: PPOPN 1
1110: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1111: LD_INT 0
1113: PPUSH
// vsevolodTeam = [ ] ;
1114: LD_ADDR_EXP 52
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// PrepareYashin ;
1121: CALL 3701 0 0
// if savedVsevolod then
1125: LD_EXP 1
1129: IFFALSE 1151
// begin PrepareVsevolodBase ;
1131: CALL 4164 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1135: LD_INT 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL 1329 0 2
// SpawnVsevolodTeamInBase ;
1145: CALL 4447 0 0
// end else
1149: GO 1165
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1151: LD_INT 2
1153: PPUSH
1154: LD_INT 5
1156: PPUSH
1157: CALL 1329 0 2
// SpawnPlatonovReinforces ;
1161: CALL 3744 0 0
// end ; if matPredStatus = state_researched then
1165: LD_EXP 4
1169: PUSH
1170: LD_INT 2
1172: EQUAL
1173: IFFALSE 1188
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1175: LD_INT 9
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 2
1183: PPUSH
1184: CALL_OW 322
// end ;
1188: LD_VAR 0 1
1192: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1193: LD_INT 0
1195: PPUSH
// uc_side = 3 ;
1196: LD_ADDR_OWVAR 20
1200: PUSH
1201: LD_INT 3
1203: ST_TO_ADDR
// uc_nation = 3 ;
1204: LD_ADDR_OWVAR 21
1208: PUSH
1209: LD_INT 3
1211: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1212: LD_ADDR_EXP 55
1216: PUSH
1217: LD_STRING Xavier2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL 12172 0 3
1230: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1231: LD_EXP 55
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1245: LD_EXP 55
1249: PPUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 48
// end ;
1267: LD_VAR 0 4
1271: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side = 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation = 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1291: LD_ADDR_EXP 55
1295: PUSH
1296: LD_STRING Xavier2
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12172 0 3
1309: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1310: LD_EXP 55
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 52
// end ;
1324: LD_VAR 0 2
1328: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// uc_side = 3 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 3
1344: ST_TO_ADDR
// uc_nation = 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1353: LD_ADDR_EXP 37
1357: PUSH
1358: LD_STRING Burlak
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL 12172 0 3
1371: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1372: LD_ADDR_EXP 42
1376: PUSH
1377: LD_STRING Titov
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL 12172 0 3
1390: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1391: LD_EXP 42
1395: NOT
1396: PUSH
1397: LD_STRING 06_VSTitov
1399: PPUSH
1400: CALL_OW 28
1404: AND
1405: IFFALSE 1442
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1407: LD_ADDR_EXP 42
1411: PUSH
1412: LD_STRING VSTitov
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL 12172 0 3
1425: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1426: LD_ADDR_EXP 52
1430: PUSH
1431: LD_EXP 52
1435: PUSH
1436: LD_EXP 42
1440: ADD
1441: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1442: LD_ADDR_EXP 43
1446: PUSH
1447: LD_STRING Dolgov
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL 12172 0 3
1460: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1461: LD_EXP 43
1465: NOT
1466: PUSH
1467: LD_STRING 06_VSDolgov
1469: PPUSH
1470: CALL_OW 28
1474: AND
1475: IFFALSE 1512
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1477: LD_ADDR_EXP 43
1481: PUSH
1482: LD_STRING VSDolgov
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 12172 0 3
1495: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_EXP 52
1505: PUSH
1506: LD_EXP 43
1510: ADD
1511: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1512: LD_ADDR_EXP 44
1516: PUSH
1517: LD_STRING Lipshchin
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL 12172 0 3
1530: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1531: LD_EXP 44
1535: NOT
1536: PUSH
1537: LD_STRING 06_VSLipshchin
1539: PPUSH
1540: CALL_OW 28
1544: AND
1545: IFFALSE 1582
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1547: LD_ADDR_EXP 44
1551: PUSH
1552: LD_STRING VSLipshchin
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL 12172 0 3
1565: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1566: LD_ADDR_EXP 52
1570: PUSH
1571: LD_EXP 52
1575: PUSH
1576: LD_EXP 44
1580: ADD
1581: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Karamazov
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL 12172 0 3
1600: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1601: LD_EXP 38
1605: NOT
1606: PUSH
1607: LD_STRING 06_VSKaramazov
1609: PPUSH
1610: CALL_OW 28
1614: AND
1615: IFFALSE 1652
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1617: LD_ADDR_EXP 38
1621: PUSH
1622: LD_STRING VSKaramazov
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL 12172 0 3
1635: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1636: LD_ADDR_EXP 52
1640: PUSH
1641: LD_EXP 52
1645: PUSH
1646: LD_EXP 38
1650: ADD
1651: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1652: LD_ADDR_EXP 39
1656: PUSH
1657: LD_STRING Petrovova
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL 12172 0 3
1670: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1671: LD_EXP 39
1675: NOT
1676: PUSH
1677: LD_STRING 06_VSPetrovova
1679: PPUSH
1680: CALL_OW 28
1684: AND
1685: IFFALSE 1722
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1687: LD_ADDR_EXP 39
1691: PUSH
1692: LD_STRING VSPetrovova
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL 12172 0 3
1705: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1706: LD_ADDR_EXP 52
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_EXP 39
1720: ADD
1721: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1722: LD_ADDR_EXP 40
1726: PUSH
1727: LD_STRING Gleb
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL 12172 0 3
1740: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1741: LD_EXP 40
1745: NOT
1746: PUSH
1747: LD_STRING 06_VSGleb
1749: PPUSH
1750: CALL_OW 28
1754: AND
1755: IFFALSE 1792
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1757: LD_ADDR_EXP 40
1761: PUSH
1762: LD_STRING VSGleb
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 12172 0 3
1775: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1776: LD_ADDR_EXP 52
1780: PUSH
1781: LD_EXP 52
1785: PUSH
1786: LD_EXP 40
1790: ADD
1791: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1792: LD_ADDR_EXP 41
1796: PUSH
1797: LD_STRING Petrosyan
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL 12172 0 3
1810: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1811: LD_EXP 41
1815: NOT
1816: PUSH
1817: LD_STRING 06_VSPetrosyan
1819: PPUSH
1820: CALL_OW 28
1824: AND
1825: IFFALSE 1862
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1827: LD_ADDR_EXP 41
1831: PUSH
1832: LD_STRING VSPetrosyan
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 12172 0 3
1845: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1846: LD_ADDR_EXP 52
1850: PUSH
1851: LD_EXP 52
1855: PUSH
1856: LD_EXP 41
1860: ADD
1861: ST_TO_ADDR
// end ; if savedVsevolod then
1862: LD_EXP 1
1866: IFFALSE 1976
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1868: LD_ADDR_EXP 45
1872: PUSH
1873: LD_STRING Kirilenkova
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 12172 0 3
1886: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1887: LD_ADDR_EXP 46
1891: PUSH
1892: LD_STRING Belkov
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL 12172 0 3
1905: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1906: LD_ADDR_EXP 47
1910: PUSH
1911: LD_STRING Belkov2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: CALL 12172 0 3
1924: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1925: LD_ADDR_EXP 48
1929: PUSH
1930: LD_STRING Vsevolod
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL 12172 0 3
1943: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1944: LD_EXP 48
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1959: LD_EXP 48
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: LD_INT 153
1969: PPUSH
1970: CALL_OW 118
// end else
1974: GO 2015
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1976: LD_ADDR_EXP 45
1980: PUSH
1981: LD_STRING 04_Kirilenkova
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1989: LD_ADDR_EXP 46
1993: PUSH
1994: LD_STRING 04_Belkov
1996: PPUSH
1997: CALL_OW 34
2001: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
2002: LD_ADDR_EXP 47
2006: PUSH
2007: LD_STRING 04_Belkov2
2009: PPUSH
2010: CALL_OW 34
2014: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
2015: LD_ADDR_EXP 49
2019: PUSH
2020: LD_STRING Platonov
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL 12172 0 3
2033: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
2034: LD_ADDR_EXP 50
2038: PUSH
2039: LD_STRING Popov
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL 12172 0 3
2052: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2053: LD_ADDR_EXP 53
2057: PUSH
2058: LD_STRING 06_other_survivors
2060: PPUSH
2061: CALL_OW 31
2065: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2066: LD_ADDR_EXP 54
2070: PUSH
2071: LD_EXP 53
2075: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2076: LD_ADDR_EXP 52
2080: PUSH
2081: LD_EXP 52
2085: PUSH
2086: LD_STRING 06_other_survivors_with_vsevolod
2088: PPUSH
2089: CALL_OW 31
2093: ADD
2094: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 2
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2608
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_EXP 2
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2133: LD_ADDR_OWVAR 37
2137: PUSH
2138: LD_EXP 2
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_EXP 2
2162: PUSH
2163: LD_VAR 0 4
2167: ARRAY
2168: PUSH
2169: LD_INT 3
2171: ARRAY
2172: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2173: LD_ADDR_OWVAR 38
2177: PUSH
2178: LD_EXP 2
2182: PUSH
2183: LD_VAR 0 4
2187: ARRAY
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_EXP 2
2202: PUSH
2203: LD_VAR 0 4
2207: ARRAY
2208: PUSH
2209: LD_INT 5
2211: ARRAY
2212: ST_TO_ADDR
// uc_direction := dir ;
2213: LD_ADDR_OWVAR 24
2217: PUSH
2218: LD_VAR 0 2
2222: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2223: LD_ADDR_OWVAR 41
2227: PUSH
2228: LD_INT 60
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// car := CreateVehicle ;
2239: LD_ADDR_VAR 0 6
2243: PUSH
2244: CALL_OW 45
2248: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2249: LD_VAR 0 6
2253: PPUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2266: LD_EXP 2
2270: PUSH
2271: LD_VAR 0 4
2275: ARRAY
2276: PUSH
2277: LD_INT 6
2279: ARRAY
2280: PUSH
2281: LD_STRING Bur
2283: DOUBLE
2284: EQUAL
2285: IFTRUE 2289
2287: GO 2306
2289: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2290: LD_EXP 37
2294: PPUSH
2295: LD_VAR 0 6
2299: PPUSH
2300: CALL_OW 52
2304: GO 2606
2306: LD_STRING Kar
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2331
2314: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2315: LD_EXP 38
2319: PPUSH
2320: LD_VAR 0 6
2324: PPUSH
2325: CALL_OW 52
2329: GO 2606
2331: LD_STRING Ptr
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2356
2339: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2340: LD_EXP 39
2344: PPUSH
2345: LD_VAR 0 6
2349: PPUSH
2350: CALL_OW 52
2354: GO 2606
2356: LD_STRING Glb
2358: DOUBLE
2359: EQUAL
2360: IFTRUE 2364
2362: GO 2381
2364: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2365: LD_EXP 40
2369: PPUSH
2370: LD_VAR 0 6
2374: PPUSH
2375: CALL_OW 52
2379: GO 2606
2381: LD_STRING Pet
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2406
2389: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2390: LD_EXP 41
2394: PPUSH
2395: LD_VAR 0 6
2399: PPUSH
2400: CALL_OW 52
2404: GO 2606
2406: LD_STRING Dol
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2431
2414: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2415: LD_EXP 43
2419: PPUSH
2420: LD_VAR 0 6
2424: PPUSH
2425: CALL_OW 52
2429: GO 2606
2431: LD_STRING Lip
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2456
2439: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2440: LD_EXP 44
2444: PPUSH
2445: LD_VAR 0 6
2449: PPUSH
2450: CALL_OW 52
2454: GO 2606
2456: LD_STRING Tit
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2481
2464: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2465: LD_EXP 42
2469: PPUSH
2470: LD_VAR 0 6
2474: PPUSH
2475: CALL_OW 52
2479: GO 2606
2481: LD_STRING Kir
2483: DOUBLE
2484: EQUAL
2485: IFTRUE 2489
2487: GO 2506
2489: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2490: LD_EXP 45
2494: PPUSH
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 52
2504: GO 2606
2506: LD_STRING Bel
2508: DOUBLE
2509: EQUAL
2510: IFTRUE 2514
2512: GO 2531
2514: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2515: LD_EXP 46
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2606
2531: LD_STRING Bel2
2533: DOUBLE
2534: EQUAL
2535: IFTRUE 2539
2537: GO 2556
2539: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2540: LD_EXP 47
2544: PPUSH
2545: LD_VAR 0 6
2549: PPUSH
2550: CALL_OW 52
2554: GO 2606
2556: LD_STRING rand
2558: DOUBLE
2559: EQUAL
2560: IFTRUE 2564
2562: GO 2605
2564: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2565: LD_EXP 54
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 6
2578: PPUSH
2579: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2583: LD_ADDR_EXP 54
2587: PUSH
2588: LD_EXP 54
2592: PUSH
2593: LD_EXP 54
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: DIFF
2602: ST_TO_ADDR
// end ; end ;
2603: GO 2606
2605: POP
// end ;
2606: GO 2110
2608: POP
2609: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2610: LD_EXP 37
2614: PUSH
2615: LD_EXP 37
2619: PPUSH
2620: CALL_OW 305
2624: NOT
2625: AND
2626: PUSH
2627: LD_EXP 37
2631: PUSH
2632: LD_EXP 52
2636: IN
2637: NOT
2638: AND
2639: IFFALSE 2658
// PlaceUnitArea ( Burlak , area , false ) ;
2641: LD_EXP 37
2645: PPUSH
2646: LD_VAR 0 1
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2658: LD_EXP 38
2662: PUSH
2663: LD_EXP 38
2667: PPUSH
2668: CALL_OW 305
2672: NOT
2673: AND
2674: PUSH
2675: LD_EXP 38
2679: PUSH
2680: LD_EXP 52
2684: IN
2685: NOT
2686: AND
2687: IFFALSE 2706
// PlaceUnitArea ( Karamazov , area , false ) ;
2689: LD_EXP 38
2693: PPUSH
2694: LD_VAR 0 1
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2706: LD_EXP 39
2710: PUSH
2711: LD_EXP 39
2715: PPUSH
2716: CALL_OW 305
2720: NOT
2721: AND
2722: PUSH
2723: LD_EXP 39
2727: PUSH
2728: LD_EXP 52
2732: IN
2733: NOT
2734: AND
2735: IFFALSE 2754
// PlaceUnitArea ( Petrovova , area , false ) ;
2737: LD_EXP 39
2741: PPUSH
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2754: LD_EXP 40
2758: PUSH
2759: LD_EXP 40
2763: PPUSH
2764: CALL_OW 305
2768: NOT
2769: AND
2770: PUSH
2771: LD_EXP 40
2775: PUSH
2776: LD_EXP 52
2780: IN
2781: NOT
2782: AND
2783: IFFALSE 2802
// PlaceUnitArea ( Gleb , area , false ) ;
2785: LD_EXP 40
2789: PPUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2802: LD_EXP 41
2806: PUSH
2807: LD_EXP 41
2811: PPUSH
2812: CALL_OW 305
2816: NOT
2817: AND
2818: PUSH
2819: LD_EXP 41
2823: PUSH
2824: LD_EXP 52
2828: IN
2829: NOT
2830: AND
2831: IFFALSE 2850
// PlaceUnitArea ( Petrosyan , area , false ) ;
2833: LD_EXP 41
2837: PPUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 43
2859: PPUSH
2860: CALL_OW 305
2864: NOT
2865: AND
2866: PUSH
2867: LD_EXP 43
2871: PUSH
2872: LD_EXP 52
2876: IN
2877: NOT
2878: AND
2879: IFFALSE 2898
// PlaceUnitArea ( Dolgov , area , false ) ;
2881: LD_EXP 43
2885: PPUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2898: LD_EXP 44
2902: PUSH
2903: LD_EXP 44
2907: PPUSH
2908: CALL_OW 305
2912: NOT
2913: AND
2914: PUSH
2915: LD_EXP 44
2919: PUSH
2920: LD_EXP 52
2924: IN
2925: NOT
2926: AND
2927: IFFALSE 2946
// PlaceUnitArea ( Lipshchin , area , false ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_VAR 0 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2946: LD_EXP 42
2950: PUSH
2951: LD_EXP 42
2955: PPUSH
2956: CALL_OW 305
2960: NOT
2961: AND
2962: PUSH
2963: LD_EXP 42
2967: PUSH
2968: LD_EXP 52
2972: IN
2973: NOT
2974: AND
2975: IFFALSE 2994
// PlaceUnitArea ( Titov , area , false ) ;
2977: LD_EXP 42
2981: PPUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2994: LD_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PPUSH
3004: CALL_OW 305
3008: NOT
3009: AND
3010: PUSH
3011: LD_EXP 45
3015: PUSH
3016: LD_EXP 52
3020: IN
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 1
3028: AND
3029: IFFALSE 3048
// PlaceUnitArea ( Kirilenkova , area , false ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3048: LD_EXP 46
3052: PUSH
3053: LD_EXP 46
3057: PPUSH
3058: CALL_OW 305
3062: NOT
3063: AND
3064: PUSH
3065: LD_EXP 46
3069: PUSH
3070: LD_EXP 52
3074: IN
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 1
3082: AND
3083: IFFALSE 3102
// PlaceUnitArea ( Belkov , area , false ) ;
3085: LD_EXP 46
3089: PPUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3102: LD_EXP 47
3106: PUSH
3107: LD_EXP 47
3111: PPUSH
3112: CALL_OW 305
3116: NOT
3117: AND
3118: PUSH
3119: LD_EXP 47
3123: PUSH
3124: LD_EXP 52
3128: IN
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 1
3136: AND
3137: IFFALSE 3156
// PlaceUnitArea ( Belkov2 , area , false ) ;
3139: LD_EXP 47
3143: PPUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 49
// for unit in survivorsToPlace do
3156: LD_ADDR_VAR 0 5
3160: PUSH
3161: LD_EXP 54
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3188
// PlaceUnitArea ( unit , area , false ) ;
3169: LD_VAR 0 5
3173: PPUSH
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: GO 3166
3188: POP
3189: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3190: LD_ADDR_VAR 0 7
3194: PUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 51
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 34
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 34
3240: PUSH
3241: LD_INT 12
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3264: LD_ADDR_VAR 0 8
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 89
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// if cargoList then
3309: LD_VAR 0 7
3313: IFFALSE 3503
// for i = 1 to cargoList do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3501
// if resourcesFrom06 then
3333: LD_EXP 3
3337: IFFALSE 3499
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3339: LD_EXP 3
3343: PUSH
3344: LD_VAR 0 4
3348: ARRAY
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PUSH
3354: LD_INT 100
3356: GREATER
3357: NOT
3358: PUSH
3359: LD_EXP 3
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: PUSH
3370: LD_INT 2
3372: ARRAY
3373: PUSH
3374: LD_INT 100
3376: GREATER
3377: OR
3378: PUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 4
3388: ARRAY
3389: PUSH
3390: LD_INT 3
3392: ARRAY
3393: PUSH
3394: LD_INT 100
3396: GREATER
3397: OR
3398: IFFALSE 3499
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3400: LD_VAR 0 7
3404: PUSH
3405: LD_VAR 0 4
3409: ARRAY
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_EXP 3
3418: PUSH
3419: LD_VAR 0 4
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3433: LD_VAR 0 7
3437: PUSH
3438: LD_VAR 0 4
3442: ARRAY
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_EXP 3
3451: PUSH
3452: LD_VAR 0 4
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3466: LD_VAR 0 7
3470: PUSH
3471: LD_VAR 0 4
3475: ARRAY
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_VAR 0 4
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 291
// end ; end ;
3499: GO 3330
3501: POP
3502: POP
// if bigCargoList then
3503: LD_VAR 0 8
3507: IFFALSE 3696
// for i = 1 to bigCargoList do
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 8
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3694
// if resourcesFrom06 then
3527: LD_EXP 3
3531: IFFALSE 3692
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3533: LD_EXP 3
3537: PUSH
3538: LD_VAR 0 4
3542: ARRAY
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PUSH
3548: LD_INT 100
3550: GREATER
3551: PUSH
3552: LD_EXP 3
3556: PUSH
3557: LD_VAR 0 4
3561: ARRAY
3562: PUSH
3563: LD_INT 2
3565: ARRAY
3566: PUSH
3567: LD_INT 100
3569: GREATER
3570: OR
3571: PUSH
3572: LD_EXP 3
3576: PUSH
3577: LD_VAR 0 4
3581: ARRAY
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: PUSH
3587: LD_INT 100
3589: GREATER
3590: OR
3591: IFFALSE 3692
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3593: LD_VAR 0 8
3597: PUSH
3598: LD_VAR 0 4
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 3
3611: PUSH
3612: LD_VAR 0 4
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3626: LD_VAR 0 8
3630: PUSH
3631: LD_VAR 0 4
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_EXP 3
3644: PUSH
3645: LD_VAR 0 4
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 4
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_EXP 3
3677: PUSH
3678: LD_VAR 0 4
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3524
3694: POP
3695: POP
// end ;
3696: LD_VAR 0 3
3700: RET
// function PrepareYashin ; begin
3701: LD_INT 0
3703: PPUSH
// uc_side = 6 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 6
3711: ST_TO_ADDR
// uc_nation = 3 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3720: LD_ADDR_EXP 51
3724: PUSH
3725: LD_STRING Yashin
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 12172 0 3
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 1
3743: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// uc_side = 3 ;
3750: LD_ADDR_OWVAR 20
3754: PUSH
3755: LD_INT 3
3757: ST_TO_ADDR
// uc_nation = 3 ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 43
3787: PUSH
3788: LD_INT 44
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_INT 50
3809: PPUSH
3810: LD_INT 60
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL 48577 0 5
// veh = CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// if Belkov then
3859: LD_EXP 46
3863: IFFALSE 3881
// PlaceHumanInUnit ( Belkov , veh ) else
3865: LD_EXP 46
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 52
3879: GO 3925
// if Difficulty = 1 or Difficulty = 2 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: OR
3899: IFFALSE 3925
// begin un = CreateHuman ;
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3925: LD_INT 22
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 51
3936: PPUSH
3937: LD_INT 50
3939: PPUSH
3940: LD_INT 60
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL 48577 0 5
// veh = CreateVehicle ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: CALL_OW 45
3961: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_INT 2
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 100
3999: PPUSH
4000: CALL_OW 290
// if Belkov2 then
4004: LD_EXP 47
4008: IFFALSE 4026
// PlaceHumanInUnit ( Belkov2 , veh ) else
4010: LD_EXP 47
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
4024: GO 4060
// if Difficulty = 1 then
4026: LD_OWVAR 67
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4060
// begin un = CreateHuman ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: CALL_OW 44
4045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_VAR 0 4
4055: PPUSH
4056: CALL_OW 52
// end ; if Kirilenkova then
4060: LD_EXP 45
4064: IFFALSE 4159
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4066: LD_INT 22
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 51
4077: PPUSH
4078: LD_INT 50
4080: PPUSH
4081: LD_INT 60
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: CALL 48577 0 5
// veh = CreateVehicle ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: CALL_OW 45
4102: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 100
4140: PPUSH
4141: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4145: LD_EXP 45
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 52
// end ; end ;
4159: LD_VAR 0 1
4163: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
4168: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4169: LD_INT 67
4171: PPUSH
4172: LD_INT 115
4174: PPUSH
4175: LD_INT 3
4177: PPUSH
4178: CALL_OW 441
// uc_side = 3 ;
4182: LD_ADDR_OWVAR 20
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// uc_nation = 3 ;
4190: LD_ADDR_OWVAR 21
4194: PUSH
4195: LD_INT 3
4197: ST_TO_ADDR
// bc_level = 5 ;
4198: LD_ADDR_OWVAR 43
4202: PUSH
4203: LD_INT 5
4205: ST_TO_ADDR
// bc_type = b_depot ;
4206: LD_ADDR_OWVAR 42
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 97
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 47
4232: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_STRING gorkij
4240: PPUSH
4241: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 274
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_EXP 36
4262: PPUSH
4263: CALL_OW 277
// bc_type = b_lab_half ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4275: LD_ADDR_OWVAR 44
4279: PUSH
4280: LD_INT 14
4282: ST_TO_ADDR
// if matPredStatus = state_researched then
4283: LD_EXP 4
4287: PUSH
4288: LD_INT 2
4290: EQUAL
4291: IFFALSE 4311
// begin bc_type = b_lab_full ;
4293: LD_ADDR_OWVAR 42
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4301: LD_ADDR_OWVAR 45
4305: PUSH
4306: LD_INT 12
4308: ST_TO_ADDR
4309: GO 4319
// bc_kind2 = b_lab_basic ;
4311: LD_ADDR_OWVAR 45
4315: PUSH
4316: LD_INT 9
4318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4319: LD_INT 58
4321: PPUSH
4322: LD_INT 105
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 47
// bc_type = b_armoury ;
4332: LD_ADDR_OWVAR 42
4336: PUSH
4337: LD_INT 4
4339: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4340: LD_INT 65
4342: PPUSH
4343: LD_INT 93
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 47
// bc_type = b_oil_mine ;
4353: LD_ADDR_OWVAR 42
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4361: LD_INT 67
4363: PPUSH
4364: LD_INT 115
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: CALL_OW 47
// bc_type = b_oil_power ;
4374: LD_ADDR_OWVAR 42
4378: PUSH
4379: LD_INT 26
4381: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4382: LD_INT 68
4384: PPUSH
4385: LD_INT 104
4387: PPUSH
4388: LD_INT 4
4390: PPUSH
4391: CALL_OW 47
// bc_type = b_breastwork ;
4395: LD_ADDR_OWVAR 42
4399: PUSH
4400: LD_INT 31
4402: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4403: LD_INT 60
4405: PPUSH
4406: LD_INT 91
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4416: LD_INT 73
4418: PPUSH
4419: LD_INT 112
4421: PPUSH
4422: LD_INT 5
4424: PPUSH
4425: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 118
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 47
// end ;
4442: LD_VAR 0 1
4446: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// for unit in vsevolodTeam do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_EXP 52
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4763
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 31
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4555
// if not UnitsInside ( building ) then
4515: LD_VAR 0 4
4519: PPUSH
4520: CALL_OW 313
4524: NOT
4525: IFFALSE 4553
// begin PlaceHumanInBunker ( unit , building ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL 12774 0 2
// SetClass ( unit , 1 ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 336
// end ;
4553: GO 4512
4555: POP
4556: POP
// if not IsInUnit ( unit ) then
4557: LD_VAR 0 2
4561: PPUSH
4562: CALL_OW 310
4566: NOT
4567: IFFALSE 4761
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 7
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4643: LD_ADDR_VAR 0 5
4647: PUSH
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_VAR 0 3
4660: PPUSH
4661: CALL_OW 12
4665: ARRAY
4666: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4667: LD_VAR 0 2
4671: PPUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4681: LD_VAR 0 5
4685: PPUSH
4686: CALL_OW 266
4690: PUSH
4691: LD_INT 0
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4714
4699: POP
// SetClass ( unit , 2 ) ; b_armoury :
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 336
4712: GO 4761
4714: LD_INT 4
4716: DOUBLE
4717: EQUAL
4718: IFTRUE 4722
4720: GO 4737
4722: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 336
4735: GO 4761
4737: LD_INT 7
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4760
4745: POP
// SetClass ( unit , 4 ) ; end ;
4746: LD_VAR 0 2
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 336
4758: GO 4761
4760: POP
// end ; end ;
4761: GO 4464
4763: POP
4764: POP
// end ; end_of_file
4765: LD_VAR 0 1
4769: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4770: LD_INT 0
4772: PPUSH
// remoteVehs = [ ] ;
4773: LD_ADDR_EXP 60
4777: PUSH
4778: EMPTY
4779: ST_TO_ADDR
// minesList = [ ] ;
4780: LD_ADDR_EXP 61
4784: PUSH
4785: EMPTY
4786: ST_TO_ADDR
// heikeGroup = [ ] ;
4787: LD_ADDR_EXP 58
4791: PUSH
4792: EMPTY
4793: ST_TO_ADDR
// PrepareXavierAr ;
4794: CALL 6331 0 0
// PrepareKabulBase ;
4798: CALL 5508 0 0
// end ;
4802: LD_VAR 0 1
4806: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4807: LD_INT 0
4809: PPUSH
4810: PPUSH
4811: PPUSH
// solds = [ ] ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: EMPTY
4818: ST_TO_ADDR
// uc_side = 2 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// uc_nation = 2 ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4835: LD_INT 0
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 381
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4918
// begin solds = solds ^ CreateHuman ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ADD
4876: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: ARRAY
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4895: LD_VAR 0 3
4899: PUSH
4900: LD_VAR 0 2
4904: ARRAY
4905: PPUSH
4906: LD_INT 5
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4858
4918: POP
4919: POP
// result = solds ;
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: LD_VAR 0 3
4929: ST_TO_ADDR
// end ;
4930: LD_VAR 0 1
4934: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
// uc_side = 8 ;
4945: LD_ADDR_OWVAR 20
4949: PUSH
4950: LD_INT 8
4952: ST_TO_ADDR
// uc_nation = 2 ;
4953: LD_ADDR_OWVAR 21
4957: PUSH
4958: LD_INT 2
4960: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4961: LD_ADDR_EXP 56
4965: PUSH
4966: LD_STRING Heike
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 0
4974: PPUSH
4975: CALL 12172 0 3
4979: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_INT 27
4987: PUSH
4988: LD_INT 28
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 23
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5007: LD_INT 14
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 5
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: PPUSH
5035: LD_INT 65
5037: PPUSH
5038: CALL 48577 0 5
// heikeVehicle = CreateVehicle ;
5042: LD_ADDR_EXP 57
5046: PUSH
5047: CALL_OW 45
5051: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5052: LD_EXP 57
5056: PPUSH
5057: LD_INT 20
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5067: LD_EXP 57
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5079: LD_EXP 56
5083: PPUSH
5084: LD_EXP 57
5088: PPUSH
5089: CALL_OW 52
// uc_side = 2 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 2
5100: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_EXP 29
5110: ST_TO_ADDR
// if not heikeHeavyLosses then
5111: LD_EXP 5
5115: NOT
5116: IFFALSE 5134
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5118: LD_ADDR_VAR 0 6
5122: PUSH
5123: LD_VAR 0 6
5127: PUSH
5128: LD_EXP 32
5132: PLUS
5133: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_EXP 30
5143: ST_TO_ADDR
// if not heikeHeavyLosses then
5144: LD_EXP 5
5148: NOT
5149: IFFALSE 5167
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5151: LD_ADDR_VAR 0 7
5155: PUSH
5156: LD_VAR 0 7
5160: PUSH
5161: LD_EXP 33
5165: PLUS
5166: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_EXP 31
5176: ST_TO_ADDR
// if not heikeHeavyLosses then
5177: LD_EXP 5
5181: NOT
5182: IFFALSE 5200
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 8
5193: PUSH
5194: LD_EXP 34
5198: PLUS
5199: ST_TO_ADDR
// for i := 1 to soldAmount do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_VAR 0 6
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5273
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_EXP 27
5225: PPUSH
5226: CALL_OW 381
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5240: LD_ADDR_EXP 58
5244: PUSH
5245: LD_EXP 58
5249: PUSH
5250: LD_VAR 0 3
5254: ADD
5255: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5256: LD_VAR 0 3
5260: PPUSH
5261: LD_INT 20
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// end ;
5271: GO 5215
5273: POP
5274: POP
// for i := 1 to mortarAmount do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 7
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5351
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 8
5298: PPUSH
5299: LD_EXP 27
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5318: LD_ADDR_EXP 58
5322: PUSH
5323: LD_EXP 58
5327: PUSH
5328: LD_VAR 0 3
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 20
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5290
5351: POP
5352: POP
// for i := 1 to vehicleAmount do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 8
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5501
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_EXP 27
5378: PPUSH
5379: CALL_OW 383
// un = CreateHuman ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: CALL_OW 44
5392: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5393: LD_ADDR_EXP 58
5397: PUSH
5398: LD_EXP 58
5402: PUSH
5403: LD_VAR 0 3
5407: ADD
5408: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5409: LD_INT 14
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 5
5430: PPUSH
5431: CALL_OW 12
5435: ARRAY
5436: PPUSH
5437: LD_INT 65
5439: PPUSH
5440: CALL 48577 0 5
// veh = CreateVehicle ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 45
5453: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5454: LD_ADDR_EXP 58
5458: PUSH
5459: LD_EXP 58
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_INT 20
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 52
// end ;
5499: GO 5368
5501: POP
5502: POP
// end ;
5503: LD_VAR 0 1
5507: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// kabulBaseUnits = [ ] ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: EMPTY
5521: ST_TO_ADDR
// uc_side = 2 ;
5522: LD_ADDR_OWVAR 20
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// uc_nation = 2 ;
5530: LD_ADDR_OWVAR 21
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5538: LD_ADDR_EXP 59
5542: PUSH
5543: LD_INT 2
5545: PPUSH
5546: LD_INT 10
5548: PPUSH
5549: LD_STRING newkabul
5551: PPUSH
5552: LD_EXP 27
5556: PPUSH
5557: LD_INT 5000
5559: PUSH
5560: LD_INT 5000
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 17
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 8
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL 13149 0 7
5596: ST_TO_ADDR
// case Difficulty of 2 :
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5626
5610: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5611: LD_INT 49
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 2
5619: PPUSH
5620: CALL_OW 322
// end ; 3 .. 4 :
5624: GO 5696
5626: LD_INT 3
5628: DOUBLE
5629: GREATEREQUAL
5630: IFFALSE 5638
5632: LD_INT 4
5634: DOUBLE
5635: LESSEQUAL
5636: IFTRUE 5640
5638: GO 5695
5640: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5654: LD_INT 50
5656: PPUSH
5657: LD_INT 2
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5667: LD_INT 52
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 2
5675: PPUSH
5676: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5680: LD_INT 61
5682: PPUSH
5683: LD_INT 2
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
// end ; end ;
5693: GO 5696
5695: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_INT 27
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 28
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 22
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 32
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 35
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PUSH
5775: FOR_IN
5776: IFFALSE 5808
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_VAR 0 2
5787: PUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 12
5800: ARRAY
5801: PPUSH
5802: CALL_OW 431
5806: GO 5775
5808: POP
5809: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PPUSH
5839: LD_EXP 27
5843: PPUSH
5844: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_INT 22
5855: PUSH
5856: LD_INT 2
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 50
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 31
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5931
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5903: LD_INT 0
5905: PPUSH
5906: LD_EXP 27
5910: PPUSH
5911: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5915: CALL_OW 44
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 52
// end ;
5929: GO 5900
5931: POP
5932: POP
// if Difficulty = 1 then
5933: LD_OWVAR 67
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 5991
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5943: LD_INT 0
5945: PPUSH
5946: LD_EXP 27
5950: PPUSH
5951: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5955: CALL_OW 44
5959: PPUSH
5960: LD_INT 63
5962: PPUSH
5963: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_INT 66
5974: PPUSH
5975: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5979: CALL_OW 44
5983: PPUSH
5984: LD_INT 68
5986: PPUSH
5987: CALL 12774 0 2
// end ; if Difficulty = 2 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6064
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6001: LD_INT 0
6003: PPUSH
6004: LD_EXP 27
6008: PPUSH
6009: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6013: CALL_OW 44
6017: PPUSH
6018: LD_INT 63
6020: PPUSH
6021: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 66
6032: PPUSH
6033: CALL 12774 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_EXP 27
6047: PPUSH
6048: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6052: CALL_OW 44
6056: PPUSH
6057: LD_INT 68
6059: PPUSH
6060: CALL 12774 0 2
// end ; if Difficulty >= 3 then
6064: LD_OWVAR 67
6068: PUSH
6069: LD_INT 3
6071: GREATEREQUAL
6072: IFFALSE 6125
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 8
6079: PPUSH
6080: LD_EXP 27
6084: PPUSH
6085: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6089: CALL_OW 44
6093: PPUSH
6094: LD_INT 63
6096: PPUSH
6097: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6101: CALL_OW 44
6105: PPUSH
6106: LD_INT 66
6108: PPUSH
6109: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6113: CALL_OW 44
6117: PPUSH
6118: LD_INT 68
6120: PPUSH
6121: CALL 12774 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6125: LD_INT 14
6127: PPUSH
6128: LD_INT 10
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_OWVAR 67
6153: ARRAY
6154: PLUS
6155: PPUSH
6156: CALL 6237 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 8 , 9 ] [ Difficulty ] ) ;
6160: LD_INT 15
6162: PPUSH
6163: LD_INT 20
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: PLUS
6190: PPUSH
6191: CALL 6237 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6195: LD_INT 16
6197: PPUSH
6198: LD_INT 10
6200: PPUSH
6201: CALL 6237 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6205: LD_INT 17
6207: PPUSH
6208: LD_INT 5
6210: PPUSH
6211: CALL 6237 0 2
// if not savedVsevolod then
6215: LD_EXP 1
6219: NOT
6220: IFFALSE 6232
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6222: LD_INT 18
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL 6237 0 2
// end ;
6232: LD_VAR 0 1
6236: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// for i = 1 to amount do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 2
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6324
// begin randPos = RandHexArea ( area , false ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 16
6277: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6278: LD_VAR 0 5
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: LD_VAR 0 5
6291: PUSH
6292: LD_INT 2
6294: ARRAY
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: LD_INT 0
6301: PPUSH
6302: CALL_OW 454
// minesList = minesList ^ randPos ;
6306: LD_ADDR_EXP 61
6310: PUSH
6311: LD_EXP 61
6315: PUSH
6316: LD_VAR 0 5
6320: ADD
6321: ST_TO_ADDR
// end ;
6322: GO 6257
6324: POP
6325: POP
// end ;
6326: LD_VAR 0 3
6330: RET
// function PrepareXavierAr ; begin
6331: LD_INT 0
6333: PPUSH
// uc_side = 5 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 5
6341: ST_TO_ADDR
// uc_nation = 2 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 2
6349: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_STRING Xavier
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 12172 0 3
6368: ST_TO_ADDR
// end ;
6369: LD_VAR 0 1
6373: RET
// every 0 0$1 do
6374: GO 6376
6376: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6377: LD_ADDR_EXP 60
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: LD_INT 59
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_INT 34
6416: PUSH
6417: LD_INT 31
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: ST_TO_ADDR
// enable ;
6436: ENABLE
// end ; end_of_file
6437: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 6
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_EXP 37
6475: PUSH
6476: LD_EXP 48
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: DIFF
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6491: LD_EXP 37
6495: PPUSH
6496: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6500: LD_EXP 49
6504: PPUSH
6505: LD_STRING DStart-Pla-1
6507: PPUSH
6508: CALL_OW 94
// if savedVsevolod then
6512: LD_EXP 1
6516: IFFALSE 7745
// begin arSolds = PrepareIntroArabians ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL 4807 0 0
6527: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6528: LD_EXP 49
6532: PPUSH
6533: LD_STRING DStartVS-Pla-1
6535: PPUSH
6536: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6540: LD_EXP 49
6544: PPUSH
6545: LD_STRING DStart2-Pla-1
6547: PPUSH
6548: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6552: LD_EXP 37
6556: PPUSH
6557: LD_STRING DStart2-Bur-1
6559: PPUSH
6560: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6564: LD_INT 92
6566: PPUSH
6567: LD_INT 133
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: LD_INT 9
6575: NEG
6576: PPUSH
6577: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6581: LD_INT 103
6583: PPUSH
6584: LD_INT 133
6586: PPUSH
6587: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 93
6602: PPUSH
6603: LD_INT 134
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 13003 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: ARRAY
6621: PPUSH
6622: LD_INT 96
6624: PPUSH
6625: LD_INT 134
6627: PPUSH
6628: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: LD_INT 93
6650: PPUSH
6651: LD_INT 134
6653: PPUSH
6654: CALL_OW 297
6658: PUSH
6659: LD_INT 2
6661: LESS
6662: IFFALSE 6632
// wait ( 0 0$5 ) ;
6664: LD_INT 175
6666: PPUSH
6667: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 2
6687: ARRAY
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: LD_INT 107
6695: PPUSH
6696: LD_INT 134
6698: PPUSH
6699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6703: LD_INT 35
6705: PPUSH
6706: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6710: LD_VAR 0 2
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_INT 107
6721: PPUSH
6722: LD_INT 134
6724: PPUSH
6725: CALL_OW 297
6729: PUSH
6730: LD_INT 5
6732: LESS
6733: IFFALSE 6703
// ComCrawl ( arSolds ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6744: LD_INT 96
6746: PPUSH
6747: LD_INT 161
6749: PPUSH
6750: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6754: LD_EXP 48
6758: PPUSH
6759: LD_INT 97
6761: PPUSH
6762: LD_INT 160
6764: PPUSH
6765: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6769: LD_EXP 48
6773: PPUSH
6774: LD_EXP 37
6778: PPUSH
6779: CALL_OW 179
// if IsInUnit ( Burlak ) then
6783: LD_EXP 37
6787: PPUSH
6788: CALL_OW 310
6792: IFFALSE 6803
// ComExitVehicle ( Burlak ) ;
6794: LD_EXP 37
6798: PPUSH
6799: CALL_OW 121
// wait ( 0 0$01 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6810: LD_EXP 37
6814: PPUSH
6815: LD_INT 96
6817: PPUSH
6818: LD_INT 162
6820: PPUSH
6821: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6825: LD_EXP 37
6829: PPUSH
6830: LD_EXP 48
6834: PPUSH
6835: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6846: LD_EXP 37
6850: PPUSH
6851: LD_EXP 48
6855: PPUSH
6856: CALL_OW 296
6860: PUSH
6861: LD_INT 5
6863: LESSEQUAL
6864: IFFALSE 6839
// CenterOnXY ( 96 , 160 ) ;
6866: LD_INT 96
6868: PPUSH
6869: LD_INT 160
6871: PPUSH
6872: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6876: LD_EXP 37
6880: PPUSH
6881: LD_STRING DMeetVsevolodVS-Bur-1
6883: PPUSH
6884: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6888: LD_INT 52
6890: PPUSH
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 3
6896: PPUSH
6897: LD_INT 14
6899: NEG
6900: PPUSH
6901: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6905: LD_INT 58
6907: PPUSH
6908: LD_INT 54
6910: PPUSH
6911: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6915: LD_EXP 48
6919: PPUSH
6920: LD_STRING DMeetVsevolodVS-Vse-1
6922: PPUSH
6923: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6927: LD_EXP 37
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_STRING DMeetVsevolodVS-Bur-2
6952: PPUSH
6953: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6957: LD_INT 61
6959: PPUSH
6960: LD_INT 102
6962: PPUSH
6963: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING DMeetVsevolodVS-Vse-2
6974: PPUSH
6975: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6979: LD_EXP 37
6983: PUSH
6984: LD_EXP 48
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6997: LD_INT 52
6999: PPUSH
7000: LD_INT 59
7002: PPUSH
7003: LD_INT 3
7005: PPUSH
7006: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
7010: LD_INT 92
7012: PPUSH
7013: LD_INT 133
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7023: LD_INT 3
7025: PPUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 72
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: AND
7089: IFFALSE 7153
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 72
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 58
7132: PUSH
7133: EMPTY
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7153: LD_VAR 0 3
7157: PPUSH
7158: LD_EXP 37
7162: PPUSH
7163: CALL_OW 250
7167: PPUSH
7168: LD_EXP 37
7172: PPUSH
7173: CALL_OW 251
7177: PPUSH
7178: CALL_OW 171
// wait ( 0 0$6 ) ;
7182: LD_INT 210
7184: PPUSH
7185: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7189: LD_EXP 37
7193: PPUSH
7194: LD_INT 98
7196: PPUSH
7197: LD_INT 143
7199: PPUSH
7200: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7204: LD_EXP 48
7208: PPUSH
7209: LD_INT 98
7211: PPUSH
7212: LD_INT 143
7214: PPUSH
7215: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 98
7226: PPUSH
7227: LD_INT 143
7229: PPUSH
7230: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7241: LD_EXP 37
7245: PPUSH
7246: LD_INT 98
7248: PPUSH
7249: LD_INT 143
7251: PPUSH
7252: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7256: LD_EXP 48
7260: PPUSH
7261: LD_INT 98
7263: PPUSH
7264: LD_INT 143
7266: PPUSH
7267: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7271: LD_EXP 48
7275: PPUSH
7276: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7280: LD_EXP 37
7284: PPUSH
7285: LD_INT 98
7287: PPUSH
7288: LD_INT 143
7290: PPUSH
7291: CALL_OW 297
7295: PUSH
7296: LD_INT 4
7298: LESSEQUAL
7299: PUSH
7300: LD_EXP 48
7304: PPUSH
7305: LD_INT 98
7307: PPUSH
7308: LD_INT 143
7310: PPUSH
7311: CALL_OW 297
7315: PUSH
7316: LD_INT 4
7318: LESSEQUAL
7319: AND
7320: IFFALSE 7234
// CenterOnXY ( 93 , 134 ) ;
7322: LD_INT 93
7324: PPUSH
7325: LD_INT 134
7327: PPUSH
7328: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7332: LD_EXP 48
7336: PPUSH
7337: LD_INT 82
7339: PPUSH
7340: LD_INT 109
7342: PPUSH
7343: CALL_OW 111
// wait ( 0 0$2 ) ;
7347: LD_INT 70
7349: PPUSH
7350: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7354: LD_EXP 37
7358: PPUSH
7359: LD_INT 82
7361: PPUSH
7362: LD_INT 109
7364: PPUSH
7365: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_INT 82
7376: PPUSH
7377: LD_INT 109
7379: PPUSH
7380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7400: LD_EXP 48
7404: PPUSH
7405: LD_INT 93
7407: PPUSH
7408: LD_INT 134
7410: PPUSH
7411: CALL_OW 297
7415: PUSH
7416: LD_INT 2
7418: LESSEQUAL
7419: IFFALSE 7384
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7421: LD_INT 93
7423: PPUSH
7424: LD_INT 134
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 456
// wait ( 0 0$1 ) ;
7434: LD_INT 35
7436: PPUSH
7437: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7441: LD_EXP 48
7445: PPUSH
7446: LD_INT 200
7448: PPUSH
7449: CALL_OW 234
// wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// ComStop ( Burlak ) ;
7460: LD_EXP 37
7464: PPUSH
7465: CALL_OW 141
// ComStop ( Vsevolod ) ;
7469: LD_EXP 48
7473: PPUSH
7474: CALL_OW 141
// ComStop ( burlakUnits ) ;
7478: LD_VAR 0 3
7482: PPUSH
7483: CALL_OW 141
// DialogueOn ;
7487: CALL_OW 6
// if Kirilenkova then
7491: LD_EXP 45
7495: IFFALSE 7509
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7497: LD_EXP 45
7501: PPUSH
7502: LD_STRING DStasisVS-Kir-1
7504: PPUSH
7505: CALL_OW 88
// if Titov then
7509: LD_EXP 42
7513: IFFALSE 7527
// Say ( Titov , DStasisVS-Tit-1 ) ;
7515: LD_EXP 42
7519: PPUSH
7520: LD_STRING DStasisVS-Tit-1
7522: PPUSH
7523: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7527: LD_EXP 37
7531: PPUSH
7532: LD_STRING DStasisVS-Bur-1
7534: PPUSH
7535: CALL_OW 88
// if Titov then
7539: LD_EXP 42
7543: IFFALSE 7559
// Say ( Titov , DStasisVS-Tit-2 ) else
7545: LD_EXP 42
7549: PPUSH
7550: LD_STRING DStasisVS-Tit-2
7552: PPUSH
7553: CALL_OW 88
7557: GO 7577
// if Kirilenkova then
7559: LD_EXP 45
7563: IFFALSE 7577
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7565: LD_EXP 45
7569: PPUSH
7570: LD_STRING DStasisVS-Kir-2
7572: PPUSH
7573: CALL_OW 88
// if Titov or Kirilenkova then
7577: LD_EXP 42
7581: PUSH
7582: LD_EXP 45
7586: OR
7587: IFFALSE 7601
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7589: LD_EXP 37
7593: PPUSH
7594: LD_STRING DStasisVS-Bur-2
7596: PPUSH
7597: CALL_OW 88
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7608: LD_EXP 50
7612: PPUSH
7613: LD_STRING DStasisVS-Pop-2
7615: PPUSH
7616: CALL_OW 94
// if Gleb then
7620: LD_EXP 40
7624: IFFALSE 7638
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING DStasisVS-Glb-2
7633: PPUSH
7634: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7638: LD_INT 3
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7654: LD_INT 2
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 343
// DialogueOff ;
7664: CALL_OW 7
// InGameOff ;
7668: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7672: LD_EXP 48
7676: PPUSH
7677: LD_INT 250
7679: PPUSH
7680: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7684: LD_STRING MVsevolod
7686: PPUSH
7687: CALL_OW 337
// wait ( 0 0$2 ) ;
7691: LD_INT 70
7693: PPUSH
7694: CALL_OW 67
// ComWalk ( arSolds ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 138
// wait ( 0 0$01 ) ;
7707: LD_INT 35
7709: PPUSH
7710: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_EXP 48
7723: PPUSH
7724: CALL_OW 250
7728: PPUSH
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 251
7738: PPUSH
7739: CALL_OW 174
// end else
7743: GO 7796
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_STRING DStartNV-Pla-1
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7757: LD_EXP 49
7761: PPUSH
7762: LD_STRING DStart2-Pla-1
7764: PPUSH
7765: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7769: LD_EXP 37
7773: PPUSH
7774: LD_STRING DStart2-Bur-1
7776: PPUSH
7777: CALL_OW 88
// DialogueOff ;
7781: CALL_OW 7
// InGameOff ;
7785: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7789: LD_STRING MStart
7791: PPUSH
7792: CALL_OW 337
// end ; SaveForQuickRestart ;
7796: CALL_OW 22
// enableCounter = true ;
7800: LD_ADDR_EXP 18
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7808: LD_INT 1
7810: PPUSH
7811: CALL 18820 0 1
7815: PPUSH
7816: CALL 18664 0 1
// end ;
7820: LD_VAR 0 1
7824: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7825: LD_EXP 48
7829: PUSH
7830: LD_EXP 48
7834: PPUSH
7835: CALL_OW 256
7839: PUSH
7840: LD_INT 250
7842: GREATEREQUAL
7843: AND
7844: IFFALSE 7921
7846: GO 7848
7848: DISABLE
// begin DialogueOn ;
7849: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7853: LD_EXP 48
7857: PPUSH
7858: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DSeviSaved-Bur-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7874: LD_EXP 48
7878: PPUSH
7879: LD_STRING DSeviSaved-Vse-1
7881: PPUSH
7882: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7886: LD_EXP 37
7890: PPUSH
7891: LD_STRING DSeviSaved-Bur-2
7893: PPUSH
7894: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7898: LD_EXP 48
7902: PPUSH
7903: LD_STRING DSeviSaved-Vse-2
7905: PPUSH
7906: CALL_OW 88
// DialogueOff ;
7910: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7914: LD_STRING MStart
7916: PPUSH
7917: CALL_OW 337
// end ;
7921: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7922: LD_EXP 45
7926: PUSH
7927: LD_EXP 45
7931: PPUSH
7932: CALL_OW 301
7936: NOT
7937: AND
7938: IFFALSE 8762
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: EMPTY
7968: LIST
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 59
7975: PUSH
7976: EMPTY
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
8022: LD_EXP 45
8026: PPUSH
8027: CALL_OW 302
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_EXP 45
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: LD_EXP 45
8051: PPUSH
8052: CALL_OW 296
8056: PUSH
8057: LD_INT 12
8059: GREATER
8060: AND
8061: IFFALSE 8015
// if IsInUnit ( Kirilenkova ) then
8063: LD_EXP 45
8067: PPUSH
8068: CALL_OW 310
8072: IFFALSE 8121
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8074: LD_EXP 55
8078: PPUSH
8079: LD_EXP 45
8083: PPUSH
8084: CALL_OW 310
8088: PPUSH
8089: CALL_OW 250
8093: PPUSH
8094: LD_EXP 45
8098: PPUSH
8099: CALL_OW 310
8103: PPUSH
8104: CALL_OW 251
8108: PPUSH
8109: LD_INT 5
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 50
8119: GO 8156
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8121: LD_EXP 55
8125: PPUSH
8126: LD_EXP 45
8130: PPUSH
8131: CALL_OW 250
8135: PPUSH
8136: LD_EXP 45
8140: PPUSH
8141: CALL_OW 251
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 50
// xavierSpawned = true ;
8156: LD_ADDR_EXP 11
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8164: LD_INT 70
8166: PPUSH
8167: CALL_OW 67
// InGameOn ;
8171: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8175: LD_EXP 55
8179: PPUSH
8180: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8184: LD_EXP 55
8188: PPUSH
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_EXP 55
8207: PPUSH
8208: CALL_OW 119
// DialogueOn ;
8212: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8216: LD_EXP 55
8220: PPUSH
8221: LD_STRING DMeetXavier-Xav-1
8223: PPUSH
8224: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8228: LD_EXP 45
8232: PPUSH
8233: CALL_OW 310
8237: IFFALSE 8356
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8239: LD_EXP 45
8243: PPUSH
8244: CALL_OW 310
8248: PPUSH
8249: CALL_OW 247
8253: PUSH
8254: LD_INT 2
8256: EQUAL
8257: IFFALSE 8270
// ComExitVehicle ( Kirilenkova ) else
8259: LD_EXP 45
8263: PPUSH
8264: CALL_OW 121
8268: GO 8279
// ComExitBuilding ( Kirilenkova ) ;
8270: LD_EXP 45
8274: PPUSH
8275: CALL_OW 122
// wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8286: LD_INT 35
8288: PPUSH
8289: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8293: LD_EXP 45
8297: PPUSH
8298: LD_EXP 55
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_EXP 55
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8322: LD_EXP 45
8326: PPUSH
8327: LD_EXP 55
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 3
8339: LESSEQUAL
8340: IFFALSE 8286
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8342: LD_EXP 45
8346: PPUSH
8347: LD_EXP 55
8351: PPUSH
8352: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8356: LD_EXP 45
8360: PPUSH
8361: LD_STRING DMeetXavier-Kir-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8368: LD_EXP 55
8372: PPUSH
8373: LD_STRING DMeetXavier-Xav-2
8375: PPUSH
8376: CALL_OW 88
// case Query ( QXavier ) of 1 :
8380: LD_STRING QXavier
8382: PPUSH
8383: CALL_OW 97
8387: PUSH
8388: LD_INT 1
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8591
8396: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8397: LD_EXP 37
8401: PPUSH
8402: LD_STRING DQrXavier#1-Bur-1
8404: PPUSH
8405: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8409: LD_EXP 45
8413: PPUSH
8414: LD_STRING DQrXavier#1-Kir-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8421: LD_EXP 55
8425: PPUSH
8426: LD_STRING DQrXavier#1-Xav-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8433: LD_EXP 45
8437: PPUSH
8438: LD_STRING DQrXavier#1-Kir-2
8440: PPUSH
8441: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8445: LD_EXP 55
8449: PPUSH
8450: LD_STRING DQrXavier#1-Xav-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8457: LD_EXP 45
8461: PPUSH
8462: LD_STRING DQrXavier#1-Kir-3
8464: PPUSH
8465: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8469: LD_EXP 55
8473: PPUSH
8474: LD_STRING DQrXavier#1-Xav-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8481: LD_EXP 45
8485: PPUSH
8486: LD_STRING DQrXavier#1-Kir-4
8488: PPUSH
8489: CALL_OW 88
// if IsOK ( Gleb ) then
8493: LD_EXP 40
8497: PPUSH
8498: CALL_OW 302
8502: IFFALSE 8516
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8504: LD_EXP 40
8508: PPUSH
8509: LD_STRING DQrXavier#1-Glb-4
8511: PPUSH
8512: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_EXP 55
8525: PPUSH
8526: CALL_OW 254
8530: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 55
8540: PPUSH
8541: CALL_OW 250
8545: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_EXP 55
8555: PPUSH
8556: CALL_OW 251
8560: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8561: LD_EXP 55
8565: PPUSH
8566: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL 1193 0 3
// end ; 2 :
8589: GO 8754
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8753
8599: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8600: LD_EXP 37
8604: PPUSH
8605: LD_STRING DQrXavier#2-Bur-1
8607: PPUSH
8608: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8612: LD_EXP 45
8616: PPUSH
8617: LD_STRING DQrXavier#2-Kir-1
8619: PPUSH
8620: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8624: LD_EXP 55
8628: PPUSH
8629: LD_STRING DQrXavier#2-Xav-1
8631: PPUSH
8632: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8636: LD_EXP 45
8640: PPUSH
8641: LD_STRING DQrXavier#2-Kir-2
8643: PPUSH
8644: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8648: LD_EXP 55
8652: PPUSH
8653: LD_STRING DQrXavier#2-Xav-2
8655: PPUSH
8656: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8660: LD_EXP 45
8664: PPUSH
8665: LD_STRING DQrXavier#2-Kir-3
8667: PPUSH
8668: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8672: LD_EXP 55
8676: PPUSH
8677: LD_STRING DQrXavier#2-Xav-3
8679: PPUSH
8680: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8684: LD_EXP 45
8688: PPUSH
8689: LD_STRING DQrXavier#2-Kir-4
8691: PPUSH
8692: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8696: LD_EXP 55
8700: PPUSH
8701: LD_STRING DQrXavier#2-Xav-4
8703: PPUSH
8704: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8708: LD_EXP 45
8712: PPUSH
8713: LD_STRING DQrXavier#2-Kir-5
8715: PPUSH
8716: CALL_OW 88
// if IsOK ( Gleb ) then
8720: LD_EXP 40
8724: PPUSH
8725: CALL_OW 302
8729: IFFALSE 8743
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8731: LD_EXP 40
8735: PPUSH
8736: LD_STRING DQrXavier#2-Glb-5
8738: PPUSH
8739: CALL_OW 88
// xavierPatrol = true ;
8743: LD_ADDR_EXP 7
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// end ; end ;
8751: GO 8754
8753: POP
// InGameOff ;
8754: CALL_OW 9
// DialogueOff ;
8758: CALL_OW 7
// end ;
8762: PPOPN 4
8764: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8765: LD_EXP 7
8769: PUSH
8770: LD_INT 3
8772: PPUSH
8773: LD_INT 5
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8855
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin enable ;
8793: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: DOUBLE
8800: LD_INT 1
8802: DEC
8803: ST_TO_ADDR
8804: LD_EXP 6
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8853
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_EXP 6
8821: PUSH
8822: LD_VAR 0 1
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_EXP 6
8836: PUSH
8837: LD_VAR 0 1
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 171
8851: GO 8809
8853: POP
8854: POP
// end ;
8855: PPOPN 1
8857: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8858: LD_EXP 7
8862: PUSH
8863: LD_EXP 8
8867: AND
8868: PUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: AND
8884: IFFALSE 8928
8886: GO 8888
8888: DISABLE
// begin xavierPatrol = false ;
8889: LD_ADDR_EXP 7
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8897: LD_ADDR_EXP 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// xavierFirstPatrol = false ;
8905: LD_ADDR_EXP 8
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8913: LD_EXP 55
8917: PPUSH
8918: LD_INT 123
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 111
// end ;
8928: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8929: LD_EXP 9
8933: PUSH
8934: LD_EXP 55
8938: PPUSH
8939: LD_INT 123
8941: PPUSH
8942: LD_INT 92
8944: PPUSH
8945: CALL_OW 297
8949: PUSH
8950: LD_INT 2
8952: LESSEQUAL
8953: AND
8954: PUSH
8955: LD_EXP 45
8959: PPUSH
8960: CALL_OW 302
8964: AND
8965: PUSH
8966: LD_INT 3
8968: PPUSH
8969: LD_INT 5
8971: PPUSH
8972: CALL_OW 81
8976: PUSH
8977: LD_INT 1
8979: EQUAL
8980: AND
8981: IFFALSE 9084
8983: GO 8985
8985: DISABLE
// begin DialogueOn ;
8986: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8990: LD_EXP 55
8994: PPUSH
8995: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8999: LD_EXP 55
9003: PPUSH
9004: LD_STRING DPointXavier-Xav-1
9006: PPUSH
9007: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
9011: LD_EXP 45
9015: PPUSH
9016: LD_STRING DPointXavier-Kir-1
9018: PPUSH
9019: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
9023: LD_EXP 55
9027: PPUSH
9028: LD_STRING DPointXavier-Xav-2
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
9049: LD_EXP 55
9053: PPUSH
9054: EMPTY
9055: PPUSH
9056: CALL_OW 446
// canLeaveMessage = true ;
9060: LD_ADDR_EXP 12
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9068: LD_ADDR_EXP 9
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// xavierPatrol = true ;
9076: LD_ADDR_EXP 7
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// end ;
9084: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9085: LD_EXP 12
9089: PUSH
9090: LD_EXP 45
9094: PPUSH
9095: LD_INT 7
9097: PPUSH
9098: CALL_OW 308
9102: AND
9103: PUSH
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 81
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: AND
9119: IFFALSE 9238
9121: GO 9123
9123: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9124: LD_STRING QActivateXavier
9126: PPUSH
9127: CALL_OW 97
9131: PUSH
9132: LD_INT 1
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9171
9140: POP
// begin messageForXavier = 1 ;
9141: LD_ADDR_EXP 13
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// canLeaveMessage = false ;
9149: LD_ADDR_EXP 12
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9157: LD_INT 7
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// exit ;
9167: GO 9238
// end ; 2 :
9169: GO 9230
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9210
9179: POP
// begin messageForXavier = 2 ;
9180: LD_ADDR_EXP 13
9184: PUSH
9185: LD_INT 2
9187: ST_TO_ADDR
// canLeaveMessage = false ;
9188: LD_ADDR_EXP 12
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9196: LD_INT 7
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 424
// exit ;
9206: GO 9238
// end ; 3 :
9208: GO 9230
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9229
9218: POP
// messageForXavier = 3 ; end ;
9219: LD_ADDR_EXP 13
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
9227: GO 9230
9229: POP
// wait ( 0 0$4 ) ;
9230: LD_INT 140
9232: PPUSH
9233: CALL_OW 67
// enable ;
9237: ENABLE
// end ;
9238: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9239: LD_EXP 13
9243: PUSH
9244: LD_INT 1
9246: EQUAL
9247: PUSH
9248: LD_EXP 13
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: OR
9257: PUSH
9258: LD_INT 3
9260: PPUSH
9261: LD_INT 5
9263: PPUSH
9264: CALL_OW 81
9268: PUSH
9269: LD_INT 1
9271: EQUAL
9272: AND
9273: IFFALSE 9301
9275: GO 9277
9277: DISABLE
// begin xavierPatrol = false ;
9278: LD_ADDR_EXP 7
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9286: LD_EXP 55
9290: PPUSH
9291: LD_INT 123
9293: PPUSH
9294: LD_INT 92
9296: PPUSH
9297: CALL_OW 111
// end ;
9301: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9302: LD_EXP 13
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: PUSH
9311: LD_EXP 13
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: OR
9320: PUSH
9321: LD_EXP 55
9325: PPUSH
9326: LD_INT 123
9328: PPUSH
9329: LD_INT 92
9331: PPUSH
9332: CALL_OW 297
9336: PUSH
9337: LD_INT 2
9339: LESSEQUAL
9340: AND
9341: PUSH
9342: LD_INT 3
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: CALL_OW 81
9352: PUSH
9353: LD_INT 1
9355: EQUAL
9356: AND
9357: IFFALSE 9426
9359: GO 9361
9361: DISABLE
// begin if messageForXavier = 1 then
9362: LD_EXP 13
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9392
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DQrActivateXavier#1-Bur-1
9379: PPUSH
9380: CALL_OW 88
// xavierJoinToPlayer = true ;
9384: LD_ADDR_EXP 10
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9392: LD_EXP 13
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9426
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9402: LD_EXP 37
9406: PPUSH
9407: LD_STRING DQrActivateXavier#2-Bur-1
9409: PPUSH
9410: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9414: LD_EXP 55
9418: PPUSH
9419: LD_INT 53
9421: PPUSH
9422: CALL_OW 120
// end ; end ;
9426: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9427: LD_EXP 10
9431: PUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 81
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: IFFALSE 9827
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// begin if messageForXavier = 1 then
9460: LD_EXP 13
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9499
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9470: LD_EXP 55
9474: PPUSH
9475: LD_EXP 37
9479: PPUSH
9480: CALL_OW 250
9484: PPUSH
9485: LD_EXP 37
9489: PPUSH
9490: CALL_OW 251
9494: PPUSH
9495: CALL_OW 111
// if messageForXavier = 2 then
9499: LD_EXP 13
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9543
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9509: LD_EXP 55
9513: PPUSH
9514: CALL_OW 310
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 250
9528: PPUSH
9529: LD_EXP 37
9533: PPUSH
9534: CALL_OW 251
9538: PPUSH
9539: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 59
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9598: LD_VAR 0 2
9602: PPUSH
9603: LD_EXP 55
9607: PPUSH
9608: CALL_OW 74
9612: PPUSH
9613: LD_EXP 55
9617: PPUSH
9618: CALL_OW 296
9622: PUSH
9623: LD_INT 6
9625: LESSEQUAL
9626: PUSH
9627: LD_EXP 13
9631: PUSH
9632: LD_INT 1
9634: EQUAL
9635: AND
9636: IFFALSE 9721
// begin xavierJoinToPlayer = false ;
9638: LD_ADDR_EXP 10
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: LD_EXP 55
9655: PPUSH
9656: CALL_OW 250
9660: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_EXP 55
9670: PPUSH
9671: CALL_OW 251
9675: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_EXP 55
9685: PPUSH
9686: CALL_OW 254
9690: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 4
9709: PPUSH
9710: LD_VAR 0 5
9714: PPUSH
9715: CALL 1193 0 3
// exit ;
9719: GO 9827
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9721: LD_VAR 0 2
9725: PPUSH
9726: LD_EXP 55
9730: PPUSH
9731: CALL_OW 310
9735: PPUSH
9736: CALL_OW 74
9740: PPUSH
9741: LD_EXP 55
9745: PPUSH
9746: CALL_OW 310
9750: PPUSH
9751: CALL_OW 296
9755: PUSH
9756: LD_INT 6
9758: LESSEQUAL
9759: PUSH
9760: LD_EXP 13
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: AND
9769: IFFALSE 9826
// begin xavierJoinToPlayer = false ;
9771: LD_ADDR_EXP 10
9775: PUSH
9776: LD_INT 0
9778: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_EXP 55
9788: PPUSH
9789: CALL_OW 310
9793: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9794: LD_EXP 55
9798: PPUSH
9799: CALL_OW 64
// SetSide ( veh , 3 ) ;
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_INT 3
9810: PPUSH
9811: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL 1272 0 1
// exit ;
9824: GO 9827
// end ; enable ;
9826: ENABLE
// end ;
9827: PPOPN 6
9829: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9830: GO 9832
9832: DISABLE
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9837: LD_INT 44
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_INT 8
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9865: LD_EXP 51
9869: PPUSH
9870: LD_INT 97
9872: PPUSH
9873: LD_INT 162
9875: PPUSH
9876: CALL_OW 111
// wait ( 0 0$3 ) ;
9880: LD_INT 105
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9887: LD_EXP 51
9891: PPUSH
9892: CALL_OW 87
// DialogueOn ;
9896: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9900: LD_EXP 51
9904: PPUSH
9905: LD_STRING DYashinArrives-Yas-1
9907: PPUSH
9908: CALL_OW 88
// if savedVsevolod then
9912: LD_EXP 1
9916: IFFALSE 9980
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9918: LD_EXP 48
9922: PPUSH
9923: LD_STRING DYashinArrives-Vse-1
9925: PPUSH
9926: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9930: LD_EXP 51
9934: PPUSH
9935: LD_STRING DYashinArrives-Yas-2
9937: PPUSH
9938: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9942: LD_EXP 48
9946: PPUSH
9947: LD_STRING DYashinArrives-Vse-2
9949: PPUSH
9950: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9954: LD_EXP 51
9958: PPUSH
9959: LD_STRING DYashinArrives-Yas-3
9961: PPUSH
9962: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9966: LD_EXP 48
9970: PPUSH
9971: LD_STRING DYashinArrives-Vse-3
9973: PPUSH
9974: CALL_OW 88
// end else
9978: GO 10028
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9980: LD_EXP 37
9984: PPUSH
9985: LD_STRING DYashinArrives-Bur-3
9987: PPUSH
9988: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9992: LD_EXP 51
9996: PPUSH
9997: LD_STRING DYashinArrives-Yas-4
9999: PPUSH
10000: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_STRING DYashinArrives-Bur-4
10011: PPUSH
10012: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DYashinArrives-Yas-5
10023: PPUSH
10024: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
10028: LD_EXP 37
10032: PPUSH
10033: LD_STRING DYashinArrives-Bur-5
10035: PPUSH
10036: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
10040: LD_EXP 51
10044: PPUSH
10045: LD_STRING DYashinArrives-Yas-6
10047: PPUSH
10048: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10052: LD_EXP 37
10056: PPUSH
10057: LD_STRING DYashinArrives-Bur-6
10059: PPUSH
10060: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10064: LD_EXP 51
10068: PPUSH
10069: LD_STRING DYashinArrives-Yas-7
10071: PPUSH
10072: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10076: LD_INT 63
10078: PPUSH
10079: CALL_OW 301
10083: PUSH
10084: LD_INT 66
10086: PPUSH
10087: CALL_OW 301
10091: AND
10092: PUSH
10093: LD_INT 68
10095: PPUSH
10096: CALL_OW 301
10100: AND
10101: IFFALSE 10184
// begin case Query ( QYashinHelp2 ) of 1 :
10103: LD_STRING QYashinHelp2
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10146
10119: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10120: LD_EXP 37
10124: PPUSH
10125: LD_STRING DQrYashinHelp#2-Bur-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10132: LD_EXP 51
10136: PPUSH
10137: LD_STRING DQrYashinHelp#2-Yas-1
10139: PPUSH
10140: CALL_OW 88
// end ; 2 :
10144: GO 10182
10146: LD_INT 2
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10181
10154: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10155: LD_EXP 37
10159: PPUSH
10160: LD_STRING DQrYashinHelp#3-Bur-1
10162: PPUSH
10163: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10167: LD_EXP 51
10171: PPUSH
10172: LD_STRING DQrYashinHelp#3-Yas-1
10174: PPUSH
10175: CALL_OW 88
// end ; end ;
10179: GO 10182
10181: POP
// end else
10182: GO 10330
// begin case Query ( QYashinHelp ) of 1 :
10184: LD_STRING QYashinHelp
10186: PPUSH
10187: CALL_OW 97
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10259
10200: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10201: LD_EXP 37
10205: PPUSH
10206: LD_STRING DQrYashinHelp#1-Bur-1
10208: PPUSH
10209: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10213: LD_EXP 51
10217: PPUSH
10218: LD_STRING DQrYashinHelp#1-Yas-1
10220: PPUSH
10221: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10225: LD_EXP 37
10229: PPUSH
10230: LD_STRING DQrYashinHelp#1-Bur-2
10232: PPUSH
10233: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_STRING DQrYashinHelp#1-Yas-2
10244: PPUSH
10245: CALL_OW 88
// bazookDialog = true ;
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// end ; 2 :
10257: GO 10330
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10294
10267: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_STRING DQrYashinHelp#2-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING DQrYashinHelp#2-Yas-1
10287: PPUSH
10288: CALL_OW 88
// end ; 3 :
10292: GO 10330
10294: LD_INT 3
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10329
10302: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10303: LD_EXP 37
10307: PPUSH
10308: LD_STRING DQrYashinHelp#3-Bur-1
10310: PPUSH
10311: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10315: LD_EXP 51
10319: PPUSH
10320: LD_STRING DQrYashinHelp#3-Yas-1
10322: PPUSH
10323: CALL_OW 88
// end ; end ;
10327: GO 10330
10329: POP
// end ; if not bazookDialog then
10330: LD_VAR 0 2
10334: NOT
10335: IFFALSE 10373
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10337: LD_EXP 51
10341: PPUSH
10342: LD_STRING DQrYashinHelp#4-Yas-1
10344: PPUSH
10345: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DQrYashinHelp#1-Bur-2
10356: PPUSH
10357: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10361: LD_EXP 51
10365: PPUSH
10366: LD_STRING DQrYashinHelp#1-Yas-2
10368: PPUSH
10369: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10373: LD_EXP 51
10377: PPUSH
10378: LD_STRING DYashinLeave-Yas-1
10380: PPUSH
10381: CALL_OW 88
// yashinSearchVeh = true ;
10385: LD_ADDR_EXP 15
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// DialogueOff ;
10393: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// if playerDepot then
10449: LD_VAR 0 1
10453: IFFALSE 10492
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10455: LD_EXP 51
10459: PPUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 1
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 251
10487: PPUSH
10488: CALL_OW 111
// end ;
10492: PPOPN 2
10494: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10495: LD_EXP 51
10499: PPUSH
10500: CALL_OW 305
10504: IFFALSE 10620
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// for unit in yourUnits do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10617
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10546: LD_VAR 0 2
10550: PPUSH
10551: CALL_OW 319
10555: PUSH
10556: LD_EXP 51
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: CALL_OW 319
10576: PUSH
10577: LD_EXP 14
10581: EQUAL
10582: AND
10583: OR
10584: IFFALSE 10615
// begin ComStop ( unit ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 141
// DialogueOn ;
10595: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10599: LD_EXP 37
10603: PPUSH
10604: LD_STRING DYashinAttack-Bur-1
10606: PPUSH
10607: CALL_OW 88
// DialogueOff end ;
10611: CALL_OW 7
10615: GO 10543
10617: POP
10618: POP
// enable ;
10619: ENABLE
// end ;
10620: PPOPN 2
10622: END
// every 1 trigger IsPlaced ( Yashin ) do
10623: LD_EXP 51
10627: PPUSH
10628: CALL_OW 305
10632: IFFALSE 10668
10634: GO 10636
10636: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10637: LD_EXP 51
10641: PPUSH
10642: LD_INT 1000
10644: PPUSH
10645: CALL_OW 234
// if yashinVeh then
10649: LD_EXP 14
10653: IFFALSE 10667
// SetLives ( yashinVeh , 1000 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_INT 1000
10662: PPUSH
10663: CALL_OW 234
// enable ;
10667: ENABLE
// end ;
10668: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10669: LD_EXP 51
10673: PPUSH
10674: CALL_OW 305
10678: PUSH
10679: LD_EXP 15
10683: AND
10684: IFFALSE 11128
10686: GO 10688
10688: DISABLE
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 3
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 42
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 43
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 42
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 43
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: ST_TO_ADDR
// if playerVehsEmpty then
10894: LD_VAR 0 1
10898: IFFALSE 10994
// begin for veh in playerVehsEmpty do
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: PUSH
10910: FOR_IN
10911: IFFALSE 10990
// begin if GetFuel ( veh ) >= 50 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 261
10922: PUSH
10923: LD_INT 50
10925: GREATEREQUAL
10926: IFFALSE 10988
// begin yashinSearchVeh = false ;
10928: LD_ADDR_EXP 15
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// yashinVeh = veh ;
10936: LD_ADDR_EXP 14
10940: PUSH
10941: LD_VAR 0 3
10945: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10946: LD_EXP 14
10950: PPUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10958: LD_EXP 51
10962: PPUSH
10963: LD_EXP 14
10967: PPUSH
10968: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10972: LD_EXP 14
10976: PPUSH
10977: LD_INT 19
10979: PPUSH
10980: CALL_OW 113
// exit ;
10984: POP
10985: POP
10986: GO 11128
// end ; end ;
10988: GO 10910
10990: POP
10991: POP
// end else
10992: GO 11127
// if playerVehs then
10994: LD_VAR 0 2
10998: IFFALSE 11127
// begin for veh in playerVehs do
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 2
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11125
// begin if GetFuel ( veh ) >= 50 then
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 261
11022: PUSH
11023: LD_INT 50
11025: GREATEREQUAL
11026: IFFALSE 11123
// begin yashinSearchVeh = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// yashinVeh = veh ;
11036: LD_ADDR_EXP 14
11040: PUSH
11041: LD_VAR 0 3
11045: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
11046: LD_ADDR_VAR 0 4
11050: PUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 313
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 121
// wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11093: LD_EXP 51
11097: PPUSH
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11107: LD_EXP 14
11111: PPUSH
11112: LD_INT 19
11114: PPUSH
11115: CALL_OW 113
// exit ;
11119: POP
11120: POP
11121: GO 11128
// end ; end ;
11123: GO 11010
11125: POP
11126: POP
// end ; enable ;
11127: ENABLE
// end ;
11128: PPOPN 4
11130: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11131: LD_EXP 14
11135: PPUSH
11136: LD_INT 19
11138: PPUSH
11139: CALL_OW 308
11143: IFFALSE 11166
11145: GO 11147
11147: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11148: LD_EXP 14
11152: PPUSH
11153: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11157: LD_EXP 51
11161: PPUSH
11162: CALL_OW 64
// end ;
11166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11167: LD_INT 22
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 50
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 7
11205: LESSEQUAL
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 6
11245: LESSEQUAL
11246: AND
11247: PUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 303
11255: PUSH
11256: LD_INT 2
11258: PPUSH
11259: CALL_OW 301
11263: OR
11264: PUSH
11265: LD_INT 2
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: OR
11277: AND
11278: IFFALSE 11939
11280: GO 11282
11282: DISABLE
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
// begin enableCounter = false ;
11288: LD_ADDR_EXP 18
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// Display_strings = [ ] ;
11296: LD_ADDR_OWVAR 47
11300: PUSH
11301: EMPTY
11302: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 18820 0 1
11310: PPUSH
11311: CALL 18702 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11315: LD_EXP 50
11319: PPUSH
11320: LD_STRING DHeikeObj-Pop-1
11322: PPUSH
11323: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11327: LD_EXP 37
11331: PPUSH
11332: LD_STRING DHeikeObj-Bur-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11339: LD_EXP 50
11343: PPUSH
11344: LD_STRING DHeikeObj-Pop-2
11346: PPUSH
11347: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_STRING DHeikeObj-Bur-2
11358: PPUSH
11359: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11363: LD_STRING MHeike
11365: PPUSH
11366: CALL_OW 337
// Query ( QHeike ) ;
11370: LD_STRING QHeike
11372: PPUSH
11373: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11377: LD_EXP 11
11381: NOT
11382: PUSH
11383: LD_EXP 45
11387: AND
11388: PUSH
11389: LD_EXP 45
11393: PPUSH
11394: CALL_OW 301
11398: NOT
11399: AND
11400: IFFALSE 11791
// begin if IsInUnit ( Kirilenkova ) then
11402: LD_EXP 45
11406: PPUSH
11407: CALL_OW 310
11411: IFFALSE 11460
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11413: LD_EXP 55
11417: PPUSH
11418: LD_EXP 45
11422: PPUSH
11423: CALL_OW 310
11427: PPUSH
11428: CALL_OW 250
11432: PPUSH
11433: LD_EXP 45
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: CALL_OW 251
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 50
11458: GO 11495
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11460: LD_EXP 55
11464: PPUSH
11465: LD_EXP 45
11469: PPUSH
11470: CALL_OW 250
11474: PPUSH
11475: LD_EXP 45
11479: PPUSH
11480: CALL_OW 251
11484: PPUSH
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 50
// xavierSpawned = true ;
11495: LD_ADDR_EXP 11
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11503: LD_INT 70
11505: PPUSH
11506: CALL_OW 67
// InGameOn ;
11510: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11514: LD_EXP 55
11518: PPUSH
11519: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11523: LD_EXP 55
11527: PPUSH
11528: LD_EXP 45
11532: PPUSH
11533: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11537: LD_EXP 45
11541: PPUSH
11542: LD_EXP 55
11546: PPUSH
11547: CALL_OW 119
// DialogueOn ;
11551: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11555: LD_EXP 55
11559: PPUSH
11560: LD_STRING DMeetXavier-Xav-1
11562: PPUSH
11563: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11567: LD_EXP 45
11571: PPUSH
11572: LD_STRING DMeetXavier-Kir-1
11574: PPUSH
11575: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING DMeetXavier-Xav-2
11586: PPUSH
11587: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11591: LD_EXP 37
11595: PPUSH
11596: LD_STRING DQrXavier#1-Bur-1
11598: PPUSH
11599: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11603: LD_EXP 45
11607: PPUSH
11608: LD_STRING DQrXavier#1-Kir-1
11610: PPUSH
11611: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11615: LD_EXP 55
11619: PPUSH
11620: LD_STRING DQrXavier#1-Xav-1
11622: PPUSH
11623: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11627: LD_EXP 45
11631: PPUSH
11632: LD_STRING DQrXavier#1-Kir-2
11634: PPUSH
11635: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11639: LD_EXP 55
11643: PPUSH
11644: LD_STRING DQrXavier#1-Xav-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11651: LD_EXP 45
11655: PPUSH
11656: LD_STRING DQrXavier#1-Kir-3
11658: PPUSH
11659: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11663: LD_EXP 55
11667: PPUSH
11668: LD_STRING DQrXavier#1-Xav-3
11670: PPUSH
11671: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11675: LD_EXP 45
11679: PPUSH
11680: LD_STRING DQrXavier#1-Kir-4
11682: PPUSH
11683: CALL_OW 88
// if IsOK ( Gleb ) then
11687: LD_EXP 40
11691: PPUSH
11692: CALL_OW 302
11696: IFFALSE 11710
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11698: LD_EXP 40
11702: PPUSH
11703: LD_STRING DQrXavier#1-Glb-4
11705: PPUSH
11706: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_EXP 55
11719: PPUSH
11720: CALL_OW 254
11724: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_EXP 55
11734: PPUSH
11735: CALL_OW 250
11739: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_EXP 55
11749: PPUSH
11750: CALL_OW 251
11754: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11755: LD_EXP 55
11759: PPUSH
11760: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: CALL 1193 0 3
// DialogueOff ;
11783: CALL_OW 7
// IngameOff ;
11787: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11791: LD_EXP 11
11795: PUSH
11796: LD_EXP 55
11800: PPUSH
11801: CALL_OW 255
11805: PUSH
11806: LD_INT 5
11808: EQUAL
11809: AND
11810: PUSH
11811: LD_INT 3
11813: PPUSH
11814: LD_INT 5
11816: PPUSH
11817: CALL_OW 81
11821: PUSH
11822: LD_INT 1
11824: EQUAL
11825: AND
11826: IFFALSE 11909
// begin xavierPatrol = false ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_EXP 55
11845: PPUSH
11846: CALL_OW 254
11850: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_EXP 55
11860: PPUSH
11861: CALL_OW 250
11865: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_EXP 55
11875: PPUSH
11876: CALL_OW 251
11880: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11881: LD_EXP 55
11885: PPUSH
11886: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL 1193 0 3
// end ; wait ( 2 2$30 ) ;
11909: LD_INT 5250
11911: PPUSH
11912: CALL_OW 67
// PrepareHeikeGroup ;
11916: CALL 4935 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11920: LD_EXP 57
11924: PPUSH
11925: LD_EXP 58
11929: PPUSH
11930: LD_EXP 35
11934: PPUSH
11935: CALL 25610 0 3
// end ;
11939: PPOPN 3
11941: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11942: LD_EXP 57
11946: PPUSH
11947: CALL_OW 303
11951: IFFALSE 11975
11953: GO 11955
11955: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11956: LD_EXP 56
11960: PPUSH
11961: LD_EXP 58
11965: PPUSH
11966: LD_EXP 35
11970: PPUSH
11971: CALL 25610 0 3
11975: END
// every 0 0$1 trigger IsDying ( Heike ) do
11976: LD_EXP 56
11980: PPUSH
11981: CALL_OW 303
11985: IFFALSE 12023
11987: GO 11989
11989: DISABLE
// begin canCaptureHeike = true ;
11990: LD_ADDR_EXP 16
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// ComStop ( Heike ) ;
11998: LD_EXP 56
12002: PPUSH
12003: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
12007: LD_INT 8
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 80
// end ;
12023: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
12024: LD_EXP 56
12028: PPUSH
12029: CALL_OW 256
12033: PUSH
12034: LD_INT 250
12036: GREATER
12037: PUSH
12038: LD_EXP 16
12042: AND
12043: IFFALSE 12052
12045: GO 12047
12047: DISABLE
// Dial_CaptureHeike ;
12048: CALL 12053 0 0
12052: END
// export function Dial_CaptureHeike ; begin
12053: LD_INT 0
12055: PPUSH
// heikeCaptured = true ;
12056: LD_ADDR_EXP 17
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// enableCounter = false ;
12064: LD_ADDR_EXP 18
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// InGameOn ;
12072: CALL_OW 8
// DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12080: LD_EXP 56
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12089: LD_EXP 56
12093: PPUSH
12094: LD_STRING DHeikeCapt-Hke-1
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12101: LD_EXP 37
12105: PPUSH
12106: LD_STRING DHeikeCapt-Bur-1
12108: PPUSH
12109: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12113: LD_EXP 56
12117: PPUSH
12118: LD_STRING DHeikeCapt-Hke-2
12120: PPUSH
12121: CALL_OW 88
// DialogueOff ;
12125: CALL_OW 7
// IngameOff ;
12129: CALL_OW 9
// FinishMission ;
12133: CALL 16597 0 0
// end ;
12137: LD_VAR 0 1
12141: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12142: LD_EXP 56
12146: PPUSH
12147: CALL_OW 301
12151: PUSH
12152: LD_EXP 56
12156: PPUSH
12157: CALL_OW 305
12161: AND
12162: IFFALSE 12171
12164: GO 12166
12166: DISABLE
// FinishMission ; end_of_file
12167: CALL 16597 0 0
12171: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if debugMode then
12176: LD_EXP 26
12180: IFFALSE 12197
// unit := NewCharacter ( ident ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 25
12196: ST_TO_ADDR
// if exist_mode and not debugMode then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_EXP 26
12206: NOT
12207: AND
12208: IFFALSE 12233
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_EXP 25
12219: PUSH
12220: LD_VAR 0 1
12224: STR
12225: PPUSH
12226: CALL_OW 34
12230: ST_TO_ADDR
12231: GO 12255
// if not debugMode then
12233: LD_EXP 26
12237: NOT
12238: IFFALSE 12255
// unit := NewCharacter ( ident ) ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 25
12254: ST_TO_ADDR
// if class then
12255: LD_VAR 0 3
12259: IFFALSE 12275
// SetClass ( unit , class ) ;
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 336
// result := unit ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_VAR 0 5
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 4
12289: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12290: LD_INT 0
12292: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 255
12302: PUSH
12303: LD_VAR 0 3
12307: EQUAL
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 301
12318: NOT
12319: AND
12320: IFFALSE 12342
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_EXP 24
12331: PUSH
12332: LD_VAR 0 2
12336: STR
12337: PPUSH
12338: CALL_OW 38
// end ;
12342: LD_VAR 0 4
12346: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// resultCharactersToSave = [ ] ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for unit in characters do
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 1
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12419
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 3
12386: EQUAL
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: CALL_OW 301
12397: NOT
12398: AND
12399: IFFALSE 12417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 5
12415: ADD
12416: ST_TO_ADDR
12417: GO 12369
12419: POP
12420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12421: LD_VAR 0 6
12425: PPUSH
12426: LD_EXP 24
12430: PUSH
12431: LD_VAR 0 2
12435: STR
12436: PPUSH
12437: CALL_OW 38
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// for unit in units do
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12484
// PlaceUnitArea ( unit , area , spawnMode ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: CALL_OW 49
12482: GO 12460
12484: POP
12485: POP
// end ;
12486: LD_VAR 0 4
12490: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// units = characters ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 1
12506: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_VAR 0 9
12516: PUSH
12517: LD_EXP 37
12521: PUSH
12522: LD_EXP 38
12526: PUSH
12527: LD_EXP 39
12531: PUSH
12532: LD_EXP 40
12536: PUSH
12537: LD_EXP 41
12541: PUSH
12542: LD_EXP 42
12546: PUSH
12547: LD_EXP 43
12551: PUSH
12552: LD_EXP 44
12556: PUSH
12557: LD_EXP 48
12561: PUSH
12562: LD_EXP 45
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: DIFF
12579: ST_TO_ADDR
// if not units and not canTalkHero then
12580: LD_VAR 0 9
12584: NOT
12585: PUSH
12586: LD_VAR 0 5
12590: NOT
12591: AND
12592: IFFALSE 12596
// exit ;
12594: GO 12769
// if not units then
12596: LD_VAR 0 9
12600: NOT
12601: IFFALSE 12622
// units = characters diff [ Burlak ] ;
12603: LD_ADDR_VAR 0 9
12607: PUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_EXP 37
12617: PUSH
12618: EMPTY
12619: LIST
12620: DIFF
12621: ST_TO_ADDR
// if not units and canTalkHero then
12622: LD_VAR 0 9
12626: NOT
12627: PUSH
12628: LD_VAR 0 5
12632: AND
12633: IFFALSE 12637
// exit ;
12635: GO 12769
// speaker := units [ rand ( 1 , units ) ] ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// if radio then
12661: LD_VAR 0 4
12665: IFFALSE 12714
// begin if GetSex ( speaker ) = sex_male then
12667: LD_VAR 0 8
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12698
// SayRadio ( speaker , dialogMID ) else
12682: LD_VAR 0 8
12686: PPUSH
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 94
12696: GO 12712
// SayRadio ( speaker , dialogFID ) ;
12698: LD_VAR 0 8
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 94
// end else
12712: GO 12759
// begin if GetSex ( speaker ) = sex_male then
12714: LD_VAR 0 8
12718: PPUSH
12719: CALL_OW 258
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12745
// Say ( speaker , dialogMID ) else
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 88
12743: GO 12759
// Say ( speaker , dialogFID ) ;
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 88
// end ; result := speaker ;
12759: LD_ADDR_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 6
12773: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12778: LD_ADDR_VAR 0 4
12782: PUSH
12783: LD_VAR 0 2
12787: PPUSH
12788: CALL_OW 254
12792: PUSH
12793: LD_INT 3
12795: MINUS
12796: ST_TO_ADDR
// if dir < 0 then
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 0
12804: LESS
12805: IFFALSE 12821
// dir := 6 + dir ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_INT 6
12814: PUSH
12815: LD_VAR 0 4
12819: PLUS
12820: ST_TO_ADDR
// SetDir ( un , dir ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 52
// result = un ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ST_TO_ADDR
// end ;
12859: LD_VAR 0 3
12863: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// for eng in engs do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12996
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: PUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 302
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: AND
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 255
12921: PUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 255
12931: EQUAL
12932: NOT
12933: AND
12934: IFFALSE 12994
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12936: LD_VAR 0 4
12940: PPUSH
12941: LD_STRING e
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: CALL_OW 250
12953: PUSH
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 251
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: PPUSH
12990: CALL_OW 447
12994: GO 12878
12996: POP
12997: POP
12998: LD_VAR 0 3
13002: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
13003: LD_INT 0
13005: PPUSH
// if not GetClass ( unit ) = class_soldier then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 257
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13072
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_STRING p
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 0
13052: PUSH
13053: LD_INT 0
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 447
13072: LD_VAR 0 5
13076: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: CALL_OW 1
13133: ST_TO_ADDR
// result := tab ;
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 1
13143: ST_TO_ADDR
// end ;
13144: LD_VAR 0 4
13148: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
// result := [ ] ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 266
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: IN
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 14839
// if name then
13195: LD_VAR 0 3
13199: IFFALSE 13215
// SetBName ( base_dep , name ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: CALL_OW 500
// base := GetBase ( base_dep ) ;
13215: LD_ADDR_VAR 0 16
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 255
13244: ST_TO_ADDR
// if sources then
13245: LD_VAR 0 5
13249: IFFALSE 13296
// for i = 1 to 3 do
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_INT 3
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13294
// AddResourceType ( base , i , sources [ i ] ) ;
13267: LD_VAR 0 16
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 5
13281: PUSH
13282: LD_VAR 0 9
13286: ARRAY
13287: PPUSH
13288: CALL_OW 276
13292: GO 13264
13294: POP
13295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13296: LD_ADDR_VAR 0 18
13300: PUSH
13301: LD_VAR 0 16
13305: PPUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL 51454 0 3
13318: ST_TO_ADDR
// InitHc ;
13319: CALL_OW 19
// InitUc ;
13323: CALL_OW 18
// uc_side := side ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_VAR 0 17
13336: ST_TO_ADDR
// uc_nation := nation ;
13337: LD_ADDR_OWVAR 21
13341: PUSH
13342: LD_VAR 0 6
13346: ST_TO_ADDR
// if buildings then
13347: LD_VAR 0 18
13351: IFFALSE 14698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: LD_VAR 0 18
13362: PPUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if tmp then
13396: LD_VAR 0 19
13400: IFFALSE 13448
// for i in tmp do
13402: LD_ADDR_VAR 0 9
13406: PUSH
13407: LD_VAR 0 19
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: CALL_OW 250
13424: PPUSH
13425: LD_VAR 0 9
13429: PPUSH
13430: CALL_OW 251
13434: PPUSH
13435: LD_VAR 0 17
13439: PPUSH
13440: CALL_OW 441
13444: GO 13412
13446: POP
13447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: LD_INT 31
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 32
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: IFFALSE 13595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 18
13507: PPUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 33
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 72
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13593
// begin if not GetBWeapon ( i ) then
13555: LD_VAR 0 9
13559: PPUSH
13560: CALL_OW 269
13564: NOT
13565: IFFALSE 13591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13567: LD_VAR 0 9
13571: PPUSH
13572: LD_VAR 0 9
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL 53716 0 2
13586: PPUSH
13587: CALL_OW 431
// end ;
13591: GO 13552
13593: POP
13594: POP
// end ; for i = 1 to personel do
13595: LD_ADDR_VAR 0 9
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 7
13609: PUSH
13610: FOR_TO
13611: IFFALSE 14678
// begin if i > 4 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_INT 4
13620: GREATER
13621: IFFALSE 13625
// break ;
13623: GO 14678
// case i of 1 :
13625: LD_VAR 0 9
13629: PUSH
13630: LD_INT 1
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13729
13638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13639: LD_ADDR_VAR 0 13
13643: PUSH
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 58
13663: PUSH
13664: EMPTY
13665: LIST
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 32
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: ST_TO_ADDR
13727: GO 13951
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13799
13737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13738: LD_ADDR_VAR 0 13
13742: PUSH
13743: LD_VAR 0 18
13747: PPUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 17
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
13797: GO 13951
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13869
13807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13808: LD_ADDR_VAR 0 13
13812: PUSH
13813: LD_VAR 0 18
13817: PPUSH
13818: LD_INT 22
13820: PUSH
13821: LD_VAR 0 17
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 30
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 72
13866: ST_TO_ADDR
13867: GO 13951
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13950
13877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 18
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 17
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 6
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 8
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
13948: GO 13951
13950: POP
// if i = 1 then
13951: LD_VAR 0 9
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 14077
// begin tmp := [ ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: EMPTY
13967: ST_TO_ADDR
// for j in f do
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 13
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14059
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13981: LD_VAR 0 10
13985: PPUSH
13986: CALL_OW 266
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 32
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: IN
14001: IFFALSE 14028
// tmp := Insert ( tmp , 1 , j ) else
14003: LD_ADDR_VAR 0 19
14007: PUSH
14008: LD_VAR 0 19
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 10
14020: PPUSH
14021: CALL_OW 2
14025: ST_TO_ADDR
14026: GO 14057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14028: LD_ADDR_VAR 0 19
14032: PUSH
14033: LD_VAR 0 19
14037: PPUSH
14038: LD_VAR 0 19
14042: PUSH
14043: LD_INT 1
14045: PLUS
14046: PPUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: CALL_OW 2
14056: ST_TO_ADDR
14057: GO 13978
14059: POP
14060: POP
// if tmp then
14061: LD_VAR 0 19
14065: IFFALSE 14077
// f := tmp ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 19
14076: ST_TO_ADDR
// end ; x := personel [ i ] ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_VAR 0 7
14086: PUSH
14087: LD_VAR 0 9
14091: ARRAY
14092: ST_TO_ADDR
// if x = - 1 then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 1
14100: NEG
14101: EQUAL
14102: IFFALSE 14296
// begin for j in f do
14104: LD_ADDR_VAR 0 10
14108: PUSH
14109: LD_VAR 0 13
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14292
// repeat InitHc ;
14117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 266
14130: PUSH
14131: LD_INT 5
14133: EQUAL
14134: IFFALSE 14189
// begin if UnitsInside ( j ) < 3 then
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 313
14145: PUSH
14146: LD_INT 3
14148: LESS
14149: IFFALSE 14170
// PrepareHuman ( false , i , skill ) else
14151: LD_INT 0
14153: PPUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_VAR 0 4
14163: PPUSH
14164: CALL_OW 380
14168: GO 14187
// PrepareHuman ( false , i , skill ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_VAR 0 9
14177: PPUSH
14178: LD_VAR 0 4
14182: PPUSH
14183: CALL_OW 380
// end else
14187: GO 14206
// PrepareHuman ( false , i , skill ) ;
14189: LD_INT 0
14191: PPUSH
14192: LD_VAR 0 9
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 380
// un := CreateHuman ;
14206: LD_ADDR_VAR 0 15
14210: PUSH
14211: CALL_OW 44
14215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14216: LD_ADDR_VAR 0 8
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 15
14233: PPUSH
14234: CALL_OW 2
14238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14239: LD_VAR 0 15
14243: PPUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14253: LD_VAR 0 10
14257: PPUSH
14258: CALL_OW 313
14262: PUSH
14263: LD_INT 6
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: OR
14288: IFFALSE 14117
14290: GO 14114
14292: POP
14293: POP
// end else
14294: GO 14676
// for j = 1 to x do
14296: LD_ADDR_VAR 0 10
14300: PUSH
14301: DOUBLE
14302: LD_INT 1
14304: DEC
14305: ST_TO_ADDR
14306: LD_VAR 0 14
14310: PUSH
14311: FOR_TO
14312: IFFALSE 14674
// begin InitHc ;
14314: CALL_OW 19
// if not f then
14318: LD_VAR 0 13
14322: NOT
14323: IFFALSE 14412
// begin PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 8
14356: PUSH
14357: LD_VAR 0 8
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 15
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14375: LD_VAR 0 15
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 250
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 251
14399: PPUSH
14400: LD_INT 10
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 50
// continue ;
14410: GO 14311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14412: LD_VAR 0 13
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: CALL_OW 313
14425: PUSH
14426: LD_VAR 0 13
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 266
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: IN
14450: AND
14451: PUSH
14452: LD_VAR 0 13
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 313
14465: PUSH
14466: LD_INT 6
14468: EQUAL
14469: OR
14470: IFFALSE 14490
// f := Delete ( f , 1 ) ;
14472: LD_ADDR_VAR 0 13
14476: PUSH
14477: LD_VAR 0 13
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// if not f then
14490: LD_VAR 0 13
14494: NOT
14495: IFFALSE 14513
// begin x := x + 2 ;
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 2
14509: PLUS
14510: ST_TO_ADDR
// continue ;
14511: GO 14311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14513: LD_VAR 0 13
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14532: LD_VAR 0 13
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: CALL_OW 313
14545: PUSH
14546: LD_INT 3
14548: LESS
14549: IFFALSE 14585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14551: LD_INT 0
14553: PPUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 8
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_VAR 0 6
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 380
14583: GO 14602
// PrepareHuman ( false , i , skill ) ;
14585: LD_INT 0
14587: PPUSH
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 380
// end else
14602: GO 14621
// PrepareHuman ( false , i , skill ) ;
14604: LD_INT 0
14606: PPUSH
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 380
// un := CreateHuman ;
14621: LD_ADDR_VAR 0 15
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 15
14648: PPUSH
14649: CALL_OW 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14654: LD_VAR 0 15
14658: PPUSH
14659: LD_VAR 0 13
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: PPUSH
14668: CALL_OW 52
// end ;
14672: GO 14311
14674: POP
14675: POP
// end ;
14676: GO 13610
14678: POP
14679: POP
// result := result ^ buildings ;
14680: LD_ADDR_VAR 0 8
14684: PUSH
14685: LD_VAR 0 8
14689: PUSH
14690: LD_VAR 0 18
14694: ADD
14695: ST_TO_ADDR
// end else
14696: GO 14839
// begin for i = 1 to personel do
14698: LD_ADDR_VAR 0 9
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 7
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14837
// begin if i > 4 then
14716: LD_VAR 0 9
14720: PUSH
14721: LD_INT 4
14723: GREATER
14724: IFFALSE 14728
// break ;
14726: GO 14837
// x := personel [ i ] ;
14728: LD_ADDR_VAR 0 14
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: LD_VAR 0 9
14742: ARRAY
14743: ST_TO_ADDR
// if x = - 1 then
14744: LD_VAR 0 14
14748: PUSH
14749: LD_INT 1
14751: NEG
14752: EQUAL
14753: IFFALSE 14757
// continue ;
14755: GO 14713
// PrepareHuman ( false , i , skill ) ;
14757: LD_INT 0
14759: PPUSH
14760: LD_VAR 0 9
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: CALL_OW 380
// un := CreateHuman ;
14774: LD_ADDR_VAR 0 15
14778: PUSH
14779: CALL_OW 44
14783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14784: LD_VAR 0 15
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_INT 10
14811: PPUSH
14812: LD_INT 0
14814: PPUSH
14815: CALL_OW 50
// result := result ^ un ;
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_VAR 0 15
14833: ADD
14834: ST_TO_ADDR
// end ;
14835: GO 14713
14837: POP
14838: POP
// end ; end ;
14839: LD_VAR 0 8
14843: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14850: LD_ADDR_VAR 0 6
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 71
14860: PUSH
14861: LD_INT 70
14863: PUSH
14864: LD_INT 69
14866: PUSH
14867: LD_INT 39
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 14
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 40
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// resultWeapons = [ ] ;
14893: LD_ADDR_VAR 0 5
14897: PUSH
14898: EMPTY
14899: ST_TO_ADDR
// for i := 1 to weaponTechs do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15103
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14918: LD_VAR 0 6
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 482
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: ARRAY
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15101
// case nation of nation_american :
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 1
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 15014
14979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 5
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL 15120 0 2
15010: ADD
15011: ST_TO_ADDR
15012: GO 15101
15014: LD_INT 2
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15057
15022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_VAR 0 5
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_VAR 0 4
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 15120 0 2
15053: ADD
15054: ST_TO_ADDR
15055: GO 15101
15057: LD_INT 3
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15100
15065: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 5
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PPUSH
15087: LD_VAR 0 2
15091: PPUSH
15092: CALL 15120 0 2
15096: ADD
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end ;
15101: GO 14915
15103: POP
15104: POP
// result = resultWeapons ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 5
15114: ST_TO_ADDR
// end ;
15115: LD_VAR 0 3
15119: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15120: LD_INT 0
15122: PPUSH
// case tech of tech_AdvMet :
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 34
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15164
15136: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_STRING 
15147: PUSH
15148: LD_INT 46
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: ST_TO_ADDR
15162: GO 15453
15164: LD_INT 71
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15200
15172: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 
15180: PUSH
15181: LD_STRING 
15183: PUSH
15184: LD_INT 47
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 2
15196: ARRAY
15197: ST_TO_ADDR
15198: GO 15453
15200: LD_INT 70
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15236
15208: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_STRING 
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_STRING 
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ST_TO_ADDR
15234: GO 15453
15236: LD_INT 69
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15272
15244: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 43
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: ST_TO_ADDR
15270: GO 15453
15272: LD_INT 39
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15308
15280: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 5
15288: PUSH
15289: LD_INT 27
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
15306: GO 15453
15308: LD_INT 31
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15344
15316: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_STRING 
15324: PUSH
15325: LD_STRING 
15327: PUSH
15328: LD_INT 49
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_VAR 0 2
15340: ARRAY
15341: ST_TO_ADDR
15342: GO 15453
15344: LD_INT 14
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15380
15352: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_STRING 
15363: PUSH
15364: LD_STRING 
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: ST_TO_ADDR
15378: GO 15453
15380: LD_INT 10
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15416
15388: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_STRING 
15399: PUSH
15400: LD_STRING 
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 2
15412: ARRAY
15413: ST_TO_ADDR
15414: GO 15453
15416: LD_INT 40
15418: DOUBLE
15419: EQUAL
15420: IFTRUE 15424
15422: GO 15452
15424: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 28
15435: PUSH
15436: LD_INT 45
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 2
15448: ARRAY
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// end ;
15453: LD_VAR 0 3
15457: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 289
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 289
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 3
15500: PPUSH
15501: CALL_OW 289
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// end ;
15511: LD_VAR 0 2
15515: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// area = ListEnvironmentArea ( area ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 353
15534: ST_TO_ADDR
// if bulldozer > 0 then
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 0
15542: GREATER
15543: IFFALSE 15654
// for i = area downto 1 do
15545: LD_ADDR_VAR 0 4
15549: PUSH
15550: DOUBLE
15551: LD_VAR 0 2
15555: INC
15556: ST_TO_ADDR
15557: LD_INT 1
15559: PUSH
15560: FOR_DOWNTO
15561: IFFALSE 15652
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 351
15597: IFFALSE 15650
// if not HasTask ( bulldozer ) then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 314
15608: NOT
15609: IFFALSE 15650
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: PPUSH
15646: CALL_OW 171
15650: GO 15560
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 3
15658: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
// uc_side := GetSide ( b ) ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 255
15678: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 248
15693: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 380
// un = CreateHuman ;
15709: LD_ADDR_VAR 0 4
15713: PUSH
15714: CALL_OW 44
15718: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: CALL_OW 254
15733: PUSH
15734: LD_INT 3
15736: MINUS
15737: ST_TO_ADDR
// if dir < 0 then
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 0
15745: LESS
15746: IFFALSE 15762
// dir := 6 + dir ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_VAR 0 5
15760: PLUS
15761: ST_TO_ADDR
// SetDir ( un , dir ) ;
15762: LD_VAR 0 4
15766: PPUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 52
// result = un ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 4
15799: ST_TO_ADDR
// end ; end_of_file
15800: LD_VAR 0 3
15804: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_INT 53
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 55
15823: EQUAL
15824: AND
15825: IFFALSE 15835
// xavierJoinToPlayer = true ;
15827: LD_ADDR_EXP 10
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 6
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: AND
15858: IFFALSE 15904
// begin ComExitVehicle ( human ) ;
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: LD_INT 6
15885: PPUSH
15886: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15890: LD_EXP 51
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 120
// end ; end ;
15904: PPOPN 4
15906: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15907: LD_VAR 0 1
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 5
15923: EQUAL
15924: AND
15925: IFFALSE 15975
// begin xavierPatrol = false ;
15927: LD_ADDR_EXP 7
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 115
// end ; end ;
15975: PPOPN 2
15977: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin if unit = Burlak then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 37
15991: EQUAL
15992: IFFALSE 15998
// Lose_Burlak ;
15994: CALL 17262 0 0
// if unit = Vsevolod then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_EXP 48
16007: EQUAL
16008: IFFALSE 16014
// Lose_Vsevolod ;
16010: CALL 17277 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PPUSH
16029: CALL 19368 0 1
16033: ST_TO_ADDR
// if aiData then
16034: LD_VAR 0 2
16038: IFFALSE 16247
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 250
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 251
16059: PPUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_INT 8
16067: ARRAY
16068: PPUSH
16069: CALL_OW 309
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16247
// RemoveUnitFromAI ( aiData , unit ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL 19277 0 2
// if GetType ( unit ) = unit_building then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 247
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: IFFALSE 16247
// begin if GetBType ( unit ) = 1 then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 1
16119: EQUAL
16120: IFFALSE 16132
// buildingType = 0 else
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
16130: GO 16197
// if GetBType ( unit ) = 3 then
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16157
// buildingType = 2 else
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 2
16154: ST_TO_ADDR
16155: GO 16197
// if GetBType ( unit ) = 5 then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 266
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16182
// buildingType = 4 else
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 4
16179: ST_TO_ADDR
16180: GO 16197
// buildingType = GetBType ( unit ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 266
16196: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 250
16216: PUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 251
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 254
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL 19090 0 2
// end ; end ; end ;
16247: PPOPN 3
16249: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16250: LD_INT 0
16252: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 255
16267: PPUSH
16268: CALL 19368 0 1
16272: ST_TO_ADDR
// if aiData then
16273: LD_VAR 0 3
16277: IFFALSE 16512
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 32
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: LD_INT 13
16300: PUSH
16301: LD_INT 88
16303: PUSH
16304: LD_INT 52
16306: PUSH
16307: LD_INT 14
16309: PUSH
16310: LD_INT 53
16312: PUSH
16313: LD_INT 31
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: IN
16327: NOT
16328: IFFALSE 16387
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16330: LD_VAR 0 3
16334: PUSH
16335: LD_INT 13
16337: ARRAY
16338: PUSH
16339: LD_VAR 0 3
16343: PPUSH
16344: CALL 19448 0 1
16348: GREATER
16349: IFFALSE 16370
// AddNewVehicle ( aiData , vehicle , 2 ) else
16351: LD_VAR 0 3
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_INT 2
16363: PPUSH
16364: CALL 18985 0 3
16368: GO 16387
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16370: LD_VAR 0 3
16374: PPUSH
16375: LD_VAR 0 1
16379: PPUSH
16380: LD_INT 4
16382: PPUSH
16383: CALL 18985 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 264
16396: PUSH
16397: LD_INT 12
16399: PUSH
16400: LD_INT 32
16402: PUSH
16403: LD_INT 51
16405: PUSH
16406: LD_INT 13
16408: PUSH
16409: LD_INT 88
16411: PUSH
16412: LD_INT 52
16414: PUSH
16415: LD_INT 14
16417: PUSH
16418: LD_INT 53
16420: PUSH
16421: LD_INT 31
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: IN
16435: IFFALSE 16454
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16437: LD_VAR 0 3
16441: PPUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: LD_INT 1
16449: PPUSH
16450: CALL 18985 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16454: LD_EXP 60
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 263
16468: PUSH
16469: LD_INT 2
16471: EQUAL
16472: AND
16473: IFFALSE 16512
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16475: LD_VAR 0 1
16479: PPUSH
16480: LD_EXP 60
16484: PUSH
16485: LD_INT 1
16487: PPUSH
16488: LD_EXP 60
16492: PPUSH
16493: CALL_OW 12
16497: ARRAY
16498: PPUSH
16499: CALL_OW 313
16503: PUSH
16504: LD_INT 1
16506: ARRAY
16507: PPUSH
16508: CALL_OW 53
// end ; end ;
16512: PPOPN 3
16514: END
// on BuildingStarted ( building , unit ) do var aiData ;
16515: LD_INT 0
16517: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16518: LD_ADDR_VAR 0 3
16522: PUSH
16523: LD_VAR 0 2
16527: PPUSH
16528: CALL_OW 255
16532: PPUSH
16533: CALL 19368 0 1
16537: ST_TO_ADDR
// if ( aiData ) then
16538: LD_VAR 0 3
16542: IFFALSE 16567
// begin RemoveDestroyedBuilding ( aiData ) ;
16544: LD_VAR 0 3
16548: PPUSH
16549: CALL 19184 0 1
// AddNewUnit ( aiData , building ) ;
16553: LD_VAR 0 3
16557: PPUSH
16558: LD_VAR 0 1
16562: PPUSH
16563: CALL 18894 0 2
// end ; end ;
16567: PPOPN 3
16569: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16570: LD_VAR 0 2
16574: PUSH
16575: LD_EXP 51
16579: EQUAL
16580: IFFALSE 16594
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16582: LD_VAR 0 1
16586: PPUSH
16587: LD_INT 19
16589: PPUSH
16590: CALL_OW 113
// end ; end_of_file
16594: PPOPN 2
16596: END
// export function FinishMission ; begin
16597: LD_INT 0
16599: PPUSH
// SetRewards ;
16600: CALL 16621 0 0
// SavePlayerCharacters ;
16604: CALL 16800 0 0
// SaveGlobalVariables ;
16608: CALL 17242 0 0
// YouWin ;
16612: CALL_OW 103
// end ;
16616: LD_VAR 0 1
16620: RET
// function SetRewards ; begin
16621: LD_INT 0
16623: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16624: LD_EXP 55
16628: PPUSH
16629: CALL_OW 302
16633: PUSH
16634: LD_EXP 55
16638: PPUSH
16639: CALL_OW 255
16643: PUSH
16644: LD_INT 3
16646: EQUAL
16647: AND
16648: IFFALSE 16662
// AddMedal ( Xavier , 1 ) else
16650: LD_STRING Xavier
16652: PPUSH
16653: LD_INT 1
16655: PPUSH
16656: CALL_OW 101
16660: GO 16673
// AddMedal ( Xavier , - 1 ) ;
16662: LD_STRING Xavier
16664: PPUSH
16665: LD_INT 1
16667: NEG
16668: PPUSH
16669: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16673: LD_EXP 19
16677: PUSH
16678: LD_EXP 28
16682: LESSEQUAL
16683: IFFALSE 16697
// AddMedal ( TimeVS , 1 ) else
16685: LD_STRING TimeVS
16687: PPUSH
16688: LD_INT 1
16690: PPUSH
16691: CALL_OW 101
16695: GO 16708
// AddMedal ( TimeVS , - 1 ) ;
16697: LD_STRING TimeVS
16699: PPUSH
16700: LD_INT 1
16702: NEG
16703: PPUSH
16704: CALL_OW 101
// if heikeCaptured then
16708: LD_EXP 17
16712: IFFALSE 16726
// AddMedal ( Heike , 1 ) else
16714: LD_STRING Heike
16716: PPUSH
16717: LD_INT 1
16719: PPUSH
16720: CALL_OW 101
16724: GO 16737
// AddMedal ( Heike , - 1 ) ;
16726: LD_STRING Heike
16728: PPUSH
16729: LD_INT 1
16731: NEG
16732: PPUSH
16733: CALL_OW 101
// GiveMedals ( Main1 ) ;
16737: LD_STRING Main1
16739: PPUSH
16740: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16744: LD_INT 22
16746: PUSH
16747: LD_INT 3
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 21
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: LD_INT 23
16766: PUSH
16767: LD_INT 3
16769: PUSH
16770: EMPTY
16771: LIST
16772: LIST
16773: PUSH
16774: LD_INT 50
16776: PUSH
16777: EMPTY
16778: LIST
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: PPUSH
16786: CALL_OW 69
16790: PPUSH
16791: CALL_OW 43
// end ;
16795: LD_VAR 0 1
16799: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16800: LD_INT 0
16802: PPUSH
16803: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16804: LD_EXP 37
16808: PPUSH
16809: LD_STRING Burlak
16811: PPUSH
16812: LD_INT 3
16814: PPUSH
16815: CALL 12290 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16819: LD_EXP 38
16823: PPUSH
16824: LD_STRING Karamazov
16826: PPUSH
16827: LD_INT 3
16829: PPUSH
16830: CALL 12290 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16834: LD_EXP 39
16838: PPUSH
16839: LD_STRING Petrovova
16841: PPUSH
16842: LD_INT 3
16844: PPUSH
16845: CALL 12290 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16849: LD_EXP 40
16853: PPUSH
16854: LD_STRING Gleb
16856: PPUSH
16857: LD_INT 3
16859: PPUSH
16860: CALL 12290 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16864: LD_EXP 41
16868: PPUSH
16869: LD_STRING Petrosyan
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12290 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16879: LD_EXP 43
16883: PPUSH
16884: LD_STRING Dolgov
16886: PPUSH
16887: LD_INT 3
16889: PPUSH
16890: CALL 12290 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16894: LD_EXP 44
16898: PPUSH
16899: LD_STRING Lipshchin
16901: PPUSH
16902: LD_INT 3
16904: PPUSH
16905: CALL 12290 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16909: LD_EXP 42
16913: PPUSH
16914: LD_STRING Titov
16916: PPUSH
16917: LD_INT 3
16919: PPUSH
16920: CALL 12290 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16924: LD_EXP 45
16928: PPUSH
16929: LD_STRING Kirilenkova
16931: PPUSH
16932: LD_INT 3
16934: PPUSH
16935: CALL 12290 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16939: LD_EXP 46
16943: PPUSH
16944: LD_STRING Belkov
16946: PPUSH
16947: LD_INT 3
16949: PPUSH
16950: CALL 12290 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16954: LD_EXP 47
16958: PPUSH
16959: LD_STRING Belkov2
16961: PPUSH
16962: LD_INT 3
16964: PPUSH
16965: CALL 12290 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16969: LD_EXP 55
16973: PPUSH
16974: LD_STRING Xavier
16976: PPUSH
16977: LD_INT 3
16979: PPUSH
16980: CALL 12290 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16984: LD_EXP 48
16988: PPUSH
16989: LD_STRING Vsevolod
16991: PPUSH
16992: LD_INT 3
16994: PPUSH
16995: CALL 12290 0 3
// if heikeCaptured then
16999: LD_EXP 17
17003: IFFALSE 17017
// SaveCharacters ( Heike , 07_Heike ) ;
17005: LD_EXP 56
17009: PPUSH
17010: LD_STRING 07_Heike
17012: PPUSH
17013: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
17017: LD_INT 22
17019: PUSH
17020: LD_INT 3
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 21
17029: PUSH
17030: LD_INT 1
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 2
17039: PUSH
17040: LD_INT 25
17042: PUSH
17043: LD_INT 12
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: PUSH
17050: LD_INT 25
17052: PUSH
17053: LD_INT 16
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 25
17062: PUSH
17063: LD_INT 15
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL_OW 69
17085: PPUSH
17086: LD_STRING other_apemans
17088: PPUSH
17089: LD_INT 3
17091: PPUSH
17092: CALL 12347 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17096: LD_ADDR_VAR 0 2
17100: PUSH
17101: LD_INT 22
17103: PUSH
17104: LD_INT 3
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 23
17123: PUSH
17124: LD_INT 3
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL_OW 69
17140: PUSH
17141: LD_EXP 37
17145: PUSH
17146: LD_EXP 38
17150: PUSH
17151: LD_EXP 39
17155: PUSH
17156: LD_EXP 40
17160: PUSH
17161: LD_EXP 41
17165: PUSH
17166: LD_EXP 42
17170: PUSH
17171: LD_EXP 43
17175: PUSH
17176: LD_EXP 44
17180: PUSH
17181: LD_EXP 45
17185: PUSH
17186: LD_EXP 46
17190: PUSH
17191: LD_EXP 47
17195: PUSH
17196: LD_EXP 55
17200: PUSH
17201: LD_EXP 48
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: DIFF
17221: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17222: LD_VAR 0 2
17226: PPUSH
17227: LD_STRING other_survivors
17229: PPUSH
17230: LD_INT 3
17232: PPUSH
17233: CALL 12347 0 3
// end ;
17237: LD_VAR 0 1
17241: RET
// function SaveGlobalVariables ; begin
17242: LD_INT 0
17244: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17245: LD_EXP 17
17249: PPUSH
17250: LD_STRING 07_HeikeCaptured_1
17252: PPUSH
17253: CALL_OW 39
// end ; end_of_file
17257: LD_VAR 0 1
17261: RET
// export function Lose_Burlak ; begin
17262: LD_INT 0
17264: PPUSH
// YouLost ( Burlak ) ;
17265: LD_STRING Burlak
17267: PPUSH
17268: CALL_OW 104
// end ;
17272: LD_VAR 0 1
17276: RET
// export function Lose_Vsevolod ; begin
17277: LD_INT 0
17279: PPUSH
// YouLost ( Sevi ) ;
17280: LD_STRING Sevi
17282: PPUSH
17283: CALL_OW 104
// end ;
17287: LD_VAR 0 1
17291: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17292: LD_EXP 56
17296: PPUSH
17297: LD_INT 9
17299: PPUSH
17300: CALL_OW 308
17304: PUSH
17305: LD_EXP 57
17309: PPUSH
17310: LD_INT 9
17312: PPUSH
17313: CALL_OW 308
17317: OR
17318: IFFALSE 17330
17320: GO 17322
17322: DISABLE
// YouLost ( Heike ) ; end_of_file
17323: LD_STRING Heike
17325: PPUSH
17326: CALL_OW 104
17330: END
// export aiStructDatas ; export function InitAIManager ; begin
17331: LD_INT 0
17333: PPUSH
// aiStructDatas = [ ] ;
17334: LD_ADDR_EXP 62
17338: PUSH
17339: EMPTY
17340: ST_TO_ADDR
// end ;
17341: LD_VAR 0 1
17345: RET
// every 1 do
17346: GO 17348
17348: DISABLE
// begin InitAIManager ;
17349: CALL 17331 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17353: LD_INT 1
17355: PPUSH
17356: LD_INT 0
17358: PPUSH
17359: LD_INT 2
17361: PPUSH
17362: LD_INT 2
17364: PPUSH
17365: LD_EXP 59
17369: PPUSH
17370: LD_INT 10
17372: PPUSH
17373: LD_INT 22
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PUSH
17383: LD_INT 21
17385: PUSH
17386: LD_INT 3
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PPUSH
17397: CALL_OW 70
17401: PPUSH
17402: EMPTY
17403: PPUSH
17404: LD_INT 10
17406: PPUSH
17407: LD_INT 12
17409: PPUSH
17410: LD_INT 13
17412: PPUSH
17413: LD_INT 11
17415: PPUSH
17416: LD_INT 13
17418: PPUSH
17419: LD_INT 13
17421: PUSH
17422: LD_INT 1
17424: PUSH
17425: LD_INT 2
17427: PUSH
17428: LD_INT 25
17430: PUSH
17431: LD_INT 27
17433: PUSH
17434: LD_INT 23
17436: PUSH
17437: LD_INT 26
17439: PUSH
17440: LD_INT 28
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 13
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: LD_INT 25
17467: PUSH
17468: LD_INT 27
17470: PUSH
17471: LD_INT 23
17473: PUSH
17474: LD_INT 26
17476: PUSH
17477: LD_INT 28
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PPUSH
17497: LD_INT 13
17499: PUSH
17500: LD_INT 1
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 25
17508: PUSH
17509: LD_INT 27
17511: PUSH
17512: LD_INT 23
17514: PUSH
17515: LD_INT 26
17517: PUSH
17518: LD_INT 28
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 13
17536: PUSH
17537: LD_INT 1
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 25
17545: PUSH
17546: LD_INT 27
17548: PUSH
17549: LD_INT 23
17551: PUSH
17552: LD_INT 26
17554: PUSH
17555: LD_INT 28
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: PUSH
17571: LD_INT 13
17573: PUSH
17574: LD_INT 1
17576: PUSH
17577: LD_INT 2
17579: PUSH
17580: LD_INT 25
17582: PUSH
17583: LD_INT 27
17585: PUSH
17586: LD_INT 23
17588: PUSH
17589: LD_INT 26
17591: PUSH
17592: LD_INT 28
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: PUSH
17608: EMPTY
17609: LIST
17610: LIST
17611: LIST
17612: PPUSH
17613: LD_INT 1
17615: PUSH
17616: LD_INT 1
17618: PUSH
17619: LD_INT 0
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: LIST
17626: PPUSH
17627: LD_INT 5250
17629: PPUSH
17630: LD_INT 1
17632: PUSH
17633: LD_INT 1
17635: PUSH
17636: LD_INT 1
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: LIST
17643: PPUSH
17644: LD_INT 1
17646: PPUSH
17647: LD_INT 1
17649: PPUSH
17650: LD_INT 1
17652: PPUSH
17653: CALL 18520 0 20
// end ;
17657: END
// every 0 0$1 do
17658: GO 17660
17660: DISABLE
// begin StateManager ( 1 ) ;
17661: LD_INT 1
17663: PPUSH
17664: CALL 19668 0 1
// MechanicsManager ( 1 ) ;
17668: LD_INT 1
17670: PPUSH
17671: CALL 20781 0 1
// VehiclesManager ( 1 ) ;
17675: LD_INT 1
17677: PPUSH
17678: CALL 21045 0 1
// SoldiersManager ( 1 ) ;
17682: LD_INT 1
17684: PPUSH
17685: CALL 20154 0 1
// DefenceManager ( 1 ) ;
17689: LD_INT 1
17691: PPUSH
17692: CALL 21555 0 1
// CollectCrates ( 1 ) ;
17696: LD_INT 1
17698: PPUSH
17699: CALL 22487 0 1
// FleeToHealArea ( 1 ) ;
17703: LD_INT 1
17705: PPUSH
17706: CALL 22677 0 1
// FleeToRepairArea ( 1 ) ;
17710: LD_INT 1
17712: PPUSH
17713: CALL 22808 0 1
// RepairBuildings ( 1 ) ;
17717: LD_INT 1
17719: PPUSH
17720: CALL 22964 0 1
// HealDamageUnits ( 1 ) ;
17724: LD_INT 1
17726: PPUSH
17727: CALL 23707 0 1
// enable ;
17731: ENABLE
// end ;
17732: END
// every 0 0$1 do
17733: GO 17735
17735: DISABLE
// begin ProduceVehicles ( 1 ) ;
17736: LD_INT 1
17738: PPUSH
17739: CALL 24205 0 1
// enable ;
17743: ENABLE
// end ;
17744: END
// every 0 0$1 do
17745: GO 17747
17747: DISABLE
// begin AttackManager ( 1 ) ;
17748: LD_INT 1
17750: PPUSH
17751: CALL 22053 0 1
// enable ;
17755: ENABLE
// end ;
17756: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17757: LD_INT 14
17759: PPUSH
17760: LD_INT 22
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PPUSH
17770: CALL_OW 70
17774: PUSH
17775: LD_INT 15
17777: PPUSH
17778: LD_INT 22
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PPUSH
17788: CALL_OW 70
17792: OR
17793: PUSH
17794: LD_INT 16
17796: PPUSH
17797: LD_INT 22
17799: PUSH
17800: LD_INT 3
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PPUSH
17807: CALL_OW 70
17811: OR
17812: PUSH
17813: LD_INT 17
17815: PPUSH
17816: LD_INT 22
17818: PUSH
17819: LD_INT 3
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PPUSH
17826: CALL_OW 70
17830: OR
17831: PUSH
17832: LD_INT 18
17834: PPUSH
17835: LD_INT 22
17837: PUSH
17838: LD_INT 3
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PPUSH
17845: CALL_OW 70
17849: OR
17850: PUSH
17851: LD_EXP 61
17855: AND
17856: IFFALSE 18276
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
17864: PPUSH
17865: PPUSH
17866: PPUSH
17867: PPUSH
// begin unitsInArea = [ ] ;
17868: LD_ADDR_VAR 0 2
17872: PUSH
17873: EMPTY
17874: ST_TO_ADDR
// tmp = [ ] ;
17875: LD_ADDR_VAR 0 5
17879: PUSH
17880: EMPTY
17881: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17882: LD_ADDR_VAR 0 2
17886: PUSH
17887: LD_VAR 0 2
17891: PUSH
17892: LD_INT 14
17894: PPUSH
17895: LD_INT 22
17897: PUSH
17898: LD_INT 3
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 70
17909: ADD
17910: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: LD_VAR 0 2
17920: PUSH
17921: LD_INT 15
17923: PPUSH
17924: LD_INT 22
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PPUSH
17934: CALL_OW 70
17938: ADD
17939: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17940: LD_ADDR_VAR 0 2
17944: PUSH
17945: LD_VAR 0 2
17949: PUSH
17950: LD_INT 16
17952: PPUSH
17953: LD_INT 22
17955: PUSH
17956: LD_INT 3
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 70
17967: ADD
17968: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17969: LD_ADDR_VAR 0 2
17973: PUSH
17974: LD_VAR 0 2
17978: PUSH
17979: LD_INT 17
17981: PPUSH
17982: LD_INT 22
17984: PUSH
17985: LD_INT 3
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PPUSH
17992: CALL_OW 70
17996: ADD
17997: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
17998: LD_ADDR_VAR 0 2
18002: PUSH
18003: LD_VAR 0 2
18007: PUSH
18008: LD_INT 18
18010: PPUSH
18011: LD_INT 22
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 70
18025: ADD
18026: ST_TO_ADDR
// for unit in unitsInArea do
18027: LD_ADDR_VAR 0 3
18031: PUSH
18032: LD_VAR 0 2
18036: PUSH
18037: FOR_IN
18038: IFFALSE 18273
// begin if GetType ( unit ) = unit_human then
18040: LD_VAR 0 3
18044: PPUSH
18045: CALL_OW 247
18049: PUSH
18050: LD_INT 1
18052: EQUAL
18053: IFFALSE 18065
// minDistance = 3 else
18055: LD_ADDR_VAR 0 4
18059: PUSH
18060: LD_INT 3
18062: ST_TO_ADDR
18063: GO 18073
// minDistance = 4 ;
18065: LD_ADDR_VAR 0 4
18069: PUSH
18070: LD_INT 4
18072: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18073: LD_ADDR_VAR 0 1
18077: PUSH
18078: DOUBLE
18079: LD_INT 1
18081: DEC
18082: ST_TO_ADDR
18083: LD_EXP 61
18087: PUSH
18088: LD_INT 2
18090: DIV
18091: PUSH
18092: FOR_TO
18093: IFFALSE 18252
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18095: LD_EXP 61
18099: PUSH
18100: LD_VAR 0 1
18104: PUSH
18105: LD_INT 2
18107: MUL
18108: PUSH
18109: LD_INT 1
18111: MINUS
18112: ARRAY
18113: PPUSH
18114: LD_EXP 61
18118: PUSH
18119: LD_VAR 0 1
18123: PUSH
18124: LD_INT 2
18126: MUL
18127: ARRAY
18128: PPUSH
18129: LD_VAR 0 3
18133: PPUSH
18134: CALL_OW 250
18138: PPUSH
18139: LD_VAR 0 3
18143: PPUSH
18144: CALL_OW 251
18148: PPUSH
18149: CALL_OW 298
18153: PUSH
18154: LD_VAR 0 4
18158: LESS
18159: IFFALSE 18204
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18161: LD_EXP 61
18165: PUSH
18166: LD_VAR 0 1
18170: PUSH
18171: LD_INT 2
18173: MUL
18174: PUSH
18175: LD_INT 1
18177: MINUS
18178: ARRAY
18179: PPUSH
18180: LD_EXP 61
18184: PUSH
18185: LD_VAR 0 1
18189: PUSH
18190: LD_INT 2
18192: MUL
18193: ARRAY
18194: PPUSH
18195: LD_INT 2
18197: PPUSH
18198: CALL_OW 456
18202: GO 18250
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18204: LD_ADDR_VAR 0 5
18208: PUSH
18209: LD_VAR 0 5
18213: PUSH
18214: LD_EXP 61
18218: PUSH
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 2
18226: MUL
18227: PUSH
18228: LD_INT 1
18230: MINUS
18231: ARRAY
18232: ADD
18233: PUSH
18234: LD_EXP 61
18238: PUSH
18239: LD_VAR 0 1
18243: PUSH
18244: LD_INT 2
18246: MUL
18247: ARRAY
18248: ADD
18249: ST_TO_ADDR
18250: GO 18092
18252: POP
18253: POP
// minesList = tmp ;
18254: LD_ADDR_EXP 61
18258: PUSH
18259: LD_VAR 0 5
18263: ST_TO_ADDR
// tmp := [ ] ;
18264: LD_ADDR_VAR 0 5
18268: PUSH
18269: EMPTY
18270: ST_TO_ADDR
// end ;
18271: GO 18037
18273: POP
18274: POP
// enable ;
18275: ENABLE
// end ;
18276: PPOPN 5
18278: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18279: LD_INT 2
18281: PPUSH
18282: CALL_OW 255
18286: PUSH
18287: LD_INT 3
18289: EQUAL
18290: PUSH
18291: LD_INT 2
18293: PPUSH
18294: CALL_OW 303
18298: OR
18299: IFFALSE 18428
18301: GO 18303
18303: DISABLE
18304: LD_INT 0
18306: PPUSH
18307: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18308: LD_ADDR_VAR 0 2
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 50
18325: PUSH
18326: EMPTY
18327: LIST
18328: PUSH
18329: LD_INT 21
18331: PUSH
18332: LD_INT 3
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 30
18341: PUSH
18342: LD_INT 32
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: PPUSH
18355: CALL_OW 69
18359: PUSH
18360: FOR_IN
18361: IFFALSE 18426
// if UnitsInside ( turret ) then
18363: LD_VAR 0 2
18367: PPUSH
18368: CALL_OW 313
18372: IFFALSE 18424
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18374: LD_ADDR_VAR 0 1
18378: PUSH
18379: LD_VAR 0 2
18383: PPUSH
18384: CALL_OW 313
18388: PUSH
18389: LD_INT 1
18391: ARRAY
18392: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 122
// wait ( 0 0$01 ) ;
18402: LD_INT 35
18404: PPUSH
18405: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_INT 103
18416: PPUSH
18417: LD_INT 48
18419: PPUSH
18420: CALL_OW 114
// end ;
18424: GO 18360
18426: POP
18427: POP
// end ;
18428: PPOPN 2
18430: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18431: GO 18433
18433: DISABLE
18434: LD_INT 0
18436: PPUSH
18437: PPUSH
18438: PPUSH
18439: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18440: LD_ADDR_VAR 0 4
18444: PUSH
18445: LD_INT 2
18447: PPUSH
18448: LD_INT 2
18450: PPUSH
18451: LD_INT 1
18453: PPUSH
18454: CALL 43800 0 3
18458: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18459: LD_ADDR_VAR 0 1
18463: PUSH
18464: DOUBLE
18465: LD_INT 1
18467: DEC
18468: ST_TO_ADDR
18469: LD_VAR 0 4
18473: PUSH
18474: FOR_TO
18475: IFFALSE 18515
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18477: LD_INT 13
18479: PPUSH
18480: LD_VAR 0 4
18484: PUSH
18485: LD_VAR 0 1
18489: ARRAY
18490: PPUSH
18491: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18495: LD_INT 14
18497: PPUSH
18498: LD_VAR 0 4
18502: PUSH
18503: LD_VAR 0 1
18507: ARRAY
18508: PPUSH
18509: CALL_OW 184
// end ;
18513: GO 18474
18515: POP
18516: POP
// end ;
18517: PPOPN 4
18519: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18520: LD_INT 0
18522: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18523: LD_ADDR_EXP 62
18527: PUSH
18528: LD_EXP 62
18532: PUSH
18533: LD_VAR 0 1
18537: PUSH
18538: LD_VAR 0 2
18542: PUSH
18543: LD_VAR 0 3
18547: PUSH
18548: LD_VAR 0 4
18552: PUSH
18553: LD_VAR 0 5
18557: PUSH
18558: LD_VAR 0 6
18562: PUSH
18563: LD_VAR 0 7
18567: PUSH
18568: LD_VAR 0 8
18572: PUSH
18573: LD_VAR 0 9
18577: PUSH
18578: LD_VAR 0 10
18582: PUSH
18583: LD_VAR 0 11
18587: PUSH
18588: LD_VAR 0 12
18592: PUSH
18593: LD_VAR 0 13
18597: PUSH
18598: LD_VAR 0 14
18602: PUSH
18603: LD_VAR 0 15
18607: PUSH
18608: LD_VAR 0 16
18612: PUSH
18613: LD_VAR 0 17
18617: PUSH
18618: LD_VAR 0 18
18622: PUSH
18623: LD_VAR 0 19
18627: PUSH
18628: LD_VAR 0 20
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: ADD
18658: ST_TO_ADDR
// end ;
18659: LD_VAR 0 21
18663: RET
// export function ActiveAI ( index ) ; begin
18664: LD_INT 0
18666: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18667: LD_ADDR_EXP 62
18671: PUSH
18672: LD_EXP 62
18676: PPUSH
18677: LD_VAR 0 1
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PPUSH
18689: LD_INT 1
18691: PPUSH
18692: CALL 48699 0 3
18696: ST_TO_ADDR
// end ;
18697: LD_VAR 0 2
18701: RET
// export function DeactiveAI ( index ) ; begin
18702: LD_INT 0
18704: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18705: LD_ADDR_EXP 62
18709: PUSH
18710: LD_EXP 62
18714: PPUSH
18715: LD_VAR 0 1
18719: PUSH
18720: LD_INT 2
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PPUSH
18727: LD_INT 0
18729: PPUSH
18730: CALL 48699 0 3
18734: ST_TO_ADDR
// end ;
18735: LD_VAR 0 2
18739: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18740: LD_INT 0
18742: PPUSH
18743: PPUSH
// for i := 1 to aiStructDatas do
18744: LD_ADDR_VAR 0 3
18748: PUSH
18749: DOUBLE
18750: LD_INT 1
18752: DEC
18753: ST_TO_ADDR
18754: LD_EXP 62
18758: PUSH
18759: FOR_TO
18760: IFFALSE 18806
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18762: LD_EXP 62
18766: PUSH
18767: LD_VAR 0 3
18771: ARRAY
18772: PUSH
18773: LD_INT 1
18775: ARRAY
18776: PUSH
18777: LD_VAR 0 1
18781: EQUAL
18782: IFFALSE 18804
// begin result = aiStructDatas [ i ] ;
18784: LD_ADDR_VAR 0 2
18788: PUSH
18789: LD_EXP 62
18793: PUSH
18794: LD_VAR 0 3
18798: ARRAY
18799: ST_TO_ADDR
// exit ;
18800: POP
18801: POP
18802: GO 18815
// end ;
18804: GO 18759
18806: POP
18807: POP
// result = [ ] ;
18808: LD_ADDR_VAR 0 2
18812: PUSH
18813: EMPTY
18814: ST_TO_ADDR
// end ;
18815: LD_VAR 0 2
18819: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18820: LD_INT 0
18822: PPUSH
18823: PPUSH
// for i := 1 to aiStructDatas do
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: DOUBLE
18830: LD_INT 1
18832: DEC
18833: ST_TO_ADDR
18834: LD_EXP 62
18838: PUSH
18839: FOR_TO
18840: IFFALSE 18880
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18842: LD_EXP 62
18846: PUSH
18847: LD_VAR 0 3
18851: ARRAY
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: PUSH
18857: LD_VAR 0 1
18861: EQUAL
18862: IFFALSE 18878
// begin result = i ;
18864: LD_ADDR_VAR 0 2
18868: PUSH
18869: LD_VAR 0 3
18873: ST_TO_ADDR
// exit ;
18874: POP
18875: POP
18876: GO 18889
// end ;
18878: GO 18839
18880: POP
18881: POP
// result = [ ] ;
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: EMPTY
18888: ST_TO_ADDR
// end ;
18889: LD_VAR 0 2
18893: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18894: LD_INT 0
18896: PPUSH
18897: PPUSH
18898: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18899: LD_ADDR_VAR 0 4
18903: PUSH
18904: LD_VAR 0 1
18908: PUSH
18909: LD_INT 1
18911: ARRAY
18912: PPUSH
18913: CALL 18820 0 1
18917: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18918: LD_ADDR_VAR 0 5
18922: PUSH
18923: LD_VAR 0 1
18927: PUSH
18928: LD_INT 5
18930: ARRAY
18931: ST_TO_ADDR
// newArray = newArray ^ unit ;
18932: LD_ADDR_VAR 0 5
18936: PUSH
18937: LD_VAR 0 5
18941: PUSH
18942: LD_VAR 0 2
18946: ADD
18947: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18948: LD_ADDR_EXP 62
18952: PUSH
18953: LD_EXP 62
18957: PPUSH
18958: LD_VAR 0 4
18962: PUSH
18963: LD_INT 5
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: LD_VAR 0 5
18974: PPUSH
18975: CALL 48699 0 3
18979: ST_TO_ADDR
// end ;
18980: LD_VAR 0 3
18984: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18985: LD_INT 0
18987: PPUSH
18988: PPUSH
18989: PPUSH
// SetTag ( veh , state ) ;
18990: LD_VAR 0 2
18994: PPUSH
18995: LD_VAR 0 3
18999: PPUSH
19000: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19004: LD_ADDR_VAR 0 5
19008: PUSH
19009: LD_VAR 0 1
19013: PUSH
19014: LD_INT 1
19016: ARRAY
19017: PPUSH
19018: CALL 18820 0 1
19022: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19023: LD_ADDR_VAR 0 6
19027: PUSH
19028: LD_VAR 0 1
19032: PUSH
19033: LD_INT 5
19035: ARRAY
19036: ST_TO_ADDR
// newArray = newArray ^ veh ;
19037: LD_ADDR_VAR 0 6
19041: PUSH
19042: LD_VAR 0 6
19046: PUSH
19047: LD_VAR 0 2
19051: ADD
19052: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19053: LD_ADDR_EXP 62
19057: PUSH
19058: LD_EXP 62
19062: PPUSH
19063: LD_VAR 0 5
19067: PUSH
19068: LD_INT 5
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PPUSH
19075: LD_VAR 0 6
19079: PPUSH
19080: CALL 48699 0 3
19084: ST_TO_ADDR
// end ;
19085: LD_VAR 0 4
19089: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19090: LD_INT 0
19092: PPUSH
19093: PPUSH
19094: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19095: LD_ADDR_VAR 0 4
19099: PUSH
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 1
19107: ARRAY
19108: PPUSH
19109: CALL 18820 0 1
19113: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19114: LD_ADDR_VAR 0 5
19118: PUSH
19119: LD_VAR 0 1
19123: PUSH
19124: LD_INT 7
19126: ARRAY
19127: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19128: LD_ADDR_VAR 0 5
19132: PUSH
19133: LD_VAR 0 5
19137: PUSH
19138: LD_VAR 0 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: ADD
19146: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19147: LD_ADDR_EXP 62
19151: PUSH
19152: LD_EXP 62
19156: PPUSH
19157: LD_VAR 0 4
19161: PUSH
19162: LD_INT 7
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PPUSH
19169: LD_VAR 0 5
19173: PPUSH
19174: CALL 48699 0 3
19178: ST_TO_ADDR
// end ;
19179: LD_VAR 0 3
19183: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19184: LD_INT 0
19186: PPUSH
19187: PPUSH
19188: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19189: LD_ADDR_VAR 0 3
19193: PUSH
19194: LD_VAR 0 1
19198: PUSH
19199: LD_INT 1
19201: ARRAY
19202: PPUSH
19203: CALL 18820 0 1
19207: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19208: LD_ADDR_VAR 0 4
19212: PUSH
19213: LD_VAR 0 1
19217: PUSH
19218: LD_INT 7
19220: ARRAY
19221: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19222: LD_ADDR_VAR 0 4
19226: PUSH
19227: LD_VAR 0 4
19231: PPUSH
19232: LD_INT 1
19234: PPUSH
19235: CALL_OW 3
19239: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19240: LD_ADDR_EXP 62
19244: PUSH
19245: LD_EXP 62
19249: PPUSH
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 7
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: PPUSH
19262: LD_VAR 0 4
19266: PPUSH
19267: CALL 48699 0 3
19271: ST_TO_ADDR
// end ;
19272: LD_VAR 0 2
19276: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19277: LD_INT 0
19279: PPUSH
19280: PPUSH
19281: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19282: LD_ADDR_VAR 0 4
19286: PUSH
19287: LD_VAR 0 1
19291: PUSH
19292: LD_INT 1
19294: ARRAY
19295: PPUSH
19296: CALL 18820 0 1
19300: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19301: LD_ADDR_VAR 0 5
19305: PUSH
19306: LD_VAR 0 1
19310: PUSH
19311: LD_INT 5
19313: ARRAY
19314: ST_TO_ADDR
// newArray = newArray diff unit ;
19315: LD_ADDR_VAR 0 5
19319: PUSH
19320: LD_VAR 0 5
19324: PUSH
19325: LD_VAR 0 2
19329: DIFF
19330: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19331: LD_ADDR_EXP 62
19335: PUSH
19336: LD_EXP 62
19340: PPUSH
19341: LD_VAR 0 4
19345: PUSH
19346: LD_INT 5
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PPUSH
19353: LD_VAR 0 5
19357: PPUSH
19358: CALL 48699 0 3
19362: ST_TO_ADDR
// end ;
19363: LD_VAR 0 3
19367: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19368: LD_INT 0
19370: PPUSH
19371: PPUSH
// for i := 1 to aiStructDatas do
19372: LD_ADDR_VAR 0 3
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_EXP 62
19386: PUSH
19387: FOR_TO
19388: IFFALSE 19434
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19390: LD_EXP 62
19394: PUSH
19395: LD_VAR 0 3
19399: ARRAY
19400: PUSH
19401: LD_INT 3
19403: ARRAY
19404: PUSH
19405: LD_VAR 0 1
19409: EQUAL
19410: IFFALSE 19432
// begin result = aiStructDatas [ i ] ;
19412: LD_ADDR_VAR 0 2
19416: PUSH
19417: LD_EXP 62
19421: PUSH
19422: LD_VAR 0 3
19426: ARRAY
19427: ST_TO_ADDR
// exit ;
19428: POP
19429: POP
19430: GO 19443
// end ;
19432: GO 19387
19434: POP
19435: POP
// result = [ ] ;
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: EMPTY
19442: ST_TO_ADDR
// end ;
19443: LD_VAR 0 2
19447: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19448: LD_INT 0
19450: PPUSH
19451: PPUSH
19452: PPUSH
// if not aiData then
19453: LD_VAR 0 1
19457: NOT
19458: IFFALSE 19469
// begin result = [ ] ;
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: EMPTY
19466: ST_TO_ADDR
// exit ;
19467: GO 19553
// end ; defVehs = [ ] ;
19469: LD_ADDR_VAR 0 3
19473: PUSH
19474: EMPTY
19475: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19476: LD_ADDR_VAR 0 4
19480: PUSH
19481: LD_VAR 0 1
19485: PUSH
19486: LD_INT 5
19488: ARRAY
19489: PPUSH
19490: LD_INT 21
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PPUSH
19500: CALL_OW 72
19504: PUSH
19505: FOR_IN
19506: IFFALSE 19541
// if GetTag ( veh ) = 2 then
19508: LD_VAR 0 4
19512: PPUSH
19513: CALL_OW 110
19517: PUSH
19518: LD_INT 2
19520: EQUAL
19521: IFFALSE 19539
// defVehs = defVehs ^ veh ;
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: LD_VAR 0 3
19532: PUSH
19533: LD_VAR 0 4
19537: ADD
19538: ST_TO_ADDR
19539: GO 19505
19541: POP
19542: POP
// result = defVehs ;
19543: LD_ADDR_VAR 0 2
19547: PUSH
19548: LD_VAR 0 3
19552: ST_TO_ADDR
// end ;
19553: LD_VAR 0 2
19557: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19558: LD_INT 0
19560: PPUSH
19561: PPUSH
19562: PPUSH
// if not aiData then
19563: LD_VAR 0 1
19567: NOT
19568: IFFALSE 19579
// begin result = [ ] ;
19570: LD_ADDR_VAR 0 2
19574: PUSH
19575: EMPTY
19576: ST_TO_ADDR
// exit ;
19577: GO 19663
// end ; attackVehs = [ ] ;
19579: LD_ADDR_VAR 0 3
19583: PUSH
19584: EMPTY
19585: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19586: LD_ADDR_VAR 0 4
19590: PUSH
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 5
19598: ARRAY
19599: PPUSH
19600: LD_INT 21
19602: PUSH
19603: LD_INT 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PPUSH
19610: CALL_OW 72
19614: PUSH
19615: FOR_IN
19616: IFFALSE 19651
// if GetTag ( veh ) = 4 then
19618: LD_VAR 0 4
19622: PPUSH
19623: CALL_OW 110
19627: PUSH
19628: LD_INT 4
19630: EQUAL
19631: IFFALSE 19649
// attackVehs = attackVehs ^ veh ;
19633: LD_ADDR_VAR 0 3
19637: PUSH
19638: LD_VAR 0 3
19642: PUSH
19643: LD_VAR 0 4
19647: ADD
19648: ST_TO_ADDR
19649: GO 19615
19651: POP
19652: POP
// result = attackVehs ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_VAR 0 3
19662: ST_TO_ADDR
// end ;
19663: LD_VAR 0 2
19667: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19668: LD_INT 0
19670: PPUSH
19671: PPUSH
19672: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19673: LD_ADDR_VAR 0 3
19677: PUSH
19678: LD_VAR 0 1
19682: PPUSH
19683: CALL 18740 0 1
19687: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19688: LD_VAR 0 3
19692: PUSH
19693: LD_INT 2
19695: ARRAY
19696: PUSH
19697: LD_INT 0
19699: EQUAL
19700: IFFALSE 19704
// exit ;
19702: GO 20149
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19704: LD_ADDR_VAR 0 4
19708: PUSH
19709: LD_VAR 0 3
19713: PUSH
19714: LD_INT 5
19716: ARRAY
19717: PPUSH
19718: LD_INT 21
19720: PUSH
19721: LD_INT 1
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 72
19732: PUSH
19733: FOR_IN
19734: IFFALSE 19839
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19736: LD_VAR 0 4
19740: PPUSH
19741: CALL_OW 256
19745: PUSH
19746: LD_INT 1000
19748: EQUAL
19749: PUSH
19750: LD_VAR 0 4
19754: PPUSH
19755: CALL_OW 110
19759: PUSH
19760: LD_INT 0
19762: EQUAL
19763: AND
19764: IFFALSE 19780
// SetTag ( unit , 1 ) else
19766: LD_VAR 0 4
19770: PPUSH
19771: LD_INT 1
19773: PPUSH
19774: CALL_OW 109
19778: GO 19837
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19780: LD_VAR 0 4
19784: PPUSH
19785: CALL_OW 256
19789: PUSH
19790: LD_INT 950
19792: LESSEQUAL
19793: PUSH
19794: LD_VAR 0 4
19798: PPUSH
19799: CALL_OW 256
19803: PUSH
19804: LD_INT 250
19806: GREATER
19807: AND
19808: PUSH
19809: LD_VAR 0 4
19813: PPUSH
19814: CALL_OW 110
19818: PUSH
19819: LD_INT 1
19821: EQUAL
19822: AND
19823: IFFALSE 19837
// SetTag ( unit , 0 ) ;
19825: LD_VAR 0 4
19829: PPUSH
19830: LD_INT 0
19832: PPUSH
19833: CALL_OW 109
// end ;
19837: GO 19733
19839: POP
19840: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19841: LD_ADDR_VAR 0 4
19845: PUSH
19846: LD_VAR 0 3
19850: PUSH
19851: LD_INT 5
19853: ARRAY
19854: PPUSH
19855: LD_INT 21
19857: PUSH
19858: LD_INT 2
19860: PUSH
19861: EMPTY
19862: LIST
19863: LIST
19864: PPUSH
19865: CALL_OW 72
19869: PUSH
19870: FOR_IN
19871: IFFALSE 20147
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19873: LD_VAR 0 4
19877: PPUSH
19878: CALL_OW 256
19882: PUSH
19883: LD_INT 1000
19885: EQUAL
19886: PUSH
19887: LD_VAR 0 4
19891: PPUSH
19892: CALL_OW 110
19896: PUSH
19897: LD_INT 3
19899: EQUAL
19900: AND
19901: IFFALSE 19915
// SetTag ( unit , 2 ) ;
19903: LD_VAR 0 4
19907: PPUSH
19908: LD_INT 2
19910: PPUSH
19911: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19915: LD_VAR 0 4
19919: PPUSH
19920: CALL_OW 256
19924: PUSH
19925: LD_INT 1000
19927: EQUAL
19928: PUSH
19929: LD_VAR 0 4
19933: PPUSH
19934: CALL_OW 110
19938: PUSH
19939: LD_INT 5
19941: EQUAL
19942: AND
19943: IFFALSE 19957
// SetTag ( unit , 4 ) ;
19945: LD_VAR 0 4
19949: PPUSH
19950: LD_INT 4
19952: PPUSH
19953: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19957: LD_VAR 0 4
19961: PPUSH
19962: CALL_OW 256
19966: PUSH
19967: LD_INT 650
19969: LESSEQUAL
19970: PUSH
19971: LD_VAR 0 4
19975: PPUSH
19976: CALL_OW 110
19980: PUSH
19981: LD_INT 4
19983: EQUAL
19984: AND
19985: PUSH
19986: LD_VAR 0 4
19990: PPUSH
19991: CALL_OW 263
19995: PUSH
19996: LD_INT 1
19998: EQUAL
19999: AND
20000: IFFALSE 20014
// SetTag ( unit , 5 ) ;
20002: LD_VAR 0 4
20006: PPUSH
20007: LD_INT 5
20009: PPUSH
20010: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
20014: LD_VAR 0 4
20018: PPUSH
20019: CALL_OW 256
20023: PUSH
20024: LD_INT 650
20026: LESSEQUAL
20027: PUSH
20028: LD_VAR 0 4
20032: PPUSH
20033: CALL_OW 110
20037: PUSH
20038: LD_INT 2
20040: EQUAL
20041: AND
20042: PUSH
20043: LD_VAR 0 4
20047: PPUSH
20048: CALL_OW 263
20052: PUSH
20053: LD_INT 1
20055: EQUAL
20056: AND
20057: IFFALSE 20071
// SetTag ( unit , 3 ) ;
20059: LD_VAR 0 4
20063: PPUSH
20064: LD_INT 3
20066: PPUSH
20067: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20071: LD_VAR 0 4
20075: PPUSH
20076: CALL_OW 263
20080: PUSH
20081: LD_INT 1
20083: EQUAL
20084: IFFALSE 20118
// if ( UnitsInside ( unit ) ) then
20086: LD_VAR 0 4
20090: PPUSH
20091: CALL_OW 313
20095: IFFALSE 20118
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20097: LD_VAR 0 4
20101: PPUSH
20102: CALL_OW 313
20106: PUSH
20107: LD_INT 1
20109: ARRAY
20110: PPUSH
20111: LD_INT 7
20113: PPUSH
20114: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20118: LD_VAR 0 4
20122: PPUSH
20123: CALL_OW 261
20127: PUSH
20128: LD_INT 50
20130: LESS
20131: IFFALSE 20145
// SetFuel ( unit , 100 ) ;
20133: LD_VAR 0 4
20137: PPUSH
20138: LD_INT 100
20140: PPUSH
20141: CALL_OW 240
// end ;
20145: GO 19870
20147: POP
20148: POP
// end ;
20149: LD_VAR 0 2
20153: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20154: LD_INT 0
20156: PPUSH
20157: PPUSH
20158: PPUSH
20159: PPUSH
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_VAR 0 1
20175: PPUSH
20176: CALL 18740 0 1
20180: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20181: LD_VAR 0 3
20185: PUSH
20186: LD_INT 2
20188: ARRAY
20189: PUSH
20190: LD_INT 0
20192: EQUAL
20193: IFFALSE 20197
// exit ;
20195: GO 20776
// soldiersInsideBarracks = [ ] ;
20197: LD_ADDR_VAR 0 10
20201: PUSH
20202: EMPTY
20203: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20204: LD_ADDR_VAR 0 4
20208: PUSH
20209: LD_VAR 0 3
20213: PUSH
20214: LD_INT 5
20216: ARRAY
20217: PPUSH
20218: LD_INT 25
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 50
20230: PUSH
20231: EMPTY
20232: LIST
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PPUSH
20238: CALL_OW 72
20242: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20243: LD_ADDR_VAR 0 6
20247: PUSH
20248: LD_VAR 0 3
20252: PUSH
20253: LD_INT 6
20255: ARRAY
20256: PPUSH
20257: LD_INT 21
20259: PUSH
20260: LD_INT 3
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: LD_INT 50
20269: PUSH
20270: EMPTY
20271: LIST
20272: PUSH
20273: LD_INT 3
20275: PUSH
20276: LD_INT 59
20278: PUSH
20279: EMPTY
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: LD_INT 30
20291: PUSH
20292: LD_INT 31
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 30
20301: PUSH
20302: LD_INT 32
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: PPUSH
20320: CALL_OW 72
20324: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20325: LD_ADDR_VAR 0 7
20329: PUSH
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 6
20337: ARRAY
20338: PPUSH
20339: LD_INT 21
20341: PUSH
20342: LD_INT 3
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: LD_INT 50
20351: PUSH
20352: EMPTY
20353: LIST
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: LD_INT 30
20360: PUSH
20361: LD_INT 4
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 30
20370: PUSH
20371: LD_INT 5
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 72
20392: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20393: LD_ADDR_VAR 0 9
20397: PUSH
20398: LD_VAR 0 3
20402: PUSH
20403: LD_INT 6
20405: ARRAY
20406: PPUSH
20407: LD_INT 21
20409: PUSH
20410: LD_INT 3
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 50
20419: PUSH
20420: EMPTY
20421: LIST
20422: PUSH
20423: LD_INT 2
20425: PUSH
20426: LD_INT 30
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 1
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 72
20460: PUSH
20461: LD_INT 1
20463: ARRAY
20464: ST_TO_ADDR
// for barrack in barracks do
20465: LD_ADDR_VAR 0 11
20469: PUSH
20470: LD_VAR 0 7
20474: PUSH
20475: FOR_IN
20476: IFFALSE 20501
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20478: LD_ADDR_VAR 0 10
20482: PUSH
20483: LD_VAR 0 10
20487: PUSH
20488: LD_VAR 0 11
20492: PPUSH
20493: CALL_OW 313
20497: ADD
20498: ST_TO_ADDR
20499: GO 20475
20501: POP
20502: POP
// index = 1 ;
20503: LD_ADDR_VAR 0 8
20507: PUSH
20508: LD_INT 1
20510: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20511: LD_VAR 0 4
20515: PPUSH
20516: LD_INT 56
20518: PUSH
20519: EMPTY
20520: LIST
20521: PUSH
20522: LD_INT 3
20524: PUSH
20525: LD_INT 60
20527: PUSH
20528: EMPTY
20529: LIST
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PPUSH
20539: CALL_OW 72
20543: PUSH
20544: LD_VAR 0 6
20548: AND
20549: PUSH
20550: LD_VAR 0 9
20554: AND
20555: IFFALSE 20655
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20557: LD_ADDR_VAR 0 5
20561: PUSH
20562: LD_VAR 0 4
20566: PPUSH
20567: LD_INT 56
20569: PUSH
20570: EMPTY
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: PPUSH
20576: CALL_OW 72
20580: PUSH
20581: LD_VAR 0 10
20585: ADD
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20653
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20590: LD_VAR 0 5
20594: PPUSH
20595: CALL_OW 110
20599: PUSH
20600: LD_INT 1
20602: EQUAL
20603: PUSH
20604: LD_VAR 0 8
20608: PUSH
20609: LD_VAR 0 6
20613: LESSEQUAL
20614: AND
20615: IFFALSE 20651
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20617: LD_VAR 0 5
20621: PPUSH
20622: LD_VAR 0 6
20626: PUSH
20627: LD_VAR 0 8
20631: ARRAY
20632: PPUSH
20633: CALL_OW 120
// index = index + 1 ;
20637: LD_ADDR_VAR 0 8
20641: PUSH
20642: LD_VAR 0 8
20646: PUSH
20647: LD_INT 1
20649: PLUS
20650: ST_TO_ADDR
// end ;
20651: GO 20587
20653: POP
20654: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20655: LD_VAR 0 4
20659: PPUSH
20660: LD_INT 56
20662: PUSH
20663: EMPTY
20664: LIST
20665: PUSH
20666: LD_INT 3
20668: PUSH
20669: LD_INT 60
20671: PUSH
20672: EMPTY
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 72
20687: PUSH
20688: LD_VAR 0 6
20692: NOT
20693: AND
20694: PUSH
20695: LD_VAR 0 7
20699: AND
20700: IFFALSE 20776
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20702: LD_ADDR_VAR 0 5
20706: PUSH
20707: LD_VAR 0 4
20711: PPUSH
20712: LD_INT 56
20714: PUSH
20715: EMPTY
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: PPUSH
20721: CALL_OW 72
20725: PUSH
20726: FOR_IN
20727: IFFALSE 20774
// if ( GetTag ( sold ) = 1 ) then
20729: LD_VAR 0 5
20733: PPUSH
20734: CALL_OW 110
20738: PUSH
20739: LD_INT 1
20741: EQUAL
20742: IFFALSE 20772
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20744: LD_VAR 0 5
20748: PPUSH
20749: LD_VAR 0 7
20753: PUSH
20754: LD_INT 1
20756: PPUSH
20757: LD_VAR 0 7
20761: PPUSH
20762: CALL_OW 12
20766: ARRAY
20767: PPUSH
20768: CALL_OW 120
20772: GO 20726
20774: POP
20775: POP
// end ;
20776: LD_VAR 0 2
20780: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20781: LD_INT 0
20783: PPUSH
20784: PPUSH
20785: PPUSH
20786: PPUSH
20787: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20788: LD_ADDR_VAR 0 3
20792: PUSH
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL 18740 0 1
20802: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20803: LD_VAR 0 3
20807: PUSH
20808: LD_INT 2
20810: ARRAY
20811: PUSH
20812: LD_INT 0
20814: EQUAL
20815: IFFALSE 20819
// exit ;
20817: GO 21040
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20819: LD_ADDR_VAR 0 4
20823: PUSH
20824: LD_VAR 0 3
20828: PUSH
20829: LD_INT 5
20831: ARRAY
20832: PPUSH
20833: LD_INT 25
20835: PUSH
20836: LD_INT 3
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PUSH
20843: LD_INT 50
20845: PUSH
20846: EMPTY
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: PPUSH
20853: CALL_OW 72
20857: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20858: LD_ADDR_VAR 0 6
20862: PUSH
20863: LD_VAR 0 3
20867: PUSH
20868: LD_INT 6
20870: ARRAY
20871: PPUSH
20872: LD_INT 21
20874: PUSH
20875: LD_INT 3
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 50
20884: PUSH
20885: EMPTY
20886: LIST
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: LD_INT 30
20893: PUSH
20894: LD_INT 2
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 30
20903: PUSH
20904: LD_INT 3
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: LIST
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: LIST
20920: PPUSH
20921: CALL_OW 72
20925: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20926: LD_VAR 0 4
20930: PPUSH
20931: LD_INT 56
20933: PUSH
20934: EMPTY
20935: LIST
20936: PUSH
20937: LD_INT 3
20939: PUSH
20940: LD_INT 60
20942: PUSH
20943: EMPTY
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PPUSH
20954: CALL_OW 72
20958: PUSH
20959: LD_VAR 0 6
20963: AND
20964: IFFALSE 21040
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20966: LD_ADDR_VAR 0 5
20970: PUSH
20971: LD_VAR 0 4
20975: PPUSH
20976: LD_INT 56
20978: PUSH
20979: EMPTY
20980: LIST
20981: PUSH
20982: EMPTY
20983: LIST
20984: PPUSH
20985: CALL_OW 72
20989: PUSH
20990: FOR_IN
20991: IFFALSE 21038
// if ( GetTag ( mech ) = 1 ) then
20993: LD_VAR 0 5
20997: PPUSH
20998: CALL_OW 110
21002: PUSH
21003: LD_INT 1
21005: EQUAL
21006: IFFALSE 21036
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
21008: LD_VAR 0 5
21012: PPUSH
21013: LD_VAR 0 6
21017: PUSH
21018: LD_INT 1
21020: PPUSH
21021: LD_VAR 0 6
21025: PPUSH
21026: CALL_OW 12
21030: ARRAY
21031: PPUSH
21032: CALL_OW 120
21036: GO 20990
21038: POP
21039: POP
// end ;
21040: LD_VAR 0 2
21044: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
21045: LD_INT 0
21047: PPUSH
21048: PPUSH
21049: PPUSH
21050: PPUSH
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_VAR 0 1
21065: PPUSH
21066: CALL 18740 0 1
21070: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21071: LD_VAR 0 3
21075: PUSH
21076: LD_INT 2
21078: ARRAY
21079: PUSH
21080: LD_INT 0
21082: EQUAL
21083: IFFALSE 21087
// exit ;
21085: GO 21550
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21087: LD_ADDR_VAR 0 5
21091: PUSH
21092: LD_VAR 0 3
21096: PUSH
21097: LD_INT 5
21099: ARRAY
21100: PPUSH
21101: LD_INT 21
21103: PUSH
21104: LD_INT 3
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PUSH
21111: LD_INT 50
21113: PUSH
21114: EMPTY
21115: LIST
21116: PUSH
21117: LD_INT 59
21119: PUSH
21120: EMPTY
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 30
21128: PUSH
21129: LD_INT 2
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 30
21138: PUSH
21139: LD_INT 3
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: PPUSH
21157: CALL_OW 72
21161: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21162: LD_ADDR_VAR 0 8
21166: PUSH
21167: LD_VAR 0 3
21171: PUSH
21172: LD_INT 5
21174: ARRAY
21175: PPUSH
21176: LD_INT 21
21178: PUSH
21179: LD_INT 2
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 33
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 92
21198: PUSH
21199: LD_VAR 0 3
21203: PUSH
21204: LD_INT 10
21206: ARRAY
21207: PPUSH
21208: LD_INT 0
21210: PPUSH
21211: CALL_OW 517
21215: PUSH
21216: LD_INT 1
21218: ARRAY
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PUSH
21224: LD_VAR 0 3
21228: PUSH
21229: LD_INT 10
21231: ARRAY
21232: PPUSH
21233: LD_INT 0
21235: PPUSH
21236: CALL_OW 517
21240: PUSH
21241: LD_INT 2
21243: ARRAY
21244: PUSH
21245: LD_INT 1
21247: ARRAY
21248: PUSH
21249: LD_INT 16
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 24
21263: PUSH
21264: LD_INT 1000
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: PPUSH
21281: CALL_OW 72
21285: ST_TO_ADDR
// if not damageVehicles then
21286: LD_VAR 0 8
21290: NOT
21291: IFFALSE 21295
// exit ;
21293: GO 21550
// if fabs then
21295: LD_VAR 0 5
21299: IFFALSE 21424
// begin for damageVeh in damageVehicles do
21301: LD_ADDR_VAR 0 9
21305: PUSH
21306: LD_VAR 0 8
21310: PUSH
21311: FOR_IN
21312: IFFALSE 21422
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21314: LD_VAR 0 9
21318: PPUSH
21319: CALL_OW 110
21323: PUSH
21324: LD_INT 3
21326: EQUAL
21327: PUSH
21328: LD_VAR 0 9
21332: PPUSH
21333: CALL_OW 110
21337: PUSH
21338: LD_INT 5
21340: EQUAL
21341: OR
21342: IFFALSE 21420
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21344: LD_ADDR_VAR 0 7
21348: PUSH
21349: LD_VAR 0 5
21353: PPUSH
21354: LD_VAR 0 9
21358: PPUSH
21359: CALL_OW 74
21363: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21364: LD_ADDR_VAR 0 4
21368: PUSH
21369: LD_VAR 0 7
21373: PPUSH
21374: CALL_OW 313
21378: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21379: LD_VAR 0 4
21383: PPUSH
21384: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21388: LD_VAR 0 4
21392: PPUSH
21393: LD_INT 3
21395: PUSH
21396: LD_INT 60
21398: PUSH
21399: EMPTY
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL_OW 72
21410: PPUSH
21411: LD_VAR 0 9
21415: PPUSH
21416: CALL_OW 189
// end ;
21420: GO 21311
21422: POP
21423: POP
// end ; for damageVeh in damageVehicles do
21424: LD_ADDR_VAR 0 9
21428: PUSH
21429: LD_VAR 0 8
21433: PUSH
21434: FOR_IN
21435: IFFALSE 21548
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21437: LD_VAR 0 9
21441: PPUSH
21442: CALL_OW 110
21446: PUSH
21447: LD_INT 3
21449: EQUAL
21450: PUSH
21451: LD_VAR 0 9
21455: PPUSH
21456: CALL_OW 110
21460: PUSH
21461: LD_INT 5
21463: EQUAL
21464: OR
21465: IFFALSE 21546
// begin mehInside = UnitsInside ( damageVeh ) ;
21467: LD_ADDR_VAR 0 10
21471: PUSH
21472: LD_VAR 0 9
21476: PPUSH
21477: CALL_OW 313
21481: ST_TO_ADDR
// if mehInside then
21482: LD_VAR 0 10
21486: IFFALSE 21546
// begin mehInside = mehInside [ 1 ] ;
21488: LD_ADDR_VAR 0 10
21492: PUSH
21493: LD_VAR 0 10
21497: PUSH
21498: LD_INT 1
21500: ARRAY
21501: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21502: LD_VAR 0 10
21506: PPUSH
21507: CALL_OW 181
// wait ( 0 0$01 ) ;
21511: LD_INT 35
21513: PPUSH
21514: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21518: LD_VAR 0 10
21522: PPUSH
21523: LD_VAR 0 9
21527: PPUSH
21528: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21532: LD_VAR 0 10
21536: PPUSH
21537: LD_VAR 0 9
21541: PPUSH
21542: CALL_OW 180
// end ; end ;
21546: GO 21434
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 2
21554: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21563: LD_ADDR_VAR 0 3
21567: PUSH
21568: LD_VAR 0 1
21572: PPUSH
21573: CALL 18740 0 1
21577: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21578: LD_VAR 0 3
21582: PUSH
21583: LD_INT 2
21585: ARRAY
21586: PUSH
21587: LD_INT 0
21589: EQUAL
21590: IFFALSE 21594
// exit ;
21592: GO 22048
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21594: LD_ADDR_VAR 0 7
21598: PUSH
21599: LD_VAR 0 3
21603: PUSH
21604: LD_INT 6
21606: ARRAY
21607: PPUSH
21608: LD_INT 21
21610: PUSH
21611: LD_INT 3
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PUSH
21618: LD_INT 50
21620: PUSH
21621: EMPTY
21622: LIST
21623: PUSH
21624: LD_INT 2
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: LD_INT 0
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 30
21639: PUSH
21640: LD_INT 1
21642: PUSH
21643: EMPTY
21644: LIST
21645: LIST
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: LIST
21651: PUSH
21652: EMPTY
21653: LIST
21654: LIST
21655: LIST
21656: PPUSH
21657: CALL_OW 72
21661: PUSH
21662: LD_INT 1
21664: ARRAY
21665: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21666: LD_VAR 0 3
21670: PPUSH
21671: CALL 19448 0 1
21675: NOT
21676: IFFALSE 21680
// exit ;
21678: GO 22048
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21680: LD_VAR 0 7
21684: PUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL 19448 0 1
21694: AND
21695: PUSH
21696: LD_VAR 0 3
21700: PUSH
21701: LD_INT 11
21703: ARRAY
21704: PPUSH
21705: LD_INT 81
21707: PUSH
21708: LD_VAR 0 3
21712: PUSH
21713: LD_INT 3
21715: ARRAY
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: PPUSH
21721: CALL_OW 70
21725: NOT
21726: AND
21727: IFFALSE 21877
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21729: LD_ADDR_VAR 0 5
21733: PUSH
21734: LD_VAR 0 3
21738: PPUSH
21739: CALL 19448 0 1
21743: PPUSH
21744: LD_INT 50
21746: PUSH
21747: EMPTY
21748: LIST
21749: PUSH
21750: LD_INT 3
21752: PUSH
21753: LD_INT 60
21755: PUSH
21756: EMPTY
21757: LIST
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 3
21765: PUSH
21766: LD_INT 92
21768: PUSH
21769: LD_VAR 0 7
21773: PPUSH
21774: CALL_OW 250
21778: PUSH
21779: LD_VAR 0 7
21783: PPUSH
21784: CALL_OW 251
21788: PUSH
21789: LD_INT 12
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PPUSH
21807: CALL_OW 72
21811: PUSH
21812: FOR_IN
21813: IFFALSE 21875
// if GetLives ( veh ) = 1000 then
21815: LD_VAR 0 5
21819: PPUSH
21820: CALL_OW 256
21824: PUSH
21825: LD_INT 1000
21827: EQUAL
21828: IFFALSE 21861
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21830: LD_VAR 0 5
21834: PPUSH
21835: LD_VAR 0 7
21839: PPUSH
21840: CALL_OW 250
21844: PPUSH
21845: LD_VAR 0 7
21849: PPUSH
21850: CALL_OW 251
21854: PPUSH
21855: CALL_OW 111
21859: GO 21873
// SetTag ( veh , 3 ) ;
21861: LD_VAR 0 5
21865: PPUSH
21866: LD_INT 3
21868: PPUSH
21869: CALL_OW 109
21873: GO 21812
21875: POP
21876: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21877: LD_VAR 0 3
21881: PUSH
21882: LD_INT 11
21884: ARRAY
21885: PPUSH
21886: LD_INT 81
21888: PUSH
21889: LD_VAR 0 3
21893: PUSH
21894: LD_INT 3
21896: ARRAY
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PPUSH
21902: CALL_OW 70
21906: NOT
21907: IFFALSE 21911
// exit ;
21909: GO 22048
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21911: LD_ADDR_VAR 0 5
21915: PUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL 19448 0 1
21925: PPUSH
21926: LD_INT 50
21928: PUSH
21929: EMPTY
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 60
21937: PUSH
21938: EMPTY
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PPUSH
21949: CALL_OW 72
21953: PUSH
21954: FOR_IN
21955: IFFALSE 22046
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21957: LD_VAR 0 5
21961: PPUSH
21962: LD_VAR 0 3
21966: PUSH
21967: LD_INT 11
21969: ARRAY
21970: PPUSH
21971: LD_INT 81
21973: PUSH
21974: LD_VAR 0 3
21978: PUSH
21979: LD_INT 3
21981: ARRAY
21982: PUSH
21983: EMPTY
21984: LIST
21985: LIST
21986: PPUSH
21987: CALL_OW 70
21991: PUSH
21992: LD_INT 1
21994: ARRAY
21995: PPUSH
21996: CALL_OW 250
22000: PPUSH
22001: LD_VAR 0 3
22005: PUSH
22006: LD_INT 11
22008: ARRAY
22009: PPUSH
22010: LD_INT 81
22012: PUSH
22013: LD_VAR 0 3
22017: PUSH
22018: LD_INT 3
22020: ARRAY
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PPUSH
22026: CALL_OW 70
22030: PUSH
22031: LD_INT 1
22033: ARRAY
22034: PPUSH
22035: CALL_OW 251
22039: PPUSH
22040: CALL_OW 114
22044: GO 21954
22046: POP
22047: POP
// end ;
22048: LD_VAR 0 2
22052: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22053: LD_INT 0
22055: PPUSH
22056: PPUSH
22057: PPUSH
22058: PPUSH
22059: PPUSH
22060: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22061: LD_ADDR_VAR 0 3
22065: PUSH
22066: LD_VAR 0 1
22070: PPUSH
22071: CALL 18740 0 1
22075: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22076: LD_VAR 0 3
22080: PUSH
22081: LD_INT 2
22083: ARRAY
22084: PUSH
22085: LD_INT 0
22087: EQUAL
22088: IFFALSE 22092
// exit ;
22090: GO 22482
// if ( aiData [ 18 ] = 0 ) then
22092: LD_VAR 0 3
22096: PUSH
22097: LD_INT 18
22099: ARRAY
22100: PUSH
22101: LD_INT 0
22103: EQUAL
22104: IFFALSE 22108
// exit ;
22106: GO 22482
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22108: LD_VAR 0 3
22112: PPUSH
22113: CALL 19558 0 1
22117: PUSH
22118: LD_VAR 0 3
22122: PUSH
22123: LD_INT 14
22125: ARRAY
22126: GREATEREQUAL
22127: IFFALSE 22482
// begin repeat wait ( 0 0$01 ) ;
22129: LD_INT 35
22131: PPUSH
22132: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22136: LD_ADDR_VAR 0 6
22140: PUSH
22141: LD_VAR 0 3
22145: PPUSH
22146: CALL 19558 0 1
22150: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22151: LD_ADDR_VAR 0 7
22155: PUSH
22156: LD_VAR 0 6
22160: PUSH
22161: FOR_IN
22162: IFFALSE 22462
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22164: LD_ADDR_VAR 0 4
22168: PUSH
22169: LD_INT 81
22171: PUSH
22172: LD_VAR 0 3
22176: PUSH
22177: LD_INT 3
22179: ARRAY
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PPUSH
22185: CALL_OW 69
22189: PPUSH
22190: LD_VAR 0 7
22194: PPUSH
22195: CALL_OW 74
22199: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22200: LD_ADDR_VAR 0 5
22204: PUSH
22205: LD_INT 81
22207: PUSH
22208: LD_VAR 0 3
22212: PUSH
22213: LD_INT 3
22215: ARRAY
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: LD_INT 59
22226: PUSH
22227: EMPTY
22228: LIST
22229: PUSH
22230: LD_INT 21
22232: PUSH
22233: LD_INT 1
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: PUSH
22240: LD_INT 21
22242: PUSH
22243: LD_INT 2
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: PUSH
22256: EMPTY
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: PPUSH
22263: CALL_OW 69
22267: PPUSH
22268: LD_VAR 0 7
22272: PPUSH
22273: CALL_OW 74
22277: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22278: LD_VAR 0 7
22282: PPUSH
22283: LD_VAR 0 4
22287: PPUSH
22288: CALL_OW 296
22292: PUSH
22293: LD_INT 12
22295: PLUS
22296: PUSH
22297: LD_VAR 0 7
22301: PPUSH
22302: LD_VAR 0 5
22306: PPUSH
22307: CALL_OW 296
22311: LESS
22312: IFFALSE 22388
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22314: LD_VAR 0 7
22318: PPUSH
22319: LD_INT 50
22321: PUSH
22322: EMPTY
22323: LIST
22324: PPUSH
22325: CALL_OW 72
22329: PPUSH
22330: LD_VAR 0 4
22334: PPUSH
22335: CALL_OW 250
22339: PPUSH
22340: LD_VAR 0 4
22344: PPUSH
22345: CALL_OW 251
22349: PPUSH
22350: CALL_OW 114
// wait ( 0 0$01 ) ;
22354: LD_INT 35
22356: PPUSH
22357: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22361: LD_VAR 0 7
22365: PPUSH
22366: LD_INT 50
22368: PUSH
22369: EMPTY
22370: LIST
22371: PPUSH
22372: CALL_OW 72
22376: PPUSH
22377: LD_VAR 0 4
22381: PPUSH
22382: CALL_OW 115
// end else
22386: GO 22460
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22388: LD_VAR 0 7
22392: PPUSH
22393: LD_INT 50
22395: PUSH
22396: EMPTY
22397: LIST
22398: PPUSH
22399: CALL_OW 72
22403: PPUSH
22404: LD_VAR 0 5
22408: PPUSH
22409: CALL_OW 250
22413: PPUSH
22414: LD_VAR 0 5
22418: PPUSH
22419: CALL_OW 251
22423: PPUSH
22424: CALL_OW 114
// wait ( 0 0$01 ) ;
22428: LD_INT 35
22430: PPUSH
22431: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22435: LD_VAR 0 7
22439: PPUSH
22440: LD_INT 50
22442: PUSH
22443: EMPTY
22444: LIST
22445: PPUSH
22446: CALL_OW 72
22450: PPUSH
22451: LD_VAR 0 5
22455: PPUSH
22456: CALL_OW 115
// end ; end ;
22460: GO 22161
22462: POP
22463: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22464: LD_VAR 0 6
22468: PPUSH
22469: LD_INT 50
22471: PUSH
22472: EMPTY
22473: LIST
22474: PPUSH
22475: CALL_OW 72
22479: NOT
22480: IFFALSE 22129
// end ; end ;
22482: LD_VAR 0 2
22486: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22487: LD_INT 0
22489: PPUSH
22490: PPUSH
22491: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22492: LD_ADDR_VAR 0 3
22496: PUSH
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL 18740 0 1
22506: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22507: LD_VAR 0 3
22511: PUSH
22512: LD_INT 2
22514: ARRAY
22515: PUSH
22516: LD_INT 0
22518: EQUAL
22519: IFFALSE 22523
// exit ;
22521: GO 22672
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22523: LD_ADDR_VAR 0 4
22527: PUSH
22528: LD_VAR 0 3
22532: PUSH
22533: LD_INT 5
22535: ARRAY
22536: PPUSH
22537: LD_INT 21
22539: PUSH
22540: LD_INT 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 50
22549: PUSH
22550: EMPTY
22551: LIST
22552: PUSH
22553: LD_INT 2
22555: PUSH
22556: LD_INT 34
22558: PUSH
22559: LD_INT 12
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 34
22568: PUSH
22569: LD_INT 32
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 34
22578: PUSH
22579: LD_INT 51
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: LIST
22596: PPUSH
22597: CALL_OW 72
22601: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22602: LD_VAR 0 3
22606: PUSH
22607: LD_INT 8
22609: ARRAY
22610: PPUSH
22611: CALL_OW 435
22615: NOT
22616: PUSH
22617: LD_VAR 0 4
22621: NOT
22622: OR
22623: IFFALSE 22627
// exit ;
22625: GO 22672
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22627: LD_VAR 0 4
22631: PPUSH
22632: LD_VAR 0 3
22636: PUSH
22637: LD_INT 8
22639: ARRAY
22640: PPUSH
22641: CALL_OW 435
22645: PUSH
22646: LD_INT 1
22648: ARRAY
22649: PPUSH
22650: LD_VAR 0 3
22654: PUSH
22655: LD_INT 8
22657: ARRAY
22658: PPUSH
22659: CALL_OW 435
22663: PUSH
22664: LD_INT 2
22666: ARRAY
22667: PPUSH
22668: CALL_OW 117
// end ;
22672: LD_VAR 0 2
22676: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22677: LD_INT 0
22679: PPUSH
22680: PPUSH
22681: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22682: LD_ADDR_VAR 0 3
22686: PUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL 18740 0 1
22696: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22697: LD_VAR 0 3
22701: PUSH
22702: LD_INT 2
22704: ARRAY
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: IFFALSE 22713
// exit ;
22711: GO 22803
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22713: LD_ADDR_VAR 0 4
22717: PUSH
22718: LD_VAR 0 3
22722: PUSH
22723: LD_INT 5
22725: ARRAY
22726: PPUSH
22727: LD_INT 21
22729: PUSH
22730: LD_INT 1
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PPUSH
22737: CALL_OW 72
22741: PUSH
22742: FOR_IN
22743: IFFALSE 22801
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22745: LD_VAR 0 4
22749: PPUSH
22750: CALL_OW 110
22754: PUSH
22755: LD_INT 0
22757: EQUAL
22758: PUSH
22759: LD_VAR 0 4
22763: PPUSH
22764: LD_VAR 0 3
22768: PUSH
22769: LD_INT 9
22771: ARRAY
22772: PPUSH
22773: CALL_OW 308
22777: NOT
22778: AND
22779: IFFALSE 22799
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22781: LD_VAR 0 4
22785: PPUSH
22786: LD_VAR 0 3
22790: PUSH
22791: LD_INT 9
22793: ARRAY
22794: PPUSH
22795: CALL_OW 113
22799: GO 22742
22801: POP
22802: POP
// end ;
22803: LD_VAR 0 2
22807: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22813: LD_ADDR_VAR 0 3
22817: PUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL 18740 0 1
22827: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22828: LD_VAR 0 3
22832: PUSH
22833: LD_INT 2
22835: ARRAY
22836: PUSH
22837: LD_INT 0
22839: EQUAL
22840: IFFALSE 22844
// exit ;
22842: GO 22959
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22844: LD_ADDR_VAR 0 4
22848: PUSH
22849: LD_VAR 0 3
22853: PUSH
22854: LD_INT 5
22856: ARRAY
22857: PPUSH
22858: LD_INT 21
22860: PUSH
22861: LD_INT 2
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 50
22870: PUSH
22871: EMPTY
22872: LIST
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 72
22882: PUSH
22883: FOR_IN
22884: IFFALSE 22957
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22886: LD_VAR 0 4
22890: PPUSH
22891: CALL_OW 110
22895: PUSH
22896: LD_INT 3
22898: EQUAL
22899: PUSH
22900: LD_VAR 0 4
22904: PPUSH
22905: CALL_OW 110
22909: PUSH
22910: LD_INT 5
22912: EQUAL
22913: OR
22914: PUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_VAR 0 3
22924: PUSH
22925: LD_INT 10
22927: ARRAY
22928: PPUSH
22929: CALL_OW 308
22933: NOT
22934: AND
22935: IFFALSE 22955
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22937: LD_VAR 0 4
22941: PPUSH
22942: LD_VAR 0 3
22946: PUSH
22947: LD_INT 10
22949: ARRAY
22950: PPUSH
22951: CALL_OW 113
22955: GO 22883
22957: POP
22958: POP
// end ;
22959: LD_VAR 0 2
22963: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22964: LD_INT 0
22966: PPUSH
22967: PPUSH
22968: PPUSH
22969: PPUSH
22970: PPUSH
22971: PPUSH
22972: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22973: LD_ADDR_VAR 0 3
22977: PUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL 18740 0 1
22987: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22988: LD_VAR 0 3
22992: PUSH
22993: LD_INT 2
22995: ARRAY
22996: PUSH
22997: LD_INT 0
22999: EQUAL
23000: IFFALSE 23004
// exit ;
23002: GO 23702
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
23004: LD_ADDR_VAR 0 4
23008: PUSH
23009: LD_VAR 0 3
23013: PUSH
23014: LD_INT 5
23016: ARRAY
23017: PPUSH
23018: LD_INT 25
23020: PUSH
23021: LD_INT 2
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 50
23030: PUSH
23031: EMPTY
23032: LIST
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PPUSH
23038: CALL_OW 72
23042: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
23043: LD_ADDR_VAR 0 5
23047: PUSH
23048: LD_VAR 0 3
23052: PUSH
23053: LD_INT 5
23055: ARRAY
23056: PPUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 50
23069: PUSH
23070: EMPTY
23071: LIST
23072: PUSH
23073: LD_INT 2
23075: PUSH
23076: LD_INT 34
23078: PUSH
23079: LD_INT 13
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 34
23088: PUSH
23089: LD_INT 88
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: LD_INT 34
23098: PUSH
23099: LD_INT 52
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: PPUSH
23117: CALL_OW 72
23121: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23122: LD_ADDR_VAR 0 8
23126: PUSH
23127: LD_VAR 0 3
23131: PUSH
23132: LD_INT 6
23134: ARRAY
23135: PPUSH
23136: LD_INT 21
23138: PUSH
23139: LD_INT 3
23141: PUSH
23142: EMPTY
23143: LIST
23144: LIST
23145: PUSH
23146: LD_INT 3
23148: PUSH
23149: LD_INT 24
23151: PUSH
23152: LD_INT 1000
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 72
23171: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23172: LD_VAR 0 4
23176: PPUSH
23177: LD_INT 56
23179: PUSH
23180: EMPTY
23181: LIST
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: LD_INT 60
23188: PUSH
23189: EMPTY
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 72
23204: PUSH
23205: LD_VAR 0 8
23209: NOT
23210: AND
23211: PUSH
23212: LD_VAR 0 3
23216: PUSH
23217: LD_INT 6
23219: ARRAY
23220: PPUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 50
23233: PUSH
23234: EMPTY
23235: LIST
23236: PUSH
23237: LD_INT 2
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 0
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 30
23252: PUSH
23253: LD_INT 1
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 72
23274: AND
23275: IFFALSE 23413
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23277: LD_ADDR_VAR 0 7
23281: PUSH
23282: LD_VAR 0 4
23286: PPUSH
23287: LD_INT 56
23289: PUSH
23290: EMPTY
23291: LIST
23292: PUSH
23293: LD_INT 3
23295: PUSH
23296: LD_INT 60
23298: PUSH
23299: EMPTY
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PPUSH
23310: CALL_OW 72
23314: PUSH
23315: FOR_IN
23316: IFFALSE 23411
// if ( GetTag ( eng ) = 1 ) then
23318: LD_VAR 0 7
23322: PPUSH
23323: CALL_OW 110
23327: PUSH
23328: LD_INT 1
23330: EQUAL
23331: IFFALSE 23409
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23333: LD_VAR 0 7
23337: PPUSH
23338: LD_VAR 0 3
23342: PUSH
23343: LD_INT 6
23345: ARRAY
23346: PPUSH
23347: LD_INT 21
23349: PUSH
23350: LD_INT 3
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PUSH
23357: LD_INT 50
23359: PUSH
23360: EMPTY
23361: LIST
23362: PUSH
23363: LD_INT 2
23365: PUSH
23366: LD_INT 30
23368: PUSH
23369: LD_INT 0
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 30
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: LIST
23395: PPUSH
23396: CALL_OW 72
23400: PUSH
23401: LD_INT 1
23403: ARRAY
23404: PPUSH
23405: CALL_OW 120
23409: GO 23315
23411: POP
23412: POP
// if engineers and damagedBuildings then
23413: LD_VAR 0 4
23417: PUSH
23418: LD_VAR 0 8
23422: AND
23423: IFFALSE 23570
// begin for eng in engineers do
23425: LD_ADDR_VAR 0 7
23429: PUSH
23430: LD_VAR 0 4
23434: PUSH
23435: FOR_IN
23436: IFFALSE 23509
// if ( GetTag ( eng ) = 1 ) then
23438: LD_VAR 0 7
23442: PPUSH
23443: CALL_OW 110
23447: PUSH
23448: LD_INT 1
23450: EQUAL
23451: IFFALSE 23507
// begin ForceResetTaskList ( eng ) ;
23453: LD_VAR 0 7
23457: PPUSH
23458: CALL 27050 0 1
// ExitUnitFromBuilding ( eng ) ;
23462: LD_VAR 0 7
23466: PPUSH
23467: CALL 27103 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23471: LD_VAR 0 7
23475: PPUSH
23476: LD_INT 3
23478: PUSH
23479: LD_INT 60
23481: PUSH
23482: EMPTY
23483: LIST
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: PPUSH
23489: CALL_OW 72
23493: PPUSH
23494: LD_VAR 0 8
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PPUSH
23503: CALL_OW 190
// end ;
23507: GO 23435
23509: POP
23510: POP
// if cranes then
23511: LD_VAR 0 5
23515: IFFALSE 23570
// for crane in cranes do
23517: LD_ADDR_VAR 0 6
23521: PUSH
23522: LD_VAR 0 5
23526: PUSH
23527: FOR_IN
23528: IFFALSE 23568
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23530: LD_VAR 0 6
23534: PPUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 60
23540: PUSH
23541: EMPTY
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 72
23552: PPUSH
23553: LD_VAR 0 8
23557: PUSH
23558: LD_INT 1
23560: ARRAY
23561: PPUSH
23562: CALL_OW 190
23566: GO 23527
23568: POP
23569: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23570: LD_VAR 0 4
23574: PUSH
23575: LD_VAR 0 8
23579: NOT
23580: AND
23581: PUSH
23582: LD_VAR 0 3
23586: PUSH
23587: LD_INT 7
23589: ARRAY
23590: AND
23591: IFFALSE 23702
// begin for eng in engineers do
23593: LD_ADDR_VAR 0 7
23597: PUSH
23598: LD_VAR 0 4
23602: PUSH
23603: FOR_IN
23604: IFFALSE 23700
// if ( GetTag ( eng ) = 1 ) then
23606: LD_VAR 0 7
23610: PPUSH
23611: CALL_OW 110
23615: PUSH
23616: LD_INT 1
23618: EQUAL
23619: IFFALSE 23698
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23621: LD_VAR 0 7
23625: PPUSH
23626: LD_VAR 0 3
23630: PUSH
23631: LD_INT 7
23633: ARRAY
23634: PUSH
23635: LD_INT 1
23637: ARRAY
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PPUSH
23643: LD_VAR 0 3
23647: PUSH
23648: LD_INT 7
23650: ARRAY
23651: PUSH
23652: LD_INT 1
23654: ARRAY
23655: PUSH
23656: LD_INT 2
23658: ARRAY
23659: PPUSH
23660: LD_VAR 0 3
23664: PUSH
23665: LD_INT 7
23667: ARRAY
23668: PUSH
23669: LD_INT 1
23671: ARRAY
23672: PUSH
23673: LD_INT 3
23675: ARRAY
23676: PPUSH
23677: LD_VAR 0 3
23681: PUSH
23682: LD_INT 7
23684: ARRAY
23685: PUSH
23686: LD_INT 1
23688: ARRAY
23689: PUSH
23690: LD_INT 4
23692: ARRAY
23693: PPUSH
23694: CALL_OW 145
23698: GO 23603
23700: POP
23701: POP
// end ;
23702: LD_VAR 0 2
23706: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23707: LD_INT 0
23709: PPUSH
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23715: LD_ADDR_VAR 0 3
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: CALL 18740 0 1
23729: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23730: LD_VAR 0 3
23734: PUSH
23735: LD_INT 2
23737: ARRAY
23738: PUSH
23739: LD_INT 0
23741: EQUAL
23742: IFFALSE 23746
// exit ;
23744: GO 24200
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23746: LD_ADDR_VAR 0 4
23750: PUSH
23751: LD_VAR 0 3
23755: PUSH
23756: LD_INT 5
23758: ARRAY
23759: PPUSH
23760: LD_INT 25
23762: PUSH
23763: LD_INT 4
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: PUSH
23770: LD_INT 50
23772: PUSH
23773: EMPTY
23774: LIST
23775: PUSH
23776: EMPTY
23777: LIST
23778: LIST
23779: PPUSH
23780: CALL_OW 72
23784: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23785: LD_ADDR_VAR 0 6
23789: PUSH
23790: LD_VAR 0 3
23794: PUSH
23795: LD_INT 5
23797: ARRAY
23798: PPUSH
23799: LD_INT 21
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 92
23811: PUSH
23812: LD_VAR 0 3
23816: PUSH
23817: LD_INT 9
23819: ARRAY
23820: PPUSH
23821: LD_INT 0
23823: PPUSH
23824: CALL_OW 517
23828: PUSH
23829: LD_INT 1
23831: ARRAY
23832: PUSH
23833: LD_INT 1
23835: ARRAY
23836: PUSH
23837: LD_VAR 0 3
23841: PUSH
23842: LD_INT 9
23844: ARRAY
23845: PPUSH
23846: LD_INT 0
23848: PPUSH
23849: CALL_OW 517
23853: PUSH
23854: LD_INT 2
23856: ARRAY
23857: PUSH
23858: LD_INT 1
23860: ARRAY
23861: PUSH
23862: LD_INT 6
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 3
23873: PUSH
23874: LD_INT 24
23876: PUSH
23877: LD_INT 1000
23879: PUSH
23880: EMPTY
23881: LIST
23882: LIST
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 72
23897: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23898: LD_ADDR_VAR 0 7
23902: PUSH
23903: LD_VAR 0 3
23907: PUSH
23908: LD_INT 5
23910: ARRAY
23911: PPUSH
23912: LD_INT 21
23914: PUSH
23915: LD_INT 3
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 50
23924: PUSH
23925: EMPTY
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: PUSH
23931: LD_INT 30
23933: PUSH
23934: LD_INT 6
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 30
23943: PUSH
23944: LD_INT 7
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: LD_INT 30
23953: PUSH
23954: LD_INT 8
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: PPUSH
23972: CALL_OW 72
23976: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23977: LD_VAR 0 4
23981: PPUSH
23982: LD_INT 56
23984: PUSH
23985: EMPTY
23986: LIST
23987: PUSH
23988: LD_INT 3
23990: PUSH
23991: LD_INT 60
23993: PUSH
23994: EMPTY
23995: LIST
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PPUSH
24005: CALL_OW 72
24009: PUSH
24010: LD_VAR 0 6
24014: NOT
24015: AND
24016: PUSH
24017: LD_VAR 0 7
24021: AND
24022: IFFALSE 24098
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
24024: LD_ADDR_VAR 0 5
24028: PUSH
24029: LD_VAR 0 4
24033: PPUSH
24034: LD_INT 56
24036: PUSH
24037: EMPTY
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: PPUSH
24043: CALL_OW 72
24047: PUSH
24048: FOR_IN
24049: IFFALSE 24096
// if ( GetTag ( sci ) = 1 ) then
24051: LD_VAR 0 5
24055: PPUSH
24056: CALL_OW 110
24060: PUSH
24061: LD_INT 1
24063: EQUAL
24064: IFFALSE 24094
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24066: LD_VAR 0 5
24070: PPUSH
24071: LD_VAR 0 7
24075: PUSH
24076: LD_INT 1
24078: PPUSH
24079: LD_VAR 0 7
24083: PPUSH
24084: CALL_OW 12
24088: ARRAY
24089: PPUSH
24090: CALL_OW 120
24094: GO 24048
24096: POP
24097: POP
// if not scientists or not damageUnits then
24098: LD_VAR 0 4
24102: NOT
24103: PUSH
24104: LD_VAR 0 6
24108: NOT
24109: OR
24110: IFFALSE 24114
// exit ;
24112: GO 24200
// for sci in scientists do
24114: LD_ADDR_VAR 0 5
24118: PUSH
24119: LD_VAR 0 4
24123: PUSH
24124: FOR_IN
24125: IFFALSE 24198
// if ( GetTag ( sci ) = 1 ) then
24127: LD_VAR 0 5
24131: PPUSH
24132: CALL_OW 110
24136: PUSH
24137: LD_INT 1
24139: EQUAL
24140: IFFALSE 24196
// begin ForceResetTaskList ( sci ) ;
24142: LD_VAR 0 5
24146: PPUSH
24147: CALL 27050 0 1
// ExitUnitFromBuilding ( sci ) ;
24151: LD_VAR 0 5
24155: PPUSH
24156: CALL 27103 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24160: LD_VAR 0 5
24164: PPUSH
24165: LD_INT 3
24167: PUSH
24168: LD_INT 60
24170: PUSH
24171: EMPTY
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PPUSH
24178: CALL_OW 72
24182: PPUSH
24183: LD_VAR 0 6
24187: PUSH
24188: LD_INT 1
24190: ARRAY
24191: PPUSH
24192: CALL_OW 188
// end ;
24196: GO 24124
24198: POP
24199: POP
// end ;
24200: LD_VAR 0 2
24204: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24205: LD_INT 0
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
24211: PPUSH
24212: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24213: LD_ADDR_VAR 0 3
24217: PUSH
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL 18740 0 1
24227: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24228: LD_VAR 0 3
24232: PUSH
24233: LD_INT 2
24235: ARRAY
24236: PUSH
24237: LD_INT 0
24239: EQUAL
24240: IFFALSE 24244
// exit ;
24242: GO 25605
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24244: LD_ADDR_VAR 0 4
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_INT 6
24256: ARRAY
24257: PPUSH
24258: LD_INT 21
24260: PUSH
24261: LD_INT 3
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 50
24270: PUSH
24271: EMPTY
24272: LIST
24273: PUSH
24274: LD_INT 2
24276: PUSH
24277: LD_INT 30
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 30
24289: PUSH
24290: LD_INT 3
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: LIST
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: PPUSH
24307: CALL_OW 72
24311: ST_TO_ADDR
// if not fabs then
24312: LD_VAR 0 4
24316: NOT
24317: IFFALSE 24321
// exit ;
24319: GO 25605
// wait ( aiData [ 16 ] ) ;
24321: LD_VAR 0 3
24325: PUSH
24326: LD_INT 16
24328: ARRAY
24329: PPUSH
24330: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24334: LD_VAR 0 3
24338: PUSH
24339: LD_INT 17
24341: ARRAY
24342: PUSH
24343: LD_INT 1
24345: ARRAY
24346: IFFALSE 24518
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24348: LD_ADDR_VAR 0 5
24352: PUSH
24353: DOUBLE
24354: LD_INT 1
24356: DEC
24357: ST_TO_ADDR
24358: LD_VAR 0 3
24362: PUSH
24363: LD_INT 13
24365: ARRAY
24366: PUSH
24367: LD_VAR 0 3
24371: PPUSH
24372: CALL 19448 0 1
24376: MINUS
24377: PUSH
24378: FOR_TO
24379: IFFALSE 24516
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24381: LD_ADDR_VAR 0 6
24385: PUSH
24386: LD_VAR 0 3
24390: PUSH
24391: LD_INT 13
24393: ARRAY
24394: PUSH
24395: LD_VAR 0 5
24399: ARRAY
24400: PUSH
24401: LD_INT 4
24403: ARRAY
24404: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24405: LD_ADDR_VAR 0 7
24409: PUSH
24410: LD_VAR 0 6
24414: PUSH
24415: LD_INT 1
24417: PPUSH
24418: LD_VAR 0 6
24422: PPUSH
24423: CALL_OW 12
24427: ARRAY
24428: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24429: LD_VAR 0 4
24433: PUSH
24434: LD_INT 0
24436: PPUSH
24437: LD_VAR 0 4
24441: PPUSH
24442: CALL_OW 12
24446: ARRAY
24447: PPUSH
24448: LD_VAR 0 3
24452: PUSH
24453: LD_INT 13
24455: ARRAY
24456: PUSH
24457: LD_VAR 0 5
24461: ARRAY
24462: PUSH
24463: LD_INT 1
24465: ARRAY
24466: PPUSH
24467: LD_VAR 0 3
24471: PUSH
24472: LD_INT 13
24474: ARRAY
24475: PUSH
24476: LD_VAR 0 5
24480: ARRAY
24481: PUSH
24482: LD_INT 2
24484: ARRAY
24485: PPUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_INT 13
24493: ARRAY
24494: PUSH
24495: LD_VAR 0 5
24499: ARRAY
24500: PUSH
24501: LD_INT 3
24503: ARRAY
24504: PPUSH
24505: LD_VAR 0 7
24509: PPUSH
24510: CALL_OW 185
// end ;
24514: GO 24378
24516: POP
24517: POP
// end ; if aiData [ 17 ] [ 3 ] then
24518: LD_VAR 0 3
24522: PUSH
24523: LD_INT 17
24525: ARRAY
24526: PUSH
24527: LD_INT 3
24529: ARRAY
24530: IFFALSE 25421
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24532: LD_INT 22
24534: PUSH
24535: LD_VAR 0 3
24539: PUSH
24540: LD_INT 3
24542: ARRAY
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: LD_INT 21
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: EMPTY
24555: LIST
24556: LIST
24557: PUSH
24558: LD_INT 2
24560: PUSH
24561: LD_INT 34
24563: PUSH
24564: LD_INT 12
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 34
24573: PUSH
24574: LD_INT 32
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 34
24583: PUSH
24584: LD_INT 51
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: PPUSH
24602: CALL_OW 69
24606: PUSH
24607: LD_VAR 0 3
24611: PUSH
24612: LD_INT 15
24614: ARRAY
24615: PUSH
24616: LD_INT 1
24618: ARRAY
24619: LESS
24620: IFFALSE 24831
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24622: LD_ADDR_VAR 0 5
24626: PUSH
24627: DOUBLE
24628: LD_INT 1
24630: DEC
24631: ST_TO_ADDR
24632: LD_VAR 0 3
24636: PUSH
24637: LD_INT 15
24639: ARRAY
24640: PUSH
24641: LD_INT 1
24643: ARRAY
24644: PUSH
24645: LD_INT 22
24647: PUSH
24648: LD_VAR 0 3
24652: PUSH
24653: LD_INT 3
24655: ARRAY
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: LD_INT 21
24663: PUSH
24664: LD_INT 2
24666: PUSH
24667: EMPTY
24668: LIST
24669: LIST
24670: PUSH
24671: LD_INT 2
24673: PUSH
24674: LD_INT 34
24676: PUSH
24677: LD_INT 12
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: PUSH
24684: LD_INT 34
24686: PUSH
24687: LD_INT 32
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 34
24696: PUSH
24697: LD_INT 51
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: PPUSH
24715: CALL_OW 69
24719: MINUS
24720: PUSH
24721: FOR_TO
24722: IFFALSE 24829
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24724: LD_VAR 0 4
24728: PUSH
24729: LD_INT 0
24731: PPUSH
24732: LD_VAR 0 4
24736: PPUSH
24737: CALL_OW 12
24741: ARRAY
24742: PPUSH
24743: LD_INT 3
24745: PUSH
24746: EMPTY
24747: LIST
24748: PUSH
24749: LD_INT 13
24751: PUSH
24752: EMPTY
24753: LIST
24754: PUSH
24755: LD_INT 22
24757: PUSH
24758: EMPTY
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: LIST
24765: PUSH
24766: LD_VAR 0 3
24770: PUSH
24771: LD_INT 4
24773: ARRAY
24774: ARRAY
24775: PUSH
24776: LD_INT 1
24778: ARRAY
24779: PPUSH
24780: LD_INT 1
24782: PPUSH
24783: LD_INT 2
24785: PPUSH
24786: LD_INT 12
24788: PUSH
24789: EMPTY
24790: LIST
24791: PUSH
24792: LD_INT 32
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: LD_INT 51
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: LIST
24808: PUSH
24809: LD_VAR 0 3
24813: PUSH
24814: LD_INT 4
24816: ARRAY
24817: ARRAY
24818: PUSH
24819: LD_INT 1
24821: ARRAY
24822: PPUSH
24823: CALL_OW 185
24827: GO 24721
24829: POP
24830: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24831: LD_INT 22
24833: PUSH
24834: LD_VAR 0 3
24838: PUSH
24839: LD_INT 3
24841: ARRAY
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: PUSH
24847: LD_INT 21
24849: PUSH
24850: LD_INT 2
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 2
24859: PUSH
24860: LD_INT 34
24862: PUSH
24863: LD_INT 13
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 34
24872: PUSH
24873: LD_INT 88
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 34
24882: PUSH
24883: LD_INT 52
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: LIST
24900: PPUSH
24901: CALL_OW 69
24905: PUSH
24906: LD_VAR 0 3
24910: PUSH
24911: LD_INT 15
24913: ARRAY
24914: PUSH
24915: LD_INT 2
24917: ARRAY
24918: LESS
24919: IFFALSE 25130
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24921: LD_ADDR_VAR 0 5
24925: PUSH
24926: DOUBLE
24927: LD_INT 1
24929: DEC
24930: ST_TO_ADDR
24931: LD_VAR 0 3
24935: PUSH
24936: LD_INT 15
24938: ARRAY
24939: PUSH
24940: LD_INT 2
24942: ARRAY
24943: PUSH
24944: LD_INT 22
24946: PUSH
24947: LD_VAR 0 3
24951: PUSH
24952: LD_INT 3
24954: ARRAY
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: LD_INT 34
24975: PUSH
24976: LD_INT 13
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 34
24985: PUSH
24986: LD_INT 88
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 34
24995: PUSH
24996: LD_INT 52
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: PPUSH
25014: CALL_OW 69
25018: MINUS
25019: PUSH
25020: FOR_TO
25021: IFFALSE 25128
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25023: LD_VAR 0 4
25027: PUSH
25028: LD_INT 0
25030: PPUSH
25031: LD_VAR 0 4
25035: PPUSH
25036: CALL_OW 12
25040: ARRAY
25041: PPUSH
25042: LD_INT 3
25044: PUSH
25045: EMPTY
25046: LIST
25047: PUSH
25048: LD_INT 13
25050: PUSH
25051: EMPTY
25052: LIST
25053: PUSH
25054: LD_INT 22
25056: PUSH
25057: EMPTY
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: LIST
25064: PUSH
25065: LD_VAR 0 3
25069: PUSH
25070: LD_INT 4
25072: ARRAY
25073: ARRAY
25074: PUSH
25075: LD_INT 1
25077: ARRAY
25078: PPUSH
25079: LD_INT 1
25081: PPUSH
25082: LD_INT 2
25084: PPUSH
25085: LD_INT 13
25087: PUSH
25088: EMPTY
25089: LIST
25090: PUSH
25091: LD_INT 88
25093: PUSH
25094: EMPTY
25095: LIST
25096: PUSH
25097: LD_INT 52
25099: PUSH
25100: EMPTY
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: PUSH
25108: LD_VAR 0 3
25112: PUSH
25113: LD_INT 4
25115: ARRAY
25116: ARRAY
25117: PUSH
25118: LD_INT 1
25120: ARRAY
25121: PPUSH
25122: CALL_OW 185
25126: GO 25020
25128: POP
25129: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25130: LD_INT 22
25132: PUSH
25133: LD_VAR 0 3
25137: PUSH
25138: LD_INT 3
25140: ARRAY
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 21
25148: PUSH
25149: LD_INT 2
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: LD_INT 34
25161: PUSH
25162: LD_INT 14
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 14
25171: PUSH
25172: EMPTY
25173: LIST
25174: PUSH
25175: LD_INT 34
25177: PUSH
25178: LD_INT 53
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: PUSH
25201: LD_VAR 0 3
25205: PUSH
25206: LD_INT 15
25208: ARRAY
25209: PUSH
25210: LD_INT 3
25212: ARRAY
25213: LESS
25214: IFFALSE 25421
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25216: LD_ADDR_VAR 0 5
25220: PUSH
25221: DOUBLE
25222: LD_INT 1
25224: DEC
25225: ST_TO_ADDR
25226: LD_VAR 0 3
25230: PUSH
25231: LD_INT 15
25233: ARRAY
25234: PUSH
25235: LD_INT 3
25237: ARRAY
25238: PUSH
25239: LD_INT 22
25241: PUSH
25242: LD_VAR 0 3
25246: PUSH
25247: LD_INT 3
25249: ARRAY
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 21
25257: PUSH
25258: LD_INT 2
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: LD_INT 34
25270: PUSH
25271: LD_INT 14
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 14
25280: PUSH
25281: EMPTY
25282: LIST
25283: PUSH
25284: LD_INT 34
25286: PUSH
25287: LD_INT 53
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: PPUSH
25305: CALL_OW 69
25309: MINUS
25310: PUSH
25311: FOR_TO
25312: IFFALSE 25419
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25314: LD_VAR 0 4
25318: PUSH
25319: LD_INT 0
25321: PPUSH
25322: LD_VAR 0 4
25326: PPUSH
25327: CALL_OW 12
25331: ARRAY
25332: PPUSH
25333: LD_INT 4
25335: PUSH
25336: EMPTY
25337: LIST
25338: PUSH
25339: LD_INT 13
25341: PUSH
25342: EMPTY
25343: LIST
25344: PUSH
25345: LD_INT 24
25347: PUSH
25348: EMPTY
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: PUSH
25356: LD_VAR 0 3
25360: PUSH
25361: LD_INT 4
25363: ARRAY
25364: ARRAY
25365: PUSH
25366: LD_INT 1
25368: ARRAY
25369: PPUSH
25370: LD_INT 1
25372: PPUSH
25373: LD_INT 1
25375: PPUSH
25376: LD_INT 14
25378: PUSH
25379: EMPTY
25380: LIST
25381: PUSH
25382: LD_INT 14
25384: PUSH
25385: EMPTY
25386: LIST
25387: PUSH
25388: LD_INT 53
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: PUSH
25399: LD_VAR 0 3
25403: PUSH
25404: LD_INT 4
25406: ARRAY
25407: ARRAY
25408: PUSH
25409: LD_INT 1
25411: ARRAY
25412: PPUSH
25413: CALL_OW 185
25417: GO 25311
25419: POP
25420: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25421: LD_VAR 0 3
25425: PUSH
25426: LD_INT 17
25428: ARRAY
25429: PUSH
25430: LD_INT 2
25432: ARRAY
25433: PUSH
25434: LD_VAR 0 3
25438: PPUSH
25439: CALL 19558 0 1
25443: MINUS
25444: IFFALSE 25605
// begin for i := 1 to aiData [ 14 ] do
25446: LD_ADDR_VAR 0 5
25450: PUSH
25451: DOUBLE
25452: LD_INT 1
25454: DEC
25455: ST_TO_ADDR
25456: LD_VAR 0 3
25460: PUSH
25461: LD_INT 14
25463: ARRAY
25464: PUSH
25465: FOR_TO
25466: IFFALSE 25603
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25468: LD_ADDR_VAR 0 6
25472: PUSH
25473: LD_VAR 0 3
25477: PUSH
25478: LD_INT 14
25480: ARRAY
25481: PUSH
25482: LD_VAR 0 5
25486: ARRAY
25487: PUSH
25488: LD_INT 4
25490: ARRAY
25491: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25492: LD_ADDR_VAR 0 7
25496: PUSH
25497: LD_VAR 0 6
25501: PUSH
25502: LD_INT 1
25504: PPUSH
25505: LD_VAR 0 6
25509: PPUSH
25510: CALL_OW 12
25514: ARRAY
25515: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25516: LD_VAR 0 4
25520: PUSH
25521: LD_INT 0
25523: PPUSH
25524: LD_VAR 0 4
25528: PPUSH
25529: CALL_OW 12
25533: ARRAY
25534: PPUSH
25535: LD_VAR 0 3
25539: PUSH
25540: LD_INT 14
25542: ARRAY
25543: PUSH
25544: LD_VAR 0 5
25548: ARRAY
25549: PUSH
25550: LD_INT 1
25552: ARRAY
25553: PPUSH
25554: LD_VAR 0 3
25558: PUSH
25559: LD_INT 14
25561: ARRAY
25562: PUSH
25563: LD_VAR 0 5
25567: ARRAY
25568: PUSH
25569: LD_INT 2
25571: ARRAY
25572: PPUSH
25573: LD_VAR 0 3
25577: PUSH
25578: LD_INT 14
25580: ARRAY
25581: PUSH
25582: LD_VAR 0 5
25586: ARRAY
25587: PUSH
25588: LD_INT 3
25590: ARRAY
25591: PPUSH
25592: LD_VAR 0 7
25596: PPUSH
25597: CALL_OW 185
// end ;
25601: GO 25465
25603: POP
25604: POP
// end ; end ;
25605: LD_VAR 0 2
25609: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25610: LD_INT 0
25612: PPUSH
25613: PPUSH
25614: PPUSH
25615: PPUSH
25616: PPUSH
25617: PPUSH
25618: PPUSH
25619: PPUSH
25620: PPUSH
25621: PPUSH
25622: PPUSH
25623: PPUSH
25624: PPUSH
25625: PPUSH
// for unit in units do
25626: LD_ADDR_VAR 0 6
25630: PUSH
25631: LD_VAR 0 2
25635: PUSH
25636: FOR_IN
25637: IFFALSE 25653
// SetTag ( unit , 0 ) ;
25639: LD_VAR 0 6
25643: PPUSH
25644: LD_INT 0
25646: PPUSH
25647: CALL_OW 109
25651: GO 25636
25653: POP
25654: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25655: LD_ADDR_VAR 0 13
25659: PUSH
25660: LD_VAR 0 3
25664: PUSH
25665: LD_VAR 0 3
25669: ARRAY
25670: PUSH
25671: LD_INT 1
25673: ARRAY
25674: PUSH
25675: LD_VAR 0 3
25679: PUSH
25680: LD_VAR 0 3
25684: ARRAY
25685: PUSH
25686: LD_INT 2
25688: ARRAY
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25694: LD_ADDR_VAR 0 7
25698: PUSH
25699: LD_VAR 0 2
25703: PPUSH
25704: LD_INT 50
25706: PUSH
25707: EMPTY
25708: LIST
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: LD_INT 59
25715: PUSH
25716: EMPTY
25717: LIST
25718: PUSH
25719: LD_INT 25
25721: PUSH
25722: LD_INT 1
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 25
25731: PUSH
25732: LD_INT 8
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 21
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: LIST
25753: LIST
25754: LIST
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PPUSH
25760: CALL_OW 72
25764: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25765: LD_ADDR_VAR 0 9
25769: PUSH
25770: LD_VAR 0 2
25774: PPUSH
25775: LD_INT 50
25777: PUSH
25778: EMPTY
25779: LIST
25780: PUSH
25781: LD_INT 25
25783: PUSH
25784: LD_INT 4
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PPUSH
25795: CALL_OW 72
25799: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25800: LD_ADDR_VAR 0 10
25804: PUSH
25805: LD_VAR 0 2
25809: PPUSH
25810: LD_INT 21
25812: PUSH
25813: LD_INT 1
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 3
25822: PUSH
25823: LD_INT 24
25825: PUSH
25826: LD_INT 1000
25828: PUSH
25829: EMPTY
25830: LIST
25831: LIST
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PPUSH
25841: CALL_OW 72
25845: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25846: LD_ADDR_VAR 0 11
25850: PUSH
25851: LD_INT 21
25853: PPUSH
25854: CALL_OW 435
25858: ST_TO_ADDR
// for unit in attackUnits do
25859: LD_ADDR_VAR 0 6
25863: PUSH
25864: LD_VAR 0 7
25868: PUSH
25869: FOR_IN
25870: IFFALSE 26619
// begin if path then
25872: LD_VAR 0 3
25876: IFFALSE 26608
// begin i = 1 ;
25878: LD_ADDR_VAR 0 5
25882: PUSH
25883: LD_INT 1
25885: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25886: LD_ADDR_VAR 0 11
25890: PUSH
25891: LD_INT 21
25893: PPUSH
25894: CALL_OW 435
25898: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25899: LD_ADDR_VAR 0 14
25903: PUSH
25904: LD_INT 81
25906: PUSH
25907: LD_VAR 0 6
25911: PPUSH
25912: CALL_OW 255
25916: PUSH
25917: EMPTY
25918: LIST
25919: LIST
25920: PPUSH
25921: CALL_OW 69
25925: PPUSH
25926: LD_VAR 0 6
25930: PPUSH
25931: CALL_OW 74
25935: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25936: LD_ADDR_VAR 0 15
25940: PUSH
25941: LD_VAR 0 11
25945: PPUSH
25946: LD_VAR 0 6
25950: PPUSH
25951: CALL_OW 250
25955: PPUSH
25956: LD_VAR 0 6
25960: PPUSH
25961: CALL_OW 251
25965: PPUSH
25966: CALL_OW 439
25970: ST_TO_ADDR
// if damageUnits and medics then
25971: LD_VAR 0 10
25975: PUSH
25976: LD_VAR 0 9
25980: AND
25981: IFFALSE 26003
// ComHeal ( medics , damageUnits [ 1 ] ) else
25983: LD_VAR 0 9
25987: PPUSH
25988: LD_VAR 0 10
25992: PUSH
25993: LD_INT 1
25995: ARRAY
25996: PPUSH
25997: CALL_OW 128
26001: GO 26046
// if medics then
26003: LD_VAR 0 9
26007: IFFALSE 26046
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
26009: LD_VAR 0 9
26013: PPUSH
26014: LD_VAR 0 7
26018: PUSH
26019: LD_INT 1
26021: ARRAY
26022: PPUSH
26023: CALL_OW 250
26027: PPUSH
26028: LD_VAR 0 7
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: CALL_OW 251
26041: PPUSH
26042: CALL_OW 111
// if not HasTask ( unit ) then
26046: LD_VAR 0 6
26050: PPUSH
26051: CALL_OW 314
26055: NOT
26056: IFFALSE 26295
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26058: LD_ADDR_VAR 0 15
26062: PUSH
26063: LD_VAR 0 11
26067: PPUSH
26068: LD_VAR 0 6
26072: PPUSH
26073: CALL_OW 250
26077: PPUSH
26078: LD_VAR 0 6
26082: PPUSH
26083: CALL_OW 251
26087: PPUSH
26088: CALL_OW 439
26092: ST_TO_ADDR
// if i > crates then
26093: LD_VAR 0 5
26097: PUSH
26098: LD_VAR 0 11
26102: GREATER
26103: IFFALSE 26113
// i = 1 ;
26105: LD_ADDR_VAR 0 5
26109: PUSH
26110: LD_INT 1
26112: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26113: LD_VAR 0 14
26117: PUSH
26118: LD_VAR 0 15
26122: AND
26123: IFFALSE 26238
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26125: LD_VAR 0 6
26129: PPUSH
26130: LD_VAR 0 14
26134: PPUSH
26135: CALL_OW 250
26139: PPUSH
26140: LD_VAR 0 14
26144: PPUSH
26145: CALL_OW 251
26149: PPUSH
26150: CALL_OW 297
26154: PUSH
26155: LD_VAR 0 6
26159: PPUSH
26160: LD_VAR 0 15
26164: PUSH
26165: LD_INT 1
26167: ARRAY
26168: PPUSH
26169: LD_VAR 0 15
26173: PUSH
26174: LD_INT 2
26176: ARRAY
26177: PPUSH
26178: CALL_OW 297
26182: LESS
26183: IFFALSE 26201
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26185: LD_VAR 0 7
26189: PPUSH
26190: LD_VAR 0 14
26194: PPUSH
26195: CALL_OW 115
26199: GO 26236
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26201: LD_VAR 0 7
26205: PPUSH
26206: LD_VAR 0 11
26210: PUSH
26211: LD_VAR 0 5
26215: ARRAY
26216: PPUSH
26217: LD_VAR 0 11
26221: PUSH
26222: LD_VAR 0 5
26226: PUSH
26227: LD_INT 1
26229: PLUS
26230: ARRAY
26231: PPUSH
26232: CALL_OW 116
// end else
26236: GO 26295
// if crates then
26238: LD_VAR 0 11
26242: IFFALSE 26281
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26244: LD_VAR 0 7
26248: PPUSH
26249: LD_VAR 0 11
26253: PUSH
26254: LD_VAR 0 5
26258: ARRAY
26259: PPUSH
26260: LD_VAR 0 11
26264: PUSH
26265: LD_VAR 0 5
26269: PUSH
26270: LD_INT 1
26272: PLUS
26273: ARRAY
26274: PPUSH
26275: CALL_OW 116
26279: GO 26295
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26281: LD_VAR 0 7
26285: PPUSH
26286: LD_VAR 0 14
26290: PPUSH
26291: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26295: LD_INT 35
26297: PPUSH
26298: CALL_OW 67
// if path then
26302: LD_VAR 0 3
26306: IFFALSE 26382
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26308: LD_ADDR_VAR 0 16
26312: PUSH
26313: LD_VAR 0 6
26317: PPUSH
26318: LD_VAR 0 3
26322: PPUSH
26323: CALL 26837 0 2
26327: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26328: LD_VAR 0 7
26332: PPUSH
26333: LD_VAR 0 16
26337: PUSH
26338: LD_INT 1
26340: ARRAY
26341: PPUSH
26342: LD_VAR 0 16
26346: PUSH
26347: LD_INT 2
26349: ARRAY
26350: PPUSH
26351: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 16
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PPUSH
26369: LD_VAR 0 16
26373: PUSH
26374: LD_INT 2
26376: ARRAY
26377: PPUSH
26378: CALL_OW 114
// end ; i = i + 2 ;
26382: LD_ADDR_VAR 0 5
26386: PUSH
26387: LD_VAR 0 5
26391: PUSH
26392: LD_INT 2
26394: PLUS
26395: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26396: LD_VAR 0 1
26400: PPUSH
26401: LD_VAR 0 16
26405: PUSH
26406: LD_INT 1
26408: ARRAY
26409: PPUSH
26410: LD_VAR 0 16
26414: PUSH
26415: LD_INT 2
26417: ARRAY
26418: PPUSH
26419: CALL_OW 297
26423: PUSH
26424: LD_INT 6
26426: LESSEQUAL
26427: IFFALSE 25886
// repeat wait ( 0 0$1 ) ;
26429: LD_INT 35
26431: PPUSH
26432: CALL_OW 67
// nearUnitsCounter = 0 ;
26436: LD_ADDR_VAR 0 12
26440: PUSH
26441: LD_INT 0
26443: ST_TO_ADDR
// for attackUnit in attackUnits do
26444: LD_ADDR_VAR 0 8
26448: PUSH
26449: LD_VAR 0 7
26453: PUSH
26454: FOR_IN
26455: IFFALSE 26493
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26457: LD_VAR 0 6
26461: PPUSH
26462: LD_VAR 0 1
26466: PPUSH
26467: CALL_OW 296
26471: PUSH
26472: LD_INT 7
26474: LESSEQUAL
26475: IFFALSE 26491
// nearUnitsCounter = nearUnitsCounter + 1 ;
26477: LD_ADDR_VAR 0 12
26481: PUSH
26482: LD_VAR 0 12
26486: PUSH
26487: LD_INT 1
26489: PLUS
26490: ST_TO_ADDR
26491: GO 26454
26493: POP
26494: POP
// until nearUnitsCounter = attackUnits ;
26495: LD_VAR 0 12
26499: PUSH
26500: LD_VAR 0 7
26504: EQUAL
26505: IFFALSE 26429
// for i := 1 to path do
26507: LD_ADDR_VAR 0 5
26511: PUSH
26512: DOUBLE
26513: LD_INT 1
26515: DEC
26516: ST_TO_ADDR
26517: LD_VAR 0 3
26521: PUSH
26522: FOR_TO
26523: IFFALSE 26606
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26525: LD_VAR 0 3
26529: PUSH
26530: LD_VAR 0 5
26534: ARRAY
26535: PUSH
26536: LD_INT 1
26538: ARRAY
26539: PUSH
26540: LD_VAR 0 16
26544: PUSH
26545: LD_INT 1
26547: ARRAY
26548: EQUAL
26549: PUSH
26550: LD_VAR 0 3
26554: PUSH
26555: LD_VAR 0 5
26559: ARRAY
26560: PUSH
26561: LD_INT 2
26563: ARRAY
26564: PUSH
26565: LD_VAR 0 16
26569: PUSH
26570: LD_INT 2
26572: ARRAY
26573: EQUAL
26574: AND
26575: IFFALSE 26604
// begin path = path diff [ path [ i ] ] ;
26577: LD_ADDR_VAR 0 3
26581: PUSH
26582: LD_VAR 0 3
26586: PUSH
26587: LD_VAR 0 3
26591: PUSH
26592: LD_VAR 0 5
26596: ARRAY
26597: PUSH
26598: EMPTY
26599: LIST
26600: DIFF
26601: ST_TO_ADDR
// break ;
26602: GO 26606
// end ;
26604: GO 26522
26606: POP
26607: POP
// end ; if not path then
26608: LD_VAR 0 3
26612: NOT
26613: IFFALSE 26617
// break ;
26615: GO 26619
// end ;
26617: GO 25869
26619: POP
26620: POP
// repeat unitsReachPathEnd = 0 ;
26621: LD_ADDR_VAR 0 17
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
// for attackUnit in attackUnits do
26629: LD_ADDR_VAR 0 8
26633: PUSH
26634: LD_VAR 0 7
26638: PUSH
26639: FOR_IN
26640: IFFALSE 26778
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26642: LD_VAR 0 8
26646: PPUSH
26647: LD_VAR 0 13
26651: PUSH
26652: LD_INT 1
26654: ARRAY
26655: PPUSH
26656: LD_VAR 0 13
26660: PUSH
26661: LD_INT 2
26663: ARRAY
26664: PPUSH
26665: CALL_OW 297
26669: PUSH
26670: LD_INT 7
26672: LESS
26673: NOT
26674: PUSH
26675: LD_VAR 0 8
26679: PPUSH
26680: CALL_OW 110
26684: PUSH
26685: LD_INT 0
26687: EQUAL
26688: AND
26689: IFFALSE 26720
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26691: LD_VAR 0 8
26695: PPUSH
26696: LD_VAR 0 13
26700: PUSH
26701: LD_INT 1
26703: ARRAY
26704: PPUSH
26705: LD_VAR 0 13
26709: PUSH
26710: LD_INT 2
26712: ARRAY
26713: PPUSH
26714: CALL_OW 111
26718: GO 26747
// if GetTag ( attackUnit ) = 0 then
26720: LD_VAR 0 8
26724: PPUSH
26725: CALL_OW 110
26729: PUSH
26730: LD_INT 0
26732: EQUAL
26733: IFFALSE 26747
// SetTag ( attackUnit , 1 ) ;
26735: LD_VAR 0 8
26739: PPUSH
26740: LD_INT 1
26742: PPUSH
26743: CALL_OW 109
// if GetTag ( unit ) = 1 then
26747: LD_VAR 0 6
26751: PPUSH
26752: CALL_OW 110
26756: PUSH
26757: LD_INT 1
26759: EQUAL
26760: IFFALSE 26776
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26762: LD_ADDR_VAR 0 17
26766: PUSH
26767: LD_VAR 0 17
26771: PUSH
26772: LD_INT 1
26774: PLUS
26775: ST_TO_ADDR
// end ;
26776: GO 26639
26778: POP
26779: POP
// wait ( 0 0$1 ) ;
26780: LD_INT 35
26782: PPUSH
26783: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26787: LD_VAR 0 17
26791: PUSH
26792: LD_VAR 0 7
26796: PUSH
26797: LD_INT 3
26799: MINUS
26800: GREATER
26801: IFFALSE 26621
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26803: LD_VAR 0 2
26807: PPUSH
26808: LD_INT 50
26810: PUSH
26811: EMPTY
26812: LIST
26813: PPUSH
26814: CALL_OW 72
26818: NOT
26819: PUSH
26820: LD_VAR 0 1
26824: PPUSH
26825: CALL_OW 303
26829: OR
26830: IFFALSE 25694
// end ;
26832: LD_VAR 0 4
26836: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26837: LD_INT 0
26839: PPUSH
26840: PPUSH
26841: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26842: LD_ADDR_VAR 0 5
26846: PUSH
26847: LD_VAR 0 2
26851: PUSH
26852: LD_INT 1
26854: ARRAY
26855: PUSH
26856: LD_INT 1
26858: ARRAY
26859: PUSH
26860: LD_VAR 0 2
26864: PUSH
26865: LD_INT 1
26867: ARRAY
26868: PUSH
26869: LD_INT 2
26871: ARRAY
26872: PUSH
26873: EMPTY
26874: LIST
26875: LIST
26876: ST_TO_ADDR
// for i := 2 to path do
26877: LD_ADDR_VAR 0 4
26881: PUSH
26882: DOUBLE
26883: LD_INT 2
26885: DEC
26886: ST_TO_ADDR
26887: LD_VAR 0 2
26891: PUSH
26892: FOR_TO
26893: IFFALSE 27033
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26895: LD_VAR 0 1
26899: PPUSH
26900: LD_VAR 0 2
26904: PUSH
26905: LD_VAR 0 4
26909: ARRAY
26910: PUSH
26911: LD_INT 1
26913: ARRAY
26914: PPUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_VAR 0 4
26924: ARRAY
26925: PUSH
26926: LD_INT 2
26928: ARRAY
26929: PPUSH
26930: CALL_OW 297
26934: PUSH
26935: LD_VAR 0 1
26939: PPUSH
26940: LD_VAR 0 5
26944: PUSH
26945: LD_INT 1
26947: ARRAY
26948: PPUSH
26949: LD_VAR 0 5
26953: PUSH
26954: LD_INT 2
26956: ARRAY
26957: PPUSH
26958: CALL_OW 297
26962: LESS
26963: IFFALSE 27031
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26965: LD_ADDR_VAR 0 5
26969: PUSH
26970: LD_VAR 0 5
26974: PPUSH
26975: LD_INT 1
26977: PPUSH
26978: LD_VAR 0 2
26982: PUSH
26983: LD_VAR 0 4
26987: ARRAY
26988: PUSH
26989: LD_INT 1
26991: ARRAY
26992: PPUSH
26993: CALL_OW 1
26997: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
26998: LD_ADDR_VAR 0 5
27002: PUSH
27003: LD_VAR 0 5
27007: PPUSH
27008: LD_INT 2
27010: PPUSH
27011: LD_VAR 0 2
27015: PUSH
27016: LD_VAR 0 4
27020: ARRAY
27021: PUSH
27022: LD_INT 2
27024: ARRAY
27025: PPUSH
27026: CALL_OW 1
27030: ST_TO_ADDR
// end ; end ;
27031: GO 26892
27033: POP
27034: POP
// result = nearPosition ;
27035: LD_ADDR_VAR 0 3
27039: PUSH
27040: LD_VAR 0 5
27044: ST_TO_ADDR
// end ;
27045: LD_VAR 0 3
27049: RET
// function ForceResetTaskList ( unit ) ; begin
27050: LD_INT 0
27052: PPUSH
// if GetTaskList ( unit ) then
27053: LD_VAR 0 1
27057: PPUSH
27058: CALL_OW 437
27062: IFFALSE 27098
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 437
27073: PUSH
27074: LD_INT 1
27076: ARRAY
27077: PUSH
27078: LD_INT 1
27080: ARRAY
27081: PUSH
27082: LD_STRING e
27084: EQUAL
27085: IFFALSE 27098
// SetTaskList ( unit , [ ] ) ;
27087: LD_VAR 0 1
27091: PPUSH
27092: EMPTY
27093: PPUSH
27094: CALL_OW 446
// end ;
27098: LD_VAR 0 2
27102: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27103: LD_INT 0
27105: PPUSH
// if IsInUnit ( unit ) then
27106: LD_VAR 0 1
27110: PPUSH
27111: CALL_OW 310
27115: IFFALSE 27126
// ComExitBuilding ( unit ) ;
27117: LD_VAR 0 1
27121: PPUSH
27122: CALL_OW 122
// end ; end_of_file
27126: LD_VAR 0 2
27130: RET
// every 0 0$1 trigger enableCounter do
27131: LD_EXP 18
27135: IFFALSE 27172
27137: GO 27139
27139: DISABLE
// begin enable ;
27140: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27141: LD_ADDR_OWVAR 47
27145: PUSH
27146: LD_STRING #Am01-1
27148: PUSH
27149: LD_EXP 19
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27158: LD_ADDR_EXP 19
27162: PUSH
27163: LD_EXP 19
27167: PUSH
27168: LD_INT 35
27170: PLUS
27171: ST_TO_ADDR
// end ; end_of_file end_of_file
27172: END
// every 0 0$01 do var timer ;
27173: GO 27175
27175: DISABLE
27176: LD_INT 0
27178: PPUSH
// begin timer := 1 1$30 ;
27179: LD_ADDR_VAR 0 1
27183: PUSH
27184: LD_INT 3150
27186: ST_TO_ADDR
// repeat wait ( timer ) ;
27187: LD_VAR 0 1
27191: PPUSH
27192: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27196: LD_EXP 20
27200: PUSH
27201: LD_INT 6
27203: GREATEREQUAL
27204: PUSH
27205: LD_EXP 20
27209: PUSH
27210: LD_INT 12
27212: LESS
27213: AND
27214: IFFALSE 27230
// timer := timer + 0 0$3 ;
27216: LD_ADDR_VAR 0 1
27220: PUSH
27221: LD_VAR 0 1
27225: PUSH
27226: LD_INT 105
27228: PLUS
27229: ST_TO_ADDR
// if cratesSpawned >= 12 then
27230: LD_EXP 20
27234: PUSH
27235: LD_INT 12
27237: GREATEREQUAL
27238: IFFALSE 27254
// timer := timer + 0 0$9 ;
27240: LD_ADDR_VAR 0 1
27244: PUSH
27245: LD_VAR 0 1
27249: PUSH
27250: LD_INT 315
27252: PLUS
27253: ST_TO_ADDR
// if timer > 3 3$00 then
27254: LD_VAR 0 1
27258: PUSH
27259: LD_INT 6300
27261: GREATER
27262: IFFALSE 27272
// timer := 0 0$50 ;
27264: LD_ADDR_VAR 0 1
27268: PUSH
27269: LD_INT 1750
27271: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27272: LD_INT 3
27274: PPUSH
27275: LD_INT 5
27277: PPUSH
27278: CALL_OW 12
27282: PPUSH
27283: LD_INT 22
27285: PPUSH
27286: LD_INT 1
27288: PPUSH
27289: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27293: LD_ADDR_EXP 20
27297: PUSH
27298: LD_EXP 20
27302: PUSH
27303: LD_INT 1
27305: PLUS
27306: ST_TO_ADDR
// until false ;
27307: LD_INT 0
27309: IFFALSE 27187
// end ; end_of_file
27311: PPOPN 1
27313: END
// export function Nef_PrepareNature ; var i , un ; begin
27314: LD_INT 0
27316: PPUSH
27317: PPUSH
27318: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27319: LD_ADDR_VAR 0 2
27323: PUSH
27324: DOUBLE
27325: LD_INT 1
27327: DEC
27328: ST_TO_ADDR
27329: LD_EXP 21
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PUSH
27338: FOR_TO
27339: IFFALSE 27449
// begin uc_side = 0 ;
27341: LD_ADDR_OWVAR 20
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// uc_nation = nation_nature ;
27349: LD_ADDR_OWVAR 21
27353: PUSH
27354: LD_INT 0
27356: ST_TO_ADDR
// hc_class = class_apeman ;
27357: LD_ADDR_OWVAR 28
27361: PUSH
27362: LD_INT 12
27364: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27365: LD_ADDR_OWVAR 31
27369: PUSH
27370: LD_EXP 22
27374: PUSH
27375: LD_INT 1
27377: ARRAY
27378: PUSH
27379: LD_EXP 22
27383: PUSH
27384: LD_INT 2
27386: ARRAY
27387: PUSH
27388: LD_EXP 22
27392: PUSH
27393: LD_INT 3
27395: ARRAY
27396: PUSH
27397: LD_EXP 22
27401: PUSH
27402: LD_INT 4
27404: ARRAY
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27412: LD_ADDR_OWVAR 35
27416: PUSH
27417: LD_EXP 23
27421: ST_TO_ADDR
// un = CreateHuman ;
27422: LD_ADDR_VAR 0 3
27426: PUSH
27427: CALL_OW 44
27431: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27432: LD_VAR 0 3
27436: PPUSH
27437: LD_INT 23
27439: PPUSH
27440: LD_INT 0
27442: PPUSH
27443: CALL_OW 49
// end ;
27447: GO 27338
27449: POP
27450: POP
// for i := 1 to animalsAmount [ 2 ] do
27451: LD_ADDR_VAR 0 2
27455: PUSH
27456: DOUBLE
27457: LD_INT 1
27459: DEC
27460: ST_TO_ADDR
27461: LD_EXP 21
27465: PUSH
27466: LD_INT 2
27468: ARRAY
27469: PUSH
27470: FOR_TO
27471: IFFALSE 27581
// begin uc_side = 0 ;
27473: LD_ADDR_OWVAR 20
27477: PUSH
27478: LD_INT 0
27480: ST_TO_ADDR
// uc_nation = nation_nature ;
27481: LD_ADDR_OWVAR 21
27485: PUSH
27486: LD_INT 0
27488: ST_TO_ADDR
// hc_class = class_phororhacos ;
27489: LD_ADDR_OWVAR 28
27493: PUSH
27494: LD_INT 18
27496: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27497: LD_ADDR_OWVAR 31
27501: PUSH
27502: LD_EXP 22
27506: PUSH
27507: LD_INT 1
27509: ARRAY
27510: PUSH
27511: LD_EXP 22
27515: PUSH
27516: LD_INT 2
27518: ARRAY
27519: PUSH
27520: LD_EXP 22
27524: PUSH
27525: LD_INT 3
27527: ARRAY
27528: PUSH
27529: LD_EXP 22
27533: PUSH
27534: LD_INT 4
27536: ARRAY
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27544: LD_ADDR_OWVAR 35
27548: PUSH
27549: LD_EXP 23
27553: ST_TO_ADDR
// un = CreateHuman ;
27554: LD_ADDR_VAR 0 3
27558: PUSH
27559: CALL_OW 44
27563: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27564: LD_VAR 0 3
27568: PPUSH
27569: LD_INT 23
27571: PPUSH
27572: LD_INT 0
27574: PPUSH
27575: CALL_OW 49
// end ;
27579: GO 27470
27581: POP
27582: POP
// for i := 1 to animalsAmount [ 3 ] do
27583: LD_ADDR_VAR 0 2
27587: PUSH
27588: DOUBLE
27589: LD_INT 1
27591: DEC
27592: ST_TO_ADDR
27593: LD_EXP 21
27597: PUSH
27598: LD_INT 3
27600: ARRAY
27601: PUSH
27602: FOR_TO
27603: IFFALSE 27713
// begin uc_side = 0 ;
27605: LD_ADDR_OWVAR 20
27609: PUSH
27610: LD_INT 0
27612: ST_TO_ADDR
// uc_nation = nation_nature ;
27613: LD_ADDR_OWVAR 21
27617: PUSH
27618: LD_INT 0
27620: ST_TO_ADDR
// hc_class = class_tiger ;
27621: LD_ADDR_OWVAR 28
27625: PUSH
27626: LD_INT 14
27628: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27629: LD_ADDR_OWVAR 31
27633: PUSH
27634: LD_EXP 22
27638: PUSH
27639: LD_INT 1
27641: ARRAY
27642: PUSH
27643: LD_EXP 22
27647: PUSH
27648: LD_INT 2
27650: ARRAY
27651: PUSH
27652: LD_EXP 22
27656: PUSH
27657: LD_INT 3
27659: ARRAY
27660: PUSH
27661: LD_EXP 22
27665: PUSH
27666: LD_INT 4
27668: ARRAY
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27676: LD_ADDR_OWVAR 35
27680: PUSH
27681: LD_EXP 23
27685: ST_TO_ADDR
// un = CreateHuman ;
27686: LD_ADDR_VAR 0 3
27690: PUSH
27691: CALL_OW 44
27695: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27696: LD_VAR 0 3
27700: PPUSH
27701: LD_INT 23
27703: PPUSH
27704: LD_INT 0
27706: PPUSH
27707: CALL_OW 49
// end ;
27711: GO 27602
27713: POP
27714: POP
// for i := 1 to animalsAmount [ 4 ] do
27715: LD_ADDR_VAR 0 2
27719: PUSH
27720: DOUBLE
27721: LD_INT 1
27723: DEC
27724: ST_TO_ADDR
27725: LD_EXP 21
27729: PUSH
27730: LD_INT 4
27732: ARRAY
27733: PUSH
27734: FOR_TO
27735: IFFALSE 27845
// begin uc_side = 0 ;
27737: LD_ADDR_OWVAR 20
27741: PUSH
27742: LD_INT 0
27744: ST_TO_ADDR
// uc_nation = nation_nature ;
27745: LD_ADDR_OWVAR 21
27749: PUSH
27750: LD_INT 0
27752: ST_TO_ADDR
// hc_class = 21 ;
27753: LD_ADDR_OWVAR 28
27757: PUSH
27758: LD_INT 21
27760: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27761: LD_ADDR_OWVAR 31
27765: PUSH
27766: LD_EXP 22
27770: PUSH
27771: LD_INT 1
27773: ARRAY
27774: PUSH
27775: LD_EXP 22
27779: PUSH
27780: LD_INT 2
27782: ARRAY
27783: PUSH
27784: LD_EXP 22
27788: PUSH
27789: LD_INT 3
27791: ARRAY
27792: PUSH
27793: LD_EXP 22
27797: PUSH
27798: LD_INT 4
27800: ARRAY
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27808: LD_ADDR_OWVAR 35
27812: PUSH
27813: LD_EXP 23
27817: ST_TO_ADDR
// un = CreateHuman ;
27818: LD_ADDR_VAR 0 3
27822: PUSH
27823: CALL_OW 44
27827: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27828: LD_VAR 0 3
27832: PPUSH
27833: LD_INT 23
27835: PPUSH
27836: LD_INT 0
27838: PPUSH
27839: CALL_OW 49
// end ;
27843: GO 27734
27845: POP
27846: POP
// for i := 1 to animalsAmount [ 5 ] do
27847: LD_ADDR_VAR 0 2
27851: PUSH
27852: DOUBLE
27853: LD_INT 1
27855: DEC
27856: ST_TO_ADDR
27857: LD_EXP 21
27861: PUSH
27862: LD_INT 5
27864: ARRAY
27865: PUSH
27866: FOR_TO
27867: IFFALSE 27928
// begin uc_side = 0 ;
27869: LD_ADDR_OWVAR 20
27873: PUSH
27874: LD_INT 0
27876: ST_TO_ADDR
// uc_nation = nation_nature ;
27877: LD_ADDR_OWVAR 21
27881: PUSH
27882: LD_INT 0
27884: ST_TO_ADDR
// vc_chassis := 31 ;
27885: LD_ADDR_OWVAR 37
27889: PUSH
27890: LD_INT 31
27892: ST_TO_ADDR
// vc_control := control_rider ;
27893: LD_ADDR_OWVAR 38
27897: PUSH
27898: LD_INT 4
27900: ST_TO_ADDR
// un := CreateVehicle ;
27901: LD_ADDR_VAR 0 3
27905: PUSH
27906: CALL_OW 45
27910: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27911: LD_VAR 0 3
27915: PPUSH
27916: LD_INT 23
27918: PPUSH
27919: LD_INT 0
27921: PPUSH
27922: CALL_OW 49
// end ;
27926: GO 27866
27928: POP
27929: POP
// end ; end_of_file
27930: LD_VAR 0 1
27934: RET
// export globalGameSaveCounter ; every 0 0$1 do
27935: GO 27937
27937: DISABLE
// begin enable ;
27938: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
27939: LD_STRING updateTimer(
27941: PUSH
27942: LD_OWVAR 1
27946: STR
27947: PUSH
27948: LD_STRING );
27950: STR
27951: PPUSH
27952: CALL_OW 559
// end ;
27956: END
// every 0 0$1 do
27957: GO 27959
27959: DISABLE
// begin globalGameSaveCounter := 0 ;
27960: LD_ADDR_EXP 63
27964: PUSH
27965: LD_INT 0
27967: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
27968: LD_STRING setGameSaveCounter(0)
27970: PPUSH
27971: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
27975: LD_STRING initStreamRollete();
27977: PPUSH
27978: CALL_OW 559
// InitStreamMode ;
27982: CALL 29308 0 0
// DefineStreamItems ( false ) ;
27986: LD_INT 0
27988: PPUSH
27989: CALL 29772 0 1
// end ;
27993: END
// export function SOS_MapStart ( ) ; begin
27994: LD_INT 0
27996: PPUSH
// if streamModeActive then
27997: LD_EXP 64
28001: IFFALSE 28010
// DefineStreamItems ( true ) ;
28003: LD_INT 1
28005: PPUSH
28006: CALL 29772 0 1
// UpdateLuaVariables ( ) ;
28010: CALL 28027 0 0
// UpdateFactoryWaypoints ( ) ;
28014: CALL 42641 0 0
// UpdateWarehouseGatheringPoints ( ) ;
28018: CALL 42898 0 0
// end ;
28022: LD_VAR 0 1
28026: RET
// function UpdateLuaVariables ( ) ; begin
28027: LD_INT 0
28029: PPUSH
// if globalGameSaveCounter then
28030: LD_EXP 63
28034: IFFALSE 28068
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
28036: LD_ADDR_EXP 63
28040: PUSH
28041: LD_EXP 63
28045: PPUSH
28046: CALL 82419 0 1
28050: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
28051: LD_STRING setGameSaveCounter(
28053: PUSH
28054: LD_EXP 63
28058: STR
28059: PUSH
28060: LD_STRING )
28062: STR
28063: PPUSH
28064: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
28068: LD_STRING setGameDifficulty(
28070: PUSH
28071: LD_OWVAR 67
28075: STR
28076: PUSH
28077: LD_STRING )
28079: STR
28080: PPUSH
28081: CALL_OW 559
// end ;
28085: LD_VAR 0 1
28089: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28090: LD_INT 0
28092: PPUSH
// if p2 = stream_mode then
28093: LD_VAR 0 2
28097: PUSH
28098: LD_INT 100
28100: EQUAL
28101: IFFALSE 29104
// begin if not StreamModeActive then
28103: LD_EXP 64
28107: NOT
28108: IFFALSE 28118
// StreamModeActive := true ;
28110: LD_ADDR_EXP 64
28114: PUSH
28115: LD_INT 1
28117: ST_TO_ADDR
// if p3 = 0 then
28118: LD_VAR 0 3
28122: PUSH
28123: LD_INT 0
28125: EQUAL
28126: IFFALSE 28132
// InitStreamMode ;
28128: CALL 29308 0 0
// if p3 = 1 then
28132: LD_VAR 0 3
28136: PUSH
28137: LD_INT 1
28139: EQUAL
28140: IFFALSE 28150
// sRocket := true ;
28142: LD_ADDR_EXP 69
28146: PUSH
28147: LD_INT 1
28149: ST_TO_ADDR
// if p3 = 2 then
28150: LD_VAR 0 3
28154: PUSH
28155: LD_INT 2
28157: EQUAL
28158: IFFALSE 28168
// sSpeed := true ;
28160: LD_ADDR_EXP 68
28164: PUSH
28165: LD_INT 1
28167: ST_TO_ADDR
// if p3 = 3 then
28168: LD_VAR 0 3
28172: PUSH
28173: LD_INT 3
28175: EQUAL
28176: IFFALSE 28186
// sEngine := true ;
28178: LD_ADDR_EXP 70
28182: PUSH
28183: LD_INT 1
28185: ST_TO_ADDR
// if p3 = 4 then
28186: LD_VAR 0 3
28190: PUSH
28191: LD_INT 4
28193: EQUAL
28194: IFFALSE 28204
// sSpec := true ;
28196: LD_ADDR_EXP 67
28200: PUSH
28201: LD_INT 1
28203: ST_TO_ADDR
// if p3 = 5 then
28204: LD_VAR 0 3
28208: PUSH
28209: LD_INT 5
28211: EQUAL
28212: IFFALSE 28222
// sLevel := true ;
28214: LD_ADDR_EXP 71
28218: PUSH
28219: LD_INT 1
28221: ST_TO_ADDR
// if p3 = 6 then
28222: LD_VAR 0 3
28226: PUSH
28227: LD_INT 6
28229: EQUAL
28230: IFFALSE 28240
// sArmoury := true ;
28232: LD_ADDR_EXP 72
28236: PUSH
28237: LD_INT 1
28239: ST_TO_ADDR
// if p3 = 7 then
28240: LD_VAR 0 3
28244: PUSH
28245: LD_INT 7
28247: EQUAL
28248: IFFALSE 28258
// sRadar := true ;
28250: LD_ADDR_EXP 73
28254: PUSH
28255: LD_INT 1
28257: ST_TO_ADDR
// if p3 = 8 then
28258: LD_VAR 0 3
28262: PUSH
28263: LD_INT 8
28265: EQUAL
28266: IFFALSE 28276
// sBunker := true ;
28268: LD_ADDR_EXP 74
28272: PUSH
28273: LD_INT 1
28275: ST_TO_ADDR
// if p3 = 9 then
28276: LD_VAR 0 3
28280: PUSH
28281: LD_INT 9
28283: EQUAL
28284: IFFALSE 28294
// sHack := true ;
28286: LD_ADDR_EXP 75
28290: PUSH
28291: LD_INT 1
28293: ST_TO_ADDR
// if p3 = 10 then
28294: LD_VAR 0 3
28298: PUSH
28299: LD_INT 10
28301: EQUAL
28302: IFFALSE 28312
// sFire := true ;
28304: LD_ADDR_EXP 76
28308: PUSH
28309: LD_INT 1
28311: ST_TO_ADDR
// if p3 = 11 then
28312: LD_VAR 0 3
28316: PUSH
28317: LD_INT 11
28319: EQUAL
28320: IFFALSE 28330
// sRefresh := true ;
28322: LD_ADDR_EXP 77
28326: PUSH
28327: LD_INT 1
28329: ST_TO_ADDR
// if p3 = 12 then
28330: LD_VAR 0 3
28334: PUSH
28335: LD_INT 12
28337: EQUAL
28338: IFFALSE 28348
// sExp := true ;
28340: LD_ADDR_EXP 78
28344: PUSH
28345: LD_INT 1
28347: ST_TO_ADDR
// if p3 = 13 then
28348: LD_VAR 0 3
28352: PUSH
28353: LD_INT 13
28355: EQUAL
28356: IFFALSE 28366
// sDepot := true ;
28358: LD_ADDR_EXP 79
28362: PUSH
28363: LD_INT 1
28365: ST_TO_ADDR
// if p3 = 14 then
28366: LD_VAR 0 3
28370: PUSH
28371: LD_INT 14
28373: EQUAL
28374: IFFALSE 28384
// sFlag := true ;
28376: LD_ADDR_EXP 80
28380: PUSH
28381: LD_INT 1
28383: ST_TO_ADDR
// if p3 = 15 then
28384: LD_VAR 0 3
28388: PUSH
28389: LD_INT 15
28391: EQUAL
28392: IFFALSE 28402
// sKamikadze := true ;
28394: LD_ADDR_EXP 88
28398: PUSH
28399: LD_INT 1
28401: ST_TO_ADDR
// if p3 = 16 then
28402: LD_VAR 0 3
28406: PUSH
28407: LD_INT 16
28409: EQUAL
28410: IFFALSE 28420
// sTroll := true ;
28412: LD_ADDR_EXP 89
28416: PUSH
28417: LD_INT 1
28419: ST_TO_ADDR
// if p3 = 17 then
28420: LD_VAR 0 3
28424: PUSH
28425: LD_INT 17
28427: EQUAL
28428: IFFALSE 28438
// sSlow := true ;
28430: LD_ADDR_EXP 90
28434: PUSH
28435: LD_INT 1
28437: ST_TO_ADDR
// if p3 = 18 then
28438: LD_VAR 0 3
28442: PUSH
28443: LD_INT 18
28445: EQUAL
28446: IFFALSE 28456
// sLack := true ;
28448: LD_ADDR_EXP 91
28452: PUSH
28453: LD_INT 1
28455: ST_TO_ADDR
// if p3 = 19 then
28456: LD_VAR 0 3
28460: PUSH
28461: LD_INT 19
28463: EQUAL
28464: IFFALSE 28474
// sTank := true ;
28466: LD_ADDR_EXP 93
28470: PUSH
28471: LD_INT 1
28473: ST_TO_ADDR
// if p3 = 20 then
28474: LD_VAR 0 3
28478: PUSH
28479: LD_INT 20
28481: EQUAL
28482: IFFALSE 28492
// sRemote := true ;
28484: LD_ADDR_EXP 94
28488: PUSH
28489: LD_INT 1
28491: ST_TO_ADDR
// if p3 = 21 then
28492: LD_VAR 0 3
28496: PUSH
28497: LD_INT 21
28499: EQUAL
28500: IFFALSE 28510
// sPowell := true ;
28502: LD_ADDR_EXP 95
28506: PUSH
28507: LD_INT 1
28509: ST_TO_ADDR
// if p3 = 22 then
28510: LD_VAR 0 3
28514: PUSH
28515: LD_INT 22
28517: EQUAL
28518: IFFALSE 28528
// sTeleport := true ;
28520: LD_ADDR_EXP 98
28524: PUSH
28525: LD_INT 1
28527: ST_TO_ADDR
// if p3 = 23 then
28528: LD_VAR 0 3
28532: PUSH
28533: LD_INT 23
28535: EQUAL
28536: IFFALSE 28546
// sOilTower := true ;
28538: LD_ADDR_EXP 100
28542: PUSH
28543: LD_INT 1
28545: ST_TO_ADDR
// if p3 = 24 then
28546: LD_VAR 0 3
28550: PUSH
28551: LD_INT 24
28553: EQUAL
28554: IFFALSE 28564
// sShovel := true ;
28556: LD_ADDR_EXP 101
28560: PUSH
28561: LD_INT 1
28563: ST_TO_ADDR
// if p3 = 25 then
28564: LD_VAR 0 3
28568: PUSH
28569: LD_INT 25
28571: EQUAL
28572: IFFALSE 28582
// sSheik := true ;
28574: LD_ADDR_EXP 102
28578: PUSH
28579: LD_INT 1
28581: ST_TO_ADDR
// if p3 = 26 then
28582: LD_VAR 0 3
28586: PUSH
28587: LD_INT 26
28589: EQUAL
28590: IFFALSE 28600
// sEarthquake := true ;
28592: LD_ADDR_EXP 104
28596: PUSH
28597: LD_INT 1
28599: ST_TO_ADDR
// if p3 = 27 then
28600: LD_VAR 0 3
28604: PUSH
28605: LD_INT 27
28607: EQUAL
28608: IFFALSE 28618
// sAI := true ;
28610: LD_ADDR_EXP 105
28614: PUSH
28615: LD_INT 1
28617: ST_TO_ADDR
// if p3 = 28 then
28618: LD_VAR 0 3
28622: PUSH
28623: LD_INT 28
28625: EQUAL
28626: IFFALSE 28636
// sCargo := true ;
28628: LD_ADDR_EXP 108
28632: PUSH
28633: LD_INT 1
28635: ST_TO_ADDR
// if p3 = 29 then
28636: LD_VAR 0 3
28640: PUSH
28641: LD_INT 29
28643: EQUAL
28644: IFFALSE 28654
// sDLaser := true ;
28646: LD_ADDR_EXP 109
28650: PUSH
28651: LD_INT 1
28653: ST_TO_ADDR
// if p3 = 30 then
28654: LD_VAR 0 3
28658: PUSH
28659: LD_INT 30
28661: EQUAL
28662: IFFALSE 28672
// sExchange := true ;
28664: LD_ADDR_EXP 110
28668: PUSH
28669: LD_INT 1
28671: ST_TO_ADDR
// if p3 = 31 then
28672: LD_VAR 0 3
28676: PUSH
28677: LD_INT 31
28679: EQUAL
28680: IFFALSE 28690
// sFac := true ;
28682: LD_ADDR_EXP 111
28686: PUSH
28687: LD_INT 1
28689: ST_TO_ADDR
// if p3 = 32 then
28690: LD_VAR 0 3
28694: PUSH
28695: LD_INT 32
28697: EQUAL
28698: IFFALSE 28708
// sPower := true ;
28700: LD_ADDR_EXP 112
28704: PUSH
28705: LD_INT 1
28707: ST_TO_ADDR
// if p3 = 33 then
28708: LD_VAR 0 3
28712: PUSH
28713: LD_INT 33
28715: EQUAL
28716: IFFALSE 28726
// sRandom := true ;
28718: LD_ADDR_EXP 113
28722: PUSH
28723: LD_INT 1
28725: ST_TO_ADDR
// if p3 = 34 then
28726: LD_VAR 0 3
28730: PUSH
28731: LD_INT 34
28733: EQUAL
28734: IFFALSE 28744
// sShield := true ;
28736: LD_ADDR_EXP 114
28740: PUSH
28741: LD_INT 1
28743: ST_TO_ADDR
// if p3 = 35 then
28744: LD_VAR 0 3
28748: PUSH
28749: LD_INT 35
28751: EQUAL
28752: IFFALSE 28762
// sTime := true ;
28754: LD_ADDR_EXP 115
28758: PUSH
28759: LD_INT 1
28761: ST_TO_ADDR
// if p3 = 36 then
28762: LD_VAR 0 3
28766: PUSH
28767: LD_INT 36
28769: EQUAL
28770: IFFALSE 28780
// sTools := true ;
28772: LD_ADDR_EXP 116
28776: PUSH
28777: LD_INT 1
28779: ST_TO_ADDR
// if p3 = 101 then
28780: LD_VAR 0 3
28784: PUSH
28785: LD_INT 101
28787: EQUAL
28788: IFFALSE 28798
// sSold := true ;
28790: LD_ADDR_EXP 81
28794: PUSH
28795: LD_INT 1
28797: ST_TO_ADDR
// if p3 = 102 then
28798: LD_VAR 0 3
28802: PUSH
28803: LD_INT 102
28805: EQUAL
28806: IFFALSE 28816
// sDiff := true ;
28808: LD_ADDR_EXP 82
28812: PUSH
28813: LD_INT 1
28815: ST_TO_ADDR
// if p3 = 103 then
28816: LD_VAR 0 3
28820: PUSH
28821: LD_INT 103
28823: EQUAL
28824: IFFALSE 28834
// sFog := true ;
28826: LD_ADDR_EXP 85
28830: PUSH
28831: LD_INT 1
28833: ST_TO_ADDR
// if p3 = 104 then
28834: LD_VAR 0 3
28838: PUSH
28839: LD_INT 104
28841: EQUAL
28842: IFFALSE 28852
// sReset := true ;
28844: LD_ADDR_EXP 86
28848: PUSH
28849: LD_INT 1
28851: ST_TO_ADDR
// if p3 = 105 then
28852: LD_VAR 0 3
28856: PUSH
28857: LD_INT 105
28859: EQUAL
28860: IFFALSE 28870
// sSun := true ;
28862: LD_ADDR_EXP 87
28866: PUSH
28867: LD_INT 1
28869: ST_TO_ADDR
// if p3 = 106 then
28870: LD_VAR 0 3
28874: PUSH
28875: LD_INT 106
28877: EQUAL
28878: IFFALSE 28888
// sTiger := true ;
28880: LD_ADDR_EXP 83
28884: PUSH
28885: LD_INT 1
28887: ST_TO_ADDR
// if p3 = 107 then
28888: LD_VAR 0 3
28892: PUSH
28893: LD_INT 107
28895: EQUAL
28896: IFFALSE 28906
// sBomb := true ;
28898: LD_ADDR_EXP 84
28902: PUSH
28903: LD_INT 1
28905: ST_TO_ADDR
// if p3 = 108 then
28906: LD_VAR 0 3
28910: PUSH
28911: LD_INT 108
28913: EQUAL
28914: IFFALSE 28924
// sWound := true ;
28916: LD_ADDR_EXP 92
28920: PUSH
28921: LD_INT 1
28923: ST_TO_ADDR
// if p3 = 109 then
28924: LD_VAR 0 3
28928: PUSH
28929: LD_INT 109
28931: EQUAL
28932: IFFALSE 28942
// sBetray := true ;
28934: LD_ADDR_EXP 96
28938: PUSH
28939: LD_INT 1
28941: ST_TO_ADDR
// if p3 = 110 then
28942: LD_VAR 0 3
28946: PUSH
28947: LD_INT 110
28949: EQUAL
28950: IFFALSE 28960
// sContamin := true ;
28952: LD_ADDR_EXP 97
28956: PUSH
28957: LD_INT 1
28959: ST_TO_ADDR
// if p3 = 111 then
28960: LD_VAR 0 3
28964: PUSH
28965: LD_INT 111
28967: EQUAL
28968: IFFALSE 28978
// sOil := true ;
28970: LD_ADDR_EXP 99
28974: PUSH
28975: LD_INT 1
28977: ST_TO_ADDR
// if p3 = 112 then
28978: LD_VAR 0 3
28982: PUSH
28983: LD_INT 112
28985: EQUAL
28986: IFFALSE 28996
// sStu := true ;
28988: LD_ADDR_EXP 103
28992: PUSH
28993: LD_INT 1
28995: ST_TO_ADDR
// if p3 = 113 then
28996: LD_VAR 0 3
29000: PUSH
29001: LD_INT 113
29003: EQUAL
29004: IFFALSE 29014
// sBazooka := true ;
29006: LD_ADDR_EXP 106
29010: PUSH
29011: LD_INT 1
29013: ST_TO_ADDR
// if p3 = 114 then
29014: LD_VAR 0 3
29018: PUSH
29019: LD_INT 114
29021: EQUAL
29022: IFFALSE 29032
// sMortar := true ;
29024: LD_ADDR_EXP 107
29028: PUSH
29029: LD_INT 1
29031: ST_TO_ADDR
// if p3 = 115 then
29032: LD_VAR 0 3
29036: PUSH
29037: LD_INT 115
29039: EQUAL
29040: IFFALSE 29050
// sRanger := true ;
29042: LD_ADDR_EXP 117
29046: PUSH
29047: LD_INT 1
29049: ST_TO_ADDR
// if p3 = 116 then
29050: LD_VAR 0 3
29054: PUSH
29055: LD_INT 116
29057: EQUAL
29058: IFFALSE 29068
// sComputer := true ;
29060: LD_ADDR_EXP 118
29064: PUSH
29065: LD_INT 1
29067: ST_TO_ADDR
// if p3 = 117 then
29068: LD_VAR 0 3
29072: PUSH
29073: LD_INT 117
29075: EQUAL
29076: IFFALSE 29086
// s30 := true ;
29078: LD_ADDR_EXP 119
29082: PUSH
29083: LD_INT 1
29085: ST_TO_ADDR
// if p3 = 118 then
29086: LD_VAR 0 3
29090: PUSH
29091: LD_INT 118
29093: EQUAL
29094: IFFALSE 29104
// s60 := true ;
29096: LD_ADDR_EXP 120
29100: PUSH
29101: LD_INT 1
29103: ST_TO_ADDR
// end ; if p2 = hack_mode then
29104: LD_VAR 0 2
29108: PUSH
29109: LD_INT 101
29111: EQUAL
29112: IFFALSE 29240
// begin case p3 of 1 :
29114: LD_VAR 0 3
29118: PUSH
29119: LD_INT 1
29121: DOUBLE
29122: EQUAL
29123: IFTRUE 29127
29125: GO 29134
29127: POP
// hHackUnlimitedResources ; 2 :
29128: CALL 41387 0 0
29132: GO 29240
29134: LD_INT 2
29136: DOUBLE
29137: EQUAL
29138: IFTRUE 29142
29140: GO 29149
29142: POP
// hHackSetLevel10 ; 3 :
29143: CALL 41520 0 0
29147: GO 29240
29149: LD_INT 3
29151: DOUBLE
29152: EQUAL
29153: IFTRUE 29157
29155: GO 29164
29157: POP
// hHackSetLevel10YourUnits ; 4 :
29158: CALL 41605 0 0
29162: GO 29240
29164: LD_INT 4
29166: DOUBLE
29167: EQUAL
29168: IFTRUE 29172
29170: GO 29179
29172: POP
// hHackInvincible ; 5 :
29173: CALL 42053 0 0
29177: GO 29240
29179: LD_INT 5
29181: DOUBLE
29182: EQUAL
29183: IFTRUE 29187
29185: GO 29194
29187: POP
// hHackInvisible ; 6 :
29188: CALL 42164 0 0
29192: GO 29240
29194: LD_INT 6
29196: DOUBLE
29197: EQUAL
29198: IFTRUE 29202
29200: GO 29209
29202: POP
// hHackChangeYourSide ; 7 :
29203: CALL 42221 0 0
29207: GO 29240
29209: LD_INT 7
29211: DOUBLE
29212: EQUAL
29213: IFTRUE 29217
29215: GO 29224
29217: POP
// hHackChangeUnitSide ; 8 :
29218: CALL 42263 0 0
29222: GO 29240
29224: LD_INT 8
29226: DOUBLE
29227: EQUAL
29228: IFTRUE 29232
29230: GO 29239
29232: POP
// hHackFog ; end ;
29233: CALL 42364 0 0
29237: GO 29240
29239: POP
// end ; if p2 = game_save_mode then
29240: LD_VAR 0 2
29244: PUSH
29245: LD_INT 102
29247: EQUAL
29248: IFFALSE 29303
// begin if p3 = 1 then
29250: LD_VAR 0 3
29254: PUSH
29255: LD_INT 1
29257: EQUAL
29258: IFFALSE 29270
// globalGameSaveCounter := p4 ;
29260: LD_ADDR_EXP 63
29264: PUSH
29265: LD_VAR 0 4
29269: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
29270: LD_VAR 0 3
29274: PUSH
29275: LD_INT 2
29277: EQUAL
29278: PUSH
29279: LD_EXP 63
29283: AND
29284: IFFALSE 29303
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
29286: LD_STRING setGameSaveCounter(
29288: PUSH
29289: LD_EXP 63
29293: STR
29294: PUSH
29295: LD_STRING )
29297: STR
29298: PPUSH
29299: CALL_OW 559
// end ; end ;
29303: LD_VAR 0 7
29307: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
29308: LD_INT 0
29310: PPUSH
// streamModeActive := false ;
29311: LD_ADDR_EXP 64
29315: PUSH
29316: LD_INT 0
29318: ST_TO_ADDR
// normalCounter := 36 ;
29319: LD_ADDR_EXP 65
29323: PUSH
29324: LD_INT 36
29326: ST_TO_ADDR
// hardcoreCounter := 18 ;
29327: LD_ADDR_EXP 66
29331: PUSH
29332: LD_INT 18
29334: ST_TO_ADDR
// sRocket := false ;
29335: LD_ADDR_EXP 69
29339: PUSH
29340: LD_INT 0
29342: ST_TO_ADDR
// sSpeed := false ;
29343: LD_ADDR_EXP 68
29347: PUSH
29348: LD_INT 0
29350: ST_TO_ADDR
// sEngine := false ;
29351: LD_ADDR_EXP 70
29355: PUSH
29356: LD_INT 0
29358: ST_TO_ADDR
// sSpec := false ;
29359: LD_ADDR_EXP 67
29363: PUSH
29364: LD_INT 0
29366: ST_TO_ADDR
// sLevel := false ;
29367: LD_ADDR_EXP 71
29371: PUSH
29372: LD_INT 0
29374: ST_TO_ADDR
// sArmoury := false ;
29375: LD_ADDR_EXP 72
29379: PUSH
29380: LD_INT 0
29382: ST_TO_ADDR
// sRadar := false ;
29383: LD_ADDR_EXP 73
29387: PUSH
29388: LD_INT 0
29390: ST_TO_ADDR
// sBunker := false ;
29391: LD_ADDR_EXP 74
29395: PUSH
29396: LD_INT 0
29398: ST_TO_ADDR
// sHack := false ;
29399: LD_ADDR_EXP 75
29403: PUSH
29404: LD_INT 0
29406: ST_TO_ADDR
// sFire := false ;
29407: LD_ADDR_EXP 76
29411: PUSH
29412: LD_INT 0
29414: ST_TO_ADDR
// sRefresh := false ;
29415: LD_ADDR_EXP 77
29419: PUSH
29420: LD_INT 0
29422: ST_TO_ADDR
// sExp := false ;
29423: LD_ADDR_EXP 78
29427: PUSH
29428: LD_INT 0
29430: ST_TO_ADDR
// sDepot := false ;
29431: LD_ADDR_EXP 79
29435: PUSH
29436: LD_INT 0
29438: ST_TO_ADDR
// sFlag := false ;
29439: LD_ADDR_EXP 80
29443: PUSH
29444: LD_INT 0
29446: ST_TO_ADDR
// sKamikadze := false ;
29447: LD_ADDR_EXP 88
29451: PUSH
29452: LD_INT 0
29454: ST_TO_ADDR
// sTroll := false ;
29455: LD_ADDR_EXP 89
29459: PUSH
29460: LD_INT 0
29462: ST_TO_ADDR
// sSlow := false ;
29463: LD_ADDR_EXP 90
29467: PUSH
29468: LD_INT 0
29470: ST_TO_ADDR
// sLack := false ;
29471: LD_ADDR_EXP 91
29475: PUSH
29476: LD_INT 0
29478: ST_TO_ADDR
// sTank := false ;
29479: LD_ADDR_EXP 93
29483: PUSH
29484: LD_INT 0
29486: ST_TO_ADDR
// sRemote := false ;
29487: LD_ADDR_EXP 94
29491: PUSH
29492: LD_INT 0
29494: ST_TO_ADDR
// sPowell := false ;
29495: LD_ADDR_EXP 95
29499: PUSH
29500: LD_INT 0
29502: ST_TO_ADDR
// sTeleport := false ;
29503: LD_ADDR_EXP 98
29507: PUSH
29508: LD_INT 0
29510: ST_TO_ADDR
// sOilTower := false ;
29511: LD_ADDR_EXP 100
29515: PUSH
29516: LD_INT 0
29518: ST_TO_ADDR
// sShovel := false ;
29519: LD_ADDR_EXP 101
29523: PUSH
29524: LD_INT 0
29526: ST_TO_ADDR
// sSheik := false ;
29527: LD_ADDR_EXP 102
29531: PUSH
29532: LD_INT 0
29534: ST_TO_ADDR
// sEarthquake := false ;
29535: LD_ADDR_EXP 104
29539: PUSH
29540: LD_INT 0
29542: ST_TO_ADDR
// sAI := false ;
29543: LD_ADDR_EXP 105
29547: PUSH
29548: LD_INT 0
29550: ST_TO_ADDR
// sCargo := false ;
29551: LD_ADDR_EXP 108
29555: PUSH
29556: LD_INT 0
29558: ST_TO_ADDR
// sDLaser := false ;
29559: LD_ADDR_EXP 109
29563: PUSH
29564: LD_INT 0
29566: ST_TO_ADDR
// sExchange := false ;
29567: LD_ADDR_EXP 110
29571: PUSH
29572: LD_INT 0
29574: ST_TO_ADDR
// sFac := false ;
29575: LD_ADDR_EXP 111
29579: PUSH
29580: LD_INT 0
29582: ST_TO_ADDR
// sPower := false ;
29583: LD_ADDR_EXP 112
29587: PUSH
29588: LD_INT 0
29590: ST_TO_ADDR
// sRandom := false ;
29591: LD_ADDR_EXP 113
29595: PUSH
29596: LD_INT 0
29598: ST_TO_ADDR
// sShield := false ;
29599: LD_ADDR_EXP 114
29603: PUSH
29604: LD_INT 0
29606: ST_TO_ADDR
// sTime := false ;
29607: LD_ADDR_EXP 115
29611: PUSH
29612: LD_INT 0
29614: ST_TO_ADDR
// sTools := false ;
29615: LD_ADDR_EXP 116
29619: PUSH
29620: LD_INT 0
29622: ST_TO_ADDR
// sSold := false ;
29623: LD_ADDR_EXP 81
29627: PUSH
29628: LD_INT 0
29630: ST_TO_ADDR
// sDiff := false ;
29631: LD_ADDR_EXP 82
29635: PUSH
29636: LD_INT 0
29638: ST_TO_ADDR
// sFog := false ;
29639: LD_ADDR_EXP 85
29643: PUSH
29644: LD_INT 0
29646: ST_TO_ADDR
// sReset := false ;
29647: LD_ADDR_EXP 86
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// sSun := false ;
29655: LD_ADDR_EXP 87
29659: PUSH
29660: LD_INT 0
29662: ST_TO_ADDR
// sTiger := false ;
29663: LD_ADDR_EXP 83
29667: PUSH
29668: LD_INT 0
29670: ST_TO_ADDR
// sBomb := false ;
29671: LD_ADDR_EXP 84
29675: PUSH
29676: LD_INT 0
29678: ST_TO_ADDR
// sWound := false ;
29679: LD_ADDR_EXP 92
29683: PUSH
29684: LD_INT 0
29686: ST_TO_ADDR
// sBetray := false ;
29687: LD_ADDR_EXP 96
29691: PUSH
29692: LD_INT 0
29694: ST_TO_ADDR
// sContamin := false ;
29695: LD_ADDR_EXP 97
29699: PUSH
29700: LD_INT 0
29702: ST_TO_ADDR
// sOil := false ;
29703: LD_ADDR_EXP 99
29707: PUSH
29708: LD_INT 0
29710: ST_TO_ADDR
// sStu := false ;
29711: LD_ADDR_EXP 103
29715: PUSH
29716: LD_INT 0
29718: ST_TO_ADDR
// sBazooka := false ;
29719: LD_ADDR_EXP 106
29723: PUSH
29724: LD_INT 0
29726: ST_TO_ADDR
// sMortar := false ;
29727: LD_ADDR_EXP 107
29731: PUSH
29732: LD_INT 0
29734: ST_TO_ADDR
// sRanger := false ;
29735: LD_ADDR_EXP 117
29739: PUSH
29740: LD_INT 0
29742: ST_TO_ADDR
// sComputer := false ;
29743: LD_ADDR_EXP 118
29747: PUSH
29748: LD_INT 0
29750: ST_TO_ADDR
// s30 := false ;
29751: LD_ADDR_EXP 119
29755: PUSH
29756: LD_INT 0
29758: ST_TO_ADDR
// s60 := false ;
29759: LD_ADDR_EXP 120
29763: PUSH
29764: LD_INT 0
29766: ST_TO_ADDR
// end ;
29767: LD_VAR 0 1
29771: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
29772: LD_INT 0
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
29779: PPUSH
29780: PPUSH
// result := [ ] ;
29781: LD_ADDR_VAR 0 2
29785: PUSH
29786: EMPTY
29787: ST_TO_ADDR
// if campaign_id = 1 then
29788: LD_OWVAR 69
29792: PUSH
29793: LD_INT 1
29795: EQUAL
29796: IFFALSE 32962
// begin case mission_number of 1 :
29798: LD_OWVAR 70
29802: PUSH
29803: LD_INT 1
29805: DOUBLE
29806: EQUAL
29807: IFTRUE 29811
29809: GO 29887
29811: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29812: LD_ADDR_VAR 0 2
29816: PUSH
29817: LD_INT 2
29819: PUSH
29820: LD_INT 4
29822: PUSH
29823: LD_INT 11
29825: PUSH
29826: LD_INT 12
29828: PUSH
29829: LD_INT 15
29831: PUSH
29832: LD_INT 16
29834: PUSH
29835: LD_INT 22
29837: PUSH
29838: LD_INT 23
29840: PUSH
29841: LD_INT 26
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: PUSH
29855: LD_INT 101
29857: PUSH
29858: LD_INT 102
29860: PUSH
29861: LD_INT 106
29863: PUSH
29864: LD_INT 116
29866: PUSH
29867: LD_INT 117
29869: PUSH
29870: LD_INT 118
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: ST_TO_ADDR
29885: GO 32960
29887: LD_INT 2
29889: DOUBLE
29890: EQUAL
29891: IFTRUE 29895
29893: GO 29979
29895: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29896: LD_ADDR_VAR 0 2
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: LD_INT 4
29906: PUSH
29907: LD_INT 11
29909: PUSH
29910: LD_INT 12
29912: PUSH
29913: LD_INT 15
29915: PUSH
29916: LD_INT 16
29918: PUSH
29919: LD_INT 22
29921: PUSH
29922: LD_INT 23
29924: PUSH
29925: LD_INT 26
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 101
29941: PUSH
29942: LD_INT 102
29944: PUSH
29945: LD_INT 105
29947: PUSH
29948: LD_INT 106
29950: PUSH
29951: LD_INT 108
29953: PUSH
29954: LD_INT 116
29956: PUSH
29957: LD_INT 117
29959: PUSH
29960: LD_INT 118
29962: PUSH
29963: EMPTY
29964: LIST
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: LIST
29970: LIST
29971: LIST
29972: PUSH
29973: EMPTY
29974: LIST
29975: LIST
29976: ST_TO_ADDR
29977: GO 32960
29979: LD_INT 3
29981: DOUBLE
29982: EQUAL
29983: IFTRUE 29987
29985: GO 30075
29987: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29988: LD_ADDR_VAR 0 2
29992: PUSH
29993: LD_INT 2
29995: PUSH
29996: LD_INT 4
29998: PUSH
29999: LD_INT 5
30001: PUSH
30002: LD_INT 11
30004: PUSH
30005: LD_INT 12
30007: PUSH
30008: LD_INT 15
30010: PUSH
30011: LD_INT 16
30013: PUSH
30014: LD_INT 22
30016: PUSH
30017: LD_INT 26
30019: PUSH
30020: LD_INT 36
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 101
30037: PUSH
30038: LD_INT 102
30040: PUSH
30041: LD_INT 105
30043: PUSH
30044: LD_INT 106
30046: PUSH
30047: LD_INT 108
30049: PUSH
30050: LD_INT 116
30052: PUSH
30053: LD_INT 117
30055: PUSH
30056: LD_INT 118
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: LIST
30063: LIST
30064: LIST
30065: LIST
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: ST_TO_ADDR
30073: GO 32960
30075: LD_INT 4
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30179
30083: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
30084: LD_ADDR_VAR 0 2
30088: PUSH
30089: LD_INT 2
30091: PUSH
30092: LD_INT 4
30094: PUSH
30095: LD_INT 5
30097: PUSH
30098: LD_INT 8
30100: PUSH
30101: LD_INT 11
30103: PUSH
30104: LD_INT 12
30106: PUSH
30107: LD_INT 15
30109: PUSH
30110: LD_INT 16
30112: PUSH
30113: LD_INT 22
30115: PUSH
30116: LD_INT 23
30118: PUSH
30119: LD_INT 26
30121: PUSH
30122: LD_INT 36
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 101
30141: PUSH
30142: LD_INT 102
30144: PUSH
30145: LD_INT 105
30147: PUSH
30148: LD_INT 106
30150: PUSH
30151: LD_INT 108
30153: PUSH
30154: LD_INT 116
30156: PUSH
30157: LD_INT 117
30159: PUSH
30160: LD_INT 118
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: ST_TO_ADDR
30177: GO 32960
30179: LD_INT 5
30181: DOUBLE
30182: EQUAL
30183: IFTRUE 30187
30185: GO 30299
30187: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
30188: LD_ADDR_VAR 0 2
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 4
30198: PUSH
30199: LD_INT 5
30201: PUSH
30202: LD_INT 6
30204: PUSH
30205: LD_INT 8
30207: PUSH
30208: LD_INT 11
30210: PUSH
30211: LD_INT 12
30213: PUSH
30214: LD_INT 15
30216: PUSH
30217: LD_INT 16
30219: PUSH
30220: LD_INT 22
30222: PUSH
30223: LD_INT 23
30225: PUSH
30226: LD_INT 25
30228: PUSH
30229: LD_INT 26
30231: PUSH
30232: LD_INT 36
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: PUSH
30251: LD_INT 101
30253: PUSH
30254: LD_INT 102
30256: PUSH
30257: LD_INT 105
30259: PUSH
30260: LD_INT 106
30262: PUSH
30263: LD_INT 108
30265: PUSH
30266: LD_INT 109
30268: PUSH
30269: LD_INT 112
30271: PUSH
30272: LD_INT 116
30274: PUSH
30275: LD_INT 117
30277: PUSH
30278: LD_INT 118
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: ST_TO_ADDR
30297: GO 32960
30299: LD_INT 6
30301: DOUBLE
30302: EQUAL
30303: IFTRUE 30307
30305: GO 30439
30307: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
30308: LD_ADDR_VAR 0 2
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: LD_INT 4
30318: PUSH
30319: LD_INT 5
30321: PUSH
30322: LD_INT 6
30324: PUSH
30325: LD_INT 8
30327: PUSH
30328: LD_INT 11
30330: PUSH
30331: LD_INT 12
30333: PUSH
30334: LD_INT 15
30336: PUSH
30337: LD_INT 16
30339: PUSH
30340: LD_INT 20
30342: PUSH
30343: LD_INT 21
30345: PUSH
30346: LD_INT 22
30348: PUSH
30349: LD_INT 23
30351: PUSH
30352: LD_INT 25
30354: PUSH
30355: LD_INT 26
30357: PUSH
30358: LD_INT 30
30360: PUSH
30361: LD_INT 31
30363: PUSH
30364: LD_INT 32
30366: PUSH
30367: LD_INT 36
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: PUSH
30391: LD_INT 101
30393: PUSH
30394: LD_INT 102
30396: PUSH
30397: LD_INT 105
30399: PUSH
30400: LD_INT 106
30402: PUSH
30403: LD_INT 108
30405: PUSH
30406: LD_INT 109
30408: PUSH
30409: LD_INT 112
30411: PUSH
30412: LD_INT 116
30414: PUSH
30415: LD_INT 117
30417: PUSH
30418: LD_INT 118
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: ST_TO_ADDR
30437: GO 32960
30439: LD_INT 7
30441: DOUBLE
30442: EQUAL
30443: IFTRUE 30447
30445: GO 30559
30447: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
30448: LD_ADDR_VAR 0 2
30452: PUSH
30453: LD_INT 2
30455: PUSH
30456: LD_INT 4
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: LD_INT 7
30464: PUSH
30465: LD_INT 11
30467: PUSH
30468: LD_INT 12
30470: PUSH
30471: LD_INT 15
30473: PUSH
30474: LD_INT 16
30476: PUSH
30477: LD_INT 20
30479: PUSH
30480: LD_INT 21
30482: PUSH
30483: LD_INT 22
30485: PUSH
30486: LD_INT 23
30488: PUSH
30489: LD_INT 25
30491: PUSH
30492: LD_INT 26
30494: PUSH
30495: EMPTY
30496: LIST
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 101
30513: PUSH
30514: LD_INT 102
30516: PUSH
30517: LD_INT 103
30519: PUSH
30520: LD_INT 105
30522: PUSH
30523: LD_INT 106
30525: PUSH
30526: LD_INT 108
30528: PUSH
30529: LD_INT 112
30531: PUSH
30532: LD_INT 116
30534: PUSH
30535: LD_INT 117
30537: PUSH
30538: LD_INT 118
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: ST_TO_ADDR
30557: GO 32960
30559: LD_INT 8
30561: DOUBLE
30562: EQUAL
30563: IFTRUE 30567
30565: GO 30707
30567: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
30568: LD_ADDR_VAR 0 2
30572: PUSH
30573: LD_INT 2
30575: PUSH
30576: LD_INT 4
30578: PUSH
30579: LD_INT 5
30581: PUSH
30582: LD_INT 6
30584: PUSH
30585: LD_INT 7
30587: PUSH
30588: LD_INT 8
30590: PUSH
30591: LD_INT 11
30593: PUSH
30594: LD_INT 12
30596: PUSH
30597: LD_INT 15
30599: PUSH
30600: LD_INT 16
30602: PUSH
30603: LD_INT 20
30605: PUSH
30606: LD_INT 21
30608: PUSH
30609: LD_INT 22
30611: PUSH
30612: LD_INT 23
30614: PUSH
30615: LD_INT 25
30617: PUSH
30618: LD_INT 26
30620: PUSH
30621: LD_INT 30
30623: PUSH
30624: LD_INT 31
30626: PUSH
30627: LD_INT 32
30629: PUSH
30630: LD_INT 36
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 101
30657: PUSH
30658: LD_INT 102
30660: PUSH
30661: LD_INT 103
30663: PUSH
30664: LD_INT 105
30666: PUSH
30667: LD_INT 106
30669: PUSH
30670: LD_INT 108
30672: PUSH
30673: LD_INT 109
30675: PUSH
30676: LD_INT 112
30678: PUSH
30679: LD_INT 116
30681: PUSH
30682: LD_INT 117
30684: PUSH
30685: LD_INT 118
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: ST_TO_ADDR
30705: GO 32960
30707: LD_INT 9
30709: DOUBLE
30710: EQUAL
30711: IFTRUE 30715
30713: GO 30863
30715: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
30716: LD_ADDR_VAR 0 2
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: LD_INT 4
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: LD_INT 6
30732: PUSH
30733: LD_INT 7
30735: PUSH
30736: LD_INT 8
30738: PUSH
30739: LD_INT 11
30741: PUSH
30742: LD_INT 12
30744: PUSH
30745: LD_INT 15
30747: PUSH
30748: LD_INT 16
30750: PUSH
30751: LD_INT 20
30753: PUSH
30754: LD_INT 21
30756: PUSH
30757: LD_INT 22
30759: PUSH
30760: LD_INT 23
30762: PUSH
30763: LD_INT 25
30765: PUSH
30766: LD_INT 26
30768: PUSH
30769: LD_INT 28
30771: PUSH
30772: LD_INT 30
30774: PUSH
30775: LD_INT 31
30777: PUSH
30778: LD_INT 32
30780: PUSH
30781: LD_INT 36
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 101
30809: PUSH
30810: LD_INT 102
30812: PUSH
30813: LD_INT 103
30815: PUSH
30816: LD_INT 105
30818: PUSH
30819: LD_INT 106
30821: PUSH
30822: LD_INT 108
30824: PUSH
30825: LD_INT 109
30827: PUSH
30828: LD_INT 112
30830: PUSH
30831: LD_INT 114
30833: PUSH
30834: LD_INT 116
30836: PUSH
30837: LD_INT 117
30839: PUSH
30840: LD_INT 118
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: ST_TO_ADDR
30861: GO 32960
30863: LD_INT 10
30865: DOUBLE
30866: EQUAL
30867: IFTRUE 30871
30869: GO 31067
30871: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30872: LD_ADDR_VAR 0 2
30876: PUSH
30877: LD_INT 2
30879: PUSH
30880: LD_INT 4
30882: PUSH
30883: LD_INT 5
30885: PUSH
30886: LD_INT 6
30888: PUSH
30889: LD_INT 7
30891: PUSH
30892: LD_INT 8
30894: PUSH
30895: LD_INT 9
30897: PUSH
30898: LD_INT 10
30900: PUSH
30901: LD_INT 11
30903: PUSH
30904: LD_INT 12
30906: PUSH
30907: LD_INT 13
30909: PUSH
30910: LD_INT 14
30912: PUSH
30913: LD_INT 15
30915: PUSH
30916: LD_INT 16
30918: PUSH
30919: LD_INT 17
30921: PUSH
30922: LD_INT 18
30924: PUSH
30925: LD_INT 19
30927: PUSH
30928: LD_INT 20
30930: PUSH
30931: LD_INT 21
30933: PUSH
30934: LD_INT 22
30936: PUSH
30937: LD_INT 23
30939: PUSH
30940: LD_INT 24
30942: PUSH
30943: LD_INT 25
30945: PUSH
30946: LD_INT 26
30948: PUSH
30949: LD_INT 28
30951: PUSH
30952: LD_INT 30
30954: PUSH
30955: LD_INT 31
30957: PUSH
30958: LD_INT 32
30960: PUSH
30961: LD_INT 36
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 101
30997: PUSH
30998: LD_INT 102
31000: PUSH
31001: LD_INT 103
31003: PUSH
31004: LD_INT 104
31006: PUSH
31007: LD_INT 105
31009: PUSH
31010: LD_INT 106
31012: PUSH
31013: LD_INT 107
31015: PUSH
31016: LD_INT 108
31018: PUSH
31019: LD_INT 109
31021: PUSH
31022: LD_INT 110
31024: PUSH
31025: LD_INT 111
31027: PUSH
31028: LD_INT 112
31030: PUSH
31031: LD_INT 114
31033: PUSH
31034: LD_INT 116
31036: PUSH
31037: LD_INT 117
31039: PUSH
31040: LD_INT 118
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: ST_TO_ADDR
31065: GO 32960
31067: LD_INT 11
31069: DOUBLE
31070: EQUAL
31071: IFTRUE 31075
31073: GO 31279
31075: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
31076: LD_ADDR_VAR 0 2
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: LD_INT 3
31086: PUSH
31087: LD_INT 4
31089: PUSH
31090: LD_INT 5
31092: PUSH
31093: LD_INT 6
31095: PUSH
31096: LD_INT 7
31098: PUSH
31099: LD_INT 8
31101: PUSH
31102: LD_INT 9
31104: PUSH
31105: LD_INT 10
31107: PUSH
31108: LD_INT 11
31110: PUSH
31111: LD_INT 12
31113: PUSH
31114: LD_INT 13
31116: PUSH
31117: LD_INT 14
31119: PUSH
31120: LD_INT 15
31122: PUSH
31123: LD_INT 16
31125: PUSH
31126: LD_INT 17
31128: PUSH
31129: LD_INT 18
31131: PUSH
31132: LD_INT 19
31134: PUSH
31135: LD_INT 20
31137: PUSH
31138: LD_INT 21
31140: PUSH
31141: LD_INT 22
31143: PUSH
31144: LD_INT 23
31146: PUSH
31147: LD_INT 24
31149: PUSH
31150: LD_INT 25
31152: PUSH
31153: LD_INT 26
31155: PUSH
31156: LD_INT 28
31158: PUSH
31159: LD_INT 30
31161: PUSH
31162: LD_INT 31
31164: PUSH
31165: LD_INT 32
31167: PUSH
31168: LD_INT 34
31170: PUSH
31171: LD_INT 36
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: LIST
31189: LIST
31190: LIST
31191: LIST
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: LIST
31197: LIST
31198: LIST
31199: LIST
31200: LIST
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 101
31209: PUSH
31210: LD_INT 102
31212: PUSH
31213: LD_INT 103
31215: PUSH
31216: LD_INT 104
31218: PUSH
31219: LD_INT 105
31221: PUSH
31222: LD_INT 106
31224: PUSH
31225: LD_INT 107
31227: PUSH
31228: LD_INT 108
31230: PUSH
31231: LD_INT 109
31233: PUSH
31234: LD_INT 110
31236: PUSH
31237: LD_INT 111
31239: PUSH
31240: LD_INT 112
31242: PUSH
31243: LD_INT 114
31245: PUSH
31246: LD_INT 116
31248: PUSH
31249: LD_INT 117
31251: PUSH
31252: LD_INT 118
31254: PUSH
31255: EMPTY
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: ST_TO_ADDR
31277: GO 32960
31279: LD_INT 12
31281: DOUBLE
31282: EQUAL
31283: IFTRUE 31287
31285: GO 31507
31287: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
31288: LD_ADDR_VAR 0 2
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: LD_INT 5
31307: PUSH
31308: LD_INT 6
31310: PUSH
31311: LD_INT 7
31313: PUSH
31314: LD_INT 8
31316: PUSH
31317: LD_INT 9
31319: PUSH
31320: LD_INT 10
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: LD_INT 12
31328: PUSH
31329: LD_INT 13
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: LD_INT 15
31337: PUSH
31338: LD_INT 16
31340: PUSH
31341: LD_INT 17
31343: PUSH
31344: LD_INT 18
31346: PUSH
31347: LD_INT 19
31349: PUSH
31350: LD_INT 20
31352: PUSH
31353: LD_INT 21
31355: PUSH
31356: LD_INT 22
31358: PUSH
31359: LD_INT 23
31361: PUSH
31362: LD_INT 24
31364: PUSH
31365: LD_INT 25
31367: PUSH
31368: LD_INT 26
31370: PUSH
31371: LD_INT 27
31373: PUSH
31374: LD_INT 28
31376: PUSH
31377: LD_INT 30
31379: PUSH
31380: LD_INT 31
31382: PUSH
31383: LD_INT 32
31385: PUSH
31386: LD_INT 33
31388: PUSH
31389: LD_INT 34
31391: PUSH
31392: LD_INT 36
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 101
31433: PUSH
31434: LD_INT 102
31436: PUSH
31437: LD_INT 103
31439: PUSH
31440: LD_INT 104
31442: PUSH
31443: LD_INT 105
31445: PUSH
31446: LD_INT 106
31448: PUSH
31449: LD_INT 107
31451: PUSH
31452: LD_INT 108
31454: PUSH
31455: LD_INT 109
31457: PUSH
31458: LD_INT 110
31460: PUSH
31461: LD_INT 111
31463: PUSH
31464: LD_INT 112
31466: PUSH
31467: LD_INT 113
31469: PUSH
31470: LD_INT 114
31472: PUSH
31473: LD_INT 116
31475: PUSH
31476: LD_INT 117
31478: PUSH
31479: LD_INT 118
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: LIST
31499: LIST
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: ST_TO_ADDR
31505: GO 32960
31507: LD_INT 13
31509: DOUBLE
31510: EQUAL
31511: IFTRUE 31515
31513: GO 31723
31515: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
31516: LD_ADDR_VAR 0 2
31520: PUSH
31521: LD_INT 1
31523: PUSH
31524: LD_INT 2
31526: PUSH
31527: LD_INT 3
31529: PUSH
31530: LD_INT 4
31532: PUSH
31533: LD_INT 5
31535: PUSH
31536: LD_INT 8
31538: PUSH
31539: LD_INT 9
31541: PUSH
31542: LD_INT 10
31544: PUSH
31545: LD_INT 11
31547: PUSH
31548: LD_INT 12
31550: PUSH
31551: LD_INT 14
31553: PUSH
31554: LD_INT 15
31556: PUSH
31557: LD_INT 16
31559: PUSH
31560: LD_INT 17
31562: PUSH
31563: LD_INT 18
31565: PUSH
31566: LD_INT 19
31568: PUSH
31569: LD_INT 20
31571: PUSH
31572: LD_INT 21
31574: PUSH
31575: LD_INT 22
31577: PUSH
31578: LD_INT 23
31580: PUSH
31581: LD_INT 24
31583: PUSH
31584: LD_INT 25
31586: PUSH
31587: LD_INT 26
31589: PUSH
31590: LD_INT 27
31592: PUSH
31593: LD_INT 28
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: LD_INT 31
31601: PUSH
31602: LD_INT 32
31604: PUSH
31605: LD_INT 33
31607: PUSH
31608: LD_INT 34
31610: PUSH
31611: LD_INT 36
31613: PUSH
31614: EMPTY
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 101
31649: PUSH
31650: LD_INT 102
31652: PUSH
31653: LD_INT 103
31655: PUSH
31656: LD_INT 104
31658: PUSH
31659: LD_INT 105
31661: PUSH
31662: LD_INT 106
31664: PUSH
31665: LD_INT 107
31667: PUSH
31668: LD_INT 108
31670: PUSH
31671: LD_INT 109
31673: PUSH
31674: LD_INT 110
31676: PUSH
31677: LD_INT 111
31679: PUSH
31680: LD_INT 112
31682: PUSH
31683: LD_INT 113
31685: PUSH
31686: LD_INT 114
31688: PUSH
31689: LD_INT 116
31691: PUSH
31692: LD_INT 117
31694: PUSH
31695: LD_INT 118
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: LIST
31715: LIST
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: ST_TO_ADDR
31721: GO 32960
31723: LD_INT 14
31725: DOUBLE
31726: EQUAL
31727: IFTRUE 31731
31729: GO 31955
31731: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
31732: LD_ADDR_VAR 0 2
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: LD_INT 3
31745: PUSH
31746: LD_INT 4
31748: PUSH
31749: LD_INT 5
31751: PUSH
31752: LD_INT 6
31754: PUSH
31755: LD_INT 7
31757: PUSH
31758: LD_INT 8
31760: PUSH
31761: LD_INT 9
31763: PUSH
31764: LD_INT 10
31766: PUSH
31767: LD_INT 11
31769: PUSH
31770: LD_INT 12
31772: PUSH
31773: LD_INT 13
31775: PUSH
31776: LD_INT 14
31778: PUSH
31779: LD_INT 15
31781: PUSH
31782: LD_INT 16
31784: PUSH
31785: LD_INT 17
31787: PUSH
31788: LD_INT 18
31790: PUSH
31791: LD_INT 19
31793: PUSH
31794: LD_INT 20
31796: PUSH
31797: LD_INT 21
31799: PUSH
31800: LD_INT 22
31802: PUSH
31803: LD_INT 23
31805: PUSH
31806: LD_INT 24
31808: PUSH
31809: LD_INT 25
31811: PUSH
31812: LD_INT 26
31814: PUSH
31815: LD_INT 27
31817: PUSH
31818: LD_INT 28
31820: PUSH
31821: LD_INT 29
31823: PUSH
31824: LD_INT 30
31826: PUSH
31827: LD_INT 31
31829: PUSH
31830: LD_INT 32
31832: PUSH
31833: LD_INT 33
31835: PUSH
31836: LD_INT 34
31838: PUSH
31839: LD_INT 36
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 101
31881: PUSH
31882: LD_INT 102
31884: PUSH
31885: LD_INT 103
31887: PUSH
31888: LD_INT 104
31890: PUSH
31891: LD_INT 105
31893: PUSH
31894: LD_INT 106
31896: PUSH
31897: LD_INT 107
31899: PUSH
31900: LD_INT 108
31902: PUSH
31903: LD_INT 109
31905: PUSH
31906: LD_INT 110
31908: PUSH
31909: LD_INT 111
31911: PUSH
31912: LD_INT 112
31914: PUSH
31915: LD_INT 113
31917: PUSH
31918: LD_INT 114
31920: PUSH
31921: LD_INT 116
31923: PUSH
31924: LD_INT 117
31926: PUSH
31927: LD_INT 118
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: ST_TO_ADDR
31953: GO 32960
31955: LD_INT 15
31957: DOUBLE
31958: EQUAL
31959: IFTRUE 31963
31961: GO 32187
31963: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31964: LD_ADDR_VAR 0 2
31968: PUSH
31969: LD_INT 1
31971: PUSH
31972: LD_INT 2
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: LD_INT 4
31980: PUSH
31981: LD_INT 5
31983: PUSH
31984: LD_INT 6
31986: PUSH
31987: LD_INT 7
31989: PUSH
31990: LD_INT 8
31992: PUSH
31993: LD_INT 9
31995: PUSH
31996: LD_INT 10
31998: PUSH
31999: LD_INT 11
32001: PUSH
32002: LD_INT 12
32004: PUSH
32005: LD_INT 13
32007: PUSH
32008: LD_INT 14
32010: PUSH
32011: LD_INT 15
32013: PUSH
32014: LD_INT 16
32016: PUSH
32017: LD_INT 17
32019: PUSH
32020: LD_INT 18
32022: PUSH
32023: LD_INT 19
32025: PUSH
32026: LD_INT 20
32028: PUSH
32029: LD_INT 21
32031: PUSH
32032: LD_INT 22
32034: PUSH
32035: LD_INT 23
32037: PUSH
32038: LD_INT 24
32040: PUSH
32041: LD_INT 25
32043: PUSH
32044: LD_INT 26
32046: PUSH
32047: LD_INT 27
32049: PUSH
32050: LD_INT 28
32052: PUSH
32053: LD_INT 29
32055: PUSH
32056: LD_INT 30
32058: PUSH
32059: LD_INT 31
32061: PUSH
32062: LD_INT 32
32064: PUSH
32065: LD_INT 33
32067: PUSH
32068: LD_INT 34
32070: PUSH
32071: LD_INT 36
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 101
32113: PUSH
32114: LD_INT 102
32116: PUSH
32117: LD_INT 103
32119: PUSH
32120: LD_INT 104
32122: PUSH
32123: LD_INT 105
32125: PUSH
32126: LD_INT 106
32128: PUSH
32129: LD_INT 107
32131: PUSH
32132: LD_INT 108
32134: PUSH
32135: LD_INT 109
32137: PUSH
32138: LD_INT 110
32140: PUSH
32141: LD_INT 111
32143: PUSH
32144: LD_INT 112
32146: PUSH
32147: LD_INT 113
32149: PUSH
32150: LD_INT 114
32152: PUSH
32153: LD_INT 116
32155: PUSH
32156: LD_INT 117
32158: PUSH
32159: LD_INT 118
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: ST_TO_ADDR
32185: GO 32960
32187: LD_INT 16
32189: DOUBLE
32190: EQUAL
32191: IFTRUE 32195
32193: GO 32331
32195: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
32196: LD_ADDR_VAR 0 2
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: LD_INT 4
32206: PUSH
32207: LD_INT 5
32209: PUSH
32210: LD_INT 7
32212: PUSH
32213: LD_INT 11
32215: PUSH
32216: LD_INT 12
32218: PUSH
32219: LD_INT 15
32221: PUSH
32222: LD_INT 16
32224: PUSH
32225: LD_INT 20
32227: PUSH
32228: LD_INT 21
32230: PUSH
32231: LD_INT 22
32233: PUSH
32234: LD_INT 23
32236: PUSH
32237: LD_INT 25
32239: PUSH
32240: LD_INT 26
32242: PUSH
32243: LD_INT 30
32245: PUSH
32246: LD_INT 31
32248: PUSH
32249: LD_INT 32
32251: PUSH
32252: LD_INT 33
32254: PUSH
32255: LD_INT 34
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 101
32281: PUSH
32282: LD_INT 102
32284: PUSH
32285: LD_INT 103
32287: PUSH
32288: LD_INT 106
32290: PUSH
32291: LD_INT 108
32293: PUSH
32294: LD_INT 112
32296: PUSH
32297: LD_INT 113
32299: PUSH
32300: LD_INT 114
32302: PUSH
32303: LD_INT 116
32305: PUSH
32306: LD_INT 117
32308: PUSH
32309: LD_INT 118
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: ST_TO_ADDR
32329: GO 32960
32331: LD_INT 17
32333: DOUBLE
32334: EQUAL
32335: IFTRUE 32339
32337: GO 32563
32339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
32340: LD_ADDR_VAR 0 2
32344: PUSH
32345: LD_INT 1
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: LD_INT 4
32356: PUSH
32357: LD_INT 5
32359: PUSH
32360: LD_INT 6
32362: PUSH
32363: LD_INT 7
32365: PUSH
32366: LD_INT 8
32368: PUSH
32369: LD_INT 9
32371: PUSH
32372: LD_INT 10
32374: PUSH
32375: LD_INT 11
32377: PUSH
32378: LD_INT 12
32380: PUSH
32381: LD_INT 13
32383: PUSH
32384: LD_INT 14
32386: PUSH
32387: LD_INT 15
32389: PUSH
32390: LD_INT 16
32392: PUSH
32393: LD_INT 17
32395: PUSH
32396: LD_INT 18
32398: PUSH
32399: LD_INT 19
32401: PUSH
32402: LD_INT 20
32404: PUSH
32405: LD_INT 21
32407: PUSH
32408: LD_INT 22
32410: PUSH
32411: LD_INT 23
32413: PUSH
32414: LD_INT 24
32416: PUSH
32417: LD_INT 25
32419: PUSH
32420: LD_INT 26
32422: PUSH
32423: LD_INT 27
32425: PUSH
32426: LD_INT 28
32428: PUSH
32429: LD_INT 29
32431: PUSH
32432: LD_INT 30
32434: PUSH
32435: LD_INT 31
32437: PUSH
32438: LD_INT 32
32440: PUSH
32441: LD_INT 33
32443: PUSH
32444: LD_INT 34
32446: PUSH
32447: LD_INT 36
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 101
32489: PUSH
32490: LD_INT 102
32492: PUSH
32493: LD_INT 103
32495: PUSH
32496: LD_INT 104
32498: PUSH
32499: LD_INT 105
32501: PUSH
32502: LD_INT 106
32504: PUSH
32505: LD_INT 107
32507: PUSH
32508: LD_INT 108
32510: PUSH
32511: LD_INT 109
32513: PUSH
32514: LD_INT 110
32516: PUSH
32517: LD_INT 111
32519: PUSH
32520: LD_INT 112
32522: PUSH
32523: LD_INT 113
32525: PUSH
32526: LD_INT 114
32528: PUSH
32529: LD_INT 116
32531: PUSH
32532: LD_INT 117
32534: PUSH
32535: LD_INT 118
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: ST_TO_ADDR
32561: GO 32960
32563: LD_INT 18
32565: DOUBLE
32566: EQUAL
32567: IFTRUE 32571
32569: GO 32719
32571: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
32572: LD_ADDR_VAR 0 2
32576: PUSH
32577: LD_INT 2
32579: PUSH
32580: LD_INT 4
32582: PUSH
32583: LD_INT 5
32585: PUSH
32586: LD_INT 7
32588: PUSH
32589: LD_INT 11
32591: PUSH
32592: LD_INT 12
32594: PUSH
32595: LD_INT 15
32597: PUSH
32598: LD_INT 16
32600: PUSH
32601: LD_INT 20
32603: PUSH
32604: LD_INT 21
32606: PUSH
32607: LD_INT 22
32609: PUSH
32610: LD_INT 23
32612: PUSH
32613: LD_INT 25
32615: PUSH
32616: LD_INT 26
32618: PUSH
32619: LD_INT 30
32621: PUSH
32622: LD_INT 31
32624: PUSH
32625: LD_INT 32
32627: PUSH
32628: LD_INT 33
32630: PUSH
32631: LD_INT 34
32633: PUSH
32634: LD_INT 35
32636: PUSH
32637: LD_INT 36
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 101
32665: PUSH
32666: LD_INT 102
32668: PUSH
32669: LD_INT 103
32671: PUSH
32672: LD_INT 106
32674: PUSH
32675: LD_INT 108
32677: PUSH
32678: LD_INT 112
32680: PUSH
32681: LD_INT 113
32683: PUSH
32684: LD_INT 114
32686: PUSH
32687: LD_INT 115
32689: PUSH
32690: LD_INT 116
32692: PUSH
32693: LD_INT 117
32695: PUSH
32696: LD_INT 118
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: ST_TO_ADDR
32717: GO 32960
32719: LD_INT 19
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32959
32727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
32728: LD_ADDR_VAR 0 2
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: LD_INT 3
32741: PUSH
32742: LD_INT 4
32744: PUSH
32745: LD_INT 5
32747: PUSH
32748: LD_INT 6
32750: PUSH
32751: LD_INT 7
32753: PUSH
32754: LD_INT 8
32756: PUSH
32757: LD_INT 9
32759: PUSH
32760: LD_INT 10
32762: PUSH
32763: LD_INT 11
32765: PUSH
32766: LD_INT 12
32768: PUSH
32769: LD_INT 13
32771: PUSH
32772: LD_INT 14
32774: PUSH
32775: LD_INT 15
32777: PUSH
32778: LD_INT 16
32780: PUSH
32781: LD_INT 17
32783: PUSH
32784: LD_INT 18
32786: PUSH
32787: LD_INT 19
32789: PUSH
32790: LD_INT 20
32792: PUSH
32793: LD_INT 21
32795: PUSH
32796: LD_INT 22
32798: PUSH
32799: LD_INT 23
32801: PUSH
32802: LD_INT 24
32804: PUSH
32805: LD_INT 25
32807: PUSH
32808: LD_INT 26
32810: PUSH
32811: LD_INT 27
32813: PUSH
32814: LD_INT 28
32816: PUSH
32817: LD_INT 29
32819: PUSH
32820: LD_INT 30
32822: PUSH
32823: LD_INT 31
32825: PUSH
32826: LD_INT 32
32828: PUSH
32829: LD_INT 33
32831: PUSH
32832: LD_INT 34
32834: PUSH
32835: LD_INT 35
32837: PUSH
32838: LD_INT 36
32840: PUSH
32841: EMPTY
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 101
32881: PUSH
32882: LD_INT 102
32884: PUSH
32885: LD_INT 103
32887: PUSH
32888: LD_INT 104
32890: PUSH
32891: LD_INT 105
32893: PUSH
32894: LD_INT 106
32896: PUSH
32897: LD_INT 107
32899: PUSH
32900: LD_INT 108
32902: PUSH
32903: LD_INT 109
32905: PUSH
32906: LD_INT 110
32908: PUSH
32909: LD_INT 111
32911: PUSH
32912: LD_INT 112
32914: PUSH
32915: LD_INT 113
32917: PUSH
32918: LD_INT 114
32920: PUSH
32921: LD_INT 115
32923: PUSH
32924: LD_INT 116
32926: PUSH
32927: LD_INT 117
32929: PUSH
32930: LD_INT 118
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: ST_TO_ADDR
32957: GO 32960
32959: POP
// end else
32960: GO 33191
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32962: LD_ADDR_VAR 0 2
32966: PUSH
32967: LD_INT 1
32969: PUSH
32970: LD_INT 2
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 4
32978: PUSH
32979: LD_INT 5
32981: PUSH
32982: LD_INT 6
32984: PUSH
32985: LD_INT 7
32987: PUSH
32988: LD_INT 8
32990: PUSH
32991: LD_INT 9
32993: PUSH
32994: LD_INT 10
32996: PUSH
32997: LD_INT 11
32999: PUSH
33000: LD_INT 12
33002: PUSH
33003: LD_INT 13
33005: PUSH
33006: LD_INT 14
33008: PUSH
33009: LD_INT 15
33011: PUSH
33012: LD_INT 16
33014: PUSH
33015: LD_INT 17
33017: PUSH
33018: LD_INT 18
33020: PUSH
33021: LD_INT 19
33023: PUSH
33024: LD_INT 20
33026: PUSH
33027: LD_INT 21
33029: PUSH
33030: LD_INT 22
33032: PUSH
33033: LD_INT 23
33035: PUSH
33036: LD_INT 24
33038: PUSH
33039: LD_INT 25
33041: PUSH
33042: LD_INT 26
33044: PUSH
33045: LD_INT 27
33047: PUSH
33048: LD_INT 28
33050: PUSH
33051: LD_INT 29
33053: PUSH
33054: LD_INT 30
33056: PUSH
33057: LD_INT 31
33059: PUSH
33060: LD_INT 32
33062: PUSH
33063: LD_INT 33
33065: PUSH
33066: LD_INT 34
33068: PUSH
33069: LD_INT 35
33071: PUSH
33072: LD_INT 36
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 101
33115: PUSH
33116: LD_INT 102
33118: PUSH
33119: LD_INT 103
33121: PUSH
33122: LD_INT 104
33124: PUSH
33125: LD_INT 105
33127: PUSH
33128: LD_INT 106
33130: PUSH
33131: LD_INT 107
33133: PUSH
33134: LD_INT 108
33136: PUSH
33137: LD_INT 109
33139: PUSH
33140: LD_INT 110
33142: PUSH
33143: LD_INT 111
33145: PUSH
33146: LD_INT 112
33148: PUSH
33149: LD_INT 113
33151: PUSH
33152: LD_INT 114
33154: PUSH
33155: LD_INT 115
33157: PUSH
33158: LD_INT 116
33160: PUSH
33161: LD_INT 117
33163: PUSH
33164: LD_INT 118
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: ST_TO_ADDR
// if result then
33191: LD_VAR 0 2
33195: IFFALSE 33981
// begin normal :=  ;
33197: LD_ADDR_VAR 0 5
33201: PUSH
33202: LD_STRING 
33204: ST_TO_ADDR
// hardcore :=  ;
33205: LD_ADDR_VAR 0 6
33209: PUSH
33210: LD_STRING 
33212: ST_TO_ADDR
// active :=  ;
33213: LD_ADDR_VAR 0 7
33217: PUSH
33218: LD_STRING 
33220: ST_TO_ADDR
// for i = 1 to normalCounter do
33221: LD_ADDR_VAR 0 8
33225: PUSH
33226: DOUBLE
33227: LD_INT 1
33229: DEC
33230: ST_TO_ADDR
33231: LD_EXP 65
33235: PUSH
33236: FOR_TO
33237: IFFALSE 33338
// begin tmp := 0 ;
33239: LD_ADDR_VAR 0 3
33243: PUSH
33244: LD_STRING 0
33246: ST_TO_ADDR
// if result [ 1 ] then
33247: LD_VAR 0 2
33251: PUSH
33252: LD_INT 1
33254: ARRAY
33255: IFFALSE 33320
// if result [ 1 ] [ 1 ] = i then
33257: LD_VAR 0 2
33261: PUSH
33262: LD_INT 1
33264: ARRAY
33265: PUSH
33266: LD_INT 1
33268: ARRAY
33269: PUSH
33270: LD_VAR 0 8
33274: EQUAL
33275: IFFALSE 33320
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33277: LD_ADDR_VAR 0 2
33281: PUSH
33282: LD_VAR 0 2
33286: PPUSH
33287: LD_INT 1
33289: PPUSH
33290: LD_VAR 0 2
33294: PUSH
33295: LD_INT 1
33297: ARRAY
33298: PPUSH
33299: LD_INT 1
33301: PPUSH
33302: CALL_OW 3
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
// tmp := 1 ;
33312: LD_ADDR_VAR 0 3
33316: PUSH
33317: LD_STRING 1
33319: ST_TO_ADDR
// end ; normal := normal & tmp ;
33320: LD_ADDR_VAR 0 5
33324: PUSH
33325: LD_VAR 0 5
33329: PUSH
33330: LD_VAR 0 3
33334: STR
33335: ST_TO_ADDR
// end ;
33336: GO 33236
33338: POP
33339: POP
// for i = 1 to hardcoreCounter do
33340: LD_ADDR_VAR 0 8
33344: PUSH
33345: DOUBLE
33346: LD_INT 1
33348: DEC
33349: ST_TO_ADDR
33350: LD_EXP 66
33354: PUSH
33355: FOR_TO
33356: IFFALSE 33461
// begin tmp := 0 ;
33358: LD_ADDR_VAR 0 3
33362: PUSH
33363: LD_STRING 0
33365: ST_TO_ADDR
// if result [ 2 ] then
33366: LD_VAR 0 2
33370: PUSH
33371: LD_INT 2
33373: ARRAY
33374: IFFALSE 33443
// if result [ 2 ] [ 1 ] = 100 + i then
33376: LD_VAR 0 2
33380: PUSH
33381: LD_INT 2
33383: ARRAY
33384: PUSH
33385: LD_INT 1
33387: ARRAY
33388: PUSH
33389: LD_INT 100
33391: PUSH
33392: LD_VAR 0 8
33396: PLUS
33397: EQUAL
33398: IFFALSE 33443
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33400: LD_ADDR_VAR 0 2
33404: PUSH
33405: LD_VAR 0 2
33409: PPUSH
33410: LD_INT 2
33412: PPUSH
33413: LD_VAR 0 2
33417: PUSH
33418: LD_INT 2
33420: ARRAY
33421: PPUSH
33422: LD_INT 1
33424: PPUSH
33425: CALL_OW 3
33429: PPUSH
33430: CALL_OW 1
33434: ST_TO_ADDR
// tmp := 1 ;
33435: LD_ADDR_VAR 0 3
33439: PUSH
33440: LD_STRING 1
33442: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33443: LD_ADDR_VAR 0 6
33447: PUSH
33448: LD_VAR 0 6
33452: PUSH
33453: LD_VAR 0 3
33457: STR
33458: ST_TO_ADDR
// end ;
33459: GO 33355
33461: POP
33462: POP
// if isGameLoad then
33463: LD_VAR 0 1
33467: IFFALSE 33942
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
33469: LD_ADDR_VAR 0 4
33473: PUSH
33474: LD_EXP 69
33478: PUSH
33479: LD_EXP 68
33483: PUSH
33484: LD_EXP 70
33488: PUSH
33489: LD_EXP 67
33493: PUSH
33494: LD_EXP 71
33498: PUSH
33499: LD_EXP 72
33503: PUSH
33504: LD_EXP 73
33508: PUSH
33509: LD_EXP 74
33513: PUSH
33514: LD_EXP 75
33518: PUSH
33519: LD_EXP 76
33523: PUSH
33524: LD_EXP 77
33528: PUSH
33529: LD_EXP 78
33533: PUSH
33534: LD_EXP 79
33538: PUSH
33539: LD_EXP 80
33543: PUSH
33544: LD_EXP 88
33548: PUSH
33549: LD_EXP 89
33553: PUSH
33554: LD_EXP 90
33558: PUSH
33559: LD_EXP 91
33563: PUSH
33564: LD_EXP 93
33568: PUSH
33569: LD_EXP 94
33573: PUSH
33574: LD_EXP 95
33578: PUSH
33579: LD_EXP 98
33583: PUSH
33584: LD_EXP 100
33588: PUSH
33589: LD_EXP 101
33593: PUSH
33594: LD_EXP 102
33598: PUSH
33599: LD_EXP 104
33603: PUSH
33604: LD_EXP 105
33608: PUSH
33609: LD_EXP 108
33613: PUSH
33614: LD_EXP 109
33618: PUSH
33619: LD_EXP 110
33623: PUSH
33624: LD_EXP 111
33628: PUSH
33629: LD_EXP 112
33633: PUSH
33634: LD_EXP 113
33638: PUSH
33639: LD_EXP 114
33643: PUSH
33644: LD_EXP 115
33648: PUSH
33649: LD_EXP 116
33653: PUSH
33654: LD_EXP 81
33658: PUSH
33659: LD_EXP 82
33663: PUSH
33664: LD_EXP 85
33668: PUSH
33669: LD_EXP 86
33673: PUSH
33674: LD_EXP 87
33678: PUSH
33679: LD_EXP 83
33683: PUSH
33684: LD_EXP 84
33688: PUSH
33689: LD_EXP 92
33693: PUSH
33694: LD_EXP 96
33698: PUSH
33699: LD_EXP 97
33703: PUSH
33704: LD_EXP 99
33708: PUSH
33709: LD_EXP 103
33713: PUSH
33714: LD_EXP 106
33718: PUSH
33719: LD_EXP 107
33723: PUSH
33724: LD_EXP 117
33728: PUSH
33729: LD_EXP 118
33733: PUSH
33734: LD_EXP 119
33738: PUSH
33739: LD_EXP 120
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: ST_TO_ADDR
// tmp :=  ;
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_STRING 
33807: ST_TO_ADDR
// for i = 1 to normalCounter do
33808: LD_ADDR_VAR 0 8
33812: PUSH
33813: DOUBLE
33814: LD_INT 1
33816: DEC
33817: ST_TO_ADDR
33818: LD_EXP 65
33822: PUSH
33823: FOR_TO
33824: IFFALSE 33860
// begin if flags [ i ] then
33826: LD_VAR 0 4
33830: PUSH
33831: LD_VAR 0 8
33835: ARRAY
33836: IFFALSE 33858
// tmp := tmp & i & ; ;
33838: LD_ADDR_VAR 0 3
33842: PUSH
33843: LD_VAR 0 3
33847: PUSH
33848: LD_VAR 0 8
33852: STR
33853: PUSH
33854: LD_STRING ;
33856: STR
33857: ST_TO_ADDR
// end ;
33858: GO 33823
33860: POP
33861: POP
// for i = 1 to hardcoreCounter do
33862: LD_ADDR_VAR 0 8
33866: PUSH
33867: DOUBLE
33868: LD_INT 1
33870: DEC
33871: ST_TO_ADDR
33872: LD_EXP 66
33876: PUSH
33877: FOR_TO
33878: IFFALSE 33924
// begin if flags [ normalCounter + i ] then
33880: LD_VAR 0 4
33884: PUSH
33885: LD_EXP 65
33889: PUSH
33890: LD_VAR 0 8
33894: PLUS
33895: ARRAY
33896: IFFALSE 33922
// tmp := tmp & ( 100 + i ) & ; ;
33898: LD_ADDR_VAR 0 3
33902: PUSH
33903: LD_VAR 0 3
33907: PUSH
33908: LD_INT 100
33910: PUSH
33911: LD_VAR 0 8
33915: PLUS
33916: STR
33917: PUSH
33918: LD_STRING ;
33920: STR
33921: ST_TO_ADDR
// end ;
33922: GO 33877
33924: POP
33925: POP
// if tmp then
33926: LD_VAR 0 3
33930: IFFALSE 33942
// active := tmp ;
33932: LD_ADDR_VAR 0 7
33936: PUSH
33937: LD_VAR 0 3
33941: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
33942: LD_STRING getStreamItemsFromMission("
33944: PUSH
33945: LD_VAR 0 5
33949: STR
33950: PUSH
33951: LD_STRING ","
33953: STR
33954: PUSH
33955: LD_VAR 0 6
33959: STR
33960: PUSH
33961: LD_STRING ","
33963: STR
33964: PUSH
33965: LD_VAR 0 7
33969: STR
33970: PUSH
33971: LD_STRING ")
33973: STR
33974: PPUSH
33975: CALL_OW 559
// end else
33979: GO 33988
// ToLua ( getStreamItemsFromMission("","","") ) ;
33981: LD_STRING getStreamItemsFromMission("","","")
33983: PPUSH
33984: CALL_OW 559
// end ;
33988: LD_VAR 0 2
33992: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33993: LD_EXP 64
33997: PUSH
33998: LD_EXP 69
34002: AND
34003: IFFALSE 34127
34005: GO 34007
34007: DISABLE
34008: LD_INT 0
34010: PPUSH
34011: PPUSH
// begin enable ;
34012: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34013: LD_ADDR_VAR 0 2
34017: PUSH
34018: LD_INT 22
34020: PUSH
34021: LD_OWVAR 2
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 34
34035: PUSH
34036: LD_INT 7
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PUSH
34043: LD_INT 34
34045: PUSH
34046: LD_INT 45
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 34
34055: PUSH
34056: LD_INT 28
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 34
34065: PUSH
34066: LD_INT 47
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PPUSH
34084: CALL_OW 69
34088: ST_TO_ADDR
// if not tmp then
34089: LD_VAR 0 2
34093: NOT
34094: IFFALSE 34098
// exit ;
34096: GO 34127
// for i in tmp do
34098: LD_ADDR_VAR 0 1
34102: PUSH
34103: LD_VAR 0 2
34107: PUSH
34108: FOR_IN
34109: IFFALSE 34125
// begin SetLives ( i , 0 ) ;
34111: LD_VAR 0 1
34115: PPUSH
34116: LD_INT 0
34118: PPUSH
34119: CALL_OW 234
// end ;
34123: GO 34108
34125: POP
34126: POP
// end ;
34127: PPOPN 2
34129: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34130: LD_EXP 64
34134: PUSH
34135: LD_EXP 70
34139: AND
34140: IFFALSE 34224
34142: GO 34144
34144: DISABLE
34145: LD_INT 0
34147: PPUSH
34148: PPUSH
// begin enable ;
34149: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34150: LD_ADDR_VAR 0 2
34154: PUSH
34155: LD_INT 22
34157: PUSH
34158: LD_OWVAR 2
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 32
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PPUSH
34181: CALL_OW 69
34185: ST_TO_ADDR
// if not tmp then
34186: LD_VAR 0 2
34190: NOT
34191: IFFALSE 34195
// exit ;
34193: GO 34224
// for i in tmp do
34195: LD_ADDR_VAR 0 1
34199: PUSH
34200: LD_VAR 0 2
34204: PUSH
34205: FOR_IN
34206: IFFALSE 34222
// begin SetLives ( i , 0 ) ;
34208: LD_VAR 0 1
34212: PPUSH
34213: LD_INT 0
34215: PPUSH
34216: CALL_OW 234
// end ;
34220: GO 34205
34222: POP
34223: POP
// end ;
34224: PPOPN 2
34226: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34227: LD_EXP 64
34231: PUSH
34232: LD_EXP 67
34236: AND
34237: IFFALSE 34330
34239: GO 34241
34241: DISABLE
34242: LD_INT 0
34244: PPUSH
// begin enable ;
34245: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34246: LD_ADDR_VAR 0 1
34250: PUSH
34251: LD_INT 22
34253: PUSH
34254: LD_OWVAR 2
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 25
34268: PUSH
34269: LD_INT 5
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: PUSH
34276: LD_INT 25
34278: PUSH
34279: LD_INT 9
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 25
34288: PUSH
34289: LD_INT 8
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PPUSH
34306: CALL_OW 69
34310: PUSH
34311: FOR_IN
34312: IFFALSE 34328
// begin SetClass ( i , 1 ) ;
34314: LD_VAR 0 1
34318: PPUSH
34319: LD_INT 1
34321: PPUSH
34322: CALL_OW 336
// end ;
34326: GO 34311
34328: POP
34329: POP
// end ;
34330: PPOPN 1
34332: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
34333: LD_EXP 64
34337: PUSH
34338: LD_EXP 68
34342: AND
34343: PUSH
34344: LD_OWVAR 65
34348: PUSH
34349: LD_INT 7
34351: LESS
34352: AND
34353: IFFALSE 34367
34355: GO 34357
34357: DISABLE
// begin enable ;
34358: ENABLE
// game_speed := 7 ;
34359: LD_ADDR_OWVAR 65
34363: PUSH
34364: LD_INT 7
34366: ST_TO_ADDR
// end ;
34367: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
34368: LD_EXP 64
34372: PUSH
34373: LD_EXP 71
34377: AND
34378: IFFALSE 34580
34380: GO 34382
34382: DISABLE
34383: LD_INT 0
34385: PPUSH
34386: PPUSH
34387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34388: LD_ADDR_VAR 0 3
34392: PUSH
34393: LD_INT 81
34395: PUSH
34396: LD_OWVAR 2
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 21
34407: PUSH
34408: LD_INT 1
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PPUSH
34419: CALL_OW 69
34423: ST_TO_ADDR
// if not tmp then
34424: LD_VAR 0 3
34428: NOT
34429: IFFALSE 34433
// exit ;
34431: GO 34580
// if tmp > 5 then
34433: LD_VAR 0 3
34437: PUSH
34438: LD_INT 5
34440: GREATER
34441: IFFALSE 34453
// k := 5 else
34443: LD_ADDR_VAR 0 2
34447: PUSH
34448: LD_INT 5
34450: ST_TO_ADDR
34451: GO 34463
// k := tmp ;
34453: LD_ADDR_VAR 0 2
34457: PUSH
34458: LD_VAR 0 3
34462: ST_TO_ADDR
// for i := 1 to k do
34463: LD_ADDR_VAR 0 1
34467: PUSH
34468: DOUBLE
34469: LD_INT 1
34471: DEC
34472: ST_TO_ADDR
34473: LD_VAR 0 2
34477: PUSH
34478: FOR_TO
34479: IFFALSE 34578
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
34481: LD_VAR 0 3
34485: PUSH
34486: LD_VAR 0 1
34490: ARRAY
34491: PPUSH
34492: LD_VAR 0 1
34496: PUSH
34497: LD_INT 4
34499: MOD
34500: PUSH
34501: LD_INT 1
34503: PLUS
34504: PPUSH
34505: CALL_OW 259
34509: PUSH
34510: LD_INT 10
34512: LESS
34513: IFFALSE 34576
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
34515: LD_VAR 0 3
34519: PUSH
34520: LD_VAR 0 1
34524: ARRAY
34525: PPUSH
34526: LD_VAR 0 1
34530: PUSH
34531: LD_INT 4
34533: MOD
34534: PUSH
34535: LD_INT 1
34537: PLUS
34538: PPUSH
34539: LD_VAR 0 3
34543: PUSH
34544: LD_VAR 0 1
34548: ARRAY
34549: PPUSH
34550: LD_VAR 0 1
34554: PUSH
34555: LD_INT 4
34557: MOD
34558: PUSH
34559: LD_INT 1
34561: PLUS
34562: PPUSH
34563: CALL_OW 259
34567: PUSH
34568: LD_INT 1
34570: PLUS
34571: PPUSH
34572: CALL_OW 237
34576: GO 34478
34578: POP
34579: POP
// end ;
34580: PPOPN 3
34582: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
34583: LD_EXP 64
34587: PUSH
34588: LD_EXP 72
34592: AND
34593: IFFALSE 34613
34595: GO 34597
34597: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
34598: LD_INT 4
34600: PPUSH
34601: LD_OWVAR 2
34605: PPUSH
34606: LD_INT 0
34608: PPUSH
34609: CALL_OW 324
34613: END
// every 0 0$1 trigger StreamModeActive and sShovel do
34614: LD_EXP 64
34618: PUSH
34619: LD_EXP 101
34623: AND
34624: IFFALSE 34644
34626: GO 34628
34628: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
34629: LD_INT 19
34631: PPUSH
34632: LD_OWVAR 2
34636: PPUSH
34637: LD_INT 0
34639: PPUSH
34640: CALL_OW 324
34644: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
34645: LD_EXP 64
34649: PUSH
34650: LD_EXP 73
34654: AND
34655: IFFALSE 34757
34657: GO 34659
34659: DISABLE
34660: LD_INT 0
34662: PPUSH
34663: PPUSH
// begin enable ;
34664: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
34665: LD_ADDR_VAR 0 2
34669: PUSH
34670: LD_INT 22
34672: PUSH
34673: LD_OWVAR 2
34677: PUSH
34678: EMPTY
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 2
34684: PUSH
34685: LD_INT 34
34687: PUSH
34688: LD_INT 11
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 34
34697: PUSH
34698: LD_INT 30
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: LIST
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PPUSH
34714: CALL_OW 69
34718: ST_TO_ADDR
// if not tmp then
34719: LD_VAR 0 2
34723: NOT
34724: IFFALSE 34728
// exit ;
34726: GO 34757
// for i in tmp do
34728: LD_ADDR_VAR 0 1
34732: PUSH
34733: LD_VAR 0 2
34737: PUSH
34738: FOR_IN
34739: IFFALSE 34755
// begin SetLives ( i , 0 ) ;
34741: LD_VAR 0 1
34745: PPUSH
34746: LD_INT 0
34748: PPUSH
34749: CALL_OW 234
// end ;
34753: GO 34738
34755: POP
34756: POP
// end ;
34757: PPOPN 2
34759: END
// every 0 0$1 trigger StreamModeActive and sBunker do
34760: LD_EXP 64
34764: PUSH
34765: LD_EXP 74
34769: AND
34770: IFFALSE 34790
34772: GO 34774
34774: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
34775: LD_INT 32
34777: PPUSH
34778: LD_OWVAR 2
34782: PPUSH
34783: LD_INT 0
34785: PPUSH
34786: CALL_OW 324
34790: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
34791: LD_EXP 64
34795: PUSH
34796: LD_EXP 75
34800: AND
34801: IFFALSE 34982
34803: GO 34805
34805: DISABLE
34806: LD_INT 0
34808: PPUSH
34809: PPUSH
34810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34811: LD_ADDR_VAR 0 2
34815: PUSH
34816: LD_INT 22
34818: PUSH
34819: LD_OWVAR 2
34823: PUSH
34824: EMPTY
34825: LIST
34826: LIST
34827: PUSH
34828: LD_INT 33
34830: PUSH
34831: LD_INT 3
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PPUSH
34842: CALL_OW 69
34846: ST_TO_ADDR
// if not tmp then
34847: LD_VAR 0 2
34851: NOT
34852: IFFALSE 34856
// exit ;
34854: GO 34982
// side := 0 ;
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_INT 0
34863: ST_TO_ADDR
// for i := 1 to 8 do
34864: LD_ADDR_VAR 0 1
34868: PUSH
34869: DOUBLE
34870: LD_INT 1
34872: DEC
34873: ST_TO_ADDR
34874: LD_INT 8
34876: PUSH
34877: FOR_TO
34878: IFFALSE 34926
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34880: LD_OWVAR 2
34884: PUSH
34885: LD_VAR 0 1
34889: NONEQUAL
34890: PUSH
34891: LD_OWVAR 2
34895: PPUSH
34896: LD_VAR 0 1
34900: PPUSH
34901: CALL_OW 81
34905: PUSH
34906: LD_INT 2
34908: EQUAL
34909: AND
34910: IFFALSE 34924
// begin side := i ;
34912: LD_ADDR_VAR 0 3
34916: PUSH
34917: LD_VAR 0 1
34921: ST_TO_ADDR
// break ;
34922: GO 34926
// end ;
34924: GO 34877
34926: POP
34927: POP
// if not side then
34928: LD_VAR 0 3
34932: NOT
34933: IFFALSE 34937
// exit ;
34935: GO 34982
// for i := 1 to tmp do
34937: LD_ADDR_VAR 0 1
34941: PUSH
34942: DOUBLE
34943: LD_INT 1
34945: DEC
34946: ST_TO_ADDR
34947: LD_VAR 0 2
34951: PUSH
34952: FOR_TO
34953: IFFALSE 34980
// if Prob ( 60 ) then
34955: LD_INT 60
34957: PPUSH
34958: CALL_OW 13
34962: IFFALSE 34978
// SetSide ( i , side ) ;
34964: LD_VAR 0 1
34968: PPUSH
34969: LD_VAR 0 3
34973: PPUSH
34974: CALL_OW 235
34978: GO 34952
34980: POP
34981: POP
// end ;
34982: PPOPN 3
34984: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34985: LD_EXP 64
34989: PUSH
34990: LD_EXP 77
34994: AND
34995: IFFALSE 35114
34997: GO 34999
34999: DISABLE
35000: LD_INT 0
35002: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35003: LD_ADDR_VAR 0 1
35007: PUSH
35008: LD_INT 22
35010: PUSH
35011: LD_OWVAR 2
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 21
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 3
35032: PUSH
35033: LD_INT 23
35035: PUSH
35036: LD_INT 0
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: PPUSH
35052: CALL_OW 69
35056: PUSH
35057: FOR_IN
35058: IFFALSE 35112
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35060: LD_VAR 0 1
35064: PPUSH
35065: CALL_OW 257
35069: PUSH
35070: LD_INT 1
35072: PUSH
35073: LD_INT 2
35075: PUSH
35076: LD_INT 3
35078: PUSH
35079: LD_INT 4
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: IN
35088: IFFALSE 35110
// SetClass ( un , rand ( 1 , 4 ) ) ;
35090: LD_VAR 0 1
35094: PPUSH
35095: LD_INT 1
35097: PPUSH
35098: LD_INT 4
35100: PPUSH
35101: CALL_OW 12
35105: PPUSH
35106: CALL_OW 336
35110: GO 35057
35112: POP
35113: POP
// end ;
35114: PPOPN 1
35116: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35117: LD_EXP 64
35121: PUSH
35122: LD_EXP 76
35126: AND
35127: IFFALSE 35206
35129: GO 35131
35131: DISABLE
35132: LD_INT 0
35134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35135: LD_ADDR_VAR 0 1
35139: PUSH
35140: LD_INT 22
35142: PUSH
35143: LD_OWVAR 2
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 21
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 69
35170: ST_TO_ADDR
// if not tmp then
35171: LD_VAR 0 1
35175: NOT
35176: IFFALSE 35180
// exit ;
35178: GO 35206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35180: LD_VAR 0 1
35184: PUSH
35185: LD_INT 1
35187: PPUSH
35188: LD_VAR 0 1
35192: PPUSH
35193: CALL_OW 12
35197: ARRAY
35198: PPUSH
35199: LD_INT 100
35201: PPUSH
35202: CALL_OW 234
// end ;
35206: PPOPN 1
35208: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35209: LD_EXP 64
35213: PUSH
35214: LD_EXP 78
35218: AND
35219: IFFALSE 35317
35221: GO 35223
35223: DISABLE
35224: LD_INT 0
35226: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35227: LD_ADDR_VAR 0 1
35231: PUSH
35232: LD_INT 22
35234: PUSH
35235: LD_OWVAR 2
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 21
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: PPUSH
35258: CALL_OW 69
35262: ST_TO_ADDR
// if not tmp then
35263: LD_VAR 0 1
35267: NOT
35268: IFFALSE 35272
// exit ;
35270: GO 35317
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35272: LD_VAR 0 1
35276: PUSH
35277: LD_INT 1
35279: PPUSH
35280: LD_VAR 0 1
35284: PPUSH
35285: CALL_OW 12
35289: ARRAY
35290: PPUSH
35291: LD_INT 1
35293: PPUSH
35294: LD_INT 4
35296: PPUSH
35297: CALL_OW 12
35301: PPUSH
35302: LD_INT 3000
35304: PPUSH
35305: LD_INT 9000
35307: PPUSH
35308: CALL_OW 12
35312: PPUSH
35313: CALL_OW 492
// end ;
35317: PPOPN 1
35319: END
// every 0 0$1 trigger StreamModeActive and sDepot do
35320: LD_EXP 64
35324: PUSH
35325: LD_EXP 79
35329: AND
35330: IFFALSE 35350
35332: GO 35334
35334: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
35335: LD_INT 1
35337: PPUSH
35338: LD_OWVAR 2
35342: PPUSH
35343: LD_INT 0
35345: PPUSH
35346: CALL_OW 324
35350: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
35351: LD_EXP 64
35355: PUSH
35356: LD_EXP 80
35360: AND
35361: IFFALSE 35444
35363: GO 35365
35365: DISABLE
35366: LD_INT 0
35368: PPUSH
35369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35370: LD_ADDR_VAR 0 2
35374: PUSH
35375: LD_INT 22
35377: PUSH
35378: LD_OWVAR 2
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 21
35389: PUSH
35390: LD_INT 3
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: EMPTY
35398: LIST
35399: LIST
35400: PPUSH
35401: CALL_OW 69
35405: ST_TO_ADDR
// if not tmp then
35406: LD_VAR 0 2
35410: NOT
35411: IFFALSE 35415
// exit ;
35413: GO 35444
// for i in tmp do
35415: LD_ADDR_VAR 0 1
35419: PUSH
35420: LD_VAR 0 2
35424: PUSH
35425: FOR_IN
35426: IFFALSE 35442
// SetBLevel ( i , 10 ) ;
35428: LD_VAR 0 1
35432: PPUSH
35433: LD_INT 10
35435: PPUSH
35436: CALL_OW 241
35440: GO 35425
35442: POP
35443: POP
// end ;
35444: PPOPN 2
35446: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
35447: LD_EXP 64
35451: PUSH
35452: LD_EXP 81
35456: AND
35457: IFFALSE 35568
35459: GO 35461
35461: DISABLE
35462: LD_INT 0
35464: PPUSH
35465: PPUSH
35466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_INT 22
35474: PUSH
35475: LD_OWVAR 2
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: PUSH
35484: LD_INT 25
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PPUSH
35498: CALL_OW 69
35502: ST_TO_ADDR
// if not tmp then
35503: LD_VAR 0 3
35507: NOT
35508: IFFALSE 35512
// exit ;
35510: GO 35568
// un := tmp [ rand ( 1 , tmp ) ] ;
35512: LD_ADDR_VAR 0 2
35516: PUSH
35517: LD_VAR 0 3
35521: PUSH
35522: LD_INT 1
35524: PPUSH
35525: LD_VAR 0 3
35529: PPUSH
35530: CALL_OW 12
35534: ARRAY
35535: ST_TO_ADDR
// if Crawls ( un ) then
35536: LD_VAR 0 2
35540: PPUSH
35541: CALL_OW 318
35545: IFFALSE 35556
// ComWalk ( un ) ;
35547: LD_VAR 0 2
35551: PPUSH
35552: CALL_OW 138
// SetClass ( un , class_sniper ) ;
35556: LD_VAR 0 2
35560: PPUSH
35561: LD_INT 5
35563: PPUSH
35564: CALL_OW 336
// end ;
35568: PPOPN 3
35570: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
35571: LD_EXP 64
35575: PUSH
35576: LD_EXP 82
35580: AND
35581: PUSH
35582: LD_OWVAR 67
35586: PUSH
35587: LD_INT 4
35589: LESS
35590: AND
35591: IFFALSE 35610
35593: GO 35595
35595: DISABLE
// begin Difficulty := Difficulty + 1 ;
35596: LD_ADDR_OWVAR 67
35600: PUSH
35601: LD_OWVAR 67
35605: PUSH
35606: LD_INT 1
35608: PLUS
35609: ST_TO_ADDR
// end ;
35610: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
35611: LD_EXP 64
35615: PUSH
35616: LD_EXP 83
35620: AND
35621: IFFALSE 35724
35623: GO 35625
35625: DISABLE
35626: LD_INT 0
35628: PPUSH
// begin for i := 1 to 5 do
35629: LD_ADDR_VAR 0 1
35633: PUSH
35634: DOUBLE
35635: LD_INT 1
35637: DEC
35638: ST_TO_ADDR
35639: LD_INT 5
35641: PUSH
35642: FOR_TO
35643: IFFALSE 35722
// begin uc_nation := nation_nature ;
35645: LD_ADDR_OWVAR 21
35649: PUSH
35650: LD_INT 0
35652: ST_TO_ADDR
// uc_side := 0 ;
35653: LD_ADDR_OWVAR 20
35657: PUSH
35658: LD_INT 0
35660: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35661: LD_ADDR_OWVAR 29
35665: PUSH
35666: LD_INT 12
35668: PUSH
35669: LD_INT 12
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: ST_TO_ADDR
// hc_agressivity := 20 ;
35676: LD_ADDR_OWVAR 35
35680: PUSH
35681: LD_INT 20
35683: ST_TO_ADDR
// hc_class := class_tiger ;
35684: LD_ADDR_OWVAR 28
35688: PUSH
35689: LD_INT 14
35691: ST_TO_ADDR
// hc_gallery :=  ;
35692: LD_ADDR_OWVAR 33
35696: PUSH
35697: LD_STRING 
35699: ST_TO_ADDR
// hc_name :=  ;
35700: LD_ADDR_OWVAR 26
35704: PUSH
35705: LD_STRING 
35707: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
35708: CALL_OW 44
35712: PPUSH
35713: LD_INT 0
35715: PPUSH
35716: CALL_OW 51
// end ;
35720: GO 35642
35722: POP
35723: POP
// end ;
35724: PPOPN 1
35726: END
// every 0 0$1 trigger StreamModeActive and sBomb do
35727: LD_EXP 64
35731: PUSH
35732: LD_EXP 84
35736: AND
35737: IFFALSE 35746
35739: GO 35741
35741: DISABLE
// StreamSibBomb ;
35742: CALL 35747 0 0
35746: END
// export function StreamSibBomb ; var i , x , y ; begin
35747: LD_INT 0
35749: PPUSH
35750: PPUSH
35751: PPUSH
35752: PPUSH
// result := false ;
35753: LD_ADDR_VAR 0 1
35757: PUSH
35758: LD_INT 0
35760: ST_TO_ADDR
// for i := 1 to 16 do
35761: LD_ADDR_VAR 0 2
35765: PUSH
35766: DOUBLE
35767: LD_INT 1
35769: DEC
35770: ST_TO_ADDR
35771: LD_INT 16
35773: PUSH
35774: FOR_TO
35775: IFFALSE 35974
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35777: LD_ADDR_VAR 0 3
35781: PUSH
35782: LD_INT 10
35784: PUSH
35785: LD_INT 20
35787: PUSH
35788: LD_INT 30
35790: PUSH
35791: LD_INT 40
35793: PUSH
35794: LD_INT 50
35796: PUSH
35797: LD_INT 60
35799: PUSH
35800: LD_INT 70
35802: PUSH
35803: LD_INT 80
35805: PUSH
35806: LD_INT 90
35808: PUSH
35809: LD_INT 100
35811: PUSH
35812: LD_INT 110
35814: PUSH
35815: LD_INT 120
35817: PUSH
35818: LD_INT 130
35820: PUSH
35821: LD_INT 140
35823: PUSH
35824: LD_INT 150
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: PPUSH
35847: LD_INT 15
35849: PPUSH
35850: CALL_OW 12
35854: ARRAY
35855: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35856: LD_ADDR_VAR 0 4
35860: PUSH
35861: LD_INT 10
35863: PUSH
35864: LD_INT 20
35866: PUSH
35867: LD_INT 30
35869: PUSH
35870: LD_INT 40
35872: PUSH
35873: LD_INT 50
35875: PUSH
35876: LD_INT 60
35878: PUSH
35879: LD_INT 70
35881: PUSH
35882: LD_INT 80
35884: PUSH
35885: LD_INT 90
35887: PUSH
35888: LD_INT 100
35890: PUSH
35891: LD_INT 110
35893: PUSH
35894: LD_INT 120
35896: PUSH
35897: LD_INT 130
35899: PUSH
35900: LD_INT 140
35902: PUSH
35903: LD_INT 150
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 1
35925: PPUSH
35926: LD_INT 15
35928: PPUSH
35929: CALL_OW 12
35933: ARRAY
35934: ST_TO_ADDR
// if ValidHex ( x , y ) then
35935: LD_VAR 0 3
35939: PPUSH
35940: LD_VAR 0 4
35944: PPUSH
35945: CALL_OW 488
35949: IFFALSE 35972
// begin result := [ x , y ] ;
35951: LD_ADDR_VAR 0 1
35955: PUSH
35956: LD_VAR 0 3
35960: PUSH
35961: LD_VAR 0 4
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// break ;
35970: GO 35974
// end ; end ;
35972: GO 35774
35974: POP
35975: POP
// if result then
35976: LD_VAR 0 1
35980: IFFALSE 36040
// begin ToLua ( playSibBomb() ) ;
35982: LD_STRING playSibBomb()
35984: PPUSH
35985: CALL_OW 559
// wait ( 0 0$14 ) ;
35989: LD_INT 490
35991: PPUSH
35992: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35996: LD_VAR 0 1
36000: PUSH
36001: LD_INT 1
36003: ARRAY
36004: PPUSH
36005: LD_VAR 0 1
36009: PUSH
36010: LD_INT 2
36012: ARRAY
36013: PPUSH
36014: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36018: LD_VAR 0 1
36022: PUSH
36023: LD_INT 1
36025: ARRAY
36026: PPUSH
36027: LD_VAR 0 1
36031: PUSH
36032: LD_INT 2
36034: ARRAY
36035: PPUSH
36036: CALL_OW 429
// end ; end ;
36040: LD_VAR 0 1
36044: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36045: LD_EXP 64
36049: PUSH
36050: LD_EXP 86
36054: AND
36055: IFFALSE 36067
36057: GO 36059
36059: DISABLE
// YouLost (  ) ;
36060: LD_STRING 
36062: PPUSH
36063: CALL_OW 104
36067: END
// every 0 0$1 trigger StreamModeActive and sFog do
36068: LD_EXP 64
36072: PUSH
36073: LD_EXP 85
36077: AND
36078: IFFALSE 36092
36080: GO 36082
36082: DISABLE
// FogOff ( your_side ) ;
36083: LD_OWVAR 2
36087: PPUSH
36088: CALL_OW 344
36092: END
// every 0 0$1 trigger StreamModeActive and sSun do
36093: LD_EXP 64
36097: PUSH
36098: LD_EXP 87
36102: AND
36103: IFFALSE 36131
36105: GO 36107
36107: DISABLE
// begin solar_recharge_percent := 0 ;
36108: LD_ADDR_OWVAR 79
36112: PUSH
36113: LD_INT 0
36115: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36116: LD_INT 10500
36118: PPUSH
36119: CALL_OW 67
// solar_recharge_percent := 100 ;
36123: LD_ADDR_OWVAR 79
36127: PUSH
36128: LD_INT 100
36130: ST_TO_ADDR
// end ;
36131: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36132: LD_EXP 64
36136: PUSH
36137: LD_EXP 88
36141: AND
36142: IFFALSE 36381
36144: GO 36146
36146: DISABLE
36147: LD_INT 0
36149: PPUSH
36150: PPUSH
36151: PPUSH
// begin tmp := [ ] ;
36152: LD_ADDR_VAR 0 3
36156: PUSH
36157: EMPTY
36158: ST_TO_ADDR
// for i := 1 to 6 do
36159: LD_ADDR_VAR 0 1
36163: PUSH
36164: DOUBLE
36165: LD_INT 1
36167: DEC
36168: ST_TO_ADDR
36169: LD_INT 6
36171: PUSH
36172: FOR_TO
36173: IFFALSE 36278
// begin uc_nation := nation_nature ;
36175: LD_ADDR_OWVAR 21
36179: PUSH
36180: LD_INT 0
36182: ST_TO_ADDR
// uc_side := 0 ;
36183: LD_ADDR_OWVAR 20
36187: PUSH
36188: LD_INT 0
36190: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36191: LD_ADDR_OWVAR 29
36195: PUSH
36196: LD_INT 12
36198: PUSH
36199: LD_INT 12
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: ST_TO_ADDR
// hc_agressivity := 20 ;
36206: LD_ADDR_OWVAR 35
36210: PUSH
36211: LD_INT 20
36213: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36214: LD_ADDR_OWVAR 28
36218: PUSH
36219: LD_INT 17
36221: ST_TO_ADDR
// hc_gallery :=  ;
36222: LD_ADDR_OWVAR 33
36226: PUSH
36227: LD_STRING 
36229: ST_TO_ADDR
// hc_name :=  ;
36230: LD_ADDR_OWVAR 26
36234: PUSH
36235: LD_STRING 
36237: ST_TO_ADDR
// un := CreateHuman ;
36238: LD_ADDR_VAR 0 2
36242: PUSH
36243: CALL_OW 44
36247: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36248: LD_VAR 0 2
36252: PPUSH
36253: LD_INT 1
36255: PPUSH
36256: CALL_OW 51
// tmp := tmp ^ un ;
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: LD_VAR 0 3
36269: PUSH
36270: LD_VAR 0 2
36274: ADD
36275: ST_TO_ADDR
// end ;
36276: GO 36172
36278: POP
36279: POP
// repeat wait ( 0 0$1 ) ;
36280: LD_INT 35
36282: PPUSH
36283: CALL_OW 67
// for un in tmp do
36287: LD_ADDR_VAR 0 2
36291: PUSH
36292: LD_VAR 0 3
36296: PUSH
36297: FOR_IN
36298: IFFALSE 36372
// begin if IsDead ( un ) then
36300: LD_VAR 0 2
36304: PPUSH
36305: CALL_OW 301
36309: IFFALSE 36329
// begin tmp := tmp diff un ;
36311: LD_ADDR_VAR 0 3
36315: PUSH
36316: LD_VAR 0 3
36320: PUSH
36321: LD_VAR 0 2
36325: DIFF
36326: ST_TO_ADDR
// continue ;
36327: GO 36297
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
36329: LD_VAR 0 2
36333: PPUSH
36334: LD_INT 3
36336: PUSH
36337: LD_INT 22
36339: PUSH
36340: LD_INT 0
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PPUSH
36351: CALL_OW 69
36355: PPUSH
36356: LD_VAR 0 2
36360: PPUSH
36361: CALL_OW 74
36365: PPUSH
36366: CALL_OW 115
// end ;
36370: GO 36297
36372: POP
36373: POP
// until not tmp ;
36374: LD_VAR 0 3
36378: NOT
36379: IFFALSE 36280
// end ;
36381: PPOPN 3
36383: END
// every 0 0$1 trigger StreamModeActive and sTroll do
36384: LD_EXP 64
36388: PUSH
36389: LD_EXP 89
36393: AND
36394: IFFALSE 36448
36396: GO 36398
36398: DISABLE
// begin ToLua ( displayTroll(); ) ;
36399: LD_STRING displayTroll();
36401: PPUSH
36402: CALL_OW 559
// wait ( 3 3$00 ) ;
36406: LD_INT 6300
36408: PPUSH
36409: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36413: LD_STRING hideTroll();
36415: PPUSH
36416: CALL_OW 559
// wait ( 1 1$00 ) ;
36420: LD_INT 2100
36422: PPUSH
36423: CALL_OW 67
// ToLua ( displayTroll(); ) ;
36427: LD_STRING displayTroll();
36429: PPUSH
36430: CALL_OW 559
// wait ( 1 1$00 ) ;
36434: LD_INT 2100
36436: PPUSH
36437: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36441: LD_STRING hideTroll();
36443: PPUSH
36444: CALL_OW 559
// end ;
36448: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
36449: LD_EXP 64
36453: PUSH
36454: LD_EXP 90
36458: AND
36459: IFFALSE 36522
36461: GO 36463
36463: DISABLE
36464: LD_INT 0
36466: PPUSH
// begin p := 0 ;
36467: LD_ADDR_VAR 0 1
36471: PUSH
36472: LD_INT 0
36474: ST_TO_ADDR
// repeat game_speed := 1 ;
36475: LD_ADDR_OWVAR 65
36479: PUSH
36480: LD_INT 1
36482: ST_TO_ADDR
// wait ( 0 0$1 ) ;
36483: LD_INT 35
36485: PPUSH
36486: CALL_OW 67
// p := p + 1 ;
36490: LD_ADDR_VAR 0 1
36494: PUSH
36495: LD_VAR 0 1
36499: PUSH
36500: LD_INT 1
36502: PLUS
36503: ST_TO_ADDR
// until p >= 60 ;
36504: LD_VAR 0 1
36508: PUSH
36509: LD_INT 60
36511: GREATEREQUAL
36512: IFFALSE 36475
// game_speed := 4 ;
36514: LD_ADDR_OWVAR 65
36518: PUSH
36519: LD_INT 4
36521: ST_TO_ADDR
// end ;
36522: PPOPN 1
36524: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
36525: LD_EXP 64
36529: PUSH
36530: LD_EXP 91
36534: AND
36535: IFFALSE 36681
36537: GO 36539
36539: DISABLE
36540: LD_INT 0
36542: PPUSH
36543: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36544: LD_ADDR_VAR 0 1
36548: PUSH
36549: LD_INT 22
36551: PUSH
36552: LD_OWVAR 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 30
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: PUSH
36574: LD_INT 30
36576: PUSH
36577: LD_INT 1
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: LIST
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PPUSH
36593: CALL_OW 69
36597: ST_TO_ADDR
// if not depot then
36598: LD_VAR 0 1
36602: NOT
36603: IFFALSE 36607
// exit ;
36605: GO 36681
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
36607: LD_ADDR_VAR 0 2
36611: PUSH
36612: LD_VAR 0 1
36616: PUSH
36617: LD_INT 1
36619: PPUSH
36620: LD_VAR 0 1
36624: PPUSH
36625: CALL_OW 12
36629: ARRAY
36630: PPUSH
36631: CALL_OW 274
36635: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
36636: LD_VAR 0 2
36640: PPUSH
36641: LD_INT 1
36643: PPUSH
36644: LD_INT 0
36646: PPUSH
36647: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
36651: LD_VAR 0 2
36655: PPUSH
36656: LD_INT 2
36658: PPUSH
36659: LD_INT 0
36661: PPUSH
36662: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
36666: LD_VAR 0 2
36670: PPUSH
36671: LD_INT 3
36673: PPUSH
36674: LD_INT 0
36676: PPUSH
36677: CALL_OW 277
// end ;
36681: PPOPN 2
36683: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
36684: LD_EXP 64
36688: PUSH
36689: LD_EXP 92
36693: AND
36694: IFFALSE 36791
36696: GO 36698
36698: DISABLE
36699: LD_INT 0
36701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36702: LD_ADDR_VAR 0 1
36706: PUSH
36707: LD_INT 22
36709: PUSH
36710: LD_OWVAR 2
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 21
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 3
36731: PUSH
36732: LD_INT 23
36734: PUSH
36735: LD_INT 0
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: PPUSH
36751: CALL_OW 69
36755: ST_TO_ADDR
// if not tmp then
36756: LD_VAR 0 1
36760: NOT
36761: IFFALSE 36765
// exit ;
36763: GO 36791
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
36765: LD_VAR 0 1
36769: PUSH
36770: LD_INT 1
36772: PPUSH
36773: LD_VAR 0 1
36777: PPUSH
36778: CALL_OW 12
36782: ARRAY
36783: PPUSH
36784: LD_INT 200
36786: PPUSH
36787: CALL_OW 234
// end ;
36791: PPOPN 1
36793: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
36794: LD_EXP 64
36798: PUSH
36799: LD_EXP 93
36803: AND
36804: IFFALSE 36883
36806: GO 36808
36808: DISABLE
36809: LD_INT 0
36811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36812: LD_ADDR_VAR 0 1
36816: PUSH
36817: LD_INT 22
36819: PUSH
36820: LD_OWVAR 2
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 21
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PPUSH
36843: CALL_OW 69
36847: ST_TO_ADDR
// if not tmp then
36848: LD_VAR 0 1
36852: NOT
36853: IFFALSE 36857
// exit ;
36855: GO 36883
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36857: LD_VAR 0 1
36861: PUSH
36862: LD_INT 1
36864: PPUSH
36865: LD_VAR 0 1
36869: PPUSH
36870: CALL_OW 12
36874: ARRAY
36875: PPUSH
36876: LD_INT 60
36878: PPUSH
36879: CALL_OW 234
// end ;
36883: PPOPN 1
36885: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36886: LD_EXP 64
36890: PUSH
36891: LD_EXP 94
36895: AND
36896: IFFALSE 36995
36898: GO 36900
36900: DISABLE
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
// begin enable ;
36905: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36906: LD_ADDR_VAR 0 1
36910: PUSH
36911: LD_INT 22
36913: PUSH
36914: LD_OWVAR 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 61
36925: PUSH
36926: EMPTY
36927: LIST
36928: PUSH
36929: LD_INT 33
36931: PUSH
36932: LD_INT 2
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: PPUSH
36944: CALL_OW 69
36948: ST_TO_ADDR
// if not tmp then
36949: LD_VAR 0 1
36953: NOT
36954: IFFALSE 36958
// exit ;
36956: GO 36995
// for i in tmp do
36958: LD_ADDR_VAR 0 2
36962: PUSH
36963: LD_VAR 0 1
36967: PUSH
36968: FOR_IN
36969: IFFALSE 36993
// if IsControledBy ( i ) then
36971: LD_VAR 0 2
36975: PPUSH
36976: CALL_OW 312
36980: IFFALSE 36991
// ComUnlink ( i ) ;
36982: LD_VAR 0 2
36986: PPUSH
36987: CALL_OW 136
36991: GO 36968
36993: POP
36994: POP
// end ;
36995: PPOPN 2
36997: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36998: LD_EXP 64
37002: PUSH
37003: LD_EXP 95
37007: AND
37008: IFFALSE 37148
37010: GO 37012
37012: DISABLE
37013: LD_INT 0
37015: PPUSH
37016: PPUSH
// begin ToLua ( displayPowell(); ) ;
37017: LD_STRING displayPowell();
37019: PPUSH
37020: CALL_OW 559
// uc_side := 0 ;
37024: LD_ADDR_OWVAR 20
37028: PUSH
37029: LD_INT 0
37031: ST_TO_ADDR
// uc_nation := 2 ;
37032: LD_ADDR_OWVAR 21
37036: PUSH
37037: LD_INT 2
37039: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37040: LD_ADDR_OWVAR 37
37044: PUSH
37045: LD_INT 14
37047: ST_TO_ADDR
// vc_engine := engine_siberite ;
37048: LD_ADDR_OWVAR 39
37052: PUSH
37053: LD_INT 3
37055: ST_TO_ADDR
// vc_control := control_apeman ;
37056: LD_ADDR_OWVAR 38
37060: PUSH
37061: LD_INT 5
37063: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37064: LD_ADDR_OWVAR 40
37068: PUSH
37069: LD_INT 29
37071: ST_TO_ADDR
// un := CreateVehicle ;
37072: LD_ADDR_VAR 0 2
37076: PUSH
37077: CALL_OW 45
37081: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37082: LD_VAR 0 2
37086: PPUSH
37087: LD_INT 1
37089: PPUSH
37090: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37094: LD_INT 35
37096: PPUSH
37097: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37101: LD_VAR 0 2
37105: PPUSH
37106: LD_INT 22
37108: PUSH
37109: LD_OWVAR 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PPUSH
37118: CALL_OW 69
37122: PPUSH
37123: LD_VAR 0 2
37127: PPUSH
37128: CALL_OW 74
37132: PPUSH
37133: CALL_OW 115
// until IsDead ( un ) ;
37137: LD_VAR 0 2
37141: PPUSH
37142: CALL_OW 301
37146: IFFALSE 37094
// end ;
37148: PPOPN 2
37150: END
// every 0 0$1 trigger StreamModeActive and sStu do
37151: LD_EXP 64
37155: PUSH
37156: LD_EXP 103
37160: AND
37161: IFFALSE 37177
37163: GO 37165
37165: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37166: LD_STRING displayStucuk();
37168: PPUSH
37169: CALL_OW 559
// ResetFog ;
37173: CALL_OW 335
// end ;
37177: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37178: LD_EXP 64
37182: PUSH
37183: LD_EXP 96
37187: AND
37188: IFFALSE 37329
37190: GO 37192
37192: DISABLE
37193: LD_INT 0
37195: PPUSH
37196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37197: LD_ADDR_VAR 0 2
37201: PUSH
37202: LD_INT 22
37204: PUSH
37205: LD_OWVAR 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: LD_INT 21
37216: PUSH
37217: LD_INT 1
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PPUSH
37228: CALL_OW 69
37232: ST_TO_ADDR
// if not tmp then
37233: LD_VAR 0 2
37237: NOT
37238: IFFALSE 37242
// exit ;
37240: GO 37329
// un := tmp [ rand ( 1 , tmp ) ] ;
37242: LD_ADDR_VAR 0 1
37246: PUSH
37247: LD_VAR 0 2
37251: PUSH
37252: LD_INT 1
37254: PPUSH
37255: LD_VAR 0 2
37259: PPUSH
37260: CALL_OW 12
37264: ARRAY
37265: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37266: LD_VAR 0 1
37270: PPUSH
37271: LD_INT 0
37273: PPUSH
37274: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37278: LD_VAR 0 1
37282: PPUSH
37283: LD_OWVAR 3
37287: PUSH
37288: LD_VAR 0 1
37292: DIFF
37293: PPUSH
37294: LD_VAR 0 1
37298: PPUSH
37299: CALL_OW 74
37303: PPUSH
37304: CALL_OW 115
// wait ( 0 0$20 ) ;
37308: LD_INT 700
37310: PPUSH
37311: CALL_OW 67
// SetSide ( un , your_side ) ;
37315: LD_VAR 0 1
37319: PPUSH
37320: LD_OWVAR 2
37324: PPUSH
37325: CALL_OW 235
// end ;
37329: PPOPN 2
37331: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
37332: LD_EXP 64
37336: PUSH
37337: LD_EXP 97
37341: AND
37342: IFFALSE 37448
37344: GO 37346
37346: DISABLE
37347: LD_INT 0
37349: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37350: LD_ADDR_VAR 0 1
37354: PUSH
37355: LD_INT 22
37357: PUSH
37358: LD_OWVAR 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 2
37369: PUSH
37370: LD_INT 30
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 30
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PPUSH
37399: CALL_OW 69
37403: ST_TO_ADDR
// if not depot then
37404: LD_VAR 0 1
37408: NOT
37409: IFFALSE 37413
// exit ;
37411: GO 37448
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
37413: LD_VAR 0 1
37417: PUSH
37418: LD_INT 1
37420: ARRAY
37421: PPUSH
37422: CALL_OW 250
37426: PPUSH
37427: LD_VAR 0 1
37431: PUSH
37432: LD_INT 1
37434: ARRAY
37435: PPUSH
37436: CALL_OW 251
37440: PPUSH
37441: LD_INT 70
37443: PPUSH
37444: CALL_OW 495
// end ;
37448: PPOPN 1
37450: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
37451: LD_EXP 64
37455: PUSH
37456: LD_EXP 98
37460: AND
37461: IFFALSE 37672
37463: GO 37465
37465: DISABLE
37466: LD_INT 0
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37473: LD_ADDR_VAR 0 5
37477: PUSH
37478: LD_INT 22
37480: PUSH
37481: LD_OWVAR 2
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 21
37492: PUSH
37493: LD_INT 1
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PPUSH
37504: CALL_OW 69
37508: ST_TO_ADDR
// if not tmp then
37509: LD_VAR 0 5
37513: NOT
37514: IFFALSE 37518
// exit ;
37516: GO 37672
// for i in tmp do
37518: LD_ADDR_VAR 0 1
37522: PUSH
37523: LD_VAR 0 5
37527: PUSH
37528: FOR_IN
37529: IFFALSE 37670
// begin d := rand ( 0 , 5 ) ;
37531: LD_ADDR_VAR 0 4
37535: PUSH
37536: LD_INT 0
37538: PPUSH
37539: LD_INT 5
37541: PPUSH
37542: CALL_OW 12
37546: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
37547: LD_ADDR_VAR 0 2
37551: PUSH
37552: LD_VAR 0 1
37556: PPUSH
37557: CALL_OW 250
37561: PPUSH
37562: LD_VAR 0 4
37566: PPUSH
37567: LD_INT 3
37569: PPUSH
37570: LD_INT 12
37572: PPUSH
37573: CALL_OW 12
37577: PPUSH
37578: CALL_OW 272
37582: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
37583: LD_ADDR_VAR 0 3
37587: PUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 251
37597: PPUSH
37598: LD_VAR 0 4
37602: PPUSH
37603: LD_INT 3
37605: PPUSH
37606: LD_INT 12
37608: PPUSH
37609: CALL_OW 12
37613: PPUSH
37614: CALL_OW 273
37618: ST_TO_ADDR
// if ValidHex ( x , y ) then
37619: LD_VAR 0 2
37623: PPUSH
37624: LD_VAR 0 3
37628: PPUSH
37629: CALL_OW 488
37633: IFFALSE 37668
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
37635: LD_VAR 0 1
37639: PPUSH
37640: LD_VAR 0 2
37644: PPUSH
37645: LD_VAR 0 3
37649: PPUSH
37650: LD_INT 3
37652: PPUSH
37653: LD_INT 6
37655: PPUSH
37656: CALL_OW 12
37660: PPUSH
37661: LD_INT 1
37663: PPUSH
37664: CALL_OW 483
// end ;
37668: GO 37528
37670: POP
37671: POP
// end ;
37672: PPOPN 5
37674: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
37675: LD_EXP 64
37679: PUSH
37680: LD_EXP 99
37684: AND
37685: IFFALSE 37779
37687: GO 37689
37689: DISABLE
37690: LD_INT 0
37692: PPUSH
37693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
37694: LD_ADDR_VAR 0 2
37698: PUSH
37699: LD_INT 22
37701: PUSH
37702: LD_OWVAR 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 32
37713: PUSH
37714: LD_INT 1
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 21
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PPUSH
37736: CALL_OW 69
37740: ST_TO_ADDR
// if not tmp then
37741: LD_VAR 0 2
37745: NOT
37746: IFFALSE 37750
// exit ;
37748: GO 37779
// for i in tmp do
37750: LD_ADDR_VAR 0 1
37754: PUSH
37755: LD_VAR 0 2
37759: PUSH
37760: FOR_IN
37761: IFFALSE 37777
// SetFuel ( i , 0 ) ;
37763: LD_VAR 0 1
37767: PPUSH
37768: LD_INT 0
37770: PPUSH
37771: CALL_OW 240
37775: GO 37760
37777: POP
37778: POP
// end ;
37779: PPOPN 2
37781: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
37782: LD_EXP 64
37786: PUSH
37787: LD_EXP 100
37791: AND
37792: IFFALSE 37858
37794: GO 37796
37796: DISABLE
37797: LD_INT 0
37799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37800: LD_ADDR_VAR 0 1
37804: PUSH
37805: LD_INT 22
37807: PUSH
37808: LD_OWVAR 2
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 30
37819: PUSH
37820: LD_INT 29
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: EMPTY
37828: LIST
37829: LIST
37830: PPUSH
37831: CALL_OW 69
37835: ST_TO_ADDR
// if not tmp then
37836: LD_VAR 0 1
37840: NOT
37841: IFFALSE 37845
// exit ;
37843: GO 37858
// DestroyUnit ( tmp [ 1 ] ) ;
37845: LD_VAR 0 1
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PPUSH
37854: CALL_OW 65
// end ;
37858: PPOPN 1
37860: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37861: LD_EXP 64
37865: PUSH
37866: LD_EXP 102
37870: AND
37871: IFFALSE 38000
37873: GO 37875
37875: DISABLE
37876: LD_INT 0
37878: PPUSH
// begin uc_side := 0 ;
37879: LD_ADDR_OWVAR 20
37883: PUSH
37884: LD_INT 0
37886: ST_TO_ADDR
// uc_nation := nation_arabian ;
37887: LD_ADDR_OWVAR 21
37891: PUSH
37892: LD_INT 2
37894: ST_TO_ADDR
// hc_gallery :=  ;
37895: LD_ADDR_OWVAR 33
37899: PUSH
37900: LD_STRING 
37902: ST_TO_ADDR
// hc_name :=  ;
37903: LD_ADDR_OWVAR 26
37907: PUSH
37908: LD_STRING 
37910: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37911: LD_INT 1
37913: PPUSH
37914: LD_INT 11
37916: PPUSH
37917: LD_INT 10
37919: PPUSH
37920: CALL_OW 380
// un := CreateHuman ;
37924: LD_ADDR_VAR 0 1
37928: PUSH
37929: CALL_OW 44
37933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37934: LD_VAR 0 1
37938: PPUSH
37939: LD_INT 1
37941: PPUSH
37942: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37946: LD_INT 35
37948: PPUSH
37949: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37953: LD_VAR 0 1
37957: PPUSH
37958: LD_INT 22
37960: PUSH
37961: LD_OWVAR 2
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PPUSH
37970: CALL_OW 69
37974: PPUSH
37975: LD_VAR 0 1
37979: PPUSH
37980: CALL_OW 74
37984: PPUSH
37985: CALL_OW 115
// until IsDead ( un ) ;
37989: LD_VAR 0 1
37993: PPUSH
37994: CALL_OW 301
37998: IFFALSE 37946
// end ;
38000: PPOPN 1
38002: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38003: LD_EXP 64
38007: PUSH
38008: LD_EXP 104
38012: AND
38013: IFFALSE 38025
38015: GO 38017
38017: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38018: LD_STRING earthquake(getX(game), 0, 32)
38020: PPUSH
38021: CALL_OW 559
38025: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38026: LD_EXP 64
38030: PUSH
38031: LD_EXP 105
38035: AND
38036: IFFALSE 38127
38038: GO 38040
38040: DISABLE
38041: LD_INT 0
38043: PPUSH
// begin enable ;
38044: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38045: LD_ADDR_VAR 0 1
38049: PUSH
38050: LD_INT 22
38052: PUSH
38053: LD_OWVAR 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 21
38064: PUSH
38065: LD_INT 2
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 33
38074: PUSH
38075: LD_INT 3
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: LIST
38086: PPUSH
38087: CALL_OW 69
38091: ST_TO_ADDR
// if not tmp then
38092: LD_VAR 0 1
38096: NOT
38097: IFFALSE 38101
// exit ;
38099: GO 38127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38101: LD_VAR 0 1
38105: PUSH
38106: LD_INT 1
38108: PPUSH
38109: LD_VAR 0 1
38113: PPUSH
38114: CALL_OW 12
38118: ARRAY
38119: PPUSH
38120: LD_INT 1
38122: PPUSH
38123: CALL_OW 234
// end ;
38127: PPOPN 1
38129: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38130: LD_EXP 64
38134: PUSH
38135: LD_EXP 106
38139: AND
38140: IFFALSE 38281
38142: GO 38144
38144: DISABLE
38145: LD_INT 0
38147: PPUSH
38148: PPUSH
38149: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38150: LD_ADDR_VAR 0 3
38154: PUSH
38155: LD_INT 22
38157: PUSH
38158: LD_OWVAR 2
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 25
38169: PUSH
38170: LD_INT 1
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PPUSH
38181: CALL_OW 69
38185: ST_TO_ADDR
// if not tmp then
38186: LD_VAR 0 3
38190: NOT
38191: IFFALSE 38195
// exit ;
38193: GO 38281
// un := tmp [ rand ( 1 , tmp ) ] ;
38195: LD_ADDR_VAR 0 2
38199: PUSH
38200: LD_VAR 0 3
38204: PUSH
38205: LD_INT 1
38207: PPUSH
38208: LD_VAR 0 3
38212: PPUSH
38213: CALL_OW 12
38217: ARRAY
38218: ST_TO_ADDR
// if Crawls ( un ) then
38219: LD_VAR 0 2
38223: PPUSH
38224: CALL_OW 318
38228: IFFALSE 38239
// ComWalk ( un ) ;
38230: LD_VAR 0 2
38234: PPUSH
38235: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38239: LD_VAR 0 2
38243: PPUSH
38244: LD_INT 9
38246: PPUSH
38247: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38251: LD_INT 28
38253: PPUSH
38254: LD_OWVAR 2
38258: PPUSH
38259: LD_INT 2
38261: PPUSH
38262: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38266: LD_INT 29
38268: PPUSH
38269: LD_OWVAR 2
38273: PPUSH
38274: LD_INT 2
38276: PPUSH
38277: CALL_OW 322
// end ;
38281: PPOPN 3
38283: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38284: LD_EXP 64
38288: PUSH
38289: LD_EXP 107
38293: AND
38294: IFFALSE 38405
38296: GO 38298
38298: DISABLE
38299: LD_INT 0
38301: PPUSH
38302: PPUSH
38303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38304: LD_ADDR_VAR 0 3
38308: PUSH
38309: LD_INT 22
38311: PUSH
38312: LD_OWVAR 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 25
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PPUSH
38335: CALL_OW 69
38339: ST_TO_ADDR
// if not tmp then
38340: LD_VAR 0 3
38344: NOT
38345: IFFALSE 38349
// exit ;
38347: GO 38405
// un := tmp [ rand ( 1 , tmp ) ] ;
38349: LD_ADDR_VAR 0 2
38353: PUSH
38354: LD_VAR 0 3
38358: PUSH
38359: LD_INT 1
38361: PPUSH
38362: LD_VAR 0 3
38366: PPUSH
38367: CALL_OW 12
38371: ARRAY
38372: ST_TO_ADDR
// if Crawls ( un ) then
38373: LD_VAR 0 2
38377: PPUSH
38378: CALL_OW 318
38382: IFFALSE 38393
// ComWalk ( un ) ;
38384: LD_VAR 0 2
38388: PPUSH
38389: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38393: LD_VAR 0 2
38397: PPUSH
38398: LD_INT 8
38400: PPUSH
38401: CALL_OW 336
// end ;
38405: PPOPN 3
38407: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
38408: LD_EXP 64
38412: PUSH
38413: LD_EXP 108
38417: AND
38418: IFFALSE 38562
38420: GO 38422
38422: DISABLE
38423: LD_INT 0
38425: PPUSH
38426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
38427: LD_ADDR_VAR 0 2
38431: PUSH
38432: LD_INT 22
38434: PUSH
38435: LD_OWVAR 2
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 21
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 2
38456: PUSH
38457: LD_INT 34
38459: PUSH
38460: LD_INT 12
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 34
38469: PUSH
38470: LD_INT 51
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 34
38479: PUSH
38480: LD_INT 32
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: PPUSH
38498: CALL_OW 69
38502: ST_TO_ADDR
// if not tmp then
38503: LD_VAR 0 2
38507: NOT
38508: IFFALSE 38512
// exit ;
38510: GO 38562
// for i in tmp do
38512: LD_ADDR_VAR 0 1
38516: PUSH
38517: LD_VAR 0 2
38521: PUSH
38522: FOR_IN
38523: IFFALSE 38560
// if GetCargo ( i , mat_artifact ) = 0 then
38525: LD_VAR 0 1
38529: PPUSH
38530: LD_INT 4
38532: PPUSH
38533: CALL_OW 289
38537: PUSH
38538: LD_INT 0
38540: EQUAL
38541: IFFALSE 38558
// SetCargo ( i , mat_siberit , 100 ) ;
38543: LD_VAR 0 1
38547: PPUSH
38548: LD_INT 3
38550: PPUSH
38551: LD_INT 100
38553: PPUSH
38554: CALL_OW 290
38558: GO 38522
38560: POP
38561: POP
// end ;
38562: PPOPN 2
38564: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
38565: LD_EXP 64
38569: PUSH
38570: LD_EXP 109
38574: AND
38575: IFFALSE 38758
38577: GO 38579
38579: DISABLE
38580: LD_INT 0
38582: PPUSH
38583: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38584: LD_ADDR_VAR 0 2
38588: PUSH
38589: LD_INT 22
38591: PUSH
38592: LD_OWVAR 2
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PPUSH
38601: CALL_OW 69
38605: ST_TO_ADDR
// if not tmp then
38606: LD_VAR 0 2
38610: NOT
38611: IFFALSE 38615
// exit ;
38613: GO 38758
// for i := 1 to 2 do
38615: LD_ADDR_VAR 0 1
38619: PUSH
38620: DOUBLE
38621: LD_INT 1
38623: DEC
38624: ST_TO_ADDR
38625: LD_INT 2
38627: PUSH
38628: FOR_TO
38629: IFFALSE 38756
// begin uc_side := your_side ;
38631: LD_ADDR_OWVAR 20
38635: PUSH
38636: LD_OWVAR 2
38640: ST_TO_ADDR
// uc_nation := nation_american ;
38641: LD_ADDR_OWVAR 21
38645: PUSH
38646: LD_INT 1
38648: ST_TO_ADDR
// vc_chassis := us_morphling ;
38649: LD_ADDR_OWVAR 37
38653: PUSH
38654: LD_INT 5
38656: ST_TO_ADDR
// vc_engine := engine_siberite ;
38657: LD_ADDR_OWVAR 39
38661: PUSH
38662: LD_INT 3
38664: ST_TO_ADDR
// vc_control := control_computer ;
38665: LD_ADDR_OWVAR 38
38669: PUSH
38670: LD_INT 3
38672: ST_TO_ADDR
// vc_weapon := us_double_laser ;
38673: LD_ADDR_OWVAR 40
38677: PUSH
38678: LD_INT 10
38680: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
38681: LD_VAR 0 2
38685: PUSH
38686: LD_INT 1
38688: ARRAY
38689: PPUSH
38690: CALL_OW 310
38694: NOT
38695: IFFALSE 38742
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
38697: CALL_OW 45
38701: PPUSH
38702: LD_VAR 0 2
38706: PUSH
38707: LD_INT 1
38709: ARRAY
38710: PPUSH
38711: CALL_OW 250
38715: PPUSH
38716: LD_VAR 0 2
38720: PUSH
38721: LD_INT 1
38723: ARRAY
38724: PPUSH
38725: CALL_OW 251
38729: PPUSH
38730: LD_INT 12
38732: PPUSH
38733: LD_INT 1
38735: PPUSH
38736: CALL_OW 50
38740: GO 38754
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
38742: CALL_OW 45
38746: PPUSH
38747: LD_INT 1
38749: PPUSH
38750: CALL_OW 51
// end ;
38754: GO 38628
38756: POP
38757: POP
// end ;
38758: PPOPN 2
38760: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
38761: LD_EXP 64
38765: PUSH
38766: LD_EXP 110
38770: AND
38771: IFFALSE 38993
38773: GO 38775
38775: DISABLE
38776: LD_INT 0
38778: PPUSH
38779: PPUSH
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38784: LD_ADDR_VAR 0 6
38788: PUSH
38789: LD_INT 22
38791: PUSH
38792: LD_OWVAR 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 21
38803: PUSH
38804: LD_INT 1
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 3
38813: PUSH
38814: LD_INT 23
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: PPUSH
38833: CALL_OW 69
38837: ST_TO_ADDR
// if not tmp then
38838: LD_VAR 0 6
38842: NOT
38843: IFFALSE 38847
// exit ;
38845: GO 38993
// s1 := rand ( 1 , 4 ) ;
38847: LD_ADDR_VAR 0 2
38851: PUSH
38852: LD_INT 1
38854: PPUSH
38855: LD_INT 4
38857: PPUSH
38858: CALL_OW 12
38862: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38863: LD_ADDR_VAR 0 4
38867: PUSH
38868: LD_VAR 0 6
38872: PUSH
38873: LD_INT 1
38875: ARRAY
38876: PPUSH
38877: LD_VAR 0 2
38881: PPUSH
38882: CALL_OW 259
38886: ST_TO_ADDR
// if s1 = 1 then
38887: LD_VAR 0 2
38891: PUSH
38892: LD_INT 1
38894: EQUAL
38895: IFFALSE 38915
// s2 := rand ( 2 , 4 ) else
38897: LD_ADDR_VAR 0 3
38901: PUSH
38902: LD_INT 2
38904: PPUSH
38905: LD_INT 4
38907: PPUSH
38908: CALL_OW 12
38912: ST_TO_ADDR
38913: GO 38923
// s2 := 1 ;
38915: LD_ADDR_VAR 0 3
38919: PUSH
38920: LD_INT 1
38922: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38923: LD_ADDR_VAR 0 5
38927: PUSH
38928: LD_VAR 0 6
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: PPUSH
38937: LD_VAR 0 3
38941: PPUSH
38942: CALL_OW 259
38946: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38947: LD_VAR 0 6
38951: PUSH
38952: LD_INT 1
38954: ARRAY
38955: PPUSH
38956: LD_VAR 0 2
38960: PPUSH
38961: LD_VAR 0 5
38965: PPUSH
38966: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38970: LD_VAR 0 6
38974: PUSH
38975: LD_INT 1
38977: ARRAY
38978: PPUSH
38979: LD_VAR 0 3
38983: PPUSH
38984: LD_VAR 0 4
38988: PPUSH
38989: CALL_OW 237
// end ;
38993: PPOPN 6
38995: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38996: LD_EXP 64
39000: PUSH
39001: LD_EXP 111
39005: AND
39006: IFFALSE 39085
39008: GO 39010
39010: DISABLE
39011: LD_INT 0
39013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39014: LD_ADDR_VAR 0 1
39018: PUSH
39019: LD_INT 22
39021: PUSH
39022: LD_OWVAR 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 30
39033: PUSH
39034: LD_INT 3
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PPUSH
39045: CALL_OW 69
39049: ST_TO_ADDR
// if not tmp then
39050: LD_VAR 0 1
39054: NOT
39055: IFFALSE 39059
// exit ;
39057: GO 39085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39059: LD_VAR 0 1
39063: PUSH
39064: LD_INT 1
39066: PPUSH
39067: LD_VAR 0 1
39071: PPUSH
39072: CALL_OW 12
39076: ARRAY
39077: PPUSH
39078: LD_INT 1
39080: PPUSH
39081: CALL_OW 234
// end ;
39085: PPOPN 1
39087: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39088: LD_EXP 64
39092: PUSH
39093: LD_EXP 112
39097: AND
39098: IFFALSE 39210
39100: GO 39102
39102: DISABLE
39103: LD_INT 0
39105: PPUSH
39106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39107: LD_ADDR_VAR 0 2
39111: PUSH
39112: LD_INT 22
39114: PUSH
39115: LD_OWVAR 2
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 30
39129: PUSH
39130: LD_INT 27
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 30
39139: PUSH
39140: LD_INT 26
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 30
39149: PUSH
39150: LD_INT 28
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PPUSH
39167: CALL_OW 69
39171: ST_TO_ADDR
// if not tmp then
39172: LD_VAR 0 2
39176: NOT
39177: IFFALSE 39181
// exit ;
39179: GO 39210
// for i in tmp do
39181: LD_ADDR_VAR 0 1
39185: PUSH
39186: LD_VAR 0 2
39190: PUSH
39191: FOR_IN
39192: IFFALSE 39208
// SetLives ( i , 1 ) ;
39194: LD_VAR 0 1
39198: PPUSH
39199: LD_INT 1
39201: PPUSH
39202: CALL_OW 234
39206: GO 39191
39208: POP
39209: POP
// end ;
39210: PPOPN 2
39212: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39213: LD_EXP 64
39217: PUSH
39218: LD_EXP 113
39222: AND
39223: IFFALSE 39510
39225: GO 39227
39227: DISABLE
39228: LD_INT 0
39230: PPUSH
39231: PPUSH
39232: PPUSH
// begin i := rand ( 1 , 7 ) ;
39233: LD_ADDR_VAR 0 1
39237: PUSH
39238: LD_INT 1
39240: PPUSH
39241: LD_INT 7
39243: PPUSH
39244: CALL_OW 12
39248: ST_TO_ADDR
// case i of 1 :
39249: LD_VAR 0 1
39253: PUSH
39254: LD_INT 1
39256: DOUBLE
39257: EQUAL
39258: IFTRUE 39262
39260: GO 39272
39262: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39263: LD_STRING earthquake(getX(game), 0, 32)
39265: PPUSH
39266: CALL_OW 559
39270: GO 39510
39272: LD_INT 2
39274: DOUBLE
39275: EQUAL
39276: IFTRUE 39280
39278: GO 39294
39280: POP
// begin ToLua ( displayStucuk(); ) ;
39281: LD_STRING displayStucuk();
39283: PPUSH
39284: CALL_OW 559
// ResetFog ;
39288: CALL_OW 335
// end ; 3 :
39292: GO 39510
39294: LD_INT 3
39296: DOUBLE
39297: EQUAL
39298: IFTRUE 39302
39300: GO 39406
39302: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39303: LD_ADDR_VAR 0 2
39307: PUSH
39308: LD_INT 22
39310: PUSH
39311: LD_OWVAR 2
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 25
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PPUSH
39334: CALL_OW 69
39338: ST_TO_ADDR
// if not tmp then
39339: LD_VAR 0 2
39343: NOT
39344: IFFALSE 39348
// exit ;
39346: GO 39510
// un := tmp [ rand ( 1 , tmp ) ] ;
39348: LD_ADDR_VAR 0 3
39352: PUSH
39353: LD_VAR 0 2
39357: PUSH
39358: LD_INT 1
39360: PPUSH
39361: LD_VAR 0 2
39365: PPUSH
39366: CALL_OW 12
39370: ARRAY
39371: ST_TO_ADDR
// if Crawls ( un ) then
39372: LD_VAR 0 3
39376: PPUSH
39377: CALL_OW 318
39381: IFFALSE 39392
// ComWalk ( un ) ;
39383: LD_VAR 0 3
39387: PPUSH
39388: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39392: LD_VAR 0 3
39396: PPUSH
39397: LD_INT 8
39399: PPUSH
39400: CALL_OW 336
// end ; 4 :
39404: GO 39510
39406: LD_INT 4
39408: DOUBLE
39409: EQUAL
39410: IFTRUE 39414
39412: GO 39488
39414: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39415: LD_ADDR_VAR 0 2
39419: PUSH
39420: LD_INT 22
39422: PUSH
39423: LD_OWVAR 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 30
39434: PUSH
39435: LD_INT 29
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PPUSH
39446: CALL_OW 69
39450: ST_TO_ADDR
// if not tmp then
39451: LD_VAR 0 2
39455: NOT
39456: IFFALSE 39460
// exit ;
39458: GO 39510
// CenterNowOnUnits ( tmp [ 1 ] ) ;
39460: LD_VAR 0 2
39464: PUSH
39465: LD_INT 1
39467: ARRAY
39468: PPUSH
39469: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
39473: LD_VAR 0 2
39477: PUSH
39478: LD_INT 1
39480: ARRAY
39481: PPUSH
39482: CALL_OW 65
// end ; 5 .. 7 :
39486: GO 39510
39488: LD_INT 5
39490: DOUBLE
39491: GREATEREQUAL
39492: IFFALSE 39500
39494: LD_INT 7
39496: DOUBLE
39497: LESSEQUAL
39498: IFTRUE 39502
39500: GO 39509
39502: POP
// StreamSibBomb ; end ;
39503: CALL 35747 0 0
39507: GO 39510
39509: POP
// end ;
39510: PPOPN 3
39512: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
39513: LD_EXP 64
39517: PUSH
39518: LD_EXP 114
39522: AND
39523: IFFALSE 39679
39525: GO 39527
39527: DISABLE
39528: LD_INT 0
39530: PPUSH
39531: PPUSH
39532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
39533: LD_ADDR_VAR 0 2
39537: PUSH
39538: LD_INT 81
39540: PUSH
39541: LD_OWVAR 2
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 2
39552: PUSH
39553: LD_INT 21
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 21
39565: PUSH
39566: LD_INT 2
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PPUSH
39582: CALL_OW 69
39586: ST_TO_ADDR
// if not tmp then
39587: LD_VAR 0 2
39591: NOT
39592: IFFALSE 39596
// exit ;
39594: GO 39679
// p := 0 ;
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_INT 0
39603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39604: LD_INT 35
39606: PPUSH
39607: CALL_OW 67
// p := p + 1 ;
39611: LD_ADDR_VAR 0 3
39615: PUSH
39616: LD_VAR 0 3
39620: PUSH
39621: LD_INT 1
39623: PLUS
39624: ST_TO_ADDR
// for i in tmp do
39625: LD_ADDR_VAR 0 1
39629: PUSH
39630: LD_VAR 0 2
39634: PUSH
39635: FOR_IN
39636: IFFALSE 39667
// if GetLives ( i ) < 1000 then
39638: LD_VAR 0 1
39642: PPUSH
39643: CALL_OW 256
39647: PUSH
39648: LD_INT 1000
39650: LESS
39651: IFFALSE 39665
// SetLives ( i , 1000 ) ;
39653: LD_VAR 0 1
39657: PPUSH
39658: LD_INT 1000
39660: PPUSH
39661: CALL_OW 234
39665: GO 39635
39667: POP
39668: POP
// until p > 20 ;
39669: LD_VAR 0 3
39673: PUSH
39674: LD_INT 20
39676: GREATER
39677: IFFALSE 39604
// end ;
39679: PPOPN 3
39681: END
// every 0 0$1 trigger StreamModeActive and sTime do
39682: LD_EXP 64
39686: PUSH
39687: LD_EXP 115
39691: AND
39692: IFFALSE 39727
39694: GO 39696
39696: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
39697: LD_INT 28
39699: PPUSH
39700: LD_OWVAR 2
39704: PPUSH
39705: LD_INT 2
39707: PPUSH
39708: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
39712: LD_INT 30
39714: PPUSH
39715: LD_OWVAR 2
39719: PPUSH
39720: LD_INT 2
39722: PPUSH
39723: CALL_OW 322
// end ;
39727: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
39728: LD_EXP 64
39732: PUSH
39733: LD_EXP 116
39737: AND
39738: IFFALSE 39859
39740: GO 39742
39742: DISABLE
39743: LD_INT 0
39745: PPUSH
39746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39747: LD_ADDR_VAR 0 2
39751: PUSH
39752: LD_INT 22
39754: PUSH
39755: LD_OWVAR 2
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 21
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 3
39776: PUSH
39777: LD_INT 23
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: LIST
39795: PPUSH
39796: CALL_OW 69
39800: ST_TO_ADDR
// if not tmp then
39801: LD_VAR 0 2
39805: NOT
39806: IFFALSE 39810
// exit ;
39808: GO 39859
// for i in tmp do
39810: LD_ADDR_VAR 0 1
39814: PUSH
39815: LD_VAR 0 2
39819: PUSH
39820: FOR_IN
39821: IFFALSE 39857
// begin if Crawls ( i ) then
39823: LD_VAR 0 1
39827: PPUSH
39828: CALL_OW 318
39832: IFFALSE 39843
// ComWalk ( i ) ;
39834: LD_VAR 0 1
39838: PPUSH
39839: CALL_OW 138
// SetClass ( i , 2 ) ;
39843: LD_VAR 0 1
39847: PPUSH
39848: LD_INT 2
39850: PPUSH
39851: CALL_OW 336
// end ;
39855: GO 39820
39857: POP
39858: POP
// end ;
39859: PPOPN 2
39861: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39862: LD_EXP 64
39866: PUSH
39867: LD_EXP 117
39871: AND
39872: IFFALSE 40160
39874: GO 39876
39876: DISABLE
39877: LD_INT 0
39879: PPUSH
39880: PPUSH
39881: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39882: LD_OWVAR 2
39886: PPUSH
39887: LD_INT 9
39889: PPUSH
39890: LD_INT 1
39892: PPUSH
39893: LD_INT 1
39895: PPUSH
39896: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39900: LD_INT 9
39902: PPUSH
39903: LD_OWVAR 2
39907: PPUSH
39908: CALL_OW 343
// uc_side := 9 ;
39912: LD_ADDR_OWVAR 20
39916: PUSH
39917: LD_INT 9
39919: ST_TO_ADDR
// uc_nation := 2 ;
39920: LD_ADDR_OWVAR 21
39924: PUSH
39925: LD_INT 2
39927: ST_TO_ADDR
// hc_name := Dark Warrior ;
39928: LD_ADDR_OWVAR 26
39932: PUSH
39933: LD_STRING Dark Warrior
39935: ST_TO_ADDR
// hc_gallery :=  ;
39936: LD_ADDR_OWVAR 33
39940: PUSH
39941: LD_STRING 
39943: ST_TO_ADDR
// hc_noskilllimit := true ;
39944: LD_ADDR_OWVAR 76
39948: PUSH
39949: LD_INT 1
39951: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39952: LD_ADDR_OWVAR 31
39956: PUSH
39957: LD_INT 30
39959: PUSH
39960: LD_INT 30
39962: PUSH
39963: LD_INT 30
39965: PUSH
39966: LD_INT 30
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: ST_TO_ADDR
// un := CreateHuman ;
39975: LD_ADDR_VAR 0 3
39979: PUSH
39980: CALL_OW 44
39984: ST_TO_ADDR
// hc_noskilllimit := false ;
39985: LD_ADDR_OWVAR 76
39989: PUSH
39990: LD_INT 0
39992: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39993: LD_VAR 0 3
39997: PPUSH
39998: LD_INT 1
40000: PPUSH
40001: CALL_OW 51
// ToLua ( playRanger() ) ;
40005: LD_STRING playRanger()
40007: PPUSH
40008: CALL_OW 559
// p := 0 ;
40012: LD_ADDR_VAR 0 2
40016: PUSH
40017: LD_INT 0
40019: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40020: LD_INT 35
40022: PPUSH
40023: CALL_OW 67
// p := p + 1 ;
40027: LD_ADDR_VAR 0 2
40031: PUSH
40032: LD_VAR 0 2
40036: PUSH
40037: LD_INT 1
40039: PLUS
40040: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40041: LD_VAR 0 3
40045: PPUSH
40046: CALL_OW 256
40050: PUSH
40051: LD_INT 1000
40053: LESS
40054: IFFALSE 40068
// SetLives ( un , 1000 ) ;
40056: LD_VAR 0 3
40060: PPUSH
40061: LD_INT 1000
40063: PPUSH
40064: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40068: LD_VAR 0 3
40072: PPUSH
40073: LD_INT 81
40075: PUSH
40076: LD_OWVAR 2
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 91
40087: PUSH
40088: LD_VAR 0 3
40092: PUSH
40093: LD_INT 30
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: LIST
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PPUSH
40105: CALL_OW 69
40109: PPUSH
40110: LD_VAR 0 3
40114: PPUSH
40115: CALL_OW 74
40119: PPUSH
40120: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
40124: LD_VAR 0 2
40128: PUSH
40129: LD_INT 80
40131: GREATER
40132: PUSH
40133: LD_VAR 0 3
40137: PPUSH
40138: CALL_OW 301
40142: OR
40143: IFFALSE 40020
// if un then
40145: LD_VAR 0 3
40149: IFFALSE 40160
// RemoveUnit ( un ) ;
40151: LD_VAR 0 3
40155: PPUSH
40156: CALL_OW 64
// end ;
40160: PPOPN 3
40162: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
40163: LD_EXP 118
40167: IFFALSE 40283
40169: GO 40171
40171: DISABLE
40172: LD_INT 0
40174: PPUSH
40175: PPUSH
40176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40177: LD_ADDR_VAR 0 2
40181: PUSH
40182: LD_INT 81
40184: PUSH
40185: LD_OWVAR 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 21
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PPUSH
40208: CALL_OW 69
40212: ST_TO_ADDR
// ToLua ( playComputer() ) ;
40213: LD_STRING playComputer()
40215: PPUSH
40216: CALL_OW 559
// if not tmp then
40220: LD_VAR 0 2
40224: NOT
40225: IFFALSE 40229
// exit ;
40227: GO 40283
// for i in tmp do
40229: LD_ADDR_VAR 0 1
40233: PUSH
40234: LD_VAR 0 2
40238: PUSH
40239: FOR_IN
40240: IFFALSE 40281
// for j := 1 to 4 do
40242: LD_ADDR_VAR 0 3
40246: PUSH
40247: DOUBLE
40248: LD_INT 1
40250: DEC
40251: ST_TO_ADDR
40252: LD_INT 4
40254: PUSH
40255: FOR_TO
40256: IFFALSE 40277
// SetSkill ( i , j , 10 ) ;
40258: LD_VAR 0 1
40262: PPUSH
40263: LD_VAR 0 3
40267: PPUSH
40268: LD_INT 10
40270: PPUSH
40271: CALL_OW 237
40275: GO 40255
40277: POP
40278: POP
40279: GO 40239
40281: POP
40282: POP
// end ;
40283: PPOPN 3
40285: END
// every 0 0$1 trigger s30 do var i , tmp ;
40286: LD_EXP 119
40290: IFFALSE 40359
40292: GO 40294
40294: DISABLE
40295: LD_INT 0
40297: PPUSH
40298: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40299: LD_ADDR_VAR 0 2
40303: PUSH
40304: LD_INT 22
40306: PUSH
40307: LD_OWVAR 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PPUSH
40316: CALL_OW 69
40320: ST_TO_ADDR
// if not tmp then
40321: LD_VAR 0 2
40325: NOT
40326: IFFALSE 40330
// exit ;
40328: GO 40359
// for i in tmp do
40330: LD_ADDR_VAR 0 1
40334: PUSH
40335: LD_VAR 0 2
40339: PUSH
40340: FOR_IN
40341: IFFALSE 40357
// SetLives ( i , 300 ) ;
40343: LD_VAR 0 1
40347: PPUSH
40348: LD_INT 300
40350: PPUSH
40351: CALL_OW 234
40355: GO 40340
40357: POP
40358: POP
// end ;
40359: PPOPN 2
40361: END
// every 0 0$1 trigger s60 do var i , tmp ;
40362: LD_EXP 120
40366: IFFALSE 40435
40368: GO 40370
40370: DISABLE
40371: LD_INT 0
40373: PPUSH
40374: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40375: LD_ADDR_VAR 0 2
40379: PUSH
40380: LD_INT 22
40382: PUSH
40383: LD_OWVAR 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PPUSH
40392: CALL_OW 69
40396: ST_TO_ADDR
// if not tmp then
40397: LD_VAR 0 2
40401: NOT
40402: IFFALSE 40406
// exit ;
40404: GO 40435
// for i in tmp do
40406: LD_ADDR_VAR 0 1
40410: PUSH
40411: LD_VAR 0 2
40415: PUSH
40416: FOR_IN
40417: IFFALSE 40433
// SetLives ( i , 600 ) ;
40419: LD_VAR 0 1
40423: PPUSH
40424: LD_INT 600
40426: PPUSH
40427: CALL_OW 234
40431: GO 40416
40433: POP
40434: POP
// end ;
40435: PPOPN 2
40437: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40438: LD_INT 0
40440: PPUSH
// case cmd of 301 :
40441: LD_VAR 0 1
40445: PUSH
40446: LD_INT 301
40448: DOUBLE
40449: EQUAL
40450: IFTRUE 40454
40452: GO 40486
40454: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
40455: LD_VAR 0 6
40459: PPUSH
40460: LD_VAR 0 7
40464: PPUSH
40465: LD_VAR 0 8
40469: PPUSH
40470: LD_VAR 0 4
40474: PPUSH
40475: LD_VAR 0 5
40479: PPUSH
40480: CALL 41695 0 5
40484: GO 40607
40486: LD_INT 302
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40494
40492: GO 40531
40494: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
40495: LD_VAR 0 6
40499: PPUSH
40500: LD_VAR 0 7
40504: PPUSH
40505: LD_VAR 0 8
40509: PPUSH
40510: LD_VAR 0 9
40514: PPUSH
40515: LD_VAR 0 4
40519: PPUSH
40520: LD_VAR 0 5
40524: PPUSH
40525: CALL 41786 0 6
40529: GO 40607
40531: LD_INT 303
40533: DOUBLE
40534: EQUAL
40535: IFTRUE 40539
40537: GO 40576
40539: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
40540: LD_VAR 0 6
40544: PPUSH
40545: LD_VAR 0 7
40549: PPUSH
40550: LD_VAR 0 8
40554: PPUSH
40555: LD_VAR 0 9
40559: PPUSH
40560: LD_VAR 0 4
40564: PPUSH
40565: LD_VAR 0 5
40569: PPUSH
40570: CALL 40612 0 6
40574: GO 40607
40576: LD_INT 304
40578: DOUBLE
40579: EQUAL
40580: IFTRUE 40584
40582: GO 40606
40584: POP
// hHackTeleport ( unit , x , y ) ; end ;
40585: LD_VAR 0 2
40589: PPUSH
40590: LD_VAR 0 4
40594: PPUSH
40595: LD_VAR 0 5
40599: PPUSH
40600: CALL 42379 0 3
40604: GO 40607
40606: POP
// end ;
40607: LD_VAR 0 12
40611: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
40612: LD_INT 0
40614: PPUSH
40615: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
40616: LD_VAR 0 1
40620: PUSH
40621: LD_INT 1
40623: LESS
40624: PUSH
40625: LD_VAR 0 1
40629: PUSH
40630: LD_INT 3
40632: GREATER
40633: OR
40634: PUSH
40635: LD_VAR 0 5
40639: PPUSH
40640: LD_VAR 0 6
40644: PPUSH
40645: CALL_OW 428
40649: OR
40650: IFFALSE 40654
// exit ;
40652: GO 41382
// uc_side := your_side ;
40654: LD_ADDR_OWVAR 20
40658: PUSH
40659: LD_OWVAR 2
40663: ST_TO_ADDR
// uc_nation := nation ;
40664: LD_ADDR_OWVAR 21
40668: PUSH
40669: LD_VAR 0 1
40673: ST_TO_ADDR
// bc_level = 1 ;
40674: LD_ADDR_OWVAR 43
40678: PUSH
40679: LD_INT 1
40681: ST_TO_ADDR
// case btype of 1 :
40682: LD_VAR 0 2
40686: PUSH
40687: LD_INT 1
40689: DOUBLE
40690: EQUAL
40691: IFTRUE 40695
40693: GO 40706
40695: POP
// bc_type := b_depot ; 2 :
40696: LD_ADDR_OWVAR 42
40700: PUSH
40701: LD_INT 0
40703: ST_TO_ADDR
40704: GO 41326
40706: LD_INT 2
40708: DOUBLE
40709: EQUAL
40710: IFTRUE 40714
40712: GO 40725
40714: POP
// bc_type := b_warehouse ; 3 :
40715: LD_ADDR_OWVAR 42
40719: PUSH
40720: LD_INT 1
40722: ST_TO_ADDR
40723: GO 41326
40725: LD_INT 3
40727: DOUBLE
40728: EQUAL
40729: IFTRUE 40733
40731: GO 40744
40733: POP
// bc_type := b_lab ; 4 .. 9 :
40734: LD_ADDR_OWVAR 42
40738: PUSH
40739: LD_INT 6
40741: ST_TO_ADDR
40742: GO 41326
40744: LD_INT 4
40746: DOUBLE
40747: GREATEREQUAL
40748: IFFALSE 40756
40750: LD_INT 9
40752: DOUBLE
40753: LESSEQUAL
40754: IFTRUE 40758
40756: GO 40818
40758: POP
// begin bc_type := b_lab_half ;
40759: LD_ADDR_OWVAR 42
40763: PUSH
40764: LD_INT 7
40766: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
40767: LD_ADDR_OWVAR 44
40771: PUSH
40772: LD_INT 10
40774: PUSH
40775: LD_INT 11
40777: PUSH
40778: LD_INT 12
40780: PUSH
40781: LD_INT 15
40783: PUSH
40784: LD_INT 14
40786: PUSH
40787: LD_INT 13
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: PUSH
40798: LD_VAR 0 2
40802: PUSH
40803: LD_INT 3
40805: MINUS
40806: ARRAY
40807: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
40808: LD_ADDR_OWVAR 45
40812: PUSH
40813: LD_INT 9
40815: ST_TO_ADDR
// end ; 10 .. 13 :
40816: GO 41326
40818: LD_INT 10
40820: DOUBLE
40821: GREATEREQUAL
40822: IFFALSE 40830
40824: LD_INT 13
40826: DOUBLE
40827: LESSEQUAL
40828: IFTRUE 40832
40830: GO 40909
40832: POP
// begin bc_type := b_lab_full ;
40833: LD_ADDR_OWVAR 42
40837: PUSH
40838: LD_INT 8
40840: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40841: LD_ADDR_OWVAR 44
40845: PUSH
40846: LD_INT 10
40848: PUSH
40849: LD_INT 12
40851: PUSH
40852: LD_INT 14
40854: PUSH
40855: LD_INT 13
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: PUSH
40864: LD_VAR 0 2
40868: PUSH
40869: LD_INT 9
40871: MINUS
40872: ARRAY
40873: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40874: LD_ADDR_OWVAR 45
40878: PUSH
40879: LD_INT 11
40881: PUSH
40882: LD_INT 15
40884: PUSH
40885: LD_INT 12
40887: PUSH
40888: LD_INT 15
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: PUSH
40897: LD_VAR 0 2
40901: PUSH
40902: LD_INT 9
40904: MINUS
40905: ARRAY
40906: ST_TO_ADDR
// end ; 14 :
40907: GO 41326
40909: LD_INT 14
40911: DOUBLE
40912: EQUAL
40913: IFTRUE 40917
40915: GO 40928
40917: POP
// bc_type := b_workshop ; 15 :
40918: LD_ADDR_OWVAR 42
40922: PUSH
40923: LD_INT 2
40925: ST_TO_ADDR
40926: GO 41326
40928: LD_INT 15
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40936
40934: GO 40947
40936: POP
// bc_type := b_factory ; 16 :
40937: LD_ADDR_OWVAR 42
40941: PUSH
40942: LD_INT 3
40944: ST_TO_ADDR
40945: GO 41326
40947: LD_INT 16
40949: DOUBLE
40950: EQUAL
40951: IFTRUE 40955
40953: GO 40966
40955: POP
// bc_type := b_ext_gun ; 17 :
40956: LD_ADDR_OWVAR 42
40960: PUSH
40961: LD_INT 17
40963: ST_TO_ADDR
40964: GO 41326
40966: LD_INT 17
40968: DOUBLE
40969: EQUAL
40970: IFTRUE 40974
40972: GO 41002
40974: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40975: LD_ADDR_OWVAR 42
40979: PUSH
40980: LD_INT 19
40982: PUSH
40983: LD_INT 23
40985: PUSH
40986: LD_INT 19
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: LIST
40993: PUSH
40994: LD_VAR 0 1
40998: ARRAY
40999: ST_TO_ADDR
41000: GO 41326
41002: LD_INT 18
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41021
41010: POP
// bc_type := b_ext_radar ; 19 :
41011: LD_ADDR_OWVAR 42
41015: PUSH
41016: LD_INT 20
41018: ST_TO_ADDR
41019: GO 41326
41021: LD_INT 19
41023: DOUBLE
41024: EQUAL
41025: IFTRUE 41029
41027: GO 41040
41029: POP
// bc_type := b_ext_radio ; 20 :
41030: LD_ADDR_OWVAR 42
41034: PUSH
41035: LD_INT 22
41037: ST_TO_ADDR
41038: GO 41326
41040: LD_INT 20
41042: DOUBLE
41043: EQUAL
41044: IFTRUE 41048
41046: GO 41059
41048: POP
// bc_type := b_ext_siberium ; 21 :
41049: LD_ADDR_OWVAR 42
41053: PUSH
41054: LD_INT 21
41056: ST_TO_ADDR
41057: GO 41326
41059: LD_INT 21
41061: DOUBLE
41062: EQUAL
41063: IFTRUE 41067
41065: GO 41078
41067: POP
// bc_type := b_ext_computer ; 22 :
41068: LD_ADDR_OWVAR 42
41072: PUSH
41073: LD_INT 24
41075: ST_TO_ADDR
41076: GO 41326
41078: LD_INT 22
41080: DOUBLE
41081: EQUAL
41082: IFTRUE 41086
41084: GO 41097
41086: POP
// bc_type := b_ext_track ; 23 :
41087: LD_ADDR_OWVAR 42
41091: PUSH
41092: LD_INT 16
41094: ST_TO_ADDR
41095: GO 41326
41097: LD_INT 23
41099: DOUBLE
41100: EQUAL
41101: IFTRUE 41105
41103: GO 41116
41105: POP
// bc_type := b_ext_laser ; 24 :
41106: LD_ADDR_OWVAR 42
41110: PUSH
41111: LD_INT 25
41113: ST_TO_ADDR
41114: GO 41326
41116: LD_INT 24
41118: DOUBLE
41119: EQUAL
41120: IFTRUE 41124
41122: GO 41135
41124: POP
// bc_type := b_control_tower ; 25 :
41125: LD_ADDR_OWVAR 42
41129: PUSH
41130: LD_INT 36
41132: ST_TO_ADDR
41133: GO 41326
41135: LD_INT 25
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41143
41141: GO 41154
41143: POP
// bc_type := b_breastwork ; 26 :
41144: LD_ADDR_OWVAR 42
41148: PUSH
41149: LD_INT 31
41151: ST_TO_ADDR
41152: GO 41326
41154: LD_INT 26
41156: DOUBLE
41157: EQUAL
41158: IFTRUE 41162
41160: GO 41173
41162: POP
// bc_type := b_bunker ; 27 :
41163: LD_ADDR_OWVAR 42
41167: PUSH
41168: LD_INT 32
41170: ST_TO_ADDR
41171: GO 41326
41173: LD_INT 27
41175: DOUBLE
41176: EQUAL
41177: IFTRUE 41181
41179: GO 41192
41181: POP
// bc_type := b_turret ; 28 :
41182: LD_ADDR_OWVAR 42
41186: PUSH
41187: LD_INT 33
41189: ST_TO_ADDR
41190: GO 41326
41192: LD_INT 28
41194: DOUBLE
41195: EQUAL
41196: IFTRUE 41200
41198: GO 41211
41200: POP
// bc_type := b_armoury ; 29 :
41201: LD_ADDR_OWVAR 42
41205: PUSH
41206: LD_INT 4
41208: ST_TO_ADDR
41209: GO 41326
41211: LD_INT 29
41213: DOUBLE
41214: EQUAL
41215: IFTRUE 41219
41217: GO 41230
41219: POP
// bc_type := b_barracks ; 30 :
41220: LD_ADDR_OWVAR 42
41224: PUSH
41225: LD_INT 5
41227: ST_TO_ADDR
41228: GO 41326
41230: LD_INT 30
41232: DOUBLE
41233: EQUAL
41234: IFTRUE 41238
41236: GO 41249
41238: POP
// bc_type := b_solar_power ; 31 :
41239: LD_ADDR_OWVAR 42
41243: PUSH
41244: LD_INT 27
41246: ST_TO_ADDR
41247: GO 41326
41249: LD_INT 31
41251: DOUBLE
41252: EQUAL
41253: IFTRUE 41257
41255: GO 41268
41257: POP
// bc_type := b_oil_power ; 32 :
41258: LD_ADDR_OWVAR 42
41262: PUSH
41263: LD_INT 26
41265: ST_TO_ADDR
41266: GO 41326
41268: LD_INT 32
41270: DOUBLE
41271: EQUAL
41272: IFTRUE 41276
41274: GO 41287
41276: POP
// bc_type := b_siberite_power ; 33 :
41277: LD_ADDR_OWVAR 42
41281: PUSH
41282: LD_INT 28
41284: ST_TO_ADDR
41285: GO 41326
41287: LD_INT 33
41289: DOUBLE
41290: EQUAL
41291: IFTRUE 41295
41293: GO 41306
41295: POP
// bc_type := b_oil_mine ; 34 :
41296: LD_ADDR_OWVAR 42
41300: PUSH
41301: LD_INT 29
41303: ST_TO_ADDR
41304: GO 41326
41306: LD_INT 34
41308: DOUBLE
41309: EQUAL
41310: IFTRUE 41314
41312: GO 41325
41314: POP
// bc_type := b_siberite_mine ; end ;
41315: LD_ADDR_OWVAR 42
41319: PUSH
41320: LD_INT 30
41322: ST_TO_ADDR
41323: GO 41326
41325: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41326: LD_ADDR_VAR 0 8
41330: PUSH
41331: LD_VAR 0 5
41335: PPUSH
41336: LD_VAR 0 6
41340: PPUSH
41341: LD_VAR 0 3
41345: PPUSH
41346: CALL_OW 47
41350: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41351: LD_OWVAR 42
41355: PUSH
41356: LD_INT 32
41358: PUSH
41359: LD_INT 33
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: IN
41366: IFFALSE 41382
// PlaceWeaponTurret ( b , weapon ) ;
41368: LD_VAR 0 8
41372: PPUSH
41373: LD_VAR 0 4
41377: PPUSH
41378: CALL_OW 431
// end ;
41382: LD_VAR 0 7
41386: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41387: LD_INT 0
41389: PPUSH
41390: PPUSH
41391: PPUSH
41392: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41393: LD_ADDR_VAR 0 4
41397: PUSH
41398: LD_INT 22
41400: PUSH
41401: LD_OWVAR 2
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 30
41415: PUSH
41416: LD_INT 0
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 30
41425: PUSH
41426: LD_INT 1
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PPUSH
41442: CALL_OW 69
41446: ST_TO_ADDR
// if not tmp then
41447: LD_VAR 0 4
41451: NOT
41452: IFFALSE 41456
// exit ;
41454: GO 41515
// for i in tmp do
41456: LD_ADDR_VAR 0 2
41460: PUSH
41461: LD_VAR 0 4
41465: PUSH
41466: FOR_IN
41467: IFFALSE 41513
// for j = 1 to 3 do
41469: LD_ADDR_VAR 0 3
41473: PUSH
41474: DOUBLE
41475: LD_INT 1
41477: DEC
41478: ST_TO_ADDR
41479: LD_INT 3
41481: PUSH
41482: FOR_TO
41483: IFFALSE 41509
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
41485: LD_VAR 0 2
41489: PPUSH
41490: CALL_OW 274
41494: PPUSH
41495: LD_VAR 0 3
41499: PPUSH
41500: LD_INT 99999
41502: PPUSH
41503: CALL_OW 277
41507: GO 41482
41509: POP
41510: POP
41511: GO 41466
41513: POP
41514: POP
// end ;
41515: LD_VAR 0 1
41519: RET
// export function hHackSetLevel10 ; var i , j ; begin
41520: LD_INT 0
41522: PPUSH
41523: PPUSH
41524: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41525: LD_ADDR_VAR 0 2
41529: PUSH
41530: LD_INT 21
41532: PUSH
41533: LD_INT 1
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PPUSH
41540: CALL_OW 69
41544: PUSH
41545: FOR_IN
41546: IFFALSE 41598
// if IsSelected ( i ) then
41548: LD_VAR 0 2
41552: PPUSH
41553: CALL_OW 306
41557: IFFALSE 41596
// begin for j := 1 to 4 do
41559: LD_ADDR_VAR 0 3
41563: PUSH
41564: DOUBLE
41565: LD_INT 1
41567: DEC
41568: ST_TO_ADDR
41569: LD_INT 4
41571: PUSH
41572: FOR_TO
41573: IFFALSE 41594
// SetSkill ( i , j , 10 ) ;
41575: LD_VAR 0 2
41579: PPUSH
41580: LD_VAR 0 3
41584: PPUSH
41585: LD_INT 10
41587: PPUSH
41588: CALL_OW 237
41592: GO 41572
41594: POP
41595: POP
// end ;
41596: GO 41545
41598: POP
41599: POP
// end ;
41600: LD_VAR 0 1
41604: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
41605: LD_INT 0
41607: PPUSH
41608: PPUSH
41609: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
41610: LD_ADDR_VAR 0 2
41614: PUSH
41615: LD_INT 22
41617: PUSH
41618: LD_OWVAR 2
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 21
41629: PUSH
41630: LD_INT 1
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PPUSH
41641: CALL_OW 69
41645: PUSH
41646: FOR_IN
41647: IFFALSE 41688
// begin for j := 1 to 4 do
41649: LD_ADDR_VAR 0 3
41653: PUSH
41654: DOUBLE
41655: LD_INT 1
41657: DEC
41658: ST_TO_ADDR
41659: LD_INT 4
41661: PUSH
41662: FOR_TO
41663: IFFALSE 41684
// SetSkill ( i , j , 10 ) ;
41665: LD_VAR 0 2
41669: PPUSH
41670: LD_VAR 0 3
41674: PPUSH
41675: LD_INT 10
41677: PPUSH
41678: CALL_OW 237
41682: GO 41662
41684: POP
41685: POP
// end ;
41686: GO 41646
41688: POP
41689: POP
// end ;
41690: LD_VAR 0 1
41694: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
41695: LD_INT 0
41697: PPUSH
// uc_side := your_side ;
41698: LD_ADDR_OWVAR 20
41702: PUSH
41703: LD_OWVAR 2
41707: ST_TO_ADDR
// uc_nation := nation ;
41708: LD_ADDR_OWVAR 21
41712: PUSH
41713: LD_VAR 0 1
41717: ST_TO_ADDR
// InitHc ;
41718: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
41722: LD_INT 0
41724: PPUSH
41725: LD_VAR 0 2
41729: PPUSH
41730: LD_VAR 0 3
41734: PPUSH
41735: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
41739: LD_VAR 0 4
41743: PPUSH
41744: LD_VAR 0 5
41748: PPUSH
41749: CALL_OW 428
41753: PUSH
41754: LD_INT 0
41756: EQUAL
41757: IFFALSE 41781
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
41759: CALL_OW 44
41763: PPUSH
41764: LD_VAR 0 4
41768: PPUSH
41769: LD_VAR 0 5
41773: PPUSH
41774: LD_INT 1
41776: PPUSH
41777: CALL_OW 48
// end ;
41781: LD_VAR 0 6
41785: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
41786: LD_INT 0
41788: PPUSH
41789: PPUSH
// uc_side := your_side ;
41790: LD_ADDR_OWVAR 20
41794: PUSH
41795: LD_OWVAR 2
41799: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
41800: LD_VAR 0 1
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: LD_INT 3
41813: PUSH
41814: LD_INT 4
41816: PUSH
41817: LD_INT 5
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: IN
41827: IFFALSE 41839
// uc_nation := nation_american else
41829: LD_ADDR_OWVAR 21
41833: PUSH
41834: LD_INT 1
41836: ST_TO_ADDR
41837: GO 41882
// if chassis in [ 11 , 12 , 13 , 14 ] then
41839: LD_VAR 0 1
41843: PUSH
41844: LD_INT 11
41846: PUSH
41847: LD_INT 12
41849: PUSH
41850: LD_INT 13
41852: PUSH
41853: LD_INT 14
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: IN
41862: IFFALSE 41874
// uc_nation := nation_arabian else
41864: LD_ADDR_OWVAR 21
41868: PUSH
41869: LD_INT 2
41871: ST_TO_ADDR
41872: GO 41882
// uc_nation := nation_russian ;
41874: LD_ADDR_OWVAR 21
41878: PUSH
41879: LD_INT 3
41881: ST_TO_ADDR
// vc_chassis := chassis ;
41882: LD_ADDR_OWVAR 37
41886: PUSH
41887: LD_VAR 0 1
41891: ST_TO_ADDR
// vc_engine := engine ;
41892: LD_ADDR_OWVAR 39
41896: PUSH
41897: LD_VAR 0 2
41901: ST_TO_ADDR
// vc_control := control ;
41902: LD_ADDR_OWVAR 38
41906: PUSH
41907: LD_VAR 0 3
41911: ST_TO_ADDR
// vc_weapon := weapon ;
41912: LD_ADDR_OWVAR 40
41916: PUSH
41917: LD_VAR 0 4
41921: ST_TO_ADDR
// un := CreateVehicle ;
41922: LD_ADDR_VAR 0 8
41926: PUSH
41927: CALL_OW 45
41931: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41932: LD_VAR 0 8
41936: PPUSH
41937: LD_INT 0
41939: PPUSH
41940: LD_INT 5
41942: PPUSH
41943: CALL_OW 12
41947: PPUSH
41948: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41952: LD_VAR 0 8
41956: PPUSH
41957: LD_VAR 0 5
41961: PPUSH
41962: LD_VAR 0 6
41966: PPUSH
41967: LD_INT 1
41969: PPUSH
41970: CALL_OW 48
// end ;
41974: LD_VAR 0 7
41978: RET
// export hInvincible ; every 1 do
41979: GO 41981
41981: DISABLE
// hInvincible := [ ] ;
41982: LD_ADDR_EXP 121
41986: PUSH
41987: EMPTY
41988: ST_TO_ADDR
41989: END
// every 10 do var i ;
41990: GO 41992
41992: DISABLE
41993: LD_INT 0
41995: PPUSH
// begin enable ;
41996: ENABLE
// if not hInvincible then
41997: LD_EXP 121
42001: NOT
42002: IFFALSE 42006
// exit ;
42004: GO 42050
// for i in hInvincible do
42006: LD_ADDR_VAR 0 1
42010: PUSH
42011: LD_EXP 121
42015: PUSH
42016: FOR_IN
42017: IFFALSE 42048
// if GetLives ( i ) < 1000 then
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 256
42028: PUSH
42029: LD_INT 1000
42031: LESS
42032: IFFALSE 42046
// SetLives ( i , 1000 ) ;
42034: LD_VAR 0 1
42038: PPUSH
42039: LD_INT 1000
42041: PPUSH
42042: CALL_OW 234
42046: GO 42016
42048: POP
42049: POP
// end ;
42050: PPOPN 1
42052: END
// export function hHackInvincible ; var i ; begin
42053: LD_INT 0
42055: PPUSH
42056: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
42057: LD_ADDR_VAR 0 2
42061: PUSH
42062: LD_INT 2
42064: PUSH
42065: LD_INT 21
42067: PUSH
42068: LD_INT 1
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 21
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: PPUSH
42090: CALL_OW 69
42094: PUSH
42095: FOR_IN
42096: IFFALSE 42157
// if IsSelected ( i ) then
42098: LD_VAR 0 2
42102: PPUSH
42103: CALL_OW 306
42107: IFFALSE 42155
// begin if i in hInvincible then
42109: LD_VAR 0 2
42113: PUSH
42114: LD_EXP 121
42118: IN
42119: IFFALSE 42139
// hInvincible := hInvincible diff i else
42121: LD_ADDR_EXP 121
42125: PUSH
42126: LD_EXP 121
42130: PUSH
42131: LD_VAR 0 2
42135: DIFF
42136: ST_TO_ADDR
42137: GO 42155
// hInvincible := hInvincible union i ;
42139: LD_ADDR_EXP 121
42143: PUSH
42144: LD_EXP 121
42148: PUSH
42149: LD_VAR 0 2
42153: UNION
42154: ST_TO_ADDR
// end ;
42155: GO 42095
42157: POP
42158: POP
// end ;
42159: LD_VAR 0 1
42163: RET
// export function hHackInvisible ; var i , j ; begin
42164: LD_INT 0
42166: PPUSH
42167: PPUSH
42168: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42169: LD_ADDR_VAR 0 2
42173: PUSH
42174: LD_INT 21
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PPUSH
42184: CALL_OW 69
42188: PUSH
42189: FOR_IN
42190: IFFALSE 42214
// if IsSelected ( i ) then
42192: LD_VAR 0 2
42196: PPUSH
42197: CALL_OW 306
42201: IFFALSE 42212
// ComForceInvisible ( i ) ;
42203: LD_VAR 0 2
42207: PPUSH
42208: CALL_OW 496
42212: GO 42189
42214: POP
42215: POP
// end ;
42216: LD_VAR 0 1
42220: RET
// export function hHackChangeYourSide ; begin
42221: LD_INT 0
42223: PPUSH
// if your_side = 8 then
42224: LD_OWVAR 2
42228: PUSH
42229: LD_INT 8
42231: EQUAL
42232: IFFALSE 42244
// your_side := 0 else
42234: LD_ADDR_OWVAR 2
42238: PUSH
42239: LD_INT 0
42241: ST_TO_ADDR
42242: GO 42258
// your_side := your_side + 1 ;
42244: LD_ADDR_OWVAR 2
42248: PUSH
42249: LD_OWVAR 2
42253: PUSH
42254: LD_INT 1
42256: PLUS
42257: ST_TO_ADDR
// end ;
42258: LD_VAR 0 1
42262: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42263: LD_INT 0
42265: PPUSH
42266: PPUSH
42267: PPUSH
// for i in all_units do
42268: LD_ADDR_VAR 0 2
42272: PUSH
42273: LD_OWVAR 3
42277: PUSH
42278: FOR_IN
42279: IFFALSE 42357
// if IsSelected ( i ) then
42281: LD_VAR 0 2
42285: PPUSH
42286: CALL_OW 306
42290: IFFALSE 42355
// begin j := GetSide ( i ) ;
42292: LD_ADDR_VAR 0 3
42296: PUSH
42297: LD_VAR 0 2
42301: PPUSH
42302: CALL_OW 255
42306: ST_TO_ADDR
// if j = 8 then
42307: LD_VAR 0 3
42311: PUSH
42312: LD_INT 8
42314: EQUAL
42315: IFFALSE 42327
// j := 0 else
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: LD_INT 0
42324: ST_TO_ADDR
42325: GO 42341
// j := j + 1 ;
42327: LD_ADDR_VAR 0 3
42331: PUSH
42332: LD_VAR 0 3
42336: PUSH
42337: LD_INT 1
42339: PLUS
42340: ST_TO_ADDR
// SetSide ( i , j ) ;
42341: LD_VAR 0 2
42345: PPUSH
42346: LD_VAR 0 3
42350: PPUSH
42351: CALL_OW 235
// end ;
42355: GO 42278
42357: POP
42358: POP
// end ;
42359: LD_VAR 0 1
42363: RET
// export function hHackFog ; begin
42364: LD_INT 0
42366: PPUSH
// FogOff ( true ) ;
42367: LD_INT 1
42369: PPUSH
42370: CALL_OW 344
// end ;
42374: LD_VAR 0 1
42378: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42379: LD_INT 0
42381: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42382: LD_VAR 0 1
42386: PPUSH
42387: LD_VAR 0 2
42391: PPUSH
42392: LD_VAR 0 3
42396: PPUSH
42397: LD_INT 1
42399: PPUSH
42400: LD_INT 1
42402: PPUSH
42403: CALL_OW 483
// CenterOnXY ( x , y ) ;
42407: LD_VAR 0 2
42411: PPUSH
42412: LD_VAR 0 3
42416: PPUSH
42417: CALL_OW 84
// end ;
42421: LD_VAR 0 4
42425: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
42426: LD_INT 0
42428: PPUSH
42429: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
42430: LD_VAR 0 1
42434: NOT
42435: PUSH
42436: LD_VAR 0 2
42440: PPUSH
42441: LD_VAR 0 3
42445: PPUSH
42446: CALL_OW 488
42450: NOT
42451: OR
42452: PUSH
42453: LD_VAR 0 1
42457: PPUSH
42458: CALL_OW 266
42462: PUSH
42463: LD_INT 3
42465: NONEQUAL
42466: PUSH
42467: LD_VAR 0 1
42471: PPUSH
42472: CALL_OW 247
42476: PUSH
42477: LD_INT 1
42479: EQUAL
42480: NOT
42481: AND
42482: OR
42483: IFFALSE 42487
// exit ;
42485: GO 42636
// if GetType ( factory ) = unit_human then
42487: LD_VAR 0 1
42491: PPUSH
42492: CALL_OW 247
42496: PUSH
42497: LD_INT 1
42499: EQUAL
42500: IFFALSE 42517
// factory := IsInUnit ( factory ) ;
42502: LD_ADDR_VAR 0 1
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 310
42516: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
42517: LD_VAR 0 1
42521: PPUSH
42522: CALL_OW 266
42526: PUSH
42527: LD_INT 3
42529: NONEQUAL
42530: IFFALSE 42534
// exit ;
42532: GO 42636
// if HexInfo ( x , y ) = factory then
42534: LD_VAR 0 2
42538: PPUSH
42539: LD_VAR 0 3
42543: PPUSH
42544: CALL_OW 428
42548: PUSH
42549: LD_VAR 0 1
42553: EQUAL
42554: IFFALSE 42581
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
42556: LD_ADDR_EXP 122
42560: PUSH
42561: LD_EXP 122
42565: PPUSH
42566: LD_VAR 0 1
42570: PPUSH
42571: LD_INT 0
42573: PPUSH
42574: CALL_OW 1
42578: ST_TO_ADDR
42579: GO 42632
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
42581: LD_ADDR_EXP 122
42585: PUSH
42586: LD_EXP 122
42590: PPUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: LD_VAR 0 1
42600: PPUSH
42601: CALL_OW 255
42605: PUSH
42606: LD_VAR 0 1
42610: PUSH
42611: LD_VAR 0 2
42615: PUSH
42616: LD_VAR 0 3
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: PPUSH
42627: CALL_OW 1
42631: ST_TO_ADDR
// UpdateFactoryWaypoints ;
42632: CALL 42641 0 0
// end ;
42636: LD_VAR 0 4
42640: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
42641: LD_INT 0
42643: PPUSH
42644: PPUSH
42645: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
42646: LD_STRING resetFactoryWaypoint();
42648: PPUSH
42649: CALL_OW 559
// if factoryWaypoints then
42653: LD_EXP 122
42657: IFFALSE 42783
// begin list := PrepareArray ( factoryWaypoints ) ;
42659: LD_ADDR_VAR 0 3
42663: PUSH
42664: LD_EXP 122
42668: PPUSH
42669: NOP4
42673: ST_TO_ADDR
// for i := 1 to list do
42674: LD_ADDR_VAR 0 2
42678: PUSH
42679: DOUBLE
42680: LD_INT 1
42682: DEC
42683: ST_TO_ADDR
42684: LD_VAR 0 3
42688: PUSH
42689: FOR_TO
42690: IFFALSE 42781
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
42692: LD_STRING setFactoryWaypointXY(
42694: PUSH
42695: LD_VAR 0 3
42699: PUSH
42700: LD_VAR 0 2
42704: ARRAY
42705: PUSH
42706: LD_INT 1
42708: ARRAY
42709: STR
42710: PUSH
42711: LD_STRING ,
42713: STR
42714: PUSH
42715: LD_VAR 0 3
42719: PUSH
42720: LD_VAR 0 2
42724: ARRAY
42725: PUSH
42726: LD_INT 2
42728: ARRAY
42729: STR
42730: PUSH
42731: LD_STRING ,
42733: STR
42734: PUSH
42735: LD_VAR 0 3
42739: PUSH
42740: LD_VAR 0 2
42744: ARRAY
42745: PUSH
42746: LD_INT 3
42748: ARRAY
42749: STR
42750: PUSH
42751: LD_STRING ,
42753: STR
42754: PUSH
42755: LD_VAR 0 3
42759: PUSH
42760: LD_VAR 0 2
42764: ARRAY
42765: PUSH
42766: LD_INT 4
42768: ARRAY
42769: STR
42770: PUSH
42771: LD_STRING )
42773: STR
42774: PPUSH
42775: CALL_OW 559
42779: GO 42689
42781: POP
42782: POP
// end ; end ;
42783: LD_VAR 0 1
42787: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
42788: LD_INT 0
42790: PPUSH
// if HexInfo ( x , y ) = warehouse then
42791: LD_VAR 0 2
42795: PPUSH
42796: LD_VAR 0 3
42800: PPUSH
42801: CALL_OW 428
42805: PUSH
42806: LD_VAR 0 1
42810: EQUAL
42811: IFFALSE 42838
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
42813: LD_ADDR_EXP 123
42817: PUSH
42818: LD_EXP 123
42822: PPUSH
42823: LD_VAR 0 1
42827: PPUSH
42828: LD_INT 0
42830: PPUSH
42831: CALL_OW 1
42835: ST_TO_ADDR
42836: GO 42889
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
42838: LD_ADDR_EXP 123
42842: PUSH
42843: LD_EXP 123
42847: PPUSH
42848: LD_VAR 0 1
42852: PPUSH
42853: LD_VAR 0 1
42857: PPUSH
42858: CALL_OW 255
42862: PUSH
42863: LD_VAR 0 1
42867: PUSH
42868: LD_VAR 0 2
42872: PUSH
42873: LD_VAR 0 3
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: PPUSH
42884: CALL_OW 1
42888: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
42889: CALL 42898 0 0
// end ;
42893: LD_VAR 0 4
42897: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
42902: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
42903: LD_STRING resetWarehouseGatheringPoints();
42905: PPUSH
42906: CALL_OW 559
// if warehouseGatheringPoints then
42910: LD_EXP 123
42914: IFFALSE 43040
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
42916: LD_ADDR_VAR 0 3
42920: PUSH
42921: LD_EXP 123
42925: PPUSH
42926: NOP4
42930: ST_TO_ADDR
// for i := 1 to list do
42931: LD_ADDR_VAR 0 2
42935: PUSH
42936: DOUBLE
42937: LD_INT 1
42939: DEC
42940: ST_TO_ADDR
42941: LD_VAR 0 3
42945: PUSH
42946: FOR_TO
42947: IFFALSE 43038
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
42949: LD_STRING setWarehouseGatheringPointXY(
42951: PUSH
42952: LD_VAR 0 3
42956: PUSH
42957: LD_VAR 0 2
42961: ARRAY
42962: PUSH
42963: LD_INT 1
42965: ARRAY
42966: STR
42967: PUSH
42968: LD_STRING ,
42970: STR
42971: PUSH
42972: LD_VAR 0 3
42976: PUSH
42977: LD_VAR 0 2
42981: ARRAY
42982: PUSH
42983: LD_INT 2
42985: ARRAY
42986: STR
42987: PUSH
42988: LD_STRING ,
42990: STR
42991: PUSH
42992: LD_VAR 0 3
42996: PUSH
42997: LD_VAR 0 2
43001: ARRAY
43002: PUSH
43003: LD_INT 3
43005: ARRAY
43006: STR
43007: PUSH
43008: LD_STRING ,
43010: STR
43011: PUSH
43012: LD_VAR 0 3
43016: PUSH
43017: LD_VAR 0 2
43021: ARRAY
43022: PUSH
43023: LD_INT 4
43025: ARRAY
43026: STR
43027: PUSH
43028: LD_STRING )
43030: STR
43031: PPUSH
43032: CALL_OW 559
43036: GO 42946
43038: POP
43039: POP
// end ; end ;
43040: LD_VAR 0 1
43044: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
43045: LD_EXP 123
43049: IFFALSE 43734
43051: GO 43053
43053: DISABLE
43054: LD_INT 0
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
43061: PPUSH
43062: PPUSH
43063: PPUSH
43064: PPUSH
// begin enable ;
43065: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
43066: LD_ADDR_VAR 0 3
43070: PUSH
43071: LD_EXP 123
43075: PPUSH
43076: NOP4
43080: ST_TO_ADDR
// if not list then
43081: LD_VAR 0 3
43085: NOT
43086: IFFALSE 43090
// exit ;
43088: GO 43734
// for i := 1 to list do
43090: LD_ADDR_VAR 0 1
43094: PUSH
43095: DOUBLE
43096: LD_INT 1
43098: DEC
43099: ST_TO_ADDR
43100: LD_VAR 0 3
43104: PUSH
43105: FOR_TO
43106: IFFALSE 43732
// begin depot := list [ i ] [ 2 ] ;
43108: LD_ADDR_VAR 0 8
43112: PUSH
43113: LD_VAR 0 3
43117: PUSH
43118: LD_VAR 0 1
43122: ARRAY
43123: PUSH
43124: LD_INT 2
43126: ARRAY
43127: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
43128: LD_ADDR_VAR 0 5
43132: PUSH
43133: LD_VAR 0 3
43137: PUSH
43138: LD_VAR 0 1
43142: ARRAY
43143: PUSH
43144: LD_INT 1
43146: ARRAY
43147: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
43148: LD_VAR 0 8
43152: PPUSH
43153: CALL_OW 301
43157: PUSH
43158: LD_VAR 0 5
43162: PUSH
43163: LD_VAR 0 8
43167: PPUSH
43168: CALL_OW 255
43172: NONEQUAL
43173: OR
43174: IFFALSE 43203
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
43176: LD_ADDR_EXP 123
43180: PUSH
43181: LD_EXP 123
43185: PPUSH
43186: LD_VAR 0 8
43190: PPUSH
43191: LD_INT 0
43193: PPUSH
43194: CALL_OW 1
43198: ST_TO_ADDR
// exit ;
43199: POP
43200: POP
43201: GO 43734
// end ; x := list [ i ] [ 3 ] ;
43203: LD_ADDR_VAR 0 6
43207: PUSH
43208: LD_VAR 0 3
43212: PUSH
43213: LD_VAR 0 1
43217: ARRAY
43218: PUSH
43219: LD_INT 3
43221: ARRAY
43222: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
43223: LD_ADDR_VAR 0 7
43227: PUSH
43228: LD_VAR 0 3
43232: PUSH
43233: LD_VAR 0 1
43237: ARRAY
43238: PUSH
43239: LD_INT 4
43241: ARRAY
43242: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
43243: LD_ADDR_VAR 0 9
43247: PUSH
43248: LD_VAR 0 6
43252: PPUSH
43253: LD_VAR 0 7
43257: PPUSH
43258: LD_INT 16
43260: PPUSH
43261: CALL 83404 0 3
43265: ST_TO_ADDR
// if not cratesNearbyPoint then
43266: LD_VAR 0 9
43270: NOT
43271: IFFALSE 43277
// exit ;
43273: POP
43274: POP
43275: GO 43734
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
43277: LD_ADDR_VAR 0 4
43281: PUSH
43282: LD_INT 22
43284: PUSH
43285: LD_VAR 0 5
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 3
43296: PUSH
43297: LD_INT 60
43299: PUSH
43300: EMPTY
43301: LIST
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 91
43309: PUSH
43310: LD_VAR 0 8
43314: PUSH
43315: LD_INT 6
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 25
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 25
43338: PUSH
43339: LD_INT 16
43341: PUSH
43342: EMPTY
43343: LIST
43344: LIST
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: PPUSH
43357: CALL_OW 69
43361: PUSH
43362: LD_VAR 0 8
43366: PPUSH
43367: CALL_OW 313
43371: PPUSH
43372: LD_INT 3
43374: PUSH
43375: LD_INT 60
43377: PUSH
43378: EMPTY
43379: LIST
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: PUSH
43388: LD_INT 25
43390: PUSH
43391: LD_INT 2
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 25
43400: PUSH
43401: LD_INT 16
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PPUSH
43417: CALL_OW 72
43421: UNION
43422: ST_TO_ADDR
// if tmp then
43423: LD_VAR 0 4
43427: IFFALSE 43507
// begin tmp := ShrinkArray ( tmp , 3 ) ;
43429: LD_ADDR_VAR 0 4
43433: PUSH
43434: LD_VAR 0 4
43438: PPUSH
43439: LD_INT 3
43441: PPUSH
43442: CALL 81373 0 2
43446: ST_TO_ADDR
// for j in tmp do
43447: LD_ADDR_VAR 0 2
43451: PUSH
43452: LD_VAR 0 4
43456: PUSH
43457: FOR_IN
43458: IFFALSE 43501
// begin if IsInUnit ( j ) then
43460: LD_VAR 0 2
43464: PPUSH
43465: CALL_OW 310
43469: IFFALSE 43480
// ComExit ( j ) ;
43471: LD_VAR 0 2
43475: PPUSH
43476: CALL 81456 0 1
// AddComCollect ( j , x , y ) ;
43480: LD_VAR 0 2
43484: PPUSH
43485: LD_VAR 0 6
43489: PPUSH
43490: LD_VAR 0 7
43494: PPUSH
43495: CALL_OW 177
// end ;
43499: GO 43457
43501: POP
43502: POP
// exit ;
43503: POP
43504: POP
43505: GO 43734
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
43507: LD_ADDR_VAR 0 4
43511: PUSH
43512: LD_INT 22
43514: PUSH
43515: LD_VAR 0 5
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 91
43526: PUSH
43527: LD_VAR 0 8
43531: PUSH
43532: LD_INT 8
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: LD_INT 34
43545: PUSH
43546: LD_INT 12
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 34
43555: PUSH
43556: LD_INT 51
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 34
43565: PUSH
43566: LD_INT 32
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 34
43575: PUSH
43576: LD_INT 89
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: PPUSH
43595: CALL_OW 69
43599: ST_TO_ADDR
// if tmp then
43600: LD_VAR 0 4
43604: IFFALSE 43730
// begin for j in tmp do
43606: LD_ADDR_VAR 0 2
43610: PUSH
43611: LD_VAR 0 4
43615: PUSH
43616: FOR_IN
43617: IFFALSE 43728
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
43619: LD_VAR 0 2
43623: PPUSH
43624: CALL_OW 262
43628: PUSH
43629: LD_INT 3
43631: EQUAL
43632: PUSH
43633: LD_VAR 0 2
43637: PPUSH
43638: CALL_OW 261
43642: PUSH
43643: LD_INT 20
43645: GREATER
43646: OR
43647: PUSH
43648: LD_VAR 0 2
43652: PPUSH
43653: CALL_OW 314
43657: NOT
43658: AND
43659: PUSH
43660: LD_VAR 0 2
43664: PPUSH
43665: CALL_OW 263
43669: PUSH
43670: LD_INT 1
43672: NONEQUAL
43673: PUSH
43674: LD_VAR 0 2
43678: PPUSH
43679: CALL_OW 311
43683: OR
43684: AND
43685: IFFALSE 43726
// begin ComCollect ( j , x , y ) ;
43687: LD_VAR 0 2
43691: PPUSH
43692: LD_VAR 0 6
43696: PPUSH
43697: LD_VAR 0 7
43701: PPUSH
43702: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
43706: LD_VAR 0 2
43710: PPUSH
43711: LD_VAR 0 8
43715: PPUSH
43716: CALL_OW 172
// exit ;
43720: POP
43721: POP
43722: POP
43723: POP
43724: GO 43734
// end ;
43726: GO 43616
43728: POP
43729: POP
// end ; end ;
43730: GO 43105
43732: POP
43733: POP
// end ; end_of_file
43734: PPOPN 9
43736: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
43737: LD_INT 0
43739: PPUSH
43740: PPUSH
// if exist_mode then
43741: LD_VAR 0 2
43745: IFFALSE 43770
// unit := CreateCharacter ( prefix & ident ) else
43747: LD_ADDR_VAR 0 5
43751: PUSH
43752: LD_VAR 0 3
43756: PUSH
43757: LD_VAR 0 1
43761: STR
43762: PPUSH
43763: CALL_OW 34
43767: ST_TO_ADDR
43768: GO 43785
// unit := NewCharacter ( ident ) ;
43770: LD_ADDR_VAR 0 5
43774: PUSH
43775: LD_VAR 0 1
43779: PPUSH
43780: CALL_OW 25
43784: ST_TO_ADDR
// result := unit ;
43785: LD_ADDR_VAR 0 4
43789: PUSH
43790: LD_VAR 0 5
43794: ST_TO_ADDR
// end ;
43795: LD_VAR 0 4
43799: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
43800: LD_INT 0
43802: PPUSH
43803: PPUSH
// if not side or not nation then
43804: LD_VAR 0 1
43808: NOT
43809: PUSH
43810: LD_VAR 0 2
43814: NOT
43815: OR
43816: IFFALSE 43820
// exit ;
43818: GO 44588
// case nation of nation_american :
43820: LD_VAR 0 2
43824: PUSH
43825: LD_INT 1
43827: DOUBLE
43828: EQUAL
43829: IFTRUE 43833
43831: GO 44047
43833: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
43834: LD_ADDR_VAR 0 4
43838: PUSH
43839: LD_INT 35
43841: PUSH
43842: LD_INT 45
43844: PUSH
43845: LD_INT 46
43847: PUSH
43848: LD_INT 47
43850: PUSH
43851: LD_INT 82
43853: PUSH
43854: LD_INT 83
43856: PUSH
43857: LD_INT 84
43859: PUSH
43860: LD_INT 85
43862: PUSH
43863: LD_INT 86
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 2
43871: PUSH
43872: LD_INT 6
43874: PUSH
43875: LD_INT 15
43877: PUSH
43878: LD_INT 16
43880: PUSH
43881: LD_INT 7
43883: PUSH
43884: LD_INT 12
43886: PUSH
43887: LD_INT 13
43889: PUSH
43890: LD_INT 10
43892: PUSH
43893: LD_INT 14
43895: PUSH
43896: LD_INT 20
43898: PUSH
43899: LD_INT 21
43901: PUSH
43902: LD_INT 22
43904: PUSH
43905: LD_INT 25
43907: PUSH
43908: LD_INT 32
43910: PUSH
43911: LD_INT 27
43913: PUSH
43914: LD_INT 36
43916: PUSH
43917: LD_INT 69
43919: PUSH
43920: LD_INT 39
43922: PUSH
43923: LD_INT 34
43925: PUSH
43926: LD_INT 40
43928: PUSH
43929: LD_INT 48
43931: PUSH
43932: LD_INT 49
43934: PUSH
43935: LD_INT 50
43937: PUSH
43938: LD_INT 51
43940: PUSH
43941: LD_INT 52
43943: PUSH
43944: LD_INT 53
43946: PUSH
43947: LD_INT 54
43949: PUSH
43950: LD_INT 55
43952: PUSH
43953: LD_INT 56
43955: PUSH
43956: LD_INT 57
43958: PUSH
43959: LD_INT 58
43961: PUSH
43962: LD_INT 59
43964: PUSH
43965: LD_INT 60
43967: PUSH
43968: LD_INT 61
43970: PUSH
43971: LD_INT 62
43973: PUSH
43974: LD_INT 80
43976: PUSH
43977: LD_INT 82
43979: PUSH
43980: LD_INT 83
43982: PUSH
43983: LD_INT 84
43985: PUSH
43986: LD_INT 85
43988: PUSH
43989: LD_INT 86
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: ST_TO_ADDR
44045: GO 44512
44047: LD_INT 2
44049: DOUBLE
44050: EQUAL
44051: IFTRUE 44055
44053: GO 44281
44055: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
44056: LD_ADDR_VAR 0 4
44060: PUSH
44061: LD_INT 35
44063: PUSH
44064: LD_INT 45
44066: PUSH
44067: LD_INT 46
44069: PUSH
44070: LD_INT 47
44072: PUSH
44073: LD_INT 82
44075: PUSH
44076: LD_INT 83
44078: PUSH
44079: LD_INT 84
44081: PUSH
44082: LD_INT 85
44084: PUSH
44085: LD_INT 87
44087: PUSH
44088: LD_INT 70
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 11
44096: PUSH
44097: LD_INT 3
44099: PUSH
44100: LD_INT 4
44102: PUSH
44103: LD_INT 5
44105: PUSH
44106: LD_INT 6
44108: PUSH
44109: LD_INT 15
44111: PUSH
44112: LD_INT 18
44114: PUSH
44115: LD_INT 7
44117: PUSH
44118: LD_INT 17
44120: PUSH
44121: LD_INT 8
44123: PUSH
44124: LD_INT 20
44126: PUSH
44127: LD_INT 21
44129: PUSH
44130: LD_INT 22
44132: PUSH
44133: LD_INT 72
44135: PUSH
44136: LD_INT 26
44138: PUSH
44139: LD_INT 69
44141: PUSH
44142: LD_INT 39
44144: PUSH
44145: LD_INT 40
44147: PUSH
44148: LD_INT 41
44150: PUSH
44151: LD_INT 42
44153: PUSH
44154: LD_INT 43
44156: PUSH
44157: LD_INT 48
44159: PUSH
44160: LD_INT 49
44162: PUSH
44163: LD_INT 50
44165: PUSH
44166: LD_INT 51
44168: PUSH
44169: LD_INT 52
44171: PUSH
44172: LD_INT 53
44174: PUSH
44175: LD_INT 54
44177: PUSH
44178: LD_INT 55
44180: PUSH
44181: LD_INT 56
44183: PUSH
44184: LD_INT 60
44186: PUSH
44187: LD_INT 61
44189: PUSH
44190: LD_INT 62
44192: PUSH
44193: LD_INT 66
44195: PUSH
44196: LD_INT 67
44198: PUSH
44199: LD_INT 68
44201: PUSH
44202: LD_INT 81
44204: PUSH
44205: LD_INT 82
44207: PUSH
44208: LD_INT 83
44210: PUSH
44211: LD_INT 84
44213: PUSH
44214: LD_INT 85
44216: PUSH
44217: LD_INT 87
44219: PUSH
44220: LD_INT 88
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: ST_TO_ADDR
44279: GO 44512
44281: LD_INT 3
44283: DOUBLE
44284: EQUAL
44285: IFTRUE 44289
44287: GO 44511
44289: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
44290: LD_ADDR_VAR 0 4
44294: PUSH
44295: LD_INT 46
44297: PUSH
44298: LD_INT 47
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 82
44309: PUSH
44310: LD_INT 83
44312: PUSH
44313: LD_INT 84
44315: PUSH
44316: LD_INT 85
44318: PUSH
44319: LD_INT 86
44321: PUSH
44322: LD_INT 11
44324: PUSH
44325: LD_INT 9
44327: PUSH
44328: LD_INT 20
44330: PUSH
44331: LD_INT 19
44333: PUSH
44334: LD_INT 21
44336: PUSH
44337: LD_INT 24
44339: PUSH
44340: LD_INT 22
44342: PUSH
44343: LD_INT 25
44345: PUSH
44346: LD_INT 28
44348: PUSH
44349: LD_INT 29
44351: PUSH
44352: LD_INT 30
44354: PUSH
44355: LD_INT 31
44357: PUSH
44358: LD_INT 37
44360: PUSH
44361: LD_INT 38
44363: PUSH
44364: LD_INT 32
44366: PUSH
44367: LD_INT 27
44369: PUSH
44370: LD_INT 33
44372: PUSH
44373: LD_INT 69
44375: PUSH
44376: LD_INT 39
44378: PUSH
44379: LD_INT 34
44381: PUSH
44382: LD_INT 40
44384: PUSH
44385: LD_INT 71
44387: PUSH
44388: LD_INT 23
44390: PUSH
44391: LD_INT 44
44393: PUSH
44394: LD_INT 48
44396: PUSH
44397: LD_INT 49
44399: PUSH
44400: LD_INT 50
44402: PUSH
44403: LD_INT 51
44405: PUSH
44406: LD_INT 52
44408: PUSH
44409: LD_INT 53
44411: PUSH
44412: LD_INT 54
44414: PUSH
44415: LD_INT 55
44417: PUSH
44418: LD_INT 56
44420: PUSH
44421: LD_INT 57
44423: PUSH
44424: LD_INT 58
44426: PUSH
44427: LD_INT 59
44429: PUSH
44430: LD_INT 63
44432: PUSH
44433: LD_INT 64
44435: PUSH
44436: LD_INT 65
44438: PUSH
44439: LD_INT 82
44441: PUSH
44442: LD_INT 83
44444: PUSH
44445: LD_INT 84
44447: PUSH
44448: LD_INT 85
44450: PUSH
44451: LD_INT 86
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
44509: GO 44512
44511: POP
// if state > - 1 and state < 3 then
44512: LD_VAR 0 3
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: GREATER
44521: PUSH
44522: LD_VAR 0 3
44526: PUSH
44527: LD_INT 3
44529: LESS
44530: AND
44531: IFFALSE 44588
// for i in result do
44533: LD_ADDR_VAR 0 5
44537: PUSH
44538: LD_VAR 0 4
44542: PUSH
44543: FOR_IN
44544: IFFALSE 44586
// if GetTech ( i , side ) <> state then
44546: LD_VAR 0 5
44550: PPUSH
44551: LD_VAR 0 1
44555: PPUSH
44556: CALL_OW 321
44560: PUSH
44561: LD_VAR 0 3
44565: NONEQUAL
44566: IFFALSE 44584
// result := result diff i ;
44568: LD_ADDR_VAR 0 4
44572: PUSH
44573: LD_VAR 0 4
44577: PUSH
44578: LD_VAR 0 5
44582: DIFF
44583: ST_TO_ADDR
44584: GO 44543
44586: POP
44587: POP
// end ;
44588: LD_VAR 0 4
44592: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
44593: LD_INT 0
44595: PPUSH
44596: PPUSH
44597: PPUSH
// result := true ;
44598: LD_ADDR_VAR 0 3
44602: PUSH
44603: LD_INT 1
44605: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
44606: LD_ADDR_VAR 0 5
44610: PUSH
44611: LD_VAR 0 2
44615: PPUSH
44616: CALL_OW 480
44620: ST_TO_ADDR
// if not tmp then
44621: LD_VAR 0 5
44625: NOT
44626: IFFALSE 44630
// exit ;
44628: GO 44679
// for i in tmp do
44630: LD_ADDR_VAR 0 4
44634: PUSH
44635: LD_VAR 0 5
44639: PUSH
44640: FOR_IN
44641: IFFALSE 44677
// if GetTech ( i , side ) <> state_researched then
44643: LD_VAR 0 4
44647: PPUSH
44648: LD_VAR 0 1
44652: PPUSH
44653: CALL_OW 321
44657: PUSH
44658: LD_INT 2
44660: NONEQUAL
44661: IFFALSE 44675
// begin result := false ;
44663: LD_ADDR_VAR 0 3
44667: PUSH
44668: LD_INT 0
44670: ST_TO_ADDR
// exit ;
44671: POP
44672: POP
44673: GO 44679
// end ;
44675: GO 44640
44677: POP
44678: POP
// end ;
44679: LD_VAR 0 3
44683: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
44684: LD_INT 0
44686: PPUSH
44687: PPUSH
44688: PPUSH
44689: PPUSH
44690: PPUSH
44691: PPUSH
44692: PPUSH
44693: PPUSH
44694: PPUSH
44695: PPUSH
44696: PPUSH
44697: PPUSH
44698: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
44699: LD_VAR 0 1
44703: NOT
44704: PUSH
44705: LD_VAR 0 1
44709: PPUSH
44710: CALL_OW 257
44714: PUSH
44715: LD_INT 9
44717: NONEQUAL
44718: OR
44719: IFFALSE 44723
// exit ;
44721: GO 45296
// side := GetSide ( unit ) ;
44723: LD_ADDR_VAR 0 9
44727: PUSH
44728: LD_VAR 0 1
44732: PPUSH
44733: CALL_OW 255
44737: ST_TO_ADDR
// tech_space := tech_spacanom ;
44738: LD_ADDR_VAR 0 12
44742: PUSH
44743: LD_INT 29
44745: ST_TO_ADDR
// tech_time := tech_taurad ;
44746: LD_ADDR_VAR 0 13
44750: PUSH
44751: LD_INT 28
44753: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
44754: LD_ADDR_VAR 0 11
44758: PUSH
44759: LD_VAR 0 1
44763: PPUSH
44764: CALL_OW 310
44768: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
44769: LD_VAR 0 11
44773: PPUSH
44774: CALL_OW 247
44778: PUSH
44779: LD_INT 2
44781: EQUAL
44782: IFFALSE 44786
// exit ;
44784: GO 45296
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44786: LD_ADDR_VAR 0 8
44790: PUSH
44791: LD_INT 81
44793: PUSH
44794: LD_VAR 0 9
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 3
44805: PUSH
44806: LD_INT 21
44808: PUSH
44809: LD_INT 3
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PPUSH
44824: CALL_OW 69
44828: ST_TO_ADDR
// if not tmp then
44829: LD_VAR 0 8
44833: NOT
44834: IFFALSE 44838
// exit ;
44836: GO 45296
// if in_unit then
44838: LD_VAR 0 11
44842: IFFALSE 44866
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
44844: LD_ADDR_VAR 0 10
44848: PUSH
44849: LD_VAR 0 8
44853: PPUSH
44854: LD_VAR 0 11
44858: PPUSH
44859: CALL_OW 74
44863: ST_TO_ADDR
44864: GO 44886
// enemy := NearestUnitToUnit ( tmp , unit ) ;
44866: LD_ADDR_VAR 0 10
44870: PUSH
44871: LD_VAR 0 8
44875: PPUSH
44876: LD_VAR 0 1
44880: PPUSH
44881: CALL_OW 74
44885: ST_TO_ADDR
// if not enemy then
44886: LD_VAR 0 10
44890: NOT
44891: IFFALSE 44895
// exit ;
44893: GO 45296
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
44895: LD_VAR 0 11
44899: PUSH
44900: LD_VAR 0 11
44904: PPUSH
44905: LD_VAR 0 10
44909: PPUSH
44910: CALL_OW 296
44914: PUSH
44915: LD_INT 13
44917: GREATER
44918: AND
44919: PUSH
44920: LD_VAR 0 1
44924: PPUSH
44925: LD_VAR 0 10
44929: PPUSH
44930: CALL_OW 296
44934: PUSH
44935: LD_INT 12
44937: GREATER
44938: OR
44939: IFFALSE 44943
// exit ;
44941: GO 45296
// missile := [ 1 ] ;
44943: LD_ADDR_VAR 0 14
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: ST_TO_ADDR
// if Researched ( side , tech_space ) then
44954: LD_VAR 0 9
44958: PPUSH
44959: LD_VAR 0 12
44963: PPUSH
44964: CALL_OW 325
44968: IFFALSE 44997
// missile := Replace ( missile , missile + 1 , 2 ) ;
44970: LD_ADDR_VAR 0 14
44974: PUSH
44975: LD_VAR 0 14
44979: PPUSH
44980: LD_VAR 0 14
44984: PUSH
44985: LD_INT 1
44987: PLUS
44988: PPUSH
44989: LD_INT 2
44991: PPUSH
44992: CALL_OW 1
44996: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
44997: LD_VAR 0 9
45001: PPUSH
45002: LD_VAR 0 13
45006: PPUSH
45007: CALL_OW 325
45011: PUSH
45012: LD_VAR 0 10
45016: PPUSH
45017: CALL_OW 255
45021: PPUSH
45022: LD_VAR 0 13
45026: PPUSH
45027: CALL_OW 325
45031: NOT
45032: AND
45033: IFFALSE 45062
// missile := Replace ( missile , missile + 1 , 3 ) ;
45035: LD_ADDR_VAR 0 14
45039: PUSH
45040: LD_VAR 0 14
45044: PPUSH
45045: LD_VAR 0 14
45049: PUSH
45050: LD_INT 1
45052: PLUS
45053: PPUSH
45054: LD_INT 3
45056: PPUSH
45057: CALL_OW 1
45061: ST_TO_ADDR
// if missile < 2 then
45062: LD_VAR 0 14
45066: PUSH
45067: LD_INT 2
45069: LESS
45070: IFFALSE 45074
// exit ;
45072: GO 45296
// x := GetX ( enemy ) ;
45074: LD_ADDR_VAR 0 4
45078: PUSH
45079: LD_VAR 0 10
45083: PPUSH
45084: CALL_OW 250
45088: ST_TO_ADDR
// y := GetY ( enemy ) ;
45089: LD_ADDR_VAR 0 5
45093: PUSH
45094: LD_VAR 0 10
45098: PPUSH
45099: CALL_OW 251
45103: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
45104: LD_ADDR_VAR 0 6
45108: PUSH
45109: LD_VAR 0 4
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PPUSH
45118: LD_INT 1
45120: PPUSH
45121: CALL_OW 12
45125: PLUS
45126: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
45127: LD_ADDR_VAR 0 7
45131: PUSH
45132: LD_VAR 0 5
45136: PUSH
45137: LD_INT 1
45139: NEG
45140: PPUSH
45141: LD_INT 1
45143: PPUSH
45144: CALL_OW 12
45148: PLUS
45149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45150: LD_VAR 0 6
45154: PPUSH
45155: LD_VAR 0 7
45159: PPUSH
45160: CALL_OW 488
45164: NOT
45165: IFFALSE 45187
// begin _x := x ;
45167: LD_ADDR_VAR 0 6
45171: PUSH
45172: LD_VAR 0 4
45176: ST_TO_ADDR
// _y := y ;
45177: LD_ADDR_VAR 0 7
45181: PUSH
45182: LD_VAR 0 5
45186: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
45187: LD_ADDR_VAR 0 3
45191: PUSH
45192: LD_INT 1
45194: PPUSH
45195: LD_VAR 0 14
45199: PPUSH
45200: CALL_OW 12
45204: ST_TO_ADDR
// case i of 1 :
45205: LD_VAR 0 3
45209: PUSH
45210: LD_INT 1
45212: DOUBLE
45213: EQUAL
45214: IFTRUE 45218
45216: GO 45235
45218: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
45219: LD_VAR 0 1
45223: PPUSH
45224: LD_VAR 0 10
45228: PPUSH
45229: CALL_OW 115
45233: GO 45296
45235: LD_INT 2
45237: DOUBLE
45238: EQUAL
45239: IFTRUE 45243
45241: GO 45265
45243: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
45244: LD_VAR 0 1
45248: PPUSH
45249: LD_VAR 0 6
45253: PPUSH
45254: LD_VAR 0 7
45258: PPUSH
45259: CALL_OW 153
45263: GO 45296
45265: LD_INT 3
45267: DOUBLE
45268: EQUAL
45269: IFTRUE 45273
45271: GO 45295
45273: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
45274: LD_VAR 0 1
45278: PPUSH
45279: LD_VAR 0 6
45283: PPUSH
45284: LD_VAR 0 7
45288: PPUSH
45289: CALL_OW 154
45293: GO 45296
45295: POP
// end ;
45296: LD_VAR 0 2
45300: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
45301: LD_INT 0
45303: PPUSH
45304: PPUSH
45305: PPUSH
45306: PPUSH
45307: PPUSH
45308: PPUSH
// if not unit or not building then
45309: LD_VAR 0 1
45313: NOT
45314: PUSH
45315: LD_VAR 0 2
45319: NOT
45320: OR
45321: IFFALSE 45325
// exit ;
45323: GO 45483
// x := GetX ( building ) ;
45325: LD_ADDR_VAR 0 5
45329: PUSH
45330: LD_VAR 0 2
45334: PPUSH
45335: CALL_OW 250
45339: ST_TO_ADDR
// y := GetY ( building ) ;
45340: LD_ADDR_VAR 0 6
45344: PUSH
45345: LD_VAR 0 2
45349: PPUSH
45350: CALL_OW 251
45354: ST_TO_ADDR
// for i = 0 to 5 do
45355: LD_ADDR_VAR 0 4
45359: PUSH
45360: DOUBLE
45361: LD_INT 0
45363: DEC
45364: ST_TO_ADDR
45365: LD_INT 5
45367: PUSH
45368: FOR_TO
45369: IFFALSE 45481
// begin _x := ShiftX ( x , i , 3 ) ;
45371: LD_ADDR_VAR 0 7
45375: PUSH
45376: LD_VAR 0 5
45380: PPUSH
45381: LD_VAR 0 4
45385: PPUSH
45386: LD_INT 3
45388: PPUSH
45389: CALL_OW 272
45393: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
45394: LD_ADDR_VAR 0 8
45398: PUSH
45399: LD_VAR 0 6
45403: PPUSH
45404: LD_VAR 0 4
45408: PPUSH
45409: LD_INT 3
45411: PPUSH
45412: CALL_OW 273
45416: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
45417: LD_VAR 0 7
45421: PPUSH
45422: LD_VAR 0 8
45426: PPUSH
45427: CALL_OW 488
45431: NOT
45432: IFFALSE 45436
// continue ;
45434: GO 45368
// if HexInfo ( _x , _y ) = 0 then
45436: LD_VAR 0 7
45440: PPUSH
45441: LD_VAR 0 8
45445: PPUSH
45446: CALL_OW 428
45450: PUSH
45451: LD_INT 0
45453: EQUAL
45454: IFFALSE 45479
// begin ComMoveXY ( unit , _x , _y ) ;
45456: LD_VAR 0 1
45460: PPUSH
45461: LD_VAR 0 7
45465: PPUSH
45466: LD_VAR 0 8
45470: PPUSH
45471: CALL_OW 111
// exit ;
45475: POP
45476: POP
45477: GO 45483
// end ; end ;
45479: GO 45368
45481: POP
45482: POP
// end ;
45483: LD_VAR 0 3
45487: RET
// export function ScanBase ( side , base_area ) ; begin
45488: LD_INT 0
45490: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
45491: LD_ADDR_VAR 0 3
45495: PUSH
45496: LD_VAR 0 2
45500: PPUSH
45501: LD_INT 81
45503: PUSH
45504: LD_VAR 0 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PPUSH
45513: CALL_OW 70
45517: ST_TO_ADDR
// end ;
45518: LD_VAR 0 3
45522: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
45523: LD_INT 0
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
// result := false ;
45529: LD_ADDR_VAR 0 2
45533: PUSH
45534: LD_INT 0
45536: ST_TO_ADDR
// side := GetSide ( unit ) ;
45537: LD_ADDR_VAR 0 3
45541: PUSH
45542: LD_VAR 0 1
45546: PPUSH
45547: CALL_OW 255
45551: ST_TO_ADDR
// nat := GetNation ( unit ) ;
45552: LD_ADDR_VAR 0 4
45556: PUSH
45557: LD_VAR 0 1
45561: PPUSH
45562: CALL_OW 248
45566: ST_TO_ADDR
// case nat of 1 :
45567: LD_VAR 0 4
45571: PUSH
45572: LD_INT 1
45574: DOUBLE
45575: EQUAL
45576: IFTRUE 45580
45578: GO 45591
45580: POP
// tech := tech_lassight ; 2 :
45581: LD_ADDR_VAR 0 5
45585: PUSH
45586: LD_INT 12
45588: ST_TO_ADDR
45589: GO 45630
45591: LD_INT 2
45593: DOUBLE
45594: EQUAL
45595: IFTRUE 45599
45597: GO 45610
45599: POP
// tech := tech_mortar ; 3 :
45600: LD_ADDR_VAR 0 5
45604: PUSH
45605: LD_INT 41
45607: ST_TO_ADDR
45608: GO 45630
45610: LD_INT 3
45612: DOUBLE
45613: EQUAL
45614: IFTRUE 45618
45616: GO 45629
45618: POP
// tech := tech_bazooka ; end ;
45619: LD_ADDR_VAR 0 5
45623: PUSH
45624: LD_INT 44
45626: ST_TO_ADDR
45627: GO 45630
45629: POP
// if Researched ( side , tech ) then
45630: LD_VAR 0 3
45634: PPUSH
45635: LD_VAR 0 5
45639: PPUSH
45640: CALL_OW 325
45644: IFFALSE 45671
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
45646: LD_ADDR_VAR 0 2
45650: PUSH
45651: LD_INT 5
45653: PUSH
45654: LD_INT 8
45656: PUSH
45657: LD_INT 9
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: LIST
45664: PUSH
45665: LD_VAR 0 4
45669: ARRAY
45670: ST_TO_ADDR
// end ;
45671: LD_VAR 0 2
45675: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
45676: LD_INT 0
45678: PPUSH
45679: PPUSH
45680: PPUSH
// if not mines then
45681: LD_VAR 0 2
45685: NOT
45686: IFFALSE 45690
// exit ;
45688: GO 45834
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45690: LD_ADDR_VAR 0 5
45694: PUSH
45695: LD_INT 81
45697: PUSH
45698: LD_VAR 0 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 21
45712: PUSH
45713: LD_INT 3
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PPUSH
45728: CALL_OW 69
45732: ST_TO_ADDR
// for i in mines do
45733: LD_ADDR_VAR 0 4
45737: PUSH
45738: LD_VAR 0 2
45742: PUSH
45743: FOR_IN
45744: IFFALSE 45832
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
45746: LD_VAR 0 4
45750: PUSH
45751: LD_INT 1
45753: ARRAY
45754: PPUSH
45755: LD_VAR 0 4
45759: PUSH
45760: LD_INT 2
45762: ARRAY
45763: PPUSH
45764: CALL_OW 458
45768: NOT
45769: IFFALSE 45773
// continue ;
45771: GO 45743
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
45773: LD_VAR 0 4
45777: PUSH
45778: LD_INT 1
45780: ARRAY
45781: PPUSH
45782: LD_VAR 0 4
45786: PUSH
45787: LD_INT 2
45789: ARRAY
45790: PPUSH
45791: CALL_OW 428
45795: PUSH
45796: LD_VAR 0 5
45800: IN
45801: IFFALSE 45830
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
45803: LD_VAR 0 4
45807: PUSH
45808: LD_INT 1
45810: ARRAY
45811: PPUSH
45812: LD_VAR 0 4
45816: PUSH
45817: LD_INT 2
45819: ARRAY
45820: PPUSH
45821: LD_VAR 0 1
45825: PPUSH
45826: CALL_OW 456
// end ;
45830: GO 45743
45832: POP
45833: POP
// end ;
45834: LD_VAR 0 3
45838: RET
// export function Count ( array ) ; begin
45839: LD_INT 0
45841: PPUSH
// result := array + 0 ;
45842: LD_ADDR_VAR 0 2
45846: PUSH
45847: LD_VAR 0 1
45851: PUSH
45852: LD_INT 0
45854: PLUS
45855: ST_TO_ADDR
// end ;
45856: LD_VAR 0 2
45860: RET
// export function IsEmpty ( building ) ; begin
45861: LD_INT 0
45863: PPUSH
// if not building then
45864: LD_VAR 0 1
45868: NOT
45869: IFFALSE 45873
// exit ;
45871: GO 45916
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
45873: LD_ADDR_VAR 0 2
45877: PUSH
45878: LD_VAR 0 1
45882: PUSH
45883: LD_INT 22
45885: PUSH
45886: LD_VAR 0 1
45890: PPUSH
45891: CALL_OW 255
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 58
45902: PUSH
45903: EMPTY
45904: LIST
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PPUSH
45910: CALL_OW 69
45914: IN
45915: ST_TO_ADDR
// end ;
45916: LD_VAR 0 2
45920: RET
// export function IsNotFull ( building ) ; var places ; begin
45921: LD_INT 0
45923: PPUSH
45924: PPUSH
// if not building then
45925: LD_VAR 0 1
45929: NOT
45930: IFFALSE 45934
// exit ;
45932: GO 45962
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
45934: LD_ADDR_VAR 0 2
45938: PUSH
45939: LD_VAR 0 1
45943: PPUSH
45944: LD_INT 3
45946: PUSH
45947: LD_INT 62
45949: PUSH
45950: EMPTY
45951: LIST
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PPUSH
45957: CALL_OW 72
45961: ST_TO_ADDR
// end ;
45962: LD_VAR 0 2
45966: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
45967: LD_INT 0
45969: PPUSH
45970: PPUSH
45971: PPUSH
45972: PPUSH
// tmp := [ ] ;
45973: LD_ADDR_VAR 0 3
45977: PUSH
45978: EMPTY
45979: ST_TO_ADDR
// list := [ ] ;
45980: LD_ADDR_VAR 0 5
45984: PUSH
45985: EMPTY
45986: ST_TO_ADDR
// for i = 16 to 25 do
45987: LD_ADDR_VAR 0 4
45991: PUSH
45992: DOUBLE
45993: LD_INT 16
45995: DEC
45996: ST_TO_ADDR
45997: LD_INT 25
45999: PUSH
46000: FOR_TO
46001: IFFALSE 46074
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
46003: LD_ADDR_VAR 0 3
46007: PUSH
46008: LD_VAR 0 3
46012: PUSH
46013: LD_INT 22
46015: PUSH
46016: LD_VAR 0 1
46020: PPUSH
46021: CALL_OW 255
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 91
46032: PUSH
46033: LD_VAR 0 1
46037: PUSH
46038: LD_INT 6
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 30
46048: PUSH
46049: LD_VAR 0 4
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: LIST
46062: PUSH
46063: EMPTY
46064: LIST
46065: PPUSH
46066: CALL_OW 69
46070: ADD
46071: ST_TO_ADDR
46072: GO 46000
46074: POP
46075: POP
// for i = 1 to tmp do
46076: LD_ADDR_VAR 0 4
46080: PUSH
46081: DOUBLE
46082: LD_INT 1
46084: DEC
46085: ST_TO_ADDR
46086: LD_VAR 0 3
46090: PUSH
46091: FOR_TO
46092: IFFALSE 46180
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
46094: LD_ADDR_VAR 0 5
46098: PUSH
46099: LD_VAR 0 5
46103: PUSH
46104: LD_VAR 0 3
46108: PUSH
46109: LD_VAR 0 4
46113: ARRAY
46114: PPUSH
46115: CALL_OW 266
46119: PUSH
46120: LD_VAR 0 3
46124: PUSH
46125: LD_VAR 0 4
46129: ARRAY
46130: PPUSH
46131: CALL_OW 250
46135: PUSH
46136: LD_VAR 0 3
46140: PUSH
46141: LD_VAR 0 4
46145: ARRAY
46146: PPUSH
46147: CALL_OW 251
46151: PUSH
46152: LD_VAR 0 3
46156: PUSH
46157: LD_VAR 0 4
46161: ARRAY
46162: PPUSH
46163: CALL_OW 254
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: PUSH
46174: EMPTY
46175: LIST
46176: ADD
46177: ST_TO_ADDR
46178: GO 46091
46180: POP
46181: POP
// result := list ;
46182: LD_ADDR_VAR 0 2
46186: PUSH
46187: LD_VAR 0 5
46191: ST_TO_ADDR
// end ;
46192: LD_VAR 0 2
46196: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
46197: LD_INT 0
46199: PPUSH
46200: PPUSH
46201: PPUSH
46202: PPUSH
46203: PPUSH
46204: PPUSH
46205: PPUSH
// if not factory then
46206: LD_VAR 0 1
46210: NOT
46211: IFFALSE 46215
// exit ;
46213: GO 46808
// if control = control_apeman then
46215: LD_VAR 0 4
46219: PUSH
46220: LD_INT 5
46222: EQUAL
46223: IFFALSE 46332
// begin tmp := UnitsInside ( factory ) ;
46225: LD_ADDR_VAR 0 8
46229: PUSH
46230: LD_VAR 0 1
46234: PPUSH
46235: CALL_OW 313
46239: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
46240: LD_VAR 0 8
46244: PPUSH
46245: LD_INT 25
46247: PUSH
46248: LD_INT 12
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PPUSH
46255: CALL_OW 72
46259: NOT
46260: IFFALSE 46270
// control := control_manual ;
46262: LD_ADDR_VAR 0 4
46266: PUSH
46267: LD_INT 1
46269: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
46270: LD_ADDR_VAR 0 8
46274: PUSH
46275: LD_VAR 0 1
46279: PPUSH
46280: CALL 45967 0 1
46284: ST_TO_ADDR
// if tmp then
46285: LD_VAR 0 8
46289: IFFALSE 46332
// begin for i in tmp do
46291: LD_ADDR_VAR 0 7
46295: PUSH
46296: LD_VAR 0 8
46300: PUSH
46301: FOR_IN
46302: IFFALSE 46330
// if i [ 1 ] = b_ext_radio then
46304: LD_VAR 0 7
46308: PUSH
46309: LD_INT 1
46311: ARRAY
46312: PUSH
46313: LD_INT 22
46315: EQUAL
46316: IFFALSE 46328
// begin control := control_remote ;
46318: LD_ADDR_VAR 0 4
46322: PUSH
46323: LD_INT 2
46325: ST_TO_ADDR
// break ;
46326: GO 46330
// end ;
46328: GO 46301
46330: POP
46331: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46332: LD_VAR 0 1
46336: PPUSH
46337: LD_VAR 0 2
46341: PPUSH
46342: LD_VAR 0 3
46346: PPUSH
46347: LD_VAR 0 4
46351: PPUSH
46352: LD_VAR 0 5
46356: PPUSH
46357: CALL_OW 448
46361: IFFALSE 46396
// begin result := [ chassis , engine , control , weapon ] ;
46363: LD_ADDR_VAR 0 6
46367: PUSH
46368: LD_VAR 0 2
46372: PUSH
46373: LD_VAR 0 3
46377: PUSH
46378: LD_VAR 0 4
46382: PUSH
46383: LD_VAR 0 5
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// exit ;
46394: GO 46808
// end ; _chassis := AvailableChassisList ( factory ) ;
46396: LD_ADDR_VAR 0 9
46400: PUSH
46401: LD_VAR 0 1
46405: PPUSH
46406: CALL_OW 475
46410: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
46411: LD_ADDR_VAR 0 11
46415: PUSH
46416: LD_VAR 0 1
46420: PPUSH
46421: CALL_OW 476
46425: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
46426: LD_ADDR_VAR 0 12
46430: PUSH
46431: LD_VAR 0 1
46435: PPUSH
46436: CALL_OW 477
46440: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
46441: LD_ADDR_VAR 0 10
46445: PUSH
46446: LD_VAR 0 1
46450: PPUSH
46451: CALL_OW 478
46455: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
46456: LD_VAR 0 9
46460: NOT
46461: PUSH
46462: LD_VAR 0 11
46466: NOT
46467: OR
46468: PUSH
46469: LD_VAR 0 12
46473: NOT
46474: OR
46475: PUSH
46476: LD_VAR 0 10
46480: NOT
46481: OR
46482: IFFALSE 46517
// begin result := [ chassis , engine , control , weapon ] ;
46484: LD_ADDR_VAR 0 6
46488: PUSH
46489: LD_VAR 0 2
46493: PUSH
46494: LD_VAR 0 3
46498: PUSH
46499: LD_VAR 0 4
46503: PUSH
46504: LD_VAR 0 5
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: ST_TO_ADDR
// exit ;
46515: GO 46808
// end ; if not chassis in _chassis then
46517: LD_VAR 0 2
46521: PUSH
46522: LD_VAR 0 9
46526: IN
46527: NOT
46528: IFFALSE 46554
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
46530: LD_ADDR_VAR 0 2
46534: PUSH
46535: LD_VAR 0 9
46539: PUSH
46540: LD_INT 1
46542: PPUSH
46543: LD_VAR 0 9
46547: PPUSH
46548: CALL_OW 12
46552: ARRAY
46553: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
46554: LD_VAR 0 2
46558: PPUSH
46559: LD_VAR 0 3
46563: PPUSH
46564: CALL 46813 0 2
46568: NOT
46569: IFFALSE 46628
// repeat engine := _engine [ 1 ] ;
46571: LD_ADDR_VAR 0 3
46575: PUSH
46576: LD_VAR 0 11
46580: PUSH
46581: LD_INT 1
46583: ARRAY
46584: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
46585: LD_ADDR_VAR 0 11
46589: PUSH
46590: LD_VAR 0 11
46594: PPUSH
46595: LD_INT 1
46597: PPUSH
46598: CALL_OW 3
46602: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
46603: LD_VAR 0 2
46607: PPUSH
46608: LD_VAR 0 3
46612: PPUSH
46613: CALL 46813 0 2
46617: PUSH
46618: LD_VAR 0 11
46622: PUSH
46623: EMPTY
46624: EQUAL
46625: OR
46626: IFFALSE 46571
// if not control in _control then
46628: LD_VAR 0 4
46632: PUSH
46633: LD_VAR 0 12
46637: IN
46638: NOT
46639: IFFALSE 46665
// control := _control [ rand ( 1 , _control ) ] ;
46641: LD_ADDR_VAR 0 4
46645: PUSH
46646: LD_VAR 0 12
46650: PUSH
46651: LD_INT 1
46653: PPUSH
46654: LD_VAR 0 12
46658: PPUSH
46659: CALL_OW 12
46663: ARRAY
46664: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
46665: LD_VAR 0 2
46669: PPUSH
46670: LD_VAR 0 5
46674: PPUSH
46675: CALL 47033 0 2
46679: NOT
46680: IFFALSE 46739
// repeat weapon := _weapon [ 1 ] ;
46682: LD_ADDR_VAR 0 5
46686: PUSH
46687: LD_VAR 0 10
46691: PUSH
46692: LD_INT 1
46694: ARRAY
46695: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
46696: LD_ADDR_VAR 0 10
46700: PUSH
46701: LD_VAR 0 10
46705: PPUSH
46706: LD_INT 1
46708: PPUSH
46709: CALL_OW 3
46713: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
46714: LD_VAR 0 2
46718: PPUSH
46719: LD_VAR 0 5
46723: PPUSH
46724: CALL 47033 0 2
46728: PUSH
46729: LD_VAR 0 10
46733: PUSH
46734: EMPTY
46735: EQUAL
46736: OR
46737: IFFALSE 46682
// result := [ ] ;
46739: LD_ADDR_VAR 0 6
46743: PUSH
46744: EMPTY
46745: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
46746: LD_VAR 0 1
46750: PPUSH
46751: LD_VAR 0 2
46755: PPUSH
46756: LD_VAR 0 3
46760: PPUSH
46761: LD_VAR 0 4
46765: PPUSH
46766: LD_VAR 0 5
46770: PPUSH
46771: CALL_OW 448
46775: IFFALSE 46808
// result := [ chassis , engine , control , weapon ] ;
46777: LD_ADDR_VAR 0 6
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_VAR 0 3
46791: PUSH
46792: LD_VAR 0 4
46796: PUSH
46797: LD_VAR 0 5
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// end ;
46808: LD_VAR 0 6
46812: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
46813: LD_INT 0
46815: PPUSH
// if not chassis or not engine then
46816: LD_VAR 0 1
46820: NOT
46821: PUSH
46822: LD_VAR 0 2
46826: NOT
46827: OR
46828: IFFALSE 46832
// exit ;
46830: GO 47028
// case engine of engine_solar :
46832: LD_VAR 0 2
46836: PUSH
46837: LD_INT 2
46839: DOUBLE
46840: EQUAL
46841: IFTRUE 46845
46843: GO 46883
46845: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
46846: LD_ADDR_VAR 0 3
46850: PUSH
46851: LD_INT 11
46853: PUSH
46854: LD_INT 12
46856: PUSH
46857: LD_INT 13
46859: PUSH
46860: LD_INT 14
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 2
46868: PUSH
46869: LD_INT 3
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: ST_TO_ADDR
46881: GO 47012
46883: LD_INT 1
46885: DOUBLE
46886: EQUAL
46887: IFTRUE 46891
46889: GO 46953
46891: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
46892: LD_ADDR_VAR 0 3
46896: PUSH
46897: LD_INT 11
46899: PUSH
46900: LD_INT 12
46902: PUSH
46903: LD_INT 13
46905: PUSH
46906: LD_INT 14
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: LD_INT 3
46917: PUSH
46918: LD_INT 4
46920: PUSH
46921: LD_INT 5
46923: PUSH
46924: LD_INT 21
46926: PUSH
46927: LD_INT 23
46929: PUSH
46930: LD_INT 22
46932: PUSH
46933: LD_INT 24
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: ST_TO_ADDR
46951: GO 47012
46953: LD_INT 3
46955: DOUBLE
46956: EQUAL
46957: IFTRUE 46961
46959: GO 47011
46961: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46962: LD_ADDR_VAR 0 3
46966: PUSH
46967: LD_INT 13
46969: PUSH
46970: LD_INT 14
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 3
46978: PUSH
46979: LD_INT 4
46981: PUSH
46982: LD_INT 5
46984: PUSH
46985: LD_INT 21
46987: PUSH
46988: LD_INT 22
46990: PUSH
46991: LD_INT 23
46993: PUSH
46994: LD_INT 24
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: ST_TO_ADDR
47009: GO 47012
47011: POP
// result := ( chassis in result ) ;
47012: LD_ADDR_VAR 0 3
47016: PUSH
47017: LD_VAR 0 1
47021: PUSH
47022: LD_VAR 0 3
47026: IN
47027: ST_TO_ADDR
// end ;
47028: LD_VAR 0 3
47032: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
47033: LD_INT 0
47035: PPUSH
// if not chassis or not weapon then
47036: LD_VAR 0 1
47040: NOT
47041: PUSH
47042: LD_VAR 0 2
47046: NOT
47047: OR
47048: IFFALSE 47052
// exit ;
47050: GO 48112
// case weapon of us_machine_gun :
47052: LD_VAR 0 2
47056: PUSH
47057: LD_INT 2
47059: DOUBLE
47060: EQUAL
47061: IFTRUE 47065
47063: GO 47095
47065: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
47066: LD_ADDR_VAR 0 3
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: LD_INT 4
47082: PUSH
47083: LD_INT 5
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: ST_TO_ADDR
47093: GO 48096
47095: LD_INT 3
47097: DOUBLE
47098: EQUAL
47099: IFTRUE 47103
47101: GO 47133
47103: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
47104: LD_ADDR_VAR 0 3
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: LD_INT 4
47120: PUSH
47121: LD_INT 5
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: ST_TO_ADDR
47131: GO 48096
47133: LD_INT 11
47135: DOUBLE
47136: EQUAL
47137: IFTRUE 47141
47139: GO 47171
47141: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
47142: LD_ADDR_VAR 0 3
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: LD_INT 2
47152: PUSH
47153: LD_INT 3
47155: PUSH
47156: LD_INT 4
47158: PUSH
47159: LD_INT 5
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: ST_TO_ADDR
47169: GO 48096
47171: LD_INT 4
47173: DOUBLE
47174: EQUAL
47175: IFTRUE 47179
47177: GO 47205
47179: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
47180: LD_ADDR_VAR 0 3
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: LD_INT 4
47193: PUSH
47194: LD_INT 5
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: ST_TO_ADDR
47203: GO 48096
47205: LD_INT 5
47207: DOUBLE
47208: EQUAL
47209: IFTRUE 47213
47211: GO 47239
47213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
47214: LD_ADDR_VAR 0 3
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: LD_INT 3
47224: PUSH
47225: LD_INT 4
47227: PUSH
47228: LD_INT 5
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: ST_TO_ADDR
47237: GO 48096
47239: LD_INT 9
47241: DOUBLE
47242: EQUAL
47243: IFTRUE 47247
47245: GO 47273
47247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
47248: LD_ADDR_VAR 0 3
47252: PUSH
47253: LD_INT 2
47255: PUSH
47256: LD_INT 3
47258: PUSH
47259: LD_INT 4
47261: PUSH
47262: LD_INT 5
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: ST_TO_ADDR
47271: GO 48096
47273: LD_INT 7
47275: DOUBLE
47276: EQUAL
47277: IFTRUE 47281
47279: GO 47307
47281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
47282: LD_ADDR_VAR 0 3
47286: PUSH
47287: LD_INT 2
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: LD_INT 4
47295: PUSH
47296: LD_INT 5
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: ST_TO_ADDR
47305: GO 48096
47307: LD_INT 12
47309: DOUBLE
47310: EQUAL
47311: IFTRUE 47315
47313: GO 47341
47315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
47316: LD_ADDR_VAR 0 3
47320: PUSH
47321: LD_INT 2
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: LD_INT 4
47329: PUSH
47330: LD_INT 5
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
47339: GO 48096
47341: LD_INT 13
47343: DOUBLE
47344: EQUAL
47345: IFTRUE 47349
47347: GO 47375
47349: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
47350: LD_ADDR_VAR 0 3
47354: PUSH
47355: LD_INT 2
47357: PUSH
47358: LD_INT 3
47360: PUSH
47361: LD_INT 4
47363: PUSH
47364: LD_INT 5
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
47373: GO 48096
47375: LD_INT 14
47377: DOUBLE
47378: EQUAL
47379: IFTRUE 47383
47381: GO 47401
47383: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
47384: LD_ADDR_VAR 0 3
47388: PUSH
47389: LD_INT 4
47391: PUSH
47392: LD_INT 5
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: ST_TO_ADDR
47399: GO 48096
47401: LD_INT 6
47403: DOUBLE
47404: EQUAL
47405: IFTRUE 47409
47407: GO 47427
47409: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
47410: LD_ADDR_VAR 0 3
47414: PUSH
47415: LD_INT 4
47417: PUSH
47418: LD_INT 5
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: ST_TO_ADDR
47425: GO 48096
47427: LD_INT 10
47429: DOUBLE
47430: EQUAL
47431: IFTRUE 47435
47433: GO 47453
47435: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
47436: LD_ADDR_VAR 0 3
47440: PUSH
47441: LD_INT 4
47443: PUSH
47444: LD_INT 5
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: ST_TO_ADDR
47451: GO 48096
47453: LD_INT 22
47455: DOUBLE
47456: EQUAL
47457: IFTRUE 47461
47459: GO 47487
47461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
47462: LD_ADDR_VAR 0 3
47466: PUSH
47467: LD_INT 11
47469: PUSH
47470: LD_INT 12
47472: PUSH
47473: LD_INT 13
47475: PUSH
47476: LD_INT 14
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: ST_TO_ADDR
47485: GO 48096
47487: LD_INT 23
47489: DOUBLE
47490: EQUAL
47491: IFTRUE 47495
47493: GO 47521
47495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
47496: LD_ADDR_VAR 0 3
47500: PUSH
47501: LD_INT 11
47503: PUSH
47504: LD_INT 12
47506: PUSH
47507: LD_INT 13
47509: PUSH
47510: LD_INT 14
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: ST_TO_ADDR
47519: GO 48096
47521: LD_INT 24
47523: DOUBLE
47524: EQUAL
47525: IFTRUE 47529
47527: GO 47555
47529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
47530: LD_ADDR_VAR 0 3
47534: PUSH
47535: LD_INT 11
47537: PUSH
47538: LD_INT 12
47540: PUSH
47541: LD_INT 13
47543: PUSH
47544: LD_INT 14
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: ST_TO_ADDR
47553: GO 48096
47555: LD_INT 30
47557: DOUBLE
47558: EQUAL
47559: IFTRUE 47563
47561: GO 47589
47563: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
47564: LD_ADDR_VAR 0 3
47568: PUSH
47569: LD_INT 11
47571: PUSH
47572: LD_INT 12
47574: PUSH
47575: LD_INT 13
47577: PUSH
47578: LD_INT 14
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: ST_TO_ADDR
47587: GO 48096
47589: LD_INT 25
47591: DOUBLE
47592: EQUAL
47593: IFTRUE 47597
47595: GO 47615
47597: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
47598: LD_ADDR_VAR 0 3
47602: PUSH
47603: LD_INT 13
47605: PUSH
47606: LD_INT 14
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: ST_TO_ADDR
47613: GO 48096
47615: LD_INT 27
47617: DOUBLE
47618: EQUAL
47619: IFTRUE 47623
47621: GO 47641
47623: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
47624: LD_ADDR_VAR 0 3
47628: PUSH
47629: LD_INT 13
47631: PUSH
47632: LD_INT 14
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: ST_TO_ADDR
47639: GO 48096
47641: LD_INT 92
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47649
47647: GO 47675
47649: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
47650: LD_ADDR_VAR 0 3
47654: PUSH
47655: LD_INT 11
47657: PUSH
47658: LD_INT 12
47660: PUSH
47661: LD_INT 13
47663: PUSH
47664: LD_INT 14
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: ST_TO_ADDR
47673: GO 48096
47675: LD_INT 28
47677: DOUBLE
47678: EQUAL
47679: IFTRUE 47683
47681: GO 47701
47683: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
47684: LD_ADDR_VAR 0 3
47688: PUSH
47689: LD_INT 13
47691: PUSH
47692: LD_INT 14
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: ST_TO_ADDR
47699: GO 48096
47701: LD_INT 29
47703: DOUBLE
47704: EQUAL
47705: IFTRUE 47709
47707: GO 47727
47709: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
47710: LD_ADDR_VAR 0 3
47714: PUSH
47715: LD_INT 13
47717: PUSH
47718: LD_INT 14
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: ST_TO_ADDR
47725: GO 48096
47727: LD_INT 31
47729: DOUBLE
47730: EQUAL
47731: IFTRUE 47735
47733: GO 47753
47735: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
47736: LD_ADDR_VAR 0 3
47740: PUSH
47741: LD_INT 13
47743: PUSH
47744: LD_INT 14
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: ST_TO_ADDR
47751: GO 48096
47753: LD_INT 26
47755: DOUBLE
47756: EQUAL
47757: IFTRUE 47761
47759: GO 47779
47761: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
47762: LD_ADDR_VAR 0 3
47766: PUSH
47767: LD_INT 13
47769: PUSH
47770: LD_INT 14
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: ST_TO_ADDR
47777: GO 48096
47779: LD_INT 42
47781: DOUBLE
47782: EQUAL
47783: IFTRUE 47787
47785: GO 47813
47787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
47788: LD_ADDR_VAR 0 3
47792: PUSH
47793: LD_INT 21
47795: PUSH
47796: LD_INT 22
47798: PUSH
47799: LD_INT 23
47801: PUSH
47802: LD_INT 24
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: ST_TO_ADDR
47811: GO 48096
47813: LD_INT 43
47815: DOUBLE
47816: EQUAL
47817: IFTRUE 47821
47819: GO 47847
47821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
47822: LD_ADDR_VAR 0 3
47826: PUSH
47827: LD_INT 21
47829: PUSH
47830: LD_INT 22
47832: PUSH
47833: LD_INT 23
47835: PUSH
47836: LD_INT 24
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
47845: GO 48096
47847: LD_INT 44
47849: DOUBLE
47850: EQUAL
47851: IFTRUE 47855
47853: GO 47881
47855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
47856: LD_ADDR_VAR 0 3
47860: PUSH
47861: LD_INT 21
47863: PUSH
47864: LD_INT 22
47866: PUSH
47867: LD_INT 23
47869: PUSH
47870: LD_INT 24
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: ST_TO_ADDR
47879: GO 48096
47881: LD_INT 45
47883: DOUBLE
47884: EQUAL
47885: IFTRUE 47889
47887: GO 47915
47889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
47890: LD_ADDR_VAR 0 3
47894: PUSH
47895: LD_INT 21
47897: PUSH
47898: LD_INT 22
47900: PUSH
47901: LD_INT 23
47903: PUSH
47904: LD_INT 24
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: ST_TO_ADDR
47913: GO 48096
47915: LD_INT 49
47917: DOUBLE
47918: EQUAL
47919: IFTRUE 47923
47921: GO 47949
47923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
47924: LD_ADDR_VAR 0 3
47928: PUSH
47929: LD_INT 21
47931: PUSH
47932: LD_INT 22
47934: PUSH
47935: LD_INT 23
47937: PUSH
47938: LD_INT 24
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
47947: GO 48096
47949: LD_INT 51
47951: DOUBLE
47952: EQUAL
47953: IFTRUE 47957
47955: GO 47983
47957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
47958: LD_ADDR_VAR 0 3
47962: PUSH
47963: LD_INT 21
47965: PUSH
47966: LD_INT 22
47968: PUSH
47969: LD_INT 23
47971: PUSH
47972: LD_INT 24
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: ST_TO_ADDR
47981: GO 48096
47983: LD_INT 52
47985: DOUBLE
47986: EQUAL
47987: IFTRUE 47991
47989: GO 48017
47991: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
47992: LD_ADDR_VAR 0 3
47996: PUSH
47997: LD_INT 21
47999: PUSH
48000: LD_INT 22
48002: PUSH
48003: LD_INT 23
48005: PUSH
48006: LD_INT 24
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: ST_TO_ADDR
48015: GO 48096
48017: LD_INT 53
48019: DOUBLE
48020: EQUAL
48021: IFTRUE 48025
48023: GO 48043
48025: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
48026: LD_ADDR_VAR 0 3
48030: PUSH
48031: LD_INT 23
48033: PUSH
48034: LD_INT 24
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: ST_TO_ADDR
48041: GO 48096
48043: LD_INT 46
48045: DOUBLE
48046: EQUAL
48047: IFTRUE 48051
48049: GO 48069
48051: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
48052: LD_ADDR_VAR 0 3
48056: PUSH
48057: LD_INT 23
48059: PUSH
48060: LD_INT 24
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: ST_TO_ADDR
48067: GO 48096
48069: LD_INT 47
48071: DOUBLE
48072: EQUAL
48073: IFTRUE 48077
48075: GO 48095
48077: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
48078: LD_ADDR_VAR 0 3
48082: PUSH
48083: LD_INT 23
48085: PUSH
48086: LD_INT 24
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: ST_TO_ADDR
48093: GO 48096
48095: POP
// result := ( chassis in result ) ;
48096: LD_ADDR_VAR 0 3
48100: PUSH
48101: LD_VAR 0 1
48105: PUSH
48106: LD_VAR 0 3
48110: IN
48111: ST_TO_ADDR
// end ;
48112: LD_VAR 0 3
48116: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
48117: LD_INT 0
48119: PPUSH
48120: PPUSH
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
// result := array ;
48126: LD_ADDR_VAR 0 5
48130: PUSH
48131: LD_VAR 0 1
48135: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
48136: LD_VAR 0 1
48140: NOT
48141: PUSH
48142: LD_VAR 0 2
48146: NOT
48147: OR
48148: PUSH
48149: LD_VAR 0 3
48153: NOT
48154: OR
48155: PUSH
48156: LD_VAR 0 2
48160: PUSH
48161: LD_VAR 0 1
48165: GREATER
48166: OR
48167: PUSH
48168: LD_VAR 0 3
48172: PUSH
48173: LD_VAR 0 1
48177: GREATER
48178: OR
48179: IFFALSE 48183
// exit ;
48181: GO 48479
// if direction then
48183: LD_VAR 0 4
48187: IFFALSE 48251
// begin d := 1 ;
48189: LD_ADDR_VAR 0 9
48193: PUSH
48194: LD_INT 1
48196: ST_TO_ADDR
// if i_from > i_to then
48197: LD_VAR 0 2
48201: PUSH
48202: LD_VAR 0 3
48206: GREATER
48207: IFFALSE 48233
// length := ( array - i_from ) + i_to else
48209: LD_ADDR_VAR 0 11
48213: PUSH
48214: LD_VAR 0 1
48218: PUSH
48219: LD_VAR 0 2
48223: MINUS
48224: PUSH
48225: LD_VAR 0 3
48229: PLUS
48230: ST_TO_ADDR
48231: GO 48249
// length := i_to - i_from ;
48233: LD_ADDR_VAR 0 11
48237: PUSH
48238: LD_VAR 0 3
48242: PUSH
48243: LD_VAR 0 2
48247: MINUS
48248: ST_TO_ADDR
// end else
48249: GO 48312
// begin d := - 1 ;
48251: LD_ADDR_VAR 0 9
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: ST_TO_ADDR
// if i_from > i_to then
48260: LD_VAR 0 2
48264: PUSH
48265: LD_VAR 0 3
48269: GREATER
48270: IFFALSE 48290
// length := i_from - i_to else
48272: LD_ADDR_VAR 0 11
48276: PUSH
48277: LD_VAR 0 2
48281: PUSH
48282: LD_VAR 0 3
48286: MINUS
48287: ST_TO_ADDR
48288: GO 48312
// length := ( array - i_to ) + i_from ;
48290: LD_ADDR_VAR 0 11
48294: PUSH
48295: LD_VAR 0 1
48299: PUSH
48300: LD_VAR 0 3
48304: MINUS
48305: PUSH
48306: LD_VAR 0 2
48310: PLUS
48311: ST_TO_ADDR
// end ; if not length then
48312: LD_VAR 0 11
48316: NOT
48317: IFFALSE 48321
// exit ;
48319: GO 48479
// tmp := array ;
48321: LD_ADDR_VAR 0 10
48325: PUSH
48326: LD_VAR 0 1
48330: ST_TO_ADDR
// for i = 1 to length do
48331: LD_ADDR_VAR 0 6
48335: PUSH
48336: DOUBLE
48337: LD_INT 1
48339: DEC
48340: ST_TO_ADDR
48341: LD_VAR 0 11
48345: PUSH
48346: FOR_TO
48347: IFFALSE 48467
// begin for j = 1 to array do
48349: LD_ADDR_VAR 0 7
48353: PUSH
48354: DOUBLE
48355: LD_INT 1
48357: DEC
48358: ST_TO_ADDR
48359: LD_VAR 0 1
48363: PUSH
48364: FOR_TO
48365: IFFALSE 48453
// begin k := j + d ;
48367: LD_ADDR_VAR 0 8
48371: PUSH
48372: LD_VAR 0 7
48376: PUSH
48377: LD_VAR 0 9
48381: PLUS
48382: ST_TO_ADDR
// if k > array then
48383: LD_VAR 0 8
48387: PUSH
48388: LD_VAR 0 1
48392: GREATER
48393: IFFALSE 48403
// k := 1 ;
48395: LD_ADDR_VAR 0 8
48399: PUSH
48400: LD_INT 1
48402: ST_TO_ADDR
// if not k then
48403: LD_VAR 0 8
48407: NOT
48408: IFFALSE 48420
// k := array ;
48410: LD_ADDR_VAR 0 8
48414: PUSH
48415: LD_VAR 0 1
48419: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
48420: LD_ADDR_VAR 0 10
48424: PUSH
48425: LD_VAR 0 10
48429: PPUSH
48430: LD_VAR 0 8
48434: PPUSH
48435: LD_VAR 0 1
48439: PUSH
48440: LD_VAR 0 7
48444: ARRAY
48445: PPUSH
48446: CALL_OW 1
48450: ST_TO_ADDR
// end ;
48451: GO 48364
48453: POP
48454: POP
// array := tmp ;
48455: LD_ADDR_VAR 0 1
48459: PUSH
48460: LD_VAR 0 10
48464: ST_TO_ADDR
// end ;
48465: GO 48346
48467: POP
48468: POP
// result := array ;
48469: LD_ADDR_VAR 0 5
48473: PUSH
48474: LD_VAR 0 1
48478: ST_TO_ADDR
// end ;
48479: LD_VAR 0 5
48483: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
48484: LD_INT 0
48486: PPUSH
48487: PPUSH
// result := 0 ;
48488: LD_ADDR_VAR 0 3
48492: PUSH
48493: LD_INT 0
48495: ST_TO_ADDR
// if not array or not value in array then
48496: LD_VAR 0 1
48500: NOT
48501: PUSH
48502: LD_VAR 0 2
48506: PUSH
48507: LD_VAR 0 1
48511: IN
48512: NOT
48513: OR
48514: IFFALSE 48518
// exit ;
48516: GO 48572
// for i = 1 to array do
48518: LD_ADDR_VAR 0 4
48522: PUSH
48523: DOUBLE
48524: LD_INT 1
48526: DEC
48527: ST_TO_ADDR
48528: LD_VAR 0 1
48532: PUSH
48533: FOR_TO
48534: IFFALSE 48570
// if value = array [ i ] then
48536: LD_VAR 0 2
48540: PUSH
48541: LD_VAR 0 1
48545: PUSH
48546: LD_VAR 0 4
48550: ARRAY
48551: EQUAL
48552: IFFALSE 48568
// begin result := i ;
48554: LD_ADDR_VAR 0 3
48558: PUSH
48559: LD_VAR 0 4
48563: ST_TO_ADDR
// exit ;
48564: POP
48565: POP
48566: GO 48572
// end ;
48568: GO 48533
48570: POP
48571: POP
// end ;
48572: LD_VAR 0 3
48576: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
48577: LD_INT 0
48579: PPUSH
// vc_chassis := chassis ;
48580: LD_ADDR_OWVAR 37
48584: PUSH
48585: LD_VAR 0 1
48589: ST_TO_ADDR
// vc_engine := engine ;
48590: LD_ADDR_OWVAR 39
48594: PUSH
48595: LD_VAR 0 2
48599: ST_TO_ADDR
// vc_control := control ;
48600: LD_ADDR_OWVAR 38
48604: PUSH
48605: LD_VAR 0 3
48609: ST_TO_ADDR
// vc_weapon := weapon ;
48610: LD_ADDR_OWVAR 40
48614: PUSH
48615: LD_VAR 0 4
48619: ST_TO_ADDR
// vc_fuel_battery := fuel ;
48620: LD_ADDR_OWVAR 41
48624: PUSH
48625: LD_VAR 0 5
48629: ST_TO_ADDR
// end ;
48630: LD_VAR 0 6
48634: RET
// export function WantPlant ( unit ) ; var task ; begin
48635: LD_INT 0
48637: PPUSH
48638: PPUSH
// result := false ;
48639: LD_ADDR_VAR 0 2
48643: PUSH
48644: LD_INT 0
48646: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
48647: LD_ADDR_VAR 0 3
48651: PUSH
48652: LD_VAR 0 1
48656: PPUSH
48657: CALL_OW 437
48661: ST_TO_ADDR
// if task then
48662: LD_VAR 0 3
48666: IFFALSE 48694
// if task [ 1 ] [ 1 ] = p then
48668: LD_VAR 0 3
48672: PUSH
48673: LD_INT 1
48675: ARRAY
48676: PUSH
48677: LD_INT 1
48679: ARRAY
48680: PUSH
48681: LD_STRING p
48683: EQUAL
48684: IFFALSE 48694
// result := true ;
48686: LD_ADDR_VAR 0 2
48690: PUSH
48691: LD_INT 1
48693: ST_TO_ADDR
// end ;
48694: LD_VAR 0 2
48698: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
48699: LD_INT 0
48701: PPUSH
48702: PPUSH
48703: PPUSH
48704: PPUSH
// if pos < 1 then
48705: LD_VAR 0 2
48709: PUSH
48710: LD_INT 1
48712: LESS
48713: IFFALSE 48717
// exit ;
48715: GO 49020
// if pos = 1 then
48717: LD_VAR 0 2
48721: PUSH
48722: LD_INT 1
48724: EQUAL
48725: IFFALSE 48758
// result := Replace ( arr , pos [ 1 ] , value ) else
48727: LD_ADDR_VAR 0 4
48731: PUSH
48732: LD_VAR 0 1
48736: PPUSH
48737: LD_VAR 0 2
48741: PUSH
48742: LD_INT 1
48744: ARRAY
48745: PPUSH
48746: LD_VAR 0 3
48750: PPUSH
48751: CALL_OW 1
48755: ST_TO_ADDR
48756: GO 49020
// begin tmp := arr ;
48758: LD_ADDR_VAR 0 6
48762: PUSH
48763: LD_VAR 0 1
48767: ST_TO_ADDR
// s_arr := [ tmp ] ;
48768: LD_ADDR_VAR 0 7
48772: PUSH
48773: LD_VAR 0 6
48777: PUSH
48778: EMPTY
48779: LIST
48780: ST_TO_ADDR
// for i = 1 to pos - 1 do
48781: LD_ADDR_VAR 0 5
48785: PUSH
48786: DOUBLE
48787: LD_INT 1
48789: DEC
48790: ST_TO_ADDR
48791: LD_VAR 0 2
48795: PUSH
48796: LD_INT 1
48798: MINUS
48799: PUSH
48800: FOR_TO
48801: IFFALSE 48846
// begin tmp := tmp [ pos [ i ] ] ;
48803: LD_ADDR_VAR 0 6
48807: PUSH
48808: LD_VAR 0 6
48812: PUSH
48813: LD_VAR 0 2
48817: PUSH
48818: LD_VAR 0 5
48822: ARRAY
48823: ARRAY
48824: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
48825: LD_ADDR_VAR 0 7
48829: PUSH
48830: LD_VAR 0 7
48834: PUSH
48835: LD_VAR 0 6
48839: PUSH
48840: EMPTY
48841: LIST
48842: ADD
48843: ST_TO_ADDR
// end ;
48844: GO 48800
48846: POP
48847: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
48848: LD_ADDR_VAR 0 6
48852: PUSH
48853: LD_VAR 0 6
48857: PPUSH
48858: LD_VAR 0 2
48862: PUSH
48863: LD_VAR 0 2
48867: ARRAY
48868: PPUSH
48869: LD_VAR 0 3
48873: PPUSH
48874: CALL_OW 1
48878: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
48879: LD_ADDR_VAR 0 7
48883: PUSH
48884: LD_VAR 0 7
48888: PPUSH
48889: LD_VAR 0 7
48893: PPUSH
48894: LD_VAR 0 6
48898: PPUSH
48899: CALL_OW 1
48903: ST_TO_ADDR
// for i = s_arr downto 2 do
48904: LD_ADDR_VAR 0 5
48908: PUSH
48909: DOUBLE
48910: LD_VAR 0 7
48914: INC
48915: ST_TO_ADDR
48916: LD_INT 2
48918: PUSH
48919: FOR_DOWNTO
48920: IFFALSE 49004
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
48922: LD_ADDR_VAR 0 6
48926: PUSH
48927: LD_VAR 0 7
48931: PUSH
48932: LD_VAR 0 5
48936: PUSH
48937: LD_INT 1
48939: MINUS
48940: ARRAY
48941: PPUSH
48942: LD_VAR 0 2
48946: PUSH
48947: LD_VAR 0 5
48951: PUSH
48952: LD_INT 1
48954: MINUS
48955: ARRAY
48956: PPUSH
48957: LD_VAR 0 7
48961: PUSH
48962: LD_VAR 0 5
48966: ARRAY
48967: PPUSH
48968: CALL_OW 1
48972: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
48973: LD_ADDR_VAR 0 7
48977: PUSH
48978: LD_VAR 0 7
48982: PPUSH
48983: LD_VAR 0 5
48987: PUSH
48988: LD_INT 1
48990: MINUS
48991: PPUSH
48992: LD_VAR 0 6
48996: PPUSH
48997: CALL_OW 1
49001: ST_TO_ADDR
// end ;
49002: GO 48919
49004: POP
49005: POP
// result := s_arr [ 1 ] ;
49006: LD_ADDR_VAR 0 4
49010: PUSH
49011: LD_VAR 0 7
49015: PUSH
49016: LD_INT 1
49018: ARRAY
49019: ST_TO_ADDR
// end ; end ;
49020: LD_VAR 0 4
49024: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
49025: LD_INT 0
49027: PPUSH
49028: PPUSH
// if not list then
49029: LD_VAR 0 1
49033: NOT
49034: IFFALSE 49038
// exit ;
49036: GO 49129
// i := list [ pos1 ] ;
49038: LD_ADDR_VAR 0 5
49042: PUSH
49043: LD_VAR 0 1
49047: PUSH
49048: LD_VAR 0 2
49052: ARRAY
49053: ST_TO_ADDR
// if not i then
49054: LD_VAR 0 5
49058: NOT
49059: IFFALSE 49063
// exit ;
49061: GO 49129
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
49063: LD_ADDR_VAR 0 1
49067: PUSH
49068: LD_VAR 0 1
49072: PPUSH
49073: LD_VAR 0 2
49077: PPUSH
49078: LD_VAR 0 1
49082: PUSH
49083: LD_VAR 0 3
49087: ARRAY
49088: PPUSH
49089: CALL_OW 1
49093: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
49094: LD_ADDR_VAR 0 1
49098: PUSH
49099: LD_VAR 0 1
49103: PPUSH
49104: LD_VAR 0 3
49108: PPUSH
49109: LD_VAR 0 5
49113: PPUSH
49114: CALL_OW 1
49118: ST_TO_ADDR
// result := list ;
49119: LD_ADDR_VAR 0 4
49123: PUSH
49124: LD_VAR 0 1
49128: ST_TO_ADDR
// end ;
49129: LD_VAR 0 4
49133: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
49134: LD_INT 0
49136: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
49137: LD_ADDR_VAR 0 5
49141: PUSH
49142: LD_VAR 0 1
49146: PPUSH
49147: CALL_OW 250
49151: PPUSH
49152: LD_VAR 0 1
49156: PPUSH
49157: CALL_OW 251
49161: PPUSH
49162: LD_VAR 0 2
49166: PPUSH
49167: LD_VAR 0 3
49171: PPUSH
49172: LD_VAR 0 4
49176: PPUSH
49177: CALL 49187 0 5
49181: ST_TO_ADDR
// end ;
49182: LD_VAR 0 5
49186: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
49187: LD_INT 0
49189: PPUSH
49190: PPUSH
49191: PPUSH
49192: PPUSH
// if not list then
49193: LD_VAR 0 3
49197: NOT
49198: IFFALSE 49202
// exit ;
49200: GO 49590
// result := [ ] ;
49202: LD_ADDR_VAR 0 6
49206: PUSH
49207: EMPTY
49208: ST_TO_ADDR
// for i in list do
49209: LD_ADDR_VAR 0 7
49213: PUSH
49214: LD_VAR 0 3
49218: PUSH
49219: FOR_IN
49220: IFFALSE 49422
// begin tmp := GetDistUnitXY ( i , x , y ) ;
49222: LD_ADDR_VAR 0 9
49226: PUSH
49227: LD_VAR 0 7
49231: PPUSH
49232: LD_VAR 0 1
49236: PPUSH
49237: LD_VAR 0 2
49241: PPUSH
49242: CALL_OW 297
49246: ST_TO_ADDR
// if not result then
49247: LD_VAR 0 6
49251: NOT
49252: IFFALSE 49278
// result := [ [ i , tmp ] ] else
49254: LD_ADDR_VAR 0 6
49258: PUSH
49259: LD_VAR 0 7
49263: PUSH
49264: LD_VAR 0 9
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: EMPTY
49274: LIST
49275: ST_TO_ADDR
49276: GO 49420
// begin if result [ result ] [ 2 ] < tmp then
49278: LD_VAR 0 6
49282: PUSH
49283: LD_VAR 0 6
49287: ARRAY
49288: PUSH
49289: LD_INT 2
49291: ARRAY
49292: PUSH
49293: LD_VAR 0 9
49297: LESS
49298: IFFALSE 49340
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
49300: LD_ADDR_VAR 0 6
49304: PUSH
49305: LD_VAR 0 6
49309: PPUSH
49310: LD_VAR 0 6
49314: PUSH
49315: LD_INT 1
49317: PLUS
49318: PPUSH
49319: LD_VAR 0 7
49323: PUSH
49324: LD_VAR 0 9
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PPUSH
49333: CALL_OW 2
49337: ST_TO_ADDR
49338: GO 49420
// for j = 1 to result do
49340: LD_ADDR_VAR 0 8
49344: PUSH
49345: DOUBLE
49346: LD_INT 1
49348: DEC
49349: ST_TO_ADDR
49350: LD_VAR 0 6
49354: PUSH
49355: FOR_TO
49356: IFFALSE 49418
// begin if tmp < result [ j ] [ 2 ] then
49358: LD_VAR 0 9
49362: PUSH
49363: LD_VAR 0 6
49367: PUSH
49368: LD_VAR 0 8
49372: ARRAY
49373: PUSH
49374: LD_INT 2
49376: ARRAY
49377: LESS
49378: IFFALSE 49416
// begin result := Insert ( result , j , [ i , tmp ] ) ;
49380: LD_ADDR_VAR 0 6
49384: PUSH
49385: LD_VAR 0 6
49389: PPUSH
49390: LD_VAR 0 8
49394: PPUSH
49395: LD_VAR 0 7
49399: PUSH
49400: LD_VAR 0 9
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PPUSH
49409: CALL_OW 2
49413: ST_TO_ADDR
// break ;
49414: GO 49418
// end ; end ;
49416: GO 49355
49418: POP
49419: POP
// end ; end ;
49420: GO 49219
49422: POP
49423: POP
// if result and not asc then
49424: LD_VAR 0 6
49428: PUSH
49429: LD_VAR 0 4
49433: NOT
49434: AND
49435: IFFALSE 49510
// begin tmp := result ;
49437: LD_ADDR_VAR 0 9
49441: PUSH
49442: LD_VAR 0 6
49446: ST_TO_ADDR
// for i = tmp downto 1 do
49447: LD_ADDR_VAR 0 7
49451: PUSH
49452: DOUBLE
49453: LD_VAR 0 9
49457: INC
49458: ST_TO_ADDR
49459: LD_INT 1
49461: PUSH
49462: FOR_DOWNTO
49463: IFFALSE 49508
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
49465: LD_ADDR_VAR 0 6
49469: PUSH
49470: LD_VAR 0 6
49474: PPUSH
49475: LD_VAR 0 9
49479: PUSH
49480: LD_VAR 0 7
49484: MINUS
49485: PUSH
49486: LD_INT 1
49488: PLUS
49489: PPUSH
49490: LD_VAR 0 9
49494: PUSH
49495: LD_VAR 0 7
49499: ARRAY
49500: PPUSH
49501: CALL_OW 1
49505: ST_TO_ADDR
49506: GO 49462
49508: POP
49509: POP
// end ; tmp := [ ] ;
49510: LD_ADDR_VAR 0 9
49514: PUSH
49515: EMPTY
49516: ST_TO_ADDR
// if mode then
49517: LD_VAR 0 5
49521: IFFALSE 49590
// begin for i = 1 to result do
49523: LD_ADDR_VAR 0 7
49527: PUSH
49528: DOUBLE
49529: LD_INT 1
49531: DEC
49532: ST_TO_ADDR
49533: LD_VAR 0 6
49537: PUSH
49538: FOR_TO
49539: IFFALSE 49578
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
49541: LD_ADDR_VAR 0 9
49545: PUSH
49546: LD_VAR 0 9
49550: PPUSH
49551: LD_VAR 0 7
49555: PPUSH
49556: LD_VAR 0 6
49560: PUSH
49561: LD_VAR 0 7
49565: ARRAY
49566: PUSH
49567: LD_INT 1
49569: ARRAY
49570: PPUSH
49571: CALL_OW 1
49575: ST_TO_ADDR
49576: GO 49538
49578: POP
49579: POP
// result := tmp ;
49580: LD_ADDR_VAR 0 6
49584: PUSH
49585: LD_VAR 0 9
49589: ST_TO_ADDR
// end ; end ;
49590: LD_VAR 0 6
49594: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
49595: LD_INT 0
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
49603: LD_ADDR_VAR 0 5
49607: PUSH
49608: LD_INT 0
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: EMPTY
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: ST_TO_ADDR
// if not x or not y then
49625: LD_VAR 0 2
49629: NOT
49630: PUSH
49631: LD_VAR 0 3
49635: NOT
49636: OR
49637: IFFALSE 49641
// exit ;
49639: GO 51291
// if not range then
49641: LD_VAR 0 4
49645: NOT
49646: IFFALSE 49656
// range := 10 ;
49648: LD_ADDR_VAR 0 4
49652: PUSH
49653: LD_INT 10
49655: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
49656: LD_ADDR_VAR 0 8
49660: PUSH
49661: LD_INT 81
49663: PUSH
49664: LD_VAR 0 1
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 92
49675: PUSH
49676: LD_VAR 0 2
49680: PUSH
49681: LD_VAR 0 3
49685: PUSH
49686: LD_VAR 0 4
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 3
49699: PUSH
49700: LD_INT 21
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: LIST
49718: PPUSH
49719: CALL_OW 69
49723: ST_TO_ADDR
// if not tmp then
49724: LD_VAR 0 8
49728: NOT
49729: IFFALSE 49733
// exit ;
49731: GO 51291
// for i in tmp do
49733: LD_ADDR_VAR 0 6
49737: PUSH
49738: LD_VAR 0 8
49742: PUSH
49743: FOR_IN
49744: IFFALSE 51266
// begin points := [ 0 , 0 , 0 ] ;
49746: LD_ADDR_VAR 0 9
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: LIST
49764: ST_TO_ADDR
// bpoints := 1 ;
49765: LD_ADDR_VAR 0 10
49769: PUSH
49770: LD_INT 1
49772: ST_TO_ADDR
// case GetType ( i ) of unit_human :
49773: LD_VAR 0 6
49777: PPUSH
49778: CALL_OW 247
49782: PUSH
49783: LD_INT 1
49785: DOUBLE
49786: EQUAL
49787: IFTRUE 49791
49789: GO 50369
49791: POP
// begin if GetClass ( i ) = 1 then
49792: LD_VAR 0 6
49796: PPUSH
49797: CALL_OW 257
49801: PUSH
49802: LD_INT 1
49804: EQUAL
49805: IFFALSE 49826
// points := [ 10 , 5 , 3 ] ;
49807: LD_ADDR_VAR 0 9
49811: PUSH
49812: LD_INT 10
49814: PUSH
49815: LD_INT 5
49817: PUSH
49818: LD_INT 3
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: LIST
49825: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
49826: LD_VAR 0 6
49830: PPUSH
49831: CALL_OW 257
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: LD_INT 3
49841: PUSH
49842: LD_INT 4
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: IN
49850: IFFALSE 49871
// points := [ 3 , 2 , 1 ] ;
49852: LD_ADDR_VAR 0 9
49856: PUSH
49857: LD_INT 3
49859: PUSH
49860: LD_INT 2
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: ST_TO_ADDR
// if GetClass ( i ) = 5 then
49871: LD_VAR 0 6
49875: PPUSH
49876: CALL_OW 257
49880: PUSH
49881: LD_INT 5
49883: EQUAL
49884: IFFALSE 49905
// points := [ 130 , 5 , 2 ] ;
49886: LD_ADDR_VAR 0 9
49890: PUSH
49891: LD_INT 130
49893: PUSH
49894: LD_INT 5
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: LIST
49904: ST_TO_ADDR
// if GetClass ( i ) = 8 then
49905: LD_VAR 0 6
49909: PPUSH
49910: CALL_OW 257
49914: PUSH
49915: LD_INT 8
49917: EQUAL
49918: IFFALSE 49939
// points := [ 35 , 35 , 30 ] ;
49920: LD_ADDR_VAR 0 9
49924: PUSH
49925: LD_INT 35
49927: PUSH
49928: LD_INT 35
49930: PUSH
49931: LD_INT 30
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// if GetClass ( i ) = 9 then
49939: LD_VAR 0 6
49943: PPUSH
49944: CALL_OW 257
49948: PUSH
49949: LD_INT 9
49951: EQUAL
49952: IFFALSE 49973
// points := [ 20 , 55 , 40 ] ;
49954: LD_ADDR_VAR 0 9
49958: PUSH
49959: LD_INT 20
49961: PUSH
49962: LD_INT 55
49964: PUSH
49965: LD_INT 40
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: LIST
49972: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
49973: LD_VAR 0 6
49977: PPUSH
49978: CALL_OW 257
49982: PUSH
49983: LD_INT 12
49985: PUSH
49986: LD_INT 16
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: IN
49993: IFFALSE 50014
// points := [ 5 , 3 , 2 ] ;
49995: LD_ADDR_VAR 0 9
49999: PUSH
50000: LD_INT 5
50002: PUSH
50003: LD_INT 3
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: LIST
50013: ST_TO_ADDR
// if GetClass ( i ) = 17 then
50014: LD_VAR 0 6
50018: PPUSH
50019: CALL_OW 257
50023: PUSH
50024: LD_INT 17
50026: EQUAL
50027: IFFALSE 50048
// points := [ 100 , 50 , 75 ] ;
50029: LD_ADDR_VAR 0 9
50033: PUSH
50034: LD_INT 100
50036: PUSH
50037: LD_INT 50
50039: PUSH
50040: LD_INT 75
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: LIST
50047: ST_TO_ADDR
// if GetClass ( i ) = 15 then
50048: LD_VAR 0 6
50052: PPUSH
50053: CALL_OW 257
50057: PUSH
50058: LD_INT 15
50060: EQUAL
50061: IFFALSE 50082
// points := [ 10 , 5 , 3 ] ;
50063: LD_ADDR_VAR 0 9
50067: PUSH
50068: LD_INT 10
50070: PUSH
50071: LD_INT 5
50073: PUSH
50074: LD_INT 3
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: ST_TO_ADDR
// if GetClass ( i ) = 14 then
50082: LD_VAR 0 6
50086: PPUSH
50087: CALL_OW 257
50091: PUSH
50092: LD_INT 14
50094: EQUAL
50095: IFFALSE 50116
// points := [ 10 , 0 , 0 ] ;
50097: LD_ADDR_VAR 0 9
50101: PUSH
50102: LD_INT 10
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: ST_TO_ADDR
// if GetClass ( i ) = 11 then
50116: LD_VAR 0 6
50120: PPUSH
50121: CALL_OW 257
50125: PUSH
50126: LD_INT 11
50128: EQUAL
50129: IFFALSE 50150
// points := [ 30 , 10 , 5 ] ;
50131: LD_ADDR_VAR 0 9
50135: PUSH
50136: LD_INT 30
50138: PUSH
50139: LD_INT 10
50141: PUSH
50142: LD_INT 5
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
50150: LD_VAR 0 1
50154: PPUSH
50155: LD_INT 5
50157: PPUSH
50158: CALL_OW 321
50162: PUSH
50163: LD_INT 2
50165: EQUAL
50166: IFFALSE 50183
// bpoints := bpoints * 1.8 ;
50168: LD_ADDR_VAR 0 10
50172: PUSH
50173: LD_VAR 0 10
50177: PUSH
50178: LD_REAL  1.80000000000000E+0000
50181: MUL
50182: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
50183: LD_VAR 0 6
50187: PPUSH
50188: CALL_OW 257
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: LD_INT 3
50201: PUSH
50202: LD_INT 4
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: IN
50211: PUSH
50212: LD_VAR 0 1
50216: PPUSH
50217: LD_INT 51
50219: PPUSH
50220: CALL_OW 321
50224: PUSH
50225: LD_INT 2
50227: EQUAL
50228: AND
50229: IFFALSE 50246
// bpoints := bpoints * 1.2 ;
50231: LD_ADDR_VAR 0 10
50235: PUSH
50236: LD_VAR 0 10
50240: PUSH
50241: LD_REAL  1.20000000000000E+0000
50244: MUL
50245: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
50246: LD_VAR 0 6
50250: PPUSH
50251: CALL_OW 257
50255: PUSH
50256: LD_INT 5
50258: PUSH
50259: LD_INT 7
50261: PUSH
50262: LD_INT 9
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: LIST
50269: IN
50270: PUSH
50271: LD_VAR 0 1
50275: PPUSH
50276: LD_INT 52
50278: PPUSH
50279: CALL_OW 321
50283: PUSH
50284: LD_INT 2
50286: EQUAL
50287: AND
50288: IFFALSE 50305
// bpoints := bpoints * 1.5 ;
50290: LD_ADDR_VAR 0 10
50294: PUSH
50295: LD_VAR 0 10
50299: PUSH
50300: LD_REAL  1.50000000000000E+0000
50303: MUL
50304: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
50305: LD_VAR 0 1
50309: PPUSH
50310: LD_INT 66
50312: PPUSH
50313: CALL_OW 321
50317: PUSH
50318: LD_INT 2
50320: EQUAL
50321: IFFALSE 50338
// bpoints := bpoints * 1.1 ;
50323: LD_ADDR_VAR 0 10
50327: PUSH
50328: LD_VAR 0 10
50332: PUSH
50333: LD_REAL  1.10000000000000E+0000
50336: MUL
50337: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
50338: LD_ADDR_VAR 0 10
50342: PUSH
50343: LD_VAR 0 10
50347: PUSH
50348: LD_VAR 0 6
50352: PPUSH
50353: LD_INT 1
50355: PPUSH
50356: CALL_OW 259
50360: PUSH
50361: LD_REAL  1.15000000000000E+0000
50364: MUL
50365: MUL
50366: ST_TO_ADDR
// end ; unit_vehicle :
50367: GO 51195
50369: LD_INT 2
50371: DOUBLE
50372: EQUAL
50373: IFTRUE 50377
50375: GO 51183
50377: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
50378: LD_VAR 0 6
50382: PPUSH
50383: CALL_OW 264
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 42
50393: PUSH
50394: LD_INT 24
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: LIST
50401: IN
50402: IFFALSE 50423
// points := [ 25 , 5 , 3 ] ;
50404: LD_ADDR_VAR 0 9
50408: PUSH
50409: LD_INT 25
50411: PUSH
50412: LD_INT 5
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
50423: LD_VAR 0 6
50427: PPUSH
50428: CALL_OW 264
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: LD_INT 43
50438: PUSH
50439: LD_INT 25
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: LIST
50446: IN
50447: IFFALSE 50468
// points := [ 40 , 15 , 5 ] ;
50449: LD_ADDR_VAR 0 9
50453: PUSH
50454: LD_INT 40
50456: PUSH
50457: LD_INT 15
50459: PUSH
50460: LD_INT 5
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: LIST
50467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
50468: LD_VAR 0 6
50472: PPUSH
50473: CALL_OW 264
50477: PUSH
50478: LD_INT 3
50480: PUSH
50481: LD_INT 23
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: IN
50488: IFFALSE 50509
// points := [ 7 , 25 , 8 ] ;
50490: LD_ADDR_VAR 0 9
50494: PUSH
50495: LD_INT 7
50497: PUSH
50498: LD_INT 25
50500: PUSH
50501: LD_INT 8
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: LIST
50508: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
50509: LD_VAR 0 6
50513: PPUSH
50514: CALL_OW 264
50518: PUSH
50519: LD_INT 5
50521: PUSH
50522: LD_INT 27
50524: PUSH
50525: LD_INT 44
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: IN
50533: IFFALSE 50554
// points := [ 14 , 50 , 16 ] ;
50535: LD_ADDR_VAR 0 9
50539: PUSH
50540: LD_INT 14
50542: PUSH
50543: LD_INT 50
50545: PUSH
50546: LD_INT 16
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
50554: LD_VAR 0 6
50558: PPUSH
50559: CALL_OW 264
50563: PUSH
50564: LD_INT 6
50566: PUSH
50567: LD_INT 46
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: IN
50574: IFFALSE 50595
// points := [ 32 , 120 , 70 ] ;
50576: LD_ADDR_VAR 0 9
50580: PUSH
50581: LD_INT 32
50583: PUSH
50584: LD_INT 120
50586: PUSH
50587: LD_INT 70
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
50595: LD_VAR 0 6
50599: PPUSH
50600: CALL_OW 264
50604: PUSH
50605: LD_INT 7
50607: PUSH
50608: LD_INT 28
50610: PUSH
50611: LD_INT 45
50613: PUSH
50614: LD_INT 92
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: IN
50623: IFFALSE 50644
// points := [ 35 , 20 , 45 ] ;
50625: LD_ADDR_VAR 0 9
50629: PUSH
50630: LD_INT 35
50632: PUSH
50633: LD_INT 20
50635: PUSH
50636: LD_INT 45
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: LIST
50643: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
50644: LD_VAR 0 6
50648: PPUSH
50649: CALL_OW 264
50653: PUSH
50654: LD_INT 47
50656: PUSH
50657: EMPTY
50658: LIST
50659: IN
50660: IFFALSE 50681
// points := [ 67 , 45 , 75 ] ;
50662: LD_ADDR_VAR 0 9
50666: PUSH
50667: LD_INT 67
50669: PUSH
50670: LD_INT 45
50672: PUSH
50673: LD_INT 75
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
50681: LD_VAR 0 6
50685: PPUSH
50686: CALL_OW 264
50690: PUSH
50691: LD_INT 26
50693: PUSH
50694: EMPTY
50695: LIST
50696: IN
50697: IFFALSE 50718
// points := [ 120 , 30 , 80 ] ;
50699: LD_ADDR_VAR 0 9
50703: PUSH
50704: LD_INT 120
50706: PUSH
50707: LD_INT 30
50709: PUSH
50710: LD_INT 80
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: LIST
50717: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
50718: LD_VAR 0 6
50722: PPUSH
50723: CALL_OW 264
50727: PUSH
50728: LD_INT 22
50730: PUSH
50731: EMPTY
50732: LIST
50733: IN
50734: IFFALSE 50755
// points := [ 40 , 1 , 1 ] ;
50736: LD_ADDR_VAR 0 9
50740: PUSH
50741: LD_INT 40
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
50755: LD_VAR 0 6
50759: PPUSH
50760: CALL_OW 264
50764: PUSH
50765: LD_INT 29
50767: PUSH
50768: EMPTY
50769: LIST
50770: IN
50771: IFFALSE 50792
// points := [ 70 , 200 , 400 ] ;
50773: LD_ADDR_VAR 0 9
50777: PUSH
50778: LD_INT 70
50780: PUSH
50781: LD_INT 200
50783: PUSH
50784: LD_INT 400
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: LIST
50791: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
50792: LD_VAR 0 6
50796: PPUSH
50797: CALL_OW 264
50801: PUSH
50802: LD_INT 14
50804: PUSH
50805: LD_INT 53
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: IN
50812: IFFALSE 50833
// points := [ 40 , 10 , 20 ] ;
50814: LD_ADDR_VAR 0 9
50818: PUSH
50819: LD_INT 40
50821: PUSH
50822: LD_INT 10
50824: PUSH
50825: LD_INT 20
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: LIST
50832: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
50833: LD_VAR 0 6
50837: PPUSH
50838: CALL_OW 264
50842: PUSH
50843: LD_INT 9
50845: PUSH
50846: EMPTY
50847: LIST
50848: IN
50849: IFFALSE 50870
// points := [ 5 , 70 , 20 ] ;
50851: LD_ADDR_VAR 0 9
50855: PUSH
50856: LD_INT 5
50858: PUSH
50859: LD_INT 70
50861: PUSH
50862: LD_INT 20
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
50870: LD_VAR 0 6
50874: PPUSH
50875: CALL_OW 264
50879: PUSH
50880: LD_INT 10
50882: PUSH
50883: EMPTY
50884: LIST
50885: IN
50886: IFFALSE 50907
// points := [ 35 , 110 , 70 ] ;
50888: LD_ADDR_VAR 0 9
50892: PUSH
50893: LD_INT 35
50895: PUSH
50896: LD_INT 110
50898: PUSH
50899: LD_INT 70
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
50907: LD_VAR 0 6
50911: PPUSH
50912: CALL_OW 265
50916: PUSH
50917: LD_INT 25
50919: EQUAL
50920: IFFALSE 50941
// points := [ 80 , 65 , 100 ] ;
50922: LD_ADDR_VAR 0 9
50926: PUSH
50927: LD_INT 80
50929: PUSH
50930: LD_INT 65
50932: PUSH
50933: LD_INT 100
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: LIST
50940: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
50941: LD_VAR 0 6
50945: PPUSH
50946: CALL_OW 263
50950: PUSH
50951: LD_INT 1
50953: EQUAL
50954: IFFALSE 50989
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
50956: LD_ADDR_VAR 0 10
50960: PUSH
50961: LD_VAR 0 10
50965: PUSH
50966: LD_VAR 0 6
50970: PPUSH
50971: CALL_OW 311
50975: PPUSH
50976: LD_INT 3
50978: PPUSH
50979: CALL_OW 259
50983: PUSH
50984: LD_INT 4
50986: MUL
50987: MUL
50988: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
50989: LD_VAR 0 6
50993: PPUSH
50994: CALL_OW 263
50998: PUSH
50999: LD_INT 2
51001: EQUAL
51002: IFFALSE 51053
// begin j := IsControledBy ( i ) ;
51004: LD_ADDR_VAR 0 7
51008: PUSH
51009: LD_VAR 0 6
51013: PPUSH
51014: CALL_OW 312
51018: ST_TO_ADDR
// if j then
51019: LD_VAR 0 7
51023: IFFALSE 51053
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
51025: LD_ADDR_VAR 0 10
51029: PUSH
51030: LD_VAR 0 10
51034: PUSH
51035: LD_VAR 0 7
51039: PPUSH
51040: LD_INT 3
51042: PPUSH
51043: CALL_OW 259
51047: PUSH
51048: LD_INT 3
51050: MUL
51051: MUL
51052: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
51053: LD_VAR 0 6
51057: PPUSH
51058: CALL_OW 264
51062: PUSH
51063: LD_INT 5
51065: PUSH
51066: LD_INT 6
51068: PUSH
51069: LD_INT 46
51071: PUSH
51072: LD_INT 44
51074: PUSH
51075: LD_INT 47
51077: PUSH
51078: LD_INT 45
51080: PUSH
51081: LD_INT 28
51083: PUSH
51084: LD_INT 7
51086: PUSH
51087: LD_INT 27
51089: PUSH
51090: LD_INT 29
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: IN
51105: PUSH
51106: LD_VAR 0 1
51110: PPUSH
51111: LD_INT 52
51113: PPUSH
51114: CALL_OW 321
51118: PUSH
51119: LD_INT 2
51121: EQUAL
51122: AND
51123: IFFALSE 51140
// bpoints := bpoints * 1.2 ;
51125: LD_ADDR_VAR 0 10
51129: PUSH
51130: LD_VAR 0 10
51134: PUSH
51135: LD_REAL  1.20000000000000E+0000
51138: MUL
51139: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
51140: LD_VAR 0 6
51144: PPUSH
51145: CALL_OW 264
51149: PUSH
51150: LD_INT 6
51152: PUSH
51153: LD_INT 46
51155: PUSH
51156: LD_INT 47
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: LIST
51163: IN
51164: IFFALSE 51181
// bpoints := bpoints * 1.2 ;
51166: LD_ADDR_VAR 0 10
51170: PUSH
51171: LD_VAR 0 10
51175: PUSH
51176: LD_REAL  1.20000000000000E+0000
51179: MUL
51180: ST_TO_ADDR
// end ; unit_building :
51181: GO 51195
51183: LD_INT 3
51185: DOUBLE
51186: EQUAL
51187: IFTRUE 51191
51189: GO 51194
51191: POP
// ; end ;
51192: GO 51195
51194: POP
// for j = 1 to 3 do
51195: LD_ADDR_VAR 0 7
51199: PUSH
51200: DOUBLE
51201: LD_INT 1
51203: DEC
51204: ST_TO_ADDR
51205: LD_INT 3
51207: PUSH
51208: FOR_TO
51209: IFFALSE 51262
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
51211: LD_ADDR_VAR 0 5
51215: PUSH
51216: LD_VAR 0 5
51220: PPUSH
51221: LD_VAR 0 7
51225: PPUSH
51226: LD_VAR 0 5
51230: PUSH
51231: LD_VAR 0 7
51235: ARRAY
51236: PUSH
51237: LD_VAR 0 9
51241: PUSH
51242: LD_VAR 0 7
51246: ARRAY
51247: PUSH
51248: LD_VAR 0 10
51252: MUL
51253: PLUS
51254: PPUSH
51255: CALL_OW 1
51259: ST_TO_ADDR
51260: GO 51208
51262: POP
51263: POP
// end ;
51264: GO 49743
51266: POP
51267: POP
// result := Replace ( result , 4 , tmp ) ;
51268: LD_ADDR_VAR 0 5
51272: PUSH
51273: LD_VAR 0 5
51277: PPUSH
51278: LD_INT 4
51280: PPUSH
51281: LD_VAR 0 8
51285: PPUSH
51286: CALL_OW 1
51290: ST_TO_ADDR
// end ;
51291: LD_VAR 0 5
51295: RET
// export function DangerAtRange ( unit , range ) ; begin
51296: LD_INT 0
51298: PPUSH
// if not unit then
51299: LD_VAR 0 1
51303: NOT
51304: IFFALSE 51308
// exit ;
51306: GO 51353
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
51308: LD_ADDR_VAR 0 3
51312: PUSH
51313: LD_VAR 0 1
51317: PPUSH
51318: CALL_OW 255
51322: PPUSH
51323: LD_VAR 0 1
51327: PPUSH
51328: CALL_OW 250
51332: PPUSH
51333: LD_VAR 0 1
51337: PPUSH
51338: CALL_OW 251
51342: PPUSH
51343: LD_VAR 0 2
51347: PPUSH
51348: CALL 49595 0 4
51352: ST_TO_ADDR
// end ;
51353: LD_VAR 0 3
51357: RET
// export function DangerInArea ( side , area ) ; begin
51358: LD_INT 0
51360: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
51361: LD_ADDR_VAR 0 3
51365: PUSH
51366: LD_VAR 0 2
51370: PPUSH
51371: LD_INT 81
51373: PUSH
51374: LD_VAR 0 1
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PPUSH
51383: CALL_OW 70
51387: ST_TO_ADDR
// end ;
51388: LD_VAR 0 3
51392: RET
// export function IsExtension ( b ) ; begin
51393: LD_INT 0
51395: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
51396: LD_ADDR_VAR 0 2
51400: PUSH
51401: LD_VAR 0 1
51405: PUSH
51406: LD_INT 23
51408: PUSH
51409: LD_INT 20
51411: PUSH
51412: LD_INT 22
51414: PUSH
51415: LD_INT 17
51417: PUSH
51418: LD_INT 24
51420: PUSH
51421: LD_INT 21
51423: PUSH
51424: LD_INT 19
51426: PUSH
51427: LD_INT 16
51429: PUSH
51430: LD_INT 25
51432: PUSH
51433: LD_INT 18
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: IN
51448: ST_TO_ADDR
// end ;
51449: LD_VAR 0 2
51453: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
51454: LD_INT 0
51456: PPUSH
51457: PPUSH
51458: PPUSH
// result := [ ] ;
51459: LD_ADDR_VAR 0 4
51463: PUSH
51464: EMPTY
51465: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
51466: LD_ADDR_VAR 0 5
51470: PUSH
51471: LD_VAR 0 2
51475: PPUSH
51476: LD_INT 21
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PPUSH
51486: CALL_OW 70
51490: ST_TO_ADDR
// if not tmp then
51491: LD_VAR 0 5
51495: NOT
51496: IFFALSE 51500
// exit ;
51498: GO 51564
// if checkLink then
51500: LD_VAR 0 3
51504: IFFALSE 51554
// begin for i in tmp do
51506: LD_ADDR_VAR 0 6
51510: PUSH
51511: LD_VAR 0 5
51515: PUSH
51516: FOR_IN
51517: IFFALSE 51552
// if GetBase ( i ) <> base then
51519: LD_VAR 0 6
51523: PPUSH
51524: CALL_OW 274
51528: PUSH
51529: LD_VAR 0 1
51533: NONEQUAL
51534: IFFALSE 51550
// ComLinkToBase ( base , i ) ;
51536: LD_VAR 0 1
51540: PPUSH
51541: LD_VAR 0 6
51545: PPUSH
51546: CALL_OW 169
51550: GO 51516
51552: POP
51553: POP
// end ; result := tmp ;
51554: LD_ADDR_VAR 0 4
51558: PUSH
51559: LD_VAR 0 5
51563: ST_TO_ADDR
// end ;
51564: LD_VAR 0 4
51568: RET
// export function ComComplete ( units , b ) ; var i ; begin
51569: LD_INT 0
51571: PPUSH
51572: PPUSH
// if not units then
51573: LD_VAR 0 1
51577: NOT
51578: IFFALSE 51582
// exit ;
51580: GO 51672
// for i in units do
51582: LD_ADDR_VAR 0 4
51586: PUSH
51587: LD_VAR 0 1
51591: PUSH
51592: FOR_IN
51593: IFFALSE 51670
// if BuildingStatus ( b ) = bs_build then
51595: LD_VAR 0 2
51599: PPUSH
51600: CALL_OW 461
51604: PUSH
51605: LD_INT 1
51607: EQUAL
51608: IFFALSE 51668
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
51610: LD_VAR 0 4
51614: PPUSH
51615: LD_STRING h
51617: PUSH
51618: LD_VAR 0 2
51622: PPUSH
51623: CALL_OW 250
51627: PUSH
51628: LD_VAR 0 2
51632: PPUSH
51633: CALL_OW 251
51637: PUSH
51638: LD_VAR 0 2
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: PUSH
51661: EMPTY
51662: LIST
51663: PPUSH
51664: CALL_OW 446
51668: GO 51592
51670: POP
51671: POP
// end ;
51672: LD_VAR 0 3
51676: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
51677: LD_INT 0
51679: PPUSH
51680: PPUSH
51681: PPUSH
51682: PPUSH
51683: PPUSH
51684: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
51685: LD_VAR 0 1
51689: NOT
51690: PUSH
51691: LD_VAR 0 1
51695: PPUSH
51696: CALL_OW 263
51700: PUSH
51701: LD_INT 2
51703: NONEQUAL
51704: OR
51705: IFFALSE 51709
// exit ;
51707: GO 52025
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
51709: LD_ADDR_VAR 0 6
51713: PUSH
51714: LD_INT 22
51716: PUSH
51717: LD_VAR 0 1
51721: PPUSH
51722: CALL_OW 255
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 30
51736: PUSH
51737: LD_INT 36
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 34
51746: PUSH
51747: LD_INT 31
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PPUSH
51763: CALL_OW 69
51767: ST_TO_ADDR
// if not tmp then
51768: LD_VAR 0 6
51772: NOT
51773: IFFALSE 51777
// exit ;
51775: GO 52025
// result := [ ] ;
51777: LD_ADDR_VAR 0 2
51781: PUSH
51782: EMPTY
51783: ST_TO_ADDR
// for i in tmp do
51784: LD_ADDR_VAR 0 3
51788: PUSH
51789: LD_VAR 0 6
51793: PUSH
51794: FOR_IN
51795: IFFALSE 51866
// begin t := UnitsInside ( i ) ;
51797: LD_ADDR_VAR 0 4
51801: PUSH
51802: LD_VAR 0 3
51806: PPUSH
51807: CALL_OW 313
51811: ST_TO_ADDR
// if t then
51812: LD_VAR 0 4
51816: IFFALSE 51864
// for j in t do
51818: LD_ADDR_VAR 0 7
51822: PUSH
51823: LD_VAR 0 4
51827: PUSH
51828: FOR_IN
51829: IFFALSE 51862
// result := Replace ( result , result + 1 , j ) ;
51831: LD_ADDR_VAR 0 2
51835: PUSH
51836: LD_VAR 0 2
51840: PPUSH
51841: LD_VAR 0 2
51845: PUSH
51846: LD_INT 1
51848: PLUS
51849: PPUSH
51850: LD_VAR 0 7
51854: PPUSH
51855: CALL_OW 1
51859: ST_TO_ADDR
51860: GO 51828
51862: POP
51863: POP
// end ;
51864: GO 51794
51866: POP
51867: POP
// if not result then
51868: LD_VAR 0 2
51872: NOT
51873: IFFALSE 51877
// exit ;
51875: GO 52025
// mech := result [ 1 ] ;
51877: LD_ADDR_VAR 0 5
51881: PUSH
51882: LD_VAR 0 2
51886: PUSH
51887: LD_INT 1
51889: ARRAY
51890: ST_TO_ADDR
// if result > 1 then
51891: LD_VAR 0 2
51895: PUSH
51896: LD_INT 1
51898: GREATER
51899: IFFALSE 52011
// begin for i = 2 to result do
51901: LD_ADDR_VAR 0 3
51905: PUSH
51906: DOUBLE
51907: LD_INT 2
51909: DEC
51910: ST_TO_ADDR
51911: LD_VAR 0 2
51915: PUSH
51916: FOR_TO
51917: IFFALSE 52009
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
51919: LD_ADDR_VAR 0 4
51923: PUSH
51924: LD_VAR 0 2
51928: PUSH
51929: LD_VAR 0 3
51933: ARRAY
51934: PPUSH
51935: LD_INT 3
51937: PPUSH
51938: CALL_OW 259
51942: PUSH
51943: LD_VAR 0 2
51947: PUSH
51948: LD_VAR 0 3
51952: ARRAY
51953: PPUSH
51954: CALL_OW 432
51958: MINUS
51959: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
51960: LD_VAR 0 4
51964: PUSH
51965: LD_VAR 0 5
51969: PPUSH
51970: LD_INT 3
51972: PPUSH
51973: CALL_OW 259
51977: PUSH
51978: LD_VAR 0 5
51982: PPUSH
51983: CALL_OW 432
51987: MINUS
51988: GREATEREQUAL
51989: IFFALSE 52007
// mech := result [ i ] ;
51991: LD_ADDR_VAR 0 5
51995: PUSH
51996: LD_VAR 0 2
52000: PUSH
52001: LD_VAR 0 3
52005: ARRAY
52006: ST_TO_ADDR
// end ;
52007: GO 51916
52009: POP
52010: POP
// end ; ComLinkTo ( vehicle , mech ) ;
52011: LD_VAR 0 1
52015: PPUSH
52016: LD_VAR 0 5
52020: PPUSH
52021: CALL_OW 135
// end ;
52025: LD_VAR 0 2
52029: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
52030: LD_INT 0
52032: PPUSH
52033: PPUSH
52034: PPUSH
52035: PPUSH
52036: PPUSH
52037: PPUSH
52038: PPUSH
52039: PPUSH
52040: PPUSH
52041: PPUSH
52042: PPUSH
52043: PPUSH
52044: PPUSH
// result := [ ] ;
52045: LD_ADDR_VAR 0 7
52049: PUSH
52050: EMPTY
52051: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
52052: LD_VAR 0 1
52056: PPUSH
52057: CALL_OW 266
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 1
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: IN
52072: NOT
52073: IFFALSE 52077
// exit ;
52075: GO 53711
// if name then
52077: LD_VAR 0 3
52081: IFFALSE 52097
// SetBName ( base_dep , name ) ;
52083: LD_VAR 0 1
52087: PPUSH
52088: LD_VAR 0 3
52092: PPUSH
52093: CALL_OW 500
// base := GetBase ( base_dep ) ;
52097: LD_ADDR_VAR 0 15
52101: PUSH
52102: LD_VAR 0 1
52106: PPUSH
52107: CALL_OW 274
52111: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
52112: LD_ADDR_VAR 0 16
52116: PUSH
52117: LD_VAR 0 1
52121: PPUSH
52122: CALL_OW 255
52126: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
52127: LD_ADDR_VAR 0 17
52131: PUSH
52132: LD_VAR 0 1
52136: PPUSH
52137: CALL_OW 248
52141: ST_TO_ADDR
// if sources then
52142: LD_VAR 0 5
52146: IFFALSE 52193
// for i = 1 to 3 do
52148: LD_ADDR_VAR 0 8
52152: PUSH
52153: DOUBLE
52154: LD_INT 1
52156: DEC
52157: ST_TO_ADDR
52158: LD_INT 3
52160: PUSH
52161: FOR_TO
52162: IFFALSE 52191
// AddResourceType ( base , i , sources [ i ] ) ;
52164: LD_VAR 0 15
52168: PPUSH
52169: LD_VAR 0 8
52173: PPUSH
52174: LD_VAR 0 5
52178: PUSH
52179: LD_VAR 0 8
52183: ARRAY
52184: PPUSH
52185: CALL_OW 276
52189: GO 52161
52191: POP
52192: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
52193: LD_ADDR_VAR 0 18
52197: PUSH
52198: LD_VAR 0 15
52202: PPUSH
52203: LD_VAR 0 2
52207: PPUSH
52208: LD_INT 1
52210: PPUSH
52211: CALL 51454 0 3
52215: ST_TO_ADDR
// InitHc ;
52216: CALL_OW 19
// InitUc ;
52220: CALL_OW 18
// uc_side := side ;
52224: LD_ADDR_OWVAR 20
52228: PUSH
52229: LD_VAR 0 16
52233: ST_TO_ADDR
// uc_nation := nation ;
52234: LD_ADDR_OWVAR 21
52238: PUSH
52239: LD_VAR 0 17
52243: ST_TO_ADDR
// if buildings then
52244: LD_VAR 0 18
52248: IFFALSE 53570
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
52250: LD_ADDR_VAR 0 19
52254: PUSH
52255: LD_VAR 0 18
52259: PPUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 30
52265: PUSH
52266: LD_INT 29
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 30
52275: PUSH
52276: LD_INT 30
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: LIST
52287: PPUSH
52288: CALL_OW 72
52292: ST_TO_ADDR
// if tmp then
52293: LD_VAR 0 19
52297: IFFALSE 52345
// for i in tmp do
52299: LD_ADDR_VAR 0 8
52303: PUSH
52304: LD_VAR 0 19
52308: PUSH
52309: FOR_IN
52310: IFFALSE 52343
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
52312: LD_VAR 0 8
52316: PPUSH
52317: CALL_OW 250
52321: PPUSH
52322: LD_VAR 0 8
52326: PPUSH
52327: CALL_OW 251
52331: PPUSH
52332: LD_VAR 0 16
52336: PPUSH
52337: CALL_OW 441
52341: GO 52309
52343: POP
52344: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
52345: LD_VAR 0 18
52349: PPUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 30
52355: PUSH
52356: LD_INT 32
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 30
52365: PUSH
52366: LD_INT 33
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: LIST
52377: PPUSH
52378: CALL_OW 72
52382: IFFALSE 52470
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
52384: LD_ADDR_VAR 0 8
52388: PUSH
52389: LD_VAR 0 18
52393: PPUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 30
52399: PUSH
52400: LD_INT 32
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 30
52409: PUSH
52410: LD_INT 33
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: LIST
52421: PPUSH
52422: CALL_OW 72
52426: PUSH
52427: FOR_IN
52428: IFFALSE 52468
// begin if not GetBWeapon ( i ) then
52430: LD_VAR 0 8
52434: PPUSH
52435: CALL_OW 269
52439: NOT
52440: IFFALSE 52466
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
52442: LD_VAR 0 8
52446: PPUSH
52447: LD_VAR 0 8
52451: PPUSH
52452: LD_VAR 0 2
52456: PPUSH
52457: CALL 53716 0 2
52461: PPUSH
52462: CALL_OW 431
// end ;
52466: GO 52427
52468: POP
52469: POP
// end ; for i = 1 to personel do
52470: LD_ADDR_VAR 0 8
52474: PUSH
52475: DOUBLE
52476: LD_INT 1
52478: DEC
52479: ST_TO_ADDR
52480: LD_VAR 0 6
52484: PUSH
52485: FOR_TO
52486: IFFALSE 53550
// begin if i > 4 then
52488: LD_VAR 0 8
52492: PUSH
52493: LD_INT 4
52495: GREATER
52496: IFFALSE 52500
// break ;
52498: GO 53550
// case i of 1 :
52500: LD_VAR 0 8
52504: PUSH
52505: LD_INT 1
52507: DOUBLE
52508: EQUAL
52509: IFTRUE 52513
52511: GO 52593
52513: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
52514: LD_ADDR_VAR 0 12
52518: PUSH
52519: LD_VAR 0 18
52523: PPUSH
52524: LD_INT 22
52526: PUSH
52527: LD_VAR 0 16
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 58
52538: PUSH
52539: EMPTY
52540: LIST
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: LD_INT 30
52547: PUSH
52548: LD_INT 32
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 30
52557: PUSH
52558: LD_INT 4
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 30
52567: PUSH
52568: LD_INT 5
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: PPUSH
52586: CALL_OW 72
52590: ST_TO_ADDR
52591: GO 52815
52593: LD_INT 2
52595: DOUBLE
52596: EQUAL
52597: IFTRUE 52601
52599: GO 52663
52601: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
52602: LD_ADDR_VAR 0 12
52606: PUSH
52607: LD_VAR 0 18
52611: PPUSH
52612: LD_INT 22
52614: PUSH
52615: LD_VAR 0 16
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 30
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 30
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: LIST
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PPUSH
52656: CALL_OW 72
52660: ST_TO_ADDR
52661: GO 52815
52663: LD_INT 3
52665: DOUBLE
52666: EQUAL
52667: IFTRUE 52671
52669: GO 52733
52671: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
52672: LD_ADDR_VAR 0 12
52676: PUSH
52677: LD_VAR 0 18
52681: PPUSH
52682: LD_INT 22
52684: PUSH
52685: LD_VAR 0 16
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: LD_INT 30
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 30
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: LIST
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PPUSH
52726: CALL_OW 72
52730: ST_TO_ADDR
52731: GO 52815
52733: LD_INT 4
52735: DOUBLE
52736: EQUAL
52737: IFTRUE 52741
52739: GO 52814
52741: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
52742: LD_ADDR_VAR 0 12
52746: PUSH
52747: LD_VAR 0 18
52751: PPUSH
52752: LD_INT 22
52754: PUSH
52755: LD_VAR 0 16
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 30
52769: PUSH
52770: LD_INT 6
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 30
52779: PUSH
52780: LD_INT 7
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 30
52789: PUSH
52790: LD_INT 8
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PPUSH
52807: CALL_OW 72
52811: ST_TO_ADDR
52812: GO 52815
52814: POP
// if i = 1 then
52815: LD_VAR 0 8
52819: PUSH
52820: LD_INT 1
52822: EQUAL
52823: IFFALSE 52934
// begin tmp := [ ] ;
52825: LD_ADDR_VAR 0 19
52829: PUSH
52830: EMPTY
52831: ST_TO_ADDR
// for j in f do
52832: LD_ADDR_VAR 0 9
52836: PUSH
52837: LD_VAR 0 12
52841: PUSH
52842: FOR_IN
52843: IFFALSE 52916
// if GetBType ( j ) = b_bunker then
52845: LD_VAR 0 9
52849: PPUSH
52850: CALL_OW 266
52854: PUSH
52855: LD_INT 32
52857: EQUAL
52858: IFFALSE 52885
// tmp := Insert ( tmp , 1 , j ) else
52860: LD_ADDR_VAR 0 19
52864: PUSH
52865: LD_VAR 0 19
52869: PPUSH
52870: LD_INT 1
52872: PPUSH
52873: LD_VAR 0 9
52877: PPUSH
52878: CALL_OW 2
52882: ST_TO_ADDR
52883: GO 52914
// tmp := Insert ( tmp , tmp + 1 , j ) ;
52885: LD_ADDR_VAR 0 19
52889: PUSH
52890: LD_VAR 0 19
52894: PPUSH
52895: LD_VAR 0 19
52899: PUSH
52900: LD_INT 1
52902: PLUS
52903: PPUSH
52904: LD_VAR 0 9
52908: PPUSH
52909: CALL_OW 2
52913: ST_TO_ADDR
52914: GO 52842
52916: POP
52917: POP
// if tmp then
52918: LD_VAR 0 19
52922: IFFALSE 52934
// f := tmp ;
52924: LD_ADDR_VAR 0 12
52928: PUSH
52929: LD_VAR 0 19
52933: ST_TO_ADDR
// end ; x := personel [ i ] ;
52934: LD_ADDR_VAR 0 13
52938: PUSH
52939: LD_VAR 0 6
52943: PUSH
52944: LD_VAR 0 8
52948: ARRAY
52949: ST_TO_ADDR
// if x = - 1 then
52950: LD_VAR 0 13
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: EQUAL
52959: IFFALSE 53168
// begin for j in f do
52961: LD_ADDR_VAR 0 9
52965: PUSH
52966: LD_VAR 0 12
52970: PUSH
52971: FOR_IN
52972: IFFALSE 53164
// repeat InitHc ;
52974: CALL_OW 19
// if GetBType ( j ) = b_barracks then
52978: LD_VAR 0 9
52982: PPUSH
52983: CALL_OW 266
52987: PUSH
52988: LD_INT 5
52990: EQUAL
52991: IFFALSE 53061
// begin if UnitsInside ( j ) < 3 then
52993: LD_VAR 0 9
52997: PPUSH
52998: CALL_OW 313
53002: PUSH
53003: LD_INT 3
53005: LESS
53006: IFFALSE 53042
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53008: LD_INT 0
53010: PPUSH
53011: LD_INT 5
53013: PUSH
53014: LD_INT 8
53016: PUSH
53017: LD_INT 9
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: LIST
53024: PUSH
53025: LD_VAR 0 17
53029: ARRAY
53030: PPUSH
53031: LD_VAR 0 4
53035: PPUSH
53036: CALL_OW 380
53040: GO 53059
// PrepareHuman ( false , i , skill ) ;
53042: LD_INT 0
53044: PPUSH
53045: LD_VAR 0 8
53049: PPUSH
53050: LD_VAR 0 4
53054: PPUSH
53055: CALL_OW 380
// end else
53059: GO 53078
// PrepareHuman ( false , i , skill ) ;
53061: LD_INT 0
53063: PPUSH
53064: LD_VAR 0 8
53068: PPUSH
53069: LD_VAR 0 4
53073: PPUSH
53074: CALL_OW 380
// un := CreateHuman ;
53078: LD_ADDR_VAR 0 14
53082: PUSH
53083: CALL_OW 44
53087: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53088: LD_ADDR_VAR 0 7
53092: PUSH
53093: LD_VAR 0 7
53097: PPUSH
53098: LD_INT 1
53100: PPUSH
53101: LD_VAR 0 14
53105: PPUSH
53106: CALL_OW 2
53110: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
53111: LD_VAR 0 14
53115: PPUSH
53116: LD_VAR 0 9
53120: PPUSH
53121: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
53125: LD_VAR 0 9
53129: PPUSH
53130: CALL_OW 313
53134: PUSH
53135: LD_INT 6
53137: EQUAL
53138: PUSH
53139: LD_VAR 0 9
53143: PPUSH
53144: CALL_OW 266
53148: PUSH
53149: LD_INT 32
53151: PUSH
53152: LD_INT 31
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: IN
53159: OR
53160: IFFALSE 52974
53162: GO 52971
53164: POP
53165: POP
// end else
53166: GO 53548
// for j = 1 to x do
53168: LD_ADDR_VAR 0 9
53172: PUSH
53173: DOUBLE
53174: LD_INT 1
53176: DEC
53177: ST_TO_ADDR
53178: LD_VAR 0 13
53182: PUSH
53183: FOR_TO
53184: IFFALSE 53546
// begin InitHc ;
53186: CALL_OW 19
// if not f then
53190: LD_VAR 0 12
53194: NOT
53195: IFFALSE 53284
// begin PrepareHuman ( false , i , skill ) ;
53197: LD_INT 0
53199: PPUSH
53200: LD_VAR 0 8
53204: PPUSH
53205: LD_VAR 0 4
53209: PPUSH
53210: CALL_OW 380
// un := CreateHuman ;
53214: LD_ADDR_VAR 0 14
53218: PUSH
53219: CALL_OW 44
53223: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53224: LD_ADDR_VAR 0 7
53228: PUSH
53229: LD_VAR 0 7
53233: PPUSH
53234: LD_INT 1
53236: PPUSH
53237: LD_VAR 0 14
53241: PPUSH
53242: CALL_OW 2
53246: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53247: LD_VAR 0 14
53251: PPUSH
53252: LD_VAR 0 1
53256: PPUSH
53257: CALL_OW 250
53261: PPUSH
53262: LD_VAR 0 1
53266: PPUSH
53267: CALL_OW 251
53271: PPUSH
53272: LD_INT 10
53274: PPUSH
53275: LD_INT 0
53277: PPUSH
53278: CALL_OW 50
// continue ;
53282: GO 53183
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
53284: LD_VAR 0 12
53288: PUSH
53289: LD_INT 1
53291: ARRAY
53292: PPUSH
53293: CALL_OW 313
53297: PUSH
53298: LD_VAR 0 12
53302: PUSH
53303: LD_INT 1
53305: ARRAY
53306: PPUSH
53307: CALL_OW 266
53311: PUSH
53312: LD_INT 32
53314: PUSH
53315: LD_INT 31
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: IN
53322: AND
53323: PUSH
53324: LD_VAR 0 12
53328: PUSH
53329: LD_INT 1
53331: ARRAY
53332: PPUSH
53333: CALL_OW 313
53337: PUSH
53338: LD_INT 6
53340: EQUAL
53341: OR
53342: IFFALSE 53362
// f := Delete ( f , 1 ) ;
53344: LD_ADDR_VAR 0 12
53348: PUSH
53349: LD_VAR 0 12
53353: PPUSH
53354: LD_INT 1
53356: PPUSH
53357: CALL_OW 3
53361: ST_TO_ADDR
// if not f then
53362: LD_VAR 0 12
53366: NOT
53367: IFFALSE 53385
// begin x := x + 2 ;
53369: LD_ADDR_VAR 0 13
53373: PUSH
53374: LD_VAR 0 13
53378: PUSH
53379: LD_INT 2
53381: PLUS
53382: ST_TO_ADDR
// continue ;
53383: GO 53183
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
53385: LD_VAR 0 12
53389: PUSH
53390: LD_INT 1
53392: ARRAY
53393: PPUSH
53394: CALL_OW 266
53398: PUSH
53399: LD_INT 5
53401: EQUAL
53402: IFFALSE 53476
// begin if UnitsInside ( f [ 1 ] ) < 3 then
53404: LD_VAR 0 12
53408: PUSH
53409: LD_INT 1
53411: ARRAY
53412: PPUSH
53413: CALL_OW 313
53417: PUSH
53418: LD_INT 3
53420: LESS
53421: IFFALSE 53457
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
53423: LD_INT 0
53425: PPUSH
53426: LD_INT 5
53428: PUSH
53429: LD_INT 8
53431: PUSH
53432: LD_INT 9
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: PUSH
53440: LD_VAR 0 17
53444: ARRAY
53445: PPUSH
53446: LD_VAR 0 4
53450: PPUSH
53451: CALL_OW 380
53455: GO 53474
// PrepareHuman ( false , i , skill ) ;
53457: LD_INT 0
53459: PPUSH
53460: LD_VAR 0 8
53464: PPUSH
53465: LD_VAR 0 4
53469: PPUSH
53470: CALL_OW 380
// end else
53474: GO 53493
// PrepareHuman ( false , i , skill ) ;
53476: LD_INT 0
53478: PPUSH
53479: LD_VAR 0 8
53483: PPUSH
53484: LD_VAR 0 4
53488: PPUSH
53489: CALL_OW 380
// un := CreateHuman ;
53493: LD_ADDR_VAR 0 14
53497: PUSH
53498: CALL_OW 44
53502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
53503: LD_ADDR_VAR 0 7
53507: PUSH
53508: LD_VAR 0 7
53512: PPUSH
53513: LD_INT 1
53515: PPUSH
53516: LD_VAR 0 14
53520: PPUSH
53521: CALL_OW 2
53525: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
53526: LD_VAR 0 14
53530: PPUSH
53531: LD_VAR 0 12
53535: PUSH
53536: LD_INT 1
53538: ARRAY
53539: PPUSH
53540: CALL_OW 52
// end ;
53544: GO 53183
53546: POP
53547: POP
// end ;
53548: GO 52485
53550: POP
53551: POP
// result := result ^ buildings ;
53552: LD_ADDR_VAR 0 7
53556: PUSH
53557: LD_VAR 0 7
53561: PUSH
53562: LD_VAR 0 18
53566: ADD
53567: ST_TO_ADDR
// end else
53568: GO 53711
// begin for i = 1 to personel do
53570: LD_ADDR_VAR 0 8
53574: PUSH
53575: DOUBLE
53576: LD_INT 1
53578: DEC
53579: ST_TO_ADDR
53580: LD_VAR 0 6
53584: PUSH
53585: FOR_TO
53586: IFFALSE 53709
// begin if i > 4 then
53588: LD_VAR 0 8
53592: PUSH
53593: LD_INT 4
53595: GREATER
53596: IFFALSE 53600
// break ;
53598: GO 53709
// x := personel [ i ] ;
53600: LD_ADDR_VAR 0 13
53604: PUSH
53605: LD_VAR 0 6
53609: PUSH
53610: LD_VAR 0 8
53614: ARRAY
53615: ST_TO_ADDR
// if x = - 1 then
53616: LD_VAR 0 13
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: EQUAL
53625: IFFALSE 53629
// continue ;
53627: GO 53585
// PrepareHuman ( false , i , skill ) ;
53629: LD_INT 0
53631: PPUSH
53632: LD_VAR 0 8
53636: PPUSH
53637: LD_VAR 0 4
53641: PPUSH
53642: CALL_OW 380
// un := CreateHuman ;
53646: LD_ADDR_VAR 0 14
53650: PUSH
53651: CALL_OW 44
53655: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
53656: LD_VAR 0 14
53660: PPUSH
53661: LD_VAR 0 1
53665: PPUSH
53666: CALL_OW 250
53670: PPUSH
53671: LD_VAR 0 1
53675: PPUSH
53676: CALL_OW 251
53680: PPUSH
53681: LD_INT 10
53683: PPUSH
53684: LD_INT 0
53686: PPUSH
53687: CALL_OW 50
// result := result ^ un ;
53691: LD_ADDR_VAR 0 7
53695: PUSH
53696: LD_VAR 0 7
53700: PUSH
53701: LD_VAR 0 14
53705: ADD
53706: ST_TO_ADDR
// end ;
53707: GO 53585
53709: POP
53710: POP
// end ; end ;
53711: LD_VAR 0 7
53715: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
53716: LD_INT 0
53718: PPUSH
53719: PPUSH
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
53729: PPUSH
53730: PPUSH
53731: PPUSH
53732: PPUSH
53733: PPUSH
// result := false ;
53734: LD_ADDR_VAR 0 3
53738: PUSH
53739: LD_INT 0
53741: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
53742: LD_VAR 0 1
53746: NOT
53747: PUSH
53748: LD_VAR 0 1
53752: PPUSH
53753: CALL_OW 266
53757: PUSH
53758: LD_INT 32
53760: PUSH
53761: LD_INT 33
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: IN
53768: NOT
53769: OR
53770: IFFALSE 53774
// exit ;
53772: GO 54883
// nat := GetNation ( tower ) ;
53774: LD_ADDR_VAR 0 12
53778: PUSH
53779: LD_VAR 0 1
53783: PPUSH
53784: CALL_OW 248
53788: ST_TO_ADDR
// side := GetSide ( tower ) ;
53789: LD_ADDR_VAR 0 16
53793: PUSH
53794: LD_VAR 0 1
53798: PPUSH
53799: CALL_OW 255
53803: ST_TO_ADDR
// x := GetX ( tower ) ;
53804: LD_ADDR_VAR 0 10
53808: PUSH
53809: LD_VAR 0 1
53813: PPUSH
53814: CALL_OW 250
53818: ST_TO_ADDR
// y := GetY ( tower ) ;
53819: LD_ADDR_VAR 0 11
53823: PUSH
53824: LD_VAR 0 1
53828: PPUSH
53829: CALL_OW 251
53833: ST_TO_ADDR
// if not x or not y then
53834: LD_VAR 0 10
53838: NOT
53839: PUSH
53840: LD_VAR 0 11
53844: NOT
53845: OR
53846: IFFALSE 53850
// exit ;
53848: GO 54883
// weapon := 0 ;
53850: LD_ADDR_VAR 0 18
53854: PUSH
53855: LD_INT 0
53857: ST_TO_ADDR
// fac_list := [ ] ;
53858: LD_ADDR_VAR 0 17
53862: PUSH
53863: EMPTY
53864: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
53865: LD_ADDR_VAR 0 6
53869: PUSH
53870: LD_VAR 0 1
53874: PPUSH
53875: CALL_OW 274
53879: PPUSH
53880: LD_VAR 0 2
53884: PPUSH
53885: LD_INT 0
53887: PPUSH
53888: CALL 51454 0 3
53892: PPUSH
53893: LD_INT 30
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PPUSH
53903: CALL_OW 72
53907: ST_TO_ADDR
// if not factories then
53908: LD_VAR 0 6
53912: NOT
53913: IFFALSE 53917
// exit ;
53915: GO 54883
// for i in factories do
53917: LD_ADDR_VAR 0 8
53921: PUSH
53922: LD_VAR 0 6
53926: PUSH
53927: FOR_IN
53928: IFFALSE 53953
// fac_list := fac_list union AvailableWeaponList ( i ) ;
53930: LD_ADDR_VAR 0 17
53934: PUSH
53935: LD_VAR 0 17
53939: PUSH
53940: LD_VAR 0 8
53944: PPUSH
53945: CALL_OW 478
53949: UNION
53950: ST_TO_ADDR
53951: GO 53927
53953: POP
53954: POP
// if not fac_list then
53955: LD_VAR 0 17
53959: NOT
53960: IFFALSE 53964
// exit ;
53962: GO 54883
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
53964: LD_ADDR_VAR 0 5
53968: PUSH
53969: LD_INT 4
53971: PUSH
53972: LD_INT 5
53974: PUSH
53975: LD_INT 9
53977: PUSH
53978: LD_INT 10
53980: PUSH
53981: LD_INT 6
53983: PUSH
53984: LD_INT 7
53986: PUSH
53987: LD_INT 11
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 27
54001: PUSH
54002: LD_INT 28
54004: PUSH
54005: LD_INT 26
54007: PUSH
54008: LD_INT 30
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 43
54019: PUSH
54020: LD_INT 44
54022: PUSH
54023: LD_INT 46
54025: PUSH
54026: LD_INT 45
54028: PUSH
54029: LD_INT 47
54031: PUSH
54032: LD_INT 49
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: LIST
54047: PUSH
54048: LD_VAR 0 12
54052: ARRAY
54053: ST_TO_ADDR
// list := list isect fac_list ;
54054: LD_ADDR_VAR 0 5
54058: PUSH
54059: LD_VAR 0 5
54063: PUSH
54064: LD_VAR 0 17
54068: ISECT
54069: ST_TO_ADDR
// if not list then
54070: LD_VAR 0 5
54074: NOT
54075: IFFALSE 54079
// exit ;
54077: GO 54883
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
54079: LD_VAR 0 12
54083: PUSH
54084: LD_INT 3
54086: EQUAL
54087: PUSH
54088: LD_INT 49
54090: PUSH
54091: LD_VAR 0 5
54095: IN
54096: AND
54097: PUSH
54098: LD_INT 31
54100: PPUSH
54101: LD_VAR 0 16
54105: PPUSH
54106: CALL_OW 321
54110: PUSH
54111: LD_INT 2
54113: EQUAL
54114: AND
54115: IFFALSE 54175
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
54117: LD_INT 22
54119: PUSH
54120: LD_VAR 0 16
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 35
54131: PUSH
54132: LD_INT 49
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 91
54141: PUSH
54142: LD_VAR 0 1
54146: PUSH
54147: LD_INT 10
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: LIST
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: LIST
54159: PPUSH
54160: CALL_OW 69
54164: NOT
54165: IFFALSE 54175
// weapon := ru_time_lapser ;
54167: LD_ADDR_VAR 0 18
54171: PUSH
54172: LD_INT 49
54174: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
54175: LD_VAR 0 12
54179: PUSH
54180: LD_INT 1
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: IN
54190: PUSH
54191: LD_INT 11
54193: PUSH
54194: LD_VAR 0 5
54198: IN
54199: PUSH
54200: LD_INT 30
54202: PUSH
54203: LD_VAR 0 5
54207: IN
54208: OR
54209: AND
54210: PUSH
54211: LD_INT 6
54213: PPUSH
54214: LD_VAR 0 16
54218: PPUSH
54219: CALL_OW 321
54223: PUSH
54224: LD_INT 2
54226: EQUAL
54227: AND
54228: IFFALSE 54393
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
54230: LD_INT 22
54232: PUSH
54233: LD_VAR 0 16
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: LD_INT 35
54247: PUSH
54248: LD_INT 11
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 35
54257: PUSH
54258: LD_INT 30
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 91
54272: PUSH
54273: LD_VAR 0 1
54277: PUSH
54278: LD_INT 18
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: LIST
54290: PPUSH
54291: CALL_OW 69
54295: NOT
54296: PUSH
54297: LD_INT 22
54299: PUSH
54300: LD_VAR 0 16
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: LD_INT 30
54314: PUSH
54315: LD_INT 32
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 30
54324: PUSH
54325: LD_INT 33
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 91
54339: PUSH
54340: LD_VAR 0 1
54344: PUSH
54345: LD_INT 12
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: LIST
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: PPUSH
54361: CALL_OW 69
54365: PUSH
54366: LD_INT 2
54368: GREATER
54369: AND
54370: IFFALSE 54393
// weapon := [ us_radar , ar_radar ] [ nat ] ;
54372: LD_ADDR_VAR 0 18
54376: PUSH
54377: LD_INT 11
54379: PUSH
54380: LD_INT 30
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_VAR 0 12
54391: ARRAY
54392: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
54393: LD_VAR 0 18
54397: NOT
54398: PUSH
54399: LD_INT 40
54401: PPUSH
54402: LD_VAR 0 16
54406: PPUSH
54407: CALL_OW 321
54411: PUSH
54412: LD_INT 2
54414: EQUAL
54415: AND
54416: PUSH
54417: LD_INT 7
54419: PUSH
54420: LD_VAR 0 5
54424: IN
54425: PUSH
54426: LD_INT 28
54428: PUSH
54429: LD_VAR 0 5
54433: IN
54434: OR
54435: PUSH
54436: LD_INT 45
54438: PUSH
54439: LD_VAR 0 5
54443: IN
54444: OR
54445: AND
54446: IFFALSE 54700
// begin hex := GetHexInfo ( x , y ) ;
54448: LD_ADDR_VAR 0 4
54452: PUSH
54453: LD_VAR 0 10
54457: PPUSH
54458: LD_VAR 0 11
54462: PPUSH
54463: CALL_OW 546
54467: ST_TO_ADDR
// if hex [ 1 ] then
54468: LD_VAR 0 4
54472: PUSH
54473: LD_INT 1
54475: ARRAY
54476: IFFALSE 54480
// exit ;
54478: GO 54883
// height := hex [ 2 ] ;
54480: LD_ADDR_VAR 0 15
54484: PUSH
54485: LD_VAR 0 4
54489: PUSH
54490: LD_INT 2
54492: ARRAY
54493: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
54494: LD_ADDR_VAR 0 14
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: LD_INT 5
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// for i in tmp do
54517: LD_ADDR_VAR 0 8
54521: PUSH
54522: LD_VAR 0 14
54526: PUSH
54527: FOR_IN
54528: IFFALSE 54698
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
54530: LD_ADDR_VAR 0 9
54534: PUSH
54535: LD_VAR 0 10
54539: PPUSH
54540: LD_VAR 0 8
54544: PPUSH
54545: LD_INT 5
54547: PPUSH
54548: CALL_OW 272
54552: PUSH
54553: LD_VAR 0 11
54557: PPUSH
54558: LD_VAR 0 8
54562: PPUSH
54563: LD_INT 5
54565: PPUSH
54566: CALL_OW 273
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
54575: LD_VAR 0 9
54579: PUSH
54580: LD_INT 1
54582: ARRAY
54583: PPUSH
54584: LD_VAR 0 9
54588: PUSH
54589: LD_INT 2
54591: ARRAY
54592: PPUSH
54593: CALL_OW 488
54597: IFFALSE 54696
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
54599: LD_ADDR_VAR 0 4
54603: PUSH
54604: LD_VAR 0 9
54608: PUSH
54609: LD_INT 1
54611: ARRAY
54612: PPUSH
54613: LD_VAR 0 9
54617: PUSH
54618: LD_INT 2
54620: ARRAY
54621: PPUSH
54622: CALL_OW 546
54626: ST_TO_ADDR
// if hex [ 1 ] then
54627: LD_VAR 0 4
54631: PUSH
54632: LD_INT 1
54634: ARRAY
54635: IFFALSE 54639
// continue ;
54637: GO 54527
// h := hex [ 2 ] ;
54639: LD_ADDR_VAR 0 13
54643: PUSH
54644: LD_VAR 0 4
54648: PUSH
54649: LD_INT 2
54651: ARRAY
54652: ST_TO_ADDR
// if h + 7 < height then
54653: LD_VAR 0 13
54657: PUSH
54658: LD_INT 7
54660: PLUS
54661: PUSH
54662: LD_VAR 0 15
54666: LESS
54667: IFFALSE 54696
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
54669: LD_ADDR_VAR 0 18
54673: PUSH
54674: LD_INT 7
54676: PUSH
54677: LD_INT 28
54679: PUSH
54680: LD_INT 45
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: PUSH
54688: LD_VAR 0 12
54692: ARRAY
54693: ST_TO_ADDR
// break ;
54694: GO 54698
// end ; end ; end ;
54696: GO 54527
54698: POP
54699: POP
// end ; if not weapon then
54700: LD_VAR 0 18
54704: NOT
54705: IFFALSE 54765
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
54707: LD_ADDR_VAR 0 5
54711: PUSH
54712: LD_VAR 0 5
54716: PUSH
54717: LD_INT 11
54719: PUSH
54720: LD_INT 30
54722: PUSH
54723: LD_INT 49
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: LIST
54730: DIFF
54731: ST_TO_ADDR
// if not list then
54732: LD_VAR 0 5
54736: NOT
54737: IFFALSE 54741
// exit ;
54739: GO 54883
// weapon := list [ rand ( 1 , list ) ] ;
54741: LD_ADDR_VAR 0 18
54745: PUSH
54746: LD_VAR 0 5
54750: PUSH
54751: LD_INT 1
54753: PPUSH
54754: LD_VAR 0 5
54758: PPUSH
54759: CALL_OW 12
54763: ARRAY
54764: ST_TO_ADDR
// end ; if weapon then
54765: LD_VAR 0 18
54769: IFFALSE 54883
// begin tmp := CostOfWeapon ( weapon ) ;
54771: LD_ADDR_VAR 0 14
54775: PUSH
54776: LD_VAR 0 18
54780: PPUSH
54781: CALL_OW 451
54785: ST_TO_ADDR
// j := GetBase ( tower ) ;
54786: LD_ADDR_VAR 0 9
54790: PUSH
54791: LD_VAR 0 1
54795: PPUSH
54796: CALL_OW 274
54800: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
54801: LD_VAR 0 9
54805: PPUSH
54806: LD_INT 1
54808: PPUSH
54809: CALL_OW 275
54813: PUSH
54814: LD_VAR 0 14
54818: PUSH
54819: LD_INT 1
54821: ARRAY
54822: GREATEREQUAL
54823: PUSH
54824: LD_VAR 0 9
54828: PPUSH
54829: LD_INT 2
54831: PPUSH
54832: CALL_OW 275
54836: PUSH
54837: LD_VAR 0 14
54841: PUSH
54842: LD_INT 2
54844: ARRAY
54845: GREATEREQUAL
54846: AND
54847: PUSH
54848: LD_VAR 0 9
54852: PPUSH
54853: LD_INT 3
54855: PPUSH
54856: CALL_OW 275
54860: PUSH
54861: LD_VAR 0 14
54865: PUSH
54866: LD_INT 3
54868: ARRAY
54869: GREATEREQUAL
54870: AND
54871: IFFALSE 54883
// result := weapon ;
54873: LD_ADDR_VAR 0 3
54877: PUSH
54878: LD_VAR 0 18
54882: ST_TO_ADDR
// end ; end ;
54883: LD_VAR 0 3
54887: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
54888: LD_INT 0
54890: PPUSH
54891: PPUSH
// result := true ;
54892: LD_ADDR_VAR 0 3
54896: PUSH
54897: LD_INT 1
54899: ST_TO_ADDR
// if array1 = array2 then
54900: LD_VAR 0 1
54904: PUSH
54905: LD_VAR 0 2
54909: EQUAL
54910: IFFALSE 54970
// begin for i = 1 to array1 do
54912: LD_ADDR_VAR 0 4
54916: PUSH
54917: DOUBLE
54918: LD_INT 1
54920: DEC
54921: ST_TO_ADDR
54922: LD_VAR 0 1
54926: PUSH
54927: FOR_TO
54928: IFFALSE 54966
// if array1 [ i ] <> array2 [ i ] then
54930: LD_VAR 0 1
54934: PUSH
54935: LD_VAR 0 4
54939: ARRAY
54940: PUSH
54941: LD_VAR 0 2
54945: PUSH
54946: LD_VAR 0 4
54950: ARRAY
54951: NONEQUAL
54952: IFFALSE 54964
// begin result := false ;
54954: LD_ADDR_VAR 0 3
54958: PUSH
54959: LD_INT 0
54961: ST_TO_ADDR
// break ;
54962: GO 54966
// end ;
54964: GO 54927
54966: POP
54967: POP
// end else
54968: GO 54978
// result := false ;
54970: LD_ADDR_VAR 0 3
54974: PUSH
54975: LD_INT 0
54977: ST_TO_ADDR
// end ;
54978: LD_VAR 0 3
54982: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
54983: LD_INT 0
54985: PPUSH
54986: PPUSH
// if not array1 or not array2 then
54987: LD_VAR 0 1
54991: NOT
54992: PUSH
54993: LD_VAR 0 2
54997: NOT
54998: OR
54999: IFFALSE 55003
// exit ;
55001: GO 55067
// result := true ;
55003: LD_ADDR_VAR 0 3
55007: PUSH
55008: LD_INT 1
55010: ST_TO_ADDR
// for i = 1 to array1 do
55011: LD_ADDR_VAR 0 4
55015: PUSH
55016: DOUBLE
55017: LD_INT 1
55019: DEC
55020: ST_TO_ADDR
55021: LD_VAR 0 1
55025: PUSH
55026: FOR_TO
55027: IFFALSE 55065
// if array1 [ i ] <> array2 [ i ] then
55029: LD_VAR 0 1
55033: PUSH
55034: LD_VAR 0 4
55038: ARRAY
55039: PUSH
55040: LD_VAR 0 2
55044: PUSH
55045: LD_VAR 0 4
55049: ARRAY
55050: NONEQUAL
55051: IFFALSE 55063
// begin result := false ;
55053: LD_ADDR_VAR 0 3
55057: PUSH
55058: LD_INT 0
55060: ST_TO_ADDR
// break ;
55061: GO 55065
// end ;
55063: GO 55026
55065: POP
55066: POP
// end ;
55067: LD_VAR 0 3
55071: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
55072: LD_INT 0
55074: PPUSH
55075: PPUSH
55076: PPUSH
// pom := GetBase ( fac ) ;
55077: LD_ADDR_VAR 0 5
55081: PUSH
55082: LD_VAR 0 1
55086: PPUSH
55087: CALL_OW 274
55091: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
55092: LD_ADDR_VAR 0 4
55096: PUSH
55097: LD_VAR 0 2
55101: PUSH
55102: LD_INT 1
55104: ARRAY
55105: PPUSH
55106: LD_VAR 0 2
55110: PUSH
55111: LD_INT 2
55113: ARRAY
55114: PPUSH
55115: LD_VAR 0 2
55119: PUSH
55120: LD_INT 3
55122: ARRAY
55123: PPUSH
55124: LD_VAR 0 2
55128: PUSH
55129: LD_INT 4
55131: ARRAY
55132: PPUSH
55133: CALL_OW 449
55137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55138: LD_ADDR_VAR 0 3
55142: PUSH
55143: LD_VAR 0 5
55147: PPUSH
55148: LD_INT 1
55150: PPUSH
55151: CALL_OW 275
55155: PUSH
55156: LD_VAR 0 4
55160: PUSH
55161: LD_INT 1
55163: ARRAY
55164: GREATEREQUAL
55165: PUSH
55166: LD_VAR 0 5
55170: PPUSH
55171: LD_INT 2
55173: PPUSH
55174: CALL_OW 275
55178: PUSH
55179: LD_VAR 0 4
55183: PUSH
55184: LD_INT 2
55186: ARRAY
55187: GREATEREQUAL
55188: AND
55189: PUSH
55190: LD_VAR 0 5
55194: PPUSH
55195: LD_INT 3
55197: PPUSH
55198: CALL_OW 275
55202: PUSH
55203: LD_VAR 0 4
55207: PUSH
55208: LD_INT 3
55210: ARRAY
55211: GREATEREQUAL
55212: AND
55213: ST_TO_ADDR
// end ;
55214: LD_VAR 0 3
55218: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
55219: LD_INT 0
55221: PPUSH
55222: PPUSH
55223: PPUSH
55224: PPUSH
// pom := GetBase ( building ) ;
55225: LD_ADDR_VAR 0 3
55229: PUSH
55230: LD_VAR 0 1
55234: PPUSH
55235: CALL_OW 274
55239: ST_TO_ADDR
// if not pom then
55240: LD_VAR 0 3
55244: NOT
55245: IFFALSE 55249
// exit ;
55247: GO 55419
// btype := GetBType ( building ) ;
55249: LD_ADDR_VAR 0 5
55253: PUSH
55254: LD_VAR 0 1
55258: PPUSH
55259: CALL_OW 266
55263: ST_TO_ADDR
// if btype = b_armoury then
55264: LD_VAR 0 5
55268: PUSH
55269: LD_INT 4
55271: EQUAL
55272: IFFALSE 55282
// btype := b_barracks ;
55274: LD_ADDR_VAR 0 5
55278: PUSH
55279: LD_INT 5
55281: ST_TO_ADDR
// if btype = b_depot then
55282: LD_VAR 0 5
55286: PUSH
55287: LD_INT 0
55289: EQUAL
55290: IFFALSE 55300
// btype := b_warehouse ;
55292: LD_ADDR_VAR 0 5
55296: PUSH
55297: LD_INT 1
55299: ST_TO_ADDR
// if btype = b_workshop then
55300: LD_VAR 0 5
55304: PUSH
55305: LD_INT 2
55307: EQUAL
55308: IFFALSE 55318
// btype := b_factory ;
55310: LD_ADDR_VAR 0 5
55314: PUSH
55315: LD_INT 3
55317: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55318: LD_ADDR_VAR 0 4
55322: PUSH
55323: LD_VAR 0 5
55327: PPUSH
55328: LD_VAR 0 1
55332: PPUSH
55333: CALL_OW 248
55337: PPUSH
55338: CALL_OW 450
55342: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55343: LD_ADDR_VAR 0 2
55347: PUSH
55348: LD_VAR 0 3
55352: PPUSH
55353: LD_INT 1
55355: PPUSH
55356: CALL_OW 275
55360: PUSH
55361: LD_VAR 0 4
55365: PUSH
55366: LD_INT 1
55368: ARRAY
55369: GREATEREQUAL
55370: PUSH
55371: LD_VAR 0 3
55375: PPUSH
55376: LD_INT 2
55378: PPUSH
55379: CALL_OW 275
55383: PUSH
55384: LD_VAR 0 4
55388: PUSH
55389: LD_INT 2
55391: ARRAY
55392: GREATEREQUAL
55393: AND
55394: PUSH
55395: LD_VAR 0 3
55399: PPUSH
55400: LD_INT 3
55402: PPUSH
55403: CALL_OW 275
55407: PUSH
55408: LD_VAR 0 4
55412: PUSH
55413: LD_INT 3
55415: ARRAY
55416: GREATEREQUAL
55417: AND
55418: ST_TO_ADDR
// end ;
55419: LD_VAR 0 2
55423: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
55424: LD_INT 0
55426: PPUSH
55427: PPUSH
55428: PPUSH
// pom := GetBase ( building ) ;
55429: LD_ADDR_VAR 0 4
55433: PUSH
55434: LD_VAR 0 1
55438: PPUSH
55439: CALL_OW 274
55443: ST_TO_ADDR
// if not pom then
55444: LD_VAR 0 4
55448: NOT
55449: IFFALSE 55453
// exit ;
55451: GO 55554
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
55453: LD_ADDR_VAR 0 5
55457: PUSH
55458: LD_VAR 0 2
55462: PPUSH
55463: LD_VAR 0 1
55467: PPUSH
55468: CALL_OW 248
55472: PPUSH
55473: CALL_OW 450
55477: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
55478: LD_ADDR_VAR 0 3
55482: PUSH
55483: LD_VAR 0 4
55487: PPUSH
55488: LD_INT 1
55490: PPUSH
55491: CALL_OW 275
55495: PUSH
55496: LD_VAR 0 5
55500: PUSH
55501: LD_INT 1
55503: ARRAY
55504: GREATEREQUAL
55505: PUSH
55506: LD_VAR 0 4
55510: PPUSH
55511: LD_INT 2
55513: PPUSH
55514: CALL_OW 275
55518: PUSH
55519: LD_VAR 0 5
55523: PUSH
55524: LD_INT 2
55526: ARRAY
55527: GREATEREQUAL
55528: AND
55529: PUSH
55530: LD_VAR 0 4
55534: PPUSH
55535: LD_INT 3
55537: PPUSH
55538: CALL_OW 275
55542: PUSH
55543: LD_VAR 0 5
55547: PUSH
55548: LD_INT 3
55550: ARRAY
55551: GREATEREQUAL
55552: AND
55553: ST_TO_ADDR
// end ;
55554: LD_VAR 0 3
55558: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
55559: LD_INT 0
55561: PPUSH
55562: PPUSH
55563: PPUSH
55564: PPUSH
55565: PPUSH
55566: PPUSH
55567: PPUSH
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
// result := false ;
55572: LD_ADDR_VAR 0 8
55576: PUSH
55577: LD_INT 0
55579: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
55580: LD_VAR 0 5
55584: NOT
55585: PUSH
55586: LD_VAR 0 1
55590: NOT
55591: OR
55592: PUSH
55593: LD_VAR 0 2
55597: NOT
55598: OR
55599: PUSH
55600: LD_VAR 0 3
55604: NOT
55605: OR
55606: IFFALSE 55610
// exit ;
55608: GO 56424
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
55610: LD_ADDR_VAR 0 14
55614: PUSH
55615: LD_VAR 0 1
55619: PPUSH
55620: LD_VAR 0 2
55624: PPUSH
55625: LD_VAR 0 3
55629: PPUSH
55630: LD_VAR 0 4
55634: PPUSH
55635: LD_VAR 0 5
55639: PUSH
55640: LD_INT 1
55642: ARRAY
55643: PPUSH
55644: CALL_OW 248
55648: PPUSH
55649: LD_INT 0
55651: PPUSH
55652: CALL 57677 0 6
55656: ST_TO_ADDR
// if not hexes then
55657: LD_VAR 0 14
55661: NOT
55662: IFFALSE 55666
// exit ;
55664: GO 56424
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
55666: LD_ADDR_VAR 0 17
55670: PUSH
55671: LD_VAR 0 5
55675: PPUSH
55676: LD_INT 22
55678: PUSH
55679: LD_VAR 0 13
55683: PPUSH
55684: CALL_OW 255
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 2
55695: PUSH
55696: LD_INT 30
55698: PUSH
55699: LD_INT 0
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 30
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: LIST
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PPUSH
55725: CALL_OW 72
55729: ST_TO_ADDR
// for i = 1 to hexes do
55730: LD_ADDR_VAR 0 9
55734: PUSH
55735: DOUBLE
55736: LD_INT 1
55738: DEC
55739: ST_TO_ADDR
55740: LD_VAR 0 14
55744: PUSH
55745: FOR_TO
55746: IFFALSE 56422
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55748: LD_ADDR_VAR 0 13
55752: PUSH
55753: LD_VAR 0 14
55757: PUSH
55758: LD_VAR 0 9
55762: ARRAY
55763: PUSH
55764: LD_INT 1
55766: ARRAY
55767: PPUSH
55768: LD_VAR 0 14
55772: PUSH
55773: LD_VAR 0 9
55777: ARRAY
55778: PUSH
55779: LD_INT 2
55781: ARRAY
55782: PPUSH
55783: CALL_OW 428
55787: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
55788: LD_VAR 0 14
55792: PUSH
55793: LD_VAR 0 9
55797: ARRAY
55798: PUSH
55799: LD_INT 1
55801: ARRAY
55802: PPUSH
55803: LD_VAR 0 14
55807: PUSH
55808: LD_VAR 0 9
55812: ARRAY
55813: PUSH
55814: LD_INT 2
55816: ARRAY
55817: PPUSH
55818: CALL_OW 351
55822: PUSH
55823: LD_VAR 0 14
55827: PUSH
55828: LD_VAR 0 9
55832: ARRAY
55833: PUSH
55834: LD_INT 1
55836: ARRAY
55837: PPUSH
55838: LD_VAR 0 14
55842: PUSH
55843: LD_VAR 0 9
55847: ARRAY
55848: PUSH
55849: LD_INT 2
55851: ARRAY
55852: PPUSH
55853: CALL_OW 488
55857: NOT
55858: OR
55859: PUSH
55860: LD_VAR 0 13
55864: PPUSH
55865: CALL_OW 247
55869: PUSH
55870: LD_INT 3
55872: EQUAL
55873: OR
55874: IFFALSE 55880
// exit ;
55876: POP
55877: POP
55878: GO 56424
// if not tmp then
55880: LD_VAR 0 13
55884: NOT
55885: IFFALSE 55889
// continue ;
55887: GO 55745
// result := true ;
55889: LD_ADDR_VAR 0 8
55893: PUSH
55894: LD_INT 1
55896: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
55897: LD_VAR 0 6
55901: PUSH
55902: LD_VAR 0 13
55906: PPUSH
55907: CALL_OW 247
55911: PUSH
55912: LD_INT 2
55914: EQUAL
55915: AND
55916: PUSH
55917: LD_VAR 0 13
55921: PPUSH
55922: CALL_OW 263
55926: PUSH
55927: LD_INT 1
55929: EQUAL
55930: AND
55931: IFFALSE 56095
// begin if IsDrivenBy ( tmp ) then
55933: LD_VAR 0 13
55937: PPUSH
55938: CALL_OW 311
55942: IFFALSE 55946
// continue ;
55944: GO 55745
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
55946: LD_VAR 0 6
55950: PPUSH
55951: LD_INT 3
55953: PUSH
55954: LD_INT 60
55956: PUSH
55957: EMPTY
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 3
55966: PUSH
55967: LD_INT 55
55969: PUSH
55970: EMPTY
55971: LIST
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PPUSH
55981: CALL_OW 72
55985: IFFALSE 56093
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
55987: LD_ADDR_VAR 0 18
55991: PUSH
55992: LD_VAR 0 6
55996: PPUSH
55997: LD_INT 3
55999: PUSH
56000: LD_INT 60
56002: PUSH
56003: EMPTY
56004: LIST
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: LD_INT 55
56015: PUSH
56016: EMPTY
56017: LIST
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PPUSH
56027: CALL_OW 72
56031: PUSH
56032: LD_INT 1
56034: ARRAY
56035: ST_TO_ADDR
// if IsInUnit ( driver ) then
56036: LD_VAR 0 18
56040: PPUSH
56041: CALL_OW 310
56045: IFFALSE 56056
// ComExit ( driver ) ;
56047: LD_VAR 0 18
56051: PPUSH
56052: CALL 81456 0 1
// AddComEnterUnit ( driver , tmp ) ;
56056: LD_VAR 0 18
56060: PPUSH
56061: LD_VAR 0 13
56065: PPUSH
56066: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
56070: LD_VAR 0 18
56074: PPUSH
56075: LD_VAR 0 7
56079: PPUSH
56080: CALL_OW 173
// AddComExitVehicle ( driver ) ;
56084: LD_VAR 0 18
56088: PPUSH
56089: CALL_OW 181
// end ; continue ;
56093: GO 55745
// end ; if not cleaners or not tmp in cleaners then
56095: LD_VAR 0 6
56099: NOT
56100: PUSH
56101: LD_VAR 0 13
56105: PUSH
56106: LD_VAR 0 6
56110: IN
56111: NOT
56112: OR
56113: IFFALSE 56420
// begin if dep then
56115: LD_VAR 0 17
56119: IFFALSE 56255
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
56121: LD_ADDR_VAR 0 16
56125: PUSH
56126: LD_VAR 0 17
56130: PUSH
56131: LD_INT 1
56133: ARRAY
56134: PPUSH
56135: CALL_OW 250
56139: PPUSH
56140: LD_VAR 0 17
56144: PUSH
56145: LD_INT 1
56147: ARRAY
56148: PPUSH
56149: CALL_OW 254
56153: PPUSH
56154: LD_INT 5
56156: PPUSH
56157: CALL_OW 272
56161: PUSH
56162: LD_VAR 0 17
56166: PUSH
56167: LD_INT 1
56169: ARRAY
56170: PPUSH
56171: CALL_OW 251
56175: PPUSH
56176: LD_VAR 0 17
56180: PUSH
56181: LD_INT 1
56183: ARRAY
56184: PPUSH
56185: CALL_OW 254
56189: PPUSH
56190: LD_INT 5
56192: PPUSH
56193: CALL_OW 273
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
56202: LD_VAR 0 16
56206: PUSH
56207: LD_INT 1
56209: ARRAY
56210: PPUSH
56211: LD_VAR 0 16
56215: PUSH
56216: LD_INT 2
56218: ARRAY
56219: PPUSH
56220: CALL_OW 488
56224: IFFALSE 56255
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
56226: LD_VAR 0 13
56230: PPUSH
56231: LD_VAR 0 16
56235: PUSH
56236: LD_INT 1
56238: ARRAY
56239: PPUSH
56240: LD_VAR 0 16
56244: PUSH
56245: LD_INT 2
56247: ARRAY
56248: PPUSH
56249: CALL_OW 111
// continue ;
56253: GO 55745
// end ; end ; r := GetDir ( tmp ) ;
56255: LD_ADDR_VAR 0 15
56259: PUSH
56260: LD_VAR 0 13
56264: PPUSH
56265: CALL_OW 254
56269: ST_TO_ADDR
// if r = 5 then
56270: LD_VAR 0 15
56274: PUSH
56275: LD_INT 5
56277: EQUAL
56278: IFFALSE 56288
// r := 0 ;
56280: LD_ADDR_VAR 0 15
56284: PUSH
56285: LD_INT 0
56287: ST_TO_ADDR
// for j = r to 5 do
56288: LD_ADDR_VAR 0 10
56292: PUSH
56293: DOUBLE
56294: LD_VAR 0 15
56298: DEC
56299: ST_TO_ADDR
56300: LD_INT 5
56302: PUSH
56303: FOR_TO
56304: IFFALSE 56418
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
56306: LD_ADDR_VAR 0 11
56310: PUSH
56311: LD_VAR 0 13
56315: PPUSH
56316: CALL_OW 250
56320: PPUSH
56321: LD_VAR 0 10
56325: PPUSH
56326: LD_INT 2
56328: PPUSH
56329: CALL_OW 272
56333: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
56334: LD_ADDR_VAR 0 12
56338: PUSH
56339: LD_VAR 0 13
56343: PPUSH
56344: CALL_OW 251
56348: PPUSH
56349: LD_VAR 0 10
56353: PPUSH
56354: LD_INT 2
56356: PPUSH
56357: CALL_OW 273
56361: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
56362: LD_VAR 0 11
56366: PPUSH
56367: LD_VAR 0 12
56371: PPUSH
56372: CALL_OW 488
56376: PUSH
56377: LD_VAR 0 11
56381: PPUSH
56382: LD_VAR 0 12
56386: PPUSH
56387: CALL_OW 428
56391: NOT
56392: AND
56393: IFFALSE 56416
// begin ComMoveXY ( tmp , _x , _y ) ;
56395: LD_VAR 0 13
56399: PPUSH
56400: LD_VAR 0 11
56404: PPUSH
56405: LD_VAR 0 12
56409: PPUSH
56410: CALL_OW 111
// break ;
56414: GO 56418
// end ; end ;
56416: GO 56303
56418: POP
56419: POP
// end ; end ;
56420: GO 55745
56422: POP
56423: POP
// end ;
56424: LD_VAR 0 8
56428: RET
// export function BuildingTechInvented ( side , btype ) ; begin
56429: LD_INT 0
56431: PPUSH
// result := true ;
56432: LD_ADDR_VAR 0 3
56436: PUSH
56437: LD_INT 1
56439: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
56440: LD_VAR 0 2
56444: PUSH
56445: LD_INT 24
56447: DOUBLE
56448: EQUAL
56449: IFTRUE 56459
56451: LD_INT 33
56453: DOUBLE
56454: EQUAL
56455: IFTRUE 56459
56457: GO 56484
56459: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
56460: LD_ADDR_VAR 0 3
56464: PUSH
56465: LD_INT 32
56467: PPUSH
56468: LD_VAR 0 1
56472: PPUSH
56473: CALL_OW 321
56477: PUSH
56478: LD_INT 2
56480: EQUAL
56481: ST_TO_ADDR
56482: GO 56800
56484: LD_INT 20
56486: DOUBLE
56487: EQUAL
56488: IFTRUE 56492
56490: GO 56517
56492: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
56493: LD_ADDR_VAR 0 3
56497: PUSH
56498: LD_INT 6
56500: PPUSH
56501: LD_VAR 0 1
56505: PPUSH
56506: CALL_OW 321
56510: PUSH
56511: LD_INT 2
56513: EQUAL
56514: ST_TO_ADDR
56515: GO 56800
56517: LD_INT 22
56519: DOUBLE
56520: EQUAL
56521: IFTRUE 56531
56523: LD_INT 36
56525: DOUBLE
56526: EQUAL
56527: IFTRUE 56531
56529: GO 56556
56531: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
56532: LD_ADDR_VAR 0 3
56536: PUSH
56537: LD_INT 15
56539: PPUSH
56540: LD_VAR 0 1
56544: PPUSH
56545: CALL_OW 321
56549: PUSH
56550: LD_INT 2
56552: EQUAL
56553: ST_TO_ADDR
56554: GO 56800
56556: LD_INT 30
56558: DOUBLE
56559: EQUAL
56560: IFTRUE 56564
56562: GO 56589
56564: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
56565: LD_ADDR_VAR 0 3
56569: PUSH
56570: LD_INT 20
56572: PPUSH
56573: LD_VAR 0 1
56577: PPUSH
56578: CALL_OW 321
56582: PUSH
56583: LD_INT 2
56585: EQUAL
56586: ST_TO_ADDR
56587: GO 56800
56589: LD_INT 28
56591: DOUBLE
56592: EQUAL
56593: IFTRUE 56603
56595: LD_INT 21
56597: DOUBLE
56598: EQUAL
56599: IFTRUE 56603
56601: GO 56628
56603: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
56604: LD_ADDR_VAR 0 3
56608: PUSH
56609: LD_INT 21
56611: PPUSH
56612: LD_VAR 0 1
56616: PPUSH
56617: CALL_OW 321
56621: PUSH
56622: LD_INT 2
56624: EQUAL
56625: ST_TO_ADDR
56626: GO 56800
56628: LD_INT 16
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56636
56634: GO 56661
56636: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
56637: LD_ADDR_VAR 0 3
56641: PUSH
56642: LD_INT 84
56644: PPUSH
56645: LD_VAR 0 1
56649: PPUSH
56650: CALL_OW 321
56654: PUSH
56655: LD_INT 2
56657: EQUAL
56658: ST_TO_ADDR
56659: GO 56800
56661: LD_INT 19
56663: DOUBLE
56664: EQUAL
56665: IFTRUE 56675
56667: LD_INT 23
56669: DOUBLE
56670: EQUAL
56671: IFTRUE 56675
56673: GO 56700
56675: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
56676: LD_ADDR_VAR 0 3
56680: PUSH
56681: LD_INT 83
56683: PPUSH
56684: LD_VAR 0 1
56688: PPUSH
56689: CALL_OW 321
56693: PUSH
56694: LD_INT 2
56696: EQUAL
56697: ST_TO_ADDR
56698: GO 56800
56700: LD_INT 17
56702: DOUBLE
56703: EQUAL
56704: IFTRUE 56708
56706: GO 56733
56708: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
56709: LD_ADDR_VAR 0 3
56713: PUSH
56714: LD_INT 39
56716: PPUSH
56717: LD_VAR 0 1
56721: PPUSH
56722: CALL_OW 321
56726: PUSH
56727: LD_INT 2
56729: EQUAL
56730: ST_TO_ADDR
56731: GO 56800
56733: LD_INT 18
56735: DOUBLE
56736: EQUAL
56737: IFTRUE 56741
56739: GO 56766
56741: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
56742: LD_ADDR_VAR 0 3
56746: PUSH
56747: LD_INT 40
56749: PPUSH
56750: LD_VAR 0 1
56754: PPUSH
56755: CALL_OW 321
56759: PUSH
56760: LD_INT 2
56762: EQUAL
56763: ST_TO_ADDR
56764: GO 56800
56766: LD_INT 27
56768: DOUBLE
56769: EQUAL
56770: IFTRUE 56774
56772: GO 56799
56774: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
56775: LD_ADDR_VAR 0 3
56779: PUSH
56780: LD_INT 35
56782: PPUSH
56783: LD_VAR 0 1
56787: PPUSH
56788: CALL_OW 321
56792: PUSH
56793: LD_INT 2
56795: EQUAL
56796: ST_TO_ADDR
56797: GO 56800
56799: POP
// end ;
56800: LD_VAR 0 3
56804: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
56805: LD_INT 0
56807: PPUSH
56808: PPUSH
56809: PPUSH
56810: PPUSH
56811: PPUSH
56812: PPUSH
56813: PPUSH
56814: PPUSH
56815: PPUSH
56816: PPUSH
56817: PPUSH
// result := false ;
56818: LD_ADDR_VAR 0 6
56822: PUSH
56823: LD_INT 0
56825: ST_TO_ADDR
// if btype = b_depot then
56826: LD_VAR 0 2
56830: PUSH
56831: LD_INT 0
56833: EQUAL
56834: IFFALSE 56846
// begin result := true ;
56836: LD_ADDR_VAR 0 6
56840: PUSH
56841: LD_INT 1
56843: ST_TO_ADDR
// exit ;
56844: GO 57672
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
56846: LD_VAR 0 1
56850: NOT
56851: PUSH
56852: LD_VAR 0 1
56856: PPUSH
56857: CALL_OW 266
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: IN
56872: NOT
56873: OR
56874: PUSH
56875: LD_VAR 0 2
56879: NOT
56880: OR
56881: PUSH
56882: LD_VAR 0 5
56886: PUSH
56887: LD_INT 0
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: LD_INT 2
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 4
56901: PUSH
56902: LD_INT 5
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: IN
56913: NOT
56914: OR
56915: PUSH
56916: LD_VAR 0 3
56920: PPUSH
56921: LD_VAR 0 4
56925: PPUSH
56926: CALL_OW 488
56930: NOT
56931: OR
56932: IFFALSE 56936
// exit ;
56934: GO 57672
// side := GetSide ( depot ) ;
56936: LD_ADDR_VAR 0 9
56940: PUSH
56941: LD_VAR 0 1
56945: PPUSH
56946: CALL_OW 255
56950: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
56951: LD_VAR 0 9
56955: PPUSH
56956: LD_VAR 0 2
56960: PPUSH
56961: CALL 56429 0 2
56965: NOT
56966: IFFALSE 56970
// exit ;
56968: GO 57672
// pom := GetBase ( depot ) ;
56970: LD_ADDR_VAR 0 10
56974: PUSH
56975: LD_VAR 0 1
56979: PPUSH
56980: CALL_OW 274
56984: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
56985: LD_ADDR_VAR 0 11
56989: PUSH
56990: LD_VAR 0 2
56994: PPUSH
56995: LD_VAR 0 1
56999: PPUSH
57000: CALL_OW 248
57004: PPUSH
57005: CALL_OW 450
57009: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
57010: LD_VAR 0 10
57014: PPUSH
57015: LD_INT 1
57017: PPUSH
57018: CALL_OW 275
57022: PUSH
57023: LD_VAR 0 11
57027: PUSH
57028: LD_INT 1
57030: ARRAY
57031: GREATEREQUAL
57032: PUSH
57033: LD_VAR 0 10
57037: PPUSH
57038: LD_INT 2
57040: PPUSH
57041: CALL_OW 275
57045: PUSH
57046: LD_VAR 0 11
57050: PUSH
57051: LD_INT 2
57053: ARRAY
57054: GREATEREQUAL
57055: AND
57056: PUSH
57057: LD_VAR 0 10
57061: PPUSH
57062: LD_INT 3
57064: PPUSH
57065: CALL_OW 275
57069: PUSH
57070: LD_VAR 0 11
57074: PUSH
57075: LD_INT 3
57077: ARRAY
57078: GREATEREQUAL
57079: AND
57080: NOT
57081: IFFALSE 57085
// exit ;
57083: GO 57672
// if GetBType ( depot ) = b_depot then
57085: LD_VAR 0 1
57089: PPUSH
57090: CALL_OW 266
57094: PUSH
57095: LD_INT 0
57097: EQUAL
57098: IFFALSE 57110
// dist := 28 else
57100: LD_ADDR_VAR 0 14
57104: PUSH
57105: LD_INT 28
57107: ST_TO_ADDR
57108: GO 57118
// dist := 36 ;
57110: LD_ADDR_VAR 0 14
57114: PUSH
57115: LD_INT 36
57117: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
57118: LD_VAR 0 1
57122: PPUSH
57123: LD_VAR 0 3
57127: PPUSH
57128: LD_VAR 0 4
57132: PPUSH
57133: CALL_OW 297
57137: PUSH
57138: LD_VAR 0 14
57142: GREATER
57143: IFFALSE 57147
// exit ;
57145: GO 57672
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
57147: LD_ADDR_VAR 0 12
57151: PUSH
57152: LD_VAR 0 2
57156: PPUSH
57157: LD_VAR 0 3
57161: PPUSH
57162: LD_VAR 0 4
57166: PPUSH
57167: LD_VAR 0 5
57171: PPUSH
57172: LD_VAR 0 1
57176: PPUSH
57177: CALL_OW 248
57181: PPUSH
57182: LD_INT 0
57184: PPUSH
57185: CALL 57677 0 6
57189: ST_TO_ADDR
// if not hexes then
57190: LD_VAR 0 12
57194: NOT
57195: IFFALSE 57199
// exit ;
57197: GO 57672
// hex := GetHexInfo ( x , y ) ;
57199: LD_ADDR_VAR 0 15
57203: PUSH
57204: LD_VAR 0 3
57208: PPUSH
57209: LD_VAR 0 4
57213: PPUSH
57214: CALL_OW 546
57218: ST_TO_ADDR
// if hex [ 1 ] then
57219: LD_VAR 0 15
57223: PUSH
57224: LD_INT 1
57226: ARRAY
57227: IFFALSE 57231
// exit ;
57229: GO 57672
// height := hex [ 2 ] ;
57231: LD_ADDR_VAR 0 13
57235: PUSH
57236: LD_VAR 0 15
57240: PUSH
57241: LD_INT 2
57243: ARRAY
57244: ST_TO_ADDR
// for i = 1 to hexes do
57245: LD_ADDR_VAR 0 7
57249: PUSH
57250: DOUBLE
57251: LD_INT 1
57253: DEC
57254: ST_TO_ADDR
57255: LD_VAR 0 12
57259: PUSH
57260: FOR_TO
57261: IFFALSE 57591
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
57263: LD_VAR 0 12
57267: PUSH
57268: LD_VAR 0 7
57272: ARRAY
57273: PUSH
57274: LD_INT 1
57276: ARRAY
57277: PPUSH
57278: LD_VAR 0 12
57282: PUSH
57283: LD_VAR 0 7
57287: ARRAY
57288: PUSH
57289: LD_INT 2
57291: ARRAY
57292: PPUSH
57293: CALL_OW 488
57297: NOT
57298: PUSH
57299: LD_VAR 0 12
57303: PUSH
57304: LD_VAR 0 7
57308: ARRAY
57309: PUSH
57310: LD_INT 1
57312: ARRAY
57313: PPUSH
57314: LD_VAR 0 12
57318: PUSH
57319: LD_VAR 0 7
57323: ARRAY
57324: PUSH
57325: LD_INT 2
57327: ARRAY
57328: PPUSH
57329: CALL_OW 428
57333: PUSH
57334: LD_INT 0
57336: GREATER
57337: OR
57338: PUSH
57339: LD_VAR 0 12
57343: PUSH
57344: LD_VAR 0 7
57348: ARRAY
57349: PUSH
57350: LD_INT 1
57352: ARRAY
57353: PPUSH
57354: LD_VAR 0 12
57358: PUSH
57359: LD_VAR 0 7
57363: ARRAY
57364: PUSH
57365: LD_INT 2
57367: ARRAY
57368: PPUSH
57369: CALL_OW 351
57373: OR
57374: IFFALSE 57380
// exit ;
57376: POP
57377: POP
57378: GO 57672
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57380: LD_ADDR_VAR 0 8
57384: PUSH
57385: LD_VAR 0 12
57389: PUSH
57390: LD_VAR 0 7
57394: ARRAY
57395: PUSH
57396: LD_INT 1
57398: ARRAY
57399: PPUSH
57400: LD_VAR 0 12
57404: PUSH
57405: LD_VAR 0 7
57409: ARRAY
57410: PUSH
57411: LD_INT 2
57413: ARRAY
57414: PPUSH
57415: CALL_OW 546
57419: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
57420: LD_VAR 0 8
57424: PUSH
57425: LD_INT 1
57427: ARRAY
57428: PUSH
57429: LD_VAR 0 8
57433: PUSH
57434: LD_INT 2
57436: ARRAY
57437: PUSH
57438: LD_VAR 0 13
57442: PUSH
57443: LD_INT 2
57445: PLUS
57446: GREATER
57447: OR
57448: PUSH
57449: LD_VAR 0 8
57453: PUSH
57454: LD_INT 2
57456: ARRAY
57457: PUSH
57458: LD_VAR 0 13
57462: PUSH
57463: LD_INT 2
57465: MINUS
57466: LESS
57467: OR
57468: PUSH
57469: LD_VAR 0 8
57473: PUSH
57474: LD_INT 3
57476: ARRAY
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 8
57483: PUSH
57484: LD_INT 9
57486: PUSH
57487: LD_INT 10
57489: PUSH
57490: LD_INT 11
57492: PUSH
57493: LD_INT 12
57495: PUSH
57496: LD_INT 13
57498: PUSH
57499: LD_INT 16
57501: PUSH
57502: LD_INT 17
57504: PUSH
57505: LD_INT 18
57507: PUSH
57508: LD_INT 19
57510: PUSH
57511: LD_INT 20
57513: PUSH
57514: LD_INT 21
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: IN
57532: NOT
57533: OR
57534: PUSH
57535: LD_VAR 0 8
57539: PUSH
57540: LD_INT 5
57542: ARRAY
57543: NOT
57544: OR
57545: PUSH
57546: LD_VAR 0 8
57550: PUSH
57551: LD_INT 6
57553: ARRAY
57554: PUSH
57555: LD_INT 1
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: LD_INT 7
57563: PUSH
57564: LD_INT 9
57566: PUSH
57567: LD_INT 10
57569: PUSH
57570: LD_INT 11
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: IN
57581: NOT
57582: OR
57583: IFFALSE 57589
// exit ;
57585: POP
57586: POP
57587: GO 57672
// end ;
57589: GO 57260
57591: POP
57592: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
57593: LD_VAR 0 9
57597: PPUSH
57598: LD_VAR 0 3
57602: PPUSH
57603: LD_VAR 0 4
57607: PPUSH
57608: LD_INT 20
57610: PPUSH
57611: CALL 49595 0 4
57615: PUSH
57616: LD_INT 4
57618: ARRAY
57619: IFFALSE 57623
// exit ;
57621: GO 57672
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
57623: LD_VAR 0 2
57627: PUSH
57628: LD_INT 29
57630: PUSH
57631: LD_INT 30
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: IN
57638: PUSH
57639: LD_VAR 0 3
57643: PPUSH
57644: LD_VAR 0 4
57648: PPUSH
57649: LD_VAR 0 9
57653: PPUSH
57654: CALL_OW 440
57658: NOT
57659: AND
57660: IFFALSE 57664
// exit ;
57662: GO 57672
// result := true ;
57664: LD_ADDR_VAR 0 6
57668: PUSH
57669: LD_INT 1
57671: ST_TO_ADDR
// end ;
57672: LD_VAR 0 6
57676: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
57677: LD_INT 0
57679: PPUSH
57680: PPUSH
57681: PPUSH
57682: PPUSH
57683: PPUSH
57684: PPUSH
57685: PPUSH
57686: PPUSH
57687: PPUSH
57688: PPUSH
57689: PPUSH
57690: PPUSH
57691: PPUSH
57692: PPUSH
57693: PPUSH
57694: PPUSH
57695: PPUSH
57696: PPUSH
57697: PPUSH
57698: PPUSH
57699: PPUSH
57700: PPUSH
57701: PPUSH
57702: PPUSH
57703: PPUSH
57704: PPUSH
57705: PPUSH
57706: PPUSH
57707: PPUSH
57708: PPUSH
57709: PPUSH
57710: PPUSH
57711: PPUSH
57712: PPUSH
57713: PPUSH
57714: PPUSH
57715: PPUSH
57716: PPUSH
57717: PPUSH
57718: PPUSH
57719: PPUSH
57720: PPUSH
57721: PPUSH
57722: PPUSH
57723: PPUSH
57724: PPUSH
57725: PPUSH
57726: PPUSH
57727: PPUSH
57728: PPUSH
57729: PPUSH
57730: PPUSH
57731: PPUSH
57732: PPUSH
57733: PPUSH
57734: PPUSH
57735: PPUSH
57736: PPUSH
// result = [ ] ;
57737: LD_ADDR_VAR 0 7
57741: PUSH
57742: EMPTY
57743: ST_TO_ADDR
// temp_list = [ ] ;
57744: LD_ADDR_VAR 0 9
57748: PUSH
57749: EMPTY
57750: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
57751: LD_VAR 0 4
57755: PUSH
57756: LD_INT 0
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 2
57764: PUSH
57765: LD_INT 3
57767: PUSH
57768: LD_INT 4
57770: PUSH
57771: LD_INT 5
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: IN
57782: NOT
57783: PUSH
57784: LD_VAR 0 1
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 1
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: IN
57799: PUSH
57800: LD_VAR 0 5
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: LD_INT 3
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: IN
57819: NOT
57820: AND
57821: OR
57822: IFFALSE 57826
// exit ;
57824: GO 76217
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
57826: LD_VAR 0 1
57830: PUSH
57831: LD_INT 6
57833: PUSH
57834: LD_INT 7
57836: PUSH
57837: LD_INT 8
57839: PUSH
57840: LD_INT 13
57842: PUSH
57843: LD_INT 12
57845: PUSH
57846: LD_INT 15
57848: PUSH
57849: LD_INT 11
57851: PUSH
57852: LD_INT 14
57854: PUSH
57855: LD_INT 10
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: IN
57869: IFFALSE 57879
// btype = b_lab ;
57871: LD_ADDR_VAR 0 1
57875: PUSH
57876: LD_INT 6
57878: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
57879: LD_VAR 0 6
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: LIST
57897: IN
57898: NOT
57899: PUSH
57900: LD_VAR 0 1
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: LD_INT 1
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 3
57916: PUSH
57917: LD_INT 6
57919: PUSH
57920: LD_INT 36
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: LD_INT 5
57928: PUSH
57929: LD_INT 31
57931: PUSH
57932: LD_INT 32
57934: PUSH
57935: LD_INT 33
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: IN
57951: NOT
57952: PUSH
57953: LD_VAR 0 6
57957: PUSH
57958: LD_INT 1
57960: EQUAL
57961: AND
57962: OR
57963: PUSH
57964: LD_VAR 0 1
57968: PUSH
57969: LD_INT 2
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: IN
57979: NOT
57980: PUSH
57981: LD_VAR 0 6
57985: PUSH
57986: LD_INT 2
57988: EQUAL
57989: AND
57990: OR
57991: IFFALSE 58001
// mode = 0 ;
57993: LD_ADDR_VAR 0 6
57997: PUSH
57998: LD_INT 0
58000: ST_TO_ADDR
// case mode of 0 :
58001: LD_VAR 0 6
58005: PUSH
58006: LD_INT 0
58008: DOUBLE
58009: EQUAL
58010: IFTRUE 58014
58012: GO 69467
58014: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58015: LD_ADDR_VAR 0 11
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: EMPTY
58027: LIST
58028: LIST
58029: PUSH
58030: LD_INT 0
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: LD_INT 1
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 3
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 0
58171: PUSH
58172: LD_INT 3
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: EMPTY
58187: LIST
58188: LIST
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58208: LD_ADDR_VAR 0 12
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 0
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 1
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: LD_INT 1
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: LD_INT 1
58346: NEG
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 2
58354: NEG
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58404: LD_ADDR_VAR 0 13
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 1
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: LD_INT 0
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: NEG
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 2
58489: NEG
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: LD_INT 2
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: LD_INT 1
58531: NEG
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 2
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 3
58563: NEG
58564: PUSH
58565: LD_INT 2
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: LD_INT 3
58579: NEG
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58603: LD_ADDR_VAR 0 14
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 0
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: LD_INT 0
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 1
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 0
58696: PUSH
58697: LD_INT 2
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: LD_INT 2
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58799: LD_ADDR_VAR 0 15
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 0
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 1
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 2
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 2
58922: NEG
58923: PUSH
58924: LD_INT 0
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58992: LD_ADDR_VAR 0 16
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: PUSH
59021: LD_INT 0
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: NEG
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: LD_INT 2
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: PUSH
59086: LD_INT 1
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 2
59095: PUSH
59096: LD_INT 2
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: LD_INT 2
59131: NEG
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: LD_INT 3
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 3
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 2
59159: PUSH
59160: LD_INT 3
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59185: LD_ADDR_VAR 0 17
59189: PUSH
59190: LD_INT 0
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: LD_INT 1
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 0
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 2
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 2
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 0
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 1
59350: NEG
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59415: LD_ADDR_VAR 0 18
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 2
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 2
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 2
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: LD_INT 1
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 2
59591: NEG
59592: PUSH
59593: LD_INT 0
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 2
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59645: LD_ADDR_VAR 0 19
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: LD_INT 1
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 2
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59875: LD_ADDR_VAR 0 20
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 0
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 0
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: EMPTY
59928: LIST
59929: LIST
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 1
59944: NEG
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 2
59960: NEG
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: PUSH
59980: LD_INT 1
59982: NEG
59983: PUSH
59984: EMPTY
59985: LIST
59986: LIST
59987: PUSH
59988: LD_INT 2
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 2
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 2
60051: NEG
60052: PUSH
60053: LD_INT 0
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60105: LD_ADDR_VAR 0 21
60109: PUSH
60110: LD_INT 0
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 0
60122: PUSH
60123: LD_INT 1
60125: NEG
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 1
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 1
60178: NEG
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 2
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: NEG
60271: PUSH
60272: LD_INT 1
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60335: LD_ADDR_VAR 0 22
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_INT 1
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 0
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 0
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 2
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 0
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 1
60500: NEG
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 2
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 2
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 2
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60565: LD_ADDR_VAR 0 23
60569: PUSH
60570: LD_INT 0
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: LD_INT 1
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 1
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 1
60623: NEG
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 1
60634: NEG
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 1
60646: NEG
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 0
60658: PUSH
60659: LD_INT 2
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 1
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 2
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: LD_INT 2
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 0
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 2
60764: NEG
60765: PUSH
60766: LD_INT 2
60768: NEG
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 2
60776: NEG
60777: PUSH
60778: LD_INT 3
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: LD_INT 3
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: LD_INT 2
60803: NEG
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 1
60814: NEG
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
60845: LD_ADDR_VAR 0 24
60849: PUSH
60850: LD_INT 0
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: PUSH
60874: LD_INT 0
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PUSH
60881: LD_INT 1
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: LD_INT 1
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 1
60903: NEG
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 2
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: LD_INT 1
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 1
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: LD_INT 2
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 2
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 2
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: LD_INT 2
61048: NEG
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 2
61059: NEG
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: PUSH
61065: LD_INT 2
61067: PUSH
61068: LD_INT 1
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: LD_INT 3
61078: PUSH
61079: LD_INT 1
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
61121: LD_ADDR_VAR 0 25
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: LD_INT 2
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 1
61225: PUSH
61226: LD_INT 1
61228: NEG
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: LD_INT 2
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 2
61246: PUSH
61247: LD_INT 1
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: PUSH
61257: LD_INT 2
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 1
61286: NEG
61287: PUSH
61288: LD_INT 1
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 2
61297: NEG
61298: PUSH
61299: LD_INT 0
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: LD_INT 1
61312: NEG
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 2
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 3
61342: PUSH
61343: LD_INT 2
61345: PUSH
61346: EMPTY
61347: LIST
61348: LIST
61349: PUSH
61350: LD_INT 2
61352: PUSH
61353: LD_INT 3
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: PUSH
61363: LD_INT 3
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: LIST
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61395: LD_ADDR_VAR 0 26
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 0
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 1
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: LD_INT 0
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: NEG
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 2
61480: NEG
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 2
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: LD_INT 0
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: LD_INT 1
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 2
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 2
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 1
61560: NEG
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 2
61571: NEG
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 2
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 2
61594: NEG
61595: PUSH
61596: LD_INT 2
61598: NEG
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: LD_INT 3
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 1
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61671: LD_ADDR_VAR 0 27
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 0
61688: PUSH
61689: LD_INT 1
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 1
61699: PUSH
61700: LD_INT 0
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 0
61719: PUSH
61720: LD_INT 1
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: NEG
61730: PUSH
61731: LD_INT 0
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: NEG
61753: PUSH
61754: LD_INT 2
61756: NEG
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: PUSH
61762: LD_INT 0
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 2
61796: PUSH
61797: LD_INT 1
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 2
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: LD_INT 2
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 1
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: NEG
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 2
61858: NEG
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 2
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: NEG
61905: PUSH
61906: LD_INT 1
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: LD_INT 3
61916: NEG
61917: PUSH
61918: LD_INT 2
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61951: LD_ADDR_VAR 0 28
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 1
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 1
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 1
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 1
62032: NEG
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: LD_INT 2
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: PUSH
62067: LD_INT 0
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 2
62076: PUSH
62077: LD_INT 1
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 2
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: NEG
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 2
62138: NEG
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: LD_INT 2
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: NEG
62163: PUSH
62164: LD_INT 3
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 3
62186: NEG
62187: PUSH
62188: LD_INT 1
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: LD_INT 2
62202: NEG
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62233: LD_ADDR_VAR 0 29
62237: PUSH
62238: LD_INT 0
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 1
62253: NEG
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: LD_INT 1
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 1
62291: NEG
62292: PUSH
62293: LD_INT 0
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 2
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 0
62326: PUSH
62327: LD_INT 2
62329: NEG
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 1
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: LD_INT 2
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: LD_INT 1
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 1
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 2
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: LD_INT 3
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: LD_INT 1
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 3
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: LD_INT 1
62456: PUSH
62457: LD_INT 3
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: LD_INT 1
62466: NEG
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 3
62477: NEG
62478: PUSH
62479: LD_INT 2
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62512: LD_ADDR_VAR 0 30
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 2
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: LD_INT 2
62608: NEG
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: LD_INT 1
62619: NEG
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: PUSH
62625: LD_INT 2
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 2
62647: PUSH
62648: LD_INT 2
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 2
62678: NEG
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 2
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 1
62701: NEG
62702: PUSH
62703: LD_INT 3
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 2
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: PUSH
62725: LD_INT 2
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 3
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: LD_INT 1
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 3
62755: NEG
62756: PUSH
62757: LD_INT 1
62759: NEG
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
62790: LD_ADDR_VAR 0 31
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 1
62848: NEG
62849: PUSH
62850: LD_INT 0
62852: PUSH
62853: EMPTY
62854: LIST
62855: LIST
62856: PUSH
62857: LD_INT 1
62859: NEG
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 1
62883: PUSH
62884: LD_INT 1
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 2
62904: PUSH
62905: LD_INT 1
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PUSH
62912: LD_INT 2
62914: PUSH
62915: LD_INT 2
62917: PUSH
62918: EMPTY
62919: LIST
62920: LIST
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: LD_INT 2
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: LD_INT 2
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: LD_INT 1
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: LD_INT 1
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 2
62967: NEG
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: LD_INT 3
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 3
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: PUSH
63013: LD_INT 3
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: LD_INT 2
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 3
63033: NEG
63034: PUSH
63035: LD_INT 2
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63068: LD_ADDR_VAR 0 32
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 2
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 1
63223: NEG
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 2
63234: NEG
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 2
63245: NEG
63246: PUSH
63247: LD_INT 1
63249: NEG
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: LD_INT 3
63261: NEG
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: PUSH
63267: LD_INT 1
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 3
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: PUSH
63291: LD_INT 3
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: LD_INT 1
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 3
63311: NEG
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
63346: LD_ADDR_VAR 0 33
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 0
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 0
63394: PUSH
63395: LD_INT 1
63397: PUSH
63398: EMPTY
63399: LIST
63400: LIST
63401: PUSH
63402: LD_INT 1
63404: NEG
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: NEG
63416: PUSH
63417: LD_INT 1
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: NEG
63428: PUSH
63429: LD_INT 2
63431: NEG
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 1
63442: NEG
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 2
63460: PUSH
63461: LD_INT 1
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 0
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: NEG
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: LD_INT 3
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 3
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: LD_INT 3
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 2
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 3
63590: NEG
63591: PUSH
63592: LD_INT 2
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63625: LD_ADDR_VAR 0 34
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 1
63645: NEG
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 1
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 1
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 2
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 2
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: PUSH
63730: LD_INT 1
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 1
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 2
63792: NEG
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: LD_INT 3
63820: NEG
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 3
63839: PUSH
63840: LD_INT 2
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 2
63849: PUSH
63850: LD_INT 3
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 2
63859: NEG
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 3
63870: NEG
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
63905: LD_ADDR_VAR 0 35
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 0
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 1
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 1
63943: PUSH
63944: LD_INT 1
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: LD_INT 1
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: LD_INT 1
63978: NEG
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 2
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64017: LD_ADDR_VAR 0 36
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 1
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: LD_INT 1
64058: PUSH
64059: EMPTY
64060: LIST
64061: LIST
64062: PUSH
64063: LD_INT 0
64065: PUSH
64066: LD_INT 1
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: NEG
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 1
64086: NEG
64087: PUSH
64088: LD_INT 1
64090: NEG
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 2
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64129: LD_ADDR_VAR 0 37
64133: PUSH
64134: LD_INT 0
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: LD_INT 0
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_INT 1
64167: PUSH
64168: LD_INT 1
64170: PUSH
64171: EMPTY
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: LD_INT 1
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 1
64187: NEG
64188: PUSH
64189: LD_INT 0
64191: PUSH
64192: EMPTY
64193: LIST
64194: LIST
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: LD_INT 1
64202: NEG
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 1
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 1
64221: NEG
64222: PUSH
64223: LD_INT 1
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
64241: LD_ADDR_VAR 0 38
64245: PUSH
64246: LD_INT 0
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 0
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: LD_INT 1
64314: NEG
64315: PUSH
64316: EMPTY
64317: LIST
64318: LIST
64319: PUSH
64320: LD_INT 2
64322: PUSH
64323: LD_INT 1
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 2
64332: NEG
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
64353: LD_ADDR_VAR 0 39
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 0
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: PUSH
64382: LD_INT 0
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 1
64391: PUSH
64392: LD_INT 1
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: LD_INT 2
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
64465: LD_ADDR_VAR 0 40
64469: PUSH
64470: LD_INT 0
64472: PUSH
64473: LD_INT 0
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 1
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: LD_INT 0
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 1
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 1
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 1
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64577: LD_ADDR_VAR 0 41
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 0
64594: PUSH
64595: LD_INT 1
64597: NEG
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 0
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 1
64646: NEG
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 1
64658: NEG
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 1
64673: NEG
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: LD_INT 0
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 2
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 2
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 1
64711: PUSH
64712: LD_INT 2
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 1
64721: NEG
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: PUSH
64730: LD_INT 2
64732: NEG
64733: PUSH
64734: LD_INT 0
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: PUSH
64741: LD_INT 2
64743: NEG
64744: PUSH
64745: LD_INT 1
64747: NEG
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 2
64755: NEG
64756: PUSH
64757: LD_INT 2
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 2
64767: NEG
64768: PUSH
64769: LD_INT 3
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 2
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 0
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: PUSH
64801: LD_INT 1
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: LD_INT 2
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 3
64820: PUSH
64821: LD_INT 3
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 2
64830: PUSH
64831: LD_INT 3
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 2
64840: NEG
64841: PUSH
64842: LD_INT 1
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 3
64851: NEG
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 3
64862: NEG
64863: PUSH
64864: LD_INT 1
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 3
64874: NEG
64875: PUSH
64876: LD_INT 2
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 3
64886: NEG
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64927: LD_ADDR_VAR 0 42
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 0
64944: PUSH
64945: LD_INT 1
64947: NEG
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: PUSH
64966: LD_INT 1
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 0
64975: PUSH
64976: LD_INT 1
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 1
64985: NEG
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: LD_INT 1
65000: NEG
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 1
65008: NEG
65009: PUSH
65010: LD_INT 2
65012: NEG
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 1
65034: NEG
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 2
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: NEG
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 1
65129: NEG
65130: PUSH
65131: LD_INT 3
65133: NEG
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 0
65141: PUSH
65142: LD_INT 3
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: LD_INT 2
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 3
65163: PUSH
65164: LD_INT 2
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 3
65173: PUSH
65174: LD_INT 3
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 2
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 1
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: EMPTY
65198: LIST
65199: LIST
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 1
65213: NEG
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 3
65224: NEG
65225: PUSH
65226: LD_INT 2
65228: NEG
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 3
65236: NEG
65237: PUSH
65238: LD_INT 3
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65277: LD_ADDR_VAR 0 43
65281: PUSH
65282: LD_INT 0
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 1
65358: NEG
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 2
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 1
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 2
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 2
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: LD_INT 2
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 0
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: NEG
65433: PUSH
65434: LD_INT 1
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 2
65454: NEG
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: LD_INT 3
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 0
65478: PUSH
65479: LD_INT 3
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 1
65489: PUSH
65490: LD_INT 2
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 3
65511: PUSH
65512: LD_INT 0
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: LD_INT 3
65521: PUSH
65522: LD_INT 1
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: LD_INT 3
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 0
65541: PUSH
65542: LD_INT 3
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 2
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 2
65562: NEG
65563: PUSH
65564: LD_INT 1
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 3
65573: NEG
65574: PUSH
65575: LD_INT 0
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 3
65584: NEG
65585: PUSH
65586: LD_INT 1
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65625: LD_ADDR_VAR 0 44
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 0
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: LD_INT 0
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 1
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: LD_INT 2
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 2
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 2
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 2
65749: PUSH
65750: LD_INT 2
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: LD_INT 2
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 1
65769: NEG
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 2
65780: NEG
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 2
65791: NEG
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 2
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 3
65838: PUSH
65839: LD_INT 0
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: LD_INT 1
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 3
65858: PUSH
65859: LD_INT 2
65861: PUSH
65862: EMPTY
65863: LIST
65864: LIST
65865: PUSH
65866: LD_INT 3
65868: PUSH
65869: LD_INT 3
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: LD_INT 2
65878: PUSH
65879: LD_INT 3
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 2
65888: NEG
65889: PUSH
65890: LD_INT 1
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: PUSH
65897: LD_INT 3
65899: NEG
65900: PUSH
65901: LD_INT 0
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 3
65910: NEG
65911: PUSH
65912: LD_INT 1
65914: NEG
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 3
65922: NEG
65923: PUSH
65924: LD_INT 2
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: NEG
65935: PUSH
65936: LD_INT 3
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: LIST
65962: LIST
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65975: LD_ADDR_VAR 0 45
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 0
65992: PUSH
65993: LD_INT 1
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: LD_INT 1
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: LD_INT 1
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 1
66033: NEG
66034: PUSH
66035: LD_INT 0
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: LD_INT 1
66048: NEG
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: LD_INT 2
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 0
66068: PUSH
66069: LD_INT 2
66071: NEG
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 1
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 2
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: LD_INT 2
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 2
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: LD_INT 1
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 2
66141: NEG
66142: PUSH
66143: LD_INT 1
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 2
66153: NEG
66154: PUSH
66155: LD_INT 2
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 2
66165: NEG
66166: PUSH
66167: LD_INT 3
66169: NEG
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: PUSH
66175: LD_INT 1
66177: NEG
66178: PUSH
66179: LD_INT 3
66181: NEG
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: LD_INT 3
66192: NEG
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: LD_INT 2
66203: NEG
66204: PUSH
66205: EMPTY
66206: LIST
66207: LIST
66208: PUSH
66209: LD_INT 3
66211: PUSH
66212: LD_INT 2
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 3
66221: PUSH
66222: LD_INT 3
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: LD_INT 3
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 1
66241: PUSH
66242: LD_INT 3
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: LD_INT 3
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 3
66272: NEG
66273: PUSH
66274: LD_INT 2
66276: NEG
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 3
66284: NEG
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66325: LD_ADDR_VAR 0 46
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: LD_INT 1
66345: NEG
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 1
66353: PUSH
66354: LD_INT 0
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 1
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 1
66383: NEG
66384: PUSH
66385: LD_INT 0
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: LD_INT 1
66394: NEG
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 1
66406: NEG
66407: PUSH
66408: LD_INT 2
66410: NEG
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 0
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 1
66429: PUSH
66430: LD_INT 1
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 2
66440: PUSH
66441: LD_INT 0
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 2
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: LD_INT 2
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 1
66480: NEG
66481: PUSH
66482: LD_INT 1
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 2
66491: NEG
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 2
66502: NEG
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: LD_INT 3
66529: NEG
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: LD_INT 2
66540: NEG
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 2
66548: PUSH
66549: LD_INT 1
66551: NEG
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 3
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 3
66569: PUSH
66570: LD_INT 1
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 1
66579: PUSH
66580: LD_INT 3
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 3
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 1
66599: NEG
66600: PUSH
66601: LD_INT 2
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: LD_INT 3
66621: NEG
66622: PUSH
66623: LD_INT 0
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 3
66632: NEG
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66673: LD_ADDR_VAR 0 47
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 0
66683: PUSH
66684: EMPTY
66685: LIST
66686: LIST
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: LD_INT 0
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: LD_INT 1
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 0
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 1
66742: NEG
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: NEG
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 0
66766: PUSH
66767: LD_INT 2
66769: NEG
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 1
66777: PUSH
66778: LD_INT 1
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 2
66788: NEG
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 2
66800: NEG
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: EMPTY
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66824: LD_ADDR_VAR 0 48
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 0
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: LD_INT 0
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: LD_INT 1
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 0
66872: PUSH
66873: LD_INT 1
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 1
66882: NEG
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: LD_INT 1
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: LD_INT 2
66909: NEG
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 0
66917: PUSH
66918: LD_INT 2
66920: NEG
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: LD_INT 1
66931: NEG
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: LIST
66961: LIST
66962: LIST
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66971: LD_ADDR_VAR 0 49
66975: PUSH
66976: LD_INT 0
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: PUSH
67000: LD_INT 0
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: LD_INT 1
67009: PUSH
67010: LD_INT 1
67012: PUSH
67013: EMPTY
67014: LIST
67015: LIST
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: LD_INT 1
67022: PUSH
67023: EMPTY
67024: LIST
67025: LIST
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 2
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 2
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: LD_INT 2
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67115: LD_ADDR_VAR 0 50
67119: PUSH
67120: LD_INT 0
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 0
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 1
67143: PUSH
67144: LD_INT 0
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: LD_INT 1
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: LD_INT 1
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 1
67173: NEG
67174: PUSH
67175: LD_INT 0
67177: PUSH
67178: EMPTY
67179: LIST
67180: LIST
67181: PUSH
67182: LD_INT 1
67184: NEG
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 2
67196: PUSH
67197: LD_INT 1
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 2
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: LD_INT 2
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 0
67226: PUSH
67227: LD_INT 2
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 1
67236: NEG
67237: PUSH
67238: LD_INT 1
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67259: LD_ADDR_VAR 0 51
67263: PUSH
67264: LD_INT 0
67266: PUSH
67267: LD_INT 0
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: PUSH
67274: LD_INT 0
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 1
67287: PUSH
67288: LD_INT 0
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: PUSH
67298: LD_INT 1
67300: PUSH
67301: EMPTY
67302: LIST
67303: LIST
67304: PUSH
67305: LD_INT 0
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 1
67317: NEG
67318: PUSH
67319: LD_INT 0
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: LD_INT 1
67328: NEG
67329: PUSH
67330: LD_INT 1
67332: NEG
67333: PUSH
67334: EMPTY
67335: LIST
67336: LIST
67337: PUSH
67338: LD_INT 1
67340: PUSH
67341: LD_INT 2
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 0
67350: PUSH
67351: LD_INT 2
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 2
67371: NEG
67372: PUSH
67373: LD_INT 0
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 2
67382: NEG
67383: PUSH
67384: LD_INT 1
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67406: LD_ADDR_VAR 0 52
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: LD_INT 1
67426: NEG
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: PUSH
67432: LD_INT 1
67434: PUSH
67435: LD_INT 0
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 1
67444: PUSH
67445: LD_INT 1
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 0
67454: PUSH
67455: LD_INT 1
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 1
67464: NEG
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 1
67475: NEG
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: NEG
67488: PUSH
67489: LD_INT 2
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: NEG
67500: PUSH
67501: LD_INT 1
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 2
67521: NEG
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: NEG
67534: PUSH
67535: LD_INT 2
67537: NEG
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: LIST
67556: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67557: LD_ADDR_VAR 0 53
67561: PUSH
67562: LD_INT 0
67564: PUSH
67565: LD_INT 0
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: LD_INT 1
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 1
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PUSH
67603: LD_INT 0
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: EMPTY
67610: LIST
67611: LIST
67612: PUSH
67613: LD_INT 1
67615: NEG
67616: PUSH
67617: LD_INT 0
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 1
67626: NEG
67627: PUSH
67628: LD_INT 1
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: LD_INT 2
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: LD_INT 2
67653: NEG
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: LD_INT 1
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 2
67682: PUSH
67683: LD_INT 1
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 2
67692: PUSH
67693: LD_INT 2
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: LD_INT 1
67702: PUSH
67703: LD_INT 2
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 0
67712: PUSH
67713: LD_INT 2
67715: PUSH
67716: EMPTY
67717: LIST
67718: LIST
67719: PUSH
67720: LD_INT 1
67722: NEG
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 2
67733: NEG
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 2
67744: NEG
67745: PUSH
67746: LD_INT 1
67748: NEG
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: NEG
67757: PUSH
67758: LD_INT 2
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67787: LD_ADDR_VAR 0 54
67791: PUSH
67792: LD_INT 0
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 1
67807: NEG
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 1
67815: PUSH
67816: LD_INT 0
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 1
67845: NEG
67846: PUSH
67847: LD_INT 0
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: NEG
67857: PUSH
67858: LD_INT 1
67860: NEG
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 2
67872: NEG
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 0
67880: PUSH
67881: LD_INT 2
67883: NEG
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: LD_INT 1
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: PUSH
67903: LD_INT 0
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 2
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 2
67922: PUSH
67923: LD_INT 2
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 0
67942: PUSH
67943: LD_INT 2
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: PUSH
67950: LD_INT 1
67952: NEG
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 2
67963: NEG
67964: PUSH
67965: LD_INT 0
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: LD_INT 2
67974: NEG
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 2
67986: NEG
67987: PUSH
67988: LD_INT 2
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68017: LD_ADDR_VAR 0 55
68021: PUSH
68022: LD_INT 0
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 0
68034: PUSH
68035: LD_INT 1
68037: NEG
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 1
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: LD_INT 1
68055: PUSH
68056: LD_INT 1
68058: PUSH
68059: EMPTY
68060: LIST
68061: LIST
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: LD_INT 1
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 1
68075: NEG
68076: PUSH
68077: LD_INT 0
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: LD_INT 1
68090: NEG
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: LD_INT 2
68102: NEG
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 2
68113: NEG
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 1
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 2
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 2
68142: PUSH
68143: LD_INT 1
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: PUSH
68163: LD_INT 2
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 0
68172: PUSH
68173: LD_INT 2
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 1
68182: NEG
68183: PUSH
68184: LD_INT 1
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 2
68193: NEG
68194: PUSH
68195: LD_INT 0
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: NEG
68205: PUSH
68206: LD_INT 1
68208: NEG
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: LD_INT 2
68220: NEG
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68247: LD_ADDR_VAR 0 56
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: LD_INT 0
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: EMPTY
68280: LIST
68281: LIST
68282: PUSH
68283: LD_INT 1
68285: PUSH
68286: LD_INT 1
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: PUSH
68293: LD_INT 0
68295: PUSH
68296: LD_INT 1
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 1
68305: NEG
68306: PUSH
68307: LD_INT 0
68309: PUSH
68310: EMPTY
68311: LIST
68312: LIST
68313: PUSH
68314: LD_INT 1
68316: NEG
68317: PUSH
68318: LD_INT 1
68320: NEG
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 2
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 0
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 1
68351: PUSH
68352: LD_INT 1
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 2
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 2
68372: PUSH
68373: LD_INT 1
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 2
68382: PUSH
68383: LD_INT 2
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: LD_INT 2
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 0
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 2
68423: NEG
68424: PUSH
68425: LD_INT 0
68427: PUSH
68428: EMPTY
68429: LIST
68430: LIST
68431: PUSH
68432: LD_INT 2
68434: NEG
68435: PUSH
68436: LD_INT 1
68438: NEG
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 2
68446: NEG
68447: PUSH
68448: LD_INT 2
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68477: LD_ADDR_VAR 0 57
68481: PUSH
68482: LD_INT 0
68484: PUSH
68485: LD_INT 0
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 0
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 1
68505: PUSH
68506: LD_INT 0
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: LD_INT 1
68518: PUSH
68519: EMPTY
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: LD_INT 1
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 1
68535: NEG
68536: PUSH
68537: LD_INT 0
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 1
68558: NEG
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 0
68570: PUSH
68571: LD_INT 2
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 1
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: EMPTY
68597: LIST
68598: LIST
68599: PUSH
68600: LD_INT 2
68602: PUSH
68603: LD_INT 1
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: PUSH
68613: LD_INT 2
68615: PUSH
68616: EMPTY
68617: LIST
68618: LIST
68619: PUSH
68620: LD_INT 1
68622: PUSH
68623: LD_INT 2
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 0
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 1
68642: NEG
68643: PUSH
68644: LD_INT 1
68646: PUSH
68647: EMPTY
68648: LIST
68649: LIST
68650: PUSH
68651: LD_INT 2
68653: NEG
68654: PUSH
68655: LD_INT 0
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 2
68664: NEG
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68707: LD_ADDR_VAR 0 58
68711: PUSH
68712: LD_INT 0
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 0
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 0
68755: PUSH
68756: LD_INT 1
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 1
68776: NEG
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: LD_INT 2
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: LD_INT 2
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 1
68811: PUSH
68812: LD_INT 1
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: PUSH
68833: LD_INT 1
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 2
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: LD_INT 2
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 0
68862: PUSH
68863: LD_INT 2
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 1
68872: NEG
68873: PUSH
68874: LD_INT 1
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 2
68883: NEG
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 2
68894: NEG
68895: PUSH
68896: LD_INT 1
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: LD_INT 2
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
68937: LD_ADDR_VAR 0 59
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 0
68954: PUSH
68955: LD_INT 1
68957: NEG
68958: PUSH
68959: EMPTY
68960: LIST
68961: LIST
68962: PUSH
68963: LD_INT 1
68965: PUSH
68966: LD_INT 0
68968: PUSH
68969: EMPTY
68970: LIST
68971: LIST
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 0
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: EMPTY
68990: LIST
68991: LIST
68992: PUSH
68993: LD_INT 1
68995: NEG
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 1
69006: NEG
69007: PUSH
69008: LD_INT 1
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69025: LD_ADDR_VAR 0 60
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 0
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 1
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: LD_INT 1
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: NEG
69084: PUSH
69085: LD_INT 0
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 1
69094: NEG
69095: PUSH
69096: LD_INT 1
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69113: LD_ADDR_VAR 0 61
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: LD_INT 0
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 1
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 1
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 1
69151: PUSH
69152: LD_INT 1
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 0
69161: PUSH
69162: LD_INT 1
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 1
69171: NEG
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: PUSH
69184: LD_INT 1
69186: NEG
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69201: LD_ADDR_VAR 0 62
69205: PUSH
69206: LD_INT 0
69208: PUSH
69209: LD_INT 0
69211: PUSH
69212: EMPTY
69213: LIST
69214: LIST
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: LD_INT 1
69221: NEG
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 1
69229: PUSH
69230: LD_INT 0
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: LD_INT 1
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: LD_INT 1
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 1
69259: NEG
69260: PUSH
69261: LD_INT 0
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 1
69270: NEG
69271: PUSH
69272: LD_INT 1
69274: NEG
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69289: LD_ADDR_VAR 0 63
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: LD_INT 0
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: LD_INT 1
69309: NEG
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 1
69317: PUSH
69318: LD_INT 0
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 1
69327: PUSH
69328: LD_INT 1
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 1
69347: NEG
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 1
69358: NEG
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
69377: LD_ADDR_VAR 0 64
69381: PUSH
69382: LD_INT 0
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 0
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: PUSH
69416: LD_INT 1
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 0
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 1
69435: NEG
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 1
69446: NEG
69447: PUSH
69448: LD_INT 1
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: ST_TO_ADDR
// end ; 1 :
69465: GO 75362
69467: LD_INT 1
69469: DOUBLE
69470: EQUAL
69471: IFTRUE 69475
69473: GO 72098
69475: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69476: LD_ADDR_VAR 0 11
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: LD_INT 3
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: LD_INT 3
69498: NEG
69499: PUSH
69500: EMPTY
69501: LIST
69502: LIST
69503: PUSH
69504: LD_INT 1
69506: PUSH
69507: LD_INT 2
69509: NEG
69510: PUSH
69511: EMPTY
69512: LIST
69513: LIST
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: LIST
69519: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69520: LD_ADDR_VAR 0 12
69524: PUSH
69525: LD_INT 2
69527: PUSH
69528: LD_INT 1
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 3
69538: PUSH
69539: LD_INT 0
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: LIST
69560: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69561: LD_ADDR_VAR 0 13
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: LD_INT 2
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 3
69578: PUSH
69579: LD_INT 3
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 2
69588: PUSH
69589: LD_INT 3
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: LIST
69600: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69601: LD_ADDR_VAR 0 14
69605: PUSH
69606: LD_INT 1
69608: PUSH
69609: LD_INT 3
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 0
69618: PUSH
69619: LD_INT 3
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 1
69628: NEG
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: LIST
69641: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69642: LD_ADDR_VAR 0 15
69646: PUSH
69647: LD_INT 2
69649: NEG
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 3
69660: NEG
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 3
69671: NEG
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: LIST
69685: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69686: LD_ADDR_VAR 0 16
69690: PUSH
69691: LD_INT 2
69693: NEG
69694: PUSH
69695: LD_INT 3
69697: NEG
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 3
69705: NEG
69706: PUSH
69707: LD_INT 2
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: LD_INT 3
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: LIST
69731: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69732: LD_ADDR_VAR 0 17
69736: PUSH
69737: LD_INT 1
69739: NEG
69740: PUSH
69741: LD_INT 3
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: LD_INT 3
69754: NEG
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: PUSH
69760: LD_INT 1
69762: PUSH
69763: LD_INT 2
69765: NEG
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: LIST
69775: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69776: LD_ADDR_VAR 0 18
69780: PUSH
69781: LD_INT 2
69783: PUSH
69784: LD_INT 1
69786: NEG
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: LD_INT 3
69794: PUSH
69795: LD_INT 0
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 3
69804: PUSH
69805: LD_INT 1
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: LIST
69816: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69817: LD_ADDR_VAR 0 19
69821: PUSH
69822: LD_INT 3
69824: PUSH
69825: LD_INT 2
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 3
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 2
69844: PUSH
69845: LD_INT 3
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: LIST
69856: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69857: LD_ADDR_VAR 0 20
69861: PUSH
69862: LD_INT 1
69864: PUSH
69865: LD_INT 3
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 0
69874: PUSH
69875: LD_INT 3
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 1
69884: NEG
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: LIST
69897: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69898: LD_ADDR_VAR 0 21
69902: PUSH
69903: LD_INT 2
69905: NEG
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 3
69916: NEG
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: EMPTY
69922: LIST
69923: LIST
69924: PUSH
69925: LD_INT 3
69927: NEG
69928: PUSH
69929: LD_INT 1
69931: NEG
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: LIST
69941: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69942: LD_ADDR_VAR 0 22
69946: PUSH
69947: LD_INT 2
69949: NEG
69950: PUSH
69951: LD_INT 3
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 3
69961: NEG
69962: PUSH
69963: LD_INT 2
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 3
69973: NEG
69974: PUSH
69975: LD_INT 3
69977: NEG
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: LIST
69987: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
69988: LD_ADDR_VAR 0 23
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: LD_INT 3
69998: NEG
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 1
70006: NEG
70007: PUSH
70008: LD_INT 4
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: LD_INT 3
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: LIST
70031: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
70032: LD_ADDR_VAR 0 24
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: LD_INT 0
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 3
70049: PUSH
70050: LD_INT 1
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 4
70060: PUSH
70061: LD_INT 1
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: LIST
70072: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
70073: LD_ADDR_VAR 0 25
70077: PUSH
70078: LD_INT 3
70080: PUSH
70081: LD_INT 3
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 4
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: EMPTY
70095: LIST
70096: LIST
70097: PUSH
70098: LD_INT 3
70100: PUSH
70101: LD_INT 4
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: LIST
70112: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
70113: LD_ADDR_VAR 0 26
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: LD_INT 3
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: LD_INT 1
70130: PUSH
70131: LD_INT 4
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: LD_INT 3
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: LIST
70153: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
70154: LD_ADDR_VAR 0 27
70158: PUSH
70159: LD_INT 3
70161: NEG
70162: PUSH
70163: LD_INT 0
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 3
70172: NEG
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 4
70183: NEG
70184: PUSH
70185: LD_INT 1
70187: NEG
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: LIST
70197: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
70198: LD_ADDR_VAR 0 28
70202: PUSH
70203: LD_INT 3
70205: NEG
70206: PUSH
70207: LD_INT 3
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 3
70217: NEG
70218: PUSH
70219: LD_INT 4
70221: NEG
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 4
70229: NEG
70230: PUSH
70231: LD_INT 3
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: LIST
70243: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
70244: LD_ADDR_VAR 0 29
70248: PUSH
70249: LD_INT 1
70251: NEG
70252: PUSH
70253: LD_INT 3
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 3
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 1
70274: PUSH
70275: LD_INT 2
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 1
70285: NEG
70286: PUSH
70287: LD_INT 4
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 0
70297: PUSH
70298: LD_INT 4
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 1
70308: PUSH
70309: LD_INT 3
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 1
70319: NEG
70320: PUSH
70321: LD_INT 5
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: LD_INT 5
70334: NEG
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 1
70342: PUSH
70343: LD_INT 4
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 1
70353: NEG
70354: PUSH
70355: LD_INT 6
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 0
70365: PUSH
70366: LD_INT 6
70368: NEG
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 1
70376: PUSH
70377: LD_INT 5
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: EMPTY
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
70399: LD_ADDR_VAR 0 30
70403: PUSH
70404: LD_INT 2
70406: PUSH
70407: LD_INT 1
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: PUSH
70418: LD_INT 0
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 3
70427: PUSH
70428: LD_INT 1
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 3
70437: PUSH
70438: LD_INT 1
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 4
70448: PUSH
70449: LD_INT 0
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 4
70458: PUSH
70459: LD_INT 1
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 4
70468: PUSH
70469: LD_INT 1
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 5
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 5
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 5
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 6
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 6
70520: PUSH
70521: LD_INT 1
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
70542: LD_ADDR_VAR 0 31
70546: PUSH
70547: LD_INT 3
70549: PUSH
70550: LD_INT 2
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: PUSH
70557: LD_INT 3
70559: PUSH
70560: LD_INT 3
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 2
70569: PUSH
70570: LD_INT 3
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 4
70579: PUSH
70580: LD_INT 3
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 4
70589: PUSH
70590: LD_INT 4
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 3
70599: PUSH
70600: LD_INT 4
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 5
70609: PUSH
70610: LD_INT 4
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 5
70619: PUSH
70620: LD_INT 5
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 4
70629: PUSH
70630: LD_INT 5
70632: PUSH
70633: EMPTY
70634: LIST
70635: LIST
70636: PUSH
70637: LD_INT 6
70639: PUSH
70640: LD_INT 5
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 6
70649: PUSH
70650: LD_INT 6
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 5
70659: PUSH
70660: LD_INT 6
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: LIST
70677: LIST
70678: LIST
70679: LIST
70680: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
70681: LD_ADDR_VAR 0 32
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: LD_INT 3
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 0
70698: PUSH
70699: LD_INT 3
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 1
70708: NEG
70709: PUSH
70710: LD_INT 2
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 1
70719: PUSH
70720: LD_INT 4
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 4
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: LD_INT 3
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 1
70750: PUSH
70751: LD_INT 5
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 0
70760: PUSH
70761: LD_INT 5
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 1
70770: NEG
70771: PUSH
70772: LD_INT 4
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 1
70781: PUSH
70782: LD_INT 6
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 0
70791: PUSH
70792: LD_INT 6
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: NEG
70802: PUSH
70803: LD_INT 5
70805: PUSH
70806: EMPTY
70807: LIST
70808: LIST
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
70824: LD_ADDR_VAR 0 33
70828: PUSH
70829: LD_INT 2
70831: NEG
70832: PUSH
70833: LD_INT 1
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 3
70842: NEG
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 3
70853: NEG
70854: PUSH
70855: LD_INT 1
70857: NEG
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 3
70865: NEG
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 4
70876: NEG
70877: PUSH
70878: LD_INT 0
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 4
70887: NEG
70888: PUSH
70889: LD_INT 1
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 4
70899: NEG
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 5
70910: NEG
70911: PUSH
70912: LD_INT 0
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 5
70921: NEG
70922: PUSH
70923: LD_INT 1
70925: NEG
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 5
70933: NEG
70934: PUSH
70935: LD_INT 1
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 6
70944: NEG
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: LD_INT 6
70955: NEG
70956: PUSH
70957: LD_INT 1
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: LIST
70975: LIST
70976: LIST
70977: LIST
70978: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
70979: LD_ADDR_VAR 0 34
70983: PUSH
70984: LD_INT 2
70986: NEG
70987: PUSH
70988: LD_INT 3
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 3
70998: NEG
70999: PUSH
71000: LD_INT 2
71002: NEG
71003: PUSH
71004: EMPTY
71005: LIST
71006: LIST
71007: PUSH
71008: LD_INT 3
71010: NEG
71011: PUSH
71012: LD_INT 3
71014: NEG
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: PUSH
71020: LD_INT 3
71022: NEG
71023: PUSH
71024: LD_INT 4
71026: NEG
71027: PUSH
71028: EMPTY
71029: LIST
71030: LIST
71031: PUSH
71032: LD_INT 4
71034: NEG
71035: PUSH
71036: LD_INT 3
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 4
71046: NEG
71047: PUSH
71048: LD_INT 4
71050: NEG
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 4
71058: NEG
71059: PUSH
71060: LD_INT 5
71062: NEG
71063: PUSH
71064: EMPTY
71065: LIST
71066: LIST
71067: PUSH
71068: LD_INT 5
71070: NEG
71071: PUSH
71072: LD_INT 4
71074: NEG
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 5
71082: NEG
71083: PUSH
71084: LD_INT 5
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 5
71094: NEG
71095: PUSH
71096: LD_INT 6
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 6
71106: NEG
71107: PUSH
71108: LD_INT 5
71110: NEG
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 6
71118: NEG
71119: PUSH
71120: LD_INT 6
71122: NEG
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
71142: LD_ADDR_VAR 0 41
71146: PUSH
71147: LD_INT 0
71149: PUSH
71150: LD_INT 2
71152: NEG
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: LD_INT 1
71160: NEG
71161: PUSH
71162: LD_INT 3
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 1
71172: PUSH
71173: LD_INT 2
71175: NEG
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: LIST
71185: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
71186: LD_ADDR_VAR 0 42
71190: PUSH
71191: LD_INT 2
71193: PUSH
71194: LD_INT 0
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 2
71203: PUSH
71204: LD_INT 1
71206: NEG
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 3
71214: PUSH
71215: LD_INT 1
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: LIST
71226: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
71227: LD_ADDR_VAR 0 43
71231: PUSH
71232: LD_INT 2
71234: PUSH
71235: LD_INT 2
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 3
71244: PUSH
71245: LD_INT 2
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 2
71254: PUSH
71255: LD_INT 3
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: LIST
71266: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
71267: LD_ADDR_VAR 0 44
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: LD_INT 2
71277: PUSH
71278: EMPTY
71279: LIST
71280: LIST
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: LD_INT 3
71287: PUSH
71288: EMPTY
71289: LIST
71290: LIST
71291: PUSH
71292: LD_INT 1
71294: NEG
71295: PUSH
71296: LD_INT 2
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: LIST
71307: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71308: LD_ADDR_VAR 0 45
71312: PUSH
71313: LD_INT 2
71315: NEG
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 2
71326: NEG
71327: PUSH
71328: LD_INT 1
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 3
71337: NEG
71338: PUSH
71339: LD_INT 1
71341: NEG
71342: PUSH
71343: EMPTY
71344: LIST
71345: LIST
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: LIST
71351: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
71352: LD_ADDR_VAR 0 46
71356: PUSH
71357: LD_INT 2
71359: NEG
71360: PUSH
71361: LD_INT 2
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 2
71371: NEG
71372: PUSH
71373: LD_INT 3
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 3
71383: NEG
71384: PUSH
71385: LD_INT 2
71387: NEG
71388: PUSH
71389: EMPTY
71390: LIST
71391: LIST
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: LIST
71397: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
71398: LD_ADDR_VAR 0 47
71402: PUSH
71403: LD_INT 2
71405: NEG
71406: PUSH
71407: LD_INT 3
71409: NEG
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 1
71417: NEG
71418: PUSH
71419: LD_INT 3
71421: NEG
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71431: LD_ADDR_VAR 0 48
71435: PUSH
71436: LD_INT 1
71438: PUSH
71439: LD_INT 2
71441: NEG
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 2
71449: PUSH
71450: LD_INT 1
71452: NEG
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: EMPTY
71459: LIST
71460: LIST
71461: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
71462: LD_ADDR_VAR 0 49
71466: PUSH
71467: LD_INT 3
71469: PUSH
71470: LD_INT 1
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 3
71479: PUSH
71480: LD_INT 2
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: EMPTY
71488: LIST
71489: LIST
71490: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
71491: LD_ADDR_VAR 0 50
71495: PUSH
71496: LD_INT 2
71498: PUSH
71499: LD_INT 3
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: LD_INT 1
71508: PUSH
71509: LD_INT 3
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: EMPTY
71517: LIST
71518: LIST
71519: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
71520: LD_ADDR_VAR 0 51
71524: PUSH
71525: LD_INT 1
71527: NEG
71528: PUSH
71529: LD_INT 2
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 2
71538: NEG
71539: PUSH
71540: LD_INT 1
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
71551: LD_ADDR_VAR 0 52
71555: PUSH
71556: LD_INT 3
71558: NEG
71559: PUSH
71560: LD_INT 1
71562: NEG
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: PUSH
71568: LD_INT 3
71570: NEG
71571: PUSH
71572: LD_INT 2
71574: NEG
71575: PUSH
71576: EMPTY
71577: LIST
71578: LIST
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71584: LD_ADDR_VAR 0 53
71588: PUSH
71589: LD_INT 1
71591: NEG
71592: PUSH
71593: LD_INT 3
71595: NEG
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: LD_INT 3
71606: NEG
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 1
71614: PUSH
71615: LD_INT 2
71617: NEG
71618: PUSH
71619: EMPTY
71620: LIST
71621: LIST
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: LIST
71627: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
71628: LD_ADDR_VAR 0 54
71632: PUSH
71633: LD_INT 2
71635: PUSH
71636: LD_INT 1
71638: NEG
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 3
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 3
71656: PUSH
71657: LD_INT 1
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: LIST
71668: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
71669: LD_ADDR_VAR 0 55
71673: PUSH
71674: LD_INT 3
71676: PUSH
71677: LD_INT 2
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: LD_INT 3
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 2
71696: PUSH
71697: LD_INT 3
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: EMPTY
71705: LIST
71706: LIST
71707: LIST
71708: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71709: LD_ADDR_VAR 0 56
71713: PUSH
71714: LD_INT 1
71716: PUSH
71717: LD_INT 3
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 0
71726: PUSH
71727: LD_INT 3
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 1
71736: NEG
71737: PUSH
71738: LD_INT 2
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: LIST
71749: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71750: LD_ADDR_VAR 0 57
71754: PUSH
71755: LD_INT 2
71757: NEG
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 3
71768: NEG
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 3
71779: NEG
71780: PUSH
71781: LD_INT 1
71783: NEG
71784: PUSH
71785: EMPTY
71786: LIST
71787: LIST
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: LIST
71793: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71794: LD_ADDR_VAR 0 58
71798: PUSH
71799: LD_INT 2
71801: NEG
71802: PUSH
71803: LD_INT 3
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 3
71813: NEG
71814: PUSH
71815: LD_INT 2
71817: NEG
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 3
71825: NEG
71826: PUSH
71827: LD_INT 3
71829: NEG
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: EMPTY
71836: LIST
71837: LIST
71838: LIST
71839: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
71840: LD_ADDR_VAR 0 59
71844: PUSH
71845: LD_INT 1
71847: NEG
71848: PUSH
71849: LD_INT 2
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: LD_INT 2
71862: NEG
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 1
71870: PUSH
71871: LD_INT 1
71873: NEG
71874: PUSH
71875: EMPTY
71876: LIST
71877: LIST
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: LIST
71883: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
71884: LD_ADDR_VAR 0 60
71888: PUSH
71889: LD_INT 1
71891: PUSH
71892: LD_INT 1
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 2
71902: PUSH
71903: LD_INT 0
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 2
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: LIST
71924: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
71925: LD_ADDR_VAR 0 61
71929: PUSH
71930: LD_INT 2
71932: PUSH
71933: LD_INT 1
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: LD_INT 2
71942: PUSH
71943: LD_INT 2
71945: PUSH
71946: EMPTY
71947: LIST
71948: LIST
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: LD_INT 2
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: LIST
71964: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
71965: LD_ADDR_VAR 0 62
71969: PUSH
71970: LD_INT 1
71972: PUSH
71973: LD_INT 2
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: LD_INT 2
71985: PUSH
71986: EMPTY
71987: LIST
71988: LIST
71989: PUSH
71990: LD_INT 1
71992: NEG
71993: PUSH
71994: LD_INT 1
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: EMPTY
72002: LIST
72003: LIST
72004: LIST
72005: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72006: LD_ADDR_VAR 0 63
72010: PUSH
72011: LD_INT 1
72013: NEG
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 2
72024: NEG
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 2
72035: NEG
72036: PUSH
72037: LD_INT 1
72039: NEG
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: LIST
72049: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72050: LD_ADDR_VAR 0 64
72054: PUSH
72055: LD_INT 1
72057: NEG
72058: PUSH
72059: LD_INT 2
72061: NEG
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 2
72069: NEG
72070: PUSH
72071: LD_INT 1
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 2
72081: NEG
72082: PUSH
72083: LD_INT 2
72085: NEG
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: PUSH
72091: EMPTY
72092: LIST
72093: LIST
72094: LIST
72095: ST_TO_ADDR
// end ; 2 :
72096: GO 75362
72098: LD_INT 2
72100: DOUBLE
72101: EQUAL
72102: IFTRUE 72106
72104: GO 75361
72106: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
72107: LD_ADDR_VAR 0 29
72111: PUSH
72112: LD_INT 4
72114: PUSH
72115: LD_INT 0
72117: PUSH
72118: EMPTY
72119: LIST
72120: LIST
72121: PUSH
72122: LD_INT 4
72124: PUSH
72125: LD_INT 1
72127: NEG
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 5
72135: PUSH
72136: LD_INT 0
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 5
72145: PUSH
72146: LD_INT 1
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 4
72155: PUSH
72156: LD_INT 1
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: LD_INT 3
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 3
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: LD_INT 3
72186: PUSH
72187: LD_INT 2
72189: NEG
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 5
72197: PUSH
72198: LD_INT 2
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 3
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 3
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 4
72227: PUSH
72228: LD_INT 3
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 4
72237: PUSH
72238: LD_INT 4
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: LD_INT 3
72247: PUSH
72248: LD_INT 4
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 2
72257: PUSH
72258: LD_INT 3
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 2
72267: PUSH
72268: LD_INT 2
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 4
72277: PUSH
72278: LD_INT 2
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 2
72287: PUSH
72288: LD_INT 4
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 0
72297: PUSH
72298: LD_INT 4
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 0
72307: PUSH
72308: LD_INT 3
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 1
72317: PUSH
72318: LD_INT 4
72320: PUSH
72321: EMPTY
72322: LIST
72323: LIST
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: LD_INT 5
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 0
72337: PUSH
72338: LD_INT 5
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 1
72347: NEG
72348: PUSH
72349: LD_INT 4
72351: PUSH
72352: EMPTY
72353: LIST
72354: LIST
72355: PUSH
72356: LD_INT 1
72358: NEG
72359: PUSH
72360: LD_INT 3
72362: PUSH
72363: EMPTY
72364: LIST
72365: LIST
72366: PUSH
72367: LD_INT 2
72369: PUSH
72370: LD_INT 5
72372: PUSH
72373: EMPTY
72374: LIST
72375: LIST
72376: PUSH
72377: LD_INT 2
72379: NEG
72380: PUSH
72381: LD_INT 3
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 3
72390: NEG
72391: PUSH
72392: LD_INT 0
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 3
72401: NEG
72402: PUSH
72403: LD_INT 1
72405: NEG
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 2
72413: NEG
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 2
72424: NEG
72425: PUSH
72426: LD_INT 1
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 3
72435: NEG
72436: PUSH
72437: LD_INT 1
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 4
72446: NEG
72447: PUSH
72448: LD_INT 0
72450: PUSH
72451: EMPTY
72452: LIST
72453: LIST
72454: PUSH
72455: LD_INT 4
72457: NEG
72458: PUSH
72459: LD_INT 1
72461: NEG
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PUSH
72467: LD_INT 4
72469: NEG
72470: PUSH
72471: LD_INT 2
72473: NEG
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 2
72481: NEG
72482: PUSH
72483: LD_INT 2
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 4
72492: NEG
72493: PUSH
72494: LD_INT 4
72496: NEG
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 4
72504: NEG
72505: PUSH
72506: LD_INT 5
72508: NEG
72509: PUSH
72510: EMPTY
72511: LIST
72512: LIST
72513: PUSH
72514: LD_INT 3
72516: NEG
72517: PUSH
72518: LD_INT 4
72520: NEG
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 3
72528: NEG
72529: PUSH
72530: LD_INT 3
72532: NEG
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 4
72540: NEG
72541: PUSH
72542: LD_INT 3
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: LD_INT 5
72552: NEG
72553: PUSH
72554: LD_INT 4
72556: NEG
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 5
72564: NEG
72565: PUSH
72566: LD_INT 5
72568: NEG
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 3
72576: NEG
72577: PUSH
72578: LD_INT 5
72580: NEG
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 5
72588: NEG
72589: PUSH
72590: LD_INT 3
72592: NEG
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: LIST
72602: LIST
72603: LIST
72604: LIST
72605: LIST
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
72645: LD_ADDR_VAR 0 30
72649: PUSH
72650: LD_INT 4
72652: PUSH
72653: LD_INT 4
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 4
72662: PUSH
72663: LD_INT 3
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: LD_INT 5
72672: PUSH
72673: LD_INT 4
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: LD_INT 5
72682: PUSH
72683: LD_INT 5
72685: PUSH
72686: EMPTY
72687: LIST
72688: LIST
72689: PUSH
72690: LD_INT 4
72692: PUSH
72693: LD_INT 5
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 3
72702: PUSH
72703: LD_INT 4
72705: PUSH
72706: EMPTY
72707: LIST
72708: LIST
72709: PUSH
72710: LD_INT 3
72712: PUSH
72713: LD_INT 3
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 5
72722: PUSH
72723: LD_INT 3
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 3
72732: PUSH
72733: LD_INT 5
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 0
72742: PUSH
72743: LD_INT 3
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 0
72752: PUSH
72753: LD_INT 2
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 1
72762: PUSH
72763: LD_INT 3
72765: PUSH
72766: EMPTY
72767: LIST
72768: LIST
72769: PUSH
72770: LD_INT 1
72772: PUSH
72773: LD_INT 4
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 0
72782: PUSH
72783: LD_INT 4
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 1
72792: NEG
72793: PUSH
72794: LD_INT 3
72796: PUSH
72797: EMPTY
72798: LIST
72799: LIST
72800: PUSH
72801: LD_INT 1
72803: NEG
72804: PUSH
72805: LD_INT 2
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PUSH
72812: LD_INT 2
72814: PUSH
72815: LD_INT 4
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 2
72824: NEG
72825: PUSH
72826: LD_INT 2
72828: PUSH
72829: EMPTY
72830: LIST
72831: LIST
72832: PUSH
72833: LD_INT 4
72835: NEG
72836: PUSH
72837: LD_INT 0
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: LD_INT 4
72846: NEG
72847: PUSH
72848: LD_INT 1
72850: NEG
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 3
72858: NEG
72859: PUSH
72860: LD_INT 0
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 3
72869: NEG
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 4
72880: NEG
72881: PUSH
72882: LD_INT 1
72884: PUSH
72885: EMPTY
72886: LIST
72887: LIST
72888: PUSH
72889: LD_INT 5
72891: NEG
72892: PUSH
72893: LD_INT 0
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 5
72902: NEG
72903: PUSH
72904: LD_INT 1
72906: NEG
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 5
72914: NEG
72915: PUSH
72916: LD_INT 2
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 3
72926: NEG
72927: PUSH
72928: LD_INT 2
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 3
72937: NEG
72938: PUSH
72939: LD_INT 3
72941: NEG
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 3
72949: NEG
72950: PUSH
72951: LD_INT 4
72953: NEG
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 2
72961: NEG
72962: PUSH
72963: LD_INT 3
72965: NEG
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 2
72973: NEG
72974: PUSH
72975: LD_INT 2
72977: NEG
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 3
72985: NEG
72986: PUSH
72987: LD_INT 2
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 4
72997: NEG
72998: PUSH
72999: LD_INT 3
73001: NEG
73002: PUSH
73003: EMPTY
73004: LIST
73005: LIST
73006: PUSH
73007: LD_INT 4
73009: NEG
73010: PUSH
73011: LD_INT 4
73013: NEG
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 2
73021: NEG
73022: PUSH
73023: LD_INT 4
73025: NEG
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 4
73033: NEG
73034: PUSH
73035: LD_INT 2
73037: NEG
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 0
73045: PUSH
73046: LD_INT 4
73048: NEG
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 0
73056: PUSH
73057: LD_INT 5
73059: NEG
73060: PUSH
73061: EMPTY
73062: LIST
73063: LIST
73064: PUSH
73065: LD_INT 1
73067: PUSH
73068: LD_INT 4
73070: NEG
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: LD_INT 1
73078: PUSH
73079: LD_INT 3
73081: NEG
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: LD_INT 0
73089: PUSH
73090: LD_INT 3
73092: NEG
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_INT 1
73100: NEG
73101: PUSH
73102: LD_INT 4
73104: NEG
73105: PUSH
73106: EMPTY
73107: LIST
73108: LIST
73109: PUSH
73110: LD_INT 1
73112: NEG
73113: PUSH
73114: LD_INT 5
73116: NEG
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 2
73124: PUSH
73125: LD_INT 3
73127: NEG
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 2
73135: NEG
73136: PUSH
73137: LD_INT 5
73139: NEG
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: LIST
73149: LIST
73150: LIST
73151: LIST
73152: LIST
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
73192: LD_ADDR_VAR 0 31
73196: PUSH
73197: LD_INT 0
73199: PUSH
73200: LD_INT 4
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 0
73209: PUSH
73210: LD_INT 3
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 1
73219: PUSH
73220: LD_INT 4
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 1
73229: PUSH
73230: LD_INT 5
73232: PUSH
73233: EMPTY
73234: LIST
73235: LIST
73236: PUSH
73237: LD_INT 0
73239: PUSH
73240: LD_INT 5
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 1
73249: NEG
73250: PUSH
73251: LD_INT 4
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 1
73260: NEG
73261: PUSH
73262: LD_INT 3
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 2
73271: PUSH
73272: LD_INT 5
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 2
73281: NEG
73282: PUSH
73283: LD_INT 3
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 3
73292: NEG
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: LD_INT 3
73303: NEG
73304: PUSH
73305: LD_INT 1
73307: NEG
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 2
73315: NEG
73316: PUSH
73317: LD_INT 0
73319: PUSH
73320: EMPTY
73321: LIST
73322: LIST
73323: PUSH
73324: LD_INT 2
73326: NEG
73327: PUSH
73328: LD_INT 1
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 3
73337: NEG
73338: PUSH
73339: LD_INT 1
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 4
73348: NEG
73349: PUSH
73350: LD_INT 0
73352: PUSH
73353: EMPTY
73354: LIST
73355: LIST
73356: PUSH
73357: LD_INT 4
73359: NEG
73360: PUSH
73361: LD_INT 1
73363: NEG
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 4
73371: NEG
73372: PUSH
73373: LD_INT 2
73375: NEG
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: LD_INT 2
73383: NEG
73384: PUSH
73385: LD_INT 2
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 4
73394: NEG
73395: PUSH
73396: LD_INT 4
73398: NEG
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 4
73406: NEG
73407: PUSH
73408: LD_INT 5
73410: NEG
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 3
73418: NEG
73419: PUSH
73420: LD_INT 4
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 3
73430: NEG
73431: PUSH
73432: LD_INT 3
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 4
73442: NEG
73443: PUSH
73444: LD_INT 3
73446: NEG
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 5
73454: NEG
73455: PUSH
73456: LD_INT 4
73458: NEG
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 5
73466: NEG
73467: PUSH
73468: LD_INT 5
73470: NEG
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 3
73478: NEG
73479: PUSH
73480: LD_INT 5
73482: NEG
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 5
73490: NEG
73491: PUSH
73492: LD_INT 3
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 0
73502: PUSH
73503: LD_INT 3
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 0
73513: PUSH
73514: LD_INT 4
73516: NEG
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: LD_INT 1
73524: PUSH
73525: LD_INT 3
73527: NEG
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: PUSH
73533: LD_INT 1
73535: PUSH
73536: LD_INT 2
73538: NEG
73539: PUSH
73540: EMPTY
73541: LIST
73542: LIST
73543: PUSH
73544: LD_INT 0
73546: PUSH
73547: LD_INT 2
73549: NEG
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: LD_INT 1
73557: NEG
73558: PUSH
73559: LD_INT 3
73561: NEG
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 1
73569: NEG
73570: PUSH
73571: LD_INT 4
73573: NEG
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 2
73581: PUSH
73582: LD_INT 2
73584: NEG
73585: PUSH
73586: EMPTY
73587: LIST
73588: LIST
73589: PUSH
73590: LD_INT 2
73592: NEG
73593: PUSH
73594: LD_INT 4
73596: NEG
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 4
73604: PUSH
73605: LD_INT 0
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: PUSH
73612: LD_INT 4
73614: PUSH
73615: LD_INT 1
73617: NEG
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: PUSH
73623: LD_INT 5
73625: PUSH
73626: LD_INT 0
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 5
73635: PUSH
73636: LD_INT 1
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 4
73645: PUSH
73646: LD_INT 1
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 3
73655: PUSH
73656: LD_INT 0
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PUSH
73663: LD_INT 3
73665: PUSH
73666: LD_INT 1
73668: NEG
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: PUSH
73674: LD_INT 3
73676: PUSH
73677: LD_INT 2
73679: NEG
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 5
73687: PUSH
73688: LD_INT 2
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
73742: LD_ADDR_VAR 0 32
73746: PUSH
73747: LD_INT 4
73749: NEG
73750: PUSH
73751: LD_INT 0
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: LD_INT 4
73760: NEG
73761: PUSH
73762: LD_INT 1
73764: NEG
73765: PUSH
73766: EMPTY
73767: LIST
73768: LIST
73769: PUSH
73770: LD_INT 3
73772: NEG
73773: PUSH
73774: LD_INT 0
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: PUSH
73781: LD_INT 3
73783: NEG
73784: PUSH
73785: LD_INT 1
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 4
73794: NEG
73795: PUSH
73796: LD_INT 1
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 5
73805: NEG
73806: PUSH
73807: LD_INT 0
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 5
73816: NEG
73817: PUSH
73818: LD_INT 1
73820: NEG
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 5
73828: NEG
73829: PUSH
73830: LD_INT 2
73832: NEG
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 3
73840: NEG
73841: PUSH
73842: LD_INT 2
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 3
73851: NEG
73852: PUSH
73853: LD_INT 3
73855: NEG
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 3
73863: NEG
73864: PUSH
73865: LD_INT 4
73867: NEG
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 2
73875: NEG
73876: PUSH
73877: LD_INT 3
73879: NEG
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: LD_INT 2
73887: NEG
73888: PUSH
73889: LD_INT 2
73891: NEG
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 3
73899: NEG
73900: PUSH
73901: LD_INT 2
73903: NEG
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PUSH
73909: LD_INT 4
73911: NEG
73912: PUSH
73913: LD_INT 3
73915: NEG
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 4
73923: NEG
73924: PUSH
73925: LD_INT 4
73927: NEG
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 2
73935: NEG
73936: PUSH
73937: LD_INT 4
73939: NEG
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 4
73947: NEG
73948: PUSH
73949: LD_INT 2
73951: NEG
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 0
73959: PUSH
73960: LD_INT 4
73962: NEG
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 0
73970: PUSH
73971: LD_INT 5
73973: NEG
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 1
73981: PUSH
73982: LD_INT 4
73984: NEG
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 1
73992: PUSH
73993: LD_INT 3
73995: NEG
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: LD_INT 0
74003: PUSH
74004: LD_INT 3
74006: NEG
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PUSH
74012: LD_INT 1
74014: NEG
74015: PUSH
74016: LD_INT 4
74018: NEG
74019: PUSH
74020: EMPTY
74021: LIST
74022: LIST
74023: PUSH
74024: LD_INT 1
74026: NEG
74027: PUSH
74028: LD_INT 5
74030: NEG
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 2
74038: PUSH
74039: LD_INT 3
74041: NEG
74042: PUSH
74043: EMPTY
74044: LIST
74045: LIST
74046: PUSH
74047: LD_INT 2
74049: NEG
74050: PUSH
74051: LD_INT 5
74053: NEG
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 3
74061: PUSH
74062: LD_INT 0
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_INT 3
74071: PUSH
74072: LD_INT 1
74074: NEG
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 4
74082: PUSH
74083: LD_INT 0
74085: PUSH
74086: EMPTY
74087: LIST
74088: LIST
74089: PUSH
74090: LD_INT 4
74092: PUSH
74093: LD_INT 1
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: PUSH
74100: LD_INT 3
74102: PUSH
74103: LD_INT 1
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 2
74112: PUSH
74113: LD_INT 0
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: LD_INT 2
74122: PUSH
74123: LD_INT 1
74125: NEG
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PUSH
74131: LD_INT 2
74133: PUSH
74134: LD_INT 2
74136: NEG
74137: PUSH
74138: EMPTY
74139: LIST
74140: LIST
74141: PUSH
74142: LD_INT 4
74144: PUSH
74145: LD_INT 2
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: PUSH
74152: LD_INT 4
74154: PUSH
74155: LD_INT 4
74157: PUSH
74158: EMPTY
74159: LIST
74160: LIST
74161: PUSH
74162: LD_INT 4
74164: PUSH
74165: LD_INT 3
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 5
74174: PUSH
74175: LD_INT 4
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 5
74184: PUSH
74185: LD_INT 5
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 4
74194: PUSH
74195: LD_INT 5
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 3
74204: PUSH
74205: LD_INT 4
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 3
74214: PUSH
74215: LD_INT 3
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 5
74224: PUSH
74225: LD_INT 3
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 3
74234: PUSH
74235: LD_INT 5
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: LIST
74271: LIST
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
74289: LD_ADDR_VAR 0 33
74293: PUSH
74294: LD_INT 4
74296: NEG
74297: PUSH
74298: LD_INT 4
74300: NEG
74301: PUSH
74302: EMPTY
74303: LIST
74304: LIST
74305: PUSH
74306: LD_INT 4
74308: NEG
74309: PUSH
74310: LD_INT 5
74312: NEG
74313: PUSH
74314: EMPTY
74315: LIST
74316: LIST
74317: PUSH
74318: LD_INT 3
74320: NEG
74321: PUSH
74322: LD_INT 4
74324: NEG
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: PUSH
74330: LD_INT 3
74332: NEG
74333: PUSH
74334: LD_INT 3
74336: NEG
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: PUSH
74342: LD_INT 4
74344: NEG
74345: PUSH
74346: LD_INT 3
74348: NEG
74349: PUSH
74350: EMPTY
74351: LIST
74352: LIST
74353: PUSH
74354: LD_INT 5
74356: NEG
74357: PUSH
74358: LD_INT 4
74360: NEG
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: LD_INT 5
74368: NEG
74369: PUSH
74370: LD_INT 5
74372: NEG
74373: PUSH
74374: EMPTY
74375: LIST
74376: LIST
74377: PUSH
74378: LD_INT 3
74380: NEG
74381: PUSH
74382: LD_INT 5
74384: NEG
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PUSH
74390: LD_INT 5
74392: NEG
74393: PUSH
74394: LD_INT 3
74396: NEG
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: LD_INT 0
74404: PUSH
74405: LD_INT 3
74407: NEG
74408: PUSH
74409: EMPTY
74410: LIST
74411: LIST
74412: PUSH
74413: LD_INT 0
74415: PUSH
74416: LD_INT 4
74418: NEG
74419: PUSH
74420: EMPTY
74421: LIST
74422: LIST
74423: PUSH
74424: LD_INT 1
74426: PUSH
74427: LD_INT 3
74429: NEG
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 1
74437: PUSH
74438: LD_INT 2
74440: NEG
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 0
74448: PUSH
74449: LD_INT 2
74451: NEG
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 1
74459: NEG
74460: PUSH
74461: LD_INT 3
74463: NEG
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 1
74471: NEG
74472: PUSH
74473: LD_INT 4
74475: NEG
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 2
74483: PUSH
74484: LD_INT 2
74486: NEG
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 2
74494: NEG
74495: PUSH
74496: LD_INT 4
74498: NEG
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 4
74506: PUSH
74507: LD_INT 0
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 4
74516: PUSH
74517: LD_INT 1
74519: NEG
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 5
74527: PUSH
74528: LD_INT 0
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 5
74537: PUSH
74538: LD_INT 1
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 4
74547: PUSH
74548: LD_INT 1
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 3
74557: PUSH
74558: LD_INT 0
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: PUSH
74565: LD_INT 3
74567: PUSH
74568: LD_INT 1
74570: NEG
74571: PUSH
74572: EMPTY
74573: LIST
74574: LIST
74575: PUSH
74576: LD_INT 3
74578: PUSH
74579: LD_INT 2
74581: NEG
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 5
74589: PUSH
74590: LD_INT 2
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 3
74599: PUSH
74600: LD_INT 3
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 3
74609: PUSH
74610: LD_INT 2
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 4
74619: PUSH
74620: LD_INT 3
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 4
74629: PUSH
74630: LD_INT 4
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 3
74639: PUSH
74640: LD_INT 4
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: PUSH
74647: LD_INT 2
74649: PUSH
74650: LD_INT 3
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 2
74659: PUSH
74660: LD_INT 2
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: LD_INT 4
74669: PUSH
74670: LD_INT 2
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: PUSH
74677: LD_INT 2
74679: PUSH
74680: LD_INT 4
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 0
74689: PUSH
74690: LD_INT 4
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 0
74699: PUSH
74700: LD_INT 3
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 1
74709: PUSH
74710: LD_INT 4
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 1
74719: PUSH
74720: LD_INT 5
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 0
74729: PUSH
74730: LD_INT 5
74732: PUSH
74733: EMPTY
74734: LIST
74735: LIST
74736: PUSH
74737: LD_INT 1
74739: NEG
74740: PUSH
74741: LD_INT 4
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 1
74750: NEG
74751: PUSH
74752: LD_INT 3
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: LD_INT 5
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 2
74771: NEG
74772: PUSH
74773: LD_INT 3
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: LIST
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: LIST
74819: LIST
74820: LIST
74821: LIST
74822: LIST
74823: LIST
74824: LIST
74825: LIST
74826: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
74827: LD_ADDR_VAR 0 34
74831: PUSH
74832: LD_INT 0
74834: PUSH
74835: LD_INT 4
74837: NEG
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PUSH
74843: LD_INT 0
74845: PUSH
74846: LD_INT 5
74848: NEG
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: PUSH
74854: LD_INT 1
74856: PUSH
74857: LD_INT 4
74859: NEG
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 1
74867: PUSH
74868: LD_INT 3
74870: NEG
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PUSH
74876: LD_INT 0
74878: PUSH
74879: LD_INT 3
74881: NEG
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 1
74889: NEG
74890: PUSH
74891: LD_INT 4
74893: NEG
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 1
74901: NEG
74902: PUSH
74903: LD_INT 5
74905: NEG
74906: PUSH
74907: EMPTY
74908: LIST
74909: LIST
74910: PUSH
74911: LD_INT 2
74913: PUSH
74914: LD_INT 3
74916: NEG
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 2
74924: NEG
74925: PUSH
74926: LD_INT 5
74928: NEG
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 3
74936: PUSH
74937: LD_INT 0
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 3
74946: PUSH
74947: LD_INT 1
74949: NEG
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 4
74957: PUSH
74958: LD_INT 0
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PUSH
74965: LD_INT 4
74967: PUSH
74968: LD_INT 1
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 3
74977: PUSH
74978: LD_INT 1
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 2
74987: PUSH
74988: LD_INT 0
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 2
74997: PUSH
74998: LD_INT 1
75000: NEG
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 2
75008: PUSH
75009: LD_INT 2
75011: NEG
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 4
75019: PUSH
75020: LD_INT 2
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PUSH
75027: LD_INT 4
75029: PUSH
75030: LD_INT 4
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 4
75039: PUSH
75040: LD_INT 3
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 5
75049: PUSH
75050: LD_INT 4
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_INT 5
75059: PUSH
75060: LD_INT 5
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 4
75069: PUSH
75070: LD_INT 5
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 3
75079: PUSH
75080: LD_INT 4
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: PUSH
75087: LD_INT 3
75089: PUSH
75090: LD_INT 3
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 5
75099: PUSH
75100: LD_INT 3
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 3
75109: PUSH
75110: LD_INT 5
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 0
75119: PUSH
75120: LD_INT 3
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: PUSH
75127: LD_INT 0
75129: PUSH
75130: LD_INT 2
75132: PUSH
75133: EMPTY
75134: LIST
75135: LIST
75136: PUSH
75137: LD_INT 1
75139: PUSH
75140: LD_INT 3
75142: PUSH
75143: EMPTY
75144: LIST
75145: LIST
75146: PUSH
75147: LD_INT 1
75149: PUSH
75150: LD_INT 4
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: LD_INT 0
75159: PUSH
75160: LD_INT 4
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 1
75169: NEG
75170: PUSH
75171: LD_INT 3
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: PUSH
75178: LD_INT 1
75180: NEG
75181: PUSH
75182: LD_INT 2
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: PUSH
75189: LD_INT 2
75191: PUSH
75192: LD_INT 4
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 2
75201: NEG
75202: PUSH
75203: LD_INT 2
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 4
75212: NEG
75213: PUSH
75214: LD_INT 0
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 4
75223: NEG
75224: PUSH
75225: LD_INT 1
75227: NEG
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 3
75235: NEG
75236: PUSH
75237: LD_INT 0
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 3
75246: NEG
75247: PUSH
75248: LD_INT 1
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: PUSH
75255: LD_INT 4
75257: NEG
75258: PUSH
75259: LD_INT 1
75261: PUSH
75262: EMPTY
75263: LIST
75264: LIST
75265: PUSH
75266: LD_INT 5
75268: NEG
75269: PUSH
75270: LD_INT 0
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: PUSH
75277: LD_INT 5
75279: NEG
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 5
75291: NEG
75292: PUSH
75293: LD_INT 2
75295: NEG
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: PUSH
75301: LD_INT 3
75303: NEG
75304: PUSH
75305: LD_INT 2
75307: PUSH
75308: EMPTY
75309: LIST
75310: LIST
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: LIST
75337: LIST
75338: LIST
75339: LIST
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: ST_TO_ADDR
// end ; end ;
75359: GO 75362
75361: POP
// case btype of b_depot , b_warehouse :
75362: LD_VAR 0 1
75366: PUSH
75367: LD_INT 0
75369: DOUBLE
75370: EQUAL
75371: IFTRUE 75381
75373: LD_INT 1
75375: DOUBLE
75376: EQUAL
75377: IFTRUE 75381
75379: GO 75582
75381: POP
// case nation of nation_american :
75382: LD_VAR 0 5
75386: PUSH
75387: LD_INT 1
75389: DOUBLE
75390: EQUAL
75391: IFTRUE 75395
75393: GO 75451
75395: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
75396: LD_ADDR_VAR 0 9
75400: PUSH
75401: LD_VAR 0 11
75405: PUSH
75406: LD_VAR 0 12
75410: PUSH
75411: LD_VAR 0 13
75415: PUSH
75416: LD_VAR 0 14
75420: PUSH
75421: LD_VAR 0 15
75425: PUSH
75426: LD_VAR 0 16
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: LIST
75435: LIST
75436: LIST
75437: LIST
75438: PUSH
75439: LD_VAR 0 4
75443: PUSH
75444: LD_INT 1
75446: PLUS
75447: ARRAY
75448: ST_TO_ADDR
75449: GO 75580
75451: LD_INT 2
75453: DOUBLE
75454: EQUAL
75455: IFTRUE 75459
75457: GO 75515
75459: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
75460: LD_ADDR_VAR 0 9
75464: PUSH
75465: LD_VAR 0 17
75469: PUSH
75470: LD_VAR 0 18
75474: PUSH
75475: LD_VAR 0 19
75479: PUSH
75480: LD_VAR 0 20
75484: PUSH
75485: LD_VAR 0 21
75489: PUSH
75490: LD_VAR 0 22
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: LIST
75501: LIST
75502: PUSH
75503: LD_VAR 0 4
75507: PUSH
75508: LD_INT 1
75510: PLUS
75511: ARRAY
75512: ST_TO_ADDR
75513: GO 75580
75515: LD_INT 3
75517: DOUBLE
75518: EQUAL
75519: IFTRUE 75523
75521: GO 75579
75523: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
75524: LD_ADDR_VAR 0 9
75528: PUSH
75529: LD_VAR 0 23
75533: PUSH
75534: LD_VAR 0 24
75538: PUSH
75539: LD_VAR 0 25
75543: PUSH
75544: LD_VAR 0 26
75548: PUSH
75549: LD_VAR 0 27
75553: PUSH
75554: LD_VAR 0 28
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: LIST
75563: LIST
75564: LIST
75565: LIST
75566: PUSH
75567: LD_VAR 0 4
75571: PUSH
75572: LD_INT 1
75574: PLUS
75575: ARRAY
75576: ST_TO_ADDR
75577: GO 75580
75579: POP
75580: GO 76135
75582: LD_INT 2
75584: DOUBLE
75585: EQUAL
75586: IFTRUE 75596
75588: LD_INT 3
75590: DOUBLE
75591: EQUAL
75592: IFTRUE 75596
75594: GO 75652
75596: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
75597: LD_ADDR_VAR 0 9
75601: PUSH
75602: LD_VAR 0 29
75606: PUSH
75607: LD_VAR 0 30
75611: PUSH
75612: LD_VAR 0 31
75616: PUSH
75617: LD_VAR 0 32
75621: PUSH
75622: LD_VAR 0 33
75626: PUSH
75627: LD_VAR 0 34
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: PUSH
75640: LD_VAR 0 4
75644: PUSH
75645: LD_INT 1
75647: PLUS
75648: ARRAY
75649: ST_TO_ADDR
75650: GO 76135
75652: LD_INT 16
75654: DOUBLE
75655: EQUAL
75656: IFTRUE 75714
75658: LD_INT 17
75660: DOUBLE
75661: EQUAL
75662: IFTRUE 75714
75664: LD_INT 18
75666: DOUBLE
75667: EQUAL
75668: IFTRUE 75714
75670: LD_INT 19
75672: DOUBLE
75673: EQUAL
75674: IFTRUE 75714
75676: LD_INT 22
75678: DOUBLE
75679: EQUAL
75680: IFTRUE 75714
75682: LD_INT 20
75684: DOUBLE
75685: EQUAL
75686: IFTRUE 75714
75688: LD_INT 21
75690: DOUBLE
75691: EQUAL
75692: IFTRUE 75714
75694: LD_INT 23
75696: DOUBLE
75697: EQUAL
75698: IFTRUE 75714
75700: LD_INT 24
75702: DOUBLE
75703: EQUAL
75704: IFTRUE 75714
75706: LD_INT 25
75708: DOUBLE
75709: EQUAL
75710: IFTRUE 75714
75712: GO 75770
75714: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
75715: LD_ADDR_VAR 0 9
75719: PUSH
75720: LD_VAR 0 35
75724: PUSH
75725: LD_VAR 0 36
75729: PUSH
75730: LD_VAR 0 37
75734: PUSH
75735: LD_VAR 0 38
75739: PUSH
75740: LD_VAR 0 39
75744: PUSH
75745: LD_VAR 0 40
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: LIST
75756: LIST
75757: PUSH
75758: LD_VAR 0 4
75762: PUSH
75763: LD_INT 1
75765: PLUS
75766: ARRAY
75767: ST_TO_ADDR
75768: GO 76135
75770: LD_INT 6
75772: DOUBLE
75773: EQUAL
75774: IFTRUE 75826
75776: LD_INT 7
75778: DOUBLE
75779: EQUAL
75780: IFTRUE 75826
75782: LD_INT 8
75784: DOUBLE
75785: EQUAL
75786: IFTRUE 75826
75788: LD_INT 13
75790: DOUBLE
75791: EQUAL
75792: IFTRUE 75826
75794: LD_INT 12
75796: DOUBLE
75797: EQUAL
75798: IFTRUE 75826
75800: LD_INT 15
75802: DOUBLE
75803: EQUAL
75804: IFTRUE 75826
75806: LD_INT 11
75808: DOUBLE
75809: EQUAL
75810: IFTRUE 75826
75812: LD_INT 14
75814: DOUBLE
75815: EQUAL
75816: IFTRUE 75826
75818: LD_INT 10
75820: DOUBLE
75821: EQUAL
75822: IFTRUE 75826
75824: GO 75882
75826: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
75827: LD_ADDR_VAR 0 9
75831: PUSH
75832: LD_VAR 0 41
75836: PUSH
75837: LD_VAR 0 42
75841: PUSH
75842: LD_VAR 0 43
75846: PUSH
75847: LD_VAR 0 44
75851: PUSH
75852: LD_VAR 0 45
75856: PUSH
75857: LD_VAR 0 46
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: LIST
75866: LIST
75867: LIST
75868: LIST
75869: PUSH
75870: LD_VAR 0 4
75874: PUSH
75875: LD_INT 1
75877: PLUS
75878: ARRAY
75879: ST_TO_ADDR
75880: GO 76135
75882: LD_INT 36
75884: DOUBLE
75885: EQUAL
75886: IFTRUE 75890
75888: GO 75946
75890: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
75891: LD_ADDR_VAR 0 9
75895: PUSH
75896: LD_VAR 0 47
75900: PUSH
75901: LD_VAR 0 48
75905: PUSH
75906: LD_VAR 0 49
75910: PUSH
75911: LD_VAR 0 50
75915: PUSH
75916: LD_VAR 0 51
75920: PUSH
75921: LD_VAR 0 52
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: PUSH
75934: LD_VAR 0 4
75938: PUSH
75939: LD_INT 1
75941: PLUS
75942: ARRAY
75943: ST_TO_ADDR
75944: GO 76135
75946: LD_INT 4
75948: DOUBLE
75949: EQUAL
75950: IFTRUE 75972
75952: LD_INT 5
75954: DOUBLE
75955: EQUAL
75956: IFTRUE 75972
75958: LD_INT 34
75960: DOUBLE
75961: EQUAL
75962: IFTRUE 75972
75964: LD_INT 37
75966: DOUBLE
75967: EQUAL
75968: IFTRUE 75972
75970: GO 76028
75972: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
75973: LD_ADDR_VAR 0 9
75977: PUSH
75978: LD_VAR 0 53
75982: PUSH
75983: LD_VAR 0 54
75987: PUSH
75988: LD_VAR 0 55
75992: PUSH
75993: LD_VAR 0 56
75997: PUSH
75998: LD_VAR 0 57
76002: PUSH
76003: LD_VAR 0 58
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: LIST
76012: LIST
76013: LIST
76014: LIST
76015: PUSH
76016: LD_VAR 0 4
76020: PUSH
76021: LD_INT 1
76023: PLUS
76024: ARRAY
76025: ST_TO_ADDR
76026: GO 76135
76028: LD_INT 31
76030: DOUBLE
76031: EQUAL
76032: IFTRUE 76078
76034: LD_INT 32
76036: DOUBLE
76037: EQUAL
76038: IFTRUE 76078
76040: LD_INT 33
76042: DOUBLE
76043: EQUAL
76044: IFTRUE 76078
76046: LD_INT 27
76048: DOUBLE
76049: EQUAL
76050: IFTRUE 76078
76052: LD_INT 26
76054: DOUBLE
76055: EQUAL
76056: IFTRUE 76078
76058: LD_INT 28
76060: DOUBLE
76061: EQUAL
76062: IFTRUE 76078
76064: LD_INT 29
76066: DOUBLE
76067: EQUAL
76068: IFTRUE 76078
76070: LD_INT 30
76072: DOUBLE
76073: EQUAL
76074: IFTRUE 76078
76076: GO 76134
76078: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
76079: LD_ADDR_VAR 0 9
76083: PUSH
76084: LD_VAR 0 59
76088: PUSH
76089: LD_VAR 0 60
76093: PUSH
76094: LD_VAR 0 61
76098: PUSH
76099: LD_VAR 0 62
76103: PUSH
76104: LD_VAR 0 63
76108: PUSH
76109: LD_VAR 0 64
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: LIST
76118: LIST
76119: LIST
76120: LIST
76121: PUSH
76122: LD_VAR 0 4
76126: PUSH
76127: LD_INT 1
76129: PLUS
76130: ARRAY
76131: ST_TO_ADDR
76132: GO 76135
76134: POP
// temp_list2 = [ ] ;
76135: LD_ADDR_VAR 0 10
76139: PUSH
76140: EMPTY
76141: ST_TO_ADDR
// for i in temp_list do
76142: LD_ADDR_VAR 0 8
76146: PUSH
76147: LD_VAR 0 9
76151: PUSH
76152: FOR_IN
76153: IFFALSE 76205
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
76155: LD_ADDR_VAR 0 10
76159: PUSH
76160: LD_VAR 0 10
76164: PUSH
76165: LD_VAR 0 8
76169: PUSH
76170: LD_INT 1
76172: ARRAY
76173: PUSH
76174: LD_VAR 0 2
76178: PLUS
76179: PUSH
76180: LD_VAR 0 8
76184: PUSH
76185: LD_INT 2
76187: ARRAY
76188: PUSH
76189: LD_VAR 0 3
76193: PLUS
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: EMPTY
76200: LIST
76201: ADD
76202: ST_TO_ADDR
76203: GO 76152
76205: POP
76206: POP
// result = temp_list2 ;
76207: LD_ADDR_VAR 0 7
76211: PUSH
76212: LD_VAR 0 10
76216: ST_TO_ADDR
// end ;
76217: LD_VAR 0 7
76221: RET
// export function EnemyInRange ( unit , dist ) ; begin
76222: LD_INT 0
76224: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
76225: LD_ADDR_VAR 0 3
76229: PUSH
76230: LD_VAR 0 1
76234: PPUSH
76235: CALL_OW 255
76239: PPUSH
76240: LD_VAR 0 1
76244: PPUSH
76245: CALL_OW 250
76249: PPUSH
76250: LD_VAR 0 1
76254: PPUSH
76255: CALL_OW 251
76259: PPUSH
76260: LD_VAR 0 2
76264: PPUSH
76265: CALL 49595 0 4
76269: PUSH
76270: LD_INT 4
76272: ARRAY
76273: ST_TO_ADDR
// end ;
76274: LD_VAR 0 3
76278: RET
// export function PlayerSeeMe ( unit ) ; begin
76279: LD_INT 0
76281: PPUSH
// result := See ( your_side , unit ) ;
76282: LD_ADDR_VAR 0 2
76286: PUSH
76287: LD_OWVAR 2
76291: PPUSH
76292: LD_VAR 0 1
76296: PPUSH
76297: CALL_OW 292
76301: ST_TO_ADDR
// end ;
76302: LD_VAR 0 2
76306: RET
// export function ReverseDir ( unit ) ; begin
76307: LD_INT 0
76309: PPUSH
// if not unit then
76310: LD_VAR 0 1
76314: NOT
76315: IFFALSE 76319
// exit ;
76317: GO 76342
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
76319: LD_ADDR_VAR 0 2
76323: PUSH
76324: LD_VAR 0 1
76328: PPUSH
76329: CALL_OW 254
76333: PUSH
76334: LD_INT 3
76336: PLUS
76337: PUSH
76338: LD_INT 6
76340: MOD
76341: ST_TO_ADDR
// end ;
76342: LD_VAR 0 2
76346: RET
// export function ReverseArray ( array ) ; var i ; begin
76347: LD_INT 0
76349: PPUSH
76350: PPUSH
// if not array then
76351: LD_VAR 0 1
76355: NOT
76356: IFFALSE 76360
// exit ;
76358: GO 76415
// result := [ ] ;
76360: LD_ADDR_VAR 0 2
76364: PUSH
76365: EMPTY
76366: ST_TO_ADDR
// for i := array downto 1 do
76367: LD_ADDR_VAR 0 3
76371: PUSH
76372: DOUBLE
76373: LD_VAR 0 1
76377: INC
76378: ST_TO_ADDR
76379: LD_INT 1
76381: PUSH
76382: FOR_DOWNTO
76383: IFFALSE 76413
// result := Join ( result , array [ i ] ) ;
76385: LD_ADDR_VAR 0 2
76389: PUSH
76390: LD_VAR 0 2
76394: PPUSH
76395: LD_VAR 0 1
76399: PUSH
76400: LD_VAR 0 3
76404: ARRAY
76405: PPUSH
76406: CALL 81058 0 2
76410: ST_TO_ADDR
76411: GO 76382
76413: POP
76414: POP
// end ;
76415: LD_VAR 0 2
76419: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
76420: LD_INT 0
76422: PPUSH
76423: PPUSH
76424: PPUSH
76425: PPUSH
76426: PPUSH
76427: PPUSH
// if not unit or not hexes then
76428: LD_VAR 0 1
76432: NOT
76433: PUSH
76434: LD_VAR 0 2
76438: NOT
76439: OR
76440: IFFALSE 76444
// exit ;
76442: GO 76567
// dist := 9999 ;
76444: LD_ADDR_VAR 0 5
76448: PUSH
76449: LD_INT 9999
76451: ST_TO_ADDR
// for i = 1 to hexes do
76452: LD_ADDR_VAR 0 4
76456: PUSH
76457: DOUBLE
76458: LD_INT 1
76460: DEC
76461: ST_TO_ADDR
76462: LD_VAR 0 2
76466: PUSH
76467: FOR_TO
76468: IFFALSE 76555
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
76470: LD_ADDR_VAR 0 6
76474: PUSH
76475: LD_VAR 0 1
76479: PPUSH
76480: LD_VAR 0 2
76484: PUSH
76485: LD_VAR 0 4
76489: ARRAY
76490: PUSH
76491: LD_INT 1
76493: ARRAY
76494: PPUSH
76495: LD_VAR 0 2
76499: PUSH
76500: LD_VAR 0 4
76504: ARRAY
76505: PUSH
76506: LD_INT 2
76508: ARRAY
76509: PPUSH
76510: CALL_OW 297
76514: ST_TO_ADDR
// if tdist < dist then
76515: LD_VAR 0 6
76519: PUSH
76520: LD_VAR 0 5
76524: LESS
76525: IFFALSE 76553
// begin hex := hexes [ i ] ;
76527: LD_ADDR_VAR 0 8
76531: PUSH
76532: LD_VAR 0 2
76536: PUSH
76537: LD_VAR 0 4
76541: ARRAY
76542: ST_TO_ADDR
// dist := tdist ;
76543: LD_ADDR_VAR 0 5
76547: PUSH
76548: LD_VAR 0 6
76552: ST_TO_ADDR
// end ; end ;
76553: GO 76467
76555: POP
76556: POP
// result := hex ;
76557: LD_ADDR_VAR 0 3
76561: PUSH
76562: LD_VAR 0 8
76566: ST_TO_ADDR
// end ;
76567: LD_VAR 0 3
76571: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
76572: LD_INT 0
76574: PPUSH
76575: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
76576: LD_VAR 0 1
76580: NOT
76581: PUSH
76582: LD_VAR 0 1
76586: PUSH
76587: LD_INT 21
76589: PUSH
76590: LD_INT 2
76592: PUSH
76593: EMPTY
76594: LIST
76595: LIST
76596: PUSH
76597: LD_INT 23
76599: PUSH
76600: LD_INT 2
76602: PUSH
76603: EMPTY
76604: LIST
76605: LIST
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PPUSH
76611: CALL_OW 69
76615: IN
76616: NOT
76617: OR
76618: IFFALSE 76622
// exit ;
76620: GO 76669
// for i = 1 to 3 do
76622: LD_ADDR_VAR 0 3
76626: PUSH
76627: DOUBLE
76628: LD_INT 1
76630: DEC
76631: ST_TO_ADDR
76632: LD_INT 3
76634: PUSH
76635: FOR_TO
76636: IFFALSE 76667
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
76638: LD_VAR 0 1
76642: PPUSH
76643: CALL_OW 250
76647: PPUSH
76648: LD_VAR 0 1
76652: PPUSH
76653: CALL_OW 251
76657: PPUSH
76658: LD_INT 1
76660: PPUSH
76661: CALL_OW 453
76665: GO 76635
76667: POP
76668: POP
// end ;
76669: LD_VAR 0 2
76673: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
76674: LD_INT 0
76676: PPUSH
76677: PPUSH
76678: PPUSH
76679: PPUSH
76680: PPUSH
76681: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
76682: LD_VAR 0 1
76686: NOT
76687: PUSH
76688: LD_VAR 0 2
76692: NOT
76693: OR
76694: PUSH
76695: LD_VAR 0 1
76699: PPUSH
76700: CALL_OW 314
76704: OR
76705: IFFALSE 76709
// exit ;
76707: GO 77176
// if GetLives ( i ) < 250 then
76709: LD_VAR 0 4
76713: PPUSH
76714: CALL_OW 256
76718: PUSH
76719: LD_INT 250
76721: LESS
76722: IFFALSE 76735
// begin ComAutodestruct ( i ) ;
76724: LD_VAR 0 4
76728: PPUSH
76729: CALL 76572 0 1
// exit ;
76733: GO 77176
// end ; x := GetX ( enemy_unit ) ;
76735: LD_ADDR_VAR 0 7
76739: PUSH
76740: LD_VAR 0 2
76744: PPUSH
76745: CALL_OW 250
76749: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
76750: LD_ADDR_VAR 0 8
76754: PUSH
76755: LD_VAR 0 2
76759: PPUSH
76760: CALL_OW 251
76764: ST_TO_ADDR
// if not x or not y then
76765: LD_VAR 0 7
76769: NOT
76770: PUSH
76771: LD_VAR 0 8
76775: NOT
76776: OR
76777: IFFALSE 76781
// exit ;
76779: GO 77176
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
76781: LD_ADDR_VAR 0 6
76785: PUSH
76786: LD_VAR 0 7
76790: PPUSH
76791: LD_INT 0
76793: PPUSH
76794: LD_INT 4
76796: PPUSH
76797: CALL_OW 272
76801: PUSH
76802: LD_VAR 0 8
76806: PPUSH
76807: LD_INT 0
76809: PPUSH
76810: LD_INT 4
76812: PPUSH
76813: CALL_OW 273
76817: PUSH
76818: EMPTY
76819: LIST
76820: LIST
76821: PUSH
76822: LD_VAR 0 7
76826: PPUSH
76827: LD_INT 1
76829: PPUSH
76830: LD_INT 4
76832: PPUSH
76833: CALL_OW 272
76837: PUSH
76838: LD_VAR 0 8
76842: PPUSH
76843: LD_INT 1
76845: PPUSH
76846: LD_INT 4
76848: PPUSH
76849: CALL_OW 273
76853: PUSH
76854: EMPTY
76855: LIST
76856: LIST
76857: PUSH
76858: LD_VAR 0 7
76862: PPUSH
76863: LD_INT 2
76865: PPUSH
76866: LD_INT 4
76868: PPUSH
76869: CALL_OW 272
76873: PUSH
76874: LD_VAR 0 8
76878: PPUSH
76879: LD_INT 2
76881: PPUSH
76882: LD_INT 4
76884: PPUSH
76885: CALL_OW 273
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_VAR 0 7
76898: PPUSH
76899: LD_INT 3
76901: PPUSH
76902: LD_INT 4
76904: PPUSH
76905: CALL_OW 272
76909: PUSH
76910: LD_VAR 0 8
76914: PPUSH
76915: LD_INT 3
76917: PPUSH
76918: LD_INT 4
76920: PPUSH
76921: CALL_OW 273
76925: PUSH
76926: EMPTY
76927: LIST
76928: LIST
76929: PUSH
76930: LD_VAR 0 7
76934: PPUSH
76935: LD_INT 4
76937: PPUSH
76938: LD_INT 4
76940: PPUSH
76941: CALL_OW 272
76945: PUSH
76946: LD_VAR 0 8
76950: PPUSH
76951: LD_INT 4
76953: PPUSH
76954: LD_INT 4
76956: PPUSH
76957: CALL_OW 273
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: LD_VAR 0 7
76970: PPUSH
76971: LD_INT 5
76973: PPUSH
76974: LD_INT 4
76976: PPUSH
76977: CALL_OW 272
76981: PUSH
76982: LD_VAR 0 8
76986: PPUSH
76987: LD_INT 5
76989: PPUSH
76990: LD_INT 4
76992: PPUSH
76993: CALL_OW 273
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: EMPTY
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: ST_TO_ADDR
// for i = tmp downto 1 do
77010: LD_ADDR_VAR 0 4
77014: PUSH
77015: DOUBLE
77016: LD_VAR 0 6
77020: INC
77021: ST_TO_ADDR
77022: LD_INT 1
77024: PUSH
77025: FOR_DOWNTO
77026: IFFALSE 77127
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
77028: LD_VAR 0 6
77032: PUSH
77033: LD_VAR 0 4
77037: ARRAY
77038: PUSH
77039: LD_INT 1
77041: ARRAY
77042: PPUSH
77043: LD_VAR 0 6
77047: PUSH
77048: LD_VAR 0 4
77052: ARRAY
77053: PUSH
77054: LD_INT 2
77056: ARRAY
77057: PPUSH
77058: CALL_OW 488
77062: NOT
77063: PUSH
77064: LD_VAR 0 6
77068: PUSH
77069: LD_VAR 0 4
77073: ARRAY
77074: PUSH
77075: LD_INT 1
77077: ARRAY
77078: PPUSH
77079: LD_VAR 0 6
77083: PUSH
77084: LD_VAR 0 4
77088: ARRAY
77089: PUSH
77090: LD_INT 2
77092: ARRAY
77093: PPUSH
77094: CALL_OW 428
77098: PUSH
77099: LD_INT 0
77101: NONEQUAL
77102: OR
77103: IFFALSE 77125
// tmp := Delete ( tmp , i ) ;
77105: LD_ADDR_VAR 0 6
77109: PUSH
77110: LD_VAR 0 6
77114: PPUSH
77115: LD_VAR 0 4
77119: PPUSH
77120: CALL_OW 3
77124: ST_TO_ADDR
77125: GO 77025
77127: POP
77128: POP
// j := GetClosestHex ( unit , tmp ) ;
77129: LD_ADDR_VAR 0 5
77133: PUSH
77134: LD_VAR 0 1
77138: PPUSH
77139: LD_VAR 0 6
77143: PPUSH
77144: CALL 76420 0 2
77148: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
77149: LD_VAR 0 1
77153: PPUSH
77154: LD_VAR 0 5
77158: PUSH
77159: LD_INT 1
77161: ARRAY
77162: PPUSH
77163: LD_VAR 0 5
77167: PUSH
77168: LD_INT 2
77170: ARRAY
77171: PPUSH
77172: CALL_OW 111
// end ;
77176: LD_VAR 0 3
77180: RET
// export function PrepareApemanSoldier ( ) ; begin
77181: LD_INT 0
77183: PPUSH
// uc_nation := 0 ;
77184: LD_ADDR_OWVAR 21
77188: PUSH
77189: LD_INT 0
77191: ST_TO_ADDR
// hc_sex := sex_male ;
77192: LD_ADDR_OWVAR 27
77196: PUSH
77197: LD_INT 1
77199: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
77200: LD_ADDR_OWVAR 28
77204: PUSH
77205: LD_INT 15
77207: ST_TO_ADDR
// hc_gallery :=  ;
77208: LD_ADDR_OWVAR 33
77212: PUSH
77213: LD_STRING 
77215: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77216: LD_ADDR_OWVAR 31
77220: PUSH
77221: LD_INT 0
77223: PPUSH
77224: LD_INT 3
77226: PPUSH
77227: CALL_OW 12
77231: PUSH
77232: LD_INT 0
77234: PPUSH
77235: LD_INT 3
77237: PPUSH
77238: CALL_OW 12
77242: PUSH
77243: LD_INT 0
77245: PUSH
77246: LD_INT 0
77248: PUSH
77249: EMPTY
77250: LIST
77251: LIST
77252: LIST
77253: LIST
77254: ST_TO_ADDR
// end ;
77255: LD_VAR 0 1
77259: RET
// export function PrepareApemanEngineer ( ) ; begin
77260: LD_INT 0
77262: PPUSH
// uc_nation := 0 ;
77263: LD_ADDR_OWVAR 21
77267: PUSH
77268: LD_INT 0
77270: ST_TO_ADDR
// hc_sex := sex_male ;
77271: LD_ADDR_OWVAR 27
77275: PUSH
77276: LD_INT 1
77278: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
77279: LD_ADDR_OWVAR 28
77283: PUSH
77284: LD_INT 16
77286: ST_TO_ADDR
// hc_gallery :=  ;
77287: LD_ADDR_OWVAR 33
77291: PUSH
77292: LD_STRING 
77294: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77295: LD_ADDR_OWVAR 31
77299: PUSH
77300: LD_INT 0
77302: PPUSH
77303: LD_INT 3
77305: PPUSH
77306: CALL_OW 12
77310: PUSH
77311: LD_INT 0
77313: PPUSH
77314: LD_INT 3
77316: PPUSH
77317: CALL_OW 12
77321: PUSH
77322: LD_INT 0
77324: PUSH
77325: LD_INT 0
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: LIST
77332: LIST
77333: ST_TO_ADDR
// end ;
77334: LD_VAR 0 1
77338: RET
// export function PrepareApeman ( agressivity ) ; begin
77339: LD_INT 0
77341: PPUSH
// uc_side := 0 ;
77342: LD_ADDR_OWVAR 20
77346: PUSH
77347: LD_INT 0
77349: ST_TO_ADDR
// uc_nation := 0 ;
77350: LD_ADDR_OWVAR 21
77354: PUSH
77355: LD_INT 0
77357: ST_TO_ADDR
// hc_sex := sex_male ;
77358: LD_ADDR_OWVAR 27
77362: PUSH
77363: LD_INT 1
77365: ST_TO_ADDR
// hc_class := class_apeman ;
77366: LD_ADDR_OWVAR 28
77370: PUSH
77371: LD_INT 12
77373: ST_TO_ADDR
// hc_gallery :=  ;
77374: LD_ADDR_OWVAR 33
77378: PUSH
77379: LD_STRING 
77381: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77382: LD_ADDR_OWVAR 35
77386: PUSH
77387: LD_VAR 0 1
77391: NEG
77392: PPUSH
77393: LD_VAR 0 1
77397: PPUSH
77398: CALL_OW 12
77402: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
77403: LD_ADDR_OWVAR 31
77407: PUSH
77408: LD_INT 0
77410: PPUSH
77411: LD_INT 3
77413: PPUSH
77414: CALL_OW 12
77418: PUSH
77419: LD_INT 0
77421: PPUSH
77422: LD_INT 3
77424: PPUSH
77425: CALL_OW 12
77429: PUSH
77430: LD_INT 0
77432: PUSH
77433: LD_INT 0
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: ST_TO_ADDR
// end ;
77442: LD_VAR 0 2
77446: RET
// export function PrepareTiger ( agressivity ) ; begin
77447: LD_INT 0
77449: PPUSH
// uc_side := 0 ;
77450: LD_ADDR_OWVAR 20
77454: PUSH
77455: LD_INT 0
77457: ST_TO_ADDR
// uc_nation := 0 ;
77458: LD_ADDR_OWVAR 21
77462: PUSH
77463: LD_INT 0
77465: ST_TO_ADDR
// hc_class := class_tiger ;
77466: LD_ADDR_OWVAR 28
77470: PUSH
77471: LD_INT 14
77473: ST_TO_ADDR
// hc_gallery :=  ;
77474: LD_ADDR_OWVAR 33
77478: PUSH
77479: LD_STRING 
77481: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
77482: LD_ADDR_OWVAR 35
77486: PUSH
77487: LD_VAR 0 1
77491: NEG
77492: PPUSH
77493: LD_VAR 0 1
77497: PPUSH
77498: CALL_OW 12
77502: ST_TO_ADDR
// end ;
77503: LD_VAR 0 2
77507: RET
// export function PrepareEnchidna ( ) ; begin
77508: LD_INT 0
77510: PPUSH
// uc_side := 0 ;
77511: LD_ADDR_OWVAR 20
77515: PUSH
77516: LD_INT 0
77518: ST_TO_ADDR
// uc_nation := 0 ;
77519: LD_ADDR_OWVAR 21
77523: PUSH
77524: LD_INT 0
77526: ST_TO_ADDR
// hc_class := class_baggie ;
77527: LD_ADDR_OWVAR 28
77531: PUSH
77532: LD_INT 13
77534: ST_TO_ADDR
// hc_gallery :=  ;
77535: LD_ADDR_OWVAR 33
77539: PUSH
77540: LD_STRING 
77542: ST_TO_ADDR
// end ;
77543: LD_VAR 0 1
77547: RET
// export function PrepareFrog ( ) ; begin
77548: LD_INT 0
77550: PPUSH
// uc_side := 0 ;
77551: LD_ADDR_OWVAR 20
77555: PUSH
77556: LD_INT 0
77558: ST_TO_ADDR
// uc_nation := 0 ;
77559: LD_ADDR_OWVAR 21
77563: PUSH
77564: LD_INT 0
77566: ST_TO_ADDR
// hc_class := class_frog ;
77567: LD_ADDR_OWVAR 28
77571: PUSH
77572: LD_INT 19
77574: ST_TO_ADDR
// hc_gallery :=  ;
77575: LD_ADDR_OWVAR 33
77579: PUSH
77580: LD_STRING 
77582: ST_TO_ADDR
// end ;
77583: LD_VAR 0 1
77587: RET
// export function PrepareFish ( ) ; begin
77588: LD_INT 0
77590: PPUSH
// uc_side := 0 ;
77591: LD_ADDR_OWVAR 20
77595: PUSH
77596: LD_INT 0
77598: ST_TO_ADDR
// uc_nation := 0 ;
77599: LD_ADDR_OWVAR 21
77603: PUSH
77604: LD_INT 0
77606: ST_TO_ADDR
// hc_class := class_fish ;
77607: LD_ADDR_OWVAR 28
77611: PUSH
77612: LD_INT 20
77614: ST_TO_ADDR
// hc_gallery :=  ;
77615: LD_ADDR_OWVAR 33
77619: PUSH
77620: LD_STRING 
77622: ST_TO_ADDR
// end ;
77623: LD_VAR 0 1
77627: RET
// export function PrepareBird ( ) ; begin
77628: LD_INT 0
77630: PPUSH
// uc_side := 0 ;
77631: LD_ADDR_OWVAR 20
77635: PUSH
77636: LD_INT 0
77638: ST_TO_ADDR
// uc_nation := 0 ;
77639: LD_ADDR_OWVAR 21
77643: PUSH
77644: LD_INT 0
77646: ST_TO_ADDR
// hc_class := class_phororhacos ;
77647: LD_ADDR_OWVAR 28
77651: PUSH
77652: LD_INT 18
77654: ST_TO_ADDR
// hc_gallery :=  ;
77655: LD_ADDR_OWVAR 33
77659: PUSH
77660: LD_STRING 
77662: ST_TO_ADDR
// end ;
77663: LD_VAR 0 1
77667: RET
// export function PrepareHorse ( ) ; begin
77668: LD_INT 0
77670: PPUSH
// uc_side := 0 ;
77671: LD_ADDR_OWVAR 20
77675: PUSH
77676: LD_INT 0
77678: ST_TO_ADDR
// uc_nation := 0 ;
77679: LD_ADDR_OWVAR 21
77683: PUSH
77684: LD_INT 0
77686: ST_TO_ADDR
// hc_class := class_horse ;
77687: LD_ADDR_OWVAR 28
77691: PUSH
77692: LD_INT 21
77694: ST_TO_ADDR
// hc_gallery :=  ;
77695: LD_ADDR_OWVAR 33
77699: PUSH
77700: LD_STRING 
77702: ST_TO_ADDR
// end ;
77703: LD_VAR 0 1
77707: RET
// export function PrepareMastodont ( ) ; begin
77708: LD_INT 0
77710: PPUSH
// uc_side := 0 ;
77711: LD_ADDR_OWVAR 20
77715: PUSH
77716: LD_INT 0
77718: ST_TO_ADDR
// uc_nation := 0 ;
77719: LD_ADDR_OWVAR 21
77723: PUSH
77724: LD_INT 0
77726: ST_TO_ADDR
// vc_chassis := class_mastodont ;
77727: LD_ADDR_OWVAR 37
77731: PUSH
77732: LD_INT 31
77734: ST_TO_ADDR
// vc_control := control_rider ;
77735: LD_ADDR_OWVAR 38
77739: PUSH
77740: LD_INT 4
77742: ST_TO_ADDR
// end ;
77743: LD_VAR 0 1
77747: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
77748: LD_INT 0
77750: PPUSH
77751: PPUSH
77752: PPUSH
// uc_side = 0 ;
77753: LD_ADDR_OWVAR 20
77757: PUSH
77758: LD_INT 0
77760: ST_TO_ADDR
// uc_nation = 0 ;
77761: LD_ADDR_OWVAR 21
77765: PUSH
77766: LD_INT 0
77768: ST_TO_ADDR
// InitHc_All ( ) ;
77769: CALL_OW 584
// InitVc ;
77773: CALL_OW 20
// if mastodonts then
77777: LD_VAR 0 6
77781: IFFALSE 77848
// for i = 1 to mastodonts do
77783: LD_ADDR_VAR 0 11
77787: PUSH
77788: DOUBLE
77789: LD_INT 1
77791: DEC
77792: ST_TO_ADDR
77793: LD_VAR 0 6
77797: PUSH
77798: FOR_TO
77799: IFFALSE 77846
// begin vc_chassis := 31 ;
77801: LD_ADDR_OWVAR 37
77805: PUSH
77806: LD_INT 31
77808: ST_TO_ADDR
// vc_control := control_rider ;
77809: LD_ADDR_OWVAR 38
77813: PUSH
77814: LD_INT 4
77816: ST_TO_ADDR
// animal := CreateVehicle ;
77817: LD_ADDR_VAR 0 12
77821: PUSH
77822: CALL_OW 45
77826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77827: LD_VAR 0 12
77831: PPUSH
77832: LD_VAR 0 8
77836: PPUSH
77837: LD_INT 0
77839: PPUSH
77840: CALL 79976 0 3
// end ;
77844: GO 77798
77846: POP
77847: POP
// if horses then
77848: LD_VAR 0 5
77852: IFFALSE 77919
// for i = 1 to horses do
77854: LD_ADDR_VAR 0 11
77858: PUSH
77859: DOUBLE
77860: LD_INT 1
77862: DEC
77863: ST_TO_ADDR
77864: LD_VAR 0 5
77868: PUSH
77869: FOR_TO
77870: IFFALSE 77917
// begin hc_class := 21 ;
77872: LD_ADDR_OWVAR 28
77876: PUSH
77877: LD_INT 21
77879: ST_TO_ADDR
// hc_gallery :=  ;
77880: LD_ADDR_OWVAR 33
77884: PUSH
77885: LD_STRING 
77887: ST_TO_ADDR
// animal := CreateHuman ;
77888: LD_ADDR_VAR 0 12
77892: PUSH
77893: CALL_OW 44
77897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77898: LD_VAR 0 12
77902: PPUSH
77903: LD_VAR 0 8
77907: PPUSH
77908: LD_INT 0
77910: PPUSH
77911: CALL 79976 0 3
// end ;
77915: GO 77869
77917: POP
77918: POP
// if birds then
77919: LD_VAR 0 1
77923: IFFALSE 77990
// for i = 1 to birds do
77925: LD_ADDR_VAR 0 11
77929: PUSH
77930: DOUBLE
77931: LD_INT 1
77933: DEC
77934: ST_TO_ADDR
77935: LD_VAR 0 1
77939: PUSH
77940: FOR_TO
77941: IFFALSE 77988
// begin hc_class := 18 ;
77943: LD_ADDR_OWVAR 28
77947: PUSH
77948: LD_INT 18
77950: ST_TO_ADDR
// hc_gallery =  ;
77951: LD_ADDR_OWVAR 33
77955: PUSH
77956: LD_STRING 
77958: ST_TO_ADDR
// animal := CreateHuman ;
77959: LD_ADDR_VAR 0 12
77963: PUSH
77964: CALL_OW 44
77968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
77969: LD_VAR 0 12
77973: PPUSH
77974: LD_VAR 0 8
77978: PPUSH
77979: LD_INT 0
77981: PPUSH
77982: CALL 79976 0 3
// end ;
77986: GO 77940
77988: POP
77989: POP
// if tigers then
77990: LD_VAR 0 2
77994: IFFALSE 78078
// for i = 1 to tigers do
77996: LD_ADDR_VAR 0 11
78000: PUSH
78001: DOUBLE
78002: LD_INT 1
78004: DEC
78005: ST_TO_ADDR
78006: LD_VAR 0 2
78010: PUSH
78011: FOR_TO
78012: IFFALSE 78076
// begin hc_class = class_tiger ;
78014: LD_ADDR_OWVAR 28
78018: PUSH
78019: LD_INT 14
78021: ST_TO_ADDR
// hc_gallery =  ;
78022: LD_ADDR_OWVAR 33
78026: PUSH
78027: LD_STRING 
78029: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
78030: LD_ADDR_OWVAR 35
78034: PUSH
78035: LD_INT 7
78037: NEG
78038: PPUSH
78039: LD_INT 7
78041: PPUSH
78042: CALL_OW 12
78046: ST_TO_ADDR
// animal := CreateHuman ;
78047: LD_ADDR_VAR 0 12
78051: PUSH
78052: CALL_OW 44
78056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78057: LD_VAR 0 12
78061: PPUSH
78062: LD_VAR 0 8
78066: PPUSH
78067: LD_INT 0
78069: PPUSH
78070: CALL 79976 0 3
// end ;
78074: GO 78011
78076: POP
78077: POP
// if apemans then
78078: LD_VAR 0 3
78082: IFFALSE 78205
// for i = 1 to apemans do
78084: LD_ADDR_VAR 0 11
78088: PUSH
78089: DOUBLE
78090: LD_INT 1
78092: DEC
78093: ST_TO_ADDR
78094: LD_VAR 0 3
78098: PUSH
78099: FOR_TO
78100: IFFALSE 78203
// begin hc_class = class_apeman ;
78102: LD_ADDR_OWVAR 28
78106: PUSH
78107: LD_INT 12
78109: ST_TO_ADDR
// hc_gallery =  ;
78110: LD_ADDR_OWVAR 33
78114: PUSH
78115: LD_STRING 
78117: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
78118: LD_ADDR_OWVAR 35
78122: PUSH
78123: LD_INT 2
78125: NEG
78126: PPUSH
78127: LD_INT 2
78129: PPUSH
78130: CALL_OW 12
78134: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
78135: LD_ADDR_OWVAR 31
78139: PUSH
78140: LD_INT 1
78142: PPUSH
78143: LD_INT 3
78145: PPUSH
78146: CALL_OW 12
78150: PUSH
78151: LD_INT 1
78153: PPUSH
78154: LD_INT 3
78156: PPUSH
78157: CALL_OW 12
78161: PUSH
78162: LD_INT 0
78164: PUSH
78165: LD_INT 0
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: ST_TO_ADDR
// animal := CreateHuman ;
78174: LD_ADDR_VAR 0 12
78178: PUSH
78179: CALL_OW 44
78183: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78184: LD_VAR 0 12
78188: PPUSH
78189: LD_VAR 0 8
78193: PPUSH
78194: LD_INT 0
78196: PPUSH
78197: CALL 79976 0 3
// end ;
78201: GO 78099
78203: POP
78204: POP
// if enchidnas then
78205: LD_VAR 0 4
78209: IFFALSE 78276
// for i = 1 to enchidnas do
78211: LD_ADDR_VAR 0 11
78215: PUSH
78216: DOUBLE
78217: LD_INT 1
78219: DEC
78220: ST_TO_ADDR
78221: LD_VAR 0 4
78225: PUSH
78226: FOR_TO
78227: IFFALSE 78274
// begin hc_class = 13 ;
78229: LD_ADDR_OWVAR 28
78233: PUSH
78234: LD_INT 13
78236: ST_TO_ADDR
// hc_gallery =  ;
78237: LD_ADDR_OWVAR 33
78241: PUSH
78242: LD_STRING 
78244: ST_TO_ADDR
// animal := CreateHuman ;
78245: LD_ADDR_VAR 0 12
78249: PUSH
78250: CALL_OW 44
78254: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
78255: LD_VAR 0 12
78259: PPUSH
78260: LD_VAR 0 8
78264: PPUSH
78265: LD_INT 0
78267: PPUSH
78268: CALL 79976 0 3
// end ;
78272: GO 78226
78274: POP
78275: POP
// if fishes then
78276: LD_VAR 0 7
78280: IFFALSE 78347
// for i = 1 to fishes do
78282: LD_ADDR_VAR 0 11
78286: PUSH
78287: DOUBLE
78288: LD_INT 1
78290: DEC
78291: ST_TO_ADDR
78292: LD_VAR 0 7
78296: PUSH
78297: FOR_TO
78298: IFFALSE 78345
// begin hc_class = 20 ;
78300: LD_ADDR_OWVAR 28
78304: PUSH
78305: LD_INT 20
78307: ST_TO_ADDR
// hc_gallery =  ;
78308: LD_ADDR_OWVAR 33
78312: PUSH
78313: LD_STRING 
78315: ST_TO_ADDR
// animal := CreateHuman ;
78316: LD_ADDR_VAR 0 12
78320: PUSH
78321: CALL_OW 44
78325: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
78326: LD_VAR 0 12
78330: PPUSH
78331: LD_VAR 0 9
78335: PPUSH
78336: LD_INT 0
78338: PPUSH
78339: CALL 79976 0 3
// end ;
78343: GO 78297
78345: POP
78346: POP
// end ;
78347: LD_VAR 0 10
78351: RET
// export function WantHeal ( sci , unit ) ; begin
78352: LD_INT 0
78354: PPUSH
// if GetTaskList ( sci ) > 0 then
78355: LD_VAR 0 1
78359: PPUSH
78360: CALL_OW 437
78364: PUSH
78365: LD_INT 0
78367: GREATER
78368: IFFALSE 78438
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
78370: LD_VAR 0 1
78374: PPUSH
78375: CALL_OW 437
78379: PUSH
78380: LD_INT 1
78382: ARRAY
78383: PUSH
78384: LD_INT 1
78386: ARRAY
78387: PUSH
78388: LD_STRING l
78390: EQUAL
78391: PUSH
78392: LD_VAR 0 1
78396: PPUSH
78397: CALL_OW 437
78401: PUSH
78402: LD_INT 1
78404: ARRAY
78405: PUSH
78406: LD_INT 4
78408: ARRAY
78409: PUSH
78410: LD_VAR 0 2
78414: EQUAL
78415: AND
78416: IFFALSE 78428
// result := true else
78418: LD_ADDR_VAR 0 3
78422: PUSH
78423: LD_INT 1
78425: ST_TO_ADDR
78426: GO 78436
// result := false ;
78428: LD_ADDR_VAR 0 3
78432: PUSH
78433: LD_INT 0
78435: ST_TO_ADDR
// end else
78436: GO 78446
// result := false ;
78438: LD_ADDR_VAR 0 3
78442: PUSH
78443: LD_INT 0
78445: ST_TO_ADDR
// end ;
78446: LD_VAR 0 3
78450: RET
// export function HealTarget ( sci ) ; begin
78451: LD_INT 0
78453: PPUSH
// if not sci then
78454: LD_VAR 0 1
78458: NOT
78459: IFFALSE 78463
// exit ;
78461: GO 78528
// result := 0 ;
78463: LD_ADDR_VAR 0 2
78467: PUSH
78468: LD_INT 0
78470: ST_TO_ADDR
// if GetTaskList ( sci ) then
78471: LD_VAR 0 1
78475: PPUSH
78476: CALL_OW 437
78480: IFFALSE 78528
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
78482: LD_VAR 0 1
78486: PPUSH
78487: CALL_OW 437
78491: PUSH
78492: LD_INT 1
78494: ARRAY
78495: PUSH
78496: LD_INT 1
78498: ARRAY
78499: PUSH
78500: LD_STRING l
78502: EQUAL
78503: IFFALSE 78528
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
78505: LD_ADDR_VAR 0 2
78509: PUSH
78510: LD_VAR 0 1
78514: PPUSH
78515: CALL_OW 437
78519: PUSH
78520: LD_INT 1
78522: ARRAY
78523: PUSH
78524: LD_INT 4
78526: ARRAY
78527: ST_TO_ADDR
// end ;
78528: LD_VAR 0 2
78532: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
78533: LD_INT 0
78535: PPUSH
78536: PPUSH
78537: PPUSH
78538: PPUSH
// if not base_units then
78539: LD_VAR 0 1
78543: NOT
78544: IFFALSE 78548
// exit ;
78546: GO 78635
// result := false ;
78548: LD_ADDR_VAR 0 2
78552: PUSH
78553: LD_INT 0
78555: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
78556: LD_ADDR_VAR 0 5
78560: PUSH
78561: LD_VAR 0 1
78565: PPUSH
78566: LD_INT 21
78568: PUSH
78569: LD_INT 3
78571: PUSH
78572: EMPTY
78573: LIST
78574: LIST
78575: PPUSH
78576: CALL_OW 72
78580: ST_TO_ADDR
// if not tmp then
78581: LD_VAR 0 5
78585: NOT
78586: IFFALSE 78590
// exit ;
78588: GO 78635
// for i in tmp do
78590: LD_ADDR_VAR 0 3
78594: PUSH
78595: LD_VAR 0 5
78599: PUSH
78600: FOR_IN
78601: IFFALSE 78633
// begin result := EnemyInRange ( i , 22 ) ;
78603: LD_ADDR_VAR 0 2
78607: PUSH
78608: LD_VAR 0 3
78612: PPUSH
78613: LD_INT 22
78615: PPUSH
78616: CALL 76222 0 2
78620: ST_TO_ADDR
// if result then
78621: LD_VAR 0 2
78625: IFFALSE 78631
// exit ;
78627: POP
78628: POP
78629: GO 78635
// end ;
78631: GO 78600
78633: POP
78634: POP
// end ;
78635: LD_VAR 0 2
78639: RET
// export function FilterByTag ( units , tag ) ; begin
78640: LD_INT 0
78642: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
78643: LD_ADDR_VAR 0 3
78647: PUSH
78648: LD_VAR 0 1
78652: PPUSH
78653: LD_INT 120
78655: PUSH
78656: LD_VAR 0 2
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PPUSH
78665: CALL_OW 72
78669: ST_TO_ADDR
// end ;
78670: LD_VAR 0 3
78674: RET
// export function IsDriver ( un ) ; begin
78675: LD_INT 0
78677: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
78678: LD_ADDR_VAR 0 2
78682: PUSH
78683: LD_VAR 0 1
78687: PUSH
78688: LD_INT 55
78690: PUSH
78691: EMPTY
78692: LIST
78693: PPUSH
78694: CALL_OW 69
78698: IN
78699: ST_TO_ADDR
// end ;
78700: LD_VAR 0 2
78704: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
78705: LD_INT 0
78707: PPUSH
78708: PPUSH
// list := [ ] ;
78709: LD_ADDR_VAR 0 5
78713: PUSH
78714: EMPTY
78715: ST_TO_ADDR
// case d of 0 :
78716: LD_VAR 0 3
78720: PUSH
78721: LD_INT 0
78723: DOUBLE
78724: EQUAL
78725: IFTRUE 78729
78727: GO 78862
78729: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
78730: LD_ADDR_VAR 0 5
78734: PUSH
78735: LD_VAR 0 1
78739: PUSH
78740: LD_INT 4
78742: MINUS
78743: PUSH
78744: LD_VAR 0 2
78748: PUSH
78749: LD_INT 4
78751: MINUS
78752: PUSH
78753: LD_INT 2
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: LIST
78760: PUSH
78761: LD_VAR 0 1
78765: PUSH
78766: LD_INT 3
78768: MINUS
78769: PUSH
78770: LD_VAR 0 2
78774: PUSH
78775: LD_INT 1
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: LIST
78782: PUSH
78783: LD_VAR 0 1
78787: PUSH
78788: LD_INT 4
78790: PLUS
78791: PUSH
78792: LD_VAR 0 2
78796: PUSH
78797: LD_INT 4
78799: PUSH
78800: EMPTY
78801: LIST
78802: LIST
78803: LIST
78804: PUSH
78805: LD_VAR 0 1
78809: PUSH
78810: LD_INT 3
78812: PLUS
78813: PUSH
78814: LD_VAR 0 2
78818: PUSH
78819: LD_INT 3
78821: PLUS
78822: PUSH
78823: LD_INT 5
78825: PUSH
78826: EMPTY
78827: LIST
78828: LIST
78829: LIST
78830: PUSH
78831: LD_VAR 0 1
78835: PUSH
78836: LD_VAR 0 2
78840: PUSH
78841: LD_INT 4
78843: PLUS
78844: PUSH
78845: LD_INT 0
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: LIST
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: LIST
78857: LIST
78858: LIST
78859: ST_TO_ADDR
// end ; 1 :
78860: GO 79560
78862: LD_INT 1
78864: DOUBLE
78865: EQUAL
78866: IFTRUE 78870
78868: GO 79003
78870: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
78871: LD_ADDR_VAR 0 5
78875: PUSH
78876: LD_VAR 0 1
78880: PUSH
78881: LD_VAR 0 2
78885: PUSH
78886: LD_INT 4
78888: MINUS
78889: PUSH
78890: LD_INT 3
78892: PUSH
78893: EMPTY
78894: LIST
78895: LIST
78896: LIST
78897: PUSH
78898: LD_VAR 0 1
78902: PUSH
78903: LD_INT 3
78905: MINUS
78906: PUSH
78907: LD_VAR 0 2
78911: PUSH
78912: LD_INT 3
78914: MINUS
78915: PUSH
78916: LD_INT 2
78918: PUSH
78919: EMPTY
78920: LIST
78921: LIST
78922: LIST
78923: PUSH
78924: LD_VAR 0 1
78928: PUSH
78929: LD_INT 4
78931: MINUS
78932: PUSH
78933: LD_VAR 0 2
78937: PUSH
78938: LD_INT 1
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: LIST
78945: PUSH
78946: LD_VAR 0 1
78950: PUSH
78951: LD_VAR 0 2
78955: PUSH
78956: LD_INT 3
78958: PLUS
78959: PUSH
78960: LD_INT 0
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: LIST
78967: PUSH
78968: LD_VAR 0 1
78972: PUSH
78973: LD_INT 4
78975: PLUS
78976: PUSH
78977: LD_VAR 0 2
78981: PUSH
78982: LD_INT 4
78984: PLUS
78985: PUSH
78986: LD_INT 5
78988: PUSH
78989: EMPTY
78990: LIST
78991: LIST
78992: LIST
78993: PUSH
78994: EMPTY
78995: LIST
78996: LIST
78997: LIST
78998: LIST
78999: LIST
79000: ST_TO_ADDR
// end ; 2 :
79001: GO 79560
79003: LD_INT 2
79005: DOUBLE
79006: EQUAL
79007: IFTRUE 79011
79009: GO 79140
79011: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
79012: LD_ADDR_VAR 0 5
79016: PUSH
79017: LD_VAR 0 1
79021: PUSH
79022: LD_VAR 0 2
79026: PUSH
79027: LD_INT 3
79029: MINUS
79030: PUSH
79031: LD_INT 3
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: LIST
79038: PUSH
79039: LD_VAR 0 1
79043: PUSH
79044: LD_INT 4
79046: PLUS
79047: PUSH
79048: LD_VAR 0 2
79052: PUSH
79053: LD_INT 4
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: LIST
79060: PUSH
79061: LD_VAR 0 1
79065: PUSH
79066: LD_VAR 0 2
79070: PUSH
79071: LD_INT 4
79073: PLUS
79074: PUSH
79075: LD_INT 0
79077: PUSH
79078: EMPTY
79079: LIST
79080: LIST
79081: LIST
79082: PUSH
79083: LD_VAR 0 1
79087: PUSH
79088: LD_INT 3
79090: MINUS
79091: PUSH
79092: LD_VAR 0 2
79096: PUSH
79097: LD_INT 1
79099: PUSH
79100: EMPTY
79101: LIST
79102: LIST
79103: LIST
79104: PUSH
79105: LD_VAR 0 1
79109: PUSH
79110: LD_INT 4
79112: MINUS
79113: PUSH
79114: LD_VAR 0 2
79118: PUSH
79119: LD_INT 4
79121: MINUS
79122: PUSH
79123: LD_INT 2
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: LIST
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: LIST
79135: LIST
79136: LIST
79137: ST_TO_ADDR
// end ; 3 :
79138: GO 79560
79140: LD_INT 3
79142: DOUBLE
79143: EQUAL
79144: IFTRUE 79148
79146: GO 79281
79148: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
79149: LD_ADDR_VAR 0 5
79153: PUSH
79154: LD_VAR 0 1
79158: PUSH
79159: LD_INT 3
79161: PLUS
79162: PUSH
79163: LD_VAR 0 2
79167: PUSH
79168: LD_INT 4
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: LIST
79175: PUSH
79176: LD_VAR 0 1
79180: PUSH
79181: LD_INT 4
79183: PLUS
79184: PUSH
79185: LD_VAR 0 2
79189: PUSH
79190: LD_INT 4
79192: PLUS
79193: PUSH
79194: LD_INT 5
79196: PUSH
79197: EMPTY
79198: LIST
79199: LIST
79200: LIST
79201: PUSH
79202: LD_VAR 0 1
79206: PUSH
79207: LD_INT 4
79209: MINUS
79210: PUSH
79211: LD_VAR 0 2
79215: PUSH
79216: LD_INT 1
79218: PUSH
79219: EMPTY
79220: LIST
79221: LIST
79222: LIST
79223: PUSH
79224: LD_VAR 0 1
79228: PUSH
79229: LD_VAR 0 2
79233: PUSH
79234: LD_INT 4
79236: MINUS
79237: PUSH
79238: LD_INT 3
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: LIST
79245: PUSH
79246: LD_VAR 0 1
79250: PUSH
79251: LD_INT 3
79253: MINUS
79254: PUSH
79255: LD_VAR 0 2
79259: PUSH
79260: LD_INT 3
79262: MINUS
79263: PUSH
79264: LD_INT 2
79266: PUSH
79267: EMPTY
79268: LIST
79269: LIST
79270: LIST
79271: PUSH
79272: EMPTY
79273: LIST
79274: LIST
79275: LIST
79276: LIST
79277: LIST
79278: ST_TO_ADDR
// end ; 4 :
79279: GO 79560
79281: LD_INT 4
79283: DOUBLE
79284: EQUAL
79285: IFTRUE 79289
79287: GO 79422
79289: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
79290: LD_ADDR_VAR 0 5
79294: PUSH
79295: LD_VAR 0 1
79299: PUSH
79300: LD_VAR 0 2
79304: PUSH
79305: LD_INT 4
79307: PLUS
79308: PUSH
79309: LD_INT 0
79311: PUSH
79312: EMPTY
79313: LIST
79314: LIST
79315: LIST
79316: PUSH
79317: LD_VAR 0 1
79321: PUSH
79322: LD_INT 3
79324: PLUS
79325: PUSH
79326: LD_VAR 0 2
79330: PUSH
79331: LD_INT 3
79333: PLUS
79334: PUSH
79335: LD_INT 5
79337: PUSH
79338: EMPTY
79339: LIST
79340: LIST
79341: LIST
79342: PUSH
79343: LD_VAR 0 1
79347: PUSH
79348: LD_INT 4
79350: PLUS
79351: PUSH
79352: LD_VAR 0 2
79356: PUSH
79357: LD_INT 4
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: LIST
79364: PUSH
79365: LD_VAR 0 1
79369: PUSH
79370: LD_VAR 0 2
79374: PUSH
79375: LD_INT 3
79377: MINUS
79378: PUSH
79379: LD_INT 3
79381: PUSH
79382: EMPTY
79383: LIST
79384: LIST
79385: LIST
79386: PUSH
79387: LD_VAR 0 1
79391: PUSH
79392: LD_INT 4
79394: MINUS
79395: PUSH
79396: LD_VAR 0 2
79400: PUSH
79401: LD_INT 4
79403: MINUS
79404: PUSH
79405: LD_INT 2
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: LIST
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: LIST
79417: LIST
79418: LIST
79419: ST_TO_ADDR
// end ; 5 :
79420: GO 79560
79422: LD_INT 5
79424: DOUBLE
79425: EQUAL
79426: IFTRUE 79430
79428: GO 79559
79430: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
79431: LD_ADDR_VAR 0 5
79435: PUSH
79436: LD_VAR 0 1
79440: PUSH
79441: LD_INT 4
79443: MINUS
79444: PUSH
79445: LD_VAR 0 2
79449: PUSH
79450: LD_INT 1
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: LIST
79457: PUSH
79458: LD_VAR 0 1
79462: PUSH
79463: LD_VAR 0 2
79467: PUSH
79468: LD_INT 4
79470: MINUS
79471: PUSH
79472: LD_INT 3
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: LIST
79479: PUSH
79480: LD_VAR 0 1
79484: PUSH
79485: LD_INT 4
79487: PLUS
79488: PUSH
79489: LD_VAR 0 2
79493: PUSH
79494: LD_INT 4
79496: PLUS
79497: PUSH
79498: LD_INT 5
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: LIST
79505: PUSH
79506: LD_VAR 0 1
79510: PUSH
79511: LD_INT 3
79513: PLUS
79514: PUSH
79515: LD_VAR 0 2
79519: PUSH
79520: LD_INT 4
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: LIST
79527: PUSH
79528: LD_VAR 0 1
79532: PUSH
79533: LD_VAR 0 2
79537: PUSH
79538: LD_INT 3
79540: PLUS
79541: PUSH
79542: LD_INT 0
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: LIST
79549: PUSH
79550: EMPTY
79551: LIST
79552: LIST
79553: LIST
79554: LIST
79555: LIST
79556: ST_TO_ADDR
// end ; end ;
79557: GO 79560
79559: POP
// result := list ;
79560: LD_ADDR_VAR 0 4
79564: PUSH
79565: LD_VAR 0 5
79569: ST_TO_ADDR
// end ;
79570: LD_VAR 0 4
79574: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
79575: LD_INT 0
79577: PPUSH
79578: PPUSH
79579: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
79580: LD_VAR 0 1
79584: NOT
79585: PUSH
79586: LD_VAR 0 2
79590: PUSH
79591: LD_INT 1
79593: PUSH
79594: LD_INT 2
79596: PUSH
79597: LD_INT 3
79599: PUSH
79600: LD_INT 4
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: LIST
79607: LIST
79608: IN
79609: NOT
79610: OR
79611: IFFALSE 79615
// exit ;
79613: GO 79698
// tmp := [ ] ;
79615: LD_ADDR_VAR 0 5
79619: PUSH
79620: EMPTY
79621: ST_TO_ADDR
// for i in units do
79622: LD_ADDR_VAR 0 4
79626: PUSH
79627: LD_VAR 0 1
79631: PUSH
79632: FOR_IN
79633: IFFALSE 79667
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
79635: LD_ADDR_VAR 0 5
79639: PUSH
79640: LD_VAR 0 5
79644: PPUSH
79645: LD_VAR 0 4
79649: PPUSH
79650: LD_VAR 0 2
79654: PPUSH
79655: CALL_OW 259
79659: PPUSH
79660: CALL 81058 0 2
79664: ST_TO_ADDR
79665: GO 79632
79667: POP
79668: POP
// if not tmp then
79669: LD_VAR 0 5
79673: NOT
79674: IFFALSE 79678
// exit ;
79676: GO 79698
// result := SortListByListDesc ( units , tmp ) ;
79678: LD_ADDR_VAR 0 3
79682: PUSH
79683: LD_VAR 0 1
79687: PPUSH
79688: LD_VAR 0 5
79692: PPUSH
79693: CALL_OW 77
79697: ST_TO_ADDR
// end ;
79698: LD_VAR 0 3
79702: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
79703: LD_INT 0
79705: PPUSH
79706: PPUSH
79707: PPUSH
// result := false ;
79708: LD_ADDR_VAR 0 3
79712: PUSH
79713: LD_INT 0
79715: ST_TO_ADDR
// if not building then
79716: LD_VAR 0 2
79720: NOT
79721: IFFALSE 79725
// exit ;
79723: GO 79863
// x := GetX ( building ) ;
79725: LD_ADDR_VAR 0 4
79729: PUSH
79730: LD_VAR 0 2
79734: PPUSH
79735: CALL_OW 250
79739: ST_TO_ADDR
// y := GetY ( building ) ;
79740: LD_ADDR_VAR 0 5
79744: PUSH
79745: LD_VAR 0 2
79749: PPUSH
79750: CALL_OW 251
79754: ST_TO_ADDR
// if not x or not y then
79755: LD_VAR 0 4
79759: NOT
79760: PUSH
79761: LD_VAR 0 5
79765: NOT
79766: OR
79767: IFFALSE 79771
// exit ;
79769: GO 79863
// if GetTaskList ( unit ) then
79771: LD_VAR 0 1
79775: PPUSH
79776: CALL_OW 437
79780: IFFALSE 79863
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79782: LD_STRING e
79784: PUSH
79785: LD_VAR 0 1
79789: PPUSH
79790: CALL_OW 437
79794: PUSH
79795: LD_INT 1
79797: ARRAY
79798: PUSH
79799: LD_INT 1
79801: ARRAY
79802: EQUAL
79803: PUSH
79804: LD_VAR 0 4
79808: PUSH
79809: LD_VAR 0 1
79813: PPUSH
79814: CALL_OW 437
79818: PUSH
79819: LD_INT 1
79821: ARRAY
79822: PUSH
79823: LD_INT 2
79825: ARRAY
79826: EQUAL
79827: AND
79828: PUSH
79829: LD_VAR 0 5
79833: PUSH
79834: LD_VAR 0 1
79838: PPUSH
79839: CALL_OW 437
79843: PUSH
79844: LD_INT 1
79846: ARRAY
79847: PUSH
79848: LD_INT 3
79850: ARRAY
79851: EQUAL
79852: AND
79853: IFFALSE 79863
// result := true end ;
79855: LD_ADDR_VAR 0 3
79859: PUSH
79860: LD_INT 1
79862: ST_TO_ADDR
// end ;
79863: LD_VAR 0 3
79867: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
79868: LD_INT 0
79870: PPUSH
// result := false ;
79871: LD_ADDR_VAR 0 4
79875: PUSH
79876: LD_INT 0
79878: ST_TO_ADDR
// if GetTaskList ( unit ) then
79879: LD_VAR 0 1
79883: PPUSH
79884: CALL_OW 437
79888: IFFALSE 79971
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
79890: LD_STRING M
79892: PUSH
79893: LD_VAR 0 1
79897: PPUSH
79898: CALL_OW 437
79902: PUSH
79903: LD_INT 1
79905: ARRAY
79906: PUSH
79907: LD_INT 1
79909: ARRAY
79910: EQUAL
79911: PUSH
79912: LD_VAR 0 2
79916: PUSH
79917: LD_VAR 0 1
79921: PPUSH
79922: CALL_OW 437
79926: PUSH
79927: LD_INT 1
79929: ARRAY
79930: PUSH
79931: LD_INT 2
79933: ARRAY
79934: EQUAL
79935: AND
79936: PUSH
79937: LD_VAR 0 3
79941: PUSH
79942: LD_VAR 0 1
79946: PPUSH
79947: CALL_OW 437
79951: PUSH
79952: LD_INT 1
79954: ARRAY
79955: PUSH
79956: LD_INT 3
79958: ARRAY
79959: EQUAL
79960: AND
79961: IFFALSE 79971
// result := true ;
79963: LD_ADDR_VAR 0 4
79967: PUSH
79968: LD_INT 1
79970: ST_TO_ADDR
// end ; end ;
79971: LD_VAR 0 4
79975: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
79976: LD_INT 0
79978: PPUSH
79979: PPUSH
79980: PPUSH
79981: PPUSH
// if not unit or not area then
79982: LD_VAR 0 1
79986: NOT
79987: PUSH
79988: LD_VAR 0 2
79992: NOT
79993: OR
79994: IFFALSE 79998
// exit ;
79996: GO 80161
// tmp := AreaToList ( area , i ) ;
79998: LD_ADDR_VAR 0 6
80002: PUSH
80003: LD_VAR 0 2
80007: PPUSH
80008: LD_VAR 0 5
80012: PPUSH
80013: CALL_OW 517
80017: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
80018: LD_ADDR_VAR 0 5
80022: PUSH
80023: DOUBLE
80024: LD_INT 1
80026: DEC
80027: ST_TO_ADDR
80028: LD_VAR 0 6
80032: PUSH
80033: LD_INT 1
80035: ARRAY
80036: PUSH
80037: FOR_TO
80038: IFFALSE 80159
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
80040: LD_ADDR_VAR 0 7
80044: PUSH
80045: LD_VAR 0 6
80049: PUSH
80050: LD_INT 1
80052: ARRAY
80053: PUSH
80054: LD_VAR 0 5
80058: ARRAY
80059: PUSH
80060: LD_VAR 0 6
80064: PUSH
80065: LD_INT 2
80067: ARRAY
80068: PUSH
80069: LD_VAR 0 5
80073: ARRAY
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
80079: LD_INT 92
80081: PUSH
80082: LD_VAR 0 7
80086: PUSH
80087: LD_INT 1
80089: ARRAY
80090: PUSH
80091: LD_VAR 0 7
80095: PUSH
80096: LD_INT 2
80098: ARRAY
80099: PUSH
80100: LD_INT 3
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: LIST
80107: LIST
80108: PPUSH
80109: CALL_OW 69
80113: PUSH
80114: LD_INT 0
80116: EQUAL
80117: IFFALSE 80157
// begin PlaceUnitArea ( unit , area , mode ) ;
80119: LD_VAR 0 1
80123: PPUSH
80124: LD_VAR 0 2
80128: PPUSH
80129: LD_VAR 0 3
80133: PPUSH
80134: CALL_OW 49
// result := IsPlaced ( unit ) ;
80138: LD_ADDR_VAR 0 4
80142: PUSH
80143: LD_VAR 0 1
80147: PPUSH
80148: CALL_OW 305
80152: ST_TO_ADDR
// exit ;
80153: POP
80154: POP
80155: GO 80161
// end ; end ;
80157: GO 80037
80159: POP
80160: POP
// end ;
80161: LD_VAR 0 4
80165: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
80166: LD_INT 0
80168: PPUSH
80169: PPUSH
80170: PPUSH
// if not side or side > 8 then
80171: LD_VAR 0 1
80175: NOT
80176: PUSH
80177: LD_VAR 0 1
80181: PUSH
80182: LD_INT 8
80184: GREATER
80185: OR
80186: IFFALSE 80190
// exit ;
80188: GO 80377
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
80190: LD_ADDR_VAR 0 4
80194: PUSH
80195: LD_INT 22
80197: PUSH
80198: LD_VAR 0 1
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: LD_INT 21
80209: PUSH
80210: LD_INT 3
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: PPUSH
80221: CALL_OW 69
80225: ST_TO_ADDR
// if not tmp then
80226: LD_VAR 0 4
80230: NOT
80231: IFFALSE 80235
// exit ;
80233: GO 80377
// enable_addtolog := true ;
80235: LD_ADDR_OWVAR 81
80239: PUSH
80240: LD_INT 1
80242: ST_TO_ADDR
// AddToLog ( [ ) ;
80243: LD_STRING [
80245: PPUSH
80246: CALL_OW 561
// for i in tmp do
80250: LD_ADDR_VAR 0 3
80254: PUSH
80255: LD_VAR 0 4
80259: PUSH
80260: FOR_IN
80261: IFFALSE 80368
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
80263: LD_STRING [
80265: PUSH
80266: LD_VAR 0 3
80270: PPUSH
80271: CALL_OW 266
80275: STR
80276: PUSH
80277: LD_STRING , 
80279: STR
80280: PUSH
80281: LD_VAR 0 3
80285: PPUSH
80286: CALL_OW 250
80290: STR
80291: PUSH
80292: LD_STRING , 
80294: STR
80295: PUSH
80296: LD_VAR 0 3
80300: PPUSH
80301: CALL_OW 251
80305: STR
80306: PUSH
80307: LD_STRING , 
80309: STR
80310: PUSH
80311: LD_VAR 0 3
80315: PPUSH
80316: CALL_OW 254
80320: STR
80321: PUSH
80322: LD_STRING , 
80324: STR
80325: PUSH
80326: LD_VAR 0 3
80330: PPUSH
80331: LD_INT 1
80333: PPUSH
80334: CALL_OW 268
80338: STR
80339: PUSH
80340: LD_STRING , 
80342: STR
80343: PUSH
80344: LD_VAR 0 3
80348: PPUSH
80349: LD_INT 2
80351: PPUSH
80352: CALL_OW 268
80356: STR
80357: PUSH
80358: LD_STRING ],
80360: STR
80361: PPUSH
80362: CALL_OW 561
// end ;
80366: GO 80260
80368: POP
80369: POP
// AddToLog ( ]; ) ;
80370: LD_STRING ];
80372: PPUSH
80373: CALL_OW 561
// end ;
80377: LD_VAR 0 2
80381: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
80382: LD_INT 0
80384: PPUSH
80385: PPUSH
80386: PPUSH
80387: PPUSH
80388: PPUSH
// if not area or not rate or not max then
80389: LD_VAR 0 1
80393: NOT
80394: PUSH
80395: LD_VAR 0 2
80399: NOT
80400: OR
80401: PUSH
80402: LD_VAR 0 4
80406: NOT
80407: OR
80408: IFFALSE 80412
// exit ;
80410: GO 80601
// while 1 do
80412: LD_INT 1
80414: IFFALSE 80601
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
80416: LD_ADDR_VAR 0 9
80420: PUSH
80421: LD_VAR 0 1
80425: PPUSH
80426: LD_INT 1
80428: PPUSH
80429: CALL_OW 287
80433: PUSH
80434: LD_INT 10
80436: MUL
80437: ST_TO_ADDR
// r := rate / 10 ;
80438: LD_ADDR_VAR 0 7
80442: PUSH
80443: LD_VAR 0 2
80447: PUSH
80448: LD_INT 10
80450: DIVREAL
80451: ST_TO_ADDR
// time := 1 1$00 ;
80452: LD_ADDR_VAR 0 8
80456: PUSH
80457: LD_INT 2100
80459: ST_TO_ADDR
// if amount < min then
80460: LD_VAR 0 9
80464: PUSH
80465: LD_VAR 0 3
80469: LESS
80470: IFFALSE 80488
// r := r * 2 else
80472: LD_ADDR_VAR 0 7
80476: PUSH
80477: LD_VAR 0 7
80481: PUSH
80482: LD_INT 2
80484: MUL
80485: ST_TO_ADDR
80486: GO 80514
// if amount > max then
80488: LD_VAR 0 9
80492: PUSH
80493: LD_VAR 0 4
80497: GREATER
80498: IFFALSE 80514
// r := r / 2 ;
80500: LD_ADDR_VAR 0 7
80504: PUSH
80505: LD_VAR 0 7
80509: PUSH
80510: LD_INT 2
80512: DIVREAL
80513: ST_TO_ADDR
// time := time / r ;
80514: LD_ADDR_VAR 0 8
80518: PUSH
80519: LD_VAR 0 8
80523: PUSH
80524: LD_VAR 0 7
80528: DIVREAL
80529: ST_TO_ADDR
// if time < 0 then
80530: LD_VAR 0 8
80534: PUSH
80535: LD_INT 0
80537: LESS
80538: IFFALSE 80555
// time := time * - 1 ;
80540: LD_ADDR_VAR 0 8
80544: PUSH
80545: LD_VAR 0 8
80549: PUSH
80550: LD_INT 1
80552: NEG
80553: MUL
80554: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
80555: LD_VAR 0 8
80559: PUSH
80560: LD_INT 35
80562: PPUSH
80563: LD_INT 875
80565: PPUSH
80566: CALL_OW 12
80570: PLUS
80571: PPUSH
80572: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
80576: LD_INT 1
80578: PPUSH
80579: LD_INT 5
80581: PPUSH
80582: CALL_OW 12
80586: PPUSH
80587: LD_VAR 0 1
80591: PPUSH
80592: LD_INT 1
80594: PPUSH
80595: CALL_OW 55
// end ;
80599: GO 80412
// end ;
80601: LD_VAR 0 5
80605: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
80606: LD_INT 0
80608: PPUSH
80609: PPUSH
80610: PPUSH
80611: PPUSH
80612: PPUSH
80613: PPUSH
80614: PPUSH
80615: PPUSH
// if not turrets or not factories then
80616: LD_VAR 0 1
80620: NOT
80621: PUSH
80622: LD_VAR 0 2
80626: NOT
80627: OR
80628: IFFALSE 80632
// exit ;
80630: GO 80939
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
80632: LD_ADDR_VAR 0 10
80636: PUSH
80637: LD_INT 5
80639: PUSH
80640: LD_INT 6
80642: PUSH
80643: EMPTY
80644: LIST
80645: LIST
80646: PUSH
80647: LD_INT 2
80649: PUSH
80650: LD_INT 4
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: PUSH
80657: LD_INT 3
80659: PUSH
80660: LD_INT 5
80662: PUSH
80663: EMPTY
80664: LIST
80665: LIST
80666: PUSH
80667: EMPTY
80668: LIST
80669: LIST
80670: LIST
80671: PUSH
80672: LD_INT 24
80674: PUSH
80675: LD_INT 25
80677: PUSH
80678: EMPTY
80679: LIST
80680: LIST
80681: PUSH
80682: LD_INT 23
80684: PUSH
80685: LD_INT 27
80687: PUSH
80688: EMPTY
80689: LIST
80690: LIST
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 42
80698: PUSH
80699: LD_INT 43
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: PUSH
80706: LD_INT 44
80708: PUSH
80709: LD_INT 46
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PUSH
80716: LD_INT 45
80718: PUSH
80719: LD_INT 47
80721: PUSH
80722: EMPTY
80723: LIST
80724: LIST
80725: PUSH
80726: EMPTY
80727: LIST
80728: LIST
80729: LIST
80730: PUSH
80731: EMPTY
80732: LIST
80733: LIST
80734: LIST
80735: ST_TO_ADDR
// result := [ ] ;
80736: LD_ADDR_VAR 0 3
80740: PUSH
80741: EMPTY
80742: ST_TO_ADDR
// for i in turrets do
80743: LD_ADDR_VAR 0 4
80747: PUSH
80748: LD_VAR 0 1
80752: PUSH
80753: FOR_IN
80754: IFFALSE 80937
// begin nat := GetNation ( i ) ;
80756: LD_ADDR_VAR 0 7
80760: PUSH
80761: LD_VAR 0 4
80765: PPUSH
80766: CALL_OW 248
80770: ST_TO_ADDR
// weapon := 0 ;
80771: LD_ADDR_VAR 0 8
80775: PUSH
80776: LD_INT 0
80778: ST_TO_ADDR
// if not nat then
80779: LD_VAR 0 7
80783: NOT
80784: IFFALSE 80788
// continue ;
80786: GO 80753
// for j in list [ nat ] do
80788: LD_ADDR_VAR 0 5
80792: PUSH
80793: LD_VAR 0 10
80797: PUSH
80798: LD_VAR 0 7
80802: ARRAY
80803: PUSH
80804: FOR_IN
80805: IFFALSE 80846
// if GetBWeapon ( i ) = j [ 1 ] then
80807: LD_VAR 0 4
80811: PPUSH
80812: CALL_OW 269
80816: PUSH
80817: LD_VAR 0 5
80821: PUSH
80822: LD_INT 1
80824: ARRAY
80825: EQUAL
80826: IFFALSE 80844
// begin weapon := j [ 2 ] ;
80828: LD_ADDR_VAR 0 8
80832: PUSH
80833: LD_VAR 0 5
80837: PUSH
80838: LD_INT 2
80840: ARRAY
80841: ST_TO_ADDR
// break ;
80842: GO 80846
// end ;
80844: GO 80804
80846: POP
80847: POP
// if not weapon then
80848: LD_VAR 0 8
80852: NOT
80853: IFFALSE 80857
// continue ;
80855: GO 80753
// for k in factories do
80857: LD_ADDR_VAR 0 6
80861: PUSH
80862: LD_VAR 0 2
80866: PUSH
80867: FOR_IN
80868: IFFALSE 80933
// begin weapons := AvailableWeaponList ( k ) ;
80870: LD_ADDR_VAR 0 9
80874: PUSH
80875: LD_VAR 0 6
80879: PPUSH
80880: CALL_OW 478
80884: ST_TO_ADDR
// if not weapons then
80885: LD_VAR 0 9
80889: NOT
80890: IFFALSE 80894
// continue ;
80892: GO 80867
// if weapon in weapons then
80894: LD_VAR 0 8
80898: PUSH
80899: LD_VAR 0 9
80903: IN
80904: IFFALSE 80931
// begin result := [ i , weapon ] ;
80906: LD_ADDR_VAR 0 3
80910: PUSH
80911: LD_VAR 0 4
80915: PUSH
80916: LD_VAR 0 8
80920: PUSH
80921: EMPTY
80922: LIST
80923: LIST
80924: ST_TO_ADDR
// exit ;
80925: POP
80926: POP
80927: POP
80928: POP
80929: GO 80939
// end ; end ;
80931: GO 80867
80933: POP
80934: POP
// end ;
80935: GO 80753
80937: POP
80938: POP
// end ;
80939: LD_VAR 0 3
80943: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
80944: LD_INT 0
80946: PPUSH
// if not side or side > 8 then
80947: LD_VAR 0 3
80951: NOT
80952: PUSH
80953: LD_VAR 0 3
80957: PUSH
80958: LD_INT 8
80960: GREATER
80961: OR
80962: IFFALSE 80966
// exit ;
80964: GO 81025
// if not range then
80966: LD_VAR 0 4
80970: NOT
80971: IFFALSE 80982
// range := - 12 ;
80973: LD_ADDR_VAR 0 4
80977: PUSH
80978: LD_INT 12
80980: NEG
80981: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
80982: LD_VAR 0 1
80986: PPUSH
80987: LD_VAR 0 2
80991: PPUSH
80992: LD_VAR 0 3
80996: PPUSH
80997: LD_VAR 0 4
81001: PPUSH
81002: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
81006: LD_VAR 0 1
81010: PPUSH
81011: LD_VAR 0 2
81015: PPUSH
81016: LD_VAR 0 3
81020: PPUSH
81021: CALL_OW 331
// end ;
81025: LD_VAR 0 5
81029: RET
// export function Video ( mode ) ; begin
81030: LD_INT 0
81032: PPUSH
// ingame_video = mode ;
81033: LD_ADDR_OWVAR 52
81037: PUSH
81038: LD_VAR 0 1
81042: ST_TO_ADDR
// interface_hidden = mode ;
81043: LD_ADDR_OWVAR 54
81047: PUSH
81048: LD_VAR 0 1
81052: ST_TO_ADDR
// end ;
81053: LD_VAR 0 2
81057: RET
// export function Join ( array , element ) ; begin
81058: LD_INT 0
81060: PPUSH
// result := Replace ( array , array + 1 , element ) ;
81061: LD_ADDR_VAR 0 3
81065: PUSH
81066: LD_VAR 0 1
81070: PPUSH
81071: LD_VAR 0 1
81075: PUSH
81076: LD_INT 1
81078: PLUS
81079: PPUSH
81080: LD_VAR 0 2
81084: PPUSH
81085: CALL_OW 1
81089: ST_TO_ADDR
// end ;
81090: LD_VAR 0 3
81094: RET
// export function JoinUnion ( array , element ) ; begin
81095: LD_INT 0
81097: PPUSH
// result := array union element ;
81098: LD_ADDR_VAR 0 3
81102: PUSH
81103: LD_VAR 0 1
81107: PUSH
81108: LD_VAR 0 2
81112: UNION
81113: ST_TO_ADDR
// end ;
81114: LD_VAR 0 3
81118: RET
// export function GetBehemoths ( side ) ; begin
81119: LD_INT 0
81121: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
81122: LD_ADDR_VAR 0 2
81126: PUSH
81127: LD_INT 22
81129: PUSH
81130: LD_VAR 0 1
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: PUSH
81139: LD_INT 31
81141: PUSH
81142: LD_INT 25
81144: PUSH
81145: EMPTY
81146: LIST
81147: LIST
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PPUSH
81153: CALL_OW 69
81157: ST_TO_ADDR
// end ;
81158: LD_VAR 0 2
81162: RET
// export function Shuffle ( array ) ; var i , index ; begin
81163: LD_INT 0
81165: PPUSH
81166: PPUSH
81167: PPUSH
// result := [ ] ;
81168: LD_ADDR_VAR 0 2
81172: PUSH
81173: EMPTY
81174: ST_TO_ADDR
// if not array then
81175: LD_VAR 0 1
81179: NOT
81180: IFFALSE 81184
// exit ;
81182: GO 81283
// Randomize ;
81184: CALL_OW 10
// for i = array downto 1 do
81188: LD_ADDR_VAR 0 3
81192: PUSH
81193: DOUBLE
81194: LD_VAR 0 1
81198: INC
81199: ST_TO_ADDR
81200: LD_INT 1
81202: PUSH
81203: FOR_DOWNTO
81204: IFFALSE 81281
// begin index := rand ( 1 , array ) ;
81206: LD_ADDR_VAR 0 4
81210: PUSH
81211: LD_INT 1
81213: PPUSH
81214: LD_VAR 0 1
81218: PPUSH
81219: CALL_OW 12
81223: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
81224: LD_ADDR_VAR 0 2
81228: PUSH
81229: LD_VAR 0 2
81233: PPUSH
81234: LD_VAR 0 2
81238: PUSH
81239: LD_INT 1
81241: PLUS
81242: PPUSH
81243: LD_VAR 0 1
81247: PUSH
81248: LD_VAR 0 4
81252: ARRAY
81253: PPUSH
81254: CALL_OW 2
81258: ST_TO_ADDR
// array := Delete ( array , index ) ;
81259: LD_ADDR_VAR 0 1
81263: PUSH
81264: LD_VAR 0 1
81268: PPUSH
81269: LD_VAR 0 4
81273: PPUSH
81274: CALL_OW 3
81278: ST_TO_ADDR
// end ;
81279: GO 81203
81281: POP
81282: POP
// end ;
81283: LD_VAR 0 2
81287: RET
// export function GetBaseMaterials ( base ) ; begin
81288: LD_INT 0
81290: PPUSH
// result := [ 0 , 0 , 0 ] ;
81291: LD_ADDR_VAR 0 2
81295: PUSH
81296: LD_INT 0
81298: PUSH
81299: LD_INT 0
81301: PUSH
81302: LD_INT 0
81304: PUSH
81305: EMPTY
81306: LIST
81307: LIST
81308: LIST
81309: ST_TO_ADDR
// if not base then
81310: LD_VAR 0 1
81314: NOT
81315: IFFALSE 81319
// exit ;
81317: GO 81368
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
81319: LD_ADDR_VAR 0 2
81323: PUSH
81324: LD_VAR 0 1
81328: PPUSH
81329: LD_INT 1
81331: PPUSH
81332: CALL_OW 275
81336: PUSH
81337: LD_VAR 0 1
81341: PPUSH
81342: LD_INT 2
81344: PPUSH
81345: CALL_OW 275
81349: PUSH
81350: LD_VAR 0 1
81354: PPUSH
81355: LD_INT 3
81357: PPUSH
81358: CALL_OW 275
81362: PUSH
81363: EMPTY
81364: LIST
81365: LIST
81366: LIST
81367: ST_TO_ADDR
// end ;
81368: LD_VAR 0 2
81372: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
81373: LD_INT 0
81375: PPUSH
81376: PPUSH
// result := array ;
81377: LD_ADDR_VAR 0 3
81381: PUSH
81382: LD_VAR 0 1
81386: ST_TO_ADDR
// if size >= result then
81387: LD_VAR 0 2
81391: PUSH
81392: LD_VAR 0 3
81396: GREATEREQUAL
81397: IFFALSE 81401
// exit ;
81399: GO 81451
// if size then
81401: LD_VAR 0 2
81405: IFFALSE 81451
// for i := array downto size do
81407: LD_ADDR_VAR 0 4
81411: PUSH
81412: DOUBLE
81413: LD_VAR 0 1
81417: INC
81418: ST_TO_ADDR
81419: LD_VAR 0 2
81423: PUSH
81424: FOR_DOWNTO
81425: IFFALSE 81449
// result := Delete ( result , result ) ;
81427: LD_ADDR_VAR 0 3
81431: PUSH
81432: LD_VAR 0 3
81436: PPUSH
81437: LD_VAR 0 3
81441: PPUSH
81442: CALL_OW 3
81446: ST_TO_ADDR
81447: GO 81424
81449: POP
81450: POP
// end ;
81451: LD_VAR 0 3
81455: RET
// export function ComExit ( unit ) ; var tmp ; begin
81456: LD_INT 0
81458: PPUSH
81459: PPUSH
// if not IsInUnit ( unit ) then
81460: LD_VAR 0 1
81464: PPUSH
81465: CALL_OW 310
81469: NOT
81470: IFFALSE 81474
// exit ;
81472: GO 81534
// tmp := IsInUnit ( unit ) ;
81474: LD_ADDR_VAR 0 3
81478: PUSH
81479: LD_VAR 0 1
81483: PPUSH
81484: CALL_OW 310
81488: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
81489: LD_VAR 0 3
81493: PPUSH
81494: CALL_OW 247
81498: PUSH
81499: LD_INT 2
81501: EQUAL
81502: IFFALSE 81515
// ComExitVehicle ( unit ) else
81504: LD_VAR 0 1
81508: PPUSH
81509: CALL_OW 121
81513: GO 81524
// ComExitBuilding ( unit ) ;
81515: LD_VAR 0 1
81519: PPUSH
81520: CALL_OW 122
// result := tmp ;
81524: LD_ADDR_VAR 0 2
81528: PUSH
81529: LD_VAR 0 3
81533: ST_TO_ADDR
// end ;
81534: LD_VAR 0 2
81538: RET
// export function ComExitAll ( units ) ; var i ; begin
81539: LD_INT 0
81541: PPUSH
81542: PPUSH
// if not units then
81543: LD_VAR 0 1
81547: NOT
81548: IFFALSE 81552
// exit ;
81550: GO 81578
// for i in units do
81552: LD_ADDR_VAR 0 3
81556: PUSH
81557: LD_VAR 0 1
81561: PUSH
81562: FOR_IN
81563: IFFALSE 81576
// ComExit ( i ) ;
81565: LD_VAR 0 3
81569: PPUSH
81570: CALL 81456 0 1
81574: GO 81562
81576: POP
81577: POP
// end ;
81578: LD_VAR 0 2
81582: RET
// export function ResetHc ; begin
81583: LD_INT 0
81585: PPUSH
// InitHc ;
81586: CALL_OW 19
// hc_importance := 0 ;
81590: LD_ADDR_OWVAR 32
81594: PUSH
81595: LD_INT 0
81597: ST_TO_ADDR
// end ;
81598: LD_VAR 0 1
81602: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
81603: LD_INT 0
81605: PPUSH
81606: PPUSH
81607: PPUSH
// _x := ( x1 + x2 ) div 2 ;
81608: LD_ADDR_VAR 0 6
81612: PUSH
81613: LD_VAR 0 1
81617: PUSH
81618: LD_VAR 0 3
81622: PLUS
81623: PUSH
81624: LD_INT 2
81626: DIV
81627: ST_TO_ADDR
// if _x < 0 then
81628: LD_VAR 0 6
81632: PUSH
81633: LD_INT 0
81635: LESS
81636: IFFALSE 81653
// _x := _x * - 1 ;
81638: LD_ADDR_VAR 0 6
81642: PUSH
81643: LD_VAR 0 6
81647: PUSH
81648: LD_INT 1
81650: NEG
81651: MUL
81652: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
81653: LD_ADDR_VAR 0 7
81657: PUSH
81658: LD_VAR 0 2
81662: PUSH
81663: LD_VAR 0 4
81667: PLUS
81668: PUSH
81669: LD_INT 2
81671: DIV
81672: ST_TO_ADDR
// if _y < 0 then
81673: LD_VAR 0 7
81677: PUSH
81678: LD_INT 0
81680: LESS
81681: IFFALSE 81698
// _y := _y * - 1 ;
81683: LD_ADDR_VAR 0 7
81687: PUSH
81688: LD_VAR 0 7
81692: PUSH
81693: LD_INT 1
81695: NEG
81696: MUL
81697: ST_TO_ADDR
// result := [ _x , _y ] ;
81698: LD_ADDR_VAR 0 5
81702: PUSH
81703: LD_VAR 0 6
81707: PUSH
81708: LD_VAR 0 7
81712: PUSH
81713: EMPTY
81714: LIST
81715: LIST
81716: ST_TO_ADDR
// end ;
81717: LD_VAR 0 5
81721: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
81722: LD_INT 0
81724: PPUSH
81725: PPUSH
81726: PPUSH
81727: PPUSH
// task := GetTaskList ( unit ) ;
81728: LD_ADDR_VAR 0 7
81732: PUSH
81733: LD_VAR 0 1
81737: PPUSH
81738: CALL_OW 437
81742: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
81743: LD_VAR 0 7
81747: NOT
81748: PUSH
81749: LD_VAR 0 1
81753: PPUSH
81754: LD_VAR 0 2
81758: PPUSH
81759: CALL_OW 308
81763: NOT
81764: AND
81765: IFFALSE 81769
// exit ;
81767: GO 81887
// if IsInArea ( unit , area ) then
81769: LD_VAR 0 1
81773: PPUSH
81774: LD_VAR 0 2
81778: PPUSH
81779: CALL_OW 308
81783: IFFALSE 81801
// begin ComMoveToArea ( unit , goAway ) ;
81785: LD_VAR 0 1
81789: PPUSH
81790: LD_VAR 0 3
81794: PPUSH
81795: CALL_OW 113
// exit ;
81799: GO 81887
// end ; if task [ 1 ] [ 1 ] <> M then
81801: LD_VAR 0 7
81805: PUSH
81806: LD_INT 1
81808: ARRAY
81809: PUSH
81810: LD_INT 1
81812: ARRAY
81813: PUSH
81814: LD_STRING M
81816: NONEQUAL
81817: IFFALSE 81821
// exit ;
81819: GO 81887
// x := task [ 1 ] [ 2 ] ;
81821: LD_ADDR_VAR 0 5
81825: PUSH
81826: LD_VAR 0 7
81830: PUSH
81831: LD_INT 1
81833: ARRAY
81834: PUSH
81835: LD_INT 2
81837: ARRAY
81838: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
81839: LD_ADDR_VAR 0 6
81843: PUSH
81844: LD_VAR 0 7
81848: PUSH
81849: LD_INT 1
81851: ARRAY
81852: PUSH
81853: LD_INT 3
81855: ARRAY
81856: ST_TO_ADDR
// if InArea ( x , y , area ) then
81857: LD_VAR 0 5
81861: PPUSH
81862: LD_VAR 0 6
81866: PPUSH
81867: LD_VAR 0 2
81871: PPUSH
81872: CALL_OW 309
81876: IFFALSE 81887
// ComStop ( unit ) ;
81878: LD_VAR 0 1
81882: PPUSH
81883: CALL_OW 141
// end ;
81887: LD_VAR 0 4
81891: RET
// export function Abs ( value ) ; begin
81892: LD_INT 0
81894: PPUSH
// result := value ;
81895: LD_ADDR_VAR 0 2
81899: PUSH
81900: LD_VAR 0 1
81904: ST_TO_ADDR
// if value < 0 then
81905: LD_VAR 0 1
81909: PUSH
81910: LD_INT 0
81912: LESS
81913: IFFALSE 81930
// result := value * - 1 ;
81915: LD_ADDR_VAR 0 2
81919: PUSH
81920: LD_VAR 0 1
81924: PUSH
81925: LD_INT 1
81927: NEG
81928: MUL
81929: ST_TO_ADDR
// end ;
81930: LD_VAR 0 2
81934: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
81935: LD_INT 0
81937: PPUSH
81938: PPUSH
81939: PPUSH
81940: PPUSH
81941: PPUSH
81942: PPUSH
81943: PPUSH
81944: PPUSH
// if not unit or not building then
81945: LD_VAR 0 1
81949: NOT
81950: PUSH
81951: LD_VAR 0 2
81955: NOT
81956: OR
81957: IFFALSE 81961
// exit ;
81959: GO 82187
// x := GetX ( building ) ;
81961: LD_ADDR_VAR 0 4
81965: PUSH
81966: LD_VAR 0 2
81970: PPUSH
81971: CALL_OW 250
81975: ST_TO_ADDR
// y := GetY ( building ) ;
81976: LD_ADDR_VAR 0 6
81980: PUSH
81981: LD_VAR 0 2
81985: PPUSH
81986: CALL_OW 251
81990: ST_TO_ADDR
// d := GetDir ( building ) ;
81991: LD_ADDR_VAR 0 8
81995: PUSH
81996: LD_VAR 0 2
82000: PPUSH
82001: CALL_OW 254
82005: ST_TO_ADDR
// r := 4 ;
82006: LD_ADDR_VAR 0 9
82010: PUSH
82011: LD_INT 4
82013: ST_TO_ADDR
// for i := 1 to 5 do
82014: LD_ADDR_VAR 0 10
82018: PUSH
82019: DOUBLE
82020: LD_INT 1
82022: DEC
82023: ST_TO_ADDR
82024: LD_INT 5
82026: PUSH
82027: FOR_TO
82028: IFFALSE 82185
// begin _x := ShiftX ( x , d , r + i ) ;
82030: LD_ADDR_VAR 0 5
82034: PUSH
82035: LD_VAR 0 4
82039: PPUSH
82040: LD_VAR 0 8
82044: PPUSH
82045: LD_VAR 0 9
82049: PUSH
82050: LD_VAR 0 10
82054: PLUS
82055: PPUSH
82056: CALL_OW 272
82060: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
82061: LD_ADDR_VAR 0 7
82065: PUSH
82066: LD_VAR 0 6
82070: PPUSH
82071: LD_VAR 0 8
82075: PPUSH
82076: LD_VAR 0 9
82080: PUSH
82081: LD_VAR 0 10
82085: PLUS
82086: PPUSH
82087: CALL_OW 273
82091: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
82092: LD_VAR 0 5
82096: PPUSH
82097: LD_VAR 0 7
82101: PPUSH
82102: CALL_OW 488
82106: PUSH
82107: LD_VAR 0 5
82111: PPUSH
82112: LD_VAR 0 7
82116: PPUSH
82117: CALL_OW 428
82121: PPUSH
82122: CALL_OW 247
82126: PUSH
82127: LD_INT 3
82129: PUSH
82130: LD_INT 2
82132: PUSH
82133: EMPTY
82134: LIST
82135: LIST
82136: IN
82137: NOT
82138: AND
82139: IFFALSE 82183
// begin ComMoveXY ( unit , _x , _y ) ;
82141: LD_VAR 0 1
82145: PPUSH
82146: LD_VAR 0 5
82150: PPUSH
82151: LD_VAR 0 7
82155: PPUSH
82156: CALL_OW 111
// result := [ _x , _y ] ;
82160: LD_ADDR_VAR 0 3
82164: PUSH
82165: LD_VAR 0 5
82169: PUSH
82170: LD_VAR 0 7
82174: PUSH
82175: EMPTY
82176: LIST
82177: LIST
82178: ST_TO_ADDR
// exit ;
82179: POP
82180: POP
82181: GO 82187
// end ; end ;
82183: GO 82027
82185: POP
82186: POP
// end ;
82187: LD_VAR 0 3
82191: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
82192: LD_INT 0
82194: PPUSH
82195: PPUSH
82196: PPUSH
// result := 0 ;
82197: LD_ADDR_VAR 0 3
82201: PUSH
82202: LD_INT 0
82204: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
82205: LD_VAR 0 1
82209: PUSH
82210: LD_INT 0
82212: LESS
82213: PUSH
82214: LD_VAR 0 1
82218: PUSH
82219: LD_INT 8
82221: GREATER
82222: OR
82223: PUSH
82224: LD_VAR 0 2
82228: PUSH
82229: LD_INT 0
82231: LESS
82232: OR
82233: PUSH
82234: LD_VAR 0 2
82238: PUSH
82239: LD_INT 8
82241: GREATER
82242: OR
82243: IFFALSE 82247
// exit ;
82245: GO 82322
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
82247: LD_ADDR_VAR 0 4
82251: PUSH
82252: LD_INT 22
82254: PUSH
82255: LD_VAR 0 2
82259: PUSH
82260: EMPTY
82261: LIST
82262: LIST
82263: PPUSH
82264: CALL_OW 69
82268: PUSH
82269: FOR_IN
82270: IFFALSE 82320
// begin un := UnitShoot ( i ) ;
82272: LD_ADDR_VAR 0 5
82276: PUSH
82277: LD_VAR 0 4
82281: PPUSH
82282: CALL_OW 504
82286: ST_TO_ADDR
// if GetSide ( un ) = side1 then
82287: LD_VAR 0 5
82291: PPUSH
82292: CALL_OW 255
82296: PUSH
82297: LD_VAR 0 1
82301: EQUAL
82302: IFFALSE 82318
// begin result := un ;
82304: LD_ADDR_VAR 0 3
82308: PUSH
82309: LD_VAR 0 5
82313: ST_TO_ADDR
// exit ;
82314: POP
82315: POP
82316: GO 82322
// end ; end ;
82318: GO 82269
82320: POP
82321: POP
// end ;
82322: LD_VAR 0 3
82326: RET
// export function GetCargoBay ( units ) ; begin
82327: LD_INT 0
82329: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
82330: LD_ADDR_VAR 0 2
82334: PUSH
82335: LD_VAR 0 1
82339: PPUSH
82340: LD_INT 2
82342: PUSH
82343: LD_INT 34
82345: PUSH
82346: LD_INT 12
82348: PUSH
82349: EMPTY
82350: LIST
82351: LIST
82352: PUSH
82353: LD_INT 34
82355: PUSH
82356: LD_INT 51
82358: PUSH
82359: EMPTY
82360: LIST
82361: LIST
82362: PUSH
82363: LD_INT 34
82365: PUSH
82366: LD_INT 32
82368: PUSH
82369: EMPTY
82370: LIST
82371: LIST
82372: PUSH
82373: LD_INT 34
82375: PUSH
82376: LD_INT 89
82378: PUSH
82379: EMPTY
82380: LIST
82381: LIST
82382: PUSH
82383: EMPTY
82384: LIST
82385: LIST
82386: LIST
82387: LIST
82388: LIST
82389: PPUSH
82390: CALL_OW 72
82394: ST_TO_ADDR
// end ;
82395: LD_VAR 0 2
82399: RET
// export function Negate ( value ) ; begin
82400: LD_INT 0
82402: PPUSH
// result := not value ;
82403: LD_ADDR_VAR 0 2
82407: PUSH
82408: LD_VAR 0 1
82412: NOT
82413: ST_TO_ADDR
// end ;
82414: LD_VAR 0 2
82418: RET
// export function Inc ( value ) ; begin
82419: LD_INT 0
82421: PPUSH
// result := value + 1 ;
82422: LD_ADDR_VAR 0 2
82426: PUSH
82427: LD_VAR 0 1
82431: PUSH
82432: LD_INT 1
82434: PLUS
82435: ST_TO_ADDR
// end ;
82436: LD_VAR 0 2
82440: RET
// export function Dec ( value ) ; begin
82441: LD_INT 0
82443: PPUSH
// result := value - 1 ;
82444: LD_ADDR_VAR 0 2
82448: PUSH
82449: LD_VAR 0 1
82453: PUSH
82454: LD_INT 1
82456: MINUS
82457: ST_TO_ADDR
// end ;
82458: LD_VAR 0 2
82462: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
82463: LD_INT 0
82465: PPUSH
82466: PPUSH
82467: PPUSH
82468: PPUSH
82469: PPUSH
82470: PPUSH
82471: PPUSH
82472: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
82473: LD_VAR 0 1
82477: PPUSH
82478: LD_VAR 0 2
82482: PPUSH
82483: CALL_OW 488
82487: NOT
82488: PUSH
82489: LD_VAR 0 3
82493: PPUSH
82494: LD_VAR 0 4
82498: PPUSH
82499: CALL_OW 488
82503: NOT
82504: OR
82505: IFFALSE 82518
// begin result := - 1 ;
82507: LD_ADDR_VAR 0 5
82511: PUSH
82512: LD_INT 1
82514: NEG
82515: ST_TO_ADDR
// exit ;
82516: GO 82753
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
82518: LD_ADDR_VAR 0 12
82522: PUSH
82523: LD_VAR 0 1
82527: PPUSH
82528: LD_VAR 0 2
82532: PPUSH
82533: LD_VAR 0 3
82537: PPUSH
82538: LD_VAR 0 4
82542: PPUSH
82543: CALL 81603 0 4
82547: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
82548: LD_ADDR_VAR 0 11
82552: PUSH
82553: LD_VAR 0 1
82557: PPUSH
82558: LD_VAR 0 2
82562: PPUSH
82563: LD_VAR 0 12
82567: PUSH
82568: LD_INT 1
82570: ARRAY
82571: PPUSH
82572: LD_VAR 0 12
82576: PUSH
82577: LD_INT 2
82579: ARRAY
82580: PPUSH
82581: CALL_OW 298
82585: ST_TO_ADDR
// distance := 9999 ;
82586: LD_ADDR_VAR 0 10
82590: PUSH
82591: LD_INT 9999
82593: ST_TO_ADDR
// for i := 0 to 5 do
82594: LD_ADDR_VAR 0 6
82598: PUSH
82599: DOUBLE
82600: LD_INT 0
82602: DEC
82603: ST_TO_ADDR
82604: LD_INT 5
82606: PUSH
82607: FOR_TO
82608: IFFALSE 82751
// begin _x := ShiftX ( x1 , i , centerDist ) ;
82610: LD_ADDR_VAR 0 7
82614: PUSH
82615: LD_VAR 0 1
82619: PPUSH
82620: LD_VAR 0 6
82624: PPUSH
82625: LD_VAR 0 11
82629: PPUSH
82630: CALL_OW 272
82634: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
82635: LD_ADDR_VAR 0 8
82639: PUSH
82640: LD_VAR 0 2
82644: PPUSH
82645: LD_VAR 0 6
82649: PPUSH
82650: LD_VAR 0 11
82654: PPUSH
82655: CALL_OW 273
82659: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82660: LD_VAR 0 7
82664: PPUSH
82665: LD_VAR 0 8
82669: PPUSH
82670: CALL_OW 488
82674: NOT
82675: IFFALSE 82679
// continue ;
82677: GO 82607
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
82679: LD_ADDR_VAR 0 9
82683: PUSH
82684: LD_VAR 0 12
82688: PUSH
82689: LD_INT 1
82691: ARRAY
82692: PPUSH
82693: LD_VAR 0 12
82697: PUSH
82698: LD_INT 2
82700: ARRAY
82701: PPUSH
82702: LD_VAR 0 7
82706: PPUSH
82707: LD_VAR 0 8
82711: PPUSH
82712: CALL_OW 298
82716: ST_TO_ADDR
// if tmp < distance then
82717: LD_VAR 0 9
82721: PUSH
82722: LD_VAR 0 10
82726: LESS
82727: IFFALSE 82749
// begin result := i ;
82729: LD_ADDR_VAR 0 5
82733: PUSH
82734: LD_VAR 0 6
82738: ST_TO_ADDR
// distance := tmp ;
82739: LD_ADDR_VAR 0 10
82743: PUSH
82744: LD_VAR 0 9
82748: ST_TO_ADDR
// end ; end ;
82749: GO 82607
82751: POP
82752: POP
// end ;
82753: LD_VAR 0 5
82757: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82758: LD_INT 0
82760: PPUSH
82761: PPUSH
// if not driver or not IsInUnit ( driver ) then
82762: LD_VAR 0 1
82766: NOT
82767: PUSH
82768: LD_VAR 0 1
82772: PPUSH
82773: CALL_OW 310
82777: NOT
82778: OR
82779: IFFALSE 82783
// exit ;
82781: GO 82873
// vehicle := IsInUnit ( driver ) ;
82783: LD_ADDR_VAR 0 3
82787: PUSH
82788: LD_VAR 0 1
82792: PPUSH
82793: CALL_OW 310
82797: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82798: LD_VAR 0 1
82802: PPUSH
82803: LD_STRING \
82805: PUSH
82806: LD_INT 0
82808: PUSH
82809: LD_INT 0
82811: PUSH
82812: LD_INT 0
82814: PUSH
82815: LD_INT 0
82817: PUSH
82818: LD_INT 0
82820: PUSH
82821: LD_INT 0
82823: PUSH
82824: EMPTY
82825: LIST
82826: LIST
82827: LIST
82828: LIST
82829: LIST
82830: LIST
82831: LIST
82832: PUSH
82833: LD_STRING E
82835: PUSH
82836: LD_INT 0
82838: PUSH
82839: LD_INT 0
82841: PUSH
82842: LD_VAR 0 3
82846: PUSH
82847: LD_INT 0
82849: PUSH
82850: LD_INT 0
82852: PUSH
82853: LD_INT 0
82855: PUSH
82856: EMPTY
82857: LIST
82858: LIST
82859: LIST
82860: LIST
82861: LIST
82862: LIST
82863: LIST
82864: PUSH
82865: EMPTY
82866: LIST
82867: LIST
82868: PPUSH
82869: CALL_OW 446
// end ;
82873: LD_VAR 0 2
82877: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
82878: LD_INT 0
82880: PPUSH
82881: PPUSH
// if not driver or not IsInUnit ( driver ) then
82882: LD_VAR 0 1
82886: NOT
82887: PUSH
82888: LD_VAR 0 1
82892: PPUSH
82893: CALL_OW 310
82897: NOT
82898: OR
82899: IFFALSE 82903
// exit ;
82901: GO 82993
// vehicle := IsInUnit ( driver ) ;
82903: LD_ADDR_VAR 0 3
82907: PUSH
82908: LD_VAR 0 1
82912: PPUSH
82913: CALL_OW 310
82917: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
82918: LD_VAR 0 1
82922: PPUSH
82923: LD_STRING \
82925: PUSH
82926: LD_INT 0
82928: PUSH
82929: LD_INT 0
82931: PUSH
82932: LD_INT 0
82934: PUSH
82935: LD_INT 0
82937: PUSH
82938: LD_INT 0
82940: PUSH
82941: LD_INT 0
82943: PUSH
82944: EMPTY
82945: LIST
82946: LIST
82947: LIST
82948: LIST
82949: LIST
82950: LIST
82951: LIST
82952: PUSH
82953: LD_STRING E
82955: PUSH
82956: LD_INT 0
82958: PUSH
82959: LD_INT 0
82961: PUSH
82962: LD_VAR 0 3
82966: PUSH
82967: LD_INT 0
82969: PUSH
82970: LD_INT 0
82972: PUSH
82973: LD_INT 0
82975: PUSH
82976: EMPTY
82977: LIST
82978: LIST
82979: LIST
82980: LIST
82981: LIST
82982: LIST
82983: LIST
82984: PUSH
82985: EMPTY
82986: LIST
82987: LIST
82988: PPUSH
82989: CALL_OW 447
// end ;
82993: LD_VAR 0 2
82997: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
82998: LD_INT 0
83000: PPUSH
83001: PPUSH
83002: PPUSH
// tmp := [ ] ;
83003: LD_ADDR_VAR 0 5
83007: PUSH
83008: EMPTY
83009: ST_TO_ADDR
// for i in units do
83010: LD_ADDR_VAR 0 4
83014: PUSH
83015: LD_VAR 0 1
83019: PUSH
83020: FOR_IN
83021: IFFALSE 83059
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
83023: LD_ADDR_VAR 0 5
83027: PUSH
83028: LD_VAR 0 5
83032: PPUSH
83033: LD_VAR 0 5
83037: PUSH
83038: LD_INT 1
83040: PLUS
83041: PPUSH
83042: LD_VAR 0 4
83046: PPUSH
83047: CALL_OW 256
83051: PPUSH
83052: CALL_OW 2
83056: ST_TO_ADDR
83057: GO 83020
83059: POP
83060: POP
// if not tmp then
83061: LD_VAR 0 5
83065: NOT
83066: IFFALSE 83070
// exit ;
83068: GO 83118
// if asc then
83070: LD_VAR 0 2
83074: IFFALSE 83098
// result := SortListByListAsc ( units , tmp ) else
83076: LD_ADDR_VAR 0 3
83080: PUSH
83081: LD_VAR 0 1
83085: PPUSH
83086: LD_VAR 0 5
83090: PPUSH
83091: CALL_OW 76
83095: ST_TO_ADDR
83096: GO 83118
// result := SortListByListDesc ( units , tmp ) ;
83098: LD_ADDR_VAR 0 3
83102: PUSH
83103: LD_VAR 0 1
83107: PPUSH
83108: LD_VAR 0 5
83112: PPUSH
83113: CALL_OW 77
83117: ST_TO_ADDR
// end ;
83118: LD_VAR 0 3
83122: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
83123: LD_INT 0
83125: PPUSH
83126: PPUSH
// task := GetTaskList ( mech ) ;
83127: LD_ADDR_VAR 0 4
83131: PUSH
83132: LD_VAR 0 1
83136: PPUSH
83137: CALL_OW 437
83141: ST_TO_ADDR
// if not task then
83142: LD_VAR 0 4
83146: NOT
83147: IFFALSE 83151
// exit ;
83149: GO 83193
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
83151: LD_ADDR_VAR 0 3
83155: PUSH
83156: LD_VAR 0 4
83160: PUSH
83161: LD_INT 1
83163: ARRAY
83164: PUSH
83165: LD_INT 1
83167: ARRAY
83168: PUSH
83169: LD_STRING r
83171: EQUAL
83172: PUSH
83173: LD_VAR 0 4
83177: PUSH
83178: LD_INT 1
83180: ARRAY
83181: PUSH
83182: LD_INT 4
83184: ARRAY
83185: PUSH
83186: LD_VAR 0 2
83190: EQUAL
83191: AND
83192: ST_TO_ADDR
// end ;
83193: LD_VAR 0 3
83197: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
83198: LD_INT 0
83200: PPUSH
// SetDir ( unit , d ) ;
83201: LD_VAR 0 1
83205: PPUSH
83206: LD_VAR 0 4
83210: PPUSH
83211: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
83215: LD_VAR 0 1
83219: PPUSH
83220: LD_VAR 0 2
83224: PPUSH
83225: LD_VAR 0 3
83229: PPUSH
83230: LD_VAR 0 5
83234: PPUSH
83235: CALL_OW 48
// end ;
83239: LD_VAR 0 6
83243: RET
// export function ToNaturalNumber ( number ) ; begin
83244: LD_INT 0
83246: PPUSH
// result := number div 1 ;
83247: LD_ADDR_VAR 0 2
83251: PUSH
83252: LD_VAR 0 1
83256: PUSH
83257: LD_INT 1
83259: DIV
83260: ST_TO_ADDR
// if number < 0 then
83261: LD_VAR 0 1
83265: PUSH
83266: LD_INT 0
83268: LESS
83269: IFFALSE 83279
// result := 0 ;
83271: LD_ADDR_VAR 0 2
83275: PUSH
83276: LD_INT 0
83278: ST_TO_ADDR
// end ;
83279: LD_VAR 0 2
83283: RET
// export function SortByClass ( units , class ) ; var un ; begin
83284: LD_INT 0
83286: PPUSH
83287: PPUSH
// if not units or not class then
83288: LD_VAR 0 1
83292: NOT
83293: PUSH
83294: LD_VAR 0 2
83298: NOT
83299: OR
83300: IFFALSE 83304
// exit ;
83302: GO 83399
// result := [ ] ;
83304: LD_ADDR_VAR 0 3
83308: PUSH
83309: EMPTY
83310: ST_TO_ADDR
// for un in units do
83311: LD_ADDR_VAR 0 4
83315: PUSH
83316: LD_VAR 0 1
83320: PUSH
83321: FOR_IN
83322: IFFALSE 83397
// if GetClass ( un ) = class then
83324: LD_VAR 0 4
83328: PPUSH
83329: CALL_OW 257
83333: PUSH
83334: LD_VAR 0 2
83338: EQUAL
83339: IFFALSE 83366
// result := Insert ( result , 1 , un ) else
83341: LD_ADDR_VAR 0 3
83345: PUSH
83346: LD_VAR 0 3
83350: PPUSH
83351: LD_INT 1
83353: PPUSH
83354: LD_VAR 0 4
83358: PPUSH
83359: CALL_OW 2
83363: ST_TO_ADDR
83364: GO 83395
// result := Replace ( result , result + 1 , un ) ;
83366: LD_ADDR_VAR 0 3
83370: PUSH
83371: LD_VAR 0 3
83375: PPUSH
83376: LD_VAR 0 3
83380: PUSH
83381: LD_INT 1
83383: PLUS
83384: PPUSH
83385: LD_VAR 0 4
83389: PPUSH
83390: CALL_OW 1
83394: ST_TO_ADDR
83395: GO 83321
83397: POP
83398: POP
// end ;
83399: LD_VAR 0 3
83403: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
83404: LD_INT 0
83406: PPUSH
83407: PPUSH
83408: PPUSH
83409: PPUSH
83410: PPUSH
83411: PPUSH
83412: PPUSH
// result := [ ] ;
83413: LD_ADDR_VAR 0 4
83417: PUSH
83418: EMPTY
83419: ST_TO_ADDR
// if x - r < 0 then
83420: LD_VAR 0 1
83424: PUSH
83425: LD_VAR 0 3
83429: MINUS
83430: PUSH
83431: LD_INT 0
83433: LESS
83434: IFFALSE 83446
// min_x := 0 else
83436: LD_ADDR_VAR 0 8
83440: PUSH
83441: LD_INT 0
83443: ST_TO_ADDR
83444: GO 83462
// min_x := x - r ;
83446: LD_ADDR_VAR 0 8
83450: PUSH
83451: LD_VAR 0 1
83455: PUSH
83456: LD_VAR 0 3
83460: MINUS
83461: ST_TO_ADDR
// if y - r < 0 then
83462: LD_VAR 0 2
83466: PUSH
83467: LD_VAR 0 3
83471: MINUS
83472: PUSH
83473: LD_INT 0
83475: LESS
83476: IFFALSE 83488
// min_y := 0 else
83478: LD_ADDR_VAR 0 7
83482: PUSH
83483: LD_INT 0
83485: ST_TO_ADDR
83486: GO 83504
// min_y := y - r ;
83488: LD_ADDR_VAR 0 7
83492: PUSH
83493: LD_VAR 0 2
83497: PUSH
83498: LD_VAR 0 3
83502: MINUS
83503: ST_TO_ADDR
// max_x := x + r ;
83504: LD_ADDR_VAR 0 9
83508: PUSH
83509: LD_VAR 0 1
83513: PUSH
83514: LD_VAR 0 3
83518: PLUS
83519: ST_TO_ADDR
// max_y := y + r ;
83520: LD_ADDR_VAR 0 10
83524: PUSH
83525: LD_VAR 0 2
83529: PUSH
83530: LD_VAR 0 3
83534: PLUS
83535: ST_TO_ADDR
// for _x = min_x to max_x do
83536: LD_ADDR_VAR 0 5
83540: PUSH
83541: DOUBLE
83542: LD_VAR 0 8
83546: DEC
83547: ST_TO_ADDR
83548: LD_VAR 0 9
83552: PUSH
83553: FOR_TO
83554: IFFALSE 83655
// for _y = min_y to max_y do
83556: LD_ADDR_VAR 0 6
83560: PUSH
83561: DOUBLE
83562: LD_VAR 0 7
83566: DEC
83567: ST_TO_ADDR
83568: LD_VAR 0 10
83572: PUSH
83573: FOR_TO
83574: IFFALSE 83651
// begin if not ValidHex ( _x , _y ) then
83576: LD_VAR 0 5
83580: PPUSH
83581: LD_VAR 0 6
83585: PPUSH
83586: CALL_OW 488
83590: NOT
83591: IFFALSE 83595
// continue ;
83593: GO 83573
// if GetResourceTypeXY ( _x , _y ) then
83595: LD_VAR 0 5
83599: PPUSH
83600: LD_VAR 0 6
83604: PPUSH
83605: CALL_OW 283
83609: IFFALSE 83649
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
83611: LD_ADDR_VAR 0 4
83615: PUSH
83616: LD_VAR 0 4
83620: PPUSH
83621: LD_VAR 0 4
83625: PUSH
83626: LD_INT 1
83628: PLUS
83629: PPUSH
83630: LD_VAR 0 5
83634: PUSH
83635: LD_VAR 0 6
83639: PUSH
83640: EMPTY
83641: LIST
83642: LIST
83643: PPUSH
83644: CALL_OW 1
83648: ST_TO_ADDR
// end ;
83649: GO 83573
83651: POP
83652: POP
83653: GO 83553
83655: POP
83656: POP
// end ;
83657: LD_VAR 0 4
83661: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
83662: LD_INT 0
83664: PPUSH
83665: PPUSH
83666: PPUSH
83667: PPUSH
83668: PPUSH
83669: PPUSH
83670: PPUSH
83671: PPUSH
// if not units then
83672: LD_VAR 0 1
83676: NOT
83677: IFFALSE 83681
// exit ;
83679: GO 84205
// result := UnitFilter ( units , [ f_ok ] ) ;
83681: LD_ADDR_VAR 0 3
83685: PUSH
83686: LD_VAR 0 1
83690: PPUSH
83691: LD_INT 50
83693: PUSH
83694: EMPTY
83695: LIST
83696: PPUSH
83697: CALL_OW 72
83701: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
83702: LD_ADDR_VAR 0 8
83706: PUSH
83707: LD_VAR 0 1
83711: PUSH
83712: LD_INT 1
83714: ARRAY
83715: PPUSH
83716: CALL_OW 255
83720: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
83721: LD_ADDR_VAR 0 10
83725: PUSH
83726: LD_INT 29
83728: PUSH
83729: LD_INT 91
83731: PUSH
83732: LD_INT 49
83734: PUSH
83735: EMPTY
83736: LIST
83737: LIST
83738: LIST
83739: ST_TO_ADDR
// if not result then
83740: LD_VAR 0 3
83744: NOT
83745: IFFALSE 83749
// exit ;
83747: GO 84205
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
83749: LD_ADDR_VAR 0 5
83753: PUSH
83754: LD_INT 81
83756: PUSH
83757: LD_VAR 0 8
83761: PUSH
83762: EMPTY
83763: LIST
83764: LIST
83765: PPUSH
83766: CALL_OW 69
83770: ST_TO_ADDR
// for i in result do
83771: LD_ADDR_VAR 0 4
83775: PUSH
83776: LD_VAR 0 3
83780: PUSH
83781: FOR_IN
83782: IFFALSE 84203
// begin tag := GetTag ( i ) + 1 ;
83784: LD_ADDR_VAR 0 9
83788: PUSH
83789: LD_VAR 0 4
83793: PPUSH
83794: CALL_OW 110
83798: PUSH
83799: LD_INT 1
83801: PLUS
83802: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
83803: LD_ADDR_VAR 0 7
83807: PUSH
83808: LD_VAR 0 4
83812: PPUSH
83813: CALL_OW 250
83817: PPUSH
83818: LD_VAR 0 4
83822: PPUSH
83823: CALL_OW 251
83827: PPUSH
83828: LD_INT 6
83830: PPUSH
83831: CALL 83404 0 3
83835: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
83836: LD_VAR 0 4
83840: PPUSH
83841: CALL_OW 247
83845: PUSH
83846: LD_INT 2
83848: EQUAL
83849: PUSH
83850: LD_VAR 0 7
83854: AND
83855: PUSH
83856: LD_VAR 0 4
83860: PPUSH
83861: CALL_OW 264
83865: PUSH
83866: LD_VAR 0 10
83870: IN
83871: NOT
83872: AND
83873: IFFALSE 83912
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
83875: LD_VAR 0 4
83879: PPUSH
83880: LD_VAR 0 7
83884: PUSH
83885: LD_INT 1
83887: ARRAY
83888: PUSH
83889: LD_INT 1
83891: ARRAY
83892: PPUSH
83893: LD_VAR 0 7
83897: PUSH
83898: LD_INT 1
83900: ARRAY
83901: PUSH
83902: LD_INT 2
83904: ARRAY
83905: PPUSH
83906: CALL_OW 116
83910: GO 84201
// if path > tag then
83912: LD_VAR 0 2
83916: PUSH
83917: LD_VAR 0 9
83921: GREATER
83922: IFFALSE 84130
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
83924: LD_ADDR_VAR 0 6
83928: PUSH
83929: LD_VAR 0 5
83933: PPUSH
83934: LD_INT 91
83936: PUSH
83937: LD_VAR 0 4
83941: PUSH
83942: LD_INT 8
83944: PUSH
83945: EMPTY
83946: LIST
83947: LIST
83948: LIST
83949: PPUSH
83950: CALL_OW 72
83954: ST_TO_ADDR
// if nearEnemy then
83955: LD_VAR 0 6
83959: IFFALSE 84028
// begin if GetWeapon ( i ) = ru_time_lapser then
83961: LD_VAR 0 4
83965: PPUSH
83966: CALL_OW 264
83970: PUSH
83971: LD_INT 49
83973: EQUAL
83974: IFFALSE 84002
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
83976: LD_VAR 0 4
83980: PPUSH
83981: LD_VAR 0 6
83985: PPUSH
83986: LD_VAR 0 4
83990: PPUSH
83991: CALL_OW 74
83995: PPUSH
83996: CALL_OW 112
84000: GO 84026
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
84002: LD_VAR 0 4
84006: PPUSH
84007: LD_VAR 0 6
84011: PPUSH
84012: LD_VAR 0 4
84016: PPUSH
84017: CALL_OW 74
84021: PPUSH
84022: NOP4
// end else
84026: GO 84128
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
84028: LD_VAR 0 4
84032: PPUSH
84033: LD_VAR 0 2
84037: PUSH
84038: LD_VAR 0 9
84042: ARRAY
84043: PUSH
84044: LD_INT 1
84046: ARRAY
84047: PPUSH
84048: LD_VAR 0 2
84052: PUSH
84053: LD_VAR 0 9
84057: ARRAY
84058: PUSH
84059: LD_INT 2
84061: ARRAY
84062: PPUSH
84063: CALL_OW 297
84067: PUSH
84068: LD_INT 6
84070: GREATER
84071: IFFALSE 84114
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
84073: LD_VAR 0 4
84077: PPUSH
84078: LD_VAR 0 2
84082: PUSH
84083: LD_VAR 0 9
84087: ARRAY
84088: PUSH
84089: LD_INT 1
84091: ARRAY
84092: PPUSH
84093: LD_VAR 0 2
84097: PUSH
84098: LD_VAR 0 9
84102: ARRAY
84103: PUSH
84104: LD_INT 2
84106: ARRAY
84107: PPUSH
84108: CALL_OW 114
84112: GO 84128
// SetTag ( i , tag ) ;
84114: LD_VAR 0 4
84118: PPUSH
84119: LD_VAR 0 9
84123: PPUSH
84124: CALL_OW 109
// end else
84128: GO 84201
// if enemy then
84130: LD_VAR 0 5
84134: IFFALSE 84201
// begin if GetWeapon ( i ) = ru_time_lapser then
84136: LD_VAR 0 4
84140: PPUSH
84141: CALL_OW 264
84145: PUSH
84146: LD_INT 49
84148: EQUAL
84149: IFFALSE 84177
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
84151: LD_VAR 0 4
84155: PPUSH
84156: LD_VAR 0 5
84160: PPUSH
84161: LD_VAR 0 4
84165: PPUSH
84166: CALL_OW 74
84170: PPUSH
84171: CALL_OW 112
84175: GO 84201
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
84177: LD_VAR 0 4
84181: PPUSH
84182: LD_VAR 0 5
84186: PPUSH
84187: LD_VAR 0 4
84191: PPUSH
84192: CALL_OW 74
84196: PPUSH
84197: NOP4
// end ; end ;
84201: GO 83781
84203: POP
84204: POP
// end ;
84205: LD_VAR 0 3
84209: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
84210: LD_INT 0
84212: PPUSH
84213: PPUSH
84214: PPUSH
// if not unit or IsInUnit ( unit ) then
84215: LD_VAR 0 1
84219: NOT
84220: PUSH
84221: LD_VAR 0 1
84225: PPUSH
84226: CALL_OW 310
84230: OR
84231: IFFALSE 84235
// exit ;
84233: GO 84326
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
84235: LD_ADDR_VAR 0 4
84239: PUSH
84240: LD_VAR 0 1
84244: PPUSH
84245: CALL_OW 250
84249: PPUSH
84250: LD_VAR 0 2
84254: PPUSH
84255: LD_INT 1
84257: PPUSH
84258: CALL_OW 272
84262: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
84263: LD_ADDR_VAR 0 5
84267: PUSH
84268: LD_VAR 0 1
84272: PPUSH
84273: CALL_OW 251
84277: PPUSH
84278: LD_VAR 0 2
84282: PPUSH
84283: LD_INT 1
84285: PPUSH
84286: CALL_OW 273
84290: ST_TO_ADDR
// if ValidHex ( x , y ) then
84291: LD_VAR 0 4
84295: PPUSH
84296: LD_VAR 0 5
84300: PPUSH
84301: CALL_OW 488
84305: IFFALSE 84326
// ComTurnXY ( unit , x , y ) ;
84307: LD_VAR 0 1
84311: PPUSH
84312: LD_VAR 0 4
84316: PPUSH
84317: LD_VAR 0 5
84321: PPUSH
84322: CALL_OW 118
// end ;
84326: LD_VAR 0 3
84330: RET
// export function SeeUnits ( side , units ) ; var i ; begin
84331: LD_INT 0
84333: PPUSH
84334: PPUSH
// result := false ;
84335: LD_ADDR_VAR 0 3
84339: PUSH
84340: LD_INT 0
84342: ST_TO_ADDR
// if not units then
84343: LD_VAR 0 2
84347: NOT
84348: IFFALSE 84352
// exit ;
84350: GO 84397
// for i in units do
84352: LD_ADDR_VAR 0 4
84356: PUSH
84357: LD_VAR 0 2
84361: PUSH
84362: FOR_IN
84363: IFFALSE 84395
// if See ( side , i ) then
84365: LD_VAR 0 1
84369: PPUSH
84370: LD_VAR 0 4
84374: PPUSH
84375: CALL_OW 292
84379: IFFALSE 84393
// begin result := true ;
84381: LD_ADDR_VAR 0 3
84385: PUSH
84386: LD_INT 1
84388: ST_TO_ADDR
// exit ;
84389: POP
84390: POP
84391: GO 84397
// end ;
84393: GO 84362
84395: POP
84396: POP
// end ;
84397: LD_VAR 0 3
84401: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
84402: LD_INT 0
84404: PPUSH
84405: PPUSH
84406: PPUSH
84407: PPUSH
// if not unit or not points then
84408: LD_VAR 0 1
84412: NOT
84413: PUSH
84414: LD_VAR 0 2
84418: NOT
84419: OR
84420: IFFALSE 84424
// exit ;
84422: GO 84514
// dist := 99999 ;
84424: LD_ADDR_VAR 0 5
84428: PUSH
84429: LD_INT 99999
84431: ST_TO_ADDR
// for i in points do
84432: LD_ADDR_VAR 0 4
84436: PUSH
84437: LD_VAR 0 2
84441: PUSH
84442: FOR_IN
84443: IFFALSE 84512
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
84445: LD_ADDR_VAR 0 6
84449: PUSH
84450: LD_VAR 0 1
84454: PPUSH
84455: LD_VAR 0 4
84459: PUSH
84460: LD_INT 1
84462: ARRAY
84463: PPUSH
84464: LD_VAR 0 4
84468: PUSH
84469: LD_INT 2
84471: ARRAY
84472: PPUSH
84473: CALL_OW 297
84477: ST_TO_ADDR
// if tmpDist < dist then
84478: LD_VAR 0 6
84482: PUSH
84483: LD_VAR 0 5
84487: LESS
84488: IFFALSE 84510
// begin result := i ;
84490: LD_ADDR_VAR 0 3
84494: PUSH
84495: LD_VAR 0 4
84499: ST_TO_ADDR
// dist := tmpDist ;
84500: LD_ADDR_VAR 0 5
84504: PUSH
84505: LD_VAR 0 6
84509: ST_TO_ADDR
// end ; end ;
84510: GO 84442
84512: POP
84513: POP
// end ;
84514: LD_VAR 0 3
84518: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
84519: LD_INT 0
84521: PPUSH
// uc_side := side ;
84522: LD_ADDR_OWVAR 20
84526: PUSH
84527: LD_VAR 0 1
84531: ST_TO_ADDR
// uc_nation := 3 ;
84532: LD_ADDR_OWVAR 21
84536: PUSH
84537: LD_INT 3
84539: ST_TO_ADDR
// vc_chassis := 25 ;
84540: LD_ADDR_OWVAR 37
84544: PUSH
84545: LD_INT 25
84547: ST_TO_ADDR
// vc_engine := engine_siberite ;
84548: LD_ADDR_OWVAR 39
84552: PUSH
84553: LD_INT 3
84555: ST_TO_ADDR
// vc_control := control_computer ;
84556: LD_ADDR_OWVAR 38
84560: PUSH
84561: LD_INT 3
84563: ST_TO_ADDR
// vc_weapon := 59 ;
84564: LD_ADDR_OWVAR 40
84568: PUSH
84569: LD_INT 59
84571: ST_TO_ADDR
// result := CreateVehicle ;
84572: LD_ADDR_VAR 0 5
84576: PUSH
84577: CALL_OW 45
84581: ST_TO_ADDR
// SetDir ( result , d ) ;
84582: LD_VAR 0 5
84586: PPUSH
84587: LD_VAR 0 4
84591: PPUSH
84592: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
84596: LD_VAR 0 5
84600: PPUSH
84601: LD_VAR 0 2
84605: PPUSH
84606: LD_VAR 0 3
84610: PPUSH
84611: LD_INT 0
84613: PPUSH
84614: CALL_OW 48
// end ;
84618: LD_VAR 0 5
84622: RET
// export function GetMultiCargo ( export ru_radar export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
84623: LD_INT 0
84625: PPUSH
84626: PPUSH
84627: PPUSH
84628: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
84629: LD_VAR 0 1
84633: PPUSH
84634: CALL_OW 264
84638: PUSH
84639: LD_INT 91
84641: EQUAL
84642: IFFALSE 84714
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
84644: LD_INT 68
84646: PPUSH
84647: LD_VAR 0 1
84651: PPUSH
84652: CALL_OW 255
84656: PPUSH
84657: CALL_OW 321
84661: PUSH
84662: LD_INT 2
84664: EQUAL
84665: IFFALSE 84677
// eff := 70 else
84667: LD_ADDR_VAR 0 4
84671: PUSH
84672: LD_INT 70
84674: ST_TO_ADDR
84675: GO 84685
// eff := 30 ;
84677: LD_ADDR_VAR 0 4
84681: PUSH
84682: LD_INT 30
84684: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
84685: LD_VAR 0 1
84689: PPUSH
84690: CALL_OW 250
84694: PPUSH
84695: LD_VAR 0 1
84699: PPUSH
84700: CALL_OW 251
84704: PPUSH
84705: LD_VAR 0 4
84709: PPUSH
84710: CALL_OW 495
// end ; end ;
84714: LD_VAR 0 2
84718: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
84719: LD_INT 0
84721: PPUSH
// end ;
84722: LD_VAR 0 4
84726: RET
// export function SOS_Command ( cmd ) ; begin
84727: LD_INT 0
84729: PPUSH
// end ;
84730: LD_VAR 0 2
84734: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
84735: LD_INT 0
84737: PPUSH
// end ;
84738: LD_VAR 0 6
84742: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
84743: LD_INT 0
84745: PPUSH
84746: PPUSH
// if not vehicle or not factory then
84747: LD_VAR 0 1
84751: NOT
84752: PUSH
84753: LD_VAR 0 2
84757: NOT
84758: OR
84759: IFFALSE 84763
// exit ;
84761: GO 84994
// if factoryWaypoints >= factory then
84763: LD_EXP 122
84767: PUSH
84768: LD_VAR 0 2
84772: GREATEREQUAL
84773: IFFALSE 84994
// if factoryWaypoints [ factory ] then
84775: LD_EXP 122
84779: PUSH
84780: LD_VAR 0 2
84784: ARRAY
84785: IFFALSE 84994
// begin if GetControl ( vehicle ) = control_manual then
84787: LD_VAR 0 1
84791: PPUSH
84792: CALL_OW 263
84796: PUSH
84797: LD_INT 1
84799: EQUAL
84800: IFFALSE 84881
// begin driver := IsDrivenBy ( vehicle ) ;
84802: LD_ADDR_VAR 0 4
84806: PUSH
84807: LD_VAR 0 1
84811: PPUSH
84812: CALL_OW 311
84816: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84817: LD_VAR 0 4
84821: PPUSH
84822: LD_EXP 122
84826: PUSH
84827: LD_VAR 0 2
84831: ARRAY
84832: PUSH
84833: LD_INT 3
84835: ARRAY
84836: PPUSH
84837: LD_EXP 122
84841: PUSH
84842: LD_VAR 0 2
84846: ARRAY
84847: PUSH
84848: LD_INT 4
84850: ARRAY
84851: PPUSH
84852: CALL_OW 171
// AddComExitVehicle ( driver ) ;
84856: LD_VAR 0 4
84860: PPUSH
84861: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
84865: LD_VAR 0 4
84869: PPUSH
84870: LD_VAR 0 2
84874: PPUSH
84875: CALL_OW 180
// end else
84879: GO 84994
// if GetControl ( vehicle ) = control_remote then
84881: LD_VAR 0 1
84885: PPUSH
84886: CALL_OW 263
84890: PUSH
84891: LD_INT 2
84893: EQUAL
84894: IFFALSE 84955
// begin wait ( 0 0$2 ) ;
84896: LD_INT 70
84898: PPUSH
84899: CALL_OW 67
// if Connect ( vehicle ) then
84903: LD_VAR 0 1
84907: PPUSH
84908: CALL 51677 0 1
84912: IFFALSE 84953
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84914: LD_VAR 0 1
84918: PPUSH
84919: LD_EXP 122
84923: PUSH
84924: LD_VAR 0 2
84928: ARRAY
84929: PUSH
84930: LD_INT 3
84932: ARRAY
84933: PPUSH
84934: LD_EXP 122
84938: PUSH
84939: LD_VAR 0 2
84943: ARRAY
84944: PUSH
84945: LD_INT 4
84947: ARRAY
84948: PPUSH
84949: CALL_OW 171
// end else
84953: GO 84994
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
84955: LD_VAR 0 1
84959: PPUSH
84960: LD_EXP 122
84964: PUSH
84965: LD_VAR 0 2
84969: ARRAY
84970: PUSH
84971: LD_INT 3
84973: ARRAY
84974: PPUSH
84975: LD_EXP 122
84979: PUSH
84980: LD_VAR 0 2
84984: ARRAY
84985: PUSH
84986: LD_INT 4
84988: ARRAY
84989: PPUSH
84990: CALL_OW 171
// end ; end ;
84994: LD_VAR 0 3
84998: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
84999: LD_INT 0
85001: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
85002: LD_VAR 0 1
85006: PUSH
85007: LD_INT 250
85009: EQUAL
85010: PUSH
85011: LD_VAR 0 2
85015: PPUSH
85016: CALL_OW 264
85020: PUSH
85021: LD_INT 81
85023: EQUAL
85024: AND
85025: IFFALSE 85046
// MinerPlaceMine ( unit , x , y ) ;
85027: LD_VAR 0 2
85031: PPUSH
85032: LD_VAR 0 4
85036: PPUSH
85037: LD_VAR 0 5
85041: PPUSH
85042: CALL 87431 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
85046: LD_VAR 0 1
85050: PUSH
85051: LD_INT 251
85053: EQUAL
85054: PUSH
85055: LD_VAR 0 2
85059: PPUSH
85060: CALL_OW 264
85064: PUSH
85065: LD_INT 81
85067: EQUAL
85068: AND
85069: IFFALSE 85090
// MinerDetonateMine ( unit , x , y ) ;
85071: LD_VAR 0 2
85075: PPUSH
85076: LD_VAR 0 4
85080: PPUSH
85081: LD_VAR 0 5
85085: PPUSH
85086: CALL 87706 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
85090: LD_VAR 0 1
85094: PUSH
85095: LD_INT 252
85097: EQUAL
85098: PUSH
85099: LD_VAR 0 2
85103: PPUSH
85104: CALL_OW 264
85108: PUSH
85109: LD_INT 81
85111: EQUAL
85112: AND
85113: IFFALSE 85134
// MinerCreateMinefield ( unit , x , y ) ;
85115: LD_VAR 0 2
85119: PPUSH
85120: LD_VAR 0 4
85124: PPUSH
85125: LD_VAR 0 5
85129: PPUSH
85130: CALL 88123 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
85134: LD_VAR 0 1
85138: PUSH
85139: LD_INT 253
85141: EQUAL
85142: PUSH
85143: LD_VAR 0 2
85147: PPUSH
85148: CALL_OW 257
85152: PUSH
85153: LD_INT 5
85155: EQUAL
85156: AND
85157: IFFALSE 85178
// ComBinocular ( unit , x , y ) ;
85159: LD_VAR 0 2
85163: PPUSH
85164: LD_VAR 0 4
85168: PPUSH
85169: LD_VAR 0 5
85173: PPUSH
85174: CALL 88492 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
85178: LD_VAR 0 1
85182: PUSH
85183: LD_INT 254
85185: EQUAL
85186: PUSH
85187: LD_VAR 0 2
85191: PPUSH
85192: CALL_OW 264
85196: PUSH
85197: LD_INT 99
85199: EQUAL
85200: AND
85201: PUSH
85202: LD_VAR 0 3
85206: PPUSH
85207: CALL_OW 263
85211: PUSH
85212: LD_INT 3
85214: EQUAL
85215: AND
85216: IFFALSE 85232
// HackDestroyVehicle ( unit , selectedUnit ) ;
85218: LD_VAR 0 2
85222: PPUSH
85223: LD_VAR 0 3
85227: PPUSH
85228: CALL 86795 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
85232: LD_VAR 0 1
85236: PUSH
85237: LD_INT 255
85239: EQUAL
85240: PUSH
85241: LD_VAR 0 2
85245: PPUSH
85246: CALL_OW 264
85250: PUSH
85251: LD_INT 14
85253: PUSH
85254: LD_INT 53
85256: PUSH
85257: EMPTY
85258: LIST
85259: LIST
85260: IN
85261: AND
85262: PUSH
85263: LD_VAR 0 4
85267: PPUSH
85268: LD_VAR 0 5
85272: PPUSH
85273: CALL_OW 488
85277: AND
85278: IFFALSE 85302
// CutTreeXYR ( unit , x , y , 12 ) ;
85280: LD_VAR 0 2
85284: PPUSH
85285: LD_VAR 0 4
85289: PPUSH
85290: LD_VAR 0 5
85294: PPUSH
85295: LD_INT 12
85297: PPUSH
85298: CALL 85365 0 4
// if cmd = 256 then
85302: LD_VAR 0 1
85306: PUSH
85307: LD_INT 256
85309: EQUAL
85310: IFFALSE 85331
// SetFactoryWaypoint ( unit , x , y ) ;
85312: LD_VAR 0 2
85316: PPUSH
85317: LD_VAR 0 4
85321: PPUSH
85322: LD_VAR 0 5
85326: PPUSH
85327: CALL 42426 0 3
// if cmd = 257 then
85331: LD_VAR 0 1
85335: PUSH
85336: LD_INT 257
85338: EQUAL
85339: IFFALSE 85360
// SetWarehouseGatheringPoint ( unit , x , y ) ;
85341: LD_VAR 0 2
85345: PPUSH
85346: LD_VAR 0 4
85350: PPUSH
85351: LD_VAR 0 5
85355: PPUSH
85356: CALL 42788 0 3
// end ;
85360: LD_VAR 0 6
85364: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
85365: LD_INT 0
85367: PPUSH
85368: PPUSH
85369: PPUSH
85370: PPUSH
85371: PPUSH
85372: PPUSH
85373: PPUSH
85374: PPUSH
85375: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
85376: LD_VAR 0 1
85380: NOT
85381: PUSH
85382: LD_VAR 0 2
85386: PPUSH
85387: LD_VAR 0 3
85391: PPUSH
85392: CALL_OW 488
85396: NOT
85397: OR
85398: PUSH
85399: LD_VAR 0 4
85403: NOT
85404: OR
85405: IFFALSE 85409
// exit ;
85407: GO 85749
// list := [ ] ;
85409: LD_ADDR_VAR 0 13
85413: PUSH
85414: EMPTY
85415: ST_TO_ADDR
// if x - r < 0 then
85416: LD_VAR 0 2
85420: PUSH
85421: LD_VAR 0 4
85425: MINUS
85426: PUSH
85427: LD_INT 0
85429: LESS
85430: IFFALSE 85442
// min_x := 0 else
85432: LD_ADDR_VAR 0 7
85436: PUSH
85437: LD_INT 0
85439: ST_TO_ADDR
85440: GO 85458
// min_x := x - r ;
85442: LD_ADDR_VAR 0 7
85446: PUSH
85447: LD_VAR 0 2
85451: PUSH
85452: LD_VAR 0 4
85456: MINUS
85457: ST_TO_ADDR
// if y - r < 0 then
85458: LD_VAR 0 3
85462: PUSH
85463: LD_VAR 0 4
85467: MINUS
85468: PUSH
85469: LD_INT 0
85471: LESS
85472: IFFALSE 85484
// min_y := 0 else
85474: LD_ADDR_VAR 0 8
85478: PUSH
85479: LD_INT 0
85481: ST_TO_ADDR
85482: GO 85500
// min_y := y - r ;
85484: LD_ADDR_VAR 0 8
85488: PUSH
85489: LD_VAR 0 3
85493: PUSH
85494: LD_VAR 0 4
85498: MINUS
85499: ST_TO_ADDR
// max_x := x + r ;
85500: LD_ADDR_VAR 0 9
85504: PUSH
85505: LD_VAR 0 2
85509: PUSH
85510: LD_VAR 0 4
85514: PLUS
85515: ST_TO_ADDR
// max_y := y + r ;
85516: LD_ADDR_VAR 0 10
85520: PUSH
85521: LD_VAR 0 3
85525: PUSH
85526: LD_VAR 0 4
85530: PLUS
85531: ST_TO_ADDR
// for _x = min_x to max_x do
85532: LD_ADDR_VAR 0 11
85536: PUSH
85537: DOUBLE
85538: LD_VAR 0 7
85542: DEC
85543: ST_TO_ADDR
85544: LD_VAR 0 9
85548: PUSH
85549: FOR_TO
85550: IFFALSE 85667
// for _y = min_y to max_y do
85552: LD_ADDR_VAR 0 12
85556: PUSH
85557: DOUBLE
85558: LD_VAR 0 8
85562: DEC
85563: ST_TO_ADDR
85564: LD_VAR 0 10
85568: PUSH
85569: FOR_TO
85570: IFFALSE 85663
// begin if not ValidHex ( _x , _y ) then
85572: LD_VAR 0 11
85576: PPUSH
85577: LD_VAR 0 12
85581: PPUSH
85582: CALL_OW 488
85586: NOT
85587: IFFALSE 85591
// continue ;
85589: GO 85569
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
85591: LD_VAR 0 11
85595: PPUSH
85596: LD_VAR 0 12
85600: PPUSH
85601: CALL_OW 351
85605: PUSH
85606: LD_VAR 0 11
85610: PPUSH
85611: LD_VAR 0 12
85615: PPUSH
85616: CALL_OW 554
85620: AND
85621: IFFALSE 85661
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
85623: LD_ADDR_VAR 0 13
85627: PUSH
85628: LD_VAR 0 13
85632: PPUSH
85633: LD_VAR 0 13
85637: PUSH
85638: LD_INT 1
85640: PLUS
85641: PPUSH
85642: LD_VAR 0 11
85646: PUSH
85647: LD_VAR 0 12
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: PPUSH
85656: CALL_OW 2
85660: ST_TO_ADDR
// end ;
85661: GO 85569
85663: POP
85664: POP
85665: GO 85549
85667: POP
85668: POP
// if not list then
85669: LD_VAR 0 13
85673: NOT
85674: IFFALSE 85678
// exit ;
85676: GO 85749
// for i in list do
85678: LD_ADDR_VAR 0 6
85682: PUSH
85683: LD_VAR 0 13
85687: PUSH
85688: FOR_IN
85689: IFFALSE 85747
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
85691: LD_VAR 0 1
85695: PPUSH
85696: LD_STRING M
85698: PUSH
85699: LD_VAR 0 6
85703: PUSH
85704: LD_INT 1
85706: ARRAY
85707: PUSH
85708: LD_VAR 0 6
85712: PUSH
85713: LD_INT 2
85715: ARRAY
85716: PUSH
85717: LD_INT 0
85719: PUSH
85720: LD_INT 0
85722: PUSH
85723: LD_INT 0
85725: PUSH
85726: LD_INT 0
85728: PUSH
85729: EMPTY
85730: LIST
85731: LIST
85732: LIST
85733: LIST
85734: LIST
85735: LIST
85736: LIST
85737: PUSH
85738: EMPTY
85739: LIST
85740: PPUSH
85741: CALL_OW 447
85745: GO 85688
85747: POP
85748: POP
// end ;
85749: LD_VAR 0 5
85753: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
85754: LD_EXP 125
85758: NOT
85759: IFFALSE 85809
85761: GO 85763
85763: DISABLE
// begin initHack := true ;
85764: LD_ADDR_EXP 125
85768: PUSH
85769: LD_INT 1
85771: ST_TO_ADDR
// hackTanks := [ ] ;
85772: LD_ADDR_EXP 126
85776: PUSH
85777: EMPTY
85778: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
85779: LD_ADDR_EXP 127
85783: PUSH
85784: EMPTY
85785: ST_TO_ADDR
// hackLimit := 3 ;
85786: LD_ADDR_EXP 128
85790: PUSH
85791: LD_INT 3
85793: ST_TO_ADDR
// hackDist := 12 ;
85794: LD_ADDR_EXP 129
85798: PUSH
85799: LD_INT 12
85801: ST_TO_ADDR
// hackCounter := [ ] ;
85802: LD_ADDR_EXP 130
85806: PUSH
85807: EMPTY
85808: ST_TO_ADDR
// end ;
85809: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
85810: LD_EXP 125
85814: PUSH
85815: LD_INT 34
85817: PUSH
85818: LD_INT 99
85820: PUSH
85821: EMPTY
85822: LIST
85823: LIST
85824: PPUSH
85825: CALL_OW 69
85829: AND
85830: IFFALSE 86083
85832: GO 85834
85834: DISABLE
85835: LD_INT 0
85837: PPUSH
85838: PPUSH
// begin enable ;
85839: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
85840: LD_ADDR_VAR 0 1
85844: PUSH
85845: LD_INT 34
85847: PUSH
85848: LD_INT 99
85850: PUSH
85851: EMPTY
85852: LIST
85853: LIST
85854: PPUSH
85855: CALL_OW 69
85859: PUSH
85860: FOR_IN
85861: IFFALSE 86081
// begin if not i in hackTanks then
85863: LD_VAR 0 1
85867: PUSH
85868: LD_EXP 126
85872: IN
85873: NOT
85874: IFFALSE 85957
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
85876: LD_ADDR_EXP 126
85880: PUSH
85881: LD_EXP 126
85885: PPUSH
85886: LD_EXP 126
85890: PUSH
85891: LD_INT 1
85893: PLUS
85894: PPUSH
85895: LD_VAR 0 1
85899: PPUSH
85900: CALL_OW 1
85904: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
85905: LD_ADDR_EXP 127
85909: PUSH
85910: LD_EXP 127
85914: PPUSH
85915: LD_EXP 127
85919: PUSH
85920: LD_INT 1
85922: PLUS
85923: PPUSH
85924: EMPTY
85925: PPUSH
85926: CALL_OW 1
85930: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
85931: LD_ADDR_EXP 130
85935: PUSH
85936: LD_EXP 130
85940: PPUSH
85941: LD_EXP 130
85945: PUSH
85946: LD_INT 1
85948: PLUS
85949: PPUSH
85950: EMPTY
85951: PPUSH
85952: CALL_OW 1
85956: ST_TO_ADDR
// end ; if not IsOk ( i ) then
85957: LD_VAR 0 1
85961: PPUSH
85962: CALL_OW 302
85966: NOT
85967: IFFALSE 85980
// begin HackUnlinkAll ( i ) ;
85969: LD_VAR 0 1
85973: PPUSH
85974: CALL 86086 0 1
// continue ;
85978: GO 85860
// end ; HackCheckCapturedStatus ( i ) ;
85980: LD_VAR 0 1
85984: PPUSH
85985: CALL 86529 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
85989: LD_ADDR_VAR 0 2
85993: PUSH
85994: LD_INT 81
85996: PUSH
85997: LD_VAR 0 1
86001: PPUSH
86002: CALL_OW 255
86006: PUSH
86007: EMPTY
86008: LIST
86009: LIST
86010: PUSH
86011: LD_INT 33
86013: PUSH
86014: LD_INT 3
86016: PUSH
86017: EMPTY
86018: LIST
86019: LIST
86020: PUSH
86021: LD_INT 91
86023: PUSH
86024: LD_VAR 0 1
86028: PUSH
86029: LD_EXP 129
86033: PUSH
86034: EMPTY
86035: LIST
86036: LIST
86037: LIST
86038: PUSH
86039: LD_INT 50
86041: PUSH
86042: EMPTY
86043: LIST
86044: PUSH
86045: EMPTY
86046: LIST
86047: LIST
86048: LIST
86049: LIST
86050: PPUSH
86051: CALL_OW 69
86055: ST_TO_ADDR
// if not tmp then
86056: LD_VAR 0 2
86060: NOT
86061: IFFALSE 86065
// continue ;
86063: GO 85860
// HackLink ( i , tmp ) ;
86065: LD_VAR 0 1
86069: PPUSH
86070: LD_VAR 0 2
86074: PPUSH
86075: CALL 86222 0 2
// end ;
86079: GO 85860
86081: POP
86082: POP
// end ;
86083: PPOPN 2
86085: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
86086: LD_INT 0
86088: PPUSH
86089: PPUSH
86090: PPUSH
// if not hack in hackTanks then
86091: LD_VAR 0 1
86095: PUSH
86096: LD_EXP 126
86100: IN
86101: NOT
86102: IFFALSE 86106
// exit ;
86104: GO 86217
// index := GetElementIndex ( hackTanks , hack ) ;
86106: LD_ADDR_VAR 0 4
86110: PUSH
86111: LD_EXP 126
86115: PPUSH
86116: LD_VAR 0 1
86120: PPUSH
86121: CALL 48484 0 2
86125: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
86126: LD_EXP 127
86130: PUSH
86131: LD_VAR 0 4
86135: ARRAY
86136: IFFALSE 86217
// begin for i in hackTanksCaptured [ index ] do
86138: LD_ADDR_VAR 0 3
86142: PUSH
86143: LD_EXP 127
86147: PUSH
86148: LD_VAR 0 4
86152: ARRAY
86153: PUSH
86154: FOR_IN
86155: IFFALSE 86181
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
86157: LD_VAR 0 3
86161: PUSH
86162: LD_INT 1
86164: ARRAY
86165: PPUSH
86166: LD_VAR 0 3
86170: PUSH
86171: LD_INT 2
86173: ARRAY
86174: PPUSH
86175: CALL_OW 235
86179: GO 86154
86181: POP
86182: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
86183: LD_ADDR_EXP 127
86187: PUSH
86188: LD_EXP 127
86192: PPUSH
86193: LD_VAR 0 4
86197: PPUSH
86198: EMPTY
86199: PPUSH
86200: CALL_OW 1
86204: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
86205: LD_VAR 0 1
86209: PPUSH
86210: LD_INT 0
86212: PPUSH
86213: CALL_OW 505
// end ; end ;
86217: LD_VAR 0 2
86221: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
86222: LD_INT 0
86224: PPUSH
86225: PPUSH
86226: PPUSH
// if not hack in hackTanks or not vehicles then
86227: LD_VAR 0 1
86231: PUSH
86232: LD_EXP 126
86236: IN
86237: NOT
86238: PUSH
86239: LD_VAR 0 2
86243: NOT
86244: OR
86245: IFFALSE 86249
// exit ;
86247: GO 86524
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
86249: LD_ADDR_VAR 0 2
86253: PUSH
86254: LD_VAR 0 1
86258: PPUSH
86259: LD_VAR 0 2
86263: PPUSH
86264: LD_INT 1
86266: PPUSH
86267: LD_INT 1
86269: PPUSH
86270: CALL 49134 0 4
86274: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
86275: LD_ADDR_VAR 0 5
86279: PUSH
86280: LD_EXP 126
86284: PPUSH
86285: LD_VAR 0 1
86289: PPUSH
86290: CALL 48484 0 2
86294: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
86295: LD_EXP 127
86299: PUSH
86300: LD_VAR 0 5
86304: ARRAY
86305: PUSH
86306: LD_EXP 128
86310: LESS
86311: IFFALSE 86500
// begin for i := 1 to vehicles do
86313: LD_ADDR_VAR 0 4
86317: PUSH
86318: DOUBLE
86319: LD_INT 1
86321: DEC
86322: ST_TO_ADDR
86323: LD_VAR 0 2
86327: PUSH
86328: FOR_TO
86329: IFFALSE 86498
// begin if hackTanksCaptured [ index ] = hackLimit then
86331: LD_EXP 127
86335: PUSH
86336: LD_VAR 0 5
86340: ARRAY
86341: PUSH
86342: LD_EXP 128
86346: EQUAL
86347: IFFALSE 86351
// break ;
86349: GO 86498
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
86351: LD_ADDR_EXP 130
86355: PUSH
86356: LD_EXP 130
86360: PPUSH
86361: LD_VAR 0 5
86365: PPUSH
86366: LD_EXP 130
86370: PUSH
86371: LD_VAR 0 5
86375: ARRAY
86376: PUSH
86377: LD_INT 1
86379: PLUS
86380: PPUSH
86381: CALL_OW 1
86385: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
86386: LD_ADDR_EXP 127
86390: PUSH
86391: LD_EXP 127
86395: PPUSH
86396: LD_VAR 0 5
86400: PUSH
86401: LD_EXP 127
86405: PUSH
86406: LD_VAR 0 5
86410: ARRAY
86411: PUSH
86412: LD_INT 1
86414: PLUS
86415: PUSH
86416: EMPTY
86417: LIST
86418: LIST
86419: PPUSH
86420: LD_VAR 0 2
86424: PUSH
86425: LD_VAR 0 4
86429: ARRAY
86430: PUSH
86431: LD_VAR 0 2
86435: PUSH
86436: LD_VAR 0 4
86440: ARRAY
86441: PPUSH
86442: CALL_OW 255
86446: PUSH
86447: EMPTY
86448: LIST
86449: LIST
86450: PPUSH
86451: CALL 48699 0 3
86455: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
86456: LD_VAR 0 2
86460: PUSH
86461: LD_VAR 0 4
86465: ARRAY
86466: PPUSH
86467: LD_VAR 0 1
86471: PPUSH
86472: CALL_OW 255
86476: PPUSH
86477: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
86481: LD_VAR 0 2
86485: PUSH
86486: LD_VAR 0 4
86490: ARRAY
86491: PPUSH
86492: CALL_OW 141
// end ;
86496: GO 86328
86498: POP
86499: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86500: LD_VAR 0 1
86504: PPUSH
86505: LD_EXP 127
86509: PUSH
86510: LD_VAR 0 5
86514: ARRAY
86515: PUSH
86516: LD_INT 0
86518: PLUS
86519: PPUSH
86520: CALL_OW 505
// end ;
86524: LD_VAR 0 3
86528: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
86529: LD_INT 0
86531: PPUSH
86532: PPUSH
86533: PPUSH
86534: PPUSH
// if not hack in hackTanks then
86535: LD_VAR 0 1
86539: PUSH
86540: LD_EXP 126
86544: IN
86545: NOT
86546: IFFALSE 86550
// exit ;
86548: GO 86790
// index := GetElementIndex ( hackTanks , hack ) ;
86550: LD_ADDR_VAR 0 4
86554: PUSH
86555: LD_EXP 126
86559: PPUSH
86560: LD_VAR 0 1
86564: PPUSH
86565: CALL 48484 0 2
86569: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
86570: LD_ADDR_VAR 0 3
86574: PUSH
86575: DOUBLE
86576: LD_EXP 127
86580: PUSH
86581: LD_VAR 0 4
86585: ARRAY
86586: INC
86587: ST_TO_ADDR
86588: LD_INT 1
86590: PUSH
86591: FOR_DOWNTO
86592: IFFALSE 86764
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
86594: LD_ADDR_VAR 0 5
86598: PUSH
86599: LD_EXP 127
86603: PUSH
86604: LD_VAR 0 4
86608: ARRAY
86609: PUSH
86610: LD_VAR 0 3
86614: ARRAY
86615: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
86616: LD_VAR 0 5
86620: PUSH
86621: LD_INT 1
86623: ARRAY
86624: PPUSH
86625: CALL_OW 302
86629: NOT
86630: PUSH
86631: LD_VAR 0 5
86635: PUSH
86636: LD_INT 1
86638: ARRAY
86639: PPUSH
86640: CALL_OW 255
86644: PUSH
86645: LD_VAR 0 1
86649: PPUSH
86650: CALL_OW 255
86654: NONEQUAL
86655: OR
86656: IFFALSE 86762
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
86658: LD_VAR 0 5
86662: PUSH
86663: LD_INT 1
86665: ARRAY
86666: PPUSH
86667: CALL_OW 305
86671: PUSH
86672: LD_VAR 0 5
86676: PUSH
86677: LD_INT 1
86679: ARRAY
86680: PPUSH
86681: CALL_OW 255
86685: PUSH
86686: LD_VAR 0 1
86690: PPUSH
86691: CALL_OW 255
86695: EQUAL
86696: AND
86697: IFFALSE 86721
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
86699: LD_VAR 0 5
86703: PUSH
86704: LD_INT 1
86706: ARRAY
86707: PPUSH
86708: LD_VAR 0 5
86712: PUSH
86713: LD_INT 2
86715: ARRAY
86716: PPUSH
86717: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
86721: LD_ADDR_EXP 127
86725: PUSH
86726: LD_EXP 127
86730: PPUSH
86731: LD_VAR 0 4
86735: PPUSH
86736: LD_EXP 127
86740: PUSH
86741: LD_VAR 0 4
86745: ARRAY
86746: PPUSH
86747: LD_VAR 0 3
86751: PPUSH
86752: CALL_OW 3
86756: PPUSH
86757: CALL_OW 1
86761: ST_TO_ADDR
// end ; end ;
86762: GO 86591
86764: POP
86765: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
86766: LD_VAR 0 1
86770: PPUSH
86771: LD_EXP 127
86775: PUSH
86776: LD_VAR 0 4
86780: ARRAY
86781: PUSH
86782: LD_INT 0
86784: PLUS
86785: PPUSH
86786: CALL_OW 505
// end ;
86790: LD_VAR 0 2
86794: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
86795: LD_INT 0
86797: PPUSH
86798: PPUSH
86799: PPUSH
86800: PPUSH
// if not hack in hackTanks then
86801: LD_VAR 0 1
86805: PUSH
86806: LD_EXP 126
86810: IN
86811: NOT
86812: IFFALSE 86816
// exit ;
86814: GO 86901
// index := GetElementIndex ( hackTanks , hack ) ;
86816: LD_ADDR_VAR 0 5
86820: PUSH
86821: LD_EXP 126
86825: PPUSH
86826: LD_VAR 0 1
86830: PPUSH
86831: CALL 48484 0 2
86835: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
86836: LD_ADDR_VAR 0 4
86840: PUSH
86841: DOUBLE
86842: LD_INT 1
86844: DEC
86845: ST_TO_ADDR
86846: LD_EXP 127
86850: PUSH
86851: LD_VAR 0 5
86855: ARRAY
86856: PUSH
86857: FOR_TO
86858: IFFALSE 86899
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
86860: LD_EXP 127
86864: PUSH
86865: LD_VAR 0 5
86869: ARRAY
86870: PUSH
86871: LD_VAR 0 4
86875: ARRAY
86876: PUSH
86877: LD_INT 1
86879: ARRAY
86880: PUSH
86881: LD_VAR 0 2
86885: EQUAL
86886: IFFALSE 86897
// KillUnit ( vehicle ) ;
86888: LD_VAR 0 2
86892: PPUSH
86893: CALL_OW 66
86897: GO 86857
86899: POP
86900: POP
// end ;
86901: LD_VAR 0 3
86905: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
86906: LD_EXP 131
86910: NOT
86911: IFFALSE 86946
86913: GO 86915
86915: DISABLE
// begin initMiner := true ;
86916: LD_ADDR_EXP 131
86920: PUSH
86921: LD_INT 1
86923: ST_TO_ADDR
// minersList := [ ] ;
86924: LD_ADDR_EXP 132
86928: PUSH
86929: EMPTY
86930: ST_TO_ADDR
// minerMinesList := [ ] ;
86931: LD_ADDR_EXP 133
86935: PUSH
86936: EMPTY
86937: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
86938: LD_ADDR_EXP 134
86942: PUSH
86943: LD_INT 5
86945: ST_TO_ADDR
// end ;
86946: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
86947: LD_EXP 131
86951: PUSH
86952: LD_INT 34
86954: PUSH
86955: LD_INT 81
86957: PUSH
86958: EMPTY
86959: LIST
86960: LIST
86961: PPUSH
86962: CALL_OW 69
86966: AND
86967: IFFALSE 87428
86969: GO 86971
86971: DISABLE
86972: LD_INT 0
86974: PPUSH
86975: PPUSH
86976: PPUSH
86977: PPUSH
// begin enable ;
86978: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
86979: LD_ADDR_VAR 0 1
86983: PUSH
86984: LD_INT 34
86986: PUSH
86987: LD_INT 81
86989: PUSH
86990: EMPTY
86991: LIST
86992: LIST
86993: PPUSH
86994: CALL_OW 69
86998: PUSH
86999: FOR_IN
87000: IFFALSE 87072
// begin if not i in minersList then
87002: LD_VAR 0 1
87006: PUSH
87007: LD_EXP 132
87011: IN
87012: NOT
87013: IFFALSE 87070
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
87015: LD_ADDR_EXP 132
87019: PUSH
87020: LD_EXP 132
87024: PPUSH
87025: LD_EXP 132
87029: PUSH
87030: LD_INT 1
87032: PLUS
87033: PPUSH
87034: LD_VAR 0 1
87038: PPUSH
87039: CALL_OW 1
87043: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
87044: LD_ADDR_EXP 133
87048: PUSH
87049: LD_EXP 133
87053: PPUSH
87054: LD_EXP 133
87058: PUSH
87059: LD_INT 1
87061: PLUS
87062: PPUSH
87063: EMPTY
87064: PPUSH
87065: CALL_OW 1
87069: ST_TO_ADDR
// end end ;
87070: GO 86999
87072: POP
87073: POP
// for i := minerMinesList downto 1 do
87074: LD_ADDR_VAR 0 1
87078: PUSH
87079: DOUBLE
87080: LD_EXP 133
87084: INC
87085: ST_TO_ADDR
87086: LD_INT 1
87088: PUSH
87089: FOR_DOWNTO
87090: IFFALSE 87426
// begin if IsLive ( minersList [ i ] ) then
87092: LD_EXP 132
87096: PUSH
87097: LD_VAR 0 1
87101: ARRAY
87102: PPUSH
87103: CALL_OW 300
87107: IFFALSE 87135
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
87109: LD_EXP 132
87113: PUSH
87114: LD_VAR 0 1
87118: ARRAY
87119: PPUSH
87120: LD_EXP 133
87124: PUSH
87125: LD_VAR 0 1
87129: ARRAY
87130: PPUSH
87131: CALL_OW 505
// if not minerMinesList [ i ] then
87135: LD_EXP 133
87139: PUSH
87140: LD_VAR 0 1
87144: ARRAY
87145: NOT
87146: IFFALSE 87150
// continue ;
87148: GO 87089
// for j := minerMinesList [ i ] downto 1 do
87150: LD_ADDR_VAR 0 2
87154: PUSH
87155: DOUBLE
87156: LD_EXP 133
87160: PUSH
87161: LD_VAR 0 1
87165: ARRAY
87166: INC
87167: ST_TO_ADDR
87168: LD_INT 1
87170: PUSH
87171: FOR_DOWNTO
87172: IFFALSE 87422
// begin side := GetSide ( minersList [ i ] ) ;
87174: LD_ADDR_VAR 0 3
87178: PUSH
87179: LD_EXP 132
87183: PUSH
87184: LD_VAR 0 1
87188: ARRAY
87189: PPUSH
87190: CALL_OW 255
87194: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
87195: LD_ADDR_VAR 0 4
87199: PUSH
87200: LD_EXP 133
87204: PUSH
87205: LD_VAR 0 1
87209: ARRAY
87210: PUSH
87211: LD_VAR 0 2
87215: ARRAY
87216: PUSH
87217: LD_INT 1
87219: ARRAY
87220: PPUSH
87221: LD_EXP 133
87225: PUSH
87226: LD_VAR 0 1
87230: ARRAY
87231: PUSH
87232: LD_VAR 0 2
87236: ARRAY
87237: PUSH
87238: LD_INT 2
87240: ARRAY
87241: PPUSH
87242: CALL_OW 428
87246: ST_TO_ADDR
// if not tmp then
87247: LD_VAR 0 4
87251: NOT
87252: IFFALSE 87256
// continue ;
87254: GO 87171
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
87256: LD_VAR 0 4
87260: PUSH
87261: LD_INT 81
87263: PUSH
87264: LD_VAR 0 3
87268: PUSH
87269: EMPTY
87270: LIST
87271: LIST
87272: PPUSH
87273: CALL_OW 69
87277: IN
87278: PUSH
87279: LD_EXP 133
87283: PUSH
87284: LD_VAR 0 1
87288: ARRAY
87289: PUSH
87290: LD_VAR 0 2
87294: ARRAY
87295: PUSH
87296: LD_INT 1
87298: ARRAY
87299: PPUSH
87300: LD_EXP 133
87304: PUSH
87305: LD_VAR 0 1
87309: ARRAY
87310: PUSH
87311: LD_VAR 0 2
87315: ARRAY
87316: PUSH
87317: LD_INT 2
87319: ARRAY
87320: PPUSH
87321: CALL_OW 458
87325: AND
87326: IFFALSE 87420
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
87328: LD_EXP 133
87332: PUSH
87333: LD_VAR 0 1
87337: ARRAY
87338: PUSH
87339: LD_VAR 0 2
87343: ARRAY
87344: PUSH
87345: LD_INT 1
87347: ARRAY
87348: PPUSH
87349: LD_EXP 133
87353: PUSH
87354: LD_VAR 0 1
87358: ARRAY
87359: PUSH
87360: LD_VAR 0 2
87364: ARRAY
87365: PUSH
87366: LD_INT 2
87368: ARRAY
87369: PPUSH
87370: LD_VAR 0 3
87374: PPUSH
87375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
87379: LD_ADDR_EXP 133
87383: PUSH
87384: LD_EXP 133
87388: PPUSH
87389: LD_VAR 0 1
87393: PPUSH
87394: LD_EXP 133
87398: PUSH
87399: LD_VAR 0 1
87403: ARRAY
87404: PPUSH
87405: LD_VAR 0 2
87409: PPUSH
87410: CALL_OW 3
87414: PPUSH
87415: CALL_OW 1
87419: ST_TO_ADDR
// end ; end ;
87420: GO 87171
87422: POP
87423: POP
// end ;
87424: GO 87089
87426: POP
87427: POP
// end ;
87428: PPOPN 4
87430: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
87431: LD_INT 0
87433: PPUSH
87434: PPUSH
// result := false ;
87435: LD_ADDR_VAR 0 4
87439: PUSH
87440: LD_INT 0
87442: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
87443: LD_VAR 0 1
87447: PPUSH
87448: CALL_OW 264
87452: PUSH
87453: LD_INT 81
87455: EQUAL
87456: NOT
87457: IFFALSE 87461
// exit ;
87459: GO 87701
// index := GetElementIndex ( minersList , unit ) ;
87461: LD_ADDR_VAR 0 5
87465: PUSH
87466: LD_EXP 132
87470: PPUSH
87471: LD_VAR 0 1
87475: PPUSH
87476: CALL 48484 0 2
87480: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
87481: LD_EXP 133
87485: PUSH
87486: LD_VAR 0 5
87490: ARRAY
87491: PUSH
87492: LD_EXP 134
87496: GREATEREQUAL
87497: IFFALSE 87501
// exit ;
87499: GO 87701
// ComMoveXY ( unit , x , y ) ;
87501: LD_VAR 0 1
87505: PPUSH
87506: LD_VAR 0 2
87510: PPUSH
87511: LD_VAR 0 3
87515: PPUSH
87516: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
87520: LD_INT 35
87522: PPUSH
87523: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
87527: LD_VAR 0 1
87531: PPUSH
87532: LD_VAR 0 2
87536: PPUSH
87537: LD_VAR 0 3
87541: PPUSH
87542: CALL 79868 0 3
87546: NOT
87547: PUSH
87548: LD_VAR 0 1
87552: PPUSH
87553: CALL_OW 314
87557: AND
87558: IFFALSE 87562
// exit ;
87560: GO 87701
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
87562: LD_VAR 0 2
87566: PPUSH
87567: LD_VAR 0 3
87571: PPUSH
87572: CALL_OW 428
87576: PUSH
87577: LD_VAR 0 1
87581: EQUAL
87582: PUSH
87583: LD_VAR 0 1
87587: PPUSH
87588: CALL_OW 314
87592: NOT
87593: AND
87594: IFFALSE 87520
// PlaySoundXY ( x , y , PlantMine ) ;
87596: LD_VAR 0 2
87600: PPUSH
87601: LD_VAR 0 3
87605: PPUSH
87606: LD_STRING PlantMine
87608: PPUSH
87609: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
87613: LD_VAR 0 2
87617: PPUSH
87618: LD_VAR 0 3
87622: PPUSH
87623: LD_VAR 0 1
87627: PPUSH
87628: CALL_OW 255
87632: PPUSH
87633: LD_INT 0
87635: PPUSH
87636: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
87640: LD_ADDR_EXP 133
87644: PUSH
87645: LD_EXP 133
87649: PPUSH
87650: LD_VAR 0 5
87654: PUSH
87655: LD_EXP 133
87659: PUSH
87660: LD_VAR 0 5
87664: ARRAY
87665: PUSH
87666: LD_INT 1
87668: PLUS
87669: PUSH
87670: EMPTY
87671: LIST
87672: LIST
87673: PPUSH
87674: LD_VAR 0 2
87678: PUSH
87679: LD_VAR 0 3
87683: PUSH
87684: EMPTY
87685: LIST
87686: LIST
87687: PPUSH
87688: CALL 48699 0 3
87692: ST_TO_ADDR
// result := true ;
87693: LD_ADDR_VAR 0 4
87697: PUSH
87698: LD_INT 1
87700: ST_TO_ADDR
// end ;
87701: LD_VAR 0 4
87705: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
87706: LD_INT 0
87708: PPUSH
87709: PPUSH
87710: PPUSH
// if not unit in minersList then
87711: LD_VAR 0 1
87715: PUSH
87716: LD_EXP 132
87720: IN
87721: NOT
87722: IFFALSE 87726
// exit ;
87724: GO 88118
// index := GetElementIndex ( minersList , unit ) ;
87726: LD_ADDR_VAR 0 6
87730: PUSH
87731: LD_EXP 132
87735: PPUSH
87736: LD_VAR 0 1
87740: PPUSH
87741: CALL 48484 0 2
87745: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
87746: LD_ADDR_VAR 0 5
87750: PUSH
87751: DOUBLE
87752: LD_EXP 133
87756: PUSH
87757: LD_VAR 0 6
87761: ARRAY
87762: INC
87763: ST_TO_ADDR
87764: LD_INT 1
87766: PUSH
87767: FOR_DOWNTO
87768: IFFALSE 87929
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
87770: LD_EXP 133
87774: PUSH
87775: LD_VAR 0 6
87779: ARRAY
87780: PUSH
87781: LD_VAR 0 5
87785: ARRAY
87786: PUSH
87787: LD_INT 1
87789: ARRAY
87790: PUSH
87791: LD_VAR 0 2
87795: EQUAL
87796: PUSH
87797: LD_EXP 133
87801: PUSH
87802: LD_VAR 0 6
87806: ARRAY
87807: PUSH
87808: LD_VAR 0 5
87812: ARRAY
87813: PUSH
87814: LD_INT 2
87816: ARRAY
87817: PUSH
87818: LD_VAR 0 3
87822: EQUAL
87823: AND
87824: IFFALSE 87927
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
87826: LD_EXP 133
87830: PUSH
87831: LD_VAR 0 6
87835: ARRAY
87836: PUSH
87837: LD_VAR 0 5
87841: ARRAY
87842: PUSH
87843: LD_INT 1
87845: ARRAY
87846: PPUSH
87847: LD_EXP 133
87851: PUSH
87852: LD_VAR 0 6
87856: ARRAY
87857: PUSH
87858: LD_VAR 0 5
87862: ARRAY
87863: PUSH
87864: LD_INT 2
87866: ARRAY
87867: PPUSH
87868: LD_VAR 0 1
87872: PPUSH
87873: CALL_OW 255
87877: PPUSH
87878: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
87882: LD_ADDR_EXP 133
87886: PUSH
87887: LD_EXP 133
87891: PPUSH
87892: LD_VAR 0 6
87896: PPUSH
87897: LD_EXP 133
87901: PUSH
87902: LD_VAR 0 6
87906: ARRAY
87907: PPUSH
87908: LD_VAR 0 5
87912: PPUSH
87913: CALL_OW 3
87917: PPUSH
87918: CALL_OW 1
87922: ST_TO_ADDR
// exit ;
87923: POP
87924: POP
87925: GO 88118
// end ; end ;
87927: GO 87767
87929: POP
87930: POP
// for i := minerMinesList [ index ] downto 1 do
87931: LD_ADDR_VAR 0 5
87935: PUSH
87936: DOUBLE
87937: LD_EXP 133
87941: PUSH
87942: LD_VAR 0 6
87946: ARRAY
87947: INC
87948: ST_TO_ADDR
87949: LD_INT 1
87951: PUSH
87952: FOR_DOWNTO
87953: IFFALSE 88116
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
87955: LD_EXP 133
87959: PUSH
87960: LD_VAR 0 6
87964: ARRAY
87965: PUSH
87966: LD_VAR 0 5
87970: ARRAY
87971: PUSH
87972: LD_INT 1
87974: ARRAY
87975: PPUSH
87976: LD_EXP 133
87980: PUSH
87981: LD_VAR 0 6
87985: ARRAY
87986: PUSH
87987: LD_VAR 0 5
87991: ARRAY
87992: PUSH
87993: LD_INT 2
87995: ARRAY
87996: PPUSH
87997: LD_VAR 0 2
88001: PPUSH
88002: LD_VAR 0 3
88006: PPUSH
88007: CALL_OW 298
88011: PUSH
88012: LD_INT 6
88014: LESS
88015: IFFALSE 88114
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
88017: LD_EXP 133
88021: PUSH
88022: LD_VAR 0 6
88026: ARRAY
88027: PUSH
88028: LD_VAR 0 5
88032: ARRAY
88033: PUSH
88034: LD_INT 1
88036: ARRAY
88037: PPUSH
88038: LD_EXP 133
88042: PUSH
88043: LD_VAR 0 6
88047: ARRAY
88048: PUSH
88049: LD_VAR 0 5
88053: ARRAY
88054: PUSH
88055: LD_INT 2
88057: ARRAY
88058: PPUSH
88059: LD_VAR 0 1
88063: PPUSH
88064: CALL_OW 255
88068: PPUSH
88069: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
88073: LD_ADDR_EXP 133
88077: PUSH
88078: LD_EXP 133
88082: PPUSH
88083: LD_VAR 0 6
88087: PPUSH
88088: LD_EXP 133
88092: PUSH
88093: LD_VAR 0 6
88097: ARRAY
88098: PPUSH
88099: LD_VAR 0 5
88103: PPUSH
88104: CALL_OW 3
88108: PPUSH
88109: CALL_OW 1
88113: ST_TO_ADDR
// end ; end ;
88114: GO 87952
88116: POP
88117: POP
// end ;
88118: LD_VAR 0 4
88122: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
88123: LD_INT 0
88125: PPUSH
88126: PPUSH
88127: PPUSH
88128: PPUSH
88129: PPUSH
88130: PPUSH
88131: PPUSH
88132: PPUSH
88133: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
88134: LD_VAR 0 1
88138: PPUSH
88139: CALL_OW 264
88143: PUSH
88144: LD_INT 81
88146: EQUAL
88147: NOT
88148: PUSH
88149: LD_VAR 0 1
88153: PUSH
88154: LD_EXP 132
88158: IN
88159: NOT
88160: OR
88161: IFFALSE 88165
// exit ;
88163: GO 88487
// index := GetElementIndex ( minersList , unit ) ;
88165: LD_ADDR_VAR 0 6
88169: PUSH
88170: LD_EXP 132
88174: PPUSH
88175: LD_VAR 0 1
88179: PPUSH
88180: CALL 48484 0 2
88184: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
88185: LD_ADDR_VAR 0 8
88189: PUSH
88190: LD_EXP 134
88194: PUSH
88195: LD_EXP 133
88199: PUSH
88200: LD_VAR 0 6
88204: ARRAY
88205: MINUS
88206: ST_TO_ADDR
// if not minesFreeAmount then
88207: LD_VAR 0 8
88211: NOT
88212: IFFALSE 88216
// exit ;
88214: GO 88487
// tmp := [ ] ;
88216: LD_ADDR_VAR 0 7
88220: PUSH
88221: EMPTY
88222: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
88223: LD_ADDR_VAR 0 5
88227: PUSH
88228: DOUBLE
88229: LD_INT 1
88231: DEC
88232: ST_TO_ADDR
88233: LD_VAR 0 8
88237: PUSH
88238: FOR_TO
88239: IFFALSE 88434
// begin _d := rand ( 0 , 5 ) ;
88241: LD_ADDR_VAR 0 11
88245: PUSH
88246: LD_INT 0
88248: PPUSH
88249: LD_INT 5
88251: PPUSH
88252: CALL_OW 12
88256: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
88257: LD_ADDR_VAR 0 12
88261: PUSH
88262: LD_INT 2
88264: PPUSH
88265: LD_INT 6
88267: PPUSH
88268: CALL_OW 12
88272: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
88273: LD_ADDR_VAR 0 9
88277: PUSH
88278: LD_VAR 0 2
88282: PPUSH
88283: LD_VAR 0 11
88287: PPUSH
88288: LD_VAR 0 12
88292: PPUSH
88293: CALL_OW 272
88297: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
88298: LD_ADDR_VAR 0 10
88302: PUSH
88303: LD_VAR 0 3
88307: PPUSH
88308: LD_VAR 0 11
88312: PPUSH
88313: LD_VAR 0 12
88317: PPUSH
88318: CALL_OW 273
88322: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
88323: LD_VAR 0 9
88327: PPUSH
88328: LD_VAR 0 10
88332: PPUSH
88333: CALL_OW 488
88337: PUSH
88338: LD_VAR 0 9
88342: PUSH
88343: LD_VAR 0 10
88347: PUSH
88348: EMPTY
88349: LIST
88350: LIST
88351: PUSH
88352: LD_VAR 0 7
88356: IN
88357: NOT
88358: AND
88359: PUSH
88360: LD_VAR 0 9
88364: PPUSH
88365: LD_VAR 0 10
88369: PPUSH
88370: CALL_OW 458
88374: NOT
88375: AND
88376: IFFALSE 88418
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
88378: LD_ADDR_VAR 0 7
88382: PUSH
88383: LD_VAR 0 7
88387: PPUSH
88388: LD_VAR 0 7
88392: PUSH
88393: LD_INT 1
88395: PLUS
88396: PPUSH
88397: LD_VAR 0 9
88401: PUSH
88402: LD_VAR 0 10
88406: PUSH
88407: EMPTY
88408: LIST
88409: LIST
88410: PPUSH
88411: CALL_OW 1
88415: ST_TO_ADDR
88416: GO 88432
// i := i - 1 ;
88418: LD_ADDR_VAR 0 5
88422: PUSH
88423: LD_VAR 0 5
88427: PUSH
88428: LD_INT 1
88430: MINUS
88431: ST_TO_ADDR
// end ;
88432: GO 88238
88434: POP
88435: POP
// for i in tmp do
88436: LD_ADDR_VAR 0 5
88440: PUSH
88441: LD_VAR 0 7
88445: PUSH
88446: FOR_IN
88447: IFFALSE 88485
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
88449: LD_VAR 0 1
88453: PPUSH
88454: LD_VAR 0 5
88458: PUSH
88459: LD_INT 1
88461: ARRAY
88462: PPUSH
88463: LD_VAR 0 5
88467: PUSH
88468: LD_INT 2
88470: ARRAY
88471: PPUSH
88472: CALL 87431 0 3
88476: NOT
88477: IFFALSE 88483
// exit ;
88479: POP
88480: POP
88481: GO 88487
88483: GO 88446
88485: POP
88486: POP
// end ;
88487: LD_VAR 0 4
88491: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
88492: LD_INT 0
88494: PPUSH
88495: PPUSH
88496: PPUSH
88497: PPUSH
88498: PPUSH
88499: PPUSH
88500: PPUSH
// if not GetClass ( unit ) = class_sniper then
88501: LD_VAR 0 1
88505: PPUSH
88506: CALL_OW 257
88510: PUSH
88511: LD_INT 5
88513: EQUAL
88514: NOT
88515: IFFALSE 88519
// exit ;
88517: GO 88907
// dist := 8 ;
88519: LD_ADDR_VAR 0 5
88523: PUSH
88524: LD_INT 8
88526: ST_TO_ADDR
// viewRange := 12 ;
88527: LD_ADDR_VAR 0 7
88531: PUSH
88532: LD_INT 12
88534: ST_TO_ADDR
// side := GetSide ( unit ) ;
88535: LD_ADDR_VAR 0 6
88539: PUSH
88540: LD_VAR 0 1
88544: PPUSH
88545: CALL_OW 255
88549: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
88550: LD_INT 61
88552: PPUSH
88553: LD_VAR 0 6
88557: PPUSH
88558: CALL_OW 321
88562: PUSH
88563: LD_INT 2
88565: EQUAL
88566: IFFALSE 88576
// viewRange := 16 ;
88568: LD_ADDR_VAR 0 7
88572: PUSH
88573: LD_INT 16
88575: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
88576: LD_VAR 0 1
88580: PPUSH
88581: LD_VAR 0 2
88585: PPUSH
88586: LD_VAR 0 3
88590: PPUSH
88591: CALL_OW 297
88595: PUSH
88596: LD_VAR 0 5
88600: GREATER
88601: IFFALSE 88680
// begin ComMoveXY ( unit , x , y ) ;
88603: LD_VAR 0 1
88607: PPUSH
88608: LD_VAR 0 2
88612: PPUSH
88613: LD_VAR 0 3
88617: PPUSH
88618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
88622: LD_INT 35
88624: PPUSH
88625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
88629: LD_VAR 0 1
88633: PPUSH
88634: LD_VAR 0 2
88638: PPUSH
88639: LD_VAR 0 3
88643: PPUSH
88644: CALL 79868 0 3
88648: NOT
88649: IFFALSE 88653
// exit ;
88651: GO 88907
// until GetDistUnitXY ( unit , x , y ) < dist ;
88653: LD_VAR 0 1
88657: PPUSH
88658: LD_VAR 0 2
88662: PPUSH
88663: LD_VAR 0 3
88667: PPUSH
88668: CALL_OW 297
88672: PUSH
88673: LD_VAR 0 5
88677: LESS
88678: IFFALSE 88622
// end ; ComTurnXY ( unit , x , y ) ;
88680: LD_VAR 0 1
88684: PPUSH
88685: LD_VAR 0 2
88689: PPUSH
88690: LD_VAR 0 3
88694: PPUSH
88695: CALL_OW 118
// wait ( 5 ) ;
88699: LD_INT 5
88701: PPUSH
88702: CALL_OW 67
// _d := GetDir ( unit ) ;
88706: LD_ADDR_VAR 0 10
88710: PUSH
88711: LD_VAR 0 1
88715: PPUSH
88716: CALL_OW 254
88720: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
88721: LD_ADDR_VAR 0 8
88725: PUSH
88726: LD_VAR 0 1
88730: PPUSH
88731: CALL_OW 250
88735: PPUSH
88736: LD_VAR 0 10
88740: PPUSH
88741: LD_VAR 0 5
88745: PPUSH
88746: CALL_OW 272
88750: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
88751: LD_ADDR_VAR 0 9
88755: PUSH
88756: LD_VAR 0 1
88760: PPUSH
88761: CALL_OW 251
88765: PPUSH
88766: LD_VAR 0 10
88770: PPUSH
88771: LD_VAR 0 5
88775: PPUSH
88776: CALL_OW 273
88780: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88781: LD_VAR 0 8
88785: PPUSH
88786: LD_VAR 0 9
88790: PPUSH
88791: CALL_OW 488
88795: NOT
88796: IFFALSE 88800
// exit ;
88798: GO 88907
// ComAnimCustom ( unit , 1 ) ;
88800: LD_VAR 0 1
88804: PPUSH
88805: LD_INT 1
88807: PPUSH
88808: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
88812: LD_VAR 0 8
88816: PPUSH
88817: LD_VAR 0 9
88821: PPUSH
88822: LD_VAR 0 6
88826: PPUSH
88827: LD_VAR 0 7
88831: PPUSH
88832: CALL_OW 330
// repeat wait ( 1 ) ;
88836: LD_INT 1
88838: PPUSH
88839: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
88843: LD_VAR 0 1
88847: PPUSH
88848: CALL_OW 316
88852: PUSH
88853: LD_VAR 0 1
88857: PPUSH
88858: CALL_OW 314
88862: OR
88863: PUSH
88864: LD_VAR 0 1
88868: PPUSH
88869: CALL_OW 302
88873: NOT
88874: OR
88875: PUSH
88876: LD_VAR 0 1
88880: PPUSH
88881: CALL_OW 301
88885: OR
88886: IFFALSE 88836
// RemoveSeeing ( _x , _y , side ) ;
88888: LD_VAR 0 8
88892: PPUSH
88893: LD_VAR 0 9
88897: PPUSH
88898: LD_VAR 0 6
88902: PPUSH
88903: CALL_OW 331
// end ; end_of_file
88907: LD_VAR 0 4
88911: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
88912: LD_VAR 0 1
88916: PUSH
88917: LD_INT 200
88919: DOUBLE
88920: GREATEREQUAL
88921: IFFALSE 88929
88923: LD_INT 299
88925: DOUBLE
88926: LESSEQUAL
88927: IFTRUE 88931
88929: GO 88963
88931: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
88932: LD_VAR 0 1
88936: PPUSH
88937: LD_VAR 0 2
88941: PPUSH
88942: LD_VAR 0 3
88946: PPUSH
88947: LD_VAR 0 4
88951: PPUSH
88952: LD_VAR 0 5
88956: PPUSH
88957: CALL 84999 0 5
88961: GO 89040
88963: LD_INT 300
88965: DOUBLE
88966: GREATEREQUAL
88967: IFFALSE 88975
88969: LD_INT 399
88971: DOUBLE
88972: LESSEQUAL
88973: IFTRUE 88977
88975: GO 89039
88977: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
88978: LD_VAR 0 1
88982: PPUSH
88983: LD_VAR 0 2
88987: PPUSH
88988: LD_VAR 0 3
88992: PPUSH
88993: LD_VAR 0 4
88997: PPUSH
88998: LD_VAR 0 5
89002: PPUSH
89003: LD_VAR 0 6
89007: PPUSH
89008: LD_VAR 0 7
89012: PPUSH
89013: LD_VAR 0 8
89017: PPUSH
89018: LD_VAR 0 9
89022: PPUSH
89023: LD_VAR 0 10
89027: PPUSH
89028: LD_VAR 0 11
89032: PPUSH
89033: CALL 40438 0 11
89037: GO 89040
89039: POP
// end ;
89040: PPOPN 11
89042: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89043: LD_VAR 0 1
89047: PPUSH
89048: LD_VAR 0 2
89052: PPUSH
89053: LD_VAR 0 3
89057: PPUSH
89058: LD_VAR 0 4
89062: PPUSH
89063: LD_VAR 0 5
89067: PPUSH
89068: CALL 84735 0 5
// end ;
89072: PPOPN 5
89074: END
