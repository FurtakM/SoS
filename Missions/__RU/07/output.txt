// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1075 0 0
// PrepareArabians ;
 313: CALL 4734 0 0
// Nef_PrepareNature ;
 317: CALL 27273 0 0
// MissionIntro ;
 321: CALL 6388 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: LIST
 457: PUSH
 458: LD_OWVAR 67
 462: ARRAY
 463: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 ] [ Difficulty ] ;
 464: LD_ADDR_EXP 28
 468: PUSH
 469: LD_INT 147000
 471: PUSH
 472: LD_INT 126000
 474: PUSH
 475: LD_INT 94500
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: LIST
 482: PUSH
 483: LD_OWVAR 67
 487: ARRAY
 488: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 ] [ Difficulty ] ;
 489: LD_ADDR_EXP 29
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 2
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: LIST
 507: PUSH
 508: LD_OWVAR 67
 512: ARRAY
 513: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 ] [ Difficulty ] ;
 514: LD_ADDR_EXP 30
 518: PUSH
 519: LD_INT 0
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: LIST
 532: PUSH
 533: LD_OWVAR 67
 537: ARRAY
 538: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 31
 543: PUSH
 544: LD_INT 1
 546: PUSH
 547: LD_INT 2
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 32
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: LD_INT 2
 574: PUSH
 575: LD_INT 2
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 33
 593: PUSH
 594: LD_INT 0
 596: PUSH
 597: LD_INT 0
 599: PUSH
 600: LD_INT 1
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 ] [ Difficulty ] ;
 614: LD_ADDR_EXP 34
 618: PUSH
 619: LD_INT 1
 621: PUSH
 622: LD_INT 2
 624: PUSH
 625: LD_INT 3
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: PUSH
 633: LD_OWVAR 67
 637: ARRAY
 638: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 639: LD_ADDR_EXP 35
 643: PUSH
 644: LD_INT 106
 646: PUSH
 647: LD_INT 159
 649: PUSH
 650: EMPTY
 651: LIST
 652: LIST
 653: PUSH
 654: LD_INT 91
 656: PUSH
 657: LD_INT 130
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 75
 666: PUSH
 667: LD_INT 98
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 54
 676: PUSH
 677: LD_INT 60
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PUSH
 684: LD_INT 86
 686: PUSH
 687: LD_INT 54
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PUSH
 694: LD_INT 128
 696: PUSH
 697: LD_INT 42
 699: PUSH
 700: EMPTY
 701: LIST
 702: LIST
 703: PUSH
 704: LD_INT 142
 706: PUSH
 707: LD_INT 29
 709: PUSH
 710: EMPTY
 711: LIST
 712: LIST
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: LIST
 720: LIST
 721: LIST
 722: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 ] [ Difficulty ] ;
 723: LD_ADDR_EXP 36
 727: PUSH
 728: LD_INT 200
 730: PUSH
 731: LD_INT 150
 733: PUSH
 734: LD_INT 100
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: LIST
 741: PUSH
 742: LD_OWVAR 67
 746: ARRAY
 747: ST_TO_ADDR
// end ;
 748: LD_VAR 0 1
 752: RET
// every 0 0$1 trigger debugMode do var i ;
 753: LD_EXP 26
 757: IFFALSE 1072
 759: GO 761
 761: DISABLE
 762: LD_INT 0
 764: PPUSH
// begin enable ;
 765: ENABLE
// FogOff ( your_side ) ;
 766: LD_OWVAR 2
 770: PPUSH
 771: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 775: LD_ADDR_VAR 0 1
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_OWVAR 2
 787: PUSH
 788: EMPTY
 789: LIST
 790: LIST
 791: PUSH
 792: LD_INT 2
 794: PUSH
 795: LD_INT 21
 797: PUSH
 798: LD_INT 1
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: PUSH
 805: LD_INT 21
 807: PUSH
 808: LD_INT 2
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PUSH
 815: EMPTY
 816: LIST
 817: LIST
 818: LIST
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PPUSH
 824: CALL_OW 69
 828: PUSH
 829: FOR_IN
 830: IFFALSE 846
// SetLives ( i , 1000 ) ;
 832: LD_VAR 0 1
 836: PPUSH
 837: LD_INT 1000
 839: PPUSH
 840: CALL_OW 234
 844: GO 829
 846: POP
 847: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 848: LD_ADDR_VAR 0 1
 852: PUSH
 853: LD_INT 22
 855: PUSH
 856: LD_OWVAR 2
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 21
 867: PUSH
 868: LD_INT 1
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PPUSH
 879: CALL_OW 69
 883: PUSH
 884: FOR_IN
 885: IFFALSE 949
// begin SetSkill ( i , skill_combat , 10 ) ;
 887: LD_VAR 0 1
 891: PPUSH
 892: LD_INT 1
 894: PPUSH
 895: LD_INT 10
 897: PPUSH
 898: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 10
 912: PPUSH
 913: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 917: LD_VAR 0 1
 921: PPUSH
 922: LD_INT 3
 924: PPUSH
 925: LD_INT 10
 927: PPUSH
 928: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 932: LD_VAR 0 1
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 10
 942: PPUSH
 943: CALL_OW 237
// end ;
 947: GO 884
 949: POP
 950: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 951: LD_ADDR_VAR 0 1
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_OWVAR 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PUSH
 968: LD_INT 2
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 0
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 30
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: PUSH
 991: EMPTY
 992: LIST
 993: LIST
 994: LIST
 995: PUSH
 996: EMPTY
 997: LIST
 998: LIST
 999: PPUSH
1000: CALL_OW 69
1004: PUSH
1005: FOR_IN
1006: IFFALSE 1070
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1008: LD_VAR 0 1
1012: PPUSH
1013: CALL_OW 274
1017: PPUSH
1018: LD_INT 1
1020: PPUSH
1021: LD_INT 9999
1023: PPUSH
1024: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1028: LD_VAR 0 1
1032: PPUSH
1033: CALL_OW 274
1037: PPUSH
1038: LD_INT 2
1040: PPUSH
1041: LD_INT 9999
1043: PPUSH
1044: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1048: LD_VAR 0 1
1052: PPUSH
1053: CALL_OW 274
1057: PPUSH
1058: LD_INT 3
1060: PPUSH
1061: LD_INT 9999
1063: PPUSH
1064: CALL_OW 277
// end ;
1068: GO 1005
1070: POP
1071: POP
// end ; end_of_file
1072: PPOPN 1
1074: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1075: LD_INT 0
1077: PPUSH
// vsevolodTeam = [ ] ;
1078: LD_ADDR_EXP 52
1082: PUSH
1083: EMPTY
1084: ST_TO_ADDR
// PrepareYashin ;
1085: CALL 3665 0 0
// if savedVsevolod then
1089: LD_EXP 1
1093: IFFALSE 1115
// begin PrepareVsevolodBase ;
1095: CALL 4128 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1099: LD_INT 1
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: CALL 1293 0 2
// SpawnVsevolodTeamInBase ;
1109: CALL 4411 0 0
// end else
1113: GO 1129
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1115: LD_INT 2
1117: PPUSH
1118: LD_INT 5
1120: PPUSH
1121: CALL 1293 0 2
// SpawnPlatonovReinforces ;
1125: CALL 3708 0 0
// end ; if matPredStatus = state_researched then
1129: LD_EXP 4
1133: PUSH
1134: LD_INT 2
1136: EQUAL
1137: IFFALSE 1152
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1139: LD_INT 9
1141: PPUSH
1142: LD_INT 3
1144: PPUSH
1145: LD_INT 2
1147: PPUSH
1148: CALL_OW 322
// end ;
1152: LD_VAR 0 1
1156: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1157: LD_INT 0
1159: PPUSH
// uc_side = 3 ;
1160: LD_ADDR_OWVAR 20
1164: PUSH
1165: LD_INT 3
1167: ST_TO_ADDR
// uc_nation = 3 ;
1168: LD_ADDR_OWVAR 21
1172: PUSH
1173: LD_INT 3
1175: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1176: LD_ADDR_EXP 55
1180: PUSH
1181: LD_STRING Xavier2
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: LD_INT 0
1189: PPUSH
1190: CALL 12122 0 3
1194: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1195: LD_EXP 55
1199: PPUSH
1200: LD_VAR 0 3
1204: PPUSH
1205: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1209: LD_EXP 55
1213: PPUSH
1214: LD_VAR 0 1
1218: PPUSH
1219: LD_VAR 0 2
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 48
// end ;
1231: LD_VAR 0 4
1235: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1236: LD_INT 0
1238: PPUSH
// uc_side = 3 ;
1239: LD_ADDR_OWVAR 20
1243: PUSH
1244: LD_INT 3
1246: ST_TO_ADDR
// uc_nation = 3 ;
1247: LD_ADDR_OWVAR 21
1251: PUSH
1252: LD_INT 3
1254: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1255: LD_ADDR_EXP 55
1259: PUSH
1260: LD_STRING Xavier2
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: LD_INT 0
1268: PPUSH
1269: CALL 12122 0 3
1273: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1274: LD_EXP 55
1278: PPUSH
1279: LD_VAR 0 1
1283: PPUSH
1284: CALL_OW 52
// end ;
1288: LD_VAR 0 2
1292: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1293: LD_INT 0
1295: PPUSH
1296: PPUSH
1297: PPUSH
1298: PPUSH
1299: PPUSH
1300: PPUSH
// uc_side = 3 ;
1301: LD_ADDR_OWVAR 20
1305: PUSH
1306: LD_INT 3
1308: ST_TO_ADDR
// uc_nation = 3 ;
1309: LD_ADDR_OWVAR 21
1313: PUSH
1314: LD_INT 3
1316: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1317: LD_ADDR_EXP 37
1321: PUSH
1322: LD_STRING Burlak
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: LD_INT 0
1330: PPUSH
1331: CALL 12122 0 3
1335: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1336: LD_ADDR_EXP 42
1340: PUSH
1341: LD_STRING Titov
1343: PPUSH
1344: LD_INT 1
1346: PPUSH
1347: LD_INT 0
1349: PPUSH
1350: CALL 12122 0 3
1354: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1355: LD_EXP 42
1359: NOT
1360: PUSH
1361: LD_STRING 06_VSTitov
1363: PPUSH
1364: CALL_OW 28
1368: AND
1369: IFFALSE 1406
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1371: LD_ADDR_EXP 42
1375: PUSH
1376: LD_STRING VSTitov
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL 12122 0 3
1389: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1390: LD_ADDR_EXP 52
1394: PUSH
1395: LD_EXP 52
1399: PUSH
1400: LD_EXP 42
1404: ADD
1405: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1406: LD_ADDR_EXP 43
1410: PUSH
1411: LD_STRING Dolgov
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 0
1419: PPUSH
1420: CALL 12122 0 3
1424: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1425: LD_EXP 43
1429: NOT
1430: PUSH
1431: LD_STRING 06_VSDolgov
1433: PPUSH
1434: CALL_OW 28
1438: AND
1439: IFFALSE 1476
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1441: LD_ADDR_EXP 43
1445: PUSH
1446: LD_STRING VSDolgov
1448: PPUSH
1449: LD_INT 1
1451: PPUSH
1452: LD_INT 0
1454: PPUSH
1455: CALL 12122 0 3
1459: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1460: LD_ADDR_EXP 52
1464: PUSH
1465: LD_EXP 52
1469: PUSH
1470: LD_EXP 43
1474: ADD
1475: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1476: LD_ADDR_EXP 44
1480: PUSH
1481: LD_STRING Lipshchin
1483: PPUSH
1484: LD_INT 1
1486: PPUSH
1487: LD_INT 0
1489: PPUSH
1490: CALL 12122 0 3
1494: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1495: LD_EXP 44
1499: NOT
1500: PUSH
1501: LD_STRING 06_VSLipshchin
1503: PPUSH
1504: CALL_OW 28
1508: AND
1509: IFFALSE 1546
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1511: LD_ADDR_EXP 44
1515: PUSH
1516: LD_STRING VSLipshchin
1518: PPUSH
1519: LD_INT 1
1521: PPUSH
1522: LD_INT 0
1524: PPUSH
1525: CALL 12122 0 3
1529: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1530: LD_ADDR_EXP 52
1534: PUSH
1535: LD_EXP 52
1539: PUSH
1540: LD_EXP 44
1544: ADD
1545: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1546: LD_ADDR_EXP 38
1550: PUSH
1551: LD_STRING Karamazov
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: LD_INT 0
1559: PPUSH
1560: CALL 12122 0 3
1564: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1565: LD_EXP 38
1569: NOT
1570: PUSH
1571: LD_STRING 06_VSKaramazov
1573: PPUSH
1574: CALL_OW 28
1578: AND
1579: IFFALSE 1616
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1581: LD_ADDR_EXP 38
1585: PUSH
1586: LD_STRING VSKaramazov
1588: PPUSH
1589: LD_INT 1
1591: PPUSH
1592: LD_INT 0
1594: PPUSH
1595: CALL 12122 0 3
1599: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1600: LD_ADDR_EXP 52
1604: PUSH
1605: LD_EXP 52
1609: PUSH
1610: LD_EXP 38
1614: ADD
1615: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1616: LD_ADDR_EXP 39
1620: PUSH
1621: LD_STRING Petrovova
1623: PPUSH
1624: LD_INT 1
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: CALL 12122 0 3
1634: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1635: LD_EXP 39
1639: NOT
1640: PUSH
1641: LD_STRING 06_VSPetrovova
1643: PPUSH
1644: CALL_OW 28
1648: AND
1649: IFFALSE 1686
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1651: LD_ADDR_EXP 39
1655: PUSH
1656: LD_STRING VSPetrovova
1658: PPUSH
1659: LD_INT 1
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL 12122 0 3
1669: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1670: LD_ADDR_EXP 52
1674: PUSH
1675: LD_EXP 52
1679: PUSH
1680: LD_EXP 39
1684: ADD
1685: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1686: LD_ADDR_EXP 40
1690: PUSH
1691: LD_STRING Gleb
1693: PPUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 0
1699: PPUSH
1700: CALL 12122 0 3
1704: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1705: LD_EXP 40
1709: NOT
1710: PUSH
1711: LD_STRING 06_VSGleb
1713: PPUSH
1714: CALL_OW 28
1718: AND
1719: IFFALSE 1756
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1721: LD_ADDR_EXP 40
1725: PUSH
1726: LD_STRING VSGleb
1728: PPUSH
1729: LD_INT 1
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL 12122 0 3
1739: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1740: LD_ADDR_EXP 52
1744: PUSH
1745: LD_EXP 52
1749: PUSH
1750: LD_EXP 40
1754: ADD
1755: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1756: LD_ADDR_EXP 41
1760: PUSH
1761: LD_STRING Petrosyan
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: LD_INT 0
1769: PPUSH
1770: CALL 12122 0 3
1774: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1775: LD_EXP 41
1779: NOT
1780: PUSH
1781: LD_STRING 06_VSPetrosyan
1783: PPUSH
1784: CALL_OW 28
1788: AND
1789: IFFALSE 1826
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1791: LD_ADDR_EXP 41
1795: PUSH
1796: LD_STRING VSPetrosyan
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 0
1804: PPUSH
1805: CALL 12122 0 3
1809: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1810: LD_ADDR_EXP 52
1814: PUSH
1815: LD_EXP 52
1819: PUSH
1820: LD_EXP 41
1824: ADD
1825: ST_TO_ADDR
// end ; if savedVsevolod then
1826: LD_EXP 1
1830: IFFALSE 1940
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1832: LD_ADDR_EXP 45
1836: PUSH
1837: LD_STRING Kirilenkova
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 4
1845: PPUSH
1846: CALL 12122 0 3
1850: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1851: LD_ADDR_EXP 46
1855: PUSH
1856: LD_STRING Belkov
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: LD_INT 1
1864: PPUSH
1865: CALL 12122 0 3
1869: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1870: LD_ADDR_EXP 47
1874: PUSH
1875: LD_STRING Belkov2
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_INT 1
1883: PPUSH
1884: CALL 12122 0 3
1888: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1889: LD_ADDR_EXP 48
1893: PUSH
1894: LD_STRING Vsevolod
1896: PPUSH
1897: LD_INT 1
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: CALL 12122 0 3
1907: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1908: LD_EXP 48
1912: PPUSH
1913: LD_INT 4
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1923: LD_EXP 48
1927: PPUSH
1928: LD_INT 100
1930: PPUSH
1931: LD_INT 153
1933: PPUSH
1934: CALL_OW 118
// end else
1938: GO 1979
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1940: LD_ADDR_EXP 45
1944: PUSH
1945: LD_STRING 04_Kirilenkova
1947: PPUSH
1948: CALL_OW 34
1952: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1953: LD_ADDR_EXP 46
1957: PUSH
1958: LD_STRING 04_Belkov
1960: PPUSH
1961: CALL_OW 34
1965: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
1966: LD_ADDR_EXP 47
1970: PUSH
1971: LD_STRING 04_Belkov2
1973: PPUSH
1974: CALL_OW 34
1978: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1979: LD_ADDR_EXP 49
1983: PUSH
1984: LD_STRING Platonov
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: LD_INT 0
1992: PPUSH
1993: CALL 12122 0 3
1997: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
1998: LD_ADDR_EXP 50
2002: PUSH
2003: LD_STRING Popov
2005: PPUSH
2006: LD_INT 0
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL 12122 0 3
2016: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2017: LD_ADDR_EXP 53
2021: PUSH
2022: LD_STRING 06_other_survivors
2024: PPUSH
2025: CALL_OW 31
2029: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2030: LD_ADDR_EXP 54
2034: PUSH
2035: LD_EXP 53
2039: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2040: LD_ADDR_EXP 52
2044: PUSH
2045: LD_EXP 52
2049: PUSH
2050: LD_STRING 06_other_survivors_with_vsevolod
2052: PPUSH
2053: CALL_OW 31
2057: ADD
2058: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2059: LD_ADDR_VAR 0 4
2063: PUSH
2064: DOUBLE
2065: LD_INT 1
2067: DEC
2068: ST_TO_ADDR
2069: LD_EXP 2
2073: PUSH
2074: FOR_TO
2075: IFFALSE 2572
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2077: LD_ADDR_OWVAR 21
2081: PUSH
2082: LD_EXP 2
2086: PUSH
2087: LD_VAR 0 4
2091: ARRAY
2092: PUSH
2093: LD_INT 1
2095: ARRAY
2096: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2097: LD_ADDR_OWVAR 37
2101: PUSH
2102: LD_EXP 2
2106: PUSH
2107: LD_VAR 0 4
2111: ARRAY
2112: PUSH
2113: LD_INT 2
2115: ARRAY
2116: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2117: LD_ADDR_OWVAR 39
2121: PUSH
2122: LD_EXP 2
2126: PUSH
2127: LD_VAR 0 4
2131: ARRAY
2132: PUSH
2133: LD_INT 3
2135: ARRAY
2136: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2137: LD_ADDR_OWVAR 38
2141: PUSH
2142: LD_EXP 2
2146: PUSH
2147: LD_VAR 0 4
2151: ARRAY
2152: PUSH
2153: LD_INT 4
2155: ARRAY
2156: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2157: LD_ADDR_OWVAR 40
2161: PUSH
2162: LD_EXP 2
2166: PUSH
2167: LD_VAR 0 4
2171: ARRAY
2172: PUSH
2173: LD_INT 5
2175: ARRAY
2176: ST_TO_ADDR
// uc_direction := dir ;
2177: LD_ADDR_OWVAR 24
2181: PUSH
2182: LD_VAR 0 2
2186: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2187: LD_ADDR_OWVAR 41
2191: PUSH
2192: LD_INT 60
2194: PPUSH
2195: LD_INT 70
2197: PPUSH
2198: CALL_OW 12
2202: ST_TO_ADDR
// car := CreateVehicle ;
2203: LD_ADDR_VAR 0 6
2207: PUSH
2208: CALL_OW 45
2212: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2213: LD_VAR 0 6
2217: PPUSH
2218: LD_VAR 0 1
2222: PPUSH
2223: LD_INT 0
2225: PPUSH
2226: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2230: LD_EXP 2
2234: PUSH
2235: LD_VAR 0 4
2239: ARRAY
2240: PUSH
2241: LD_INT 6
2243: ARRAY
2244: PUSH
2245: LD_STRING Bur
2247: DOUBLE
2248: EQUAL
2249: IFTRUE 2253
2251: GO 2270
2253: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2254: LD_EXP 37
2258: PPUSH
2259: LD_VAR 0 6
2263: PPUSH
2264: CALL_OW 52
2268: GO 2570
2270: LD_STRING Kar
2272: DOUBLE
2273: EQUAL
2274: IFTRUE 2278
2276: GO 2295
2278: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2279: LD_EXP 38
2283: PPUSH
2284: LD_VAR 0 6
2288: PPUSH
2289: CALL_OW 52
2293: GO 2570
2295: LD_STRING Ptr
2297: DOUBLE
2298: EQUAL
2299: IFTRUE 2303
2301: GO 2320
2303: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2304: LD_EXP 39
2308: PPUSH
2309: LD_VAR 0 6
2313: PPUSH
2314: CALL_OW 52
2318: GO 2570
2320: LD_STRING Glb
2322: DOUBLE
2323: EQUAL
2324: IFTRUE 2328
2326: GO 2345
2328: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2329: LD_EXP 40
2333: PPUSH
2334: LD_VAR 0 6
2338: PPUSH
2339: CALL_OW 52
2343: GO 2570
2345: LD_STRING Pet
2347: DOUBLE
2348: EQUAL
2349: IFTRUE 2353
2351: GO 2370
2353: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2354: LD_EXP 41
2358: PPUSH
2359: LD_VAR 0 6
2363: PPUSH
2364: CALL_OW 52
2368: GO 2570
2370: LD_STRING Dol
2372: DOUBLE
2373: EQUAL
2374: IFTRUE 2378
2376: GO 2395
2378: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2379: LD_EXP 43
2383: PPUSH
2384: LD_VAR 0 6
2388: PPUSH
2389: CALL_OW 52
2393: GO 2570
2395: LD_STRING Lip
2397: DOUBLE
2398: EQUAL
2399: IFTRUE 2403
2401: GO 2420
2403: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2404: LD_EXP 44
2408: PPUSH
2409: LD_VAR 0 6
2413: PPUSH
2414: CALL_OW 52
2418: GO 2570
2420: LD_STRING Tit
2422: DOUBLE
2423: EQUAL
2424: IFTRUE 2428
2426: GO 2445
2428: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2429: LD_EXP 42
2433: PPUSH
2434: LD_VAR 0 6
2438: PPUSH
2439: CALL_OW 52
2443: GO 2570
2445: LD_STRING Kir
2447: DOUBLE
2448: EQUAL
2449: IFTRUE 2453
2451: GO 2470
2453: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2454: LD_EXP 45
2458: PPUSH
2459: LD_VAR 0 6
2463: PPUSH
2464: CALL_OW 52
2468: GO 2570
2470: LD_STRING Bel
2472: DOUBLE
2473: EQUAL
2474: IFTRUE 2478
2476: GO 2495
2478: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2479: LD_EXP 46
2483: PPUSH
2484: LD_VAR 0 6
2488: PPUSH
2489: CALL_OW 52
2493: GO 2570
2495: LD_STRING Bel2
2497: DOUBLE
2498: EQUAL
2499: IFTRUE 2503
2501: GO 2520
2503: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2504: LD_EXP 47
2508: PPUSH
2509: LD_VAR 0 6
2513: PPUSH
2514: CALL_OW 52
2518: GO 2570
2520: LD_STRING rand
2522: DOUBLE
2523: EQUAL
2524: IFTRUE 2528
2526: GO 2569
2528: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2529: LD_EXP 54
2533: PUSH
2534: LD_INT 1
2536: ARRAY
2537: PPUSH
2538: LD_VAR 0 6
2542: PPUSH
2543: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2547: LD_ADDR_EXP 54
2551: PUSH
2552: LD_EXP 54
2556: PUSH
2557: LD_EXP 54
2561: PUSH
2562: LD_INT 1
2564: ARRAY
2565: DIFF
2566: ST_TO_ADDR
// end ; end ;
2567: GO 2570
2569: POP
// end ;
2570: GO 2074
2572: POP
2573: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2574: LD_EXP 37
2578: PUSH
2579: LD_EXP 37
2583: PPUSH
2584: CALL_OW 305
2588: NOT
2589: AND
2590: PUSH
2591: LD_EXP 37
2595: PUSH
2596: LD_EXP 52
2600: IN
2601: NOT
2602: AND
2603: IFFALSE 2622
// PlaceUnitArea ( Burlak , area , false ) ;
2605: LD_EXP 37
2609: PPUSH
2610: LD_VAR 0 1
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2622: LD_EXP 38
2626: PUSH
2627: LD_EXP 38
2631: PPUSH
2632: CALL_OW 305
2636: NOT
2637: AND
2638: PUSH
2639: LD_EXP 38
2643: PUSH
2644: LD_EXP 52
2648: IN
2649: NOT
2650: AND
2651: IFFALSE 2670
// PlaceUnitArea ( Karamazov , area , false ) ;
2653: LD_EXP 38
2657: PPUSH
2658: LD_VAR 0 1
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2670: LD_EXP 39
2674: PUSH
2675: LD_EXP 39
2679: PPUSH
2680: CALL_OW 305
2684: NOT
2685: AND
2686: PUSH
2687: LD_EXP 39
2691: PUSH
2692: LD_EXP 52
2696: IN
2697: NOT
2698: AND
2699: IFFALSE 2718
// PlaceUnitArea ( Petrovova , area , false ) ;
2701: LD_EXP 39
2705: PPUSH
2706: LD_VAR 0 1
2710: PPUSH
2711: LD_INT 0
2713: PPUSH
2714: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2718: LD_EXP 40
2722: PUSH
2723: LD_EXP 40
2727: PPUSH
2728: CALL_OW 305
2732: NOT
2733: AND
2734: PUSH
2735: LD_EXP 40
2739: PUSH
2740: LD_EXP 52
2744: IN
2745: NOT
2746: AND
2747: IFFALSE 2766
// PlaceUnitArea ( Gleb , area , false ) ;
2749: LD_EXP 40
2753: PPUSH
2754: LD_VAR 0 1
2758: PPUSH
2759: LD_INT 0
2761: PPUSH
2762: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2766: LD_EXP 41
2770: PUSH
2771: LD_EXP 41
2775: PPUSH
2776: CALL_OW 305
2780: NOT
2781: AND
2782: PUSH
2783: LD_EXP 41
2787: PUSH
2788: LD_EXP 52
2792: IN
2793: NOT
2794: AND
2795: IFFALSE 2814
// PlaceUnitArea ( Petrosyan , area , false ) ;
2797: LD_EXP 41
2801: PPUSH
2802: LD_VAR 0 1
2806: PPUSH
2807: LD_INT 0
2809: PPUSH
2810: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2814: LD_EXP 43
2818: PUSH
2819: LD_EXP 43
2823: PPUSH
2824: CALL_OW 305
2828: NOT
2829: AND
2830: PUSH
2831: LD_EXP 43
2835: PUSH
2836: LD_EXP 52
2840: IN
2841: NOT
2842: AND
2843: IFFALSE 2862
// PlaceUnitArea ( Dolgov , area , false ) ;
2845: LD_EXP 43
2849: PPUSH
2850: LD_VAR 0 1
2854: PPUSH
2855: LD_INT 0
2857: PPUSH
2858: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2862: LD_EXP 44
2866: PUSH
2867: LD_EXP 44
2871: PPUSH
2872: CALL_OW 305
2876: NOT
2877: AND
2878: PUSH
2879: LD_EXP 44
2883: PUSH
2884: LD_EXP 52
2888: IN
2889: NOT
2890: AND
2891: IFFALSE 2910
// PlaceUnitArea ( Lipshchin , area , false ) ;
2893: LD_EXP 44
2897: PPUSH
2898: LD_VAR 0 1
2902: PPUSH
2903: LD_INT 0
2905: PPUSH
2906: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2910: LD_EXP 42
2914: PUSH
2915: LD_EXP 42
2919: PPUSH
2920: CALL_OW 305
2924: NOT
2925: AND
2926: PUSH
2927: LD_EXP 42
2931: PUSH
2932: LD_EXP 52
2936: IN
2937: NOT
2938: AND
2939: IFFALSE 2958
// PlaceUnitArea ( Titov , area , false ) ;
2941: LD_EXP 42
2945: PPUSH
2946: LD_VAR 0 1
2950: PPUSH
2951: LD_INT 0
2953: PPUSH
2954: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2958: LD_EXP 45
2962: PUSH
2963: LD_EXP 45
2967: PPUSH
2968: CALL_OW 305
2972: NOT
2973: AND
2974: PUSH
2975: LD_EXP 45
2979: PUSH
2980: LD_EXP 52
2984: IN
2985: NOT
2986: AND
2987: PUSH
2988: LD_EXP 1
2992: AND
2993: IFFALSE 3012
// PlaceUnitArea ( Kirilenkova , area , false ) ;
2995: LD_EXP 45
2999: PPUSH
3000: LD_VAR 0 1
3004: PPUSH
3005: LD_INT 0
3007: PPUSH
3008: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3012: LD_EXP 46
3016: PUSH
3017: LD_EXP 46
3021: PPUSH
3022: CALL_OW 305
3026: NOT
3027: AND
3028: PUSH
3029: LD_EXP 46
3033: PUSH
3034: LD_EXP 52
3038: IN
3039: NOT
3040: AND
3041: PUSH
3042: LD_EXP 1
3046: AND
3047: IFFALSE 3066
// PlaceUnitArea ( Belkov , area , false ) ;
3049: LD_EXP 46
3053: PPUSH
3054: LD_VAR 0 1
3058: PPUSH
3059: LD_INT 0
3061: PPUSH
3062: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3066: LD_EXP 47
3070: PUSH
3071: LD_EXP 47
3075: PPUSH
3076: CALL_OW 305
3080: NOT
3081: AND
3082: PUSH
3083: LD_EXP 47
3087: PUSH
3088: LD_EXP 52
3092: IN
3093: NOT
3094: AND
3095: PUSH
3096: LD_EXP 1
3100: AND
3101: IFFALSE 3120
// PlaceUnitArea ( Belkov2 , area , false ) ;
3103: LD_EXP 47
3107: PPUSH
3108: LD_VAR 0 1
3112: PPUSH
3113: LD_INT 0
3115: PPUSH
3116: CALL_OW 49
// for unit in survivorsToPlace do
3120: LD_ADDR_VAR 0 5
3124: PUSH
3125: LD_EXP 54
3129: PUSH
3130: FOR_IN
3131: IFFALSE 3152
// PlaceUnitArea ( unit , area , false ) ;
3133: LD_VAR 0 5
3137: PPUSH
3138: LD_VAR 0 1
3142: PPUSH
3143: LD_INT 0
3145: PPUSH
3146: CALL_OW 49
3150: GO 3130
3152: POP
3153: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3154: LD_ADDR_VAR 0 7
3158: PUSH
3159: LD_INT 22
3161: PUSH
3162: LD_INT 3
3164: PUSH
3165: EMPTY
3166: LIST
3167: LIST
3168: PUSH
3169: LD_INT 21
3171: PUSH
3172: LD_INT 2
3174: PUSH
3175: EMPTY
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 2
3181: PUSH
3182: LD_INT 34
3184: PUSH
3185: LD_INT 51
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: PUSH
3192: LD_INT 34
3194: PUSH
3195: LD_INT 32
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 34
3204: PUSH
3205: LD_INT 12
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: LIST
3222: PPUSH
3223: CALL_OW 69
3227: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3228: LD_ADDR_VAR 0 8
3232: PUSH
3233: LD_INT 22
3235: PUSH
3236: LD_INT 3
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: LD_INT 21
3245: PUSH
3246: LD_INT 2
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 34
3255: PUSH
3256: LD_INT 89
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: PPUSH
3268: CALL_OW 69
3272: ST_TO_ADDR
// if cargoList then
3273: LD_VAR 0 7
3277: IFFALSE 3467
// for i = 1 to cargoList do
3279: LD_ADDR_VAR 0 4
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_VAR 0 7
3293: PUSH
3294: FOR_TO
3295: IFFALSE 3465
// if resourcesFrom06 then
3297: LD_EXP 3
3301: IFFALSE 3463
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3303: LD_EXP 3
3307: PUSH
3308: LD_VAR 0 4
3312: ARRAY
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: PUSH
3318: LD_INT 100
3320: GREATER
3321: NOT
3322: PUSH
3323: LD_EXP 3
3327: PUSH
3328: LD_VAR 0 4
3332: ARRAY
3333: PUSH
3334: LD_INT 2
3336: ARRAY
3337: PUSH
3338: LD_INT 100
3340: GREATER
3341: OR
3342: PUSH
3343: LD_EXP 3
3347: PUSH
3348: LD_VAR 0 4
3352: ARRAY
3353: PUSH
3354: LD_INT 3
3356: ARRAY
3357: PUSH
3358: LD_INT 100
3360: GREATER
3361: OR
3362: IFFALSE 3463
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3364: LD_VAR 0 7
3368: PUSH
3369: LD_VAR 0 4
3373: ARRAY
3374: PPUSH
3375: LD_INT 1
3377: PPUSH
3378: LD_EXP 3
3382: PUSH
3383: LD_VAR 0 4
3387: ARRAY
3388: PUSH
3389: LD_INT 1
3391: ARRAY
3392: PPUSH
3393: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3397: LD_VAR 0 7
3401: PUSH
3402: LD_VAR 0 4
3406: ARRAY
3407: PPUSH
3408: LD_INT 2
3410: PPUSH
3411: LD_EXP 3
3415: PUSH
3416: LD_VAR 0 4
3420: ARRAY
3421: PUSH
3422: LD_INT 2
3424: ARRAY
3425: PPUSH
3426: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3430: LD_VAR 0 7
3434: PUSH
3435: LD_VAR 0 4
3439: ARRAY
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: LD_EXP 3
3448: PUSH
3449: LD_VAR 0 4
3453: ARRAY
3454: PUSH
3455: LD_INT 3
3457: ARRAY
3458: PPUSH
3459: CALL_OW 291
// end ; end ;
3463: GO 3294
3465: POP
3466: POP
// if bigCargoList then
3467: LD_VAR 0 8
3471: IFFALSE 3660
// for i = 1 to bigCargoList do
3473: LD_ADDR_VAR 0 4
3477: PUSH
3478: DOUBLE
3479: LD_INT 1
3481: DEC
3482: ST_TO_ADDR
3483: LD_VAR 0 8
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3658
// if resourcesFrom06 then
3491: LD_EXP 3
3495: IFFALSE 3656
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3497: LD_EXP 3
3501: PUSH
3502: LD_VAR 0 4
3506: ARRAY
3507: PUSH
3508: LD_INT 1
3510: ARRAY
3511: PUSH
3512: LD_INT 100
3514: GREATER
3515: PUSH
3516: LD_EXP 3
3520: PUSH
3521: LD_VAR 0 4
3525: ARRAY
3526: PUSH
3527: LD_INT 2
3529: ARRAY
3530: PUSH
3531: LD_INT 100
3533: GREATER
3534: OR
3535: PUSH
3536: LD_EXP 3
3540: PUSH
3541: LD_VAR 0 4
3545: ARRAY
3546: PUSH
3547: LD_INT 3
3549: ARRAY
3550: PUSH
3551: LD_INT 100
3553: GREATER
3554: OR
3555: IFFALSE 3656
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3557: LD_VAR 0 8
3561: PUSH
3562: LD_VAR 0 4
3566: ARRAY
3567: PPUSH
3568: LD_INT 1
3570: PPUSH
3571: LD_EXP 3
3575: PUSH
3576: LD_VAR 0 4
3580: ARRAY
3581: PUSH
3582: LD_INT 1
3584: ARRAY
3585: PPUSH
3586: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3590: LD_VAR 0 8
3594: PUSH
3595: LD_VAR 0 4
3599: ARRAY
3600: PPUSH
3601: LD_INT 2
3603: PPUSH
3604: LD_EXP 3
3608: PUSH
3609: LD_VAR 0 4
3613: ARRAY
3614: PUSH
3615: LD_INT 2
3617: ARRAY
3618: PPUSH
3619: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3623: LD_VAR 0 8
3627: PUSH
3628: LD_VAR 0 4
3632: ARRAY
3633: PPUSH
3634: LD_INT 3
3636: PPUSH
3637: LD_EXP 3
3641: PUSH
3642: LD_VAR 0 4
3646: ARRAY
3647: PUSH
3648: LD_INT 3
3650: ARRAY
3651: PPUSH
3652: CALL_OW 291
// end ; end ;
3656: GO 3488
3658: POP
3659: POP
// end ;
3660: LD_VAR 0 3
3664: RET
// function PrepareYashin ; begin
3665: LD_INT 0
3667: PPUSH
// uc_side = 6 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 6
3675: ST_TO_ADDR
// uc_nation = 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3684: LD_ADDR_EXP 51
3688: PUSH
3689: LD_STRING Yashin
3691: PPUSH
3692: LD_INT 0
3694: PPUSH
3695: LD_INT 0
3697: PPUSH
3698: CALL 12122 0 3
3702: ST_TO_ADDR
// end ;
3703: LD_VAR 0 1
3707: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3708: LD_INT 0
3710: PPUSH
3711: PPUSH
3712: PPUSH
3713: PPUSH
// uc_side = 3 ;
3714: LD_ADDR_OWVAR 20
3718: PUSH
3719: LD_INT 3
3721: ST_TO_ADDR
// uc_nation = 3 ;
3722: LD_ADDR_OWVAR 21
3726: PUSH
3727: LD_INT 3
3729: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3730: LD_INT 0
3732: PPUSH
3733: LD_INT 4
3735: PPUSH
3736: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3740: LD_INT 22
3742: PPUSH
3743: LD_INT 1
3745: PPUSH
3746: LD_INT 1
3748: PPUSH
3749: LD_INT 43
3751: PUSH
3752: LD_INT 44
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 1
3761: PPUSH
3762: LD_INT 2
3764: PPUSH
3765: CALL_OW 12
3769: ARRAY
3770: PPUSH
3771: LD_INT 50
3773: PPUSH
3774: LD_INT 60
3776: PPUSH
3777: CALL_OW 12
3781: PPUSH
3782: CALL 45885 0 5
// veh = CreateVehicle ;
3786: LD_ADDR_VAR 0 4
3790: PUSH
3791: CALL_OW 45
3795: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3796: LD_VAR 0 4
3800: PPUSH
3801: LD_INT 0
3803: PPUSH
3804: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3808: LD_VAR 0 4
3812: PPUSH
3813: LD_INT 2
3815: PPUSH
3816: LD_INT 0
3818: PPUSH
3819: CALL_OW 49
// if Belkov then
3823: LD_EXP 46
3827: IFFALSE 3845
// PlaceHumanInUnit ( Belkov , veh ) else
3829: LD_EXP 46
3833: PPUSH
3834: LD_VAR 0 4
3838: PPUSH
3839: CALL_OW 52
3843: GO 3889
// if Difficulty = 1 or Difficulty = 2 then
3845: LD_OWVAR 67
3849: PUSH
3850: LD_INT 1
3852: EQUAL
3853: PUSH
3854: LD_OWVAR 67
3858: PUSH
3859: LD_INT 2
3861: EQUAL
3862: OR
3863: IFFALSE 3889
// begin un = CreateHuman ;
3865: LD_ADDR_VAR 0 3
3869: PUSH
3870: CALL_OW 44
3874: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3875: LD_VAR 0 3
3879: PPUSH
3880: LD_VAR 0 4
3884: PPUSH
3885: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3889: LD_INT 22
3891: PPUSH
3892: LD_INT 1
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: LD_INT 51
3900: PPUSH
3901: LD_INT 50
3903: PPUSH
3904: LD_INT 60
3906: PPUSH
3907: CALL_OW 12
3911: PPUSH
3912: CALL 45885 0 5
// veh = CreateVehicle ;
3916: LD_ADDR_VAR 0 4
3920: PUSH
3921: CALL_OW 45
3925: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3926: LD_VAR 0 4
3930: PPUSH
3931: LD_INT 0
3933: PPUSH
3934: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3938: LD_VAR 0 4
3942: PPUSH
3943: LD_INT 2
3945: PPUSH
3946: LD_INT 0
3948: PPUSH
3949: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3953: LD_VAR 0 4
3957: PPUSH
3958: LD_INT 1
3960: PPUSH
3961: LD_INT 100
3963: PPUSH
3964: CALL_OW 290
// if Belkov2 then
3968: LD_EXP 47
3972: IFFALSE 3990
// PlaceHumanInUnit ( Belkov2 , veh ) else
3974: LD_EXP 47
3978: PPUSH
3979: LD_VAR 0 4
3983: PPUSH
3984: CALL_OW 52
3988: GO 4024
// if Difficulty = 1 then
3990: LD_OWVAR 67
3994: PUSH
3995: LD_INT 1
3997: EQUAL
3998: IFFALSE 4024
// begin un = CreateHuman ;
4000: LD_ADDR_VAR 0 3
4004: PUSH
4005: CALL_OW 44
4009: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4010: LD_VAR 0 3
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
// end ; if Kirilenkova then
4024: LD_EXP 45
4028: IFFALSE 4123
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4030: LD_INT 22
4032: PPUSH
4033: LD_INT 1
4035: PPUSH
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 51
4041: PPUSH
4042: LD_INT 50
4044: PPUSH
4045: LD_INT 60
4047: PPUSH
4048: CALL_OW 12
4052: PPUSH
4053: CALL 45885 0 5
// veh = CreateVehicle ;
4057: LD_ADDR_VAR 0 4
4061: PUSH
4062: CALL_OW 45
4066: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4067: LD_VAR 0 4
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_INT 2
4086: PPUSH
4087: LD_INT 0
4089: PPUSH
4090: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4094: LD_VAR 0 4
4098: PPUSH
4099: LD_INT 1
4101: PPUSH
4102: LD_INT 100
4104: PPUSH
4105: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4109: LD_EXP 45
4113: PPUSH
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 52
// end ; end ;
4123: LD_VAR 0 1
4127: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
4132: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4133: LD_INT 67
4135: PPUSH
4136: LD_INT 115
4138: PPUSH
4139: LD_INT 3
4141: PPUSH
4142: CALL_OW 441
// uc_side = 3 ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_INT 3
4153: ST_TO_ADDR
// uc_nation = 3 ;
4154: LD_ADDR_OWVAR 21
4158: PUSH
4159: LD_INT 3
4161: ST_TO_ADDR
// bc_level = 5 ;
4162: LD_ADDR_OWVAR 43
4166: PUSH
4167: LD_INT 5
4169: ST_TO_ADDR
// bc_type = b_depot ;
4170: LD_ADDR_OWVAR 42
4174: PUSH
4175: LD_INT 0
4177: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4178: LD_ADDR_VAR 0 3
4182: PUSH
4183: LD_INT 53
4185: PPUSH
4186: LD_INT 97
4188: PPUSH
4189: LD_INT 1
4191: PPUSH
4192: CALL_OW 47
4196: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4197: LD_VAR 0 3
4201: PPUSH
4202: LD_STRING gorkij
4204: PPUSH
4205: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4209: LD_VAR 0 3
4213: PPUSH
4214: CALL_OW 274
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_EXP 36
4226: PPUSH
4227: CALL_OW 277
// bc_type = b_lab_half ;
4231: LD_ADDR_OWVAR 42
4235: PUSH
4236: LD_INT 7
4238: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4239: LD_ADDR_OWVAR 44
4243: PUSH
4244: LD_INT 14
4246: ST_TO_ADDR
// if matPredStatus = state_researched then
4247: LD_EXP 4
4251: PUSH
4252: LD_INT 2
4254: EQUAL
4255: IFFALSE 4275
// begin bc_type = b_lab_full ;
4257: LD_ADDR_OWVAR 42
4261: PUSH
4262: LD_INT 8
4264: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4265: LD_ADDR_OWVAR 45
4269: PUSH
4270: LD_INT 12
4272: ST_TO_ADDR
4273: GO 4283
// bc_kind2 = b_lab_basic ;
4275: LD_ADDR_OWVAR 45
4279: PUSH
4280: LD_INT 9
4282: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4283: LD_INT 58
4285: PPUSH
4286: LD_INT 105
4288: PPUSH
4289: LD_INT 1
4291: PPUSH
4292: CALL_OW 47
// bc_type = b_armoury ;
4296: LD_ADDR_OWVAR 42
4300: PUSH
4301: LD_INT 4
4303: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4304: LD_INT 65
4306: PPUSH
4307: LD_INT 93
4309: PPUSH
4310: LD_INT 3
4312: PPUSH
4313: CALL_OW 47
// bc_type = b_oil_mine ;
4317: LD_ADDR_OWVAR 42
4321: PUSH
4322: LD_INT 29
4324: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4325: LD_INT 67
4327: PPUSH
4328: LD_INT 115
4330: PPUSH
4331: LD_INT 3
4333: PPUSH
4334: CALL_OW 47
// bc_type = b_oil_power ;
4338: LD_ADDR_OWVAR 42
4342: PUSH
4343: LD_INT 26
4345: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4346: LD_INT 68
4348: PPUSH
4349: LD_INT 104
4351: PPUSH
4352: LD_INT 4
4354: PPUSH
4355: CALL_OW 47
// bc_type = b_breastwork ;
4359: LD_ADDR_OWVAR 42
4363: PUSH
4364: LD_INT 31
4366: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4367: LD_INT 60
4369: PPUSH
4370: LD_INT 91
4372: PPUSH
4373: LD_INT 3
4375: PPUSH
4376: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4380: LD_INT 73
4382: PPUSH
4383: LD_INT 112
4385: PPUSH
4386: LD_INT 5
4388: PPUSH
4389: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4393: LD_INT 66
4395: PPUSH
4396: LD_INT 118
4398: PPUSH
4399: LD_INT 5
4401: PPUSH
4402: CALL_OW 47
// end ;
4406: LD_VAR 0 1
4410: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4411: LD_INT 0
4413: PPUSH
4414: PPUSH
4415: PPUSH
4416: PPUSH
4417: PPUSH
// for unit in vsevolodTeam do
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: LD_EXP 52
4427: PUSH
4428: FOR_IN
4429: IFFALSE 4727
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_INT 22
4438: PUSH
4439: LD_INT 3
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 21
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 30
4458: PUSH
4459: LD_INT 31
4461: PUSH
4462: EMPTY
4463: LIST
4464: LIST
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PUSH
4476: FOR_IN
4477: IFFALSE 4519
// if not UnitsInside ( building ) then
4479: LD_VAR 0 4
4483: PPUSH
4484: CALL_OW 313
4488: NOT
4489: IFFALSE 4517
// begin PlaceHumanInBunker ( unit , building ) ;
4491: LD_VAR 0 2
4495: PPUSH
4496: LD_VAR 0 4
4500: PPUSH
4501: CALL 12724 0 2
// SetClass ( unit , 1 ) ;
4505: LD_VAR 0 2
4509: PPUSH
4510: LD_INT 1
4512: PPUSH
4513: CALL_OW 336
// end ;
4517: GO 4476
4519: POP
4520: POP
// if not IsInUnit ( unit ) then
4521: LD_VAR 0 2
4525: PPUSH
4526: CALL_OW 310
4530: NOT
4531: IFFALSE 4725
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: LD_INT 22
4540: PUSH
4541: LD_INT 3
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 21
4550: PUSH
4551: LD_INT 3
4553: PUSH
4554: EMPTY
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 2
4560: PUSH
4561: LD_INT 30
4563: PUSH
4564: LD_INT 0
4566: PUSH
4567: EMPTY
4568: LIST
4569: LIST
4570: PUSH
4571: LD_INT 30
4573: PUSH
4574: LD_INT 4
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 30
4583: PUSH
4584: LD_INT 7
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4607: LD_ADDR_VAR 0 5
4611: PUSH
4612: LD_VAR 0 3
4616: PUSH
4617: LD_INT 1
4619: PPUSH
4620: LD_VAR 0 3
4624: PPUSH
4625: CALL_OW 12
4629: ARRAY
4630: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4631: LD_VAR 0 2
4635: PPUSH
4636: LD_VAR 0 5
4640: PPUSH
4641: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4645: LD_VAR 0 5
4649: PPUSH
4650: CALL_OW 266
4654: PUSH
4655: LD_INT 0
4657: DOUBLE
4658: EQUAL
4659: IFTRUE 4663
4661: GO 4678
4663: POP
// SetClass ( unit , 2 ) ; b_armoury :
4664: LD_VAR 0 2
4668: PPUSH
4669: LD_INT 2
4671: PPUSH
4672: CALL_OW 336
4676: GO 4725
4678: LD_INT 4
4680: DOUBLE
4681: EQUAL
4682: IFTRUE 4686
4684: GO 4701
4686: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4687: LD_VAR 0 2
4691: PPUSH
4692: LD_INT 1
4694: PPUSH
4695: CALL_OW 336
4699: GO 4725
4701: LD_INT 7
4703: DOUBLE
4704: EQUAL
4705: IFTRUE 4709
4707: GO 4724
4709: POP
// SetClass ( unit , 4 ) ; end ;
4710: LD_VAR 0 2
4714: PPUSH
4715: LD_INT 4
4717: PPUSH
4718: CALL_OW 336
4722: GO 4725
4724: POP
// end ; end ;
4725: GO 4428
4727: POP
4728: POP
// end ; end_of_file
4729: LD_VAR 0 1
4733: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4734: LD_INT 0
4736: PPUSH
// remoteVehs = [ ] ;
4737: LD_ADDR_EXP 60
4741: PUSH
4742: EMPTY
4743: ST_TO_ADDR
// minesList = [ ] ;
4744: LD_ADDR_EXP 61
4748: PUSH
4749: EMPTY
4750: ST_TO_ADDR
// heikeGroup = [ ] ;
4751: LD_ADDR_EXP 58
4755: PUSH
4756: EMPTY
4757: ST_TO_ADDR
// PrepareXavierAr ;
4758: CALL 6281 0 0
// PrepareKabulBase ;
4762: CALL 5472 0 0
// end ;
4766: LD_VAR 0 1
4770: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4771: LD_INT 0
4773: PPUSH
4774: PPUSH
4775: PPUSH
// solds = [ ] ;
4776: LD_ADDR_VAR 0 3
4780: PUSH
4781: EMPTY
4782: ST_TO_ADDR
// uc_side = 2 ;
4783: LD_ADDR_OWVAR 20
4787: PUSH
4788: LD_INT 2
4790: ST_TO_ADDR
// uc_nation = 2 ;
4791: LD_ADDR_OWVAR 21
4795: PUSH
4796: LD_INT 2
4798: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4799: LD_INT 0
4801: PPUSH
4802: LD_INT 1
4804: PPUSH
4805: CALL_OW 381
// for i := 1 to 2 do
4809: LD_ADDR_VAR 0 2
4813: PUSH
4814: DOUBLE
4815: LD_INT 1
4817: DEC
4818: ST_TO_ADDR
4819: LD_INT 2
4821: PUSH
4822: FOR_TO
4823: IFFALSE 4882
// begin solds = solds ^ CreateHuman ;
4825: LD_ADDR_VAR 0 3
4829: PUSH
4830: LD_VAR 0 3
4834: PUSH
4835: CALL_OW 44
4839: ADD
4840: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4841: LD_VAR 0 3
4845: PUSH
4846: LD_VAR 0 2
4850: ARRAY
4851: PPUSH
4852: LD_INT 4
4854: PPUSH
4855: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4859: LD_VAR 0 3
4863: PUSH
4864: LD_VAR 0 2
4868: ARRAY
4869: PPUSH
4870: LD_INT 5
4872: PPUSH
4873: LD_INT 0
4875: PPUSH
4876: CALL_OW 49
// end ;
4880: GO 4822
4882: POP
4883: POP
// result = solds ;
4884: LD_ADDR_VAR 0 1
4888: PUSH
4889: LD_VAR 0 3
4893: ST_TO_ADDR
// end ;
4894: LD_VAR 0 1
4898: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4899: LD_INT 0
4901: PPUSH
4902: PPUSH
4903: PPUSH
4904: PPUSH
4905: PPUSH
4906: PPUSH
4907: PPUSH
4908: PPUSH
// uc_side = 8 ;
4909: LD_ADDR_OWVAR 20
4913: PUSH
4914: LD_INT 8
4916: ST_TO_ADDR
// uc_nation = 2 ;
4917: LD_ADDR_OWVAR 21
4921: PUSH
4922: LD_INT 2
4924: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4925: LD_ADDR_EXP 56
4929: PUSH
4930: LD_STRING Heike
4932: PPUSH
4933: LD_INT 0
4935: PPUSH
4936: LD_INT 0
4938: PPUSH
4939: CALL 12122 0 3
4943: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4944: LD_ADDR_VAR 0 5
4948: PUSH
4949: LD_INT 27
4951: PUSH
4952: LD_INT 28
4954: PUSH
4955: LD_INT 26
4957: PUSH
4958: LD_INT 23
4960: PUSH
4961: LD_INT 25
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
4971: LD_INT 14
4973: PPUSH
4974: LD_INT 1
4976: PPUSH
4977: LD_INT 1
4979: PPUSH
4980: LD_VAR 0 5
4984: PUSH
4985: LD_INT 1
4987: PPUSH
4988: LD_VAR 0 5
4992: PPUSH
4993: CALL_OW 12
4997: ARRAY
4998: PPUSH
4999: LD_INT 65
5001: PPUSH
5002: CALL 45885 0 5
// heikeVehicle = CreateVehicle ;
5006: LD_ADDR_EXP 57
5010: PUSH
5011: CALL_OW 45
5015: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5016: LD_EXP 57
5020: PPUSH
5021: LD_INT 20
5023: PPUSH
5024: LD_INT 0
5026: PPUSH
5027: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5031: LD_EXP 57
5035: PPUSH
5036: LD_INT 1
5038: PPUSH
5039: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5043: LD_EXP 56
5047: PPUSH
5048: LD_EXP 57
5052: PPUSH
5053: CALL_OW 52
// uc_side = 2 ;
5057: LD_ADDR_OWVAR 20
5061: PUSH
5062: LD_INT 2
5064: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5065: LD_ADDR_VAR 0 6
5069: PUSH
5070: LD_EXP 29
5074: ST_TO_ADDR
// if not heikeHeavyLosses then
5075: LD_EXP 5
5079: NOT
5080: IFFALSE 5098
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5082: LD_ADDR_VAR 0 6
5086: PUSH
5087: LD_VAR 0 6
5091: PUSH
5092: LD_EXP 32
5096: PLUS
5097: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5098: LD_ADDR_VAR 0 7
5102: PUSH
5103: LD_EXP 30
5107: ST_TO_ADDR
// if not heikeHeavyLosses then
5108: LD_EXP 5
5112: NOT
5113: IFFALSE 5131
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5115: LD_ADDR_VAR 0 7
5119: PUSH
5120: LD_VAR 0 7
5124: PUSH
5125: LD_EXP 33
5129: PLUS
5130: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5131: LD_ADDR_VAR 0 8
5135: PUSH
5136: LD_EXP 31
5140: ST_TO_ADDR
// if not heikeHeavyLosses then
5141: LD_EXP 5
5145: NOT
5146: IFFALSE 5164
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5148: LD_ADDR_VAR 0 8
5152: PUSH
5153: LD_VAR 0 8
5157: PUSH
5158: LD_EXP 34
5162: PLUS
5163: ST_TO_ADDR
// for i := 1 to soldAmount do
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: DOUBLE
5170: LD_INT 1
5172: DEC
5173: ST_TO_ADDR
5174: LD_VAR 0 6
5178: PUSH
5179: FOR_TO
5180: IFFALSE 5237
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5182: LD_INT 0
5184: PPUSH
5185: LD_EXP 27
5189: PPUSH
5190: CALL_OW 381
// un = CreateHuman ;
5194: LD_ADDR_VAR 0 3
5198: PUSH
5199: CALL_OW 44
5203: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5204: LD_ADDR_EXP 58
5208: PUSH
5209: LD_EXP 58
5213: PUSH
5214: LD_VAR 0 3
5218: ADD
5219: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5220: LD_VAR 0 3
5224: PPUSH
5225: LD_INT 20
5227: PPUSH
5228: LD_INT 0
5230: PPUSH
5231: CALL_OW 49
// end ;
5235: GO 5179
5237: POP
5238: POP
// for i := 1 to mortarAmount do
5239: LD_ADDR_VAR 0 2
5243: PUSH
5244: DOUBLE
5245: LD_INT 1
5247: DEC
5248: ST_TO_ADDR
5249: LD_VAR 0 7
5253: PUSH
5254: FOR_TO
5255: IFFALSE 5315
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5257: LD_INT 0
5259: PPUSH
5260: LD_INT 8
5262: PPUSH
5263: LD_EXP 27
5267: PPUSH
5268: CALL_OW 380
// un = CreateHuman ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: CALL_OW 44
5281: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5282: LD_ADDR_EXP 58
5286: PUSH
5287: LD_EXP 58
5291: PUSH
5292: LD_VAR 0 3
5296: ADD
5297: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5298: LD_VAR 0 3
5302: PPUSH
5303: LD_INT 20
5305: PPUSH
5306: LD_INT 0
5308: PPUSH
5309: CALL_OW 49
// end ;
5313: GO 5254
5315: POP
5316: POP
// for i := 1 to vehicleAmount do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: DOUBLE
5323: LD_INT 1
5325: DEC
5326: ST_TO_ADDR
5327: LD_VAR 0 8
5331: PUSH
5332: FOR_TO
5333: IFFALSE 5465
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5335: LD_INT 0
5337: PPUSH
5338: LD_EXP 27
5342: PPUSH
5343: CALL_OW 383
// un = CreateHuman ;
5347: LD_ADDR_VAR 0 3
5351: PUSH
5352: CALL_OW 44
5356: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5357: LD_ADDR_EXP 58
5361: PUSH
5362: LD_EXP 58
5366: PUSH
5367: LD_VAR 0 3
5371: ADD
5372: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5373: LD_INT 14
5375: PPUSH
5376: LD_INT 1
5378: PPUSH
5379: LD_INT 1
5381: PPUSH
5382: LD_VAR 0 5
5386: PUSH
5387: LD_INT 1
5389: PPUSH
5390: LD_VAR 0 5
5394: PPUSH
5395: CALL_OW 12
5399: ARRAY
5400: PPUSH
5401: LD_INT 65
5403: PPUSH
5404: CALL 45885 0 5
// veh = CreateVehicle ;
5408: LD_ADDR_VAR 0 4
5412: PUSH
5413: CALL_OW 45
5417: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5418: LD_ADDR_EXP 58
5422: PUSH
5423: LD_EXP 58
5427: PUSH
5428: LD_VAR 0 4
5432: ADD
5433: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5434: LD_VAR 0 4
5438: PPUSH
5439: LD_INT 20
5441: PPUSH
5442: LD_INT 0
5444: PPUSH
5445: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5449: LD_VAR 0 3
5453: PPUSH
5454: LD_VAR 0 4
5458: PPUSH
5459: CALL_OW 52
// end ;
5463: GO 5332
5465: POP
5466: POP
// end ;
5467: LD_VAR 0 1
5471: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5472: LD_INT 0
5474: PPUSH
5475: PPUSH
5476: PPUSH
5477: PPUSH
5478: PPUSH
// kabulBaseUnits = [ ] ;
5479: LD_ADDR_EXP 59
5483: PUSH
5484: EMPTY
5485: ST_TO_ADDR
// uc_side = 2 ;
5486: LD_ADDR_OWVAR 20
5490: PUSH
5491: LD_INT 2
5493: ST_TO_ADDR
// uc_nation = 2 ;
5494: LD_ADDR_OWVAR 21
5498: PUSH
5499: LD_INT 2
5501: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5502: LD_ADDR_EXP 59
5506: PUSH
5507: LD_INT 2
5509: PPUSH
5510: LD_INT 10
5512: PPUSH
5513: LD_STRING newkabul
5515: PPUSH
5516: LD_EXP 27
5520: PPUSH
5521: LD_INT 5000
5523: PUSH
5524: LD_INT 5000
5526: PUSH
5527: LD_INT 0
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: LIST
5534: PPUSH
5535: LD_INT 2
5537: PPUSH
5538: LD_INT 17
5540: PUSH
5541: LD_INT 3
5543: PUSH
5544: LD_INT 4
5546: PUSH
5547: LD_INT 8
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL 13099 0 7
5560: ST_TO_ADDR
// case Difficulty of 2 :
5561: LD_OWVAR 67
5565: PUSH
5566: LD_INT 2
5568: DOUBLE
5569: EQUAL
5570: IFTRUE 5574
5572: GO 5590
5574: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5575: LD_INT 49
5577: PPUSH
5578: LD_INT 2
5580: PPUSH
5581: LD_INT 2
5583: PPUSH
5584: CALL_OW 322
// end ; 3 :
5588: GO 5654
5590: LD_INT 3
5592: DOUBLE
5593: EQUAL
5594: IFTRUE 5598
5596: GO 5653
5598: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5599: LD_INT 49
5601: PPUSH
5602: LD_INT 2
5604: PPUSH
5605: LD_INT 2
5607: PPUSH
5608: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5612: LD_INT 50
5614: PPUSH
5615: LD_INT 2
5617: PPUSH
5618: LD_INT 1
5620: PPUSH
5621: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5625: LD_INT 52
5627: PPUSH
5628: LD_INT 2
5630: PPUSH
5631: LD_INT 2
5633: PPUSH
5634: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5638: LD_INT 61
5640: PPUSH
5641: LD_INT 2
5643: PPUSH
5644: LD_INT 1
5646: PPUSH
5647: CALL_OW 322
// end ; end ;
5651: GO 5654
5653: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5654: LD_ADDR_VAR 0 2
5658: PUSH
5659: LD_INT 27
5661: PUSH
5662: LD_INT 23
5664: PUSH
5665: LD_INT 25
5667: PUSH
5668: LD_INT 28
5670: PUSH
5671: LD_INT 26
5673: PUSH
5674: EMPTY
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5681: LD_ADDR_VAR 0 3
5685: PUSH
5686: LD_INT 22
5688: PUSH
5689: LD_INT 2
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 30
5698: PUSH
5699: LD_INT 32
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 3
5708: PUSH
5709: LD_INT 35
5711: PUSH
5712: LD_INT 30
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: LIST
5727: PPUSH
5728: CALL_OW 69
5732: PUSH
5733: FOR_IN
5734: IFFALSE 5766
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5736: LD_VAR 0 3
5740: PPUSH
5741: LD_VAR 0 2
5745: PUSH
5746: LD_INT 1
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: CALL_OW 12
5758: ARRAY
5759: PPUSH
5760: CALL_OW 431
5764: GO 5733
5766: POP
5767: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5768: LD_INT 22
5770: PUSH
5771: LD_INT 2
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 21
5780: PUSH
5781: LD_INT 3
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: PUSH
5788: EMPTY
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: PPUSH
5797: LD_EXP 27
5801: PPUSH
5802: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5806: LD_ADDR_VAR 0 4
5810: PUSH
5811: LD_INT 22
5813: PUSH
5814: LD_INT 2
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: PUSH
5821: LD_INT 21
5823: PUSH
5824: LD_INT 2
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 50
5833: PUSH
5834: EMPTY
5835: LIST
5836: PUSH
5837: LD_INT 34
5839: PUSH
5840: LD_INT 31
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: PPUSH
5853: CALL_OW 69
5857: PUSH
5858: FOR_IN
5859: IFFALSE 5889
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5861: LD_INT 0
5863: PPUSH
5864: LD_EXP 27
5868: PPUSH
5869: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5873: CALL_OW 44
5877: PPUSH
5878: LD_VAR 0 4
5882: PPUSH
5883: CALL_OW 52
// end ;
5887: GO 5858
5889: POP
5890: POP
// if Difficulty = 1 then
5891: LD_OWVAR 67
5895: PUSH
5896: LD_INT 1
5898: EQUAL
5899: IFFALSE 5949
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5901: LD_INT 0
5903: PPUSH
5904: LD_EXP 27
5908: PPUSH
5909: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5913: CALL_OW 44
5917: PPUSH
5918: LD_INT 63
5920: PPUSH
5921: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5925: CALL_OW 44
5929: PPUSH
5930: LD_INT 66
5932: PPUSH
5933: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5937: CALL_OW 44
5941: PPUSH
5942: LD_INT 68
5944: PPUSH
5945: CALL 12724 0 2
// end ; if Difficulty = 2 then
5949: LD_OWVAR 67
5953: PUSH
5954: LD_INT 2
5956: EQUAL
5957: IFFALSE 6022
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5959: LD_INT 0
5961: PPUSH
5962: LD_EXP 27
5966: PPUSH
5967: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5971: CALL_OW 44
5975: PPUSH
5976: LD_INT 63
5978: PPUSH
5979: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5983: CALL_OW 44
5987: PPUSH
5988: LD_INT 66
5990: PPUSH
5991: CALL 12724 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5995: LD_INT 0
5997: PPUSH
5998: LD_INT 8
6000: PPUSH
6001: LD_EXP 27
6005: PPUSH
6006: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6010: CALL_OW 44
6014: PPUSH
6015: LD_INT 68
6017: PPUSH
6018: CALL 12724 0 2
// end ; if Difficulty = 3 then
6022: LD_OWVAR 67
6026: PUSH
6027: LD_INT 3
6029: EQUAL
6030: IFFALSE 6083
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6032: LD_INT 0
6034: PPUSH
6035: LD_INT 8
6037: PPUSH
6038: LD_EXP 27
6042: PPUSH
6043: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6047: CALL_OW 44
6051: PPUSH
6052: LD_INT 63
6054: PPUSH
6055: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6059: CALL_OW 44
6063: PPUSH
6064: LD_INT 66
6066: PPUSH
6067: CALL 12724 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6071: CALL_OW 44
6075: PPUSH
6076: LD_INT 68
6078: PPUSH
6079: CALL 12724 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 7 ] [ Difficulty ] ) ;
6083: LD_INT 14
6085: PPUSH
6086: LD_INT 10
6088: PUSH
6089: LD_INT 2
6091: PUSH
6092: LD_INT 5
6094: PUSH
6095: LD_INT 7
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: PUSH
6103: LD_OWVAR 67
6107: ARRAY
6108: PLUS
6109: PPUSH
6110: CALL 6187 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 9 ] [ Difficulty ] ) ;
6114: LD_INT 15
6116: PPUSH
6117: LD_INT 20
6119: PUSH
6120: LD_INT 4
6122: PUSH
6123: LD_INT 6
6125: PUSH
6126: LD_INT 9
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: PUSH
6134: LD_OWVAR 67
6138: ARRAY
6139: PLUS
6140: PPUSH
6141: CALL 6187 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6145: LD_INT 16
6147: PPUSH
6148: LD_INT 10
6150: PPUSH
6151: CALL 6187 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6155: LD_INT 17
6157: PPUSH
6158: LD_INT 5
6160: PPUSH
6161: CALL 6187 0 2
// if not savedVsevolod then
6165: LD_EXP 1
6169: NOT
6170: IFFALSE 6182
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6172: LD_INT 18
6174: PPUSH
6175: LD_INT 1
6177: PPUSH
6178: CALL 6187 0 2
// end ;
6182: LD_VAR 0 1
6186: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6187: LD_INT 0
6189: PPUSH
6190: PPUSH
6191: PPUSH
// for i = 1 to amount do
6192: LD_ADDR_VAR 0 4
6196: PUSH
6197: DOUBLE
6198: LD_INT 1
6200: DEC
6201: ST_TO_ADDR
6202: LD_VAR 0 2
6206: PUSH
6207: FOR_TO
6208: IFFALSE 6274
// begin randPos = RandHexArea ( area , false ) ;
6210: LD_ADDR_VAR 0 5
6214: PUSH
6215: LD_VAR 0 1
6219: PPUSH
6220: LD_INT 0
6222: PPUSH
6223: CALL_OW 16
6227: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6228: LD_VAR 0 5
6232: PUSH
6233: LD_INT 1
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 5
6241: PUSH
6242: LD_INT 2
6244: ARRAY
6245: PPUSH
6246: LD_INT 2
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 454
// minesList = minesList ^ randPos ;
6256: LD_ADDR_EXP 61
6260: PUSH
6261: LD_EXP 61
6265: PUSH
6266: LD_VAR 0 5
6270: ADD
6271: ST_TO_ADDR
// end ;
6272: GO 6207
6274: POP
6275: POP
// end ;
6276: LD_VAR 0 3
6280: RET
// function PrepareXavierAr ; begin
6281: LD_INT 0
6283: PPUSH
// uc_side = 5 ;
6284: LD_ADDR_OWVAR 20
6288: PUSH
6289: LD_INT 5
6291: ST_TO_ADDR
// uc_nation = 2 ;
6292: LD_ADDR_OWVAR 21
6296: PUSH
6297: LD_INT 2
6299: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6300: LD_ADDR_EXP 55
6304: PUSH
6305: LD_STRING Xavier
6307: PPUSH
6308: LD_INT 0
6310: PPUSH
6311: LD_INT 0
6313: PPUSH
6314: CALL 12122 0 3
6318: ST_TO_ADDR
// end ;
6319: LD_VAR 0 1
6323: RET
// every 0 0$1 do
6324: GO 6326
6326: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6327: LD_ADDR_EXP 60
6331: PUSH
6332: LD_INT 22
6334: PUSH
6335: LD_INT 2
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PUSH
6342: LD_INT 21
6344: PUSH
6345: LD_INT 2
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 50
6354: PUSH
6355: EMPTY
6356: LIST
6357: PUSH
6358: LD_INT 59
6360: PUSH
6361: EMPTY
6362: LIST
6363: PUSH
6364: LD_INT 34
6366: PUSH
6367: LD_INT 31
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: PPUSH
6381: CALL_OW 69
6385: ST_TO_ADDR
// enable ;
6386: ENABLE
// end ; end_of_file
6387: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6388: LD_INT 0
6390: PPUSH
6391: PPUSH
6392: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6393: LD_ADDR_VAR 0 3
6397: PUSH
6398: LD_INT 6
6400: PPUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 50
6413: PUSH
6414: EMPTY
6415: LIST
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_EXP 37
6425: PUSH
6426: LD_EXP 48
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: DIFF
6435: PPUSH
6436: CALL_OW 70
6440: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6441: LD_EXP 37
6445: PPUSH
6446: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6450: LD_EXP 49
6454: PPUSH
6455: LD_STRING DStart-Pla-1
6457: PPUSH
6458: CALL_OW 94
// if savedVsevolod then
6462: LD_EXP 1
6466: IFFALSE 7695
// begin arSolds = PrepareIntroArabians ;
6468: LD_ADDR_VAR 0 2
6472: PUSH
6473: CALL 4771 0 0
6477: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING DStartVS-Pla-1
6485: PPUSH
6486: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6490: LD_EXP 49
6494: PPUSH
6495: LD_STRING DStart2-Pla-1
6497: PPUSH
6498: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6502: LD_EXP 37
6506: PPUSH
6507: LD_STRING DStart2-Bur-1
6509: PPUSH
6510: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6514: LD_INT 92
6516: PPUSH
6517: LD_INT 133
6519: PPUSH
6520: LD_INT 3
6522: PPUSH
6523: LD_INT 9
6525: NEG
6526: PPUSH
6527: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6531: LD_INT 103
6533: PPUSH
6534: LD_INT 133
6536: PPUSH
6537: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6541: LD_VAR 0 2
6545: PUSH
6546: LD_INT 1
6548: ARRAY
6549: PPUSH
6550: LD_INT 93
6552: PPUSH
6553: LD_INT 134
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: CALL 12953 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6563: LD_VAR 0 2
6567: PUSH
6568: LD_INT 2
6570: ARRAY
6571: PPUSH
6572: LD_INT 96
6574: PPUSH
6575: LD_INT 134
6577: PPUSH
6578: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6582: LD_INT 35
6584: PPUSH
6585: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6589: LD_VAR 0 2
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PPUSH
6598: LD_INT 93
6600: PPUSH
6601: LD_INT 134
6603: PPUSH
6604: CALL_OW 297
6608: PUSH
6609: LD_INT 2
6611: LESS
6612: IFFALSE 6582
// wait ( 0 0$5 ) ;
6614: LD_INT 175
6616: PPUSH
6617: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6621: LD_VAR 0 2
6625: PUSH
6626: LD_INT 1
6628: ARRAY
6629: PUSH
6630: LD_VAR 0 2
6634: PUSH
6635: LD_INT 2
6637: ARRAY
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PPUSH
6643: LD_INT 107
6645: PPUSH
6646: LD_INT 134
6648: PPUSH
6649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6653: LD_INT 35
6655: PPUSH
6656: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6660: LD_VAR 0 2
6664: PUSH
6665: LD_INT 1
6667: ARRAY
6668: PPUSH
6669: LD_INT 107
6671: PPUSH
6672: LD_INT 134
6674: PPUSH
6675: CALL_OW 297
6679: PUSH
6680: LD_INT 5
6682: LESS
6683: IFFALSE 6653
// ComCrawl ( arSolds ) ;
6685: LD_VAR 0 2
6689: PPUSH
6690: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6694: LD_INT 96
6696: PPUSH
6697: LD_INT 161
6699: PPUSH
6700: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6704: LD_EXP 48
6708: PPUSH
6709: LD_INT 97
6711: PPUSH
6712: LD_INT 160
6714: PPUSH
6715: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6719: LD_EXP 48
6723: PPUSH
6724: LD_EXP 37
6728: PPUSH
6729: CALL_OW 179
// if IsInUnit ( Burlak ) then
6733: LD_EXP 37
6737: PPUSH
6738: CALL_OW 310
6742: IFFALSE 6753
// ComExitVehicle ( Burlak ) ;
6744: LD_EXP 37
6748: PPUSH
6749: CALL_OW 121
// wait ( 0 0$01 ) ;
6753: LD_INT 35
6755: PPUSH
6756: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6760: LD_EXP 37
6764: PPUSH
6765: LD_INT 96
6767: PPUSH
6768: LD_INT 162
6770: PPUSH
6771: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6775: LD_EXP 37
6779: PPUSH
6780: LD_EXP 48
6784: PPUSH
6785: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6789: LD_INT 35
6791: PPUSH
6792: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6796: LD_EXP 37
6800: PPUSH
6801: LD_EXP 48
6805: PPUSH
6806: CALL_OW 296
6810: PUSH
6811: LD_INT 5
6813: LESSEQUAL
6814: IFFALSE 6789
// CenterOnXY ( 96 , 160 ) ;
6816: LD_INT 96
6818: PPUSH
6819: LD_INT 160
6821: PPUSH
6822: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6826: LD_EXP 37
6830: PPUSH
6831: LD_STRING DMeetVsevolodVS-Bur-1
6833: PPUSH
6834: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6838: LD_INT 52
6840: PPUSH
6841: LD_INT 59
6843: PPUSH
6844: LD_INT 3
6846: PPUSH
6847: LD_INT 14
6849: NEG
6850: PPUSH
6851: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6855: LD_INT 58
6857: PPUSH
6858: LD_INT 54
6860: PPUSH
6861: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6865: LD_EXP 48
6869: PPUSH
6870: LD_STRING DMeetVsevolodVS-Vse-1
6872: PPUSH
6873: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6877: LD_EXP 37
6881: PUSH
6882: LD_EXP 48
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PPUSH
6891: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6895: LD_EXP 37
6899: PPUSH
6900: LD_STRING DMeetVsevolodVS-Bur-2
6902: PPUSH
6903: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6907: LD_INT 61
6909: PPUSH
6910: LD_INT 102
6912: PPUSH
6913: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6917: LD_EXP 48
6921: PPUSH
6922: LD_STRING DMeetVsevolodVS-Vse-2
6924: PPUSH
6925: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6929: LD_EXP 37
6933: PUSH
6934: LD_EXP 48
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6947: LD_INT 52
6949: PPUSH
6950: LD_INT 59
6952: PPUSH
6953: LD_INT 3
6955: PPUSH
6956: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
6960: LD_INT 92
6962: PPUSH
6963: LD_INT 133
6965: PPUSH
6966: LD_INT 3
6968: PPUSH
6969: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
6973: LD_INT 3
6975: PPUSH
6976: LD_INT 2
6978: PPUSH
6979: LD_INT 1
6981: PPUSH
6982: LD_INT 1
6984: PPUSH
6985: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
6989: LD_VAR 0 3
6993: PPUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 58
7006: PUSH
7007: EMPTY
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PPUSH
7014: CALL_OW 72
7018: PUSH
7019: LD_VAR 0 3
7023: PPUSH
7024: LD_INT 21
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PPUSH
7034: CALL_OW 72
7038: AND
7039: IFFALSE 7103
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7041: LD_VAR 0 3
7045: PPUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PPUSH
7056: CALL_OW 72
7060: PUSH
7061: LD_INT 1
7063: ARRAY
7064: PPUSH
7065: LD_VAR 0 3
7069: PPUSH
7070: LD_INT 21
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 58
7082: PUSH
7083: EMPTY
7084: LIST
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 72
7094: PUSH
7095: LD_INT 1
7097: ARRAY
7098: PPUSH
7099: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7103: LD_VAR 0 3
7107: PPUSH
7108: LD_EXP 37
7112: PPUSH
7113: CALL_OW 250
7117: PPUSH
7118: LD_EXP 37
7122: PPUSH
7123: CALL_OW 251
7127: PPUSH
7128: CALL_OW 171
// wait ( 0 0$6 ) ;
7132: LD_INT 210
7134: PPUSH
7135: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7139: LD_EXP 37
7143: PPUSH
7144: LD_INT 98
7146: PPUSH
7147: LD_INT 143
7149: PPUSH
7150: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7154: LD_EXP 48
7158: PPUSH
7159: LD_INT 98
7161: PPUSH
7162: LD_INT 143
7164: PPUSH
7165: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7169: LD_VAR 0 3
7173: PPUSH
7174: LD_INT 98
7176: PPUSH
7177: LD_INT 143
7179: PPUSH
7180: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7184: LD_INT 35
7186: PPUSH
7187: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7191: LD_EXP 37
7195: PPUSH
7196: LD_INT 98
7198: PPUSH
7199: LD_INT 143
7201: PPUSH
7202: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7206: LD_EXP 48
7210: PPUSH
7211: LD_INT 98
7213: PPUSH
7214: LD_INT 143
7216: PPUSH
7217: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7221: LD_EXP 48
7225: PPUSH
7226: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7230: LD_EXP 37
7234: PPUSH
7235: LD_INT 98
7237: PPUSH
7238: LD_INT 143
7240: PPUSH
7241: CALL_OW 297
7245: PUSH
7246: LD_INT 4
7248: LESSEQUAL
7249: PUSH
7250: LD_EXP 48
7254: PPUSH
7255: LD_INT 98
7257: PPUSH
7258: LD_INT 143
7260: PPUSH
7261: CALL_OW 297
7265: PUSH
7266: LD_INT 4
7268: LESSEQUAL
7269: AND
7270: IFFALSE 7184
// CenterOnXY ( 93 , 134 ) ;
7272: LD_INT 93
7274: PPUSH
7275: LD_INT 134
7277: PPUSH
7278: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7282: LD_EXP 48
7286: PPUSH
7287: LD_INT 82
7289: PPUSH
7290: LD_INT 109
7292: PPUSH
7293: CALL_OW 111
// wait ( 0 0$2 ) ;
7297: LD_INT 70
7299: PPUSH
7300: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7304: LD_EXP 37
7308: PPUSH
7309: LD_INT 82
7311: PPUSH
7312: LD_INT 109
7314: PPUSH
7315: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7319: LD_VAR 0 3
7323: PPUSH
7324: LD_INT 82
7326: PPUSH
7327: LD_INT 109
7329: PPUSH
7330: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7334: LD_INT 35
7336: PPUSH
7337: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7341: LD_EXP 48
7345: PPUSH
7346: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7350: LD_EXP 48
7354: PPUSH
7355: LD_INT 93
7357: PPUSH
7358: LD_INT 134
7360: PPUSH
7361: CALL_OW 297
7365: PUSH
7366: LD_INT 2
7368: LESSEQUAL
7369: IFFALSE 7334
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7371: LD_INT 93
7373: PPUSH
7374: LD_INT 134
7376: PPUSH
7377: LD_INT 2
7379: PPUSH
7380: CALL_OW 456
// wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7391: LD_EXP 48
7395: PPUSH
7396: LD_INT 200
7398: PPUSH
7399: CALL_OW 234
// wait ( 0 0$1 ) ;
7403: LD_INT 35
7405: PPUSH
7406: CALL_OW 67
// ComStop ( Burlak ) ;
7410: LD_EXP 37
7414: PPUSH
7415: CALL_OW 141
// ComStop ( Vsevolod ) ;
7419: LD_EXP 48
7423: PPUSH
7424: CALL_OW 141
// ComStop ( burlakUnits ) ;
7428: LD_VAR 0 3
7432: PPUSH
7433: CALL_OW 141
// DialogueOn ;
7437: CALL_OW 6
// if Kirilenkova then
7441: LD_EXP 45
7445: IFFALSE 7459
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7447: LD_EXP 45
7451: PPUSH
7452: LD_STRING DStasisVS-Kir-1
7454: PPUSH
7455: CALL_OW 88
// if Titov then
7459: LD_EXP 42
7463: IFFALSE 7477
// Say ( Titov , DStasisVS-Tit-1 ) ;
7465: LD_EXP 42
7469: PPUSH
7470: LD_STRING DStasisVS-Tit-1
7472: PPUSH
7473: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7477: LD_EXP 37
7481: PPUSH
7482: LD_STRING DStasisVS-Bur-1
7484: PPUSH
7485: CALL_OW 88
// if Titov then
7489: LD_EXP 42
7493: IFFALSE 7509
// Say ( Titov , DStasisVS-Tit-2 ) else
7495: LD_EXP 42
7499: PPUSH
7500: LD_STRING DStasisVS-Tit-2
7502: PPUSH
7503: CALL_OW 88
7507: GO 7527
// if Kirilenkova then
7509: LD_EXP 45
7513: IFFALSE 7527
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7515: LD_EXP 45
7519: PPUSH
7520: LD_STRING DStasisVS-Kir-2
7522: PPUSH
7523: CALL_OW 88
// if Titov or Kirilenkova then
7527: LD_EXP 42
7531: PUSH
7532: LD_EXP 45
7536: OR
7537: IFFALSE 7551
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7539: LD_EXP 37
7543: PPUSH
7544: LD_STRING DStasisVS-Bur-2
7546: PPUSH
7547: CALL_OW 88
// wait ( 0 0$2 ) ;
7551: LD_INT 70
7553: PPUSH
7554: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7558: LD_EXP 50
7562: PPUSH
7563: LD_STRING DStasisVS-Pop-2
7565: PPUSH
7566: CALL_OW 94
// if Gleb then
7570: LD_EXP 40
7574: IFFALSE 7588
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7576: LD_EXP 40
7580: PPUSH
7581: LD_STRING DStasisVS-Glb-2
7583: PPUSH
7584: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7588: LD_INT 3
7590: PPUSH
7591: LD_INT 2
7593: PPUSH
7594: LD_INT 2
7596: PPUSH
7597: LD_INT 1
7599: PPUSH
7600: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7604: LD_INT 2
7606: PPUSH
7607: LD_INT 2
7609: PPUSH
7610: CALL_OW 343
// DialogueOff ;
7614: CALL_OW 7
// InGameOff ;
7618: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7622: LD_EXP 48
7626: PPUSH
7627: LD_INT 250
7629: PPUSH
7630: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7634: LD_STRING MVsevolod
7636: PPUSH
7637: CALL_OW 337
// wait ( 0 0$2 ) ;
7641: LD_INT 70
7643: PPUSH
7644: CALL_OW 67
// ComWalk ( arSolds ) ;
7648: LD_VAR 0 2
7652: PPUSH
7653: CALL_OW 138
// wait ( 0 0$01 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7664: LD_VAR 0 2
7668: PPUSH
7669: LD_EXP 48
7673: PPUSH
7674: CALL_OW 250
7678: PPUSH
7679: LD_EXP 48
7683: PPUSH
7684: CALL_OW 251
7688: PPUSH
7689: CALL_OW 174
// end else
7693: GO 7746
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7695: LD_EXP 49
7699: PPUSH
7700: LD_STRING DStartNV-Pla-1
7702: PPUSH
7703: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7707: LD_EXP 49
7711: PPUSH
7712: LD_STRING DStart2-Pla-1
7714: PPUSH
7715: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7719: LD_EXP 37
7723: PPUSH
7724: LD_STRING DStart2-Bur-1
7726: PPUSH
7727: CALL_OW 88
// DialogueOff ;
7731: CALL_OW 7
// InGameOff ;
7735: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7739: LD_STRING MStart
7741: PPUSH
7742: CALL_OW 337
// end ; SaveForQuickRestart ;
7746: CALL_OW 22
// enableCounter = true ;
7750: LD_ADDR_EXP 18
7754: PUSH
7755: LD_INT 1
7757: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7758: LD_INT 1
7760: PPUSH
7761: CALL 18771 0 1
7765: PPUSH
7766: CALL 18615 0 1
// end ;
7770: LD_VAR 0 1
7774: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7775: LD_EXP 48
7779: PUSH
7780: LD_EXP 48
7784: PPUSH
7785: CALL_OW 256
7789: PUSH
7790: LD_INT 250
7792: GREATEREQUAL
7793: AND
7794: IFFALSE 7871
7796: GO 7798
7798: DISABLE
// begin DialogueOn ;
7799: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7803: LD_EXP 48
7807: PPUSH
7808: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7812: LD_EXP 37
7816: PPUSH
7817: LD_STRING DSeviSaved-Bur-1
7819: PPUSH
7820: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7824: LD_EXP 48
7828: PPUSH
7829: LD_STRING DSeviSaved-Vse-1
7831: PPUSH
7832: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7836: LD_EXP 37
7840: PPUSH
7841: LD_STRING DSeviSaved-Bur-2
7843: PPUSH
7844: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7848: LD_EXP 48
7852: PPUSH
7853: LD_STRING DSeviSaved-Vse-2
7855: PPUSH
7856: CALL_OW 88
// DialogueOff ;
7860: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7864: LD_STRING MStart
7866: PPUSH
7867: CALL_OW 337
// end ;
7871: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7872: LD_EXP 45
7876: PUSH
7877: LD_EXP 45
7881: PPUSH
7882: CALL_OW 301
7886: NOT
7887: AND
7888: IFFALSE 8712
7890: GO 7892
7892: DISABLE
7893: LD_INT 0
7895: PPUSH
7896: PPUSH
7897: PPUSH
7898: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7899: LD_ADDR_VAR 0 1
7903: PUSH
7904: LD_INT 22
7906: PUSH
7907: LD_INT 2
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 50
7916: PUSH
7917: EMPTY
7918: LIST
7919: PUSH
7920: LD_INT 2
7922: PUSH
7923: LD_INT 59
7925: PUSH
7926: EMPTY
7927: LIST
7928: PUSH
7929: LD_INT 21
7931: PUSH
7932: LD_INT 1
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 21
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: PPUSH
7960: CALL_OW 69
7964: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7965: LD_INT 35
7967: PPUSH
7968: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
7972: LD_EXP 45
7976: PPUSH
7977: CALL_OW 302
7981: PUSH
7982: LD_VAR 0 1
7986: PPUSH
7987: LD_EXP 45
7991: PPUSH
7992: CALL_OW 74
7996: PPUSH
7997: LD_EXP 45
8001: PPUSH
8002: CALL_OW 296
8006: PUSH
8007: LD_INT 12
8009: GREATER
8010: AND
8011: IFFALSE 7965
// if IsInUnit ( Kirilenkova ) then
8013: LD_EXP 45
8017: PPUSH
8018: CALL_OW 310
8022: IFFALSE 8071
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8024: LD_EXP 55
8028: PPUSH
8029: LD_EXP 45
8033: PPUSH
8034: CALL_OW 310
8038: PPUSH
8039: CALL_OW 250
8043: PPUSH
8044: LD_EXP 45
8048: PPUSH
8049: CALL_OW 310
8053: PPUSH
8054: CALL_OW 251
8058: PPUSH
8059: LD_INT 5
8061: PPUSH
8062: LD_INT 1
8064: PPUSH
8065: CALL_OW 50
8069: GO 8106
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8071: LD_EXP 55
8075: PPUSH
8076: LD_EXP 45
8080: PPUSH
8081: CALL_OW 250
8085: PPUSH
8086: LD_EXP 45
8090: PPUSH
8091: CALL_OW 251
8095: PPUSH
8096: LD_INT 5
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: CALL_OW 50
// xavierSpawned = true ;
8106: LD_ADDR_EXP 11
8110: PUSH
8111: LD_INT 1
8113: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8114: LD_INT 70
8116: PPUSH
8117: CALL_OW 67
// InGameOn ;
8121: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8125: LD_EXP 55
8129: PPUSH
8130: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8134: LD_EXP 55
8138: PPUSH
8139: LD_EXP 45
8143: PPUSH
8144: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8148: LD_EXP 45
8152: PPUSH
8153: LD_EXP 55
8157: PPUSH
8158: CALL_OW 119
// DialogueOn ;
8162: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8166: LD_EXP 55
8170: PPUSH
8171: LD_STRING DMeetXavier-Xav-1
8173: PPUSH
8174: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8178: LD_EXP 45
8182: PPUSH
8183: CALL_OW 310
8187: IFFALSE 8306
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 310
8198: PPUSH
8199: CALL_OW 247
8203: PUSH
8204: LD_INT 2
8206: EQUAL
8207: IFFALSE 8220
// ComExitVehicle ( Kirilenkova ) else
8209: LD_EXP 45
8213: PPUSH
8214: CALL_OW 121
8218: GO 8229
// ComExitBuilding ( Kirilenkova ) ;
8220: LD_EXP 45
8224: PPUSH
8225: CALL_OW 122
// wait ( 0 0$1 ) ;
8229: LD_INT 35
8231: PPUSH
8232: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8236: LD_INT 35
8238: PPUSH
8239: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8243: LD_EXP 45
8247: PPUSH
8248: LD_EXP 55
8252: PPUSH
8253: CALL_OW 250
8257: PPUSH
8258: LD_EXP 55
8262: PPUSH
8263: CALL_OW 251
8267: PPUSH
8268: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8272: LD_EXP 45
8276: PPUSH
8277: LD_EXP 55
8281: PPUSH
8282: CALL_OW 296
8286: PUSH
8287: LD_INT 3
8289: LESSEQUAL
8290: IFFALSE 8236
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8292: LD_EXP 45
8296: PPUSH
8297: LD_EXP 55
8301: PPUSH
8302: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8306: LD_EXP 45
8310: PPUSH
8311: LD_STRING DMeetXavier-Kir-1
8313: PPUSH
8314: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8318: LD_EXP 55
8322: PPUSH
8323: LD_STRING DMeetXavier-Xav-2
8325: PPUSH
8326: CALL_OW 88
// case Query ( QXavier ) of 1 :
8330: LD_STRING QXavier
8332: PPUSH
8333: CALL_OW 97
8337: PUSH
8338: LD_INT 1
8340: DOUBLE
8341: EQUAL
8342: IFTRUE 8346
8344: GO 8541
8346: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8347: LD_EXP 37
8351: PPUSH
8352: LD_STRING DQrXavier#1-Bur-1
8354: PPUSH
8355: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8359: LD_EXP 45
8363: PPUSH
8364: LD_STRING DQrXavier#1-Kir-1
8366: PPUSH
8367: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8371: LD_EXP 55
8375: PPUSH
8376: LD_STRING DQrXavier#1-Xav-1
8378: PPUSH
8379: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8383: LD_EXP 45
8387: PPUSH
8388: LD_STRING DQrXavier#1-Kir-2
8390: PPUSH
8391: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8395: LD_EXP 55
8399: PPUSH
8400: LD_STRING DQrXavier#1-Xav-2
8402: PPUSH
8403: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8407: LD_EXP 45
8411: PPUSH
8412: LD_STRING DQrXavier#1-Kir-3
8414: PPUSH
8415: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8419: LD_EXP 55
8423: PPUSH
8424: LD_STRING DQrXavier#1-Xav-3
8426: PPUSH
8427: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8431: LD_EXP 45
8435: PPUSH
8436: LD_STRING DQrXavier#1-Kir-4
8438: PPUSH
8439: CALL_OW 88
// if IsOK ( Gleb ) then
8443: LD_EXP 40
8447: PPUSH
8448: CALL_OW 302
8452: IFFALSE 8466
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8454: LD_EXP 40
8458: PPUSH
8459: LD_STRING DQrXavier#1-Glb-4
8461: PPUSH
8462: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8466: LD_ADDR_VAR 0 4
8470: PUSH
8471: LD_EXP 55
8475: PPUSH
8476: CALL_OW 254
8480: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8481: LD_ADDR_VAR 0 2
8485: PUSH
8486: LD_EXP 55
8490: PPUSH
8491: CALL_OW 250
8495: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8496: LD_ADDR_VAR 0 3
8500: PUSH
8501: LD_EXP 55
8505: PPUSH
8506: CALL_OW 251
8510: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8511: LD_EXP 55
8515: PPUSH
8516: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8520: LD_VAR 0 2
8524: PPUSH
8525: LD_VAR 0 3
8529: PPUSH
8530: LD_VAR 0 4
8534: PPUSH
8535: CALL 1157 0 3
// end ; 2 :
8539: GO 8704
8541: LD_INT 2
8543: DOUBLE
8544: EQUAL
8545: IFTRUE 8549
8547: GO 8703
8549: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8550: LD_EXP 37
8554: PPUSH
8555: LD_STRING DQrXavier#2-Bur-1
8557: PPUSH
8558: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8562: LD_EXP 45
8566: PPUSH
8567: LD_STRING DQrXavier#2-Kir-1
8569: PPUSH
8570: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8574: LD_EXP 55
8578: PPUSH
8579: LD_STRING DQrXavier#2-Xav-1
8581: PPUSH
8582: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8586: LD_EXP 45
8590: PPUSH
8591: LD_STRING DQrXavier#2-Kir-2
8593: PPUSH
8594: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8598: LD_EXP 55
8602: PPUSH
8603: LD_STRING DQrXavier#2-Xav-2
8605: PPUSH
8606: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8610: LD_EXP 45
8614: PPUSH
8615: LD_STRING DQrXavier#2-Kir-3
8617: PPUSH
8618: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8622: LD_EXP 55
8626: PPUSH
8627: LD_STRING DQrXavier#2-Xav-3
8629: PPUSH
8630: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8634: LD_EXP 45
8638: PPUSH
8639: LD_STRING DQrXavier#2-Kir-4
8641: PPUSH
8642: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8646: LD_EXP 55
8650: PPUSH
8651: LD_STRING DQrXavier#2-Xav-4
8653: PPUSH
8654: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8658: LD_EXP 45
8662: PPUSH
8663: LD_STRING DQrXavier#2-Kir-5
8665: PPUSH
8666: CALL_OW 88
// if IsOK ( Gleb ) then
8670: LD_EXP 40
8674: PPUSH
8675: CALL_OW 302
8679: IFFALSE 8693
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8681: LD_EXP 40
8685: PPUSH
8686: LD_STRING DQrXavier#2-Glb-5
8688: PPUSH
8689: CALL_OW 88
// xavierPatrol = true ;
8693: LD_ADDR_EXP 7
8697: PUSH
8698: LD_INT 1
8700: ST_TO_ADDR
// end ; end ;
8701: GO 8704
8703: POP
// InGameOff ;
8704: CALL_OW 9
// DialogueOff ;
8708: CALL_OW 7
// end ;
8712: PPOPN 4
8714: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8715: LD_EXP 7
8719: PUSH
8720: LD_INT 3
8722: PPUSH
8723: LD_INT 5
8725: PPUSH
8726: CALL_OW 81
8730: PUSH
8731: LD_INT 1
8733: EQUAL
8734: AND
8735: IFFALSE 8805
8737: GO 8739
8739: DISABLE
8740: LD_INT 0
8742: PPUSH
// begin enable ;
8743: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8744: LD_ADDR_VAR 0 1
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_EXP 6
8758: PUSH
8759: FOR_TO
8760: IFFALSE 8803
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8762: LD_EXP 55
8766: PPUSH
8767: LD_EXP 6
8771: PUSH
8772: LD_VAR 0 1
8776: ARRAY
8777: PUSH
8778: LD_INT 1
8780: ARRAY
8781: PPUSH
8782: LD_EXP 6
8786: PUSH
8787: LD_VAR 0 1
8791: ARRAY
8792: PUSH
8793: LD_INT 2
8795: ARRAY
8796: PPUSH
8797: CALL_OW 171
8801: GO 8759
8803: POP
8804: POP
// end ;
8805: PPOPN 1
8807: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8808: LD_EXP 7
8812: PUSH
8813: LD_EXP 8
8817: AND
8818: PUSH
8819: LD_INT 3
8821: PPUSH
8822: LD_INT 5
8824: PPUSH
8825: CALL_OW 81
8829: PUSH
8830: LD_INT 1
8832: EQUAL
8833: AND
8834: IFFALSE 8878
8836: GO 8838
8838: DISABLE
// begin xavierPatrol = false ;
8839: LD_ADDR_EXP 7
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8847: LD_ADDR_EXP 9
8851: PUSH
8852: LD_INT 1
8854: ST_TO_ADDR
// xavierFirstPatrol = false ;
8855: LD_ADDR_EXP 8
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8863: LD_EXP 55
8867: PPUSH
8868: LD_INT 123
8870: PPUSH
8871: LD_INT 92
8873: PPUSH
8874: CALL_OW 111
// end ;
8878: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8879: LD_EXP 9
8883: PUSH
8884: LD_EXP 55
8888: PPUSH
8889: LD_INT 123
8891: PPUSH
8892: LD_INT 92
8894: PPUSH
8895: CALL_OW 297
8899: PUSH
8900: LD_INT 2
8902: LESSEQUAL
8903: AND
8904: PUSH
8905: LD_EXP 45
8909: PPUSH
8910: CALL_OW 302
8914: AND
8915: PUSH
8916: LD_INT 3
8918: PPUSH
8919: LD_INT 5
8921: PPUSH
8922: CALL_OW 81
8926: PUSH
8927: LD_INT 1
8929: EQUAL
8930: AND
8931: IFFALSE 9034
8933: GO 8935
8935: DISABLE
// begin DialogueOn ;
8936: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8940: LD_EXP 55
8944: PPUSH
8945: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8949: LD_EXP 55
8953: PPUSH
8954: LD_STRING DPointXavier-Xav-1
8956: PPUSH
8957: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
8961: LD_EXP 45
8965: PPUSH
8966: LD_STRING DPointXavier-Kir-1
8968: PPUSH
8969: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
8973: LD_EXP 55
8977: PPUSH
8978: LD_STRING DPointXavier-Xav-2
8980: PPUSH
8981: CALL_OW 88
// DialogueOff ;
8985: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
8989: LD_INT 7
8991: PPUSH
8992: LD_INT 1
8994: PPUSH
8995: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
8999: LD_EXP 55
9003: PPUSH
9004: EMPTY
9005: PPUSH
9006: CALL_OW 446
// canLeaveMessage = true ;
9010: LD_ADDR_EXP 12
9014: PUSH
9015: LD_INT 1
9017: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9018: LD_ADDR_EXP 9
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// xavierPatrol = true ;
9026: LD_ADDR_EXP 7
9030: PUSH
9031: LD_INT 1
9033: ST_TO_ADDR
// end ;
9034: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9035: LD_EXP 12
9039: PUSH
9040: LD_EXP 45
9044: PPUSH
9045: LD_INT 7
9047: PPUSH
9048: CALL_OW 308
9052: AND
9053: PUSH
9054: LD_INT 3
9056: PPUSH
9057: LD_INT 5
9059: PPUSH
9060: CALL_OW 81
9064: PUSH
9065: LD_INT 1
9067: EQUAL
9068: AND
9069: IFFALSE 9188
9071: GO 9073
9073: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9074: LD_STRING QActivateXavier
9076: PPUSH
9077: CALL_OW 97
9081: PUSH
9082: LD_INT 1
9084: DOUBLE
9085: EQUAL
9086: IFTRUE 9090
9088: GO 9121
9090: POP
// begin messageForXavier = 1 ;
9091: LD_ADDR_EXP 13
9095: PUSH
9096: LD_INT 1
9098: ST_TO_ADDR
// canLeaveMessage = false ;
9099: LD_ADDR_EXP 12
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9107: LD_INT 7
9109: PPUSH
9110: LD_INT 0
9112: PPUSH
9113: CALL_OW 424
// exit ;
9117: GO 9188
// end ; 2 :
9119: GO 9180
9121: LD_INT 2
9123: DOUBLE
9124: EQUAL
9125: IFTRUE 9129
9127: GO 9160
9129: POP
// begin messageForXavier = 2 ;
9130: LD_ADDR_EXP 13
9134: PUSH
9135: LD_INT 2
9137: ST_TO_ADDR
// canLeaveMessage = false ;
9138: LD_ADDR_EXP 12
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9146: LD_INT 7
9148: PPUSH
9149: LD_INT 0
9151: PPUSH
9152: CALL_OW 424
// exit ;
9156: GO 9188
// end ; 3 :
9158: GO 9180
9160: LD_INT 3
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9179
9168: POP
// messageForXavier = 3 ; end ;
9169: LD_ADDR_EXP 13
9173: PUSH
9174: LD_INT 3
9176: ST_TO_ADDR
9177: GO 9180
9179: POP
// wait ( 0 0$4 ) ;
9180: LD_INT 140
9182: PPUSH
9183: CALL_OW 67
// enable ;
9187: ENABLE
// end ;
9188: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9189: LD_EXP 13
9193: PUSH
9194: LD_INT 1
9196: EQUAL
9197: PUSH
9198: LD_EXP 13
9202: PUSH
9203: LD_INT 2
9205: EQUAL
9206: OR
9207: PUSH
9208: LD_INT 3
9210: PPUSH
9211: LD_INT 5
9213: PPUSH
9214: CALL_OW 81
9218: PUSH
9219: LD_INT 1
9221: EQUAL
9222: AND
9223: IFFALSE 9251
9225: GO 9227
9227: DISABLE
// begin xavierPatrol = false ;
9228: LD_ADDR_EXP 7
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9236: LD_EXP 55
9240: PPUSH
9241: LD_INT 123
9243: PPUSH
9244: LD_INT 92
9246: PPUSH
9247: CALL_OW 111
// end ;
9251: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9252: LD_EXP 13
9256: PUSH
9257: LD_INT 1
9259: EQUAL
9260: PUSH
9261: LD_EXP 13
9265: PUSH
9266: LD_INT 2
9268: EQUAL
9269: OR
9270: PUSH
9271: LD_EXP 55
9275: PPUSH
9276: LD_INT 123
9278: PPUSH
9279: LD_INT 92
9281: PPUSH
9282: CALL_OW 297
9286: PUSH
9287: LD_INT 2
9289: LESSEQUAL
9290: AND
9291: PUSH
9292: LD_INT 3
9294: PPUSH
9295: LD_INT 5
9297: PPUSH
9298: CALL_OW 81
9302: PUSH
9303: LD_INT 1
9305: EQUAL
9306: AND
9307: IFFALSE 9376
9309: GO 9311
9311: DISABLE
// begin if messageForXavier = 1 then
9312: LD_EXP 13
9316: PUSH
9317: LD_INT 1
9319: EQUAL
9320: IFFALSE 9342
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9322: LD_EXP 37
9326: PPUSH
9327: LD_STRING DQrActivateXavier#1-Bur-1
9329: PPUSH
9330: CALL_OW 88
// xavierJoinToPlayer = true ;
9334: LD_ADDR_EXP 10
9338: PUSH
9339: LD_INT 1
9341: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9342: LD_EXP 13
9346: PUSH
9347: LD_INT 2
9349: EQUAL
9350: IFFALSE 9376
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9352: LD_EXP 37
9356: PPUSH
9357: LD_STRING DQrActivateXavier#2-Bur-1
9359: PPUSH
9360: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9364: LD_EXP 55
9368: PPUSH
9369: LD_INT 53
9371: PPUSH
9372: CALL_OW 120
// end ; end ;
9376: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9377: LD_EXP 10
9381: PUSH
9382: LD_INT 3
9384: PPUSH
9385: LD_INT 5
9387: PPUSH
9388: CALL_OW 81
9392: PUSH
9393: LD_INT 1
9395: EQUAL
9396: AND
9397: IFFALSE 9777
9399: GO 9401
9401: DISABLE
9402: LD_INT 0
9404: PPUSH
9405: PPUSH
9406: PPUSH
9407: PPUSH
9408: PPUSH
9409: PPUSH
// begin if messageForXavier = 1 then
9410: LD_EXP 13
9414: PUSH
9415: LD_INT 1
9417: EQUAL
9418: IFFALSE 9449
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9420: LD_EXP 55
9424: PPUSH
9425: LD_EXP 37
9429: PPUSH
9430: CALL_OW 250
9434: PPUSH
9435: LD_EXP 37
9439: PPUSH
9440: CALL_OW 251
9444: PPUSH
9445: CALL_OW 111
// if messageForXavier = 2 then
9449: LD_EXP 13
9453: PUSH
9454: LD_INT 2
9456: EQUAL
9457: IFFALSE 9493
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9459: LD_EXP 55
9463: PPUSH
9464: CALL_OW 310
9468: PPUSH
9469: LD_EXP 37
9473: PPUSH
9474: CALL_OW 250
9478: PPUSH
9479: LD_EXP 37
9483: PPUSH
9484: CALL_OW 251
9488: PPUSH
9489: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9493: LD_ADDR_VAR 0 2
9497: PUSH
9498: LD_INT 22
9500: PUSH
9501: LD_INT 3
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 50
9510: PUSH
9511: EMPTY
9512: LIST
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: LD_INT 21
9519: PUSH
9520: LD_INT 1
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: LD_INT 59
9529: PUSH
9530: EMPTY
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: PPUSH
9543: CALL_OW 69
9547: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9548: LD_VAR 0 2
9552: PPUSH
9553: LD_EXP 55
9557: PPUSH
9558: CALL_OW 74
9562: PPUSH
9563: LD_EXP 55
9567: PPUSH
9568: CALL_OW 296
9572: PUSH
9573: LD_INT 6
9575: LESSEQUAL
9576: PUSH
9577: LD_EXP 13
9581: PUSH
9582: LD_INT 1
9584: EQUAL
9585: AND
9586: IFFALSE 9671
// begin xavierJoinToPlayer = false ;
9588: LD_ADDR_EXP 10
9592: PUSH
9593: LD_INT 0
9595: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_EXP 55
9605: PPUSH
9606: CALL_OW 250
9610: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9611: LD_ADDR_VAR 0 4
9615: PUSH
9616: LD_EXP 55
9620: PPUSH
9621: CALL_OW 251
9625: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9626: LD_ADDR_VAR 0 5
9630: PUSH
9631: LD_EXP 55
9635: PPUSH
9636: CALL_OW 254
9640: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9641: LD_EXP 55
9645: PPUSH
9646: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_VAR 0 4
9659: PPUSH
9660: LD_VAR 0 5
9664: PPUSH
9665: CALL 1157 0 3
// exit ;
9669: GO 9777
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9671: LD_VAR 0 2
9675: PPUSH
9676: LD_EXP 55
9680: PPUSH
9681: CALL_OW 310
9685: PPUSH
9686: CALL_OW 74
9690: PPUSH
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 310
9700: PPUSH
9701: CALL_OW 296
9705: PUSH
9706: LD_INT 6
9708: LESSEQUAL
9709: PUSH
9710: LD_EXP 13
9714: PUSH
9715: LD_INT 2
9717: EQUAL
9718: AND
9719: IFFALSE 9776
// begin xavierJoinToPlayer = false ;
9721: LD_ADDR_EXP 10
9725: PUSH
9726: LD_INT 0
9728: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9729: LD_ADDR_VAR 0 6
9733: PUSH
9734: LD_EXP 55
9738: PPUSH
9739: CALL_OW 310
9743: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9744: LD_EXP 55
9748: PPUSH
9749: CALL_OW 64
// SetSide ( veh , 3 ) ;
9753: LD_VAR 0 6
9757: PPUSH
9758: LD_INT 3
9760: PPUSH
9761: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9765: LD_VAR 0 6
9769: PPUSH
9770: CALL 1236 0 1
// exit ;
9774: GO 9777
// end ; enable ;
9776: ENABLE
// end ;
9777: PPOPN 6
9779: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9780: GO 9782
9782: DISABLE
9783: LD_INT 0
9785: PPUSH
9786: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9787: LD_INT 44
9789: PPUSH
9790: LD_INT 3
9792: PPUSH
9793: LD_INT 1
9795: PPUSH
9796: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9800: LD_EXP 51
9804: PPUSH
9805: LD_INT 8
9807: PPUSH
9808: LD_INT 0
9810: PPUSH
9811: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9815: LD_EXP 51
9819: PPUSH
9820: LD_INT 97
9822: PPUSH
9823: LD_INT 162
9825: PPUSH
9826: CALL_OW 111
// wait ( 0 0$3 ) ;
9830: LD_INT 105
9832: PPUSH
9833: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9837: LD_EXP 51
9841: PPUSH
9842: CALL_OW 87
// DialogueOn ;
9846: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_STRING DYashinArrives-Yas-1
9857: PPUSH
9858: CALL_OW 88
// if savedVsevolod then
9862: LD_EXP 1
9866: IFFALSE 9930
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9868: LD_EXP 48
9872: PPUSH
9873: LD_STRING DYashinArrives-Vse-1
9875: PPUSH
9876: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9880: LD_EXP 51
9884: PPUSH
9885: LD_STRING DYashinArrives-Yas-2
9887: PPUSH
9888: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9892: LD_EXP 48
9896: PPUSH
9897: LD_STRING DYashinArrives-Vse-2
9899: PPUSH
9900: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9904: LD_EXP 51
9908: PPUSH
9909: LD_STRING DYashinArrives-Yas-3
9911: PPUSH
9912: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9916: LD_EXP 48
9920: PPUSH
9921: LD_STRING DYashinArrives-Vse-3
9923: PPUSH
9924: CALL_OW 88
// end else
9928: GO 9978
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9930: LD_EXP 37
9934: PPUSH
9935: LD_STRING DYashinArrives-Bur-3
9937: PPUSH
9938: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9942: LD_EXP 51
9946: PPUSH
9947: LD_STRING DYashinArrives-Yas-4
9949: PPUSH
9950: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
9954: LD_EXP 37
9958: PPUSH
9959: LD_STRING DYashinArrives-Bur-4
9961: PPUSH
9962: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
9966: LD_EXP 51
9970: PPUSH
9971: LD_STRING DYashinArrives-Yas-5
9973: PPUSH
9974: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
9978: LD_EXP 37
9982: PPUSH
9983: LD_STRING DYashinArrives-Bur-5
9985: PPUSH
9986: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
9990: LD_EXP 51
9994: PPUSH
9995: LD_STRING DYashinArrives-Yas-6
9997: PPUSH
9998: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10002: LD_EXP 37
10006: PPUSH
10007: LD_STRING DYashinArrives-Bur-6
10009: PPUSH
10010: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10014: LD_EXP 51
10018: PPUSH
10019: LD_STRING DYashinArrives-Yas-7
10021: PPUSH
10022: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10026: LD_INT 63
10028: PPUSH
10029: CALL_OW 301
10033: PUSH
10034: LD_INT 66
10036: PPUSH
10037: CALL_OW 301
10041: AND
10042: PUSH
10043: LD_INT 68
10045: PPUSH
10046: CALL_OW 301
10050: AND
10051: IFFALSE 10134
// begin case Query ( QYashinHelp2 ) of 1 :
10053: LD_STRING QYashinHelp2
10055: PPUSH
10056: CALL_OW 97
10060: PUSH
10061: LD_INT 1
10063: DOUBLE
10064: EQUAL
10065: IFTRUE 10069
10067: GO 10096
10069: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10070: LD_EXP 37
10074: PPUSH
10075: LD_STRING DQrYashinHelp#2-Bur-1
10077: PPUSH
10078: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10082: LD_EXP 51
10086: PPUSH
10087: LD_STRING DQrYashinHelp#2-Yas-1
10089: PPUSH
10090: CALL_OW 88
// end ; 2 :
10094: GO 10132
10096: LD_INT 2
10098: DOUBLE
10099: EQUAL
10100: IFTRUE 10104
10102: GO 10131
10104: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10105: LD_EXP 37
10109: PPUSH
10110: LD_STRING DQrYashinHelp#3-Bur-1
10112: PPUSH
10113: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10117: LD_EXP 51
10121: PPUSH
10122: LD_STRING DQrYashinHelp#3-Yas-1
10124: PPUSH
10125: CALL_OW 88
// end ; end ;
10129: GO 10132
10131: POP
// end else
10132: GO 10280
// begin case Query ( QYashinHelp ) of 1 :
10134: LD_STRING QYashinHelp
10136: PPUSH
10137: CALL_OW 97
10141: PUSH
10142: LD_INT 1
10144: DOUBLE
10145: EQUAL
10146: IFTRUE 10150
10148: GO 10209
10150: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10151: LD_EXP 37
10155: PPUSH
10156: LD_STRING DQrYashinHelp#1-Bur-1
10158: PPUSH
10159: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10163: LD_EXP 51
10167: PPUSH
10168: LD_STRING DQrYashinHelp#1-Yas-1
10170: PPUSH
10171: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10175: LD_EXP 37
10179: PPUSH
10180: LD_STRING DQrYashinHelp#1-Bur-2
10182: PPUSH
10183: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10187: LD_EXP 51
10191: PPUSH
10192: LD_STRING DQrYashinHelp#1-Yas-2
10194: PPUSH
10195: CALL_OW 88
// bazookDialog = true ;
10199: LD_ADDR_VAR 0 2
10203: PUSH
10204: LD_INT 1
10206: ST_TO_ADDR
// end ; 2 :
10207: GO 10280
10209: LD_INT 2
10211: DOUBLE
10212: EQUAL
10213: IFTRUE 10217
10215: GO 10244
10217: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10218: LD_EXP 37
10222: PPUSH
10223: LD_STRING DQrYashinHelp#2-Bur-1
10225: PPUSH
10226: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10230: LD_EXP 51
10234: PPUSH
10235: LD_STRING DQrYashinHelp#2-Yas-1
10237: PPUSH
10238: CALL_OW 88
// end ; 3 :
10242: GO 10280
10244: LD_INT 3
10246: DOUBLE
10247: EQUAL
10248: IFTRUE 10252
10250: GO 10279
10252: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10253: LD_EXP 37
10257: PPUSH
10258: LD_STRING DQrYashinHelp#3-Bur-1
10260: PPUSH
10261: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10265: LD_EXP 51
10269: PPUSH
10270: LD_STRING DQrYashinHelp#3-Yas-1
10272: PPUSH
10273: CALL_OW 88
// end ; end ;
10277: GO 10280
10279: POP
// end ; if not bazookDialog then
10280: LD_VAR 0 2
10284: NOT
10285: IFFALSE 10323
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10287: LD_EXP 51
10291: PPUSH
10292: LD_STRING DQrYashinHelp#4-Yas-1
10294: PPUSH
10295: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10299: LD_EXP 37
10303: PPUSH
10304: LD_STRING DQrYashinHelp#1-Bur-2
10306: PPUSH
10307: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10311: LD_EXP 51
10315: PPUSH
10316: LD_STRING DQrYashinHelp#1-Yas-2
10318: PPUSH
10319: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10323: LD_EXP 51
10327: PPUSH
10328: LD_STRING DYashinLeave-Yas-1
10330: PPUSH
10331: CALL_OW 88
// yashinSearchVeh = true ;
10335: LD_ADDR_EXP 15
10339: PUSH
10340: LD_INT 1
10342: ST_TO_ADDR
// DialogueOff ;
10343: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10347: LD_ADDR_VAR 0 1
10351: PUSH
10352: LD_INT 22
10354: PUSH
10355: LD_INT 3
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 2
10364: PUSH
10365: LD_INT 30
10367: PUSH
10368: LD_INT 0
10370: PUSH
10371: EMPTY
10372: LIST
10373: LIST
10374: PUSH
10375: LD_INT 30
10377: PUSH
10378: LD_INT 1
10380: PUSH
10381: EMPTY
10382: LIST
10383: LIST
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PPUSH
10394: CALL_OW 69
10398: ST_TO_ADDR
// if playerDepot then
10399: LD_VAR 0 1
10403: IFFALSE 10442
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10405: LD_EXP 51
10409: PPUSH
10410: LD_VAR 0 1
10414: PUSH
10415: LD_INT 1
10417: ARRAY
10418: PPUSH
10419: CALL_OW 250
10423: PPUSH
10424: LD_VAR 0 1
10428: PUSH
10429: LD_INT 1
10431: ARRAY
10432: PPUSH
10433: CALL_OW 251
10437: PPUSH
10438: CALL_OW 111
// end ;
10442: PPOPN 2
10444: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10445: LD_EXP 51
10449: PPUSH
10450: CALL_OW 305
10454: IFFALSE 10570
10456: GO 10458
10458: DISABLE
10459: LD_INT 0
10461: PPUSH
10462: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10463: LD_ADDR_VAR 0 1
10467: PUSH
10468: LD_INT 22
10470: PUSH
10471: LD_INT 3
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: ST_TO_ADDR
// for unit in yourUnits do
10483: LD_ADDR_VAR 0 2
10487: PUSH
10488: LD_VAR 0 1
10492: PUSH
10493: FOR_IN
10494: IFFALSE 10567
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10496: LD_VAR 0 2
10500: PPUSH
10501: CALL_OW 319
10505: PUSH
10506: LD_EXP 51
10510: EQUAL
10511: PUSH
10512: LD_EXP 14
10516: PUSH
10517: LD_VAR 0 2
10521: PPUSH
10522: CALL_OW 319
10526: PUSH
10527: LD_EXP 14
10531: EQUAL
10532: AND
10533: OR
10534: IFFALSE 10565
// begin ComStop ( unit ) ;
10536: LD_VAR 0 2
10540: PPUSH
10541: CALL_OW 141
// DialogueOn ;
10545: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10549: LD_EXP 37
10553: PPUSH
10554: LD_STRING DYashinAttack-Bur-1
10556: PPUSH
10557: CALL_OW 88
// DialogueOff end ;
10561: CALL_OW 7
10565: GO 10493
10567: POP
10568: POP
// enable ;
10569: ENABLE
// end ;
10570: PPOPN 2
10572: END
// every 1 trigger IsPlaced ( Yashin ) do
10573: LD_EXP 51
10577: PPUSH
10578: CALL_OW 305
10582: IFFALSE 10618
10584: GO 10586
10586: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10587: LD_EXP 51
10591: PPUSH
10592: LD_INT 1000
10594: PPUSH
10595: CALL_OW 234
// if yashinVeh then
10599: LD_EXP 14
10603: IFFALSE 10617
// SetLives ( yashinVeh , 1000 ) ;
10605: LD_EXP 14
10609: PPUSH
10610: LD_INT 1000
10612: PPUSH
10613: CALL_OW 234
// enable ;
10617: ENABLE
// end ;
10618: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10619: LD_EXP 51
10623: PPUSH
10624: CALL_OW 305
10628: PUSH
10629: LD_EXP 15
10633: AND
10634: IFFALSE 11078
10636: GO 10638
10638: DISABLE
10639: LD_INT 0
10641: PPUSH
10642: PPUSH
10643: PPUSH
10644: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10645: LD_ADDR_VAR 0 1
10649: PUSH
10650: LD_INT 22
10652: PUSH
10653: LD_INT 3
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 2
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 58
10672: PUSH
10673: EMPTY
10674: LIST
10675: PUSH
10676: LD_INT 23
10678: PUSH
10679: LD_INT 3
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 2
10688: PUSH
10689: LD_INT 34
10691: PUSH
10692: LD_INT 42
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 34
10701: PUSH
10702: LD_INT 43
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 34
10711: PUSH
10712: LD_INT 44
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: LD_INT 46
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 69
10747: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10748: LD_ADDR_VAR 0 2
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 3
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 23
10775: PUSH
10776: LD_INT 3
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 34
10788: PUSH
10789: LD_INT 42
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 34
10798: PUSH
10799: LD_INT 43
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 34
10808: PUSH
10809: LD_INT 44
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 34
10818: PUSH
10819: LD_INT 46
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PPUSH
10839: CALL_OW 69
10843: ST_TO_ADDR
// if playerVehsEmpty then
10844: LD_VAR 0 1
10848: IFFALSE 10944
// begin for veh in playerVehsEmpty do
10850: LD_ADDR_VAR 0 3
10854: PUSH
10855: LD_VAR 0 1
10859: PUSH
10860: FOR_IN
10861: IFFALSE 10940
// begin if GetFuel ( veh ) >= 50 then
10863: LD_VAR 0 3
10867: PPUSH
10868: CALL_OW 261
10872: PUSH
10873: LD_INT 50
10875: GREATEREQUAL
10876: IFFALSE 10938
// begin yashinSearchVeh = false ;
10878: LD_ADDR_EXP 15
10882: PUSH
10883: LD_INT 0
10885: ST_TO_ADDR
// yashinVeh = veh ;
10886: LD_ADDR_EXP 14
10890: PUSH
10891: LD_VAR 0 3
10895: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10896: LD_EXP 14
10900: PPUSH
10901: LD_INT 6
10903: PPUSH
10904: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10908: LD_EXP 51
10912: PPUSH
10913: LD_EXP 14
10917: PPUSH
10918: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10922: LD_EXP 14
10926: PPUSH
10927: LD_INT 19
10929: PPUSH
10930: CALL_OW 113
// exit ;
10934: POP
10935: POP
10936: GO 11078
// end ; end ;
10938: GO 10860
10940: POP
10941: POP
// end else
10942: GO 11077
// if playerVehs then
10944: LD_VAR 0 2
10948: IFFALSE 11077
// begin for veh in playerVehs do
10950: LD_ADDR_VAR 0 3
10954: PUSH
10955: LD_VAR 0 2
10959: PUSH
10960: FOR_IN
10961: IFFALSE 11075
// begin if GetFuel ( veh ) >= 50 then
10963: LD_VAR 0 3
10967: PPUSH
10968: CALL_OW 261
10972: PUSH
10973: LD_INT 50
10975: GREATEREQUAL
10976: IFFALSE 11073
// begin yashinSearchVeh = false ;
10978: LD_ADDR_EXP 15
10982: PUSH
10983: LD_INT 0
10985: ST_TO_ADDR
// yashinVeh = veh ;
10986: LD_ADDR_EXP 14
10990: PUSH
10991: LD_VAR 0 3
10995: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
10996: LD_ADDR_VAR 0 4
11000: PUSH
11001: LD_VAR 0 3
11005: PPUSH
11006: CALL_OW 313
11010: PUSH
11011: LD_INT 1
11013: ARRAY
11014: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11015: LD_VAR 0 4
11019: PPUSH
11020: CALL_OW 121
// wait ( 0 0$1 ) ;
11024: LD_INT 35
11026: PPUSH
11027: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11031: LD_EXP 14
11035: PPUSH
11036: LD_INT 6
11038: PPUSH
11039: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11043: LD_EXP 51
11047: PPUSH
11048: LD_EXP 14
11052: PPUSH
11053: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11057: LD_EXP 14
11061: PPUSH
11062: LD_INT 19
11064: PPUSH
11065: CALL_OW 113
// exit ;
11069: POP
11070: POP
11071: GO 11078
// end ; end ;
11073: GO 10960
11075: POP
11076: POP
// end ; enable ;
11077: ENABLE
// end ;
11078: PPOPN 4
11080: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 19
11088: PPUSH
11089: CALL_OW 308
11093: IFFALSE 11116
11095: GO 11097
11097: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11107: LD_EXP 51
11111: PPUSH
11112: CALL_OW 64
// end ;
11116: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11117: LD_INT 22
11119: PUSH
11120: LD_INT 2
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: PUSH
11127: LD_INT 21
11129: PUSH
11130: LD_INT 3
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 50
11139: PUSH
11140: EMPTY
11141: LIST
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: PPUSH
11148: CALL_OW 69
11152: PUSH
11153: LD_INT 7
11155: LESSEQUAL
11156: PUSH
11157: LD_INT 22
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 21
11169: PUSH
11170: LD_INT 1
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 50
11179: PUSH
11180: EMPTY
11181: LIST
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: LIST
11187: PPUSH
11188: CALL_OW 69
11192: PUSH
11193: LD_INT 6
11195: LESSEQUAL
11196: AND
11197: PUSH
11198: LD_INT 2
11200: PPUSH
11201: CALL_OW 303
11205: PUSH
11206: LD_INT 2
11208: PPUSH
11209: CALL_OW 301
11213: OR
11214: PUSH
11215: LD_INT 2
11217: PPUSH
11218: CALL_OW 255
11222: PUSH
11223: LD_INT 3
11225: EQUAL
11226: OR
11227: AND
11228: IFFALSE 11889
11230: GO 11232
11232: DISABLE
11233: LD_INT 0
11235: PPUSH
11236: PPUSH
11237: PPUSH
// begin enableCounter = false ;
11238: LD_ADDR_EXP 18
11242: PUSH
11243: LD_INT 0
11245: ST_TO_ADDR
// Display_strings = [ ] ;
11246: LD_ADDR_OWVAR 47
11250: PUSH
11251: EMPTY
11252: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11253: LD_INT 1
11255: PPUSH
11256: CALL 18771 0 1
11260: PPUSH
11261: CALL 18653 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11265: LD_EXP 50
11269: PPUSH
11270: LD_STRING DHeikeObj-Pop-1
11272: PPUSH
11273: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11277: LD_EXP 37
11281: PPUSH
11282: LD_STRING DHeikeObj-Bur-1
11284: PPUSH
11285: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11289: LD_EXP 50
11293: PPUSH
11294: LD_STRING DHeikeObj-Pop-2
11296: PPUSH
11297: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11301: LD_EXP 37
11305: PPUSH
11306: LD_STRING DHeikeObj-Bur-2
11308: PPUSH
11309: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11313: LD_STRING MHeike
11315: PPUSH
11316: CALL_OW 337
// Query ( QHeike ) ;
11320: LD_STRING QHeike
11322: PPUSH
11323: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11327: LD_EXP 11
11331: NOT
11332: PUSH
11333: LD_EXP 45
11337: AND
11338: PUSH
11339: LD_EXP 45
11343: PPUSH
11344: CALL_OW 301
11348: NOT
11349: AND
11350: IFFALSE 11741
// begin if IsInUnit ( Kirilenkova ) then
11352: LD_EXP 45
11356: PPUSH
11357: CALL_OW 310
11361: IFFALSE 11410
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11363: LD_EXP 55
11367: PPUSH
11368: LD_EXP 45
11372: PPUSH
11373: CALL_OW 310
11377: PPUSH
11378: CALL_OW 250
11382: PPUSH
11383: LD_EXP 45
11387: PPUSH
11388: CALL_OW 310
11392: PPUSH
11393: CALL_OW 251
11397: PPUSH
11398: LD_INT 5
11400: PPUSH
11401: LD_INT 1
11403: PPUSH
11404: CALL_OW 50
11408: GO 11445
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11410: LD_EXP 55
11414: PPUSH
11415: LD_EXP 45
11419: PPUSH
11420: CALL_OW 250
11424: PPUSH
11425: LD_EXP 45
11429: PPUSH
11430: CALL_OW 251
11434: PPUSH
11435: LD_INT 5
11437: PPUSH
11438: LD_INT 1
11440: PPUSH
11441: CALL_OW 50
// xavierSpawned = true ;
11445: LD_ADDR_EXP 11
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11453: LD_INT 70
11455: PPUSH
11456: CALL_OW 67
// InGameOn ;
11460: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11464: LD_EXP 55
11468: PPUSH
11469: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11473: LD_EXP 55
11477: PPUSH
11478: LD_EXP 45
11482: PPUSH
11483: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11487: LD_EXP 45
11491: PPUSH
11492: LD_EXP 55
11496: PPUSH
11497: CALL_OW 119
// DialogueOn ;
11501: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11505: LD_EXP 55
11509: PPUSH
11510: LD_STRING DMeetXavier-Xav-1
11512: PPUSH
11513: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11517: LD_EXP 45
11521: PPUSH
11522: LD_STRING DMeetXavier-Kir-1
11524: PPUSH
11525: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11529: LD_EXP 55
11533: PPUSH
11534: LD_STRING DMeetXavier-Xav-2
11536: PPUSH
11537: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11541: LD_EXP 37
11545: PPUSH
11546: LD_STRING DQrXavier#1-Bur-1
11548: PPUSH
11549: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11553: LD_EXP 45
11557: PPUSH
11558: LD_STRING DQrXavier#1-Kir-1
11560: PPUSH
11561: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11565: LD_EXP 55
11569: PPUSH
11570: LD_STRING DQrXavier#1-Xav-1
11572: PPUSH
11573: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11577: LD_EXP 45
11581: PPUSH
11582: LD_STRING DQrXavier#1-Kir-2
11584: PPUSH
11585: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11589: LD_EXP 55
11593: PPUSH
11594: LD_STRING DQrXavier#1-Xav-2
11596: PPUSH
11597: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11601: LD_EXP 45
11605: PPUSH
11606: LD_STRING DQrXavier#1-Kir-3
11608: PPUSH
11609: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11613: LD_EXP 55
11617: PPUSH
11618: LD_STRING DQrXavier#1-Xav-3
11620: PPUSH
11621: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11625: LD_EXP 45
11629: PPUSH
11630: LD_STRING DQrXavier#1-Kir-4
11632: PPUSH
11633: CALL_OW 88
// if IsOK ( Gleb ) then
11637: LD_EXP 40
11641: PPUSH
11642: CALL_OW 302
11646: IFFALSE 11660
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11648: LD_EXP 40
11652: PPUSH
11653: LD_STRING DQrXavier#1-Glb-4
11655: PPUSH
11656: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11660: LD_ADDR_VAR 0 3
11664: PUSH
11665: LD_EXP 55
11669: PPUSH
11670: CALL_OW 254
11674: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11675: LD_ADDR_VAR 0 1
11679: PUSH
11680: LD_EXP 55
11684: PPUSH
11685: CALL_OW 250
11689: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11690: LD_ADDR_VAR 0 2
11694: PUSH
11695: LD_EXP 55
11699: PPUSH
11700: CALL_OW 251
11704: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11705: LD_EXP 55
11709: PPUSH
11710: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11714: LD_VAR 0 1
11718: PPUSH
11719: LD_VAR 0 2
11723: PPUSH
11724: LD_VAR 0 3
11728: PPUSH
11729: CALL 1157 0 3
// DialogueOff ;
11733: CALL_OW 7
// IngameOff ;
11737: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11741: LD_EXP 11
11745: PUSH
11746: LD_EXP 55
11750: PPUSH
11751: CALL_OW 255
11755: PUSH
11756: LD_INT 5
11758: EQUAL
11759: AND
11760: PUSH
11761: LD_INT 3
11763: PPUSH
11764: LD_INT 5
11766: PPUSH
11767: CALL_OW 81
11771: PUSH
11772: LD_INT 1
11774: EQUAL
11775: AND
11776: IFFALSE 11859
// begin xavierPatrol = false ;
11778: LD_ADDR_EXP 7
11782: PUSH
11783: LD_INT 0
11785: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_EXP 55
11795: PPUSH
11796: CALL_OW 254
11800: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11801: LD_ADDR_VAR 0 1
11805: PUSH
11806: LD_EXP 55
11810: PPUSH
11811: CALL_OW 250
11815: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11816: LD_ADDR_VAR 0 2
11820: PUSH
11821: LD_EXP 55
11825: PPUSH
11826: CALL_OW 251
11830: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11831: LD_EXP 55
11835: PPUSH
11836: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11840: LD_VAR 0 1
11844: PPUSH
11845: LD_VAR 0 2
11849: PPUSH
11850: LD_VAR 0 3
11854: PPUSH
11855: CALL 1157 0 3
// end ; wait ( 2 2$30 ) ;
11859: LD_INT 5250
11861: PPUSH
11862: CALL_OW 67
// PrepareHeikeGroup ;
11866: CALL 4899 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11870: LD_EXP 57
11874: PPUSH
11875: LD_EXP 58
11879: PPUSH
11880: LD_EXP 35
11884: PPUSH
11885: CALL 25569 0 3
// end ;
11889: PPOPN 3
11891: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11892: LD_EXP 57
11896: PPUSH
11897: CALL_OW 303
11901: IFFALSE 11925
11903: GO 11905
11905: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11906: LD_EXP 56
11910: PPUSH
11911: LD_EXP 58
11915: PPUSH
11916: LD_EXP 35
11920: PPUSH
11921: CALL 25569 0 3
11925: END
// every 0 0$1 trigger IsDying ( Heike ) do
11926: LD_EXP 56
11930: PPUSH
11931: CALL_OW 303
11935: IFFALSE 11973
11937: GO 11939
11939: DISABLE
// begin canCaptureHeike = true ;
11940: LD_ADDR_EXP 16
11944: PUSH
11945: LD_INT 1
11947: ST_TO_ADDR
// ComStop ( Heike ) ;
11948: LD_EXP 56
11952: PPUSH
11953: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
11957: LD_INT 8
11959: PPUSH
11960: LD_INT 3
11962: PPUSH
11963: LD_INT 1
11965: PPUSH
11966: LD_INT 1
11968: PPUSH
11969: CALL_OW 80
// end ;
11973: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
11974: LD_EXP 56
11978: PPUSH
11979: CALL_OW 256
11983: PUSH
11984: LD_INT 250
11986: GREATER
11987: PUSH
11988: LD_EXP 16
11992: AND
11993: IFFALSE 12002
11995: GO 11997
11997: DISABLE
// Dial_CaptureHeike ;
11998: CALL 12003 0 0
12002: END
// export function Dial_CaptureHeike ; begin
12003: LD_INT 0
12005: PPUSH
// heikeCaptured = true ;
12006: LD_ADDR_EXP 17
12010: PUSH
12011: LD_INT 1
12013: ST_TO_ADDR
// enableCounter = false ;
12014: LD_ADDR_EXP 18
12018: PUSH
12019: LD_INT 0
12021: ST_TO_ADDR
// InGameOn ;
12022: CALL_OW 8
// DialogueOn ;
12026: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12030: LD_EXP 56
12034: PPUSH
12035: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12039: LD_EXP 56
12043: PPUSH
12044: LD_STRING DHeikeCapt-Hke-1
12046: PPUSH
12047: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12051: LD_EXP 37
12055: PPUSH
12056: LD_STRING DHeikeCapt-Bur-1
12058: PPUSH
12059: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12063: LD_EXP 56
12067: PPUSH
12068: LD_STRING DHeikeCapt-Hke-2
12070: PPUSH
12071: CALL_OW 88
// DialogueOff ;
12075: CALL_OW 7
// IngameOff ;
12079: CALL_OW 9
// FinishMission ;
12083: CALL 16548 0 0
// end ;
12087: LD_VAR 0 1
12091: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12092: LD_EXP 56
12096: PPUSH
12097: CALL_OW 301
12101: PUSH
12102: LD_EXP 56
12106: PPUSH
12107: CALL_OW 305
12111: AND
12112: IFFALSE 12121
12114: GO 12116
12116: DISABLE
// FinishMission ; end_of_file
12117: CALL 16548 0 0
12121: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12122: LD_INT 0
12124: PPUSH
12125: PPUSH
// if debugMode then
12126: LD_EXP 26
12130: IFFALSE 12147
// unit := NewCharacter ( ident ) ;
12132: LD_ADDR_VAR 0 5
12136: PUSH
12137: LD_VAR 0 1
12141: PPUSH
12142: CALL_OW 25
12146: ST_TO_ADDR
// if exist_mode and not debugMode then
12147: LD_VAR 0 2
12151: PUSH
12152: LD_EXP 26
12156: NOT
12157: AND
12158: IFFALSE 12183
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12160: LD_ADDR_VAR 0 5
12164: PUSH
12165: LD_EXP 25
12169: PUSH
12170: LD_VAR 0 1
12174: STR
12175: PPUSH
12176: CALL_OW 34
12180: ST_TO_ADDR
12181: GO 12205
// if not debugMode then
12183: LD_EXP 26
12187: NOT
12188: IFFALSE 12205
// unit := NewCharacter ( ident ) ;
12190: LD_ADDR_VAR 0 5
12194: PUSH
12195: LD_VAR 0 1
12199: PPUSH
12200: CALL_OW 25
12204: ST_TO_ADDR
// if class then
12205: LD_VAR 0 3
12209: IFFALSE 12225
// SetClass ( unit , class ) ;
12211: LD_VAR 0 5
12215: PPUSH
12216: LD_VAR 0 3
12220: PPUSH
12221: CALL_OW 336
// result := unit ;
12225: LD_ADDR_VAR 0 4
12229: PUSH
12230: LD_VAR 0 5
12234: ST_TO_ADDR
// end ;
12235: LD_VAR 0 4
12239: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12240: LD_INT 0
12242: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12243: LD_VAR 0 1
12247: PPUSH
12248: CALL_OW 255
12252: PUSH
12253: LD_VAR 0 3
12257: EQUAL
12258: PUSH
12259: LD_VAR 0 1
12263: PPUSH
12264: CALL_OW 301
12268: NOT
12269: AND
12270: IFFALSE 12292
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12272: LD_VAR 0 1
12276: PPUSH
12277: LD_EXP 24
12281: PUSH
12282: LD_VAR 0 2
12286: STR
12287: PPUSH
12288: CALL_OW 38
// end ;
12292: LD_VAR 0 4
12296: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12297: LD_INT 0
12299: PPUSH
12300: PPUSH
12301: PPUSH
// resultCharactersToSave = [ ] ;
12302: LD_ADDR_VAR 0 6
12306: PUSH
12307: EMPTY
12308: ST_TO_ADDR
// for unit in characters do
12309: LD_ADDR_VAR 0 5
12313: PUSH
12314: LD_VAR 0 1
12318: PUSH
12319: FOR_IN
12320: IFFALSE 12369
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12322: LD_VAR 0 5
12326: PPUSH
12327: CALL_OW 255
12331: PUSH
12332: LD_VAR 0 3
12336: EQUAL
12337: PUSH
12338: LD_VAR 0 5
12342: PPUSH
12343: CALL_OW 301
12347: NOT
12348: AND
12349: IFFALSE 12367
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12351: LD_ADDR_VAR 0 6
12355: PUSH
12356: LD_VAR 0 6
12360: PUSH
12361: LD_VAR 0 5
12365: ADD
12366: ST_TO_ADDR
12367: GO 12319
12369: POP
12370: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12371: LD_VAR 0 6
12375: PPUSH
12376: LD_EXP 24
12380: PUSH
12381: LD_VAR 0 2
12385: STR
12386: PPUSH
12387: CALL_OW 38
// end ;
12391: LD_VAR 0 4
12395: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12396: LD_INT 0
12398: PPUSH
12399: PPUSH
// for unit in units do
12400: LD_ADDR_VAR 0 5
12404: PUSH
12405: LD_VAR 0 1
12409: PUSH
12410: FOR_IN
12411: IFFALSE 12434
// PlaceUnitArea ( unit , area , spawnMode ) ;
12413: LD_VAR 0 5
12417: PPUSH
12418: LD_VAR 0 2
12422: PPUSH
12423: LD_VAR 0 3
12427: PPUSH
12428: CALL_OW 49
12432: GO 12410
12434: POP
12435: POP
// end ;
12436: LD_VAR 0 4
12440: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
12445: PPUSH
12446: PPUSH
// units = characters ;
12447: LD_ADDR_VAR 0 9
12451: PUSH
12452: LD_VAR 0 1
12456: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12457: LD_ADDR_VAR 0 9
12461: PUSH
12462: LD_VAR 0 9
12466: PUSH
12467: LD_EXP 37
12471: PUSH
12472: LD_EXP 38
12476: PUSH
12477: LD_EXP 39
12481: PUSH
12482: LD_EXP 40
12486: PUSH
12487: LD_EXP 41
12491: PUSH
12492: LD_EXP 42
12496: PUSH
12497: LD_EXP 43
12501: PUSH
12502: LD_EXP 44
12506: PUSH
12507: LD_EXP 48
12511: PUSH
12512: LD_EXP 45
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: DIFF
12529: ST_TO_ADDR
// if not units and not canTalkHero then
12530: LD_VAR 0 9
12534: NOT
12535: PUSH
12536: LD_VAR 0 5
12540: NOT
12541: AND
12542: IFFALSE 12546
// exit ;
12544: GO 12719
// if not units then
12546: LD_VAR 0 9
12550: NOT
12551: IFFALSE 12572
// units = characters diff [ Burlak ] ;
12553: LD_ADDR_VAR 0 9
12557: PUSH
12558: LD_VAR 0 1
12562: PUSH
12563: LD_EXP 37
12567: PUSH
12568: EMPTY
12569: LIST
12570: DIFF
12571: ST_TO_ADDR
// if not units and canTalkHero then
12572: LD_VAR 0 9
12576: NOT
12577: PUSH
12578: LD_VAR 0 5
12582: AND
12583: IFFALSE 12587
// exit ;
12585: GO 12719
// speaker := units [ rand ( 1 , units ) ] ;
12587: LD_ADDR_VAR 0 8
12591: PUSH
12592: LD_VAR 0 9
12596: PUSH
12597: LD_INT 1
12599: PPUSH
12600: LD_VAR 0 9
12604: PPUSH
12605: CALL_OW 12
12609: ARRAY
12610: ST_TO_ADDR
// if radio then
12611: LD_VAR 0 4
12615: IFFALSE 12664
// begin if GetSex ( speaker ) = sex_male then
12617: LD_VAR 0 8
12621: PPUSH
12622: CALL_OW 258
12626: PUSH
12627: LD_INT 1
12629: EQUAL
12630: IFFALSE 12648
// SayRadio ( speaker , dialogMID ) else
12632: LD_VAR 0 8
12636: PPUSH
12637: LD_VAR 0 2
12641: PPUSH
12642: CALL_OW 94
12646: GO 12662
// SayRadio ( speaker , dialogFID ) ;
12648: LD_VAR 0 8
12652: PPUSH
12653: LD_VAR 0 3
12657: PPUSH
12658: CALL_OW 94
// end else
12662: GO 12709
// begin if GetSex ( speaker ) = sex_male then
12664: LD_VAR 0 8
12668: PPUSH
12669: CALL_OW 258
12673: PUSH
12674: LD_INT 1
12676: EQUAL
12677: IFFALSE 12695
// Say ( speaker , dialogMID ) else
12679: LD_VAR 0 8
12683: PPUSH
12684: LD_VAR 0 2
12688: PPUSH
12689: CALL_OW 88
12693: GO 12709
// Say ( speaker , dialogFID ) ;
12695: LD_VAR 0 8
12699: PPUSH
12700: LD_VAR 0 3
12704: PPUSH
12705: CALL_OW 88
// end ; result := speaker ;
12709: LD_ADDR_VAR 0 6
12713: PUSH
12714: LD_VAR 0 8
12718: ST_TO_ADDR
// end ;
12719: LD_VAR 0 6
12723: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12724: LD_INT 0
12726: PPUSH
12727: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12728: LD_ADDR_VAR 0 4
12732: PUSH
12733: LD_VAR 0 2
12737: PPUSH
12738: CALL_OW 254
12742: PUSH
12743: LD_INT 3
12745: MINUS
12746: ST_TO_ADDR
// if dir < 0 then
12747: LD_VAR 0 4
12751: PUSH
12752: LD_INT 0
12754: LESS
12755: IFFALSE 12771
// dir := 6 + dir ;
12757: LD_ADDR_VAR 0 4
12761: PUSH
12762: LD_INT 6
12764: PUSH
12765: LD_VAR 0 4
12769: PLUS
12770: ST_TO_ADDR
// SetDir ( un , dir ) ;
12771: LD_VAR 0 1
12775: PPUSH
12776: LD_VAR 0 4
12780: PPUSH
12781: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12785: LD_VAR 0 1
12789: PPUSH
12790: LD_VAR 0 2
12794: PPUSH
12795: CALL_OW 52
// result = un ;
12799: LD_ADDR_VAR 0 3
12803: PUSH
12804: LD_VAR 0 1
12808: ST_TO_ADDR
// end ;
12809: LD_VAR 0 3
12813: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12814: LD_INT 0
12816: PPUSH
12817: PPUSH
// for eng in engs do
12818: LD_ADDR_VAR 0 4
12822: PUSH
12823: LD_VAR 0 1
12827: PUSH
12828: FOR_IN
12829: IFFALSE 12946
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12831: LD_VAR 0 4
12835: PPUSH
12836: CALL_OW 257
12840: PUSH
12841: LD_INT 2
12843: EQUAL
12844: PUSH
12845: LD_VAR 0 4
12849: PPUSH
12850: CALL_OW 302
12854: AND
12855: PUSH
12856: LD_VAR 0 2
12860: AND
12861: PUSH
12862: LD_VAR 0 2
12866: PPUSH
12867: CALL_OW 255
12871: PUSH
12872: LD_VAR 0 4
12876: PPUSH
12877: CALL_OW 255
12881: EQUAL
12882: NOT
12883: AND
12884: IFFALSE 12944
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12886: LD_VAR 0 4
12890: PPUSH
12891: LD_STRING e
12893: PUSH
12894: LD_VAR 0 2
12898: PPUSH
12899: CALL_OW 250
12903: PUSH
12904: LD_VAR 0 2
12908: PPUSH
12909: CALL_OW 251
12913: PUSH
12914: LD_VAR 0 2
12918: PUSH
12919: LD_INT 0
12921: PUSH
12922: LD_INT 0
12924: PUSH
12925: LD_INT 0
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: PPUSH
12940: CALL_OW 447
12944: GO 12828
12946: POP
12947: POP
12948: LD_VAR 0 3
12952: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
12953: LD_INT 0
12955: PPUSH
// if not GetClass ( unit ) = class_soldier then
12956: LD_VAR 0 1
12960: PPUSH
12961: CALL_OW 257
12965: PUSH
12966: LD_INT 1
12968: EQUAL
12969: NOT
12970: IFFALSE 12974
// exit ;
12972: GO 13022
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
12974: LD_VAR 0 1
12978: PPUSH
12979: LD_STRING p
12981: PUSH
12982: LD_VAR 0 2
12986: PUSH
12987: LD_VAR 0 3
12991: PUSH
12992: LD_INT 0
12994: PUSH
12995: LD_VAR 0 4
12999: PUSH
13000: LD_INT 0
13002: PUSH
13003: LD_INT 0
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: PPUSH
13018: CALL_OW 447
13022: LD_VAR 0 5
13026: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13033: LD_ADDR_VAR 0 7
13037: PUSH
13038: LD_VAR 0 1
13042: PUSH
13043: LD_VAR 0 2
13047: ARRAY
13048: PPUSH
13049: LD_VAR 0 3
13053: PPUSH
13054: CALL_OW 3
13058: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13059: LD_ADDR_VAR 0 1
13063: PUSH
13064: LD_VAR 0 1
13068: PPUSH
13069: LD_VAR 0 2
13073: PPUSH
13074: LD_VAR 0 7
13078: PPUSH
13079: CALL_OW 1
13083: ST_TO_ADDR
// result := tab ;
13084: LD_ADDR_VAR 0 4
13088: PUSH
13089: LD_VAR 0 1
13093: ST_TO_ADDR
// end ;
13094: LD_VAR 0 4
13098: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13099: LD_INT 0
13101: PPUSH
13102: PPUSH
13103: PPUSH
13104: PPUSH
13105: PPUSH
13106: PPUSH
13107: PPUSH
13108: PPUSH
13109: PPUSH
13110: PPUSH
13111: PPUSH
13112: PPUSH
// result := [ ] ;
13113: LD_ADDR_VAR 0 8
13117: PUSH
13118: EMPTY
13119: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13120: LD_VAR 0 1
13124: PPUSH
13125: CALL_OW 266
13129: PUSH
13130: LD_INT 0
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: IN
13140: NOT
13141: IFFALSE 13145
// exit ;
13143: GO 14786
// if name then
13145: LD_VAR 0 3
13149: IFFALSE 13165
// SetBName ( base_dep , name ) ;
13151: LD_VAR 0 1
13155: PPUSH
13156: LD_VAR 0 3
13160: PPUSH
13161: CALL_OW 500
// base := GetBase ( base_dep ) ;
13165: LD_ADDR_VAR 0 16
13169: PUSH
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 274
13179: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13180: LD_ADDR_VAR 0 17
13184: PUSH
13185: LD_VAR 0 1
13189: PPUSH
13190: CALL_OW 255
13194: ST_TO_ADDR
// if sources then
13195: LD_VAR 0 5
13199: IFFALSE 13246
// for i = 1 to 3 do
13201: LD_ADDR_VAR 0 9
13205: PUSH
13206: DOUBLE
13207: LD_INT 1
13209: DEC
13210: ST_TO_ADDR
13211: LD_INT 3
13213: PUSH
13214: FOR_TO
13215: IFFALSE 13244
// AddResourceType ( base , i , sources [ i ] ) ;
13217: LD_VAR 0 16
13221: PPUSH
13222: LD_VAR 0 9
13226: PPUSH
13227: LD_VAR 0 5
13231: PUSH
13232: LD_VAR 0 9
13236: ARRAY
13237: PPUSH
13238: CALL_OW 276
13242: GO 13214
13244: POP
13245: POP
// buildings := GetBaseBuildings ( base , area ) ;
13246: LD_ADDR_VAR 0 18
13250: PUSH
13251: LD_VAR 0 16
13255: PPUSH
13256: LD_VAR 0 2
13260: PPUSH
13261: CALL 48749 0 2
13265: ST_TO_ADDR
// InitHc ;
13266: CALL_OW 19
// InitUc ;
13270: CALL_OW 18
// uc_side := side ;
13274: LD_ADDR_OWVAR 20
13278: PUSH
13279: LD_VAR 0 17
13283: ST_TO_ADDR
// uc_nation := nation ;
13284: LD_ADDR_OWVAR 21
13288: PUSH
13289: LD_VAR 0 6
13293: ST_TO_ADDR
// if buildings then
13294: LD_VAR 0 18
13298: IFFALSE 14645
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13300: LD_ADDR_VAR 0 19
13304: PUSH
13305: LD_VAR 0 18
13309: PPUSH
13310: LD_INT 2
13312: PUSH
13313: LD_INT 30
13315: PUSH
13316: LD_INT 29
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 30
13325: PUSH
13326: LD_INT 30
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: PPUSH
13338: CALL_OW 72
13342: ST_TO_ADDR
// if tmp then
13343: LD_VAR 0 19
13347: IFFALSE 13395
// for i in tmp do
13349: LD_ADDR_VAR 0 9
13353: PUSH
13354: LD_VAR 0 19
13358: PUSH
13359: FOR_IN
13360: IFFALSE 13393
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13362: LD_VAR 0 9
13366: PPUSH
13367: CALL_OW 250
13371: PPUSH
13372: LD_VAR 0 9
13376: PPUSH
13377: CALL_OW 251
13381: PPUSH
13382: LD_VAR 0 17
13386: PPUSH
13387: CALL_OW 441
13391: GO 13359
13393: POP
13394: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13395: LD_VAR 0 18
13399: PPUSH
13400: LD_INT 2
13402: PUSH
13403: LD_INT 30
13405: PUSH
13406: LD_INT 31
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 30
13415: PUSH
13416: LD_INT 32
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 30
13425: PUSH
13426: LD_INT 33
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 72
13443: IFFALSE 13542
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13445: LD_ADDR_VAR 0 9
13449: PUSH
13450: LD_VAR 0 18
13454: PPUSH
13455: LD_INT 2
13457: PUSH
13458: LD_INT 30
13460: PUSH
13461: LD_INT 31
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 30
13470: PUSH
13471: LD_INT 32
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 30
13480: PUSH
13481: LD_INT 33
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 72
13498: PUSH
13499: FOR_IN
13500: IFFALSE 13540
// begin if not GetBWeapon ( i ) then
13502: LD_VAR 0 9
13506: PPUSH
13507: CALL_OW 269
13511: NOT
13512: IFFALSE 13538
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13514: LD_VAR 0 9
13518: PPUSH
13519: LD_VAR 0 9
13523: PPUSH
13524: LD_VAR 0 2
13528: PPUSH
13529: CALL 50977 0 2
13533: PPUSH
13534: CALL_OW 431
// end ;
13538: GO 13499
13540: POP
13541: POP
// end ; for i = 1 to personel do
13542: LD_ADDR_VAR 0 9
13546: PUSH
13547: DOUBLE
13548: LD_INT 1
13550: DEC
13551: ST_TO_ADDR
13552: LD_VAR 0 7
13556: PUSH
13557: FOR_TO
13558: IFFALSE 14625
// begin if i > 4 then
13560: LD_VAR 0 9
13564: PUSH
13565: LD_INT 4
13567: GREATER
13568: IFFALSE 13572
// break ;
13570: GO 14625
// case i of 1 :
13572: LD_VAR 0 9
13576: PUSH
13577: LD_INT 1
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13676
13585: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13586: LD_ADDR_VAR 0 13
13590: PUSH
13591: LD_VAR 0 18
13595: PPUSH
13596: LD_INT 22
13598: PUSH
13599: LD_VAR 0 17
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 58
13610: PUSH
13611: EMPTY
13612: LIST
13613: PUSH
13614: LD_INT 2
13616: PUSH
13617: LD_INT 30
13619: PUSH
13620: LD_INT 31
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 30
13629: PUSH
13630: LD_INT 32
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 30
13639: PUSH
13640: LD_INT 4
13642: PUSH
13643: EMPTY
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 30
13649: PUSH
13650: LD_INT 5
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: PPUSH
13669: CALL_OW 72
13673: ST_TO_ADDR
13674: GO 13898
13676: LD_INT 2
13678: DOUBLE
13679: EQUAL
13680: IFTRUE 13684
13682: GO 13746
13684: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13685: LD_ADDR_VAR 0 13
13689: PUSH
13690: LD_VAR 0 18
13694: PPUSH
13695: LD_INT 22
13697: PUSH
13698: LD_VAR 0 17
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 2
13709: PUSH
13710: LD_INT 30
13712: PUSH
13713: LD_INT 0
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 30
13722: PUSH
13723: LD_INT 1
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PPUSH
13739: CALL_OW 72
13743: ST_TO_ADDR
13744: GO 13898
13746: LD_INT 3
13748: DOUBLE
13749: EQUAL
13750: IFTRUE 13754
13752: GO 13816
13754: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13755: LD_ADDR_VAR 0 13
13759: PUSH
13760: LD_VAR 0 18
13764: PPUSH
13765: LD_INT 22
13767: PUSH
13768: LD_VAR 0 17
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: LD_INT 30
13782: PUSH
13783: LD_INT 2
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 30
13792: PUSH
13793: LD_INT 3
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 72
13813: ST_TO_ADDR
13814: GO 13898
13816: LD_INT 4
13818: DOUBLE
13819: EQUAL
13820: IFTRUE 13824
13822: GO 13897
13824: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13825: LD_ADDR_VAR 0 13
13829: PUSH
13830: LD_VAR 0 18
13834: PPUSH
13835: LD_INT 22
13837: PUSH
13838: LD_VAR 0 17
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: LD_INT 30
13852: PUSH
13853: LD_INT 6
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 30
13862: PUSH
13863: LD_INT 7
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 30
13872: PUSH
13873: LD_INT 8
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PPUSH
13890: CALL_OW 72
13894: ST_TO_ADDR
13895: GO 13898
13897: POP
// if i = 1 then
13898: LD_VAR 0 9
13902: PUSH
13903: LD_INT 1
13905: EQUAL
13906: IFFALSE 14024
// begin tmp := [ ] ;
13908: LD_ADDR_VAR 0 19
13912: PUSH
13913: EMPTY
13914: ST_TO_ADDR
// for j in f do
13915: LD_ADDR_VAR 0 10
13919: PUSH
13920: LD_VAR 0 13
13924: PUSH
13925: FOR_IN
13926: IFFALSE 14006
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13928: LD_VAR 0 10
13932: PPUSH
13933: CALL_OW 266
13937: PUSH
13938: LD_INT 31
13940: PUSH
13941: LD_INT 32
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: IN
13948: IFFALSE 13975
// tmp := Insert ( tmp , 1 , j ) else
13950: LD_ADDR_VAR 0 19
13954: PUSH
13955: LD_VAR 0 19
13959: PPUSH
13960: LD_INT 1
13962: PPUSH
13963: LD_VAR 0 10
13967: PPUSH
13968: CALL_OW 2
13972: ST_TO_ADDR
13973: GO 14004
// tmp := Insert ( tmp , tmp + 1 , j ) ;
13975: LD_ADDR_VAR 0 19
13979: PUSH
13980: LD_VAR 0 19
13984: PPUSH
13985: LD_VAR 0 19
13989: PUSH
13990: LD_INT 1
13992: PLUS
13993: PPUSH
13994: LD_VAR 0 10
13998: PPUSH
13999: CALL_OW 2
14003: ST_TO_ADDR
14004: GO 13925
14006: POP
14007: POP
// if tmp then
14008: LD_VAR 0 19
14012: IFFALSE 14024
// f := tmp ;
14014: LD_ADDR_VAR 0 13
14018: PUSH
14019: LD_VAR 0 19
14023: ST_TO_ADDR
// end ; x := personel [ i ] ;
14024: LD_ADDR_VAR 0 14
14028: PUSH
14029: LD_VAR 0 7
14033: PUSH
14034: LD_VAR 0 9
14038: ARRAY
14039: ST_TO_ADDR
// if x = - 1 then
14040: LD_VAR 0 14
14044: PUSH
14045: LD_INT 1
14047: NEG
14048: EQUAL
14049: IFFALSE 14243
// begin for j in f do
14051: LD_ADDR_VAR 0 10
14055: PUSH
14056: LD_VAR 0 13
14060: PUSH
14061: FOR_IN
14062: IFFALSE 14239
// repeat InitHc ;
14064: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14068: LD_VAR 0 10
14072: PPUSH
14073: CALL_OW 266
14077: PUSH
14078: LD_INT 5
14080: EQUAL
14081: IFFALSE 14136
// begin if UnitsInside ( j ) < 3 then
14083: LD_VAR 0 10
14087: PPUSH
14088: CALL_OW 313
14092: PUSH
14093: LD_INT 3
14095: LESS
14096: IFFALSE 14117
// PrepareHuman ( false , i , skill ) else
14098: LD_INT 0
14100: PPUSH
14101: LD_VAR 0 9
14105: PPUSH
14106: LD_VAR 0 4
14110: PPUSH
14111: CALL_OW 380
14115: GO 14134
// PrepareHuman ( false , i , skill ) ;
14117: LD_INT 0
14119: PPUSH
14120: LD_VAR 0 9
14124: PPUSH
14125: LD_VAR 0 4
14129: PPUSH
14130: CALL_OW 380
// end else
14134: GO 14153
// PrepareHuman ( false , i , skill ) ;
14136: LD_INT 0
14138: PPUSH
14139: LD_VAR 0 9
14143: PPUSH
14144: LD_VAR 0 4
14148: PPUSH
14149: CALL_OW 380
// un := CreateHuman ;
14153: LD_ADDR_VAR 0 15
14157: PUSH
14158: CALL_OW 44
14162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14163: LD_ADDR_VAR 0 8
14167: PUSH
14168: LD_VAR 0 8
14172: PPUSH
14173: LD_INT 1
14175: PPUSH
14176: LD_VAR 0 15
14180: PPUSH
14181: CALL_OW 2
14185: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14186: LD_VAR 0 15
14190: PPUSH
14191: LD_VAR 0 10
14195: PPUSH
14196: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14200: LD_VAR 0 10
14204: PPUSH
14205: CALL_OW 313
14209: PUSH
14210: LD_INT 6
14212: EQUAL
14213: PUSH
14214: LD_VAR 0 10
14218: PPUSH
14219: CALL_OW 266
14223: PUSH
14224: LD_INT 32
14226: PUSH
14227: LD_INT 31
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: IN
14234: OR
14235: IFFALSE 14064
14237: GO 14061
14239: POP
14240: POP
// end else
14241: GO 14623
// for j = 1 to x do
14243: LD_ADDR_VAR 0 10
14247: PUSH
14248: DOUBLE
14249: LD_INT 1
14251: DEC
14252: ST_TO_ADDR
14253: LD_VAR 0 14
14257: PUSH
14258: FOR_TO
14259: IFFALSE 14621
// begin InitHc ;
14261: CALL_OW 19
// if not f then
14265: LD_VAR 0 13
14269: NOT
14270: IFFALSE 14359
// begin PrepareHuman ( false , i , skill ) ;
14272: LD_INT 0
14274: PPUSH
14275: LD_VAR 0 9
14279: PPUSH
14280: LD_VAR 0 4
14284: PPUSH
14285: CALL_OW 380
// un := CreateHuman ;
14289: LD_ADDR_VAR 0 15
14293: PUSH
14294: CALL_OW 44
14298: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14299: LD_ADDR_VAR 0 8
14303: PUSH
14304: LD_VAR 0 8
14308: PPUSH
14309: LD_INT 1
14311: PPUSH
14312: LD_VAR 0 15
14316: PPUSH
14317: CALL_OW 2
14321: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14322: LD_VAR 0 15
14326: PPUSH
14327: LD_VAR 0 1
14331: PPUSH
14332: CALL_OW 250
14336: PPUSH
14337: LD_VAR 0 1
14341: PPUSH
14342: CALL_OW 251
14346: PPUSH
14347: LD_INT 10
14349: PPUSH
14350: LD_INT 0
14352: PPUSH
14353: CALL_OW 50
// continue ;
14357: GO 14258
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14359: LD_VAR 0 13
14363: PUSH
14364: LD_INT 1
14366: ARRAY
14367: PPUSH
14368: CALL_OW 313
14372: PUSH
14373: LD_VAR 0 13
14377: PUSH
14378: LD_INT 1
14380: ARRAY
14381: PPUSH
14382: CALL_OW 266
14386: PUSH
14387: LD_INT 32
14389: PUSH
14390: LD_INT 31
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: IN
14397: AND
14398: PUSH
14399: LD_VAR 0 13
14403: PUSH
14404: LD_INT 1
14406: ARRAY
14407: PPUSH
14408: CALL_OW 313
14412: PUSH
14413: LD_INT 6
14415: EQUAL
14416: OR
14417: IFFALSE 14437
// f := Delete ( f , 1 ) ;
14419: LD_ADDR_VAR 0 13
14423: PUSH
14424: LD_VAR 0 13
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 3
14436: ST_TO_ADDR
// if not f then
14437: LD_VAR 0 13
14441: NOT
14442: IFFALSE 14460
// begin x := x + 2 ;
14444: LD_ADDR_VAR 0 14
14448: PUSH
14449: LD_VAR 0 14
14453: PUSH
14454: LD_INT 2
14456: PLUS
14457: ST_TO_ADDR
// continue ;
14458: GO 14258
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14460: LD_VAR 0 13
14464: PUSH
14465: LD_INT 1
14467: ARRAY
14468: PPUSH
14469: CALL_OW 266
14473: PUSH
14474: LD_INT 5
14476: EQUAL
14477: IFFALSE 14551
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14479: LD_VAR 0 13
14483: PUSH
14484: LD_INT 1
14486: ARRAY
14487: PPUSH
14488: CALL_OW 313
14492: PUSH
14493: LD_INT 3
14495: LESS
14496: IFFALSE 14532
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14498: LD_INT 0
14500: PPUSH
14501: LD_INT 5
14503: PUSH
14504: LD_INT 8
14506: PUSH
14507: LD_INT 9
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: LIST
14514: PUSH
14515: LD_VAR 0 6
14519: ARRAY
14520: PPUSH
14521: LD_VAR 0 4
14525: PPUSH
14526: CALL_OW 380
14530: GO 14549
// PrepareHuman ( false , i , skill ) ;
14532: LD_INT 0
14534: PPUSH
14535: LD_VAR 0 9
14539: PPUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: CALL_OW 380
// end else
14549: GO 14568
// PrepareHuman ( false , i , skill ) ;
14551: LD_INT 0
14553: PPUSH
14554: LD_VAR 0 9
14558: PPUSH
14559: LD_VAR 0 4
14563: PPUSH
14564: CALL_OW 380
// un := CreateHuman ;
14568: LD_ADDR_VAR 0 15
14572: PUSH
14573: CALL_OW 44
14577: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14578: LD_ADDR_VAR 0 8
14582: PUSH
14583: LD_VAR 0 8
14587: PPUSH
14588: LD_INT 1
14590: PPUSH
14591: LD_VAR 0 15
14595: PPUSH
14596: CALL_OW 2
14600: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14601: LD_VAR 0 15
14605: PPUSH
14606: LD_VAR 0 13
14610: PUSH
14611: LD_INT 1
14613: ARRAY
14614: PPUSH
14615: CALL_OW 52
// end ;
14619: GO 14258
14621: POP
14622: POP
// end ;
14623: GO 13557
14625: POP
14626: POP
// result := result ^ buildings ;
14627: LD_ADDR_VAR 0 8
14631: PUSH
14632: LD_VAR 0 8
14636: PUSH
14637: LD_VAR 0 18
14641: ADD
14642: ST_TO_ADDR
// end else
14643: GO 14786
// begin for i = 1 to personel do
14645: LD_ADDR_VAR 0 9
14649: PUSH
14650: DOUBLE
14651: LD_INT 1
14653: DEC
14654: ST_TO_ADDR
14655: LD_VAR 0 7
14659: PUSH
14660: FOR_TO
14661: IFFALSE 14784
// begin if i > 4 then
14663: LD_VAR 0 9
14667: PUSH
14668: LD_INT 4
14670: GREATER
14671: IFFALSE 14675
// break ;
14673: GO 14784
// x := personel [ i ] ;
14675: LD_ADDR_VAR 0 14
14679: PUSH
14680: LD_VAR 0 7
14684: PUSH
14685: LD_VAR 0 9
14689: ARRAY
14690: ST_TO_ADDR
// if x = - 1 then
14691: LD_VAR 0 14
14695: PUSH
14696: LD_INT 1
14698: NEG
14699: EQUAL
14700: IFFALSE 14704
// continue ;
14702: GO 14660
// PrepareHuman ( false , i , skill ) ;
14704: LD_INT 0
14706: PPUSH
14707: LD_VAR 0 9
14711: PPUSH
14712: LD_VAR 0 4
14716: PPUSH
14717: CALL_OW 380
// un := CreateHuman ;
14721: LD_ADDR_VAR 0 15
14725: PUSH
14726: CALL_OW 44
14730: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14731: LD_VAR 0 15
14735: PPUSH
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 250
14745: PPUSH
14746: LD_VAR 0 1
14750: PPUSH
14751: CALL_OW 251
14755: PPUSH
14756: LD_INT 10
14758: PPUSH
14759: LD_INT 0
14761: PPUSH
14762: CALL_OW 50
// result := result ^ un ;
14766: LD_ADDR_VAR 0 8
14770: PUSH
14771: LD_VAR 0 8
14775: PUSH
14776: LD_VAR 0 15
14780: ADD
14781: ST_TO_ADDR
// end ;
14782: GO 14660
14784: POP
14785: POP
// end ; end ;
14786: LD_VAR 0 8
14790: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
14796: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14797: LD_ADDR_VAR 0 6
14801: PUSH
14802: LD_INT 34
14804: PUSH
14805: LD_INT 71
14807: PUSH
14808: LD_INT 70
14810: PUSH
14811: LD_INT 69
14813: PUSH
14814: LD_INT 39
14816: PUSH
14817: LD_INT 31
14819: PUSH
14820: LD_INT 14
14822: PUSH
14823: LD_INT 10
14825: PUSH
14826: LD_INT 40
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: LIST
14834: LIST
14835: LIST
14836: LIST
14837: LIST
14838: LIST
14839: ST_TO_ADDR
// resultWeapons = [ ] ;
14840: LD_ADDR_VAR 0 5
14844: PUSH
14845: EMPTY
14846: ST_TO_ADDR
// for i := 1 to weaponTechs do
14847: LD_ADDR_VAR 0 4
14851: PUSH
14852: DOUBLE
14853: LD_INT 1
14855: DEC
14856: ST_TO_ADDR
14857: LD_VAR 0 6
14861: PUSH
14862: FOR_TO
14863: IFFALSE 15050
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14865: LD_VAR 0 6
14869: PUSH
14870: LD_VAR 0 4
14874: ARRAY
14875: PPUSH
14876: LD_VAR 0 2
14880: PPUSH
14881: CALL_OW 482
14885: PUSH
14886: LD_VAR 0 6
14890: PUSH
14891: LD_VAR 0 4
14895: ARRAY
14896: PPUSH
14897: LD_VAR 0 1
14901: PPUSH
14902: CALL_OW 321
14906: PUSH
14907: LD_INT 2
14909: EQUAL
14910: AND
14911: IFFALSE 15048
// case nation of nation_american :
14913: LD_VAR 0 2
14917: PUSH
14918: LD_INT 1
14920: DOUBLE
14921: EQUAL
14922: IFTRUE 14926
14924: GO 14961
14926: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14927: LD_ADDR_VAR 0 5
14931: PUSH
14932: LD_VAR 0 5
14936: PUSH
14937: LD_VAR 0 6
14941: PUSH
14942: LD_VAR 0 4
14946: ARRAY
14947: PPUSH
14948: LD_VAR 0 2
14952: PPUSH
14953: CALL 15067 0 2
14957: ADD
14958: ST_TO_ADDR
14959: GO 15048
14961: LD_INT 2
14963: DOUBLE
14964: EQUAL
14965: IFTRUE 14969
14967: GO 15004
14969: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
14970: LD_ADDR_VAR 0 5
14974: PUSH
14975: LD_VAR 0 5
14979: PUSH
14980: LD_VAR 0 6
14984: PUSH
14985: LD_VAR 0 4
14989: ARRAY
14990: PPUSH
14991: LD_VAR 0 2
14995: PPUSH
14996: CALL 15067 0 2
15000: ADD
15001: ST_TO_ADDR
15002: GO 15048
15004: LD_INT 3
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15047
15012: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15013: LD_ADDR_VAR 0 5
15017: PUSH
15018: LD_VAR 0 5
15022: PUSH
15023: LD_VAR 0 6
15027: PUSH
15028: LD_VAR 0 4
15032: ARRAY
15033: PPUSH
15034: LD_VAR 0 2
15038: PPUSH
15039: CALL 15067 0 2
15043: ADD
15044: ST_TO_ADDR
15045: GO 15048
15047: POP
// end ;
15048: GO 14862
15050: POP
15051: POP
// result = resultWeapons ;
15052: LD_ADDR_VAR 0 3
15056: PUSH
15057: LD_VAR 0 5
15061: ST_TO_ADDR
// end ;
15062: LD_VAR 0 3
15066: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15067: LD_INT 0
15069: PPUSH
// case tech of tech_AdvMet :
15070: LD_VAR 0 1
15074: PUSH
15075: LD_INT 34
15077: DOUBLE
15078: EQUAL
15079: IFTRUE 15083
15081: GO 15111
15083: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15084: LD_ADDR_VAR 0 3
15088: PUSH
15089: LD_INT 6
15091: PUSH
15092: LD_STRING 
15094: PUSH
15095: LD_INT 46
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: PUSH
15103: LD_VAR 0 2
15107: ARRAY
15108: ST_TO_ADDR
15109: GO 15400
15111: LD_INT 71
15113: DOUBLE
15114: EQUAL
15115: IFTRUE 15119
15117: GO 15147
15119: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15120: LD_ADDR_VAR 0 3
15124: PUSH
15125: LD_STRING 
15127: PUSH
15128: LD_STRING 
15130: PUSH
15131: LD_INT 47
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: PUSH
15139: LD_VAR 0 2
15143: ARRAY
15144: ST_TO_ADDR
15145: GO 15400
15147: LD_INT 70
15149: DOUBLE
15150: EQUAL
15151: IFTRUE 15155
15153: GO 15183
15155: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_STRING 
15163: PUSH
15164: LD_INT 26
15166: PUSH
15167: LD_STRING 
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: LD_VAR 0 2
15179: ARRAY
15180: ST_TO_ADDR
15181: GO 15400
15183: LD_INT 69
15185: DOUBLE
15186: EQUAL
15187: IFTRUE 15191
15189: GO 15219
15191: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15192: LD_ADDR_VAR 0 3
15196: PUSH
15197: LD_INT 4
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 43
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: PUSH
15211: LD_VAR 0 2
15215: ARRAY
15216: ST_TO_ADDR
15217: GO 15400
15219: LD_INT 39
15221: DOUBLE
15222: EQUAL
15223: IFTRUE 15227
15225: GO 15255
15227: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15228: LD_ADDR_VAR 0 3
15232: PUSH
15233: LD_INT 5
15235: PUSH
15236: LD_INT 27
15238: PUSH
15239: LD_INT 44
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: LD_VAR 0 2
15251: ARRAY
15252: ST_TO_ADDR
15253: GO 15400
15255: LD_INT 31
15257: DOUBLE
15258: EQUAL
15259: IFTRUE 15263
15261: GO 15291
15263: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15264: LD_ADDR_VAR 0 3
15268: PUSH
15269: LD_STRING 
15271: PUSH
15272: LD_STRING 
15274: PUSH
15275: LD_INT 49
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: PUSH
15283: LD_VAR 0 2
15287: ARRAY
15288: ST_TO_ADDR
15289: GO 15400
15291: LD_INT 14
15293: DOUBLE
15294: EQUAL
15295: IFTRUE 15299
15297: GO 15327
15299: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15300: LD_ADDR_VAR 0 3
15304: PUSH
15305: LD_INT 10
15307: PUSH
15308: LD_STRING 
15310: PUSH
15311: LD_STRING 
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: PUSH
15319: LD_VAR 0 2
15323: ARRAY
15324: ST_TO_ADDR
15325: GO 15400
15327: LD_INT 10
15329: DOUBLE
15330: EQUAL
15331: IFTRUE 15335
15333: GO 15363
15335: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15336: LD_ADDR_VAR 0 3
15340: PUSH
15341: LD_INT 9
15343: PUSH
15344: LD_STRING 
15346: PUSH
15347: LD_STRING 
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: LIST
15354: PUSH
15355: LD_VAR 0 2
15359: ARRAY
15360: ST_TO_ADDR
15361: GO 15400
15363: LD_INT 40
15365: DOUBLE
15366: EQUAL
15367: IFTRUE 15371
15369: GO 15399
15371: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_INT 7
15379: PUSH
15380: LD_INT 28
15382: PUSH
15383: LD_INT 45
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: LIST
15390: PUSH
15391: LD_VAR 0 2
15395: ARRAY
15396: ST_TO_ADDR
15397: GO 15400
15399: POP
// end ;
15400: LD_VAR 0 3
15404: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15405: LD_INT 0
15407: PPUSH
15408: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15409: LD_ADDR_VAR 0 2
15413: PUSH
15414: LD_VAR 0 1
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 289
15426: PUSH
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_INT 2
15434: PPUSH
15435: CALL_OW 289
15439: PUSH
15440: LD_VAR 0 1
15444: PPUSH
15445: LD_INT 3
15447: PPUSH
15448: CALL_OW 289
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: LIST
15457: ST_TO_ADDR
// end ;
15458: LD_VAR 0 2
15462: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15463: LD_INT 0
15465: PPUSH
15466: PPUSH
// area = ListEnvironmentArea ( area ) ;
15467: LD_ADDR_VAR 0 2
15471: PUSH
15472: LD_VAR 0 2
15476: PPUSH
15477: CALL_OW 353
15481: ST_TO_ADDR
// if bulldozer > 0 then
15482: LD_VAR 0 1
15486: PUSH
15487: LD_INT 0
15489: GREATER
15490: IFFALSE 15601
// for i = area downto 1 do
15492: LD_ADDR_VAR 0 4
15496: PUSH
15497: DOUBLE
15498: LD_VAR 0 2
15502: INC
15503: ST_TO_ADDR
15504: LD_INT 1
15506: PUSH
15507: FOR_DOWNTO
15508: IFFALSE 15599
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15510: LD_VAR 0 2
15514: PUSH
15515: LD_VAR 0 4
15519: ARRAY
15520: PUSH
15521: LD_INT 1
15523: ARRAY
15524: PPUSH
15525: LD_VAR 0 2
15529: PUSH
15530: LD_VAR 0 4
15534: ARRAY
15535: PUSH
15536: LD_INT 2
15538: ARRAY
15539: PPUSH
15540: CALL_OW 351
15544: IFFALSE 15597
// if not HasTask ( bulldozer ) then
15546: LD_VAR 0 1
15550: PPUSH
15551: CALL_OW 314
15555: NOT
15556: IFFALSE 15597
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15558: LD_VAR 0 1
15562: PPUSH
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 171
15597: GO 15507
15599: POP
15600: POP
// end ;
15601: LD_VAR 0 3
15605: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15606: LD_INT 0
15608: PPUSH
15609: PPUSH
15610: PPUSH
// uc_side := GetSide ( b ) ;
15611: LD_ADDR_OWVAR 20
15615: PUSH
15616: LD_VAR 0 2
15620: PPUSH
15621: CALL_OW 255
15625: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15626: LD_ADDR_OWVAR 21
15630: PUSH
15631: LD_VAR 0 2
15635: PPUSH
15636: CALL_OW 248
15640: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15641: LD_INT 0
15643: PPUSH
15644: LD_INT 1
15646: PPUSH
15647: LD_VAR 0 1
15651: PPUSH
15652: CALL_OW 380
// un = CreateHuman ;
15656: LD_ADDR_VAR 0 4
15660: PUSH
15661: CALL_OW 44
15665: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15666: LD_ADDR_VAR 0 5
15670: PUSH
15671: LD_VAR 0 2
15675: PPUSH
15676: CALL_OW 254
15680: PUSH
15681: LD_INT 3
15683: MINUS
15684: ST_TO_ADDR
// if dir < 0 then
15685: LD_VAR 0 5
15689: PUSH
15690: LD_INT 0
15692: LESS
15693: IFFALSE 15709
// dir := 6 + dir ;
15695: LD_ADDR_VAR 0 5
15699: PUSH
15700: LD_INT 6
15702: PUSH
15703: LD_VAR 0 5
15707: PLUS
15708: ST_TO_ADDR
// SetDir ( un , dir ) ;
15709: LD_VAR 0 4
15713: PPUSH
15714: LD_VAR 0 5
15718: PPUSH
15719: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15723: LD_VAR 0 4
15727: PPUSH
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 52
// result = un ;
15737: LD_ADDR_VAR 0 3
15741: PUSH
15742: LD_VAR 0 4
15746: ST_TO_ADDR
// end ; end_of_file
15747: LD_VAR 0 3
15751: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15752: LD_VAR 0 2
15756: PUSH
15757: LD_INT 53
15759: EQUAL
15760: PUSH
15761: LD_VAR 0 4
15765: PUSH
15766: LD_EXP 55
15770: EQUAL
15771: AND
15772: IFFALSE 15782
// xavierJoinToPlayer = true ;
15774: LD_ADDR_EXP 10
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 6
15789: EQUAL
15790: PUSH
15791: LD_VAR 0 4
15795: PPUSH
15796: CALL_OW 255
15800: PUSH
15801: LD_INT 3
15803: EQUAL
15804: AND
15805: IFFALSE 15851
// begin ComExitVehicle ( human ) ;
15807: LD_VAR 0 4
15811: PPUSH
15812: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15816: LD_VAR 0 2
15820: PUSH
15821: LD_VAR 0 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PPUSH
15830: LD_INT 6
15832: PPUSH
15833: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15837: LD_EXP 51
15841: PPUSH
15842: LD_VAR 0 1
15846: PPUSH
15847: CALL_OW 120
// end ; end ;
15851: PPOPN 4
15853: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15854: LD_VAR 0 1
15858: PUSH
15859: LD_INT 3
15861: EQUAL
15862: PUSH
15863: LD_VAR 0 2
15867: PUSH
15868: LD_INT 5
15870: EQUAL
15871: AND
15872: IFFALSE 15922
// begin xavierPatrol = false ;
15874: LD_ADDR_EXP 7
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15882: LD_INT 5
15884: PPUSH
15885: LD_INT 5
15887: PPUSH
15888: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15892: LD_INT 3
15894: PPUSH
15895: LD_INT 5
15897: PPUSH
15898: LD_INT 2
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15908: LD_EXP 55
15912: PPUSH
15913: LD_EXP 37
15917: PPUSH
15918: CALL_OW 115
// end ; end ;
15922: PPOPN 2
15924: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15925: LD_INT 0
15927: PPUSH
15928: PPUSH
// begin if unit = Burlak then
15929: LD_VAR 0 1
15933: PUSH
15934: LD_EXP 37
15938: EQUAL
15939: IFFALSE 15945
// Lose_Burlak ;
15941: CALL 17213 0 0
// if unit = Vsevolod then
15945: LD_VAR 0 1
15949: PUSH
15950: LD_EXP 48
15954: EQUAL
15955: IFFALSE 15961
// Lose_Vsevolod ;
15957: CALL 17228 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
15961: LD_ADDR_VAR 0 2
15965: PUSH
15966: LD_VAR 0 1
15970: PPUSH
15971: CALL_OW 255
15975: PPUSH
15976: CALL 19319 0 1
15980: ST_TO_ADDR
// if aiData then
15981: LD_VAR 0 2
15985: IFFALSE 16194
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
15987: LD_VAR 0 1
15991: PPUSH
15992: CALL_OW 250
15996: PPUSH
15997: LD_VAR 0 1
16001: PPUSH
16002: CALL_OW 251
16006: PPUSH
16007: LD_VAR 0 2
16011: PUSH
16012: LD_INT 8
16014: ARRAY
16015: PPUSH
16016: CALL_OW 309
16020: NOT
16021: IFFALSE 16025
// exit ;
16023: GO 16194
// RemoveUnitFromAI ( aiData , unit ) ;
16025: LD_VAR 0 2
16029: PPUSH
16030: LD_VAR 0 1
16034: PPUSH
16035: CALL 19228 0 2
// if GetType ( unit ) = unit_building then
16039: LD_VAR 0 1
16043: PPUSH
16044: CALL_OW 247
16048: PUSH
16049: LD_INT 3
16051: EQUAL
16052: IFFALSE 16194
// begin if GetBType ( unit ) = 1 then
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 266
16063: PUSH
16064: LD_INT 1
16066: EQUAL
16067: IFFALSE 16079
// buildingType = 0 else
16069: LD_ADDR_VAR 0 3
16073: PUSH
16074: LD_INT 0
16076: ST_TO_ADDR
16077: GO 16144
// if GetBType ( unit ) = 3 then
16079: LD_VAR 0 1
16083: PPUSH
16084: CALL_OW 266
16088: PUSH
16089: LD_INT 3
16091: EQUAL
16092: IFFALSE 16104
// buildingType = 2 else
16094: LD_ADDR_VAR 0 3
16098: PUSH
16099: LD_INT 2
16101: ST_TO_ADDR
16102: GO 16144
// if GetBType ( unit ) = 5 then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 266
16113: PUSH
16114: LD_INT 5
16116: EQUAL
16117: IFFALSE 16129
// buildingType = 4 else
16119: LD_ADDR_VAR 0 3
16123: PUSH
16124: LD_INT 4
16126: ST_TO_ADDR
16127: GO 16144
// buildingType = GetBType ( unit ) ;
16129: LD_ADDR_VAR 0 3
16133: PUSH
16134: LD_VAR 0 1
16138: PPUSH
16139: CALL_OW 266
16143: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16144: LD_VAR 0 2
16148: PPUSH
16149: LD_VAR 0 3
16153: PUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 250
16163: PUSH
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 251
16173: PUSH
16174: LD_VAR 0 1
16178: PPUSH
16179: CALL_OW 254
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL 19041 0 2
// end ; end ; end ;
16194: PPOPN 3
16196: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16197: LD_INT 0
16199: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 255
16214: PPUSH
16215: CALL 19319 0 1
16219: ST_TO_ADDR
// if aiData then
16220: LD_VAR 0 3
16224: IFFALSE 16463
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16226: LD_VAR 0 1
16230: PPUSH
16231: CALL_OW 264
16235: PUSH
16236: LD_INT 12
16238: PUSH
16239: LD_INT 32
16241: PUSH
16242: LD_INT 51
16244: PUSH
16245: LD_INT 13
16247: PUSH
16248: LD_EXP 124
16252: PUSH
16253: LD_INT 52
16255: PUSH
16256: LD_INT 14
16258: PUSH
16259: LD_INT 53
16261: PUSH
16262: LD_INT 31
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: IN
16276: NOT
16277: IFFALSE 16336
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16279: LD_VAR 0 3
16283: PUSH
16284: LD_INT 13
16286: ARRAY
16287: PUSH
16288: LD_VAR 0 3
16292: PPUSH
16293: CALL 19399 0 1
16297: GREATER
16298: IFFALSE 16319
// AddNewVehicle ( aiData , vehicle , 2 ) else
16300: LD_VAR 0 3
16304: PPUSH
16305: LD_VAR 0 1
16309: PPUSH
16310: LD_INT 2
16312: PPUSH
16313: CALL 18936 0 3
16317: GO 16336
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16319: LD_VAR 0 3
16323: PPUSH
16324: LD_VAR 0 1
16328: PPUSH
16329: LD_INT 4
16331: PPUSH
16332: CALL 18936 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16336: LD_VAR 0 1
16340: PPUSH
16341: CALL_OW 264
16345: PUSH
16346: LD_INT 12
16348: PUSH
16349: LD_INT 32
16351: PUSH
16352: LD_INT 51
16354: PUSH
16355: LD_INT 13
16357: PUSH
16358: LD_EXP 124
16362: PUSH
16363: LD_INT 52
16365: PUSH
16366: LD_INT 14
16368: PUSH
16369: LD_INT 53
16371: PUSH
16372: LD_INT 31
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: IN
16386: IFFALSE 16405
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16388: LD_VAR 0 3
16392: PPUSH
16393: LD_VAR 0 1
16397: PPUSH
16398: LD_INT 1
16400: PPUSH
16401: CALL 18936 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16405: LD_EXP 60
16409: PUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 263
16419: PUSH
16420: LD_INT 2
16422: EQUAL
16423: AND
16424: IFFALSE 16463
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_EXP 60
16435: PUSH
16436: LD_INT 1
16438: PPUSH
16439: LD_EXP 60
16443: PPUSH
16444: CALL_OW 12
16448: ARRAY
16449: PPUSH
16450: CALL_OW 313
16454: PUSH
16455: LD_INT 1
16457: ARRAY
16458: PPUSH
16459: CALL_OW 53
// end ; end ;
16463: PPOPN 3
16465: END
// on BuildingStarted ( building , unit ) do var aiData ;
16466: LD_INT 0
16468: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16469: LD_ADDR_VAR 0 3
16473: PUSH
16474: LD_VAR 0 2
16478: PPUSH
16479: CALL_OW 255
16483: PPUSH
16484: CALL 19319 0 1
16488: ST_TO_ADDR
// if ( aiData ) then
16489: LD_VAR 0 3
16493: IFFALSE 16518
// begin RemoveDestroyedBuilding ( aiData ) ;
16495: LD_VAR 0 3
16499: PPUSH
16500: CALL 19135 0 1
// AddNewUnit ( aiData , building ) ;
16504: LD_VAR 0 3
16508: PPUSH
16509: LD_VAR 0 1
16513: PPUSH
16514: CALL 18845 0 2
// end ; end ;
16518: PPOPN 3
16520: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16521: LD_VAR 0 2
16525: PUSH
16526: LD_EXP 51
16530: EQUAL
16531: IFFALSE 16545
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16533: LD_VAR 0 1
16537: PPUSH
16538: LD_INT 19
16540: PPUSH
16541: CALL_OW 113
// end ; end_of_file
16545: PPOPN 2
16547: END
// export function FinishMission ; begin
16548: LD_INT 0
16550: PPUSH
// SetRewards ;
16551: CALL 16572 0 0
// SavePlayerCharacters ;
16555: CALL 16751 0 0
// SaveGlobalVariables ;
16559: CALL 17193 0 0
// YouWin ;
16563: CALL_OW 103
// end ;
16567: LD_VAR 0 1
16571: RET
// function SetRewards ; begin
16572: LD_INT 0
16574: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16575: LD_EXP 55
16579: PPUSH
16580: CALL_OW 302
16584: PUSH
16585: LD_EXP 55
16589: PPUSH
16590: CALL_OW 255
16594: PUSH
16595: LD_INT 3
16597: EQUAL
16598: AND
16599: IFFALSE 16613
// AddMedal ( Xavier , 1 ) else
16601: LD_STRING Xavier
16603: PPUSH
16604: LD_INT 1
16606: PPUSH
16607: CALL_OW 101
16611: GO 16624
// AddMedal ( Xavier , - 1 ) ;
16613: LD_STRING Xavier
16615: PPUSH
16616: LD_INT 1
16618: NEG
16619: PPUSH
16620: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16624: LD_EXP 19
16628: PUSH
16629: LD_EXP 28
16633: LESSEQUAL
16634: IFFALSE 16648
// AddMedal ( TimeVS , 1 ) else
16636: LD_STRING TimeVS
16638: PPUSH
16639: LD_INT 1
16641: PPUSH
16642: CALL_OW 101
16646: GO 16659
// AddMedal ( TimeVS , - 1 ) ;
16648: LD_STRING TimeVS
16650: PPUSH
16651: LD_INT 1
16653: NEG
16654: PPUSH
16655: CALL_OW 101
// if heikeCaptured then
16659: LD_EXP 17
16663: IFFALSE 16677
// AddMedal ( Heike , 1 ) else
16665: LD_STRING Heike
16667: PPUSH
16668: LD_INT 1
16670: PPUSH
16671: CALL_OW 101
16675: GO 16688
// AddMedal ( Heike , - 1 ) ;
16677: LD_STRING Heike
16679: PPUSH
16680: LD_INT 1
16682: NEG
16683: PPUSH
16684: CALL_OW 101
// GiveMedals ( Main1 ) ;
16688: LD_STRING Main1
16690: PPUSH
16691: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16695: LD_INT 22
16697: PUSH
16698: LD_INT 3
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PUSH
16705: LD_INT 21
16707: PUSH
16708: LD_INT 1
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PUSH
16715: LD_INT 23
16717: PUSH
16718: LD_INT 3
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: PUSH
16725: LD_INT 50
16727: PUSH
16728: EMPTY
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: PPUSH
16737: CALL_OW 69
16741: PPUSH
16742: CALL_OW 43
// end ;
16746: LD_VAR 0 1
16750: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16751: LD_INT 0
16753: PPUSH
16754: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16755: LD_EXP 37
16759: PPUSH
16760: LD_STRING Burlak
16762: PPUSH
16763: LD_INT 3
16765: PPUSH
16766: CALL 12240 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16770: LD_EXP 38
16774: PPUSH
16775: LD_STRING Karamazov
16777: PPUSH
16778: LD_INT 3
16780: PPUSH
16781: CALL 12240 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16785: LD_EXP 39
16789: PPUSH
16790: LD_STRING Petrovova
16792: PPUSH
16793: LD_INT 3
16795: PPUSH
16796: CALL 12240 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16800: LD_EXP 40
16804: PPUSH
16805: LD_STRING Gleb
16807: PPUSH
16808: LD_INT 3
16810: PPUSH
16811: CALL 12240 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16815: LD_EXP 41
16819: PPUSH
16820: LD_STRING Petrosyan
16822: PPUSH
16823: LD_INT 3
16825: PPUSH
16826: CALL 12240 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16830: LD_EXP 43
16834: PPUSH
16835: LD_STRING Dolgov
16837: PPUSH
16838: LD_INT 3
16840: PPUSH
16841: CALL 12240 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16845: LD_EXP 44
16849: PPUSH
16850: LD_STRING Lipshchin
16852: PPUSH
16853: LD_INT 3
16855: PPUSH
16856: CALL 12240 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16860: LD_EXP 42
16864: PPUSH
16865: LD_STRING Titov
16867: PPUSH
16868: LD_INT 3
16870: PPUSH
16871: CALL 12240 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16875: LD_EXP 45
16879: PPUSH
16880: LD_STRING Kirilenkova
16882: PPUSH
16883: LD_INT 3
16885: PPUSH
16886: CALL 12240 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16890: LD_EXP 46
16894: PPUSH
16895: LD_STRING Belkov
16897: PPUSH
16898: LD_INT 3
16900: PPUSH
16901: CALL 12240 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16905: LD_EXP 47
16909: PPUSH
16910: LD_STRING Belkov2
16912: PPUSH
16913: LD_INT 3
16915: PPUSH
16916: CALL 12240 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16920: LD_EXP 55
16924: PPUSH
16925: LD_STRING Xavier
16927: PPUSH
16928: LD_INT 3
16930: PPUSH
16931: CALL 12240 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16935: LD_EXP 48
16939: PPUSH
16940: LD_STRING Vsevolod
16942: PPUSH
16943: LD_INT 3
16945: PPUSH
16946: CALL 12240 0 3
// if heikeCaptured then
16950: LD_EXP 17
16954: IFFALSE 16968
// SaveCharacters ( Heike , 07_Heike ) ;
16956: LD_EXP 56
16960: PPUSH
16961: LD_STRING 07_Heike
16963: PPUSH
16964: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
16968: LD_INT 22
16970: PUSH
16971: LD_INT 3
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: LD_INT 21
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: LD_INT 25
16993: PUSH
16994: LD_INT 12
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 25
17003: PUSH
17004: LD_INT 16
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 25
17013: PUSH
17014: LD_INT 15
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: PPUSH
17037: LD_STRING other_apemans
17039: PPUSH
17040: LD_INT 3
17042: PPUSH
17043: CALL 12297 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_INT 3
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 21
17064: PUSH
17065: LD_INT 1
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 23
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: PPUSH
17087: CALL_OW 69
17091: PUSH
17092: LD_EXP 37
17096: PUSH
17097: LD_EXP 38
17101: PUSH
17102: LD_EXP 39
17106: PUSH
17107: LD_EXP 40
17111: PUSH
17112: LD_EXP 41
17116: PUSH
17117: LD_EXP 42
17121: PUSH
17122: LD_EXP 43
17126: PUSH
17127: LD_EXP 44
17131: PUSH
17132: LD_EXP 45
17136: PUSH
17137: LD_EXP 46
17141: PUSH
17142: LD_EXP 47
17146: PUSH
17147: LD_EXP 55
17151: PUSH
17152: LD_EXP 48
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: DIFF
17172: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17173: LD_VAR 0 2
17177: PPUSH
17178: LD_STRING other_survivors
17180: PPUSH
17181: LD_INT 3
17183: PPUSH
17184: CALL 12297 0 3
// end ;
17188: LD_VAR 0 1
17192: RET
// function SaveGlobalVariables ; begin
17193: LD_INT 0
17195: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17196: LD_EXP 17
17200: PPUSH
17201: LD_STRING 07_HeikeCaptured_1
17203: PPUSH
17204: CALL_OW 39
// end ; end_of_file
17208: LD_VAR 0 1
17212: RET
// export function Lose_Burlak ; begin
17213: LD_INT 0
17215: PPUSH
// YouLost ( Burlak ) ;
17216: LD_STRING Burlak
17218: PPUSH
17219: CALL_OW 104
// end ;
17223: LD_VAR 0 1
17227: RET
// export function Lose_Vsevolod ; begin
17228: LD_INT 0
17230: PPUSH
// YouLost ( Sevi ) ;
17231: LD_STRING Sevi
17233: PPUSH
17234: CALL_OW 104
// end ;
17238: LD_VAR 0 1
17242: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17243: LD_EXP 56
17247: PPUSH
17248: LD_INT 9
17250: PPUSH
17251: CALL_OW 308
17255: PUSH
17256: LD_EXP 57
17260: PPUSH
17261: LD_INT 9
17263: PPUSH
17264: CALL_OW 308
17268: OR
17269: IFFALSE 17281
17271: GO 17273
17273: DISABLE
// YouLost ( Heike ) ; end_of_file
17274: LD_STRING Heike
17276: PPUSH
17277: CALL_OW 104
17281: END
// export aiStructDatas ; export function InitAIManager ; begin
17282: LD_INT 0
17284: PPUSH
// aiStructDatas = [ ] ;
17285: LD_ADDR_EXP 62
17289: PUSH
17290: EMPTY
17291: ST_TO_ADDR
// end ;
17292: LD_VAR 0 1
17296: RET
// every 1 do
17297: GO 17299
17299: DISABLE
// begin InitAIManager ;
17300: CALL 17282 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17304: LD_INT 1
17306: PPUSH
17307: LD_INT 0
17309: PPUSH
17310: LD_INT 2
17312: PPUSH
17313: LD_INT 2
17315: PPUSH
17316: LD_EXP 59
17320: PPUSH
17321: LD_INT 10
17323: PPUSH
17324: LD_INT 22
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 21
17336: PUSH
17337: LD_INT 3
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PPUSH
17348: CALL_OW 70
17352: PPUSH
17353: EMPTY
17354: PPUSH
17355: LD_INT 10
17357: PPUSH
17358: LD_INT 12
17360: PPUSH
17361: LD_INT 13
17363: PPUSH
17364: LD_INT 11
17366: PPUSH
17367: LD_INT 13
17369: PPUSH
17370: LD_INT 13
17372: PUSH
17373: LD_INT 1
17375: PUSH
17376: LD_INT 2
17378: PUSH
17379: LD_INT 25
17381: PUSH
17382: LD_INT 27
17384: PUSH
17385: LD_INT 23
17387: PUSH
17388: LD_INT 26
17390: PUSH
17391: LD_INT 28
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 13
17409: PUSH
17410: LD_INT 1
17412: PUSH
17413: LD_INT 2
17415: PUSH
17416: LD_INT 25
17418: PUSH
17419: LD_INT 27
17421: PUSH
17422: LD_INT 23
17424: PUSH
17425: LD_INT 26
17427: PUSH
17428: LD_INT 28
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PPUSH
17448: LD_INT 13
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: LD_INT 2
17456: PUSH
17457: LD_INT 25
17459: PUSH
17460: LD_INT 27
17462: PUSH
17463: LD_INT 23
17465: PUSH
17466: LD_INT 26
17468: PUSH
17469: LD_INT 28
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: PUSH
17485: LD_INT 13
17487: PUSH
17488: LD_INT 1
17490: PUSH
17491: LD_INT 2
17493: PUSH
17494: LD_INT 25
17496: PUSH
17497: LD_INT 27
17499: PUSH
17500: LD_INT 23
17502: PUSH
17503: LD_INT 26
17505: PUSH
17506: LD_INT 28
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 13
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 25
17533: PUSH
17534: LD_INT 27
17536: PUSH
17537: LD_INT 23
17539: PUSH
17540: LD_INT 26
17542: PUSH
17543: LD_INT 28
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: LIST
17563: PPUSH
17564: LD_INT 1
17566: PUSH
17567: LD_INT 1
17569: PUSH
17570: LD_INT 0
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: LD_INT 5250
17580: PPUSH
17581: LD_INT 1
17583: PUSH
17584: LD_INT 1
17586: PUSH
17587: LD_INT 1
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: LD_INT 1
17603: PPUSH
17604: CALL 18471 0 20
// end ;
17608: END
// every 0 0$1 do
17609: GO 17611
17611: DISABLE
// begin StateManager ( 1 ) ;
17612: LD_INT 1
17614: PPUSH
17615: CALL 19619 0 1
// MechanicsManager ( 1 ) ;
17619: LD_INT 1
17621: PPUSH
17622: CALL 20732 0 1
// VehiclesManager ( 1 ) ;
17626: LD_INT 1
17628: PPUSH
17629: CALL 20996 0 1
// SoldiersManager ( 1 ) ;
17633: LD_INT 1
17635: PPUSH
17636: CALL 20105 0 1
// DefenceManager ( 1 ) ;
17640: LD_INT 1
17642: PPUSH
17643: CALL 21506 0 1
// CollectCrates ( 1 ) ;
17647: LD_INT 1
17649: PPUSH
17650: CALL 22438 0 1
// FleeToHealArea ( 1 ) ;
17654: LD_INT 1
17656: PPUSH
17657: CALL 22628 0 1
// FleeToRepairArea ( 1 ) ;
17661: LD_INT 1
17663: PPUSH
17664: CALL 22759 0 1
// RepairBuildings ( 1 ) ;
17668: LD_INT 1
17670: PPUSH
17671: CALL 22915 0 1
// HealDamageUnits ( 1 ) ;
17675: LD_INT 1
17677: PPUSH
17678: CALL 23660 0 1
// enable ;
17682: ENABLE
// end ;
17683: END
// every 0 0$1 do
17684: GO 17686
17686: DISABLE
// begin ProduceVehicles ( 1 ) ;
17687: LD_INT 1
17689: PPUSH
17690: CALL 24158 0 1
// enable ;
17694: ENABLE
// end ;
17695: END
// every 0 0$1 do
17696: GO 17698
17698: DISABLE
// begin AttackManager ( 1 ) ;
17699: LD_INT 1
17701: PPUSH
17702: CALL 22004 0 1
// enable ;
17706: ENABLE
// end ;
17707: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17708: LD_INT 14
17710: PPUSH
17711: LD_INT 22
17713: PUSH
17714: LD_INT 3
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 70
17725: PUSH
17726: LD_INT 15
17728: PPUSH
17729: LD_INT 22
17731: PUSH
17732: LD_INT 3
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PPUSH
17739: CALL_OW 70
17743: OR
17744: PUSH
17745: LD_INT 16
17747: PPUSH
17748: LD_INT 22
17750: PUSH
17751: LD_INT 3
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 70
17762: OR
17763: PUSH
17764: LD_INT 17
17766: PPUSH
17767: LD_INT 22
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PPUSH
17777: CALL_OW 70
17781: OR
17782: PUSH
17783: LD_INT 18
17785: PPUSH
17786: LD_INT 22
17788: PUSH
17789: LD_INT 3
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PPUSH
17796: CALL_OW 70
17800: OR
17801: PUSH
17802: LD_EXP 61
17806: AND
17807: IFFALSE 18227
17809: GO 17811
17811: DISABLE
17812: LD_INT 0
17814: PPUSH
17815: PPUSH
17816: PPUSH
17817: PPUSH
17818: PPUSH
// begin unitsInArea = [ ] ;
17819: LD_ADDR_VAR 0 2
17823: PUSH
17824: EMPTY
17825: ST_TO_ADDR
// tmp = [ ] ;
17826: LD_ADDR_VAR 0 5
17830: PUSH
17831: EMPTY
17832: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17833: LD_ADDR_VAR 0 2
17837: PUSH
17838: LD_VAR 0 2
17842: PUSH
17843: LD_INT 14
17845: PPUSH
17846: LD_INT 22
17848: PUSH
17849: LD_INT 3
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PPUSH
17856: CALL_OW 70
17860: ADD
17861: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17862: LD_ADDR_VAR 0 2
17866: PUSH
17867: LD_VAR 0 2
17871: PUSH
17872: LD_INT 15
17874: PPUSH
17875: LD_INT 22
17877: PUSH
17878: LD_INT 3
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 70
17889: ADD
17890: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17891: LD_ADDR_VAR 0 2
17895: PUSH
17896: LD_VAR 0 2
17900: PUSH
17901: LD_INT 16
17903: PPUSH
17904: LD_INT 22
17906: PUSH
17907: LD_INT 3
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PPUSH
17914: CALL_OW 70
17918: ADD
17919: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17920: LD_ADDR_VAR 0 2
17924: PUSH
17925: LD_VAR 0 2
17929: PUSH
17930: LD_INT 17
17932: PPUSH
17933: LD_INT 22
17935: PUSH
17936: LD_INT 3
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PPUSH
17943: CALL_OW 70
17947: ADD
17948: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
17949: LD_ADDR_VAR 0 2
17953: PUSH
17954: LD_VAR 0 2
17958: PUSH
17959: LD_INT 18
17961: PPUSH
17962: LD_INT 22
17964: PUSH
17965: LD_INT 3
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 70
17976: ADD
17977: ST_TO_ADDR
// for unit in unitsInArea do
17978: LD_ADDR_VAR 0 3
17982: PUSH
17983: LD_VAR 0 2
17987: PUSH
17988: FOR_IN
17989: IFFALSE 18224
// begin if GetType ( unit ) = unit_human then
17991: LD_VAR 0 3
17995: PPUSH
17996: CALL_OW 247
18000: PUSH
18001: LD_INT 1
18003: EQUAL
18004: IFFALSE 18016
// minDistance = 3 else
18006: LD_ADDR_VAR 0 4
18010: PUSH
18011: LD_INT 3
18013: ST_TO_ADDR
18014: GO 18024
// minDistance = 4 ;
18016: LD_ADDR_VAR 0 4
18020: PUSH
18021: LD_INT 4
18023: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18024: LD_ADDR_VAR 0 1
18028: PUSH
18029: DOUBLE
18030: LD_INT 1
18032: DEC
18033: ST_TO_ADDR
18034: LD_EXP 61
18038: PUSH
18039: LD_INT 2
18041: DIV
18042: PUSH
18043: FOR_TO
18044: IFFALSE 18203
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18046: LD_EXP 61
18050: PUSH
18051: LD_VAR 0 1
18055: PUSH
18056: LD_INT 2
18058: MUL
18059: PUSH
18060: LD_INT 1
18062: MINUS
18063: ARRAY
18064: PPUSH
18065: LD_EXP 61
18069: PUSH
18070: LD_VAR 0 1
18074: PUSH
18075: LD_INT 2
18077: MUL
18078: ARRAY
18079: PPUSH
18080: LD_VAR 0 3
18084: PPUSH
18085: CALL_OW 250
18089: PPUSH
18090: LD_VAR 0 3
18094: PPUSH
18095: CALL_OW 251
18099: PPUSH
18100: CALL_OW 298
18104: PUSH
18105: LD_VAR 0 4
18109: LESS
18110: IFFALSE 18155
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18112: LD_EXP 61
18116: PUSH
18117: LD_VAR 0 1
18121: PUSH
18122: LD_INT 2
18124: MUL
18125: PUSH
18126: LD_INT 1
18128: MINUS
18129: ARRAY
18130: PPUSH
18131: LD_EXP 61
18135: PUSH
18136: LD_VAR 0 1
18140: PUSH
18141: LD_INT 2
18143: MUL
18144: ARRAY
18145: PPUSH
18146: LD_INT 2
18148: PPUSH
18149: CALL_OW 456
18153: GO 18201
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18155: LD_ADDR_VAR 0 5
18159: PUSH
18160: LD_VAR 0 5
18164: PUSH
18165: LD_EXP 61
18169: PUSH
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 2
18177: MUL
18178: PUSH
18179: LD_INT 1
18181: MINUS
18182: ARRAY
18183: ADD
18184: PUSH
18185: LD_EXP 61
18189: PUSH
18190: LD_VAR 0 1
18194: PUSH
18195: LD_INT 2
18197: MUL
18198: ARRAY
18199: ADD
18200: ST_TO_ADDR
18201: GO 18043
18203: POP
18204: POP
// minesList = tmp ;
18205: LD_ADDR_EXP 61
18209: PUSH
18210: LD_VAR 0 5
18214: ST_TO_ADDR
// tmp := [ ] ;
18215: LD_ADDR_VAR 0 5
18219: PUSH
18220: EMPTY
18221: ST_TO_ADDR
// end ;
18222: GO 17988
18224: POP
18225: POP
// enable ;
18226: ENABLE
// end ;
18227: PPOPN 5
18229: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18230: LD_INT 2
18232: PPUSH
18233: CALL_OW 255
18237: PUSH
18238: LD_INT 3
18240: EQUAL
18241: PUSH
18242: LD_INT 2
18244: PPUSH
18245: CALL_OW 303
18249: OR
18250: IFFALSE 18379
18252: GO 18254
18254: DISABLE
18255: LD_INT 0
18257: PPUSH
18258: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18259: LD_ADDR_VAR 0 2
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_INT 2
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 50
18276: PUSH
18277: EMPTY
18278: LIST
18279: PUSH
18280: LD_INT 21
18282: PUSH
18283: LD_INT 3
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 30
18292: PUSH
18293: LD_INT 32
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: PPUSH
18306: CALL_OW 69
18310: PUSH
18311: FOR_IN
18312: IFFALSE 18377
// if UnitsInside ( turret ) then
18314: LD_VAR 0 2
18318: PPUSH
18319: CALL_OW 313
18323: IFFALSE 18375
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18325: LD_ADDR_VAR 0 1
18329: PUSH
18330: LD_VAR 0 2
18334: PPUSH
18335: CALL_OW 313
18339: PUSH
18340: LD_INT 1
18342: ARRAY
18343: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 122
// wait ( 0 0$01 ) ;
18353: LD_INT 35
18355: PPUSH
18356: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18360: LD_VAR 0 1
18364: PPUSH
18365: LD_INT 103
18367: PPUSH
18368: LD_INT 48
18370: PPUSH
18371: CALL_OW 114
// end ;
18375: GO 18311
18377: POP
18378: POP
// end ;
18379: PPOPN 2
18381: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18382: GO 18384
18384: DISABLE
18385: LD_INT 0
18387: PPUSH
18388: PPUSH
18389: PPUSH
18390: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18391: LD_ADDR_VAR 0 4
18395: PUSH
18396: LD_INT 2
18398: PPUSH
18399: LD_INT 2
18401: PPUSH
18402: LD_INT 1
18404: PPUSH
18405: CALL 41124 0 3
18409: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18410: LD_ADDR_VAR 0 1
18414: PUSH
18415: DOUBLE
18416: LD_INT 1
18418: DEC
18419: ST_TO_ADDR
18420: LD_VAR 0 4
18424: PUSH
18425: FOR_TO
18426: IFFALSE 18466
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18428: LD_INT 13
18430: PPUSH
18431: LD_VAR 0 4
18435: PUSH
18436: LD_VAR 0 1
18440: ARRAY
18441: PPUSH
18442: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18446: LD_INT 14
18448: PPUSH
18449: LD_VAR 0 4
18453: PUSH
18454: LD_VAR 0 1
18458: ARRAY
18459: PPUSH
18460: CALL_OW 184
// end ;
18464: GO 18425
18466: POP
18467: POP
// end ;
18468: PPOPN 4
18470: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18471: LD_INT 0
18473: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18474: LD_ADDR_EXP 62
18478: PUSH
18479: LD_EXP 62
18483: PUSH
18484: LD_VAR 0 1
18488: PUSH
18489: LD_VAR 0 2
18493: PUSH
18494: LD_VAR 0 3
18498: PUSH
18499: LD_VAR 0 4
18503: PUSH
18504: LD_VAR 0 5
18508: PUSH
18509: LD_VAR 0 6
18513: PUSH
18514: LD_VAR 0 7
18518: PUSH
18519: LD_VAR 0 8
18523: PUSH
18524: LD_VAR 0 9
18528: PUSH
18529: LD_VAR 0 10
18533: PUSH
18534: LD_VAR 0 11
18538: PUSH
18539: LD_VAR 0 12
18543: PUSH
18544: LD_VAR 0 13
18548: PUSH
18549: LD_VAR 0 14
18553: PUSH
18554: LD_VAR 0 15
18558: PUSH
18559: LD_VAR 0 16
18563: PUSH
18564: LD_VAR 0 17
18568: PUSH
18569: LD_VAR 0 18
18573: PUSH
18574: LD_VAR 0 19
18578: PUSH
18579: LD_VAR 0 20
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: PUSH
18606: EMPTY
18607: LIST
18608: ADD
18609: ST_TO_ADDR
// end ;
18610: LD_VAR 0 21
18614: RET
// export function ActiveAI ( index ) ; begin
18615: LD_INT 0
18617: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18618: LD_ADDR_EXP 62
18622: PUSH
18623: LD_EXP 62
18627: PPUSH
18628: LD_VAR 0 1
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL 46007 0 3
18647: ST_TO_ADDR
// end ;
18648: LD_VAR 0 2
18652: RET
// export function DeactiveAI ( index ) ; begin
18653: LD_INT 0
18655: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18656: LD_ADDR_EXP 62
18660: PUSH
18661: LD_EXP 62
18665: PPUSH
18666: LD_VAR 0 1
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: LD_INT 0
18680: PPUSH
18681: CALL 46007 0 3
18685: ST_TO_ADDR
// end ;
18686: LD_VAR 0 2
18690: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18691: LD_INT 0
18693: PPUSH
18694: PPUSH
// for i := 1 to aiStructDatas do
18695: LD_ADDR_VAR 0 3
18699: PUSH
18700: DOUBLE
18701: LD_INT 1
18703: DEC
18704: ST_TO_ADDR
18705: LD_EXP 62
18709: PUSH
18710: FOR_TO
18711: IFFALSE 18757
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18713: LD_EXP 62
18717: PUSH
18718: LD_VAR 0 3
18722: ARRAY
18723: PUSH
18724: LD_INT 1
18726: ARRAY
18727: PUSH
18728: LD_VAR 0 1
18732: EQUAL
18733: IFFALSE 18755
// begin result = aiStructDatas [ i ] ;
18735: LD_ADDR_VAR 0 2
18739: PUSH
18740: LD_EXP 62
18744: PUSH
18745: LD_VAR 0 3
18749: ARRAY
18750: ST_TO_ADDR
// exit ;
18751: POP
18752: POP
18753: GO 18766
// end ;
18755: GO 18710
18757: POP
18758: POP
// result = [ ] ;
18759: LD_ADDR_VAR 0 2
18763: PUSH
18764: EMPTY
18765: ST_TO_ADDR
// end ;
18766: LD_VAR 0 2
18770: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18771: LD_INT 0
18773: PPUSH
18774: PPUSH
// for i := 1 to aiStructDatas do
18775: LD_ADDR_VAR 0 3
18779: PUSH
18780: DOUBLE
18781: LD_INT 1
18783: DEC
18784: ST_TO_ADDR
18785: LD_EXP 62
18789: PUSH
18790: FOR_TO
18791: IFFALSE 18831
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18793: LD_EXP 62
18797: PUSH
18798: LD_VAR 0 3
18802: ARRAY
18803: PUSH
18804: LD_INT 1
18806: ARRAY
18807: PUSH
18808: LD_VAR 0 1
18812: EQUAL
18813: IFFALSE 18829
// begin result = i ;
18815: LD_ADDR_VAR 0 2
18819: PUSH
18820: LD_VAR 0 3
18824: ST_TO_ADDR
// exit ;
18825: POP
18826: POP
18827: GO 18840
// end ;
18829: GO 18790
18831: POP
18832: POP
// result = [ ] ;
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: EMPTY
18839: ST_TO_ADDR
// end ;
18840: LD_VAR 0 2
18844: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18845: LD_INT 0
18847: PPUSH
18848: PPUSH
18849: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18850: LD_ADDR_VAR 0 4
18854: PUSH
18855: LD_VAR 0 1
18859: PUSH
18860: LD_INT 1
18862: ARRAY
18863: PPUSH
18864: CALL 18771 0 1
18868: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18869: LD_ADDR_VAR 0 5
18873: PUSH
18874: LD_VAR 0 1
18878: PUSH
18879: LD_INT 5
18881: ARRAY
18882: ST_TO_ADDR
// newArray = newArray ^ unit ;
18883: LD_ADDR_VAR 0 5
18887: PUSH
18888: LD_VAR 0 5
18892: PUSH
18893: LD_VAR 0 2
18897: ADD
18898: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18899: LD_ADDR_EXP 62
18903: PUSH
18904: LD_EXP 62
18908: PPUSH
18909: LD_VAR 0 4
18913: PUSH
18914: LD_INT 5
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: LD_VAR 0 5
18925: PPUSH
18926: CALL 46007 0 3
18930: ST_TO_ADDR
// end ;
18931: LD_VAR 0 3
18935: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18936: LD_INT 0
18938: PPUSH
18939: PPUSH
18940: PPUSH
// SetTag ( veh , state ) ;
18941: LD_VAR 0 2
18945: PPUSH
18946: LD_VAR 0 3
18950: PPUSH
18951: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18955: LD_ADDR_VAR 0 5
18959: PUSH
18960: LD_VAR 0 1
18964: PUSH
18965: LD_INT 1
18967: ARRAY
18968: PPUSH
18969: CALL 18771 0 1
18973: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18974: LD_ADDR_VAR 0 6
18978: PUSH
18979: LD_VAR 0 1
18983: PUSH
18984: LD_INT 5
18986: ARRAY
18987: ST_TO_ADDR
// newArray = newArray ^ veh ;
18988: LD_ADDR_VAR 0 6
18992: PUSH
18993: LD_VAR 0 6
18997: PUSH
18998: LD_VAR 0 2
19002: ADD
19003: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19004: LD_ADDR_EXP 62
19008: PUSH
19009: LD_EXP 62
19013: PPUSH
19014: LD_VAR 0 5
19018: PUSH
19019: LD_INT 5
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: LD_VAR 0 6
19030: PPUSH
19031: CALL 46007 0 3
19035: ST_TO_ADDR
// end ;
19036: LD_VAR 0 4
19040: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19041: LD_INT 0
19043: PPUSH
19044: PPUSH
19045: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19046: LD_ADDR_VAR 0 4
19050: PUSH
19051: LD_VAR 0 1
19055: PUSH
19056: LD_INT 1
19058: ARRAY
19059: PPUSH
19060: CALL 18771 0 1
19064: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19065: LD_ADDR_VAR 0 5
19069: PUSH
19070: LD_VAR 0 1
19074: PUSH
19075: LD_INT 7
19077: ARRAY
19078: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19079: LD_ADDR_VAR 0 5
19083: PUSH
19084: LD_VAR 0 5
19088: PUSH
19089: LD_VAR 0 2
19093: PUSH
19094: EMPTY
19095: LIST
19096: ADD
19097: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19098: LD_ADDR_EXP 62
19102: PUSH
19103: LD_EXP 62
19107: PPUSH
19108: LD_VAR 0 4
19112: PUSH
19113: LD_INT 7
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PPUSH
19120: LD_VAR 0 5
19124: PPUSH
19125: CALL 46007 0 3
19129: ST_TO_ADDR
// end ;
19130: LD_VAR 0 3
19134: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19135: LD_INT 0
19137: PPUSH
19138: PPUSH
19139: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19140: LD_ADDR_VAR 0 3
19144: PUSH
19145: LD_VAR 0 1
19149: PUSH
19150: LD_INT 1
19152: ARRAY
19153: PPUSH
19154: CALL 18771 0 1
19158: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19159: LD_ADDR_VAR 0 4
19163: PUSH
19164: LD_VAR 0 1
19168: PUSH
19169: LD_INT 7
19171: ARRAY
19172: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19173: LD_ADDR_VAR 0 4
19177: PUSH
19178: LD_VAR 0 4
19182: PPUSH
19183: LD_INT 1
19185: PPUSH
19186: CALL_OW 3
19190: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19191: LD_ADDR_EXP 62
19195: PUSH
19196: LD_EXP 62
19200: PPUSH
19201: LD_VAR 0 3
19205: PUSH
19206: LD_INT 7
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: LD_VAR 0 4
19217: PPUSH
19218: CALL 46007 0 3
19222: ST_TO_ADDR
// end ;
19223: LD_VAR 0 2
19227: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19228: LD_INT 0
19230: PPUSH
19231: PPUSH
19232: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19233: LD_ADDR_VAR 0 4
19237: PUSH
19238: LD_VAR 0 1
19242: PUSH
19243: LD_INT 1
19245: ARRAY
19246: PPUSH
19247: CALL 18771 0 1
19251: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19252: LD_ADDR_VAR 0 5
19256: PUSH
19257: LD_VAR 0 1
19261: PUSH
19262: LD_INT 5
19264: ARRAY
19265: ST_TO_ADDR
// newArray = newArray diff unit ;
19266: LD_ADDR_VAR 0 5
19270: PUSH
19271: LD_VAR 0 5
19275: PUSH
19276: LD_VAR 0 2
19280: DIFF
19281: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19282: LD_ADDR_EXP 62
19286: PUSH
19287: LD_EXP 62
19291: PPUSH
19292: LD_VAR 0 4
19296: PUSH
19297: LD_INT 5
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PPUSH
19304: LD_VAR 0 5
19308: PPUSH
19309: CALL 46007 0 3
19313: ST_TO_ADDR
// end ;
19314: LD_VAR 0 3
19318: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19319: LD_INT 0
19321: PPUSH
19322: PPUSH
// for i := 1 to aiStructDatas do
19323: LD_ADDR_VAR 0 3
19327: PUSH
19328: DOUBLE
19329: LD_INT 1
19331: DEC
19332: ST_TO_ADDR
19333: LD_EXP 62
19337: PUSH
19338: FOR_TO
19339: IFFALSE 19385
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19341: LD_EXP 62
19345: PUSH
19346: LD_VAR 0 3
19350: ARRAY
19351: PUSH
19352: LD_INT 3
19354: ARRAY
19355: PUSH
19356: LD_VAR 0 1
19360: EQUAL
19361: IFFALSE 19383
// begin result = aiStructDatas [ i ] ;
19363: LD_ADDR_VAR 0 2
19367: PUSH
19368: LD_EXP 62
19372: PUSH
19373: LD_VAR 0 3
19377: ARRAY
19378: ST_TO_ADDR
// exit ;
19379: POP
19380: POP
19381: GO 19394
// end ;
19383: GO 19338
19385: POP
19386: POP
// result = [ ] ;
19387: LD_ADDR_VAR 0 2
19391: PUSH
19392: EMPTY
19393: ST_TO_ADDR
// end ;
19394: LD_VAR 0 2
19398: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19399: LD_INT 0
19401: PPUSH
19402: PPUSH
19403: PPUSH
// if not aiData then
19404: LD_VAR 0 1
19408: NOT
19409: IFFALSE 19420
// begin result = [ ] ;
19411: LD_ADDR_VAR 0 2
19415: PUSH
19416: EMPTY
19417: ST_TO_ADDR
// exit ;
19418: GO 19504
// end ; defVehs = [ ] ;
19420: LD_ADDR_VAR 0 3
19424: PUSH
19425: EMPTY
19426: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19427: LD_ADDR_VAR 0 4
19431: PUSH
19432: LD_VAR 0 1
19436: PUSH
19437: LD_INT 5
19439: ARRAY
19440: PPUSH
19441: LD_INT 21
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PPUSH
19451: CALL_OW 72
19455: PUSH
19456: FOR_IN
19457: IFFALSE 19492
// if GetTag ( veh ) = 2 then
19459: LD_VAR 0 4
19463: PPUSH
19464: CALL_OW 110
19468: PUSH
19469: LD_INT 2
19471: EQUAL
19472: IFFALSE 19490
// defVehs = defVehs ^ veh ;
19474: LD_ADDR_VAR 0 3
19478: PUSH
19479: LD_VAR 0 3
19483: PUSH
19484: LD_VAR 0 4
19488: ADD
19489: ST_TO_ADDR
19490: GO 19456
19492: POP
19493: POP
// result = defVehs ;
19494: LD_ADDR_VAR 0 2
19498: PUSH
19499: LD_VAR 0 3
19503: ST_TO_ADDR
// end ;
19504: LD_VAR 0 2
19508: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19509: LD_INT 0
19511: PPUSH
19512: PPUSH
19513: PPUSH
// if not aiData then
19514: LD_VAR 0 1
19518: NOT
19519: IFFALSE 19530
// begin result = [ ] ;
19521: LD_ADDR_VAR 0 2
19525: PUSH
19526: EMPTY
19527: ST_TO_ADDR
// exit ;
19528: GO 19614
// end ; attackVehs = [ ] ;
19530: LD_ADDR_VAR 0 3
19534: PUSH
19535: EMPTY
19536: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19537: LD_ADDR_VAR 0 4
19541: PUSH
19542: LD_VAR 0 1
19546: PUSH
19547: LD_INT 5
19549: ARRAY
19550: PPUSH
19551: LD_INT 21
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PPUSH
19561: CALL_OW 72
19565: PUSH
19566: FOR_IN
19567: IFFALSE 19602
// if GetTag ( veh ) = 4 then
19569: LD_VAR 0 4
19573: PPUSH
19574: CALL_OW 110
19578: PUSH
19579: LD_INT 4
19581: EQUAL
19582: IFFALSE 19600
// attackVehs = attackVehs ^ veh ;
19584: LD_ADDR_VAR 0 3
19588: PUSH
19589: LD_VAR 0 3
19593: PUSH
19594: LD_VAR 0 4
19598: ADD
19599: ST_TO_ADDR
19600: GO 19566
19602: POP
19603: POP
// result = attackVehs ;
19604: LD_ADDR_VAR 0 2
19608: PUSH
19609: LD_VAR 0 3
19613: ST_TO_ADDR
// end ;
19614: LD_VAR 0 2
19618: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19619: LD_INT 0
19621: PPUSH
19622: PPUSH
19623: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19624: LD_ADDR_VAR 0 3
19628: PUSH
19629: LD_VAR 0 1
19633: PPUSH
19634: CALL 18691 0 1
19638: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19639: LD_VAR 0 3
19643: PUSH
19644: LD_INT 2
19646: ARRAY
19647: PUSH
19648: LD_INT 0
19650: EQUAL
19651: IFFALSE 19655
// exit ;
19653: GO 20100
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19655: LD_ADDR_VAR 0 4
19659: PUSH
19660: LD_VAR 0 3
19664: PUSH
19665: LD_INT 5
19667: ARRAY
19668: PPUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PPUSH
19679: CALL_OW 72
19683: PUSH
19684: FOR_IN
19685: IFFALSE 19790
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19687: LD_VAR 0 4
19691: PPUSH
19692: CALL_OW 256
19696: PUSH
19697: LD_INT 1000
19699: EQUAL
19700: PUSH
19701: LD_VAR 0 4
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: AND
19715: IFFALSE 19731
// SetTag ( unit , 1 ) else
19717: LD_VAR 0 4
19721: PPUSH
19722: LD_INT 1
19724: PPUSH
19725: CALL_OW 109
19729: GO 19788
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19731: LD_VAR 0 4
19735: PPUSH
19736: CALL_OW 256
19740: PUSH
19741: LD_INT 950
19743: LESSEQUAL
19744: PUSH
19745: LD_VAR 0 4
19749: PPUSH
19750: CALL_OW 256
19754: PUSH
19755: LD_INT 250
19757: GREATER
19758: AND
19759: PUSH
19760: LD_VAR 0 4
19764: PPUSH
19765: CALL_OW 110
19769: PUSH
19770: LD_INT 1
19772: EQUAL
19773: AND
19774: IFFALSE 19788
// SetTag ( unit , 0 ) ;
19776: LD_VAR 0 4
19780: PPUSH
19781: LD_INT 0
19783: PPUSH
19784: CALL_OW 109
// end ;
19788: GO 19684
19790: POP
19791: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19792: LD_ADDR_VAR 0 4
19796: PUSH
19797: LD_VAR 0 3
19801: PUSH
19802: LD_INT 5
19804: ARRAY
19805: PPUSH
19806: LD_INT 21
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PPUSH
19816: CALL_OW 72
19820: PUSH
19821: FOR_IN
19822: IFFALSE 20098
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19824: LD_VAR 0 4
19828: PPUSH
19829: CALL_OW 256
19833: PUSH
19834: LD_INT 1000
19836: EQUAL
19837: PUSH
19838: LD_VAR 0 4
19842: PPUSH
19843: CALL_OW 110
19847: PUSH
19848: LD_INT 3
19850: EQUAL
19851: AND
19852: IFFALSE 19866
// SetTag ( unit , 2 ) ;
19854: LD_VAR 0 4
19858: PPUSH
19859: LD_INT 2
19861: PPUSH
19862: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19866: LD_VAR 0 4
19870: PPUSH
19871: CALL_OW 256
19875: PUSH
19876: LD_INT 1000
19878: EQUAL
19879: PUSH
19880: LD_VAR 0 4
19884: PPUSH
19885: CALL_OW 110
19889: PUSH
19890: LD_INT 5
19892: EQUAL
19893: AND
19894: IFFALSE 19908
// SetTag ( unit , 4 ) ;
19896: LD_VAR 0 4
19900: PPUSH
19901: LD_INT 4
19903: PPUSH
19904: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19908: LD_VAR 0 4
19912: PPUSH
19913: CALL_OW 256
19917: PUSH
19918: LD_INT 650
19920: LESSEQUAL
19921: PUSH
19922: LD_VAR 0 4
19926: PPUSH
19927: CALL_OW 110
19931: PUSH
19932: LD_INT 4
19934: EQUAL
19935: AND
19936: PUSH
19937: LD_VAR 0 4
19941: PPUSH
19942: CALL_OW 263
19946: PUSH
19947: LD_INT 1
19949: EQUAL
19950: AND
19951: IFFALSE 19965
// SetTag ( unit , 5 ) ;
19953: LD_VAR 0 4
19957: PPUSH
19958: LD_INT 5
19960: PPUSH
19961: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
19965: LD_VAR 0 4
19969: PPUSH
19970: CALL_OW 256
19974: PUSH
19975: LD_INT 650
19977: LESSEQUAL
19978: PUSH
19979: LD_VAR 0 4
19983: PPUSH
19984: CALL_OW 110
19988: PUSH
19989: LD_INT 2
19991: EQUAL
19992: AND
19993: PUSH
19994: LD_VAR 0 4
19998: PPUSH
19999: CALL_OW 263
20003: PUSH
20004: LD_INT 1
20006: EQUAL
20007: AND
20008: IFFALSE 20022
// SetTag ( unit , 3 ) ;
20010: LD_VAR 0 4
20014: PPUSH
20015: LD_INT 3
20017: PPUSH
20018: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20022: LD_VAR 0 4
20026: PPUSH
20027: CALL_OW 263
20031: PUSH
20032: LD_INT 1
20034: EQUAL
20035: IFFALSE 20069
// if ( UnitsInside ( unit ) ) then
20037: LD_VAR 0 4
20041: PPUSH
20042: CALL_OW 313
20046: IFFALSE 20069
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20048: LD_VAR 0 4
20052: PPUSH
20053: CALL_OW 313
20057: PUSH
20058: LD_INT 1
20060: ARRAY
20061: PPUSH
20062: LD_INT 7
20064: PPUSH
20065: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20069: LD_VAR 0 4
20073: PPUSH
20074: CALL_OW 261
20078: PUSH
20079: LD_INT 50
20081: LESS
20082: IFFALSE 20096
// SetFuel ( unit , 100 ) ;
20084: LD_VAR 0 4
20088: PPUSH
20089: LD_INT 100
20091: PPUSH
20092: CALL_OW 240
// end ;
20096: GO 19821
20098: POP
20099: POP
// end ;
20100: LD_VAR 0 2
20104: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20105: LD_INT 0
20107: PPUSH
20108: PPUSH
20109: PPUSH
20110: PPUSH
20111: PPUSH
20112: PPUSH
20113: PPUSH
20114: PPUSH
20115: PPUSH
20116: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20117: LD_ADDR_VAR 0 3
20121: PUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: CALL 18691 0 1
20131: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20132: LD_VAR 0 3
20136: PUSH
20137: LD_INT 2
20139: ARRAY
20140: PUSH
20141: LD_INT 0
20143: EQUAL
20144: IFFALSE 20148
// exit ;
20146: GO 20727
// soldiersInsideBarracks = [ ] ;
20148: LD_ADDR_VAR 0 10
20152: PUSH
20153: EMPTY
20154: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20155: LD_ADDR_VAR 0 4
20159: PUSH
20160: LD_VAR 0 3
20164: PUSH
20165: LD_INT 5
20167: ARRAY
20168: PPUSH
20169: LD_INT 25
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 50
20181: PUSH
20182: EMPTY
20183: LIST
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PPUSH
20189: CALL_OW 72
20193: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20194: LD_ADDR_VAR 0 6
20198: PUSH
20199: LD_VAR 0 3
20203: PUSH
20204: LD_INT 6
20206: ARRAY
20207: PPUSH
20208: LD_INT 21
20210: PUSH
20211: LD_INT 3
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: LD_INT 50
20220: PUSH
20221: EMPTY
20222: LIST
20223: PUSH
20224: LD_INT 3
20226: PUSH
20227: LD_INT 59
20229: PUSH
20230: EMPTY
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: LD_INT 2
20239: PUSH
20240: LD_INT 30
20242: PUSH
20243: LD_INT 31
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PUSH
20250: LD_INT 30
20252: PUSH
20253: LD_INT 32
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: PPUSH
20271: CALL_OW 72
20275: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20276: LD_ADDR_VAR 0 7
20280: PUSH
20281: LD_VAR 0 3
20285: PUSH
20286: LD_INT 6
20288: ARRAY
20289: PPUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 3
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: LD_INT 50
20302: PUSH
20303: EMPTY
20304: LIST
20305: PUSH
20306: LD_INT 2
20308: PUSH
20309: LD_INT 30
20311: PUSH
20312: LD_INT 4
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: LD_INT 30
20321: PUSH
20322: LD_INT 5
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 72
20343: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20344: LD_ADDR_VAR 0 9
20348: PUSH
20349: LD_VAR 0 3
20353: PUSH
20354: LD_INT 6
20356: ARRAY
20357: PPUSH
20358: LD_INT 21
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 50
20370: PUSH
20371: EMPTY
20372: LIST
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 30
20379: PUSH
20380: LD_INT 0
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 30
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: LIST
20406: PPUSH
20407: CALL_OW 72
20411: PUSH
20412: LD_INT 1
20414: ARRAY
20415: ST_TO_ADDR
// for barrack in barracks do
20416: LD_ADDR_VAR 0 11
20420: PUSH
20421: LD_VAR 0 7
20425: PUSH
20426: FOR_IN
20427: IFFALSE 20452
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20429: LD_ADDR_VAR 0 10
20433: PUSH
20434: LD_VAR 0 10
20438: PUSH
20439: LD_VAR 0 11
20443: PPUSH
20444: CALL_OW 313
20448: ADD
20449: ST_TO_ADDR
20450: GO 20426
20452: POP
20453: POP
// index = 1 ;
20454: LD_ADDR_VAR 0 8
20458: PUSH
20459: LD_INT 1
20461: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20462: LD_VAR 0 4
20466: PPUSH
20467: LD_INT 56
20469: PUSH
20470: EMPTY
20471: LIST
20472: PUSH
20473: LD_INT 3
20475: PUSH
20476: LD_INT 60
20478: PUSH
20479: EMPTY
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PUSH
20486: EMPTY
20487: LIST
20488: LIST
20489: PPUSH
20490: CALL_OW 72
20494: PUSH
20495: LD_VAR 0 6
20499: AND
20500: PUSH
20501: LD_VAR 0 9
20505: AND
20506: IFFALSE 20606
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20508: LD_ADDR_VAR 0 5
20512: PUSH
20513: LD_VAR 0 4
20517: PPUSH
20518: LD_INT 56
20520: PUSH
20521: EMPTY
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: PPUSH
20527: CALL_OW 72
20531: PUSH
20532: LD_VAR 0 10
20536: ADD
20537: PUSH
20538: FOR_IN
20539: IFFALSE 20604
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20541: LD_VAR 0 5
20545: PPUSH
20546: CALL_OW 110
20550: PUSH
20551: LD_INT 1
20553: EQUAL
20554: PUSH
20555: LD_VAR 0 8
20559: PUSH
20560: LD_VAR 0 6
20564: LESSEQUAL
20565: AND
20566: IFFALSE 20602
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20568: LD_VAR 0 5
20572: PPUSH
20573: LD_VAR 0 6
20577: PUSH
20578: LD_VAR 0 8
20582: ARRAY
20583: PPUSH
20584: CALL_OW 120
// index = index + 1 ;
20588: LD_ADDR_VAR 0 8
20592: PUSH
20593: LD_VAR 0 8
20597: PUSH
20598: LD_INT 1
20600: PLUS
20601: ST_TO_ADDR
// end ;
20602: GO 20538
20604: POP
20605: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20606: LD_VAR 0 4
20610: PPUSH
20611: LD_INT 56
20613: PUSH
20614: EMPTY
20615: LIST
20616: PUSH
20617: LD_INT 3
20619: PUSH
20620: LD_INT 60
20622: PUSH
20623: EMPTY
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PPUSH
20634: CALL_OW 72
20638: PUSH
20639: LD_VAR 0 6
20643: NOT
20644: AND
20645: PUSH
20646: LD_VAR 0 7
20650: AND
20651: IFFALSE 20727
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20653: LD_ADDR_VAR 0 5
20657: PUSH
20658: LD_VAR 0 4
20662: PPUSH
20663: LD_INT 56
20665: PUSH
20666: EMPTY
20667: LIST
20668: PUSH
20669: EMPTY
20670: LIST
20671: PPUSH
20672: CALL_OW 72
20676: PUSH
20677: FOR_IN
20678: IFFALSE 20725
// if ( GetTag ( sold ) = 1 ) then
20680: LD_VAR 0 5
20684: PPUSH
20685: CALL_OW 110
20689: PUSH
20690: LD_INT 1
20692: EQUAL
20693: IFFALSE 20723
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20695: LD_VAR 0 5
20699: PPUSH
20700: LD_VAR 0 7
20704: PUSH
20705: LD_INT 1
20707: PPUSH
20708: LD_VAR 0 7
20712: PPUSH
20713: CALL_OW 12
20717: ARRAY
20718: PPUSH
20719: CALL_OW 120
20723: GO 20677
20725: POP
20726: POP
// end ;
20727: LD_VAR 0 2
20731: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20732: LD_INT 0
20734: PPUSH
20735: PPUSH
20736: PPUSH
20737: PPUSH
20738: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20739: LD_ADDR_VAR 0 3
20743: PUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: CALL 18691 0 1
20753: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20754: LD_VAR 0 3
20758: PUSH
20759: LD_INT 2
20761: ARRAY
20762: PUSH
20763: LD_INT 0
20765: EQUAL
20766: IFFALSE 20770
// exit ;
20768: GO 20991
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20770: LD_ADDR_VAR 0 4
20774: PUSH
20775: LD_VAR 0 3
20779: PUSH
20780: LD_INT 5
20782: ARRAY
20783: PPUSH
20784: LD_INT 25
20786: PUSH
20787: LD_INT 3
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 50
20796: PUSH
20797: EMPTY
20798: LIST
20799: PUSH
20800: EMPTY
20801: LIST
20802: LIST
20803: PPUSH
20804: CALL_OW 72
20808: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20809: LD_ADDR_VAR 0 6
20813: PUSH
20814: LD_VAR 0 3
20818: PUSH
20819: LD_INT 6
20821: ARRAY
20822: PPUSH
20823: LD_INT 21
20825: PUSH
20826: LD_INT 3
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 50
20835: PUSH
20836: EMPTY
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 30
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 30
20854: PUSH
20855: LD_INT 3
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: LIST
20871: PPUSH
20872: CALL_OW 72
20876: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20877: LD_VAR 0 4
20881: PPUSH
20882: LD_INT 56
20884: PUSH
20885: EMPTY
20886: LIST
20887: PUSH
20888: LD_INT 3
20890: PUSH
20891: LD_INT 60
20893: PUSH
20894: EMPTY
20895: LIST
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 72
20909: PUSH
20910: LD_VAR 0 6
20914: AND
20915: IFFALSE 20991
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20917: LD_ADDR_VAR 0 5
20921: PUSH
20922: LD_VAR 0 4
20926: PPUSH
20927: LD_INT 56
20929: PUSH
20930: EMPTY
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: PPUSH
20936: CALL_OW 72
20940: PUSH
20941: FOR_IN
20942: IFFALSE 20989
// if ( GetTag ( mech ) = 1 ) then
20944: LD_VAR 0 5
20948: PPUSH
20949: CALL_OW 110
20953: PUSH
20954: LD_INT 1
20956: EQUAL
20957: IFFALSE 20987
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
20959: LD_VAR 0 5
20963: PPUSH
20964: LD_VAR 0 6
20968: PUSH
20969: LD_INT 1
20971: PPUSH
20972: LD_VAR 0 6
20976: PPUSH
20977: CALL_OW 12
20981: ARRAY
20982: PPUSH
20983: CALL_OW 120
20987: GO 20941
20989: POP
20990: POP
// end ;
20991: LD_VAR 0 2
20995: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
20996: LD_INT 0
20998: PPUSH
20999: PPUSH
21000: PPUSH
21001: PPUSH
21002: PPUSH
21003: PPUSH
21004: PPUSH
21005: PPUSH
21006: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21007: LD_ADDR_VAR 0 3
21011: PUSH
21012: LD_VAR 0 1
21016: PPUSH
21017: CALL 18691 0 1
21021: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21022: LD_VAR 0 3
21026: PUSH
21027: LD_INT 2
21029: ARRAY
21030: PUSH
21031: LD_INT 0
21033: EQUAL
21034: IFFALSE 21038
// exit ;
21036: GO 21501
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21038: LD_ADDR_VAR 0 5
21042: PUSH
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 5
21050: ARRAY
21051: PPUSH
21052: LD_INT 21
21054: PUSH
21055: LD_INT 3
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: PUSH
21062: LD_INT 50
21064: PUSH
21065: EMPTY
21066: LIST
21067: PUSH
21068: LD_INT 59
21070: PUSH
21071: EMPTY
21072: LIST
21073: PUSH
21074: LD_INT 2
21076: PUSH
21077: LD_INT 30
21079: PUSH
21080: LD_INT 2
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: LD_INT 30
21089: PUSH
21090: LD_INT 3
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: EMPTY
21098: LIST
21099: LIST
21100: LIST
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: PPUSH
21108: CALL_OW 72
21112: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21113: LD_ADDR_VAR 0 8
21117: PUSH
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 5
21125: ARRAY
21126: PPUSH
21127: LD_INT 21
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PUSH
21137: LD_INT 33
21139: PUSH
21140: LD_INT 1
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 92
21149: PUSH
21150: LD_VAR 0 3
21154: PUSH
21155: LD_INT 10
21157: ARRAY
21158: PPUSH
21159: LD_INT 0
21161: PPUSH
21162: CALL_OW 517
21166: PUSH
21167: LD_INT 1
21169: ARRAY
21170: PUSH
21171: LD_INT 1
21173: ARRAY
21174: PUSH
21175: LD_VAR 0 3
21179: PUSH
21180: LD_INT 10
21182: ARRAY
21183: PPUSH
21184: LD_INT 0
21186: PPUSH
21187: CALL_OW 517
21191: PUSH
21192: LD_INT 2
21194: ARRAY
21195: PUSH
21196: LD_INT 1
21198: ARRAY
21199: PUSH
21200: LD_INT 16
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: PUSH
21209: LD_INT 3
21211: PUSH
21212: LD_INT 24
21214: PUSH
21215: LD_INT 1000
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PPUSH
21232: CALL_OW 72
21236: ST_TO_ADDR
// if not damageVehicles then
21237: LD_VAR 0 8
21241: NOT
21242: IFFALSE 21246
// exit ;
21244: GO 21501
// if fabs then
21246: LD_VAR 0 5
21250: IFFALSE 21375
// begin for damageVeh in damageVehicles do
21252: LD_ADDR_VAR 0 9
21256: PUSH
21257: LD_VAR 0 8
21261: PUSH
21262: FOR_IN
21263: IFFALSE 21373
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21265: LD_VAR 0 9
21269: PPUSH
21270: CALL_OW 110
21274: PUSH
21275: LD_INT 3
21277: EQUAL
21278: PUSH
21279: LD_VAR 0 9
21283: PPUSH
21284: CALL_OW 110
21288: PUSH
21289: LD_INT 5
21291: EQUAL
21292: OR
21293: IFFALSE 21371
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21295: LD_ADDR_VAR 0 7
21299: PUSH
21300: LD_VAR 0 5
21304: PPUSH
21305: LD_VAR 0 9
21309: PPUSH
21310: CALL_OW 74
21314: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21315: LD_ADDR_VAR 0 4
21319: PUSH
21320: LD_VAR 0 7
21324: PPUSH
21325: CALL_OW 313
21329: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21330: LD_VAR 0 4
21334: PPUSH
21335: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21339: LD_VAR 0 4
21343: PPUSH
21344: LD_INT 3
21346: PUSH
21347: LD_INT 60
21349: PUSH
21350: EMPTY
21351: LIST
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 72
21361: PPUSH
21362: LD_VAR 0 9
21366: PPUSH
21367: CALL_OW 189
// end ;
21371: GO 21262
21373: POP
21374: POP
// end ; for damageVeh in damageVehicles do
21375: LD_ADDR_VAR 0 9
21379: PUSH
21380: LD_VAR 0 8
21384: PUSH
21385: FOR_IN
21386: IFFALSE 21499
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21388: LD_VAR 0 9
21392: PPUSH
21393: CALL_OW 110
21397: PUSH
21398: LD_INT 3
21400: EQUAL
21401: PUSH
21402: LD_VAR 0 9
21406: PPUSH
21407: CALL_OW 110
21411: PUSH
21412: LD_INT 5
21414: EQUAL
21415: OR
21416: IFFALSE 21497
// begin mehInside = UnitsInside ( damageVeh ) ;
21418: LD_ADDR_VAR 0 10
21422: PUSH
21423: LD_VAR 0 9
21427: PPUSH
21428: CALL_OW 313
21432: ST_TO_ADDR
// if mehInside then
21433: LD_VAR 0 10
21437: IFFALSE 21497
// begin mehInside = mehInside [ 1 ] ;
21439: LD_ADDR_VAR 0 10
21443: PUSH
21444: LD_VAR 0 10
21448: PUSH
21449: LD_INT 1
21451: ARRAY
21452: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21453: LD_VAR 0 10
21457: PPUSH
21458: CALL_OW 181
// wait ( 0 0$01 ) ;
21462: LD_INT 35
21464: PPUSH
21465: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21469: LD_VAR 0 10
21473: PPUSH
21474: LD_VAR 0 9
21478: PPUSH
21479: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21483: LD_VAR 0 10
21487: PPUSH
21488: LD_VAR 0 9
21492: PPUSH
21493: CALL_OW 180
// end ; end ;
21497: GO 21385
21499: POP
21500: POP
// end ;
21501: LD_VAR 0 2
21505: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21506: LD_INT 0
21508: PPUSH
21509: PPUSH
21510: PPUSH
21511: PPUSH
21512: PPUSH
21513: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21514: LD_ADDR_VAR 0 3
21518: PUSH
21519: LD_VAR 0 1
21523: PPUSH
21524: CALL 18691 0 1
21528: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21529: LD_VAR 0 3
21533: PUSH
21534: LD_INT 2
21536: ARRAY
21537: PUSH
21538: LD_INT 0
21540: EQUAL
21541: IFFALSE 21545
// exit ;
21543: GO 21999
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21545: LD_ADDR_VAR 0 7
21549: PUSH
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 6
21557: ARRAY
21558: PPUSH
21559: LD_INT 21
21561: PUSH
21562: LD_INT 3
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 50
21571: PUSH
21572: EMPTY
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: LD_INT 30
21580: PUSH
21581: LD_INT 0
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 30
21590: PUSH
21591: LD_INT 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: PPUSH
21608: CALL_OW 72
21612: PUSH
21613: LD_INT 1
21615: ARRAY
21616: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21617: LD_VAR 0 3
21621: PPUSH
21622: CALL 19399 0 1
21626: NOT
21627: IFFALSE 21631
// exit ;
21629: GO 21999
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21631: LD_VAR 0 7
21635: PUSH
21636: LD_VAR 0 3
21640: PPUSH
21641: CALL 19399 0 1
21645: AND
21646: PUSH
21647: LD_VAR 0 3
21651: PUSH
21652: LD_INT 11
21654: ARRAY
21655: PPUSH
21656: LD_INT 81
21658: PUSH
21659: LD_VAR 0 3
21663: PUSH
21664: LD_INT 3
21666: ARRAY
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PPUSH
21672: CALL_OW 70
21676: NOT
21677: AND
21678: IFFALSE 21828
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21680: LD_ADDR_VAR 0 5
21684: PUSH
21685: LD_VAR 0 3
21689: PPUSH
21690: CALL 19399 0 1
21694: PPUSH
21695: LD_INT 50
21697: PUSH
21698: EMPTY
21699: LIST
21700: PUSH
21701: LD_INT 3
21703: PUSH
21704: LD_INT 60
21706: PUSH
21707: EMPTY
21708: LIST
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 3
21716: PUSH
21717: LD_INT 92
21719: PUSH
21720: LD_VAR 0 7
21724: PPUSH
21725: CALL_OW 250
21729: PUSH
21730: LD_VAR 0 7
21734: PPUSH
21735: CALL_OW 251
21739: PUSH
21740: LD_INT 12
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: LIST
21757: PPUSH
21758: CALL_OW 72
21762: PUSH
21763: FOR_IN
21764: IFFALSE 21826
// if GetLives ( veh ) = 1000 then
21766: LD_VAR 0 5
21770: PPUSH
21771: CALL_OW 256
21775: PUSH
21776: LD_INT 1000
21778: EQUAL
21779: IFFALSE 21812
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21781: LD_VAR 0 5
21785: PPUSH
21786: LD_VAR 0 7
21790: PPUSH
21791: CALL_OW 250
21795: PPUSH
21796: LD_VAR 0 7
21800: PPUSH
21801: CALL_OW 251
21805: PPUSH
21806: CALL_OW 111
21810: GO 21824
// SetTag ( veh , 3 ) ;
21812: LD_VAR 0 5
21816: PPUSH
21817: LD_INT 3
21819: PPUSH
21820: CALL_OW 109
21824: GO 21763
21826: POP
21827: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21828: LD_VAR 0 3
21832: PUSH
21833: LD_INT 11
21835: ARRAY
21836: PPUSH
21837: LD_INT 81
21839: PUSH
21840: LD_VAR 0 3
21844: PUSH
21845: LD_INT 3
21847: ARRAY
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PPUSH
21853: CALL_OW 70
21857: NOT
21858: IFFALSE 21862
// exit ;
21860: GO 21999
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21862: LD_ADDR_VAR 0 5
21866: PUSH
21867: LD_VAR 0 3
21871: PPUSH
21872: CALL 19399 0 1
21876: PPUSH
21877: LD_INT 50
21879: PUSH
21880: EMPTY
21881: LIST
21882: PUSH
21883: LD_INT 3
21885: PUSH
21886: LD_INT 60
21888: PUSH
21889: EMPTY
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PPUSH
21900: CALL_OW 72
21904: PUSH
21905: FOR_IN
21906: IFFALSE 21997
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21908: LD_VAR 0 5
21912: PPUSH
21913: LD_VAR 0 3
21917: PUSH
21918: LD_INT 11
21920: ARRAY
21921: PPUSH
21922: LD_INT 81
21924: PUSH
21925: LD_VAR 0 3
21929: PUSH
21930: LD_INT 3
21932: ARRAY
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: PPUSH
21938: CALL_OW 70
21942: PUSH
21943: LD_INT 1
21945: ARRAY
21946: PPUSH
21947: CALL_OW 250
21951: PPUSH
21952: LD_VAR 0 3
21956: PUSH
21957: LD_INT 11
21959: ARRAY
21960: PPUSH
21961: LD_INT 81
21963: PUSH
21964: LD_VAR 0 3
21968: PUSH
21969: LD_INT 3
21971: ARRAY
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PPUSH
21977: CALL_OW 70
21981: PUSH
21982: LD_INT 1
21984: ARRAY
21985: PPUSH
21986: CALL_OW 251
21990: PPUSH
21991: CALL_OW 114
21995: GO 21905
21997: POP
21998: POP
// end ;
21999: LD_VAR 0 2
22003: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
22008: PPUSH
22009: PPUSH
22010: PPUSH
22011: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_VAR 0 1
22021: PPUSH
22022: CALL 18691 0 1
22026: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22027: LD_VAR 0 3
22031: PUSH
22032: LD_INT 2
22034: ARRAY
22035: PUSH
22036: LD_INT 0
22038: EQUAL
22039: IFFALSE 22043
// exit ;
22041: GO 22433
// if ( aiData [ 18 ] = 0 ) then
22043: LD_VAR 0 3
22047: PUSH
22048: LD_INT 18
22050: ARRAY
22051: PUSH
22052: LD_INT 0
22054: EQUAL
22055: IFFALSE 22059
// exit ;
22057: GO 22433
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22059: LD_VAR 0 3
22063: PPUSH
22064: CALL 19509 0 1
22068: PUSH
22069: LD_VAR 0 3
22073: PUSH
22074: LD_INT 14
22076: ARRAY
22077: GREATEREQUAL
22078: IFFALSE 22433
// begin repeat wait ( 0 0$01 ) ;
22080: LD_INT 35
22082: PPUSH
22083: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22087: LD_ADDR_VAR 0 6
22091: PUSH
22092: LD_VAR 0 3
22096: PPUSH
22097: CALL 19509 0 1
22101: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22102: LD_ADDR_VAR 0 7
22106: PUSH
22107: LD_VAR 0 6
22111: PUSH
22112: FOR_IN
22113: IFFALSE 22413
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22115: LD_ADDR_VAR 0 4
22119: PUSH
22120: LD_INT 81
22122: PUSH
22123: LD_VAR 0 3
22127: PUSH
22128: LD_INT 3
22130: ARRAY
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PPUSH
22136: CALL_OW 69
22140: PPUSH
22141: LD_VAR 0 7
22145: PPUSH
22146: CALL_OW 74
22150: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22151: LD_ADDR_VAR 0 5
22155: PUSH
22156: LD_INT 81
22158: PUSH
22159: LD_VAR 0 3
22163: PUSH
22164: LD_INT 3
22166: ARRAY
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: PUSH
22172: LD_INT 2
22174: PUSH
22175: LD_INT 59
22177: PUSH
22178: EMPTY
22179: LIST
22180: PUSH
22181: LD_INT 21
22183: PUSH
22184: LD_INT 1
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PUSH
22191: LD_INT 21
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: PUSH
22211: EMPTY
22212: LIST
22213: PPUSH
22214: CALL_OW 69
22218: PPUSH
22219: LD_VAR 0 7
22223: PPUSH
22224: CALL_OW 74
22228: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22229: LD_VAR 0 7
22233: PPUSH
22234: LD_VAR 0 4
22238: PPUSH
22239: CALL_OW 296
22243: PUSH
22244: LD_INT 12
22246: PLUS
22247: PUSH
22248: LD_VAR 0 7
22252: PPUSH
22253: LD_VAR 0 5
22257: PPUSH
22258: CALL_OW 296
22262: LESS
22263: IFFALSE 22339
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22265: LD_VAR 0 7
22269: PPUSH
22270: LD_INT 50
22272: PUSH
22273: EMPTY
22274: LIST
22275: PPUSH
22276: CALL_OW 72
22280: PPUSH
22281: LD_VAR 0 4
22285: PPUSH
22286: CALL_OW 250
22290: PPUSH
22291: LD_VAR 0 4
22295: PPUSH
22296: CALL_OW 251
22300: PPUSH
22301: CALL_OW 114
// wait ( 0 0$01 ) ;
22305: LD_INT 35
22307: PPUSH
22308: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22312: LD_VAR 0 7
22316: PPUSH
22317: LD_INT 50
22319: PUSH
22320: EMPTY
22321: LIST
22322: PPUSH
22323: CALL_OW 72
22327: PPUSH
22328: LD_VAR 0 4
22332: PPUSH
22333: CALL_OW 115
// end else
22337: GO 22411
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22339: LD_VAR 0 7
22343: PPUSH
22344: LD_INT 50
22346: PUSH
22347: EMPTY
22348: LIST
22349: PPUSH
22350: CALL_OW 72
22354: PPUSH
22355: LD_VAR 0 5
22359: PPUSH
22360: CALL_OW 250
22364: PPUSH
22365: LD_VAR 0 5
22369: PPUSH
22370: CALL_OW 251
22374: PPUSH
22375: CALL_OW 114
// wait ( 0 0$01 ) ;
22379: LD_INT 35
22381: PPUSH
22382: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22386: LD_VAR 0 7
22390: PPUSH
22391: LD_INT 50
22393: PUSH
22394: EMPTY
22395: LIST
22396: PPUSH
22397: CALL_OW 72
22401: PPUSH
22402: LD_VAR 0 5
22406: PPUSH
22407: CALL_OW 115
// end ; end ;
22411: GO 22112
22413: POP
22414: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22415: LD_VAR 0 6
22419: PPUSH
22420: LD_INT 50
22422: PUSH
22423: EMPTY
22424: LIST
22425: PPUSH
22426: CALL_OW 72
22430: NOT
22431: IFFALSE 22080
// end ; end ;
22433: LD_VAR 0 2
22437: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22438: LD_INT 0
22440: PPUSH
22441: PPUSH
22442: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22443: LD_ADDR_VAR 0 3
22447: PUSH
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL 18691 0 1
22457: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22458: LD_VAR 0 3
22462: PUSH
22463: LD_INT 2
22465: ARRAY
22466: PUSH
22467: LD_INT 0
22469: EQUAL
22470: IFFALSE 22474
// exit ;
22472: GO 22623
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22474: LD_ADDR_VAR 0 4
22478: PUSH
22479: LD_VAR 0 3
22483: PUSH
22484: LD_INT 5
22486: ARRAY
22487: PPUSH
22488: LD_INT 21
22490: PUSH
22491: LD_INT 2
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 50
22500: PUSH
22501: EMPTY
22502: LIST
22503: PUSH
22504: LD_INT 2
22506: PUSH
22507: LD_INT 34
22509: PUSH
22510: LD_INT 12
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 34
22519: PUSH
22520: LD_INT 32
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 34
22529: PUSH
22530: LD_INT 51
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: PPUSH
22548: CALL_OW 72
22552: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22553: LD_VAR 0 3
22557: PUSH
22558: LD_INT 8
22560: ARRAY
22561: PPUSH
22562: CALL_OW 435
22566: NOT
22567: PUSH
22568: LD_VAR 0 4
22572: NOT
22573: OR
22574: IFFALSE 22578
// exit ;
22576: GO 22623
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22578: LD_VAR 0 4
22582: PPUSH
22583: LD_VAR 0 3
22587: PUSH
22588: LD_INT 8
22590: ARRAY
22591: PPUSH
22592: CALL_OW 435
22596: PUSH
22597: LD_INT 1
22599: ARRAY
22600: PPUSH
22601: LD_VAR 0 3
22605: PUSH
22606: LD_INT 8
22608: ARRAY
22609: PPUSH
22610: CALL_OW 435
22614: PUSH
22615: LD_INT 2
22617: ARRAY
22618: PPUSH
22619: CALL_OW 117
// end ;
22623: LD_VAR 0 2
22627: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22628: LD_INT 0
22630: PPUSH
22631: PPUSH
22632: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22633: LD_ADDR_VAR 0 3
22637: PUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL 18691 0 1
22647: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22648: LD_VAR 0 3
22652: PUSH
22653: LD_INT 2
22655: ARRAY
22656: PUSH
22657: LD_INT 0
22659: EQUAL
22660: IFFALSE 22664
// exit ;
22662: GO 22754
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22664: LD_ADDR_VAR 0 4
22668: PUSH
22669: LD_VAR 0 3
22673: PUSH
22674: LD_INT 5
22676: ARRAY
22677: PPUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PPUSH
22688: CALL_OW 72
22692: PUSH
22693: FOR_IN
22694: IFFALSE 22752
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22696: LD_VAR 0 4
22700: PPUSH
22701: CALL_OW 110
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: PUSH
22710: LD_VAR 0 4
22714: PPUSH
22715: LD_VAR 0 3
22719: PUSH
22720: LD_INT 9
22722: ARRAY
22723: PPUSH
22724: CALL_OW 308
22728: NOT
22729: AND
22730: IFFALSE 22750
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22732: LD_VAR 0 4
22736: PPUSH
22737: LD_VAR 0 3
22741: PUSH
22742: LD_INT 9
22744: ARRAY
22745: PPUSH
22746: CALL_OW 113
22750: GO 22693
22752: POP
22753: POP
// end ;
22754: LD_VAR 0 2
22758: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22759: LD_INT 0
22761: PPUSH
22762: PPUSH
22763: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22764: LD_ADDR_VAR 0 3
22768: PUSH
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL 18691 0 1
22778: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22779: LD_VAR 0 3
22783: PUSH
22784: LD_INT 2
22786: ARRAY
22787: PUSH
22788: LD_INT 0
22790: EQUAL
22791: IFFALSE 22795
// exit ;
22793: GO 22910
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22795: LD_ADDR_VAR 0 4
22799: PUSH
22800: LD_VAR 0 3
22804: PUSH
22805: LD_INT 5
22807: ARRAY
22808: PPUSH
22809: LD_INT 21
22811: PUSH
22812: LD_INT 2
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: PUSH
22819: LD_INT 50
22821: PUSH
22822: EMPTY
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: PPUSH
22829: CALL_OW 72
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22908
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22837: LD_VAR 0 4
22841: PPUSH
22842: CALL_OW 110
22846: PUSH
22847: LD_INT 3
22849: EQUAL
22850: PUSH
22851: LD_VAR 0 4
22855: PPUSH
22856: CALL_OW 110
22860: PUSH
22861: LD_INT 5
22863: EQUAL
22864: OR
22865: PUSH
22866: LD_VAR 0 4
22870: PPUSH
22871: LD_VAR 0 3
22875: PUSH
22876: LD_INT 10
22878: ARRAY
22879: PPUSH
22880: CALL_OW 308
22884: NOT
22885: AND
22886: IFFALSE 22906
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22888: LD_VAR 0 4
22892: PPUSH
22893: LD_VAR 0 3
22897: PUSH
22898: LD_INT 10
22900: ARRAY
22901: PPUSH
22902: CALL_OW 113
22906: GO 22834
22908: POP
22909: POP
// end ;
22910: LD_VAR 0 2
22914: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22915: LD_INT 0
22917: PPUSH
22918: PPUSH
22919: PPUSH
22920: PPUSH
22921: PPUSH
22922: PPUSH
22923: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22924: LD_ADDR_VAR 0 3
22928: PUSH
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL 18691 0 1
22938: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22939: LD_VAR 0 3
22943: PUSH
22944: LD_INT 2
22946: ARRAY
22947: PUSH
22948: LD_INT 0
22950: EQUAL
22951: IFFALSE 22955
// exit ;
22953: GO 23655
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
22955: LD_ADDR_VAR 0 4
22959: PUSH
22960: LD_VAR 0 3
22964: PUSH
22965: LD_INT 5
22967: ARRAY
22968: PPUSH
22969: LD_INT 25
22971: PUSH
22972: LD_INT 2
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 50
22981: PUSH
22982: EMPTY
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 72
22993: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
22994: LD_ADDR_VAR 0 5
22998: PUSH
22999: LD_VAR 0 3
23003: PUSH
23004: LD_INT 5
23006: ARRAY
23007: PPUSH
23008: LD_INT 21
23010: PUSH
23011: LD_INT 2
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 50
23020: PUSH
23021: EMPTY
23022: LIST
23023: PUSH
23024: LD_INT 2
23026: PUSH
23027: LD_INT 34
23029: PUSH
23030: LD_INT 13
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: LD_INT 34
23039: PUSH
23040: LD_EXP 124
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PUSH
23049: LD_INT 34
23051: PUSH
23052: LD_INT 52
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: PPUSH
23070: CALL_OW 72
23074: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23075: LD_ADDR_VAR 0 8
23079: PUSH
23080: LD_VAR 0 3
23084: PUSH
23085: LD_INT 6
23087: ARRAY
23088: PPUSH
23089: LD_INT 21
23091: PUSH
23092: LD_INT 3
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: LD_INT 24
23104: PUSH
23105: LD_INT 1000
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PPUSH
23120: CALL_OW 72
23124: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23125: LD_VAR 0 4
23129: PPUSH
23130: LD_INT 56
23132: PUSH
23133: EMPTY
23134: LIST
23135: PUSH
23136: LD_INT 3
23138: PUSH
23139: LD_INT 60
23141: PUSH
23142: EMPTY
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 72
23157: PUSH
23158: LD_VAR 0 8
23162: NOT
23163: AND
23164: PUSH
23165: LD_VAR 0 3
23169: PUSH
23170: LD_INT 6
23172: ARRAY
23173: PPUSH
23174: LD_INT 21
23176: PUSH
23177: LD_INT 3
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 50
23186: PUSH
23187: EMPTY
23188: LIST
23189: PUSH
23190: LD_INT 2
23192: PUSH
23193: LD_INT 30
23195: PUSH
23196: LD_INT 0
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 30
23205: PUSH
23206: LD_INT 1
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 72
23227: AND
23228: IFFALSE 23366
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23230: LD_ADDR_VAR 0 7
23234: PUSH
23235: LD_VAR 0 4
23239: PPUSH
23240: LD_INT 56
23242: PUSH
23243: EMPTY
23244: LIST
23245: PUSH
23246: LD_INT 3
23248: PUSH
23249: LD_INT 60
23251: PUSH
23252: EMPTY
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PPUSH
23263: CALL_OW 72
23267: PUSH
23268: FOR_IN
23269: IFFALSE 23364
// if ( GetTag ( eng ) = 1 ) then
23271: LD_VAR 0 7
23275: PPUSH
23276: CALL_OW 110
23280: PUSH
23281: LD_INT 1
23283: EQUAL
23284: IFFALSE 23362
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23286: LD_VAR 0 7
23290: PPUSH
23291: LD_VAR 0 3
23295: PUSH
23296: LD_INT 6
23298: ARRAY
23299: PPUSH
23300: LD_INT 21
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: LD_INT 50
23312: PUSH
23313: EMPTY
23314: LIST
23315: PUSH
23316: LD_INT 2
23318: PUSH
23319: LD_INT 30
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: LD_INT 30
23331: PUSH
23332: LD_INT 1
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: PPUSH
23349: CALL_OW 72
23353: PUSH
23354: LD_INT 1
23356: ARRAY
23357: PPUSH
23358: CALL_OW 120
23362: GO 23268
23364: POP
23365: POP
// if engineers and damagedBuildings then
23366: LD_VAR 0 4
23370: PUSH
23371: LD_VAR 0 8
23375: AND
23376: IFFALSE 23523
// begin for eng in engineers do
23378: LD_ADDR_VAR 0 7
23382: PUSH
23383: LD_VAR 0 4
23387: PUSH
23388: FOR_IN
23389: IFFALSE 23462
// if ( GetTag ( eng ) = 1 ) then
23391: LD_VAR 0 7
23395: PPUSH
23396: CALL_OW 110
23400: PUSH
23401: LD_INT 1
23403: EQUAL
23404: IFFALSE 23460
// begin ForceResetTaskList ( eng ) ;
23406: LD_VAR 0 7
23410: PPUSH
23411: CALL 27009 0 1
// ExitUnitFromBuilding ( eng ) ;
23415: LD_VAR 0 7
23419: PPUSH
23420: CALL 27062 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23424: LD_VAR 0 7
23428: PPUSH
23429: LD_INT 3
23431: PUSH
23432: LD_INT 60
23434: PUSH
23435: EMPTY
23436: LIST
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PPUSH
23442: CALL_OW 72
23446: PPUSH
23447: LD_VAR 0 8
23451: PUSH
23452: LD_INT 1
23454: ARRAY
23455: PPUSH
23456: CALL_OW 190
// end ;
23460: GO 23388
23462: POP
23463: POP
// if cranes then
23464: LD_VAR 0 5
23468: IFFALSE 23523
// for crane in cranes do
23470: LD_ADDR_VAR 0 6
23474: PUSH
23475: LD_VAR 0 5
23479: PUSH
23480: FOR_IN
23481: IFFALSE 23521
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23483: LD_VAR 0 6
23487: PPUSH
23488: LD_INT 3
23490: PUSH
23491: LD_INT 60
23493: PUSH
23494: EMPTY
23495: LIST
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PPUSH
23501: CALL_OW 72
23505: PPUSH
23506: LD_VAR 0 8
23510: PUSH
23511: LD_INT 1
23513: ARRAY
23514: PPUSH
23515: CALL_OW 190
23519: GO 23480
23521: POP
23522: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23523: LD_VAR 0 4
23527: PUSH
23528: LD_VAR 0 8
23532: NOT
23533: AND
23534: PUSH
23535: LD_VAR 0 3
23539: PUSH
23540: LD_INT 7
23542: ARRAY
23543: AND
23544: IFFALSE 23655
// begin for eng in engineers do
23546: LD_ADDR_VAR 0 7
23550: PUSH
23551: LD_VAR 0 4
23555: PUSH
23556: FOR_IN
23557: IFFALSE 23653
// if ( GetTag ( eng ) = 1 ) then
23559: LD_VAR 0 7
23563: PPUSH
23564: CALL_OW 110
23568: PUSH
23569: LD_INT 1
23571: EQUAL
23572: IFFALSE 23651
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23574: LD_VAR 0 7
23578: PPUSH
23579: LD_VAR 0 3
23583: PUSH
23584: LD_INT 7
23586: ARRAY
23587: PUSH
23588: LD_INT 1
23590: ARRAY
23591: PUSH
23592: LD_INT 1
23594: ARRAY
23595: PPUSH
23596: LD_VAR 0 3
23600: PUSH
23601: LD_INT 7
23603: ARRAY
23604: PUSH
23605: LD_INT 1
23607: ARRAY
23608: PUSH
23609: LD_INT 2
23611: ARRAY
23612: PPUSH
23613: LD_VAR 0 3
23617: PUSH
23618: LD_INT 7
23620: ARRAY
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PUSH
23626: LD_INT 3
23628: ARRAY
23629: PPUSH
23630: LD_VAR 0 3
23634: PUSH
23635: LD_INT 7
23637: ARRAY
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PUSH
23643: LD_INT 4
23645: ARRAY
23646: PPUSH
23647: CALL_OW 145
23651: GO 23556
23653: POP
23654: POP
// end ;
23655: LD_VAR 0 2
23659: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23660: LD_INT 0
23662: PPUSH
23663: PPUSH
23664: PPUSH
23665: PPUSH
23666: PPUSH
23667: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23668: LD_ADDR_VAR 0 3
23672: PUSH
23673: LD_VAR 0 1
23677: PPUSH
23678: CALL 18691 0 1
23682: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23683: LD_VAR 0 3
23687: PUSH
23688: LD_INT 2
23690: ARRAY
23691: PUSH
23692: LD_INT 0
23694: EQUAL
23695: IFFALSE 23699
// exit ;
23697: GO 24153
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23699: LD_ADDR_VAR 0 4
23703: PUSH
23704: LD_VAR 0 3
23708: PUSH
23709: LD_INT 5
23711: ARRAY
23712: PPUSH
23713: LD_INT 25
23715: PUSH
23716: LD_INT 4
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: PUSH
23723: LD_INT 50
23725: PUSH
23726: EMPTY
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 72
23737: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23738: LD_ADDR_VAR 0 6
23742: PUSH
23743: LD_VAR 0 3
23747: PUSH
23748: LD_INT 5
23750: ARRAY
23751: PPUSH
23752: LD_INT 21
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: LD_INT 92
23764: PUSH
23765: LD_VAR 0 3
23769: PUSH
23770: LD_INT 9
23772: ARRAY
23773: PPUSH
23774: LD_INT 0
23776: PPUSH
23777: CALL_OW 517
23781: PUSH
23782: LD_INT 1
23784: ARRAY
23785: PUSH
23786: LD_INT 1
23788: ARRAY
23789: PUSH
23790: LD_VAR 0 3
23794: PUSH
23795: LD_INT 9
23797: ARRAY
23798: PPUSH
23799: LD_INT 0
23801: PPUSH
23802: CALL_OW 517
23806: PUSH
23807: LD_INT 2
23809: ARRAY
23810: PUSH
23811: LD_INT 1
23813: ARRAY
23814: PUSH
23815: LD_INT 6
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: PUSH
23824: LD_INT 3
23826: PUSH
23827: LD_INT 24
23829: PUSH
23830: LD_INT 1000
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: LIST
23845: PPUSH
23846: CALL_OW 72
23850: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23851: LD_ADDR_VAR 0 7
23855: PUSH
23856: LD_VAR 0 3
23860: PUSH
23861: LD_INT 5
23863: ARRAY
23864: PPUSH
23865: LD_INT 21
23867: PUSH
23868: LD_INT 3
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 50
23877: PUSH
23878: EMPTY
23879: LIST
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: LD_INT 30
23886: PUSH
23887: LD_INT 6
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 30
23896: PUSH
23897: LD_INT 7
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PUSH
23904: LD_INT 30
23906: PUSH
23907: LD_INT 8
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: LIST
23924: PPUSH
23925: CALL_OW 72
23929: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23930: LD_VAR 0 4
23934: PPUSH
23935: LD_INT 56
23937: PUSH
23938: EMPTY
23939: LIST
23940: PUSH
23941: LD_INT 3
23943: PUSH
23944: LD_INT 60
23946: PUSH
23947: EMPTY
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: PPUSH
23958: CALL_OW 72
23962: PUSH
23963: LD_VAR 0 6
23967: NOT
23968: AND
23969: PUSH
23970: LD_VAR 0 7
23974: AND
23975: IFFALSE 24051
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
23977: LD_ADDR_VAR 0 5
23981: PUSH
23982: LD_VAR 0 4
23986: PPUSH
23987: LD_INT 56
23989: PUSH
23990: EMPTY
23991: LIST
23992: PUSH
23993: EMPTY
23994: LIST
23995: PPUSH
23996: CALL_OW 72
24000: PUSH
24001: FOR_IN
24002: IFFALSE 24049
// if ( GetTag ( sci ) = 1 ) then
24004: LD_VAR 0 5
24008: PPUSH
24009: CALL_OW 110
24013: PUSH
24014: LD_INT 1
24016: EQUAL
24017: IFFALSE 24047
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24019: LD_VAR 0 5
24023: PPUSH
24024: LD_VAR 0 7
24028: PUSH
24029: LD_INT 1
24031: PPUSH
24032: LD_VAR 0 7
24036: PPUSH
24037: CALL_OW 12
24041: ARRAY
24042: PPUSH
24043: CALL_OW 120
24047: GO 24001
24049: POP
24050: POP
// if not scientists or not damageUnits then
24051: LD_VAR 0 4
24055: NOT
24056: PUSH
24057: LD_VAR 0 6
24061: NOT
24062: OR
24063: IFFALSE 24067
// exit ;
24065: GO 24153
// for sci in scientists do
24067: LD_ADDR_VAR 0 5
24071: PUSH
24072: LD_VAR 0 4
24076: PUSH
24077: FOR_IN
24078: IFFALSE 24151
// if ( GetTag ( sci ) = 1 ) then
24080: LD_VAR 0 5
24084: PPUSH
24085: CALL_OW 110
24089: PUSH
24090: LD_INT 1
24092: EQUAL
24093: IFFALSE 24149
// begin ForceResetTaskList ( sci ) ;
24095: LD_VAR 0 5
24099: PPUSH
24100: CALL 27009 0 1
// ExitUnitFromBuilding ( sci ) ;
24104: LD_VAR 0 5
24108: PPUSH
24109: CALL 27062 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24113: LD_VAR 0 5
24117: PPUSH
24118: LD_INT 3
24120: PUSH
24121: LD_INT 60
24123: PUSH
24124: EMPTY
24125: LIST
24126: PUSH
24127: EMPTY
24128: LIST
24129: LIST
24130: PPUSH
24131: CALL_OW 72
24135: PPUSH
24136: LD_VAR 0 6
24140: PUSH
24141: LD_INT 1
24143: ARRAY
24144: PPUSH
24145: CALL_OW 188
// end ;
24149: GO 24077
24151: POP
24152: POP
// end ;
24153: LD_VAR 0 2
24157: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24158: LD_INT 0
24160: PPUSH
24161: PPUSH
24162: PPUSH
24163: PPUSH
24164: PPUSH
24165: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24166: LD_ADDR_VAR 0 3
24170: PUSH
24171: LD_VAR 0 1
24175: PPUSH
24176: CALL 18691 0 1
24180: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24181: LD_VAR 0 3
24185: PUSH
24186: LD_INT 2
24188: ARRAY
24189: PUSH
24190: LD_INT 0
24192: EQUAL
24193: IFFALSE 24197
// exit ;
24195: GO 25564
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24197: LD_ADDR_VAR 0 4
24201: PUSH
24202: LD_VAR 0 3
24206: PUSH
24207: LD_INT 6
24209: ARRAY
24210: PPUSH
24211: LD_INT 21
24213: PUSH
24214: LD_INT 3
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: PUSH
24221: LD_INT 50
24223: PUSH
24224: EMPTY
24225: LIST
24226: PUSH
24227: LD_INT 2
24229: PUSH
24230: LD_INT 30
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 30
24242: PUSH
24243: LD_INT 3
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: LIST
24254: PUSH
24255: EMPTY
24256: LIST
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 72
24264: ST_TO_ADDR
// if not fabs then
24265: LD_VAR 0 4
24269: NOT
24270: IFFALSE 24274
// exit ;
24272: GO 25564
// wait ( aiData [ 16 ] ) ;
24274: LD_VAR 0 3
24278: PUSH
24279: LD_INT 16
24281: ARRAY
24282: PPUSH
24283: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24287: LD_VAR 0 3
24291: PUSH
24292: LD_INT 17
24294: ARRAY
24295: PUSH
24296: LD_INT 1
24298: ARRAY
24299: IFFALSE 24471
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24301: LD_ADDR_VAR 0 5
24305: PUSH
24306: DOUBLE
24307: LD_INT 1
24309: DEC
24310: ST_TO_ADDR
24311: LD_VAR 0 3
24315: PUSH
24316: LD_INT 13
24318: ARRAY
24319: PUSH
24320: LD_VAR 0 3
24324: PPUSH
24325: CALL 19399 0 1
24329: MINUS
24330: PUSH
24331: FOR_TO
24332: IFFALSE 24469
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24334: LD_ADDR_VAR 0 6
24338: PUSH
24339: LD_VAR 0 3
24343: PUSH
24344: LD_INT 13
24346: ARRAY
24347: PUSH
24348: LD_VAR 0 5
24352: ARRAY
24353: PUSH
24354: LD_INT 4
24356: ARRAY
24357: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24358: LD_ADDR_VAR 0 7
24362: PUSH
24363: LD_VAR 0 6
24367: PUSH
24368: LD_INT 1
24370: PPUSH
24371: LD_VAR 0 6
24375: PPUSH
24376: CALL_OW 12
24380: ARRAY
24381: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24382: LD_VAR 0 4
24386: PUSH
24387: LD_INT 0
24389: PPUSH
24390: LD_VAR 0 4
24394: PPUSH
24395: CALL_OW 12
24399: ARRAY
24400: PPUSH
24401: LD_VAR 0 3
24405: PUSH
24406: LD_INT 13
24408: ARRAY
24409: PUSH
24410: LD_VAR 0 5
24414: ARRAY
24415: PUSH
24416: LD_INT 1
24418: ARRAY
24419: PPUSH
24420: LD_VAR 0 3
24424: PUSH
24425: LD_INT 13
24427: ARRAY
24428: PUSH
24429: LD_VAR 0 5
24433: ARRAY
24434: PUSH
24435: LD_INT 2
24437: ARRAY
24438: PPUSH
24439: LD_VAR 0 3
24443: PUSH
24444: LD_INT 13
24446: ARRAY
24447: PUSH
24448: LD_VAR 0 5
24452: ARRAY
24453: PUSH
24454: LD_INT 3
24456: ARRAY
24457: PPUSH
24458: LD_VAR 0 7
24462: PPUSH
24463: CALL_OW 185
// end ;
24467: GO 24331
24469: POP
24470: POP
// end ; if aiData [ 17 ] [ 3 ] then
24471: LD_VAR 0 3
24475: PUSH
24476: LD_INT 17
24478: ARRAY
24479: PUSH
24480: LD_INT 3
24482: ARRAY
24483: IFFALSE 25380
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24485: LD_INT 22
24487: PUSH
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 3
24495: ARRAY
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 2
24513: PUSH
24514: LD_INT 34
24516: PUSH
24517: LD_INT 12
24519: PUSH
24520: EMPTY
24521: LIST
24522: LIST
24523: PUSH
24524: LD_INT 34
24526: PUSH
24527: LD_INT 32
24529: PUSH
24530: EMPTY
24531: LIST
24532: LIST
24533: PUSH
24534: LD_INT 34
24536: PUSH
24537: LD_INT 51
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: LIST
24554: PPUSH
24555: CALL_OW 69
24559: PUSH
24560: LD_VAR 0 3
24564: PUSH
24565: LD_INT 15
24567: ARRAY
24568: PUSH
24569: LD_INT 1
24571: ARRAY
24572: LESS
24573: IFFALSE 24784
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24575: LD_ADDR_VAR 0 5
24579: PUSH
24580: DOUBLE
24581: LD_INT 1
24583: DEC
24584: ST_TO_ADDR
24585: LD_VAR 0 3
24589: PUSH
24590: LD_INT 15
24592: ARRAY
24593: PUSH
24594: LD_INT 1
24596: ARRAY
24597: PUSH
24598: LD_INT 22
24600: PUSH
24601: LD_VAR 0 3
24605: PUSH
24606: LD_INT 3
24608: ARRAY
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: LD_INT 21
24616: PUSH
24617: LD_INT 2
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 2
24626: PUSH
24627: LD_INT 34
24629: PUSH
24630: LD_INT 12
24632: PUSH
24633: EMPTY
24634: LIST
24635: LIST
24636: PUSH
24637: LD_INT 34
24639: PUSH
24640: LD_INT 32
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 34
24649: PUSH
24650: LD_INT 51
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: PPUSH
24668: CALL_OW 69
24672: MINUS
24673: PUSH
24674: FOR_TO
24675: IFFALSE 24782
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24677: LD_VAR 0 4
24681: PUSH
24682: LD_INT 0
24684: PPUSH
24685: LD_VAR 0 4
24689: PPUSH
24690: CALL_OW 12
24694: ARRAY
24695: PPUSH
24696: LD_INT 3
24698: PUSH
24699: EMPTY
24700: LIST
24701: PUSH
24702: LD_INT 13
24704: PUSH
24705: EMPTY
24706: LIST
24707: PUSH
24708: LD_INT 22
24710: PUSH
24711: EMPTY
24712: LIST
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: LIST
24718: PUSH
24719: LD_VAR 0 3
24723: PUSH
24724: LD_INT 4
24726: ARRAY
24727: ARRAY
24728: PUSH
24729: LD_INT 1
24731: ARRAY
24732: PPUSH
24733: LD_INT 1
24735: PPUSH
24736: LD_INT 2
24738: PPUSH
24739: LD_INT 12
24741: PUSH
24742: EMPTY
24743: LIST
24744: PUSH
24745: LD_INT 32
24747: PUSH
24748: EMPTY
24749: LIST
24750: PUSH
24751: LD_INT 51
24753: PUSH
24754: EMPTY
24755: LIST
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: LIST
24761: PUSH
24762: LD_VAR 0 3
24766: PUSH
24767: LD_INT 4
24769: ARRAY
24770: ARRAY
24771: PUSH
24772: LD_INT 1
24774: ARRAY
24775: PPUSH
24776: CALL_OW 185
24780: GO 24674
24782: POP
24783: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24784: LD_INT 22
24786: PUSH
24787: LD_VAR 0 3
24791: PUSH
24792: LD_INT 3
24794: ARRAY
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 21
24802: PUSH
24803: LD_INT 2
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 34
24815: PUSH
24816: LD_INT 13
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: PUSH
24823: LD_INT 34
24825: PUSH
24826: LD_EXP 124
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PUSH
24835: LD_INT 34
24837: PUSH
24838: LD_INT 52
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: PUSH
24851: EMPTY
24852: LIST
24853: LIST
24854: LIST
24855: PPUSH
24856: CALL_OW 69
24860: PUSH
24861: LD_VAR 0 3
24865: PUSH
24866: LD_INT 15
24868: ARRAY
24869: PUSH
24870: LD_INT 2
24872: ARRAY
24873: LESS
24874: IFFALSE 25089
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24876: LD_ADDR_VAR 0 5
24880: PUSH
24881: DOUBLE
24882: LD_INT 1
24884: DEC
24885: ST_TO_ADDR
24886: LD_VAR 0 3
24890: PUSH
24891: LD_INT 15
24893: ARRAY
24894: PUSH
24895: LD_INT 2
24897: ARRAY
24898: PUSH
24899: LD_INT 22
24901: PUSH
24902: LD_VAR 0 3
24906: PUSH
24907: LD_INT 3
24909: ARRAY
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 21
24917: PUSH
24918: LD_INT 2
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: LD_INT 34
24930: PUSH
24931: LD_INT 13
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 34
24940: PUSH
24941: LD_EXP 124
24945: PUSH
24946: EMPTY
24947: LIST
24948: LIST
24949: PUSH
24950: LD_INT 34
24952: PUSH
24953: LD_INT 52
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: LIST
24970: PPUSH
24971: CALL_OW 69
24975: MINUS
24976: PUSH
24977: FOR_TO
24978: IFFALSE 25087
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24980: LD_VAR 0 4
24984: PUSH
24985: LD_INT 0
24987: PPUSH
24988: LD_VAR 0 4
24992: PPUSH
24993: CALL_OW 12
24997: ARRAY
24998: PPUSH
24999: LD_INT 3
25001: PUSH
25002: EMPTY
25003: LIST
25004: PUSH
25005: LD_INT 13
25007: PUSH
25008: EMPTY
25009: LIST
25010: PUSH
25011: LD_INT 22
25013: PUSH
25014: EMPTY
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: PUSH
25022: LD_VAR 0 3
25026: PUSH
25027: LD_INT 4
25029: ARRAY
25030: ARRAY
25031: PUSH
25032: LD_INT 1
25034: ARRAY
25035: PPUSH
25036: LD_INT 1
25038: PPUSH
25039: LD_INT 2
25041: PPUSH
25042: LD_INT 13
25044: PUSH
25045: EMPTY
25046: LIST
25047: PUSH
25048: LD_EXP 124
25052: PUSH
25053: EMPTY
25054: LIST
25055: PUSH
25056: LD_INT 52
25058: PUSH
25059: EMPTY
25060: LIST
25061: PUSH
25062: EMPTY
25063: LIST
25064: LIST
25065: LIST
25066: PUSH
25067: LD_VAR 0 3
25071: PUSH
25072: LD_INT 4
25074: ARRAY
25075: ARRAY
25076: PUSH
25077: LD_INT 1
25079: ARRAY
25080: PPUSH
25081: CALL_OW 185
25085: GO 24977
25087: POP
25088: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25089: LD_INT 22
25091: PUSH
25092: LD_VAR 0 3
25096: PUSH
25097: LD_INT 3
25099: ARRAY
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: LD_INT 21
25107: PUSH
25108: LD_INT 2
25110: PUSH
25111: EMPTY
25112: LIST
25113: LIST
25114: PUSH
25115: LD_INT 2
25117: PUSH
25118: LD_INT 34
25120: PUSH
25121: LD_INT 14
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 14
25130: PUSH
25131: EMPTY
25132: LIST
25133: PUSH
25134: LD_INT 34
25136: PUSH
25137: LD_INT 53
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: EMPTY
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: LIST
25154: PPUSH
25155: CALL_OW 69
25159: PUSH
25160: LD_VAR 0 3
25164: PUSH
25165: LD_INT 15
25167: ARRAY
25168: PUSH
25169: LD_INT 3
25171: ARRAY
25172: LESS
25173: IFFALSE 25380
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25175: LD_ADDR_VAR 0 5
25179: PUSH
25180: DOUBLE
25181: LD_INT 1
25183: DEC
25184: ST_TO_ADDR
25185: LD_VAR 0 3
25189: PUSH
25190: LD_INT 15
25192: ARRAY
25193: PUSH
25194: LD_INT 3
25196: ARRAY
25197: PUSH
25198: LD_INT 22
25200: PUSH
25201: LD_VAR 0 3
25205: PUSH
25206: LD_INT 3
25208: ARRAY
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: PUSH
25214: LD_INT 21
25216: PUSH
25217: LD_INT 2
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: PUSH
25224: LD_INT 2
25226: PUSH
25227: LD_INT 34
25229: PUSH
25230: LD_INT 14
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: LD_INT 14
25239: PUSH
25240: EMPTY
25241: LIST
25242: PUSH
25243: LD_INT 34
25245: PUSH
25246: LD_INT 53
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: LIST
25263: PPUSH
25264: CALL_OW 69
25268: MINUS
25269: PUSH
25270: FOR_TO
25271: IFFALSE 25378
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25273: LD_VAR 0 4
25277: PUSH
25278: LD_INT 0
25280: PPUSH
25281: LD_VAR 0 4
25285: PPUSH
25286: CALL_OW 12
25290: ARRAY
25291: PPUSH
25292: LD_INT 4
25294: PUSH
25295: EMPTY
25296: LIST
25297: PUSH
25298: LD_INT 13
25300: PUSH
25301: EMPTY
25302: LIST
25303: PUSH
25304: LD_INT 24
25306: PUSH
25307: EMPTY
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: LD_VAR 0 3
25319: PUSH
25320: LD_INT 4
25322: ARRAY
25323: ARRAY
25324: PUSH
25325: LD_INT 1
25327: ARRAY
25328: PPUSH
25329: LD_INT 1
25331: PPUSH
25332: LD_INT 1
25334: PPUSH
25335: LD_INT 14
25337: PUSH
25338: EMPTY
25339: LIST
25340: PUSH
25341: LD_INT 14
25343: PUSH
25344: EMPTY
25345: LIST
25346: PUSH
25347: LD_INT 53
25349: PUSH
25350: EMPTY
25351: LIST
25352: PUSH
25353: EMPTY
25354: LIST
25355: LIST
25356: LIST
25357: PUSH
25358: LD_VAR 0 3
25362: PUSH
25363: LD_INT 4
25365: ARRAY
25366: ARRAY
25367: PUSH
25368: LD_INT 1
25370: ARRAY
25371: PPUSH
25372: CALL_OW 185
25376: GO 25270
25378: POP
25379: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25380: LD_VAR 0 3
25384: PUSH
25385: LD_INT 17
25387: ARRAY
25388: PUSH
25389: LD_INT 2
25391: ARRAY
25392: PUSH
25393: LD_VAR 0 3
25397: PPUSH
25398: CALL 19509 0 1
25402: MINUS
25403: IFFALSE 25564
// begin for i := 1 to aiData [ 14 ] do
25405: LD_ADDR_VAR 0 5
25409: PUSH
25410: DOUBLE
25411: LD_INT 1
25413: DEC
25414: ST_TO_ADDR
25415: LD_VAR 0 3
25419: PUSH
25420: LD_INT 14
25422: ARRAY
25423: PUSH
25424: FOR_TO
25425: IFFALSE 25562
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25427: LD_ADDR_VAR 0 6
25431: PUSH
25432: LD_VAR 0 3
25436: PUSH
25437: LD_INT 14
25439: ARRAY
25440: PUSH
25441: LD_VAR 0 5
25445: ARRAY
25446: PUSH
25447: LD_INT 4
25449: ARRAY
25450: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25451: LD_ADDR_VAR 0 7
25455: PUSH
25456: LD_VAR 0 6
25460: PUSH
25461: LD_INT 1
25463: PPUSH
25464: LD_VAR 0 6
25468: PPUSH
25469: CALL_OW 12
25473: ARRAY
25474: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25475: LD_VAR 0 4
25479: PUSH
25480: LD_INT 0
25482: PPUSH
25483: LD_VAR 0 4
25487: PPUSH
25488: CALL_OW 12
25492: ARRAY
25493: PPUSH
25494: LD_VAR 0 3
25498: PUSH
25499: LD_INT 14
25501: ARRAY
25502: PUSH
25503: LD_VAR 0 5
25507: ARRAY
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: PPUSH
25513: LD_VAR 0 3
25517: PUSH
25518: LD_INT 14
25520: ARRAY
25521: PUSH
25522: LD_VAR 0 5
25526: ARRAY
25527: PUSH
25528: LD_INT 2
25530: ARRAY
25531: PPUSH
25532: LD_VAR 0 3
25536: PUSH
25537: LD_INT 14
25539: ARRAY
25540: PUSH
25541: LD_VAR 0 5
25545: ARRAY
25546: PUSH
25547: LD_INT 3
25549: ARRAY
25550: PPUSH
25551: LD_VAR 0 7
25555: PPUSH
25556: CALL_OW 185
// end ;
25560: GO 25424
25562: POP
25563: POP
// end ; end ;
25564: LD_VAR 0 2
25568: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25569: LD_INT 0
25571: PPUSH
25572: PPUSH
25573: PPUSH
25574: PPUSH
25575: PPUSH
25576: PPUSH
25577: PPUSH
25578: PPUSH
25579: PPUSH
25580: PPUSH
25581: PPUSH
25582: PPUSH
25583: PPUSH
25584: PPUSH
// for unit in units do
25585: LD_ADDR_VAR 0 6
25589: PUSH
25590: LD_VAR 0 2
25594: PUSH
25595: FOR_IN
25596: IFFALSE 25612
// SetTag ( unit , 0 ) ;
25598: LD_VAR 0 6
25602: PPUSH
25603: LD_INT 0
25605: PPUSH
25606: CALL_OW 109
25610: GO 25595
25612: POP
25613: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25614: LD_ADDR_VAR 0 13
25618: PUSH
25619: LD_VAR 0 3
25623: PUSH
25624: LD_VAR 0 3
25628: ARRAY
25629: PUSH
25630: LD_INT 1
25632: ARRAY
25633: PUSH
25634: LD_VAR 0 3
25638: PUSH
25639: LD_VAR 0 3
25643: ARRAY
25644: PUSH
25645: LD_INT 2
25647: ARRAY
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25653: LD_ADDR_VAR 0 7
25657: PUSH
25658: LD_VAR 0 2
25662: PPUSH
25663: LD_INT 50
25665: PUSH
25666: EMPTY
25667: LIST
25668: PUSH
25669: LD_INT 2
25671: PUSH
25672: LD_INT 59
25674: PUSH
25675: EMPTY
25676: LIST
25677: PUSH
25678: LD_INT 25
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PUSH
25688: LD_INT 25
25690: PUSH
25691: LD_INT 8
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: LD_INT 21
25700: PUSH
25701: LD_INT 2
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PPUSH
25719: CALL_OW 72
25723: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25724: LD_ADDR_VAR 0 9
25728: PUSH
25729: LD_VAR 0 2
25733: PPUSH
25734: LD_INT 50
25736: PUSH
25737: EMPTY
25738: LIST
25739: PUSH
25740: LD_INT 25
25742: PUSH
25743: LD_INT 4
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PPUSH
25754: CALL_OW 72
25758: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25759: LD_ADDR_VAR 0 10
25763: PUSH
25764: LD_VAR 0 2
25768: PPUSH
25769: LD_INT 21
25771: PUSH
25772: LD_INT 1
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 3
25781: PUSH
25782: LD_INT 24
25784: PUSH
25785: LD_INT 1000
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PPUSH
25800: CALL_OW 72
25804: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25805: LD_ADDR_VAR 0 11
25809: PUSH
25810: LD_INT 21
25812: PPUSH
25813: CALL_OW 435
25817: ST_TO_ADDR
// for unit in attackUnits do
25818: LD_ADDR_VAR 0 6
25822: PUSH
25823: LD_VAR 0 7
25827: PUSH
25828: FOR_IN
25829: IFFALSE 26578
// begin if path then
25831: LD_VAR 0 3
25835: IFFALSE 26567
// begin i = 1 ;
25837: LD_ADDR_VAR 0 5
25841: PUSH
25842: LD_INT 1
25844: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25845: LD_ADDR_VAR 0 11
25849: PUSH
25850: LD_INT 21
25852: PPUSH
25853: CALL_OW 435
25857: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25858: LD_ADDR_VAR 0 14
25862: PUSH
25863: LD_INT 81
25865: PUSH
25866: LD_VAR 0 6
25870: PPUSH
25871: CALL_OW 255
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PPUSH
25880: CALL_OW 69
25884: PPUSH
25885: LD_VAR 0 6
25889: PPUSH
25890: CALL_OW 74
25894: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25895: LD_ADDR_VAR 0 15
25899: PUSH
25900: LD_VAR 0 11
25904: PPUSH
25905: LD_VAR 0 6
25909: PPUSH
25910: CALL_OW 250
25914: PPUSH
25915: LD_VAR 0 6
25919: PPUSH
25920: CALL_OW 251
25924: PPUSH
25925: CALL_OW 439
25929: ST_TO_ADDR
// if damageUnits and medics then
25930: LD_VAR 0 10
25934: PUSH
25935: LD_VAR 0 9
25939: AND
25940: IFFALSE 25962
// ComHeal ( medics , damageUnits [ 1 ] ) else
25942: LD_VAR 0 9
25946: PPUSH
25947: LD_VAR 0 10
25951: PUSH
25952: LD_INT 1
25954: ARRAY
25955: PPUSH
25956: CALL_OW 128
25960: GO 26005
// if medics then
25962: LD_VAR 0 9
25966: IFFALSE 26005
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
25968: LD_VAR 0 9
25972: PPUSH
25973: LD_VAR 0 7
25977: PUSH
25978: LD_INT 1
25980: ARRAY
25981: PPUSH
25982: CALL_OW 250
25986: PPUSH
25987: LD_VAR 0 7
25991: PUSH
25992: LD_INT 1
25994: ARRAY
25995: PPUSH
25996: CALL_OW 251
26000: PPUSH
26001: CALL_OW 111
// if not HasTask ( unit ) then
26005: LD_VAR 0 6
26009: PPUSH
26010: CALL_OW 314
26014: NOT
26015: IFFALSE 26254
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26017: LD_ADDR_VAR 0 15
26021: PUSH
26022: LD_VAR 0 11
26026: PPUSH
26027: LD_VAR 0 6
26031: PPUSH
26032: CALL_OW 250
26036: PPUSH
26037: LD_VAR 0 6
26041: PPUSH
26042: CALL_OW 251
26046: PPUSH
26047: CALL_OW 439
26051: ST_TO_ADDR
// if i > crates then
26052: LD_VAR 0 5
26056: PUSH
26057: LD_VAR 0 11
26061: GREATER
26062: IFFALSE 26072
// i = 1 ;
26064: LD_ADDR_VAR 0 5
26068: PUSH
26069: LD_INT 1
26071: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26072: LD_VAR 0 14
26076: PUSH
26077: LD_VAR 0 15
26081: AND
26082: IFFALSE 26197
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26084: LD_VAR 0 6
26088: PPUSH
26089: LD_VAR 0 14
26093: PPUSH
26094: CALL_OW 250
26098: PPUSH
26099: LD_VAR 0 14
26103: PPUSH
26104: CALL_OW 251
26108: PPUSH
26109: CALL_OW 297
26113: PUSH
26114: LD_VAR 0 6
26118: PPUSH
26119: LD_VAR 0 15
26123: PUSH
26124: LD_INT 1
26126: ARRAY
26127: PPUSH
26128: LD_VAR 0 15
26132: PUSH
26133: LD_INT 2
26135: ARRAY
26136: PPUSH
26137: CALL_OW 297
26141: LESS
26142: IFFALSE 26160
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26144: LD_VAR 0 7
26148: PPUSH
26149: LD_VAR 0 14
26153: PPUSH
26154: CALL_OW 115
26158: GO 26195
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26160: LD_VAR 0 7
26164: PPUSH
26165: LD_VAR 0 11
26169: PUSH
26170: LD_VAR 0 5
26174: ARRAY
26175: PPUSH
26176: LD_VAR 0 11
26180: PUSH
26181: LD_VAR 0 5
26185: PUSH
26186: LD_INT 1
26188: PLUS
26189: ARRAY
26190: PPUSH
26191: CALL_OW 116
// end else
26195: GO 26254
// if crates then
26197: LD_VAR 0 11
26201: IFFALSE 26240
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26203: LD_VAR 0 7
26207: PPUSH
26208: LD_VAR 0 11
26212: PUSH
26213: LD_VAR 0 5
26217: ARRAY
26218: PPUSH
26219: LD_VAR 0 11
26223: PUSH
26224: LD_VAR 0 5
26228: PUSH
26229: LD_INT 1
26231: PLUS
26232: ARRAY
26233: PPUSH
26234: CALL_OW 116
26238: GO 26254
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26240: LD_VAR 0 7
26244: PPUSH
26245: LD_VAR 0 14
26249: PPUSH
26250: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26254: LD_INT 35
26256: PPUSH
26257: CALL_OW 67
// if path then
26261: LD_VAR 0 3
26265: IFFALSE 26341
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26267: LD_ADDR_VAR 0 16
26271: PUSH
26272: LD_VAR 0 6
26276: PPUSH
26277: LD_VAR 0 3
26281: PPUSH
26282: CALL 26796 0 2
26286: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26287: LD_VAR 0 7
26291: PPUSH
26292: LD_VAR 0 16
26296: PUSH
26297: LD_INT 1
26299: ARRAY
26300: PPUSH
26301: LD_VAR 0 16
26305: PUSH
26306: LD_INT 2
26308: ARRAY
26309: PPUSH
26310: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26314: LD_VAR 0 1
26318: PPUSH
26319: LD_VAR 0 16
26323: PUSH
26324: LD_INT 1
26326: ARRAY
26327: PPUSH
26328: LD_VAR 0 16
26332: PUSH
26333: LD_INT 2
26335: ARRAY
26336: PPUSH
26337: CALL_OW 114
// end ; i = i + 2 ;
26341: LD_ADDR_VAR 0 5
26345: PUSH
26346: LD_VAR 0 5
26350: PUSH
26351: LD_INT 2
26353: PLUS
26354: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26355: LD_VAR 0 1
26359: PPUSH
26360: LD_VAR 0 16
26364: PUSH
26365: LD_INT 1
26367: ARRAY
26368: PPUSH
26369: LD_VAR 0 16
26373: PUSH
26374: LD_INT 2
26376: ARRAY
26377: PPUSH
26378: CALL_OW 297
26382: PUSH
26383: LD_INT 6
26385: LESSEQUAL
26386: IFFALSE 25845
// repeat wait ( 0 0$1 ) ;
26388: LD_INT 35
26390: PPUSH
26391: CALL_OW 67
// nearUnitsCounter = 0 ;
26395: LD_ADDR_VAR 0 12
26399: PUSH
26400: LD_INT 0
26402: ST_TO_ADDR
// for attackUnit in attackUnits do
26403: LD_ADDR_VAR 0 8
26407: PUSH
26408: LD_VAR 0 7
26412: PUSH
26413: FOR_IN
26414: IFFALSE 26452
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26416: LD_VAR 0 6
26420: PPUSH
26421: LD_VAR 0 1
26425: PPUSH
26426: CALL_OW 296
26430: PUSH
26431: LD_INT 7
26433: LESSEQUAL
26434: IFFALSE 26450
// nearUnitsCounter = nearUnitsCounter + 1 ;
26436: LD_ADDR_VAR 0 12
26440: PUSH
26441: LD_VAR 0 12
26445: PUSH
26446: LD_INT 1
26448: PLUS
26449: ST_TO_ADDR
26450: GO 26413
26452: POP
26453: POP
// until nearUnitsCounter = attackUnits ;
26454: LD_VAR 0 12
26458: PUSH
26459: LD_VAR 0 7
26463: EQUAL
26464: IFFALSE 26388
// for i := 1 to path do
26466: LD_ADDR_VAR 0 5
26470: PUSH
26471: DOUBLE
26472: LD_INT 1
26474: DEC
26475: ST_TO_ADDR
26476: LD_VAR 0 3
26480: PUSH
26481: FOR_TO
26482: IFFALSE 26565
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26484: LD_VAR 0 3
26488: PUSH
26489: LD_VAR 0 5
26493: ARRAY
26494: PUSH
26495: LD_INT 1
26497: ARRAY
26498: PUSH
26499: LD_VAR 0 16
26503: PUSH
26504: LD_INT 1
26506: ARRAY
26507: EQUAL
26508: PUSH
26509: LD_VAR 0 3
26513: PUSH
26514: LD_VAR 0 5
26518: ARRAY
26519: PUSH
26520: LD_INT 2
26522: ARRAY
26523: PUSH
26524: LD_VAR 0 16
26528: PUSH
26529: LD_INT 2
26531: ARRAY
26532: EQUAL
26533: AND
26534: IFFALSE 26563
// begin path = path diff [ path [ i ] ] ;
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_VAR 0 3
26545: PUSH
26546: LD_VAR 0 3
26550: PUSH
26551: LD_VAR 0 5
26555: ARRAY
26556: PUSH
26557: EMPTY
26558: LIST
26559: DIFF
26560: ST_TO_ADDR
// break ;
26561: GO 26565
// end ;
26563: GO 26481
26565: POP
26566: POP
// end ; if not path then
26567: LD_VAR 0 3
26571: NOT
26572: IFFALSE 26576
// break ;
26574: GO 26578
// end ;
26576: GO 25828
26578: POP
26579: POP
// repeat unitsReachPathEnd = 0 ;
26580: LD_ADDR_VAR 0 17
26584: PUSH
26585: LD_INT 0
26587: ST_TO_ADDR
// for attackUnit in attackUnits do
26588: LD_ADDR_VAR 0 8
26592: PUSH
26593: LD_VAR 0 7
26597: PUSH
26598: FOR_IN
26599: IFFALSE 26737
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26601: LD_VAR 0 8
26605: PPUSH
26606: LD_VAR 0 13
26610: PUSH
26611: LD_INT 1
26613: ARRAY
26614: PPUSH
26615: LD_VAR 0 13
26619: PUSH
26620: LD_INT 2
26622: ARRAY
26623: PPUSH
26624: CALL_OW 297
26628: PUSH
26629: LD_INT 7
26631: LESS
26632: NOT
26633: PUSH
26634: LD_VAR 0 8
26638: PPUSH
26639: CALL_OW 110
26643: PUSH
26644: LD_INT 0
26646: EQUAL
26647: AND
26648: IFFALSE 26679
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26650: LD_VAR 0 8
26654: PPUSH
26655: LD_VAR 0 13
26659: PUSH
26660: LD_INT 1
26662: ARRAY
26663: PPUSH
26664: LD_VAR 0 13
26668: PUSH
26669: LD_INT 2
26671: ARRAY
26672: PPUSH
26673: CALL_OW 111
26677: GO 26706
// if GetTag ( attackUnit ) = 0 then
26679: LD_VAR 0 8
26683: PPUSH
26684: CALL_OW 110
26688: PUSH
26689: LD_INT 0
26691: EQUAL
26692: IFFALSE 26706
// SetTag ( attackUnit , 1 ) ;
26694: LD_VAR 0 8
26698: PPUSH
26699: LD_INT 1
26701: PPUSH
26702: CALL_OW 109
// if GetTag ( unit ) = 1 then
26706: LD_VAR 0 6
26710: PPUSH
26711: CALL_OW 110
26715: PUSH
26716: LD_INT 1
26718: EQUAL
26719: IFFALSE 26735
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26721: LD_ADDR_VAR 0 17
26725: PUSH
26726: LD_VAR 0 17
26730: PUSH
26731: LD_INT 1
26733: PLUS
26734: ST_TO_ADDR
// end ;
26735: GO 26598
26737: POP
26738: POP
// wait ( 0 0$1 ) ;
26739: LD_INT 35
26741: PPUSH
26742: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26746: LD_VAR 0 17
26750: PUSH
26751: LD_VAR 0 7
26755: PUSH
26756: LD_INT 3
26758: MINUS
26759: GREATER
26760: IFFALSE 26580
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_INT 50
26769: PUSH
26770: EMPTY
26771: LIST
26772: PPUSH
26773: CALL_OW 72
26777: NOT
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 303
26788: OR
26789: IFFALSE 25653
// end ;
26791: LD_VAR 0 4
26795: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26796: LD_INT 0
26798: PPUSH
26799: PPUSH
26800: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26801: LD_ADDR_VAR 0 5
26805: PUSH
26806: LD_VAR 0 2
26810: PUSH
26811: LD_INT 1
26813: ARRAY
26814: PUSH
26815: LD_INT 1
26817: ARRAY
26818: PUSH
26819: LD_VAR 0 2
26823: PUSH
26824: LD_INT 1
26826: ARRAY
26827: PUSH
26828: LD_INT 2
26830: ARRAY
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: ST_TO_ADDR
// for i := 2 to path do
26836: LD_ADDR_VAR 0 4
26840: PUSH
26841: DOUBLE
26842: LD_INT 2
26844: DEC
26845: ST_TO_ADDR
26846: LD_VAR 0 2
26850: PUSH
26851: FOR_TO
26852: IFFALSE 26992
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26854: LD_VAR 0 1
26858: PPUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_VAR 0 4
26868: ARRAY
26869: PUSH
26870: LD_INT 1
26872: ARRAY
26873: PPUSH
26874: LD_VAR 0 2
26878: PUSH
26879: LD_VAR 0 4
26883: ARRAY
26884: PUSH
26885: LD_INT 2
26887: ARRAY
26888: PPUSH
26889: CALL_OW 297
26893: PUSH
26894: LD_VAR 0 1
26898: PPUSH
26899: LD_VAR 0 5
26903: PUSH
26904: LD_INT 1
26906: ARRAY
26907: PPUSH
26908: LD_VAR 0 5
26912: PUSH
26913: LD_INT 2
26915: ARRAY
26916: PPUSH
26917: CALL_OW 297
26921: LESS
26922: IFFALSE 26990
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26924: LD_ADDR_VAR 0 5
26928: PUSH
26929: LD_VAR 0 5
26933: PPUSH
26934: LD_INT 1
26936: PPUSH
26937: LD_VAR 0 2
26941: PUSH
26942: LD_VAR 0 4
26946: ARRAY
26947: PUSH
26948: LD_INT 1
26950: ARRAY
26951: PPUSH
26952: CALL_OW 1
26956: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
26957: LD_ADDR_VAR 0 5
26961: PUSH
26962: LD_VAR 0 5
26966: PPUSH
26967: LD_INT 2
26969: PPUSH
26970: LD_VAR 0 2
26974: PUSH
26975: LD_VAR 0 4
26979: ARRAY
26980: PUSH
26981: LD_INT 2
26983: ARRAY
26984: PPUSH
26985: CALL_OW 1
26989: ST_TO_ADDR
// end ; end ;
26990: GO 26851
26992: POP
26993: POP
// result = nearPosition ;
26994: LD_ADDR_VAR 0 3
26998: PUSH
26999: LD_VAR 0 5
27003: ST_TO_ADDR
// end ;
27004: LD_VAR 0 3
27008: RET
// function ForceResetTaskList ( unit ) ; begin
27009: LD_INT 0
27011: PPUSH
// if GetTaskList ( unit ) then
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 437
27021: IFFALSE 27057
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27023: LD_VAR 0 1
27027: PPUSH
27028: CALL_OW 437
27032: PUSH
27033: LD_INT 1
27035: ARRAY
27036: PUSH
27037: LD_INT 1
27039: ARRAY
27040: PUSH
27041: LD_STRING e
27043: EQUAL
27044: IFFALSE 27057
// SetTaskList ( unit , [ ] ) ;
27046: LD_VAR 0 1
27050: PPUSH
27051: EMPTY
27052: PPUSH
27053: CALL_OW 446
// end ;
27057: LD_VAR 0 2
27061: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27062: LD_INT 0
27064: PPUSH
// if IsInUnit ( unit ) then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 310
27074: IFFALSE 27085
// ComExitBuilding ( unit ) ;
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 122
// end ; end_of_file
27085: LD_VAR 0 2
27089: RET
// every 0 0$1 trigger enableCounter do
27090: LD_EXP 18
27094: IFFALSE 27131
27096: GO 27098
27098: DISABLE
// begin enable ;
27099: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27100: LD_ADDR_OWVAR 47
27104: PUSH
27105: LD_STRING #Am01-1
27107: PUSH
27108: LD_EXP 19
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27117: LD_ADDR_EXP 19
27121: PUSH
27122: LD_EXP 19
27126: PUSH
27127: LD_INT 35
27129: PLUS
27130: ST_TO_ADDR
// end ; end_of_file end_of_file
27131: END
// every 0 0$01 do var timer ;
27132: GO 27134
27134: DISABLE
27135: LD_INT 0
27137: PPUSH
// begin timer := 1 1$30 ;
27138: LD_ADDR_VAR 0 1
27142: PUSH
27143: LD_INT 3150
27145: ST_TO_ADDR
// repeat wait ( timer ) ;
27146: LD_VAR 0 1
27150: PPUSH
27151: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27155: LD_EXP 20
27159: PUSH
27160: LD_INT 6
27162: GREATEREQUAL
27163: PUSH
27164: LD_EXP 20
27168: PUSH
27169: LD_INT 12
27171: LESS
27172: AND
27173: IFFALSE 27189
// timer := timer + 0 0$3 ;
27175: LD_ADDR_VAR 0 1
27179: PUSH
27180: LD_VAR 0 1
27184: PUSH
27185: LD_INT 105
27187: PLUS
27188: ST_TO_ADDR
// if cratesSpawned >= 12 then
27189: LD_EXP 20
27193: PUSH
27194: LD_INT 12
27196: GREATEREQUAL
27197: IFFALSE 27213
// timer := timer + 0 0$9 ;
27199: LD_ADDR_VAR 0 1
27203: PUSH
27204: LD_VAR 0 1
27208: PUSH
27209: LD_INT 315
27211: PLUS
27212: ST_TO_ADDR
// if timer > 3 3$00 then
27213: LD_VAR 0 1
27217: PUSH
27218: LD_INT 6300
27220: GREATER
27221: IFFALSE 27231
// timer := 0 0$50 ;
27223: LD_ADDR_VAR 0 1
27227: PUSH
27228: LD_INT 1750
27230: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27231: LD_INT 3
27233: PPUSH
27234: LD_INT 5
27236: PPUSH
27237: CALL_OW 12
27241: PPUSH
27242: LD_INT 22
27244: PPUSH
27245: LD_INT 1
27247: PPUSH
27248: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27252: LD_ADDR_EXP 20
27256: PUSH
27257: LD_EXP 20
27261: PUSH
27262: LD_INT 1
27264: PLUS
27265: ST_TO_ADDR
// until false ;
27266: LD_INT 0
27268: IFFALSE 27146
// end ; end_of_file
27270: PPOPN 1
27272: END
// export function Nef_PrepareNature ; var i , un ; begin
27273: LD_INT 0
27275: PPUSH
27276: PPUSH
27277: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27278: LD_ADDR_VAR 0 2
27282: PUSH
27283: DOUBLE
27284: LD_INT 1
27286: DEC
27287: ST_TO_ADDR
27288: LD_EXP 21
27292: PUSH
27293: LD_INT 1
27295: ARRAY
27296: PUSH
27297: FOR_TO
27298: IFFALSE 27408
// begin uc_side = 0 ;
27300: LD_ADDR_OWVAR 20
27304: PUSH
27305: LD_INT 0
27307: ST_TO_ADDR
// uc_nation = nation_nature ;
27308: LD_ADDR_OWVAR 21
27312: PUSH
27313: LD_INT 0
27315: ST_TO_ADDR
// hc_class = class_apeman ;
27316: LD_ADDR_OWVAR 28
27320: PUSH
27321: LD_INT 12
27323: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27324: LD_ADDR_OWVAR 31
27328: PUSH
27329: LD_EXP 22
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: PUSH
27338: LD_EXP 22
27342: PUSH
27343: LD_INT 2
27345: ARRAY
27346: PUSH
27347: LD_EXP 22
27351: PUSH
27352: LD_INT 3
27354: ARRAY
27355: PUSH
27356: LD_EXP 22
27360: PUSH
27361: LD_INT 4
27363: ARRAY
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27371: LD_ADDR_OWVAR 35
27375: PUSH
27376: LD_EXP 23
27380: ST_TO_ADDR
// un = CreateHuman ;
27381: LD_ADDR_VAR 0 3
27385: PUSH
27386: CALL_OW 44
27390: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27391: LD_VAR 0 3
27395: PPUSH
27396: LD_INT 23
27398: PPUSH
27399: LD_INT 0
27401: PPUSH
27402: CALL_OW 49
// end ;
27406: GO 27297
27408: POP
27409: POP
// for i := 1 to animalsAmount [ 2 ] do
27410: LD_ADDR_VAR 0 2
27414: PUSH
27415: DOUBLE
27416: LD_INT 1
27418: DEC
27419: ST_TO_ADDR
27420: LD_EXP 21
27424: PUSH
27425: LD_INT 2
27427: ARRAY
27428: PUSH
27429: FOR_TO
27430: IFFALSE 27540
// begin uc_side = 0 ;
27432: LD_ADDR_OWVAR 20
27436: PUSH
27437: LD_INT 0
27439: ST_TO_ADDR
// uc_nation = nation_nature ;
27440: LD_ADDR_OWVAR 21
27444: PUSH
27445: LD_INT 0
27447: ST_TO_ADDR
// hc_class = class_phororhacos ;
27448: LD_ADDR_OWVAR 28
27452: PUSH
27453: LD_INT 18
27455: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27456: LD_ADDR_OWVAR 31
27460: PUSH
27461: LD_EXP 22
27465: PUSH
27466: LD_INT 1
27468: ARRAY
27469: PUSH
27470: LD_EXP 22
27474: PUSH
27475: LD_INT 2
27477: ARRAY
27478: PUSH
27479: LD_EXP 22
27483: PUSH
27484: LD_INT 3
27486: ARRAY
27487: PUSH
27488: LD_EXP 22
27492: PUSH
27493: LD_INT 4
27495: ARRAY
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27503: LD_ADDR_OWVAR 35
27507: PUSH
27508: LD_EXP 23
27512: ST_TO_ADDR
// un = CreateHuman ;
27513: LD_ADDR_VAR 0 3
27517: PUSH
27518: CALL_OW 44
27522: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27523: LD_VAR 0 3
27527: PPUSH
27528: LD_INT 23
27530: PPUSH
27531: LD_INT 0
27533: PPUSH
27534: CALL_OW 49
// end ;
27538: GO 27429
27540: POP
27541: POP
// for i := 1 to animalsAmount [ 3 ] do
27542: LD_ADDR_VAR 0 2
27546: PUSH
27547: DOUBLE
27548: LD_INT 1
27550: DEC
27551: ST_TO_ADDR
27552: LD_EXP 21
27556: PUSH
27557: LD_INT 3
27559: ARRAY
27560: PUSH
27561: FOR_TO
27562: IFFALSE 27672
// begin uc_side = 0 ;
27564: LD_ADDR_OWVAR 20
27568: PUSH
27569: LD_INT 0
27571: ST_TO_ADDR
// uc_nation = nation_nature ;
27572: LD_ADDR_OWVAR 21
27576: PUSH
27577: LD_INT 0
27579: ST_TO_ADDR
// hc_class = class_tiger ;
27580: LD_ADDR_OWVAR 28
27584: PUSH
27585: LD_INT 14
27587: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27588: LD_ADDR_OWVAR 31
27592: PUSH
27593: LD_EXP 22
27597: PUSH
27598: LD_INT 1
27600: ARRAY
27601: PUSH
27602: LD_EXP 22
27606: PUSH
27607: LD_INT 2
27609: ARRAY
27610: PUSH
27611: LD_EXP 22
27615: PUSH
27616: LD_INT 3
27618: ARRAY
27619: PUSH
27620: LD_EXP 22
27624: PUSH
27625: LD_INT 4
27627: ARRAY
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27635: LD_ADDR_OWVAR 35
27639: PUSH
27640: LD_EXP 23
27644: ST_TO_ADDR
// un = CreateHuman ;
27645: LD_ADDR_VAR 0 3
27649: PUSH
27650: CALL_OW 44
27654: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27655: LD_VAR 0 3
27659: PPUSH
27660: LD_INT 23
27662: PPUSH
27663: LD_INT 0
27665: PPUSH
27666: CALL_OW 49
// end ;
27670: GO 27561
27672: POP
27673: POP
// for i := 1 to animalsAmount [ 4 ] do
27674: LD_ADDR_VAR 0 2
27678: PUSH
27679: DOUBLE
27680: LD_INT 1
27682: DEC
27683: ST_TO_ADDR
27684: LD_EXP 21
27688: PUSH
27689: LD_INT 4
27691: ARRAY
27692: PUSH
27693: FOR_TO
27694: IFFALSE 27804
// begin uc_side = 0 ;
27696: LD_ADDR_OWVAR 20
27700: PUSH
27701: LD_INT 0
27703: ST_TO_ADDR
// uc_nation = nation_nature ;
27704: LD_ADDR_OWVAR 21
27708: PUSH
27709: LD_INT 0
27711: ST_TO_ADDR
// hc_class = 21 ;
27712: LD_ADDR_OWVAR 28
27716: PUSH
27717: LD_INT 21
27719: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27720: LD_ADDR_OWVAR 31
27724: PUSH
27725: LD_EXP 22
27729: PUSH
27730: LD_INT 1
27732: ARRAY
27733: PUSH
27734: LD_EXP 22
27738: PUSH
27739: LD_INT 2
27741: ARRAY
27742: PUSH
27743: LD_EXP 22
27747: PUSH
27748: LD_INT 3
27750: ARRAY
27751: PUSH
27752: LD_EXP 22
27756: PUSH
27757: LD_INT 4
27759: ARRAY
27760: PUSH
27761: EMPTY
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27767: LD_ADDR_OWVAR 35
27771: PUSH
27772: LD_EXP 23
27776: ST_TO_ADDR
// un = CreateHuman ;
27777: LD_ADDR_VAR 0 3
27781: PUSH
27782: CALL_OW 44
27786: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27787: LD_VAR 0 3
27791: PPUSH
27792: LD_INT 23
27794: PPUSH
27795: LD_INT 0
27797: PPUSH
27798: CALL_OW 49
// end ;
27802: GO 27693
27804: POP
27805: POP
// for i := 1 to animalsAmount [ 5 ] do
27806: LD_ADDR_VAR 0 2
27810: PUSH
27811: DOUBLE
27812: LD_INT 1
27814: DEC
27815: ST_TO_ADDR
27816: LD_EXP 21
27820: PUSH
27821: LD_INT 5
27823: ARRAY
27824: PUSH
27825: FOR_TO
27826: IFFALSE 27887
// begin uc_side = 0 ;
27828: LD_ADDR_OWVAR 20
27832: PUSH
27833: LD_INT 0
27835: ST_TO_ADDR
// uc_nation = nation_nature ;
27836: LD_ADDR_OWVAR 21
27840: PUSH
27841: LD_INT 0
27843: ST_TO_ADDR
// vc_chassis := 31 ;
27844: LD_ADDR_OWVAR 37
27848: PUSH
27849: LD_INT 31
27851: ST_TO_ADDR
// vc_control := control_rider ;
27852: LD_ADDR_OWVAR 38
27856: PUSH
27857: LD_INT 4
27859: ST_TO_ADDR
// un := CreateVehicle ;
27860: LD_ADDR_VAR 0 3
27864: PUSH
27865: CALL_OW 45
27869: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27870: LD_VAR 0 3
27874: PPUSH
27875: LD_INT 23
27877: PPUSH
27878: LD_INT 0
27880: PPUSH
27881: CALL_OW 49
// end ;
27885: GO 27825
27887: POP
27888: POP
// end ; end_of_file
27889: LD_VAR 0 1
27893: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
27894: LD_VAR 0 2
27898: PUSH
27899: LD_INT 100
27901: EQUAL
27902: IFFALSE 28851
// begin if not StreamModeActive then
27904: LD_EXP 63
27908: NOT
27909: IFFALSE 27919
// StreamModeActive := true ;
27911: LD_ADDR_EXP 63
27915: PUSH
27916: LD_INT 1
27918: ST_TO_ADDR
// if p3 = 0 then
27919: LD_VAR 0 3
27923: PUSH
27924: LD_INT 0
27926: EQUAL
27927: IFFALSE 27933
// InitStreamMode ;
27929: CALL 29009 0 0
// if p3 = 1 then
27933: LD_VAR 0 3
27937: PUSH
27938: LD_INT 1
27940: EQUAL
27941: IFFALSE 27951
// sRocket := true ;
27943: LD_ADDR_EXP 68
27947: PUSH
27948: LD_INT 1
27950: ST_TO_ADDR
// if p3 = 2 then
27951: LD_VAR 0 3
27955: PUSH
27956: LD_INT 2
27958: EQUAL
27959: IFFALSE 27969
// sSpeed := true ;
27961: LD_ADDR_EXP 67
27965: PUSH
27966: LD_INT 1
27968: ST_TO_ADDR
// if p3 = 3 then
27969: LD_VAR 0 3
27973: PUSH
27974: LD_INT 3
27976: EQUAL
27977: IFFALSE 27987
// sEngine := true ;
27979: LD_ADDR_EXP 69
27983: PUSH
27984: LD_INT 1
27986: ST_TO_ADDR
// if p3 = 4 then
27987: LD_VAR 0 3
27991: PUSH
27992: LD_INT 4
27994: EQUAL
27995: IFFALSE 28005
// sSpec := true ;
27997: LD_ADDR_EXP 66
28001: PUSH
28002: LD_INT 1
28004: ST_TO_ADDR
// if p3 = 5 then
28005: LD_VAR 0 3
28009: PUSH
28010: LD_INT 5
28012: EQUAL
28013: IFFALSE 28023
// sLevel := true ;
28015: LD_ADDR_EXP 70
28019: PUSH
28020: LD_INT 1
28022: ST_TO_ADDR
// if p3 = 6 then
28023: LD_VAR 0 3
28027: PUSH
28028: LD_INT 6
28030: EQUAL
28031: IFFALSE 28041
// sArmoury := true ;
28033: LD_ADDR_EXP 71
28037: PUSH
28038: LD_INT 1
28040: ST_TO_ADDR
// if p3 = 7 then
28041: LD_VAR 0 3
28045: PUSH
28046: LD_INT 7
28048: EQUAL
28049: IFFALSE 28059
// sRadar := true ;
28051: LD_ADDR_EXP 72
28055: PUSH
28056: LD_INT 1
28058: ST_TO_ADDR
// if p3 = 8 then
28059: LD_VAR 0 3
28063: PUSH
28064: LD_INT 8
28066: EQUAL
28067: IFFALSE 28077
// sBunker := true ;
28069: LD_ADDR_EXP 73
28073: PUSH
28074: LD_INT 1
28076: ST_TO_ADDR
// if p3 = 9 then
28077: LD_VAR 0 3
28081: PUSH
28082: LD_INT 9
28084: EQUAL
28085: IFFALSE 28095
// sHack := true ;
28087: LD_ADDR_EXP 74
28091: PUSH
28092: LD_INT 1
28094: ST_TO_ADDR
// if p3 = 10 then
28095: LD_VAR 0 3
28099: PUSH
28100: LD_INT 10
28102: EQUAL
28103: IFFALSE 28113
// sFire := true ;
28105: LD_ADDR_EXP 75
28109: PUSH
28110: LD_INT 1
28112: ST_TO_ADDR
// if p3 = 11 then
28113: LD_VAR 0 3
28117: PUSH
28118: LD_INT 11
28120: EQUAL
28121: IFFALSE 28131
// sRefresh := true ;
28123: LD_ADDR_EXP 76
28127: PUSH
28128: LD_INT 1
28130: ST_TO_ADDR
// if p3 = 12 then
28131: LD_VAR 0 3
28135: PUSH
28136: LD_INT 12
28138: EQUAL
28139: IFFALSE 28149
// sExp := true ;
28141: LD_ADDR_EXP 77
28145: PUSH
28146: LD_INT 1
28148: ST_TO_ADDR
// if p3 = 13 then
28149: LD_VAR 0 3
28153: PUSH
28154: LD_INT 13
28156: EQUAL
28157: IFFALSE 28167
// sDepot := true ;
28159: LD_ADDR_EXP 78
28163: PUSH
28164: LD_INT 1
28166: ST_TO_ADDR
// if p3 = 14 then
28167: LD_VAR 0 3
28171: PUSH
28172: LD_INT 14
28174: EQUAL
28175: IFFALSE 28185
// sFlag := true ;
28177: LD_ADDR_EXP 79
28181: PUSH
28182: LD_INT 1
28184: ST_TO_ADDR
// if p3 = 15 then
28185: LD_VAR 0 3
28189: PUSH
28190: LD_INT 15
28192: EQUAL
28193: IFFALSE 28203
// sKamikadze := true ;
28195: LD_ADDR_EXP 87
28199: PUSH
28200: LD_INT 1
28202: ST_TO_ADDR
// if p3 = 16 then
28203: LD_VAR 0 3
28207: PUSH
28208: LD_INT 16
28210: EQUAL
28211: IFFALSE 28221
// sTroll := true ;
28213: LD_ADDR_EXP 88
28217: PUSH
28218: LD_INT 1
28220: ST_TO_ADDR
// if p3 = 17 then
28221: LD_VAR 0 3
28225: PUSH
28226: LD_INT 17
28228: EQUAL
28229: IFFALSE 28239
// sSlow := true ;
28231: LD_ADDR_EXP 89
28235: PUSH
28236: LD_INT 1
28238: ST_TO_ADDR
// if p3 = 18 then
28239: LD_VAR 0 3
28243: PUSH
28244: LD_INT 18
28246: EQUAL
28247: IFFALSE 28257
// sLack := true ;
28249: LD_ADDR_EXP 90
28253: PUSH
28254: LD_INT 1
28256: ST_TO_ADDR
// if p3 = 19 then
28257: LD_VAR 0 3
28261: PUSH
28262: LD_INT 19
28264: EQUAL
28265: IFFALSE 28275
// sTank := true ;
28267: LD_ADDR_EXP 92
28271: PUSH
28272: LD_INT 1
28274: ST_TO_ADDR
// if p3 = 20 then
28275: LD_VAR 0 3
28279: PUSH
28280: LD_INT 20
28282: EQUAL
28283: IFFALSE 28293
// sRemote := true ;
28285: LD_ADDR_EXP 93
28289: PUSH
28290: LD_INT 1
28292: ST_TO_ADDR
// if p3 = 21 then
28293: LD_VAR 0 3
28297: PUSH
28298: LD_INT 21
28300: EQUAL
28301: IFFALSE 28311
// sPowell := true ;
28303: LD_ADDR_EXP 94
28307: PUSH
28308: LD_INT 1
28310: ST_TO_ADDR
// if p3 = 22 then
28311: LD_VAR 0 3
28315: PUSH
28316: LD_INT 22
28318: EQUAL
28319: IFFALSE 28329
// sTeleport := true ;
28321: LD_ADDR_EXP 97
28325: PUSH
28326: LD_INT 1
28328: ST_TO_ADDR
// if p3 = 23 then
28329: LD_VAR 0 3
28333: PUSH
28334: LD_INT 23
28336: EQUAL
28337: IFFALSE 28347
// sOilTower := true ;
28339: LD_ADDR_EXP 99
28343: PUSH
28344: LD_INT 1
28346: ST_TO_ADDR
// if p3 = 24 then
28347: LD_VAR 0 3
28351: PUSH
28352: LD_INT 24
28354: EQUAL
28355: IFFALSE 28365
// sShovel := true ;
28357: LD_ADDR_EXP 100
28361: PUSH
28362: LD_INT 1
28364: ST_TO_ADDR
// if p3 = 25 then
28365: LD_VAR 0 3
28369: PUSH
28370: LD_INT 25
28372: EQUAL
28373: IFFALSE 28383
// sSheik := true ;
28375: LD_ADDR_EXP 101
28379: PUSH
28380: LD_INT 1
28382: ST_TO_ADDR
// if p3 = 26 then
28383: LD_VAR 0 3
28387: PUSH
28388: LD_INT 26
28390: EQUAL
28391: IFFALSE 28401
// sEarthquake := true ;
28393: LD_ADDR_EXP 103
28397: PUSH
28398: LD_INT 1
28400: ST_TO_ADDR
// if p3 = 27 then
28401: LD_VAR 0 3
28405: PUSH
28406: LD_INT 27
28408: EQUAL
28409: IFFALSE 28419
// sAI := true ;
28411: LD_ADDR_EXP 104
28415: PUSH
28416: LD_INT 1
28418: ST_TO_ADDR
// if p3 = 28 then
28419: LD_VAR 0 3
28423: PUSH
28424: LD_INT 28
28426: EQUAL
28427: IFFALSE 28437
// sCargo := true ;
28429: LD_ADDR_EXP 107
28433: PUSH
28434: LD_INT 1
28436: ST_TO_ADDR
// if p3 = 29 then
28437: LD_VAR 0 3
28441: PUSH
28442: LD_INT 29
28444: EQUAL
28445: IFFALSE 28455
// sDLaser := true ;
28447: LD_ADDR_EXP 108
28451: PUSH
28452: LD_INT 1
28454: ST_TO_ADDR
// if p3 = 30 then
28455: LD_VAR 0 3
28459: PUSH
28460: LD_INT 30
28462: EQUAL
28463: IFFALSE 28473
// sExchange := true ;
28465: LD_ADDR_EXP 109
28469: PUSH
28470: LD_INT 1
28472: ST_TO_ADDR
// if p3 = 31 then
28473: LD_VAR 0 3
28477: PUSH
28478: LD_INT 31
28480: EQUAL
28481: IFFALSE 28491
// sFac := true ;
28483: LD_ADDR_EXP 110
28487: PUSH
28488: LD_INT 1
28490: ST_TO_ADDR
// if p3 = 32 then
28491: LD_VAR 0 3
28495: PUSH
28496: LD_INT 32
28498: EQUAL
28499: IFFALSE 28509
// sPower := true ;
28501: LD_ADDR_EXP 111
28505: PUSH
28506: LD_INT 1
28508: ST_TO_ADDR
// if p3 = 33 then
28509: LD_VAR 0 3
28513: PUSH
28514: LD_INT 33
28516: EQUAL
28517: IFFALSE 28527
// sRandom := true ;
28519: LD_ADDR_EXP 112
28523: PUSH
28524: LD_INT 1
28526: ST_TO_ADDR
// if p3 = 34 then
28527: LD_VAR 0 3
28531: PUSH
28532: LD_INT 34
28534: EQUAL
28535: IFFALSE 28545
// sShield := true ;
28537: LD_ADDR_EXP 113
28541: PUSH
28542: LD_INT 1
28544: ST_TO_ADDR
// if p3 = 35 then
28545: LD_VAR 0 3
28549: PUSH
28550: LD_INT 35
28552: EQUAL
28553: IFFALSE 28563
// sTime := true ;
28555: LD_ADDR_EXP 114
28559: PUSH
28560: LD_INT 1
28562: ST_TO_ADDR
// if p3 = 36 then
28563: LD_VAR 0 3
28567: PUSH
28568: LD_INT 36
28570: EQUAL
28571: IFFALSE 28581
// sTools := true ;
28573: LD_ADDR_EXP 115
28577: PUSH
28578: LD_INT 1
28580: ST_TO_ADDR
// if p3 = 101 then
28581: LD_VAR 0 3
28585: PUSH
28586: LD_INT 101
28588: EQUAL
28589: IFFALSE 28599
// sSold := true ;
28591: LD_ADDR_EXP 80
28595: PUSH
28596: LD_INT 1
28598: ST_TO_ADDR
// if p3 = 102 then
28599: LD_VAR 0 3
28603: PUSH
28604: LD_INT 102
28606: EQUAL
28607: IFFALSE 28617
// sDiff := true ;
28609: LD_ADDR_EXP 81
28613: PUSH
28614: LD_INT 1
28616: ST_TO_ADDR
// if p3 = 103 then
28617: LD_VAR 0 3
28621: PUSH
28622: LD_INT 103
28624: EQUAL
28625: IFFALSE 28635
// sFog := true ;
28627: LD_ADDR_EXP 84
28631: PUSH
28632: LD_INT 1
28634: ST_TO_ADDR
// if p3 = 104 then
28635: LD_VAR 0 3
28639: PUSH
28640: LD_INT 104
28642: EQUAL
28643: IFFALSE 28653
// sReset := true ;
28645: LD_ADDR_EXP 85
28649: PUSH
28650: LD_INT 1
28652: ST_TO_ADDR
// if p3 = 105 then
28653: LD_VAR 0 3
28657: PUSH
28658: LD_INT 105
28660: EQUAL
28661: IFFALSE 28671
// sSun := true ;
28663: LD_ADDR_EXP 86
28667: PUSH
28668: LD_INT 1
28670: ST_TO_ADDR
// if p3 = 106 then
28671: LD_VAR 0 3
28675: PUSH
28676: LD_INT 106
28678: EQUAL
28679: IFFALSE 28689
// sTiger := true ;
28681: LD_ADDR_EXP 82
28685: PUSH
28686: LD_INT 1
28688: ST_TO_ADDR
// if p3 = 107 then
28689: LD_VAR 0 3
28693: PUSH
28694: LD_INT 107
28696: EQUAL
28697: IFFALSE 28707
// sBomb := true ;
28699: LD_ADDR_EXP 83
28703: PUSH
28704: LD_INT 1
28706: ST_TO_ADDR
// if p3 = 108 then
28707: LD_VAR 0 3
28711: PUSH
28712: LD_INT 108
28714: EQUAL
28715: IFFALSE 28725
// sWound := true ;
28717: LD_ADDR_EXP 91
28721: PUSH
28722: LD_INT 1
28724: ST_TO_ADDR
// if p3 = 109 then
28725: LD_VAR 0 3
28729: PUSH
28730: LD_INT 109
28732: EQUAL
28733: IFFALSE 28743
// sBetray := true ;
28735: LD_ADDR_EXP 95
28739: PUSH
28740: LD_INT 1
28742: ST_TO_ADDR
// if p3 = 110 then
28743: LD_VAR 0 3
28747: PUSH
28748: LD_INT 110
28750: EQUAL
28751: IFFALSE 28761
// sContamin := true ;
28753: LD_ADDR_EXP 96
28757: PUSH
28758: LD_INT 1
28760: ST_TO_ADDR
// if p3 = 111 then
28761: LD_VAR 0 3
28765: PUSH
28766: LD_INT 111
28768: EQUAL
28769: IFFALSE 28779
// sOil := true ;
28771: LD_ADDR_EXP 98
28775: PUSH
28776: LD_INT 1
28778: ST_TO_ADDR
// if p3 = 112 then
28779: LD_VAR 0 3
28783: PUSH
28784: LD_INT 112
28786: EQUAL
28787: IFFALSE 28797
// sStu := true ;
28789: LD_ADDR_EXP 102
28793: PUSH
28794: LD_INT 1
28796: ST_TO_ADDR
// if p3 = 113 then
28797: LD_VAR 0 3
28801: PUSH
28802: LD_INT 113
28804: EQUAL
28805: IFFALSE 28815
// sBazooka := true ;
28807: LD_ADDR_EXP 105
28811: PUSH
28812: LD_INT 1
28814: ST_TO_ADDR
// if p3 = 114 then
28815: LD_VAR 0 3
28819: PUSH
28820: LD_INT 114
28822: EQUAL
28823: IFFALSE 28833
// sMortar := true ;
28825: LD_ADDR_EXP 106
28829: PUSH
28830: LD_INT 1
28832: ST_TO_ADDR
// if p3 = 115 then
28833: LD_VAR 0 3
28837: PUSH
28838: LD_INT 115
28840: EQUAL
28841: IFFALSE 28851
// sRanger := true ;
28843: LD_ADDR_EXP 116
28847: PUSH
28848: LD_INT 1
28850: ST_TO_ADDR
// end ; if p2 = 101 then
28851: LD_VAR 0 2
28855: PUSH
28856: LD_INT 101
28858: EQUAL
28859: IFFALSE 28987
// begin case p3 of 1 :
28861: LD_VAR 0 3
28865: PUSH
28866: LD_INT 1
28868: DOUBLE
28869: EQUAL
28870: IFTRUE 28874
28872: GO 28881
28874: POP
// hHackUnlimitedResources ; 2 :
28875: CALL 40022 0 0
28879: GO 28987
28881: LD_INT 2
28883: DOUBLE
28884: EQUAL
28885: IFTRUE 28889
28887: GO 28896
28889: POP
// hHackSetLevel10 ; 3 :
28890: CALL 40155 0 0
28894: GO 28987
28896: LD_INT 3
28898: DOUBLE
28899: EQUAL
28900: IFTRUE 28904
28902: GO 28911
28904: POP
// hHackSetLevel10YourUnits ; 4 :
28905: CALL 40240 0 0
28909: GO 28987
28911: LD_INT 4
28913: DOUBLE
28914: EQUAL
28915: IFTRUE 28919
28917: GO 28926
28919: POP
// hHackInvincible ; 5 :
28920: CALL 40688 0 0
28924: GO 28987
28926: LD_INT 5
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28941
28934: POP
// hHackInvisible ; 6 :
28935: CALL 40799 0 0
28939: GO 28987
28941: LD_INT 6
28943: DOUBLE
28944: EQUAL
28945: IFTRUE 28949
28947: GO 28956
28949: POP
// hHackChangeYourSide ; 7 :
28950: CALL 40856 0 0
28954: GO 28987
28956: LD_INT 7
28958: DOUBLE
28959: EQUAL
28960: IFTRUE 28964
28962: GO 28971
28964: POP
// hHackChangeUnitSide ; 8 :
28965: CALL 40898 0 0
28969: GO 28987
28971: LD_INT 8
28973: DOUBLE
28974: EQUAL
28975: IFTRUE 28979
28977: GO 28986
28979: POP
// hHackFog ; end ;
28980: CALL 40999 0 0
28984: GO 28987
28986: POP
// end ; end ;
28987: PPOPN 6
28989: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
28990: GO 28992
28992: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
28993: LD_STRING initStreamRollete();
28995: PPUSH
28996: CALL_OW 559
// InitStreamMode ;
29000: CALL 29009 0 0
// DefineStreamItems ( ) ;
29004: CALL 29449 0 0
// end ;
29008: END
// function InitStreamMode ; begin
29009: LD_INT 0
29011: PPUSH
// streamModeActive := false ;
29012: LD_ADDR_EXP 63
29016: PUSH
29017: LD_INT 0
29019: ST_TO_ADDR
// normalCounter := 36 ;
29020: LD_ADDR_EXP 64
29024: PUSH
29025: LD_INT 36
29027: ST_TO_ADDR
// hardcoreCounter := 16 ;
29028: LD_ADDR_EXP 65
29032: PUSH
29033: LD_INT 16
29035: ST_TO_ADDR
// sRocket := false ;
29036: LD_ADDR_EXP 68
29040: PUSH
29041: LD_INT 0
29043: ST_TO_ADDR
// sSpeed := false ;
29044: LD_ADDR_EXP 67
29048: PUSH
29049: LD_INT 0
29051: ST_TO_ADDR
// sEngine := false ;
29052: LD_ADDR_EXP 69
29056: PUSH
29057: LD_INT 0
29059: ST_TO_ADDR
// sSpec := false ;
29060: LD_ADDR_EXP 66
29064: PUSH
29065: LD_INT 0
29067: ST_TO_ADDR
// sLevel := false ;
29068: LD_ADDR_EXP 70
29072: PUSH
29073: LD_INT 0
29075: ST_TO_ADDR
// sArmoury := false ;
29076: LD_ADDR_EXP 71
29080: PUSH
29081: LD_INT 0
29083: ST_TO_ADDR
// sRadar := false ;
29084: LD_ADDR_EXP 72
29088: PUSH
29089: LD_INT 0
29091: ST_TO_ADDR
// sBunker := false ;
29092: LD_ADDR_EXP 73
29096: PUSH
29097: LD_INT 0
29099: ST_TO_ADDR
// sHack := false ;
29100: LD_ADDR_EXP 74
29104: PUSH
29105: LD_INT 0
29107: ST_TO_ADDR
// sFire := false ;
29108: LD_ADDR_EXP 75
29112: PUSH
29113: LD_INT 0
29115: ST_TO_ADDR
// sRefresh := false ;
29116: LD_ADDR_EXP 76
29120: PUSH
29121: LD_INT 0
29123: ST_TO_ADDR
// sExp := false ;
29124: LD_ADDR_EXP 77
29128: PUSH
29129: LD_INT 0
29131: ST_TO_ADDR
// sDepot := false ;
29132: LD_ADDR_EXP 78
29136: PUSH
29137: LD_INT 0
29139: ST_TO_ADDR
// sFlag := false ;
29140: LD_ADDR_EXP 79
29144: PUSH
29145: LD_INT 0
29147: ST_TO_ADDR
// sKamikadze := false ;
29148: LD_ADDR_EXP 87
29152: PUSH
29153: LD_INT 0
29155: ST_TO_ADDR
// sTroll := false ;
29156: LD_ADDR_EXP 88
29160: PUSH
29161: LD_INT 0
29163: ST_TO_ADDR
// sSlow := false ;
29164: LD_ADDR_EXP 89
29168: PUSH
29169: LD_INT 0
29171: ST_TO_ADDR
// sLack := false ;
29172: LD_ADDR_EXP 90
29176: PUSH
29177: LD_INT 0
29179: ST_TO_ADDR
// sTank := false ;
29180: LD_ADDR_EXP 92
29184: PUSH
29185: LD_INT 0
29187: ST_TO_ADDR
// sRemote := false ;
29188: LD_ADDR_EXP 93
29192: PUSH
29193: LD_INT 0
29195: ST_TO_ADDR
// sPowell := false ;
29196: LD_ADDR_EXP 94
29200: PUSH
29201: LD_INT 0
29203: ST_TO_ADDR
// sTeleport := false ;
29204: LD_ADDR_EXP 97
29208: PUSH
29209: LD_INT 0
29211: ST_TO_ADDR
// sOilTower := false ;
29212: LD_ADDR_EXP 99
29216: PUSH
29217: LD_INT 0
29219: ST_TO_ADDR
// sShovel := false ;
29220: LD_ADDR_EXP 100
29224: PUSH
29225: LD_INT 0
29227: ST_TO_ADDR
// sSheik := false ;
29228: LD_ADDR_EXP 101
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// sEarthquake := false ;
29236: LD_ADDR_EXP 103
29240: PUSH
29241: LD_INT 0
29243: ST_TO_ADDR
// sAI := false ;
29244: LD_ADDR_EXP 104
29248: PUSH
29249: LD_INT 0
29251: ST_TO_ADDR
// sCargo := false ;
29252: LD_ADDR_EXP 107
29256: PUSH
29257: LD_INT 0
29259: ST_TO_ADDR
// sDLaser := false ;
29260: LD_ADDR_EXP 108
29264: PUSH
29265: LD_INT 0
29267: ST_TO_ADDR
// sExchange := false ;
29268: LD_ADDR_EXP 109
29272: PUSH
29273: LD_INT 0
29275: ST_TO_ADDR
// sFac := false ;
29276: LD_ADDR_EXP 110
29280: PUSH
29281: LD_INT 0
29283: ST_TO_ADDR
// sPower := false ;
29284: LD_ADDR_EXP 111
29288: PUSH
29289: LD_INT 0
29291: ST_TO_ADDR
// sRandom := false ;
29292: LD_ADDR_EXP 112
29296: PUSH
29297: LD_INT 0
29299: ST_TO_ADDR
// sShield := false ;
29300: LD_ADDR_EXP 113
29304: PUSH
29305: LD_INT 0
29307: ST_TO_ADDR
// sTime := false ;
29308: LD_ADDR_EXP 114
29312: PUSH
29313: LD_INT 0
29315: ST_TO_ADDR
// sTools := false ;
29316: LD_ADDR_EXP 115
29320: PUSH
29321: LD_INT 0
29323: ST_TO_ADDR
// sSold := false ;
29324: LD_ADDR_EXP 80
29328: PUSH
29329: LD_INT 0
29331: ST_TO_ADDR
// sDiff := false ;
29332: LD_ADDR_EXP 81
29336: PUSH
29337: LD_INT 0
29339: ST_TO_ADDR
// sFog := false ;
29340: LD_ADDR_EXP 84
29344: PUSH
29345: LD_INT 0
29347: ST_TO_ADDR
// sReset := false ;
29348: LD_ADDR_EXP 85
29352: PUSH
29353: LD_INT 0
29355: ST_TO_ADDR
// sSun := false ;
29356: LD_ADDR_EXP 86
29360: PUSH
29361: LD_INT 0
29363: ST_TO_ADDR
// sTiger := false ;
29364: LD_ADDR_EXP 82
29368: PUSH
29369: LD_INT 0
29371: ST_TO_ADDR
// sBomb := false ;
29372: LD_ADDR_EXP 83
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// sWound := false ;
29380: LD_ADDR_EXP 91
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// sBetray := false ;
29388: LD_ADDR_EXP 95
29392: PUSH
29393: LD_INT 0
29395: ST_TO_ADDR
// sContamin := false ;
29396: LD_ADDR_EXP 96
29400: PUSH
29401: LD_INT 0
29403: ST_TO_ADDR
// sOil := false ;
29404: LD_ADDR_EXP 98
29408: PUSH
29409: LD_INT 0
29411: ST_TO_ADDR
// sStu := false ;
29412: LD_ADDR_EXP 102
29416: PUSH
29417: LD_INT 0
29419: ST_TO_ADDR
// sBazooka := false ;
29420: LD_ADDR_EXP 105
29424: PUSH
29425: LD_INT 0
29427: ST_TO_ADDR
// sMortar := false ;
29428: LD_ADDR_EXP 106
29432: PUSH
29433: LD_INT 0
29435: ST_TO_ADDR
// sRanger := false ;
29436: LD_ADDR_EXP 116
29440: PUSH
29441: LD_INT 0
29443: ST_TO_ADDR
// end ;
29444: LD_VAR 0 1
29448: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
29449: LD_INT 0
29451: PPUSH
29452: PPUSH
29453: PPUSH
29454: PPUSH
29455: PPUSH
// result := [ ] ;
29456: LD_ADDR_VAR 0 1
29460: PUSH
29461: EMPTY
29462: ST_TO_ADDR
// if campaign_id = 1 then
29463: LD_OWVAR 69
29467: PUSH
29468: LD_INT 1
29470: EQUAL
29471: IFFALSE 32409
// begin case mission_number of 1 :
29473: LD_OWVAR 70
29477: PUSH
29478: LD_INT 1
29480: DOUBLE
29481: EQUAL
29482: IFTRUE 29486
29484: GO 29550
29486: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
29487: LD_ADDR_VAR 0 1
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: LD_INT 4
29497: PUSH
29498: LD_INT 11
29500: PUSH
29501: LD_INT 12
29503: PUSH
29504: LD_INT 15
29506: PUSH
29507: LD_INT 16
29509: PUSH
29510: LD_INT 22
29512: PUSH
29513: LD_INT 23
29515: PUSH
29516: LD_INT 26
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: LIST
29525: LIST
29526: LIST
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 101
29532: PUSH
29533: LD_INT 102
29535: PUSH
29536: LD_INT 106
29538: PUSH
29539: EMPTY
29540: LIST
29541: LIST
29542: LIST
29543: PUSH
29544: EMPTY
29545: LIST
29546: LIST
29547: ST_TO_ADDR
29548: GO 32407
29550: LD_INT 2
29552: DOUBLE
29553: EQUAL
29554: IFTRUE 29558
29556: GO 29630
29558: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
29559: LD_ADDR_VAR 0 1
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: LD_INT 4
29569: PUSH
29570: LD_INT 11
29572: PUSH
29573: LD_INT 12
29575: PUSH
29576: LD_INT 15
29578: PUSH
29579: LD_INT 16
29581: PUSH
29582: LD_INT 22
29584: PUSH
29585: LD_INT 23
29587: PUSH
29588: LD_INT 26
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: PUSH
29602: LD_INT 101
29604: PUSH
29605: LD_INT 102
29607: PUSH
29608: LD_INT 105
29610: PUSH
29611: LD_INT 106
29613: PUSH
29614: LD_INT 108
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: PUSH
29624: EMPTY
29625: LIST
29626: LIST
29627: ST_TO_ADDR
29628: GO 32407
29630: LD_INT 3
29632: DOUBLE
29633: EQUAL
29634: IFTRUE 29638
29636: GO 29714
29638: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
29639: LD_ADDR_VAR 0 1
29643: PUSH
29644: LD_INT 2
29646: PUSH
29647: LD_INT 4
29649: PUSH
29650: LD_INT 5
29652: PUSH
29653: LD_INT 11
29655: PUSH
29656: LD_INT 12
29658: PUSH
29659: LD_INT 15
29661: PUSH
29662: LD_INT 16
29664: PUSH
29665: LD_INT 22
29667: PUSH
29668: LD_INT 26
29670: PUSH
29671: LD_INT 36
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 101
29688: PUSH
29689: LD_INT 102
29691: PUSH
29692: LD_INT 105
29694: PUSH
29695: LD_INT 106
29697: PUSH
29698: LD_INT 108
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: LIST
29705: LIST
29706: LIST
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: ST_TO_ADDR
29712: GO 32407
29714: LD_INT 4
29716: DOUBLE
29717: EQUAL
29718: IFTRUE 29722
29720: GO 29806
29722: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
29723: LD_ADDR_VAR 0 1
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 4
29733: PUSH
29734: LD_INT 5
29736: PUSH
29737: LD_INT 8
29739: PUSH
29740: LD_INT 11
29742: PUSH
29743: LD_INT 12
29745: PUSH
29746: LD_INT 15
29748: PUSH
29749: LD_INT 16
29751: PUSH
29752: LD_INT 22
29754: PUSH
29755: LD_INT 23
29757: PUSH
29758: LD_INT 26
29760: PUSH
29761: LD_INT 36
29763: PUSH
29764: EMPTY
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: PUSH
29778: LD_INT 101
29780: PUSH
29781: LD_INT 102
29783: PUSH
29784: LD_INT 105
29786: PUSH
29787: LD_INT 106
29789: PUSH
29790: LD_INT 108
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: ST_TO_ADDR
29804: GO 32407
29806: LD_INT 5
29808: DOUBLE
29809: EQUAL
29810: IFTRUE 29814
29812: GO 29914
29814: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
29815: LD_ADDR_VAR 0 1
29819: PUSH
29820: LD_INT 2
29822: PUSH
29823: LD_INT 4
29825: PUSH
29826: LD_INT 5
29828: PUSH
29829: LD_INT 6
29831: PUSH
29832: LD_INT 8
29834: PUSH
29835: LD_INT 11
29837: PUSH
29838: LD_INT 12
29840: PUSH
29841: LD_INT 15
29843: PUSH
29844: LD_INT 16
29846: PUSH
29847: LD_INT 22
29849: PUSH
29850: LD_INT 23
29852: PUSH
29853: LD_INT 25
29855: PUSH
29856: LD_INT 26
29858: PUSH
29859: LD_INT 36
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: LIST
29868: LIST
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 101
29880: PUSH
29881: LD_INT 102
29883: PUSH
29884: LD_INT 105
29886: PUSH
29887: LD_INT 106
29889: PUSH
29890: LD_INT 108
29892: PUSH
29893: LD_INT 109
29895: PUSH
29896: LD_INT 112
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: ST_TO_ADDR
29912: GO 32407
29914: LD_INT 6
29916: DOUBLE
29917: EQUAL
29918: IFTRUE 29922
29920: GO 30042
29922: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
29923: LD_ADDR_VAR 0 1
29927: PUSH
29928: LD_INT 2
29930: PUSH
29931: LD_INT 4
29933: PUSH
29934: LD_INT 5
29936: PUSH
29937: LD_INT 6
29939: PUSH
29940: LD_INT 8
29942: PUSH
29943: LD_INT 11
29945: PUSH
29946: LD_INT 12
29948: PUSH
29949: LD_INT 15
29951: PUSH
29952: LD_INT 16
29954: PUSH
29955: LD_INT 20
29957: PUSH
29958: LD_INT 21
29960: PUSH
29961: LD_INT 22
29963: PUSH
29964: LD_INT 23
29966: PUSH
29967: LD_INT 25
29969: PUSH
29970: LD_INT 26
29972: PUSH
29973: LD_INT 30
29975: PUSH
29976: LD_INT 31
29978: PUSH
29979: LD_INT 32
29981: PUSH
29982: LD_INT 36
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 101
30008: PUSH
30009: LD_INT 102
30011: PUSH
30012: LD_INT 105
30014: PUSH
30015: LD_INT 106
30017: PUSH
30018: LD_INT 108
30020: PUSH
30021: LD_INT 109
30023: PUSH
30024: LD_INT 112
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: ST_TO_ADDR
30040: GO 32407
30042: LD_INT 7
30044: DOUBLE
30045: EQUAL
30046: IFTRUE 30050
30048: GO 30150
30050: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
30051: LD_ADDR_VAR 0 1
30055: PUSH
30056: LD_INT 2
30058: PUSH
30059: LD_INT 4
30061: PUSH
30062: LD_INT 5
30064: PUSH
30065: LD_INT 7
30067: PUSH
30068: LD_INT 11
30070: PUSH
30071: LD_INT 12
30073: PUSH
30074: LD_INT 15
30076: PUSH
30077: LD_INT 16
30079: PUSH
30080: LD_INT 20
30082: PUSH
30083: LD_INT 21
30085: PUSH
30086: LD_INT 22
30088: PUSH
30089: LD_INT 23
30091: PUSH
30092: LD_INT 25
30094: PUSH
30095: LD_INT 26
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: PUSH
30114: LD_INT 101
30116: PUSH
30117: LD_INT 102
30119: PUSH
30120: LD_INT 103
30122: PUSH
30123: LD_INT 105
30125: PUSH
30126: LD_INT 106
30128: PUSH
30129: LD_INT 108
30131: PUSH
30132: LD_INT 112
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: LIST
30139: LIST
30140: LIST
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: ST_TO_ADDR
30148: GO 32407
30150: LD_INT 8
30152: DOUBLE
30153: EQUAL
30154: IFTRUE 30158
30156: GO 30286
30158: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
30159: LD_ADDR_VAR 0 1
30163: PUSH
30164: LD_INT 2
30166: PUSH
30167: LD_INT 4
30169: PUSH
30170: LD_INT 5
30172: PUSH
30173: LD_INT 6
30175: PUSH
30176: LD_INT 7
30178: PUSH
30179: LD_INT 8
30181: PUSH
30182: LD_INT 11
30184: PUSH
30185: LD_INT 12
30187: PUSH
30188: LD_INT 15
30190: PUSH
30191: LD_INT 16
30193: PUSH
30194: LD_INT 20
30196: PUSH
30197: LD_INT 21
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: LD_INT 23
30205: PUSH
30206: LD_INT 25
30208: PUSH
30209: LD_INT 26
30211: PUSH
30212: LD_INT 30
30214: PUSH
30215: LD_INT 31
30217: PUSH
30218: LD_INT 32
30220: PUSH
30221: LD_INT 36
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 101
30248: PUSH
30249: LD_INT 102
30251: PUSH
30252: LD_INT 103
30254: PUSH
30255: LD_INT 105
30257: PUSH
30258: LD_INT 106
30260: PUSH
30261: LD_INT 108
30263: PUSH
30264: LD_INT 109
30266: PUSH
30267: LD_INT 112
30269: PUSH
30270: EMPTY
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: ST_TO_ADDR
30284: GO 32407
30286: LD_INT 9
30288: DOUBLE
30289: EQUAL
30290: IFTRUE 30294
30292: GO 30430
30294: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
30295: LD_ADDR_VAR 0 1
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: LD_INT 4
30305: PUSH
30306: LD_INT 5
30308: PUSH
30309: LD_INT 6
30311: PUSH
30312: LD_INT 7
30314: PUSH
30315: LD_INT 8
30317: PUSH
30318: LD_INT 11
30320: PUSH
30321: LD_INT 12
30323: PUSH
30324: LD_INT 15
30326: PUSH
30327: LD_INT 16
30329: PUSH
30330: LD_INT 20
30332: PUSH
30333: LD_INT 21
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 23
30341: PUSH
30342: LD_INT 25
30344: PUSH
30345: LD_INT 26
30347: PUSH
30348: LD_INT 28
30350: PUSH
30351: LD_INT 30
30353: PUSH
30354: LD_INT 31
30356: PUSH
30357: LD_INT 32
30359: PUSH
30360: LD_INT 36
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: PUSH
30386: LD_INT 101
30388: PUSH
30389: LD_INT 102
30391: PUSH
30392: LD_INT 103
30394: PUSH
30395: LD_INT 105
30397: PUSH
30398: LD_INT 106
30400: PUSH
30401: LD_INT 108
30403: PUSH
30404: LD_INT 109
30406: PUSH
30407: LD_INT 112
30409: PUSH
30410: LD_INT 114
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: ST_TO_ADDR
30428: GO 32407
30430: LD_INT 10
30432: DOUBLE
30433: EQUAL
30434: IFTRUE 30438
30436: GO 30622
30438: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
30439: LD_ADDR_VAR 0 1
30443: PUSH
30444: LD_INT 2
30446: PUSH
30447: LD_INT 4
30449: PUSH
30450: LD_INT 5
30452: PUSH
30453: LD_INT 6
30455: PUSH
30456: LD_INT 7
30458: PUSH
30459: LD_INT 8
30461: PUSH
30462: LD_INT 9
30464: PUSH
30465: LD_INT 10
30467: PUSH
30468: LD_INT 11
30470: PUSH
30471: LD_INT 12
30473: PUSH
30474: LD_INT 13
30476: PUSH
30477: LD_INT 14
30479: PUSH
30480: LD_INT 15
30482: PUSH
30483: LD_INT 16
30485: PUSH
30486: LD_INT 17
30488: PUSH
30489: LD_INT 18
30491: PUSH
30492: LD_INT 19
30494: PUSH
30495: LD_INT 20
30497: PUSH
30498: LD_INT 21
30500: PUSH
30501: LD_INT 22
30503: PUSH
30504: LD_INT 23
30506: PUSH
30507: LD_INT 24
30509: PUSH
30510: LD_INT 25
30512: PUSH
30513: LD_INT 26
30515: PUSH
30516: LD_INT 28
30518: PUSH
30519: LD_INT 30
30521: PUSH
30522: LD_INT 31
30524: PUSH
30525: LD_INT 32
30527: PUSH
30528: LD_INT 36
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 101
30564: PUSH
30565: LD_INT 102
30567: PUSH
30568: LD_INT 103
30570: PUSH
30571: LD_INT 104
30573: PUSH
30574: LD_INT 105
30576: PUSH
30577: LD_INT 106
30579: PUSH
30580: LD_INT 107
30582: PUSH
30583: LD_INT 108
30585: PUSH
30586: LD_INT 109
30588: PUSH
30589: LD_INT 110
30591: PUSH
30592: LD_INT 111
30594: PUSH
30595: LD_INT 112
30597: PUSH
30598: LD_INT 114
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: ST_TO_ADDR
30620: GO 32407
30622: LD_INT 11
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30822
30630: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
30631: LD_ADDR_VAR 0 1
30635: PUSH
30636: LD_INT 2
30638: PUSH
30639: LD_INT 3
30641: PUSH
30642: LD_INT 4
30644: PUSH
30645: LD_INT 5
30647: PUSH
30648: LD_INT 6
30650: PUSH
30651: LD_INT 7
30653: PUSH
30654: LD_INT 8
30656: PUSH
30657: LD_INT 9
30659: PUSH
30660: LD_INT 10
30662: PUSH
30663: LD_INT 11
30665: PUSH
30666: LD_INT 12
30668: PUSH
30669: LD_INT 13
30671: PUSH
30672: LD_INT 14
30674: PUSH
30675: LD_INT 15
30677: PUSH
30678: LD_INT 16
30680: PUSH
30681: LD_INT 17
30683: PUSH
30684: LD_INT 18
30686: PUSH
30687: LD_INT 19
30689: PUSH
30690: LD_INT 20
30692: PUSH
30693: LD_INT 21
30695: PUSH
30696: LD_INT 22
30698: PUSH
30699: LD_INT 23
30701: PUSH
30702: LD_INT 24
30704: PUSH
30705: LD_INT 25
30707: PUSH
30708: LD_INT 26
30710: PUSH
30711: LD_INT 28
30713: PUSH
30714: LD_INT 30
30716: PUSH
30717: LD_INT 31
30719: PUSH
30720: LD_INT 32
30722: PUSH
30723: LD_INT 34
30725: PUSH
30726: LD_INT 36
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: LIST
30733: LIST
30734: LIST
30735: LIST
30736: LIST
30737: LIST
30738: LIST
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 101
30764: PUSH
30765: LD_INT 102
30767: PUSH
30768: LD_INT 103
30770: PUSH
30771: LD_INT 104
30773: PUSH
30774: LD_INT 105
30776: PUSH
30777: LD_INT 106
30779: PUSH
30780: LD_INT 107
30782: PUSH
30783: LD_INT 108
30785: PUSH
30786: LD_INT 109
30788: PUSH
30789: LD_INT 110
30791: PUSH
30792: LD_INT 111
30794: PUSH
30795: LD_INT 112
30797: PUSH
30798: LD_INT 114
30800: PUSH
30801: EMPTY
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: ST_TO_ADDR
30820: GO 32407
30822: LD_INT 12
30824: DOUBLE
30825: EQUAL
30826: IFTRUE 30830
30828: GO 31038
30830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
30831: LD_ADDR_VAR 0 1
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: LD_INT 2
30841: PUSH
30842: LD_INT 3
30844: PUSH
30845: LD_INT 4
30847: PUSH
30848: LD_INT 5
30850: PUSH
30851: LD_INT 6
30853: PUSH
30854: LD_INT 7
30856: PUSH
30857: LD_INT 8
30859: PUSH
30860: LD_INT 9
30862: PUSH
30863: LD_INT 10
30865: PUSH
30866: LD_INT 11
30868: PUSH
30869: LD_INT 12
30871: PUSH
30872: LD_INT 13
30874: PUSH
30875: LD_INT 14
30877: PUSH
30878: LD_INT 15
30880: PUSH
30881: LD_INT 16
30883: PUSH
30884: LD_INT 17
30886: PUSH
30887: LD_INT 18
30889: PUSH
30890: LD_INT 19
30892: PUSH
30893: LD_INT 20
30895: PUSH
30896: LD_INT 21
30898: PUSH
30899: LD_INT 22
30901: PUSH
30902: LD_INT 23
30904: PUSH
30905: LD_INT 24
30907: PUSH
30908: LD_INT 25
30910: PUSH
30911: LD_INT 26
30913: PUSH
30914: LD_INT 27
30916: PUSH
30917: LD_INT 28
30919: PUSH
30920: LD_INT 30
30922: PUSH
30923: LD_INT 31
30925: PUSH
30926: LD_INT 32
30928: PUSH
30929: LD_INT 33
30931: PUSH
30932: LD_INT 34
30934: PUSH
30935: LD_INT 36
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: LIST
30973: PUSH
30974: LD_INT 101
30976: PUSH
30977: LD_INT 102
30979: PUSH
30980: LD_INT 103
30982: PUSH
30983: LD_INT 104
30985: PUSH
30986: LD_INT 105
30988: PUSH
30989: LD_INT 106
30991: PUSH
30992: LD_INT 107
30994: PUSH
30995: LD_INT 108
30997: PUSH
30998: LD_INT 109
31000: PUSH
31001: LD_INT 110
31003: PUSH
31004: LD_INT 111
31006: PUSH
31007: LD_INT 112
31009: PUSH
31010: LD_INT 113
31012: PUSH
31013: LD_INT 114
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: ST_TO_ADDR
31036: GO 32407
31038: LD_INT 13
31040: DOUBLE
31041: EQUAL
31042: IFTRUE 31046
31044: GO 31242
31046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
31047: LD_ADDR_VAR 0 1
31051: PUSH
31052: LD_INT 1
31054: PUSH
31055: LD_INT 2
31057: PUSH
31058: LD_INT 3
31060: PUSH
31061: LD_INT 4
31063: PUSH
31064: LD_INT 5
31066: PUSH
31067: LD_INT 8
31069: PUSH
31070: LD_INT 9
31072: PUSH
31073: LD_INT 10
31075: PUSH
31076: LD_INT 11
31078: PUSH
31079: LD_INT 12
31081: PUSH
31082: LD_INT 14
31084: PUSH
31085: LD_INT 15
31087: PUSH
31088: LD_INT 16
31090: PUSH
31091: LD_INT 17
31093: PUSH
31094: LD_INT 18
31096: PUSH
31097: LD_INT 19
31099: PUSH
31100: LD_INT 20
31102: PUSH
31103: LD_INT 21
31105: PUSH
31106: LD_INT 22
31108: PUSH
31109: LD_INT 23
31111: PUSH
31112: LD_INT 24
31114: PUSH
31115: LD_INT 25
31117: PUSH
31118: LD_INT 26
31120: PUSH
31121: LD_INT 27
31123: PUSH
31124: LD_INT 28
31126: PUSH
31127: LD_INT 30
31129: PUSH
31130: LD_INT 31
31132: PUSH
31133: LD_INT 32
31135: PUSH
31136: LD_INT 33
31138: PUSH
31139: LD_INT 34
31141: PUSH
31142: LD_INT 36
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 101
31180: PUSH
31181: LD_INT 102
31183: PUSH
31184: LD_INT 103
31186: PUSH
31187: LD_INT 104
31189: PUSH
31190: LD_INT 105
31192: PUSH
31193: LD_INT 106
31195: PUSH
31196: LD_INT 107
31198: PUSH
31199: LD_INT 108
31201: PUSH
31202: LD_INT 109
31204: PUSH
31205: LD_INT 110
31207: PUSH
31208: LD_INT 111
31210: PUSH
31211: LD_INT 112
31213: PUSH
31214: LD_INT 113
31216: PUSH
31217: LD_INT 114
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: PUSH
31236: EMPTY
31237: LIST
31238: LIST
31239: ST_TO_ADDR
31240: GO 32407
31242: LD_INT 14
31244: DOUBLE
31245: EQUAL
31246: IFTRUE 31250
31248: GO 31462
31250: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
31251: LD_ADDR_VAR 0 1
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 2
31261: PUSH
31262: LD_INT 3
31264: PUSH
31265: LD_INT 4
31267: PUSH
31268: LD_INT 5
31270: PUSH
31271: LD_INT 6
31273: PUSH
31274: LD_INT 7
31276: PUSH
31277: LD_INT 8
31279: PUSH
31280: LD_INT 9
31282: PUSH
31283: LD_INT 10
31285: PUSH
31286: LD_INT 11
31288: PUSH
31289: LD_INT 12
31291: PUSH
31292: LD_INT 13
31294: PUSH
31295: LD_INT 14
31297: PUSH
31298: LD_INT 15
31300: PUSH
31301: LD_INT 16
31303: PUSH
31304: LD_INT 17
31306: PUSH
31307: LD_INT 18
31309: PUSH
31310: LD_INT 19
31312: PUSH
31313: LD_INT 20
31315: PUSH
31316: LD_INT 21
31318: PUSH
31319: LD_INT 22
31321: PUSH
31322: LD_INT 23
31324: PUSH
31325: LD_INT 24
31327: PUSH
31328: LD_INT 25
31330: PUSH
31331: LD_INT 26
31333: PUSH
31334: LD_INT 27
31336: PUSH
31337: LD_INT 28
31339: PUSH
31340: LD_INT 29
31342: PUSH
31343: LD_INT 30
31345: PUSH
31346: LD_INT 31
31348: PUSH
31349: LD_INT 32
31351: PUSH
31352: LD_INT 33
31354: PUSH
31355: LD_INT 34
31357: PUSH
31358: LD_INT 36
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 101
31400: PUSH
31401: LD_INT 102
31403: PUSH
31404: LD_INT 103
31406: PUSH
31407: LD_INT 104
31409: PUSH
31410: LD_INT 105
31412: PUSH
31413: LD_INT 106
31415: PUSH
31416: LD_INT 107
31418: PUSH
31419: LD_INT 108
31421: PUSH
31422: LD_INT 109
31424: PUSH
31425: LD_INT 110
31427: PUSH
31428: LD_INT 111
31430: PUSH
31431: LD_INT 112
31433: PUSH
31434: LD_INT 113
31436: PUSH
31437: LD_INT 114
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: PUSH
31456: EMPTY
31457: LIST
31458: LIST
31459: ST_TO_ADDR
31460: GO 32407
31462: LD_INT 15
31464: DOUBLE
31465: EQUAL
31466: IFTRUE 31470
31468: GO 31682
31470: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
31471: LD_ADDR_VAR 0 1
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: LD_INT 2
31481: PUSH
31482: LD_INT 3
31484: PUSH
31485: LD_INT 4
31487: PUSH
31488: LD_INT 5
31490: PUSH
31491: LD_INT 6
31493: PUSH
31494: LD_INT 7
31496: PUSH
31497: LD_INT 8
31499: PUSH
31500: LD_INT 9
31502: PUSH
31503: LD_INT 10
31505: PUSH
31506: LD_INT 11
31508: PUSH
31509: LD_INT 12
31511: PUSH
31512: LD_INT 13
31514: PUSH
31515: LD_INT 14
31517: PUSH
31518: LD_INT 15
31520: PUSH
31521: LD_INT 16
31523: PUSH
31524: LD_INT 17
31526: PUSH
31527: LD_INT 18
31529: PUSH
31530: LD_INT 19
31532: PUSH
31533: LD_INT 20
31535: PUSH
31536: LD_INT 21
31538: PUSH
31539: LD_INT 22
31541: PUSH
31542: LD_INT 23
31544: PUSH
31545: LD_INT 24
31547: PUSH
31548: LD_INT 25
31550: PUSH
31551: LD_INT 26
31553: PUSH
31554: LD_INT 27
31556: PUSH
31557: LD_INT 28
31559: PUSH
31560: LD_INT 29
31562: PUSH
31563: LD_INT 30
31565: PUSH
31566: LD_INT 31
31568: PUSH
31569: LD_INT 32
31571: PUSH
31572: LD_INT 33
31574: PUSH
31575: LD_INT 34
31577: PUSH
31578: LD_INT 36
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: LIST
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: LIST
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: PUSH
31618: LD_INT 101
31620: PUSH
31621: LD_INT 102
31623: PUSH
31624: LD_INT 103
31626: PUSH
31627: LD_INT 104
31629: PUSH
31630: LD_INT 105
31632: PUSH
31633: LD_INT 106
31635: PUSH
31636: LD_INT 107
31638: PUSH
31639: LD_INT 108
31641: PUSH
31642: LD_INT 109
31644: PUSH
31645: LD_INT 110
31647: PUSH
31648: LD_INT 111
31650: PUSH
31651: LD_INT 112
31653: PUSH
31654: LD_INT 113
31656: PUSH
31657: LD_INT 114
31659: PUSH
31660: EMPTY
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: ST_TO_ADDR
31680: GO 32407
31682: LD_INT 16
31684: DOUBLE
31685: EQUAL
31686: IFTRUE 31690
31688: GO 31814
31690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
31691: LD_ADDR_VAR 0 1
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 4
31701: PUSH
31702: LD_INT 5
31704: PUSH
31705: LD_INT 7
31707: PUSH
31708: LD_INT 11
31710: PUSH
31711: LD_INT 12
31713: PUSH
31714: LD_INT 15
31716: PUSH
31717: LD_INT 16
31719: PUSH
31720: LD_INT 20
31722: PUSH
31723: LD_INT 21
31725: PUSH
31726: LD_INT 22
31728: PUSH
31729: LD_INT 23
31731: PUSH
31732: LD_INT 25
31734: PUSH
31735: LD_INT 26
31737: PUSH
31738: LD_INT 30
31740: PUSH
31741: LD_INT 31
31743: PUSH
31744: LD_INT 32
31746: PUSH
31747: LD_INT 33
31749: PUSH
31750: LD_INT 34
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: LIST
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 101
31776: PUSH
31777: LD_INT 102
31779: PUSH
31780: LD_INT 103
31782: PUSH
31783: LD_INT 106
31785: PUSH
31786: LD_INT 108
31788: PUSH
31789: LD_INT 112
31791: PUSH
31792: LD_INT 113
31794: PUSH
31795: LD_INT 114
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: EMPTY
31809: LIST
31810: LIST
31811: ST_TO_ADDR
31812: GO 32407
31814: LD_INT 17
31816: DOUBLE
31817: EQUAL
31818: IFTRUE 31822
31820: GO 32034
31822: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
31823: LD_ADDR_VAR 0 1
31827: PUSH
31828: LD_INT 1
31830: PUSH
31831: LD_INT 2
31833: PUSH
31834: LD_INT 3
31836: PUSH
31837: LD_INT 4
31839: PUSH
31840: LD_INT 5
31842: PUSH
31843: LD_INT 6
31845: PUSH
31846: LD_INT 7
31848: PUSH
31849: LD_INT 8
31851: PUSH
31852: LD_INT 9
31854: PUSH
31855: LD_INT 10
31857: PUSH
31858: LD_INT 11
31860: PUSH
31861: LD_INT 12
31863: PUSH
31864: LD_INT 13
31866: PUSH
31867: LD_INT 14
31869: PUSH
31870: LD_INT 15
31872: PUSH
31873: LD_INT 16
31875: PUSH
31876: LD_INT 17
31878: PUSH
31879: LD_INT 18
31881: PUSH
31882: LD_INT 19
31884: PUSH
31885: LD_INT 20
31887: PUSH
31888: LD_INT 21
31890: PUSH
31891: LD_INT 22
31893: PUSH
31894: LD_INT 23
31896: PUSH
31897: LD_INT 24
31899: PUSH
31900: LD_INT 25
31902: PUSH
31903: LD_INT 26
31905: PUSH
31906: LD_INT 27
31908: PUSH
31909: LD_INT 28
31911: PUSH
31912: LD_INT 29
31914: PUSH
31915: LD_INT 30
31917: PUSH
31918: LD_INT 31
31920: PUSH
31921: LD_INT 32
31923: PUSH
31924: LD_INT 33
31926: PUSH
31927: LD_INT 34
31929: PUSH
31930: LD_INT 36
31932: PUSH
31933: EMPTY
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 101
31972: PUSH
31973: LD_INT 102
31975: PUSH
31976: LD_INT 103
31978: PUSH
31979: LD_INT 104
31981: PUSH
31982: LD_INT 105
31984: PUSH
31985: LD_INT 106
31987: PUSH
31988: LD_INT 107
31990: PUSH
31991: LD_INT 108
31993: PUSH
31994: LD_INT 109
31996: PUSH
31997: LD_INT 110
31999: PUSH
32000: LD_INT 111
32002: PUSH
32003: LD_INT 112
32005: PUSH
32006: LD_INT 113
32008: PUSH
32009: LD_INT 114
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: ST_TO_ADDR
32032: GO 32407
32034: LD_INT 18
32036: DOUBLE
32037: EQUAL
32038: IFTRUE 32042
32040: GO 32178
32042: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
32043: LD_ADDR_VAR 0 1
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: LD_INT 4
32053: PUSH
32054: LD_INT 5
32056: PUSH
32057: LD_INT 7
32059: PUSH
32060: LD_INT 11
32062: PUSH
32063: LD_INT 12
32065: PUSH
32066: LD_INT 15
32068: PUSH
32069: LD_INT 16
32071: PUSH
32072: LD_INT 20
32074: PUSH
32075: LD_INT 21
32077: PUSH
32078: LD_INT 22
32080: PUSH
32081: LD_INT 23
32083: PUSH
32084: LD_INT 25
32086: PUSH
32087: LD_INT 26
32089: PUSH
32090: LD_INT 30
32092: PUSH
32093: LD_INT 31
32095: PUSH
32096: LD_INT 32
32098: PUSH
32099: LD_INT 33
32101: PUSH
32102: LD_INT 34
32104: PUSH
32105: LD_INT 35
32107: PUSH
32108: LD_INT 36
32110: PUSH
32111: EMPTY
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 101
32136: PUSH
32137: LD_INT 102
32139: PUSH
32140: LD_INT 103
32142: PUSH
32143: LD_INT 106
32145: PUSH
32146: LD_INT 108
32148: PUSH
32149: LD_INT 112
32151: PUSH
32152: LD_INT 113
32154: PUSH
32155: LD_INT 114
32157: PUSH
32158: LD_INT 115
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: ST_TO_ADDR
32176: GO 32407
32178: LD_INT 19
32180: DOUBLE
32181: EQUAL
32182: IFTRUE 32186
32184: GO 32406
32186: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
32187: LD_ADDR_VAR 0 1
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: LD_INT 6
32209: PUSH
32210: LD_INT 7
32212: PUSH
32213: LD_INT 8
32215: PUSH
32216: LD_INT 9
32218: PUSH
32219: LD_INT 10
32221: PUSH
32222: LD_INT 11
32224: PUSH
32225: LD_INT 12
32227: PUSH
32228: LD_INT 13
32230: PUSH
32231: LD_INT 14
32233: PUSH
32234: LD_INT 15
32236: PUSH
32237: LD_INT 16
32239: PUSH
32240: LD_INT 17
32242: PUSH
32243: LD_INT 18
32245: PUSH
32246: LD_INT 19
32248: PUSH
32249: LD_INT 20
32251: PUSH
32252: LD_INT 21
32254: PUSH
32255: LD_INT 22
32257: PUSH
32258: LD_INT 23
32260: PUSH
32261: LD_INT 24
32263: PUSH
32264: LD_INT 25
32266: PUSH
32267: LD_INT 26
32269: PUSH
32270: LD_INT 27
32272: PUSH
32273: LD_INT 28
32275: PUSH
32276: LD_INT 29
32278: PUSH
32279: LD_INT 30
32281: PUSH
32282: LD_INT 31
32284: PUSH
32285: LD_INT 32
32287: PUSH
32288: LD_INT 33
32290: PUSH
32291: LD_INT 34
32293: PUSH
32294: LD_INT 35
32296: PUSH
32297: LD_INT 36
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 101
32340: PUSH
32341: LD_INT 102
32343: PUSH
32344: LD_INT 103
32346: PUSH
32347: LD_INT 104
32349: PUSH
32350: LD_INT 105
32352: PUSH
32353: LD_INT 106
32355: PUSH
32356: LD_INT 107
32358: PUSH
32359: LD_INT 108
32361: PUSH
32362: LD_INT 109
32364: PUSH
32365: LD_INT 110
32367: PUSH
32368: LD_INT 111
32370: PUSH
32371: LD_INT 112
32373: PUSH
32374: LD_INT 113
32376: PUSH
32377: LD_INT 114
32379: PUSH
32380: LD_INT 115
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: ST_TO_ADDR
32404: GO 32407
32406: POP
// end else
32407: GO 32626
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
32409: LD_ADDR_VAR 0 1
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: LD_INT 3
32422: PUSH
32423: LD_INT 4
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: LD_INT 6
32431: PUSH
32432: LD_INT 7
32434: PUSH
32435: LD_INT 8
32437: PUSH
32438: LD_INT 9
32440: PUSH
32441: LD_INT 10
32443: PUSH
32444: LD_INT 11
32446: PUSH
32447: LD_INT 12
32449: PUSH
32450: LD_INT 13
32452: PUSH
32453: LD_INT 14
32455: PUSH
32456: LD_INT 15
32458: PUSH
32459: LD_INT 16
32461: PUSH
32462: LD_INT 17
32464: PUSH
32465: LD_INT 18
32467: PUSH
32468: LD_INT 19
32470: PUSH
32471: LD_INT 20
32473: PUSH
32474: LD_INT 21
32476: PUSH
32477: LD_INT 22
32479: PUSH
32480: LD_INT 23
32482: PUSH
32483: LD_INT 24
32485: PUSH
32486: LD_INT 25
32488: PUSH
32489: LD_INT 26
32491: PUSH
32492: LD_INT 27
32494: PUSH
32495: LD_INT 28
32497: PUSH
32498: LD_INT 29
32500: PUSH
32501: LD_INT 30
32503: PUSH
32504: LD_INT 31
32506: PUSH
32507: LD_INT 32
32509: PUSH
32510: LD_INT 33
32512: PUSH
32513: LD_INT 34
32515: PUSH
32516: LD_INT 35
32518: PUSH
32519: LD_INT 36
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 101
32562: PUSH
32563: LD_INT 102
32565: PUSH
32566: LD_INT 103
32568: PUSH
32569: LD_INT 104
32571: PUSH
32572: LD_INT 105
32574: PUSH
32575: LD_INT 106
32577: PUSH
32578: LD_INT 107
32580: PUSH
32581: LD_INT 108
32583: PUSH
32584: LD_INT 109
32586: PUSH
32587: LD_INT 110
32589: PUSH
32590: LD_INT 111
32592: PUSH
32593: LD_INT 112
32595: PUSH
32596: LD_INT 113
32598: PUSH
32599: LD_INT 114
32601: PUSH
32602: LD_INT 115
32604: PUSH
32605: EMPTY
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: ST_TO_ADDR
// if result then
32626: LD_VAR 0 1
32630: IFFALSE 32919
// begin normal :=  ;
32632: LD_ADDR_VAR 0 3
32636: PUSH
32637: LD_STRING 
32639: ST_TO_ADDR
// hardcore :=  ;
32640: LD_ADDR_VAR 0 4
32644: PUSH
32645: LD_STRING 
32647: ST_TO_ADDR
// for i = 1 to normalCounter do
32648: LD_ADDR_VAR 0 5
32652: PUSH
32653: DOUBLE
32654: LD_INT 1
32656: DEC
32657: ST_TO_ADDR
32658: LD_EXP 64
32662: PUSH
32663: FOR_TO
32664: IFFALSE 32765
// begin tmp := 0 ;
32666: LD_ADDR_VAR 0 2
32670: PUSH
32671: LD_STRING 0
32673: ST_TO_ADDR
// if result [ 1 ] then
32674: LD_VAR 0 1
32678: PUSH
32679: LD_INT 1
32681: ARRAY
32682: IFFALSE 32747
// if result [ 1 ] [ 1 ] = i then
32684: LD_VAR 0 1
32688: PUSH
32689: LD_INT 1
32691: ARRAY
32692: PUSH
32693: LD_INT 1
32695: ARRAY
32696: PUSH
32697: LD_VAR 0 5
32701: EQUAL
32702: IFFALSE 32747
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
32704: LD_ADDR_VAR 0 1
32708: PUSH
32709: LD_VAR 0 1
32713: PPUSH
32714: LD_INT 1
32716: PPUSH
32717: LD_VAR 0 1
32721: PUSH
32722: LD_INT 1
32724: ARRAY
32725: PPUSH
32726: LD_INT 1
32728: PPUSH
32729: CALL_OW 3
32733: PPUSH
32734: CALL_OW 1
32738: ST_TO_ADDR
// tmp := 1 ;
32739: LD_ADDR_VAR 0 2
32743: PUSH
32744: LD_STRING 1
32746: ST_TO_ADDR
// end ; normal := normal & tmp ;
32747: LD_ADDR_VAR 0 3
32751: PUSH
32752: LD_VAR 0 3
32756: PUSH
32757: LD_VAR 0 2
32761: STR
32762: ST_TO_ADDR
// end ;
32763: GO 32663
32765: POP
32766: POP
// for i = 1 to hardcoreCounter do
32767: LD_ADDR_VAR 0 5
32771: PUSH
32772: DOUBLE
32773: LD_INT 1
32775: DEC
32776: ST_TO_ADDR
32777: LD_EXP 65
32781: PUSH
32782: FOR_TO
32783: IFFALSE 32888
// begin tmp := 0 ;
32785: LD_ADDR_VAR 0 2
32789: PUSH
32790: LD_STRING 0
32792: ST_TO_ADDR
// if result [ 2 ] then
32793: LD_VAR 0 1
32797: PUSH
32798: LD_INT 2
32800: ARRAY
32801: IFFALSE 32870
// if result [ 2 ] [ 1 ] = 100 + i then
32803: LD_VAR 0 1
32807: PUSH
32808: LD_INT 2
32810: ARRAY
32811: PUSH
32812: LD_INT 1
32814: ARRAY
32815: PUSH
32816: LD_INT 100
32818: PUSH
32819: LD_VAR 0 5
32823: PLUS
32824: EQUAL
32825: IFFALSE 32870
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
32827: LD_ADDR_VAR 0 1
32831: PUSH
32832: LD_VAR 0 1
32836: PPUSH
32837: LD_INT 2
32839: PPUSH
32840: LD_VAR 0 1
32844: PUSH
32845: LD_INT 2
32847: ARRAY
32848: PPUSH
32849: LD_INT 1
32851: PPUSH
32852: CALL_OW 3
32856: PPUSH
32857: CALL_OW 1
32861: ST_TO_ADDR
// tmp := 1 ;
32862: LD_ADDR_VAR 0 2
32866: PUSH
32867: LD_STRING 1
32869: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
32870: LD_ADDR_VAR 0 4
32874: PUSH
32875: LD_VAR 0 4
32879: PUSH
32880: LD_VAR 0 2
32884: STR
32885: ST_TO_ADDR
// end ;
32886: GO 32782
32888: POP
32889: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
32890: LD_STRING getStreamItemsFromMission("
32892: PUSH
32893: LD_VAR 0 3
32897: STR
32898: PUSH
32899: LD_STRING ","
32901: STR
32902: PUSH
32903: LD_VAR 0 4
32907: STR
32908: PUSH
32909: LD_STRING ")
32911: STR
32912: PPUSH
32913: CALL_OW 559
// end else
32917: GO 32926
// ToLua ( getStreamItemsFromMission("","") ) ;
32919: LD_STRING getStreamItemsFromMission("","")
32921: PPUSH
32922: CALL_OW 559
// end ;
32926: LD_VAR 0 1
32930: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
32931: LD_EXP 63
32935: PUSH
32936: LD_EXP 68
32940: AND
32941: IFFALSE 33065
32943: GO 32945
32945: DISABLE
32946: LD_INT 0
32948: PPUSH
32949: PPUSH
// begin enable ;
32950: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
32951: LD_ADDR_VAR 0 2
32955: PUSH
32956: LD_INT 22
32958: PUSH
32959: LD_OWVAR 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 2
32970: PUSH
32971: LD_INT 34
32973: PUSH
32974: LD_INT 7
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 34
32983: PUSH
32984: LD_INT 45
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 34
32993: PUSH
32994: LD_INT 28
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 34
33003: PUSH
33004: LD_INT 47
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL_OW 69
33026: ST_TO_ADDR
// if not tmp then
33027: LD_VAR 0 2
33031: NOT
33032: IFFALSE 33036
// exit ;
33034: GO 33065
// for i in tmp do
33036: LD_ADDR_VAR 0 1
33040: PUSH
33041: LD_VAR 0 2
33045: PUSH
33046: FOR_IN
33047: IFFALSE 33063
// begin SetLives ( i , 0 ) ;
33049: LD_VAR 0 1
33053: PPUSH
33054: LD_INT 0
33056: PPUSH
33057: CALL_OW 234
// end ;
33061: GO 33046
33063: POP
33064: POP
// end ;
33065: PPOPN 2
33067: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33068: LD_EXP 63
33072: PUSH
33073: LD_EXP 69
33077: AND
33078: IFFALSE 33162
33080: GO 33082
33082: DISABLE
33083: LD_INT 0
33085: PPUSH
33086: PPUSH
// begin enable ;
33087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33088: LD_ADDR_VAR 0 2
33092: PUSH
33093: LD_INT 22
33095: PUSH
33096: LD_OWVAR 2
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: LD_INT 32
33107: PUSH
33108: LD_INT 3
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PPUSH
33119: CALL_OW 69
33123: ST_TO_ADDR
// if not tmp then
33124: LD_VAR 0 2
33128: NOT
33129: IFFALSE 33133
// exit ;
33131: GO 33162
// for i in tmp do
33133: LD_ADDR_VAR 0 1
33137: PUSH
33138: LD_VAR 0 2
33142: PUSH
33143: FOR_IN
33144: IFFALSE 33160
// begin SetLives ( i , 0 ) ;
33146: LD_VAR 0 1
33150: PPUSH
33151: LD_INT 0
33153: PPUSH
33154: CALL_OW 234
// end ;
33158: GO 33143
33160: POP
33161: POP
// end ;
33162: PPOPN 2
33164: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33165: LD_EXP 63
33169: PUSH
33170: LD_EXP 66
33174: AND
33175: IFFALSE 33268
33177: GO 33179
33179: DISABLE
33180: LD_INT 0
33182: PPUSH
// begin enable ;
33183: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33184: LD_ADDR_VAR 0 1
33188: PUSH
33189: LD_INT 22
33191: PUSH
33192: LD_OWVAR 2
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 25
33206: PUSH
33207: LD_INT 5
33209: PUSH
33210: EMPTY
33211: LIST
33212: LIST
33213: PUSH
33214: LD_INT 25
33216: PUSH
33217: LD_INT 9
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 25
33226: PUSH
33227: LD_INT 8
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: PUSH
33240: EMPTY
33241: LIST
33242: LIST
33243: PPUSH
33244: CALL_OW 69
33248: PUSH
33249: FOR_IN
33250: IFFALSE 33266
// begin SetClass ( i , 1 ) ;
33252: LD_VAR 0 1
33256: PPUSH
33257: LD_INT 1
33259: PPUSH
33260: CALL_OW 336
// end ;
33264: GO 33249
33266: POP
33267: POP
// end ;
33268: PPOPN 1
33270: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33271: LD_EXP 63
33275: PUSH
33276: LD_EXP 67
33280: AND
33281: PUSH
33282: LD_OWVAR 65
33286: PUSH
33287: LD_INT 7
33289: LESS
33290: AND
33291: IFFALSE 33305
33293: GO 33295
33295: DISABLE
// begin enable ;
33296: ENABLE
// game_speed := 7 ;
33297: LD_ADDR_OWVAR 65
33301: PUSH
33302: LD_INT 7
33304: ST_TO_ADDR
// end ;
33305: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33306: LD_EXP 63
33310: PUSH
33311: LD_EXP 70
33315: AND
33316: IFFALSE 33518
33318: GO 33320
33320: DISABLE
33321: LD_INT 0
33323: PPUSH
33324: PPUSH
33325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33326: LD_ADDR_VAR 0 3
33330: PUSH
33331: LD_INT 81
33333: PUSH
33334: LD_OWVAR 2
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: PUSH
33343: LD_INT 21
33345: PUSH
33346: LD_INT 1
33348: PUSH
33349: EMPTY
33350: LIST
33351: LIST
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PPUSH
33357: CALL_OW 69
33361: ST_TO_ADDR
// if not tmp then
33362: LD_VAR 0 3
33366: NOT
33367: IFFALSE 33371
// exit ;
33369: GO 33518
// if tmp > 5 then
33371: LD_VAR 0 3
33375: PUSH
33376: LD_INT 5
33378: GREATER
33379: IFFALSE 33391
// k := 5 else
33381: LD_ADDR_VAR 0 2
33385: PUSH
33386: LD_INT 5
33388: ST_TO_ADDR
33389: GO 33401
// k := tmp ;
33391: LD_ADDR_VAR 0 2
33395: PUSH
33396: LD_VAR 0 3
33400: ST_TO_ADDR
// for i := 1 to k do
33401: LD_ADDR_VAR 0 1
33405: PUSH
33406: DOUBLE
33407: LD_INT 1
33409: DEC
33410: ST_TO_ADDR
33411: LD_VAR 0 2
33415: PUSH
33416: FOR_TO
33417: IFFALSE 33516
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33419: LD_VAR 0 3
33423: PUSH
33424: LD_VAR 0 1
33428: ARRAY
33429: PPUSH
33430: LD_VAR 0 1
33434: PUSH
33435: LD_INT 4
33437: MOD
33438: PUSH
33439: LD_INT 1
33441: PLUS
33442: PPUSH
33443: CALL_OW 259
33447: PUSH
33448: LD_INT 10
33450: LESS
33451: IFFALSE 33514
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33453: LD_VAR 0 3
33457: PUSH
33458: LD_VAR 0 1
33462: ARRAY
33463: PPUSH
33464: LD_VAR 0 1
33468: PUSH
33469: LD_INT 4
33471: MOD
33472: PUSH
33473: LD_INT 1
33475: PLUS
33476: PPUSH
33477: LD_VAR 0 3
33481: PUSH
33482: LD_VAR 0 1
33486: ARRAY
33487: PPUSH
33488: LD_VAR 0 1
33492: PUSH
33493: LD_INT 4
33495: MOD
33496: PUSH
33497: LD_INT 1
33499: PLUS
33500: PPUSH
33501: CALL_OW 259
33505: PUSH
33506: LD_INT 1
33508: PLUS
33509: PPUSH
33510: CALL_OW 237
33514: GO 33416
33516: POP
33517: POP
// end ;
33518: PPOPN 3
33520: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33521: LD_EXP 63
33525: PUSH
33526: LD_EXP 71
33530: AND
33531: IFFALSE 33551
33533: GO 33535
33535: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33536: LD_INT 4
33538: PPUSH
33539: LD_OWVAR 2
33543: PPUSH
33544: LD_INT 0
33546: PPUSH
33547: CALL_OW 324
33551: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33552: LD_EXP 63
33556: PUSH
33557: LD_EXP 100
33561: AND
33562: IFFALSE 33582
33564: GO 33566
33566: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33567: LD_INT 19
33569: PPUSH
33570: LD_OWVAR 2
33574: PPUSH
33575: LD_INT 0
33577: PPUSH
33578: CALL_OW 324
33582: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33583: LD_EXP 63
33587: PUSH
33588: LD_EXP 72
33592: AND
33593: IFFALSE 33695
33595: GO 33597
33597: DISABLE
33598: LD_INT 0
33600: PPUSH
33601: PPUSH
// begin enable ;
33602: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33603: LD_ADDR_VAR 0 2
33607: PUSH
33608: LD_INT 22
33610: PUSH
33611: LD_OWVAR 2
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PUSH
33620: LD_INT 2
33622: PUSH
33623: LD_INT 34
33625: PUSH
33626: LD_INT 11
33628: PUSH
33629: EMPTY
33630: LIST
33631: LIST
33632: PUSH
33633: LD_INT 34
33635: PUSH
33636: LD_INT 30
33638: PUSH
33639: EMPTY
33640: LIST
33641: LIST
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: LIST
33647: PUSH
33648: EMPTY
33649: LIST
33650: LIST
33651: PPUSH
33652: CALL_OW 69
33656: ST_TO_ADDR
// if not tmp then
33657: LD_VAR 0 2
33661: NOT
33662: IFFALSE 33666
// exit ;
33664: GO 33695
// for i in tmp do
33666: LD_ADDR_VAR 0 1
33670: PUSH
33671: LD_VAR 0 2
33675: PUSH
33676: FOR_IN
33677: IFFALSE 33693
// begin SetLives ( i , 0 ) ;
33679: LD_VAR 0 1
33683: PPUSH
33684: LD_INT 0
33686: PPUSH
33687: CALL_OW 234
// end ;
33691: GO 33676
33693: POP
33694: POP
// end ;
33695: PPOPN 2
33697: END
// every 0 0$1 trigger StreamModeActive and sBunker do
33698: LD_EXP 63
33702: PUSH
33703: LD_EXP 73
33707: AND
33708: IFFALSE 33728
33710: GO 33712
33712: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
33713: LD_INT 32
33715: PPUSH
33716: LD_OWVAR 2
33720: PPUSH
33721: LD_INT 0
33723: PPUSH
33724: CALL_OW 324
33728: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
33729: LD_EXP 63
33733: PUSH
33734: LD_EXP 74
33738: AND
33739: IFFALSE 33920
33741: GO 33743
33743: DISABLE
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
33749: LD_ADDR_VAR 0 2
33753: PUSH
33754: LD_INT 22
33756: PUSH
33757: LD_OWVAR 2
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 33
33768: PUSH
33769: LD_INT 3
33771: PUSH
33772: EMPTY
33773: LIST
33774: LIST
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PPUSH
33780: CALL_OW 69
33784: ST_TO_ADDR
// if not tmp then
33785: LD_VAR 0 2
33789: NOT
33790: IFFALSE 33794
// exit ;
33792: GO 33920
// side := 0 ;
33794: LD_ADDR_VAR 0 3
33798: PUSH
33799: LD_INT 0
33801: ST_TO_ADDR
// for i := 1 to 8 do
33802: LD_ADDR_VAR 0 1
33806: PUSH
33807: DOUBLE
33808: LD_INT 1
33810: DEC
33811: ST_TO_ADDR
33812: LD_INT 8
33814: PUSH
33815: FOR_TO
33816: IFFALSE 33864
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
33818: LD_OWVAR 2
33822: PUSH
33823: LD_VAR 0 1
33827: NONEQUAL
33828: PUSH
33829: LD_OWVAR 2
33833: PPUSH
33834: LD_VAR 0 1
33838: PPUSH
33839: CALL_OW 81
33843: PUSH
33844: LD_INT 2
33846: EQUAL
33847: AND
33848: IFFALSE 33862
// begin side := i ;
33850: LD_ADDR_VAR 0 3
33854: PUSH
33855: LD_VAR 0 1
33859: ST_TO_ADDR
// break ;
33860: GO 33864
// end ;
33862: GO 33815
33864: POP
33865: POP
// if not side then
33866: LD_VAR 0 3
33870: NOT
33871: IFFALSE 33875
// exit ;
33873: GO 33920
// for i := 1 to tmp do
33875: LD_ADDR_VAR 0 1
33879: PUSH
33880: DOUBLE
33881: LD_INT 1
33883: DEC
33884: ST_TO_ADDR
33885: LD_VAR 0 2
33889: PUSH
33890: FOR_TO
33891: IFFALSE 33918
// if Prob ( 60 ) then
33893: LD_INT 60
33895: PPUSH
33896: CALL_OW 13
33900: IFFALSE 33916
// SetSide ( i , side ) ;
33902: LD_VAR 0 1
33906: PPUSH
33907: LD_VAR 0 3
33911: PPUSH
33912: CALL_OW 235
33916: GO 33890
33918: POP
33919: POP
// end ;
33920: PPOPN 3
33922: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
33923: LD_EXP 63
33927: PUSH
33928: LD_EXP 76
33932: AND
33933: IFFALSE 34052
33935: GO 33937
33937: DISABLE
33938: LD_INT 0
33940: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
33941: LD_ADDR_VAR 0 1
33945: PUSH
33946: LD_INT 22
33948: PUSH
33949: LD_OWVAR 2
33953: PUSH
33954: EMPTY
33955: LIST
33956: LIST
33957: PUSH
33958: LD_INT 21
33960: PUSH
33961: LD_INT 1
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 3
33970: PUSH
33971: LD_INT 23
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: EMPTY
33978: LIST
33979: LIST
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: LIST
33989: PPUSH
33990: CALL_OW 69
33994: PUSH
33995: FOR_IN
33996: IFFALSE 34050
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
33998: LD_VAR 0 1
34002: PPUSH
34003: CALL_OW 257
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: LD_INT 3
34016: PUSH
34017: LD_INT 4
34019: PUSH
34020: EMPTY
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: IN
34026: IFFALSE 34048
// SetClass ( un , rand ( 1 , 4 ) ) ;
34028: LD_VAR 0 1
34032: PPUSH
34033: LD_INT 1
34035: PPUSH
34036: LD_INT 4
34038: PPUSH
34039: CALL_OW 12
34043: PPUSH
34044: CALL_OW 336
34048: GO 33995
34050: POP
34051: POP
// end ;
34052: PPOPN 1
34054: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34055: LD_EXP 63
34059: PUSH
34060: LD_EXP 75
34064: AND
34065: IFFALSE 34144
34067: GO 34069
34069: DISABLE
34070: LD_INT 0
34072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34073: LD_ADDR_VAR 0 1
34077: PUSH
34078: LD_INT 22
34080: PUSH
34081: LD_OWVAR 2
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 21
34092: PUSH
34093: LD_INT 3
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PPUSH
34104: CALL_OW 69
34108: ST_TO_ADDR
// if not tmp then
34109: LD_VAR 0 1
34113: NOT
34114: IFFALSE 34118
// exit ;
34116: GO 34144
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34118: LD_VAR 0 1
34122: PUSH
34123: LD_INT 1
34125: PPUSH
34126: LD_VAR 0 1
34130: PPUSH
34131: CALL_OW 12
34135: ARRAY
34136: PPUSH
34137: LD_INT 100
34139: PPUSH
34140: CALL_OW 234
// end ;
34144: PPOPN 1
34146: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34147: LD_EXP 63
34151: PUSH
34152: LD_EXP 77
34156: AND
34157: IFFALSE 34255
34159: GO 34161
34161: DISABLE
34162: LD_INT 0
34164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34165: LD_ADDR_VAR 0 1
34169: PUSH
34170: LD_INT 22
34172: PUSH
34173: LD_OWVAR 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 21
34184: PUSH
34185: LD_INT 1
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: PPUSH
34196: CALL_OW 69
34200: ST_TO_ADDR
// if not tmp then
34201: LD_VAR 0 1
34205: NOT
34206: IFFALSE 34210
// exit ;
34208: GO 34255
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34210: LD_VAR 0 1
34214: PUSH
34215: LD_INT 1
34217: PPUSH
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 12
34227: ARRAY
34228: PPUSH
34229: LD_INT 1
34231: PPUSH
34232: LD_INT 4
34234: PPUSH
34235: CALL_OW 12
34239: PPUSH
34240: LD_INT 3000
34242: PPUSH
34243: LD_INT 9000
34245: PPUSH
34246: CALL_OW 12
34250: PPUSH
34251: CALL_OW 492
// end ;
34255: PPOPN 1
34257: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34258: LD_EXP 63
34262: PUSH
34263: LD_EXP 78
34267: AND
34268: IFFALSE 34288
34270: GO 34272
34272: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34273: LD_INT 1
34275: PPUSH
34276: LD_OWVAR 2
34280: PPUSH
34281: LD_INT 0
34283: PPUSH
34284: CALL_OW 324
34288: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34289: LD_EXP 63
34293: PUSH
34294: LD_EXP 79
34298: AND
34299: IFFALSE 34382
34301: GO 34303
34303: DISABLE
34304: LD_INT 0
34306: PPUSH
34307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34308: LD_ADDR_VAR 0 2
34312: PUSH
34313: LD_INT 22
34315: PUSH
34316: LD_OWVAR 2
34320: PUSH
34321: EMPTY
34322: LIST
34323: LIST
34324: PUSH
34325: LD_INT 21
34327: PUSH
34328: LD_INT 3
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PPUSH
34339: CALL_OW 69
34343: ST_TO_ADDR
// if not tmp then
34344: LD_VAR 0 2
34348: NOT
34349: IFFALSE 34353
// exit ;
34351: GO 34382
// for i in tmp do
34353: LD_ADDR_VAR 0 1
34357: PUSH
34358: LD_VAR 0 2
34362: PUSH
34363: FOR_IN
34364: IFFALSE 34380
// SetBLevel ( i , 10 ) ;
34366: LD_VAR 0 1
34370: PPUSH
34371: LD_INT 10
34373: PPUSH
34374: CALL_OW 241
34378: GO 34363
34380: POP
34381: POP
// end ;
34382: PPOPN 2
34384: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34385: LD_EXP 63
34389: PUSH
34390: LD_EXP 80
34394: AND
34395: IFFALSE 34506
34397: GO 34399
34399: DISABLE
34400: LD_INT 0
34402: PPUSH
34403: PPUSH
34404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_INT 22
34412: PUSH
34413: LD_OWVAR 2
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 25
34424: PUSH
34425: LD_INT 1
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PPUSH
34436: CALL_OW 69
34440: ST_TO_ADDR
// if not tmp then
34441: LD_VAR 0 3
34445: NOT
34446: IFFALSE 34450
// exit ;
34448: GO 34506
// un := tmp [ rand ( 1 , tmp ) ] ;
34450: LD_ADDR_VAR 0 2
34454: PUSH
34455: LD_VAR 0 3
34459: PUSH
34460: LD_INT 1
34462: PPUSH
34463: LD_VAR 0 3
34467: PPUSH
34468: CALL_OW 12
34472: ARRAY
34473: ST_TO_ADDR
// if Crawls ( un ) then
34474: LD_VAR 0 2
34478: PPUSH
34479: CALL_OW 318
34483: IFFALSE 34494
// ComWalk ( un ) ;
34485: LD_VAR 0 2
34489: PPUSH
34490: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34494: LD_VAR 0 2
34498: PPUSH
34499: LD_INT 5
34501: PPUSH
34502: CALL_OW 336
// end ;
34506: PPOPN 3
34508: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
34509: LD_EXP 63
34513: PUSH
34514: LD_EXP 81
34518: AND
34519: PUSH
34520: LD_OWVAR 67
34524: PUSH
34525: LD_INT 3
34527: LESS
34528: AND
34529: IFFALSE 34548
34531: GO 34533
34533: DISABLE
// Difficulty := Difficulty + 1 ;
34534: LD_ADDR_OWVAR 67
34538: PUSH
34539: LD_OWVAR 67
34543: PUSH
34544: LD_INT 1
34546: PLUS
34547: ST_TO_ADDR
34548: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34549: LD_EXP 63
34553: PUSH
34554: LD_EXP 82
34558: AND
34559: IFFALSE 34662
34561: GO 34563
34563: DISABLE
34564: LD_INT 0
34566: PPUSH
// begin for i := 1 to 5 do
34567: LD_ADDR_VAR 0 1
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_INT 5
34579: PUSH
34580: FOR_TO
34581: IFFALSE 34660
// begin uc_nation := nation_nature ;
34583: LD_ADDR_OWVAR 21
34587: PUSH
34588: LD_INT 0
34590: ST_TO_ADDR
// uc_side := 0 ;
34591: LD_ADDR_OWVAR 20
34595: PUSH
34596: LD_INT 0
34598: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34599: LD_ADDR_OWVAR 29
34603: PUSH
34604: LD_INT 12
34606: PUSH
34607: LD_INT 12
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: ST_TO_ADDR
// hc_agressivity := 20 ;
34614: LD_ADDR_OWVAR 35
34618: PUSH
34619: LD_INT 20
34621: ST_TO_ADDR
// hc_class := class_tiger ;
34622: LD_ADDR_OWVAR 28
34626: PUSH
34627: LD_INT 14
34629: ST_TO_ADDR
// hc_gallery :=  ;
34630: LD_ADDR_OWVAR 33
34634: PUSH
34635: LD_STRING 
34637: ST_TO_ADDR
// hc_name :=  ;
34638: LD_ADDR_OWVAR 26
34642: PUSH
34643: LD_STRING 
34645: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
34646: CALL_OW 44
34650: PPUSH
34651: LD_INT 0
34653: PPUSH
34654: CALL_OW 51
// end ;
34658: GO 34580
34660: POP
34661: POP
// end ;
34662: PPOPN 1
34664: END
// every 0 0$1 trigger StreamModeActive and sBomb do
34665: LD_EXP 63
34669: PUSH
34670: LD_EXP 83
34674: AND
34675: IFFALSE 34684
34677: GO 34679
34679: DISABLE
// StreamSibBomb ;
34680: CALL 34685 0 0
34684: END
// export function StreamSibBomb ; var i , x , y ; begin
34685: LD_INT 0
34687: PPUSH
34688: PPUSH
34689: PPUSH
34690: PPUSH
// result := false ;
34691: LD_ADDR_VAR 0 1
34695: PUSH
34696: LD_INT 0
34698: ST_TO_ADDR
// for i := 1 to 16 do
34699: LD_ADDR_VAR 0 2
34703: PUSH
34704: DOUBLE
34705: LD_INT 1
34707: DEC
34708: ST_TO_ADDR
34709: LD_INT 16
34711: PUSH
34712: FOR_TO
34713: IFFALSE 34912
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34715: LD_ADDR_VAR 0 3
34719: PUSH
34720: LD_INT 10
34722: PUSH
34723: LD_INT 20
34725: PUSH
34726: LD_INT 30
34728: PUSH
34729: LD_INT 40
34731: PUSH
34732: LD_INT 50
34734: PUSH
34735: LD_INT 60
34737: PUSH
34738: LD_INT 70
34740: PUSH
34741: LD_INT 80
34743: PUSH
34744: LD_INT 90
34746: PUSH
34747: LD_INT 100
34749: PUSH
34750: LD_INT 110
34752: PUSH
34753: LD_INT 120
34755: PUSH
34756: LD_INT 130
34758: PUSH
34759: LD_INT 140
34761: PUSH
34762: LD_INT 150
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 1
34784: PPUSH
34785: LD_INT 15
34787: PPUSH
34788: CALL_OW 12
34792: ARRAY
34793: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
34794: LD_ADDR_VAR 0 4
34798: PUSH
34799: LD_INT 10
34801: PUSH
34802: LD_INT 20
34804: PUSH
34805: LD_INT 30
34807: PUSH
34808: LD_INT 40
34810: PUSH
34811: LD_INT 50
34813: PUSH
34814: LD_INT 60
34816: PUSH
34817: LD_INT 70
34819: PUSH
34820: LD_INT 80
34822: PUSH
34823: LD_INT 90
34825: PUSH
34826: LD_INT 100
34828: PUSH
34829: LD_INT 110
34831: PUSH
34832: LD_INT 120
34834: PUSH
34835: LD_INT 130
34837: PUSH
34838: LD_INT 140
34840: PUSH
34841: LD_INT 150
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: PPUSH
34864: LD_INT 15
34866: PPUSH
34867: CALL_OW 12
34871: ARRAY
34872: ST_TO_ADDR
// if ValidHex ( x , y ) then
34873: LD_VAR 0 3
34877: PPUSH
34878: LD_VAR 0 4
34882: PPUSH
34883: CALL_OW 488
34887: IFFALSE 34910
// begin result := [ x , y ] ;
34889: LD_ADDR_VAR 0 1
34893: PUSH
34894: LD_VAR 0 3
34898: PUSH
34899: LD_VAR 0 4
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: ST_TO_ADDR
// break ;
34908: GO 34912
// end ; end ;
34910: GO 34712
34912: POP
34913: POP
// if result then
34914: LD_VAR 0 1
34918: IFFALSE 34978
// begin ToLua ( playSibBomb() ) ;
34920: LD_STRING playSibBomb()
34922: PPUSH
34923: CALL_OW 559
// wait ( 0 0$14 ) ;
34927: LD_INT 490
34929: PPUSH
34930: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
34934: LD_VAR 0 1
34938: PUSH
34939: LD_INT 1
34941: ARRAY
34942: PPUSH
34943: LD_VAR 0 1
34947: PUSH
34948: LD_INT 2
34950: ARRAY
34951: PPUSH
34952: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
34956: LD_VAR 0 1
34960: PUSH
34961: LD_INT 1
34963: ARRAY
34964: PPUSH
34965: LD_VAR 0 1
34969: PUSH
34970: LD_INT 2
34972: ARRAY
34973: PPUSH
34974: CALL_OW 429
// end ; end ;
34978: LD_VAR 0 1
34982: RET
// every 0 0$1 trigger StreamModeActive and sReset do
34983: LD_EXP 63
34987: PUSH
34988: LD_EXP 85
34992: AND
34993: IFFALSE 35005
34995: GO 34997
34997: DISABLE
// YouLost (  ) ;
34998: LD_STRING 
35000: PPUSH
35001: CALL_OW 104
35005: END
// every 0 0$1 trigger StreamModeActive and sFog do
35006: LD_EXP 63
35010: PUSH
35011: LD_EXP 84
35015: AND
35016: IFFALSE 35030
35018: GO 35020
35020: DISABLE
// FogOff ( your_side ) ;
35021: LD_OWVAR 2
35025: PPUSH
35026: CALL_OW 344
35030: END
// every 0 0$1 trigger StreamModeActive and sSun do
35031: LD_EXP 63
35035: PUSH
35036: LD_EXP 86
35040: AND
35041: IFFALSE 35069
35043: GO 35045
35045: DISABLE
// begin solar_recharge_percent := 0 ;
35046: LD_ADDR_OWVAR 79
35050: PUSH
35051: LD_INT 0
35053: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35054: LD_INT 10500
35056: PPUSH
35057: CALL_OW 67
// solar_recharge_percent := 100 ;
35061: LD_ADDR_OWVAR 79
35065: PUSH
35066: LD_INT 100
35068: ST_TO_ADDR
// end ;
35069: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35070: LD_EXP 63
35074: PUSH
35075: LD_EXP 87
35079: AND
35080: IFFALSE 35319
35082: GO 35084
35084: DISABLE
35085: LD_INT 0
35087: PPUSH
35088: PPUSH
35089: PPUSH
// begin tmp := [ ] ;
35090: LD_ADDR_VAR 0 3
35094: PUSH
35095: EMPTY
35096: ST_TO_ADDR
// for i := 1 to 6 do
35097: LD_ADDR_VAR 0 1
35101: PUSH
35102: DOUBLE
35103: LD_INT 1
35105: DEC
35106: ST_TO_ADDR
35107: LD_INT 6
35109: PUSH
35110: FOR_TO
35111: IFFALSE 35216
// begin uc_nation := nation_nature ;
35113: LD_ADDR_OWVAR 21
35117: PUSH
35118: LD_INT 0
35120: ST_TO_ADDR
// uc_side := 0 ;
35121: LD_ADDR_OWVAR 20
35125: PUSH
35126: LD_INT 0
35128: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35129: LD_ADDR_OWVAR 29
35133: PUSH
35134: LD_INT 12
35136: PUSH
35137: LD_INT 12
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: ST_TO_ADDR
// hc_agressivity := 20 ;
35144: LD_ADDR_OWVAR 35
35148: PUSH
35149: LD_INT 20
35151: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35152: LD_ADDR_OWVAR 28
35156: PUSH
35157: LD_INT 17
35159: ST_TO_ADDR
// hc_gallery :=  ;
35160: LD_ADDR_OWVAR 33
35164: PUSH
35165: LD_STRING 
35167: ST_TO_ADDR
// hc_name :=  ;
35168: LD_ADDR_OWVAR 26
35172: PUSH
35173: LD_STRING 
35175: ST_TO_ADDR
// un := CreateHuman ;
35176: LD_ADDR_VAR 0 2
35180: PUSH
35181: CALL_OW 44
35185: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35186: LD_VAR 0 2
35190: PPUSH
35191: LD_INT 1
35193: PPUSH
35194: CALL_OW 51
// tmp := tmp ^ un ;
35198: LD_ADDR_VAR 0 3
35202: PUSH
35203: LD_VAR 0 3
35207: PUSH
35208: LD_VAR 0 2
35212: ADD
35213: ST_TO_ADDR
// end ;
35214: GO 35110
35216: POP
35217: POP
// repeat wait ( 0 0$1 ) ;
35218: LD_INT 35
35220: PPUSH
35221: CALL_OW 67
// for un in tmp do
35225: LD_ADDR_VAR 0 2
35229: PUSH
35230: LD_VAR 0 3
35234: PUSH
35235: FOR_IN
35236: IFFALSE 35310
// begin if IsDead ( un ) then
35238: LD_VAR 0 2
35242: PPUSH
35243: CALL_OW 301
35247: IFFALSE 35267
// begin tmp := tmp diff un ;
35249: LD_ADDR_VAR 0 3
35253: PUSH
35254: LD_VAR 0 3
35258: PUSH
35259: LD_VAR 0 2
35263: DIFF
35264: ST_TO_ADDR
// continue ;
35265: GO 35235
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35267: LD_VAR 0 2
35271: PPUSH
35272: LD_INT 3
35274: PUSH
35275: LD_INT 22
35277: PUSH
35278: LD_INT 0
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: PPUSH
35289: CALL_OW 69
35293: PPUSH
35294: LD_VAR 0 2
35298: PPUSH
35299: CALL_OW 74
35303: PPUSH
35304: CALL_OW 115
// end ;
35308: GO 35235
35310: POP
35311: POP
// until not tmp ;
35312: LD_VAR 0 3
35316: NOT
35317: IFFALSE 35218
// end ;
35319: PPOPN 3
35321: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35322: LD_EXP 63
35326: PUSH
35327: LD_EXP 88
35331: AND
35332: IFFALSE 35386
35334: GO 35336
35336: DISABLE
// begin ToLua ( displayTroll(); ) ;
35337: LD_STRING displayTroll();
35339: PPUSH
35340: CALL_OW 559
// wait ( 3 3$00 ) ;
35344: LD_INT 6300
35346: PPUSH
35347: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35351: LD_STRING hideTroll();
35353: PPUSH
35354: CALL_OW 559
// wait ( 1 1$00 ) ;
35358: LD_INT 2100
35360: PPUSH
35361: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35365: LD_STRING displayTroll();
35367: PPUSH
35368: CALL_OW 559
// wait ( 1 1$00 ) ;
35372: LD_INT 2100
35374: PPUSH
35375: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35379: LD_STRING hideTroll();
35381: PPUSH
35382: CALL_OW 559
// end ;
35386: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35387: LD_EXP 63
35391: PUSH
35392: LD_EXP 89
35396: AND
35397: IFFALSE 35460
35399: GO 35401
35401: DISABLE
35402: LD_INT 0
35404: PPUSH
// begin p := 0 ;
35405: LD_ADDR_VAR 0 1
35409: PUSH
35410: LD_INT 0
35412: ST_TO_ADDR
// repeat game_speed := 1 ;
35413: LD_ADDR_OWVAR 65
35417: PUSH
35418: LD_INT 1
35420: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35421: LD_INT 35
35423: PPUSH
35424: CALL_OW 67
// p := p + 1 ;
35428: LD_ADDR_VAR 0 1
35432: PUSH
35433: LD_VAR 0 1
35437: PUSH
35438: LD_INT 1
35440: PLUS
35441: ST_TO_ADDR
// until p >= 60 ;
35442: LD_VAR 0 1
35446: PUSH
35447: LD_INT 60
35449: GREATEREQUAL
35450: IFFALSE 35413
// game_speed := 4 ;
35452: LD_ADDR_OWVAR 65
35456: PUSH
35457: LD_INT 4
35459: ST_TO_ADDR
// end ;
35460: PPOPN 1
35462: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35463: LD_EXP 63
35467: PUSH
35468: LD_EXP 90
35472: AND
35473: IFFALSE 35619
35475: GO 35477
35477: DISABLE
35478: LD_INT 0
35480: PPUSH
35481: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35482: LD_ADDR_VAR 0 1
35486: PUSH
35487: LD_INT 22
35489: PUSH
35490: LD_OWVAR 2
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 2
35501: PUSH
35502: LD_INT 30
35504: PUSH
35505: LD_INT 0
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 30
35514: PUSH
35515: LD_INT 1
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: LIST
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PPUSH
35531: CALL_OW 69
35535: ST_TO_ADDR
// if not depot then
35536: LD_VAR 0 1
35540: NOT
35541: IFFALSE 35545
// exit ;
35543: GO 35619
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35545: LD_ADDR_VAR 0 2
35549: PUSH
35550: LD_VAR 0 1
35554: PUSH
35555: LD_INT 1
35557: PPUSH
35558: LD_VAR 0 1
35562: PPUSH
35563: CALL_OW 12
35567: ARRAY
35568: PPUSH
35569: CALL_OW 274
35573: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35574: LD_VAR 0 2
35578: PPUSH
35579: LD_INT 1
35581: PPUSH
35582: LD_INT 0
35584: PPUSH
35585: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35589: LD_VAR 0 2
35593: PPUSH
35594: LD_INT 2
35596: PPUSH
35597: LD_INT 0
35599: PPUSH
35600: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35604: LD_VAR 0 2
35608: PPUSH
35609: LD_INT 3
35611: PPUSH
35612: LD_INT 0
35614: PPUSH
35615: CALL_OW 277
// end ;
35619: PPOPN 2
35621: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35622: LD_EXP 63
35626: PUSH
35627: LD_EXP 91
35631: AND
35632: IFFALSE 35729
35634: GO 35636
35636: DISABLE
35637: LD_INT 0
35639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
35640: LD_ADDR_VAR 0 1
35644: PUSH
35645: LD_INT 22
35647: PUSH
35648: LD_OWVAR 2
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 21
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 3
35669: PUSH
35670: LD_INT 23
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: LIST
35688: PPUSH
35689: CALL_OW 69
35693: ST_TO_ADDR
// if not tmp then
35694: LD_VAR 0 1
35698: NOT
35699: IFFALSE 35703
// exit ;
35701: GO 35729
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
35703: LD_VAR 0 1
35707: PUSH
35708: LD_INT 1
35710: PPUSH
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 12
35720: ARRAY
35721: PPUSH
35722: LD_INT 200
35724: PPUSH
35725: CALL_OW 234
// end ;
35729: PPOPN 1
35731: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
35732: LD_EXP 63
35736: PUSH
35737: LD_EXP 92
35741: AND
35742: IFFALSE 35821
35744: GO 35746
35746: DISABLE
35747: LD_INT 0
35749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
35750: LD_ADDR_VAR 0 1
35754: PUSH
35755: LD_INT 22
35757: PUSH
35758: LD_OWVAR 2
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 21
35769: PUSH
35770: LD_INT 2
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PPUSH
35781: CALL_OW 69
35785: ST_TO_ADDR
// if not tmp then
35786: LD_VAR 0 1
35790: NOT
35791: IFFALSE 35795
// exit ;
35793: GO 35821
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
35795: LD_VAR 0 1
35799: PUSH
35800: LD_INT 1
35802: PPUSH
35803: LD_VAR 0 1
35807: PPUSH
35808: CALL_OW 12
35812: ARRAY
35813: PPUSH
35814: LD_INT 60
35816: PPUSH
35817: CALL_OW 234
// end ;
35821: PPOPN 1
35823: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
35824: LD_EXP 63
35828: PUSH
35829: LD_EXP 93
35833: AND
35834: IFFALSE 35933
35836: GO 35838
35838: DISABLE
35839: LD_INT 0
35841: PPUSH
35842: PPUSH
// begin enable ;
35843: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
35844: LD_ADDR_VAR 0 1
35848: PUSH
35849: LD_INT 22
35851: PUSH
35852: LD_OWVAR 2
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 61
35863: PUSH
35864: EMPTY
35865: LIST
35866: PUSH
35867: LD_INT 33
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PPUSH
35882: CALL_OW 69
35886: ST_TO_ADDR
// if not tmp then
35887: LD_VAR 0 1
35891: NOT
35892: IFFALSE 35896
// exit ;
35894: GO 35933
// for i in tmp do
35896: LD_ADDR_VAR 0 2
35900: PUSH
35901: LD_VAR 0 1
35905: PUSH
35906: FOR_IN
35907: IFFALSE 35931
// if IsControledBy ( i ) then
35909: LD_VAR 0 2
35913: PPUSH
35914: CALL_OW 312
35918: IFFALSE 35929
// ComUnlink ( i ) ;
35920: LD_VAR 0 2
35924: PPUSH
35925: CALL_OW 136
35929: GO 35906
35931: POP
35932: POP
// end ;
35933: PPOPN 2
35935: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
35936: LD_EXP 63
35940: PUSH
35941: LD_EXP 94
35945: AND
35946: IFFALSE 36086
35948: GO 35950
35950: DISABLE
35951: LD_INT 0
35953: PPUSH
35954: PPUSH
// begin ToLua ( displayPowell(); ) ;
35955: LD_STRING displayPowell();
35957: PPUSH
35958: CALL_OW 559
// uc_side := 0 ;
35962: LD_ADDR_OWVAR 20
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
// uc_nation := 2 ;
35970: LD_ADDR_OWVAR 21
35974: PUSH
35975: LD_INT 2
35977: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
35978: LD_ADDR_OWVAR 37
35982: PUSH
35983: LD_INT 14
35985: ST_TO_ADDR
// vc_engine := engine_siberite ;
35986: LD_ADDR_OWVAR 39
35990: PUSH
35991: LD_INT 3
35993: ST_TO_ADDR
// vc_control := control_apeman ;
35994: LD_ADDR_OWVAR 38
35998: PUSH
35999: LD_INT 5
36001: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36002: LD_ADDR_OWVAR 40
36006: PUSH
36007: LD_INT 29
36009: ST_TO_ADDR
// un := CreateVehicle ;
36010: LD_ADDR_VAR 0 2
36014: PUSH
36015: CALL_OW 45
36019: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36020: LD_VAR 0 2
36024: PPUSH
36025: LD_INT 1
36027: PPUSH
36028: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36032: LD_INT 35
36034: PPUSH
36035: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36039: LD_VAR 0 2
36043: PPUSH
36044: LD_INT 22
36046: PUSH
36047: LD_OWVAR 2
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PPUSH
36056: CALL_OW 69
36060: PPUSH
36061: LD_VAR 0 2
36065: PPUSH
36066: CALL_OW 74
36070: PPUSH
36071: CALL_OW 115
// until IsDead ( un ) ;
36075: LD_VAR 0 2
36079: PPUSH
36080: CALL_OW 301
36084: IFFALSE 36032
// end ;
36086: PPOPN 2
36088: END
// every 0 0$1 trigger StreamModeActive and sStu do
36089: LD_EXP 63
36093: PUSH
36094: LD_EXP 102
36098: AND
36099: IFFALSE 36115
36101: GO 36103
36103: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36104: LD_STRING displayStucuk();
36106: PPUSH
36107: CALL_OW 559
// ResetFog ;
36111: CALL_OW 335
// end ;
36115: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36116: LD_EXP 63
36120: PUSH
36121: LD_EXP 95
36125: AND
36126: IFFALSE 36267
36128: GO 36130
36130: DISABLE
36131: LD_INT 0
36133: PPUSH
36134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36135: LD_ADDR_VAR 0 2
36139: PUSH
36140: LD_INT 22
36142: PUSH
36143: LD_OWVAR 2
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 21
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: EMPTY
36163: LIST
36164: LIST
36165: PPUSH
36166: CALL_OW 69
36170: ST_TO_ADDR
// if not tmp then
36171: LD_VAR 0 2
36175: NOT
36176: IFFALSE 36180
// exit ;
36178: GO 36267
// un := tmp [ rand ( 1 , tmp ) ] ;
36180: LD_ADDR_VAR 0 1
36184: PUSH
36185: LD_VAR 0 2
36189: PUSH
36190: LD_INT 1
36192: PPUSH
36193: LD_VAR 0 2
36197: PPUSH
36198: CALL_OW 12
36202: ARRAY
36203: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36204: LD_VAR 0 1
36208: PPUSH
36209: LD_INT 0
36211: PPUSH
36212: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36216: LD_VAR 0 1
36220: PPUSH
36221: LD_OWVAR 3
36225: PUSH
36226: LD_VAR 0 1
36230: DIFF
36231: PPUSH
36232: LD_VAR 0 1
36236: PPUSH
36237: CALL_OW 74
36241: PPUSH
36242: CALL_OW 115
// wait ( 0 0$20 ) ;
36246: LD_INT 700
36248: PPUSH
36249: CALL_OW 67
// SetSide ( un , your_side ) ;
36253: LD_VAR 0 1
36257: PPUSH
36258: LD_OWVAR 2
36262: PPUSH
36263: CALL_OW 235
// end ;
36267: PPOPN 2
36269: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36270: LD_EXP 63
36274: PUSH
36275: LD_EXP 96
36279: AND
36280: IFFALSE 36386
36282: GO 36284
36284: DISABLE
36285: LD_INT 0
36287: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36288: LD_ADDR_VAR 0 1
36292: PUSH
36293: LD_INT 22
36295: PUSH
36296: LD_OWVAR 2
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 2
36307: PUSH
36308: LD_INT 30
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 30
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: LIST
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PPUSH
36337: CALL_OW 69
36341: ST_TO_ADDR
// if not depot then
36342: LD_VAR 0 1
36346: NOT
36347: IFFALSE 36351
// exit ;
36349: GO 36386
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36351: LD_VAR 0 1
36355: PUSH
36356: LD_INT 1
36358: ARRAY
36359: PPUSH
36360: CALL_OW 250
36364: PPUSH
36365: LD_VAR 0 1
36369: PUSH
36370: LD_INT 1
36372: ARRAY
36373: PPUSH
36374: CALL_OW 251
36378: PPUSH
36379: LD_INT 70
36381: PPUSH
36382: CALL_OW 495
// end ;
36386: PPOPN 1
36388: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36389: LD_EXP 63
36393: PUSH
36394: LD_EXP 97
36398: AND
36399: IFFALSE 36610
36401: GO 36403
36403: DISABLE
36404: LD_INT 0
36406: PPUSH
36407: PPUSH
36408: PPUSH
36409: PPUSH
36410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36411: LD_ADDR_VAR 0 5
36415: PUSH
36416: LD_INT 22
36418: PUSH
36419: LD_OWVAR 2
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: PUSH
36428: LD_INT 21
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PPUSH
36442: CALL_OW 69
36446: ST_TO_ADDR
// if not tmp then
36447: LD_VAR 0 5
36451: NOT
36452: IFFALSE 36456
// exit ;
36454: GO 36610
// for i in tmp do
36456: LD_ADDR_VAR 0 1
36460: PUSH
36461: LD_VAR 0 5
36465: PUSH
36466: FOR_IN
36467: IFFALSE 36608
// begin d := rand ( 0 , 5 ) ;
36469: LD_ADDR_VAR 0 4
36473: PUSH
36474: LD_INT 0
36476: PPUSH
36477: LD_INT 5
36479: PPUSH
36480: CALL_OW 12
36484: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36485: LD_ADDR_VAR 0 2
36489: PUSH
36490: LD_VAR 0 1
36494: PPUSH
36495: CALL_OW 250
36499: PPUSH
36500: LD_VAR 0 4
36504: PPUSH
36505: LD_INT 3
36507: PPUSH
36508: LD_INT 12
36510: PPUSH
36511: CALL_OW 12
36515: PPUSH
36516: CALL_OW 272
36520: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_VAR 0 1
36530: PPUSH
36531: CALL_OW 251
36535: PPUSH
36536: LD_VAR 0 4
36540: PPUSH
36541: LD_INT 3
36543: PPUSH
36544: LD_INT 12
36546: PPUSH
36547: CALL_OW 12
36551: PPUSH
36552: CALL_OW 273
36556: ST_TO_ADDR
// if ValidHex ( x , y ) then
36557: LD_VAR 0 2
36561: PPUSH
36562: LD_VAR 0 3
36566: PPUSH
36567: CALL_OW 488
36571: IFFALSE 36606
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36573: LD_VAR 0 1
36577: PPUSH
36578: LD_VAR 0 2
36582: PPUSH
36583: LD_VAR 0 3
36587: PPUSH
36588: LD_INT 3
36590: PPUSH
36591: LD_INT 6
36593: PPUSH
36594: CALL_OW 12
36598: PPUSH
36599: LD_INT 1
36601: PPUSH
36602: CALL_OW 483
// end ;
36606: GO 36466
36608: POP
36609: POP
// end ;
36610: PPOPN 5
36612: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36613: LD_EXP 63
36617: PUSH
36618: LD_EXP 98
36622: AND
36623: IFFALSE 36717
36625: GO 36627
36627: DISABLE
36628: LD_INT 0
36630: PPUSH
36631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
36632: LD_ADDR_VAR 0 2
36636: PUSH
36637: LD_INT 22
36639: PUSH
36640: LD_OWVAR 2
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 32
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 21
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: LIST
36673: PPUSH
36674: CALL_OW 69
36678: ST_TO_ADDR
// if not tmp then
36679: LD_VAR 0 2
36683: NOT
36684: IFFALSE 36688
// exit ;
36686: GO 36717
// for i in tmp do
36688: LD_ADDR_VAR 0 1
36692: PUSH
36693: LD_VAR 0 2
36697: PUSH
36698: FOR_IN
36699: IFFALSE 36715
// SetFuel ( i , 0 ) ;
36701: LD_VAR 0 1
36705: PPUSH
36706: LD_INT 0
36708: PPUSH
36709: CALL_OW 240
36713: GO 36698
36715: POP
36716: POP
// end ;
36717: PPOPN 2
36719: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
36720: LD_EXP 63
36724: PUSH
36725: LD_EXP 99
36729: AND
36730: IFFALSE 36796
36732: GO 36734
36734: DISABLE
36735: LD_INT 0
36737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
36738: LD_ADDR_VAR 0 1
36742: PUSH
36743: LD_INT 22
36745: PUSH
36746: LD_OWVAR 2
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 30
36757: PUSH
36758: LD_INT 29
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PPUSH
36769: CALL_OW 69
36773: ST_TO_ADDR
// if not tmp then
36774: LD_VAR 0 1
36778: NOT
36779: IFFALSE 36783
// exit ;
36781: GO 36796
// DestroyUnit ( tmp [ 1 ] ) ;
36783: LD_VAR 0 1
36787: PUSH
36788: LD_INT 1
36790: ARRAY
36791: PPUSH
36792: CALL_OW 65
// end ;
36796: PPOPN 1
36798: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
36799: LD_EXP 63
36803: PUSH
36804: LD_EXP 101
36808: AND
36809: IFFALSE 36938
36811: GO 36813
36813: DISABLE
36814: LD_INT 0
36816: PPUSH
// begin uc_side := 0 ;
36817: LD_ADDR_OWVAR 20
36821: PUSH
36822: LD_INT 0
36824: ST_TO_ADDR
// uc_nation := nation_arabian ;
36825: LD_ADDR_OWVAR 21
36829: PUSH
36830: LD_INT 2
36832: ST_TO_ADDR
// hc_gallery :=  ;
36833: LD_ADDR_OWVAR 33
36837: PUSH
36838: LD_STRING 
36840: ST_TO_ADDR
// hc_name :=  ;
36841: LD_ADDR_OWVAR 26
36845: PUSH
36846: LD_STRING 
36848: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
36849: LD_INT 1
36851: PPUSH
36852: LD_INT 11
36854: PPUSH
36855: LD_INT 10
36857: PPUSH
36858: CALL_OW 380
// un := CreateHuman ;
36862: LD_ADDR_VAR 0 1
36866: PUSH
36867: CALL_OW 44
36871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36872: LD_VAR 0 1
36876: PPUSH
36877: LD_INT 1
36879: PPUSH
36880: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36884: LD_INT 35
36886: PPUSH
36887: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36891: LD_VAR 0 1
36895: PPUSH
36896: LD_INT 22
36898: PUSH
36899: LD_OWVAR 2
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PPUSH
36908: CALL_OW 69
36912: PPUSH
36913: LD_VAR 0 1
36917: PPUSH
36918: CALL_OW 74
36922: PPUSH
36923: CALL_OW 115
// until IsDead ( un ) ;
36927: LD_VAR 0 1
36931: PPUSH
36932: CALL_OW 301
36936: IFFALSE 36884
// end ;
36938: PPOPN 1
36940: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
36941: LD_EXP 63
36945: PUSH
36946: LD_EXP 103
36950: AND
36951: IFFALSE 36963
36953: GO 36955
36955: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
36956: LD_STRING earthquake(getX(game), 0, 32)
36958: PPUSH
36959: CALL_OW 559
36963: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
36964: LD_EXP 63
36968: PUSH
36969: LD_EXP 104
36973: AND
36974: IFFALSE 37065
36976: GO 36978
36978: DISABLE
36979: LD_INT 0
36981: PPUSH
// begin enable ;
36982: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
36983: LD_ADDR_VAR 0 1
36987: PUSH
36988: LD_INT 22
36990: PUSH
36991: LD_OWVAR 2
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 21
37002: PUSH
37003: LD_INT 2
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 33
37012: PUSH
37013: LD_INT 3
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: PPUSH
37025: CALL_OW 69
37029: ST_TO_ADDR
// if not tmp then
37030: LD_VAR 0 1
37034: NOT
37035: IFFALSE 37039
// exit ;
37037: GO 37065
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37039: LD_VAR 0 1
37043: PUSH
37044: LD_INT 1
37046: PPUSH
37047: LD_VAR 0 1
37051: PPUSH
37052: CALL_OW 12
37056: ARRAY
37057: PPUSH
37058: LD_INT 1
37060: PPUSH
37061: CALL_OW 234
// end ;
37065: PPOPN 1
37067: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37068: LD_EXP 63
37072: PUSH
37073: LD_EXP 105
37077: AND
37078: IFFALSE 37219
37080: GO 37082
37082: DISABLE
37083: LD_INT 0
37085: PPUSH
37086: PPUSH
37087: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_INT 22
37095: PUSH
37096: LD_OWVAR 2
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 25
37107: PUSH
37108: LD_INT 1
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PPUSH
37119: CALL_OW 69
37123: ST_TO_ADDR
// if not tmp then
37124: LD_VAR 0 3
37128: NOT
37129: IFFALSE 37133
// exit ;
37131: GO 37219
// un := tmp [ rand ( 1 , tmp ) ] ;
37133: LD_ADDR_VAR 0 2
37137: PUSH
37138: LD_VAR 0 3
37142: PUSH
37143: LD_INT 1
37145: PPUSH
37146: LD_VAR 0 3
37150: PPUSH
37151: CALL_OW 12
37155: ARRAY
37156: ST_TO_ADDR
// if Crawls ( un ) then
37157: LD_VAR 0 2
37161: PPUSH
37162: CALL_OW 318
37166: IFFALSE 37177
// ComWalk ( un ) ;
37168: LD_VAR 0 2
37172: PPUSH
37173: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37177: LD_VAR 0 2
37181: PPUSH
37182: LD_INT 9
37184: PPUSH
37185: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37189: LD_INT 28
37191: PPUSH
37192: LD_OWVAR 2
37196: PPUSH
37197: LD_INT 2
37199: PPUSH
37200: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37204: LD_INT 29
37206: PPUSH
37207: LD_OWVAR 2
37211: PPUSH
37212: LD_INT 2
37214: PPUSH
37215: CALL_OW 322
// end ;
37219: PPOPN 3
37221: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37222: LD_EXP 63
37226: PUSH
37227: LD_EXP 106
37231: AND
37232: IFFALSE 37343
37234: GO 37236
37236: DISABLE
37237: LD_INT 0
37239: PPUSH
37240: PPUSH
37241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37242: LD_ADDR_VAR 0 3
37246: PUSH
37247: LD_INT 22
37249: PUSH
37250: LD_OWVAR 2
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: PUSH
37259: LD_INT 25
37261: PUSH
37262: LD_INT 1
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PPUSH
37273: CALL_OW 69
37277: ST_TO_ADDR
// if not tmp then
37278: LD_VAR 0 3
37282: NOT
37283: IFFALSE 37287
// exit ;
37285: GO 37343
// un := tmp [ rand ( 1 , tmp ) ] ;
37287: LD_ADDR_VAR 0 2
37291: PUSH
37292: LD_VAR 0 3
37296: PUSH
37297: LD_INT 1
37299: PPUSH
37300: LD_VAR 0 3
37304: PPUSH
37305: CALL_OW 12
37309: ARRAY
37310: ST_TO_ADDR
// if Crawls ( un ) then
37311: LD_VAR 0 2
37315: PPUSH
37316: CALL_OW 318
37320: IFFALSE 37331
// ComWalk ( un ) ;
37322: LD_VAR 0 2
37326: PPUSH
37327: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37331: LD_VAR 0 2
37335: PPUSH
37336: LD_INT 8
37338: PPUSH
37339: CALL_OW 336
// end ;
37343: PPOPN 3
37345: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37346: LD_EXP 63
37350: PUSH
37351: LD_EXP 107
37355: AND
37356: IFFALSE 37500
37358: GO 37360
37360: DISABLE
37361: LD_INT 0
37363: PPUSH
37364: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37365: LD_ADDR_VAR 0 2
37369: PUSH
37370: LD_INT 22
37372: PUSH
37373: LD_OWVAR 2
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: LD_INT 21
37384: PUSH
37385: LD_INT 2
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: PUSH
37392: LD_INT 2
37394: PUSH
37395: LD_INT 34
37397: PUSH
37398: LD_INT 12
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 34
37407: PUSH
37408: LD_INT 51
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 34
37417: PUSH
37418: LD_INT 32
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: PPUSH
37436: CALL_OW 69
37440: ST_TO_ADDR
// if not tmp then
37441: LD_VAR 0 2
37445: NOT
37446: IFFALSE 37450
// exit ;
37448: GO 37500
// for i in tmp do
37450: LD_ADDR_VAR 0 1
37454: PUSH
37455: LD_VAR 0 2
37459: PUSH
37460: FOR_IN
37461: IFFALSE 37498
// if GetCargo ( i , mat_artifact ) = 0 then
37463: LD_VAR 0 1
37467: PPUSH
37468: LD_INT 4
37470: PPUSH
37471: CALL_OW 289
37475: PUSH
37476: LD_INT 0
37478: EQUAL
37479: IFFALSE 37496
// SetCargo ( i , mat_siberit , 100 ) ;
37481: LD_VAR 0 1
37485: PPUSH
37486: LD_INT 3
37488: PPUSH
37489: LD_INT 100
37491: PPUSH
37492: CALL_OW 290
37496: GO 37460
37498: POP
37499: POP
// end ;
37500: PPOPN 2
37502: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37503: LD_EXP 63
37507: PUSH
37508: LD_EXP 108
37512: AND
37513: IFFALSE 37696
37515: GO 37517
37517: DISABLE
37518: LD_INT 0
37520: PPUSH
37521: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37522: LD_ADDR_VAR 0 2
37526: PUSH
37527: LD_INT 22
37529: PUSH
37530: LD_OWVAR 2
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PPUSH
37539: CALL_OW 69
37543: ST_TO_ADDR
// if not tmp then
37544: LD_VAR 0 2
37548: NOT
37549: IFFALSE 37553
// exit ;
37551: GO 37696
// for i := 1 to 2 do
37553: LD_ADDR_VAR 0 1
37557: PUSH
37558: DOUBLE
37559: LD_INT 1
37561: DEC
37562: ST_TO_ADDR
37563: LD_INT 2
37565: PUSH
37566: FOR_TO
37567: IFFALSE 37694
// begin uc_side := your_side ;
37569: LD_ADDR_OWVAR 20
37573: PUSH
37574: LD_OWVAR 2
37578: ST_TO_ADDR
// uc_nation := nation_american ;
37579: LD_ADDR_OWVAR 21
37583: PUSH
37584: LD_INT 1
37586: ST_TO_ADDR
// vc_chassis := us_morphling ;
37587: LD_ADDR_OWVAR 37
37591: PUSH
37592: LD_INT 5
37594: ST_TO_ADDR
// vc_engine := engine_siberite ;
37595: LD_ADDR_OWVAR 39
37599: PUSH
37600: LD_INT 3
37602: ST_TO_ADDR
// vc_control := control_computer ;
37603: LD_ADDR_OWVAR 38
37607: PUSH
37608: LD_INT 3
37610: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37611: LD_ADDR_OWVAR 40
37615: PUSH
37616: LD_INT 10
37618: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37619: LD_VAR 0 2
37623: PUSH
37624: LD_INT 1
37626: ARRAY
37627: PPUSH
37628: CALL_OW 310
37632: NOT
37633: IFFALSE 37680
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
37635: CALL_OW 45
37639: PPUSH
37640: LD_VAR 0 2
37644: PUSH
37645: LD_INT 1
37647: ARRAY
37648: PPUSH
37649: CALL_OW 250
37653: PPUSH
37654: LD_VAR 0 2
37658: PUSH
37659: LD_INT 1
37661: ARRAY
37662: PPUSH
37663: CALL_OW 251
37667: PPUSH
37668: LD_INT 12
37670: PPUSH
37671: LD_INT 1
37673: PPUSH
37674: CALL_OW 50
37678: GO 37692
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
37680: CALL_OW 45
37684: PPUSH
37685: LD_INT 1
37687: PPUSH
37688: CALL_OW 51
// end ;
37692: GO 37566
37694: POP
37695: POP
// end ;
37696: PPOPN 2
37698: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
37699: LD_EXP 63
37703: PUSH
37704: LD_EXP 109
37708: AND
37709: IFFALSE 37931
37711: GO 37713
37713: DISABLE
37714: LD_INT 0
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
37721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37722: LD_ADDR_VAR 0 6
37726: PUSH
37727: LD_INT 22
37729: PUSH
37730: LD_OWVAR 2
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 21
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 3
37751: PUSH
37752: LD_INT 23
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: PPUSH
37771: CALL_OW 69
37775: ST_TO_ADDR
// if not tmp then
37776: LD_VAR 0 6
37780: NOT
37781: IFFALSE 37785
// exit ;
37783: GO 37931
// s1 := rand ( 1 , 4 ) ;
37785: LD_ADDR_VAR 0 2
37789: PUSH
37790: LD_INT 1
37792: PPUSH
37793: LD_INT 4
37795: PPUSH
37796: CALL_OW 12
37800: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
37801: LD_ADDR_VAR 0 4
37805: PUSH
37806: LD_VAR 0 6
37810: PUSH
37811: LD_INT 1
37813: ARRAY
37814: PPUSH
37815: LD_VAR 0 2
37819: PPUSH
37820: CALL_OW 259
37824: ST_TO_ADDR
// if s1 = 1 then
37825: LD_VAR 0 2
37829: PUSH
37830: LD_INT 1
37832: EQUAL
37833: IFFALSE 37853
// s2 := rand ( 2 , 4 ) else
37835: LD_ADDR_VAR 0 3
37839: PUSH
37840: LD_INT 2
37842: PPUSH
37843: LD_INT 4
37845: PPUSH
37846: CALL_OW 12
37850: ST_TO_ADDR
37851: GO 37861
// s2 := 1 ;
37853: LD_ADDR_VAR 0 3
37857: PUSH
37858: LD_INT 1
37860: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
37861: LD_ADDR_VAR 0 5
37865: PUSH
37866: LD_VAR 0 6
37870: PUSH
37871: LD_INT 1
37873: ARRAY
37874: PPUSH
37875: LD_VAR 0 3
37879: PPUSH
37880: CALL_OW 259
37884: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
37885: LD_VAR 0 6
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: PPUSH
37894: LD_VAR 0 2
37898: PPUSH
37899: LD_VAR 0 5
37903: PPUSH
37904: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
37908: LD_VAR 0 6
37912: PUSH
37913: LD_INT 1
37915: ARRAY
37916: PPUSH
37917: LD_VAR 0 3
37921: PPUSH
37922: LD_VAR 0 4
37926: PPUSH
37927: CALL_OW 237
// end ;
37931: PPOPN 6
37933: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
37934: LD_EXP 63
37938: PUSH
37939: LD_EXP 110
37943: AND
37944: IFFALSE 38023
37946: GO 37948
37948: DISABLE
37949: LD_INT 0
37951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
37952: LD_ADDR_VAR 0 1
37956: PUSH
37957: LD_INT 22
37959: PUSH
37960: LD_OWVAR 2
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 30
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PPUSH
37983: CALL_OW 69
37987: ST_TO_ADDR
// if not tmp then
37988: LD_VAR 0 1
37992: NOT
37993: IFFALSE 37997
// exit ;
37995: GO 38023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37997: LD_VAR 0 1
38001: PUSH
38002: LD_INT 1
38004: PPUSH
38005: LD_VAR 0 1
38009: PPUSH
38010: CALL_OW 12
38014: ARRAY
38015: PPUSH
38016: LD_INT 1
38018: PPUSH
38019: CALL_OW 234
// end ;
38023: PPOPN 1
38025: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38026: LD_EXP 63
38030: PUSH
38031: LD_EXP 111
38035: AND
38036: IFFALSE 38148
38038: GO 38040
38040: DISABLE
38041: LD_INT 0
38043: PPUSH
38044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38045: LD_ADDR_VAR 0 2
38049: PUSH
38050: LD_INT 22
38052: PUSH
38053: LD_OWVAR 2
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 2
38064: PUSH
38065: LD_INT 30
38067: PUSH
38068: LD_INT 27
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 30
38077: PUSH
38078: LD_INT 26
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 30
38087: PUSH
38088: LD_INT 28
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PPUSH
38105: CALL_OW 69
38109: ST_TO_ADDR
// if not tmp then
38110: LD_VAR 0 2
38114: NOT
38115: IFFALSE 38119
// exit ;
38117: GO 38148
// for i in tmp do
38119: LD_ADDR_VAR 0 1
38123: PUSH
38124: LD_VAR 0 2
38128: PUSH
38129: FOR_IN
38130: IFFALSE 38146
// SetLives ( i , 1 ) ;
38132: LD_VAR 0 1
38136: PPUSH
38137: LD_INT 1
38139: PPUSH
38140: CALL_OW 234
38144: GO 38129
38146: POP
38147: POP
// end ;
38148: PPOPN 2
38150: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38151: LD_EXP 63
38155: PUSH
38156: LD_EXP 112
38160: AND
38161: IFFALSE 38435
38163: GO 38165
38165: DISABLE
38166: LD_INT 0
38168: PPUSH
38169: PPUSH
38170: PPUSH
// begin i := rand ( 1 , 7 ) ;
38171: LD_ADDR_VAR 0 1
38175: PUSH
38176: LD_INT 1
38178: PPUSH
38179: LD_INT 7
38181: PPUSH
38182: CALL_OW 12
38186: ST_TO_ADDR
// case i of 1 :
38187: LD_VAR 0 1
38191: PUSH
38192: LD_INT 1
38194: DOUBLE
38195: EQUAL
38196: IFTRUE 38200
38198: GO 38210
38200: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38201: LD_STRING earthquake(getX(game), 0, 32)
38203: PPUSH
38204: CALL_OW 559
38208: GO 38435
38210: LD_INT 2
38212: DOUBLE
38213: EQUAL
38214: IFTRUE 38218
38216: GO 38232
38218: POP
// begin ToLua ( displayStucuk(); ) ;
38219: LD_STRING displayStucuk();
38221: PPUSH
38222: CALL_OW 559
// ResetFog ;
38226: CALL_OW 335
// end ; 3 :
38230: GO 38435
38232: LD_INT 3
38234: DOUBLE
38235: EQUAL
38236: IFTRUE 38240
38238: GO 38344
38240: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38241: LD_ADDR_VAR 0 2
38245: PUSH
38246: LD_INT 22
38248: PUSH
38249: LD_OWVAR 2
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 25
38260: PUSH
38261: LD_INT 1
38263: PUSH
38264: EMPTY
38265: LIST
38266: LIST
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PPUSH
38272: CALL_OW 69
38276: ST_TO_ADDR
// if not tmp then
38277: LD_VAR 0 2
38281: NOT
38282: IFFALSE 38286
// exit ;
38284: GO 38435
// un := tmp [ rand ( 1 , tmp ) ] ;
38286: LD_ADDR_VAR 0 3
38290: PUSH
38291: LD_VAR 0 2
38295: PUSH
38296: LD_INT 1
38298: PPUSH
38299: LD_VAR 0 2
38303: PPUSH
38304: CALL_OW 12
38308: ARRAY
38309: ST_TO_ADDR
// if Crawls ( un ) then
38310: LD_VAR 0 3
38314: PPUSH
38315: CALL_OW 318
38319: IFFALSE 38330
// ComWalk ( un ) ;
38321: LD_VAR 0 3
38325: PPUSH
38326: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38330: LD_VAR 0 3
38334: PPUSH
38335: LD_INT 8
38337: PPUSH
38338: CALL_OW 336
// end ; 4 :
38342: GO 38435
38344: LD_INT 4
38346: DOUBLE
38347: EQUAL
38348: IFTRUE 38352
38350: GO 38413
38352: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38353: LD_ADDR_VAR 0 2
38357: PUSH
38358: LD_INT 22
38360: PUSH
38361: LD_OWVAR 2
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 30
38372: PUSH
38373: LD_INT 29
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: EMPTY
38381: LIST
38382: LIST
38383: PPUSH
38384: CALL_OW 69
38388: ST_TO_ADDR
// if not tmp then
38389: LD_VAR 0 2
38393: NOT
38394: IFFALSE 38398
// exit ;
38396: GO 38435
// DestroyUnit ( tmp [ 1 ] ) ;
38398: LD_VAR 0 2
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: CALL_OW 65
// end ; 5 .. 7 :
38411: GO 38435
38413: LD_INT 5
38415: DOUBLE
38416: GREATEREQUAL
38417: IFFALSE 38425
38419: LD_INT 7
38421: DOUBLE
38422: LESSEQUAL
38423: IFTRUE 38427
38425: GO 38434
38427: POP
// StreamSibBomb ; end ;
38428: CALL 34685 0 0
38432: GO 38435
38434: POP
// end ;
38435: PPOPN 3
38437: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38438: LD_EXP 63
38442: PUSH
38443: LD_EXP 113
38447: AND
38448: IFFALSE 38604
38450: GO 38452
38452: DISABLE
38453: LD_INT 0
38455: PPUSH
38456: PPUSH
38457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38458: LD_ADDR_VAR 0 2
38462: PUSH
38463: LD_INT 81
38465: PUSH
38466: LD_OWVAR 2
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 21
38480: PUSH
38481: LD_INT 1
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 21
38490: PUSH
38491: LD_INT 2
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PPUSH
38507: CALL_OW 69
38511: ST_TO_ADDR
// if not tmp then
38512: LD_VAR 0 2
38516: NOT
38517: IFFALSE 38521
// exit ;
38519: GO 38604
// p := 0 ;
38521: LD_ADDR_VAR 0 3
38525: PUSH
38526: LD_INT 0
38528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38529: LD_INT 35
38531: PPUSH
38532: CALL_OW 67
// p := p + 1 ;
38536: LD_ADDR_VAR 0 3
38540: PUSH
38541: LD_VAR 0 3
38545: PUSH
38546: LD_INT 1
38548: PLUS
38549: ST_TO_ADDR
// for i in tmp do
38550: LD_ADDR_VAR 0 1
38554: PUSH
38555: LD_VAR 0 2
38559: PUSH
38560: FOR_IN
38561: IFFALSE 38592
// if GetLives ( i ) < 1000 then
38563: LD_VAR 0 1
38567: PPUSH
38568: CALL_OW 256
38572: PUSH
38573: LD_INT 1000
38575: LESS
38576: IFFALSE 38590
// SetLives ( i , 1000 ) ;
38578: LD_VAR 0 1
38582: PPUSH
38583: LD_INT 1000
38585: PPUSH
38586: CALL_OW 234
38590: GO 38560
38592: POP
38593: POP
// until p > 20 ;
38594: LD_VAR 0 3
38598: PUSH
38599: LD_INT 20
38601: GREATER
38602: IFFALSE 38529
// end ;
38604: PPOPN 3
38606: END
// every 0 0$1 trigger StreamModeActive and sTime do
38607: LD_EXP 63
38611: PUSH
38612: LD_EXP 114
38616: AND
38617: IFFALSE 38652
38619: GO 38621
38621: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
38622: LD_INT 28
38624: PPUSH
38625: LD_OWVAR 2
38629: PPUSH
38630: LD_INT 2
38632: PPUSH
38633: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
38637: LD_INT 30
38639: PPUSH
38640: LD_OWVAR 2
38644: PPUSH
38645: LD_INT 2
38647: PPUSH
38648: CALL_OW 322
// end ;
38652: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
38653: LD_EXP 63
38657: PUSH
38658: LD_EXP 115
38662: AND
38663: IFFALSE 38784
38665: GO 38667
38667: DISABLE
38668: LD_INT 0
38670: PPUSH
38671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38672: LD_ADDR_VAR 0 2
38676: PUSH
38677: LD_INT 22
38679: PUSH
38680: LD_OWVAR 2
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 21
38691: PUSH
38692: LD_INT 1
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: LD_INT 23
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: LIST
38720: PPUSH
38721: CALL_OW 69
38725: ST_TO_ADDR
// if not tmp then
38726: LD_VAR 0 2
38730: NOT
38731: IFFALSE 38735
// exit ;
38733: GO 38784
// for i in tmp do
38735: LD_ADDR_VAR 0 1
38739: PUSH
38740: LD_VAR 0 2
38744: PUSH
38745: FOR_IN
38746: IFFALSE 38782
// begin if Crawls ( i ) then
38748: LD_VAR 0 1
38752: PPUSH
38753: CALL_OW 318
38757: IFFALSE 38768
// ComWalk ( i ) ;
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL_OW 138
// SetClass ( i , 2 ) ;
38768: LD_VAR 0 1
38772: PPUSH
38773: LD_INT 2
38775: PPUSH
38776: CALL_OW 336
// end ;
38780: GO 38745
38782: POP
38783: POP
// end ;
38784: PPOPN 2
38786: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
38787: LD_EXP 63
38791: PUSH
38792: LD_EXP 116
38796: AND
38797: IFFALSE 39078
38799: GO 38801
38801: DISABLE
38802: LD_INT 0
38804: PPUSH
38805: PPUSH
38806: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
38807: LD_OWVAR 2
38811: PPUSH
38812: LD_INT 9
38814: PPUSH
38815: LD_INT 1
38817: PPUSH
38818: LD_INT 1
38820: PPUSH
38821: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
38825: LD_INT 9
38827: PPUSH
38828: LD_OWVAR 2
38832: PPUSH
38833: CALL_OW 343
// uc_side := 9 ;
38837: LD_ADDR_OWVAR 20
38841: PUSH
38842: LD_INT 9
38844: ST_TO_ADDR
// uc_nation := 2 ;
38845: LD_ADDR_OWVAR 21
38849: PUSH
38850: LD_INT 2
38852: ST_TO_ADDR
// hc_name := Dark Warrior ;
38853: LD_ADDR_OWVAR 26
38857: PUSH
38858: LD_STRING Dark Warrior
38860: ST_TO_ADDR
// hc_gallery :=  ;
38861: LD_ADDR_OWVAR 33
38865: PUSH
38866: LD_STRING 
38868: ST_TO_ADDR
// hc_noskilllimit := true ;
38869: LD_ADDR_OWVAR 76
38873: PUSH
38874: LD_INT 1
38876: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
38877: LD_ADDR_OWVAR 31
38881: PUSH
38882: LD_INT 30
38884: PUSH
38885: LD_INT 30
38887: PUSH
38888: LD_INT 30
38890: PUSH
38891: LD_INT 30
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: ST_TO_ADDR
// un := CreateHuman ;
38900: LD_ADDR_VAR 0 3
38904: PUSH
38905: CALL_OW 44
38909: ST_TO_ADDR
// hc_noskilllimit := false ;
38910: LD_ADDR_OWVAR 76
38914: PUSH
38915: LD_INT 0
38917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38918: LD_VAR 0 3
38922: PPUSH
38923: LD_INT 1
38925: PPUSH
38926: CALL_OW 51
// p := 0 ;
38930: LD_ADDR_VAR 0 2
38934: PUSH
38935: LD_INT 0
38937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38938: LD_INT 35
38940: PPUSH
38941: CALL_OW 67
// p := p + 1 ;
38945: LD_ADDR_VAR 0 2
38949: PUSH
38950: LD_VAR 0 2
38954: PUSH
38955: LD_INT 1
38957: PLUS
38958: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
38959: LD_VAR 0 3
38963: PPUSH
38964: CALL_OW 256
38968: PUSH
38969: LD_INT 1000
38971: LESS
38972: IFFALSE 38986
// SetLives ( un , 1000 ) ;
38974: LD_VAR 0 3
38978: PPUSH
38979: LD_INT 1000
38981: PPUSH
38982: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
38986: LD_VAR 0 3
38990: PPUSH
38991: LD_INT 81
38993: PUSH
38994: LD_OWVAR 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 91
39005: PUSH
39006: LD_VAR 0 3
39010: PUSH
39011: LD_INT 30
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PPUSH
39023: CALL_OW 69
39027: PPUSH
39028: LD_VAR 0 3
39032: PPUSH
39033: CALL_OW 74
39037: PPUSH
39038: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
39042: LD_VAR 0 2
39046: PUSH
39047: LD_INT 60
39049: GREATER
39050: PUSH
39051: LD_VAR 0 3
39055: PPUSH
39056: CALL_OW 301
39060: OR
39061: IFFALSE 38938
// if un then
39063: LD_VAR 0 3
39067: IFFALSE 39078
// RemoveUnit ( un ) ;
39069: LD_VAR 0 3
39073: PPUSH
39074: CALL_OW 64
// end ;
39078: PPOPN 3
39080: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39081: LD_INT 0
39083: PPUSH
// case cmd of 301 :
39084: LD_VAR 0 1
39088: PUSH
39089: LD_INT 301
39091: DOUBLE
39092: EQUAL
39093: IFTRUE 39097
39095: GO 39129
39097: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39098: LD_VAR 0 6
39102: PPUSH
39103: LD_VAR 0 7
39107: PPUSH
39108: LD_VAR 0 8
39112: PPUSH
39113: LD_VAR 0 4
39117: PPUSH
39118: LD_VAR 0 5
39122: PPUSH
39123: CALL 40330 0 5
39127: GO 39250
39129: LD_INT 302
39131: DOUBLE
39132: EQUAL
39133: IFTRUE 39137
39135: GO 39174
39137: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39138: LD_VAR 0 6
39142: PPUSH
39143: LD_VAR 0 7
39147: PPUSH
39148: LD_VAR 0 8
39152: PPUSH
39153: LD_VAR 0 9
39157: PPUSH
39158: LD_VAR 0 4
39162: PPUSH
39163: LD_VAR 0 5
39167: PPUSH
39168: CALL 40421 0 6
39172: GO 39250
39174: LD_INT 303
39176: DOUBLE
39177: EQUAL
39178: IFTRUE 39182
39180: GO 39219
39182: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39183: LD_VAR 0 6
39187: PPUSH
39188: LD_VAR 0 7
39192: PPUSH
39193: LD_VAR 0 8
39197: PPUSH
39198: LD_VAR 0 9
39202: PPUSH
39203: LD_VAR 0 4
39207: PPUSH
39208: LD_VAR 0 5
39212: PPUSH
39213: CALL 39255 0 6
39217: GO 39250
39219: LD_INT 304
39221: DOUBLE
39222: EQUAL
39223: IFTRUE 39227
39225: GO 39249
39227: POP
// hHackTeleport ( unit , x , y ) ; end ;
39228: LD_VAR 0 2
39232: PPUSH
39233: LD_VAR 0 4
39237: PPUSH
39238: LD_VAR 0 5
39242: PPUSH
39243: CALL 41014 0 3
39247: GO 39250
39249: POP
// end ;
39250: LD_VAR 0 12
39254: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39255: LD_INT 0
39257: PPUSH
39258: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39259: LD_VAR 0 1
39263: PUSH
39264: LD_INT 1
39266: LESS
39267: PUSH
39268: LD_VAR 0 1
39272: PUSH
39273: LD_INT 3
39275: GREATER
39276: OR
39277: PUSH
39278: LD_VAR 0 5
39282: PPUSH
39283: LD_VAR 0 6
39287: PPUSH
39288: CALL_OW 428
39292: OR
39293: IFFALSE 39297
// exit ;
39295: GO 40017
// uc_side := your_side ;
39297: LD_ADDR_OWVAR 20
39301: PUSH
39302: LD_OWVAR 2
39306: ST_TO_ADDR
// uc_nation := nation ;
39307: LD_ADDR_OWVAR 21
39311: PUSH
39312: LD_VAR 0 1
39316: ST_TO_ADDR
// bc_level = 1 ;
39317: LD_ADDR_OWVAR 43
39321: PUSH
39322: LD_INT 1
39324: ST_TO_ADDR
// case btype of 1 :
39325: LD_VAR 0 2
39329: PUSH
39330: LD_INT 1
39332: DOUBLE
39333: EQUAL
39334: IFTRUE 39338
39336: GO 39349
39338: POP
// bc_type := b_depot ; 2 :
39339: LD_ADDR_OWVAR 42
39343: PUSH
39344: LD_INT 0
39346: ST_TO_ADDR
39347: GO 39961
39349: LD_INT 2
39351: DOUBLE
39352: EQUAL
39353: IFTRUE 39357
39355: GO 39368
39357: POP
// bc_type := b_warehouse ; 3 :
39358: LD_ADDR_OWVAR 42
39362: PUSH
39363: LD_INT 1
39365: ST_TO_ADDR
39366: GO 39961
39368: LD_INT 3
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39387
39376: POP
// bc_type := b_lab ; 4 .. 9 :
39377: LD_ADDR_OWVAR 42
39381: PUSH
39382: LD_INT 6
39384: ST_TO_ADDR
39385: GO 39961
39387: LD_INT 4
39389: DOUBLE
39390: GREATEREQUAL
39391: IFFALSE 39399
39393: LD_INT 9
39395: DOUBLE
39396: LESSEQUAL
39397: IFTRUE 39401
39399: GO 39453
39401: POP
// begin bc_type := b_lab_half ;
39402: LD_ADDR_OWVAR 42
39406: PUSH
39407: LD_INT 7
39409: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
39410: LD_ADDR_OWVAR 44
39414: PUSH
39415: LD_INT 10
39417: PUSH
39418: LD_INT 11
39420: PUSH
39421: LD_INT 12
39423: PUSH
39424: LD_INT 15
39426: PUSH
39427: LD_INT 14
39429: PUSH
39430: LD_INT 13
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: PUSH
39441: LD_VAR 0 2
39445: PUSH
39446: LD_INT 3
39448: MINUS
39449: ARRAY
39450: ST_TO_ADDR
// end ; 10 .. 13 :
39451: GO 39961
39453: LD_INT 10
39455: DOUBLE
39456: GREATEREQUAL
39457: IFFALSE 39465
39459: LD_INT 13
39461: DOUBLE
39462: LESSEQUAL
39463: IFTRUE 39467
39465: GO 39544
39467: POP
// begin bc_type := b_lab_full ;
39468: LD_ADDR_OWVAR 42
39472: PUSH
39473: LD_INT 8
39475: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
39476: LD_ADDR_OWVAR 44
39480: PUSH
39481: LD_INT 10
39483: PUSH
39484: LD_INT 12
39486: PUSH
39487: LD_INT 14
39489: PUSH
39490: LD_INT 13
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: PUSH
39499: LD_VAR 0 2
39503: PUSH
39504: LD_INT 9
39506: MINUS
39507: ARRAY
39508: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
39509: LD_ADDR_OWVAR 45
39513: PUSH
39514: LD_INT 11
39516: PUSH
39517: LD_INT 15
39519: PUSH
39520: LD_INT 12
39522: PUSH
39523: LD_INT 15
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: PUSH
39532: LD_VAR 0 2
39536: PUSH
39537: LD_INT 9
39539: MINUS
39540: ARRAY
39541: ST_TO_ADDR
// end ; 14 :
39542: GO 39961
39544: LD_INT 14
39546: DOUBLE
39547: EQUAL
39548: IFTRUE 39552
39550: GO 39563
39552: POP
// bc_type := b_workshop ; 15 :
39553: LD_ADDR_OWVAR 42
39557: PUSH
39558: LD_INT 2
39560: ST_TO_ADDR
39561: GO 39961
39563: LD_INT 15
39565: DOUBLE
39566: EQUAL
39567: IFTRUE 39571
39569: GO 39582
39571: POP
// bc_type := b_factory ; 16 :
39572: LD_ADDR_OWVAR 42
39576: PUSH
39577: LD_INT 3
39579: ST_TO_ADDR
39580: GO 39961
39582: LD_INT 16
39584: DOUBLE
39585: EQUAL
39586: IFTRUE 39590
39588: GO 39601
39590: POP
// bc_type := b_ext_gun ; 17 :
39591: LD_ADDR_OWVAR 42
39595: PUSH
39596: LD_INT 17
39598: ST_TO_ADDR
39599: GO 39961
39601: LD_INT 17
39603: DOUBLE
39604: EQUAL
39605: IFTRUE 39609
39607: GO 39637
39609: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
39610: LD_ADDR_OWVAR 42
39614: PUSH
39615: LD_INT 19
39617: PUSH
39618: LD_INT 23
39620: PUSH
39621: LD_INT 19
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: LIST
39628: PUSH
39629: LD_VAR 0 1
39633: ARRAY
39634: ST_TO_ADDR
39635: GO 39961
39637: LD_INT 18
39639: DOUBLE
39640: EQUAL
39641: IFTRUE 39645
39643: GO 39656
39645: POP
// bc_type := b_ext_radar ; 19 :
39646: LD_ADDR_OWVAR 42
39650: PUSH
39651: LD_INT 20
39653: ST_TO_ADDR
39654: GO 39961
39656: LD_INT 19
39658: DOUBLE
39659: EQUAL
39660: IFTRUE 39664
39662: GO 39675
39664: POP
// bc_type := b_ext_radio ; 20 :
39665: LD_ADDR_OWVAR 42
39669: PUSH
39670: LD_INT 22
39672: ST_TO_ADDR
39673: GO 39961
39675: LD_INT 20
39677: DOUBLE
39678: EQUAL
39679: IFTRUE 39683
39681: GO 39694
39683: POP
// bc_type := b_ext_siberium ; 21 :
39684: LD_ADDR_OWVAR 42
39688: PUSH
39689: LD_INT 21
39691: ST_TO_ADDR
39692: GO 39961
39694: LD_INT 21
39696: DOUBLE
39697: EQUAL
39698: IFTRUE 39702
39700: GO 39713
39702: POP
// bc_type := b_ext_computer ; 22 :
39703: LD_ADDR_OWVAR 42
39707: PUSH
39708: LD_INT 24
39710: ST_TO_ADDR
39711: GO 39961
39713: LD_INT 22
39715: DOUBLE
39716: EQUAL
39717: IFTRUE 39721
39719: GO 39732
39721: POP
// bc_type := b_ext_track ; 23 :
39722: LD_ADDR_OWVAR 42
39726: PUSH
39727: LD_INT 16
39729: ST_TO_ADDR
39730: GO 39961
39732: LD_INT 23
39734: DOUBLE
39735: EQUAL
39736: IFTRUE 39740
39738: GO 39751
39740: POP
// bc_type := b_ext_laser ; 24 :
39741: LD_ADDR_OWVAR 42
39745: PUSH
39746: LD_INT 25
39748: ST_TO_ADDR
39749: GO 39961
39751: LD_INT 24
39753: DOUBLE
39754: EQUAL
39755: IFTRUE 39759
39757: GO 39770
39759: POP
// bc_type := b_control_tower ; 25 :
39760: LD_ADDR_OWVAR 42
39764: PUSH
39765: LD_INT 36
39767: ST_TO_ADDR
39768: GO 39961
39770: LD_INT 25
39772: DOUBLE
39773: EQUAL
39774: IFTRUE 39778
39776: GO 39789
39778: POP
// bc_type := b_breastwork ; 26 :
39779: LD_ADDR_OWVAR 42
39783: PUSH
39784: LD_INT 31
39786: ST_TO_ADDR
39787: GO 39961
39789: LD_INT 26
39791: DOUBLE
39792: EQUAL
39793: IFTRUE 39797
39795: GO 39808
39797: POP
// bc_type := b_bunker ; 27 :
39798: LD_ADDR_OWVAR 42
39802: PUSH
39803: LD_INT 32
39805: ST_TO_ADDR
39806: GO 39961
39808: LD_INT 27
39810: DOUBLE
39811: EQUAL
39812: IFTRUE 39816
39814: GO 39827
39816: POP
// bc_type := b_turret ; 28 :
39817: LD_ADDR_OWVAR 42
39821: PUSH
39822: LD_INT 33
39824: ST_TO_ADDR
39825: GO 39961
39827: LD_INT 28
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39835
39833: GO 39846
39835: POP
// bc_type := b_armoury ; 29 :
39836: LD_ADDR_OWVAR 42
39840: PUSH
39841: LD_INT 4
39843: ST_TO_ADDR
39844: GO 39961
39846: LD_INT 29
39848: DOUBLE
39849: EQUAL
39850: IFTRUE 39854
39852: GO 39865
39854: POP
// bc_type := b_barracks ; 30 :
39855: LD_ADDR_OWVAR 42
39859: PUSH
39860: LD_INT 5
39862: ST_TO_ADDR
39863: GO 39961
39865: LD_INT 30
39867: DOUBLE
39868: EQUAL
39869: IFTRUE 39873
39871: GO 39884
39873: POP
// bc_type := b_solar_power ; 31 :
39874: LD_ADDR_OWVAR 42
39878: PUSH
39879: LD_INT 27
39881: ST_TO_ADDR
39882: GO 39961
39884: LD_INT 31
39886: DOUBLE
39887: EQUAL
39888: IFTRUE 39892
39890: GO 39903
39892: POP
// bc_type := b_oil_power ; 32 :
39893: LD_ADDR_OWVAR 42
39897: PUSH
39898: LD_INT 26
39900: ST_TO_ADDR
39901: GO 39961
39903: LD_INT 32
39905: DOUBLE
39906: EQUAL
39907: IFTRUE 39911
39909: GO 39922
39911: POP
// bc_type := b_siberite_power ; 33 :
39912: LD_ADDR_OWVAR 42
39916: PUSH
39917: LD_INT 28
39919: ST_TO_ADDR
39920: GO 39961
39922: LD_INT 33
39924: DOUBLE
39925: EQUAL
39926: IFTRUE 39930
39928: GO 39941
39930: POP
// bc_type := b_oil_mine ; 34 :
39931: LD_ADDR_OWVAR 42
39935: PUSH
39936: LD_INT 29
39938: ST_TO_ADDR
39939: GO 39961
39941: LD_INT 34
39943: DOUBLE
39944: EQUAL
39945: IFTRUE 39949
39947: GO 39960
39949: POP
// bc_type := b_siberite_mine ; end ;
39950: LD_ADDR_OWVAR 42
39954: PUSH
39955: LD_INT 30
39957: ST_TO_ADDR
39958: GO 39961
39960: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
39961: LD_ADDR_VAR 0 8
39965: PUSH
39966: LD_VAR 0 5
39970: PPUSH
39971: LD_VAR 0 6
39975: PPUSH
39976: LD_VAR 0 3
39980: PPUSH
39981: CALL_OW 47
39985: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
39986: LD_OWVAR 42
39990: PUSH
39991: LD_INT 32
39993: PUSH
39994: LD_INT 33
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: IN
40001: IFFALSE 40017
// PlaceWeaponTurret ( b , weapon ) ;
40003: LD_VAR 0 8
40007: PPUSH
40008: LD_VAR 0 4
40012: PPUSH
40013: CALL_OW 431
// end ;
40017: LD_VAR 0 7
40021: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40022: LD_INT 0
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40028: LD_ADDR_VAR 0 4
40032: PUSH
40033: LD_INT 22
40035: PUSH
40036: LD_OWVAR 2
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 30
40050: PUSH
40051: LD_INT 0
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 30
40060: PUSH
40061: LD_INT 1
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 69
40081: ST_TO_ADDR
// if not tmp then
40082: LD_VAR 0 4
40086: NOT
40087: IFFALSE 40091
// exit ;
40089: GO 40150
// for i in tmp do
40091: LD_ADDR_VAR 0 2
40095: PUSH
40096: LD_VAR 0 4
40100: PUSH
40101: FOR_IN
40102: IFFALSE 40148
// for j = 1 to 3 do
40104: LD_ADDR_VAR 0 3
40108: PUSH
40109: DOUBLE
40110: LD_INT 1
40112: DEC
40113: ST_TO_ADDR
40114: LD_INT 3
40116: PUSH
40117: FOR_TO
40118: IFFALSE 40144
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40120: LD_VAR 0 2
40124: PPUSH
40125: CALL_OW 274
40129: PPUSH
40130: LD_VAR 0 3
40134: PPUSH
40135: LD_INT 99999
40137: PPUSH
40138: CALL_OW 277
40142: GO 40117
40144: POP
40145: POP
40146: GO 40101
40148: POP
40149: POP
// end ;
40150: LD_VAR 0 1
40154: RET
// export function hHackSetLevel10 ; var i , j ; begin
40155: LD_INT 0
40157: PPUSH
40158: PPUSH
40159: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40160: LD_ADDR_VAR 0 2
40164: PUSH
40165: LD_INT 21
40167: PUSH
40168: LD_INT 1
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PPUSH
40175: CALL_OW 69
40179: PUSH
40180: FOR_IN
40181: IFFALSE 40233
// if IsSelected ( i ) then
40183: LD_VAR 0 2
40187: PPUSH
40188: CALL_OW 306
40192: IFFALSE 40231
// begin for j := 1 to 4 do
40194: LD_ADDR_VAR 0 3
40198: PUSH
40199: DOUBLE
40200: LD_INT 1
40202: DEC
40203: ST_TO_ADDR
40204: LD_INT 4
40206: PUSH
40207: FOR_TO
40208: IFFALSE 40229
// SetSkill ( i , j , 10 ) ;
40210: LD_VAR 0 2
40214: PPUSH
40215: LD_VAR 0 3
40219: PPUSH
40220: LD_INT 10
40222: PPUSH
40223: CALL_OW 237
40227: GO 40207
40229: POP
40230: POP
// end ;
40231: GO 40180
40233: POP
40234: POP
// end ;
40235: LD_VAR 0 1
40239: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40240: LD_INT 0
40242: PPUSH
40243: PPUSH
40244: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40245: LD_ADDR_VAR 0 2
40249: PUSH
40250: LD_INT 22
40252: PUSH
40253: LD_OWVAR 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 21
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PPUSH
40276: CALL_OW 69
40280: PUSH
40281: FOR_IN
40282: IFFALSE 40323
// begin for j := 1 to 4 do
40284: LD_ADDR_VAR 0 3
40288: PUSH
40289: DOUBLE
40290: LD_INT 1
40292: DEC
40293: ST_TO_ADDR
40294: LD_INT 4
40296: PUSH
40297: FOR_TO
40298: IFFALSE 40319
// SetSkill ( i , j , 10 ) ;
40300: LD_VAR 0 2
40304: PPUSH
40305: LD_VAR 0 3
40309: PPUSH
40310: LD_INT 10
40312: PPUSH
40313: CALL_OW 237
40317: GO 40297
40319: POP
40320: POP
// end ;
40321: GO 40281
40323: POP
40324: POP
// end ;
40325: LD_VAR 0 1
40329: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
40330: LD_INT 0
40332: PPUSH
// uc_side := your_side ;
40333: LD_ADDR_OWVAR 20
40337: PUSH
40338: LD_OWVAR 2
40342: ST_TO_ADDR
// uc_nation := nation ;
40343: LD_ADDR_OWVAR 21
40347: PUSH
40348: LD_VAR 0 1
40352: ST_TO_ADDR
// InitHc ;
40353: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
40357: LD_INT 0
40359: PPUSH
40360: LD_VAR 0 2
40364: PPUSH
40365: LD_VAR 0 3
40369: PPUSH
40370: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
40374: LD_VAR 0 4
40378: PPUSH
40379: LD_VAR 0 5
40383: PPUSH
40384: CALL_OW 428
40388: PUSH
40389: LD_INT 0
40391: EQUAL
40392: IFFALSE 40416
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
40394: CALL_OW 44
40398: PPUSH
40399: LD_VAR 0 4
40403: PPUSH
40404: LD_VAR 0 5
40408: PPUSH
40409: LD_INT 1
40411: PPUSH
40412: CALL_OW 48
// end ;
40416: LD_VAR 0 6
40420: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
40421: LD_INT 0
40423: PPUSH
40424: PPUSH
// uc_side := your_side ;
40425: LD_ADDR_OWVAR 20
40429: PUSH
40430: LD_OWVAR 2
40434: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
40435: LD_VAR 0 1
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: LD_INT 4
40451: PUSH
40452: LD_INT 5
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: IN
40462: IFFALSE 40474
// uc_nation := nation_american else
40464: LD_ADDR_OWVAR 21
40468: PUSH
40469: LD_INT 1
40471: ST_TO_ADDR
40472: GO 40517
// if chassis in [ 11 , 12 , 13 , 14 ] then
40474: LD_VAR 0 1
40478: PUSH
40479: LD_INT 11
40481: PUSH
40482: LD_INT 12
40484: PUSH
40485: LD_INT 13
40487: PUSH
40488: LD_INT 14
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: IN
40497: IFFALSE 40509
// uc_nation := nation_arabian else
40499: LD_ADDR_OWVAR 21
40503: PUSH
40504: LD_INT 2
40506: ST_TO_ADDR
40507: GO 40517
// uc_nation := nation_russian ;
40509: LD_ADDR_OWVAR 21
40513: PUSH
40514: LD_INT 3
40516: ST_TO_ADDR
// vc_chassis := chassis ;
40517: LD_ADDR_OWVAR 37
40521: PUSH
40522: LD_VAR 0 1
40526: ST_TO_ADDR
// vc_engine := engine ;
40527: LD_ADDR_OWVAR 39
40531: PUSH
40532: LD_VAR 0 2
40536: ST_TO_ADDR
// vc_control := control ;
40537: LD_ADDR_OWVAR 38
40541: PUSH
40542: LD_VAR 0 3
40546: ST_TO_ADDR
// vc_weapon := weapon ;
40547: LD_ADDR_OWVAR 40
40551: PUSH
40552: LD_VAR 0 4
40556: ST_TO_ADDR
// un := CreateVehicle ;
40557: LD_ADDR_VAR 0 8
40561: PUSH
40562: CALL_OW 45
40566: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
40567: LD_VAR 0 8
40571: PPUSH
40572: LD_INT 0
40574: PPUSH
40575: LD_INT 5
40577: PPUSH
40578: CALL_OW 12
40582: PPUSH
40583: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
40587: LD_VAR 0 8
40591: PPUSH
40592: LD_VAR 0 5
40596: PPUSH
40597: LD_VAR 0 6
40601: PPUSH
40602: LD_INT 1
40604: PPUSH
40605: CALL_OW 48
// end ;
40609: LD_VAR 0 7
40613: RET
// export hInvincible ; every 1 do
40614: GO 40616
40616: DISABLE
// hInvincible := [ ] ;
40617: LD_ADDR_EXP 117
40621: PUSH
40622: EMPTY
40623: ST_TO_ADDR
40624: END
// every 10 do var i ;
40625: GO 40627
40627: DISABLE
40628: LD_INT 0
40630: PPUSH
// begin enable ;
40631: ENABLE
// if not hInvincible then
40632: LD_EXP 117
40636: NOT
40637: IFFALSE 40641
// exit ;
40639: GO 40685
// for i in hInvincible do
40641: LD_ADDR_VAR 0 1
40645: PUSH
40646: LD_EXP 117
40650: PUSH
40651: FOR_IN
40652: IFFALSE 40683
// if GetLives ( i ) < 1000 then
40654: LD_VAR 0 1
40658: PPUSH
40659: CALL_OW 256
40663: PUSH
40664: LD_INT 1000
40666: LESS
40667: IFFALSE 40681
// SetLives ( i , 1000 ) ;
40669: LD_VAR 0 1
40673: PPUSH
40674: LD_INT 1000
40676: PPUSH
40677: CALL_OW 234
40681: GO 40651
40683: POP
40684: POP
// end ;
40685: PPOPN 1
40687: END
// export function hHackInvincible ; var i ; begin
40688: LD_INT 0
40690: PPUSH
40691: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
40692: LD_ADDR_VAR 0 2
40696: PUSH
40697: LD_INT 2
40699: PUSH
40700: LD_INT 21
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 21
40712: PUSH
40713: LD_INT 2
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: LIST
40724: PPUSH
40725: CALL_OW 69
40729: PUSH
40730: FOR_IN
40731: IFFALSE 40792
// if IsSelected ( i ) then
40733: LD_VAR 0 2
40737: PPUSH
40738: CALL_OW 306
40742: IFFALSE 40790
// begin if i in hInvincible then
40744: LD_VAR 0 2
40748: PUSH
40749: LD_EXP 117
40753: IN
40754: IFFALSE 40774
// hInvincible := hInvincible diff i else
40756: LD_ADDR_EXP 117
40760: PUSH
40761: LD_EXP 117
40765: PUSH
40766: LD_VAR 0 2
40770: DIFF
40771: ST_TO_ADDR
40772: GO 40790
// hInvincible := hInvincible union i ;
40774: LD_ADDR_EXP 117
40778: PUSH
40779: LD_EXP 117
40783: PUSH
40784: LD_VAR 0 2
40788: UNION
40789: ST_TO_ADDR
// end ;
40790: GO 40730
40792: POP
40793: POP
// end ;
40794: LD_VAR 0 1
40798: RET
// export function hHackInvisible ; var i , j ; begin
40799: LD_INT 0
40801: PPUSH
40802: PPUSH
40803: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40804: LD_ADDR_VAR 0 2
40808: PUSH
40809: LD_INT 21
40811: PUSH
40812: LD_INT 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PPUSH
40819: CALL_OW 69
40823: PUSH
40824: FOR_IN
40825: IFFALSE 40849
// if IsSelected ( i ) then
40827: LD_VAR 0 2
40831: PPUSH
40832: CALL_OW 306
40836: IFFALSE 40847
// ComForceInvisible ( i ) ;
40838: LD_VAR 0 2
40842: PPUSH
40843: CALL_OW 496
40847: GO 40824
40849: POP
40850: POP
// end ;
40851: LD_VAR 0 1
40855: RET
// export function hHackChangeYourSide ; begin
40856: LD_INT 0
40858: PPUSH
// if your_side = 8 then
40859: LD_OWVAR 2
40863: PUSH
40864: LD_INT 8
40866: EQUAL
40867: IFFALSE 40879
// your_side := 0 else
40869: LD_ADDR_OWVAR 2
40873: PUSH
40874: LD_INT 0
40876: ST_TO_ADDR
40877: GO 40893
// your_side := your_side + 1 ;
40879: LD_ADDR_OWVAR 2
40883: PUSH
40884: LD_OWVAR 2
40888: PUSH
40889: LD_INT 1
40891: PLUS
40892: ST_TO_ADDR
// end ;
40893: LD_VAR 0 1
40897: RET
// export function hHackChangeUnitSide ; var i , j ; begin
40898: LD_INT 0
40900: PPUSH
40901: PPUSH
40902: PPUSH
// for i in all_units do
40903: LD_ADDR_VAR 0 2
40907: PUSH
40908: LD_OWVAR 3
40912: PUSH
40913: FOR_IN
40914: IFFALSE 40992
// if IsSelected ( i ) then
40916: LD_VAR 0 2
40920: PPUSH
40921: CALL_OW 306
40925: IFFALSE 40990
// begin j := GetSide ( i ) ;
40927: LD_ADDR_VAR 0 3
40931: PUSH
40932: LD_VAR 0 2
40936: PPUSH
40937: CALL_OW 255
40941: ST_TO_ADDR
// if j = 8 then
40942: LD_VAR 0 3
40946: PUSH
40947: LD_INT 8
40949: EQUAL
40950: IFFALSE 40962
// j := 0 else
40952: LD_ADDR_VAR 0 3
40956: PUSH
40957: LD_INT 0
40959: ST_TO_ADDR
40960: GO 40976
// j := j + 1 ;
40962: LD_ADDR_VAR 0 3
40966: PUSH
40967: LD_VAR 0 3
40971: PUSH
40972: LD_INT 1
40974: PLUS
40975: ST_TO_ADDR
// SetSide ( i , j ) ;
40976: LD_VAR 0 2
40980: PPUSH
40981: LD_VAR 0 3
40985: PPUSH
40986: CALL_OW 235
// end ;
40990: GO 40913
40992: POP
40993: POP
// end ;
40994: LD_VAR 0 1
40998: RET
// export function hHackFog ; begin
40999: LD_INT 0
41001: PPUSH
// FogOff ( true ) ;
41002: LD_INT 1
41004: PPUSH
41005: CALL_OW 344
// end ;
41009: LD_VAR 0 1
41013: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41014: LD_INT 0
41016: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41017: LD_VAR 0 1
41021: PPUSH
41022: LD_VAR 0 2
41026: PPUSH
41027: LD_VAR 0 3
41031: PPUSH
41032: LD_INT 1
41034: PPUSH
41035: LD_INT 1
41037: PPUSH
41038: CALL_OW 483
// CenterOnXY ( x , y ) ;
41042: LD_VAR 0 2
41046: PPUSH
41047: LD_VAR 0 3
41051: PPUSH
41052: CALL_OW 84
// end ; end_of_file
41056: LD_VAR 0 4
41060: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41061: LD_INT 0
41063: PPUSH
41064: PPUSH
// if exist_mode then
41065: LD_VAR 0 2
41069: IFFALSE 41094
// unit := CreateCharacter ( prefix & ident ) else
41071: LD_ADDR_VAR 0 5
41075: PUSH
41076: LD_VAR 0 3
41080: PUSH
41081: LD_VAR 0 1
41085: STR
41086: PPUSH
41087: CALL_OW 34
41091: ST_TO_ADDR
41092: GO 41109
// unit := NewCharacter ( ident ) ;
41094: LD_ADDR_VAR 0 5
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 25
41108: ST_TO_ADDR
// result := unit ;
41109: LD_ADDR_VAR 0 4
41113: PUSH
41114: LD_VAR 0 5
41118: ST_TO_ADDR
// end ;
41119: LD_VAR 0 4
41123: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41124: LD_INT 0
41126: PPUSH
41127: PPUSH
// if not side or not nation then
41128: LD_VAR 0 1
41132: NOT
41133: PUSH
41134: LD_VAR 0 2
41138: NOT
41139: OR
41140: IFFALSE 41144
// exit ;
41142: GO 41908
// case nation of nation_american :
41144: LD_VAR 0 2
41148: PUSH
41149: LD_INT 1
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41157
41155: GO 41371
41157: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41158: LD_ADDR_VAR 0 4
41162: PUSH
41163: LD_INT 35
41165: PUSH
41166: LD_INT 45
41168: PUSH
41169: LD_INT 46
41171: PUSH
41172: LD_INT 47
41174: PUSH
41175: LD_INT 82
41177: PUSH
41178: LD_INT 83
41180: PUSH
41181: LD_INT 84
41183: PUSH
41184: LD_INT 85
41186: PUSH
41187: LD_INT 86
41189: PUSH
41190: LD_INT 1
41192: PUSH
41193: LD_INT 2
41195: PUSH
41196: LD_INT 6
41198: PUSH
41199: LD_INT 15
41201: PUSH
41202: LD_INT 16
41204: PUSH
41205: LD_INT 7
41207: PUSH
41208: LD_INT 12
41210: PUSH
41211: LD_INT 13
41213: PUSH
41214: LD_INT 10
41216: PUSH
41217: LD_INT 14
41219: PUSH
41220: LD_INT 20
41222: PUSH
41223: LD_INT 21
41225: PUSH
41226: LD_INT 22
41228: PUSH
41229: LD_INT 25
41231: PUSH
41232: LD_INT 32
41234: PUSH
41235: LD_INT 27
41237: PUSH
41238: LD_INT 36
41240: PUSH
41241: LD_INT 69
41243: PUSH
41244: LD_INT 39
41246: PUSH
41247: LD_INT 34
41249: PUSH
41250: LD_INT 40
41252: PUSH
41253: LD_INT 48
41255: PUSH
41256: LD_INT 49
41258: PUSH
41259: LD_INT 50
41261: PUSH
41262: LD_INT 51
41264: PUSH
41265: LD_INT 52
41267: PUSH
41268: LD_INT 53
41270: PUSH
41271: LD_INT 54
41273: PUSH
41274: LD_INT 55
41276: PUSH
41277: LD_INT 56
41279: PUSH
41280: LD_INT 57
41282: PUSH
41283: LD_INT 58
41285: PUSH
41286: LD_INT 59
41288: PUSH
41289: LD_INT 60
41291: PUSH
41292: LD_INT 61
41294: PUSH
41295: LD_INT 62
41297: PUSH
41298: LD_INT 80
41300: PUSH
41301: LD_INT 82
41303: PUSH
41304: LD_INT 83
41306: PUSH
41307: LD_INT 84
41309: PUSH
41310: LD_INT 85
41312: PUSH
41313: LD_INT 86
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
41369: GO 41832
41371: LD_INT 2
41373: DOUBLE
41374: EQUAL
41375: IFTRUE 41379
41377: GO 41601
41379: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
41380: LD_ADDR_VAR 0 4
41384: PUSH
41385: LD_INT 35
41387: PUSH
41388: LD_INT 45
41390: PUSH
41391: LD_INT 46
41393: PUSH
41394: LD_INT 47
41396: PUSH
41397: LD_INT 82
41399: PUSH
41400: LD_INT 83
41402: PUSH
41403: LD_INT 84
41405: PUSH
41406: LD_INT 85
41408: PUSH
41409: LD_INT 87
41411: PUSH
41412: LD_INT 70
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 11
41420: PUSH
41421: LD_INT 3
41423: PUSH
41424: LD_INT 4
41426: PUSH
41427: LD_INT 5
41429: PUSH
41430: LD_INT 6
41432: PUSH
41433: LD_INT 15
41435: PUSH
41436: LD_INT 18
41438: PUSH
41439: LD_INT 7
41441: PUSH
41442: LD_INT 17
41444: PUSH
41445: LD_INT 8
41447: PUSH
41448: LD_INT 20
41450: PUSH
41451: LD_INT 21
41453: PUSH
41454: LD_INT 22
41456: PUSH
41457: LD_INT 72
41459: PUSH
41460: LD_INT 26
41462: PUSH
41463: LD_INT 69
41465: PUSH
41466: LD_INT 39
41468: PUSH
41469: LD_INT 40
41471: PUSH
41472: LD_INT 41
41474: PUSH
41475: LD_INT 42
41477: PUSH
41478: LD_INT 43
41480: PUSH
41481: LD_INT 48
41483: PUSH
41484: LD_INT 49
41486: PUSH
41487: LD_INT 50
41489: PUSH
41490: LD_INT 51
41492: PUSH
41493: LD_INT 52
41495: PUSH
41496: LD_INT 53
41498: PUSH
41499: LD_INT 54
41501: PUSH
41502: LD_INT 55
41504: PUSH
41505: LD_INT 56
41507: PUSH
41508: LD_INT 60
41510: PUSH
41511: LD_INT 61
41513: PUSH
41514: LD_INT 62
41516: PUSH
41517: LD_INT 66
41519: PUSH
41520: LD_INT 67
41522: PUSH
41523: LD_INT 68
41525: PUSH
41526: LD_INT 81
41528: PUSH
41529: LD_INT 82
41531: PUSH
41532: LD_INT 83
41534: PUSH
41535: LD_INT 84
41537: PUSH
41538: LD_INT 85
41540: PUSH
41541: LD_INT 87
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: ST_TO_ADDR
41599: GO 41832
41601: LD_INT 3
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41831
41609: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41610: LD_ADDR_VAR 0 4
41614: PUSH
41615: LD_INT 46
41617: PUSH
41618: LD_INT 47
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: LD_INT 82
41629: PUSH
41630: LD_INT 83
41632: PUSH
41633: LD_INT 84
41635: PUSH
41636: LD_INT 85
41638: PUSH
41639: LD_INT 86
41641: PUSH
41642: LD_INT 11
41644: PUSH
41645: LD_INT 9
41647: PUSH
41648: LD_INT 20
41650: PUSH
41651: LD_INT 19
41653: PUSH
41654: LD_INT 21
41656: PUSH
41657: LD_INT 24
41659: PUSH
41660: LD_INT 22
41662: PUSH
41663: LD_INT 25
41665: PUSH
41666: LD_INT 28
41668: PUSH
41669: LD_INT 29
41671: PUSH
41672: LD_INT 30
41674: PUSH
41675: LD_INT 31
41677: PUSH
41678: LD_INT 37
41680: PUSH
41681: LD_INT 38
41683: PUSH
41684: LD_INT 32
41686: PUSH
41687: LD_INT 27
41689: PUSH
41690: LD_INT 33
41692: PUSH
41693: LD_INT 69
41695: PUSH
41696: LD_INT 39
41698: PUSH
41699: LD_INT 34
41701: PUSH
41702: LD_INT 40
41704: PUSH
41705: LD_INT 71
41707: PUSH
41708: LD_INT 23
41710: PUSH
41711: LD_INT 44
41713: PUSH
41714: LD_INT 48
41716: PUSH
41717: LD_INT 49
41719: PUSH
41720: LD_INT 50
41722: PUSH
41723: LD_INT 51
41725: PUSH
41726: LD_INT 52
41728: PUSH
41729: LD_INT 53
41731: PUSH
41732: LD_INT 54
41734: PUSH
41735: LD_INT 55
41737: PUSH
41738: LD_INT 56
41740: PUSH
41741: LD_INT 57
41743: PUSH
41744: LD_INT 58
41746: PUSH
41747: LD_INT 59
41749: PUSH
41750: LD_INT 63
41752: PUSH
41753: LD_INT 64
41755: PUSH
41756: LD_INT 65
41758: PUSH
41759: LD_INT 82
41761: PUSH
41762: LD_INT 83
41764: PUSH
41765: LD_INT 84
41767: PUSH
41768: LD_INT 85
41770: PUSH
41771: LD_INT 86
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: ST_TO_ADDR
41829: GO 41832
41831: POP
// if state > - 1 and state < 3 then
41832: LD_VAR 0 3
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: GREATER
41841: PUSH
41842: LD_VAR 0 3
41846: PUSH
41847: LD_INT 3
41849: LESS
41850: AND
41851: IFFALSE 41908
// for i in result do
41853: LD_ADDR_VAR 0 5
41857: PUSH
41858: LD_VAR 0 4
41862: PUSH
41863: FOR_IN
41864: IFFALSE 41906
// if GetTech ( i , side ) <> state then
41866: LD_VAR 0 5
41870: PPUSH
41871: LD_VAR 0 1
41875: PPUSH
41876: CALL_OW 321
41880: PUSH
41881: LD_VAR 0 3
41885: NONEQUAL
41886: IFFALSE 41904
// result := result diff i ;
41888: LD_ADDR_VAR 0 4
41892: PUSH
41893: LD_VAR 0 4
41897: PUSH
41898: LD_VAR 0 5
41902: DIFF
41903: ST_TO_ADDR
41904: GO 41863
41906: POP
41907: POP
// end ;
41908: LD_VAR 0 4
41912: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41913: LD_INT 0
41915: PPUSH
41916: PPUSH
41917: PPUSH
// result := true ;
41918: LD_ADDR_VAR 0 3
41922: PUSH
41923: LD_INT 1
41925: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41926: LD_ADDR_VAR 0 5
41930: PUSH
41931: LD_VAR 0 2
41935: PPUSH
41936: CALL_OW 480
41940: ST_TO_ADDR
// if not tmp then
41941: LD_VAR 0 5
41945: NOT
41946: IFFALSE 41950
// exit ;
41948: GO 41999
// for i in tmp do
41950: LD_ADDR_VAR 0 4
41954: PUSH
41955: LD_VAR 0 5
41959: PUSH
41960: FOR_IN
41961: IFFALSE 41997
// if GetTech ( i , side ) <> state_researched then
41963: LD_VAR 0 4
41967: PPUSH
41968: LD_VAR 0 1
41972: PPUSH
41973: CALL_OW 321
41977: PUSH
41978: LD_INT 2
41980: NONEQUAL
41981: IFFALSE 41995
// begin result := false ;
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_INT 0
41990: ST_TO_ADDR
// exit ;
41991: POP
41992: POP
41993: GO 41999
// end ;
41995: GO 41960
41997: POP
41998: POP
// end ;
41999: LD_VAR 0 3
42003: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42004: LD_INT 0
42006: PPUSH
42007: PPUSH
42008: PPUSH
42009: PPUSH
42010: PPUSH
42011: PPUSH
42012: PPUSH
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42019: LD_VAR 0 1
42023: NOT
42024: PUSH
42025: LD_VAR 0 1
42029: PPUSH
42030: CALL_OW 257
42034: PUSH
42035: LD_INT 9
42037: NONEQUAL
42038: OR
42039: IFFALSE 42043
// exit ;
42041: GO 42616
// side := GetSide ( unit ) ;
42043: LD_ADDR_VAR 0 9
42047: PUSH
42048: LD_VAR 0 1
42052: PPUSH
42053: CALL_OW 255
42057: ST_TO_ADDR
// tech_space := tech_spacanom ;
42058: LD_ADDR_VAR 0 12
42062: PUSH
42063: LD_INT 29
42065: ST_TO_ADDR
// tech_time := tech_taurad ;
42066: LD_ADDR_VAR 0 13
42070: PUSH
42071: LD_INT 28
42073: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42074: LD_ADDR_VAR 0 11
42078: PUSH
42079: LD_VAR 0 1
42083: PPUSH
42084: CALL_OW 310
42088: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42089: LD_VAR 0 11
42093: PPUSH
42094: CALL_OW 247
42098: PUSH
42099: LD_INT 2
42101: EQUAL
42102: IFFALSE 42106
// exit ;
42104: GO 42616
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42106: LD_ADDR_VAR 0 8
42110: PUSH
42111: LD_INT 81
42113: PUSH
42114: LD_VAR 0 9
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PUSH
42123: LD_INT 3
42125: PUSH
42126: LD_INT 21
42128: PUSH
42129: LD_INT 3
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PPUSH
42144: CALL_OW 69
42148: ST_TO_ADDR
// if not tmp then
42149: LD_VAR 0 8
42153: NOT
42154: IFFALSE 42158
// exit ;
42156: GO 42616
// if in_unit then
42158: LD_VAR 0 11
42162: IFFALSE 42186
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42164: LD_ADDR_VAR 0 10
42168: PUSH
42169: LD_VAR 0 8
42173: PPUSH
42174: LD_VAR 0 11
42178: PPUSH
42179: CALL_OW 74
42183: ST_TO_ADDR
42184: GO 42206
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42186: LD_ADDR_VAR 0 10
42190: PUSH
42191: LD_VAR 0 8
42195: PPUSH
42196: LD_VAR 0 1
42200: PPUSH
42201: CALL_OW 74
42205: ST_TO_ADDR
// if not enemy then
42206: LD_VAR 0 10
42210: NOT
42211: IFFALSE 42215
// exit ;
42213: GO 42616
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42215: LD_VAR 0 11
42219: PUSH
42220: LD_VAR 0 11
42224: PPUSH
42225: LD_VAR 0 10
42229: PPUSH
42230: CALL_OW 296
42234: PUSH
42235: LD_INT 13
42237: GREATER
42238: AND
42239: PUSH
42240: LD_VAR 0 1
42244: PPUSH
42245: LD_VAR 0 10
42249: PPUSH
42250: CALL_OW 296
42254: PUSH
42255: LD_INT 12
42257: GREATER
42258: OR
42259: IFFALSE 42263
// exit ;
42261: GO 42616
// missile := [ 1 ] ;
42263: LD_ADDR_VAR 0 14
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42274: LD_VAR 0 9
42278: PPUSH
42279: LD_VAR 0 12
42283: PPUSH
42284: CALL_OW 325
42288: IFFALSE 42317
// missile := Insert ( missile , missile + 1 , 2 ) ;
42290: LD_ADDR_VAR 0 14
42294: PUSH
42295: LD_VAR 0 14
42299: PPUSH
42300: LD_VAR 0 14
42304: PUSH
42305: LD_INT 1
42307: PLUS
42308: PPUSH
42309: LD_INT 2
42311: PPUSH
42312: CALL_OW 2
42316: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42317: LD_VAR 0 9
42321: PPUSH
42322: LD_VAR 0 13
42326: PPUSH
42327: CALL_OW 325
42331: PUSH
42332: LD_VAR 0 10
42336: PPUSH
42337: CALL_OW 255
42341: PPUSH
42342: LD_VAR 0 13
42346: PPUSH
42347: CALL_OW 325
42351: NOT
42352: AND
42353: IFFALSE 42382
// missile := Insert ( missile , missile + 1 , 3 ) ;
42355: LD_ADDR_VAR 0 14
42359: PUSH
42360: LD_VAR 0 14
42364: PPUSH
42365: LD_VAR 0 14
42369: PUSH
42370: LD_INT 1
42372: PLUS
42373: PPUSH
42374: LD_INT 3
42376: PPUSH
42377: CALL_OW 2
42381: ST_TO_ADDR
// if missile < 2 then
42382: LD_VAR 0 14
42386: PUSH
42387: LD_INT 2
42389: LESS
42390: IFFALSE 42394
// exit ;
42392: GO 42616
// x := GetX ( enemy ) ;
42394: LD_ADDR_VAR 0 4
42398: PUSH
42399: LD_VAR 0 10
42403: PPUSH
42404: CALL_OW 250
42408: ST_TO_ADDR
// y := GetY ( enemy ) ;
42409: LD_ADDR_VAR 0 5
42413: PUSH
42414: LD_VAR 0 10
42418: PPUSH
42419: CALL_OW 251
42423: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42424: LD_ADDR_VAR 0 6
42428: PUSH
42429: LD_VAR 0 4
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PPUSH
42438: LD_INT 1
42440: PPUSH
42441: CALL_OW 12
42445: PLUS
42446: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42447: LD_ADDR_VAR 0 7
42451: PUSH
42452: LD_VAR 0 5
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PPUSH
42461: LD_INT 1
42463: PPUSH
42464: CALL_OW 12
42468: PLUS
42469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42470: LD_VAR 0 6
42474: PPUSH
42475: LD_VAR 0 7
42479: PPUSH
42480: CALL_OW 488
42484: NOT
42485: IFFALSE 42507
// begin _x := x ;
42487: LD_ADDR_VAR 0 6
42491: PUSH
42492: LD_VAR 0 4
42496: ST_TO_ADDR
// _y := y ;
42497: LD_ADDR_VAR 0 7
42501: PUSH
42502: LD_VAR 0 5
42506: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42507: LD_ADDR_VAR 0 3
42511: PUSH
42512: LD_INT 1
42514: PPUSH
42515: LD_VAR 0 14
42519: PPUSH
42520: CALL_OW 12
42524: ST_TO_ADDR
// case i of 1 :
42525: LD_VAR 0 3
42529: PUSH
42530: LD_INT 1
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42555
42538: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42539: LD_VAR 0 1
42543: PPUSH
42544: LD_VAR 0 10
42548: PPUSH
42549: CALL_OW 115
42553: GO 42616
42555: LD_INT 2
42557: DOUBLE
42558: EQUAL
42559: IFTRUE 42563
42561: GO 42585
42563: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42564: LD_VAR 0 1
42568: PPUSH
42569: LD_VAR 0 6
42573: PPUSH
42574: LD_VAR 0 7
42578: PPUSH
42579: CALL_OW 153
42583: GO 42616
42585: LD_INT 3
42587: DOUBLE
42588: EQUAL
42589: IFTRUE 42593
42591: GO 42615
42593: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42594: LD_VAR 0 1
42598: PPUSH
42599: LD_VAR 0 6
42603: PPUSH
42604: LD_VAR 0 7
42608: PPUSH
42609: CALL_OW 154
42613: GO 42616
42615: POP
// end ;
42616: LD_VAR 0 2
42620: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42621: LD_INT 0
42623: PPUSH
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
// if not unit or not building then
42629: LD_VAR 0 1
42633: NOT
42634: PUSH
42635: LD_VAR 0 2
42639: NOT
42640: OR
42641: IFFALSE 42645
// exit ;
42643: GO 42803
// x := GetX ( building ) ;
42645: LD_ADDR_VAR 0 5
42649: PUSH
42650: LD_VAR 0 2
42654: PPUSH
42655: CALL_OW 250
42659: ST_TO_ADDR
// y := GetY ( building ) ;
42660: LD_ADDR_VAR 0 6
42664: PUSH
42665: LD_VAR 0 2
42669: PPUSH
42670: CALL_OW 251
42674: ST_TO_ADDR
// for i = 0 to 5 do
42675: LD_ADDR_VAR 0 4
42679: PUSH
42680: DOUBLE
42681: LD_INT 0
42683: DEC
42684: ST_TO_ADDR
42685: LD_INT 5
42687: PUSH
42688: FOR_TO
42689: IFFALSE 42801
// begin _x := ShiftX ( x , i , 3 ) ;
42691: LD_ADDR_VAR 0 7
42695: PUSH
42696: LD_VAR 0 5
42700: PPUSH
42701: LD_VAR 0 4
42705: PPUSH
42706: LD_INT 3
42708: PPUSH
42709: CALL_OW 272
42713: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42714: LD_ADDR_VAR 0 8
42718: PUSH
42719: LD_VAR 0 6
42723: PPUSH
42724: LD_VAR 0 4
42728: PPUSH
42729: LD_INT 3
42731: PPUSH
42732: CALL_OW 273
42736: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42737: LD_VAR 0 7
42741: PPUSH
42742: LD_VAR 0 8
42746: PPUSH
42747: CALL_OW 488
42751: NOT
42752: IFFALSE 42756
// continue ;
42754: GO 42688
// if HexInfo ( _x , _y ) = 0 then
42756: LD_VAR 0 7
42760: PPUSH
42761: LD_VAR 0 8
42765: PPUSH
42766: CALL_OW 428
42770: PUSH
42771: LD_INT 0
42773: EQUAL
42774: IFFALSE 42799
// begin ComMoveXY ( unit , _x , _y ) ;
42776: LD_VAR 0 1
42780: PPUSH
42781: LD_VAR 0 7
42785: PPUSH
42786: LD_VAR 0 8
42790: PPUSH
42791: CALL_OW 111
// exit ;
42795: POP
42796: POP
42797: GO 42803
// end ; end ;
42799: GO 42688
42801: POP
42802: POP
// end ;
42803: LD_VAR 0 3
42807: RET
// export function ScanBase ( side , base_area ) ; begin
42808: LD_INT 0
42810: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42811: LD_ADDR_VAR 0 3
42815: PUSH
42816: LD_VAR 0 2
42820: PPUSH
42821: LD_INT 81
42823: PUSH
42824: LD_VAR 0 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PPUSH
42833: CALL_OW 70
42837: ST_TO_ADDR
// end ;
42838: LD_VAR 0 3
42842: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42843: LD_INT 0
42845: PPUSH
42846: PPUSH
42847: PPUSH
42848: PPUSH
// result := false ;
42849: LD_ADDR_VAR 0 2
42853: PUSH
42854: LD_INT 0
42856: ST_TO_ADDR
// side := GetSide ( unit ) ;
42857: LD_ADDR_VAR 0 3
42861: PUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 255
42871: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42872: LD_ADDR_VAR 0 4
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 248
42886: ST_TO_ADDR
// case nat of 1 :
42887: LD_VAR 0 4
42891: PUSH
42892: LD_INT 1
42894: DOUBLE
42895: EQUAL
42896: IFTRUE 42900
42898: GO 42911
42900: POP
// tech := tech_lassight ; 2 :
42901: LD_ADDR_VAR 0 5
42905: PUSH
42906: LD_INT 12
42908: ST_TO_ADDR
42909: GO 42950
42911: LD_INT 2
42913: DOUBLE
42914: EQUAL
42915: IFTRUE 42919
42917: GO 42930
42919: POP
// tech := tech_mortar ; 3 :
42920: LD_ADDR_VAR 0 5
42924: PUSH
42925: LD_INT 41
42927: ST_TO_ADDR
42928: GO 42950
42930: LD_INT 3
42932: DOUBLE
42933: EQUAL
42934: IFTRUE 42938
42936: GO 42949
42938: POP
// tech := tech_bazooka ; end ;
42939: LD_ADDR_VAR 0 5
42943: PUSH
42944: LD_INT 44
42946: ST_TO_ADDR
42947: GO 42950
42949: POP
// if Researched ( side , tech ) then
42950: LD_VAR 0 3
42954: PPUSH
42955: LD_VAR 0 5
42959: PPUSH
42960: CALL_OW 325
42964: IFFALSE 42991
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42966: LD_ADDR_VAR 0 2
42970: PUSH
42971: LD_INT 5
42973: PUSH
42974: LD_INT 8
42976: PUSH
42977: LD_INT 9
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: LIST
42984: PUSH
42985: LD_VAR 0 4
42989: ARRAY
42990: ST_TO_ADDR
// end ;
42991: LD_VAR 0 2
42995: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42996: LD_INT 0
42998: PPUSH
42999: PPUSH
43000: PPUSH
// if not mines then
43001: LD_VAR 0 2
43005: NOT
43006: IFFALSE 43010
// exit ;
43008: GO 43154
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43010: LD_ADDR_VAR 0 5
43014: PUSH
43015: LD_INT 81
43017: PUSH
43018: LD_VAR 0 1
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: LD_INT 21
43032: PUSH
43033: LD_INT 3
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PPUSH
43048: CALL_OW 69
43052: ST_TO_ADDR
// for i in mines do
43053: LD_ADDR_VAR 0 4
43057: PUSH
43058: LD_VAR 0 2
43062: PUSH
43063: FOR_IN
43064: IFFALSE 43152
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43066: LD_VAR 0 4
43070: PUSH
43071: LD_INT 1
43073: ARRAY
43074: PPUSH
43075: LD_VAR 0 4
43079: PUSH
43080: LD_INT 2
43082: ARRAY
43083: PPUSH
43084: CALL_OW 458
43088: NOT
43089: IFFALSE 43093
// continue ;
43091: GO 43063
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43093: LD_VAR 0 4
43097: PUSH
43098: LD_INT 1
43100: ARRAY
43101: PPUSH
43102: LD_VAR 0 4
43106: PUSH
43107: LD_INT 2
43109: ARRAY
43110: PPUSH
43111: CALL_OW 428
43115: PUSH
43116: LD_VAR 0 5
43120: IN
43121: IFFALSE 43150
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43123: LD_VAR 0 4
43127: PUSH
43128: LD_INT 1
43130: ARRAY
43131: PPUSH
43132: LD_VAR 0 4
43136: PUSH
43137: LD_INT 2
43139: ARRAY
43140: PPUSH
43141: LD_VAR 0 1
43145: PPUSH
43146: CALL_OW 456
// end ;
43150: GO 43063
43152: POP
43153: POP
// end ;
43154: LD_VAR 0 3
43158: RET
// export function Count ( array ) ; var i ; begin
43159: LD_INT 0
43161: PPUSH
43162: PPUSH
// result := 0 ;
43163: LD_ADDR_VAR 0 2
43167: PUSH
43168: LD_INT 0
43170: ST_TO_ADDR
// for i in array do
43171: LD_ADDR_VAR 0 3
43175: PUSH
43176: LD_VAR 0 1
43180: PUSH
43181: FOR_IN
43182: IFFALSE 43206
// if i then
43184: LD_VAR 0 3
43188: IFFALSE 43204
// result := result + 1 ;
43190: LD_ADDR_VAR 0 2
43194: PUSH
43195: LD_VAR 0 2
43199: PUSH
43200: LD_INT 1
43202: PLUS
43203: ST_TO_ADDR
43204: GO 43181
43206: POP
43207: POP
// end ;
43208: LD_VAR 0 2
43212: RET
// export function IsEmpty ( building ) ; begin
43213: LD_INT 0
43215: PPUSH
// if not building then
43216: LD_VAR 0 1
43220: NOT
43221: IFFALSE 43225
// exit ;
43223: GO 43268
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43225: LD_ADDR_VAR 0 2
43229: PUSH
43230: LD_VAR 0 1
43234: PUSH
43235: LD_INT 22
43237: PUSH
43238: LD_VAR 0 1
43242: PPUSH
43243: CALL_OW 255
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 58
43254: PUSH
43255: EMPTY
43256: LIST
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PPUSH
43262: CALL_OW 69
43266: IN
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 2
43272: RET
// export function IsNotFull ( building ) ; begin
43273: LD_INT 0
43275: PPUSH
// if not building then
43276: LD_VAR 0 1
43280: NOT
43281: IFFALSE 43285
// exit ;
43283: GO 43304
// result := UnitsInside ( building ) < 6 ;
43285: LD_ADDR_VAR 0 2
43289: PUSH
43290: LD_VAR 0 1
43294: PPUSH
43295: CALL_OW 313
43299: PUSH
43300: LD_INT 6
43302: LESS
43303: ST_TO_ADDR
// end ;
43304: LD_VAR 0 2
43308: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43309: LD_INT 0
43311: PPUSH
43312: PPUSH
43313: PPUSH
43314: PPUSH
// tmp := [ ] ;
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: EMPTY
43321: ST_TO_ADDR
// list := [ ] ;
43322: LD_ADDR_VAR 0 5
43326: PUSH
43327: EMPTY
43328: ST_TO_ADDR
// for i = 16 to 25 do
43329: LD_ADDR_VAR 0 4
43333: PUSH
43334: DOUBLE
43335: LD_INT 16
43337: DEC
43338: ST_TO_ADDR
43339: LD_INT 25
43341: PUSH
43342: FOR_TO
43343: IFFALSE 43416
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_VAR 0 3
43354: PUSH
43355: LD_INT 22
43357: PUSH
43358: LD_VAR 0 1
43362: PPUSH
43363: CALL_OW 255
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 91
43374: PUSH
43375: LD_VAR 0 1
43379: PUSH
43380: LD_INT 6
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 30
43390: PUSH
43391: LD_VAR 0 4
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: LIST
43404: PUSH
43405: EMPTY
43406: LIST
43407: PPUSH
43408: CALL_OW 69
43412: ADD
43413: ST_TO_ADDR
43414: GO 43342
43416: POP
43417: POP
// for i = 1 to tmp do
43418: LD_ADDR_VAR 0 4
43422: PUSH
43423: DOUBLE
43424: LD_INT 1
43426: DEC
43427: ST_TO_ADDR
43428: LD_VAR 0 3
43432: PUSH
43433: FOR_TO
43434: IFFALSE 43522
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43436: LD_ADDR_VAR 0 5
43440: PUSH
43441: LD_VAR 0 5
43445: PUSH
43446: LD_VAR 0 3
43450: PUSH
43451: LD_VAR 0 4
43455: ARRAY
43456: PPUSH
43457: CALL_OW 266
43461: PUSH
43462: LD_VAR 0 3
43466: PUSH
43467: LD_VAR 0 4
43471: ARRAY
43472: PPUSH
43473: CALL_OW 250
43477: PUSH
43478: LD_VAR 0 3
43482: PUSH
43483: LD_VAR 0 4
43487: ARRAY
43488: PPUSH
43489: CALL_OW 251
43493: PUSH
43494: LD_VAR 0 3
43498: PUSH
43499: LD_VAR 0 4
43503: ARRAY
43504: PPUSH
43505: CALL_OW 254
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: PUSH
43516: EMPTY
43517: LIST
43518: ADD
43519: ST_TO_ADDR
43520: GO 43433
43522: POP
43523: POP
// result := list ;
43524: LD_ADDR_VAR 0 2
43528: PUSH
43529: LD_VAR 0 5
43533: ST_TO_ADDR
// end ;
43534: LD_VAR 0 2
43538: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43539: LD_INT 0
43541: PPUSH
43542: PPUSH
43543: PPUSH
43544: PPUSH
43545: PPUSH
43546: PPUSH
43547: PPUSH
// if not factory then
43548: LD_VAR 0 1
43552: NOT
43553: IFFALSE 43557
// exit ;
43555: GO 44150
// if control = control_apeman then
43557: LD_VAR 0 4
43561: PUSH
43562: LD_INT 5
43564: EQUAL
43565: IFFALSE 43674
// begin tmp := UnitsInside ( factory ) ;
43567: LD_ADDR_VAR 0 8
43571: PUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: CALL_OW 313
43581: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43582: LD_VAR 0 8
43586: PPUSH
43587: LD_INT 25
43589: PUSH
43590: LD_INT 12
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PPUSH
43597: CALL_OW 72
43601: NOT
43602: IFFALSE 43612
// control := control_manual ;
43604: LD_ADDR_VAR 0 4
43608: PUSH
43609: LD_INT 1
43611: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43612: LD_ADDR_VAR 0 8
43616: PUSH
43617: LD_VAR 0 1
43621: PPUSH
43622: CALL 43309 0 1
43626: ST_TO_ADDR
// if tmp then
43627: LD_VAR 0 8
43631: IFFALSE 43674
// begin for i in tmp do
43633: LD_ADDR_VAR 0 7
43637: PUSH
43638: LD_VAR 0 8
43642: PUSH
43643: FOR_IN
43644: IFFALSE 43672
// if i [ 1 ] = b_ext_radio then
43646: LD_VAR 0 7
43650: PUSH
43651: LD_INT 1
43653: ARRAY
43654: PUSH
43655: LD_INT 22
43657: EQUAL
43658: IFFALSE 43670
// begin control := control_remote ;
43660: LD_ADDR_VAR 0 4
43664: PUSH
43665: LD_INT 2
43667: ST_TO_ADDR
// break ;
43668: GO 43672
// end ;
43670: GO 43643
43672: POP
43673: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43674: LD_VAR 0 1
43678: PPUSH
43679: LD_VAR 0 2
43683: PPUSH
43684: LD_VAR 0 3
43688: PPUSH
43689: LD_VAR 0 4
43693: PPUSH
43694: LD_VAR 0 5
43698: PPUSH
43699: CALL_OW 448
43703: IFFALSE 43738
// begin result := [ chassis , engine , control , weapon ] ;
43705: LD_ADDR_VAR 0 6
43709: PUSH
43710: LD_VAR 0 2
43714: PUSH
43715: LD_VAR 0 3
43719: PUSH
43720: LD_VAR 0 4
43724: PUSH
43725: LD_VAR 0 5
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: ST_TO_ADDR
// exit ;
43736: GO 44150
// end ; _chassis := AvailableChassisList ( factory ) ;
43738: LD_ADDR_VAR 0 9
43742: PUSH
43743: LD_VAR 0 1
43747: PPUSH
43748: CALL_OW 475
43752: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43753: LD_ADDR_VAR 0 11
43757: PUSH
43758: LD_VAR 0 1
43762: PPUSH
43763: CALL_OW 476
43767: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43768: LD_ADDR_VAR 0 12
43772: PUSH
43773: LD_VAR 0 1
43777: PPUSH
43778: CALL_OW 477
43782: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43783: LD_ADDR_VAR 0 10
43787: PUSH
43788: LD_VAR 0 1
43792: PPUSH
43793: CALL_OW 478
43797: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43798: LD_VAR 0 9
43802: NOT
43803: PUSH
43804: LD_VAR 0 11
43808: NOT
43809: OR
43810: PUSH
43811: LD_VAR 0 12
43815: NOT
43816: OR
43817: PUSH
43818: LD_VAR 0 10
43822: NOT
43823: OR
43824: IFFALSE 43859
// begin result := [ chassis , engine , control , weapon ] ;
43826: LD_ADDR_VAR 0 6
43830: PUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 3
43840: PUSH
43841: LD_VAR 0 4
43845: PUSH
43846: LD_VAR 0 5
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
// exit ;
43857: GO 44150
// end ; if not chassis in _chassis then
43859: LD_VAR 0 2
43863: PUSH
43864: LD_VAR 0 9
43868: IN
43869: NOT
43870: IFFALSE 43896
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43872: LD_ADDR_VAR 0 2
43876: PUSH
43877: LD_VAR 0 9
43881: PUSH
43882: LD_INT 1
43884: PPUSH
43885: LD_VAR 0 9
43889: PPUSH
43890: CALL_OW 12
43894: ARRAY
43895: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43896: LD_VAR 0 2
43900: PPUSH
43901: LD_VAR 0 3
43905: PPUSH
43906: CALL 44155 0 2
43910: NOT
43911: IFFALSE 43970
// repeat engine := _engine [ 1 ] ;
43913: LD_ADDR_VAR 0 3
43917: PUSH
43918: LD_VAR 0 11
43922: PUSH
43923: LD_INT 1
43925: ARRAY
43926: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43927: LD_ADDR_VAR 0 11
43931: PUSH
43932: LD_VAR 0 11
43936: PPUSH
43937: LD_INT 1
43939: PPUSH
43940: CALL_OW 3
43944: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43945: LD_VAR 0 2
43949: PPUSH
43950: LD_VAR 0 3
43954: PPUSH
43955: CALL 44155 0 2
43959: PUSH
43960: LD_VAR 0 11
43964: PUSH
43965: EMPTY
43966: EQUAL
43967: OR
43968: IFFALSE 43913
// if not control in _control then
43970: LD_VAR 0 4
43974: PUSH
43975: LD_VAR 0 12
43979: IN
43980: NOT
43981: IFFALSE 44007
// control := _control [ rand ( 1 , _control ) ] ;
43983: LD_ADDR_VAR 0 4
43987: PUSH
43988: LD_VAR 0 12
43992: PUSH
43993: LD_INT 1
43995: PPUSH
43996: LD_VAR 0 12
44000: PPUSH
44001: CALL_OW 12
44005: ARRAY
44006: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44007: LD_VAR 0 2
44011: PPUSH
44012: LD_VAR 0 5
44016: PPUSH
44017: CALL 44375 0 2
44021: NOT
44022: IFFALSE 44081
// repeat weapon := _weapon [ 1 ] ;
44024: LD_ADDR_VAR 0 5
44028: PUSH
44029: LD_VAR 0 10
44033: PUSH
44034: LD_INT 1
44036: ARRAY
44037: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44038: LD_ADDR_VAR 0 10
44042: PUSH
44043: LD_VAR 0 10
44047: PPUSH
44048: LD_INT 1
44050: PPUSH
44051: CALL_OW 3
44055: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44056: LD_VAR 0 2
44060: PPUSH
44061: LD_VAR 0 5
44065: PPUSH
44066: CALL 44375 0 2
44070: PUSH
44071: LD_VAR 0 10
44075: PUSH
44076: EMPTY
44077: EQUAL
44078: OR
44079: IFFALSE 44024
// result := [ ] ;
44081: LD_ADDR_VAR 0 6
44085: PUSH
44086: EMPTY
44087: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44088: LD_VAR 0 1
44092: PPUSH
44093: LD_VAR 0 2
44097: PPUSH
44098: LD_VAR 0 3
44102: PPUSH
44103: LD_VAR 0 4
44107: PPUSH
44108: LD_VAR 0 5
44112: PPUSH
44113: CALL_OW 448
44117: IFFALSE 44150
// result := [ chassis , engine , control , weapon ] ;
44119: LD_ADDR_VAR 0 6
44123: PUSH
44124: LD_VAR 0 2
44128: PUSH
44129: LD_VAR 0 3
44133: PUSH
44134: LD_VAR 0 4
44138: PUSH
44139: LD_VAR 0 5
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: ST_TO_ADDR
// end ;
44150: LD_VAR 0 6
44154: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44155: LD_INT 0
44157: PPUSH
// if not chassis or not engine then
44158: LD_VAR 0 1
44162: NOT
44163: PUSH
44164: LD_VAR 0 2
44168: NOT
44169: OR
44170: IFFALSE 44174
// exit ;
44172: GO 44370
// case engine of engine_solar :
44174: LD_VAR 0 2
44178: PUSH
44179: LD_INT 2
44181: DOUBLE
44182: EQUAL
44183: IFTRUE 44187
44185: GO 44225
44187: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_INT 11
44195: PUSH
44196: LD_INT 12
44198: PUSH
44199: LD_INT 13
44201: PUSH
44202: LD_INT 14
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 3
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: ST_TO_ADDR
44223: GO 44354
44225: LD_INT 1
44227: DOUBLE
44228: EQUAL
44229: IFTRUE 44233
44231: GO 44295
44233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44234: LD_ADDR_VAR 0 3
44238: PUSH
44239: LD_INT 11
44241: PUSH
44242: LD_INT 12
44244: PUSH
44245: LD_INT 13
44247: PUSH
44248: LD_INT 14
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 2
44256: PUSH
44257: LD_INT 3
44259: PUSH
44260: LD_INT 4
44262: PUSH
44263: LD_INT 5
44265: PUSH
44266: LD_INT 21
44268: PUSH
44269: LD_INT 23
44271: PUSH
44272: LD_INT 22
44274: PUSH
44275: LD_INT 24
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: ST_TO_ADDR
44293: GO 44354
44295: LD_INT 3
44297: DOUBLE
44298: EQUAL
44299: IFTRUE 44303
44301: GO 44353
44303: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44304: LD_ADDR_VAR 0 3
44308: PUSH
44309: LD_INT 13
44311: PUSH
44312: LD_INT 14
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: LD_INT 3
44320: PUSH
44321: LD_INT 4
44323: PUSH
44324: LD_INT 5
44326: PUSH
44327: LD_INT 21
44329: PUSH
44330: LD_INT 22
44332: PUSH
44333: LD_INT 23
44335: PUSH
44336: LD_INT 24
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: ST_TO_ADDR
44351: GO 44354
44353: POP
// result := ( chassis in result ) ;
44354: LD_ADDR_VAR 0 3
44358: PUSH
44359: LD_VAR 0 1
44363: PUSH
44364: LD_VAR 0 3
44368: IN
44369: ST_TO_ADDR
// end ;
44370: LD_VAR 0 3
44374: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44375: LD_INT 0
44377: PPUSH
// if not chassis or not weapon then
44378: LD_VAR 0 1
44382: NOT
44383: PUSH
44384: LD_VAR 0 2
44388: NOT
44389: OR
44390: IFFALSE 44394
// exit ;
44392: GO 45420
// case weapon of us_machine_gun :
44394: LD_VAR 0 2
44398: PUSH
44399: LD_INT 2
44401: DOUBLE
44402: EQUAL
44403: IFTRUE 44407
44405: GO 44437
44407: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44408: LD_ADDR_VAR 0 3
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: LD_INT 4
44424: PUSH
44425: LD_INT 5
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: ST_TO_ADDR
44435: GO 45404
44437: LD_INT 3
44439: DOUBLE
44440: EQUAL
44441: IFTRUE 44445
44443: GO 44475
44445: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44446: LD_ADDR_VAR 0 3
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 3
44459: PUSH
44460: LD_INT 4
44462: PUSH
44463: LD_INT 5
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: ST_TO_ADDR
44473: GO 45404
44475: LD_INT 11
44477: DOUBLE
44478: EQUAL
44479: IFTRUE 44483
44481: GO 44513
44483: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44484: LD_ADDR_VAR 0 3
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: LD_INT 3
44497: PUSH
44498: LD_INT 4
44500: PUSH
44501: LD_INT 5
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: ST_TO_ADDR
44511: GO 45404
44513: LD_INT 4
44515: DOUBLE
44516: EQUAL
44517: IFTRUE 44521
44519: GO 44547
44521: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44522: LD_ADDR_VAR 0 3
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: LD_INT 4
44535: PUSH
44536: LD_INT 5
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
44545: GO 45404
44547: LD_INT 5
44549: DOUBLE
44550: EQUAL
44551: IFTRUE 44555
44553: GO 44581
44555: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44556: LD_ADDR_VAR 0 3
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: LD_INT 3
44566: PUSH
44567: LD_INT 4
44569: PUSH
44570: LD_INT 5
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: ST_TO_ADDR
44579: GO 45404
44581: LD_INT 9
44583: DOUBLE
44584: EQUAL
44585: IFTRUE 44589
44587: GO 44615
44589: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44590: LD_ADDR_VAR 0 3
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: LD_INT 3
44600: PUSH
44601: LD_INT 4
44603: PUSH
44604: LD_INT 5
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: ST_TO_ADDR
44613: GO 45404
44615: LD_INT 7
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44649
44623: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44624: LD_ADDR_VAR 0 3
44628: PUSH
44629: LD_INT 2
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 4
44637: PUSH
44638: LD_INT 5
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: ST_TO_ADDR
44647: GO 45404
44649: LD_INT 12
44651: DOUBLE
44652: EQUAL
44653: IFTRUE 44657
44655: GO 44683
44657: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44658: LD_ADDR_VAR 0 3
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 3
44668: PUSH
44669: LD_INT 4
44671: PUSH
44672: LD_INT 5
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: LIST
44679: LIST
44680: ST_TO_ADDR
44681: GO 45404
44683: LD_INT 13
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44691
44689: GO 44717
44691: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44692: LD_ADDR_VAR 0 3
44696: PUSH
44697: LD_INT 2
44699: PUSH
44700: LD_INT 3
44702: PUSH
44703: LD_INT 4
44705: PUSH
44706: LD_INT 5
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
44715: GO 45404
44717: LD_INT 14
44719: DOUBLE
44720: EQUAL
44721: IFTRUE 44725
44723: GO 44743
44725: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44726: LD_ADDR_VAR 0 3
44730: PUSH
44731: LD_INT 4
44733: PUSH
44734: LD_INT 5
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: ST_TO_ADDR
44741: GO 45404
44743: LD_INT 6
44745: DOUBLE
44746: EQUAL
44747: IFTRUE 44751
44749: GO 44769
44751: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44752: LD_ADDR_VAR 0 3
44756: PUSH
44757: LD_INT 4
44759: PUSH
44760: LD_INT 5
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: ST_TO_ADDR
44767: GO 45404
44769: LD_INT 10
44771: DOUBLE
44772: EQUAL
44773: IFTRUE 44777
44775: GO 44795
44777: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44778: LD_ADDR_VAR 0 3
44782: PUSH
44783: LD_INT 4
44785: PUSH
44786: LD_INT 5
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: ST_TO_ADDR
44793: GO 45404
44795: LD_INT 22
44797: DOUBLE
44798: EQUAL
44799: IFTRUE 44803
44801: GO 44829
44803: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44804: LD_ADDR_VAR 0 3
44808: PUSH
44809: LD_INT 11
44811: PUSH
44812: LD_INT 12
44814: PUSH
44815: LD_INT 13
44817: PUSH
44818: LD_INT 14
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: LIST
44825: LIST
44826: ST_TO_ADDR
44827: GO 45404
44829: LD_INT 23
44831: DOUBLE
44832: EQUAL
44833: IFTRUE 44837
44835: GO 44863
44837: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44838: LD_ADDR_VAR 0 3
44842: PUSH
44843: LD_INT 11
44845: PUSH
44846: LD_INT 12
44848: PUSH
44849: LD_INT 13
44851: PUSH
44852: LD_INT 14
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
44861: GO 45404
44863: LD_INT 24
44865: DOUBLE
44866: EQUAL
44867: IFTRUE 44871
44869: GO 44897
44871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 11
44879: PUSH
44880: LD_INT 12
44882: PUSH
44883: LD_INT 13
44885: PUSH
44886: LD_INT 14
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
44895: GO 45404
44897: LD_INT 30
44899: DOUBLE
44900: EQUAL
44901: IFTRUE 44905
44903: GO 44931
44905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44906: LD_ADDR_VAR 0 3
44910: PUSH
44911: LD_INT 11
44913: PUSH
44914: LD_INT 12
44916: PUSH
44917: LD_INT 13
44919: PUSH
44920: LD_INT 14
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
44929: GO 45404
44931: LD_INT 25
44933: DOUBLE
44934: EQUAL
44935: IFTRUE 44939
44937: GO 44957
44939: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44940: LD_ADDR_VAR 0 3
44944: PUSH
44945: LD_INT 13
44947: PUSH
44948: LD_INT 14
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: ST_TO_ADDR
44955: GO 45404
44957: LD_INT 27
44959: DOUBLE
44960: EQUAL
44961: IFTRUE 44965
44963: GO 44983
44965: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44966: LD_ADDR_VAR 0 3
44970: PUSH
44971: LD_INT 13
44973: PUSH
44974: LD_INT 14
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: ST_TO_ADDR
44981: GO 45404
44983: LD_INT 28
44985: DOUBLE
44986: EQUAL
44987: IFTRUE 44991
44989: GO 45009
44991: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44992: LD_ADDR_VAR 0 3
44996: PUSH
44997: LD_INT 13
44999: PUSH
45000: LD_INT 14
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: ST_TO_ADDR
45007: GO 45404
45009: LD_INT 29
45011: DOUBLE
45012: EQUAL
45013: IFTRUE 45017
45015: GO 45035
45017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45018: LD_ADDR_VAR 0 3
45022: PUSH
45023: LD_INT 13
45025: PUSH
45026: LD_INT 14
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: ST_TO_ADDR
45033: GO 45404
45035: LD_INT 31
45037: DOUBLE
45038: EQUAL
45039: IFTRUE 45043
45041: GO 45061
45043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45044: LD_ADDR_VAR 0 3
45048: PUSH
45049: LD_INT 13
45051: PUSH
45052: LD_INT 14
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: ST_TO_ADDR
45059: GO 45404
45061: LD_INT 26
45063: DOUBLE
45064: EQUAL
45065: IFTRUE 45069
45067: GO 45087
45069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45070: LD_ADDR_VAR 0 3
45074: PUSH
45075: LD_INT 13
45077: PUSH
45078: LD_INT 14
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: ST_TO_ADDR
45085: GO 45404
45087: LD_INT 42
45089: DOUBLE
45090: EQUAL
45091: IFTRUE 45095
45093: GO 45121
45095: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45096: LD_ADDR_VAR 0 3
45100: PUSH
45101: LD_INT 21
45103: PUSH
45104: LD_INT 22
45106: PUSH
45107: LD_INT 23
45109: PUSH
45110: LD_INT 24
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: ST_TO_ADDR
45119: GO 45404
45121: LD_INT 43
45123: DOUBLE
45124: EQUAL
45125: IFTRUE 45129
45127: GO 45155
45129: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45130: LD_ADDR_VAR 0 3
45134: PUSH
45135: LD_INT 21
45137: PUSH
45138: LD_INT 22
45140: PUSH
45141: LD_INT 23
45143: PUSH
45144: LD_INT 24
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: ST_TO_ADDR
45153: GO 45404
45155: LD_INT 44
45157: DOUBLE
45158: EQUAL
45159: IFTRUE 45163
45161: GO 45189
45163: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45164: LD_ADDR_VAR 0 3
45168: PUSH
45169: LD_INT 21
45171: PUSH
45172: LD_INT 22
45174: PUSH
45175: LD_INT 23
45177: PUSH
45178: LD_INT 24
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: ST_TO_ADDR
45187: GO 45404
45189: LD_INT 45
45191: DOUBLE
45192: EQUAL
45193: IFTRUE 45197
45195: GO 45223
45197: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45198: LD_ADDR_VAR 0 3
45202: PUSH
45203: LD_INT 21
45205: PUSH
45206: LD_INT 22
45208: PUSH
45209: LD_INT 23
45211: PUSH
45212: LD_INT 24
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: ST_TO_ADDR
45221: GO 45404
45223: LD_INT 49
45225: DOUBLE
45226: EQUAL
45227: IFTRUE 45231
45229: GO 45257
45231: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45232: LD_ADDR_VAR 0 3
45236: PUSH
45237: LD_INT 21
45239: PUSH
45240: LD_INT 22
45242: PUSH
45243: LD_INT 23
45245: PUSH
45246: LD_INT 24
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: ST_TO_ADDR
45255: GO 45404
45257: LD_INT 51
45259: DOUBLE
45260: EQUAL
45261: IFTRUE 45265
45263: GO 45291
45265: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45266: LD_ADDR_VAR 0 3
45270: PUSH
45271: LD_INT 21
45273: PUSH
45274: LD_INT 22
45276: PUSH
45277: LD_INT 23
45279: PUSH
45280: LD_INT 24
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
45289: GO 45404
45291: LD_INT 52
45293: DOUBLE
45294: EQUAL
45295: IFTRUE 45299
45297: GO 45325
45299: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45300: LD_ADDR_VAR 0 3
45304: PUSH
45305: LD_INT 21
45307: PUSH
45308: LD_INT 22
45310: PUSH
45311: LD_INT 23
45313: PUSH
45314: LD_INT 24
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
45323: GO 45404
45325: LD_INT 53
45327: DOUBLE
45328: EQUAL
45329: IFTRUE 45333
45331: GO 45351
45333: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45334: LD_ADDR_VAR 0 3
45338: PUSH
45339: LD_INT 23
45341: PUSH
45342: LD_INT 24
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: ST_TO_ADDR
45349: GO 45404
45351: LD_INT 46
45353: DOUBLE
45354: EQUAL
45355: IFTRUE 45359
45357: GO 45377
45359: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45360: LD_ADDR_VAR 0 3
45364: PUSH
45365: LD_INT 23
45367: PUSH
45368: LD_INT 24
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: ST_TO_ADDR
45375: GO 45404
45377: LD_INT 47
45379: DOUBLE
45380: EQUAL
45381: IFTRUE 45385
45383: GO 45403
45385: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45386: LD_ADDR_VAR 0 3
45390: PUSH
45391: LD_INT 23
45393: PUSH
45394: LD_INT 24
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: ST_TO_ADDR
45401: GO 45404
45403: POP
// result := ( chassis in result ) ;
45404: LD_ADDR_VAR 0 3
45408: PUSH
45409: LD_VAR 0 1
45413: PUSH
45414: LD_VAR 0 3
45418: IN
45419: ST_TO_ADDR
// end ;
45420: LD_VAR 0 3
45424: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45425: LD_INT 0
45427: PPUSH
45428: PPUSH
45429: PPUSH
45430: PPUSH
45431: PPUSH
45432: PPUSH
45433: PPUSH
// result := array ;
45434: LD_ADDR_VAR 0 5
45438: PUSH
45439: LD_VAR 0 1
45443: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45444: LD_VAR 0 1
45448: NOT
45449: PUSH
45450: LD_VAR 0 2
45454: NOT
45455: OR
45456: PUSH
45457: LD_VAR 0 3
45461: NOT
45462: OR
45463: PUSH
45464: LD_VAR 0 2
45468: PUSH
45469: LD_VAR 0 1
45473: GREATER
45474: OR
45475: PUSH
45476: LD_VAR 0 3
45480: PUSH
45481: LD_VAR 0 1
45485: GREATER
45486: OR
45487: IFFALSE 45491
// exit ;
45489: GO 45787
// if direction then
45491: LD_VAR 0 4
45495: IFFALSE 45559
// begin d := 1 ;
45497: LD_ADDR_VAR 0 9
45501: PUSH
45502: LD_INT 1
45504: ST_TO_ADDR
// if i_from > i_to then
45505: LD_VAR 0 2
45509: PUSH
45510: LD_VAR 0 3
45514: GREATER
45515: IFFALSE 45541
// length := ( array - i_from ) + i_to else
45517: LD_ADDR_VAR 0 11
45521: PUSH
45522: LD_VAR 0 1
45526: PUSH
45527: LD_VAR 0 2
45531: MINUS
45532: PUSH
45533: LD_VAR 0 3
45537: PLUS
45538: ST_TO_ADDR
45539: GO 45557
// length := i_to - i_from ;
45541: LD_ADDR_VAR 0 11
45545: PUSH
45546: LD_VAR 0 3
45550: PUSH
45551: LD_VAR 0 2
45555: MINUS
45556: ST_TO_ADDR
// end else
45557: GO 45620
// begin d := - 1 ;
45559: LD_ADDR_VAR 0 9
45563: PUSH
45564: LD_INT 1
45566: NEG
45567: ST_TO_ADDR
// if i_from > i_to then
45568: LD_VAR 0 2
45572: PUSH
45573: LD_VAR 0 3
45577: GREATER
45578: IFFALSE 45598
// length := i_from - i_to else
45580: LD_ADDR_VAR 0 11
45584: PUSH
45585: LD_VAR 0 2
45589: PUSH
45590: LD_VAR 0 3
45594: MINUS
45595: ST_TO_ADDR
45596: GO 45620
// length := ( array - i_to ) + i_from ;
45598: LD_ADDR_VAR 0 11
45602: PUSH
45603: LD_VAR 0 1
45607: PUSH
45608: LD_VAR 0 3
45612: MINUS
45613: PUSH
45614: LD_VAR 0 2
45618: PLUS
45619: ST_TO_ADDR
// end ; if not length then
45620: LD_VAR 0 11
45624: NOT
45625: IFFALSE 45629
// exit ;
45627: GO 45787
// tmp := array ;
45629: LD_ADDR_VAR 0 10
45633: PUSH
45634: LD_VAR 0 1
45638: ST_TO_ADDR
// for i = 1 to length do
45639: LD_ADDR_VAR 0 6
45643: PUSH
45644: DOUBLE
45645: LD_INT 1
45647: DEC
45648: ST_TO_ADDR
45649: LD_VAR 0 11
45653: PUSH
45654: FOR_TO
45655: IFFALSE 45775
// begin for j = 1 to array do
45657: LD_ADDR_VAR 0 7
45661: PUSH
45662: DOUBLE
45663: LD_INT 1
45665: DEC
45666: ST_TO_ADDR
45667: LD_VAR 0 1
45671: PUSH
45672: FOR_TO
45673: IFFALSE 45761
// begin k := j + d ;
45675: LD_ADDR_VAR 0 8
45679: PUSH
45680: LD_VAR 0 7
45684: PUSH
45685: LD_VAR 0 9
45689: PLUS
45690: ST_TO_ADDR
// if k > array then
45691: LD_VAR 0 8
45695: PUSH
45696: LD_VAR 0 1
45700: GREATER
45701: IFFALSE 45711
// k := 1 ;
45703: LD_ADDR_VAR 0 8
45707: PUSH
45708: LD_INT 1
45710: ST_TO_ADDR
// if not k then
45711: LD_VAR 0 8
45715: NOT
45716: IFFALSE 45728
// k := array ;
45718: LD_ADDR_VAR 0 8
45722: PUSH
45723: LD_VAR 0 1
45727: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45728: LD_ADDR_VAR 0 10
45732: PUSH
45733: LD_VAR 0 10
45737: PPUSH
45738: LD_VAR 0 8
45742: PPUSH
45743: LD_VAR 0 1
45747: PUSH
45748: LD_VAR 0 7
45752: ARRAY
45753: PPUSH
45754: CALL_OW 1
45758: ST_TO_ADDR
// end ;
45759: GO 45672
45761: POP
45762: POP
// array := tmp ;
45763: LD_ADDR_VAR 0 1
45767: PUSH
45768: LD_VAR 0 10
45772: ST_TO_ADDR
// end ;
45773: GO 45654
45775: POP
45776: POP
// result := array ;
45777: LD_ADDR_VAR 0 5
45781: PUSH
45782: LD_VAR 0 1
45786: ST_TO_ADDR
// end ;
45787: LD_VAR 0 5
45791: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45792: LD_INT 0
45794: PPUSH
45795: PPUSH
// result := 0 ;
45796: LD_ADDR_VAR 0 3
45800: PUSH
45801: LD_INT 0
45803: ST_TO_ADDR
// if not array or not value in array then
45804: LD_VAR 0 1
45808: NOT
45809: PUSH
45810: LD_VAR 0 2
45814: PUSH
45815: LD_VAR 0 1
45819: IN
45820: NOT
45821: OR
45822: IFFALSE 45826
// exit ;
45824: GO 45880
// for i = 1 to array do
45826: LD_ADDR_VAR 0 4
45830: PUSH
45831: DOUBLE
45832: LD_INT 1
45834: DEC
45835: ST_TO_ADDR
45836: LD_VAR 0 1
45840: PUSH
45841: FOR_TO
45842: IFFALSE 45878
// if value = array [ i ] then
45844: LD_VAR 0 2
45848: PUSH
45849: LD_VAR 0 1
45853: PUSH
45854: LD_VAR 0 4
45858: ARRAY
45859: EQUAL
45860: IFFALSE 45876
// begin result := i ;
45862: LD_ADDR_VAR 0 3
45866: PUSH
45867: LD_VAR 0 4
45871: ST_TO_ADDR
// exit ;
45872: POP
45873: POP
45874: GO 45880
// end ;
45876: GO 45841
45878: POP
45879: POP
// end ;
45880: LD_VAR 0 3
45884: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45885: LD_INT 0
45887: PPUSH
// vc_chassis := chassis ;
45888: LD_ADDR_OWVAR 37
45892: PUSH
45893: LD_VAR 0 1
45897: ST_TO_ADDR
// vc_engine := engine ;
45898: LD_ADDR_OWVAR 39
45902: PUSH
45903: LD_VAR 0 2
45907: ST_TO_ADDR
// vc_control := control ;
45908: LD_ADDR_OWVAR 38
45912: PUSH
45913: LD_VAR 0 3
45917: ST_TO_ADDR
// vc_weapon := weapon ;
45918: LD_ADDR_OWVAR 40
45922: PUSH
45923: LD_VAR 0 4
45927: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45928: LD_ADDR_OWVAR 41
45932: PUSH
45933: LD_VAR 0 5
45937: ST_TO_ADDR
// end ;
45938: LD_VAR 0 6
45942: RET
// export function WantPlant ( unit ) ; var task ; begin
45943: LD_INT 0
45945: PPUSH
45946: PPUSH
// result := false ;
45947: LD_ADDR_VAR 0 2
45951: PUSH
45952: LD_INT 0
45954: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45955: LD_ADDR_VAR 0 3
45959: PUSH
45960: LD_VAR 0 1
45964: PPUSH
45965: CALL_OW 437
45969: ST_TO_ADDR
// if task then
45970: LD_VAR 0 3
45974: IFFALSE 46002
// if task [ 1 ] [ 1 ] = p then
45976: LD_VAR 0 3
45980: PUSH
45981: LD_INT 1
45983: ARRAY
45984: PUSH
45985: LD_INT 1
45987: ARRAY
45988: PUSH
45989: LD_STRING p
45991: EQUAL
45992: IFFALSE 46002
// result := true ;
45994: LD_ADDR_VAR 0 2
45998: PUSH
45999: LD_INT 1
46001: ST_TO_ADDR
// end ;
46002: LD_VAR 0 2
46006: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46007: LD_INT 0
46009: PPUSH
46010: PPUSH
46011: PPUSH
46012: PPUSH
// if pos < 1 then
46013: LD_VAR 0 2
46017: PUSH
46018: LD_INT 1
46020: LESS
46021: IFFALSE 46025
// exit ;
46023: GO 46328
// if pos = 1 then
46025: LD_VAR 0 2
46029: PUSH
46030: LD_INT 1
46032: EQUAL
46033: IFFALSE 46066
// result := Replace ( arr , pos [ 1 ] , value ) else
46035: LD_ADDR_VAR 0 4
46039: PUSH
46040: LD_VAR 0 1
46044: PPUSH
46045: LD_VAR 0 2
46049: PUSH
46050: LD_INT 1
46052: ARRAY
46053: PPUSH
46054: LD_VAR 0 3
46058: PPUSH
46059: CALL_OW 1
46063: ST_TO_ADDR
46064: GO 46328
// begin tmp := arr ;
46066: LD_ADDR_VAR 0 6
46070: PUSH
46071: LD_VAR 0 1
46075: ST_TO_ADDR
// s_arr := [ tmp ] ;
46076: LD_ADDR_VAR 0 7
46080: PUSH
46081: LD_VAR 0 6
46085: PUSH
46086: EMPTY
46087: LIST
46088: ST_TO_ADDR
// for i = 1 to pos - 1 do
46089: LD_ADDR_VAR 0 5
46093: PUSH
46094: DOUBLE
46095: LD_INT 1
46097: DEC
46098: ST_TO_ADDR
46099: LD_VAR 0 2
46103: PUSH
46104: LD_INT 1
46106: MINUS
46107: PUSH
46108: FOR_TO
46109: IFFALSE 46154
// begin tmp := tmp [ pos [ i ] ] ;
46111: LD_ADDR_VAR 0 6
46115: PUSH
46116: LD_VAR 0 6
46120: PUSH
46121: LD_VAR 0 2
46125: PUSH
46126: LD_VAR 0 5
46130: ARRAY
46131: ARRAY
46132: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46133: LD_ADDR_VAR 0 7
46137: PUSH
46138: LD_VAR 0 7
46142: PUSH
46143: LD_VAR 0 6
46147: PUSH
46148: EMPTY
46149: LIST
46150: ADD
46151: ST_TO_ADDR
// end ;
46152: GO 46108
46154: POP
46155: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46156: LD_ADDR_VAR 0 6
46160: PUSH
46161: LD_VAR 0 6
46165: PPUSH
46166: LD_VAR 0 2
46170: PUSH
46171: LD_VAR 0 2
46175: ARRAY
46176: PPUSH
46177: LD_VAR 0 3
46181: PPUSH
46182: CALL_OW 1
46186: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46187: LD_ADDR_VAR 0 7
46191: PUSH
46192: LD_VAR 0 7
46196: PPUSH
46197: LD_VAR 0 7
46201: PPUSH
46202: LD_VAR 0 6
46206: PPUSH
46207: CALL_OW 1
46211: ST_TO_ADDR
// for i = s_arr downto 2 do
46212: LD_ADDR_VAR 0 5
46216: PUSH
46217: DOUBLE
46218: LD_VAR 0 7
46222: INC
46223: ST_TO_ADDR
46224: LD_INT 2
46226: PUSH
46227: FOR_DOWNTO
46228: IFFALSE 46312
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46230: LD_ADDR_VAR 0 6
46234: PUSH
46235: LD_VAR 0 7
46239: PUSH
46240: LD_VAR 0 5
46244: PUSH
46245: LD_INT 1
46247: MINUS
46248: ARRAY
46249: PPUSH
46250: LD_VAR 0 2
46254: PUSH
46255: LD_VAR 0 5
46259: PUSH
46260: LD_INT 1
46262: MINUS
46263: ARRAY
46264: PPUSH
46265: LD_VAR 0 7
46269: PUSH
46270: LD_VAR 0 5
46274: ARRAY
46275: PPUSH
46276: CALL_OW 1
46280: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46281: LD_ADDR_VAR 0 7
46285: PUSH
46286: LD_VAR 0 7
46290: PPUSH
46291: LD_VAR 0 5
46295: PUSH
46296: LD_INT 1
46298: MINUS
46299: PPUSH
46300: LD_VAR 0 6
46304: PPUSH
46305: CALL_OW 1
46309: ST_TO_ADDR
// end ;
46310: GO 46227
46312: POP
46313: POP
// result := s_arr [ 1 ] ;
46314: LD_ADDR_VAR 0 4
46318: PUSH
46319: LD_VAR 0 7
46323: PUSH
46324: LD_INT 1
46326: ARRAY
46327: ST_TO_ADDR
// end ; end ;
46328: LD_VAR 0 4
46332: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46333: LD_INT 0
46335: PPUSH
46336: PPUSH
// if not list then
46337: LD_VAR 0 1
46341: NOT
46342: IFFALSE 46346
// exit ;
46344: GO 46437
// i := list [ pos1 ] ;
46346: LD_ADDR_VAR 0 5
46350: PUSH
46351: LD_VAR 0 1
46355: PUSH
46356: LD_VAR 0 2
46360: ARRAY
46361: ST_TO_ADDR
// if not i then
46362: LD_VAR 0 5
46366: NOT
46367: IFFALSE 46371
// exit ;
46369: GO 46437
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46371: LD_ADDR_VAR 0 1
46375: PUSH
46376: LD_VAR 0 1
46380: PPUSH
46381: LD_VAR 0 2
46385: PPUSH
46386: LD_VAR 0 1
46390: PUSH
46391: LD_VAR 0 3
46395: ARRAY
46396: PPUSH
46397: CALL_OW 1
46401: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46402: LD_ADDR_VAR 0 1
46406: PUSH
46407: LD_VAR 0 1
46411: PPUSH
46412: LD_VAR 0 3
46416: PPUSH
46417: LD_VAR 0 5
46421: PPUSH
46422: CALL_OW 1
46426: ST_TO_ADDR
// result := list ;
46427: LD_ADDR_VAR 0 4
46431: PUSH
46432: LD_VAR 0 1
46436: ST_TO_ADDR
// end ;
46437: LD_VAR 0 4
46441: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46442: LD_INT 0
46444: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46445: LD_ADDR_VAR 0 5
46449: PUSH
46450: LD_VAR 0 1
46454: PPUSH
46455: CALL_OW 250
46459: PPUSH
46460: LD_VAR 0 1
46464: PPUSH
46465: CALL_OW 251
46469: PPUSH
46470: LD_VAR 0 2
46474: PPUSH
46475: LD_VAR 0 3
46479: PPUSH
46480: LD_VAR 0 4
46484: PPUSH
46485: CALL 46495 0 5
46489: ST_TO_ADDR
// end ;
46490: LD_VAR 0 5
46494: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46495: LD_INT 0
46497: PPUSH
46498: PPUSH
46499: PPUSH
46500: PPUSH
// if not list then
46501: LD_VAR 0 3
46505: NOT
46506: IFFALSE 46510
// exit ;
46508: GO 46898
// result := [ ] ;
46510: LD_ADDR_VAR 0 6
46514: PUSH
46515: EMPTY
46516: ST_TO_ADDR
// for i in list do
46517: LD_ADDR_VAR 0 7
46521: PUSH
46522: LD_VAR 0 3
46526: PUSH
46527: FOR_IN
46528: IFFALSE 46730
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46530: LD_ADDR_VAR 0 9
46534: PUSH
46535: LD_VAR 0 7
46539: PPUSH
46540: LD_VAR 0 1
46544: PPUSH
46545: LD_VAR 0 2
46549: PPUSH
46550: CALL_OW 297
46554: ST_TO_ADDR
// if not result then
46555: LD_VAR 0 6
46559: NOT
46560: IFFALSE 46586
// result := [ [ i , tmp ] ] else
46562: LD_ADDR_VAR 0 6
46566: PUSH
46567: LD_VAR 0 7
46571: PUSH
46572: LD_VAR 0 9
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: EMPTY
46582: LIST
46583: ST_TO_ADDR
46584: GO 46728
// begin if result [ result ] [ 2 ] < tmp then
46586: LD_VAR 0 6
46590: PUSH
46591: LD_VAR 0 6
46595: ARRAY
46596: PUSH
46597: LD_INT 2
46599: ARRAY
46600: PUSH
46601: LD_VAR 0 9
46605: LESS
46606: IFFALSE 46648
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46608: LD_ADDR_VAR 0 6
46612: PUSH
46613: LD_VAR 0 6
46617: PPUSH
46618: LD_VAR 0 6
46622: PUSH
46623: LD_INT 1
46625: PLUS
46626: PPUSH
46627: LD_VAR 0 7
46631: PUSH
46632: LD_VAR 0 9
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PPUSH
46641: CALL_OW 2
46645: ST_TO_ADDR
46646: GO 46728
// for j = 1 to result do
46648: LD_ADDR_VAR 0 8
46652: PUSH
46653: DOUBLE
46654: LD_INT 1
46656: DEC
46657: ST_TO_ADDR
46658: LD_VAR 0 6
46662: PUSH
46663: FOR_TO
46664: IFFALSE 46726
// begin if tmp < result [ j ] [ 2 ] then
46666: LD_VAR 0 9
46670: PUSH
46671: LD_VAR 0 6
46675: PUSH
46676: LD_VAR 0 8
46680: ARRAY
46681: PUSH
46682: LD_INT 2
46684: ARRAY
46685: LESS
46686: IFFALSE 46724
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46688: LD_ADDR_VAR 0 6
46692: PUSH
46693: LD_VAR 0 6
46697: PPUSH
46698: LD_VAR 0 8
46702: PPUSH
46703: LD_VAR 0 7
46707: PUSH
46708: LD_VAR 0 9
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PPUSH
46717: CALL_OW 2
46721: ST_TO_ADDR
// break ;
46722: GO 46726
// end ; end ;
46724: GO 46663
46726: POP
46727: POP
// end ; end ;
46728: GO 46527
46730: POP
46731: POP
// if result and not asc then
46732: LD_VAR 0 6
46736: PUSH
46737: LD_VAR 0 4
46741: NOT
46742: AND
46743: IFFALSE 46818
// begin tmp := result ;
46745: LD_ADDR_VAR 0 9
46749: PUSH
46750: LD_VAR 0 6
46754: ST_TO_ADDR
// for i = tmp downto 1 do
46755: LD_ADDR_VAR 0 7
46759: PUSH
46760: DOUBLE
46761: LD_VAR 0 9
46765: INC
46766: ST_TO_ADDR
46767: LD_INT 1
46769: PUSH
46770: FOR_DOWNTO
46771: IFFALSE 46816
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46773: LD_ADDR_VAR 0 6
46777: PUSH
46778: LD_VAR 0 6
46782: PPUSH
46783: LD_VAR 0 9
46787: PUSH
46788: LD_VAR 0 7
46792: MINUS
46793: PUSH
46794: LD_INT 1
46796: PLUS
46797: PPUSH
46798: LD_VAR 0 9
46802: PUSH
46803: LD_VAR 0 7
46807: ARRAY
46808: PPUSH
46809: CALL_OW 1
46813: ST_TO_ADDR
46814: GO 46770
46816: POP
46817: POP
// end ; tmp := [ ] ;
46818: LD_ADDR_VAR 0 9
46822: PUSH
46823: EMPTY
46824: ST_TO_ADDR
// if mode then
46825: LD_VAR 0 5
46829: IFFALSE 46898
// begin for i = 1 to result do
46831: LD_ADDR_VAR 0 7
46835: PUSH
46836: DOUBLE
46837: LD_INT 1
46839: DEC
46840: ST_TO_ADDR
46841: LD_VAR 0 6
46845: PUSH
46846: FOR_TO
46847: IFFALSE 46886
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46849: LD_ADDR_VAR 0 9
46853: PUSH
46854: LD_VAR 0 9
46858: PPUSH
46859: LD_VAR 0 7
46863: PPUSH
46864: LD_VAR 0 6
46868: PUSH
46869: LD_VAR 0 7
46873: ARRAY
46874: PUSH
46875: LD_INT 1
46877: ARRAY
46878: PPUSH
46879: CALL_OW 1
46883: ST_TO_ADDR
46884: GO 46846
46886: POP
46887: POP
// result := tmp ;
46888: LD_ADDR_VAR 0 6
46892: PUSH
46893: LD_VAR 0 9
46897: ST_TO_ADDR
// end ; end ;
46898: LD_VAR 0 6
46902: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46903: LD_INT 0
46905: PPUSH
46906: PPUSH
46907: PPUSH
46908: PPUSH
46909: PPUSH
46910: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46911: LD_ADDR_VAR 0 5
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: EMPTY
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// if not x or not y then
46933: LD_VAR 0 2
46937: NOT
46938: PUSH
46939: LD_VAR 0 3
46943: NOT
46944: OR
46945: IFFALSE 46949
// exit ;
46947: GO 48595
// if not range then
46949: LD_VAR 0 4
46953: NOT
46954: IFFALSE 46964
// range := 10 ;
46956: LD_ADDR_VAR 0 4
46960: PUSH
46961: LD_INT 10
46963: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46964: LD_ADDR_VAR 0 8
46968: PUSH
46969: LD_INT 81
46971: PUSH
46972: LD_VAR 0 1
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 92
46983: PUSH
46984: LD_VAR 0 2
46988: PUSH
46989: LD_VAR 0 3
46993: PUSH
46994: LD_VAR 0 4
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 3
47007: PUSH
47008: LD_INT 21
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: LIST
47026: PPUSH
47027: CALL_OW 69
47031: ST_TO_ADDR
// if not tmp then
47032: LD_VAR 0 8
47036: NOT
47037: IFFALSE 47041
// exit ;
47039: GO 48595
// for i in tmp do
47041: LD_ADDR_VAR 0 6
47045: PUSH
47046: LD_VAR 0 8
47050: PUSH
47051: FOR_IN
47052: IFFALSE 48570
// begin points := [ 0 , 0 , 0 ] ;
47054: LD_ADDR_VAR 0 9
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: LD_INT 0
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: LIST
47072: ST_TO_ADDR
// bpoints := 1 ;
47073: LD_ADDR_VAR 0 10
47077: PUSH
47078: LD_INT 1
47080: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47081: LD_VAR 0 6
47085: PPUSH
47086: CALL_OW 247
47090: PUSH
47091: LD_INT 1
47093: DOUBLE
47094: EQUAL
47095: IFTRUE 47099
47097: GO 47677
47099: POP
// begin if GetClass ( i ) = 1 then
47100: LD_VAR 0 6
47104: PPUSH
47105: CALL_OW 257
47109: PUSH
47110: LD_INT 1
47112: EQUAL
47113: IFFALSE 47134
// points := [ 10 , 5 , 3 ] ;
47115: LD_ADDR_VAR 0 9
47119: PUSH
47120: LD_INT 10
47122: PUSH
47123: LD_INT 5
47125: PUSH
47126: LD_INT 3
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47134: LD_VAR 0 6
47138: PPUSH
47139: CALL_OW 257
47143: PUSH
47144: LD_INT 2
47146: PUSH
47147: LD_INT 3
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: LIST
47157: IN
47158: IFFALSE 47179
// points := [ 3 , 2 , 1 ] ;
47160: LD_ADDR_VAR 0 9
47164: PUSH
47165: LD_INT 3
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: LD_INT 1
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47179: LD_VAR 0 6
47183: PPUSH
47184: CALL_OW 257
47188: PUSH
47189: LD_INT 5
47191: EQUAL
47192: IFFALSE 47213
// points := [ 130 , 5 , 2 ] ;
47194: LD_ADDR_VAR 0 9
47198: PUSH
47199: LD_INT 130
47201: PUSH
47202: LD_INT 5
47204: PUSH
47205: LD_INT 2
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: LIST
47212: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47213: LD_VAR 0 6
47217: PPUSH
47218: CALL_OW 257
47222: PUSH
47223: LD_INT 8
47225: EQUAL
47226: IFFALSE 47247
// points := [ 35 , 35 , 30 ] ;
47228: LD_ADDR_VAR 0 9
47232: PUSH
47233: LD_INT 35
47235: PUSH
47236: LD_INT 35
47238: PUSH
47239: LD_INT 30
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47247: LD_VAR 0 6
47251: PPUSH
47252: CALL_OW 257
47256: PUSH
47257: LD_INT 9
47259: EQUAL
47260: IFFALSE 47281
// points := [ 20 , 55 , 40 ] ;
47262: LD_ADDR_VAR 0 9
47266: PUSH
47267: LD_INT 20
47269: PUSH
47270: LD_INT 55
47272: PUSH
47273: LD_INT 40
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: LIST
47280: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47281: LD_VAR 0 6
47285: PPUSH
47286: CALL_OW 257
47290: PUSH
47291: LD_INT 12
47293: PUSH
47294: LD_INT 16
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: IN
47301: IFFALSE 47322
// points := [ 5 , 3 , 2 ] ;
47303: LD_ADDR_VAR 0 9
47307: PUSH
47308: LD_INT 5
47310: PUSH
47311: LD_INT 3
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: LIST
47321: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47322: LD_VAR 0 6
47326: PPUSH
47327: CALL_OW 257
47331: PUSH
47332: LD_INT 17
47334: EQUAL
47335: IFFALSE 47356
// points := [ 100 , 50 , 75 ] ;
47337: LD_ADDR_VAR 0 9
47341: PUSH
47342: LD_INT 100
47344: PUSH
47345: LD_INT 50
47347: PUSH
47348: LD_INT 75
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: LIST
47355: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47356: LD_VAR 0 6
47360: PPUSH
47361: CALL_OW 257
47365: PUSH
47366: LD_INT 15
47368: EQUAL
47369: IFFALSE 47390
// points := [ 10 , 5 , 3 ] ;
47371: LD_ADDR_VAR 0 9
47375: PUSH
47376: LD_INT 10
47378: PUSH
47379: LD_INT 5
47381: PUSH
47382: LD_INT 3
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47390: LD_VAR 0 6
47394: PPUSH
47395: CALL_OW 257
47399: PUSH
47400: LD_INT 14
47402: EQUAL
47403: IFFALSE 47424
// points := [ 10 , 0 , 0 ] ;
47405: LD_ADDR_VAR 0 9
47409: PUSH
47410: LD_INT 10
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47424: LD_VAR 0 6
47428: PPUSH
47429: CALL_OW 257
47433: PUSH
47434: LD_INT 11
47436: EQUAL
47437: IFFALSE 47458
// points := [ 30 , 10 , 5 ] ;
47439: LD_ADDR_VAR 0 9
47443: PUSH
47444: LD_INT 30
47446: PUSH
47447: LD_INT 10
47449: PUSH
47450: LD_INT 5
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47458: LD_VAR 0 1
47462: PPUSH
47463: LD_INT 5
47465: PPUSH
47466: CALL_OW 321
47470: PUSH
47471: LD_INT 2
47473: EQUAL
47474: IFFALSE 47491
// bpoints := bpoints * 1.8 ;
47476: LD_ADDR_VAR 0 10
47480: PUSH
47481: LD_VAR 0 10
47485: PUSH
47486: LD_REAL  1.80000000000000E+0000
47489: MUL
47490: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47491: LD_VAR 0 6
47495: PPUSH
47496: CALL_OW 257
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: LD_INT 3
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: IN
47519: PUSH
47520: LD_VAR 0 1
47524: PPUSH
47525: LD_INT 51
47527: PPUSH
47528: CALL_OW 321
47532: PUSH
47533: LD_INT 2
47535: EQUAL
47536: AND
47537: IFFALSE 47554
// bpoints := bpoints * 1.2 ;
47539: LD_ADDR_VAR 0 10
47543: PUSH
47544: LD_VAR 0 10
47548: PUSH
47549: LD_REAL  1.20000000000000E+0000
47552: MUL
47553: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47554: LD_VAR 0 6
47558: PPUSH
47559: CALL_OW 257
47563: PUSH
47564: LD_INT 5
47566: PUSH
47567: LD_INT 7
47569: PUSH
47570: LD_INT 9
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: LIST
47577: IN
47578: PUSH
47579: LD_VAR 0 1
47583: PPUSH
47584: LD_INT 52
47586: PPUSH
47587: CALL_OW 321
47591: PUSH
47592: LD_INT 2
47594: EQUAL
47595: AND
47596: IFFALSE 47613
// bpoints := bpoints * 1.5 ;
47598: LD_ADDR_VAR 0 10
47602: PUSH
47603: LD_VAR 0 10
47607: PUSH
47608: LD_REAL  1.50000000000000E+0000
47611: MUL
47612: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47613: LD_VAR 0 1
47617: PPUSH
47618: LD_INT 66
47620: PPUSH
47621: CALL_OW 321
47625: PUSH
47626: LD_INT 2
47628: EQUAL
47629: IFFALSE 47646
// bpoints := bpoints * 1.1 ;
47631: LD_ADDR_VAR 0 10
47635: PUSH
47636: LD_VAR 0 10
47640: PUSH
47641: LD_REAL  1.10000000000000E+0000
47644: MUL
47645: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47646: LD_ADDR_VAR 0 10
47650: PUSH
47651: LD_VAR 0 10
47655: PUSH
47656: LD_VAR 0 6
47660: PPUSH
47661: LD_INT 1
47663: PPUSH
47664: CALL_OW 259
47668: PUSH
47669: LD_REAL  1.15000000000000E+0000
47672: MUL
47673: MUL
47674: ST_TO_ADDR
// end ; unit_vehicle :
47675: GO 48499
47677: LD_INT 2
47679: DOUBLE
47680: EQUAL
47681: IFTRUE 47685
47683: GO 48487
47685: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47686: LD_VAR 0 6
47690: PPUSH
47691: CALL_OW 264
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 42
47701: PUSH
47702: LD_INT 24
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: LIST
47709: IN
47710: IFFALSE 47731
// points := [ 25 , 5 , 3 ] ;
47712: LD_ADDR_VAR 0 9
47716: PUSH
47717: LD_INT 25
47719: PUSH
47720: LD_INT 5
47722: PUSH
47723: LD_INT 3
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47731: LD_VAR 0 6
47735: PPUSH
47736: CALL_OW 264
47740: PUSH
47741: LD_INT 4
47743: PUSH
47744: LD_INT 43
47746: PUSH
47747: LD_INT 25
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: IN
47755: IFFALSE 47776
// points := [ 40 , 15 , 5 ] ;
47757: LD_ADDR_VAR 0 9
47761: PUSH
47762: LD_INT 40
47764: PUSH
47765: LD_INT 15
47767: PUSH
47768: LD_INT 5
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47776: LD_VAR 0 6
47780: PPUSH
47781: CALL_OW 264
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: LD_INT 23
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: IN
47796: IFFALSE 47817
// points := [ 7 , 25 , 8 ] ;
47798: LD_ADDR_VAR 0 9
47802: PUSH
47803: LD_INT 7
47805: PUSH
47806: LD_INT 25
47808: PUSH
47809: LD_INT 8
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47817: LD_VAR 0 6
47821: PPUSH
47822: CALL_OW 264
47826: PUSH
47827: LD_INT 5
47829: PUSH
47830: LD_INT 27
47832: PUSH
47833: LD_INT 44
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: IN
47841: IFFALSE 47862
// points := [ 14 , 50 , 16 ] ;
47843: LD_ADDR_VAR 0 9
47847: PUSH
47848: LD_INT 14
47850: PUSH
47851: LD_INT 50
47853: PUSH
47854: LD_INT 16
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47862: LD_VAR 0 6
47866: PPUSH
47867: CALL_OW 264
47871: PUSH
47872: LD_INT 6
47874: PUSH
47875: LD_INT 46
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: IN
47882: IFFALSE 47903
// points := [ 32 , 120 , 70 ] ;
47884: LD_ADDR_VAR 0 9
47888: PUSH
47889: LD_INT 32
47891: PUSH
47892: LD_INT 120
47894: PUSH
47895: LD_INT 70
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
47903: LD_VAR 0 6
47907: PPUSH
47908: CALL_OW 264
47912: PUSH
47913: LD_INT 7
47915: PUSH
47916: LD_INT 28
47918: PUSH
47919: LD_INT 45
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: IN
47927: IFFALSE 47948
// points := [ 35 , 20 , 45 ] ;
47929: LD_ADDR_VAR 0 9
47933: PUSH
47934: LD_INT 35
47936: PUSH
47937: LD_INT 20
47939: PUSH
47940: LD_INT 45
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47948: LD_VAR 0 6
47952: PPUSH
47953: CALL_OW 264
47957: PUSH
47958: LD_INT 47
47960: PUSH
47961: EMPTY
47962: LIST
47963: IN
47964: IFFALSE 47985
// points := [ 67 , 45 , 75 ] ;
47966: LD_ADDR_VAR 0 9
47970: PUSH
47971: LD_INT 67
47973: PUSH
47974: LD_INT 45
47976: PUSH
47977: LD_INT 75
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47985: LD_VAR 0 6
47989: PPUSH
47990: CALL_OW 264
47994: PUSH
47995: LD_INT 26
47997: PUSH
47998: EMPTY
47999: LIST
48000: IN
48001: IFFALSE 48022
// points := [ 120 , 30 , 80 ] ;
48003: LD_ADDR_VAR 0 9
48007: PUSH
48008: LD_INT 120
48010: PUSH
48011: LD_INT 30
48013: PUSH
48014: LD_INT 80
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: LIST
48021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48022: LD_VAR 0 6
48026: PPUSH
48027: CALL_OW 264
48031: PUSH
48032: LD_INT 22
48034: PUSH
48035: EMPTY
48036: LIST
48037: IN
48038: IFFALSE 48059
// points := [ 40 , 1 , 1 ] ;
48040: LD_ADDR_VAR 0 9
48044: PUSH
48045: LD_INT 40
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: LIST
48058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48059: LD_VAR 0 6
48063: PPUSH
48064: CALL_OW 264
48068: PUSH
48069: LD_INT 29
48071: PUSH
48072: EMPTY
48073: LIST
48074: IN
48075: IFFALSE 48096
// points := [ 70 , 200 , 400 ] ;
48077: LD_ADDR_VAR 0 9
48081: PUSH
48082: LD_INT 70
48084: PUSH
48085: LD_INT 200
48087: PUSH
48088: LD_INT 400
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48096: LD_VAR 0 6
48100: PPUSH
48101: CALL_OW 264
48105: PUSH
48106: LD_INT 14
48108: PUSH
48109: LD_INT 53
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: IN
48116: IFFALSE 48137
// points := [ 40 , 10 , 20 ] ;
48118: LD_ADDR_VAR 0 9
48122: PUSH
48123: LD_INT 40
48125: PUSH
48126: LD_INT 10
48128: PUSH
48129: LD_INT 20
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48137: LD_VAR 0 6
48141: PPUSH
48142: CALL_OW 264
48146: PUSH
48147: LD_INT 9
48149: PUSH
48150: EMPTY
48151: LIST
48152: IN
48153: IFFALSE 48174
// points := [ 5 , 70 , 20 ] ;
48155: LD_ADDR_VAR 0 9
48159: PUSH
48160: LD_INT 5
48162: PUSH
48163: LD_INT 70
48165: PUSH
48166: LD_INT 20
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: LIST
48173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48174: LD_VAR 0 6
48178: PPUSH
48179: CALL_OW 264
48183: PUSH
48184: LD_INT 10
48186: PUSH
48187: EMPTY
48188: LIST
48189: IN
48190: IFFALSE 48211
// points := [ 35 , 110 , 70 ] ;
48192: LD_ADDR_VAR 0 9
48196: PUSH
48197: LD_INT 35
48199: PUSH
48200: LD_INT 110
48202: PUSH
48203: LD_INT 70
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48211: LD_VAR 0 6
48215: PPUSH
48216: CALL_OW 265
48220: PUSH
48221: LD_INT 25
48223: EQUAL
48224: IFFALSE 48245
// points := [ 80 , 65 , 100 ] ;
48226: LD_ADDR_VAR 0 9
48230: PUSH
48231: LD_INT 80
48233: PUSH
48234: LD_INT 65
48236: PUSH
48237: LD_INT 100
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: LIST
48244: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48245: LD_VAR 0 6
48249: PPUSH
48250: CALL_OW 263
48254: PUSH
48255: LD_INT 1
48257: EQUAL
48258: IFFALSE 48293
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48260: LD_ADDR_VAR 0 10
48264: PUSH
48265: LD_VAR 0 10
48269: PUSH
48270: LD_VAR 0 6
48274: PPUSH
48275: CALL_OW 311
48279: PPUSH
48280: LD_INT 3
48282: PPUSH
48283: CALL_OW 259
48287: PUSH
48288: LD_INT 4
48290: MUL
48291: MUL
48292: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48293: LD_VAR 0 6
48297: PPUSH
48298: CALL_OW 263
48302: PUSH
48303: LD_INT 2
48305: EQUAL
48306: IFFALSE 48357
// begin j := IsControledBy ( i ) ;
48308: LD_ADDR_VAR 0 7
48312: PUSH
48313: LD_VAR 0 6
48317: PPUSH
48318: CALL_OW 312
48322: ST_TO_ADDR
// if j then
48323: LD_VAR 0 7
48327: IFFALSE 48357
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48329: LD_ADDR_VAR 0 10
48333: PUSH
48334: LD_VAR 0 10
48338: PUSH
48339: LD_VAR 0 7
48343: PPUSH
48344: LD_INT 3
48346: PPUSH
48347: CALL_OW 259
48351: PUSH
48352: LD_INT 3
48354: MUL
48355: MUL
48356: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48357: LD_VAR 0 6
48361: PPUSH
48362: CALL_OW 264
48366: PUSH
48367: LD_INT 5
48369: PUSH
48370: LD_INT 6
48372: PUSH
48373: LD_INT 46
48375: PUSH
48376: LD_INT 44
48378: PUSH
48379: LD_INT 47
48381: PUSH
48382: LD_INT 45
48384: PUSH
48385: LD_INT 28
48387: PUSH
48388: LD_INT 7
48390: PUSH
48391: LD_INT 27
48393: PUSH
48394: LD_INT 29
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: IN
48409: PUSH
48410: LD_VAR 0 1
48414: PPUSH
48415: LD_INT 52
48417: PPUSH
48418: CALL_OW 321
48422: PUSH
48423: LD_INT 2
48425: EQUAL
48426: AND
48427: IFFALSE 48444
// bpoints := bpoints * 1.2 ;
48429: LD_ADDR_VAR 0 10
48433: PUSH
48434: LD_VAR 0 10
48438: PUSH
48439: LD_REAL  1.20000000000000E+0000
48442: MUL
48443: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48444: LD_VAR 0 6
48448: PPUSH
48449: CALL_OW 264
48453: PUSH
48454: LD_INT 6
48456: PUSH
48457: LD_INT 46
48459: PUSH
48460: LD_INT 47
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: LIST
48467: IN
48468: IFFALSE 48485
// bpoints := bpoints * 1.2 ;
48470: LD_ADDR_VAR 0 10
48474: PUSH
48475: LD_VAR 0 10
48479: PUSH
48480: LD_REAL  1.20000000000000E+0000
48483: MUL
48484: ST_TO_ADDR
// end ; unit_building :
48485: GO 48499
48487: LD_INT 3
48489: DOUBLE
48490: EQUAL
48491: IFTRUE 48495
48493: GO 48498
48495: POP
// ; end ;
48496: GO 48499
48498: POP
// for j = 1 to 3 do
48499: LD_ADDR_VAR 0 7
48503: PUSH
48504: DOUBLE
48505: LD_INT 1
48507: DEC
48508: ST_TO_ADDR
48509: LD_INT 3
48511: PUSH
48512: FOR_TO
48513: IFFALSE 48566
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48515: LD_ADDR_VAR 0 5
48519: PUSH
48520: LD_VAR 0 5
48524: PPUSH
48525: LD_VAR 0 7
48529: PPUSH
48530: LD_VAR 0 5
48534: PUSH
48535: LD_VAR 0 7
48539: ARRAY
48540: PUSH
48541: LD_VAR 0 9
48545: PUSH
48546: LD_VAR 0 7
48550: ARRAY
48551: PUSH
48552: LD_VAR 0 10
48556: MUL
48557: PLUS
48558: PPUSH
48559: CALL_OW 1
48563: ST_TO_ADDR
48564: GO 48512
48566: POP
48567: POP
// end ;
48568: GO 47051
48570: POP
48571: POP
// result := Replace ( result , 4 , tmp ) ;
48572: LD_ADDR_VAR 0 5
48576: PUSH
48577: LD_VAR 0 5
48581: PPUSH
48582: LD_INT 4
48584: PPUSH
48585: LD_VAR 0 8
48589: PPUSH
48590: CALL_OW 1
48594: ST_TO_ADDR
// end ;
48595: LD_VAR 0 5
48599: RET
// export function DangerAtRange ( unit , range ) ; begin
48600: LD_INT 0
48602: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48603: LD_ADDR_VAR 0 3
48607: PUSH
48608: LD_VAR 0 1
48612: PPUSH
48613: CALL_OW 255
48617: PPUSH
48618: LD_VAR 0 1
48622: PPUSH
48623: CALL_OW 250
48627: PPUSH
48628: LD_VAR 0 1
48632: PPUSH
48633: CALL_OW 251
48637: PPUSH
48638: LD_VAR 0 2
48642: PPUSH
48643: CALL 46903 0 4
48647: ST_TO_ADDR
// end ;
48648: LD_VAR 0 3
48652: RET
// export function DangerInArea ( side , area ) ; begin
48653: LD_INT 0
48655: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48656: LD_ADDR_VAR 0 3
48660: PUSH
48661: LD_VAR 0 2
48665: PPUSH
48666: LD_INT 81
48668: PUSH
48669: LD_VAR 0 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PPUSH
48678: CALL_OW 70
48682: ST_TO_ADDR
// end ;
48683: LD_VAR 0 3
48687: RET
// export function IsExtension ( b ) ; begin
48688: LD_INT 0
48690: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48691: LD_ADDR_VAR 0 2
48695: PUSH
48696: LD_VAR 0 1
48700: PUSH
48701: LD_INT 23
48703: PUSH
48704: LD_INT 20
48706: PUSH
48707: LD_INT 22
48709: PUSH
48710: LD_INT 17
48712: PUSH
48713: LD_INT 24
48715: PUSH
48716: LD_INT 21
48718: PUSH
48719: LD_INT 19
48721: PUSH
48722: LD_INT 16
48724: PUSH
48725: LD_INT 25
48727: PUSH
48728: LD_INT 18
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: LIST
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: IN
48743: ST_TO_ADDR
// end ;
48744: LD_VAR 0 2
48748: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
48749: LD_INT 0
48751: PPUSH
48752: PPUSH
48753: PPUSH
// result := [ ] ;
48754: LD_ADDR_VAR 0 3
48758: PUSH
48759: EMPTY
48760: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48761: LD_ADDR_VAR 0 4
48765: PUSH
48766: LD_VAR 0 2
48770: PPUSH
48771: LD_INT 21
48773: PUSH
48774: LD_INT 3
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PPUSH
48781: CALL_OW 70
48785: ST_TO_ADDR
// if not tmp then
48786: LD_VAR 0 4
48790: NOT
48791: IFFALSE 48795
// exit ;
48793: GO 48853
// for i in tmp do
48795: LD_ADDR_VAR 0 5
48799: PUSH
48800: LD_VAR 0 4
48804: PUSH
48805: FOR_IN
48806: IFFALSE 48841
// if GetBase ( i ) <> base then
48808: LD_VAR 0 5
48812: PPUSH
48813: CALL_OW 274
48817: PUSH
48818: LD_VAR 0 1
48822: NONEQUAL
48823: IFFALSE 48839
// ComLinkToBase ( base , i ) ;
48825: LD_VAR 0 1
48829: PPUSH
48830: LD_VAR 0 5
48834: PPUSH
48835: CALL_OW 169
48839: GO 48805
48841: POP
48842: POP
// result := tmp ;
48843: LD_ADDR_VAR 0 3
48847: PUSH
48848: LD_VAR 0 4
48852: ST_TO_ADDR
// end ;
48853: LD_VAR 0 3
48857: RET
// export function ComComplete ( unit , b ) ; var i ; begin
48858: LD_INT 0
48860: PPUSH
48861: PPUSH
// if BuildingStatus ( b ) = bs_build then
48862: LD_VAR 0 2
48866: PPUSH
48867: CALL_OW 461
48871: PUSH
48872: LD_INT 1
48874: EQUAL
48875: IFFALSE 48935
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48877: LD_VAR 0 1
48881: PPUSH
48882: LD_STRING h
48884: PUSH
48885: LD_VAR 0 2
48889: PPUSH
48890: CALL_OW 250
48894: PUSH
48895: LD_VAR 0 2
48899: PPUSH
48900: CALL_OW 251
48904: PUSH
48905: LD_VAR 0 2
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: PUSH
48928: EMPTY
48929: LIST
48930: PPUSH
48931: CALL_OW 446
// end ;
48935: LD_VAR 0 3
48939: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48940: LD_INT 0
48942: PPUSH
48943: PPUSH
48944: PPUSH
48945: PPUSH
48946: PPUSH
48947: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
48948: LD_VAR 0 1
48952: NOT
48953: PUSH
48954: LD_VAR 0 1
48958: PPUSH
48959: CALL_OW 263
48963: PUSH
48964: LD_INT 2
48966: EQUAL
48967: NOT
48968: OR
48969: IFFALSE 48973
// exit ;
48971: GO 49289
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48973: LD_ADDR_VAR 0 6
48977: PUSH
48978: LD_INT 22
48980: PUSH
48981: LD_VAR 0 1
48985: PPUSH
48986: CALL_OW 255
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 2
48997: PUSH
48998: LD_INT 30
49000: PUSH
49001: LD_INT 36
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 34
49010: PUSH
49011: LD_INT 31
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PPUSH
49027: CALL_OW 69
49031: ST_TO_ADDR
// if not tmp then
49032: LD_VAR 0 6
49036: NOT
49037: IFFALSE 49041
// exit ;
49039: GO 49289
// result := [ ] ;
49041: LD_ADDR_VAR 0 2
49045: PUSH
49046: EMPTY
49047: ST_TO_ADDR
// for i in tmp do
49048: LD_ADDR_VAR 0 3
49052: PUSH
49053: LD_VAR 0 6
49057: PUSH
49058: FOR_IN
49059: IFFALSE 49130
// begin t := UnitsInside ( i ) ;
49061: LD_ADDR_VAR 0 4
49065: PUSH
49066: LD_VAR 0 3
49070: PPUSH
49071: CALL_OW 313
49075: ST_TO_ADDR
// if t then
49076: LD_VAR 0 4
49080: IFFALSE 49128
// for j in t do
49082: LD_ADDR_VAR 0 7
49086: PUSH
49087: LD_VAR 0 4
49091: PUSH
49092: FOR_IN
49093: IFFALSE 49126
// result := Insert ( result , result + 1 , j ) ;
49095: LD_ADDR_VAR 0 2
49099: PUSH
49100: LD_VAR 0 2
49104: PPUSH
49105: LD_VAR 0 2
49109: PUSH
49110: LD_INT 1
49112: PLUS
49113: PPUSH
49114: LD_VAR 0 7
49118: PPUSH
49119: CALL_OW 2
49123: ST_TO_ADDR
49124: GO 49092
49126: POP
49127: POP
// end ;
49128: GO 49058
49130: POP
49131: POP
// if not result then
49132: LD_VAR 0 2
49136: NOT
49137: IFFALSE 49141
// exit ;
49139: GO 49289
// mech := result [ 1 ] ;
49141: LD_ADDR_VAR 0 5
49145: PUSH
49146: LD_VAR 0 2
49150: PUSH
49151: LD_INT 1
49153: ARRAY
49154: ST_TO_ADDR
// if result > 1 then
49155: LD_VAR 0 2
49159: PUSH
49160: LD_INT 1
49162: GREATER
49163: IFFALSE 49275
// for i = 2 to result do
49165: LD_ADDR_VAR 0 3
49169: PUSH
49170: DOUBLE
49171: LD_INT 2
49173: DEC
49174: ST_TO_ADDR
49175: LD_VAR 0 2
49179: PUSH
49180: FOR_TO
49181: IFFALSE 49273
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49183: LD_ADDR_VAR 0 4
49187: PUSH
49188: LD_VAR 0 2
49192: PUSH
49193: LD_VAR 0 3
49197: ARRAY
49198: PPUSH
49199: LD_INT 3
49201: PPUSH
49202: CALL_OW 259
49206: PUSH
49207: LD_VAR 0 2
49211: PUSH
49212: LD_VAR 0 3
49216: ARRAY
49217: PPUSH
49218: CALL_OW 432
49222: MINUS
49223: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49224: LD_VAR 0 4
49228: PUSH
49229: LD_VAR 0 5
49233: PPUSH
49234: LD_INT 3
49236: PPUSH
49237: CALL_OW 259
49241: PUSH
49242: LD_VAR 0 5
49246: PPUSH
49247: CALL_OW 432
49251: MINUS
49252: GREATEREQUAL
49253: IFFALSE 49271
// mech := result [ i ] ;
49255: LD_ADDR_VAR 0 5
49259: PUSH
49260: LD_VAR 0 2
49264: PUSH
49265: LD_VAR 0 3
49269: ARRAY
49270: ST_TO_ADDR
// end ;
49271: GO 49180
49273: POP
49274: POP
// ComLinkTo ( vehicle , mech ) ;
49275: LD_VAR 0 1
49279: PPUSH
49280: LD_VAR 0 5
49284: PPUSH
49285: CALL_OW 135
// end ;
49289: LD_VAR 0 2
49293: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49294: LD_INT 0
49296: PPUSH
49297: PPUSH
49298: PPUSH
49299: PPUSH
49300: PPUSH
49301: PPUSH
49302: PPUSH
49303: PPUSH
49304: PPUSH
49305: PPUSH
49306: PPUSH
49307: PPUSH
49308: PPUSH
// result := [ ] ;
49309: LD_ADDR_VAR 0 7
49313: PUSH
49314: EMPTY
49315: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49316: LD_VAR 0 1
49320: PPUSH
49321: CALL_OW 266
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: IN
49336: NOT
49337: IFFALSE 49341
// exit ;
49339: GO 50972
// if name then
49341: LD_VAR 0 3
49345: IFFALSE 49361
// SetBName ( base_dep , name ) ;
49347: LD_VAR 0 1
49351: PPUSH
49352: LD_VAR 0 3
49356: PPUSH
49357: CALL_OW 500
// base := GetBase ( base_dep ) ;
49361: LD_ADDR_VAR 0 15
49365: PUSH
49366: LD_VAR 0 1
49370: PPUSH
49371: CALL_OW 274
49375: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49376: LD_ADDR_VAR 0 16
49380: PUSH
49381: LD_VAR 0 1
49385: PPUSH
49386: CALL_OW 255
49390: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49391: LD_ADDR_VAR 0 17
49395: PUSH
49396: LD_VAR 0 1
49400: PPUSH
49401: CALL_OW 248
49405: ST_TO_ADDR
// if sources then
49406: LD_VAR 0 5
49410: IFFALSE 49457
// for i = 1 to 3 do
49412: LD_ADDR_VAR 0 8
49416: PUSH
49417: DOUBLE
49418: LD_INT 1
49420: DEC
49421: ST_TO_ADDR
49422: LD_INT 3
49424: PUSH
49425: FOR_TO
49426: IFFALSE 49455
// AddResourceType ( base , i , sources [ i ] ) ;
49428: LD_VAR 0 15
49432: PPUSH
49433: LD_VAR 0 8
49437: PPUSH
49438: LD_VAR 0 5
49442: PUSH
49443: LD_VAR 0 8
49447: ARRAY
49448: PPUSH
49449: CALL_OW 276
49453: GO 49425
49455: POP
49456: POP
// buildings := GetBaseBuildings ( base , area ) ;
49457: LD_ADDR_VAR 0 18
49461: PUSH
49462: LD_VAR 0 15
49466: PPUSH
49467: LD_VAR 0 2
49471: PPUSH
49472: CALL 48749 0 2
49476: ST_TO_ADDR
// InitHc ;
49477: CALL_OW 19
// InitUc ;
49481: CALL_OW 18
// uc_side := side ;
49485: LD_ADDR_OWVAR 20
49489: PUSH
49490: LD_VAR 0 16
49494: ST_TO_ADDR
// uc_nation := nation ;
49495: LD_ADDR_OWVAR 21
49499: PUSH
49500: LD_VAR 0 17
49504: ST_TO_ADDR
// if buildings then
49505: LD_VAR 0 18
49509: IFFALSE 50831
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49511: LD_ADDR_VAR 0 19
49515: PUSH
49516: LD_VAR 0 18
49520: PPUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 30
49526: PUSH
49527: LD_INT 29
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 30
49536: PUSH
49537: LD_INT 30
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: LIST
49548: PPUSH
49549: CALL_OW 72
49553: ST_TO_ADDR
// if tmp then
49554: LD_VAR 0 19
49558: IFFALSE 49606
// for i in tmp do
49560: LD_ADDR_VAR 0 8
49564: PUSH
49565: LD_VAR 0 19
49569: PUSH
49570: FOR_IN
49571: IFFALSE 49604
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49573: LD_VAR 0 8
49577: PPUSH
49578: CALL_OW 250
49582: PPUSH
49583: LD_VAR 0 8
49587: PPUSH
49588: CALL_OW 251
49592: PPUSH
49593: LD_VAR 0 16
49597: PPUSH
49598: CALL_OW 441
49602: GO 49570
49604: POP
49605: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49606: LD_VAR 0 18
49610: PPUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 30
49616: PUSH
49617: LD_INT 32
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 30
49626: PUSH
49627: LD_INT 33
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: PPUSH
49639: CALL_OW 72
49643: IFFALSE 49731
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49645: LD_ADDR_VAR 0 8
49649: PUSH
49650: LD_VAR 0 18
49654: PPUSH
49655: LD_INT 2
49657: PUSH
49658: LD_INT 30
49660: PUSH
49661: LD_INT 32
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 30
49670: PUSH
49671: LD_INT 33
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: PPUSH
49683: CALL_OW 72
49687: PUSH
49688: FOR_IN
49689: IFFALSE 49729
// begin if not GetBWeapon ( i ) then
49691: LD_VAR 0 8
49695: PPUSH
49696: CALL_OW 269
49700: NOT
49701: IFFALSE 49727
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49703: LD_VAR 0 8
49707: PPUSH
49708: LD_VAR 0 8
49712: PPUSH
49713: LD_VAR 0 2
49717: PPUSH
49718: CALL 50977 0 2
49722: PPUSH
49723: CALL_OW 431
// end ;
49727: GO 49688
49729: POP
49730: POP
// end ; for i = 1 to personel do
49731: LD_ADDR_VAR 0 8
49735: PUSH
49736: DOUBLE
49737: LD_INT 1
49739: DEC
49740: ST_TO_ADDR
49741: LD_VAR 0 6
49745: PUSH
49746: FOR_TO
49747: IFFALSE 50811
// begin if i > 4 then
49749: LD_VAR 0 8
49753: PUSH
49754: LD_INT 4
49756: GREATER
49757: IFFALSE 49761
// break ;
49759: GO 50811
// case i of 1 :
49761: LD_VAR 0 8
49765: PUSH
49766: LD_INT 1
49768: DOUBLE
49769: EQUAL
49770: IFTRUE 49774
49772: GO 49854
49774: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49775: LD_ADDR_VAR 0 12
49779: PUSH
49780: LD_VAR 0 18
49784: PPUSH
49785: LD_INT 22
49787: PUSH
49788: LD_VAR 0 16
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 58
49799: PUSH
49800: EMPTY
49801: LIST
49802: PUSH
49803: LD_INT 2
49805: PUSH
49806: LD_INT 30
49808: PUSH
49809: LD_INT 32
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 30
49818: PUSH
49819: LD_INT 4
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 30
49828: PUSH
49829: LD_INT 5
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: LIST
49846: PPUSH
49847: CALL_OW 72
49851: ST_TO_ADDR
49852: GO 50076
49854: LD_INT 2
49856: DOUBLE
49857: EQUAL
49858: IFTRUE 49862
49860: GO 49924
49862: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49863: LD_ADDR_VAR 0 12
49867: PUSH
49868: LD_VAR 0 18
49872: PPUSH
49873: LD_INT 22
49875: PUSH
49876: LD_VAR 0 16
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 30
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 30
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PPUSH
49917: CALL_OW 72
49921: ST_TO_ADDR
49922: GO 50076
49924: LD_INT 3
49926: DOUBLE
49927: EQUAL
49928: IFTRUE 49932
49930: GO 49994
49932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49933: LD_ADDR_VAR 0 12
49937: PUSH
49938: LD_VAR 0 18
49942: PPUSH
49943: LD_INT 22
49945: PUSH
49946: LD_VAR 0 16
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 2
49957: PUSH
49958: LD_INT 30
49960: PUSH
49961: LD_INT 2
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 30
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PPUSH
49987: CALL_OW 72
49991: ST_TO_ADDR
49992: GO 50076
49994: LD_INT 4
49996: DOUBLE
49997: EQUAL
49998: IFTRUE 50002
50000: GO 50075
50002: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50003: LD_ADDR_VAR 0 12
50007: PUSH
50008: LD_VAR 0 18
50012: PPUSH
50013: LD_INT 22
50015: PUSH
50016: LD_VAR 0 16
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 30
50030: PUSH
50031: LD_INT 6
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 30
50040: PUSH
50041: LD_INT 7
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 30
50050: PUSH
50051: LD_INT 8
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PPUSH
50068: CALL_OW 72
50072: ST_TO_ADDR
50073: GO 50076
50075: POP
// if i = 1 then
50076: LD_VAR 0 8
50080: PUSH
50081: LD_INT 1
50083: EQUAL
50084: IFFALSE 50195
// begin tmp := [ ] ;
50086: LD_ADDR_VAR 0 19
50090: PUSH
50091: EMPTY
50092: ST_TO_ADDR
// for j in f do
50093: LD_ADDR_VAR 0 9
50097: PUSH
50098: LD_VAR 0 12
50102: PUSH
50103: FOR_IN
50104: IFFALSE 50177
// if GetBType ( j ) = b_bunker then
50106: LD_VAR 0 9
50110: PPUSH
50111: CALL_OW 266
50115: PUSH
50116: LD_INT 32
50118: EQUAL
50119: IFFALSE 50146
// tmp := Insert ( tmp , 1 , j ) else
50121: LD_ADDR_VAR 0 19
50125: PUSH
50126: LD_VAR 0 19
50130: PPUSH
50131: LD_INT 1
50133: PPUSH
50134: LD_VAR 0 9
50138: PPUSH
50139: CALL_OW 2
50143: ST_TO_ADDR
50144: GO 50175
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50146: LD_ADDR_VAR 0 19
50150: PUSH
50151: LD_VAR 0 19
50155: PPUSH
50156: LD_VAR 0 19
50160: PUSH
50161: LD_INT 1
50163: PLUS
50164: PPUSH
50165: LD_VAR 0 9
50169: PPUSH
50170: CALL_OW 2
50174: ST_TO_ADDR
50175: GO 50103
50177: POP
50178: POP
// if tmp then
50179: LD_VAR 0 19
50183: IFFALSE 50195
// f := tmp ;
50185: LD_ADDR_VAR 0 12
50189: PUSH
50190: LD_VAR 0 19
50194: ST_TO_ADDR
// end ; x := personel [ i ] ;
50195: LD_ADDR_VAR 0 13
50199: PUSH
50200: LD_VAR 0 6
50204: PUSH
50205: LD_VAR 0 8
50209: ARRAY
50210: ST_TO_ADDR
// if x = - 1 then
50211: LD_VAR 0 13
50215: PUSH
50216: LD_INT 1
50218: NEG
50219: EQUAL
50220: IFFALSE 50429
// begin for j in f do
50222: LD_ADDR_VAR 0 9
50226: PUSH
50227: LD_VAR 0 12
50231: PUSH
50232: FOR_IN
50233: IFFALSE 50425
// repeat InitHc ;
50235: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50239: LD_VAR 0 9
50243: PPUSH
50244: CALL_OW 266
50248: PUSH
50249: LD_INT 5
50251: EQUAL
50252: IFFALSE 50322
// begin if UnitsInside ( j ) < 3 then
50254: LD_VAR 0 9
50258: PPUSH
50259: CALL_OW 313
50263: PUSH
50264: LD_INT 3
50266: LESS
50267: IFFALSE 50303
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50269: LD_INT 0
50271: PPUSH
50272: LD_INT 5
50274: PUSH
50275: LD_INT 8
50277: PUSH
50278: LD_INT 9
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: PUSH
50286: LD_VAR 0 17
50290: ARRAY
50291: PPUSH
50292: LD_VAR 0 4
50296: PPUSH
50297: CALL_OW 380
50301: GO 50320
// PrepareHuman ( false , i , skill ) ;
50303: LD_INT 0
50305: PPUSH
50306: LD_VAR 0 8
50310: PPUSH
50311: LD_VAR 0 4
50315: PPUSH
50316: CALL_OW 380
// end else
50320: GO 50339
// PrepareHuman ( false , i , skill ) ;
50322: LD_INT 0
50324: PPUSH
50325: LD_VAR 0 8
50329: PPUSH
50330: LD_VAR 0 4
50334: PPUSH
50335: CALL_OW 380
// un := CreateHuman ;
50339: LD_ADDR_VAR 0 14
50343: PUSH
50344: CALL_OW 44
50348: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50349: LD_ADDR_VAR 0 7
50353: PUSH
50354: LD_VAR 0 7
50358: PPUSH
50359: LD_INT 1
50361: PPUSH
50362: LD_VAR 0 14
50366: PPUSH
50367: CALL_OW 2
50371: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50372: LD_VAR 0 14
50376: PPUSH
50377: LD_VAR 0 9
50381: PPUSH
50382: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50386: LD_VAR 0 9
50390: PPUSH
50391: CALL_OW 313
50395: PUSH
50396: LD_INT 6
50398: EQUAL
50399: PUSH
50400: LD_VAR 0 9
50404: PPUSH
50405: CALL_OW 266
50409: PUSH
50410: LD_INT 32
50412: PUSH
50413: LD_INT 31
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: IN
50420: OR
50421: IFFALSE 50235
50423: GO 50232
50425: POP
50426: POP
// end else
50427: GO 50809
// for j = 1 to x do
50429: LD_ADDR_VAR 0 9
50433: PUSH
50434: DOUBLE
50435: LD_INT 1
50437: DEC
50438: ST_TO_ADDR
50439: LD_VAR 0 13
50443: PUSH
50444: FOR_TO
50445: IFFALSE 50807
// begin InitHc ;
50447: CALL_OW 19
// if not f then
50451: LD_VAR 0 12
50455: NOT
50456: IFFALSE 50545
// begin PrepareHuman ( false , i , skill ) ;
50458: LD_INT 0
50460: PPUSH
50461: LD_VAR 0 8
50465: PPUSH
50466: LD_VAR 0 4
50470: PPUSH
50471: CALL_OW 380
// un := CreateHuman ;
50475: LD_ADDR_VAR 0 14
50479: PUSH
50480: CALL_OW 44
50484: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50485: LD_ADDR_VAR 0 7
50489: PUSH
50490: LD_VAR 0 7
50494: PPUSH
50495: LD_INT 1
50497: PPUSH
50498: LD_VAR 0 14
50502: PPUSH
50503: CALL_OW 2
50507: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50508: LD_VAR 0 14
50512: PPUSH
50513: LD_VAR 0 1
50517: PPUSH
50518: CALL_OW 250
50522: PPUSH
50523: LD_VAR 0 1
50527: PPUSH
50528: CALL_OW 251
50532: PPUSH
50533: LD_INT 10
50535: PPUSH
50536: LD_INT 0
50538: PPUSH
50539: CALL_OW 50
// continue ;
50543: GO 50444
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50545: LD_VAR 0 12
50549: PUSH
50550: LD_INT 1
50552: ARRAY
50553: PPUSH
50554: CALL_OW 313
50558: PUSH
50559: LD_VAR 0 12
50563: PUSH
50564: LD_INT 1
50566: ARRAY
50567: PPUSH
50568: CALL_OW 266
50572: PUSH
50573: LD_INT 32
50575: PUSH
50576: LD_INT 31
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: IN
50583: AND
50584: PUSH
50585: LD_VAR 0 12
50589: PUSH
50590: LD_INT 1
50592: ARRAY
50593: PPUSH
50594: CALL_OW 313
50598: PUSH
50599: LD_INT 6
50601: EQUAL
50602: OR
50603: IFFALSE 50623
// f := Delete ( f , 1 ) ;
50605: LD_ADDR_VAR 0 12
50609: PUSH
50610: LD_VAR 0 12
50614: PPUSH
50615: LD_INT 1
50617: PPUSH
50618: CALL_OW 3
50622: ST_TO_ADDR
// if not f then
50623: LD_VAR 0 12
50627: NOT
50628: IFFALSE 50646
// begin x := x + 2 ;
50630: LD_ADDR_VAR 0 13
50634: PUSH
50635: LD_VAR 0 13
50639: PUSH
50640: LD_INT 2
50642: PLUS
50643: ST_TO_ADDR
// continue ;
50644: GO 50444
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50646: LD_VAR 0 12
50650: PUSH
50651: LD_INT 1
50653: ARRAY
50654: PPUSH
50655: CALL_OW 266
50659: PUSH
50660: LD_INT 5
50662: EQUAL
50663: IFFALSE 50737
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50665: LD_VAR 0 12
50669: PUSH
50670: LD_INT 1
50672: ARRAY
50673: PPUSH
50674: CALL_OW 313
50678: PUSH
50679: LD_INT 3
50681: LESS
50682: IFFALSE 50718
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50684: LD_INT 0
50686: PPUSH
50687: LD_INT 5
50689: PUSH
50690: LD_INT 8
50692: PUSH
50693: LD_INT 9
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: LIST
50700: PUSH
50701: LD_VAR 0 17
50705: ARRAY
50706: PPUSH
50707: LD_VAR 0 4
50711: PPUSH
50712: CALL_OW 380
50716: GO 50735
// PrepareHuman ( false , i , skill ) ;
50718: LD_INT 0
50720: PPUSH
50721: LD_VAR 0 8
50725: PPUSH
50726: LD_VAR 0 4
50730: PPUSH
50731: CALL_OW 380
// end else
50735: GO 50754
// PrepareHuman ( false , i , skill ) ;
50737: LD_INT 0
50739: PPUSH
50740: LD_VAR 0 8
50744: PPUSH
50745: LD_VAR 0 4
50749: PPUSH
50750: CALL_OW 380
// un := CreateHuman ;
50754: LD_ADDR_VAR 0 14
50758: PUSH
50759: CALL_OW 44
50763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50764: LD_ADDR_VAR 0 7
50768: PUSH
50769: LD_VAR 0 7
50773: PPUSH
50774: LD_INT 1
50776: PPUSH
50777: LD_VAR 0 14
50781: PPUSH
50782: CALL_OW 2
50786: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50787: LD_VAR 0 14
50791: PPUSH
50792: LD_VAR 0 12
50796: PUSH
50797: LD_INT 1
50799: ARRAY
50800: PPUSH
50801: CALL_OW 52
// end ;
50805: GO 50444
50807: POP
50808: POP
// end ;
50809: GO 49746
50811: POP
50812: POP
// result := result ^ buildings ;
50813: LD_ADDR_VAR 0 7
50817: PUSH
50818: LD_VAR 0 7
50822: PUSH
50823: LD_VAR 0 18
50827: ADD
50828: ST_TO_ADDR
// end else
50829: GO 50972
// begin for i = 1 to personel do
50831: LD_ADDR_VAR 0 8
50835: PUSH
50836: DOUBLE
50837: LD_INT 1
50839: DEC
50840: ST_TO_ADDR
50841: LD_VAR 0 6
50845: PUSH
50846: FOR_TO
50847: IFFALSE 50970
// begin if i > 4 then
50849: LD_VAR 0 8
50853: PUSH
50854: LD_INT 4
50856: GREATER
50857: IFFALSE 50861
// break ;
50859: GO 50970
// x := personel [ i ] ;
50861: LD_ADDR_VAR 0 13
50865: PUSH
50866: LD_VAR 0 6
50870: PUSH
50871: LD_VAR 0 8
50875: ARRAY
50876: ST_TO_ADDR
// if x = - 1 then
50877: LD_VAR 0 13
50881: PUSH
50882: LD_INT 1
50884: NEG
50885: EQUAL
50886: IFFALSE 50890
// continue ;
50888: GO 50846
// PrepareHuman ( false , i , skill ) ;
50890: LD_INT 0
50892: PPUSH
50893: LD_VAR 0 8
50897: PPUSH
50898: LD_VAR 0 4
50902: PPUSH
50903: CALL_OW 380
// un := CreateHuman ;
50907: LD_ADDR_VAR 0 14
50911: PUSH
50912: CALL_OW 44
50916: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50917: LD_VAR 0 14
50921: PPUSH
50922: LD_VAR 0 1
50926: PPUSH
50927: CALL_OW 250
50931: PPUSH
50932: LD_VAR 0 1
50936: PPUSH
50937: CALL_OW 251
50941: PPUSH
50942: LD_INT 10
50944: PPUSH
50945: LD_INT 0
50947: PPUSH
50948: CALL_OW 50
// result := result ^ un ;
50952: LD_ADDR_VAR 0 7
50956: PUSH
50957: LD_VAR 0 7
50961: PUSH
50962: LD_VAR 0 14
50966: ADD
50967: ST_TO_ADDR
// end ;
50968: GO 50846
50970: POP
50971: POP
// end ; end ;
50972: LD_VAR 0 7
50976: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50977: LD_INT 0
50979: PPUSH
50980: PPUSH
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
50989: PPUSH
50990: PPUSH
50991: PPUSH
50992: PPUSH
50993: PPUSH
50994: PPUSH
// result := false ;
50995: LD_ADDR_VAR 0 3
50999: PUSH
51000: LD_INT 0
51002: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51003: LD_VAR 0 1
51007: NOT
51008: PUSH
51009: LD_VAR 0 1
51013: PPUSH
51014: CALL_OW 266
51018: PUSH
51019: LD_INT 32
51021: PUSH
51022: LD_INT 33
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: IN
51029: NOT
51030: OR
51031: IFFALSE 51035
// exit ;
51033: GO 52171
// nat := GetNation ( tower ) ;
51035: LD_ADDR_VAR 0 12
51039: PUSH
51040: LD_VAR 0 1
51044: PPUSH
51045: CALL_OW 248
51049: ST_TO_ADDR
// side := GetSide ( tower ) ;
51050: LD_ADDR_VAR 0 16
51054: PUSH
51055: LD_VAR 0 1
51059: PPUSH
51060: CALL_OW 255
51064: ST_TO_ADDR
// x := GetX ( tower ) ;
51065: LD_ADDR_VAR 0 10
51069: PUSH
51070: LD_VAR 0 1
51074: PPUSH
51075: CALL_OW 250
51079: ST_TO_ADDR
// y := GetY ( tower ) ;
51080: LD_ADDR_VAR 0 11
51084: PUSH
51085: LD_VAR 0 1
51089: PPUSH
51090: CALL_OW 251
51094: ST_TO_ADDR
// if not x or not y then
51095: LD_VAR 0 10
51099: NOT
51100: PUSH
51101: LD_VAR 0 11
51105: NOT
51106: OR
51107: IFFALSE 51111
// exit ;
51109: GO 52171
// weapon := 0 ;
51111: LD_ADDR_VAR 0 18
51115: PUSH
51116: LD_INT 0
51118: ST_TO_ADDR
// fac_list := [ ] ;
51119: LD_ADDR_VAR 0 17
51123: PUSH
51124: EMPTY
51125: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
51126: LD_ADDR_VAR 0 6
51130: PUSH
51131: LD_VAR 0 1
51135: PPUSH
51136: CALL_OW 274
51140: PPUSH
51141: LD_VAR 0 2
51145: PPUSH
51146: CALL 48749 0 2
51150: PPUSH
51151: LD_INT 30
51153: PUSH
51154: LD_INT 3
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PPUSH
51161: CALL_OW 72
51165: ST_TO_ADDR
// if not factories then
51166: LD_VAR 0 6
51170: NOT
51171: IFFALSE 51175
// exit ;
51173: GO 52171
// for i in factories do
51175: LD_ADDR_VAR 0 8
51179: PUSH
51180: LD_VAR 0 6
51184: PUSH
51185: FOR_IN
51186: IFFALSE 51211
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51188: LD_ADDR_VAR 0 17
51192: PUSH
51193: LD_VAR 0 17
51197: PUSH
51198: LD_VAR 0 8
51202: PPUSH
51203: CALL_OW 478
51207: UNION
51208: ST_TO_ADDR
51209: GO 51185
51211: POP
51212: POP
// if not fac_list then
51213: LD_VAR 0 17
51217: NOT
51218: IFFALSE 51222
// exit ;
51220: GO 52171
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51222: LD_ADDR_VAR 0 5
51226: PUSH
51227: LD_INT 4
51229: PUSH
51230: LD_INT 5
51232: PUSH
51233: LD_INT 9
51235: PUSH
51236: LD_INT 10
51238: PUSH
51239: LD_INT 6
51241: PUSH
51242: LD_INT 7
51244: PUSH
51245: LD_INT 11
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 27
51259: PUSH
51260: LD_INT 28
51262: PUSH
51263: LD_INT 26
51265: PUSH
51266: LD_INT 30
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 43
51277: PUSH
51278: LD_INT 44
51280: PUSH
51281: LD_INT 46
51283: PUSH
51284: LD_INT 45
51286: PUSH
51287: LD_INT 47
51289: PUSH
51290: LD_INT 49
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: LIST
51305: PUSH
51306: LD_VAR 0 12
51310: ARRAY
51311: ST_TO_ADDR
// for i in list do
51312: LD_ADDR_VAR 0 8
51316: PUSH
51317: LD_VAR 0 5
51321: PUSH
51322: FOR_IN
51323: IFFALSE 51356
// if not i in fac_list then
51325: LD_VAR 0 8
51329: PUSH
51330: LD_VAR 0 17
51334: IN
51335: NOT
51336: IFFALSE 51354
// list := list diff i ;
51338: LD_ADDR_VAR 0 5
51342: PUSH
51343: LD_VAR 0 5
51347: PUSH
51348: LD_VAR 0 8
51352: DIFF
51353: ST_TO_ADDR
51354: GO 51322
51356: POP
51357: POP
// if not list then
51358: LD_VAR 0 5
51362: NOT
51363: IFFALSE 51367
// exit ;
51365: GO 52171
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51367: LD_VAR 0 12
51371: PUSH
51372: LD_INT 3
51374: EQUAL
51375: PUSH
51376: LD_INT 49
51378: PUSH
51379: LD_VAR 0 5
51383: IN
51384: AND
51385: PUSH
51386: LD_INT 31
51388: PPUSH
51389: LD_VAR 0 16
51393: PPUSH
51394: CALL_OW 321
51398: PUSH
51399: LD_INT 2
51401: EQUAL
51402: AND
51403: IFFALSE 51463
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51405: LD_INT 22
51407: PUSH
51408: LD_VAR 0 16
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 35
51419: PUSH
51420: LD_INT 49
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 91
51429: PUSH
51430: LD_VAR 0 1
51434: PUSH
51435: LD_INT 10
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: LIST
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: LIST
51447: PPUSH
51448: CALL_OW 69
51452: NOT
51453: IFFALSE 51463
// weapon := ru_time_lapser ;
51455: LD_ADDR_VAR 0 18
51459: PUSH
51460: LD_INT 49
51462: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51463: LD_VAR 0 12
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: IN
51478: PUSH
51479: LD_INT 11
51481: PUSH
51482: LD_VAR 0 5
51486: IN
51487: PUSH
51488: LD_INT 30
51490: PUSH
51491: LD_VAR 0 5
51495: IN
51496: OR
51497: AND
51498: PUSH
51499: LD_INT 6
51501: PPUSH
51502: LD_VAR 0 16
51506: PPUSH
51507: CALL_OW 321
51511: PUSH
51512: LD_INT 2
51514: EQUAL
51515: AND
51516: IFFALSE 51681
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51518: LD_INT 22
51520: PUSH
51521: LD_VAR 0 16
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 2
51532: PUSH
51533: LD_INT 35
51535: PUSH
51536: LD_INT 11
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 35
51545: PUSH
51546: LD_INT 30
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 91
51560: PUSH
51561: LD_VAR 0 1
51565: PUSH
51566: LD_INT 18
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: LIST
51578: PPUSH
51579: CALL_OW 69
51583: NOT
51584: PUSH
51585: LD_INT 22
51587: PUSH
51588: LD_VAR 0 16
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 30
51602: PUSH
51603: LD_INT 32
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 30
51612: PUSH
51613: LD_INT 33
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 91
51627: PUSH
51628: LD_VAR 0 1
51632: PUSH
51633: LD_INT 12
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: PPUSH
51649: CALL_OW 69
51653: PUSH
51654: LD_INT 2
51656: GREATER
51657: AND
51658: IFFALSE 51681
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51660: LD_ADDR_VAR 0 18
51664: PUSH
51665: LD_INT 11
51667: PUSH
51668: LD_INT 30
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_VAR 0 12
51679: ARRAY
51680: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51681: LD_VAR 0 18
51685: NOT
51686: PUSH
51687: LD_INT 40
51689: PPUSH
51690: LD_VAR 0 16
51694: PPUSH
51695: CALL_OW 321
51699: PUSH
51700: LD_INT 2
51702: EQUAL
51703: AND
51704: PUSH
51705: LD_INT 7
51707: PUSH
51708: LD_VAR 0 5
51712: IN
51713: PUSH
51714: LD_INT 28
51716: PUSH
51717: LD_VAR 0 5
51721: IN
51722: OR
51723: PUSH
51724: LD_INT 45
51726: PUSH
51727: LD_VAR 0 5
51731: IN
51732: OR
51733: AND
51734: IFFALSE 51988
// begin hex := GetHexInfo ( x , y ) ;
51736: LD_ADDR_VAR 0 4
51740: PUSH
51741: LD_VAR 0 10
51745: PPUSH
51746: LD_VAR 0 11
51750: PPUSH
51751: CALL_OW 546
51755: ST_TO_ADDR
// if hex [ 1 ] then
51756: LD_VAR 0 4
51760: PUSH
51761: LD_INT 1
51763: ARRAY
51764: IFFALSE 51768
// exit ;
51766: GO 52171
// height := hex [ 2 ] ;
51768: LD_ADDR_VAR 0 15
51772: PUSH
51773: LD_VAR 0 4
51777: PUSH
51778: LD_INT 2
51780: ARRAY
51781: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51782: LD_ADDR_VAR 0 14
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 3
51795: PUSH
51796: LD_INT 5
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: ST_TO_ADDR
// for i in tmp do
51805: LD_ADDR_VAR 0 8
51809: PUSH
51810: LD_VAR 0 14
51814: PUSH
51815: FOR_IN
51816: IFFALSE 51986
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51818: LD_ADDR_VAR 0 9
51822: PUSH
51823: LD_VAR 0 10
51827: PPUSH
51828: LD_VAR 0 8
51832: PPUSH
51833: LD_INT 5
51835: PPUSH
51836: CALL_OW 272
51840: PUSH
51841: LD_VAR 0 11
51845: PPUSH
51846: LD_VAR 0 8
51850: PPUSH
51851: LD_INT 5
51853: PPUSH
51854: CALL_OW 273
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51863: LD_VAR 0 9
51867: PUSH
51868: LD_INT 1
51870: ARRAY
51871: PPUSH
51872: LD_VAR 0 9
51876: PUSH
51877: LD_INT 2
51879: ARRAY
51880: PPUSH
51881: CALL_OW 488
51885: IFFALSE 51984
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51887: LD_ADDR_VAR 0 4
51891: PUSH
51892: LD_VAR 0 9
51896: PUSH
51897: LD_INT 1
51899: ARRAY
51900: PPUSH
51901: LD_VAR 0 9
51905: PUSH
51906: LD_INT 2
51908: ARRAY
51909: PPUSH
51910: CALL_OW 546
51914: ST_TO_ADDR
// if hex [ 1 ] then
51915: LD_VAR 0 4
51919: PUSH
51920: LD_INT 1
51922: ARRAY
51923: IFFALSE 51927
// continue ;
51925: GO 51815
// h := hex [ 2 ] ;
51927: LD_ADDR_VAR 0 13
51931: PUSH
51932: LD_VAR 0 4
51936: PUSH
51937: LD_INT 2
51939: ARRAY
51940: ST_TO_ADDR
// if h + 7 < height then
51941: LD_VAR 0 13
51945: PUSH
51946: LD_INT 7
51948: PLUS
51949: PUSH
51950: LD_VAR 0 15
51954: LESS
51955: IFFALSE 51984
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51957: LD_ADDR_VAR 0 18
51961: PUSH
51962: LD_INT 7
51964: PUSH
51965: LD_INT 28
51967: PUSH
51968: LD_INT 45
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: PUSH
51976: LD_VAR 0 12
51980: ARRAY
51981: ST_TO_ADDR
// break ;
51982: GO 51986
// end ; end ; end ;
51984: GO 51815
51986: POP
51987: POP
// end ; if not weapon then
51988: LD_VAR 0 18
51992: NOT
51993: IFFALSE 52053
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51995: LD_ADDR_VAR 0 5
51999: PUSH
52000: LD_VAR 0 5
52004: PUSH
52005: LD_INT 11
52007: PUSH
52008: LD_INT 30
52010: PUSH
52011: LD_INT 49
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: LIST
52018: DIFF
52019: ST_TO_ADDR
// if not list then
52020: LD_VAR 0 5
52024: NOT
52025: IFFALSE 52029
// exit ;
52027: GO 52171
// weapon := list [ rand ( 1 , list ) ] ;
52029: LD_ADDR_VAR 0 18
52033: PUSH
52034: LD_VAR 0 5
52038: PUSH
52039: LD_INT 1
52041: PPUSH
52042: LD_VAR 0 5
52046: PPUSH
52047: CALL_OW 12
52051: ARRAY
52052: ST_TO_ADDR
// end ; if weapon then
52053: LD_VAR 0 18
52057: IFFALSE 52171
// begin tmp := CostOfWeapon ( weapon ) ;
52059: LD_ADDR_VAR 0 14
52063: PUSH
52064: LD_VAR 0 18
52068: PPUSH
52069: CALL_OW 451
52073: ST_TO_ADDR
// j := GetBase ( tower ) ;
52074: LD_ADDR_VAR 0 9
52078: PUSH
52079: LD_VAR 0 1
52083: PPUSH
52084: CALL_OW 274
52088: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52089: LD_VAR 0 9
52093: PPUSH
52094: LD_INT 1
52096: PPUSH
52097: CALL_OW 275
52101: PUSH
52102: LD_VAR 0 14
52106: PUSH
52107: LD_INT 1
52109: ARRAY
52110: GREATEREQUAL
52111: PUSH
52112: LD_VAR 0 9
52116: PPUSH
52117: LD_INT 2
52119: PPUSH
52120: CALL_OW 275
52124: PUSH
52125: LD_VAR 0 14
52129: PUSH
52130: LD_INT 2
52132: ARRAY
52133: GREATEREQUAL
52134: AND
52135: PUSH
52136: LD_VAR 0 9
52140: PPUSH
52141: LD_INT 3
52143: PPUSH
52144: CALL_OW 275
52148: PUSH
52149: LD_VAR 0 14
52153: PUSH
52154: LD_INT 3
52156: ARRAY
52157: GREATEREQUAL
52158: AND
52159: IFFALSE 52171
// result := weapon ;
52161: LD_ADDR_VAR 0 3
52165: PUSH
52166: LD_VAR 0 18
52170: ST_TO_ADDR
// end ; end ;
52171: LD_VAR 0 3
52175: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52176: LD_INT 0
52178: PPUSH
52179: PPUSH
// result := true ;
52180: LD_ADDR_VAR 0 3
52184: PUSH
52185: LD_INT 1
52187: ST_TO_ADDR
// if array1 = array2 then
52188: LD_VAR 0 1
52192: PUSH
52193: LD_VAR 0 2
52197: EQUAL
52198: IFFALSE 52258
// begin for i = 1 to array1 do
52200: LD_ADDR_VAR 0 4
52204: PUSH
52205: DOUBLE
52206: LD_INT 1
52208: DEC
52209: ST_TO_ADDR
52210: LD_VAR 0 1
52214: PUSH
52215: FOR_TO
52216: IFFALSE 52254
// if array1 [ i ] <> array2 [ i ] then
52218: LD_VAR 0 1
52222: PUSH
52223: LD_VAR 0 4
52227: ARRAY
52228: PUSH
52229: LD_VAR 0 2
52233: PUSH
52234: LD_VAR 0 4
52238: ARRAY
52239: NONEQUAL
52240: IFFALSE 52252
// begin result := false ;
52242: LD_ADDR_VAR 0 3
52246: PUSH
52247: LD_INT 0
52249: ST_TO_ADDR
// break ;
52250: GO 52254
// end ;
52252: GO 52215
52254: POP
52255: POP
// end else
52256: GO 52266
// result := false ;
52258: LD_ADDR_VAR 0 3
52262: PUSH
52263: LD_INT 0
52265: ST_TO_ADDR
// end ;
52266: LD_VAR 0 3
52270: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52271: LD_INT 0
52273: PPUSH
52274: PPUSH
52275: PPUSH
// pom := GetBase ( fac ) ;
52276: LD_ADDR_VAR 0 5
52280: PUSH
52281: LD_VAR 0 1
52285: PPUSH
52286: CALL_OW 274
52290: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52291: LD_ADDR_VAR 0 4
52295: PUSH
52296: LD_VAR 0 2
52300: PUSH
52301: LD_INT 1
52303: ARRAY
52304: PPUSH
52305: LD_VAR 0 2
52309: PUSH
52310: LD_INT 2
52312: ARRAY
52313: PPUSH
52314: LD_VAR 0 2
52318: PUSH
52319: LD_INT 3
52321: ARRAY
52322: PPUSH
52323: LD_VAR 0 2
52327: PUSH
52328: LD_INT 4
52330: ARRAY
52331: PPUSH
52332: CALL_OW 449
52336: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52337: LD_ADDR_VAR 0 3
52341: PUSH
52342: LD_VAR 0 5
52346: PPUSH
52347: LD_INT 1
52349: PPUSH
52350: CALL_OW 275
52354: PUSH
52355: LD_VAR 0 4
52359: PUSH
52360: LD_INT 1
52362: ARRAY
52363: GREATEREQUAL
52364: PUSH
52365: LD_VAR 0 5
52369: PPUSH
52370: LD_INT 2
52372: PPUSH
52373: CALL_OW 275
52377: PUSH
52378: LD_VAR 0 4
52382: PUSH
52383: LD_INT 2
52385: ARRAY
52386: GREATEREQUAL
52387: AND
52388: PUSH
52389: LD_VAR 0 5
52393: PPUSH
52394: LD_INT 3
52396: PPUSH
52397: CALL_OW 275
52401: PUSH
52402: LD_VAR 0 4
52406: PUSH
52407: LD_INT 3
52409: ARRAY
52410: GREATEREQUAL
52411: AND
52412: ST_TO_ADDR
// end ;
52413: LD_VAR 0 3
52417: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52418: LD_INT 0
52420: PPUSH
52421: PPUSH
52422: PPUSH
52423: PPUSH
// pom := GetBase ( building ) ;
52424: LD_ADDR_VAR 0 3
52428: PUSH
52429: LD_VAR 0 1
52433: PPUSH
52434: CALL_OW 274
52438: ST_TO_ADDR
// if not pom then
52439: LD_VAR 0 3
52443: NOT
52444: IFFALSE 52448
// exit ;
52446: GO 52618
// btype := GetBType ( building ) ;
52448: LD_ADDR_VAR 0 5
52452: PUSH
52453: LD_VAR 0 1
52457: PPUSH
52458: CALL_OW 266
52462: ST_TO_ADDR
// if btype = b_armoury then
52463: LD_VAR 0 5
52467: PUSH
52468: LD_INT 4
52470: EQUAL
52471: IFFALSE 52481
// btype := b_barracks ;
52473: LD_ADDR_VAR 0 5
52477: PUSH
52478: LD_INT 5
52480: ST_TO_ADDR
// if btype = b_depot then
52481: LD_VAR 0 5
52485: PUSH
52486: LD_INT 0
52488: EQUAL
52489: IFFALSE 52499
// btype := b_warehouse ;
52491: LD_ADDR_VAR 0 5
52495: PUSH
52496: LD_INT 1
52498: ST_TO_ADDR
// if btype = b_workshop then
52499: LD_VAR 0 5
52503: PUSH
52504: LD_INT 2
52506: EQUAL
52507: IFFALSE 52517
// btype := b_factory ;
52509: LD_ADDR_VAR 0 5
52513: PUSH
52514: LD_INT 3
52516: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52517: LD_ADDR_VAR 0 4
52521: PUSH
52522: LD_VAR 0 5
52526: PPUSH
52527: LD_VAR 0 1
52531: PPUSH
52532: CALL_OW 248
52536: PPUSH
52537: CALL_OW 450
52541: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52542: LD_ADDR_VAR 0 2
52546: PUSH
52547: LD_VAR 0 3
52551: PPUSH
52552: LD_INT 1
52554: PPUSH
52555: CALL_OW 275
52559: PUSH
52560: LD_VAR 0 4
52564: PUSH
52565: LD_INT 1
52567: ARRAY
52568: GREATEREQUAL
52569: PUSH
52570: LD_VAR 0 3
52574: PPUSH
52575: LD_INT 2
52577: PPUSH
52578: CALL_OW 275
52582: PUSH
52583: LD_VAR 0 4
52587: PUSH
52588: LD_INT 2
52590: ARRAY
52591: GREATEREQUAL
52592: AND
52593: PUSH
52594: LD_VAR 0 3
52598: PPUSH
52599: LD_INT 3
52601: PPUSH
52602: CALL_OW 275
52606: PUSH
52607: LD_VAR 0 4
52611: PUSH
52612: LD_INT 3
52614: ARRAY
52615: GREATEREQUAL
52616: AND
52617: ST_TO_ADDR
// end ;
52618: LD_VAR 0 2
52622: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52623: LD_INT 0
52625: PPUSH
52626: PPUSH
52627: PPUSH
// pom := GetBase ( building ) ;
52628: LD_ADDR_VAR 0 4
52632: PUSH
52633: LD_VAR 0 1
52637: PPUSH
52638: CALL_OW 274
52642: ST_TO_ADDR
// if not pom then
52643: LD_VAR 0 4
52647: NOT
52648: IFFALSE 52652
// exit ;
52650: GO 52753
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52652: LD_ADDR_VAR 0 5
52656: PUSH
52657: LD_VAR 0 2
52661: PPUSH
52662: LD_VAR 0 1
52666: PPUSH
52667: CALL_OW 248
52671: PPUSH
52672: CALL_OW 450
52676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52677: LD_ADDR_VAR 0 3
52681: PUSH
52682: LD_VAR 0 4
52686: PPUSH
52687: LD_INT 1
52689: PPUSH
52690: CALL_OW 275
52694: PUSH
52695: LD_VAR 0 5
52699: PUSH
52700: LD_INT 1
52702: ARRAY
52703: GREATEREQUAL
52704: PUSH
52705: LD_VAR 0 4
52709: PPUSH
52710: LD_INT 2
52712: PPUSH
52713: CALL_OW 275
52717: PUSH
52718: LD_VAR 0 5
52722: PUSH
52723: LD_INT 2
52725: ARRAY
52726: GREATEREQUAL
52727: AND
52728: PUSH
52729: LD_VAR 0 4
52733: PPUSH
52734: LD_INT 3
52736: PPUSH
52737: CALL_OW 275
52741: PUSH
52742: LD_VAR 0 5
52746: PUSH
52747: LD_INT 3
52749: ARRAY
52750: GREATEREQUAL
52751: AND
52752: ST_TO_ADDR
// end ;
52753: LD_VAR 0 3
52757: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
52758: LD_INT 0
52760: PPUSH
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
// result := false ;
52770: LD_ADDR_VAR 0 6
52774: PUSH
52775: LD_INT 0
52777: ST_TO_ADDR
// if not base or not btype or not x or not y then
52778: LD_VAR 0 1
52782: NOT
52783: PUSH
52784: LD_VAR 0 2
52788: NOT
52789: OR
52790: PUSH
52791: LD_VAR 0 3
52795: NOT
52796: OR
52797: PUSH
52798: LD_VAR 0 4
52802: NOT
52803: OR
52804: IFFALSE 52808
// exit ;
52806: GO 53417
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
52808: LD_ADDR_VAR 0 12
52812: PUSH
52813: LD_VAR 0 2
52817: PPUSH
52818: LD_VAR 0 3
52822: PPUSH
52823: LD_VAR 0 4
52827: PPUSH
52828: LD_VAR 0 5
52832: PPUSH
52833: LD_VAR 0 1
52837: PUSH
52838: LD_INT 1
52840: ARRAY
52841: PPUSH
52842: CALL_OW 248
52846: PPUSH
52847: LD_INT 0
52849: PPUSH
52850: CALL 54254 0 6
52854: ST_TO_ADDR
// if not hexes then
52855: LD_VAR 0 12
52859: NOT
52860: IFFALSE 52864
// exit ;
52862: GO 53417
// for i = 1 to hexes do
52864: LD_ADDR_VAR 0 7
52868: PUSH
52869: DOUBLE
52870: LD_INT 1
52872: DEC
52873: ST_TO_ADDR
52874: LD_VAR 0 12
52878: PUSH
52879: FOR_TO
52880: IFFALSE 53415
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52882: LD_ADDR_VAR 0 11
52886: PUSH
52887: LD_VAR 0 12
52891: PUSH
52892: LD_VAR 0 7
52896: ARRAY
52897: PUSH
52898: LD_INT 1
52900: ARRAY
52901: PPUSH
52902: LD_VAR 0 12
52906: PUSH
52907: LD_VAR 0 7
52911: ARRAY
52912: PUSH
52913: LD_INT 2
52915: ARRAY
52916: PPUSH
52917: CALL_OW 428
52921: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52922: LD_VAR 0 12
52926: PUSH
52927: LD_VAR 0 7
52931: ARRAY
52932: PUSH
52933: LD_INT 1
52935: ARRAY
52936: PPUSH
52937: LD_VAR 0 12
52941: PUSH
52942: LD_VAR 0 7
52946: ARRAY
52947: PUSH
52948: LD_INT 2
52950: ARRAY
52951: PPUSH
52952: CALL_OW 351
52956: PUSH
52957: LD_VAR 0 12
52961: PUSH
52962: LD_VAR 0 7
52966: ARRAY
52967: PUSH
52968: LD_INT 1
52970: ARRAY
52971: PPUSH
52972: LD_VAR 0 12
52976: PUSH
52977: LD_VAR 0 7
52981: ARRAY
52982: PUSH
52983: LD_INT 2
52985: ARRAY
52986: PPUSH
52987: CALL_OW 488
52991: NOT
52992: OR
52993: PUSH
52994: LD_VAR 0 11
52998: PPUSH
52999: CALL_OW 247
53003: PUSH
53004: LD_INT 3
53006: EQUAL
53007: OR
53008: IFFALSE 53014
// exit ;
53010: POP
53011: POP
53012: GO 53417
// if not tmp or not tmp in base then
53014: LD_VAR 0 11
53018: NOT
53019: PUSH
53020: LD_VAR 0 11
53024: PUSH
53025: LD_VAR 0 1
53029: IN
53030: NOT
53031: OR
53032: IFFALSE 53036
// continue ;
53034: GO 52879
// result := true ;
53036: LD_ADDR_VAR 0 6
53040: PUSH
53041: LD_INT 1
53043: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53044: LD_ADDR_VAR 0 15
53048: PUSH
53049: LD_VAR 0 1
53053: PPUSH
53054: LD_INT 22
53056: PUSH
53057: LD_VAR 0 11
53061: PPUSH
53062: CALL_OW 255
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: LD_INT 30
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 30
53086: PUSH
53087: LD_INT 1
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PPUSH
53103: CALL_OW 72
53107: ST_TO_ADDR
// if dep then
53108: LD_VAR 0 15
53112: IFFALSE 53248
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53114: LD_ADDR_VAR 0 14
53118: PUSH
53119: LD_VAR 0 15
53123: PUSH
53124: LD_INT 1
53126: ARRAY
53127: PPUSH
53128: CALL_OW 250
53132: PPUSH
53133: LD_VAR 0 15
53137: PUSH
53138: LD_INT 1
53140: ARRAY
53141: PPUSH
53142: CALL_OW 254
53146: PPUSH
53147: LD_INT 5
53149: PPUSH
53150: CALL_OW 272
53154: PUSH
53155: LD_VAR 0 15
53159: PUSH
53160: LD_INT 1
53162: ARRAY
53163: PPUSH
53164: CALL_OW 251
53168: PPUSH
53169: LD_VAR 0 15
53173: PUSH
53174: LD_INT 1
53176: ARRAY
53177: PPUSH
53178: CALL_OW 254
53182: PPUSH
53183: LD_INT 5
53185: PPUSH
53186: CALL_OW 273
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53195: LD_VAR 0 14
53199: PUSH
53200: LD_INT 1
53202: ARRAY
53203: PPUSH
53204: LD_VAR 0 14
53208: PUSH
53209: LD_INT 2
53211: ARRAY
53212: PPUSH
53213: CALL_OW 488
53217: IFFALSE 53248
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53219: LD_VAR 0 11
53223: PPUSH
53224: LD_VAR 0 14
53228: PUSH
53229: LD_INT 1
53231: ARRAY
53232: PPUSH
53233: LD_VAR 0 14
53237: PUSH
53238: LD_INT 2
53240: ARRAY
53241: PPUSH
53242: CALL_OW 111
// continue ;
53246: GO 52879
// end ; end ; r := GetDir ( tmp ) ;
53248: LD_ADDR_VAR 0 13
53252: PUSH
53253: LD_VAR 0 11
53257: PPUSH
53258: CALL_OW 254
53262: ST_TO_ADDR
// if r = 5 then
53263: LD_VAR 0 13
53267: PUSH
53268: LD_INT 5
53270: EQUAL
53271: IFFALSE 53281
// r := 0 ;
53273: LD_ADDR_VAR 0 13
53277: PUSH
53278: LD_INT 0
53280: ST_TO_ADDR
// for j = r to 5 do
53281: LD_ADDR_VAR 0 8
53285: PUSH
53286: DOUBLE
53287: LD_VAR 0 13
53291: DEC
53292: ST_TO_ADDR
53293: LD_INT 5
53295: PUSH
53296: FOR_TO
53297: IFFALSE 53411
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53299: LD_ADDR_VAR 0 9
53303: PUSH
53304: LD_VAR 0 11
53308: PPUSH
53309: CALL_OW 250
53313: PPUSH
53314: LD_VAR 0 8
53318: PPUSH
53319: LD_INT 2
53321: PPUSH
53322: CALL_OW 272
53326: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53327: LD_ADDR_VAR 0 10
53331: PUSH
53332: LD_VAR 0 11
53336: PPUSH
53337: CALL_OW 251
53341: PPUSH
53342: LD_VAR 0 8
53346: PPUSH
53347: LD_INT 2
53349: PPUSH
53350: CALL_OW 273
53354: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53355: LD_VAR 0 9
53359: PPUSH
53360: LD_VAR 0 10
53364: PPUSH
53365: CALL_OW 488
53369: PUSH
53370: LD_VAR 0 9
53374: PPUSH
53375: LD_VAR 0 10
53379: PPUSH
53380: CALL_OW 428
53384: NOT
53385: AND
53386: IFFALSE 53409
// begin ComMoveXY ( tmp , _x , _y ) ;
53388: LD_VAR 0 11
53392: PPUSH
53393: LD_VAR 0 9
53397: PPUSH
53398: LD_VAR 0 10
53402: PPUSH
53403: CALL_OW 111
// break ;
53407: GO 53411
// end ; end ;
53409: GO 53296
53411: POP
53412: POP
// end ;
53413: GO 52879
53415: POP
53416: POP
// end ;
53417: LD_VAR 0 6
53421: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
53422: LD_INT 0
53424: PPUSH
53425: PPUSH
53426: PPUSH
53427: PPUSH
53428: PPUSH
53429: PPUSH
53430: PPUSH
53431: PPUSH
53432: PPUSH
53433: PPUSH
// result := false ;
53434: LD_ADDR_VAR 0 6
53438: PUSH
53439: LD_INT 0
53441: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53442: LD_VAR 0 1
53446: NOT
53447: PUSH
53448: LD_VAR 0 1
53452: PPUSH
53453: CALL_OW 266
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: IN
53468: NOT
53469: OR
53470: PUSH
53471: LD_VAR 0 2
53475: NOT
53476: OR
53477: PUSH
53478: LD_VAR 0 5
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: LD_INT 5
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: IN
53509: NOT
53510: OR
53511: PUSH
53512: LD_VAR 0 3
53516: PPUSH
53517: LD_VAR 0 4
53521: PPUSH
53522: CALL_OW 488
53526: NOT
53527: OR
53528: IFFALSE 53532
// exit ;
53530: GO 54249
// pom := GetBase ( depot ) ;
53532: LD_ADDR_VAR 0 10
53536: PUSH
53537: LD_VAR 0 1
53541: PPUSH
53542: CALL_OW 274
53546: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53547: LD_ADDR_VAR 0 11
53551: PUSH
53552: LD_VAR 0 2
53556: PPUSH
53557: LD_VAR 0 1
53561: PPUSH
53562: CALL_OW 248
53566: PPUSH
53567: CALL_OW 450
53571: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53572: LD_VAR 0 10
53576: PPUSH
53577: LD_INT 1
53579: PPUSH
53580: CALL_OW 275
53584: PUSH
53585: LD_VAR 0 11
53589: PUSH
53590: LD_INT 1
53592: ARRAY
53593: GREATEREQUAL
53594: PUSH
53595: LD_VAR 0 10
53599: PPUSH
53600: LD_INT 2
53602: PPUSH
53603: CALL_OW 275
53607: PUSH
53608: LD_VAR 0 11
53612: PUSH
53613: LD_INT 2
53615: ARRAY
53616: GREATEREQUAL
53617: AND
53618: PUSH
53619: LD_VAR 0 10
53623: PPUSH
53624: LD_INT 3
53626: PPUSH
53627: CALL_OW 275
53631: PUSH
53632: LD_VAR 0 11
53636: PUSH
53637: LD_INT 3
53639: ARRAY
53640: GREATEREQUAL
53641: AND
53642: NOT
53643: IFFALSE 53647
// exit ;
53645: GO 54249
// if GetBType ( depot ) = b_depot then
53647: LD_VAR 0 1
53651: PPUSH
53652: CALL_OW 266
53656: PUSH
53657: LD_INT 0
53659: EQUAL
53660: IFFALSE 53672
// dist := 28 else
53662: LD_ADDR_VAR 0 14
53666: PUSH
53667: LD_INT 28
53669: ST_TO_ADDR
53670: GO 53680
// dist := 36 ;
53672: LD_ADDR_VAR 0 14
53676: PUSH
53677: LD_INT 36
53679: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53680: LD_VAR 0 1
53684: PPUSH
53685: LD_VAR 0 3
53689: PPUSH
53690: LD_VAR 0 4
53694: PPUSH
53695: CALL_OW 297
53699: PUSH
53700: LD_VAR 0 14
53704: GREATER
53705: IFFALSE 53709
// exit ;
53707: GO 54249
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53709: LD_ADDR_VAR 0 12
53713: PUSH
53714: LD_VAR 0 2
53718: PPUSH
53719: LD_VAR 0 3
53723: PPUSH
53724: LD_VAR 0 4
53728: PPUSH
53729: LD_VAR 0 5
53733: PPUSH
53734: LD_VAR 0 1
53738: PPUSH
53739: CALL_OW 248
53743: PPUSH
53744: LD_INT 0
53746: PPUSH
53747: CALL 54254 0 6
53751: ST_TO_ADDR
// if not hexes then
53752: LD_VAR 0 12
53756: NOT
53757: IFFALSE 53761
// exit ;
53759: GO 54249
// hex := GetHexInfo ( x , y ) ;
53761: LD_ADDR_VAR 0 15
53765: PUSH
53766: LD_VAR 0 3
53770: PPUSH
53771: LD_VAR 0 4
53775: PPUSH
53776: CALL_OW 546
53780: ST_TO_ADDR
// if hex [ 1 ] then
53781: LD_VAR 0 15
53785: PUSH
53786: LD_INT 1
53788: ARRAY
53789: IFFALSE 53793
// exit ;
53791: GO 54249
// height := hex [ 2 ] ;
53793: LD_ADDR_VAR 0 13
53797: PUSH
53798: LD_VAR 0 15
53802: PUSH
53803: LD_INT 2
53805: ARRAY
53806: ST_TO_ADDR
// for i = 1 to hexes do
53807: LD_ADDR_VAR 0 7
53811: PUSH
53812: DOUBLE
53813: LD_INT 1
53815: DEC
53816: ST_TO_ADDR
53817: LD_VAR 0 12
53821: PUSH
53822: FOR_TO
53823: IFFALSE 54153
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53825: LD_VAR 0 12
53829: PUSH
53830: LD_VAR 0 7
53834: ARRAY
53835: PUSH
53836: LD_INT 1
53838: ARRAY
53839: PPUSH
53840: LD_VAR 0 12
53844: PUSH
53845: LD_VAR 0 7
53849: ARRAY
53850: PUSH
53851: LD_INT 2
53853: ARRAY
53854: PPUSH
53855: CALL_OW 488
53859: NOT
53860: PUSH
53861: LD_VAR 0 12
53865: PUSH
53866: LD_VAR 0 7
53870: ARRAY
53871: PUSH
53872: LD_INT 1
53874: ARRAY
53875: PPUSH
53876: LD_VAR 0 12
53880: PUSH
53881: LD_VAR 0 7
53885: ARRAY
53886: PUSH
53887: LD_INT 2
53889: ARRAY
53890: PPUSH
53891: CALL_OW 428
53895: PUSH
53896: LD_INT 0
53898: GREATER
53899: OR
53900: PUSH
53901: LD_VAR 0 12
53905: PUSH
53906: LD_VAR 0 7
53910: ARRAY
53911: PUSH
53912: LD_INT 1
53914: ARRAY
53915: PPUSH
53916: LD_VAR 0 12
53920: PUSH
53921: LD_VAR 0 7
53925: ARRAY
53926: PUSH
53927: LD_INT 2
53929: ARRAY
53930: PPUSH
53931: CALL_OW 351
53935: OR
53936: IFFALSE 53942
// exit ;
53938: POP
53939: POP
53940: GO 54249
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53942: LD_ADDR_VAR 0 8
53946: PUSH
53947: LD_VAR 0 12
53951: PUSH
53952: LD_VAR 0 7
53956: ARRAY
53957: PUSH
53958: LD_INT 1
53960: ARRAY
53961: PPUSH
53962: LD_VAR 0 12
53966: PUSH
53967: LD_VAR 0 7
53971: ARRAY
53972: PUSH
53973: LD_INT 2
53975: ARRAY
53976: PPUSH
53977: CALL_OW 546
53981: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53982: LD_VAR 0 8
53986: PUSH
53987: LD_INT 1
53989: ARRAY
53990: PUSH
53991: LD_VAR 0 8
53995: PUSH
53996: LD_INT 2
53998: ARRAY
53999: PUSH
54000: LD_VAR 0 13
54004: PUSH
54005: LD_INT 2
54007: PLUS
54008: GREATER
54009: OR
54010: PUSH
54011: LD_VAR 0 8
54015: PUSH
54016: LD_INT 2
54018: ARRAY
54019: PUSH
54020: LD_VAR 0 13
54024: PUSH
54025: LD_INT 2
54027: MINUS
54028: LESS
54029: OR
54030: PUSH
54031: LD_VAR 0 8
54035: PUSH
54036: LD_INT 3
54038: ARRAY
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 8
54045: PUSH
54046: LD_INT 9
54048: PUSH
54049: LD_INT 10
54051: PUSH
54052: LD_INT 11
54054: PUSH
54055: LD_INT 12
54057: PUSH
54058: LD_INT 13
54060: PUSH
54061: LD_INT 16
54063: PUSH
54064: LD_INT 17
54066: PUSH
54067: LD_INT 18
54069: PUSH
54070: LD_INT 19
54072: PUSH
54073: LD_INT 20
54075: PUSH
54076: LD_INT 21
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: IN
54094: NOT
54095: OR
54096: PUSH
54097: LD_VAR 0 8
54101: PUSH
54102: LD_INT 5
54104: ARRAY
54105: NOT
54106: OR
54107: PUSH
54108: LD_VAR 0 8
54112: PUSH
54113: LD_INT 6
54115: ARRAY
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 2
54122: PUSH
54123: LD_INT 7
54125: PUSH
54126: LD_INT 9
54128: PUSH
54129: LD_INT 10
54131: PUSH
54132: LD_INT 11
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: IN
54143: NOT
54144: OR
54145: IFFALSE 54151
// exit ;
54147: POP
54148: POP
54149: GO 54249
// end ;
54151: GO 53822
54153: POP
54154: POP
// side := GetSide ( depot ) ;
54155: LD_ADDR_VAR 0 9
54159: PUSH
54160: LD_VAR 0 1
54164: PPUSH
54165: CALL_OW 255
54169: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54170: LD_VAR 0 9
54174: PPUSH
54175: LD_VAR 0 3
54179: PPUSH
54180: LD_VAR 0 4
54184: PPUSH
54185: LD_INT 20
54187: PPUSH
54188: CALL 46903 0 4
54192: PUSH
54193: LD_INT 4
54195: ARRAY
54196: IFFALSE 54200
// exit ;
54198: GO 54249
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54200: LD_VAR 0 2
54204: PUSH
54205: LD_INT 29
54207: PUSH
54208: LD_INT 30
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: IN
54215: PUSH
54216: LD_VAR 0 3
54220: PPUSH
54221: LD_VAR 0 4
54225: PPUSH
54226: LD_VAR 0 9
54230: PPUSH
54231: CALL_OW 440
54235: NOT
54236: AND
54237: IFFALSE 54241
// exit ;
54239: GO 54249
// result := true ;
54241: LD_ADDR_VAR 0 6
54245: PUSH
54246: LD_INT 1
54248: ST_TO_ADDR
// end ;
54249: LD_VAR 0 6
54253: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54254: LD_INT 0
54256: PPUSH
54257: PPUSH
54258: PPUSH
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
54276: PPUSH
54277: PPUSH
54278: PPUSH
54279: PPUSH
54280: PPUSH
54281: PPUSH
54282: PPUSH
54283: PPUSH
54284: PPUSH
54285: PPUSH
54286: PPUSH
54287: PPUSH
54288: PPUSH
54289: PPUSH
54290: PPUSH
54291: PPUSH
54292: PPUSH
54293: PPUSH
54294: PPUSH
54295: PPUSH
54296: PPUSH
54297: PPUSH
54298: PPUSH
54299: PPUSH
54300: PPUSH
54301: PPUSH
54302: PPUSH
54303: PPUSH
54304: PPUSH
54305: PPUSH
54306: PPUSH
54307: PPUSH
54308: PPUSH
54309: PPUSH
54310: PPUSH
54311: PPUSH
54312: PPUSH
54313: PPUSH
// result = [ ] ;
54314: LD_ADDR_VAR 0 7
54318: PUSH
54319: EMPTY
54320: ST_TO_ADDR
// temp_list = [ ] ;
54321: LD_ADDR_VAR 0 9
54325: PUSH
54326: EMPTY
54327: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54328: LD_VAR 0 4
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: LD_INT 5
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: IN
54359: NOT
54360: PUSH
54361: LD_VAR 0 1
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: IN
54376: PUSH
54377: LD_VAR 0 5
54381: PUSH
54382: LD_INT 1
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 3
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: LIST
54395: IN
54396: NOT
54397: AND
54398: OR
54399: IFFALSE 54403
// exit ;
54401: GO 72794
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54403: LD_VAR 0 1
54407: PUSH
54408: LD_INT 6
54410: PUSH
54411: LD_INT 7
54413: PUSH
54414: LD_INT 8
54416: PUSH
54417: LD_INT 13
54419: PUSH
54420: LD_INT 12
54422: PUSH
54423: LD_INT 15
54425: PUSH
54426: LD_INT 11
54428: PUSH
54429: LD_INT 14
54431: PUSH
54432: LD_INT 10
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: IN
54446: IFFALSE 54456
// btype = b_lab ;
54448: LD_ADDR_VAR 0 1
54452: PUSH
54453: LD_INT 6
54455: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54456: LD_VAR 0 6
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: IN
54475: NOT
54476: PUSH
54477: LD_VAR 0 1
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: LD_INT 6
54496: PUSH
54497: LD_INT 36
54499: PUSH
54500: LD_INT 4
54502: PUSH
54503: LD_INT 5
54505: PUSH
54506: LD_INT 31
54508: PUSH
54509: LD_INT 32
54511: PUSH
54512: LD_INT 33
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: IN
54528: NOT
54529: PUSH
54530: LD_VAR 0 6
54534: PUSH
54535: LD_INT 1
54537: EQUAL
54538: AND
54539: OR
54540: PUSH
54541: LD_VAR 0 1
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: IN
54556: NOT
54557: PUSH
54558: LD_VAR 0 6
54562: PUSH
54563: LD_INT 2
54565: EQUAL
54566: AND
54567: OR
54568: IFFALSE 54578
// mode = 0 ;
54570: LD_ADDR_VAR 0 6
54574: PUSH
54575: LD_INT 0
54577: ST_TO_ADDR
// case mode of 0 :
54578: LD_VAR 0 6
54582: PUSH
54583: LD_INT 0
54585: DOUBLE
54586: EQUAL
54587: IFTRUE 54591
54589: GO 66044
54591: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54592: LD_ADDR_VAR 0 11
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 1
54696: PUSH
54697: LD_INT 1
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 3
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54785: LD_ADDR_VAR 0 12
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 2
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 0
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 1
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: NEG
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54981: LD_ADDR_VAR 0 13
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 2
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: NEG
55105: PUSH
55106: LD_INT 1
55108: NEG
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: LD_INT 2
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: NEG
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 3
55152: NEG
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55180: LD_ADDR_VAR 0 14
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: LD_INT 1
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 1
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: LD_INT 2
55265: NEG
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 0
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 2
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 3
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55376: LD_ADDR_VAR 0 15
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 1
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 0
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: LD_INT 0
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: LD_INT 1
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: NEG
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: NEG
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 3
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 3
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55569: LD_ADDR_VAR 0 16
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: LD_INT 2
55654: NEG
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 2
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 2
55672: PUSH
55673: LD_INT 2
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 3
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: LD_INT 3
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55762: LD_ADDR_VAR 0 17
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 2
55858: NEG
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: PUSH
55898: LD_INT 2
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 1
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 2
55961: NEG
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55992: LD_ADDR_VAR 0 18
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: LD_INT 1
56012: NEG
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 1
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 1
56073: NEG
56074: PUSH
56075: LD_INT 2
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 2
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 2
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 2
56127: PUSH
56128: LD_INT 2
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 1
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: LD_INT 2
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 1
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 2
56191: NEG
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56222: LD_ADDR_VAR 0 19
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 1
56242: NEG
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: LD_INT 1
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: NEG
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: LD_INT 2
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 2
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 2
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 2
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 2
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 2
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 2
56409: NEG
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: NEG
56422: PUSH
56423: LD_INT 2
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56452: LD_ADDR_VAR 0 20
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 0
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 1
56480: PUSH
56481: LD_INT 0
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 1
56490: PUSH
56491: LD_INT 1
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 1
56510: NEG
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: NEG
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 2
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 2
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: LD_INT 2
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 2
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: LD_INT 2
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 2
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: NEG
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56682: LD_ADDR_VAR 0 21
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: LD_INT 1
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 1
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: LD_INT 2
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 2
56817: PUSH
56818: LD_INT 2
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 1
56827: PUSH
56828: LD_INT 2
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 0
56837: PUSH
56838: LD_INT 2
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: NEG
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 2
56869: NEG
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: NEG
56882: PUSH
56883: LD_INT 2
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56912: LD_ADDR_VAR 0 22
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 1
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 1
56950: PUSH
56951: LD_INT 1
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: LD_INT 1
56985: NEG
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 2
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: EMPTY
57032: LIST
57033: LIST
57034: PUSH
57035: LD_INT 2
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 2
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: PUSH
57058: LD_INT 2
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 0
57067: PUSH
57068: LD_INT 2
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 2
57088: NEG
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: NEG
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: LD_INT 2
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57142: LD_ADDR_VAR 0 23
57146: PUSH
57147: LD_INT 0
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 1
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 1
57200: NEG
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: LD_INT 2
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 0
57235: PUSH
57236: LD_INT 2
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 2
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: PUSH
57278: LD_INT 2
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 2
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: LD_INT 1
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: LD_INT 1
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: NEG
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 2
57353: NEG
57354: PUSH
57355: LD_INT 3
57357: NEG
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: NEG
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 1
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57422: LD_ADDR_VAR 0 24
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 0
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 1
57491: NEG
57492: PUSH
57493: LD_INT 1
57495: NEG
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 1
57526: PUSH
57527: LD_INT 1
57529: NEG
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 2
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 0
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 2
57621: NEG
57622: PUSH
57623: LD_INT 2
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: LD_INT 2
57636: NEG
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 2
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57698: LD_ADDR_VAR 0 25
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 1
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 1
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 1
57756: NEG
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: NEG
57768: PUSH
57769: LD_INT 1
57771: NEG
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 2
57783: NEG
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: LD_INT 2
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 1
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 2
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: PUSH
57834: LD_INT 2
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: LD_INT 2
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 1
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 2
57885: NEG
57886: PUSH
57887: LD_INT 1
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 2
57897: NEG
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 3
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57972: LD_ADDR_VAR 0 26
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 0
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 1
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 1
58053: NEG
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 1
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 2
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 2
58107: PUSH
58108: LD_INT 2
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: PUSH
58118: LD_INT 2
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 0
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 1
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 2
58171: NEG
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 2
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58248: LD_ADDR_VAR 0 27
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 1
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: NEG
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 2
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 1
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 2
58373: PUSH
58374: LD_INT 1
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 2
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: LD_INT 2
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 2
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 1
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 2
58424: NEG
58425: PUSH
58426: LD_INT 0
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 2
58435: NEG
58436: PUSH
58437: LD_INT 1
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: LD_INT 2
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 3
58481: NEG
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: LD_INT 2
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58528: LD_ADDR_VAR 0 28
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: LD_INT 2
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 2
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: PUSH
58664: LD_INT 2
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 2
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 2
58739: NEG
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: NEG
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 3
58763: NEG
58764: PUSH
58765: LD_INT 1
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: LD_INT 2
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58810: LD_ADDR_VAR 0 29
58814: PUSH
58815: LD_INT 0
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 1
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 1
58868: NEG
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: LD_INT 2
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 1
58914: PUSH
58915: LD_INT 1
58917: NEG
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: LD_INT 2
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 2
58935: PUSH
58936: LD_INT 1
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 1
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: NEG
58989: PUSH
58990: LD_INT 2
58992: NEG
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 2
59000: NEG
59001: PUSH
59002: LD_INT 3
59004: NEG
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 2
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 3
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 3
59054: NEG
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59089: LD_ADDR_VAR 0 30
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 0
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: LD_INT 1
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 1
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 0
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 1
59147: NEG
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 1
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 1
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 0
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 2
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: LD_INT 2
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 1
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 2
59255: NEG
59256: PUSH
59257: LD_INT 0
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 2
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 1
59278: NEG
59279: PUSH
59280: LD_INT 3
59282: NEG
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 2
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 2
59321: NEG
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59367: LD_ADDR_VAR 0 31
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 0
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: LD_INT 1
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 1
59405: PUSH
59406: LD_INT 1
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: NEG
59426: PUSH
59427: LD_INT 0
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: NEG
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 2
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 2
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: PUSH
59509: LD_INT 0
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 1
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 2
59532: NEG
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 2
59544: NEG
59545: PUSH
59546: LD_INT 2
59548: NEG
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: LD_INT 3
59560: NEG
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 2
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: PUSH
59580: LD_INT 1
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 1
59589: PUSH
59590: LD_INT 3
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59645: LD_ADDR_VAR 0 32
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 1
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: PUSH
59684: LD_INT 1
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 0
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 2
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 1
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 2
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: PUSH
59771: LD_INT 2
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: NEG
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: NEG
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 1
59834: NEG
59835: PUSH
59836: LD_INT 3
59838: NEG
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: LD_INT 2
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: PUSH
59868: LD_INT 3
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 2
59877: NEG
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 3
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59923: LD_ADDR_VAR 0 33
59927: PUSH
59928: LD_INT 0
59930: PUSH
59931: LD_INT 0
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: LD_INT 1
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: NEG
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: LD_INT 2
60008: NEG
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: LD_INT 0
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: PUSH
60048: LD_INT 2
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: NEG
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: NEG
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: NEG
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: LD_INT 2
60105: NEG
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 2
60113: NEG
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 1
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 1
60146: PUSH
60147: LD_INT 3
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 2
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60202: LD_ADDR_VAR 0 34
60206: PUSH
60207: LD_INT 0
60209: PUSH
60210: LD_INT 0
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 0
60219: PUSH
60220: LD_INT 1
60222: NEG
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 1
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 1
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: LD_INT 2
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: PUSH
60307: LD_INT 1
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 2
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: LD_INT 2
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: PUSH
60338: LD_INT 2
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: NEG
60348: PUSH
60349: LD_INT 1
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: LD_INT 0
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PUSH
60367: LD_INT 2
60369: NEG
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 2
60381: NEG
60382: PUSH
60383: LD_INT 2
60385: NEG
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 3
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: PUSH
60406: LD_INT 2
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: LD_INT 2
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 3
60447: NEG
60448: PUSH
60449: LD_INT 1
60451: NEG
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60482: LD_ADDR_VAR 0 35
60486: PUSH
60487: LD_INT 0
60489: PUSH
60490: LD_INT 0
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: NEG
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 1
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60594: LD_ADDR_VAR 0 36
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: LD_INT 0
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: LD_INT 1
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 1
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: PUSH
60688: LD_INT 2
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60706: LD_ADDR_VAR 0 37
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 1
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: LD_INT 1
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: LD_INT 1
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: LD_INT 1
60764: NEG
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: LD_INT 1
60775: NEG
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60818: LD_ADDR_VAR 0 38
60822: PUSH
60823: LD_INT 0
60825: PUSH
60826: LD_INT 0
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 1
60838: NEG
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 1
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: PUSH
60857: LD_INT 1
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: LD_INT 1
60876: NEG
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: EMPTY
60882: LIST
60883: LIST
60884: PUSH
60885: LD_INT 1
60887: NEG
60888: PUSH
60889: LD_INT 1
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: LD_INT 2
60909: NEG
60910: PUSH
60911: LD_INT 1
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60930: LD_ADDR_VAR 0 39
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: LD_INT 0
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 1
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: PUSH
60969: LD_INT 1
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 0
60978: PUSH
60979: LD_INT 1
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: LD_INT 2
61015: NEG
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: LIST
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61042: LD_ADDR_VAR 0 40
61046: PUSH
61047: LD_INT 0
61049: PUSH
61050: LD_INT 0
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 1
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 0
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 1
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 1
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 1
61134: NEG
61135: PUSH
61136: LD_INT 1
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61154: LD_ADDR_VAR 0 41
61158: PUSH
61159: LD_INT 0
61161: PUSH
61162: LD_INT 0
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 0
61202: PUSH
61203: LD_INT 1
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: NEG
61213: PUSH
61214: LD_INT 0
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: PUSH
61221: LD_INT 1
61223: NEG
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 1
61235: NEG
61236: PUSH
61237: LD_INT 2
61239: NEG
61240: PUSH
61241: EMPTY
61242: LIST
61243: LIST
61244: PUSH
61245: LD_INT 1
61247: PUSH
61248: LD_INT 1
61250: NEG
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: LD_INT 0
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 2
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 2
61278: PUSH
61279: LD_INT 2
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 1
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: LD_INT 1
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 2
61309: NEG
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 1
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 2
61332: NEG
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 2
61344: NEG
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: EMPTY
61382: LIST
61383: LIST
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: LD_INT 3
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: PUSH
61408: LD_INT 3
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 2
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 3
61428: NEG
61429: PUSH
61430: LD_INT 0
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 3
61451: NEG
61452: PUSH
61453: LD_INT 2
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: NEG
61464: PUSH
61465: LD_INT 3
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: LIST
61483: LIST
61484: LIST
61485: LIST
61486: LIST
61487: LIST
61488: LIST
61489: LIST
61490: LIST
61491: LIST
61492: LIST
61493: LIST
61494: LIST
61495: LIST
61496: LIST
61497: LIST
61498: LIST
61499: LIST
61500: LIST
61501: LIST
61502: LIST
61503: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61504: LD_ADDR_VAR 0 42
61508: PUSH
61509: LD_INT 0
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 1
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: LD_INT 0
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: PUSH
61543: LD_INT 1
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 1
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: LD_INT 0
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: NEG
61574: PUSH
61575: LD_INT 1
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 1
61585: NEG
61586: PUSH
61587: LD_INT 2
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 0
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: PUSH
61640: LD_INT 2
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 0
61649: PUSH
61650: LD_INT 2
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: NEG
61660: PUSH
61661: LD_INT 1
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: NEG
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 2
61694: NEG
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 3
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: LD_INT 2
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: LD_INT 2
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 3
61801: NEG
61802: PUSH
61803: LD_INT 2
61805: NEG
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 3
61813: NEG
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61854: LD_ADDR_VAR 0 43
61858: PUSH
61859: LD_INT 0
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 0
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 1
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 1
61912: NEG
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: LD_INT 1
61927: NEG
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 1
61935: NEG
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 0
61947: PUSH
61948: LD_INT 2
61950: NEG
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 1
61961: NEG
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 0
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 1
61989: PUSH
61990: LD_INT 2
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 2
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: NEG
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: NEG
62044: PUSH
62045: LD_INT 3
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 3
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 1
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: LD_INT 1
62080: NEG
62081: PUSH
62082: EMPTY
62083: LIST
62084: LIST
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 3
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 3
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 2
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: NEG
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 3
62150: NEG
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 3
62161: NEG
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62202: LD_ADDR_VAR 0 44
62206: PUSH
62207: LD_INT 0
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: LD_INT 1
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 1
62260: NEG
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 1
62271: NEG
62272: PUSH
62273: LD_INT 1
62275: NEG
62276: PUSH
62277: EMPTY
62278: LIST
62279: LIST
62280: PUSH
62281: LD_INT 1
62283: NEG
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 2
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 2
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 1
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 2
62380: NEG
62381: PUSH
62382: LD_INT 2
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: LD_INT 3
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 2
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: LD_INT 0
62418: PUSH
62419: EMPTY
62420: LIST
62421: LIST
62422: PUSH
62423: LD_INT 3
62425: PUSH
62426: LD_INT 1
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 3
62435: PUSH
62436: LD_INT 2
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 3
62445: PUSH
62446: LD_INT 3
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: LD_INT 3
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 3
62476: NEG
62477: PUSH
62478: LD_INT 0
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: NEG
62500: PUSH
62501: LD_INT 2
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 3
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: LIST
62525: LIST
62526: LIST
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: LIST
62540: LIST
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62552: LD_ADDR_VAR 0 45
62556: PUSH
62557: LD_INT 0
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 1
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 0
62600: PUSH
62601: LD_INT 1
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 1
62610: NEG
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: NEG
62622: PUSH
62623: LD_INT 1
62625: NEG
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 1
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 2
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: LD_INT 1
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 2
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: NEG
62731: PUSH
62732: LD_INT 2
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 2
62742: NEG
62743: PUSH
62744: LD_INT 3
62746: NEG
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 0
62766: PUSH
62767: LD_INT 3
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 1
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: LD_INT 3
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: LD_INT 3
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: PUSH
62819: LD_INT 3
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_INT 3
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 2
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: LD_INT 2
62853: NEG
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: NEG
62862: PUSH
62863: LD_INT 3
62865: NEG
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62902: LD_ADDR_VAR 0 46
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 0
62995: PUSH
62996: LD_INT 2
62998: NEG
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 1
63006: PUSH
63007: LD_INT 1
63009: NEG
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: LD_INT 1
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 1
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 1
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 2
63068: NEG
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 2
63079: NEG
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: NEG
63092: PUSH
63093: LD_INT 3
63095: NEG
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: LD_INT 0
63103: PUSH
63104: LD_INT 3
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 3
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 3
63146: PUSH
63147: LD_INT 1
63149: PUSH
63150: EMPTY
63151: LIST
63152: LIST
63153: PUSH
63154: LD_INT 1
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 0
63166: PUSH
63167: LD_INT 3
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: LD_INT 1
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 3
63209: NEG
63210: PUSH
63211: LD_INT 1
63213: NEG
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63250: LD_ADDR_VAR 0 47
63254: PUSH
63255: LD_INT 0
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 0
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: PUSH
63279: LD_INT 0
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: NEG
63309: PUSH
63310: LD_INT 0
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 1
63319: NEG
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 2
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 2
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: LD_INT 1
63357: NEG
63358: PUSH
63359: EMPTY
63360: LIST
63361: LIST
63362: PUSH
63363: LD_INT 2
63365: NEG
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 2
63377: NEG
63378: PUSH
63379: LD_INT 2
63381: NEG
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63401: LD_ADDR_VAR 0 48
63405: PUSH
63406: LD_INT 0
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: PUSH
63430: LD_INT 0
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 1
63459: NEG
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 2
63516: PUSH
63517: LD_INT 0
63519: PUSH
63520: EMPTY
63521: LIST
63522: LIST
63523: PUSH
63524: LD_INT 2
63526: PUSH
63527: LD_INT 1
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63548: LD_ADDR_VAR 0 49
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 0
63565: PUSH
63566: LD_INT 1
63568: NEG
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 1
63576: PUSH
63577: LD_INT 0
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: LD_INT 1
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: NEG
63607: PUSH
63608: LD_INT 0
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: NEG
63618: PUSH
63619: LD_INT 1
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 2
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 2
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: PUSH
63661: LD_INT 2
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63692: LD_ADDR_VAR 0 50
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 2
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 2
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 1
63793: PUSH
63794: LD_INT 2
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 2
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 1
63813: NEG
63814: PUSH
63815: LD_INT 1
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63836: LD_ADDR_VAR 0 51
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 0
63853: PUSH
63854: LD_INT 1
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: LD_INT 0
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: PUSH
63875: LD_INT 1
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: LD_INT 1
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: LD_INT 1
63909: NEG
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: LD_INT 2
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 0
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 1
63937: NEG
63938: PUSH
63939: LD_INT 1
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 2
63948: NEG
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: NEG
63960: PUSH
63961: LD_INT 1
63963: NEG
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63983: LD_ADDR_VAR 0 52
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 0
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 1
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: LD_INT 1
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 1
64041: NEG
64042: PUSH
64043: LD_INT 0
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 1
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 1
64064: NEG
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: PUSH
64074: LD_INT 1
64076: NEG
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 2
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 2
64110: NEG
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64134: LD_ADDR_VAR 0 53
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 0
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 1
64172: PUSH
64173: LD_INT 1
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 1
64192: NEG
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: LD_INT 2
64219: NEG
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: LD_INT 2
64230: NEG
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 1
64238: PUSH
64239: LD_INT 1
64241: NEG
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 2
64259: PUSH
64260: LD_INT 1
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: PUSH
64270: LD_INT 2
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 1
64279: PUSH
64280: LD_INT 2
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PUSH
64287: LD_INT 0
64289: PUSH
64290: LD_INT 2
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: LD_INT 1
64299: NEG
64300: PUSH
64301: LD_INT 1
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 2
64310: NEG
64311: PUSH
64312: LD_INT 0
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PUSH
64323: LD_INT 1
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64364: LD_ADDR_VAR 0 54
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: LD_INT 0
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: LD_INT 1
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 1
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: NEG
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: NEG
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: LD_INT 2
64449: NEG
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: LD_INT 2
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: LD_INT 1
64471: NEG
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: PUSH
64477: LD_INT 2
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: PUSH
64487: LD_INT 2
64489: PUSH
64490: LD_INT 1
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 2
64499: PUSH
64500: LD_INT 2
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 1
64509: PUSH
64510: LD_INT 2
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: LD_INT 0
64519: PUSH
64520: LD_INT 2
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 2
64540: NEG
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: NEG
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 2
64563: NEG
64564: PUSH
64565: LD_INT 2
64567: NEG
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64594: LD_ADDR_VAR 0 55
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: LD_INT 0
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: LD_INT 1
64614: NEG
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 1
64622: PUSH
64623: LD_INT 0
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 1
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 1
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 1
64675: NEG
64676: PUSH
64677: LD_INT 2
64679: NEG
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: LD_INT 2
64690: NEG
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 1
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 2
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: LD_INT 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 2
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 2
64770: NEG
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: EMPTY
64776: LIST
64777: LIST
64778: PUSH
64779: LD_INT 2
64781: NEG
64782: PUSH
64783: LD_INT 1
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 2
64793: NEG
64794: PUSH
64795: LD_INT 2
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64824: LD_ADDR_VAR 0 56
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 0
64841: PUSH
64842: LD_INT 1
64844: NEG
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: LD_INT 0
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: PUSH
64863: LD_INT 1
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 1
64882: NEG
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 1
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 2
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 2
64949: PUSH
64950: LD_INT 1
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 2
64959: PUSH
64960: LD_INT 2
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: LD_INT 2
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: LD_INT 2
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 1
64989: NEG
64990: PUSH
64991: LD_INT 1
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 2
65000: NEG
65001: PUSH
65002: LD_INT 0
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 2
65011: NEG
65012: PUSH
65013: LD_INT 1
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65054: LD_ADDR_VAR 0 57
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: LD_INT 0
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: LD_INT 1
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 1
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: LD_INT 1
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: NEG
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: NEG
65124: PUSH
65125: LD_INT 1
65127: NEG
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: LD_INT 1
65135: NEG
65136: PUSH
65137: LD_INT 2
65139: NEG
65140: PUSH
65141: EMPTY
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: LD_INT 2
65150: NEG
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 2
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 2
65189: PUSH
65190: LD_INT 2
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: PUSH
65207: LD_INT 0
65209: PUSH
65210: LD_INT 2
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: LD_INT 1
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: NEG
65242: PUSH
65243: LD_INT 1
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65284: LD_ADDR_VAR 0 58
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 1
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 1
65342: NEG
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: LD_INT 1
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 1
65365: NEG
65366: PUSH
65367: LD_INT 2
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: LD_INT 2
65380: NEG
65381: PUSH
65382: EMPTY
65383: LIST
65384: LIST
65385: PUSH
65386: LD_INT 1
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: PUSH
65397: LD_INT 2
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: PUSH
65407: LD_INT 2
65409: PUSH
65410: LD_INT 1
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 2
65419: PUSH
65420: LD_INT 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 1
65429: PUSH
65430: LD_INT 2
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: LD_INT 2
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 2
65460: NEG
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 2
65483: NEG
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65514: LD_ADDR_VAR 0 59
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65602: LD_ADDR_VAR 0 60
65606: PUSH
65607: LD_INT 0
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: PUSH
65641: LD_INT 1
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: LD_INT 0
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: LD_INT 0
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65690: LD_ADDR_VAR 0 61
65694: PUSH
65695: LD_INT 0
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: LD_INT 1
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: LD_INT 0
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: LD_INT 1
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 1
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: NEG
65760: PUSH
65761: LD_INT 1
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: EMPTY
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65778: LD_ADDR_VAR 0 62
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 0
65795: PUSH
65796: LD_INT 1
65798: NEG
65799: PUSH
65800: EMPTY
65801: LIST
65802: LIST
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: LD_INT 0
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 1
65836: NEG
65837: PUSH
65838: LD_INT 0
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: NEG
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: LIST
65865: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65866: LD_ADDR_VAR 0 63
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 0
65883: PUSH
65884: LD_INT 1
65886: NEG
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: LD_INT 0
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 1
65924: NEG
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: NEG
65936: PUSH
65937: LD_INT 1
65939: NEG
65940: PUSH
65941: EMPTY
65942: LIST
65943: LIST
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: LIST
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65954: LD_ADDR_VAR 0 64
65958: PUSH
65959: LD_INT 0
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 1
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: LD_INT 1
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: LD_INT 1
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 1
66012: NEG
66013: PUSH
66014: LD_INT 0
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: PUSH
66021: LD_INT 1
66023: NEG
66024: PUSH
66025: LD_INT 1
66027: NEG
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: ST_TO_ADDR
// end ; 1 :
66042: GO 71939
66044: LD_INT 1
66046: DOUBLE
66047: EQUAL
66048: IFTRUE 66052
66050: GO 68675
66052: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66053: LD_ADDR_VAR 0 11
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: LD_INT 3
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: LD_INT 2
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: LIST
66096: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66097: LD_ADDR_VAR 0 12
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: LD_INT 1
66107: NEG
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 3
66115: PUSH
66116: LD_INT 0
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 3
66125: PUSH
66126: LD_INT 1
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66138: LD_ADDR_VAR 0 13
66142: PUSH
66143: LD_INT 3
66145: PUSH
66146: LD_INT 2
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 3
66155: PUSH
66156: LD_INT 3
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 2
66165: PUSH
66166: LD_INT 3
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: LIST
66177: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66178: LD_ADDR_VAR 0 14
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: LD_INT 3
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: LD_INT 3
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: LD_INT 2
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: LIST
66218: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66219: LD_ADDR_VAR 0 15
66223: PUSH
66224: LD_INT 2
66226: NEG
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 3
66237: NEG
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 3
66248: NEG
66249: PUSH
66250: LD_INT 1
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: LIST
66262: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66263: LD_ADDR_VAR 0 16
66267: PUSH
66268: LD_INT 2
66270: NEG
66271: PUSH
66272: LD_INT 3
66274: NEG
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 3
66282: NEG
66283: PUSH
66284: LD_INT 2
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66309: LD_ADDR_VAR 0 17
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: LD_INT 3
66320: NEG
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 0
66328: PUSH
66329: LD_INT 3
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: PUSH
66340: LD_INT 2
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: LIST
66352: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66353: LD_ADDR_VAR 0 18
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: LD_INT 1
66363: NEG
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: PUSH
66372: LD_INT 0
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: LD_INT 1
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: LIST
66393: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66394: LD_ADDR_VAR 0 19
66398: PUSH
66399: LD_INT 3
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: PUSH
66412: LD_INT 3
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 2
66421: PUSH
66422: LD_INT 3
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: LIST
66433: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66434: LD_ADDR_VAR 0 20
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: LD_INT 3
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 1
66461: NEG
66462: PUSH
66463: LD_INT 2
66465: PUSH
66466: EMPTY
66467: LIST
66468: LIST
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: LIST
66474: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66475: LD_ADDR_VAR 0 21
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: LD_INT 1
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 3
66493: NEG
66494: PUSH
66495: LD_INT 0
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 3
66504: NEG
66505: PUSH
66506: LD_INT 1
66508: NEG
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: LIST
66518: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66519: LD_ADDR_VAR 0 22
66523: PUSH
66524: LD_INT 2
66526: NEG
66527: PUSH
66528: LD_INT 3
66530: NEG
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: PUSH
66536: LD_INT 3
66538: NEG
66539: PUSH
66540: LD_INT 2
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 3
66550: NEG
66551: PUSH
66552: LD_INT 3
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: LIST
66564: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66565: LD_ADDR_VAR 0 23
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 3
66575: NEG
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: LD_INT 4
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 1
66595: PUSH
66596: LD_INT 3
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: LIST
66608: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66609: LD_ADDR_VAR 0 24
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 4
66637: PUSH
66638: LD_INT 1
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: LIST
66649: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66650: LD_ADDR_VAR 0 25
66654: PUSH
66655: LD_INT 3
66657: PUSH
66658: LD_INT 3
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 4
66667: PUSH
66668: LD_INT 3
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 3
66677: PUSH
66678: LD_INT 4
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66690: LD_ADDR_VAR 0 26
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_INT 3
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 1
66707: PUSH
66708: LD_INT 4
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: LD_INT 3
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66731: LD_ADDR_VAR 0 27
66735: PUSH
66736: LD_INT 3
66738: NEG
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 3
66749: NEG
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 4
66760: NEG
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: LIST
66774: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66775: LD_ADDR_VAR 0 28
66779: PUSH
66780: LD_INT 3
66782: NEG
66783: PUSH
66784: LD_INT 3
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 3
66794: NEG
66795: PUSH
66796: LD_INT 4
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 4
66806: NEG
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: LIST
66820: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66821: LD_ADDR_VAR 0 29
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: LD_INT 3
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 0
66840: PUSH
66841: LD_INT 3
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 1
66851: PUSH
66852: LD_INT 2
66854: NEG
66855: PUSH
66856: EMPTY
66857: LIST
66858: LIST
66859: PUSH
66860: LD_INT 1
66862: NEG
66863: PUSH
66864: LD_INT 4
66866: NEG
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 4
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 3
66888: NEG
66889: PUSH
66890: EMPTY
66891: LIST
66892: LIST
66893: PUSH
66894: LD_INT 1
66896: NEG
66897: PUSH
66898: LD_INT 5
66900: NEG
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 0
66908: PUSH
66909: LD_INT 5
66911: NEG
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: LD_INT 4
66922: NEG
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: LD_INT 6
66934: NEG
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 0
66942: PUSH
66943: LD_INT 6
66945: NEG
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: LD_INT 5
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: LIST
66968: LIST
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66976: LD_ADDR_VAR 0 30
66980: PUSH
66981: LD_INT 2
66983: PUSH
66984: LD_INT 1
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 3
66994: PUSH
66995: LD_INT 0
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 3
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 3
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 4
67025: PUSH
67026: LD_INT 0
67028: PUSH
67029: EMPTY
67030: LIST
67031: LIST
67032: PUSH
67033: LD_INT 4
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 4
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 5
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 5
67066: PUSH
67067: LD_INT 1
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 5
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: EMPTY
67082: LIST
67083: LIST
67084: PUSH
67085: LD_INT 6
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 6
67097: PUSH
67098: LD_INT 1
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: LIST
67114: LIST
67115: LIST
67116: LIST
67117: LIST
67118: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67119: LD_ADDR_VAR 0 31
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: LD_INT 2
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 3
67136: PUSH
67137: LD_INT 3
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: LD_INT 3
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: LD_INT 3
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: LD_INT 4
67166: PUSH
67167: LD_INT 4
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: LD_INT 4
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 5
67186: PUSH
67187: LD_INT 4
67189: PUSH
67190: EMPTY
67191: LIST
67192: LIST
67193: PUSH
67194: LD_INT 5
67196: PUSH
67197: LD_INT 5
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 4
67206: PUSH
67207: LD_INT 5
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: LD_INT 6
67216: PUSH
67217: LD_INT 5
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: PUSH
67224: LD_INT 6
67226: PUSH
67227: LD_INT 6
67229: PUSH
67230: EMPTY
67231: LIST
67232: LIST
67233: PUSH
67234: LD_INT 5
67236: PUSH
67237: LD_INT 6
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67258: LD_ADDR_VAR 0 32
67262: PUSH
67263: LD_INT 1
67265: PUSH
67266: LD_INT 3
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 0
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 1
67285: NEG
67286: PUSH
67287: LD_INT 2
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 1
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 4
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: LD_INT 3
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: LD_INT 5
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 0
67337: PUSH
67338: LD_INT 5
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 1
67347: NEG
67348: PUSH
67349: LD_INT 4
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 1
67358: PUSH
67359: LD_INT 6
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 0
67368: PUSH
67369: LD_INT 6
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: LD_INT 5
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67401: LD_ADDR_VAR 0 33
67405: PUSH
67406: LD_INT 2
67408: NEG
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 3
67419: NEG
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 4
67453: NEG
67454: PUSH
67455: LD_INT 0
67457: PUSH
67458: EMPTY
67459: LIST
67460: LIST
67461: PUSH
67462: LD_INT 4
67464: NEG
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 4
67476: NEG
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 5
67487: NEG
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 5
67498: NEG
67499: PUSH
67500: LD_INT 1
67502: NEG
67503: PUSH
67504: EMPTY
67505: LIST
67506: LIST
67507: PUSH
67508: LD_INT 5
67510: NEG
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 6
67521: NEG
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 6
67532: NEG
67533: PUSH
67534: LD_INT 1
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: LIST
67552: LIST
67553: LIST
67554: LIST
67555: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67556: LD_ADDR_VAR 0 34
67560: PUSH
67561: LD_INT 2
67563: NEG
67564: PUSH
67565: LD_INT 3
67567: NEG
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PUSH
67573: LD_INT 3
67575: NEG
67576: PUSH
67577: LD_INT 2
67579: NEG
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: LD_INT 3
67587: NEG
67588: PUSH
67589: LD_INT 3
67591: NEG
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 3
67599: NEG
67600: PUSH
67601: LD_INT 4
67603: NEG
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: PUSH
67609: LD_INT 4
67611: NEG
67612: PUSH
67613: LD_INT 3
67615: NEG
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 4
67623: NEG
67624: PUSH
67625: LD_INT 4
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 4
67635: NEG
67636: PUSH
67637: LD_INT 5
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: LD_INT 5
67647: NEG
67648: PUSH
67649: LD_INT 4
67651: NEG
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 5
67659: NEG
67660: PUSH
67661: LD_INT 5
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 5
67671: NEG
67672: PUSH
67673: LD_INT 6
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 6
67683: NEG
67684: PUSH
67685: LD_INT 5
67687: NEG
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: LD_INT 6
67695: NEG
67696: PUSH
67697: LD_INT 6
67699: NEG
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67719: LD_ADDR_VAR 0 41
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 2
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 1
67737: NEG
67738: PUSH
67739: LD_INT 3
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: LD_INT 2
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: LIST
67762: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67763: LD_ADDR_VAR 0 42
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: LD_INT 1
67783: NEG
67784: PUSH
67785: EMPTY
67786: LIST
67787: LIST
67788: PUSH
67789: LD_INT 3
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: LIST
67803: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67804: LD_ADDR_VAR 0 43
67808: PUSH
67809: LD_INT 2
67811: PUSH
67812: LD_INT 2
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 3
67821: PUSH
67822: LD_INT 2
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 2
67831: PUSH
67832: LD_INT 3
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: LIST
67843: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67844: LD_ADDR_VAR 0 44
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: LD_INT 2
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: PUSH
67869: LD_INT 1
67871: NEG
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67885: LD_ADDR_VAR 0 45
67889: PUSH
67890: LD_INT 2
67892: NEG
67893: PUSH
67894: LD_INT 0
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 2
67903: NEG
67904: PUSH
67905: LD_INT 1
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: LD_INT 3
67914: NEG
67915: PUSH
67916: LD_INT 1
67918: NEG
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67929: LD_ADDR_VAR 0 46
67933: PUSH
67934: LD_INT 2
67936: NEG
67937: PUSH
67938: LD_INT 2
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 2
67948: NEG
67949: PUSH
67950: LD_INT 3
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 3
67960: NEG
67961: PUSH
67962: LD_INT 2
67964: NEG
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: LIST
67974: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67975: LD_ADDR_VAR 0 47
67979: PUSH
67980: LD_INT 2
67982: NEG
67983: PUSH
67984: LD_INT 3
67986: NEG
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: LD_INT 3
67998: NEG
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68008: LD_ADDR_VAR 0 48
68012: PUSH
68013: LD_INT 1
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 2
68026: PUSH
68027: LD_INT 1
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68039: LD_ADDR_VAR 0 49
68043: PUSH
68044: LD_INT 3
68046: PUSH
68047: LD_INT 1
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 3
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68068: LD_ADDR_VAR 0 50
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: LD_INT 3
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 1
68085: PUSH
68086: LD_INT 3
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68097: LD_ADDR_VAR 0 51
68101: PUSH
68102: LD_INT 1
68104: NEG
68105: PUSH
68106: LD_INT 2
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 2
68115: NEG
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68128: LD_ADDR_VAR 0 52
68132: PUSH
68133: LD_INT 3
68135: NEG
68136: PUSH
68137: LD_INT 1
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 3
68147: NEG
68148: PUSH
68149: LD_INT 2
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68161: LD_ADDR_VAR 0 53
68165: PUSH
68166: LD_INT 1
68168: NEG
68169: PUSH
68170: LD_INT 3
68172: NEG
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: LD_INT 3
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: LD_INT 2
68194: NEG
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68205: LD_ADDR_VAR 0 54
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: LD_INT 1
68215: NEG
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 3
68223: PUSH
68224: LD_INT 0
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 3
68233: PUSH
68234: LD_INT 1
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68246: LD_ADDR_VAR 0 55
68250: PUSH
68251: LD_INT 3
68253: PUSH
68254: LD_INT 2
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 3
68263: PUSH
68264: LD_INT 3
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 2
68273: PUSH
68274: LD_INT 3
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: LIST
68285: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68286: LD_ADDR_VAR 0 56
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: LD_INT 3
68296: PUSH
68297: EMPTY
68298: LIST
68299: LIST
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: LD_INT 3
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 1
68313: NEG
68314: PUSH
68315: LD_INT 2
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: LIST
68326: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68327: LD_ADDR_VAR 0 57
68331: PUSH
68332: LD_INT 2
68334: NEG
68335: PUSH
68336: LD_INT 1
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 3
68345: NEG
68346: PUSH
68347: LD_INT 0
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 3
68356: NEG
68357: PUSH
68358: LD_INT 1
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: LIST
68370: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68371: LD_ADDR_VAR 0 58
68375: PUSH
68376: LD_INT 2
68378: NEG
68379: PUSH
68380: LD_INT 3
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 2
68394: NEG
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 3
68402: NEG
68403: PUSH
68404: LD_INT 3
68406: NEG
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: LIST
68416: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68417: LD_ADDR_VAR 0 59
68421: PUSH
68422: LD_INT 1
68424: NEG
68425: PUSH
68426: LD_INT 2
68428: NEG
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 0
68436: PUSH
68437: LD_INT 2
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: PUSH
68448: LD_INT 1
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: LIST
68460: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68461: LD_ADDR_VAR 0 60
68465: PUSH
68466: LD_INT 1
68468: PUSH
68469: LD_INT 1
68471: NEG
68472: PUSH
68473: EMPTY
68474: LIST
68475: LIST
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: LD_INT 0
68482: PUSH
68483: EMPTY
68484: LIST
68485: LIST
68486: PUSH
68487: LD_INT 2
68489: PUSH
68490: LD_INT 1
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68502: LD_ADDR_VAR 0 61
68506: PUSH
68507: LD_INT 2
68509: PUSH
68510: LD_INT 1
68512: PUSH
68513: EMPTY
68514: LIST
68515: LIST
68516: PUSH
68517: LD_INT 2
68519: PUSH
68520: LD_INT 2
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 1
68529: PUSH
68530: LD_INT 2
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68542: LD_ADDR_VAR 0 62
68546: PUSH
68547: LD_INT 1
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: LD_INT 2
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: LD_INT 1
68573: PUSH
68574: EMPTY
68575: LIST
68576: LIST
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: LIST
68582: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68583: LD_ADDR_VAR 0 63
68587: PUSH
68588: LD_INT 1
68590: NEG
68591: PUSH
68592: LD_INT 1
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 2
68601: NEG
68602: PUSH
68603: LD_INT 0
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: NEG
68613: PUSH
68614: LD_INT 1
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: LIST
68626: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68627: LD_ADDR_VAR 0 64
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: LD_INT 2
68638: NEG
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 2
68658: NEG
68659: PUSH
68660: LD_INT 2
68662: NEG
68663: PUSH
68664: EMPTY
68665: LIST
68666: LIST
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: LIST
68672: ST_TO_ADDR
// end ; 2 :
68673: GO 71939
68675: LD_INT 2
68677: DOUBLE
68678: EQUAL
68679: IFTRUE 68683
68681: GO 71938
68683: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68684: LD_ADDR_VAR 0 29
68688: PUSH
68689: LD_INT 4
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: EMPTY
68696: LIST
68697: LIST
68698: PUSH
68699: LD_INT 4
68701: PUSH
68702: LD_INT 1
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 5
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 5
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 4
68732: PUSH
68733: LD_INT 1
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 3
68742: PUSH
68743: LD_INT 0
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 3
68752: PUSH
68753: LD_INT 1
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 3
68763: PUSH
68764: LD_INT 2
68766: NEG
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: PUSH
68772: LD_INT 5
68774: PUSH
68775: LD_INT 2
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 3
68784: PUSH
68785: LD_INT 3
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 3
68794: PUSH
68795: LD_INT 2
68797: PUSH
68798: EMPTY
68799: LIST
68800: LIST
68801: PUSH
68802: LD_INT 4
68804: PUSH
68805: LD_INT 3
68807: PUSH
68808: EMPTY
68809: LIST
68810: LIST
68811: PUSH
68812: LD_INT 4
68814: PUSH
68815: LD_INT 4
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 3
68824: PUSH
68825: LD_INT 4
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 2
68834: PUSH
68835: LD_INT 3
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: LD_INT 2
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 4
68854: PUSH
68855: LD_INT 2
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 2
68864: PUSH
68865: LD_INT 4
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 4
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 3
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 1
68894: PUSH
68895: LD_INT 4
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: LD_INT 5
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 0
68914: PUSH
68915: LD_INT 5
68917: PUSH
68918: EMPTY
68919: LIST
68920: LIST
68921: PUSH
68922: LD_INT 1
68924: NEG
68925: PUSH
68926: LD_INT 4
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: LD_INT 3
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 2
68946: PUSH
68947: LD_INT 5
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 2
68956: NEG
68957: PUSH
68958: LD_INT 3
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 3
68967: NEG
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 3
68978: NEG
68979: PUSH
68980: LD_INT 1
68982: NEG
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: LD_INT 0
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 2
69001: NEG
69002: PUSH
69003: LD_INT 1
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 3
69012: NEG
69013: PUSH
69014: LD_INT 1
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 4
69023: NEG
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: LD_INT 1
69038: NEG
69039: PUSH
69040: EMPTY
69041: LIST
69042: LIST
69043: PUSH
69044: LD_INT 4
69046: NEG
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 2
69058: NEG
69059: PUSH
69060: LD_INT 2
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 4
69069: NEG
69070: PUSH
69071: LD_INT 4
69073: NEG
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: LD_INT 4
69081: NEG
69082: PUSH
69083: LD_INT 5
69085: NEG
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: PUSH
69091: LD_INT 3
69093: NEG
69094: PUSH
69095: LD_INT 4
69097: NEG
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: PUSH
69103: LD_INT 3
69105: NEG
69106: PUSH
69107: LD_INT 3
69109: NEG
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 4
69117: NEG
69118: PUSH
69119: LD_INT 3
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 5
69129: NEG
69130: PUSH
69131: LD_INT 4
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 5
69141: NEG
69142: PUSH
69143: LD_INT 5
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 3
69153: NEG
69154: PUSH
69155: LD_INT 5
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 5
69165: NEG
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69222: LD_ADDR_VAR 0 30
69226: PUSH
69227: LD_INT 4
69229: PUSH
69230: LD_INT 4
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 4
69239: PUSH
69240: LD_INT 3
69242: PUSH
69243: EMPTY
69244: LIST
69245: LIST
69246: PUSH
69247: LD_INT 5
69249: PUSH
69250: LD_INT 4
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: LD_INT 5
69259: PUSH
69260: LD_INT 5
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: LD_INT 5
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: LD_INT 4
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 3
69289: PUSH
69290: LD_INT 3
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 5
69299: PUSH
69300: LD_INT 3
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 3
69309: PUSH
69310: LD_INT 5
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: LD_INT 3
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 2
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 1
69339: PUSH
69340: LD_INT 3
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: PUSH
69350: LD_INT 4
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 0
69359: PUSH
69360: LD_INT 4
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 1
69369: NEG
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: NEG
69381: PUSH
69382: LD_INT 2
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: LD_INT 2
69391: PUSH
69392: LD_INT 4
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 2
69401: NEG
69402: PUSH
69403: LD_INT 2
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: PUSH
69410: LD_INT 4
69412: NEG
69413: PUSH
69414: LD_INT 0
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 4
69423: NEG
69424: PUSH
69425: LD_INT 1
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 3
69435: NEG
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 3
69446: NEG
69447: PUSH
69448: LD_INT 1
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 4
69457: NEG
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 5
69468: NEG
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 5
69479: NEG
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 5
69491: NEG
69492: PUSH
69493: LD_INT 2
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 3
69503: NEG
69504: PUSH
69505: LD_INT 2
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 3
69514: NEG
69515: PUSH
69516: LD_INT 3
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: LD_INT 3
69526: NEG
69527: PUSH
69528: LD_INT 4
69530: NEG
69531: PUSH
69532: EMPTY
69533: LIST
69534: LIST
69535: PUSH
69536: LD_INT 2
69538: NEG
69539: PUSH
69540: LD_INT 3
69542: NEG
69543: PUSH
69544: EMPTY
69545: LIST
69546: LIST
69547: PUSH
69548: LD_INT 2
69550: NEG
69551: PUSH
69552: LD_INT 2
69554: NEG
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 3
69562: NEG
69563: PUSH
69564: LD_INT 2
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 3
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 4
69586: NEG
69587: PUSH
69588: LD_INT 4
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 2
69598: NEG
69599: PUSH
69600: LD_INT 4
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: LD_INT 4
69625: NEG
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: LD_INT 5
69636: NEG
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: PUSH
69645: LD_INT 4
69647: NEG
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 1
69655: PUSH
69656: LD_INT 3
69658: NEG
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: PUSH
69664: LD_INT 0
69666: PUSH
69667: LD_INT 3
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 1
69677: NEG
69678: PUSH
69679: LD_INT 4
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 1
69689: NEG
69690: PUSH
69691: LD_INT 5
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 2
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 2
69712: NEG
69713: PUSH
69714: LD_INT 5
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69769: LD_ADDR_VAR 0 31
69773: PUSH
69774: LD_INT 0
69776: PUSH
69777: LD_INT 4
69779: PUSH
69780: EMPTY
69781: LIST
69782: LIST
69783: PUSH
69784: LD_INT 0
69786: PUSH
69787: LD_INT 3
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 1
69796: PUSH
69797: LD_INT 4
69799: PUSH
69800: EMPTY
69801: LIST
69802: LIST
69803: PUSH
69804: LD_INT 1
69806: PUSH
69807: LD_INT 5
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 0
69816: PUSH
69817: LD_INT 5
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: LD_INT 4
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: LD_INT 3
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 2
69848: PUSH
69849: LD_INT 5
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 2
69858: NEG
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 3
69869: NEG
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 3
69880: NEG
69881: PUSH
69882: LD_INT 1
69884: NEG
69885: PUSH
69886: EMPTY
69887: LIST
69888: LIST
69889: PUSH
69890: LD_INT 2
69892: NEG
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 2
69903: NEG
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 3
69914: NEG
69915: PUSH
69916: LD_INT 1
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 4
69925: NEG
69926: PUSH
69927: LD_INT 0
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: LD_INT 4
69936: NEG
69937: PUSH
69938: LD_INT 1
69940: NEG
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 4
69948: NEG
69949: PUSH
69950: LD_INT 2
69952: NEG
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: NEG
69961: PUSH
69962: LD_INT 2
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 4
69971: NEG
69972: PUSH
69973: LD_INT 4
69975: NEG
69976: PUSH
69977: EMPTY
69978: LIST
69979: LIST
69980: PUSH
69981: LD_INT 4
69983: NEG
69984: PUSH
69985: LD_INT 5
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 3
69995: NEG
69996: PUSH
69997: LD_INT 4
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 3
70007: NEG
70008: PUSH
70009: LD_INT 3
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 4
70019: NEG
70020: PUSH
70021: LD_INT 3
70023: NEG
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 5
70031: NEG
70032: PUSH
70033: LD_INT 4
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 5
70043: NEG
70044: PUSH
70045: LD_INT 5
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 3
70055: NEG
70056: PUSH
70057: LD_INT 5
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 5
70067: NEG
70068: PUSH
70069: LD_INT 3
70071: NEG
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: LD_INT 3
70082: NEG
70083: PUSH
70084: EMPTY
70085: LIST
70086: LIST
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: LD_INT 4
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 1
70101: PUSH
70102: LD_INT 3
70104: NEG
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: PUSH
70113: LD_INT 2
70115: NEG
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 0
70123: PUSH
70124: LD_INT 2
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 3
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: NEG
70147: PUSH
70148: LD_INT 4
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 2
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 2
70169: NEG
70170: PUSH
70171: LD_INT 4
70173: NEG
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 4
70181: PUSH
70182: LD_INT 0
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 4
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 5
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 5
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: LD_INT 4
70222: PUSH
70223: LD_INT 1
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 3
70232: PUSH
70233: LD_INT 0
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 3
70242: PUSH
70243: LD_INT 1
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 3
70253: PUSH
70254: LD_INT 2
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 5
70264: PUSH
70265: LD_INT 2
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70319: LD_ADDR_VAR 0 32
70323: PUSH
70324: LD_INT 4
70326: NEG
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 4
70337: NEG
70338: PUSH
70339: LD_INT 1
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 3
70349: NEG
70350: PUSH
70351: LD_INT 0
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 4
70371: NEG
70372: PUSH
70373: LD_INT 1
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 5
70382: NEG
70383: PUSH
70384: LD_INT 0
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 5
70393: NEG
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 5
70405: NEG
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: LD_INT 2
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 3
70428: NEG
70429: PUSH
70430: LD_INT 3
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 3
70440: NEG
70441: PUSH
70442: LD_INT 4
70444: NEG
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 2
70452: NEG
70453: PUSH
70454: LD_INT 3
70456: NEG
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: PUSH
70462: LD_INT 2
70464: NEG
70465: PUSH
70466: LD_INT 2
70468: NEG
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 3
70476: NEG
70477: PUSH
70478: LD_INT 2
70480: NEG
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 4
70488: NEG
70489: PUSH
70490: LD_INT 3
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: NEG
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 2
70512: NEG
70513: PUSH
70514: LD_INT 4
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 4
70524: NEG
70525: PUSH
70526: LD_INT 2
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: LD_INT 4
70539: NEG
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 0
70547: PUSH
70548: LD_INT 5
70550: NEG
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 1
70558: PUSH
70559: LD_INT 4
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 1
70569: PUSH
70570: LD_INT 3
70572: NEG
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: LD_INT 0
70580: PUSH
70581: LD_INT 3
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 1
70591: NEG
70592: PUSH
70593: LD_INT 4
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: LD_INT 5
70607: NEG
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 2
70615: PUSH
70616: LD_INT 3
70618: NEG
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: PUSH
70624: LD_INT 2
70626: NEG
70627: PUSH
70628: LD_INT 5
70630: NEG
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: LD_INT 0
70641: PUSH
70642: EMPTY
70643: LIST
70644: LIST
70645: PUSH
70646: LD_INT 3
70648: PUSH
70649: LD_INT 1
70651: NEG
70652: PUSH
70653: EMPTY
70654: LIST
70655: LIST
70656: PUSH
70657: LD_INT 4
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 4
70669: PUSH
70670: LD_INT 1
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 3
70679: PUSH
70680: LD_INT 1
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 2
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: LD_INT 1
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 2
70710: PUSH
70711: LD_INT 2
70713: NEG
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 4
70721: PUSH
70722: LD_INT 2
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 4
70731: PUSH
70732: LD_INT 4
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 4
70741: PUSH
70742: LD_INT 3
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 5
70751: PUSH
70752: LD_INT 4
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: LD_INT 5
70761: PUSH
70762: LD_INT 5
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: PUSH
70769: LD_INT 4
70771: PUSH
70772: LD_INT 5
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 3
70781: PUSH
70782: LD_INT 4
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 3
70791: PUSH
70792: LD_INT 3
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 5
70801: PUSH
70802: LD_INT 3
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 3
70811: PUSH
70812: LD_INT 5
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: LIST
70855: LIST
70856: LIST
70857: LIST
70858: LIST
70859: LIST
70860: LIST
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70866: LD_ADDR_VAR 0 33
70870: PUSH
70871: LD_INT 4
70873: NEG
70874: PUSH
70875: LD_INT 4
70877: NEG
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 4
70885: NEG
70886: PUSH
70887: LD_INT 5
70889: NEG
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 3
70897: NEG
70898: PUSH
70899: LD_INT 4
70901: NEG
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 3
70909: NEG
70910: PUSH
70911: LD_INT 3
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 4
70921: NEG
70922: PUSH
70923: LD_INT 3
70925: NEG
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 5
70933: NEG
70934: PUSH
70935: LD_INT 4
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 5
70945: NEG
70946: PUSH
70947: LD_INT 5
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 3
70957: NEG
70958: PUSH
70959: LD_INT 5
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 5
70969: NEG
70970: PUSH
70971: LD_INT 3
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 0
70981: PUSH
70982: LD_INT 3
70984: NEG
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 0
70992: PUSH
70993: LD_INT 4
70995: NEG
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 1
71003: PUSH
71004: LD_INT 3
71006: NEG
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 1
71014: PUSH
71015: LD_INT 2
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 0
71025: PUSH
71026: LD_INT 2
71028: NEG
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 1
71036: NEG
71037: PUSH
71038: LD_INT 3
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 1
71048: NEG
71049: PUSH
71050: LD_INT 4
71052: NEG
71053: PUSH
71054: EMPTY
71055: LIST
71056: LIST
71057: PUSH
71058: LD_INT 2
71060: PUSH
71061: LD_INT 2
71063: NEG
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 2
71071: NEG
71072: PUSH
71073: LD_INT 4
71075: NEG
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 4
71083: PUSH
71084: LD_INT 0
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 4
71093: PUSH
71094: LD_INT 1
71096: NEG
71097: PUSH
71098: EMPTY
71099: LIST
71100: LIST
71101: PUSH
71102: LD_INT 5
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 5
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 4
71124: PUSH
71125: LD_INT 1
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 3
71134: PUSH
71135: LD_INT 0
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 3
71144: PUSH
71145: LD_INT 1
71147: NEG
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 3
71155: PUSH
71156: LD_INT 2
71158: NEG
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 5
71166: PUSH
71167: LD_INT 2
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 3
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: LD_INT 2
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 4
71196: PUSH
71197: LD_INT 3
71199: PUSH
71200: EMPTY
71201: LIST
71202: LIST
71203: PUSH
71204: LD_INT 4
71206: PUSH
71207: LD_INT 4
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 3
71216: PUSH
71217: LD_INT 4
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: LD_INT 2
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 4
71246: PUSH
71247: LD_INT 2
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 2
71256: PUSH
71257: LD_INT 4
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 0
71266: PUSH
71267: LD_INT 4
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: LD_INT 3
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 1
71286: PUSH
71287: LD_INT 4
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 1
71296: PUSH
71297: LD_INT 5
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 0
71306: PUSH
71307: LD_INT 5
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 1
71316: NEG
71317: PUSH
71318: LD_INT 4
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 1
71327: NEG
71328: PUSH
71329: LD_INT 3
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 2
71338: PUSH
71339: LD_INT 5
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 2
71348: NEG
71349: PUSH
71350: LD_INT 3
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: LIST
71367: LIST
71368: LIST
71369: LIST
71370: LIST
71371: LIST
71372: LIST
71373: LIST
71374: LIST
71375: LIST
71376: LIST
71377: LIST
71378: LIST
71379: LIST
71380: LIST
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71404: LD_ADDR_VAR 0 34
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_INT 4
71414: NEG
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 0
71422: PUSH
71423: LD_INT 5
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 1
71433: PUSH
71434: LD_INT 4
71436: NEG
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 1
71444: PUSH
71445: LD_INT 3
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 0
71455: PUSH
71456: LD_INT 3
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 1
71466: NEG
71467: PUSH
71468: LD_INT 4
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: NEG
71479: PUSH
71480: LD_INT 5
71482: NEG
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 2
71490: PUSH
71491: LD_INT 3
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 2
71501: NEG
71502: PUSH
71503: LD_INT 5
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 3
71513: PUSH
71514: LD_INT 0
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 3
71523: PUSH
71524: LD_INT 1
71526: NEG
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 4
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 4
71544: PUSH
71545: LD_INT 1
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 3
71554: PUSH
71555: LD_INT 1
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 2
71564: PUSH
71565: LD_INT 0
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 2
71574: PUSH
71575: LD_INT 1
71577: NEG
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 2
71585: PUSH
71586: LD_INT 2
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 4
71596: PUSH
71597: LD_INT 2
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 4
71606: PUSH
71607: LD_INT 4
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 4
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 5
71626: PUSH
71627: LD_INT 4
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 5
71636: PUSH
71637: LD_INT 5
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 4
71646: PUSH
71647: LD_INT 5
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 3
71656: PUSH
71657: LD_INT 4
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 3
71666: PUSH
71667: LD_INT 3
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 5
71676: PUSH
71677: LD_INT 3
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: LD_INT 5
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: LD_INT 3
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: LD_INT 2
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 1
71716: PUSH
71717: LD_INT 3
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 1
71726: PUSH
71727: LD_INT 4
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: LD_INT 4
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 1
71746: NEG
71747: PUSH
71748: LD_INT 3
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 1
71757: NEG
71758: PUSH
71759: LD_INT 2
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 2
71768: PUSH
71769: LD_INT 4
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 2
71778: NEG
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 4
71789: NEG
71790: PUSH
71791: LD_INT 0
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 4
71800: NEG
71801: PUSH
71802: LD_INT 1
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 3
71812: NEG
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 3
71823: NEG
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 4
71834: NEG
71835: PUSH
71836: LD_INT 1
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: LD_INT 5
71845: NEG
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 5
71856: NEG
71857: PUSH
71858: LD_INT 1
71860: NEG
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 5
71868: NEG
71869: PUSH
71870: LD_INT 2
71872: NEG
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 3
71880: NEG
71881: PUSH
71882: LD_INT 2
71884: PUSH
71885: EMPTY
71886: LIST
71887: LIST
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: LIST
71912: LIST
71913: LIST
71914: LIST
71915: LIST
71916: LIST
71917: LIST
71918: LIST
71919: LIST
71920: LIST
71921: LIST
71922: LIST
71923: LIST
71924: LIST
71925: LIST
71926: LIST
71927: LIST
71928: LIST
71929: LIST
71930: LIST
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: ST_TO_ADDR
// end ; end ;
71936: GO 71939
71938: POP
// case btype of b_depot , b_warehouse :
71939: LD_VAR 0 1
71943: PUSH
71944: LD_INT 0
71946: DOUBLE
71947: EQUAL
71948: IFTRUE 71958
71950: LD_INT 1
71952: DOUBLE
71953: EQUAL
71954: IFTRUE 71958
71956: GO 72159
71958: POP
// case nation of nation_american :
71959: LD_VAR 0 5
71963: PUSH
71964: LD_INT 1
71966: DOUBLE
71967: EQUAL
71968: IFTRUE 71972
71970: GO 72028
71972: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71973: LD_ADDR_VAR 0 9
71977: PUSH
71978: LD_VAR 0 11
71982: PUSH
71983: LD_VAR 0 12
71987: PUSH
71988: LD_VAR 0 13
71992: PUSH
71993: LD_VAR 0 14
71997: PUSH
71998: LD_VAR 0 15
72002: PUSH
72003: LD_VAR 0 16
72007: PUSH
72008: EMPTY
72009: LIST
72010: LIST
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: PUSH
72016: LD_VAR 0 4
72020: PUSH
72021: LD_INT 1
72023: PLUS
72024: ARRAY
72025: ST_TO_ADDR
72026: GO 72157
72028: LD_INT 2
72030: DOUBLE
72031: EQUAL
72032: IFTRUE 72036
72034: GO 72092
72036: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72037: LD_ADDR_VAR 0 9
72041: PUSH
72042: LD_VAR 0 17
72046: PUSH
72047: LD_VAR 0 18
72051: PUSH
72052: LD_VAR 0 19
72056: PUSH
72057: LD_VAR 0 20
72061: PUSH
72062: LD_VAR 0 21
72066: PUSH
72067: LD_VAR 0 22
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: PUSH
72080: LD_VAR 0 4
72084: PUSH
72085: LD_INT 1
72087: PLUS
72088: ARRAY
72089: ST_TO_ADDR
72090: GO 72157
72092: LD_INT 3
72094: DOUBLE
72095: EQUAL
72096: IFTRUE 72100
72098: GO 72156
72100: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72101: LD_ADDR_VAR 0 9
72105: PUSH
72106: LD_VAR 0 23
72110: PUSH
72111: LD_VAR 0 24
72115: PUSH
72116: LD_VAR 0 25
72120: PUSH
72121: LD_VAR 0 26
72125: PUSH
72126: LD_VAR 0 27
72130: PUSH
72131: LD_VAR 0 28
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: PUSH
72144: LD_VAR 0 4
72148: PUSH
72149: LD_INT 1
72151: PLUS
72152: ARRAY
72153: ST_TO_ADDR
72154: GO 72157
72156: POP
72157: GO 72712
72159: LD_INT 2
72161: DOUBLE
72162: EQUAL
72163: IFTRUE 72173
72165: LD_INT 3
72167: DOUBLE
72168: EQUAL
72169: IFTRUE 72173
72171: GO 72229
72173: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72174: LD_ADDR_VAR 0 9
72178: PUSH
72179: LD_VAR 0 29
72183: PUSH
72184: LD_VAR 0 30
72188: PUSH
72189: LD_VAR 0 31
72193: PUSH
72194: LD_VAR 0 32
72198: PUSH
72199: LD_VAR 0 33
72203: PUSH
72204: LD_VAR 0 34
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: PUSH
72217: LD_VAR 0 4
72221: PUSH
72222: LD_INT 1
72224: PLUS
72225: ARRAY
72226: ST_TO_ADDR
72227: GO 72712
72229: LD_INT 16
72231: DOUBLE
72232: EQUAL
72233: IFTRUE 72291
72235: LD_INT 17
72237: DOUBLE
72238: EQUAL
72239: IFTRUE 72291
72241: LD_INT 18
72243: DOUBLE
72244: EQUAL
72245: IFTRUE 72291
72247: LD_INT 19
72249: DOUBLE
72250: EQUAL
72251: IFTRUE 72291
72253: LD_INT 22
72255: DOUBLE
72256: EQUAL
72257: IFTRUE 72291
72259: LD_INT 20
72261: DOUBLE
72262: EQUAL
72263: IFTRUE 72291
72265: LD_INT 21
72267: DOUBLE
72268: EQUAL
72269: IFTRUE 72291
72271: LD_INT 23
72273: DOUBLE
72274: EQUAL
72275: IFTRUE 72291
72277: LD_INT 24
72279: DOUBLE
72280: EQUAL
72281: IFTRUE 72291
72283: LD_INT 25
72285: DOUBLE
72286: EQUAL
72287: IFTRUE 72291
72289: GO 72347
72291: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72292: LD_ADDR_VAR 0 9
72296: PUSH
72297: LD_VAR 0 35
72301: PUSH
72302: LD_VAR 0 36
72306: PUSH
72307: LD_VAR 0 37
72311: PUSH
72312: LD_VAR 0 38
72316: PUSH
72317: LD_VAR 0 39
72321: PUSH
72322: LD_VAR 0 40
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: PUSH
72335: LD_VAR 0 4
72339: PUSH
72340: LD_INT 1
72342: PLUS
72343: ARRAY
72344: ST_TO_ADDR
72345: GO 72712
72347: LD_INT 6
72349: DOUBLE
72350: EQUAL
72351: IFTRUE 72403
72353: LD_INT 7
72355: DOUBLE
72356: EQUAL
72357: IFTRUE 72403
72359: LD_INT 8
72361: DOUBLE
72362: EQUAL
72363: IFTRUE 72403
72365: LD_INT 13
72367: DOUBLE
72368: EQUAL
72369: IFTRUE 72403
72371: LD_INT 12
72373: DOUBLE
72374: EQUAL
72375: IFTRUE 72403
72377: LD_INT 15
72379: DOUBLE
72380: EQUAL
72381: IFTRUE 72403
72383: LD_INT 11
72385: DOUBLE
72386: EQUAL
72387: IFTRUE 72403
72389: LD_INT 14
72391: DOUBLE
72392: EQUAL
72393: IFTRUE 72403
72395: LD_INT 10
72397: DOUBLE
72398: EQUAL
72399: IFTRUE 72403
72401: GO 72459
72403: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72404: LD_ADDR_VAR 0 9
72408: PUSH
72409: LD_VAR 0 41
72413: PUSH
72414: LD_VAR 0 42
72418: PUSH
72419: LD_VAR 0 43
72423: PUSH
72424: LD_VAR 0 44
72428: PUSH
72429: LD_VAR 0 45
72433: PUSH
72434: LD_VAR 0 46
72438: PUSH
72439: EMPTY
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: PUSH
72447: LD_VAR 0 4
72451: PUSH
72452: LD_INT 1
72454: PLUS
72455: ARRAY
72456: ST_TO_ADDR
72457: GO 72712
72459: LD_INT 36
72461: DOUBLE
72462: EQUAL
72463: IFTRUE 72467
72465: GO 72523
72467: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72468: LD_ADDR_VAR 0 9
72472: PUSH
72473: LD_VAR 0 47
72477: PUSH
72478: LD_VAR 0 48
72482: PUSH
72483: LD_VAR 0 49
72487: PUSH
72488: LD_VAR 0 50
72492: PUSH
72493: LD_VAR 0 51
72497: PUSH
72498: LD_VAR 0 52
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: PUSH
72511: LD_VAR 0 4
72515: PUSH
72516: LD_INT 1
72518: PLUS
72519: ARRAY
72520: ST_TO_ADDR
72521: GO 72712
72523: LD_INT 4
72525: DOUBLE
72526: EQUAL
72527: IFTRUE 72549
72529: LD_INT 5
72531: DOUBLE
72532: EQUAL
72533: IFTRUE 72549
72535: LD_INT 34
72537: DOUBLE
72538: EQUAL
72539: IFTRUE 72549
72541: LD_INT 37
72543: DOUBLE
72544: EQUAL
72545: IFTRUE 72549
72547: GO 72605
72549: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72550: LD_ADDR_VAR 0 9
72554: PUSH
72555: LD_VAR 0 53
72559: PUSH
72560: LD_VAR 0 54
72564: PUSH
72565: LD_VAR 0 55
72569: PUSH
72570: LD_VAR 0 56
72574: PUSH
72575: LD_VAR 0 57
72579: PUSH
72580: LD_VAR 0 58
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: LIST
72589: LIST
72590: LIST
72591: LIST
72592: PUSH
72593: LD_VAR 0 4
72597: PUSH
72598: LD_INT 1
72600: PLUS
72601: ARRAY
72602: ST_TO_ADDR
72603: GO 72712
72605: LD_INT 31
72607: DOUBLE
72608: EQUAL
72609: IFTRUE 72655
72611: LD_INT 32
72613: DOUBLE
72614: EQUAL
72615: IFTRUE 72655
72617: LD_INT 33
72619: DOUBLE
72620: EQUAL
72621: IFTRUE 72655
72623: LD_INT 27
72625: DOUBLE
72626: EQUAL
72627: IFTRUE 72655
72629: LD_INT 26
72631: DOUBLE
72632: EQUAL
72633: IFTRUE 72655
72635: LD_INT 28
72637: DOUBLE
72638: EQUAL
72639: IFTRUE 72655
72641: LD_INT 29
72643: DOUBLE
72644: EQUAL
72645: IFTRUE 72655
72647: LD_INT 30
72649: DOUBLE
72650: EQUAL
72651: IFTRUE 72655
72653: GO 72711
72655: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72656: LD_ADDR_VAR 0 9
72660: PUSH
72661: LD_VAR 0 59
72665: PUSH
72666: LD_VAR 0 60
72670: PUSH
72671: LD_VAR 0 61
72675: PUSH
72676: LD_VAR 0 62
72680: PUSH
72681: LD_VAR 0 63
72685: PUSH
72686: LD_VAR 0 64
72690: PUSH
72691: EMPTY
72692: LIST
72693: LIST
72694: LIST
72695: LIST
72696: LIST
72697: LIST
72698: PUSH
72699: LD_VAR 0 4
72703: PUSH
72704: LD_INT 1
72706: PLUS
72707: ARRAY
72708: ST_TO_ADDR
72709: GO 72712
72711: POP
// temp_list2 = [ ] ;
72712: LD_ADDR_VAR 0 10
72716: PUSH
72717: EMPTY
72718: ST_TO_ADDR
// for i in temp_list do
72719: LD_ADDR_VAR 0 8
72723: PUSH
72724: LD_VAR 0 9
72728: PUSH
72729: FOR_IN
72730: IFFALSE 72782
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72732: LD_ADDR_VAR 0 10
72736: PUSH
72737: LD_VAR 0 10
72741: PUSH
72742: LD_VAR 0 8
72746: PUSH
72747: LD_INT 1
72749: ARRAY
72750: PUSH
72751: LD_VAR 0 2
72755: PLUS
72756: PUSH
72757: LD_VAR 0 8
72761: PUSH
72762: LD_INT 2
72764: ARRAY
72765: PUSH
72766: LD_VAR 0 3
72770: PLUS
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: EMPTY
72777: LIST
72778: ADD
72779: ST_TO_ADDR
72780: GO 72729
72782: POP
72783: POP
// result = temp_list2 ;
72784: LD_ADDR_VAR 0 7
72788: PUSH
72789: LD_VAR 0 10
72793: ST_TO_ADDR
// end ;
72794: LD_VAR 0 7
72798: RET
// export function EnemyInRange ( unit , dist ) ; begin
72799: LD_INT 0
72801: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72802: LD_ADDR_VAR 0 3
72806: PUSH
72807: LD_VAR 0 1
72811: PPUSH
72812: CALL_OW 255
72816: PPUSH
72817: LD_VAR 0 1
72821: PPUSH
72822: CALL_OW 250
72826: PPUSH
72827: LD_VAR 0 1
72831: PPUSH
72832: CALL_OW 251
72836: PPUSH
72837: LD_VAR 0 2
72841: PPUSH
72842: CALL 46903 0 4
72846: PUSH
72847: LD_INT 4
72849: ARRAY
72850: ST_TO_ADDR
// end ;
72851: LD_VAR 0 3
72855: RET
// export function PlayerSeeMe ( unit ) ; begin
72856: LD_INT 0
72858: PPUSH
// result := See ( your_side , unit ) ;
72859: LD_ADDR_VAR 0 2
72863: PUSH
72864: LD_OWVAR 2
72868: PPUSH
72869: LD_VAR 0 1
72873: PPUSH
72874: CALL_OW 292
72878: ST_TO_ADDR
// end ;
72879: LD_VAR 0 2
72883: RET
// export function ReverseDir ( unit ) ; begin
72884: LD_INT 0
72886: PPUSH
// if not unit then
72887: LD_VAR 0 1
72891: NOT
72892: IFFALSE 72896
// exit ;
72894: GO 72919
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72896: LD_ADDR_VAR 0 2
72900: PUSH
72901: LD_VAR 0 1
72905: PPUSH
72906: CALL_OW 254
72910: PUSH
72911: LD_INT 3
72913: PLUS
72914: PUSH
72915: LD_INT 6
72917: MOD
72918: ST_TO_ADDR
// end ;
72919: LD_VAR 0 2
72923: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
72924: LD_INT 0
72926: PPUSH
72927: PPUSH
72928: PPUSH
72929: PPUSH
72930: PPUSH
// if not hexes then
72931: LD_VAR 0 2
72935: NOT
72936: IFFALSE 72940
// exit ;
72938: GO 73088
// dist := 9999 ;
72940: LD_ADDR_VAR 0 5
72944: PUSH
72945: LD_INT 9999
72947: ST_TO_ADDR
// for i = 1 to hexes do
72948: LD_ADDR_VAR 0 4
72952: PUSH
72953: DOUBLE
72954: LD_INT 1
72956: DEC
72957: ST_TO_ADDR
72958: LD_VAR 0 2
72962: PUSH
72963: FOR_TO
72964: IFFALSE 73076
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
72966: LD_VAR 0 1
72970: PPUSH
72971: LD_VAR 0 2
72975: PUSH
72976: LD_VAR 0 4
72980: ARRAY
72981: PUSH
72982: LD_INT 1
72984: ARRAY
72985: PPUSH
72986: LD_VAR 0 2
72990: PUSH
72991: LD_VAR 0 4
72995: ARRAY
72996: PUSH
72997: LD_INT 2
72999: ARRAY
73000: PPUSH
73001: CALL_OW 297
73005: PUSH
73006: LD_VAR 0 5
73010: LESS
73011: IFFALSE 73074
// begin hex := hexes [ i ] ;
73013: LD_ADDR_VAR 0 7
73017: PUSH
73018: LD_VAR 0 2
73022: PUSH
73023: LD_VAR 0 4
73027: ARRAY
73028: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73029: LD_ADDR_VAR 0 5
73033: PUSH
73034: LD_VAR 0 1
73038: PPUSH
73039: LD_VAR 0 2
73043: PUSH
73044: LD_VAR 0 4
73048: ARRAY
73049: PUSH
73050: LD_INT 1
73052: ARRAY
73053: PPUSH
73054: LD_VAR 0 2
73058: PUSH
73059: LD_VAR 0 4
73063: ARRAY
73064: PUSH
73065: LD_INT 2
73067: ARRAY
73068: PPUSH
73069: CALL_OW 297
73073: ST_TO_ADDR
// end ; end ;
73074: GO 72963
73076: POP
73077: POP
// result := hex ;
73078: LD_ADDR_VAR 0 3
73082: PUSH
73083: LD_VAR 0 7
73087: ST_TO_ADDR
// end ;
73088: LD_VAR 0 3
73092: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73093: LD_INT 0
73095: PPUSH
73096: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73097: LD_VAR 0 1
73101: NOT
73102: PUSH
73103: LD_VAR 0 1
73107: PUSH
73108: LD_INT 21
73110: PUSH
73111: LD_INT 2
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 23
73120: PUSH
73121: LD_INT 2
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PPUSH
73132: CALL_OW 69
73136: IN
73137: NOT
73138: OR
73139: IFFALSE 73143
// exit ;
73141: GO 73190
// for i = 1 to 3 do
73143: LD_ADDR_VAR 0 3
73147: PUSH
73148: DOUBLE
73149: LD_INT 1
73151: DEC
73152: ST_TO_ADDR
73153: LD_INT 3
73155: PUSH
73156: FOR_TO
73157: IFFALSE 73188
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73159: LD_VAR 0 1
73163: PPUSH
73164: CALL_OW 250
73168: PPUSH
73169: LD_VAR 0 1
73173: PPUSH
73174: CALL_OW 251
73178: PPUSH
73179: LD_INT 1
73181: PPUSH
73182: CALL_OW 453
73186: GO 73156
73188: POP
73189: POP
// end ;
73190: LD_VAR 0 2
73194: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73195: LD_INT 0
73197: PPUSH
73198: PPUSH
73199: PPUSH
73200: PPUSH
73201: PPUSH
73202: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73203: LD_VAR 0 1
73207: NOT
73208: PUSH
73209: LD_VAR 0 2
73213: NOT
73214: OR
73215: PUSH
73216: LD_VAR 0 1
73220: PPUSH
73221: CALL_OW 314
73225: OR
73226: IFFALSE 73230
// exit ;
73228: GO 73671
// x := GetX ( enemy_unit ) ;
73230: LD_ADDR_VAR 0 7
73234: PUSH
73235: LD_VAR 0 2
73239: PPUSH
73240: CALL_OW 250
73244: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73245: LD_ADDR_VAR 0 8
73249: PUSH
73250: LD_VAR 0 2
73254: PPUSH
73255: CALL_OW 251
73259: ST_TO_ADDR
// if not x or not y then
73260: LD_VAR 0 7
73264: NOT
73265: PUSH
73266: LD_VAR 0 8
73270: NOT
73271: OR
73272: IFFALSE 73276
// exit ;
73274: GO 73671
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73276: LD_ADDR_VAR 0 6
73280: PUSH
73281: LD_VAR 0 7
73285: PPUSH
73286: LD_INT 0
73288: PPUSH
73289: LD_INT 4
73291: PPUSH
73292: CALL_OW 272
73296: PUSH
73297: LD_VAR 0 8
73301: PPUSH
73302: LD_INT 0
73304: PPUSH
73305: LD_INT 4
73307: PPUSH
73308: CALL_OW 273
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_VAR 0 7
73321: PPUSH
73322: LD_INT 1
73324: PPUSH
73325: LD_INT 4
73327: PPUSH
73328: CALL_OW 272
73332: PUSH
73333: LD_VAR 0 8
73337: PPUSH
73338: LD_INT 1
73340: PPUSH
73341: LD_INT 4
73343: PPUSH
73344: CALL_OW 273
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: LD_VAR 0 7
73357: PPUSH
73358: LD_INT 2
73360: PPUSH
73361: LD_INT 4
73363: PPUSH
73364: CALL_OW 272
73368: PUSH
73369: LD_VAR 0 8
73373: PPUSH
73374: LD_INT 2
73376: PPUSH
73377: LD_INT 4
73379: PPUSH
73380: CALL_OW 273
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_VAR 0 7
73393: PPUSH
73394: LD_INT 3
73396: PPUSH
73397: LD_INT 4
73399: PPUSH
73400: CALL_OW 272
73404: PUSH
73405: LD_VAR 0 8
73409: PPUSH
73410: LD_INT 3
73412: PPUSH
73413: LD_INT 4
73415: PPUSH
73416: CALL_OW 273
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: LD_VAR 0 7
73429: PPUSH
73430: LD_INT 4
73432: PPUSH
73433: LD_INT 4
73435: PPUSH
73436: CALL_OW 272
73440: PUSH
73441: LD_VAR 0 8
73445: PPUSH
73446: LD_INT 4
73448: PPUSH
73449: LD_INT 4
73451: PPUSH
73452: CALL_OW 273
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_VAR 0 7
73465: PPUSH
73466: LD_INT 5
73468: PPUSH
73469: LD_INT 4
73471: PPUSH
73472: CALL_OW 272
73476: PUSH
73477: LD_VAR 0 8
73481: PPUSH
73482: LD_INT 5
73484: PPUSH
73485: LD_INT 4
73487: PPUSH
73488: CALL_OW 273
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: ST_TO_ADDR
// for i = tmp downto 1 do
73505: LD_ADDR_VAR 0 4
73509: PUSH
73510: DOUBLE
73511: LD_VAR 0 6
73515: INC
73516: ST_TO_ADDR
73517: LD_INT 1
73519: PUSH
73520: FOR_DOWNTO
73521: IFFALSE 73622
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73523: LD_VAR 0 6
73527: PUSH
73528: LD_VAR 0 4
73532: ARRAY
73533: PUSH
73534: LD_INT 1
73536: ARRAY
73537: PPUSH
73538: LD_VAR 0 6
73542: PUSH
73543: LD_VAR 0 4
73547: ARRAY
73548: PUSH
73549: LD_INT 2
73551: ARRAY
73552: PPUSH
73553: CALL_OW 488
73557: NOT
73558: PUSH
73559: LD_VAR 0 6
73563: PUSH
73564: LD_VAR 0 4
73568: ARRAY
73569: PUSH
73570: LD_INT 1
73572: ARRAY
73573: PPUSH
73574: LD_VAR 0 6
73578: PUSH
73579: LD_VAR 0 4
73583: ARRAY
73584: PUSH
73585: LD_INT 2
73587: ARRAY
73588: PPUSH
73589: CALL_OW 428
73593: PUSH
73594: LD_INT 0
73596: NONEQUAL
73597: OR
73598: IFFALSE 73620
// tmp := Delete ( tmp , i ) ;
73600: LD_ADDR_VAR 0 6
73604: PUSH
73605: LD_VAR 0 6
73609: PPUSH
73610: LD_VAR 0 4
73614: PPUSH
73615: CALL_OW 3
73619: ST_TO_ADDR
73620: GO 73520
73622: POP
73623: POP
// j := GetClosestHex ( unit , tmp ) ;
73624: LD_ADDR_VAR 0 5
73628: PUSH
73629: LD_VAR 0 1
73633: PPUSH
73634: LD_VAR 0 6
73638: PPUSH
73639: CALL 72924 0 2
73643: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73644: LD_VAR 0 1
73648: PPUSH
73649: LD_VAR 0 5
73653: PUSH
73654: LD_INT 1
73656: ARRAY
73657: PPUSH
73658: LD_VAR 0 5
73662: PUSH
73663: LD_INT 2
73665: ARRAY
73666: PPUSH
73667: CALL_OW 111
// end ;
73671: LD_VAR 0 3
73675: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73676: LD_INT 0
73678: PPUSH
73679: PPUSH
73680: PPUSH
// uc_side = 0 ;
73681: LD_ADDR_OWVAR 20
73685: PUSH
73686: LD_INT 0
73688: ST_TO_ADDR
// uc_nation = 0 ;
73689: LD_ADDR_OWVAR 21
73693: PUSH
73694: LD_INT 0
73696: ST_TO_ADDR
// InitHc_All ( ) ;
73697: CALL_OW 584
// InitVc ;
73701: CALL_OW 20
// if mastodonts then
73705: LD_VAR 0 6
73709: IFFALSE 73776
// for i = 1 to mastodonts do
73711: LD_ADDR_VAR 0 11
73715: PUSH
73716: DOUBLE
73717: LD_INT 1
73719: DEC
73720: ST_TO_ADDR
73721: LD_VAR 0 6
73725: PUSH
73726: FOR_TO
73727: IFFALSE 73774
// begin vc_chassis := 31 ;
73729: LD_ADDR_OWVAR 37
73733: PUSH
73734: LD_INT 31
73736: ST_TO_ADDR
// vc_control := control_rider ;
73737: LD_ADDR_OWVAR 38
73741: PUSH
73742: LD_INT 4
73744: ST_TO_ADDR
// animal := CreateVehicle ;
73745: LD_ADDR_VAR 0 12
73749: PUSH
73750: CALL_OW 45
73754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73755: LD_VAR 0 12
73759: PPUSH
73760: LD_VAR 0 8
73764: PPUSH
73765: LD_INT 0
73767: PPUSH
73768: CALL 75964 0 3
// end ;
73772: GO 73726
73774: POP
73775: POP
// if horses then
73776: LD_VAR 0 5
73780: IFFALSE 73847
// for i = 1 to horses do
73782: LD_ADDR_VAR 0 11
73786: PUSH
73787: DOUBLE
73788: LD_INT 1
73790: DEC
73791: ST_TO_ADDR
73792: LD_VAR 0 5
73796: PUSH
73797: FOR_TO
73798: IFFALSE 73845
// begin hc_class := 21 ;
73800: LD_ADDR_OWVAR 28
73804: PUSH
73805: LD_INT 21
73807: ST_TO_ADDR
// hc_gallery :=  ;
73808: LD_ADDR_OWVAR 33
73812: PUSH
73813: LD_STRING 
73815: ST_TO_ADDR
// animal := CreateHuman ;
73816: LD_ADDR_VAR 0 12
73820: PUSH
73821: CALL_OW 44
73825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73826: LD_VAR 0 12
73830: PPUSH
73831: LD_VAR 0 8
73835: PPUSH
73836: LD_INT 0
73838: PPUSH
73839: CALL 75964 0 3
// end ;
73843: GO 73797
73845: POP
73846: POP
// if birds then
73847: LD_VAR 0 1
73851: IFFALSE 73918
// for i = 1 to birds do
73853: LD_ADDR_VAR 0 11
73857: PUSH
73858: DOUBLE
73859: LD_INT 1
73861: DEC
73862: ST_TO_ADDR
73863: LD_VAR 0 1
73867: PUSH
73868: FOR_TO
73869: IFFALSE 73916
// begin hc_class = 18 ;
73871: LD_ADDR_OWVAR 28
73875: PUSH
73876: LD_INT 18
73878: ST_TO_ADDR
// hc_gallery =  ;
73879: LD_ADDR_OWVAR 33
73883: PUSH
73884: LD_STRING 
73886: ST_TO_ADDR
// animal := CreateHuman ;
73887: LD_ADDR_VAR 0 12
73891: PUSH
73892: CALL_OW 44
73896: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73897: LD_VAR 0 12
73901: PPUSH
73902: LD_VAR 0 8
73906: PPUSH
73907: LD_INT 0
73909: PPUSH
73910: CALL 75964 0 3
// end ;
73914: GO 73868
73916: POP
73917: POP
// if tigers then
73918: LD_VAR 0 2
73922: IFFALSE 74006
// for i = 1 to tigers do
73924: LD_ADDR_VAR 0 11
73928: PUSH
73929: DOUBLE
73930: LD_INT 1
73932: DEC
73933: ST_TO_ADDR
73934: LD_VAR 0 2
73938: PUSH
73939: FOR_TO
73940: IFFALSE 74004
// begin hc_class = class_tiger ;
73942: LD_ADDR_OWVAR 28
73946: PUSH
73947: LD_INT 14
73949: ST_TO_ADDR
// hc_gallery =  ;
73950: LD_ADDR_OWVAR 33
73954: PUSH
73955: LD_STRING 
73957: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73958: LD_ADDR_OWVAR 35
73962: PUSH
73963: LD_INT 7
73965: NEG
73966: PPUSH
73967: LD_INT 7
73969: PPUSH
73970: CALL_OW 12
73974: ST_TO_ADDR
// animal := CreateHuman ;
73975: LD_ADDR_VAR 0 12
73979: PUSH
73980: CALL_OW 44
73984: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73985: LD_VAR 0 12
73989: PPUSH
73990: LD_VAR 0 8
73994: PPUSH
73995: LD_INT 0
73997: PPUSH
73998: CALL 75964 0 3
// end ;
74002: GO 73939
74004: POP
74005: POP
// if apemans then
74006: LD_VAR 0 3
74010: IFFALSE 74133
// for i = 1 to apemans do
74012: LD_ADDR_VAR 0 11
74016: PUSH
74017: DOUBLE
74018: LD_INT 1
74020: DEC
74021: ST_TO_ADDR
74022: LD_VAR 0 3
74026: PUSH
74027: FOR_TO
74028: IFFALSE 74131
// begin hc_class = class_apeman ;
74030: LD_ADDR_OWVAR 28
74034: PUSH
74035: LD_INT 12
74037: ST_TO_ADDR
// hc_gallery =  ;
74038: LD_ADDR_OWVAR 33
74042: PUSH
74043: LD_STRING 
74045: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
74046: LD_ADDR_OWVAR 35
74050: PUSH
74051: LD_INT 5
74053: NEG
74054: PPUSH
74055: LD_INT 5
74057: PPUSH
74058: CALL_OW 12
74062: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74063: LD_ADDR_OWVAR 31
74067: PUSH
74068: LD_INT 1
74070: PPUSH
74071: LD_INT 3
74073: PPUSH
74074: CALL_OW 12
74078: PUSH
74079: LD_INT 1
74081: PPUSH
74082: LD_INT 3
74084: PPUSH
74085: CALL_OW 12
74089: PUSH
74090: LD_INT 0
74092: PUSH
74093: LD_INT 0
74095: PUSH
74096: EMPTY
74097: LIST
74098: LIST
74099: LIST
74100: LIST
74101: ST_TO_ADDR
// animal := CreateHuman ;
74102: LD_ADDR_VAR 0 12
74106: PUSH
74107: CALL_OW 44
74111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74112: LD_VAR 0 12
74116: PPUSH
74117: LD_VAR 0 8
74121: PPUSH
74122: LD_INT 0
74124: PPUSH
74125: CALL 75964 0 3
// end ;
74129: GO 74027
74131: POP
74132: POP
// if enchidnas then
74133: LD_VAR 0 4
74137: IFFALSE 74204
// for i = 1 to enchidnas do
74139: LD_ADDR_VAR 0 11
74143: PUSH
74144: DOUBLE
74145: LD_INT 1
74147: DEC
74148: ST_TO_ADDR
74149: LD_VAR 0 4
74153: PUSH
74154: FOR_TO
74155: IFFALSE 74202
// begin hc_class = 13 ;
74157: LD_ADDR_OWVAR 28
74161: PUSH
74162: LD_INT 13
74164: ST_TO_ADDR
// hc_gallery =  ;
74165: LD_ADDR_OWVAR 33
74169: PUSH
74170: LD_STRING 
74172: ST_TO_ADDR
// animal := CreateHuman ;
74173: LD_ADDR_VAR 0 12
74177: PUSH
74178: CALL_OW 44
74182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74183: LD_VAR 0 12
74187: PPUSH
74188: LD_VAR 0 8
74192: PPUSH
74193: LD_INT 0
74195: PPUSH
74196: CALL 75964 0 3
// end ;
74200: GO 74154
74202: POP
74203: POP
// if fishes then
74204: LD_VAR 0 7
74208: IFFALSE 74275
// for i = 1 to fishes do
74210: LD_ADDR_VAR 0 11
74214: PUSH
74215: DOUBLE
74216: LD_INT 1
74218: DEC
74219: ST_TO_ADDR
74220: LD_VAR 0 7
74224: PUSH
74225: FOR_TO
74226: IFFALSE 74273
// begin hc_class = 20 ;
74228: LD_ADDR_OWVAR 28
74232: PUSH
74233: LD_INT 20
74235: ST_TO_ADDR
// hc_gallery =  ;
74236: LD_ADDR_OWVAR 33
74240: PUSH
74241: LD_STRING 
74243: ST_TO_ADDR
// animal := CreateHuman ;
74244: LD_ADDR_VAR 0 12
74248: PUSH
74249: CALL_OW 44
74253: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74254: LD_VAR 0 12
74258: PPUSH
74259: LD_VAR 0 9
74263: PPUSH
74264: LD_INT 0
74266: PPUSH
74267: CALL 75964 0 3
// end ;
74271: GO 74225
74273: POP
74274: POP
// end ;
74275: LD_VAR 0 10
74279: RET
// export function WantHeal ( sci , unit ) ; begin
74280: LD_INT 0
74282: PPUSH
// if GetTaskList ( sci ) > 0 then
74283: LD_VAR 0 1
74287: PPUSH
74288: CALL_OW 437
74292: PUSH
74293: LD_INT 0
74295: GREATER
74296: IFFALSE 74366
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74298: LD_VAR 0 1
74302: PPUSH
74303: CALL_OW 437
74307: PUSH
74308: LD_INT 1
74310: ARRAY
74311: PUSH
74312: LD_INT 1
74314: ARRAY
74315: PUSH
74316: LD_STRING l
74318: EQUAL
74319: PUSH
74320: LD_VAR 0 1
74324: PPUSH
74325: CALL_OW 437
74329: PUSH
74330: LD_INT 1
74332: ARRAY
74333: PUSH
74334: LD_INT 4
74336: ARRAY
74337: PUSH
74338: LD_VAR 0 2
74342: EQUAL
74343: AND
74344: IFFALSE 74356
// result := true else
74346: LD_ADDR_VAR 0 3
74350: PUSH
74351: LD_INT 1
74353: ST_TO_ADDR
74354: GO 74364
// result := false ;
74356: LD_ADDR_VAR 0 3
74360: PUSH
74361: LD_INT 0
74363: ST_TO_ADDR
// end else
74364: GO 74374
// result := false ;
74366: LD_ADDR_VAR 0 3
74370: PUSH
74371: LD_INT 0
74373: ST_TO_ADDR
// end ;
74374: LD_VAR 0 3
74378: RET
// export function HealTarget ( sci ) ; begin
74379: LD_INT 0
74381: PPUSH
// if not sci then
74382: LD_VAR 0 1
74386: NOT
74387: IFFALSE 74391
// exit ;
74389: GO 74456
// result := 0 ;
74391: LD_ADDR_VAR 0 2
74395: PUSH
74396: LD_INT 0
74398: ST_TO_ADDR
// if GetTaskList ( sci ) then
74399: LD_VAR 0 1
74403: PPUSH
74404: CALL_OW 437
74408: IFFALSE 74456
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74410: LD_VAR 0 1
74414: PPUSH
74415: CALL_OW 437
74419: PUSH
74420: LD_INT 1
74422: ARRAY
74423: PUSH
74424: LD_INT 1
74426: ARRAY
74427: PUSH
74428: LD_STRING l
74430: EQUAL
74431: IFFALSE 74456
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74433: LD_ADDR_VAR 0 2
74437: PUSH
74438: LD_VAR 0 1
74442: PPUSH
74443: CALL_OW 437
74447: PUSH
74448: LD_INT 1
74450: ARRAY
74451: PUSH
74452: LD_INT 4
74454: ARRAY
74455: ST_TO_ADDR
// end ;
74456: LD_VAR 0 2
74460: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74461: LD_INT 0
74463: PPUSH
74464: PPUSH
74465: PPUSH
74466: PPUSH
// if not base_units then
74467: LD_VAR 0 1
74471: NOT
74472: IFFALSE 74476
// exit ;
74474: GO 74563
// result := false ;
74476: LD_ADDR_VAR 0 2
74480: PUSH
74481: LD_INT 0
74483: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74484: LD_ADDR_VAR 0 5
74488: PUSH
74489: LD_VAR 0 1
74493: PPUSH
74494: LD_INT 21
74496: PUSH
74497: LD_INT 3
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PPUSH
74504: CALL_OW 72
74508: ST_TO_ADDR
// if not tmp then
74509: LD_VAR 0 5
74513: NOT
74514: IFFALSE 74518
// exit ;
74516: GO 74563
// for i in tmp do
74518: LD_ADDR_VAR 0 3
74522: PUSH
74523: LD_VAR 0 5
74527: PUSH
74528: FOR_IN
74529: IFFALSE 74561
// begin result := EnemyInRange ( i , 22 ) ;
74531: LD_ADDR_VAR 0 2
74535: PUSH
74536: LD_VAR 0 3
74540: PPUSH
74541: LD_INT 22
74543: PPUSH
74544: CALL 72799 0 2
74548: ST_TO_ADDR
// if result then
74549: LD_VAR 0 2
74553: IFFALSE 74559
// exit ;
74555: POP
74556: POP
74557: GO 74563
// end ;
74559: GO 74528
74561: POP
74562: POP
// end ;
74563: LD_VAR 0 2
74567: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
74568: LD_INT 0
74570: PPUSH
74571: PPUSH
// if not units then
74572: LD_VAR 0 1
74576: NOT
74577: IFFALSE 74581
// exit ;
74579: GO 74651
// result := [ ] ;
74581: LD_ADDR_VAR 0 3
74585: PUSH
74586: EMPTY
74587: ST_TO_ADDR
// for i in units do
74588: LD_ADDR_VAR 0 4
74592: PUSH
74593: LD_VAR 0 1
74597: PUSH
74598: FOR_IN
74599: IFFALSE 74649
// if GetTag ( i ) = tag then
74601: LD_VAR 0 4
74605: PPUSH
74606: CALL_OW 110
74610: PUSH
74611: LD_VAR 0 2
74615: EQUAL
74616: IFFALSE 74647
// result := Insert ( result , result + 1 , i ) ;
74618: LD_ADDR_VAR 0 3
74622: PUSH
74623: LD_VAR 0 3
74627: PPUSH
74628: LD_VAR 0 3
74632: PUSH
74633: LD_INT 1
74635: PLUS
74636: PPUSH
74637: LD_VAR 0 4
74641: PPUSH
74642: CALL_OW 2
74646: ST_TO_ADDR
74647: GO 74598
74649: POP
74650: POP
// end ;
74651: LD_VAR 0 3
74655: RET
// export function IsDriver ( un ) ; begin
74656: LD_INT 0
74658: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74659: LD_ADDR_VAR 0 2
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 55
74671: PUSH
74672: EMPTY
74673: LIST
74674: PPUSH
74675: CALL_OW 69
74679: IN
74680: ST_TO_ADDR
// end ;
74681: LD_VAR 0 2
74685: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74686: LD_INT 0
74688: PPUSH
74689: PPUSH
// list := [ ] ;
74690: LD_ADDR_VAR 0 5
74694: PUSH
74695: EMPTY
74696: ST_TO_ADDR
// case d of 0 :
74697: LD_VAR 0 3
74701: PUSH
74702: LD_INT 0
74704: DOUBLE
74705: EQUAL
74706: IFTRUE 74710
74708: GO 74843
74710: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74711: LD_ADDR_VAR 0 5
74715: PUSH
74716: LD_VAR 0 1
74720: PUSH
74721: LD_INT 4
74723: MINUS
74724: PUSH
74725: LD_VAR 0 2
74729: PUSH
74730: LD_INT 4
74732: MINUS
74733: PUSH
74734: LD_INT 2
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: LIST
74741: PUSH
74742: LD_VAR 0 1
74746: PUSH
74747: LD_INT 3
74749: MINUS
74750: PUSH
74751: LD_VAR 0 2
74755: PUSH
74756: LD_INT 1
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: LIST
74763: PUSH
74764: LD_VAR 0 1
74768: PUSH
74769: LD_INT 4
74771: PLUS
74772: PUSH
74773: LD_VAR 0 2
74777: PUSH
74778: LD_INT 4
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: LIST
74785: PUSH
74786: LD_VAR 0 1
74790: PUSH
74791: LD_INT 3
74793: PLUS
74794: PUSH
74795: LD_VAR 0 2
74799: PUSH
74800: LD_INT 3
74802: PLUS
74803: PUSH
74804: LD_INT 5
74806: PUSH
74807: EMPTY
74808: LIST
74809: LIST
74810: LIST
74811: PUSH
74812: LD_VAR 0 1
74816: PUSH
74817: LD_VAR 0 2
74821: PUSH
74822: LD_INT 4
74824: PLUS
74825: PUSH
74826: LD_INT 0
74828: PUSH
74829: EMPTY
74830: LIST
74831: LIST
74832: LIST
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: ST_TO_ADDR
// end ; 1 :
74841: GO 75541
74843: LD_INT 1
74845: DOUBLE
74846: EQUAL
74847: IFTRUE 74851
74849: GO 74984
74851: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74852: LD_ADDR_VAR 0 5
74856: PUSH
74857: LD_VAR 0 1
74861: PUSH
74862: LD_VAR 0 2
74866: PUSH
74867: LD_INT 4
74869: MINUS
74870: PUSH
74871: LD_INT 3
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: LIST
74878: PUSH
74879: LD_VAR 0 1
74883: PUSH
74884: LD_INT 3
74886: MINUS
74887: PUSH
74888: LD_VAR 0 2
74892: PUSH
74893: LD_INT 3
74895: MINUS
74896: PUSH
74897: LD_INT 2
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: LIST
74904: PUSH
74905: LD_VAR 0 1
74909: PUSH
74910: LD_INT 4
74912: MINUS
74913: PUSH
74914: LD_VAR 0 2
74918: PUSH
74919: LD_INT 1
74921: PUSH
74922: EMPTY
74923: LIST
74924: LIST
74925: LIST
74926: PUSH
74927: LD_VAR 0 1
74931: PUSH
74932: LD_VAR 0 2
74936: PUSH
74937: LD_INT 3
74939: PLUS
74940: PUSH
74941: LD_INT 0
74943: PUSH
74944: EMPTY
74945: LIST
74946: LIST
74947: LIST
74948: PUSH
74949: LD_VAR 0 1
74953: PUSH
74954: LD_INT 4
74956: PLUS
74957: PUSH
74958: LD_VAR 0 2
74962: PUSH
74963: LD_INT 4
74965: PLUS
74966: PUSH
74967: LD_INT 5
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: LIST
74974: PUSH
74975: EMPTY
74976: LIST
74977: LIST
74978: LIST
74979: LIST
74980: LIST
74981: ST_TO_ADDR
// end ; 2 :
74982: GO 75541
74984: LD_INT 2
74986: DOUBLE
74987: EQUAL
74988: IFTRUE 74992
74990: GO 75121
74992: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74993: LD_ADDR_VAR 0 5
74997: PUSH
74998: LD_VAR 0 1
75002: PUSH
75003: LD_VAR 0 2
75007: PUSH
75008: LD_INT 3
75010: MINUS
75011: PUSH
75012: LD_INT 3
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: LIST
75019: PUSH
75020: LD_VAR 0 1
75024: PUSH
75025: LD_INT 4
75027: PLUS
75028: PUSH
75029: LD_VAR 0 2
75033: PUSH
75034: LD_INT 4
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: LIST
75041: PUSH
75042: LD_VAR 0 1
75046: PUSH
75047: LD_VAR 0 2
75051: PUSH
75052: LD_INT 4
75054: PLUS
75055: PUSH
75056: LD_INT 0
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: LIST
75063: PUSH
75064: LD_VAR 0 1
75068: PUSH
75069: LD_INT 3
75071: MINUS
75072: PUSH
75073: LD_VAR 0 2
75077: PUSH
75078: LD_INT 1
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: LIST
75085: PUSH
75086: LD_VAR 0 1
75090: PUSH
75091: LD_INT 4
75093: MINUS
75094: PUSH
75095: LD_VAR 0 2
75099: PUSH
75100: LD_INT 4
75102: MINUS
75103: PUSH
75104: LD_INT 2
75106: PUSH
75107: EMPTY
75108: LIST
75109: LIST
75110: LIST
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: ST_TO_ADDR
// end ; 3 :
75119: GO 75541
75121: LD_INT 3
75123: DOUBLE
75124: EQUAL
75125: IFTRUE 75129
75127: GO 75262
75129: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75130: LD_ADDR_VAR 0 5
75134: PUSH
75135: LD_VAR 0 1
75139: PUSH
75140: LD_INT 3
75142: PLUS
75143: PUSH
75144: LD_VAR 0 2
75148: PUSH
75149: LD_INT 4
75151: PUSH
75152: EMPTY
75153: LIST
75154: LIST
75155: LIST
75156: PUSH
75157: LD_VAR 0 1
75161: PUSH
75162: LD_INT 4
75164: PLUS
75165: PUSH
75166: LD_VAR 0 2
75170: PUSH
75171: LD_INT 4
75173: PLUS
75174: PUSH
75175: LD_INT 5
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: LIST
75182: PUSH
75183: LD_VAR 0 1
75187: PUSH
75188: LD_INT 4
75190: MINUS
75191: PUSH
75192: LD_VAR 0 2
75196: PUSH
75197: LD_INT 1
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: LIST
75204: PUSH
75205: LD_VAR 0 1
75209: PUSH
75210: LD_VAR 0 2
75214: PUSH
75215: LD_INT 4
75217: MINUS
75218: PUSH
75219: LD_INT 3
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: LIST
75226: PUSH
75227: LD_VAR 0 1
75231: PUSH
75232: LD_INT 3
75234: MINUS
75235: PUSH
75236: LD_VAR 0 2
75240: PUSH
75241: LD_INT 3
75243: MINUS
75244: PUSH
75245: LD_INT 2
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: LIST
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: ST_TO_ADDR
// end ; 4 :
75260: GO 75541
75262: LD_INT 4
75264: DOUBLE
75265: EQUAL
75266: IFTRUE 75270
75268: GO 75403
75270: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75271: LD_ADDR_VAR 0 5
75275: PUSH
75276: LD_VAR 0 1
75280: PUSH
75281: LD_VAR 0 2
75285: PUSH
75286: LD_INT 4
75288: PLUS
75289: PUSH
75290: LD_INT 0
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: LIST
75297: PUSH
75298: LD_VAR 0 1
75302: PUSH
75303: LD_INT 3
75305: PLUS
75306: PUSH
75307: LD_VAR 0 2
75311: PUSH
75312: LD_INT 3
75314: PLUS
75315: PUSH
75316: LD_INT 5
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: LIST
75323: PUSH
75324: LD_VAR 0 1
75328: PUSH
75329: LD_INT 4
75331: PLUS
75332: PUSH
75333: LD_VAR 0 2
75337: PUSH
75338: LD_INT 4
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: LIST
75345: PUSH
75346: LD_VAR 0 1
75350: PUSH
75351: LD_VAR 0 2
75355: PUSH
75356: LD_INT 3
75358: MINUS
75359: PUSH
75360: LD_INT 3
75362: PUSH
75363: EMPTY
75364: LIST
75365: LIST
75366: LIST
75367: PUSH
75368: LD_VAR 0 1
75372: PUSH
75373: LD_INT 4
75375: MINUS
75376: PUSH
75377: LD_VAR 0 2
75381: PUSH
75382: LD_INT 4
75384: MINUS
75385: PUSH
75386: LD_INT 2
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: LIST
75393: PUSH
75394: EMPTY
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: ST_TO_ADDR
// end ; 5 :
75401: GO 75541
75403: LD_INT 5
75405: DOUBLE
75406: EQUAL
75407: IFTRUE 75411
75409: GO 75540
75411: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75412: LD_ADDR_VAR 0 5
75416: PUSH
75417: LD_VAR 0 1
75421: PUSH
75422: LD_INT 4
75424: MINUS
75425: PUSH
75426: LD_VAR 0 2
75430: PUSH
75431: LD_INT 1
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: PUSH
75439: LD_VAR 0 1
75443: PUSH
75444: LD_VAR 0 2
75448: PUSH
75449: LD_INT 4
75451: MINUS
75452: PUSH
75453: LD_INT 3
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: LIST
75460: PUSH
75461: LD_VAR 0 1
75465: PUSH
75466: LD_INT 4
75468: PLUS
75469: PUSH
75470: LD_VAR 0 2
75474: PUSH
75475: LD_INT 4
75477: PLUS
75478: PUSH
75479: LD_INT 5
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: LIST
75486: PUSH
75487: LD_VAR 0 1
75491: PUSH
75492: LD_INT 3
75494: PLUS
75495: PUSH
75496: LD_VAR 0 2
75500: PUSH
75501: LD_INT 4
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: LIST
75508: PUSH
75509: LD_VAR 0 1
75513: PUSH
75514: LD_VAR 0 2
75518: PUSH
75519: LD_INT 3
75521: PLUS
75522: PUSH
75523: LD_INT 0
75525: PUSH
75526: EMPTY
75527: LIST
75528: LIST
75529: LIST
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: LIST
75535: LIST
75536: LIST
75537: ST_TO_ADDR
// end ; end ;
75538: GO 75541
75540: POP
// result := list ;
75541: LD_ADDR_VAR 0 4
75545: PUSH
75546: LD_VAR 0 5
75550: ST_TO_ADDR
// end ;
75551: LD_VAR 0 4
75555: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75556: LD_INT 0
75558: PPUSH
75559: PPUSH
75560: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75561: LD_VAR 0 1
75565: NOT
75566: PUSH
75567: LD_VAR 0 2
75571: PUSH
75572: LD_INT 1
75574: PUSH
75575: LD_INT 2
75577: PUSH
75578: LD_INT 3
75580: PUSH
75581: LD_INT 4
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: LIST
75588: LIST
75589: IN
75590: NOT
75591: OR
75592: IFFALSE 75596
// exit ;
75594: GO 75688
// tmp := [ ] ;
75596: LD_ADDR_VAR 0 5
75600: PUSH
75601: EMPTY
75602: ST_TO_ADDR
// for i in units do
75603: LD_ADDR_VAR 0 4
75607: PUSH
75608: LD_VAR 0 1
75612: PUSH
75613: FOR_IN
75614: IFFALSE 75657
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
75616: LD_ADDR_VAR 0 5
75620: PUSH
75621: LD_VAR 0 5
75625: PPUSH
75626: LD_VAR 0 5
75630: PUSH
75631: LD_INT 1
75633: PLUS
75634: PPUSH
75635: LD_VAR 0 4
75639: PPUSH
75640: LD_VAR 0 2
75644: PPUSH
75645: CALL_OW 259
75649: PPUSH
75650: CALL_OW 2
75654: ST_TO_ADDR
75655: GO 75613
75657: POP
75658: POP
// if not tmp then
75659: LD_VAR 0 5
75663: NOT
75664: IFFALSE 75668
// exit ;
75666: GO 75688
// result := SortListByListDesc ( units , tmp ) ;
75668: LD_ADDR_VAR 0 3
75672: PUSH
75673: LD_VAR 0 1
75677: PPUSH
75678: LD_VAR 0 5
75682: PPUSH
75683: CALL_OW 77
75687: ST_TO_ADDR
// end ;
75688: LD_VAR 0 3
75692: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75693: LD_INT 0
75695: PPUSH
75696: PPUSH
75697: PPUSH
// result := false ;
75698: LD_ADDR_VAR 0 3
75702: PUSH
75703: LD_INT 0
75705: ST_TO_ADDR
// x := GetX ( building ) ;
75706: LD_ADDR_VAR 0 4
75710: PUSH
75711: LD_VAR 0 2
75715: PPUSH
75716: CALL_OW 250
75720: ST_TO_ADDR
// y := GetY ( building ) ;
75721: LD_ADDR_VAR 0 5
75725: PUSH
75726: LD_VAR 0 2
75730: PPUSH
75731: CALL_OW 251
75735: ST_TO_ADDR
// if not building or not x or not y then
75736: LD_VAR 0 2
75740: NOT
75741: PUSH
75742: LD_VAR 0 4
75746: NOT
75747: OR
75748: PUSH
75749: LD_VAR 0 5
75753: NOT
75754: OR
75755: IFFALSE 75759
// exit ;
75757: GO 75851
// if GetTaskList ( unit ) then
75759: LD_VAR 0 1
75763: PPUSH
75764: CALL_OW 437
75768: IFFALSE 75851
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75770: LD_STRING e
75772: PUSH
75773: LD_VAR 0 1
75777: PPUSH
75778: CALL_OW 437
75782: PUSH
75783: LD_INT 1
75785: ARRAY
75786: PUSH
75787: LD_INT 1
75789: ARRAY
75790: EQUAL
75791: PUSH
75792: LD_VAR 0 4
75796: PUSH
75797: LD_VAR 0 1
75801: PPUSH
75802: CALL_OW 437
75806: PUSH
75807: LD_INT 1
75809: ARRAY
75810: PUSH
75811: LD_INT 2
75813: ARRAY
75814: EQUAL
75815: AND
75816: PUSH
75817: LD_VAR 0 5
75821: PUSH
75822: LD_VAR 0 1
75826: PPUSH
75827: CALL_OW 437
75831: PUSH
75832: LD_INT 1
75834: ARRAY
75835: PUSH
75836: LD_INT 3
75838: ARRAY
75839: EQUAL
75840: AND
75841: IFFALSE 75851
// result := true end ;
75843: LD_ADDR_VAR 0 3
75847: PUSH
75848: LD_INT 1
75850: ST_TO_ADDR
// end ;
75851: LD_VAR 0 3
75855: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75856: LD_INT 0
75858: PPUSH
// result := false ;
75859: LD_ADDR_VAR 0 4
75863: PUSH
75864: LD_INT 0
75866: ST_TO_ADDR
// if GetTaskList ( unit ) then
75867: LD_VAR 0 1
75871: PPUSH
75872: CALL_OW 437
75876: IFFALSE 75959
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75878: LD_STRING M
75880: PUSH
75881: LD_VAR 0 1
75885: PPUSH
75886: CALL_OW 437
75890: PUSH
75891: LD_INT 1
75893: ARRAY
75894: PUSH
75895: LD_INT 1
75897: ARRAY
75898: EQUAL
75899: PUSH
75900: LD_VAR 0 2
75904: PUSH
75905: LD_VAR 0 1
75909: PPUSH
75910: CALL_OW 437
75914: PUSH
75915: LD_INT 1
75917: ARRAY
75918: PUSH
75919: LD_INT 2
75921: ARRAY
75922: EQUAL
75923: AND
75924: PUSH
75925: LD_VAR 0 3
75929: PUSH
75930: LD_VAR 0 1
75934: PPUSH
75935: CALL_OW 437
75939: PUSH
75940: LD_INT 1
75942: ARRAY
75943: PUSH
75944: LD_INT 3
75946: ARRAY
75947: EQUAL
75948: AND
75949: IFFALSE 75959
// result := true ;
75951: LD_ADDR_VAR 0 4
75955: PUSH
75956: LD_INT 1
75958: ST_TO_ADDR
// end ; end ;
75959: LD_VAR 0 4
75963: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75964: LD_INT 0
75966: PPUSH
75967: PPUSH
75968: PPUSH
75969: PPUSH
// if not unit or not area then
75970: LD_VAR 0 1
75974: NOT
75975: PUSH
75976: LD_VAR 0 2
75980: NOT
75981: OR
75982: IFFALSE 75986
// exit ;
75984: GO 76150
// tmp := AreaToList ( area , i ) ;
75986: LD_ADDR_VAR 0 6
75990: PUSH
75991: LD_VAR 0 2
75995: PPUSH
75996: LD_VAR 0 5
76000: PPUSH
76001: CALL_OW 517
76005: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76006: LD_ADDR_VAR 0 5
76010: PUSH
76011: DOUBLE
76012: LD_INT 1
76014: DEC
76015: ST_TO_ADDR
76016: LD_VAR 0 6
76020: PUSH
76021: LD_INT 1
76023: ARRAY
76024: PUSH
76025: FOR_TO
76026: IFFALSE 76148
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76028: LD_ADDR_VAR 0 7
76032: PUSH
76033: LD_VAR 0 6
76037: PUSH
76038: LD_INT 1
76040: ARRAY
76041: PUSH
76042: LD_VAR 0 5
76046: ARRAY
76047: PUSH
76048: LD_VAR 0 6
76052: PUSH
76053: LD_INT 2
76055: ARRAY
76056: PUSH
76057: LD_VAR 0 5
76061: ARRAY
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
76067: LD_VAR 0 7
76071: PUSH
76072: LD_INT 1
76074: ARRAY
76075: PPUSH
76076: LD_VAR 0 7
76080: PUSH
76081: LD_INT 2
76083: ARRAY
76084: PPUSH
76085: CALL_OW 428
76089: PUSH
76090: LD_INT 0
76092: EQUAL
76093: IFFALSE 76146
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76095: LD_VAR 0 1
76099: PPUSH
76100: LD_VAR 0 7
76104: PUSH
76105: LD_INT 1
76107: ARRAY
76108: PPUSH
76109: LD_VAR 0 7
76113: PUSH
76114: LD_INT 2
76116: ARRAY
76117: PPUSH
76118: LD_VAR 0 3
76122: PPUSH
76123: CALL_OW 48
// result := IsPlaced ( unit ) ;
76127: LD_ADDR_VAR 0 4
76131: PUSH
76132: LD_VAR 0 1
76136: PPUSH
76137: CALL_OW 305
76141: ST_TO_ADDR
// exit ;
76142: POP
76143: POP
76144: GO 76150
// end ; end ;
76146: GO 76025
76148: POP
76149: POP
// end ;
76150: LD_VAR 0 4
76154: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76155: LD_INT 0
76157: PPUSH
76158: PPUSH
76159: PPUSH
// if not side or side > 8 then
76160: LD_VAR 0 1
76164: NOT
76165: PUSH
76166: LD_VAR 0 1
76170: PUSH
76171: LD_INT 8
76173: GREATER
76174: OR
76175: IFFALSE 76179
// exit ;
76177: GO 76366
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76179: LD_ADDR_VAR 0 4
76183: PUSH
76184: LD_INT 22
76186: PUSH
76187: LD_VAR 0 1
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: PUSH
76196: LD_INT 21
76198: PUSH
76199: LD_INT 3
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: PUSH
76206: EMPTY
76207: LIST
76208: LIST
76209: PPUSH
76210: CALL_OW 69
76214: ST_TO_ADDR
// if not tmp then
76215: LD_VAR 0 4
76219: NOT
76220: IFFALSE 76224
// exit ;
76222: GO 76366
// enable_addtolog := true ;
76224: LD_ADDR_OWVAR 81
76228: PUSH
76229: LD_INT 1
76231: ST_TO_ADDR
// AddToLog ( [ ) ;
76232: LD_STRING [
76234: PPUSH
76235: CALL_OW 561
// for i in tmp do
76239: LD_ADDR_VAR 0 3
76243: PUSH
76244: LD_VAR 0 4
76248: PUSH
76249: FOR_IN
76250: IFFALSE 76357
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76252: LD_STRING [
76254: PUSH
76255: LD_VAR 0 3
76259: PPUSH
76260: CALL_OW 266
76264: STR
76265: PUSH
76266: LD_STRING , 
76268: STR
76269: PUSH
76270: LD_VAR 0 3
76274: PPUSH
76275: CALL_OW 250
76279: STR
76280: PUSH
76281: LD_STRING , 
76283: STR
76284: PUSH
76285: LD_VAR 0 3
76289: PPUSH
76290: CALL_OW 251
76294: STR
76295: PUSH
76296: LD_STRING , 
76298: STR
76299: PUSH
76300: LD_VAR 0 3
76304: PPUSH
76305: CALL_OW 254
76309: STR
76310: PUSH
76311: LD_STRING , 
76313: STR
76314: PUSH
76315: LD_VAR 0 3
76319: PPUSH
76320: LD_INT 1
76322: PPUSH
76323: CALL_OW 268
76327: STR
76328: PUSH
76329: LD_STRING , 
76331: STR
76332: PUSH
76333: LD_VAR 0 3
76337: PPUSH
76338: LD_INT 2
76340: PPUSH
76341: CALL_OW 268
76345: STR
76346: PUSH
76347: LD_STRING ],
76349: STR
76350: PPUSH
76351: CALL_OW 561
// end ;
76355: GO 76249
76357: POP
76358: POP
// AddToLog ( ]; ) ;
76359: LD_STRING ];
76361: PPUSH
76362: CALL_OW 561
// end ;
76366: LD_VAR 0 2
76370: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76371: LD_INT 0
76373: PPUSH
76374: PPUSH
76375: PPUSH
76376: PPUSH
76377: PPUSH
// if not area or not rate or not max then
76378: LD_VAR 0 1
76382: NOT
76383: PUSH
76384: LD_VAR 0 2
76388: NOT
76389: OR
76390: PUSH
76391: LD_VAR 0 4
76395: NOT
76396: OR
76397: IFFALSE 76401
// exit ;
76399: GO 76593
// while 1 do
76401: LD_INT 1
76403: IFFALSE 76593
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76405: LD_ADDR_VAR 0 9
76409: PUSH
76410: LD_VAR 0 1
76414: PPUSH
76415: LD_INT 1
76417: PPUSH
76418: CALL_OW 287
76422: PUSH
76423: LD_INT 10
76425: MUL
76426: ST_TO_ADDR
// r := rate / 10 ;
76427: LD_ADDR_VAR 0 7
76431: PUSH
76432: LD_VAR 0 2
76436: PUSH
76437: LD_INT 10
76439: DIVREAL
76440: ST_TO_ADDR
// time := 1 1$00 ;
76441: LD_ADDR_VAR 0 8
76445: PUSH
76446: LD_INT 2100
76448: ST_TO_ADDR
// if amount < min then
76449: LD_VAR 0 9
76453: PUSH
76454: LD_VAR 0 3
76458: LESS
76459: IFFALSE 76477
// r := r * 2 else
76461: LD_ADDR_VAR 0 7
76465: PUSH
76466: LD_VAR 0 7
76470: PUSH
76471: LD_INT 2
76473: MUL
76474: ST_TO_ADDR
76475: GO 76503
// if amount > max then
76477: LD_VAR 0 9
76481: PUSH
76482: LD_VAR 0 4
76486: GREATER
76487: IFFALSE 76503
// r := r / 2 ;
76489: LD_ADDR_VAR 0 7
76493: PUSH
76494: LD_VAR 0 7
76498: PUSH
76499: LD_INT 2
76501: DIVREAL
76502: ST_TO_ADDR
// time := time / r ;
76503: LD_ADDR_VAR 0 8
76507: PUSH
76508: LD_VAR 0 8
76512: PUSH
76513: LD_VAR 0 7
76517: DIVREAL
76518: ST_TO_ADDR
// if time < 0 then
76519: LD_VAR 0 8
76523: PUSH
76524: LD_INT 0
76526: LESS
76527: IFFALSE 76544
// time := time * - 1 ;
76529: LD_ADDR_VAR 0 8
76533: PUSH
76534: LD_VAR 0 8
76538: PUSH
76539: LD_INT 1
76541: NEG
76542: MUL
76543: ST_TO_ADDR
// wait ( time ) ;
76544: LD_VAR 0 8
76548: PPUSH
76549: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
76553: LD_INT 35
76555: PPUSH
76556: LD_INT 875
76558: PPUSH
76559: CALL_OW 12
76563: PPUSH
76564: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76568: LD_INT 1
76570: PPUSH
76571: LD_INT 5
76573: PPUSH
76574: CALL_OW 12
76578: PPUSH
76579: LD_VAR 0 1
76583: PPUSH
76584: LD_INT 1
76586: PPUSH
76587: CALL_OW 55
// end ;
76591: GO 76401
// end ;
76593: LD_VAR 0 5
76597: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76598: LD_INT 0
76600: PPUSH
76601: PPUSH
76602: PPUSH
76603: PPUSH
76604: PPUSH
76605: PPUSH
76606: PPUSH
76607: PPUSH
// if not turrets or not factories then
76608: LD_VAR 0 1
76612: NOT
76613: PUSH
76614: LD_VAR 0 2
76618: NOT
76619: OR
76620: IFFALSE 76624
// exit ;
76622: GO 76931
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76624: LD_ADDR_VAR 0 10
76628: PUSH
76629: LD_INT 5
76631: PUSH
76632: LD_INT 6
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 2
76641: PUSH
76642: LD_INT 4
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: LD_INT 3
76651: PUSH
76652: LD_INT 5
76654: PUSH
76655: EMPTY
76656: LIST
76657: LIST
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: LIST
76663: PUSH
76664: LD_INT 24
76666: PUSH
76667: LD_INT 25
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 23
76676: PUSH
76677: LD_INT 27
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: PUSH
76684: EMPTY
76685: LIST
76686: LIST
76687: PUSH
76688: LD_INT 42
76690: PUSH
76691: LD_INT 43
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 44
76700: PUSH
76701: LD_INT 46
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: LD_INT 45
76710: PUSH
76711: LD_INT 47
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: LIST
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: LIST
76727: ST_TO_ADDR
// result := [ ] ;
76728: LD_ADDR_VAR 0 3
76732: PUSH
76733: EMPTY
76734: ST_TO_ADDR
// for i in turrets do
76735: LD_ADDR_VAR 0 4
76739: PUSH
76740: LD_VAR 0 1
76744: PUSH
76745: FOR_IN
76746: IFFALSE 76929
// begin nat := GetNation ( i ) ;
76748: LD_ADDR_VAR 0 7
76752: PUSH
76753: LD_VAR 0 4
76757: PPUSH
76758: CALL_OW 248
76762: ST_TO_ADDR
// weapon := 0 ;
76763: LD_ADDR_VAR 0 8
76767: PUSH
76768: LD_INT 0
76770: ST_TO_ADDR
// if not nat then
76771: LD_VAR 0 7
76775: NOT
76776: IFFALSE 76780
// continue ;
76778: GO 76745
// for j in list [ nat ] do
76780: LD_ADDR_VAR 0 5
76784: PUSH
76785: LD_VAR 0 10
76789: PUSH
76790: LD_VAR 0 7
76794: ARRAY
76795: PUSH
76796: FOR_IN
76797: IFFALSE 76838
// if GetBWeapon ( i ) = j [ 1 ] then
76799: LD_VAR 0 4
76803: PPUSH
76804: CALL_OW 269
76808: PUSH
76809: LD_VAR 0 5
76813: PUSH
76814: LD_INT 1
76816: ARRAY
76817: EQUAL
76818: IFFALSE 76836
// begin weapon := j [ 2 ] ;
76820: LD_ADDR_VAR 0 8
76824: PUSH
76825: LD_VAR 0 5
76829: PUSH
76830: LD_INT 2
76832: ARRAY
76833: ST_TO_ADDR
// break ;
76834: GO 76838
// end ;
76836: GO 76796
76838: POP
76839: POP
// if not weapon then
76840: LD_VAR 0 8
76844: NOT
76845: IFFALSE 76849
// continue ;
76847: GO 76745
// for k in factories do
76849: LD_ADDR_VAR 0 6
76853: PUSH
76854: LD_VAR 0 2
76858: PUSH
76859: FOR_IN
76860: IFFALSE 76925
// begin weapons := AvailableWeaponList ( k ) ;
76862: LD_ADDR_VAR 0 9
76866: PUSH
76867: LD_VAR 0 6
76871: PPUSH
76872: CALL_OW 478
76876: ST_TO_ADDR
// if not weapons then
76877: LD_VAR 0 9
76881: NOT
76882: IFFALSE 76886
// continue ;
76884: GO 76859
// if weapon in weapons then
76886: LD_VAR 0 8
76890: PUSH
76891: LD_VAR 0 9
76895: IN
76896: IFFALSE 76923
// begin result := [ i , weapon ] ;
76898: LD_ADDR_VAR 0 3
76902: PUSH
76903: LD_VAR 0 4
76907: PUSH
76908: LD_VAR 0 8
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: ST_TO_ADDR
// exit ;
76917: POP
76918: POP
76919: POP
76920: POP
76921: GO 76931
// end ; end ;
76923: GO 76859
76925: POP
76926: POP
// end ;
76927: GO 76745
76929: POP
76930: POP
// end ;
76931: LD_VAR 0 3
76935: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76936: LD_INT 0
76938: PPUSH
// if not side or side > 8 then
76939: LD_VAR 0 3
76943: NOT
76944: PUSH
76945: LD_VAR 0 3
76949: PUSH
76950: LD_INT 8
76952: GREATER
76953: OR
76954: IFFALSE 76958
// exit ;
76956: GO 77017
// if not range then
76958: LD_VAR 0 4
76962: NOT
76963: IFFALSE 76974
// range := - 12 ;
76965: LD_ADDR_VAR 0 4
76969: PUSH
76970: LD_INT 12
76972: NEG
76973: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76974: LD_VAR 0 1
76978: PPUSH
76979: LD_VAR 0 2
76983: PPUSH
76984: LD_VAR 0 3
76988: PPUSH
76989: LD_VAR 0 4
76993: PPUSH
76994: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76998: LD_VAR 0 1
77002: PPUSH
77003: LD_VAR 0 2
77007: PPUSH
77008: LD_VAR 0 3
77012: PPUSH
77013: CALL_OW 331
// end ;
77017: LD_VAR 0 5
77021: RET
// export function Video ( mode ) ; begin
77022: LD_INT 0
77024: PPUSH
// ingame_video = mode ;
77025: LD_ADDR_OWVAR 52
77029: PUSH
77030: LD_VAR 0 1
77034: ST_TO_ADDR
// interface_hidden = mode ;
77035: LD_ADDR_OWVAR 54
77039: PUSH
77040: LD_VAR 0 1
77044: ST_TO_ADDR
// end ;
77045: LD_VAR 0 2
77049: RET
// export function Join ( array , element ) ; begin
77050: LD_INT 0
77052: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77053: LD_ADDR_VAR 0 3
77057: PUSH
77058: LD_VAR 0 1
77062: PPUSH
77063: LD_VAR 0 1
77067: PUSH
77068: LD_INT 1
77070: PLUS
77071: PPUSH
77072: LD_VAR 0 2
77076: PPUSH
77077: CALL_OW 1
77081: ST_TO_ADDR
// end ;
77082: LD_VAR 0 3
77086: RET
// export function JoinUnion ( array , element ) ; begin
77087: LD_INT 0
77089: PPUSH
// result := array union element ;
77090: LD_ADDR_VAR 0 3
77094: PUSH
77095: LD_VAR 0 1
77099: PUSH
77100: LD_VAR 0 2
77104: UNION
77105: ST_TO_ADDR
// end ;
77106: LD_VAR 0 3
77110: RET
// export function GetBehemoths ( side ) ; begin
77111: LD_INT 0
77113: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
77114: LD_ADDR_VAR 0 2
77118: PUSH
77119: LD_INT 22
77121: PUSH
77122: LD_VAR 0 1
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 31
77133: PUSH
77134: LD_INT 25
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PPUSH
77145: CALL_OW 69
77149: ST_TO_ADDR
// end ;
77150: LD_VAR 0 2
77154: RET
// export function Shuffle ( array ) ; var i , index ; begin
77155: LD_INT 0
77157: PPUSH
77158: PPUSH
77159: PPUSH
// result := [ ] ;
77160: LD_ADDR_VAR 0 2
77164: PUSH
77165: EMPTY
77166: ST_TO_ADDR
// if not array then
77167: LD_VAR 0 1
77171: NOT
77172: IFFALSE 77176
// exit ;
77174: GO 77275
// Randomize ;
77176: CALL_OW 10
// for i = array downto 1 do
77180: LD_ADDR_VAR 0 3
77184: PUSH
77185: DOUBLE
77186: LD_VAR 0 1
77190: INC
77191: ST_TO_ADDR
77192: LD_INT 1
77194: PUSH
77195: FOR_DOWNTO
77196: IFFALSE 77273
// begin index := rand ( 1 , array ) ;
77198: LD_ADDR_VAR 0 4
77202: PUSH
77203: LD_INT 1
77205: PPUSH
77206: LD_VAR 0 1
77210: PPUSH
77211: CALL_OW 12
77215: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77216: LD_ADDR_VAR 0 2
77220: PUSH
77221: LD_VAR 0 2
77225: PPUSH
77226: LD_VAR 0 2
77230: PUSH
77231: LD_INT 1
77233: PLUS
77234: PPUSH
77235: LD_VAR 0 1
77239: PUSH
77240: LD_VAR 0 4
77244: ARRAY
77245: PPUSH
77246: CALL_OW 2
77250: ST_TO_ADDR
// array := Delete ( array , index ) ;
77251: LD_ADDR_VAR 0 1
77255: PUSH
77256: LD_VAR 0 1
77260: PPUSH
77261: LD_VAR 0 4
77265: PPUSH
77266: CALL_OW 3
77270: ST_TO_ADDR
// end ;
77271: GO 77195
77273: POP
77274: POP
// end ;
77275: LD_VAR 0 2
77279: RET
// export function GetBaseMaterials ( base ) ; begin
77280: LD_INT 0
77282: PPUSH
// result := [ 0 , 0 , 0 ] ;
77283: LD_ADDR_VAR 0 2
77287: PUSH
77288: LD_INT 0
77290: PUSH
77291: LD_INT 0
77293: PUSH
77294: LD_INT 0
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: LIST
77301: ST_TO_ADDR
// if not base then
77302: LD_VAR 0 1
77306: NOT
77307: IFFALSE 77311
// exit ;
77309: GO 77360
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77311: LD_ADDR_VAR 0 2
77315: PUSH
77316: LD_VAR 0 1
77320: PPUSH
77321: LD_INT 1
77323: PPUSH
77324: CALL_OW 275
77328: PUSH
77329: LD_VAR 0 1
77333: PPUSH
77334: LD_INT 2
77336: PPUSH
77337: CALL_OW 275
77341: PUSH
77342: LD_VAR 0 1
77346: PPUSH
77347: LD_INT 3
77349: PPUSH
77350: CALL_OW 275
77354: PUSH
77355: EMPTY
77356: LIST
77357: LIST
77358: LIST
77359: ST_TO_ADDR
// end ;
77360: LD_VAR 0 2
77364: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77365: LD_INT 0
77367: PPUSH
77368: PPUSH
// result := array ;
77369: LD_ADDR_VAR 0 3
77373: PUSH
77374: LD_VAR 0 1
77378: ST_TO_ADDR
// if size > 0 then
77379: LD_VAR 0 2
77383: PUSH
77384: LD_INT 0
77386: GREATER
77387: IFFALSE 77433
// for i := array downto size do
77389: LD_ADDR_VAR 0 4
77393: PUSH
77394: DOUBLE
77395: LD_VAR 0 1
77399: INC
77400: ST_TO_ADDR
77401: LD_VAR 0 2
77405: PUSH
77406: FOR_DOWNTO
77407: IFFALSE 77431
// result := Delete ( result , result ) ;
77409: LD_ADDR_VAR 0 3
77413: PUSH
77414: LD_VAR 0 3
77418: PPUSH
77419: LD_VAR 0 3
77423: PPUSH
77424: CALL_OW 3
77428: ST_TO_ADDR
77429: GO 77406
77431: POP
77432: POP
// end ;
77433: LD_VAR 0 3
77437: RET
// export function ComExit ( unit ) ; var tmp ; begin
77438: LD_INT 0
77440: PPUSH
77441: PPUSH
// if not IsInUnit ( unit ) then
77442: LD_VAR 0 1
77446: PPUSH
77447: CALL_OW 310
77451: NOT
77452: IFFALSE 77456
// exit ;
77454: GO 77516
// tmp := IsInUnit ( unit ) ;
77456: LD_ADDR_VAR 0 3
77460: PUSH
77461: LD_VAR 0 1
77465: PPUSH
77466: CALL_OW 310
77470: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77471: LD_VAR 0 3
77475: PPUSH
77476: CALL_OW 247
77480: PUSH
77481: LD_INT 2
77483: EQUAL
77484: IFFALSE 77497
// ComExitVehicle ( unit ) else
77486: LD_VAR 0 1
77490: PPUSH
77491: CALL_OW 121
77495: GO 77506
// ComExitBuilding ( unit ) ;
77497: LD_VAR 0 1
77501: PPUSH
77502: CALL_OW 122
// result := tmp ;
77506: LD_ADDR_VAR 0 2
77510: PUSH
77511: LD_VAR 0 3
77515: ST_TO_ADDR
// end ;
77516: LD_VAR 0 2
77520: RET
// export function ResetHc ; begin
77521: LD_INT 0
77523: PPUSH
// InitHc ;
77524: CALL_OW 19
// hc_importance := 0 ;
77528: LD_ADDR_OWVAR 32
77532: PUSH
77533: LD_INT 0
77535: ST_TO_ADDR
// end ;
77536: LD_VAR 0 1
77540: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77541: LD_INT 0
77543: PPUSH
77544: PPUSH
77545: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77546: LD_ADDR_VAR 0 6
77550: PUSH
77551: LD_VAR 0 1
77555: PUSH
77556: LD_VAR 0 3
77560: PLUS
77561: PUSH
77562: LD_INT 2
77564: DIV
77565: ST_TO_ADDR
// if _x < 0 then
77566: LD_VAR 0 6
77570: PUSH
77571: LD_INT 0
77573: LESS
77574: IFFALSE 77591
// _x := _x * - 1 ;
77576: LD_ADDR_VAR 0 6
77580: PUSH
77581: LD_VAR 0 6
77585: PUSH
77586: LD_INT 1
77588: NEG
77589: MUL
77590: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77591: LD_ADDR_VAR 0 7
77595: PUSH
77596: LD_VAR 0 2
77600: PUSH
77601: LD_VAR 0 4
77605: PLUS
77606: PUSH
77607: LD_INT 2
77609: DIV
77610: ST_TO_ADDR
// if _y < 0 then
77611: LD_VAR 0 7
77615: PUSH
77616: LD_INT 0
77618: LESS
77619: IFFALSE 77636
// _y := _y * - 1 ;
77621: LD_ADDR_VAR 0 7
77625: PUSH
77626: LD_VAR 0 7
77630: PUSH
77631: LD_INT 1
77633: NEG
77634: MUL
77635: ST_TO_ADDR
// result := [ _x , _y ] ;
77636: LD_ADDR_VAR 0 5
77640: PUSH
77641: LD_VAR 0 6
77645: PUSH
77646: LD_VAR 0 7
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: ST_TO_ADDR
// end ;
77655: LD_VAR 0 5
77659: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77660: LD_INT 0
77662: PPUSH
77663: PPUSH
77664: PPUSH
77665: PPUSH
// task := GetTaskList ( unit ) ;
77666: LD_ADDR_VAR 0 7
77670: PUSH
77671: LD_VAR 0 1
77675: PPUSH
77676: CALL_OW 437
77680: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77681: LD_VAR 0 7
77685: NOT
77686: PUSH
77687: LD_VAR 0 1
77691: PPUSH
77692: LD_VAR 0 2
77696: PPUSH
77697: CALL_OW 308
77701: NOT
77702: AND
77703: IFFALSE 77707
// exit ;
77705: GO 77825
// if IsInArea ( unit , area ) then
77707: LD_VAR 0 1
77711: PPUSH
77712: LD_VAR 0 2
77716: PPUSH
77717: CALL_OW 308
77721: IFFALSE 77739
// begin ComMoveToArea ( unit , goAway ) ;
77723: LD_VAR 0 1
77727: PPUSH
77728: LD_VAR 0 3
77732: PPUSH
77733: CALL_OW 113
// exit ;
77737: GO 77825
// end ; if task [ 1 ] [ 1 ] <> M then
77739: LD_VAR 0 7
77743: PUSH
77744: LD_INT 1
77746: ARRAY
77747: PUSH
77748: LD_INT 1
77750: ARRAY
77751: PUSH
77752: LD_STRING M
77754: NONEQUAL
77755: IFFALSE 77759
// exit ;
77757: GO 77825
// x := task [ 1 ] [ 2 ] ;
77759: LD_ADDR_VAR 0 5
77763: PUSH
77764: LD_VAR 0 7
77768: PUSH
77769: LD_INT 1
77771: ARRAY
77772: PUSH
77773: LD_INT 2
77775: ARRAY
77776: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77777: LD_ADDR_VAR 0 6
77781: PUSH
77782: LD_VAR 0 7
77786: PUSH
77787: LD_INT 1
77789: ARRAY
77790: PUSH
77791: LD_INT 3
77793: ARRAY
77794: ST_TO_ADDR
// if InArea ( x , y , area ) then
77795: LD_VAR 0 5
77799: PPUSH
77800: LD_VAR 0 6
77804: PPUSH
77805: LD_VAR 0 2
77809: PPUSH
77810: CALL_OW 309
77814: IFFALSE 77825
// ComStop ( unit ) ;
77816: LD_VAR 0 1
77820: PPUSH
77821: CALL_OW 141
// end ;
77825: LD_VAR 0 4
77829: RET
// export function Abs ( value ) ; begin
77830: LD_INT 0
77832: PPUSH
// result := value ;
77833: LD_ADDR_VAR 0 2
77837: PUSH
77838: LD_VAR 0 1
77842: ST_TO_ADDR
// if value < 0 then
77843: LD_VAR 0 1
77847: PUSH
77848: LD_INT 0
77850: LESS
77851: IFFALSE 77868
// result := value * - 1 ;
77853: LD_ADDR_VAR 0 2
77857: PUSH
77858: LD_VAR 0 1
77862: PUSH
77863: LD_INT 1
77865: NEG
77866: MUL
77867: ST_TO_ADDR
// end ;
77868: LD_VAR 0 2
77872: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77873: LD_INT 0
77875: PPUSH
77876: PPUSH
77877: PPUSH
77878: PPUSH
77879: PPUSH
77880: PPUSH
77881: PPUSH
77882: PPUSH
// if not unit or not building then
77883: LD_VAR 0 1
77887: NOT
77888: PUSH
77889: LD_VAR 0 2
77893: NOT
77894: OR
77895: IFFALSE 77899
// exit ;
77897: GO 78125
// x := GetX ( building ) ;
77899: LD_ADDR_VAR 0 4
77903: PUSH
77904: LD_VAR 0 2
77908: PPUSH
77909: CALL_OW 250
77913: ST_TO_ADDR
// y := GetY ( building ) ;
77914: LD_ADDR_VAR 0 6
77918: PUSH
77919: LD_VAR 0 2
77923: PPUSH
77924: CALL_OW 251
77928: ST_TO_ADDR
// d := GetDir ( building ) ;
77929: LD_ADDR_VAR 0 8
77933: PUSH
77934: LD_VAR 0 2
77938: PPUSH
77939: CALL_OW 254
77943: ST_TO_ADDR
// r := 4 ;
77944: LD_ADDR_VAR 0 9
77948: PUSH
77949: LD_INT 4
77951: ST_TO_ADDR
// for i := 1 to 5 do
77952: LD_ADDR_VAR 0 10
77956: PUSH
77957: DOUBLE
77958: LD_INT 1
77960: DEC
77961: ST_TO_ADDR
77962: LD_INT 5
77964: PUSH
77965: FOR_TO
77966: IFFALSE 78123
// begin _x := ShiftX ( x , d , r + i ) ;
77968: LD_ADDR_VAR 0 5
77972: PUSH
77973: LD_VAR 0 4
77977: PPUSH
77978: LD_VAR 0 8
77982: PPUSH
77983: LD_VAR 0 9
77987: PUSH
77988: LD_VAR 0 10
77992: PLUS
77993: PPUSH
77994: CALL_OW 272
77998: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77999: LD_ADDR_VAR 0 7
78003: PUSH
78004: LD_VAR 0 6
78008: PPUSH
78009: LD_VAR 0 8
78013: PPUSH
78014: LD_VAR 0 9
78018: PUSH
78019: LD_VAR 0 10
78023: PLUS
78024: PPUSH
78025: CALL_OW 273
78029: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78030: LD_VAR 0 5
78034: PPUSH
78035: LD_VAR 0 7
78039: PPUSH
78040: CALL_OW 488
78044: PUSH
78045: LD_VAR 0 5
78049: PPUSH
78050: LD_VAR 0 7
78054: PPUSH
78055: CALL_OW 428
78059: PPUSH
78060: CALL_OW 247
78064: PUSH
78065: LD_INT 3
78067: PUSH
78068: LD_INT 2
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: IN
78075: NOT
78076: AND
78077: IFFALSE 78121
// begin ComMoveXY ( unit , _x , _y ) ;
78079: LD_VAR 0 1
78083: PPUSH
78084: LD_VAR 0 5
78088: PPUSH
78089: LD_VAR 0 7
78093: PPUSH
78094: CALL_OW 111
// result := [ _x , _y ] ;
78098: LD_ADDR_VAR 0 3
78102: PUSH
78103: LD_VAR 0 5
78107: PUSH
78108: LD_VAR 0 7
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: ST_TO_ADDR
// exit ;
78117: POP
78118: POP
78119: GO 78125
// end ; end ;
78121: GO 77965
78123: POP
78124: POP
// end ;
78125: LD_VAR 0 3
78129: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78130: LD_INT 0
78132: PPUSH
78133: PPUSH
78134: PPUSH
// result := 0 ;
78135: LD_ADDR_VAR 0 3
78139: PUSH
78140: LD_INT 0
78142: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78143: LD_VAR 0 1
78147: PUSH
78148: LD_INT 0
78150: LESS
78151: PUSH
78152: LD_VAR 0 1
78156: PUSH
78157: LD_INT 8
78159: GREATER
78160: OR
78161: PUSH
78162: LD_VAR 0 2
78166: PUSH
78167: LD_INT 0
78169: LESS
78170: OR
78171: PUSH
78172: LD_VAR 0 2
78176: PUSH
78177: LD_INT 8
78179: GREATER
78180: OR
78181: IFFALSE 78185
// exit ;
78183: GO 78260
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78185: LD_ADDR_VAR 0 4
78189: PUSH
78190: LD_INT 22
78192: PUSH
78193: LD_VAR 0 2
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: PPUSH
78202: CALL_OW 69
78206: PUSH
78207: FOR_IN
78208: IFFALSE 78258
// begin un := UnitShoot ( i ) ;
78210: LD_ADDR_VAR 0 5
78214: PUSH
78215: LD_VAR 0 4
78219: PPUSH
78220: CALL_OW 504
78224: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78225: LD_VAR 0 5
78229: PPUSH
78230: CALL_OW 255
78234: PUSH
78235: LD_VAR 0 1
78239: EQUAL
78240: IFFALSE 78256
// begin result := un ;
78242: LD_ADDR_VAR 0 3
78246: PUSH
78247: LD_VAR 0 5
78251: ST_TO_ADDR
// exit ;
78252: POP
78253: POP
78254: GO 78260
// end ; end ;
78256: GO 78207
78258: POP
78259: POP
// end ; end_of_file
78260: LD_VAR 0 3
78264: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
78265: LD_INT 0
78267: PPUSH
// ar_miner := 81 ;
78268: LD_ADDR_EXP 125
78272: PUSH
78273: LD_INT 81
78275: ST_TO_ADDR
// ar_crane := 88 ;
78276: LD_ADDR_EXP 124
78280: PUSH
78281: LD_INT 88
78283: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
78284: LD_ADDR_EXP 119
78288: PUSH
78289: LD_INT 89
78291: ST_TO_ADDR
// us_hack := 99 ;
78292: LD_ADDR_EXP 120
78296: PUSH
78297: LD_INT 99
78299: ST_TO_ADDR
// us_artillery := 97 ;
78300: LD_ADDR_EXP 121
78304: PUSH
78305: LD_INT 97
78307: ST_TO_ADDR
// ar_bio_bomb := 91 ;
78308: LD_ADDR_EXP 122
78312: PUSH
78313: LD_INT 91
78315: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
78316: LD_ADDR_EXP 123
78320: PUSH
78321: LD_INT 92
78323: ST_TO_ADDR
// ru_radar := 98 ;
78324: LD_ADDR_EXP 118
78328: PUSH
78329: LD_INT 98
78331: ST_TO_ADDR
// tech_Artillery := 80 ;
78332: LD_ADDR_EXP 126
78336: PUSH
78337: LD_INT 80
78339: ST_TO_ADDR
// tech_RadMat := 81 ;
78340: LD_ADDR_EXP 127
78344: PUSH
78345: LD_INT 81
78347: ST_TO_ADDR
// tech_BasicTools := 82 ;
78348: LD_ADDR_EXP 128
78352: PUSH
78353: LD_INT 82
78355: ST_TO_ADDR
// tech_Cargo := 83 ;
78356: LD_ADDR_EXP 129
78360: PUSH
78361: LD_INT 83
78363: ST_TO_ADDR
// tech_Track := 84 ;
78364: LD_ADDR_EXP 130
78368: PUSH
78369: LD_INT 84
78371: ST_TO_ADDR
// tech_Crane := 85 ;
78372: LD_ADDR_EXP 131
78376: PUSH
78377: LD_INT 85
78379: ST_TO_ADDR
// tech_Bulldozer := 86 ;
78380: LD_ADDR_EXP 132
78384: PUSH
78385: LD_INT 86
78387: ST_TO_ADDR
// tech_Hovercraft := 87 ;
78388: LD_ADDR_EXP 133
78392: PUSH
78393: LD_INT 87
78395: ST_TO_ADDR
// end ;
78396: LD_VAR 0 1
78400: RET
// every 1 do
78401: GO 78403
78403: DISABLE
// InitGlobalVariables ; end_of_file
78404: CALL 78265 0 0
78408: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
78409: LD_INT 0
78411: PPUSH
78412: PPUSH
78413: PPUSH
78414: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
78415: LD_VAR 0 1
78419: PPUSH
78420: CALL_OW 264
78424: PUSH
78425: LD_EXP 122
78429: EQUAL
78430: IFFALSE 78502
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78432: LD_INT 68
78434: PPUSH
78435: LD_VAR 0 1
78439: PPUSH
78440: CALL_OW 255
78444: PPUSH
78445: CALL_OW 321
78449: PUSH
78450: LD_INT 2
78452: EQUAL
78453: IFFALSE 78465
// eff := 70 else
78455: LD_ADDR_VAR 0 4
78459: PUSH
78460: LD_INT 70
78462: ST_TO_ADDR
78463: GO 78473
// eff := 30 ;
78465: LD_ADDR_VAR 0 4
78469: PUSH
78470: LD_INT 30
78472: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78473: LD_VAR 0 1
78477: PPUSH
78478: CALL_OW 250
78482: PPUSH
78483: LD_VAR 0 1
78487: PPUSH
78488: CALL_OW 251
78492: PPUSH
78493: LD_VAR 0 4
78497: PPUSH
78498: CALL_OW 495
// end ; end ;
78502: LD_VAR 0 2
78506: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
78507: LD_INT 0
78509: PPUSH
// end ;
78510: LD_VAR 0 4
78514: RET
// export function SOS_Command ( cmd ) ; begin
78515: LD_INT 0
78517: PPUSH
// end ;
78518: LD_VAR 0 2
78522: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
78523: LD_INT 0
78525: PPUSH
// if cmd = 121 then
78526: LD_VAR 0 1
78530: PUSH
78531: LD_INT 121
78533: EQUAL
78534: IFFALSE 78536
// end ;
78536: LD_VAR 0 6
78540: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78541: LD_INT 0
78543: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78544: LD_VAR 0 1
78548: PUSH
78549: LD_INT 250
78551: EQUAL
78552: PUSH
78553: LD_VAR 0 2
78557: PPUSH
78558: CALL_OW 264
78562: PUSH
78563: LD_EXP 125
78567: EQUAL
78568: AND
78569: IFFALSE 78590
// MinerPlaceMine ( unit , x , y ) ;
78571: LD_VAR 0 2
78575: PPUSH
78576: LD_VAR 0 4
78580: PPUSH
78581: LD_VAR 0 5
78585: PPUSH
78586: CALL 80939 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78590: LD_VAR 0 1
78594: PUSH
78595: LD_INT 251
78597: EQUAL
78598: PUSH
78599: LD_VAR 0 2
78603: PPUSH
78604: CALL_OW 264
78608: PUSH
78609: LD_EXP 125
78613: EQUAL
78614: AND
78615: IFFALSE 78636
// MinerDetonateMine ( unit , x , y ) ;
78617: LD_VAR 0 2
78621: PPUSH
78622: LD_VAR 0 4
78626: PPUSH
78627: LD_VAR 0 5
78631: PPUSH
78632: CALL 81216 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78636: LD_VAR 0 1
78640: PUSH
78641: LD_INT 252
78643: EQUAL
78644: PUSH
78645: LD_VAR 0 2
78649: PPUSH
78650: CALL_OW 264
78654: PUSH
78655: LD_EXP 125
78659: EQUAL
78660: AND
78661: IFFALSE 78682
// MinerCreateMinefield ( unit , x , y ) ;
78663: LD_VAR 0 2
78667: PPUSH
78668: LD_VAR 0 4
78672: PPUSH
78673: LD_VAR 0 5
78677: PPUSH
78678: CALL 81633 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78682: LD_VAR 0 1
78686: PUSH
78687: LD_INT 253
78689: EQUAL
78690: PUSH
78691: LD_VAR 0 2
78695: PPUSH
78696: CALL_OW 257
78700: PUSH
78701: LD_INT 5
78703: EQUAL
78704: AND
78705: IFFALSE 78726
// ComBinocular ( unit , x , y ) ;
78707: LD_VAR 0 2
78711: PPUSH
78712: LD_VAR 0 4
78716: PPUSH
78717: LD_VAR 0 5
78721: PPUSH
78722: CALL 82004 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78726: LD_VAR 0 1
78730: PUSH
78731: LD_INT 254
78733: EQUAL
78734: PUSH
78735: LD_VAR 0 2
78739: PPUSH
78740: CALL_OW 264
78744: PUSH
78745: LD_EXP 120
78749: EQUAL
78750: AND
78751: PUSH
78752: LD_VAR 0 3
78756: PPUSH
78757: CALL_OW 263
78761: PUSH
78762: LD_INT 3
78764: EQUAL
78765: AND
78766: IFFALSE 78782
// HackDestroyVehicle ( unit , selectedUnit ) ;
78768: LD_VAR 0 2
78772: PPUSH
78773: LD_VAR 0 3
78777: PPUSH
78778: CALL 80299 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78782: LD_VAR 0 1
78786: PUSH
78787: LD_INT 255
78789: EQUAL
78790: PUSH
78791: LD_VAR 0 2
78795: PPUSH
78796: CALL_OW 264
78800: PUSH
78801: LD_INT 14
78803: PUSH
78804: LD_INT 53
78806: PUSH
78807: EMPTY
78808: LIST
78809: LIST
78810: IN
78811: AND
78812: PUSH
78813: LD_VAR 0 4
78817: PPUSH
78818: LD_VAR 0 5
78822: PPUSH
78823: CALL_OW 488
78827: AND
78828: IFFALSE 78852
// CutTreeXYR ( unit , x , y , 12 ) ;
78830: LD_VAR 0 2
78834: PPUSH
78835: LD_VAR 0 4
78839: PPUSH
78840: LD_VAR 0 5
78844: PPUSH
78845: LD_INT 12
78847: PPUSH
78848: CALL 78865 0 4
// end ;
78852: LD_VAR 0 6
78856: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
78857: LD_INT 0
78859: PPUSH
// end ;
78860: LD_VAR 0 4
78864: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78865: LD_INT 0
78867: PPUSH
78868: PPUSH
78869: PPUSH
78870: PPUSH
78871: PPUSH
78872: PPUSH
78873: PPUSH
78874: PPUSH
78875: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
78876: LD_VAR 0 1
78880: NOT
78881: PUSH
78882: LD_VAR 0 2
78886: PPUSH
78887: LD_VAR 0 3
78891: PPUSH
78892: CALL_OW 488
78896: NOT
78897: OR
78898: PUSH
78899: LD_VAR 0 4
78903: NOT
78904: OR
78905: IFFALSE 78909
// exit ;
78907: GO 79249
// list := [ ] ;
78909: LD_ADDR_VAR 0 13
78913: PUSH
78914: EMPTY
78915: ST_TO_ADDR
// if x - r < 0 then
78916: LD_VAR 0 2
78920: PUSH
78921: LD_VAR 0 4
78925: MINUS
78926: PUSH
78927: LD_INT 0
78929: LESS
78930: IFFALSE 78942
// min_x := 0 else
78932: LD_ADDR_VAR 0 7
78936: PUSH
78937: LD_INT 0
78939: ST_TO_ADDR
78940: GO 78958
// min_x := x - r ;
78942: LD_ADDR_VAR 0 7
78946: PUSH
78947: LD_VAR 0 2
78951: PUSH
78952: LD_VAR 0 4
78956: MINUS
78957: ST_TO_ADDR
// if y - r < 0 then
78958: LD_VAR 0 3
78962: PUSH
78963: LD_VAR 0 4
78967: MINUS
78968: PUSH
78969: LD_INT 0
78971: LESS
78972: IFFALSE 78984
// min_y := 0 else
78974: LD_ADDR_VAR 0 8
78978: PUSH
78979: LD_INT 0
78981: ST_TO_ADDR
78982: GO 79000
// min_y := y - r ;
78984: LD_ADDR_VAR 0 8
78988: PUSH
78989: LD_VAR 0 3
78993: PUSH
78994: LD_VAR 0 4
78998: MINUS
78999: ST_TO_ADDR
// max_x := x + r ;
79000: LD_ADDR_VAR 0 9
79004: PUSH
79005: LD_VAR 0 2
79009: PUSH
79010: LD_VAR 0 4
79014: PLUS
79015: ST_TO_ADDR
// max_y := y + r ;
79016: LD_ADDR_VAR 0 10
79020: PUSH
79021: LD_VAR 0 3
79025: PUSH
79026: LD_VAR 0 4
79030: PLUS
79031: ST_TO_ADDR
// for _x = min_x to max_x do
79032: LD_ADDR_VAR 0 11
79036: PUSH
79037: DOUBLE
79038: LD_VAR 0 7
79042: DEC
79043: ST_TO_ADDR
79044: LD_VAR 0 9
79048: PUSH
79049: FOR_TO
79050: IFFALSE 79167
// for _y = min_y to max_y do
79052: LD_ADDR_VAR 0 12
79056: PUSH
79057: DOUBLE
79058: LD_VAR 0 8
79062: DEC
79063: ST_TO_ADDR
79064: LD_VAR 0 10
79068: PUSH
79069: FOR_TO
79070: IFFALSE 79163
// begin if not ValidHex ( _x , _y ) then
79072: LD_VAR 0 11
79076: PPUSH
79077: LD_VAR 0 12
79081: PPUSH
79082: CALL_OW 488
79086: NOT
79087: IFFALSE 79091
// continue ;
79089: GO 79069
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79091: LD_VAR 0 11
79095: PPUSH
79096: LD_VAR 0 12
79100: PPUSH
79101: CALL_OW 351
79105: PUSH
79106: LD_VAR 0 11
79110: PPUSH
79111: LD_VAR 0 12
79115: PPUSH
79116: CALL_OW 554
79120: AND
79121: IFFALSE 79161
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79123: LD_ADDR_VAR 0 13
79127: PUSH
79128: LD_VAR 0 13
79132: PPUSH
79133: LD_VAR 0 13
79137: PUSH
79138: LD_INT 1
79140: PLUS
79141: PPUSH
79142: LD_VAR 0 11
79146: PUSH
79147: LD_VAR 0 12
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: PPUSH
79156: CALL_OW 2
79160: ST_TO_ADDR
// end ;
79161: GO 79069
79163: POP
79164: POP
79165: GO 79049
79167: POP
79168: POP
// if not list then
79169: LD_VAR 0 13
79173: NOT
79174: IFFALSE 79178
// exit ;
79176: GO 79249
// for i in list do
79178: LD_ADDR_VAR 0 6
79182: PUSH
79183: LD_VAR 0 13
79187: PUSH
79188: FOR_IN
79189: IFFALSE 79247
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79191: LD_VAR 0 1
79195: PPUSH
79196: LD_STRING M
79198: PUSH
79199: LD_VAR 0 6
79203: PUSH
79204: LD_INT 1
79206: ARRAY
79207: PUSH
79208: LD_VAR 0 6
79212: PUSH
79213: LD_INT 2
79215: ARRAY
79216: PUSH
79217: LD_INT 0
79219: PUSH
79220: LD_INT 0
79222: PUSH
79223: LD_INT 0
79225: PUSH
79226: LD_INT 0
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: LIST
79233: LIST
79234: LIST
79235: LIST
79236: LIST
79237: PUSH
79238: EMPTY
79239: LIST
79240: PPUSH
79241: CALL_OW 447
79245: GO 79188
79247: POP
79248: POP
// end ;
79249: LD_VAR 0 5
79253: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79254: LD_EXP 136
79258: NOT
79259: IFFALSE 79309
79261: GO 79263
79263: DISABLE
// begin initHack := true ;
79264: LD_ADDR_EXP 136
79268: PUSH
79269: LD_INT 1
79271: ST_TO_ADDR
// hackTanks := [ ] ;
79272: LD_ADDR_EXP 137
79276: PUSH
79277: EMPTY
79278: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79279: LD_ADDR_EXP 138
79283: PUSH
79284: EMPTY
79285: ST_TO_ADDR
// hackLimit := 3 ;
79286: LD_ADDR_EXP 139
79290: PUSH
79291: LD_INT 3
79293: ST_TO_ADDR
// hackDist := 12 ;
79294: LD_ADDR_EXP 140
79298: PUSH
79299: LD_INT 12
79301: ST_TO_ADDR
// hackCounter := [ ] ;
79302: LD_ADDR_EXP 141
79306: PUSH
79307: EMPTY
79308: ST_TO_ADDR
// end ;
79309: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79310: LD_EXP 136
79314: PUSH
79315: LD_INT 34
79317: PUSH
79318: LD_EXP 120
79322: PUSH
79323: EMPTY
79324: LIST
79325: LIST
79326: PPUSH
79327: CALL_OW 69
79331: AND
79332: IFFALSE 79587
79334: GO 79336
79336: DISABLE
79337: LD_INT 0
79339: PPUSH
79340: PPUSH
// begin enable ;
79341: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79342: LD_ADDR_VAR 0 1
79346: PUSH
79347: LD_INT 34
79349: PUSH
79350: LD_EXP 120
79354: PUSH
79355: EMPTY
79356: LIST
79357: LIST
79358: PPUSH
79359: CALL_OW 69
79363: PUSH
79364: FOR_IN
79365: IFFALSE 79585
// begin if not i in hackTanks then
79367: LD_VAR 0 1
79371: PUSH
79372: LD_EXP 137
79376: IN
79377: NOT
79378: IFFALSE 79461
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79380: LD_ADDR_EXP 137
79384: PUSH
79385: LD_EXP 137
79389: PPUSH
79390: LD_EXP 137
79394: PUSH
79395: LD_INT 1
79397: PLUS
79398: PPUSH
79399: LD_VAR 0 1
79403: PPUSH
79404: CALL_OW 1
79408: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79409: LD_ADDR_EXP 138
79413: PUSH
79414: LD_EXP 138
79418: PPUSH
79419: LD_EXP 138
79423: PUSH
79424: LD_INT 1
79426: PLUS
79427: PPUSH
79428: EMPTY
79429: PPUSH
79430: CALL_OW 1
79434: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79435: LD_ADDR_EXP 141
79439: PUSH
79440: LD_EXP 141
79444: PPUSH
79445: LD_EXP 141
79449: PUSH
79450: LD_INT 1
79452: PLUS
79453: PPUSH
79454: EMPTY
79455: PPUSH
79456: CALL_OW 1
79460: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79461: LD_VAR 0 1
79465: PPUSH
79466: CALL_OW 302
79470: NOT
79471: IFFALSE 79484
// begin HackUnlinkAll ( i ) ;
79473: LD_VAR 0 1
79477: PPUSH
79478: CALL 79590 0 1
// continue ;
79482: GO 79364
// end ; HackCheckCapturedStatus ( i ) ;
79484: LD_VAR 0 1
79488: PPUSH
79489: CALL 80033 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
79493: LD_ADDR_VAR 0 2
79497: PUSH
79498: LD_INT 81
79500: PUSH
79501: LD_VAR 0 1
79505: PPUSH
79506: CALL_OW 255
79510: PUSH
79511: EMPTY
79512: LIST
79513: LIST
79514: PUSH
79515: LD_INT 33
79517: PUSH
79518: LD_INT 3
79520: PUSH
79521: EMPTY
79522: LIST
79523: LIST
79524: PUSH
79525: LD_INT 91
79527: PUSH
79528: LD_VAR 0 1
79532: PUSH
79533: LD_EXP 140
79537: PUSH
79538: EMPTY
79539: LIST
79540: LIST
79541: LIST
79542: PUSH
79543: LD_INT 50
79545: PUSH
79546: EMPTY
79547: LIST
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: LIST
79553: LIST
79554: PPUSH
79555: CALL_OW 69
79559: ST_TO_ADDR
// if not tmp then
79560: LD_VAR 0 2
79564: NOT
79565: IFFALSE 79569
// continue ;
79567: GO 79364
// HackLink ( i , tmp ) ;
79569: LD_VAR 0 1
79573: PPUSH
79574: LD_VAR 0 2
79578: PPUSH
79579: CALL 79726 0 2
// end ;
79583: GO 79364
79585: POP
79586: POP
// end ;
79587: PPOPN 2
79589: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79590: LD_INT 0
79592: PPUSH
79593: PPUSH
79594: PPUSH
// if not hack in hackTanks then
79595: LD_VAR 0 1
79599: PUSH
79600: LD_EXP 137
79604: IN
79605: NOT
79606: IFFALSE 79610
// exit ;
79608: GO 79721
// index := GetElementIndex ( hackTanks , hack ) ;
79610: LD_ADDR_VAR 0 4
79614: PUSH
79615: LD_EXP 137
79619: PPUSH
79620: LD_VAR 0 1
79624: PPUSH
79625: CALL 45792 0 2
79629: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79630: LD_EXP 138
79634: PUSH
79635: LD_VAR 0 4
79639: ARRAY
79640: IFFALSE 79721
// begin for i in hackTanksCaptured [ index ] do
79642: LD_ADDR_VAR 0 3
79646: PUSH
79647: LD_EXP 138
79651: PUSH
79652: LD_VAR 0 4
79656: ARRAY
79657: PUSH
79658: FOR_IN
79659: IFFALSE 79685
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79661: LD_VAR 0 3
79665: PUSH
79666: LD_INT 1
79668: ARRAY
79669: PPUSH
79670: LD_VAR 0 3
79674: PUSH
79675: LD_INT 2
79677: ARRAY
79678: PPUSH
79679: CALL_OW 235
79683: GO 79658
79685: POP
79686: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79687: LD_ADDR_EXP 138
79691: PUSH
79692: LD_EXP 138
79696: PPUSH
79697: LD_VAR 0 4
79701: PPUSH
79702: EMPTY
79703: PPUSH
79704: CALL_OW 1
79708: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79709: LD_VAR 0 1
79713: PPUSH
79714: LD_INT 0
79716: PPUSH
79717: CALL_OW 505
// end ; end ;
79721: LD_VAR 0 2
79725: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79726: LD_INT 0
79728: PPUSH
79729: PPUSH
79730: PPUSH
// if not hack in hackTanks or not vehicles then
79731: LD_VAR 0 1
79735: PUSH
79736: LD_EXP 137
79740: IN
79741: NOT
79742: PUSH
79743: LD_VAR 0 2
79747: NOT
79748: OR
79749: IFFALSE 79753
// exit ;
79751: GO 80028
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79753: LD_ADDR_VAR 0 2
79757: PUSH
79758: LD_VAR 0 1
79762: PPUSH
79763: LD_VAR 0 2
79767: PPUSH
79768: LD_INT 1
79770: PPUSH
79771: LD_INT 1
79773: PPUSH
79774: CALL 46442 0 4
79778: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79779: LD_ADDR_VAR 0 5
79783: PUSH
79784: LD_EXP 137
79788: PPUSH
79789: LD_VAR 0 1
79793: PPUSH
79794: CALL 45792 0 2
79798: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79799: LD_EXP 138
79803: PUSH
79804: LD_VAR 0 5
79808: ARRAY
79809: PUSH
79810: LD_EXP 139
79814: LESS
79815: IFFALSE 80004
// begin for i := 1 to vehicles do
79817: LD_ADDR_VAR 0 4
79821: PUSH
79822: DOUBLE
79823: LD_INT 1
79825: DEC
79826: ST_TO_ADDR
79827: LD_VAR 0 2
79831: PUSH
79832: FOR_TO
79833: IFFALSE 80002
// begin if hackTanksCaptured [ index ] = hackLimit then
79835: LD_EXP 138
79839: PUSH
79840: LD_VAR 0 5
79844: ARRAY
79845: PUSH
79846: LD_EXP 139
79850: EQUAL
79851: IFFALSE 79855
// break ;
79853: GO 80002
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
79855: LD_ADDR_EXP 141
79859: PUSH
79860: LD_EXP 141
79864: PPUSH
79865: LD_VAR 0 5
79869: PPUSH
79870: LD_EXP 141
79874: PUSH
79875: LD_VAR 0 5
79879: ARRAY
79880: PUSH
79881: LD_INT 1
79883: PLUS
79884: PPUSH
79885: CALL_OW 1
79889: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
79890: LD_ADDR_EXP 138
79894: PUSH
79895: LD_EXP 138
79899: PPUSH
79900: LD_VAR 0 5
79904: PUSH
79905: LD_EXP 138
79909: PUSH
79910: LD_VAR 0 5
79914: ARRAY
79915: PUSH
79916: LD_INT 1
79918: PLUS
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PPUSH
79924: LD_VAR 0 2
79928: PUSH
79929: LD_VAR 0 4
79933: ARRAY
79934: PUSH
79935: LD_VAR 0 2
79939: PUSH
79940: LD_VAR 0 4
79944: ARRAY
79945: PPUSH
79946: CALL_OW 255
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PPUSH
79955: CALL 46007 0 3
79959: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
79960: LD_VAR 0 2
79964: PUSH
79965: LD_VAR 0 4
79969: ARRAY
79970: PPUSH
79971: LD_VAR 0 1
79975: PPUSH
79976: CALL_OW 255
79980: PPUSH
79981: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
79985: LD_VAR 0 2
79989: PUSH
79990: LD_VAR 0 4
79994: ARRAY
79995: PPUSH
79996: CALL_OW 141
// end ;
80000: GO 79832
80002: POP
80003: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80004: LD_VAR 0 1
80008: PPUSH
80009: LD_EXP 138
80013: PUSH
80014: LD_VAR 0 5
80018: ARRAY
80019: PUSH
80020: LD_INT 0
80022: PLUS
80023: PPUSH
80024: CALL_OW 505
// end ;
80028: LD_VAR 0 3
80032: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80033: LD_INT 0
80035: PPUSH
80036: PPUSH
80037: PPUSH
80038: PPUSH
// if not hack in hackTanks then
80039: LD_VAR 0 1
80043: PUSH
80044: LD_EXP 137
80048: IN
80049: NOT
80050: IFFALSE 80054
// exit ;
80052: GO 80294
// index := GetElementIndex ( hackTanks , hack ) ;
80054: LD_ADDR_VAR 0 4
80058: PUSH
80059: LD_EXP 137
80063: PPUSH
80064: LD_VAR 0 1
80068: PPUSH
80069: CALL 45792 0 2
80073: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80074: LD_ADDR_VAR 0 3
80078: PUSH
80079: DOUBLE
80080: LD_EXP 138
80084: PUSH
80085: LD_VAR 0 4
80089: ARRAY
80090: INC
80091: ST_TO_ADDR
80092: LD_INT 1
80094: PUSH
80095: FOR_DOWNTO
80096: IFFALSE 80268
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80098: LD_ADDR_VAR 0 5
80102: PUSH
80103: LD_EXP 138
80107: PUSH
80108: LD_VAR 0 4
80112: ARRAY
80113: PUSH
80114: LD_VAR 0 3
80118: ARRAY
80119: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80120: LD_VAR 0 5
80124: PUSH
80125: LD_INT 1
80127: ARRAY
80128: PPUSH
80129: CALL_OW 302
80133: NOT
80134: PUSH
80135: LD_VAR 0 5
80139: PUSH
80140: LD_INT 1
80142: ARRAY
80143: PPUSH
80144: CALL_OW 255
80148: PUSH
80149: LD_VAR 0 1
80153: PPUSH
80154: CALL_OW 255
80158: NONEQUAL
80159: OR
80160: IFFALSE 80266
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80162: LD_VAR 0 5
80166: PUSH
80167: LD_INT 1
80169: ARRAY
80170: PPUSH
80171: CALL_OW 305
80175: PUSH
80176: LD_VAR 0 5
80180: PUSH
80181: LD_INT 1
80183: ARRAY
80184: PPUSH
80185: CALL_OW 255
80189: PUSH
80190: LD_VAR 0 1
80194: PPUSH
80195: CALL_OW 255
80199: EQUAL
80200: AND
80201: IFFALSE 80225
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80203: LD_VAR 0 5
80207: PUSH
80208: LD_INT 1
80210: ARRAY
80211: PPUSH
80212: LD_VAR 0 5
80216: PUSH
80217: LD_INT 2
80219: ARRAY
80220: PPUSH
80221: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80225: LD_ADDR_EXP 138
80229: PUSH
80230: LD_EXP 138
80234: PPUSH
80235: LD_VAR 0 4
80239: PPUSH
80240: LD_EXP 138
80244: PUSH
80245: LD_VAR 0 4
80249: ARRAY
80250: PPUSH
80251: LD_VAR 0 3
80255: PPUSH
80256: CALL_OW 3
80260: PPUSH
80261: CALL_OW 1
80265: ST_TO_ADDR
// end ; end ;
80266: GO 80095
80268: POP
80269: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80270: LD_VAR 0 1
80274: PPUSH
80275: LD_EXP 138
80279: PUSH
80280: LD_VAR 0 4
80284: ARRAY
80285: PUSH
80286: LD_INT 0
80288: PLUS
80289: PPUSH
80290: CALL_OW 505
// end ;
80294: LD_VAR 0 2
80298: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80299: LD_INT 0
80301: PPUSH
80302: PPUSH
80303: PPUSH
80304: PPUSH
// if not hack in hackTanks then
80305: LD_VAR 0 1
80309: PUSH
80310: LD_EXP 137
80314: IN
80315: NOT
80316: IFFALSE 80320
// exit ;
80318: GO 80405
// index := GetElementIndex ( hackTanks , hack ) ;
80320: LD_ADDR_VAR 0 5
80324: PUSH
80325: LD_EXP 137
80329: PPUSH
80330: LD_VAR 0 1
80334: PPUSH
80335: CALL 45792 0 2
80339: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80340: LD_ADDR_VAR 0 4
80344: PUSH
80345: DOUBLE
80346: LD_INT 1
80348: DEC
80349: ST_TO_ADDR
80350: LD_EXP 138
80354: PUSH
80355: LD_VAR 0 5
80359: ARRAY
80360: PUSH
80361: FOR_TO
80362: IFFALSE 80403
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80364: LD_EXP 138
80368: PUSH
80369: LD_VAR 0 5
80373: ARRAY
80374: PUSH
80375: LD_VAR 0 4
80379: ARRAY
80380: PUSH
80381: LD_INT 1
80383: ARRAY
80384: PUSH
80385: LD_VAR 0 2
80389: EQUAL
80390: IFFALSE 80401
// KillUnit ( vehicle ) ;
80392: LD_VAR 0 2
80396: PPUSH
80397: CALL_OW 66
80401: GO 80361
80403: POP
80404: POP
// end ;
80405: LD_VAR 0 3
80409: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80410: LD_EXP 142
80414: NOT
80415: IFFALSE 80450
80417: GO 80419
80419: DISABLE
// begin initMiner := true ;
80420: LD_ADDR_EXP 142
80424: PUSH
80425: LD_INT 1
80427: ST_TO_ADDR
// minersList := [ ] ;
80428: LD_ADDR_EXP 143
80432: PUSH
80433: EMPTY
80434: ST_TO_ADDR
// minerMinesList := [ ] ;
80435: LD_ADDR_EXP 144
80439: PUSH
80440: EMPTY
80441: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
80442: LD_ADDR_EXP 145
80446: PUSH
80447: LD_INT 5
80449: ST_TO_ADDR
// end ;
80450: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
80451: LD_EXP 142
80455: PUSH
80456: LD_INT 34
80458: PUSH
80459: LD_EXP 125
80463: PUSH
80464: EMPTY
80465: LIST
80466: LIST
80467: PPUSH
80468: CALL_OW 69
80472: AND
80473: IFFALSE 80936
80475: GO 80477
80477: DISABLE
80478: LD_INT 0
80480: PPUSH
80481: PPUSH
80482: PPUSH
80483: PPUSH
// begin enable ;
80484: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80485: LD_ADDR_VAR 0 1
80489: PUSH
80490: LD_INT 34
80492: PUSH
80493: LD_EXP 125
80497: PUSH
80498: EMPTY
80499: LIST
80500: LIST
80501: PPUSH
80502: CALL_OW 69
80506: PUSH
80507: FOR_IN
80508: IFFALSE 80580
// begin if not i in minersList then
80510: LD_VAR 0 1
80514: PUSH
80515: LD_EXP 143
80519: IN
80520: NOT
80521: IFFALSE 80578
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80523: LD_ADDR_EXP 143
80527: PUSH
80528: LD_EXP 143
80532: PPUSH
80533: LD_EXP 143
80537: PUSH
80538: LD_INT 1
80540: PLUS
80541: PPUSH
80542: LD_VAR 0 1
80546: PPUSH
80547: CALL_OW 1
80551: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
80552: LD_ADDR_EXP 144
80556: PUSH
80557: LD_EXP 144
80561: PPUSH
80562: LD_EXP 144
80566: PUSH
80567: LD_INT 1
80569: PLUS
80570: PPUSH
80571: EMPTY
80572: PPUSH
80573: CALL_OW 1
80577: ST_TO_ADDR
// end end ;
80578: GO 80507
80580: POP
80581: POP
// for i := minerMinesList downto 1 do
80582: LD_ADDR_VAR 0 1
80586: PUSH
80587: DOUBLE
80588: LD_EXP 144
80592: INC
80593: ST_TO_ADDR
80594: LD_INT 1
80596: PUSH
80597: FOR_DOWNTO
80598: IFFALSE 80934
// begin if IsLive ( minersList [ i ] ) then
80600: LD_EXP 143
80604: PUSH
80605: LD_VAR 0 1
80609: ARRAY
80610: PPUSH
80611: CALL_OW 300
80615: IFFALSE 80643
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80617: LD_EXP 143
80621: PUSH
80622: LD_VAR 0 1
80626: ARRAY
80627: PPUSH
80628: LD_EXP 144
80632: PUSH
80633: LD_VAR 0 1
80637: ARRAY
80638: PPUSH
80639: CALL_OW 505
// if not minerMinesList [ i ] then
80643: LD_EXP 144
80647: PUSH
80648: LD_VAR 0 1
80652: ARRAY
80653: NOT
80654: IFFALSE 80658
// continue ;
80656: GO 80597
// for j := minerMinesList [ i ] downto 1 do
80658: LD_ADDR_VAR 0 2
80662: PUSH
80663: DOUBLE
80664: LD_EXP 144
80668: PUSH
80669: LD_VAR 0 1
80673: ARRAY
80674: INC
80675: ST_TO_ADDR
80676: LD_INT 1
80678: PUSH
80679: FOR_DOWNTO
80680: IFFALSE 80930
// begin side := GetSide ( minersList [ i ] ) ;
80682: LD_ADDR_VAR 0 3
80686: PUSH
80687: LD_EXP 143
80691: PUSH
80692: LD_VAR 0 1
80696: ARRAY
80697: PPUSH
80698: CALL_OW 255
80702: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80703: LD_ADDR_VAR 0 4
80707: PUSH
80708: LD_EXP 144
80712: PUSH
80713: LD_VAR 0 1
80717: ARRAY
80718: PUSH
80719: LD_VAR 0 2
80723: ARRAY
80724: PUSH
80725: LD_INT 1
80727: ARRAY
80728: PPUSH
80729: LD_EXP 144
80733: PUSH
80734: LD_VAR 0 1
80738: ARRAY
80739: PUSH
80740: LD_VAR 0 2
80744: ARRAY
80745: PUSH
80746: LD_INT 2
80748: ARRAY
80749: PPUSH
80750: CALL_OW 428
80754: ST_TO_ADDR
// if not tmp then
80755: LD_VAR 0 4
80759: NOT
80760: IFFALSE 80764
// continue ;
80762: GO 80679
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80764: LD_VAR 0 4
80768: PUSH
80769: LD_INT 81
80771: PUSH
80772: LD_VAR 0 3
80776: PUSH
80777: EMPTY
80778: LIST
80779: LIST
80780: PPUSH
80781: CALL_OW 69
80785: IN
80786: PUSH
80787: LD_EXP 144
80791: PUSH
80792: LD_VAR 0 1
80796: ARRAY
80797: PUSH
80798: LD_VAR 0 2
80802: ARRAY
80803: PUSH
80804: LD_INT 1
80806: ARRAY
80807: PPUSH
80808: LD_EXP 144
80812: PUSH
80813: LD_VAR 0 1
80817: ARRAY
80818: PUSH
80819: LD_VAR 0 2
80823: ARRAY
80824: PUSH
80825: LD_INT 2
80827: ARRAY
80828: PPUSH
80829: CALL_OW 458
80833: AND
80834: IFFALSE 80928
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
80836: LD_EXP 144
80840: PUSH
80841: LD_VAR 0 1
80845: ARRAY
80846: PUSH
80847: LD_VAR 0 2
80851: ARRAY
80852: PUSH
80853: LD_INT 1
80855: ARRAY
80856: PPUSH
80857: LD_EXP 144
80861: PUSH
80862: LD_VAR 0 1
80866: ARRAY
80867: PUSH
80868: LD_VAR 0 2
80872: ARRAY
80873: PUSH
80874: LD_INT 2
80876: ARRAY
80877: PPUSH
80878: LD_VAR 0 3
80882: PPUSH
80883: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
80887: LD_ADDR_EXP 144
80891: PUSH
80892: LD_EXP 144
80896: PPUSH
80897: LD_VAR 0 1
80901: PPUSH
80902: LD_EXP 144
80906: PUSH
80907: LD_VAR 0 1
80911: ARRAY
80912: PPUSH
80913: LD_VAR 0 2
80917: PPUSH
80918: CALL_OW 3
80922: PPUSH
80923: CALL_OW 1
80927: ST_TO_ADDR
// end ; end ;
80928: GO 80679
80930: POP
80931: POP
// end ;
80932: GO 80597
80934: POP
80935: POP
// end ;
80936: PPOPN 4
80938: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
80939: LD_INT 0
80941: PPUSH
80942: PPUSH
// result := false ;
80943: LD_ADDR_VAR 0 4
80947: PUSH
80948: LD_INT 0
80950: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
80951: LD_VAR 0 1
80955: PPUSH
80956: CALL_OW 264
80960: PUSH
80961: LD_EXP 125
80965: EQUAL
80966: NOT
80967: IFFALSE 80971
// exit ;
80969: GO 81211
// index := GetElementIndex ( minersList , unit ) ;
80971: LD_ADDR_VAR 0 5
80975: PUSH
80976: LD_EXP 143
80980: PPUSH
80981: LD_VAR 0 1
80985: PPUSH
80986: CALL 45792 0 2
80990: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
80991: LD_EXP 144
80995: PUSH
80996: LD_VAR 0 5
81000: ARRAY
81001: PUSH
81002: LD_EXP 145
81006: GREATEREQUAL
81007: IFFALSE 81011
// exit ;
81009: GO 81211
// ComMoveXY ( unit , x , y ) ;
81011: LD_VAR 0 1
81015: PPUSH
81016: LD_VAR 0 2
81020: PPUSH
81021: LD_VAR 0 3
81025: PPUSH
81026: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81030: LD_INT 35
81032: PPUSH
81033: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81037: LD_VAR 0 1
81041: PPUSH
81042: LD_VAR 0 2
81046: PPUSH
81047: LD_VAR 0 3
81051: PPUSH
81052: CALL 75856 0 3
81056: NOT
81057: PUSH
81058: LD_VAR 0 1
81062: PPUSH
81063: CALL_OW 314
81067: AND
81068: IFFALSE 81072
// exit ;
81070: GO 81211
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81072: LD_VAR 0 2
81076: PPUSH
81077: LD_VAR 0 3
81081: PPUSH
81082: CALL_OW 428
81086: PUSH
81087: LD_VAR 0 1
81091: EQUAL
81092: PUSH
81093: LD_VAR 0 1
81097: PPUSH
81098: CALL_OW 314
81102: NOT
81103: AND
81104: IFFALSE 81030
// PlaySoundXY ( x , y , PlantMine ) ;
81106: LD_VAR 0 2
81110: PPUSH
81111: LD_VAR 0 3
81115: PPUSH
81116: LD_STRING PlantMine
81118: PPUSH
81119: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81123: LD_VAR 0 2
81127: PPUSH
81128: LD_VAR 0 3
81132: PPUSH
81133: LD_VAR 0 1
81137: PPUSH
81138: CALL_OW 255
81142: PPUSH
81143: LD_INT 0
81145: PPUSH
81146: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81150: LD_ADDR_EXP 144
81154: PUSH
81155: LD_EXP 144
81159: PPUSH
81160: LD_VAR 0 5
81164: PUSH
81165: LD_EXP 144
81169: PUSH
81170: LD_VAR 0 5
81174: ARRAY
81175: PUSH
81176: LD_INT 1
81178: PLUS
81179: PUSH
81180: EMPTY
81181: LIST
81182: LIST
81183: PPUSH
81184: LD_VAR 0 2
81188: PUSH
81189: LD_VAR 0 3
81193: PUSH
81194: EMPTY
81195: LIST
81196: LIST
81197: PPUSH
81198: CALL 46007 0 3
81202: ST_TO_ADDR
// result := true ;
81203: LD_ADDR_VAR 0 4
81207: PUSH
81208: LD_INT 1
81210: ST_TO_ADDR
// end ;
81211: LD_VAR 0 4
81215: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81216: LD_INT 0
81218: PPUSH
81219: PPUSH
81220: PPUSH
// if not unit in minersList then
81221: LD_VAR 0 1
81225: PUSH
81226: LD_EXP 143
81230: IN
81231: NOT
81232: IFFALSE 81236
// exit ;
81234: GO 81628
// index := GetElementIndex ( minersList , unit ) ;
81236: LD_ADDR_VAR 0 6
81240: PUSH
81241: LD_EXP 143
81245: PPUSH
81246: LD_VAR 0 1
81250: PPUSH
81251: CALL 45792 0 2
81255: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81256: LD_ADDR_VAR 0 5
81260: PUSH
81261: DOUBLE
81262: LD_EXP 144
81266: PUSH
81267: LD_VAR 0 6
81271: ARRAY
81272: INC
81273: ST_TO_ADDR
81274: LD_INT 1
81276: PUSH
81277: FOR_DOWNTO
81278: IFFALSE 81439
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81280: LD_EXP 144
81284: PUSH
81285: LD_VAR 0 6
81289: ARRAY
81290: PUSH
81291: LD_VAR 0 5
81295: ARRAY
81296: PUSH
81297: LD_INT 1
81299: ARRAY
81300: PUSH
81301: LD_VAR 0 2
81305: EQUAL
81306: PUSH
81307: LD_EXP 144
81311: PUSH
81312: LD_VAR 0 6
81316: ARRAY
81317: PUSH
81318: LD_VAR 0 5
81322: ARRAY
81323: PUSH
81324: LD_INT 2
81326: ARRAY
81327: PUSH
81328: LD_VAR 0 3
81332: EQUAL
81333: AND
81334: IFFALSE 81437
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81336: LD_EXP 144
81340: PUSH
81341: LD_VAR 0 6
81345: ARRAY
81346: PUSH
81347: LD_VAR 0 5
81351: ARRAY
81352: PUSH
81353: LD_INT 1
81355: ARRAY
81356: PPUSH
81357: LD_EXP 144
81361: PUSH
81362: LD_VAR 0 6
81366: ARRAY
81367: PUSH
81368: LD_VAR 0 5
81372: ARRAY
81373: PUSH
81374: LD_INT 2
81376: ARRAY
81377: PPUSH
81378: LD_VAR 0 1
81382: PPUSH
81383: CALL_OW 255
81387: PPUSH
81388: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81392: LD_ADDR_EXP 144
81396: PUSH
81397: LD_EXP 144
81401: PPUSH
81402: LD_VAR 0 6
81406: PPUSH
81407: LD_EXP 144
81411: PUSH
81412: LD_VAR 0 6
81416: ARRAY
81417: PPUSH
81418: LD_VAR 0 5
81422: PPUSH
81423: CALL_OW 3
81427: PPUSH
81428: CALL_OW 1
81432: ST_TO_ADDR
// exit ;
81433: POP
81434: POP
81435: GO 81628
// end ; end ;
81437: GO 81277
81439: POP
81440: POP
// for i := minerMinesList [ index ] downto 1 do
81441: LD_ADDR_VAR 0 5
81445: PUSH
81446: DOUBLE
81447: LD_EXP 144
81451: PUSH
81452: LD_VAR 0 6
81456: ARRAY
81457: INC
81458: ST_TO_ADDR
81459: LD_INT 1
81461: PUSH
81462: FOR_DOWNTO
81463: IFFALSE 81626
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81465: LD_EXP 144
81469: PUSH
81470: LD_VAR 0 6
81474: ARRAY
81475: PUSH
81476: LD_VAR 0 5
81480: ARRAY
81481: PUSH
81482: LD_INT 1
81484: ARRAY
81485: PPUSH
81486: LD_EXP 144
81490: PUSH
81491: LD_VAR 0 6
81495: ARRAY
81496: PUSH
81497: LD_VAR 0 5
81501: ARRAY
81502: PUSH
81503: LD_INT 2
81505: ARRAY
81506: PPUSH
81507: LD_VAR 0 2
81511: PPUSH
81512: LD_VAR 0 3
81516: PPUSH
81517: CALL_OW 298
81521: PUSH
81522: LD_INT 6
81524: LESS
81525: IFFALSE 81624
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81527: LD_EXP 144
81531: PUSH
81532: LD_VAR 0 6
81536: ARRAY
81537: PUSH
81538: LD_VAR 0 5
81542: ARRAY
81543: PUSH
81544: LD_INT 1
81546: ARRAY
81547: PPUSH
81548: LD_EXP 144
81552: PUSH
81553: LD_VAR 0 6
81557: ARRAY
81558: PUSH
81559: LD_VAR 0 5
81563: ARRAY
81564: PUSH
81565: LD_INT 2
81567: ARRAY
81568: PPUSH
81569: LD_VAR 0 1
81573: PPUSH
81574: CALL_OW 255
81578: PPUSH
81579: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81583: LD_ADDR_EXP 144
81587: PUSH
81588: LD_EXP 144
81592: PPUSH
81593: LD_VAR 0 6
81597: PPUSH
81598: LD_EXP 144
81602: PUSH
81603: LD_VAR 0 6
81607: ARRAY
81608: PPUSH
81609: LD_VAR 0 5
81613: PPUSH
81614: CALL_OW 3
81618: PPUSH
81619: CALL_OW 1
81623: ST_TO_ADDR
// end ; end ;
81624: GO 81462
81626: POP
81627: POP
// end ;
81628: LD_VAR 0 4
81632: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81633: LD_INT 0
81635: PPUSH
81636: PPUSH
81637: PPUSH
81638: PPUSH
81639: PPUSH
81640: PPUSH
81641: PPUSH
81642: PPUSH
81643: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81644: LD_VAR 0 1
81648: PPUSH
81649: CALL_OW 264
81653: PUSH
81654: LD_EXP 125
81658: EQUAL
81659: NOT
81660: PUSH
81661: LD_VAR 0 1
81665: PUSH
81666: LD_EXP 143
81670: IN
81671: NOT
81672: OR
81673: IFFALSE 81677
// exit ;
81675: GO 81999
// index := GetElementIndex ( minersList , unit ) ;
81677: LD_ADDR_VAR 0 6
81681: PUSH
81682: LD_EXP 143
81686: PPUSH
81687: LD_VAR 0 1
81691: PPUSH
81692: CALL 45792 0 2
81696: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81697: LD_ADDR_VAR 0 8
81701: PUSH
81702: LD_EXP 145
81706: PUSH
81707: LD_EXP 144
81711: PUSH
81712: LD_VAR 0 6
81716: ARRAY
81717: MINUS
81718: ST_TO_ADDR
// if not minesFreeAmount then
81719: LD_VAR 0 8
81723: NOT
81724: IFFALSE 81728
// exit ;
81726: GO 81999
// tmp := [ ] ;
81728: LD_ADDR_VAR 0 7
81732: PUSH
81733: EMPTY
81734: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81735: LD_ADDR_VAR 0 5
81739: PUSH
81740: DOUBLE
81741: LD_INT 1
81743: DEC
81744: ST_TO_ADDR
81745: LD_VAR 0 8
81749: PUSH
81750: FOR_TO
81751: IFFALSE 81946
// begin _d := rand ( 0 , 5 ) ;
81753: LD_ADDR_VAR 0 11
81757: PUSH
81758: LD_INT 0
81760: PPUSH
81761: LD_INT 5
81763: PPUSH
81764: CALL_OW 12
81768: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81769: LD_ADDR_VAR 0 12
81773: PUSH
81774: LD_INT 2
81776: PPUSH
81777: LD_INT 6
81779: PPUSH
81780: CALL_OW 12
81784: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81785: LD_ADDR_VAR 0 9
81789: PUSH
81790: LD_VAR 0 2
81794: PPUSH
81795: LD_VAR 0 11
81799: PPUSH
81800: LD_VAR 0 12
81804: PPUSH
81805: CALL_OW 272
81809: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81810: LD_ADDR_VAR 0 10
81814: PUSH
81815: LD_VAR 0 3
81819: PPUSH
81820: LD_VAR 0 11
81824: PPUSH
81825: LD_VAR 0 12
81829: PPUSH
81830: CALL_OW 273
81834: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
81835: LD_VAR 0 9
81839: PPUSH
81840: LD_VAR 0 10
81844: PPUSH
81845: CALL_OW 488
81849: PUSH
81850: LD_VAR 0 9
81854: PUSH
81855: LD_VAR 0 10
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: PUSH
81864: LD_VAR 0 7
81868: IN
81869: NOT
81870: AND
81871: PUSH
81872: LD_VAR 0 9
81876: PPUSH
81877: LD_VAR 0 10
81881: PPUSH
81882: CALL_OW 458
81886: NOT
81887: AND
81888: IFFALSE 81930
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
81890: LD_ADDR_VAR 0 7
81894: PUSH
81895: LD_VAR 0 7
81899: PPUSH
81900: LD_VAR 0 7
81904: PUSH
81905: LD_INT 1
81907: PLUS
81908: PPUSH
81909: LD_VAR 0 9
81913: PUSH
81914: LD_VAR 0 10
81918: PUSH
81919: EMPTY
81920: LIST
81921: LIST
81922: PPUSH
81923: CALL_OW 1
81927: ST_TO_ADDR
81928: GO 81944
// i := i - 1 ;
81930: LD_ADDR_VAR 0 5
81934: PUSH
81935: LD_VAR 0 5
81939: PUSH
81940: LD_INT 1
81942: MINUS
81943: ST_TO_ADDR
// end ;
81944: GO 81750
81946: POP
81947: POP
// for i in tmp do
81948: LD_ADDR_VAR 0 5
81952: PUSH
81953: LD_VAR 0 7
81957: PUSH
81958: FOR_IN
81959: IFFALSE 81997
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
81961: LD_VAR 0 1
81965: PPUSH
81966: LD_VAR 0 5
81970: PUSH
81971: LD_INT 1
81973: ARRAY
81974: PPUSH
81975: LD_VAR 0 5
81979: PUSH
81980: LD_INT 2
81982: ARRAY
81983: PPUSH
81984: CALL 80939 0 3
81988: NOT
81989: IFFALSE 81995
// exit ;
81991: POP
81992: POP
81993: GO 81999
81995: GO 81958
81997: POP
81998: POP
// end ;
81999: LD_VAR 0 4
82003: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
82004: LD_INT 0
82006: PPUSH
82007: PPUSH
82008: PPUSH
82009: PPUSH
82010: PPUSH
82011: PPUSH
82012: PPUSH
// if not GetClass ( unit ) = class_sniper then
82013: LD_VAR 0 1
82017: PPUSH
82018: CALL_OW 257
82022: PUSH
82023: LD_INT 5
82025: EQUAL
82026: NOT
82027: IFFALSE 82031
// exit ;
82029: GO 82419
// dist := 8 ;
82031: LD_ADDR_VAR 0 5
82035: PUSH
82036: LD_INT 8
82038: ST_TO_ADDR
// viewRange := 12 ;
82039: LD_ADDR_VAR 0 7
82043: PUSH
82044: LD_INT 12
82046: ST_TO_ADDR
// side := GetSide ( unit ) ;
82047: LD_ADDR_VAR 0 6
82051: PUSH
82052: LD_VAR 0 1
82056: PPUSH
82057: CALL_OW 255
82061: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82062: LD_INT 61
82064: PPUSH
82065: LD_VAR 0 6
82069: PPUSH
82070: CALL_OW 321
82074: PUSH
82075: LD_INT 2
82077: EQUAL
82078: IFFALSE 82088
// viewRange := 16 ;
82080: LD_ADDR_VAR 0 7
82084: PUSH
82085: LD_INT 16
82087: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82088: LD_VAR 0 1
82092: PPUSH
82093: LD_VAR 0 2
82097: PPUSH
82098: LD_VAR 0 3
82102: PPUSH
82103: CALL_OW 297
82107: PUSH
82108: LD_VAR 0 5
82112: GREATER
82113: IFFALSE 82192
// begin ComMoveXY ( unit , x , y ) ;
82115: LD_VAR 0 1
82119: PPUSH
82120: LD_VAR 0 2
82124: PPUSH
82125: LD_VAR 0 3
82129: PPUSH
82130: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82134: LD_INT 35
82136: PPUSH
82137: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82141: LD_VAR 0 1
82145: PPUSH
82146: LD_VAR 0 2
82150: PPUSH
82151: LD_VAR 0 3
82155: PPUSH
82156: CALL 75856 0 3
82160: NOT
82161: IFFALSE 82165
// exit ;
82163: GO 82419
// until GetDistUnitXY ( unit , x , y ) < dist ;
82165: LD_VAR 0 1
82169: PPUSH
82170: LD_VAR 0 2
82174: PPUSH
82175: LD_VAR 0 3
82179: PPUSH
82180: CALL_OW 297
82184: PUSH
82185: LD_VAR 0 5
82189: LESS
82190: IFFALSE 82134
// end ; ComTurnXY ( unit , x , y ) ;
82192: LD_VAR 0 1
82196: PPUSH
82197: LD_VAR 0 2
82201: PPUSH
82202: LD_VAR 0 3
82206: PPUSH
82207: CALL_OW 118
// wait ( 5 ) ;
82211: LD_INT 5
82213: PPUSH
82214: CALL_OW 67
// _d := GetDir ( unit ) ;
82218: LD_ADDR_VAR 0 10
82222: PUSH
82223: LD_VAR 0 1
82227: PPUSH
82228: CALL_OW 254
82232: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
82233: LD_ADDR_VAR 0 8
82237: PUSH
82238: LD_VAR 0 1
82242: PPUSH
82243: CALL_OW 250
82247: PPUSH
82248: LD_VAR 0 10
82252: PPUSH
82253: LD_VAR 0 5
82257: PPUSH
82258: CALL_OW 272
82262: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
82263: LD_ADDR_VAR 0 9
82267: PUSH
82268: LD_VAR 0 1
82272: PPUSH
82273: CALL_OW 251
82277: PPUSH
82278: LD_VAR 0 10
82282: PPUSH
82283: LD_VAR 0 5
82287: PPUSH
82288: CALL_OW 273
82292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82293: LD_VAR 0 8
82297: PPUSH
82298: LD_VAR 0 9
82302: PPUSH
82303: CALL_OW 488
82307: NOT
82308: IFFALSE 82312
// exit ;
82310: GO 82419
// ComAnimCustom ( unit , 1 ) ;
82312: LD_VAR 0 1
82316: PPUSH
82317: LD_INT 1
82319: PPUSH
82320: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82324: LD_VAR 0 8
82328: PPUSH
82329: LD_VAR 0 9
82333: PPUSH
82334: LD_VAR 0 6
82338: PPUSH
82339: LD_VAR 0 7
82343: PPUSH
82344: CALL_OW 330
// repeat wait ( 1 ) ;
82348: LD_INT 1
82350: PPUSH
82351: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
82355: LD_VAR 0 1
82359: PPUSH
82360: CALL_OW 316
82364: PUSH
82365: LD_VAR 0 1
82369: PPUSH
82370: CALL_OW 314
82374: OR
82375: PUSH
82376: LD_VAR 0 1
82380: PPUSH
82381: CALL_OW 302
82385: NOT
82386: OR
82387: PUSH
82388: LD_VAR 0 1
82392: PPUSH
82393: CALL_OW 301
82397: OR
82398: IFFALSE 82348
// RemoveSeeing ( _x , _y , side ) ;
82400: LD_VAR 0 8
82404: PPUSH
82405: LD_VAR 0 9
82409: PPUSH
82410: LD_VAR 0 6
82414: PPUSH
82415: CALL_OW 331
// end ; end_of_file
82419: LD_VAR 0 4
82423: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82424: LD_VAR 0 1
82428: PUSH
82429: LD_INT 200
82431: DOUBLE
82432: GREATEREQUAL
82433: IFFALSE 82441
82435: LD_INT 299
82437: DOUBLE
82438: LESSEQUAL
82439: IFTRUE 82443
82441: GO 82475
82443: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
82444: LD_VAR 0 1
82448: PPUSH
82449: LD_VAR 0 2
82453: PPUSH
82454: LD_VAR 0 3
82458: PPUSH
82459: LD_VAR 0 4
82463: PPUSH
82464: LD_VAR 0 5
82468: PPUSH
82469: CALL 78541 0 5
82473: GO 82476
82475: POP
// end ;
82476: PPOPN 11
82478: END
