// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export savedVsevolod , vehiclesFrom06 , resourcesFrom06 , matPredStatus , heikeHeavyLosses ; export xavierPatrolPathKabul ; export xavierPatrol , xavierFirstPatrol , xavierCanSaySpotDialog , xavierJoinToPlayer , xavierSpawned ; export canLeaveMessage , messageForXavier ; export yashinVeh , yashinSearchVeh ; export canCaptureHeike , heikeCaptured ; export enableCounter , missionTimer ; export cratesSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 330 0 0
// vehiclesFrom06 = LoadVariable ( 06_Vehicles_2 , [ ] ) ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_STRING 06_Vehicles_2
  31: PPUSH
  32: EMPTY
  33: PPUSH
  34: CALL_OW 30
  38: ST_TO_ADDR
// resourcesFrom06 = LoadVariable ( 06_ResourcesInCargo_3 , [ ] ) ;
  39: LD_ADDR_EXP 3
  43: PUSH
  44: LD_STRING 06_ResourcesInCargo_3
  46: PPUSH
  47: EMPTY
  48: PPUSH
  49: CALL_OW 30
  53: ST_TO_ADDR
// savedVsevolod = LoadVariable ( 06_VsevolodStatus_4 , false ) ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_STRING 06_VsevolodStatus_4
  61: PPUSH
  62: LD_INT 0
  64: PPUSH
  65: CALL_OW 30
  69: ST_TO_ADDR
// matPredStatus = LoadVariable ( 06_TechMatPredStatus_1 , false ) ;
  70: LD_ADDR_EXP 4
  74: PUSH
  75: LD_STRING 06_TechMatPredStatus_1
  77: PPUSH
  78: LD_INT 0
  80: PPUSH
  81: CALL_OW 30
  85: ST_TO_ADDR
// heikeHeavyLosses = LoadVariable ( 04_HeikeHeavyLosses_1 , true ) ;
  86: LD_ADDR_EXP 5
  90: PUSH
  91: LD_STRING 04_HeikeHeavyLosses_1
  93: PPUSH
  94: LD_INT 1
  96: PPUSH
  97: CALL_OW 30
 101: ST_TO_ADDR
// xavierPatrolPathKabul = [ [ 113 , 53 ] , [ 111 , 46 ] , [ 118 , 43 ] , [ 107 , 31 ] , [ 94 , 29 ] , [ 90 , 36 ] , [ 92 , 53 ] , [ 103 , 48 ] ] ;
 102: LD_ADDR_EXP 6
 106: PUSH
 107: LD_INT 113
 109: PUSH
 110: LD_INT 53
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: PUSH
 117: LD_INT 111
 119: PUSH
 120: LD_INT 46
 122: PUSH
 123: EMPTY
 124: LIST
 125: LIST
 126: PUSH
 127: LD_INT 118
 129: PUSH
 130: LD_INT 43
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: PUSH
 137: LD_INT 107
 139: PUSH
 140: LD_INT 31
 142: PUSH
 143: EMPTY
 144: LIST
 145: LIST
 146: PUSH
 147: LD_INT 94
 149: PUSH
 150: LD_INT 29
 152: PUSH
 153: EMPTY
 154: LIST
 155: LIST
 156: PUSH
 157: LD_INT 90
 159: PUSH
 160: LD_INT 36
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: PUSH
 167: LD_INT 92
 169: PUSH
 170: LD_INT 53
 172: PUSH
 173: EMPTY
 174: LIST
 175: LIST
 176: PUSH
 177: LD_INT 103
 179: PUSH
 180: LD_INT 48
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: LIST
 192: LIST
 193: LIST
 194: LIST
 195: LIST
 196: ST_TO_ADDR
// xavierPatrol = false ;
 197: LD_ADDR_EXP 7
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// xavierFirstPatrol = true ;
 205: LD_ADDR_EXP 8
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
 213: LD_ADDR_EXP 9
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// xavierJoinToPlayer = false ;
 221: LD_ADDR_EXP 10
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// xavierSpawned = false ;
 229: LD_ADDR_EXP 11
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// canLeaveMessage = false ;
 237: LD_ADDR_EXP 12
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// messageForXavier = 0 ;
 245: LD_ADDR_EXP 13
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// yashinVeh = 0 ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// yashinSearchVeh = false ;
 261: LD_ADDR_EXP 15
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// canCaptureHeike = false ;
 269: LD_ADDR_EXP 16
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// heikeCaptured = false ;
 277: LD_ADDR_EXP 17
 281: PUSH
 282: LD_INT 0
 284: ST_TO_ADDR
// missionTimer = 0 0$00 ;
 285: LD_ADDR_EXP 19
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// enableCounter = false ;
 293: LD_ADDR_EXP 18
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// cratesSpawned = 0 ;
 301: LD_ADDR_EXP 20
 305: PUSH
 306: LD_INT 0
 308: ST_TO_ADDR
// PrepareRussians ;
 309: CALL 1111 0 0
// PrepareArabians ;
 313: CALL 4770 0 0
// Nef_PrepareNature ;
 317: CALL 27326 0 0
// MissionIntro ;
 321: CALL 6438 0 0
// end ; end_of_file
 325: LD_VAR 0 1
 329: RET
// export function InitMapConfig ; begin
 330: LD_INT 0
 332: PPUSH
// BaseMapConfig ;
 333: CALL 346 0 0
// MissionMapConfig ;
 337: CALL 436 0 0
// end ;
 341: LD_VAR 0 1
 345: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 346: LD_INT 0
 348: PPUSH
// animalsAmount = [ 3 , 3 , 1 , 3 , 2 ] ;
 349: LD_ADDR_EXP 21
 353: PUSH
 354: LD_INT 3
 356: PUSH
 357: LD_INT 3
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: LD_INT 3
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: LIST
 374: LIST
 375: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 376: LD_ADDR_EXP 22
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: LD_INT 2
 389: PUSH
 390: LD_INT 2
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: LIST
 398: ST_TO_ADDR
// animalsAgression = 3 ;
 399: LD_ADDR_EXP 23
 403: PUSH
 404: LD_INT 3
 406: ST_TO_ADDR
// debugMode = 0 ;
 407: LD_ADDR_EXP 26
 411: PUSH
 412: LD_INT 0
 414: ST_TO_ADDR
// missionPrefix = 07_ ;
 415: LD_ADDR_EXP 24
 419: PUSH
 420: LD_STRING 07_
 422: ST_TO_ADDR
// previousMissionPrefix = 06_ ;
 423: LD_ADDR_EXP 25
 427: PUSH
 428: LD_STRING 06_
 430: ST_TO_ADDR
// end ;
 431: LD_VAR 0 1
 435: RET
// export enemySkillLevel , destroyKabulBaseTime , heikeSoldiers , heikeMortars , heikeVehicles , heikeAdditionalSoldiers , heikeAdditionalMortars , heikeAdditionalVehicles ; export heikePath , vsevolodBaseStartCrates ; function MissionMapConfig ; begin
 436: LD_INT 0
 438: PPUSH
// enemySkillLevel = [ 3 , 4 , 5 , 6 ] [ Difficulty ] ;
 439: LD_ADDR_EXP 27
 443: PUSH
 444: LD_INT 3
 446: PUSH
 447: LD_INT 4
 449: PUSH
 450: LD_INT 5
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: LIST
 461: PUSH
 462: LD_OWVAR 67
 466: ARRAY
 467: ST_TO_ADDR
// destroyKabulBaseTime = [ 70 70$0 , 60 60$0 , 45 45$0 , 40 40$00 ] [ Difficulty ] ;
 468: LD_ADDR_EXP 28
 472: PUSH
 473: LD_INT 147000
 475: PUSH
 476: LD_INT 126000
 478: PUSH
 479: LD_INT 94500
 481: PUSH
 482: LD_INT 84000
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: LD_OWVAR 67
 495: ARRAY
 496: ST_TO_ADDR
// heikeSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 497: LD_ADDR_EXP 29
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: LD_INT 2
 513: PUSH
 514: EMPTY
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PUSH
 520: LD_OWVAR 67
 524: ARRAY
 525: ST_TO_ADDR
// heikeMortars = [ 0 , 1 , 2 , 2 ] [ Difficulty ] ;
 526: LD_ADDR_EXP 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 2
 539: PUSH
 540: LD_INT 2
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: LD_OWVAR 67
 553: ARRAY
 554: ST_TO_ADDR
// heikeVehicles = [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 31
 559: PUSH
 560: LD_INT 1
 562: PUSH
 563: LD_INT 2
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 2
 571: PUSH
 572: EMPTY
 573: LIST
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: LD_OWVAR 67
 582: ARRAY
 583: ST_TO_ADDR
// heikeAdditionalSoldiers = [ 2 , 2 , 2 , 2 ] [ Difficulty ] ;
 584: LD_ADDR_EXP 32
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 2
 594: PUSH
 595: LD_INT 2
 597: PUSH
 598: LD_INT 2
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: LD_OWVAR 67
 611: ARRAY
 612: ST_TO_ADDR
// heikeAdditionalMortars = [ 0 , 0 , 1 , 2 ] [ Difficulty ] ;
 613: LD_ADDR_EXP 33
 617: PUSH
 618: LD_INT 0
 620: PUSH
 621: LD_INT 0
 623: PUSH
 624: LD_INT 1
 626: PUSH
 627: LD_INT 2
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: LIST
 634: LIST
 635: PUSH
 636: LD_OWVAR 67
 640: ARRAY
 641: ST_TO_ADDR
// heikeAdditionalVehicles = [ 1 , 2 , 3 , 3 ] [ Difficulty ] ;
 642: LD_ADDR_EXP 34
 646: PUSH
 647: LD_INT 1
 649: PUSH
 650: LD_INT 2
 652: PUSH
 653: LD_INT 3
 655: PUSH
 656: LD_INT 3
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: LIST
 663: LIST
 664: PUSH
 665: LD_OWVAR 67
 669: ARRAY
 670: ST_TO_ADDR
// heikePath = [ [ 106 , 159 ] , [ 91 , 130 ] , [ 75 , 98 ] , [ 54 , 60 ] , [ 86 , 54 ] , [ 128 , 42 ] , [ 142 , 29 ] ] ;
 671: LD_ADDR_EXP 35
 675: PUSH
 676: LD_INT 106
 678: PUSH
 679: LD_INT 159
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PUSH
 686: LD_INT 91
 688: PUSH
 689: LD_INT 130
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PUSH
 696: LD_INT 75
 698: PUSH
 699: LD_INT 98
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PUSH
 706: LD_INT 54
 708: PUSH
 709: LD_INT 60
 711: PUSH
 712: EMPTY
 713: LIST
 714: LIST
 715: PUSH
 716: LD_INT 86
 718: PUSH
 719: LD_INT 54
 721: PUSH
 722: EMPTY
 723: LIST
 724: LIST
 725: PUSH
 726: LD_INT 128
 728: PUSH
 729: LD_INT 42
 731: PUSH
 732: EMPTY
 733: LIST
 734: LIST
 735: PUSH
 736: LD_INT 142
 738: PUSH
 739: LD_INT 29
 741: PUSH
 742: EMPTY
 743: LIST
 744: LIST
 745: PUSH
 746: EMPTY
 747: LIST
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: ST_TO_ADDR
// vsevolodBaseStartCrates = [ 200 , 150 , 100 , 50 ] [ Difficulty ] ;
 755: LD_ADDR_EXP 36
 759: PUSH
 760: LD_INT 200
 762: PUSH
 763: LD_INT 150
 765: PUSH
 766: LD_INT 100
 768: PUSH
 769: LD_INT 50
 771: PUSH
 772: EMPTY
 773: LIST
 774: LIST
 775: LIST
 776: LIST
 777: PUSH
 778: LD_OWVAR 67
 782: ARRAY
 783: ST_TO_ADDR
// end ;
 784: LD_VAR 0 1
 788: RET
// every 0 0$1 trigger debugMode do var i ;
 789: LD_EXP 26
 793: IFFALSE 1108
 795: GO 797
 797: DISABLE
 798: LD_INT 0
 800: PPUSH
// begin enable ;
 801: ENABLE
// FogOff ( your_side ) ;
 802: LD_OWVAR 2
 806: PPUSH
 807: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 811: LD_ADDR_VAR 0 1
 815: PUSH
 816: LD_INT 22
 818: PUSH
 819: LD_OWVAR 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: LD_INT 2
 830: PUSH
 831: LD_INT 21
 833: PUSH
 834: LD_INT 1
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 21
 843: PUSH
 844: LD_INT 2
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: PUSH
 865: FOR_IN
 866: IFFALSE 882
// SetLives ( i , 1000 ) ;
 868: LD_VAR 0 1
 872: PPUSH
 873: LD_INT 1000
 875: PPUSH
 876: CALL_OW 234
 880: GO 865
 882: POP
 883: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 884: LD_ADDR_VAR 0 1
 888: PUSH
 889: LD_INT 22
 891: PUSH
 892: LD_OWVAR 2
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: LD_INT 21
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: PPUSH
 915: CALL_OW 69
 919: PUSH
 920: FOR_IN
 921: IFFALSE 985
// begin SetSkill ( i , skill_combat , 10 ) ;
 923: LD_VAR 0 1
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_INT 10
 933: PPUSH
 934: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 938: LD_VAR 0 1
 942: PPUSH
 943: LD_INT 2
 945: PPUSH
 946: LD_INT 10
 948: PPUSH
 949: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 953: LD_VAR 0 1
 957: PPUSH
 958: LD_INT 3
 960: PPUSH
 961: LD_INT 10
 963: PPUSH
 964: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 968: LD_VAR 0 1
 972: PPUSH
 973: LD_INT 4
 975: PPUSH
 976: LD_INT 10
 978: PPUSH
 979: CALL_OW 237
// end ;
 983: GO 920
 985: POP
 986: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 987: LD_ADDR_VAR 0 1
 991: PUSH
 992: LD_INT 22
 994: PUSH
 995: LD_OWVAR 2
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: LD_INT 2
1006: PUSH
1007: LD_INT 30
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: PUSH
1017: LD_INT 30
1019: PUSH
1020: LD_INT 1
1022: PUSH
1023: EMPTY
1024: LIST
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PPUSH
1036: CALL_OW 69
1040: PUSH
1041: FOR_IN
1042: IFFALSE 1106
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 274
1053: PPUSH
1054: LD_INT 1
1056: PPUSH
1057: LD_INT 9999
1059: PPUSH
1060: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1064: LD_VAR 0 1
1068: PPUSH
1069: CALL_OW 274
1073: PPUSH
1074: LD_INT 2
1076: PPUSH
1077: LD_INT 9999
1079: PPUSH
1080: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1084: LD_VAR 0 1
1088: PPUSH
1089: CALL_OW 274
1093: PPUSH
1094: LD_INT 3
1096: PPUSH
1097: LD_INT 9999
1099: PPUSH
1100: CALL_OW 277
// end ;
1104: GO 1041
1106: POP
1107: POP
// end ; end_of_file
1108: PPOPN 1
1110: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Vsevolod ; export Platonov , Popov , Yashin ; export vsevolodTeam ; export other_survivors ; export survivorsToPlace ; export function PrepareRussians ; begin
1111: LD_INT 0
1113: PPUSH
// vsevolodTeam = [ ] ;
1114: LD_ADDR_EXP 52
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// PrepareYashin ;
1121: CALL 3701 0 0
// if savedVsevolod then
1125: LD_EXP 1
1129: IFFALSE 1151
// begin PrepareVsevolodBase ;
1131: CALL 4164 0 0
// PrepareHeroes ( RussianSpawnArea1 , 0 ) ;
1135: LD_INT 1
1137: PPUSH
1138: LD_INT 0
1140: PPUSH
1141: CALL 1329 0 2
// SpawnVsevolodTeamInBase ;
1145: CALL 4447 0 0
// end else
1149: GO 1165
// begin PrepareHeroes ( RussianSpawnArea2 , 5 ) ;
1151: LD_INT 2
1153: PPUSH
1154: LD_INT 5
1156: PPUSH
1157: CALL 1329 0 2
// SpawnPlatonovReinforces ;
1161: CALL 3744 0 0
// end ; if matPredStatus = state_researched then
1165: LD_EXP 4
1169: PUSH
1170: LD_INT 2
1172: EQUAL
1173: IFFALSE 1188
// SetTech ( tech_MatPred , 3 , state_researched ) ;
1175: LD_INT 9
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 2
1183: PPUSH
1184: CALL_OW 322
// end ;
1188: LD_VAR 0 1
1192: RET
// export function PrepareXavierRu ( x , y , dir ) ; begin
1193: LD_INT 0
1195: PPUSH
// uc_side = 3 ;
1196: LD_ADDR_OWVAR 20
1200: PUSH
1201: LD_INT 3
1203: ST_TO_ADDR
// uc_nation = 3 ;
1204: LD_ADDR_OWVAR 21
1208: PUSH
1209: LD_INT 3
1211: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1212: LD_ADDR_EXP 55
1216: PUSH
1217: LD_STRING Xavier2
1219: PPUSH
1220: LD_INT 0
1222: PPUSH
1223: LD_INT 0
1225: PPUSH
1226: CALL 12172 0 3
1230: ST_TO_ADDR
// SetDir ( Xavier , dir ) ;
1231: LD_EXP 55
1235: PPUSH
1236: LD_VAR 0 3
1240: PPUSH
1241: CALL_OW 233
// PlaceUnitXY ( Xavier , x , y , false ) ;
1245: LD_EXP 55
1249: PPUSH
1250: LD_VAR 0 1
1254: PPUSH
1255: LD_VAR 0 2
1259: PPUSH
1260: LD_INT 0
1262: PPUSH
1263: CALL_OW 48
// end ;
1267: LD_VAR 0 4
1271: RET
// export function PrepareXavierRuVeh ( veh ) ; begin
1272: LD_INT 0
1274: PPUSH
// uc_side = 3 ;
1275: LD_ADDR_OWVAR 20
1279: PUSH
1280: LD_INT 3
1282: ST_TO_ADDR
// uc_nation = 3 ;
1283: LD_ADDR_OWVAR 21
1287: PUSH
1288: LD_INT 3
1290: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier2 , false , 0 ) ;
1291: LD_ADDR_EXP 55
1295: PUSH
1296: LD_STRING Xavier2
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12172 0 3
1309: ST_TO_ADDR
// PlaceHumanInUnit ( Xavier , veh ) ;
1310: LD_EXP 55
1314: PPUSH
1315: LD_VAR 0 1
1319: PPUSH
1320: CALL_OW 52
// end ;
1324: LD_VAR 0 2
1328: RET
// function PrepareHeroes ( area , dir ) ; var i , unit , car , cargoList , bigCargoList ; begin
1329: LD_INT 0
1331: PPUSH
1332: PPUSH
1333: PPUSH
1334: PPUSH
1335: PPUSH
1336: PPUSH
// uc_side = 3 ;
1337: LD_ADDR_OWVAR 20
1341: PUSH
1342: LD_INT 3
1344: ST_TO_ADDR
// uc_nation = 3 ;
1345: LD_ADDR_OWVAR 21
1349: PUSH
1350: LD_INT 3
1352: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , 0 ) ;
1353: LD_ADDR_EXP 37
1357: PUSH
1358: LD_STRING Burlak
1360: PPUSH
1361: LD_INT 1
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL 12172 0 3
1371: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , true , 0 ) ;
1372: LD_ADDR_EXP 42
1376: PUSH
1377: LD_STRING Titov
1379: PPUSH
1380: LD_INT 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL 12172 0 3
1390: ST_TO_ADDR
// if not Titov and TestCharacters ( 06_VSTitov ) then
1391: LD_EXP 42
1395: NOT
1396: PUSH
1397: LD_STRING 06_VSTitov
1399: PPUSH
1400: CALL_OW 28
1404: AND
1405: IFFALSE 1442
// begin Titov := PrepareUnitExt ( VSTitov , true , 0 ) ;
1407: LD_ADDR_EXP 42
1411: PUSH
1412: LD_STRING VSTitov
1414: PPUSH
1415: LD_INT 1
1417: PPUSH
1418: LD_INT 0
1420: PPUSH
1421: CALL 12172 0 3
1425: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Titov ;
1426: LD_ADDR_EXP 52
1430: PUSH
1431: LD_EXP 52
1435: PUSH
1436: LD_EXP 42
1440: ADD
1441: ST_TO_ADDR
// end ; Dolgov := PrepareUnitExt ( Dolgov , true , 0 ) ;
1442: LD_ADDR_EXP 43
1446: PUSH
1447: LD_STRING Dolgov
1449: PPUSH
1450: LD_INT 1
1452: PPUSH
1453: LD_INT 0
1455: PPUSH
1456: CALL 12172 0 3
1460: ST_TO_ADDR
// if not Dolgov and TestCharacters ( 06_VSDolgov ) then
1461: LD_EXP 43
1465: NOT
1466: PUSH
1467: LD_STRING 06_VSDolgov
1469: PPUSH
1470: CALL_OW 28
1474: AND
1475: IFFALSE 1512
// begin Dolgov := PrepareUnitExt ( VSDolgov , true , 0 ) ;
1477: LD_ADDR_EXP 43
1481: PUSH
1482: LD_STRING VSDolgov
1484: PPUSH
1485: LD_INT 1
1487: PPUSH
1488: LD_INT 0
1490: PPUSH
1491: CALL 12172 0 3
1495: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Dolgov ;
1496: LD_ADDR_EXP 52
1500: PUSH
1501: LD_EXP 52
1505: PUSH
1506: LD_EXP 43
1510: ADD
1511: ST_TO_ADDR
// end ; Lipshchin := PrepareUnitExt ( Lipshchin , true , 0 ) ;
1512: LD_ADDR_EXP 44
1516: PUSH
1517: LD_STRING Lipshchin
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL 12172 0 3
1530: ST_TO_ADDR
// if not Lipshchin and TestCharacters ( 06_VSLipshchin ) then
1531: LD_EXP 44
1535: NOT
1536: PUSH
1537: LD_STRING 06_VSLipshchin
1539: PPUSH
1540: CALL_OW 28
1544: AND
1545: IFFALSE 1582
// begin Lipshchin := PrepareUnitExt ( VSLipshchin , true , 0 ) ;
1547: LD_ADDR_EXP 44
1551: PUSH
1552: LD_STRING VSLipshchin
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: LD_INT 0
1560: PPUSH
1561: CALL 12172 0 3
1565: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Lipshchin ;
1566: LD_ADDR_EXP 52
1570: PUSH
1571: LD_EXP 52
1575: PUSH
1576: LD_EXP 44
1580: ADD
1581: ST_TO_ADDR
// end ; Karamazov := PrepareUnitExt ( Karamazov , true , 0 ) ;
1582: LD_ADDR_EXP 38
1586: PUSH
1587: LD_STRING Karamazov
1589: PPUSH
1590: LD_INT 1
1592: PPUSH
1593: LD_INT 0
1595: PPUSH
1596: CALL 12172 0 3
1600: ST_TO_ADDR
// if not Karamazov and TestCharacters ( 06_VSKaramazov ) then
1601: LD_EXP 38
1605: NOT
1606: PUSH
1607: LD_STRING 06_VSKaramazov
1609: PPUSH
1610: CALL_OW 28
1614: AND
1615: IFFALSE 1652
// begin Karamazov := PrepareUnitExt ( VSKaramazov , true , 0 ) ;
1617: LD_ADDR_EXP 38
1621: PUSH
1622: LD_STRING VSKaramazov
1624: PPUSH
1625: LD_INT 1
1627: PPUSH
1628: LD_INT 0
1630: PPUSH
1631: CALL 12172 0 3
1635: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Karamazov ;
1636: LD_ADDR_EXP 52
1640: PUSH
1641: LD_EXP 52
1645: PUSH
1646: LD_EXP 38
1650: ADD
1651: ST_TO_ADDR
// end ; Petrovova := PrepareUnitExt ( Petrovova , true , 0 ) ;
1652: LD_ADDR_EXP 39
1656: PUSH
1657: LD_STRING Petrovova
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL 12172 0 3
1670: ST_TO_ADDR
// if not Petrovova and TestCharacters ( 06_VSPetrovova ) then
1671: LD_EXP 39
1675: NOT
1676: PUSH
1677: LD_STRING 06_VSPetrovova
1679: PPUSH
1680: CALL_OW 28
1684: AND
1685: IFFALSE 1722
// begin Petrovova := PrepareUnitExt ( VSPetrovova , true , 0 ) ;
1687: LD_ADDR_EXP 39
1691: PUSH
1692: LD_STRING VSPetrovova
1694: PPUSH
1695: LD_INT 1
1697: PPUSH
1698: LD_INT 0
1700: PPUSH
1701: CALL 12172 0 3
1705: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrovova ;
1706: LD_ADDR_EXP 52
1710: PUSH
1711: LD_EXP 52
1715: PUSH
1716: LD_EXP 39
1720: ADD
1721: ST_TO_ADDR
// end ; Gleb := PrepareUnitExt ( Gleb , true , 0 ) ;
1722: LD_ADDR_EXP 40
1726: PUSH
1727: LD_STRING Gleb
1729: PPUSH
1730: LD_INT 1
1732: PPUSH
1733: LD_INT 0
1735: PPUSH
1736: CALL 12172 0 3
1740: ST_TO_ADDR
// if not Gleb and TestCharacters ( 06_VSGleb ) then
1741: LD_EXP 40
1745: NOT
1746: PUSH
1747: LD_STRING 06_VSGleb
1749: PPUSH
1750: CALL_OW 28
1754: AND
1755: IFFALSE 1792
// begin Gleb := PrepareUnitExt ( VSGleb , true , 0 ) ;
1757: LD_ADDR_EXP 40
1761: PUSH
1762: LD_STRING VSGleb
1764: PPUSH
1765: LD_INT 1
1767: PPUSH
1768: LD_INT 0
1770: PPUSH
1771: CALL 12172 0 3
1775: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Gleb ;
1776: LD_ADDR_EXP 52
1780: PUSH
1781: LD_EXP 52
1785: PUSH
1786: LD_EXP 40
1790: ADD
1791: ST_TO_ADDR
// end ; Petrosyan := PrepareUnitExt ( Petrosyan , true , 0 ) ;
1792: LD_ADDR_EXP 41
1796: PUSH
1797: LD_STRING Petrosyan
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL 12172 0 3
1810: ST_TO_ADDR
// if not Petrosyan and TestCharacters ( 06_VSPetrosyan ) then
1811: LD_EXP 41
1815: NOT
1816: PUSH
1817: LD_STRING 06_VSPetrosyan
1819: PPUSH
1820: CALL_OW 28
1824: AND
1825: IFFALSE 1862
// begin Petrosyan := PrepareUnitExt ( VSPetrosyan , true , 0 ) ;
1827: LD_ADDR_EXP 41
1831: PUSH
1832: LD_STRING VSPetrosyan
1834: PPUSH
1835: LD_INT 1
1837: PPUSH
1838: LD_INT 0
1840: PPUSH
1841: CALL 12172 0 3
1845: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ Petrosyan ;
1846: LD_ADDR_EXP 52
1850: PUSH
1851: LD_EXP 52
1855: PUSH
1856: LD_EXP 41
1860: ADD
1861: ST_TO_ADDR
// end ; if savedVsevolod then
1862: LD_EXP 1
1866: IFFALSE 1976
// begin Kirilenkova := PrepareUnitExt ( Kirilenkova , true , class_scientistic ) ;
1868: LD_ADDR_EXP 45
1872: PUSH
1873: LD_STRING Kirilenkova
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: CALL 12172 0 3
1886: ST_TO_ADDR
// Belkov := PrepareUnitExt ( Belkov , true , class_soldier ) ;
1887: LD_ADDR_EXP 46
1891: PUSH
1892: LD_STRING Belkov
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL 12172 0 3
1905: ST_TO_ADDR
// Belkov2 := PrepareUnitExt ( Belkov2 , true , class_soldier ) ;
1906: LD_ADDR_EXP 47
1910: PUSH
1911: LD_STRING Belkov2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 1
1919: PPUSH
1920: CALL 12172 0 3
1924: ST_TO_ADDR
// Vsevolod := PrepareUnitExt ( Vsevolod , true , class_soldier ) ;
1925: LD_ADDR_EXP 48
1929: PUSH
1930: LD_STRING Vsevolod
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: LD_INT 1
1938: PPUSH
1939: CALL 12172 0 3
1943: ST_TO_ADDR
// PlaceUnitArea ( Vsevolod , SeviSpawnArea , false ) ;
1944: LD_EXP 48
1948: PPUSH
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
// ComTurnXY ( Vsevolod , 100 , 153 ) ;
1959: LD_EXP 48
1963: PPUSH
1964: LD_INT 100
1966: PPUSH
1967: LD_INT 153
1969: PPUSH
1970: CALL_OW 118
// end else
1974: GO 2015
// begin Kirilenkova := CreateCharacter ( 04_Kirilenkova ) ;
1976: LD_ADDR_EXP 45
1980: PUSH
1981: LD_STRING 04_Kirilenkova
1983: PPUSH
1984: CALL_OW 34
1988: ST_TO_ADDR
// Belkov := CreateCharacter ( 04_Belkov ) ;
1989: LD_ADDR_EXP 46
1993: PUSH
1994: LD_STRING 04_Belkov
1996: PPUSH
1997: CALL_OW 34
2001: ST_TO_ADDR
// Belkov2 := CreateCharacter ( 04_Belkov2 ) ;
2002: LD_ADDR_EXP 47
2006: PUSH
2007: LD_STRING 04_Belkov2
2009: PPUSH
2010: CALL_OW 34
2014: ST_TO_ADDR
// end ; Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
2015: LD_ADDR_EXP 49
2019: PUSH
2020: LD_STRING Platonov
2022: PPUSH
2023: LD_INT 0
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: CALL 12172 0 3
2033: ST_TO_ADDR
// Popov = PrepareUnitExt ( Popov , false , 0 ) ;
2034: LD_ADDR_EXP 50
2038: PUSH
2039: LD_STRING Popov
2041: PPUSH
2042: LD_INT 0
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL 12172 0 3
2052: ST_TO_ADDR
// other_survivors = CreateCharacterSet ( 06_other_survivors ) ;
2053: LD_ADDR_EXP 53
2057: PUSH
2058: LD_STRING 06_other_survivors
2060: PPUSH
2061: CALL_OW 31
2065: ST_TO_ADDR
// survivorsToPlace = other_survivors ;
2066: LD_ADDR_EXP 54
2070: PUSH
2071: LD_EXP 53
2075: ST_TO_ADDR
// vsevolodTeam = vsevolodTeam ^ CreateCharacterSet ( 06_other_survivors_with_vsevolod ) ;
2076: LD_ADDR_EXP 52
2080: PUSH
2081: LD_EXP 52
2085: PUSH
2086: LD_STRING 06_other_survivors_with_vsevolod
2088: PPUSH
2089: CALL_OW 31
2093: ADD
2094: ST_TO_ADDR
// for i := 1 to vehiclesFrom06 do
2095: LD_ADDR_VAR 0 4
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_EXP 2
2109: PUSH
2110: FOR_TO
2111: IFFALSE 2608
// begin uc_nation = vehiclesFrom06 [ i ] [ 1 ] ;
2113: LD_ADDR_OWVAR 21
2117: PUSH
2118: LD_EXP 2
2122: PUSH
2123: LD_VAR 0 4
2127: ARRAY
2128: PUSH
2129: LD_INT 1
2131: ARRAY
2132: ST_TO_ADDR
// vc_chassis := vehiclesFrom06 [ i ] [ 2 ] ;
2133: LD_ADDR_OWVAR 37
2137: PUSH
2138: LD_EXP 2
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: ST_TO_ADDR
// vc_engine = vehiclesFrom06 [ i ] [ 3 ] ;
2153: LD_ADDR_OWVAR 39
2157: PUSH
2158: LD_EXP 2
2162: PUSH
2163: LD_VAR 0 4
2167: ARRAY
2168: PUSH
2169: LD_INT 3
2171: ARRAY
2172: ST_TO_ADDR
// vc_control = vehiclesFrom06 [ i ] [ 4 ] ;
2173: LD_ADDR_OWVAR 38
2177: PUSH
2178: LD_EXP 2
2182: PUSH
2183: LD_VAR 0 4
2187: ARRAY
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: ST_TO_ADDR
// vc_weapon := vehiclesFrom06 [ i ] [ 5 ] ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_EXP 2
2202: PUSH
2203: LD_VAR 0 4
2207: ARRAY
2208: PUSH
2209: LD_INT 5
2211: ARRAY
2212: ST_TO_ADDR
// uc_direction := dir ;
2213: LD_ADDR_OWVAR 24
2217: PUSH
2218: LD_VAR 0 2
2222: ST_TO_ADDR
// vc_fuel_battery := Rand ( 60 , 70 ) ;
2223: LD_ADDR_OWVAR 41
2227: PUSH
2228: LD_INT 60
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 12
2238: ST_TO_ADDR
// car := CreateVehicle ;
2239: LD_ADDR_VAR 0 6
2243: PUSH
2244: CALL_OW 45
2248: ST_TO_ADDR
// PlaceUnitArea ( car , area , false ) ;
2249: LD_VAR 0 6
2253: PPUSH
2254: LD_VAR 0 1
2258: PPUSH
2259: LD_INT 0
2261: PPUSH
2262: CALL_OW 49
// case vehiclesFrom06 [ i ] [ 6 ] of Bur :
2266: LD_EXP 2
2270: PUSH
2271: LD_VAR 0 4
2275: ARRAY
2276: PUSH
2277: LD_INT 6
2279: ARRAY
2280: PUSH
2281: LD_STRING Bur
2283: DOUBLE
2284: EQUAL
2285: IFTRUE 2289
2287: GO 2306
2289: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
2290: LD_EXP 37
2294: PPUSH
2295: LD_VAR 0 6
2299: PPUSH
2300: CALL_OW 52
2304: GO 2606
2306: LD_STRING Kar
2308: DOUBLE
2309: EQUAL
2310: IFTRUE 2314
2312: GO 2331
2314: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
2315: LD_EXP 38
2319: PPUSH
2320: LD_VAR 0 6
2324: PPUSH
2325: CALL_OW 52
2329: GO 2606
2331: LD_STRING Ptr
2333: DOUBLE
2334: EQUAL
2335: IFTRUE 2339
2337: GO 2356
2339: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
2340: LD_EXP 39
2344: PPUSH
2345: LD_VAR 0 6
2349: PPUSH
2350: CALL_OW 52
2354: GO 2606
2356: LD_STRING Glb
2358: DOUBLE
2359: EQUAL
2360: IFTRUE 2364
2362: GO 2381
2364: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
2365: LD_EXP 40
2369: PPUSH
2370: LD_VAR 0 6
2374: PPUSH
2375: CALL_OW 52
2379: GO 2606
2381: LD_STRING Pet
2383: DOUBLE
2384: EQUAL
2385: IFTRUE 2389
2387: GO 2406
2389: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
2390: LD_EXP 41
2394: PPUSH
2395: LD_VAR 0 6
2399: PPUSH
2400: CALL_OW 52
2404: GO 2606
2406: LD_STRING Dol
2408: DOUBLE
2409: EQUAL
2410: IFTRUE 2414
2412: GO 2431
2414: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
2415: LD_EXP 43
2419: PPUSH
2420: LD_VAR 0 6
2424: PPUSH
2425: CALL_OW 52
2429: GO 2606
2431: LD_STRING Lip
2433: DOUBLE
2434: EQUAL
2435: IFTRUE 2439
2437: GO 2456
2439: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
2440: LD_EXP 44
2444: PPUSH
2445: LD_VAR 0 6
2449: PPUSH
2450: CALL_OW 52
2454: GO 2606
2456: LD_STRING Tit
2458: DOUBLE
2459: EQUAL
2460: IFTRUE 2464
2462: GO 2481
2464: POP
// PlaceHumanInUnit ( Titov , car ) ; Kir :
2465: LD_EXP 42
2469: PPUSH
2470: LD_VAR 0 6
2474: PPUSH
2475: CALL_OW 52
2479: GO 2606
2481: LD_STRING Kir
2483: DOUBLE
2484: EQUAL
2485: IFTRUE 2489
2487: GO 2506
2489: POP
// PlaceHumanInUnit ( Kirilenkova , car ) ; Bel :
2490: LD_EXP 45
2494: PPUSH
2495: LD_VAR 0 6
2499: PPUSH
2500: CALL_OW 52
2504: GO 2606
2506: LD_STRING Bel
2508: DOUBLE
2509: EQUAL
2510: IFTRUE 2514
2512: GO 2531
2514: POP
// PlaceHumanInUnit ( Belkov , car ) ; Bel2 :
2515: LD_EXP 46
2519: PPUSH
2520: LD_VAR 0 6
2524: PPUSH
2525: CALL_OW 52
2529: GO 2606
2531: LD_STRING Bel2
2533: DOUBLE
2534: EQUAL
2535: IFTRUE 2539
2537: GO 2556
2539: POP
// PlaceHumanInUnit ( Belkov2 , car ) ; rand :
2540: LD_EXP 47
2544: PPUSH
2545: LD_VAR 0 6
2549: PPUSH
2550: CALL_OW 52
2554: GO 2606
2556: LD_STRING rand
2558: DOUBLE
2559: EQUAL
2560: IFTRUE 2564
2562: GO 2605
2564: POP
// begin PlaceHumanInUnit ( survivorsToPlace [ 1 ] , car ) ;
2565: LD_EXP 54
2569: PUSH
2570: LD_INT 1
2572: ARRAY
2573: PPUSH
2574: LD_VAR 0 6
2578: PPUSH
2579: CALL_OW 52
// survivorsToPlace = survivorsToPlace diff survivorsToPlace [ 1 ] ;
2583: LD_ADDR_EXP 54
2587: PUSH
2588: LD_EXP 54
2592: PUSH
2593: LD_EXP 54
2597: PUSH
2598: LD_INT 1
2600: ARRAY
2601: DIFF
2602: ST_TO_ADDR
// end ; end ;
2603: GO 2606
2605: POP
// end ;
2606: GO 2110
2608: POP
2609: POP
// if Burlak and not IsPlaced ( Burlak ) and not Burlak in vsevolodTeam then
2610: LD_EXP 37
2614: PUSH
2615: LD_EXP 37
2619: PPUSH
2620: CALL_OW 305
2624: NOT
2625: AND
2626: PUSH
2627: LD_EXP 37
2631: PUSH
2632: LD_EXP 52
2636: IN
2637: NOT
2638: AND
2639: IFFALSE 2658
// PlaceUnitArea ( Burlak , area , false ) ;
2641: LD_EXP 37
2645: PPUSH
2646: LD_VAR 0 1
2650: PPUSH
2651: LD_INT 0
2653: PPUSH
2654: CALL_OW 49
// if Karamazov and not IsPlaced ( Karamazov ) and not Karamazov in vsevolodTeam then
2658: LD_EXP 38
2662: PUSH
2663: LD_EXP 38
2667: PPUSH
2668: CALL_OW 305
2672: NOT
2673: AND
2674: PUSH
2675: LD_EXP 38
2679: PUSH
2680: LD_EXP 52
2684: IN
2685: NOT
2686: AND
2687: IFFALSE 2706
// PlaceUnitArea ( Karamazov , area , false ) ;
2689: LD_EXP 38
2693: PPUSH
2694: LD_VAR 0 1
2698: PPUSH
2699: LD_INT 0
2701: PPUSH
2702: CALL_OW 49
// if Petrovova and not IsPlaced ( Petrovova ) and not Petrovova in vsevolodTeam then
2706: LD_EXP 39
2710: PUSH
2711: LD_EXP 39
2715: PPUSH
2716: CALL_OW 305
2720: NOT
2721: AND
2722: PUSH
2723: LD_EXP 39
2727: PUSH
2728: LD_EXP 52
2732: IN
2733: NOT
2734: AND
2735: IFFALSE 2754
// PlaceUnitArea ( Petrovova , area , false ) ;
2737: LD_EXP 39
2741: PPUSH
2742: LD_VAR 0 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Gleb and not IsPlaced ( Gleb ) and not Gleb in vsevolodTeam then
2754: LD_EXP 40
2758: PUSH
2759: LD_EXP 40
2763: PPUSH
2764: CALL_OW 305
2768: NOT
2769: AND
2770: PUSH
2771: LD_EXP 40
2775: PUSH
2776: LD_EXP 52
2780: IN
2781: NOT
2782: AND
2783: IFFALSE 2802
// PlaceUnitArea ( Gleb , area , false ) ;
2785: LD_EXP 40
2789: PPUSH
2790: LD_VAR 0 1
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// if Petrosyan and not IsPlaced ( Petrosyan ) and not Petrosyan in vsevolodTeam then
2802: LD_EXP 41
2806: PUSH
2807: LD_EXP 41
2811: PPUSH
2812: CALL_OW 305
2816: NOT
2817: AND
2818: PUSH
2819: LD_EXP 41
2823: PUSH
2824: LD_EXP 52
2828: IN
2829: NOT
2830: AND
2831: IFFALSE 2850
// PlaceUnitArea ( Petrosyan , area , false ) ;
2833: LD_EXP 41
2837: PPUSH
2838: LD_VAR 0 1
2842: PPUSH
2843: LD_INT 0
2845: PPUSH
2846: CALL_OW 49
// if Dolgov and not IsPlaced ( Dolgov ) and not Dolgov in vsevolodTeam then
2850: LD_EXP 43
2854: PUSH
2855: LD_EXP 43
2859: PPUSH
2860: CALL_OW 305
2864: NOT
2865: AND
2866: PUSH
2867: LD_EXP 43
2871: PUSH
2872: LD_EXP 52
2876: IN
2877: NOT
2878: AND
2879: IFFALSE 2898
// PlaceUnitArea ( Dolgov , area , false ) ;
2881: LD_EXP 43
2885: PPUSH
2886: LD_VAR 0 1
2890: PPUSH
2891: LD_INT 0
2893: PPUSH
2894: CALL_OW 49
// if Lipshchin and not IsPlaced ( Lipshchin ) and not Lipshchin in vsevolodTeam then
2898: LD_EXP 44
2902: PUSH
2903: LD_EXP 44
2907: PPUSH
2908: CALL_OW 305
2912: NOT
2913: AND
2914: PUSH
2915: LD_EXP 44
2919: PUSH
2920: LD_EXP 52
2924: IN
2925: NOT
2926: AND
2927: IFFALSE 2946
// PlaceUnitArea ( Lipshchin , area , false ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_VAR 0 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// if Titov and not IsPlaced ( Titov ) and not Titov in vsevolodTeam then
2946: LD_EXP 42
2950: PUSH
2951: LD_EXP 42
2955: PPUSH
2956: CALL_OW 305
2960: NOT
2961: AND
2962: PUSH
2963: LD_EXP 42
2967: PUSH
2968: LD_EXP 52
2972: IN
2973: NOT
2974: AND
2975: IFFALSE 2994
// PlaceUnitArea ( Titov , area , false ) ;
2977: LD_EXP 42
2981: PPUSH
2982: LD_VAR 0 1
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 49
// if Kirilenkova and not IsPlaced ( Kirilenkova ) and not Kirilenkova in vsevolodTeam and savedVsevolod then
2994: LD_EXP 45
2998: PUSH
2999: LD_EXP 45
3003: PPUSH
3004: CALL_OW 305
3008: NOT
3009: AND
3010: PUSH
3011: LD_EXP 45
3015: PUSH
3016: LD_EXP 52
3020: IN
3021: NOT
3022: AND
3023: PUSH
3024: LD_EXP 1
3028: AND
3029: IFFALSE 3048
// PlaceUnitArea ( Kirilenkova , area , false ) ;
3031: LD_EXP 45
3035: PPUSH
3036: LD_VAR 0 1
3040: PPUSH
3041: LD_INT 0
3043: PPUSH
3044: CALL_OW 49
// if Belkov and not IsPlaced ( Belkov ) and not Belkov in vsevolodTeam and savedVsevolod then
3048: LD_EXP 46
3052: PUSH
3053: LD_EXP 46
3057: PPUSH
3058: CALL_OW 305
3062: NOT
3063: AND
3064: PUSH
3065: LD_EXP 46
3069: PUSH
3070: LD_EXP 52
3074: IN
3075: NOT
3076: AND
3077: PUSH
3078: LD_EXP 1
3082: AND
3083: IFFALSE 3102
// PlaceUnitArea ( Belkov , area , false ) ;
3085: LD_EXP 46
3089: PPUSH
3090: LD_VAR 0 1
3094: PPUSH
3095: LD_INT 0
3097: PPUSH
3098: CALL_OW 49
// if Belkov2 and not IsPlaced ( Belkov2 ) and not Belkov2 in vsevolodTeam and savedVsevolod then
3102: LD_EXP 47
3106: PUSH
3107: LD_EXP 47
3111: PPUSH
3112: CALL_OW 305
3116: NOT
3117: AND
3118: PUSH
3119: LD_EXP 47
3123: PUSH
3124: LD_EXP 52
3128: IN
3129: NOT
3130: AND
3131: PUSH
3132: LD_EXP 1
3136: AND
3137: IFFALSE 3156
// PlaceUnitArea ( Belkov2 , area , false ) ;
3139: LD_EXP 47
3143: PPUSH
3144: LD_VAR 0 1
3148: PPUSH
3149: LD_INT 0
3151: PPUSH
3152: CALL_OW 49
// for unit in survivorsToPlace do
3156: LD_ADDR_VAR 0 5
3160: PUSH
3161: LD_EXP 54
3165: PUSH
3166: FOR_IN
3167: IFFALSE 3188
// PlaceUnitArea ( unit , area , false ) ;
3169: LD_VAR 0 5
3173: PPUSH
3174: LD_VAR 0 1
3178: PPUSH
3179: LD_INT 0
3181: PPUSH
3182: CALL_OW 49
3186: GO 3166
3188: POP
3189: POP
// cargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
3190: LD_ADDR_VAR 0 7
3194: PUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 3
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 2
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 34
3220: PUSH
3221: LD_INT 51
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: PUSH
3228: LD_INT 34
3230: PUSH
3231: LD_INT 32
3233: PUSH
3234: EMPTY
3235: LIST
3236: LIST
3237: PUSH
3238: LD_INT 34
3240: PUSH
3241: LD_INT 12
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PUSH
3248: EMPTY
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: PUSH
3254: EMPTY
3255: LIST
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: ST_TO_ADDR
// bigCargoList = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_weapon , 89 ] ] ) ;
3264: LD_ADDR_VAR 0 8
3268: PUSH
3269: LD_INT 22
3271: PUSH
3272: LD_INT 3
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PUSH
3279: LD_INT 21
3281: PUSH
3282: LD_INT 2
3284: PUSH
3285: EMPTY
3286: LIST
3287: LIST
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 89
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: PPUSH
3304: CALL_OW 69
3308: ST_TO_ADDR
// if cargoList then
3309: LD_VAR 0 7
3313: IFFALSE 3503
// for i = 1 to cargoList do
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_VAR 0 7
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3501
// if resourcesFrom06 then
3333: LD_EXP 3
3337: IFFALSE 3499
// begin if not resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3339: LD_EXP 3
3343: PUSH
3344: LD_VAR 0 4
3348: ARRAY
3349: PUSH
3350: LD_INT 1
3352: ARRAY
3353: PUSH
3354: LD_INT 100
3356: GREATER
3357: NOT
3358: PUSH
3359: LD_EXP 3
3363: PUSH
3364: LD_VAR 0 4
3368: ARRAY
3369: PUSH
3370: LD_INT 2
3372: ARRAY
3373: PUSH
3374: LD_INT 100
3376: GREATER
3377: OR
3378: PUSH
3379: LD_EXP 3
3383: PUSH
3384: LD_VAR 0 4
3388: ARRAY
3389: PUSH
3390: LD_INT 3
3392: ARRAY
3393: PUSH
3394: LD_INT 100
3396: GREATER
3397: OR
3398: IFFALSE 3499
// begin AddCargo ( cargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3400: LD_VAR 0 7
3404: PUSH
3405: LD_VAR 0 4
3409: ARRAY
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: LD_EXP 3
3418: PUSH
3419: LD_VAR 0 4
3423: ARRAY
3424: PUSH
3425: LD_INT 1
3427: ARRAY
3428: PPUSH
3429: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3433: LD_VAR 0 7
3437: PUSH
3438: LD_VAR 0 4
3442: ARRAY
3443: PPUSH
3444: LD_INT 2
3446: PPUSH
3447: LD_EXP 3
3451: PUSH
3452: LD_VAR 0 4
3456: ARRAY
3457: PUSH
3458: LD_INT 2
3460: ARRAY
3461: PPUSH
3462: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3466: LD_VAR 0 7
3470: PUSH
3471: LD_VAR 0 4
3475: ARRAY
3476: PPUSH
3477: LD_INT 3
3479: PPUSH
3480: LD_EXP 3
3484: PUSH
3485: LD_VAR 0 4
3489: ARRAY
3490: PUSH
3491: LD_INT 3
3493: ARRAY
3494: PPUSH
3495: CALL_OW 291
// end ; end ;
3499: GO 3330
3501: POP
3502: POP
// if bigCargoList then
3503: LD_VAR 0 8
3507: IFFALSE 3696
// for i = 1 to bigCargoList do
3509: LD_ADDR_VAR 0 4
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_VAR 0 8
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3694
// if resourcesFrom06 then
3527: LD_EXP 3
3531: IFFALSE 3692
// begin if resourcesFrom06 [ i ] [ 1 ] > 100 or resourcesFrom06 [ i ] [ 2 ] > 100 or resourcesFrom06 [ i ] [ 3 ] > 100 then
3533: LD_EXP 3
3537: PUSH
3538: LD_VAR 0 4
3542: ARRAY
3543: PUSH
3544: LD_INT 1
3546: ARRAY
3547: PUSH
3548: LD_INT 100
3550: GREATER
3551: PUSH
3552: LD_EXP 3
3556: PUSH
3557: LD_VAR 0 4
3561: ARRAY
3562: PUSH
3563: LD_INT 2
3565: ARRAY
3566: PUSH
3567: LD_INT 100
3569: GREATER
3570: OR
3571: PUSH
3572: LD_EXP 3
3576: PUSH
3577: LD_VAR 0 4
3581: ARRAY
3582: PUSH
3583: LD_INT 3
3585: ARRAY
3586: PUSH
3587: LD_INT 100
3589: GREATER
3590: OR
3591: IFFALSE 3692
// begin AddCargo ( bigCargoList [ i ] , 1 , resourcesFrom06 [ i ] [ 1 ] ) ;
3593: LD_VAR 0 8
3597: PUSH
3598: LD_VAR 0 4
3602: ARRAY
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: LD_EXP 3
3611: PUSH
3612: LD_VAR 0 4
3616: ARRAY
3617: PUSH
3618: LD_INT 1
3620: ARRAY
3621: PPUSH
3622: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 2 , resourcesFrom06 [ i ] [ 2 ] ) ;
3626: LD_VAR 0 8
3630: PUSH
3631: LD_VAR 0 4
3635: ARRAY
3636: PPUSH
3637: LD_INT 2
3639: PPUSH
3640: LD_EXP 3
3644: PUSH
3645: LD_VAR 0 4
3649: ARRAY
3650: PUSH
3651: LD_INT 2
3653: ARRAY
3654: PPUSH
3655: CALL_OW 291
// AddCargo ( bigCargoList [ i ] , 3 , resourcesFrom06 [ i ] [ 3 ] ) ;
3659: LD_VAR 0 8
3663: PUSH
3664: LD_VAR 0 4
3668: ARRAY
3669: PPUSH
3670: LD_INT 3
3672: PPUSH
3673: LD_EXP 3
3677: PUSH
3678: LD_VAR 0 4
3682: ARRAY
3683: PUSH
3684: LD_INT 3
3686: ARRAY
3687: PPUSH
3688: CALL_OW 291
// end ; end ;
3692: GO 3524
3694: POP
3695: POP
// end ;
3696: LD_VAR 0 3
3700: RET
// function PrepareYashin ; begin
3701: LD_INT 0
3703: PPUSH
// uc_side = 6 ;
3704: LD_ADDR_OWVAR 20
3708: PUSH
3709: LD_INT 6
3711: ST_TO_ADDR
// uc_nation = 3 ;
3712: LD_ADDR_OWVAR 21
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// Yashin = PrepareUnitExt ( Yashin , false , 0 ) ;
3720: LD_ADDR_EXP 51
3724: PUSH
3725: LD_STRING Yashin
3727: PPUSH
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL 12172 0 3
3738: ST_TO_ADDR
// end ;
3739: LD_VAR 0 1
3743: RET
// function SpawnPlatonovReinforces ; var i , un , veh ; begin
3744: LD_INT 0
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// uc_side = 3 ;
3750: LD_ADDR_OWVAR 20
3754: PUSH
3755: LD_INT 3
3757: ST_TO_ADDR
// uc_nation = 3 ;
3758: LD_ADDR_OWVAR 21
3762: PUSH
3763: LD_INT 3
3765: ST_TO_ADDR
// PrepareSoldier ( false , 4 ) ;
3766: LD_INT 0
3768: PPUSH
3769: LD_INT 4
3771: PPUSH
3772: CALL_OW 381
// PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun ] [ rand ( 1 , 2 ) ] , rand ( 50 , 60 ) ) ;
3776: LD_INT 22
3778: PPUSH
3779: LD_INT 1
3781: PPUSH
3782: LD_INT 1
3784: PPUSH
3785: LD_INT 43
3787: PUSH
3788: LD_INT 44
3790: PUSH
3791: EMPTY
3792: LIST
3793: LIST
3794: PUSH
3795: LD_INT 1
3797: PPUSH
3798: LD_INT 2
3800: PPUSH
3801: CALL_OW 12
3805: ARRAY
3806: PPUSH
3807: LD_INT 50
3809: PPUSH
3810: LD_INT 60
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL 46596 0 5
// veh = CreateVehicle ;
3822: LD_ADDR_VAR 0 4
3826: PUSH
3827: CALL_OW 45
3831: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3832: LD_VAR 0 4
3836: PPUSH
3837: LD_INT 0
3839: PPUSH
3840: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3844: LD_VAR 0 4
3848: PPUSH
3849: LD_INT 2
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// if Belkov then
3859: LD_EXP 46
3863: IFFALSE 3881
// PlaceHumanInUnit ( Belkov , veh ) else
3865: LD_EXP 46
3869: PPUSH
3870: LD_VAR 0 4
3874: PPUSH
3875: CALL_OW 52
3879: GO 3925
// if Difficulty = 1 or Difficulty = 2 then
3881: LD_OWVAR 67
3885: PUSH
3886: LD_INT 1
3888: EQUAL
3889: PUSH
3890: LD_OWVAR 67
3894: PUSH
3895: LD_INT 2
3897: EQUAL
3898: OR
3899: IFFALSE 3925
// begin un = CreateHuman ;
3901: LD_ADDR_VAR 0 3
3905: PUSH
3906: CALL_OW 44
3910: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3911: LD_VAR 0 3
3915: PPUSH
3916: LD_VAR 0 4
3920: PPUSH
3921: CALL_OW 52
// end ; PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
3925: LD_INT 22
3927: PPUSH
3928: LD_INT 1
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_INT 51
3936: PPUSH
3937: LD_INT 50
3939: PPUSH
3940: LD_INT 60
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL 46596 0 5
// veh = CreateVehicle ;
3952: LD_ADDR_VAR 0 4
3956: PUSH
3957: CALL_OW 45
3961: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
3974: LD_VAR 0 4
3978: PPUSH
3979: LD_INT 2
3981: PPUSH
3982: LD_INT 0
3984: PPUSH
3985: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
3989: LD_VAR 0 4
3993: PPUSH
3994: LD_INT 1
3996: PPUSH
3997: LD_INT 100
3999: PPUSH
4000: CALL_OW 290
// if Belkov2 then
4004: LD_EXP 47
4008: IFFALSE 4026
// PlaceHumanInUnit ( Belkov2 , veh ) else
4010: LD_EXP 47
4014: PPUSH
4015: LD_VAR 0 4
4019: PPUSH
4020: CALL_OW 52
4024: GO 4060
// if Difficulty = 1 then
4026: LD_OWVAR 67
4030: PUSH
4031: LD_INT 1
4033: EQUAL
4034: IFFALSE 4060
// begin un = CreateHuman ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: CALL_OW 44
4045: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4046: LD_VAR 0 3
4050: PPUSH
4051: LD_VAR 0 4
4055: PPUSH
4056: CALL_OW 52
// end ; if Kirilenkova then
4060: LD_EXP 45
4064: IFFALSE 4159
// begin PrepareVehicle ( ru_medium_tracked , engine_combustion , control_manual , ru_cargo_bay , rand ( 50 , 60 ) ) ;
4066: LD_INT 22
4068: PPUSH
4069: LD_INT 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 51
4077: PPUSH
4078: LD_INT 50
4080: PPUSH
4081: LD_INT 60
4083: PPUSH
4084: CALL_OW 12
4088: PPUSH
4089: CALL 46596 0 5
// veh = CreateVehicle ;
4093: LD_ADDR_VAR 0 4
4097: PUSH
4098: CALL_OW 45
4102: ST_TO_ADDR
// SetDir ( veh , 0 ) ;
4103: LD_VAR 0 4
4107: PPUSH
4108: LD_INT 0
4110: PPUSH
4111: CALL_OW 233
// PlaceUnitArea ( veh , RussianSpawnArea2 , false ) ;
4115: LD_VAR 0 4
4119: PPUSH
4120: LD_INT 2
4122: PPUSH
4123: LD_INT 0
4125: PPUSH
4126: CALL_OW 49
// SetCargo ( veh , mat_cans , 100 ) ;
4130: LD_VAR 0 4
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: LD_INT 100
4140: PPUSH
4141: CALL_OW 290
// PlaceHumanInUnit ( Kirilenkova , veh ) ;
4145: LD_EXP 45
4149: PPUSH
4150: LD_VAR 0 4
4154: PPUSH
4155: CALL_OW 52
// end ; end ;
4159: LD_VAR 0 1
4163: RET
// function PrepareVsevolodBase ; var units , depot ; begin
4164: LD_INT 0
4166: PPUSH
4167: PPUSH
4168: PPUSH
// SetResourceVisibility ( 67 , 115 , 3 ) ;
4169: LD_INT 67
4171: PPUSH
4172: LD_INT 115
4174: PPUSH
4175: LD_INT 3
4177: PPUSH
4178: CALL_OW 441
// uc_side = 3 ;
4182: LD_ADDR_OWVAR 20
4186: PUSH
4187: LD_INT 3
4189: ST_TO_ADDR
// uc_nation = 3 ;
4190: LD_ADDR_OWVAR 21
4194: PUSH
4195: LD_INT 3
4197: ST_TO_ADDR
// bc_level = 5 ;
4198: LD_ADDR_OWVAR 43
4202: PUSH
4203: LD_INT 5
4205: ST_TO_ADDR
// bc_type = b_depot ;
4206: LD_ADDR_OWVAR 42
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 53 , 97 , 1 ) ;
4214: LD_ADDR_VAR 0 3
4218: PUSH
4219: LD_INT 53
4221: PPUSH
4222: LD_INT 97
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 47
4232: ST_TO_ADDR
// SetBName ( depot , gorkij ) ;
4233: LD_VAR 0 3
4237: PPUSH
4238: LD_STRING gorkij
4240: PPUSH
4241: CALL_OW 500
// SetResourceType ( GetBase ( depot ) , mat_cans , vsevolodBaseStartCrates ) ;
4245: LD_VAR 0 3
4249: PPUSH
4250: CALL_OW 274
4254: PPUSH
4255: LD_INT 1
4257: PPUSH
4258: LD_EXP 36
4262: PPUSH
4263: CALL_OW 277
// bc_type = b_lab_half ;
4267: LD_ADDR_OWVAR 42
4271: PUSH
4272: LD_INT 7
4274: ST_TO_ADDR
// bc_kind1 = b_lab_spacetime ;
4275: LD_ADDR_OWVAR 44
4279: PUSH
4280: LD_INT 14
4282: ST_TO_ADDR
// if matPredStatus = state_researched then
4283: LD_EXP 4
4287: PUSH
4288: LD_INT 2
4290: EQUAL
4291: IFFALSE 4311
// begin bc_type = b_lab_full ;
4293: LD_ADDR_OWVAR 42
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// bc_kind2 = b_lab_computer end else
4301: LD_ADDR_OWVAR 45
4305: PUSH
4306: LD_INT 12
4308: ST_TO_ADDR
4309: GO 4319
// bc_kind2 = b_lab_basic ;
4311: LD_ADDR_OWVAR 45
4315: PUSH
4316: LD_INT 9
4318: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 58 , 105 , 1 ) ;
4319: LD_INT 58
4321: PPUSH
4322: LD_INT 105
4324: PPUSH
4325: LD_INT 1
4327: PPUSH
4328: CALL_OW 47
// bc_type = b_armoury ;
4332: LD_ADDR_OWVAR 42
4336: PUSH
4337: LD_INT 4
4339: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 65 , 93 , 3 ) ;
4340: LD_INT 65
4342: PPUSH
4343: LD_INT 93
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: CALL_OW 47
// bc_type = b_oil_mine ;
4353: LD_ADDR_OWVAR 42
4357: PUSH
4358: LD_INT 29
4360: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 67 , 115 , 3 ) ;
4361: LD_INT 67
4363: PPUSH
4364: LD_INT 115
4366: PPUSH
4367: LD_INT 3
4369: PPUSH
4370: CALL_OW 47
// bc_type = b_oil_power ;
4374: LD_ADDR_OWVAR 42
4378: PUSH
4379: LD_INT 26
4381: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 68 , 104 , 4 ) ;
4382: LD_INT 68
4384: PPUSH
4385: LD_INT 104
4387: PPUSH
4388: LD_INT 4
4390: PPUSH
4391: CALL_OW 47
// bc_type = b_breastwork ;
4395: LD_ADDR_OWVAR 42
4399: PUSH
4400: LD_INT 31
4402: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 60 , 91 , 3 ) ;
4403: LD_INT 60
4405: PPUSH
4406: LD_INT 91
4408: PPUSH
4409: LD_INT 3
4411: PPUSH
4412: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 73 , 112 , 5 ) ;
4416: LD_INT 73
4418: PPUSH
4419: LD_INT 112
4421: PPUSH
4422: LD_INT 5
4424: PPUSH
4425: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 66 , 118 , 5 ) ;
4429: LD_INT 66
4431: PPUSH
4432: LD_INT 118
4434: PPUSH
4435: LD_INT 5
4437: PPUSH
4438: CALL_OW 47
// end ;
4442: LD_VAR 0 1
4446: RET
// function SpawnVsevolodTeamInBase ; var unit , buildings , building , randBuild ; begin
4447: LD_INT 0
4449: PPUSH
4450: PPUSH
4451: PPUSH
4452: PPUSH
4453: PPUSH
// for unit in vsevolodTeam do
4454: LD_ADDR_VAR 0 2
4458: PUSH
4459: LD_EXP 52
4463: PUSH
4464: FOR_IN
4465: IFFALSE 4763
// begin for building in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
4467: LD_ADDR_VAR 0 4
4471: PUSH
4472: LD_INT 22
4474: PUSH
4475: LD_INT 3
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: LD_INT 21
4484: PUSH
4485: LD_INT 3
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 30
4494: PUSH
4495: LD_INT 31
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4555
// if not UnitsInside ( building ) then
4515: LD_VAR 0 4
4519: PPUSH
4520: CALL_OW 313
4524: NOT
4525: IFFALSE 4553
// begin PlaceHumanInBunker ( unit , building ) ;
4527: LD_VAR 0 2
4531: PPUSH
4532: LD_VAR 0 4
4536: PPUSH
4537: CALL 12774 0 2
// SetClass ( unit , 1 ) ;
4541: LD_VAR 0 2
4545: PPUSH
4546: LD_INT 1
4548: PPUSH
4549: CALL_OW 336
// end ;
4553: GO 4512
4555: POP
4556: POP
// if not IsInUnit ( unit ) then
4557: LD_VAR 0 2
4561: PPUSH
4562: CALL_OW 310
4566: NOT
4567: IFFALSE 4761
// begin buildings = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_armoury ] , [ f_btype , b_lab_half ] ] ] ) ;
4569: LD_ADDR_VAR 0 3
4573: PUSH
4574: LD_INT 22
4576: PUSH
4577: LD_INT 3
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 21
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: EMPTY
4591: LIST
4592: LIST
4593: PUSH
4594: LD_INT 2
4596: PUSH
4597: LD_INT 30
4599: PUSH
4600: LD_INT 0
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 30
4609: PUSH
4610: LD_INT 4
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: PUSH
4617: LD_INT 30
4619: PUSH
4620: LD_INT 7
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: PUSH
4627: EMPTY
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: EMPTY
4634: LIST
4635: LIST
4636: LIST
4637: PPUSH
4638: CALL_OW 69
4642: ST_TO_ADDR
// randBuild = buildings [ Rand ( 1 , buildings ) ] ;
4643: LD_ADDR_VAR 0 5
4647: PUSH
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 1
4655: PPUSH
4656: LD_VAR 0 3
4660: PPUSH
4661: CALL_OW 12
4665: ARRAY
4666: ST_TO_ADDR
// PlaceHumanInUnit ( unit , randBuild ) ;
4667: LD_VAR 0 2
4671: PPUSH
4672: LD_VAR 0 5
4676: PPUSH
4677: CALL_OW 52
// case GetBType ( randBuild ) of b_depot :
4681: LD_VAR 0 5
4685: PPUSH
4686: CALL_OW 266
4690: PUSH
4691: LD_INT 0
4693: DOUBLE
4694: EQUAL
4695: IFTRUE 4699
4697: GO 4714
4699: POP
// SetClass ( unit , 2 ) ; b_armoury :
4700: LD_VAR 0 2
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 336
4712: GO 4761
4714: LD_INT 4
4716: DOUBLE
4717: EQUAL
4718: IFTRUE 4722
4720: GO 4737
4722: POP
// SetClass ( unit , 1 ) ; b_lab_half :
4723: LD_VAR 0 2
4727: PPUSH
4728: LD_INT 1
4730: PPUSH
4731: CALL_OW 336
4735: GO 4761
4737: LD_INT 7
4739: DOUBLE
4740: EQUAL
4741: IFTRUE 4745
4743: GO 4760
4745: POP
// SetClass ( unit , 4 ) ; end ;
4746: LD_VAR 0 2
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 336
4758: GO 4761
4760: POP
// end ; end ;
4761: GO 4464
4763: POP
4764: POP
// end ; end_of_file
4765: LD_VAR 0 1
4769: RET
// export Xavier , Heike ; export heikeVehicle ; export heikeGroup ; export kabulBaseUnits ; export remoteVehs ; export minesList ; export function PrepareArabians ; begin
4770: LD_INT 0
4772: PPUSH
// remoteVehs = [ ] ;
4773: LD_ADDR_EXP 60
4777: PUSH
4778: EMPTY
4779: ST_TO_ADDR
// minesList = [ ] ;
4780: LD_ADDR_EXP 61
4784: PUSH
4785: EMPTY
4786: ST_TO_ADDR
// heikeGroup = [ ] ;
4787: LD_ADDR_EXP 58
4791: PUSH
4792: EMPTY
4793: ST_TO_ADDR
// PrepareXavierAr ;
4794: CALL 6331 0 0
// PrepareKabulBase ;
4798: CALL 5508 0 0
// end ;
4802: LD_VAR 0 1
4806: RET
// export function PrepareIntroArabians ; var i , solds ; begin
4807: LD_INT 0
4809: PPUSH
4810: PPUSH
4811: PPUSH
// solds = [ ] ;
4812: LD_ADDR_VAR 0 3
4816: PUSH
4817: EMPTY
4818: ST_TO_ADDR
// uc_side = 2 ;
4819: LD_ADDR_OWVAR 20
4823: PUSH
4824: LD_INT 2
4826: ST_TO_ADDR
// uc_nation = 2 ;
4827: LD_ADDR_OWVAR 21
4831: PUSH
4832: LD_INT 2
4834: ST_TO_ADDR
// PrepareSoldier ( false , 1 ) ;
4835: LD_INT 0
4837: PPUSH
4838: LD_INT 1
4840: PPUSH
4841: CALL_OW 381
// for i := 1 to 2 do
4845: LD_ADDR_VAR 0 2
4849: PUSH
4850: DOUBLE
4851: LD_INT 1
4853: DEC
4854: ST_TO_ADDR
4855: LD_INT 2
4857: PUSH
4858: FOR_TO
4859: IFFALSE 4918
// begin solds = solds ^ CreateHuman ;
4861: LD_ADDR_VAR 0 3
4865: PUSH
4866: LD_VAR 0 3
4870: PUSH
4871: CALL_OW 44
4875: ADD
4876: ST_TO_ADDR
// SetDir ( solds [ i ] , 4 ) ;
4877: LD_VAR 0 3
4881: PUSH
4882: LD_VAR 0 2
4886: ARRAY
4887: PPUSH
4888: LD_INT 4
4890: PPUSH
4891: CALL_OW 233
// PlaceUnitArea ( solds [ i ] , ArabianIntroSpawnArea , false ) ;
4895: LD_VAR 0 3
4899: PUSH
4900: LD_VAR 0 2
4904: ARRAY
4905: PPUSH
4906: LD_INT 5
4908: PPUSH
4909: LD_INT 0
4911: PPUSH
4912: CALL_OW 49
// end ;
4916: GO 4858
4918: POP
4919: POP
// result = solds ;
4920: LD_ADDR_VAR 0 1
4924: PUSH
4925: LD_VAR 0 3
4929: ST_TO_ADDR
// end ;
4930: LD_VAR 0 1
4934: RET
// export function PrepareHeikeGroup ; var i , un , veh , waepons , soldAmount , mortarAmount , vehicleAmount ; begin
4935: LD_INT 0
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
4941: PPUSH
4942: PPUSH
4943: PPUSH
4944: PPUSH
// uc_side = 8 ;
4945: LD_ADDR_OWVAR 20
4949: PUSH
4950: LD_INT 8
4952: ST_TO_ADDR
// uc_nation = 2 ;
4953: LD_ADDR_OWVAR 21
4957: PUSH
4958: LD_INT 2
4960: ST_TO_ADDR
// Heike := PrepareUnitExt ( Heike , false , 0 ) ;
4961: LD_ADDR_EXP 56
4965: PUSH
4966: LD_STRING Heike
4968: PPUSH
4969: LD_INT 0
4971: PPUSH
4972: LD_INT 0
4974: PPUSH
4975: CALL 12172 0 3
4979: ST_TO_ADDR
// waepons = [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_light_gun , ar_gatling_gun ] ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_INT 27
4987: PUSH
4988: LD_INT 28
4990: PUSH
4991: LD_INT 26
4993: PUSH
4994: LD_INT 23
4996: PUSH
4997: LD_INT 25
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5007: LD_INT 14
5009: PPUSH
5010: LD_INT 1
5012: PPUSH
5013: LD_INT 1
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_INT 1
5023: PPUSH
5024: LD_VAR 0 5
5028: PPUSH
5029: CALL_OW 12
5033: ARRAY
5034: PPUSH
5035: LD_INT 65
5037: PPUSH
5038: CALL 46596 0 5
// heikeVehicle = CreateVehicle ;
5042: LD_ADDR_EXP 57
5046: PUSH
5047: CALL_OW 45
5051: ST_TO_ADDR
// PlaceUnitArea ( heikeVehicle , HeikeSpawnArea , false ) ;
5052: LD_EXP 57
5056: PPUSH
5057: LD_INT 20
5059: PPUSH
5060: LD_INT 0
5062: PPUSH
5063: CALL_OW 49
// SetMark ( heikeVehicle , 1 ) ;
5067: LD_EXP 57
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: CALL_OW 242
// PlaceHumanInUnit ( Heike , heikeVehicle ) ;
5079: LD_EXP 56
5083: PPUSH
5084: LD_EXP 57
5088: PPUSH
5089: CALL_OW 52
// uc_side = 2 ;
5093: LD_ADDR_OWVAR 20
5097: PUSH
5098: LD_INT 2
5100: ST_TO_ADDR
// soldAmount = heikeSoldiers ;
5101: LD_ADDR_VAR 0 6
5105: PUSH
5106: LD_EXP 29
5110: ST_TO_ADDR
// if not heikeHeavyLosses then
5111: LD_EXP 5
5115: NOT
5116: IFFALSE 5134
// soldAmount = soldAmount + heikeAdditionalSoldiers ;
5118: LD_ADDR_VAR 0 6
5122: PUSH
5123: LD_VAR 0 6
5127: PUSH
5128: LD_EXP 32
5132: PLUS
5133: ST_TO_ADDR
// mortarAmount = heikeMortars ;
5134: LD_ADDR_VAR 0 7
5138: PUSH
5139: LD_EXP 30
5143: ST_TO_ADDR
// if not heikeHeavyLosses then
5144: LD_EXP 5
5148: NOT
5149: IFFALSE 5167
// mortarAmount = mortarAmount + heikeAdditionalMortars ;
5151: LD_ADDR_VAR 0 7
5155: PUSH
5156: LD_VAR 0 7
5160: PUSH
5161: LD_EXP 33
5165: PLUS
5166: ST_TO_ADDR
// vehicleAmount = heikeVehicles ;
5167: LD_ADDR_VAR 0 8
5171: PUSH
5172: LD_EXP 31
5176: ST_TO_ADDR
// if not heikeHeavyLosses then
5177: LD_EXP 5
5181: NOT
5182: IFFALSE 5200
// vehicleAmount = vehicleAmount + heikeAdditionalVehicles ;
5184: LD_ADDR_VAR 0 8
5188: PUSH
5189: LD_VAR 0 8
5193: PUSH
5194: LD_EXP 34
5198: PLUS
5199: ST_TO_ADDR
// for i := 1 to soldAmount do
5200: LD_ADDR_VAR 0 2
5204: PUSH
5205: DOUBLE
5206: LD_INT 1
5208: DEC
5209: ST_TO_ADDR
5210: LD_VAR 0 6
5214: PUSH
5215: FOR_TO
5216: IFFALSE 5273
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5218: LD_INT 0
5220: PPUSH
5221: LD_EXP 27
5225: PPUSH
5226: CALL_OW 381
// un = CreateHuman ;
5230: LD_ADDR_VAR 0 3
5234: PUSH
5235: CALL_OW 44
5239: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5240: LD_ADDR_EXP 58
5244: PUSH
5245: LD_EXP 58
5249: PUSH
5250: LD_VAR 0 3
5254: ADD
5255: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5256: LD_VAR 0 3
5260: PPUSH
5261: LD_INT 20
5263: PPUSH
5264: LD_INT 0
5266: PPUSH
5267: CALL_OW 49
// end ;
5271: GO 5215
5273: POP
5274: POP
// for i := 1 to mortarAmount do
5275: LD_ADDR_VAR 0 2
5279: PUSH
5280: DOUBLE
5281: LD_INT 1
5283: DEC
5284: ST_TO_ADDR
5285: LD_VAR 0 7
5289: PUSH
5290: FOR_TO
5291: IFFALSE 5351
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
5293: LD_INT 0
5295: PPUSH
5296: LD_INT 8
5298: PPUSH
5299: LD_EXP 27
5303: PPUSH
5304: CALL_OW 380
// un = CreateHuman ;
5308: LD_ADDR_VAR 0 3
5312: PUSH
5313: CALL_OW 44
5317: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5318: LD_ADDR_EXP 58
5322: PUSH
5323: LD_EXP 58
5327: PUSH
5328: LD_VAR 0 3
5332: ADD
5333: ST_TO_ADDR
// PlaceUnitArea ( un , HeikeSpawnArea , false ) ;
5334: LD_VAR 0 3
5338: PPUSH
5339: LD_INT 20
5341: PPUSH
5342: LD_INT 0
5344: PPUSH
5345: CALL_OW 49
// end ;
5349: GO 5290
5351: POP
5352: POP
// for i := 1 to vehicleAmount do
5353: LD_ADDR_VAR 0 2
5357: PUSH
5358: DOUBLE
5359: LD_INT 1
5361: DEC
5362: ST_TO_ADDR
5363: LD_VAR 0 8
5367: PUSH
5368: FOR_TO
5369: IFFALSE 5501
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5371: LD_INT 0
5373: PPUSH
5374: LD_EXP 27
5378: PPUSH
5379: CALL_OW 383
// un = CreateHuman ;
5383: LD_ADDR_VAR 0 3
5387: PUSH
5388: CALL_OW 44
5392: ST_TO_ADDR
// heikeGroup = heikeGroup ^ un ;
5393: LD_ADDR_EXP 58
5397: PUSH
5398: LD_EXP 58
5402: PUSH
5403: LD_VAR 0 3
5407: ADD
5408: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , waepons [ Rand ( 1 , waepons ) ] , 65 ) ;
5409: LD_INT 14
5411: PPUSH
5412: LD_INT 1
5414: PPUSH
5415: LD_INT 1
5417: PPUSH
5418: LD_VAR 0 5
5422: PUSH
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 5
5430: PPUSH
5431: CALL_OW 12
5435: ARRAY
5436: PPUSH
5437: LD_INT 65
5439: PPUSH
5440: CALL 46596 0 5
// veh = CreateVehicle ;
5444: LD_ADDR_VAR 0 4
5448: PUSH
5449: CALL_OW 45
5453: ST_TO_ADDR
// heikeGroup = heikeGroup ^ veh ;
5454: LD_ADDR_EXP 58
5458: PUSH
5459: LD_EXP 58
5463: PUSH
5464: LD_VAR 0 4
5468: ADD
5469: ST_TO_ADDR
// PlaceUnitArea ( veh , HeikeSpawnArea , false ) ;
5470: LD_VAR 0 4
5474: PPUSH
5475: LD_INT 20
5477: PPUSH
5478: LD_INT 0
5480: PPUSH
5481: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
5485: LD_VAR 0 3
5489: PPUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 52
// end ;
5499: GO 5368
5501: POP
5502: POP
// end ;
5503: LD_VAR 0 1
5507: RET
// function PrepareKabulBase ; var weapons , building , remoteVeh , outsideBunkers ; begin
5508: LD_INT 0
5510: PPUSH
5511: PPUSH
5512: PPUSH
5513: PPUSH
5514: PPUSH
// kabulBaseUnits = [ ] ;
5515: LD_ADDR_EXP 59
5519: PUSH
5520: EMPTY
5521: ST_TO_ADDR
// uc_side = 2 ;
5522: LD_ADDR_OWVAR 20
5526: PUSH
5527: LD_INT 2
5529: ST_TO_ADDR
// uc_nation = 2 ;
5530: LD_ADDR_OWVAR 21
5534: PUSH
5535: LD_INT 2
5537: ST_TO_ADDR
// kabulBaseUnits := Nef_PrepareBase ( ar_dep , KabulBaseArea , newkabul , enemySkillLevel , [ 5000 , 5000 , 0 ] , nation_arabian , [ 17 , 3 , 4 , 8 ] ) ;
5538: LD_ADDR_EXP 59
5542: PUSH
5543: LD_INT 2
5545: PPUSH
5546: LD_INT 10
5548: PPUSH
5549: LD_STRING newkabul
5551: PPUSH
5552: LD_EXP 27
5556: PPUSH
5557: LD_INT 5000
5559: PUSH
5560: LD_INT 5000
5562: PUSH
5563: LD_INT 0
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: LIST
5570: PPUSH
5571: LD_INT 2
5573: PPUSH
5574: LD_INT 17
5576: PUSH
5577: LD_INT 3
5579: PUSH
5580: LD_INT 4
5582: PUSH
5583: LD_INT 8
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: PPUSH
5592: CALL 13149 0 7
5596: ST_TO_ADDR
// case Difficulty of 2 :
5597: LD_OWVAR 67
5601: PUSH
5602: LD_INT 2
5604: DOUBLE
5605: EQUAL
5606: IFTRUE 5610
5608: GO 5626
5610: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5611: LD_INT 49
5613: PPUSH
5614: LD_INT 2
5616: PPUSH
5617: LD_INT 2
5619: PPUSH
5620: CALL_OW 322
// end ; 3 .. 4 :
5624: GO 5696
5626: LD_INT 3
5628: DOUBLE
5629: GREATEREQUAL
5630: IFFALSE 5638
5632: LD_INT 4
5634: DOUBLE
5635: LESSEQUAL
5636: IFTRUE 5640
5638: GO 5695
5640: POP
// begin SetTech ( tech_tech2 , 2 , state_researched ) ;
5641: LD_INT 49
5643: PPUSH
5644: LD_INT 2
5646: PPUSH
5647: LD_INT 2
5649: PPUSH
5650: CALL_OW 322
// SetTech ( tech_tech3 , 2 , state_enabled ) ;
5654: LD_INT 50
5656: PPUSH
5657: LD_INT 2
5659: PPUSH
5660: LD_INT 1
5662: PPUSH
5663: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
5667: LD_INT 52
5669: PPUSH
5670: LD_INT 2
5672: PPUSH
5673: LD_INT 2
5675: PPUSH
5676: CALL_OW 322
// SetTech ( tech_opto2 , 2 , state_enabled ) ;
5680: LD_INT 61
5682: PPUSH
5683: LD_INT 2
5685: PPUSH
5686: LD_INT 1
5688: PPUSH
5689: CALL_OW 322
// end ; end ;
5693: GO 5696
5695: POP
// weapons = [ ar_gun , ar_light_gun , ar_gatling_gun , ar_rocket_launcher , ar_flame_thrower ] ;
5696: LD_ADDR_VAR 0 2
5700: PUSH
5701: LD_INT 27
5703: PUSH
5704: LD_INT 23
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 28
5712: PUSH
5713: LD_INT 26
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for building in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_bunker ] , [ f_not , [ f_bweapon , ar_radar ] ] ] ) do
5723: LD_ADDR_VAR 0 3
5727: PUSH
5728: LD_INT 22
5730: PUSH
5731: LD_INT 2
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 32
5743: PUSH
5744: EMPTY
5745: LIST
5746: LIST
5747: PUSH
5748: LD_INT 3
5750: PUSH
5751: LD_INT 35
5753: PUSH
5754: LD_INT 30
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 69
5774: PUSH
5775: FOR_IN
5776: IFFALSE 5808
// PlaceWeaponTurret ( building , weapons [ Rand ( 1 , weapons ) ] ) ;
5778: LD_VAR 0 3
5782: PPUSH
5783: LD_VAR 0 2
5787: PUSH
5788: LD_INT 1
5790: PPUSH
5791: LD_VAR 0 2
5795: PPUSH
5796: CALL_OW 12
5800: ARRAY
5801: PPUSH
5802: CALL_OW 431
5806: GO 5775
5808: POP
5809: POP
// SetBLevel ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , enemySkillLevel ) ;
5810: LD_INT 22
5812: PUSH
5813: LD_INT 2
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 21
5822: PUSH
5823: LD_INT 3
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PPUSH
5839: LD_EXP 27
5843: PPUSH
5844: CALL_OW 241
// for remoteVeh in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , ar_control_tower ] ] ) do
5848: LD_ADDR_VAR 0 4
5852: PUSH
5853: LD_INT 22
5855: PUSH
5856: LD_INT 2
5858: PUSH
5859: EMPTY
5860: LIST
5861: LIST
5862: PUSH
5863: LD_INT 21
5865: PUSH
5866: LD_INT 2
5868: PUSH
5869: EMPTY
5870: LIST
5871: LIST
5872: PUSH
5873: LD_INT 50
5875: PUSH
5876: EMPTY
5877: LIST
5878: PUSH
5879: LD_INT 34
5881: PUSH
5882: LD_INT 31
5884: PUSH
5885: EMPTY
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PUSH
5900: FOR_IN
5901: IFFALSE 5931
// begin PrepareMechanic ( false , enemySkillLevel ) ;
5903: LD_INT 0
5905: PPUSH
5906: LD_EXP 27
5910: PPUSH
5911: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , remoteVeh ) ;
5915: CALL_OW 44
5919: PPUSH
5920: LD_VAR 0 4
5924: PPUSH
5925: CALL_OW 52
// end ;
5929: GO 5900
5931: POP
5932: POP
// if Difficulty = 1 then
5933: LD_OWVAR 67
5937: PUSH
5938: LD_INT 1
5940: EQUAL
5941: IFFALSE 5991
// begin PrepareSoldier ( false , enemySkillLevel ) ;
5943: LD_INT 0
5945: PPUSH
5946: LD_EXP 27
5950: PPUSH
5951: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
5955: CALL_OW 44
5959: PPUSH
5960: LD_INT 63
5962: PPUSH
5963: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_INT 66
5974: PPUSH
5975: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
5979: CALL_OW 44
5983: PPUSH
5984: LD_INT 68
5986: PPUSH
5987: CALL 12774 0 2
// end ; if Difficulty = 2 then
5991: LD_OWVAR 67
5995: PUSH
5996: LD_INT 2
5998: EQUAL
5999: IFFALSE 6064
// begin PrepareSoldier ( false , enemySkillLevel ) ;
6001: LD_INT 0
6003: PPUSH
6004: LD_EXP 27
6008: PPUSH
6009: CALL_OW 381
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6013: CALL_OW 44
6017: PPUSH
6018: LD_INT 63
6020: PPUSH
6021: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6025: CALL_OW 44
6029: PPUSH
6030: LD_INT 66
6032: PPUSH
6033: CALL 12774 0 2
// PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6037: LD_INT 0
6039: PPUSH
6040: LD_INT 8
6042: PPUSH
6043: LD_EXP 27
6047: PPUSH
6048: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6052: CALL_OW 44
6056: PPUSH
6057: LD_INT 68
6059: PPUSH
6060: CALL 12774 0 2
// end ; if Difficulty >= 3 then
6064: LD_OWVAR 67
6068: PUSH
6069: LD_INT 3
6071: GREATEREQUAL
6072: IFFALSE 6125
// begin PrepareHuman ( false , class_mortar , enemySkillLevel ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 8
6079: PPUSH
6080: LD_EXP 27
6084: PPUSH
6085: CALL_OW 380
// PlaceHumanInBunker ( CreateHuman , ar_bun1 ) ;
6089: CALL_OW 44
6093: PPUSH
6094: LD_INT 63
6096: PPUSH
6097: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun2 ) ;
6101: CALL_OW 44
6105: PPUSH
6106: LD_INT 66
6108: PPUSH
6109: CALL 12774 0 2
// PlaceHumanInBunker ( CreateHuman , ar_bun3 ) ;
6113: CALL_OW 44
6117: PPUSH
6118: LD_INT 68
6120: PPUSH
6121: CALL 12774 0 2
// end ; CreateMineField ( MinefieldNorthArea , 10 + [ 2 , 5 , 6 , 7 ] [ Difficulty ] ) ;
6125: LD_INT 14
6127: PPUSH
6128: LD_INT 10
6130: PUSH
6131: LD_INT 2
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_INT 6
6139: PUSH
6140: LD_INT 7
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_OWVAR 67
6153: ARRAY
6154: PLUS
6155: PPUSH
6156: CALL 6237 0 2
// CreateMineField ( MinefieldSouthArea , 20 + [ 4 , 6 , 8 , 9 ] [ Difficulty ] ) ;
6160: LD_INT 15
6162: PPUSH
6163: LD_INT 20
6165: PUSH
6166: LD_INT 4
6168: PUSH
6169: LD_INT 6
6171: PUSH
6172: LD_INT 8
6174: PUSH
6175: LD_INT 9
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: PUSH
6184: LD_OWVAR 67
6188: ARRAY
6189: PLUS
6190: PPUSH
6191: CALL 6237 0 2
// CreateMineField ( MinefieldMainRoadArea , 10 ) ;
6195: LD_INT 16
6197: PPUSH
6198: LD_INT 10
6200: PPUSH
6201: CALL 6237 0 2
// CreateMineField ( MinefieldOilDepositsArea , 5 ) ;
6205: LD_INT 17
6207: PPUSH
6208: LD_INT 5
6210: PPUSH
6211: CALL 6237 0 2
// if not savedVsevolod then
6215: LD_EXP 1
6219: NOT
6220: IFFALSE 6232
// CreateMineField ( MinefieldExtraArea , 1 ) ;
6222: LD_INT 18
6224: PPUSH
6225: LD_INT 1
6227: PPUSH
6228: CALL 6237 0 2
// end ;
6232: LD_VAR 0 1
6236: RET
// function CreateMineField ( area , amount ) ; var i , randPos ; begin
6237: LD_INT 0
6239: PPUSH
6240: PPUSH
6241: PPUSH
// for i = 1 to amount do
6242: LD_ADDR_VAR 0 4
6246: PUSH
6247: DOUBLE
6248: LD_INT 1
6250: DEC
6251: ST_TO_ADDR
6252: LD_VAR 0 2
6256: PUSH
6257: FOR_TO
6258: IFFALSE 6324
// begin randPos = RandHexArea ( area , false ) ;
6260: LD_ADDR_VAR 0 5
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_INT 0
6272: PPUSH
6273: CALL_OW 16
6277: ST_TO_ADDR
// PlaceMine ( randPos [ 1 ] , randPos [ 2 ] , 2 , 0 ) ;
6278: LD_VAR 0 5
6282: PUSH
6283: LD_INT 1
6285: ARRAY
6286: PPUSH
6287: LD_VAR 0 5
6291: PUSH
6292: LD_INT 2
6294: ARRAY
6295: PPUSH
6296: LD_INT 2
6298: PPUSH
6299: LD_INT 0
6301: PPUSH
6302: CALL_OW 454
// minesList = minesList ^ randPos ;
6306: LD_ADDR_EXP 61
6310: PUSH
6311: LD_EXP 61
6315: PUSH
6316: LD_VAR 0 5
6320: ADD
6321: ST_TO_ADDR
// end ;
6322: GO 6257
6324: POP
6325: POP
// end ;
6326: LD_VAR 0 3
6330: RET
// function PrepareXavierAr ; begin
6331: LD_INT 0
6333: PPUSH
// uc_side = 5 ;
6334: LD_ADDR_OWVAR 20
6338: PUSH
6339: LD_INT 5
6341: ST_TO_ADDR
// uc_nation = 2 ;
6342: LD_ADDR_OWVAR 21
6346: PUSH
6347: LD_INT 2
6349: ST_TO_ADDR
// Xavier = PrepareUnitExt ( Xavier , false , 0 ) ;
6350: LD_ADDR_EXP 55
6354: PUSH
6355: LD_STRING Xavier
6357: PPUSH
6358: LD_INT 0
6360: PPUSH
6361: LD_INT 0
6363: PPUSH
6364: CALL 12172 0 3
6368: ST_TO_ADDR
// end ;
6369: LD_VAR 0 1
6373: RET
// every 0 0$1 do
6374: GO 6376
6376: DISABLE
// begin remoteVehs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_weapon , ar_control_tower ] ] ) ;
6377: LD_ADDR_EXP 60
6381: PUSH
6382: LD_INT 22
6384: PUSH
6385: LD_INT 2
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: LD_INT 21
6394: PUSH
6395: LD_INT 2
6397: PUSH
6398: EMPTY
6399: LIST
6400: LIST
6401: PUSH
6402: LD_INT 50
6404: PUSH
6405: EMPTY
6406: LIST
6407: PUSH
6408: LD_INT 59
6410: PUSH
6411: EMPTY
6412: LIST
6413: PUSH
6414: LD_INT 34
6416: PUSH
6417: LD_INT 31
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: EMPTY
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: ST_TO_ADDR
// enable ;
6436: ENABLE
// end ; end_of_file
6437: END
// export function MissionIntro ; var arSolds , burlakUnits ; begin
6438: LD_INT 0
6440: PPUSH
6441: PPUSH
6442: PPUSH
// burlakUnits = FilterUnitsInArea ( IntroArea , [ [ f_side , 3 ] , [ f_ok ] ] diff [ Burlak , Vsevolod ] ) ;
6443: LD_ADDR_VAR 0 3
6447: PUSH
6448: LD_INT 6
6450: PPUSH
6451: LD_INT 22
6453: PUSH
6454: LD_INT 3
6456: PUSH
6457: EMPTY
6458: LIST
6459: LIST
6460: PUSH
6461: LD_INT 50
6463: PUSH
6464: EMPTY
6465: LIST
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_EXP 37
6475: PUSH
6476: LD_EXP 48
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: DIFF
6485: PPUSH
6486: CALL_OW 70
6490: ST_TO_ADDR
// CenterNowOnUnits ( Burlak ) ;
6491: LD_EXP 37
6495: PPUSH
6496: CALL_OW 87
// SayRadio ( Platonov , DStart-Pla-1 ) ;
6500: LD_EXP 49
6504: PPUSH
6505: LD_STRING DStart-Pla-1
6507: PPUSH
6508: CALL_OW 94
// if savedVsevolod then
6512: LD_EXP 1
6516: IFFALSE 7745
// begin arSolds = PrepareIntroArabians ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: CALL 4807 0 0
6527: ST_TO_ADDR
// SayRadio ( Platonov , DStartVS-Pla-1 ) ;
6528: LD_EXP 49
6532: PPUSH
6533: LD_STRING DStartVS-Pla-1
6535: PPUSH
6536: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
6540: LD_EXP 49
6544: PPUSH
6545: LD_STRING DStart2-Pla-1
6547: PPUSH
6548: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
6552: LD_EXP 37
6556: PPUSH
6557: LD_STRING DStart2-Bur-1
6559: PPUSH
6560: CALL_OW 88
// PlaceSeeing ( 92 , 133 , 3 , - 9 ) ;
6564: LD_INT 92
6566: PPUSH
6567: LD_INT 133
6569: PPUSH
6570: LD_INT 3
6572: PPUSH
6573: LD_INT 9
6575: NEG
6576: PPUSH
6577: CALL_OW 330
// CenterOnXY ( 103 , 133 ) ;
6581: LD_INT 103
6583: PPUSH
6584: LD_INT 133
6586: PPUSH
6587: CALL_OW 84
// AddComPlaceMineXY ( arSolds [ 1 ] , 93 , 134 , 1 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 93
6602: PPUSH
6603: LD_INT 134
6605: PPUSH
6606: LD_INT 1
6608: PPUSH
6609: CALL 13003 0 4
// AddComMoveXY ( arSolds [ 2 ] , 96 , 134 ) ;
6613: LD_VAR 0 2
6617: PUSH
6618: LD_INT 2
6620: ARRAY
6621: PPUSH
6622: LD_INT 96
6624: PPUSH
6625: LD_INT 134
6627: PPUSH
6628: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6632: LD_INT 35
6634: PPUSH
6635: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 93 , 134 ) < 2 ;
6639: LD_VAR 0 2
6643: PUSH
6644: LD_INT 1
6646: ARRAY
6647: PPUSH
6648: LD_INT 93
6650: PPUSH
6651: LD_INT 134
6653: PPUSH
6654: CALL_OW 297
6658: PUSH
6659: LD_INT 2
6661: LESS
6662: IFFALSE 6632
// wait ( 0 0$5 ) ;
6664: LD_INT 175
6666: PPUSH
6667: CALL_OW 67
// ComMoveXY ( [ arSolds [ 1 ] , arSolds [ 2 ] ] , 107 , 134 ) ;
6671: LD_VAR 0 2
6675: PUSH
6676: LD_INT 1
6678: ARRAY
6679: PUSH
6680: LD_VAR 0 2
6684: PUSH
6685: LD_INT 2
6687: ARRAY
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PPUSH
6693: LD_INT 107
6695: PPUSH
6696: LD_INT 134
6698: PPUSH
6699: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6703: LD_INT 35
6705: PPUSH
6706: CALL_OW 67
// until GetDistUnitXY ( arSolds [ 1 ] , 107 , 134 ) < 5 ;
6710: LD_VAR 0 2
6714: PUSH
6715: LD_INT 1
6717: ARRAY
6718: PPUSH
6719: LD_INT 107
6721: PPUSH
6722: LD_INT 134
6724: PPUSH
6725: CALL_OW 297
6729: PUSH
6730: LD_INT 5
6732: LESS
6733: IFFALSE 6703
// ComCrawl ( arSolds ) ;
6735: LD_VAR 0 2
6739: PPUSH
6740: CALL_OW 137
// CenterOnXY ( 96 , 161 ) ;
6744: LD_INT 96
6746: PPUSH
6747: LD_INT 161
6749: PPUSH
6750: CALL_OW 84
// ComMoveXY ( Vsevolod , 97 , 160 ) ;
6754: LD_EXP 48
6758: PPUSH
6759: LD_INT 97
6761: PPUSH
6762: LD_INT 160
6764: PPUSH
6765: CALL_OW 111
// AddComTurnUnit ( Vsevolod , Burlak ) ;
6769: LD_EXP 48
6773: PPUSH
6774: LD_EXP 37
6778: PPUSH
6779: CALL_OW 179
// if IsInUnit ( Burlak ) then
6783: LD_EXP 37
6787: PPUSH
6788: CALL_OW 310
6792: IFFALSE 6803
// ComExitVehicle ( Burlak ) ;
6794: LD_EXP 37
6798: PPUSH
6799: CALL_OW 121
// wait ( 0 0$01 ) ;
6803: LD_INT 35
6805: PPUSH
6806: CALL_OW 67
// AddComMoveXY ( Burlak , 96 , 162 ) ;
6810: LD_EXP 37
6814: PPUSH
6815: LD_INT 96
6817: PPUSH
6818: LD_INT 162
6820: PPUSH
6821: CALL_OW 171
// AddComTurnUnit ( Burlak , Vsevolod ) ;
6825: LD_EXP 37
6829: PPUSH
6830: LD_EXP 48
6834: PPUSH
6835: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
6839: LD_INT 35
6841: PPUSH
6842: CALL_OW 67
// until GetDistUnits ( Burlak , Vsevolod ) <= 5 ;
6846: LD_EXP 37
6850: PPUSH
6851: LD_EXP 48
6855: PPUSH
6856: CALL_OW 296
6860: PUSH
6861: LD_INT 5
6863: LESSEQUAL
6864: IFFALSE 6839
// CenterOnXY ( 96 , 160 ) ;
6866: LD_INT 96
6868: PPUSH
6869: LD_INT 160
6871: PPUSH
6872: CALL_OW 84
// Say ( Burlak , DMeetVsevolodVS-Bur-1 ) ;
6876: LD_EXP 37
6880: PPUSH
6881: LD_STRING DMeetVsevolodVS-Bur-1
6883: PPUSH
6884: CALL_OW 88
// PlaceSeeing ( 52 , 59 , 3 , - 14 ) ;
6888: LD_INT 52
6890: PPUSH
6891: LD_INT 59
6893: PPUSH
6894: LD_INT 3
6896: PPUSH
6897: LD_INT 14
6899: NEG
6900: PPUSH
6901: CALL_OW 330
// CenterOnXY ( 58 , 54 ) ;
6905: LD_INT 58
6907: PPUSH
6908: LD_INT 54
6910: PPUSH
6911: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-1 ) ;
6915: LD_EXP 48
6919: PPUSH
6920: LD_STRING DMeetVsevolodVS-Vse-1
6922: PPUSH
6923: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6927: LD_EXP 37
6931: PUSH
6932: LD_EXP 48
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PPUSH
6941: CALL_OW 87
// Say ( Burlak , DMeetVsevolodVS-Bur-2 ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_STRING DMeetVsevolodVS-Bur-2
6952: PPUSH
6953: CALL_OW 88
// CenterOnXY ( 61 , 102 ) ;
6957: LD_INT 61
6959: PPUSH
6960: LD_INT 102
6962: PPUSH
6963: CALL_OW 84
// Say ( Vsevolod , DMeetVsevolodVS-Vse-2 ) ;
6967: LD_EXP 48
6971: PPUSH
6972: LD_STRING DMeetVsevolodVS-Vse-2
6974: PPUSH
6975: CALL_OW 88
// CenterNowOnUnits ( [ Burlak , Vsevolod ] ) ;
6979: LD_EXP 37
6983: PUSH
6984: LD_EXP 48
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PPUSH
6993: CALL_OW 87
// RemoveSeeing ( 52 , 59 , 3 ) ;
6997: LD_INT 52
6999: PPUSH
7000: LD_INT 59
7002: PPUSH
7003: LD_INT 3
7005: PPUSH
7006: CALL_OW 331
// RemoveSeeing ( 92 , 133 , 3 ) ;
7010: LD_INT 92
7012: PPUSH
7013: LD_INT 133
7015: PPUSH
7016: LD_INT 3
7018: PPUSH
7019: CALL_OW 331
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7023: LD_INT 3
7025: PPUSH
7026: LD_INT 2
7028: PPUSH
7029: LD_INT 1
7031: PPUSH
7032: LD_INT 1
7034: PPUSH
7035: CALL_OW 80
// if UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) and UnitFilter ( burlakUnits , [ f_type , unit_human ] ) then
7039: LD_VAR 0 3
7043: PPUSH
7044: LD_INT 21
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 58
7056: PUSH
7057: EMPTY
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PPUSH
7064: CALL_OW 72
7068: PUSH
7069: LD_VAR 0 3
7073: PPUSH
7074: LD_INT 21
7076: PUSH
7077: LD_INT 1
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PPUSH
7084: CALL_OW 72
7088: AND
7089: IFFALSE 7153
// ComEnterUnit ( UnitFilter ( burlakUnits , [ f_type , unit_human ] ) [ 1 ] , UnitFilter ( burlakUnits , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
7091: LD_VAR 0 3
7095: PPUSH
7096: LD_INT 21
7098: PUSH
7099: LD_INT 1
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 72
7110: PUSH
7111: LD_INT 1
7113: ARRAY
7114: PPUSH
7115: LD_VAR 0 3
7119: PPUSH
7120: LD_INT 21
7122: PUSH
7123: LD_INT 2
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 58
7132: PUSH
7133: EMPTY
7134: LIST
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 72
7144: PUSH
7145: LD_INT 1
7147: ARRAY
7148: PPUSH
7149: CALL_OW 120
// AddComMoveXY ( burlakUnits , GetX ( Burlak ) , GetY ( Burlak ) ) ;
7153: LD_VAR 0 3
7157: PPUSH
7158: LD_EXP 37
7162: PPUSH
7163: CALL_OW 250
7167: PPUSH
7168: LD_EXP 37
7172: PPUSH
7173: CALL_OW 251
7177: PPUSH
7178: CALL_OW 171
// wait ( 0 0$6 ) ;
7182: LD_INT 210
7184: PPUSH
7185: CALL_OW 67
// AddComMoveXY ( Burlak , 98 , 143 ) ;
7189: LD_EXP 37
7193: PPUSH
7194: LD_INT 98
7196: PPUSH
7197: LD_INT 143
7199: PPUSH
7200: CALL_OW 171
// AddComMoveXY ( Vsevolod , 98 , 143 ) ;
7204: LD_EXP 48
7208: PPUSH
7209: LD_INT 98
7211: PPUSH
7212: LD_INT 143
7214: PPUSH
7215: CALL_OW 171
// AddComMoveXY ( burlakUnits , 98 , 143 ) ;
7219: LD_VAR 0 3
7223: PPUSH
7224: LD_INT 98
7226: PPUSH
7227: LD_INT 143
7229: PPUSH
7230: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7234: LD_INT 35
7236: PPUSH
7237: CALL_OW 67
// ComMoveXY ( Burlak , 98 , 143 ) ;
7241: LD_EXP 37
7245: PPUSH
7246: LD_INT 98
7248: PPUSH
7249: LD_INT 143
7251: PPUSH
7252: CALL_OW 111
// ComMoveXY ( Vsevolod , 98 , 143 ) ;
7256: LD_EXP 48
7260: PPUSH
7261: LD_INT 98
7263: PPUSH
7264: LD_INT 143
7266: PPUSH
7267: CALL_OW 111
// CenterNowOnUnits ( Vsevolod ) ;
7271: LD_EXP 48
7275: PPUSH
7276: CALL_OW 87
// until GetDistUnitXY ( Burlak , 98 , 143 ) <= 4 and GetDistUnitXY ( Vsevolod , 98 , 143 ) <= 4 ;
7280: LD_EXP 37
7284: PPUSH
7285: LD_INT 98
7287: PPUSH
7288: LD_INT 143
7290: PPUSH
7291: CALL_OW 297
7295: PUSH
7296: LD_INT 4
7298: LESSEQUAL
7299: PUSH
7300: LD_EXP 48
7304: PPUSH
7305: LD_INT 98
7307: PPUSH
7308: LD_INT 143
7310: PPUSH
7311: CALL_OW 297
7315: PUSH
7316: LD_INT 4
7318: LESSEQUAL
7319: AND
7320: IFFALSE 7234
// CenterOnXY ( 93 , 134 ) ;
7322: LD_INT 93
7324: PPUSH
7325: LD_INT 134
7327: PPUSH
7328: CALL_OW 84
// ComMoveXY ( Vsevolod , 82 , 109 ) ;
7332: LD_EXP 48
7336: PPUSH
7337: LD_INT 82
7339: PPUSH
7340: LD_INT 109
7342: PPUSH
7343: CALL_OW 111
// wait ( 0 0$2 ) ;
7347: LD_INT 70
7349: PPUSH
7350: CALL_OW 67
// ComMoveXY ( Burlak , 82 , 109 ) ;
7354: LD_EXP 37
7358: PPUSH
7359: LD_INT 82
7361: PPUSH
7362: LD_INT 109
7364: PPUSH
7365: CALL_OW 111
// ComMoveXY ( burlakUnits , 82 , 109 ) ;
7369: LD_VAR 0 3
7373: PPUSH
7374: LD_INT 82
7376: PPUSH
7377: LD_INT 109
7379: PPUSH
7380: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// CenterNowOnUnits ( Vsevolod ) ;
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 87
// until GetDistUnitXY ( Vsevolod , 93 , 134 ) <= 2 ;
7400: LD_EXP 48
7404: PPUSH
7405: LD_INT 93
7407: PPUSH
7408: LD_INT 134
7410: PPUSH
7411: CALL_OW 297
7415: PUSH
7416: LD_INT 2
7418: LESSEQUAL
7419: IFFALSE 7384
// LaunchMineAtPos ( 93 , 134 , 2 ) ;
7421: LD_INT 93
7423: PPUSH
7424: LD_INT 134
7426: PPUSH
7427: LD_INT 2
7429: PPUSH
7430: CALL_OW 456
// wait ( 0 0$1 ) ;
7434: LD_INT 35
7436: PPUSH
7437: CALL_OW 67
// SetLives ( Vsevolod , 200 ) ;
7441: LD_EXP 48
7445: PPUSH
7446: LD_INT 200
7448: PPUSH
7449: CALL_OW 234
// wait ( 0 0$1 ) ;
7453: LD_INT 35
7455: PPUSH
7456: CALL_OW 67
// ComStop ( Burlak ) ;
7460: LD_EXP 37
7464: PPUSH
7465: CALL_OW 141
// ComStop ( Vsevolod ) ;
7469: LD_EXP 48
7473: PPUSH
7474: CALL_OW 141
// ComStop ( burlakUnits ) ;
7478: LD_VAR 0 3
7482: PPUSH
7483: CALL_OW 141
// DialogueOn ;
7487: CALL_OW 6
// if Kirilenkova then
7491: LD_EXP 45
7495: IFFALSE 7509
// Say ( Kirilenkova , DStasisVS-Kir-1 ) ;
7497: LD_EXP 45
7501: PPUSH
7502: LD_STRING DStasisVS-Kir-1
7504: PPUSH
7505: CALL_OW 88
// if Titov then
7509: LD_EXP 42
7513: IFFALSE 7527
// Say ( Titov , DStasisVS-Tit-1 ) ;
7515: LD_EXP 42
7519: PPUSH
7520: LD_STRING DStasisVS-Tit-1
7522: PPUSH
7523: CALL_OW 88
// Say ( Burlak , DStasisVS-Bur-1 ) ;
7527: LD_EXP 37
7531: PPUSH
7532: LD_STRING DStasisVS-Bur-1
7534: PPUSH
7535: CALL_OW 88
// if Titov then
7539: LD_EXP 42
7543: IFFALSE 7559
// Say ( Titov , DStasisVS-Tit-2 ) else
7545: LD_EXP 42
7549: PPUSH
7550: LD_STRING DStasisVS-Tit-2
7552: PPUSH
7553: CALL_OW 88
7557: GO 7577
// if Kirilenkova then
7559: LD_EXP 45
7563: IFFALSE 7577
// Say ( Kirilenkova , DStasisVS-Kir-2 ) ;
7565: LD_EXP 45
7569: PPUSH
7570: LD_STRING DStasisVS-Kir-2
7572: PPUSH
7573: CALL_OW 88
// if Titov or Kirilenkova then
7577: LD_EXP 42
7581: PUSH
7582: LD_EXP 45
7586: OR
7587: IFFALSE 7601
// Say ( Burlak , DStasisVS-Bur-2 ) ;
7589: LD_EXP 37
7593: PPUSH
7594: LD_STRING DStasisVS-Bur-2
7596: PPUSH
7597: CALL_OW 88
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// SayRadio ( Popov , DStasisVS-Pop-2 ) ;
7608: LD_EXP 50
7612: PPUSH
7613: LD_STRING DStasisVS-Pop-2
7615: PPUSH
7616: CALL_OW 94
// if Gleb then
7620: LD_EXP 40
7624: IFFALSE 7638
// Say ( Gleb , DStasisVS-Glb-2 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING DStasisVS-Glb-2
7633: PPUSH
7634: CALL_OW 88
// SetAttitude ( 3 , 2 , att_enemy , true ) ;
7638: LD_INT 3
7640: PPUSH
7641: LD_INT 2
7643: PPUSH
7644: LD_INT 2
7646: PPUSH
7647: LD_INT 1
7649: PPUSH
7650: CALL_OW 80
// ChangeSideFog ( 2 , 2 ) ;
7654: LD_INT 2
7656: PPUSH
7657: LD_INT 2
7659: PPUSH
7660: CALL_OW 343
// DialogueOff ;
7664: CALL_OW 7
// InGameOff ;
7668: CALL_OW 9
// SetLives ( Vsevolod , 250 ) ;
7672: LD_EXP 48
7676: PPUSH
7677: LD_INT 250
7679: PPUSH
7680: CALL_OW 234
// ChangeMissionObjectives ( MVsevolod ) ;
7684: LD_STRING MVsevolod
7686: PPUSH
7687: CALL_OW 337
// wait ( 0 0$2 ) ;
7691: LD_INT 70
7693: PPUSH
7694: CALL_OW 67
// ComWalk ( arSolds ) ;
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 138
// wait ( 0 0$01 ) ;
7707: LD_INT 35
7709: PPUSH
7710: CALL_OW 67
// AddComAgressiveMove ( arSolds , GetX ( Vsevolod ) , GetY ( Vsevolod ) ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_EXP 48
7723: PPUSH
7724: CALL_OW 250
7728: PPUSH
7729: LD_EXP 48
7733: PPUSH
7734: CALL_OW 251
7738: PPUSH
7739: CALL_OW 174
// end else
7743: GO 7796
// begin SayRadio ( Platonov , DStartNV-Pla-1 ) ;
7745: LD_EXP 49
7749: PPUSH
7750: LD_STRING DStartNV-Pla-1
7752: PPUSH
7753: CALL_OW 94
// SayRadio ( Platonov , DStart2-Pla-1 ) ;
7757: LD_EXP 49
7761: PPUSH
7762: LD_STRING DStart2-Pla-1
7764: PPUSH
7765: CALL_OW 94
// Say ( Burlak , DStart2-Bur-1 ) ;
7769: LD_EXP 37
7773: PPUSH
7774: LD_STRING DStart2-Bur-1
7776: PPUSH
7777: CALL_OW 88
// DialogueOff ;
7781: CALL_OW 7
// InGameOff ;
7785: CALL_OW 9
// ChangeMissionObjectives ( MStart ) ;
7789: LD_STRING MStart
7791: PPUSH
7792: CALL_OW 337
// end ; SaveForQuickRestart ;
7796: CALL_OW 22
// enableCounter = true ;
7800: LD_ADDR_EXP 18
7804: PUSH
7805: LD_INT 1
7807: ST_TO_ADDR
// ActiveAI ( GetAIIndexByID ( 1 ) ) ;
7808: LD_INT 1
7810: PPUSH
7811: CALL 18824 0 1
7815: PPUSH
7816: CALL 18668 0 1
// end ;
7820: LD_VAR 0 1
7824: RET
// every 0 0$5 trigger Vsevolod and GetLives ( Vsevolod ) >= 250 do
7825: LD_EXP 48
7829: PUSH
7830: LD_EXP 48
7834: PPUSH
7835: CALL_OW 256
7839: PUSH
7840: LD_INT 250
7842: GREATEREQUAL
7843: AND
7844: IFFALSE 7921
7846: GO 7848
7848: DISABLE
// begin DialogueOn ;
7849: CALL_OW 6
// CenterNowOnUnits ( Vsevolod ) ;
7853: LD_EXP 48
7857: PPUSH
7858: CALL_OW 87
// Say ( Burlak , DSeviSaved-Bur-1 ) ;
7862: LD_EXP 37
7866: PPUSH
7867: LD_STRING DSeviSaved-Bur-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-1 ) ;
7874: LD_EXP 48
7878: PPUSH
7879: LD_STRING DSeviSaved-Vse-1
7881: PPUSH
7882: CALL_OW 88
// Say ( Burlak , DSeviSaved-Bur-2 ) ;
7886: LD_EXP 37
7890: PPUSH
7891: LD_STRING DSeviSaved-Bur-2
7893: PPUSH
7894: CALL_OW 88
// Say ( Vsevolod , DSeviSaved-Vse-2 ) ;
7898: LD_EXP 48
7902: PPUSH
7903: LD_STRING DSeviSaved-Vse-2
7905: PPUSH
7906: CALL_OW 88
// DialogueOff ;
7910: CALL_OW 7
// ChangeMissionObjectives ( MStart ) ;
7914: LD_STRING MStart
7916: PPUSH
7917: CALL_OW 337
// end ;
7921: END
// every 5 5$0 trigger Kirilenkova and not IsDead ( Kirilenkova ) do var enemyUntis , x , y , dir ;
7922: LD_EXP 45
7926: PUSH
7927: LD_EXP 45
7931: PPUSH
7932: CALL_OW 301
7936: NOT
7937: AND
7938: IFFALSE 8762
7940: GO 7942
7942: DISABLE
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
7947: PPUSH
7948: PPUSH
// begin enemyUntis = FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
7949: LD_ADDR_VAR 0 1
7953: PUSH
7954: LD_INT 22
7956: PUSH
7957: LD_INT 2
7959: PUSH
7960: EMPTY
7961: LIST
7962: LIST
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: EMPTY
7968: LIST
7969: PUSH
7970: LD_INT 2
7972: PUSH
7973: LD_INT 59
7975: PUSH
7976: EMPTY
7977: LIST
7978: PUSH
7979: LD_INT 21
7981: PUSH
7982: LD_INT 1
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: PUSH
7989: LD_INT 21
7991: PUSH
7992: LD_INT 2
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: LIST
8009: PPUSH
8010: CALL_OW 69
8014: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until IsOK ( Kirilenkova ) and GetDistUnits ( NearestUnitToUnit ( enemyUntis , Kirilenkova ) , Kirilenkova ) > 12 ;
8022: LD_EXP 45
8026: PPUSH
8027: CALL_OW 302
8031: PUSH
8032: LD_VAR 0 1
8036: PPUSH
8037: LD_EXP 45
8041: PPUSH
8042: CALL_OW 74
8046: PPUSH
8047: LD_EXP 45
8051: PPUSH
8052: CALL_OW 296
8056: PUSH
8057: LD_INT 12
8059: GREATER
8060: AND
8061: IFFALSE 8015
// if IsInUnit ( Kirilenkova ) then
8063: LD_EXP 45
8067: PPUSH
8068: CALL_OW 310
8072: IFFALSE 8121
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
8074: LD_EXP 55
8078: PPUSH
8079: LD_EXP 45
8083: PPUSH
8084: CALL_OW 310
8088: PPUSH
8089: CALL_OW 250
8093: PPUSH
8094: LD_EXP 45
8098: PPUSH
8099: CALL_OW 310
8103: PPUSH
8104: CALL_OW 251
8108: PPUSH
8109: LD_INT 5
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 50
8119: GO 8156
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
8121: LD_EXP 55
8125: PPUSH
8126: LD_EXP 45
8130: PPUSH
8131: CALL_OW 250
8135: PPUSH
8136: LD_EXP 45
8140: PPUSH
8141: CALL_OW 251
8145: PPUSH
8146: LD_INT 5
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 50
// xavierSpawned = true ;
8156: LD_ADDR_EXP 11
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// wait ( 0 0$2 ) ;
8164: LD_INT 70
8166: PPUSH
8167: CALL_OW 67
// InGameOn ;
8171: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
8175: LD_EXP 55
8179: PPUSH
8180: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
8184: LD_EXP 55
8188: PPUSH
8189: LD_EXP 45
8193: PPUSH
8194: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8198: LD_EXP 45
8202: PPUSH
8203: LD_EXP 55
8207: PPUSH
8208: CALL_OW 119
// DialogueOn ;
8212: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
8216: LD_EXP 55
8220: PPUSH
8221: LD_STRING DMeetXavier-Xav-1
8223: PPUSH
8224: CALL_OW 88
// if IsInUnit ( Kirilenkova ) then
8228: LD_EXP 45
8232: PPUSH
8233: CALL_OW 310
8237: IFFALSE 8356
// begin if GetType ( IsInUnit ( Kirilenkova ) ) = unit_vehicle then
8239: LD_EXP 45
8243: PPUSH
8244: CALL_OW 310
8248: PPUSH
8249: CALL_OW 247
8253: PUSH
8254: LD_INT 2
8256: EQUAL
8257: IFFALSE 8270
// ComExitVehicle ( Kirilenkova ) else
8259: LD_EXP 45
8263: PPUSH
8264: CALL_OW 121
8268: GO 8279
// ComExitBuilding ( Kirilenkova ) ;
8270: LD_EXP 45
8274: PPUSH
8275: CALL_OW 122
// wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8286: LD_INT 35
8288: PPUSH
8289: CALL_OW 67
// ComMoveXY ( Kirilenkova , GetX ( Xavier ) , GetY ( Xavier ) ) ;
8293: LD_EXP 45
8297: PPUSH
8298: LD_EXP 55
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_EXP 55
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL_OW 111
// until GetDistUnits ( Kirilenkova , Xavier ) <= 3 ;
8322: LD_EXP 45
8326: PPUSH
8327: LD_EXP 55
8331: PPUSH
8332: CALL_OW 296
8336: PUSH
8337: LD_INT 3
8339: LESSEQUAL
8340: IFFALSE 8286
// ComTurnUnit ( Kirilenkova , Xavier ) ;
8342: LD_EXP 45
8346: PPUSH
8347: LD_EXP 55
8351: PPUSH
8352: CALL_OW 119
// end ; Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
8356: LD_EXP 45
8360: PPUSH
8361: LD_STRING DMeetXavier-Kir-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
8368: LD_EXP 55
8372: PPUSH
8373: LD_STRING DMeetXavier-Xav-2
8375: PPUSH
8376: CALL_OW 88
// case Query ( QXavier ) of 1 :
8380: LD_STRING QXavier
8382: PPUSH
8383: CALL_OW 97
8387: PUSH
8388: LD_INT 1
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8591
8396: POP
// begin Say ( Burlak , DQrXavier#1-Bur-1 ) ;
8397: LD_EXP 37
8401: PPUSH
8402: LD_STRING DQrXavier#1-Bur-1
8404: PPUSH
8405: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
8409: LD_EXP 45
8413: PPUSH
8414: LD_STRING DQrXavier#1-Kir-1
8416: PPUSH
8417: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
8421: LD_EXP 55
8425: PPUSH
8426: LD_STRING DQrXavier#1-Xav-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
8433: LD_EXP 45
8437: PPUSH
8438: LD_STRING DQrXavier#1-Kir-2
8440: PPUSH
8441: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
8445: LD_EXP 55
8449: PPUSH
8450: LD_STRING DQrXavier#1-Xav-2
8452: PPUSH
8453: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
8457: LD_EXP 45
8461: PPUSH
8462: LD_STRING DQrXavier#1-Kir-3
8464: PPUSH
8465: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
8469: LD_EXP 55
8473: PPUSH
8474: LD_STRING DQrXavier#1-Xav-3
8476: PPUSH
8477: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
8481: LD_EXP 45
8485: PPUSH
8486: LD_STRING DQrXavier#1-Kir-4
8488: PPUSH
8489: CALL_OW 88
// if IsOK ( Gleb ) then
8493: LD_EXP 40
8497: PPUSH
8498: CALL_OW 302
8502: IFFALSE 8516
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
8504: LD_EXP 40
8508: PPUSH
8509: LD_STRING DQrXavier#1-Glb-4
8511: PPUSH
8512: CALL_OW 88
// dir = GetDir ( Xavier ) ;
8516: LD_ADDR_VAR 0 4
8520: PUSH
8521: LD_EXP 55
8525: PPUSH
8526: CALL_OW 254
8530: ST_TO_ADDR
// x = GetX ( Xavier ) ;
8531: LD_ADDR_VAR 0 2
8535: PUSH
8536: LD_EXP 55
8540: PPUSH
8541: CALL_OW 250
8545: ST_TO_ADDR
// y = GetY ( Xavier ) ;
8546: LD_ADDR_VAR 0 3
8550: PUSH
8551: LD_EXP 55
8555: PPUSH
8556: CALL_OW 251
8560: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
8561: LD_EXP 55
8565: PPUSH
8566: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
8570: LD_VAR 0 2
8574: PPUSH
8575: LD_VAR 0 3
8579: PPUSH
8580: LD_VAR 0 4
8584: PPUSH
8585: CALL 1193 0 3
// end ; 2 :
8589: GO 8754
8591: LD_INT 2
8593: DOUBLE
8594: EQUAL
8595: IFTRUE 8599
8597: GO 8753
8599: POP
// begin Say ( Burlak , DQrXavier#2-Bur-1 ) ;
8600: LD_EXP 37
8604: PPUSH
8605: LD_STRING DQrXavier#2-Bur-1
8607: PPUSH
8608: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-1 ) ;
8612: LD_EXP 45
8616: PPUSH
8617: LD_STRING DQrXavier#2-Kir-1
8619: PPUSH
8620: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-1 ) ;
8624: LD_EXP 55
8628: PPUSH
8629: LD_STRING DQrXavier#2-Xav-1
8631: PPUSH
8632: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-2 ) ;
8636: LD_EXP 45
8640: PPUSH
8641: LD_STRING DQrXavier#2-Kir-2
8643: PPUSH
8644: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-2 ) ;
8648: LD_EXP 55
8652: PPUSH
8653: LD_STRING DQrXavier#2-Xav-2
8655: PPUSH
8656: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-3 ) ;
8660: LD_EXP 45
8664: PPUSH
8665: LD_STRING DQrXavier#2-Kir-3
8667: PPUSH
8668: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-3 ) ;
8672: LD_EXP 55
8676: PPUSH
8677: LD_STRING DQrXavier#2-Xav-3
8679: PPUSH
8680: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-4 ) ;
8684: LD_EXP 45
8688: PPUSH
8689: LD_STRING DQrXavier#2-Kir-4
8691: PPUSH
8692: CALL_OW 88
// Say ( Xavier , DQrXavier#2-Xav-4 ) ;
8696: LD_EXP 55
8700: PPUSH
8701: LD_STRING DQrXavier#2-Xav-4
8703: PPUSH
8704: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#2-Kir-5 ) ;
8708: LD_EXP 45
8712: PPUSH
8713: LD_STRING DQrXavier#2-Kir-5
8715: PPUSH
8716: CALL_OW 88
// if IsOK ( Gleb ) then
8720: LD_EXP 40
8724: PPUSH
8725: CALL_OW 302
8729: IFFALSE 8743
// Say ( Gleb , DQrXavier#2-Glb-5 ) ;
8731: LD_EXP 40
8735: PPUSH
8736: LD_STRING DQrXavier#2-Glb-5
8738: PPUSH
8739: CALL_OW 88
// xavierPatrol = true ;
8743: LD_ADDR_EXP 7
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// end ; end ;
8751: GO 8754
8753: POP
// InGameOff ;
8754: CALL_OW 9
// DialogueOff ;
8758: CALL_OW 7
// end ;
8762: PPOPN 4
8764: END
// every 0 0$1 trigger xavierPatrol and GetAttitude ( 3 , 5 ) = att_friend do var i ;
8765: LD_EXP 7
8769: PUSH
8770: LD_INT 3
8772: PPUSH
8773: LD_INT 5
8775: PPUSH
8776: CALL_OW 81
8780: PUSH
8781: LD_INT 1
8783: EQUAL
8784: AND
8785: IFFALSE 8855
8787: GO 8789
8789: DISABLE
8790: LD_INT 0
8792: PPUSH
// begin enable ;
8793: ENABLE
// for i := 1 to xavierPatrolPathKabul do
8794: LD_ADDR_VAR 0 1
8798: PUSH
8799: DOUBLE
8800: LD_INT 1
8802: DEC
8803: ST_TO_ADDR
8804: LD_EXP 6
8808: PUSH
8809: FOR_TO
8810: IFFALSE 8853
// AddComMoveXY ( Xavier , xavierPatrolPathKabul [ i ] [ 1 ] , xavierPatrolPathKabul [ i ] [ 2 ] ) ;
8812: LD_EXP 55
8816: PPUSH
8817: LD_EXP 6
8821: PUSH
8822: LD_VAR 0 1
8826: ARRAY
8827: PUSH
8828: LD_INT 1
8830: ARRAY
8831: PPUSH
8832: LD_EXP 6
8836: PUSH
8837: LD_VAR 0 1
8841: ARRAY
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: CALL_OW 171
8851: GO 8809
8853: POP
8854: POP
// end ;
8855: PPOPN 1
8857: END
// every 7 7$0 trigger xavierPatrol and xavierFirstPatrol and GetAttitude ( 3 , 5 ) = att_friend do
8858: LD_EXP 7
8862: PUSH
8863: LD_EXP 8
8867: AND
8868: PUSH
8869: LD_INT 3
8871: PPUSH
8872: LD_INT 5
8874: PPUSH
8875: CALL_OW 81
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: AND
8884: IFFALSE 8928
8886: GO 8888
8888: DISABLE
// begin xavierPatrol = false ;
8889: LD_ADDR_EXP 7
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// xavierCanSaySpotDialog = true ;
8897: LD_ADDR_EXP 9
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// xavierFirstPatrol = false ;
8905: LD_ADDR_EXP 8
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
8913: LD_EXP 55
8917: PPUSH
8918: LD_INT 123
8920: PPUSH
8921: LD_INT 92
8923: PPUSH
8924: CALL_OW 111
// end ;
8928: END
// every 0 0$1 trigger xavierCanSaySpotDialog and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and IsOk ( Kirilenkova ) and GetAttitude ( 3 , 5 ) = att_friend do
8929: LD_EXP 9
8933: PUSH
8934: LD_EXP 55
8938: PPUSH
8939: LD_INT 123
8941: PPUSH
8942: LD_INT 92
8944: PPUSH
8945: CALL_OW 297
8949: PUSH
8950: LD_INT 2
8952: LESSEQUAL
8953: AND
8954: PUSH
8955: LD_EXP 45
8959: PPUSH
8960: CALL_OW 302
8964: AND
8965: PUSH
8966: LD_INT 3
8968: PPUSH
8969: LD_INT 5
8971: PPUSH
8972: CALL_OW 81
8976: PUSH
8977: LD_INT 1
8979: EQUAL
8980: AND
8981: IFFALSE 9084
8983: GO 8985
8985: DISABLE
// begin DialogueOn ;
8986: CALL_OW 6
// CenterNowOnUnits ( Xavier ) ;
8990: LD_EXP 55
8994: PPUSH
8995: CALL_OW 87
// Say ( Xavier , DPointXavier-Xav-1 ) ;
8999: LD_EXP 55
9003: PPUSH
9004: LD_STRING DPointXavier-Xav-1
9006: PPUSH
9007: CALL_OW 88
// Say ( Kirilenkova , DPointXavier-Kir-1 ) ;
9011: LD_EXP 45
9015: PPUSH
9016: LD_STRING DPointXavier-Kir-1
9018: PPUSH
9019: CALL_OW 88
// Say ( Xavier , DPointXavier-Xav-2 ) ;
9023: LD_EXP 55
9027: PPUSH
9028: LD_STRING DPointXavier-Xav-2
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// SetAreaMapShow ( XavierContactArea , 1 ) ;
9039: LD_INT 7
9041: PPUSH
9042: LD_INT 1
9044: PPUSH
9045: CALL_OW 424
// SetTaskList ( Xavier , [ ] ) ;
9049: LD_EXP 55
9053: PPUSH
9054: EMPTY
9055: PPUSH
9056: CALL_OW 446
// canLeaveMessage = true ;
9060: LD_ADDR_EXP 12
9064: PUSH
9065: LD_INT 1
9067: ST_TO_ADDR
// xavierCanSaySpotDialog = false ;
9068: LD_ADDR_EXP 9
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// xavierPatrol = true ;
9076: LD_ADDR_EXP 7
9080: PUSH
9081: LD_INT 1
9083: ST_TO_ADDR
// end ;
9084: END
// every 0 0$1 trigger canLeaveMessage and IsInArea ( Kirilenkova , XavierContactArea ) and GetAttitude ( 3 , 5 ) = att_friend do
9085: LD_EXP 12
9089: PUSH
9090: LD_EXP 45
9094: PPUSH
9095: LD_INT 7
9097: PPUSH
9098: CALL_OW 308
9102: AND
9103: PUSH
9104: LD_INT 3
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 81
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: AND
9119: IFFALSE 9238
9121: GO 9123
9123: DISABLE
// begin case Query ( QActivateXavier ) of 1 :
9124: LD_STRING QActivateXavier
9126: PPUSH
9127: CALL_OW 97
9131: PUSH
9132: LD_INT 1
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9171
9140: POP
// begin messageForXavier = 1 ;
9141: LD_ADDR_EXP 13
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
// canLeaveMessage = false ;
9149: LD_ADDR_EXP 12
9153: PUSH
9154: LD_INT 0
9156: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9157: LD_INT 7
9159: PPUSH
9160: LD_INT 0
9162: PPUSH
9163: CALL_OW 424
// exit ;
9167: GO 9238
// end ; 2 :
9169: GO 9230
9171: LD_INT 2
9173: DOUBLE
9174: EQUAL
9175: IFTRUE 9179
9177: GO 9210
9179: POP
// begin messageForXavier = 2 ;
9180: LD_ADDR_EXP 13
9184: PUSH
9185: LD_INT 2
9187: ST_TO_ADDR
// canLeaveMessage = false ;
9188: LD_ADDR_EXP 12
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// SetAreaMapShow ( XavierContactArea , 0 ) ;
9196: LD_INT 7
9198: PPUSH
9199: LD_INT 0
9201: PPUSH
9202: CALL_OW 424
// exit ;
9206: GO 9238
// end ; 3 :
9208: GO 9230
9210: LD_INT 3
9212: DOUBLE
9213: EQUAL
9214: IFTRUE 9218
9216: GO 9229
9218: POP
// messageForXavier = 3 ; end ;
9219: LD_ADDR_EXP 13
9223: PUSH
9224: LD_INT 3
9226: ST_TO_ADDR
9227: GO 9230
9229: POP
// wait ( 0 0$4 ) ;
9230: LD_INT 140
9232: PPUSH
9233: CALL_OW 67
// enable ;
9237: ENABLE
// end ;
9238: END
// every 0 0$20 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetAttitude ( 3 , 5 ) = att_friend do
9239: LD_EXP 13
9243: PUSH
9244: LD_INT 1
9246: EQUAL
9247: PUSH
9248: LD_EXP 13
9252: PUSH
9253: LD_INT 2
9255: EQUAL
9256: OR
9257: PUSH
9258: LD_INT 3
9260: PPUSH
9261: LD_INT 5
9263: PPUSH
9264: CALL_OW 81
9268: PUSH
9269: LD_INT 1
9271: EQUAL
9272: AND
9273: IFFALSE 9301
9275: GO 9277
9277: DISABLE
// begin xavierPatrol = false ;
9278: LD_ADDR_EXP 7
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// ComMoveXY ( Xavier , 123 , 92 ) ;
9286: LD_EXP 55
9290: PPUSH
9291: LD_INT 123
9293: PPUSH
9294: LD_INT 92
9296: PPUSH
9297: CALL_OW 111
// end ;
9301: END
// every 0 0$1 trigger ( messageForXavier = 1 or messageForXavier = 2 ) and GetDistUnitXY ( Xavier , 123 , 92 ) <= 2 and GetAttitude ( 3 , 5 ) = att_friend do
9302: LD_EXP 13
9306: PUSH
9307: LD_INT 1
9309: EQUAL
9310: PUSH
9311: LD_EXP 13
9315: PUSH
9316: LD_INT 2
9318: EQUAL
9319: OR
9320: PUSH
9321: LD_EXP 55
9325: PPUSH
9326: LD_INT 123
9328: PPUSH
9329: LD_INT 92
9331: PPUSH
9332: CALL_OW 297
9336: PUSH
9337: LD_INT 2
9339: LESSEQUAL
9340: AND
9341: PUSH
9342: LD_INT 3
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: CALL_OW 81
9352: PUSH
9353: LD_INT 1
9355: EQUAL
9356: AND
9357: IFFALSE 9426
9359: GO 9361
9361: DISABLE
// begin if messageForXavier = 1 then
9362: LD_EXP 13
9366: PUSH
9367: LD_INT 1
9369: EQUAL
9370: IFFALSE 9392
// begin Say ( Burlak , DQrActivateXavier#1-Bur-1 ) ;
9372: LD_EXP 37
9376: PPUSH
9377: LD_STRING DQrActivateXavier#1-Bur-1
9379: PPUSH
9380: CALL_OW 88
// xavierJoinToPlayer = true ;
9384: LD_ADDR_EXP 10
9388: PUSH
9389: LD_INT 1
9391: ST_TO_ADDR
// end ; if messageForXavier = 2 then
9392: LD_EXP 13
9396: PUSH
9397: LD_INT 2
9399: EQUAL
9400: IFFALSE 9426
// begin Say ( Burlak , DQrActivateXavier#2-Bur-1 ) ;
9402: LD_EXP 37
9406: PPUSH
9407: LD_STRING DQrActivateXavier#2-Bur-1
9409: PPUSH
9410: CALL_OW 88
// ComEnterUnit ( Xavier , XavierVeh ) ;
9414: LD_EXP 55
9418: PPUSH
9419: LD_INT 53
9421: PPUSH
9422: CALL_OW 120
// end ; end ;
9426: END
// every 0 0$1 trigger xavierJoinToPlayer and GetAttitude ( 3 , 5 ) = att_friend do var unit , yourUnits , x , y , dir , veh ;
9427: LD_EXP 10
9431: PUSH
9432: LD_INT 3
9434: PPUSH
9435: LD_INT 5
9437: PPUSH
9438: CALL_OW 81
9442: PUSH
9443: LD_INT 1
9445: EQUAL
9446: AND
9447: IFFALSE 9827
9449: GO 9451
9451: DISABLE
9452: LD_INT 0
9454: PPUSH
9455: PPUSH
9456: PPUSH
9457: PPUSH
9458: PPUSH
9459: PPUSH
// begin if messageForXavier = 1 then
9460: LD_EXP 13
9464: PUSH
9465: LD_INT 1
9467: EQUAL
9468: IFFALSE 9499
// ComMoveXY ( Xavier , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9470: LD_EXP 55
9474: PPUSH
9475: LD_EXP 37
9479: PPUSH
9480: CALL_OW 250
9484: PPUSH
9485: LD_EXP 37
9489: PPUSH
9490: CALL_OW 251
9494: PPUSH
9495: CALL_OW 111
// if messageForXavier = 2 then
9499: LD_EXP 13
9503: PUSH
9504: LD_INT 2
9506: EQUAL
9507: IFFALSE 9543
// ComMoveXY ( IsInUnit ( Xavier ) , GetX ( Burlak ) , GetY ( Burlak ) ) ;
9509: LD_EXP 55
9513: PPUSH
9514: CALL_OW 310
9518: PPUSH
9519: LD_EXP 37
9523: PPUSH
9524: CALL_OW 250
9528: PPUSH
9529: LD_EXP 37
9533: PPUSH
9534: CALL_OW 251
9538: PPUSH
9539: CALL_OW 111
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_human ] , [ f_occupied ] ] ] ) ;
9543: LD_ADDR_VAR 0 2
9547: PUSH
9548: LD_INT 22
9550: PUSH
9551: LD_INT 3
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: EMPTY
9562: LIST
9563: PUSH
9564: LD_INT 2
9566: PUSH
9567: LD_INT 21
9569: PUSH
9570: LD_INT 1
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: PUSH
9577: LD_INT 59
9579: PUSH
9580: EMPTY
9581: LIST
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: PPUSH
9593: CALL_OW 69
9597: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( yourUnits , Xavier ) , Xavier ) <= 6 and messageForXavier = 1 then
9598: LD_VAR 0 2
9602: PPUSH
9603: LD_EXP 55
9607: PPUSH
9608: CALL_OW 74
9612: PPUSH
9613: LD_EXP 55
9617: PPUSH
9618: CALL_OW 296
9622: PUSH
9623: LD_INT 6
9625: LESSEQUAL
9626: PUSH
9627: LD_EXP 13
9631: PUSH
9632: LD_INT 1
9634: EQUAL
9635: AND
9636: IFFALSE 9721
// begin xavierJoinToPlayer = false ;
9638: LD_ADDR_EXP 10
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// x = GetX ( Xavier ) ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: LD_EXP 55
9655: PPUSH
9656: CALL_OW 250
9660: ST_TO_ADDR
// y = GetY ( Xavier ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_EXP 55
9670: PPUSH
9671: CALL_OW 251
9675: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
9676: LD_ADDR_VAR 0 5
9680: PUSH
9681: LD_EXP 55
9685: PPUSH
9686: CALL_OW 254
9690: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9691: LD_EXP 55
9695: PPUSH
9696: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
9700: LD_VAR 0 3
9704: PPUSH
9705: LD_VAR 0 4
9709: PPUSH
9710: LD_VAR 0 5
9714: PPUSH
9715: CALL 1193 0 3
// exit ;
9719: GO 9827
// end ; if GetDistUnits ( NearestUnitToUnit ( yourUnits , IsInUnit ( Xavier ) ) , IsInUnit ( Xavier ) ) <= 6 and messageForXavier = 2 then
9721: LD_VAR 0 2
9725: PPUSH
9726: LD_EXP 55
9730: PPUSH
9731: CALL_OW 310
9735: PPUSH
9736: CALL_OW 74
9740: PPUSH
9741: LD_EXP 55
9745: PPUSH
9746: CALL_OW 310
9750: PPUSH
9751: CALL_OW 296
9755: PUSH
9756: LD_INT 6
9758: LESSEQUAL
9759: PUSH
9760: LD_EXP 13
9764: PUSH
9765: LD_INT 2
9767: EQUAL
9768: AND
9769: IFFALSE 9826
// begin xavierJoinToPlayer = false ;
9771: LD_ADDR_EXP 10
9775: PUSH
9776: LD_INT 0
9778: ST_TO_ADDR
// veh = IsInUnit ( Xavier ) ;
9779: LD_ADDR_VAR 0 6
9783: PUSH
9784: LD_EXP 55
9788: PPUSH
9789: CALL_OW 310
9793: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
9794: LD_EXP 55
9798: PPUSH
9799: CALL_OW 64
// SetSide ( veh , 3 ) ;
9803: LD_VAR 0 6
9807: PPUSH
9808: LD_INT 3
9810: PPUSH
9811: CALL_OW 235
// PrepareXavierRuVeh ( veh ) ;
9815: LD_VAR 0 6
9819: PPUSH
9820: CALL 1272 0 1
// exit ;
9824: GO 9827
// end ; enable ;
9826: ENABLE
// end ;
9827: PPOPN 6
9829: END
// every 8 8$0 do var playerDepot , bazookDialog ;
9830: GO 9832
9832: DISABLE
9833: LD_INT 0
9835: PPUSH
9836: PPUSH
// begin SetTech ( tech_bazooka , 3 , state_enabled ) ;
9837: LD_INT 44
9839: PPUSH
9840: LD_INT 3
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 322
// PlaceUnitArea ( Yashin , YashinSpawnArea , false ) ;
9850: LD_EXP 51
9854: PPUSH
9855: LD_INT 8
9857: PPUSH
9858: LD_INT 0
9860: PPUSH
9861: CALL_OW 49
// ComMoveXY ( Yashin , 97 , 162 ) ;
9865: LD_EXP 51
9869: PPUSH
9870: LD_INT 97
9872: PPUSH
9873: LD_INT 162
9875: PPUSH
9876: CALL_OW 111
// wait ( 0 0$3 ) ;
9880: LD_INT 105
9882: PPUSH
9883: CALL_OW 67
// CenterNowOnUnits ( Yashin ) ;
9887: LD_EXP 51
9891: PPUSH
9892: CALL_OW 87
// DialogueOn ;
9896: CALL_OW 6
// Say ( Yashin , DYashinArrives-Yas-1 ) ;
9900: LD_EXP 51
9904: PPUSH
9905: LD_STRING DYashinArrives-Yas-1
9907: PPUSH
9908: CALL_OW 88
// if savedVsevolod then
9912: LD_EXP 1
9916: IFFALSE 9980
// begin Say ( Vsevolod , DYashinArrives-Vse-1 ) ;
9918: LD_EXP 48
9922: PPUSH
9923: LD_STRING DYashinArrives-Vse-1
9925: PPUSH
9926: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-2 ) ;
9930: LD_EXP 51
9934: PPUSH
9935: LD_STRING DYashinArrives-Yas-2
9937: PPUSH
9938: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-2 ) ;
9942: LD_EXP 48
9946: PPUSH
9947: LD_STRING DYashinArrives-Vse-2
9949: PPUSH
9950: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-3 ) ;
9954: LD_EXP 51
9958: PPUSH
9959: LD_STRING DYashinArrives-Yas-3
9961: PPUSH
9962: CALL_OW 88
// Say ( Vsevolod , DYashinArrives-Vse-3 ) ;
9966: LD_EXP 48
9970: PPUSH
9971: LD_STRING DYashinArrives-Vse-3
9973: PPUSH
9974: CALL_OW 88
// end else
9978: GO 10028
// begin Say ( Burlak , DYashinArrives-Bur-3 ) ;
9980: LD_EXP 37
9984: PPUSH
9985: LD_STRING DYashinArrives-Bur-3
9987: PPUSH
9988: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-4 ) ;
9992: LD_EXP 51
9996: PPUSH
9997: LD_STRING DYashinArrives-Yas-4
9999: PPUSH
10000: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-4 ) ;
10004: LD_EXP 37
10008: PPUSH
10009: LD_STRING DYashinArrives-Bur-4
10011: PPUSH
10012: CALL_OW 88
// SayRadio ( Yashin , DYashinArrives-Yas-5 ) ;
10016: LD_EXP 51
10020: PPUSH
10021: LD_STRING DYashinArrives-Yas-5
10023: PPUSH
10024: CALL_OW 94
// end ; Say ( Burlak , DYashinArrives-Bur-5 ) ;
10028: LD_EXP 37
10032: PPUSH
10033: LD_STRING DYashinArrives-Bur-5
10035: PPUSH
10036: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-6 ) ;
10040: LD_EXP 51
10044: PPUSH
10045: LD_STRING DYashinArrives-Yas-6
10047: PPUSH
10048: CALL_OW 88
// Say ( Burlak , DYashinArrives-Bur-6 ) ;
10052: LD_EXP 37
10056: PPUSH
10057: LD_STRING DYashinArrives-Bur-6
10059: PPUSH
10060: CALL_OW 88
// Say ( Yashin , DYashinArrives-Yas-7 ) ;
10064: LD_EXP 51
10068: PPUSH
10069: LD_STRING DYashinArrives-Yas-7
10071: PPUSH
10072: CALL_OW 88
// if IsDead ( ar_bun1 ) and IsDead ( ar_bun2 ) and IsDead ( ar_bun3 ) then
10076: LD_INT 63
10078: PPUSH
10079: CALL_OW 301
10083: PUSH
10084: LD_INT 66
10086: PPUSH
10087: CALL_OW 301
10091: AND
10092: PUSH
10093: LD_INT 68
10095: PPUSH
10096: CALL_OW 301
10100: AND
10101: IFFALSE 10184
// begin case Query ( QYashinHelp2 ) of 1 :
10103: LD_STRING QYashinHelp2
10105: PPUSH
10106: CALL_OW 97
10110: PUSH
10111: LD_INT 1
10113: DOUBLE
10114: EQUAL
10115: IFTRUE 10119
10117: GO 10146
10119: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10120: LD_EXP 37
10124: PPUSH
10125: LD_STRING DQrYashinHelp#2-Bur-1
10127: PPUSH
10128: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10132: LD_EXP 51
10136: PPUSH
10137: LD_STRING DQrYashinHelp#2-Yas-1
10139: PPUSH
10140: CALL_OW 88
// end ; 2 :
10144: GO 10182
10146: LD_INT 2
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10181
10154: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10155: LD_EXP 37
10159: PPUSH
10160: LD_STRING DQrYashinHelp#3-Bur-1
10162: PPUSH
10163: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10167: LD_EXP 51
10171: PPUSH
10172: LD_STRING DQrYashinHelp#3-Yas-1
10174: PPUSH
10175: CALL_OW 88
// end ; end ;
10179: GO 10182
10181: POP
// end else
10182: GO 10330
// begin case Query ( QYashinHelp ) of 1 :
10184: LD_STRING QYashinHelp
10186: PPUSH
10187: CALL_OW 97
10191: PUSH
10192: LD_INT 1
10194: DOUBLE
10195: EQUAL
10196: IFTRUE 10200
10198: GO 10259
10200: POP
// begin Say ( Burlak , DQrYashinHelp#1-Bur-1 ) ;
10201: LD_EXP 37
10205: PPUSH
10206: LD_STRING DQrYashinHelp#1-Bur-1
10208: PPUSH
10209: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-1 ) ;
10213: LD_EXP 51
10217: PPUSH
10218: LD_STRING DQrYashinHelp#1-Yas-1
10220: PPUSH
10221: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10225: LD_EXP 37
10229: PPUSH
10230: LD_STRING DQrYashinHelp#1-Bur-2
10232: PPUSH
10233: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10237: LD_EXP 51
10241: PPUSH
10242: LD_STRING DQrYashinHelp#1-Yas-2
10244: PPUSH
10245: CALL_OW 88
// bazookDialog = true ;
10249: LD_ADDR_VAR 0 2
10253: PUSH
10254: LD_INT 1
10256: ST_TO_ADDR
// end ; 2 :
10257: GO 10330
10259: LD_INT 2
10261: DOUBLE
10262: EQUAL
10263: IFTRUE 10267
10265: GO 10294
10267: POP
// begin Say ( Burlak , DQrYashinHelp#2-Bur-1 ) ;
10268: LD_EXP 37
10272: PPUSH
10273: LD_STRING DQrYashinHelp#2-Bur-1
10275: PPUSH
10276: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#2-Yas-1 ) ;
10280: LD_EXP 51
10284: PPUSH
10285: LD_STRING DQrYashinHelp#2-Yas-1
10287: PPUSH
10288: CALL_OW 88
// end ; 3 :
10292: GO 10330
10294: LD_INT 3
10296: DOUBLE
10297: EQUAL
10298: IFTRUE 10302
10300: GO 10329
10302: POP
// begin Say ( Burlak , DQrYashinHelp#3-Bur-1 ) ;
10303: LD_EXP 37
10307: PPUSH
10308: LD_STRING DQrYashinHelp#3-Bur-1
10310: PPUSH
10311: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#3-Yas-1 ) ;
10315: LD_EXP 51
10319: PPUSH
10320: LD_STRING DQrYashinHelp#3-Yas-1
10322: PPUSH
10323: CALL_OW 88
// end ; end ;
10327: GO 10330
10329: POP
// end ; if not bazookDialog then
10330: LD_VAR 0 2
10334: NOT
10335: IFFALSE 10373
// begin Say ( Yashin , DQrYashinHelp#4-Yas-1 ) ;
10337: LD_EXP 51
10341: PPUSH
10342: LD_STRING DQrYashinHelp#4-Yas-1
10344: PPUSH
10345: CALL_OW 88
// Say ( Burlak , DQrYashinHelp#1-Bur-2 ) ;
10349: LD_EXP 37
10353: PPUSH
10354: LD_STRING DQrYashinHelp#1-Bur-2
10356: PPUSH
10357: CALL_OW 88
// Say ( Yashin , DQrYashinHelp#1-Yas-2 ) ;
10361: LD_EXP 51
10365: PPUSH
10366: LD_STRING DQrYashinHelp#1-Yas-2
10368: PPUSH
10369: CALL_OW 88
// end ; Say ( Yashin , DYashinLeave-Yas-1 ) ;
10373: LD_EXP 51
10377: PPUSH
10378: LD_STRING DYashinLeave-Yas-1
10380: PPUSH
10381: CALL_OW 88
// yashinSearchVeh = true ;
10385: LD_ADDR_EXP 15
10389: PUSH
10390: LD_INT 1
10392: ST_TO_ADDR
// DialogueOff ;
10393: CALL_OW 7
// playerDepot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
10397: LD_ADDR_VAR 0 1
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 0
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: PUSH
10425: LD_INT 30
10427: PUSH
10428: LD_INT 1
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: PPUSH
10444: CALL_OW 69
10448: ST_TO_ADDR
// if playerDepot then
10449: LD_VAR 0 1
10453: IFFALSE 10492
// ComMoveXY ( Yashin , GetX ( playerDepot [ 1 ] ) , GetY ( playerDepot [ 1 ] ) ) ;
10455: LD_EXP 51
10459: PPUSH
10460: LD_VAR 0 1
10464: PUSH
10465: LD_INT 1
10467: ARRAY
10468: PPUSH
10469: CALL_OW 250
10473: PPUSH
10474: LD_VAR 0 1
10478: PUSH
10479: LD_INT 1
10481: ARRAY
10482: PPUSH
10483: CALL_OW 251
10487: PPUSH
10488: CALL_OW 111
// end ;
10492: PPOPN 2
10494: END
// every 1 trigger IsPlaced ( Yashin ) do var yourUnits , unit ;
10495: LD_EXP 51
10499: PPUSH
10500: CALL_OW 305
10504: IFFALSE 10620
10506: GO 10508
10508: DISABLE
10509: LD_INT 0
10511: PPUSH
10512: PPUSH
// begin yourUnits = FilterAllUnits ( [ f_side , 3 ] ) ;
10513: LD_ADDR_VAR 0 1
10517: PUSH
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PPUSH
10528: CALL_OW 69
10532: ST_TO_ADDR
// for unit in yourUnits do
10533: LD_ADDR_VAR 0 2
10537: PUSH
10538: LD_VAR 0 1
10542: PUSH
10543: FOR_IN
10544: IFFALSE 10617
// if WantsToAttack ( unit ) = Yashin or ( yashinVeh and WantsToAttack ( unit ) = yashinVeh ) then
10546: LD_VAR 0 2
10550: PPUSH
10551: CALL_OW 319
10555: PUSH
10556: LD_EXP 51
10560: EQUAL
10561: PUSH
10562: LD_EXP 14
10566: PUSH
10567: LD_VAR 0 2
10571: PPUSH
10572: CALL_OW 319
10576: PUSH
10577: LD_EXP 14
10581: EQUAL
10582: AND
10583: OR
10584: IFFALSE 10615
// begin ComStop ( unit ) ;
10586: LD_VAR 0 2
10590: PPUSH
10591: CALL_OW 141
// DialogueOn ;
10595: CALL_OW 6
// Say ( Burlak , DYashinAttack-Bur-1 ) ;
10599: LD_EXP 37
10603: PPUSH
10604: LD_STRING DYashinAttack-Bur-1
10606: PPUSH
10607: CALL_OW 88
// DialogueOff end ;
10611: CALL_OW 7
10615: GO 10543
10617: POP
10618: POP
// enable ;
10619: ENABLE
// end ;
10620: PPOPN 2
10622: END
// every 1 trigger IsPlaced ( Yashin ) do
10623: LD_EXP 51
10627: PPUSH
10628: CALL_OW 305
10632: IFFALSE 10668
10634: GO 10636
10636: DISABLE
// begin SetLives ( Yashin , 1000 ) ;
10637: LD_EXP 51
10641: PPUSH
10642: LD_INT 1000
10644: PPUSH
10645: CALL_OW 234
// if yashinVeh then
10649: LD_EXP 14
10653: IFFALSE 10667
// SetLives ( yashinVeh , 1000 ) ;
10655: LD_EXP 14
10659: PPUSH
10660: LD_INT 1000
10662: PPUSH
10663: CALL_OW 234
// enable ;
10667: ENABLE
// end ;
10668: END
// every 0 0$1 trigger IsPlaced ( Yashin ) and yashinSearchVeh do var playerVehsEmpty , playerVehs , veh , driver ;
10669: LD_EXP 51
10673: PPUSH
10674: CALL_OW 305
10678: PUSH
10679: LD_EXP 15
10683: AND
10684: IFFALSE 11128
10686: GO 10688
10688: DISABLE
10689: LD_INT 0
10691: PPUSH
10692: PPUSH
10693: PPUSH
10694: PPUSH
// begin playerVehsEmpty = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10695: LD_ADDR_VAR 0 1
10699: PUSH
10700: LD_INT 22
10702: PUSH
10703: LD_INT 3
10705: PUSH
10706: EMPTY
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 21
10712: PUSH
10713: LD_INT 2
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 58
10722: PUSH
10723: EMPTY
10724: LIST
10725: PUSH
10726: LD_INT 23
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 2
10738: PUSH
10739: LD_INT 34
10741: PUSH
10742: LD_INT 42
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: PUSH
10749: LD_INT 34
10751: PUSH
10752: LD_INT 43
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 34
10761: PUSH
10762: LD_INT 44
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 34
10771: PUSH
10772: LD_INT 46
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PPUSH
10793: CALL_OW 69
10797: ST_TO_ADDR
// playerVehs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_nation , nation_russian ] , [ f_or , [ f_weapon , ru_heavy_machine_gun ] , [ f_weapon , ru_gatling_gun ] , [ f_weapon , ru_gun ] , [ f_weapon , ru_heavy_gun ] ] ] ) ;
10798: LD_ADDR_VAR 0 2
10802: PUSH
10803: LD_INT 22
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 21
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 23
10825: PUSH
10826: LD_INT 3
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: LD_INT 34
10838: PUSH
10839: LD_INT 42
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 34
10848: PUSH
10849: LD_INT 43
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: PUSH
10856: LD_INT 34
10858: PUSH
10859: LD_INT 44
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 34
10868: PUSH
10869: LD_INT 46
10871: PUSH
10872: EMPTY
10873: LIST
10874: LIST
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: PPUSH
10889: CALL_OW 69
10893: ST_TO_ADDR
// if playerVehsEmpty then
10894: LD_VAR 0 1
10898: IFFALSE 10994
// begin for veh in playerVehsEmpty do
10900: LD_ADDR_VAR 0 3
10904: PUSH
10905: LD_VAR 0 1
10909: PUSH
10910: FOR_IN
10911: IFFALSE 10990
// begin if GetFuel ( veh ) >= 50 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 261
10922: PUSH
10923: LD_INT 50
10925: GREATEREQUAL
10926: IFFALSE 10988
// begin yashinSearchVeh = false ;
10928: LD_ADDR_EXP 15
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// yashinVeh = veh ;
10936: LD_ADDR_EXP 14
10940: PUSH
10941: LD_VAR 0 3
10945: ST_TO_ADDR
// SetSide ( yashinVeh , 6 ) ;
10946: LD_EXP 14
10950: PPUSH
10951: LD_INT 6
10953: PPUSH
10954: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
10958: LD_EXP 51
10962: PPUSH
10963: LD_EXP 14
10967: PPUSH
10968: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
10972: LD_EXP 14
10976: PPUSH
10977: LD_INT 19
10979: PPUSH
10980: CALL_OW 113
// exit ;
10984: POP
10985: POP
10986: GO 11128
// end ; end ;
10988: GO 10910
10990: POP
10991: POP
// end else
10992: GO 11127
// if playerVehs then
10994: LD_VAR 0 2
10998: IFFALSE 11127
// begin for veh in playerVehs do
11000: LD_ADDR_VAR 0 3
11004: PUSH
11005: LD_VAR 0 2
11009: PUSH
11010: FOR_IN
11011: IFFALSE 11125
// begin if GetFuel ( veh ) >= 50 then
11013: LD_VAR 0 3
11017: PPUSH
11018: CALL_OW 261
11022: PUSH
11023: LD_INT 50
11025: GREATEREQUAL
11026: IFFALSE 11123
// begin yashinSearchVeh = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// yashinVeh = veh ;
11036: LD_ADDR_EXP 14
11040: PUSH
11041: LD_VAR 0 3
11045: ST_TO_ADDR
// driver = UnitsInside ( veh ) [ 1 ] ;
11046: LD_ADDR_VAR 0 4
11050: PUSH
11051: LD_VAR 0 3
11055: PPUSH
11056: CALL_OW 313
11060: PUSH
11061: LD_INT 1
11063: ARRAY
11064: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 121
// wait ( 0 0$1 ) ;
11074: LD_INT 35
11076: PPUSH
11077: CALL_OW 67
// SetSide ( yashinVeh , 6 ) ;
11081: LD_EXP 14
11085: PPUSH
11086: LD_INT 6
11088: PPUSH
11089: CALL_OW 235
// ComEnterUnit ( Yashin , yashinVeh ) ;
11093: LD_EXP 51
11097: PPUSH
11098: LD_EXP 14
11102: PPUSH
11103: CALL_OW 120
// ComMoveToArea ( yashinVeh , YashinExitArea ) ;
11107: LD_EXP 14
11111: PPUSH
11112: LD_INT 19
11114: PPUSH
11115: CALL_OW 113
// exit ;
11119: POP
11120: POP
11121: GO 11128
// end ; end ;
11123: GO 11010
11125: POP
11126: POP
// end ; enable ;
11127: ENABLE
// end ;
11128: PPOPN 4
11130: END
// every 0 0$1 trigger IsInArea ( yashinVeh , YashinExitArea ) do
11131: LD_EXP 14
11135: PPUSH
11136: LD_INT 19
11138: PPUSH
11139: CALL_OW 308
11143: IFFALSE 11166
11145: GO 11147
11147: DISABLE
// begin RemoveUnit ( yashinVeh ) ;
11148: LD_EXP 14
11152: PPUSH
11153: CALL_OW 64
// RemoveUnit ( Yashin ) ;
11157: LD_EXP 51
11161: PPUSH
11162: CALL_OW 64
// end ;
11166: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) <= 7 and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_ok ] ] ) <= 6 and ( IsDying ( ar_dep ) or IsDead ( ar_dep ) or GetSide ( ar_dep ) = 3 ) do var x , y , dir ;
11167: LD_INT 22
11169: PUSH
11170: LD_INT 2
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 21
11179: PUSH
11180: LD_INT 3
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 50
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 69
11202: PUSH
11203: LD_INT 7
11205: LESSEQUAL
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 2
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 50
11229: PUSH
11230: EMPTY
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: LD_INT 6
11245: LESSEQUAL
11246: AND
11247: PUSH
11248: LD_INT 2
11250: PPUSH
11251: CALL_OW 303
11255: PUSH
11256: LD_INT 2
11258: PPUSH
11259: CALL_OW 301
11263: OR
11264: PUSH
11265: LD_INT 2
11267: PPUSH
11268: CALL_OW 255
11272: PUSH
11273: LD_INT 3
11275: EQUAL
11276: OR
11277: AND
11278: IFFALSE 11939
11280: GO 11282
11282: DISABLE
11283: LD_INT 0
11285: PPUSH
11286: PPUSH
11287: PPUSH
// begin enableCounter = false ;
11288: LD_ADDR_EXP 18
11292: PUSH
11293: LD_INT 0
11295: ST_TO_ADDR
// Display_strings = [ ] ;
11296: LD_ADDR_OWVAR 47
11300: PUSH
11301: EMPTY
11302: ST_TO_ADDR
// DeactiveAI ( GetAIIndexByID ( 1 ) ) ;
11303: LD_INT 1
11305: PPUSH
11306: CALL 18824 0 1
11310: PPUSH
11311: CALL 18706 0 1
// SayRadio ( Popov , DHeikeObj-Pop-1 ) ;
11315: LD_EXP 50
11319: PPUSH
11320: LD_STRING DHeikeObj-Pop-1
11322: PPUSH
11323: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-1 ) ;
11327: LD_EXP 37
11331: PPUSH
11332: LD_STRING DHeikeObj-Bur-1
11334: PPUSH
11335: CALL_OW 88
// SayRadio ( Popov , DHeikeObj-Pop-2 ) ;
11339: LD_EXP 50
11343: PPUSH
11344: LD_STRING DHeikeObj-Pop-2
11346: PPUSH
11347: CALL_OW 94
// Say ( Burlak , DHeikeObj-Bur-2 ) ;
11351: LD_EXP 37
11355: PPUSH
11356: LD_STRING DHeikeObj-Bur-2
11358: PPUSH
11359: CALL_OW 88
// ChangeMissionObjectives ( MHeike ) ;
11363: LD_STRING MHeike
11365: PPUSH
11366: CALL_OW 337
// Query ( QHeike ) ;
11370: LD_STRING QHeike
11372: PPUSH
11373: CALL_OW 97
// if not xavierSpawned and Kirilenkova and not IsDead ( Kirilenkova ) then
11377: LD_EXP 11
11381: NOT
11382: PUSH
11383: LD_EXP 45
11387: AND
11388: PUSH
11389: LD_EXP 45
11393: PPUSH
11394: CALL_OW 301
11398: NOT
11399: AND
11400: IFFALSE 11791
// begin if IsInUnit ( Kirilenkova ) then
11402: LD_EXP 45
11406: PPUSH
11407: CALL_OW 310
11411: IFFALSE 11460
// PlaceUnitXYR ( Xavier , GetX ( IsInUnit ( Kirilenkova ) ) , GetY ( IsInUnit ( Kirilenkova ) ) , 5 , true ) else
11413: LD_EXP 55
11417: PPUSH
11418: LD_EXP 45
11422: PPUSH
11423: CALL_OW 310
11427: PPUSH
11428: CALL_OW 250
11432: PPUSH
11433: LD_EXP 45
11437: PPUSH
11438: CALL_OW 310
11442: PPUSH
11443: CALL_OW 251
11447: PPUSH
11448: LD_INT 5
11450: PPUSH
11451: LD_INT 1
11453: PPUSH
11454: CALL_OW 50
11458: GO 11495
// PlaceUnitXYR ( Xavier , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 5 , true ) ;
11460: LD_EXP 55
11464: PPUSH
11465: LD_EXP 45
11469: PPUSH
11470: CALL_OW 250
11474: PPUSH
11475: LD_EXP 45
11479: PPUSH
11480: CALL_OW 251
11484: PPUSH
11485: LD_INT 5
11487: PPUSH
11488: LD_INT 1
11490: PPUSH
11491: CALL_OW 50
// xavierSpawned = true ;
11495: LD_ADDR_EXP 11
11499: PUSH
11500: LD_INT 1
11502: ST_TO_ADDR
// wait ( 0 0$2 ) ;
11503: LD_INT 70
11505: PPUSH
11506: CALL_OW 67
// InGameOn ;
11510: CALL_OW 8
// CenterNowOnUnits ( Xavier ) ;
11514: LD_EXP 55
11518: PPUSH
11519: CALL_OW 87
// ComTurnUnit ( Xavier , Kirilenkova ) ;
11523: LD_EXP 55
11527: PPUSH
11528: LD_EXP 45
11532: PPUSH
11533: CALL_OW 119
// ComTurnUnit ( Kirilenkova , Xavier ) ;
11537: LD_EXP 45
11541: PPUSH
11542: LD_EXP 55
11546: PPUSH
11547: CALL_OW 119
// DialogueOn ;
11551: CALL_OW 6
// Say ( Xavier , DMeetXavier-Xav-1 ) ;
11555: LD_EXP 55
11559: PPUSH
11560: LD_STRING DMeetXavier-Xav-1
11562: PPUSH
11563: CALL_OW 88
// Say ( Kirilenkova , DMeetXavier-Kir-1 ) ;
11567: LD_EXP 45
11571: PPUSH
11572: LD_STRING DMeetXavier-Kir-1
11574: PPUSH
11575: CALL_OW 88
// Say ( Xavier , DMeetXavier-Xav-2 ) ;
11579: LD_EXP 55
11583: PPUSH
11584: LD_STRING DMeetXavier-Xav-2
11586: PPUSH
11587: CALL_OW 88
// Say ( Burlak , DQrXavier#1-Bur-1 ) ;
11591: LD_EXP 37
11595: PPUSH
11596: LD_STRING DQrXavier#1-Bur-1
11598: PPUSH
11599: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-1 ) ;
11603: LD_EXP 45
11607: PPUSH
11608: LD_STRING DQrXavier#1-Kir-1
11610: PPUSH
11611: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-1 ) ;
11615: LD_EXP 55
11619: PPUSH
11620: LD_STRING DQrXavier#1-Xav-1
11622: PPUSH
11623: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-2 ) ;
11627: LD_EXP 45
11631: PPUSH
11632: LD_STRING DQrXavier#1-Kir-2
11634: PPUSH
11635: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-2 ) ;
11639: LD_EXP 55
11643: PPUSH
11644: LD_STRING DQrXavier#1-Xav-2
11646: PPUSH
11647: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-3 ) ;
11651: LD_EXP 45
11655: PPUSH
11656: LD_STRING DQrXavier#1-Kir-3
11658: PPUSH
11659: CALL_OW 88
// Say ( Xavier , DQrXavier#1-Xav-3 ) ;
11663: LD_EXP 55
11667: PPUSH
11668: LD_STRING DQrXavier#1-Xav-3
11670: PPUSH
11671: CALL_OW 88
// Say ( Kirilenkova , DQrXavier#1-Kir-4 ) ;
11675: LD_EXP 45
11679: PPUSH
11680: LD_STRING DQrXavier#1-Kir-4
11682: PPUSH
11683: CALL_OW 88
// if IsOK ( Gleb ) then
11687: LD_EXP 40
11691: PPUSH
11692: CALL_OW 302
11696: IFFALSE 11710
// Say ( Gleb , DQrXavier#1-Glb-4 ) ;
11698: LD_EXP 40
11702: PPUSH
11703: LD_STRING DQrXavier#1-Glb-4
11705: PPUSH
11706: CALL_OW 88
// dir = GetDir ( Xavier ) ;
11710: LD_ADDR_VAR 0 3
11714: PUSH
11715: LD_EXP 55
11719: PPUSH
11720: CALL_OW 254
11724: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11725: LD_ADDR_VAR 0 1
11729: PUSH
11730: LD_EXP 55
11734: PPUSH
11735: CALL_OW 250
11739: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11740: LD_ADDR_VAR 0 2
11744: PUSH
11745: LD_EXP 55
11749: PPUSH
11750: CALL_OW 251
11754: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11755: LD_EXP 55
11759: PPUSH
11760: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11764: LD_VAR 0 1
11768: PPUSH
11769: LD_VAR 0 2
11773: PPUSH
11774: LD_VAR 0 3
11778: PPUSH
11779: CALL 1193 0 3
// DialogueOff ;
11783: CALL_OW 7
// IngameOff ;
11787: CALL_OW 9
// end ; if xavierSpawned and GetSide ( Xavier ) = 5 and GetAttitude ( 3 , 5 ) = att_friend then
11791: LD_EXP 11
11795: PUSH
11796: LD_EXP 55
11800: PPUSH
11801: CALL_OW 255
11805: PUSH
11806: LD_INT 5
11808: EQUAL
11809: AND
11810: PUSH
11811: LD_INT 3
11813: PPUSH
11814: LD_INT 5
11816: PPUSH
11817: CALL_OW 81
11821: PUSH
11822: LD_INT 1
11824: EQUAL
11825: AND
11826: IFFALSE 11909
// begin xavierPatrol = false ;
11828: LD_ADDR_EXP 7
11832: PUSH
11833: LD_INT 0
11835: ST_TO_ADDR
// dir = GetDir ( Xavier ) ;
11836: LD_ADDR_VAR 0 3
11840: PUSH
11841: LD_EXP 55
11845: PPUSH
11846: CALL_OW 254
11850: ST_TO_ADDR
// x = GetX ( Xavier ) ;
11851: LD_ADDR_VAR 0 1
11855: PUSH
11856: LD_EXP 55
11860: PPUSH
11861: CALL_OW 250
11865: ST_TO_ADDR
// y = GetY ( Xavier ) ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_EXP 55
11875: PPUSH
11876: CALL_OW 251
11880: ST_TO_ADDR
// RemoveUnit ( Xavier ) ;
11881: LD_EXP 55
11885: PPUSH
11886: CALL_OW 64
// PrepareXavierRu ( x , y , dir ) ;
11890: LD_VAR 0 1
11894: PPUSH
11895: LD_VAR 0 2
11899: PPUSH
11900: LD_VAR 0 3
11904: PPUSH
11905: CALL 1193 0 3
// end ; wait ( 2 2$30 ) ;
11909: LD_INT 5250
11911: PPUSH
11912: CALL_OW 67
// PrepareHeikeGroup ;
11916: CALL 4935 0 0
// EscortUnit ( heikeVehicle , heikeGroup , heikePath ) ;
11920: LD_EXP 57
11924: PPUSH
11925: LD_EXP 58
11929: PPUSH
11930: LD_EXP 35
11934: PPUSH
11935: CALL 25622 0 3
// end ;
11939: PPOPN 3
11941: END
// every 0 0$1 trigger IsDying ( heikeVehicle ) do
11942: LD_EXP 57
11946: PPUSH
11947: CALL_OW 303
11951: IFFALSE 11975
11953: GO 11955
11955: DISABLE
// EscortUnit ( Heike , heikeGroup , heikePath ) ;
11956: LD_EXP 56
11960: PPUSH
11961: LD_EXP 58
11965: PPUSH
11966: LD_EXP 35
11970: PPUSH
11971: CALL 25622 0 3
11975: END
// every 0 0$1 trigger IsDying ( Heike ) do
11976: LD_EXP 56
11980: PPUSH
11981: CALL_OW 303
11985: IFFALSE 12023
11987: GO 11989
11989: DISABLE
// begin canCaptureHeike = true ;
11990: LD_ADDR_EXP 16
11994: PUSH
11995: LD_INT 1
11997: ST_TO_ADDR
// ComStop ( Heike ) ;
11998: LD_EXP 56
12002: PPUSH
12003: CALL_OW 141
// SetAttitude ( 8 , 3 , att_friend , true ) ;
12007: LD_INT 8
12009: PPUSH
12010: LD_INT 3
12012: PPUSH
12013: LD_INT 1
12015: PPUSH
12016: LD_INT 1
12018: PPUSH
12019: CALL_OW 80
// end ;
12023: END
// every 0 0$2 trigger GetLives ( Heike ) > 250 and canCaptureHeike do
12024: LD_EXP 56
12028: PPUSH
12029: CALL_OW 256
12033: PUSH
12034: LD_INT 250
12036: GREATER
12037: PUSH
12038: LD_EXP 16
12042: AND
12043: IFFALSE 12052
12045: GO 12047
12047: DISABLE
// Dial_CaptureHeike ;
12048: CALL 12053 0 0
12052: END
// export function Dial_CaptureHeike ; begin
12053: LD_INT 0
12055: PPUSH
// heikeCaptured = true ;
12056: LD_ADDR_EXP 17
12060: PUSH
12061: LD_INT 1
12063: ST_TO_ADDR
// enableCounter = false ;
12064: LD_ADDR_EXP 18
12068: PUSH
12069: LD_INT 0
12071: ST_TO_ADDR
// InGameOn ;
12072: CALL_OW 8
// DialogueOn ;
12076: CALL_OW 6
// CenterNowOnUnits ( Heike ) ;
12080: LD_EXP 56
12084: PPUSH
12085: CALL_OW 87
// Say ( Heike , DHeikeCapt-Hke-1 ) ;
12089: LD_EXP 56
12093: PPUSH
12094: LD_STRING DHeikeCapt-Hke-1
12096: PPUSH
12097: CALL_OW 88
// Say ( Burlak , DHeikeCapt-Bur-1 ) ;
12101: LD_EXP 37
12105: PPUSH
12106: LD_STRING DHeikeCapt-Bur-1
12108: PPUSH
12109: CALL_OW 88
// Say ( Heike , DHeikeCapt-Hke-2 ) ;
12113: LD_EXP 56
12117: PPUSH
12118: LD_STRING DHeikeCapt-Hke-2
12120: PPUSH
12121: CALL_OW 88
// DialogueOff ;
12125: CALL_OW 7
// IngameOff ;
12129: CALL_OW 9
// FinishMission ;
12133: CALL 16601 0 0
// end ;
12137: LD_VAR 0 1
12141: RET
// every 0 0$2 trigger IsDead ( Heike ) and IsPlaced ( Heike ) do
12142: LD_EXP 56
12146: PPUSH
12147: CALL_OW 301
12151: PUSH
12152: LD_EXP 56
12156: PPUSH
12157: CALL_OW 305
12161: AND
12162: IFFALSE 12171
12164: GO 12166
12166: DISABLE
// FinishMission ; end_of_file
12167: CALL 16601 0 0
12171: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
12172: LD_INT 0
12174: PPUSH
12175: PPUSH
// if debugMode then
12176: LD_EXP 26
12180: IFFALSE 12197
// unit := NewCharacter ( ident ) ;
12182: LD_ADDR_VAR 0 5
12186: PUSH
12187: LD_VAR 0 1
12191: PPUSH
12192: CALL_OW 25
12196: ST_TO_ADDR
// if exist_mode and not debugMode then
12197: LD_VAR 0 2
12201: PUSH
12202: LD_EXP 26
12206: NOT
12207: AND
12208: IFFALSE 12233
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
12210: LD_ADDR_VAR 0 5
12214: PUSH
12215: LD_EXP 25
12219: PUSH
12220: LD_VAR 0 1
12224: STR
12225: PPUSH
12226: CALL_OW 34
12230: ST_TO_ADDR
12231: GO 12255
// if not debugMode then
12233: LD_EXP 26
12237: NOT
12238: IFFALSE 12255
// unit := NewCharacter ( ident ) ;
12240: LD_ADDR_VAR 0 5
12244: PUSH
12245: LD_VAR 0 1
12249: PPUSH
12250: CALL_OW 25
12254: ST_TO_ADDR
// if class then
12255: LD_VAR 0 3
12259: IFFALSE 12275
// SetClass ( unit , class ) ;
12261: LD_VAR 0 5
12265: PPUSH
12266: LD_VAR 0 3
12270: PPUSH
12271: CALL_OW 336
// result := unit ;
12275: LD_ADDR_VAR 0 4
12279: PUSH
12280: LD_VAR 0 5
12284: ST_TO_ADDR
// end ;
12285: LD_VAR 0 4
12289: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
12290: LD_INT 0
12292: PPUSH
// if GetSide ( character ) = side and not IsDead ( character ) then
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 255
12302: PUSH
12303: LD_VAR 0 3
12307: EQUAL
12308: PUSH
12309: LD_VAR 0 1
12313: PPUSH
12314: CALL_OW 301
12318: NOT
12319: AND
12320: IFFALSE 12342
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
12322: LD_VAR 0 1
12326: PPUSH
12327: LD_EXP 24
12331: PUSH
12332: LD_VAR 0 2
12336: STR
12337: PPUSH
12338: CALL_OW 38
// end ;
12342: LD_VAR 0 4
12346: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
12347: LD_INT 0
12349: PPUSH
12350: PPUSH
12351: PPUSH
// resultCharactersToSave = [ ] ;
12352: LD_ADDR_VAR 0 6
12356: PUSH
12357: EMPTY
12358: ST_TO_ADDR
// for unit in characters do
12359: LD_ADDR_VAR 0 5
12363: PUSH
12364: LD_VAR 0 1
12368: PUSH
12369: FOR_IN
12370: IFFALSE 12419
// if GetSide ( unit ) = side and not IsDead ( unit ) then
12372: LD_VAR 0 5
12376: PPUSH
12377: CALL_OW 255
12381: PUSH
12382: LD_VAR 0 3
12386: EQUAL
12387: PUSH
12388: LD_VAR 0 5
12392: PPUSH
12393: CALL_OW 301
12397: NOT
12398: AND
12399: IFFALSE 12417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
12401: LD_ADDR_VAR 0 6
12405: PUSH
12406: LD_VAR 0 6
12410: PUSH
12411: LD_VAR 0 5
12415: ADD
12416: ST_TO_ADDR
12417: GO 12369
12419: POP
12420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
12421: LD_VAR 0 6
12425: PPUSH
12426: LD_EXP 24
12430: PUSH
12431: LD_VAR 0 2
12435: STR
12436: PPUSH
12437: CALL_OW 38
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// for unit in units do
12450: LD_ADDR_VAR 0 5
12454: PUSH
12455: LD_VAR 0 1
12459: PUSH
12460: FOR_IN
12461: IFFALSE 12484
// PlaceUnitArea ( unit , area , spawnMode ) ;
12463: LD_VAR 0 5
12467: PPUSH
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_VAR 0 3
12477: PPUSH
12478: CALL_OW 49
12482: GO 12460
12484: POP
12485: POP
// end ;
12486: LD_VAR 0 4
12490: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
12491: LD_INT 0
12493: PPUSH
12494: PPUSH
12495: PPUSH
12496: PPUSH
// units = characters ;
12497: LD_ADDR_VAR 0 9
12501: PUSH
12502: LD_VAR 0 1
12506: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Vsevolod , Kirilenkova ] ;
12507: LD_ADDR_VAR 0 9
12511: PUSH
12512: LD_VAR 0 9
12516: PUSH
12517: LD_EXP 37
12521: PUSH
12522: LD_EXP 38
12526: PUSH
12527: LD_EXP 39
12531: PUSH
12532: LD_EXP 40
12536: PUSH
12537: LD_EXP 41
12541: PUSH
12542: LD_EXP 42
12546: PUSH
12547: LD_EXP 43
12551: PUSH
12552: LD_EXP 44
12556: PUSH
12557: LD_EXP 48
12561: PUSH
12562: LD_EXP 45
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: DIFF
12579: ST_TO_ADDR
// if not units and not canTalkHero then
12580: LD_VAR 0 9
12584: NOT
12585: PUSH
12586: LD_VAR 0 5
12590: NOT
12591: AND
12592: IFFALSE 12596
// exit ;
12594: GO 12769
// if not units then
12596: LD_VAR 0 9
12600: NOT
12601: IFFALSE 12622
// units = characters diff [ Burlak ] ;
12603: LD_ADDR_VAR 0 9
12607: PUSH
12608: LD_VAR 0 1
12612: PUSH
12613: LD_EXP 37
12617: PUSH
12618: EMPTY
12619: LIST
12620: DIFF
12621: ST_TO_ADDR
// if not units and canTalkHero then
12622: LD_VAR 0 9
12626: NOT
12627: PUSH
12628: LD_VAR 0 5
12632: AND
12633: IFFALSE 12637
// exit ;
12635: GO 12769
// speaker := units [ rand ( 1 , units ) ] ;
12637: LD_ADDR_VAR 0 8
12641: PUSH
12642: LD_VAR 0 9
12646: PUSH
12647: LD_INT 1
12649: PPUSH
12650: LD_VAR 0 9
12654: PPUSH
12655: CALL_OW 12
12659: ARRAY
12660: ST_TO_ADDR
// if radio then
12661: LD_VAR 0 4
12665: IFFALSE 12714
// begin if GetSex ( speaker ) = sex_male then
12667: LD_VAR 0 8
12671: PPUSH
12672: CALL_OW 258
12676: PUSH
12677: LD_INT 1
12679: EQUAL
12680: IFFALSE 12698
// SayRadio ( speaker , dialogMID ) else
12682: LD_VAR 0 8
12686: PPUSH
12687: LD_VAR 0 2
12691: PPUSH
12692: CALL_OW 94
12696: GO 12712
// SayRadio ( speaker , dialogFID ) ;
12698: LD_VAR 0 8
12702: PPUSH
12703: LD_VAR 0 3
12707: PPUSH
12708: CALL_OW 94
// end else
12712: GO 12759
// begin if GetSex ( speaker ) = sex_male then
12714: LD_VAR 0 8
12718: PPUSH
12719: CALL_OW 258
12723: PUSH
12724: LD_INT 1
12726: EQUAL
12727: IFFALSE 12745
// Say ( speaker , dialogMID ) else
12729: LD_VAR 0 8
12733: PPUSH
12734: LD_VAR 0 2
12738: PPUSH
12739: CALL_OW 88
12743: GO 12759
// Say ( speaker , dialogFID ) ;
12745: LD_VAR 0 8
12749: PPUSH
12750: LD_VAR 0 3
12754: PPUSH
12755: CALL_OW 88
// end ; result := speaker ;
12759: LD_ADDR_VAR 0 6
12763: PUSH
12764: LD_VAR 0 8
12768: ST_TO_ADDR
// end ;
12769: LD_VAR 0 6
12773: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
// dir := GetDir ( bunker ) - 3 ;
12778: LD_ADDR_VAR 0 4
12782: PUSH
12783: LD_VAR 0 2
12787: PPUSH
12788: CALL_OW 254
12792: PUSH
12793: LD_INT 3
12795: MINUS
12796: ST_TO_ADDR
// if dir < 0 then
12797: LD_VAR 0 4
12801: PUSH
12802: LD_INT 0
12804: LESS
12805: IFFALSE 12821
// dir := 6 + dir ;
12807: LD_ADDR_VAR 0 4
12811: PUSH
12812: LD_INT 6
12814: PUSH
12815: LD_VAR 0 4
12819: PLUS
12820: ST_TO_ADDR
// SetDir ( un , dir ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: LD_VAR 0 4
12830: PPUSH
12831: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
12835: LD_VAR 0 1
12839: PPUSH
12840: LD_VAR 0 2
12844: PPUSH
12845: CALL_OW 52
// result = un ;
12849: LD_ADDR_VAR 0 3
12853: PUSH
12854: LD_VAR 0 1
12858: ST_TO_ADDR
// end ;
12859: LD_VAR 0 3
12863: RET
// export function AddComCaptureBuilding ( engs , building ) ; var eng ; begin
12864: LD_INT 0
12866: PPUSH
12867: PPUSH
// for eng in engs do
12868: LD_ADDR_VAR 0 4
12872: PUSH
12873: LD_VAR 0 1
12877: PUSH
12878: FOR_IN
12879: IFFALSE 12996
// if GetClass ( eng ) = class_engineer and IsOK ( eng ) and building and not GetSide ( building ) = GetSide ( eng ) then
12881: LD_VAR 0 4
12885: PPUSH
12886: CALL_OW 257
12890: PUSH
12891: LD_INT 2
12893: EQUAL
12894: PUSH
12895: LD_VAR 0 4
12899: PPUSH
12900: CALL_OW 302
12904: AND
12905: PUSH
12906: LD_VAR 0 2
12910: AND
12911: PUSH
12912: LD_VAR 0 2
12916: PPUSH
12917: CALL_OW 255
12921: PUSH
12922: LD_VAR 0 4
12926: PPUSH
12927: CALL_OW 255
12931: EQUAL
12932: NOT
12933: AND
12934: IFFALSE 12994
// AddTaskList ( eng , [ [ e , GetX ( building ) , GetY ( building ) , building , 0 , 0 , 0 ] ] ) end ;
12936: LD_VAR 0 4
12940: PPUSH
12941: LD_STRING e
12943: PUSH
12944: LD_VAR 0 2
12948: PPUSH
12949: CALL_OW 250
12953: PUSH
12954: LD_VAR 0 2
12958: PPUSH
12959: CALL_OW 251
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: LD_INT 0
12974: PUSH
12975: LD_INT 0
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: PPUSH
12990: CALL_OW 447
12994: GO 12878
12996: POP
12997: POP
12998: LD_VAR 0 3
13002: RET
// export function AddComPlaceMineXY ( unit , x , y , type ) ; begin
13003: LD_INT 0
13005: PPUSH
// if not GetClass ( unit ) = class_soldier then
13006: LD_VAR 0 1
13010: PPUSH
13011: CALL_OW 257
13015: PUSH
13016: LD_INT 1
13018: EQUAL
13019: NOT
13020: IFFALSE 13024
// exit ;
13022: GO 13072
// AddTaskList ( unit , [ [ p , x , y , 0 , type , 0 , 0 ] ] ) end ;
13024: LD_VAR 0 1
13028: PPUSH
13029: LD_STRING p
13031: PUSH
13032: LD_VAR 0 2
13036: PUSH
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: LD_VAR 0 4
13049: PUSH
13050: LD_INT 0
13052: PUSH
13053: LD_INT 0
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: PPUSH
13068: CALL_OW 447
13072: LD_VAR 0 5
13076: RET
// export function Delete2D ( tab , firstIndex , secondIndex ) ; var i , list , tabPom ; begin
13077: LD_INT 0
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
// tabPom := Delete ( tab [ firstIndex ] , secondIndex ) ;
13083: LD_ADDR_VAR 0 7
13087: PUSH
13088: LD_VAR 0 1
13092: PUSH
13093: LD_VAR 0 2
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 3
13108: ST_TO_ADDR
// tab := Replace ( tab , firstIndex , tabPom ) ;
13109: LD_ADDR_VAR 0 1
13113: PUSH
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 7
13128: PPUSH
13129: CALL_OW 1
13133: ST_TO_ADDR
// result := tab ;
13134: LD_ADDR_VAR 0 4
13138: PUSH
13139: LD_VAR 0 1
13143: ST_TO_ADDR
// end ;
13144: LD_VAR 0 4
13148: RET
// export function Nef_PrepareBase ( base_dep , area , name , skill , sources , nation , personel ) ; var i , j , d , b , f , x , un , base , side , buildings , tmp ; begin
13149: LD_INT 0
13151: PPUSH
13152: PPUSH
13153: PPUSH
13154: PPUSH
13155: PPUSH
13156: PPUSH
13157: PPUSH
13158: PPUSH
13159: PPUSH
13160: PPUSH
13161: PPUSH
13162: PPUSH
// result := [ ] ;
13163: LD_ADDR_VAR 0 8
13167: PUSH
13168: EMPTY
13169: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
13170: LD_VAR 0 1
13174: PPUSH
13175: CALL_OW 266
13179: PUSH
13180: LD_INT 0
13182: PUSH
13183: LD_INT 1
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: IN
13190: NOT
13191: IFFALSE 13195
// exit ;
13193: GO 14839
// if name then
13195: LD_VAR 0 3
13199: IFFALSE 13215
// SetBName ( base_dep , name ) ;
13201: LD_VAR 0 1
13205: PPUSH
13206: LD_VAR 0 3
13210: PPUSH
13211: CALL_OW 500
// base := GetBase ( base_dep ) ;
13215: LD_ADDR_VAR 0 16
13219: PUSH
13220: LD_VAR 0 1
13224: PPUSH
13225: CALL_OW 274
13229: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
13230: LD_ADDR_VAR 0 17
13234: PUSH
13235: LD_VAR 0 1
13239: PPUSH
13240: CALL_OW 255
13244: ST_TO_ADDR
// if sources then
13245: LD_VAR 0 5
13249: IFFALSE 13296
// for i = 1 to 3 do
13251: LD_ADDR_VAR 0 9
13255: PUSH
13256: DOUBLE
13257: LD_INT 1
13259: DEC
13260: ST_TO_ADDR
13261: LD_INT 3
13263: PUSH
13264: FOR_TO
13265: IFFALSE 13294
// AddResourceType ( base , i , sources [ i ] ) ;
13267: LD_VAR 0 16
13271: PPUSH
13272: LD_VAR 0 9
13276: PPUSH
13277: LD_VAR 0 5
13281: PUSH
13282: LD_VAR 0 9
13286: ARRAY
13287: PPUSH
13288: CALL_OW 276
13292: GO 13264
13294: POP
13295: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
13296: LD_ADDR_VAR 0 18
13300: PUSH
13301: LD_VAR 0 16
13305: PPUSH
13306: LD_VAR 0 2
13310: PPUSH
13311: LD_INT 1
13313: PPUSH
13314: CALL 49466 0 3
13318: ST_TO_ADDR
// InitHc ;
13319: CALL_OW 19
// InitUc ;
13323: CALL_OW 18
// uc_side := side ;
13327: LD_ADDR_OWVAR 20
13331: PUSH
13332: LD_VAR 0 17
13336: ST_TO_ADDR
// uc_nation := nation ;
13337: LD_ADDR_OWVAR 21
13341: PUSH
13342: LD_VAR 0 6
13346: ST_TO_ADDR
// if buildings then
13347: LD_VAR 0 18
13351: IFFALSE 14698
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
13353: LD_ADDR_VAR 0 19
13357: PUSH
13358: LD_VAR 0 18
13362: PPUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 30
13368: PUSH
13369: LD_INT 29
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 30
13378: PUSH
13379: LD_INT 30
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: PPUSH
13391: CALL_OW 72
13395: ST_TO_ADDR
// if tmp then
13396: LD_VAR 0 19
13400: IFFALSE 13448
// for i in tmp do
13402: LD_ADDR_VAR 0 9
13406: PUSH
13407: LD_VAR 0 19
13411: PUSH
13412: FOR_IN
13413: IFFALSE 13446
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
13415: LD_VAR 0 9
13419: PPUSH
13420: CALL_OW 250
13424: PPUSH
13425: LD_VAR 0 9
13429: PPUSH
13430: CALL_OW 251
13434: PPUSH
13435: LD_VAR 0 17
13439: PPUSH
13440: CALL_OW 441
13444: GO 13412
13446: POP
13447: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
13448: LD_VAR 0 18
13452: PPUSH
13453: LD_INT 2
13455: PUSH
13456: LD_INT 30
13458: PUSH
13459: LD_INT 31
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: LD_INT 32
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 30
13478: PUSH
13479: LD_INT 33
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: EMPTY
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: PPUSH
13492: CALL_OW 72
13496: IFFALSE 13595
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
13498: LD_ADDR_VAR 0 9
13502: PUSH
13503: LD_VAR 0 18
13507: PPUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 30
13513: PUSH
13514: LD_INT 31
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 30
13523: PUSH
13524: LD_INT 32
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 30
13533: PUSH
13534: LD_INT 33
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PPUSH
13547: CALL_OW 72
13551: PUSH
13552: FOR_IN
13553: IFFALSE 13593
// begin if not GetBWeapon ( i ) then
13555: LD_VAR 0 9
13559: PPUSH
13560: CALL_OW 269
13564: NOT
13565: IFFALSE 13591
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
13567: LD_VAR 0 9
13571: PPUSH
13572: LD_VAR 0 9
13576: PPUSH
13577: LD_VAR 0 2
13581: PPUSH
13582: CALL 51728 0 2
13586: PPUSH
13587: CALL_OW 431
// end ;
13591: GO 13552
13593: POP
13594: POP
// end ; for i = 1 to personel do
13595: LD_ADDR_VAR 0 9
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_VAR 0 7
13609: PUSH
13610: FOR_TO
13611: IFFALSE 14678
// begin if i > 4 then
13613: LD_VAR 0 9
13617: PUSH
13618: LD_INT 4
13620: GREATER
13621: IFFALSE 13625
// break ;
13623: GO 14678
// case i of 1 :
13625: LD_VAR 0 9
13629: PUSH
13630: LD_INT 1
13632: DOUBLE
13633: EQUAL
13634: IFTRUE 13638
13636: GO 13729
13638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
13639: LD_ADDR_VAR 0 13
13643: PUSH
13644: LD_VAR 0 18
13648: PPUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 17
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 58
13663: PUSH
13664: EMPTY
13665: LIST
13666: PUSH
13667: LD_INT 2
13669: PUSH
13670: LD_INT 30
13672: PUSH
13673: LD_INT 31
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 32
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 4
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 30
13702: PUSH
13703: LD_INT 5
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: LIST
13721: PPUSH
13722: CALL_OW 72
13726: ST_TO_ADDR
13727: GO 13951
13729: LD_INT 2
13731: DOUBLE
13732: EQUAL
13733: IFTRUE 13737
13735: GO 13799
13737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
13738: LD_ADDR_VAR 0 13
13742: PUSH
13743: LD_VAR 0 18
13747: PPUSH
13748: LD_INT 22
13750: PUSH
13751: LD_VAR 0 17
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 30
13765: PUSH
13766: LD_INT 0
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 30
13775: PUSH
13776: LD_INT 1
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PPUSH
13792: CALL_OW 72
13796: ST_TO_ADDR
13797: GO 13951
13799: LD_INT 3
13801: DOUBLE
13802: EQUAL
13803: IFTRUE 13807
13805: GO 13869
13807: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
13808: LD_ADDR_VAR 0 13
13812: PUSH
13813: LD_VAR 0 18
13817: PPUSH
13818: LD_INT 22
13820: PUSH
13821: LD_VAR 0 17
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 2
13832: PUSH
13833: LD_INT 30
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 30
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 72
13866: ST_TO_ADDR
13867: GO 13951
13869: LD_INT 4
13871: DOUBLE
13872: EQUAL
13873: IFTRUE 13877
13875: GO 13950
13877: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
13878: LD_ADDR_VAR 0 13
13882: PUSH
13883: LD_VAR 0 18
13887: PPUSH
13888: LD_INT 22
13890: PUSH
13891: LD_VAR 0 17
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: LD_INT 30
13905: PUSH
13906: LD_INT 6
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: LD_INT 30
13915: PUSH
13916: LD_INT 7
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: LD_INT 30
13925: PUSH
13926: LD_INT 8
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 72
13947: ST_TO_ADDR
13948: GO 13951
13950: POP
// if i = 1 then
13951: LD_VAR 0 9
13955: PUSH
13956: LD_INT 1
13958: EQUAL
13959: IFFALSE 14077
// begin tmp := [ ] ;
13961: LD_ADDR_VAR 0 19
13965: PUSH
13966: EMPTY
13967: ST_TO_ADDR
// for j in f do
13968: LD_ADDR_VAR 0 10
13972: PUSH
13973: LD_VAR 0 13
13977: PUSH
13978: FOR_IN
13979: IFFALSE 14059
// if GetBType ( j ) in [ b_breastwork , b_bunker ] then
13981: LD_VAR 0 10
13985: PPUSH
13986: CALL_OW 266
13990: PUSH
13991: LD_INT 31
13993: PUSH
13994: LD_INT 32
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: IN
14001: IFFALSE 14028
// tmp := Insert ( tmp , 1 , j ) else
14003: LD_ADDR_VAR 0 19
14007: PUSH
14008: LD_VAR 0 19
14012: PPUSH
14013: LD_INT 1
14015: PPUSH
14016: LD_VAR 0 10
14020: PPUSH
14021: CALL_OW 2
14025: ST_TO_ADDR
14026: GO 14057
// tmp := Insert ( tmp , tmp + 1 , j ) ;
14028: LD_ADDR_VAR 0 19
14032: PUSH
14033: LD_VAR 0 19
14037: PPUSH
14038: LD_VAR 0 19
14042: PUSH
14043: LD_INT 1
14045: PLUS
14046: PPUSH
14047: LD_VAR 0 10
14051: PPUSH
14052: CALL_OW 2
14056: ST_TO_ADDR
14057: GO 13978
14059: POP
14060: POP
// if tmp then
14061: LD_VAR 0 19
14065: IFFALSE 14077
// f := tmp ;
14067: LD_ADDR_VAR 0 13
14071: PUSH
14072: LD_VAR 0 19
14076: ST_TO_ADDR
// end ; x := personel [ i ] ;
14077: LD_ADDR_VAR 0 14
14081: PUSH
14082: LD_VAR 0 7
14086: PUSH
14087: LD_VAR 0 9
14091: ARRAY
14092: ST_TO_ADDR
// if x = - 1 then
14093: LD_VAR 0 14
14097: PUSH
14098: LD_INT 1
14100: NEG
14101: EQUAL
14102: IFFALSE 14296
// begin for j in f do
14104: LD_ADDR_VAR 0 10
14108: PUSH
14109: LD_VAR 0 13
14113: PUSH
14114: FOR_IN
14115: IFFALSE 14292
// repeat InitHc ;
14117: CALL_OW 19
// if GetBType ( j ) = b_barracks then
14121: LD_VAR 0 10
14125: PPUSH
14126: CALL_OW 266
14130: PUSH
14131: LD_INT 5
14133: EQUAL
14134: IFFALSE 14189
// begin if UnitsInside ( j ) < 3 then
14136: LD_VAR 0 10
14140: PPUSH
14141: CALL_OW 313
14145: PUSH
14146: LD_INT 3
14148: LESS
14149: IFFALSE 14170
// PrepareHuman ( false , i , skill ) else
14151: LD_INT 0
14153: PPUSH
14154: LD_VAR 0 9
14158: PPUSH
14159: LD_VAR 0 4
14163: PPUSH
14164: CALL_OW 380
14168: GO 14187
// PrepareHuman ( false , i , skill ) ;
14170: LD_INT 0
14172: PPUSH
14173: LD_VAR 0 9
14177: PPUSH
14178: LD_VAR 0 4
14182: PPUSH
14183: CALL_OW 380
// end else
14187: GO 14206
// PrepareHuman ( false , i , skill ) ;
14189: LD_INT 0
14191: PPUSH
14192: LD_VAR 0 9
14196: PPUSH
14197: LD_VAR 0 4
14201: PPUSH
14202: CALL_OW 380
// un := CreateHuman ;
14206: LD_ADDR_VAR 0 15
14210: PUSH
14211: CALL_OW 44
14215: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14216: LD_ADDR_VAR 0 8
14220: PUSH
14221: LD_VAR 0 8
14225: PPUSH
14226: LD_INT 1
14228: PPUSH
14229: LD_VAR 0 15
14233: PPUSH
14234: CALL_OW 2
14238: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
14239: LD_VAR 0 15
14243: PPUSH
14244: LD_VAR 0 10
14248: PPUSH
14249: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
14253: LD_VAR 0 10
14257: PPUSH
14258: CALL_OW 313
14262: PUSH
14263: LD_INT 6
14265: EQUAL
14266: PUSH
14267: LD_VAR 0 10
14271: PPUSH
14272: CALL_OW 266
14276: PUSH
14277: LD_INT 32
14279: PUSH
14280: LD_INT 31
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: IN
14287: OR
14288: IFFALSE 14117
14290: GO 14114
14292: POP
14293: POP
// end else
14294: GO 14676
// for j = 1 to x do
14296: LD_ADDR_VAR 0 10
14300: PUSH
14301: DOUBLE
14302: LD_INT 1
14304: DEC
14305: ST_TO_ADDR
14306: LD_VAR 0 14
14310: PUSH
14311: FOR_TO
14312: IFFALSE 14674
// begin InitHc ;
14314: CALL_OW 19
// if not f then
14318: LD_VAR 0 13
14322: NOT
14323: IFFALSE 14412
// begin PrepareHuman ( false , i , skill ) ;
14325: LD_INT 0
14327: PPUSH
14328: LD_VAR 0 9
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un := CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14352: LD_ADDR_VAR 0 8
14356: PUSH
14357: LD_VAR 0 8
14361: PPUSH
14362: LD_INT 1
14364: PPUSH
14365: LD_VAR 0 15
14369: PPUSH
14370: CALL_OW 2
14374: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14375: LD_VAR 0 15
14379: PPUSH
14380: LD_VAR 0 1
14384: PPUSH
14385: CALL_OW 250
14389: PPUSH
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 251
14399: PPUSH
14400: LD_INT 10
14402: PPUSH
14403: LD_INT 0
14405: PPUSH
14406: CALL_OW 50
// continue ;
14410: GO 14311
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
14412: LD_VAR 0 13
14416: PUSH
14417: LD_INT 1
14419: ARRAY
14420: PPUSH
14421: CALL_OW 313
14425: PUSH
14426: LD_VAR 0 13
14430: PUSH
14431: LD_INT 1
14433: ARRAY
14434: PPUSH
14435: CALL_OW 266
14439: PUSH
14440: LD_INT 32
14442: PUSH
14443: LD_INT 31
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: IN
14450: AND
14451: PUSH
14452: LD_VAR 0 13
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 313
14465: PUSH
14466: LD_INT 6
14468: EQUAL
14469: OR
14470: IFFALSE 14490
// f := Delete ( f , 1 ) ;
14472: LD_ADDR_VAR 0 13
14476: PUSH
14477: LD_VAR 0 13
14481: PPUSH
14482: LD_INT 1
14484: PPUSH
14485: CALL_OW 3
14489: ST_TO_ADDR
// if not f then
14490: LD_VAR 0 13
14494: NOT
14495: IFFALSE 14513
// begin x := x + 2 ;
14497: LD_ADDR_VAR 0 14
14501: PUSH
14502: LD_VAR 0 14
14506: PUSH
14507: LD_INT 2
14509: PLUS
14510: ST_TO_ADDR
// continue ;
14511: GO 14311
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
14513: LD_VAR 0 13
14517: PUSH
14518: LD_INT 1
14520: ARRAY
14521: PPUSH
14522: CALL_OW 266
14526: PUSH
14527: LD_INT 5
14529: EQUAL
14530: IFFALSE 14604
// begin if UnitsInside ( f [ 1 ] ) < 3 then
14532: LD_VAR 0 13
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: CALL_OW 313
14545: PUSH
14546: LD_INT 3
14548: LESS
14549: IFFALSE 14585
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
14551: LD_INT 0
14553: PPUSH
14554: LD_INT 5
14556: PUSH
14557: LD_INT 8
14559: PUSH
14560: LD_INT 9
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: LIST
14567: PUSH
14568: LD_VAR 0 6
14572: ARRAY
14573: PPUSH
14574: LD_VAR 0 4
14578: PPUSH
14579: CALL_OW 380
14583: GO 14602
// PrepareHuman ( false , i , skill ) ;
14585: LD_INT 0
14587: PPUSH
14588: LD_VAR 0 9
14592: PPUSH
14593: LD_VAR 0 4
14597: PPUSH
14598: CALL_OW 380
// end else
14602: GO 14621
// PrepareHuman ( false , i , skill ) ;
14604: LD_INT 0
14606: PPUSH
14607: LD_VAR 0 9
14611: PPUSH
14612: LD_VAR 0 4
14616: PPUSH
14617: CALL_OW 380
// un := CreateHuman ;
14621: LD_ADDR_VAR 0 15
14625: PUSH
14626: CALL_OW 44
14630: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
14631: LD_ADDR_VAR 0 8
14635: PUSH
14636: LD_VAR 0 8
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_VAR 0 15
14648: PPUSH
14649: CALL_OW 2
14653: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
14654: LD_VAR 0 15
14658: PPUSH
14659: LD_VAR 0 13
14663: PUSH
14664: LD_INT 1
14666: ARRAY
14667: PPUSH
14668: CALL_OW 52
// end ;
14672: GO 14311
14674: POP
14675: POP
// end ;
14676: GO 13610
14678: POP
14679: POP
// result := result ^ buildings ;
14680: LD_ADDR_VAR 0 8
14684: PUSH
14685: LD_VAR 0 8
14689: PUSH
14690: LD_VAR 0 18
14694: ADD
14695: ST_TO_ADDR
// end else
14696: GO 14839
// begin for i = 1 to personel do
14698: LD_ADDR_VAR 0 9
14702: PUSH
14703: DOUBLE
14704: LD_INT 1
14706: DEC
14707: ST_TO_ADDR
14708: LD_VAR 0 7
14712: PUSH
14713: FOR_TO
14714: IFFALSE 14837
// begin if i > 4 then
14716: LD_VAR 0 9
14720: PUSH
14721: LD_INT 4
14723: GREATER
14724: IFFALSE 14728
// break ;
14726: GO 14837
// x := personel [ i ] ;
14728: LD_ADDR_VAR 0 14
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: LD_VAR 0 9
14742: ARRAY
14743: ST_TO_ADDR
// if x = - 1 then
14744: LD_VAR 0 14
14748: PUSH
14749: LD_INT 1
14751: NEG
14752: EQUAL
14753: IFFALSE 14757
// continue ;
14755: GO 14713
// PrepareHuman ( false , i , skill ) ;
14757: LD_INT 0
14759: PPUSH
14760: LD_VAR 0 9
14764: PPUSH
14765: LD_VAR 0 4
14769: PPUSH
14770: CALL_OW 380
// un := CreateHuman ;
14774: LD_ADDR_VAR 0 15
14778: PUSH
14779: CALL_OW 44
14783: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
14784: LD_VAR 0 15
14788: PPUSH
14789: LD_VAR 0 1
14793: PPUSH
14794: CALL_OW 250
14798: PPUSH
14799: LD_VAR 0 1
14803: PPUSH
14804: CALL_OW 251
14808: PPUSH
14809: LD_INT 10
14811: PPUSH
14812: LD_INT 0
14814: PPUSH
14815: CALL_OW 50
// result := result ^ un ;
14819: LD_ADDR_VAR 0 8
14823: PUSH
14824: LD_VAR 0 8
14828: PUSH
14829: LD_VAR 0 15
14833: ADD
14834: ST_TO_ADDR
// end ;
14835: GO 14713
14837: POP
14838: POP
// end ; end ;
14839: LD_VAR 0 8
14843: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
14844: LD_INT 0
14846: PPUSH
14847: PPUSH
14848: PPUSH
14849: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
14850: LD_ADDR_VAR 0 6
14854: PUSH
14855: LD_INT 34
14857: PUSH
14858: LD_INT 71
14860: PUSH
14861: LD_INT 70
14863: PUSH
14864: LD_INT 69
14866: PUSH
14867: LD_INT 39
14869: PUSH
14870: LD_INT 31
14872: PUSH
14873: LD_INT 14
14875: PUSH
14876: LD_INT 10
14878: PUSH
14879: LD_INT 40
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: ST_TO_ADDR
// resultWeapons = [ ] ;
14893: LD_ADDR_VAR 0 5
14897: PUSH
14898: EMPTY
14899: ST_TO_ADDR
// for i := 1 to weaponTechs do
14900: LD_ADDR_VAR 0 4
14904: PUSH
14905: DOUBLE
14906: LD_INT 1
14908: DEC
14909: ST_TO_ADDR
14910: LD_VAR 0 6
14914: PUSH
14915: FOR_TO
14916: IFFALSE 15103
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
14918: LD_VAR 0 6
14922: PUSH
14923: LD_VAR 0 4
14927: ARRAY
14928: PPUSH
14929: LD_VAR 0 2
14933: PPUSH
14934: CALL_OW 482
14938: PUSH
14939: LD_VAR 0 6
14943: PUSH
14944: LD_VAR 0 4
14948: ARRAY
14949: PPUSH
14950: LD_VAR 0 1
14954: PPUSH
14955: CALL_OW 321
14959: PUSH
14960: LD_INT 2
14962: EQUAL
14963: AND
14964: IFFALSE 15101
// case nation of nation_american :
14966: LD_VAR 0 2
14970: PUSH
14971: LD_INT 1
14973: DOUBLE
14974: EQUAL
14975: IFTRUE 14979
14977: GO 15014
14979: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
14980: LD_ADDR_VAR 0 5
14984: PUSH
14985: LD_VAR 0 5
14989: PUSH
14990: LD_VAR 0 6
14994: PUSH
14995: LD_VAR 0 4
14999: ARRAY
15000: PPUSH
15001: LD_VAR 0 2
15005: PPUSH
15006: CALL 15120 0 2
15010: ADD
15011: ST_TO_ADDR
15012: GO 15101
15014: LD_INT 2
15016: DOUBLE
15017: EQUAL
15018: IFTRUE 15022
15020: GO 15057
15022: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_VAR 0 5
15032: PUSH
15033: LD_VAR 0 6
15037: PUSH
15038: LD_VAR 0 4
15042: ARRAY
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL 15120 0 2
15053: ADD
15054: ST_TO_ADDR
15055: GO 15101
15057: LD_INT 3
15059: DOUBLE
15060: EQUAL
15061: IFTRUE 15065
15063: GO 15100
15065: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
15066: LD_ADDR_VAR 0 5
15070: PUSH
15071: LD_VAR 0 5
15075: PUSH
15076: LD_VAR 0 6
15080: PUSH
15081: LD_VAR 0 4
15085: ARRAY
15086: PPUSH
15087: LD_VAR 0 2
15091: PPUSH
15092: CALL 15120 0 2
15096: ADD
15097: ST_TO_ADDR
15098: GO 15101
15100: POP
// end ;
15101: GO 14915
15103: POP
15104: POP
// result = resultWeapons ;
15105: LD_ADDR_VAR 0 3
15109: PUSH
15110: LD_VAR 0 5
15114: ST_TO_ADDR
// end ;
15115: LD_VAR 0 3
15119: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
15120: LD_INT 0
15122: PPUSH
// case tech of tech_AdvMet :
15123: LD_VAR 0 1
15127: PUSH
15128: LD_INT 34
15130: DOUBLE
15131: EQUAL
15132: IFTRUE 15136
15134: GO 15164
15136: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
15137: LD_ADDR_VAR 0 3
15141: PUSH
15142: LD_INT 6
15144: PUSH
15145: LD_STRING 
15147: PUSH
15148: LD_INT 46
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_VAR 0 2
15160: ARRAY
15161: ST_TO_ADDR
15162: GO 15453
15164: LD_INT 71
15166: DOUBLE
15167: EQUAL
15168: IFTRUE 15172
15170: GO 15200
15172: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
15173: LD_ADDR_VAR 0 3
15177: PUSH
15178: LD_STRING 
15180: PUSH
15181: LD_STRING 
15183: PUSH
15184: LD_INT 47
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PUSH
15192: LD_VAR 0 2
15196: ARRAY
15197: ST_TO_ADDR
15198: GO 15453
15200: LD_INT 70
15202: DOUBLE
15203: EQUAL
15204: IFTRUE 15208
15206: GO 15236
15208: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_STRING 
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_STRING 
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: LIST
15227: PUSH
15228: LD_VAR 0 2
15232: ARRAY
15233: ST_TO_ADDR
15234: GO 15453
15236: LD_INT 69
15238: DOUBLE
15239: EQUAL
15240: IFTRUE 15244
15242: GO 15272
15244: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
15245: LD_ADDR_VAR 0 3
15249: PUSH
15250: LD_INT 4
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 43
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: LIST
15263: PUSH
15264: LD_VAR 0 2
15268: ARRAY
15269: ST_TO_ADDR
15270: GO 15453
15272: LD_INT 39
15274: DOUBLE
15275: EQUAL
15276: IFTRUE 15280
15278: GO 15308
15280: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 5
15288: PUSH
15289: LD_INT 27
15291: PUSH
15292: LD_INT 44
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PUSH
15300: LD_VAR 0 2
15304: ARRAY
15305: ST_TO_ADDR
15306: GO 15453
15308: LD_INT 31
15310: DOUBLE
15311: EQUAL
15312: IFTRUE 15316
15314: GO 15344
15316: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
15317: LD_ADDR_VAR 0 3
15321: PUSH
15322: LD_STRING 
15324: PUSH
15325: LD_STRING 
15327: PUSH
15328: LD_INT 49
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: PUSH
15336: LD_VAR 0 2
15340: ARRAY
15341: ST_TO_ADDR
15342: GO 15453
15344: LD_INT 14
15346: DOUBLE
15347: EQUAL
15348: IFTRUE 15352
15350: GO 15380
15352: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
15353: LD_ADDR_VAR 0 3
15357: PUSH
15358: LD_INT 10
15360: PUSH
15361: LD_STRING 
15363: PUSH
15364: LD_STRING 
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: LIST
15371: PUSH
15372: LD_VAR 0 2
15376: ARRAY
15377: ST_TO_ADDR
15378: GO 15453
15380: LD_INT 10
15382: DOUBLE
15383: EQUAL
15384: IFTRUE 15388
15386: GO 15416
15388: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
15389: LD_ADDR_VAR 0 3
15393: PUSH
15394: LD_INT 9
15396: PUSH
15397: LD_STRING 
15399: PUSH
15400: LD_STRING 
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: PUSH
15408: LD_VAR 0 2
15412: ARRAY
15413: ST_TO_ADDR
15414: GO 15453
15416: LD_INT 40
15418: DOUBLE
15419: EQUAL
15420: IFTRUE 15424
15422: GO 15452
15424: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 7
15432: PUSH
15433: LD_INT 28
15435: PUSH
15436: LD_INT 45
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: LD_VAR 0 2
15448: ARRAY
15449: ST_TO_ADDR
15450: GO 15453
15452: POP
// end ;
15453: LD_VAR 0 3
15457: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
15458: LD_INT 0
15460: PPUSH
15461: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
15462: LD_ADDR_VAR 0 2
15466: PUSH
15467: LD_VAR 0 1
15471: PPUSH
15472: LD_INT 1
15474: PPUSH
15475: CALL_OW 289
15479: PUSH
15480: LD_VAR 0 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 289
15492: PUSH
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 3
15500: PPUSH
15501: CALL_OW 289
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: LIST
15510: ST_TO_ADDR
// end ;
15511: LD_VAR 0 2
15515: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i ; begin
15516: LD_INT 0
15518: PPUSH
15519: PPUSH
// area = ListEnvironmentArea ( area ) ;
15520: LD_ADDR_VAR 0 2
15524: PUSH
15525: LD_VAR 0 2
15529: PPUSH
15530: CALL_OW 353
15534: ST_TO_ADDR
// if bulldozer > 0 then
15535: LD_VAR 0 1
15539: PUSH
15540: LD_INT 0
15542: GREATER
15543: IFFALSE 15654
// for i = area downto 1 do
15545: LD_ADDR_VAR 0 4
15549: PUSH
15550: DOUBLE
15551: LD_VAR 0 2
15555: INC
15556: ST_TO_ADDR
15557: LD_INT 1
15559: PUSH
15560: FOR_DOWNTO
15561: IFFALSE 15652
// if IsEnvironment ( area [ i ] [ 1 ] , area [ i ] [ 2 ] ) then
15563: LD_VAR 0 2
15567: PUSH
15568: LD_VAR 0 4
15572: ARRAY
15573: PUSH
15574: LD_INT 1
15576: ARRAY
15577: PPUSH
15578: LD_VAR 0 2
15582: PUSH
15583: LD_VAR 0 4
15587: ARRAY
15588: PUSH
15589: LD_INT 2
15591: ARRAY
15592: PPUSH
15593: CALL_OW 351
15597: IFFALSE 15650
// if not HasTask ( bulldozer ) then
15599: LD_VAR 0 1
15603: PPUSH
15604: CALL_OW 314
15608: NOT
15609: IFFALSE 15650
// AddComMoveXY ( bulldozer , area [ i ] [ 1 ] , area [ i ] [ 2 ] ) ;
15611: LD_VAR 0 1
15615: PPUSH
15616: LD_VAR 0 2
15620: PUSH
15621: LD_VAR 0 4
15625: ARRAY
15626: PUSH
15627: LD_INT 1
15629: ARRAY
15630: PPUSH
15631: LD_VAR 0 2
15635: PUSH
15636: LD_VAR 0 4
15640: ARRAY
15641: PUSH
15642: LD_INT 2
15644: ARRAY
15645: PPUSH
15646: CALL_OW 171
15650: GO 15560
15652: POP
15653: POP
// end ;
15654: LD_VAR 0 3
15658: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
15659: LD_INT 0
15661: PPUSH
15662: PPUSH
15663: PPUSH
// uc_side := GetSide ( b ) ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_VAR 0 2
15673: PPUSH
15674: CALL_OW 255
15678: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_VAR 0 2
15688: PPUSH
15689: CALL_OW 248
15693: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
15694: LD_INT 0
15696: PPUSH
15697: LD_INT 1
15699: PPUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 380
// un = CreateHuman ;
15709: LD_ADDR_VAR 0 4
15713: PUSH
15714: CALL_OW 44
15718: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
15719: LD_ADDR_VAR 0 5
15723: PUSH
15724: LD_VAR 0 2
15728: PPUSH
15729: CALL_OW 254
15733: PUSH
15734: LD_INT 3
15736: MINUS
15737: ST_TO_ADDR
// if dir < 0 then
15738: LD_VAR 0 5
15742: PUSH
15743: LD_INT 0
15745: LESS
15746: IFFALSE 15762
// dir := 6 + dir ;
15748: LD_ADDR_VAR 0 5
15752: PUSH
15753: LD_INT 6
15755: PUSH
15756: LD_VAR 0 5
15760: PLUS
15761: ST_TO_ADDR
// SetDir ( un , dir ) ;
15762: LD_VAR 0 4
15766: PPUSH
15767: LD_VAR 0 5
15771: PPUSH
15772: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
15776: LD_VAR 0 4
15780: PPUSH
15781: LD_VAR 0 2
15785: PPUSH
15786: CALL_OW 52
// result = un ;
15790: LD_ADDR_VAR 0 3
15794: PUSH
15795: LD_VAR 0 4
15799: ST_TO_ADDR
// end ; end_of_file
15800: LD_VAR 0 3
15804: RET
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if old_vehicle = XavierVeh and human = Xavier then
15805: LD_VAR 0 2
15809: PUSH
15810: LD_INT 53
15812: EQUAL
15813: PUSH
15814: LD_VAR 0 4
15818: PUSH
15819: LD_EXP 55
15823: EQUAL
15824: AND
15825: IFFALSE 15835
// xavierJoinToPlayer = true ;
15827: LD_ADDR_EXP 10
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// if original_side = 6 and GetSide ( human ) = 3 then
15835: LD_VAR 0 3
15839: PUSH
15840: LD_INT 6
15842: EQUAL
15843: PUSH
15844: LD_VAR 0 4
15848: PPUSH
15849: CALL_OW 255
15853: PUSH
15854: LD_INT 3
15856: EQUAL
15857: AND
15858: IFFALSE 15904
// begin ComExitVehicle ( human ) ;
15860: LD_VAR 0 4
15864: PPUSH
15865: CALL_OW 121
// SetSide ( [ old_vehicle , new_vehicle ] , 6 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PPUSH
15883: LD_INT 6
15885: PPUSH
15886: CALL_OW 235
// ComEnterUnit ( Yashin , new_vehicle ) ;
15890: LD_EXP 51
15894: PPUSH
15895: LD_VAR 0 1
15899: PPUSH
15900: CALL_OW 120
// end ; end ;
15904: PPOPN 4
15906: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 5 then
15907: LD_VAR 0 1
15911: PUSH
15912: LD_INT 3
15914: EQUAL
15915: PUSH
15916: LD_VAR 0 2
15920: PUSH
15921: LD_INT 5
15923: EQUAL
15924: AND
15925: IFFALSE 15975
// begin xavierPatrol = false ;
15927: LD_ADDR_EXP 7
15931: PUSH
15932: LD_INT 0
15934: ST_TO_ADDR
// ChangeSideFog ( 5 , 5 ) ;
15935: LD_INT 5
15937: PPUSH
15938: LD_INT 5
15940: PPUSH
15941: CALL_OW 343
// SetAttitude ( 3 , 5 , att_enemy , true ) ;
15945: LD_INT 3
15947: PPUSH
15948: LD_INT 5
15950: PPUSH
15951: LD_INT 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 80
// ComAttackUnit ( Xavier , Burlak ) ;
15961: LD_EXP 55
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 115
// end ; end ;
15975: PPOPN 2
15977: END
// on UnitDestroyed ( unit ) do var aiData , buildingType ;
15978: LD_INT 0
15980: PPUSH
15981: PPUSH
// begin if unit = Burlak then
15982: LD_VAR 0 1
15986: PUSH
15987: LD_EXP 37
15991: EQUAL
15992: IFFALSE 15998
// Lose_Burlak ;
15994: CALL 17266 0 0
// if unit = Vsevolod then
15998: LD_VAR 0 1
16002: PUSH
16003: LD_EXP 48
16007: EQUAL
16008: IFFALSE 16014
// Lose_Vsevolod ;
16010: CALL 17281 0 0
// aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16014: LD_ADDR_VAR 0 2
16018: PUSH
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 255
16028: PPUSH
16029: CALL 19372 0 1
16033: ST_TO_ADDR
// if aiData then
16034: LD_VAR 0 2
16038: IFFALSE 16247
// begin if not InArea ( GetX ( unit ) , GetY ( unit ) , aiData [ 8 ] ) then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 250
16049: PPUSH
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL_OW 251
16059: PPUSH
16060: LD_VAR 0 2
16064: PUSH
16065: LD_INT 8
16067: ARRAY
16068: PPUSH
16069: CALL_OW 309
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16247
// RemoveUnitFromAI ( aiData , unit ) ;
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL 19281 0 2
// if GetType ( unit ) = unit_building then
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 247
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: IFFALSE 16247
// begin if GetBType ( unit ) = 1 then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 266
16116: PUSH
16117: LD_INT 1
16119: EQUAL
16120: IFFALSE 16132
// buildingType = 0 else
16122: LD_ADDR_VAR 0 3
16126: PUSH
16127: LD_INT 0
16129: ST_TO_ADDR
16130: GO 16197
// if GetBType ( unit ) = 3 then
16132: LD_VAR 0 1
16136: PPUSH
16137: CALL_OW 266
16141: PUSH
16142: LD_INT 3
16144: EQUAL
16145: IFFALSE 16157
// buildingType = 2 else
16147: LD_ADDR_VAR 0 3
16151: PUSH
16152: LD_INT 2
16154: ST_TO_ADDR
16155: GO 16197
// if GetBType ( unit ) = 5 then
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 266
16166: PUSH
16167: LD_INT 5
16169: EQUAL
16170: IFFALSE 16182
// buildingType = 4 else
16172: LD_ADDR_VAR 0 3
16176: PUSH
16177: LD_INT 4
16179: ST_TO_ADDR
16180: GO 16197
// buildingType = GetBType ( unit ) ;
16182: LD_ADDR_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 266
16196: ST_TO_ADDR
// AddNewDestroyedBuilding ( aiData , [ buildingType , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
16197: LD_VAR 0 2
16201: PPUSH
16202: LD_VAR 0 3
16206: PUSH
16207: LD_VAR 0 1
16211: PPUSH
16212: CALL_OW 250
16216: PUSH
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 251
16226: PUSH
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 254
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL 19094 0 2
// end ; end ; end ;
16247: PPOPN 3
16249: END
// on VehicleConstructed ( vehicle , building ) do var aiData ;
16250: LD_INT 0
16252: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( vehicle ) ) ;
16253: LD_ADDR_VAR 0 3
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: CALL_OW 255
16267: PPUSH
16268: CALL 19372 0 1
16272: ST_TO_ADDR
// if aiData then
16273: LD_VAR 0 3
16277: IFFALSE 16516
// begin if not GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16279: LD_VAR 0 1
16283: PPUSH
16284: CALL_OW 264
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 32
16294: PUSH
16295: LD_INT 51
16297: PUSH
16298: LD_INT 13
16300: PUSH
16301: LD_EXP 127
16305: PUSH
16306: LD_INT 52
16308: PUSH
16309: LD_INT 14
16311: PUSH
16312: LD_INT 53
16314: PUSH
16315: LD_INT 31
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: IN
16329: NOT
16330: IFFALSE 16389
// begin if aiData [ 13 ] > GetDefenceVehicles ( aiData ) then
16332: LD_VAR 0 3
16336: PUSH
16337: LD_INT 13
16339: ARRAY
16340: PUSH
16341: LD_VAR 0 3
16345: PPUSH
16346: CALL 19452 0 1
16350: GREATER
16351: IFFALSE 16372
// AddNewVehicle ( aiData , vehicle , 2 ) else
16353: LD_VAR 0 3
16357: PPUSH
16358: LD_VAR 0 1
16362: PPUSH
16363: LD_INT 2
16365: PPUSH
16366: CALL 18989 0 3
16370: GO 16389
// AddNewVehicle ( aiData , vehicle , 4 ) end ;
16372: LD_VAR 0 3
16376: PPUSH
16377: LD_VAR 0 1
16381: PPUSH
16382: LD_INT 4
16384: PPUSH
16385: CALL 18989 0 3
// if GetWeapon ( vehicle ) in [ us_cargo_bay , ar_cargo_bay , ru_cargo_bay , us_crane , ar_crane , ru_crane , us_bulldozer , ru_bulldozer , ar_control_tower ] then
16389: LD_VAR 0 1
16393: PPUSH
16394: CALL_OW 264
16398: PUSH
16399: LD_INT 12
16401: PUSH
16402: LD_INT 32
16404: PUSH
16405: LD_INT 51
16407: PUSH
16408: LD_INT 13
16410: PUSH
16411: LD_EXP 127
16415: PUSH
16416: LD_INT 52
16418: PUSH
16419: LD_INT 14
16421: PUSH
16422: LD_INT 53
16424: PUSH
16425: LD_INT 31
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: IN
16439: IFFALSE 16458
// AddNewVehicle ( aiData , vehicle , 1 ) ;
16441: LD_VAR 0 3
16445: PPUSH
16446: LD_VAR 0 1
16450: PPUSH
16451: LD_INT 1
16453: PPUSH
16454: CALL 18989 0 3
// if remoteVehs and GetControl ( vehicle ) = control_remote then
16458: LD_EXP 60
16462: PUSH
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 263
16472: PUSH
16473: LD_INT 2
16475: EQUAL
16476: AND
16477: IFFALSE 16516
// LinkVehicleToHuman ( vehicle , UnitsInside ( remoteVehs [ rand ( 1 , remoteVehs ) ] ) [ 1 ] ) ;
16479: LD_VAR 0 1
16483: PPUSH
16484: LD_EXP 60
16488: PUSH
16489: LD_INT 1
16491: PPUSH
16492: LD_EXP 60
16496: PPUSH
16497: CALL_OW 12
16501: ARRAY
16502: PPUSH
16503: CALL_OW 313
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: PPUSH
16512: CALL_OW 53
// end ; end ;
16516: PPOPN 3
16518: END
// on BuildingStarted ( building , unit ) do var aiData ;
16519: LD_INT 0
16521: PPUSH
// begin aiData = GetAIDataBySide ( GetSide ( unit ) ) ;
16522: LD_ADDR_VAR 0 3
16526: PUSH
16527: LD_VAR 0 2
16531: PPUSH
16532: CALL_OW 255
16536: PPUSH
16537: CALL 19372 0 1
16541: ST_TO_ADDR
// if ( aiData ) then
16542: LD_VAR 0 3
16546: IFFALSE 16571
// begin RemoveDestroyedBuilding ( aiData ) ;
16548: LD_VAR 0 3
16552: PPUSH
16553: CALL 19188 0 1
// AddNewUnit ( aiData , building ) ;
16557: LD_VAR 0 3
16561: PPUSH
16562: LD_VAR 0 1
16566: PPUSH
16567: CALL 18898 0 2
// end ; end ;
16571: PPOPN 3
16573: END
// on EnterVehicle ( vehicle , human ) do begin if human = Yashin then
16574: LD_VAR 0 2
16578: PUSH
16579: LD_EXP 51
16583: EQUAL
16584: IFFALSE 16598
// ComMoveToArea ( vehicle , YashinExitArea ) ;
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_INT 19
16593: PPUSH
16594: CALL_OW 113
// end ; end_of_file
16598: PPOPN 2
16600: END
// export function FinishMission ; begin
16601: LD_INT 0
16603: PPUSH
// SetRewards ;
16604: CALL 16625 0 0
// SavePlayerCharacters ;
16608: CALL 16804 0 0
// SaveGlobalVariables ;
16612: CALL 17246 0 0
// YouWin ;
16616: CALL_OW 103
// end ;
16620: LD_VAR 0 1
16624: RET
// function SetRewards ; begin
16625: LD_INT 0
16627: PPUSH
// if IsOK ( Xavier ) and GetSide ( Xavier ) = 3 then
16628: LD_EXP 55
16632: PPUSH
16633: CALL_OW 302
16637: PUSH
16638: LD_EXP 55
16642: PPUSH
16643: CALL_OW 255
16647: PUSH
16648: LD_INT 3
16650: EQUAL
16651: AND
16652: IFFALSE 16666
// AddMedal ( Xavier , 1 ) else
16654: LD_STRING Xavier
16656: PPUSH
16657: LD_INT 1
16659: PPUSH
16660: CALL_OW 101
16664: GO 16677
// AddMedal ( Xavier , - 1 ) ;
16666: LD_STRING Xavier
16668: PPUSH
16669: LD_INT 1
16671: NEG
16672: PPUSH
16673: CALL_OW 101
// if missionTimer <= destroyKabulBaseTime then
16677: LD_EXP 19
16681: PUSH
16682: LD_EXP 28
16686: LESSEQUAL
16687: IFFALSE 16701
// AddMedal ( TimeVS , 1 ) else
16689: LD_STRING TimeVS
16691: PPUSH
16692: LD_INT 1
16694: PPUSH
16695: CALL_OW 101
16699: GO 16712
// AddMedal ( TimeVS , - 1 ) ;
16701: LD_STRING TimeVS
16703: PPUSH
16704: LD_INT 1
16706: NEG
16707: PPUSH
16708: CALL_OW 101
// if heikeCaptured then
16712: LD_EXP 17
16716: IFFALSE 16730
// AddMedal ( Heike , 1 ) else
16718: LD_STRING Heike
16720: PPUSH
16721: LD_INT 1
16723: PPUSH
16724: CALL_OW 101
16728: GO 16741
// AddMedal ( Heike , - 1 ) ;
16730: LD_STRING Heike
16732: PPUSH
16733: LD_INT 1
16735: NEG
16736: PPUSH
16737: CALL_OW 101
// GiveMedals ( Main1 ) ;
16741: LD_STRING Main1
16743: PPUSH
16744: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] , [ f_ok ] ] ) ) ;
16748: LD_INT 22
16750: PUSH
16751: LD_INT 3
16753: PUSH
16754: EMPTY
16755: LIST
16756: LIST
16757: PUSH
16758: LD_INT 21
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 23
16770: PUSH
16771: LD_INT 3
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 50
16780: PUSH
16781: EMPTY
16782: LIST
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: PPUSH
16790: CALL_OW 69
16794: PPUSH
16795: CALL_OW 43
// end ;
16799: LD_VAR 0 1
16803: RET
// function SavePlayerCharacters ; var randomsToSave ; begin
16804: LD_INT 0
16806: PPUSH
16807: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
16808: LD_EXP 37
16812: PPUSH
16813: LD_STRING Burlak
16815: PPUSH
16816: LD_INT 3
16818: PPUSH
16819: CALL 12290 0 3
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
16823: LD_EXP 38
16827: PPUSH
16828: LD_STRING Karamazov
16830: PPUSH
16831: LD_INT 3
16833: PPUSH
16834: CALL 12290 0 3
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
16838: LD_EXP 39
16842: PPUSH
16843: LD_STRING Petrovova
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12290 0 3
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
16853: LD_EXP 40
16857: PPUSH
16858: LD_STRING Gleb
16860: PPUSH
16861: LD_INT 3
16863: PPUSH
16864: CALL 12290 0 3
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
16868: LD_EXP 41
16872: PPUSH
16873: LD_STRING Petrosyan
16875: PPUSH
16876: LD_INT 3
16878: PPUSH
16879: CALL 12290 0 3
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
16883: LD_EXP 43
16887: PPUSH
16888: LD_STRING Dolgov
16890: PPUSH
16891: LD_INT 3
16893: PPUSH
16894: CALL 12290 0 3
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
16898: LD_EXP 44
16902: PPUSH
16903: LD_STRING Lipshchin
16905: PPUSH
16906: LD_INT 3
16908: PPUSH
16909: CALL 12290 0 3
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
16913: LD_EXP 42
16917: PPUSH
16918: LD_STRING Titov
16920: PPUSH
16921: LD_INT 3
16923: PPUSH
16924: CALL 12290 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
16928: LD_EXP 45
16932: PPUSH
16933: LD_STRING Kirilenkova
16935: PPUSH
16936: LD_INT 3
16938: PPUSH
16939: CALL 12290 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
16943: LD_EXP 46
16947: PPUSH
16948: LD_STRING Belkov
16950: PPUSH
16951: LD_INT 3
16953: PPUSH
16954: CALL 12290 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
16958: LD_EXP 47
16962: PPUSH
16963: LD_STRING Belkov2
16965: PPUSH
16966: LD_INT 3
16968: PPUSH
16969: CALL 12290 0 3
// ExtSaveCharacter ( Xavier , Xavier , 3 ) ;
16973: LD_EXP 55
16977: PPUSH
16978: LD_STRING Xavier
16980: PPUSH
16981: LD_INT 3
16983: PPUSH
16984: CALL 12290 0 3
// ExtSaveCharacter ( Vsevolod , Vsevolod , 3 ) ;
16988: LD_EXP 48
16992: PPUSH
16993: LD_STRING Vsevolod
16995: PPUSH
16996: LD_INT 3
16998: PPUSH
16999: CALL 12290 0 3
// if heikeCaptured then
17003: LD_EXP 17
17007: IFFALSE 17021
// SaveCharacters ( Heike , 07_Heike ) ;
17009: LD_EXP 56
17013: PPUSH
17014: LD_STRING 07_Heike
17016: PPUSH
17017: CALL_OW 38
// ExtSaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
17021: LD_INT 22
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 21
17033: PUSH
17034: LD_INT 1
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 2
17043: PUSH
17044: LD_INT 25
17046: PUSH
17047: LD_INT 12
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 25
17056: PUSH
17057: LD_INT 16
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 15
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: PPUSH
17090: LD_STRING other_apemans
17092: PPUSH
17093: LD_INT 3
17095: PPUSH
17096: CALL 12347 0 3
// randomsToSave = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Kirilenkova , Belkov , Belkov2 , Xavier , Vsevolod ] ;
17100: LD_ADDR_VAR 0 2
17104: PUSH
17105: LD_INT 22
17107: PUSH
17108: LD_INT 3
17110: PUSH
17111: EMPTY
17112: LIST
17113: LIST
17114: PUSH
17115: LD_INT 21
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 23
17127: PUSH
17128: LD_INT 3
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: LIST
17139: PPUSH
17140: CALL_OW 69
17144: PUSH
17145: LD_EXP 37
17149: PUSH
17150: LD_EXP 38
17154: PUSH
17155: LD_EXP 39
17159: PUSH
17160: LD_EXP 40
17164: PUSH
17165: LD_EXP 41
17169: PUSH
17170: LD_EXP 42
17174: PUSH
17175: LD_EXP 43
17179: PUSH
17180: LD_EXP 44
17184: PUSH
17185: LD_EXP 45
17189: PUSH
17190: LD_EXP 46
17194: PUSH
17195: LD_EXP 47
17199: PUSH
17200: LD_EXP 55
17204: PUSH
17205: LD_EXP 48
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: DIFF
17225: ST_TO_ADDR
// ExtSaveCharacters ( randomsToSave , other_survivors , 3 ) ;
17226: LD_VAR 0 2
17230: PPUSH
17231: LD_STRING other_survivors
17233: PPUSH
17234: LD_INT 3
17236: PPUSH
17237: CALL 12347 0 3
// end ;
17241: LD_VAR 0 1
17245: RET
// function SaveGlobalVariables ; begin
17246: LD_INT 0
17248: PPUSH
// SaveVariable ( heikeCaptured , 07_HeikeCaptured_1 ) ;
17249: LD_EXP 17
17253: PPUSH
17254: LD_STRING 07_HeikeCaptured_1
17256: PPUSH
17257: CALL_OW 39
// end ; end_of_file
17261: LD_VAR 0 1
17265: RET
// export function Lose_Burlak ; begin
17266: LD_INT 0
17268: PPUSH
// YouLost ( Burlak ) ;
17269: LD_STRING Burlak
17271: PPUSH
17272: CALL_OW 104
// end ;
17276: LD_VAR 0 1
17280: RET
// export function Lose_Vsevolod ; begin
17281: LD_INT 0
17283: PPUSH
// YouLost ( Sevi ) ;
17284: LD_STRING Sevi
17286: PPUSH
17287: CALL_OW 104
// end ;
17291: LD_VAR 0 1
17295: RET
// every 0 0$1 trigger IsInArea ( Heike , HeikeEscapeArea ) or IsInArea ( heikeVehicle , HeikeEscapeArea ) do
17296: LD_EXP 56
17300: PPUSH
17301: LD_INT 9
17303: PPUSH
17304: CALL_OW 308
17308: PUSH
17309: LD_EXP 57
17313: PPUSH
17314: LD_INT 9
17316: PPUSH
17317: CALL_OW 308
17321: OR
17322: IFFALSE 17334
17324: GO 17326
17326: DISABLE
// YouLost ( Heike ) ; end_of_file
17327: LD_STRING Heike
17329: PPUSH
17330: CALL_OW 104
17334: END
// export aiStructDatas ; export function InitAIManager ; begin
17335: LD_INT 0
17337: PPUSH
// aiStructDatas = [ ] ;
17338: LD_ADDR_EXP 62
17342: PUSH
17343: EMPTY
17344: ST_TO_ADDR
// end ;
17345: LD_VAR 0 1
17349: RET
// every 1 do
17350: GO 17352
17352: DISABLE
// begin InitAIManager ;
17353: CALL 17335 0 0
// AddNewAI ( 1 , 0 , 2 , 2 , kabulBaseUnits , FilterUnitsInArea ( KabulBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , [ ] , KabulBaseArea , KabulHealArea , KabulRepairArea , KabulDefenceArea , KabulRepairArea , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gatling_gun , ar_gun , ar_light_gun , ar_flame_thrower , ar_rocket_launcher ] ] ] , [ 1 , 1 , 0 ] , 2 2$30 , [ true , true , true ] , 1 , 1 , 1 ) ;
17357: LD_INT 1
17359: PPUSH
17360: LD_INT 0
17362: PPUSH
17363: LD_INT 2
17365: PPUSH
17366: LD_INT 2
17368: PPUSH
17369: LD_EXP 59
17373: PPUSH
17374: LD_INT 10
17376: PPUSH
17377: LD_INT 22
17379: PUSH
17380: LD_INT 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 21
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PPUSH
17401: CALL_OW 70
17405: PPUSH
17406: EMPTY
17407: PPUSH
17408: LD_INT 10
17410: PPUSH
17411: LD_INT 12
17413: PPUSH
17414: LD_INT 13
17416: PPUSH
17417: LD_INT 11
17419: PPUSH
17420: LD_INT 13
17422: PPUSH
17423: LD_INT 13
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 25
17434: PUSH
17435: LD_INT 27
17437: PUSH
17438: LD_INT 23
17440: PUSH
17441: LD_INT 26
17443: PUSH
17444: LD_INT 28
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: PUSH
17460: LD_INT 13
17462: PUSH
17463: LD_INT 1
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: LD_INT 25
17471: PUSH
17472: LD_INT 27
17474: PUSH
17475: LD_INT 23
17477: PUSH
17478: LD_INT 26
17480: PUSH
17481: LD_INT 28
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: PUSH
17491: EMPTY
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PPUSH
17501: LD_INT 13
17503: PUSH
17504: LD_INT 1
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: LD_INT 25
17512: PUSH
17513: LD_INT 27
17515: PUSH
17516: LD_INT 23
17518: PUSH
17519: LD_INT 26
17521: PUSH
17522: LD_INT 28
17524: PUSH
17525: EMPTY
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 13
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: LD_INT 2
17546: PUSH
17547: LD_INT 25
17549: PUSH
17550: LD_INT 27
17552: PUSH
17553: LD_INT 23
17555: PUSH
17556: LD_INT 26
17558: PUSH
17559: LD_INT 28
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 13
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 25
17586: PUSH
17587: LD_INT 27
17589: PUSH
17590: LD_INT 23
17592: PUSH
17593: LD_INT 26
17595: PUSH
17596: LD_INT 28
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: EMPTY
17613: LIST
17614: LIST
17615: LIST
17616: PPUSH
17617: LD_INT 1
17619: PUSH
17620: LD_INT 1
17622: PUSH
17623: LD_INT 0
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: LIST
17630: PPUSH
17631: LD_INT 5250
17633: PPUSH
17634: LD_INT 1
17636: PUSH
17637: LD_INT 1
17639: PUSH
17640: LD_INT 1
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: LIST
17647: PPUSH
17648: LD_INT 1
17650: PPUSH
17651: LD_INT 1
17653: PPUSH
17654: LD_INT 1
17656: PPUSH
17657: CALL 18524 0 20
// end ;
17661: END
// every 0 0$1 do
17662: GO 17664
17664: DISABLE
// begin StateManager ( 1 ) ;
17665: LD_INT 1
17667: PPUSH
17668: CALL 19672 0 1
// MechanicsManager ( 1 ) ;
17672: LD_INT 1
17674: PPUSH
17675: CALL 20785 0 1
// VehiclesManager ( 1 ) ;
17679: LD_INT 1
17681: PPUSH
17682: CALL 21049 0 1
// SoldiersManager ( 1 ) ;
17686: LD_INT 1
17688: PPUSH
17689: CALL 20158 0 1
// DefenceManager ( 1 ) ;
17693: LD_INT 1
17695: PPUSH
17696: CALL 21559 0 1
// CollectCrates ( 1 ) ;
17700: LD_INT 1
17702: PPUSH
17703: CALL 22491 0 1
// FleeToHealArea ( 1 ) ;
17707: LD_INT 1
17709: PPUSH
17710: CALL 22681 0 1
// FleeToRepairArea ( 1 ) ;
17714: LD_INT 1
17716: PPUSH
17717: CALL 22812 0 1
// RepairBuildings ( 1 ) ;
17721: LD_INT 1
17723: PPUSH
17724: CALL 22968 0 1
// HealDamageUnits ( 1 ) ;
17728: LD_INT 1
17730: PPUSH
17731: CALL 23713 0 1
// enable ;
17735: ENABLE
// end ;
17736: END
// every 0 0$1 do
17737: GO 17739
17739: DISABLE
// begin ProduceVehicles ( 1 ) ;
17740: LD_INT 1
17742: PPUSH
17743: CALL 24211 0 1
// enable ;
17747: ENABLE
// end ;
17748: END
// every 0 0$1 do
17749: GO 17751
17751: DISABLE
// begin AttackManager ( 1 ) ;
17752: LD_INT 1
17754: PPUSH
17755: CALL 22057 0 1
// enable ;
17759: ENABLE
// end ;
17760: END
// every 0 0$1 trigger ( FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) or FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ) and minesList do var i , unitsInArea , unit , minDistance , tmp ;
17761: LD_INT 14
17763: PPUSH
17764: LD_INT 22
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PPUSH
17774: CALL_OW 70
17778: PUSH
17779: LD_INT 15
17781: PPUSH
17782: LD_INT 22
17784: PUSH
17785: LD_INT 3
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 70
17796: OR
17797: PUSH
17798: LD_INT 16
17800: PPUSH
17801: LD_INT 22
17803: PUSH
17804: LD_INT 3
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PPUSH
17811: CALL_OW 70
17815: OR
17816: PUSH
17817: LD_INT 17
17819: PPUSH
17820: LD_INT 22
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PPUSH
17830: CALL_OW 70
17834: OR
17835: PUSH
17836: LD_INT 18
17838: PPUSH
17839: LD_INT 22
17841: PUSH
17842: LD_INT 3
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PPUSH
17849: CALL_OW 70
17853: OR
17854: PUSH
17855: LD_EXP 61
17859: AND
17860: IFFALSE 18280
17862: GO 17864
17864: DISABLE
17865: LD_INT 0
17867: PPUSH
17868: PPUSH
17869: PPUSH
17870: PPUSH
17871: PPUSH
// begin unitsInArea = [ ] ;
17872: LD_ADDR_VAR 0 2
17876: PUSH
17877: EMPTY
17878: ST_TO_ADDR
// tmp = [ ] ;
17879: LD_ADDR_VAR 0 5
17883: PUSH
17884: EMPTY
17885: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldNorthArea , [ f_side , 3 ] ) ;
17886: LD_ADDR_VAR 0 2
17890: PUSH
17891: LD_VAR 0 2
17895: PUSH
17896: LD_INT 14
17898: PPUSH
17899: LD_INT 22
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 70
17913: ADD
17914: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldSouthArea , [ f_side , 3 ] ) ;
17915: LD_ADDR_VAR 0 2
17919: PUSH
17920: LD_VAR 0 2
17924: PUSH
17925: LD_INT 15
17927: PPUSH
17928: LD_INT 22
17930: PUSH
17931: LD_INT 3
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 70
17942: ADD
17943: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldMainRoadArea , [ f_side , 3 ] ) ;
17944: LD_ADDR_VAR 0 2
17948: PUSH
17949: LD_VAR 0 2
17953: PUSH
17954: LD_INT 16
17956: PPUSH
17957: LD_INT 22
17959: PUSH
17960: LD_INT 3
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 70
17971: ADD
17972: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldOilDepositsArea , [ f_side , 3 ] ) ;
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_VAR 0 2
17982: PUSH
17983: LD_INT 17
17985: PPUSH
17986: LD_INT 22
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 70
18000: ADD
18001: ST_TO_ADDR
// unitsInArea = unitsInArea ^ FilterUnitsInArea ( MinefieldExtraArea , [ f_side , 3 ] ) ;
18002: LD_ADDR_VAR 0 2
18006: PUSH
18007: LD_VAR 0 2
18011: PUSH
18012: LD_INT 18
18014: PPUSH
18015: LD_INT 22
18017: PUSH
18018: LD_INT 3
18020: PUSH
18021: EMPTY
18022: LIST
18023: LIST
18024: PPUSH
18025: CALL_OW 70
18029: ADD
18030: ST_TO_ADDR
// for unit in unitsInArea do
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 2
18040: PUSH
18041: FOR_IN
18042: IFFALSE 18277
// begin if GetType ( unit ) = unit_human then
18044: LD_VAR 0 3
18048: PPUSH
18049: CALL_OW 247
18053: PUSH
18054: LD_INT 1
18056: EQUAL
18057: IFFALSE 18069
// minDistance = 3 else
18059: LD_ADDR_VAR 0 4
18063: PUSH
18064: LD_INT 3
18066: ST_TO_ADDR
18067: GO 18077
// minDistance = 4 ;
18069: LD_ADDR_VAR 0 4
18073: PUSH
18074: LD_INT 4
18076: ST_TO_ADDR
// for i = 1 to ( minesList div 2 ) do
18077: LD_ADDR_VAR 0 1
18081: PUSH
18082: DOUBLE
18083: LD_INT 1
18085: DEC
18086: ST_TO_ADDR
18087: LD_EXP 61
18091: PUSH
18092: LD_INT 2
18094: DIV
18095: PUSH
18096: FOR_TO
18097: IFFALSE 18256
// if GetDistXY ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , GetX ( unit ) , GetY ( unit ) ) < minDistance then
18099: LD_EXP 61
18103: PUSH
18104: LD_VAR 0 1
18108: PUSH
18109: LD_INT 2
18111: MUL
18112: PUSH
18113: LD_INT 1
18115: MINUS
18116: ARRAY
18117: PPUSH
18118: LD_EXP 61
18122: PUSH
18123: LD_VAR 0 1
18127: PUSH
18128: LD_INT 2
18130: MUL
18131: ARRAY
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: CALL_OW 250
18142: PPUSH
18143: LD_VAR 0 3
18147: PPUSH
18148: CALL_OW 251
18152: PPUSH
18153: CALL_OW 298
18157: PUSH
18158: LD_VAR 0 4
18162: LESS
18163: IFFALSE 18208
// LaunchMineAtPos ( minesList [ ( i * 2 ) - 1 ] , minesList [ ( i * 2 ) ] , 2 ) else
18165: LD_EXP 61
18169: PUSH
18170: LD_VAR 0 1
18174: PUSH
18175: LD_INT 2
18177: MUL
18178: PUSH
18179: LD_INT 1
18181: MINUS
18182: ARRAY
18183: PPUSH
18184: LD_EXP 61
18188: PUSH
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 2
18196: MUL
18197: ARRAY
18198: PPUSH
18199: LD_INT 2
18201: PPUSH
18202: CALL_OW 456
18206: GO 18254
// tmp = tmp ^ minesList [ ( i * 2 ) - 1 ] ^ minesList [ ( i * 2 ) ] ;
18208: LD_ADDR_VAR 0 5
18212: PUSH
18213: LD_VAR 0 5
18217: PUSH
18218: LD_EXP 61
18222: PUSH
18223: LD_VAR 0 1
18227: PUSH
18228: LD_INT 2
18230: MUL
18231: PUSH
18232: LD_INT 1
18234: MINUS
18235: ARRAY
18236: ADD
18237: PUSH
18238: LD_EXP 61
18242: PUSH
18243: LD_VAR 0 1
18247: PUSH
18248: LD_INT 2
18250: MUL
18251: ARRAY
18252: ADD
18253: ST_TO_ADDR
18254: GO 18096
18256: POP
18257: POP
// minesList = tmp ;
18258: LD_ADDR_EXP 61
18262: PUSH
18263: LD_VAR 0 5
18267: ST_TO_ADDR
// tmp := [ ] ;
18268: LD_ADDR_VAR 0 5
18272: PUSH
18273: EMPTY
18274: ST_TO_ADDR
// end ;
18275: GO 18041
18277: POP
18278: POP
// enable ;
18279: ENABLE
// end ;
18280: PPOPN 5
18282: END
// every 0 0$1 trigger GetSide ( ar_dep ) = 3 or IsDying ( ar_dep ) do var unitInside , turret ;
18283: LD_INT 2
18285: PPUSH
18286: CALL_OW 255
18290: PUSH
18291: LD_INT 3
18293: EQUAL
18294: PUSH
18295: LD_INT 2
18297: PPUSH
18298: CALL_OW 303
18302: OR
18303: IFFALSE 18432
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin for turret in FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_building ] , [ f_btype , b_bunker ] ] ) do
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_INT 2
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 50
18329: PUSH
18330: EMPTY
18331: LIST
18332: PUSH
18333: LD_INT 21
18335: PUSH
18336: LD_INT 3
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 30
18345: PUSH
18346: LD_INT 32
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18430
// if UnitsInside ( turret ) then
18367: LD_VAR 0 2
18371: PPUSH
18372: CALL_OW 313
18376: IFFALSE 18428
// begin unitInside = UnitsInside ( turret ) [ 1 ] ;
18378: LD_ADDR_VAR 0 1
18382: PUSH
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL_OW 313
18392: PUSH
18393: LD_INT 1
18395: ARRAY
18396: ST_TO_ADDR
// ComExitBuilding ( unitInside ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 122
// wait ( 0 0$01 ) ;
18406: LD_INT 35
18408: PPUSH
18409: CALL_OW 67
// ComAgressiveMove ( unitInside , 103 , 48 ) ;
18413: LD_VAR 0 1
18417: PPUSH
18418: LD_INT 103
18420: PPUSH
18421: LD_INT 48
18423: PPUSH
18424: CALL_OW 114
// end ;
18428: GO 18364
18430: POP
18431: POP
// end ;
18432: PPOPN 2
18434: END
// every 0 0$1 do var i , tech , cout , ar_tech_list ;
18435: GO 18437
18437: DISABLE
18438: LD_INT 0
18440: PPUSH
18441: PPUSH
18442: PPUSH
18443: PPUSH
// begin ar_tech_list = GetTechNation ( 2 , 2 , state_enabled ) ;
18444: LD_ADDR_VAR 0 4
18448: PUSH
18449: LD_INT 2
18451: PPUSH
18452: LD_INT 2
18454: PPUSH
18455: LD_INT 1
18457: PPUSH
18458: CALL 41795 0 3
18462: ST_TO_ADDR
// for i = 1 to ar_tech_list do
18463: LD_ADDR_VAR 0 1
18467: PUSH
18468: DOUBLE
18469: LD_INT 1
18471: DEC
18472: ST_TO_ADDR
18473: LD_VAR 0 4
18477: PUSH
18478: FOR_TO
18479: IFFALSE 18519
// begin AddComResearch ( ar_lab1 , ar_tech_list [ i ] ) ;
18481: LD_INT 13
18483: PPUSH
18484: LD_VAR 0 4
18488: PUSH
18489: LD_VAR 0 1
18493: ARRAY
18494: PPUSH
18495: CALL_OW 184
// AddComResearch ( ar_lab2 , ar_tech_list [ i ] ) ;
18499: LD_INT 14
18501: PPUSH
18502: LD_VAR 0 4
18506: PUSH
18507: LD_VAR 0 1
18511: ARRAY
18512: PPUSH
18513: CALL_OW 184
// end ;
18517: GO 18478
18519: POP
18520: POP
// end ;
18521: PPOPN 4
18523: END
// export function AddNewAI ( id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ) ; begin
18524: LD_INT 0
18526: PPUSH
// aiStructDatas = aiStructDatas ^ [ [ id , active , side , nation , startUnits , startBuildings , destroyedBuildings , baseArea , healArea , repairArea , defenceArea , repairVehiclesArea , vehiclesDefenceAmount , vehiclesAttackAmount , vehiclesNonCombatAmount , buildNewVehiclesDelay , needBuildNewVehicles , canAttack , canRebuildBase , canRebuildVehicles ] ] ;
18527: LD_ADDR_EXP 62
18531: PUSH
18532: LD_EXP 62
18536: PUSH
18537: LD_VAR 0 1
18541: PUSH
18542: LD_VAR 0 2
18546: PUSH
18547: LD_VAR 0 3
18551: PUSH
18552: LD_VAR 0 4
18556: PUSH
18557: LD_VAR 0 5
18561: PUSH
18562: LD_VAR 0 6
18566: PUSH
18567: LD_VAR 0 7
18571: PUSH
18572: LD_VAR 0 8
18576: PUSH
18577: LD_VAR 0 9
18581: PUSH
18582: LD_VAR 0 10
18586: PUSH
18587: LD_VAR 0 11
18591: PUSH
18592: LD_VAR 0 12
18596: PUSH
18597: LD_VAR 0 13
18601: PUSH
18602: LD_VAR 0 14
18606: PUSH
18607: LD_VAR 0 15
18611: PUSH
18612: LD_VAR 0 16
18616: PUSH
18617: LD_VAR 0 17
18621: PUSH
18622: LD_VAR 0 18
18626: PUSH
18627: LD_VAR 0 19
18631: PUSH
18632: LD_VAR 0 20
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: PUSH
18659: EMPTY
18660: LIST
18661: ADD
18662: ST_TO_ADDR
// end ;
18663: LD_VAR 0 21
18667: RET
// export function ActiveAI ( index ) ; begin
18668: LD_INT 0
18670: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 1 ) ;
18671: LD_ADDR_EXP 62
18675: PUSH
18676: LD_EXP 62
18680: PPUSH
18681: LD_VAR 0 1
18685: PUSH
18686: LD_INT 2
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PPUSH
18693: LD_INT 1
18695: PPUSH
18696: CALL 46718 0 3
18700: ST_TO_ADDR
// end ;
18701: LD_VAR 0 2
18705: RET
// export function DeactiveAI ( index ) ; begin
18706: LD_INT 0
18708: PPUSH
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 2 ] , 0 ) ;
18709: LD_ADDR_EXP 62
18713: PUSH
18714: LD_EXP 62
18718: PPUSH
18719: LD_VAR 0 1
18723: PUSH
18724: LD_INT 2
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: LD_INT 0
18733: PPUSH
18734: CALL 46718 0 3
18738: ST_TO_ADDR
// end ;
18739: LD_VAR 0 2
18743: RET
// function GetAIDataByID ( aiID ) ; var i ; begin
18744: LD_INT 0
18746: PPUSH
18747: PPUSH
// for i := 1 to aiStructDatas do
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: DOUBLE
18754: LD_INT 1
18756: DEC
18757: ST_TO_ADDR
18758: LD_EXP 62
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18810
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18766: LD_EXP 62
18770: PUSH
18771: LD_VAR 0 3
18775: ARRAY
18776: PUSH
18777: LD_INT 1
18779: ARRAY
18780: PUSH
18781: LD_VAR 0 1
18785: EQUAL
18786: IFFALSE 18808
// begin result = aiStructDatas [ i ] ;
18788: LD_ADDR_VAR 0 2
18792: PUSH
18793: LD_EXP 62
18797: PUSH
18798: LD_VAR 0 3
18802: ARRAY
18803: ST_TO_ADDR
// exit ;
18804: POP
18805: POP
18806: GO 18819
// end ;
18808: GO 18763
18810: POP
18811: POP
// result = [ ] ;
18812: LD_ADDR_VAR 0 2
18816: PUSH
18817: EMPTY
18818: ST_TO_ADDR
// end ;
18819: LD_VAR 0 2
18823: RET
// export function GetAIIndexByID ( aiID ) ; var i ; begin
18824: LD_INT 0
18826: PPUSH
18827: PPUSH
// for i := 1 to aiStructDatas do
18828: LD_ADDR_VAR 0 3
18832: PUSH
18833: DOUBLE
18834: LD_INT 1
18836: DEC
18837: ST_TO_ADDR
18838: LD_EXP 62
18842: PUSH
18843: FOR_TO
18844: IFFALSE 18884
// if ( aiStructDatas [ i ] [ 1 ] = aiID ) then
18846: LD_EXP 62
18850: PUSH
18851: LD_VAR 0 3
18855: ARRAY
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PUSH
18861: LD_VAR 0 1
18865: EQUAL
18866: IFFALSE 18882
// begin result = i ;
18868: LD_ADDR_VAR 0 2
18872: PUSH
18873: LD_VAR 0 3
18877: ST_TO_ADDR
// exit ;
18878: POP
18879: POP
18880: GO 18893
// end ;
18882: GO 18843
18884: POP
18885: POP
// result = [ ] ;
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: EMPTY
18892: ST_TO_ADDR
// end ;
18893: LD_VAR 0 2
18897: RET
// export function AddNewUnit ( aiData , unit ) ; var index , newArray ; begin
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
18902: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
18903: LD_ADDR_VAR 0 4
18907: PUSH
18908: LD_VAR 0 1
18912: PUSH
18913: LD_INT 1
18915: ARRAY
18916: PPUSH
18917: CALL 18824 0 1
18921: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
18922: LD_ADDR_VAR 0 5
18926: PUSH
18927: LD_VAR 0 1
18931: PUSH
18932: LD_INT 5
18934: ARRAY
18935: ST_TO_ADDR
// newArray = newArray ^ unit ;
18936: LD_ADDR_VAR 0 5
18940: PUSH
18941: LD_VAR 0 5
18945: PUSH
18946: LD_VAR 0 2
18950: ADD
18951: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
18952: LD_ADDR_EXP 62
18956: PUSH
18957: LD_EXP 62
18961: PPUSH
18962: LD_VAR 0 4
18966: PUSH
18967: LD_INT 5
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PPUSH
18974: LD_VAR 0 5
18978: PPUSH
18979: CALL 46718 0 3
18983: ST_TO_ADDR
// end ;
18984: LD_VAR 0 3
18988: RET
// export function AddNewVehicle ( aiData , veh , state ) ; var index , newArray ; begin
18989: LD_INT 0
18991: PPUSH
18992: PPUSH
18993: PPUSH
// SetTag ( veh , state ) ;
18994: LD_VAR 0 2
18998: PPUSH
18999: LD_VAR 0 3
19003: PPUSH
19004: CALL_OW 109
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19008: LD_ADDR_VAR 0 5
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: LD_INT 1
19020: ARRAY
19021: PPUSH
19022: CALL 18824 0 1
19026: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19027: LD_ADDR_VAR 0 6
19031: PUSH
19032: LD_VAR 0 1
19036: PUSH
19037: LD_INT 5
19039: ARRAY
19040: ST_TO_ADDR
// newArray = newArray ^ veh ;
19041: LD_ADDR_VAR 0 6
19045: PUSH
19046: LD_VAR 0 6
19050: PUSH
19051: LD_VAR 0 2
19055: ADD
19056: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19057: LD_ADDR_EXP 62
19061: PUSH
19062: LD_EXP 62
19066: PPUSH
19067: LD_VAR 0 5
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PPUSH
19079: LD_VAR 0 6
19083: PPUSH
19084: CALL 46718 0 3
19088: ST_TO_ADDR
// end ;
19089: LD_VAR 0 4
19093: RET
// export function AddNewDestroyedBuilding ( aiData , buildingData ) ; var index , newArray ; begin
19094: LD_INT 0
19096: PPUSH
19097: PPUSH
19098: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19099: LD_ADDR_VAR 0 4
19103: PUSH
19104: LD_VAR 0 1
19108: PUSH
19109: LD_INT 1
19111: ARRAY
19112: PPUSH
19113: CALL 18824 0 1
19117: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19118: LD_ADDR_VAR 0 5
19122: PUSH
19123: LD_VAR 0 1
19127: PUSH
19128: LD_INT 7
19130: ARRAY
19131: ST_TO_ADDR
// newArray = newArray ^ [ buildingData ] ;
19132: LD_ADDR_VAR 0 5
19136: PUSH
19137: LD_VAR 0 5
19141: PUSH
19142: LD_VAR 0 2
19146: PUSH
19147: EMPTY
19148: LIST
19149: ADD
19150: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19151: LD_ADDR_EXP 62
19155: PUSH
19156: LD_EXP 62
19160: PPUSH
19161: LD_VAR 0 4
19165: PUSH
19166: LD_INT 7
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PPUSH
19173: LD_VAR 0 5
19177: PPUSH
19178: CALL 46718 0 3
19182: ST_TO_ADDR
// end ;
19183: LD_VAR 0 3
19187: RET
// export function RemoveDestroyedBuilding ( aiData ) ; var index , newArray ; begin
19188: LD_INT 0
19190: PPUSH
19191: PPUSH
19192: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19193: LD_ADDR_VAR 0 3
19197: PUSH
19198: LD_VAR 0 1
19202: PUSH
19203: LD_INT 1
19205: ARRAY
19206: PPUSH
19207: CALL 18824 0 1
19211: ST_TO_ADDR
// newArray = aiData [ 7 ] ;
19212: LD_ADDR_VAR 0 4
19216: PUSH
19217: LD_VAR 0 1
19221: PUSH
19222: LD_INT 7
19224: ARRAY
19225: ST_TO_ADDR
// newArray = Delete ( newArray , 1 ) ;
19226: LD_ADDR_VAR 0 4
19230: PUSH
19231: LD_VAR 0 4
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 3
19243: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 7 ] , newArray ) ;
19244: LD_ADDR_EXP 62
19248: PUSH
19249: LD_EXP 62
19253: PPUSH
19254: LD_VAR 0 3
19258: PUSH
19259: LD_INT 7
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PPUSH
19266: LD_VAR 0 4
19270: PPUSH
19271: CALL 46718 0 3
19275: ST_TO_ADDR
// end ;
19276: LD_VAR 0 2
19280: RET
// export function RemoveUnitFromAI ( aiData , unit ) ; var index , newArray ; begin
19281: LD_INT 0
19283: PPUSH
19284: PPUSH
19285: PPUSH
// index = GetAIIndexByID ( aiData [ 1 ] ) ;
19286: LD_ADDR_VAR 0 4
19290: PUSH
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 1
19298: ARRAY
19299: PPUSH
19300: CALL 18824 0 1
19304: ST_TO_ADDR
// newArray = aiData [ 5 ] ;
19305: LD_ADDR_VAR 0 5
19309: PUSH
19310: LD_VAR 0 1
19314: PUSH
19315: LD_INT 5
19317: ARRAY
19318: ST_TO_ADDR
// newArray = newArray diff unit ;
19319: LD_ADDR_VAR 0 5
19323: PUSH
19324: LD_VAR 0 5
19328: PUSH
19329: LD_VAR 0 2
19333: DIFF
19334: ST_TO_ADDR
// aiStructDatas = ReplaceIn ( aiStructDatas , [ index , 5 ] , newArray ) ;
19335: LD_ADDR_EXP 62
19339: PUSH
19340: LD_EXP 62
19344: PPUSH
19345: LD_VAR 0 4
19349: PUSH
19350: LD_INT 5
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PPUSH
19357: LD_VAR 0 5
19361: PPUSH
19362: CALL 46718 0 3
19366: ST_TO_ADDR
// end ;
19367: LD_VAR 0 3
19371: RET
// export function GetAIDataBySide ( aiSide ) ; var i ; begin
19372: LD_INT 0
19374: PPUSH
19375: PPUSH
// for i := 1 to aiStructDatas do
19376: LD_ADDR_VAR 0 3
19380: PUSH
19381: DOUBLE
19382: LD_INT 1
19384: DEC
19385: ST_TO_ADDR
19386: LD_EXP 62
19390: PUSH
19391: FOR_TO
19392: IFFALSE 19438
// if ( aiStructDatas [ i ] [ 3 ] = aiSide ) then
19394: LD_EXP 62
19398: PUSH
19399: LD_VAR 0 3
19403: ARRAY
19404: PUSH
19405: LD_INT 3
19407: ARRAY
19408: PUSH
19409: LD_VAR 0 1
19413: EQUAL
19414: IFFALSE 19436
// begin result = aiStructDatas [ i ] ;
19416: LD_ADDR_VAR 0 2
19420: PUSH
19421: LD_EXP 62
19425: PUSH
19426: LD_VAR 0 3
19430: ARRAY
19431: ST_TO_ADDR
// exit ;
19432: POP
19433: POP
19434: GO 19447
// end ;
19436: GO 19391
19438: POP
19439: POP
// result = [ ] ;
19440: LD_ADDR_VAR 0 2
19444: PUSH
19445: EMPTY
19446: ST_TO_ADDR
// end ;
19447: LD_VAR 0 2
19451: RET
// export function GetDefenceVehicles ( aiData ) ; var defVehs , veh ; begin
19452: LD_INT 0
19454: PPUSH
19455: PPUSH
19456: PPUSH
// if not aiData then
19457: LD_VAR 0 1
19461: NOT
19462: IFFALSE 19473
// begin result = [ ] ;
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: EMPTY
19470: ST_TO_ADDR
// exit ;
19471: GO 19557
// end ; defVehs = [ ] ;
19473: LD_ADDR_VAR 0 3
19477: PUSH
19478: EMPTY
19479: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19480: LD_ADDR_VAR 0 4
19484: PUSH
19485: LD_VAR 0 1
19489: PUSH
19490: LD_INT 5
19492: ARRAY
19493: PPUSH
19494: LD_INT 21
19496: PUSH
19497: LD_INT 2
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 72
19508: PUSH
19509: FOR_IN
19510: IFFALSE 19545
// if GetTag ( veh ) = 2 then
19512: LD_VAR 0 4
19516: PPUSH
19517: CALL_OW 110
19521: PUSH
19522: LD_INT 2
19524: EQUAL
19525: IFFALSE 19543
// defVehs = defVehs ^ veh ;
19527: LD_ADDR_VAR 0 3
19531: PUSH
19532: LD_VAR 0 3
19536: PUSH
19537: LD_VAR 0 4
19541: ADD
19542: ST_TO_ADDR
19543: GO 19509
19545: POP
19546: POP
// result = defVehs ;
19547: LD_ADDR_VAR 0 2
19551: PUSH
19552: LD_VAR 0 3
19556: ST_TO_ADDR
// end ;
19557: LD_VAR 0 2
19561: RET
// export function GetAttackVehicles ( aiData ) ; var attackVehs , veh ; begin
19562: LD_INT 0
19564: PPUSH
19565: PPUSH
19566: PPUSH
// if not aiData then
19567: LD_VAR 0 1
19571: NOT
19572: IFFALSE 19583
// begin result = [ ] ;
19574: LD_ADDR_VAR 0 2
19578: PUSH
19579: EMPTY
19580: ST_TO_ADDR
// exit ;
19581: GO 19667
// end ; attackVehs = [ ] ;
19583: LD_ADDR_VAR 0 3
19587: PUSH
19588: EMPTY
19589: ST_TO_ADDR
// for veh in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19590: LD_ADDR_VAR 0 4
19594: PUSH
19595: LD_VAR 0 1
19599: PUSH
19600: LD_INT 5
19602: ARRAY
19603: PPUSH
19604: LD_INT 21
19606: PUSH
19607: LD_INT 2
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 72
19618: PUSH
19619: FOR_IN
19620: IFFALSE 19655
// if GetTag ( veh ) = 4 then
19622: LD_VAR 0 4
19626: PPUSH
19627: CALL_OW 110
19631: PUSH
19632: LD_INT 4
19634: EQUAL
19635: IFFALSE 19653
// attackVehs = attackVehs ^ veh ;
19637: LD_ADDR_VAR 0 3
19641: PUSH
19642: LD_VAR 0 3
19646: PUSH
19647: LD_VAR 0 4
19651: ADD
19652: ST_TO_ADDR
19653: GO 19619
19655: POP
19656: POP
// result = attackVehs ;
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: LD_VAR 0 3
19666: ST_TO_ADDR
// end ;
19667: LD_VAR 0 2
19671: RET
// export function StateManager ( aiID ) ; var aiData , unit ; begin
19672: LD_INT 0
19674: PPUSH
19675: PPUSH
19676: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
19677: LD_ADDR_VAR 0 3
19681: PUSH
19682: LD_VAR 0 1
19686: PPUSH
19687: CALL 18744 0 1
19691: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
19692: LD_VAR 0 3
19696: PUSH
19697: LD_INT 2
19699: ARRAY
19700: PUSH
19701: LD_INT 0
19703: EQUAL
19704: IFFALSE 19708
// exit ;
19706: GO 20153
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
19708: LD_ADDR_VAR 0 4
19712: PUSH
19713: LD_VAR 0 3
19717: PUSH
19718: LD_INT 5
19720: ARRAY
19721: PPUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PPUSH
19732: CALL_OW 72
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19843
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 0 then
19740: LD_VAR 0 4
19744: PPUSH
19745: CALL_OW 256
19749: PUSH
19750: LD_INT 1000
19752: EQUAL
19753: PUSH
19754: LD_VAR 0 4
19758: PPUSH
19759: CALL_OW 110
19763: PUSH
19764: LD_INT 0
19766: EQUAL
19767: AND
19768: IFFALSE 19784
// SetTag ( unit , 1 ) else
19770: LD_VAR 0 4
19774: PPUSH
19775: LD_INT 1
19777: PPUSH
19778: CALL_OW 109
19782: GO 19841
// if GetLives ( unit ) <= 950 and GetLives ( unit ) > 250 and GetTag ( unit ) = 1 then
19784: LD_VAR 0 4
19788: PPUSH
19789: CALL_OW 256
19793: PUSH
19794: LD_INT 950
19796: LESSEQUAL
19797: PUSH
19798: LD_VAR 0 4
19802: PPUSH
19803: CALL_OW 256
19807: PUSH
19808: LD_INT 250
19810: GREATER
19811: AND
19812: PUSH
19813: LD_VAR 0 4
19817: PPUSH
19818: CALL_OW 110
19822: PUSH
19823: LD_INT 1
19825: EQUAL
19826: AND
19827: IFFALSE 19841
// SetTag ( unit , 0 ) ;
19829: LD_VAR 0 4
19833: PPUSH
19834: LD_INT 0
19836: PPUSH
19837: CALL_OW 109
// end ;
19841: GO 19737
19843: POP
19844: POP
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_vehicle ] ) do
19845: LD_ADDR_VAR 0 4
19849: PUSH
19850: LD_VAR 0 3
19854: PUSH
19855: LD_INT 5
19857: ARRAY
19858: PPUSH
19859: LD_INT 21
19861: PUSH
19862: LD_INT 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PPUSH
19869: CALL_OW 72
19873: PUSH
19874: FOR_IN
19875: IFFALSE 20151
// begin if GetLives ( unit ) = 1000 and GetTag ( unit ) = 3 then
19877: LD_VAR 0 4
19881: PPUSH
19882: CALL_OW 256
19886: PUSH
19887: LD_INT 1000
19889: EQUAL
19890: PUSH
19891: LD_VAR 0 4
19895: PPUSH
19896: CALL_OW 110
19900: PUSH
19901: LD_INT 3
19903: EQUAL
19904: AND
19905: IFFALSE 19919
// SetTag ( unit , 2 ) ;
19907: LD_VAR 0 4
19911: PPUSH
19912: LD_INT 2
19914: PPUSH
19915: CALL_OW 109
// if GetLives ( unit ) = 1000 and GetTag ( unit ) = 5 then
19919: LD_VAR 0 4
19923: PPUSH
19924: CALL_OW 256
19928: PUSH
19929: LD_INT 1000
19931: EQUAL
19932: PUSH
19933: LD_VAR 0 4
19937: PPUSH
19938: CALL_OW 110
19942: PUSH
19943: LD_INT 5
19945: EQUAL
19946: AND
19947: IFFALSE 19961
// SetTag ( unit , 4 ) ;
19949: LD_VAR 0 4
19953: PPUSH
19954: LD_INT 4
19956: PPUSH
19957: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 4 and GetControl ( unit ) = control_manual then
19961: LD_VAR 0 4
19965: PPUSH
19966: CALL_OW 256
19970: PUSH
19971: LD_INT 650
19973: LESSEQUAL
19974: PUSH
19975: LD_VAR 0 4
19979: PPUSH
19980: CALL_OW 110
19984: PUSH
19985: LD_INT 4
19987: EQUAL
19988: AND
19989: PUSH
19990: LD_VAR 0 4
19994: PPUSH
19995: CALL_OW 263
19999: PUSH
20000: LD_INT 1
20002: EQUAL
20003: AND
20004: IFFALSE 20018
// SetTag ( unit , 5 ) ;
20006: LD_VAR 0 4
20010: PPUSH
20011: LD_INT 5
20013: PPUSH
20014: CALL_OW 109
// if GetLives ( unit ) <= 650 and GetTag ( unit ) = 2 and GetControl ( unit ) = control_manual then
20018: LD_VAR 0 4
20022: PPUSH
20023: CALL_OW 256
20027: PUSH
20028: LD_INT 650
20030: LESSEQUAL
20031: PUSH
20032: LD_VAR 0 4
20036: PPUSH
20037: CALL_OW 110
20041: PUSH
20042: LD_INT 2
20044: EQUAL
20045: AND
20046: PUSH
20047: LD_VAR 0 4
20051: PPUSH
20052: CALL_OW 263
20056: PUSH
20057: LD_INT 1
20059: EQUAL
20060: AND
20061: IFFALSE 20075
// SetTag ( unit , 3 ) ;
20063: LD_VAR 0 4
20067: PPUSH
20068: LD_INT 3
20070: PPUSH
20071: CALL_OW 109
// if GetControl ( unit ) = control_manual then
20075: LD_VAR 0 4
20079: PPUSH
20080: CALL_OW 263
20084: PUSH
20085: LD_INT 1
20087: EQUAL
20088: IFFALSE 20122
// if ( UnitsInside ( unit ) ) then
20090: LD_VAR 0 4
20094: PPUSH
20095: CALL_OW 313
20099: IFFALSE 20122
// SetTag ( UnitsInside ( unit ) [ 1 ] , 7 ) ;
20101: LD_VAR 0 4
20105: PPUSH
20106: CALL_OW 313
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PPUSH
20115: LD_INT 7
20117: PPUSH
20118: CALL_OW 109
// if GetFuel ( unit ) < 50 then
20122: LD_VAR 0 4
20126: PPUSH
20127: CALL_OW 261
20131: PUSH
20132: LD_INT 50
20134: LESS
20135: IFFALSE 20149
// SetFuel ( unit , 100 ) ;
20137: LD_VAR 0 4
20141: PPUSH
20142: LD_INT 100
20144: PPUSH
20145: CALL_OW 240
// end ;
20149: GO 19874
20151: POP
20152: POP
// end ;
20153: LD_VAR 0 2
20157: RET
// export function SoldiersManager ( aiID ) ; var aiData , soldiers , sold , bunkers , barracks , index , depot , soldiersInsideBarracks , barrack ; begin
20158: LD_INT 0
20160: PPUSH
20161: PPUSH
20162: PPUSH
20163: PPUSH
20164: PPUSH
20165: PPUSH
20166: PPUSH
20167: PPUSH
20168: PPUSH
20169: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20170: LD_ADDR_VAR 0 3
20174: PUSH
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL 18744 0 1
20184: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 2
20192: ARRAY
20193: PUSH
20194: LD_INT 0
20196: EQUAL
20197: IFFALSE 20201
// exit ;
20199: GO 20780
// soldiersInsideBarracks = [ ] ;
20201: LD_ADDR_VAR 0 10
20205: PUSH
20206: EMPTY
20207: ST_TO_ADDR
// soldiers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
20208: LD_ADDR_VAR 0 4
20212: PUSH
20213: LD_VAR 0 3
20217: PUSH
20218: LD_INT 5
20220: ARRAY
20221: PPUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 1
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 50
20234: PUSH
20235: EMPTY
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 72
20246: ST_TO_ADDR
// bunkers = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_occupied ] ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
20247: LD_ADDR_VAR 0 6
20251: PUSH
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 6
20259: ARRAY
20260: PPUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 3
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 50
20273: PUSH
20274: EMPTY
20275: LIST
20276: PUSH
20277: LD_INT 3
20279: PUSH
20280: LD_INT 59
20282: PUSH
20283: EMPTY
20284: LIST
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 2
20292: PUSH
20293: LD_INT 30
20295: PUSH
20296: LD_INT 31
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: LD_INT 30
20305: PUSH
20306: LD_INT 32
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: LIST
20317: PUSH
20318: EMPTY
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: PPUSH
20324: CALL_OW 72
20328: ST_TO_ADDR
// barracks = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
20329: LD_ADDR_VAR 0 7
20333: PUSH
20334: LD_VAR 0 3
20338: PUSH
20339: LD_INT 6
20341: ARRAY
20342: PPUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 3
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 50
20355: PUSH
20356: EMPTY
20357: LIST
20358: PUSH
20359: LD_INT 2
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 4
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: LD_INT 30
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: LIST
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: PPUSH
20392: CALL_OW 72
20396: ST_TO_ADDR
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
20397: LD_ADDR_VAR 0 9
20401: PUSH
20402: LD_VAR 0 3
20406: PUSH
20407: LD_INT 6
20409: ARRAY
20410: PPUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 3
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 50
20423: PUSH
20424: EMPTY
20425: LIST
20426: PUSH
20427: LD_INT 2
20429: PUSH
20430: LD_INT 30
20432: PUSH
20433: LD_INT 0
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 30
20442: PUSH
20443: LD_INT 1
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: LIST
20459: PPUSH
20460: CALL_OW 72
20464: PUSH
20465: LD_INT 1
20467: ARRAY
20468: ST_TO_ADDR
// for barrack in barracks do
20469: LD_ADDR_VAR 0 11
20473: PUSH
20474: LD_VAR 0 7
20478: PUSH
20479: FOR_IN
20480: IFFALSE 20505
// soldiersInsideBarracks = soldiersInsideBarracks ^ UnitsInside ( barrack ) ;
20482: LD_ADDR_VAR 0 10
20486: PUSH
20487: LD_VAR 0 10
20491: PUSH
20492: LD_VAR 0 11
20496: PPUSH
20497: CALL_OW 313
20501: ADD
20502: ST_TO_ADDR
20503: GO 20479
20505: POP
20506: POP
// index = 1 ;
20507: LD_ADDR_VAR 0 8
20511: PUSH
20512: LD_INT 1
20514: ST_TO_ADDR
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and bunkers and depot then
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_INT 56
20522: PUSH
20523: EMPTY
20524: LIST
20525: PUSH
20526: LD_INT 3
20528: PUSH
20529: LD_INT 60
20531: PUSH
20532: EMPTY
20533: LIST
20534: PUSH
20535: EMPTY
20536: LIST
20537: LIST
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 72
20547: PUSH
20548: LD_VAR 0 6
20552: AND
20553: PUSH
20554: LD_VAR 0 9
20558: AND
20559: IFFALSE 20659
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) ^ soldiersInsideBarracks do
20561: LD_ADDR_VAR 0 5
20565: PUSH
20566: LD_VAR 0 4
20570: PPUSH
20571: LD_INT 56
20573: PUSH
20574: EMPTY
20575: LIST
20576: PUSH
20577: EMPTY
20578: LIST
20579: PPUSH
20580: CALL_OW 72
20584: PUSH
20585: LD_VAR 0 10
20589: ADD
20590: PUSH
20591: FOR_IN
20592: IFFALSE 20657
// if ( GetTag ( sold ) = 1 and index <= bunkers ) then
20594: LD_VAR 0 5
20598: PPUSH
20599: CALL_OW 110
20603: PUSH
20604: LD_INT 1
20606: EQUAL
20607: PUSH
20608: LD_VAR 0 8
20612: PUSH
20613: LD_VAR 0 6
20617: LESSEQUAL
20618: AND
20619: IFFALSE 20655
// begin ComEnterUnit ( sold , bunkers [ index ] ) ;
20621: LD_VAR 0 5
20625: PPUSH
20626: LD_VAR 0 6
20630: PUSH
20631: LD_VAR 0 8
20635: ARRAY
20636: PPUSH
20637: CALL_OW 120
// index = index + 1 ;
20641: LD_ADDR_VAR 0 8
20645: PUSH
20646: LD_VAR 0 8
20650: PUSH
20651: LD_INT 1
20653: PLUS
20654: ST_TO_ADDR
// end ;
20655: GO 20591
20657: POP
20658: POP
// if UnitFilter ( soldiers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not bunkers and barracks then
20659: LD_VAR 0 4
20663: PPUSH
20664: LD_INT 56
20666: PUSH
20667: EMPTY
20668: LIST
20669: PUSH
20670: LD_INT 3
20672: PUSH
20673: LD_INT 60
20675: PUSH
20676: EMPTY
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PPUSH
20687: CALL_OW 72
20691: PUSH
20692: LD_VAR 0 6
20696: NOT
20697: AND
20698: PUSH
20699: LD_VAR 0 7
20703: AND
20704: IFFALSE 20780
// for sold in UnitFilter ( soldiers , [ [ f_outside ] ] ) do
20706: LD_ADDR_VAR 0 5
20710: PUSH
20711: LD_VAR 0 4
20715: PPUSH
20716: LD_INT 56
20718: PUSH
20719: EMPTY
20720: LIST
20721: PUSH
20722: EMPTY
20723: LIST
20724: PPUSH
20725: CALL_OW 72
20729: PUSH
20730: FOR_IN
20731: IFFALSE 20778
// if ( GetTag ( sold ) = 1 ) then
20733: LD_VAR 0 5
20737: PPUSH
20738: CALL_OW 110
20742: PUSH
20743: LD_INT 1
20745: EQUAL
20746: IFFALSE 20776
// ComEnterUnit ( sold , barracks [ rand ( 1 , barracks ) ] ) ;
20748: LD_VAR 0 5
20752: PPUSH
20753: LD_VAR 0 7
20757: PUSH
20758: LD_INT 1
20760: PPUSH
20761: LD_VAR 0 7
20765: PPUSH
20766: CALL_OW 12
20770: ARRAY
20771: PPUSH
20772: CALL_OW 120
20776: GO 20730
20778: POP
20779: POP
// end ;
20780: LD_VAR 0 2
20784: RET
// export function MechanicsManager ( aiID ) ; var aiData , mechanics , mech , fabs ; begin
20785: LD_INT 0
20787: PPUSH
20788: PPUSH
20789: PPUSH
20790: PPUSH
20791: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL 18744 0 1
20806: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
20807: LD_VAR 0 3
20811: PUSH
20812: LD_INT 2
20814: ARRAY
20815: PUSH
20816: LD_INT 0
20818: EQUAL
20819: IFFALSE 20823
// exit ;
20821: GO 21044
// mechanics = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_mechanic ] , [ f_ok ] ] ) ;
20823: LD_ADDR_VAR 0 4
20827: PUSH
20828: LD_VAR 0 3
20832: PUSH
20833: LD_INT 5
20835: ARRAY
20836: PPUSH
20837: LD_INT 25
20839: PUSH
20840: LD_INT 3
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: PUSH
20847: LD_INT 50
20849: PUSH
20850: EMPTY
20851: LIST
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PPUSH
20857: CALL_OW 72
20861: ST_TO_ADDR
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
20862: LD_ADDR_VAR 0 6
20866: PUSH
20867: LD_VAR 0 3
20871: PUSH
20872: LD_INT 6
20874: ARRAY
20875: PPUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 3
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 50
20888: PUSH
20889: EMPTY
20890: LIST
20891: PUSH
20892: LD_INT 2
20894: PUSH
20895: LD_INT 30
20897: PUSH
20898: LD_INT 2
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 30
20907: PUSH
20908: LD_INT 3
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: PPUSH
20925: CALL_OW 72
20929: ST_TO_ADDR
// if UnitFilter ( mechanics , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and fabs then
20930: LD_VAR 0 4
20934: PPUSH
20935: LD_INT 56
20937: PUSH
20938: EMPTY
20939: LIST
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: LD_INT 60
20946: PUSH
20947: EMPTY
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PPUSH
20958: CALL_OW 72
20962: PUSH
20963: LD_VAR 0 6
20967: AND
20968: IFFALSE 21044
// for mech in UnitFilter ( mechanics , [ [ f_outside ] ] ) do
20970: LD_ADDR_VAR 0 5
20974: PUSH
20975: LD_VAR 0 4
20979: PPUSH
20980: LD_INT 56
20982: PUSH
20983: EMPTY
20984: LIST
20985: PUSH
20986: EMPTY
20987: LIST
20988: PPUSH
20989: CALL_OW 72
20993: PUSH
20994: FOR_IN
20995: IFFALSE 21042
// if ( GetTag ( mech ) = 1 ) then
20997: LD_VAR 0 5
21001: PPUSH
21002: CALL_OW 110
21006: PUSH
21007: LD_INT 1
21009: EQUAL
21010: IFFALSE 21040
// ComEnterUnit ( mech , fabs [ rand ( 1 , fabs ) ] ) ;
21012: LD_VAR 0 5
21016: PPUSH
21017: LD_VAR 0 6
21021: PUSH
21022: LD_INT 1
21024: PPUSH
21025: LD_VAR 0 6
21029: PPUSH
21030: CALL_OW 12
21034: ARRAY
21035: PPUSH
21036: CALL_OW 120
21040: GO 20994
21042: POP
21043: POP
// end ;
21044: LD_VAR 0 2
21048: RET
// export function VehiclesManager ( aiID ) ; var aiData , mechanicsInsideFab , fabs , fab , nearFab , damageVehicles , damageVeh , mehInside ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
21053: PPUSH
21054: PPUSH
21055: PPUSH
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21060: LD_ADDR_VAR 0 3
21064: PUSH
21065: LD_VAR 0 1
21069: PPUSH
21070: CALL 18744 0 1
21074: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21075: LD_VAR 0 3
21079: PUSH
21080: LD_INT 2
21082: ARRAY
21083: PUSH
21084: LD_INT 0
21086: EQUAL
21087: IFFALSE 21091
// exit ;
21089: GO 21554
// fabs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
21091: LD_ADDR_VAR 0 5
21095: PUSH
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 5
21103: ARRAY
21104: PPUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 3
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 50
21117: PUSH
21118: EMPTY
21119: LIST
21120: PUSH
21121: LD_INT 59
21123: PUSH
21124: EMPTY
21125: LIST
21126: PUSH
21127: LD_INT 2
21129: PUSH
21130: LD_INT 30
21132: PUSH
21133: LD_INT 2
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 30
21142: PUSH
21143: LD_INT 3
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: PPUSH
21161: CALL_OW 72
21165: ST_TO_ADDR
// damageVehicles = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_distxy , AreaToList ( aiData [ 10 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 10 ] , 0 ) [ 2 ] [ 1 ] , 16 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
21166: LD_ADDR_VAR 0 8
21170: PUSH
21171: LD_VAR 0 3
21175: PUSH
21176: LD_INT 5
21178: ARRAY
21179: PPUSH
21180: LD_INT 21
21182: PUSH
21183: LD_INT 2
21185: PUSH
21186: EMPTY
21187: LIST
21188: LIST
21189: PUSH
21190: LD_INT 33
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 92
21202: PUSH
21203: LD_VAR 0 3
21207: PUSH
21208: LD_INT 10
21210: ARRAY
21211: PPUSH
21212: LD_INT 0
21214: PPUSH
21215: CALL_OW 517
21219: PUSH
21220: LD_INT 1
21222: ARRAY
21223: PUSH
21224: LD_INT 1
21226: ARRAY
21227: PUSH
21228: LD_VAR 0 3
21232: PUSH
21233: LD_INT 10
21235: ARRAY
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: CALL_OW 517
21244: PUSH
21245: LD_INT 2
21247: ARRAY
21248: PUSH
21249: LD_INT 1
21251: ARRAY
21252: PUSH
21253: LD_INT 16
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: PUSH
21262: LD_INT 3
21264: PUSH
21265: LD_INT 24
21267: PUSH
21268: LD_INT 1000
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: PPUSH
21285: CALL_OW 72
21289: ST_TO_ADDR
// if not damageVehicles then
21290: LD_VAR 0 8
21294: NOT
21295: IFFALSE 21299
// exit ;
21297: GO 21554
// if fabs then
21299: LD_VAR 0 5
21303: IFFALSE 21428
// begin for damageVeh in damageVehicles do
21305: LD_ADDR_VAR 0 9
21309: PUSH
21310: LD_VAR 0 8
21314: PUSH
21315: FOR_IN
21316: IFFALSE 21426
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21318: LD_VAR 0 9
21322: PPUSH
21323: CALL_OW 110
21327: PUSH
21328: LD_INT 3
21330: EQUAL
21331: PUSH
21332: LD_VAR 0 9
21336: PPUSH
21337: CALL_OW 110
21341: PUSH
21342: LD_INT 5
21344: EQUAL
21345: OR
21346: IFFALSE 21424
// begin nearFab = NearestUnitToUnit ( fabs , damageVeh ) ;
21348: LD_ADDR_VAR 0 7
21352: PUSH
21353: LD_VAR 0 5
21357: PPUSH
21358: LD_VAR 0 9
21362: PPUSH
21363: CALL_OW 74
21367: ST_TO_ADDR
// mechanicsInsideFab = UnitsInside ( nearFab ) ;
21368: LD_ADDR_VAR 0 4
21372: PUSH
21373: LD_VAR 0 7
21377: PPUSH
21378: CALL_OW 313
21382: ST_TO_ADDR
// ComExitBuilding ( mechanicsInsideFab ) ;
21383: LD_VAR 0 4
21387: PPUSH
21388: CALL_OW 122
// AddComRepairVehicle ( UnitFilter ( mechanicsInsideFab , [ f_not , [ f_hastask ] ] ) , damageVeh ) ;
21392: LD_VAR 0 4
21396: PPUSH
21397: LD_INT 3
21399: PUSH
21400: LD_INT 60
21402: PUSH
21403: EMPTY
21404: LIST
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PPUSH
21410: CALL_OW 72
21414: PPUSH
21415: LD_VAR 0 9
21419: PPUSH
21420: CALL_OW 189
// end ;
21424: GO 21315
21426: POP
21427: POP
// end ; for damageVeh in damageVehicles do
21428: LD_ADDR_VAR 0 9
21432: PUSH
21433: LD_VAR 0 8
21437: PUSH
21438: FOR_IN
21439: IFFALSE 21552
// if GetTag ( damageVeh ) = 3 or GetTag ( damageVeh ) = 5 then
21441: LD_VAR 0 9
21445: PPUSH
21446: CALL_OW 110
21450: PUSH
21451: LD_INT 3
21453: EQUAL
21454: PUSH
21455: LD_VAR 0 9
21459: PPUSH
21460: CALL_OW 110
21464: PUSH
21465: LD_INT 5
21467: EQUAL
21468: OR
21469: IFFALSE 21550
// begin mehInside = UnitsInside ( damageVeh ) ;
21471: LD_ADDR_VAR 0 10
21475: PUSH
21476: LD_VAR 0 9
21480: PPUSH
21481: CALL_OW 313
21485: ST_TO_ADDR
// if mehInside then
21486: LD_VAR 0 10
21490: IFFALSE 21550
// begin mehInside = mehInside [ 1 ] ;
21492: LD_ADDR_VAR 0 10
21496: PUSH
21497: LD_VAR 0 10
21501: PUSH
21502: LD_INT 1
21504: ARRAY
21505: ST_TO_ADDR
// AddComExitVehicle ( mehInside ) ;
21506: LD_VAR 0 10
21510: PPUSH
21511: CALL_OW 181
// wait ( 0 0$01 ) ;
21515: LD_INT 35
21517: PPUSH
21518: CALL_OW 67
// ComRepairVehicle ( mehInside , damageVeh ) ;
21522: LD_VAR 0 10
21526: PPUSH
21527: LD_VAR 0 9
21531: PPUSH
21532: CALL_OW 129
// AddComEnterUnit ( mehInside , damageVeh ) ;
21536: LD_VAR 0 10
21540: PPUSH
21541: LD_VAR 0 9
21545: PPUSH
21546: CALL_OW 180
// end ; end ;
21550: GO 21438
21552: POP
21553: POP
// end ;
21554: LD_VAR 0 2
21558: RET
// export function DefenceManager ( aiID ) ; var aiData , defenceUnits , veh , enemyUnit , depot ; begin
21559: LD_INT 0
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
21565: PPUSH
21566: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
21567: LD_ADDR_VAR 0 3
21571: PUSH
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL 18744 0 1
21581: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
21582: LD_VAR 0 3
21586: PUSH
21587: LD_INT 2
21589: ARRAY
21590: PUSH
21591: LD_INT 0
21593: EQUAL
21594: IFFALSE 21598
// exit ;
21596: GO 22052
// depot = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ;
21598: LD_ADDR_VAR 0 7
21602: PUSH
21603: LD_VAR 0 3
21607: PUSH
21608: LD_INT 6
21610: ARRAY
21611: PPUSH
21612: LD_INT 21
21614: PUSH
21615: LD_INT 3
21617: PUSH
21618: EMPTY
21619: LIST
21620: LIST
21621: PUSH
21622: LD_INT 50
21624: PUSH
21625: EMPTY
21626: LIST
21627: PUSH
21628: LD_INT 2
21630: PUSH
21631: LD_INT 30
21633: PUSH
21634: LD_INT 0
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 30
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: LIST
21660: PPUSH
21661: CALL_OW 72
21665: PUSH
21666: LD_INT 1
21668: ARRAY
21669: ST_TO_ADDR
// if not GetDefenceVehicles ( aiData ) then
21670: LD_VAR 0 3
21674: PPUSH
21675: CALL 19452 0 1
21679: NOT
21680: IFFALSE 21684
// exit ;
21682: GO 22052
// if depot and GetDefenceVehicles ( aiData ) and not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21684: LD_VAR 0 7
21688: PUSH
21689: LD_VAR 0 3
21693: PPUSH
21694: CALL 19452 0 1
21698: AND
21699: PUSH
21700: LD_VAR 0 3
21704: PUSH
21705: LD_INT 11
21707: ARRAY
21708: PPUSH
21709: LD_INT 81
21711: PUSH
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 3
21719: ARRAY
21720: PUSH
21721: EMPTY
21722: LIST
21723: LIST
21724: PPUSH
21725: CALL_OW 70
21729: NOT
21730: AND
21731: IFFALSE 21881
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] , [ f_not , [ f_distxy , GetX ( depot ) , GetY ( depot ) , 12 ] ] ] ) do
21733: LD_ADDR_VAR 0 5
21737: PUSH
21738: LD_VAR 0 3
21742: PPUSH
21743: CALL 19452 0 1
21747: PPUSH
21748: LD_INT 50
21750: PUSH
21751: EMPTY
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 60
21759: PUSH
21760: EMPTY
21761: LIST
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: PUSH
21770: LD_INT 92
21772: PUSH
21773: LD_VAR 0 7
21777: PPUSH
21778: CALL_OW 250
21782: PUSH
21783: LD_VAR 0 7
21787: PPUSH
21788: CALL_OW 251
21792: PUSH
21793: LD_INT 12
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: PPUSH
21811: CALL_OW 72
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21879
// if GetLives ( veh ) = 1000 then
21819: LD_VAR 0 5
21823: PPUSH
21824: CALL_OW 256
21828: PUSH
21829: LD_INT 1000
21831: EQUAL
21832: IFFALSE 21865
// ComMoveXY ( veh , GetX ( depot ) , GetY ( depot ) ) else
21834: LD_VAR 0 5
21838: PPUSH
21839: LD_VAR 0 7
21843: PPUSH
21844: CALL_OW 250
21848: PPUSH
21849: LD_VAR 0 7
21853: PPUSH
21854: CALL_OW 251
21858: PPUSH
21859: CALL_OW 111
21863: GO 21877
// SetTag ( veh , 3 ) ;
21865: LD_VAR 0 5
21869: PPUSH
21870: LD_INT 3
21872: PPUSH
21873: CALL_OW 109
21877: GO 21816
21879: POP
21880: POP
// if not FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) then
21881: LD_VAR 0 3
21885: PUSH
21886: LD_INT 11
21888: ARRAY
21889: PPUSH
21890: LD_INT 81
21892: PUSH
21893: LD_VAR 0 3
21897: PUSH
21898: LD_INT 3
21900: ARRAY
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PPUSH
21906: CALL_OW 70
21910: NOT
21911: IFFALSE 21915
// exit ;
21913: GO 22052
// for veh in UnitFilter ( GetDefenceVehicles ( aiData ) , [ [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) do
21915: LD_ADDR_VAR 0 5
21919: PUSH
21920: LD_VAR 0 3
21924: PPUSH
21925: CALL 19452 0 1
21929: PPUSH
21930: LD_INT 50
21932: PUSH
21933: EMPTY
21934: LIST
21935: PUSH
21936: LD_INT 3
21938: PUSH
21939: LD_INT 60
21941: PUSH
21942: EMPTY
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: PPUSH
21953: CALL_OW 72
21957: PUSH
21958: FOR_IN
21959: IFFALSE 22050
// ComAgressiveMove ( veh , GetX ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) , GetY ( FilterUnitsInArea ( aiData [ 11 ] , [ f_enemy , aiData [ 3 ] ] ) [ 1 ] ) ) ;
21961: LD_VAR 0 5
21965: PPUSH
21966: LD_VAR 0 3
21970: PUSH
21971: LD_INT 11
21973: ARRAY
21974: PPUSH
21975: LD_INT 81
21977: PUSH
21978: LD_VAR 0 3
21982: PUSH
21983: LD_INT 3
21985: ARRAY
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PPUSH
21991: CALL_OW 70
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: CALL_OW 250
22004: PPUSH
22005: LD_VAR 0 3
22009: PUSH
22010: LD_INT 11
22012: ARRAY
22013: PPUSH
22014: LD_INT 81
22016: PUSH
22017: LD_VAR 0 3
22021: PUSH
22022: LD_INT 3
22024: ARRAY
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PPUSH
22030: CALL_OW 70
22034: PUSH
22035: LD_INT 1
22037: ARRAY
22038: PPUSH
22039: CALL_OW 251
22043: PPUSH
22044: CALL_OW 114
22048: GO 21958
22050: POP
22051: POP
// end ;
22052: LD_VAR 0 2
22056: RET
// export function AttackManager ( aiID ) ; var aiData , target1 , target2 , offensiveUnits , ofUnit ; begin
22057: LD_INT 0
22059: PPUSH
22060: PPUSH
22061: PPUSH
22062: PPUSH
22063: PPUSH
22064: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22065: LD_ADDR_VAR 0 3
22069: PUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL 18744 0 1
22079: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22080: LD_VAR 0 3
22084: PUSH
22085: LD_INT 2
22087: ARRAY
22088: PUSH
22089: LD_INT 0
22091: EQUAL
22092: IFFALSE 22096
// exit ;
22094: GO 22486
// if ( aiData [ 18 ] = 0 ) then
22096: LD_VAR 0 3
22100: PUSH
22101: LD_INT 18
22103: ARRAY
22104: PUSH
22105: LD_INT 0
22107: EQUAL
22108: IFFALSE 22112
// exit ;
22110: GO 22486
// if GetAttackVehicles ( aiData ) >= aiData [ 14 ] then
22112: LD_VAR 0 3
22116: PPUSH
22117: CALL 19562 0 1
22121: PUSH
22122: LD_VAR 0 3
22126: PUSH
22127: LD_INT 14
22129: ARRAY
22130: GREATEREQUAL
22131: IFFALSE 22486
// begin repeat wait ( 0 0$01 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// offensiveUnits = GetAttackVehicles ( aiData ) ;
22140: LD_ADDR_VAR 0 6
22144: PUSH
22145: LD_VAR 0 3
22149: PPUSH
22150: CALL 19562 0 1
22154: ST_TO_ADDR
// for ofUnit in offensiveUnits do
22155: LD_ADDR_VAR 0 7
22159: PUSH
22160: LD_VAR 0 6
22164: PUSH
22165: FOR_IN
22166: IFFALSE 22466
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , aiData [ 3 ] ] ) , ofUnit ) ;
22168: LD_ADDR_VAR 0 4
22172: PUSH
22173: LD_INT 81
22175: PUSH
22176: LD_VAR 0 3
22180: PUSH
22181: LD_INT 3
22183: ARRAY
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 69
22193: PPUSH
22194: LD_VAR 0 7
22198: PPUSH
22199: CALL_OW 74
22203: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , aiData [ 3 ] ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , ofUnit ) ;
22204: LD_ADDR_VAR 0 5
22208: PUSH
22209: LD_INT 81
22211: PUSH
22212: LD_VAR 0 3
22216: PUSH
22217: LD_INT 3
22219: ARRAY
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 2
22227: PUSH
22228: LD_INT 59
22230: PUSH
22231: EMPTY
22232: LIST
22233: PUSH
22234: LD_INT 21
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: LD_INT 21
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PPUSH
22272: LD_VAR 0 7
22276: PPUSH
22277: CALL_OW 74
22281: ST_TO_ADDR
// if GetDistUnits ( ofUnit , target1 ) + 12 < GetDistUnits ( ofUnit , target2 ) then
22282: LD_VAR 0 7
22286: PPUSH
22287: LD_VAR 0 4
22291: PPUSH
22292: CALL_OW 296
22296: PUSH
22297: LD_INT 12
22299: PLUS
22300: PUSH
22301: LD_VAR 0 7
22305: PPUSH
22306: LD_VAR 0 5
22310: PPUSH
22311: CALL_OW 296
22315: LESS
22316: IFFALSE 22392
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target1 ) , GetY ( target1 ) ) ;
22318: LD_VAR 0 7
22322: PPUSH
22323: LD_INT 50
22325: PUSH
22326: EMPTY
22327: LIST
22328: PPUSH
22329: CALL_OW 72
22333: PPUSH
22334: LD_VAR 0 4
22338: PPUSH
22339: CALL_OW 250
22343: PPUSH
22344: LD_VAR 0 4
22348: PPUSH
22349: CALL_OW 251
22353: PPUSH
22354: CALL_OW 114
// wait ( 0 0$01 ) ;
22358: LD_INT 35
22360: PPUSH
22361: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target1 ) ;
22365: LD_VAR 0 7
22369: PPUSH
22370: LD_INT 50
22372: PUSH
22373: EMPTY
22374: LIST
22375: PPUSH
22376: CALL_OW 72
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: CALL_OW 115
// end else
22390: GO 22464
// begin ComAgressiveMove ( UnitFilter ( ofUnit , [ f_ok ] ) , GetX ( target2 ) , GetY ( target2 ) ) ;
22392: LD_VAR 0 7
22396: PPUSH
22397: LD_INT 50
22399: PUSH
22400: EMPTY
22401: LIST
22402: PPUSH
22403: CALL_OW 72
22407: PPUSH
22408: LD_VAR 0 5
22412: PPUSH
22413: CALL_OW 250
22417: PPUSH
22418: LD_VAR 0 5
22422: PPUSH
22423: CALL_OW 251
22427: PPUSH
22428: CALL_OW 114
// wait ( 0 0$01 ) ;
22432: LD_INT 35
22434: PPUSH
22435: CALL_OW 67
// ComAttackUnit ( UnitFilter ( ofUnit , [ f_ok ] ) , target2 ) ;
22439: LD_VAR 0 7
22443: PPUSH
22444: LD_INT 50
22446: PUSH
22447: EMPTY
22448: LIST
22449: PPUSH
22450: CALL_OW 72
22454: PPUSH
22455: LD_VAR 0 5
22459: PPUSH
22460: CALL_OW 115
// end ; end ;
22464: GO 22165
22466: POP
22467: POP
// until not UnitFilter ( offensiveUnits , [ f_ok ] ) ;
22468: LD_VAR 0 6
22472: PPUSH
22473: LD_INT 50
22475: PUSH
22476: EMPTY
22477: LIST
22478: PPUSH
22479: CALL_OW 72
22483: NOT
22484: IFFALSE 22133
// end ; end ;
22486: LD_VAR 0 2
22490: RET
// export function CollectCrates ( aiID ) ; var aiData , cargo ; begin
22491: LD_INT 0
22493: PPUSH
22494: PPUSH
22495: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL 18744 0 1
22510: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22511: LD_VAR 0 3
22515: PUSH
22516: LD_INT 2
22518: ARRAY
22519: PUSH
22520: LD_INT 0
22522: EQUAL
22523: IFFALSE 22527
// exit ;
22525: GO 22676
// cargo = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) ;
22527: LD_ADDR_VAR 0 4
22531: PUSH
22532: LD_VAR 0 3
22536: PUSH
22537: LD_INT 5
22539: ARRAY
22540: PPUSH
22541: LD_INT 21
22543: PUSH
22544: LD_INT 2
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: PUSH
22551: LD_INT 50
22553: PUSH
22554: EMPTY
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 34
22562: PUSH
22563: LD_INT 12
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 34
22572: PUSH
22573: LD_INT 32
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 34
22582: PUSH
22583: LD_INT 51
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 72
22605: ST_TO_ADDR
// if not GetListOfCratesInArea ( aiData [ 8 ] ) or not cargo then
22606: LD_VAR 0 3
22610: PUSH
22611: LD_INT 8
22613: ARRAY
22614: PPUSH
22615: CALL_OW 435
22619: NOT
22620: PUSH
22621: LD_VAR 0 4
22625: NOT
22626: OR
22627: IFFALSE 22631
// exit ;
22629: GO 22676
// ComCollect ( cargo , GetListOfCratesInArea ( aiData [ 8 ] ) [ 1 ] , GetListOfCratesInArea ( aiData [ 8 ] ) [ 2 ] ) ;
22631: LD_VAR 0 4
22635: PPUSH
22636: LD_VAR 0 3
22640: PUSH
22641: LD_INT 8
22643: ARRAY
22644: PPUSH
22645: CALL_OW 435
22649: PUSH
22650: LD_INT 1
22652: ARRAY
22653: PPUSH
22654: LD_VAR 0 3
22658: PUSH
22659: LD_INT 8
22661: ARRAY
22662: PPUSH
22663: CALL_OW 435
22667: PUSH
22668: LD_INT 2
22670: ARRAY
22671: PPUSH
22672: CALL_OW 117
// end ;
22676: LD_VAR 0 2
22680: RET
// export function FleeToHealArea ( aiID ) ; var aiData , unit ; begin
22681: LD_INT 0
22683: PPUSH
22684: PPUSH
22685: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22686: LD_ADDR_VAR 0 3
22690: PUSH
22691: LD_VAR 0 1
22695: PPUSH
22696: CALL 18744 0 1
22700: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22701: LD_VAR 0 3
22705: PUSH
22706: LD_INT 2
22708: ARRAY
22709: PUSH
22710: LD_INT 0
22712: EQUAL
22713: IFFALSE 22717
// exit ;
22715: GO 22807
// for unit in UnitFilter ( aiData [ 5 ] , [ f_type , unit_human ] ) do
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 3
22726: PUSH
22727: LD_INT 5
22729: ARRAY
22730: PPUSH
22731: LD_INT 21
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 72
22745: PUSH
22746: FOR_IN
22747: IFFALSE 22805
// if GetTag ( unit ) = 0 and not IsInArea ( unit , aiData [ 9 ] ) then
22749: LD_VAR 0 4
22753: PPUSH
22754: CALL_OW 110
22758: PUSH
22759: LD_INT 0
22761: EQUAL
22762: PUSH
22763: LD_VAR 0 4
22767: PPUSH
22768: LD_VAR 0 3
22772: PUSH
22773: LD_INT 9
22775: ARRAY
22776: PPUSH
22777: CALL_OW 308
22781: NOT
22782: AND
22783: IFFALSE 22803
// ComMoveToArea ( unit , aiData [ 9 ] ) ;
22785: LD_VAR 0 4
22789: PPUSH
22790: LD_VAR 0 3
22794: PUSH
22795: LD_INT 9
22797: ARRAY
22798: PPUSH
22799: CALL_OW 113
22803: GO 22746
22805: POP
22806: POP
// end ;
22807: LD_VAR 0 2
22811: RET
// export function FleeToRepairArea ( aiID ) ; var aiData , veh ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22817: LD_ADDR_VAR 0 3
22821: PUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL 18744 0 1
22831: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22832: LD_VAR 0 3
22836: PUSH
22837: LD_INT 2
22839: ARRAY
22840: PUSH
22841: LD_INT 0
22843: EQUAL
22844: IFFALSE 22848
// exit ;
22846: GO 22963
// for veh in UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] ] ) do
22848: LD_ADDR_VAR 0 4
22852: PUSH
22853: LD_VAR 0 3
22857: PUSH
22858: LD_INT 5
22860: ARRAY
22861: PPUSH
22862: LD_INT 21
22864: PUSH
22865: LD_INT 2
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 50
22874: PUSH
22875: EMPTY
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PPUSH
22882: CALL_OW 72
22886: PUSH
22887: FOR_IN
22888: IFFALSE 22961
// if ( GetTag ( veh ) = 3 or GetTag ( veh ) = 5 ) and not IsInArea ( veh , aiData [ 10 ] ) then
22890: LD_VAR 0 4
22894: PPUSH
22895: CALL_OW 110
22899: PUSH
22900: LD_INT 3
22902: EQUAL
22903: PUSH
22904: LD_VAR 0 4
22908: PPUSH
22909: CALL_OW 110
22913: PUSH
22914: LD_INT 5
22916: EQUAL
22917: OR
22918: PUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: LD_VAR 0 3
22928: PUSH
22929: LD_INT 10
22931: ARRAY
22932: PPUSH
22933: CALL_OW 308
22937: NOT
22938: AND
22939: IFFALSE 22959
// ComMoveToArea ( veh , aiData [ 10 ] ) ;
22941: LD_VAR 0 4
22945: PPUSH
22946: LD_VAR 0 3
22950: PUSH
22951: LD_INT 10
22953: ARRAY
22954: PPUSH
22955: CALL_OW 113
22959: GO 22887
22961: POP
22962: POP
// end ;
22963: LD_VAR 0 2
22967: RET
// export function RepairBuildings ( aiID ) ; var aiData , engineers , cranes , crane , eng , damagedBuildings ; begin
22968: LD_INT 0
22970: PPUSH
22971: PPUSH
22972: PPUSH
22973: PPUSH
22974: PPUSH
22975: PPUSH
22976: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
22977: LD_ADDR_VAR 0 3
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL 18744 0 1
22991: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
22992: LD_VAR 0 3
22996: PUSH
22997: LD_INT 2
22999: ARRAY
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23008
// exit ;
23006: GO 23708
// engineers = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_engineer ] , [ f_ok ] ] ) ;
23008: LD_ADDR_VAR 0 4
23012: PUSH
23013: LD_VAR 0 3
23017: PUSH
23018: LD_INT 5
23020: ARRAY
23021: PPUSH
23022: LD_INT 25
23024: PUSH
23025: LD_INT 2
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 50
23034: PUSH
23035: EMPTY
23036: LIST
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PPUSH
23042: CALL_OW 72
23046: ST_TO_ADDR
// cranes = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
23047: LD_ADDR_VAR 0 5
23051: PUSH
23052: LD_VAR 0 3
23056: PUSH
23057: LD_INT 5
23059: ARRAY
23060: PPUSH
23061: LD_INT 21
23063: PUSH
23064: LD_INT 2
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: LD_INT 50
23073: PUSH
23074: EMPTY
23075: LIST
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: LD_INT 34
23082: PUSH
23083: LD_INT 13
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: LD_INT 34
23092: PUSH
23093: LD_EXP 127
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 34
23104: PUSH
23105: LD_INT 52
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: EMPTY
23119: LIST
23120: LIST
23121: LIST
23122: PPUSH
23123: CALL_OW 72
23127: ST_TO_ADDR
// damagedBuildings = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23128: LD_ADDR_VAR 0 8
23132: PUSH
23133: LD_VAR 0 3
23137: PUSH
23138: LD_INT 6
23140: ARRAY
23141: PPUSH
23142: LD_INT 21
23144: PUSH
23145: LD_INT 3
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 24
23157: PUSH
23158: LD_INT 1000
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 72
23177: ST_TO_ADDR
// if UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damagedBuildings and UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) then
23178: LD_VAR 0 4
23182: PPUSH
23183: LD_INT 56
23185: PUSH
23186: EMPTY
23187: LIST
23188: PUSH
23189: LD_INT 3
23191: PUSH
23192: LD_INT 60
23194: PUSH
23195: EMPTY
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 72
23210: PUSH
23211: LD_VAR 0 8
23215: NOT
23216: AND
23217: PUSH
23218: LD_VAR 0 3
23222: PUSH
23223: LD_INT 6
23225: ARRAY
23226: PPUSH
23227: LD_INT 21
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 50
23239: PUSH
23240: EMPTY
23241: LIST
23242: PUSH
23243: LD_INT 2
23245: PUSH
23246: LD_INT 30
23248: PUSH
23249: LD_INT 0
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 30
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PPUSH
23276: CALL_OW 72
23280: AND
23281: IFFALSE 23419
// for eng in UnitFilter ( engineers , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) do
23283: LD_ADDR_VAR 0 7
23287: PUSH
23288: LD_VAR 0 4
23292: PPUSH
23293: LD_INT 56
23295: PUSH
23296: EMPTY
23297: LIST
23298: PUSH
23299: LD_INT 3
23301: PUSH
23302: LD_INT 60
23304: PUSH
23305: EMPTY
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PPUSH
23316: CALL_OW 72
23320: PUSH
23321: FOR_IN
23322: IFFALSE 23417
// if ( GetTag ( eng ) = 1 ) then
23324: LD_VAR 0 7
23328: PPUSH
23329: CALL_OW 110
23333: PUSH
23334: LD_INT 1
23336: EQUAL
23337: IFFALSE 23415
// ComEnterUnit ( eng , UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
23339: LD_VAR 0 7
23343: PPUSH
23344: LD_VAR 0 3
23348: PUSH
23349: LD_INT 6
23351: ARRAY
23352: PPUSH
23353: LD_INT 21
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 50
23365: PUSH
23366: EMPTY
23367: LIST
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 30
23374: PUSH
23375: LD_INT 0
23377: PUSH
23378: EMPTY
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 30
23384: PUSH
23385: LD_INT 1
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: LIST
23401: PPUSH
23402: CALL_OW 72
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PPUSH
23411: CALL_OW 120
23415: GO 23321
23417: POP
23418: POP
// if engineers and damagedBuildings then
23419: LD_VAR 0 4
23423: PUSH
23424: LD_VAR 0 8
23428: AND
23429: IFFALSE 23576
// begin for eng in engineers do
23431: LD_ADDR_VAR 0 7
23435: PUSH
23436: LD_VAR 0 4
23440: PUSH
23441: FOR_IN
23442: IFFALSE 23515
// if ( GetTag ( eng ) = 1 ) then
23444: LD_VAR 0 7
23448: PPUSH
23449: CALL_OW 110
23453: PUSH
23454: LD_INT 1
23456: EQUAL
23457: IFFALSE 23513
// begin ForceResetTaskList ( eng ) ;
23459: LD_VAR 0 7
23463: PPUSH
23464: CALL 27062 0 1
// ExitUnitFromBuilding ( eng ) ;
23468: LD_VAR 0 7
23472: PPUSH
23473: CALL 27115 0 1
// AddComRepairBuilding ( UnitFilter ( eng , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23477: LD_VAR 0 7
23481: PPUSH
23482: LD_INT 3
23484: PUSH
23485: LD_INT 60
23487: PUSH
23488: EMPTY
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 72
23499: PPUSH
23500: LD_VAR 0 8
23504: PUSH
23505: LD_INT 1
23507: ARRAY
23508: PPUSH
23509: CALL_OW 190
// end ;
23513: GO 23441
23515: POP
23516: POP
// if cranes then
23517: LD_VAR 0 5
23521: IFFALSE 23576
// for crane in cranes do
23523: LD_ADDR_VAR 0 6
23527: PUSH
23528: LD_VAR 0 5
23532: PUSH
23533: FOR_IN
23534: IFFALSE 23574
// AddComRepairBuilding ( UnitFilter ( crane , [ f_not , [ f_hastask ] ] ) , damagedBuildings [ 1 ] ) ;
23536: LD_VAR 0 6
23540: PPUSH
23541: LD_INT 3
23543: PUSH
23544: LD_INT 60
23546: PUSH
23547: EMPTY
23548: LIST
23549: PUSH
23550: EMPTY
23551: LIST
23552: LIST
23553: PPUSH
23554: CALL_OW 72
23558: PPUSH
23559: LD_VAR 0 8
23563: PUSH
23564: LD_INT 1
23566: ARRAY
23567: PPUSH
23568: CALL_OW 190
23572: GO 23533
23574: POP
23575: POP
// end ; if engineers and not damagedBuildings and aiData [ 7 ] then
23576: LD_VAR 0 4
23580: PUSH
23581: LD_VAR 0 8
23585: NOT
23586: AND
23587: PUSH
23588: LD_VAR 0 3
23592: PUSH
23593: LD_INT 7
23595: ARRAY
23596: AND
23597: IFFALSE 23708
// begin for eng in engineers do
23599: LD_ADDR_VAR 0 7
23603: PUSH
23604: LD_VAR 0 4
23608: PUSH
23609: FOR_IN
23610: IFFALSE 23706
// if ( GetTag ( eng ) = 1 ) then
23612: LD_VAR 0 7
23616: PPUSH
23617: CALL_OW 110
23621: PUSH
23622: LD_INT 1
23624: EQUAL
23625: IFFALSE 23704
// ComBuild ( eng , aiData [ 7 ] [ 1 ] [ 1 ] , aiData [ 7 ] [ 1 ] [ 2 ] , aiData [ 7 ] [ 1 ] [ 3 ] , aiData [ 7 ] [ 1 ] [ 4 ] ) end ;
23627: LD_VAR 0 7
23631: PPUSH
23632: LD_VAR 0 3
23636: PUSH
23637: LD_INT 7
23639: ARRAY
23640: PUSH
23641: LD_INT 1
23643: ARRAY
23644: PUSH
23645: LD_INT 1
23647: ARRAY
23648: PPUSH
23649: LD_VAR 0 3
23653: PUSH
23654: LD_INT 7
23656: ARRAY
23657: PUSH
23658: LD_INT 1
23660: ARRAY
23661: PUSH
23662: LD_INT 2
23664: ARRAY
23665: PPUSH
23666: LD_VAR 0 3
23670: PUSH
23671: LD_INT 7
23673: ARRAY
23674: PUSH
23675: LD_INT 1
23677: ARRAY
23678: PUSH
23679: LD_INT 3
23681: ARRAY
23682: PPUSH
23683: LD_VAR 0 3
23687: PUSH
23688: LD_INT 7
23690: ARRAY
23691: PUSH
23692: LD_INT 1
23694: ARRAY
23695: PUSH
23696: LD_INT 4
23698: ARRAY
23699: PPUSH
23700: CALL_OW 145
23704: GO 23609
23706: POP
23707: POP
// end ;
23708: LD_VAR 0 2
23712: RET
// export function HealDamageUnits ( aiID ) ; var aiData , scientists , sci , damageUnits , labs ; begin
23713: LD_INT 0
23715: PPUSH
23716: PPUSH
23717: PPUSH
23718: PPUSH
23719: PPUSH
23720: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
23721: LD_ADDR_VAR 0 3
23725: PUSH
23726: LD_VAR 0 1
23730: PPUSH
23731: CALL 18744 0 1
23735: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
23736: LD_VAR 0 3
23740: PUSH
23741: LD_INT 2
23743: ARRAY
23744: PUSH
23745: LD_INT 0
23747: EQUAL
23748: IFFALSE 23752
// exit ;
23750: GO 24206
// scientists = UnitFilter ( aiData [ 5 ] , [ [ f_class , class_scientistic ] , [ f_ok ] ] ) ;
23752: LD_ADDR_VAR 0 4
23756: PUSH
23757: LD_VAR 0 3
23761: PUSH
23762: LD_INT 5
23764: ARRAY
23765: PPUSH
23766: LD_INT 25
23768: PUSH
23769: LD_INT 4
23771: PUSH
23772: EMPTY
23773: LIST
23774: LIST
23775: PUSH
23776: LD_INT 50
23778: PUSH
23779: EMPTY
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: PPUSH
23786: CALL_OW 72
23790: ST_TO_ADDR
// damageUnits = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_human ] , [ f_distxy , AreaToList ( aiData [ 9 ] , 0 ) [ 1 ] [ 1 ] , AreaToList ( aiData [ 9 ] , 0 ) [ 2 ] [ 1 ] , 6 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 3
23800: PUSH
23801: LD_INT 5
23803: ARRAY
23804: PPUSH
23805: LD_INT 21
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 92
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_INT 9
23825: ARRAY
23826: PPUSH
23827: LD_INT 0
23829: PPUSH
23830: CALL_OW 517
23834: PUSH
23835: LD_INT 1
23837: ARRAY
23838: PUSH
23839: LD_INT 1
23841: ARRAY
23842: PUSH
23843: LD_VAR 0 3
23847: PUSH
23848: LD_INT 9
23850: ARRAY
23851: PPUSH
23852: LD_INT 0
23854: PPUSH
23855: CALL_OW 517
23859: PUSH
23860: LD_INT 2
23862: ARRAY
23863: PUSH
23864: LD_INT 1
23866: ARRAY
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 24
23882: PUSH
23883: LD_INT 1000
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 72
23903: ST_TO_ADDR
// labs = UnitFilter ( aiData [ 5 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
23904: LD_ADDR_VAR 0 7
23908: PUSH
23909: LD_VAR 0 3
23913: PUSH
23914: LD_INT 5
23916: ARRAY
23917: PPUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 50
23930: PUSH
23931: EMPTY
23932: LIST
23933: PUSH
23934: LD_INT 2
23936: PUSH
23937: LD_INT 30
23939: PUSH
23940: LD_INT 6
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 30
23949: PUSH
23950: LD_INT 7
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 8
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: PUSH
23973: EMPTY
23974: LIST
23975: LIST
23976: LIST
23977: PPUSH
23978: CALL_OW 72
23982: ST_TO_ADDR
// if UnitFilter ( scientists , [ [ f_outside ] , [ f_not , [ f_hastask ] ] ] ) and not damageUnits and labs then
23983: LD_VAR 0 4
23987: PPUSH
23988: LD_INT 56
23990: PUSH
23991: EMPTY
23992: LIST
23993: PUSH
23994: LD_INT 3
23996: PUSH
23997: LD_INT 60
23999: PUSH
24000: EMPTY
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PPUSH
24011: CALL_OW 72
24015: PUSH
24016: LD_VAR 0 6
24020: NOT
24021: AND
24022: PUSH
24023: LD_VAR 0 7
24027: AND
24028: IFFALSE 24104
// for sci in UnitFilter ( scientists , [ [ f_outside ] ] ) do
24030: LD_ADDR_VAR 0 5
24034: PUSH
24035: LD_VAR 0 4
24039: PPUSH
24040: LD_INT 56
24042: PUSH
24043: EMPTY
24044: LIST
24045: PUSH
24046: EMPTY
24047: LIST
24048: PPUSH
24049: CALL_OW 72
24053: PUSH
24054: FOR_IN
24055: IFFALSE 24102
// if ( GetTag ( sci ) = 1 ) then
24057: LD_VAR 0 5
24061: PPUSH
24062: CALL_OW 110
24066: PUSH
24067: LD_INT 1
24069: EQUAL
24070: IFFALSE 24100
// ComEnterUnit ( sci , labs [ rand ( 1 , labs ) ] ) ;
24072: LD_VAR 0 5
24076: PPUSH
24077: LD_VAR 0 7
24081: PUSH
24082: LD_INT 1
24084: PPUSH
24085: LD_VAR 0 7
24089: PPUSH
24090: CALL_OW 12
24094: ARRAY
24095: PPUSH
24096: CALL_OW 120
24100: GO 24054
24102: POP
24103: POP
// if not scientists or not damageUnits then
24104: LD_VAR 0 4
24108: NOT
24109: PUSH
24110: LD_VAR 0 6
24114: NOT
24115: OR
24116: IFFALSE 24120
// exit ;
24118: GO 24206
// for sci in scientists do
24120: LD_ADDR_VAR 0 5
24124: PUSH
24125: LD_VAR 0 4
24129: PUSH
24130: FOR_IN
24131: IFFALSE 24204
// if ( GetTag ( sci ) = 1 ) then
24133: LD_VAR 0 5
24137: PPUSH
24138: CALL_OW 110
24142: PUSH
24143: LD_INT 1
24145: EQUAL
24146: IFFALSE 24202
// begin ForceResetTaskList ( sci ) ;
24148: LD_VAR 0 5
24152: PPUSH
24153: CALL 27062 0 1
// ExitUnitFromBuilding ( sci ) ;
24157: LD_VAR 0 5
24161: PPUSH
24162: CALL 27115 0 1
// AddComHeal ( UnitFilter ( sci , [ f_not , [ f_hastask ] ] ) , damageUnits [ 1 ] ) ;
24166: LD_VAR 0 5
24170: PPUSH
24171: LD_INT 3
24173: PUSH
24174: LD_INT 60
24176: PUSH
24177: EMPTY
24178: LIST
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: PPUSH
24184: CALL_OW 72
24188: PPUSH
24189: LD_VAR 0 6
24193: PUSH
24194: LD_INT 1
24196: ARRAY
24197: PPUSH
24198: CALL_OW 188
// end ;
24202: GO 24130
24204: POP
24205: POP
// end ;
24206: LD_VAR 0 2
24210: RET
// export function ProduceVehicles ( aiID ) ; var aiData , fabs , i , weapons , randWeapon ; begin
24211: LD_INT 0
24213: PPUSH
24214: PPUSH
24215: PPUSH
24216: PPUSH
24217: PPUSH
24218: PPUSH
// aiData = GetAIDataByID ( aiID ) ;
24219: LD_ADDR_VAR 0 3
24223: PUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL 18744 0 1
24233: ST_TO_ADDR
// if ( aiData [ 2 ] = 0 ) then
24234: LD_VAR 0 3
24238: PUSH
24239: LD_INT 2
24241: ARRAY
24242: PUSH
24243: LD_INT 0
24245: EQUAL
24246: IFFALSE 24250
// exit ;
24248: GO 25617
// fabs = UnitFilter ( aiData [ 6 ] , [ [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
24250: LD_ADDR_VAR 0 4
24254: PUSH
24255: LD_VAR 0 3
24259: PUSH
24260: LD_INT 6
24262: ARRAY
24263: PPUSH
24264: LD_INT 21
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 50
24276: PUSH
24277: EMPTY
24278: LIST
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 30
24285: PUSH
24286: LD_INT 2
24288: PUSH
24289: EMPTY
24290: LIST
24291: LIST
24292: PUSH
24293: LD_INT 30
24295: PUSH
24296: LD_INT 3
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: LIST
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: LIST
24312: PPUSH
24313: CALL_OW 72
24317: ST_TO_ADDR
// if not fabs then
24318: LD_VAR 0 4
24322: NOT
24323: IFFALSE 24327
// exit ;
24325: GO 25617
// wait ( aiData [ 16 ] ) ;
24327: LD_VAR 0 3
24331: PUSH
24332: LD_INT 16
24334: ARRAY
24335: PPUSH
24336: CALL_OW 67
// if aiData [ 17 ] [ 1 ] then
24340: LD_VAR 0 3
24344: PUSH
24345: LD_INT 17
24347: ARRAY
24348: PUSH
24349: LD_INT 1
24351: ARRAY
24352: IFFALSE 24524
// begin for i := 1 to aiData [ 13 ] - GetDefenceVehicles ( aiData ) do
24354: LD_ADDR_VAR 0 5
24358: PUSH
24359: DOUBLE
24360: LD_INT 1
24362: DEC
24363: ST_TO_ADDR
24364: LD_VAR 0 3
24368: PUSH
24369: LD_INT 13
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: CALL 19452 0 1
24382: MINUS
24383: PUSH
24384: FOR_TO
24385: IFFALSE 24522
// begin weapons = aiData [ 13 ] [ i ] [ 4 ] ;
24387: LD_ADDR_VAR 0 6
24391: PUSH
24392: LD_VAR 0 3
24396: PUSH
24397: LD_INT 13
24399: ARRAY
24400: PUSH
24401: LD_VAR 0 5
24405: ARRAY
24406: PUSH
24407: LD_INT 4
24409: ARRAY
24410: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
24411: LD_ADDR_VAR 0 7
24415: PUSH
24416: LD_VAR 0 6
24420: PUSH
24421: LD_INT 1
24423: PPUSH
24424: LD_VAR 0 6
24428: PPUSH
24429: CALL_OW 12
24433: ARRAY
24434: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 13 ] [ i ] [ 1 ] , aiData [ 13 ] [ i ] [ 2 ] , aiData [ 13 ] [ i ] [ 3 ] , randWeapon ) ;
24435: LD_VAR 0 4
24439: PUSH
24440: LD_INT 0
24442: PPUSH
24443: LD_VAR 0 4
24447: PPUSH
24448: CALL_OW 12
24452: ARRAY
24453: PPUSH
24454: LD_VAR 0 3
24458: PUSH
24459: LD_INT 13
24461: ARRAY
24462: PUSH
24463: LD_VAR 0 5
24467: ARRAY
24468: PUSH
24469: LD_INT 1
24471: ARRAY
24472: PPUSH
24473: LD_VAR 0 3
24477: PUSH
24478: LD_INT 13
24480: ARRAY
24481: PUSH
24482: LD_VAR 0 5
24486: ARRAY
24487: PUSH
24488: LD_INT 2
24490: ARRAY
24491: PPUSH
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 13
24499: ARRAY
24500: PUSH
24501: LD_VAR 0 5
24505: ARRAY
24506: PUSH
24507: LD_INT 3
24509: ARRAY
24510: PPUSH
24511: LD_VAR 0 7
24515: PPUSH
24516: CALL_OW 185
// end ;
24520: GO 24384
24522: POP
24523: POP
// end ; if aiData [ 17 ] [ 3 ] then
24524: LD_VAR 0 3
24528: PUSH
24529: LD_INT 17
24531: ARRAY
24532: PUSH
24533: LD_INT 3
24535: ARRAY
24536: IFFALSE 25433
// begin if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) < aiData [ 15 ] [ 1 ] then
24538: LD_INT 22
24540: PUSH
24541: LD_VAR 0 3
24545: PUSH
24546: LD_INT 3
24548: ARRAY
24549: PUSH
24550: EMPTY
24551: LIST
24552: LIST
24553: PUSH
24554: LD_INT 21
24556: PUSH
24557: LD_INT 2
24559: PUSH
24560: EMPTY
24561: LIST
24562: LIST
24563: PUSH
24564: LD_INT 2
24566: PUSH
24567: LD_INT 34
24569: PUSH
24570: LD_INT 12
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 34
24579: PUSH
24580: LD_INT 32
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: LD_INT 34
24589: PUSH
24590: LD_INT 51
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: LIST
24607: PPUSH
24608: CALL_OW 69
24612: PUSH
24613: LD_VAR 0 3
24617: PUSH
24618: LD_INT 15
24620: ARRAY
24621: PUSH
24622: LD_INT 1
24624: ARRAY
24625: LESS
24626: IFFALSE 24837
// for i := 1 to aiData [ 15 ] [ 1 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) do
24628: LD_ADDR_VAR 0 5
24632: PUSH
24633: DOUBLE
24634: LD_INT 1
24636: DEC
24637: ST_TO_ADDR
24638: LD_VAR 0 3
24642: PUSH
24643: LD_INT 15
24645: ARRAY
24646: PUSH
24647: LD_INT 1
24649: ARRAY
24650: PUSH
24651: LD_INT 22
24653: PUSH
24654: LD_VAR 0 3
24658: PUSH
24659: LD_INT 3
24661: ARRAY
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: PUSH
24667: LD_INT 21
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: LD_INT 34
24682: PUSH
24683: LD_INT 12
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: PUSH
24690: LD_INT 34
24692: PUSH
24693: LD_INT 32
24695: PUSH
24696: EMPTY
24697: LIST
24698: LIST
24699: PUSH
24700: LD_INT 34
24702: PUSH
24703: LD_INT 51
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: PUSH
24710: EMPTY
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: LIST
24720: PPUSH
24721: CALL_OW 69
24725: MINUS
24726: PUSH
24727: FOR_TO
24728: IFFALSE 24835
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_cargo_bay ] , [ ar_cargo_bay ] , [ ru_cargo_bay ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
24730: LD_VAR 0 4
24734: PUSH
24735: LD_INT 0
24737: PPUSH
24738: LD_VAR 0 4
24742: PPUSH
24743: CALL_OW 12
24747: ARRAY
24748: PPUSH
24749: LD_INT 3
24751: PUSH
24752: EMPTY
24753: LIST
24754: PUSH
24755: LD_INT 13
24757: PUSH
24758: EMPTY
24759: LIST
24760: PUSH
24761: LD_INT 22
24763: PUSH
24764: EMPTY
24765: LIST
24766: PUSH
24767: EMPTY
24768: LIST
24769: LIST
24770: LIST
24771: PUSH
24772: LD_VAR 0 3
24776: PUSH
24777: LD_INT 4
24779: ARRAY
24780: ARRAY
24781: PUSH
24782: LD_INT 1
24784: ARRAY
24785: PPUSH
24786: LD_INT 1
24788: PPUSH
24789: LD_INT 2
24791: PPUSH
24792: LD_INT 12
24794: PUSH
24795: EMPTY
24796: LIST
24797: PUSH
24798: LD_INT 32
24800: PUSH
24801: EMPTY
24802: LIST
24803: PUSH
24804: LD_INT 51
24806: PUSH
24807: EMPTY
24808: LIST
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: PUSH
24815: LD_VAR 0 3
24819: PUSH
24820: LD_INT 4
24822: ARRAY
24823: ARRAY
24824: PUSH
24825: LD_INT 1
24827: ARRAY
24828: PPUSH
24829: CALL_OW 185
24833: GO 24727
24835: POP
24836: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) < aiData [ 15 ] [ 2 ] then
24837: LD_INT 22
24839: PUSH
24840: LD_VAR 0 3
24844: PUSH
24845: LD_INT 3
24847: ARRAY
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: PUSH
24853: LD_INT 21
24855: PUSH
24856: LD_INT 2
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: PUSH
24863: LD_INT 2
24865: PUSH
24866: LD_INT 34
24868: PUSH
24869: LD_INT 13
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PUSH
24876: LD_INT 34
24878: PUSH
24879: LD_EXP 127
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PUSH
24888: LD_INT 34
24890: PUSH
24891: LD_INT 52
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PUSH
24898: EMPTY
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: PPUSH
24909: CALL_OW 69
24913: PUSH
24914: LD_VAR 0 3
24918: PUSH
24919: LD_INT 15
24921: ARRAY
24922: PUSH
24923: LD_INT 2
24925: ARRAY
24926: LESS
24927: IFFALSE 25142
// for i := 1 to aiData [ 15 ] [ 2 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , ru_crane ] ] ] ) do
24929: LD_ADDR_VAR 0 5
24933: PUSH
24934: DOUBLE
24935: LD_INT 1
24937: DEC
24938: ST_TO_ADDR
24939: LD_VAR 0 3
24943: PUSH
24944: LD_INT 15
24946: ARRAY
24947: PUSH
24948: LD_INT 2
24950: ARRAY
24951: PUSH
24952: LD_INT 22
24954: PUSH
24955: LD_VAR 0 3
24959: PUSH
24960: LD_INT 3
24962: ARRAY
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 21
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: LD_INT 2
24980: PUSH
24981: LD_INT 34
24983: PUSH
24984: LD_INT 13
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 34
24993: PUSH
24994: LD_EXP 127
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 34
25005: PUSH
25006: LD_INT 52
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: PPUSH
25024: CALL_OW 69
25028: MINUS
25029: PUSH
25030: FOR_TO
25031: IFFALSE 25140
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_medium_tracked ] , [ ar_medium_trike ] , [ ru_medium_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_remote , [ [ us_crane ] , [ ar_crane ] , [ ru_crane ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25033: LD_VAR 0 4
25037: PUSH
25038: LD_INT 0
25040: PPUSH
25041: LD_VAR 0 4
25045: PPUSH
25046: CALL_OW 12
25050: ARRAY
25051: PPUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: PUSH
25058: LD_INT 13
25060: PUSH
25061: EMPTY
25062: LIST
25063: PUSH
25064: LD_INT 22
25066: PUSH
25067: EMPTY
25068: LIST
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: LIST
25074: PUSH
25075: LD_VAR 0 3
25079: PUSH
25080: LD_INT 4
25082: ARRAY
25083: ARRAY
25084: PUSH
25085: LD_INT 1
25087: ARRAY
25088: PPUSH
25089: LD_INT 1
25091: PPUSH
25092: LD_INT 2
25094: PPUSH
25095: LD_INT 13
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: LD_EXP 127
25105: PUSH
25106: EMPTY
25107: LIST
25108: PUSH
25109: LD_INT 52
25111: PUSH
25112: EMPTY
25113: LIST
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: LIST
25119: PUSH
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 4
25127: ARRAY
25128: ARRAY
25129: PUSH
25130: LD_INT 1
25132: ARRAY
25133: PPUSH
25134: CALL_OW 185
25138: GO 25030
25140: POP
25141: POP
// if FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) < aiData [ 15 ] [ 3 ] then
25142: LD_INT 22
25144: PUSH
25145: LD_VAR 0 3
25149: PUSH
25150: LD_INT 3
25152: ARRAY
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: PUSH
25158: LD_INT 21
25160: PUSH
25161: LD_INT 2
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 2
25170: PUSH
25171: LD_INT 34
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 14
25183: PUSH
25184: EMPTY
25185: LIST
25186: PUSH
25187: LD_INT 34
25189: PUSH
25190: LD_INT 53
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: PUSH
25197: EMPTY
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: PPUSH
25208: CALL_OW 69
25212: PUSH
25213: LD_VAR 0 3
25217: PUSH
25218: LD_INT 15
25220: ARRAY
25221: PUSH
25222: LD_INT 3
25224: ARRAY
25225: LESS
25226: IFFALSE 25433
// for i := 1 to aiData [ 15 ] [ 3 ] - FilterAllUnits ( [ [ f_side , aiData [ 3 ] ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_bulldozer ] , [ us_bulldozer ] , [ f_weapon , ru_bulldozer ] ] ] ) do
25228: LD_ADDR_VAR 0 5
25232: PUSH
25233: DOUBLE
25234: LD_INT 1
25236: DEC
25237: ST_TO_ADDR
25238: LD_VAR 0 3
25242: PUSH
25243: LD_INT 15
25245: ARRAY
25246: PUSH
25247: LD_INT 3
25249: ARRAY
25250: PUSH
25251: LD_INT 22
25253: PUSH
25254: LD_VAR 0 3
25258: PUSH
25259: LD_INT 3
25261: ARRAY
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 2
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 2
25279: PUSH
25280: LD_INT 34
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: LD_INT 14
25292: PUSH
25293: EMPTY
25294: LIST
25295: PUSH
25296: LD_INT 34
25298: PUSH
25299: LD_INT 53
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: LIST
25316: PPUSH
25317: CALL_OW 69
25321: MINUS
25322: PUSH
25323: FOR_TO
25324: IFFALSE 25431
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , [ [ us_heavy_tracked ] , [ ar_medium_trike ] , [ ru_heavy_tracked ] ] [ aiData [ 4 ] ] [ 1 ] , engine_combustion , control_manual , [ [ us_bulldozer ] , [ us_bulldozer ] , [ ru_bulldozer ] ] [ aiData [ 4 ] ] [ 1 ] ) ;
25326: LD_VAR 0 4
25330: PUSH
25331: LD_INT 0
25333: PPUSH
25334: LD_VAR 0 4
25338: PPUSH
25339: CALL_OW 12
25343: ARRAY
25344: PPUSH
25345: LD_INT 4
25347: PUSH
25348: EMPTY
25349: LIST
25350: PUSH
25351: LD_INT 13
25353: PUSH
25354: EMPTY
25355: LIST
25356: PUSH
25357: LD_INT 24
25359: PUSH
25360: EMPTY
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: PUSH
25368: LD_VAR 0 3
25372: PUSH
25373: LD_INT 4
25375: ARRAY
25376: ARRAY
25377: PUSH
25378: LD_INT 1
25380: ARRAY
25381: PPUSH
25382: LD_INT 1
25384: PPUSH
25385: LD_INT 1
25387: PPUSH
25388: LD_INT 14
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: LD_INT 14
25396: PUSH
25397: EMPTY
25398: LIST
25399: PUSH
25400: LD_INT 53
25402: PUSH
25403: EMPTY
25404: LIST
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: LIST
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: LD_INT 4
25418: ARRAY
25419: ARRAY
25420: PUSH
25421: LD_INT 1
25423: ARRAY
25424: PPUSH
25425: CALL_OW 185
25429: GO 25323
25431: POP
25432: POP
// end ; if aiData [ 17 ] [ 2 ] - GetAttackVehicles ( aiData ) then
25433: LD_VAR 0 3
25437: PUSH
25438: LD_INT 17
25440: ARRAY
25441: PUSH
25442: LD_INT 2
25444: ARRAY
25445: PUSH
25446: LD_VAR 0 3
25450: PPUSH
25451: CALL 19562 0 1
25455: MINUS
25456: IFFALSE 25617
// begin for i := 1 to aiData [ 14 ] do
25458: LD_ADDR_VAR 0 5
25462: PUSH
25463: DOUBLE
25464: LD_INT 1
25466: DEC
25467: ST_TO_ADDR
25468: LD_VAR 0 3
25472: PUSH
25473: LD_INT 14
25475: ARRAY
25476: PUSH
25477: FOR_TO
25478: IFFALSE 25615
// begin weapons = aiData [ 14 ] [ i ] [ 4 ] ;
25480: LD_ADDR_VAR 0 6
25484: PUSH
25485: LD_VAR 0 3
25489: PUSH
25490: LD_INT 14
25492: ARRAY
25493: PUSH
25494: LD_VAR 0 5
25498: ARRAY
25499: PUSH
25500: LD_INT 4
25502: ARRAY
25503: ST_TO_ADDR
// randWeapon = weapons [ rand ( 1 , weapons ) ] ;
25504: LD_ADDR_VAR 0 7
25508: PUSH
25509: LD_VAR 0 6
25513: PUSH
25514: LD_INT 1
25516: PPUSH
25517: LD_VAR 0 6
25521: PPUSH
25522: CALL_OW 12
25526: ARRAY
25527: ST_TO_ADDR
// AddComConstruct ( fabs [ rand ( 0 , fabs ) ] , aiData [ 14 ] [ i ] [ 1 ] , aiData [ 14 ] [ i ] [ 2 ] , aiData [ 14 ] [ i ] [ 3 ] , randWeapon ) ;
25528: LD_VAR 0 4
25532: PUSH
25533: LD_INT 0
25535: PPUSH
25536: LD_VAR 0 4
25540: PPUSH
25541: CALL_OW 12
25545: ARRAY
25546: PPUSH
25547: LD_VAR 0 3
25551: PUSH
25552: LD_INT 14
25554: ARRAY
25555: PUSH
25556: LD_VAR 0 5
25560: ARRAY
25561: PUSH
25562: LD_INT 1
25564: ARRAY
25565: PPUSH
25566: LD_VAR 0 3
25570: PUSH
25571: LD_INT 14
25573: ARRAY
25574: PUSH
25575: LD_VAR 0 5
25579: ARRAY
25580: PUSH
25581: LD_INT 2
25583: ARRAY
25584: PPUSH
25585: LD_VAR 0 3
25589: PUSH
25590: LD_INT 14
25592: ARRAY
25593: PUSH
25594: LD_VAR 0 5
25598: ARRAY
25599: PUSH
25600: LD_INT 3
25602: ARRAY
25603: PPUSH
25604: LD_VAR 0 7
25608: PPUSH
25609: CALL_OW 185
// end ;
25613: GO 25477
25615: POP
25616: POP
// end ; end ;
25617: LD_VAR 0 2
25621: RET
// export function EscortUnit ( escortedUnit , units , path ) ; var i , unit , attackUnits , attackUnit , medics , damageUnits , crates , nearUnitsCounter , lastPathNode , nearEnemyObject , nearCrate , nearPathNode , unitsReachPathEnd ; begin
25622: LD_INT 0
25624: PPUSH
25625: PPUSH
25626: PPUSH
25627: PPUSH
25628: PPUSH
25629: PPUSH
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
25637: PPUSH
// for unit in units do
25638: LD_ADDR_VAR 0 6
25642: PUSH
25643: LD_VAR 0 2
25647: PUSH
25648: FOR_IN
25649: IFFALSE 25665
// SetTag ( unit , 0 ) ;
25651: LD_VAR 0 6
25655: PPUSH
25656: LD_INT 0
25658: PPUSH
25659: CALL_OW 109
25663: GO 25648
25665: POP
25666: POP
// lastPathNode = [ path [ path ] [ 1 ] , path [ path ] [ 2 ] ] ;
25667: LD_ADDR_VAR 0 13
25671: PUSH
25672: LD_VAR 0 3
25676: PUSH
25677: LD_VAR 0 3
25681: ARRAY
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PUSH
25687: LD_VAR 0 3
25691: PUSH
25692: LD_VAR 0 3
25696: ARRAY
25697: PUSH
25698: LD_INT 2
25700: ARRAY
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: ST_TO_ADDR
// repeat attackUnits = UnitFilter ( units , [ [ f_ok ] , [ f_or , [ f_occupied ] , [ f_class , class_soldier ] , [ f_class , class_mortar ] , [ f_type , unit_vehicle ] ] ] ) ;
25706: LD_ADDR_VAR 0 7
25710: PUSH
25711: LD_VAR 0 2
25715: PPUSH
25716: LD_INT 50
25718: PUSH
25719: EMPTY
25720: LIST
25721: PUSH
25722: LD_INT 2
25724: PUSH
25725: LD_INT 59
25727: PUSH
25728: EMPTY
25729: LIST
25730: PUSH
25731: LD_INT 25
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 25
25743: PUSH
25744: LD_INT 8
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 21
25753: PUSH
25754: LD_INT 2
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PPUSH
25772: CALL_OW 72
25776: ST_TO_ADDR
// medics = UnitFilter ( units , [ [ f_ok ] , [ f_class , class_scientistic ] ] ) ;
25777: LD_ADDR_VAR 0 9
25781: PUSH
25782: LD_VAR 0 2
25786: PPUSH
25787: LD_INT 50
25789: PUSH
25790: EMPTY
25791: LIST
25792: PUSH
25793: LD_INT 25
25795: PUSH
25796: LD_INT 4
25798: PUSH
25799: EMPTY
25800: LIST
25801: LIST
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PPUSH
25807: CALL_OW 72
25811: ST_TO_ADDR
// damageUnits = UnitFilter ( units , [ [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25812: LD_ADDR_VAR 0 10
25816: PUSH
25817: LD_VAR 0 2
25821: PPUSH
25822: LD_INT 21
25824: PUSH
25825: LD_INT 1
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 3
25834: PUSH
25835: LD_INT 24
25837: PUSH
25838: LD_INT 1000
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: PUSH
25849: EMPTY
25850: LIST
25851: LIST
25852: PPUSH
25853: CALL_OW 72
25857: ST_TO_ADDR
// crates = GetListOfCratesInArea ( AllMapArea ) ;
25858: LD_ADDR_VAR 0 11
25862: PUSH
25863: LD_INT 21
25865: PPUSH
25866: CALL_OW 435
25870: ST_TO_ADDR
// for unit in attackUnits do
25871: LD_ADDR_VAR 0 6
25875: PUSH
25876: LD_VAR 0 7
25880: PUSH
25881: FOR_IN
25882: IFFALSE 26631
// begin if path then
25884: LD_VAR 0 3
25888: IFFALSE 26620
// begin i = 1 ;
25890: LD_ADDR_VAR 0 5
25894: PUSH
25895: LD_INT 1
25897: ST_TO_ADDR
// repeat crates = GetListOfCratesInArea ( AllMapArea ) ;
25898: LD_ADDR_VAR 0 11
25902: PUSH
25903: LD_INT 21
25905: PPUSH
25906: CALL_OW 435
25910: ST_TO_ADDR
// nearEnemyObject = NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( unit ) ] ) , unit ) ;
25911: LD_ADDR_VAR 0 14
25915: PUSH
25916: LD_INT 81
25918: PUSH
25919: LD_VAR 0 6
25923: PPUSH
25924: CALL_OW 255
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 69
25937: PPUSH
25938: LD_VAR 0 6
25942: PPUSH
25943: CALL_OW 74
25947: ST_TO_ADDR
// nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
25948: LD_ADDR_VAR 0 15
25952: PUSH
25953: LD_VAR 0 11
25957: PPUSH
25958: LD_VAR 0 6
25962: PPUSH
25963: CALL_OW 250
25967: PPUSH
25968: LD_VAR 0 6
25972: PPUSH
25973: CALL_OW 251
25977: PPUSH
25978: CALL_OW 439
25982: ST_TO_ADDR
// if damageUnits and medics then
25983: LD_VAR 0 10
25987: PUSH
25988: LD_VAR 0 9
25992: AND
25993: IFFALSE 26015
// ComHeal ( medics , damageUnits [ 1 ] ) else
25995: LD_VAR 0 9
25999: PPUSH
26000: LD_VAR 0 10
26004: PUSH
26005: LD_INT 1
26007: ARRAY
26008: PPUSH
26009: CALL_OW 128
26013: GO 26058
// if medics then
26015: LD_VAR 0 9
26019: IFFALSE 26058
// ComMoveXY ( medics , GetX ( attackUnits [ 1 ] ) , GetY ( attackUnits [ 1 ] ) ) ;
26021: LD_VAR 0 9
26025: PPUSH
26026: LD_VAR 0 7
26030: PUSH
26031: LD_INT 1
26033: ARRAY
26034: PPUSH
26035: CALL_OW 250
26039: PPUSH
26040: LD_VAR 0 7
26044: PUSH
26045: LD_INT 1
26047: ARRAY
26048: PPUSH
26049: CALL_OW 251
26053: PPUSH
26054: CALL_OW 111
// if not HasTask ( unit ) then
26058: LD_VAR 0 6
26062: PPUSH
26063: CALL_OW 314
26067: NOT
26068: IFFALSE 26307
// begin nearCrate = FindNearestPoint ( crates , GetX ( unit ) , GetY ( unit ) ) ;
26070: LD_ADDR_VAR 0 15
26074: PUSH
26075: LD_VAR 0 11
26079: PPUSH
26080: LD_VAR 0 6
26084: PPUSH
26085: CALL_OW 250
26089: PPUSH
26090: LD_VAR 0 6
26094: PPUSH
26095: CALL_OW 251
26099: PPUSH
26100: CALL_OW 439
26104: ST_TO_ADDR
// if i > crates then
26105: LD_VAR 0 5
26109: PUSH
26110: LD_VAR 0 11
26114: GREATER
26115: IFFALSE 26125
// i = 1 ;
26117: LD_ADDR_VAR 0 5
26121: PUSH
26122: LD_INT 1
26124: ST_TO_ADDR
// if nearEnemyObject and nearCrate then
26125: LD_VAR 0 14
26129: PUSH
26130: LD_VAR 0 15
26134: AND
26135: IFFALSE 26250
// begin if GetDistUnitXY ( unit , GetX ( nearEnemyObject ) , GetY ( nearEnemyObject ) ) < GetDistUnitXY ( unit , nearCrate [ 1 ] , nearCrate [ 2 ] ) then
26137: LD_VAR 0 6
26141: PPUSH
26142: LD_VAR 0 14
26146: PPUSH
26147: CALL_OW 250
26151: PPUSH
26152: LD_VAR 0 14
26156: PPUSH
26157: CALL_OW 251
26161: PPUSH
26162: CALL_OW 297
26166: PUSH
26167: LD_VAR 0 6
26171: PPUSH
26172: LD_VAR 0 15
26176: PUSH
26177: LD_INT 1
26179: ARRAY
26180: PPUSH
26181: LD_VAR 0 15
26185: PUSH
26186: LD_INT 2
26188: ARRAY
26189: PPUSH
26190: CALL_OW 297
26194: LESS
26195: IFFALSE 26213
// ComAttackUnit ( attackUnits , nearEnemyObject ) else
26197: LD_VAR 0 7
26201: PPUSH
26202: LD_VAR 0 14
26206: PPUSH
26207: CALL_OW 115
26211: GO 26248
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) ;
26213: LD_VAR 0 7
26217: PPUSH
26218: LD_VAR 0 11
26222: PUSH
26223: LD_VAR 0 5
26227: ARRAY
26228: PPUSH
26229: LD_VAR 0 11
26233: PUSH
26234: LD_VAR 0 5
26238: PUSH
26239: LD_INT 1
26241: PLUS
26242: ARRAY
26243: PPUSH
26244: CALL_OW 116
// end else
26248: GO 26307
// if crates then
26250: LD_VAR 0 11
26254: IFFALSE 26293
// ComAttackPlace ( attackUnits , crates [ i ] , crates [ i + 1 ] ) else
26256: LD_VAR 0 7
26260: PPUSH
26261: LD_VAR 0 11
26265: PUSH
26266: LD_VAR 0 5
26270: ARRAY
26271: PPUSH
26272: LD_VAR 0 11
26276: PUSH
26277: LD_VAR 0 5
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: ARRAY
26286: PPUSH
26287: CALL_OW 116
26291: GO 26307
// ComAttackUnit ( attackUnits , nearEnemyObject ) ;
26293: LD_VAR 0 7
26297: PPUSH
26298: LD_VAR 0 14
26302: PPUSH
26303: CALL_OW 115
// end ; wait ( 0 0$1 ) ;
26307: LD_INT 35
26309: PPUSH
26310: CALL_OW 67
// if path then
26314: LD_VAR 0 3
26318: IFFALSE 26394
// begin nearPathNode = FindNearPathNode ( unit , path ) ;
26320: LD_ADDR_VAR 0 16
26324: PUSH
26325: LD_VAR 0 6
26329: PPUSH
26330: LD_VAR 0 3
26334: PPUSH
26335: CALL 26849 0 2
26339: ST_TO_ADDR
// ComAgressiveMove ( attackUnits , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26340: LD_VAR 0 7
26344: PPUSH
26345: LD_VAR 0 16
26349: PUSH
26350: LD_INT 1
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 16
26358: PUSH
26359: LD_INT 2
26361: ARRAY
26362: PPUSH
26363: CALL_OW 114
// ComAgressiveMove ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) ;
26367: LD_VAR 0 1
26371: PPUSH
26372: LD_VAR 0 16
26376: PUSH
26377: LD_INT 1
26379: ARRAY
26380: PPUSH
26381: LD_VAR 0 16
26385: PUSH
26386: LD_INT 2
26388: ARRAY
26389: PPUSH
26390: CALL_OW 114
// end ; i = i + 2 ;
26394: LD_ADDR_VAR 0 5
26398: PUSH
26399: LD_VAR 0 5
26403: PUSH
26404: LD_INT 2
26406: PLUS
26407: ST_TO_ADDR
// until GetDistUnitXY ( escortedUnit , nearPathNode [ 1 ] , nearPathNode [ 2 ] ) <= 6 ;
26408: LD_VAR 0 1
26412: PPUSH
26413: LD_VAR 0 16
26417: PUSH
26418: LD_INT 1
26420: ARRAY
26421: PPUSH
26422: LD_VAR 0 16
26426: PUSH
26427: LD_INT 2
26429: ARRAY
26430: PPUSH
26431: CALL_OW 297
26435: PUSH
26436: LD_INT 6
26438: LESSEQUAL
26439: IFFALSE 25898
// repeat wait ( 0 0$1 ) ;
26441: LD_INT 35
26443: PPUSH
26444: CALL_OW 67
// nearUnitsCounter = 0 ;
26448: LD_ADDR_VAR 0 12
26452: PUSH
26453: LD_INT 0
26455: ST_TO_ADDR
// for attackUnit in attackUnits do
26456: LD_ADDR_VAR 0 8
26460: PUSH
26461: LD_VAR 0 7
26465: PUSH
26466: FOR_IN
26467: IFFALSE 26505
// if GetDistUnits ( unit , escortedUnit ) <= 7 then
26469: LD_VAR 0 6
26473: PPUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 296
26483: PUSH
26484: LD_INT 7
26486: LESSEQUAL
26487: IFFALSE 26503
// nearUnitsCounter = nearUnitsCounter + 1 ;
26489: LD_ADDR_VAR 0 12
26493: PUSH
26494: LD_VAR 0 12
26498: PUSH
26499: LD_INT 1
26501: PLUS
26502: ST_TO_ADDR
26503: GO 26466
26505: POP
26506: POP
// until nearUnitsCounter = attackUnits ;
26507: LD_VAR 0 12
26511: PUSH
26512: LD_VAR 0 7
26516: EQUAL
26517: IFFALSE 26441
// for i := 1 to path do
26519: LD_ADDR_VAR 0 5
26523: PUSH
26524: DOUBLE
26525: LD_INT 1
26527: DEC
26528: ST_TO_ADDR
26529: LD_VAR 0 3
26533: PUSH
26534: FOR_TO
26535: IFFALSE 26618
// if path [ i ] [ 1 ] = nearPathNode [ 1 ] and path [ i ] [ 2 ] = nearPathNode [ 2 ] then
26537: LD_VAR 0 3
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: LD_INT 1
26550: ARRAY
26551: PUSH
26552: LD_VAR 0 16
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: EQUAL
26561: PUSH
26562: LD_VAR 0 3
26566: PUSH
26567: LD_VAR 0 5
26571: ARRAY
26572: PUSH
26573: LD_INT 2
26575: ARRAY
26576: PUSH
26577: LD_VAR 0 16
26581: PUSH
26582: LD_INT 2
26584: ARRAY
26585: EQUAL
26586: AND
26587: IFFALSE 26616
// begin path = path diff [ path [ i ] ] ;
26589: LD_ADDR_VAR 0 3
26593: PUSH
26594: LD_VAR 0 3
26598: PUSH
26599: LD_VAR 0 3
26603: PUSH
26604: LD_VAR 0 5
26608: ARRAY
26609: PUSH
26610: EMPTY
26611: LIST
26612: DIFF
26613: ST_TO_ADDR
// break ;
26614: GO 26618
// end ;
26616: GO 26534
26618: POP
26619: POP
// end ; if not path then
26620: LD_VAR 0 3
26624: NOT
26625: IFFALSE 26629
// break ;
26627: GO 26631
// end ;
26629: GO 25881
26631: POP
26632: POP
// repeat unitsReachPathEnd = 0 ;
26633: LD_ADDR_VAR 0 17
26637: PUSH
26638: LD_INT 0
26640: ST_TO_ADDR
// for attackUnit in attackUnits do
26641: LD_ADDR_VAR 0 8
26645: PUSH
26646: LD_VAR 0 7
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26790
// begin if not GetDistUnitXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) < 7 and GetTag ( attackUnit ) = 0 then
26654: LD_VAR 0 8
26658: PPUSH
26659: LD_VAR 0 13
26663: PUSH
26664: LD_INT 1
26666: ARRAY
26667: PPUSH
26668: LD_VAR 0 13
26672: PUSH
26673: LD_INT 2
26675: ARRAY
26676: PPUSH
26677: CALL_OW 297
26681: PUSH
26682: LD_INT 7
26684: LESS
26685: NOT
26686: PUSH
26687: LD_VAR 0 8
26691: PPUSH
26692: CALL_OW 110
26696: PUSH
26697: LD_INT 0
26699: EQUAL
26700: AND
26701: IFFALSE 26732
// ComMoveXY ( attackUnit , lastPathNode [ 1 ] , lastPathNode [ 2 ] ) else
26703: LD_VAR 0 8
26707: PPUSH
26708: LD_VAR 0 13
26712: PUSH
26713: LD_INT 1
26715: ARRAY
26716: PPUSH
26717: LD_VAR 0 13
26721: PUSH
26722: LD_INT 2
26724: ARRAY
26725: PPUSH
26726: CALL_OW 111
26730: GO 26759
// if GetTag ( attackUnit ) = 0 then
26732: LD_VAR 0 8
26736: PPUSH
26737: CALL_OW 110
26741: PUSH
26742: LD_INT 0
26744: EQUAL
26745: IFFALSE 26759
// SetTag ( attackUnit , 1 ) ;
26747: LD_VAR 0 8
26751: PPUSH
26752: LD_INT 1
26754: PPUSH
26755: CALL_OW 109
// if GetTag ( unit ) = 1 then
26759: LD_VAR 0 6
26763: PPUSH
26764: CALL_OW 110
26768: PUSH
26769: LD_INT 1
26771: EQUAL
26772: IFFALSE 26788
// unitsReachPathEnd = unitsReachPathEnd + 1 ;
26774: LD_ADDR_VAR 0 17
26778: PUSH
26779: LD_VAR 0 17
26783: PUSH
26784: LD_INT 1
26786: PLUS
26787: ST_TO_ADDR
// end ;
26788: GO 26651
26790: POP
26791: POP
// wait ( 0 0$1 ) ;
26792: LD_INT 35
26794: PPUSH
26795: CALL_OW 67
// until unitsReachPathEnd > attackUnits - 3 ;
26799: LD_VAR 0 17
26803: PUSH
26804: LD_VAR 0 7
26808: PUSH
26809: LD_INT 3
26811: MINUS
26812: GREATER
26813: IFFALSE 26633
// until not UnitFilter ( units , [ f_ok ] ) or IsDying ( escortedUnit ) ;
26815: LD_VAR 0 2
26819: PPUSH
26820: LD_INT 50
26822: PUSH
26823: EMPTY
26824: LIST
26825: PPUSH
26826: CALL_OW 72
26830: NOT
26831: PUSH
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 303
26841: OR
26842: IFFALSE 25706
// end ;
26844: LD_VAR 0 4
26848: RET
// function FindNearPathNode ( unit , path ) ; var i , nearPosition ; begin
26849: LD_INT 0
26851: PPUSH
26852: PPUSH
26853: PPUSH
// nearPosition = [ path [ 1 ] [ 1 ] , path [ 1 ] [ 2 ] ] ;
26854: LD_ADDR_VAR 0 5
26858: PUSH
26859: LD_VAR 0 2
26863: PUSH
26864: LD_INT 1
26866: ARRAY
26867: PUSH
26868: LD_INT 1
26870: ARRAY
26871: PUSH
26872: LD_VAR 0 2
26876: PUSH
26877: LD_INT 1
26879: ARRAY
26880: PUSH
26881: LD_INT 2
26883: ARRAY
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: ST_TO_ADDR
// for i := 2 to path do
26889: LD_ADDR_VAR 0 4
26893: PUSH
26894: DOUBLE
26895: LD_INT 2
26897: DEC
26898: ST_TO_ADDR
26899: LD_VAR 0 2
26903: PUSH
26904: FOR_TO
26905: IFFALSE 27045
// begin if GetDistUnitXY ( unit , path [ i ] [ 1 ] , path [ i ] [ 2 ] ) < GetDistUnitXY ( unit , nearPosition [ 1 ] , nearPosition [ 2 ] ) then
26907: LD_VAR 0 1
26911: PPUSH
26912: LD_VAR 0 2
26916: PUSH
26917: LD_VAR 0 4
26921: ARRAY
26922: PUSH
26923: LD_INT 1
26925: ARRAY
26926: PPUSH
26927: LD_VAR 0 2
26931: PUSH
26932: LD_VAR 0 4
26936: ARRAY
26937: PUSH
26938: LD_INT 2
26940: ARRAY
26941: PPUSH
26942: CALL_OW 297
26946: PUSH
26947: LD_VAR 0 1
26951: PPUSH
26952: LD_VAR 0 5
26956: PUSH
26957: LD_INT 1
26959: ARRAY
26960: PPUSH
26961: LD_VAR 0 5
26965: PUSH
26966: LD_INT 2
26968: ARRAY
26969: PPUSH
26970: CALL_OW 297
26974: LESS
26975: IFFALSE 27043
// begin nearPosition = Replace ( nearPosition , 1 , path [ i ] [ 1 ] ) ;
26977: LD_ADDR_VAR 0 5
26981: PUSH
26982: LD_VAR 0 5
26986: PPUSH
26987: LD_INT 1
26989: PPUSH
26990: LD_VAR 0 2
26994: PUSH
26995: LD_VAR 0 4
26999: ARRAY
27000: PUSH
27001: LD_INT 1
27003: ARRAY
27004: PPUSH
27005: CALL_OW 1
27009: ST_TO_ADDR
// nearPosition = Replace ( nearPosition , 2 , path [ i ] [ 2 ] ) ;
27010: LD_ADDR_VAR 0 5
27014: PUSH
27015: LD_VAR 0 5
27019: PPUSH
27020: LD_INT 2
27022: PPUSH
27023: LD_VAR 0 2
27027: PUSH
27028: LD_VAR 0 4
27032: ARRAY
27033: PUSH
27034: LD_INT 2
27036: ARRAY
27037: PPUSH
27038: CALL_OW 1
27042: ST_TO_ADDR
// end ; end ;
27043: GO 26904
27045: POP
27046: POP
// result = nearPosition ;
27047: LD_ADDR_VAR 0 3
27051: PUSH
27052: LD_VAR 0 5
27056: ST_TO_ADDR
// end ;
27057: LD_VAR 0 3
27061: RET
// function ForceResetTaskList ( unit ) ; begin
27062: LD_INT 0
27064: PPUSH
// if GetTaskList ( unit ) then
27065: LD_VAR 0 1
27069: PPUSH
27070: CALL_OW 437
27074: IFFALSE 27110
// if GetTaskList ( unit ) [ 1 ] [ 1 ] = e then
27076: LD_VAR 0 1
27080: PPUSH
27081: CALL_OW 437
27085: PUSH
27086: LD_INT 1
27088: ARRAY
27089: PUSH
27090: LD_INT 1
27092: ARRAY
27093: PUSH
27094: LD_STRING e
27096: EQUAL
27097: IFFALSE 27110
// SetTaskList ( unit , [ ] ) ;
27099: LD_VAR 0 1
27103: PPUSH
27104: EMPTY
27105: PPUSH
27106: CALL_OW 446
// end ;
27110: LD_VAR 0 2
27114: RET
// function ExitUnitFromBuilding ( unit ) ; begin
27115: LD_INT 0
27117: PPUSH
// if IsInUnit ( unit ) then
27118: LD_VAR 0 1
27122: PPUSH
27123: CALL_OW 310
27127: IFFALSE 27138
// ComExitBuilding ( unit ) ;
27129: LD_VAR 0 1
27133: PPUSH
27134: CALL_OW 122
// end ; end_of_file
27138: LD_VAR 0 2
27142: RET
// every 0 0$1 trigger enableCounter do
27143: LD_EXP 18
27147: IFFALSE 27184
27149: GO 27151
27151: DISABLE
// begin enable ;
27152: ENABLE
// display_strings = [ #Am01-1 , missionTimer ] ;
27153: LD_ADDR_OWVAR 47
27157: PUSH
27158: LD_STRING #Am01-1
27160: PUSH
27161: LD_EXP 19
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: ST_TO_ADDR
// missionTimer = missionTimer + 0 0$01 ;
27170: LD_ADDR_EXP 19
27174: PUSH
27175: LD_EXP 19
27179: PUSH
27180: LD_INT 35
27182: PLUS
27183: ST_TO_ADDR
// end ; end_of_file end_of_file
27184: END
// every 0 0$01 do var timer ;
27185: GO 27187
27187: DISABLE
27188: LD_INT 0
27190: PPUSH
// begin timer := 1 1$30 ;
27191: LD_ADDR_VAR 0 1
27195: PUSH
27196: LD_INT 3150
27198: ST_TO_ADDR
// repeat wait ( timer ) ;
27199: LD_VAR 0 1
27203: PPUSH
27204: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27208: LD_EXP 20
27212: PUSH
27213: LD_INT 6
27215: GREATEREQUAL
27216: PUSH
27217: LD_EXP 20
27221: PUSH
27222: LD_INT 12
27224: LESS
27225: AND
27226: IFFALSE 27242
// timer := timer + 0 0$3 ;
27228: LD_ADDR_VAR 0 1
27232: PUSH
27233: LD_VAR 0 1
27237: PUSH
27238: LD_INT 105
27240: PLUS
27241: ST_TO_ADDR
// if cratesSpawned >= 12 then
27242: LD_EXP 20
27246: PUSH
27247: LD_INT 12
27249: GREATEREQUAL
27250: IFFALSE 27266
// timer := timer + 0 0$9 ;
27252: LD_ADDR_VAR 0 1
27256: PUSH
27257: LD_VAR 0 1
27261: PUSH
27262: LD_INT 315
27264: PLUS
27265: ST_TO_ADDR
// if timer > 3 3$00 then
27266: LD_VAR 0 1
27270: PUSH
27271: LD_INT 6300
27273: GREATER
27274: IFFALSE 27284
// timer := 0 0$50 ;
27276: LD_ADDR_VAR 0 1
27280: PUSH
27281: LD_INT 1750
27283: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesSpawnArea , true ) ;
27284: LD_INT 3
27286: PPUSH
27287: LD_INT 5
27289: PPUSH
27290: CALL_OW 12
27294: PPUSH
27295: LD_INT 22
27297: PPUSH
27298: LD_INT 1
27300: PPUSH
27301: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27305: LD_ADDR_EXP 20
27309: PUSH
27310: LD_EXP 20
27314: PUSH
27315: LD_INT 1
27317: PLUS
27318: ST_TO_ADDR
// until false ;
27319: LD_INT 0
27321: IFFALSE 27199
// end ; end_of_file
27323: PPOPN 1
27325: END
// export function Nef_PrepareNature ; var i , un ; begin
27326: LD_INT 0
27328: PPUSH
27329: PPUSH
27330: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
27331: LD_ADDR_VAR 0 2
27335: PUSH
27336: DOUBLE
27337: LD_INT 1
27339: DEC
27340: ST_TO_ADDR
27341: LD_EXP 21
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: PUSH
27350: FOR_TO
27351: IFFALSE 27461
// begin uc_side = 0 ;
27353: LD_ADDR_OWVAR 20
27357: PUSH
27358: LD_INT 0
27360: ST_TO_ADDR
// uc_nation = nation_nature ;
27361: LD_ADDR_OWVAR 21
27365: PUSH
27366: LD_INT 0
27368: ST_TO_ADDR
// hc_class = class_apeman ;
27369: LD_ADDR_OWVAR 28
27373: PUSH
27374: LD_INT 12
27376: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27377: LD_ADDR_OWVAR 31
27381: PUSH
27382: LD_EXP 22
27386: PUSH
27387: LD_INT 1
27389: ARRAY
27390: PUSH
27391: LD_EXP 22
27395: PUSH
27396: LD_INT 2
27398: ARRAY
27399: PUSH
27400: LD_EXP 22
27404: PUSH
27405: LD_INT 3
27407: ARRAY
27408: PUSH
27409: LD_EXP 22
27413: PUSH
27414: LD_INT 4
27416: ARRAY
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27424: LD_ADDR_OWVAR 35
27428: PUSH
27429: LD_EXP 23
27433: ST_TO_ADDR
// un = CreateHuman ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: CALL_OW 44
27443: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27444: LD_VAR 0 3
27448: PPUSH
27449: LD_INT 23
27451: PPUSH
27452: LD_INT 0
27454: PPUSH
27455: CALL_OW 49
// end ;
27459: GO 27350
27461: POP
27462: POP
// for i := 1 to animalsAmount [ 2 ] do
27463: LD_ADDR_VAR 0 2
27467: PUSH
27468: DOUBLE
27469: LD_INT 1
27471: DEC
27472: ST_TO_ADDR
27473: LD_EXP 21
27477: PUSH
27478: LD_INT 2
27480: ARRAY
27481: PUSH
27482: FOR_TO
27483: IFFALSE 27593
// begin uc_side = 0 ;
27485: LD_ADDR_OWVAR 20
27489: PUSH
27490: LD_INT 0
27492: ST_TO_ADDR
// uc_nation = nation_nature ;
27493: LD_ADDR_OWVAR 21
27497: PUSH
27498: LD_INT 0
27500: ST_TO_ADDR
// hc_class = class_phororhacos ;
27501: LD_ADDR_OWVAR 28
27505: PUSH
27506: LD_INT 18
27508: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27509: LD_ADDR_OWVAR 31
27513: PUSH
27514: LD_EXP 22
27518: PUSH
27519: LD_INT 1
27521: ARRAY
27522: PUSH
27523: LD_EXP 22
27527: PUSH
27528: LD_INT 2
27530: ARRAY
27531: PUSH
27532: LD_EXP 22
27536: PUSH
27537: LD_INT 3
27539: ARRAY
27540: PUSH
27541: LD_EXP 22
27545: PUSH
27546: LD_INT 4
27548: ARRAY
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27556: LD_ADDR_OWVAR 35
27560: PUSH
27561: LD_EXP 23
27565: ST_TO_ADDR
// un = CreateHuman ;
27566: LD_ADDR_VAR 0 3
27570: PUSH
27571: CALL_OW 44
27575: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27576: LD_VAR 0 3
27580: PPUSH
27581: LD_INT 23
27583: PPUSH
27584: LD_INT 0
27586: PPUSH
27587: CALL_OW 49
// end ;
27591: GO 27482
27593: POP
27594: POP
// for i := 1 to animalsAmount [ 3 ] do
27595: LD_ADDR_VAR 0 2
27599: PUSH
27600: DOUBLE
27601: LD_INT 1
27603: DEC
27604: ST_TO_ADDR
27605: LD_EXP 21
27609: PUSH
27610: LD_INT 3
27612: ARRAY
27613: PUSH
27614: FOR_TO
27615: IFFALSE 27725
// begin uc_side = 0 ;
27617: LD_ADDR_OWVAR 20
27621: PUSH
27622: LD_INT 0
27624: ST_TO_ADDR
// uc_nation = nation_nature ;
27625: LD_ADDR_OWVAR 21
27629: PUSH
27630: LD_INT 0
27632: ST_TO_ADDR
// hc_class = class_tiger ;
27633: LD_ADDR_OWVAR 28
27637: PUSH
27638: LD_INT 14
27640: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27641: LD_ADDR_OWVAR 31
27645: PUSH
27646: LD_EXP 22
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PUSH
27655: LD_EXP 22
27659: PUSH
27660: LD_INT 2
27662: ARRAY
27663: PUSH
27664: LD_EXP 22
27668: PUSH
27669: LD_INT 3
27671: ARRAY
27672: PUSH
27673: LD_EXP 22
27677: PUSH
27678: LD_INT 4
27680: ARRAY
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27688: LD_ADDR_OWVAR 35
27692: PUSH
27693: LD_EXP 23
27697: ST_TO_ADDR
// un = CreateHuman ;
27698: LD_ADDR_VAR 0 3
27702: PUSH
27703: CALL_OW 44
27707: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27708: LD_VAR 0 3
27712: PPUSH
27713: LD_INT 23
27715: PPUSH
27716: LD_INT 0
27718: PPUSH
27719: CALL_OW 49
// end ;
27723: GO 27614
27725: POP
27726: POP
// for i := 1 to animalsAmount [ 4 ] do
27727: LD_ADDR_VAR 0 2
27731: PUSH
27732: DOUBLE
27733: LD_INT 1
27735: DEC
27736: ST_TO_ADDR
27737: LD_EXP 21
27741: PUSH
27742: LD_INT 4
27744: ARRAY
27745: PUSH
27746: FOR_TO
27747: IFFALSE 27857
// begin uc_side = 0 ;
27749: LD_ADDR_OWVAR 20
27753: PUSH
27754: LD_INT 0
27756: ST_TO_ADDR
// uc_nation = nation_nature ;
27757: LD_ADDR_OWVAR 21
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// hc_class = 21 ;
27765: LD_ADDR_OWVAR 28
27769: PUSH
27770: LD_INT 21
27772: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
27773: LD_ADDR_OWVAR 31
27777: PUSH
27778: LD_EXP 22
27782: PUSH
27783: LD_INT 1
27785: ARRAY
27786: PUSH
27787: LD_EXP 22
27791: PUSH
27792: LD_INT 2
27794: ARRAY
27795: PUSH
27796: LD_EXP 22
27800: PUSH
27801: LD_INT 3
27803: ARRAY
27804: PUSH
27805: LD_EXP 22
27809: PUSH
27810: LD_INT 4
27812: ARRAY
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
27820: LD_ADDR_OWVAR 35
27824: PUSH
27825: LD_EXP 23
27829: ST_TO_ADDR
// un = CreateHuman ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: CALL_OW 44
27839: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27840: LD_VAR 0 3
27844: PPUSH
27845: LD_INT 23
27847: PPUSH
27848: LD_INT 0
27850: PPUSH
27851: CALL_OW 49
// end ;
27855: GO 27746
27857: POP
27858: POP
// for i := 1 to animalsAmount [ 5 ] do
27859: LD_ADDR_VAR 0 2
27863: PUSH
27864: DOUBLE
27865: LD_INT 1
27867: DEC
27868: ST_TO_ADDR
27869: LD_EXP 21
27873: PUSH
27874: LD_INT 5
27876: ARRAY
27877: PUSH
27878: FOR_TO
27879: IFFALSE 27940
// begin uc_side = 0 ;
27881: LD_ADDR_OWVAR 20
27885: PUSH
27886: LD_INT 0
27888: ST_TO_ADDR
// uc_nation = nation_nature ;
27889: LD_ADDR_OWVAR 21
27893: PUSH
27894: LD_INT 0
27896: ST_TO_ADDR
// vc_chassis := 31 ;
27897: LD_ADDR_OWVAR 37
27901: PUSH
27902: LD_INT 31
27904: ST_TO_ADDR
// vc_control := control_rider ;
27905: LD_ADDR_OWVAR 38
27909: PUSH
27910: LD_INT 4
27912: ST_TO_ADDR
// un := CreateVehicle ;
27913: LD_ADDR_VAR 0 3
27917: PUSH
27918: CALL_OW 45
27922: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
27923: LD_VAR 0 3
27927: PPUSH
27928: LD_INT 23
27930: PPUSH
27931: LD_INT 0
27933: PPUSH
27934: CALL_OW 49
// end ;
27938: GO 27878
27940: POP
27941: POP
// end ; end_of_file
27942: LD_VAR 0 1
27946: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27947: LD_INT 0
27949: PPUSH
// if p2 = 100 then
27950: LD_VAR 0 2
27954: PUSH
27955: LD_INT 100
27957: EQUAL
27958: IFFALSE 28961
// begin if not StreamModeActive then
27960: LD_EXP 63
27964: NOT
27965: IFFALSE 27975
// StreamModeActive := true ;
27967: LD_ADDR_EXP 63
27971: PUSH
27972: LD_INT 1
27974: ST_TO_ADDR
// if p3 = 0 then
27975: LD_VAR 0 3
27979: PUSH
27980: LD_INT 0
27982: EQUAL
27983: IFFALSE 27989
// InitStreamMode ;
27985: CALL 29121 0 0
// if p3 = 1 then
27989: LD_VAR 0 3
27993: PUSH
27994: LD_INT 1
27996: EQUAL
27997: IFFALSE 28007
// sRocket := true ;
27999: LD_ADDR_EXP 68
28003: PUSH
28004: LD_INT 1
28006: ST_TO_ADDR
// if p3 = 2 then
28007: LD_VAR 0 3
28011: PUSH
28012: LD_INT 2
28014: EQUAL
28015: IFFALSE 28025
// sSpeed := true ;
28017: LD_ADDR_EXP 67
28021: PUSH
28022: LD_INT 1
28024: ST_TO_ADDR
// if p3 = 3 then
28025: LD_VAR 0 3
28029: PUSH
28030: LD_INT 3
28032: EQUAL
28033: IFFALSE 28043
// sEngine := true ;
28035: LD_ADDR_EXP 69
28039: PUSH
28040: LD_INT 1
28042: ST_TO_ADDR
// if p3 = 4 then
28043: LD_VAR 0 3
28047: PUSH
28048: LD_INT 4
28050: EQUAL
28051: IFFALSE 28061
// sSpec := true ;
28053: LD_ADDR_EXP 66
28057: PUSH
28058: LD_INT 1
28060: ST_TO_ADDR
// if p3 = 5 then
28061: LD_VAR 0 3
28065: PUSH
28066: LD_INT 5
28068: EQUAL
28069: IFFALSE 28079
// sLevel := true ;
28071: LD_ADDR_EXP 70
28075: PUSH
28076: LD_INT 1
28078: ST_TO_ADDR
// if p3 = 6 then
28079: LD_VAR 0 3
28083: PUSH
28084: LD_INT 6
28086: EQUAL
28087: IFFALSE 28097
// sArmoury := true ;
28089: LD_ADDR_EXP 71
28093: PUSH
28094: LD_INT 1
28096: ST_TO_ADDR
// if p3 = 7 then
28097: LD_VAR 0 3
28101: PUSH
28102: LD_INT 7
28104: EQUAL
28105: IFFALSE 28115
// sRadar := true ;
28107: LD_ADDR_EXP 72
28111: PUSH
28112: LD_INT 1
28114: ST_TO_ADDR
// if p3 = 8 then
28115: LD_VAR 0 3
28119: PUSH
28120: LD_INT 8
28122: EQUAL
28123: IFFALSE 28133
// sBunker := true ;
28125: LD_ADDR_EXP 73
28129: PUSH
28130: LD_INT 1
28132: ST_TO_ADDR
// if p3 = 9 then
28133: LD_VAR 0 3
28137: PUSH
28138: LD_INT 9
28140: EQUAL
28141: IFFALSE 28151
// sHack := true ;
28143: LD_ADDR_EXP 74
28147: PUSH
28148: LD_INT 1
28150: ST_TO_ADDR
// if p3 = 10 then
28151: LD_VAR 0 3
28155: PUSH
28156: LD_INT 10
28158: EQUAL
28159: IFFALSE 28169
// sFire := true ;
28161: LD_ADDR_EXP 75
28165: PUSH
28166: LD_INT 1
28168: ST_TO_ADDR
// if p3 = 11 then
28169: LD_VAR 0 3
28173: PUSH
28174: LD_INT 11
28176: EQUAL
28177: IFFALSE 28187
// sRefresh := true ;
28179: LD_ADDR_EXP 76
28183: PUSH
28184: LD_INT 1
28186: ST_TO_ADDR
// if p3 = 12 then
28187: LD_VAR 0 3
28191: PUSH
28192: LD_INT 12
28194: EQUAL
28195: IFFALSE 28205
// sExp := true ;
28197: LD_ADDR_EXP 77
28201: PUSH
28202: LD_INT 1
28204: ST_TO_ADDR
// if p3 = 13 then
28205: LD_VAR 0 3
28209: PUSH
28210: LD_INT 13
28212: EQUAL
28213: IFFALSE 28223
// sDepot := true ;
28215: LD_ADDR_EXP 78
28219: PUSH
28220: LD_INT 1
28222: ST_TO_ADDR
// if p3 = 14 then
28223: LD_VAR 0 3
28227: PUSH
28228: LD_INT 14
28230: EQUAL
28231: IFFALSE 28241
// sFlag := true ;
28233: LD_ADDR_EXP 79
28237: PUSH
28238: LD_INT 1
28240: ST_TO_ADDR
// if p3 = 15 then
28241: LD_VAR 0 3
28245: PUSH
28246: LD_INT 15
28248: EQUAL
28249: IFFALSE 28259
// sKamikadze := true ;
28251: LD_ADDR_EXP 87
28255: PUSH
28256: LD_INT 1
28258: ST_TO_ADDR
// if p3 = 16 then
28259: LD_VAR 0 3
28263: PUSH
28264: LD_INT 16
28266: EQUAL
28267: IFFALSE 28277
// sTroll := true ;
28269: LD_ADDR_EXP 88
28273: PUSH
28274: LD_INT 1
28276: ST_TO_ADDR
// if p3 = 17 then
28277: LD_VAR 0 3
28281: PUSH
28282: LD_INT 17
28284: EQUAL
28285: IFFALSE 28295
// sSlow := true ;
28287: LD_ADDR_EXP 89
28291: PUSH
28292: LD_INT 1
28294: ST_TO_ADDR
// if p3 = 18 then
28295: LD_VAR 0 3
28299: PUSH
28300: LD_INT 18
28302: EQUAL
28303: IFFALSE 28313
// sLack := true ;
28305: LD_ADDR_EXP 90
28309: PUSH
28310: LD_INT 1
28312: ST_TO_ADDR
// if p3 = 19 then
28313: LD_VAR 0 3
28317: PUSH
28318: LD_INT 19
28320: EQUAL
28321: IFFALSE 28331
// sTank := true ;
28323: LD_ADDR_EXP 92
28327: PUSH
28328: LD_INT 1
28330: ST_TO_ADDR
// if p3 = 20 then
28331: LD_VAR 0 3
28335: PUSH
28336: LD_INT 20
28338: EQUAL
28339: IFFALSE 28349
// sRemote := true ;
28341: LD_ADDR_EXP 93
28345: PUSH
28346: LD_INT 1
28348: ST_TO_ADDR
// if p3 = 21 then
28349: LD_VAR 0 3
28353: PUSH
28354: LD_INT 21
28356: EQUAL
28357: IFFALSE 28367
// sPowell := true ;
28359: LD_ADDR_EXP 94
28363: PUSH
28364: LD_INT 1
28366: ST_TO_ADDR
// if p3 = 22 then
28367: LD_VAR 0 3
28371: PUSH
28372: LD_INT 22
28374: EQUAL
28375: IFFALSE 28385
// sTeleport := true ;
28377: LD_ADDR_EXP 97
28381: PUSH
28382: LD_INT 1
28384: ST_TO_ADDR
// if p3 = 23 then
28385: LD_VAR 0 3
28389: PUSH
28390: LD_INT 23
28392: EQUAL
28393: IFFALSE 28403
// sOilTower := true ;
28395: LD_ADDR_EXP 99
28399: PUSH
28400: LD_INT 1
28402: ST_TO_ADDR
// if p3 = 24 then
28403: LD_VAR 0 3
28407: PUSH
28408: LD_INT 24
28410: EQUAL
28411: IFFALSE 28421
// sShovel := true ;
28413: LD_ADDR_EXP 100
28417: PUSH
28418: LD_INT 1
28420: ST_TO_ADDR
// if p3 = 25 then
28421: LD_VAR 0 3
28425: PUSH
28426: LD_INT 25
28428: EQUAL
28429: IFFALSE 28439
// sSheik := true ;
28431: LD_ADDR_EXP 101
28435: PUSH
28436: LD_INT 1
28438: ST_TO_ADDR
// if p3 = 26 then
28439: LD_VAR 0 3
28443: PUSH
28444: LD_INT 26
28446: EQUAL
28447: IFFALSE 28457
// sEarthquake := true ;
28449: LD_ADDR_EXP 103
28453: PUSH
28454: LD_INT 1
28456: ST_TO_ADDR
// if p3 = 27 then
28457: LD_VAR 0 3
28461: PUSH
28462: LD_INT 27
28464: EQUAL
28465: IFFALSE 28475
// sAI := true ;
28467: LD_ADDR_EXP 104
28471: PUSH
28472: LD_INT 1
28474: ST_TO_ADDR
// if p3 = 28 then
28475: LD_VAR 0 3
28479: PUSH
28480: LD_INT 28
28482: EQUAL
28483: IFFALSE 28493
// sCargo := true ;
28485: LD_ADDR_EXP 107
28489: PUSH
28490: LD_INT 1
28492: ST_TO_ADDR
// if p3 = 29 then
28493: LD_VAR 0 3
28497: PUSH
28498: LD_INT 29
28500: EQUAL
28501: IFFALSE 28511
// sDLaser := true ;
28503: LD_ADDR_EXP 108
28507: PUSH
28508: LD_INT 1
28510: ST_TO_ADDR
// if p3 = 30 then
28511: LD_VAR 0 3
28515: PUSH
28516: LD_INT 30
28518: EQUAL
28519: IFFALSE 28529
// sExchange := true ;
28521: LD_ADDR_EXP 109
28525: PUSH
28526: LD_INT 1
28528: ST_TO_ADDR
// if p3 = 31 then
28529: LD_VAR 0 3
28533: PUSH
28534: LD_INT 31
28536: EQUAL
28537: IFFALSE 28547
// sFac := true ;
28539: LD_ADDR_EXP 110
28543: PUSH
28544: LD_INT 1
28546: ST_TO_ADDR
// if p3 = 32 then
28547: LD_VAR 0 3
28551: PUSH
28552: LD_INT 32
28554: EQUAL
28555: IFFALSE 28565
// sPower := true ;
28557: LD_ADDR_EXP 111
28561: PUSH
28562: LD_INT 1
28564: ST_TO_ADDR
// if p3 = 33 then
28565: LD_VAR 0 3
28569: PUSH
28570: LD_INT 33
28572: EQUAL
28573: IFFALSE 28583
// sRandom := true ;
28575: LD_ADDR_EXP 112
28579: PUSH
28580: LD_INT 1
28582: ST_TO_ADDR
// if p3 = 34 then
28583: LD_VAR 0 3
28587: PUSH
28588: LD_INT 34
28590: EQUAL
28591: IFFALSE 28601
// sShield := true ;
28593: LD_ADDR_EXP 113
28597: PUSH
28598: LD_INT 1
28600: ST_TO_ADDR
// if p3 = 35 then
28601: LD_VAR 0 3
28605: PUSH
28606: LD_INT 35
28608: EQUAL
28609: IFFALSE 28619
// sTime := true ;
28611: LD_ADDR_EXP 114
28615: PUSH
28616: LD_INT 1
28618: ST_TO_ADDR
// if p3 = 36 then
28619: LD_VAR 0 3
28623: PUSH
28624: LD_INT 36
28626: EQUAL
28627: IFFALSE 28637
// sTools := true ;
28629: LD_ADDR_EXP 115
28633: PUSH
28634: LD_INT 1
28636: ST_TO_ADDR
// if p3 = 101 then
28637: LD_VAR 0 3
28641: PUSH
28642: LD_INT 101
28644: EQUAL
28645: IFFALSE 28655
// sSold := true ;
28647: LD_ADDR_EXP 80
28651: PUSH
28652: LD_INT 1
28654: ST_TO_ADDR
// if p3 = 102 then
28655: LD_VAR 0 3
28659: PUSH
28660: LD_INT 102
28662: EQUAL
28663: IFFALSE 28673
// sDiff := true ;
28665: LD_ADDR_EXP 81
28669: PUSH
28670: LD_INT 1
28672: ST_TO_ADDR
// if p3 = 103 then
28673: LD_VAR 0 3
28677: PUSH
28678: LD_INT 103
28680: EQUAL
28681: IFFALSE 28691
// sFog := true ;
28683: LD_ADDR_EXP 84
28687: PUSH
28688: LD_INT 1
28690: ST_TO_ADDR
// if p3 = 104 then
28691: LD_VAR 0 3
28695: PUSH
28696: LD_INT 104
28698: EQUAL
28699: IFFALSE 28709
// sReset := true ;
28701: LD_ADDR_EXP 85
28705: PUSH
28706: LD_INT 1
28708: ST_TO_ADDR
// if p3 = 105 then
28709: LD_VAR 0 3
28713: PUSH
28714: LD_INT 105
28716: EQUAL
28717: IFFALSE 28727
// sSun := true ;
28719: LD_ADDR_EXP 86
28723: PUSH
28724: LD_INT 1
28726: ST_TO_ADDR
// if p3 = 106 then
28727: LD_VAR 0 3
28731: PUSH
28732: LD_INT 106
28734: EQUAL
28735: IFFALSE 28745
// sTiger := true ;
28737: LD_ADDR_EXP 82
28741: PUSH
28742: LD_INT 1
28744: ST_TO_ADDR
// if p3 = 107 then
28745: LD_VAR 0 3
28749: PUSH
28750: LD_INT 107
28752: EQUAL
28753: IFFALSE 28763
// sBomb := true ;
28755: LD_ADDR_EXP 83
28759: PUSH
28760: LD_INT 1
28762: ST_TO_ADDR
// if p3 = 108 then
28763: LD_VAR 0 3
28767: PUSH
28768: LD_INT 108
28770: EQUAL
28771: IFFALSE 28781
// sWound := true ;
28773: LD_ADDR_EXP 91
28777: PUSH
28778: LD_INT 1
28780: ST_TO_ADDR
// if p3 = 109 then
28781: LD_VAR 0 3
28785: PUSH
28786: LD_INT 109
28788: EQUAL
28789: IFFALSE 28799
// sBetray := true ;
28791: LD_ADDR_EXP 95
28795: PUSH
28796: LD_INT 1
28798: ST_TO_ADDR
// if p3 = 110 then
28799: LD_VAR 0 3
28803: PUSH
28804: LD_INT 110
28806: EQUAL
28807: IFFALSE 28817
// sContamin := true ;
28809: LD_ADDR_EXP 96
28813: PUSH
28814: LD_INT 1
28816: ST_TO_ADDR
// if p3 = 111 then
28817: LD_VAR 0 3
28821: PUSH
28822: LD_INT 111
28824: EQUAL
28825: IFFALSE 28835
// sOil := true ;
28827: LD_ADDR_EXP 98
28831: PUSH
28832: LD_INT 1
28834: ST_TO_ADDR
// if p3 = 112 then
28835: LD_VAR 0 3
28839: PUSH
28840: LD_INT 112
28842: EQUAL
28843: IFFALSE 28853
// sStu := true ;
28845: LD_ADDR_EXP 102
28849: PUSH
28850: LD_INT 1
28852: ST_TO_ADDR
// if p3 = 113 then
28853: LD_VAR 0 3
28857: PUSH
28858: LD_INT 113
28860: EQUAL
28861: IFFALSE 28871
// sBazooka := true ;
28863: LD_ADDR_EXP 105
28867: PUSH
28868: LD_INT 1
28870: ST_TO_ADDR
// if p3 = 114 then
28871: LD_VAR 0 3
28875: PUSH
28876: LD_INT 114
28878: EQUAL
28879: IFFALSE 28889
// sMortar := true ;
28881: LD_ADDR_EXP 106
28885: PUSH
28886: LD_INT 1
28888: ST_TO_ADDR
// if p3 = 115 then
28889: LD_VAR 0 3
28893: PUSH
28894: LD_INT 115
28896: EQUAL
28897: IFFALSE 28907
// sRanger := true ;
28899: LD_ADDR_EXP 116
28903: PUSH
28904: LD_INT 1
28906: ST_TO_ADDR
// if p3 = 116 then
28907: LD_VAR 0 3
28911: PUSH
28912: LD_INT 116
28914: EQUAL
28915: IFFALSE 28925
// sComputer := true ;
28917: LD_ADDR_EXP 117
28921: PUSH
28922: LD_INT 1
28924: ST_TO_ADDR
// if p3 = 117 then
28925: LD_VAR 0 3
28929: PUSH
28930: LD_INT 117
28932: EQUAL
28933: IFFALSE 28943
// s30 := true ;
28935: LD_ADDR_EXP 118
28939: PUSH
28940: LD_INT 1
28942: ST_TO_ADDR
// if p3 = 118 then
28943: LD_VAR 0 3
28947: PUSH
28948: LD_INT 118
28950: EQUAL
28951: IFFALSE 28961
// s60 := true ;
28953: LD_ADDR_EXP 119
28957: PUSH
28958: LD_INT 1
28960: ST_TO_ADDR
// end ; if p2 = 101 then
28961: LD_VAR 0 2
28965: PUSH
28966: LD_INT 101
28968: EQUAL
28969: IFFALSE 29097
// begin case p3 of 1 :
28971: LD_VAR 0 3
28975: PUSH
28976: LD_INT 1
28978: DOUBLE
28979: EQUAL
28980: IFTRUE 28984
28982: GO 28991
28984: POP
// hHackUnlimitedResources ; 2 :
28985: CALL 40693 0 0
28989: GO 29097
28991: LD_INT 2
28993: DOUBLE
28994: EQUAL
28995: IFTRUE 28999
28997: GO 29006
28999: POP
// hHackSetLevel10 ; 3 :
29000: CALL 40826 0 0
29004: GO 29097
29006: LD_INT 3
29008: DOUBLE
29009: EQUAL
29010: IFTRUE 29014
29012: GO 29021
29014: POP
// hHackSetLevel10YourUnits ; 4 :
29015: CALL 40911 0 0
29019: GO 29097
29021: LD_INT 4
29023: DOUBLE
29024: EQUAL
29025: IFTRUE 29029
29027: GO 29036
29029: POP
// hHackInvincible ; 5 :
29030: CALL 41359 0 0
29034: GO 29097
29036: LD_INT 5
29038: DOUBLE
29039: EQUAL
29040: IFTRUE 29044
29042: GO 29051
29044: POP
// hHackInvisible ; 6 :
29045: CALL 41470 0 0
29049: GO 29097
29051: LD_INT 6
29053: DOUBLE
29054: EQUAL
29055: IFTRUE 29059
29057: GO 29066
29059: POP
// hHackChangeYourSide ; 7 :
29060: CALL 41527 0 0
29064: GO 29097
29066: LD_INT 7
29068: DOUBLE
29069: EQUAL
29070: IFTRUE 29074
29072: GO 29081
29074: POP
// hHackChangeUnitSide ; 8 :
29075: CALL 41569 0 0
29079: GO 29097
29081: LD_INT 8
29083: DOUBLE
29084: EQUAL
29085: IFTRUE 29089
29087: GO 29096
29089: POP
// hHackFog ; end ;
29090: CALL 41670 0 0
29094: GO 29097
29096: POP
// end ; end ;
29097: LD_VAR 0 7
29101: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
29102: GO 29104
29104: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29105: LD_STRING initStreamRollete();
29107: PPUSH
29108: CALL_OW 559
// InitStreamMode ;
29112: CALL 29121 0 0
// DefineStreamItems ( ) ;
29116: CALL 29585 0 0
// end ;
29120: END
// function InitStreamMode ; begin
29121: LD_INT 0
29123: PPUSH
// streamModeActive := false ;
29124: LD_ADDR_EXP 63
29128: PUSH
29129: LD_INT 0
29131: ST_TO_ADDR
// normalCounter := 36 ;
29132: LD_ADDR_EXP 64
29136: PUSH
29137: LD_INT 36
29139: ST_TO_ADDR
// hardcoreCounter := 16 ;
29140: LD_ADDR_EXP 65
29144: PUSH
29145: LD_INT 16
29147: ST_TO_ADDR
// sRocket := false ;
29148: LD_ADDR_EXP 68
29152: PUSH
29153: LD_INT 0
29155: ST_TO_ADDR
// sSpeed := false ;
29156: LD_ADDR_EXP 67
29160: PUSH
29161: LD_INT 0
29163: ST_TO_ADDR
// sEngine := false ;
29164: LD_ADDR_EXP 69
29168: PUSH
29169: LD_INT 0
29171: ST_TO_ADDR
// sSpec := false ;
29172: LD_ADDR_EXP 66
29176: PUSH
29177: LD_INT 0
29179: ST_TO_ADDR
// sLevel := false ;
29180: LD_ADDR_EXP 70
29184: PUSH
29185: LD_INT 0
29187: ST_TO_ADDR
// sArmoury := false ;
29188: LD_ADDR_EXP 71
29192: PUSH
29193: LD_INT 0
29195: ST_TO_ADDR
// sRadar := false ;
29196: LD_ADDR_EXP 72
29200: PUSH
29201: LD_INT 0
29203: ST_TO_ADDR
// sBunker := false ;
29204: LD_ADDR_EXP 73
29208: PUSH
29209: LD_INT 0
29211: ST_TO_ADDR
// sHack := false ;
29212: LD_ADDR_EXP 74
29216: PUSH
29217: LD_INT 0
29219: ST_TO_ADDR
// sFire := false ;
29220: LD_ADDR_EXP 75
29224: PUSH
29225: LD_INT 0
29227: ST_TO_ADDR
// sRefresh := false ;
29228: LD_ADDR_EXP 76
29232: PUSH
29233: LD_INT 0
29235: ST_TO_ADDR
// sExp := false ;
29236: LD_ADDR_EXP 77
29240: PUSH
29241: LD_INT 0
29243: ST_TO_ADDR
// sDepot := false ;
29244: LD_ADDR_EXP 78
29248: PUSH
29249: LD_INT 0
29251: ST_TO_ADDR
// sFlag := false ;
29252: LD_ADDR_EXP 79
29256: PUSH
29257: LD_INT 0
29259: ST_TO_ADDR
// sKamikadze := false ;
29260: LD_ADDR_EXP 87
29264: PUSH
29265: LD_INT 0
29267: ST_TO_ADDR
// sTroll := false ;
29268: LD_ADDR_EXP 88
29272: PUSH
29273: LD_INT 0
29275: ST_TO_ADDR
// sSlow := false ;
29276: LD_ADDR_EXP 89
29280: PUSH
29281: LD_INT 0
29283: ST_TO_ADDR
// sLack := false ;
29284: LD_ADDR_EXP 90
29288: PUSH
29289: LD_INT 0
29291: ST_TO_ADDR
// sTank := false ;
29292: LD_ADDR_EXP 92
29296: PUSH
29297: LD_INT 0
29299: ST_TO_ADDR
// sRemote := false ;
29300: LD_ADDR_EXP 93
29304: PUSH
29305: LD_INT 0
29307: ST_TO_ADDR
// sPowell := false ;
29308: LD_ADDR_EXP 94
29312: PUSH
29313: LD_INT 0
29315: ST_TO_ADDR
// sTeleport := false ;
29316: LD_ADDR_EXP 97
29320: PUSH
29321: LD_INT 0
29323: ST_TO_ADDR
// sOilTower := false ;
29324: LD_ADDR_EXP 99
29328: PUSH
29329: LD_INT 0
29331: ST_TO_ADDR
// sShovel := false ;
29332: LD_ADDR_EXP 100
29336: PUSH
29337: LD_INT 0
29339: ST_TO_ADDR
// sSheik := false ;
29340: LD_ADDR_EXP 101
29344: PUSH
29345: LD_INT 0
29347: ST_TO_ADDR
// sEarthquake := false ;
29348: LD_ADDR_EXP 103
29352: PUSH
29353: LD_INT 0
29355: ST_TO_ADDR
// sAI := false ;
29356: LD_ADDR_EXP 104
29360: PUSH
29361: LD_INT 0
29363: ST_TO_ADDR
// sCargo := false ;
29364: LD_ADDR_EXP 107
29368: PUSH
29369: LD_INT 0
29371: ST_TO_ADDR
// sDLaser := false ;
29372: LD_ADDR_EXP 108
29376: PUSH
29377: LD_INT 0
29379: ST_TO_ADDR
// sExchange := false ;
29380: LD_ADDR_EXP 109
29384: PUSH
29385: LD_INT 0
29387: ST_TO_ADDR
// sFac := false ;
29388: LD_ADDR_EXP 110
29392: PUSH
29393: LD_INT 0
29395: ST_TO_ADDR
// sPower := false ;
29396: LD_ADDR_EXP 111
29400: PUSH
29401: LD_INT 0
29403: ST_TO_ADDR
// sRandom := false ;
29404: LD_ADDR_EXP 112
29408: PUSH
29409: LD_INT 0
29411: ST_TO_ADDR
// sShield := false ;
29412: LD_ADDR_EXP 113
29416: PUSH
29417: LD_INT 0
29419: ST_TO_ADDR
// sTime := false ;
29420: LD_ADDR_EXP 114
29424: PUSH
29425: LD_INT 0
29427: ST_TO_ADDR
// sTools := false ;
29428: LD_ADDR_EXP 115
29432: PUSH
29433: LD_INT 0
29435: ST_TO_ADDR
// sSold := false ;
29436: LD_ADDR_EXP 80
29440: PUSH
29441: LD_INT 0
29443: ST_TO_ADDR
// sDiff := false ;
29444: LD_ADDR_EXP 81
29448: PUSH
29449: LD_INT 0
29451: ST_TO_ADDR
// sFog := false ;
29452: LD_ADDR_EXP 84
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// sReset := false ;
29460: LD_ADDR_EXP 85
29464: PUSH
29465: LD_INT 0
29467: ST_TO_ADDR
// sSun := false ;
29468: LD_ADDR_EXP 86
29472: PUSH
29473: LD_INT 0
29475: ST_TO_ADDR
// sTiger := false ;
29476: LD_ADDR_EXP 82
29480: PUSH
29481: LD_INT 0
29483: ST_TO_ADDR
// sBomb := false ;
29484: LD_ADDR_EXP 83
29488: PUSH
29489: LD_INT 0
29491: ST_TO_ADDR
// sWound := false ;
29492: LD_ADDR_EXP 91
29496: PUSH
29497: LD_INT 0
29499: ST_TO_ADDR
// sBetray := false ;
29500: LD_ADDR_EXP 95
29504: PUSH
29505: LD_INT 0
29507: ST_TO_ADDR
// sContamin := false ;
29508: LD_ADDR_EXP 96
29512: PUSH
29513: LD_INT 0
29515: ST_TO_ADDR
// sOil := false ;
29516: LD_ADDR_EXP 98
29520: PUSH
29521: LD_INT 0
29523: ST_TO_ADDR
// sStu := false ;
29524: LD_ADDR_EXP 102
29528: PUSH
29529: LD_INT 0
29531: ST_TO_ADDR
// sBazooka := false ;
29532: LD_ADDR_EXP 105
29536: PUSH
29537: LD_INT 0
29539: ST_TO_ADDR
// sMortar := false ;
29540: LD_ADDR_EXP 106
29544: PUSH
29545: LD_INT 0
29547: ST_TO_ADDR
// sRanger := false ;
29548: LD_ADDR_EXP 116
29552: PUSH
29553: LD_INT 0
29555: ST_TO_ADDR
// sComputer := false ;
29556: LD_ADDR_EXP 117
29560: PUSH
29561: LD_INT 0
29563: ST_TO_ADDR
// s30 := false ;
29564: LD_ADDR_EXP 118
29568: PUSH
29569: LD_INT 0
29571: ST_TO_ADDR
// s60 := false ;
29572: LD_ADDR_EXP 119
29576: PUSH
29577: LD_INT 0
29579: ST_TO_ADDR
// end ;
29580: LD_VAR 0 1
29584: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
29585: LD_INT 0
29587: PPUSH
29588: PPUSH
29589: PPUSH
29590: PPUSH
29591: PPUSH
// result := [ ] ;
29592: LD_ADDR_VAR 0 1
29596: PUSH
29597: EMPTY
29598: ST_TO_ADDR
// if campaign_id = 1 then
29599: LD_OWVAR 69
29603: PUSH
29604: LD_INT 1
29606: EQUAL
29607: IFFALSE 32773
// begin case mission_number of 1 :
29609: LD_OWVAR 70
29613: PUSH
29614: LD_INT 1
29616: DOUBLE
29617: EQUAL
29618: IFTRUE 29622
29620: GO 29698
29622: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
29623: LD_ADDR_VAR 0 1
29627: PUSH
29628: LD_INT 2
29630: PUSH
29631: LD_INT 4
29633: PUSH
29634: LD_INT 11
29636: PUSH
29637: LD_INT 12
29639: PUSH
29640: LD_INT 15
29642: PUSH
29643: LD_INT 16
29645: PUSH
29646: LD_INT 22
29648: PUSH
29649: LD_INT 23
29651: PUSH
29652: LD_INT 26
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: LIST
29660: LIST
29661: LIST
29662: LIST
29663: LIST
29664: LIST
29665: PUSH
29666: LD_INT 101
29668: PUSH
29669: LD_INT 102
29671: PUSH
29672: LD_INT 106
29674: PUSH
29675: LD_INT 116
29677: PUSH
29678: LD_INT 117
29680: PUSH
29681: LD_INT 118
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: LIST
29690: LIST
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: ST_TO_ADDR
29696: GO 32771
29698: LD_INT 2
29700: DOUBLE
29701: EQUAL
29702: IFTRUE 29706
29704: GO 29790
29706: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
29707: LD_ADDR_VAR 0 1
29711: PUSH
29712: LD_INT 2
29714: PUSH
29715: LD_INT 4
29717: PUSH
29718: LD_INT 11
29720: PUSH
29721: LD_INT 12
29723: PUSH
29724: LD_INT 15
29726: PUSH
29727: LD_INT 16
29729: PUSH
29730: LD_INT 22
29732: PUSH
29733: LD_INT 23
29735: PUSH
29736: LD_INT 26
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 101
29752: PUSH
29753: LD_INT 102
29755: PUSH
29756: LD_INT 105
29758: PUSH
29759: LD_INT 106
29761: PUSH
29762: LD_INT 108
29764: PUSH
29765: LD_INT 116
29767: PUSH
29768: LD_INT 117
29770: PUSH
29771: LD_INT 118
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: ST_TO_ADDR
29788: GO 32771
29790: LD_INT 3
29792: DOUBLE
29793: EQUAL
29794: IFTRUE 29798
29796: GO 29886
29798: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
29799: LD_ADDR_VAR 0 1
29803: PUSH
29804: LD_INT 2
29806: PUSH
29807: LD_INT 4
29809: PUSH
29810: LD_INT 5
29812: PUSH
29813: LD_INT 11
29815: PUSH
29816: LD_INT 12
29818: PUSH
29819: LD_INT 15
29821: PUSH
29822: LD_INT 16
29824: PUSH
29825: LD_INT 22
29827: PUSH
29828: LD_INT 26
29830: PUSH
29831: LD_INT 36
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 101
29848: PUSH
29849: LD_INT 102
29851: PUSH
29852: LD_INT 105
29854: PUSH
29855: LD_INT 106
29857: PUSH
29858: LD_INT 108
29860: PUSH
29861: LD_INT 116
29863: PUSH
29864: LD_INT 117
29866: PUSH
29867: LD_INT 118
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: ST_TO_ADDR
29884: GO 32771
29886: LD_INT 4
29888: DOUBLE
29889: EQUAL
29890: IFTRUE 29894
29892: GO 29990
29894: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
29895: LD_ADDR_VAR 0 1
29899: PUSH
29900: LD_INT 2
29902: PUSH
29903: LD_INT 4
29905: PUSH
29906: LD_INT 5
29908: PUSH
29909: LD_INT 8
29911: PUSH
29912: LD_INT 11
29914: PUSH
29915: LD_INT 12
29917: PUSH
29918: LD_INT 15
29920: PUSH
29921: LD_INT 16
29923: PUSH
29924: LD_INT 22
29926: PUSH
29927: LD_INT 23
29929: PUSH
29930: LD_INT 26
29932: PUSH
29933: LD_INT 36
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: LIST
29942: LIST
29943: LIST
29944: LIST
29945: LIST
29946: LIST
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 101
29952: PUSH
29953: LD_INT 102
29955: PUSH
29956: LD_INT 105
29958: PUSH
29959: LD_INT 106
29961: PUSH
29962: LD_INT 108
29964: PUSH
29965: LD_INT 116
29967: PUSH
29968: LD_INT 117
29970: PUSH
29971: LD_INT 118
29973: PUSH
29974: EMPTY
29975: LIST
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: ST_TO_ADDR
29988: GO 32771
29990: LD_INT 5
29992: DOUBLE
29993: EQUAL
29994: IFTRUE 29998
29996: GO 30110
29998: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
29999: LD_ADDR_VAR 0 1
30003: PUSH
30004: LD_INT 2
30006: PUSH
30007: LD_INT 4
30009: PUSH
30010: LD_INT 5
30012: PUSH
30013: LD_INT 6
30015: PUSH
30016: LD_INT 8
30018: PUSH
30019: LD_INT 11
30021: PUSH
30022: LD_INT 12
30024: PUSH
30025: LD_INT 15
30027: PUSH
30028: LD_INT 16
30030: PUSH
30031: LD_INT 22
30033: PUSH
30034: LD_INT 23
30036: PUSH
30037: LD_INT 25
30039: PUSH
30040: LD_INT 26
30042: PUSH
30043: LD_INT 36
30045: PUSH
30046: EMPTY
30047: LIST
30048: LIST
30049: LIST
30050: LIST
30051: LIST
30052: LIST
30053: LIST
30054: LIST
30055: LIST
30056: LIST
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 101
30064: PUSH
30065: LD_INT 102
30067: PUSH
30068: LD_INT 105
30070: PUSH
30071: LD_INT 106
30073: PUSH
30074: LD_INT 108
30076: PUSH
30077: LD_INT 109
30079: PUSH
30080: LD_INT 112
30082: PUSH
30083: LD_INT 116
30085: PUSH
30086: LD_INT 117
30088: PUSH
30089: LD_INT 118
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: ST_TO_ADDR
30108: GO 32771
30110: LD_INT 6
30112: DOUBLE
30113: EQUAL
30114: IFTRUE 30118
30116: GO 30250
30118: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
30119: LD_ADDR_VAR 0 1
30123: PUSH
30124: LD_INT 2
30126: PUSH
30127: LD_INT 4
30129: PUSH
30130: LD_INT 5
30132: PUSH
30133: LD_INT 6
30135: PUSH
30136: LD_INT 8
30138: PUSH
30139: LD_INT 11
30141: PUSH
30142: LD_INT 12
30144: PUSH
30145: LD_INT 15
30147: PUSH
30148: LD_INT 16
30150: PUSH
30151: LD_INT 20
30153: PUSH
30154: LD_INT 21
30156: PUSH
30157: LD_INT 22
30159: PUSH
30160: LD_INT 23
30162: PUSH
30163: LD_INT 25
30165: PUSH
30166: LD_INT 26
30168: PUSH
30169: LD_INT 30
30171: PUSH
30172: LD_INT 31
30174: PUSH
30175: LD_INT 32
30177: PUSH
30178: LD_INT 36
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 101
30204: PUSH
30205: LD_INT 102
30207: PUSH
30208: LD_INT 105
30210: PUSH
30211: LD_INT 106
30213: PUSH
30214: LD_INT 108
30216: PUSH
30217: LD_INT 109
30219: PUSH
30220: LD_INT 112
30222: PUSH
30223: LD_INT 116
30225: PUSH
30226: LD_INT 117
30228: PUSH
30229: LD_INT 118
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: ST_TO_ADDR
30248: GO 32771
30250: LD_INT 7
30252: DOUBLE
30253: EQUAL
30254: IFTRUE 30258
30256: GO 30370
30258: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
30259: LD_ADDR_VAR 0 1
30263: PUSH
30264: LD_INT 2
30266: PUSH
30267: LD_INT 4
30269: PUSH
30270: LD_INT 5
30272: PUSH
30273: LD_INT 7
30275: PUSH
30276: LD_INT 11
30278: PUSH
30279: LD_INT 12
30281: PUSH
30282: LD_INT 15
30284: PUSH
30285: LD_INT 16
30287: PUSH
30288: LD_INT 20
30290: PUSH
30291: LD_INT 21
30293: PUSH
30294: LD_INT 22
30296: PUSH
30297: LD_INT 23
30299: PUSH
30300: LD_INT 25
30302: PUSH
30303: LD_INT 26
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 101
30324: PUSH
30325: LD_INT 102
30327: PUSH
30328: LD_INT 103
30330: PUSH
30331: LD_INT 105
30333: PUSH
30334: LD_INT 106
30336: PUSH
30337: LD_INT 108
30339: PUSH
30340: LD_INT 112
30342: PUSH
30343: LD_INT 116
30345: PUSH
30346: LD_INT 117
30348: PUSH
30349: LD_INT 118
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: LIST
30356: LIST
30357: LIST
30358: LIST
30359: LIST
30360: LIST
30361: LIST
30362: LIST
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: ST_TO_ADDR
30368: GO 32771
30370: LD_INT 8
30372: DOUBLE
30373: EQUAL
30374: IFTRUE 30378
30376: GO 30518
30378: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
30379: LD_ADDR_VAR 0 1
30383: PUSH
30384: LD_INT 2
30386: PUSH
30387: LD_INT 4
30389: PUSH
30390: LD_INT 5
30392: PUSH
30393: LD_INT 6
30395: PUSH
30396: LD_INT 7
30398: PUSH
30399: LD_INT 8
30401: PUSH
30402: LD_INT 11
30404: PUSH
30405: LD_INT 12
30407: PUSH
30408: LD_INT 15
30410: PUSH
30411: LD_INT 16
30413: PUSH
30414: LD_INT 20
30416: PUSH
30417: LD_INT 21
30419: PUSH
30420: LD_INT 22
30422: PUSH
30423: LD_INT 23
30425: PUSH
30426: LD_INT 25
30428: PUSH
30429: LD_INT 26
30431: PUSH
30432: LD_INT 30
30434: PUSH
30435: LD_INT 31
30437: PUSH
30438: LD_INT 32
30440: PUSH
30441: LD_INT 36
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: PUSH
30466: LD_INT 101
30468: PUSH
30469: LD_INT 102
30471: PUSH
30472: LD_INT 103
30474: PUSH
30475: LD_INT 105
30477: PUSH
30478: LD_INT 106
30480: PUSH
30481: LD_INT 108
30483: PUSH
30484: LD_INT 109
30486: PUSH
30487: LD_INT 112
30489: PUSH
30490: LD_INT 116
30492: PUSH
30493: LD_INT 117
30495: PUSH
30496: LD_INT 118
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: ST_TO_ADDR
30516: GO 32771
30518: LD_INT 9
30520: DOUBLE
30521: EQUAL
30522: IFTRUE 30526
30524: GO 30674
30526: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
30527: LD_ADDR_VAR 0 1
30531: PUSH
30532: LD_INT 2
30534: PUSH
30535: LD_INT 4
30537: PUSH
30538: LD_INT 5
30540: PUSH
30541: LD_INT 6
30543: PUSH
30544: LD_INT 7
30546: PUSH
30547: LD_INT 8
30549: PUSH
30550: LD_INT 11
30552: PUSH
30553: LD_INT 12
30555: PUSH
30556: LD_INT 15
30558: PUSH
30559: LD_INT 16
30561: PUSH
30562: LD_INT 20
30564: PUSH
30565: LD_INT 21
30567: PUSH
30568: LD_INT 22
30570: PUSH
30571: LD_INT 23
30573: PUSH
30574: LD_INT 25
30576: PUSH
30577: LD_INT 26
30579: PUSH
30580: LD_INT 28
30582: PUSH
30583: LD_INT 30
30585: PUSH
30586: LD_INT 31
30588: PUSH
30589: LD_INT 32
30591: PUSH
30592: LD_INT 36
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 101
30620: PUSH
30621: LD_INT 102
30623: PUSH
30624: LD_INT 103
30626: PUSH
30627: LD_INT 105
30629: PUSH
30630: LD_INT 106
30632: PUSH
30633: LD_INT 108
30635: PUSH
30636: LD_INT 109
30638: PUSH
30639: LD_INT 112
30641: PUSH
30642: LD_INT 114
30644: PUSH
30645: LD_INT 116
30647: PUSH
30648: LD_INT 117
30650: PUSH
30651: LD_INT 118
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: ST_TO_ADDR
30672: GO 32771
30674: LD_INT 10
30676: DOUBLE
30677: EQUAL
30678: IFTRUE 30682
30680: GO 30878
30682: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
30683: LD_ADDR_VAR 0 1
30687: PUSH
30688: LD_INT 2
30690: PUSH
30691: LD_INT 4
30693: PUSH
30694: LD_INT 5
30696: PUSH
30697: LD_INT 6
30699: PUSH
30700: LD_INT 7
30702: PUSH
30703: LD_INT 8
30705: PUSH
30706: LD_INT 9
30708: PUSH
30709: LD_INT 10
30711: PUSH
30712: LD_INT 11
30714: PUSH
30715: LD_INT 12
30717: PUSH
30718: LD_INT 13
30720: PUSH
30721: LD_INT 14
30723: PUSH
30724: LD_INT 15
30726: PUSH
30727: LD_INT 16
30729: PUSH
30730: LD_INT 17
30732: PUSH
30733: LD_INT 18
30735: PUSH
30736: LD_INT 19
30738: PUSH
30739: LD_INT 20
30741: PUSH
30742: LD_INT 21
30744: PUSH
30745: LD_INT 22
30747: PUSH
30748: LD_INT 23
30750: PUSH
30751: LD_INT 24
30753: PUSH
30754: LD_INT 25
30756: PUSH
30757: LD_INT 26
30759: PUSH
30760: LD_INT 28
30762: PUSH
30763: LD_INT 30
30765: PUSH
30766: LD_INT 31
30768: PUSH
30769: LD_INT 32
30771: PUSH
30772: LD_INT 36
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: PUSH
30806: LD_INT 101
30808: PUSH
30809: LD_INT 102
30811: PUSH
30812: LD_INT 103
30814: PUSH
30815: LD_INT 104
30817: PUSH
30818: LD_INT 105
30820: PUSH
30821: LD_INT 106
30823: PUSH
30824: LD_INT 107
30826: PUSH
30827: LD_INT 108
30829: PUSH
30830: LD_INT 109
30832: PUSH
30833: LD_INT 110
30835: PUSH
30836: LD_INT 111
30838: PUSH
30839: LD_INT 112
30841: PUSH
30842: LD_INT 114
30844: PUSH
30845: LD_INT 116
30847: PUSH
30848: LD_INT 117
30850: PUSH
30851: LD_INT 118
30853: PUSH
30854: EMPTY
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: ST_TO_ADDR
30876: GO 32771
30878: LD_INT 11
30880: DOUBLE
30881: EQUAL
30882: IFTRUE 30886
30884: GO 31090
30886: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
30887: LD_ADDR_VAR 0 1
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: LD_INT 3
30897: PUSH
30898: LD_INT 4
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: LD_INT 6
30906: PUSH
30907: LD_INT 7
30909: PUSH
30910: LD_INT 8
30912: PUSH
30913: LD_INT 9
30915: PUSH
30916: LD_INT 10
30918: PUSH
30919: LD_INT 11
30921: PUSH
30922: LD_INT 12
30924: PUSH
30925: LD_INT 13
30927: PUSH
30928: LD_INT 14
30930: PUSH
30931: LD_INT 15
30933: PUSH
30934: LD_INT 16
30936: PUSH
30937: LD_INT 17
30939: PUSH
30940: LD_INT 18
30942: PUSH
30943: LD_INT 19
30945: PUSH
30946: LD_INT 20
30948: PUSH
30949: LD_INT 21
30951: PUSH
30952: LD_INT 22
30954: PUSH
30955: LD_INT 23
30957: PUSH
30958: LD_INT 24
30960: PUSH
30961: LD_INT 25
30963: PUSH
30964: LD_INT 26
30966: PUSH
30967: LD_INT 28
30969: PUSH
30970: LD_INT 30
30972: PUSH
30973: LD_INT 31
30975: PUSH
30976: LD_INT 32
30978: PUSH
30979: LD_INT 34
30981: PUSH
30982: LD_INT 36
30984: PUSH
30985: EMPTY
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 101
31020: PUSH
31021: LD_INT 102
31023: PUSH
31024: LD_INT 103
31026: PUSH
31027: LD_INT 104
31029: PUSH
31030: LD_INT 105
31032: PUSH
31033: LD_INT 106
31035: PUSH
31036: LD_INT 107
31038: PUSH
31039: LD_INT 108
31041: PUSH
31042: LD_INT 109
31044: PUSH
31045: LD_INT 110
31047: PUSH
31048: LD_INT 111
31050: PUSH
31051: LD_INT 112
31053: PUSH
31054: LD_INT 114
31056: PUSH
31057: LD_INT 116
31059: PUSH
31060: LD_INT 117
31062: PUSH
31063: LD_INT 118
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: LIST
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: ST_TO_ADDR
31088: GO 32771
31090: LD_INT 12
31092: DOUBLE
31093: EQUAL
31094: IFTRUE 31098
31096: GO 31318
31098: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
31099: LD_ADDR_VAR 0 1
31103: PUSH
31104: LD_INT 1
31106: PUSH
31107: LD_INT 2
31109: PUSH
31110: LD_INT 3
31112: PUSH
31113: LD_INT 4
31115: PUSH
31116: LD_INT 5
31118: PUSH
31119: LD_INT 6
31121: PUSH
31122: LD_INT 7
31124: PUSH
31125: LD_INT 8
31127: PUSH
31128: LD_INT 9
31130: PUSH
31131: LD_INT 10
31133: PUSH
31134: LD_INT 11
31136: PUSH
31137: LD_INT 12
31139: PUSH
31140: LD_INT 13
31142: PUSH
31143: LD_INT 14
31145: PUSH
31146: LD_INT 15
31148: PUSH
31149: LD_INT 16
31151: PUSH
31152: LD_INT 17
31154: PUSH
31155: LD_INT 18
31157: PUSH
31158: LD_INT 19
31160: PUSH
31161: LD_INT 20
31163: PUSH
31164: LD_INT 21
31166: PUSH
31167: LD_INT 22
31169: PUSH
31170: LD_INT 23
31172: PUSH
31173: LD_INT 24
31175: PUSH
31176: LD_INT 25
31178: PUSH
31179: LD_INT 26
31181: PUSH
31182: LD_INT 27
31184: PUSH
31185: LD_INT 28
31187: PUSH
31188: LD_INT 30
31190: PUSH
31191: LD_INT 31
31193: PUSH
31194: LD_INT 32
31196: PUSH
31197: LD_INT 33
31199: PUSH
31200: LD_INT 34
31202: PUSH
31203: LD_INT 36
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: LIST
31235: LIST
31236: LIST
31237: LIST
31238: LIST
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 101
31244: PUSH
31245: LD_INT 102
31247: PUSH
31248: LD_INT 103
31250: PUSH
31251: LD_INT 104
31253: PUSH
31254: LD_INT 105
31256: PUSH
31257: LD_INT 106
31259: PUSH
31260: LD_INT 107
31262: PUSH
31263: LD_INT 108
31265: PUSH
31266: LD_INT 109
31268: PUSH
31269: LD_INT 110
31271: PUSH
31272: LD_INT 111
31274: PUSH
31275: LD_INT 112
31277: PUSH
31278: LD_INT 113
31280: PUSH
31281: LD_INT 114
31283: PUSH
31284: LD_INT 116
31286: PUSH
31287: LD_INT 117
31289: PUSH
31290: LD_INT 118
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: LIST
31299: LIST
31300: LIST
31301: LIST
31302: LIST
31303: LIST
31304: LIST
31305: LIST
31306: LIST
31307: LIST
31308: LIST
31309: LIST
31310: LIST
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: ST_TO_ADDR
31316: GO 32771
31318: LD_INT 13
31320: DOUBLE
31321: EQUAL
31322: IFTRUE 31326
31324: GO 31534
31326: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
31327: LD_ADDR_VAR 0 1
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 2
31337: PUSH
31338: LD_INT 3
31340: PUSH
31341: LD_INT 4
31343: PUSH
31344: LD_INT 5
31346: PUSH
31347: LD_INT 8
31349: PUSH
31350: LD_INT 9
31352: PUSH
31353: LD_INT 10
31355: PUSH
31356: LD_INT 11
31358: PUSH
31359: LD_INT 12
31361: PUSH
31362: LD_INT 14
31364: PUSH
31365: LD_INT 15
31367: PUSH
31368: LD_INT 16
31370: PUSH
31371: LD_INT 17
31373: PUSH
31374: LD_INT 18
31376: PUSH
31377: LD_INT 19
31379: PUSH
31380: LD_INT 20
31382: PUSH
31383: LD_INT 21
31385: PUSH
31386: LD_INT 22
31388: PUSH
31389: LD_INT 23
31391: PUSH
31392: LD_INT 24
31394: PUSH
31395: LD_INT 25
31397: PUSH
31398: LD_INT 26
31400: PUSH
31401: LD_INT 27
31403: PUSH
31404: LD_INT 28
31406: PUSH
31407: LD_INT 30
31409: PUSH
31410: LD_INT 31
31412: PUSH
31413: LD_INT 32
31415: PUSH
31416: LD_INT 33
31418: PUSH
31419: LD_INT 34
31421: PUSH
31422: LD_INT 36
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 101
31460: PUSH
31461: LD_INT 102
31463: PUSH
31464: LD_INT 103
31466: PUSH
31467: LD_INT 104
31469: PUSH
31470: LD_INT 105
31472: PUSH
31473: LD_INT 106
31475: PUSH
31476: LD_INT 107
31478: PUSH
31479: LD_INT 108
31481: PUSH
31482: LD_INT 109
31484: PUSH
31485: LD_INT 110
31487: PUSH
31488: LD_INT 111
31490: PUSH
31491: LD_INT 112
31493: PUSH
31494: LD_INT 113
31496: PUSH
31497: LD_INT 114
31499: PUSH
31500: LD_INT 116
31502: PUSH
31503: LD_INT 117
31505: PUSH
31506: LD_INT 118
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: PUSH
31528: EMPTY
31529: LIST
31530: LIST
31531: ST_TO_ADDR
31532: GO 32771
31534: LD_INT 14
31536: DOUBLE
31537: EQUAL
31538: IFTRUE 31542
31540: GO 31766
31542: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
31543: LD_ADDR_VAR 0 1
31547: PUSH
31548: LD_INT 1
31550: PUSH
31551: LD_INT 2
31553: PUSH
31554: LD_INT 3
31556: PUSH
31557: LD_INT 4
31559: PUSH
31560: LD_INT 5
31562: PUSH
31563: LD_INT 6
31565: PUSH
31566: LD_INT 7
31568: PUSH
31569: LD_INT 8
31571: PUSH
31572: LD_INT 9
31574: PUSH
31575: LD_INT 10
31577: PUSH
31578: LD_INT 11
31580: PUSH
31581: LD_INT 12
31583: PUSH
31584: LD_INT 13
31586: PUSH
31587: LD_INT 14
31589: PUSH
31590: LD_INT 15
31592: PUSH
31593: LD_INT 16
31595: PUSH
31596: LD_INT 17
31598: PUSH
31599: LD_INT 18
31601: PUSH
31602: LD_INT 19
31604: PUSH
31605: LD_INT 20
31607: PUSH
31608: LD_INT 21
31610: PUSH
31611: LD_INT 22
31613: PUSH
31614: LD_INT 23
31616: PUSH
31617: LD_INT 24
31619: PUSH
31620: LD_INT 25
31622: PUSH
31623: LD_INT 26
31625: PUSH
31626: LD_INT 27
31628: PUSH
31629: LD_INT 28
31631: PUSH
31632: LD_INT 29
31634: PUSH
31635: LD_INT 30
31637: PUSH
31638: LD_INT 31
31640: PUSH
31641: LD_INT 32
31643: PUSH
31644: LD_INT 33
31646: PUSH
31647: LD_INT 34
31649: PUSH
31650: LD_INT 36
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: PUSH
31690: LD_INT 101
31692: PUSH
31693: LD_INT 102
31695: PUSH
31696: LD_INT 103
31698: PUSH
31699: LD_INT 104
31701: PUSH
31702: LD_INT 105
31704: PUSH
31705: LD_INT 106
31707: PUSH
31708: LD_INT 107
31710: PUSH
31711: LD_INT 108
31713: PUSH
31714: LD_INT 109
31716: PUSH
31717: LD_INT 110
31719: PUSH
31720: LD_INT 111
31722: PUSH
31723: LD_INT 112
31725: PUSH
31726: LD_INT 113
31728: PUSH
31729: LD_INT 114
31731: PUSH
31732: LD_INT 116
31734: PUSH
31735: LD_INT 117
31737: PUSH
31738: LD_INT 118
31740: PUSH
31741: EMPTY
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: LIST
31754: LIST
31755: LIST
31756: LIST
31757: LIST
31758: LIST
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: ST_TO_ADDR
31764: GO 32771
31766: LD_INT 15
31768: DOUBLE
31769: EQUAL
31770: IFTRUE 31774
31772: GO 31998
31774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
31775: LD_ADDR_VAR 0 1
31779: PUSH
31780: LD_INT 1
31782: PUSH
31783: LD_INT 2
31785: PUSH
31786: LD_INT 3
31788: PUSH
31789: LD_INT 4
31791: PUSH
31792: LD_INT 5
31794: PUSH
31795: LD_INT 6
31797: PUSH
31798: LD_INT 7
31800: PUSH
31801: LD_INT 8
31803: PUSH
31804: LD_INT 9
31806: PUSH
31807: LD_INT 10
31809: PUSH
31810: LD_INT 11
31812: PUSH
31813: LD_INT 12
31815: PUSH
31816: LD_INT 13
31818: PUSH
31819: LD_INT 14
31821: PUSH
31822: LD_INT 15
31824: PUSH
31825: LD_INT 16
31827: PUSH
31828: LD_INT 17
31830: PUSH
31831: LD_INT 18
31833: PUSH
31834: LD_INT 19
31836: PUSH
31837: LD_INT 20
31839: PUSH
31840: LD_INT 21
31842: PUSH
31843: LD_INT 22
31845: PUSH
31846: LD_INT 23
31848: PUSH
31849: LD_INT 24
31851: PUSH
31852: LD_INT 25
31854: PUSH
31855: LD_INT 26
31857: PUSH
31858: LD_INT 27
31860: PUSH
31861: LD_INT 28
31863: PUSH
31864: LD_INT 29
31866: PUSH
31867: LD_INT 30
31869: PUSH
31870: LD_INT 31
31872: PUSH
31873: LD_INT 32
31875: PUSH
31876: LD_INT 33
31878: PUSH
31879: LD_INT 34
31881: PUSH
31882: LD_INT 36
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 101
31924: PUSH
31925: LD_INT 102
31927: PUSH
31928: LD_INT 103
31930: PUSH
31931: LD_INT 104
31933: PUSH
31934: LD_INT 105
31936: PUSH
31937: LD_INT 106
31939: PUSH
31940: LD_INT 107
31942: PUSH
31943: LD_INT 108
31945: PUSH
31946: LD_INT 109
31948: PUSH
31949: LD_INT 110
31951: PUSH
31952: LD_INT 111
31954: PUSH
31955: LD_INT 112
31957: PUSH
31958: LD_INT 113
31960: PUSH
31961: LD_INT 114
31963: PUSH
31964: LD_INT 116
31966: PUSH
31967: LD_INT 117
31969: PUSH
31970: LD_INT 118
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: LIST
31990: LIST
31991: PUSH
31992: EMPTY
31993: LIST
31994: LIST
31995: ST_TO_ADDR
31996: GO 32771
31998: LD_INT 16
32000: DOUBLE
32001: EQUAL
32002: IFTRUE 32006
32004: GO 32142
32006: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
32007: LD_ADDR_VAR 0 1
32011: PUSH
32012: LD_INT 2
32014: PUSH
32015: LD_INT 4
32017: PUSH
32018: LD_INT 5
32020: PUSH
32021: LD_INT 7
32023: PUSH
32024: LD_INT 11
32026: PUSH
32027: LD_INT 12
32029: PUSH
32030: LD_INT 15
32032: PUSH
32033: LD_INT 16
32035: PUSH
32036: LD_INT 20
32038: PUSH
32039: LD_INT 21
32041: PUSH
32042: LD_INT 22
32044: PUSH
32045: LD_INT 23
32047: PUSH
32048: LD_INT 25
32050: PUSH
32051: LD_INT 26
32053: PUSH
32054: LD_INT 30
32056: PUSH
32057: LD_INT 31
32059: PUSH
32060: LD_INT 32
32062: PUSH
32063: LD_INT 33
32065: PUSH
32066: LD_INT 34
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 101
32092: PUSH
32093: LD_INT 102
32095: PUSH
32096: LD_INT 103
32098: PUSH
32099: LD_INT 106
32101: PUSH
32102: LD_INT 108
32104: PUSH
32105: LD_INT 112
32107: PUSH
32108: LD_INT 113
32110: PUSH
32111: LD_INT 114
32113: PUSH
32114: LD_INT 116
32116: PUSH
32117: LD_INT 117
32119: PUSH
32120: LD_INT 118
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: ST_TO_ADDR
32140: GO 32771
32142: LD_INT 17
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32374
32150: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
32151: LD_ADDR_VAR 0 1
32155: PUSH
32156: LD_INT 1
32158: PUSH
32159: LD_INT 2
32161: PUSH
32162: LD_INT 3
32164: PUSH
32165: LD_INT 4
32167: PUSH
32168: LD_INT 5
32170: PUSH
32171: LD_INT 6
32173: PUSH
32174: LD_INT 7
32176: PUSH
32177: LD_INT 8
32179: PUSH
32180: LD_INT 9
32182: PUSH
32183: LD_INT 10
32185: PUSH
32186: LD_INT 11
32188: PUSH
32189: LD_INT 12
32191: PUSH
32192: LD_INT 13
32194: PUSH
32195: LD_INT 14
32197: PUSH
32198: LD_INT 15
32200: PUSH
32201: LD_INT 16
32203: PUSH
32204: LD_INT 17
32206: PUSH
32207: LD_INT 18
32209: PUSH
32210: LD_INT 19
32212: PUSH
32213: LD_INT 20
32215: PUSH
32216: LD_INT 21
32218: PUSH
32219: LD_INT 22
32221: PUSH
32222: LD_INT 23
32224: PUSH
32225: LD_INT 24
32227: PUSH
32228: LD_INT 25
32230: PUSH
32231: LD_INT 26
32233: PUSH
32234: LD_INT 27
32236: PUSH
32237: LD_INT 28
32239: PUSH
32240: LD_INT 29
32242: PUSH
32243: LD_INT 30
32245: PUSH
32246: LD_INT 31
32248: PUSH
32249: LD_INT 32
32251: PUSH
32252: LD_INT 33
32254: PUSH
32255: LD_INT 34
32257: PUSH
32258: LD_INT 36
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 101
32300: PUSH
32301: LD_INT 102
32303: PUSH
32304: LD_INT 103
32306: PUSH
32307: LD_INT 104
32309: PUSH
32310: LD_INT 105
32312: PUSH
32313: LD_INT 106
32315: PUSH
32316: LD_INT 107
32318: PUSH
32319: LD_INT 108
32321: PUSH
32322: LD_INT 109
32324: PUSH
32325: LD_INT 110
32327: PUSH
32328: LD_INT 111
32330: PUSH
32331: LD_INT 112
32333: PUSH
32334: LD_INT 113
32336: PUSH
32337: LD_INT 114
32339: PUSH
32340: LD_INT 116
32342: PUSH
32343: LD_INT 117
32345: PUSH
32346: LD_INT 118
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: LIST
32356: LIST
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: ST_TO_ADDR
32372: GO 32771
32374: LD_INT 18
32376: DOUBLE
32377: EQUAL
32378: IFTRUE 32382
32380: GO 32530
32382: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
32383: LD_ADDR_VAR 0 1
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 4
32393: PUSH
32394: LD_INT 5
32396: PUSH
32397: LD_INT 7
32399: PUSH
32400: LD_INT 11
32402: PUSH
32403: LD_INT 12
32405: PUSH
32406: LD_INT 15
32408: PUSH
32409: LD_INT 16
32411: PUSH
32412: LD_INT 20
32414: PUSH
32415: LD_INT 21
32417: PUSH
32418: LD_INT 22
32420: PUSH
32421: LD_INT 23
32423: PUSH
32424: LD_INT 25
32426: PUSH
32427: LD_INT 26
32429: PUSH
32430: LD_INT 30
32432: PUSH
32433: LD_INT 31
32435: PUSH
32436: LD_INT 32
32438: PUSH
32439: LD_INT 33
32441: PUSH
32442: LD_INT 34
32444: PUSH
32445: LD_INT 35
32447: PUSH
32448: LD_INT 36
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: PUSH
32474: LD_INT 101
32476: PUSH
32477: LD_INT 102
32479: PUSH
32480: LD_INT 103
32482: PUSH
32483: LD_INT 106
32485: PUSH
32486: LD_INT 108
32488: PUSH
32489: LD_INT 112
32491: PUSH
32492: LD_INT 113
32494: PUSH
32495: LD_INT 114
32497: PUSH
32498: LD_INT 115
32500: PUSH
32501: LD_INT 116
32503: PUSH
32504: LD_INT 117
32506: PUSH
32507: LD_INT 118
32509: PUSH
32510: EMPTY
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: ST_TO_ADDR
32528: GO 32771
32530: LD_INT 19
32532: DOUBLE
32533: EQUAL
32534: IFTRUE 32538
32536: GO 32770
32538: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
32539: LD_ADDR_VAR 0 1
32543: PUSH
32544: LD_INT 1
32546: PUSH
32547: LD_INT 2
32549: PUSH
32550: LD_INT 3
32552: PUSH
32553: LD_INT 4
32555: PUSH
32556: LD_INT 5
32558: PUSH
32559: LD_INT 6
32561: PUSH
32562: LD_INT 7
32564: PUSH
32565: LD_INT 8
32567: PUSH
32568: LD_INT 9
32570: PUSH
32571: LD_INT 10
32573: PUSH
32574: LD_INT 11
32576: PUSH
32577: LD_INT 12
32579: PUSH
32580: LD_INT 13
32582: PUSH
32583: LD_INT 14
32585: PUSH
32586: LD_INT 15
32588: PUSH
32589: LD_INT 16
32591: PUSH
32592: LD_INT 17
32594: PUSH
32595: LD_INT 18
32597: PUSH
32598: LD_INT 19
32600: PUSH
32601: LD_INT 20
32603: PUSH
32604: LD_INT 21
32606: PUSH
32607: LD_INT 22
32609: PUSH
32610: LD_INT 23
32612: PUSH
32613: LD_INT 24
32615: PUSH
32616: LD_INT 25
32618: PUSH
32619: LD_INT 26
32621: PUSH
32622: LD_INT 27
32624: PUSH
32625: LD_INT 28
32627: PUSH
32628: LD_INT 29
32630: PUSH
32631: LD_INT 30
32633: PUSH
32634: LD_INT 31
32636: PUSH
32637: LD_INT 32
32639: PUSH
32640: LD_INT 33
32642: PUSH
32643: LD_INT 34
32645: PUSH
32646: LD_INT 35
32648: PUSH
32649: LD_INT 36
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: PUSH
32690: LD_INT 101
32692: PUSH
32693: LD_INT 102
32695: PUSH
32696: LD_INT 103
32698: PUSH
32699: LD_INT 104
32701: PUSH
32702: LD_INT 105
32704: PUSH
32705: LD_INT 106
32707: PUSH
32708: LD_INT 107
32710: PUSH
32711: LD_INT 108
32713: PUSH
32714: LD_INT 109
32716: PUSH
32717: LD_INT 110
32719: PUSH
32720: LD_INT 111
32722: PUSH
32723: LD_INT 112
32725: PUSH
32726: LD_INT 113
32728: PUSH
32729: LD_INT 114
32731: PUSH
32732: LD_INT 115
32734: PUSH
32735: LD_INT 116
32737: PUSH
32738: LD_INT 117
32740: PUSH
32741: LD_INT 118
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: ST_TO_ADDR
32768: GO 32771
32770: POP
// end else
32771: GO 33002
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
32773: LD_ADDR_VAR 0 1
32777: PUSH
32778: LD_INT 1
32780: PUSH
32781: LD_INT 2
32783: PUSH
32784: LD_INT 3
32786: PUSH
32787: LD_INT 4
32789: PUSH
32790: LD_INT 5
32792: PUSH
32793: LD_INT 6
32795: PUSH
32796: LD_INT 7
32798: PUSH
32799: LD_INT 8
32801: PUSH
32802: LD_INT 9
32804: PUSH
32805: LD_INT 10
32807: PUSH
32808: LD_INT 11
32810: PUSH
32811: LD_INT 12
32813: PUSH
32814: LD_INT 13
32816: PUSH
32817: LD_INT 14
32819: PUSH
32820: LD_INT 15
32822: PUSH
32823: LD_INT 16
32825: PUSH
32826: LD_INT 17
32828: PUSH
32829: LD_INT 18
32831: PUSH
32832: LD_INT 19
32834: PUSH
32835: LD_INT 20
32837: PUSH
32838: LD_INT 21
32840: PUSH
32841: LD_INT 22
32843: PUSH
32844: LD_INT 23
32846: PUSH
32847: LD_INT 24
32849: PUSH
32850: LD_INT 25
32852: PUSH
32853: LD_INT 26
32855: PUSH
32856: LD_INT 27
32858: PUSH
32859: LD_INT 28
32861: PUSH
32862: LD_INT 29
32864: PUSH
32865: LD_INT 30
32867: PUSH
32868: LD_INT 31
32870: PUSH
32871: LD_INT 32
32873: PUSH
32874: LD_INT 33
32876: PUSH
32877: LD_INT 34
32879: PUSH
32880: LD_INT 35
32882: PUSH
32883: LD_INT 36
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: PUSH
32924: LD_INT 101
32926: PUSH
32927: LD_INT 102
32929: PUSH
32930: LD_INT 103
32932: PUSH
32933: LD_INT 104
32935: PUSH
32936: LD_INT 105
32938: PUSH
32939: LD_INT 106
32941: PUSH
32942: LD_INT 107
32944: PUSH
32945: LD_INT 108
32947: PUSH
32948: LD_INT 109
32950: PUSH
32951: LD_INT 110
32953: PUSH
32954: LD_INT 111
32956: PUSH
32957: LD_INT 112
32959: PUSH
32960: LD_INT 113
32962: PUSH
32963: LD_INT 114
32965: PUSH
32966: LD_INT 115
32968: PUSH
32969: LD_INT 116
32971: PUSH
32972: LD_INT 117
32974: PUSH
32975: LD_INT 118
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: LIST
32993: LIST
32994: LIST
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: ST_TO_ADDR
// if result then
33002: LD_VAR 0 1
33006: IFFALSE 33295
// begin normal :=  ;
33008: LD_ADDR_VAR 0 3
33012: PUSH
33013: LD_STRING 
33015: ST_TO_ADDR
// hardcore :=  ;
33016: LD_ADDR_VAR 0 4
33020: PUSH
33021: LD_STRING 
33023: ST_TO_ADDR
// for i = 1 to normalCounter do
33024: LD_ADDR_VAR 0 5
33028: PUSH
33029: DOUBLE
33030: LD_INT 1
33032: DEC
33033: ST_TO_ADDR
33034: LD_EXP 64
33038: PUSH
33039: FOR_TO
33040: IFFALSE 33141
// begin tmp := 0 ;
33042: LD_ADDR_VAR 0 2
33046: PUSH
33047: LD_STRING 0
33049: ST_TO_ADDR
// if result [ 1 ] then
33050: LD_VAR 0 1
33054: PUSH
33055: LD_INT 1
33057: ARRAY
33058: IFFALSE 33123
// if result [ 1 ] [ 1 ] = i then
33060: LD_VAR 0 1
33064: PUSH
33065: LD_INT 1
33067: ARRAY
33068: PUSH
33069: LD_INT 1
33071: ARRAY
33072: PUSH
33073: LD_VAR 0 5
33077: EQUAL
33078: IFFALSE 33123
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33080: LD_ADDR_VAR 0 1
33084: PUSH
33085: LD_VAR 0 1
33089: PPUSH
33090: LD_INT 1
33092: PPUSH
33093: LD_VAR 0 1
33097: PUSH
33098: LD_INT 1
33100: ARRAY
33101: PPUSH
33102: LD_INT 1
33104: PPUSH
33105: CALL_OW 3
33109: PPUSH
33110: CALL_OW 1
33114: ST_TO_ADDR
// tmp := 1 ;
33115: LD_ADDR_VAR 0 2
33119: PUSH
33120: LD_STRING 1
33122: ST_TO_ADDR
// end ; normal := normal & tmp ;
33123: LD_ADDR_VAR 0 3
33127: PUSH
33128: LD_VAR 0 3
33132: PUSH
33133: LD_VAR 0 2
33137: STR
33138: ST_TO_ADDR
// end ;
33139: GO 33039
33141: POP
33142: POP
// for i = 1 to hardcoreCounter do
33143: LD_ADDR_VAR 0 5
33147: PUSH
33148: DOUBLE
33149: LD_INT 1
33151: DEC
33152: ST_TO_ADDR
33153: LD_EXP 65
33157: PUSH
33158: FOR_TO
33159: IFFALSE 33264
// begin tmp := 0 ;
33161: LD_ADDR_VAR 0 2
33165: PUSH
33166: LD_STRING 0
33168: ST_TO_ADDR
// if result [ 2 ] then
33169: LD_VAR 0 1
33173: PUSH
33174: LD_INT 2
33176: ARRAY
33177: IFFALSE 33246
// if result [ 2 ] [ 1 ] = 100 + i then
33179: LD_VAR 0 1
33183: PUSH
33184: LD_INT 2
33186: ARRAY
33187: PUSH
33188: LD_INT 1
33190: ARRAY
33191: PUSH
33192: LD_INT 100
33194: PUSH
33195: LD_VAR 0 5
33199: PLUS
33200: EQUAL
33201: IFFALSE 33246
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33203: LD_ADDR_VAR 0 1
33207: PUSH
33208: LD_VAR 0 1
33212: PPUSH
33213: LD_INT 2
33215: PPUSH
33216: LD_VAR 0 1
33220: PUSH
33221: LD_INT 2
33223: ARRAY
33224: PPUSH
33225: LD_INT 1
33227: PPUSH
33228: CALL_OW 3
33232: PPUSH
33233: CALL_OW 1
33237: ST_TO_ADDR
// tmp := 1 ;
33238: LD_ADDR_VAR 0 2
33242: PUSH
33243: LD_STRING 1
33245: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33246: LD_ADDR_VAR 0 4
33250: PUSH
33251: LD_VAR 0 4
33255: PUSH
33256: LD_VAR 0 2
33260: STR
33261: ST_TO_ADDR
// end ;
33262: GO 33158
33264: POP
33265: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
33266: LD_STRING getStreamItemsFromMission("
33268: PUSH
33269: LD_VAR 0 3
33273: STR
33274: PUSH
33275: LD_STRING ","
33277: STR
33278: PUSH
33279: LD_VAR 0 4
33283: STR
33284: PUSH
33285: LD_STRING ")
33287: STR
33288: PPUSH
33289: CALL_OW 559
// end else
33293: GO 33302
// ToLua ( getStreamItemsFromMission("","") ) ;
33295: LD_STRING getStreamItemsFromMission("","")
33297: PPUSH
33298: CALL_OW 559
// end ;
33302: LD_VAR 0 1
33306: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
33307: LD_EXP 63
33311: PUSH
33312: LD_EXP 68
33316: AND
33317: IFFALSE 33441
33319: GO 33321
33321: DISABLE
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
// begin enable ;
33326: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
33327: LD_ADDR_VAR 0 2
33331: PUSH
33332: LD_INT 22
33334: PUSH
33335: LD_OWVAR 2
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 34
33349: PUSH
33350: LD_INT 7
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 34
33359: PUSH
33360: LD_INT 45
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: LD_INT 34
33369: PUSH
33370: LD_INT 28
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 34
33379: PUSH
33380: LD_INT 47
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: LIST
33391: LIST
33392: LIST
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PPUSH
33398: CALL_OW 69
33402: ST_TO_ADDR
// if not tmp then
33403: LD_VAR 0 2
33407: NOT
33408: IFFALSE 33412
// exit ;
33410: GO 33441
// for i in tmp do
33412: LD_ADDR_VAR 0 1
33416: PUSH
33417: LD_VAR 0 2
33421: PUSH
33422: FOR_IN
33423: IFFALSE 33439
// begin SetLives ( i , 0 ) ;
33425: LD_VAR 0 1
33429: PPUSH
33430: LD_INT 0
33432: PPUSH
33433: CALL_OW 234
// end ;
33437: GO 33422
33439: POP
33440: POP
// end ;
33441: PPOPN 2
33443: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
33444: LD_EXP 63
33448: PUSH
33449: LD_EXP 69
33453: AND
33454: IFFALSE 33538
33456: GO 33458
33458: DISABLE
33459: LD_INT 0
33461: PPUSH
33462: PPUSH
// begin enable ;
33463: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
33464: LD_ADDR_VAR 0 2
33468: PUSH
33469: LD_INT 22
33471: PUSH
33472: LD_OWVAR 2
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 32
33483: PUSH
33484: LD_INT 3
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: EMPTY
33492: LIST
33493: LIST
33494: PPUSH
33495: CALL_OW 69
33499: ST_TO_ADDR
// if not tmp then
33500: LD_VAR 0 2
33504: NOT
33505: IFFALSE 33509
// exit ;
33507: GO 33538
// for i in tmp do
33509: LD_ADDR_VAR 0 1
33513: PUSH
33514: LD_VAR 0 2
33518: PUSH
33519: FOR_IN
33520: IFFALSE 33536
// begin SetLives ( i , 0 ) ;
33522: LD_VAR 0 1
33526: PPUSH
33527: LD_INT 0
33529: PPUSH
33530: CALL_OW 234
// end ;
33534: GO 33519
33536: POP
33537: POP
// end ;
33538: PPOPN 2
33540: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
33541: LD_EXP 63
33545: PUSH
33546: LD_EXP 66
33550: AND
33551: IFFALSE 33644
33553: GO 33555
33555: DISABLE
33556: LD_INT 0
33558: PPUSH
// begin enable ;
33559: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
33560: LD_ADDR_VAR 0 1
33564: PUSH
33565: LD_INT 22
33567: PUSH
33568: LD_OWVAR 2
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 2
33579: PUSH
33580: LD_INT 25
33582: PUSH
33583: LD_INT 5
33585: PUSH
33586: EMPTY
33587: LIST
33588: LIST
33589: PUSH
33590: LD_INT 25
33592: PUSH
33593: LD_INT 9
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 25
33602: PUSH
33603: LD_INT 8
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: PUSH
33616: EMPTY
33617: LIST
33618: LIST
33619: PPUSH
33620: CALL_OW 69
33624: PUSH
33625: FOR_IN
33626: IFFALSE 33642
// begin SetClass ( i , 1 ) ;
33628: LD_VAR 0 1
33632: PPUSH
33633: LD_INT 1
33635: PPUSH
33636: CALL_OW 336
// end ;
33640: GO 33625
33642: POP
33643: POP
// end ;
33644: PPOPN 1
33646: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
33647: LD_EXP 63
33651: PUSH
33652: LD_EXP 67
33656: AND
33657: PUSH
33658: LD_OWVAR 65
33662: PUSH
33663: LD_INT 7
33665: LESS
33666: AND
33667: IFFALSE 33681
33669: GO 33671
33671: DISABLE
// begin enable ;
33672: ENABLE
// game_speed := 7 ;
33673: LD_ADDR_OWVAR 65
33677: PUSH
33678: LD_INT 7
33680: ST_TO_ADDR
// end ;
33681: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
33682: LD_EXP 63
33686: PUSH
33687: LD_EXP 70
33691: AND
33692: IFFALSE 33894
33694: GO 33696
33696: DISABLE
33697: LD_INT 0
33699: PPUSH
33700: PPUSH
33701: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
33702: LD_ADDR_VAR 0 3
33706: PUSH
33707: LD_INT 81
33709: PUSH
33710: LD_OWVAR 2
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 21
33721: PUSH
33722: LD_INT 1
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: EMPTY
33730: LIST
33731: LIST
33732: PPUSH
33733: CALL_OW 69
33737: ST_TO_ADDR
// if not tmp then
33738: LD_VAR 0 3
33742: NOT
33743: IFFALSE 33747
// exit ;
33745: GO 33894
// if tmp > 5 then
33747: LD_VAR 0 3
33751: PUSH
33752: LD_INT 5
33754: GREATER
33755: IFFALSE 33767
// k := 5 else
33757: LD_ADDR_VAR 0 2
33761: PUSH
33762: LD_INT 5
33764: ST_TO_ADDR
33765: GO 33777
// k := tmp ;
33767: LD_ADDR_VAR 0 2
33771: PUSH
33772: LD_VAR 0 3
33776: ST_TO_ADDR
// for i := 1 to k do
33777: LD_ADDR_VAR 0 1
33781: PUSH
33782: DOUBLE
33783: LD_INT 1
33785: DEC
33786: ST_TO_ADDR
33787: LD_VAR 0 2
33791: PUSH
33792: FOR_TO
33793: IFFALSE 33892
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
33795: LD_VAR 0 3
33799: PUSH
33800: LD_VAR 0 1
33804: ARRAY
33805: PPUSH
33806: LD_VAR 0 1
33810: PUSH
33811: LD_INT 4
33813: MOD
33814: PUSH
33815: LD_INT 1
33817: PLUS
33818: PPUSH
33819: CALL_OW 259
33823: PUSH
33824: LD_INT 10
33826: LESS
33827: IFFALSE 33890
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
33829: LD_VAR 0 3
33833: PUSH
33834: LD_VAR 0 1
33838: ARRAY
33839: PPUSH
33840: LD_VAR 0 1
33844: PUSH
33845: LD_INT 4
33847: MOD
33848: PUSH
33849: LD_INT 1
33851: PLUS
33852: PPUSH
33853: LD_VAR 0 3
33857: PUSH
33858: LD_VAR 0 1
33862: ARRAY
33863: PPUSH
33864: LD_VAR 0 1
33868: PUSH
33869: LD_INT 4
33871: MOD
33872: PUSH
33873: LD_INT 1
33875: PLUS
33876: PPUSH
33877: CALL_OW 259
33881: PUSH
33882: LD_INT 1
33884: PLUS
33885: PPUSH
33886: CALL_OW 237
33890: GO 33792
33892: POP
33893: POP
// end ;
33894: PPOPN 3
33896: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
33897: LD_EXP 63
33901: PUSH
33902: LD_EXP 71
33906: AND
33907: IFFALSE 33927
33909: GO 33911
33911: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
33912: LD_INT 4
33914: PPUSH
33915: LD_OWVAR 2
33919: PPUSH
33920: LD_INT 0
33922: PPUSH
33923: CALL_OW 324
33927: END
// every 0 0$1 trigger StreamModeActive and sShovel do
33928: LD_EXP 63
33932: PUSH
33933: LD_EXP 100
33937: AND
33938: IFFALSE 33958
33940: GO 33942
33942: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
33943: LD_INT 19
33945: PPUSH
33946: LD_OWVAR 2
33950: PPUSH
33951: LD_INT 0
33953: PPUSH
33954: CALL_OW 324
33958: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
33959: LD_EXP 63
33963: PUSH
33964: LD_EXP 72
33968: AND
33969: IFFALSE 34071
33971: GO 33973
33973: DISABLE
33974: LD_INT 0
33976: PPUSH
33977: PPUSH
// begin enable ;
33978: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
33979: LD_ADDR_VAR 0 2
33983: PUSH
33984: LD_INT 22
33986: PUSH
33987: LD_OWVAR 2
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: LD_INT 34
34001: PUSH
34002: LD_INT 11
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 34
34011: PUSH
34012: LD_INT 30
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PPUSH
34028: CALL_OW 69
34032: ST_TO_ADDR
// if not tmp then
34033: LD_VAR 0 2
34037: NOT
34038: IFFALSE 34042
// exit ;
34040: GO 34071
// for i in tmp do
34042: LD_ADDR_VAR 0 1
34046: PUSH
34047: LD_VAR 0 2
34051: PUSH
34052: FOR_IN
34053: IFFALSE 34069
// begin SetLives ( i , 0 ) ;
34055: LD_VAR 0 1
34059: PPUSH
34060: LD_INT 0
34062: PPUSH
34063: CALL_OW 234
// end ;
34067: GO 34052
34069: POP
34070: POP
// end ;
34071: PPOPN 2
34073: END
// every 0 0$1 trigger StreamModeActive and sBunker do
34074: LD_EXP 63
34078: PUSH
34079: LD_EXP 73
34083: AND
34084: IFFALSE 34104
34086: GO 34088
34088: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
34089: LD_INT 32
34091: PPUSH
34092: LD_OWVAR 2
34096: PPUSH
34097: LD_INT 0
34099: PPUSH
34100: CALL_OW 324
34104: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
34105: LD_EXP 63
34109: PUSH
34110: LD_EXP 74
34114: AND
34115: IFFALSE 34296
34117: GO 34119
34119: DISABLE
34120: LD_INT 0
34122: PPUSH
34123: PPUSH
34124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
34125: LD_ADDR_VAR 0 2
34129: PUSH
34130: LD_INT 22
34132: PUSH
34133: LD_OWVAR 2
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 33
34144: PUSH
34145: LD_INT 3
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PPUSH
34156: CALL_OW 69
34160: ST_TO_ADDR
// if not tmp then
34161: LD_VAR 0 2
34165: NOT
34166: IFFALSE 34170
// exit ;
34168: GO 34296
// side := 0 ;
34170: LD_ADDR_VAR 0 3
34174: PUSH
34175: LD_INT 0
34177: ST_TO_ADDR
// for i := 1 to 8 do
34178: LD_ADDR_VAR 0 1
34182: PUSH
34183: DOUBLE
34184: LD_INT 1
34186: DEC
34187: ST_TO_ADDR
34188: LD_INT 8
34190: PUSH
34191: FOR_TO
34192: IFFALSE 34240
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
34194: LD_OWVAR 2
34198: PUSH
34199: LD_VAR 0 1
34203: NONEQUAL
34204: PUSH
34205: LD_OWVAR 2
34209: PPUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL_OW 81
34219: PUSH
34220: LD_INT 2
34222: EQUAL
34223: AND
34224: IFFALSE 34238
// begin side := i ;
34226: LD_ADDR_VAR 0 3
34230: PUSH
34231: LD_VAR 0 1
34235: ST_TO_ADDR
// break ;
34236: GO 34240
// end ;
34238: GO 34191
34240: POP
34241: POP
// if not side then
34242: LD_VAR 0 3
34246: NOT
34247: IFFALSE 34251
// exit ;
34249: GO 34296
// for i := 1 to tmp do
34251: LD_ADDR_VAR 0 1
34255: PUSH
34256: DOUBLE
34257: LD_INT 1
34259: DEC
34260: ST_TO_ADDR
34261: LD_VAR 0 2
34265: PUSH
34266: FOR_TO
34267: IFFALSE 34294
// if Prob ( 60 ) then
34269: LD_INT 60
34271: PPUSH
34272: CALL_OW 13
34276: IFFALSE 34292
// SetSide ( i , side ) ;
34278: LD_VAR 0 1
34282: PPUSH
34283: LD_VAR 0 3
34287: PPUSH
34288: CALL_OW 235
34292: GO 34266
34294: POP
34295: POP
// end ;
34296: PPOPN 3
34298: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
34299: LD_EXP 63
34303: PUSH
34304: LD_EXP 76
34308: AND
34309: IFFALSE 34428
34311: GO 34313
34313: DISABLE
34314: LD_INT 0
34316: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
34317: LD_ADDR_VAR 0 1
34321: PUSH
34322: LD_INT 22
34324: PUSH
34325: LD_OWVAR 2
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: LD_INT 21
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: PUSH
34344: LD_INT 3
34346: PUSH
34347: LD_INT 23
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: EMPTY
34362: LIST
34363: LIST
34364: LIST
34365: PPUSH
34366: CALL_OW 69
34370: PUSH
34371: FOR_IN
34372: IFFALSE 34426
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
34374: LD_VAR 0 1
34378: PPUSH
34379: CALL_OW 257
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 2
34389: PUSH
34390: LD_INT 3
34392: PUSH
34393: LD_INT 4
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: IN
34402: IFFALSE 34424
// SetClass ( un , rand ( 1 , 4 ) ) ;
34404: LD_VAR 0 1
34408: PPUSH
34409: LD_INT 1
34411: PPUSH
34412: LD_INT 4
34414: PPUSH
34415: CALL_OW 12
34419: PPUSH
34420: CALL_OW 336
34424: GO 34371
34426: POP
34427: POP
// end ;
34428: PPOPN 1
34430: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
34431: LD_EXP 63
34435: PUSH
34436: LD_EXP 75
34440: AND
34441: IFFALSE 34520
34443: GO 34445
34445: DISABLE
34446: LD_INT 0
34448: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34449: LD_ADDR_VAR 0 1
34453: PUSH
34454: LD_INT 22
34456: PUSH
34457: LD_OWVAR 2
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PPUSH
34480: CALL_OW 69
34484: ST_TO_ADDR
// if not tmp then
34485: LD_VAR 0 1
34489: NOT
34490: IFFALSE 34494
// exit ;
34492: GO 34520
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
34494: LD_VAR 0 1
34498: PUSH
34499: LD_INT 1
34501: PPUSH
34502: LD_VAR 0 1
34506: PPUSH
34507: CALL_OW 12
34511: ARRAY
34512: PPUSH
34513: LD_INT 100
34515: PPUSH
34516: CALL_OW 234
// end ;
34520: PPOPN 1
34522: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
34523: LD_EXP 63
34527: PUSH
34528: LD_EXP 77
34532: AND
34533: IFFALSE 34631
34535: GO 34537
34537: DISABLE
34538: LD_INT 0
34540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
34541: LD_ADDR_VAR 0 1
34545: PUSH
34546: LD_INT 22
34548: PUSH
34549: LD_OWVAR 2
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: PUSH
34558: LD_INT 21
34560: PUSH
34561: LD_INT 1
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PPUSH
34572: CALL_OW 69
34576: ST_TO_ADDR
// if not tmp then
34577: LD_VAR 0 1
34581: NOT
34582: IFFALSE 34586
// exit ;
34584: GO 34631
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
34586: LD_VAR 0 1
34590: PUSH
34591: LD_INT 1
34593: PPUSH
34594: LD_VAR 0 1
34598: PPUSH
34599: CALL_OW 12
34603: ARRAY
34604: PPUSH
34605: LD_INT 1
34607: PPUSH
34608: LD_INT 4
34610: PPUSH
34611: CALL_OW 12
34615: PPUSH
34616: LD_INT 3000
34618: PPUSH
34619: LD_INT 9000
34621: PPUSH
34622: CALL_OW 12
34626: PPUSH
34627: CALL_OW 492
// end ;
34631: PPOPN 1
34633: END
// every 0 0$1 trigger StreamModeActive and sDepot do
34634: LD_EXP 63
34638: PUSH
34639: LD_EXP 78
34643: AND
34644: IFFALSE 34664
34646: GO 34648
34648: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
34649: LD_INT 1
34651: PPUSH
34652: LD_OWVAR 2
34656: PPUSH
34657: LD_INT 0
34659: PPUSH
34660: CALL_OW 324
34664: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
34665: LD_EXP 63
34669: PUSH
34670: LD_EXP 79
34674: AND
34675: IFFALSE 34758
34677: GO 34679
34679: DISABLE
34680: LD_INT 0
34682: PPUSH
34683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
34684: LD_ADDR_VAR 0 2
34688: PUSH
34689: LD_INT 22
34691: PUSH
34692: LD_OWVAR 2
34696: PUSH
34697: EMPTY
34698: LIST
34699: LIST
34700: PUSH
34701: LD_INT 21
34703: PUSH
34704: LD_INT 3
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PPUSH
34715: CALL_OW 69
34719: ST_TO_ADDR
// if not tmp then
34720: LD_VAR 0 2
34724: NOT
34725: IFFALSE 34729
// exit ;
34727: GO 34758
// for i in tmp do
34729: LD_ADDR_VAR 0 1
34733: PUSH
34734: LD_VAR 0 2
34738: PUSH
34739: FOR_IN
34740: IFFALSE 34756
// SetBLevel ( i , 10 ) ;
34742: LD_VAR 0 1
34746: PPUSH
34747: LD_INT 10
34749: PPUSH
34750: CALL_OW 241
34754: GO 34739
34756: POP
34757: POP
// end ;
34758: PPOPN 2
34760: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
34761: LD_EXP 63
34765: PUSH
34766: LD_EXP 80
34770: AND
34771: IFFALSE 34882
34773: GO 34775
34775: DISABLE
34776: LD_INT 0
34778: PPUSH
34779: PPUSH
34780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_INT 22
34788: PUSH
34789: LD_OWVAR 2
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 25
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PPUSH
34812: CALL_OW 69
34816: ST_TO_ADDR
// if not tmp then
34817: LD_VAR 0 3
34821: NOT
34822: IFFALSE 34826
// exit ;
34824: GO 34882
// un := tmp [ rand ( 1 , tmp ) ] ;
34826: LD_ADDR_VAR 0 2
34830: PUSH
34831: LD_VAR 0 3
34835: PUSH
34836: LD_INT 1
34838: PPUSH
34839: LD_VAR 0 3
34843: PPUSH
34844: CALL_OW 12
34848: ARRAY
34849: ST_TO_ADDR
// if Crawls ( un ) then
34850: LD_VAR 0 2
34854: PPUSH
34855: CALL_OW 318
34859: IFFALSE 34870
// ComWalk ( un ) ;
34861: LD_VAR 0 2
34865: PPUSH
34866: CALL_OW 138
// SetClass ( un , class_sniper ) ;
34870: LD_VAR 0 2
34874: PPUSH
34875: LD_INT 5
34877: PPUSH
34878: CALL_OW 336
// end ;
34882: PPOPN 3
34884: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
34885: LD_EXP 63
34889: PUSH
34890: LD_EXP 81
34894: AND
34895: PUSH
34896: LD_OWVAR 67
34900: PUSH
34901: LD_INT 4
34903: LESS
34904: AND
34905: IFFALSE 34924
34907: GO 34909
34909: DISABLE
// begin Difficulty := Difficulty + 1 ;
34910: LD_ADDR_OWVAR 67
34914: PUSH
34915: LD_OWVAR 67
34919: PUSH
34920: LD_INT 1
34922: PLUS
34923: ST_TO_ADDR
// end ;
34924: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
34925: LD_EXP 63
34929: PUSH
34930: LD_EXP 82
34934: AND
34935: IFFALSE 35038
34937: GO 34939
34939: DISABLE
34940: LD_INT 0
34942: PPUSH
// begin for i := 1 to 5 do
34943: LD_ADDR_VAR 0 1
34947: PUSH
34948: DOUBLE
34949: LD_INT 1
34951: DEC
34952: ST_TO_ADDR
34953: LD_INT 5
34955: PUSH
34956: FOR_TO
34957: IFFALSE 35036
// begin uc_nation := nation_nature ;
34959: LD_ADDR_OWVAR 21
34963: PUSH
34964: LD_INT 0
34966: ST_TO_ADDR
// uc_side := 0 ;
34967: LD_ADDR_OWVAR 20
34971: PUSH
34972: LD_INT 0
34974: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
34975: LD_ADDR_OWVAR 29
34979: PUSH
34980: LD_INT 12
34982: PUSH
34983: LD_INT 12
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: ST_TO_ADDR
// hc_agressivity := 20 ;
34990: LD_ADDR_OWVAR 35
34994: PUSH
34995: LD_INT 20
34997: ST_TO_ADDR
// hc_class := class_tiger ;
34998: LD_ADDR_OWVAR 28
35002: PUSH
35003: LD_INT 14
35005: ST_TO_ADDR
// hc_gallery :=  ;
35006: LD_ADDR_OWVAR 33
35010: PUSH
35011: LD_STRING 
35013: ST_TO_ADDR
// hc_name :=  ;
35014: LD_ADDR_OWVAR 26
35018: PUSH
35019: LD_STRING 
35021: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
35022: CALL_OW 44
35026: PPUSH
35027: LD_INT 0
35029: PPUSH
35030: CALL_OW 51
// end ;
35034: GO 34956
35036: POP
35037: POP
// end ;
35038: PPOPN 1
35040: END
// every 0 0$1 trigger StreamModeActive and sBomb do
35041: LD_EXP 63
35045: PUSH
35046: LD_EXP 83
35050: AND
35051: IFFALSE 35060
35053: GO 35055
35055: DISABLE
// StreamSibBomb ;
35056: CALL 35061 0 0
35060: END
// export function StreamSibBomb ; var i , x , y ; begin
35061: LD_INT 0
35063: PPUSH
35064: PPUSH
35065: PPUSH
35066: PPUSH
// result := false ;
35067: LD_ADDR_VAR 0 1
35071: PUSH
35072: LD_INT 0
35074: ST_TO_ADDR
// for i := 1 to 16 do
35075: LD_ADDR_VAR 0 2
35079: PUSH
35080: DOUBLE
35081: LD_INT 1
35083: DEC
35084: ST_TO_ADDR
35085: LD_INT 16
35087: PUSH
35088: FOR_TO
35089: IFFALSE 35288
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35091: LD_ADDR_VAR 0 3
35095: PUSH
35096: LD_INT 10
35098: PUSH
35099: LD_INT 20
35101: PUSH
35102: LD_INT 30
35104: PUSH
35105: LD_INT 40
35107: PUSH
35108: LD_INT 50
35110: PUSH
35111: LD_INT 60
35113: PUSH
35114: LD_INT 70
35116: PUSH
35117: LD_INT 80
35119: PUSH
35120: LD_INT 90
35122: PUSH
35123: LD_INT 100
35125: PUSH
35126: LD_INT 110
35128: PUSH
35129: LD_INT 120
35131: PUSH
35132: LD_INT 130
35134: PUSH
35135: LD_INT 140
35137: PUSH
35138: LD_INT 150
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 1
35160: PPUSH
35161: LD_INT 15
35163: PPUSH
35164: CALL_OW 12
35168: ARRAY
35169: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
35170: LD_ADDR_VAR 0 4
35174: PUSH
35175: LD_INT 10
35177: PUSH
35178: LD_INT 20
35180: PUSH
35181: LD_INT 30
35183: PUSH
35184: LD_INT 40
35186: PUSH
35187: LD_INT 50
35189: PUSH
35190: LD_INT 60
35192: PUSH
35193: LD_INT 70
35195: PUSH
35196: LD_INT 80
35198: PUSH
35199: LD_INT 90
35201: PUSH
35202: LD_INT 100
35204: PUSH
35205: LD_INT 110
35207: PUSH
35208: LD_INT 120
35210: PUSH
35211: LD_INT 130
35213: PUSH
35214: LD_INT 140
35216: PUSH
35217: LD_INT 150
35219: PUSH
35220: EMPTY
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: PPUSH
35240: LD_INT 15
35242: PPUSH
35243: CALL_OW 12
35247: ARRAY
35248: ST_TO_ADDR
// if ValidHex ( x , y ) then
35249: LD_VAR 0 3
35253: PPUSH
35254: LD_VAR 0 4
35258: PPUSH
35259: CALL_OW 488
35263: IFFALSE 35286
// begin result := [ x , y ] ;
35265: LD_ADDR_VAR 0 1
35269: PUSH
35270: LD_VAR 0 3
35274: PUSH
35275: LD_VAR 0 4
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: ST_TO_ADDR
// break ;
35284: GO 35288
// end ; end ;
35286: GO 35088
35288: POP
35289: POP
// if result then
35290: LD_VAR 0 1
35294: IFFALSE 35354
// begin ToLua ( playSibBomb() ) ;
35296: LD_STRING playSibBomb()
35298: PPUSH
35299: CALL_OW 559
// wait ( 0 0$14 ) ;
35303: LD_INT 490
35305: PPUSH
35306: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
35310: LD_VAR 0 1
35314: PUSH
35315: LD_INT 1
35317: ARRAY
35318: PPUSH
35319: LD_VAR 0 1
35323: PUSH
35324: LD_INT 2
35326: ARRAY
35327: PPUSH
35328: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
35332: LD_VAR 0 1
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PPUSH
35341: LD_VAR 0 1
35345: PUSH
35346: LD_INT 2
35348: ARRAY
35349: PPUSH
35350: CALL_OW 429
// end ; end ;
35354: LD_VAR 0 1
35358: RET
// every 0 0$1 trigger StreamModeActive and sReset do
35359: LD_EXP 63
35363: PUSH
35364: LD_EXP 85
35368: AND
35369: IFFALSE 35381
35371: GO 35373
35373: DISABLE
// YouLost (  ) ;
35374: LD_STRING 
35376: PPUSH
35377: CALL_OW 104
35381: END
// every 0 0$1 trigger StreamModeActive and sFog do
35382: LD_EXP 63
35386: PUSH
35387: LD_EXP 84
35391: AND
35392: IFFALSE 35406
35394: GO 35396
35396: DISABLE
// FogOff ( your_side ) ;
35397: LD_OWVAR 2
35401: PPUSH
35402: CALL_OW 344
35406: END
// every 0 0$1 trigger StreamModeActive and sSun do
35407: LD_EXP 63
35411: PUSH
35412: LD_EXP 86
35416: AND
35417: IFFALSE 35445
35419: GO 35421
35421: DISABLE
// begin solar_recharge_percent := 0 ;
35422: LD_ADDR_OWVAR 79
35426: PUSH
35427: LD_INT 0
35429: ST_TO_ADDR
// wait ( 5 5$00 ) ;
35430: LD_INT 10500
35432: PPUSH
35433: CALL_OW 67
// solar_recharge_percent := 100 ;
35437: LD_ADDR_OWVAR 79
35441: PUSH
35442: LD_INT 100
35444: ST_TO_ADDR
// end ;
35445: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
35446: LD_EXP 63
35450: PUSH
35451: LD_EXP 87
35455: AND
35456: IFFALSE 35695
35458: GO 35460
35460: DISABLE
35461: LD_INT 0
35463: PPUSH
35464: PPUSH
35465: PPUSH
// begin tmp := [ ] ;
35466: LD_ADDR_VAR 0 3
35470: PUSH
35471: EMPTY
35472: ST_TO_ADDR
// for i := 1 to 6 do
35473: LD_ADDR_VAR 0 1
35477: PUSH
35478: DOUBLE
35479: LD_INT 1
35481: DEC
35482: ST_TO_ADDR
35483: LD_INT 6
35485: PUSH
35486: FOR_TO
35487: IFFALSE 35592
// begin uc_nation := nation_nature ;
35489: LD_ADDR_OWVAR 21
35493: PUSH
35494: LD_INT 0
35496: ST_TO_ADDR
// uc_side := 0 ;
35497: LD_ADDR_OWVAR 20
35501: PUSH
35502: LD_INT 0
35504: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
35505: LD_ADDR_OWVAR 29
35509: PUSH
35510: LD_INT 12
35512: PUSH
35513: LD_INT 12
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: ST_TO_ADDR
// hc_agressivity := 20 ;
35520: LD_ADDR_OWVAR 35
35524: PUSH
35525: LD_INT 20
35527: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
35528: LD_ADDR_OWVAR 28
35532: PUSH
35533: LD_INT 17
35535: ST_TO_ADDR
// hc_gallery :=  ;
35536: LD_ADDR_OWVAR 33
35540: PUSH
35541: LD_STRING 
35543: ST_TO_ADDR
// hc_name :=  ;
35544: LD_ADDR_OWVAR 26
35548: PUSH
35549: LD_STRING 
35551: ST_TO_ADDR
// un := CreateHuman ;
35552: LD_ADDR_VAR 0 2
35556: PUSH
35557: CALL_OW 44
35561: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
35562: LD_VAR 0 2
35566: PPUSH
35567: LD_INT 1
35569: PPUSH
35570: CALL_OW 51
// tmp := tmp ^ un ;
35574: LD_ADDR_VAR 0 3
35578: PUSH
35579: LD_VAR 0 3
35583: PUSH
35584: LD_VAR 0 2
35588: ADD
35589: ST_TO_ADDR
// end ;
35590: GO 35486
35592: POP
35593: POP
// repeat wait ( 0 0$1 ) ;
35594: LD_INT 35
35596: PPUSH
35597: CALL_OW 67
// for un in tmp do
35601: LD_ADDR_VAR 0 2
35605: PUSH
35606: LD_VAR 0 3
35610: PUSH
35611: FOR_IN
35612: IFFALSE 35686
// begin if IsDead ( un ) then
35614: LD_VAR 0 2
35618: PPUSH
35619: CALL_OW 301
35623: IFFALSE 35643
// begin tmp := tmp diff un ;
35625: LD_ADDR_VAR 0 3
35629: PUSH
35630: LD_VAR 0 3
35634: PUSH
35635: LD_VAR 0 2
35639: DIFF
35640: ST_TO_ADDR
// continue ;
35641: GO 35611
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
35643: LD_VAR 0 2
35647: PPUSH
35648: LD_INT 3
35650: PUSH
35651: LD_INT 22
35653: PUSH
35654: LD_INT 0
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: PPUSH
35665: CALL_OW 69
35669: PPUSH
35670: LD_VAR 0 2
35674: PPUSH
35675: CALL_OW 74
35679: PPUSH
35680: CALL_OW 115
// end ;
35684: GO 35611
35686: POP
35687: POP
// until not tmp ;
35688: LD_VAR 0 3
35692: NOT
35693: IFFALSE 35594
// end ;
35695: PPOPN 3
35697: END
// every 0 0$1 trigger StreamModeActive and sTroll do
35698: LD_EXP 63
35702: PUSH
35703: LD_EXP 88
35707: AND
35708: IFFALSE 35762
35710: GO 35712
35712: DISABLE
// begin ToLua ( displayTroll(); ) ;
35713: LD_STRING displayTroll();
35715: PPUSH
35716: CALL_OW 559
// wait ( 3 3$00 ) ;
35720: LD_INT 6300
35722: PPUSH
35723: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35727: LD_STRING hideTroll();
35729: PPUSH
35730: CALL_OW 559
// wait ( 1 1$00 ) ;
35734: LD_INT 2100
35736: PPUSH
35737: CALL_OW 67
// ToLua ( displayTroll(); ) ;
35741: LD_STRING displayTroll();
35743: PPUSH
35744: CALL_OW 559
// wait ( 1 1$00 ) ;
35748: LD_INT 2100
35750: PPUSH
35751: CALL_OW 67
// ToLua ( hideTroll(); ) ;
35755: LD_STRING hideTroll();
35757: PPUSH
35758: CALL_OW 559
// end ;
35762: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
35763: LD_EXP 63
35767: PUSH
35768: LD_EXP 89
35772: AND
35773: IFFALSE 35836
35775: GO 35777
35777: DISABLE
35778: LD_INT 0
35780: PPUSH
// begin p := 0 ;
35781: LD_ADDR_VAR 0 1
35785: PUSH
35786: LD_INT 0
35788: ST_TO_ADDR
// repeat game_speed := 1 ;
35789: LD_ADDR_OWVAR 65
35793: PUSH
35794: LD_INT 1
35796: ST_TO_ADDR
// wait ( 0 0$1 ) ;
35797: LD_INT 35
35799: PPUSH
35800: CALL_OW 67
// p := p + 1 ;
35804: LD_ADDR_VAR 0 1
35808: PUSH
35809: LD_VAR 0 1
35813: PUSH
35814: LD_INT 1
35816: PLUS
35817: ST_TO_ADDR
// until p >= 60 ;
35818: LD_VAR 0 1
35822: PUSH
35823: LD_INT 60
35825: GREATEREQUAL
35826: IFFALSE 35789
// game_speed := 4 ;
35828: LD_ADDR_OWVAR 65
35832: PUSH
35833: LD_INT 4
35835: ST_TO_ADDR
// end ;
35836: PPOPN 1
35838: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
35839: LD_EXP 63
35843: PUSH
35844: LD_EXP 90
35848: AND
35849: IFFALSE 35995
35851: GO 35853
35853: DISABLE
35854: LD_INT 0
35856: PPUSH
35857: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35858: LD_ADDR_VAR 0 1
35862: PUSH
35863: LD_INT 22
35865: PUSH
35866: LD_OWVAR 2
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: LD_INT 2
35877: PUSH
35878: LD_INT 30
35880: PUSH
35881: LD_INT 0
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 30
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: LIST
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PPUSH
35907: CALL_OW 69
35911: ST_TO_ADDR
// if not depot then
35912: LD_VAR 0 1
35916: NOT
35917: IFFALSE 35921
// exit ;
35919: GO 35995
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
35921: LD_ADDR_VAR 0 2
35925: PUSH
35926: LD_VAR 0 1
35930: PUSH
35931: LD_INT 1
35933: PPUSH
35934: LD_VAR 0 1
35938: PPUSH
35939: CALL_OW 12
35943: ARRAY
35944: PPUSH
35945: CALL_OW 274
35949: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
35950: LD_VAR 0 2
35954: PPUSH
35955: LD_INT 1
35957: PPUSH
35958: LD_INT 0
35960: PPUSH
35961: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
35965: LD_VAR 0 2
35969: PPUSH
35970: LD_INT 2
35972: PPUSH
35973: LD_INT 0
35975: PPUSH
35976: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
35980: LD_VAR 0 2
35984: PPUSH
35985: LD_INT 3
35987: PPUSH
35988: LD_INT 0
35990: PPUSH
35991: CALL_OW 277
// end ;
35995: PPOPN 2
35997: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
35998: LD_EXP 63
36002: PUSH
36003: LD_EXP 91
36007: AND
36008: IFFALSE 36105
36010: GO 36012
36012: DISABLE
36013: LD_INT 0
36015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
36016: LD_ADDR_VAR 0 1
36020: PUSH
36021: LD_INT 22
36023: PUSH
36024: LD_OWVAR 2
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 21
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 3
36045: PUSH
36046: LD_INT 23
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: PPUSH
36065: CALL_OW 69
36069: ST_TO_ADDR
// if not tmp then
36070: LD_VAR 0 1
36074: NOT
36075: IFFALSE 36079
// exit ;
36077: GO 36105
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
36079: LD_VAR 0 1
36083: PUSH
36084: LD_INT 1
36086: PPUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 12
36096: ARRAY
36097: PPUSH
36098: LD_INT 200
36100: PPUSH
36101: CALL_OW 234
// end ;
36105: PPOPN 1
36107: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
36108: LD_EXP 63
36112: PUSH
36113: LD_EXP 92
36117: AND
36118: IFFALSE 36197
36120: GO 36122
36122: DISABLE
36123: LD_INT 0
36125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
36126: LD_ADDR_VAR 0 1
36130: PUSH
36131: LD_INT 22
36133: PUSH
36134: LD_OWVAR 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 21
36145: PUSH
36146: LD_INT 2
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PPUSH
36157: CALL_OW 69
36161: ST_TO_ADDR
// if not tmp then
36162: LD_VAR 0 1
36166: NOT
36167: IFFALSE 36171
// exit ;
36169: GO 36197
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
36171: LD_VAR 0 1
36175: PUSH
36176: LD_INT 1
36178: PPUSH
36179: LD_VAR 0 1
36183: PPUSH
36184: CALL_OW 12
36188: ARRAY
36189: PPUSH
36190: LD_INT 60
36192: PPUSH
36193: CALL_OW 234
// end ;
36197: PPOPN 1
36199: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
36200: LD_EXP 63
36204: PUSH
36205: LD_EXP 93
36209: AND
36210: IFFALSE 36309
36212: GO 36214
36214: DISABLE
36215: LD_INT 0
36217: PPUSH
36218: PPUSH
// begin enable ;
36219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
36220: LD_ADDR_VAR 0 1
36224: PUSH
36225: LD_INT 22
36227: PUSH
36228: LD_OWVAR 2
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 61
36239: PUSH
36240: EMPTY
36241: LIST
36242: PUSH
36243: LD_INT 33
36245: PUSH
36246: LD_INT 2
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: PPUSH
36258: CALL_OW 69
36262: ST_TO_ADDR
// if not tmp then
36263: LD_VAR 0 1
36267: NOT
36268: IFFALSE 36272
// exit ;
36270: GO 36309
// for i in tmp do
36272: LD_ADDR_VAR 0 2
36276: PUSH
36277: LD_VAR 0 1
36281: PUSH
36282: FOR_IN
36283: IFFALSE 36307
// if IsControledBy ( i ) then
36285: LD_VAR 0 2
36289: PPUSH
36290: CALL_OW 312
36294: IFFALSE 36305
// ComUnlink ( i ) ;
36296: LD_VAR 0 2
36300: PPUSH
36301: CALL_OW 136
36305: GO 36282
36307: POP
36308: POP
// end ;
36309: PPOPN 2
36311: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
36312: LD_EXP 63
36316: PUSH
36317: LD_EXP 94
36321: AND
36322: IFFALSE 36462
36324: GO 36326
36326: DISABLE
36327: LD_INT 0
36329: PPUSH
36330: PPUSH
// begin ToLua ( displayPowell(); ) ;
36331: LD_STRING displayPowell();
36333: PPUSH
36334: CALL_OW 559
// uc_side := 0 ;
36338: LD_ADDR_OWVAR 20
36342: PUSH
36343: LD_INT 0
36345: ST_TO_ADDR
// uc_nation := 2 ;
36346: LD_ADDR_OWVAR 21
36350: PUSH
36351: LD_INT 2
36353: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
36354: LD_ADDR_OWVAR 37
36358: PUSH
36359: LD_INT 14
36361: ST_TO_ADDR
// vc_engine := engine_siberite ;
36362: LD_ADDR_OWVAR 39
36366: PUSH
36367: LD_INT 3
36369: ST_TO_ADDR
// vc_control := control_apeman ;
36370: LD_ADDR_OWVAR 38
36374: PUSH
36375: LD_INT 5
36377: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
36378: LD_ADDR_OWVAR 40
36382: PUSH
36383: LD_INT 29
36385: ST_TO_ADDR
// un := CreateVehicle ;
36386: LD_ADDR_VAR 0 2
36390: PUSH
36391: CALL_OW 45
36395: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
36396: LD_VAR 0 2
36400: PPUSH
36401: LD_INT 1
36403: PPUSH
36404: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
36408: LD_INT 35
36410: PPUSH
36411: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
36415: LD_VAR 0 2
36419: PPUSH
36420: LD_INT 22
36422: PUSH
36423: LD_OWVAR 2
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PPUSH
36432: CALL_OW 69
36436: PPUSH
36437: LD_VAR 0 2
36441: PPUSH
36442: CALL_OW 74
36446: PPUSH
36447: CALL_OW 115
// until IsDead ( un ) ;
36451: LD_VAR 0 2
36455: PPUSH
36456: CALL_OW 301
36460: IFFALSE 36408
// end ;
36462: PPOPN 2
36464: END
// every 0 0$1 trigger StreamModeActive and sStu do
36465: LD_EXP 63
36469: PUSH
36470: LD_EXP 102
36474: AND
36475: IFFALSE 36491
36477: GO 36479
36479: DISABLE
// begin ToLua ( displayStucuk(); ) ;
36480: LD_STRING displayStucuk();
36482: PPUSH
36483: CALL_OW 559
// ResetFog ;
36487: CALL_OW 335
// end ;
36491: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
36492: LD_EXP 63
36496: PUSH
36497: LD_EXP 95
36501: AND
36502: IFFALSE 36643
36504: GO 36506
36506: DISABLE
36507: LD_INT 0
36509: PPUSH
36510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36511: LD_ADDR_VAR 0 2
36515: PUSH
36516: LD_INT 22
36518: PUSH
36519: LD_OWVAR 2
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PUSH
36528: LD_INT 21
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PPUSH
36542: CALL_OW 69
36546: ST_TO_ADDR
// if not tmp then
36547: LD_VAR 0 2
36551: NOT
36552: IFFALSE 36556
// exit ;
36554: GO 36643
// un := tmp [ rand ( 1 , tmp ) ] ;
36556: LD_ADDR_VAR 0 1
36560: PUSH
36561: LD_VAR 0 2
36565: PUSH
36566: LD_INT 1
36568: PPUSH
36569: LD_VAR 0 2
36573: PPUSH
36574: CALL_OW 12
36578: ARRAY
36579: ST_TO_ADDR
// SetSide ( un , 0 ) ;
36580: LD_VAR 0 1
36584: PPUSH
36585: LD_INT 0
36587: PPUSH
36588: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
36592: LD_VAR 0 1
36596: PPUSH
36597: LD_OWVAR 3
36601: PUSH
36602: LD_VAR 0 1
36606: DIFF
36607: PPUSH
36608: LD_VAR 0 1
36612: PPUSH
36613: CALL_OW 74
36617: PPUSH
36618: CALL_OW 115
// wait ( 0 0$20 ) ;
36622: LD_INT 700
36624: PPUSH
36625: CALL_OW 67
// SetSide ( un , your_side ) ;
36629: LD_VAR 0 1
36633: PPUSH
36634: LD_OWVAR 2
36638: PPUSH
36639: CALL_OW 235
// end ;
36643: PPOPN 2
36645: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
36646: LD_EXP 63
36650: PUSH
36651: LD_EXP 96
36655: AND
36656: IFFALSE 36762
36658: GO 36660
36660: DISABLE
36661: LD_INT 0
36663: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36664: LD_ADDR_VAR 0 1
36668: PUSH
36669: LD_INT 22
36671: PUSH
36672: LD_OWVAR 2
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 2
36683: PUSH
36684: LD_INT 30
36686: PUSH
36687: LD_INT 0
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 30
36696: PUSH
36697: LD_INT 1
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: LIST
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PPUSH
36713: CALL_OW 69
36717: ST_TO_ADDR
// if not depot then
36718: LD_VAR 0 1
36722: NOT
36723: IFFALSE 36727
// exit ;
36725: GO 36762
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
36727: LD_VAR 0 1
36731: PUSH
36732: LD_INT 1
36734: ARRAY
36735: PPUSH
36736: CALL_OW 250
36740: PPUSH
36741: LD_VAR 0 1
36745: PUSH
36746: LD_INT 1
36748: ARRAY
36749: PPUSH
36750: CALL_OW 251
36754: PPUSH
36755: LD_INT 70
36757: PPUSH
36758: CALL_OW 495
// end ;
36762: PPOPN 1
36764: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
36765: LD_EXP 63
36769: PUSH
36770: LD_EXP 97
36774: AND
36775: IFFALSE 36986
36777: GO 36779
36779: DISABLE
36780: LD_INT 0
36782: PPUSH
36783: PPUSH
36784: PPUSH
36785: PPUSH
36786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36787: LD_ADDR_VAR 0 5
36791: PUSH
36792: LD_INT 22
36794: PUSH
36795: LD_OWVAR 2
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 21
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PPUSH
36818: CALL_OW 69
36822: ST_TO_ADDR
// if not tmp then
36823: LD_VAR 0 5
36827: NOT
36828: IFFALSE 36832
// exit ;
36830: GO 36986
// for i in tmp do
36832: LD_ADDR_VAR 0 1
36836: PUSH
36837: LD_VAR 0 5
36841: PUSH
36842: FOR_IN
36843: IFFALSE 36984
// begin d := rand ( 0 , 5 ) ;
36845: LD_ADDR_VAR 0 4
36849: PUSH
36850: LD_INT 0
36852: PPUSH
36853: LD_INT 5
36855: PPUSH
36856: CALL_OW 12
36860: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
36861: LD_ADDR_VAR 0 2
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 250
36875: PPUSH
36876: LD_VAR 0 4
36880: PPUSH
36881: LD_INT 3
36883: PPUSH
36884: LD_INT 12
36886: PPUSH
36887: CALL_OW 12
36891: PPUSH
36892: CALL_OW 272
36896: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
36897: LD_ADDR_VAR 0 3
36901: PUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL_OW 251
36911: PPUSH
36912: LD_VAR 0 4
36916: PPUSH
36917: LD_INT 3
36919: PPUSH
36920: LD_INT 12
36922: PPUSH
36923: CALL_OW 12
36927: PPUSH
36928: CALL_OW 273
36932: ST_TO_ADDR
// if ValidHex ( x , y ) then
36933: LD_VAR 0 2
36937: PPUSH
36938: LD_VAR 0 3
36942: PPUSH
36943: CALL_OW 488
36947: IFFALSE 36982
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
36949: LD_VAR 0 1
36953: PPUSH
36954: LD_VAR 0 2
36958: PPUSH
36959: LD_VAR 0 3
36963: PPUSH
36964: LD_INT 3
36966: PPUSH
36967: LD_INT 6
36969: PPUSH
36970: CALL_OW 12
36974: PPUSH
36975: LD_INT 1
36977: PPUSH
36978: CALL_OW 483
// end ;
36982: GO 36842
36984: POP
36985: POP
// end ;
36986: PPOPN 5
36988: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
36989: LD_EXP 63
36993: PUSH
36994: LD_EXP 98
36998: AND
36999: IFFALSE 37093
37001: GO 37003
37003: DISABLE
37004: LD_INT 0
37006: PPUSH
37007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
37008: LD_ADDR_VAR 0 2
37012: PUSH
37013: LD_INT 22
37015: PUSH
37016: LD_OWVAR 2
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 32
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: LD_INT 21
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: LIST
37049: PPUSH
37050: CALL_OW 69
37054: ST_TO_ADDR
// if not tmp then
37055: LD_VAR 0 2
37059: NOT
37060: IFFALSE 37064
// exit ;
37062: GO 37093
// for i in tmp do
37064: LD_ADDR_VAR 0 1
37068: PUSH
37069: LD_VAR 0 2
37073: PUSH
37074: FOR_IN
37075: IFFALSE 37091
// SetFuel ( i , 0 ) ;
37077: LD_VAR 0 1
37081: PPUSH
37082: LD_INT 0
37084: PPUSH
37085: CALL_OW 240
37089: GO 37074
37091: POP
37092: POP
// end ;
37093: PPOPN 2
37095: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
37096: LD_EXP 63
37100: PUSH
37101: LD_EXP 99
37105: AND
37106: IFFALSE 37172
37108: GO 37110
37110: DISABLE
37111: LD_INT 0
37113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
37114: LD_ADDR_VAR 0 1
37118: PUSH
37119: LD_INT 22
37121: PUSH
37122: LD_OWVAR 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 30
37133: PUSH
37134: LD_INT 29
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PPUSH
37145: CALL_OW 69
37149: ST_TO_ADDR
// if not tmp then
37150: LD_VAR 0 1
37154: NOT
37155: IFFALSE 37159
// exit ;
37157: GO 37172
// DestroyUnit ( tmp [ 1 ] ) ;
37159: LD_VAR 0 1
37163: PUSH
37164: LD_INT 1
37166: ARRAY
37167: PPUSH
37168: CALL_OW 65
// end ;
37172: PPOPN 1
37174: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
37175: LD_EXP 63
37179: PUSH
37180: LD_EXP 101
37184: AND
37185: IFFALSE 37314
37187: GO 37189
37189: DISABLE
37190: LD_INT 0
37192: PPUSH
// begin uc_side := 0 ;
37193: LD_ADDR_OWVAR 20
37197: PUSH
37198: LD_INT 0
37200: ST_TO_ADDR
// uc_nation := nation_arabian ;
37201: LD_ADDR_OWVAR 21
37205: PUSH
37206: LD_INT 2
37208: ST_TO_ADDR
// hc_gallery :=  ;
37209: LD_ADDR_OWVAR 33
37213: PUSH
37214: LD_STRING 
37216: ST_TO_ADDR
// hc_name :=  ;
37217: LD_ADDR_OWVAR 26
37221: PUSH
37222: LD_STRING 
37224: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
37225: LD_INT 1
37227: PPUSH
37228: LD_INT 11
37230: PPUSH
37231: LD_INT 10
37233: PPUSH
37234: CALL_OW 380
// un := CreateHuman ;
37238: LD_ADDR_VAR 0 1
37242: PUSH
37243: CALL_OW 44
37247: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37248: LD_VAR 0 1
37252: PPUSH
37253: LD_INT 1
37255: PPUSH
37256: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37260: LD_INT 35
37262: PPUSH
37263: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37267: LD_VAR 0 1
37271: PPUSH
37272: LD_INT 22
37274: PUSH
37275: LD_OWVAR 2
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PPUSH
37284: CALL_OW 69
37288: PPUSH
37289: LD_VAR 0 1
37293: PPUSH
37294: CALL_OW 74
37298: PPUSH
37299: CALL_OW 115
// until IsDead ( un ) ;
37303: LD_VAR 0 1
37307: PPUSH
37308: CALL_OW 301
37312: IFFALSE 37260
// end ;
37314: PPOPN 1
37316: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
37317: LD_EXP 63
37321: PUSH
37322: LD_EXP 103
37326: AND
37327: IFFALSE 37339
37329: GO 37331
37331: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
37332: LD_STRING earthquake(getX(game), 0, 32)
37334: PPUSH
37335: CALL_OW 559
37339: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
37340: LD_EXP 63
37344: PUSH
37345: LD_EXP 104
37349: AND
37350: IFFALSE 37441
37352: GO 37354
37354: DISABLE
37355: LD_INT 0
37357: PPUSH
// begin enable ;
37358: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
37359: LD_ADDR_VAR 0 1
37363: PUSH
37364: LD_INT 22
37366: PUSH
37367: LD_OWVAR 2
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 21
37378: PUSH
37379: LD_INT 2
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 33
37388: PUSH
37389: LD_INT 3
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: PPUSH
37401: CALL_OW 69
37405: ST_TO_ADDR
// if not tmp then
37406: LD_VAR 0 1
37410: NOT
37411: IFFALSE 37415
// exit ;
37413: GO 37441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
37415: LD_VAR 0 1
37419: PUSH
37420: LD_INT 1
37422: PPUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 12
37432: ARRAY
37433: PPUSH
37434: LD_INT 1
37436: PPUSH
37437: CALL_OW 234
// end ;
37441: PPOPN 1
37443: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
37444: LD_EXP 63
37448: PUSH
37449: LD_EXP 105
37453: AND
37454: IFFALSE 37595
37456: GO 37458
37458: DISABLE
37459: LD_INT 0
37461: PPUSH
37462: PPUSH
37463: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37464: LD_ADDR_VAR 0 3
37468: PUSH
37469: LD_INT 22
37471: PUSH
37472: LD_OWVAR 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 25
37483: PUSH
37484: LD_INT 1
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: PPUSH
37495: CALL_OW 69
37499: ST_TO_ADDR
// if not tmp then
37500: LD_VAR 0 3
37504: NOT
37505: IFFALSE 37509
// exit ;
37507: GO 37595
// un := tmp [ rand ( 1 , tmp ) ] ;
37509: LD_ADDR_VAR 0 2
37513: PUSH
37514: LD_VAR 0 3
37518: PUSH
37519: LD_INT 1
37521: PPUSH
37522: LD_VAR 0 3
37526: PPUSH
37527: CALL_OW 12
37531: ARRAY
37532: ST_TO_ADDR
// if Crawls ( un ) then
37533: LD_VAR 0 2
37537: PPUSH
37538: CALL_OW 318
37542: IFFALSE 37553
// ComWalk ( un ) ;
37544: LD_VAR 0 2
37548: PPUSH
37549: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
37553: LD_VAR 0 2
37557: PPUSH
37558: LD_INT 9
37560: PPUSH
37561: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
37565: LD_INT 28
37567: PPUSH
37568: LD_OWVAR 2
37572: PPUSH
37573: LD_INT 2
37575: PPUSH
37576: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
37580: LD_INT 29
37582: PPUSH
37583: LD_OWVAR 2
37587: PPUSH
37588: LD_INT 2
37590: PPUSH
37591: CALL_OW 322
// end ;
37595: PPOPN 3
37597: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
37598: LD_EXP 63
37602: PUSH
37603: LD_EXP 106
37607: AND
37608: IFFALSE 37719
37610: GO 37612
37612: DISABLE
37613: LD_INT 0
37615: PPUSH
37616: PPUSH
37617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37618: LD_ADDR_VAR 0 3
37622: PUSH
37623: LD_INT 22
37625: PUSH
37626: LD_OWVAR 2
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 25
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PPUSH
37649: CALL_OW 69
37653: ST_TO_ADDR
// if not tmp then
37654: LD_VAR 0 3
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37719
// un := tmp [ rand ( 1 , tmp ) ] ;
37663: LD_ADDR_VAR 0 2
37667: PUSH
37668: LD_VAR 0 3
37672: PUSH
37673: LD_INT 1
37675: PPUSH
37676: LD_VAR 0 3
37680: PPUSH
37681: CALL_OW 12
37685: ARRAY
37686: ST_TO_ADDR
// if Crawls ( un ) then
37687: LD_VAR 0 2
37691: PPUSH
37692: CALL_OW 318
37696: IFFALSE 37707
// ComWalk ( un ) ;
37698: LD_VAR 0 2
37702: PPUSH
37703: CALL_OW 138
// SetClass ( un , class_mortar ) ;
37707: LD_VAR 0 2
37711: PPUSH
37712: LD_INT 8
37714: PPUSH
37715: CALL_OW 336
// end ;
37719: PPOPN 3
37721: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
37722: LD_EXP 63
37726: PUSH
37727: LD_EXP 107
37731: AND
37732: IFFALSE 37876
37734: GO 37736
37736: DISABLE
37737: LD_INT 0
37739: PPUSH
37740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
37741: LD_ADDR_VAR 0 2
37745: PUSH
37746: LD_INT 22
37748: PUSH
37749: LD_OWVAR 2
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 21
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: LD_INT 34
37773: PUSH
37774: LD_INT 12
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 34
37783: PUSH
37784: LD_INT 51
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 34
37793: PUSH
37794: LD_INT 32
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: PPUSH
37812: CALL_OW 69
37816: ST_TO_ADDR
// if not tmp then
37817: LD_VAR 0 2
37821: NOT
37822: IFFALSE 37826
// exit ;
37824: GO 37876
// for i in tmp do
37826: LD_ADDR_VAR 0 1
37830: PUSH
37831: LD_VAR 0 2
37835: PUSH
37836: FOR_IN
37837: IFFALSE 37874
// if GetCargo ( i , mat_artifact ) = 0 then
37839: LD_VAR 0 1
37843: PPUSH
37844: LD_INT 4
37846: PPUSH
37847: CALL_OW 289
37851: PUSH
37852: LD_INT 0
37854: EQUAL
37855: IFFALSE 37872
// SetCargo ( i , mat_siberit , 100 ) ;
37857: LD_VAR 0 1
37861: PPUSH
37862: LD_INT 3
37864: PPUSH
37865: LD_INT 100
37867: PPUSH
37868: CALL_OW 290
37872: GO 37836
37874: POP
37875: POP
// end ;
37876: PPOPN 2
37878: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
37879: LD_EXP 63
37883: PUSH
37884: LD_EXP 108
37888: AND
37889: IFFALSE 38072
37891: GO 37893
37893: DISABLE
37894: LD_INT 0
37896: PPUSH
37897: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
37898: LD_ADDR_VAR 0 2
37902: PUSH
37903: LD_INT 22
37905: PUSH
37906: LD_OWVAR 2
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PPUSH
37915: CALL_OW 69
37919: ST_TO_ADDR
// if not tmp then
37920: LD_VAR 0 2
37924: NOT
37925: IFFALSE 37929
// exit ;
37927: GO 38072
// for i := 1 to 2 do
37929: LD_ADDR_VAR 0 1
37933: PUSH
37934: DOUBLE
37935: LD_INT 1
37937: DEC
37938: ST_TO_ADDR
37939: LD_INT 2
37941: PUSH
37942: FOR_TO
37943: IFFALSE 38070
// begin uc_side := your_side ;
37945: LD_ADDR_OWVAR 20
37949: PUSH
37950: LD_OWVAR 2
37954: ST_TO_ADDR
// uc_nation := nation_american ;
37955: LD_ADDR_OWVAR 21
37959: PUSH
37960: LD_INT 1
37962: ST_TO_ADDR
// vc_chassis := us_morphling ;
37963: LD_ADDR_OWVAR 37
37967: PUSH
37968: LD_INT 5
37970: ST_TO_ADDR
// vc_engine := engine_siberite ;
37971: LD_ADDR_OWVAR 39
37975: PUSH
37976: LD_INT 3
37978: ST_TO_ADDR
// vc_control := control_computer ;
37979: LD_ADDR_OWVAR 38
37983: PUSH
37984: LD_INT 3
37986: ST_TO_ADDR
// vc_weapon := us_double_laser ;
37987: LD_ADDR_OWVAR 40
37991: PUSH
37992: LD_INT 10
37994: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
37995: LD_VAR 0 2
37999: PUSH
38000: LD_INT 1
38002: ARRAY
38003: PPUSH
38004: CALL_OW 310
38008: NOT
38009: IFFALSE 38056
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
38011: CALL_OW 45
38015: PPUSH
38016: LD_VAR 0 2
38020: PUSH
38021: LD_INT 1
38023: ARRAY
38024: PPUSH
38025: CALL_OW 250
38029: PPUSH
38030: LD_VAR 0 2
38034: PUSH
38035: LD_INT 1
38037: ARRAY
38038: PPUSH
38039: CALL_OW 251
38043: PPUSH
38044: LD_INT 12
38046: PPUSH
38047: LD_INT 1
38049: PPUSH
38050: CALL_OW 50
38054: GO 38068
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
38056: CALL_OW 45
38060: PPUSH
38061: LD_INT 1
38063: PPUSH
38064: CALL_OW 51
// end ;
38068: GO 37942
38070: POP
38071: POP
// end ;
38072: PPOPN 2
38074: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
38075: LD_EXP 63
38079: PUSH
38080: LD_EXP 109
38084: AND
38085: IFFALSE 38307
38087: GO 38089
38089: DISABLE
38090: LD_INT 0
38092: PPUSH
38093: PPUSH
38094: PPUSH
38095: PPUSH
38096: PPUSH
38097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38098: LD_ADDR_VAR 0 6
38102: PUSH
38103: LD_INT 22
38105: PUSH
38106: LD_OWVAR 2
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 21
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 3
38127: PUSH
38128: LD_INT 23
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: PPUSH
38147: CALL_OW 69
38151: ST_TO_ADDR
// if not tmp then
38152: LD_VAR 0 6
38156: NOT
38157: IFFALSE 38161
// exit ;
38159: GO 38307
// s1 := rand ( 1 , 4 ) ;
38161: LD_ADDR_VAR 0 2
38165: PUSH
38166: LD_INT 1
38168: PPUSH
38169: LD_INT 4
38171: PPUSH
38172: CALL_OW 12
38176: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
38177: LD_ADDR_VAR 0 4
38181: PUSH
38182: LD_VAR 0 6
38186: PUSH
38187: LD_INT 1
38189: ARRAY
38190: PPUSH
38191: LD_VAR 0 2
38195: PPUSH
38196: CALL_OW 259
38200: ST_TO_ADDR
// if s1 = 1 then
38201: LD_VAR 0 2
38205: PUSH
38206: LD_INT 1
38208: EQUAL
38209: IFFALSE 38229
// s2 := rand ( 2 , 4 ) else
38211: LD_ADDR_VAR 0 3
38215: PUSH
38216: LD_INT 2
38218: PPUSH
38219: LD_INT 4
38221: PPUSH
38222: CALL_OW 12
38226: ST_TO_ADDR
38227: GO 38237
// s2 := 1 ;
38229: LD_ADDR_VAR 0 3
38233: PUSH
38234: LD_INT 1
38236: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
38237: LD_ADDR_VAR 0 5
38241: PUSH
38242: LD_VAR 0 6
38246: PUSH
38247: LD_INT 1
38249: ARRAY
38250: PPUSH
38251: LD_VAR 0 3
38255: PPUSH
38256: CALL_OW 259
38260: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
38261: LD_VAR 0 6
38265: PUSH
38266: LD_INT 1
38268: ARRAY
38269: PPUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_VAR 0 5
38279: PPUSH
38280: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
38284: LD_VAR 0 6
38288: PUSH
38289: LD_INT 1
38291: ARRAY
38292: PPUSH
38293: LD_VAR 0 3
38297: PPUSH
38298: LD_VAR 0 4
38302: PPUSH
38303: CALL_OW 237
// end ;
38307: PPOPN 6
38309: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
38310: LD_EXP 63
38314: PUSH
38315: LD_EXP 110
38319: AND
38320: IFFALSE 38399
38322: GO 38324
38324: DISABLE
38325: LD_INT 0
38327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
38328: LD_ADDR_VAR 0 1
38332: PUSH
38333: LD_INT 22
38335: PUSH
38336: LD_OWVAR 2
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PUSH
38345: LD_INT 30
38347: PUSH
38348: LD_INT 3
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: PUSH
38355: EMPTY
38356: LIST
38357: LIST
38358: PPUSH
38359: CALL_OW 69
38363: ST_TO_ADDR
// if not tmp then
38364: LD_VAR 0 1
38368: NOT
38369: IFFALSE 38373
// exit ;
38371: GO 38399
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38373: LD_VAR 0 1
38377: PUSH
38378: LD_INT 1
38380: PPUSH
38381: LD_VAR 0 1
38385: PPUSH
38386: CALL_OW 12
38390: ARRAY
38391: PPUSH
38392: LD_INT 1
38394: PPUSH
38395: CALL_OW 234
// end ;
38399: PPOPN 1
38401: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
38402: LD_EXP 63
38406: PUSH
38407: LD_EXP 111
38411: AND
38412: IFFALSE 38524
38414: GO 38416
38416: DISABLE
38417: LD_INT 0
38419: PPUSH
38420: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
38421: LD_ADDR_VAR 0 2
38425: PUSH
38426: LD_INT 22
38428: PUSH
38429: LD_OWVAR 2
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 30
38443: PUSH
38444: LD_INT 27
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 30
38453: PUSH
38454: LD_INT 26
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 30
38463: PUSH
38464: LD_INT 28
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PPUSH
38481: CALL_OW 69
38485: ST_TO_ADDR
// if not tmp then
38486: LD_VAR 0 2
38490: NOT
38491: IFFALSE 38495
// exit ;
38493: GO 38524
// for i in tmp do
38495: LD_ADDR_VAR 0 1
38499: PUSH
38500: LD_VAR 0 2
38504: PUSH
38505: FOR_IN
38506: IFFALSE 38522
// SetLives ( i , 1 ) ;
38508: LD_VAR 0 1
38512: PPUSH
38513: LD_INT 1
38515: PPUSH
38516: CALL_OW 234
38520: GO 38505
38522: POP
38523: POP
// end ;
38524: PPOPN 2
38526: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
38527: LD_EXP 63
38531: PUSH
38532: LD_EXP 112
38536: AND
38537: IFFALSE 38824
38539: GO 38541
38541: DISABLE
38542: LD_INT 0
38544: PPUSH
38545: PPUSH
38546: PPUSH
// begin i := rand ( 1 , 7 ) ;
38547: LD_ADDR_VAR 0 1
38551: PUSH
38552: LD_INT 1
38554: PPUSH
38555: LD_INT 7
38557: PPUSH
38558: CALL_OW 12
38562: ST_TO_ADDR
// case i of 1 :
38563: LD_VAR 0 1
38567: PUSH
38568: LD_INT 1
38570: DOUBLE
38571: EQUAL
38572: IFTRUE 38576
38574: GO 38586
38576: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
38577: LD_STRING earthquake(getX(game), 0, 32)
38579: PPUSH
38580: CALL_OW 559
38584: GO 38824
38586: LD_INT 2
38588: DOUBLE
38589: EQUAL
38590: IFTRUE 38594
38592: GO 38608
38594: POP
// begin ToLua ( displayStucuk(); ) ;
38595: LD_STRING displayStucuk();
38597: PPUSH
38598: CALL_OW 559
// ResetFog ;
38602: CALL_OW 335
// end ; 3 :
38606: GO 38824
38608: LD_INT 3
38610: DOUBLE
38611: EQUAL
38612: IFTRUE 38616
38614: GO 38720
38616: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38617: LD_ADDR_VAR 0 2
38621: PUSH
38622: LD_INT 22
38624: PUSH
38625: LD_OWVAR 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 25
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PPUSH
38648: CALL_OW 69
38652: ST_TO_ADDR
// if not tmp then
38653: LD_VAR 0 2
38657: NOT
38658: IFFALSE 38662
// exit ;
38660: GO 38824
// un := tmp [ rand ( 1 , tmp ) ] ;
38662: LD_ADDR_VAR 0 3
38666: PUSH
38667: LD_VAR 0 2
38671: PUSH
38672: LD_INT 1
38674: PPUSH
38675: LD_VAR 0 2
38679: PPUSH
38680: CALL_OW 12
38684: ARRAY
38685: ST_TO_ADDR
// if Crawls ( un ) then
38686: LD_VAR 0 3
38690: PPUSH
38691: CALL_OW 318
38695: IFFALSE 38706
// ComWalk ( un ) ;
38697: LD_VAR 0 3
38701: PPUSH
38702: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38706: LD_VAR 0 3
38710: PPUSH
38711: LD_INT 8
38713: PPUSH
38714: CALL_OW 336
// end ; 4 :
38718: GO 38824
38720: LD_INT 4
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38802
38728: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38729: LD_ADDR_VAR 0 2
38733: PUSH
38734: LD_INT 22
38736: PUSH
38737: LD_OWVAR 2
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 30
38748: PUSH
38749: LD_INT 29
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PPUSH
38760: CALL_OW 69
38764: ST_TO_ADDR
// if not tmp then
38765: LD_VAR 0 2
38769: NOT
38770: IFFALSE 38774
// exit ;
38772: GO 38824
// CenterNowOnUnits ( tmp [ 1 ] ) ;
38774: LD_VAR 0 2
38778: PUSH
38779: LD_INT 1
38781: ARRAY
38782: PPUSH
38783: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
38787: LD_VAR 0 2
38791: PUSH
38792: LD_INT 1
38794: ARRAY
38795: PPUSH
38796: CALL_OW 65
// end ; 5 .. 7 :
38800: GO 38824
38802: LD_INT 5
38804: DOUBLE
38805: GREATEREQUAL
38806: IFFALSE 38814
38808: LD_INT 7
38810: DOUBLE
38811: LESSEQUAL
38812: IFTRUE 38816
38814: GO 38823
38816: POP
// StreamSibBomb ; end ;
38817: CALL 35061 0 0
38821: GO 38824
38823: POP
// end ;
38824: PPOPN 3
38826: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
38827: LD_EXP 63
38831: PUSH
38832: LD_EXP 113
38836: AND
38837: IFFALSE 38993
38839: GO 38841
38841: DISABLE
38842: LD_INT 0
38844: PPUSH
38845: PPUSH
38846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
38847: LD_ADDR_VAR 0 2
38851: PUSH
38852: LD_INT 81
38854: PUSH
38855: LD_OWVAR 2
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: PUSH
38867: LD_INT 21
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 21
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: LIST
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PPUSH
38896: CALL_OW 69
38900: ST_TO_ADDR
// if not tmp then
38901: LD_VAR 0 2
38905: NOT
38906: IFFALSE 38910
// exit ;
38908: GO 38993
// p := 0 ;
38910: LD_ADDR_VAR 0 3
38914: PUSH
38915: LD_INT 0
38917: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
38918: LD_INT 35
38920: PPUSH
38921: CALL_OW 67
// p := p + 1 ;
38925: LD_ADDR_VAR 0 3
38929: PUSH
38930: LD_VAR 0 3
38934: PUSH
38935: LD_INT 1
38937: PLUS
38938: ST_TO_ADDR
// for i in tmp do
38939: LD_ADDR_VAR 0 1
38943: PUSH
38944: LD_VAR 0 2
38948: PUSH
38949: FOR_IN
38950: IFFALSE 38981
// if GetLives ( i ) < 1000 then
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 256
38961: PUSH
38962: LD_INT 1000
38964: LESS
38965: IFFALSE 38979
// SetLives ( i , 1000 ) ;
38967: LD_VAR 0 1
38971: PPUSH
38972: LD_INT 1000
38974: PPUSH
38975: CALL_OW 234
38979: GO 38949
38981: POP
38982: POP
// until p > 20 ;
38983: LD_VAR 0 3
38987: PUSH
38988: LD_INT 20
38990: GREATER
38991: IFFALSE 38918
// end ;
38993: PPOPN 3
38995: END
// every 0 0$1 trigger StreamModeActive and sTime do
38996: LD_EXP 63
39000: PUSH
39001: LD_EXP 114
39005: AND
39006: IFFALSE 39041
39008: GO 39010
39010: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
39011: LD_INT 28
39013: PPUSH
39014: LD_OWVAR 2
39018: PPUSH
39019: LD_INT 2
39021: PPUSH
39022: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
39026: LD_INT 30
39028: PPUSH
39029: LD_OWVAR 2
39033: PPUSH
39034: LD_INT 2
39036: PPUSH
39037: CALL_OW 322
// end ;
39041: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
39042: LD_EXP 63
39046: PUSH
39047: LD_EXP 115
39051: AND
39052: IFFALSE 39173
39054: GO 39056
39056: DISABLE
39057: LD_INT 0
39059: PPUSH
39060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39061: LD_ADDR_VAR 0 2
39065: PUSH
39066: LD_INT 22
39068: PUSH
39069: LD_OWVAR 2
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 21
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: PUSH
39091: LD_INT 23
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: LIST
39109: PPUSH
39110: CALL_OW 69
39114: ST_TO_ADDR
// if not tmp then
39115: LD_VAR 0 2
39119: NOT
39120: IFFALSE 39124
// exit ;
39122: GO 39173
// for i in tmp do
39124: LD_ADDR_VAR 0 1
39128: PUSH
39129: LD_VAR 0 2
39133: PUSH
39134: FOR_IN
39135: IFFALSE 39171
// begin if Crawls ( i ) then
39137: LD_VAR 0 1
39141: PPUSH
39142: CALL_OW 318
39146: IFFALSE 39157
// ComWalk ( i ) ;
39148: LD_VAR 0 1
39152: PPUSH
39153: CALL_OW 138
// SetClass ( i , 2 ) ;
39157: LD_VAR 0 1
39161: PPUSH
39162: LD_INT 2
39164: PPUSH
39165: CALL_OW 336
// end ;
39169: GO 39134
39171: POP
39172: POP
// end ;
39173: PPOPN 2
39175: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
39176: LD_EXP 63
39180: PUSH
39181: LD_EXP 116
39185: AND
39186: IFFALSE 39474
39188: GO 39190
39190: DISABLE
39191: LD_INT 0
39193: PPUSH
39194: PPUSH
39195: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
39196: LD_OWVAR 2
39200: PPUSH
39201: LD_INT 9
39203: PPUSH
39204: LD_INT 1
39206: PPUSH
39207: LD_INT 1
39209: PPUSH
39210: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
39214: LD_INT 9
39216: PPUSH
39217: LD_OWVAR 2
39221: PPUSH
39222: CALL_OW 343
// uc_side := 9 ;
39226: LD_ADDR_OWVAR 20
39230: PUSH
39231: LD_INT 9
39233: ST_TO_ADDR
// uc_nation := 2 ;
39234: LD_ADDR_OWVAR 21
39238: PUSH
39239: LD_INT 2
39241: ST_TO_ADDR
// hc_name := Dark Warrior ;
39242: LD_ADDR_OWVAR 26
39246: PUSH
39247: LD_STRING Dark Warrior
39249: ST_TO_ADDR
// hc_gallery :=  ;
39250: LD_ADDR_OWVAR 33
39254: PUSH
39255: LD_STRING 
39257: ST_TO_ADDR
// hc_noskilllimit := true ;
39258: LD_ADDR_OWVAR 76
39262: PUSH
39263: LD_INT 1
39265: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
39266: LD_ADDR_OWVAR 31
39270: PUSH
39271: LD_INT 30
39273: PUSH
39274: LD_INT 30
39276: PUSH
39277: LD_INT 30
39279: PUSH
39280: LD_INT 30
39282: PUSH
39283: EMPTY
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// un := CreateHuman ;
39289: LD_ADDR_VAR 0 3
39293: PUSH
39294: CALL_OW 44
39298: ST_TO_ADDR
// hc_noskilllimit := false ;
39299: LD_ADDR_OWVAR 76
39303: PUSH
39304: LD_INT 0
39306: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39307: LD_VAR 0 3
39311: PPUSH
39312: LD_INT 1
39314: PPUSH
39315: CALL_OW 51
// ToLua ( playRanger() ) ;
39319: LD_STRING playRanger()
39321: PPUSH
39322: CALL_OW 559
// p := 0 ;
39326: LD_ADDR_VAR 0 2
39330: PUSH
39331: LD_INT 0
39333: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
39334: LD_INT 35
39336: PPUSH
39337: CALL_OW 67
// p := p + 1 ;
39341: LD_ADDR_VAR 0 2
39345: PUSH
39346: LD_VAR 0 2
39350: PUSH
39351: LD_INT 1
39353: PLUS
39354: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
39355: LD_VAR 0 3
39359: PPUSH
39360: CALL_OW 256
39364: PUSH
39365: LD_INT 1000
39367: LESS
39368: IFFALSE 39382
// SetLives ( un , 1000 ) ;
39370: LD_VAR 0 3
39374: PPUSH
39375: LD_INT 1000
39377: PPUSH
39378: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
39382: LD_VAR 0 3
39386: PPUSH
39387: LD_INT 81
39389: PUSH
39390: LD_OWVAR 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 91
39401: PUSH
39402: LD_VAR 0 3
39406: PUSH
39407: LD_INT 30
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: LIST
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PPUSH
39419: CALL_OW 69
39423: PPUSH
39424: LD_VAR 0 3
39428: PPUSH
39429: CALL_OW 74
39433: PPUSH
39434: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
39438: LD_VAR 0 2
39442: PUSH
39443: LD_INT 80
39445: GREATER
39446: PUSH
39447: LD_VAR 0 3
39451: PPUSH
39452: CALL_OW 301
39456: OR
39457: IFFALSE 39334
// if un then
39459: LD_VAR 0 3
39463: IFFALSE 39474
// RemoveUnit ( un ) ;
39465: LD_VAR 0 3
39469: PPUSH
39470: CALL_OW 64
// end ;
39474: PPOPN 3
39476: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
39477: LD_EXP 117
39481: IFFALSE 39597
39483: GO 39485
39485: DISABLE
39486: LD_INT 0
39488: PPUSH
39489: PPUSH
39490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
39491: LD_ADDR_VAR 0 2
39495: PUSH
39496: LD_INT 81
39498: PUSH
39499: LD_OWVAR 2
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 21
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PPUSH
39522: CALL_OW 69
39526: ST_TO_ADDR
// if not tmp then
39527: LD_VAR 0 2
39531: NOT
39532: IFFALSE 39536
// exit ;
39534: GO 39597
// ToLua ( playComputer() ) ;
39536: LD_STRING playComputer()
39538: PPUSH
39539: CALL_OW 559
// for i in tmp do
39543: LD_ADDR_VAR 0 1
39547: PUSH
39548: LD_VAR 0 2
39552: PUSH
39553: FOR_IN
39554: IFFALSE 39595
// for j := 1 to 4 do
39556: LD_ADDR_VAR 0 3
39560: PUSH
39561: DOUBLE
39562: LD_INT 1
39564: DEC
39565: ST_TO_ADDR
39566: LD_INT 4
39568: PUSH
39569: FOR_TO
39570: IFFALSE 39591
// SetSkill ( i , j , 10 ) ;
39572: LD_VAR 0 1
39576: PPUSH
39577: LD_VAR 0 3
39581: PPUSH
39582: LD_INT 10
39584: PPUSH
39585: CALL_OW 237
39589: GO 39569
39591: POP
39592: POP
39593: GO 39553
39595: POP
39596: POP
// end ;
39597: PPOPN 3
39599: END
// every 0 0$1 trigger s30 do var i , tmp ;
39600: LD_EXP 118
39604: IFFALSE 39673
39606: GO 39608
39608: DISABLE
39609: LD_INT 0
39611: PPUSH
39612: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39613: LD_ADDR_VAR 0 2
39617: PUSH
39618: LD_INT 22
39620: PUSH
39621: LD_OWVAR 2
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PPUSH
39630: CALL_OW 69
39634: ST_TO_ADDR
// if not tmp then
39635: LD_VAR 0 2
39639: NOT
39640: IFFALSE 39644
// exit ;
39642: GO 39673
// for i in tmp do
39644: LD_ADDR_VAR 0 1
39648: PUSH
39649: LD_VAR 0 2
39653: PUSH
39654: FOR_IN
39655: IFFALSE 39671
// SetLives ( i , 300 ) ;
39657: LD_VAR 0 1
39661: PPUSH
39662: LD_INT 300
39664: PPUSH
39665: CALL_OW 234
39669: GO 39654
39671: POP
39672: POP
// end ;
39673: PPOPN 2
39675: END
// every 0 0$1 trigger s60 do var i , tmp ;
39676: LD_EXP 119
39680: IFFALSE 39749
39682: GO 39684
39684: DISABLE
39685: LD_INT 0
39687: PPUSH
39688: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39689: LD_ADDR_VAR 0 2
39693: PUSH
39694: LD_INT 22
39696: PUSH
39697: LD_OWVAR 2
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PPUSH
39706: CALL_OW 69
39710: ST_TO_ADDR
// if not tmp then
39711: LD_VAR 0 2
39715: NOT
39716: IFFALSE 39720
// exit ;
39718: GO 39749
// for i in tmp do
39720: LD_ADDR_VAR 0 1
39724: PUSH
39725: LD_VAR 0 2
39729: PUSH
39730: FOR_IN
39731: IFFALSE 39747
// SetLives ( i , 600 ) ;
39733: LD_VAR 0 1
39737: PPUSH
39738: LD_INT 600
39740: PPUSH
39741: CALL_OW 234
39745: GO 39730
39747: POP
39748: POP
// end ;
39749: PPOPN 2
39751: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
39752: LD_INT 0
39754: PPUSH
// case cmd of 301 :
39755: LD_VAR 0 1
39759: PUSH
39760: LD_INT 301
39762: DOUBLE
39763: EQUAL
39764: IFTRUE 39768
39766: GO 39800
39768: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
39769: LD_VAR 0 6
39773: PPUSH
39774: LD_VAR 0 7
39778: PPUSH
39779: LD_VAR 0 8
39783: PPUSH
39784: LD_VAR 0 4
39788: PPUSH
39789: LD_VAR 0 5
39793: PPUSH
39794: CALL 41001 0 5
39798: GO 39921
39800: LD_INT 302
39802: DOUBLE
39803: EQUAL
39804: IFTRUE 39808
39806: GO 39845
39808: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
39809: LD_VAR 0 6
39813: PPUSH
39814: LD_VAR 0 7
39818: PPUSH
39819: LD_VAR 0 8
39823: PPUSH
39824: LD_VAR 0 9
39828: PPUSH
39829: LD_VAR 0 4
39833: PPUSH
39834: LD_VAR 0 5
39838: PPUSH
39839: CALL 41092 0 6
39843: GO 39921
39845: LD_INT 303
39847: DOUBLE
39848: EQUAL
39849: IFTRUE 39853
39851: GO 39890
39853: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
39854: LD_VAR 0 6
39858: PPUSH
39859: LD_VAR 0 7
39863: PPUSH
39864: LD_VAR 0 8
39868: PPUSH
39869: LD_VAR 0 9
39873: PPUSH
39874: LD_VAR 0 4
39878: PPUSH
39879: LD_VAR 0 5
39883: PPUSH
39884: CALL 39926 0 6
39888: GO 39921
39890: LD_INT 304
39892: DOUBLE
39893: EQUAL
39894: IFTRUE 39898
39896: GO 39920
39898: POP
// hHackTeleport ( unit , x , y ) ; end ;
39899: LD_VAR 0 2
39903: PPUSH
39904: LD_VAR 0 4
39908: PPUSH
39909: LD_VAR 0 5
39913: PPUSH
39914: CALL 41685 0 3
39918: GO 39921
39920: POP
// end ;
39921: LD_VAR 0 12
39925: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
39926: LD_INT 0
39928: PPUSH
39929: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
39930: LD_VAR 0 1
39934: PUSH
39935: LD_INT 1
39937: LESS
39938: PUSH
39939: LD_VAR 0 1
39943: PUSH
39944: LD_INT 3
39946: GREATER
39947: OR
39948: PUSH
39949: LD_VAR 0 5
39953: PPUSH
39954: LD_VAR 0 6
39958: PPUSH
39959: CALL_OW 428
39963: OR
39964: IFFALSE 39968
// exit ;
39966: GO 40688
// uc_side := your_side ;
39968: LD_ADDR_OWVAR 20
39972: PUSH
39973: LD_OWVAR 2
39977: ST_TO_ADDR
// uc_nation := nation ;
39978: LD_ADDR_OWVAR 21
39982: PUSH
39983: LD_VAR 0 1
39987: ST_TO_ADDR
// bc_level = 1 ;
39988: LD_ADDR_OWVAR 43
39992: PUSH
39993: LD_INT 1
39995: ST_TO_ADDR
// case btype of 1 :
39996: LD_VAR 0 2
40000: PUSH
40001: LD_INT 1
40003: DOUBLE
40004: EQUAL
40005: IFTRUE 40009
40007: GO 40020
40009: POP
// bc_type := b_depot ; 2 :
40010: LD_ADDR_OWVAR 42
40014: PUSH
40015: LD_INT 0
40017: ST_TO_ADDR
40018: GO 40632
40020: LD_INT 2
40022: DOUBLE
40023: EQUAL
40024: IFTRUE 40028
40026: GO 40039
40028: POP
// bc_type := b_warehouse ; 3 :
40029: LD_ADDR_OWVAR 42
40033: PUSH
40034: LD_INT 1
40036: ST_TO_ADDR
40037: GO 40632
40039: LD_INT 3
40041: DOUBLE
40042: EQUAL
40043: IFTRUE 40047
40045: GO 40058
40047: POP
// bc_type := b_lab ; 4 .. 9 :
40048: LD_ADDR_OWVAR 42
40052: PUSH
40053: LD_INT 6
40055: ST_TO_ADDR
40056: GO 40632
40058: LD_INT 4
40060: DOUBLE
40061: GREATEREQUAL
40062: IFFALSE 40070
40064: LD_INT 9
40066: DOUBLE
40067: LESSEQUAL
40068: IFTRUE 40072
40070: GO 40124
40072: POP
// begin bc_type := b_lab_half ;
40073: LD_ADDR_OWVAR 42
40077: PUSH
40078: LD_INT 7
40080: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
40081: LD_ADDR_OWVAR 44
40085: PUSH
40086: LD_INT 10
40088: PUSH
40089: LD_INT 11
40091: PUSH
40092: LD_INT 12
40094: PUSH
40095: LD_INT 15
40097: PUSH
40098: LD_INT 14
40100: PUSH
40101: LD_INT 13
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: PUSH
40112: LD_VAR 0 2
40116: PUSH
40117: LD_INT 3
40119: MINUS
40120: ARRAY
40121: ST_TO_ADDR
// end ; 10 .. 13 :
40122: GO 40632
40124: LD_INT 10
40126: DOUBLE
40127: GREATEREQUAL
40128: IFFALSE 40136
40130: LD_INT 13
40132: DOUBLE
40133: LESSEQUAL
40134: IFTRUE 40138
40136: GO 40215
40138: POP
// begin bc_type := b_lab_full ;
40139: LD_ADDR_OWVAR 42
40143: PUSH
40144: LD_INT 8
40146: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
40147: LD_ADDR_OWVAR 44
40151: PUSH
40152: LD_INT 10
40154: PUSH
40155: LD_INT 12
40157: PUSH
40158: LD_INT 14
40160: PUSH
40161: LD_INT 13
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: PUSH
40170: LD_VAR 0 2
40174: PUSH
40175: LD_INT 9
40177: MINUS
40178: ARRAY
40179: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
40180: LD_ADDR_OWVAR 45
40184: PUSH
40185: LD_INT 11
40187: PUSH
40188: LD_INT 15
40190: PUSH
40191: LD_INT 12
40193: PUSH
40194: LD_INT 15
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: PUSH
40203: LD_VAR 0 2
40207: PUSH
40208: LD_INT 9
40210: MINUS
40211: ARRAY
40212: ST_TO_ADDR
// end ; 14 :
40213: GO 40632
40215: LD_INT 14
40217: DOUBLE
40218: EQUAL
40219: IFTRUE 40223
40221: GO 40234
40223: POP
// bc_type := b_workshop ; 15 :
40224: LD_ADDR_OWVAR 42
40228: PUSH
40229: LD_INT 2
40231: ST_TO_ADDR
40232: GO 40632
40234: LD_INT 15
40236: DOUBLE
40237: EQUAL
40238: IFTRUE 40242
40240: GO 40253
40242: POP
// bc_type := b_factory ; 16 :
40243: LD_ADDR_OWVAR 42
40247: PUSH
40248: LD_INT 3
40250: ST_TO_ADDR
40251: GO 40632
40253: LD_INT 16
40255: DOUBLE
40256: EQUAL
40257: IFTRUE 40261
40259: GO 40272
40261: POP
// bc_type := b_ext_gun ; 17 :
40262: LD_ADDR_OWVAR 42
40266: PUSH
40267: LD_INT 17
40269: ST_TO_ADDR
40270: GO 40632
40272: LD_INT 17
40274: DOUBLE
40275: EQUAL
40276: IFTRUE 40280
40278: GO 40308
40280: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
40281: LD_ADDR_OWVAR 42
40285: PUSH
40286: LD_INT 19
40288: PUSH
40289: LD_INT 23
40291: PUSH
40292: LD_INT 19
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: LIST
40299: PUSH
40300: LD_VAR 0 1
40304: ARRAY
40305: ST_TO_ADDR
40306: GO 40632
40308: LD_INT 18
40310: DOUBLE
40311: EQUAL
40312: IFTRUE 40316
40314: GO 40327
40316: POP
// bc_type := b_ext_radar ; 19 :
40317: LD_ADDR_OWVAR 42
40321: PUSH
40322: LD_INT 20
40324: ST_TO_ADDR
40325: GO 40632
40327: LD_INT 19
40329: DOUBLE
40330: EQUAL
40331: IFTRUE 40335
40333: GO 40346
40335: POP
// bc_type := b_ext_radio ; 20 :
40336: LD_ADDR_OWVAR 42
40340: PUSH
40341: LD_INT 22
40343: ST_TO_ADDR
40344: GO 40632
40346: LD_INT 20
40348: DOUBLE
40349: EQUAL
40350: IFTRUE 40354
40352: GO 40365
40354: POP
// bc_type := b_ext_siberium ; 21 :
40355: LD_ADDR_OWVAR 42
40359: PUSH
40360: LD_INT 21
40362: ST_TO_ADDR
40363: GO 40632
40365: LD_INT 21
40367: DOUBLE
40368: EQUAL
40369: IFTRUE 40373
40371: GO 40384
40373: POP
// bc_type := b_ext_computer ; 22 :
40374: LD_ADDR_OWVAR 42
40378: PUSH
40379: LD_INT 24
40381: ST_TO_ADDR
40382: GO 40632
40384: LD_INT 22
40386: DOUBLE
40387: EQUAL
40388: IFTRUE 40392
40390: GO 40403
40392: POP
// bc_type := b_ext_track ; 23 :
40393: LD_ADDR_OWVAR 42
40397: PUSH
40398: LD_INT 16
40400: ST_TO_ADDR
40401: GO 40632
40403: LD_INT 23
40405: DOUBLE
40406: EQUAL
40407: IFTRUE 40411
40409: GO 40422
40411: POP
// bc_type := b_ext_laser ; 24 :
40412: LD_ADDR_OWVAR 42
40416: PUSH
40417: LD_INT 25
40419: ST_TO_ADDR
40420: GO 40632
40422: LD_INT 24
40424: DOUBLE
40425: EQUAL
40426: IFTRUE 40430
40428: GO 40441
40430: POP
// bc_type := b_control_tower ; 25 :
40431: LD_ADDR_OWVAR 42
40435: PUSH
40436: LD_INT 36
40438: ST_TO_ADDR
40439: GO 40632
40441: LD_INT 25
40443: DOUBLE
40444: EQUAL
40445: IFTRUE 40449
40447: GO 40460
40449: POP
// bc_type := b_breastwork ; 26 :
40450: LD_ADDR_OWVAR 42
40454: PUSH
40455: LD_INT 31
40457: ST_TO_ADDR
40458: GO 40632
40460: LD_INT 26
40462: DOUBLE
40463: EQUAL
40464: IFTRUE 40468
40466: GO 40479
40468: POP
// bc_type := b_bunker ; 27 :
40469: LD_ADDR_OWVAR 42
40473: PUSH
40474: LD_INT 32
40476: ST_TO_ADDR
40477: GO 40632
40479: LD_INT 27
40481: DOUBLE
40482: EQUAL
40483: IFTRUE 40487
40485: GO 40498
40487: POP
// bc_type := b_turret ; 28 :
40488: LD_ADDR_OWVAR 42
40492: PUSH
40493: LD_INT 33
40495: ST_TO_ADDR
40496: GO 40632
40498: LD_INT 28
40500: DOUBLE
40501: EQUAL
40502: IFTRUE 40506
40504: GO 40517
40506: POP
// bc_type := b_armoury ; 29 :
40507: LD_ADDR_OWVAR 42
40511: PUSH
40512: LD_INT 4
40514: ST_TO_ADDR
40515: GO 40632
40517: LD_INT 29
40519: DOUBLE
40520: EQUAL
40521: IFTRUE 40525
40523: GO 40536
40525: POP
// bc_type := b_barracks ; 30 :
40526: LD_ADDR_OWVAR 42
40530: PUSH
40531: LD_INT 5
40533: ST_TO_ADDR
40534: GO 40632
40536: LD_INT 30
40538: DOUBLE
40539: EQUAL
40540: IFTRUE 40544
40542: GO 40555
40544: POP
// bc_type := b_solar_power ; 31 :
40545: LD_ADDR_OWVAR 42
40549: PUSH
40550: LD_INT 27
40552: ST_TO_ADDR
40553: GO 40632
40555: LD_INT 31
40557: DOUBLE
40558: EQUAL
40559: IFTRUE 40563
40561: GO 40574
40563: POP
// bc_type := b_oil_power ; 32 :
40564: LD_ADDR_OWVAR 42
40568: PUSH
40569: LD_INT 26
40571: ST_TO_ADDR
40572: GO 40632
40574: LD_INT 32
40576: DOUBLE
40577: EQUAL
40578: IFTRUE 40582
40580: GO 40593
40582: POP
// bc_type := b_siberite_power ; 33 :
40583: LD_ADDR_OWVAR 42
40587: PUSH
40588: LD_INT 28
40590: ST_TO_ADDR
40591: GO 40632
40593: LD_INT 33
40595: DOUBLE
40596: EQUAL
40597: IFTRUE 40601
40599: GO 40612
40601: POP
// bc_type := b_oil_mine ; 34 :
40602: LD_ADDR_OWVAR 42
40606: PUSH
40607: LD_INT 29
40609: ST_TO_ADDR
40610: GO 40632
40612: LD_INT 34
40614: DOUBLE
40615: EQUAL
40616: IFTRUE 40620
40618: GO 40631
40620: POP
// bc_type := b_siberite_mine ; end ;
40621: LD_ADDR_OWVAR 42
40625: PUSH
40626: LD_INT 30
40628: ST_TO_ADDR
40629: GO 40632
40631: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
40632: LD_ADDR_VAR 0 8
40636: PUSH
40637: LD_VAR 0 5
40641: PPUSH
40642: LD_VAR 0 6
40646: PPUSH
40647: LD_VAR 0 3
40651: PPUSH
40652: CALL_OW 47
40656: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
40657: LD_OWVAR 42
40661: PUSH
40662: LD_INT 32
40664: PUSH
40665: LD_INT 33
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: IN
40672: IFFALSE 40688
// PlaceWeaponTurret ( b , weapon ) ;
40674: LD_VAR 0 8
40678: PPUSH
40679: LD_VAR 0 4
40683: PPUSH
40684: CALL_OW 431
// end ;
40688: LD_VAR 0 7
40692: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
40693: LD_INT 0
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40699: LD_ADDR_VAR 0 4
40703: PUSH
40704: LD_INT 22
40706: PUSH
40707: LD_OWVAR 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 2
40718: PUSH
40719: LD_INT 30
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 30
40731: PUSH
40732: LD_INT 1
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PPUSH
40748: CALL_OW 69
40752: ST_TO_ADDR
// if not tmp then
40753: LD_VAR 0 4
40757: NOT
40758: IFFALSE 40762
// exit ;
40760: GO 40821
// for i in tmp do
40762: LD_ADDR_VAR 0 2
40766: PUSH
40767: LD_VAR 0 4
40771: PUSH
40772: FOR_IN
40773: IFFALSE 40819
// for j = 1 to 3 do
40775: LD_ADDR_VAR 0 3
40779: PUSH
40780: DOUBLE
40781: LD_INT 1
40783: DEC
40784: ST_TO_ADDR
40785: LD_INT 3
40787: PUSH
40788: FOR_TO
40789: IFFALSE 40815
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
40791: LD_VAR 0 2
40795: PPUSH
40796: CALL_OW 274
40800: PPUSH
40801: LD_VAR 0 3
40805: PPUSH
40806: LD_INT 99999
40808: PPUSH
40809: CALL_OW 277
40813: GO 40788
40815: POP
40816: POP
40817: GO 40772
40819: POP
40820: POP
// end ;
40821: LD_VAR 0 1
40825: RET
// export function hHackSetLevel10 ; var i , j ; begin
40826: LD_INT 0
40828: PPUSH
40829: PPUSH
40830: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
40831: LD_ADDR_VAR 0 2
40835: PUSH
40836: LD_INT 21
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PPUSH
40846: CALL_OW 69
40850: PUSH
40851: FOR_IN
40852: IFFALSE 40904
// if IsSelected ( i ) then
40854: LD_VAR 0 2
40858: PPUSH
40859: CALL_OW 306
40863: IFFALSE 40902
// begin for j := 1 to 4 do
40865: LD_ADDR_VAR 0 3
40869: PUSH
40870: DOUBLE
40871: LD_INT 1
40873: DEC
40874: ST_TO_ADDR
40875: LD_INT 4
40877: PUSH
40878: FOR_TO
40879: IFFALSE 40900
// SetSkill ( i , j , 10 ) ;
40881: LD_VAR 0 2
40885: PPUSH
40886: LD_VAR 0 3
40890: PPUSH
40891: LD_INT 10
40893: PPUSH
40894: CALL_OW 237
40898: GO 40878
40900: POP
40901: POP
// end ;
40902: GO 40851
40904: POP
40905: POP
// end ;
40906: LD_VAR 0 1
40910: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
40911: LD_INT 0
40913: PPUSH
40914: PPUSH
40915: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
40916: LD_ADDR_VAR 0 2
40920: PUSH
40921: LD_INT 22
40923: PUSH
40924: LD_OWVAR 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 21
40935: PUSH
40936: LD_INT 1
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PPUSH
40947: CALL_OW 69
40951: PUSH
40952: FOR_IN
40953: IFFALSE 40994
// begin for j := 1 to 4 do
40955: LD_ADDR_VAR 0 3
40959: PUSH
40960: DOUBLE
40961: LD_INT 1
40963: DEC
40964: ST_TO_ADDR
40965: LD_INT 4
40967: PUSH
40968: FOR_TO
40969: IFFALSE 40990
// SetSkill ( i , j , 10 ) ;
40971: LD_VAR 0 2
40975: PPUSH
40976: LD_VAR 0 3
40980: PPUSH
40981: LD_INT 10
40983: PPUSH
40984: CALL_OW 237
40988: GO 40968
40990: POP
40991: POP
// end ;
40992: GO 40952
40994: POP
40995: POP
// end ;
40996: LD_VAR 0 1
41000: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
41001: LD_INT 0
41003: PPUSH
// uc_side := your_side ;
41004: LD_ADDR_OWVAR 20
41008: PUSH
41009: LD_OWVAR 2
41013: ST_TO_ADDR
// uc_nation := nation ;
41014: LD_ADDR_OWVAR 21
41018: PUSH
41019: LD_VAR 0 1
41023: ST_TO_ADDR
// InitHc ;
41024: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
41028: LD_INT 0
41030: PPUSH
41031: LD_VAR 0 2
41035: PPUSH
41036: LD_VAR 0 3
41040: PPUSH
41041: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
41045: LD_VAR 0 4
41049: PPUSH
41050: LD_VAR 0 5
41054: PPUSH
41055: CALL_OW 428
41059: PUSH
41060: LD_INT 0
41062: EQUAL
41063: IFFALSE 41087
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
41065: CALL_OW 44
41069: PPUSH
41070: LD_VAR 0 4
41074: PPUSH
41075: LD_VAR 0 5
41079: PPUSH
41080: LD_INT 1
41082: PPUSH
41083: CALL_OW 48
// end ;
41087: LD_VAR 0 6
41091: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
41092: LD_INT 0
41094: PPUSH
41095: PPUSH
// uc_side := your_side ;
41096: LD_ADDR_OWVAR 20
41100: PUSH
41101: LD_OWVAR 2
41105: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
41106: LD_VAR 0 1
41110: PUSH
41111: LD_INT 1
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: LD_INT 3
41119: PUSH
41120: LD_INT 4
41122: PUSH
41123: LD_INT 5
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: IN
41133: IFFALSE 41145
// uc_nation := nation_american else
41135: LD_ADDR_OWVAR 21
41139: PUSH
41140: LD_INT 1
41142: ST_TO_ADDR
41143: GO 41188
// if chassis in [ 11 , 12 , 13 , 14 ] then
41145: LD_VAR 0 1
41149: PUSH
41150: LD_INT 11
41152: PUSH
41153: LD_INT 12
41155: PUSH
41156: LD_INT 13
41158: PUSH
41159: LD_INT 14
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: IN
41168: IFFALSE 41180
// uc_nation := nation_arabian else
41170: LD_ADDR_OWVAR 21
41174: PUSH
41175: LD_INT 2
41177: ST_TO_ADDR
41178: GO 41188
// uc_nation := nation_russian ;
41180: LD_ADDR_OWVAR 21
41184: PUSH
41185: LD_INT 3
41187: ST_TO_ADDR
// vc_chassis := chassis ;
41188: LD_ADDR_OWVAR 37
41192: PUSH
41193: LD_VAR 0 1
41197: ST_TO_ADDR
// vc_engine := engine ;
41198: LD_ADDR_OWVAR 39
41202: PUSH
41203: LD_VAR 0 2
41207: ST_TO_ADDR
// vc_control := control ;
41208: LD_ADDR_OWVAR 38
41212: PUSH
41213: LD_VAR 0 3
41217: ST_TO_ADDR
// vc_weapon := weapon ;
41218: LD_ADDR_OWVAR 40
41222: PUSH
41223: LD_VAR 0 4
41227: ST_TO_ADDR
// un := CreateVehicle ;
41228: LD_ADDR_VAR 0 8
41232: PUSH
41233: CALL_OW 45
41237: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
41238: LD_VAR 0 8
41242: PPUSH
41243: LD_INT 0
41245: PPUSH
41246: LD_INT 5
41248: PPUSH
41249: CALL_OW 12
41253: PPUSH
41254: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
41258: LD_VAR 0 8
41262: PPUSH
41263: LD_VAR 0 5
41267: PPUSH
41268: LD_VAR 0 6
41272: PPUSH
41273: LD_INT 1
41275: PPUSH
41276: CALL_OW 48
// end ;
41280: LD_VAR 0 7
41284: RET
// export hInvincible ; every 1 do
41285: GO 41287
41287: DISABLE
// hInvincible := [ ] ;
41288: LD_ADDR_EXP 120
41292: PUSH
41293: EMPTY
41294: ST_TO_ADDR
41295: END
// every 10 do var i ;
41296: GO 41298
41298: DISABLE
41299: LD_INT 0
41301: PPUSH
// begin enable ;
41302: ENABLE
// if not hInvincible then
41303: LD_EXP 120
41307: NOT
41308: IFFALSE 41312
// exit ;
41310: GO 41356
// for i in hInvincible do
41312: LD_ADDR_VAR 0 1
41316: PUSH
41317: LD_EXP 120
41321: PUSH
41322: FOR_IN
41323: IFFALSE 41354
// if GetLives ( i ) < 1000 then
41325: LD_VAR 0 1
41329: PPUSH
41330: CALL_OW 256
41334: PUSH
41335: LD_INT 1000
41337: LESS
41338: IFFALSE 41352
// SetLives ( i , 1000 ) ;
41340: LD_VAR 0 1
41344: PPUSH
41345: LD_INT 1000
41347: PPUSH
41348: CALL_OW 234
41352: GO 41322
41354: POP
41355: POP
// end ;
41356: PPOPN 1
41358: END
// export function hHackInvincible ; var i ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
41363: LD_ADDR_VAR 0 2
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 21
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 21
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: PPUSH
41396: CALL_OW 69
41400: PUSH
41401: FOR_IN
41402: IFFALSE 41463
// if IsSelected ( i ) then
41404: LD_VAR 0 2
41408: PPUSH
41409: CALL_OW 306
41413: IFFALSE 41461
// begin if i in hInvincible then
41415: LD_VAR 0 2
41419: PUSH
41420: LD_EXP 120
41424: IN
41425: IFFALSE 41445
// hInvincible := hInvincible diff i else
41427: LD_ADDR_EXP 120
41431: PUSH
41432: LD_EXP 120
41436: PUSH
41437: LD_VAR 0 2
41441: DIFF
41442: ST_TO_ADDR
41443: GO 41461
// hInvincible := hInvincible union i ;
41445: LD_ADDR_EXP 120
41449: PUSH
41450: LD_EXP 120
41454: PUSH
41455: LD_VAR 0 2
41459: UNION
41460: ST_TO_ADDR
// end ;
41461: GO 41401
41463: POP
41464: POP
// end ;
41465: LD_VAR 0 1
41469: RET
// export function hHackInvisible ; var i , j ; begin
41470: LD_INT 0
41472: PPUSH
41473: PPUSH
41474: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
41475: LD_ADDR_VAR 0 2
41479: PUSH
41480: LD_INT 21
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PPUSH
41490: CALL_OW 69
41494: PUSH
41495: FOR_IN
41496: IFFALSE 41520
// if IsSelected ( i ) then
41498: LD_VAR 0 2
41502: PPUSH
41503: CALL_OW 306
41507: IFFALSE 41518
// ComForceInvisible ( i ) ;
41509: LD_VAR 0 2
41513: PPUSH
41514: CALL_OW 496
41518: GO 41495
41520: POP
41521: POP
// end ;
41522: LD_VAR 0 1
41526: RET
// export function hHackChangeYourSide ; begin
41527: LD_INT 0
41529: PPUSH
// if your_side = 8 then
41530: LD_OWVAR 2
41534: PUSH
41535: LD_INT 8
41537: EQUAL
41538: IFFALSE 41550
// your_side := 0 else
41540: LD_ADDR_OWVAR 2
41544: PUSH
41545: LD_INT 0
41547: ST_TO_ADDR
41548: GO 41564
// your_side := your_side + 1 ;
41550: LD_ADDR_OWVAR 2
41554: PUSH
41555: LD_OWVAR 2
41559: PUSH
41560: LD_INT 1
41562: PLUS
41563: ST_TO_ADDR
// end ;
41564: LD_VAR 0 1
41568: RET
// export function hHackChangeUnitSide ; var i , j ; begin
41569: LD_INT 0
41571: PPUSH
41572: PPUSH
41573: PPUSH
// for i in all_units do
41574: LD_ADDR_VAR 0 2
41578: PUSH
41579: LD_OWVAR 3
41583: PUSH
41584: FOR_IN
41585: IFFALSE 41663
// if IsSelected ( i ) then
41587: LD_VAR 0 2
41591: PPUSH
41592: CALL_OW 306
41596: IFFALSE 41661
// begin j := GetSide ( i ) ;
41598: LD_ADDR_VAR 0 3
41602: PUSH
41603: LD_VAR 0 2
41607: PPUSH
41608: CALL_OW 255
41612: ST_TO_ADDR
// if j = 8 then
41613: LD_VAR 0 3
41617: PUSH
41618: LD_INT 8
41620: EQUAL
41621: IFFALSE 41633
// j := 0 else
41623: LD_ADDR_VAR 0 3
41627: PUSH
41628: LD_INT 0
41630: ST_TO_ADDR
41631: GO 41647
// j := j + 1 ;
41633: LD_ADDR_VAR 0 3
41637: PUSH
41638: LD_VAR 0 3
41642: PUSH
41643: LD_INT 1
41645: PLUS
41646: ST_TO_ADDR
// SetSide ( i , j ) ;
41647: LD_VAR 0 2
41651: PPUSH
41652: LD_VAR 0 3
41656: PPUSH
41657: CALL_OW 235
// end ;
41661: GO 41584
41663: POP
41664: POP
// end ;
41665: LD_VAR 0 1
41669: RET
// export function hHackFog ; begin
41670: LD_INT 0
41672: PPUSH
// FogOff ( true ) ;
41673: LD_INT 1
41675: PPUSH
41676: CALL_OW 344
// end ;
41680: LD_VAR 0 1
41684: RET
// export function hHackTeleport ( unit , x , y ) ; begin
41685: LD_INT 0
41687: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
41688: LD_VAR 0 1
41692: PPUSH
41693: LD_VAR 0 2
41697: PPUSH
41698: LD_VAR 0 3
41702: PPUSH
41703: LD_INT 1
41705: PPUSH
41706: LD_INT 1
41708: PPUSH
41709: CALL_OW 483
// CenterOnXY ( x , y ) ;
41713: LD_VAR 0 2
41717: PPUSH
41718: LD_VAR 0 3
41722: PPUSH
41723: CALL_OW 84
// end ; end_of_file
41727: LD_VAR 0 4
41731: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
41732: LD_INT 0
41734: PPUSH
41735: PPUSH
// if exist_mode then
41736: LD_VAR 0 2
41740: IFFALSE 41765
// unit := CreateCharacter ( prefix & ident ) else
41742: LD_ADDR_VAR 0 5
41746: PUSH
41747: LD_VAR 0 3
41751: PUSH
41752: LD_VAR 0 1
41756: STR
41757: PPUSH
41758: CALL_OW 34
41762: ST_TO_ADDR
41763: GO 41780
// unit := NewCharacter ( ident ) ;
41765: LD_ADDR_VAR 0 5
41769: PUSH
41770: LD_VAR 0 1
41774: PPUSH
41775: CALL_OW 25
41779: ST_TO_ADDR
// result := unit ;
41780: LD_ADDR_VAR 0 4
41784: PUSH
41785: LD_VAR 0 5
41789: ST_TO_ADDR
// end ;
41790: LD_VAR 0 4
41794: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
41795: LD_INT 0
41797: PPUSH
41798: PPUSH
// if not side or not nation then
41799: LD_VAR 0 1
41803: NOT
41804: PUSH
41805: LD_VAR 0 2
41809: NOT
41810: OR
41811: IFFALSE 41815
// exit ;
41813: GO 42583
// case nation of nation_american :
41815: LD_VAR 0 2
41819: PUSH
41820: LD_INT 1
41822: DOUBLE
41823: EQUAL
41824: IFTRUE 41828
41826: GO 42042
41828: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
41829: LD_ADDR_VAR 0 4
41833: PUSH
41834: LD_INT 35
41836: PUSH
41837: LD_INT 45
41839: PUSH
41840: LD_INT 46
41842: PUSH
41843: LD_INT 47
41845: PUSH
41846: LD_INT 82
41848: PUSH
41849: LD_INT 83
41851: PUSH
41852: LD_INT 84
41854: PUSH
41855: LD_INT 85
41857: PUSH
41858: LD_INT 86
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: LD_INT 6
41869: PUSH
41870: LD_INT 15
41872: PUSH
41873: LD_INT 16
41875: PUSH
41876: LD_INT 7
41878: PUSH
41879: LD_INT 12
41881: PUSH
41882: LD_INT 13
41884: PUSH
41885: LD_INT 10
41887: PUSH
41888: LD_INT 14
41890: PUSH
41891: LD_INT 20
41893: PUSH
41894: LD_INT 21
41896: PUSH
41897: LD_INT 22
41899: PUSH
41900: LD_INT 25
41902: PUSH
41903: LD_INT 32
41905: PUSH
41906: LD_INT 27
41908: PUSH
41909: LD_INT 36
41911: PUSH
41912: LD_INT 69
41914: PUSH
41915: LD_INT 39
41917: PUSH
41918: LD_INT 34
41920: PUSH
41921: LD_INT 40
41923: PUSH
41924: LD_INT 48
41926: PUSH
41927: LD_INT 49
41929: PUSH
41930: LD_INT 50
41932: PUSH
41933: LD_INT 51
41935: PUSH
41936: LD_INT 52
41938: PUSH
41939: LD_INT 53
41941: PUSH
41942: LD_INT 54
41944: PUSH
41945: LD_INT 55
41947: PUSH
41948: LD_INT 56
41950: PUSH
41951: LD_INT 57
41953: PUSH
41954: LD_INT 58
41956: PUSH
41957: LD_INT 59
41959: PUSH
41960: LD_INT 60
41962: PUSH
41963: LD_INT 61
41965: PUSH
41966: LD_INT 62
41968: PUSH
41969: LD_INT 80
41971: PUSH
41972: LD_INT 82
41974: PUSH
41975: LD_INT 83
41977: PUSH
41978: LD_INT 84
41980: PUSH
41981: LD_INT 85
41983: PUSH
41984: LD_INT 86
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: ST_TO_ADDR
42040: GO 42507
42042: LD_INT 2
42044: DOUBLE
42045: EQUAL
42046: IFTRUE 42050
42048: GO 42276
42050: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
42051: LD_ADDR_VAR 0 4
42055: PUSH
42056: LD_INT 35
42058: PUSH
42059: LD_INT 45
42061: PUSH
42062: LD_INT 46
42064: PUSH
42065: LD_INT 47
42067: PUSH
42068: LD_INT 82
42070: PUSH
42071: LD_INT 83
42073: PUSH
42074: LD_INT 84
42076: PUSH
42077: LD_INT 85
42079: PUSH
42080: LD_INT 87
42082: PUSH
42083: LD_INT 70
42085: PUSH
42086: LD_INT 1
42088: PUSH
42089: LD_INT 11
42091: PUSH
42092: LD_INT 3
42094: PUSH
42095: LD_INT 4
42097: PUSH
42098: LD_INT 5
42100: PUSH
42101: LD_INT 6
42103: PUSH
42104: LD_INT 15
42106: PUSH
42107: LD_INT 18
42109: PUSH
42110: LD_INT 7
42112: PUSH
42113: LD_INT 17
42115: PUSH
42116: LD_INT 8
42118: PUSH
42119: LD_INT 20
42121: PUSH
42122: LD_INT 21
42124: PUSH
42125: LD_INT 22
42127: PUSH
42128: LD_INT 72
42130: PUSH
42131: LD_INT 26
42133: PUSH
42134: LD_INT 69
42136: PUSH
42137: LD_INT 39
42139: PUSH
42140: LD_INT 40
42142: PUSH
42143: LD_INT 41
42145: PUSH
42146: LD_INT 42
42148: PUSH
42149: LD_INT 43
42151: PUSH
42152: LD_INT 48
42154: PUSH
42155: LD_INT 49
42157: PUSH
42158: LD_INT 50
42160: PUSH
42161: LD_INT 51
42163: PUSH
42164: LD_INT 52
42166: PUSH
42167: LD_INT 53
42169: PUSH
42170: LD_INT 54
42172: PUSH
42173: LD_INT 55
42175: PUSH
42176: LD_INT 56
42178: PUSH
42179: LD_INT 60
42181: PUSH
42182: LD_INT 61
42184: PUSH
42185: LD_INT 62
42187: PUSH
42188: LD_INT 66
42190: PUSH
42191: LD_INT 67
42193: PUSH
42194: LD_INT 68
42196: PUSH
42197: LD_INT 81
42199: PUSH
42200: LD_INT 82
42202: PUSH
42203: LD_INT 83
42205: PUSH
42206: LD_INT 84
42208: PUSH
42209: LD_INT 85
42211: PUSH
42212: LD_INT 87
42214: PUSH
42215: LD_INT 88
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: ST_TO_ADDR
42274: GO 42507
42276: LD_INT 3
42278: DOUBLE
42279: EQUAL
42280: IFTRUE 42284
42282: GO 42506
42284: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
42285: LD_ADDR_VAR 0 4
42289: PUSH
42290: LD_INT 46
42292: PUSH
42293: LD_INT 47
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 82
42304: PUSH
42305: LD_INT 83
42307: PUSH
42308: LD_INT 84
42310: PUSH
42311: LD_INT 85
42313: PUSH
42314: LD_INT 86
42316: PUSH
42317: LD_INT 11
42319: PUSH
42320: LD_INT 9
42322: PUSH
42323: LD_INT 20
42325: PUSH
42326: LD_INT 19
42328: PUSH
42329: LD_INT 21
42331: PUSH
42332: LD_INT 24
42334: PUSH
42335: LD_INT 22
42337: PUSH
42338: LD_INT 25
42340: PUSH
42341: LD_INT 28
42343: PUSH
42344: LD_INT 29
42346: PUSH
42347: LD_INT 30
42349: PUSH
42350: LD_INT 31
42352: PUSH
42353: LD_INT 37
42355: PUSH
42356: LD_INT 38
42358: PUSH
42359: LD_INT 32
42361: PUSH
42362: LD_INT 27
42364: PUSH
42365: LD_INT 33
42367: PUSH
42368: LD_INT 69
42370: PUSH
42371: LD_INT 39
42373: PUSH
42374: LD_INT 34
42376: PUSH
42377: LD_INT 40
42379: PUSH
42380: LD_INT 71
42382: PUSH
42383: LD_INT 23
42385: PUSH
42386: LD_INT 44
42388: PUSH
42389: LD_INT 48
42391: PUSH
42392: LD_INT 49
42394: PUSH
42395: LD_INT 50
42397: PUSH
42398: LD_INT 51
42400: PUSH
42401: LD_INT 52
42403: PUSH
42404: LD_INT 53
42406: PUSH
42407: LD_INT 54
42409: PUSH
42410: LD_INT 55
42412: PUSH
42413: LD_INT 56
42415: PUSH
42416: LD_INT 57
42418: PUSH
42419: LD_INT 58
42421: PUSH
42422: LD_INT 59
42424: PUSH
42425: LD_INT 63
42427: PUSH
42428: LD_INT 64
42430: PUSH
42431: LD_INT 65
42433: PUSH
42434: LD_INT 82
42436: PUSH
42437: LD_INT 83
42439: PUSH
42440: LD_INT 84
42442: PUSH
42443: LD_INT 85
42445: PUSH
42446: LD_INT 86
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: ST_TO_ADDR
42504: GO 42507
42506: POP
// if state > - 1 and state < 3 then
42507: LD_VAR 0 3
42511: PUSH
42512: LD_INT 1
42514: NEG
42515: GREATER
42516: PUSH
42517: LD_VAR 0 3
42521: PUSH
42522: LD_INT 3
42524: LESS
42525: AND
42526: IFFALSE 42583
// for i in result do
42528: LD_ADDR_VAR 0 5
42532: PUSH
42533: LD_VAR 0 4
42537: PUSH
42538: FOR_IN
42539: IFFALSE 42581
// if GetTech ( i , side ) <> state then
42541: LD_VAR 0 5
42545: PPUSH
42546: LD_VAR 0 1
42550: PPUSH
42551: CALL_OW 321
42555: PUSH
42556: LD_VAR 0 3
42560: NONEQUAL
42561: IFFALSE 42579
// result := result diff i ;
42563: LD_ADDR_VAR 0 4
42567: PUSH
42568: LD_VAR 0 4
42572: PUSH
42573: LD_VAR 0 5
42577: DIFF
42578: ST_TO_ADDR
42579: GO 42538
42581: POP
42582: POP
// end ;
42583: LD_VAR 0 4
42587: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
42588: LD_INT 0
42590: PPUSH
42591: PPUSH
42592: PPUSH
// result := true ;
42593: LD_ADDR_VAR 0 3
42597: PUSH
42598: LD_INT 1
42600: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
42601: LD_ADDR_VAR 0 5
42605: PUSH
42606: LD_VAR 0 2
42610: PPUSH
42611: CALL_OW 480
42615: ST_TO_ADDR
// if not tmp then
42616: LD_VAR 0 5
42620: NOT
42621: IFFALSE 42625
// exit ;
42623: GO 42674
// for i in tmp do
42625: LD_ADDR_VAR 0 4
42629: PUSH
42630: LD_VAR 0 5
42634: PUSH
42635: FOR_IN
42636: IFFALSE 42672
// if GetTech ( i , side ) <> state_researched then
42638: LD_VAR 0 4
42642: PPUSH
42643: LD_VAR 0 1
42647: PPUSH
42648: CALL_OW 321
42652: PUSH
42653: LD_INT 2
42655: NONEQUAL
42656: IFFALSE 42670
// begin result := false ;
42658: LD_ADDR_VAR 0 3
42662: PUSH
42663: LD_INT 0
42665: ST_TO_ADDR
// exit ;
42666: POP
42667: POP
42668: GO 42674
// end ;
42670: GO 42635
42672: POP
42673: POP
// end ;
42674: LD_VAR 0 3
42678: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
42679: LD_INT 0
42681: PPUSH
42682: PPUSH
42683: PPUSH
42684: PPUSH
42685: PPUSH
42686: PPUSH
42687: PPUSH
42688: PPUSH
42689: PPUSH
42690: PPUSH
42691: PPUSH
42692: PPUSH
42693: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
42694: LD_VAR 0 1
42698: NOT
42699: PUSH
42700: LD_VAR 0 1
42704: PPUSH
42705: CALL_OW 257
42709: PUSH
42710: LD_INT 9
42712: NONEQUAL
42713: OR
42714: IFFALSE 42718
// exit ;
42716: GO 43291
// side := GetSide ( unit ) ;
42718: LD_ADDR_VAR 0 9
42722: PUSH
42723: LD_VAR 0 1
42727: PPUSH
42728: CALL_OW 255
42732: ST_TO_ADDR
// tech_space := tech_spacanom ;
42733: LD_ADDR_VAR 0 12
42737: PUSH
42738: LD_INT 29
42740: ST_TO_ADDR
// tech_time := tech_taurad ;
42741: LD_ADDR_VAR 0 13
42745: PUSH
42746: LD_INT 28
42748: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
42749: LD_ADDR_VAR 0 11
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 310
42763: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
42764: LD_VAR 0 11
42768: PPUSH
42769: CALL_OW 247
42773: PUSH
42774: LD_INT 2
42776: EQUAL
42777: IFFALSE 42781
// exit ;
42779: GO 43291
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42781: LD_ADDR_VAR 0 8
42785: PUSH
42786: LD_INT 81
42788: PUSH
42789: LD_VAR 0 9
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 21
42803: PUSH
42804: LD_INT 3
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PPUSH
42819: CALL_OW 69
42823: ST_TO_ADDR
// if not tmp then
42824: LD_VAR 0 8
42828: NOT
42829: IFFALSE 42833
// exit ;
42831: GO 43291
// if in_unit then
42833: LD_VAR 0 11
42837: IFFALSE 42861
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
42839: LD_ADDR_VAR 0 10
42843: PUSH
42844: LD_VAR 0 8
42848: PPUSH
42849: LD_VAR 0 11
42853: PPUSH
42854: CALL_OW 74
42858: ST_TO_ADDR
42859: GO 42881
// enemy := NearestUnitToUnit ( tmp , unit ) ;
42861: LD_ADDR_VAR 0 10
42865: PUSH
42866: LD_VAR 0 8
42870: PPUSH
42871: LD_VAR 0 1
42875: PPUSH
42876: CALL_OW 74
42880: ST_TO_ADDR
// if not enemy then
42881: LD_VAR 0 10
42885: NOT
42886: IFFALSE 42890
// exit ;
42888: GO 43291
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
42890: LD_VAR 0 11
42894: PUSH
42895: LD_VAR 0 11
42899: PPUSH
42900: LD_VAR 0 10
42904: PPUSH
42905: CALL_OW 296
42909: PUSH
42910: LD_INT 13
42912: GREATER
42913: AND
42914: PUSH
42915: LD_VAR 0 1
42919: PPUSH
42920: LD_VAR 0 10
42924: PPUSH
42925: CALL_OW 296
42929: PUSH
42930: LD_INT 12
42932: GREATER
42933: OR
42934: IFFALSE 42938
// exit ;
42936: GO 43291
// missile := [ 1 ] ;
42938: LD_ADDR_VAR 0 14
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42949: LD_VAR 0 9
42953: PPUSH
42954: LD_VAR 0 12
42958: PPUSH
42959: CALL_OW 325
42963: IFFALSE 42992
// missile := Insert ( missile , missile + 1 , 2 ) ;
42965: LD_ADDR_VAR 0 14
42969: PUSH
42970: LD_VAR 0 14
42974: PPUSH
42975: LD_VAR 0 14
42979: PUSH
42980: LD_INT 1
42982: PLUS
42983: PPUSH
42984: LD_INT 2
42986: PPUSH
42987: CALL_OW 2
42991: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42992: LD_VAR 0 9
42996: PPUSH
42997: LD_VAR 0 13
43001: PPUSH
43002: CALL_OW 325
43006: PUSH
43007: LD_VAR 0 10
43011: PPUSH
43012: CALL_OW 255
43016: PPUSH
43017: LD_VAR 0 13
43021: PPUSH
43022: CALL_OW 325
43026: NOT
43027: AND
43028: IFFALSE 43057
// missile := Insert ( missile , missile + 1 , 3 ) ;
43030: LD_ADDR_VAR 0 14
43034: PUSH
43035: LD_VAR 0 14
43039: PPUSH
43040: LD_VAR 0 14
43044: PUSH
43045: LD_INT 1
43047: PLUS
43048: PPUSH
43049: LD_INT 3
43051: PPUSH
43052: CALL_OW 2
43056: ST_TO_ADDR
// if missile < 2 then
43057: LD_VAR 0 14
43061: PUSH
43062: LD_INT 2
43064: LESS
43065: IFFALSE 43069
// exit ;
43067: GO 43291
// x := GetX ( enemy ) ;
43069: LD_ADDR_VAR 0 4
43073: PUSH
43074: LD_VAR 0 10
43078: PPUSH
43079: CALL_OW 250
43083: ST_TO_ADDR
// y := GetY ( enemy ) ;
43084: LD_ADDR_VAR 0 5
43088: PUSH
43089: LD_VAR 0 10
43093: PPUSH
43094: CALL_OW 251
43098: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
43099: LD_ADDR_VAR 0 6
43103: PUSH
43104: LD_VAR 0 4
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PPUSH
43113: LD_INT 1
43115: PPUSH
43116: CALL_OW 12
43120: PLUS
43121: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
43122: LD_ADDR_VAR 0 7
43126: PUSH
43127: LD_VAR 0 5
43131: PUSH
43132: LD_INT 1
43134: NEG
43135: PPUSH
43136: LD_INT 1
43138: PPUSH
43139: CALL_OW 12
43143: PLUS
43144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43145: LD_VAR 0 6
43149: PPUSH
43150: LD_VAR 0 7
43154: PPUSH
43155: CALL_OW 488
43159: NOT
43160: IFFALSE 43182
// begin _x := x ;
43162: LD_ADDR_VAR 0 6
43166: PUSH
43167: LD_VAR 0 4
43171: ST_TO_ADDR
// _y := y ;
43172: LD_ADDR_VAR 0 7
43176: PUSH
43177: LD_VAR 0 5
43181: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
43182: LD_ADDR_VAR 0 3
43186: PUSH
43187: LD_INT 1
43189: PPUSH
43190: LD_VAR 0 14
43194: PPUSH
43195: CALL_OW 12
43199: ST_TO_ADDR
// case i of 1 :
43200: LD_VAR 0 3
43204: PUSH
43205: LD_INT 1
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43213
43211: GO 43230
43213: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
43214: LD_VAR 0 1
43218: PPUSH
43219: LD_VAR 0 10
43223: PPUSH
43224: CALL_OW 115
43228: GO 43291
43230: LD_INT 2
43232: DOUBLE
43233: EQUAL
43234: IFTRUE 43238
43236: GO 43260
43238: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
43239: LD_VAR 0 1
43243: PPUSH
43244: LD_VAR 0 6
43248: PPUSH
43249: LD_VAR 0 7
43253: PPUSH
43254: CALL_OW 153
43258: GO 43291
43260: LD_INT 3
43262: DOUBLE
43263: EQUAL
43264: IFTRUE 43268
43266: GO 43290
43268: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
43269: LD_VAR 0 1
43273: PPUSH
43274: LD_VAR 0 6
43278: PPUSH
43279: LD_VAR 0 7
43283: PPUSH
43284: CALL_OW 154
43288: GO 43291
43290: POP
// end ;
43291: LD_VAR 0 2
43295: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
43296: LD_INT 0
43298: PPUSH
43299: PPUSH
43300: PPUSH
43301: PPUSH
43302: PPUSH
43303: PPUSH
// if not unit or not building then
43304: LD_VAR 0 1
43308: NOT
43309: PUSH
43310: LD_VAR 0 2
43314: NOT
43315: OR
43316: IFFALSE 43320
// exit ;
43318: GO 43478
// x := GetX ( building ) ;
43320: LD_ADDR_VAR 0 5
43324: PUSH
43325: LD_VAR 0 2
43329: PPUSH
43330: CALL_OW 250
43334: ST_TO_ADDR
// y := GetY ( building ) ;
43335: LD_ADDR_VAR 0 6
43339: PUSH
43340: LD_VAR 0 2
43344: PPUSH
43345: CALL_OW 251
43349: ST_TO_ADDR
// for i = 0 to 5 do
43350: LD_ADDR_VAR 0 4
43354: PUSH
43355: DOUBLE
43356: LD_INT 0
43358: DEC
43359: ST_TO_ADDR
43360: LD_INT 5
43362: PUSH
43363: FOR_TO
43364: IFFALSE 43476
// begin _x := ShiftX ( x , i , 3 ) ;
43366: LD_ADDR_VAR 0 7
43370: PUSH
43371: LD_VAR 0 5
43375: PPUSH
43376: LD_VAR 0 4
43380: PPUSH
43381: LD_INT 3
43383: PPUSH
43384: CALL_OW 272
43388: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
43389: LD_ADDR_VAR 0 8
43393: PUSH
43394: LD_VAR 0 6
43398: PPUSH
43399: LD_VAR 0 4
43403: PPUSH
43404: LD_INT 3
43406: PPUSH
43407: CALL_OW 273
43411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
43412: LD_VAR 0 7
43416: PPUSH
43417: LD_VAR 0 8
43421: PPUSH
43422: CALL_OW 488
43426: NOT
43427: IFFALSE 43431
// continue ;
43429: GO 43363
// if HexInfo ( _x , _y ) = 0 then
43431: LD_VAR 0 7
43435: PPUSH
43436: LD_VAR 0 8
43440: PPUSH
43441: CALL_OW 428
43445: PUSH
43446: LD_INT 0
43448: EQUAL
43449: IFFALSE 43474
// begin ComMoveXY ( unit , _x , _y ) ;
43451: LD_VAR 0 1
43455: PPUSH
43456: LD_VAR 0 7
43460: PPUSH
43461: LD_VAR 0 8
43465: PPUSH
43466: CALL_OW 111
// exit ;
43470: POP
43471: POP
43472: GO 43478
// end ; end ;
43474: GO 43363
43476: POP
43477: POP
// end ;
43478: LD_VAR 0 3
43482: RET
// export function ScanBase ( side , base_area ) ; begin
43483: LD_INT 0
43485: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
43486: LD_ADDR_VAR 0 3
43490: PUSH
43491: LD_VAR 0 2
43495: PPUSH
43496: LD_INT 81
43498: PUSH
43499: LD_VAR 0 1
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PPUSH
43508: CALL_OW 70
43512: ST_TO_ADDR
// end ;
43513: LD_VAR 0 3
43517: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
43518: LD_INT 0
43520: PPUSH
43521: PPUSH
43522: PPUSH
43523: PPUSH
// result := false ;
43524: LD_ADDR_VAR 0 2
43528: PUSH
43529: LD_INT 0
43531: ST_TO_ADDR
// side := GetSide ( unit ) ;
43532: LD_ADDR_VAR 0 3
43536: PUSH
43537: LD_VAR 0 1
43541: PPUSH
43542: CALL_OW 255
43546: ST_TO_ADDR
// nat := GetNation ( unit ) ;
43547: LD_ADDR_VAR 0 4
43551: PUSH
43552: LD_VAR 0 1
43556: PPUSH
43557: CALL_OW 248
43561: ST_TO_ADDR
// case nat of 1 :
43562: LD_VAR 0 4
43566: PUSH
43567: LD_INT 1
43569: DOUBLE
43570: EQUAL
43571: IFTRUE 43575
43573: GO 43586
43575: POP
// tech := tech_lassight ; 2 :
43576: LD_ADDR_VAR 0 5
43580: PUSH
43581: LD_INT 12
43583: ST_TO_ADDR
43584: GO 43625
43586: LD_INT 2
43588: DOUBLE
43589: EQUAL
43590: IFTRUE 43594
43592: GO 43605
43594: POP
// tech := tech_mortar ; 3 :
43595: LD_ADDR_VAR 0 5
43599: PUSH
43600: LD_INT 41
43602: ST_TO_ADDR
43603: GO 43625
43605: LD_INT 3
43607: DOUBLE
43608: EQUAL
43609: IFTRUE 43613
43611: GO 43624
43613: POP
// tech := tech_bazooka ; end ;
43614: LD_ADDR_VAR 0 5
43618: PUSH
43619: LD_INT 44
43621: ST_TO_ADDR
43622: GO 43625
43624: POP
// if Researched ( side , tech ) then
43625: LD_VAR 0 3
43629: PPUSH
43630: LD_VAR 0 5
43634: PPUSH
43635: CALL_OW 325
43639: IFFALSE 43666
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
43641: LD_ADDR_VAR 0 2
43645: PUSH
43646: LD_INT 5
43648: PUSH
43649: LD_INT 8
43651: PUSH
43652: LD_INT 9
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: LIST
43659: PUSH
43660: LD_VAR 0 4
43664: ARRAY
43665: ST_TO_ADDR
// end ;
43666: LD_VAR 0 2
43670: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
43671: LD_INT 0
43673: PPUSH
43674: PPUSH
43675: PPUSH
// if not mines then
43676: LD_VAR 0 2
43680: NOT
43681: IFFALSE 43685
// exit ;
43683: GO 43829
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
43685: LD_ADDR_VAR 0 5
43689: PUSH
43690: LD_INT 81
43692: PUSH
43693: LD_VAR 0 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: LD_INT 21
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PPUSH
43723: CALL_OW 69
43727: ST_TO_ADDR
// for i in mines do
43728: LD_ADDR_VAR 0 4
43732: PUSH
43733: LD_VAR 0 2
43737: PUSH
43738: FOR_IN
43739: IFFALSE 43827
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
43741: LD_VAR 0 4
43745: PUSH
43746: LD_INT 1
43748: ARRAY
43749: PPUSH
43750: LD_VAR 0 4
43754: PUSH
43755: LD_INT 2
43757: ARRAY
43758: PPUSH
43759: CALL_OW 458
43763: NOT
43764: IFFALSE 43768
// continue ;
43766: GO 43738
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
43768: LD_VAR 0 4
43772: PUSH
43773: LD_INT 1
43775: ARRAY
43776: PPUSH
43777: LD_VAR 0 4
43781: PUSH
43782: LD_INT 2
43784: ARRAY
43785: PPUSH
43786: CALL_OW 428
43790: PUSH
43791: LD_VAR 0 5
43795: IN
43796: IFFALSE 43825
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
43798: LD_VAR 0 4
43802: PUSH
43803: LD_INT 1
43805: ARRAY
43806: PPUSH
43807: LD_VAR 0 4
43811: PUSH
43812: LD_INT 2
43814: ARRAY
43815: PPUSH
43816: LD_VAR 0 1
43820: PPUSH
43821: CALL_OW 456
// end ;
43825: GO 43738
43827: POP
43828: POP
// end ;
43829: LD_VAR 0 3
43833: RET
// export function Count ( array ) ; var i ; begin
43834: LD_INT 0
43836: PPUSH
43837: PPUSH
// result := 0 ;
43838: LD_ADDR_VAR 0 2
43842: PUSH
43843: LD_INT 0
43845: ST_TO_ADDR
// for i in array do
43846: LD_ADDR_VAR 0 3
43850: PUSH
43851: LD_VAR 0 1
43855: PUSH
43856: FOR_IN
43857: IFFALSE 43881
// if i then
43859: LD_VAR 0 3
43863: IFFALSE 43879
// result := result + 1 ;
43865: LD_ADDR_VAR 0 2
43869: PUSH
43870: LD_VAR 0 2
43874: PUSH
43875: LD_INT 1
43877: PLUS
43878: ST_TO_ADDR
43879: GO 43856
43881: POP
43882: POP
// end ;
43883: LD_VAR 0 2
43887: RET
// export function IsEmpty ( building ) ; begin
43888: LD_INT 0
43890: PPUSH
// if not building then
43891: LD_VAR 0 1
43895: NOT
43896: IFFALSE 43900
// exit ;
43898: GO 43943
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
43900: LD_ADDR_VAR 0 2
43904: PUSH
43905: LD_VAR 0 1
43909: PUSH
43910: LD_INT 22
43912: PUSH
43913: LD_VAR 0 1
43917: PPUSH
43918: CALL_OW 255
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 58
43929: PUSH
43930: EMPTY
43931: LIST
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PPUSH
43937: CALL_OW 69
43941: IN
43942: ST_TO_ADDR
// end ;
43943: LD_VAR 0 2
43947: RET
// export function IsNotFull ( building ) ; begin
43948: LD_INT 0
43950: PPUSH
// if not building then
43951: LD_VAR 0 1
43955: NOT
43956: IFFALSE 43960
// exit ;
43958: GO 43979
// result := UnitsInside ( building ) < 6 ;
43960: LD_ADDR_VAR 0 2
43964: PUSH
43965: LD_VAR 0 1
43969: PPUSH
43970: CALL_OW 313
43974: PUSH
43975: LD_INT 6
43977: LESS
43978: ST_TO_ADDR
// end ;
43979: LD_VAR 0 2
43983: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43984: LD_INT 0
43986: PPUSH
43987: PPUSH
43988: PPUSH
43989: PPUSH
// tmp := [ ] ;
43990: LD_ADDR_VAR 0 3
43994: PUSH
43995: EMPTY
43996: ST_TO_ADDR
// list := [ ] ;
43997: LD_ADDR_VAR 0 5
44001: PUSH
44002: EMPTY
44003: ST_TO_ADDR
// for i = 16 to 25 do
44004: LD_ADDR_VAR 0 4
44008: PUSH
44009: DOUBLE
44010: LD_INT 16
44012: DEC
44013: ST_TO_ADDR
44014: LD_INT 25
44016: PUSH
44017: FOR_TO
44018: IFFALSE 44091
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
44020: LD_ADDR_VAR 0 3
44024: PUSH
44025: LD_VAR 0 3
44029: PUSH
44030: LD_INT 22
44032: PUSH
44033: LD_VAR 0 1
44037: PPUSH
44038: CALL_OW 255
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 91
44049: PUSH
44050: LD_VAR 0 1
44054: PUSH
44055: LD_INT 6
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: PUSH
44063: LD_INT 30
44065: PUSH
44066: LD_VAR 0 4
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: LIST
44079: PUSH
44080: EMPTY
44081: LIST
44082: PPUSH
44083: CALL_OW 69
44087: ADD
44088: ST_TO_ADDR
44089: GO 44017
44091: POP
44092: POP
// for i = 1 to tmp do
44093: LD_ADDR_VAR 0 4
44097: PUSH
44098: DOUBLE
44099: LD_INT 1
44101: DEC
44102: ST_TO_ADDR
44103: LD_VAR 0 3
44107: PUSH
44108: FOR_TO
44109: IFFALSE 44197
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
44111: LD_ADDR_VAR 0 5
44115: PUSH
44116: LD_VAR 0 5
44120: PUSH
44121: LD_VAR 0 3
44125: PUSH
44126: LD_VAR 0 4
44130: ARRAY
44131: PPUSH
44132: CALL_OW 266
44136: PUSH
44137: LD_VAR 0 3
44141: PUSH
44142: LD_VAR 0 4
44146: ARRAY
44147: PPUSH
44148: CALL_OW 250
44152: PUSH
44153: LD_VAR 0 3
44157: PUSH
44158: LD_VAR 0 4
44162: ARRAY
44163: PPUSH
44164: CALL_OW 251
44168: PUSH
44169: LD_VAR 0 3
44173: PUSH
44174: LD_VAR 0 4
44178: ARRAY
44179: PPUSH
44180: CALL_OW 254
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: PUSH
44191: EMPTY
44192: LIST
44193: ADD
44194: ST_TO_ADDR
44195: GO 44108
44197: POP
44198: POP
// result := list ;
44199: LD_ADDR_VAR 0 2
44203: PUSH
44204: LD_VAR 0 5
44208: ST_TO_ADDR
// end ;
44209: LD_VAR 0 2
44213: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
44214: LD_INT 0
44216: PPUSH
44217: PPUSH
44218: PPUSH
44219: PPUSH
44220: PPUSH
44221: PPUSH
44222: PPUSH
// if not factory then
44223: LD_VAR 0 1
44227: NOT
44228: IFFALSE 44232
// exit ;
44230: GO 44825
// if control = control_apeman then
44232: LD_VAR 0 4
44236: PUSH
44237: LD_INT 5
44239: EQUAL
44240: IFFALSE 44349
// begin tmp := UnitsInside ( factory ) ;
44242: LD_ADDR_VAR 0 8
44246: PUSH
44247: LD_VAR 0 1
44251: PPUSH
44252: CALL_OW 313
44256: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
44257: LD_VAR 0 8
44261: PPUSH
44262: LD_INT 25
44264: PUSH
44265: LD_INT 12
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PPUSH
44272: CALL_OW 72
44276: NOT
44277: IFFALSE 44287
// control := control_manual ;
44279: LD_ADDR_VAR 0 4
44283: PUSH
44284: LD_INT 1
44286: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
44287: LD_ADDR_VAR 0 8
44291: PUSH
44292: LD_VAR 0 1
44296: PPUSH
44297: CALL 43984 0 1
44301: ST_TO_ADDR
// if tmp then
44302: LD_VAR 0 8
44306: IFFALSE 44349
// begin for i in tmp do
44308: LD_ADDR_VAR 0 7
44312: PUSH
44313: LD_VAR 0 8
44317: PUSH
44318: FOR_IN
44319: IFFALSE 44347
// if i [ 1 ] = b_ext_radio then
44321: LD_VAR 0 7
44325: PUSH
44326: LD_INT 1
44328: ARRAY
44329: PUSH
44330: LD_INT 22
44332: EQUAL
44333: IFFALSE 44345
// begin control := control_remote ;
44335: LD_ADDR_VAR 0 4
44339: PUSH
44340: LD_INT 2
44342: ST_TO_ADDR
// break ;
44343: GO 44347
// end ;
44345: GO 44318
44347: POP
44348: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44349: LD_VAR 0 1
44353: PPUSH
44354: LD_VAR 0 2
44358: PPUSH
44359: LD_VAR 0 3
44363: PPUSH
44364: LD_VAR 0 4
44368: PPUSH
44369: LD_VAR 0 5
44373: PPUSH
44374: CALL_OW 448
44378: IFFALSE 44413
// begin result := [ chassis , engine , control , weapon ] ;
44380: LD_ADDR_VAR 0 6
44384: PUSH
44385: LD_VAR 0 2
44389: PUSH
44390: LD_VAR 0 3
44394: PUSH
44395: LD_VAR 0 4
44399: PUSH
44400: LD_VAR 0 5
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// exit ;
44411: GO 44825
// end ; _chassis := AvailableChassisList ( factory ) ;
44413: LD_ADDR_VAR 0 9
44417: PUSH
44418: LD_VAR 0 1
44422: PPUSH
44423: CALL_OW 475
44427: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
44428: LD_ADDR_VAR 0 11
44432: PUSH
44433: LD_VAR 0 1
44437: PPUSH
44438: CALL_OW 476
44442: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
44443: LD_ADDR_VAR 0 12
44447: PUSH
44448: LD_VAR 0 1
44452: PPUSH
44453: CALL_OW 477
44457: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
44458: LD_ADDR_VAR 0 10
44462: PUSH
44463: LD_VAR 0 1
44467: PPUSH
44468: CALL_OW 478
44472: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
44473: LD_VAR 0 9
44477: NOT
44478: PUSH
44479: LD_VAR 0 11
44483: NOT
44484: OR
44485: PUSH
44486: LD_VAR 0 12
44490: NOT
44491: OR
44492: PUSH
44493: LD_VAR 0 10
44497: NOT
44498: OR
44499: IFFALSE 44534
// begin result := [ chassis , engine , control , weapon ] ;
44501: LD_ADDR_VAR 0 6
44505: PUSH
44506: LD_VAR 0 2
44510: PUSH
44511: LD_VAR 0 3
44515: PUSH
44516: LD_VAR 0 4
44520: PUSH
44521: LD_VAR 0 5
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: ST_TO_ADDR
// exit ;
44532: GO 44825
// end ; if not chassis in _chassis then
44534: LD_VAR 0 2
44538: PUSH
44539: LD_VAR 0 9
44543: IN
44544: NOT
44545: IFFALSE 44571
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
44547: LD_ADDR_VAR 0 2
44551: PUSH
44552: LD_VAR 0 9
44556: PUSH
44557: LD_INT 1
44559: PPUSH
44560: LD_VAR 0 9
44564: PPUSH
44565: CALL_OW 12
44569: ARRAY
44570: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
44571: LD_VAR 0 2
44575: PPUSH
44576: LD_VAR 0 3
44580: PPUSH
44581: CALL 44830 0 2
44585: NOT
44586: IFFALSE 44645
// repeat engine := _engine [ 1 ] ;
44588: LD_ADDR_VAR 0 3
44592: PUSH
44593: LD_VAR 0 11
44597: PUSH
44598: LD_INT 1
44600: ARRAY
44601: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
44602: LD_ADDR_VAR 0 11
44606: PUSH
44607: LD_VAR 0 11
44611: PPUSH
44612: LD_INT 1
44614: PPUSH
44615: CALL_OW 3
44619: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
44620: LD_VAR 0 2
44624: PPUSH
44625: LD_VAR 0 3
44629: PPUSH
44630: CALL 44830 0 2
44634: PUSH
44635: LD_VAR 0 11
44639: PUSH
44640: EMPTY
44641: EQUAL
44642: OR
44643: IFFALSE 44588
// if not control in _control then
44645: LD_VAR 0 4
44649: PUSH
44650: LD_VAR 0 12
44654: IN
44655: NOT
44656: IFFALSE 44682
// control := _control [ rand ( 1 , _control ) ] ;
44658: LD_ADDR_VAR 0 4
44662: PUSH
44663: LD_VAR 0 12
44667: PUSH
44668: LD_INT 1
44670: PPUSH
44671: LD_VAR 0 12
44675: PPUSH
44676: CALL_OW 12
44680: ARRAY
44681: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
44682: LD_VAR 0 2
44686: PPUSH
44687: LD_VAR 0 5
44691: PPUSH
44692: CALL 45050 0 2
44696: NOT
44697: IFFALSE 44756
// repeat weapon := _weapon [ 1 ] ;
44699: LD_ADDR_VAR 0 5
44703: PUSH
44704: LD_VAR 0 10
44708: PUSH
44709: LD_INT 1
44711: ARRAY
44712: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
44713: LD_ADDR_VAR 0 10
44717: PUSH
44718: LD_VAR 0 10
44722: PPUSH
44723: LD_INT 1
44725: PPUSH
44726: CALL_OW 3
44730: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
44731: LD_VAR 0 2
44735: PPUSH
44736: LD_VAR 0 5
44740: PPUSH
44741: CALL 45050 0 2
44745: PUSH
44746: LD_VAR 0 10
44750: PUSH
44751: EMPTY
44752: EQUAL
44753: OR
44754: IFFALSE 44699
// result := [ ] ;
44756: LD_ADDR_VAR 0 6
44760: PUSH
44761: EMPTY
44762: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
44763: LD_VAR 0 1
44767: PPUSH
44768: LD_VAR 0 2
44772: PPUSH
44773: LD_VAR 0 3
44777: PPUSH
44778: LD_VAR 0 4
44782: PPUSH
44783: LD_VAR 0 5
44787: PPUSH
44788: CALL_OW 448
44792: IFFALSE 44825
// result := [ chassis , engine , control , weapon ] ;
44794: LD_ADDR_VAR 0 6
44798: PUSH
44799: LD_VAR 0 2
44803: PUSH
44804: LD_VAR 0 3
44808: PUSH
44809: LD_VAR 0 4
44813: PUSH
44814: LD_VAR 0 5
44818: PUSH
44819: EMPTY
44820: LIST
44821: LIST
44822: LIST
44823: LIST
44824: ST_TO_ADDR
// end ;
44825: LD_VAR 0 6
44829: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
44830: LD_INT 0
44832: PPUSH
// if not chassis or not engine then
44833: LD_VAR 0 1
44837: NOT
44838: PUSH
44839: LD_VAR 0 2
44843: NOT
44844: OR
44845: IFFALSE 44849
// exit ;
44847: GO 45045
// case engine of engine_solar :
44849: LD_VAR 0 2
44853: PUSH
44854: LD_INT 2
44856: DOUBLE
44857: EQUAL
44858: IFTRUE 44862
44860: GO 44900
44862: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
44863: LD_ADDR_VAR 0 3
44867: PUSH
44868: LD_INT 11
44870: PUSH
44871: LD_INT 12
44873: PUSH
44874: LD_INT 13
44876: PUSH
44877: LD_INT 14
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 3
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: ST_TO_ADDR
44898: GO 45029
44900: LD_INT 1
44902: DOUBLE
44903: EQUAL
44904: IFTRUE 44908
44906: GO 44970
44908: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
44909: LD_ADDR_VAR 0 3
44913: PUSH
44914: LD_INT 11
44916: PUSH
44917: LD_INT 12
44919: PUSH
44920: LD_INT 13
44922: PUSH
44923: LD_INT 14
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: LD_INT 4
44937: PUSH
44938: LD_INT 5
44940: PUSH
44941: LD_INT 21
44943: PUSH
44944: LD_INT 23
44946: PUSH
44947: LD_INT 22
44949: PUSH
44950: LD_INT 24
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: ST_TO_ADDR
44968: GO 45029
44970: LD_INT 3
44972: DOUBLE
44973: EQUAL
44974: IFTRUE 44978
44976: GO 45028
44978: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44979: LD_ADDR_VAR 0 3
44983: PUSH
44984: LD_INT 13
44986: PUSH
44987: LD_INT 14
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 3
44995: PUSH
44996: LD_INT 4
44998: PUSH
44999: LD_INT 5
45001: PUSH
45002: LD_INT 21
45004: PUSH
45005: LD_INT 22
45007: PUSH
45008: LD_INT 23
45010: PUSH
45011: LD_INT 24
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: ST_TO_ADDR
45026: GO 45029
45028: POP
// result := ( chassis in result ) ;
45029: LD_ADDR_VAR 0 3
45033: PUSH
45034: LD_VAR 0 1
45038: PUSH
45039: LD_VAR 0 3
45043: IN
45044: ST_TO_ADDR
// end ;
45045: LD_VAR 0 3
45049: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
45050: LD_INT 0
45052: PPUSH
// if not chassis or not weapon then
45053: LD_VAR 0 1
45057: NOT
45058: PUSH
45059: LD_VAR 0 2
45063: NOT
45064: OR
45065: IFFALSE 45069
// exit ;
45067: GO 46131
// case weapon of us_machine_gun :
45069: LD_VAR 0 2
45073: PUSH
45074: LD_INT 2
45076: DOUBLE
45077: EQUAL
45078: IFTRUE 45082
45080: GO 45112
45082: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
45083: LD_ADDR_VAR 0 3
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: LD_INT 3
45096: PUSH
45097: LD_INT 4
45099: PUSH
45100: LD_INT 5
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: ST_TO_ADDR
45110: GO 46115
45112: LD_INT 3
45114: DOUBLE
45115: EQUAL
45116: IFTRUE 45120
45118: GO 45150
45120: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
45121: LD_ADDR_VAR 0 3
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 2
45131: PUSH
45132: LD_INT 3
45134: PUSH
45135: LD_INT 4
45137: PUSH
45138: LD_INT 5
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
45148: GO 46115
45150: LD_INT 11
45152: DOUBLE
45153: EQUAL
45154: IFTRUE 45158
45156: GO 45188
45158: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
45159: LD_ADDR_VAR 0 3
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: LD_INT 4
45175: PUSH
45176: LD_INT 5
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: ST_TO_ADDR
45186: GO 46115
45188: LD_INT 4
45190: DOUBLE
45191: EQUAL
45192: IFTRUE 45196
45194: GO 45222
45196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
45197: LD_ADDR_VAR 0 3
45201: PUSH
45202: LD_INT 2
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: LD_INT 4
45210: PUSH
45211: LD_INT 5
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: ST_TO_ADDR
45220: GO 46115
45222: LD_INT 5
45224: DOUBLE
45225: EQUAL
45226: IFTRUE 45230
45228: GO 45256
45230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
45231: LD_ADDR_VAR 0 3
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: LD_INT 3
45241: PUSH
45242: LD_INT 4
45244: PUSH
45245: LD_INT 5
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: ST_TO_ADDR
45254: GO 46115
45256: LD_INT 9
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45264
45262: GO 45290
45264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
45265: LD_ADDR_VAR 0 3
45269: PUSH
45270: LD_INT 2
45272: PUSH
45273: LD_INT 3
45275: PUSH
45276: LD_INT 4
45278: PUSH
45279: LD_INT 5
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: ST_TO_ADDR
45288: GO 46115
45290: LD_INT 7
45292: DOUBLE
45293: EQUAL
45294: IFTRUE 45298
45296: GO 45324
45298: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
45299: LD_ADDR_VAR 0 3
45303: PUSH
45304: LD_INT 2
45306: PUSH
45307: LD_INT 3
45309: PUSH
45310: LD_INT 4
45312: PUSH
45313: LD_INT 5
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: ST_TO_ADDR
45322: GO 46115
45324: LD_INT 12
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 45358
45332: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
45333: LD_ADDR_VAR 0 3
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 3
45343: PUSH
45344: LD_INT 4
45346: PUSH
45347: LD_INT 5
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: ST_TO_ADDR
45356: GO 46115
45358: LD_INT 13
45360: DOUBLE
45361: EQUAL
45362: IFTRUE 45366
45364: GO 45392
45366: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
45367: LD_ADDR_VAR 0 3
45371: PUSH
45372: LD_INT 2
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 4
45380: PUSH
45381: LD_INT 5
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: ST_TO_ADDR
45390: GO 46115
45392: LD_INT 14
45394: DOUBLE
45395: EQUAL
45396: IFTRUE 45400
45398: GO 45418
45400: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
45401: LD_ADDR_VAR 0 3
45405: PUSH
45406: LD_INT 4
45408: PUSH
45409: LD_INT 5
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: ST_TO_ADDR
45416: GO 46115
45418: LD_INT 6
45420: DOUBLE
45421: EQUAL
45422: IFTRUE 45426
45424: GO 45444
45426: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
45427: LD_ADDR_VAR 0 3
45431: PUSH
45432: LD_INT 4
45434: PUSH
45435: LD_INT 5
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: ST_TO_ADDR
45442: GO 46115
45444: LD_INT 10
45446: DOUBLE
45447: EQUAL
45448: IFTRUE 45452
45450: GO 45470
45452: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
45453: LD_ADDR_VAR 0 3
45457: PUSH
45458: LD_INT 4
45460: PUSH
45461: LD_INT 5
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: ST_TO_ADDR
45468: GO 46115
45470: LD_INT 22
45472: DOUBLE
45473: EQUAL
45474: IFTRUE 45478
45476: GO 45504
45478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
45479: LD_ADDR_VAR 0 3
45483: PUSH
45484: LD_INT 11
45486: PUSH
45487: LD_INT 12
45489: PUSH
45490: LD_INT 13
45492: PUSH
45493: LD_INT 14
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: ST_TO_ADDR
45502: GO 46115
45504: LD_INT 23
45506: DOUBLE
45507: EQUAL
45508: IFTRUE 45512
45510: GO 45538
45512: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
45513: LD_ADDR_VAR 0 3
45517: PUSH
45518: LD_INT 11
45520: PUSH
45521: LD_INT 12
45523: PUSH
45524: LD_INT 13
45526: PUSH
45527: LD_INT 14
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: ST_TO_ADDR
45536: GO 46115
45538: LD_INT 24
45540: DOUBLE
45541: EQUAL
45542: IFTRUE 45546
45544: GO 45572
45546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
45547: LD_ADDR_VAR 0 3
45551: PUSH
45552: LD_INT 11
45554: PUSH
45555: LD_INT 12
45557: PUSH
45558: LD_INT 13
45560: PUSH
45561: LD_INT 14
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: ST_TO_ADDR
45570: GO 46115
45572: LD_INT 30
45574: DOUBLE
45575: EQUAL
45576: IFTRUE 45580
45578: GO 45606
45580: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
45581: LD_ADDR_VAR 0 3
45585: PUSH
45586: LD_INT 11
45588: PUSH
45589: LD_INT 12
45591: PUSH
45592: LD_INT 13
45594: PUSH
45595: LD_INT 14
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: ST_TO_ADDR
45604: GO 46115
45606: LD_INT 25
45608: DOUBLE
45609: EQUAL
45610: IFTRUE 45614
45612: GO 45632
45614: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
45615: LD_ADDR_VAR 0 3
45619: PUSH
45620: LD_INT 13
45622: PUSH
45623: LD_INT 14
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: ST_TO_ADDR
45630: GO 46115
45632: LD_INT 27
45634: DOUBLE
45635: EQUAL
45636: IFTRUE 45640
45638: GO 45658
45640: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
45641: LD_ADDR_VAR 0 3
45645: PUSH
45646: LD_INT 13
45648: PUSH
45649: LD_INT 14
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: ST_TO_ADDR
45656: GO 46115
45658: LD_EXP 126
45662: DOUBLE
45663: EQUAL
45664: IFTRUE 45668
45666: GO 45694
45668: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
45669: LD_ADDR_VAR 0 3
45673: PUSH
45674: LD_INT 11
45676: PUSH
45677: LD_INT 12
45679: PUSH
45680: LD_INT 13
45682: PUSH
45683: LD_INT 14
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: ST_TO_ADDR
45692: GO 46115
45694: LD_INT 28
45696: DOUBLE
45697: EQUAL
45698: IFTRUE 45702
45700: GO 45720
45702: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
45703: LD_ADDR_VAR 0 3
45707: PUSH
45708: LD_INT 13
45710: PUSH
45711: LD_INT 14
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: ST_TO_ADDR
45718: GO 46115
45720: LD_INT 29
45722: DOUBLE
45723: EQUAL
45724: IFTRUE 45728
45726: GO 45746
45728: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
45729: LD_ADDR_VAR 0 3
45733: PUSH
45734: LD_INT 13
45736: PUSH
45737: LD_INT 14
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: ST_TO_ADDR
45744: GO 46115
45746: LD_INT 31
45748: DOUBLE
45749: EQUAL
45750: IFTRUE 45754
45752: GO 45772
45754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
45755: LD_ADDR_VAR 0 3
45759: PUSH
45760: LD_INT 13
45762: PUSH
45763: LD_INT 14
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: ST_TO_ADDR
45770: GO 46115
45772: LD_INT 26
45774: DOUBLE
45775: EQUAL
45776: IFTRUE 45780
45778: GO 45798
45780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
45781: LD_ADDR_VAR 0 3
45785: PUSH
45786: LD_INT 13
45788: PUSH
45789: LD_INT 14
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: ST_TO_ADDR
45796: GO 46115
45798: LD_INT 42
45800: DOUBLE
45801: EQUAL
45802: IFTRUE 45806
45804: GO 45832
45806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
45807: LD_ADDR_VAR 0 3
45811: PUSH
45812: LD_INT 21
45814: PUSH
45815: LD_INT 22
45817: PUSH
45818: LD_INT 23
45820: PUSH
45821: LD_INT 24
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: ST_TO_ADDR
45830: GO 46115
45832: LD_INT 43
45834: DOUBLE
45835: EQUAL
45836: IFTRUE 45840
45838: GO 45866
45840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
45841: LD_ADDR_VAR 0 3
45845: PUSH
45846: LD_INT 21
45848: PUSH
45849: LD_INT 22
45851: PUSH
45852: LD_INT 23
45854: PUSH
45855: LD_INT 24
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: ST_TO_ADDR
45864: GO 46115
45866: LD_INT 44
45868: DOUBLE
45869: EQUAL
45870: IFTRUE 45874
45872: GO 45900
45874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
45875: LD_ADDR_VAR 0 3
45879: PUSH
45880: LD_INT 21
45882: PUSH
45883: LD_INT 22
45885: PUSH
45886: LD_INT 23
45888: PUSH
45889: LD_INT 24
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: ST_TO_ADDR
45898: GO 46115
45900: LD_INT 45
45902: DOUBLE
45903: EQUAL
45904: IFTRUE 45908
45906: GO 45934
45908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
45909: LD_ADDR_VAR 0 3
45913: PUSH
45914: LD_INT 21
45916: PUSH
45917: LD_INT 22
45919: PUSH
45920: LD_INT 23
45922: PUSH
45923: LD_INT 24
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: ST_TO_ADDR
45932: GO 46115
45934: LD_INT 49
45936: DOUBLE
45937: EQUAL
45938: IFTRUE 45942
45940: GO 45968
45942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45943: LD_ADDR_VAR 0 3
45947: PUSH
45948: LD_INT 21
45950: PUSH
45951: LD_INT 22
45953: PUSH
45954: LD_INT 23
45956: PUSH
45957: LD_INT 24
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: ST_TO_ADDR
45966: GO 46115
45968: LD_INT 51
45970: DOUBLE
45971: EQUAL
45972: IFTRUE 45976
45974: GO 46002
45976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45977: LD_ADDR_VAR 0 3
45981: PUSH
45982: LD_INT 21
45984: PUSH
45985: LD_INT 22
45987: PUSH
45988: LD_INT 23
45990: PUSH
45991: LD_INT 24
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: ST_TO_ADDR
46000: GO 46115
46002: LD_INT 52
46004: DOUBLE
46005: EQUAL
46006: IFTRUE 46010
46008: GO 46036
46010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
46011: LD_ADDR_VAR 0 3
46015: PUSH
46016: LD_INT 21
46018: PUSH
46019: LD_INT 22
46021: PUSH
46022: LD_INT 23
46024: PUSH
46025: LD_INT 24
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
46034: GO 46115
46036: LD_INT 53
46038: DOUBLE
46039: EQUAL
46040: IFTRUE 46044
46042: GO 46062
46044: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
46045: LD_ADDR_VAR 0 3
46049: PUSH
46050: LD_INT 23
46052: PUSH
46053: LD_INT 24
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: ST_TO_ADDR
46060: GO 46115
46062: LD_INT 46
46064: DOUBLE
46065: EQUAL
46066: IFTRUE 46070
46068: GO 46088
46070: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
46071: LD_ADDR_VAR 0 3
46075: PUSH
46076: LD_INT 23
46078: PUSH
46079: LD_INT 24
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: ST_TO_ADDR
46086: GO 46115
46088: LD_INT 47
46090: DOUBLE
46091: EQUAL
46092: IFTRUE 46096
46094: GO 46114
46096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
46097: LD_ADDR_VAR 0 3
46101: PUSH
46102: LD_INT 23
46104: PUSH
46105: LD_INT 24
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: ST_TO_ADDR
46112: GO 46115
46114: POP
// result := ( chassis in result ) ;
46115: LD_ADDR_VAR 0 3
46119: PUSH
46120: LD_VAR 0 1
46124: PUSH
46125: LD_VAR 0 3
46129: IN
46130: ST_TO_ADDR
// end ;
46131: LD_VAR 0 3
46135: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
46136: LD_INT 0
46138: PPUSH
46139: PPUSH
46140: PPUSH
46141: PPUSH
46142: PPUSH
46143: PPUSH
46144: PPUSH
// result := array ;
46145: LD_ADDR_VAR 0 5
46149: PUSH
46150: LD_VAR 0 1
46154: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
46155: LD_VAR 0 1
46159: NOT
46160: PUSH
46161: LD_VAR 0 2
46165: NOT
46166: OR
46167: PUSH
46168: LD_VAR 0 3
46172: NOT
46173: OR
46174: PUSH
46175: LD_VAR 0 2
46179: PUSH
46180: LD_VAR 0 1
46184: GREATER
46185: OR
46186: PUSH
46187: LD_VAR 0 3
46191: PUSH
46192: LD_VAR 0 1
46196: GREATER
46197: OR
46198: IFFALSE 46202
// exit ;
46200: GO 46498
// if direction then
46202: LD_VAR 0 4
46206: IFFALSE 46270
// begin d := 1 ;
46208: LD_ADDR_VAR 0 9
46212: PUSH
46213: LD_INT 1
46215: ST_TO_ADDR
// if i_from > i_to then
46216: LD_VAR 0 2
46220: PUSH
46221: LD_VAR 0 3
46225: GREATER
46226: IFFALSE 46252
// length := ( array - i_from ) + i_to else
46228: LD_ADDR_VAR 0 11
46232: PUSH
46233: LD_VAR 0 1
46237: PUSH
46238: LD_VAR 0 2
46242: MINUS
46243: PUSH
46244: LD_VAR 0 3
46248: PLUS
46249: ST_TO_ADDR
46250: GO 46268
// length := i_to - i_from ;
46252: LD_ADDR_VAR 0 11
46256: PUSH
46257: LD_VAR 0 3
46261: PUSH
46262: LD_VAR 0 2
46266: MINUS
46267: ST_TO_ADDR
// end else
46268: GO 46331
// begin d := - 1 ;
46270: LD_ADDR_VAR 0 9
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: ST_TO_ADDR
// if i_from > i_to then
46279: LD_VAR 0 2
46283: PUSH
46284: LD_VAR 0 3
46288: GREATER
46289: IFFALSE 46309
// length := i_from - i_to else
46291: LD_ADDR_VAR 0 11
46295: PUSH
46296: LD_VAR 0 2
46300: PUSH
46301: LD_VAR 0 3
46305: MINUS
46306: ST_TO_ADDR
46307: GO 46331
// length := ( array - i_to ) + i_from ;
46309: LD_ADDR_VAR 0 11
46313: PUSH
46314: LD_VAR 0 1
46318: PUSH
46319: LD_VAR 0 3
46323: MINUS
46324: PUSH
46325: LD_VAR 0 2
46329: PLUS
46330: ST_TO_ADDR
// end ; if not length then
46331: LD_VAR 0 11
46335: NOT
46336: IFFALSE 46340
// exit ;
46338: GO 46498
// tmp := array ;
46340: LD_ADDR_VAR 0 10
46344: PUSH
46345: LD_VAR 0 1
46349: ST_TO_ADDR
// for i = 1 to length do
46350: LD_ADDR_VAR 0 6
46354: PUSH
46355: DOUBLE
46356: LD_INT 1
46358: DEC
46359: ST_TO_ADDR
46360: LD_VAR 0 11
46364: PUSH
46365: FOR_TO
46366: IFFALSE 46486
// begin for j = 1 to array do
46368: LD_ADDR_VAR 0 7
46372: PUSH
46373: DOUBLE
46374: LD_INT 1
46376: DEC
46377: ST_TO_ADDR
46378: LD_VAR 0 1
46382: PUSH
46383: FOR_TO
46384: IFFALSE 46472
// begin k := j + d ;
46386: LD_ADDR_VAR 0 8
46390: PUSH
46391: LD_VAR 0 7
46395: PUSH
46396: LD_VAR 0 9
46400: PLUS
46401: ST_TO_ADDR
// if k > array then
46402: LD_VAR 0 8
46406: PUSH
46407: LD_VAR 0 1
46411: GREATER
46412: IFFALSE 46422
// k := 1 ;
46414: LD_ADDR_VAR 0 8
46418: PUSH
46419: LD_INT 1
46421: ST_TO_ADDR
// if not k then
46422: LD_VAR 0 8
46426: NOT
46427: IFFALSE 46439
// k := array ;
46429: LD_ADDR_VAR 0 8
46433: PUSH
46434: LD_VAR 0 1
46438: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
46439: LD_ADDR_VAR 0 10
46443: PUSH
46444: LD_VAR 0 10
46448: PPUSH
46449: LD_VAR 0 8
46453: PPUSH
46454: LD_VAR 0 1
46458: PUSH
46459: LD_VAR 0 7
46463: ARRAY
46464: PPUSH
46465: CALL_OW 1
46469: ST_TO_ADDR
// end ;
46470: GO 46383
46472: POP
46473: POP
// array := tmp ;
46474: LD_ADDR_VAR 0 1
46478: PUSH
46479: LD_VAR 0 10
46483: ST_TO_ADDR
// end ;
46484: GO 46365
46486: POP
46487: POP
// result := array ;
46488: LD_ADDR_VAR 0 5
46492: PUSH
46493: LD_VAR 0 1
46497: ST_TO_ADDR
// end ;
46498: LD_VAR 0 5
46502: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
46503: LD_INT 0
46505: PPUSH
46506: PPUSH
// result := 0 ;
46507: LD_ADDR_VAR 0 3
46511: PUSH
46512: LD_INT 0
46514: ST_TO_ADDR
// if not array or not value in array then
46515: LD_VAR 0 1
46519: NOT
46520: PUSH
46521: LD_VAR 0 2
46525: PUSH
46526: LD_VAR 0 1
46530: IN
46531: NOT
46532: OR
46533: IFFALSE 46537
// exit ;
46535: GO 46591
// for i = 1 to array do
46537: LD_ADDR_VAR 0 4
46541: PUSH
46542: DOUBLE
46543: LD_INT 1
46545: DEC
46546: ST_TO_ADDR
46547: LD_VAR 0 1
46551: PUSH
46552: FOR_TO
46553: IFFALSE 46589
// if value = array [ i ] then
46555: LD_VAR 0 2
46559: PUSH
46560: LD_VAR 0 1
46564: PUSH
46565: LD_VAR 0 4
46569: ARRAY
46570: EQUAL
46571: IFFALSE 46587
// begin result := i ;
46573: LD_ADDR_VAR 0 3
46577: PUSH
46578: LD_VAR 0 4
46582: ST_TO_ADDR
// exit ;
46583: POP
46584: POP
46585: GO 46591
// end ;
46587: GO 46552
46589: POP
46590: POP
// end ;
46591: LD_VAR 0 3
46595: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
46596: LD_INT 0
46598: PPUSH
// vc_chassis := chassis ;
46599: LD_ADDR_OWVAR 37
46603: PUSH
46604: LD_VAR 0 1
46608: ST_TO_ADDR
// vc_engine := engine ;
46609: LD_ADDR_OWVAR 39
46613: PUSH
46614: LD_VAR 0 2
46618: ST_TO_ADDR
// vc_control := control ;
46619: LD_ADDR_OWVAR 38
46623: PUSH
46624: LD_VAR 0 3
46628: ST_TO_ADDR
// vc_weapon := weapon ;
46629: LD_ADDR_OWVAR 40
46633: PUSH
46634: LD_VAR 0 4
46638: ST_TO_ADDR
// vc_fuel_battery := fuel ;
46639: LD_ADDR_OWVAR 41
46643: PUSH
46644: LD_VAR 0 5
46648: ST_TO_ADDR
// end ;
46649: LD_VAR 0 6
46653: RET
// export function WantPlant ( unit ) ; var task ; begin
46654: LD_INT 0
46656: PPUSH
46657: PPUSH
// result := false ;
46658: LD_ADDR_VAR 0 2
46662: PUSH
46663: LD_INT 0
46665: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
46666: LD_ADDR_VAR 0 3
46670: PUSH
46671: LD_VAR 0 1
46675: PPUSH
46676: CALL_OW 437
46680: ST_TO_ADDR
// if task then
46681: LD_VAR 0 3
46685: IFFALSE 46713
// if task [ 1 ] [ 1 ] = p then
46687: LD_VAR 0 3
46691: PUSH
46692: LD_INT 1
46694: ARRAY
46695: PUSH
46696: LD_INT 1
46698: ARRAY
46699: PUSH
46700: LD_STRING p
46702: EQUAL
46703: IFFALSE 46713
// result := true ;
46705: LD_ADDR_VAR 0 2
46709: PUSH
46710: LD_INT 1
46712: ST_TO_ADDR
// end ;
46713: LD_VAR 0 2
46717: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
46718: LD_INT 0
46720: PPUSH
46721: PPUSH
46722: PPUSH
46723: PPUSH
// if pos < 1 then
46724: LD_VAR 0 2
46728: PUSH
46729: LD_INT 1
46731: LESS
46732: IFFALSE 46736
// exit ;
46734: GO 47039
// if pos = 1 then
46736: LD_VAR 0 2
46740: PUSH
46741: LD_INT 1
46743: EQUAL
46744: IFFALSE 46777
// result := Replace ( arr , pos [ 1 ] , value ) else
46746: LD_ADDR_VAR 0 4
46750: PUSH
46751: LD_VAR 0 1
46755: PPUSH
46756: LD_VAR 0 2
46760: PUSH
46761: LD_INT 1
46763: ARRAY
46764: PPUSH
46765: LD_VAR 0 3
46769: PPUSH
46770: CALL_OW 1
46774: ST_TO_ADDR
46775: GO 47039
// begin tmp := arr ;
46777: LD_ADDR_VAR 0 6
46781: PUSH
46782: LD_VAR 0 1
46786: ST_TO_ADDR
// s_arr := [ tmp ] ;
46787: LD_ADDR_VAR 0 7
46791: PUSH
46792: LD_VAR 0 6
46796: PUSH
46797: EMPTY
46798: LIST
46799: ST_TO_ADDR
// for i = 1 to pos - 1 do
46800: LD_ADDR_VAR 0 5
46804: PUSH
46805: DOUBLE
46806: LD_INT 1
46808: DEC
46809: ST_TO_ADDR
46810: LD_VAR 0 2
46814: PUSH
46815: LD_INT 1
46817: MINUS
46818: PUSH
46819: FOR_TO
46820: IFFALSE 46865
// begin tmp := tmp [ pos [ i ] ] ;
46822: LD_ADDR_VAR 0 6
46826: PUSH
46827: LD_VAR 0 6
46831: PUSH
46832: LD_VAR 0 2
46836: PUSH
46837: LD_VAR 0 5
46841: ARRAY
46842: ARRAY
46843: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
46844: LD_ADDR_VAR 0 7
46848: PUSH
46849: LD_VAR 0 7
46853: PUSH
46854: LD_VAR 0 6
46858: PUSH
46859: EMPTY
46860: LIST
46861: ADD
46862: ST_TO_ADDR
// end ;
46863: GO 46819
46865: POP
46866: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
46867: LD_ADDR_VAR 0 6
46871: PUSH
46872: LD_VAR 0 6
46876: PPUSH
46877: LD_VAR 0 2
46881: PUSH
46882: LD_VAR 0 2
46886: ARRAY
46887: PPUSH
46888: LD_VAR 0 3
46892: PPUSH
46893: CALL_OW 1
46897: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
46898: LD_ADDR_VAR 0 7
46902: PUSH
46903: LD_VAR 0 7
46907: PPUSH
46908: LD_VAR 0 7
46912: PPUSH
46913: LD_VAR 0 6
46917: PPUSH
46918: CALL_OW 1
46922: ST_TO_ADDR
// for i = s_arr downto 2 do
46923: LD_ADDR_VAR 0 5
46927: PUSH
46928: DOUBLE
46929: LD_VAR 0 7
46933: INC
46934: ST_TO_ADDR
46935: LD_INT 2
46937: PUSH
46938: FOR_DOWNTO
46939: IFFALSE 47023
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46941: LD_ADDR_VAR 0 6
46945: PUSH
46946: LD_VAR 0 7
46950: PUSH
46951: LD_VAR 0 5
46955: PUSH
46956: LD_INT 1
46958: MINUS
46959: ARRAY
46960: PPUSH
46961: LD_VAR 0 2
46965: PUSH
46966: LD_VAR 0 5
46970: PUSH
46971: LD_INT 1
46973: MINUS
46974: ARRAY
46975: PPUSH
46976: LD_VAR 0 7
46980: PUSH
46981: LD_VAR 0 5
46985: ARRAY
46986: PPUSH
46987: CALL_OW 1
46991: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46992: LD_ADDR_VAR 0 7
46996: PUSH
46997: LD_VAR 0 7
47001: PPUSH
47002: LD_VAR 0 5
47006: PUSH
47007: LD_INT 1
47009: MINUS
47010: PPUSH
47011: LD_VAR 0 6
47015: PPUSH
47016: CALL_OW 1
47020: ST_TO_ADDR
// end ;
47021: GO 46938
47023: POP
47024: POP
// result := s_arr [ 1 ] ;
47025: LD_ADDR_VAR 0 4
47029: PUSH
47030: LD_VAR 0 7
47034: PUSH
47035: LD_INT 1
47037: ARRAY
47038: ST_TO_ADDR
// end ; end ;
47039: LD_VAR 0 4
47043: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
47044: LD_INT 0
47046: PPUSH
47047: PPUSH
// if not list then
47048: LD_VAR 0 1
47052: NOT
47053: IFFALSE 47057
// exit ;
47055: GO 47148
// i := list [ pos1 ] ;
47057: LD_ADDR_VAR 0 5
47061: PUSH
47062: LD_VAR 0 1
47066: PUSH
47067: LD_VAR 0 2
47071: ARRAY
47072: ST_TO_ADDR
// if not i then
47073: LD_VAR 0 5
47077: NOT
47078: IFFALSE 47082
// exit ;
47080: GO 47148
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
47082: LD_ADDR_VAR 0 1
47086: PUSH
47087: LD_VAR 0 1
47091: PPUSH
47092: LD_VAR 0 2
47096: PPUSH
47097: LD_VAR 0 1
47101: PUSH
47102: LD_VAR 0 3
47106: ARRAY
47107: PPUSH
47108: CALL_OW 1
47112: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
47113: LD_ADDR_VAR 0 1
47117: PUSH
47118: LD_VAR 0 1
47122: PPUSH
47123: LD_VAR 0 3
47127: PPUSH
47128: LD_VAR 0 5
47132: PPUSH
47133: CALL_OW 1
47137: ST_TO_ADDR
// result := list ;
47138: LD_ADDR_VAR 0 4
47142: PUSH
47143: LD_VAR 0 1
47147: ST_TO_ADDR
// end ;
47148: LD_VAR 0 4
47152: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
47153: LD_INT 0
47155: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
47156: LD_ADDR_VAR 0 5
47160: PUSH
47161: LD_VAR 0 1
47165: PPUSH
47166: CALL_OW 250
47170: PPUSH
47171: LD_VAR 0 1
47175: PPUSH
47176: CALL_OW 251
47180: PPUSH
47181: LD_VAR 0 2
47185: PPUSH
47186: LD_VAR 0 3
47190: PPUSH
47191: LD_VAR 0 4
47195: PPUSH
47196: CALL 47206 0 5
47200: ST_TO_ADDR
// end ;
47201: LD_VAR 0 5
47205: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
47206: LD_INT 0
47208: PPUSH
47209: PPUSH
47210: PPUSH
47211: PPUSH
// if not list then
47212: LD_VAR 0 3
47216: NOT
47217: IFFALSE 47221
// exit ;
47219: GO 47609
// result := [ ] ;
47221: LD_ADDR_VAR 0 6
47225: PUSH
47226: EMPTY
47227: ST_TO_ADDR
// for i in list do
47228: LD_ADDR_VAR 0 7
47232: PUSH
47233: LD_VAR 0 3
47237: PUSH
47238: FOR_IN
47239: IFFALSE 47441
// begin tmp := GetDistUnitXY ( i , x , y ) ;
47241: LD_ADDR_VAR 0 9
47245: PUSH
47246: LD_VAR 0 7
47250: PPUSH
47251: LD_VAR 0 1
47255: PPUSH
47256: LD_VAR 0 2
47260: PPUSH
47261: CALL_OW 297
47265: ST_TO_ADDR
// if not result then
47266: LD_VAR 0 6
47270: NOT
47271: IFFALSE 47297
// result := [ [ i , tmp ] ] else
47273: LD_ADDR_VAR 0 6
47277: PUSH
47278: LD_VAR 0 7
47282: PUSH
47283: LD_VAR 0 9
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: EMPTY
47293: LIST
47294: ST_TO_ADDR
47295: GO 47439
// begin if result [ result ] [ 2 ] < tmp then
47297: LD_VAR 0 6
47301: PUSH
47302: LD_VAR 0 6
47306: ARRAY
47307: PUSH
47308: LD_INT 2
47310: ARRAY
47311: PUSH
47312: LD_VAR 0 9
47316: LESS
47317: IFFALSE 47359
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
47319: LD_ADDR_VAR 0 6
47323: PUSH
47324: LD_VAR 0 6
47328: PPUSH
47329: LD_VAR 0 6
47333: PUSH
47334: LD_INT 1
47336: PLUS
47337: PPUSH
47338: LD_VAR 0 7
47342: PUSH
47343: LD_VAR 0 9
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PPUSH
47352: CALL_OW 2
47356: ST_TO_ADDR
47357: GO 47439
// for j = 1 to result do
47359: LD_ADDR_VAR 0 8
47363: PUSH
47364: DOUBLE
47365: LD_INT 1
47367: DEC
47368: ST_TO_ADDR
47369: LD_VAR 0 6
47373: PUSH
47374: FOR_TO
47375: IFFALSE 47437
// begin if tmp < result [ j ] [ 2 ] then
47377: LD_VAR 0 9
47381: PUSH
47382: LD_VAR 0 6
47386: PUSH
47387: LD_VAR 0 8
47391: ARRAY
47392: PUSH
47393: LD_INT 2
47395: ARRAY
47396: LESS
47397: IFFALSE 47435
// begin result := Insert ( result , j , [ i , tmp ] ) ;
47399: LD_ADDR_VAR 0 6
47403: PUSH
47404: LD_VAR 0 6
47408: PPUSH
47409: LD_VAR 0 8
47413: PPUSH
47414: LD_VAR 0 7
47418: PUSH
47419: LD_VAR 0 9
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PPUSH
47428: CALL_OW 2
47432: ST_TO_ADDR
// break ;
47433: GO 47437
// end ; end ;
47435: GO 47374
47437: POP
47438: POP
// end ; end ;
47439: GO 47238
47441: POP
47442: POP
// if result and not asc then
47443: LD_VAR 0 6
47447: PUSH
47448: LD_VAR 0 4
47452: NOT
47453: AND
47454: IFFALSE 47529
// begin tmp := result ;
47456: LD_ADDR_VAR 0 9
47460: PUSH
47461: LD_VAR 0 6
47465: ST_TO_ADDR
// for i = tmp downto 1 do
47466: LD_ADDR_VAR 0 7
47470: PUSH
47471: DOUBLE
47472: LD_VAR 0 9
47476: INC
47477: ST_TO_ADDR
47478: LD_INT 1
47480: PUSH
47481: FOR_DOWNTO
47482: IFFALSE 47527
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
47484: LD_ADDR_VAR 0 6
47488: PUSH
47489: LD_VAR 0 6
47493: PPUSH
47494: LD_VAR 0 9
47498: PUSH
47499: LD_VAR 0 7
47503: MINUS
47504: PUSH
47505: LD_INT 1
47507: PLUS
47508: PPUSH
47509: LD_VAR 0 9
47513: PUSH
47514: LD_VAR 0 7
47518: ARRAY
47519: PPUSH
47520: CALL_OW 1
47524: ST_TO_ADDR
47525: GO 47481
47527: POP
47528: POP
// end ; tmp := [ ] ;
47529: LD_ADDR_VAR 0 9
47533: PUSH
47534: EMPTY
47535: ST_TO_ADDR
// if mode then
47536: LD_VAR 0 5
47540: IFFALSE 47609
// begin for i = 1 to result do
47542: LD_ADDR_VAR 0 7
47546: PUSH
47547: DOUBLE
47548: LD_INT 1
47550: DEC
47551: ST_TO_ADDR
47552: LD_VAR 0 6
47556: PUSH
47557: FOR_TO
47558: IFFALSE 47597
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
47560: LD_ADDR_VAR 0 9
47564: PUSH
47565: LD_VAR 0 9
47569: PPUSH
47570: LD_VAR 0 7
47574: PPUSH
47575: LD_VAR 0 6
47579: PUSH
47580: LD_VAR 0 7
47584: ARRAY
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: PPUSH
47590: CALL_OW 1
47594: ST_TO_ADDR
47595: GO 47557
47597: POP
47598: POP
// result := tmp ;
47599: LD_ADDR_VAR 0 6
47603: PUSH
47604: LD_VAR 0 9
47608: ST_TO_ADDR
// end ; end ;
47609: LD_VAR 0 6
47613: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47614: LD_INT 0
47616: PPUSH
47617: PPUSH
47618: PPUSH
47619: PPUSH
47620: PPUSH
47621: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47622: LD_ADDR_VAR 0 5
47626: PUSH
47627: LD_INT 0
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: ST_TO_ADDR
// if not x or not y then
47644: LD_VAR 0 2
47648: NOT
47649: PUSH
47650: LD_VAR 0 3
47654: NOT
47655: OR
47656: IFFALSE 47660
// exit ;
47658: GO 49312
// if not range then
47660: LD_VAR 0 4
47664: NOT
47665: IFFALSE 47675
// range := 10 ;
47667: LD_ADDR_VAR 0 4
47671: PUSH
47672: LD_INT 10
47674: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47675: LD_ADDR_VAR 0 8
47679: PUSH
47680: LD_INT 81
47682: PUSH
47683: LD_VAR 0 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 92
47694: PUSH
47695: LD_VAR 0 2
47699: PUSH
47700: LD_VAR 0 3
47704: PUSH
47705: LD_VAR 0 4
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: LD_INT 21
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: LIST
47737: PPUSH
47738: CALL_OW 69
47742: ST_TO_ADDR
// if not tmp then
47743: LD_VAR 0 8
47747: NOT
47748: IFFALSE 47752
// exit ;
47750: GO 49312
// for i in tmp do
47752: LD_ADDR_VAR 0 6
47756: PUSH
47757: LD_VAR 0 8
47761: PUSH
47762: FOR_IN
47763: IFFALSE 49287
// begin points := [ 0 , 0 , 0 ] ;
47765: LD_ADDR_VAR 0 9
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// bpoints := 1 ;
47784: LD_ADDR_VAR 0 10
47788: PUSH
47789: LD_INT 1
47791: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47792: LD_VAR 0 6
47796: PPUSH
47797: CALL_OW 247
47801: PUSH
47802: LD_INT 1
47804: DOUBLE
47805: EQUAL
47806: IFTRUE 47810
47808: GO 48388
47810: POP
// begin if GetClass ( i ) = 1 then
47811: LD_VAR 0 6
47815: PPUSH
47816: CALL_OW 257
47820: PUSH
47821: LD_INT 1
47823: EQUAL
47824: IFFALSE 47845
// points := [ 10 , 5 , 3 ] ;
47826: LD_ADDR_VAR 0 9
47830: PUSH
47831: LD_INT 10
47833: PUSH
47834: LD_INT 5
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47845: LD_VAR 0 6
47849: PPUSH
47850: CALL_OW 257
47854: PUSH
47855: LD_INT 2
47857: PUSH
47858: LD_INT 3
47860: PUSH
47861: LD_INT 4
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: LIST
47868: IN
47869: IFFALSE 47890
// points := [ 3 , 2 , 1 ] ;
47871: LD_ADDR_VAR 0 9
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: LIST
47889: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47890: LD_VAR 0 6
47894: PPUSH
47895: CALL_OW 257
47899: PUSH
47900: LD_INT 5
47902: EQUAL
47903: IFFALSE 47924
// points := [ 130 , 5 , 2 ] ;
47905: LD_ADDR_VAR 0 9
47909: PUSH
47910: LD_INT 130
47912: PUSH
47913: LD_INT 5
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47924: LD_VAR 0 6
47928: PPUSH
47929: CALL_OW 257
47933: PUSH
47934: LD_INT 8
47936: EQUAL
47937: IFFALSE 47958
// points := [ 35 , 35 , 30 ] ;
47939: LD_ADDR_VAR 0 9
47943: PUSH
47944: LD_INT 35
47946: PUSH
47947: LD_INT 35
47949: PUSH
47950: LD_INT 30
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47958: LD_VAR 0 6
47962: PPUSH
47963: CALL_OW 257
47967: PUSH
47968: LD_INT 9
47970: EQUAL
47971: IFFALSE 47992
// points := [ 20 , 55 , 40 ] ;
47973: LD_ADDR_VAR 0 9
47977: PUSH
47978: LD_INT 20
47980: PUSH
47981: LD_INT 55
47983: PUSH
47984: LD_INT 40
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47992: LD_VAR 0 6
47996: PPUSH
47997: CALL_OW 257
48001: PUSH
48002: LD_INT 12
48004: PUSH
48005: LD_INT 16
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: IN
48012: IFFALSE 48033
// points := [ 5 , 3 , 2 ] ;
48014: LD_ADDR_VAR 0 9
48018: PUSH
48019: LD_INT 5
48021: PUSH
48022: LD_INT 3
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: LIST
48032: ST_TO_ADDR
// if GetClass ( i ) = 17 then
48033: LD_VAR 0 6
48037: PPUSH
48038: CALL_OW 257
48042: PUSH
48043: LD_INT 17
48045: EQUAL
48046: IFFALSE 48067
// points := [ 100 , 50 , 75 ] ;
48048: LD_ADDR_VAR 0 9
48052: PUSH
48053: LD_INT 100
48055: PUSH
48056: LD_INT 50
48058: PUSH
48059: LD_INT 75
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: LIST
48066: ST_TO_ADDR
// if GetClass ( i ) = 15 then
48067: LD_VAR 0 6
48071: PPUSH
48072: CALL_OW 257
48076: PUSH
48077: LD_INT 15
48079: EQUAL
48080: IFFALSE 48101
// points := [ 10 , 5 , 3 ] ;
48082: LD_ADDR_VAR 0 9
48086: PUSH
48087: LD_INT 10
48089: PUSH
48090: LD_INT 5
48092: PUSH
48093: LD_INT 3
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: LIST
48100: ST_TO_ADDR
// if GetClass ( i ) = 14 then
48101: LD_VAR 0 6
48105: PPUSH
48106: CALL_OW 257
48110: PUSH
48111: LD_INT 14
48113: EQUAL
48114: IFFALSE 48135
// points := [ 10 , 0 , 0 ] ;
48116: LD_ADDR_VAR 0 9
48120: PUSH
48121: LD_INT 10
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// if GetClass ( i ) = 11 then
48135: LD_VAR 0 6
48139: PPUSH
48140: CALL_OW 257
48144: PUSH
48145: LD_INT 11
48147: EQUAL
48148: IFFALSE 48169
// points := [ 30 , 10 , 5 ] ;
48150: LD_ADDR_VAR 0 9
48154: PUSH
48155: LD_INT 30
48157: PUSH
48158: LD_INT 10
48160: PUSH
48161: LD_INT 5
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: LIST
48168: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
48169: LD_VAR 0 1
48173: PPUSH
48174: LD_INT 5
48176: PPUSH
48177: CALL_OW 321
48181: PUSH
48182: LD_INT 2
48184: EQUAL
48185: IFFALSE 48202
// bpoints := bpoints * 1.8 ;
48187: LD_ADDR_VAR 0 10
48191: PUSH
48192: LD_VAR 0 10
48196: PUSH
48197: LD_REAL  1.80000000000000E+0000
48200: MUL
48201: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
48202: LD_VAR 0 6
48206: PPUSH
48207: CALL_OW 257
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 3
48220: PUSH
48221: LD_INT 4
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: IN
48230: PUSH
48231: LD_VAR 0 1
48235: PPUSH
48236: LD_INT 51
48238: PPUSH
48239: CALL_OW 321
48243: PUSH
48244: LD_INT 2
48246: EQUAL
48247: AND
48248: IFFALSE 48265
// bpoints := bpoints * 1.2 ;
48250: LD_ADDR_VAR 0 10
48254: PUSH
48255: LD_VAR 0 10
48259: PUSH
48260: LD_REAL  1.20000000000000E+0000
48263: MUL
48264: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
48265: LD_VAR 0 6
48269: PPUSH
48270: CALL_OW 257
48274: PUSH
48275: LD_INT 5
48277: PUSH
48278: LD_INT 7
48280: PUSH
48281: LD_INT 9
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: LIST
48288: IN
48289: PUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: LD_INT 52
48297: PPUSH
48298: CALL_OW 321
48302: PUSH
48303: LD_INT 2
48305: EQUAL
48306: AND
48307: IFFALSE 48324
// bpoints := bpoints * 1.5 ;
48309: LD_ADDR_VAR 0 10
48313: PUSH
48314: LD_VAR 0 10
48318: PUSH
48319: LD_REAL  1.50000000000000E+0000
48322: MUL
48323: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
48324: LD_VAR 0 1
48328: PPUSH
48329: LD_INT 66
48331: PPUSH
48332: CALL_OW 321
48336: PUSH
48337: LD_INT 2
48339: EQUAL
48340: IFFALSE 48357
// bpoints := bpoints * 1.1 ;
48342: LD_ADDR_VAR 0 10
48346: PUSH
48347: LD_VAR 0 10
48351: PUSH
48352: LD_REAL  1.10000000000000E+0000
48355: MUL
48356: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
48357: LD_ADDR_VAR 0 10
48361: PUSH
48362: LD_VAR 0 10
48366: PUSH
48367: LD_VAR 0 6
48371: PPUSH
48372: LD_INT 1
48374: PPUSH
48375: CALL_OW 259
48379: PUSH
48380: LD_REAL  1.15000000000000E+0000
48383: MUL
48384: MUL
48385: ST_TO_ADDR
// end ; unit_vehicle :
48386: GO 49216
48388: LD_INT 2
48390: DOUBLE
48391: EQUAL
48392: IFTRUE 48396
48394: GO 49204
48396: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
48397: LD_VAR 0 6
48401: PPUSH
48402: CALL_OW 264
48406: PUSH
48407: LD_INT 2
48409: PUSH
48410: LD_INT 42
48412: PUSH
48413: LD_INT 24
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: IN
48421: IFFALSE 48442
// points := [ 25 , 5 , 3 ] ;
48423: LD_ADDR_VAR 0 9
48427: PUSH
48428: LD_INT 25
48430: PUSH
48431: LD_INT 5
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
48442: LD_VAR 0 6
48446: PPUSH
48447: CALL_OW 264
48451: PUSH
48452: LD_INT 4
48454: PUSH
48455: LD_INT 43
48457: PUSH
48458: LD_INT 25
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: LIST
48465: IN
48466: IFFALSE 48487
// points := [ 40 , 15 , 5 ] ;
48468: LD_ADDR_VAR 0 9
48472: PUSH
48473: LD_INT 40
48475: PUSH
48476: LD_INT 15
48478: PUSH
48479: LD_INT 5
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
48487: LD_VAR 0 6
48491: PPUSH
48492: CALL_OW 264
48496: PUSH
48497: LD_INT 3
48499: PUSH
48500: LD_INT 23
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: IN
48507: IFFALSE 48528
// points := [ 7 , 25 , 8 ] ;
48509: LD_ADDR_VAR 0 9
48513: PUSH
48514: LD_INT 7
48516: PUSH
48517: LD_INT 25
48519: PUSH
48520: LD_INT 8
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
48528: LD_VAR 0 6
48532: PPUSH
48533: CALL_OW 264
48537: PUSH
48538: LD_INT 5
48540: PUSH
48541: LD_INT 27
48543: PUSH
48544: LD_INT 44
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: LIST
48551: IN
48552: IFFALSE 48573
// points := [ 14 , 50 , 16 ] ;
48554: LD_ADDR_VAR 0 9
48558: PUSH
48559: LD_INT 14
48561: PUSH
48562: LD_INT 50
48564: PUSH
48565: LD_INT 16
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48573: LD_VAR 0 6
48577: PPUSH
48578: CALL_OW 264
48582: PUSH
48583: LD_INT 6
48585: PUSH
48586: LD_INT 46
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: IN
48593: IFFALSE 48614
// points := [ 32 , 120 , 70 ] ;
48595: LD_ADDR_VAR 0 9
48599: PUSH
48600: LD_INT 32
48602: PUSH
48603: LD_INT 120
48605: PUSH
48606: LD_INT 70
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48614: LD_VAR 0 6
48618: PPUSH
48619: CALL_OW 264
48623: PUSH
48624: LD_INT 7
48626: PUSH
48627: LD_INT 28
48629: PUSH
48630: LD_INT 45
48632: PUSH
48633: LD_EXP 126
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: IN
48644: IFFALSE 48665
// points := [ 35 , 20 , 45 ] ;
48646: LD_ADDR_VAR 0 9
48650: PUSH
48651: LD_INT 35
48653: PUSH
48654: LD_INT 20
48656: PUSH
48657: LD_INT 45
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48665: LD_VAR 0 6
48669: PPUSH
48670: CALL_OW 264
48674: PUSH
48675: LD_INT 47
48677: PUSH
48678: EMPTY
48679: LIST
48680: IN
48681: IFFALSE 48702
// points := [ 67 , 45 , 75 ] ;
48683: LD_ADDR_VAR 0 9
48687: PUSH
48688: LD_INT 67
48690: PUSH
48691: LD_INT 45
48693: PUSH
48694: LD_INT 75
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48702: LD_VAR 0 6
48706: PPUSH
48707: CALL_OW 264
48711: PUSH
48712: LD_INT 26
48714: PUSH
48715: EMPTY
48716: LIST
48717: IN
48718: IFFALSE 48739
// points := [ 120 , 30 , 80 ] ;
48720: LD_ADDR_VAR 0 9
48724: PUSH
48725: LD_INT 120
48727: PUSH
48728: LD_INT 30
48730: PUSH
48731: LD_INT 80
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: LIST
48738: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48739: LD_VAR 0 6
48743: PPUSH
48744: CALL_OW 264
48748: PUSH
48749: LD_INT 22
48751: PUSH
48752: EMPTY
48753: LIST
48754: IN
48755: IFFALSE 48776
// points := [ 40 , 1 , 1 ] ;
48757: LD_ADDR_VAR 0 9
48761: PUSH
48762: LD_INT 40
48764: PUSH
48765: LD_INT 1
48767: PUSH
48768: LD_INT 1
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48776: LD_VAR 0 6
48780: PPUSH
48781: CALL_OW 264
48785: PUSH
48786: LD_INT 29
48788: PUSH
48789: EMPTY
48790: LIST
48791: IN
48792: IFFALSE 48813
// points := [ 70 , 200 , 400 ] ;
48794: LD_ADDR_VAR 0 9
48798: PUSH
48799: LD_INT 70
48801: PUSH
48802: LD_INT 200
48804: PUSH
48805: LD_INT 400
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: LIST
48812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48813: LD_VAR 0 6
48817: PPUSH
48818: CALL_OW 264
48822: PUSH
48823: LD_INT 14
48825: PUSH
48826: LD_INT 53
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: IN
48833: IFFALSE 48854
// points := [ 40 , 10 , 20 ] ;
48835: LD_ADDR_VAR 0 9
48839: PUSH
48840: LD_INT 40
48842: PUSH
48843: LD_INT 10
48845: PUSH
48846: LD_INT 20
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48854: LD_VAR 0 6
48858: PPUSH
48859: CALL_OW 264
48863: PUSH
48864: LD_INT 9
48866: PUSH
48867: EMPTY
48868: LIST
48869: IN
48870: IFFALSE 48891
// points := [ 5 , 70 , 20 ] ;
48872: LD_ADDR_VAR 0 9
48876: PUSH
48877: LD_INT 5
48879: PUSH
48880: LD_INT 70
48882: PUSH
48883: LD_INT 20
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48891: LD_VAR 0 6
48895: PPUSH
48896: CALL_OW 264
48900: PUSH
48901: LD_INT 10
48903: PUSH
48904: EMPTY
48905: LIST
48906: IN
48907: IFFALSE 48928
// points := [ 35 , 110 , 70 ] ;
48909: LD_ADDR_VAR 0 9
48913: PUSH
48914: LD_INT 35
48916: PUSH
48917: LD_INT 110
48919: PUSH
48920: LD_INT 70
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48928: LD_VAR 0 6
48932: PPUSH
48933: CALL_OW 265
48937: PUSH
48938: LD_INT 25
48940: EQUAL
48941: IFFALSE 48962
// points := [ 80 , 65 , 100 ] ;
48943: LD_ADDR_VAR 0 9
48947: PUSH
48948: LD_INT 80
48950: PUSH
48951: LD_INT 65
48953: PUSH
48954: LD_INT 100
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: LIST
48961: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48962: LD_VAR 0 6
48966: PPUSH
48967: CALL_OW 263
48971: PUSH
48972: LD_INT 1
48974: EQUAL
48975: IFFALSE 49010
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48977: LD_ADDR_VAR 0 10
48981: PUSH
48982: LD_VAR 0 10
48986: PUSH
48987: LD_VAR 0 6
48991: PPUSH
48992: CALL_OW 311
48996: PPUSH
48997: LD_INT 3
48999: PPUSH
49000: CALL_OW 259
49004: PUSH
49005: LD_INT 4
49007: MUL
49008: MUL
49009: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
49010: LD_VAR 0 6
49014: PPUSH
49015: CALL_OW 263
49019: PUSH
49020: LD_INT 2
49022: EQUAL
49023: IFFALSE 49074
// begin j := IsControledBy ( i ) ;
49025: LD_ADDR_VAR 0 7
49029: PUSH
49030: LD_VAR 0 6
49034: PPUSH
49035: CALL_OW 312
49039: ST_TO_ADDR
// if j then
49040: LD_VAR 0 7
49044: IFFALSE 49074
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
49046: LD_ADDR_VAR 0 10
49050: PUSH
49051: LD_VAR 0 10
49055: PUSH
49056: LD_VAR 0 7
49060: PPUSH
49061: LD_INT 3
49063: PPUSH
49064: CALL_OW 259
49068: PUSH
49069: LD_INT 3
49071: MUL
49072: MUL
49073: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
49074: LD_VAR 0 6
49078: PPUSH
49079: CALL_OW 264
49083: PUSH
49084: LD_INT 5
49086: PUSH
49087: LD_INT 6
49089: PUSH
49090: LD_INT 46
49092: PUSH
49093: LD_INT 44
49095: PUSH
49096: LD_INT 47
49098: PUSH
49099: LD_INT 45
49101: PUSH
49102: LD_INT 28
49104: PUSH
49105: LD_INT 7
49107: PUSH
49108: LD_INT 27
49110: PUSH
49111: LD_INT 29
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: IN
49126: PUSH
49127: LD_VAR 0 1
49131: PPUSH
49132: LD_INT 52
49134: PPUSH
49135: CALL_OW 321
49139: PUSH
49140: LD_INT 2
49142: EQUAL
49143: AND
49144: IFFALSE 49161
// bpoints := bpoints * 1.2 ;
49146: LD_ADDR_VAR 0 10
49150: PUSH
49151: LD_VAR 0 10
49155: PUSH
49156: LD_REAL  1.20000000000000E+0000
49159: MUL
49160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
49161: LD_VAR 0 6
49165: PPUSH
49166: CALL_OW 264
49170: PUSH
49171: LD_INT 6
49173: PUSH
49174: LD_INT 46
49176: PUSH
49177: LD_INT 47
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: LIST
49184: IN
49185: IFFALSE 49202
// bpoints := bpoints * 1.2 ;
49187: LD_ADDR_VAR 0 10
49191: PUSH
49192: LD_VAR 0 10
49196: PUSH
49197: LD_REAL  1.20000000000000E+0000
49200: MUL
49201: ST_TO_ADDR
// end ; unit_building :
49202: GO 49216
49204: LD_INT 3
49206: DOUBLE
49207: EQUAL
49208: IFTRUE 49212
49210: GO 49215
49212: POP
// ; end ;
49213: GO 49216
49215: POP
// for j = 1 to 3 do
49216: LD_ADDR_VAR 0 7
49220: PUSH
49221: DOUBLE
49222: LD_INT 1
49224: DEC
49225: ST_TO_ADDR
49226: LD_INT 3
49228: PUSH
49229: FOR_TO
49230: IFFALSE 49283
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
49232: LD_ADDR_VAR 0 5
49236: PUSH
49237: LD_VAR 0 5
49241: PPUSH
49242: LD_VAR 0 7
49246: PPUSH
49247: LD_VAR 0 5
49251: PUSH
49252: LD_VAR 0 7
49256: ARRAY
49257: PUSH
49258: LD_VAR 0 9
49262: PUSH
49263: LD_VAR 0 7
49267: ARRAY
49268: PUSH
49269: LD_VAR 0 10
49273: MUL
49274: PLUS
49275: PPUSH
49276: CALL_OW 1
49280: ST_TO_ADDR
49281: GO 49229
49283: POP
49284: POP
// end ;
49285: GO 47762
49287: POP
49288: POP
// result := Replace ( result , 4 , tmp ) ;
49289: LD_ADDR_VAR 0 5
49293: PUSH
49294: LD_VAR 0 5
49298: PPUSH
49299: LD_INT 4
49301: PPUSH
49302: LD_VAR 0 8
49306: PPUSH
49307: CALL_OW 1
49311: ST_TO_ADDR
// end ;
49312: LD_VAR 0 5
49316: RET
// export function DangerAtRange ( unit , range ) ; begin
49317: LD_INT 0
49319: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
49320: LD_ADDR_VAR 0 3
49324: PUSH
49325: LD_VAR 0 1
49329: PPUSH
49330: CALL_OW 255
49334: PPUSH
49335: LD_VAR 0 1
49339: PPUSH
49340: CALL_OW 250
49344: PPUSH
49345: LD_VAR 0 1
49349: PPUSH
49350: CALL_OW 251
49354: PPUSH
49355: LD_VAR 0 2
49359: PPUSH
49360: CALL 47614 0 4
49364: ST_TO_ADDR
// end ;
49365: LD_VAR 0 3
49369: RET
// export function DangerInArea ( side , area ) ; begin
49370: LD_INT 0
49372: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
49373: LD_ADDR_VAR 0 3
49377: PUSH
49378: LD_VAR 0 2
49382: PPUSH
49383: LD_INT 81
49385: PUSH
49386: LD_VAR 0 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PPUSH
49395: CALL_OW 70
49399: ST_TO_ADDR
// end ;
49400: LD_VAR 0 3
49404: RET
// export function IsExtension ( b ) ; begin
49405: LD_INT 0
49407: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
49408: LD_ADDR_VAR 0 2
49412: PUSH
49413: LD_VAR 0 1
49417: PUSH
49418: LD_INT 23
49420: PUSH
49421: LD_INT 20
49423: PUSH
49424: LD_INT 22
49426: PUSH
49427: LD_INT 17
49429: PUSH
49430: LD_INT 24
49432: PUSH
49433: LD_INT 21
49435: PUSH
49436: LD_INT 19
49438: PUSH
49439: LD_INT 16
49441: PUSH
49442: LD_INT 25
49444: PUSH
49445: LD_INT 18
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: IN
49460: ST_TO_ADDR
// end ;
49461: LD_VAR 0 2
49465: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
49466: LD_INT 0
49468: PPUSH
49469: PPUSH
49470: PPUSH
// result := [ ] ;
49471: LD_ADDR_VAR 0 4
49475: PUSH
49476: EMPTY
49477: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
49478: LD_ADDR_VAR 0 5
49482: PUSH
49483: LD_VAR 0 2
49487: PPUSH
49488: LD_INT 21
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PPUSH
49498: CALL_OW 70
49502: ST_TO_ADDR
// if not tmp then
49503: LD_VAR 0 5
49507: NOT
49508: IFFALSE 49512
// exit ;
49510: GO 49576
// if checkLink then
49512: LD_VAR 0 3
49516: IFFALSE 49566
// begin for i in tmp do
49518: LD_ADDR_VAR 0 6
49522: PUSH
49523: LD_VAR 0 5
49527: PUSH
49528: FOR_IN
49529: IFFALSE 49564
// if GetBase ( i ) <> base then
49531: LD_VAR 0 6
49535: PPUSH
49536: CALL_OW 274
49540: PUSH
49541: LD_VAR 0 1
49545: NONEQUAL
49546: IFFALSE 49562
// ComLinkToBase ( base , i ) ;
49548: LD_VAR 0 1
49552: PPUSH
49553: LD_VAR 0 6
49557: PPUSH
49558: CALL_OW 169
49562: GO 49528
49564: POP
49565: POP
// end ; result := tmp ;
49566: LD_ADDR_VAR 0 4
49570: PUSH
49571: LD_VAR 0 5
49575: ST_TO_ADDR
// end ;
49576: LD_VAR 0 4
49580: RET
// export function ComComplete ( units , b ) ; var i ; begin
49581: LD_INT 0
49583: PPUSH
49584: PPUSH
// if not units then
49585: LD_VAR 0 1
49589: NOT
49590: IFFALSE 49594
// exit ;
49592: GO 49684
// for i in units do
49594: LD_ADDR_VAR 0 4
49598: PUSH
49599: LD_VAR 0 1
49603: PUSH
49604: FOR_IN
49605: IFFALSE 49682
// if BuildingStatus ( b ) = bs_build then
49607: LD_VAR 0 2
49611: PPUSH
49612: CALL_OW 461
49616: PUSH
49617: LD_INT 1
49619: EQUAL
49620: IFFALSE 49680
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49622: LD_VAR 0 4
49626: PPUSH
49627: LD_STRING h
49629: PUSH
49630: LD_VAR 0 2
49634: PPUSH
49635: CALL_OW 250
49639: PUSH
49640: LD_VAR 0 2
49644: PPUSH
49645: CALL_OW 251
49649: PUSH
49650: LD_VAR 0 2
49654: PUSH
49655: LD_INT 0
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: PUSH
49673: EMPTY
49674: LIST
49675: PPUSH
49676: CALL_OW 446
49680: GO 49604
49682: POP
49683: POP
// end ;
49684: LD_VAR 0 3
49688: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49689: LD_INT 0
49691: PPUSH
49692: PPUSH
49693: PPUSH
49694: PPUSH
49695: PPUSH
49696: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49697: LD_VAR 0 1
49701: NOT
49702: PUSH
49703: LD_VAR 0 1
49707: PPUSH
49708: CALL_OW 263
49712: PUSH
49713: LD_INT 2
49715: NONEQUAL
49716: OR
49717: IFFALSE 49721
// exit ;
49719: GO 50037
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49721: LD_ADDR_VAR 0 6
49725: PUSH
49726: LD_INT 22
49728: PUSH
49729: LD_VAR 0 1
49733: PPUSH
49734: CALL_OW 255
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 30
49748: PUSH
49749: LD_INT 36
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 34
49758: PUSH
49759: LD_INT 31
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PPUSH
49775: CALL_OW 69
49779: ST_TO_ADDR
// if not tmp then
49780: LD_VAR 0 6
49784: NOT
49785: IFFALSE 49789
// exit ;
49787: GO 50037
// result := [ ] ;
49789: LD_ADDR_VAR 0 2
49793: PUSH
49794: EMPTY
49795: ST_TO_ADDR
// for i in tmp do
49796: LD_ADDR_VAR 0 3
49800: PUSH
49801: LD_VAR 0 6
49805: PUSH
49806: FOR_IN
49807: IFFALSE 49878
// begin t := UnitsInside ( i ) ;
49809: LD_ADDR_VAR 0 4
49813: PUSH
49814: LD_VAR 0 3
49818: PPUSH
49819: CALL_OW 313
49823: ST_TO_ADDR
// if t then
49824: LD_VAR 0 4
49828: IFFALSE 49876
// for j in t do
49830: LD_ADDR_VAR 0 7
49834: PUSH
49835: LD_VAR 0 4
49839: PUSH
49840: FOR_IN
49841: IFFALSE 49874
// result := Replace ( result , result + 1 , j ) ;
49843: LD_ADDR_VAR 0 2
49847: PUSH
49848: LD_VAR 0 2
49852: PPUSH
49853: LD_VAR 0 2
49857: PUSH
49858: LD_INT 1
49860: PLUS
49861: PPUSH
49862: LD_VAR 0 7
49866: PPUSH
49867: CALL_OW 1
49871: ST_TO_ADDR
49872: GO 49840
49874: POP
49875: POP
// end ;
49876: GO 49806
49878: POP
49879: POP
// if not result then
49880: LD_VAR 0 2
49884: NOT
49885: IFFALSE 49889
// exit ;
49887: GO 50037
// mech := result [ 1 ] ;
49889: LD_ADDR_VAR 0 5
49893: PUSH
49894: LD_VAR 0 2
49898: PUSH
49899: LD_INT 1
49901: ARRAY
49902: ST_TO_ADDR
// if result > 1 then
49903: LD_VAR 0 2
49907: PUSH
49908: LD_INT 1
49910: GREATER
49911: IFFALSE 50023
// begin for i = 2 to result do
49913: LD_ADDR_VAR 0 3
49917: PUSH
49918: DOUBLE
49919: LD_INT 2
49921: DEC
49922: ST_TO_ADDR
49923: LD_VAR 0 2
49927: PUSH
49928: FOR_TO
49929: IFFALSE 50021
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49931: LD_ADDR_VAR 0 4
49935: PUSH
49936: LD_VAR 0 2
49940: PUSH
49941: LD_VAR 0 3
49945: ARRAY
49946: PPUSH
49947: LD_INT 3
49949: PPUSH
49950: CALL_OW 259
49954: PUSH
49955: LD_VAR 0 2
49959: PUSH
49960: LD_VAR 0 3
49964: ARRAY
49965: PPUSH
49966: CALL_OW 432
49970: MINUS
49971: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49972: LD_VAR 0 4
49976: PUSH
49977: LD_VAR 0 5
49981: PPUSH
49982: LD_INT 3
49984: PPUSH
49985: CALL_OW 259
49989: PUSH
49990: LD_VAR 0 5
49994: PPUSH
49995: CALL_OW 432
49999: MINUS
50000: GREATEREQUAL
50001: IFFALSE 50019
// mech := result [ i ] ;
50003: LD_ADDR_VAR 0 5
50007: PUSH
50008: LD_VAR 0 2
50012: PUSH
50013: LD_VAR 0 3
50017: ARRAY
50018: ST_TO_ADDR
// end ;
50019: GO 49928
50021: POP
50022: POP
// end ; ComLinkTo ( vehicle , mech ) ;
50023: LD_VAR 0 1
50027: PPUSH
50028: LD_VAR 0 5
50032: PPUSH
50033: CALL_OW 135
// end ;
50037: LD_VAR 0 2
50041: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
50042: LD_INT 0
50044: PPUSH
50045: PPUSH
50046: PPUSH
50047: PPUSH
50048: PPUSH
50049: PPUSH
50050: PPUSH
50051: PPUSH
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
// result := [ ] ;
50057: LD_ADDR_VAR 0 7
50061: PUSH
50062: EMPTY
50063: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
50064: LD_VAR 0 1
50068: PPUSH
50069: CALL_OW 266
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 1
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: IN
50084: NOT
50085: IFFALSE 50089
// exit ;
50087: GO 51723
// if name then
50089: LD_VAR 0 3
50093: IFFALSE 50109
// SetBName ( base_dep , name ) ;
50095: LD_VAR 0 1
50099: PPUSH
50100: LD_VAR 0 3
50104: PPUSH
50105: CALL_OW 500
// base := GetBase ( base_dep ) ;
50109: LD_ADDR_VAR 0 15
50113: PUSH
50114: LD_VAR 0 1
50118: PPUSH
50119: CALL_OW 274
50123: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
50124: LD_ADDR_VAR 0 16
50128: PUSH
50129: LD_VAR 0 1
50133: PPUSH
50134: CALL_OW 255
50138: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
50139: LD_ADDR_VAR 0 17
50143: PUSH
50144: LD_VAR 0 1
50148: PPUSH
50149: CALL_OW 248
50153: ST_TO_ADDR
// if sources then
50154: LD_VAR 0 5
50158: IFFALSE 50205
// for i = 1 to 3 do
50160: LD_ADDR_VAR 0 8
50164: PUSH
50165: DOUBLE
50166: LD_INT 1
50168: DEC
50169: ST_TO_ADDR
50170: LD_INT 3
50172: PUSH
50173: FOR_TO
50174: IFFALSE 50203
// AddResourceType ( base , i , sources [ i ] ) ;
50176: LD_VAR 0 15
50180: PPUSH
50181: LD_VAR 0 8
50185: PPUSH
50186: LD_VAR 0 5
50190: PUSH
50191: LD_VAR 0 8
50195: ARRAY
50196: PPUSH
50197: CALL_OW 276
50201: GO 50173
50203: POP
50204: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
50205: LD_ADDR_VAR 0 18
50209: PUSH
50210: LD_VAR 0 15
50214: PPUSH
50215: LD_VAR 0 2
50219: PPUSH
50220: LD_INT 1
50222: PPUSH
50223: CALL 49466 0 3
50227: ST_TO_ADDR
// InitHc ;
50228: CALL_OW 19
// InitUc ;
50232: CALL_OW 18
// uc_side := side ;
50236: LD_ADDR_OWVAR 20
50240: PUSH
50241: LD_VAR 0 16
50245: ST_TO_ADDR
// uc_nation := nation ;
50246: LD_ADDR_OWVAR 21
50250: PUSH
50251: LD_VAR 0 17
50255: ST_TO_ADDR
// if buildings then
50256: LD_VAR 0 18
50260: IFFALSE 51582
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
50262: LD_ADDR_VAR 0 19
50266: PUSH
50267: LD_VAR 0 18
50271: PPUSH
50272: LD_INT 2
50274: PUSH
50275: LD_INT 30
50277: PUSH
50278: LD_INT 29
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 30
50287: PUSH
50288: LD_INT 30
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: LIST
50299: PPUSH
50300: CALL_OW 72
50304: ST_TO_ADDR
// if tmp then
50305: LD_VAR 0 19
50309: IFFALSE 50357
// for i in tmp do
50311: LD_ADDR_VAR 0 8
50315: PUSH
50316: LD_VAR 0 19
50320: PUSH
50321: FOR_IN
50322: IFFALSE 50355
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
50324: LD_VAR 0 8
50328: PPUSH
50329: CALL_OW 250
50333: PPUSH
50334: LD_VAR 0 8
50338: PPUSH
50339: CALL_OW 251
50343: PPUSH
50344: LD_VAR 0 16
50348: PPUSH
50349: CALL_OW 441
50353: GO 50321
50355: POP
50356: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
50357: LD_VAR 0 18
50361: PPUSH
50362: LD_INT 2
50364: PUSH
50365: LD_INT 30
50367: PUSH
50368: LD_INT 32
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 30
50377: PUSH
50378: LD_INT 33
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: LIST
50389: PPUSH
50390: CALL_OW 72
50394: IFFALSE 50482
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
50396: LD_ADDR_VAR 0 8
50400: PUSH
50401: LD_VAR 0 18
50405: PPUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 30
50411: PUSH
50412: LD_INT 32
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 30
50421: PUSH
50422: LD_INT 33
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: LIST
50433: PPUSH
50434: CALL_OW 72
50438: PUSH
50439: FOR_IN
50440: IFFALSE 50480
// begin if not GetBWeapon ( i ) then
50442: LD_VAR 0 8
50446: PPUSH
50447: CALL_OW 269
50451: NOT
50452: IFFALSE 50478
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
50454: LD_VAR 0 8
50458: PPUSH
50459: LD_VAR 0 8
50463: PPUSH
50464: LD_VAR 0 2
50468: PPUSH
50469: CALL 51728 0 2
50473: PPUSH
50474: CALL_OW 431
// end ;
50478: GO 50439
50480: POP
50481: POP
// end ; for i = 1 to personel do
50482: LD_ADDR_VAR 0 8
50486: PUSH
50487: DOUBLE
50488: LD_INT 1
50490: DEC
50491: ST_TO_ADDR
50492: LD_VAR 0 6
50496: PUSH
50497: FOR_TO
50498: IFFALSE 51562
// begin if i > 4 then
50500: LD_VAR 0 8
50504: PUSH
50505: LD_INT 4
50507: GREATER
50508: IFFALSE 50512
// break ;
50510: GO 51562
// case i of 1 :
50512: LD_VAR 0 8
50516: PUSH
50517: LD_INT 1
50519: DOUBLE
50520: EQUAL
50521: IFTRUE 50525
50523: GO 50605
50525: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
50526: LD_ADDR_VAR 0 12
50530: PUSH
50531: LD_VAR 0 18
50535: PPUSH
50536: LD_INT 22
50538: PUSH
50539: LD_VAR 0 16
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 58
50550: PUSH
50551: EMPTY
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 30
50559: PUSH
50560: LD_INT 32
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 30
50569: PUSH
50570: LD_INT 4
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 30
50579: PUSH
50580: LD_INT 5
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: LIST
50597: PPUSH
50598: CALL_OW 72
50602: ST_TO_ADDR
50603: GO 50827
50605: LD_INT 2
50607: DOUBLE
50608: EQUAL
50609: IFTRUE 50613
50611: GO 50675
50613: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50614: LD_ADDR_VAR 0 12
50618: PUSH
50619: LD_VAR 0 18
50623: PPUSH
50624: LD_INT 22
50626: PUSH
50627: LD_VAR 0 16
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: LD_INT 30
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 30
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PPUSH
50668: CALL_OW 72
50672: ST_TO_ADDR
50673: GO 50827
50675: LD_INT 3
50677: DOUBLE
50678: EQUAL
50679: IFTRUE 50683
50681: GO 50745
50683: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50684: LD_ADDR_VAR 0 12
50688: PUSH
50689: LD_VAR 0 18
50693: PPUSH
50694: LD_INT 22
50696: PUSH
50697: LD_VAR 0 16
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: LD_INT 30
50711: PUSH
50712: LD_INT 2
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 30
50721: PUSH
50722: LD_INT 3
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: LIST
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PPUSH
50738: CALL_OW 72
50742: ST_TO_ADDR
50743: GO 50827
50745: LD_INT 4
50747: DOUBLE
50748: EQUAL
50749: IFTRUE 50753
50751: GO 50826
50753: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50754: LD_ADDR_VAR 0 12
50758: PUSH
50759: LD_VAR 0 18
50763: PPUSH
50764: LD_INT 22
50766: PUSH
50767: LD_VAR 0 16
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: PUSH
50779: LD_INT 30
50781: PUSH
50782: LD_INT 6
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 30
50791: PUSH
50792: LD_INT 7
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 30
50801: PUSH
50802: LD_INT 8
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PPUSH
50819: CALL_OW 72
50823: ST_TO_ADDR
50824: GO 50827
50826: POP
// if i = 1 then
50827: LD_VAR 0 8
50831: PUSH
50832: LD_INT 1
50834: EQUAL
50835: IFFALSE 50946
// begin tmp := [ ] ;
50837: LD_ADDR_VAR 0 19
50841: PUSH
50842: EMPTY
50843: ST_TO_ADDR
// for j in f do
50844: LD_ADDR_VAR 0 9
50848: PUSH
50849: LD_VAR 0 12
50853: PUSH
50854: FOR_IN
50855: IFFALSE 50928
// if GetBType ( j ) = b_bunker then
50857: LD_VAR 0 9
50861: PPUSH
50862: CALL_OW 266
50866: PUSH
50867: LD_INT 32
50869: EQUAL
50870: IFFALSE 50897
// tmp := Insert ( tmp , 1 , j ) else
50872: LD_ADDR_VAR 0 19
50876: PUSH
50877: LD_VAR 0 19
50881: PPUSH
50882: LD_INT 1
50884: PPUSH
50885: LD_VAR 0 9
50889: PPUSH
50890: CALL_OW 2
50894: ST_TO_ADDR
50895: GO 50926
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50897: LD_ADDR_VAR 0 19
50901: PUSH
50902: LD_VAR 0 19
50906: PPUSH
50907: LD_VAR 0 19
50911: PUSH
50912: LD_INT 1
50914: PLUS
50915: PPUSH
50916: LD_VAR 0 9
50920: PPUSH
50921: CALL_OW 2
50925: ST_TO_ADDR
50926: GO 50854
50928: POP
50929: POP
// if tmp then
50930: LD_VAR 0 19
50934: IFFALSE 50946
// f := tmp ;
50936: LD_ADDR_VAR 0 12
50940: PUSH
50941: LD_VAR 0 19
50945: ST_TO_ADDR
// end ; x := personel [ i ] ;
50946: LD_ADDR_VAR 0 13
50950: PUSH
50951: LD_VAR 0 6
50955: PUSH
50956: LD_VAR 0 8
50960: ARRAY
50961: ST_TO_ADDR
// if x = - 1 then
50962: LD_VAR 0 13
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: EQUAL
50971: IFFALSE 51180
// begin for j in f do
50973: LD_ADDR_VAR 0 9
50977: PUSH
50978: LD_VAR 0 12
50982: PUSH
50983: FOR_IN
50984: IFFALSE 51176
// repeat InitHc ;
50986: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50990: LD_VAR 0 9
50994: PPUSH
50995: CALL_OW 266
50999: PUSH
51000: LD_INT 5
51002: EQUAL
51003: IFFALSE 51073
// begin if UnitsInside ( j ) < 3 then
51005: LD_VAR 0 9
51009: PPUSH
51010: CALL_OW 313
51014: PUSH
51015: LD_INT 3
51017: LESS
51018: IFFALSE 51054
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51020: LD_INT 0
51022: PPUSH
51023: LD_INT 5
51025: PUSH
51026: LD_INT 8
51028: PUSH
51029: LD_INT 9
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: LIST
51036: PUSH
51037: LD_VAR 0 17
51041: ARRAY
51042: PPUSH
51043: LD_VAR 0 4
51047: PPUSH
51048: CALL_OW 380
51052: GO 51071
// PrepareHuman ( false , i , skill ) ;
51054: LD_INT 0
51056: PPUSH
51057: LD_VAR 0 8
51061: PPUSH
51062: LD_VAR 0 4
51066: PPUSH
51067: CALL_OW 380
// end else
51071: GO 51090
// PrepareHuman ( false , i , skill ) ;
51073: LD_INT 0
51075: PPUSH
51076: LD_VAR 0 8
51080: PPUSH
51081: LD_VAR 0 4
51085: PPUSH
51086: CALL_OW 380
// un := CreateHuman ;
51090: LD_ADDR_VAR 0 14
51094: PUSH
51095: CALL_OW 44
51099: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51100: LD_ADDR_VAR 0 7
51104: PUSH
51105: LD_VAR 0 7
51109: PPUSH
51110: LD_INT 1
51112: PPUSH
51113: LD_VAR 0 14
51117: PPUSH
51118: CALL_OW 2
51122: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
51123: LD_VAR 0 14
51127: PPUSH
51128: LD_VAR 0 9
51132: PPUSH
51133: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
51137: LD_VAR 0 9
51141: PPUSH
51142: CALL_OW 313
51146: PUSH
51147: LD_INT 6
51149: EQUAL
51150: PUSH
51151: LD_VAR 0 9
51155: PPUSH
51156: CALL_OW 266
51160: PUSH
51161: LD_INT 32
51163: PUSH
51164: LD_INT 31
51166: PUSH
51167: EMPTY
51168: LIST
51169: LIST
51170: IN
51171: OR
51172: IFFALSE 50986
51174: GO 50983
51176: POP
51177: POP
// end else
51178: GO 51560
// for j = 1 to x do
51180: LD_ADDR_VAR 0 9
51184: PUSH
51185: DOUBLE
51186: LD_INT 1
51188: DEC
51189: ST_TO_ADDR
51190: LD_VAR 0 13
51194: PUSH
51195: FOR_TO
51196: IFFALSE 51558
// begin InitHc ;
51198: CALL_OW 19
// if not f then
51202: LD_VAR 0 12
51206: NOT
51207: IFFALSE 51296
// begin PrepareHuman ( false , i , skill ) ;
51209: LD_INT 0
51211: PPUSH
51212: LD_VAR 0 8
51216: PPUSH
51217: LD_VAR 0 4
51221: PPUSH
51222: CALL_OW 380
// un := CreateHuman ;
51226: LD_ADDR_VAR 0 14
51230: PUSH
51231: CALL_OW 44
51235: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51236: LD_ADDR_VAR 0 7
51240: PUSH
51241: LD_VAR 0 7
51245: PPUSH
51246: LD_INT 1
51248: PPUSH
51249: LD_VAR 0 14
51253: PPUSH
51254: CALL_OW 2
51258: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51259: LD_VAR 0 14
51263: PPUSH
51264: LD_VAR 0 1
51268: PPUSH
51269: CALL_OW 250
51273: PPUSH
51274: LD_VAR 0 1
51278: PPUSH
51279: CALL_OW 251
51283: PPUSH
51284: LD_INT 10
51286: PPUSH
51287: LD_INT 0
51289: PPUSH
51290: CALL_OW 50
// continue ;
51294: GO 51195
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
51296: LD_VAR 0 12
51300: PUSH
51301: LD_INT 1
51303: ARRAY
51304: PPUSH
51305: CALL_OW 313
51309: PUSH
51310: LD_VAR 0 12
51314: PUSH
51315: LD_INT 1
51317: ARRAY
51318: PPUSH
51319: CALL_OW 266
51323: PUSH
51324: LD_INT 32
51326: PUSH
51327: LD_INT 31
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: IN
51334: AND
51335: PUSH
51336: LD_VAR 0 12
51340: PUSH
51341: LD_INT 1
51343: ARRAY
51344: PPUSH
51345: CALL_OW 313
51349: PUSH
51350: LD_INT 6
51352: EQUAL
51353: OR
51354: IFFALSE 51374
// f := Delete ( f , 1 ) ;
51356: LD_ADDR_VAR 0 12
51360: PUSH
51361: LD_VAR 0 12
51365: PPUSH
51366: LD_INT 1
51368: PPUSH
51369: CALL_OW 3
51373: ST_TO_ADDR
// if not f then
51374: LD_VAR 0 12
51378: NOT
51379: IFFALSE 51397
// begin x := x + 2 ;
51381: LD_ADDR_VAR 0 13
51385: PUSH
51386: LD_VAR 0 13
51390: PUSH
51391: LD_INT 2
51393: PLUS
51394: ST_TO_ADDR
// continue ;
51395: GO 51195
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
51397: LD_VAR 0 12
51401: PUSH
51402: LD_INT 1
51404: ARRAY
51405: PPUSH
51406: CALL_OW 266
51410: PUSH
51411: LD_INT 5
51413: EQUAL
51414: IFFALSE 51488
// begin if UnitsInside ( f [ 1 ] ) < 3 then
51416: LD_VAR 0 12
51420: PUSH
51421: LD_INT 1
51423: ARRAY
51424: PPUSH
51425: CALL_OW 313
51429: PUSH
51430: LD_INT 3
51432: LESS
51433: IFFALSE 51469
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
51435: LD_INT 0
51437: PPUSH
51438: LD_INT 5
51440: PUSH
51441: LD_INT 8
51443: PUSH
51444: LD_INT 9
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: LIST
51451: PUSH
51452: LD_VAR 0 17
51456: ARRAY
51457: PPUSH
51458: LD_VAR 0 4
51462: PPUSH
51463: CALL_OW 380
51467: GO 51486
// PrepareHuman ( false , i , skill ) ;
51469: LD_INT 0
51471: PPUSH
51472: LD_VAR 0 8
51476: PPUSH
51477: LD_VAR 0 4
51481: PPUSH
51482: CALL_OW 380
// end else
51486: GO 51505
// PrepareHuman ( false , i , skill ) ;
51488: LD_INT 0
51490: PPUSH
51491: LD_VAR 0 8
51495: PPUSH
51496: LD_VAR 0 4
51500: PPUSH
51501: CALL_OW 380
// un := CreateHuman ;
51505: LD_ADDR_VAR 0 14
51509: PUSH
51510: CALL_OW 44
51514: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
51515: LD_ADDR_VAR 0 7
51519: PUSH
51520: LD_VAR 0 7
51524: PPUSH
51525: LD_INT 1
51527: PPUSH
51528: LD_VAR 0 14
51532: PPUSH
51533: CALL_OW 2
51537: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
51538: LD_VAR 0 14
51542: PPUSH
51543: LD_VAR 0 12
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: PPUSH
51552: CALL_OW 52
// end ;
51556: GO 51195
51558: POP
51559: POP
// end ;
51560: GO 50497
51562: POP
51563: POP
// result := result ^ buildings ;
51564: LD_ADDR_VAR 0 7
51568: PUSH
51569: LD_VAR 0 7
51573: PUSH
51574: LD_VAR 0 18
51578: ADD
51579: ST_TO_ADDR
// end else
51580: GO 51723
// begin for i = 1 to personel do
51582: LD_ADDR_VAR 0 8
51586: PUSH
51587: DOUBLE
51588: LD_INT 1
51590: DEC
51591: ST_TO_ADDR
51592: LD_VAR 0 6
51596: PUSH
51597: FOR_TO
51598: IFFALSE 51721
// begin if i > 4 then
51600: LD_VAR 0 8
51604: PUSH
51605: LD_INT 4
51607: GREATER
51608: IFFALSE 51612
// break ;
51610: GO 51721
// x := personel [ i ] ;
51612: LD_ADDR_VAR 0 13
51616: PUSH
51617: LD_VAR 0 6
51621: PUSH
51622: LD_VAR 0 8
51626: ARRAY
51627: ST_TO_ADDR
// if x = - 1 then
51628: LD_VAR 0 13
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: EQUAL
51637: IFFALSE 51641
// continue ;
51639: GO 51597
// PrepareHuman ( false , i , skill ) ;
51641: LD_INT 0
51643: PPUSH
51644: LD_VAR 0 8
51648: PPUSH
51649: LD_VAR 0 4
51653: PPUSH
51654: CALL_OW 380
// un := CreateHuman ;
51658: LD_ADDR_VAR 0 14
51662: PUSH
51663: CALL_OW 44
51667: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51668: LD_VAR 0 14
51672: PPUSH
51673: LD_VAR 0 1
51677: PPUSH
51678: CALL_OW 250
51682: PPUSH
51683: LD_VAR 0 1
51687: PPUSH
51688: CALL_OW 251
51692: PPUSH
51693: LD_INT 10
51695: PPUSH
51696: LD_INT 0
51698: PPUSH
51699: CALL_OW 50
// result := result ^ un ;
51703: LD_ADDR_VAR 0 7
51707: PUSH
51708: LD_VAR 0 7
51712: PUSH
51713: LD_VAR 0 14
51717: ADD
51718: ST_TO_ADDR
// end ;
51719: GO 51597
51721: POP
51722: POP
// end ; end ;
51723: LD_VAR 0 7
51727: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51728: LD_INT 0
51730: PPUSH
51731: PPUSH
51732: PPUSH
51733: PPUSH
51734: PPUSH
51735: PPUSH
51736: PPUSH
51737: PPUSH
51738: PPUSH
51739: PPUSH
51740: PPUSH
51741: PPUSH
51742: PPUSH
51743: PPUSH
51744: PPUSH
51745: PPUSH
// result := false ;
51746: LD_ADDR_VAR 0 3
51750: PUSH
51751: LD_INT 0
51753: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51754: LD_VAR 0 1
51758: NOT
51759: PUSH
51760: LD_VAR 0 1
51764: PPUSH
51765: CALL_OW 266
51769: PUSH
51770: LD_INT 32
51772: PUSH
51773: LD_INT 33
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: IN
51780: NOT
51781: OR
51782: IFFALSE 51786
// exit ;
51784: GO 52895
// nat := GetNation ( tower ) ;
51786: LD_ADDR_VAR 0 12
51790: PUSH
51791: LD_VAR 0 1
51795: PPUSH
51796: CALL_OW 248
51800: ST_TO_ADDR
// side := GetSide ( tower ) ;
51801: LD_ADDR_VAR 0 16
51805: PUSH
51806: LD_VAR 0 1
51810: PPUSH
51811: CALL_OW 255
51815: ST_TO_ADDR
// x := GetX ( tower ) ;
51816: LD_ADDR_VAR 0 10
51820: PUSH
51821: LD_VAR 0 1
51825: PPUSH
51826: CALL_OW 250
51830: ST_TO_ADDR
// y := GetY ( tower ) ;
51831: LD_ADDR_VAR 0 11
51835: PUSH
51836: LD_VAR 0 1
51840: PPUSH
51841: CALL_OW 251
51845: ST_TO_ADDR
// if not x or not y then
51846: LD_VAR 0 10
51850: NOT
51851: PUSH
51852: LD_VAR 0 11
51856: NOT
51857: OR
51858: IFFALSE 51862
// exit ;
51860: GO 52895
// weapon := 0 ;
51862: LD_ADDR_VAR 0 18
51866: PUSH
51867: LD_INT 0
51869: ST_TO_ADDR
// fac_list := [ ] ;
51870: LD_ADDR_VAR 0 17
51874: PUSH
51875: EMPTY
51876: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51877: LD_ADDR_VAR 0 6
51881: PUSH
51882: LD_VAR 0 1
51886: PPUSH
51887: CALL_OW 274
51891: PPUSH
51892: LD_VAR 0 2
51896: PPUSH
51897: LD_INT 0
51899: PPUSH
51900: CALL 49466 0 3
51904: PPUSH
51905: LD_INT 30
51907: PUSH
51908: LD_INT 3
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PPUSH
51915: CALL_OW 72
51919: ST_TO_ADDR
// if not factories then
51920: LD_VAR 0 6
51924: NOT
51925: IFFALSE 51929
// exit ;
51927: GO 52895
// for i in factories do
51929: LD_ADDR_VAR 0 8
51933: PUSH
51934: LD_VAR 0 6
51938: PUSH
51939: FOR_IN
51940: IFFALSE 51965
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51942: LD_ADDR_VAR 0 17
51946: PUSH
51947: LD_VAR 0 17
51951: PUSH
51952: LD_VAR 0 8
51956: PPUSH
51957: CALL_OW 478
51961: UNION
51962: ST_TO_ADDR
51963: GO 51939
51965: POP
51966: POP
// if not fac_list then
51967: LD_VAR 0 17
51971: NOT
51972: IFFALSE 51976
// exit ;
51974: GO 52895
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51976: LD_ADDR_VAR 0 5
51980: PUSH
51981: LD_INT 4
51983: PUSH
51984: LD_INT 5
51986: PUSH
51987: LD_INT 9
51989: PUSH
51990: LD_INT 10
51992: PUSH
51993: LD_INT 6
51995: PUSH
51996: LD_INT 7
51998: PUSH
51999: LD_INT 11
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 27
52013: PUSH
52014: LD_INT 28
52016: PUSH
52017: LD_INT 26
52019: PUSH
52020: LD_INT 30
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 43
52031: PUSH
52032: LD_INT 44
52034: PUSH
52035: LD_INT 46
52037: PUSH
52038: LD_INT 45
52040: PUSH
52041: LD_INT 47
52043: PUSH
52044: LD_INT 49
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: LIST
52059: PUSH
52060: LD_VAR 0 12
52064: ARRAY
52065: ST_TO_ADDR
// list := list isect fac_list ;
52066: LD_ADDR_VAR 0 5
52070: PUSH
52071: LD_VAR 0 5
52075: PUSH
52076: LD_VAR 0 17
52080: ISECT
52081: ST_TO_ADDR
// if not list then
52082: LD_VAR 0 5
52086: NOT
52087: IFFALSE 52091
// exit ;
52089: GO 52895
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
52091: LD_VAR 0 12
52095: PUSH
52096: LD_INT 3
52098: EQUAL
52099: PUSH
52100: LD_INT 49
52102: PUSH
52103: LD_VAR 0 5
52107: IN
52108: AND
52109: PUSH
52110: LD_INT 31
52112: PPUSH
52113: LD_VAR 0 16
52117: PPUSH
52118: CALL_OW 321
52122: PUSH
52123: LD_INT 2
52125: EQUAL
52126: AND
52127: IFFALSE 52187
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
52129: LD_INT 22
52131: PUSH
52132: LD_VAR 0 16
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 35
52143: PUSH
52144: LD_INT 49
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 91
52153: PUSH
52154: LD_VAR 0 1
52158: PUSH
52159: LD_INT 10
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: LIST
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: LIST
52171: PPUSH
52172: CALL_OW 69
52176: NOT
52177: IFFALSE 52187
// weapon := ru_time_lapser ;
52179: LD_ADDR_VAR 0 18
52183: PUSH
52184: LD_INT 49
52186: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
52187: LD_VAR 0 12
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: IN
52202: PUSH
52203: LD_INT 11
52205: PUSH
52206: LD_VAR 0 5
52210: IN
52211: PUSH
52212: LD_INT 30
52214: PUSH
52215: LD_VAR 0 5
52219: IN
52220: OR
52221: AND
52222: PUSH
52223: LD_INT 6
52225: PPUSH
52226: LD_VAR 0 16
52230: PPUSH
52231: CALL_OW 321
52235: PUSH
52236: LD_INT 2
52238: EQUAL
52239: AND
52240: IFFALSE 52405
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
52242: LD_INT 22
52244: PUSH
52245: LD_VAR 0 16
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 2
52256: PUSH
52257: LD_INT 35
52259: PUSH
52260: LD_INT 11
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 35
52269: PUSH
52270: LD_INT 30
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 91
52284: PUSH
52285: LD_VAR 0 1
52289: PUSH
52290: LD_INT 18
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: LIST
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: LIST
52302: PPUSH
52303: CALL_OW 69
52307: NOT
52308: PUSH
52309: LD_INT 22
52311: PUSH
52312: LD_VAR 0 16
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: PUSH
52324: LD_INT 30
52326: PUSH
52327: LD_INT 32
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 30
52336: PUSH
52337: LD_INT 33
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 91
52351: PUSH
52352: LD_VAR 0 1
52356: PUSH
52357: LD_INT 12
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: PUSH
52370: EMPTY
52371: LIST
52372: PPUSH
52373: CALL_OW 69
52377: PUSH
52378: LD_INT 2
52380: GREATER
52381: AND
52382: IFFALSE 52405
// weapon := [ us_radar , ar_radar ] [ nat ] ;
52384: LD_ADDR_VAR 0 18
52388: PUSH
52389: LD_INT 11
52391: PUSH
52392: LD_INT 30
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_VAR 0 12
52403: ARRAY
52404: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
52405: LD_VAR 0 18
52409: NOT
52410: PUSH
52411: LD_INT 40
52413: PPUSH
52414: LD_VAR 0 16
52418: PPUSH
52419: CALL_OW 321
52423: PUSH
52424: LD_INT 2
52426: EQUAL
52427: AND
52428: PUSH
52429: LD_INT 7
52431: PUSH
52432: LD_VAR 0 5
52436: IN
52437: PUSH
52438: LD_INT 28
52440: PUSH
52441: LD_VAR 0 5
52445: IN
52446: OR
52447: PUSH
52448: LD_INT 45
52450: PUSH
52451: LD_VAR 0 5
52455: IN
52456: OR
52457: AND
52458: IFFALSE 52712
// begin hex := GetHexInfo ( x , y ) ;
52460: LD_ADDR_VAR 0 4
52464: PUSH
52465: LD_VAR 0 10
52469: PPUSH
52470: LD_VAR 0 11
52474: PPUSH
52475: CALL_OW 546
52479: ST_TO_ADDR
// if hex [ 1 ] then
52480: LD_VAR 0 4
52484: PUSH
52485: LD_INT 1
52487: ARRAY
52488: IFFALSE 52492
// exit ;
52490: GO 52895
// height := hex [ 2 ] ;
52492: LD_ADDR_VAR 0 15
52496: PUSH
52497: LD_VAR 0 4
52501: PUSH
52502: LD_INT 2
52504: ARRAY
52505: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
52506: LD_ADDR_VAR 0 14
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: LD_INT 2
52516: PUSH
52517: LD_INT 3
52519: PUSH
52520: LD_INT 5
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: ST_TO_ADDR
// for i in tmp do
52529: LD_ADDR_VAR 0 8
52533: PUSH
52534: LD_VAR 0 14
52538: PUSH
52539: FOR_IN
52540: IFFALSE 52710
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
52542: LD_ADDR_VAR 0 9
52546: PUSH
52547: LD_VAR 0 10
52551: PPUSH
52552: LD_VAR 0 8
52556: PPUSH
52557: LD_INT 5
52559: PPUSH
52560: CALL_OW 272
52564: PUSH
52565: LD_VAR 0 11
52569: PPUSH
52570: LD_VAR 0 8
52574: PPUSH
52575: LD_INT 5
52577: PPUSH
52578: CALL_OW 273
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52587: LD_VAR 0 9
52591: PUSH
52592: LD_INT 1
52594: ARRAY
52595: PPUSH
52596: LD_VAR 0 9
52600: PUSH
52601: LD_INT 2
52603: ARRAY
52604: PPUSH
52605: CALL_OW 488
52609: IFFALSE 52708
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52611: LD_ADDR_VAR 0 4
52615: PUSH
52616: LD_VAR 0 9
52620: PUSH
52621: LD_INT 1
52623: ARRAY
52624: PPUSH
52625: LD_VAR 0 9
52629: PUSH
52630: LD_INT 2
52632: ARRAY
52633: PPUSH
52634: CALL_OW 546
52638: ST_TO_ADDR
// if hex [ 1 ] then
52639: LD_VAR 0 4
52643: PUSH
52644: LD_INT 1
52646: ARRAY
52647: IFFALSE 52651
// continue ;
52649: GO 52539
// h := hex [ 2 ] ;
52651: LD_ADDR_VAR 0 13
52655: PUSH
52656: LD_VAR 0 4
52660: PUSH
52661: LD_INT 2
52663: ARRAY
52664: ST_TO_ADDR
// if h + 7 < height then
52665: LD_VAR 0 13
52669: PUSH
52670: LD_INT 7
52672: PLUS
52673: PUSH
52674: LD_VAR 0 15
52678: LESS
52679: IFFALSE 52708
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52681: LD_ADDR_VAR 0 18
52685: PUSH
52686: LD_INT 7
52688: PUSH
52689: LD_INT 28
52691: PUSH
52692: LD_INT 45
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: LIST
52699: PUSH
52700: LD_VAR 0 12
52704: ARRAY
52705: ST_TO_ADDR
// break ;
52706: GO 52710
// end ; end ; end ;
52708: GO 52539
52710: POP
52711: POP
// end ; if not weapon then
52712: LD_VAR 0 18
52716: NOT
52717: IFFALSE 52777
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52719: LD_ADDR_VAR 0 5
52723: PUSH
52724: LD_VAR 0 5
52728: PUSH
52729: LD_INT 11
52731: PUSH
52732: LD_INT 30
52734: PUSH
52735: LD_INT 49
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: LIST
52742: DIFF
52743: ST_TO_ADDR
// if not list then
52744: LD_VAR 0 5
52748: NOT
52749: IFFALSE 52753
// exit ;
52751: GO 52895
// weapon := list [ rand ( 1 , list ) ] ;
52753: LD_ADDR_VAR 0 18
52757: PUSH
52758: LD_VAR 0 5
52762: PUSH
52763: LD_INT 1
52765: PPUSH
52766: LD_VAR 0 5
52770: PPUSH
52771: CALL_OW 12
52775: ARRAY
52776: ST_TO_ADDR
// end ; if weapon then
52777: LD_VAR 0 18
52781: IFFALSE 52895
// begin tmp := CostOfWeapon ( weapon ) ;
52783: LD_ADDR_VAR 0 14
52787: PUSH
52788: LD_VAR 0 18
52792: PPUSH
52793: CALL_OW 451
52797: ST_TO_ADDR
// j := GetBase ( tower ) ;
52798: LD_ADDR_VAR 0 9
52802: PUSH
52803: LD_VAR 0 1
52807: PPUSH
52808: CALL_OW 274
52812: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52813: LD_VAR 0 9
52817: PPUSH
52818: LD_INT 1
52820: PPUSH
52821: CALL_OW 275
52825: PUSH
52826: LD_VAR 0 14
52830: PUSH
52831: LD_INT 1
52833: ARRAY
52834: GREATEREQUAL
52835: PUSH
52836: LD_VAR 0 9
52840: PPUSH
52841: LD_INT 2
52843: PPUSH
52844: CALL_OW 275
52848: PUSH
52849: LD_VAR 0 14
52853: PUSH
52854: LD_INT 2
52856: ARRAY
52857: GREATEREQUAL
52858: AND
52859: PUSH
52860: LD_VAR 0 9
52864: PPUSH
52865: LD_INT 3
52867: PPUSH
52868: CALL_OW 275
52872: PUSH
52873: LD_VAR 0 14
52877: PUSH
52878: LD_INT 3
52880: ARRAY
52881: GREATEREQUAL
52882: AND
52883: IFFALSE 52895
// result := weapon ;
52885: LD_ADDR_VAR 0 3
52889: PUSH
52890: LD_VAR 0 18
52894: ST_TO_ADDR
// end ; end ;
52895: LD_VAR 0 3
52899: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52900: LD_INT 0
52902: PPUSH
52903: PPUSH
// result := true ;
52904: LD_ADDR_VAR 0 3
52908: PUSH
52909: LD_INT 1
52911: ST_TO_ADDR
// if array1 = array2 then
52912: LD_VAR 0 1
52916: PUSH
52917: LD_VAR 0 2
52921: EQUAL
52922: IFFALSE 52982
// begin for i = 1 to array1 do
52924: LD_ADDR_VAR 0 4
52928: PUSH
52929: DOUBLE
52930: LD_INT 1
52932: DEC
52933: ST_TO_ADDR
52934: LD_VAR 0 1
52938: PUSH
52939: FOR_TO
52940: IFFALSE 52978
// if array1 [ i ] <> array2 [ i ] then
52942: LD_VAR 0 1
52946: PUSH
52947: LD_VAR 0 4
52951: ARRAY
52952: PUSH
52953: LD_VAR 0 2
52957: PUSH
52958: LD_VAR 0 4
52962: ARRAY
52963: NONEQUAL
52964: IFFALSE 52976
// begin result := false ;
52966: LD_ADDR_VAR 0 3
52970: PUSH
52971: LD_INT 0
52973: ST_TO_ADDR
// break ;
52974: GO 52978
// end ;
52976: GO 52939
52978: POP
52979: POP
// end else
52980: GO 52990
// result := false ;
52982: LD_ADDR_VAR 0 3
52986: PUSH
52987: LD_INT 0
52989: ST_TO_ADDR
// end ;
52990: LD_VAR 0 3
52994: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52995: LD_INT 0
52997: PPUSH
52998: PPUSH
// if not array1 or not array2 then
52999: LD_VAR 0 1
53003: NOT
53004: PUSH
53005: LD_VAR 0 2
53009: NOT
53010: OR
53011: IFFALSE 53015
// exit ;
53013: GO 53079
// result := true ;
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_INT 1
53022: ST_TO_ADDR
// for i = 1 to array1 do
53023: LD_ADDR_VAR 0 4
53027: PUSH
53028: DOUBLE
53029: LD_INT 1
53031: DEC
53032: ST_TO_ADDR
53033: LD_VAR 0 1
53037: PUSH
53038: FOR_TO
53039: IFFALSE 53077
// if array1 [ i ] <> array2 [ i ] then
53041: LD_VAR 0 1
53045: PUSH
53046: LD_VAR 0 4
53050: ARRAY
53051: PUSH
53052: LD_VAR 0 2
53056: PUSH
53057: LD_VAR 0 4
53061: ARRAY
53062: NONEQUAL
53063: IFFALSE 53075
// begin result := false ;
53065: LD_ADDR_VAR 0 3
53069: PUSH
53070: LD_INT 0
53072: ST_TO_ADDR
// break ;
53073: GO 53077
// end ;
53075: GO 53038
53077: POP
53078: POP
// end ;
53079: LD_VAR 0 3
53083: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
53084: LD_INT 0
53086: PPUSH
53087: PPUSH
53088: PPUSH
// pom := GetBase ( fac ) ;
53089: LD_ADDR_VAR 0 5
53093: PUSH
53094: LD_VAR 0 1
53098: PPUSH
53099: CALL_OW 274
53103: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
53104: LD_ADDR_VAR 0 4
53108: PUSH
53109: LD_VAR 0 2
53113: PUSH
53114: LD_INT 1
53116: ARRAY
53117: PPUSH
53118: LD_VAR 0 2
53122: PUSH
53123: LD_INT 2
53125: ARRAY
53126: PPUSH
53127: LD_VAR 0 2
53131: PUSH
53132: LD_INT 3
53134: ARRAY
53135: PPUSH
53136: LD_VAR 0 2
53140: PUSH
53141: LD_INT 4
53143: ARRAY
53144: PPUSH
53145: CALL_OW 449
53149: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53150: LD_ADDR_VAR 0 3
53154: PUSH
53155: LD_VAR 0 5
53159: PPUSH
53160: LD_INT 1
53162: PPUSH
53163: CALL_OW 275
53167: PUSH
53168: LD_VAR 0 4
53172: PUSH
53173: LD_INT 1
53175: ARRAY
53176: GREATEREQUAL
53177: PUSH
53178: LD_VAR 0 5
53182: PPUSH
53183: LD_INT 2
53185: PPUSH
53186: CALL_OW 275
53190: PUSH
53191: LD_VAR 0 4
53195: PUSH
53196: LD_INT 2
53198: ARRAY
53199: GREATEREQUAL
53200: AND
53201: PUSH
53202: LD_VAR 0 5
53206: PPUSH
53207: LD_INT 3
53209: PPUSH
53210: CALL_OW 275
53214: PUSH
53215: LD_VAR 0 4
53219: PUSH
53220: LD_INT 3
53222: ARRAY
53223: GREATEREQUAL
53224: AND
53225: ST_TO_ADDR
// end ;
53226: LD_VAR 0 3
53230: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
53231: LD_INT 0
53233: PPUSH
53234: PPUSH
53235: PPUSH
53236: PPUSH
// pom := GetBase ( building ) ;
53237: LD_ADDR_VAR 0 3
53241: PUSH
53242: LD_VAR 0 1
53246: PPUSH
53247: CALL_OW 274
53251: ST_TO_ADDR
// if not pom then
53252: LD_VAR 0 3
53256: NOT
53257: IFFALSE 53261
// exit ;
53259: GO 53431
// btype := GetBType ( building ) ;
53261: LD_ADDR_VAR 0 5
53265: PUSH
53266: LD_VAR 0 1
53270: PPUSH
53271: CALL_OW 266
53275: ST_TO_ADDR
// if btype = b_armoury then
53276: LD_VAR 0 5
53280: PUSH
53281: LD_INT 4
53283: EQUAL
53284: IFFALSE 53294
// btype := b_barracks ;
53286: LD_ADDR_VAR 0 5
53290: PUSH
53291: LD_INT 5
53293: ST_TO_ADDR
// if btype = b_depot then
53294: LD_VAR 0 5
53298: PUSH
53299: LD_INT 0
53301: EQUAL
53302: IFFALSE 53312
// btype := b_warehouse ;
53304: LD_ADDR_VAR 0 5
53308: PUSH
53309: LD_INT 1
53311: ST_TO_ADDR
// if btype = b_workshop then
53312: LD_VAR 0 5
53316: PUSH
53317: LD_INT 2
53319: EQUAL
53320: IFFALSE 53330
// btype := b_factory ;
53322: LD_ADDR_VAR 0 5
53326: PUSH
53327: LD_INT 3
53329: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53330: LD_ADDR_VAR 0 4
53334: PUSH
53335: LD_VAR 0 5
53339: PPUSH
53340: LD_VAR 0 1
53344: PPUSH
53345: CALL_OW 248
53349: PPUSH
53350: CALL_OW 450
53354: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53355: LD_ADDR_VAR 0 2
53359: PUSH
53360: LD_VAR 0 3
53364: PPUSH
53365: LD_INT 1
53367: PPUSH
53368: CALL_OW 275
53372: PUSH
53373: LD_VAR 0 4
53377: PUSH
53378: LD_INT 1
53380: ARRAY
53381: GREATEREQUAL
53382: PUSH
53383: LD_VAR 0 3
53387: PPUSH
53388: LD_INT 2
53390: PPUSH
53391: CALL_OW 275
53395: PUSH
53396: LD_VAR 0 4
53400: PUSH
53401: LD_INT 2
53403: ARRAY
53404: GREATEREQUAL
53405: AND
53406: PUSH
53407: LD_VAR 0 3
53411: PPUSH
53412: LD_INT 3
53414: PPUSH
53415: CALL_OW 275
53419: PUSH
53420: LD_VAR 0 4
53424: PUSH
53425: LD_INT 3
53427: ARRAY
53428: GREATEREQUAL
53429: AND
53430: ST_TO_ADDR
// end ;
53431: LD_VAR 0 2
53435: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
53436: LD_INT 0
53438: PPUSH
53439: PPUSH
53440: PPUSH
// pom := GetBase ( building ) ;
53441: LD_ADDR_VAR 0 4
53445: PUSH
53446: LD_VAR 0 1
53450: PPUSH
53451: CALL_OW 274
53455: ST_TO_ADDR
// if not pom then
53456: LD_VAR 0 4
53460: NOT
53461: IFFALSE 53465
// exit ;
53463: GO 53566
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
53465: LD_ADDR_VAR 0 5
53469: PUSH
53470: LD_VAR 0 2
53474: PPUSH
53475: LD_VAR 0 1
53479: PPUSH
53480: CALL_OW 248
53484: PPUSH
53485: CALL_OW 450
53489: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
53490: LD_ADDR_VAR 0 3
53494: PUSH
53495: LD_VAR 0 4
53499: PPUSH
53500: LD_INT 1
53502: PPUSH
53503: CALL_OW 275
53507: PUSH
53508: LD_VAR 0 5
53512: PUSH
53513: LD_INT 1
53515: ARRAY
53516: GREATEREQUAL
53517: PUSH
53518: LD_VAR 0 4
53522: PPUSH
53523: LD_INT 2
53525: PPUSH
53526: CALL_OW 275
53530: PUSH
53531: LD_VAR 0 5
53535: PUSH
53536: LD_INT 2
53538: ARRAY
53539: GREATEREQUAL
53540: AND
53541: PUSH
53542: LD_VAR 0 4
53546: PPUSH
53547: LD_INT 3
53549: PPUSH
53550: CALL_OW 275
53554: PUSH
53555: LD_VAR 0 5
53559: PUSH
53560: LD_INT 3
53562: ARRAY
53563: GREATEREQUAL
53564: AND
53565: ST_TO_ADDR
// end ;
53566: LD_VAR 0 3
53570: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53571: LD_INT 0
53573: PPUSH
53574: PPUSH
53575: PPUSH
53576: PPUSH
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
// result := false ;
53584: LD_ADDR_VAR 0 8
53588: PUSH
53589: LD_INT 0
53591: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53592: LD_VAR 0 5
53596: NOT
53597: PUSH
53598: LD_VAR 0 1
53602: NOT
53603: OR
53604: PUSH
53605: LD_VAR 0 2
53609: NOT
53610: OR
53611: PUSH
53612: LD_VAR 0 3
53616: NOT
53617: OR
53618: IFFALSE 53622
// exit ;
53620: GO 54436
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53622: LD_ADDR_VAR 0 14
53626: PUSH
53627: LD_VAR 0 1
53631: PPUSH
53632: LD_VAR 0 2
53636: PPUSH
53637: LD_VAR 0 3
53641: PPUSH
53642: LD_VAR 0 4
53646: PPUSH
53647: LD_VAR 0 5
53651: PUSH
53652: LD_INT 1
53654: ARRAY
53655: PPUSH
53656: CALL_OW 248
53660: PPUSH
53661: LD_INT 0
53663: PPUSH
53664: CALL 55673 0 6
53668: ST_TO_ADDR
// if not hexes then
53669: LD_VAR 0 14
53673: NOT
53674: IFFALSE 53678
// exit ;
53676: GO 54436
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53678: LD_ADDR_VAR 0 17
53682: PUSH
53683: LD_VAR 0 5
53687: PPUSH
53688: LD_INT 22
53690: PUSH
53691: LD_VAR 0 13
53695: PPUSH
53696: CALL_OW 255
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 30
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 30
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PPUSH
53737: CALL_OW 72
53741: ST_TO_ADDR
// for i = 1 to hexes do
53742: LD_ADDR_VAR 0 9
53746: PUSH
53747: DOUBLE
53748: LD_INT 1
53750: DEC
53751: ST_TO_ADDR
53752: LD_VAR 0 14
53756: PUSH
53757: FOR_TO
53758: IFFALSE 54434
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53760: LD_ADDR_VAR 0 13
53764: PUSH
53765: LD_VAR 0 14
53769: PUSH
53770: LD_VAR 0 9
53774: ARRAY
53775: PUSH
53776: LD_INT 1
53778: ARRAY
53779: PPUSH
53780: LD_VAR 0 14
53784: PUSH
53785: LD_VAR 0 9
53789: ARRAY
53790: PUSH
53791: LD_INT 2
53793: ARRAY
53794: PPUSH
53795: CALL_OW 428
53799: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53800: LD_VAR 0 14
53804: PUSH
53805: LD_VAR 0 9
53809: ARRAY
53810: PUSH
53811: LD_INT 1
53813: ARRAY
53814: PPUSH
53815: LD_VAR 0 14
53819: PUSH
53820: LD_VAR 0 9
53824: ARRAY
53825: PUSH
53826: LD_INT 2
53828: ARRAY
53829: PPUSH
53830: CALL_OW 351
53834: PUSH
53835: LD_VAR 0 14
53839: PUSH
53840: LD_VAR 0 9
53844: ARRAY
53845: PUSH
53846: LD_INT 1
53848: ARRAY
53849: PPUSH
53850: LD_VAR 0 14
53854: PUSH
53855: LD_VAR 0 9
53859: ARRAY
53860: PUSH
53861: LD_INT 2
53863: ARRAY
53864: PPUSH
53865: CALL_OW 488
53869: NOT
53870: OR
53871: PUSH
53872: LD_VAR 0 13
53876: PPUSH
53877: CALL_OW 247
53881: PUSH
53882: LD_INT 3
53884: EQUAL
53885: OR
53886: IFFALSE 53892
// exit ;
53888: POP
53889: POP
53890: GO 54436
// if not tmp then
53892: LD_VAR 0 13
53896: NOT
53897: IFFALSE 53901
// continue ;
53899: GO 53757
// result := true ;
53901: LD_ADDR_VAR 0 8
53905: PUSH
53906: LD_INT 1
53908: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53909: LD_VAR 0 6
53913: PUSH
53914: LD_VAR 0 13
53918: PPUSH
53919: CALL_OW 247
53923: PUSH
53924: LD_INT 2
53926: EQUAL
53927: AND
53928: PUSH
53929: LD_VAR 0 13
53933: PPUSH
53934: CALL_OW 263
53938: PUSH
53939: LD_INT 1
53941: EQUAL
53942: AND
53943: IFFALSE 54107
// begin if IsDrivenBy ( tmp ) then
53945: LD_VAR 0 13
53949: PPUSH
53950: CALL_OW 311
53954: IFFALSE 53958
// continue ;
53956: GO 53757
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53958: LD_VAR 0 6
53962: PPUSH
53963: LD_INT 3
53965: PUSH
53966: LD_INT 60
53968: PUSH
53969: EMPTY
53970: LIST
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 3
53978: PUSH
53979: LD_INT 55
53981: PUSH
53982: EMPTY
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PPUSH
53993: CALL_OW 72
53997: IFFALSE 54105
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53999: LD_ADDR_VAR 0 18
54003: PUSH
54004: LD_VAR 0 6
54008: PPUSH
54009: LD_INT 3
54011: PUSH
54012: LD_INT 60
54014: PUSH
54015: EMPTY
54016: LIST
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 3
54024: PUSH
54025: LD_INT 55
54027: PUSH
54028: EMPTY
54029: LIST
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PPUSH
54039: CALL_OW 72
54043: PUSH
54044: LD_INT 1
54046: ARRAY
54047: ST_TO_ADDR
// if IsInUnit ( driver ) then
54048: LD_VAR 0 18
54052: PPUSH
54053: CALL_OW 310
54057: IFFALSE 54068
// ComExit ( driver ) ;
54059: LD_VAR 0 18
54063: PPUSH
54064: CALL 78857 0 1
// AddComEnterUnit ( driver , tmp ) ;
54068: LD_VAR 0 18
54072: PPUSH
54073: LD_VAR 0 13
54077: PPUSH
54078: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
54082: LD_VAR 0 18
54086: PPUSH
54087: LD_VAR 0 7
54091: PPUSH
54092: CALL_OW 173
// AddComExitVehicle ( driver ) ;
54096: LD_VAR 0 18
54100: PPUSH
54101: CALL_OW 181
// end ; continue ;
54105: GO 53757
// end ; if not cleaners or not tmp in cleaners then
54107: LD_VAR 0 6
54111: NOT
54112: PUSH
54113: LD_VAR 0 13
54117: PUSH
54118: LD_VAR 0 6
54122: IN
54123: NOT
54124: OR
54125: IFFALSE 54432
// begin if dep then
54127: LD_VAR 0 17
54131: IFFALSE 54267
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
54133: LD_ADDR_VAR 0 16
54137: PUSH
54138: LD_VAR 0 17
54142: PUSH
54143: LD_INT 1
54145: ARRAY
54146: PPUSH
54147: CALL_OW 250
54151: PPUSH
54152: LD_VAR 0 17
54156: PUSH
54157: LD_INT 1
54159: ARRAY
54160: PPUSH
54161: CALL_OW 254
54165: PPUSH
54166: LD_INT 5
54168: PPUSH
54169: CALL_OW 272
54173: PUSH
54174: LD_VAR 0 17
54178: PUSH
54179: LD_INT 1
54181: ARRAY
54182: PPUSH
54183: CALL_OW 251
54187: PPUSH
54188: LD_VAR 0 17
54192: PUSH
54193: LD_INT 1
54195: ARRAY
54196: PPUSH
54197: CALL_OW 254
54201: PPUSH
54202: LD_INT 5
54204: PPUSH
54205: CALL_OW 273
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
54214: LD_VAR 0 16
54218: PUSH
54219: LD_INT 1
54221: ARRAY
54222: PPUSH
54223: LD_VAR 0 16
54227: PUSH
54228: LD_INT 2
54230: ARRAY
54231: PPUSH
54232: CALL_OW 488
54236: IFFALSE 54267
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
54238: LD_VAR 0 13
54242: PPUSH
54243: LD_VAR 0 16
54247: PUSH
54248: LD_INT 1
54250: ARRAY
54251: PPUSH
54252: LD_VAR 0 16
54256: PUSH
54257: LD_INT 2
54259: ARRAY
54260: PPUSH
54261: CALL_OW 111
// continue ;
54265: GO 53757
// end ; end ; r := GetDir ( tmp ) ;
54267: LD_ADDR_VAR 0 15
54271: PUSH
54272: LD_VAR 0 13
54276: PPUSH
54277: CALL_OW 254
54281: ST_TO_ADDR
// if r = 5 then
54282: LD_VAR 0 15
54286: PUSH
54287: LD_INT 5
54289: EQUAL
54290: IFFALSE 54300
// r := 0 ;
54292: LD_ADDR_VAR 0 15
54296: PUSH
54297: LD_INT 0
54299: ST_TO_ADDR
// for j = r to 5 do
54300: LD_ADDR_VAR 0 10
54304: PUSH
54305: DOUBLE
54306: LD_VAR 0 15
54310: DEC
54311: ST_TO_ADDR
54312: LD_INT 5
54314: PUSH
54315: FOR_TO
54316: IFFALSE 54430
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
54318: LD_ADDR_VAR 0 11
54322: PUSH
54323: LD_VAR 0 13
54327: PPUSH
54328: CALL_OW 250
54332: PPUSH
54333: LD_VAR 0 10
54337: PPUSH
54338: LD_INT 2
54340: PPUSH
54341: CALL_OW 272
54345: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
54346: LD_ADDR_VAR 0 12
54350: PUSH
54351: LD_VAR 0 13
54355: PPUSH
54356: CALL_OW 251
54360: PPUSH
54361: LD_VAR 0 10
54365: PPUSH
54366: LD_INT 2
54368: PPUSH
54369: CALL_OW 273
54373: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
54374: LD_VAR 0 11
54378: PPUSH
54379: LD_VAR 0 12
54383: PPUSH
54384: CALL_OW 488
54388: PUSH
54389: LD_VAR 0 11
54393: PPUSH
54394: LD_VAR 0 12
54398: PPUSH
54399: CALL_OW 428
54403: NOT
54404: AND
54405: IFFALSE 54428
// begin ComMoveXY ( tmp , _x , _y ) ;
54407: LD_VAR 0 13
54411: PPUSH
54412: LD_VAR 0 11
54416: PPUSH
54417: LD_VAR 0 12
54421: PPUSH
54422: CALL_OW 111
// break ;
54426: GO 54430
// end ; end ;
54428: GO 54315
54430: POP
54431: POP
// end ; end ;
54432: GO 53757
54434: POP
54435: POP
// end ;
54436: LD_VAR 0 8
54440: RET
// export function BuildingTechInvented ( side , btype ) ; begin
54441: LD_INT 0
54443: PPUSH
// result := true ;
54444: LD_ADDR_VAR 0 3
54448: PUSH
54449: LD_INT 1
54451: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
54452: LD_VAR 0 2
54456: PUSH
54457: LD_INT 24
54459: DOUBLE
54460: EQUAL
54461: IFTRUE 54471
54463: LD_INT 33
54465: DOUBLE
54466: EQUAL
54467: IFTRUE 54471
54469: GO 54496
54471: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
54472: LD_ADDR_VAR 0 3
54476: PUSH
54477: LD_INT 32
54479: PPUSH
54480: LD_VAR 0 1
54484: PPUSH
54485: CALL_OW 321
54489: PUSH
54490: LD_INT 2
54492: EQUAL
54493: ST_TO_ADDR
54494: GO 54816
54496: LD_INT 20
54498: DOUBLE
54499: EQUAL
54500: IFTRUE 54504
54502: GO 54529
54504: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
54505: LD_ADDR_VAR 0 3
54509: PUSH
54510: LD_INT 6
54512: PPUSH
54513: LD_VAR 0 1
54517: PPUSH
54518: CALL_OW 321
54522: PUSH
54523: LD_INT 2
54525: EQUAL
54526: ST_TO_ADDR
54527: GO 54816
54529: LD_INT 22
54531: DOUBLE
54532: EQUAL
54533: IFTRUE 54543
54535: LD_INT 36
54537: DOUBLE
54538: EQUAL
54539: IFTRUE 54543
54541: GO 54568
54543: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
54544: LD_ADDR_VAR 0 3
54548: PUSH
54549: LD_INT 15
54551: PPUSH
54552: LD_VAR 0 1
54556: PPUSH
54557: CALL_OW 321
54561: PUSH
54562: LD_INT 2
54564: EQUAL
54565: ST_TO_ADDR
54566: GO 54816
54568: LD_INT 30
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54576
54574: GO 54601
54576: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54577: LD_ADDR_VAR 0 3
54581: PUSH
54582: LD_INT 20
54584: PPUSH
54585: LD_VAR 0 1
54589: PPUSH
54590: CALL_OW 321
54594: PUSH
54595: LD_INT 2
54597: EQUAL
54598: ST_TO_ADDR
54599: GO 54816
54601: LD_INT 28
54603: DOUBLE
54604: EQUAL
54605: IFTRUE 54615
54607: LD_INT 21
54609: DOUBLE
54610: EQUAL
54611: IFTRUE 54615
54613: GO 54640
54615: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54616: LD_ADDR_VAR 0 3
54620: PUSH
54621: LD_INT 21
54623: PPUSH
54624: LD_VAR 0 1
54628: PPUSH
54629: CALL_OW 321
54633: PUSH
54634: LD_INT 2
54636: EQUAL
54637: ST_TO_ADDR
54638: GO 54816
54640: LD_INT 16
54642: DOUBLE
54643: EQUAL
54644: IFTRUE 54648
54646: GO 54675
54648: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54649: LD_ADDR_VAR 0 3
54653: PUSH
54654: LD_EXP 133
54658: PPUSH
54659: LD_VAR 0 1
54663: PPUSH
54664: CALL_OW 321
54668: PUSH
54669: LD_INT 2
54671: EQUAL
54672: ST_TO_ADDR
54673: GO 54816
54675: LD_INT 19
54677: DOUBLE
54678: EQUAL
54679: IFTRUE 54689
54681: LD_INT 23
54683: DOUBLE
54684: EQUAL
54685: IFTRUE 54689
54687: GO 54716
54689: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54690: LD_ADDR_VAR 0 3
54694: PUSH
54695: LD_EXP 132
54699: PPUSH
54700: LD_VAR 0 1
54704: PPUSH
54705: CALL_OW 321
54709: PUSH
54710: LD_INT 2
54712: EQUAL
54713: ST_TO_ADDR
54714: GO 54816
54716: LD_INT 17
54718: DOUBLE
54719: EQUAL
54720: IFTRUE 54724
54722: GO 54749
54724: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54725: LD_ADDR_VAR 0 3
54729: PUSH
54730: LD_INT 39
54732: PPUSH
54733: LD_VAR 0 1
54737: PPUSH
54738: CALL_OW 321
54742: PUSH
54743: LD_INT 2
54745: EQUAL
54746: ST_TO_ADDR
54747: GO 54816
54749: LD_INT 18
54751: DOUBLE
54752: EQUAL
54753: IFTRUE 54757
54755: GO 54782
54757: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54758: LD_ADDR_VAR 0 3
54762: PUSH
54763: LD_INT 40
54765: PPUSH
54766: LD_VAR 0 1
54770: PPUSH
54771: CALL_OW 321
54775: PUSH
54776: LD_INT 2
54778: EQUAL
54779: ST_TO_ADDR
54780: GO 54816
54782: LD_INT 27
54784: DOUBLE
54785: EQUAL
54786: IFTRUE 54790
54788: GO 54815
54790: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54791: LD_ADDR_VAR 0 3
54795: PUSH
54796: LD_INT 35
54798: PPUSH
54799: LD_VAR 0 1
54803: PPUSH
54804: CALL_OW 321
54808: PUSH
54809: LD_INT 2
54811: EQUAL
54812: ST_TO_ADDR
54813: GO 54816
54815: POP
// end ;
54816: LD_VAR 0 3
54820: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54821: LD_INT 0
54823: PPUSH
54824: PPUSH
54825: PPUSH
54826: PPUSH
54827: PPUSH
54828: PPUSH
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
54833: PPUSH
// result := false ;
54834: LD_ADDR_VAR 0 6
54838: PUSH
54839: LD_INT 0
54841: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54842: LD_VAR 0 1
54846: NOT
54847: PUSH
54848: LD_VAR 0 1
54852: PPUSH
54853: CALL_OW 266
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: IN
54868: NOT
54869: OR
54870: PUSH
54871: LD_VAR 0 2
54875: NOT
54876: OR
54877: PUSH
54878: LD_VAR 0 5
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: PUSH
54889: LD_INT 2
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: LD_INT 4
54897: PUSH
54898: LD_INT 5
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: IN
54909: NOT
54910: OR
54911: PUSH
54912: LD_VAR 0 3
54916: PPUSH
54917: LD_VAR 0 4
54921: PPUSH
54922: CALL_OW 488
54926: NOT
54927: OR
54928: IFFALSE 54932
// exit ;
54930: GO 55668
// side := GetSide ( depot ) ;
54932: LD_ADDR_VAR 0 9
54936: PUSH
54937: LD_VAR 0 1
54941: PPUSH
54942: CALL_OW 255
54946: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54947: LD_VAR 0 9
54951: PPUSH
54952: LD_VAR 0 2
54956: PPUSH
54957: CALL 54441 0 2
54961: NOT
54962: IFFALSE 54966
// exit ;
54964: GO 55668
// pom := GetBase ( depot ) ;
54966: LD_ADDR_VAR 0 10
54970: PUSH
54971: LD_VAR 0 1
54975: PPUSH
54976: CALL_OW 274
54980: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54981: LD_ADDR_VAR 0 11
54985: PUSH
54986: LD_VAR 0 2
54990: PPUSH
54991: LD_VAR 0 1
54995: PPUSH
54996: CALL_OW 248
55000: PPUSH
55001: CALL_OW 450
55005: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
55006: LD_VAR 0 10
55010: PPUSH
55011: LD_INT 1
55013: PPUSH
55014: CALL_OW 275
55018: PUSH
55019: LD_VAR 0 11
55023: PUSH
55024: LD_INT 1
55026: ARRAY
55027: GREATEREQUAL
55028: PUSH
55029: LD_VAR 0 10
55033: PPUSH
55034: LD_INT 2
55036: PPUSH
55037: CALL_OW 275
55041: PUSH
55042: LD_VAR 0 11
55046: PUSH
55047: LD_INT 2
55049: ARRAY
55050: GREATEREQUAL
55051: AND
55052: PUSH
55053: LD_VAR 0 10
55057: PPUSH
55058: LD_INT 3
55060: PPUSH
55061: CALL_OW 275
55065: PUSH
55066: LD_VAR 0 11
55070: PUSH
55071: LD_INT 3
55073: ARRAY
55074: GREATEREQUAL
55075: AND
55076: NOT
55077: IFFALSE 55081
// exit ;
55079: GO 55668
// if GetBType ( depot ) = b_depot then
55081: LD_VAR 0 1
55085: PPUSH
55086: CALL_OW 266
55090: PUSH
55091: LD_INT 0
55093: EQUAL
55094: IFFALSE 55106
// dist := 28 else
55096: LD_ADDR_VAR 0 14
55100: PUSH
55101: LD_INT 28
55103: ST_TO_ADDR
55104: GO 55114
// dist := 36 ;
55106: LD_ADDR_VAR 0 14
55110: PUSH
55111: LD_INT 36
55113: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
55114: LD_VAR 0 1
55118: PPUSH
55119: LD_VAR 0 3
55123: PPUSH
55124: LD_VAR 0 4
55128: PPUSH
55129: CALL_OW 297
55133: PUSH
55134: LD_VAR 0 14
55138: GREATER
55139: IFFALSE 55143
// exit ;
55141: GO 55668
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
55143: LD_ADDR_VAR 0 12
55147: PUSH
55148: LD_VAR 0 2
55152: PPUSH
55153: LD_VAR 0 3
55157: PPUSH
55158: LD_VAR 0 4
55162: PPUSH
55163: LD_VAR 0 5
55167: PPUSH
55168: LD_VAR 0 1
55172: PPUSH
55173: CALL_OW 248
55177: PPUSH
55178: LD_INT 0
55180: PPUSH
55181: CALL 55673 0 6
55185: ST_TO_ADDR
// if not hexes then
55186: LD_VAR 0 12
55190: NOT
55191: IFFALSE 55195
// exit ;
55193: GO 55668
// hex := GetHexInfo ( x , y ) ;
55195: LD_ADDR_VAR 0 15
55199: PUSH
55200: LD_VAR 0 3
55204: PPUSH
55205: LD_VAR 0 4
55209: PPUSH
55210: CALL_OW 546
55214: ST_TO_ADDR
// if hex [ 1 ] then
55215: LD_VAR 0 15
55219: PUSH
55220: LD_INT 1
55222: ARRAY
55223: IFFALSE 55227
// exit ;
55225: GO 55668
// height := hex [ 2 ] ;
55227: LD_ADDR_VAR 0 13
55231: PUSH
55232: LD_VAR 0 15
55236: PUSH
55237: LD_INT 2
55239: ARRAY
55240: ST_TO_ADDR
// for i = 1 to hexes do
55241: LD_ADDR_VAR 0 7
55245: PUSH
55246: DOUBLE
55247: LD_INT 1
55249: DEC
55250: ST_TO_ADDR
55251: LD_VAR 0 12
55255: PUSH
55256: FOR_TO
55257: IFFALSE 55587
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
55259: LD_VAR 0 12
55263: PUSH
55264: LD_VAR 0 7
55268: ARRAY
55269: PUSH
55270: LD_INT 1
55272: ARRAY
55273: PPUSH
55274: LD_VAR 0 12
55278: PUSH
55279: LD_VAR 0 7
55283: ARRAY
55284: PUSH
55285: LD_INT 2
55287: ARRAY
55288: PPUSH
55289: CALL_OW 488
55293: NOT
55294: PUSH
55295: LD_VAR 0 12
55299: PUSH
55300: LD_VAR 0 7
55304: ARRAY
55305: PUSH
55306: LD_INT 1
55308: ARRAY
55309: PPUSH
55310: LD_VAR 0 12
55314: PUSH
55315: LD_VAR 0 7
55319: ARRAY
55320: PUSH
55321: LD_INT 2
55323: ARRAY
55324: PPUSH
55325: CALL_OW 428
55329: PUSH
55330: LD_INT 0
55332: GREATER
55333: OR
55334: PUSH
55335: LD_VAR 0 12
55339: PUSH
55340: LD_VAR 0 7
55344: ARRAY
55345: PUSH
55346: LD_INT 1
55348: ARRAY
55349: PPUSH
55350: LD_VAR 0 12
55354: PUSH
55355: LD_VAR 0 7
55359: ARRAY
55360: PUSH
55361: LD_INT 2
55363: ARRAY
55364: PPUSH
55365: CALL_OW 351
55369: OR
55370: IFFALSE 55376
// exit ;
55372: POP
55373: POP
55374: GO 55668
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55376: LD_ADDR_VAR 0 8
55380: PUSH
55381: LD_VAR 0 12
55385: PUSH
55386: LD_VAR 0 7
55390: ARRAY
55391: PUSH
55392: LD_INT 1
55394: ARRAY
55395: PPUSH
55396: LD_VAR 0 12
55400: PUSH
55401: LD_VAR 0 7
55405: ARRAY
55406: PUSH
55407: LD_INT 2
55409: ARRAY
55410: PPUSH
55411: CALL_OW 546
55415: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
55416: LD_VAR 0 8
55420: PUSH
55421: LD_INT 1
55423: ARRAY
55424: PUSH
55425: LD_VAR 0 8
55429: PUSH
55430: LD_INT 2
55432: ARRAY
55433: PUSH
55434: LD_VAR 0 13
55438: PUSH
55439: LD_INT 2
55441: PLUS
55442: GREATER
55443: OR
55444: PUSH
55445: LD_VAR 0 8
55449: PUSH
55450: LD_INT 2
55452: ARRAY
55453: PUSH
55454: LD_VAR 0 13
55458: PUSH
55459: LD_INT 2
55461: MINUS
55462: LESS
55463: OR
55464: PUSH
55465: LD_VAR 0 8
55469: PUSH
55470: LD_INT 3
55472: ARRAY
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 8
55479: PUSH
55480: LD_INT 9
55482: PUSH
55483: LD_INT 10
55485: PUSH
55486: LD_INT 11
55488: PUSH
55489: LD_INT 12
55491: PUSH
55492: LD_INT 13
55494: PUSH
55495: LD_INT 16
55497: PUSH
55498: LD_INT 17
55500: PUSH
55501: LD_INT 18
55503: PUSH
55504: LD_INT 19
55506: PUSH
55507: LD_INT 20
55509: PUSH
55510: LD_INT 21
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: IN
55528: NOT
55529: OR
55530: PUSH
55531: LD_VAR 0 8
55535: PUSH
55536: LD_INT 5
55538: ARRAY
55539: NOT
55540: OR
55541: PUSH
55542: LD_VAR 0 8
55546: PUSH
55547: LD_INT 6
55549: ARRAY
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 7
55559: PUSH
55560: LD_INT 9
55562: PUSH
55563: LD_INT 10
55565: PUSH
55566: LD_INT 11
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: IN
55577: NOT
55578: OR
55579: IFFALSE 55585
// exit ;
55581: POP
55582: POP
55583: GO 55668
// end ;
55585: GO 55256
55587: POP
55588: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55589: LD_VAR 0 9
55593: PPUSH
55594: LD_VAR 0 3
55598: PPUSH
55599: LD_VAR 0 4
55603: PPUSH
55604: LD_INT 20
55606: PPUSH
55607: CALL 47614 0 4
55611: PUSH
55612: LD_INT 4
55614: ARRAY
55615: IFFALSE 55619
// exit ;
55617: GO 55668
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55619: LD_VAR 0 2
55623: PUSH
55624: LD_INT 29
55626: PUSH
55627: LD_INT 30
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: IN
55634: PUSH
55635: LD_VAR 0 3
55639: PPUSH
55640: LD_VAR 0 4
55644: PPUSH
55645: LD_VAR 0 9
55649: PPUSH
55650: CALL_OW 440
55654: NOT
55655: AND
55656: IFFALSE 55660
// exit ;
55658: GO 55668
// result := true ;
55660: LD_ADDR_VAR 0 6
55664: PUSH
55665: LD_INT 1
55667: ST_TO_ADDR
// end ;
55668: LD_VAR 0 6
55672: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55673: LD_INT 0
55675: PPUSH
55676: PPUSH
55677: PPUSH
55678: PPUSH
55679: PPUSH
55680: PPUSH
55681: PPUSH
55682: PPUSH
55683: PPUSH
55684: PPUSH
55685: PPUSH
55686: PPUSH
55687: PPUSH
55688: PPUSH
55689: PPUSH
55690: PPUSH
55691: PPUSH
55692: PPUSH
55693: PPUSH
55694: PPUSH
55695: PPUSH
55696: PPUSH
55697: PPUSH
55698: PPUSH
55699: PPUSH
55700: PPUSH
55701: PPUSH
55702: PPUSH
55703: PPUSH
55704: PPUSH
55705: PPUSH
55706: PPUSH
55707: PPUSH
55708: PPUSH
55709: PPUSH
55710: PPUSH
55711: PPUSH
55712: PPUSH
55713: PPUSH
55714: PPUSH
55715: PPUSH
55716: PPUSH
55717: PPUSH
55718: PPUSH
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
55730: PPUSH
55731: PPUSH
55732: PPUSH
// result = [ ] ;
55733: LD_ADDR_VAR 0 7
55737: PUSH
55738: EMPTY
55739: ST_TO_ADDR
// temp_list = [ ] ;
55740: LD_ADDR_VAR 0 9
55744: PUSH
55745: EMPTY
55746: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55747: LD_VAR 0 4
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: LD_INT 1
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: LD_INT 3
55763: PUSH
55764: LD_INT 4
55766: PUSH
55767: LD_INT 5
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: IN
55778: NOT
55779: PUSH
55780: LD_VAR 0 1
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: IN
55795: PUSH
55796: LD_VAR 0 5
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: LD_INT 2
55806: PUSH
55807: LD_INT 3
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: IN
55815: NOT
55816: AND
55817: OR
55818: IFFALSE 55822
// exit ;
55820: GO 74213
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55822: LD_VAR 0 1
55826: PUSH
55827: LD_INT 6
55829: PUSH
55830: LD_INT 7
55832: PUSH
55833: LD_INT 8
55835: PUSH
55836: LD_INT 13
55838: PUSH
55839: LD_INT 12
55841: PUSH
55842: LD_INT 15
55844: PUSH
55845: LD_INT 11
55847: PUSH
55848: LD_INT 14
55850: PUSH
55851: LD_INT 10
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: IN
55865: IFFALSE 55875
// btype = b_lab ;
55867: LD_ADDR_VAR 0 1
55871: PUSH
55872: LD_INT 6
55874: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55875: LD_VAR 0 6
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: LIST
55893: IN
55894: NOT
55895: PUSH
55896: LD_VAR 0 1
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: LD_INT 3
55912: PUSH
55913: LD_INT 6
55915: PUSH
55916: LD_INT 36
55918: PUSH
55919: LD_INT 4
55921: PUSH
55922: LD_INT 5
55924: PUSH
55925: LD_INT 31
55927: PUSH
55928: LD_INT 32
55930: PUSH
55931: LD_INT 33
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: IN
55947: NOT
55948: PUSH
55949: LD_VAR 0 6
55953: PUSH
55954: LD_INT 1
55956: EQUAL
55957: AND
55958: OR
55959: PUSH
55960: LD_VAR 0 1
55964: PUSH
55965: LD_INT 2
55967: PUSH
55968: LD_INT 3
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: IN
55975: NOT
55976: PUSH
55977: LD_VAR 0 6
55981: PUSH
55982: LD_INT 2
55984: EQUAL
55985: AND
55986: OR
55987: IFFALSE 55997
// mode = 0 ;
55989: LD_ADDR_VAR 0 6
55993: PUSH
55994: LD_INT 0
55996: ST_TO_ADDR
// case mode of 0 :
55997: LD_VAR 0 6
56001: PUSH
56002: LD_INT 0
56004: DOUBLE
56005: EQUAL
56006: IFTRUE 56010
56008: GO 67463
56010: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56011: LD_ADDR_VAR 0 11
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 0
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 2
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 2
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 2
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 1
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: PUSH
56158: LD_INT 3
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 3
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: LIST
56201: LIST
56202: LIST
56203: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56204: LD_ADDR_VAR 0 12
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: LD_INT 1
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 1
56285: PUSH
56286: LD_INT 1
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 2
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: LD_INT 1
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: LD_INT 1
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 3
56361: NEG
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56400: LD_ADDR_VAR 0 13
56404: PUSH
56405: LD_INT 0
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 0
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 1
56481: NEG
56482: PUSH
56483: LD_INT 2
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 2
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: LD_INT 3
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: LD_INT 3
56575: NEG
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56599: LD_ADDR_VAR 0 14
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 0
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 0
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 1
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 1
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: NEG
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 2
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 2
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 2
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 3
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 0
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 2
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56795: LD_ADDR_VAR 0 15
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: NEG
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 1
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: NEG
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 1
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 2
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56988: LD_ADDR_VAR 0 16
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 1
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 1
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: LD_INT 1
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 1
57069: NEG
57070: PUSH
57071: LD_INT 2
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: LD_INT 2
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 2
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: NEG
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 2
57123: NEG
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 3
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: LIST
57180: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57181: LD_ADDR_VAR 0 17
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 0
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 1
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 1
57219: PUSH
57220: LD_INT 1
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 0
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: LD_INT 1
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 2
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 1
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: NEG
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 2
57368: NEG
57369: PUSH
57370: LD_INT 1
57372: NEG
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: LD_INT 2
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57411: LD_ADDR_VAR 0 18
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 0
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: LD_INT 1
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 1
57484: NEG
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 0
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 0
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 2
57536: PUSH
57537: LD_INT 1
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 2
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 2
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 1
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: NEG
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 2
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57641: LD_ADDR_VAR 0 19
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 0
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: LD_INT 1
57661: NEG
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 1
57679: PUSH
57680: LD_INT 1
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 0
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 0
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 2
57766: PUSH
57767: LD_INT 1
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 2
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 1
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 2
57828: NEG
57829: PUSH
57830: LD_INT 1
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 2
57840: NEG
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57871: LD_ADDR_VAR 0 20
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 0
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: LD_INT 1
57891: NEG
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 1
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: LD_INT 1
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 0
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: NEG
57941: PUSH
57942: LD_INT 1
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 0
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 2
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 2
58058: NEG
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 2
58074: NEG
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58101: LD_ADDR_VAR 0 21
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: LD_INT 1
58121: NEG
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: LD_INT 1
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: LD_INT 1
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: NEG
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 2
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 2
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 2
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: PUSH
58247: LD_INT 2
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 0
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: LD_INT 1
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: NEG
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: NEG
58289: PUSH
58290: LD_INT 1
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: NEG
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58331: LD_ADDR_VAR 0 22
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 1
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 0
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 2
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 1
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 0
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: NEG
58497: PUSH
58498: LD_INT 1
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 2
58507: NEG
58508: PUSH
58509: LD_INT 0
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 2
58518: NEG
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: LD_INT 2
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58561: LD_ADDR_VAR 0 23
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 1
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 0
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: NEG
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 1
58630: NEG
58631: PUSH
58632: LD_INT 1
58634: NEG
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 2
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: LD_INT 0
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: LD_INT 1
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 1
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 0
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: NEG
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 2
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 2
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 2
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58841: LD_ADDR_VAR 0 24
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 1
58899: NEG
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: LD_INT 1
58914: NEG
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 2
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 2
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 0
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 2
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 2
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: PUSH
58987: LD_INT 2
58989: PUSH
58990: EMPTY
58991: LIST
58992: LIST
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 2
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: NEG
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 2
59017: NEG
59018: PUSH
59019: LD_INT 0
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: NEG
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: NEG
59041: PUSH
59042: LD_INT 2
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 1
59052: PUSH
59053: LD_INT 2
59055: NEG
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 2
59063: PUSH
59064: LD_INT 1
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: LD_INT 1
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 3
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
59117: LD_ADDR_VAR 0 25
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 0
59165: PUSH
59166: LD_INT 1
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: NEG
59199: PUSH
59200: LD_INT 2
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 0
59210: PUSH
59211: LD_INT 2
59213: NEG
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 0
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: LD_INT 1
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 2
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: LD_INT 2
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: NEG
59283: PUSH
59284: LD_INT 1
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: LD_INT 0
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 3
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 2
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 3
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59391: LD_ADDR_VAR 0 26
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: LD_INT 1
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 1
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 0
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 2
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 0
59484: PUSH
59485: LD_INT 2
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 2
59516: PUSH
59517: LD_INT 1
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 2
59526: PUSH
59527: LD_INT 2
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: LD_INT 2
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: LD_INT 0
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 2
59578: NEG
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: PUSH
59603: LD_INT 3
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 1
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: NEG
59623: PUSH
59624: LD_INT 2
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 1
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59667: LD_ADDR_VAR 0 27
59671: PUSH
59672: LD_INT 0
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 0
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 0
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 1
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 2
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: LD_INT 1
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 2
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 0
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: LD_INT 1
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: LD_INT 0
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 2
59854: NEG
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 2
59866: NEG
59867: PUSH
59868: LD_INT 2
59870: NEG
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: LD_INT 1
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 3
59912: NEG
59913: PUSH
59914: LD_INT 2
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59947: LD_ADDR_VAR 0 28
59951: PUSH
59952: LD_INT 0
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 0
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 1
60020: NEG
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 0
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 1
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 2
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 2
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 2
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: LD_INT 2
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 0
60102: PUSH
60103: LD_INT 2
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 2
60123: NEG
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 1
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: LD_INT 3
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 3
60182: NEG
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: LD_INT 2
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60229: LD_ADDR_VAR 0 29
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: LD_INT 1
60249: NEG
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: LD_INT 0
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 0
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: LD_INT 2
60314: NEG
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 2
60325: NEG
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 1
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 2
60344: PUSH
60345: LD_INT 0
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 2
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 1
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 2
60395: NEG
60396: PUSH
60397: LD_INT 1
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: LD_INT 2
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: LD_INT 3
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: LD_INT 1
60462: NEG
60463: PUSH
60464: LD_INT 2
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 3
60473: NEG
60474: PUSH
60475: LD_INT 2
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60508: LD_ADDR_VAR 0 30
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: LD_INT 0
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 0
60556: PUSH
60557: LD_INT 1
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: LD_INT 1
60581: NEG
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 2
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 2
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 2
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: PUSH
60644: LD_INT 2
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 2
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 1
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 2
60674: NEG
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: NEG
60698: PUSH
60699: LD_INT 3
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: LD_INT 2
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 3
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60786: LD_ADDR_VAR 0 31
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 0
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 0
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 0
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 1
60844: NEG
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: LD_INT 1
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 2
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 0
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 1
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: LD_INT 2
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 1
60940: NEG
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 2
60951: NEG
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 2
60975: NEG
60976: PUSH
60977: LD_INT 3
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: PUSH
60988: LD_INT 1
60990: NEG
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 2
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 3
61029: NEG
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: LIST
61052: LIST
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61064: LD_ADDR_VAR 0 32
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 0
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: PUSH
61093: LD_INT 0
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 1
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 0
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: LD_INT 0
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 1
61133: NEG
61134: PUSH
61135: LD_INT 1
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 1
61145: NEG
61146: PUSH
61147: LD_INT 2
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: LD_INT 2
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 1
61168: PUSH
61169: LD_INT 1
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: PUSH
61180: LD_INT 1
61182: PUSH
61183: EMPTY
61184: LIST
61185: LIST
61186: PUSH
61187: LD_INT 2
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 1
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 0
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: NEG
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 2
61230: NEG
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 1
61253: NEG
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: LD_INT 2
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: PUSH
61277: LD_INT 2
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: LD_INT 3
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 2
61296: NEG
61297: PUSH
61298: LD_INT 1
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
61342: LD_ADDR_VAR 0 33
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 0
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 0
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 1
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 1
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 2
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 2
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: NEG
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 2
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 2
61520: NEG
61521: PUSH
61522: LD_INT 2
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 1
61565: PUSH
61566: LD_INT 3
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: LD_INT 2
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: LD_INT 2
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: LIST
61606: LIST
61607: LIST
61608: LIST
61609: LIST
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: LIST
61617: LIST
61618: LIST
61619: LIST
61620: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61621: LD_ADDR_VAR 0 34
61625: PUSH
61626: LD_INT 0
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 0
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: LD_INT 0
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 1
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 0
61669: PUSH
61670: LD_INT 1
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: NEG
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 2
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 2
61736: PUSH
61737: LD_INT 1
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 2
61746: PUSH
61747: LD_INT 2
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: PUSH
61754: LD_INT 1
61756: PUSH
61757: LD_INT 2
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: NEG
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: PUSH
61786: LD_INT 2
61788: NEG
61789: PUSH
61790: LD_INT 1
61792: NEG
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 2
61800: NEG
61801: PUSH
61802: LD_INT 2
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 1
61812: NEG
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 1
61824: PUSH
61825: LD_INT 2
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: LD_INT 2
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 2
61855: NEG
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61901: LD_ADDR_VAR 0 35
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 1
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: LD_INT 0
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: LD_INT 1
61970: NEG
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 2
61982: PUSH
61983: LD_INT 1
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 2
61992: NEG
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62013: LD_ADDR_VAR 0 36
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 0
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 0
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: LD_INT 0
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: NEG
62083: PUSH
62084: LD_INT 1
62086: NEG
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 1
62094: NEG
62095: PUSH
62096: LD_INT 2
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: EMPTY
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62125: LD_ADDR_VAR 0 37
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 1
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
62237: LD_ADDR_VAR 0 38
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 2
62318: PUSH
62319: LD_INT 1
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 2
62328: NEG
62329: PUSH
62330: LD_INT 1
62332: NEG
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
62349: LD_ADDR_VAR 0 39
62353: PUSH
62354: LD_INT 0
62356: PUSH
62357: LD_INT 0
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: LD_INT 1
62369: NEG
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: LD_INT 1
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 1
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 1
62418: NEG
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 1
62430: NEG
62431: PUSH
62432: LD_INT 2
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 1
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
62461: LD_ADDR_VAR 0 40
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 1
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 1
62499: PUSH
62500: LD_INT 1
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 0
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: LD_INT 1
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62573: LD_ADDR_VAR 0 41
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 0
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 1
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 1
62611: PUSH
62612: LD_INT 1
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 1
62642: NEG
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 2
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 2
62687: PUSH
62688: LD_INT 1
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: LD_INT 2
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: EMPTY
62712: LIST
62713: LIST
62714: PUSH
62715: LD_INT 1
62717: NEG
62718: PUSH
62719: LD_INT 1
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 2
62728: NEG
62729: PUSH
62730: LD_INT 0
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 2
62751: NEG
62752: PUSH
62753: LD_INT 2
62755: NEG
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 3
62767: NEG
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 2
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 3
62796: PUSH
62797: LD_INT 1
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 3
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 3
62816: PUSH
62817: LD_INT 3
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 2
62826: PUSH
62827: LD_INT 3
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 2
62836: NEG
62837: PUSH
62838: LD_INT 1
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: PUSH
62845: LD_INT 3
62847: NEG
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 3
62858: NEG
62859: PUSH
62860: LD_INT 1
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 3
62870: NEG
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: EMPTY
62877: LIST
62878: LIST
62879: PUSH
62880: LD_INT 3
62882: NEG
62883: PUSH
62884: LD_INT 3
62886: NEG
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62923: LD_ADDR_VAR 0 42
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 1
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: LD_INT 0
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 1
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: NEG
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: NEG
63005: PUSH
63006: LD_INT 2
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: LD_INT 2
63019: NEG
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: PUSH
63025: LD_INT 1
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 2
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 1
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: NEG
63090: PUSH
63091: LD_INT 1
63093: NEG
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 2
63101: NEG
63102: PUSH
63103: LD_INT 2
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: LD_INT 3
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 3
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: LD_INT 3
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: LD_INT 2
63151: NEG
63152: PUSH
63153: EMPTY
63154: LIST
63155: LIST
63156: PUSH
63157: LD_INT 3
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 3
63169: PUSH
63170: LD_INT 3
63172: PUSH
63173: EMPTY
63174: LIST
63175: LIST
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: LD_INT 3
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 1
63189: PUSH
63190: LD_INT 3
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 0
63199: PUSH
63200: LD_INT 3
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: LD_INT 2
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 3
63220: NEG
63221: PUSH
63222: LD_INT 2
63224: NEG
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 3
63232: NEG
63233: PUSH
63234: LD_INT 3
63236: NEG
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63273: LD_ADDR_VAR 0 43
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 0
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 1
63293: NEG
63294: PUSH
63295: EMPTY
63296: LIST
63297: LIST
63298: PUSH
63299: LD_INT 1
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: NEG
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: NEG
63343: PUSH
63344: LD_INT 1
63346: NEG
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 1
63354: NEG
63355: PUSH
63356: LD_INT 2
63358: NEG
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 2
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 1
63408: PUSH
63409: LD_INT 2
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: NEG
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PUSH
63441: LD_INT 0
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 2
63450: NEG
63451: PUSH
63452: LD_INT 1
63454: NEG
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 1
63462: NEG
63463: PUSH
63464: LD_INT 3
63466: NEG
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 3
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: PUSH
63486: LD_INT 2
63488: NEG
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: PUSH
63497: LD_INT 1
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: PUSH
63528: LD_INT 3
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 0
63537: PUSH
63538: LD_INT 3
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: NEG
63548: PUSH
63549: LD_INT 2
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: NEG
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 3
63580: NEG
63581: PUSH
63582: LD_INT 1
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63621: LD_ADDR_VAR 0 44
63625: PUSH
63626: LD_INT 0
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 0
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 1
63649: PUSH
63650: LD_INT 0
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: PUSH
63660: LD_INT 1
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 0
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 1
63679: NEG
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 1
63690: NEG
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 2
63706: NEG
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_INT 2
63745: PUSH
63746: LD_INT 2
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: PUSH
63753: LD_INT 1
63755: PUSH
63756: LD_INT 2
63758: PUSH
63759: EMPTY
63760: LIST
63761: LIST
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 2
63787: NEG
63788: PUSH
63789: LD_INT 1
63791: NEG
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: LD_INT 2
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 2
63811: NEG
63812: PUSH
63813: LD_INT 3
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 2
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 3
63834: PUSH
63835: LD_INT 0
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: PUSH
63842: LD_INT 3
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: PUSH
63855: LD_INT 2
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 3
63864: PUSH
63865: LD_INT 3
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: LD_INT 3
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: NEG
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 3
63895: NEG
63896: PUSH
63897: LD_INT 0
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: PUSH
63904: LD_INT 3
63906: NEG
63907: PUSH
63908: LD_INT 1
63910: NEG
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 3
63918: NEG
63919: PUSH
63920: LD_INT 2
63922: NEG
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: LD_INT 3
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63971: LD_ADDR_VAR 0 45
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 0
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 0
63988: PUSH
63989: LD_INT 1
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 1
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 1
64009: PUSH
64010: LD_INT 1
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: LD_INT 1
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 1
64029: NEG
64030: PUSH
64031: LD_INT 0
64033: PUSH
64034: EMPTY
64035: LIST
64036: LIST
64037: PUSH
64038: LD_INT 1
64040: NEG
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 0
64064: PUSH
64065: LD_INT 2
64067: NEG
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 1
64075: PUSH
64076: LD_INT 1
64078: NEG
64079: PUSH
64080: EMPTY
64081: LIST
64082: LIST
64083: PUSH
64084: LD_INT 2
64086: PUSH
64087: LD_INT 1
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 2
64096: PUSH
64097: LD_INT 2
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 1
64106: PUSH
64107: LD_INT 2
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: LD_INT 2
64119: PUSH
64120: EMPTY
64121: LIST
64122: LIST
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: LD_INT 1
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 2
64137: NEG
64138: PUSH
64139: LD_INT 1
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 2
64153: NEG
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 2
64161: NEG
64162: PUSH
64163: LD_INT 3
64165: NEG
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: LD_INT 3
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: LD_INT 3
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: LD_INT 2
64199: NEG
64200: PUSH
64201: EMPTY
64202: LIST
64203: LIST
64204: PUSH
64205: LD_INT 3
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: LD_INT 3
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 2
64227: PUSH
64228: LD_INT 3
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 3
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: LD_INT 3
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: LD_INT 2
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: PUSH
64266: LD_INT 3
64268: NEG
64269: PUSH
64270: LD_INT 2
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 3
64280: NEG
64281: PUSH
64282: LD_INT 3
64284: NEG
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64321: LD_ADDR_VAR 0 46
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 0
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: LD_INT 1
64341: NEG
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 1
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 1
64390: NEG
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 0
64414: PUSH
64415: LD_INT 2
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 1
64425: PUSH
64426: LD_INT 1
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 2
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: LD_INT 2
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 2
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 2
64487: NEG
64488: PUSH
64489: LD_INT 0
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 2
64498: NEG
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: LD_INT 3
64514: NEG
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 3
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 2
64536: NEG
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 1
64547: NEG
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 3
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 3
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 3
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 2
64606: NEG
64607: PUSH
64608: LD_INT 1
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 3
64617: NEG
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 3
64628: NEG
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64669: LD_ADDR_VAR 0 47
64673: PUSH
64674: LD_INT 0
64676: PUSH
64677: LD_INT 0
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: LD_INT 0
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 1
64707: PUSH
64708: LD_INT 1
64710: PUSH
64711: EMPTY
64712: LIST
64713: LIST
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: LD_INT 1
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 2
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 0
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 2
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: LD_INT 2
64800: NEG
64801: PUSH
64802: EMPTY
64803: LIST
64804: LIST
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: LIST
64817: LIST
64818: LIST
64819: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64820: LD_ADDR_VAR 0 48
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: LD_INT 0
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 1
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 1
64889: NEG
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: NEG
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 2
64916: NEG
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64967: LD_ADDR_VAR 0 49
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 1
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 1
65036: NEG
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 1
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: PUSH
65060: LD_INT 0
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 2
65069: PUSH
65070: LD_INT 1
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: LD_INT 2
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: PUSH
65090: LD_INT 2
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
65111: LD_ADDR_VAR 0 50
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 2
65192: PUSH
65193: LD_INT 1
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 2
65202: PUSH
65203: LD_INT 2
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 1
65212: PUSH
65213: LD_INT 2
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 0
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: LD_INT 1
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
65255: LD_ADDR_VAR 0 51
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 1
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 1
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 0
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 1
65324: NEG
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: LD_INT 2
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: LD_INT 2
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 1
65356: NEG
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 2
65367: NEG
65368: PUSH
65369: LD_INT 0
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: NEG
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65402: LD_ADDR_VAR 0 52
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: LD_INT 0
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: LD_INT 1
65422: NEG
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: LD_INT 0
65433: PUSH
65434: EMPTY
65435: LIST
65436: LIST
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: LD_INT 0
65450: PUSH
65451: LD_INT 1
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: LD_INT 0
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: LD_INT 1
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: NEG
65484: PUSH
65485: LD_INT 2
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 1
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 2
65506: NEG
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 2
65517: NEG
65518: PUSH
65519: LD_INT 1
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 2
65529: NEG
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65553: LD_ADDR_VAR 0 53
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: LD_INT 1
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 1
65591: PUSH
65592: LD_INT 1
65594: PUSH
65595: EMPTY
65596: LIST
65597: LIST
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: EMPTY
65606: LIST
65607: LIST
65608: PUSH
65609: LD_INT 1
65611: NEG
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: LD_INT 1
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 2
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 2
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: LD_INT 2
65678: PUSH
65679: LD_INT 1
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 2
65688: PUSH
65689: LD_INT 2
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 1
65698: PUSH
65699: LD_INT 2
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 0
65708: PUSH
65709: LD_INT 2
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 2
65729: NEG
65730: PUSH
65731: LD_INT 0
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 2
65740: NEG
65741: PUSH
65742: LD_INT 1
65744: NEG
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: LD_INT 2
65756: NEG
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65783: LD_ADDR_VAR 0 54
65787: PUSH
65788: LD_INT 0
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 1
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 0
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: NEG
65853: PUSH
65854: LD_INT 1
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 0
65876: PUSH
65877: LD_INT 2
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 2
65918: PUSH
65919: LD_INT 2
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: LD_INT 1
65928: PUSH
65929: LD_INT 2
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 0
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: LD_INT 1
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: LD_INT 0
65963: PUSH
65964: EMPTY
65965: LIST
65966: LIST
65967: PUSH
65968: LD_INT 2
65970: NEG
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: EMPTY
65977: LIST
65978: LIST
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: LD_INT 2
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66013: LD_ADDR_VAR 0 55
66017: PUSH
66018: LD_INT 0
66020: PUSH
66021: LD_INT 0
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: LD_INT 1
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 0
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: PUSH
66052: LD_INT 1
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 0
66061: PUSH
66062: LD_INT 1
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: LD_INT 0
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: LD_INT 2
66098: NEG
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 0
66106: PUSH
66107: LD_INT 2
66109: NEG
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 2
66128: PUSH
66129: LD_INT 0
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: LD_INT 2
66138: PUSH
66139: LD_INT 1
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 2
66148: PUSH
66149: LD_INT 2
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 1
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 0
66168: PUSH
66169: LD_INT 2
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: LD_INT 1
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 2
66189: NEG
66190: PUSH
66191: LD_INT 0
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 2
66200: NEG
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: LD_INT 2
66216: NEG
66217: PUSH
66218: EMPTY
66219: LIST
66220: LIST
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66243: LD_ADDR_VAR 0 56
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 0
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 1
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: LD_INT 0
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 1
66281: PUSH
66282: LD_INT 1
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 0
66291: PUSH
66292: LD_INT 1
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: PUSH
66299: LD_INT 1
66301: NEG
66302: PUSH
66303: LD_INT 0
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: NEG
66313: PUSH
66314: LD_INT 1
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 2
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 2
66339: NEG
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: LD_INT 0
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: LD_INT 2
66368: PUSH
66369: LD_INT 1
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: LD_INT 2
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 1
66388: PUSH
66389: LD_INT 2
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: LD_INT 2
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: LD_INT 1
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 2
66419: NEG
66420: PUSH
66421: LD_INT 0
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 2
66430: NEG
66431: PUSH
66432: LD_INT 1
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 2
66442: NEG
66443: PUSH
66444: LD_INT 2
66446: NEG
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: LIST
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: LIST
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66473: LD_ADDR_VAR 0 57
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: LD_INT 0
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: LD_INT 1
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 1
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: NEG
66532: PUSH
66533: LD_INT 0
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: NEG
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: LD_INT 2
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 0
66566: PUSH
66567: LD_INT 2
66569: NEG
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: LD_INT 1
66580: NEG
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: PUSH
66586: LD_INT 2
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: PUSH
66596: LD_INT 2
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: PUSH
66609: LD_INT 2
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: LD_INT 2
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: LD_INT 2
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: LD_INT 1
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 2
66649: NEG
66650: PUSH
66651: LD_INT 0
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: LD_INT 2
66660: NEG
66661: PUSH
66662: LD_INT 1
66664: NEG
66665: PUSH
66666: EMPTY
66667: LIST
66668: LIST
66669: PUSH
66670: LD_INT 2
66672: NEG
66673: PUSH
66674: LD_INT 2
66676: NEG
66677: PUSH
66678: EMPTY
66679: LIST
66680: LIST
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66703: LD_ADDR_VAR 0 58
66707: PUSH
66708: LD_INT 0
66710: PUSH
66711: LD_INT 0
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 1
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: LD_INT 0
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: NEG
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: LD_INT 2
66788: NEG
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PUSH
66794: LD_INT 0
66796: PUSH
66797: LD_INT 2
66799: NEG
66800: PUSH
66801: EMPTY
66802: LIST
66803: LIST
66804: PUSH
66805: LD_INT 1
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 2
66818: PUSH
66819: LD_INT 0
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 2
66828: PUSH
66829: LD_INT 1
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 2
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 0
66858: PUSH
66859: LD_INT 2
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: LD_INT 0
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: LD_INT 1
66894: NEG
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 2
66902: NEG
66903: PUSH
66904: LD_INT 2
66906: NEG
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: LIST
66927: LIST
66928: LIST
66929: LIST
66930: LIST
66931: LIST
66932: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66933: LD_ADDR_VAR 0 59
66937: PUSH
66938: LD_INT 0
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 0
66950: PUSH
66951: LD_INT 1
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: PUSH
66972: LD_INT 1
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 0
66981: PUSH
66982: LD_INT 1
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 1
66991: NEG
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: LD_INT 1
67006: NEG
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67021: LD_ADDR_VAR 0 60
67025: PUSH
67026: LD_INT 0
67028: PUSH
67029: LD_INT 0
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: LD_INT 1
67041: NEG
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 1
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 1
67059: PUSH
67060: LD_INT 1
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: LD_INT 1
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 1
67079: NEG
67080: PUSH
67081: LD_INT 0
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: LIST
67104: LIST
67105: LIST
67106: LIST
67107: LIST
67108: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67109: LD_ADDR_VAR 0 61
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 0
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 0
67126: PUSH
67127: LD_INT 1
67129: NEG
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 1
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 0
67157: PUSH
67158: LD_INT 1
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 1
67167: NEG
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 1
67182: NEG
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67197: LD_ADDR_VAR 0 62
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 0
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 0
67214: PUSH
67215: LD_INT 1
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 0
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 1
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 0
67245: PUSH
67246: LD_INT 1
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_INT 1
67255: NEG
67256: PUSH
67257: LD_INT 0
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 1
67266: NEG
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67285: LD_ADDR_VAR 0 63
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: LD_INT 1
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: LD_INT 1
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: LD_INT 1
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
67373: LD_ADDR_VAR 0 64
67377: PUSH
67378: LD_INT 0
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 1
67401: PUSH
67402: LD_INT 0
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 0
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 1
67431: NEG
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 1
67442: NEG
67443: PUSH
67444: LD_INT 1
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// end ; 1 :
67461: GO 73358
67463: LD_INT 1
67465: DOUBLE
67466: EQUAL
67467: IFTRUE 67471
67469: GO 70094
67471: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67472: LD_ADDR_VAR 0 11
67476: PUSH
67477: LD_INT 1
67479: NEG
67480: PUSH
67481: LD_INT 3
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 0
67491: PUSH
67492: LD_INT 3
67494: NEG
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: LD_INT 2
67505: NEG
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: EMPTY
67512: LIST
67513: LIST
67514: LIST
67515: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67516: LD_ADDR_VAR 0 12
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: LD_INT 1
67526: NEG
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 3
67534: PUSH
67535: LD_INT 0
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 3
67544: PUSH
67545: LD_INT 1
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67557: LD_ADDR_VAR 0 13
67561: PUSH
67562: LD_INT 3
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: PUSH
67572: LD_INT 3
67574: PUSH
67575: LD_INT 3
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 2
67584: PUSH
67585: LD_INT 3
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67597: LD_ADDR_VAR 0 14
67601: PUSH
67602: LD_INT 1
67604: PUSH
67605: LD_INT 3
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 3
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 2
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: LIST
67637: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67638: LD_ADDR_VAR 0 15
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 3
67667: NEG
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: LIST
67681: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67682: LD_ADDR_VAR 0 16
67686: PUSH
67687: LD_INT 2
67689: NEG
67690: PUSH
67691: LD_INT 3
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: NEG
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 3
67713: NEG
67714: PUSH
67715: LD_INT 3
67717: NEG
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: LIST
67727: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67728: LD_ADDR_VAR 0 17
67732: PUSH
67733: LD_INT 1
67735: NEG
67736: PUSH
67737: LD_INT 3
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: LD_INT 3
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 1
67758: PUSH
67759: LD_INT 2
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: LIST
67771: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67772: LD_ADDR_VAR 0 18
67776: PUSH
67777: LD_INT 2
67779: PUSH
67780: LD_INT 1
67782: NEG
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 3
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 3
67800: PUSH
67801: LD_INT 1
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67813: LD_ADDR_VAR 0 19
67817: PUSH
67818: LD_INT 3
67820: PUSH
67821: LD_INT 2
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 3
67830: PUSH
67831: LD_INT 3
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 2
67840: PUSH
67841: LD_INT 3
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: LIST
67852: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67853: LD_ADDR_VAR 0 20
67857: PUSH
67858: LD_INT 1
67860: PUSH
67861: LD_INT 3
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PUSH
67868: LD_INT 0
67870: PUSH
67871: LD_INT 3
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: PUSH
67878: LD_INT 1
67880: NEG
67881: PUSH
67882: LD_INT 2
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: LIST
67893: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67894: LD_ADDR_VAR 0 21
67898: PUSH
67899: LD_INT 2
67901: NEG
67902: PUSH
67903: LD_INT 1
67905: PUSH
67906: EMPTY
67907: LIST
67908: LIST
67909: PUSH
67910: LD_INT 3
67912: NEG
67913: PUSH
67914: LD_INT 0
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 3
67923: NEG
67924: PUSH
67925: LD_INT 1
67927: NEG
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: LIST
67937: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67938: LD_ADDR_VAR 0 22
67942: PUSH
67943: LD_INT 2
67945: NEG
67946: PUSH
67947: LD_INT 3
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 3
67957: NEG
67958: PUSH
67959: LD_INT 2
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 3
67969: NEG
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: LIST
67983: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67984: LD_ADDR_VAR 0 23
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: LD_INT 3
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: LD_INT 4
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: LD_INT 3
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: EMPTY
68024: LIST
68025: LIST
68026: LIST
68027: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
68028: LD_ADDR_VAR 0 24
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: LD_INT 0
68038: PUSH
68039: EMPTY
68040: LIST
68041: LIST
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: LD_INT 1
68048: NEG
68049: PUSH
68050: EMPTY
68051: LIST
68052: LIST
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: LD_INT 1
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: LIST
68068: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
68069: LD_ADDR_VAR 0 25
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: LD_INT 3
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: LD_INT 4
68086: PUSH
68087: LD_INT 3
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 3
68096: PUSH
68097: LD_INT 4
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: LIST
68108: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
68109: LD_ADDR_VAR 0 26
68113: PUSH
68114: LD_INT 0
68116: PUSH
68117: LD_INT 3
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 1
68126: PUSH
68127: LD_INT 4
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: LD_INT 3
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: LIST
68149: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
68150: LD_ADDR_VAR 0 27
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 3
68168: NEG
68169: PUSH
68170: LD_INT 1
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 4
68179: NEG
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: LIST
68193: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
68194: LD_ADDR_VAR 0 28
68198: PUSH
68199: LD_INT 3
68201: NEG
68202: PUSH
68203: LD_INT 3
68205: NEG
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: PUSH
68211: LD_INT 3
68213: NEG
68214: PUSH
68215: LD_INT 4
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 4
68225: NEG
68226: PUSH
68227: LD_INT 3
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: LIST
68239: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
68240: LD_ADDR_VAR 0 29
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: LD_INT 3
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: LD_INT 3
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: LD_INT 2
68273: NEG
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: NEG
68282: PUSH
68283: LD_INT 4
68285: NEG
68286: PUSH
68287: EMPTY
68288: LIST
68289: LIST
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: LD_INT 4
68296: NEG
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: PUSH
68302: LD_INT 1
68304: PUSH
68305: LD_INT 3
68307: NEG
68308: PUSH
68309: EMPTY
68310: LIST
68311: LIST
68312: PUSH
68313: LD_INT 1
68315: NEG
68316: PUSH
68317: LD_INT 5
68319: NEG
68320: PUSH
68321: EMPTY
68322: LIST
68323: LIST
68324: PUSH
68325: LD_INT 0
68327: PUSH
68328: LD_INT 5
68330: NEG
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 1
68338: PUSH
68339: LD_INT 4
68341: NEG
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 1
68349: NEG
68350: PUSH
68351: LD_INT 6
68353: NEG
68354: PUSH
68355: EMPTY
68356: LIST
68357: LIST
68358: PUSH
68359: LD_INT 0
68361: PUSH
68362: LD_INT 6
68364: NEG
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 1
68372: PUSH
68373: LD_INT 5
68375: NEG
68376: PUSH
68377: EMPTY
68378: LIST
68379: LIST
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: LIST
68392: LIST
68393: LIST
68394: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
68395: LD_ADDR_VAR 0 30
68399: PUSH
68400: LD_INT 2
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: PUSH
68414: LD_INT 0
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 3
68423: PUSH
68424: LD_INT 1
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 3
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: EMPTY
68439: LIST
68440: LIST
68441: PUSH
68442: LD_INT 4
68444: PUSH
68445: LD_INT 0
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: PUSH
68452: LD_INT 4
68454: PUSH
68455: LD_INT 1
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 4
68464: PUSH
68465: LD_INT 1
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 5
68475: PUSH
68476: LD_INT 0
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 5
68485: PUSH
68486: LD_INT 1
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 5
68495: PUSH
68496: LD_INT 1
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 6
68506: PUSH
68507: LD_INT 0
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 6
68516: PUSH
68517: LD_INT 1
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
68538: LD_ADDR_VAR 0 31
68542: PUSH
68543: LD_INT 3
68545: PUSH
68546: LD_INT 2
68548: PUSH
68549: EMPTY
68550: LIST
68551: LIST
68552: PUSH
68553: LD_INT 3
68555: PUSH
68556: LD_INT 3
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: LD_INT 3
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 4
68575: PUSH
68576: LD_INT 3
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 4
68585: PUSH
68586: LD_INT 4
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 3
68595: PUSH
68596: LD_INT 4
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 5
68605: PUSH
68606: LD_INT 4
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 5
68615: PUSH
68616: LD_INT 5
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 4
68625: PUSH
68626: LD_INT 5
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 6
68635: PUSH
68636: LD_INT 5
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 6
68645: PUSH
68646: LD_INT 6
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 5
68655: PUSH
68656: LD_INT 6
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: EMPTY
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68677: LD_ADDR_VAR 0 32
68681: PUSH
68682: LD_INT 1
68684: PUSH
68685: LD_INT 3
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 0
68694: PUSH
68695: LD_INT 3
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 1
68704: NEG
68705: PUSH
68706: LD_INT 2
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: LD_INT 4
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 0
68725: PUSH
68726: LD_INT 4
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 1
68735: NEG
68736: PUSH
68737: LD_INT 3
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: PUSH
68747: LD_INT 5
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_INT 5
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 1
68766: NEG
68767: PUSH
68768: LD_INT 4
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: PUSH
68778: LD_INT 6
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 0
68787: PUSH
68788: LD_INT 6
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: PUSH
68795: LD_INT 1
68797: NEG
68798: PUSH
68799: LD_INT 5
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68820: LD_ADDR_VAR 0 33
68824: PUSH
68825: LD_INT 2
68827: NEG
68828: PUSH
68829: LD_INT 1
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 3
68838: NEG
68839: PUSH
68840: LD_INT 0
68842: PUSH
68843: EMPTY
68844: LIST
68845: LIST
68846: PUSH
68847: LD_INT 3
68849: NEG
68850: PUSH
68851: LD_INT 1
68853: NEG
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 3
68861: NEG
68862: PUSH
68863: LD_INT 1
68865: PUSH
68866: EMPTY
68867: LIST
68868: LIST
68869: PUSH
68870: LD_INT 4
68872: NEG
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: EMPTY
68878: LIST
68879: LIST
68880: PUSH
68881: LD_INT 4
68883: NEG
68884: PUSH
68885: LD_INT 1
68887: NEG
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 4
68895: NEG
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 5
68906: NEG
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: LD_INT 5
68917: NEG
68918: PUSH
68919: LD_INT 1
68921: NEG
68922: PUSH
68923: EMPTY
68924: LIST
68925: LIST
68926: PUSH
68927: LD_INT 5
68929: NEG
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 6
68940: NEG
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 6
68951: NEG
68952: PUSH
68953: LD_INT 1
68955: NEG
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68975: LD_ADDR_VAR 0 34
68979: PUSH
68980: LD_INT 2
68982: NEG
68983: PUSH
68984: LD_INT 3
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 3
68994: NEG
68995: PUSH
68996: LD_INT 2
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 3
69006: NEG
69007: PUSH
69008: LD_INT 3
69010: NEG
69011: PUSH
69012: EMPTY
69013: LIST
69014: LIST
69015: PUSH
69016: LD_INT 3
69018: NEG
69019: PUSH
69020: LD_INT 4
69022: NEG
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 4
69030: NEG
69031: PUSH
69032: LD_INT 3
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 4
69042: NEG
69043: PUSH
69044: LD_INT 4
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 4
69054: NEG
69055: PUSH
69056: LD_INT 5
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 5
69066: NEG
69067: PUSH
69068: LD_INT 4
69070: NEG
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: LD_INT 5
69078: NEG
69079: PUSH
69080: LD_INT 5
69082: NEG
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 5
69090: NEG
69091: PUSH
69092: LD_INT 6
69094: NEG
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PUSH
69100: LD_INT 6
69102: NEG
69103: PUSH
69104: LD_INT 5
69106: NEG
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: PUSH
69112: LD_INT 6
69114: NEG
69115: PUSH
69116: LD_INT 6
69118: NEG
69119: PUSH
69120: EMPTY
69121: LIST
69122: LIST
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
69138: LD_ADDR_VAR 0 41
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: LD_INT 2
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: LD_INT 2
69171: NEG
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: LIST
69181: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
69182: LD_ADDR_VAR 0 42
69186: PUSH
69187: LD_INT 2
69189: PUSH
69190: LD_INT 0
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: LD_INT 2
69199: PUSH
69200: LD_INT 1
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 3
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: LIST
69222: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
69223: LD_ADDR_VAR 0 43
69227: PUSH
69228: LD_INT 2
69230: PUSH
69231: LD_INT 2
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 3
69240: PUSH
69241: LD_INT 2
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: PUSH
69248: LD_INT 2
69250: PUSH
69251: LD_INT 3
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: LIST
69262: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
69263: LD_ADDR_VAR 0 44
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: LD_INT 2
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: PUSH
69281: LD_INT 3
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: PUSH
69292: LD_INT 2
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: LIST
69303: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69304: LD_ADDR_VAR 0 45
69308: PUSH
69309: LD_INT 2
69311: NEG
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 2
69322: NEG
69323: PUSH
69324: LD_INT 1
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 3
69333: NEG
69334: PUSH
69335: LD_INT 1
69337: NEG
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: LIST
69347: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
69348: LD_ADDR_VAR 0 46
69352: PUSH
69353: LD_INT 2
69355: NEG
69356: PUSH
69357: LD_INT 2
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 2
69367: NEG
69368: PUSH
69369: LD_INT 3
69371: NEG
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 3
69379: NEG
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: LIST
69393: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
69394: LD_ADDR_VAR 0 47
69398: PUSH
69399: LD_INT 2
69401: NEG
69402: PUSH
69403: LD_INT 3
69405: NEG
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: LD_INT 3
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: EMPTY
69424: LIST
69425: LIST
69426: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
69427: LD_ADDR_VAR 0 48
69431: PUSH
69432: LD_INT 1
69434: PUSH
69435: LD_INT 2
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 2
69445: PUSH
69446: LD_INT 1
69448: NEG
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
69458: LD_ADDR_VAR 0 49
69462: PUSH
69463: LD_INT 3
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: LD_INT 2
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
69487: LD_ADDR_VAR 0 50
69491: PUSH
69492: LD_INT 2
69494: PUSH
69495: LD_INT 3
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 1
69504: PUSH
69505: LD_INT 3
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: EMPTY
69513: LIST
69514: LIST
69515: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
69516: LD_ADDR_VAR 0 51
69520: PUSH
69521: LD_INT 1
69523: NEG
69524: PUSH
69525: LD_INT 2
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 2
69534: NEG
69535: PUSH
69536: LD_INT 1
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69547: LD_ADDR_VAR 0 52
69551: PUSH
69552: LD_INT 3
69554: NEG
69555: PUSH
69556: LD_INT 1
69558: NEG
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 3
69566: NEG
69567: PUSH
69568: LD_INT 2
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69580: LD_ADDR_VAR 0 53
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: LD_INT 3
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 0
69599: PUSH
69600: LD_INT 3
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 1
69610: PUSH
69611: LD_INT 2
69613: NEG
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: LIST
69623: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69624: LD_ADDR_VAR 0 54
69628: PUSH
69629: LD_INT 2
69631: PUSH
69632: LD_INT 1
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: LD_INT 0
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: PUSH
69650: LD_INT 3
69652: PUSH
69653: LD_INT 1
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: EMPTY
69661: LIST
69662: LIST
69663: LIST
69664: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69665: LD_ADDR_VAR 0 55
69669: PUSH
69670: LD_INT 3
69672: PUSH
69673: LD_INT 2
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: LD_INT 3
69682: PUSH
69683: LD_INT 3
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 2
69692: PUSH
69693: LD_INT 3
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: LIST
69704: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69705: LD_ADDR_VAR 0 56
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: LD_INT 3
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 0
69722: PUSH
69723: LD_INT 3
69725: PUSH
69726: EMPTY
69727: LIST
69728: LIST
69729: PUSH
69730: LD_INT 1
69732: NEG
69733: PUSH
69734: LD_INT 2
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69746: LD_ADDR_VAR 0 57
69750: PUSH
69751: LD_INT 2
69753: NEG
69754: PUSH
69755: LD_INT 1
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 3
69764: NEG
69765: PUSH
69766: LD_INT 0
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 3
69775: NEG
69776: PUSH
69777: LD_INT 1
69779: NEG
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: LIST
69789: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69790: LD_ADDR_VAR 0 58
69794: PUSH
69795: LD_INT 2
69797: NEG
69798: PUSH
69799: LD_INT 3
69801: NEG
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 3
69809: NEG
69810: PUSH
69811: LD_INT 2
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: LD_INT 3
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69836: LD_ADDR_VAR 0 59
69840: PUSH
69841: LD_INT 1
69843: NEG
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 2
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 1
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69880: LD_ADDR_VAR 0 60
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 1
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 2
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 2
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: LIST
69920: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69921: LD_ADDR_VAR 0 61
69925: PUSH
69926: LD_INT 2
69928: PUSH
69929: LD_INT 1
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 2
69938: PUSH
69939: LD_INT 2
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: LD_INT 2
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: LIST
69960: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69961: LD_ADDR_VAR 0 62
69965: PUSH
69966: LD_INT 1
69968: PUSH
69969: LD_INT 2
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 0
69978: PUSH
69979: LD_INT 2
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 1
69988: NEG
69989: PUSH
69990: LD_INT 1
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: LIST
70001: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70002: LD_ADDR_VAR 0 63
70006: PUSH
70007: LD_INT 1
70009: NEG
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: NEG
70021: PUSH
70022: LD_INT 0
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 2
70031: NEG
70032: PUSH
70033: LD_INT 1
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70046: LD_ADDR_VAR 0 64
70050: PUSH
70051: LD_INT 1
70053: NEG
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 2
70065: NEG
70066: PUSH
70067: LD_INT 1
70069: NEG
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 2
70077: NEG
70078: PUSH
70079: LD_INT 2
70081: NEG
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: LIST
70091: ST_TO_ADDR
// end ; 2 :
70092: GO 73358
70094: LD_INT 2
70096: DOUBLE
70097: EQUAL
70098: IFTRUE 70102
70100: GO 73357
70102: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
70103: LD_ADDR_VAR 0 29
70107: PUSH
70108: LD_INT 4
70110: PUSH
70111: LD_INT 0
70113: PUSH
70114: EMPTY
70115: LIST
70116: LIST
70117: PUSH
70118: LD_INT 4
70120: PUSH
70121: LD_INT 1
70123: NEG
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 5
70131: PUSH
70132: LD_INT 0
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 5
70141: PUSH
70142: LD_INT 1
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 4
70151: PUSH
70152: LD_INT 1
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 3
70161: PUSH
70162: LD_INT 0
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 3
70171: PUSH
70172: LD_INT 1
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 3
70182: PUSH
70183: LD_INT 2
70185: NEG
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 5
70193: PUSH
70194: LD_INT 2
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 3
70203: PUSH
70204: LD_INT 3
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: PUSH
70214: LD_INT 2
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: LD_INT 3
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: LD_INT 4
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 3
70243: PUSH
70244: LD_INT 4
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 3
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 4
70273: PUSH
70274: LD_INT 2
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 2
70283: PUSH
70284: LD_INT 4
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 0
70293: PUSH
70294: LD_INT 4
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: LD_INT 3
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 1
70313: PUSH
70314: LD_INT 4
70316: PUSH
70317: EMPTY
70318: LIST
70319: LIST
70320: PUSH
70321: LD_INT 1
70323: PUSH
70324: LD_INT 5
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: LD_INT 5
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 1
70343: NEG
70344: PUSH
70345: LD_INT 4
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 1
70354: NEG
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 2
70365: PUSH
70366: LD_INT 5
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: LD_INT 3
70379: PUSH
70380: EMPTY
70381: LIST
70382: LIST
70383: PUSH
70384: LD_INT 3
70386: NEG
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 3
70397: NEG
70398: PUSH
70399: LD_INT 1
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: NEG
70410: PUSH
70411: LD_INT 0
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: LD_INT 1
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 3
70431: NEG
70432: PUSH
70433: LD_INT 1
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 4
70442: NEG
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: NEG
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 4
70465: NEG
70466: PUSH
70467: LD_INT 2
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 2
70477: NEG
70478: PUSH
70479: LD_INT 2
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 4
70488: NEG
70489: PUSH
70490: LD_INT 4
70492: NEG
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 4
70500: NEG
70501: PUSH
70502: LD_INT 5
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 4
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 3
70524: NEG
70525: PUSH
70526: LD_INT 3
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 4
70536: NEG
70537: PUSH
70538: LD_INT 3
70540: NEG
70541: PUSH
70542: EMPTY
70543: LIST
70544: LIST
70545: PUSH
70546: LD_INT 5
70548: NEG
70549: PUSH
70550: LD_INT 4
70552: NEG
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 5
70560: NEG
70561: PUSH
70562: LD_INT 5
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 3
70572: NEG
70573: PUSH
70574: LD_INT 5
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 5
70584: NEG
70585: PUSH
70586: LD_INT 3
70588: NEG
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70641: LD_ADDR_VAR 0 30
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: LD_INT 4
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 4
70658: PUSH
70659: LD_INT 3
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 5
70668: PUSH
70669: LD_INT 4
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 5
70678: PUSH
70679: LD_INT 5
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 4
70688: PUSH
70689: LD_INT 5
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 3
70698: PUSH
70699: LD_INT 4
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 3
70708: PUSH
70709: LD_INT 3
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 5
70718: PUSH
70719: LD_INT 3
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 3
70728: PUSH
70729: LD_INT 5
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: LD_INT 2
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 1
70758: PUSH
70759: LD_INT 3
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: PUSH
70766: LD_INT 1
70768: PUSH
70769: LD_INT 4
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 0
70778: PUSH
70779: LD_INT 4
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: NEG
70789: PUSH
70790: LD_INT 3
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 1
70799: NEG
70800: PUSH
70801: LD_INT 2
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: LD_INT 2
70810: PUSH
70811: LD_INT 4
70813: PUSH
70814: EMPTY
70815: LIST
70816: LIST
70817: PUSH
70818: LD_INT 2
70820: NEG
70821: PUSH
70822: LD_INT 2
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 4
70831: NEG
70832: PUSH
70833: LD_INT 0
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 4
70842: NEG
70843: PUSH
70844: LD_INT 1
70846: NEG
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 3
70854: NEG
70855: PUSH
70856: LD_INT 0
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 3
70865: NEG
70866: PUSH
70867: LD_INT 1
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 4
70876: NEG
70877: PUSH
70878: LD_INT 1
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 5
70887: NEG
70888: PUSH
70889: LD_INT 0
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 5
70898: NEG
70899: PUSH
70900: LD_INT 1
70902: NEG
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: LD_INT 5
70910: NEG
70911: PUSH
70912: LD_INT 2
70914: NEG
70915: PUSH
70916: EMPTY
70917: LIST
70918: LIST
70919: PUSH
70920: LD_INT 3
70922: NEG
70923: PUSH
70924: LD_INT 2
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 3
70933: NEG
70934: PUSH
70935: LD_INT 3
70937: NEG
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: NEG
70946: PUSH
70947: LD_INT 4
70949: NEG
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 2
70957: NEG
70958: PUSH
70959: LD_INT 3
70961: NEG
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: LD_INT 2
70969: NEG
70970: PUSH
70971: LD_INT 2
70973: NEG
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: LD_INT 3
70981: NEG
70982: PUSH
70983: LD_INT 2
70985: NEG
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: LD_INT 4
70993: NEG
70994: PUSH
70995: LD_INT 3
70997: NEG
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 4
71005: NEG
71006: PUSH
71007: LD_INT 4
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 2
71017: NEG
71018: PUSH
71019: LD_INT 4
71021: NEG
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 4
71029: NEG
71030: PUSH
71031: LD_INT 2
71033: NEG
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 0
71041: PUSH
71042: LD_INT 4
71044: NEG
71045: PUSH
71046: EMPTY
71047: LIST
71048: LIST
71049: PUSH
71050: LD_INT 0
71052: PUSH
71053: LD_INT 5
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 1
71063: PUSH
71064: LD_INT 4
71066: NEG
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: LD_INT 3
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 0
71085: PUSH
71086: LD_INT 3
71088: NEG
71089: PUSH
71090: EMPTY
71091: LIST
71092: LIST
71093: PUSH
71094: LD_INT 1
71096: NEG
71097: PUSH
71098: LD_INT 4
71100: NEG
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 1
71108: NEG
71109: PUSH
71110: LD_INT 5
71112: NEG
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: PUSH
71118: LD_INT 2
71120: PUSH
71121: LD_INT 3
71123: NEG
71124: PUSH
71125: EMPTY
71126: LIST
71127: LIST
71128: PUSH
71129: LD_INT 2
71131: NEG
71132: PUSH
71133: LD_INT 5
71135: NEG
71136: PUSH
71137: EMPTY
71138: LIST
71139: LIST
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
71188: LD_ADDR_VAR 0 31
71192: PUSH
71193: LD_INT 0
71195: PUSH
71196: LD_INT 4
71198: PUSH
71199: EMPTY
71200: LIST
71201: LIST
71202: PUSH
71203: LD_INT 0
71205: PUSH
71206: LD_INT 3
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 1
71215: PUSH
71216: LD_INT 4
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: LD_INT 5
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: LD_INT 5
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 1
71245: NEG
71246: PUSH
71247: LD_INT 4
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: LD_INT 3
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 2
71267: PUSH
71268: LD_INT 5
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: NEG
71278: PUSH
71279: LD_INT 3
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 3
71288: NEG
71289: PUSH
71290: LD_INT 0
71292: PUSH
71293: EMPTY
71294: LIST
71295: LIST
71296: PUSH
71297: LD_INT 3
71299: NEG
71300: PUSH
71301: LD_INT 1
71303: NEG
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 2
71311: NEG
71312: PUSH
71313: LD_INT 0
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 2
71322: NEG
71323: PUSH
71324: LD_INT 1
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 3
71333: NEG
71334: PUSH
71335: LD_INT 1
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 4
71344: NEG
71345: PUSH
71346: LD_INT 0
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 4
71355: NEG
71356: PUSH
71357: LD_INT 1
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 4
71367: NEG
71368: PUSH
71369: LD_INT 2
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: NEG
71380: PUSH
71381: LD_INT 2
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 4
71390: NEG
71391: PUSH
71392: LD_INT 4
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 4
71402: NEG
71403: PUSH
71404: LD_INT 5
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 3
71414: NEG
71415: PUSH
71416: LD_INT 4
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 3
71426: NEG
71427: PUSH
71428: LD_INT 3
71430: NEG
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: PUSH
71436: LD_INT 4
71438: NEG
71439: PUSH
71440: LD_INT 3
71442: NEG
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 5
71450: NEG
71451: PUSH
71452: LD_INT 4
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 5
71462: NEG
71463: PUSH
71464: LD_INT 5
71466: NEG
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 3
71474: NEG
71475: PUSH
71476: LD_INT 5
71478: NEG
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 5
71486: NEG
71487: PUSH
71488: LD_INT 3
71490: NEG
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 3
71501: NEG
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 0
71509: PUSH
71510: LD_INT 4
71512: NEG
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 1
71520: PUSH
71521: LD_INT 3
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: LD_INT 2
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 0
71542: PUSH
71543: LD_INT 2
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 1
71553: NEG
71554: PUSH
71555: LD_INT 3
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 1
71565: NEG
71566: PUSH
71567: LD_INT 4
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 2
71577: PUSH
71578: LD_INT 2
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 2
71588: NEG
71589: PUSH
71590: LD_INT 4
71592: NEG
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 4
71600: PUSH
71601: LD_INT 0
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 4
71610: PUSH
71611: LD_INT 1
71613: NEG
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 5
71621: PUSH
71622: LD_INT 0
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: PUSH
71629: LD_INT 5
71631: PUSH
71632: LD_INT 1
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 4
71641: PUSH
71642: LD_INT 1
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 3
71651: PUSH
71652: LD_INT 0
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 3
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 3
71672: PUSH
71673: LD_INT 2
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 5
71683: PUSH
71684: LD_INT 2
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71738: LD_ADDR_VAR 0 32
71742: PUSH
71743: LD_INT 4
71745: NEG
71746: PUSH
71747: LD_INT 0
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 4
71756: NEG
71757: PUSH
71758: LD_INT 1
71760: NEG
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 3
71768: NEG
71769: PUSH
71770: LD_INT 0
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 3
71779: NEG
71780: PUSH
71781: LD_INT 1
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 4
71790: NEG
71791: PUSH
71792: LD_INT 1
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 5
71801: NEG
71802: PUSH
71803: LD_INT 0
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 5
71812: NEG
71813: PUSH
71814: LD_INT 1
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 5
71824: NEG
71825: PUSH
71826: LD_INT 2
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 3
71836: NEG
71837: PUSH
71838: LD_INT 2
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 3
71847: NEG
71848: PUSH
71849: LD_INT 3
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 3
71859: NEG
71860: PUSH
71861: LD_INT 4
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: LD_INT 2
71871: NEG
71872: PUSH
71873: LD_INT 3
71875: NEG
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 2
71883: NEG
71884: PUSH
71885: LD_INT 2
71887: NEG
71888: PUSH
71889: EMPTY
71890: LIST
71891: LIST
71892: PUSH
71893: LD_INT 3
71895: NEG
71896: PUSH
71897: LD_INT 2
71899: NEG
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 4
71907: NEG
71908: PUSH
71909: LD_INT 3
71911: NEG
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 4
71919: NEG
71920: PUSH
71921: LD_INT 4
71923: NEG
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 2
71931: NEG
71932: PUSH
71933: LD_INT 4
71935: NEG
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 4
71943: NEG
71944: PUSH
71945: LD_INT 2
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: LD_INT 0
71955: PUSH
71956: LD_INT 4
71958: NEG
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 0
71966: PUSH
71967: LD_INT 5
71969: NEG
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 1
71977: PUSH
71978: LD_INT 4
71980: NEG
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 1
71988: PUSH
71989: LD_INT 3
71991: NEG
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: LD_INT 3
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 1
72010: NEG
72011: PUSH
72012: LD_INT 4
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: NEG
72023: PUSH
72024: LD_INT 5
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 2
72034: PUSH
72035: LD_INT 3
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 2
72045: NEG
72046: PUSH
72047: LD_INT 5
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 3
72057: PUSH
72058: LD_INT 0
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 3
72067: PUSH
72068: LD_INT 1
72070: NEG
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 4
72078: PUSH
72079: LD_INT 0
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 4
72088: PUSH
72089: LD_INT 1
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 3
72098: PUSH
72099: LD_INT 1
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 2
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 2
72118: PUSH
72119: LD_INT 1
72121: NEG
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 2
72129: PUSH
72130: LD_INT 2
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 4
72140: PUSH
72141: LD_INT 2
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 4
72150: PUSH
72151: LD_INT 4
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 4
72160: PUSH
72161: LD_INT 3
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 5
72170: PUSH
72171: LD_INT 4
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 5
72180: PUSH
72181: LD_INT 5
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 4
72190: PUSH
72191: LD_INT 5
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 3
72200: PUSH
72201: LD_INT 4
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: LD_INT 3
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 5
72220: PUSH
72221: LD_INT 3
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 3
72230: PUSH
72231: LD_INT 5
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
72285: LD_ADDR_VAR 0 33
72289: PUSH
72290: LD_INT 4
72292: NEG
72293: PUSH
72294: LD_INT 4
72296: NEG
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 4
72304: NEG
72305: PUSH
72306: LD_INT 5
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 3
72316: NEG
72317: PUSH
72318: LD_INT 4
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 3
72328: NEG
72329: PUSH
72330: LD_INT 3
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 4
72340: NEG
72341: PUSH
72342: LD_INT 3
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 5
72352: NEG
72353: PUSH
72354: LD_INT 4
72356: NEG
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 5
72364: NEG
72365: PUSH
72366: LD_INT 5
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 3
72376: NEG
72377: PUSH
72378: LD_INT 5
72380: NEG
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 5
72388: NEG
72389: PUSH
72390: LD_INT 3
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 0
72400: PUSH
72401: LD_INT 3
72403: NEG
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: LD_INT 4
72414: NEG
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 1
72422: PUSH
72423: LD_INT 3
72425: NEG
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 1
72433: PUSH
72434: LD_INT 2
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: LD_INT 2
72447: NEG
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 1
72455: NEG
72456: PUSH
72457: LD_INT 3
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 1
72467: NEG
72468: PUSH
72469: LD_INT 4
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 2
72479: PUSH
72480: LD_INT 2
72482: NEG
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 2
72490: NEG
72491: PUSH
72492: LD_INT 4
72494: NEG
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 4
72502: PUSH
72503: LD_INT 0
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 4
72512: PUSH
72513: LD_INT 1
72515: NEG
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 5
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 5
72533: PUSH
72534: LD_INT 1
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 4
72543: PUSH
72544: LD_INT 1
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 3
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PUSH
72572: LD_INT 3
72574: PUSH
72575: LD_INT 2
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 5
72585: PUSH
72586: LD_INT 2
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 3
72595: PUSH
72596: LD_INT 3
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 3
72605: PUSH
72606: LD_INT 2
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 4
72615: PUSH
72616: LD_INT 3
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 4
72625: PUSH
72626: LD_INT 4
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 3
72635: PUSH
72636: LD_INT 4
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 2
72645: PUSH
72646: LD_INT 3
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 2
72655: PUSH
72656: LD_INT 2
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: LD_INT 4
72665: PUSH
72666: LD_INT 2
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 2
72675: PUSH
72676: LD_INT 4
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 0
72685: PUSH
72686: LD_INT 4
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: LD_INT 3
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: LD_INT 4
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 1
72715: PUSH
72716: LD_INT 5
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 5
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 1
72735: NEG
72736: PUSH
72737: LD_INT 4
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 1
72746: NEG
72747: PUSH
72748: LD_INT 3
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 2
72757: PUSH
72758: LD_INT 5
72760: PUSH
72761: EMPTY
72762: LIST
72763: LIST
72764: PUSH
72765: LD_INT 2
72767: NEG
72768: PUSH
72769: LD_INT 3
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72823: LD_ADDR_VAR 0 34
72827: PUSH
72828: LD_INT 0
72830: PUSH
72831: LD_INT 4
72833: NEG
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 0
72841: PUSH
72842: LD_INT 5
72844: NEG
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 1
72852: PUSH
72853: LD_INT 4
72855: NEG
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 1
72863: PUSH
72864: LD_INT 3
72866: NEG
72867: PUSH
72868: EMPTY
72869: LIST
72870: LIST
72871: PUSH
72872: LD_INT 0
72874: PUSH
72875: LD_INT 3
72877: NEG
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 1
72885: NEG
72886: PUSH
72887: LD_INT 4
72889: NEG
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 1
72897: NEG
72898: PUSH
72899: LD_INT 5
72901: NEG
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: LD_INT 2
72909: PUSH
72910: LD_INT 3
72912: NEG
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 2
72920: NEG
72921: PUSH
72922: LD_INT 5
72924: NEG
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: PUSH
72930: LD_INT 3
72932: PUSH
72933: LD_INT 0
72935: PUSH
72936: EMPTY
72937: LIST
72938: LIST
72939: PUSH
72940: LD_INT 3
72942: PUSH
72943: LD_INT 1
72945: NEG
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: LD_INT 4
72953: PUSH
72954: LD_INT 0
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 4
72963: PUSH
72964: LD_INT 1
72966: PUSH
72967: EMPTY
72968: LIST
72969: LIST
72970: PUSH
72971: LD_INT 3
72973: PUSH
72974: LD_INT 1
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 2
72983: PUSH
72984: LD_INT 0
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: LD_INT 1
72996: NEG
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 2
73004: PUSH
73005: LD_INT 2
73007: NEG
73008: PUSH
73009: EMPTY
73010: LIST
73011: LIST
73012: PUSH
73013: LD_INT 4
73015: PUSH
73016: LD_INT 2
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 4
73025: PUSH
73026: LD_INT 4
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 4
73035: PUSH
73036: LD_INT 3
73038: PUSH
73039: EMPTY
73040: LIST
73041: LIST
73042: PUSH
73043: LD_INT 5
73045: PUSH
73046: LD_INT 4
73048: PUSH
73049: EMPTY
73050: LIST
73051: LIST
73052: PUSH
73053: LD_INT 5
73055: PUSH
73056: LD_INT 5
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 4
73065: PUSH
73066: LD_INT 5
73068: PUSH
73069: EMPTY
73070: LIST
73071: LIST
73072: PUSH
73073: LD_INT 3
73075: PUSH
73076: LD_INT 4
73078: PUSH
73079: EMPTY
73080: LIST
73081: LIST
73082: PUSH
73083: LD_INT 3
73085: PUSH
73086: LD_INT 3
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 5
73095: PUSH
73096: LD_INT 3
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 3
73105: PUSH
73106: LD_INT 5
73108: PUSH
73109: EMPTY
73110: LIST
73111: LIST
73112: PUSH
73113: LD_INT 0
73115: PUSH
73116: LD_INT 3
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: LD_INT 2
73128: PUSH
73129: EMPTY
73130: LIST
73131: LIST
73132: PUSH
73133: LD_INT 1
73135: PUSH
73136: LD_INT 3
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 1
73145: PUSH
73146: LD_INT 4
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 0
73155: PUSH
73156: LD_INT 4
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: LD_INT 1
73165: NEG
73166: PUSH
73167: LD_INT 3
73169: PUSH
73170: EMPTY
73171: LIST
73172: LIST
73173: PUSH
73174: LD_INT 1
73176: NEG
73177: PUSH
73178: LD_INT 2
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 2
73187: PUSH
73188: LD_INT 4
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: LD_INT 2
73197: NEG
73198: PUSH
73199: LD_INT 2
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_INT 4
73208: NEG
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: EMPTY
73214: LIST
73215: LIST
73216: PUSH
73217: LD_INT 4
73219: NEG
73220: PUSH
73221: LD_INT 1
73223: NEG
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 3
73231: NEG
73232: PUSH
73233: LD_INT 0
73235: PUSH
73236: EMPTY
73237: LIST
73238: LIST
73239: PUSH
73240: LD_INT 3
73242: NEG
73243: PUSH
73244: LD_INT 1
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 4
73253: NEG
73254: PUSH
73255: LD_INT 1
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 5
73264: NEG
73265: PUSH
73266: LD_INT 0
73268: PUSH
73269: EMPTY
73270: LIST
73271: LIST
73272: PUSH
73273: LD_INT 5
73275: NEG
73276: PUSH
73277: LD_INT 1
73279: NEG
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: LD_INT 5
73287: NEG
73288: PUSH
73289: LD_INT 2
73291: NEG
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 3
73299: NEG
73300: PUSH
73301: LD_INT 2
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: LIST
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: ST_TO_ADDR
// end ; end ;
73355: GO 73358
73357: POP
// case btype of b_depot , b_warehouse :
73358: LD_VAR 0 1
73362: PUSH
73363: LD_INT 0
73365: DOUBLE
73366: EQUAL
73367: IFTRUE 73377
73369: LD_INT 1
73371: DOUBLE
73372: EQUAL
73373: IFTRUE 73377
73375: GO 73578
73377: POP
// case nation of nation_american :
73378: LD_VAR 0 5
73382: PUSH
73383: LD_INT 1
73385: DOUBLE
73386: EQUAL
73387: IFTRUE 73391
73389: GO 73447
73391: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
73392: LD_ADDR_VAR 0 9
73396: PUSH
73397: LD_VAR 0 11
73401: PUSH
73402: LD_VAR 0 12
73406: PUSH
73407: LD_VAR 0 13
73411: PUSH
73412: LD_VAR 0 14
73416: PUSH
73417: LD_VAR 0 15
73421: PUSH
73422: LD_VAR 0 16
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: LIST
73431: LIST
73432: LIST
73433: LIST
73434: PUSH
73435: LD_VAR 0 4
73439: PUSH
73440: LD_INT 1
73442: PLUS
73443: ARRAY
73444: ST_TO_ADDR
73445: GO 73576
73447: LD_INT 2
73449: DOUBLE
73450: EQUAL
73451: IFTRUE 73455
73453: GO 73511
73455: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
73456: LD_ADDR_VAR 0 9
73460: PUSH
73461: LD_VAR 0 17
73465: PUSH
73466: LD_VAR 0 18
73470: PUSH
73471: LD_VAR 0 19
73475: PUSH
73476: LD_VAR 0 20
73480: PUSH
73481: LD_VAR 0 21
73485: PUSH
73486: LD_VAR 0 22
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: PUSH
73499: LD_VAR 0 4
73503: PUSH
73504: LD_INT 1
73506: PLUS
73507: ARRAY
73508: ST_TO_ADDR
73509: GO 73576
73511: LD_INT 3
73513: DOUBLE
73514: EQUAL
73515: IFTRUE 73519
73517: GO 73575
73519: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
73520: LD_ADDR_VAR 0 9
73524: PUSH
73525: LD_VAR 0 23
73529: PUSH
73530: LD_VAR 0 24
73534: PUSH
73535: LD_VAR 0 25
73539: PUSH
73540: LD_VAR 0 26
73544: PUSH
73545: LD_VAR 0 27
73549: PUSH
73550: LD_VAR 0 28
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: PUSH
73563: LD_VAR 0 4
73567: PUSH
73568: LD_INT 1
73570: PLUS
73571: ARRAY
73572: ST_TO_ADDR
73573: GO 73576
73575: POP
73576: GO 74131
73578: LD_INT 2
73580: DOUBLE
73581: EQUAL
73582: IFTRUE 73592
73584: LD_INT 3
73586: DOUBLE
73587: EQUAL
73588: IFTRUE 73592
73590: GO 73648
73592: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73593: LD_ADDR_VAR 0 9
73597: PUSH
73598: LD_VAR 0 29
73602: PUSH
73603: LD_VAR 0 30
73607: PUSH
73608: LD_VAR 0 31
73612: PUSH
73613: LD_VAR 0 32
73617: PUSH
73618: LD_VAR 0 33
73622: PUSH
73623: LD_VAR 0 34
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: PUSH
73636: LD_VAR 0 4
73640: PUSH
73641: LD_INT 1
73643: PLUS
73644: ARRAY
73645: ST_TO_ADDR
73646: GO 74131
73648: LD_INT 16
73650: DOUBLE
73651: EQUAL
73652: IFTRUE 73710
73654: LD_INT 17
73656: DOUBLE
73657: EQUAL
73658: IFTRUE 73710
73660: LD_INT 18
73662: DOUBLE
73663: EQUAL
73664: IFTRUE 73710
73666: LD_INT 19
73668: DOUBLE
73669: EQUAL
73670: IFTRUE 73710
73672: LD_INT 22
73674: DOUBLE
73675: EQUAL
73676: IFTRUE 73710
73678: LD_INT 20
73680: DOUBLE
73681: EQUAL
73682: IFTRUE 73710
73684: LD_INT 21
73686: DOUBLE
73687: EQUAL
73688: IFTRUE 73710
73690: LD_INT 23
73692: DOUBLE
73693: EQUAL
73694: IFTRUE 73710
73696: LD_INT 24
73698: DOUBLE
73699: EQUAL
73700: IFTRUE 73710
73702: LD_INT 25
73704: DOUBLE
73705: EQUAL
73706: IFTRUE 73710
73708: GO 73766
73710: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73711: LD_ADDR_VAR 0 9
73715: PUSH
73716: LD_VAR 0 35
73720: PUSH
73721: LD_VAR 0 36
73725: PUSH
73726: LD_VAR 0 37
73730: PUSH
73731: LD_VAR 0 38
73735: PUSH
73736: LD_VAR 0 39
73740: PUSH
73741: LD_VAR 0 40
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: PUSH
73754: LD_VAR 0 4
73758: PUSH
73759: LD_INT 1
73761: PLUS
73762: ARRAY
73763: ST_TO_ADDR
73764: GO 74131
73766: LD_INT 6
73768: DOUBLE
73769: EQUAL
73770: IFTRUE 73822
73772: LD_INT 7
73774: DOUBLE
73775: EQUAL
73776: IFTRUE 73822
73778: LD_INT 8
73780: DOUBLE
73781: EQUAL
73782: IFTRUE 73822
73784: LD_INT 13
73786: DOUBLE
73787: EQUAL
73788: IFTRUE 73822
73790: LD_INT 12
73792: DOUBLE
73793: EQUAL
73794: IFTRUE 73822
73796: LD_INT 15
73798: DOUBLE
73799: EQUAL
73800: IFTRUE 73822
73802: LD_INT 11
73804: DOUBLE
73805: EQUAL
73806: IFTRUE 73822
73808: LD_INT 14
73810: DOUBLE
73811: EQUAL
73812: IFTRUE 73822
73814: LD_INT 10
73816: DOUBLE
73817: EQUAL
73818: IFTRUE 73822
73820: GO 73878
73822: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73823: LD_ADDR_VAR 0 9
73827: PUSH
73828: LD_VAR 0 41
73832: PUSH
73833: LD_VAR 0 42
73837: PUSH
73838: LD_VAR 0 43
73842: PUSH
73843: LD_VAR 0 44
73847: PUSH
73848: LD_VAR 0 45
73852: PUSH
73853: LD_VAR 0 46
73857: PUSH
73858: EMPTY
73859: LIST
73860: LIST
73861: LIST
73862: LIST
73863: LIST
73864: LIST
73865: PUSH
73866: LD_VAR 0 4
73870: PUSH
73871: LD_INT 1
73873: PLUS
73874: ARRAY
73875: ST_TO_ADDR
73876: GO 74131
73878: LD_INT 36
73880: DOUBLE
73881: EQUAL
73882: IFTRUE 73886
73884: GO 73942
73886: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73887: LD_ADDR_VAR 0 9
73891: PUSH
73892: LD_VAR 0 47
73896: PUSH
73897: LD_VAR 0 48
73901: PUSH
73902: LD_VAR 0 49
73906: PUSH
73907: LD_VAR 0 50
73911: PUSH
73912: LD_VAR 0 51
73916: PUSH
73917: LD_VAR 0 52
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: LIST
73928: LIST
73929: PUSH
73930: LD_VAR 0 4
73934: PUSH
73935: LD_INT 1
73937: PLUS
73938: ARRAY
73939: ST_TO_ADDR
73940: GO 74131
73942: LD_INT 4
73944: DOUBLE
73945: EQUAL
73946: IFTRUE 73968
73948: LD_INT 5
73950: DOUBLE
73951: EQUAL
73952: IFTRUE 73968
73954: LD_INT 34
73956: DOUBLE
73957: EQUAL
73958: IFTRUE 73968
73960: LD_INT 37
73962: DOUBLE
73963: EQUAL
73964: IFTRUE 73968
73966: GO 74024
73968: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73969: LD_ADDR_VAR 0 9
73973: PUSH
73974: LD_VAR 0 53
73978: PUSH
73979: LD_VAR 0 54
73983: PUSH
73984: LD_VAR 0 55
73988: PUSH
73989: LD_VAR 0 56
73993: PUSH
73994: LD_VAR 0 57
73998: PUSH
73999: LD_VAR 0 58
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: PUSH
74012: LD_VAR 0 4
74016: PUSH
74017: LD_INT 1
74019: PLUS
74020: ARRAY
74021: ST_TO_ADDR
74022: GO 74131
74024: LD_INT 31
74026: DOUBLE
74027: EQUAL
74028: IFTRUE 74074
74030: LD_INT 32
74032: DOUBLE
74033: EQUAL
74034: IFTRUE 74074
74036: LD_INT 33
74038: DOUBLE
74039: EQUAL
74040: IFTRUE 74074
74042: LD_INT 27
74044: DOUBLE
74045: EQUAL
74046: IFTRUE 74074
74048: LD_INT 26
74050: DOUBLE
74051: EQUAL
74052: IFTRUE 74074
74054: LD_INT 28
74056: DOUBLE
74057: EQUAL
74058: IFTRUE 74074
74060: LD_INT 29
74062: DOUBLE
74063: EQUAL
74064: IFTRUE 74074
74066: LD_INT 30
74068: DOUBLE
74069: EQUAL
74070: IFTRUE 74074
74072: GO 74130
74074: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
74075: LD_ADDR_VAR 0 9
74079: PUSH
74080: LD_VAR 0 59
74084: PUSH
74085: LD_VAR 0 60
74089: PUSH
74090: LD_VAR 0 61
74094: PUSH
74095: LD_VAR 0 62
74099: PUSH
74100: LD_VAR 0 63
74104: PUSH
74105: LD_VAR 0 64
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: PUSH
74118: LD_VAR 0 4
74122: PUSH
74123: LD_INT 1
74125: PLUS
74126: ARRAY
74127: ST_TO_ADDR
74128: GO 74131
74130: POP
// temp_list2 = [ ] ;
74131: LD_ADDR_VAR 0 10
74135: PUSH
74136: EMPTY
74137: ST_TO_ADDR
// for i in temp_list do
74138: LD_ADDR_VAR 0 8
74142: PUSH
74143: LD_VAR 0 9
74147: PUSH
74148: FOR_IN
74149: IFFALSE 74201
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
74151: LD_ADDR_VAR 0 10
74155: PUSH
74156: LD_VAR 0 10
74160: PUSH
74161: LD_VAR 0 8
74165: PUSH
74166: LD_INT 1
74168: ARRAY
74169: PUSH
74170: LD_VAR 0 2
74174: PLUS
74175: PUSH
74176: LD_VAR 0 8
74180: PUSH
74181: LD_INT 2
74183: ARRAY
74184: PUSH
74185: LD_VAR 0 3
74189: PLUS
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: EMPTY
74196: LIST
74197: ADD
74198: ST_TO_ADDR
74199: GO 74148
74201: POP
74202: POP
// result = temp_list2 ;
74203: LD_ADDR_VAR 0 7
74207: PUSH
74208: LD_VAR 0 10
74212: ST_TO_ADDR
// end ;
74213: LD_VAR 0 7
74217: RET
// export function EnemyInRange ( unit , dist ) ; begin
74218: LD_INT 0
74220: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
74221: LD_ADDR_VAR 0 3
74225: PUSH
74226: LD_VAR 0 1
74230: PPUSH
74231: CALL_OW 255
74235: PPUSH
74236: LD_VAR 0 1
74240: PPUSH
74241: CALL_OW 250
74245: PPUSH
74246: LD_VAR 0 1
74250: PPUSH
74251: CALL_OW 251
74255: PPUSH
74256: LD_VAR 0 2
74260: PPUSH
74261: CALL 47614 0 4
74265: PUSH
74266: LD_INT 4
74268: ARRAY
74269: ST_TO_ADDR
// end ;
74270: LD_VAR 0 3
74274: RET
// export function PlayerSeeMe ( unit ) ; begin
74275: LD_INT 0
74277: PPUSH
// result := See ( your_side , unit ) ;
74278: LD_ADDR_VAR 0 2
74282: PUSH
74283: LD_OWVAR 2
74287: PPUSH
74288: LD_VAR 0 1
74292: PPUSH
74293: CALL_OW 292
74297: ST_TO_ADDR
// end ;
74298: LD_VAR 0 2
74302: RET
// export function ReverseDir ( unit ) ; begin
74303: LD_INT 0
74305: PPUSH
// if not unit then
74306: LD_VAR 0 1
74310: NOT
74311: IFFALSE 74315
// exit ;
74313: GO 74338
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
74315: LD_ADDR_VAR 0 2
74319: PUSH
74320: LD_VAR 0 1
74324: PPUSH
74325: CALL_OW 254
74329: PUSH
74330: LD_INT 3
74332: PLUS
74333: PUSH
74334: LD_INT 6
74336: MOD
74337: ST_TO_ADDR
// end ;
74338: LD_VAR 0 2
74342: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
74343: LD_INT 0
74345: PPUSH
74346: PPUSH
74347: PPUSH
74348: PPUSH
74349: PPUSH
// if not hexes then
74350: LD_VAR 0 2
74354: NOT
74355: IFFALSE 74359
// exit ;
74357: GO 74507
// dist := 9999 ;
74359: LD_ADDR_VAR 0 5
74363: PUSH
74364: LD_INT 9999
74366: ST_TO_ADDR
// for i = 1 to hexes do
74367: LD_ADDR_VAR 0 4
74371: PUSH
74372: DOUBLE
74373: LD_INT 1
74375: DEC
74376: ST_TO_ADDR
74377: LD_VAR 0 2
74381: PUSH
74382: FOR_TO
74383: IFFALSE 74495
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
74385: LD_VAR 0 1
74389: PPUSH
74390: LD_VAR 0 2
74394: PUSH
74395: LD_VAR 0 4
74399: ARRAY
74400: PUSH
74401: LD_INT 1
74403: ARRAY
74404: PPUSH
74405: LD_VAR 0 2
74409: PUSH
74410: LD_VAR 0 4
74414: ARRAY
74415: PUSH
74416: LD_INT 2
74418: ARRAY
74419: PPUSH
74420: CALL_OW 297
74424: PUSH
74425: LD_VAR 0 5
74429: LESS
74430: IFFALSE 74493
// begin hex := hexes [ i ] ;
74432: LD_ADDR_VAR 0 7
74436: PUSH
74437: LD_VAR 0 2
74441: PUSH
74442: LD_VAR 0 4
74446: ARRAY
74447: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
74448: LD_ADDR_VAR 0 5
74452: PUSH
74453: LD_VAR 0 1
74457: PPUSH
74458: LD_VAR 0 2
74462: PUSH
74463: LD_VAR 0 4
74467: ARRAY
74468: PUSH
74469: LD_INT 1
74471: ARRAY
74472: PPUSH
74473: LD_VAR 0 2
74477: PUSH
74478: LD_VAR 0 4
74482: ARRAY
74483: PUSH
74484: LD_INT 2
74486: ARRAY
74487: PPUSH
74488: CALL_OW 297
74492: ST_TO_ADDR
// end ; end ;
74493: GO 74382
74495: POP
74496: POP
// result := hex ;
74497: LD_ADDR_VAR 0 3
74501: PUSH
74502: LD_VAR 0 7
74506: ST_TO_ADDR
// end ;
74507: LD_VAR 0 3
74511: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74512: LD_INT 0
74514: PPUSH
74515: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74516: LD_VAR 0 1
74520: NOT
74521: PUSH
74522: LD_VAR 0 1
74526: PUSH
74527: LD_INT 21
74529: PUSH
74530: LD_INT 2
74532: PUSH
74533: EMPTY
74534: LIST
74535: LIST
74536: PUSH
74537: LD_INT 23
74539: PUSH
74540: LD_INT 2
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PPUSH
74551: CALL_OW 69
74555: IN
74556: NOT
74557: OR
74558: IFFALSE 74562
// exit ;
74560: GO 74609
// for i = 1 to 3 do
74562: LD_ADDR_VAR 0 3
74566: PUSH
74567: DOUBLE
74568: LD_INT 1
74570: DEC
74571: ST_TO_ADDR
74572: LD_INT 3
74574: PUSH
74575: FOR_TO
74576: IFFALSE 74607
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74578: LD_VAR 0 1
74582: PPUSH
74583: CALL_OW 250
74587: PPUSH
74588: LD_VAR 0 1
74592: PPUSH
74593: CALL_OW 251
74597: PPUSH
74598: LD_INT 1
74600: PPUSH
74601: CALL_OW 453
74605: GO 74575
74607: POP
74608: POP
// end ;
74609: LD_VAR 0 2
74613: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74614: LD_INT 0
74616: PPUSH
74617: PPUSH
74618: PPUSH
74619: PPUSH
74620: PPUSH
74621: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
74622: LD_VAR 0 1
74626: NOT
74627: PUSH
74628: LD_VAR 0 2
74632: NOT
74633: OR
74634: PUSH
74635: LD_VAR 0 1
74639: PPUSH
74640: CALL_OW 314
74644: OR
74645: IFFALSE 74649
// exit ;
74647: GO 75090
// x := GetX ( enemy_unit ) ;
74649: LD_ADDR_VAR 0 7
74653: PUSH
74654: LD_VAR 0 2
74658: PPUSH
74659: CALL_OW 250
74663: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74664: LD_ADDR_VAR 0 8
74668: PUSH
74669: LD_VAR 0 2
74673: PPUSH
74674: CALL_OW 251
74678: ST_TO_ADDR
// if not x or not y then
74679: LD_VAR 0 7
74683: NOT
74684: PUSH
74685: LD_VAR 0 8
74689: NOT
74690: OR
74691: IFFALSE 74695
// exit ;
74693: GO 75090
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74695: LD_ADDR_VAR 0 6
74699: PUSH
74700: LD_VAR 0 7
74704: PPUSH
74705: LD_INT 0
74707: PPUSH
74708: LD_INT 4
74710: PPUSH
74711: CALL_OW 272
74715: PUSH
74716: LD_VAR 0 8
74720: PPUSH
74721: LD_INT 0
74723: PPUSH
74724: LD_INT 4
74726: PPUSH
74727: CALL_OW 273
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_VAR 0 7
74740: PPUSH
74741: LD_INT 1
74743: PPUSH
74744: LD_INT 4
74746: PPUSH
74747: CALL_OW 272
74751: PUSH
74752: LD_VAR 0 8
74756: PPUSH
74757: LD_INT 1
74759: PPUSH
74760: LD_INT 4
74762: PPUSH
74763: CALL_OW 273
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: PUSH
74772: LD_VAR 0 7
74776: PPUSH
74777: LD_INT 2
74779: PPUSH
74780: LD_INT 4
74782: PPUSH
74783: CALL_OW 272
74787: PUSH
74788: LD_VAR 0 8
74792: PPUSH
74793: LD_INT 2
74795: PPUSH
74796: LD_INT 4
74798: PPUSH
74799: CALL_OW 273
74803: PUSH
74804: EMPTY
74805: LIST
74806: LIST
74807: PUSH
74808: LD_VAR 0 7
74812: PPUSH
74813: LD_INT 3
74815: PPUSH
74816: LD_INT 4
74818: PPUSH
74819: CALL_OW 272
74823: PUSH
74824: LD_VAR 0 8
74828: PPUSH
74829: LD_INT 3
74831: PPUSH
74832: LD_INT 4
74834: PPUSH
74835: CALL_OW 273
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: LD_VAR 0 7
74848: PPUSH
74849: LD_INT 4
74851: PPUSH
74852: LD_INT 4
74854: PPUSH
74855: CALL_OW 272
74859: PUSH
74860: LD_VAR 0 8
74864: PPUSH
74865: LD_INT 4
74867: PPUSH
74868: LD_INT 4
74870: PPUSH
74871: CALL_OW 273
74875: PUSH
74876: EMPTY
74877: LIST
74878: LIST
74879: PUSH
74880: LD_VAR 0 7
74884: PPUSH
74885: LD_INT 5
74887: PPUSH
74888: LD_INT 4
74890: PPUSH
74891: CALL_OW 272
74895: PUSH
74896: LD_VAR 0 8
74900: PPUSH
74901: LD_INT 5
74903: PPUSH
74904: LD_INT 4
74906: PPUSH
74907: CALL_OW 273
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: LIST
74920: LIST
74921: LIST
74922: LIST
74923: ST_TO_ADDR
// for i = tmp downto 1 do
74924: LD_ADDR_VAR 0 4
74928: PUSH
74929: DOUBLE
74930: LD_VAR 0 6
74934: INC
74935: ST_TO_ADDR
74936: LD_INT 1
74938: PUSH
74939: FOR_DOWNTO
74940: IFFALSE 75041
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74942: LD_VAR 0 6
74946: PUSH
74947: LD_VAR 0 4
74951: ARRAY
74952: PUSH
74953: LD_INT 1
74955: ARRAY
74956: PPUSH
74957: LD_VAR 0 6
74961: PUSH
74962: LD_VAR 0 4
74966: ARRAY
74967: PUSH
74968: LD_INT 2
74970: ARRAY
74971: PPUSH
74972: CALL_OW 488
74976: NOT
74977: PUSH
74978: LD_VAR 0 6
74982: PUSH
74983: LD_VAR 0 4
74987: ARRAY
74988: PUSH
74989: LD_INT 1
74991: ARRAY
74992: PPUSH
74993: LD_VAR 0 6
74997: PUSH
74998: LD_VAR 0 4
75002: ARRAY
75003: PUSH
75004: LD_INT 2
75006: ARRAY
75007: PPUSH
75008: CALL_OW 428
75012: PUSH
75013: LD_INT 0
75015: NONEQUAL
75016: OR
75017: IFFALSE 75039
// tmp := Delete ( tmp , i ) ;
75019: LD_ADDR_VAR 0 6
75023: PUSH
75024: LD_VAR 0 6
75028: PPUSH
75029: LD_VAR 0 4
75033: PPUSH
75034: CALL_OW 3
75038: ST_TO_ADDR
75039: GO 74939
75041: POP
75042: POP
// j := GetClosestHex ( unit , tmp ) ;
75043: LD_ADDR_VAR 0 5
75047: PUSH
75048: LD_VAR 0 1
75052: PPUSH
75053: LD_VAR 0 6
75057: PPUSH
75058: CALL 74343 0 2
75062: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
75063: LD_VAR 0 1
75067: PPUSH
75068: LD_VAR 0 5
75072: PUSH
75073: LD_INT 1
75075: ARRAY
75076: PPUSH
75077: LD_VAR 0 5
75081: PUSH
75082: LD_INT 2
75084: ARRAY
75085: PPUSH
75086: CALL_OW 111
// end ;
75090: LD_VAR 0 3
75094: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75095: LD_INT 0
75097: PPUSH
75098: PPUSH
75099: PPUSH
// uc_side = 0 ;
75100: LD_ADDR_OWVAR 20
75104: PUSH
75105: LD_INT 0
75107: ST_TO_ADDR
// uc_nation = 0 ;
75108: LD_ADDR_OWVAR 21
75112: PUSH
75113: LD_INT 0
75115: ST_TO_ADDR
// InitHc_All ( ) ;
75116: CALL_OW 584
// InitVc ;
75120: CALL_OW 20
// if mastodonts then
75124: LD_VAR 0 6
75128: IFFALSE 75195
// for i = 1 to mastodonts do
75130: LD_ADDR_VAR 0 11
75134: PUSH
75135: DOUBLE
75136: LD_INT 1
75138: DEC
75139: ST_TO_ADDR
75140: LD_VAR 0 6
75144: PUSH
75145: FOR_TO
75146: IFFALSE 75193
// begin vc_chassis := 31 ;
75148: LD_ADDR_OWVAR 37
75152: PUSH
75153: LD_INT 31
75155: ST_TO_ADDR
// vc_control := control_rider ;
75156: LD_ADDR_OWVAR 38
75160: PUSH
75161: LD_INT 4
75163: ST_TO_ADDR
// animal := CreateVehicle ;
75164: LD_ADDR_VAR 0 12
75168: PUSH
75169: CALL_OW 45
75173: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75174: LD_VAR 0 12
75178: PPUSH
75179: LD_VAR 0 8
75183: PPUSH
75184: LD_INT 0
75186: PPUSH
75187: CALL 77383 0 3
// end ;
75191: GO 75145
75193: POP
75194: POP
// if horses then
75195: LD_VAR 0 5
75199: IFFALSE 75266
// for i = 1 to horses do
75201: LD_ADDR_VAR 0 11
75205: PUSH
75206: DOUBLE
75207: LD_INT 1
75209: DEC
75210: ST_TO_ADDR
75211: LD_VAR 0 5
75215: PUSH
75216: FOR_TO
75217: IFFALSE 75264
// begin hc_class := 21 ;
75219: LD_ADDR_OWVAR 28
75223: PUSH
75224: LD_INT 21
75226: ST_TO_ADDR
// hc_gallery :=  ;
75227: LD_ADDR_OWVAR 33
75231: PUSH
75232: LD_STRING 
75234: ST_TO_ADDR
// animal := CreateHuman ;
75235: LD_ADDR_VAR 0 12
75239: PUSH
75240: CALL_OW 44
75244: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75245: LD_VAR 0 12
75249: PPUSH
75250: LD_VAR 0 8
75254: PPUSH
75255: LD_INT 0
75257: PPUSH
75258: CALL 77383 0 3
// end ;
75262: GO 75216
75264: POP
75265: POP
// if birds then
75266: LD_VAR 0 1
75270: IFFALSE 75337
// for i = 1 to birds do
75272: LD_ADDR_VAR 0 11
75276: PUSH
75277: DOUBLE
75278: LD_INT 1
75280: DEC
75281: ST_TO_ADDR
75282: LD_VAR 0 1
75286: PUSH
75287: FOR_TO
75288: IFFALSE 75335
// begin hc_class = 18 ;
75290: LD_ADDR_OWVAR 28
75294: PUSH
75295: LD_INT 18
75297: ST_TO_ADDR
// hc_gallery =  ;
75298: LD_ADDR_OWVAR 33
75302: PUSH
75303: LD_STRING 
75305: ST_TO_ADDR
// animal := CreateHuman ;
75306: LD_ADDR_VAR 0 12
75310: PUSH
75311: CALL_OW 44
75315: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75316: LD_VAR 0 12
75320: PPUSH
75321: LD_VAR 0 8
75325: PPUSH
75326: LD_INT 0
75328: PPUSH
75329: CALL 77383 0 3
// end ;
75333: GO 75287
75335: POP
75336: POP
// if tigers then
75337: LD_VAR 0 2
75341: IFFALSE 75425
// for i = 1 to tigers do
75343: LD_ADDR_VAR 0 11
75347: PUSH
75348: DOUBLE
75349: LD_INT 1
75351: DEC
75352: ST_TO_ADDR
75353: LD_VAR 0 2
75357: PUSH
75358: FOR_TO
75359: IFFALSE 75423
// begin hc_class = class_tiger ;
75361: LD_ADDR_OWVAR 28
75365: PUSH
75366: LD_INT 14
75368: ST_TO_ADDR
// hc_gallery =  ;
75369: LD_ADDR_OWVAR 33
75373: PUSH
75374: LD_STRING 
75376: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75377: LD_ADDR_OWVAR 35
75381: PUSH
75382: LD_INT 7
75384: NEG
75385: PPUSH
75386: LD_INT 7
75388: PPUSH
75389: CALL_OW 12
75393: ST_TO_ADDR
// animal := CreateHuman ;
75394: LD_ADDR_VAR 0 12
75398: PUSH
75399: CALL_OW 44
75403: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75404: LD_VAR 0 12
75408: PPUSH
75409: LD_VAR 0 8
75413: PPUSH
75414: LD_INT 0
75416: PPUSH
75417: CALL 77383 0 3
// end ;
75421: GO 75358
75423: POP
75424: POP
// if apemans then
75425: LD_VAR 0 3
75429: IFFALSE 75552
// for i = 1 to apemans do
75431: LD_ADDR_VAR 0 11
75435: PUSH
75436: DOUBLE
75437: LD_INT 1
75439: DEC
75440: ST_TO_ADDR
75441: LD_VAR 0 3
75445: PUSH
75446: FOR_TO
75447: IFFALSE 75550
// begin hc_class = class_apeman ;
75449: LD_ADDR_OWVAR 28
75453: PUSH
75454: LD_INT 12
75456: ST_TO_ADDR
// hc_gallery =  ;
75457: LD_ADDR_OWVAR 33
75461: PUSH
75462: LD_STRING 
75464: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75465: LD_ADDR_OWVAR 35
75469: PUSH
75470: LD_INT 2
75472: NEG
75473: PPUSH
75474: LD_INT 2
75476: PPUSH
75477: CALL_OW 12
75481: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75482: LD_ADDR_OWVAR 31
75486: PUSH
75487: LD_INT 1
75489: PPUSH
75490: LD_INT 3
75492: PPUSH
75493: CALL_OW 12
75497: PUSH
75498: LD_INT 1
75500: PPUSH
75501: LD_INT 3
75503: PPUSH
75504: CALL_OW 12
75508: PUSH
75509: LD_INT 0
75511: PUSH
75512: LD_INT 0
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: LIST
75519: LIST
75520: ST_TO_ADDR
// animal := CreateHuman ;
75521: LD_ADDR_VAR 0 12
75525: PUSH
75526: CALL_OW 44
75530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75531: LD_VAR 0 12
75535: PPUSH
75536: LD_VAR 0 8
75540: PPUSH
75541: LD_INT 0
75543: PPUSH
75544: CALL 77383 0 3
// end ;
75548: GO 75446
75550: POP
75551: POP
// if enchidnas then
75552: LD_VAR 0 4
75556: IFFALSE 75623
// for i = 1 to enchidnas do
75558: LD_ADDR_VAR 0 11
75562: PUSH
75563: DOUBLE
75564: LD_INT 1
75566: DEC
75567: ST_TO_ADDR
75568: LD_VAR 0 4
75572: PUSH
75573: FOR_TO
75574: IFFALSE 75621
// begin hc_class = 13 ;
75576: LD_ADDR_OWVAR 28
75580: PUSH
75581: LD_INT 13
75583: ST_TO_ADDR
// hc_gallery =  ;
75584: LD_ADDR_OWVAR 33
75588: PUSH
75589: LD_STRING 
75591: ST_TO_ADDR
// animal := CreateHuman ;
75592: LD_ADDR_VAR 0 12
75596: PUSH
75597: CALL_OW 44
75601: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75602: LD_VAR 0 12
75606: PPUSH
75607: LD_VAR 0 8
75611: PPUSH
75612: LD_INT 0
75614: PPUSH
75615: CALL 77383 0 3
// end ;
75619: GO 75573
75621: POP
75622: POP
// if fishes then
75623: LD_VAR 0 7
75627: IFFALSE 75694
// for i = 1 to fishes do
75629: LD_ADDR_VAR 0 11
75633: PUSH
75634: DOUBLE
75635: LD_INT 1
75637: DEC
75638: ST_TO_ADDR
75639: LD_VAR 0 7
75643: PUSH
75644: FOR_TO
75645: IFFALSE 75692
// begin hc_class = 20 ;
75647: LD_ADDR_OWVAR 28
75651: PUSH
75652: LD_INT 20
75654: ST_TO_ADDR
// hc_gallery =  ;
75655: LD_ADDR_OWVAR 33
75659: PUSH
75660: LD_STRING 
75662: ST_TO_ADDR
// animal := CreateHuman ;
75663: LD_ADDR_VAR 0 12
75667: PUSH
75668: CALL_OW 44
75672: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75673: LD_VAR 0 12
75677: PPUSH
75678: LD_VAR 0 9
75682: PPUSH
75683: LD_INT 0
75685: PPUSH
75686: CALL 77383 0 3
// end ;
75690: GO 75644
75692: POP
75693: POP
// end ;
75694: LD_VAR 0 10
75698: RET
// export function WantHeal ( sci , unit ) ; begin
75699: LD_INT 0
75701: PPUSH
// if GetTaskList ( sci ) > 0 then
75702: LD_VAR 0 1
75706: PPUSH
75707: CALL_OW 437
75711: PUSH
75712: LD_INT 0
75714: GREATER
75715: IFFALSE 75785
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75717: LD_VAR 0 1
75721: PPUSH
75722: CALL_OW 437
75726: PUSH
75727: LD_INT 1
75729: ARRAY
75730: PUSH
75731: LD_INT 1
75733: ARRAY
75734: PUSH
75735: LD_STRING l
75737: EQUAL
75738: PUSH
75739: LD_VAR 0 1
75743: PPUSH
75744: CALL_OW 437
75748: PUSH
75749: LD_INT 1
75751: ARRAY
75752: PUSH
75753: LD_INT 4
75755: ARRAY
75756: PUSH
75757: LD_VAR 0 2
75761: EQUAL
75762: AND
75763: IFFALSE 75775
// result := true else
75765: LD_ADDR_VAR 0 3
75769: PUSH
75770: LD_INT 1
75772: ST_TO_ADDR
75773: GO 75783
// result := false ;
75775: LD_ADDR_VAR 0 3
75779: PUSH
75780: LD_INT 0
75782: ST_TO_ADDR
// end else
75783: GO 75793
// result := false ;
75785: LD_ADDR_VAR 0 3
75789: PUSH
75790: LD_INT 0
75792: ST_TO_ADDR
// end ;
75793: LD_VAR 0 3
75797: RET
// export function HealTarget ( sci ) ; begin
75798: LD_INT 0
75800: PPUSH
// if not sci then
75801: LD_VAR 0 1
75805: NOT
75806: IFFALSE 75810
// exit ;
75808: GO 75875
// result := 0 ;
75810: LD_ADDR_VAR 0 2
75814: PUSH
75815: LD_INT 0
75817: ST_TO_ADDR
// if GetTaskList ( sci ) then
75818: LD_VAR 0 1
75822: PPUSH
75823: CALL_OW 437
75827: IFFALSE 75875
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75829: LD_VAR 0 1
75833: PPUSH
75834: CALL_OW 437
75838: PUSH
75839: LD_INT 1
75841: ARRAY
75842: PUSH
75843: LD_INT 1
75845: ARRAY
75846: PUSH
75847: LD_STRING l
75849: EQUAL
75850: IFFALSE 75875
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75852: LD_ADDR_VAR 0 2
75856: PUSH
75857: LD_VAR 0 1
75861: PPUSH
75862: CALL_OW 437
75866: PUSH
75867: LD_INT 1
75869: ARRAY
75870: PUSH
75871: LD_INT 4
75873: ARRAY
75874: ST_TO_ADDR
// end ;
75875: LD_VAR 0 2
75879: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75880: LD_INT 0
75882: PPUSH
75883: PPUSH
75884: PPUSH
75885: PPUSH
// if not base_units then
75886: LD_VAR 0 1
75890: NOT
75891: IFFALSE 75895
// exit ;
75893: GO 75982
// result := false ;
75895: LD_ADDR_VAR 0 2
75899: PUSH
75900: LD_INT 0
75902: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75903: LD_ADDR_VAR 0 5
75907: PUSH
75908: LD_VAR 0 1
75912: PPUSH
75913: LD_INT 21
75915: PUSH
75916: LD_INT 3
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PPUSH
75923: CALL_OW 72
75927: ST_TO_ADDR
// if not tmp then
75928: LD_VAR 0 5
75932: NOT
75933: IFFALSE 75937
// exit ;
75935: GO 75982
// for i in tmp do
75937: LD_ADDR_VAR 0 3
75941: PUSH
75942: LD_VAR 0 5
75946: PUSH
75947: FOR_IN
75948: IFFALSE 75980
// begin result := EnemyInRange ( i , 22 ) ;
75950: LD_ADDR_VAR 0 2
75954: PUSH
75955: LD_VAR 0 3
75959: PPUSH
75960: LD_INT 22
75962: PPUSH
75963: CALL 74218 0 2
75967: ST_TO_ADDR
// if result then
75968: LD_VAR 0 2
75972: IFFALSE 75978
// exit ;
75974: POP
75975: POP
75976: GO 75982
// end ;
75978: GO 75947
75980: POP
75981: POP
// end ;
75982: LD_VAR 0 2
75986: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
75987: LD_INT 0
75989: PPUSH
75990: PPUSH
// if not units then
75991: LD_VAR 0 1
75995: NOT
75996: IFFALSE 76000
// exit ;
75998: GO 76070
// result := [ ] ;
76000: LD_ADDR_VAR 0 3
76004: PUSH
76005: EMPTY
76006: ST_TO_ADDR
// for i in units do
76007: LD_ADDR_VAR 0 4
76011: PUSH
76012: LD_VAR 0 1
76016: PUSH
76017: FOR_IN
76018: IFFALSE 76068
// if GetTag ( i ) = tag then
76020: LD_VAR 0 4
76024: PPUSH
76025: CALL_OW 110
76029: PUSH
76030: LD_VAR 0 2
76034: EQUAL
76035: IFFALSE 76066
// result := Replace ( result , result + 1 , i ) ;
76037: LD_ADDR_VAR 0 3
76041: PUSH
76042: LD_VAR 0 3
76046: PPUSH
76047: LD_VAR 0 3
76051: PUSH
76052: LD_INT 1
76054: PLUS
76055: PPUSH
76056: LD_VAR 0 4
76060: PPUSH
76061: CALL_OW 1
76065: ST_TO_ADDR
76066: GO 76017
76068: POP
76069: POP
// end ;
76070: LD_VAR 0 3
76074: RET
// export function IsDriver ( un ) ; begin
76075: LD_INT 0
76077: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76078: LD_ADDR_VAR 0 2
76082: PUSH
76083: LD_VAR 0 1
76087: PUSH
76088: LD_INT 55
76090: PUSH
76091: EMPTY
76092: LIST
76093: PPUSH
76094: CALL_OW 69
76098: IN
76099: ST_TO_ADDR
// end ;
76100: LD_VAR 0 2
76104: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76105: LD_INT 0
76107: PPUSH
76108: PPUSH
// list := [ ] ;
76109: LD_ADDR_VAR 0 5
76113: PUSH
76114: EMPTY
76115: ST_TO_ADDR
// case d of 0 :
76116: LD_VAR 0 3
76120: PUSH
76121: LD_INT 0
76123: DOUBLE
76124: EQUAL
76125: IFTRUE 76129
76127: GO 76262
76129: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76130: LD_ADDR_VAR 0 5
76134: PUSH
76135: LD_VAR 0 1
76139: PUSH
76140: LD_INT 4
76142: MINUS
76143: PUSH
76144: LD_VAR 0 2
76148: PUSH
76149: LD_INT 4
76151: MINUS
76152: PUSH
76153: LD_INT 2
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: LIST
76160: PUSH
76161: LD_VAR 0 1
76165: PUSH
76166: LD_INT 3
76168: MINUS
76169: PUSH
76170: LD_VAR 0 2
76174: PUSH
76175: LD_INT 1
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: LIST
76182: PUSH
76183: LD_VAR 0 1
76187: PUSH
76188: LD_INT 4
76190: PLUS
76191: PUSH
76192: LD_VAR 0 2
76196: PUSH
76197: LD_INT 4
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: LIST
76204: PUSH
76205: LD_VAR 0 1
76209: PUSH
76210: LD_INT 3
76212: PLUS
76213: PUSH
76214: LD_VAR 0 2
76218: PUSH
76219: LD_INT 3
76221: PLUS
76222: PUSH
76223: LD_INT 5
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: LIST
76230: PUSH
76231: LD_VAR 0 1
76235: PUSH
76236: LD_VAR 0 2
76240: PUSH
76241: LD_INT 4
76243: PLUS
76244: PUSH
76245: LD_INT 0
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: LIST
76252: PUSH
76253: EMPTY
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: ST_TO_ADDR
// end ; 1 :
76260: GO 76960
76262: LD_INT 1
76264: DOUBLE
76265: EQUAL
76266: IFTRUE 76270
76268: GO 76403
76270: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76271: LD_ADDR_VAR 0 5
76275: PUSH
76276: LD_VAR 0 1
76280: PUSH
76281: LD_VAR 0 2
76285: PUSH
76286: LD_INT 4
76288: MINUS
76289: PUSH
76290: LD_INT 3
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: LIST
76297: PUSH
76298: LD_VAR 0 1
76302: PUSH
76303: LD_INT 3
76305: MINUS
76306: PUSH
76307: LD_VAR 0 2
76311: PUSH
76312: LD_INT 3
76314: MINUS
76315: PUSH
76316: LD_INT 2
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: LIST
76323: PUSH
76324: LD_VAR 0 1
76328: PUSH
76329: LD_INT 4
76331: MINUS
76332: PUSH
76333: LD_VAR 0 2
76337: PUSH
76338: LD_INT 1
76340: PUSH
76341: EMPTY
76342: LIST
76343: LIST
76344: LIST
76345: PUSH
76346: LD_VAR 0 1
76350: PUSH
76351: LD_VAR 0 2
76355: PUSH
76356: LD_INT 3
76358: PLUS
76359: PUSH
76360: LD_INT 0
76362: PUSH
76363: EMPTY
76364: LIST
76365: LIST
76366: LIST
76367: PUSH
76368: LD_VAR 0 1
76372: PUSH
76373: LD_INT 4
76375: PLUS
76376: PUSH
76377: LD_VAR 0 2
76381: PUSH
76382: LD_INT 4
76384: PLUS
76385: PUSH
76386: LD_INT 5
76388: PUSH
76389: EMPTY
76390: LIST
76391: LIST
76392: LIST
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: ST_TO_ADDR
// end ; 2 :
76401: GO 76960
76403: LD_INT 2
76405: DOUBLE
76406: EQUAL
76407: IFTRUE 76411
76409: GO 76540
76411: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76412: LD_ADDR_VAR 0 5
76416: PUSH
76417: LD_VAR 0 1
76421: PUSH
76422: LD_VAR 0 2
76426: PUSH
76427: LD_INT 3
76429: MINUS
76430: PUSH
76431: LD_INT 3
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: LIST
76438: PUSH
76439: LD_VAR 0 1
76443: PUSH
76444: LD_INT 4
76446: PLUS
76447: PUSH
76448: LD_VAR 0 2
76452: PUSH
76453: LD_INT 4
76455: PUSH
76456: EMPTY
76457: LIST
76458: LIST
76459: LIST
76460: PUSH
76461: LD_VAR 0 1
76465: PUSH
76466: LD_VAR 0 2
76470: PUSH
76471: LD_INT 4
76473: PLUS
76474: PUSH
76475: LD_INT 0
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: LIST
76482: PUSH
76483: LD_VAR 0 1
76487: PUSH
76488: LD_INT 3
76490: MINUS
76491: PUSH
76492: LD_VAR 0 2
76496: PUSH
76497: LD_INT 1
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: LIST
76504: PUSH
76505: LD_VAR 0 1
76509: PUSH
76510: LD_INT 4
76512: MINUS
76513: PUSH
76514: LD_VAR 0 2
76518: PUSH
76519: LD_INT 4
76521: MINUS
76522: PUSH
76523: LD_INT 2
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: LIST
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: ST_TO_ADDR
// end ; 3 :
76538: GO 76960
76540: LD_INT 3
76542: DOUBLE
76543: EQUAL
76544: IFTRUE 76548
76546: GO 76681
76548: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76549: LD_ADDR_VAR 0 5
76553: PUSH
76554: LD_VAR 0 1
76558: PUSH
76559: LD_INT 3
76561: PLUS
76562: PUSH
76563: LD_VAR 0 2
76567: PUSH
76568: LD_INT 4
76570: PUSH
76571: EMPTY
76572: LIST
76573: LIST
76574: LIST
76575: PUSH
76576: LD_VAR 0 1
76580: PUSH
76581: LD_INT 4
76583: PLUS
76584: PUSH
76585: LD_VAR 0 2
76589: PUSH
76590: LD_INT 4
76592: PLUS
76593: PUSH
76594: LD_INT 5
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: LIST
76601: PUSH
76602: LD_VAR 0 1
76606: PUSH
76607: LD_INT 4
76609: MINUS
76610: PUSH
76611: LD_VAR 0 2
76615: PUSH
76616: LD_INT 1
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: LIST
76623: PUSH
76624: LD_VAR 0 1
76628: PUSH
76629: LD_VAR 0 2
76633: PUSH
76634: LD_INT 4
76636: MINUS
76637: PUSH
76638: LD_INT 3
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: LIST
76645: PUSH
76646: LD_VAR 0 1
76650: PUSH
76651: LD_INT 3
76653: MINUS
76654: PUSH
76655: LD_VAR 0 2
76659: PUSH
76660: LD_INT 3
76662: MINUS
76663: PUSH
76664: LD_INT 2
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: LIST
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: ST_TO_ADDR
// end ; 4 :
76679: GO 76960
76681: LD_INT 4
76683: DOUBLE
76684: EQUAL
76685: IFTRUE 76689
76687: GO 76822
76689: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76690: LD_ADDR_VAR 0 5
76694: PUSH
76695: LD_VAR 0 1
76699: PUSH
76700: LD_VAR 0 2
76704: PUSH
76705: LD_INT 4
76707: PLUS
76708: PUSH
76709: LD_INT 0
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: LIST
76716: PUSH
76717: LD_VAR 0 1
76721: PUSH
76722: LD_INT 3
76724: PLUS
76725: PUSH
76726: LD_VAR 0 2
76730: PUSH
76731: LD_INT 3
76733: PLUS
76734: PUSH
76735: LD_INT 5
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: LIST
76742: PUSH
76743: LD_VAR 0 1
76747: PUSH
76748: LD_INT 4
76750: PLUS
76751: PUSH
76752: LD_VAR 0 2
76756: PUSH
76757: LD_INT 4
76759: PUSH
76760: EMPTY
76761: LIST
76762: LIST
76763: LIST
76764: PUSH
76765: LD_VAR 0 1
76769: PUSH
76770: LD_VAR 0 2
76774: PUSH
76775: LD_INT 3
76777: MINUS
76778: PUSH
76779: LD_INT 3
76781: PUSH
76782: EMPTY
76783: LIST
76784: LIST
76785: LIST
76786: PUSH
76787: LD_VAR 0 1
76791: PUSH
76792: LD_INT 4
76794: MINUS
76795: PUSH
76796: LD_VAR 0 2
76800: PUSH
76801: LD_INT 4
76803: MINUS
76804: PUSH
76805: LD_INT 2
76807: PUSH
76808: EMPTY
76809: LIST
76810: LIST
76811: LIST
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: LIST
76817: LIST
76818: LIST
76819: ST_TO_ADDR
// end ; 5 :
76820: GO 76960
76822: LD_INT 5
76824: DOUBLE
76825: EQUAL
76826: IFTRUE 76830
76828: GO 76959
76830: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76831: LD_ADDR_VAR 0 5
76835: PUSH
76836: LD_VAR 0 1
76840: PUSH
76841: LD_INT 4
76843: MINUS
76844: PUSH
76845: LD_VAR 0 2
76849: PUSH
76850: LD_INT 1
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: PUSH
76858: LD_VAR 0 1
76862: PUSH
76863: LD_VAR 0 2
76867: PUSH
76868: LD_INT 4
76870: MINUS
76871: PUSH
76872: LD_INT 3
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: LIST
76879: PUSH
76880: LD_VAR 0 1
76884: PUSH
76885: LD_INT 4
76887: PLUS
76888: PUSH
76889: LD_VAR 0 2
76893: PUSH
76894: LD_INT 4
76896: PLUS
76897: PUSH
76898: LD_INT 5
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: LIST
76905: PUSH
76906: LD_VAR 0 1
76910: PUSH
76911: LD_INT 3
76913: PLUS
76914: PUSH
76915: LD_VAR 0 2
76919: PUSH
76920: LD_INT 4
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: LIST
76927: PUSH
76928: LD_VAR 0 1
76932: PUSH
76933: LD_VAR 0 2
76937: PUSH
76938: LD_INT 3
76940: PLUS
76941: PUSH
76942: LD_INT 0
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: LIST
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: LIST
76954: LIST
76955: LIST
76956: ST_TO_ADDR
// end ; end ;
76957: GO 76960
76959: POP
// result := list ;
76960: LD_ADDR_VAR 0 4
76964: PUSH
76965: LD_VAR 0 5
76969: ST_TO_ADDR
// end ;
76970: LD_VAR 0 4
76974: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76975: LD_INT 0
76977: PPUSH
76978: PPUSH
76979: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76980: LD_VAR 0 1
76984: NOT
76985: PUSH
76986: LD_VAR 0 2
76990: PUSH
76991: LD_INT 1
76993: PUSH
76994: LD_INT 2
76996: PUSH
76997: LD_INT 3
76999: PUSH
77000: LD_INT 4
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: IN
77009: NOT
77010: OR
77011: IFFALSE 77015
// exit ;
77013: GO 77107
// tmp := [ ] ;
77015: LD_ADDR_VAR 0 5
77019: PUSH
77020: EMPTY
77021: ST_TO_ADDR
// for i in units do
77022: LD_ADDR_VAR 0 4
77026: PUSH
77027: LD_VAR 0 1
77031: PUSH
77032: FOR_IN
77033: IFFALSE 77076
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
77035: LD_ADDR_VAR 0 5
77039: PUSH
77040: LD_VAR 0 5
77044: PPUSH
77045: LD_VAR 0 5
77049: PUSH
77050: LD_INT 1
77052: PLUS
77053: PPUSH
77054: LD_VAR 0 4
77058: PPUSH
77059: LD_VAR 0 2
77063: PPUSH
77064: CALL_OW 259
77068: PPUSH
77069: CALL_OW 2
77073: ST_TO_ADDR
77074: GO 77032
77076: POP
77077: POP
// if not tmp then
77078: LD_VAR 0 5
77082: NOT
77083: IFFALSE 77087
// exit ;
77085: GO 77107
// result := SortListByListDesc ( units , tmp ) ;
77087: LD_ADDR_VAR 0 3
77091: PUSH
77092: LD_VAR 0 1
77096: PPUSH
77097: LD_VAR 0 5
77101: PPUSH
77102: CALL_OW 77
77106: ST_TO_ADDR
// end ;
77107: LD_VAR 0 3
77111: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77112: LD_INT 0
77114: PPUSH
77115: PPUSH
77116: PPUSH
// result := false ;
77117: LD_ADDR_VAR 0 3
77121: PUSH
77122: LD_INT 0
77124: ST_TO_ADDR
// x := GetX ( building ) ;
77125: LD_ADDR_VAR 0 4
77129: PUSH
77130: LD_VAR 0 2
77134: PPUSH
77135: CALL_OW 250
77139: ST_TO_ADDR
// y := GetY ( building ) ;
77140: LD_ADDR_VAR 0 5
77144: PUSH
77145: LD_VAR 0 2
77149: PPUSH
77150: CALL_OW 251
77154: ST_TO_ADDR
// if not building or not x or not y then
77155: LD_VAR 0 2
77159: NOT
77160: PUSH
77161: LD_VAR 0 4
77165: NOT
77166: OR
77167: PUSH
77168: LD_VAR 0 5
77172: NOT
77173: OR
77174: IFFALSE 77178
// exit ;
77176: GO 77270
// if GetTaskList ( unit ) then
77178: LD_VAR 0 1
77182: PPUSH
77183: CALL_OW 437
77187: IFFALSE 77270
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77189: LD_STRING e
77191: PUSH
77192: LD_VAR 0 1
77196: PPUSH
77197: CALL_OW 437
77201: PUSH
77202: LD_INT 1
77204: ARRAY
77205: PUSH
77206: LD_INT 1
77208: ARRAY
77209: EQUAL
77210: PUSH
77211: LD_VAR 0 4
77215: PUSH
77216: LD_VAR 0 1
77220: PPUSH
77221: CALL_OW 437
77225: PUSH
77226: LD_INT 1
77228: ARRAY
77229: PUSH
77230: LD_INT 2
77232: ARRAY
77233: EQUAL
77234: AND
77235: PUSH
77236: LD_VAR 0 5
77240: PUSH
77241: LD_VAR 0 1
77245: PPUSH
77246: CALL_OW 437
77250: PUSH
77251: LD_INT 1
77253: ARRAY
77254: PUSH
77255: LD_INT 3
77257: ARRAY
77258: EQUAL
77259: AND
77260: IFFALSE 77270
// result := true end ;
77262: LD_ADDR_VAR 0 3
77266: PUSH
77267: LD_INT 1
77269: ST_TO_ADDR
// end ;
77270: LD_VAR 0 3
77274: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77275: LD_INT 0
77277: PPUSH
// result := false ;
77278: LD_ADDR_VAR 0 4
77282: PUSH
77283: LD_INT 0
77285: ST_TO_ADDR
// if GetTaskList ( unit ) then
77286: LD_VAR 0 1
77290: PPUSH
77291: CALL_OW 437
77295: IFFALSE 77378
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77297: LD_STRING M
77299: PUSH
77300: LD_VAR 0 1
77304: PPUSH
77305: CALL_OW 437
77309: PUSH
77310: LD_INT 1
77312: ARRAY
77313: PUSH
77314: LD_INT 1
77316: ARRAY
77317: EQUAL
77318: PUSH
77319: LD_VAR 0 2
77323: PUSH
77324: LD_VAR 0 1
77328: PPUSH
77329: CALL_OW 437
77333: PUSH
77334: LD_INT 1
77336: ARRAY
77337: PUSH
77338: LD_INT 2
77340: ARRAY
77341: EQUAL
77342: AND
77343: PUSH
77344: LD_VAR 0 3
77348: PUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: CALL_OW 437
77358: PUSH
77359: LD_INT 1
77361: ARRAY
77362: PUSH
77363: LD_INT 3
77365: ARRAY
77366: EQUAL
77367: AND
77368: IFFALSE 77378
// result := true ;
77370: LD_ADDR_VAR 0 4
77374: PUSH
77375: LD_INT 1
77377: ST_TO_ADDR
// end ; end ;
77378: LD_VAR 0 4
77382: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77383: LD_INT 0
77385: PPUSH
77386: PPUSH
77387: PPUSH
77388: PPUSH
// if not unit or not area then
77389: LD_VAR 0 1
77393: NOT
77394: PUSH
77395: LD_VAR 0 2
77399: NOT
77400: OR
77401: IFFALSE 77405
// exit ;
77403: GO 77569
// tmp := AreaToList ( area , i ) ;
77405: LD_ADDR_VAR 0 6
77409: PUSH
77410: LD_VAR 0 2
77414: PPUSH
77415: LD_VAR 0 5
77419: PPUSH
77420: CALL_OW 517
77424: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77425: LD_ADDR_VAR 0 5
77429: PUSH
77430: DOUBLE
77431: LD_INT 1
77433: DEC
77434: ST_TO_ADDR
77435: LD_VAR 0 6
77439: PUSH
77440: LD_INT 1
77442: ARRAY
77443: PUSH
77444: FOR_TO
77445: IFFALSE 77567
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77447: LD_ADDR_VAR 0 7
77451: PUSH
77452: LD_VAR 0 6
77456: PUSH
77457: LD_INT 1
77459: ARRAY
77460: PUSH
77461: LD_VAR 0 5
77465: ARRAY
77466: PUSH
77467: LD_VAR 0 6
77471: PUSH
77472: LD_INT 2
77474: ARRAY
77475: PUSH
77476: LD_VAR 0 5
77480: ARRAY
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
77486: LD_VAR 0 7
77490: PUSH
77491: LD_INT 1
77493: ARRAY
77494: PPUSH
77495: LD_VAR 0 7
77499: PUSH
77500: LD_INT 2
77502: ARRAY
77503: PPUSH
77504: CALL_OW 428
77508: PUSH
77509: LD_INT 0
77511: EQUAL
77512: IFFALSE 77565
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77514: LD_VAR 0 1
77518: PPUSH
77519: LD_VAR 0 7
77523: PUSH
77524: LD_INT 1
77526: ARRAY
77527: PPUSH
77528: LD_VAR 0 7
77532: PUSH
77533: LD_INT 2
77535: ARRAY
77536: PPUSH
77537: LD_VAR 0 3
77541: PPUSH
77542: CALL_OW 48
// result := IsPlaced ( unit ) ;
77546: LD_ADDR_VAR 0 4
77550: PUSH
77551: LD_VAR 0 1
77555: PPUSH
77556: CALL_OW 305
77560: ST_TO_ADDR
// exit ;
77561: POP
77562: POP
77563: GO 77569
// end ; end ;
77565: GO 77444
77567: POP
77568: POP
// end ;
77569: LD_VAR 0 4
77573: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77574: LD_INT 0
77576: PPUSH
77577: PPUSH
77578: PPUSH
// if not side or side > 8 then
77579: LD_VAR 0 1
77583: NOT
77584: PUSH
77585: LD_VAR 0 1
77589: PUSH
77590: LD_INT 8
77592: GREATER
77593: OR
77594: IFFALSE 77598
// exit ;
77596: GO 77785
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77598: LD_ADDR_VAR 0 4
77602: PUSH
77603: LD_INT 22
77605: PUSH
77606: LD_VAR 0 1
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: PUSH
77615: LD_INT 21
77617: PUSH
77618: LD_INT 3
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PPUSH
77629: CALL_OW 69
77633: ST_TO_ADDR
// if not tmp then
77634: LD_VAR 0 4
77638: NOT
77639: IFFALSE 77643
// exit ;
77641: GO 77785
// enable_addtolog := true ;
77643: LD_ADDR_OWVAR 81
77647: PUSH
77648: LD_INT 1
77650: ST_TO_ADDR
// AddToLog ( [ ) ;
77651: LD_STRING [
77653: PPUSH
77654: CALL_OW 561
// for i in tmp do
77658: LD_ADDR_VAR 0 3
77662: PUSH
77663: LD_VAR 0 4
77667: PUSH
77668: FOR_IN
77669: IFFALSE 77776
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77671: LD_STRING [
77673: PUSH
77674: LD_VAR 0 3
77678: PPUSH
77679: CALL_OW 266
77683: STR
77684: PUSH
77685: LD_STRING , 
77687: STR
77688: PUSH
77689: LD_VAR 0 3
77693: PPUSH
77694: CALL_OW 250
77698: STR
77699: PUSH
77700: LD_STRING , 
77702: STR
77703: PUSH
77704: LD_VAR 0 3
77708: PPUSH
77709: CALL_OW 251
77713: STR
77714: PUSH
77715: LD_STRING , 
77717: STR
77718: PUSH
77719: LD_VAR 0 3
77723: PPUSH
77724: CALL_OW 254
77728: STR
77729: PUSH
77730: LD_STRING , 
77732: STR
77733: PUSH
77734: LD_VAR 0 3
77738: PPUSH
77739: LD_INT 1
77741: PPUSH
77742: CALL_OW 268
77746: STR
77747: PUSH
77748: LD_STRING , 
77750: STR
77751: PUSH
77752: LD_VAR 0 3
77756: PPUSH
77757: LD_INT 2
77759: PPUSH
77760: CALL_OW 268
77764: STR
77765: PUSH
77766: LD_STRING ],
77768: STR
77769: PPUSH
77770: CALL_OW 561
// end ;
77774: GO 77668
77776: POP
77777: POP
// AddToLog ( ]; ) ;
77778: LD_STRING ];
77780: PPUSH
77781: CALL_OW 561
// end ;
77785: LD_VAR 0 2
77789: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77790: LD_INT 0
77792: PPUSH
77793: PPUSH
77794: PPUSH
77795: PPUSH
77796: PPUSH
// if not area or not rate or not max then
77797: LD_VAR 0 1
77801: NOT
77802: PUSH
77803: LD_VAR 0 2
77807: NOT
77808: OR
77809: PUSH
77810: LD_VAR 0 4
77814: NOT
77815: OR
77816: IFFALSE 77820
// exit ;
77818: GO 78012
// while 1 do
77820: LD_INT 1
77822: IFFALSE 78012
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77824: LD_ADDR_VAR 0 9
77828: PUSH
77829: LD_VAR 0 1
77833: PPUSH
77834: LD_INT 1
77836: PPUSH
77837: CALL_OW 287
77841: PUSH
77842: LD_INT 10
77844: MUL
77845: ST_TO_ADDR
// r := rate / 10 ;
77846: LD_ADDR_VAR 0 7
77850: PUSH
77851: LD_VAR 0 2
77855: PUSH
77856: LD_INT 10
77858: DIVREAL
77859: ST_TO_ADDR
// time := 1 1$00 ;
77860: LD_ADDR_VAR 0 8
77864: PUSH
77865: LD_INT 2100
77867: ST_TO_ADDR
// if amount < min then
77868: LD_VAR 0 9
77872: PUSH
77873: LD_VAR 0 3
77877: LESS
77878: IFFALSE 77896
// r := r * 2 else
77880: LD_ADDR_VAR 0 7
77884: PUSH
77885: LD_VAR 0 7
77889: PUSH
77890: LD_INT 2
77892: MUL
77893: ST_TO_ADDR
77894: GO 77922
// if amount > max then
77896: LD_VAR 0 9
77900: PUSH
77901: LD_VAR 0 4
77905: GREATER
77906: IFFALSE 77922
// r := r / 2 ;
77908: LD_ADDR_VAR 0 7
77912: PUSH
77913: LD_VAR 0 7
77917: PUSH
77918: LD_INT 2
77920: DIVREAL
77921: ST_TO_ADDR
// time := time / r ;
77922: LD_ADDR_VAR 0 8
77926: PUSH
77927: LD_VAR 0 8
77931: PUSH
77932: LD_VAR 0 7
77936: DIVREAL
77937: ST_TO_ADDR
// if time < 0 then
77938: LD_VAR 0 8
77942: PUSH
77943: LD_INT 0
77945: LESS
77946: IFFALSE 77963
// time := time * - 1 ;
77948: LD_ADDR_VAR 0 8
77952: PUSH
77953: LD_VAR 0 8
77957: PUSH
77958: LD_INT 1
77960: NEG
77961: MUL
77962: ST_TO_ADDR
// wait ( time ) ;
77963: LD_VAR 0 8
77967: PPUSH
77968: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
77972: LD_INT 35
77974: PPUSH
77975: LD_INT 875
77977: PPUSH
77978: CALL_OW 12
77982: PPUSH
77983: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77987: LD_INT 1
77989: PPUSH
77990: LD_INT 5
77992: PPUSH
77993: CALL_OW 12
77997: PPUSH
77998: LD_VAR 0 1
78002: PPUSH
78003: LD_INT 1
78005: PPUSH
78006: CALL_OW 55
// end ;
78010: GO 77820
// end ;
78012: LD_VAR 0 5
78016: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78017: LD_INT 0
78019: PPUSH
78020: PPUSH
78021: PPUSH
78022: PPUSH
78023: PPUSH
78024: PPUSH
78025: PPUSH
78026: PPUSH
// if not turrets or not factories then
78027: LD_VAR 0 1
78031: NOT
78032: PUSH
78033: LD_VAR 0 2
78037: NOT
78038: OR
78039: IFFALSE 78043
// exit ;
78041: GO 78350
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78043: LD_ADDR_VAR 0 10
78047: PUSH
78048: LD_INT 5
78050: PUSH
78051: LD_INT 6
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: LD_INT 2
78060: PUSH
78061: LD_INT 4
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: PUSH
78068: LD_INT 3
78070: PUSH
78071: LD_INT 5
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: LIST
78082: PUSH
78083: LD_INT 24
78085: PUSH
78086: LD_INT 25
78088: PUSH
78089: EMPTY
78090: LIST
78091: LIST
78092: PUSH
78093: LD_INT 23
78095: PUSH
78096: LD_INT 27
78098: PUSH
78099: EMPTY
78100: LIST
78101: LIST
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: LD_INT 42
78109: PUSH
78110: LD_INT 43
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 44
78119: PUSH
78120: LD_INT 46
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: PUSH
78127: LD_INT 45
78129: PUSH
78130: LD_INT 47
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: LIST
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: LIST
78146: ST_TO_ADDR
// result := [ ] ;
78147: LD_ADDR_VAR 0 3
78151: PUSH
78152: EMPTY
78153: ST_TO_ADDR
// for i in turrets do
78154: LD_ADDR_VAR 0 4
78158: PUSH
78159: LD_VAR 0 1
78163: PUSH
78164: FOR_IN
78165: IFFALSE 78348
// begin nat := GetNation ( i ) ;
78167: LD_ADDR_VAR 0 7
78171: PUSH
78172: LD_VAR 0 4
78176: PPUSH
78177: CALL_OW 248
78181: ST_TO_ADDR
// weapon := 0 ;
78182: LD_ADDR_VAR 0 8
78186: PUSH
78187: LD_INT 0
78189: ST_TO_ADDR
// if not nat then
78190: LD_VAR 0 7
78194: NOT
78195: IFFALSE 78199
// continue ;
78197: GO 78164
// for j in list [ nat ] do
78199: LD_ADDR_VAR 0 5
78203: PUSH
78204: LD_VAR 0 10
78208: PUSH
78209: LD_VAR 0 7
78213: ARRAY
78214: PUSH
78215: FOR_IN
78216: IFFALSE 78257
// if GetBWeapon ( i ) = j [ 1 ] then
78218: LD_VAR 0 4
78222: PPUSH
78223: CALL_OW 269
78227: PUSH
78228: LD_VAR 0 5
78232: PUSH
78233: LD_INT 1
78235: ARRAY
78236: EQUAL
78237: IFFALSE 78255
// begin weapon := j [ 2 ] ;
78239: LD_ADDR_VAR 0 8
78243: PUSH
78244: LD_VAR 0 5
78248: PUSH
78249: LD_INT 2
78251: ARRAY
78252: ST_TO_ADDR
// break ;
78253: GO 78257
// end ;
78255: GO 78215
78257: POP
78258: POP
// if not weapon then
78259: LD_VAR 0 8
78263: NOT
78264: IFFALSE 78268
// continue ;
78266: GO 78164
// for k in factories do
78268: LD_ADDR_VAR 0 6
78272: PUSH
78273: LD_VAR 0 2
78277: PUSH
78278: FOR_IN
78279: IFFALSE 78344
// begin weapons := AvailableWeaponList ( k ) ;
78281: LD_ADDR_VAR 0 9
78285: PUSH
78286: LD_VAR 0 6
78290: PPUSH
78291: CALL_OW 478
78295: ST_TO_ADDR
// if not weapons then
78296: LD_VAR 0 9
78300: NOT
78301: IFFALSE 78305
// continue ;
78303: GO 78278
// if weapon in weapons then
78305: LD_VAR 0 8
78309: PUSH
78310: LD_VAR 0 9
78314: IN
78315: IFFALSE 78342
// begin result := [ i , weapon ] ;
78317: LD_ADDR_VAR 0 3
78321: PUSH
78322: LD_VAR 0 4
78326: PUSH
78327: LD_VAR 0 8
78331: PUSH
78332: EMPTY
78333: LIST
78334: LIST
78335: ST_TO_ADDR
// exit ;
78336: POP
78337: POP
78338: POP
78339: POP
78340: GO 78350
// end ; end ;
78342: GO 78278
78344: POP
78345: POP
// end ;
78346: GO 78164
78348: POP
78349: POP
// end ;
78350: LD_VAR 0 3
78354: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78355: LD_INT 0
78357: PPUSH
// if not side or side > 8 then
78358: LD_VAR 0 3
78362: NOT
78363: PUSH
78364: LD_VAR 0 3
78368: PUSH
78369: LD_INT 8
78371: GREATER
78372: OR
78373: IFFALSE 78377
// exit ;
78375: GO 78436
// if not range then
78377: LD_VAR 0 4
78381: NOT
78382: IFFALSE 78393
// range := - 12 ;
78384: LD_ADDR_VAR 0 4
78388: PUSH
78389: LD_INT 12
78391: NEG
78392: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78393: LD_VAR 0 1
78397: PPUSH
78398: LD_VAR 0 2
78402: PPUSH
78403: LD_VAR 0 3
78407: PPUSH
78408: LD_VAR 0 4
78412: PPUSH
78413: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78417: LD_VAR 0 1
78421: PPUSH
78422: LD_VAR 0 2
78426: PPUSH
78427: LD_VAR 0 3
78431: PPUSH
78432: CALL_OW 331
// end ;
78436: LD_VAR 0 5
78440: RET
// export function Video ( mode ) ; begin
78441: LD_INT 0
78443: PPUSH
// ingame_video = mode ;
78444: LD_ADDR_OWVAR 52
78448: PUSH
78449: LD_VAR 0 1
78453: ST_TO_ADDR
// interface_hidden = mode ;
78454: LD_ADDR_OWVAR 54
78458: PUSH
78459: LD_VAR 0 1
78463: ST_TO_ADDR
// end ;
78464: LD_VAR 0 2
78468: RET
// export function Join ( array , element ) ; begin
78469: LD_INT 0
78471: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78472: LD_ADDR_VAR 0 3
78476: PUSH
78477: LD_VAR 0 1
78481: PPUSH
78482: LD_VAR 0 1
78486: PUSH
78487: LD_INT 1
78489: PLUS
78490: PPUSH
78491: LD_VAR 0 2
78495: PPUSH
78496: CALL_OW 1
78500: ST_TO_ADDR
// end ;
78501: LD_VAR 0 3
78505: RET
// export function JoinUnion ( array , element ) ; begin
78506: LD_INT 0
78508: PPUSH
// result := array union element ;
78509: LD_ADDR_VAR 0 3
78513: PUSH
78514: LD_VAR 0 1
78518: PUSH
78519: LD_VAR 0 2
78523: UNION
78524: ST_TO_ADDR
// end ;
78525: LD_VAR 0 3
78529: RET
// export function GetBehemoths ( side ) ; begin
78530: LD_INT 0
78532: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
78533: LD_ADDR_VAR 0 2
78537: PUSH
78538: LD_INT 22
78540: PUSH
78541: LD_VAR 0 1
78545: PUSH
78546: EMPTY
78547: LIST
78548: LIST
78549: PUSH
78550: LD_INT 31
78552: PUSH
78553: LD_INT 25
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: PUSH
78560: EMPTY
78561: LIST
78562: LIST
78563: PPUSH
78564: CALL_OW 69
78568: ST_TO_ADDR
// end ;
78569: LD_VAR 0 2
78573: RET
// export function Shuffle ( array ) ; var i , index ; begin
78574: LD_INT 0
78576: PPUSH
78577: PPUSH
78578: PPUSH
// result := [ ] ;
78579: LD_ADDR_VAR 0 2
78583: PUSH
78584: EMPTY
78585: ST_TO_ADDR
// if not array then
78586: LD_VAR 0 1
78590: NOT
78591: IFFALSE 78595
// exit ;
78593: GO 78694
// Randomize ;
78595: CALL_OW 10
// for i = array downto 1 do
78599: LD_ADDR_VAR 0 3
78603: PUSH
78604: DOUBLE
78605: LD_VAR 0 1
78609: INC
78610: ST_TO_ADDR
78611: LD_INT 1
78613: PUSH
78614: FOR_DOWNTO
78615: IFFALSE 78692
// begin index := rand ( 1 , array ) ;
78617: LD_ADDR_VAR 0 4
78621: PUSH
78622: LD_INT 1
78624: PPUSH
78625: LD_VAR 0 1
78629: PPUSH
78630: CALL_OW 12
78634: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78635: LD_ADDR_VAR 0 2
78639: PUSH
78640: LD_VAR 0 2
78644: PPUSH
78645: LD_VAR 0 2
78649: PUSH
78650: LD_INT 1
78652: PLUS
78653: PPUSH
78654: LD_VAR 0 1
78658: PUSH
78659: LD_VAR 0 4
78663: ARRAY
78664: PPUSH
78665: CALL_OW 2
78669: ST_TO_ADDR
// array := Delete ( array , index ) ;
78670: LD_ADDR_VAR 0 1
78674: PUSH
78675: LD_VAR 0 1
78679: PPUSH
78680: LD_VAR 0 4
78684: PPUSH
78685: CALL_OW 3
78689: ST_TO_ADDR
// end ;
78690: GO 78614
78692: POP
78693: POP
// end ;
78694: LD_VAR 0 2
78698: RET
// export function GetBaseMaterials ( base ) ; begin
78699: LD_INT 0
78701: PPUSH
// result := [ 0 , 0 , 0 ] ;
78702: LD_ADDR_VAR 0 2
78706: PUSH
78707: LD_INT 0
78709: PUSH
78710: LD_INT 0
78712: PUSH
78713: LD_INT 0
78715: PUSH
78716: EMPTY
78717: LIST
78718: LIST
78719: LIST
78720: ST_TO_ADDR
// if not base then
78721: LD_VAR 0 1
78725: NOT
78726: IFFALSE 78730
// exit ;
78728: GO 78779
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78730: LD_ADDR_VAR 0 2
78734: PUSH
78735: LD_VAR 0 1
78739: PPUSH
78740: LD_INT 1
78742: PPUSH
78743: CALL_OW 275
78747: PUSH
78748: LD_VAR 0 1
78752: PPUSH
78753: LD_INT 2
78755: PPUSH
78756: CALL_OW 275
78760: PUSH
78761: LD_VAR 0 1
78765: PPUSH
78766: LD_INT 3
78768: PPUSH
78769: CALL_OW 275
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: LIST
78778: ST_TO_ADDR
// end ;
78779: LD_VAR 0 2
78783: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78784: LD_INT 0
78786: PPUSH
78787: PPUSH
// result := array ;
78788: LD_ADDR_VAR 0 3
78792: PUSH
78793: LD_VAR 0 1
78797: ST_TO_ADDR
// if size > 0 then
78798: LD_VAR 0 2
78802: PUSH
78803: LD_INT 0
78805: GREATER
78806: IFFALSE 78852
// for i := array downto size do
78808: LD_ADDR_VAR 0 4
78812: PUSH
78813: DOUBLE
78814: LD_VAR 0 1
78818: INC
78819: ST_TO_ADDR
78820: LD_VAR 0 2
78824: PUSH
78825: FOR_DOWNTO
78826: IFFALSE 78850
// result := Delete ( result , result ) ;
78828: LD_ADDR_VAR 0 3
78832: PUSH
78833: LD_VAR 0 3
78837: PPUSH
78838: LD_VAR 0 3
78842: PPUSH
78843: CALL_OW 3
78847: ST_TO_ADDR
78848: GO 78825
78850: POP
78851: POP
// end ;
78852: LD_VAR 0 3
78856: RET
// export function ComExit ( unit ) ; var tmp ; begin
78857: LD_INT 0
78859: PPUSH
78860: PPUSH
// if not IsInUnit ( unit ) then
78861: LD_VAR 0 1
78865: PPUSH
78866: CALL_OW 310
78870: NOT
78871: IFFALSE 78875
// exit ;
78873: GO 78935
// tmp := IsInUnit ( unit ) ;
78875: LD_ADDR_VAR 0 3
78879: PUSH
78880: LD_VAR 0 1
78884: PPUSH
78885: CALL_OW 310
78889: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78890: LD_VAR 0 3
78894: PPUSH
78895: CALL_OW 247
78899: PUSH
78900: LD_INT 2
78902: EQUAL
78903: IFFALSE 78916
// ComExitVehicle ( unit ) else
78905: LD_VAR 0 1
78909: PPUSH
78910: CALL_OW 121
78914: GO 78925
// ComExitBuilding ( unit ) ;
78916: LD_VAR 0 1
78920: PPUSH
78921: CALL_OW 122
// result := tmp ;
78925: LD_ADDR_VAR 0 2
78929: PUSH
78930: LD_VAR 0 3
78934: ST_TO_ADDR
// end ;
78935: LD_VAR 0 2
78939: RET
// export function ComExitAll ( units ) ; var i ; begin
78940: LD_INT 0
78942: PPUSH
78943: PPUSH
// if not units then
78944: LD_VAR 0 1
78948: NOT
78949: IFFALSE 78953
// exit ;
78951: GO 78979
// for i in units do
78953: LD_ADDR_VAR 0 3
78957: PUSH
78958: LD_VAR 0 1
78962: PUSH
78963: FOR_IN
78964: IFFALSE 78977
// ComExit ( i ) ;
78966: LD_VAR 0 3
78970: PPUSH
78971: CALL 78857 0 1
78975: GO 78963
78977: POP
78978: POP
// end ;
78979: LD_VAR 0 2
78983: RET
// export function ResetHc ; begin
78984: LD_INT 0
78986: PPUSH
// InitHc ;
78987: CALL_OW 19
// hc_importance := 0 ;
78991: LD_ADDR_OWVAR 32
78995: PUSH
78996: LD_INT 0
78998: ST_TO_ADDR
// end ;
78999: LD_VAR 0 1
79003: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79004: LD_INT 0
79006: PPUSH
79007: PPUSH
79008: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79009: LD_ADDR_VAR 0 6
79013: PUSH
79014: LD_VAR 0 1
79018: PUSH
79019: LD_VAR 0 3
79023: PLUS
79024: PUSH
79025: LD_INT 2
79027: DIV
79028: ST_TO_ADDR
// if _x < 0 then
79029: LD_VAR 0 6
79033: PUSH
79034: LD_INT 0
79036: LESS
79037: IFFALSE 79054
// _x := _x * - 1 ;
79039: LD_ADDR_VAR 0 6
79043: PUSH
79044: LD_VAR 0 6
79048: PUSH
79049: LD_INT 1
79051: NEG
79052: MUL
79053: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79054: LD_ADDR_VAR 0 7
79058: PUSH
79059: LD_VAR 0 2
79063: PUSH
79064: LD_VAR 0 4
79068: PLUS
79069: PUSH
79070: LD_INT 2
79072: DIV
79073: ST_TO_ADDR
// if _y < 0 then
79074: LD_VAR 0 7
79078: PUSH
79079: LD_INT 0
79081: LESS
79082: IFFALSE 79099
// _y := _y * - 1 ;
79084: LD_ADDR_VAR 0 7
79088: PUSH
79089: LD_VAR 0 7
79093: PUSH
79094: LD_INT 1
79096: NEG
79097: MUL
79098: ST_TO_ADDR
// result := [ _x , _y ] ;
79099: LD_ADDR_VAR 0 5
79103: PUSH
79104: LD_VAR 0 6
79108: PUSH
79109: LD_VAR 0 7
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: ST_TO_ADDR
// end ;
79118: LD_VAR 0 5
79122: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79123: LD_INT 0
79125: PPUSH
79126: PPUSH
79127: PPUSH
79128: PPUSH
// task := GetTaskList ( unit ) ;
79129: LD_ADDR_VAR 0 7
79133: PUSH
79134: LD_VAR 0 1
79138: PPUSH
79139: CALL_OW 437
79143: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79144: LD_VAR 0 7
79148: NOT
79149: PUSH
79150: LD_VAR 0 1
79154: PPUSH
79155: LD_VAR 0 2
79159: PPUSH
79160: CALL_OW 308
79164: NOT
79165: AND
79166: IFFALSE 79170
// exit ;
79168: GO 79288
// if IsInArea ( unit , area ) then
79170: LD_VAR 0 1
79174: PPUSH
79175: LD_VAR 0 2
79179: PPUSH
79180: CALL_OW 308
79184: IFFALSE 79202
// begin ComMoveToArea ( unit , goAway ) ;
79186: LD_VAR 0 1
79190: PPUSH
79191: LD_VAR 0 3
79195: PPUSH
79196: CALL_OW 113
// exit ;
79200: GO 79288
// end ; if task [ 1 ] [ 1 ] <> M then
79202: LD_VAR 0 7
79206: PUSH
79207: LD_INT 1
79209: ARRAY
79210: PUSH
79211: LD_INT 1
79213: ARRAY
79214: PUSH
79215: LD_STRING M
79217: NONEQUAL
79218: IFFALSE 79222
// exit ;
79220: GO 79288
// x := task [ 1 ] [ 2 ] ;
79222: LD_ADDR_VAR 0 5
79226: PUSH
79227: LD_VAR 0 7
79231: PUSH
79232: LD_INT 1
79234: ARRAY
79235: PUSH
79236: LD_INT 2
79238: ARRAY
79239: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79240: LD_ADDR_VAR 0 6
79244: PUSH
79245: LD_VAR 0 7
79249: PUSH
79250: LD_INT 1
79252: ARRAY
79253: PUSH
79254: LD_INT 3
79256: ARRAY
79257: ST_TO_ADDR
// if InArea ( x , y , area ) then
79258: LD_VAR 0 5
79262: PPUSH
79263: LD_VAR 0 6
79267: PPUSH
79268: LD_VAR 0 2
79272: PPUSH
79273: CALL_OW 309
79277: IFFALSE 79288
// ComStop ( unit ) ;
79279: LD_VAR 0 1
79283: PPUSH
79284: CALL_OW 141
// end ;
79288: LD_VAR 0 4
79292: RET
// export function Abs ( value ) ; begin
79293: LD_INT 0
79295: PPUSH
// result := value ;
79296: LD_ADDR_VAR 0 2
79300: PUSH
79301: LD_VAR 0 1
79305: ST_TO_ADDR
// if value < 0 then
79306: LD_VAR 0 1
79310: PUSH
79311: LD_INT 0
79313: LESS
79314: IFFALSE 79331
// result := value * - 1 ;
79316: LD_ADDR_VAR 0 2
79320: PUSH
79321: LD_VAR 0 1
79325: PUSH
79326: LD_INT 1
79328: NEG
79329: MUL
79330: ST_TO_ADDR
// end ;
79331: LD_VAR 0 2
79335: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79336: LD_INT 0
79338: PPUSH
79339: PPUSH
79340: PPUSH
79341: PPUSH
79342: PPUSH
79343: PPUSH
79344: PPUSH
79345: PPUSH
// if not unit or not building then
79346: LD_VAR 0 1
79350: NOT
79351: PUSH
79352: LD_VAR 0 2
79356: NOT
79357: OR
79358: IFFALSE 79362
// exit ;
79360: GO 79588
// x := GetX ( building ) ;
79362: LD_ADDR_VAR 0 4
79366: PUSH
79367: LD_VAR 0 2
79371: PPUSH
79372: CALL_OW 250
79376: ST_TO_ADDR
// y := GetY ( building ) ;
79377: LD_ADDR_VAR 0 6
79381: PUSH
79382: LD_VAR 0 2
79386: PPUSH
79387: CALL_OW 251
79391: ST_TO_ADDR
// d := GetDir ( building ) ;
79392: LD_ADDR_VAR 0 8
79396: PUSH
79397: LD_VAR 0 2
79401: PPUSH
79402: CALL_OW 254
79406: ST_TO_ADDR
// r := 4 ;
79407: LD_ADDR_VAR 0 9
79411: PUSH
79412: LD_INT 4
79414: ST_TO_ADDR
// for i := 1 to 5 do
79415: LD_ADDR_VAR 0 10
79419: PUSH
79420: DOUBLE
79421: LD_INT 1
79423: DEC
79424: ST_TO_ADDR
79425: LD_INT 5
79427: PUSH
79428: FOR_TO
79429: IFFALSE 79586
// begin _x := ShiftX ( x , d , r + i ) ;
79431: LD_ADDR_VAR 0 5
79435: PUSH
79436: LD_VAR 0 4
79440: PPUSH
79441: LD_VAR 0 8
79445: PPUSH
79446: LD_VAR 0 9
79450: PUSH
79451: LD_VAR 0 10
79455: PLUS
79456: PPUSH
79457: CALL_OW 272
79461: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79462: LD_ADDR_VAR 0 7
79466: PUSH
79467: LD_VAR 0 6
79471: PPUSH
79472: LD_VAR 0 8
79476: PPUSH
79477: LD_VAR 0 9
79481: PUSH
79482: LD_VAR 0 10
79486: PLUS
79487: PPUSH
79488: CALL_OW 273
79492: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79493: LD_VAR 0 5
79497: PPUSH
79498: LD_VAR 0 7
79502: PPUSH
79503: CALL_OW 488
79507: PUSH
79508: LD_VAR 0 5
79512: PPUSH
79513: LD_VAR 0 7
79517: PPUSH
79518: CALL_OW 428
79522: PPUSH
79523: CALL_OW 247
79527: PUSH
79528: LD_INT 3
79530: PUSH
79531: LD_INT 2
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: IN
79538: NOT
79539: AND
79540: IFFALSE 79584
// begin ComMoveXY ( unit , _x , _y ) ;
79542: LD_VAR 0 1
79546: PPUSH
79547: LD_VAR 0 5
79551: PPUSH
79552: LD_VAR 0 7
79556: PPUSH
79557: CALL_OW 111
// result := [ _x , _y ] ;
79561: LD_ADDR_VAR 0 3
79565: PUSH
79566: LD_VAR 0 5
79570: PUSH
79571: LD_VAR 0 7
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: ST_TO_ADDR
// exit ;
79580: POP
79581: POP
79582: GO 79588
// end ; end ;
79584: GO 79428
79586: POP
79587: POP
// end ;
79588: LD_VAR 0 3
79592: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79593: LD_INT 0
79595: PPUSH
79596: PPUSH
79597: PPUSH
// result := 0 ;
79598: LD_ADDR_VAR 0 3
79602: PUSH
79603: LD_INT 0
79605: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79606: LD_VAR 0 1
79610: PUSH
79611: LD_INT 0
79613: LESS
79614: PUSH
79615: LD_VAR 0 1
79619: PUSH
79620: LD_INT 8
79622: GREATER
79623: OR
79624: PUSH
79625: LD_VAR 0 2
79629: PUSH
79630: LD_INT 0
79632: LESS
79633: OR
79634: PUSH
79635: LD_VAR 0 2
79639: PUSH
79640: LD_INT 8
79642: GREATER
79643: OR
79644: IFFALSE 79648
// exit ;
79646: GO 79723
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79648: LD_ADDR_VAR 0 4
79652: PUSH
79653: LD_INT 22
79655: PUSH
79656: LD_VAR 0 2
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: PPUSH
79665: CALL_OW 69
79669: PUSH
79670: FOR_IN
79671: IFFALSE 79721
// begin un := UnitShoot ( i ) ;
79673: LD_ADDR_VAR 0 5
79677: PUSH
79678: LD_VAR 0 4
79682: PPUSH
79683: CALL_OW 504
79687: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79688: LD_VAR 0 5
79692: PPUSH
79693: CALL_OW 255
79697: PUSH
79698: LD_VAR 0 1
79702: EQUAL
79703: IFFALSE 79719
// begin result := un ;
79705: LD_ADDR_VAR 0 3
79709: PUSH
79710: LD_VAR 0 5
79714: ST_TO_ADDR
// exit ;
79715: POP
79716: POP
79717: GO 79723
// end ; end ;
79719: GO 79670
79721: POP
79722: POP
// end ;
79723: LD_VAR 0 3
79727: RET
// export function GetCargoBay ( units ) ; begin
79728: LD_INT 0
79730: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79731: LD_ADDR_VAR 0 2
79735: PUSH
79736: LD_VAR 0 1
79740: PPUSH
79741: LD_INT 2
79743: PUSH
79744: LD_INT 34
79746: PUSH
79747: LD_INT 12
79749: PUSH
79750: EMPTY
79751: LIST
79752: LIST
79753: PUSH
79754: LD_INT 34
79756: PUSH
79757: LD_INT 51
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: LD_INT 34
79766: PUSH
79767: LD_INT 32
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 34
79776: PUSH
79777: LD_EXP 122
79781: PUSH
79782: EMPTY
79783: LIST
79784: LIST
79785: PUSH
79786: EMPTY
79787: LIST
79788: LIST
79789: LIST
79790: LIST
79791: LIST
79792: PPUSH
79793: CALL_OW 72
79797: ST_TO_ADDR
// end ;
79798: LD_VAR 0 2
79802: RET
// export function Negate ( value ) ; begin
79803: LD_INT 0
79805: PPUSH
// result := not value ;
79806: LD_ADDR_VAR 0 2
79810: PUSH
79811: LD_VAR 0 1
79815: NOT
79816: ST_TO_ADDR
// end ;
79817: LD_VAR 0 2
79821: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
79822: LD_INT 0
79824: PPUSH
// if x1 = x2 then
79825: LD_VAR 0 1
79829: PUSH
79830: LD_VAR 0 3
79834: EQUAL
79835: IFFALSE 79869
// begin if y1 > y2 then
79837: LD_VAR 0 2
79841: PUSH
79842: LD_VAR 0 4
79846: GREATER
79847: IFFALSE 79859
// result := 0 else
79849: LD_ADDR_VAR 0 5
79853: PUSH
79854: LD_INT 0
79856: ST_TO_ADDR
79857: GO 79867
// result := 3 ;
79859: LD_ADDR_VAR 0 5
79863: PUSH
79864: LD_INT 3
79866: ST_TO_ADDR
// exit ;
79867: GO 79955
// end ; if y1 = y2 then
79869: LD_VAR 0 2
79873: PUSH
79874: LD_VAR 0 4
79878: EQUAL
79879: IFFALSE 79913
// begin if x1 > x2 then
79881: LD_VAR 0 1
79885: PUSH
79886: LD_VAR 0 3
79890: GREATER
79891: IFFALSE 79903
// result := 1 else
79893: LD_ADDR_VAR 0 5
79897: PUSH
79898: LD_INT 1
79900: ST_TO_ADDR
79901: GO 79911
// result := 4 ;
79903: LD_ADDR_VAR 0 5
79907: PUSH
79908: LD_INT 4
79910: ST_TO_ADDR
// exit ;
79911: GO 79955
// end ; if x1 > x2 and y1 > y2 then
79913: LD_VAR 0 1
79917: PUSH
79918: LD_VAR 0 3
79922: GREATER
79923: PUSH
79924: LD_VAR 0 2
79928: PUSH
79929: LD_VAR 0 4
79933: GREATER
79934: AND
79935: IFFALSE 79947
// result := 2 else
79937: LD_ADDR_VAR 0 5
79941: PUSH
79942: LD_INT 2
79944: ST_TO_ADDR
79945: GO 79955
// result := 5 ;
79947: LD_ADDR_VAR 0 5
79951: PUSH
79952: LD_INT 5
79954: ST_TO_ADDR
// end ;
79955: LD_VAR 0 5
79959: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79960: LD_INT 0
79962: PPUSH
79963: PPUSH
// if not driver or not IsInUnit ( driver ) then
79964: LD_VAR 0 1
79968: NOT
79969: PUSH
79970: LD_VAR 0 1
79974: PPUSH
79975: CALL_OW 310
79979: NOT
79980: OR
79981: IFFALSE 79985
// exit ;
79983: GO 80075
// vehicle := IsInUnit ( driver ) ;
79985: LD_ADDR_VAR 0 3
79989: PUSH
79990: LD_VAR 0 1
79994: PPUSH
79995: CALL_OW 310
79999: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80000: LD_VAR 0 1
80004: PPUSH
80005: LD_STRING \
80007: PUSH
80008: LD_INT 0
80010: PUSH
80011: LD_INT 0
80013: PUSH
80014: LD_INT 0
80016: PUSH
80017: LD_INT 0
80019: PUSH
80020: LD_INT 0
80022: PUSH
80023: LD_INT 0
80025: PUSH
80026: EMPTY
80027: LIST
80028: LIST
80029: LIST
80030: LIST
80031: LIST
80032: LIST
80033: LIST
80034: PUSH
80035: LD_STRING E
80037: PUSH
80038: LD_INT 0
80040: PUSH
80041: LD_INT 0
80043: PUSH
80044: LD_VAR 0 3
80048: PUSH
80049: LD_INT 0
80051: PUSH
80052: LD_INT 0
80054: PUSH
80055: LD_INT 0
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: LIST
80062: LIST
80063: LIST
80064: LIST
80065: LIST
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: PPUSH
80071: CALL_OW 446
// end ;
80075: LD_VAR 0 2
80079: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80080: LD_INT 0
80082: PPUSH
80083: PPUSH
// if not driver or not IsInUnit ( driver ) then
80084: LD_VAR 0 1
80088: NOT
80089: PUSH
80090: LD_VAR 0 1
80094: PPUSH
80095: CALL_OW 310
80099: NOT
80100: OR
80101: IFFALSE 80105
// exit ;
80103: GO 80195
// vehicle := IsInUnit ( driver ) ;
80105: LD_ADDR_VAR 0 3
80109: PUSH
80110: LD_VAR 0 1
80114: PPUSH
80115: CALL_OW 310
80119: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80120: LD_VAR 0 1
80124: PPUSH
80125: LD_STRING \
80127: PUSH
80128: LD_INT 0
80130: PUSH
80131: LD_INT 0
80133: PUSH
80134: LD_INT 0
80136: PUSH
80137: LD_INT 0
80139: PUSH
80140: LD_INT 0
80142: PUSH
80143: LD_INT 0
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: LIST
80150: LIST
80151: LIST
80152: LIST
80153: LIST
80154: PUSH
80155: LD_STRING E
80157: PUSH
80158: LD_INT 0
80160: PUSH
80161: LD_INT 0
80163: PUSH
80164: LD_VAR 0 3
80168: PUSH
80169: LD_INT 0
80171: PUSH
80172: LD_INT 0
80174: PUSH
80175: LD_INT 0
80177: PUSH
80178: EMPTY
80179: LIST
80180: LIST
80181: LIST
80182: LIST
80183: LIST
80184: LIST
80185: LIST
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PPUSH
80191: CALL_OW 447
// end ;
80195: LD_VAR 0 2
80199: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80200: LD_INT 0
80202: PPUSH
80203: PPUSH
80204: PPUSH
// tmp := [ ] ;
80205: LD_ADDR_VAR 0 5
80209: PUSH
80210: EMPTY
80211: ST_TO_ADDR
// for i in units do
80212: LD_ADDR_VAR 0 4
80216: PUSH
80217: LD_VAR 0 1
80221: PUSH
80222: FOR_IN
80223: IFFALSE 80261
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80225: LD_ADDR_VAR 0 5
80229: PUSH
80230: LD_VAR 0 5
80234: PPUSH
80235: LD_VAR 0 5
80239: PUSH
80240: LD_INT 1
80242: PLUS
80243: PPUSH
80244: LD_VAR 0 4
80248: PPUSH
80249: CALL_OW 256
80253: PPUSH
80254: CALL_OW 2
80258: ST_TO_ADDR
80259: GO 80222
80261: POP
80262: POP
// if not tmp then
80263: LD_VAR 0 5
80267: NOT
80268: IFFALSE 80272
// exit ;
80270: GO 80320
// if asc then
80272: LD_VAR 0 2
80276: IFFALSE 80300
// result := SortListByListAsc ( units , tmp ) else
80278: LD_ADDR_VAR 0 3
80282: PUSH
80283: LD_VAR 0 1
80287: PPUSH
80288: LD_VAR 0 5
80292: PPUSH
80293: CALL_OW 76
80297: ST_TO_ADDR
80298: GO 80320
// result := SortListByListDesc ( units , tmp ) ;
80300: LD_ADDR_VAR 0 3
80304: PUSH
80305: LD_VAR 0 1
80309: PPUSH
80310: LD_VAR 0 5
80314: PPUSH
80315: CALL_OW 77
80319: ST_TO_ADDR
// end ;
80320: LD_VAR 0 3
80324: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80325: LD_INT 0
80327: PPUSH
80328: PPUSH
// task := GetTaskList ( mech ) ;
80329: LD_ADDR_VAR 0 4
80333: PUSH
80334: LD_VAR 0 1
80338: PPUSH
80339: CALL_OW 437
80343: ST_TO_ADDR
// if not task then
80344: LD_VAR 0 4
80348: NOT
80349: IFFALSE 80353
// exit ;
80351: GO 80395
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80353: LD_ADDR_VAR 0 3
80357: PUSH
80358: LD_VAR 0 4
80362: PUSH
80363: LD_INT 1
80365: ARRAY
80366: PUSH
80367: LD_INT 1
80369: ARRAY
80370: PUSH
80371: LD_STRING r
80373: EQUAL
80374: PUSH
80375: LD_VAR 0 4
80379: PUSH
80380: LD_INT 1
80382: ARRAY
80383: PUSH
80384: LD_INT 4
80386: ARRAY
80387: PUSH
80388: LD_VAR 0 2
80392: EQUAL
80393: AND
80394: ST_TO_ADDR
// end ;
80395: LD_VAR 0 3
80399: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80400: LD_INT 0
80402: PPUSH
// SetDir ( unit , d ) ;
80403: LD_VAR 0 1
80407: PPUSH
80408: LD_VAR 0 4
80412: PPUSH
80413: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
80417: LD_VAR 0 1
80421: PPUSH
80422: LD_VAR 0 2
80426: PPUSH
80427: LD_VAR 0 3
80431: PPUSH
80432: LD_VAR 0 5
80436: PPUSH
80437: CALL_OW 48
// end ;
80441: LD_VAR 0 6
80445: RET
// export function ToNaturalNumber ( number ) ; begin
80446: LD_INT 0
80448: PPUSH
// result := number div 1 ;
80449: LD_ADDR_VAR 0 2
80453: PUSH
80454: LD_VAR 0 1
80458: PUSH
80459: LD_INT 1
80461: DIV
80462: ST_TO_ADDR
// if number < 0 then
80463: LD_VAR 0 1
80467: PUSH
80468: LD_INT 0
80470: LESS
80471: IFFALSE 80481
// result := 0 ;
80473: LD_ADDR_VAR 0 2
80477: PUSH
80478: LD_INT 0
80480: ST_TO_ADDR
// end ;
80481: LD_VAR 0 2
80485: RET
// export function SortByClass ( units , class ) ; var un ; begin
80486: LD_INT 0
80488: PPUSH
80489: PPUSH
// if not units or not class then
80490: LD_VAR 0 1
80494: NOT
80495: PUSH
80496: LD_VAR 0 2
80500: NOT
80501: OR
80502: IFFALSE 80506
// exit ;
80504: GO 80601
// result := [ ] ;
80506: LD_ADDR_VAR 0 3
80510: PUSH
80511: EMPTY
80512: ST_TO_ADDR
// for un in units do
80513: LD_ADDR_VAR 0 4
80517: PUSH
80518: LD_VAR 0 1
80522: PUSH
80523: FOR_IN
80524: IFFALSE 80599
// if GetClass ( un ) = class then
80526: LD_VAR 0 4
80530: PPUSH
80531: CALL_OW 257
80535: PUSH
80536: LD_VAR 0 2
80540: EQUAL
80541: IFFALSE 80568
// result := Insert ( result , 1 , un ) else
80543: LD_ADDR_VAR 0 3
80547: PUSH
80548: LD_VAR 0 3
80552: PPUSH
80553: LD_INT 1
80555: PPUSH
80556: LD_VAR 0 4
80560: PPUSH
80561: CALL_OW 2
80565: ST_TO_ADDR
80566: GO 80597
// result := Replace ( result , result + 1 , un ) ;
80568: LD_ADDR_VAR 0 3
80572: PUSH
80573: LD_VAR 0 3
80577: PPUSH
80578: LD_VAR 0 3
80582: PUSH
80583: LD_INT 1
80585: PLUS
80586: PPUSH
80587: LD_VAR 0 4
80591: PPUSH
80592: CALL_OW 1
80596: ST_TO_ADDR
80597: GO 80523
80599: POP
80600: POP
// end ;
80601: LD_VAR 0 3
80605: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80606: LD_INT 0
80608: PPUSH
80609: PPUSH
80610: PPUSH
80611: PPUSH
80612: PPUSH
80613: PPUSH
80614: PPUSH
// result := [ ] ;
80615: LD_ADDR_VAR 0 4
80619: PUSH
80620: EMPTY
80621: ST_TO_ADDR
// if x - r < 0 then
80622: LD_VAR 0 1
80626: PUSH
80627: LD_VAR 0 3
80631: MINUS
80632: PUSH
80633: LD_INT 0
80635: LESS
80636: IFFALSE 80648
// min_x := 0 else
80638: LD_ADDR_VAR 0 8
80642: PUSH
80643: LD_INT 0
80645: ST_TO_ADDR
80646: GO 80664
// min_x := x - r ;
80648: LD_ADDR_VAR 0 8
80652: PUSH
80653: LD_VAR 0 1
80657: PUSH
80658: LD_VAR 0 3
80662: MINUS
80663: ST_TO_ADDR
// if y - r < 0 then
80664: LD_VAR 0 2
80668: PUSH
80669: LD_VAR 0 3
80673: MINUS
80674: PUSH
80675: LD_INT 0
80677: LESS
80678: IFFALSE 80690
// min_y := 0 else
80680: LD_ADDR_VAR 0 7
80684: PUSH
80685: LD_INT 0
80687: ST_TO_ADDR
80688: GO 80706
// min_y := y - r ;
80690: LD_ADDR_VAR 0 7
80694: PUSH
80695: LD_VAR 0 2
80699: PUSH
80700: LD_VAR 0 3
80704: MINUS
80705: ST_TO_ADDR
// max_x := x + r ;
80706: LD_ADDR_VAR 0 9
80710: PUSH
80711: LD_VAR 0 1
80715: PUSH
80716: LD_VAR 0 3
80720: PLUS
80721: ST_TO_ADDR
// max_y := y + r ;
80722: LD_ADDR_VAR 0 10
80726: PUSH
80727: LD_VAR 0 2
80731: PUSH
80732: LD_VAR 0 3
80736: PLUS
80737: ST_TO_ADDR
// for _x = min_x to max_x do
80738: LD_ADDR_VAR 0 5
80742: PUSH
80743: DOUBLE
80744: LD_VAR 0 8
80748: DEC
80749: ST_TO_ADDR
80750: LD_VAR 0 9
80754: PUSH
80755: FOR_TO
80756: IFFALSE 80857
// for _y = min_y to max_y do
80758: LD_ADDR_VAR 0 6
80762: PUSH
80763: DOUBLE
80764: LD_VAR 0 7
80768: DEC
80769: ST_TO_ADDR
80770: LD_VAR 0 10
80774: PUSH
80775: FOR_TO
80776: IFFALSE 80853
// begin if not ValidHex ( _x , _y ) then
80778: LD_VAR 0 5
80782: PPUSH
80783: LD_VAR 0 6
80787: PPUSH
80788: CALL_OW 488
80792: NOT
80793: IFFALSE 80797
// continue ;
80795: GO 80775
// if GetResourceTypeXY ( _x , _y ) then
80797: LD_VAR 0 5
80801: PPUSH
80802: LD_VAR 0 6
80806: PPUSH
80807: CALL_OW 283
80811: IFFALSE 80851
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80813: LD_ADDR_VAR 0 4
80817: PUSH
80818: LD_VAR 0 4
80822: PPUSH
80823: LD_VAR 0 4
80827: PUSH
80828: LD_INT 1
80830: PLUS
80831: PPUSH
80832: LD_VAR 0 5
80836: PUSH
80837: LD_VAR 0 6
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: PPUSH
80846: CALL_OW 1
80850: ST_TO_ADDR
// end ;
80851: GO 80775
80853: POP
80854: POP
80855: GO 80755
80857: POP
80858: POP
// end ;
80859: LD_VAR 0 4
80863: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
80864: LD_INT 0
80866: PPUSH
80867: PPUSH
80868: PPUSH
80869: PPUSH
80870: PPUSH
80871: PPUSH
// if not units then
80872: LD_VAR 0 1
80876: NOT
80877: IFFALSE 80881
// exit ;
80879: GO 81282
// result := UnitFilter ( units , [ f_ok ] ) ;
80881: LD_ADDR_VAR 0 3
80885: PUSH
80886: LD_VAR 0 1
80890: PPUSH
80891: LD_INT 50
80893: PUSH
80894: EMPTY
80895: LIST
80896: PPUSH
80897: CALL_OW 72
80901: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80902: LD_ADDR_VAR 0 7
80906: PUSH
80907: LD_VAR 0 1
80911: PUSH
80912: LD_INT 1
80914: ARRAY
80915: PPUSH
80916: CALL_OW 255
80920: ST_TO_ADDR
// if not result then
80921: LD_VAR 0 3
80925: NOT
80926: IFFALSE 80930
// exit ;
80928: GO 81282
// for i in result do
80930: LD_ADDR_VAR 0 4
80934: PUSH
80935: LD_VAR 0 3
80939: PUSH
80940: FOR_IN
80941: IFFALSE 81280
// begin tag := GetTag ( i ) + 1 ;
80943: LD_ADDR_VAR 0 8
80947: PUSH
80948: LD_VAR 0 4
80952: PPUSH
80953: CALL_OW 110
80957: PUSH
80958: LD_INT 1
80960: PLUS
80961: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80962: LD_ADDR_VAR 0 6
80966: PUSH
80967: LD_VAR 0 4
80971: PPUSH
80972: CALL_OW 250
80976: PPUSH
80977: LD_VAR 0 4
80981: PPUSH
80982: CALL_OW 251
80986: PPUSH
80987: LD_INT 6
80989: PPUSH
80990: CALL 80606 0 3
80994: ST_TO_ADDR
// if cr then
80995: LD_VAR 0 6
80999: IFFALSE 81038
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81001: LD_VAR 0 4
81005: PPUSH
81006: LD_VAR 0 6
81010: PUSH
81011: LD_INT 1
81013: ARRAY
81014: PUSH
81015: LD_INT 1
81017: ARRAY
81018: PPUSH
81019: LD_VAR 0 6
81023: PUSH
81024: LD_INT 1
81026: ARRAY
81027: PUSH
81028: LD_INT 2
81030: ARRAY
81031: PPUSH
81032: CALL_OW 116
81036: GO 81278
// if path > tag then
81038: LD_VAR 0 2
81042: PUSH
81043: LD_VAR 0 8
81047: GREATER
81048: IFFALSE 81226
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
81050: LD_ADDR_VAR 0 5
81054: PUSH
81055: LD_INT 81
81057: PUSH
81058: LD_VAR 0 7
81062: PUSH
81063: EMPTY
81064: LIST
81065: LIST
81066: PUSH
81067: LD_INT 91
81069: PUSH
81070: LD_VAR 0 4
81074: PUSH
81075: LD_INT 12
81077: PUSH
81078: EMPTY
81079: LIST
81080: LIST
81081: LIST
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PPUSH
81087: CALL_OW 69
81091: ST_TO_ADDR
// if enemy then
81092: LD_VAR 0 5
81096: IFFALSE 81124
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81098: LD_VAR 0 4
81102: PPUSH
81103: LD_VAR 0 5
81107: PPUSH
81108: LD_VAR 0 4
81112: PPUSH
81113: CALL_OW 74
81117: PPUSH
81118: CALL_OW 115
81122: GO 81224
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81124: LD_VAR 0 4
81128: PPUSH
81129: LD_VAR 0 2
81133: PUSH
81134: LD_VAR 0 8
81138: ARRAY
81139: PUSH
81140: LD_INT 1
81142: ARRAY
81143: PPUSH
81144: LD_VAR 0 2
81148: PUSH
81149: LD_VAR 0 8
81153: ARRAY
81154: PUSH
81155: LD_INT 2
81157: ARRAY
81158: PPUSH
81159: CALL_OW 297
81163: PUSH
81164: LD_INT 6
81166: GREATER
81167: IFFALSE 81210
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81169: LD_VAR 0 4
81173: PPUSH
81174: LD_VAR 0 2
81178: PUSH
81179: LD_VAR 0 8
81183: ARRAY
81184: PUSH
81185: LD_INT 1
81187: ARRAY
81188: PPUSH
81189: LD_VAR 0 2
81193: PUSH
81194: LD_VAR 0 8
81198: ARRAY
81199: PUSH
81200: LD_INT 2
81202: ARRAY
81203: PPUSH
81204: CALL_OW 114
81208: GO 81224
// SetTag ( i , tag ) ;
81210: LD_VAR 0 4
81214: PPUSH
81215: LD_VAR 0 8
81219: PPUSH
81220: CALL_OW 109
// end else
81224: GO 81278
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81226: LD_ADDR_VAR 0 5
81230: PUSH
81231: LD_INT 81
81233: PUSH
81234: LD_VAR 0 7
81238: PUSH
81239: EMPTY
81240: LIST
81241: LIST
81242: PPUSH
81243: CALL_OW 69
81247: ST_TO_ADDR
// if enemy then
81248: LD_VAR 0 5
81252: IFFALSE 81278
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81254: LD_VAR 0 4
81258: PPUSH
81259: LD_VAR 0 5
81263: PPUSH
81264: LD_VAR 0 4
81268: PPUSH
81269: CALL_OW 74
81273: PPUSH
81274: CALL_OW 115
// end ; end ;
81278: GO 80940
81280: POP
81281: POP
// end ; end_of_file
81282: LD_VAR 0 3
81286: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
81287: LD_INT 0
81289: PPUSH
// ar_miner := 81 ;
81290: LD_ADDR_EXP 128
81294: PUSH
81295: LD_INT 81
81297: ST_TO_ADDR
// ar_crane := 88 ;
81298: LD_ADDR_EXP 127
81302: PUSH
81303: LD_INT 88
81305: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
81306: LD_ADDR_EXP 122
81310: PUSH
81311: LD_INT 89
81313: ST_TO_ADDR
// us_hack := 99 ;
81314: LD_ADDR_EXP 123
81318: PUSH
81319: LD_INT 99
81321: ST_TO_ADDR
// us_artillery := 97 ;
81322: LD_ADDR_EXP 124
81326: PUSH
81327: LD_INT 97
81329: ST_TO_ADDR
// ar_bio_bomb := 91 ;
81330: LD_ADDR_EXP 125
81334: PUSH
81335: LD_INT 91
81337: ST_TO_ADDR
// ar_mortar := 92 ;
81338: LD_ADDR_EXP 126
81342: PUSH
81343: LD_INT 92
81345: ST_TO_ADDR
// ru_radar := 98 ;
81346: LD_ADDR_EXP 121
81350: PUSH
81351: LD_INT 98
81353: ST_TO_ADDR
// tech_Artillery := 80 ;
81354: LD_ADDR_EXP 129
81358: PUSH
81359: LD_INT 80
81361: ST_TO_ADDR
// tech_RadMat := 81 ;
81362: LD_ADDR_EXP 130
81366: PUSH
81367: LD_INT 81
81369: ST_TO_ADDR
// tech_BasicTools := 82 ;
81370: LD_ADDR_EXP 131
81374: PUSH
81375: LD_INT 82
81377: ST_TO_ADDR
// tech_Cargo := 83 ;
81378: LD_ADDR_EXP 132
81382: PUSH
81383: LD_INT 83
81385: ST_TO_ADDR
// tech_Track := 84 ;
81386: LD_ADDR_EXP 133
81390: PUSH
81391: LD_INT 84
81393: ST_TO_ADDR
// tech_Crane := 85 ;
81394: LD_ADDR_EXP 134
81398: PUSH
81399: LD_INT 85
81401: ST_TO_ADDR
// tech_Bulldozer := 86 ;
81402: LD_ADDR_EXP 135
81406: PUSH
81407: LD_INT 86
81409: ST_TO_ADDR
// tech_Hovercraft := 87 ;
81410: LD_ADDR_EXP 136
81414: PUSH
81415: LD_INT 87
81417: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
81418: LD_ADDR_EXP 137
81422: PUSH
81423: LD_INT 88
81425: ST_TO_ADDR
// class_mastodont := 31 ;
81426: LD_ADDR_EXP 138
81430: PUSH
81431: LD_INT 31
81433: ST_TO_ADDR
// class_horse := 21 ;
81434: LD_ADDR_EXP 139
81438: PUSH
81439: LD_INT 21
81441: ST_TO_ADDR
// end ;
81442: LD_VAR 0 1
81446: RET
// every 1 do
81447: GO 81449
81449: DISABLE
// InitGlobalVariables ; end_of_file
81450: CALL 81287 0 0
81454: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
81455: LD_INT 0
81457: PPUSH
81458: PPUSH
81459: PPUSH
81460: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
81461: LD_VAR 0 1
81465: PPUSH
81466: CALL_OW 264
81470: PUSH
81471: LD_EXP 125
81475: EQUAL
81476: IFFALSE 81548
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
81478: LD_INT 68
81480: PPUSH
81481: LD_VAR 0 1
81485: PPUSH
81486: CALL_OW 255
81490: PPUSH
81491: CALL_OW 321
81495: PUSH
81496: LD_INT 2
81498: EQUAL
81499: IFFALSE 81511
// eff := 70 else
81501: LD_ADDR_VAR 0 4
81505: PUSH
81506: LD_INT 70
81508: ST_TO_ADDR
81509: GO 81519
// eff := 30 ;
81511: LD_ADDR_VAR 0 4
81515: PUSH
81516: LD_INT 30
81518: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
81519: LD_VAR 0 1
81523: PPUSH
81524: CALL_OW 250
81528: PPUSH
81529: LD_VAR 0 1
81533: PPUSH
81534: CALL_OW 251
81538: PPUSH
81539: LD_VAR 0 4
81543: PPUSH
81544: CALL_OW 495
// end ; end ;
81548: LD_VAR 0 2
81552: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
81553: LD_INT 0
81555: PPUSH
// end ;
81556: LD_VAR 0 4
81560: RET
// export function SOS_Command ( cmd ) ; begin
81561: LD_INT 0
81563: PPUSH
// end ;
81564: LD_VAR 0 2
81568: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
81569: LD_INT 0
81571: PPUSH
// end ;
81572: LD_VAR 0 6
81576: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
81577: LD_INT 0
81579: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
81580: LD_VAR 0 1
81584: PUSH
81585: LD_INT 250
81587: EQUAL
81588: PUSH
81589: LD_VAR 0 2
81593: PPUSH
81594: CALL_OW 264
81598: PUSH
81599: LD_EXP 128
81603: EQUAL
81604: AND
81605: IFFALSE 81626
// MinerPlaceMine ( unit , x , y ) ;
81607: LD_VAR 0 2
81611: PPUSH
81612: LD_VAR 0 4
81616: PPUSH
81617: LD_VAR 0 5
81621: PPUSH
81622: CALL 83975 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
81626: LD_VAR 0 1
81630: PUSH
81631: LD_INT 251
81633: EQUAL
81634: PUSH
81635: LD_VAR 0 2
81639: PPUSH
81640: CALL_OW 264
81644: PUSH
81645: LD_EXP 128
81649: EQUAL
81650: AND
81651: IFFALSE 81672
// MinerDetonateMine ( unit , x , y ) ;
81653: LD_VAR 0 2
81657: PPUSH
81658: LD_VAR 0 4
81662: PPUSH
81663: LD_VAR 0 5
81667: PPUSH
81668: CALL 84252 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
81672: LD_VAR 0 1
81676: PUSH
81677: LD_INT 252
81679: EQUAL
81680: PUSH
81681: LD_VAR 0 2
81685: PPUSH
81686: CALL_OW 264
81690: PUSH
81691: LD_EXP 128
81695: EQUAL
81696: AND
81697: IFFALSE 81718
// MinerCreateMinefield ( unit , x , y ) ;
81699: LD_VAR 0 2
81703: PPUSH
81704: LD_VAR 0 4
81708: PPUSH
81709: LD_VAR 0 5
81713: PPUSH
81714: CALL 84669 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
81718: LD_VAR 0 1
81722: PUSH
81723: LD_INT 253
81725: EQUAL
81726: PUSH
81727: LD_VAR 0 2
81731: PPUSH
81732: CALL_OW 257
81736: PUSH
81737: LD_INT 5
81739: EQUAL
81740: AND
81741: IFFALSE 81762
// ComBinocular ( unit , x , y ) ;
81743: LD_VAR 0 2
81747: PPUSH
81748: LD_VAR 0 4
81752: PPUSH
81753: LD_VAR 0 5
81757: PPUSH
81758: CALL 85040 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
81762: LD_VAR 0 1
81766: PUSH
81767: LD_INT 254
81769: EQUAL
81770: PUSH
81771: LD_VAR 0 2
81775: PPUSH
81776: CALL_OW 264
81780: PUSH
81781: LD_EXP 123
81785: EQUAL
81786: AND
81787: PUSH
81788: LD_VAR 0 3
81792: PPUSH
81793: CALL_OW 263
81797: PUSH
81798: LD_INT 3
81800: EQUAL
81801: AND
81802: IFFALSE 81818
// HackDestroyVehicle ( unit , selectedUnit ) ;
81804: LD_VAR 0 2
81808: PPUSH
81809: LD_VAR 0 3
81813: PPUSH
81814: CALL 83335 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
81818: LD_VAR 0 1
81822: PUSH
81823: LD_INT 255
81825: EQUAL
81826: PUSH
81827: LD_VAR 0 2
81831: PPUSH
81832: CALL_OW 264
81836: PUSH
81837: LD_INT 14
81839: PUSH
81840: LD_INT 53
81842: PUSH
81843: EMPTY
81844: LIST
81845: LIST
81846: IN
81847: AND
81848: PUSH
81849: LD_VAR 0 4
81853: PPUSH
81854: LD_VAR 0 5
81858: PPUSH
81859: CALL_OW 488
81863: AND
81864: IFFALSE 81888
// CutTreeXYR ( unit , x , y , 12 ) ;
81866: LD_VAR 0 2
81870: PPUSH
81871: LD_VAR 0 4
81875: PPUSH
81876: LD_VAR 0 5
81880: PPUSH
81881: LD_INT 12
81883: PPUSH
81884: CALL 81901 0 4
// end ;
81888: LD_VAR 0 6
81892: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
81893: LD_INT 0
81895: PPUSH
// end ;
81896: LD_VAR 0 4
81900: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
81901: LD_INT 0
81903: PPUSH
81904: PPUSH
81905: PPUSH
81906: PPUSH
81907: PPUSH
81908: PPUSH
81909: PPUSH
81910: PPUSH
81911: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
81912: LD_VAR 0 1
81916: NOT
81917: PUSH
81918: LD_VAR 0 2
81922: PPUSH
81923: LD_VAR 0 3
81927: PPUSH
81928: CALL_OW 488
81932: NOT
81933: OR
81934: PUSH
81935: LD_VAR 0 4
81939: NOT
81940: OR
81941: IFFALSE 81945
// exit ;
81943: GO 82285
// list := [ ] ;
81945: LD_ADDR_VAR 0 13
81949: PUSH
81950: EMPTY
81951: ST_TO_ADDR
// if x - r < 0 then
81952: LD_VAR 0 2
81956: PUSH
81957: LD_VAR 0 4
81961: MINUS
81962: PUSH
81963: LD_INT 0
81965: LESS
81966: IFFALSE 81978
// min_x := 0 else
81968: LD_ADDR_VAR 0 7
81972: PUSH
81973: LD_INT 0
81975: ST_TO_ADDR
81976: GO 81994
// min_x := x - r ;
81978: LD_ADDR_VAR 0 7
81982: PUSH
81983: LD_VAR 0 2
81987: PUSH
81988: LD_VAR 0 4
81992: MINUS
81993: ST_TO_ADDR
// if y - r < 0 then
81994: LD_VAR 0 3
81998: PUSH
81999: LD_VAR 0 4
82003: MINUS
82004: PUSH
82005: LD_INT 0
82007: LESS
82008: IFFALSE 82020
// min_y := 0 else
82010: LD_ADDR_VAR 0 8
82014: PUSH
82015: LD_INT 0
82017: ST_TO_ADDR
82018: GO 82036
// min_y := y - r ;
82020: LD_ADDR_VAR 0 8
82024: PUSH
82025: LD_VAR 0 3
82029: PUSH
82030: LD_VAR 0 4
82034: MINUS
82035: ST_TO_ADDR
// max_x := x + r ;
82036: LD_ADDR_VAR 0 9
82040: PUSH
82041: LD_VAR 0 2
82045: PUSH
82046: LD_VAR 0 4
82050: PLUS
82051: ST_TO_ADDR
// max_y := y + r ;
82052: LD_ADDR_VAR 0 10
82056: PUSH
82057: LD_VAR 0 3
82061: PUSH
82062: LD_VAR 0 4
82066: PLUS
82067: ST_TO_ADDR
// for _x = min_x to max_x do
82068: LD_ADDR_VAR 0 11
82072: PUSH
82073: DOUBLE
82074: LD_VAR 0 7
82078: DEC
82079: ST_TO_ADDR
82080: LD_VAR 0 9
82084: PUSH
82085: FOR_TO
82086: IFFALSE 82203
// for _y = min_y to max_y do
82088: LD_ADDR_VAR 0 12
82092: PUSH
82093: DOUBLE
82094: LD_VAR 0 8
82098: DEC
82099: ST_TO_ADDR
82100: LD_VAR 0 10
82104: PUSH
82105: FOR_TO
82106: IFFALSE 82199
// begin if not ValidHex ( _x , _y ) then
82108: LD_VAR 0 11
82112: PPUSH
82113: LD_VAR 0 12
82117: PPUSH
82118: CALL_OW 488
82122: NOT
82123: IFFALSE 82127
// continue ;
82125: GO 82105
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
82127: LD_VAR 0 11
82131: PPUSH
82132: LD_VAR 0 12
82136: PPUSH
82137: CALL_OW 351
82141: PUSH
82142: LD_VAR 0 11
82146: PPUSH
82147: LD_VAR 0 12
82151: PPUSH
82152: CALL_OW 554
82156: AND
82157: IFFALSE 82197
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
82159: LD_ADDR_VAR 0 13
82163: PUSH
82164: LD_VAR 0 13
82168: PPUSH
82169: LD_VAR 0 13
82173: PUSH
82174: LD_INT 1
82176: PLUS
82177: PPUSH
82178: LD_VAR 0 11
82182: PUSH
82183: LD_VAR 0 12
82187: PUSH
82188: EMPTY
82189: LIST
82190: LIST
82191: PPUSH
82192: CALL_OW 2
82196: ST_TO_ADDR
// end ;
82197: GO 82105
82199: POP
82200: POP
82201: GO 82085
82203: POP
82204: POP
// if not list then
82205: LD_VAR 0 13
82209: NOT
82210: IFFALSE 82214
// exit ;
82212: GO 82285
// for i in list do
82214: LD_ADDR_VAR 0 6
82218: PUSH
82219: LD_VAR 0 13
82223: PUSH
82224: FOR_IN
82225: IFFALSE 82283
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
82227: LD_VAR 0 1
82231: PPUSH
82232: LD_STRING M
82234: PUSH
82235: LD_VAR 0 6
82239: PUSH
82240: LD_INT 1
82242: ARRAY
82243: PUSH
82244: LD_VAR 0 6
82248: PUSH
82249: LD_INT 2
82251: ARRAY
82252: PUSH
82253: LD_INT 0
82255: PUSH
82256: LD_INT 0
82258: PUSH
82259: LD_INT 0
82261: PUSH
82262: LD_INT 0
82264: PUSH
82265: EMPTY
82266: LIST
82267: LIST
82268: LIST
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: PUSH
82274: EMPTY
82275: LIST
82276: PPUSH
82277: CALL_OW 447
82281: GO 82224
82283: POP
82284: POP
// end ;
82285: LD_VAR 0 5
82289: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
82290: LD_EXP 142
82294: NOT
82295: IFFALSE 82345
82297: GO 82299
82299: DISABLE
// begin initHack := true ;
82300: LD_ADDR_EXP 142
82304: PUSH
82305: LD_INT 1
82307: ST_TO_ADDR
// hackTanks := [ ] ;
82308: LD_ADDR_EXP 143
82312: PUSH
82313: EMPTY
82314: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
82315: LD_ADDR_EXP 144
82319: PUSH
82320: EMPTY
82321: ST_TO_ADDR
// hackLimit := 3 ;
82322: LD_ADDR_EXP 145
82326: PUSH
82327: LD_INT 3
82329: ST_TO_ADDR
// hackDist := 12 ;
82330: LD_ADDR_EXP 146
82334: PUSH
82335: LD_INT 12
82337: ST_TO_ADDR
// hackCounter := [ ] ;
82338: LD_ADDR_EXP 147
82342: PUSH
82343: EMPTY
82344: ST_TO_ADDR
// end ;
82345: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
82346: LD_EXP 142
82350: PUSH
82351: LD_INT 34
82353: PUSH
82354: LD_EXP 123
82358: PUSH
82359: EMPTY
82360: LIST
82361: LIST
82362: PPUSH
82363: CALL_OW 69
82367: AND
82368: IFFALSE 82623
82370: GO 82372
82372: DISABLE
82373: LD_INT 0
82375: PPUSH
82376: PPUSH
// begin enable ;
82377: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
82378: LD_ADDR_VAR 0 1
82382: PUSH
82383: LD_INT 34
82385: PUSH
82386: LD_EXP 123
82390: PUSH
82391: EMPTY
82392: LIST
82393: LIST
82394: PPUSH
82395: CALL_OW 69
82399: PUSH
82400: FOR_IN
82401: IFFALSE 82621
// begin if not i in hackTanks then
82403: LD_VAR 0 1
82407: PUSH
82408: LD_EXP 143
82412: IN
82413: NOT
82414: IFFALSE 82497
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
82416: LD_ADDR_EXP 143
82420: PUSH
82421: LD_EXP 143
82425: PPUSH
82426: LD_EXP 143
82430: PUSH
82431: LD_INT 1
82433: PLUS
82434: PPUSH
82435: LD_VAR 0 1
82439: PPUSH
82440: CALL_OW 1
82444: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
82445: LD_ADDR_EXP 144
82449: PUSH
82450: LD_EXP 144
82454: PPUSH
82455: LD_EXP 144
82459: PUSH
82460: LD_INT 1
82462: PLUS
82463: PPUSH
82464: EMPTY
82465: PPUSH
82466: CALL_OW 1
82470: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
82471: LD_ADDR_EXP 147
82475: PUSH
82476: LD_EXP 147
82480: PPUSH
82481: LD_EXP 147
82485: PUSH
82486: LD_INT 1
82488: PLUS
82489: PPUSH
82490: EMPTY
82491: PPUSH
82492: CALL_OW 1
82496: ST_TO_ADDR
// end ; if not IsOk ( i ) then
82497: LD_VAR 0 1
82501: PPUSH
82502: CALL_OW 302
82506: NOT
82507: IFFALSE 82520
// begin HackUnlinkAll ( i ) ;
82509: LD_VAR 0 1
82513: PPUSH
82514: CALL 82626 0 1
// continue ;
82518: GO 82400
// end ; HackCheckCapturedStatus ( i ) ;
82520: LD_VAR 0 1
82524: PPUSH
82525: CALL 83069 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
82529: LD_ADDR_VAR 0 2
82533: PUSH
82534: LD_INT 81
82536: PUSH
82537: LD_VAR 0 1
82541: PPUSH
82542: CALL_OW 255
82546: PUSH
82547: EMPTY
82548: LIST
82549: LIST
82550: PUSH
82551: LD_INT 33
82553: PUSH
82554: LD_INT 3
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PUSH
82561: LD_INT 91
82563: PUSH
82564: LD_VAR 0 1
82568: PUSH
82569: LD_EXP 146
82573: PUSH
82574: EMPTY
82575: LIST
82576: LIST
82577: LIST
82578: PUSH
82579: LD_INT 50
82581: PUSH
82582: EMPTY
82583: LIST
82584: PUSH
82585: EMPTY
82586: LIST
82587: LIST
82588: LIST
82589: LIST
82590: PPUSH
82591: CALL_OW 69
82595: ST_TO_ADDR
// if not tmp then
82596: LD_VAR 0 2
82600: NOT
82601: IFFALSE 82605
// continue ;
82603: GO 82400
// HackLink ( i , tmp ) ;
82605: LD_VAR 0 1
82609: PPUSH
82610: LD_VAR 0 2
82614: PPUSH
82615: CALL 82762 0 2
// end ;
82619: GO 82400
82621: POP
82622: POP
// end ;
82623: PPOPN 2
82625: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
82626: LD_INT 0
82628: PPUSH
82629: PPUSH
82630: PPUSH
// if not hack in hackTanks then
82631: LD_VAR 0 1
82635: PUSH
82636: LD_EXP 143
82640: IN
82641: NOT
82642: IFFALSE 82646
// exit ;
82644: GO 82757
// index := GetElementIndex ( hackTanks , hack ) ;
82646: LD_ADDR_VAR 0 4
82650: PUSH
82651: LD_EXP 143
82655: PPUSH
82656: LD_VAR 0 1
82660: PPUSH
82661: CALL 46503 0 2
82665: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
82666: LD_EXP 144
82670: PUSH
82671: LD_VAR 0 4
82675: ARRAY
82676: IFFALSE 82757
// begin for i in hackTanksCaptured [ index ] do
82678: LD_ADDR_VAR 0 3
82682: PUSH
82683: LD_EXP 144
82687: PUSH
82688: LD_VAR 0 4
82692: ARRAY
82693: PUSH
82694: FOR_IN
82695: IFFALSE 82721
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
82697: LD_VAR 0 3
82701: PUSH
82702: LD_INT 1
82704: ARRAY
82705: PPUSH
82706: LD_VAR 0 3
82710: PUSH
82711: LD_INT 2
82713: ARRAY
82714: PPUSH
82715: CALL_OW 235
82719: GO 82694
82721: POP
82722: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
82723: LD_ADDR_EXP 144
82727: PUSH
82728: LD_EXP 144
82732: PPUSH
82733: LD_VAR 0 4
82737: PPUSH
82738: EMPTY
82739: PPUSH
82740: CALL_OW 1
82744: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
82745: LD_VAR 0 1
82749: PPUSH
82750: LD_INT 0
82752: PPUSH
82753: CALL_OW 505
// end ; end ;
82757: LD_VAR 0 2
82761: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
82762: LD_INT 0
82764: PPUSH
82765: PPUSH
82766: PPUSH
// if not hack in hackTanks or not vehicles then
82767: LD_VAR 0 1
82771: PUSH
82772: LD_EXP 143
82776: IN
82777: NOT
82778: PUSH
82779: LD_VAR 0 2
82783: NOT
82784: OR
82785: IFFALSE 82789
// exit ;
82787: GO 83064
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
82789: LD_ADDR_VAR 0 2
82793: PUSH
82794: LD_VAR 0 1
82798: PPUSH
82799: LD_VAR 0 2
82803: PPUSH
82804: LD_INT 1
82806: PPUSH
82807: LD_INT 1
82809: PPUSH
82810: CALL 47153 0 4
82814: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
82815: LD_ADDR_VAR 0 5
82819: PUSH
82820: LD_EXP 143
82824: PPUSH
82825: LD_VAR 0 1
82829: PPUSH
82830: CALL 46503 0 2
82834: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
82835: LD_EXP 144
82839: PUSH
82840: LD_VAR 0 5
82844: ARRAY
82845: PUSH
82846: LD_EXP 145
82850: LESS
82851: IFFALSE 83040
// begin for i := 1 to vehicles do
82853: LD_ADDR_VAR 0 4
82857: PUSH
82858: DOUBLE
82859: LD_INT 1
82861: DEC
82862: ST_TO_ADDR
82863: LD_VAR 0 2
82867: PUSH
82868: FOR_TO
82869: IFFALSE 83038
// begin if hackTanksCaptured [ index ] = hackLimit then
82871: LD_EXP 144
82875: PUSH
82876: LD_VAR 0 5
82880: ARRAY
82881: PUSH
82882: LD_EXP 145
82886: EQUAL
82887: IFFALSE 82891
// break ;
82889: GO 83038
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
82891: LD_ADDR_EXP 147
82895: PUSH
82896: LD_EXP 147
82900: PPUSH
82901: LD_VAR 0 5
82905: PPUSH
82906: LD_EXP 147
82910: PUSH
82911: LD_VAR 0 5
82915: ARRAY
82916: PUSH
82917: LD_INT 1
82919: PLUS
82920: PPUSH
82921: CALL_OW 1
82925: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
82926: LD_ADDR_EXP 144
82930: PUSH
82931: LD_EXP 144
82935: PPUSH
82936: LD_VAR 0 5
82940: PUSH
82941: LD_EXP 144
82945: PUSH
82946: LD_VAR 0 5
82950: ARRAY
82951: PUSH
82952: LD_INT 1
82954: PLUS
82955: PUSH
82956: EMPTY
82957: LIST
82958: LIST
82959: PPUSH
82960: LD_VAR 0 2
82964: PUSH
82965: LD_VAR 0 4
82969: ARRAY
82970: PUSH
82971: LD_VAR 0 2
82975: PUSH
82976: LD_VAR 0 4
82980: ARRAY
82981: PPUSH
82982: CALL_OW 255
82986: PUSH
82987: EMPTY
82988: LIST
82989: LIST
82990: PPUSH
82991: CALL 46718 0 3
82995: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
82996: LD_VAR 0 2
83000: PUSH
83001: LD_VAR 0 4
83005: ARRAY
83006: PPUSH
83007: LD_VAR 0 1
83011: PPUSH
83012: CALL_OW 255
83016: PPUSH
83017: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
83021: LD_VAR 0 2
83025: PUSH
83026: LD_VAR 0 4
83030: ARRAY
83031: PPUSH
83032: CALL_OW 141
// end ;
83036: GO 82868
83038: POP
83039: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
83040: LD_VAR 0 1
83044: PPUSH
83045: LD_EXP 144
83049: PUSH
83050: LD_VAR 0 5
83054: ARRAY
83055: PUSH
83056: LD_INT 0
83058: PLUS
83059: PPUSH
83060: CALL_OW 505
// end ;
83064: LD_VAR 0 3
83068: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
83069: LD_INT 0
83071: PPUSH
83072: PPUSH
83073: PPUSH
83074: PPUSH
// if not hack in hackTanks then
83075: LD_VAR 0 1
83079: PUSH
83080: LD_EXP 143
83084: IN
83085: NOT
83086: IFFALSE 83090
// exit ;
83088: GO 83330
// index := GetElementIndex ( hackTanks , hack ) ;
83090: LD_ADDR_VAR 0 4
83094: PUSH
83095: LD_EXP 143
83099: PPUSH
83100: LD_VAR 0 1
83104: PPUSH
83105: CALL 46503 0 2
83109: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
83110: LD_ADDR_VAR 0 3
83114: PUSH
83115: DOUBLE
83116: LD_EXP 144
83120: PUSH
83121: LD_VAR 0 4
83125: ARRAY
83126: INC
83127: ST_TO_ADDR
83128: LD_INT 1
83130: PUSH
83131: FOR_DOWNTO
83132: IFFALSE 83304
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
83134: LD_ADDR_VAR 0 5
83138: PUSH
83139: LD_EXP 144
83143: PUSH
83144: LD_VAR 0 4
83148: ARRAY
83149: PUSH
83150: LD_VAR 0 3
83154: ARRAY
83155: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
83156: LD_VAR 0 5
83160: PUSH
83161: LD_INT 1
83163: ARRAY
83164: PPUSH
83165: CALL_OW 302
83169: NOT
83170: PUSH
83171: LD_VAR 0 5
83175: PUSH
83176: LD_INT 1
83178: ARRAY
83179: PPUSH
83180: CALL_OW 255
83184: PUSH
83185: LD_VAR 0 1
83189: PPUSH
83190: CALL_OW 255
83194: NONEQUAL
83195: OR
83196: IFFALSE 83302
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
83198: LD_VAR 0 5
83202: PUSH
83203: LD_INT 1
83205: ARRAY
83206: PPUSH
83207: CALL_OW 305
83211: PUSH
83212: LD_VAR 0 5
83216: PUSH
83217: LD_INT 1
83219: ARRAY
83220: PPUSH
83221: CALL_OW 255
83225: PUSH
83226: LD_VAR 0 1
83230: PPUSH
83231: CALL_OW 255
83235: EQUAL
83236: AND
83237: IFFALSE 83261
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
83239: LD_VAR 0 5
83243: PUSH
83244: LD_INT 1
83246: ARRAY
83247: PPUSH
83248: LD_VAR 0 5
83252: PUSH
83253: LD_INT 2
83255: ARRAY
83256: PPUSH
83257: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
83261: LD_ADDR_EXP 144
83265: PUSH
83266: LD_EXP 144
83270: PPUSH
83271: LD_VAR 0 4
83275: PPUSH
83276: LD_EXP 144
83280: PUSH
83281: LD_VAR 0 4
83285: ARRAY
83286: PPUSH
83287: LD_VAR 0 3
83291: PPUSH
83292: CALL_OW 3
83296: PPUSH
83297: CALL_OW 1
83301: ST_TO_ADDR
// end ; end ;
83302: GO 83131
83304: POP
83305: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
83306: LD_VAR 0 1
83310: PPUSH
83311: LD_EXP 144
83315: PUSH
83316: LD_VAR 0 4
83320: ARRAY
83321: PUSH
83322: LD_INT 0
83324: PLUS
83325: PPUSH
83326: CALL_OW 505
// end ;
83330: LD_VAR 0 2
83334: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
83335: LD_INT 0
83337: PPUSH
83338: PPUSH
83339: PPUSH
83340: PPUSH
// if not hack in hackTanks then
83341: LD_VAR 0 1
83345: PUSH
83346: LD_EXP 143
83350: IN
83351: NOT
83352: IFFALSE 83356
// exit ;
83354: GO 83441
// index := GetElementIndex ( hackTanks , hack ) ;
83356: LD_ADDR_VAR 0 5
83360: PUSH
83361: LD_EXP 143
83365: PPUSH
83366: LD_VAR 0 1
83370: PPUSH
83371: CALL 46503 0 2
83375: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
83376: LD_ADDR_VAR 0 4
83380: PUSH
83381: DOUBLE
83382: LD_INT 1
83384: DEC
83385: ST_TO_ADDR
83386: LD_EXP 144
83390: PUSH
83391: LD_VAR 0 5
83395: ARRAY
83396: PUSH
83397: FOR_TO
83398: IFFALSE 83439
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
83400: LD_EXP 144
83404: PUSH
83405: LD_VAR 0 5
83409: ARRAY
83410: PUSH
83411: LD_VAR 0 4
83415: ARRAY
83416: PUSH
83417: LD_INT 1
83419: ARRAY
83420: PUSH
83421: LD_VAR 0 2
83425: EQUAL
83426: IFFALSE 83437
// KillUnit ( vehicle ) ;
83428: LD_VAR 0 2
83432: PPUSH
83433: CALL_OW 66
83437: GO 83397
83439: POP
83440: POP
// end ;
83441: LD_VAR 0 3
83445: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
83446: LD_EXP 148
83450: NOT
83451: IFFALSE 83486
83453: GO 83455
83455: DISABLE
// begin initMiner := true ;
83456: LD_ADDR_EXP 148
83460: PUSH
83461: LD_INT 1
83463: ST_TO_ADDR
// minersList := [ ] ;
83464: LD_ADDR_EXP 149
83468: PUSH
83469: EMPTY
83470: ST_TO_ADDR
// minerMinesList := [ ] ;
83471: LD_ADDR_EXP 150
83475: PUSH
83476: EMPTY
83477: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
83478: LD_ADDR_EXP 151
83482: PUSH
83483: LD_INT 5
83485: ST_TO_ADDR
// end ;
83486: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
83487: LD_EXP 148
83491: PUSH
83492: LD_INT 34
83494: PUSH
83495: LD_EXP 128
83499: PUSH
83500: EMPTY
83501: LIST
83502: LIST
83503: PPUSH
83504: CALL_OW 69
83508: AND
83509: IFFALSE 83972
83511: GO 83513
83513: DISABLE
83514: LD_INT 0
83516: PPUSH
83517: PPUSH
83518: PPUSH
83519: PPUSH
// begin enable ;
83520: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
83521: LD_ADDR_VAR 0 1
83525: PUSH
83526: LD_INT 34
83528: PUSH
83529: LD_EXP 128
83533: PUSH
83534: EMPTY
83535: LIST
83536: LIST
83537: PPUSH
83538: CALL_OW 69
83542: PUSH
83543: FOR_IN
83544: IFFALSE 83616
// begin if not i in minersList then
83546: LD_VAR 0 1
83550: PUSH
83551: LD_EXP 149
83555: IN
83556: NOT
83557: IFFALSE 83614
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
83559: LD_ADDR_EXP 149
83563: PUSH
83564: LD_EXP 149
83568: PPUSH
83569: LD_EXP 149
83573: PUSH
83574: LD_INT 1
83576: PLUS
83577: PPUSH
83578: LD_VAR 0 1
83582: PPUSH
83583: CALL_OW 1
83587: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
83588: LD_ADDR_EXP 150
83592: PUSH
83593: LD_EXP 150
83597: PPUSH
83598: LD_EXP 150
83602: PUSH
83603: LD_INT 1
83605: PLUS
83606: PPUSH
83607: EMPTY
83608: PPUSH
83609: CALL_OW 1
83613: ST_TO_ADDR
// end end ;
83614: GO 83543
83616: POP
83617: POP
// for i := minerMinesList downto 1 do
83618: LD_ADDR_VAR 0 1
83622: PUSH
83623: DOUBLE
83624: LD_EXP 150
83628: INC
83629: ST_TO_ADDR
83630: LD_INT 1
83632: PUSH
83633: FOR_DOWNTO
83634: IFFALSE 83970
// begin if IsLive ( minersList [ i ] ) then
83636: LD_EXP 149
83640: PUSH
83641: LD_VAR 0 1
83645: ARRAY
83646: PPUSH
83647: CALL_OW 300
83651: IFFALSE 83679
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
83653: LD_EXP 149
83657: PUSH
83658: LD_VAR 0 1
83662: ARRAY
83663: PPUSH
83664: LD_EXP 150
83668: PUSH
83669: LD_VAR 0 1
83673: ARRAY
83674: PPUSH
83675: CALL_OW 505
// if not minerMinesList [ i ] then
83679: LD_EXP 150
83683: PUSH
83684: LD_VAR 0 1
83688: ARRAY
83689: NOT
83690: IFFALSE 83694
// continue ;
83692: GO 83633
// for j := minerMinesList [ i ] downto 1 do
83694: LD_ADDR_VAR 0 2
83698: PUSH
83699: DOUBLE
83700: LD_EXP 150
83704: PUSH
83705: LD_VAR 0 1
83709: ARRAY
83710: INC
83711: ST_TO_ADDR
83712: LD_INT 1
83714: PUSH
83715: FOR_DOWNTO
83716: IFFALSE 83966
// begin side := GetSide ( minersList [ i ] ) ;
83718: LD_ADDR_VAR 0 3
83722: PUSH
83723: LD_EXP 149
83727: PUSH
83728: LD_VAR 0 1
83732: ARRAY
83733: PPUSH
83734: CALL_OW 255
83738: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
83739: LD_ADDR_VAR 0 4
83743: PUSH
83744: LD_EXP 150
83748: PUSH
83749: LD_VAR 0 1
83753: ARRAY
83754: PUSH
83755: LD_VAR 0 2
83759: ARRAY
83760: PUSH
83761: LD_INT 1
83763: ARRAY
83764: PPUSH
83765: LD_EXP 150
83769: PUSH
83770: LD_VAR 0 1
83774: ARRAY
83775: PUSH
83776: LD_VAR 0 2
83780: ARRAY
83781: PUSH
83782: LD_INT 2
83784: ARRAY
83785: PPUSH
83786: CALL_OW 428
83790: ST_TO_ADDR
// if not tmp then
83791: LD_VAR 0 4
83795: NOT
83796: IFFALSE 83800
// continue ;
83798: GO 83715
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
83800: LD_VAR 0 4
83804: PUSH
83805: LD_INT 81
83807: PUSH
83808: LD_VAR 0 3
83812: PUSH
83813: EMPTY
83814: LIST
83815: LIST
83816: PPUSH
83817: CALL_OW 69
83821: IN
83822: PUSH
83823: LD_EXP 150
83827: PUSH
83828: LD_VAR 0 1
83832: ARRAY
83833: PUSH
83834: LD_VAR 0 2
83838: ARRAY
83839: PUSH
83840: LD_INT 1
83842: ARRAY
83843: PPUSH
83844: LD_EXP 150
83848: PUSH
83849: LD_VAR 0 1
83853: ARRAY
83854: PUSH
83855: LD_VAR 0 2
83859: ARRAY
83860: PUSH
83861: LD_INT 2
83863: ARRAY
83864: PPUSH
83865: CALL_OW 458
83869: AND
83870: IFFALSE 83964
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
83872: LD_EXP 150
83876: PUSH
83877: LD_VAR 0 1
83881: ARRAY
83882: PUSH
83883: LD_VAR 0 2
83887: ARRAY
83888: PUSH
83889: LD_INT 1
83891: ARRAY
83892: PPUSH
83893: LD_EXP 150
83897: PUSH
83898: LD_VAR 0 1
83902: ARRAY
83903: PUSH
83904: LD_VAR 0 2
83908: ARRAY
83909: PUSH
83910: LD_INT 2
83912: ARRAY
83913: PPUSH
83914: LD_VAR 0 3
83918: PPUSH
83919: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
83923: LD_ADDR_EXP 150
83927: PUSH
83928: LD_EXP 150
83932: PPUSH
83933: LD_VAR 0 1
83937: PPUSH
83938: LD_EXP 150
83942: PUSH
83943: LD_VAR 0 1
83947: ARRAY
83948: PPUSH
83949: LD_VAR 0 2
83953: PPUSH
83954: CALL_OW 3
83958: PPUSH
83959: CALL_OW 1
83963: ST_TO_ADDR
// end ; end ;
83964: GO 83715
83966: POP
83967: POP
// end ;
83968: GO 83633
83970: POP
83971: POP
// end ;
83972: PPOPN 4
83974: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
83975: LD_INT 0
83977: PPUSH
83978: PPUSH
// result := false ;
83979: LD_ADDR_VAR 0 4
83983: PUSH
83984: LD_INT 0
83986: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
83987: LD_VAR 0 1
83991: PPUSH
83992: CALL_OW 264
83996: PUSH
83997: LD_EXP 128
84001: EQUAL
84002: NOT
84003: IFFALSE 84007
// exit ;
84005: GO 84247
// index := GetElementIndex ( minersList , unit ) ;
84007: LD_ADDR_VAR 0 5
84011: PUSH
84012: LD_EXP 149
84016: PPUSH
84017: LD_VAR 0 1
84021: PPUSH
84022: CALL 46503 0 2
84026: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
84027: LD_EXP 150
84031: PUSH
84032: LD_VAR 0 5
84036: ARRAY
84037: PUSH
84038: LD_EXP 151
84042: GREATEREQUAL
84043: IFFALSE 84047
// exit ;
84045: GO 84247
// ComMoveXY ( unit , x , y ) ;
84047: LD_VAR 0 1
84051: PPUSH
84052: LD_VAR 0 2
84056: PPUSH
84057: LD_VAR 0 3
84061: PPUSH
84062: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
84066: LD_INT 35
84068: PPUSH
84069: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
84073: LD_VAR 0 1
84077: PPUSH
84078: LD_VAR 0 2
84082: PPUSH
84083: LD_VAR 0 3
84087: PPUSH
84088: CALL 77275 0 3
84092: NOT
84093: PUSH
84094: LD_VAR 0 1
84098: PPUSH
84099: CALL_OW 314
84103: AND
84104: IFFALSE 84108
// exit ;
84106: GO 84247
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
84108: LD_VAR 0 2
84112: PPUSH
84113: LD_VAR 0 3
84117: PPUSH
84118: CALL_OW 428
84122: PUSH
84123: LD_VAR 0 1
84127: EQUAL
84128: PUSH
84129: LD_VAR 0 1
84133: PPUSH
84134: CALL_OW 314
84138: NOT
84139: AND
84140: IFFALSE 84066
// PlaySoundXY ( x , y , PlantMine ) ;
84142: LD_VAR 0 2
84146: PPUSH
84147: LD_VAR 0 3
84151: PPUSH
84152: LD_STRING PlantMine
84154: PPUSH
84155: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
84159: LD_VAR 0 2
84163: PPUSH
84164: LD_VAR 0 3
84168: PPUSH
84169: LD_VAR 0 1
84173: PPUSH
84174: CALL_OW 255
84178: PPUSH
84179: LD_INT 0
84181: PPUSH
84182: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
84186: LD_ADDR_EXP 150
84190: PUSH
84191: LD_EXP 150
84195: PPUSH
84196: LD_VAR 0 5
84200: PUSH
84201: LD_EXP 150
84205: PUSH
84206: LD_VAR 0 5
84210: ARRAY
84211: PUSH
84212: LD_INT 1
84214: PLUS
84215: PUSH
84216: EMPTY
84217: LIST
84218: LIST
84219: PPUSH
84220: LD_VAR 0 2
84224: PUSH
84225: LD_VAR 0 3
84229: PUSH
84230: EMPTY
84231: LIST
84232: LIST
84233: PPUSH
84234: CALL 46718 0 3
84238: ST_TO_ADDR
// result := true ;
84239: LD_ADDR_VAR 0 4
84243: PUSH
84244: LD_INT 1
84246: ST_TO_ADDR
// end ;
84247: LD_VAR 0 4
84251: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
84252: LD_INT 0
84254: PPUSH
84255: PPUSH
84256: PPUSH
// if not unit in minersList then
84257: LD_VAR 0 1
84261: PUSH
84262: LD_EXP 149
84266: IN
84267: NOT
84268: IFFALSE 84272
// exit ;
84270: GO 84664
// index := GetElementIndex ( minersList , unit ) ;
84272: LD_ADDR_VAR 0 6
84276: PUSH
84277: LD_EXP 149
84281: PPUSH
84282: LD_VAR 0 1
84286: PPUSH
84287: CALL 46503 0 2
84291: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
84292: LD_ADDR_VAR 0 5
84296: PUSH
84297: DOUBLE
84298: LD_EXP 150
84302: PUSH
84303: LD_VAR 0 6
84307: ARRAY
84308: INC
84309: ST_TO_ADDR
84310: LD_INT 1
84312: PUSH
84313: FOR_DOWNTO
84314: IFFALSE 84475
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
84316: LD_EXP 150
84320: PUSH
84321: LD_VAR 0 6
84325: ARRAY
84326: PUSH
84327: LD_VAR 0 5
84331: ARRAY
84332: PUSH
84333: LD_INT 1
84335: ARRAY
84336: PUSH
84337: LD_VAR 0 2
84341: EQUAL
84342: PUSH
84343: LD_EXP 150
84347: PUSH
84348: LD_VAR 0 6
84352: ARRAY
84353: PUSH
84354: LD_VAR 0 5
84358: ARRAY
84359: PUSH
84360: LD_INT 2
84362: ARRAY
84363: PUSH
84364: LD_VAR 0 3
84368: EQUAL
84369: AND
84370: IFFALSE 84473
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84372: LD_EXP 150
84376: PUSH
84377: LD_VAR 0 6
84381: ARRAY
84382: PUSH
84383: LD_VAR 0 5
84387: ARRAY
84388: PUSH
84389: LD_INT 1
84391: ARRAY
84392: PPUSH
84393: LD_EXP 150
84397: PUSH
84398: LD_VAR 0 6
84402: ARRAY
84403: PUSH
84404: LD_VAR 0 5
84408: ARRAY
84409: PUSH
84410: LD_INT 2
84412: ARRAY
84413: PPUSH
84414: LD_VAR 0 1
84418: PPUSH
84419: CALL_OW 255
84423: PPUSH
84424: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84428: LD_ADDR_EXP 150
84432: PUSH
84433: LD_EXP 150
84437: PPUSH
84438: LD_VAR 0 6
84442: PPUSH
84443: LD_EXP 150
84447: PUSH
84448: LD_VAR 0 6
84452: ARRAY
84453: PPUSH
84454: LD_VAR 0 5
84458: PPUSH
84459: CALL_OW 3
84463: PPUSH
84464: CALL_OW 1
84468: ST_TO_ADDR
// exit ;
84469: POP
84470: POP
84471: GO 84664
// end ; end ;
84473: GO 84313
84475: POP
84476: POP
// for i := minerMinesList [ index ] downto 1 do
84477: LD_ADDR_VAR 0 5
84481: PUSH
84482: DOUBLE
84483: LD_EXP 150
84487: PUSH
84488: LD_VAR 0 6
84492: ARRAY
84493: INC
84494: ST_TO_ADDR
84495: LD_INT 1
84497: PUSH
84498: FOR_DOWNTO
84499: IFFALSE 84662
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
84501: LD_EXP 150
84505: PUSH
84506: LD_VAR 0 6
84510: ARRAY
84511: PUSH
84512: LD_VAR 0 5
84516: ARRAY
84517: PUSH
84518: LD_INT 1
84520: ARRAY
84521: PPUSH
84522: LD_EXP 150
84526: PUSH
84527: LD_VAR 0 6
84531: ARRAY
84532: PUSH
84533: LD_VAR 0 5
84537: ARRAY
84538: PUSH
84539: LD_INT 2
84541: ARRAY
84542: PPUSH
84543: LD_VAR 0 2
84547: PPUSH
84548: LD_VAR 0 3
84552: PPUSH
84553: CALL_OW 298
84557: PUSH
84558: LD_INT 6
84560: LESS
84561: IFFALSE 84660
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
84563: LD_EXP 150
84567: PUSH
84568: LD_VAR 0 6
84572: ARRAY
84573: PUSH
84574: LD_VAR 0 5
84578: ARRAY
84579: PUSH
84580: LD_INT 1
84582: ARRAY
84583: PPUSH
84584: LD_EXP 150
84588: PUSH
84589: LD_VAR 0 6
84593: ARRAY
84594: PUSH
84595: LD_VAR 0 5
84599: ARRAY
84600: PUSH
84601: LD_INT 2
84603: ARRAY
84604: PPUSH
84605: LD_VAR 0 1
84609: PPUSH
84610: CALL_OW 255
84614: PPUSH
84615: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
84619: LD_ADDR_EXP 150
84623: PUSH
84624: LD_EXP 150
84628: PPUSH
84629: LD_VAR 0 6
84633: PPUSH
84634: LD_EXP 150
84638: PUSH
84639: LD_VAR 0 6
84643: ARRAY
84644: PPUSH
84645: LD_VAR 0 5
84649: PPUSH
84650: CALL_OW 3
84654: PPUSH
84655: CALL_OW 1
84659: ST_TO_ADDR
// end ; end ;
84660: GO 84498
84662: POP
84663: POP
// end ;
84664: LD_VAR 0 4
84668: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
84669: LD_INT 0
84671: PPUSH
84672: PPUSH
84673: PPUSH
84674: PPUSH
84675: PPUSH
84676: PPUSH
84677: PPUSH
84678: PPUSH
84679: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
84680: LD_VAR 0 1
84684: PPUSH
84685: CALL_OW 264
84689: PUSH
84690: LD_EXP 128
84694: EQUAL
84695: NOT
84696: PUSH
84697: LD_VAR 0 1
84701: PUSH
84702: LD_EXP 149
84706: IN
84707: NOT
84708: OR
84709: IFFALSE 84713
// exit ;
84711: GO 85035
// index := GetElementIndex ( minersList , unit ) ;
84713: LD_ADDR_VAR 0 6
84717: PUSH
84718: LD_EXP 149
84722: PPUSH
84723: LD_VAR 0 1
84727: PPUSH
84728: CALL 46503 0 2
84732: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
84733: LD_ADDR_VAR 0 8
84737: PUSH
84738: LD_EXP 151
84742: PUSH
84743: LD_EXP 150
84747: PUSH
84748: LD_VAR 0 6
84752: ARRAY
84753: MINUS
84754: ST_TO_ADDR
// if not minesFreeAmount then
84755: LD_VAR 0 8
84759: NOT
84760: IFFALSE 84764
// exit ;
84762: GO 85035
// tmp := [ ] ;
84764: LD_ADDR_VAR 0 7
84768: PUSH
84769: EMPTY
84770: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
84771: LD_ADDR_VAR 0 5
84775: PUSH
84776: DOUBLE
84777: LD_INT 1
84779: DEC
84780: ST_TO_ADDR
84781: LD_VAR 0 8
84785: PUSH
84786: FOR_TO
84787: IFFALSE 84982
// begin _d := rand ( 0 , 5 ) ;
84789: LD_ADDR_VAR 0 11
84793: PUSH
84794: LD_INT 0
84796: PPUSH
84797: LD_INT 5
84799: PPUSH
84800: CALL_OW 12
84804: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
84805: LD_ADDR_VAR 0 12
84809: PUSH
84810: LD_INT 2
84812: PPUSH
84813: LD_INT 6
84815: PPUSH
84816: CALL_OW 12
84820: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
84821: LD_ADDR_VAR 0 9
84825: PUSH
84826: LD_VAR 0 2
84830: PPUSH
84831: LD_VAR 0 11
84835: PPUSH
84836: LD_VAR 0 12
84840: PPUSH
84841: CALL_OW 272
84845: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
84846: LD_ADDR_VAR 0 10
84850: PUSH
84851: LD_VAR 0 3
84855: PPUSH
84856: LD_VAR 0 11
84860: PPUSH
84861: LD_VAR 0 12
84865: PPUSH
84866: CALL_OW 273
84870: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
84871: LD_VAR 0 9
84875: PPUSH
84876: LD_VAR 0 10
84880: PPUSH
84881: CALL_OW 488
84885: PUSH
84886: LD_VAR 0 9
84890: PUSH
84891: LD_VAR 0 10
84895: PUSH
84896: EMPTY
84897: LIST
84898: LIST
84899: PUSH
84900: LD_VAR 0 7
84904: IN
84905: NOT
84906: AND
84907: PUSH
84908: LD_VAR 0 9
84912: PPUSH
84913: LD_VAR 0 10
84917: PPUSH
84918: CALL_OW 458
84922: NOT
84923: AND
84924: IFFALSE 84966
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
84926: LD_ADDR_VAR 0 7
84930: PUSH
84931: LD_VAR 0 7
84935: PPUSH
84936: LD_VAR 0 7
84940: PUSH
84941: LD_INT 1
84943: PLUS
84944: PPUSH
84945: LD_VAR 0 9
84949: PUSH
84950: LD_VAR 0 10
84954: PUSH
84955: EMPTY
84956: LIST
84957: LIST
84958: PPUSH
84959: CALL_OW 1
84963: ST_TO_ADDR
84964: GO 84980
// i := i - 1 ;
84966: LD_ADDR_VAR 0 5
84970: PUSH
84971: LD_VAR 0 5
84975: PUSH
84976: LD_INT 1
84978: MINUS
84979: ST_TO_ADDR
// end ;
84980: GO 84786
84982: POP
84983: POP
// for i in tmp do
84984: LD_ADDR_VAR 0 5
84988: PUSH
84989: LD_VAR 0 7
84993: PUSH
84994: FOR_IN
84995: IFFALSE 85033
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
84997: LD_VAR 0 1
85001: PPUSH
85002: LD_VAR 0 5
85006: PUSH
85007: LD_INT 1
85009: ARRAY
85010: PPUSH
85011: LD_VAR 0 5
85015: PUSH
85016: LD_INT 2
85018: ARRAY
85019: PPUSH
85020: CALL 83975 0 3
85024: NOT
85025: IFFALSE 85031
// exit ;
85027: POP
85028: POP
85029: GO 85035
85031: GO 84994
85033: POP
85034: POP
// end ;
85035: LD_VAR 0 4
85039: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
85040: LD_INT 0
85042: PPUSH
85043: PPUSH
85044: PPUSH
85045: PPUSH
85046: PPUSH
85047: PPUSH
85048: PPUSH
// if not GetClass ( unit ) = class_sniper then
85049: LD_VAR 0 1
85053: PPUSH
85054: CALL_OW 257
85058: PUSH
85059: LD_INT 5
85061: EQUAL
85062: NOT
85063: IFFALSE 85067
// exit ;
85065: GO 85455
// dist := 8 ;
85067: LD_ADDR_VAR 0 5
85071: PUSH
85072: LD_INT 8
85074: ST_TO_ADDR
// viewRange := 12 ;
85075: LD_ADDR_VAR 0 7
85079: PUSH
85080: LD_INT 12
85082: ST_TO_ADDR
// side := GetSide ( unit ) ;
85083: LD_ADDR_VAR 0 6
85087: PUSH
85088: LD_VAR 0 1
85092: PPUSH
85093: CALL_OW 255
85097: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
85098: LD_INT 61
85100: PPUSH
85101: LD_VAR 0 6
85105: PPUSH
85106: CALL_OW 321
85110: PUSH
85111: LD_INT 2
85113: EQUAL
85114: IFFALSE 85124
// viewRange := 16 ;
85116: LD_ADDR_VAR 0 7
85120: PUSH
85121: LD_INT 16
85123: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
85124: LD_VAR 0 1
85128: PPUSH
85129: LD_VAR 0 2
85133: PPUSH
85134: LD_VAR 0 3
85138: PPUSH
85139: CALL_OW 297
85143: PUSH
85144: LD_VAR 0 5
85148: GREATER
85149: IFFALSE 85228
// begin ComMoveXY ( unit , x , y ) ;
85151: LD_VAR 0 1
85155: PPUSH
85156: LD_VAR 0 2
85160: PPUSH
85161: LD_VAR 0 3
85165: PPUSH
85166: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
85170: LD_INT 35
85172: PPUSH
85173: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
85177: LD_VAR 0 1
85181: PPUSH
85182: LD_VAR 0 2
85186: PPUSH
85187: LD_VAR 0 3
85191: PPUSH
85192: CALL 77275 0 3
85196: NOT
85197: IFFALSE 85201
// exit ;
85199: GO 85455
// until GetDistUnitXY ( unit , x , y ) < dist ;
85201: LD_VAR 0 1
85205: PPUSH
85206: LD_VAR 0 2
85210: PPUSH
85211: LD_VAR 0 3
85215: PPUSH
85216: CALL_OW 297
85220: PUSH
85221: LD_VAR 0 5
85225: LESS
85226: IFFALSE 85170
// end ; ComTurnXY ( unit , x , y ) ;
85228: LD_VAR 0 1
85232: PPUSH
85233: LD_VAR 0 2
85237: PPUSH
85238: LD_VAR 0 3
85242: PPUSH
85243: CALL_OW 118
// wait ( 5 ) ;
85247: LD_INT 5
85249: PPUSH
85250: CALL_OW 67
// _d := GetDir ( unit ) ;
85254: LD_ADDR_VAR 0 10
85258: PUSH
85259: LD_VAR 0 1
85263: PPUSH
85264: CALL_OW 254
85268: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
85269: LD_ADDR_VAR 0 8
85273: PUSH
85274: LD_VAR 0 1
85278: PPUSH
85279: CALL_OW 250
85283: PPUSH
85284: LD_VAR 0 10
85288: PPUSH
85289: LD_VAR 0 5
85293: PPUSH
85294: CALL_OW 272
85298: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
85299: LD_ADDR_VAR 0 9
85303: PUSH
85304: LD_VAR 0 1
85308: PPUSH
85309: CALL_OW 251
85313: PPUSH
85314: LD_VAR 0 10
85318: PPUSH
85319: LD_VAR 0 5
85323: PPUSH
85324: CALL_OW 273
85328: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
85329: LD_VAR 0 8
85333: PPUSH
85334: LD_VAR 0 9
85338: PPUSH
85339: CALL_OW 488
85343: NOT
85344: IFFALSE 85348
// exit ;
85346: GO 85455
// ComAnimCustom ( unit , 1 ) ;
85348: LD_VAR 0 1
85352: PPUSH
85353: LD_INT 1
85355: PPUSH
85356: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
85360: LD_VAR 0 8
85364: PPUSH
85365: LD_VAR 0 9
85369: PPUSH
85370: LD_VAR 0 6
85374: PPUSH
85375: LD_VAR 0 7
85379: PPUSH
85380: CALL_OW 330
// repeat wait ( 1 ) ;
85384: LD_INT 1
85386: PPUSH
85387: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
85391: LD_VAR 0 1
85395: PPUSH
85396: CALL_OW 316
85400: PUSH
85401: LD_VAR 0 1
85405: PPUSH
85406: CALL_OW 314
85410: OR
85411: PUSH
85412: LD_VAR 0 1
85416: PPUSH
85417: CALL_OW 302
85421: NOT
85422: OR
85423: PUSH
85424: LD_VAR 0 1
85428: PPUSH
85429: CALL_OW 301
85433: OR
85434: IFFALSE 85384
// RemoveSeeing ( _x , _y , side ) ;
85436: LD_VAR 0 8
85440: PPUSH
85441: LD_VAR 0 9
85445: PPUSH
85446: LD_VAR 0 6
85450: PPUSH
85451: CALL_OW 331
// end ; end_of_file
85455: LD_VAR 0 4
85459: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
85460: LD_VAR 0 1
85464: PUSH
85465: LD_INT 200
85467: DOUBLE
85468: GREATEREQUAL
85469: IFFALSE 85477
85471: LD_INT 299
85473: DOUBLE
85474: LESSEQUAL
85475: IFTRUE 85479
85477: GO 85511
85479: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
85480: LD_VAR 0 1
85484: PPUSH
85485: LD_VAR 0 2
85489: PPUSH
85490: LD_VAR 0 3
85494: PPUSH
85495: LD_VAR 0 4
85499: PPUSH
85500: LD_VAR 0 5
85504: PPUSH
85505: CALL 81577 0 5
85509: GO 85588
85511: LD_INT 300
85513: DOUBLE
85514: GREATEREQUAL
85515: IFFALSE 85523
85517: LD_INT 399
85519: DOUBLE
85520: LESSEQUAL
85521: IFTRUE 85525
85523: GO 85587
85525: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
85526: LD_VAR 0 1
85530: PPUSH
85531: LD_VAR 0 2
85535: PPUSH
85536: LD_VAR 0 3
85540: PPUSH
85541: LD_VAR 0 4
85545: PPUSH
85546: LD_VAR 0 5
85550: PPUSH
85551: LD_VAR 0 6
85555: PPUSH
85556: LD_VAR 0 7
85560: PPUSH
85561: LD_VAR 0 8
85565: PPUSH
85566: LD_VAR 0 9
85570: PPUSH
85571: LD_VAR 0 10
85575: PPUSH
85576: LD_VAR 0 11
85580: PPUSH
85581: CALL 39752 0 11
85585: GO 85588
85587: POP
// end ;
85588: PPOPN 11
85590: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
85591: LD_VAR 0 1
85595: PPUSH
85596: LD_VAR 0 2
85600: PPUSH
85601: LD_VAR 0 3
85605: PPUSH
85606: LD_VAR 0 4
85610: PPUSH
85611: LD_VAR 0 5
85615: PPUSH
85616: CALL 81569 0 5
// end ;
85620: PPOPN 5
85622: END
